
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20005bc0 	.word	0x20005bc0
}
   4:	00013ecd 	.word	0x00013ecd
   8:	000206b3 	.word	0x000206b3
   c:	00013e85 	.word	0x00013e85
  10:	00013e85 	.word	0x00013e85
  14:	00013e85 	.word	0x00013e85
  18:	00013e85 	.word	0x00013e85
	...
  2c:	00013b05 	.word	0x00013b05
  30:	00013e85 	.word	0x00013e85
  34:	00000000 	.word	0x00000000
  38:	00013aad 	.word	0x00013aad
  3c:	00013e85 	.word	0x00013e85

00000040 <_irq_vector_table>:
  40:	00013bf1 00024799 00013bf1 00013bf1     .;...G...;...;..
  50:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  60:	00024761 00013bf1 00013bf1 0002477f     aG...;...;...G..
  70:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  80:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  90:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  a0:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  b0:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  c0:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  d0:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  e0:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..
  f0:	00013bf1 00013bf1 00013bf1 00013bf1     .;...;...;...;..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x5c>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_IDLE_STACK_SIZE+0x8e>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <CONFIG_IDLE_STACK_SIZE+0xa6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2a>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4a>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x58>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_drsub>:
     268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__adddf3>
     26e:	bf00      	nop

00000270 <__aeabi_dsub>:
     270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000274 <__adddf3>:
     274:	b530      	push	{r4, r5, lr}
     276:	ea4f 0441 	mov.w	r4, r1, lsl #1
     27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     27e:	ea94 0f05 	teq	r4, r5
     282:	bf08      	it	eq
     284:	ea90 0f02 	teqeq	r0, r2
     288:	bf1f      	itttt	ne
     28a:	ea54 0c00 	orrsne.w	ip, r4, r0
     28e:	ea55 0c02 	orrsne.w	ip, r5, r2
     292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     29a:	f000 80e2 	beq.w	462 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x62>
     29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     2a6:	bfb8      	it	lt
     2a8:	426d      	neglt	r5, r5
     2aa:	dd0c      	ble.n	2c6 <__adddf3+0x52>
     2ac:	442c      	add	r4, r5
     2ae:	ea80 0202 	eor.w	r2, r0, r2
     2b2:	ea81 0303 	eor.w	r3, r1, r3
     2b6:	ea82 0000 	eor.w	r0, r2, r0
     2ba:	ea83 0101 	eor.w	r1, r3, r1
     2be:	ea80 0202 	eor.w	r2, r0, r2
     2c2:	ea81 0303 	eor.w	r3, r1, r3
     2c6:	2d36      	cmp	r5, #54	; 0x36
     2c8:	bf88      	it	hi
     2ca:	bd30      	pophi	{r4, r5, pc}
     2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     2dc:	d002      	beq.n	2e4 <__adddf3+0x70>
     2de:	4240      	negs	r0, r0
     2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2f0:	d002      	beq.n	2f8 <__adddf3+0x84>
     2f2:	4252      	negs	r2, r2
     2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2f8:	ea94 0f05 	teq	r4, r5
     2fc:	f000 80a7 	beq.w	44e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4e>
     300:	f1a4 0401 	sub.w	r4, r4, #1
     304:	f1d5 0e20 	rsbs	lr, r5, #32
     308:	db0d      	blt.n	326 <__adddf3+0xb2>
     30a:	fa02 fc0e 	lsl.w	ip, r2, lr
     30e:	fa22 f205 	lsr.w	r2, r2, r5
     312:	1880      	adds	r0, r0, r2
     314:	f141 0100 	adc.w	r1, r1, #0
     318:	fa03 f20e 	lsl.w	r2, r3, lr
     31c:	1880      	adds	r0, r0, r2
     31e:	fa43 f305 	asr.w	r3, r3, r5
     322:	4159      	adcs	r1, r3
     324:	e00e      	b.n	344 <__adddf3+0xd0>
     326:	f1a5 0520 	sub.w	r5, r5, #32
     32a:	f10e 0e20 	add.w	lr, lr, #32
     32e:	2a01      	cmp	r2, #1
     330:	fa03 fc0e 	lsl.w	ip, r3, lr
     334:	bf28      	it	cs
     336:	f04c 0c02 	orrcs.w	ip, ip, #2
     33a:	fa43 f305 	asr.w	r3, r3, r5
     33e:	18c0      	adds	r0, r0, r3
     340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     348:	d507      	bpl.n	35a <__adddf3+0xe6>
     34a:	f04f 0e00 	mov.w	lr, #0
     34e:	f1dc 0c00 	rsbs	ip, ip, #0
     352:	eb7e 0000 	sbcs.w	r0, lr, r0
     356:	eb6e 0101 	sbc.w	r1, lr, r1
     35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     35e:	d31b      	bcc.n	398 <__adddf3+0x124>
     360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     364:	d30c      	bcc.n	380 <__adddf3+0x10c>
     366:	0849      	lsrs	r1, r1, #1
     368:	ea5f 0030 	movs.w	r0, r0, rrx
     36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     370:	f104 0401 	add.w	r4, r4, #1
     374:	ea4f 5244 	mov.w	r2, r4, lsl #21
     378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     37c:	f080 809a 	bcs.w	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     384:	bf08      	it	eq
     386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     38a:	f150 0000 	adcs.w	r0, r0, #0
     38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     392:	ea41 0105 	orr.w	r1, r1, r5
     396:	bd30      	pop	{r4, r5, pc}
     398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     39c:	4140      	adcs	r0, r0
     39e:	eb41 0101 	adc.w	r1, r1, r1
     3a2:	3c01      	subs	r4, #1
     3a4:	bf28      	it	cs
     3a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     3aa:	d2e9      	bcs.n	380 <__adddf3+0x10c>
     3ac:	f091 0f00 	teq	r1, #0
     3b0:	bf04      	itt	eq
     3b2:	4601      	moveq	r1, r0
     3b4:	2000      	moveq	r0, #0
     3b6:	fab1 f381 	clz	r3, r1
     3ba:	bf08      	it	eq
     3bc:	3320      	addeq	r3, #32
     3be:	f1a3 030b 	sub.w	r3, r3, #11
     3c2:	f1b3 0220 	subs.w	r2, r3, #32
     3c6:	da0c      	bge.n	3e2 <__adddf3+0x16e>
     3c8:	320c      	adds	r2, #12
     3ca:	dd08      	ble.n	3de <__adddf3+0x16a>
     3cc:	f102 0c14 	add.w	ip, r2, #20
     3d0:	f1c2 020c 	rsb	r2, r2, #12
     3d4:	fa01 f00c 	lsl.w	r0, r1, ip
     3d8:	fa21 f102 	lsr.w	r1, r1, r2
     3dc:	e00c      	b.n	3f8 <__adddf3+0x184>
     3de:	f102 0214 	add.w	r2, r2, #20
     3e2:	bfd8      	it	le
     3e4:	f1c2 0c20 	rsble	ip, r2, #32
     3e8:	fa01 f102 	lsl.w	r1, r1, r2
     3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
     3f0:	bfdc      	itt	le
     3f2:	ea41 010c 	orrle.w	r1, r1, ip
     3f6:	4090      	lslle	r0, r2
     3f8:	1ae4      	subs	r4, r4, r3
     3fa:	bfa2      	ittt	ge
     3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     400:	4329      	orrge	r1, r5
     402:	bd30      	popge	{r4, r5, pc}
     404:	ea6f 0404 	mvn.w	r4, r4
     408:	3c1f      	subs	r4, #31
     40a:	da1c      	bge.n	446 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x46>
     40c:	340c      	adds	r4, #12
     40e:	dc0e      	bgt.n	42e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2e>
     410:	f104 0414 	add.w	r4, r4, #20
     414:	f1c4 0220 	rsb	r2, r4, #32
     418:	fa20 f004 	lsr.w	r0, r0, r4
     41c:	fa01 f302 	lsl.w	r3, r1, r2
     420:	ea40 0003 	orr.w	r0, r0, r3
     424:	fa21 f304 	lsr.w	r3, r1, r4
     428:	ea45 0103 	orr.w	r1, r5, r3
     42c:	bd30      	pop	{r4, r5, pc}
     42e:	f1c4 040c 	rsb	r4, r4, #12
     432:	f1c4 0220 	rsb	r2, r4, #32
     436:	fa20 f002 	lsr.w	r0, r0, r2
     43a:	fa01 f304 	lsl.w	r3, r1, r4
     43e:	ea40 0003 	orr.w	r0, r0, r3
     442:	4629      	mov	r1, r5
     444:	bd30      	pop	{r4, r5, pc}
     446:	fa21 f004 	lsr.w	r0, r1, r4
     44a:	4629      	mov	r1, r5
     44c:	bd30      	pop	{r4, r5, pc}
     44e:	f094 0f00 	teq	r4, #0
     452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     456:	bf06      	itte	eq
     458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     45c:	3401      	addeq	r4, #1
     45e:	3d01      	subne	r5, #1
     460:	e74e      	b.n	300 <__adddf3+0x8c>
     462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     466:	bf18      	it	ne
     468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     46c:	d029      	beq.n	4c2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4e>
     46e:	ea94 0f05 	teq	r4, r5
     472:	bf08      	it	eq
     474:	ea90 0f02 	teqeq	r0, r2
     478:	d005      	beq.n	486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     47a:	ea54 0c00 	orrs.w	ip, r4, r0
     47e:	bf04      	itt	eq
     480:	4619      	moveq	r1, r3
     482:	4610      	moveq	r0, r2
     484:	bd30      	pop	{r4, r5, pc}
     486:	ea91 0f03 	teq	r1, r3
     48a:	bf1e      	ittt	ne
     48c:	2100      	movne	r1, #0
     48e:	2000      	movne	r0, #0
     490:	bd30      	popne	{r4, r5, pc}
     492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     496:	d105      	bne.n	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     498:	0040      	lsls	r0, r0, #1
     49a:	4149      	adcs	r1, r1
     49c:	bf28      	it	cs
     49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     4a2:	bd30      	pop	{r4, r5, pc}
     4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     4a8:	bf3c      	itt	cc
     4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     4ae:	bd30      	popcc	{r4, r5, pc}
     4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	bd30      	pop	{r4, r5, pc}
     4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     4c6:	bf1a      	itte	ne
     4c8:	4619      	movne	r1, r3
     4ca:	4610      	movne	r0, r2
     4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     4d0:	bf1c      	itt	ne
     4d2:	460b      	movne	r3, r1
     4d4:	4602      	movne	r2, r0
     4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     4da:	bf06      	itte	eq
     4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     4e0:	ea91 0f03 	teqeq	r1, r3
     4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4e8:	bd30      	pop	{r4, r5, pc}
     4ea:	bf00      	nop

000004ec <__aeabi_ui2d>:
     4ec:	f090 0f00 	teq	r0, #0
     4f0:	bf04      	itt	eq
     4f2:	2100      	moveq	r1, #0
     4f4:	4770      	bxeq	lr
     4f6:	b530      	push	{r4, r5, lr}
     4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     500:	f04f 0500 	mov.w	r5, #0
     504:	f04f 0100 	mov.w	r1, #0
     508:	e750      	b.n	3ac <__adddf3+0x138>
     50a:	bf00      	nop

0000050c <__aeabi_i2d>:
     50c:	f090 0f00 	teq	r0, #0
     510:	bf04      	itt	eq
     512:	2100      	moveq	r1, #0
     514:	4770      	bxeq	lr
     516:	b530      	push	{r4, r5, lr}
     518:	f44f 6480 	mov.w	r4, #1024	; 0x400
     51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     524:	bf48      	it	mi
     526:	4240      	negmi	r0, r0
     528:	f04f 0100 	mov.w	r1, #0
     52c:	e73e      	b.n	3ac <__adddf3+0x138>
     52e:	bf00      	nop

00000530 <__aeabi_f2d>:
     530:	0042      	lsls	r2, r0, #1
     532:	ea4f 01e2 	mov.w	r1, r2, asr #3
     536:	ea4f 0131 	mov.w	r1, r1, rrx
     53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     53e:	bf1f      	itttt	ne
     540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     54c:	4770      	bxne	lr
     54e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     552:	bf08      	it	eq
     554:	4770      	bxeq	lr
     556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     55a:	bf04      	itt	eq
     55c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     560:	4770      	bxeq	lr
     562:	b530      	push	{r4, r5, lr}
     564:	f44f 7460 	mov.w	r4, #896	; 0x380
     568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	e71c      	b.n	3ac <__adddf3+0x138>
     572:	bf00      	nop

00000574 <__aeabi_ul2d>:
     574:	ea50 0201 	orrs.w	r2, r0, r1
     578:	bf08      	it	eq
     57a:	4770      	bxeq	lr
     57c:	b530      	push	{r4, r5, lr}
     57e:	f04f 0500 	mov.w	r5, #0
     582:	e00a      	b.n	59a <__aeabi_l2d+0x16>

00000584 <__aeabi_l2d>:
     584:	ea50 0201 	orrs.w	r2, r0, r1
     588:	bf08      	it	eq
     58a:	4770      	bxeq	lr
     58c:	b530      	push	{r4, r5, lr}
     58e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     592:	d502      	bpl.n	59a <__aeabi_l2d+0x16>
     594:	4240      	negs	r0, r0
     596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     59a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     59e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     5a6:	f43f aed8 	beq.w	35a <__adddf3+0xe6>
     5aa:	f04f 0203 	mov.w	r2, #3
     5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5b2:	bf18      	it	ne
     5b4:	3203      	addne	r2, #3
     5b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5ba:	bf18      	it	ne
     5bc:	3203      	addne	r2, #3
     5be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     5c2:	f1c2 0320 	rsb	r3, r2, #32
     5c6:	fa00 fc03 	lsl.w	ip, r0, r3
     5ca:	fa20 f002 	lsr.w	r0, r0, r2
     5ce:	fa01 fe03 	lsl.w	lr, r1, r3
     5d2:	ea40 000e 	orr.w	r0, r0, lr
     5d6:	fa21 f102 	lsr.w	r1, r1, r2
     5da:	4414      	add	r4, r2
     5dc:	e6bd      	b.n	35a <__adddf3+0xe6>
     5de:	bf00      	nop

000005e0 <__aeabi_dmul>:
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     5e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     5ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     5ee:	bf1d      	ittte	ne
     5f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     5f4:	ea94 0f0c 	teqne	r4, ip
     5f8:	ea95 0f0c 	teqne	r5, ip
     5fc:	f000 f8de 	bleq	7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>
     600:	442c      	add	r4, r5
     602:	ea81 0603 	eor.w	r6, r1, r3
     606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     60a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     60e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     612:	bf18      	it	ne
     614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     620:	d038      	beq.n	694 <CONFIG_BT_HCI_TX_STACK_SIZE+0x94>
     622:	fba0 ce02 	umull	ip, lr, r0, r2
     626:	f04f 0500 	mov.w	r5, #0
     62a:	fbe1 e502 	umlal	lr, r5, r1, r2
     62e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     632:	fbe0 e503 	umlal	lr, r5, r0, r3
     636:	f04f 0600 	mov.w	r6, #0
     63a:	fbe1 5603 	umlal	r5, r6, r1, r3
     63e:	f09c 0f00 	teq	ip, #0
     642:	bf18      	it	ne
     644:	f04e 0e01 	orrne.w	lr, lr, #1
     648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     64c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     654:	d204      	bcs.n	660 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     65a:	416d      	adcs	r5, r5
     65c:	eb46 0606 	adc.w	r6, r6, r6
     660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     66c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     678:	bf88      	it	hi
     67a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     67e:	d81e      	bhi.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     684:	bf08      	it	eq
     686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     68a:	f150 0000 	adcs.w	r0, r0, #0
     68e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     698:	ea46 0101 	orr.w	r1, r6, r1
     69c:	ea40 0002 	orr.w	r0, r0, r2
     6a0:	ea81 0103 	eor.w	r1, r1, r3
     6a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     6a8:	bfc2      	ittt	gt
     6aa:	ebd4 050c 	rsbsgt	r5, r4, ip
     6ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     6b2:	bd70      	popgt	{r4, r5, r6, pc}
     6b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     6b8:	f04f 0e00 	mov.w	lr, #0
     6bc:	3c01      	subs	r4, #1
     6be:	f300 80ab 	bgt.w	818 <CONFIG_ISR_STACK_SIZE+0x18>
     6c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     6c6:	bfde      	ittt	le
     6c8:	2000      	movle	r0, #0
     6ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     6ce:	bd70      	pople	{r4, r5, r6, pc}
     6d0:	f1c4 0400 	rsb	r4, r4, #0
     6d4:	3c20      	subs	r4, #32
     6d6:	da35      	bge.n	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     6d8:	340c      	adds	r4, #12
     6da:	dc1b      	bgt.n	714 <CONFIG_BT_HCI_TX_STACK_SIZE+0x114>
     6dc:	f104 0414 	add.w	r4, r4, #20
     6e0:	f1c4 0520 	rsb	r5, r4, #32
     6e4:	fa00 f305 	lsl.w	r3, r0, r5
     6e8:	fa20 f004 	lsr.w	r0, r0, r4
     6ec:	fa01 f205 	lsl.w	r2, r1, r5
     6f0:	ea40 0002 	orr.w	r0, r0, r2
     6f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     6f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     6fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     700:	fa21 f604 	lsr.w	r6, r1, r4
     704:	eb42 0106 	adc.w	r1, r2, r6
     708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     70c:	bf08      	it	eq
     70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     712:	bd70      	pop	{r4, r5, r6, pc}
     714:	f1c4 040c 	rsb	r4, r4, #12
     718:	f1c4 0520 	rsb	r5, r4, #32
     71c:	fa00 f304 	lsl.w	r3, r0, r4
     720:	fa20 f005 	lsr.w	r0, r0, r5
     724:	fa01 f204 	lsl.w	r2, r1, r4
     728:	ea40 0002 	orr.w	r0, r0, r2
     72c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     734:	f141 0100 	adc.w	r1, r1, #0
     738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     73c:	bf08      	it	eq
     73e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	f1c4 0520 	rsb	r5, r4, #32
     748:	fa00 f205 	lsl.w	r2, r0, r5
     74c:	ea4e 0e02 	orr.w	lr, lr, r2
     750:	fa20 f304 	lsr.w	r3, r0, r4
     754:	fa01 f205 	lsl.w	r2, r1, r5
     758:	ea43 0302 	orr.w	r3, r3, r2
     75c:	fa21 f004 	lsr.w	r0, r1, r4
     760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     764:	fa21 f204 	lsr.w	r2, r1, r4
     768:	ea20 0002 	bic.w	r0, r0, r2
     76c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     774:	bf08      	it	eq
     776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	f094 0f00 	teq	r4, #0
     780:	d10f      	bne.n	7a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a2>
     782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     786:	0040      	lsls	r0, r0, #1
     788:	eb41 0101 	adc.w	r1, r1, r1
     78c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     790:	bf08      	it	eq
     792:	3c01      	subeq	r4, #1
     794:	d0f7      	beq.n	786 <CONFIG_BT_HCI_TX_STACK_SIZE+0x186>
     796:	ea41 0106 	orr.w	r1, r1, r6
     79a:	f095 0f00 	teq	r5, #0
     79e:	bf18      	it	ne
     7a0:	4770      	bxne	lr
     7a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     7a6:	0052      	lsls	r2, r2, #1
     7a8:	eb43 0303 	adc.w	r3, r3, r3
     7ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     7b0:	bf08      	it	eq
     7b2:	3d01      	subeq	r5, #1
     7b4:	d0f7      	beq.n	7a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a6>
     7b6:	ea43 0306 	orr.w	r3, r3, r6
     7ba:	4770      	bx	lr
     7bc:	ea94 0f0c 	teq	r4, ip
     7c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7c4:	bf18      	it	ne
     7c6:	ea95 0f0c 	teqne	r5, ip
     7ca:	d00c      	beq.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     7cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7d0:	bf18      	it	ne
     7d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7d6:	d1d1      	bne.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     7d8:	ea81 0103 	eor.w	r1, r1, r3
     7dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7e0:	f04f 0000 	mov.w	r0, #0
     7e4:	bd70      	pop	{r4, r5, r6, pc}
     7e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7ea:	bf06      	itte	eq
     7ec:	4610      	moveq	r0, r2
     7ee:	4619      	moveq	r1, r3
     7f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7f4:	d019      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	d102      	bne.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     7fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     800:	d113      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     802:	ea95 0f0c 	teq	r5, ip
     806:	d105      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     80c:	bf1c      	itt	ne
     80e:	4610      	movne	r0, r2
     810:	4619      	movne	r1, r3
     812:	d10a      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     814:	ea81 0103 	eor.w	r1, r1, r3
     818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     81c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     824:	f04f 0000 	mov.w	r0, #0
     828:	bd70      	pop	{r4, r5, r6, pc}
     82a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     82e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     832:	bd70      	pop	{r4, r5, r6, pc}

00000834 <__aeabi_ddiv>:
     834:	b570      	push	{r4, r5, r6, lr}
     836:	f04f 0cff 	mov.w	ip, #255	; 0xff
     83a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     83e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     842:	bf1d      	ittte	ne
     844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     848:	ea94 0f0c 	teqne	r4, ip
     84c:	ea95 0f0c 	teqne	r5, ip
     850:	f000 f8a7 	bleq	9a2 <__aeabi_ddiv+0x16e>
     854:	eba4 0405 	sub.w	r4, r4, r5
     858:	ea81 0e03 	eor.w	lr, r1, r3
     85c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     860:	ea4f 3101 	mov.w	r1, r1, lsl #12
     864:	f000 8088 	beq.w	978 <__aeabi_ddiv+0x144>
     868:	ea4f 3303 	mov.w	r3, r3, lsl #12
     86c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     878:	ea4f 2202 	mov.w	r2, r2, lsl #8
     87c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     884:	ea4f 2600 	mov.w	r6, r0, lsl #8
     888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     88c:	429d      	cmp	r5, r3
     88e:	bf08      	it	eq
     890:	4296      	cmpeq	r6, r2
     892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     896:	f504 7440 	add.w	r4, r4, #768	; 0x300
     89a:	d202      	bcs.n	8a2 <__aeabi_ddiv+0x6e>
     89c:	085b      	lsrs	r3, r3, #1
     89e:	ea4f 0232 	mov.w	r2, r2, rrx
     8a2:	1ab6      	subs	r6, r6, r2
     8a4:	eb65 0503 	sbc.w	r5, r5, r3
     8a8:	085b      	lsrs	r3, r3, #1
     8aa:	ea4f 0232 	mov.w	r2, r2, rrx
     8ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     8b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     8b6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     8be:	bf22      	ittt	cs
     8c0:	1ab6      	subcs	r6, r6, r2
     8c2:	4675      	movcs	r5, lr
     8c4:	ea40 000c 	orrcs.w	r0, r0, ip
     8c8:	085b      	lsrs	r3, r3, #1
     8ca:	ea4f 0232 	mov.w	r2, r2, rrx
     8ce:	ebb6 0e02 	subs.w	lr, r6, r2
     8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     8d6:	bf22      	ittt	cs
     8d8:	1ab6      	subcs	r6, r6, r2
     8da:	4675      	movcs	r5, lr
     8dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     8e0:	085b      	lsrs	r3, r3, #1
     8e2:	ea4f 0232 	mov.w	r2, r2, rrx
     8e6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     8ee:	bf22      	ittt	cs
     8f0:	1ab6      	subcs	r6, r6, r2
     8f2:	4675      	movcs	r5, lr
     8f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     8f8:	085b      	lsrs	r3, r3, #1
     8fa:	ea4f 0232 	mov.w	r2, r2, rrx
     8fe:	ebb6 0e02 	subs.w	lr, r6, r2
     902:	eb75 0e03 	sbcs.w	lr, r5, r3
     906:	bf22      	ittt	cs
     908:	1ab6      	subcs	r6, r6, r2
     90a:	4675      	movcs	r5, lr
     90c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     910:	ea55 0e06 	orrs.w	lr, r5, r6
     914:	d018      	beq.n	948 <__aeabi_ddiv+0x114>
     916:	ea4f 1505 	mov.w	r5, r5, lsl #4
     91a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     91e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     92a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     92e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     932:	d1c0      	bne.n	8b6 <__aeabi_ddiv+0x82>
     934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     938:	d10b      	bne.n	952 <__aeabi_ddiv+0x11e>
     93a:	ea41 0100 	orr.w	r1, r1, r0
     93e:	f04f 0000 	mov.w	r0, #0
     942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     946:	e7b6      	b.n	8b6 <__aeabi_ddiv+0x82>
     948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     94c:	bf04      	itt	eq
     94e:	4301      	orreq	r1, r0
     950:	2000      	moveq	r0, #0
     952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     956:	bf88      	it	hi
     958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     95c:	f63f aeaf 	bhi.w	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     960:	ebb5 0c03 	subs.w	ip, r5, r3
     964:	bf04      	itt	eq
     966:	ebb6 0c02 	subseq.w	ip, r6, r2
     96a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     96e:	f150 0000 	adcs.w	r0, r0, #0
     972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     976:	bd70      	pop	{r4, r5, r6, pc}
     978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     97c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     984:	bfc2      	ittt	gt
     986:	ebd4 050c 	rsbsgt	r5, r4, ip
     98a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     98e:	bd70      	popgt	{r4, r5, r6, pc}
     990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     994:	f04f 0e00 	mov.w	lr, #0
     998:	3c01      	subs	r4, #1
     99a:	e690      	b.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     99c:	ea45 0e06 	orr.w	lr, r5, r6
     9a0:	e68d      	b.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     9a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     9a6:	ea94 0f0c 	teq	r4, ip
     9aa:	bf08      	it	eq
     9ac:	ea95 0f0c 	teqeq	r5, ip
     9b0:	f43f af3b 	beq.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9b4:	ea94 0f0c 	teq	r4, ip
     9b8:	d10a      	bne.n	9d0 <__aeabi_ddiv+0x19c>
     9ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     9be:	f47f af34 	bne.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9c2:	ea95 0f0c 	teq	r5, ip
     9c6:	f47f af25 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9ca:	4610      	mov	r0, r2
     9cc:	4619      	mov	r1, r3
     9ce:	e72c      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9d0:	ea95 0f0c 	teq	r5, ip
     9d4:	d106      	bne.n	9e4 <__aeabi_ddiv+0x1b0>
     9d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     9da:	f43f aefd 	beq.w	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     9de:	4610      	mov	r0, r2
     9e0:	4619      	mov	r1, r3
     9e2:	e722      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     9e8:	bf18      	it	ne
     9ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     9ee:	f47f aec5 	bne.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     9f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     9f6:	f47f af0d 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     9fe:	f47f aeeb 	bne.w	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     a02:	e712      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>

00000a04 <__aeabi_d2f>:
     a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a0c:	bf24      	itt	cs
     a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a16:	d90d      	bls.n	a34 <__aeabi_d2f+0x30>
     a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a2c:	bf08      	it	eq
     a2e:	f020 0001 	biceq.w	r0, r0, #1
     a32:	4770      	bx	lr
     a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a38:	d121      	bne.n	a7e <__aeabi_d2f+0x7a>
     a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a3e:	bfbc      	itt	lt
     a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a44:	4770      	bxlt	lr
     a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a4e:	f1c2 0218 	rsb	r2, r2, #24
     a52:	f1c2 0c20 	rsb	ip, r2, #32
     a56:	fa10 f30c 	lsls.w	r3, r0, ip
     a5a:	fa20 f002 	lsr.w	r0, r0, r2
     a5e:	bf18      	it	ne
     a60:	f040 0001 	orrne.w	r0, r0, #1
     a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
     a70:	ea40 000c 	orr.w	r0, r0, ip
     a74:	fa23 f302 	lsr.w	r3, r3, r2
     a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a7c:	e7cc      	b.n	a18 <__aeabi_d2f+0x14>
     a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a82:	d107      	bne.n	a94 <__aeabi_d2f+0x90>
     a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a88:	bf1e      	ittt	ne
     a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a92:	4770      	bxne	lr
     a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     aa0:	4770      	bx	lr
     aa2:	bf00      	nop

00000aa4 <__aeabi_frsub>:
     aa4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     aa8:	e002      	b.n	ab0 <__addsf3>
     aaa:	bf00      	nop

00000aac <__aeabi_fsub>:
     aac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000ab0 <__addsf3>:
     ab0:	0042      	lsls	r2, r0, #1
     ab2:	bf1f      	itttt	ne
     ab4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     ab8:	ea92 0f03 	teqne	r2, r3
     abc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     ac0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ac4:	d06a      	beq.n	b9c <__addsf3+0xec>
     ac6:	ea4f 6212 	mov.w	r2, r2, lsr #24
     aca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     ace:	bfc1      	itttt	gt
     ad0:	18d2      	addgt	r2, r2, r3
     ad2:	4041      	eorgt	r1, r0
     ad4:	4048      	eorgt	r0, r1
     ad6:	4041      	eorgt	r1, r0
     ad8:	bfb8      	it	lt
     ada:	425b      	neglt	r3, r3
     adc:	2b19      	cmp	r3, #25
     ade:	bf88      	it	hi
     ae0:	4770      	bxhi	lr
     ae2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     ae6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     aea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     aee:	bf18      	it	ne
     af0:	4240      	negne	r0, r0
     af2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     af6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     afa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     afe:	bf18      	it	ne
     b00:	4249      	negne	r1, r1
     b02:	ea92 0f03 	teq	r2, r3
     b06:	d03f      	beq.n	b88 <__addsf3+0xd8>
     b08:	f1a2 0201 	sub.w	r2, r2, #1
     b0c:	fa41 fc03 	asr.w	ip, r1, r3
     b10:	eb10 000c 	adds.w	r0, r0, ip
     b14:	f1c3 0320 	rsb	r3, r3, #32
     b18:	fa01 f103 	lsl.w	r1, r1, r3
     b1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b20:	d502      	bpl.n	b28 <__addsf3+0x78>
     b22:	4249      	negs	r1, r1
     b24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b2c:	d313      	bcc.n	b56 <__addsf3+0xa6>
     b2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b32:	d306      	bcc.n	b42 <__addsf3+0x92>
     b34:	0840      	lsrs	r0, r0, #1
     b36:	ea4f 0131 	mov.w	r1, r1, rrx
     b3a:	f102 0201 	add.w	r2, r2, #1
     b3e:	2afe      	cmp	r2, #254	; 0xfe
     b40:	d251      	bcs.n	be6 <__addsf3+0x136>
     b42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b4a:	bf08      	it	eq
     b4c:	f020 0001 	biceq.w	r0, r0, #1
     b50:	ea40 0003 	orr.w	r0, r0, r3
     b54:	4770      	bx	lr
     b56:	0049      	lsls	r1, r1, #1
     b58:	eb40 0000 	adc.w	r0, r0, r0
     b5c:	3a01      	subs	r2, #1
     b5e:	bf28      	it	cs
     b60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b64:	d2ed      	bcs.n	b42 <__addsf3+0x92>
     b66:	fab0 fc80 	clz	ip, r0
     b6a:	f1ac 0c08 	sub.w	ip, ip, #8
     b6e:	ebb2 020c 	subs.w	r2, r2, ip
     b72:	fa00 f00c 	lsl.w	r0, r0, ip
     b76:	bfaa      	itet	ge
     b78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b7c:	4252      	neglt	r2, r2
     b7e:	4318      	orrge	r0, r3
     b80:	bfbc      	itt	lt
     b82:	40d0      	lsrlt	r0, r2
     b84:	4318      	orrlt	r0, r3
     b86:	4770      	bx	lr
     b88:	f092 0f00 	teq	r2, #0
     b8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b90:	bf06      	itte	eq
     b92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b96:	3201      	addeq	r2, #1
     b98:	3b01      	subne	r3, #1
     b9a:	e7b5      	b.n	b08 <__addsf3+0x58>
     b9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ba0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     ba4:	bf18      	it	ne
     ba6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     baa:	d021      	beq.n	bf0 <__addsf3+0x140>
     bac:	ea92 0f03 	teq	r2, r3
     bb0:	d004      	beq.n	bbc <__addsf3+0x10c>
     bb2:	f092 0f00 	teq	r2, #0
     bb6:	bf08      	it	eq
     bb8:	4608      	moveq	r0, r1
     bba:	4770      	bx	lr
     bbc:	ea90 0f01 	teq	r0, r1
     bc0:	bf1c      	itt	ne
     bc2:	2000      	movne	r0, #0
     bc4:	4770      	bxne	lr
     bc6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     bca:	d104      	bne.n	bd6 <__addsf3+0x126>
     bcc:	0040      	lsls	r0, r0, #1
     bce:	bf28      	it	cs
     bd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     bd4:	4770      	bx	lr
     bd6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     bda:	bf3c      	itt	cc
     bdc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     be0:	4770      	bxcc	lr
     be2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     be6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     bee:	4770      	bx	lr
     bf0:	ea7f 6222 	mvns.w	r2, r2, asr #24
     bf4:	bf16      	itet	ne
     bf6:	4608      	movne	r0, r1
     bf8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     bfc:	4601      	movne	r1, r0
     bfe:	0242      	lsls	r2, r0, #9
     c00:	bf06      	itte	eq
     c02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c06:	ea90 0f01 	teqeq	r0, r1
     c0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c0e:	4770      	bx	lr

00000c10 <__aeabi_ui2f>:
     c10:	f04f 0300 	mov.w	r3, #0
     c14:	e004      	b.n	c20 <__aeabi_i2f+0x8>
     c16:	bf00      	nop

00000c18 <__aeabi_i2f>:
     c18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c1c:	bf48      	it	mi
     c1e:	4240      	negmi	r0, r0
     c20:	ea5f 0c00 	movs.w	ip, r0
     c24:	bf08      	it	eq
     c26:	4770      	bxeq	lr
     c28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c2c:	4601      	mov	r1, r0
     c2e:	f04f 0000 	mov.w	r0, #0
     c32:	e01c      	b.n	c6e <__aeabi_l2f+0x2a>

00000c34 <__aeabi_ul2f>:
     c34:	ea50 0201 	orrs.w	r2, r0, r1
     c38:	bf08      	it	eq
     c3a:	4770      	bxeq	lr
     c3c:	f04f 0300 	mov.w	r3, #0
     c40:	e00a      	b.n	c58 <__aeabi_l2f+0x14>
     c42:	bf00      	nop

00000c44 <__aeabi_l2f>:
     c44:	ea50 0201 	orrs.w	r2, r0, r1
     c48:	bf08      	it	eq
     c4a:	4770      	bxeq	lr
     c4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     c50:	d502      	bpl.n	c58 <__aeabi_l2f+0x14>
     c52:	4240      	negs	r0, r0
     c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c58:	ea5f 0c01 	movs.w	ip, r1
     c5c:	bf02      	ittt	eq
     c5e:	4684      	moveq	ip, r0
     c60:	4601      	moveq	r1, r0
     c62:	2000      	moveq	r0, #0
     c64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     c68:	bf08      	it	eq
     c6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     c6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     c72:	fabc f28c 	clz	r2, ip
     c76:	3a08      	subs	r2, #8
     c78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c7c:	db10      	blt.n	ca0 <__aeabi_l2f+0x5c>
     c7e:	fa01 fc02 	lsl.w	ip, r1, r2
     c82:	4463      	add	r3, ip
     c84:	fa00 fc02 	lsl.w	ip, r0, r2
     c88:	f1c2 0220 	rsb	r2, r2, #32
     c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c90:	fa20 f202 	lsr.w	r2, r0, r2
     c94:	eb43 0002 	adc.w	r0, r3, r2
     c98:	bf08      	it	eq
     c9a:	f020 0001 	biceq.w	r0, r0, #1
     c9e:	4770      	bx	lr
     ca0:	f102 0220 	add.w	r2, r2, #32
     ca4:	fa01 fc02 	lsl.w	ip, r1, r2
     ca8:	f1c2 0220 	rsb	r2, r2, #32
     cac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     cb0:	fa21 f202 	lsr.w	r2, r1, r2
     cb4:	eb43 0002 	adc.w	r0, r3, r2
     cb8:	bf08      	it	eq
     cba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     cbe:	4770      	bx	lr

00000cc0 <__gesf2>:
     cc0:	f04f 3cff 	mov.w	ip, #4294967295
     cc4:	e006      	b.n	cd4 <__cmpsf2+0x4>
     cc6:	bf00      	nop

00000cc8 <__lesf2>:
     cc8:	f04f 0c01 	mov.w	ip, #1
     ccc:	e002      	b.n	cd4 <__cmpsf2+0x4>
     cce:	bf00      	nop

00000cd0 <__cmpsf2>:
     cd0:	f04f 0c01 	mov.w	ip, #1
     cd4:	f84d cd04 	str.w	ip, [sp, #-4]!
     cd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     cdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ce0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     ce4:	bf18      	it	ne
     ce6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     cea:	d011      	beq.n	d10 <__cmpsf2+0x40>
     cec:	b001      	add	sp, #4
     cee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     cf2:	bf18      	it	ne
     cf4:	ea90 0f01 	teqne	r0, r1
     cf8:	bf58      	it	pl
     cfa:	ebb2 0003 	subspl.w	r0, r2, r3
     cfe:	bf88      	it	hi
     d00:	17c8      	asrhi	r0, r1, #31
     d02:	bf38      	it	cc
     d04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     d08:	bf18      	it	ne
     d0a:	f040 0001 	orrne.w	r0, r0, #1
     d0e:	4770      	bx	lr
     d10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     d14:	d102      	bne.n	d1c <__cmpsf2+0x4c>
     d16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     d1a:	d105      	bne.n	d28 <__cmpsf2+0x58>
     d1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     d20:	d1e4      	bne.n	cec <__cmpsf2+0x1c>
     d22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     d26:	d0e1      	beq.n	cec <__cmpsf2+0x1c>
     d28:	f85d 0b04 	ldr.w	r0, [sp], #4
     d2c:	4770      	bx	lr
     d2e:	bf00      	nop

00000d30 <__aeabi_cfrcmple>:
     d30:	4684      	mov	ip, r0
     d32:	4608      	mov	r0, r1
     d34:	4661      	mov	r1, ip
     d36:	e7ff      	b.n	d38 <__aeabi_cfcmpeq>

00000d38 <__aeabi_cfcmpeq>:
     d38:	b50f      	push	{r0, r1, r2, r3, lr}
     d3a:	f7ff ffc9 	bl	cd0 <__cmpsf2>
     d3e:	2800      	cmp	r0, #0
     d40:	bf48      	it	mi
     d42:	f110 0f00 	cmnmi.w	r0, #0
     d46:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000d48 <__aeabi_fcmpeq>:
     d48:	f84d ed08 	str.w	lr, [sp, #-8]!
     d4c:	f7ff fff4 	bl	d38 <__aeabi_cfcmpeq>
     d50:	bf0c      	ite	eq
     d52:	2001      	moveq	r0, #1
     d54:	2000      	movne	r0, #0
     d56:	f85d fb08 	ldr.w	pc, [sp], #8
     d5a:	bf00      	nop

00000d5c <__aeabi_fcmplt>:
     d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
     d60:	f7ff ffea 	bl	d38 <__aeabi_cfcmpeq>
     d64:	bf34      	ite	cc
     d66:	2001      	movcc	r0, #1
     d68:	2000      	movcs	r0, #0
     d6a:	f85d fb08 	ldr.w	pc, [sp], #8
     d6e:	bf00      	nop

00000d70 <__aeabi_fcmple>:
     d70:	f84d ed08 	str.w	lr, [sp, #-8]!
     d74:	f7ff ffe0 	bl	d38 <__aeabi_cfcmpeq>
     d78:	bf94      	ite	ls
     d7a:	2001      	movls	r0, #1
     d7c:	2000      	movhi	r0, #0
     d7e:	f85d fb08 	ldr.w	pc, [sp], #8
     d82:	bf00      	nop

00000d84 <__aeabi_fcmpge>:
     d84:	f84d ed08 	str.w	lr, [sp, #-8]!
     d88:	f7ff ffd2 	bl	d30 <__aeabi_cfrcmple>
     d8c:	bf94      	ite	ls
     d8e:	2001      	movls	r0, #1
     d90:	2000      	movhi	r0, #0
     d92:	f85d fb08 	ldr.w	pc, [sp], #8
     d96:	bf00      	nop

00000d98 <__aeabi_fcmpgt>:
     d98:	f84d ed08 	str.w	lr, [sp, #-8]!
     d9c:	f7ff ffc8 	bl	d30 <__aeabi_cfrcmple>
     da0:	bf34      	ite	cc
     da2:	2001      	movcc	r0, #1
     da4:	2000      	movcs	r0, #0
     da6:	f85d fb08 	ldr.w	pc, [sp], #8
     daa:	bf00      	nop

00000dac <__aeabi_f2uiz>:
     dac:	0042      	lsls	r2, r0, #1
     dae:	d20e      	bcs.n	dce <__aeabi_f2uiz+0x22>
     db0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     db4:	d30b      	bcc.n	dce <__aeabi_f2uiz+0x22>
     db6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     dba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     dbe:	d409      	bmi.n	dd4 <__aeabi_f2uiz+0x28>
     dc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     dc8:	fa23 f002 	lsr.w	r0, r3, r2
     dcc:	4770      	bx	lr
     dce:	f04f 0000 	mov.w	r0, #0
     dd2:	4770      	bx	lr
     dd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
     dd8:	d101      	bne.n	dde <__aeabi_f2uiz+0x32>
     dda:	0242      	lsls	r2, r0, #9
     ddc:	d102      	bne.n	de4 <__aeabi_f2uiz+0x38>
     dde:	f04f 30ff 	mov.w	r0, #4294967295
     de2:	4770      	bx	lr
     de4:	f04f 0000 	mov.w	r0, #0
     de8:	4770      	bx	lr
     dea:	bf00      	nop

00000dec <__aeabi_uldivmod>:
     dec:	b953      	cbnz	r3, e04 <__aeabi_uldivmod+0x18>
     dee:	b94a      	cbnz	r2, e04 <__aeabi_uldivmod+0x18>
     df0:	2900      	cmp	r1, #0
     df2:	bf08      	it	eq
     df4:	2800      	cmpeq	r0, #0
     df6:	bf1c      	itt	ne
     df8:	f04f 31ff 	movne.w	r1, #4294967295
     dfc:	f04f 30ff 	movne.w	r0, #4294967295
     e00:	f000 b98c 	b.w	111c <__aeabi_idiv0>
     e04:	f1ad 0c08 	sub.w	ip, sp, #8
     e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e0c:	f000 f826 	bl	e5c <__udivmoddi4>
     e10:	f8dd e004 	ldr.w	lr, [sp, #4]
     e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e18:	b004      	add	sp, #16
     e1a:	4770      	bx	lr

00000e1c <__aeabi_f2ulz>:
     e1c:	b5d0      	push	{r4, r6, r7, lr}
     e1e:	f7ff fb87 	bl	530 <__aeabi_f2d>
     e22:	4b0c      	ldr	r3, [pc, #48]	; (e54 <__aeabi_f2ulz+0x38>)
     e24:	2200      	movs	r2, #0
     e26:	4606      	mov	r6, r0
     e28:	460f      	mov	r7, r1
     e2a:	f7ff fbd9 	bl	5e0 <__aeabi_dmul>
     e2e:	f000 f977 	bl	1120 <__aeabi_d2uiz>
     e32:	4604      	mov	r4, r0
     e34:	f7ff fb5a 	bl	4ec <__aeabi_ui2d>
     e38:	4b07      	ldr	r3, [pc, #28]	; (e58 <__aeabi_f2ulz+0x3c>)
     e3a:	2200      	movs	r2, #0
     e3c:	f7ff fbd0 	bl	5e0 <__aeabi_dmul>
     e40:	4602      	mov	r2, r0
     e42:	460b      	mov	r3, r1
     e44:	4630      	mov	r0, r6
     e46:	4639      	mov	r1, r7
     e48:	f7ff fa12 	bl	270 <__aeabi_dsub>
     e4c:	f000 f968 	bl	1120 <__aeabi_d2uiz>
     e50:	4621      	mov	r1, r4
     e52:	bdd0      	pop	{r4, r6, r7, pc}
     e54:	3df00000 	.word	0x3df00000
     e58:	41f00000 	.word	0x41f00000

00000e5c <__udivmoddi4>:
     e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e60:	9e08      	ldr	r6, [sp, #32]
     e62:	460d      	mov	r5, r1
     e64:	4604      	mov	r4, r0
     e66:	468e      	mov	lr, r1
     e68:	2b00      	cmp	r3, #0
     e6a:	f040 8082 	bne.w	f72 <__udivmoddi4+0x116>
     e6e:	428a      	cmp	r2, r1
     e70:	4617      	mov	r7, r2
     e72:	d946      	bls.n	f02 <__udivmoddi4+0xa6>
     e74:	fab2 f282 	clz	r2, r2
     e78:	b14a      	cbz	r2, e8e <__udivmoddi4+0x32>
     e7a:	f1c2 0120 	rsb	r1, r2, #32
     e7e:	fa05 f302 	lsl.w	r3, r5, r2
     e82:	fa20 f101 	lsr.w	r1, r0, r1
     e86:	4097      	lsls	r7, r2
     e88:	ea41 0e03 	orr.w	lr, r1, r3
     e8c:	4094      	lsls	r4, r2
     e8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     e92:	0c23      	lsrs	r3, r4, #16
     e94:	fbbe fcf8 	udiv	ip, lr, r8
     e98:	b2b9      	uxth	r1, r7
     e9a:	fb08 ee1c 	mls	lr, r8, ip, lr
     e9e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     ea2:	fb0c f001 	mul.w	r0, ip, r1
     ea6:	4298      	cmp	r0, r3
     ea8:	d90a      	bls.n	ec0 <__udivmoddi4+0x64>
     eaa:	18fb      	adds	r3, r7, r3
     eac:	f10c 35ff 	add.w	r5, ip, #4294967295
     eb0:	f080 8116 	bcs.w	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
     eb4:	4298      	cmp	r0, r3
     eb6:	f240 8113 	bls.w	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
     eba:	f1ac 0c02 	sub.w	ip, ip, #2
     ebe:	443b      	add	r3, r7
     ec0:	1a1b      	subs	r3, r3, r0
     ec2:	b2a4      	uxth	r4, r4
     ec4:	fbb3 f0f8 	udiv	r0, r3, r8
     ec8:	fb08 3310 	mls	r3, r8, r0, r3
     ecc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ed0:	fb00 f101 	mul.w	r1, r0, r1
     ed4:	42a1      	cmp	r1, r4
     ed6:	d909      	bls.n	eec <__udivmoddi4+0x90>
     ed8:	193c      	adds	r4, r7, r4
     eda:	f100 33ff 	add.w	r3, r0, #4294967295
     ede:	f080 8101 	bcs.w	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
     ee2:	42a1      	cmp	r1, r4
     ee4:	f240 80fe 	bls.w	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
     ee8:	3802      	subs	r0, #2
     eea:	443c      	add	r4, r7
     eec:	1a64      	subs	r4, r4, r1
     eee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     ef2:	2100      	movs	r1, #0
     ef4:	b11e      	cbz	r6, efe <__udivmoddi4+0xa2>
     ef6:	40d4      	lsrs	r4, r2
     ef8:	2300      	movs	r3, #0
     efa:	e9c6 4300 	strd	r4, r3, [r6]
     efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f02:	b902      	cbnz	r2, f06 <__udivmoddi4+0xaa>
     f04:	deff      	udf	#255	; 0xff
     f06:	fab2 f282 	clz	r2, r2
     f0a:	2a00      	cmp	r2, #0
     f0c:	d14f      	bne.n	fae <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xe>
     f0e:	1bcb      	subs	r3, r1, r7
     f10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f14:	fa1f f887 	uxth.w	r8, r7
     f18:	2101      	movs	r1, #1
     f1a:	fbb3 fcfe 	udiv	ip, r3, lr
     f1e:	0c25      	lsrs	r5, r4, #16
     f20:	fb0e 331c 	mls	r3, lr, ip, r3
     f24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     f28:	fb08 f30c 	mul.w	r3, r8, ip
     f2c:	42ab      	cmp	r3, r5
     f2e:	d907      	bls.n	f40 <__udivmoddi4+0xe4>
     f30:	197d      	adds	r5, r7, r5
     f32:	f10c 30ff 	add.w	r0, ip, #4294967295
     f36:	d202      	bcs.n	f3e <__udivmoddi4+0xe2>
     f38:	42ab      	cmp	r3, r5
     f3a:	f200 80e7 	bhi.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     f3e:	4684      	mov	ip, r0
     f40:	1aed      	subs	r5, r5, r3
     f42:	b2a3      	uxth	r3, r4
     f44:	fbb5 f0fe 	udiv	r0, r5, lr
     f48:	fb0e 5510 	mls	r5, lr, r0, r5
     f4c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     f50:	fb08 f800 	mul.w	r8, r8, r0
     f54:	45a0      	cmp	r8, r4
     f56:	d907      	bls.n	f68 <__udivmoddi4+0x10c>
     f58:	193c      	adds	r4, r7, r4
     f5a:	f100 33ff 	add.w	r3, r0, #4294967295
     f5e:	d202      	bcs.n	f66 <__udivmoddi4+0x10a>
     f60:	45a0      	cmp	r8, r4
     f62:	f200 80d7 	bhi.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
     f66:	4618      	mov	r0, r3
     f68:	eba4 0408 	sub.w	r4, r4, r8
     f6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     f70:	e7c0      	b.n	ef4 <__udivmoddi4+0x98>
     f72:	428b      	cmp	r3, r1
     f74:	d908      	bls.n	f88 <__udivmoddi4+0x12c>
     f76:	2e00      	cmp	r6, #0
     f78:	f000 80af 	beq.w	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
     f7c:	2100      	movs	r1, #0
     f7e:	e9c6 0500 	strd	r0, r5, [r6]
     f82:	4608      	mov	r0, r1
     f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f88:	fab3 f183 	clz	r1, r3
     f8c:	2900      	cmp	r1, #0
     f8e:	d14b      	bne.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     f90:	42ab      	cmp	r3, r5
     f92:	d302      	bcc.n	f9a <__udivmoddi4+0x13e>
     f94:	4282      	cmp	r2, r0
     f96:	f200 80b7 	bhi.w	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
     f9a:	1a84      	subs	r4, r0, r2
     f9c:	eb65 0303 	sbc.w	r3, r5, r3
     fa0:	2001      	movs	r0, #1
     fa2:	469e      	mov	lr, r3
     fa4:	2e00      	cmp	r6, #0
     fa6:	d0aa      	beq.n	efe <__udivmoddi4+0xa2>
     fa8:	e9c6 4e00 	strd	r4, lr, [r6]
     fac:	e7a7      	b.n	efe <__udivmoddi4+0xa2>
     fae:	f1c2 0c20 	rsb	ip, r2, #32
     fb2:	fa01 f302 	lsl.w	r3, r1, r2
     fb6:	4097      	lsls	r7, r2
     fb8:	fa20 f00c 	lsr.w	r0, r0, ip
     fbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     fc0:	fa21 fc0c 	lsr.w	ip, r1, ip
     fc4:	4318      	orrs	r0, r3
     fc6:	fbbc f1fe 	udiv	r1, ip, lr
     fca:	0c05      	lsrs	r5, r0, #16
     fcc:	fb0e cc11 	mls	ip, lr, r1, ip
     fd0:	fa1f f887 	uxth.w	r8, r7
     fd4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     fd8:	fb01 f308 	mul.w	r3, r1, r8
     fdc:	42ab      	cmp	r3, r5
     fde:	fa04 f402 	lsl.w	r4, r4, r2
     fe2:	d909      	bls.n	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
     fe4:	197d      	adds	r5, r7, r5
     fe6:	f101 3cff 	add.w	ip, r1, #4294967295
     fea:	f080 808b 	bcs.w	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
     fee:	42ab      	cmp	r3, r5
     ff0:	f240 8088 	bls.w	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
     ff4:	3902      	subs	r1, #2
     ff6:	443d      	add	r5, r7
     ff8:	1aeb      	subs	r3, r5, r3
     ffa:	b285      	uxth	r5, r0
     ffc:	fbb3 f0fe 	udiv	r0, r3, lr
    1000:	fb0e 3310 	mls	r3, lr, r0, r3
    1004:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1008:	fb00 f308 	mul.w	r3, r0, r8
    100c:	42ab      	cmp	r3, r5
    100e:	d907      	bls.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    1010:	197d      	adds	r5, r7, r5
    1012:	f100 3cff 	add.w	ip, r0, #4294967295
    1016:	d271      	bcs.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    1018:	42ab      	cmp	r3, r5
    101a:	d96f      	bls.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
    101c:	3802      	subs	r0, #2
    101e:	443d      	add	r5, r7
    1020:	1aeb      	subs	r3, r5, r3
    1022:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1026:	e778      	b.n	f1a <__udivmoddi4+0xbe>
    1028:	f1c1 0c20 	rsb	ip, r1, #32
    102c:	408b      	lsls	r3, r1
    102e:	fa22 f70c 	lsr.w	r7, r2, ip
    1032:	431f      	orrs	r7, r3
    1034:	fa20 f40c 	lsr.w	r4, r0, ip
    1038:	fa05 f301 	lsl.w	r3, r5, r1
    103c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1040:	fa25 f50c 	lsr.w	r5, r5, ip
    1044:	431c      	orrs	r4, r3
    1046:	0c23      	lsrs	r3, r4, #16
    1048:	fbb5 f9fe 	udiv	r9, r5, lr
    104c:	fa1f f887 	uxth.w	r8, r7
    1050:	fb0e 5519 	mls	r5, lr, r9, r5
    1054:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1058:	fb09 fa08 	mul.w	sl, r9, r8
    105c:	45aa      	cmp	sl, r5
    105e:	fa02 f201 	lsl.w	r2, r2, r1
    1062:	fa00 f301 	lsl.w	r3, r0, r1
    1066:	d908      	bls.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
    1068:	197d      	adds	r5, r7, r5
    106a:	f109 30ff 	add.w	r0, r9, #4294967295
    106e:	d247      	bcs.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
    1070:	45aa      	cmp	sl, r5
    1072:	d945      	bls.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
    1074:	f1a9 0902 	sub.w	r9, r9, #2
    1078:	443d      	add	r5, r7
    107a:	eba5 050a 	sub.w	r5, r5, sl
    107e:	b2a4      	uxth	r4, r4
    1080:	fbb5 f0fe 	udiv	r0, r5, lr
    1084:	fb0e 5510 	mls	r5, lr, r0, r5
    1088:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    108c:	fb00 f808 	mul.w	r8, r0, r8
    1090:	45a0      	cmp	r8, r4
    1092:	d907      	bls.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1094:	193c      	adds	r4, r7, r4
    1096:	f100 35ff 	add.w	r5, r0, #4294967295
    109a:	d22d      	bcs.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    109c:	45a0      	cmp	r8, r4
    109e:	d92b      	bls.n	10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>
    10a0:	3802      	subs	r0, #2
    10a2:	443c      	add	r4, r7
    10a4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    10a8:	eba4 0408 	sub.w	r4, r4, r8
    10ac:	fba0 8902 	umull	r8, r9, r0, r2
    10b0:	454c      	cmp	r4, r9
    10b2:	46c6      	mov	lr, r8
    10b4:	464d      	mov	r5, r9
    10b6:	d319      	bcc.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
    10b8:	d016      	beq.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10ba:	b15e      	cbz	r6, 10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>
    10bc:	ebb3 020e 	subs.w	r2, r3, lr
    10c0:	eb64 0405 	sbc.w	r4, r4, r5
    10c4:	fa04 fc0c 	lsl.w	ip, r4, ip
    10c8:	40ca      	lsrs	r2, r1
    10ca:	ea4c 0202 	orr.w	r2, ip, r2
    10ce:	40cc      	lsrs	r4, r1
    10d0:	e9c6 2400 	strd	r2, r4, [r6]
    10d4:	2100      	movs	r1, #0
    10d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10da:	4631      	mov	r1, r6
    10dc:	4630      	mov	r0, r6
    10de:	e70e      	b.n	efe <__udivmoddi4+0xa2>
    10e0:	46ac      	mov	ip, r5
    10e2:	e6ed      	b.n	ec0 <__udivmoddi4+0x64>
    10e4:	4618      	mov	r0, r3
    10e6:	e701      	b.n	eec <__udivmoddi4+0x90>
    10e8:	4543      	cmp	r3, r8
    10ea:	d2e6      	bcs.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10ec:	ebb8 0e02 	subs.w	lr, r8, r2
    10f0:	eb69 0507 	sbc.w	r5, r9, r7
    10f4:	3801      	subs	r0, #1
    10f6:	e7e0      	b.n	10ba <CONFIG_FPROTECT_BLOCK_SIZE+0xba>
    10f8:	4628      	mov	r0, r5
    10fa:	e7d3      	b.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    10fc:	4660      	mov	r0, ip
    10fe:	e78f      	b.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    1100:	4681      	mov	r9, r0
    1102:	e7ba      	b.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
    1104:	4661      	mov	r1, ip
    1106:	e777      	b.n	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
    1108:	4608      	mov	r0, r1
    110a:	e74b      	b.n	fa4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4>
    110c:	f1ac 0c02 	sub.w	ip, ip, #2
    1110:	443d      	add	r5, r7
    1112:	e715      	b.n	f40 <__udivmoddi4+0xe4>
    1114:	3802      	subs	r0, #2
    1116:	443c      	add	r4, r7
    1118:	e726      	b.n	f68 <__udivmoddi4+0x10c>
    111a:	bf00      	nop

0000111c <__aeabi_idiv0>:
    111c:	4770      	bx	lr
    111e:	bf00      	nop

00001120 <__aeabi_d2uiz>:
    1120:	004a      	lsls	r2, r1, #1
    1122:	d211      	bcs.n	1148 <__aeabi_d2uiz+0x28>
    1124:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1128:	d211      	bcs.n	114e <__aeabi_d2uiz+0x2e>
    112a:	d50d      	bpl.n	1148 <__aeabi_d2uiz+0x28>
    112c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    1130:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1134:	d40e      	bmi.n	1154 <__aeabi_d2uiz+0x34>
    1136:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    113a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    113e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    1142:	fa23 f002 	lsr.w	r0, r3, r2
    1146:	4770      	bx	lr
    1148:	f04f 0000 	mov.w	r0, #0
    114c:	4770      	bx	lr
    114e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1152:	d102      	bne.n	115a <__aeabi_d2uiz+0x3a>
    1154:	f04f 30ff 	mov.w	r0, #4294967295
    1158:	4770      	bx	lr
    115a:	f04f 0000 	mov.w	r0, #0
    115e:	4770      	bx	lr

00001160 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    1160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1162:	4615      	mov	r5, r2
    1164:	4a0a      	ldr	r2, [pc, #40]	; (1190 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    1166:	461c      	mov	r4, r3
    1168:	6856      	ldr	r6, [r2, #4]
    116a:	b12e      	cbz	r6, 1178 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    116c:	b001      	add	sp, #4
    116e:	462a      	mov	r2, r5
    1170:	46b4      	mov	ip, r6
    1172:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1176:	4760      	bx	ip
    1178:	2000      	movs	r0, #0
    117a:	f88d 0000 	strb.w	r0, [sp]
    117e:	4668      	mov	r0, sp
    1180:	f00b f936 	bl	c3f0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1184:	f89d 0000 	ldrb.w	r0, [sp]
    1188:	1a28      	subs	r0, r5, r0
    118a:	7020      	strb	r0, [r4, #0]
    118c:	2000      	movs	r0, #0
    118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1190:	20000000 	.word	0x20000000

00001194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1194:	4801      	ldr	r0, [pc, #4]	; (119c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    1196:	7800      	ldrb	r0, [r0, #0]
    1198:	4770      	bx	lr
    119a:	0000      	.short	0x0000
    119c:	20000008 	.word	0x20000008

000011a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    11a0:	4905      	ldr	r1, [pc, #20]	; (11b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    11a2:	780a      	ldrb	r2, [r1, #0]
    11a4:	4290      	cmp	r0, r2
    11a6:	d301      	bcc.n	11ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    11a8:	2000      	movs	r0, #0
    11aa:	4770      	bx	lr
    11ac:	6849      	ldr	r1, [r1, #4]
    11ae:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    11b2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    11b6:	4770      	bx	lr
    11b8:	20000008 	.word	0x20000008
    11bc:	b570      	push	{r4, r5, r6, lr}
    11be:	4605      	mov	r5, r0
    11c0:	2a20      	cmp	r2, #32
    11c2:	d027      	beq.n	1214 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    11c4:	4819      	ldr	r0, [pc, #100]	; (122c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    11c6:	4c1a      	ldr	r4, [pc, #104]	; (1230 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    11c8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    11cc:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    11d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    11d4:	2920      	cmp	r1, #32
    11d6:	d022      	beq.n	121e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    11d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    11dc:	7840      	ldrb	r0, [r0, #1]
    11de:	784c      	ldrb	r4, [r1, #1]
    11e0:	7048      	strb	r0, [r1, #1]
    11e2:	4620      	mov	r0, r4
    11e4:	4601      	mov	r1, r0
    11e6:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    11ea:	4291      	cmp	r1, r2
    11ec:	7005      	strb	r5, [r0, #0]
    11ee:	7840      	ldrb	r0, [r0, #1]
    11f0:	d1f8      	bne.n	11e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    11f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    11f6:	2a20      	cmp	r2, #32
    11f8:	bf1a      	itte	ne
    11fa:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    11fe:	7054      	strbne	r4, [r2, #1]
    1200:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1204:	2220      	movs	r2, #32
    1206:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    120a:	f88c 2001 	strb.w	r2, [ip, #1]
    120e:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1212:	bd70      	pop	{r4, r5, r6, pc}
    1214:	f240 217e 	movw	r1, #638	; 0x27e
    1218:	2070      	movs	r0, #112	; 0x70
    121a:	f003 f96b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    121e:	f893 4020 	ldrb.w	r4, [r3, #32]
    1222:	7840      	ldrb	r0, [r0, #1]
    1224:	f883 0020 	strb.w	r0, [r3, #32]
    1228:	e7db      	b.n	11e2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    122a:	0000      	.short	0x0000
    122c:	20001084 	.word	0x20001084
    1230:	20001104 	.word	0x20001104
    1234:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1238:	b085      	sub	sp, #20
    123a:	4615      	mov	r5, r2
    123c:	460c      	mov	r4, r1
    123e:	f002 f8db 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1242:	4428      	add	r0, r5
    1244:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1248:	9002      	str	r0, [sp, #8]
    124a:	6821      	ldr	r1, [r4, #0]
    124c:	1a08      	subs	r0, r1, r0
    124e:	0200      	lsls	r0, r0, #8
    1250:	17c1      	asrs	r1, r0, #31
    1252:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1256:	1200      	asrs	r0, r0, #8
    1258:	2800      	cmp	r0, #0
    125a:	f300 80d5 	bgt.w	1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>
    125e:	48ac      	ldr	r0, [pc, #688]	; (1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>)
    1260:	9f08      	ldr	r7, [sp, #32]
    1262:	4eac      	ldr	r6, [pc, #688]	; (1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>)
    1264:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    1268:	9003      	str	r0, [sp, #12]
    126a:	f890 5020 	ldrb.w	r5, [r0, #32]
    126e:	2020      	movs	r0, #32
    1270:	46e9      	mov	r9, sp
    1272:	f10d 0804 	add.w	r8, sp, #4
    1276:	f88d 0000 	strb.w	r0, [sp]
    127a:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    127e:	2d20      	cmp	r5, #32
    1280:	bf18      	it	ne
    1282:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    1286:	d025      	beq.n	12d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1288:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    128c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1290:	6822      	ldr	r2, [r4, #0]
    1292:	68c1      	ldr	r1, [r0, #12]
    1294:	1a51      	subs	r1, r2, r1
    1296:	0209      	lsls	r1, r1, #8
    1298:	17ca      	asrs	r2, r1, #31
    129a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    129e:	3008      	adds	r0, #8
    12a0:	1209      	asrs	r1, r1, #8
    12a2:	d417      	bmi.n	12d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    12a4:	8961      	ldrh	r1, [r4, #10]
    12a6:	b171      	cbz	r1, 12c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    12a8:	8941      	ldrh	r1, [r0, #10]
    12aa:	b961      	cbnz	r1, 12c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    12ac:	f000 fdb4 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    12b0:	f002 f8a2 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    12b4:	6821      	ldr	r1, [r4, #0]
    12b6:	1a08      	subs	r0, r1, r0
    12b8:	0200      	lsls	r0, r0, #8
    12ba:	17c1      	asrs	r1, r0, #31
    12bc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    12c0:	1200      	asrs	r0, r0, #8
    12c2:	2833      	cmp	r0, #51	; 0x33
    12c4:	db06      	blt.n	12d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    12c6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    12ca:	f889 5000 	strb.w	r5, [r9]
    12ce:	7845      	ldrb	r5, [r0, #1]
    12d0:	2d20      	cmp	r5, #32
    12d2:	d1d9      	bne.n	1288 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    12d4:	f899 0000 	ldrb.w	r0, [r9]
    12d8:	f888 0000 	strb.w	r0, [r8]
    12dc:	46a1      	mov	r9, r4
    12de:	2d20      	cmp	r5, #32
    12e0:	bf1c      	itt	ne
    12e2:	488d      	ldrne	r0, [pc, #564]	; (1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>)
    12e4:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    12e8:	f000 810e 	beq.w	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    12ec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    12f0:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    12f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
    12f8:	f8da 1008 	ldr.w	r1, [sl, #8]
    12fc:	4648      	mov	r0, r9
    12fe:	1a89      	subs	r1, r1, r2
    1300:	0209      	lsls	r1, r1, #8
    1302:	17ca      	asrs	r2, r1, #31
    1304:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1308:	f10a 0708 	add.w	r7, sl, #8
    130c:	1209      	asrs	r1, r1, #8
    130e:	d415      	bmi.n	133c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    1310:	8979      	ldrh	r1, [r7, #10]
    1312:	2900      	cmp	r1, #0
    1314:	f000 80f8 	beq.w	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    1318:	8941      	ldrh	r1, [r0, #10]
    131a:	2900      	cmp	r1, #0
    131c:	f040 80f4 	bne.w	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    1320:	f000 fd7a 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1324:	f002 f868 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1328:	6839      	ldr	r1, [r7, #0]
    132a:	1a08      	subs	r0, r1, r0
    132c:	0200      	lsls	r0, r0, #8
    132e:	17c1      	asrs	r1, r0, #31
    1330:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1334:	1200      	asrs	r0, r0, #8
    1336:	2833      	cmp	r0, #51	; 0x33
    1338:	f280 80e6 	bge.w	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    133c:	f888 5000 	strb.w	r5, [r8]
    1340:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1344:	f899 000c 	ldrb.w	r0, [r9, #12]
    1348:	4281      	cmp	r1, r0
    134a:	d906      	bls.n	135a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    134c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1350:	7845      	ldrb	r5, [r0, #1]
    1352:	2d20      	cmp	r5, #32
    1354:	d1ca      	bne.n	12ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    1356:	f000 b8d7 	b.w	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    135a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    135e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1362:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    1366:	8a68      	ldrh	r0, [r5, #18]
    1368:	68ef      	ldr	r7, [r5, #12]
    136a:	2800      	cmp	r0, #0
    136c:	d143      	bne.n	13f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e>
    136e:	8960      	ldrh	r0, [r4, #10]
    1370:	b3e8      	cbz	r0, 13ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x66>
    1372:	68a8      	ldr	r0, [r5, #8]
    1374:	f00b f85c 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1378:	8a69      	ldrh	r1, [r5, #18]
    137a:	7c2a      	ldrb	r2, [r5, #16]
    137c:	4b67      	ldr	r3, [pc, #412]	; (151c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x194>)
    137e:	4411      	add	r1, r2
    1380:	1c49      	adds	r1, r1, #1
    1382:	1842      	adds	r2, r0, r1
    1384:	4298      	cmp	r0, r3
    1386:	d904      	bls.n	1392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa>
    1388:	f240 6109 	movw	r1, #1545	; 0x609
    138c:	2070      	movs	r0, #112	; 0x70
    138e:	f003 f8b1 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1392:	4863      	ldr	r0, [pc, #396]	; (1520 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x198>)
    1394:	4281      	cmp	r1, r0
    1396:	dd04      	ble.n	13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
    1398:	f240 610a 	movw	r1, #1546	; 0x60a
    139c:	2070      	movs	r0, #112	; 0x70
    139e:	f003 f8a9 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13a2:	4860      	ldr	r0, [pc, #384]	; (1524 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x19c>)
    13a4:	4281      	cmp	r1, r0
    13a6:	da04      	bge.n	13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
    13a8:	f240 610b 	movw	r1, #1547	; 0x60b
    13ac:	2070      	movs	r0, #112	; 0x70
    13ae:	f003 f8a1 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13b2:	485d      	ldr	r0, [pc, #372]	; (1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>)
    13b4:	4290      	cmp	r0, r2
    13b6:	bfdc      	itt	le
    13b8:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    13bc:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    13c0:	dd05      	ble.n	13ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46>
    13c2:	2a00      	cmp	r2, #0
    13c4:	bfbc      	itt	lt
    13c6:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    13ca:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    13ce:	4610      	mov	r0, r2
    13d0:	f002 f812 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    13d4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    13d8:	1a78      	subs	r0, r7, r1
    13da:	0200      	lsls	r0, r0, #8
    13dc:	17c2      	asrs	r2, r0, #31
    13de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13e2:	1200      	asrs	r0, r0, #8
    13e4:	2833      	cmp	r0, #51	; 0x33
    13e6:	bfb8      	it	lt
    13e8:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    13ec:	e000      	b.n	13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>
    13ee:	e002      	b.n	13f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e>
    13f0:	bfb8      	it	lt
    13f2:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    13f6:	9802      	ldr	r0, [sp, #8]
    13f8:	1a38      	subs	r0, r7, r0
    13fa:	0200      	lsls	r0, r0, #8
    13fc:	17c1      	asrs	r1, r0, #31
    13fe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1402:	1200      	asrs	r0, r0, #8
    1404:	2800      	cmp	r0, #0
    1406:	dd03      	ble.n	1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    1408:	b009      	add	sp, #36	; 0x24
    140a:	2000      	movs	r0, #0
    140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1410:	e9d4 1000 	ldrd	r1, r0, [r4]
    1414:	1a40      	subs	r0, r0, r1
    1416:	4438      	add	r0, r7
    1418:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    141c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1420:	e9c4 1000 	strd	r1, r0, [r4]
    1424:	9803      	ldr	r0, [sp, #12]
    1426:	f8dd 8020 	ldr.w	r8, [sp, #32]
    142a:	466f      	mov	r7, sp
    142c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1430:	2020      	movs	r0, #32
    1432:	f10d 0a04 	add.w	sl, sp, #4
    1436:	f88d 0000 	strb.w	r0, [sp]
    143a:	2d20      	cmp	r5, #32
    143c:	bf1c      	itt	ne
    143e:	4836      	ldrne	r0, [pc, #216]	; (1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>)
    1440:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1444:	d025      	beq.n	1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    1446:	bf00      	nop
    1448:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    144c:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1450:	6822      	ldr	r2, [r4, #0]
    1452:	68c1      	ldr	r1, [r0, #12]
    1454:	1a51      	subs	r1, r2, r1
    1456:	0209      	lsls	r1, r1, #8
    1458:	17ca      	asrs	r2, r1, #31
    145a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    145e:	3008      	adds	r0, #8
    1460:	1209      	asrs	r1, r1, #8
    1462:	d416      	bmi.n	1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    1464:	8961      	ldrh	r1, [r4, #10]
    1466:	b171      	cbz	r1, 1486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfe>
    1468:	8941      	ldrh	r1, [r0, #10]
    146a:	b961      	cbnz	r1, 1486 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfe>
    146c:	f000 fcd4 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1470:	f001 ffc2 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1474:	6821      	ldr	r1, [r4, #0]
    1476:	1a08      	subs	r0, r1, r0
    1478:	0200      	lsls	r0, r0, #8
    147a:	17c1      	asrs	r1, r0, #31
    147c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1480:	1200      	asrs	r0, r0, #8
    1482:	2833      	cmp	r0, #51	; 0x33
    1484:	db05      	blt.n	1492 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10a>
    1486:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    148a:	703d      	strb	r5, [r7, #0]
    148c:	7845      	ldrb	r5, [r0, #1]
    148e:	2d20      	cmp	r5, #32
    1490:	d1da      	bne.n	1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>
    1492:	7838      	ldrb	r0, [r7, #0]
    1494:	f88a 0000 	strb.w	r0, [sl]
    1498:	4627      	mov	r7, r4
    149a:	2d20      	cmp	r5, #32
    149c:	bf1c      	itt	ne
    149e:	481e      	ldrne	r0, [pc, #120]	; (1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>)
    14a0:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    14a4:	d030      	beq.n	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    14a6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    14aa:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    14ae:	6879      	ldr	r1, [r7, #4]
    14b0:	f8d9 2008 	ldr.w	r2, [r9, #8]
    14b4:	4638      	mov	r0, r7
    14b6:	1a51      	subs	r1, r2, r1
    14b8:	0209      	lsls	r1, r1, #8
    14ba:	17ca      	asrs	r2, r1, #31
    14bc:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    14c0:	f109 0808 	add.w	r8, r9, #8
    14c4:	1209      	asrs	r1, r1, #8
    14c6:	d412      	bmi.n	14ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x166>
    14c8:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    14cc:	b1e1      	cbz	r1, 1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    14ce:	8941      	ldrh	r1, [r0, #10]
    14d0:	b9d1      	cbnz	r1, 1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    14d2:	f000 fca1 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    14d6:	f001 ff8f 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14da:	f8d8 1000 	ldr.w	r1, [r8]
    14de:	1a08      	subs	r0, r1, r0
    14e0:	0200      	lsls	r0, r0, #8
    14e2:	17c1      	asrs	r1, r0, #31
    14e4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14e8:	1200      	asrs	r0, r0, #8
    14ea:	2833      	cmp	r0, #51	; 0x33
    14ec:	da0c      	bge.n	1508 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x180>
    14ee:	f88a 5000 	strb.w	r5, [sl]
    14f2:	f899 0014 	ldrb.w	r0, [r9, #20]
    14f6:	7b39      	ldrb	r1, [r7, #12]
    14f8:	4288      	cmp	r0, r1
    14fa:	f67f af2e 	bls.w	135a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    14fe:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1502:	7845      	ldrb	r5, [r0, #1]
    1504:	2d20      	cmp	r5, #32
    1506:	d1ce      	bne.n	14a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11e>
    1508:	b009      	add	sp, #36	; 0x24
    150a:	2001      	movs	r0, #1
    150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1510:	20001104 	.word	0x20001104
    1514:	20000d84 	.word	0x20000d84
    1518:	20001084 	.word	0x20001084
    151c:	1e847fff 	.word	0x1e847fff
    1520:	07a12000 	.word	0x07a12000
    1524:	f85ee000 	.word	0xf85ee000
    1528:	1e848000 	.word	0x1e848000
    152c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1530:	4604      	mov	r4, r0
    1532:	483c      	ldr	r0, [pc, #240]	; (1624 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29c>)
    1534:	460e      	mov	r6, r1
    1536:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    153a:	4f3b      	ldr	r7, [pc, #236]	; (1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>)
    153c:	f890 5020 	ldrb.w	r5, [r0, #32]
    1540:	2020      	movs	r0, #32
    1542:	4698      	mov	r8, r3
    1544:	4692      	mov	sl, r2
    1546:	7010      	strb	r0, [r2, #0]
    1548:	f507 7940 	add.w	r9, r7, #768	; 0x300
    154c:	2d20      	cmp	r5, #32
    154e:	bf18      	it	ne
    1550:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1554:	d028      	beq.n	15a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x220>
    1556:	bf00      	nop
    1558:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    155c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1560:	f100 0108 	add.w	r1, r0, #8
    1564:	68c0      	ldr	r0, [r0, #12]
    1566:	6822      	ldr	r2, [r4, #0]
    1568:	1a10      	subs	r0, r2, r0
    156a:	0200      	lsls	r0, r0, #8
    156c:	17c2      	asrs	r2, r0, #31
    156e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1572:	1200      	asrs	r0, r0, #8
    1574:	d418      	bmi.n	15a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x220>
    1576:	8960      	ldrh	r0, [r4, #10]
    1578:	b178      	cbz	r0, 159a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x212>
    157a:	8948      	ldrh	r0, [r1, #10]
    157c:	b968      	cbnz	r0, 159a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x212>
    157e:	4608      	mov	r0, r1
    1580:	f000 fc4a 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    1584:	f001 ff38 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1588:	6821      	ldr	r1, [r4, #0]
    158a:	1a08      	subs	r0, r1, r0
    158c:	0200      	lsls	r0, r0, #8
    158e:	17c1      	asrs	r1, r0, #31
    1590:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1594:	1200      	asrs	r0, r0, #8
    1596:	2833      	cmp	r0, #51	; 0x33
    1598:	db06      	blt.n	15a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x220>
    159a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    159e:	f88a 5000 	strb.w	r5, [sl]
    15a2:	7845      	ldrb	r5, [r0, #1]
    15a4:	2d20      	cmp	r5, #32
    15a6:	d1d7      	bne.n	1558 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d0>
    15a8:	f89a 0000 	ldrb.w	r0, [sl]
    15ac:	f888 0000 	strb.w	r0, [r8]
    15b0:	2d20      	cmp	r5, #32
    15b2:	bf18      	it	ne
    15b4:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    15b8:	d030      	beq.n	161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>
    15ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    15be:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    15c2:	6861      	ldr	r1, [r4, #4]
    15c4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    15c8:	4620      	mov	r0, r4
    15ca:	1a51      	subs	r1, r2, r1
    15cc:	0209      	lsls	r1, r1, #8
    15ce:	17ca      	asrs	r2, r1, #31
    15d0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    15d4:	f109 0608 	add.w	r6, r9, #8
    15d8:	1209      	asrs	r1, r1, #8
    15da:	d410      	bmi.n	15fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x276>
    15dc:	8971      	ldrh	r1, [r6, #10]
    15de:	b1e9      	cbz	r1, 161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>
    15e0:	8941      	ldrh	r1, [r0, #10]
    15e2:	b9d9      	cbnz	r1, 161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>
    15e4:	f000 fc18 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    15e8:	f001 ff06 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15ec:	6831      	ldr	r1, [r6, #0]
    15ee:	1a08      	subs	r0, r1, r0
    15f0:	0200      	lsls	r0, r0, #8
    15f2:	17c1      	asrs	r1, r0, #31
    15f4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15f8:	1200      	asrs	r0, r0, #8
    15fa:	2833      	cmp	r0, #51	; 0x33
    15fc:	da0e      	bge.n	161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>
    15fe:	f888 5000 	strb.w	r5, [r8]
    1602:	f899 0014 	ldrb.w	r0, [r9, #20]
    1606:	7b21      	ldrb	r1, [r4, #12]
    1608:	4288      	cmp	r0, r1
    160a:	d802      	bhi.n	1612 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28a>
    160c:	2000      	movs	r0, #0
    160e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1612:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    1616:	7845      	ldrb	r5, [r0, #1]
    1618:	2d20      	cmp	r5, #32
    161a:	d1ce      	bne.n	15ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x232>
    161c:	2001      	movs	r0, #1
    161e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1622:	0000      	.short	0x0000
    1624:	20001104 	.word	0x20001104
    1628:	20000d84 	.word	0x20000d84
    162c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1630:	b098      	sub	sp, #96	; 0x60
    1632:	4616      	mov	r6, r2
    1634:	460d      	mov	r5, r1
    1636:	f04f 0800 	mov.w	r8, #0
    163a:	f04f 0b01 	mov.w	fp, #1
    163e:	f002 f95d 	bl	38fc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1642:	4604      	mov	r4, r0
    1644:	2d01      	cmp	r5, #1
    1646:	bf18      	it	ne
    1648:	2d02      	cmpne	r5, #2
    164a:	d005      	beq.n	1658 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d0>
    164c:	f640 1194 	movw	r1, #2452	; 0x994
    1650:	f04f 0070 	mov.w	r0, #112	; 0x70
    1654:	f002 ff4e 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1658:	49f9      	ldr	r1, [pc, #996]	; (1a40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b8>)
    165a:	2001      	movs	r0, #1
    165c:	6008      	str	r0, [r1, #0]
    165e:	49f9      	ldr	r1, [pc, #996]	; (1a44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6bc>)
    1660:	6889      	ldr	r1, [r1, #8]
    1662:	6008      	str	r0, [r1, #0]
    1664:	2000      	movs	r0, #0
    1666:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    166a:	900c      	str	r0, [sp, #48]	; 0x30
    166c:	1e40      	subs	r0, r0, #1
    166e:	900e      	str	r0, [sp, #56]	; 0x38
    1670:	49f5      	ldr	r1, [pc, #980]	; (1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    1672:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1676:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    167a:	3308      	adds	r3, #8
    167c:	af0f      	add	r7, sp, #60	; 0x3c
    167e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1680:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1684:	a80f      	add	r0, sp, #60	; 0x3c
    1686:	f000 fbc7 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    168a:	900d      	str	r0, [sp, #52]	; 0x34
    168c:	48ee      	ldr	r0, [pc, #952]	; (1a48 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c0>)
    168e:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1692:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1696:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    169a:	f1b9 0f00 	cmp.w	r9, #0
    169e:	bf14      	ite	ne
    16a0:	f04f 0a01 	movne.w	sl, #1
    16a4:	f04f 0a00 	moveq.w	sl, #0
    16a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    16aa:	9014      	str	r0, [sp, #80]	; 0x50
    16ac:	f1ba 0f00 	cmp.w	sl, #0
    16b0:	d009      	beq.n	16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    16b2:	48e6      	ldr	r0, [pc, #920]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    16b4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    16b8:	b928      	cbnz	r0, 16c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33e>
    16ba:	f002 fea3 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16be:	2800      	cmp	r0, #0
    16c0:	bf08      	it	eq
    16c2:	2701      	moveq	r7, #1
    16c4:	d000      	beq.n	16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>
    16c6:	2700      	movs	r7, #0
    16c8:	48e1      	ldr	r0, [pc, #900]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
    16ca:	2200      	movs	r2, #0
    16cc:	9215      	str	r2, [sp, #84]	; 0x54
    16ce:	7800      	ldrb	r0, [r0, #0]
    16d0:	4616      	mov	r6, r2
    16d2:	2801      	cmp	r0, #1
    16d4:	bf18      	it	ne
    16d6:	2803      	cmpne	r0, #3
    16d8:	d140      	bne.n	175c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d4>
    16da:	48dd      	ldr	r0, [pc, #884]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
    16dc:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    16e0:	eba8 0009 	sub.w	r0, r8, r9
    16e4:	9015      	str	r0, [sp, #84]	; 0x54
    16e6:	45c8      	cmp	r8, r9
    16e8:	d938      	bls.n	175c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d4>
    16ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    16ec:	ea6f 0108 	mvn.w	r1, r8
    16f0:	f8df e360 	ldr.w	lr, [pc, #864]	; 1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>
    16f4:	1858      	adds	r0, r3, r1
    16f6:	f10d 0c0c 	add.w	ip, sp, #12
    16fa:	aa17      	add	r2, sp, #92	; 0x5c
    16fc:	4573      	cmp	r3, lr
    16fe:	d904      	bls.n	170a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x382>
    1700:	f240 6109 	movw	r1, #1545	; 0x609
    1704:	2070      	movs	r0, #112	; 0x70
    1706:	f002 fef5 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170a:	4bd3      	ldr	r3, [pc, #844]	; (1a58 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d0>)
    170c:	4299      	cmp	r1, r3
    170e:	dd04      	ble.n	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
    1710:	f240 610a 	movw	r1, #1546	; 0x60a
    1714:	2070      	movs	r0, #112	; 0x70
    1716:	f002 feed 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    171a:	4bd0      	ldr	r3, [pc, #832]	; (1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>)
    171c:	4299      	cmp	r1, r3
    171e:	da04      	bge.n	172a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a2>
    1720:	f240 610b 	movw	r1, #1547	; 0x60b
    1724:	2070      	movs	r0, #112	; 0x70
    1726:	f002 fee5 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    172a:	49cd      	ldr	r1, [pc, #820]	; (1a60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d8>)
    172c:	4281      	cmp	r1, r0
    172e:	bfdc      	itt	le
    1730:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1734:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1738:	dd05      	ble.n	1746 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3be>
    173a:	2800      	cmp	r0, #0
    173c:	bfbc      	itt	lt
    173e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1742:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1746:	4661      	mov	r1, ip
    1748:	f001 fe72 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    174c:	9803      	ldr	r0, [sp, #12]
    174e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1750:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1754:	9003      	str	r0, [sp, #12]
    1756:	1a08      	subs	r0, r1, r0
    1758:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    175c:	2f00      	cmp	r7, #0
    175e:	bf18      	it	ne
    1760:	2632      	movne	r6, #50	; 0x32
    1762:	d104      	bne.n	176e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e6>
    1764:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1768:	2800      	cmp	r0, #0
    176a:	bf18      	it	ne
    176c:	2602      	movne	r6, #2
    176e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1772:	d008      	beq.n	1786 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3fe>
    1774:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1776:	1b00      	subs	r0, r0, r4
    1778:	0200      	lsls	r0, r0, #8
    177a:	17c1      	asrs	r1, r0, #31
    177c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1780:	1200      	asrs	r0, r0, #8
    1782:	2801      	cmp	r0, #1
    1784:	da02      	bge.n	178c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x404>
    1786:	2004      	movs	r0, #4
    1788:	9918      	ldr	r1, [sp, #96]	; 0x60
    178a:	e00b      	b.n	17a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x41c>
    178c:	b147      	cbz	r7, 17a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x418>
    178e:	48af      	ldr	r0, [pc, #700]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    1790:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1794:	b120      	cbz	r0, 17a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x418>
    1796:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    179a:	1c06      	adds	r6, r0, #0
    179c:	bf18      	it	ne
    179e:	2602      	movne	r6, #2
    17a0:	4621      	mov	r1, r4
    17a2:	2001      	movs	r0, #1
    17a4:	f1b9 0f00 	cmp.w	r9, #0
    17a8:	d002      	beq.n	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
    17aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    17ac:	2b1e      	cmp	r3, #30
    17ae:	da02      	bge.n	17b6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42e>
    17b0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    17b4:	b113      	cbz	r3, 17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>
    17b6:	f04f 0b00 	mov.w	fp, #0
    17ba:	1e40      	subs	r0, r0, #1
    17bc:	1983      	adds	r3, r0, r6
    17be:	48a4      	ldr	r0, [pc, #656]	; (1a50 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c8>)
    17c0:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    17c4:	7800      	ldrb	r0, [r0, #0]
    17c6:	9015      	str	r0, [sp, #84]	; 0x54
    17c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    17ca:	1a80      	subs	r0, r0, r2
    17cc:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    17d0:	ebac 0001 	sub.w	r0, ip, r1
    17d4:	0200      	lsls	r0, r0, #8
    17d6:	17c6      	asrs	r6, r0, #31
    17d8:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    17dc:	1200      	asrs	r0, r0, #8
    17de:	4298      	cmp	r0, r3
    17e0:	db18      	blt.n	1814 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48c>
    17e2:	2a00      	cmp	r2, #0
    17e4:	bf18      	it	ne
    17e6:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    17ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    17ec:	9705      	str	r7, [sp, #20]
    17ee:	2700      	movs	r7, #0
    17f0:	f001 ff7c 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    17f4:	1a30      	subs	r0, r6, r0
    17f6:	0200      	lsls	r0, r0, #8
    17f8:	17c1      	asrs	r1, r0, #31
    17fa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    17fe:	1200      	asrs	r0, r0, #8
    1800:	283e      	cmp	r0, #62	; 0x3e
    1802:	da3f      	bge.n	1884 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4fc>
    1804:	2d01      	cmp	r5, #1
    1806:	d020      	beq.n	184a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c2>
    1808:	1e70      	subs	r0, r6, #1
    180a:	9905      	ldr	r1, [sp, #20]
    180c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1810:	b319      	cbz	r1, 185a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d2>
    1812:	e02d      	b.n	1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
    1814:	b182      	cbz	r2, 1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>
    1816:	f1be 0f00 	cmp.w	lr, #0
    181a:	bf04      	itt	eq
    181c:	9815      	ldreq	r0, [sp, #84]	; 0x54
    181e:	2803      	cmpeq	r0, #3
    1820:	d00a      	beq.n	1838 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4b0>
    1822:	b927      	cbnz	r7, 182e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a6>
    1824:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1828:	2800      	cmp	r0, #0
    182a:	bf18      	it	ne
    182c:	1e9b      	subne	r3, r3, #2
    182e:	2200      	movs	r2, #0
    1830:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1834:	4690      	mov	r8, r2
    1836:	e7c7      	b.n	17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>
    1838:	bb07      	cbnz	r7, 187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
    183a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    183e:	b1e8      	cbz	r0, 187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
    1840:	2000      	movs	r0, #0
    1842:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    1846:	1e9b      	subs	r3, r3, #2
    1848:	e7be      	b.n	17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>
    184a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    184e:	d120      	bne.n	1892 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50a>
    1850:	f640 110d 	movw	r1, #2317	; 0x90d
    1854:	2070      	movs	r0, #112	; 0x70
    1856:	f002 fe4d 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    185a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    185e:	d007      	beq.n	1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
    1860:	1a21      	subs	r1, r4, r0
    1862:	0209      	lsls	r1, r1, #8
    1864:	17ca      	asrs	r2, r1, #31
    1866:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    186a:	1209      	asrs	r1, r1, #8
    186c:	2904      	cmp	r1, #4
    186e:	dd03      	ble.n	1878 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f0>
    1870:	4604      	mov	r4, r0
    1872:	f001 ff41 	bl	36f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1876:	e00c      	b.n	1892 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50a>
    1878:	2900      	cmp	r1, #0
    187a:	dd0a      	ble.n	1892 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50a>
    187c:	b01b      	add	sp, #108	; 0x6c
    187e:	2000      	movs	r0, #0
    1880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1884:	1e70      	subs	r0, r6, #1
    1886:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    188a:	4620      	mov	r0, r4
    188c:	f001 ff34 	bl	36f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1890:	4657      	mov	r7, sl
    1892:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1896:	d024      	beq.n	18e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x55a>
    1898:	980f      	ldr	r0, [sp, #60]	; 0x3c
    189a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    189c:	1b00      	subs	r0, r0, r4
    189e:	1b1b      	subs	r3, r3, r4
    18a0:	4a70      	ldr	r2, [pc, #448]	; (1a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6dc>)
    18a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    18a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    18aa:	4583      	cmp	fp, r0
    18ac:	bf98      	it	ls
    18ae:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    18b2:	d2e3      	bcs.n	187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
    18b4:	429a      	cmp	r2, r3
    18b6:	d3e1      	bcc.n	187c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f4>
    18b8:	4620      	mov	r0, r4
    18ba:	f00a fdb9 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18be:	4965      	ldr	r1, [pc, #404]	; (1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>)
    18c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    18c2:	1c4b      	adds	r3, r1, #1
    18c4:	1a16      	subs	r6, r2, r0
    18c6:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    18ca:	bf24      	itt	cs
    18cc:	eba0 0c02 	subcs.w	ip, r0, r2
    18d0:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    18d4:	d310      	bcc.n	18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
    18d6:	42b1      	cmp	r1, r6
    18d8:	d208      	bcs.n	18ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x564>
    18da:	1a08      	subs	r0, r1, r0
    18dc:	4410      	add	r0, r2
    18de:	1c46      	adds	r6, r0, #1
    18e0:	e00a      	b.n	18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
    18e2:	f640 212d 	movw	r1, #2605	; 0xa2d
    18e6:	2070      	movs	r0, #112	; 0x70
    18e8:	f002 fe04 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ec:	4561      	cmp	r1, ip
    18ee:	d22c      	bcs.n	194a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c2>
    18f0:	1a89      	subs	r1, r1, r2
    18f2:	4408      	add	r0, r1
    18f4:	1c40      	adds	r0, r0, #1
    18f6:	4246      	negs	r6, r0
    18f8:	4854      	ldr	r0, [pc, #336]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    18fa:	7f80      	ldrb	r0, [r0, #30]
    18fc:	b350      	cbz	r0, 1954 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5cc>
    18fe:	4628      	mov	r0, r5
    1900:	4645      	mov	r5, r8
    1902:	f04f 0b00 	mov.w	fp, #0
    1906:	46d8      	mov	r8, fp
    1908:	2801      	cmp	r0, #1
    190a:	d005      	beq.n	1918 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x590>
    190c:	2002      	movs	r0, #2
    190e:	f002 f94b 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1912:	2001      	movs	r0, #1
    1914:	f002 f948 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1918:	45a9      	cmp	r9, r5
    191a:	d227      	bcs.n	196c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e4>
    191c:	eba6 0105 	sub.w	r1, r6, r5
    1920:	f04f 0301 	mov.w	r3, #1
    1924:	f04f 0203 	mov.w	r2, #3
    1928:	f04f 0002 	mov.w	r0, #2
    192c:	f002 f868 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1930:	2800      	cmp	r0, #0
    1932:	bf08      	it	eq
    1934:	f04f 0801 	moveq.w	r8, #1
    1938:	f1b9 0f00 	cmp.w	r9, #0
    193c:	d030      	beq.n	19a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x618>
    193e:	2301      	movs	r3, #1
    1940:	eba6 0109 	sub.w	r1, r6, r9
    1944:	2203      	movs	r2, #3
    1946:	4618      	mov	r0, r3
    1948:	e01e      	b.n	1988 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x600>
    194a:	f640 310c 	movw	r1, #2828	; 0xb0c
    194e:	2070      	movs	r0, #112	; 0x70
    1950:	f002 fdd0 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1954:	45c1      	cmp	r9, r8
    1956:	bf34      	ite	cc
    1958:	4640      	movcc	r0, r8
    195a:	4648      	movcs	r0, r9
    195c:	4458      	add	r0, fp
    195e:	42b0      	cmp	r0, r6
    1960:	dbcd      	blt.n	18fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x576>
    1962:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    1966:	2070      	movs	r0, #112	; 0x70
    1968:	f002 fdc4 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    196c:	d910      	bls.n	1990 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x608>
    196e:	2301      	movs	r3, #1
    1970:	eba6 0109 	sub.w	r1, r6, r9
    1974:	2203      	movs	r2, #3
    1976:	4618      	mov	r0, r3
    1978:	f002 f842 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    197c:	b328      	cbz	r0, 19ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x642>
    197e:	b17d      	cbz	r5, 19a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x618>
    1980:	1b71      	subs	r1, r6, r5
    1982:	2301      	movs	r3, #1
    1984:	2203      	movs	r2, #3
    1986:	2002      	movs	r0, #2
    1988:	f002 f83a 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    198c:	b1e8      	cbz	r0, 19ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x642>
    198e:	e007      	b.n	19a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x618>
    1990:	ea55 0009 	orrs.w	r0, r5, r9
    1994:	d004      	beq.n	19a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x618>
    1996:	f640 1177 	movw	r1, #2423	; 0x977
    199a:	2070      	movs	r0, #112	; 0x70
    199c:	f002 fdaa 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19a0:	2301      	movs	r3, #1
    19a2:	2203      	movs	r2, #3
    19a4:	4631      	mov	r1, r6
    19a6:	2000      	movs	r0, #0
    19a8:	f002 f82a 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    19ac:	b168      	cbz	r0, 19ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x642>
    19ae:	2501      	movs	r5, #1
    19b0:	f1b8 0f00 	cmp.w	r8, #0
    19b4:	d003      	beq.n	19be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x636>
    19b6:	9814      	ldr	r0, [sp, #80]	; 0x50
    19b8:	900f      	str	r0, [sp, #60]	; 0x3c
    19ba:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    19be:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e0>
    19c2:	f1ba 0f00 	cmp.w	sl, #0
    19c6:	d10e      	bne.n	19e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x65e>
    19c8:	e009      	b.n	19de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x656>
    19ca:	2002      	movs	r0, #2
    19cc:	f002 f8ec 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19d0:	2001      	movs	r0, #1
    19d2:	f002 f8e9 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    19d6:	b01b      	add	sp, #108	; 0x6c
    19d8:	2000      	movs	r0, #0
    19da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19de:	481b      	ldr	r0, [pc, #108]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    19e0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    19e4:	b100      	cbz	r0, 19e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x660>
    19e6:	b34f      	cbz	r7, 1a3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b4>
    19e8:	f8df a060 	ldr.w	sl, [pc, #96]	; 1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>
    19ec:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    19f0:	b118      	cbz	r0, 19fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x672>
    19f2:	f002 fbb1 	bl	4158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    19f6:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    19fa:	b307      	cbz	r7, 1a3e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b6>
    19fc:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1a00:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1a04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a08:	f8c8 0000 	str.w	r0, [r8]
    1a0c:	2300      	movs	r3, #0
    1a0e:	2203      	movs	r2, #3
    1a10:	2005      	movs	r0, #5
    1a12:	f001 fff5 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1a16:	b368      	cbz	r0, 1a74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ec>
    1a18:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1a1c:	2005      	movs	r0, #5
    1a1e:	f002 f98f 	bl	3d40 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1a22:	4912      	ldr	r1, [pc, #72]	; (1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>)
    1a24:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1a28:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1a2c:	4910      	ldr	r1, [pc, #64]	; (1a70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e8>)
    1a2e:	12e0      	asrs	r0, r4, #11
    1a30:	6008      	str	r0, [r1, #0]
    1a32:	4c06      	ldr	r4, [pc, #24]	; (1a4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c4>)
    1a34:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a38:	b3e8      	cbz	r0, 1ab6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72e>
    1a3a:	e030      	b.n	1a9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x716>
    1a3c:	e01b      	b.n	1a76 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ee>
    1a3e:	e01f      	b.n	1a80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f8>
    1a40:	40000508 	.word	0x40000508
    1a44:	20000010 	.word	0x20000010
    1a48:	20000d84 	.word	0x20000d84
    1a4c:	20001104 	.word	0x20001104
    1a50:	20000012 	.word	0x20000012
    1a54:	1e847fff 	.word	0x1e847fff
    1a58:	07a12000 	.word	0x07a12000
    1a5c:	f85ee000 	.word	0xf85ee000
    1a60:	1e848000 	.word	0x1e848000
    1a64:	003fffff 	.word	0x003fffff
    1a68:	4001f508 	.word	0x4001f508
    1a6c:	4001f098 	.word	0x4001f098
    1a70:	4001f504 	.word	0x4001f504
    1a74:	e025      	b.n	1ac2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x73a>
    1a76:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1b30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a8>
    1a7a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1a7e:	b1c8      	cbz	r0, 1ab4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72c>
    1a80:	4c2b      	ldr	r4, [pc, #172]	; (1b30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a8>)
    1a82:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1a86:	b150      	cbz	r0, 1a9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x716>
    1a88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1a8c:	f8c8 0000 	str.w	r0, [r8]
    1a90:	2005      	movs	r0, #5
    1a92:	f002 f889 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1a96:	f002 fbc7 	bl	4228 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1a9a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1a9e:	eba6 0009 	sub.w	r0, r6, r9
    1aa2:	f1a0 0119 	sub.w	r1, r0, #25
    1aa6:	2900      	cmp	r1, #0
    1aa8:	dc15      	bgt.n	1ad6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74e>
    1aaa:	f640 2171 	movw	r1, #2673	; 0xa71
    1aae:	2070      	movs	r0, #112	; 0x70
    1ab0:	f002 fd20 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ab4:	e000      	b.n	1ab8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x730>
    1ab6:	e009      	b.n	1acc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x744>
    1ab8:	f002 fb6a 	bl	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1abc:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1ac0:	e79b      	b.n	19fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x672>
    1ac2:	f240 313e 	movw	r1, #830	; 0x33e
    1ac6:	2070      	movs	r0, #112	; 0x70
    1ac8:	f002 fd14 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1acc:	f002 fb9e 	bl	420c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1ad0:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1ad4:	e7e3      	b.n	1a9e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x716>
    1ad6:	2203      	movs	r2, #3
    1ad8:	2301      	movs	r3, #1
    1ada:	4610      	mov	r0, r2
    1adc:	f001 ff90 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1ae0:	b308      	cbz	r0, 1b26 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x79e>
    1ae2:	4814      	ldr	r0, [pc, #80]	; (1b34 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7ac>)
    1ae4:	6880      	ldr	r0, [r0, #8]
    1ae6:	f8c0 b000 	str.w	fp, [r0]
    1aea:	4813      	ldr	r0, [pc, #76]	; (1b38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b0>)
    1aec:	f8c0 b000 	str.w	fp, [r0]
    1af0:	ac0c      	add	r4, sp, #48	; 0x30
    1af2:	4812      	ldr	r0, [pc, #72]	; (1b3c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b4>)
    1af4:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1af8:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1afc:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1b00:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1b04:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1b08:	ac10      	add	r4, sp, #64	; 0x40
    1b0a:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1b0e:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1b12:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1b16:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1b1a:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1b1e:	b01b      	add	sp, #108	; 0x6c
    1b20:	2001      	movs	r0, #1
    1b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b26:	f640 2179 	movw	r1, #2681	; 0xa79
    1b2a:	2070      	movs	r0, #112	; 0x70
    1b2c:	f002 fce2 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b30:	20001104 	.word	0x20001104
    1b34:	20000010 	.word	0x20000010
    1b38:	40000508 	.word	0x40000508
    1b3c:	20000d84 	.word	0x20000d84
    1b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b44:	4606      	mov	r6, r0
    1b46:	b083      	sub	sp, #12
    1b48:	7808      	ldrb	r0, [r1, #0]
    1b4a:	7390      	strb	r0, [r2, #14]
    1b4c:	7acf      	ldrb	r7, [r1, #11]
    1b4e:	7357      	strb	r7, [r2, #13]
    1b50:	7a88      	ldrb	r0, [r1, #10]
    1b52:	7310      	strb	r0, [r2, #12]
    1b54:	8908      	ldrh	r0, [r1, #8]
    1b56:	4614      	mov	r4, r2
    1b58:	8150      	strh	r0, [r2, #10]
    1b5a:	460d      	mov	r5, r1
    1b5c:	780a      	ldrb	r2, [r1, #0]
    1b5e:	495f      	ldr	r1, [pc, #380]	; (1cdc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x954>)
    1b60:	4699      	mov	r9, r3
    1b62:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1b66:	424b      	negs	r3, r1
    1b68:	f1ac 0801 	sub.w	r8, ip, #1
    1b6c:	b15a      	cbz	r2, 1b86 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7fe>
    1b6e:	43c0      	mvns	r0, r0
    1b70:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1b74:	f104 0208 	add.w	r2, r4, #8
    1b78:	4288      	cmp	r0, r1
    1b7a:	dd3d      	ble.n	1bf8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x870>
    1b7c:	f240 610a 	movw	r1, #1546	; 0x60a
    1b80:	2070      	movs	r0, #112	; 0x70
    1b82:	f002 fcb7 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b86:	68ee      	ldr	r6, [r5, #12]
    1b88:	686d      	ldr	r5, [r5, #4]
    1b8a:	ea6f 0900 	mvn.w	r9, r0
    1b8e:	f104 0208 	add.w	r2, r4, #8
    1b92:	eb06 0009 	add.w	r0, r6, r9
    1b96:	4546      	cmp	r6, r8
    1b98:	d904      	bls.n	1ba4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81c>
    1b9a:	f240 6109 	movw	r1, #1545	; 0x609
    1b9e:	2070      	movs	r0, #112	; 0x70
    1ba0:	f002 fca8 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ba4:	4589      	cmp	r9, r1
    1ba6:	dce9      	bgt.n	1b7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7f4>
    1ba8:	4599      	cmp	r9, r3
    1baa:	db28      	blt.n	1bfe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x876>
    1bac:	4584      	cmp	ip, r0
    1bae:	bfdc      	itt	le
    1bb0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1bb4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1bb8:	dd05      	ble.n	1bc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x83e>
    1bba:	2800      	cmp	r0, #0
    1bbc:	bfbc      	itt	lt
    1bbe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1bc2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1bc6:	4621      	mov	r1, r4
    1bc8:	f001 fc32 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1bcc:	6820      	ldr	r0, [r4, #0]
    1bce:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1bd2:	1970      	adds	r0, r6, r5
    1bd4:	1c40      	adds	r0, r0, #1
    1bd6:	6021      	str	r1, [r4, #0]
    1bd8:	2f00      	cmp	r7, #0
    1bda:	bf08      	it	eq
    1bdc:	307a      	addeq	r0, #122	; 0x7a
    1bde:	d003      	beq.n	1be8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x860>
    1be0:	2f01      	cmp	r7, #1
    1be2:	bf08      	it	eq
    1be4:	3048      	addeq	r0, #72	; 0x48
    1be6:	d12d      	bne.n	1c44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8bc>
    1be8:	f001 fc06 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1bec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bf0:	6060      	str	r0, [r4, #4]
    1bf2:	b003      	add	sp, #12
    1bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1bf8:	4601      	mov	r1, r0
    1bfa:	4298      	cmp	r0, r3
    1bfc:	da04      	bge.n	1c08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x880>
    1bfe:	f240 610b 	movw	r1, #1547	; 0x60b
    1c02:	2070      	movs	r0, #112	; 0x70
    1c04:	f002 fc76 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c08:	4584      	cmp	ip, r0
    1c0a:	bfdc      	itt	le
    1c0c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1c10:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1c14:	dd05      	ble.n	1c22 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x89a>
    1c16:	2800      	cmp	r0, #0
    1c18:	bfbc      	itt	lt
    1c1a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1c1e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1c22:	4621      	mov	r1, r4
    1c24:	f001 fc04 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c28:	6820      	ldr	r0, [r4, #0]
    1c2a:	2f00      	cmp	r7, #0
    1c2c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c30:	f108 0001 	add.w	r0, r8, #1
    1c34:	6021      	str	r1, [r4, #0]
    1c36:	bf08      	it	eq
    1c38:	307a      	addeq	r0, #122	; 0x7a
    1c3a:	d008      	beq.n	1c4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c6>
    1c3c:	2f01      	cmp	r7, #1
    1c3e:	bf08      	it	eq
    1c40:	3048      	addeq	r0, #72	; 0x48
    1c42:	d004      	beq.n	1c4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c6>
    1c44:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1c48:	2070      	movs	r0, #112	; 0x70
    1c4a:	f002 fc53 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c4e:	f001 fbd3 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1c52:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c56:	6061      	str	r1, [r4, #4]
    1c58:	8960      	ldrh	r0, [r4, #10]
    1c5a:	aa01      	add	r2, sp, #4
    1c5c:	4669      	mov	r1, sp
    1c5e:	f001 fbe7 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1c62:	481f      	ldr	r0, [pc, #124]	; (1ce0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x958>)
    1c64:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1c68:	2920      	cmp	r1, #32
    1c6a:	d023      	beq.n	1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
    1c6c:	6900      	ldr	r0, [r0, #16]
    1c6e:	1d40      	adds	r0, r0, #5
    1c70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c74:	e9d4 2100 	ldrd	r2, r1, [r4]
    1c78:	1a89      	subs	r1, r1, r2
    1c7a:	6020      	str	r0, [r4, #0]
    1c7c:	4408      	add	r0, r1
    1c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c82:	6060      	str	r0, [r4, #4]
    1c84:	464b      	mov	r3, r9
    1c86:	4632      	mov	r2, r6
    1c88:	4621      	mov	r1, r4
    1c8a:	68e8      	ldr	r0, [r5, #12]
    1c8c:	f7ff fad2 	bl	1234 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1c90:	2800      	cmp	r0, #0
    1c92:	bf1c      	itt	ne
    1c94:	b003      	addne	sp, #12
    1c96:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c9a:	e9d4 1000 	ldrd	r1, r0, [r4]
    1c9e:	1a40      	subs	r0, r0, r1
    1ca0:	4430      	add	r0, r6
    1ca2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1ca6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1caa:	e9c4 1000 	strd	r1, r0, [r4]
    1cae:	b003      	add	sp, #12
    1cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1cb4:	8960      	ldrh	r0, [r4, #10]
    1cb6:	f106 0709 	add.w	r7, r6, #9
    1cba:	b120      	cbz	r0, 1cc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x93e>
    1cbc:	f002 fba2 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1cc0:	2800      	cmp	r0, #0
    1cc2:	bf08      	it	eq
    1cc4:	3732      	addeq	r7, #50	; 0x32
    1cc6:	4807      	ldr	r0, [pc, #28]	; (1ce4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x95c>)
    1cc8:	7841      	ldrb	r1, [r0, #1]
    1cca:	9800      	ldr	r0, [sp, #0]
    1ccc:	4281      	cmp	r1, r0
    1cce:	bf84      	itt	hi
    1cd0:	1a08      	subhi	r0, r1, r0
    1cd2:	4407      	addhi	r7, r0
    1cd4:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1cd8:	e7cc      	b.n	1c74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8ec>
    1cda:	0000      	.short	0x0000
    1cdc:	07a12000 	.word	0x07a12000
    1ce0:	20001104 	.word	0x20001104
    1ce4:	20000012 	.word	0x20000012
    1ce8:	b510      	push	{r4, lr}
    1cea:	4c15      	ldr	r4, [pc, #84]	; (1d40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9b8>)
    1cec:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cf0:	2820      	cmp	r0, #32
    1cf2:	bf18      	it	ne
    1cf4:	bd10      	popne	{r4, pc}
    1cf6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1cfa:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1cfe:	f890 1020 	ldrb.w	r1, [r0, #32]
    1d02:	2920      	cmp	r1, #32
    1d04:	d017      	beq.n	1d36 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9ae>
    1d06:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1d44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9bc>
    1d0a:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1d0e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1d12:	785b      	ldrb	r3, [r3, #1]
    1d14:	f880 3020 	strb.w	r3, [r0, #32]
    1d18:	2301      	movs	r3, #1
    1d1a:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1d1e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1d22:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1d26:	2002      	movs	r0, #2
    1d28:	f000 f8b0 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1d2c:	2000      	movs	r0, #0
    1d2e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1d32:	77a0      	strb	r0, [r4, #30]
    1d34:	bd10      	pop	{r4, pc}
    1d36:	f240 318b 	movw	r1, #907	; 0x38b
    1d3a:	2070      	movs	r0, #112	; 0x70
    1d3c:	f002 fbda 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d40:	20001104 	.word	0x20001104
    1d44:	20001084 	.word	0x20001084
    1d48:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1d4c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>
    1d50:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1d54:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1d58:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1d5c:	2c20      	cmp	r4, #32
    1d5e:	bf08      	it	eq
    1d60:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1d64:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1d68:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1d6c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1d70:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1d74:	2607      	movs	r6, #7
    1d76:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1d7a:	2801      	cmp	r0, #1
    1d7c:	d00e      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d7e:	2804      	cmp	r0, #4
    1d80:	bf08      	it	eq
    1d82:	2602      	moveq	r6, #2
    1d84:	d00a      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d86:	2805      	cmp	r0, #5
    1d88:	bf0c      	ite	eq
    1d8a:	2603      	moveq	r6, #3
    1d8c:	2806      	cmpne	r0, #6
    1d8e:	d005      	beq.n	1d9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>
    1d90:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1d94:	f04f 0070 	mov.w	r0, #112	; 0x70
    1d98:	f002 fbac 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d9c:	f1bb 0f00 	cmp.w	fp, #0
    1da0:	bf18      	it	ne
    1da2:	f3af 8000 	nopne.w
    1da6:	f3ef 8010 	mrs	r0, PRIMASK
    1daa:	b672      	cpsid	i
    1dac:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1db0:	784a      	ldrb	r2, [r1, #1]
    1db2:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1db6:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1dba:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1dbe:	42a2      	cmp	r2, r4
    1dc0:	bf04      	itt	eq
    1dc2:	2220      	moveq	r2, #32
    1dc4:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1dc8:	b1b8      	cbz	r0, 1dfa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xae>
    1dca:	462a      	mov	r2, r5
    1dcc:	4621      	mov	r1, r4
    1dce:	2001      	movs	r0, #1
    1dd0:	f000 f85c 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1dd4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1dd8:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1ddc:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1de0:	6840      	ldr	r0, [r0, #4]
    1de2:	4631      	mov	r1, r6
    1de4:	4790      	blx	r2
    1de6:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1dea:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1dee:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1df2:	2c20      	cmp	r4, #32
    1df4:	d1bc      	bne.n	1d70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24>
    1df6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1dfa:	4806      	ldr	r0, [pc, #24]	; (1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>)
    1dfc:	2800      	cmp	r0, #0
    1dfe:	bf18      	it	ne
    1e00:	f3af 8000 	nopne.w
    1e04:	b662      	cpsie	i
    1e06:	e7e0      	b.n	1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1e08:	20001104 	.word	0x20001104
    1e0c:	00000000 	.word	0x00000000
    1e10:	20001084 	.word	0x20001084
    1e14:	00000000 	.word	0x00000000
    1e18:	b510      	push	{r4, lr}
    1e1a:	4604      	mov	r4, r0
    1e1c:	6800      	ldr	r0, [r0, #0]
    1e1e:	f00a fb07 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e22:	4602      	mov	r2, r0
    1e24:	8960      	ldrh	r0, [r4, #10]
    1e26:	7a21      	ldrb	r1, [r4, #8]
    1e28:	4b14      	ldr	r3, [pc, #80]	; (1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>)
    1e2a:	4408      	add	r0, r1
    1e2c:	1c41      	adds	r1, r0, #1
    1e2e:	1850      	adds	r0, r2, r1
    1e30:	429a      	cmp	r2, r3
    1e32:	d904      	bls.n	1e3e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf2>
    1e34:	f240 6109 	movw	r1, #1545	; 0x609
    1e38:	2070      	movs	r0, #112	; 0x70
    1e3a:	f002 fb5b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e3e:	4a10      	ldr	r2, [pc, #64]	; (1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>)
    1e40:	4291      	cmp	r1, r2
    1e42:	dd04      	ble.n	1e4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x102>
    1e44:	f240 610a 	movw	r1, #1546	; 0x60a
    1e48:	2070      	movs	r0, #112	; 0x70
    1e4a:	f002 fb53 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e4e:	4a0d      	ldr	r2, [pc, #52]	; (1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>)
    1e50:	4291      	cmp	r1, r2
    1e52:	da04      	bge.n	1e5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x112>
    1e54:	f240 610b 	movw	r1, #1547	; 0x60b
    1e58:	2070      	movs	r0, #112	; 0x70
    1e5a:	f002 fb4b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e5e:	490a      	ldr	r1, [pc, #40]	; (1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>)
    1e60:	4281      	cmp	r1, r0
    1e62:	bfde      	ittt	le
    1e64:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e68:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e6c:	bd10      	pople	{r4, pc}
    1e6e:	2800      	cmp	r0, #0
    1e70:	bfbc      	itt	lt
    1e72:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e76:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e7a:	bd10      	pop	{r4, pc}
    1e7c:	1e847fff 	.word	0x1e847fff
    1e80:	07a12000 	.word	0x07a12000
    1e84:	f85ee000 	.word	0xf85ee000
    1e88:	1e848000 	.word	0x1e848000
    1e8c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1e90:	b510      	push	{r4, lr}
    1e92:	2300      	movs	r3, #0
    1e94:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1e98:	2807      	cmp	r0, #7
    1e9a:	d21e      	bcs.n	1eda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18e>
    1e9c:	e8df f000 	tbb	[pc, r0]
    1ea0:	05050505 	.word	0x05050505
    1ea4:	00040404 	.word	0x00040404
    1ea8:	2301      	movs	r3, #1
    1eaa:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	bf08      	it	eq
    1eb2:	bd10      	popeq	{r4, pc}
    1eb4:	480c      	ldr	r0, [pc, #48]	; (1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>)
    1eb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1eba:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1ebe:	2820      	cmp	r0, #32
    1ec0:	bf0e      	itee	eq
    1ec2:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1ec6:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    1eca:	7041      	strbne	r1, [r0, #1]
    1ecc:	2020      	movs	r0, #32
    1ece:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1ed2:	7058      	strb	r0, [r3, #1]
    1ed4:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1ed8:	bd10      	pop	{r4, pc}
    1eda:	f44f 7115 	mov.w	r1, #596	; 0x254
    1ede:	2070      	movs	r0, #112	; 0x70
    1ee0:	f002 fb08 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ee4:	20001084 	.word	0x20001084
    1ee8:	20001104 	.word	0x20001104
    1eec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ef0:	b083      	sub	sp, #12
    1ef2:	485c      	ldr	r0, [pc, #368]	; (2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>)
    1ef4:	9904      	ldr	r1, [sp, #16]
    1ef6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    1efa:	9001      	str	r0, [sp, #4]
    1efc:	f890 4020 	ldrb.w	r4, [r0, #32]
    1f00:	9803      	ldr	r0, [sp, #12]
    1f02:	4625      	mov	r5, r4
    1f04:	2801      	cmp	r0, #1
    1f06:	bf18      	it	ne
    1f08:	2802      	cmpne	r0, #2
    1f0a:	d005      	beq.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1f0c:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    1f10:	f04f 0070 	mov.w	r0, #112	; 0x70
    1f14:	f002 faee 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f18:	2700      	movs	r7, #0
    1f1a:	2d20      	cmp	r5, #32
    1f1c:	d04a      	beq.n	1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1f1e:	4851      	ldr	r0, [pc, #324]	; (2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>)
    1f20:	9100      	str	r1, [sp, #0]
    1f22:	2600      	movs	r6, #0
    1f24:	7f80      	ldrb	r0, [r0, #30]
    1f26:	2800      	cmp	r0, #0
    1f28:	bf08      	it	eq
    1f2a:	2602      	moveq	r6, #2
    1f2c:	f001 fbde 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1f30:	f8df a138 	ldr.w	sl, [pc, #312]	; 206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>
    1f34:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1f38:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    1f3c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2068 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31c>
    1f40:	688a      	ldr	r2, [r1, #8]
    1f42:	68c9      	ldr	r1, [r1, #12]
    1f44:	1a12      	subs	r2, r2, r0
    1f46:	1a09      	subs	r1, r1, r0
    1f48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1f4c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f50:	4296      	cmp	r6, r2
    1f52:	bf98      	it	ls
    1f54:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    1f58:	d201      	bcs.n	1f5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x212>
    1f5a:	4589      	cmp	r9, r1
    1f5c:	d228      	bcs.n	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1f5e:	4a44      	ldr	r2, [pc, #272]	; (2070 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x324>)
    1f60:	9900      	ldr	r1, [sp, #0]
    1f62:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1f66:	4622      	mov	r2, r4
    1f68:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1f6c:	784c      	ldrb	r4, [r1, #1]
    1f6e:	2c20      	cmp	r4, #32
    1f70:	d016      	beq.n	1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>
    1f72:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1f76:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    1f7a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1f7e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1f82:	eba8 0800 	sub.w	r8, r8, r0
    1f86:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    1f8a:	ebac 0100 	sub.w	r1, ip, r0
    1f8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f92:	4546      	cmp	r6, r8
    1f94:	bf98      	it	ls
    1f96:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    1f9a:	d2e4      	bcs.n	1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f9c:	4589      	cmp	r9, r1
    1f9e:	d3e2      	bcc.n	1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1fa0:	2a20      	cmp	r2, #32
    1fa2:	d005      	beq.n	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1fa4:	2120      	movs	r1, #32
    1fa6:	2004      	movs	r0, #4
    1fa8:	9b00      	ldr	r3, [sp, #0]
    1faa:	f7ff f907 	bl	11bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1fae:	4604      	mov	r4, r0
    1fb0:	42ac      	cmp	r4, r5
    1fb2:	d115      	bne.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fb4:	482f      	ldr	r0, [pc, #188]	; (2074 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>)
    1fb6:	2800      	cmp	r0, #0
    1fb8:	bf18      	it	ne
    1fba:	f3af 8000 	nopne.w
    1fbe:	f001 fb95 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1fc2:	4c28      	ldr	r4, [pc, #160]	; (2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>)
    1fc4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1fc8:	2920      	cmp	r1, #32
    1fca:	d00d      	beq.n	1fe8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29c>
    1fcc:	68e1      	ldr	r1, [r4, #12]
    1fce:	1c82      	adds	r2, r0, #2
    1fd0:	1a51      	subs	r1, r2, r1
    1fd2:	0209      	lsls	r1, r1, #8
    1fd4:	17ca      	asrs	r2, r1, #31
    1fd6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1fda:	1209      	asrs	r1, r1, #8
    1fdc:	2900      	cmp	r1, #0
    1fde:	dd03      	ble.n	1fe8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29c>
    1fe0:	b005      	add	sp, #20
    1fe2:	2000      	movs	r0, #0
    1fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fe8:	2d20      	cmp	r5, #32
    1fea:	d00d      	beq.n	2008 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    1fec:	462a      	mov	r2, r5
    1fee:	9903      	ldr	r1, [sp, #12]
    1ff0:	f7ff fb1c 	bl	162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>
    1ff4:	b358      	cbz	r0, 204e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x302>
    1ff6:	9801      	ldr	r0, [sp, #4]
    1ff8:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1ffc:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2000:	b005      	add	sp, #20
    2002:	2001      	movs	r0, #1
    2004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2008:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    200c:	b118      	cbz	r0, 2016 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ca>
    200e:	f002 f8a3 	bl	4158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2012:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    2016:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    201a:	b150      	cbz	r0, 2032 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e6>
    201c:	4916      	ldr	r1, [pc, #88]	; (2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>)
    201e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2022:	6008      	str	r0, [r1, #0]
    2024:	2005      	movs	r0, #5
    2026:	f001 fdbf 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    202a:	f002 f8fd 	bl	4228 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    202e:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    2032:	2004      	movs	r0, #4
    2034:	f001 fdb8 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2038:	f001 fe24 	bl	3c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    203c:	2020      	movs	r0, #32
    203e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2042:	480e      	ldr	r0, [pc, #56]	; (207c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x330>)
    2044:	6880      	ldr	r0, [r0, #8]
    2046:	6007      	str	r7, [r0, #0]
    2048:	480d      	ldr	r0, [pc, #52]	; (2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>)
    204a:	6007      	str	r7, [r0, #0]
    204c:	e7d8      	b.n	2000 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b4>
    204e:	462a      	mov	r2, r5
    2050:	2120      	movs	r1, #32
    2052:	2004      	movs	r0, #4
    2054:	9b04      	ldr	r3, [sp, #16]
    2056:	f7ff f8b1 	bl	11bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    205a:	b005      	add	sp, #20
    205c:	2000      	movs	r0, #0
    205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2062:	0000      	.short	0x0000
    2064:	20001104 	.word	0x20001104
    2068:	003fffff 	.word	0x003fffff
    206c:	20000d84 	.word	0x20000d84
    2070:	20001084 	.word	0x20001084
    2074:	00000000 	.word	0x00000000
    2078:	4001f508 	.word	0x4001f508
    207c:	20000010 	.word	0x20000010
    2080:	40000508 	.word	0x40000508

00002084 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2084:	4906      	ldr	r1, [pc, #24]	; (20a0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2086:	b510      	push	{r4, lr}
    2088:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    208c:	2a20      	cmp	r2, #32
    208e:	bf1c      	itt	ne
    2090:	7788      	strbne	r0, [r1, #30]
    2092:	bd10      	popne	{r4, pc}
    2094:	f240 31ea 	movw	r1, #1002	; 0x3ea
    2098:	2070      	movs	r0, #112	; 0x70
    209a:	f002 fa2b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    209e:	0000      	.short	0x0000
    20a0:	20001104 	.word	0x20001104

000020a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    20a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20a8:	4e5b      	ldr	r6, [pc, #364]	; (2218 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    20aa:	4681      	mov	r9, r0
    20ac:	b085      	sub	sp, #20
    20ae:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    20b2:	468a      	mov	sl, r1
    20b4:	2820      	cmp	r0, #32
    20b6:	d04d      	beq.n	2154 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    20b8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    20bc:	f106 040c 	add.w	r4, r6, #12
    20c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    20c4:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    20c8:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    20cc:	2020      	movs	r0, #32
    20ce:	f88d 0000 	strb.w	r0, [sp]
    20d2:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    20d6:	aa03      	add	r2, sp, #12
    20d8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    20dc:	a901      	add	r1, sp, #4
    20de:	f890 5020 	ldrb.w	r5, [r0, #32]
    20e2:	6930      	ldr	r0, [r6, #16]
    20e4:	9002      	str	r0, [sp, #8]
    20e6:	6830      	ldr	r0, [r6, #0]
    20e8:	4448      	add	r0, r9
    20ea:	f001 f9a1 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    20ee:	68f8      	ldr	r0, [r7, #12]
    20f0:	9901      	ldr	r1, [sp, #4]
    20f2:	4a4a      	ldr	r2, [pc, #296]	; (221c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    20f4:	4408      	add	r0, r1
    20f6:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    20fa:	4291      	cmp	r1, r2
    20fc:	d82f      	bhi.n	215e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    20fe:	68b9      	ldr	r1, [r7, #8]
    2100:	1a41      	subs	r1, r0, r1
    2102:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2106:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    210a:	d228      	bcs.n	215e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    210c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2110:	6060      	str	r0, [r4, #4]
    2112:	4630      	mov	r0, r6
    2114:	f884 a00c 	strb.w	sl, [r4, #12]
    2118:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    211c:	46ea      	mov	sl, sp
    211e:	2d20      	cmp	r5, #32
    2120:	bf1c      	itt	ne
    2122:	493f      	ldrne	r1, [pc, #252]	; (2220 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2124:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    2128:	d03c      	beq.n	21a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    212a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    212e:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2132:	6860      	ldr	r0, [r4, #4]
    2134:	68ba      	ldr	r2, [r7, #8]
    2136:	4621      	mov	r1, r4
    2138:	1a10      	subs	r0, r2, r0
    213a:	0200      	lsls	r0, r0, #8
    213c:	17c2      	asrs	r2, r0, #31
    213e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2142:	f107 0608 	add.w	r6, r7, #8
    2146:	1200      	asrs	r0, r0, #8
    2148:	d41b      	bmi.n	2182 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    214a:	8970      	ldrh	r0, [r6, #10]
    214c:	b350      	cbz	r0, 21a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    214e:	8948      	ldrh	r0, [r1, #10]
    2150:	b148      	cbz	r0, 2166 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2152:	e027      	b.n	21a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2154:	f640 317b 	movw	r1, #2939	; 0xb7b
    2158:	2070      	movs	r0, #112	; 0x70
    215a:	f002 f9cb 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    215e:	b005      	add	sp, #20
    2160:	2001      	movs	r0, #1
    2162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2166:	4620      	mov	r0, r4
    2168:	f7ff fe56 	bl	1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>
    216c:	f001 f944 	bl	33f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2170:	6831      	ldr	r1, [r6, #0]
    2172:	1a08      	subs	r0, r1, r0
    2174:	0200      	lsls	r0, r0, #8
    2176:	17c1      	asrs	r1, r0, #31
    2178:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    217c:	1200      	asrs	r0, r0, #8
    217e:	2833      	cmp	r0, #51	; 0x33
    2180:	da10      	bge.n	21a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2182:	f88a 5000 	strb.w	r5, [sl]
    2186:	7d39      	ldrb	r1, [r7, #20]
    2188:	7b20      	ldrb	r0, [r4, #12]
    218a:	4281      	cmp	r1, r0
    218c:	d805      	bhi.n	219a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    218e:	9802      	ldr	r0, [sp, #8]
    2190:	6060      	str	r0, [r4, #4]
    2192:	b005      	add	sp, #20
    2194:	2002      	movs	r0, #2
    2196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    219a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    219e:	7845      	ldrb	r5, [r0, #1]
    21a0:	2d20      	cmp	r5, #32
    21a2:	d1c2      	bne.n	212a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    21a4:	2005      	movs	r0, #5
    21a6:	f001 fcff 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    21aa:	4c1b      	ldr	r4, [pc, #108]	; (2218 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    21ac:	f04f 30ff 	mov.w	r0, #4294967295
    21b0:	60a0      	str	r0, [r4, #8]
    21b2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    21b6:	f89d 2000 	ldrb.w	r2, [sp]
    21ba:	2120      	movs	r1, #32
    21bc:	2a20      	cmp	r2, #32
    21be:	bf13      	iteet	ne
    21c0:	2005      	movne	r0, #5
    21c2:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    21c6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    21ca:	f7fe fff7 	blne	11bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    21ce:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    21d2:	4913      	ldr	r1, [pc, #76]	; (2220 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    21d4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    21d8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    21dc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    21e0:	7048      	strb	r0, [r1, #1]
    21e2:	6820      	ldr	r0, [r4, #0]
    21e4:	4448      	add	r0, r9
    21e6:	6020      	str	r0, [r4, #0]
    21e8:	2001      	movs	r0, #1
    21ea:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    21ee:	7e60      	ldrb	r0, [r4, #25]
    21f0:	2801      	cmp	r0, #1
    21f2:	d105      	bne.n	2200 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    21f4:	6920      	ldr	r0, [r4, #16]
    21f6:	1e40      	subs	r0, r0, #1
    21f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21fc:	f001 fb1a 	bl	3834 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2200:	f89d 0000 	ldrb.w	r0, [sp]
    2204:	2820      	cmp	r0, #32
    2206:	d003      	beq.n	2210 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    2208:	4806      	ldr	r0, [pc, #24]	; (2224 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    220a:	7840      	ldrb	r0, [r0, #1]
    220c:	f002 fa42 	bl	4694 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2210:	b005      	add	sp, #20
    2212:	2000      	movs	r0, #0
    2214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2218:	20001104 	.word	0x20001104
    221c:	07a11f9b 	.word	0x07a11f9b
    2220:	20001084 	.word	0x20001084
    2224:	20000010 	.word	0x20000010

00002228 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2228:	4806      	ldr	r0, [pc, #24]	; (2244 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    222a:	b510      	push	{r4, lr}
    222c:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2230:	2920      	cmp	r1, #32
    2232:	bf1c      	itt	ne
    2234:	7e00      	ldrbne	r0, [r0, #24]
    2236:	bd10      	popne	{r4, pc}
    2238:	f640 3174 	movw	r1, #2932	; 0xb74
    223c:	2070      	movs	r0, #112	; 0x70
    223e:	f002 f959 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2242:	0000      	.short	0x0000
    2244:	20001104 	.word	0x20001104

00002248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    2248:	4602      	mov	r2, r0
    224a:	4b14      	ldr	r3, [pc, #80]	; (229c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    224c:	b510      	push	{r4, lr}
    224e:	4408      	add	r0, r1
    2250:	429a      	cmp	r2, r3
    2252:	d904      	bls.n	225e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2254:	f240 6109 	movw	r1, #1545	; 0x609
    2258:	2070      	movs	r0, #112	; 0x70
    225a:	f002 f94b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    225e:	4a10      	ldr	r2, [pc, #64]	; (22a0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2260:	4291      	cmp	r1, r2
    2262:	dd04      	ble.n	226e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2264:	f240 610a 	movw	r1, #1546	; 0x60a
    2268:	2070      	movs	r0, #112	; 0x70
    226a:	f002 f943 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    226e:	4a0d      	ldr	r2, [pc, #52]	; (22a4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    2270:	4291      	cmp	r1, r2
    2272:	da04      	bge.n	227e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2274:	f240 610b 	movw	r1, #1547	; 0x60b
    2278:	2070      	movs	r0, #112	; 0x70
    227a:	f002 f93b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    227e:	490a      	ldr	r1, [pc, #40]	; (22a8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    2280:	4281      	cmp	r1, r0
    2282:	bfde      	ittt	le
    2284:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2288:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    228c:	bd10      	pople	{r4, pc}
    228e:	2800      	cmp	r0, #0
    2290:	bfbc      	itt	lt
    2292:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2296:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    229a:	bd10      	pop	{r4, pc}
    229c:	1e847fff 	.word	0x1e847fff
    22a0:	07a12000 	.word	0x07a12000
    22a4:	f85ee000 	.word	0xf85ee000
    22a8:	1e848000 	.word	0x1e848000

000022ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    22ac:	4a10      	ldr	r2, [pc, #64]	; (22f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    22ae:	1a0b      	subs	r3, r1, r0
    22b0:	f102 0c01 	add.w	ip, r2, #1
    22b4:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    22b8:	bf3c      	itt	cc
    22ba:	4618      	movcc	r0, r3
    22bc:	4770      	bxcc	lr
    22be:	b510      	push	{r4, lr}
    22c0:	1a44      	subs	r4, r0, r1
    22c2:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    22c6:	bf3c      	itt	cc
    22c8:	4618      	movcc	r0, r3
    22ca:	bd10      	popcc	{r4, pc}
    22cc:	429a      	cmp	r2, r3
    22ce:	d203      	bcs.n	22d8 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    22d0:	1a10      	subs	r0, r2, r0
    22d2:	4408      	add	r0, r1
    22d4:	1c40      	adds	r0, r0, #1
    22d6:	bd10      	pop	{r4, pc}
    22d8:	42a2      	cmp	r2, r4
    22da:	d204      	bcs.n	22e6 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    22dc:	1a51      	subs	r1, r2, r1
    22de:	4408      	add	r0, r1
    22e0:	1c40      	adds	r0, r0, #1
    22e2:	4240      	negs	r0, r0
    22e4:	bd10      	pop	{r4, pc}
    22e6:	f640 310c 	movw	r1, #2828	; 0xb0c
    22ea:	2070      	movs	r0, #112	; 0x70
    22ec:	f002 f902 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22f0:	1e847fff 	.word	0x1e847fff

000022f4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    22f4:	490e      	ldr	r1, [pc, #56]	; (2330 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    22f6:	b510      	push	{r4, lr}
    22f8:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    22fc:	2820      	cmp	r0, #32
    22fe:	d012      	beq.n	2326 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    2300:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2304:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2308:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    230c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2310:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2314:	6840      	ldr	r0, [r0, #4]
    2316:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    231a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    231e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2322:	2104      	movs	r1, #4
    2324:	4710      	bx	r2
    2326:	f640 01bc 	movw	r1, #2236	; 0x8bc
    232a:	2070      	movs	r0, #112	; 0x70
    232c:	f002 f8e2 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2330:	20001104 	.word	0x20001104

00002334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2336:	4d6d      	ldr	r5, [pc, #436]	; (24ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2338:	496d      	ldr	r1, [pc, #436]	; (24f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    233a:	2601      	movs	r6, #1
    233c:	f505 7460 	add.w	r4, r5, #896	; 0x380
    2340:	2808      	cmp	r0, #8
    2342:	d273      	bcs.n	242c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    2344:	e8df f000 	tbb	[pc, r0]
    2348:	af9d6704 	.word	0xaf9d6704
    234c:	b9b444cd 	.word	0xb9b444cd
    2350:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2354:	b918      	cbnz	r0, 235e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    2356:	f001 ff1b 	bl	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    235a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    235e:	8ae0      	ldrh	r0, [r4, #22]
    2360:	b110      	cbz	r0, 2368 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2362:	f002 f84f 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2366:	b188      	cbz	r0, 238c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2368:	f7ff fcbe 	bl	1ce8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x960>
    236c:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2370:	68a1      	ldr	r1, [r4, #8]
    2372:	f1b1 3fff 	cmp.w	r1, #4294967295
    2376:	d005      	beq.n	2384 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2378:	2301      	movs	r3, #1
    237a:	2203      	movs	r2, #3
    237c:	2005      	movs	r0, #5
    237e:	f001 fb3f 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2382:	b140      	cbz	r0, 2396 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2384:	7e60      	ldrb	r0, [r4, #25]
    2386:	2801      	cmp	r0, #1
    2388:	d110      	bne.n	23ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    238a:	e009      	b.n	23a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    238c:	f44f 6107 	mov.w	r1, #2160	; 0x870
    2390:	2070      	movs	r0, #112	; 0x70
    2392:	f002 f8af 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2396:	f640 0175 	movw	r1, #2165	; 0x875
    239a:	2070      	movs	r0, #112	; 0x70
    239c:	f002 f8aa 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23a0:	6920      	ldr	r0, [r4, #16]
    23a2:	1e40      	subs	r0, r0, #1
    23a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23a8:	f001 fa44 	bl	3834 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    23ac:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23b0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    23b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23b8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    23bc:	6840      	ldr	r0, [r0, #4]
    23be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    23c2:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    23c6:	b001      	add	sp, #4
    23c8:	2101      	movs	r1, #1
    23ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    23ce:	4710      	bx	r2
    23d0:	f7ff fc8a 	bl	1ce8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x960>
    23d4:	f04f 30ff 	mov.w	r0, #4294967295
    23d8:	60a0      	str	r0, [r4, #8]
    23da:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    23de:	f88d 0000 	strb.w	r0, [sp]
    23e2:	f89d 0000 	ldrb.w	r0, [sp]
    23e6:	b188      	cbz	r0, 240c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    23e8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23ec:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    23f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23f4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    23f8:	6840      	ldr	r0, [r0, #4]
    23fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    23fe:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2402:	b001      	add	sp, #4
    2404:	2106      	movs	r1, #6
    2406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    240a:	4710      	bx	r2
    240c:	f640 0186 	movw	r1, #2182	; 0x886
    2410:	2070      	movs	r0, #112	; 0x70
    2412:	f002 f86f 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2416:	f7ff fc67 	bl	1ce8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x960>
    241a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    241e:	f001 fff1 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2422:	b120      	cbz	r0, 242e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    2424:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2428:	b130      	cbz	r0, 2438 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    242a:	e009      	b.n	2440 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    242c:	e059      	b.n	24e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    242e:	f640 0196 	movw	r1, #2198	; 0x896
    2432:	2070      	movs	r0, #112	; 0x70
    2434:	f002 f85e 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2438:	f001 feaa 	bl	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    243c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2440:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2444:	b158      	cbz	r0, 245e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    2446:	492b      	ldr	r1, [pc, #172]	; (24f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    2448:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    244c:	6008      	str	r0, [r1, #0]
    244e:	2005      	movs	r0, #5
    2450:	f001 fbaa 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2454:	f001 fee8 	bl	4228 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    2458:	2000      	movs	r0, #0
    245a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    245e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2462:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    246a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    246e:	6840      	ldr	r0, [r0, #4]
    2470:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2474:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2478:	b001      	add	sp, #4
    247a:	2100      	movs	r1, #0
    247c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2480:	4710      	bx	r2
    2482:	f001 fc49 	bl	3d18 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2486:	8ae0      	ldrh	r0, [r4, #22]
    2488:	b110      	cbz	r0, 2490 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    248a:	f001 ffbb 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    248e:	b128      	cbz	r0, 249c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    2490:	4819      	ldr	r0, [pc, #100]	; (24f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    2492:	7800      	ldrb	r0, [r0, #0]
    2494:	2803      	cmp	r0, #3
    2496:	bf08      	it	eq
    2498:	7766      	strbeq	r6, [r4, #29]
    249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    249c:	f640 01a1 	movw	r1, #2209	; 0x8a1
    24a0:	2070      	movs	r0, #112	; 0x70
    24a2:	f002 f827 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24a6:	4815      	ldr	r0, [pc, #84]	; (24fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    24a8:	6006      	str	r6, [r0, #0]
    24aa:	6888      	ldr	r0, [r1, #8]
    24ac:	6006      	str	r6, [r0, #0]
    24ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24b0:	7808      	ldrb	r0, [r1, #0]
    24b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    24b6:	f002 b8ed 	b.w	4694 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24ba:	f7ff fc15 	bl	1ce8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x960>
    24be:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24c2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24ca:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    24ce:	6840      	ldr	r0, [r0, #4]
    24d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24d4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    24d8:	b001      	add	sp, #4
    24da:	2105      	movs	r1, #5
    24dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    24e0:	4710      	bx	r2
    24e2:	f640 01b4 	movw	r1, #2228	; 0x8b4
    24e6:	2070      	movs	r0, #112	; 0x70
    24e8:	f002 f804 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24ec:	20000d84 	.word	0x20000d84
    24f0:	20000010 	.word	0x20000010
    24f4:	4001f508 	.word	0x4001f508
    24f8:	20000012 	.word	0x20000012
    24fc:	40000508 	.word	0x40000508

00002500 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    2500:	4803      	ldr	r0, [pc, #12]	; (2510 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    2502:	b510      	push	{r4, lr}
    2504:	7840      	ldrb	r0, [r0, #1]
    2506:	f009 ff93 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    250a:	b280      	uxth	r0, r0
    250c:	bd10      	pop	{r4, pc}
    250e:	0000      	.short	0x0000
    2510:	20000012 	.word	0x20000012

00002514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2514:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2518:	4682      	mov	sl, r0
    251a:	48dc      	ldr	r0, [pc, #880]	; (288c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    251c:	b08b      	sub	sp, #44	; 0x2c
    251e:	6800      	ldr	r0, [r0, #0]
    2520:	4ddb      	ldr	r5, [pc, #876]	; (2890 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    2522:	05c0      	lsls	r0, r0, #23
    2524:	0dc0      	lsrs	r0, r0, #23
    2526:	d00e      	beq.n	2546 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2528:	3810      	subs	r0, #16
    252a:	b240      	sxtb	r0, r0
    252c:	2800      	cmp	r0, #0
    252e:	bfb8      	it	lt
    2530:	f000 000f 	andlt.w	r0, r0, #15
    2534:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2538:	bfac      	ite	ge
    253a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    253e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2542:	0940      	lsrs	r0, r0, #5
    2544:	d00d      	beq.n	2562 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    2546:	980c      	ldr	r0, [sp, #48]	; 0x30
    2548:	f04f 0b00 	mov.w	fp, #0
    254c:	7800      	ldrb	r0, [r0, #0]
    254e:	2800      	cmp	r0, #0
    2550:	bf18      	it	ne
    2552:	2801      	cmpne	r0, #1
    2554:	d018      	beq.n	2588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2556:	f240 714f 	movw	r1, #1871	; 0x74f
    255a:	f04f 0070 	mov.w	r0, #112	; 0x70
    255e:	f001 ffc9 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2562:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2566:	f04f 0b01 	mov.w	fp, #1
    256a:	2820      	cmp	r0, #32
    256c:	d007      	beq.n	257e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    256e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2570:	7800      	ldrb	r0, [r0, #0]
    2572:	b148      	cbz	r0, 2588 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2574:	f240 714b 	movw	r1, #1867	; 0x74b
    2578:	2070      	movs	r0, #112	; 0x70
    257a:	f001 ffbb 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    257e:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    2582:	2070      	movs	r0, #112	; 0x70
    2584:	f001 ffb6 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2588:	4cc2      	ldr	r4, [pc, #776]	; (2894 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    258a:	b124      	cbz	r4, 2596 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    258c:	2100      	movs	r1, #0
    258e:	f240 7052 	movw	r0, #1874	; 0x752
    2592:	f3af 8000 	nop.w
    2596:	49c0      	ldr	r1, [pc, #768]	; (2898 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    2598:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    259c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    25a0:	f04f 0801 	mov.w	r8, #1
    25a4:	9000      	str	r0, [sp, #0]
    25a6:	b124      	cbz	r4, 25b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    25a8:	2100      	movs	r1, #0
    25aa:	f240 705a 	movw	r0, #1882	; 0x75a
    25ae:	f3af 8000 	nop.w
    25b2:	f1b8 0f00 	cmp.w	r8, #0
    25b6:	d009      	beq.n	25cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    25b8:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    25bc:	f04f 0900 	mov.w	r9, #0
    25c0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    25c4:	f1bb 0f00 	cmp.w	fp, #0
    25c8:	d007      	beq.n	25da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    25ca:	e032      	b.n	2632 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    25cc:	48b3      	ldr	r0, [pc, #716]	; (289c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    25ce:	2800      	cmp	r0, #0
    25d0:	bf18      	it	ne
    25d2:	f3af 8000 	nopne.w
    25d6:	b662      	cpsie	i
    25d8:	e7ee      	b.n	25b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    25da:	4637      	mov	r7, r6
    25dc:	2001      	movs	r0, #1
    25de:	ea20 0607 	bic.w	r6, r0, r7
    25e2:	48af      	ldr	r0, [pc, #700]	; (28a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    25e4:	2240      	movs	r2, #64	; 0x40
    25e6:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    25ea:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    25ee:	f00a f88d 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25f2:	b124      	cbz	r4, 25fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    25f4:	2100      	movs	r1, #0
    25f6:	f240 50cd 	movw	r0, #1485	; 0x5cd
    25fa:	f3af 8000 	nop.w
    25fe:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2602:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2606:	6a09      	ldr	r1, [r1, #32]
    2608:	6201      	str	r1, [r0, #32]
    260a:	b124      	cbz	r4, 2616 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    260c:	2100      	movs	r1, #0
    260e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2612:	f3af 8000 	nop.w
    2616:	b124      	cbz	r4, 2622 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2618:	2100      	movs	r1, #0
    261a:	f240 7064 	movw	r0, #1892	; 0x764
    261e:	f3af 8000 	nop.w
    2622:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2626:	f88d 0004 	strb.w	r0, [sp, #4]
    262a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    262e:	2800      	cmp	r0, #0
    2630:	d1b9      	bne.n	25a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2632:	b124      	cbz	r4, 263e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2634:	2100      	movs	r1, #0
    2636:	f240 706e 	movw	r0, #1902	; 0x76e
    263a:	f3af 8000 	nop.w
    263e:	f001 f855 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2642:	4680      	mov	r8, r0
    2644:	4633      	mov	r3, r6
    2646:	aa06      	add	r2, sp, #24
    2648:	990c      	ldr	r1, [sp, #48]	; 0x30
    264a:	f7ff fa79 	bl	1b40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b8>
    264e:	b124      	cbz	r4, 265a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2650:	2100      	movs	r1, #0
    2652:	f240 7075 	movw	r0, #1909	; 0x775
    2656:	f3af 8000 	nop.w
    265a:	4991      	ldr	r1, [pc, #580]	; (28a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    265c:	a806      	add	r0, sp, #24
    265e:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    2662:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    2666:	2901      	cmp	r1, #1
    2668:	bf18      	it	ne
    266a:	2902      	cmpne	r1, #2
    266c:	d13c      	bne.n	26e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    266e:	9906      	ldr	r1, [sp, #24]
    2670:	9b07      	ldr	r3, [sp, #28]
    2672:	eba1 0108 	sub.w	r1, r1, r8
    2676:	4a8b      	ldr	r2, [pc, #556]	; (28a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    2678:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    267c:	eba3 0308 	sub.w	r3, r3, r8
    2680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2684:	2902      	cmp	r1, #2
    2686:	d371      	bcc.n	276c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2688:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    268c:	d26e      	bcs.n	276c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    268e:	429a      	cmp	r2, r3
    2690:	d36c      	bcc.n	276c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2692:	f04f 0901 	mov.w	r9, #1
    2696:	ab01      	add	r3, sp, #4
    2698:	aa05      	add	r2, sp, #20
    269a:	4631      	mov	r1, r6
    269c:	f7fe ff46 	bl	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
    26a0:	2800      	cmp	r0, #0
    26a2:	d06b      	beq.n	277c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    26a4:	f89d 1014 	ldrb.w	r1, [sp, #20]
    26a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    26ac:	4633      	mov	r3, r6
    26ae:	428a      	cmp	r2, r1
    26b0:	d068      	beq.n	2784 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    26b2:	2005      	movs	r0, #5
    26b4:	f7fe fd82 	bl	11bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    26b8:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    26bc:	7048      	strb	r0, [r1, #1]
    26be:	f89d 0014 	ldrb.w	r0, [sp, #20]
    26c2:	2820      	cmp	r0, #32
    26c4:	bf03      	ittte	eq
    26c6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    26ca:	f880 a020 	strbeq.w	sl, [r0, #32]
    26ce:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    26d2:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    26d6:	bf18      	it	ne
    26d8:	f880 a001 	strbne.w	sl, [r0, #1]
    26dc:	4632      	mov	r2, r6
    26de:	4651      	mov	r1, sl
    26e0:	f05f 0003 	movs.w	r0, #3
    26e4:	f7ff fbd2 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    26e8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    26ec:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    26f0:	f88d 0004 	strb.w	r0, [sp, #4]
    26f4:	f89d 7004 	ldrb.w	r7, [sp, #4]
    26f8:	b124      	cbz	r4, 2704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    26fa:	2100      	movs	r1, #0
    26fc:	f240 707c 	movw	r0, #1916	; 0x77c
    2700:	f3af 8000 	nop.w
    2704:	4868      	ldr	r0, [pc, #416]	; (28a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2706:	2800      	cmp	r0, #0
    2708:	bf18      	it	ne
    270a:	f3af 8000 	nopne.w
    270e:	f3ef 8810 	mrs	r8, PRIMASK
    2712:	b672      	cpsid	i
    2714:	b124      	cbz	r4, 2720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    2716:	2100      	movs	r1, #0
    2718:	f240 7082 	movw	r0, #1922	; 0x782
    271c:	f3af 8000 	nop.w
    2720:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2724:	f88d 0004 	strb.w	r0, [sp, #4]
    2728:	f89d 0004 	ldrb.w	r0, [sp, #4]
    272c:	2800      	cmp	r0, #0
    272e:	f47f af3a 	bne.w	25a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2732:	b124      	cbz	r4, 273e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2734:	2100      	movs	r1, #0
    2736:	f240 708a 	movw	r0, #1930	; 0x78a
    273a:	f3af 8000 	nop.w
    273e:	f10d 0e18 	add.w	lr, sp, #24
    2742:	9800      	ldr	r0, [sp, #0]
    2744:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2748:	f100 0008 	add.w	r0, r0, #8
    274c:	f1b9 0f00 	cmp.w	r9, #0
    2750:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2754:	d044      	beq.n	27e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2756:	b124      	cbz	r4, 2762 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2758:	2100      	movs	r1, #0
    275a:	f240 7097 	movw	r0, #1943	; 0x797
    275e:	f3af 8000 	nop.w
    2762:	f1bb 0f00 	cmp.w	fp, #0
    2766:	d12c      	bne.n	27c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2768:	e016      	b.n	2798 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    276a:	e7ff      	b.n	276c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    276c:	4632      	mov	r2, r6
    276e:	4651      	mov	r1, sl
    2770:	2004      	movs	r0, #4
    2772:	f7ff fb8b 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    2776:	f04f 0901 	mov.w	r9, #1
    277a:	e7b5      	b.n	26e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    277c:	4632      	mov	r2, r6
    277e:	4651      	mov	r1, sl
    2780:	2004      	movs	r0, #4
    2782:	e7af      	b.n	26e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2784:	2920      	cmp	r1, #32
    2786:	bf19      	ittee	ne
    2788:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    278c:	7840      	ldrbne	r0, [r0, #1]
    278e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2792:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2796:	e78f      	b.n	26b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2798:	b19f      	cbz	r7, 27c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    279a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    279e:	2820      	cmp	r0, #32
    27a0:	d10f      	bne.n	27c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    27a2:	b124      	cbz	r4, 27ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    27a4:	2100      	movs	r1, #0
    27a6:	f240 709c 	movw	r0, #1948	; 0x79c
    27aa:	f3af 8000 	nop.w
    27ae:	4631      	mov	r1, r6
    27b0:	2002      	movs	r0, #2
    27b2:	f7ff fb9b 	bl	1eec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>
    27b6:	b920      	cbnz	r0, 27c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    27b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    27ba:	7800      	ldrb	r0, [r0, #0]
    27bc:	b3f0      	cbz	r0, 283c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    27be:	2801      	cmp	r0, #1
    27c0:	d04c      	beq.n	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    27c2:	b124      	cbz	r4, 27ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    27c4:	2100      	movs	r1, #0
    27c6:	f240 70b9 	movw	r0, #1977	; 0x7b9
    27ca:	f3af 8000 	nop.w
    27ce:	f1bb 0f00 	cmp.w	fp, #0
    27d2:	bf18      	it	ne
    27d4:	2001      	movne	r0, #1
    27d6:	d04a      	beq.n	286e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    27d8:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    27dc:	f04f 0901 	mov.w	r9, #1
    27e0:	b124      	cbz	r4, 27ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    27e2:	2100      	movs	r1, #0
    27e4:	f240 70ca 	movw	r0, #1994	; 0x7ca
    27e8:	f3af 8000 	nop.w
    27ec:	f1b8 0f00 	cmp.w	r8, #0
    27f0:	d045      	beq.n	287e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    27f2:	b124      	cbz	r4, 27fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    27f4:	2100      	movs	r1, #0
    27f6:	f240 70ce 	movw	r0, #1998	; 0x7ce
    27fa:	f3af 8000 	nop.w
    27fe:	f1b9 0f00 	cmp.w	r9, #0
    2802:	d011      	beq.n	2828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2804:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2808:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    280c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2810:	2820      	cmp	r0, #32
    2812:	d009      	beq.n	2828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2814:	b124      	cbz	r4, 2820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2816:	2100      	movs	r1, #0
    2818:	f240 70d5 	movw	r0, #2005	; 0x7d5
    281c:	f3af 8000 	nop.w
    2820:	4822      	ldr	r0, [pc, #136]	; (28ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2822:	7840      	ldrb	r0, [r0, #1]
    2824:	f001 ff36 	bl	4694 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2828:	b124      	cbz	r4, 2834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    282a:	2100      	movs	r1, #0
    282c:	f240 70da 	movw	r0, #2010	; 0x7da
    2830:	f3af 8000 	nop.w
    2834:	b00d      	add	sp, #52	; 0x34
    2836:	4648      	mov	r0, r9
    2838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    283c:	e7ff      	b.n	283e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    283e:	b124      	cbz	r4, 284a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2840:	2100      	movs	r1, #0
    2842:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2846:	f3af 8000 	nop.w
    284a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    284e:	4651      	mov	r1, sl
    2850:	2004      	movs	r0, #4
    2852:	f7ff fb1b 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    2856:	f04f 0901 	mov.w	r9, #1
    285a:	e7c1      	b.n	27e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    285c:	2c00      	cmp	r4, #0
    285e:	f43f aea2 	beq.w	25a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2862:	2100      	movs	r1, #0
    2864:	f240 70af 	movw	r0, #1967	; 0x7af
    2868:	f3af 8000 	nop.w
    286c:	e69b      	b.n	25a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    286e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2872:	2001      	movs	r0, #1
    2874:	ea20 0101 	bic.w	r1, r0, r1
    2878:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    287c:	e7ac      	b.n	27d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    287e:	4807      	ldr	r0, [pc, #28]	; (289c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2880:	2800      	cmp	r0, #0
    2882:	bf18      	it	ne
    2884:	f3af 8000 	nopne.w
    2888:	b662      	cpsie	i
    288a:	e7b2      	b.n	27f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    288c:	e000ed04 	.word	0xe000ed04
    2890:	20001104 	.word	0x20001104
    2894:	00000000 	.word	0x00000000
    2898:	20000d84 	.word	0x20000d84
    289c:	00000000 	.word	0x00000000
    28a0:	20001084 	.word	0x20001084
    28a4:	003fffff 	.word	0x003fffff
    28a8:	00000000 	.word	0x00000000
    28ac:	20000010 	.word	0x20000010

000028b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    28b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28b4:	48a5      	ldr	r0, [pc, #660]	; (2b4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    28b6:	b08c      	sub	sp, #48	; 0x30
    28b8:	6800      	ldr	r0, [r0, #0]
    28ba:	05c0      	lsls	r0, r0, #23
    28bc:	0dc0      	lsrs	r0, r0, #23
    28be:	d011      	beq.n	28e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    28c0:	3810      	subs	r0, #16
    28c2:	b240      	sxtb	r0, r0
    28c4:	2800      	cmp	r0, #0
    28c6:	bfb8      	it	lt
    28c8:	f000 000f 	andlt.w	r0, r0, #15
    28cc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    28d0:	bfac      	ite	ge
    28d2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    28d6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    28da:	0940      	lsrs	r0, r0, #5
    28dc:	bf08      	it	eq
    28de:	f04f 0901 	moveq.w	r9, #1
    28e2:	d001      	beq.n	28e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    28e4:	f04f 0900 	mov.w	r9, #0
    28e8:	980c      	ldr	r0, [sp, #48]	; 0x30
    28ea:	7800      	ldrb	r0, [r0, #0]
    28ec:	2800      	cmp	r0, #0
    28ee:	f04f 0000 	mov.w	r0, #0
    28f2:	bf1c      	itt	ne
    28f4:	b00d      	addne	sp, #52	; 0x34
    28f6:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28fa:	f8df a254 	ldr.w	sl, [pc, #596]	; 2b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    28fe:	4d95      	ldr	r5, [pc, #596]	; (2b54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2900:	4c95      	ldr	r4, [pc, #596]	; (2b58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2902:	f04f 0b00 	mov.w	fp, #0
    2906:	900b      	str	r0, [sp, #44]	; 0x2c
    2908:	b125      	cbz	r5, 2914 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    290a:	2100      	movs	r1, #0
    290c:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2910:	f3af 8000 	nop.w
    2914:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2918:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    291c:	f04f 0800 	mov.w	r8, #0
    2920:	b125      	cbz	r5, 292c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2922:	2100      	movs	r1, #0
    2924:	f240 605d 	movw	r0, #1629	; 0x65d
    2928:	f3af 8000 	nop.w
    292c:	f1b9 0f00 	cmp.w	r9, #0
    2930:	d11d      	bne.n	296e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2932:	4637      	mov	r7, r6
    2934:	2001      	movs	r0, #1
    2936:	ea20 0607 	bic.w	r6, r0, r7
    293a:	4888      	ldr	r0, [pc, #544]	; (2b5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    293c:	2240      	movs	r2, #64	; 0x40
    293e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2942:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2946:	f009 fee1 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    294a:	b125      	cbz	r5, 2956 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    294c:	2100      	movs	r1, #0
    294e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2952:	f3af 8000 	nop.w
    2956:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    295a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    295e:	6a09      	ldr	r1, [r1, #32]
    2960:	6201      	str	r1, [r0, #32]
    2962:	b125      	cbz	r5, 296e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2964:	2100      	movs	r1, #0
    2966:	f240 50d1 	movw	r0, #1489	; 0x5d1
    296a:	f3af 8000 	nop.w
    296e:	b125      	cbz	r5, 297a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2970:	2100      	movs	r1, #0
    2972:	f240 6065 	movw	r0, #1637	; 0x665
    2976:	f3af 8000 	nop.w
    297a:	f000 feb7 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    297e:	4607      	mov	r7, r0
    2980:	4633      	mov	r3, r6
    2982:	466a      	mov	r2, sp
    2984:	990c      	ldr	r1, [sp, #48]	; 0x30
    2986:	f7ff f8db 	bl	1b40 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7b8>
    298a:	b125      	cbz	r5, 2996 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    298c:	2100      	movs	r1, #0
    298e:	f240 606b 	movw	r0, #1643	; 0x66b
    2992:	f3af 8000 	nop.w
    2996:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    299a:	2820      	cmp	r0, #32
    299c:	d014      	beq.n	29c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    299e:	6920      	ldr	r0, [r4, #16]
    29a0:	9900      	ldr	r1, [sp, #0]
    29a2:	1a09      	subs	r1, r1, r0
    29a4:	0209      	lsls	r1, r1, #8
    29a6:	17ca      	asrs	r2, r1, #31
    29a8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    29ac:	1209      	asrs	r1, r1, #8
    29ae:	d50b      	bpl.n	29c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    29b0:	e9dd 2100 	ldrd	r2, r1, [sp]
    29b4:	1a89      	subs	r1, r1, r2
    29b6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    29ba:	4408      	add	r0, r1
    29bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29c0:	e9cd 2000 	strd	r2, r0, [sp]
    29c4:	f04f 0801 	mov.w	r8, #1
    29c8:	b14d      	cbz	r5, 29de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    29ca:	2100      	movs	r1, #0
    29cc:	f240 6075 	movw	r0, #1653	; 0x675
    29d0:	f3af 8000 	nop.w
    29d4:	2100      	movs	r1, #0
    29d6:	f240 607b 	movw	r0, #1659	; 0x67b
    29da:	f3af 8000 	nop.w
    29de:	9800      	ldr	r0, [sp, #0]
    29e0:	9901      	ldr	r1, [sp, #4]
    29e2:	1bc0      	subs	r0, r0, r7
    29e4:	1bc9      	subs	r1, r1, r7
    29e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29ee:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    29f2:	d205      	bcs.n	2a00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    29f4:	458a      	cmp	sl, r1
    29f6:	d303      	bcc.n	2a00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    29f8:	f1b9 0f00 	cmp.w	r9, #0
    29fc:	d10c      	bne.n	2a18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    29fe:	e003      	b.n	2a08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2a00:	f1b9 0f00 	cmp.w	r9, #0
    2a04:	d038      	beq.n	2a78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2a06:	e094      	b.n	2b32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2a08:	4633      	mov	r3, r6
    2a0a:	463a      	mov	r2, r7
    2a0c:	4669      	mov	r1, sp
    2a0e:	4854      	ldr	r0, [pc, #336]	; (2b60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2a10:	f7fe fc10 	bl	1234 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2a14:	ea48 0800 	orr.w	r8, r8, r0
    2a18:	f1b8 0f00 	cmp.w	r8, #0
    2a1c:	d022      	beq.n	2a64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2a1e:	9800      	ldr	r0, [sp, #0]
    2a20:	f009 fd06 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2a24:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2a28:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2a2c:	4b4d      	ldr	r3, [pc, #308]	; (2b64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2a2e:	4411      	add	r1, r2
    2a30:	1c49      	adds	r1, r1, #1
    2a32:	1842      	adds	r2, r0, r1
    2a34:	4298      	cmp	r0, r3
    2a36:	d841      	bhi.n	2abc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2a38:	4849      	ldr	r0, [pc, #292]	; (2b60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2a3a:	4281      	cmp	r1, r0
    2a3c:	dc5a      	bgt.n	2af4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2a3e:	4240      	negs	r0, r0
    2a40:	4281      	cmp	r1, r0
    2a42:	db5f      	blt.n	2b04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2a44:	1c58      	adds	r0, r3, #1
    2a46:	4290      	cmp	r0, r2
    2a48:	bfdc      	itt	le
    2a4a:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2a4e:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2a52:	dd05      	ble.n	2a60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2a54:	2a00      	cmp	r2, #0
    2a56:	bfbc      	itt	lt
    2a58:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2a5c:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2a60:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a62:	60c2      	str	r2, [r0, #12]
    2a64:	2001      	movs	r0, #1
    2a66:	900b      	str	r0, [sp, #44]	; 0x2c
    2a68:	2d00      	cmp	r5, #0
    2a6a:	d062      	beq.n	2b32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2a6c:	2100      	movs	r1, #0
    2a6e:	f240 608e 	movw	r0, #1678	; 0x68e
    2a72:	f3af 8000 	nop.w
    2a76:	e05c      	b.n	2b32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2a78:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2a7c:	aa08      	add	r2, sp, #32
    2a7e:	a907      	add	r1, sp, #28
    2a80:	f000 fcd6 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2a84:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2a88:	2820      	cmp	r0, #32
    2a8a:	d01c      	beq.n	2ac6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2a8c:	6920      	ldr	r0, [r4, #16]
    2a8e:	1d40      	adds	r0, r0, #5
    2a90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2a94:	e9dd 2100 	ldrd	r2, r1, [sp]
    2a98:	1a89      	subs	r1, r1, r2
    2a9a:	4401      	add	r1, r0
    2a9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2aa0:	e9cd 0100 	strd	r0, r1, [sp]
    2aa4:	f009 fcc4 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2aa8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2aac:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2ab0:	4b2c      	ldr	r3, [pc, #176]	; (2b64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2ab2:	4411      	add	r1, r2
    2ab4:	1c4a      	adds	r2, r1, #1
    2ab6:	1881      	adds	r1, r0, r2
    2ab8:	4298      	cmp	r0, r3
    2aba:	d918      	bls.n	2aee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2abc:	f240 6109 	movw	r1, #1545	; 0x609
    2ac0:	2070      	movs	r0, #112	; 0x70
    2ac2:	f001 fd17 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ac6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2aca:	f107 0609 	add.w	r6, r7, #9
    2ace:	b120      	cbz	r0, 2ada <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2ad0:	f001 fc98 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2ad4:	2800      	cmp	r0, #0
    2ad6:	bf08      	it	eq
    2ad8:	3632      	addeq	r6, #50	; 0x32
    2ada:	4823      	ldr	r0, [pc, #140]	; (2b68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2adc:	7841      	ldrb	r1, [r0, #1]
    2ade:	9807      	ldr	r0, [sp, #28]
    2ae0:	4281      	cmp	r1, r0
    2ae2:	bf84      	itt	hi
    2ae4:	1a08      	subhi	r0, r1, r0
    2ae6:	4406      	addhi	r6, r0
    2ae8:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2aec:	e7d2      	b.n	2a94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2aee:	481c      	ldr	r0, [pc, #112]	; (2b60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2af0:	4282      	cmp	r2, r0
    2af2:	dd04      	ble.n	2afe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2af4:	f240 610a 	movw	r1, #1546	; 0x60a
    2af8:	2070      	movs	r0, #112	; 0x70
    2afa:	f001 fcfb 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2afe:	481b      	ldr	r0, [pc, #108]	; (2b6c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2b00:	4282      	cmp	r2, r0
    2b02:	da04      	bge.n	2b0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2b04:	f240 610b 	movw	r1, #1547	; 0x60b
    2b08:	2070      	movs	r0, #112	; 0x70
    2b0a:	f001 fcf3 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b0e:	4818      	ldr	r0, [pc, #96]	; (2b70 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2b10:	4288      	cmp	r0, r1
    2b12:	bfdc      	itt	le
    2b14:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2b18:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2b1c:	dd05      	ble.n	2b2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2b1e:	2900      	cmp	r1, #0
    2b20:	bfbc      	itt	lt
    2b22:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2b26:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2b2a:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b2c:	60c1      	str	r1, [r0, #12]
    2b2e:	2001      	movs	r0, #1
    2b30:	900b      	str	r0, [sp, #44]	; 0x2c
    2b32:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2b36:	f88d 0010 	strb.w	r0, [sp, #16]
    2b3a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2b3e:	2800      	cmp	r0, #0
    2b40:	f47f aee2 	bne.w	2908 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2b44:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2b46:	b00d      	add	sp, #52	; 0x34
    2b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b4c:	e000ed04 	.word	0xe000ed04
    2b50:	003fffff 	.word	0x003fffff
    2b54:	00000000 	.word	0x00000000
    2b58:	20001104 	.word	0x20001104
    2b5c:	20001084 	.word	0x20001084
    2b60:	07a12000 	.word	0x07a12000
    2b64:	1e847fff 	.word	0x1e847fff
    2b68:	20000012 	.word	0x20000012
    2b6c:	f85ee000 	.word	0xf85ee000
    2b70:	1e848000 	.word	0x1e848000

00002b74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2b74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b78:	4d88      	ldr	r5, [pc, #544]	; (2d9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    2b7a:	b08c      	sub	sp, #48	; 0x30
    2b7c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2b80:	2000      	movs	r0, #0
    2b82:	9009      	str	r0, [sp, #36]	; 0x24
    2b84:	2001      	movs	r0, #1
    2b86:	4c86      	ldr	r4, [pc, #536]	; (2da0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    2b88:	f04f 0900 	mov.w	r9, #0
    2b8c:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2b90:	4680      	mov	r8, r0
    2b92:	9008      	str	r0, [sp, #32]
    2b94:	b124      	cbz	r4, 2ba0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2b96:	2100      	movs	r1, #0
    2b98:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2b9c:	f3af 8000 	nop.w
    2ba0:	9808      	ldr	r0, [sp, #32]
    2ba2:	2800      	cmp	r0, #0
    2ba4:	d037      	beq.n	2c16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2ba6:	bf00      	nop
    2ba8:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2bac:	b124      	cbz	r4, 2bb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2bae:	2100      	movs	r1, #0
    2bb0:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2bb4:	f3af 8000 	nop.w
    2bb8:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2bbc:	2240      	movs	r2, #64	; 0x40
    2bbe:	ea28 060a 	bic.w	r6, r8, sl
    2bc2:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2bc6:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2bca:	4683      	mov	fp, r0
    2bcc:	f009 fd9e 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2bd0:	b124      	cbz	r4, 2bdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2bd2:	2100      	movs	r1, #0
    2bd4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2bd8:	f3af 8000 	nop.w
    2bdc:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2be0:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2be4:	9000      	str	r0, [sp, #0]
    2be6:	6a09      	ldr	r1, [r1, #32]
    2be8:	6201      	str	r1, [r0, #32]
    2bea:	b124      	cbz	r4, 2bf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2bec:	2100      	movs	r1, #0
    2bee:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2bf2:	f3af 8000 	nop.w
    2bf6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2bfa:	f88d 0008 	strb.w	r0, [sp, #8]
    2bfe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2c02:	b178      	cbz	r0, 2c24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2c04:	2c00      	cmp	r4, #0
    2c06:	bf1c      	itt	ne
    2c08:	2100      	movne	r1, #0
    2c0a:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2c0e:	d0c1      	beq.n	2b94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2c10:	f3af 8000 	nop.w
    2c14:	e7be      	b.n	2b94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2c16:	4863      	ldr	r0, [pc, #396]	; (2da4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2c18:	2800      	cmp	r0, #0
    2c1a:	bf18      	it	ne
    2c1c:	f3af 8000 	nopne.w
    2c20:	b662      	cpsie	i
    2c22:	e7c1      	b.n	2ba8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2c24:	b124      	cbz	r4, 2c30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2c26:	2100      	movs	r1, #0
    2c28:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2c2c:	f3af 8000 	nop.w
    2c30:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c32:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2c36:	2803      	cmp	r0, #3
    2c38:	d172      	bne.n	2d20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2c3a:	f8dd a000 	ldr.w	sl, [sp]
    2c3e:	f8cd a018 	str.w	sl, [sp, #24]
    2c42:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c44:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2c48:	4288      	cmp	r0, r1
    2c4a:	bf14      	ite	ne
    2c4c:	f04f 0b00 	movne.w	fp, #0
    2c50:	f04f 0b01 	moveq.w	fp, #1
    2c54:	f10a 0c20 	add.w	ip, sl, #32
    2c58:	4686      	mov	lr, r0
    2c5a:	2220      	movs	r2, #32
    2c5c:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2c60:	e003      	b.n	2c6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2c62:	4602      	mov	r2, r0
    2c64:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2c68:	7840      	ldrb	r0, [r0, #1]
    2c6a:	4288      	cmp	r0, r1
    2c6c:	d002      	beq.n	2c74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2c6e:	2820      	cmp	r0, #32
    2c70:	d00a      	beq.n	2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2c72:	e7f6      	b.n	2c62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2c74:	2820      	cmp	r0, #32
    2c76:	d007      	beq.n	2c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2c78:	4586      	cmp	lr, r0
    2c7a:	d107      	bne.n	2c8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2c7c:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2c80:	7840      	ldrb	r0, [r0, #1]
    2c82:	f88c 0000 	strb.w	r0, [ip]
    2c86:	e007      	b.n	2c98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2c88:	4648      	mov	r0, r9
    2c8a:	e00c      	b.n	2ca6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2c8c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2c90:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2c94:	7840      	ldrb	r0, [r0, #1]
    2c96:	7048      	strb	r0, [r1, #1]
    2c98:	b124      	cbz	r4, 2ca4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2c9a:	2100      	movs	r1, #0
    2c9c:	f240 5037 	movw	r0, #1335	; 0x537
    2ca0:	f3af 8000 	nop.w
    2ca4:	4640      	mov	r0, r8
    2ca6:	ea10 0f0b 	tst.w	r0, fp
    2caa:	bf18      	it	ne
    2cac:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2cb0:	2800      	cmp	r0, #0
    2cb2:	d052      	beq.n	2d5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2cb4:	b124      	cbz	r4, 2cc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    2cb6:	2100      	movs	r1, #0
    2cb8:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2cbc:	f3af 8000 	nop.w
    2cc0:	4632      	mov	r2, r6
    2cc2:	2001      	movs	r0, #1
    2cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cc6:	f7ff f8e1 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    2cca:	9806      	ldr	r0, [sp, #24]
    2ccc:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2cd0:	f88d 0008 	strb.w	r0, [sp, #8]
    2cd4:	f89d a008 	ldrb.w	sl, [sp, #8]
    2cd8:	b124      	cbz	r4, 2ce4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2cda:	2100      	movs	r1, #0
    2cdc:	f640 0008 	movw	r0, #2056	; 0x808
    2ce0:	f3af 8000 	nop.w
    2ce4:	4830      	ldr	r0, [pc, #192]	; (2da8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2ce6:	2800      	cmp	r0, #0
    2ce8:	bf18      	it	ne
    2cea:	f3af 8000 	nopne.w
    2cee:	f3ef 8010 	mrs	r0, PRIMASK
    2cf2:	b672      	cpsid	i
    2cf4:	9008      	str	r0, [sp, #32]
    2cf6:	b124      	cbz	r4, 2d02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2cf8:	2100      	movs	r1, #0
    2cfa:	f640 000d 	movw	r0, #2061	; 0x80d
    2cfe:	f3af 8000 	nop.w
    2d02:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2d06:	f88d 0008 	strb.w	r0, [sp, #8]
    2d0a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2d0e:	b140      	cbz	r0, 2d22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2d10:	2c00      	cmp	r4, #0
    2d12:	bf1c      	itt	ne
    2d14:	2100      	movne	r1, #0
    2d16:	f640 0011 	movwne	r0, #2065	; 0x811
    2d1a:	f43f af3b 	beq.w	2b94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2d1e:	e777      	b.n	2c10 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2d20:	e01b      	b.n	2d5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2d22:	f1ba 0f00 	cmp.w	sl, #0
    2d26:	d008      	beq.n	2d3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2d28:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2d2c:	2820      	cmp	r0, #32
    2d2e:	d104      	bne.n	2d3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2d30:	4631      	mov	r1, r6
    2d32:	2002      	movs	r0, #2
    2d34:	f7ff f8da 	bl	1eec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>
    2d38:	b308      	cbz	r0, 2d7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2d3a:	b124      	cbz	r4, 2d46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2d3c:	2100      	movs	r1, #0
    2d3e:	f640 0025 	movw	r0, #2085	; 0x825
    2d42:	f3af 8000 	nop.w
    2d46:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2d4a:	ea28 0000 	bic.w	r0, r8, r0
    2d4e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2d52:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2d56:	2001      	movs	r0, #1
    2d58:	9009      	str	r0, [sp, #36]	; 0x24
    2d5a:	b124      	cbz	r4, 2d66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2d5c:	2100      	movs	r1, #0
    2d5e:	f640 002e 	movw	r0, #2094	; 0x82e
    2d62:	f3af 8000 	nop.w
    2d66:	9808      	ldr	r0, [sp, #32]
    2d68:	b188      	cbz	r0, 2d8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2d6a:	b124      	cbz	r4, 2d76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2d6c:	2100      	movs	r1, #0
    2d6e:	f640 0032 	movw	r0, #2098	; 0x832
    2d72:	f3af 8000 	nop.w
    2d76:	9809      	ldr	r0, [sp, #36]	; 0x24
    2d78:	b00d      	add	sp, #52	; 0x34
    2d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d7e:	2c00      	cmp	r4, #0
    2d80:	d0f1      	beq.n	2d66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2d82:	2100      	movs	r1, #0
    2d84:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2d88:	f3af 8000 	nop.w
    2d8c:	e7e6      	b.n	2d5c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2d8e:	4805      	ldr	r0, [pc, #20]	; (2da4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2d90:	2800      	cmp	r0, #0
    2d92:	bf18      	it	ne
    2d94:	f3af 8000 	nopne.w
    2d98:	b662      	cpsie	i
    2d9a:	e7e6      	b.n	2d6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    2d9c:	20001104 	.word	0x20001104
	...

00002dac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2dac:	2820      	cmp	r0, #32
    2dae:	bf24      	itt	cs
    2db0:	2000      	movcs	r0, #0
    2db2:	4770      	bxcs	lr
    2db4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2db8:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2dba:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    2dbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2dc2:	6042      	str	r2, [r0, #4]
    2dc4:	2001      	movs	r0, #1
    2dc6:	4770      	bx	lr
    2dc8:	20000d84 	.word	0x20000d84

00002dcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2dcc:	b510      	push	{r4, lr}
    2dce:	2820      	cmp	r0, #32
    2dd0:	d211      	bcs.n	2df6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2dd2:	490e      	ldr	r1, [pc, #56]	; (2e0c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2dd4:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2dd8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2ddc:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2de0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2de4:	b13b      	cbz	r3, 2df6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2de6:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2dea:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2dee:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2df2:	2a01      	cmp	r2, #1
    2df4:	d001      	beq.n	2dfa <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2df6:	2000      	movs	r0, #0
    2df8:	bd10      	pop	{r4, pc}
    2dfa:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2dfe:	4601      	mov	r1, r0
    2e00:	2000      	movs	r0, #0
    2e02:	f7ff f843 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    2e06:	2001      	movs	r0, #1
    2e08:	bd10      	pop	{r4, pc}
    2e0a:	0000      	.short	0x0000
    2e0c:	20001104 	.word	0x20001104

00002e10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e14:	4e80      	ldr	r6, [pc, #512]	; (3018 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2e16:	4680      	mov	r8, r0
    2e18:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2e1c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2e20:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2e24:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2e28:	2800      	cmp	r0, #0
    2e2a:	d068      	beq.n	2efe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2e2c:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2e30:	4d7a      	ldr	r5, [pc, #488]	; (301c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    2e32:	b125      	cbz	r5, 2e3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2e34:	2100      	movs	r1, #0
    2e36:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2e3a:	f3af 8000 	nop.w
    2e3e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2e42:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2e46:	2801      	cmp	r0, #1
    2e48:	d018      	beq.n	2e7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2e4a:	b2c0      	uxtb	r0, r0
    2e4c:	2804      	cmp	r0, #4
    2e4e:	bf1c      	itt	ne
    2e50:	2805      	cmpne	r0, #5
    2e52:	2806      	cmpne	r0, #6
    2e54:	d058      	beq.n	2f08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2e56:	b12d      	cbz	r5, 2e64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2e58:	f04f 0100 	mov.w	r1, #0
    2e5c:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2e60:	f3af 8000 	nop.w
    2e64:	f001 fc6c 	bl	4740 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2e68:	b125      	cbz	r5, 2e74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2e6a:	2100      	movs	r1, #0
    2e6c:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2e70:	f3af 8000 	nop.w
    2e74:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2e78:	2801      	cmp	r0, #1
    2e7a:	d1e6      	bne.n	2e4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2e7c:	2401      	movs	r4, #1
    2e7e:	b125      	cbz	r5, 2e8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2e80:	2100      	movs	r1, #0
    2e82:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2e86:	f3af 8000 	nop.w
    2e8a:	2c00      	cmp	r4, #0
    2e8c:	d042      	beq.n	2f14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    2e8e:	2000      	movs	r0, #0
    2e90:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2e94:	b125      	cbz	r5, 2ea0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2e96:	2100      	movs	r1, #0
    2e98:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2e9c:	f3af 8000 	nop.w
    2ea0:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2ea4:	2001      	movs	r0, #1
    2ea6:	ea20 090b 	bic.w	r9, r0, fp
    2eaa:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    2eae:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2eb2:	2240      	movs	r2, #64	; 0x40
    2eb4:	f009 fc2a 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2eb8:	b125      	cbz	r5, 2ec4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2eba:	2100      	movs	r1, #0
    2ebc:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2ec0:	f3af 8000 	nop.w
    2ec4:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2ec8:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2ecc:	6a00      	ldr	r0, [r0, #32]
    2ece:	f8ca 0020 	str.w	r0, [sl, #32]
    2ed2:	b125      	cbz	r5, 2ede <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2ed4:	2100      	movs	r1, #0
    2ed6:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2eda:	f3af 8000 	nop.w
    2ede:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2ee2:	f88d 0000 	strb.w	r0, [sp]
    2ee6:	f89d 0000 	ldrb.w	r0, [sp]
    2eea:	b1d0      	cbz	r0, 2f22 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2eec:	2d00      	cmp	r5, #0
    2eee:	bf1c      	itt	ne
    2ef0:	2100      	movne	r1, #0
    2ef2:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2ef6:	d0c2      	beq.n	2e7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2ef8:	f3af 8000 	nop.w
    2efc:	e7bf      	b.n	2e7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2efe:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2f02:	2070      	movs	r0, #112	; 0x70
    2f04:	f001 faf6 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f08:	464a      	mov	r2, r9
    2f0a:	4641      	mov	r1, r8
    2f0c:	2001      	movs	r0, #1
    2f0e:	f7fe ffbd 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    2f12:	e7a9      	b.n	2e68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2f14:	4842      	ldr	r0, [pc, #264]	; (3020 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2f16:	2800      	cmp	r0, #0
    2f18:	bf18      	it	ne
    2f1a:	f3af 8000 	nopne.w
    2f1e:	b662      	cpsie	i
    2f20:	e7b5      	b.n	2e8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    2f22:	b125      	cbz	r5, 2f2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2f24:	2100      	movs	r1, #0
    2f26:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2f2a:	f3af 8000 	nop.w
    2f2e:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    2f32:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2f36:	4614      	mov	r4, r2
    2f38:	f04f 0b20 	mov.w	fp, #32
    2f3c:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2f40:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2f44:	e003      	b.n	2f4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2f46:	46a3      	mov	fp, r4
    2f48:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2f4c:	785c      	ldrb	r4, [r3, #1]
    2f4e:	4544      	cmp	r4, r8
    2f50:	d002      	beq.n	2f58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    2f52:	2c20      	cmp	r4, #32
    2f54:	d02b      	beq.n	2fae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2f56:	e7f6      	b.n	2f46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2f58:	2c20      	cmp	r4, #32
    2f5a:	d028      	beq.n	2fae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2f5c:	42a2      	cmp	r2, r4
    2f5e:	d104      	bne.n	2f6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2f60:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2f64:	7840      	ldrb	r0, [r0, #1]
    2f66:	7008      	strb	r0, [r1, #0]
    2f68:	e005      	b.n	2f76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2f6a:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    2f6e:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2f72:	7849      	ldrb	r1, [r1, #1]
    2f74:	7041      	strb	r1, [r0, #1]
    2f76:	f1ba 0f00 	cmp.w	sl, #0
    2f7a:	d011      	beq.n	2fa0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2f7c:	b125      	cbz	r5, 2f88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    2f7e:	2100      	movs	r1, #0
    2f80:	f240 502f 	movw	r0, #1327	; 0x52f
    2f84:	f3af 8000 	nop.w
    2f88:	f89a 0000 	ldrb.w	r0, [sl]
    2f8c:	42a0      	cmp	r0, r4
    2f8e:	d107      	bne.n	2fa0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2f90:	b125      	cbz	r5, 2f9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2f92:	2100      	movs	r1, #0
    2f94:	f240 5032 	movw	r0, #1330	; 0x532
    2f98:	f3af 8000 	nop.w
    2f9c:	f88a b000 	strb.w	fp, [sl]
    2fa0:	b15d      	cbz	r5, 2fba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2fa2:	2100      	movs	r1, #0
    2fa4:	f240 5037 	movw	r0, #1335	; 0x537
    2fa8:	f3af 8000 	nop.w
    2fac:	e000      	b.n	2fb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    2fae:	b125      	cbz	r5, 2fba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2fb0:	2100      	movs	r1, #0
    2fb2:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2fb6:	f3af 8000 	nop.w
    2fba:	481a      	ldr	r0, [pc, #104]	; (3024 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2fbc:	2800      	cmp	r0, #0
    2fbe:	bf18      	it	ne
    2fc0:	f3af 8000 	nopne.w
    2fc4:	f3ef 8410 	mrs	r4, PRIMASK
    2fc8:	b672      	cpsid	i
    2fca:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2fce:	f88d 0000 	strb.w	r0, [sp]
    2fd2:	f89d 0000 	ldrb.w	r0, [sp]
    2fd6:	b138      	cbz	r0, 2fe8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2fd8:	2d00      	cmp	r5, #0
    2fda:	bf1c      	itt	ne
    2fdc:	2100      	movne	r1, #0
    2fde:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2fe2:	f43f af4c 	beq.w	2e7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2fe6:	e787      	b.n	2ef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2fe8:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2fec:	2001      	movs	r0, #1
    2fee:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2ff2:	b154      	cbz	r4, 300a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2ff4:	2d00      	cmp	r5, #0
    2ff6:	bf08      	it	eq
    2ff8:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ffc:	2100      	movs	r1, #0
    2ffe:	f640 30fe 	movw	r0, #3070	; 0xbfe
    3002:	f3af 8000 	nop.w
    3006:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    300a:	4805      	ldr	r0, [pc, #20]	; (3020 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    300c:	2800      	cmp	r0, #0
    300e:	bf18      	it	ne
    3010:	f3af 8000 	nopne.w
    3014:	b662      	cpsie	i
    3016:	e7ed      	b.n	2ff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    3018:	20001104 	.word	0x20001104
	...

00003028 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3028:	b570      	push	{r4, r5, r6, lr}
    302a:	460d      	mov	r5, r1
    302c:	4606      	mov	r6, r0
    302e:	f001 f9d7 	bl	43e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3032:	480f      	ldr	r0, [pc, #60]	; (3070 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3034:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3038:	2400      	movs	r4, #0
    303a:	3880      	subs	r0, #128	; 0x80
    303c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3040:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3044:	b129      	cbz	r1, 3052 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    3046:	1c61      	adds	r1, r4, #1
    3048:	b2cc      	uxtb	r4, r1
    304a:	2c20      	cmp	r4, #32
    304c:	d3f8      	bcc.n	3040 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    304e:	2020      	movs	r0, #32
    3050:	bd70      	pop	{r4, r5, r6, pc}
    3052:	4808      	ldr	r0, [pc, #32]	; (3074 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3054:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3058:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    305c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3060:	4621      	mov	r1, r4
    3062:	6045      	str	r5, [r0, #4]
    3064:	2001      	movs	r0, #1
    3066:	f7fe ff11 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    306a:	4620      	mov	r0, r4
    306c:	bd70      	pop	{r4, r5, r6, pc}
    306e:	0000      	.short	0x0000
    3070:	20001104 	.word	0x20001104
    3074:	20000d84 	.word	0x20000d84

00003078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    307c:	b083      	sub	sp, #12
    307e:	f000 fb35 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3082:	4605      	mov	r5, r0
    3084:	f000 fdfe 	bl	3c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3088:	4c67      	ldr	r4, [pc, #412]	; (3228 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    308a:	68a0      	ldr	r0, [r4, #8]
    308c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3090:	bf1c      	itt	ne
    3092:	f04f 30ff 	movne.w	r0, #4294967295
    3096:	60a0      	strne	r0, [r4, #8]
    3098:	7fa0      	ldrb	r0, [r4, #30]
    309a:	f8df b190 	ldr.w	fp, [pc, #400]	; 322c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    309e:	b9a8      	cbnz	r0, 30cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    30a0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    30a4:	1a08      	subs	r0, r1, r0
    30a6:	0200      	lsls	r0, r0, #8
    30a8:	17c1      	asrs	r1, r0, #31
    30aa:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    30ae:	1200      	asrs	r0, r0, #8
    30b0:	f44f 710c 	mov.w	r1, #560	; 0x230
    30b4:	f009 f9e9 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    30b8:	6921      	ldr	r1, [r4, #16]
    30ba:	4408      	add	r0, r1
    30bc:	1a28      	subs	r0, r5, r0
    30be:	0200      	lsls	r0, r0, #8
    30c0:	17c1      	asrs	r1, r0, #31
    30c2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    30c6:	1200      	asrs	r0, r0, #8
    30c8:	0fc0      	lsrs	r0, r0, #31
    30ca:	d013      	beq.n	30f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    30cc:	7e60      	ldrb	r0, [r4, #25]
    30ce:	b328      	cbz	r0, 311c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    30d0:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    30d4:	f88d 0000 	strb.w	r0, [sp]
    30d8:	f89d 0000 	ldrb.w	r0, [sp]
    30dc:	b1f0      	cbz	r0, 311c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    30de:	f000 fc13 	bl	3908 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    30e2:	bf00      	nop
    30e4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    30e8:	b1f0      	cbz	r0, 3128 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    30ea:	f240 4147 	movw	r1, #1095	; 0x447
    30ee:	2070      	movs	r0, #112	; 0x70
    30f0:	f001 fa00 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30f4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    30f8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    30fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3100:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3104:	6840      	ldr	r0, [r0, #4]
    3106:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    310a:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    310e:	2108      	movs	r1, #8
    3110:	4790      	blx	r2
    3112:	f44f 6186 	mov.w	r1, #1072	; 0x430
    3116:	2070      	movs	r0, #112	; 0x70
    3118:	f001 f9ec 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    311c:	1ce8      	adds	r0, r5, #3
    311e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3122:	f000 fae9 	bl	36f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3126:	e7dd      	b.n	30e4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3128:	f04f 0a01 	mov.w	sl, #1
    312c:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3130:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3134:	2820      	cmp	r0, #32
    3136:	d024      	beq.n	3182 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3138:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    313c:	2020      	movs	r0, #32
    313e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3142:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    3146:	2600      	movs	r6, #0
    3148:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    314c:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3150:	4837      	ldr	r0, [pc, #220]	; (3230 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    3152:	6026      	str	r6, [r4, #0]
    3154:	7800      	ldrb	r0, [r0, #0]
    3156:	2802      	cmp	r0, #2
    3158:	bf16      	itet	ne
    315a:	2803      	cmpne	r0, #3
    315c:	2001      	moveq	r0, #1
    315e:	2000      	movne	r0, #0
    3160:	7720      	strb	r0, [r4, #28]
    3162:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    3166:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    316a:	f899 0020 	ldrb.w	r0, [r9, #32]
    316e:	2820      	cmp	r0, #32
    3170:	d031      	beq.n	31d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3172:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3176:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    317a:	7d81      	ldrb	r1, [r0, #22]
    317c:	2901      	cmp	r1, #1
    317e:	d005      	beq.n	318c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    3180:	e029      	b.n	31d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3182:	f240 414a 	movw	r1, #1098	; 0x44a
    3186:	2070      	movs	r0, #112	; 0x70
    3188:	f001 f9b4 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    318c:	46ab      	mov	fp, r5
    318e:	f100 0508 	add.w	r5, r0, #8
    3192:	8a40      	ldrh	r0, [r0, #18]
    3194:	aa01      	add	r2, sp, #4
    3196:	4669      	mov	r1, sp
    3198:	f000 f94a 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    319c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    31a0:	2820      	cmp	r0, #32
    31a2:	d004      	beq.n	31ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    31a4:	6920      	ldr	r0, [r4, #16]
    31a6:	1d40      	adds	r0, r0, #5
    31a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31ac:	e00b      	b.n	31c6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    31ae:	8968      	ldrh	r0, [r5, #10]
    31b0:	f10b 0b09 	add.w	fp, fp, #9
    31b4:	b128      	cbz	r0, 31c2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    31b6:	f001 f925 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    31ba:	2800      	cmp	r0, #0
    31bc:	bf08      	it	eq
    31be:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    31c2:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    31c6:	e9d5 2100 	ldrd	r2, r1, [r5]
    31ca:	1a89      	subs	r1, r1, r2
    31cc:	6028      	str	r0, [r5, #0]
    31ce:	4408      	add	r0, r1
    31d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    31d4:	6068      	str	r0, [r5, #4]
    31d6:	4639      	mov	r1, r7
    31d8:	2001      	movs	r0, #1
    31da:	f7fe fe87 	bl	1eec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a0>
    31de:	2800      	cmp	r0, #0
    31e0:	d0f9      	beq.n	31d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    31e2:	4814      	ldr	r0, [pc, #80]	; (3234 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    31e4:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    31e8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    31ec:	2802      	cmp	r0, #2
    31ee:	d104      	bne.n	31fa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    31f0:	463a      	mov	r2, r7
    31f2:	4641      	mov	r1, r8
    31f4:	2006      	movs	r0, #6
    31f6:	f7fe fe49 	bl	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    31fa:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    31fe:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    3202:	2820      	cmp	r0, #32
    3204:	d003      	beq.n	320e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    3206:	480c      	ldr	r0, [pc, #48]	; (3238 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    3208:	7840      	ldrb	r0, [r0, #1]
    320a:	f001 fa43 	bl	4694 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    320e:	7f20      	ldrb	r0, [r4, #28]
    3210:	2800      	cmp	r0, #0
    3212:	bf04      	itt	eq
    3214:	b003      	addeq	sp, #12
    3216:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    321a:	f000 fd7d 	bl	3d18 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    321e:	7726      	strb	r6, [r4, #28]
    3220:	7766      	strb	r6, [r4, #29]
    3222:	b003      	add	sp, #12
    3224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3228:	20001104 	.word	0x20001104
    322c:	20000d84 	.word	0x20000d84
    3230:	20000012 	.word	0x20000012
    3234:	20001084 	.word	0x20001084
    3238:	20000010 	.word	0x20000010

0000323c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    323c:	b510      	push	{r4, lr}
    323e:	4c32      	ldr	r4, [pc, #200]	; (3308 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3240:	b082      	sub	sp, #8
    3242:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3246:	2920      	cmp	r1, #32
    3248:	d008      	beq.n	325c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    324a:	68a1      	ldr	r1, [r4, #8]
    324c:	f1b1 3fff 	cmp.w	r1, #4294967295
    3250:	d009      	beq.n	3266 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    3252:	f640 21e9 	movw	r1, #2793	; 0xae9
    3256:	2070      	movs	r0, #112	; 0x70
    3258:	f001 f94c 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    325c:	f640 21e8 	movw	r1, #2792	; 0xae8
    3260:	2070      	movs	r0, #112	; 0x70
    3262:	f001 f947 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3266:	6862      	ldr	r2, [r4, #4]
    3268:	4601      	mov	r1, r0
    326a:	4b28      	ldr	r3, [pc, #160]	; (330c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    326c:	1850      	adds	r0, r2, r1
    326e:	429a      	cmp	r2, r3
    3270:	d904      	bls.n	327c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    3272:	f240 6109 	movw	r1, #1545	; 0x609
    3276:	2070      	movs	r0, #112	; 0x70
    3278:	f001 f93c 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    327c:	4a24      	ldr	r2, [pc, #144]	; (3310 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    327e:	4291      	cmp	r1, r2
    3280:	dd04      	ble.n	328c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    3282:	f240 610a 	movw	r1, #1546	; 0x60a
    3286:	2070      	movs	r0, #112	; 0x70
    3288:	f001 f934 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    328c:	4a21      	ldr	r2, [pc, #132]	; (3314 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    328e:	4291      	cmp	r1, r2
    3290:	da04      	bge.n	329c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    3292:	f240 610b 	movw	r1, #1547	; 0x60b
    3296:	2070      	movs	r0, #112	; 0x70
    3298:	f001 f92c 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    329c:	491e      	ldr	r1, [pc, #120]	; (3318 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    329e:	4281      	cmp	r1, r0
    32a0:	bfdc      	itt	le
    32a2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    32a6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    32aa:	dd05      	ble.n	32b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    32ac:	2800      	cmp	r0, #0
    32ae:	bfbc      	itt	lt
    32b0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    32b4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    32b8:	aa01      	add	r2, sp, #4
    32ba:	4669      	mov	r1, sp
    32bc:	f000 f8b8 	bl	3430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    32c0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    32c4:	280f      	cmp	r0, #15
    32c6:	bf8c      	ite	hi
    32c8:	2001      	movhi	r0, #1
    32ca:	2000      	movls	r0, #0
    32cc:	9900      	ldr	r1, [sp, #0]
    32ce:	4408      	add	r0, r1
    32d0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    32d4:	60a1      	str	r1, [r4, #8]
    32d6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    32da:	f88d 0000 	strb.w	r0, [sp]
    32de:	f89d 0000 	ldrb.w	r0, [sp]
    32e2:	2800      	cmp	r0, #0
    32e4:	bf04      	itt	eq
    32e6:	b002      	addeq	sp, #8
    32e8:	bd10      	popeq	{r4, pc}
    32ea:	2301      	movs	r3, #1
    32ec:	2203      	movs	r2, #3
    32ee:	2005      	movs	r0, #5
    32f0:	f000 fb86 	bl	3a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    32f4:	2800      	cmp	r0, #0
    32f6:	bf1c      	itt	ne
    32f8:	b002      	addne	sp, #8
    32fa:	bd10      	popne	{r4, pc}
    32fc:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3300:	2070      	movs	r0, #112	; 0x70
    3302:	f001 f8f7 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3306:	0000      	.short	0x0000
    3308:	20001104 	.word	0x20001104
    330c:	1e847fff 	.word	0x1e847fff
    3310:	07a12000 	.word	0x07a12000
    3314:	f85ee000 	.word	0xf85ee000
    3318:	1e848000 	.word	0x1e848000

0000331c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    331c:	b570      	push	{r4, r5, r6, lr}
    331e:	4c1e      	ldr	r4, [pc, #120]	; (3398 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3320:	2120      	movs	r1, #32
    3322:	f884 1020 	strb.w	r1, [r4, #32]
    3326:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    332a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    332e:	2000      	movs	r0, #0
    3330:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3334:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3338:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    333c:	1e42      	subs	r2, r0, #1
    333e:	60a2      	str	r2, [r4, #8]
    3340:	6020      	str	r0, [r4, #0]
    3342:	77a0      	strb	r0, [r4, #30]
    3344:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3348:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    334c:	7720      	strb	r0, [r4, #28]
    334e:	7760      	strb	r0, [r4, #29]
    3350:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3354:	4911      	ldr	r1, [pc, #68]	; (339c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    3356:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    335a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    335e:	7008      	strb	r0, [r1, #0]
    3360:	7048      	strb	r0, [r1, #1]
    3362:	8048      	strh	r0, [r1, #2]
    3364:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3368:	2210      	movs	r2, #16
    336a:	7088      	strb	r0, [r1, #2]
    336c:	f801 0f04 	strb.w	r0, [r1, #4]!
    3370:	1e52      	subs	r2, r2, #1
    3372:	d1fa      	bne.n	336a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    3374:	4d0a      	ldr	r5, [pc, #40]	; (33a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    3376:	2601      	movs	r6, #1
    3378:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    337c:	20ff      	movs	r0, #255	; 0xff
    337e:	7028      	strb	r0, [r5, #0]
    3380:	4808      	ldr	r0, [pc, #32]	; (33a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    3382:	f001 f969 	bl	4658 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3386:	7068      	strb	r0, [r5, #1]
    3388:	f001 f9c4 	bl	4714 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    338c:	60a8      	str	r0, [r5, #8]
    338e:	f000 fcf1 	bl	3d74 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3392:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    3396:	bd70      	pop	{r4, r5, r6, pc}
    3398:	20001104 	.word	0x20001104
    339c:	20000012 	.word	0x20000012
    33a0:	20000010 	.word	0x20000010
    33a4:	00001d49 	.word	0x00001d49

000033a8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    33a8:	b570      	push	{r4, r5, r6, lr}
    33aa:	4604      	mov	r4, r0
    33ac:	4615      	mov	r5, r2
    33ae:	4608      	mov	r0, r1
    33b0:	f009 f83e 	bl	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    33b4:	4a0f      	ldr	r2, [pc, #60]	; (33f4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    33b6:	1b01      	subs	r1, r0, r4
    33b8:	1c53      	adds	r3, r2, #1
    33ba:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    33be:	bf24      	itt	cs
    33c0:	eba4 0c00 	subcs.w	ip, r4, r0
    33c4:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    33c8:	d30b      	bcc.n	33e2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    33ca:	428a      	cmp	r2, r1
    33cc:	d203      	bcs.n	33d6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    33ce:	1b11      	subs	r1, r2, r4
    33d0:	4408      	add	r0, r1
    33d2:	1c41      	adds	r1, r0, #1
    33d4:	e005      	b.n	33e2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    33d6:	4562      	cmp	r2, ip
    33d8:	d207      	bcs.n	33ea <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    33da:	1a10      	subs	r0, r2, r0
    33dc:	4420      	add	r0, r4
    33de:	1c40      	adds	r0, r0, #1
    33e0:	4241      	negs	r1, r0
    33e2:	f101 000f 	add.w	r0, r1, #15
    33e6:	1a28      	subs	r0, r5, r0
    33e8:	bd70      	pop	{r4, r5, r6, pc}
    33ea:	f640 310c 	movw	r1, #2828	; 0xb0c
    33ee:	2070      	movs	r0, #112	; 0x70
    33f0:	f001 f880 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33f4:	1e847fff 	.word	0x1e847fff

000033f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    33f8:	0b41      	lsrs	r1, r0, #13
    33fa:	f248 6237 	movw	r2, #34359	; 0x8637
    33fe:	4351      	muls	r1, r2
    3400:	0c0a      	lsrs	r2, r1, #16
    3402:	4b09      	ldr	r3, [pc, #36]	; (3428 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3404:	0251      	lsls	r1, r2, #9
    3406:	fb02 0203 	mla	r2, r2, r3, r0
    340a:	4808      	ldr	r0, [pc, #32]	; (342c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    340c:	4350      	muls	r0, r2
    340e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3412:	306e      	adds	r0, #110	; 0x6e
    3414:	0d40      	lsrs	r0, r0, #21
    3416:	425b      	negs	r3, r3
    3418:	fb10 f303 	smulbb	r3, r0, r3
    341c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3420:	bf88      	it	hi
    3422:	1c49      	addhi	r1, r1, #1
    3424:	4408      	add	r0, r1
    3426:	4770      	bx	lr
    3428:	ffffc2f7 	.word	0xffffc2f7
    342c:	00010c6f 	.word	0x00010c6f

00003430 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3430:	0b43      	lsrs	r3, r0, #13
    3432:	f248 6c37 	movw	ip, #34359	; 0x8637
    3436:	fb03 f30c 	mul.w	r3, r3, ip
    343a:	b430      	push	{r4, r5}
    343c:	0c1b      	lsrs	r3, r3, #16
    343e:	f8df c044 	ldr.w	ip, [pc, #68]	; 3484 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3442:	025c      	lsls	r4, r3, #9
    3444:	fb03 030c 	mla	r3, r3, ip, r0
    3448:	480f      	ldr	r0, [pc, #60]	; (3488 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    344a:	4358      	muls	r0, r3
    344c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3450:	eb04 000c 	add.w	r0, r4, ip
    3454:	f643 5409 	movw	r4, #15625	; 0x3d09
    3458:	fb1c f404 	smulbb	r4, ip, r4
    345c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3460:	f643 5508 	movw	r5, #15624	; 0x3d08
    3464:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3468:	442c      	add	r4, r5
    346a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    346e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3472:	bf84      	itt	hi
    3474:	f04f 0c00 	movhi.w	ip, #0
    3478:	1c40      	addhi	r0, r0, #1
    347a:	6008      	str	r0, [r1, #0]
    347c:	f882 c000 	strb.w	ip, [r2]
    3480:	bc30      	pop	{r4, r5}
    3482:	4770      	bx	lr
    3484:	ffffc2f7 	.word	0xffffc2f7
    3488:	00010c6f 	.word	0x00010c6f

0000348c <MPSL_IRQ_RTC0_Handler>:
    348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3490:	4c36      	ldr	r4, [pc, #216]	; (356c <MPSL_IRQ_RTC0_Handler+0xe0>)
    3492:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3496:	f44f 6600 	mov.w	r6, #2048	; 0x800
    349a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    349e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    34a2:	f04f 0500 	mov.w	r5, #0
    34a6:	d019      	beq.n	34dc <MPSL_IRQ_RTC0_Handler+0x50>
    34a8:	4831      	ldr	r0, [pc, #196]	; (3570 <MPSL_IRQ_RTC0_Handler+0xe4>)
    34aa:	6800      	ldr	r0, [r0, #0]
    34ac:	b1b0      	cbz	r0, 34dc <MPSL_IRQ_RTC0_Handler+0x50>
    34ae:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    34b2:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    34b6:	482f      	ldr	r0, [pc, #188]	; (3574 <MPSL_IRQ_RTC0_Handler+0xe8>)
    34b8:	6800      	ldr	r0, [r0, #0]
    34ba:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    34be:	1a40      	subs	r0, r0, r1
    34c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34c4:	2802      	cmp	r0, #2
    34c6:	d302      	bcc.n	34ce <MPSL_IRQ_RTC0_Handler+0x42>
    34c8:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    34cc:	d306      	bcc.n	34dc <MPSL_IRQ_RTC0_Handler+0x50>
    34ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    34d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    34d6:	2004      	movs	r0, #4
    34d8:	f7fe ff2c 	bl	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    34dc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    34e0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    34e4:	d019      	beq.n	351a <MPSL_IRQ_RTC0_Handler+0x8e>
    34e6:	4824      	ldr	r0, [pc, #144]	; (3578 <MPSL_IRQ_RTC0_Handler+0xec>)
    34e8:	6800      	ldr	r0, [r0, #0]
    34ea:	b1b0      	cbz	r0, 351a <MPSL_IRQ_RTC0_Handler+0x8e>
    34ec:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    34f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    34f4:	4821      	ldr	r0, [pc, #132]	; (357c <MPSL_IRQ_RTC0_Handler+0xf0>)
    34f6:	6800      	ldr	r0, [r0, #0]
    34f8:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    34fc:	1a40      	subs	r0, r0, r1
    34fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3502:	2802      	cmp	r0, #2
    3504:	d302      	bcc.n	350c <MPSL_IRQ_RTC0_Handler+0x80>
    3506:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    350a:	d306      	bcc.n	351a <MPSL_IRQ_RTC0_Handler+0x8e>
    350c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3510:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3514:	2005      	movs	r0, #5
    3516:	f7fe ff0d 	bl	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    351a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    351e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3522:	bf08      	it	eq
    3524:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3528:	4815      	ldr	r0, [pc, #84]	; (3580 <MPSL_IRQ_RTC0_Handler+0xf4>)
    352a:	6800      	ldr	r0, [r0, #0]
    352c:	2800      	cmp	r0, #0
    352e:	bf08      	it	eq
    3530:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3534:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3538:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    353c:	4811      	ldr	r0, [pc, #68]	; (3584 <MPSL_IRQ_RTC0_Handler+0xf8>)
    353e:	6800      	ldr	r0, [r0, #0]
    3540:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3544:	1a40      	subs	r0, r0, r1
    3546:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    354a:	2802      	cmp	r0, #2
    354c:	d304      	bcc.n	3558 <MPSL_IRQ_RTC0_Handler+0xcc>
    354e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3552:	bf38      	it	cc
    3554:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3558:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    355c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3564:	2006      	movs	r0, #6
    3566:	f7fe bee5 	b.w	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    356a:	0000      	.short	0x0000
    356c:	4000b000 	.word	0x4000b000
    3570:	4000b140 	.word	0x4000b140
    3574:	4000b540 	.word	0x4000b540
    3578:	4000b144 	.word	0x4000b144
    357c:	4000b544 	.word	0x4000b544
    3580:	4000b148 	.word	0x4000b148
    3584:	4000b548 	.word	0x4000b548

00003588 <MPSL_IRQ_TIMER0_Handler>:
    3588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    358c:	4d38      	ldr	r5, [pc, #224]	; (3670 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    358e:	7828      	ldrb	r0, [r5, #0]
    3590:	2804      	cmp	r0, #4
    3592:	d068      	beq.n	3666 <MPSL_IRQ_TIMER0_Handler+0xde>
    3594:	1ce8      	adds	r0, r5, #3
    3596:	2201      	movs	r2, #1
    3598:	7801      	ldrb	r1, [r0, #0]
    359a:	b159      	cbz	r1, 35b4 <MPSL_IRQ_TIMER0_Handler+0x2c>
    359c:	2901      	cmp	r1, #1
    359e:	bf08      	it	eq
    35a0:	706a      	strbeq	r2, [r5, #1]
    35a2:	d002      	beq.n	35aa <MPSL_IRQ_TIMER0_Handler+0x22>
    35a4:	7869      	ldrb	r1, [r5, #1]
    35a6:	2900      	cmp	r1, #0
    35a8:	d058      	beq.n	365c <MPSL_IRQ_TIMER0_Handler+0xd4>
    35aa:	2102      	movs	r1, #2
    35ac:	7001      	strb	r1, [r0, #0]
    35ae:	7840      	ldrb	r0, [r0, #1]
    35b0:	f000 fafa 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35b4:	4c2f      	ldr	r4, [pc, #188]	; (3674 <MPSL_IRQ_TIMER0_Handler+0xec>)
    35b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    35ba:	f04f 0800 	mov.w	r8, #0
    35be:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    35c2:	f44f 7780 	mov.w	r7, #256	; 0x100
    35c6:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    35ca:	d00a      	beq.n	35e2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    35cc:	482a      	ldr	r0, [pc, #168]	; (3678 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    35ce:	6800      	ldr	r0, [r0, #0]
    35d0:	b138      	cbz	r0, 35e2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    35d2:	2003      	movs	r0, #3
    35d4:	f000 fae8 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35d8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    35dc:	2003      	movs	r0, #3
    35de:	f7fe fea9 	bl	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    35e2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    35e6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    35ea:	d00a      	beq.n	3602 <MPSL_IRQ_TIMER0_Handler+0x7a>
    35ec:	4823      	ldr	r0, [pc, #140]	; (367c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    35ee:	6800      	ldr	r0, [r0, #0]
    35f0:	b138      	cbz	r0, 3602 <MPSL_IRQ_TIMER0_Handler+0x7a>
    35f2:	2002      	movs	r0, #2
    35f4:	f000 fad8 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    35f8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    35fc:	2002      	movs	r0, #2
    35fe:	f7fe fe99 	bl	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3602:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3606:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    360a:	d00a      	beq.n	3622 <MPSL_IRQ_TIMER0_Handler+0x9a>
    360c:	481c      	ldr	r0, [pc, #112]	; (3680 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    360e:	6800      	ldr	r0, [r0, #0]
    3610:	b138      	cbz	r0, 3622 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3612:	2001      	movs	r0, #1
    3614:	f000 fac8 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3618:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    361c:	2001      	movs	r0, #1
    361e:	f7fe fe89 	bl	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3622:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3626:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    362a:	bf08      	it	eq
    362c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3630:	4814      	ldr	r0, [pc, #80]	; (3684 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3632:	6800      	ldr	r0, [r0, #0]
    3634:	2800      	cmp	r0, #0
    3636:	bf08      	it	eq
    3638:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    363c:	2000      	movs	r0, #0
    363e:	f000 fab3 	bl	3ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3642:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3646:	2004      	movs	r0, #4
    3648:	7028      	strb	r0, [r5, #0]
    364a:	f8c5 8008 	str.w	r8, [r5, #8]
    364e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3656:	2000      	movs	r0, #0
    3658:	f7fe be6c 	b.w	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    365c:	f240 316a 	movw	r1, #874	; 0x36a
    3660:	206c      	movs	r0, #108	; 0x6c
    3662:	f000 ff47 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    366a:	2007      	movs	r0, #7
    366c:	f7fe be62 	b.w	2334 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3670:	2000001c 	.word	0x2000001c
    3674:	40008000 	.word	0x40008000
    3678:	4000814c 	.word	0x4000814c
    367c:	40008148 	.word	0x40008148
    3680:	40008144 	.word	0x40008144
    3684:	40008140 	.word	0x40008140
    3688:	2201      	movs	r2, #1
    368a:	0211      	lsls	r1, r2, #8
    368c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3690:	2000      	movs	r0, #0
    3692:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3696:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    369a:	f3bf 8f4f 	dsb	sy
    369e:	f3bf 8f6f 	isb	sy
    36a2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    36a6:	490e      	ldr	r1, [pc, #56]	; (36e0 <MPSL_IRQ_TIMER0_Handler+0x158>)
    36a8:	f841 2f04 	str.w	r2, [r1, #4]!
    36ac:	1e43      	subs	r3, r0, #1
    36ae:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    36b2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    36b6:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    36ba:	4b0a      	ldr	r3, [pc, #40]	; (36e4 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    36bc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    36c0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    36c4:	1d1b      	adds	r3, r3, #4
    36c6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    36ca:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    36ce:	1d1b      	adds	r3, r3, #4
    36d0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    36d4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    36d8:	60ca      	str	r2, [r1, #12]
    36da:	4903      	ldr	r1, [pc, #12]	; (36e8 <MPSL_IRQ_TIMER0_Handler+0x160>)
    36dc:	7048      	strb	r0, [r1, #1]
    36de:	4770      	bx	lr
    36e0:	40008000 	.word	0x40008000
    36e4:	40008004 	.word	0x40008004
    36e8:	2000001c 	.word	0x2000001c

000036ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    36ec:	4801      	ldr	r0, [pc, #4]	; (36f4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    36ee:	6800      	ldr	r0, [r0, #0]
    36f0:	4770      	bx	lr
    36f2:	0000      	.short	0x0000
    36f4:	4000b504 	.word	0x4000b504

000036f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    36f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36fc:	4e47      	ldr	r6, [pc, #284]	; (381c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    36fe:	4605      	mov	r5, r0
    3700:	1ef7      	subs	r7, r6, #3
    3702:	7832      	ldrb	r2, [r6, #0]
    3704:	68f9      	ldr	r1, [r7, #12]
    3706:	2a01      	cmp	r2, #1
    3708:	bf04      	itt	eq
    370a:	42a9      	cmpeq	r1, r5
    370c:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3710:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3714:	4b42      	ldr	r3, [pc, #264]	; (3820 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3716:	6018      	str	r0, [r3, #0]
    3718:	4842      	ldr	r0, [pc, #264]	; (3824 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    371a:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    371e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3722:	f100 0304 	add.w	r3, r0, #4
    3726:	f04f 0400 	mov.w	r4, #0
    372a:	2a00      	cmp	r2, #0
    372c:	d061      	beq.n	37f2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    372e:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3732:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    3736:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    373a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    373e:	4b3a      	ldr	r3, [pc, #232]	; (3828 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3740:	681b      	ldr	r3, [r3, #0]
    3742:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3746:	f04f 0801 	mov.w	r8, #1
    374a:	2b00      	cmp	r3, #0
    374c:	bf04      	itt	eq
    374e:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    3752:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    3756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    375a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    375e:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    3762:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3766:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    376a:	1aeb      	subs	r3, r5, r3
    376c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3770:	2b02      	cmp	r3, #2
    3772:	d34b      	bcc.n	380c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3774:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3778:	d248      	bcs.n	380c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    377a:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    377e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3782:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    3786:	b132      	cbz	r2, 3796 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    3788:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    378c:	1a8a      	subs	r2, r1, r2
    378e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3792:	2a02      	cmp	r2, #2
    3794:	d3f8      	bcc.n	3788 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    3796:	f8c7 8008 	str.w	r8, [r7, #8]
    379a:	703c      	strb	r4, [r7, #0]
    379c:	f7ff ff74 	bl	3688 <MPSL_IRQ_TIMER0_Handler+0x100>
    37a0:	4822      	ldr	r0, [pc, #136]	; (382c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    37a2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    37a6:	f364 0101 	bfi	r1, r4, #0, #2
    37aa:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    37ae:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    37b2:	2102      	movs	r1, #2
    37b4:	f361 0201 	bfi	r2, r1, #0, #2
    37b8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    37bc:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    37c0:	2104      	movs	r1, #4
    37c2:	f361 0203 	bfi	r2, r1, #0, #4
    37c6:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    37ca:	f8c0 800c 	str.w	r8, [r0, #12]
    37ce:	68b9      	ldr	r1, [r7, #8]
    37d0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    37d4:	1580      	asrs	r0, r0, #22
    37d6:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    37da:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    37de:	4914      	ldr	r1, [pc, #80]	; (3830 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    37e0:	05c0      	lsls	r0, r0, #23
    37e2:	6008      	str	r0, [r1, #0]
    37e4:	2004      	movs	r0, #4
    37e6:	60fd      	str	r5, [r7, #12]
    37e8:	7070      	strb	r0, [r6, #1]
    37ea:	f886 8000 	strb.w	r8, [r6]
    37ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37f2:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    37f6:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    37fa:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    37fe:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3802:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    3806:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    380a:	e798      	b.n	373e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    380c:	2100      	movs	r1, #0
    380e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3812:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3816:	206c      	movs	r0, #108	; 0x6c
    3818:	f000 fe6c 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    381c:	2000001f 	.word	0x2000001f
    3820:	4001f508 	.word	0x4001f508
    3824:	4000b000 	.word	0x4000b000
    3828:	4000b148 	.word	0x4000b148
    382c:	40008000 	.word	0x40008000
    3830:	4001f504 	.word	0x4001f504

00003834 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3834:	b570      	push	{r4, r5, r6, lr}
    3836:	4c2c      	ldr	r4, [pc, #176]	; (38e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3838:	68e2      	ldr	r2, [r4, #12]
    383a:	4282      	cmp	r2, r0
    383c:	bf14      	ite	ne
    383e:	2101      	movne	r1, #1
    3840:	2100      	moveq	r1, #0
    3842:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 38ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3846:	f89c 5000 	ldrb.w	r5, [ip]
    384a:	2d02      	cmp	r5, #2
    384c:	d002      	beq.n	3854 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    384e:	2900      	cmp	r1, #0
    3850:	d037      	beq.n	38c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    3852:	e002      	b.n	385a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3854:	2900      	cmp	r1, #0
    3856:	bf08      	it	eq
    3858:	bd70      	popeq	{r4, r5, r6, pc}
    385a:	7861      	ldrb	r1, [r4, #1]
    385c:	b381      	cbz	r1, 38c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    385e:	4b24      	ldr	r3, [pc, #144]	; (38f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3860:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3864:	6019      	str	r1, [r3, #0]
    3866:	138b      	asrs	r3, r1, #14
    3868:	4922      	ldr	r1, [pc, #136]	; (38f4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    386a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    386e:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3872:	2300      	movs	r3, #0
    3874:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    3878:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    387c:	1ac3      	subs	r3, r0, r3
    387e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3882:	2b02      	cmp	r3, #2
    3884:	d327      	bcc.n	38d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    388a:	d224      	bcs.n	38d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    388c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3894:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3898:	b13d      	cbz	r5, 38aa <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    389a:	bf00      	nop
    389c:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    38a0:	1ad3      	subs	r3, r2, r3
    38a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    38a6:	2b02      	cmp	r3, #2
    38a8:	d3f8      	bcc.n	389c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    38aa:	4b13      	ldr	r3, [pc, #76]	; (38f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    38ac:	2102      	movs	r1, #2
    38ae:	074a      	lsls	r2, r1, #29
    38b0:	601a      	str	r2, [r3, #0]
    38b2:	60e0      	str	r0, [r4, #12]
    38b4:	2004      	movs	r0, #4
    38b6:	f88c 0001 	strb.w	r0, [ip, #1]
    38ba:	f88c 1000 	strb.w	r1, [ip]
    38be:	bd70      	pop	{r4, r5, r6, pc}
    38c0:	e004      	b.n	38cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    38c2:	f240 2102 	movw	r1, #514	; 0x202
    38c6:	206c      	movs	r0, #108	; 0x6c
    38c8:	f000 fe14 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38cc:	f240 2106 	movw	r1, #518	; 0x206
    38d0:	206c      	movs	r0, #108	; 0x6c
    38d2:	f000 fe0f 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38d6:	2000      	movs	r0, #0
    38d8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    38dc:	f240 2112 	movw	r1, #530	; 0x212
    38e0:	206c      	movs	r0, #108	; 0x6c
    38e2:	f000 fe07 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38e6:	0000      	.short	0x0000
    38e8:	2000001c 	.word	0x2000001c
    38ec:	2000001f 	.word	0x2000001f
    38f0:	4001f508 	.word	0x4001f508
    38f4:	4000b000 	.word	0x4000b000
    38f8:	4001f504 	.word	0x4001f504

000038fc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    38fc:	4801      	ldr	r0, [pc, #4]	; (3904 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    38fe:	68c0      	ldr	r0, [r0, #12]
    3900:	4770      	bx	lr
    3902:	0000      	.short	0x0000
    3904:	2000001c 	.word	0x2000001c

00003908 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    390c:	4936      	ldr	r1, [pc, #216]	; (39e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    390e:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3912:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3916:	4d35      	ldr	r5, [pc, #212]	; (39ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3918:	1d0b      	adds	r3, r1, #4
    391a:	2200      	movs	r2, #0
    391c:	7828      	ldrb	r0, [r5, #0]
    391e:	b168      	cbz	r0, 393c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    3920:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3924:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3928:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    392c:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3930:	4b2f      	ldr	r3, [pc, #188]	; (39f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3932:	681b      	ldr	r3, [r3, #0]
    3934:	f04f 0c01 	mov.w	ip, #1
    3938:	b99b      	cbnz	r3, 3962 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    393a:	e00c      	b.n	3956 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    393c:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3940:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3944:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    3948:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    394c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3950:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3954:	e7ec      	b.n	3930 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3956:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    395a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    395e:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    3962:	2802      	cmp	r0, #2
    3964:	d004      	beq.n	3970 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    3966:	f240 211e 	movw	r1, #542	; 0x21e
    396a:	206c      	movs	r0, #108	; 0x6c
    396c:	f000 fdc2 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3970:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3974:	4c1f      	ldr	r4, [pc, #124]	; (39f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3976:	1cc0      	adds	r0, r0, #3
    3978:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    397c:	68e3      	ldr	r3, [r4, #12]
    397e:	4e1e      	ldr	r6, [pc, #120]	; (39f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3980:	4298      	cmp	r0, r3
    3982:	d00c      	beq.n	399e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3984:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    3988:	1bdf      	subs	r7, r3, r7
    398a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    398e:	2f04      	cmp	r7, #4
    3990:	d305      	bcc.n	399e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3992:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3996:	d202      	bcs.n	399e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3998:	f7ff feae 	bl	36f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    399c:	e01f      	b.n	39de <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    399e:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    39a2:	1a18      	subs	r0, r3, r0
    39a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    39a8:	2802      	cmp	r0, #2
    39aa:	d315      	bcc.n	39d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    39ac:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    39b0:	d212      	bcs.n	39d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    39b2:	4912      	ldr	r1, [pc, #72]	; (39fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    39b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    39b8:	6008      	str	r0, [r1, #0]
    39ba:	f8c4 c008 	str.w	ip, [r4, #8]
    39be:	7022      	strb	r2, [r4, #0]
    39c0:	f8c6 c004 	str.w	ip, [r6, #4]
    39c4:	f8c6 c00c 	str.w	ip, [r6, #12]
    39c8:	0040      	lsls	r0, r0, #1
    39ca:	1f09      	subs	r1, r1, #4
    39cc:	6008      	str	r0, [r1, #0]
    39ce:	2004      	movs	r0, #4
    39d0:	7068      	strb	r0, [r5, #1]
    39d2:	f885 c000 	strb.w	ip, [r5]
    39d6:	e002      	b.n	39de <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    39d8:	f8c4 c008 	str.w	ip, [r4, #8]
    39dc:	7022      	strb	r2, [r4, #0]
    39de:	68a0      	ldr	r0, [r4, #8]
    39e0:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    39e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39e8:	4000b000 	.word	0x4000b000
    39ec:	2000001f 	.word	0x2000001f
    39f0:	4000b148 	.word	0x4000b148
    39f4:	2000001c 	.word	0x2000001c
    39f8:	40008000 	.word	0x40008000
    39fc:	4001f508 	.word	0x4001f508

00003a00 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a04:	f8df c190 	ldr.w	ip, [pc, #400]	; 3b98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    3a08:	2600      	movs	r6, #0
    3a0a:	2701      	movs	r7, #1
    3a0c:	f89c 4000 	ldrb.w	r4, [ip]
    3a10:	f89c c001 	ldrb.w	ip, [ip, #1]
    3a14:	f44f 75a0 	mov.w	r5, #320	; 0x140
    3a18:	2807      	cmp	r0, #7
    3a1a:	d27b      	bcs.n	3b14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3a1c:	e8df f000 	tbb	[pc, r0]
    3a20:	04040404 	.word	0x04040404
    3a24:	006c6c6c 	.word	0x006c6c6c
    3a28:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3b9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    3a2c:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3a30:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3a34:	bf04      	itt	eq
    3a36:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    3a3a:	f1b8 0f00 	cmpeq.w	r8, #0
    3a3e:	d002      	beq.n	3a46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3a40:	2c02      	cmp	r4, #2
    3a42:	d005      	beq.n	3a50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3a44:	e02c      	b.n	3aa0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    3a46:	f240 2151 	movw	r1, #593	; 0x251
    3a4a:	206c      	movs	r0, #108	; 0x6c
    3a4c:	f000 fd52 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a50:	f1ac 0804 	sub.w	r8, ip, #4
    3a54:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3a58:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    3a5c:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    3a60:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3a64:	2500      	movs	r5, #0
    3a66:	2c01      	cmp	r4, #1
    3a68:	d002      	beq.n	3a70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    3a6a:	2c02      	cmp	r4, #2
    3a6c:	d00b      	beq.n	3a86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3a6e:	e014      	b.n	3a9a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3a70:	f1bc 0f04 	cmp.w	ip, #4
    3a74:	bf24      	itt	cs
    3a76:	f8d8 9000 	ldrcs.w	r9, [r8]
    3a7a:	f1b9 0f00 	cmpcs.w	r9, #0
    3a7e:	bf08      	it	eq
    3a80:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3a84:	e009      	b.n	3a9a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3a86:	f1bc 0f04 	cmp.w	ip, #4
    3a8a:	bf24      	itt	cs
    3a8c:	f8d8 9000 	ldrcs.w	r9, [r8]
    3a90:	f1b9 0f00 	cmpcs.w	r9, #0
    3a94:	bf08      	it	eq
    3a96:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    3a9a:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    3a9e:	d1e1      	bne.n	3a64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    3aa0:	4c3f      	ldr	r4, [pc, #252]	; (3ba0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3aa2:	f100 0c10 	add.w	ip, r0, #16
    3aa6:	fa07 fc0c 	lsl.w	ip, r7, ip
    3aaa:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3aae:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3ab2:	b1c2      	cbz	r2, 3ae6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    3ab4:	f04f 0840 	mov.w	r8, #64	; 0x40
    3ab8:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    3abc:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3ac0:	44a0      	add	r8, r4
    3ac2:	f8c8 7000 	str.w	r7, [r8]
    3ac6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3aca:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3ace:	eba1 0000 	sub.w	r0, r1, r0
    3ad2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ad6:	4282      	cmp	r2, r0
    3ad8:	bf98      	it	ls
    3ada:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    3ade:	bf28      	it	cs
    3ae0:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    3ae4:	d250      	bcs.n	3b88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3ae6:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    3aea:	2b01      	cmp	r3, #1
    3aec:	bf08      	it	eq
    3aee:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3af2:	2001      	movs	r0, #1
    3af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3af8:	b134      	cbz	r4, 3b08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    3afa:	4584      	cmp	ip, r0
    3afc:	d104      	bne.n	3b08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    3afe:	f44f 711d 	mov.w	r1, #628	; 0x274
    3b02:	206c      	movs	r0, #108	; 0x6c
    3b04:	f000 fcf6 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b08:	f1a0 0c04 	sub.w	ip, r0, #4
    3b0c:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    3b10:	2b01      	cmp	r3, #1
    3b12:	e000      	b.n	3b16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3b14:	e03b      	b.n	3b8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    3b16:	bf0c      	ite	eq
    3b18:	f04f 0801 	moveq.w	r8, #1
    3b1c:	f04f 0800 	movne.w	r8, #0
    3b20:	2c03      	cmp	r4, #3
    3b22:	d304      	bcc.n	3b2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    3b24:	f240 114d 	movw	r1, #333	; 0x14d
    3b28:	206c      	movs	r0, #108	; 0x6c
    3b2a:	f000 fce3 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b2e:	f8df c074 	ldr.w	ip, [pc, #116]	; 3ba4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3b32:	f104 0310 	add.w	r3, r4, #16
    3b36:	fa07 f303 	lsl.w	r3, r7, r3
    3b3a:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3b3e:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3b42:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3b46:	f84c 6004 	str.w	r6, [ip, r4]
    3b4a:	1f00      	subs	r0, r0, #4
    3b4c:	b2c0      	uxtb	r0, r0
    3b4e:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3b52:	b16a      	cbz	r2, 3b70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3b54:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    3b58:	1b0c      	subs	r4, r1, r4
    3b5a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    3b5e:	42a2      	cmp	r2, r4
    3b60:	bf98      	it	ls
    3b62:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    3b66:	bf24      	itt	cs
    3b68:	2100      	movcs	r1, #0
    3b6a:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3b6e:	d20b      	bcs.n	3b88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3b70:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3b74:	f1b8 0f00 	cmp.w	r8, #0
    3b78:	bf18      	it	ne
    3b7a:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3b7e:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3b82:	2001      	movs	r0, #1
    3b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b88:	2000      	movs	r0, #0
    3b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b8e:	f240 2179 	movw	r1, #633	; 0x279
    3b92:	206c      	movs	r0, #108	; 0x6c
    3b94:	f000 fcae 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b98:	2000001f 	.word	0x2000001f
    3b9c:	2000001c 	.word	0x2000001c
    3ba0:	40008000 	.word	0x40008000
    3ba4:	4000b000 	.word	0x4000b000

00003ba8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3bac:	2600      	movs	r6, #0
    3bae:	f44f 77a0 	mov.w	r7, #320	; 0x140
    3bb2:	f04f 0801 	mov.w	r8, #1
    3bb6:	2807      	cmp	r0, #7
    3bb8:	d251      	bcs.n	3c5e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    3bba:	e8df f000 	tbb	[pc, r0]
    3bbe:	0404      	.short	0x0404
    3bc0:	19190404 	.word	0x19190404
    3bc4:	0019      	.short	0x0019
    3bc6:	f100 0110 	add.w	r1, r0, #16
    3bca:	fa08 f201 	lsl.w	r2, r8, r1
    3bce:	4926      	ldr	r1, [pc, #152]	; (3c68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3bd0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3bd4:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3bd8:	2200      	movs	r2, #0
    3bda:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3bde:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    3be2:	508e      	str	r6, [r1, r2]
    3be4:	4921      	ldr	r1, [pc, #132]	; (3c6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3be6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3bea:	9000      	str	r0, [sp, #0]
    3bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3bf0:	4d1f      	ldr	r5, [pc, #124]	; (3c70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3bf2:	1f01      	subs	r1, r0, #4
    3bf4:	b2cc      	uxtb	r4, r1
    3bf6:	7829      	ldrb	r1, [r5, #0]
    3bf8:	b179      	cbz	r1, 3c1a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    3bfa:	786a      	ldrb	r2, [r5, #1]
    3bfc:	4282      	cmp	r2, r0
    3bfe:	d10c      	bne.n	3c1a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    3c00:	4a1c      	ldr	r2, [pc, #112]	; (3c74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3c02:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3c06:	6010      	str	r0, [r2, #0]
    3c08:	2901      	cmp	r1, #1
    3c0a:	bf08      	it	eq
    3c0c:	f7ff fd3c 	bleq	3688 <MPSL_IRQ_TIMER0_Handler+0x100>
    3c10:	702e      	strb	r6, [r5, #0]
    3c12:	4919      	ldr	r1, [pc, #100]	; (3c78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3c14:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3c18:	60c8      	str	r0, [r1, #12]
    3c1a:	f104 0010 	add.w	r0, r4, #16
    3c1e:	fa08 f100 	lsl.w	r1, r8, r0
    3c22:	4816      	ldr	r0, [pc, #88]	; (3c7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3c24:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3c28:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3c2c:	00a1      	lsls	r1, r4, #2
    3c2e:	4401      	add	r1, r0
    3c30:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3c34:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3c38:	1a89      	subs	r1, r1, r2
    3c3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3c3e:	2902      	cmp	r1, #2
    3c40:	d307      	bcc.n	3c52 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    3c42:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    3c46:	2100      	movs	r1, #0
    3c48:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3c4c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3c50:	5046      	str	r6, [r0, r1]
    3c52:	480b      	ldr	r0, [pc, #44]	; (3c80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3c54:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3c58:	9000      	str	r0, [sp, #0]
    3c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c5e:	f240 21f1 	movw	r1, #753	; 0x2f1
    3c62:	206c      	movs	r0, #108	; 0x6c
    3c64:	f000 fc46 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c68:	40008000 	.word	0x40008000
    3c6c:	40008140 	.word	0x40008140
    3c70:	2000001f 	.word	0x2000001f
    3c74:	4001f508 	.word	0x4001f508
    3c78:	2000001c 	.word	0x2000001c
    3c7c:	4000b000 	.word	0x4000b000
    3c80:	4000b140 	.word	0x4000b140

00003c84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3c84:	4920      	ldr	r1, [pc, #128]	; (3d08 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3c86:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3c8a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3c8e:	481f      	ldr	r0, [pc, #124]	; (3d0c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3c90:	1d0a      	adds	r2, r1, #4
    3c92:	7803      	ldrb	r3, [r0, #0]
    3c94:	2000      	movs	r0, #0
    3c96:	b15b      	cbz	r3, 3cb0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3c98:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3c9c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3ca0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3ca4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3ca8:	4919      	ldr	r1, [pc, #100]	; (3d10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3caa:	6809      	ldr	r1, [r1, #0]
    3cac:	b999      	cbnz	r1, 3cd6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    3cae:	e00c      	b.n	3cca <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    3cb0:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3cb4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3cb8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3cbc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3cc0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3cc4:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3cc8:	e7ee      	b.n	3ca8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    3cca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3cd2:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3cd6:	490f      	ldr	r1, [pc, #60]	; (3d14 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3cd8:	f04f 32ff 	mov.w	r2, #4294967295
    3cdc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3ce0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3ce4:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3ce8:	1d0a      	adds	r2, r1, #4
    3cea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3cee:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3cf2:	1d12      	adds	r2, r2, #4
    3cf4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3cf8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3cfc:	1d12      	adds	r2, r2, #4
    3cfe:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3d02:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3d06:	4770      	bx	lr
    3d08:	4000b000 	.word	0x4000b000
    3d0c:	2000001f 	.word	0x2000001f
    3d10:	4000b148 	.word	0x4000b148
    3d14:	40008000 	.word	0x40008000

00003d18 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3d18:	4808      	ldr	r0, [pc, #32]	; (3d3c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3d1a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3d1e:	2800      	cmp	r0, #0
    3d20:	bfb8      	it	lt
    3d22:	4770      	bxlt	lr
    3d24:	f000 011f 	and.w	r1, r0, #31
    3d28:	2201      	movs	r2, #1
    3d2a:	fa02 f101 	lsl.w	r1, r2, r1
    3d2e:	0940      	lsrs	r0, r0, #5
    3d30:	0080      	lsls	r0, r0, #2
    3d32:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3d36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3d3a:	4770      	bx	lr
    3d3c:	2000001c 	.word	0x2000001c

00003d40 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3d40:	b510      	push	{r4, lr}
    3d42:	2807      	cmp	r0, #7
    3d44:	d20d      	bcs.n	3d62 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3d46:	e8df f000 	tbb	[pc, r0]
    3d4a:	0404      	.short	0x0404
    3d4c:	06060404 	.word	0x06060404
    3d50:	0006      	.short	0x0006
    3d52:	4906      	ldr	r1, [pc, #24]	; (3d6c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3d54:	e002      	b.n	3d5c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3d56:	1f00      	subs	r0, r0, #4
    3d58:	4905      	ldr	r1, [pc, #20]	; (3d70 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3d5a:	b2c0      	uxtb	r0, r0
    3d5c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3d60:	bd10      	pop	{r4, pc}
    3d62:	f240 219d 	movw	r1, #669	; 0x29d
    3d66:	206c      	movs	r0, #108	; 0x6c
    3d68:	f000 fbc4 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d6c:	40008140 	.word	0x40008140
    3d70:	4000b140 	.word	0x4000b140

00003d74 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3d74:	b510      	push	{r4, lr}
    3d76:	481c      	ldr	r0, [pc, #112]	; (3de8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3d78:	2400      	movs	r4, #0
    3d7a:	2104      	movs	r1, #4
    3d7c:	7004      	strb	r4, [r0, #0]
    3d7e:	1ec0      	subs	r0, r0, #3
    3d80:	7001      	strb	r1, [r0, #0]
    3d82:	0589      	lsls	r1, r1, #22
    3d84:	60c1      	str	r1, [r0, #12]
    3d86:	f7ff fc7f 	bl	3688 <MPSL_IRQ_TIMER0_Handler+0x100>
    3d8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3d92:	f04f 0c01 	mov.w	ip, #1
    3d96:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3d9a:	f3bf 8f4f 	dsb	sy
    3d9e:	f3bf 8f6f 	isb	sy
    3da2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    3da6:	4811      	ldr	r0, [pc, #68]	; (3dec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    3da8:	f8c0 c004 	str.w	ip, [r0, #4]
    3dac:	f8c0 c008 	str.w	ip, [r0, #8]
    3db0:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3db4:	2900      	cmp	r1, #0
    3db6:	d1fb      	bne.n	3db0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    3db8:	1e49      	subs	r1, r1, #1
    3dba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3dbe:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3dc2:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3dc6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3dca:	4909      	ldr	r1, [pc, #36]	; (3df0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    3dcc:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3dd0:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3dd4:	1d09      	adds	r1, r1, #4
    3dd6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3dda:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3dde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3de2:	f8c0 c000 	str.w	ip, [r0]
    3de6:	bd10      	pop	{r4, pc}
    3de8:	2000001f 	.word	0x2000001f
    3dec:	4000b000 	.word	0x4000b000
    3df0:	4000b004 	.word	0x4000b004

00003df4 <MPSL_IRQ_CLOCK_Handler>:
    3df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3df8:	4c16      	ldr	r4, [pc, #88]	; (3e54 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3dfa:	7a60      	ldrb	r0, [r4, #9]
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d027      	beq.n	3e50 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3e00:	f44f 7180 	mov.w	r1, #256	; 0x100
    3e04:	058d      	lsls	r5, r1, #22
    3e06:	4628      	mov	r0, r5
    3e08:	f008 fb63 	bl	c4d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e0c:	4680      	mov	r8, r0
    3e0e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3e12:	4628      	mov	r0, r5
    3e14:	f008 fb5d 	bl	c4d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3e18:	2600      	movs	r6, #0
    3e1a:	4607      	mov	r7, r0
    3e1c:	f1b8 0f00 	cmp.w	r8, #0
    3e20:	d009      	beq.n	3e36 <MPSL_IRQ_CLOCK_Handler+0x42>
    3e22:	2001      	movs	r0, #1
    3e24:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e28:	7920      	ldrb	r0, [r4, #4]
    3e2a:	b120      	cbz	r0, 3e36 <MPSL_IRQ_CLOCK_Handler+0x42>
    3e2c:	7126      	strb	r6, [r4, #4]
    3e2e:	69e0      	ldr	r0, [r4, #28]
    3e30:	b108      	cbz	r0, 3e36 <MPSL_IRQ_CLOCK_Handler+0x42>
    3e32:	4780      	blx	r0
    3e34:	61e6      	str	r6, [r4, #28]
    3e36:	b137      	cbz	r7, 3e46 <MPSL_IRQ_CLOCK_Handler+0x52>
    3e38:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3e3c:	2002      	movs	r0, #2
    3e3e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3e42:	f000 fa8b 	bl	435c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3e46:	4640      	mov	r0, r8
    3e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e4c:	f000 b85a 	b.w	3f04 <MPSL_IRQ_CLOCK_Handler+0x110>
    3e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e54:	2000002c 	.word	0x2000002c
    3e58:	b510      	push	{r4, lr}
    3e5a:	f008 fbe4 	bl	c626 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3e5e:	b930      	cbnz	r0, 3e6e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e60:	f008 fc02 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3e64:	b918      	cbnz	r0, 3e6e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3e66:	f008 fc35 	bl	c6d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d002      	beq.n	3e74 <MPSL_IRQ_CLOCK_Handler+0x80>
    3e6e:	4902      	ldr	r1, [pc, #8]	; (3e78 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3e70:	2002      	movs	r0, #2
    3e72:	6008      	str	r0, [r1, #0]
    3e74:	bd10      	pop	{r4, pc}
    3e76:	0000      	.short	0x0000
    3e78:	40000c34 	.word	0x40000c34
    3e7c:	b570      	push	{r4, r5, r6, lr}
    3e7e:	f000 f987 	bl	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3e82:	f000 fabf 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3e86:	4c09      	ldr	r4, [pc, #36]	; (3eac <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3e88:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3e8c:	b130      	cbz	r0, 3e9c <MPSL_IRQ_CLOCK_Handler+0xa8>
    3e8e:	f7ff ffe3 	bl	3e58 <MPSL_IRQ_CLOCK_Handler+0x64>
    3e92:	2001      	movs	r0, #1
    3e94:	6128      	str	r0, [r5, #16]
    3e96:	2004      	movs	r0, #4
    3e98:	72a0      	strb	r0, [r4, #10]
    3e9a:	e004      	b.n	3ea6 <MPSL_IRQ_CLOCK_Handler+0xb2>
    3e9c:	2003      	movs	r0, #3
    3e9e:	72a0      	strb	r0, [r4, #10]
    3ea0:	2001      	movs	r0, #1
    3ea2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3ea6:	2000      	movs	r0, #0
    3ea8:	71e0      	strb	r0, [r4, #7]
    3eaa:	bd70      	pop	{r4, r5, r6, pc}
    3eac:	2000002c 	.word	0x2000002c
    3eb0:	b570      	push	{r4, r5, r6, lr}
    3eb2:	4c13      	ldr	r4, [pc, #76]	; (3f00 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3eb4:	79a0      	ldrb	r0, [r4, #6]
    3eb6:	b1f0      	cbz	r0, 3ef6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3eb8:	2801      	cmp	r0, #1
    3eba:	d003      	beq.n	3ec4 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3ebc:	79e1      	ldrb	r1, [r4, #7]
    3ebe:	1e40      	subs	r0, r0, #1
    3ec0:	4281      	cmp	r1, r0
    3ec2:	da18      	bge.n	3ef6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3ec4:	f000 fa9e 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3ec8:	4605      	mov	r5, r0
    3eca:	f000 fb83 	bl	45d4 <mpsl_temperature_get>
    3ece:	79a1      	ldrb	r1, [r4, #6]
    3ed0:	2901      	cmp	r1, #1
    3ed2:	d902      	bls.n	3eda <MPSL_IRQ_CLOCK_Handler+0xe6>
    3ed4:	79e1      	ldrb	r1, [r4, #7]
    3ed6:	1c49      	adds	r1, r1, #1
    3ed8:	71e1      	strb	r1, [r4, #7]
    3eda:	b10d      	cbz	r5, 3ee0 <MPSL_IRQ_CLOCK_Handler+0xec>
    3edc:	6961      	ldr	r1, [r4, #20]
    3ede:	e000      	b.n	3ee2 <MPSL_IRQ_CLOCK_Handler+0xee>
    3ee0:	6921      	ldr	r1, [r4, #16]
    3ee2:	1a41      	subs	r1, r0, r1
    3ee4:	2902      	cmp	r1, #2
    3ee6:	da02      	bge.n	3eee <MPSL_IRQ_CLOCK_Handler+0xfa>
    3ee8:	f111 0f02 	cmn.w	r1, #2
    3eec:	dc07      	bgt.n	3efe <MPSL_IRQ_CLOCK_Handler+0x10a>
    3eee:	b10d      	cbz	r5, 3ef4 <MPSL_IRQ_CLOCK_Handler+0x100>
    3ef0:	6160      	str	r0, [r4, #20]
    3ef2:	e000      	b.n	3ef6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3ef4:	6120      	str	r0, [r4, #16]
    3ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3efa:	f7ff bfbf 	b.w	3e7c <MPSL_IRQ_CLOCK_Handler+0x88>
    3efe:	bd70      	pop	{r4, r5, r6, pc}
    3f00:	2000002c 	.word	0x2000002c
    3f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f08:	4606      	mov	r6, r0
    3f0a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3f0e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3f12:	4628      	mov	r0, r5
    3f14:	f008 fadd 	bl	c4d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f18:	4680      	mov	r8, r0
    3f1a:	f44f 7188 	mov.w	r1, #272	; 0x110
    3f1e:	4628      	mov	r0, r5
    3f20:	f008 fad7 	bl	c4d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3f24:	4c27      	ldr	r4, [pc, #156]	; (3fc4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3f26:	4682      	mov	sl, r0
    3f28:	7827      	ldrb	r7, [r4, #0]
    3f2a:	f104 0008 	add.w	r0, r4, #8
    3f2e:	f008 fb44 	bl	c5ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3f32:	b110      	cbz	r0, 3f3a <MPSL_IRQ_CLOCK_Handler+0x146>
    3f34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3f38:	e016      	b.n	3f68 <MPSL_IRQ_CLOCK_Handler+0x174>
    3f3a:	f04f 0901 	mov.w	r9, #1
    3f3e:	b146      	cbz	r6, 3f52 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3f40:	7aa0      	ldrb	r0, [r4, #10]
    3f42:	2803      	cmp	r0, #3
    3f44:	d105      	bne.n	3f52 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3f46:	2004      	movs	r0, #4
    3f48:	72a0      	strb	r0, [r4, #10]
    3f4a:	f7ff ff85 	bl	3e58 <MPSL_IRQ_CLOCK_Handler+0x64>
    3f4e:	f8c5 9010 	str.w	r9, [r5, #16]
    3f52:	2600      	movs	r6, #0
    3f54:	f1b8 0f00 	cmp.w	r8, #0
    3f58:	d018      	beq.n	3f8c <MPSL_IRQ_CLOCK_Handler+0x198>
    3f5a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    3f5e:	7aa0      	ldrb	r0, [r4, #10]
    3f60:	2804      	cmp	r0, #4
    3f62:	d004      	beq.n	3f6e <MPSL_IRQ_CLOCK_Handler+0x17a>
    3f64:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3f68:	206d      	movs	r0, #109	; 0x6d
    3f6a:	f000 fac3 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f6e:	f008 fb5a 	bl	c626 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3f72:	b928      	cbnz	r0, 3f80 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3f74:	f008 fb78 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3f78:	b910      	cbnz	r0, 3f80 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3f7a:	f008 fbab 	bl	c6d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3f7e:	b108      	cbz	r0, 3f84 <MPSL_IRQ_CLOCK_Handler+0x190>
    3f80:	4811      	ldr	r0, [pc, #68]	; (3fc8 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3f82:	6006      	str	r6, [r0, #0]
    3f84:	2002      	movs	r0, #2
    3f86:	72a0      	strb	r0, [r4, #10]
    3f88:	f000 f8e6 	bl	4158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3f8c:	f1ba 0f00 	cmp.w	sl, #0
    3f90:	d008      	beq.n	3fa4 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3f92:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3f96:	7aa0      	ldrb	r0, [r4, #10]
    3f98:	2802      	cmp	r0, #2
    3f9a:	d101      	bne.n	3fa0 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    3f9c:	f7ff ff88 	bl	3eb0 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3fa0:	f8c5 9014 	str.w	r9, [r5, #20]
    3fa4:	b13f      	cbz	r7, 3fb6 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3fa6:	7026      	strb	r6, [r4, #0]
    3fa8:	7aa0      	ldrb	r0, [r4, #10]
    3faa:	2802      	cmp	r0, #2
    3fac:	d101      	bne.n	3fb2 <MPSL_IRQ_CLOCK_Handler+0x1be>
    3fae:	f7ff ff65 	bl	3e7c <MPSL_IRQ_CLOCK_Handler+0x88>
    3fb2:	f000 f8d1 	bl	4158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3fb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fba:	4802      	ldr	r0, [pc, #8]	; (3fc4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3fbc:	3008      	adds	r0, #8
    3fbe:	f008 bb13 	b.w	c5e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3fc2:	0000      	.short	0x0000
    3fc4:	2000002c 	.word	0x2000002c
    3fc8:	40000c34 	.word	0x40000c34
    3fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fd0:	4c5c      	ldr	r4, [pc, #368]	; (4144 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3fd2:	f04f 0800 	mov.w	r8, #0
    3fd6:	4606      	mov	r6, r0
    3fd8:	f8c4 8018 	str.w	r8, [r4, #24]
    3fdc:	7843      	ldrb	r3, [r0, #1]
    3fde:	7882      	ldrb	r2, [r0, #2]
    3fe0:	7800      	ldrb	r0, [r0, #0]
    3fe2:	72e0      	strb	r0, [r4, #11]
    3fe4:	7163      	strb	r3, [r4, #5]
    3fe6:	2701      	movs	r7, #1
    3fe8:	71a2      	strb	r2, [r4, #6]
    3fea:	07bd      	lsls	r5, r7, #30
    3fec:	f884 8007 	strb.w	r8, [r4, #7]
    3ff0:	2805      	cmp	r0, #5
    3ff2:	d224      	bcs.n	403e <MPSL_IRQ_CLOCK_Handler+0x24a>
    3ff4:	e8df f000 	tbb	[pc, r0]
    3ff8:	1f05030f 	.word	0x1f05030f
    3ffc:	0021      	.short	0x0021
    3ffe:	61a7      	str	r7, [r4, #24]
    4000:	e009      	b.n	4016 <MPSL_IRQ_CLOCK_Handler+0x222>
    4002:	f000 f8c5 	bl	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4006:	2101      	movs	r1, #1
    4008:	4628      	mov	r0, r5
    400a:	f008 fa67 	bl	c4dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    400e:	2800      	cmp	r0, #0
    4010:	d0f9      	beq.n	4006 <MPSL_IRQ_CLOCK_Handler+0x212>
    4012:	2002      	movs	r0, #2
    4014:	61a0      	str	r0, [r4, #24]
    4016:	f008 fa8d 	bl	c534 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    401a:	b1b0      	cbz	r0, 404a <MPSL_IRQ_CLOCK_Handler+0x256>
    401c:	f000 fa0c 	bl	4438 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4020:	7e21      	ldrb	r1, [r4, #24]
    4022:	f001 0103 	and.w	r1, r1, #3
    4026:	4288      	cmp	r0, r1
    4028:	d10f      	bne.n	404a <MPSL_IRQ_CLOCK_Handler+0x256>
    402a:	79b0      	ldrb	r0, [r6, #6]
    402c:	b150      	cbz	r0, 4044 <MPSL_IRQ_CLOCK_Handler+0x250>
    402e:	2002      	movs	r0, #2
    4030:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4034:	e06a      	b.n	410c <MPSL_IRQ_CLOCK_Handler+0x318>
    4036:	4844      	ldr	r0, [pc, #272]	; (4148 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4038:	e7ec      	b.n	4014 <MPSL_IRQ_CLOCK_Handler+0x220>
    403a:	4844      	ldr	r0, [pc, #272]	; (414c <MPSL_IRQ_CLOCK_Handler+0x358>)
    403c:	e7ea      	b.n	4014 <MPSL_IRQ_CLOCK_Handler+0x220>
    403e:	f240 312d 	movw	r1, #813	; 0x32d
    4042:	e049      	b.n	40d8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4044:	f000 f9cc 	bl	43e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4048:	e060      	b.n	410c <MPSL_IRQ_CLOCK_Handler+0x318>
    404a:	60ef      	str	r7, [r5, #12]
    404c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4050:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4054:	69a0      	ldr	r0, [r4, #24]
    4056:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    405a:	f008 fad0 	bl	c5fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    405e:	b940      	cbnz	r0, 4072 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4060:	f008 fad7 	bl	c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4064:	b928      	cbnz	r0, 4072 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4066:	f008 faeb 	bl	c640 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    406a:	b910      	cbnz	r0, 4072 <MPSL_IRQ_CLOCK_Handler+0x27e>
    406c:	f008 fafc 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4070:	b138      	cbz	r0, 4082 <MPSL_IRQ_CLOCK_Handler+0x28e>
    4072:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4076:	4836      	ldr	r0, [pc, #216]	; (4150 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4078:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    407c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    4080:	6001      	str	r1, [r0, #0]
    4082:	f008 fabc 	bl	c5fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4086:	b940      	cbnz	r0, 409a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4088:	f008 fac3 	bl	c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    408c:	b928      	cbnz	r0, 409a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    408e:	f008 fad7 	bl	c640 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4092:	b910      	cbnz	r0, 409a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4094:	f008 fae8 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4098:	b110      	cbz	r0, 40a0 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    409a:	482d      	ldr	r0, [pc, #180]	; (4150 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    409c:	3010      	adds	r0, #16
    409e:	6007      	str	r7, [r0, #0]
    40a0:	60af      	str	r7, [r5, #8]
    40a2:	2002      	movs	r0, #2
    40a4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    40a8:	79b0      	ldrb	r0, [r6, #6]
    40aa:	bb78      	cbnz	r0, 410c <MPSL_IRQ_CLOCK_Handler+0x318>
    40ac:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    40b0:	f010 0f02 	tst.w	r0, #2
    40b4:	d00e      	beq.n	40d4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    40b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4154 <MPSL_IRQ_CLOCK_Handler+0x360>
    40ba:	f8d9 1000 	ldr.w	r1, [r9]
    40be:	43c9      	mvns	r1, r1
    40c0:	f341 1700 	sbfx	r7, r1, #4, #1
    40c4:	f8d9 1000 	ldr.w	r1, [r9]
    40c8:	f041 0110 	orr.w	r1, r1, #16
    40cc:	f8c9 1000 	str.w	r1, [r9]
    40d0:	1c7f      	adds	r7, r7, #1
    40d2:	e007      	b.n	40e4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    40d4:	f240 21ee 	movw	r1, #750	; 0x2ee
    40d8:	206d      	movs	r0, #109	; 0x6d
    40da:	f000 fa0b 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40de:	bf00      	nop
    40e0:	f000 fb2e 	bl	4740 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    40e4:	4651      	mov	r1, sl
    40e6:	4628      	mov	r0, r5
    40e8:	f008 f9f3 	bl	c4d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40ec:	2800      	cmp	r0, #0
    40ee:	d0f7      	beq.n	40e0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    40f0:	f000 f976 	bl	43e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    40f4:	b92f      	cbnz	r7, 4102 <MPSL_IRQ_CLOCK_Handler+0x30e>
    40f6:	f8d9 1000 	ldr.w	r1, [r9]
    40fa:	f021 0110 	bic.w	r1, r1, #16
    40fe:	f8c9 1000 	str.w	r1, [r9]
    4102:	2002      	movs	r0, #2
    4104:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4108:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    410c:	79a0      	ldrb	r0, [r4, #6]
    410e:	b170      	cbz	r0, 412e <MPSL_IRQ_CLOCK_Handler+0x33a>
    4110:	7830      	ldrb	r0, [r6, #0]
    4112:	b960      	cbnz	r0, 412e <MPSL_IRQ_CLOCK_Handler+0x33a>
    4114:	f000 f976 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4118:	4606      	mov	r6, r0
    411a:	f000 fa5b 	bl	45d4 <mpsl_temperature_get>
    411e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4122:	b116      	cbz	r6, 412a <MPSL_IRQ_CLOCK_Handler+0x336>
    4124:	e9c4 2004 	strd	r2, r0, [r4, #16]
    4128:	e001      	b.n	412e <MPSL_IRQ_CLOCK_Handler+0x33a>
    412a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    412e:	2101      	movs	r1, #1
    4130:	4628      	mov	r0, r5
    4132:	f008 f9d3 	bl	c4dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4136:	b108      	cbz	r0, 413c <MPSL_IRQ_CLOCK_Handler+0x348>
    4138:	f000 f95e 	bl	43f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    413c:	f884 800a 	strb.w	r8, [r4, #10]
    4140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4144:	2000002c 	.word	0x2000002c
    4148:	00020001 	.word	0x00020001
    414c:	00030001 	.word	0x00030001
    4150:	4000053c 	.word	0x4000053c
    4154:	e000ed10 	.word	0xe000ed10

00004158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4158:	b510      	push	{r4, lr}
    415a:	f3ef 8410 	mrs	r4, PRIMASK
    415e:	b672      	cpsid	i
    4160:	480a      	ldr	r0, [pc, #40]	; (418c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4162:	7841      	ldrb	r1, [r0, #1]
    4164:	b129      	cbz	r1, 4172 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4166:	7841      	ldrb	r1, [r0, #1]
    4168:	1e49      	subs	r1, r1, #1
    416a:	7041      	strb	r1, [r0, #1]
    416c:	7841      	ldrb	r1, [r0, #1]
    416e:	b129      	cbz	r1, 417c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4170:	e008      	b.n	4184 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4172:	f240 110d 	movw	r1, #269	; 0x10d
    4176:	206d      	movs	r0, #109	; 0x6d
    4178:	f000 f9bc 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    417c:	7880      	ldrb	r0, [r0, #2]
    417e:	b908      	cbnz	r0, 4184 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4180:	f000 f94e 	bl	4420 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4184:	2c00      	cmp	r4, #0
    4186:	d100      	bne.n	418a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4188:	b662      	cpsie	i
    418a:	bd10      	pop	{r4, pc}
    418c:	2000002c 	.word	0x2000002c

00004190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4190:	b510      	push	{r4, lr}
    4192:	f3ef 8410 	mrs	r4, PRIMASK
    4196:	b672      	cpsid	i
    4198:	4806      	ldr	r0, [pc, #24]	; (41b4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    419a:	7841      	ldrb	r1, [r0, #1]
    419c:	1c49      	adds	r1, r1, #1
    419e:	7041      	strb	r1, [r0, #1]
    41a0:	7840      	ldrb	r0, [r0, #1]
    41a2:	2801      	cmp	r0, #1
    41a4:	d101      	bne.n	41aa <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    41a6:	f008 f9b0 	bl	c50a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    41aa:	2c00      	cmp	r4, #0
    41ac:	d100      	bne.n	41b0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    41ae:	b662      	cpsie	i
    41b0:	bd10      	pop	{r4, pc}
    41b2:	0000      	.short	0x0000
    41b4:	2000002c 	.word	0x2000002c

000041b8 <mpsl_clock_hfclk_release>:
    41b8:	4805      	ldr	r0, [pc, #20]	; (41d0 <mpsl_clock_hfclk_release+0x18>)
    41ba:	b510      	push	{r4, lr}
    41bc:	78c1      	ldrb	r1, [r0, #3]
    41be:	b121      	cbz	r1, 41ca <mpsl_clock_hfclk_release+0x12>
    41c0:	2100      	movs	r1, #0
    41c2:	7101      	strb	r1, [r0, #4]
    41c4:	70c1      	strb	r1, [r0, #3]
    41c6:	f7ff ffc7 	bl	4158 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    41ca:	2000      	movs	r0, #0
    41cc:	bd10      	pop	{r4, pc}
    41ce:	0000      	.short	0x0000
    41d0:	2000002c 	.word	0x2000002c

000041d4 <mpsl_clock_hfclk_request>:
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	4c0c      	ldr	r4, [pc, #48]	; (4208 <mpsl_clock_hfclk_request+0x34>)
    41d8:	78e1      	ldrb	r1, [r4, #3]
    41da:	b961      	cbnz	r1, 41f6 <mpsl_clock_hfclk_request+0x22>
    41dc:	2501      	movs	r5, #1
    41de:	70e5      	strb	r5, [r4, #3]
    41e0:	61e0      	str	r0, [r4, #28]
    41e2:	f7ff ffd5 	bl	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    41e6:	f000 f90d 	bl	4404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    41ea:	b130      	cbz	r0, 41fa <mpsl_clock_hfclk_request+0x26>
    41ec:	69e0      	ldr	r0, [r4, #28]
    41ee:	b110      	cbz	r0, 41f6 <mpsl_clock_hfclk_request+0x22>
    41f0:	4780      	blx	r0
    41f2:	2000      	movs	r0, #0
    41f4:	61e0      	str	r0, [r4, #28]
    41f6:	2000      	movs	r0, #0
    41f8:	bd70      	pop	{r4, r5, r6, pc}
    41fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    41fe:	7125      	strb	r5, [r4, #4]
    4200:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4204:	e7f7      	b.n	41f6 <mpsl_clock_hfclk_request+0x22>
    4206:	0000      	.short	0x0000
    4208:	2000002c 	.word	0x2000002c

0000420c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    420c:	f3ef 8010 	mrs	r0, PRIMASK
    4210:	b672      	cpsid	i
    4212:	4904      	ldr	r1, [pc, #16]	; (4224 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    4214:	788a      	ldrb	r2, [r1, #2]
    4216:	1c52      	adds	r2, r2, #1
    4218:	708a      	strb	r2, [r1, #2]
    421a:	2800      	cmp	r0, #0
    421c:	d100      	bne.n	4220 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    421e:	b662      	cpsie	i
    4220:	4770      	bx	lr
    4222:	0000      	.short	0x0000
    4224:	2000002c 	.word	0x2000002c

00004228 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    4228:	b510      	push	{r4, lr}
    422a:	f3ef 8410 	mrs	r4, PRIMASK
    422e:	b672      	cpsid	i
    4230:	480a      	ldr	r0, [pc, #40]	; (425c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    4232:	7881      	ldrb	r1, [r0, #2]
    4234:	b129      	cbz	r1, 4242 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    4236:	7881      	ldrb	r1, [r0, #2]
    4238:	1e49      	subs	r1, r1, #1
    423a:	7081      	strb	r1, [r0, #2]
    423c:	7841      	ldrb	r1, [r0, #1]
    423e:	b129      	cbz	r1, 424c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4240:	e008      	b.n	4254 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4242:	f240 1125 	movw	r1, #293	; 0x125
    4246:	206d      	movs	r0, #109	; 0x6d
    4248:	f000 f954 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    424c:	7880      	ldrb	r0, [r0, #2]
    424e:	b908      	cbnz	r0, 4254 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4250:	f000 f8e6 	bl	4420 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4254:	2c00      	cmp	r4, #0
    4256:	d100      	bne.n	425a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4258:	b662      	cpsie	i
    425a:	bd10      	pop	{r4, pc}
    425c:	2000002c 	.word	0x2000002c

00004260 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4264:	0004      	movs	r4, r0
    4266:	f06f 0015 	mvn.w	r0, #21
    426a:	d03c      	beq.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    426c:	7821      	ldrb	r1, [r4, #0]
    426e:	2904      	cmp	r1, #4
    4270:	d839      	bhi.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4272:	2900      	cmp	r1, #0
    4274:	7861      	ldrb	r1, [r4, #1]
    4276:	d038      	beq.n	42ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4278:	2900      	cmp	r1, #0
    427a:	d134      	bne.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    427c:	78a1      	ldrb	r1, [r4, #2]
    427e:	2900      	cmp	r1, #0
    4280:	d131      	bne.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4282:	2000      	movs	r0, #0
    4284:	f008 f8f0 	bl	c468 <MPSL_IRQ_RADIO_Handler+0x1e>
    4288:	2000      	movs	r0, #0
    428a:	f008 f8e0 	bl	c44e <MPSL_IRQ_RADIO_Handler+0x4>
    428e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4292:	f04f 31ff 	mov.w	r1, #4294967295
    4296:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    429a:	2600      	movs	r6, #0
    429c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    42a0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    42a4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    42a8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    42ac:	4f14      	ldr	r7, [pc, #80]	; (4300 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    42ae:	707e      	strb	r6, [r7, #1]
    42b0:	88a0      	ldrh	r0, [r4, #4]
    42b2:	81b8      	strh	r0, [r7, #12]
    42b4:	f008 f920 	bl	c4f8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    42b8:	2501      	movs	r5, #1
    42ba:	b108      	cbz	r0, 42c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    42bc:	70fd      	strb	r5, [r7, #3]
    42be:	707d      	strb	r5, [r7, #1]
    42c0:	2101      	movs	r1, #1
    42c2:	4640      	mov	r0, r8
    42c4:	f008 f90a 	bl	c4dc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42c8:	b108      	cbz	r0, 42ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    42ca:	f000 f895 	bl	43f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    42ce:	4620      	mov	r0, r4
    42d0:	f7ff fe7c 	bl	3fcc <MPSL_IRQ_CLOCK_Handler+0x1d8>
    42d4:	727d      	strb	r5, [r7, #9]
    42d6:	2000      	movs	r0, #0
    42d8:	f008 f8b9 	bl	c44e <MPSL_IRQ_RADIO_Handler+0x4>
    42dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    42e0:	4630      	mov	r0, r6
    42e2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    42e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42ea:	2900      	cmp	r1, #0
    42ec:	d0fb      	beq.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42ee:	2920      	cmp	r1, #32
    42f0:	d8f9      	bhi.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42f2:	78a1      	ldrb	r1, [r4, #2]
    42f4:	2921      	cmp	r1, #33	; 0x21
    42f6:	d8f6      	bhi.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42f8:	2901      	cmp	r1, #1
    42fa:	d1c2      	bne.n	4282 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    42fc:	e7f3      	b.n	42e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    42fe:	0000      	.short	0x0000
    4300:	2000002c 	.word	0x2000002c

00004304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4304:	4801      	ldr	r0, [pc, #4]	; (430c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4306:	8980      	ldrh	r0, [r0, #12]
    4308:	4770      	bx	lr
    430a:	0000      	.short	0x0000
    430c:	2000002c 	.word	0x2000002c

00004310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4310:	b510      	push	{r4, lr}
    4312:	480d      	ldr	r0, [pc, #52]	; (4348 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4314:	f008 f951 	bl	c5ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4318:	490b      	ldr	r1, [pc, #44]	; (4348 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    431a:	3908      	subs	r1, #8
    431c:	b148      	cbz	r0, 4332 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    431e:	2001      	movs	r0, #1
    4320:	7008      	strb	r0, [r1, #0]
    4322:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4326:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    432e:	f7ff bf2f 	b.w	4190 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4332:	7a88      	ldrb	r0, [r1, #10]
    4334:	2802      	cmp	r0, #2
    4336:	d101      	bne.n	433c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4338:	f7ff fda0 	bl	3e7c <MPSL_IRQ_CLOCK_Handler+0x88>
    433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4340:	4801      	ldr	r0, [pc, #4]	; (4348 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4342:	f008 b951 	b.w	c5e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4346:	0000      	.short	0x0000
    4348:	20000034 	.word	0x20000034

0000434c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    434c:	4802      	ldr	r0, [pc, #8]	; (4358 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    434e:	7a80      	ldrb	r0, [r0, #10]
    4350:	2800      	cmp	r0, #0
    4352:	d000      	beq.n	4356 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4354:	2001      	movs	r0, #1
    4356:	4770      	bx	lr
    4358:	2000002c 	.word	0x2000002c

0000435c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    435e:	4d1f      	ldr	r5, [pc, #124]	; (43dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4360:	7ae8      	ldrb	r0, [r5, #11]
    4362:	2800      	cmp	r0, #0
    4364:	d10f      	bne.n	4386 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4366:	7e28      	ldrb	r0, [r5, #24]
    4368:	f000 0003 	and.w	r0, r0, #3
    436c:	f008 f8d2 	bl	c514 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4370:	2800      	cmp	r0, #0
    4372:	d008      	beq.n	4386 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4374:	f3ef 8110 	mrs	r1, PRIMASK
    4378:	b672      	cpsid	i
    437a:	f7ff ffe7 	bl	434c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    437e:	b118      	cbz	r0, 4388 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4380:	2900      	cmp	r1, #0
    4382:	d100      	bne.n	4386 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4384:	b662      	cpsie	i
    4386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4388:	2601      	movs	r6, #1
    438a:	72ae      	strb	r6, [r5, #10]
    438c:	b901      	cbnz	r1, 4390 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    438e:	b662      	cpsie	i
    4390:	2018      	movs	r0, #24
    4392:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4396:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    439a:	61a6      	str	r6, [r4, #24]
    439c:	f44f 7020 	mov.w	r0, #640	; 0x280
    43a0:	f8ad 0000 	strh.w	r0, [sp]
    43a4:	f8bd 0000 	ldrh.w	r0, [sp]
    43a8:	1e41      	subs	r1, r0, #1
    43aa:	f8ad 1000 	strh.w	r1, [sp]
    43ae:	d2f9      	bcs.n	43a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    43b0:	2700      	movs	r7, #0
    43b2:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    43b6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    43ba:	4808      	ldr	r0, [pc, #32]	; (43dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    43bc:	3008      	adds	r0, #8
    43be:	f008 f90f 	bl	c5e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    43c2:	702f      	strb	r7, [r5, #0]
    43c4:	f7ff fd5a 	bl	3e7c <MPSL_IRQ_CLOCK_Handler+0x88>
    43c8:	6166      	str	r6, [r4, #20]
    43ca:	7968      	ldrb	r0, [r5, #5]
    43cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    43d0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    43d4:	2018      	movs	r0, #24
    43d6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    43da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43dc:	2000002c 	.word	0x2000002c

000043e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    43e0:	b510      	push	{r4, lr}
    43e2:	4c04      	ldr	r4, [pc, #16]	; (43f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    43e4:	7e20      	ldrb	r0, [r4, #24]
    43e6:	f000 0003 	and.w	r0, r0, #3
    43ea:	f008 f893 	bl	c514 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    43ee:	2800      	cmp	r0, #0
    43f0:	d0f8      	beq.n	43e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    43f2:	bd10      	pop	{r4, pc}
    43f4:	2000002c 	.word	0x2000002c

000043f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    43f8:	4901      	ldr	r1, [pc, #4]	; (4400 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    43fa:	2001      	movs	r0, #1
    43fc:	7008      	strb	r0, [r1, #0]
    43fe:	4770      	bx	lr
    4400:	20000290 	.word	0x20000290

00004404 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4408:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    440c:	b918      	cbnz	r0, 4416 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    440e:	4803      	ldr	r0, [pc, #12]	; (441c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4410:	7800      	ldrb	r0, [r0, #0]
    4412:	2800      	cmp	r0, #0
    4414:	d000      	beq.n	4418 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4416:	2001      	movs	r0, #1
    4418:	4770      	bx	lr
    441a:	0000      	.short	0x0000
    441c:	20000290 	.word	0x20000290

00004420 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4420:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4424:	2101      	movs	r1, #1
    4426:	6041      	str	r1, [r0, #4]
    4428:	2100      	movs	r1, #0
    442a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    442e:	4801      	ldr	r0, [pc, #4]	; (4434 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4430:	7001      	strb	r1, [r0, #0]
    4432:	4770      	bx	lr
    4434:	20000290 	.word	0x20000290

00004438 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4438:	4802      	ldr	r0, [pc, #8]	; (4444 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    443a:	6800      	ldr	r0, [r0, #0]
    443c:	f000 0003 	and.w	r0, r0, #3
    4440:	4770      	bx	lr
    4442:	0000      	.short	0x0000
    4444:	4000041c 	.word	0x4000041c
    4448:	b510      	push	{r4, lr}
    444a:	b131      	cbz	r1, 445a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    444c:	2901      	cmp	r1, #1
    444e:	d007      	beq.n	4460 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4450:	f240 3102 	movw	r1, #770	; 0x302
    4454:	a005      	add	r0, pc, #20	; (adr r0, 446c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4456:	f000 f821 	bl	449c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    445a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    445e:	e001      	b.n	4464 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    4460:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4464:	f000 0001 	and.w	r0, r0, #1
    4468:	bd10      	pop	{r4, pc}
    446a:	0000      	.short	0x0000
    446c:	5f66726e 	.word	0x5f66726e
    4470:	636f6c63 	.word	0x636f6c63
    4474:	00682e6b 	.word	0x00682e6b
    4478:	f3bf 8f4f 	dsb	sy
    447c:	4805      	ldr	r0, [pc, #20]	; (4494 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    447e:	6801      	ldr	r1, [r0, #0]
    4480:	4a05      	ldr	r2, [pc, #20]	; (4498 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    4482:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4486:	4311      	orrs	r1, r2
    4488:	6001      	str	r1, [r0, #0]
    448a:	f3bf 8f4f 	dsb	sy
    448e:	bf00      	nop
    4490:	e7fd      	b.n	448e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    4492:	0000      	.short	0x0000
    4494:	e000ed0c 	.word	0xe000ed0c
    4498:	05fa0004 	.word	0x05fa0004

0000449c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    449c:	b672      	cpsid	i
    449e:	4a03      	ldr	r2, [pc, #12]	; (44ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    44a0:	6852      	ldr	r2, [r2, #4]
    44a2:	b102      	cbz	r2, 44a6 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    44a4:	4790      	blx	r2
    44a6:	f7ff ffe7 	bl	4478 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    44aa:	0000      	.short	0x0000
    44ac:	2000004c 	.word	0x2000004c
    44b0:	4806      	ldr	r0, [pc, #24]	; (44cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    44b2:	b510      	push	{r4, lr}
    44b4:	2100      	movs	r1, #0
    44b6:	6001      	str	r1, [r0, #0]
    44b8:	2101      	movs	r1, #1
    44ba:	6001      	str	r1, [r0, #0]
    44bc:	4608      	mov	r0, r1
    44be:	f008 f850 	bl	c562 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    44c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44c6:	2001      	movs	r0, #1
    44c8:	f008 b83e 	b.w	c548 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    44cc:	40001ffc 	.word	0x40001ffc
    44d0:	4807      	ldr	r0, [pc, #28]	; (44f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    44d2:	b510      	push	{r4, lr}
    44d4:	2101      	movs	r1, #1
    44d6:	6041      	str	r1, [r0, #4]
    44d8:	1e89      	subs	r1, r1, #2
    44da:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    44de:	200c      	movs	r0, #12
    44e0:	f008 f83f 	bl	c562 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    44e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    44e8:	200c      	movs	r0, #12
    44ea:	f008 b82d 	b.w	c548 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    44ee:	0000      	.short	0x0000
    44f0:	4000c000 	.word	0x4000c000

000044f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    44f4:	b50e      	push	{r1, r2, r3, lr}
    44f6:	b672      	cpsid	i
    44f8:	4a0f      	ldr	r2, [pc, #60]	; (4538 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    44fa:	6855      	ldr	r5, [r2, #4]
    44fc:	b1d5      	cbz	r5, 4534 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    44fe:	2200      	movs	r2, #0
    4500:	4603      	mov	r3, r0
    4502:	466e      	mov	r6, sp
    4504:	240a      	movs	r4, #10
    4506:	e003      	b.n	4510 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4508:	fbb0 f0f4 	udiv	r0, r0, r4
    450c:	1c52      	adds	r2, r2, #1
    450e:	b2d2      	uxtb	r2, r2
    4510:	2800      	cmp	r0, #0
    4512:	d1f9      	bne.n	4508 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4514:	54b0      	strb	r0, [r6, r2]
    4516:	e009      	b.n	452c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4518:	fbb3 f0f4 	udiv	r0, r3, r4
    451c:	fb04 3010 	mls	r0, r4, r0, r3
    4520:	fbb3 f3f4 	udiv	r3, r3, r4
    4524:	1e52      	subs	r2, r2, #1
    4526:	b2d2      	uxtb	r2, r2
    4528:	3030      	adds	r0, #48	; 0x30
    452a:	54b0      	strb	r0, [r6, r2]
    452c:	2a00      	cmp	r2, #0
    452e:	d1f3      	bne.n	4518 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4530:	4630      	mov	r0, r6
    4532:	47a8      	blx	r5
    4534:	f7ff ffa0 	bl	4478 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4538:	2000004c 	.word	0x2000004c

0000453c <mpsl_init>:
    453c:	b570      	push	{r4, r5, r6, lr}
    453e:	4c17      	ldr	r4, [pc, #92]	; (459c <mpsl_init+0x60>)
    4540:	4606      	mov	r6, r0
    4542:	460d      	mov	r5, r1
    4544:	7860      	ldrb	r0, [r4, #1]
    4546:	b110      	cbz	r0, 454e <mpsl_init+0x12>
    4548:	f04f 30ff 	mov.w	r0, #4294967295
    454c:	bd70      	pop	{r4, r5, r6, pc}
    454e:	b906      	cbnz	r6, 4552 <mpsl_init+0x16>
    4550:	4e13      	ldr	r6, [pc, #76]	; (45a0 <mpsl_init+0x64>)
    4552:	6062      	str	r2, [r4, #4]
    4554:	7025      	strb	r5, [r4, #0]
    4556:	f7ff ffab 	bl	44b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    455a:	f7ff ffb9 	bl	44d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    455e:	4630      	mov	r0, r6
    4560:	f7ff fe7e 	bl	4260 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4564:	0006      	movs	r6, r0
    4566:	d1f1      	bne.n	454c <mpsl_init+0x10>
    4568:	f7fe fed8 	bl	331c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    456c:	f7ff fef6 	bl	435c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4570:	f007 ff44 	bl	c3fc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4574:	4628      	mov	r0, r5
    4576:	f007 ffe7 	bl	c548 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    457a:	2001      	movs	r0, #1
    457c:	2d00      	cmp	r5, #0
    457e:	db09      	blt.n	4594 <mpsl_init+0x58>
    4580:	f005 011f 	and.w	r1, r5, #31
    4584:	fa00 f101 	lsl.w	r1, r0, r1
    4588:	096a      	lsrs	r2, r5, #5
    458a:	0092      	lsls	r2, r2, #2
    458c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4590:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4594:	7060      	strb	r0, [r4, #1]
    4596:	4630      	mov	r0, r6
    4598:	bd70      	pop	{r4, r5, r6, pc}
    459a:	0000      	.short	0x0000
    459c:	2000004c 	.word	0x2000004c
    45a0:	0000c584 	.word	0x0000c584

000045a4 <mpsl_is_initialized>:
    45a4:	4801      	ldr	r0, [pc, #4]	; (45ac <mpsl_is_initialized+0x8>)
    45a6:	7840      	ldrb	r0, [r0, #1]
    45a8:	4770      	bx	lr
    45aa:	0000      	.short	0x0000
    45ac:	2000004c 	.word	0x2000004c

000045b0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    45b0:	4807      	ldr	r0, [pc, #28]	; (45d0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    45b2:	f990 0000 	ldrsb.w	r0, [r0]
    45b6:	2800      	cmp	r0, #0
    45b8:	db09      	blt.n	45ce <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    45ba:	f000 021f 	and.w	r2, r0, #31
    45be:	2101      	movs	r1, #1
    45c0:	4091      	lsls	r1, r2
    45c2:	0940      	lsrs	r0, r0, #5
    45c4:	0080      	lsls	r0, r0, #2
    45c6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    45ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    45ce:	4770      	bx	lr
    45d0:	2000004c 	.word	0x2000004c

000045d4 <mpsl_temperature_get>:
    45d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45d8:	2601      	movs	r6, #1
    45da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    45de:	0331      	lsls	r1, r6, #12
    45e0:	f04f 0800 	mov.w	r8, #0
    45e4:	4640      	mov	r0, r8
    45e6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    45ea:	f3bf 8f4f 	dsb	sy
    45ee:	f3bf 8f6f 	isb	sy
    45f2:	4c16      	ldr	r4, [pc, #88]	; (464c <mpsl_temperature_get+0x78>)
    45f4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    45f8:	200c      	movs	r0, #12
    45fa:	f007 ffd1 	bl	c5a0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    45fe:	4d14      	ldr	r5, [pc, #80]	; (4650 <mpsl_temperature_get+0x7c>)
    4600:	6828      	ldr	r0, [r5, #0]
    4602:	43c0      	mvns	r0, r0
    4604:	f340 1700 	sbfx	r7, r0, #4, #1
    4608:	6828      	ldr	r0, [r5, #0]
    460a:	f040 0010 	orr.w	r0, r0, #16
    460e:	6028      	str	r0, [r5, #0]
    4610:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4614:	6026      	str	r6, [r4, #0]
    4616:	1c7f      	adds	r7, r7, #1
    4618:	e002      	b.n	4620 <mpsl_temperature_get+0x4c>
    461a:	bf00      	nop
    461c:	f000 f890 	bl	4740 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4620:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4624:	2800      	cmp	r0, #0
    4626:	d0f9      	beq.n	461c <mpsl_temperature_get+0x48>
    4628:	b91f      	cbnz	r7, 4632 <mpsl_temperature_get+0x5e>
    462a:	6828      	ldr	r0, [r5, #0]
    462c:	f020 0010 	bic.w	r0, r0, #16
    4630:	6028      	str	r0, [r5, #0]
    4632:	4808      	ldr	r0, [pc, #32]	; (4654 <mpsl_temperature_get+0x80>)
    4634:	6805      	ldr	r5, [r0, #0]
    4636:	6066      	str	r6, [r4, #4]
    4638:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    463c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4640:	200c      	movs	r0, #12
    4642:	f007 ffad 	bl	c5a0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4646:	4628      	mov	r0, r5
    4648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    464c:	4000c000 	.word	0x4000c000
    4650:	e000ed10 	.word	0xe000ed10
    4654:	4000c508 	.word	0x4000c508

00004658 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4658:	b510      	push	{r4, lr}
    465a:	4602      	mov	r2, r0
    465c:	2005      	movs	r0, #5
    465e:	490c      	ldr	r1, [pc, #48]	; (4690 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4660:	e004      	b.n	466c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4662:	bf00      	nop
    4664:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4668:	791b      	ldrb	r3, [r3, #4]
    466a:	b133      	cbz	r3, 467a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    466c:	1e40      	subs	r0, r0, #1
    466e:	b2c0      	uxtb	r0, r0
    4670:	d2f8      	bcs.n	4664 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4672:	2148      	movs	r1, #72	; 0x48
    4674:	2069      	movs	r0, #105	; 0x69
    4676:	f7ff ff3d 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    467a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    467e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4682:	2200      	movs	r2, #0
    4684:	714a      	strb	r2, [r1, #5]
    4686:	718a      	strb	r2, [r1, #6]
    4688:	2201      	movs	r2, #1
    468a:	710a      	strb	r2, [r1, #4]
    468c:	bd10      	pop	{r4, pc}
    468e:	0000      	.short	0x0000
    4690:	20001138 	.word	0x20001138

00004694 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4694:	b510      	push	{r4, lr}
    4696:	2805      	cmp	r0, #5
    4698:	d301      	bcc.n	469e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    469a:	2158      	movs	r1, #88	; 0x58
    469c:	e006      	b.n	46ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    469e:	490a      	ldr	r1, [pc, #40]	; (46c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    46a0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    46a4:	7901      	ldrb	r1, [r0, #4]
    46a6:	2901      	cmp	r1, #1
    46a8:	d003      	beq.n	46b2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    46aa:	2159      	movs	r1, #89	; 0x59
    46ac:	2069      	movs	r0, #105	; 0x69
    46ae:	f7ff ff21 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46b2:	7941      	ldrb	r1, [r0, #5]
    46b4:	7982      	ldrb	r2, [r0, #6]
    46b6:	1c49      	adds	r1, r1, #1
    46b8:	b2c9      	uxtb	r1, r1
    46ba:	428a      	cmp	r2, r1
    46bc:	d000      	beq.n	46c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    46be:	7141      	strb	r1, [r0, #5]
    46c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46c4:	f7ff bf74 	b.w	45b0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    46c8:	20001138 	.word	0x20001138

000046cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    46cc:	b570      	push	{r4, r5, r6, lr}
    46ce:	2505      	movs	r5, #5
    46d0:	4e0e      	ldr	r6, [pc, #56]	; (470c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    46d2:	4c0f      	ldr	r4, [pc, #60]	; (4710 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    46d4:	e016      	b.n	4704 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    46d6:	7821      	ldrb	r1, [r4, #0]
    46d8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    46dc:	7902      	ldrb	r2, [r0, #4]
    46de:	2a01      	cmp	r2, #1
    46e0:	d108      	bne.n	46f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    46e2:	7942      	ldrb	r2, [r0, #5]
    46e4:	7983      	ldrb	r3, [r0, #6]
    46e6:	429a      	cmp	r2, r3
    46e8:	d004      	beq.n	46f4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    46ea:	7942      	ldrb	r2, [r0, #5]
    46ec:	7182      	strb	r2, [r0, #6]
    46ee:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    46f2:	4780      	blx	r0
    46f4:	7820      	ldrb	r0, [r4, #0]
    46f6:	1c40      	adds	r0, r0, #1
    46f8:	b2c0      	uxtb	r0, r0
    46fa:	7020      	strb	r0, [r4, #0]
    46fc:	2805      	cmp	r0, #5
    46fe:	d301      	bcc.n	4704 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4700:	2000      	movs	r0, #0
    4702:	7020      	strb	r0, [r4, #0]
    4704:	1e6d      	subs	r5, r5, #1
    4706:	b2ed      	uxtb	r5, r5
    4708:	d2e5      	bcs.n	46d6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	20001138 	.word	0x20001138
    4710:	20000291 	.word	0x20000291

00004714 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4714:	b500      	push	{lr}
    4716:	f007 ff72 	bl	c5fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    471a:	b940      	cbnz	r0, 472e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    471c:	f007 ff79 	bl	c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4720:	b928      	cbnz	r0, 472e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4722:	f007 ff8d 	bl	c640 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4726:	b910      	cbnz	r0, 472e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4728:	f007 ff9e 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    472c:	b108      	cbz	r0, 4732 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    472e:	4802      	ldr	r0, [pc, #8]	; (4738 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4730:	bd00      	pop	{pc}
    4732:	4802      	ldr	r0, [pc, #8]	; (473c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4734:	bd00      	pop	{pc}
    4736:	0000      	.short	0x0000
    4738:	4000050c 	.word	0x4000050c
    473c:	4001e700 	.word	0x4001e700

00004740 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4740:	b510      	push	{r4, lr}
    4742:	f007 ff91 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4746:	b330      	cbz	r0, 4796 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4748:	f3ef 8010 	mrs	r0, PRIMASK
    474c:	b1c8      	cbz	r0, 4782 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    474e:	2100      	movs	r1, #0
    4750:	b672      	cpsid	i
    4752:	4812      	ldr	r0, [pc, #72]	; (479c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4754:	6802      	ldr	r2, [r0, #0]
    4756:	6803      	ldr	r3, [r0, #0]
    4758:	f3c2 1200 	ubfx	r2, r2, #4, #1
    475c:	f043 0310 	orr.w	r3, r3, #16
    4760:	6003      	str	r3, [r0, #0]
    4762:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4766:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    476a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    476e:	431c      	orrs	r4, r3
    4770:	d000      	beq.n	4774 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4772:	bf40      	sev
    4774:	bf20      	wfe
    4776:	bf00      	nop
    4778:	bf00      	nop
    477a:	bf00      	nop
    477c:	bf00      	nop
    477e:	b112      	cbz	r2, 4786 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4780:	e005      	b.n	478e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4782:	2101      	movs	r1, #1
    4784:	e7e4      	b.n	4750 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4786:	6802      	ldr	r2, [r0, #0]
    4788:	f022 0210 	bic.w	r2, r2, #16
    478c:	6002      	str	r2, [r0, #0]
    478e:	2900      	cmp	r1, #0
    4790:	d000      	beq.n	4794 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4792:	b662      	cpsie	i
    4794:	bd10      	pop	{r4, pc}
    4796:	bf20      	wfe
    4798:	bd10      	pop	{r4, pc}
    479a:	0000      	.short	0x0000
    479c:	e000ed10 	.word	0xe000ed10

000047a0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    47a0:	0000c8d9 0000c8f5 0000c8e3 0000c8ef     ................
    47b0:	0000c8dd 0000c8d7 0000c8d5 0000c8fb     ................
    47c0:	0000c8e9 0000c8cf 0000c8c7 0000c8cb     ................
    47d0:	0000c8c1                                ....

000047d4 <mpsl_fem_disable>:
    47d4:	4801      	ldr	r0, [pc, #4]	; (47dc <mpsl_fem_disable+0x8>)
    47d6:	6800      	ldr	r0, [r0, #0]
    47d8:	6800      	ldr	r0, [r0, #0]
    47da:	4700      	bx	r0
    47dc:	20000054 	.word	0x20000054

000047e0 <mpsl_fem_lna_configuration_clear>:
    47e0:	4801      	ldr	r0, [pc, #4]	; (47e8 <mpsl_fem_lna_configuration_clear+0x8>)
    47e2:	6800      	ldr	r0, [r0, #0]
    47e4:	6900      	ldr	r0, [r0, #16]
    47e6:	4700      	bx	r0
    47e8:	20000054 	.word	0x20000054

000047ec <mpsl_fem_lna_configuration_set>:
    47ec:	4a01      	ldr	r2, [pc, #4]	; (47f4 <mpsl_fem_lna_configuration_set+0x8>)
    47ee:	6812      	ldr	r2, [r2, #0]
    47f0:	6892      	ldr	r2, [r2, #8]
    47f2:	4710      	bx	r2
    47f4:	20000054 	.word	0x20000054

000047f8 <mpsl_fem_pa_configuration_clear>:
    47f8:	4801      	ldr	r0, [pc, #4]	; (4800 <mpsl_fem_pa_configuration_clear+0x8>)
    47fa:	6800      	ldr	r0, [r0, #0]
    47fc:	68c0      	ldr	r0, [r0, #12]
    47fe:	4700      	bx	r0
    4800:	20000054 	.word	0x20000054

00004804 <mpsl_fem_pa_configuration_set>:
    4804:	4a01      	ldr	r2, [pc, #4]	; (480c <mpsl_fem_pa_configuration_set+0x8>)
    4806:	6812      	ldr	r2, [r2, #0]
    4808:	6852      	ldr	r2, [r2, #4]
    480a:	4710      	bx	r2
    480c:	20000054 	.word	0x20000054

00004810 <mpsl_fem_pa_is_configured>:
    4810:	4901      	ldr	r1, [pc, #4]	; (4818 <mpsl_fem_pa_is_configured+0x8>)
    4812:	6809      	ldr	r1, [r1, #0]
    4814:	6a09      	ldr	r1, [r1, #32]
    4816:	4708      	bx	r1
    4818:	20000054 	.word	0x20000054

0000481c <mpsl_fem_device_config_254_apply_get>:
    481c:	4801      	ldr	r0, [pc, #4]	; (4824 <mpsl_fem_device_config_254_apply_get+0x8>)
    481e:	7800      	ldrb	r0, [r0, #0]
    4820:	4770      	bx	lr
    4822:	0000      	.short	0x0000
    4824:	20000292 	.word	0x20000292
    4828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    482a:	4c17      	ldr	r4, [pc, #92]	; (4888 <mpsl_fem_device_config_254_apply_get+0x6c>)
    482c:	7a20      	ldrb	r0, [r4, #8]
    482e:	2802      	cmp	r0, #2
    4830:	d200      	bcs.n	4834 <mpsl_fem_device_config_254_apply_get+0x18>
    4832:	2002      	movs	r0, #2
    4834:	f88d 0001 	strb.w	r0, [sp, #1]
    4838:	79e0      	ldrb	r0, [r4, #7]
    483a:	2803      	cmp	r0, #3
    483c:	d200      	bcs.n	4840 <mpsl_fem_device_config_254_apply_get+0x24>
    483e:	2003      	movs	r0, #3
    4840:	f88d 0000 	strb.w	r0, [sp]
    4844:	79a0      	ldrb	r0, [r4, #6]
    4846:	f8ad 0004 	strh.w	r0, [sp, #4]
    484a:	7960      	ldrb	r0, [r4, #5]
    484c:	f8ad 0002 	strh.w	r0, [sp, #2]
    4850:	4668      	mov	r0, sp
    4852:	f006 f95b 	bl	ab0c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4856:	b108      	cbz	r0, 485c <mpsl_fem_device_config_254_apply_get+0x40>
    4858:	2184      	movs	r1, #132	; 0x84
    485a:	e010      	b.n	487e <mpsl_fem_device_config_254_apply_get+0x62>
    485c:	68e0      	ldr	r0, [r4, #12]
    485e:	9002      	str	r0, [sp, #8]
    4860:	a802      	add	r0, sp, #8
    4862:	f006 f969 	bl	ab38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4866:	b108      	cbz	r0, 486c <mpsl_fem_device_config_254_apply_get+0x50>
    4868:	2188      	movs	r1, #136	; 0x88
    486a:	e008      	b.n	487e <mpsl_fem_device_config_254_apply_get+0x62>
    486c:	4807      	ldr	r0, [pc, #28]	; (488c <mpsl_fem_device_config_254_apply_get+0x70>)
    486e:	6800      	ldr	r0, [r0, #0]
    4870:	9003      	str	r0, [sp, #12]
    4872:	a803      	add	r0, sp, #12
    4874:	f00b f915 	bl	faa2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4878:	2800      	cmp	r0, #0
    487a:	d003      	beq.n	4884 <mpsl_fem_device_config_254_apply_get+0x68>
    487c:	218c      	movs	r1, #140	; 0x8c
    487e:	2003      	movs	r0, #3
    4880:	f000 f8e4 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4884:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4886:	0000      	.short	0x0000
    4888:	20001160 	.word	0x20001160
    488c:	00004b34 	.word	0x00004b34

00004890 <sdc_build_revision_get>:
    4890:	b510      	push	{r4, lr}
    4892:	b128      	cbz	r0, 48a0 <sdc_build_revision_get+0x10>
    4894:	2214      	movs	r2, #20
    4896:	4904      	ldr	r1, [pc, #16]	; (48a8 <sdc_build_revision_get+0x18>)
    4898:	f007 ff38 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    489c:	2000      	movs	r0, #0
    489e:	bd10      	pop	{r4, pc}
    48a0:	f06f 0015 	mvn.w	r0, #21
    48a4:	bd10      	pop	{r4, pc}
    48a6:	0000      	.short	0x0000
    48a8:	00004b50 	.word	0x00004b50

000048ac <sdc_cfg_set>:
    48ac:	b570      	push	{r4, r5, r6, lr}
    48ae:	0003      	movs	r3, r0
    48b0:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    48b4:	d103      	bne.n	48be <sdc_cfg_set+0x12>
    48b6:	4c29      	ldr	r4, [pc, #164]	; (495c <sdc_cfg_set+0xb0>)
    48b8:	7863      	ldrb	r3, [r4, #1]
    48ba:	b10b      	cbz	r3, 48c0 <sdc_cfg_set+0x14>
    48bc:	1180      	asrs	r0, r0, #6
    48be:	bd70      	pop	{r4, r5, r6, pc}
    48c0:	b309      	cbz	r1, 4906 <sdc_cfg_set+0x5a>
    48c2:	f06f 0515 	mvn.w	r5, #21
    48c6:	b37a      	cbz	r2, 4928 <sdc_cfg_set+0x7c>
    48c8:	4b25      	ldr	r3, [pc, #148]	; (4960 <sdc_cfg_set+0xb4>)
    48ca:	290c      	cmp	r1, #12
    48cc:	d241      	bcs.n	4952 <sdc_cfg_set+0xa6>
    48ce:	e8df f001 	tbb	[pc, r1]
    48d2:	0640      	.short	0x0640
    48d4:	13100c09 	.word	0x13100c09
    48d8:	2616231b 	.word	0x2616231b
    48dc:	312c      	.short	0x312c
    48de:	7810      	ldrb	r0, [r2, #0]
    48e0:	7018      	strb	r0, [r3, #0]
    48e2:	e02b      	b.n	493c <sdc_cfg_set+0x90>
    48e4:	7810      	ldrb	r0, [r2, #0]
    48e6:	7058      	strb	r0, [r3, #1]
    48e8:	e028      	b.n	493c <sdc_cfg_set+0x90>
    48ea:	6810      	ldr	r0, [r2, #0]
    48ec:	f8c3 0005 	str.w	r0, [r3, #5]
    48f0:	e024      	b.n	493c <sdc_cfg_set+0x90>
    48f2:	6810      	ldr	r0, [r2, #0]
    48f4:	60d8      	str	r0, [r3, #12]
    48f6:	e021      	b.n	493c <sdc_cfg_set+0x90>
    48f8:	7810      	ldrb	r0, [r2, #0]
    48fa:	7098      	strb	r0, [r3, #2]
    48fc:	e01e      	b.n	493c <sdc_cfg_set+0x90>
    48fe:	7811      	ldrb	r1, [r2, #0]
    4900:	2900      	cmp	r1, #0
    4902:	d1dc      	bne.n	48be <sdc_cfg_set+0x12>
    4904:	70d9      	strb	r1, [r3, #3]
    4906:	e019      	b.n	493c <sdc_cfg_set+0x90>
    4908:	78e0      	ldrb	r0, [r4, #3]
    490a:	b110      	cbz	r0, 4912 <sdc_cfg_set+0x66>
    490c:	7810      	ldrb	r0, [r2, #0]
    490e:	2802      	cmp	r0, #2
    4910:	d31f      	bcc.n	4952 <sdc_cfg_set+0xa6>
    4912:	7810      	ldrb	r0, [r2, #0]
    4914:	7418      	strb	r0, [r3, #16]
    4916:	e011      	b.n	493c <sdc_cfg_set+0x90>
    4918:	8810      	ldrh	r0, [r2, #0]
    491a:	8258      	strh	r0, [r3, #18]
    491c:	e00e      	b.n	493c <sdc_cfg_set+0x90>
    491e:	7811      	ldrb	r1, [r2, #0]
    4920:	2900      	cmp	r1, #0
    4922:	d1cc      	bne.n	48be <sdc_cfg_set+0x12>
    4924:	7119      	strb	r1, [r3, #4]
    4926:	e009      	b.n	493c <sdc_cfg_set+0x90>
    4928:	e013      	b.n	4952 <sdc_cfg_set+0xa6>
    492a:	7810      	ldrb	r0, [r2, #0]
    492c:	2802      	cmp	r0, #2
    492e:	d310      	bcc.n	4952 <sdc_cfg_set+0xa6>
    4930:	7518      	strb	r0, [r3, #20]
    4932:	e003      	b.n	493c <sdc_cfg_set+0x90>
    4934:	7811      	ldrb	r1, [r2, #0]
    4936:	2900      	cmp	r1, #0
    4938:	d1c1      	bne.n	48be <sdc_cfg_set+0x12>
    493a:	7559      	strb	r1, [r3, #21]
    493c:	2201      	movs	r2, #1
    493e:	4908      	ldr	r1, [pc, #32]	; (4960 <sdc_cfg_set+0xb4>)
    4940:	2000      	movs	r0, #0
    4942:	f007 ffdc 	bl	c8fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4946:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    494a:	db04      	blt.n	4956 <sdc_cfg_set+0xaa>
    494c:	f06f 000b 	mvn.w	r0, #11
    4950:	bd70      	pop	{r4, r5, r6, pc}
    4952:	4628      	mov	r0, r5
    4954:	bd70      	pop	{r4, r5, r6, pc}
    4956:	2101      	movs	r1, #1
    4958:	70a1      	strb	r1, [r4, #2]
    495a:	bd70      	pop	{r4, r5, r6, pc}
    495c:	20000058 	.word	0x20000058
    4960:	20001160 	.word	0x20001160

00004964 <sdc_enable>:
    4964:	b570      	push	{r4, r5, r6, lr}
    4966:	460c      	mov	r4, r1
    4968:	0005      	movs	r5, r0
    496a:	d019      	beq.n	49a0 <sdc_enable+0x3c>
    496c:	b1c4      	cbz	r4, 49a0 <sdc_enable+0x3c>
    496e:	f000 f915 	bl	4b9c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4972:	b1c0      	cbz	r0, 49a6 <sdc_enable+0x42>
    4974:	4628      	mov	r0, r5
    4976:	f7ff fe6f 	bl	4658 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    497a:	4d0c      	ldr	r5, [pc, #48]	; (49ac <sdc_enable+0x48>)
    497c:	2200      	movs	r2, #0
    497e:	490c      	ldr	r1, [pc, #48]	; (49b0 <sdc_enable+0x4c>)
    4980:	7028      	strb	r0, [r5, #0]
    4982:	4620      	mov	r0, r4
    4984:	f007 ffbb 	bl	c8fe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4988:	f00b fcf4 	bl	10374 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    498c:	2100      	movs	r1, #0
    498e:	7828      	ldrb	r0, [r5, #0]
    4990:	f006 fb12 	bl	afb8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4994:	f7ff ff48 	bl	4828 <mpsl_fem_device_config_254_apply_get+0xc>
    4998:	2001      	movs	r0, #1
    499a:	7068      	strb	r0, [r5, #1]
    499c:	2000      	movs	r0, #0
    499e:	bd70      	pop	{r4, r5, r6, pc}
    49a0:	f06f 0015 	mvn.w	r0, #21
    49a4:	bd70      	pop	{r4, r5, r6, pc}
    49a6:	f04f 30ff 	mov.w	r0, #4294967295
    49aa:	bd70      	pop	{r4, r5, r6, pc}
    49ac:	20000058 	.word	0x20000058
    49b0:	20001160 	.word	0x20001160

000049b4 <sdc_init>:
    49b4:	b530      	push	{r4, r5, lr}
    49b6:	b087      	sub	sp, #28
    49b8:	0005      	movs	r5, r0
    49ba:	d00c      	beq.n	49d6 <sdc_init+0x22>
    49bc:	f7ff fdf2 	bl	45a4 <mpsl_is_initialized>
    49c0:	f04f 34ff 	mov.w	r4, #4294967295
    49c4:	b120      	cbz	r0, 49d0 <sdc_init+0x1c>
    49c6:	f7ff fc9d 	bl	4304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    49ca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    49ce:	d905      	bls.n	49dc <sdc_init+0x28>
    49d0:	4620      	mov	r0, r4
    49d2:	b007      	add	sp, #28
    49d4:	bd30      	pop	{r4, r5, pc}
    49d6:	f06f 0015 	mvn.w	r0, #21
    49da:	e7fa      	b.n	49d2 <sdc_init+0x1e>
    49dc:	4c15      	ldr	r4, [pc, #84]	; (4a34 <sdc_init+0x80>)
    49de:	4816      	ldr	r0, [pc, #88]	; (4a38 <sdc_init+0x84>)
    49e0:	6065      	str	r5, [r4, #4]
    49e2:	f000 f9eb 	bl	4dbc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    49e6:	2000      	movs	r0, #0
    49e8:	7060      	strb	r0, [r4, #1]
    49ea:	70a0      	strb	r0, [r4, #2]
    49ec:	70e0      	strb	r0, [r4, #3]
    49ee:	4601      	mov	r1, r0
    49f0:	2218      	movs	r2, #24
    49f2:	4668      	mov	r0, sp
    49f4:	f007 ff04 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    49f8:	2218      	movs	r2, #24
    49fa:	4910      	ldr	r1, [pc, #64]	; (4a3c <sdc_init+0x88>)
    49fc:	4668      	mov	r0, sp
    49fe:	f007 fe85 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a02:	2218      	movs	r2, #24
    4a04:	4669      	mov	r1, sp
    4a06:	480e      	ldr	r0, [pc, #56]	; (4a40 <sdc_init+0x8c>)
    4a08:	f007 fe80 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4a0c:	f3ef 8410 	mrs	r4, PRIMASK
    4a10:	b672      	cpsid	i
    4a12:	480c      	ldr	r0, [pc, #48]	; (4a44 <sdc_init+0x90>)
    4a14:	f06f 010c 	mvn.w	r1, #12
    4a18:	f000 fd9e 	bl	5558 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4a1c:	480a      	ldr	r0, [pc, #40]	; (4a48 <sdc_init+0x94>)
    4a1e:	f000 fe6b 	bl	56f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4a22:	b118      	cbz	r0, 4a2c <sdc_init+0x78>
    4a24:	219a      	movs	r1, #154	; 0x9a
    4a26:	2003      	movs	r0, #3
    4a28:	f000 f810 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a2c:	b904      	cbnz	r4, 4a30 <sdc_init+0x7c>
    4a2e:	b662      	cpsie	i
    4a30:	2000      	movs	r0, #0
    4a32:	e7ce      	b.n	49d2 <sdc_init+0x1e>
    4a34:	20000058 	.word	0x20000058
    4a38:	00004829 	.word	0x00004829
    4a3c:	00004b38 	.word	0x00004b38
    4a40:	20001160 	.word	0x20001160
    4a44:	4000c000 	.word	0x4000c000
    4a48:	00004bc9 	.word	0x00004bc9

00004a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4a4c:	b50e      	push	{r1, r2, r3, lr}
    4a4e:	b672      	cpsid	i
    4a50:	4a15      	ldr	r2, [pc, #84]	; (4aa8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4a52:	6855      	ldr	r5, [r2, #4]
    4a54:	b1d5      	cbz	r5, 4a8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4a56:	2200      	movs	r2, #0
    4a58:	4603      	mov	r3, r0
    4a5a:	466e      	mov	r6, sp
    4a5c:	240a      	movs	r4, #10
    4a5e:	e003      	b.n	4a68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4a60:	fbb0 f0f4 	udiv	r0, r0, r4
    4a64:	1c52      	adds	r2, r2, #1
    4a66:	b2d2      	uxtb	r2, r2
    4a68:	2800      	cmp	r0, #0
    4a6a:	d1f9      	bne.n	4a60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4a6c:	54b0      	strb	r0, [r6, r2]
    4a6e:	e009      	b.n	4a84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4a70:	fbb3 f0f4 	udiv	r0, r3, r4
    4a74:	fb04 3010 	mls	r0, r4, r0, r3
    4a78:	fbb3 f3f4 	udiv	r3, r3, r4
    4a7c:	1e52      	subs	r2, r2, #1
    4a7e:	b2d2      	uxtb	r2, r2
    4a80:	3030      	adds	r0, #48	; 0x30
    4a82:	54b0      	strb	r0, [r6, r2]
    4a84:	2a00      	cmp	r2, #0
    4a86:	d1f3      	bne.n	4a70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4a88:	4630      	mov	r0, r6
    4a8a:	47a8      	blx	r5
    4a8c:	f3bf 8f4f 	dsb	sy
    4a90:	4806      	ldr	r0, [pc, #24]	; (4aac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4a92:	6801      	ldr	r1, [r0, #0]
    4a94:	4a06      	ldr	r2, [pc, #24]	; (4ab0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4a96:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4a9a:	4311      	orrs	r1, r2
    4a9c:	6001      	str	r1, [r0, #0]
    4a9e:	f3bf 8f4f 	dsb	sy
    4aa2:	bf00      	nop
    4aa4:	e7fd      	b.n	4aa2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4aa6:	0000      	.short	0x0000
    4aa8:	20000058 	.word	0x20000058
    4aac:	e000ed0c 	.word	0xe000ed0c
    4ab0:	05fa0004 	.word	0x05fa0004

00004ab4 <sdc_support_adv>:
    4ab4:	4806      	ldr	r0, [pc, #24]	; (4ad0 <sdc_support_adv+0x1c>)
    4ab6:	b510      	push	{r4, lr}
    4ab8:	7881      	ldrb	r1, [r0, #2]
    4aba:	7840      	ldrb	r0, [r0, #1]
    4abc:	4301      	orrs	r1, r0
    4abe:	d002      	beq.n	4ac6 <sdc_support_adv+0x12>
    4ac0:	f04f 30ff 	mov.w	r0, #4294967295
    4ac4:	bd10      	pop	{r4, pc}
    4ac6:	f006 fa97 	bl	aff8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4aca:	2000      	movs	r0, #0
    4acc:	bd10      	pop	{r4, pc}
    4ace:	0000      	.short	0x0000
    4ad0:	20000058 	.word	0x20000058

00004ad4 <sdc_support_dle>:
    4ad4:	4806      	ldr	r0, [pc, #24]	; (4af0 <sdc_support_dle+0x1c>)
    4ad6:	b510      	push	{r4, lr}
    4ad8:	7881      	ldrb	r1, [r0, #2]
    4ada:	7840      	ldrb	r0, [r0, #1]
    4adc:	4301      	orrs	r1, r0
    4ade:	d002      	beq.n	4ae6 <sdc_support_dle+0x12>
    4ae0:	f04f 30ff 	mov.w	r0, #4294967295
    4ae4:	bd10      	pop	{r4, pc}
    4ae6:	f006 f83f 	bl	ab68 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4aea:	2000      	movs	r0, #0
    4aec:	bd10      	pop	{r4, pc}
    4aee:	0000      	.short	0x0000
    4af0:	20000058 	.word	0x20000058

00004af4 <sdc_support_le_2m_phy>:
    4af4:	4806      	ldr	r0, [pc, #24]	; (4b10 <sdc_support_le_2m_phy+0x1c>)
    4af6:	b510      	push	{r4, lr}
    4af8:	7881      	ldrb	r1, [r0, #2]
    4afa:	7840      	ldrb	r0, [r0, #1]
    4afc:	4301      	orrs	r1, r0
    4afe:	d002      	beq.n	4b06 <sdc_support_le_2m_phy+0x12>
    4b00:	f04f 30ff 	mov.w	r0, #4294967295
    4b04:	bd10      	pop	{r4, pc}
    4b06:	f00b f99c 	bl	fe42 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4b0a:	2000      	movs	r0, #0
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	0000      	.short	0x0000
    4b10:	20000058 	.word	0x20000058

00004b14 <sdc_support_slave>:
    4b14:	4806      	ldr	r0, [pc, #24]	; (4b30 <sdc_support_slave+0x1c>)
    4b16:	b510      	push	{r4, lr}
    4b18:	7881      	ldrb	r1, [r0, #2]
    4b1a:	7840      	ldrb	r0, [r0, #1]
    4b1c:	4301      	orrs	r1, r0
    4b1e:	d002      	beq.n	4b26 <sdc_support_slave+0x12>
    4b20:	f04f 30ff 	mov.w	r0, #4294967295
    4b24:	bd10      	pop	{r4, pc}
    4b26:	f006 fa79 	bl	b01c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4b2a:	2000      	movs	r0, #0
    4b2c:	bd10      	pop	{r4, pc}
    4b2e:	0000      	.short	0x0000
    4b30:	20000058 	.word	0x20000058
    4b34:	00000001 	.word	0x00000001
    4b38:	00010101 	.word	0x00010101
    4b3c:	031b1b00 	.word	0x031b1b00
    4b40:	00000002 	.word	0x00000002
    4b44:	00001d4c 	.word	0x00001d4c
    4b48:	001f0003 	.word	0x001f0003
    4b4c:	00000000 	.word	0x00000000
    4b50:	66c5e70e 	.word	0x66c5e70e
    4b54:	ac3c1867 	.word	0xac3c1867
    4b58:	81ccd2b3 	.word	0x81ccd2b3
    4b5c:	c0f1dca3 	.word	0xc0f1dca3
    4b60:	220236c0 	.word	0x220236c0

00004b64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4b64:	4a05      	ldr	r2, [pc, #20]	; (4b7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4b66:	b510      	push	{r4, lr}
    4b68:	6852      	ldr	r2, [r2, #4]
    4b6a:	b112      	cbz	r2, 4b72 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b70:	4710      	bx	r2
    4b72:	2183      	movs	r1, #131	; 0x83
    4b74:	2004      	movs	r0, #4
    4b76:	f7ff ff69 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b7a:	0000      	.short	0x0000
    4b7c:	20001178 	.word	0x20001178

00004b80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4b80:	4a05      	ldr	r2, [pc, #20]	; (4b98 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4b82:	b510      	push	{r4, lr}
    4b84:	6892      	ldr	r2, [r2, #8]
    4b86:	b112      	cbz	r2, 4b8e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b8c:	4710      	bx	r2
    4b8e:	2189      	movs	r1, #137	; 0x89
    4b90:	2004      	movs	r0, #4
    4b92:	f7ff ff5b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b96:	0000      	.short	0x0000
    4b98:	20001178 	.word	0x20001178

00004b9c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4b9c:	4805      	ldr	r0, [pc, #20]	; (4bb4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4b9e:	6801      	ldr	r1, [r0, #0]
    4ba0:	b129      	cbz	r1, 4bae <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ba2:	6841      	ldr	r1, [r0, #4]
    4ba4:	b119      	cbz	r1, 4bae <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ba6:	6880      	ldr	r0, [r0, #8]
    4ba8:	b108      	cbz	r0, 4bae <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4baa:	2001      	movs	r0, #1
    4bac:	4770      	bx	lr
    4bae:	2000      	movs	r0, #0
    4bb0:	4770      	bx	lr
    4bb2:	0000      	.short	0x0000
    4bb4:	20001178 	.word	0x20001178

00004bb8 <sdc_rand_source_register>:
    4bb8:	4902      	ldr	r1, [pc, #8]	; (4bc4 <sdc_rand_source_register+0xc>)
    4bba:	c80d      	ldmia	r0, {r0, r2, r3}
    4bbc:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4bc0:	2000      	movs	r0, #0
    4bc2:	4770      	bx	lr
    4bc4:	20001178 	.word	0x20001178

00004bc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bca:	4c12      	ldr	r4, [pc, #72]	; (4c14 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4bcc:	2600      	movs	r6, #0
    4bce:	6825      	ldr	r5, [r4, #0]
    4bd0:	e011      	b.n	4bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4bd2:	9800      	ldr	r0, [sp, #0]
    4bd4:	2802      	cmp	r0, #2
    4bd6:	d002      	beq.n	4bde <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4bd8:	2803      	cmp	r0, #3
    4bda:	d10c      	bne.n	4bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4bdc:	e006      	b.n	4bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4bde:	6820      	ldr	r0, [r4, #0]
    4be0:	b110      	cbz	r0, 4be8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4be2:	2000      	movs	r0, #0
    4be4:	6026      	str	r6, [r4, #0]
    4be6:	e005      	b.n	4bf4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4be8:	2128      	movs	r1, #40	; 0x28
    4bea:	e00c      	b.n	4c06 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4bec:	6820      	ldr	r0, [r4, #0]
    4bee:	b168      	cbz	r0, 4c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4bf0:	2001      	movs	r0, #1
    4bf2:	6026      	str	r6, [r4, #0]
    4bf4:	47a8      	blx	r5
    4bf6:	4668      	mov	r0, sp
    4bf8:	f000 fd50 	bl	569c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4bfc:	2800      	cmp	r0, #0
    4bfe:	d0e8      	beq.n	4bd2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4c00:	2805      	cmp	r0, #5
    4c02:	d005      	beq.n	4c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4c04:	2135      	movs	r1, #53	; 0x35
    4c06:	2004      	movs	r0, #4
    4c08:	f7ff ff20 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c0c:	212d      	movs	r1, #45	; 0x2d
    4c0e:	e7fa      	b.n	4c06 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c12:	0000      	.short	0x0000
    4c14:	20000060 	.word	0x20000060
    4c18:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4c1a:	4c1f      	ldr	r4, [pc, #124]	; (4c98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4c1c:	4605      	mov	r5, r0
    4c1e:	7820      	ldrb	r0, [r4, #0]
    4c20:	b140      	cbz	r0, 4c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4c22:	78a2      	ldrb	r2, [r4, #2]
    4c24:	1c61      	adds	r1, r4, #1
    4c26:	4628      	mov	r0, r5
    4c28:	1c92      	adds	r2, r2, #2
    4c2a:	f007 fd6f 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c2e:	2000      	movs	r0, #0
    4c30:	7020      	strb	r0, [r4, #0]
    4c32:	e021      	b.n	4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4c34:	4819      	ldr	r0, [pc, #100]	; (4c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c36:	f002 f837 	bl	6ca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4c3a:	2800      	cmp	r0, #0
    4c3c:	d01d      	beq.n	4c7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4c3e:	4c17      	ldr	r4, [pc, #92]	; (4c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c40:	7820      	ldrb	r0, [r4, #0]
    4c42:	2811      	cmp	r0, #17
    4c44:	d104      	bne.n	4c50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4c46:	210a      	movs	r1, #10
    4c48:	203e      	movs	r0, #62	; 0x3e
    4c4a:	f007 fee0 	bl	ca0e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4c4e:	b118      	cbz	r0, 4c58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4c50:	7820      	ldrb	r0, [r4, #0]
    4c52:	2808      	cmp	r0, #8
    4c54:	d005      	beq.n	4c62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4c56:	e009      	b.n	4c6c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4c58:	4910      	ldr	r1, [pc, #64]	; (4c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c5a:	4628      	mov	r0, r5
    4c5c:	f008 f8df 	bl	ce1e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4c60:	e00a      	b.n	4c78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4c62:	2105      	movs	r1, #5
    4c64:	203e      	movs	r0, #62	; 0x3e
    4c66:	f007 fed2 	bl	ca0e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4c6a:	b138      	cbz	r0, 4c7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4c6c:	490b      	ldr	r1, [pc, #44]	; (4c9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4c6e:	4628      	mov	r0, r5
    4c70:	f007 ff2b 	bl	caca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4c74:	2800      	cmp	r0, #0
    4c76:	d000      	beq.n	4c7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4c78:	2001      	movs	r0, #1
    4c7a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4c7c:	88a0      	ldrh	r0, [r4, #4]
    4c7e:	f8ad 0000 	strh.w	r0, [sp]
    4c82:	a901      	add	r1, sp, #4
    4c84:	4668      	mov	r0, sp
    4c86:	f008 f9e8 	bl	d05a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4c8a:	2800      	cmp	r0, #0
    4c8c:	d0f5      	beq.n	4c7a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4c8e:	219b      	movs	r1, #155	; 0x9b
    4c90:	2008      	movs	r0, #8
    4c92:	f7ff fedb 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c96:	0000      	.short	0x0000
    4c98:	20001316 	.word	0x20001316
    4c9c:	20001214 	.word	0x20001214
    4ca0:	b570      	push	{r4, r5, r6, lr}
    4ca2:	780a      	ldrb	r2, [r1, #0]
    4ca4:	7082      	strb	r2, [r0, #2]
    4ca6:	b33a      	cbz	r2, 4cf8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4ca8:	2a01      	cmp	r2, #1
    4caa:	d825      	bhi.n	4cf8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4cac:	2313      	movs	r3, #19
    4cae:	7003      	strb	r3, [r0, #0]
    4cb0:	2300      	movs	r3, #0
    4cb2:	e00a      	b.n	4cca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4cb4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4cb8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4cbc:	78a6      	ldrb	r6, [r4, #2]
    4cbe:	70ee      	strb	r6, [r5, #3]
    4cc0:	8864      	ldrh	r4, [r4, #2]
    4cc2:	0a24      	lsrs	r4, r4, #8
    4cc4:	1c5b      	adds	r3, r3, #1
    4cc6:	712c      	strb	r4, [r5, #4]
    4cc8:	b2db      	uxtb	r3, r3
    4cca:	4293      	cmp	r3, r2
    4ccc:	d3f2      	bcc.n	4cb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4cce:	2300      	movs	r3, #0
    4cd0:	e00b      	b.n	4cea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4cd2:	bf00      	nop
    4cd4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4cd8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4cdc:	792e      	ldrb	r6, [r5, #4]
    4cde:	7166      	strb	r6, [r4, #5]
    4ce0:	88ad      	ldrh	r5, [r5, #4]
    4ce2:	0a2d      	lsrs	r5, r5, #8
    4ce4:	1c5b      	adds	r3, r3, #1
    4ce6:	71a5      	strb	r5, [r4, #6]
    4ce8:	b2db      	uxtb	r3, r3
    4cea:	4293      	cmp	r3, r2
    4cec:	d3f2      	bcc.n	4cd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    4cee:	2101      	movs	r1, #1
    4cf0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4cf4:	b2c0      	uxtb	r0, r0
    4cf6:	bd70      	pop	{r4, r5, r6, pc}
    4cf8:	2000      	movs	r0, #0
    4cfa:	bd70      	pop	{r4, r5, r6, pc}

00004cfc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4cfc:	2101      	movs	r1, #1
    4cfe:	4a0c      	ldr	r2, [pc, #48]	; (4d30 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4d00:	2840      	cmp	r0, #64	; 0x40
    4d02:	d20c      	bcs.n	4d1e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4d04:	2820      	cmp	r0, #32
    4d06:	d803      	bhi.n	4d10 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4d08:	1e40      	subs	r0, r0, #1
    4d0a:	4081      	lsls	r1, r0
    4d0c:	6810      	ldr	r0, [r2, #0]
    4d0e:	e002      	b.n	4d16 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4d10:	3821      	subs	r0, #33	; 0x21
    4d12:	4081      	lsls	r1, r0
    4d14:	6850      	ldr	r0, [r2, #4]
    4d16:	4201      	tst	r1, r0
    4d18:	d107      	bne.n	4d2a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4d1a:	2000      	movs	r0, #0
    4d1c:	4770      	bx	lr
    4d1e:	28ff      	cmp	r0, #255	; 0xff
    4d20:	d003      	beq.n	4d2a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4d22:	3840      	subs	r0, #64	; 0x40
    4d24:	4081      	lsls	r1, r0
    4d26:	6890      	ldr	r0, [r2, #8]
    4d28:	e7f5      	b.n	4d16 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4d2a:	2001      	movs	r0, #1
    4d2c:	4770      	bx	lr
    4d2e:	0000      	.short	0x0000
    4d30:	20000064 	.word	0x20000064

00004d34 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4d34:	2101      	movs	r1, #1
    4d36:	1e40      	subs	r0, r0, #1
    4d38:	4081      	lsls	r1, r0
    4d3a:	4804      	ldr	r0, [pc, #16]	; (4d4c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4d3c:	68c0      	ldr	r0, [r0, #12]
    4d3e:	4201      	tst	r1, r0
    4d40:	d001      	beq.n	4d46 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4d42:	2001      	movs	r0, #1
    4d44:	4770      	bx	lr
    4d46:	2000      	movs	r0, #0
    4d48:	4770      	bx	lr
    4d4a:	0000      	.short	0x0000
    4d4c:	20000064 	.word	0x20000064

00004d50 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4d50:	4901      	ldr	r1, [pc, #4]	; (4d58 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4d52:	6800      	ldr	r0, [r0, #0]
    4d54:	60c8      	str	r0, [r1, #12]
    4d56:	4770      	bx	lr
    4d58:	20000064 	.word	0x20000064

00004d5c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4d5c:	4904      	ldr	r1, [pc, #16]	; (4d70 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4d5e:	6802      	ldr	r2, [r0, #0]
    4d60:	6840      	ldr	r0, [r0, #4]
    4d62:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4d66:	600a      	str	r2, [r1, #0]
    4d68:	4a02      	ldr	r2, [pc, #8]	; (4d74 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4d6a:	4310      	orrs	r0, r2
    4d6c:	6048      	str	r0, [r1, #4]
    4d6e:	4770      	bx	lr
    4d70:	20000064 	.word	0x20000064
    4d74:	024007f8 	.word	0x024007f8

00004d78 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4d78:	4901      	ldr	r1, [pc, #4]	; (4d80 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4d7a:	6800      	ldr	r0, [r0, #0]
    4d7c:	6088      	str	r0, [r1, #8]
    4d7e:	4770      	bx	lr
    4d80:	20000064 	.word	0x20000064

00004d84 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4d84:	4805      	ldr	r0, [pc, #20]	; (4d9c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4d86:	f04f 31ff 	mov.w	r1, #4294967295
    4d8a:	6001      	str	r1, [r0, #0]
    4d8c:	0cc9      	lsrs	r1, r1, #19
    4d8e:	6041      	str	r1, [r0, #4]
    4d90:	2100      	movs	r1, #0
    4d92:	6081      	str	r1, [r0, #8]
    4d94:	211f      	movs	r1, #31
    4d96:	60c1      	str	r1, [r0, #12]
    4d98:	4770      	bx	lr
    4d9a:	0000      	.short	0x0000
    4d9c:	20000064 	.word	0x20000064

00004da0 <sdc_hci_cmd_cb_reset>:
    4da0:	b510      	push	{r4, lr}
    4da2:	f7ff ffef 	bl	4d84 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4da6:	f00a ffc0 	bl	fd2a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4daa:	4604      	mov	r4, r0
    4dac:	4802      	ldr	r0, [pc, #8]	; (4db8 <sdc_hci_cmd_cb_reset+0x18>)
    4dae:	6800      	ldr	r0, [r0, #0]
    4db0:	b100      	cbz	r0, 4db4 <sdc_hci_cmd_cb_reset+0x14>
    4db2:	4780      	blx	r0
    4db4:	4620      	mov	r0, r4
    4db6:	bd10      	pop	{r4, pc}
    4db8:	20000074 	.word	0x20000074

00004dbc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4dbc:	4901      	ldr	r1, [pc, #4]	; (4dc4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4dbe:	6008      	str	r0, [r1, #0]
    4dc0:	4770      	bx	lr
    4dc2:	0000      	.short	0x0000
    4dc4:	20000074 	.word	0x20000074

00004dc8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4dc8:	2102      	movs	r1, #2
    4dca:	8001      	strh	r1, [r0, #0]
    4dcc:	8041      	strh	r1, [r0, #2]
    4dce:	2100      	movs	r1, #0
    4dd0:	7101      	strb	r1, [r0, #4]
    4dd2:	210e      	movs	r1, #14
    4dd4:	7141      	strb	r1, [r0, #5]
    4dd6:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4dda:	80c1      	strh	r1, [r0, #6]
    4ddc:	4901      	ldr	r1, [pc, #4]	; (4de4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4dde:	6081      	str	r1, [r0, #8]
    4de0:	2000      	movs	r0, #0
    4de2:	4770      	bx	lr
    4de4:	3c186766 	.word	0x3c186766

00004de8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4de8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4dea:	4604      	mov	r4, r0
    4dec:	4669      	mov	r1, sp
    4dee:	f008 fc92 	bl	d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    4df2:	b170      	cbz	r0, 4e12 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4df4:	f240 215a 	movw	r1, #602	; 0x25a
    4df8:	e008      	b.n	4e0c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4dfa:	bf00      	nop
    4dfc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4e00:	4621      	mov	r1, r4
    4e02:	f000 f8ab 	bl	4f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4e06:	b120      	cbz	r0, 4e12 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4e08:	f240 215f 	movw	r1, #607	; 0x25f
    4e0c:	2017      	movs	r0, #23
    4e0e:	f7ff fe1d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e12:	4668      	mov	r0, sp
    4e14:	f000 f852 	bl	4ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4e18:	2800      	cmp	r0, #0
    4e1a:	d0ef      	beq.n	4dfc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4e1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004e20 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4e20:	b510      	push	{r4, lr}
    4e22:	2802      	cmp	r0, #2
    4e24:	d304      	bcc.n	4e30 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4e26:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4e2a:	2017      	movs	r0, #23
    4e2c:	f7ff fe0e 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e30:	4901      	ldr	r1, [pc, #4]	; (4e38 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4e32:	5c08      	ldrb	r0, [r1, r0]
    4e34:	bd10      	pop	{r4, pc}
    4e36:	0000      	.short	0x0000
    4e38:	20001184 	.word	0x20001184

00004e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e3e:	0005      	movs	r5, r0
    4e40:	9500      	str	r5, [sp, #0]
    4e42:	d010      	beq.n	4e66 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    4e44:	2600      	movs	r6, #0
    4e46:	7808      	ldrb	r0, [r1, #0]
    4e48:	7849      	ldrb	r1, [r1, #1]
    4e4a:	4604      	mov	r4, r0
    4e4c:	42a1      	cmp	r1, r4
    4e4e:	d900      	bls.n	4e52 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4e50:	460c      	mov	r4, r1
    4e52:	1cea      	adds	r2, r5, #3
    4e54:	f022 0203 	bic.w	r2, r2, #3
    4e58:	42aa      	cmp	r2, r5
    4e5a:	d006      	beq.n	4e6a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    4e5c:	f240 1179 	movw	r1, #377	; 0x179
    4e60:	2017      	movs	r0, #23
    4e62:	f7ff fdf3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e66:	2601      	movs	r6, #1
    4e68:	e7ed      	b.n	4e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    4e6a:	4f13      	ldr	r7, [pc, #76]	; (4eb8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    4e6c:	7038      	strb	r0, [r7, #0]
    4e6e:	7079      	strb	r1, [r7, #1]
    4e70:	4631      	mov	r1, r6
    4e72:	4668      	mov	r0, sp
    4e74:	f000 f8ee 	bl	5054 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4e78:	2100      	movs	r1, #0
    4e7a:	460b      	mov	r3, r1
    4e7c:	9800      	ldr	r0, [sp, #0]
    4e7e:	1cc0      	adds	r0, r0, #3
    4e80:	f020 0003 	bic.w	r0, r0, #3
    4e84:	9000      	str	r0, [sp, #0]
    4e86:	b96e      	cbnz	r6, 4ea4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4e88:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    4e8c:	60d0      	str	r0, [r2, #12]
    4e8e:	2000      	movs	r0, #0
    4e90:	e006      	b.n	4ea0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4e92:	bf00      	nop
    4e94:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4e98:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    4e9c:	1c40      	adds	r0, r0, #1
    4e9e:	b2c0      	uxtb	r0, r0
    4ea0:	42a0      	cmp	r0, r4
    4ea2:	d3f7      	bcc.n	4e94 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4ea4:	9800      	ldr	r0, [sp, #0]
    4ea6:	1c49      	adds	r1, r1, #1
    4ea8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4eac:	b2c9      	uxtb	r1, r1
    4eae:	9000      	str	r0, [sp, #0]
    4eb0:	2902      	cmp	r1, #2
    4eb2:	d3e3      	bcc.n	4e7c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    4eb4:	1b40      	subs	r0, r0, r5
    4eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eb8:	20001184 	.word	0x20001184

00004ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4ebc:	b570      	push	{r4, r5, r6, lr}
    4ebe:	4604      	mov	r4, r0
    4ec0:	f008 fda2 	bl	da08 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4ec4:	b108      	cbz	r0, 4eca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4ec6:	2010      	movs	r0, #16
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
    4eca:	7825      	ldrb	r5, [r4, #0]
    4ecc:	f000 f8fe 	bl	50cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4ed0:	4602      	mov	r2, r0
    4ed2:	480c      	ldr	r0, [pc, #48]	; (4f04 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4ed4:	8861      	ldrh	r1, [r4, #2]
    4ed6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4eda:	e00e      	b.n	4efa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4edc:	68c3      	ldr	r3, [r0, #12]
    4ede:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4ee2:	b143      	cbz	r3, 4ef6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4ee4:	1c4a      	adds	r2, r1, #1
    4ee6:	8062      	strh	r2, [r4, #2]
    4ee8:	80a1      	strh	r1, [r4, #4]
    4eea:	68c0      	ldr	r0, [r0, #12]
    4eec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4ef0:	60a0      	str	r0, [r4, #8]
    4ef2:	2000      	movs	r0, #0
    4ef4:	bd70      	pop	{r4, r5, r6, pc}
    4ef6:	1c49      	adds	r1, r1, #1
    4ef8:	b289      	uxth	r1, r1
    4efa:	4291      	cmp	r1, r2
    4efc:	d3ee      	bcc.n	4edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4efe:	8061      	strh	r1, [r4, #2]
    4f00:	2005      	movs	r0, #5
    4f02:	bd70      	pop	{r4, r5, r6, pc}
    4f04:	20001184 	.word	0x20001184

00004f08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f0c:	b121      	cbz	r1, 4f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4f0e:	2901      	cmp	r1, #1
    4f10:	d002      	beq.n	4f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4f12:	2000      	movs	r0, #0
    4f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f18:	4c0f      	ldr	r4, [pc, #60]	; (4f58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4f1a:	2700      	movs	r7, #0
    4f1c:	463b      	mov	r3, r7
    4f1e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4f22:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4f26:	f814 c001 	ldrb.w	ip, [r4, r1]
    4f2a:	e00a      	b.n	4f42 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4f2c:	19dc      	adds	r4, r3, r7
    4f2e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4f32:	b2a4      	uxth	r4, r4
    4f34:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4f38:	f1be 0f00 	cmp.w	lr, #0
    4f3c:	d004      	beq.n	4f48 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4f3e:	1c5b      	adds	r3, r3, #1
    4f40:	b29b      	uxth	r3, r3
    4f42:	459c      	cmp	ip, r3
    4f44:	d8f2      	bhi.n	4f2c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4f46:	4634      	mov	r4, r6
    4f48:	8004      	strh	r4, [r0, #0]
    4f4a:	4620      	mov	r0, r4
    4f4c:	42b4      	cmp	r4, r6
    4f4e:	d0e0      	beq.n	4f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4f54:	f000 b834 	b.w	4fc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4f58:	20001184 	.word	0x20001184

00004f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    4f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f60:	4606      	mov	r6, r0
    4f62:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4f66:	460c      	mov	r4, r1
    4f68:	f243 0702 	movw	r7, #12290	; 0x3002
    4f6c:	38ff      	subs	r0, #255	; 0xff
    4f6e:	d020      	beq.n	4fb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4f70:	2c02      	cmp	r4, #2
    4f72:	d302      	bcc.n	4f7a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4f74:	2007      	movs	r0, #7
    4f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f7a:	4630      	mov	r0, r6
    4f7c:	f000 f85a 	bl	5034 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4f80:	0005      	movs	r5, r0
    4f82:	d016      	beq.n	4fb2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4f84:	480c      	ldr	r0, [pc, #48]	; (4fb8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4f86:	4629      	mov	r1, r5
    4f88:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    4f8c:	4630      	mov	r0, r6
    4f8e:	4790      	blx	r2
    4f90:	480a      	ldr	r0, [pc, #40]	; (4fbc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4f92:	2100      	movs	r1, #0
    4f94:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4f98:	68f8      	ldr	r0, [r7, #12]
    4f9a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    4f9e:	4620      	mov	r0, r4
    4fa0:	f000 f88a 	bl	50b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4fa4:	4602      	mov	r2, r0
    4fa6:	4629      	mov	r1, r5
    4fa8:	6878      	ldr	r0, [r7, #4]
    4faa:	f008 fb93 	bl	d6d4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4fae:	2000      	movs	r0, #0
    4fb0:	e7e1      	b.n	4f76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4fb2:	4638      	mov	r0, r7
    4fb4:	e7df      	b.n	4f76 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4fb6:	0000      	.short	0x0000
    4fb8:	000050ec 	.word	0x000050ec
    4fbc:	20001184 	.word	0x20001184
    4fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fc4:	4690      	mov	r8, r2
    4fc6:	460d      	mov	r5, r1
    4fc8:	4607      	mov	r7, r0
    4fca:	f008 fbb5 	bl	d738 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4fce:	b148      	cbz	r0, 4fe4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4fd0:	4816      	ldr	r0, [pc, #88]	; (502c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4fd2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4fd6:	68f0      	ldr	r0, [r6, #12]
    4fd8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4fdc:	b128      	cbz	r0, 4fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4fde:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4fe2:	e015      	b.n	5010 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4fe4:	f240 1139 	movw	r1, #313	; 0x139
    4fe8:	e012      	b.n	5010 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4fea:	6870      	ldr	r0, [r6, #4]
    4fec:	2800      	cmp	r0, #0
    4fee:	d01a      	beq.n	5026 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4ff0:	4628      	mov	r0, r5
    4ff2:	f000 f861 	bl	50b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4ff6:	4601      	mov	r1, r0
    4ff8:	6870      	ldr	r0, [r6, #4]
    4ffa:	f008 fb1d 	bl	d638 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4ffe:	0004      	movs	r4, r0
    5000:	d010      	beq.n	5024 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5002:	68f0      	ldr	r0, [r6, #12]
    5004:	2d02      	cmp	r5, #2
    5006:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    500a:	d304      	bcc.n	5016 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    500c:	f240 1145 	movw	r1, #325	; 0x145
    5010:	2017      	movs	r0, #23
    5012:	f7ff fd1b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5016:	4806      	ldr	r0, [pc, #24]	; (5030 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5018:	4642      	mov	r2, r8
    501a:	4621      	mov	r1, r4
    501c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5020:	4638      	mov	r0, r7
    5022:	4798      	blx	r3
    5024:	4620      	mov	r0, r4
    5026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    502a:	0000      	.short	0x0000
    502c:	20001184 	.word	0x20001184
    5030:	000050e4 	.word	0x000050e4
    5034:	b570      	push	{r4, r5, r6, lr}
    5036:	460c      	mov	r4, r1
    5038:	4605      	mov	r5, r0
    503a:	f008 fb7d 	bl	d738 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    503e:	2800      	cmp	r0, #0
    5040:	d005      	beq.n	504e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5042:	4803      	ldr	r0, [pc, #12]	; (5050 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5044:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5048:	68c0      	ldr	r0, [r0, #12]
    504a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    504e:	bd70      	pop	{r4, r5, r6, pc}
    5050:	20001184 	.word	0x20001184
    5054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5058:	4e16      	ldr	r6, [pc, #88]	; (50b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    505a:	4688      	mov	r8, r1
    505c:	4605      	mov	r5, r0
    505e:	2400      	movs	r4, #0
    5060:	6828      	ldr	r0, [r5, #0]
    5062:	1cc0      	adds	r0, r0, #3
    5064:	f020 0003 	bic.w	r0, r0, #3
    5068:	6028      	str	r0, [r5, #0]
    506a:	4620      	mov	r0, r4
    506c:	f000 f824 	bl	50b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5070:	5d31      	ldrb	r1, [r6, r4]
    5072:	4348      	muls	r0, r1
    5074:	f1b8 0f00 	cmp.w	r8, #0
    5078:	d001      	beq.n	507e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    507a:	2200      	movs	r2, #0
    507c:	e000      	b.n	5080 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    507e:	682a      	ldr	r2, [r5, #0]
    5080:	4601      	mov	r1, r0
    5082:	9200      	str	r2, [sp, #0]
    5084:	b132      	cbz	r2, 5094 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    5086:	2700      	movs	r7, #0
    5088:	ea4f 000d 	mov.w	r0, sp
    508c:	f008 fb01 	bl	d692 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5090:	b11f      	cbz	r7, 509a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    5092:	e006      	b.n	50a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    5094:	2701      	movs	r7, #1
    5096:	2000      	movs	r0, #0
    5098:	e7f8      	b.n	508c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    509a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    509e:	9a00      	ldr	r2, [sp, #0]
    50a0:	604a      	str	r2, [r1, #4]
    50a2:	6829      	ldr	r1, [r5, #0]
    50a4:	1c64      	adds	r4, r4, #1
    50a6:	4408      	add	r0, r1
    50a8:	b2e4      	uxtb	r4, r4
    50aa:	6028      	str	r0, [r5, #0]
    50ac:	2c02      	cmp	r4, #2
    50ae:	d3d7      	bcc.n	5060 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    50b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50b4:	20001184 	.word	0x20001184
    50b8:	4903      	ldr	r1, [pc, #12]	; (50c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    50ba:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    50be:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    50c2:	1cc0      	adds	r0, r0, #3
    50c4:	4008      	ands	r0, r1
    50c6:	4770      	bx	lr
    50c8:	000050e0 	.word	0x000050e0
    50cc:	4903      	ldr	r1, [pc, #12]	; (50dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    50ce:	7808      	ldrb	r0, [r1, #0]
    50d0:	7849      	ldrb	r1, [r1, #1]
    50d2:	4288      	cmp	r0, r1
    50d4:	d200      	bcs.n	50d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    50d6:	4608      	mov	r0, r1
    50d8:	4770      	bx	lr
    50da:	0000      	.short	0x0000
    50dc:	20001184 	.word	0x20001184
    50e0:	00d40218 	.word	0x00d40218
    50e4:	0000d74d 	.word	0x0000d74d
    50e8:	0000d74d 	.word	0x0000d74d
    50ec:	0000f30d 	.word	0x0000f30d
    50f0:	0000e6fb 	.word	0x0000e6fb

000050f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    50f4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50f8:	4c26      	ldr	r4, [pc, #152]	; (5194 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    50fa:	4680      	mov	r8, r0
    50fc:	b081      	sub	sp, #4
    50fe:	6820      	ldr	r0, [r4, #0]
    5100:	469a      	mov	sl, r3
    5102:	4693      	mov	fp, r2
    5104:	b158      	cbz	r0, 511e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5106:	7a02      	ldrb	r2, [r0, #8]
    5108:	4542      	cmp	r2, r8
    510a:	d903      	bls.n	5114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    510c:	6841      	ldr	r1, [r0, #4]
    510e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    5112:	b140      	cbz	r0, 5126 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5114:	f243 0002 	movw	r0, #12290	; 0x3002
    5118:	b005      	add	sp, #20
    511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    511e:	21a5      	movs	r1, #165	; 0xa5
    5120:	2018      	movs	r0, #24
    5122:	f7ff fc93 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	4619      	mov	r1, r3
    5128:	9802      	ldr	r0, [sp, #8]
    512a:	f008 fb27 	bl	d77c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    512e:	b286      	uxth	r6, r0
    5130:	4658      	mov	r0, fp
    5132:	990e      	ldr	r1, [sp, #56]	; 0x38
    5134:	f008 fb19 	bl	d76a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5138:	b285      	uxth	r5, r0
    513a:	1970      	adds	r0, r6, r5
    513c:	1d00      	adds	r0, r0, #4
    513e:	b287      	uxth	r7, r0
    5140:	6820      	ldr	r0, [r4, #0]
    5142:	46a1      	mov	r9, r4
    5144:	4639      	mov	r1, r7
    5146:	6800      	ldr	r0, [r0, #0]
    5148:	f008 fa76 	bl	d638 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    514c:	0004      	movs	r4, r0
    514e:	d01f      	beq.n	5190 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5150:	8067      	strh	r7, [r4, #2]
    5152:	8025      	strh	r5, [r4, #0]
    5154:	4629      	mov	r1, r5
    5156:	1d20      	adds	r0, r4, #4
    5158:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    515a:	4607      	mov	r7, r0
    515c:	465a      	mov	r2, fp
    515e:	2301      	movs	r3, #1
    5160:	9500      	str	r5, [sp, #0]
    5162:	f008 f9c9 	bl	d4f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5166:	8820      	ldrh	r0, [r4, #0]
    5168:	4631      	mov	r1, r6
    516a:	4438      	add	r0, r7
    516c:	2301      	movs	r3, #1
    516e:	9a02      	ldr	r2, [sp, #8]
    5170:	f8cd a000 	str.w	sl, [sp]
    5174:	f008 f9c0 	bl	d4f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5178:	8820      	ldrh	r0, [r4, #0]
    517a:	19c1      	adds	r1, r0, r7
    517c:	4638      	mov	r0, r7
    517e:	f008 f9ec 	bl	d55a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5182:	f8d9 0000 	ldr.w	r0, [r9]
    5186:	6841      	ldr	r1, [r0, #4]
    5188:	2000      	movs	r0, #0
    518a:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    518e:	e7c3      	b.n	5118 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5190:	2004      	movs	r0, #4
    5192:	e7c1      	b.n	5118 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5194:	20000078 	.word	0x20000078

00005198 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5198:	b570      	push	{r4, r5, r6, lr}
    519a:	4c14      	ldr	r4, [pc, #80]	; (51ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    519c:	6823      	ldr	r3, [r4, #0]
    519e:	b18b      	cbz	r3, 51c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    51a0:	7a19      	ldrb	r1, [r3, #8]
    51a2:	4281      	cmp	r1, r0
    51a4:	d912      	bls.n	51cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    51a6:	685a      	ldr	r2, [r3, #4]
    51a8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    51ac:	b171      	cbz	r1, 51cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    51ae:	2500      	movs	r5, #0
    51b0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    51b4:	884a      	ldrh	r2, [r1, #2]
    51b6:	6818      	ldr	r0, [r3, #0]
    51b8:	f008 fa8c 	bl	d6d4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    51bc:	6821      	ldr	r1, [r4, #0]
    51be:	2000      	movs	r0, #0
    51c0:	7a0a      	ldrb	r2, [r1, #8]
    51c2:	e00c      	b.n	51de <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    51c4:	21c8      	movs	r1, #200	; 0xc8
    51c6:	2018      	movs	r0, #24
    51c8:	f7ff fc40 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51cc:	f243 0002 	movw	r0, #12290	; 0x3002
    51d0:	bd70      	pop	{r4, r5, r6, pc}
    51d2:	684b      	ldr	r3, [r1, #4]
    51d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    51d8:	b933      	cbnz	r3, 51e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    51da:	1c40      	adds	r0, r0, #1
    51dc:	b2c0      	uxtb	r0, r0
    51de:	4282      	cmp	r2, r0
    51e0:	d8f7      	bhi.n	51d2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    51e2:	6808      	ldr	r0, [r1, #0]
    51e4:	f008 fa6b 	bl	d6be <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    51e8:	2000      	movs	r0, #0
    51ea:	bd70      	pop	{r4, r5, r6, pc}
    51ec:	20000078 	.word	0x20000078

000051f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    51f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51f4:	460d      	mov	r5, r1
    51f6:	0004      	movs	r4, r0
    51f8:	4690      	mov	r8, r2
    51fa:	f04f 0600 	mov.w	r6, #0
    51fe:	d009      	beq.n	5214 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5200:	2700      	movs	r7, #0
    5202:	1ce0      	adds	r0, r4, #3
    5204:	f020 0003 	bic.w	r0, r0, #3
    5208:	42a0      	cmp	r0, r4
    520a:	d005      	beq.n	5218 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    520c:	2186      	movs	r1, #134	; 0x86
    520e:	2018      	movs	r0, #24
    5210:	f7ff fc1c 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5214:	2701      	movs	r7, #1
    5216:	e7f4      	b.n	5202 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5218:	b1cd      	cbz	r5, 524e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    521a:	4611      	mov	r1, r2
    521c:	2000      	movs	r0, #0
    521e:	f008 fa38 	bl	d692 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5222:	300c      	adds	r0, #12
    5224:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5228:	b98f      	cbnz	r7, 524e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    522a:	4f0a      	ldr	r7, [pc, #40]	; (5254 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    522c:	f104 000c 	add.w	r0, r4, #12
    5230:	00aa      	lsls	r2, r5, #2
    5232:	603c      	str	r4, [r7, #0]
    5234:	7225      	strb	r5, [r4, #8]
    5236:	6060      	str	r0, [r4, #4]
    5238:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    523c:	6020      	str	r0, [r4, #0]
    523e:	2100      	movs	r1, #0
    5240:	6860      	ldr	r0, [r4, #4]
    5242:	f007 fadd 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5246:	4641      	mov	r1, r8
    5248:	6838      	ldr	r0, [r7, #0]
    524a:	f008 fa22 	bl	d692 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    524e:	4630      	mov	r0, r6
    5250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5254:	20000078 	.word	0x20000078

00005258 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	4d08      	ldr	r5, [pc, #32]	; (527c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    525c:	6828      	ldr	r0, [r5, #0]
    525e:	2800      	cmp	r0, #0
    5260:	d00a      	beq.n	5278 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    5262:	2400      	movs	r4, #0
    5264:	e004      	b.n	5270 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    5266:	4620      	mov	r0, r4
    5268:	f7ff ff96 	bl	5198 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    526c:	1c64      	adds	r4, r4, #1
    526e:	b2e4      	uxtb	r4, r4
    5270:	6828      	ldr	r0, [r5, #0]
    5272:	7a00      	ldrb	r0, [r0, #8]
    5274:	42a0      	cmp	r0, r4
    5276:	d8f6      	bhi.n	5266 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5278:	bd70      	pop	{r4, r5, r6, pc}
    527a:	0000      	.short	0x0000
    527c:	20000078 	.word	0x20000078

00005280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5280:	4909      	ldr	r1, [pc, #36]	; (52a8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5282:	b510      	push	{r4, lr}
    5284:	4602      	mov	r2, r0
    5286:	6809      	ldr	r1, [r1, #0]
    5288:	2000      	movs	r0, #0
    528a:	b149      	cbz	r1, 52a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    528c:	7a0b      	ldrb	r3, [r1, #8]
    528e:	4293      	cmp	r3, r2
    5290:	d905      	bls.n	529e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5292:	6849      	ldr	r1, [r1, #4]
    5294:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5298:	2900      	cmp	r1, #0
    529a:	d000      	beq.n	529e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    529c:	1d08      	adds	r0, r1, #4
    529e:	bd10      	pop	{r4, pc}
    52a0:	21ee      	movs	r1, #238	; 0xee
    52a2:	2018      	movs	r0, #24
    52a4:	f7ff fbd2 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52a8:	20000078 	.word	0x20000078

000052ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    52ac:	490a      	ldr	r1, [pc, #40]	; (52d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    52ae:	b510      	push	{r4, lr}
    52b0:	4602      	mov	r2, r0
    52b2:	6809      	ldr	r1, [r1, #0]
    52b4:	2000      	movs	r0, #0
    52b6:	b159      	cbz	r1, 52d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    52b8:	7a0b      	ldrb	r3, [r1, #8]
    52ba:	4293      	cmp	r3, r2
    52bc:	d907      	bls.n	52ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52be:	6849      	ldr	r1, [r1, #4]
    52c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    52c4:	2900      	cmp	r1, #0
    52c6:	d002      	beq.n	52ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    52c8:	f831 0b04 	ldrh.w	r0, [r1], #4
    52cc:	4408      	add	r0, r1
    52ce:	bd10      	pop	{r4, pc}
    52d0:	21fc      	movs	r1, #252	; 0xfc
    52d2:	2018      	movs	r0, #24
    52d4:	f7ff fbba 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52d8:	20000078 	.word	0x20000078
    52dc:	b570      	push	{r4, r5, r6, lr}
    52de:	4b1e      	ldr	r3, [pc, #120]	; (5358 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    52e0:	6845      	ldr	r5, [r0, #4]
    52e2:	4604      	mov	r4, r0
    52e4:	2200      	movs	r2, #0
    52e6:	b1a1      	cbz	r1, 5312 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    52e8:	2001      	movs	r0, #1
    52ea:	7060      	strb	r0, [r4, #1]
    52ec:	8858      	ldrh	r0, [r3, #2]
    52ee:	0881      	lsrs	r1, r0, #2
    52f0:	f05f 0000 	movs.w	r0, #0
    52f4:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    52f8:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    52fc:	831a      	strh	r2, [r3, #24]
    52fe:	8419      	strh	r1, [r3, #32]
    5300:	fb00 5301 	mla	r3, r0, r1, r5
    5304:	6073      	str	r3, [r6, #4]
    5306:	1823      	adds	r3, r4, r0
    5308:	1c40      	adds	r0, r0, #1
    530a:	751a      	strb	r2, [r3, #20]
    530c:	2804      	cmp	r0, #4
    530e:	d3f1      	bcc.n	52f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5310:	bd70      	pop	{r4, r5, r6, pc}
    5312:	7062      	strb	r2, [r4, #1]
    5314:	f05f 0000 	movs.w	r0, #0
    5318:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    531c:	830a      	strh	r2, [r1, #24]
    531e:	840a      	strh	r2, [r1, #32]
    5320:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5324:	604a      	str	r2, [r1, #4]
    5326:	1821      	adds	r1, r4, r0
    5328:	1c40      	adds	r0, r0, #1
    532a:	750a      	strb	r2, [r1, #20]
    532c:	2804      	cmp	r0, #4
    532e:	d3f3      	bcc.n	5318 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5330:	8858      	ldrh	r0, [r3, #2]
    5332:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5336:	d201      	bcs.n	533c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5338:	0846      	lsrs	r6, r0, #1
    533a:	e000      	b.n	533e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    533c:	26ff      	movs	r6, #255	; 0xff
    533e:	f008 fa90 	bl	d862 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5342:	6065      	str	r5, [r4, #4]
    5344:	8420      	strh	r0, [r4, #32]
    5346:	1829      	adds	r1, r5, r0
    5348:	60a1      	str	r1, [r4, #8]
    534a:	8466      	strh	r6, [r4, #34]	; 0x22
    534c:	60e5      	str	r5, [r4, #12]
    534e:	84a0      	strh	r0, [r4, #36]	; 0x24
    5350:	6121      	str	r1, [r4, #16]
    5352:	84e6      	strh	r6, [r4, #38]	; 0x26
    5354:	bd70      	pop	{r4, r5, r6, pc}
    5356:	0000      	.short	0x0000
    5358:	2000007c 	.word	0x2000007c

0000535c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5360:	b170      	cbz	r0, 5380 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    5362:	2500      	movs	r5, #0
    5364:	4411      	add	r1, r2
    5366:	b2cc      	uxtb	r4, r1
    5368:	4e24      	ldr	r6, [pc, #144]	; (53fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    536a:	1cc1      	adds	r1, r0, #3
    536c:	2700      	movs	r7, #0
    536e:	f021 0103 	bic.w	r1, r1, #3
    5372:	7034      	strb	r4, [r6, #0]
    5374:	4281      	cmp	r1, r0
    5376:	d005      	beq.n	5384 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5378:	214e      	movs	r1, #78	; 0x4e
    537a:	2009      	movs	r0, #9
    537c:	f7ff fb66 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5380:	2501      	movs	r5, #1
    5382:	e7ef      	b.n	5364 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    5384:	2b1f      	cmp	r3, #31
    5386:	d804      	bhi.n	5392 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5388:	f64f 71ff 	movw	r1, #65535	; 0xffff
    538c:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5390:	e009      	b.n	53a6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    5392:	0059      	lsls	r1, r3, #1
    5394:	2bff      	cmp	r3, #255	; 0xff
    5396:	d90b      	bls.n	53b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    5398:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    539c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    53a0:	d200      	bcs.n	53a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    53a2:	4611      	mov	r1, r2
    53a4:	b289      	uxth	r1, r1
    53a6:	1cc9      	adds	r1, r1, #3
    53a8:	f021 0303 	bic.w	r3, r1, #3
    53ac:	b135      	cbz	r5, 53bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    53ae:	e007      	b.n	53c0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    53b0:	227c      	movs	r2, #124	; 0x7c
    53b2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    53b6:	d3f5      	bcc.n	53a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    53b8:	217c      	movs	r1, #124	; 0x7c
    53ba:	e7f3      	b.n	53a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    53bc:	6070      	str	r0, [r6, #4]
    53be:	8073      	strh	r3, [r6, #2]
    53c0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    53c4:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    53c8:	2100      	movs	r1, #0
    53ca:	6876      	ldr	r6, [r6, #4]
    53cc:	f04f 0c01 	mov.w	ip, #1
    53d0:	e00d      	b.n	53ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    53d2:	b94d      	cbnz	r5, 53e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    53d4:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    53d8:	eb00 0e02 	add.w	lr, r0, r2
    53dc:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    53e0:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    53e4:	f8c7 e004 	str.w	lr, [r7, #4]
    53e8:	1c49      	adds	r1, r1, #1
    53ea:	441a      	add	r2, r3
    53ec:	b2c9      	uxtb	r1, r1
    53ee:	42a1      	cmp	r1, r4
    53f0:	d3ef      	bcc.n	53d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    53f2:	1dd2      	adds	r2, r2, #7
    53f4:	f022 0007 	bic.w	r0, r2, #7
    53f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53fc:	2000007c 	.word	0x2000007c

00005400 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5400:	b570      	push	{r4, r5, r6, lr}
    5402:	4a10      	ldr	r2, [pc, #64]	; (5444 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5404:	2000      	movs	r0, #0
    5406:	6851      	ldr	r1, [r2, #4]
    5408:	7812      	ldrb	r2, [r2, #0]
    540a:	e014      	b.n	5436 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    540c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5410:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5414:	b16b      	cbz	r3, 5432 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    541a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    541e:	d00c      	beq.n	543a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5420:	2500      	movs	r5, #0
    5422:	70a5      	strb	r5, [r4, #2]
    5424:	2101      	movs	r1, #1
    5426:	4620      	mov	r0, r4
    5428:	f7ff ff58 	bl	52dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    542c:	7025      	strb	r5, [r4, #0]
    542e:	4620      	mov	r0, r4
    5430:	bd70      	pop	{r4, r5, r6, pc}
    5432:	1c40      	adds	r0, r0, #1
    5434:	b2c0      	uxtb	r0, r0
    5436:	4290      	cmp	r0, r2
    5438:	d3e8      	bcc.n	540c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    543a:	21a9      	movs	r1, #169	; 0xa9
    543c:	2009      	movs	r0, #9
    543e:	f7ff fb05 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5442:	0000      	.short	0x0000
    5444:	2000007c 	.word	0x2000007c

00005448 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5448:	4804      	ldr	r0, [pc, #16]	; (545c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    544a:	b510      	push	{r4, lr}
    544c:	8840      	ldrh	r0, [r0, #2]
    544e:	0884      	lsrs	r4, r0, #2
    5450:	f008 fa07 	bl	d862 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5454:	4284      	cmp	r4, r0
    5456:	d300      	bcc.n	545a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5458:	4620      	mov	r0, r4
    545a:	bd10      	pop	{r4, pc}
    545c:	2000007c 	.word	0x2000007c
    5460:	4909      	ldr	r1, [pc, #36]	; (5488 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    5462:	b510      	push	{r4, lr}
    5464:	4807      	ldr	r0, [pc, #28]	; (5484 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    5466:	6008      	str	r0, [r1, #0]
    5468:	4b08      	ldr	r3, [pc, #32]	; (548c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    546a:	2011      	movs	r0, #17
    546c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    5470:	2200      	movs	r2, #0
    5472:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    5476:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    547a:	1c40      	adds	r0, r0, #1
    547c:	b2c0      	uxtb	r0, r0
    547e:	2814      	cmp	r0, #20
    5480:	d3f4      	bcc.n	546c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    5482:	bd10      	pop	{r4, pc}
    5484:	fffe0000 	.word	0xfffe0000
    5488:	4001f508 	.word	0x4001f508
    548c:	4001f000 	.word	0x4001f000
    5490:	b570      	push	{r4, r5, r6, lr}
    5492:	2420      	movs	r4, #32
    5494:	2100      	movs	r1, #0
    5496:	2301      	movs	r3, #1
    5498:	fa20 f201 	lsr.w	r2, r0, r1
    549c:	07d2      	lsls	r2, r2, #31
    549e:	d020      	beq.n	54e2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    54a0:	b24a      	sxtb	r2, r1
    54a2:	2a00      	cmp	r2, #0
    54a4:	db10      	blt.n	54c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    54a6:	bf00      	nop
    54a8:	ea4f 1652 	mov.w	r6, r2, lsr #5
    54ac:	ea4f 0686 	mov.w	r6, r6, lsl #2
    54b0:	f002 051f 	and.w	r5, r2, #31
    54b4:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    54b8:	fa03 f505 	lsl.w	r5, r3, r5
    54bc:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    54c0:	f3bf 8f4f 	dsb	sy
    54c4:	f3bf 8f6f 	isb	sy
    54c8:	db0b      	blt.n	54e2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    54ca:	f002 051f 	and.w	r5, r2, #31
    54ce:	ea4f 1252 	mov.w	r2, r2, lsr #5
    54d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    54d6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    54da:	fa03 f505 	lsl.w	r5, r3, r5
    54de:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    54e2:	f101 0101 	add.w	r1, r1, #1
    54e6:	42a1      	cmp	r1, r4
    54e8:	d3d6      	bcc.n	5498 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    54ea:	bd70      	pop	{r4, r5, r6, pc}
    54ec:	b570      	push	{r4, r5, r6, lr}
    54ee:	0042      	lsls	r2, r0, #1
    54f0:	f04f 0100 	mov.w	r1, #0
    54f4:	d501      	bpl.n	54fa <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    54f6:	4a14      	ldr	r2, [pc, #80]	; (5548 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    54f8:	6011      	str	r1, [r2, #0]
    54fa:	f3c0 3280 	ubfx	r2, r0, #14, #1
    54fe:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5502:	429a      	cmp	r2, r3
    5504:	d003      	beq.n	550e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    5506:	2169      	movs	r1, #105	; 0x69
    5508:	201b      	movs	r0, #27
    550a:	f7ff fa9f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    550e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5512:	d014      	beq.n	553e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    5514:	4a0d      	ldr	r2, [pc, #52]	; (554c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    5516:	2001      	movs	r0, #1
    5518:	6050      	str	r0, [r2, #4]
    551a:	1e83      	subs	r3, r0, #2
    551c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5520:	4a0b      	ldr	r2, [pc, #44]	; (5550 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    5522:	6090      	str	r0, [r2, #8]
    5524:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    5528:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    552c:	4c09      	ldr	r4, [pc, #36]	; (5554 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    552e:	6021      	str	r1, [r4, #0]
    5530:	1d25      	adds	r5, r4, #4
    5532:	6028      	str	r0, [r5, #0]
    5534:	6090      	str	r0, [r2, #8]
    5536:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    553a:	6021      	str	r1, [r4, #0]
    553c:	6028      	str	r0, [r5, #0]
    553e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5542:	f7ff bf8d 	b.w	5460 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5546:	0000      	.short	0x0000
    5548:	4001e504 	.word	0x4001e504
    554c:	4000e000 	.word	0x4000e000
    5550:	4000f000 	.word	0x4000f000
    5554:	4000f500 	.word	0x4000f500

00005558 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5558:	b570      	push	{r4, r5, r6, lr}
    555a:	4c0a      	ldr	r4, [pc, #40]	; (5584 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    555c:	460d      	mov	r5, r1
    555e:	6020      	str	r0, [r4, #0]
    5560:	f7ff ffc4 	bl	54ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    5564:	6820      	ldr	r0, [r4, #0]
    5566:	f7ff ff93 	bl	5490 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    556a:	f000 f883 	bl	5674 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    556e:	f7ff ff77 	bl	5460 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    5572:	f008 fa3e 	bl	d9f2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    5576:	4628      	mov	r0, r5
    5578:	f000 f8b6 	bl	56e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    557c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5580:	f000 b8ce 	b.w	5720 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5584:	20000084 	.word	0x20000084

00005588 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    5588:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    558c:	4c36      	ldr	r4, [pc, #216]	; (5668 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    558e:	b082      	sub	sp, #8
    5590:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    5594:	2601      	movs	r6, #1
    5596:	4835      	ldr	r0, [pc, #212]	; (566c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    5598:	f007 f80f 	bl	c5ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    559c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 566c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    55a0:	b920      	cbnz	r0, 55ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    55a2:	2600      	movs	r6, #0
    55a4:	f109 0001 	add.w	r0, r9, #1
    55a8:	f007 f81e 	bl	c5e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    55ac:	f44f 7580 	mov.w	r5, #256	; 0x100
    55b0:	f04f 0800 	mov.w	r8, #0
    55b4:	1d2f      	adds	r7, r5, #4
    55b6:	2101      	movs	r1, #1
    55b8:	6061      	str	r1, [r4, #4]
    55ba:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    55be:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    55c2:	9802      	ldr	r0, [sp, #8]
    55c4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    55c8:	6021      	str	r1, [r4, #0]
    55ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 5670 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    55ce:	e01c      	b.n	560a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    55d0:	f8da 0000 	ldr.w	r0, [sl]
    55d4:	06c0      	lsls	r0, r0, #27
    55d6:	d518      	bpl.n	560a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    55d8:	200e      	movs	r0, #14
    55da:	f008 f9f6 	bl	d9ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    55de:	f3ef 8010 	mrs	r0, PRIMASK
    55e2:	9000      	str	r0, [sp, #0]
    55e4:	b672      	cpsid	i
    55e6:	2103      	movs	r1, #3
    55e8:	4620      	mov	r0, r4
    55ea:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    55ee:	4629      	mov	r1, r5
    55f0:	f008 f9f8 	bl	d9e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    55f4:	b930      	cbnz	r0, 5604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    55f6:	4639      	mov	r1, r7
    55f8:	4620      	mov	r0, r4
    55fa:	f008 f9f3 	bl	d9e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    55fe:	b908      	cbnz	r0, 5604 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    5600:	f7ff f89e 	bl	4740 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5604:	9800      	ldr	r0, [sp, #0]
    5606:	b900      	cbnz	r0, 560a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5608:	b662      	cpsie	i
    560a:	4629      	mov	r1, r5
    560c:	4620      	mov	r0, r4
    560e:	f008 f9e9 	bl	d9e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5612:	b928      	cbnz	r0, 5620 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    5614:	4639      	mov	r1, r7
    5616:	4620      	mov	r0, r4
    5618:	f008 f9e4 	bl	d9e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    561c:	2800      	cmp	r0, #0
    561e:	d0d7      	beq.n	55d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    5620:	4639      	mov	r1, r7
    5622:	4620      	mov	r0, r4
    5624:	f008 f9de 	bl	d9e4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5628:	2800      	cmp	r0, #0
    562a:	d1c4      	bne.n	55b6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    562c:	b136      	cbz	r6, 563c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    562e:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    5632:	f109 0001 	add.w	r0, r9, #1
    5636:	f006 ffc0 	bl	c5ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    563a:	e012      	b.n	5662 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    563c:	f109 0001 	add.w	r0, r9, #1
    5640:	f006 ffbb 	bl	c5ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5644:	2800      	cmp	r0, #0
    5646:	d1ad      	bne.n	55a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5648:	2003      	movs	r0, #3
    564a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    564e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5652:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5656:	200e      	movs	r0, #14
    5658:	f008 f9b7 	bl	d9ca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    565c:	4803      	ldr	r0, [pc, #12]	; (566c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    565e:	f006 ffc3 	bl	c5e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5662:	2000      	movs	r0, #0
    5664:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5668:	4000e000 	.word	0x4000e000
    566c:	20000293 	.word	0x20000293
    5670:	e000ed10 	.word	0xe000ed10

00005674 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5674:	b510      	push	{r4, lr}
    5676:	4808      	ldr	r0, [pc, #32]	; (5698 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5678:	f006 ffb2 	bl	c5e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    567c:	b108      	cbz	r0, 5682 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    567e:	2125      	movs	r1, #37	; 0x25
    5680:	e006      	b.n	5690 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    5682:	4805      	ldr	r0, [pc, #20]	; (5698 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5684:	1c40      	adds	r0, r0, #1
    5686:	f006 ffab 	bl	c5e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    568a:	2800      	cmp	r0, #0
    568c:	d003      	beq.n	5696 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    568e:	2129      	movs	r1, #41	; 0x29
    5690:	201d      	movs	r0, #29
    5692:	f7ff f9db 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5696:	bd10      	pop	{r4, pc}
    5698:	20000293 	.word	0x20000293

0000569c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    569c:	b570      	push	{r4, r5, r6, lr}
    569e:	4911      	ldr	r1, [pc, #68]	; (56e4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    56a0:	680a      	ldr	r2, [r1, #0]
    56a2:	b1ea      	cbz	r2, 56e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    56a4:	2300      	movs	r3, #0
    56a6:	461d      	mov	r5, r3
    56a8:	2401      	movs	r4, #1
    56aa:	684a      	ldr	r2, [r1, #4]
    56ac:	1c52      	adds	r2, r2, #1
    56ae:	604a      	str	r2, [r1, #4]
    56b0:	2a09      	cmp	r2, #9
    56b2:	d300      	bcc.n	56b6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    56b4:	604d      	str	r5, [r1, #4]
    56b6:	790e      	ldrb	r6, [r1, #4]
    56b8:	fa04 f206 	lsl.w	r2, r4, r6
    56bc:	680e      	ldr	r6, [r1, #0]
    56be:	4216      	tst	r6, r2
    56c0:	d00b      	beq.n	56da <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    56c2:	f3ef 8310 	mrs	r3, PRIMASK
    56c6:	b672      	cpsid	i
    56c8:	680c      	ldr	r4, [r1, #0]
    56ca:	4394      	bics	r4, r2
    56cc:	600c      	str	r4, [r1, #0]
    56ce:	b903      	cbnz	r3, 56d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    56d0:	b662      	cpsie	i
    56d2:	6849      	ldr	r1, [r1, #4]
    56d4:	6001      	str	r1, [r0, #0]
    56d6:	2000      	movs	r0, #0
    56d8:	bd70      	pop	{r4, r5, r6, pc}
    56da:	1c5b      	adds	r3, r3, #1
    56dc:	2b09      	cmp	r3, #9
    56de:	d3e4      	bcc.n	56aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    56e0:	2005      	movs	r0, #5
    56e2:	bd70      	pop	{r4, r5, r6, pc}
    56e4:	20000088 	.word	0x20000088

000056e8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    56e8:	4802      	ldr	r0, [pc, #8]	; (56f4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    56ea:	2100      	movs	r1, #0
    56ec:	6001      	str	r1, [r0, #0]
    56ee:	6041      	str	r1, [r0, #4]
    56f0:	4770      	bx	lr
    56f2:	0000      	.short	0x0000
    56f4:	20000088 	.word	0x20000088

000056f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    56f8:	b510      	push	{r4, lr}
    56fa:	4c08      	ldr	r4, [pc, #32]	; (571c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    56fc:	7861      	ldrb	r1, [r4, #1]
    56fe:	b109      	cbz	r1, 5704 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5700:	200f      	movs	r0, #15
    5702:	bd10      	pop	{r4, pc}
    5704:	f7fe ffa8 	bl	4658 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5708:	7020      	strb	r0, [r4, #0]
    570a:	28ff      	cmp	r0, #255	; 0xff
    570c:	d001      	beq.n	5712 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    570e:	2000      	movs	r0, #0
    5710:	bd10      	pop	{r4, pc}
    5712:	2176      	movs	r1, #118	; 0x76
    5714:	201f      	movs	r0, #31
    5716:	f7ff f999 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    571a:	0000      	.short	0x0000
    571c:	20000090 	.word	0x20000090

00005720 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5720:	4901      	ldr	r1, [pc, #4]	; (5728 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5722:	2000      	movs	r0, #0
    5724:	7048      	strb	r0, [r1, #1]
    5726:	4770      	bx	lr
    5728:	20000090 	.word	0x20000090

0000572c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    572c:	4806      	ldr	r0, [pc, #24]	; (5748 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    572e:	4a07      	ldr	r2, [pc, #28]	; (574c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5730:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5732:	8852      	ldrh	r2, [r2, #2]
    5734:	4291      	cmp	r1, r2
    5736:	d104      	bne.n	5742 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5738:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    573c:	b108      	cbz	r0, 5742 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    573e:	2000      	movs	r0, #0
    5740:	4770      	bx	lr
    5742:	2001      	movs	r0, #1
    5744:	4770      	bx	lr
    5746:	0000      	.short	0x0000
    5748:	20001418 	.word	0x20001418
    574c:	20000278 	.word	0x20000278

00005750 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5750:	4901      	ldr	r1, [pc, #4]	; (5758 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5752:	8048      	strh	r0, [r1, #2]
    5754:	4770      	bx	lr
    5756:	0000      	.short	0x0000
    5758:	20000278 	.word	0x20000278

0000575c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    575c:	4808      	ldr	r0, [pc, #32]	; (5780 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    575e:	4a09      	ldr	r2, [pc, #36]	; (5784 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5760:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5762:	8852      	ldrh	r2, [r2, #2]
    5764:	4291      	cmp	r1, r2
    5766:	d109      	bne.n	577c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5768:	f64f 71ff 	movw	r1, #65535	; 0xffff
    576c:	8481      	strh	r1, [r0, #36]	; 0x24
    576e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5772:	b119      	cbz	r1, 577c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5774:	2100      	movs	r1, #0
    5776:	7001      	strb	r1, [r0, #0]
    5778:	2001      	movs	r0, #1
    577a:	4770      	bx	lr
    577c:	2000      	movs	r0, #0
    577e:	4770      	bx	lr
    5780:	20001418 	.word	0x20001418
    5784:	20000278 	.word	0x20000278

00005788 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5788:	4807      	ldr	r0, [pc, #28]	; (57a8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    578a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    578e:	2901      	cmp	r1, #1
    5790:	d007      	beq.n	57a2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5792:	2101      	movs	r1, #1
    5794:	7001      	strb	r1, [r0, #0]
    5796:	4805      	ldr	r0, [pc, #20]	; (57ac <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5798:	4903      	ldr	r1, [pc, #12]	; (57a8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    579a:	8800      	ldrh	r0, [r0, #0]
    579c:	8488      	strh	r0, [r1, #36]	; 0x24
    579e:	2001      	movs	r0, #1
    57a0:	4770      	bx	lr
    57a2:	2000      	movs	r0, #0
    57a4:	4770      	bx	lr
    57a6:	0000      	.short	0x0000
    57a8:	20001418 	.word	0x20001418
    57ac:	20000278 	.word	0x20000278

000057b0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    57b0:	4906      	ldr	r1, [pc, #24]	; (57cc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    57b2:	4b07      	ldr	r3, [pc, #28]	; (57d0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    57b4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    57b6:	885b      	ldrh	r3, [r3, #2]
    57b8:	429a      	cmp	r2, r3
    57ba:	d105      	bne.n	57c8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    57bc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    57c0:	b112      	cbz	r2, 57c8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    57c2:	6001      	str	r1, [r0, #0]
    57c4:	2001      	movs	r0, #1
    57c6:	4770      	bx	lr
    57c8:	2000      	movs	r0, #0
    57ca:	4770      	bx	lr
    57cc:	20001418 	.word	0x20001418
    57d0:	20000278 	.word	0x20000278

000057d4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    57d4:	4909      	ldr	r1, [pc, #36]	; (57fc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    57d6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    57d8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    57dc:	3bff      	subs	r3, #255	; 0xff
    57de:	d002      	beq.n	57e6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    57e0:	2100      	movs	r1, #0
    57e2:	6001      	str	r1, [r0, #0]
    57e4:	e007      	b.n	57f6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    57e6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    57ea:	4904      	ldr	r1, [pc, #16]	; (57fc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    57ec:	2a01      	cmp	r2, #1
    57ee:	d002      	beq.n	57f6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    57f0:	6001      	str	r1, [r0, #0]
    57f2:	2001      	movs	r0, #1
    57f4:	4770      	bx	lr
    57f6:	2000      	movs	r0, #0
    57f8:	4770      	bx	lr
    57fa:	0000      	.short	0x0000
    57fc:	20001418 	.word	0x20001418

00005800 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5800:	4901      	ldr	r1, [pc, #4]	; (5808 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5802:	8008      	strh	r0, [r1, #0]
    5804:	4770      	bx	lr
    5806:	0000      	.short	0x0000
    5808:	20000278 	.word	0x20000278

0000580c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    580c:	4905      	ldr	r1, [pc, #20]	; (5824 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    580e:	2000      	movs	r0, #0
    5810:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5814:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5818:	8488      	strh	r0, [r1, #36]	; 0x24
    581a:	4903      	ldr	r1, [pc, #12]	; (5828 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    581c:	8008      	strh	r0, [r1, #0]
    581e:	8048      	strh	r0, [r1, #2]
    5820:	4770      	bx	lr
    5822:	0000      	.short	0x0000
    5824:	20001418 	.word	0x20001418
    5828:	20000278 	.word	0x20000278
    582c:	4905      	ldr	r1, [pc, #20]	; (5844 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    582e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5830:	4282      	cmp	r2, r0
    5832:	d105      	bne.n	5840 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5834:	2000      	movs	r0, #0
    5836:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    583a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    583e:	8488      	strh	r0, [r1, #36]	; 0x24
    5840:	4770      	bx	lr
    5842:	0000      	.short	0x0000
    5844:	20001418 	.word	0x20001418

00005848 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5848:	4a0a      	ldr	r2, [pc, #40]	; (5874 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    584a:	b110      	cbz	r0, 5852 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    584c:	2801      	cmp	r0, #1
    584e:	d007      	beq.n	5860 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5850:	e00e      	b.n	5870 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5852:	7850      	ldrb	r0, [r2, #1]
    5854:	b160      	cbz	r0, 5870 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5856:	f8d2 0002 	ldr.w	r0, [r2, #2]
    585a:	6008      	str	r0, [r1, #0]
    585c:	88d0      	ldrh	r0, [r2, #6]
    585e:	e004      	b.n	586a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5860:	7810      	ldrb	r0, [r2, #0]
    5862:	b128      	cbz	r0, 5870 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5864:	6890      	ldr	r0, [r2, #8]
    5866:	6008      	str	r0, [r1, #0]
    5868:	8990      	ldrh	r0, [r2, #12]
    586a:	8088      	strh	r0, [r1, #4]
    586c:	2001      	movs	r0, #1
    586e:	4770      	bx	lr
    5870:	2000      	movs	r0, #0
    5872:	4770      	bx	lr
    5874:	20000295 	.word	0x20000295

00005878 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5878:	4a08      	ldr	r2, [pc, #32]	; (589c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    587a:	2301      	movs	r3, #1
    587c:	b138      	cbz	r0, 588e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    587e:	2801      	cmp	r0, #1
    5880:	d104      	bne.n	588c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5882:	7013      	strb	r3, [r2, #0]
    5884:	6808      	ldr	r0, [r1, #0]
    5886:	6090      	str	r0, [r2, #8]
    5888:	8888      	ldrh	r0, [r1, #4]
    588a:	8190      	strh	r0, [r2, #12]
    588c:	4770      	bx	lr
    588e:	7053      	strb	r3, [r2, #1]
    5890:	6808      	ldr	r0, [r1, #0]
    5892:	f8c2 0002 	str.w	r0, [r2, #2]
    5896:	8888      	ldrh	r0, [r1, #4]
    5898:	80d0      	strh	r0, [r2, #6]
    589a:	4770      	bx	lr
    589c:	20000295 	.word	0x20000295

000058a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    58a0:	4906      	ldr	r1, [pc, #24]	; (58bc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    58a2:	b110      	cbz	r0, 58aa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    58a4:	2801      	cmp	r0, #1
    58a6:	d002      	beq.n	58ae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    58a8:	e005      	b.n	58b6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    58aa:	7848      	ldrb	r0, [r1, #1]
    58ac:	e000      	b.n	58b0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    58ae:	7808      	ldrb	r0, [r1, #0]
    58b0:	b108      	cbz	r0, 58b6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    58b2:	2001      	movs	r0, #1
    58b4:	4770      	bx	lr
    58b6:	2000      	movs	r0, #0
    58b8:	4770      	bx	lr
    58ba:	0000      	.short	0x0000
    58bc:	20000295 	.word	0x20000295

000058c0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    58c0:	4901      	ldr	r1, [pc, #4]	; (58c8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    58c2:	7448      	strb	r0, [r1, #17]
    58c4:	4770      	bx	lr
    58c6:	0000      	.short	0x0000
    58c8:	20000d72 	.word	0x20000d72

000058cc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    58cc:	4801      	ldr	r0, [pc, #4]	; (58d4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    58ce:	78c0      	ldrb	r0, [r0, #3]
    58d0:	4770      	bx	lr
    58d2:	0000      	.short	0x0000
    58d4:	200000ac 	.word	0x200000ac

000058d8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    58d8:	4801      	ldr	r0, [pc, #4]	; (58e0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    58da:	7900      	ldrb	r0, [r0, #4]
    58dc:	4770      	bx	lr
    58de:	0000      	.short	0x0000
    58e0:	200000ac 	.word	0x200000ac

000058e4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    58e4:	b578      	push	{r3, r4, r5, r6, lr}
    58e6:	4913      	ldr	r1, [pc, #76]	; (5934 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    58e8:	7c4a      	ldrb	r2, [r1, #17]
    58ea:	b30a      	cbz	r2, 5930 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    58ec:	7c0a      	ldrb	r2, [r1, #16]
    58ee:	f88d 2000 	strb.w	r2, [sp]
    58f2:	9a00      	ldr	r2, [sp, #0]
    58f4:	9200      	str	r2, [sp, #0]
    58f6:	f89d 2000 	ldrb.w	r2, [sp]
    58fa:	b1ca      	cbz	r2, 5930 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    58fc:	2300      	movs	r3, #0
    58fe:	f101 0210 	add.w	r2, r1, #16
    5902:	241a      	movs	r4, #26
    5904:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5908:	7c0e      	ldrb	r6, [r1, #16]
    590a:	f88d 6000 	strb.w	r6, [sp]
    590e:	9e00      	ldr	r6, [sp, #0]
    5910:	9600      	str	r6, [sp, #0]
    5912:	f89d 6000 	ldrb.w	r6, [sp]
    5916:	b14e      	cbz	r6, 592c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5918:	7013      	strb	r3, [r2, #0]
    591a:	7043      	strb	r3, [r0, #1]
    591c:	7004      	strb	r4, [r0, #0]
    591e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5922:	6046      	str	r6, [r0, #4]
    5924:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5928:	6086      	str	r6, [r0, #8]
    592a:	e7ed      	b.n	5908 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    592c:	2001      	movs	r0, #1
    592e:	bd78      	pop	{r3, r4, r5, r6, pc}
    5930:	2000      	movs	r0, #0
    5932:	bd78      	pop	{r3, r4, r5, r6, pc}
    5934:	20000d72 	.word	0x20000d72

00005938 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5938:	b510      	push	{r4, lr}
    593a:	4604      	mov	r4, r0
    593c:	f000 f956 	bl	5bec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5940:	b118      	cbz	r0, 594a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5942:	21bd      	movs	r1, #189	; 0xbd
    5944:	2027      	movs	r0, #39	; 0x27
    5946:	f7ff f881 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    594a:	4803      	ldr	r0, [pc, #12]	; (5958 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    594c:	2101      	movs	r1, #1
    594e:	f008 fc18 	bl	e182 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5952:	4802      	ldr	r0, [pc, #8]	; (595c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5954:	62c4      	str	r4, [r0, #44]	; 0x2c
    5956:	bd10      	pop	{r4, pc}
    5958:	20000d50 	.word	0x20000d50
    595c:	200000ac 	.word	0x200000ac

00005960 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5960:	4901      	ldr	r1, [pc, #4]	; (5968 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5962:	2001      	movs	r0, #1
    5964:	7188      	strb	r0, [r1, #6]
    5966:	4770      	bx	lr
    5968:	200000ac 	.word	0x200000ac

0000596c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5970:	4d5f      	ldr	r5, [pc, #380]	; (5af0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5972:	9c08      	ldr	r4, [sp, #32]
    5974:	782e      	ldrb	r6, [r5, #0]
    5976:	2e00      	cmp	r6, #0
    5978:	d16b      	bne.n	5a52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    597a:	2a00      	cmp	r2, #0
    597c:	d069      	beq.n	5a52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    597e:	2b00      	cmp	r3, #0
    5980:	d067      	beq.n	5a52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5982:	2c00      	cmp	r4, #0
    5984:	d065      	beq.n	5a52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5986:	f105 0614 	add.w	r6, r5, #20
    598a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    598e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5992:	2700      	movs	r7, #0
    5994:	71af      	strb	r7, [r5, #6]
    5996:	716f      	strb	r7, [r5, #5]
    5998:	70ef      	strb	r7, [r5, #3]
    599a:	70af      	strb	r7, [r5, #2]
    599c:	712f      	strb	r7, [r5, #4]
    599e:	81af      	strh	r7, [r5, #12]
    59a0:	81ef      	strh	r7, [r5, #14]
    59a2:	f000 f95b 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    59a6:	4606      	mov	r6, r0
    59a8:	f000 f952 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    59ac:	4604      	mov	r4, r0
    59ae:	f006 f825 	bl	b9fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    59b2:	f005 fcb9 	bl	b328 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    59b6:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    59ba:	f006 f8a5 	bl	bb08 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    59be:	f104 0018 	add.w	r0, r4, #24
    59c2:	f006 f97f 	bl	bcc4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    59c6:	6920      	ldr	r0, [r4, #16]
    59c8:	f006 f972 	bl	bcb0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    59cc:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    59d0:	f006 f996 	bl	bd00 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    59d4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    59d8:	6840      	ldr	r0, [r0, #4]
    59da:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    59de:	b108      	cbz	r0, 59e4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    59e0:	f005 ff56 	bl	b890 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    59e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    59e8:	2001      	movs	r0, #1
    59ea:	f005 fe81 	bl	b6f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    59ee:	2800      	cmp	r0, #0
    59f0:	d076      	beq.n	5ae0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    59f2:	4840      	ldr	r0, [pc, #256]	; (5af4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    59f4:	f005 fef8 	bl	b7e8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    59f8:	8820      	ldrh	r0, [r4, #0]
    59fa:	f7ff fc57 	bl	52ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    59fe:	6328      	str	r0, [r5, #48]	; 0x30
    5a00:	8820      	ldrh	r0, [r4, #0]
    5a02:	f7ff fc3d 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5a06:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5a0a:	6368      	str	r0, [r5, #52]	; 0x34
    5a0c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 5af8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    5a10:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5a14:	f109 0808 	add.w	r8, r9, #8
    5a18:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5a1c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5a1e:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5a22:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5a24:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5a28:	f000 f98a 	bl	5d40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5a2c:	4601      	mov	r1, r0
    5a2e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5a30:	46ba      	mov	sl, r7
    5a32:	f008 f93e 	bl	dcb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5a36:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5a38:	4281      	cmp	r1, r0
    5a3a:	d200      	bcs.n	5a3e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    5a3c:	4608      	mov	r0, r1
    5a3e:	7228      	strb	r0, [r5, #8]
    5a40:	46a8      	mov	r8, r5
    5a42:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5a46:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5a48:	7cf7      	ldrb	r7, [r6, #19]
    5a4a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5a4c:	2908      	cmp	r1, #8
    5a4e:	d104      	bne.n	5a5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    5a50:	e002      	b.n	5a58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5a52:	f44f 718a 	mov.w	r1, #276	; 0x114
    5a56:	e047      	b.n	5ae8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    5a58:	2104      	movs	r1, #4
    5a5a:	f008 f92a 	bl	dcb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5a5e:	b90f      	cbnz	r7, 5a64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    5a60:	1d00      	adds	r0, r0, #4
    5a62:	b280      	uxth	r0, r0
    5a64:	4285      	cmp	r5, r0
    5a66:	d200      	bcs.n	5a6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5a68:	4628      	mov	r0, r5
    5a6a:	b2c5      	uxtb	r5, r0
    5a6c:	f888 5009 	strb.w	r5, [r8, #9]
    5a70:	7cf1      	ldrb	r1, [r6, #19]
    5a72:	2900      	cmp	r1, #0
    5a74:	d002      	beq.n	5a7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5a76:	bf00      	nop
    5a78:	f04f 0104 	mov.w	r1, #4
    5a7c:	4429      	add	r1, r5
    5a7e:	f888 1007 	strb.w	r1, [r8, #7]
    5a82:	4657      	mov	r7, sl
    5a84:	d016      	beq.n	5ab4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    5a86:	481c      	ldr	r0, [pc, #112]	; (5af8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5a88:	f04f 0101 	mov.w	r1, #1
    5a8c:	f100 0008 	add.w	r0, r0, #8
    5a90:	7601      	strb	r1, [r0, #24]
    5a92:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5a96:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5a9a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5a9e:	f008 f80e 	bl	dabe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5aa2:	4915      	ldr	r1, [pc, #84]	; (5af8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5aa4:	4603      	mov	r3, r0
    5aa6:	462a      	mov	r2, r5
    5aa8:	3108      	adds	r1, #8
    5aaa:	2001      	movs	r0, #1
    5aac:	f005 fc86 	bl	b3bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5ab0:	f005 fcba 	bl	b428 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5ab4:	2001      	movs	r0, #1
    5ab6:	f000 fb73 	bl	61a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5aba:	4810      	ldr	r0, [pc, #64]	; (5afc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    5abc:	6800      	ldr	r0, [r0, #0]
    5abe:	2803      	cmp	r0, #3
    5ac0:	d010      	beq.n	5ae4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    5ac2:	280b      	cmp	r0, #11
    5ac4:	d00e      	beq.n	5ae4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    5ac6:	4648      	mov	r0, r9
    5ac8:	f840 7f52 	str.w	r7, [r0, #82]!
    5acc:	6047      	str	r7, [r0, #4]
    5ace:	480a      	ldr	r0, [pc, #40]	; (5af8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5ad0:	88b1      	ldrh	r1, [r6, #4]
    5ad2:	3052      	adds	r0, #82	; 0x52
    5ad4:	8041      	strh	r1, [r0, #2]
    5ad6:	8821      	ldrh	r1, [r4, #0]
    5ad8:	8001      	strh	r1, [r0, #0]
    5ada:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5ade:	7101      	strb	r1, [r0, #4]
    5ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ae4:	f240 11c1 	movw	r1, #449	; 0x1c1
    5ae8:	2027      	movs	r0, #39	; 0x27
    5aea:	f7fe ffaf 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5aee:	0000      	.short	0x0000
    5af0:	200000ac 	.word	0x200000ac
    5af4:	000063a4 	.word	0x000063a4
    5af8:	20000d20 	.word	0x20000d20
    5afc:	40001550 	.word	0x40001550

00005b00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b04:	4605      	mov	r5, r0
    5b06:	f000 f8a9 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5b0a:	4e33      	ldr	r6, [pc, #204]	; (5bd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5b0c:	4604      	mov	r4, r0
    5b0e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5b10:	7847      	ldrb	r7, [r0, #1]
    5b12:	b10d      	cbz	r5, 5b18 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5b14:	2d01      	cmp	r5, #1
    5b16:	d103      	bne.n	5b20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5b18:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5b1a:	f006 ff50 	bl	c9be <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5b1e:	7070      	strb	r0, [r6, #1]
    5b20:	7870      	ldrb	r0, [r6, #1]
    5b22:	f04f 0800 	mov.w	r8, #0
    5b26:	f04f 0901 	mov.w	r9, #1
    5b2a:	b150      	cbz	r0, 5b42 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5b2c:	2801      	cmp	r0, #1
    5b2e:	d01a      	beq.n	5b66 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5b30:	2802      	cmp	r0, #2
    5b32:	d034      	beq.n	5b9e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5b34:	2803      	cmp	r0, #3
    5b36:	d048      	beq.n	5bca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5b38:	f240 4115 	movw	r1, #1045	; 0x415
    5b3c:	2027      	movs	r0, #39	; 0x27
    5b3e:	f7fe ff85 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b42:	2d01      	cmp	r5, #1
    5b44:	d032      	beq.n	5bac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5b46:	f000 f8e7 	bl	5d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5b4a:	4639      	mov	r1, r7
    5b4c:	2201      	movs	r2, #1
    5b4e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5b50:	f007 fb5c 	bl	d20c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5b54:	e028      	b.n	5ba8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5b56:	bf00      	nop
    5b58:	f884 8008 	strb.w	r8, [r4, #8]
    5b5c:	e031      	b.n	5bc2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5b5e:	bf00      	nop
    5b60:	f884 9008 	strb.w	r9, [r4, #8]
    5b64:	e02d      	b.n	5bc2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5b66:	2d01      	cmp	r5, #1
    5b68:	d008      	beq.n	5b7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5b6a:	f000 f8d5 	bl	5d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5b6e:	4639      	mov	r1, r7
    5b70:	2200      	movs	r2, #0
    5b72:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5b74:	f007 fb4a 	bl	d20c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5b78:	2d02      	cmp	r5, #2
    5b7a:	d00b      	beq.n	5b94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5b7c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5b80:	1c40      	adds	r0, r0, #1
    5b82:	f141 0100 	adc.w	r1, r1, #0
    5b86:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5b8a:	7a20      	ldrb	r0, [r4, #8]
    5b8c:	2801      	cmp	r0, #1
    5b8e:	d003      	beq.n	5b98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5b90:	f884 9008 	strb.w	r9, [r4, #8]
    5b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b98:	f884 8008 	strb.w	r8, [r4, #8]
    5b9c:	e7fa      	b.n	5b94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5b9e:	2d01      	cmp	r5, #1
    5ba0:	d004      	beq.n	5bac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5ba2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ba4:	f007 fd43 	bl	d62e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ba8:	2d02      	cmp	r5, #2
    5baa:	d0f3      	beq.n	5b94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5bac:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5bb0:	1c40      	adds	r0, r0, #1
    5bb2:	f141 0100 	adc.w	r1, r1, #0
    5bb6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5bba:	7a20      	ldrb	r0, [r4, #8]
    5bbc:	2801      	cmp	r0, #1
    5bbe:	d1cf      	bne.n	5b60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5bc0:	e7ca      	b.n	5b58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5bc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bc6:	f001 b8cd 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5bca:	2d01      	cmp	r5, #1
    5bcc:	d0e2      	beq.n	5b94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5bce:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5bd0:	f007 fd2d 	bl	d62e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5bd4:	e7f5      	b.n	5bc2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5bd6:	0000      	.short	0x0000
    5bd8:	200000ac 	.word	0x200000ac

00005bdc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5bdc:	4802      	ldr	r0, [pc, #8]	; (5be8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5bde:	89c0      	ldrh	r0, [r0, #14]
    5be0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5be4:	4770      	bx	lr
    5be6:	0000      	.short	0x0000
    5be8:	200000ac 	.word	0x200000ac

00005bec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5bec:	4804      	ldr	r0, [pc, #16]	; (5c00 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5bee:	7800      	ldrb	r0, [r0, #0]
    5bf0:	b108      	cbz	r0, 5bf6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5bf2:	200c      	movs	r0, #12
    5bf4:	4770      	bx	lr
    5bf6:	4903      	ldr	r1, [pc, #12]	; (5c04 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5bf8:	2000      	movs	r0, #0
    5bfa:	7448      	strb	r0, [r1, #17]
    5bfc:	4770      	bx	lr
    5bfe:	0000      	.short	0x0000
    5c00:	200000ac 	.word	0x200000ac
    5c04:	20000d72 	.word	0x20000d72

00005c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5c08:	480c      	ldr	r0, [pc, #48]	; (5c3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5c0a:	b510      	push	{r4, lr}
    5c0c:	7801      	ldrb	r1, [r0, #0]
    5c0e:	b149      	cbz	r1, 5c24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5c10:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5c14:	7800      	ldrb	r0, [r0, #0]
    5c16:	2802      	cmp	r0, #2
    5c18:	d008      	beq.n	5c2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5c1a:	f240 11dd 	movw	r1, #477	; 0x1dd
    5c1e:	2027      	movs	r0, #39	; 0x27
    5c20:	f7fe ff14 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c28:	f000 b9d8 	b.w	5fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5c2c:	6848      	ldr	r0, [r1, #4]
    5c2e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    5c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5c36:	f005 bddf 	b.w	b7f8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5c3a:	0000      	.short	0x0000
    5c3c:	200000ac 	.word	0x200000ac
    5c40:	4a02      	ldr	r2, [pc, #8]	; (5c4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5c42:	8993      	ldrh	r3, [r2, #12]
    5c44:	4303      	orrs	r3, r0
    5c46:	8193      	strh	r3, [r2, #12]
    5c48:	6952      	ldr	r2, [r2, #20]
    5c4a:	4710      	bx	r2
    5c4c:	200000ac 	.word	0x200000ac
    5c50:	4801      	ldr	r0, [pc, #4]	; (5c58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5c52:	6840      	ldr	r0, [r0, #4]
    5c54:	4770      	bx	lr
    5c56:	0000      	.short	0x0000
    5c58:	200000e4 	.word	0x200000e4
    5c5c:	4801      	ldr	r0, [pc, #4]	; (5c64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5c5e:	6840      	ldr	r0, [r0, #4]
    5c60:	3070      	adds	r0, #112	; 0x70
    5c62:	4770      	bx	lr
    5c64:	200000e4 	.word	0x200000e4
    5c68:	4a01      	ldr	r2, [pc, #4]	; (5c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5c6a:	2100      	movs	r1, #0
    5c6c:	6952      	ldr	r2, [r2, #20]
    5c6e:	4710      	bx	r2
    5c70:	200000ac 	.word	0x200000ac
    5c74:	b570      	push	{r4, r5, r6, lr}
    5c76:	f7ff fff1 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5c7a:	4604      	mov	r4, r0
    5c7c:	f7ff ffe8 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5c80:	4605      	mov	r5, r0
    5c82:	4621      	mov	r1, r4
    5c84:	f008 f898 	bl	ddb8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5c88:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5c8c:	2901      	cmp	r1, #1
    5c8e:	d114      	bne.n	5cba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5c90:	2800      	cmp	r0, #0
    5c92:	d012      	beq.n	5cba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5c94:	4809      	ldr	r0, [pc, #36]	; (5cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5c96:	6842      	ldr	r2, [r0, #4]
    5c98:	8828      	ldrh	r0, [r5, #0]
    5c9a:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    5c9e:	7a60      	ldrb	r0, [r4, #9]
    5ca0:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    5ca4:	7aa0      	ldrb	r0, [r4, #10]
    5ca6:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    5caa:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    5cae:	2001      	movs	r0, #1
    5cb0:	7010      	strb	r0, [r2, #0]
    5cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cb6:	f001 b855 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5cba:	bd70      	pop	{r4, r5, r6, pc}
    5cbc:	200000e4 	.word	0x200000e4
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	4605      	mov	r5, r0
    5cc4:	2901      	cmp	r1, #1
    5cc6:	d818      	bhi.n	5cfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5cc8:	4c12      	ldr	r4, [pc, #72]	; (5d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5cca:	69a1      	ldr	r1, [r4, #24]
    5ccc:	4788      	blx	r1
    5cce:	b1a0      	cbz	r0, 5cfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5cd0:	7960      	ldrb	r0, [r4, #5]
    5cd2:	b990      	cbnz	r0, 5cfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5cd4:	b9e5      	cbnz	r5, 5d10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5cd6:	f104 0010 	add.w	r0, r4, #16
    5cda:	7801      	ldrb	r1, [r0, #0]
    5cdc:	06c8      	lsls	r0, r1, #27
    5cde:	d405      	bmi.n	5cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5ce0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5ce2:	7800      	ldrb	r0, [r0, #0]
    5ce4:	06c0      	lsls	r0, r0, #27
    5ce6:	d401      	bmi.n	5cec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5ce8:	2001      	movs	r0, #1
    5cea:	e000      	b.n	5cee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5cec:	2000      	movs	r0, #0
    5cee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5cf0:	b92a      	cbnz	r2, 5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5cf2:	8962      	ldrh	r2, [r4, #10]
    5cf4:	b11a      	cbz	r2, 5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5cf6:	06c9      	lsls	r1, r1, #27
    5cf8:	d401      	bmi.n	5cfe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5cfa:	2001      	movs	r0, #1
    5cfc:	bd70      	pop	{r4, r5, r6, pc}
    5cfe:	89a1      	ldrh	r1, [r4, #12]
    5d00:	078a      	lsls	r2, r1, #30
    5d02:	d503      	bpl.n	5d0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5d04:	6a22      	ldr	r2, [r4, #32]
    5d06:	78d2      	ldrb	r2, [r2, #3]
    5d08:	2a02      	cmp	r2, #2
    5d0a:	d001      	beq.n	5d10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5d0c:	4308      	orrs	r0, r1
    5d0e:	d1f4      	bne.n	5cfa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5d10:	2000      	movs	r0, #0
    5d12:	bd70      	pop	{r4, r5, r6, pc}
    5d14:	200000ac 	.word	0x200000ac
    5d18:	b510      	push	{r4, lr}
    5d1a:	4c08      	ldr	r4, [pc, #32]	; (5d3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5d1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d1e:	b138      	cbz	r0, 5d30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5d20:	8962      	ldrh	r2, [r4, #10]
    5d22:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5d24:	1cd2      	adds	r2, r2, #3
    5d26:	f006 fcf1 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5d2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5d2c:	6260      	str	r0, [r4, #36]	; 0x24
    5d2e:	bd10      	pop	{r4, pc}
    5d30:	f240 415b 	movw	r1, #1115	; 0x45b
    5d34:	2027      	movs	r0, #39	; 0x27
    5d36:	f7fe fe89 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d3a:	0000      	.short	0x0000
    5d3c:	200000ac 	.word	0x200000ac
    5d40:	b510      	push	{r4, lr}
    5d42:	f7ff ff85 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5d46:	4604      	mov	r4, r0
    5d48:	f7ff ff88 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5d4c:	4601      	mov	r1, r0
    5d4e:	7b42      	ldrb	r2, [r0, #13]
    5d50:	4815      	ldr	r0, [pc, #84]	; (5da8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5d52:	2a24      	cmp	r2, #36	; 0x24
    5d54:	d00e      	beq.n	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5d56:	7b89      	ldrb	r1, [r1, #14]
    5d58:	2924      	cmp	r1, #36	; 0x24
    5d5a:	d00b      	beq.n	5d74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5d5c:	2a1f      	cmp	r2, #31
    5d5e:	d00d      	beq.n	5d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5d60:	2a20      	cmp	r2, #32
    5d62:	d00b      	beq.n	5d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5d64:	2922      	cmp	r1, #34	; 0x22
    5d66:	d00f      	beq.n	5d88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5d68:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5d6c:	2804      	cmp	r0, #4
    5d6e:	d100      	bne.n	5d72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5d70:	2008      	movs	r0, #8
    5d72:	bd10      	pop	{r4, pc}
    5d74:	6840      	ldr	r0, [r0, #4]
    5d76:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    5d7a:	e00e      	b.n	5d9a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5d7c:	2922      	cmp	r1, #34	; 0x22
    5d7e:	d003      	beq.n	5d88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5d80:	6840      	ldr	r0, [r0, #4]
    5d82:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    5d86:	e005      	b.n	5d94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5d88:	6841      	ldr	r1, [r0, #4]
    5d8a:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    5d8e:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5d92:	4008      	ands	r0, r1
    5d94:	f007 fe89 	bl	daaa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5d98:	4601      	mov	r1, r0
    5d9a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5da2:	f007 be9a 	b.w	dada <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5da6:	0000      	.short	0x0000
    5da8:	200000e4 	.word	0x200000e4
    5dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5db0:	4688      	mov	r8, r1
    5db2:	4607      	mov	r7, r0
    5db4:	f7ff ff52 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5db8:	4c57      	ldr	r4, [pc, #348]	; (5f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    5dba:	2600      	movs	r6, #0
    5dbc:	4605      	mov	r5, r0
    5dbe:	f88d 6000 	strb.w	r6, [sp]
    5dc2:	7820      	ldrb	r0, [r4, #0]
    5dc4:	2802      	cmp	r0, #2
    5dc6:	d004      	beq.n	5dd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    5dc8:	f240 41ba 	movw	r1, #1210	; 0x4ba
    5dcc:	2027      	movs	r0, #39	; 0x27
    5dce:	f7fe fe3d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dd2:	7ba0      	ldrb	r0, [r4, #14]
    5dd4:	0640      	lsls	r0, r0, #25
    5dd6:	d406      	bmi.n	5de6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5dd8:	2040      	movs	r0, #64	; 0x40
    5dda:	f7ff ff45 	bl	5c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5dde:	89e0      	ldrh	r0, [r4, #14]
    5de0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5de4:	81e0      	strh	r0, [r4, #14]
    5de6:	7ce8      	ldrb	r0, [r5, #19]
    5de8:	b3c7      	cbz	r7, 5e5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    5dea:	f005 fb4d 	bl	b488 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5dee:	f005 fb31 	bl	b454 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5df2:	b968      	cbnz	r0, 5e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5df4:	7ce8      	ldrb	r0, [r5, #19]
    5df6:	b158      	cbz	r0, 5e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5df8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5dfa:	7841      	ldrb	r1, [r0, #1]
    5dfc:	b141      	cbz	r1, 5e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5dfe:	7800      	ldrb	r0, [r0, #0]
    5e00:	7a29      	ldrb	r1, [r5, #8]
    5e02:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5e06:	4288      	cmp	r0, r1
    5e08:	d102      	bne.n	5e10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5e0a:	2001      	movs	r0, #1
    5e0c:	70a0      	strb	r0, [r4, #2]
    5e0e:	e063      	b.n	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    5e10:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5e12:	7841      	ldrb	r1, [r0, #1]
    5e14:	8161      	strh	r1, [r4, #10]
    5e16:	b121      	cbz	r1, 5e22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5e18:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5e1a:	f007 fbd5 	bl	d5c8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5e1e:	62a0      	str	r0, [r4, #40]	; 0x28
    5e20:	e000      	b.n	5e24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5e22:	62a6      	str	r6, [r4, #40]	; 0x28
    5e24:	89e0      	ldrh	r0, [r4, #14]
    5e26:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5e2a:	81e0      	strh	r0, [r4, #14]
    5e2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5e2e:	79e9      	ldrb	r1, [r5, #7]
    5e30:	7800      	ldrb	r0, [r0, #0]
    5e32:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5e36:	4288      	cmp	r0, r1
    5e38:	d005      	beq.n	5e46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    5e3a:	f000 f963 	bl	6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    5e3e:	89e0      	ldrh	r0, [r4, #14]
    5e40:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5e44:	81e0      	strh	r0, [r4, #14]
    5e46:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5e48:	7a29      	ldrb	r1, [r5, #8]
    5e4a:	7800      	ldrb	r0, [r0, #0]
    5e4c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5e50:	4288      	cmp	r0, r1
    5e52:	d10e      	bne.n	5e72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5e54:	4668      	mov	r0, sp
    5e56:	f000 f917 	bl	6088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    5e5a:	e00a      	b.n	5e72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5e5c:	e7ff      	b.n	5e5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    5e5e:	b108      	cbz	r0, 5e64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5e60:	f005 fb0c 	bl	b47c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5e64:	78e0      	ldrb	r0, [r4, #3]
    5e66:	1c40      	adds	r0, r0, #1
    5e68:	70e0      	strb	r0, [r4, #3]
    5e6a:	89e0      	ldrh	r0, [r4, #14]
    5e6c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5e70:	81e0      	strh	r0, [r4, #14]
    5e72:	7ca8      	ldrb	r0, [r5, #18]
    5e74:	b198      	cbz	r0, 5e9e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    5e76:	f7ff feeb 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5e7a:	4928      	ldr	r1, [pc, #160]	; (5f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5e7c:	760e      	strb	r6, [r1, #24]
    5e7e:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    5e82:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5e86:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5e8a:	f007 fe18 	bl	dabe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5e8e:	4603      	mov	r3, r0
    5e90:	22fb      	movs	r2, #251	; 0xfb
    5e92:	4922      	ldr	r1, [pc, #136]	; (5f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5e94:	2000      	movs	r0, #0
    5e96:	f005 fa91 	bl	b3bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5e9a:	f005 fac5 	bl	b428 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5e9e:	4d1f      	ldr	r5, [pc, #124]	; (5f1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5ea0:	354a      	adds	r5, #74	; 0x4a
    5ea2:	f1b8 0f00 	cmp.w	r8, #0
    5ea6:	d104      	bne.n	5eb2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    5ea8:	78e1      	ldrb	r1, [r4, #3]
    5eaa:	2001      	movs	r0, #1
    5eac:	f7ff ff08 	bl	5cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5eb0:	b1b0      	cbz	r0, 5ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    5eb2:	f005 fed9 	bl	bc68 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    5eb6:	f89d 0000 	ldrb.w	r0, [sp]
    5eba:	b110      	cbz	r0, 5ec2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5ebc:	2000      	movs	r0, #0
    5ebe:	f7ff fe1f 	bl	5b00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5ec2:	b137      	cbz	r7, 5ed2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5ec4:	70e6      	strb	r6, [r4, #3]
    5ec6:	7968      	ldrb	r0, [r5, #5]
    5ec8:	1c40      	adds	r0, r0, #1
    5eca:	7168      	strb	r0, [r5, #5]
    5ecc:	f7ff fed2 	bl	5c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ed0:	e002      	b.n	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    5ed2:	79a8      	ldrb	r0, [r5, #6]
    5ed4:	1c40      	adds	r0, r0, #1
    5ed6:	71a8      	strb	r0, [r5, #6]
    5ed8:	f000 f880 	bl	5fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ee0:	f89d 0000 	ldrb.w	r0, [sp]
    5ee4:	b110      	cbz	r0, 5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    5ee6:	2001      	movs	r0, #1
    5ee8:	f7ff fe0a 	bl	5b00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5eec:	2000      	movs	r0, #0
    5eee:	f000 f995 	bl	621c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    5ef2:	f89d 0000 	ldrb.w	r0, [sp]
    5ef6:	b110      	cbz	r0, 5efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    5ef8:	2002      	movs	r0, #2
    5efa:	f7ff fe01 	bl	5b00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5efe:	b137      	cbz	r7, 5f0e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5f00:	70e6      	strb	r6, [r4, #3]
    5f02:	7968      	ldrb	r0, [r5, #5]
    5f04:	1c40      	adds	r0, r0, #1
    5f06:	7168      	strb	r0, [r5, #5]
    5f08:	f7ff feb4 	bl	5c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5f0c:	e7e6      	b.n	5edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5f0e:	79a8      	ldrb	r0, [r5, #6]
    5f10:	1c40      	adds	r0, r0, #1
    5f12:	71a8      	strb	r0, [r5, #6]
    5f14:	e7e2      	b.n	5edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5f16:	0000      	.short	0x0000
    5f18:	200000ac 	.word	0x200000ac
    5f1c:	20000d28 	.word	0x20000d28
    5f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f24:	460f      	mov	r7, r1
    5f26:	4680      	mov	r8, r0
    5f28:	f7ff fe98 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f2c:	4d29      	ldr	r5, [pc, #164]	; (5fd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    5f2e:	4604      	mov	r4, r0
    5f30:	7828      	ldrb	r0, [r5, #0]
    5f32:	2801      	cmp	r0, #1
    5f34:	d004      	beq.n	5f40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5f36:	f240 416a 	movw	r1, #1130	; 0x46a
    5f3a:	2027      	movs	r0, #39	; 0x27
    5f3c:	f7fe fd86 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f40:	7861      	ldrb	r1, [r4, #1]
    5f42:	2000      	movs	r0, #0
    5f44:	2601      	movs	r6, #1
    5f46:	b129      	cbz	r1, 5f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5f48:	7060      	strb	r0, [r4, #1]
    5f4a:	2100      	movs	r1, #0
    5f4c:	2004      	movs	r0, #4
    5f4e:	f7ff fe77 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5f52:	70e6      	strb	r6, [r4, #3]
    5f54:	6a29      	ldr	r1, [r5, #32]
    5f56:	7808      	ldrb	r0, [r1, #0]
    5f58:	43c0      	mvns	r0, r0
    5f5a:	0780      	lsls	r0, r0, #30
    5f5c:	d109      	bne.n	5f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    5f5e:	79a0      	ldrb	r0, [r4, #6]
    5f60:	bb88      	cbnz	r0, 5fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5f62:	2002      	movs	r0, #2
    5f64:	f7ff fe6c 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5f68:	6a28      	ldr	r0, [r5, #32]
    5f6a:	7800      	ldrb	r0, [r0, #0]
    5f6c:	43c0      	mvns	r0, r0
    5f6e:	0780      	lsls	r0, r0, #30
    5f70:	d029      	beq.n	5fc6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5f72:	6a28      	ldr	r0, [r5, #32]
    5f74:	7840      	ldrb	r0, [r0, #1]
    5f76:	b110      	cbz	r0, 5f7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    5f78:	2002      	movs	r0, #2
    5f7a:	71a0      	strb	r0, [r4, #6]
    5f7c:	e000      	b.n	5f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    5f7e:	71a6      	strb	r6, [r4, #6]
    5f80:	7ce0      	ldrb	r0, [r4, #19]
    5f82:	b1a0      	cbz	r0, 5fae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    5f84:	f7ff fe64 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f88:	4913      	ldr	r1, [pc, #76]	; (5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5f8a:	7a6d      	ldrb	r5, [r5, #9]
    5f8c:	760e      	strb	r6, [r1, #24]
    5f8e:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    5f92:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5f96:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5f9a:	f007 fd90 	bl	dabe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5f9e:	4603      	mov	r3, r0
    5fa0:	462a      	mov	r2, r5
    5fa2:	490d      	ldr	r1, [pc, #52]	; (5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    5fa4:	2001      	movs	r0, #1
    5fa6:	f005 fa09 	bl	b3bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5faa:	f005 fa3d 	bl	b428 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5fae:	ea37 0708 	bics.w	r7, r7, r8
    5fb2:	d004      	beq.n	5fbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    5fb4:	2100      	movs	r1, #0
    5fb6:	4608      	mov	r0, r1
    5fb8:	f7ff fe82 	bl	5cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    5fbc:	b128      	cbz	r0, 5fca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    5fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5fc2:	f000 b80b 	b.w	5fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5fc6:	2003      	movs	r0, #3
    5fc8:	e7d7      	b.n	5f7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    5fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5fce:	2000      	movs	r0, #0
    5fd0:	f000 b8e6 	b.w	61a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5fd4:	200000ac 	.word	0x200000ac
    5fd8:	20000d28 	.word	0x20000d28
    5fdc:	b510      	push	{r4, lr}
    5fde:	f005 faeb 	bl	b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5fe2:	f005 f9a1 	bl	b328 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5fe6:	4c0d      	ldr	r4, [pc, #52]	; (601c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    5fe8:	89e0      	ldrh	r0, [r4, #14]
    5fea:	f7ff fe3d 	bl	5c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5fee:	69e2      	ldr	r2, [r4, #28]
    5ff0:	7961      	ldrb	r1, [r4, #5]
    5ff2:	78a0      	ldrb	r0, [r4, #2]
    5ff4:	4790      	blx	r2
    5ff6:	480a      	ldr	r0, [pc, #40]	; (6020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5ff8:	7c40      	ldrb	r0, [r0, #17]
    5ffa:	b158      	cbz	r0, 6014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5ffc:	4808      	ldr	r0, [pc, #32]	; (6020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5ffe:	3852      	subs	r0, #82	; 0x52
    6000:	f850 1f52 	ldr.w	r1, [r0, #82]!
    6004:	6081      	str	r1, [r0, #8]
    6006:	6841      	ldr	r1, [r0, #4]
    6008:	60c1      	str	r1, [r0, #12]
    600a:	4805      	ldr	r0, [pc, #20]	; (6020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    600c:	2101      	movs	r1, #1
    600e:	7401      	strb	r1, [r0, #16]
    6010:	f000 fea8 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6014:	2000      	movs	r0, #0
    6016:	7020      	strb	r0, [r4, #0]
    6018:	bd10      	pop	{r4, pc}
    601a:	0000      	.short	0x0000
    601c:	200000ac 	.word	0x200000ac
    6020:	20000d72 	.word	0x20000d72
    6024:	4808      	ldr	r0, [pc, #32]	; (6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    6026:	b510      	push	{r4, lr}
    6028:	7800      	ldrb	r0, [r0, #0]
    602a:	2802      	cmp	r0, #2
    602c:	d004      	beq.n	6038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    602e:	f240 2111 	movw	r1, #529	; 0x211
    6032:	2027      	movs	r0, #39	; 0x27
    6034:	f7fe fd0a 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6038:	4904      	ldr	r1, [pc, #16]	; (604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    603a:	2001      	movs	r0, #1
    603c:	71c8      	strb	r0, [r1, #7]
    603e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6042:	f7ff bfcb 	b.w	5fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6046:	0000      	.short	0x0000
    6048:	200000ac 	.word	0x200000ac
    604c:	20000d72 	.word	0x20000d72
    6050:	b430      	push	{r4, r5}
    6052:	4b0c      	ldr	r3, [pc, #48]	; (6084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    6054:	b942      	cbnz	r2, 6068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6056:	79da      	ldrb	r2, [r3, #7]
    6058:	2aff      	cmp	r2, #255	; 0xff
    605a:	d105      	bne.n	6068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    605c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    6060:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    6064:	42a2      	cmp	r2, r4
    6066:	d00b      	beq.n	6080 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    6068:	b131      	cbz	r1, 6078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    606a:	79da      	ldrb	r2, [r3, #7]
    606c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    6070:	bc30      	pop	{r4, r5}
    6072:	4610      	mov	r0, r2
    6074:	f005 be30 	b.w	bcd8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    6078:	22ff      	movs	r2, #255	; 0xff
    607a:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    607e:	e7f7      	b.n	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    6080:	bc30      	pop	{r4, r5}
    6082:	4770      	bx	lr
    6084:	200000ac 	.word	0x200000ac
    6088:	b570      	push	{r4, r5, r6, lr}
    608a:	4606      	mov	r6, r0
    608c:	f7ff fde6 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6090:	4a1b      	ldr	r2, [pc, #108]	; (6100 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    6092:	4604      	mov	r4, r0
    6094:	2501      	movs	r5, #1
    6096:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6098:	7808      	ldrb	r0, [r1, #0]
    609a:	f000 0003 	and.w	r0, r0, #3
    609e:	2801      	cmp	r0, #1
    60a0:	d00c      	beq.n	60bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    60a2:	2802      	cmp	r0, #2
    60a4:	d00a      	beq.n	60bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    60a6:	2803      	cmp	r0, #3
    60a8:	d121      	bne.n	60ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    60aa:	7065      	strb	r5, [r4, #1]
    60ac:	89d0      	ldrh	r0, [r2, #14]
    60ae:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    60b2:	81d0      	strh	r0, [r2, #14]
    60b4:	2001      	movs	r0, #1
    60b6:	f7ff fdc3 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    60ba:	e018      	b.n	60ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    60bc:	7848      	ldrb	r0, [r1, #1]
    60be:	b1b0      	cbz	r0, 60ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    60c0:	89d1      	ldrh	r1, [r2, #14]
    60c2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    60c6:	81d1      	strh	r1, [r2, #14]
    60c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    60ca:	2900      	cmp	r1, #0
    60cc:	d009      	beq.n	60e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    60ce:	28fb      	cmp	r0, #251	; 0xfb
    60d0:	d808      	bhi.n	60e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    60d2:	7990      	ldrb	r0, [r2, #6]
    60d4:	b120      	cbz	r0, 60e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    60d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60da:	2020      	movs	r0, #32
    60dc:	f7ff bdc4 	b.w	5c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    60e0:	7035      	strb	r5, [r6, #0]
    60e2:	bd70      	pop	{r4, r5, r6, pc}
    60e4:	7950      	ldrb	r0, [r2, #5]
    60e6:	f040 0010 	orr.w	r0, r0, #16
    60ea:	7150      	strb	r0, [r2, #5]
    60ec:	bd70      	pop	{r4, r5, r6, pc}
    60ee:	7a20      	ldrb	r0, [r4, #8]
    60f0:	2801      	cmp	r0, #1
    60f2:	d001      	beq.n	60f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    60f4:	7225      	strb	r5, [r4, #8]
    60f6:	bd70      	pop	{r4, r5, r6, pc}
    60f8:	2000      	movs	r0, #0
    60fa:	7220      	strb	r0, [r4, #8]
    60fc:	bd70      	pop	{r4, r5, r6, pc}
    60fe:	0000      	.short	0x0000
    6100:	200000ac 	.word	0x200000ac
    6104:	b570      	push	{r4, r5, r6, lr}
    6106:	f7ff fda9 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    610a:	4604      	mov	r4, r0
    610c:	7980      	ldrb	r0, [r0, #6]
    610e:	2800      	cmp	r0, #0
    6110:	d02e      	beq.n	6170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    6112:	2802      	cmp	r0, #2
    6114:	d10d      	bne.n	6132 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6116:	481c      	ldr	r0, [pc, #112]	; (6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    6118:	6b00      	ldr	r0, [r0, #48]	; 0x30
    611a:	f007 f850 	bl	d1be <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    611e:	b340      	cbz	r0, 6172 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    6120:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6124:	1c40      	adds	r0, r0, #1
    6126:	f141 0100 	adc.w	r1, r1, #0
    612a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    612e:	f000 fe19 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6132:	2500      	movs	r5, #0
    6134:	71a5      	strb	r5, [r4, #6]
    6136:	78e0      	ldrb	r0, [r4, #3]
    6138:	b120      	cbz	r0, 6144 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    613a:	70e5      	strb	r5, [r4, #3]
    613c:	2100      	movs	r1, #0
    613e:	2010      	movs	r0, #16
    6140:	f7ff fd7e 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6144:	78a0      	ldrb	r0, [r4, #2]
    6146:	b170      	cbz	r0, 6166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    6148:	70a5      	strb	r5, [r4, #2]
    614a:	f7ff fb07 	bl	575c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    614e:	b198      	cbz	r0, 6178 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    6150:	2100      	movs	r1, #0
    6152:	2008      	movs	r0, #8
    6154:	f7ff fd74 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6158:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    615c:	1c40      	adds	r0, r0, #1
    615e:	f141 0100 	adc.w	r1, r1, #0
    6162:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    6166:	79e0      	ldrb	r0, [r4, #7]
    6168:	2801      	cmp	r0, #1
    616a:	d00a      	beq.n	6182 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    616c:	2001      	movs	r0, #1
    616e:	71e0      	strb	r0, [r4, #7]
    6170:	bd70      	pop	{r4, r5, r6, pc}
    6172:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    6176:	e001      	b.n	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    6178:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    617c:	2027      	movs	r0, #39	; 0x27
    617e:	f7fe fc65 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6182:	71e5      	strb	r5, [r4, #7]
    6184:	bd70      	pop	{r4, r5, r6, pc}
    6186:	0000      	.short	0x0000
    6188:	200000ac 	.word	0x200000ac
    618c:	4803      	ldr	r0, [pc, #12]	; (619c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    618e:	7800      	ldrb	r0, [r0, #0]
    6190:	2800      	cmp	r0, #0
    6192:	d001      	beq.n	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    6194:	f7ff bf22 	b.w	5fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6198:	4770      	bx	lr
    619a:	0000      	.short	0x0000
    619c:	200000ac 	.word	0x200000ac
    61a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61a4:	4606      	mov	r6, r0
    61a6:	f7ff fd53 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    61aa:	4680      	mov	r8, r0
    61ac:	f7ff fd56 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    61b0:	4c17      	ldr	r4, [pc, #92]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    61b2:	4605      	mov	r5, r0
    61b4:	4632      	mov	r2, r6
    61b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    61b8:	6260      	str	r0, [r4, #36]	; 0x24
    61ba:	2101      	movs	r1, #1
    61bc:	4640      	mov	r0, r8
    61be:	f7ff ff47 	bl	6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    61c2:	7ce8      	ldrb	r0, [r5, #19]
    61c4:	2700      	movs	r7, #0
    61c6:	b180      	cbz	r0, 61ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    61c8:	4812      	ldr	r0, [pc, #72]	; (6214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    61ca:	f005 fca3 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    61ce:	4812      	ldr	r0, [pc, #72]	; (6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    61d0:	2101      	movs	r1, #1
    61d2:	7601      	strb	r1, [r0, #24]
    61d4:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    61d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    61dc:	490d      	ldr	r1, [pc, #52]	; (6214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    61de:	6a60      	ldr	r0, [r4, #36]	; 0x24
    61e0:	f005 f874 	bl	b2cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    61e4:	f005 f886 	bl	b2f4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    61e8:	e004      	b.n	61f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    61ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    61ec:	f005 fc92 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    61f0:	f005 f89a 	bl	b328 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    61f4:	b916      	cbnz	r6, 61fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    61f6:	4638      	mov	r0, r7
    61f8:	f005 fb22 	bl	b840 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    61fc:	2100      	movs	r1, #0
    61fe:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6202:	4608      	mov	r0, r1
    6204:	f005 fd12 	bl	bc2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6208:	2002      	movs	r0, #2
    620a:	7020      	strb	r0, [r4, #0]
    620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6210:	200000ac 	.word	0x200000ac
    6214:	20000c20 	.word	0x20000c20
    6218:	20000d28 	.word	0x20000d28
    621c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6220:	4604      	mov	r4, r0
    6222:	f7ff fd1b 	bl	5c5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6226:	4605      	mov	r5, r0
    6228:	f7ff fd12 	bl	5c50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    622c:	4606      	mov	r6, r0
    622e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 6398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    6232:	4622      	mov	r2, r4
    6234:	2100      	movs	r1, #0
    6236:	f7ff ff0b 	bl	6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    623a:	79a8      	ldrb	r0, [r5, #6]
    623c:	2701      	movs	r7, #1
    623e:	f04f 0800 	mov.w	r8, #0
    6242:	f1a9 0420 	sub.w	r4, r9, #32
    6246:	b140      	cbz	r0, 625a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    6248:	2801      	cmp	r0, #1
    624a:	d01f      	beq.n	628c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    624c:	2802      	cmp	r0, #2
    624e:	d030      	beq.n	62b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    6250:	2803      	cmp	r0, #3
    6252:	d03c      	beq.n	62ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    6254:	f240 21ae 	movw	r1, #686	; 0x2ae
    6258:	e058      	b.n	630c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    625a:	7a20      	ldrb	r0, [r4, #8]
    625c:	2150      	movs	r1, #80	; 0x50
    625e:	f8ad 0004 	strh.w	r0, [sp, #4]
    6262:	5388      	strh	r0, [r1, r6]
    6264:	4648      	mov	r0, r9
    6266:	f7ff faa3 	bl	57b0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    626a:	b128      	cbz	r0, 6278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    626c:	2080      	movs	r0, #128	; 0x80
    626e:	6a21      	ldr	r1, [r4, #32]
    6270:	f7ff fce6 	bl	5c40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6274:	70af      	strb	r7, [r5, #2]
    6276:	e02e      	b.n	62d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6278:	466a      	mov	r2, sp
    627a:	a901      	add	r1, sp, #4
    627c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    627e:	f007 fc36 	bl	daee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6282:	6220      	str	r0, [r4, #32]
    6284:	b110      	cbz	r0, 628c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    6286:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    628a:	b111      	cbz	r1, 6292 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    628c:	4843      	ldr	r0, [pc, #268]	; (639c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    628e:	6220      	str	r0, [r4, #32]
    6290:	e021      	b.n	62d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6292:	f89d 1000 	ldrb.w	r1, [sp]
    6296:	b931      	cbnz	r1, 62a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6298:	f8a0 8000 	strh.w	r8, [r0]
    629c:	f880 8002 	strb.w	r8, [r0, #2]
    62a0:	2101      	movs	r1, #1
    62a2:	f007 ff6e 	bl	e182 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    62a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    62aa:	6a20      	ldr	r0, [r4, #32]
    62ac:	f007 ff2d 	bl	e10a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    62b0:	e011      	b.n	62d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    62b2:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    62b6:	f8ad 0004 	strh.w	r0, [sp, #4]
    62ba:	466a      	mov	r2, sp
    62bc:	a901      	add	r1, sp, #4
    62be:	6b20      	ldr	r0, [r4, #48]	; 0x30
    62c0:	f007 fc15 	bl	daee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    62c4:	6220      	str	r0, [r4, #32]
    62c6:	b930      	cbnz	r0, 62d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    62c8:	f240 219f 	movw	r1, #671	; 0x29f
    62cc:	e01e      	b.n	630c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    62ce:	4648      	mov	r0, r9
    62d0:	f7ff fa6e 	bl	57b0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    62d4:	b1c0      	cbz	r0, 6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    62d6:	6a20      	ldr	r0, [r4, #32]
    62d8:	2308      	movs	r3, #8
    62da:	7801      	ldrb	r1, [r0, #0]
    62dc:	f021 0108 	bic.w	r1, r1, #8
    62e0:	7001      	strb	r1, [r0, #0]
    62e2:	79ea      	ldrb	r2, [r5, #7]
    62e4:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    62e8:	4311      	orrs	r1, r2
    62ea:	f021 0104 	bic.w	r1, r1, #4
    62ee:	7001      	strb	r1, [r0, #0]
    62f0:	7a2a      	ldrb	r2, [r5, #8]
    62f2:	2304      	movs	r3, #4
    62f4:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    62f8:	4311      	orrs	r1, r2
    62fa:	f021 0110 	bic.w	r1, r1, #16
    62fe:	7001      	strb	r1, [r0, #0]
    6300:	43c9      	mvns	r1, r1
    6302:	0789      	lsls	r1, r1, #30
    6304:	d005      	beq.n	6312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    6306:	e007      	b.n	6318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    6308:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    630c:	2027      	movs	r0, #39	; 0x27
    630e:	f7fe fb9d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6312:	78c0      	ldrb	r0, [r0, #3]
    6314:	2802      	cmp	r0, #2
    6316:	d00f      	beq.n	6338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    6318:	6b20      	ldr	r0, [r4, #48]	; 0x30
    631a:	f007 f878 	bl	d40e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    631e:	b108      	cbz	r0, 6324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6320:	2101      	movs	r1, #1
    6322:	e00a      	b.n	633a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6324:	6a20      	ldr	r0, [r4, #32]
    6326:	7800      	ldrb	r0, [r0, #0]
    6328:	43c0      	mvns	r0, r0
    632a:	0780      	lsls	r0, r0, #30
    632c:	d004      	beq.n	6338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    632e:	f7ff f9fd 	bl	572c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6332:	f080 0101 	eor.w	r1, r0, #1
    6336:	e000      	b.n	633a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6338:	2100      	movs	r1, #0
    633a:	6a20      	ldr	r0, [r4, #32]
    633c:	7802      	ldrb	r2, [r0, #0]
    633e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6342:	7001      	strb	r1, [r0, #0]
    6344:	7ca9      	ldrb	r1, [r5, #18]
    6346:	b199      	cbz	r1, 6370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6348:	7841      	ldrb	r1, [r0, #1]
    634a:	b189      	cbz	r1, 6370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    634c:	4814      	ldr	r0, [pc, #80]	; (63a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    634e:	f005 fbe1 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6352:	4812      	ldr	r0, [pc, #72]	; (639c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    6354:	3828      	subs	r0, #40	; 0x28
    6356:	f880 8018 	strb.w	r8, [r0, #24]
    635a:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    635e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6362:	480f      	ldr	r0, [pc, #60]	; (63a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    6364:	6a21      	ldr	r1, [r4, #32]
    6366:	f004 ffb1 	bl	b2cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    636a:	f004 fffb 	bl	b364 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    636e:	e003      	b.n	6378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    6370:	f005 fbd0 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6374:	f004 ffd8 	bl	b328 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6378:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    637c:	2101      	movs	r1, #1
    637e:	2000      	movs	r0, #0
    6380:	f005 fc54 	bl	bc2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6384:	7127      	strb	r7, [r4, #4]
    6386:	6a20      	ldr	r0, [r4, #32]
    6388:	8801      	ldrh	r1, [r0, #0]
    638a:	8221      	strh	r1, [r4, #16]
    638c:	7880      	ldrb	r0, [r0, #2]
    638e:	74a0      	strb	r0, [r4, #18]
    6390:	7027      	strb	r7, [r4, #0]
    6392:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6396:	0000      	.short	0x0000
    6398:	200000cc 	.word	0x200000cc
    639c:	20000d50 	.word	0x20000d50
    63a0:	20000c20 	.word	0x20000c20
    63a4:	00006025 	.word	0x00006025
    63a8:	00005dad 	.word	0x00005dad
    63ac:	00005f21 	.word	0x00005f21
    63b0:	0000618d 	.word	0x0000618d

000063b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    63b4:	4800      	ldr	r0, [pc, #0]	; (63b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    63b6:	4770      	bx	lr
    63b8:	20001611 	.word	0x20001611

000063bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    63bc:	4904      	ldr	r1, [pc, #16]	; (63d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    63be:	788a      	ldrb	r2, [r1, #2]
    63c0:	4282      	cmp	r2, r0
    63c2:	d903      	bls.n	63cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    63c4:	4408      	add	r0, r1
    63c6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    63ca:	4770      	bx	lr
    63cc:	2000      	movs	r0, #0
    63ce:	4770      	bx	lr
    63d0:	2000143e 	.word	0x2000143e

000063d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    63d4:	4904      	ldr	r1, [pc, #16]	; (63e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    63d6:	788a      	ldrb	r2, [r1, #2]
    63d8:	4282      	cmp	r2, r0
    63da:	d903      	bls.n	63e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    63dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    63e0:	3083      	adds	r0, #131	; 0x83
    63e2:	4770      	bx	lr
    63e4:	2000      	movs	r0, #0
    63e6:	4770      	bx	lr
    63e8:	2000143e 	.word	0x2000143e

000063ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    63ec:	4a05      	ldr	r2, [pc, #20]	; (6404 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    63ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    63f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    63f6:	6802      	ldr	r2, [r0, #0]
    63f8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    63fc:	8880      	ldrh	r0, [r0, #4]
    63fe:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6402:	4770      	bx	lr
    6404:	2000143e 	.word	0x2000143e

00006408 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    640c:	460e      	mov	r6, r1
    640e:	4607      	mov	r7, r0
    6410:	4615      	mov	r5, r2
    6412:	2106      	movs	r1, #6
    6414:	4630      	mov	r0, r6
    6416:	f007 fd59 	bl	decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    641a:	4c0d      	ldr	r4, [pc, #52]	; (6450 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    641c:	b160      	cbz	r0, 6438 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    641e:	2000      	movs	r0, #0
    6420:	e004      	b.n	642c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    6422:	1821      	adds	r1, r4, r0
    6424:	1c40      	adds	r0, r0, #1
    6426:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    642a:	b2c0      	uxtb	r0, r0
    642c:	78a1      	ldrb	r1, [r4, #2]
    642e:	4281      	cmp	r1, r0
    6430:	d8f7      	bhi.n	6422 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6432:	2001      	movs	r0, #1
    6434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6438:	4631      	mov	r1, r6
    643a:	4638      	mov	r0, r7
    643c:	f007 fb66 	bl	db0c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6440:	2808      	cmp	r0, #8
    6442:	d003      	beq.n	644c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6444:	4420      	add	r0, r4
    6446:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    644a:	e7f2      	b.n	6432 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    644c:	2000      	movs	r0, #0
    644e:	e7f1      	b.n	6434 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6450:	2000143e 	.word	0x2000143e

00006454 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6454:	4904      	ldr	r1, [pc, #16]	; (6468 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6456:	788a      	ldrb	r2, [r1, #2]
    6458:	4282      	cmp	r2, r0
    645a:	d903      	bls.n	6464 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    645c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6460:	1cc0      	adds	r0, r0, #3
    6462:	4770      	bx	lr
    6464:	2000      	movs	r0, #0
    6466:	4770      	bx	lr
    6468:	2000143e 	.word	0x2000143e

0000646c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    646c:	b510      	push	{r4, lr}
    646e:	f240 12d3 	movw	r2, #467	; 0x1d3
    6472:	2100      	movs	r1, #0
    6474:	4808      	ldr	r0, [pc, #32]	; (6498 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6476:	f006 f9c3 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    647a:	2208      	movs	r2, #8
    647c:	21ff      	movs	r1, #255	; 0xff
    647e:	4807      	ldr	r0, [pc, #28]	; (649c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6480:	f006 f9be 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6484:	4805      	ldr	r0, [pc, #20]	; (649c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6486:	2100      	movs	r1, #0
    6488:	1f00      	subs	r0, r0, #4
    648a:	7001      	strb	r1, [r0, #0]
    648c:	7041      	strb	r1, [r0, #1]
    648e:	f44f 7161 	mov.w	r1, #900	; 0x384
    6492:	8041      	strh	r1, [r0, #2]
    6494:	bd10      	pop	{r4, pc}
    6496:	0000      	.short	0x0000
    6498:	2000143e 	.word	0x2000143e
    649c:	20000280 	.word	0x20000280

000064a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    64a0:	4901      	ldr	r1, [pc, #4]	; (64a8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    64a2:	7008      	strb	r0, [r1, #0]
    64a4:	4770      	bx	lr
    64a6:	0000      	.short	0x0000
    64a8:	2000027c 	.word	0x2000027c

000064ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    64ac:	4801      	ldr	r0, [pc, #4]	; (64b4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    64ae:	7800      	ldrb	r0, [r0, #0]
    64b0:	4770      	bx	lr
    64b2:	0000      	.short	0x0000
    64b4:	2000027c 	.word	0x2000027c

000064b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    64b8:	4b0b      	ldr	r3, [pc, #44]	; (64e8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    64ba:	b510      	push	{r4, lr}
    64bc:	789c      	ldrb	r4, [r3, #2]
    64be:	4284      	cmp	r4, r0
    64c0:	d90f      	bls.n	64e2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    64c2:	4418      	add	r0, r3
    64c4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    64c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    64cc:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    64d0:	700b      	strb	r3, [r1, #0]
    64d2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    64d6:	6011      	str	r1, [r2, #0]
    64d8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    64dc:	8090      	strh	r0, [r2, #4]
    64de:	2001      	movs	r0, #1
    64e0:	bd10      	pop	{r4, pc}
    64e2:	2000      	movs	r0, #0
    64e4:	bd10      	pop	{r4, pc}
    64e6:	0000      	.short	0x0000
    64e8:	2000143e 	.word	0x2000143e

000064ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    64ec:	4907      	ldr	r1, [pc, #28]	; (650c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    64ee:	788a      	ldrb	r2, [r1, #2]
    64f0:	4282      	cmp	r2, r0
    64f2:	d909      	bls.n	6508 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    64f4:	4408      	add	r0, r1
    64f6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    64fa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    64fe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6502:	f000 0001 	and.w	r0, r0, #1
    6506:	4770      	bx	lr
    6508:	2000      	movs	r0, #0
    650a:	4770      	bx	lr
    650c:	2000143e 	.word	0x2000143e

00006510 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6514:	4698      	mov	r8, r3
    6516:	4691      	mov	r9, r2
    6518:	460c      	mov	r4, r1
    651a:	4605      	mov	r5, r0
    651c:	f000 f936 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6520:	4606      	mov	r6, r0
    6522:	2810      	cmp	r0, #16
    6524:	d006      	beq.n	6534 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6526:	f000 f901 	bl	672c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    652a:	2810      	cmp	r0, #16
    652c:	d002      	beq.n	6534 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    652e:	2012      	movs	r0, #18
    6530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6534:	4f18      	ldr	r7, [pc, #96]	; (6598 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6536:	78b8      	ldrb	r0, [r7, #2]
    6538:	2808      	cmp	r0, #8
    653a:	d22a      	bcs.n	6592 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    653c:	2e10      	cmp	r6, #16
    653e:	d105      	bne.n	654c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6540:	2200      	movs	r2, #0
    6542:	4621      	mov	r1, r4
    6544:	4628      	mov	r0, r5
    6546:	f000 f905 	bl	6754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    654a:	4606      	mov	r6, r0
    654c:	78bc      	ldrb	r4, [r7, #2]
    654e:	2210      	movs	r2, #16
    6550:	1c60      	adds	r0, r4, #1
    6552:	70b8      	strb	r0, [r7, #2]
    6554:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6558:	1ce8      	adds	r0, r5, #3
    655a:	4649      	mov	r1, r9
    655c:	f007 fc1f 	bl	dd9e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6560:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6564:	2210      	movs	r2, #16
    6566:	4641      	mov	r1, r8
    6568:	f007 fc19 	bl	dd9e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    656c:	2110      	movs	r1, #16
    656e:	4640      	mov	r0, r8
    6570:	f007 fcac 	bl	decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6574:	443c      	add	r4, r7
    6576:	2110      	movs	r1, #16
    6578:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    657c:	4648      	mov	r0, r9
    657e:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    6582:	f007 fca3 	bl	decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6586:	77e0      	strb	r0, [r4, #31]
    6588:	f804 6c29 	strb.w	r6, [r4, #-41]
    658c:	2000      	movs	r0, #0
    658e:	73e0      	strb	r0, [r4, #15]
    6590:	e7ce      	b.n	6530 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6592:	2007      	movs	r0, #7
    6594:	e7cc      	b.n	6530 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6596:	0000      	.short	0x0000
    6598:	2000143e 	.word	0x2000143e

0000659c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    659c:	4806      	ldr	r0, [pc, #24]	; (65b8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    659e:	b510      	push	{r4, lr}
    65a0:	7880      	ldrb	r0, [r0, #2]
    65a2:	1e40      	subs	r0, r0, #1
    65a4:	b244      	sxtb	r4, r0
    65a6:	e004      	b.n	65b2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    65a8:	b2e0      	uxtb	r0, r4
    65aa:	f000 f937 	bl	681c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    65ae:	1e64      	subs	r4, r4, #1
    65b0:	b264      	sxtb	r4, r4
    65b2:	2c00      	cmp	r4, #0
    65b4:	daf8      	bge.n	65a8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    65b6:	bd10      	pop	{r4, pc}
    65b8:	2000143e 	.word	0x2000143e

000065bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    65bc:	4801      	ldr	r0, [pc, #4]	; (65c4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    65be:	8840      	ldrh	r0, [r0, #2]
    65c0:	4770      	bx	lr
    65c2:	0000      	.short	0x0000
    65c4:	2000027c 	.word	0x2000027c

000065c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    65c8:	b138      	cbz	r0, 65da <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    65ca:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    65ce:	4288      	cmp	r0, r1
    65d0:	d803      	bhi.n	65da <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    65d2:	4903      	ldr	r1, [pc, #12]	; (65e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    65d4:	8048      	strh	r0, [r1, #2]
    65d6:	2001      	movs	r0, #1
    65d8:	4770      	bx	lr
    65da:	2000      	movs	r0, #0
    65dc:	4770      	bx	lr
    65de:	0000      	.short	0x0000
    65e0:	2000027c 	.word	0x2000027c

000065e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    65e4:	4905      	ldr	r1, [pc, #20]	; (65fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    65e6:	788a      	ldrb	r2, [r1, #2]
    65e8:	4282      	cmp	r2, r0
    65ea:	d903      	bls.n	65f4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    65ec:	4408      	add	r0, r1
    65ee:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    65f2:	b108      	cbz	r0, 65f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    65f4:	2000      	movs	r0, #0
    65f6:	4770      	bx	lr
    65f8:	2001      	movs	r0, #1
    65fa:	4770      	bx	lr
    65fc:	2000143e 	.word	0x2000143e

00006600 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6600:	b570      	push	{r4, r5, r6, lr}
    6602:	460d      	mov	r5, r1
    6604:	4606      	mov	r6, r0
    6606:	f000 f8c1 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    660a:	4c10      	ldr	r4, [pc, #64]	; (664c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    660c:	2810      	cmp	r0, #16
    660e:	d007      	beq.n	6620 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6610:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6614:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6618:	07c9      	lsls	r1, r1, #31
    661a:	d001      	beq.n	6620 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    661c:	2001      	movs	r0, #1
    661e:	bd70      	pop	{r4, r5, r6, pc}
    6620:	7861      	ldrb	r1, [r4, #1]
    6622:	2908      	cmp	r1, #8
    6624:	d210      	bcs.n	6648 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6626:	2810      	cmp	r0, #16
    6628:	d008      	beq.n	663c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    662a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    662e:	2101      	movs	r1, #1
    6630:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6634:	7860      	ldrb	r0, [r4, #1]
    6636:	1c40      	adds	r0, r0, #1
    6638:	7060      	strb	r0, [r4, #1]
    663a:	e7ef      	b.n	661c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    663c:	2201      	movs	r2, #1
    663e:	4629      	mov	r1, r5
    6640:	4630      	mov	r0, r6
    6642:	f000 f887 	bl	6754 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6646:	e7f5      	b.n	6634 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6648:	2000      	movs	r0, #0
    664a:	bd70      	pop	{r4, r5, r6, pc}
    664c:	2000143e 	.word	0x2000143e

00006650 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6650:	b570      	push	{r4, r5, r6, lr}
    6652:	4d0b      	ldr	r5, [pc, #44]	; (6680 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6654:	7828      	ldrb	r0, [r5, #0]
    6656:	1e40      	subs	r0, r0, #1
    6658:	b244      	sxtb	r4, r0
    665a:	e00a      	b.n	6672 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    665c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6660:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6664:	07c0      	lsls	r0, r0, #31
    6666:	d002      	beq.n	666e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6668:	b2e0      	uxtb	r0, r4
    666a:	f000 f91f 	bl	68ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    666e:	1e64      	subs	r4, r4, #1
    6670:	b264      	sxtb	r4, r4
    6672:	2c00      	cmp	r4, #0
    6674:	daf2      	bge.n	665c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6676:	4903      	ldr	r1, [pc, #12]	; (6684 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6678:	2000      	movs	r0, #0
    667a:	7048      	strb	r0, [r1, #1]
    667c:	bd70      	pop	{r4, r5, r6, pc}
    667e:	0000      	.short	0x0000
    6680:	2000143e 	.word	0x2000143e
    6684:	2000027c 	.word	0x2000027c

00006688 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    668c:	2400      	movs	r4, #0
    668e:	4625      	mov	r5, r4
    6690:	4e18      	ldr	r6, [pc, #96]	; (66f4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6692:	e029      	b.n	66e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6694:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6698:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    669c:	07c0      	lsls	r0, r0, #31
    669e:	d021      	beq.n	66e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    66a0:	4628      	mov	r0, r5
    66a2:	f000 f843 	bl	672c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    66a6:	4603      	mov	r3, r0
    66a8:	f7ff fed4 	bl	6454 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    66ac:	4601      	mov	r1, r0
    66ae:	2000      	movs	r0, #0
    66b0:	2b10      	cmp	r3, #16
    66b2:	d009      	beq.n	66c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    66b4:	18f2      	adds	r2, r6, r3
    66b6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    66ba:	f1bc 0f01 	cmp.w	ip, #1
    66be:	d002      	beq.n	66c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    66c0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    66c4:	b102      	cbz	r2, 66c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    66c6:	2001      	movs	r0, #1
    66c8:	1e40      	subs	r0, r0, #1
    66ca:	4201      	tst	r1, r0
    66cc:	d10a      	bne.n	66e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    66ce:	480a      	ldr	r0, [pc, #40]	; (66f8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    66d0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    66d4:	5503      	strb	r3, [r0, r4]
    66d6:	4620      	mov	r0, r4
    66d8:	1c64      	adds	r4, r4, #1
    66da:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    66de:	b2e4      	uxtb	r4, r4
    66e0:	f005 fbcc 	bl	be7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    66e4:	1c6d      	adds	r5, r5, #1
    66e6:	b2ed      	uxtb	r5, r5
    66e8:	7830      	ldrb	r0, [r6, #0]
    66ea:	42a8      	cmp	r0, r5
    66ec:	d8d2      	bhi.n	6694 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    66ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66f2:	0000      	.short	0x0000
    66f4:	2000143e 	.word	0x2000143e
    66f8:	20000280 	.word	0x20000280
    66fc:	4602      	mov	r2, r0
    66fe:	4809      	ldr	r0, [pc, #36]	; (6724 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6700:	b510      	push	{r4, lr}
    6702:	7800      	ldrb	r0, [r0, #0]
    6704:	460b      	mov	r3, r1
    6706:	b158      	cbz	r0, 6720 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6708:	4807      	ldr	r0, [pc, #28]	; (6728 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    670a:	7881      	ldrb	r1, [r0, #2]
    670c:	b141      	cbz	r1, 6720 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    670e:	b10b      	cbz	r3, 6714 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6710:	1cc0      	adds	r0, r0, #3
    6712:	e001      	b.n	6718 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6714:	4804      	ldr	r0, [pc, #16]	; (6728 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6716:	3083      	adds	r0, #131	; 0x83
    6718:	f004 fcfa 	bl	b110 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    671c:	2001      	movs	r0, #1
    671e:	bd10      	pop	{r4, pc}
    6720:	2000      	movs	r0, #0
    6722:	bd10      	pop	{r4, pc}
    6724:	2000027c 	.word	0x2000027c
    6728:	2000143e 	.word	0x2000143e
    672c:	4908      	ldr	r1, [pc, #32]	; (6750 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    672e:	b510      	push	{r4, lr}
    6730:	4603      	mov	r3, r0
    6732:	2000      	movs	r0, #0
    6734:	788a      	ldrb	r2, [r1, #2]
    6736:	e006      	b.n	6746 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6738:	180c      	adds	r4, r1, r0
    673a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    673e:	429c      	cmp	r4, r3
    6740:	d004      	beq.n	674c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6742:	1c40      	adds	r0, r0, #1
    6744:	b2c0      	uxtb	r0, r0
    6746:	4282      	cmp	r2, r0
    6748:	d8f6      	bhi.n	6738 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    674a:	2010      	movs	r0, #16
    674c:	bd10      	pop	{r4, pc}
    674e:	0000      	.short	0x0000
    6750:	2000143e 	.word	0x2000143e
    6754:	b570      	push	{r4, r5, r6, lr}
    6756:	4b0c      	ldr	r3, [pc, #48]	; (6788 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6758:	4604      	mov	r4, r0
    675a:	7818      	ldrb	r0, [r3, #0]
    675c:	1c45      	adds	r5, r0, #1
    675e:	701d      	strb	r5, [r3, #0]
    6760:	2810      	cmp	r0, #16
    6762:	d303      	bcc.n	676c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6764:	2146      	movs	r1, #70	; 0x46
    6766:	2028      	movs	r0, #40	; 0x28
    6768:	f7fe f970 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    676c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6770:	680d      	ldr	r5, [r1, #0]
    6772:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6776:	8889      	ldrh	r1, [r1, #4]
    6778:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    677c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6780:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6784:	bd70      	pop	{r4, r5, r6, pc}
    6786:	0000      	.short	0x0000
    6788:	2000143e 	.word	0x2000143e
    678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6790:	460f      	mov	r7, r1
    6792:	4606      	mov	r6, r0
    6794:	2400      	movs	r4, #0
    6796:	4d0d      	ldr	r5, [pc, #52]	; (67cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    6798:	e00f      	b.n	67ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    679a:	bf00      	nop
    679c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    67a0:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    67a4:	42b1      	cmp	r1, r6
    67a6:	d106      	bne.n	67b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    67a8:	2206      	movs	r2, #6
    67aa:	4639      	mov	r1, r7
    67ac:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    67b0:	f005 ff9a 	bl	c6e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    67b4:	b138      	cbz	r0, 67c6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    67b6:	1c64      	adds	r4, r4, #1
    67b8:	b2e4      	uxtb	r4, r4
    67ba:	7828      	ldrb	r0, [r5, #0]
    67bc:	42a0      	cmp	r0, r4
    67be:	d8ed      	bhi.n	679c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    67c0:	2010      	movs	r0, #16
    67c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67c6:	4620      	mov	r0, r4
    67c8:	e7fb      	b.n	67c2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    67ca:	0000      	.short	0x0000
    67cc:	2000143e 	.word	0x2000143e
    67d0:	b570      	push	{r4, r5, r6, lr}
    67d2:	4605      	mov	r5, r0
    67d4:	f7ff ffaa 	bl	672c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    67d8:	2810      	cmp	r0, #16
    67da:	d11c      	bne.n	6816 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    67dc:	4c0e      	ldr	r4, [pc, #56]	; (6818 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    67de:	7820      	ldrb	r0, [r4, #0]
    67e0:	1e40      	subs	r0, r0, #1
    67e2:	b2c0      	uxtb	r0, r0
    67e4:	7020      	strb	r0, [r4, #0]
    67e6:	42a8      	cmp	r0, r5
    67e8:	d015      	beq.n	6816 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    67ea:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    67ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    67f2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    67f6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    67fa:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    67fe:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6802:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6806:	7820      	ldrb	r0, [r4, #0]
    6808:	f7ff ff90 	bl	672c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    680c:	2810      	cmp	r0, #16
    680e:	d002      	beq.n	6816 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6810:	4420      	add	r0, r4
    6812:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6816:	bd70      	pop	{r4, r5, r6, pc}
    6818:	2000143e 	.word	0x2000143e
    681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6820:	4c21      	ldr	r4, [pc, #132]	; (68a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6822:	4606      	mov	r6, r0
    6824:	19a7      	adds	r7, r4, r6
    6826:	78a0      	ldrb	r0, [r4, #2]
    6828:	1e40      	subs	r0, r0, #1
    682a:	b2c5      	uxtb	r5, r0
    682c:	70a5      	strb	r5, [r4, #2]
    682e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6832:	42ae      	cmp	r6, r5
    6834:	d02a      	beq.n	688c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6836:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    683a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    683e:	f10a 0103 	add.w	r1, sl, #3
    6842:	f109 0003 	add.w	r0, r9, #3
    6846:	2210      	movs	r2, #16
    6848:	f005 ff60 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    684c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6850:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6854:	2210      	movs	r2, #16
    6856:	f005 ff59 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    685a:	1960      	adds	r0, r4, r5
    685c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6860:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6864:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6868:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    686c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6870:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6874:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6878:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    687c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6880:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6884:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6888:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    688c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6890:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6894:	07c0      	lsls	r0, r0, #31
    6896:	d104      	bne.n	68a2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6898:	4640      	mov	r0, r8
    689a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    689e:	f7ff bf97 	b.w	67d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    68a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    68a6:	0000      	.short	0x0000
    68a8:	2000143e 	.word	0x2000143e
    68ac:	4905      	ldr	r1, [pc, #20]	; (68c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    68ae:	784a      	ldrb	r2, [r1, #1]
    68b0:	1e52      	subs	r2, r2, #1
    68b2:	704a      	strb	r2, [r1, #1]
    68b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    68b8:	2200      	movs	r2, #0
    68ba:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    68be:	f7ff bf87 	b.w	67d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    68c2:	0000      	.short	0x0000
    68c4:	2000143e 	.word	0x2000143e

000068c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    68c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68cc:	4604      	mov	r4, r0
    68ce:	f100 0570 	add.w	r5, r0, #112	; 0x70
    68d2:	f04f 0901 	mov.w	r9, #1
    68d6:	b171      	cbz	r1, 68f6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    68d8:	f104 0786 	add.w	r7, r4, #134	; 0x86
    68dc:	1e7e      	subs	r6, r7, #1
    68de:	2901      	cmp	r1, #1
    68e0:	d021      	beq.n	6926 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    68e2:	2902      	cmp	r1, #2
    68e4:	d046      	beq.n	6974 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    68e6:	2903      	cmp	r1, #3
    68e8:	d11b      	bne.n	6922 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    68ea:	4639      	mov	r1, r7
    68ec:	4630      	mov	r0, r6
    68ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68f2:	f007 bb1b 	b.w	df2c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    68f6:	f44f 7206 	mov.w	r2, #536	; 0x218
    68fa:	2100      	movs	r1, #0
    68fc:	f005 ff80 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6900:	f004 fbdc 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6904:	f644 112b 	movw	r1, #18731	; 0x492b
    6908:	4008      	ands	r0, r1
    690a:	f885 9015 	strb.w	r9, [r5, #21]
    690e:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    6912:	0a00      	lsrs	r0, r0, #8
    6914:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    6918:	20fe      	movs	r0, #254	; 0xfe
    691a:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    691e:	207f      	movs	r0, #127	; 0x7f
    6920:	7268      	strb	r0, [r5, #9]
    6922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6926:	f04f 0800 	mov.w	r8, #0
    692a:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    692e:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    6932:	68e1      	ldr	r1, [r4, #12]
    6934:	4814      	ldr	r0, [pc, #80]	; (6988 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    6936:	460a      	mov	r2, r1
    6938:	4408      	add	r0, r1
    693a:	fbb0 f0f1 	udiv	r0, r0, r1
    693e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    6942:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6946:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    694a:	8ae3      	ldrh	r3, [r4, #22]
    694c:	4628      	mov	r0, r5
    694e:	f000 f81d 	bl	698c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6952:	4639      	mov	r1, r7
    6954:	4630      	mov	r0, r6
    6956:	f007 fae9 	bl	df2c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    695a:	f005 fea1 	bl	c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    695e:	b118      	cbz	r0, 6968 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6960:	6920      	ldr	r0, [r4, #16]
    6962:	f000 fb65 	bl	7030 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6966:	b110      	cbz	r0, 696e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6968:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    696c:	e7d9      	b.n	6922 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    696e:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    6972:	e7d6      	b.n	6922 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6974:	68c1      	ldr	r1, [r0, #12]
    6976:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    697a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    697e:	4628      	mov	r0, r5
    6980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6984:	f000 b802 	b.w	698c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6988:	01c9c37f 	.word	0x01c9c37f
    698c:	b530      	push	{r4, r5, lr}
    698e:	2400      	movs	r4, #0
    6990:	8684      	strh	r4, [r0, #52]	; 0x34
    6992:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6994:	4d13      	ldr	r5, [pc, #76]	; (69e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    6996:	434c      	muls	r4, r1
    6998:	fbb4 f4f2 	udiv	r4, r4, r2
    699c:	8704      	strh	r4, [r0, #56]	; 0x38
    699e:	f242 7410 	movw	r4, #10000	; 0x2710
    69a2:	4363      	muls	r3, r4
    69a4:	fbb3 f3f2 	udiv	r3, r3, r2
    69a8:	1c5b      	adds	r3, r3, #1
    69aa:	b29b      	uxth	r3, r3
    69ac:	fb03 f402 	mul.w	r4, r3, r2
    69b0:	86c3      	strh	r3, [r0, #54]	; 0x36
    69b2:	42ac      	cmp	r4, r5
    69b4:	d901      	bls.n	69ba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    69b6:	1e5b      	subs	r3, r3, #1
    69b8:	86c3      	strh	r3, [r0, #54]	; 0x36
    69ba:	4b0b      	ldr	r3, [pc, #44]	; (69e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    69bc:	f240 2471 	movw	r4, #625	; 0x271
    69c0:	fbb3 f3f2 	udiv	r3, r3, r2
    69c4:	1c5b      	adds	r3, r3, #1
    69c6:	8783      	strh	r3, [r0, #60]	; 0x3c
    69c8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    69ca:	4363      	muls	r3, r4
    69cc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    69d0:	1e5b      	subs	r3, r3, #1
    69d2:	fbb3 f3f2 	udiv	r3, r3, r2
    69d6:	62c3      	str	r3, [r0, #44]	; 0x2c
    69d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    69da:	434b      	muls	r3, r1
    69dc:	fbb3 f1f2 	udiv	r1, r3, r2
    69e0:	6281      	str	r1, [r0, #40]	; 0x28
    69e2:	bd30      	pop	{r4, r5, pc}
    69e4:	01e84800 	.word	0x01e84800
    69e8:	02625a00 	.word	0x02625a00

000069ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    69ec:	b570      	push	{r4, r5, r6, lr}
    69ee:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    69f2:	b28b      	uxth	r3, r1
    69f4:	7ac5      	ldrb	r5, [r0, #11]
    69f6:	ea83 0102 	eor.w	r1, r3, r2
    69fa:	2200      	movs	r2, #0
    69fc:	b2cc      	uxtb	r4, r1
    69fe:	0a09      	lsrs	r1, r1, #8
    6a00:	fa94 f4a4 	rbit	r4, r4
    6a04:	fa91 f1a1 	rbit	r1, r1
    6a08:	0e24      	lsrs	r4, r4, #24
    6a0a:	0e09      	lsrs	r1, r1, #24
    6a0c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6a10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6a14:	1c52      	adds	r2, r2, #1
    6a16:	4419      	add	r1, r3
    6a18:	b2d2      	uxtb	r2, r2
    6a1a:	b289      	uxth	r1, r1
    6a1c:	2a03      	cmp	r2, #3
    6a1e:	d3ed      	bcc.n	69fc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6a20:	4059      	eors	r1, r3
    6a22:	2225      	movs	r2, #37	; 0x25
    6a24:	fbb1 f3f2 	udiv	r3, r1, r2
    6a28:	fb02 1213 	mls	r2, r2, r3, r1
    6a2c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6a30:	f002 0607 	and.w	r6, r2, #7
    6a34:	785b      	ldrb	r3, [r3, #1]
    6a36:	2401      	movs	r4, #1
    6a38:	fa04 f606 	lsl.w	r6, r4, r6
    6a3c:	4233      	tst	r3, r6
    6a3e:	d001      	beq.n	6a44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6a40:	4610      	mov	r0, r2
    6a42:	bd70      	pop	{r4, r5, r6, pc}
    6a44:	434d      	muls	r5, r1
    6a46:	0c29      	lsrs	r1, r5, #16
    6a48:	1c49      	adds	r1, r1, #1
    6a4a:	b2c9      	uxtb	r1, r1
    6a4c:	2200      	movs	r2, #0
    6a4e:	1885      	adds	r5, r0, r2
    6a50:	79ab      	ldrb	r3, [r5, #6]
    6a52:	428b      	cmp	r3, r1
    6a54:	d312      	bcc.n	6a7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6a56:	f895 5001 	ldrb.w	r5, [r5, #1]
    6a5a:	2300      	movs	r3, #0
    6a5c:	fa04 f603 	lsl.w	r6, r4, r3
    6a60:	4235      	tst	r5, r6
    6a62:	d001      	beq.n	6a68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6a64:	1e49      	subs	r1, r1, #1
    6a66:	b2c9      	uxtb	r1, r1
    6a68:	b121      	cbz	r1, 6a74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6a6a:	1c5b      	adds	r3, r3, #1
    6a6c:	b2db      	uxtb	r3, r3
    6a6e:	2b08      	cmp	r3, #8
    6a70:	d3f4      	bcc.n	6a5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6a72:	e005      	b.n	6a80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6a74:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6a78:	b2c0      	uxtb	r0, r0
    6a7a:	bd70      	pop	{r4, r5, r6, pc}
    6a7c:	1ac9      	subs	r1, r1, r3
    6a7e:	b2c9      	uxtb	r1, r1
    6a80:	1c52      	adds	r2, r2, #1
    6a82:	b2d2      	uxtb	r2, r2
    6a84:	2a05      	cmp	r2, #5
    6a86:	d3e2      	bcc.n	6a4e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6a88:	f240 110d 	movw	r1, #269	; 0x10d
    6a8c:	2046      	movs	r0, #70	; 0x46
    6a8e:	f7fd ffdd 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a92:	0000      	movs	r0, r0
    6a94:	b570      	push	{r4, r5, r6, lr}
    6a96:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6a9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6a9e:	2401      	movs	r4, #1
    6aa0:	fb03 2101 	mla	r1, r3, r1, r2
    6aa4:	2225      	movs	r2, #37	; 0x25
    6aa6:	fbb1 f3f2 	udiv	r3, r1, r2
    6aaa:	fb02 1113 	mls	r1, r2, r3, r1
    6aae:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6ab2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6ab6:	f001 0307 	and.w	r3, r1, #7
    6aba:	7d92      	ldrb	r2, [r2, #22]
    6abc:	fa04 f303 	lsl.w	r3, r4, r3
    6ac0:	421a      	tst	r2, r3
    6ac2:	d003      	beq.n	6acc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6ac4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6ac8:	2000      	movs	r0, #0
    6aca:	bd70      	pop	{r4, r5, r6, pc}
    6acc:	f890 2020 	ldrb.w	r2, [r0, #32]
    6ad0:	fbb1 f3f2 	udiv	r3, r1, r2
    6ad4:	fb02 1113 	mls	r1, r2, r3, r1
    6ad8:	1c49      	adds	r1, r1, #1
    6ada:	b2c9      	uxtb	r1, r1
    6adc:	2300      	movs	r3, #0
    6ade:	18c5      	adds	r5, r0, r3
    6ae0:	7eea      	ldrb	r2, [r5, #27]
    6ae2:	428a      	cmp	r2, r1
    6ae4:	d311      	bcc.n	6b0a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6ae6:	f895 5016 	ldrb.w	r5, [r5, #22]
    6aea:	2200      	movs	r2, #0
    6aec:	fa04 f602 	lsl.w	r6, r4, r2
    6af0:	4235      	tst	r5, r6
    6af2:	d001      	beq.n	6af8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6af4:	1e49      	subs	r1, r1, #1
    6af6:	b2c9      	uxtb	r1, r1
    6af8:	b121      	cbz	r1, 6b04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6afa:	1c52      	adds	r2, r2, #1
    6afc:	b2d2      	uxtb	r2, r2
    6afe:	2a08      	cmp	r2, #8
    6b00:	d3f4      	bcc.n	6aec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6b02:	e004      	b.n	6b0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6b04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6b08:	e7dc      	b.n	6ac4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6b0a:	1a89      	subs	r1, r1, r2
    6b0c:	b2c9      	uxtb	r1, r1
    6b0e:	1c5b      	adds	r3, r3, #1
    6b10:	b2db      	uxtb	r3, r3
    6b12:	2b05      	cmp	r3, #5
    6b14:	d3e3      	bcc.n	6ade <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6b16:	201f      	movs	r0, #31
    6b18:	bd70      	pop	{r4, r5, r6, pc}
	...

00006b1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6b1c:	7841      	ldrb	r1, [r0, #1]
    6b1e:	b141      	cbz	r1, 6b32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6b20:	78c0      	ldrb	r0, [r0, #3]
    6b22:	2819      	cmp	r0, #25
    6b24:	d203      	bcs.n	6b2e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6b26:	4a04      	ldr	r2, [pc, #16]	; (6b38 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6b28:	5c10      	ldrb	r0, [r2, r0]
    6b2a:	4288      	cmp	r0, r1
    6b2c:	d101      	bne.n	6b32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6b2e:	2001      	movs	r0, #1
    6b30:	4770      	bx	lr
    6b32:	2000      	movs	r0, #0
    6b34:	4770      	bx	lr
    6b36:	0000      	.short	0x0000
    6b38:	000105e2 	.word	0x000105e2

00006b3c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6b3c:	b50c      	push	{r2, r3, lr}
    6b3e:	a20b      	add	r2, pc, #44	; (adr r2, 6b6c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    6b40:	e9d2 1200 	ldrd	r1, r2, [r2]
    6b44:	e9cd 1200 	strd	r1, r2, [sp]
    6b48:	7901      	ldrb	r1, [r0, #4]
    6b4a:	7940      	ldrb	r0, [r0, #5]
    6b4c:	f001 0207 	and.w	r2, r1, #7
    6b50:	4669      	mov	r1, sp
    6b52:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6b56:	2a01      	cmp	r2, #1
    6b58:	d804      	bhi.n	6b64 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    6b5a:	f000 0007 	and.w	r0, r0, #7
    6b5e:	5c08      	ldrb	r0, [r1, r0]
    6b60:	2801      	cmp	r0, #1
    6b62:	d901      	bls.n	6b68 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6b64:	2000      	movs	r0, #0
    6b66:	bd0c      	pop	{r2, r3, pc}
    6b68:	2001      	movs	r0, #1
    6b6a:	bd0c      	pop	{r2, r3, pc}
    6b6c:	02010100 	.word	0x02010100
    6b70:	03020201 	.word	0x03020201

00006b74 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6b74:	b510      	push	{r4, lr}
    6b76:	2201      	movs	r2, #1
    6b78:	70c1      	strb	r1, [r0, #3]
    6b7a:	2919      	cmp	r1, #25
    6b7c:	d202      	bcs.n	6b84 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6b7e:	4a06      	ldr	r2, [pc, #24]	; (6b98 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6b80:	5c52      	ldrb	r2, [r2, r1]
    6b82:	e006      	b.n	6b92 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6b84:	29ff      	cmp	r1, #255	; 0xff
    6b86:	d004      	beq.n	6b92 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6b88:	f240 31d5 	movw	r1, #981	; 0x3d5
    6b8c:	202a      	movs	r0, #42	; 0x2a
    6b8e:	f7fd ff5d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b92:	7042      	strb	r2, [r0, #1]
    6b94:	bd10      	pop	{r4, pc}
    6b96:	0000      	.short	0x0000
    6b98:	000105e2 	.word	0x000105e2

00006b9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ba0:	4c12      	ldr	r4, [pc, #72]	; (6bec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6ba2:	4607      	mov	r7, r0
    6ba4:	460e      	mov	r6, r1
    6ba6:	7da0      	ldrb	r0, [r4, #22]
    6ba8:	b110      	cbz	r0, 6bb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6baa:	8b20      	ldrh	r0, [r4, #24]
    6bac:	2800      	cmp	r0, #0
    6bae:	d012      	beq.n	6bd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6bb0:	480e      	ldr	r0, [pc, #56]	; (6bec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6bb2:	3014      	adds	r0, #20
    6bb4:	4680      	mov	r8, r0
    6bb6:	f007 fb63 	bl	e280 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6bba:	b9a8      	cbnz	r0, 6be8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6bbc:	8aa5      	ldrh	r5, [r4, #20]
    6bbe:	8aa0      	ldrh	r0, [r4, #20]
    6bc0:	4632      	mov	r2, r6
    6bc2:	4639      	mov	r1, r7
    6bc4:	f007 fba0 	bl	e308 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6bc8:	b138      	cbz	r0, 6bda <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6bca:	7da0      	ldrb	r0, [r4, #22]
    6bcc:	b110      	cbz	r0, 6bd4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6bce:	8b20      	ldrh	r0, [r4, #24]
    6bd0:	1e40      	subs	r0, r0, #1
    6bd2:	8320      	strh	r0, [r4, #24]
    6bd4:	2001      	movs	r0, #1
    6bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bda:	4640      	mov	r0, r8
    6bdc:	f007 fb50 	bl	e280 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6be0:	b910      	cbnz	r0, 6be8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6be2:	8aa0      	ldrh	r0, [r4, #20]
    6be4:	42a8      	cmp	r0, r5
    6be6:	d1ea      	bne.n	6bbe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6be8:	2000      	movs	r0, #0
    6bea:	e7f4      	b.n	6bd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6bec:	20001198 	.word	0x20001198
    6bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6bf4:	468a      	mov	sl, r1
    6bf6:	4699      	mov	r9, r3
    6bf8:	4615      	mov	r5, r2
    6bfa:	4604      	mov	r4, r0
    6bfc:	a901      	add	r1, sp, #4
    6bfe:	f006 ffc8 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c02:	bbe0      	cbnz	r0, 6c7e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6c04:	9f02      	ldr	r7, [sp, #8]
    6c06:	f04f 0800 	mov.w	r8, #0
    6c0a:	3770      	adds	r7, #112	; 0x70
    6c0c:	b18d      	cbz	r5, 6c32 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6c0e:	4620      	mov	r0, r4
    6c10:	f7fe fb4c 	bl	52ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6c14:	0004      	movs	r4, r0
    6c16:	d00f      	beq.n	6c38 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6c18:	4629      	mov	r1, r5
    6c1a:	f006 fbca 	bl	d3b2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6c1e:	0006      	movs	r6, r0
    6c20:	d003      	beq.n	6c2a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6c22:	481d      	ldr	r0, [pc, #116]	; (6c98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6c24:	8840      	ldrh	r0, [r0, #2]
    6c26:	42a8      	cmp	r0, r5
    6c28:	d208      	bcs.n	6c3c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6c2a:	2000      	movs	r0, #0
    6c2c:	b004      	add	sp, #16
    6c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c32:	2001      	movs	r0, #1
    6c34:	7538      	strb	r0, [r7, #20]
    6c36:	e029      	b.n	6c8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6c38:	216e      	movs	r1, #110	; 0x6e
    6c3a:	e02a      	b.n	6c92 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6c3c:	4620      	mov	r0, r4
    6c3e:	4631      	mov	r1, r6
    6c40:	aa03      	add	r2, sp, #12
    6c42:	f006 fbaf 	bl	d3a4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6c46:	9803      	ldr	r0, [sp, #12]
    6c48:	f8a0 8000 	strh.w	r8, [r0]
    6c4c:	f880 8002 	strb.w	r8, [r0, #2]
    6c50:	7d39      	ldrb	r1, [r7, #20]
    6c52:	b109      	cbz	r1, 6c58 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6c54:	f04f 0a02 	mov.w	sl, #2
    6c58:	4651      	mov	r1, sl
    6c5a:	f007 fa92 	bl	e182 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6c5e:	4631      	mov	r1, r6
    6c60:	2603      	movs	r6, #3
    6c62:	4620      	mov	r0, r4
    6c64:	464a      	mov	r2, r9
    6c66:	462b      	mov	r3, r5
    6c68:	9600      	str	r6, [sp, #0]
    6c6a:	f006 fa81 	bl	d170 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6c6e:	4620      	mov	r0, r4
    6c70:	4629      	mov	r1, r5
    6c72:	f006 fb3b 	bl	d2ec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6c76:	b158      	cbz	r0, 6c90 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6c78:	4644      	mov	r4, r8
    6c7a:	a801      	add	r0, sp, #4
    6c7c:	e000      	b.n	6c80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6c7e:	e005      	b.n	6c8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6c80:	f007 fb1f 	bl	e2c2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6c84:	9802      	ldr	r0, [sp, #8]
    6c86:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    6c8a:	753c      	strb	r4, [r7, #20]
    6c8c:	2001      	movs	r0, #1
    6c8e:	e7cd      	b.n	6c2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6c90:	2184      	movs	r1, #132	; 0x84
    6c92:	202b      	movs	r0, #43	; 0x2b
    6c94:	f7fd feda 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c98:	20001198 	.word	0x20001198

00006c9c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6c9c:	4901      	ldr	r1, [pc, #4]	; (6ca4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6c9e:	2001      	movs	r0, #1
    6ca0:	7008      	strb	r0, [r1, #0]
    6ca2:	4770      	bx	lr
    6ca4:	20000289 	.word	0x20000289

00006ca8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cac:	0006      	movs	r6, r0
    6cae:	d00a      	beq.n	6cc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6cb0:	4825      	ldr	r0, [pc, #148]	; (6d48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6cb2:	7801      	ldrb	r1, [r0, #0]
    6cb4:	b151      	cbz	r1, 6ccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6cb6:	2100      	movs	r1, #0
    6cb8:	7071      	strb	r1, [r6, #1]
    6cba:	2203      	movs	r2, #3
    6cbc:	7032      	strb	r2, [r6, #0]
    6cbe:	2201      	movs	r2, #1
    6cc0:	7132      	strb	r2, [r6, #4]
    6cc2:	7001      	strb	r1, [r0, #0]
    6cc4:	e03a      	b.n	6d3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6cc6:	f240 21da 	movw	r1, #730	; 0x2da
    6cca:	e009      	b.n	6ce0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6ccc:	4c1e      	ldr	r4, [pc, #120]	; (6d48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6cce:	1ce4      	adds	r4, r4, #3
    6cd0:	7820      	ldrb	r0, [r4, #0]
    6cd2:	b940      	cbnz	r0, 6ce6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6cd4:	1ca0      	adds	r0, r4, #2
    6cd6:	f007 fb60 	bl	e39a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6cda:	b120      	cbz	r0, 6ce6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6cdc:	f240 21e9 	movw	r1, #745	; 0x2e9
    6ce0:	2010      	movs	r0, #16
    6ce2:	f7fd feb3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce6:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6cea:	2000      	movs	r0, #0
    6cec:	f7fe f898 	bl	4e20 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6cf0:	4f16      	ldr	r7, [pc, #88]	; (6d4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6cf2:	4605      	mov	r5, r0
    6cf4:	6838      	ldr	r0, [r7, #0]
    6cf6:	b160      	cbz	r0, 6d12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6cf8:	8860      	ldrh	r0, [r4, #2]
    6cfa:	42a8      	cmp	r0, r5
    6cfc:	d309      	bcc.n	6d12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6cfe:	1b40      	subs	r0, r0, r5
    6d00:	b2c0      	uxtb	r0, r0
    6d02:	2101      	movs	r1, #1
    6d04:	f006 fcfd 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d08:	b158      	cbz	r0, 6d22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6d0a:	4631      	mov	r1, r6
    6d0c:	f000 f84e 	bl	6dac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6d10:	e006      	b.n	6d20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    6d12:	480f      	ldr	r0, [pc, #60]	; (6d50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6d14:	6800      	ldr	r0, [r0, #0]
    6d16:	b120      	cbz	r0, 6d22 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6d18:	8860      	ldrh	r0, [r4, #2]
    6d1a:	4631      	mov	r1, r6
    6d1c:	f000 f8de 	bl	6edc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6d20:	b960      	cbnz	r0, 6d3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6d22:	1ca0      	adds	r0, r4, #2
    6d24:	f007 fb39 	bl	e39a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6d28:	b910      	cbnz	r0, 6d30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    6d2a:	8861      	ldrh	r1, [r4, #2]
    6d2c:	4541      	cmp	r1, r8
    6d2e:	d1e1      	bne.n	6cf4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    6d30:	4808      	ldr	r0, [pc, #32]	; (6d54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    6d32:	6801      	ldr	r1, [r0, #0]
    6d34:	b129      	cbz	r1, 6d42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6d36:	4630      	mov	r0, r6
    6d38:	4788      	blx	r1
    6d3a:	b110      	cbz	r0, 6d42 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6d3c:	2001      	movs	r0, #1
    6d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d42:	2000      	movs	r0, #0
    6d44:	e7fb      	b.n	6d3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    6d46:	0000      	.short	0x0000
    6d48:	20000289 	.word	0x20000289
    6d4c:	200000ec 	.word	0x200000ec
    6d50:	200000f0 	.word	0x200000f0
    6d54:	200000f4 	.word	0x200000f4

00006d58 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6d58:	4901      	ldr	r1, [pc, #4]	; (6d60 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6d5a:	7008      	strb	r0, [r1, #0]
    6d5c:	f000 b95c 	b.w	7018 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    6d60:	20000288 	.word	0x20000288

00006d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6d64:	4801      	ldr	r0, [pc, #4]	; (6d6c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6d66:	7800      	ldrb	r0, [r0, #0]
    6d68:	f7fd bc94 	b.w	4694 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6d6c:	20000288 	.word	0x20000288

00006d70 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6d70:	4902      	ldr	r1, [pc, #8]	; (6d7c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6d72:	4801      	ldr	r0, [pc, #4]	; (6d78 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6d74:	6008      	str	r0, [r1, #0]
    6d76:	4770      	bx	lr
    6d78:	00007185 	.word	0x00007185
    6d7c:	200000ec 	.word	0x200000ec

00006d80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6d80:	4905      	ldr	r1, [pc, #20]	; (6d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6d82:	4804      	ldr	r0, [pc, #16]	; (6d94 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6d84:	6008      	str	r0, [r1, #0]
    6d86:	4906      	ldr	r1, [pc, #24]	; (6da0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6d88:	4804      	ldr	r0, [pc, #16]	; (6d9c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6d8a:	6008      	str	r0, [r1, #0]
    6d8c:	4906      	ldr	r1, [pc, #24]	; (6da8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6d8e:	4805      	ldr	r0, [pc, #20]	; (6da4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6d90:	6008      	str	r0, [r1, #0]
    6d92:	4770      	bx	lr
    6d94:	00007185 	.word	0x00007185
    6d98:	200000ec 	.word	0x200000ec
    6d9c:	00008849 	.word	0x00008849
    6da0:	200000f0 	.word	0x200000f0
    6da4:	000058e5 	.word	0x000058e5
    6da8:	200000f4 	.word	0x200000f4
    6dac:	b570      	push	{r4, r5, r6, lr}
    6dae:	0005      	movs	r5, r0
    6db0:	460c      	mov	r4, r1
    6db2:	d02e      	beq.n	6e12 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6db4:	4818      	ldr	r0, [pc, #96]	; (6e18 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    6db6:	6802      	ldr	r2, [r0, #0]
    6db8:	b35a      	cbz	r2, 6e12 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6dba:	4628      	mov	r0, r5
    6dbc:	4790      	blx	r2
    6dbe:	b340      	cbz	r0, 6e12 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    6dc0:	7820      	ldrb	r0, [r4, #0]
    6dc2:	2811      	cmp	r0, #17
    6dc4:	d002      	beq.n	6dcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    6dc6:	2814      	cmp	r0, #20
    6dc8:	d003      	beq.n	6dd2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    6dca:	e020      	b.n	6e0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6dcc:	7920      	ldrb	r0, [r4, #4]
    6dce:	b1f0      	cbz	r0, 6e0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6dd0:	e00a      	b.n	6de8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6dd2:	7920      	ldrb	r0, [r4, #4]
    6dd4:	b120      	cbz	r0, 6de0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    6dd6:	4628      	mov	r0, r5
    6dd8:	f007 fcf3 	bl	e7c2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6ddc:	b120      	cbz	r0, 6de8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    6dde:	e016      	b.n	6e0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6de0:	490e      	ldr	r1, [pc, #56]	; (6e1c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    6de2:	2000      	movs	r0, #0
    6de4:	7008      	strb	r0, [r1, #0]
    6de6:	e012      	b.n	6e0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6de8:	88e4      	ldrh	r4, [r4, #6]
    6dea:	2100      	movs	r1, #0
    6dec:	4620      	mov	r0, r4
    6dee:	f006 fc88 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6df2:	b160      	cbz	r0, 6e0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6df4:	8800      	ldrh	r0, [r0, #0]
    6df6:	f006 fe0c 	bl	da12 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6dfa:	2100      	movs	r1, #0
    6dfc:	4620      	mov	r0, r4
    6dfe:	f7fe f8ad 	bl	4f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6e02:	b120      	cbz	r0, 6e0e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6e04:	f240 1171 	movw	r1, #369	; 0x171
    6e08:	2010      	movs	r0, #16
    6e0a:	f7fd fe1f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e0e:	2001      	movs	r0, #1
    6e10:	bd70      	pop	{r4, r5, r6, pc}
    6e12:	2000      	movs	r0, #0
    6e14:	bd70      	pop	{r4, r5, r6, pc}
    6e16:	0000      	.short	0x0000
    6e18:	200000ec 	.word	0x200000ec
    6e1c:	2000028c 	.word	0x2000028c
    6e20:	b510      	push	{r4, lr}
    6e22:	492d      	ldr	r1, [pc, #180]	; (6ed8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    6e24:	b086      	sub	sp, #24
    6e26:	7c8a      	ldrb	r2, [r1, #18]
    6e28:	7801      	ldrb	r1, [r0, #0]
    6e2a:	07d3      	lsls	r3, r2, #31
    6e2c:	d101      	bne.n	6e32 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    6e2e:	2919      	cmp	r1, #25
    6e30:	d004      	beq.n	6e3c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    6e32:	2918      	cmp	r1, #24
    6e34:	d01f      	beq.n	6e76 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    6e36:	2912      	cmp	r1, #18
    6e38:	d046      	beq.n	6ec8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    6e3a:	e04a      	b.n	6ed2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6e3c:	8880      	ldrh	r0, [r0, #4]
    6e3e:	f8ad 0000 	strh.w	r0, [sp]
    6e42:	a902      	add	r1, sp, #8
    6e44:	f006 fea5 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e48:	b110      	cbz	r0, 6e50 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    6e4a:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6e4e:	e035      	b.n	6ebc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6e50:	9803      	ldr	r0, [sp, #12]
    6e52:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6e56:	f88d 1002 	strb.w	r1, [sp, #2]
    6e5a:	7841      	ldrb	r1, [r0, #1]
    6e5c:	f88d 1003 	strb.w	r1, [sp, #3]
    6e60:	8840      	ldrh	r0, [r0, #2]
    6e62:	f8ad 0004 	strh.w	r0, [sp, #4]
    6e66:	2102      	movs	r1, #2
    6e68:	4668      	mov	r0, sp
    6e6a:	f008 ff85 	bl	fd78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    6e6e:	b340      	cbz	r0, 6ec2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6e70:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6e74:	e022      	b.n	6ebc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6e76:	0791      	lsls	r1, r2, #30
    6e78:	d42b      	bmi.n	6ed2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6e7a:	8884      	ldrh	r4, [r0, #4]
    6e7c:	a903      	add	r1, sp, #12
    6e7e:	4620      	mov	r0, r4
    6e80:	f008 fd99 	bl	f9b6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6e84:	b110      	cbz	r0, 6e8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    6e86:	f240 11a5 	movw	r1, #421	; 0x1a5
    6e8a:	e017      	b.n	6ebc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6e8c:	f8ad 4000 	strh.w	r4, [sp]
    6e90:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6e94:	f8ad 0002 	strh.w	r0, [sp, #2]
    6e98:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    6e9c:	f8ad 0004 	strh.w	r0, [sp, #4]
    6ea0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    6ea4:	f8ad 0006 	strh.w	r0, [sp, #6]
    6ea8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6eac:	f8ad 0008 	strh.w	r0, [sp, #8]
    6eb0:	4668      	mov	r0, sp
    6eb2:	f008 fdfe 	bl	fab2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6eb6:	b120      	cbz	r0, 6ec2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    6ebc:	2010      	movs	r0, #16
    6ebe:	f7fd fdc5 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ec2:	2001      	movs	r0, #1
    6ec4:	b006      	add	sp, #24
    6ec6:	bd10      	pop	{r4, pc}
    6ec8:	0751      	lsls	r1, r2, #29
    6eca:	d402      	bmi.n	6ed2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    6ecc:	7b80      	ldrb	r0, [r0, #14]
    6ece:	07c0      	lsls	r0, r0, #31
    6ed0:	d0f7      	beq.n	6ec2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6ed2:	2000      	movs	r0, #0
    6ed4:	e7f6      	b.n	6ec4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    6ed6:	0000      	.short	0x0000
    6ed8:	20001198 	.word	0x20001198
    6edc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ee0:	b087      	sub	sp, #28
    6ee2:	460c      	mov	r4, r1
    6ee4:	a902      	add	r1, sp, #8
    6ee6:	9807      	ldr	r0, [sp, #28]
    6ee8:	f006 fe53 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6eec:	2800      	cmp	r0, #0
    6eee:	d17d      	bne.n	6fec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    6ef0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 7014 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
    6ef4:	f04f 0a01 	mov.w	sl, #1
    6ef8:	4680      	mov	r8, r0
    6efa:	9803      	ldr	r0, [sp, #12]
    6efc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    6f00:	2800      	cmp	r0, #0
    6f02:	d00c      	beq.n	6f1e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    6f04:	f8d9 2000 	ldr.w	r2, [r9]
    6f08:	b162      	cbz	r2, 6f24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6f0a:	4621      	mov	r1, r4
    6f0c:	9807      	ldr	r0, [sp, #28]
    6f0e:	4790      	blx	r2
    6f10:	b140      	cbz	r0, 6f24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6f12:	4620      	mov	r0, r4
    6f14:	f7ff ff84 	bl	6e20 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    6f18:	2800      	cmp	r0, #0
    6f1a:	d1ee      	bne.n	6efa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
    6f1c:	2001      	movs	r0, #1
    6f1e:	b009      	add	sp, #36	; 0x24
    6f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f24:	9d03      	ldr	r5, [sp, #12]
    6f26:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    6f2a:	3570      	adds	r5, #112	; 0x70
    6f2c:	b950      	cbnz	r0, 6f44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    6f2e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6f32:	f88d 0004 	strb.w	r0, [sp, #4]
    6f36:	9801      	ldr	r0, [sp, #4]
    6f38:	9001      	str	r0, [sp, #4]
    6f3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6f3e:	b108      	cbz	r0, 6f44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    6f40:	2001      	movs	r0, #1
    6f42:	e000      	b.n	6f46 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
    6f44:	2000      	movs	r0, #0
    6f46:	4683      	mov	fp, r0
    6f48:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    6f4c:	b1c0      	cbz	r0, 6f80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    6f4e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6f52:	0780      	lsls	r0, r0, #30
    6f54:	d514      	bpl.n	6f80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    6f56:	f884 8001 	strb.w	r8, [r4, #1]
    6f5a:	f884 a000 	strb.w	sl, [r4]
    6f5e:	f884 8004 	strb.w	r8, [r4, #4]
    6f62:	9907      	ldr	r1, [sp, #28]
    6f64:	f8a4 1005 	strh.w	r1, [r4, #5]
    6f68:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    6f6c:	71e1      	strb	r1, [r4, #7]
    6f6e:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6f72:	8121      	strh	r1, [r4, #8]
    6f74:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6f78:	8161      	strh	r1, [r4, #10]
    6f7a:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    6f7e:	e7c8      	b.n	6f12 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6f80:	9807      	ldr	r0, [sp, #28]
    6f82:	f7fe f993 	bl	52ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f86:	0007      	movs	r7, r0
    6f88:	d00d      	beq.n	6fa6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
    6f8a:	f006 f9d3 	bl	d334 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6f8e:	0006      	movs	r6, r0
    6f90:	d015      	beq.n	6fbe <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
    6f92:	f884 8001 	strb.w	r8, [r4, #1]
    6f96:	200d      	movs	r0, #13
    6f98:	7020      	strb	r0, [r4, #0]
    6f9a:	9807      	ldr	r0, [sp, #28]
    6f9c:	80e0      	strh	r0, [r4, #6]
    6f9e:	8126      	strh	r6, [r4, #8]
    6fa0:	f884 a004 	strb.w	sl, [r4, #4]
    6fa4:	e007      	b.n	6fb6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    6fa6:	f240 2133 	movw	r1, #563	; 0x233
    6faa:	e02d      	b.n	7008 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
    6fac:	2100      	movs	r1, #0
    6fae:	4638      	mov	r0, r7
    6fb0:	460a      	mov	r2, r1
    6fb2:	f006 fad5 	bl	d560 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6fb6:	1e76      	subs	r6, r6, #1
    6fb8:	b2b6      	uxth	r6, r6
    6fba:	d2f7      	bcs.n	6fac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
    6fbc:	e7a9      	b.n	6f12 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6fbe:	9807      	ldr	r0, [sp, #28]
    6fc0:	f7fe f95e 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6fc4:	b1f0      	cbz	r0, 7004 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
    6fc6:	f1bb 0f00 	cmp.w	fp, #0
    6fca:	d020      	beq.n	700e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    6fcc:	f006 f8e7 	bl	d19e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6fd0:	b160      	cbz	r0, 6fec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    6fd2:	9807      	ldr	r0, [sp, #28]
    6fd4:	f006 fd1d 	bl	da12 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6fd8:	2100      	movs	r1, #0
    6fda:	9807      	ldr	r0, [sp, #28]
    6fdc:	f7fd ffbe 	bl	4f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6fe0:	f884 8001 	strb.w	r8, [r4, #1]
    6fe4:	210a      	movs	r1, #10
    6fe6:	4640      	mov	r0, r8
    6fe8:	7021      	strb	r1, [r4, #0]
    6fea:	e000      	b.n	6fee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
    6fec:	e00f      	b.n	700e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    6fee:	f884 8004 	strb.w	r8, [r4, #4]
    6ff2:	9907      	ldr	r1, [sp, #28]
    6ff4:	f8a4 1005 	strh.w	r1, [r4, #5]
    6ff8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6ffc:	71e1      	strb	r1, [r4, #7]
    6ffe:	3524      	adds	r5, #36	; 0x24
    7000:	7028      	strb	r0, [r5, #0]
    7002:	e786      	b.n	6f12 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    7004:	f240 2151 	movw	r1, #593	; 0x251
    7008:	2010      	movs	r0, #16
    700a:	f7fd fd1f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    700e:	2000      	movs	r0, #0
    7010:	e785      	b.n	6f1e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    7012:	0000      	.short	0x0000
    7014:	200000f0 	.word	0x200000f0
    7018:	4804      	ldr	r0, [pc, #16]	; (702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
    701a:	2100      	movs	r1, #0
    701c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7020:	7001      	strb	r1, [r0, #0]
    7022:	8042      	strh	r2, [r0, #2]
    7024:	1f00      	subs	r0, r0, #4
    7026:	f8a0 1001 	strh.w	r1, [r0, #1]
    702a:	4770      	bx	lr
    702c:	2000028c 	.word	0x2000028c

00007030 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7030:	b5f0      	push	{r4, r5, r6, r7, lr}
    7032:	f06f 021f 	mvn.w	r2, #31
    7036:	0c01      	lsrs	r1, r0, #16
    7038:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    703c:	251f      	movs	r5, #31
    703e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7042:	3854      	subs	r0, #84	; 0x54
    7044:	d00d      	beq.n	7062 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7046:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    704a:	3855      	subs	r0, #85	; 0x55
    704c:	d009      	beq.n	7062 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    704e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7052:	38aa      	subs	r0, #170	; 0xaa
    7054:	d005      	beq.n	7062 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7056:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    705a:	38aa      	subs	r0, #170	; 0xaa
    705c:	d001      	beq.n	7062 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    705e:	2001      	movs	r0, #1
    7060:	e000      	b.n	7064 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7062:	2000      	movs	r0, #0
    7064:	2200      	movs	r2, #0
    7066:	4613      	mov	r3, r2
    7068:	ea4f 0402 	mov.w	r4, r2
    706c:	ea82 0701 	eor.w	r7, r2, r1
    7070:	43ff      	mvns	r7, r7
    7072:	431f      	orrs	r7, r3
    7074:	1c7f      	adds	r7, r7, #1
    7076:	d00f      	beq.n	7098 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7078:	f006 0701 	and.w	r7, r6, #1
    707c:	0852      	lsrs	r2, r2, #1
    707e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7082:	f005 0701 	and.w	r7, r5, #1
    7086:	085b      	lsrs	r3, r3, #1
    7088:	0876      	lsrs	r6, r6, #1
    708a:	086d      	lsrs	r5, r5, #1
    708c:	1c64      	adds	r4, r4, #1
    708e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7092:	2c16      	cmp	r4, #22
    7094:	d3ea      	bcc.n	706c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7098:	2000      	movs	r0, #0
    709a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000709c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    709c:	b510      	push	{r4, lr}
    709e:	e9d0 2100 	ldrd	r2, r1, [r0]
    70a2:	4b09      	ldr	r3, [pc, #36]	; (70c8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    70a4:	4c09      	ldr	r4, [pc, #36]	; (70cc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    70a6:	4353      	muls	r3, r2
    70a8:	4354      	muls	r4, r2
    70aa:	4051      	eors	r1, r2
    70ac:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    70b0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    70b4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    70b8:	e9c0 2100 	strd	r2, r1, [r0]
    70bc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    70c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    70c4:	4618      	mov	r0, r3
    70c6:	bd10      	pop	{r4, pc}
    70c8:	c6ef3760 	.word	0xc6ef3760
    70cc:	9e3779bb 	.word	0x9e3779bb

000070d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    70d0:	b570      	push	{r4, r5, r6, lr}
    70d2:	4604      	mov	r4, r0
    70d4:	7c00      	ldrb	r0, [r0, #16]
    70d6:	b300      	cbz	r0, 711a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    70d8:	2802      	cmp	r0, #2
    70da:	d01e      	beq.n	711a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    70dc:	f05f 0001 	movs.w	r0, #1
    70e0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    70e4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    70e8:	460d      	mov	r5, r1
    70ea:	b1c0      	cbz	r0, 711e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    70ec:	7de0      	ldrb	r0, [r4, #23]
    70ee:	b1f0      	cbz	r0, 712e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    70f0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    70f4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    70f8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    70fc:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7100:	7c20      	ldrb	r0, [r4, #16]
    7102:	f007 fac1 	bl	e688 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    7106:	7620      	strb	r0, [r4, #24]
    7108:	2008      	movs	r0, #8
    710a:	7660      	strb	r0, [r4, #25]
    710c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7110:	4629      	mov	r1, r5
    7112:	f007 faa5 	bl	e660 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7116:	b9a8      	cbnz	r0, 7144 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    7118:	e00e      	b.n	7138 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    711a:	2000      	movs	r0, #0
    711c:	e7e0      	b.n	70e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    711e:	2000      	movs	r0, #0
    7120:	f7fe fb92 	bl	5848 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7124:	2800      	cmp	r0, #0
    7126:	d1eb      	bne.n	7100 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    7128:	f240 41aa 	movw	r1, #1194	; 0x4aa
    712c:	e001      	b.n	7132 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    712e:	f240 41ae 	movw	r1, #1198	; 0x4ae
    7132:	202d      	movs	r0, #45	; 0x2d
    7134:	f7fd fc8a 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7138:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    713c:	4629      	mov	r1, r5
    713e:	f007 fa98 	bl	e672 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7142:	b100      	cbz	r0, 7146 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7144:	2001      	movs	r0, #1
    7146:	76a0      	strb	r0, [r4, #26]
    7148:	7e20      	ldrb	r0, [r4, #24]
    714a:	b130      	cbz	r0, 715a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    714c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7150:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7154:	f006 fcda 	bl	db0c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7158:	7660      	strb	r0, [r4, #25]
    715a:	2500      	movs	r5, #0
    715c:	6425      	str	r5, [r4, #64]	; 0x40
    715e:	f005 f960 	bl	c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7162:	6460      	str	r0, [r4, #68]	; 0x44
    7164:	2100      	movs	r1, #0
    7166:	4620      	mov	r0, r4
    7168:	f007 fbad 	bl	e8c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    716c:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    7170:	78a0      	ldrb	r0, [r4, #2]
    7172:	0740      	lsls	r0, r0, #29
    7174:	d505      	bpl.n	7182 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    7176:	4620      	mov	r0, r4
    7178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    717c:	2100      	movs	r1, #0
    717e:	f000 bdff 	b.w	7d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    7182:	bd70      	pop	{r4, r5, r6, pc}

00007184 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7184:	b508      	push	{r3, lr}
    7186:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    718a:	f88d 2000 	strb.w	r2, [sp]
    718e:	9a00      	ldr	r2, [sp, #0]
    7190:	9200      	str	r2, [sp, #0]
    7192:	f89d 3000 	ldrb.w	r3, [sp]
    7196:	2200      	movs	r2, #0
    7198:	b163      	cbz	r3, 71b4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    719a:	704a      	strb	r2, [r1, #1]
    719c:	2317      	movs	r3, #23
    719e:	700b      	strb	r3, [r1, #0]
    71a0:	f850 3f95 	ldr.w	r3, [r0, #149]!
    71a4:	604b      	str	r3, [r1, #4]
    71a6:	6843      	ldr	r3, [r0, #4]
    71a8:	608b      	str	r3, [r1, #8]
    71aa:	7a03      	ldrb	r3, [r0, #8]
    71ac:	730b      	strb	r3, [r1, #12]
    71ae:	f800 2c01 	strb.w	r2, [r0, #-1]
    71b2:	e03b      	b.n	722c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    71b4:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    71b8:	f88d 3000 	strb.w	r3, [sp]
    71bc:	9b00      	ldr	r3, [sp, #0]
    71be:	9300      	str	r3, [sp, #0]
    71c0:	f89d 3000 	ldrb.w	r3, [sp]
    71c4:	b143      	cbz	r3, 71d8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    71c6:	704a      	strb	r2, [r1, #1]
    71c8:	2305      	movs	r3, #5
    71ca:	700b      	strb	r3, [r1, #0]
    71cc:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    71d0:	604b      	str	r3, [r1, #4]
    71d2:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    71d6:	e029      	b.n	722c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    71d8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    71dc:	f88d 3000 	strb.w	r3, [sp]
    71e0:	9b00      	ldr	r3, [sp, #0]
    71e2:	9300      	str	r3, [sp, #0]
    71e4:	f89d 3000 	ldrb.w	r3, [sp]
    71e8:	b11b      	cbz	r3, 71f2 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    71ea:	bf00      	nop
    71ec:	f007 fb42 	bl	e874 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    71f0:	e01c      	b.n	722c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    71f2:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    71f6:	f88d 3000 	strb.w	r3, [sp]
    71fa:	9b00      	ldr	r3, [sp, #0]
    71fc:	9300      	str	r3, [sp, #0]
    71fe:	f89d 3000 	ldrb.w	r3, [sp]
    7202:	b1ab      	cbz	r3, 7230 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    7204:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7208:	f88d 3000 	strb.w	r3, [sp]
    720c:	9b00      	ldr	r3, [sp, #0]
    720e:	9300      	str	r3, [sp, #0]
    7210:	f89d 3000 	ldrb.w	r3, [sp]
    7214:	2b00      	cmp	r3, #0
    7216:	d1e9      	bne.n	71ec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    7218:	704a      	strb	r2, [r1, #1]
    721a:	2314      	movs	r3, #20
    721c:	700b      	strb	r3, [r1, #0]
    721e:	f850 3f88 	ldr.w	r3, [r0, #136]!
    7222:	604b      	str	r3, [r1, #4]
    7224:	8883      	ldrh	r3, [r0, #4]
    7226:	810b      	strh	r3, [r1, #8]
    7228:	f800 2c02 	strb.w	r2, [r0, #-2]
    722c:	2001      	movs	r0, #1
    722e:	bd08      	pop	{r3, pc}
    7230:	2000      	movs	r0, #0
    7232:	bd08      	pop	{r3, pc}

00007234 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7234:	b530      	push	{r4, r5, lr}
    7236:	460c      	mov	r4, r1
    7238:	b08d      	sub	sp, #52	; 0x34
    723a:	4605      	mov	r5, r0
    723c:	4601      	mov	r1, r0
    723e:	2220      	movs	r2, #32
    7240:	a802      	add	r0, sp, #8
    7242:	f005 fa63 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7246:	a80a      	add	r0, sp, #40	; 0x28
    7248:	f007 fbea 	bl	ea20 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    724c:	7aa0      	ldrb	r0, [r4, #10]
    724e:	f88d 0018 	strb.w	r0, [sp, #24]
    7252:	7820      	ldrb	r0, [r4, #0]
    7254:	f88d 0008 	strb.w	r0, [sp, #8]
    7258:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    725c:	f8ad 0000 	strh.w	r0, [sp]
    7260:	f89d 0000 	ldrb.w	r0, [sp]
    7264:	f000 0101 	and.w	r1, r0, #1
    7268:	f3c0 0240 	ubfx	r2, r0, #1, #1
    726c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7270:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7274:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7278:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    727c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7280:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7284:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7288:	f3c0 1240 	ubfx	r2, r0, #5, #1
    728c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7290:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7294:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7298:	f8ad 000a 	strh.w	r0, [sp, #10]
    729c:	7d20      	ldrb	r0, [r4, #20]
    729e:	2801      	cmp	r0, #1
    72a0:	d006      	beq.n	72b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    72a2:	2802      	cmp	r0, #2
    72a4:	d004      	beq.n	72b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    72a6:	f240 2175 	movw	r1, #629	; 0x275
    72aa:	2006      	movs	r0, #6
    72ac:	f7fd fbce 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72b0:	f88d 000c 	strb.w	r0, [sp, #12]
    72b4:	7a61      	ldrb	r1, [r4, #9]
    72b6:	a80a      	add	r0, sp, #40	; 0x28
    72b8:	f007 fb99 	bl	e9ee <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    72bc:	7d20      	ldrb	r0, [r4, #20]
    72be:	2101      	movs	r1, #1
    72c0:	2802      	cmp	r0, #2
    72c2:	d102      	bne.n	72ca <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    72c4:	7d60      	ldrb	r0, [r4, #21]
    72c6:	1c40      	adds	r0, r0, #1
    72c8:	b2c1      	uxtb	r1, r0
    72ca:	7ea0      	ldrb	r0, [r4, #26]
    72cc:	1c40      	adds	r0, r0, #1
    72ce:	b2c2      	uxtb	r2, r0
    72d0:	a80a      	add	r0, sp, #40	; 0x28
    72d2:	f007 fb53 	bl	e97c <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    72d6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    72da:	0700      	lsls	r0, r0, #28
    72dc:	d501      	bpl.n	72e2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    72de:	2000      	movs	r0, #0
    72e0:	e020      	b.n	7324 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    72e2:	a80a      	add	r0, sp, #40	; 0x28
    72e4:	f007 fb5c 	bl	e9a0 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    72e8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    72ec:	2228      	movs	r2, #40	; 0x28
    72ee:	f000 fded 	bl	7ecc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    72f2:	f240 2171 	movw	r1, #625	; 0x271
    72f6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    72fa:	fbb0 f0f1 	udiv	r0, r0, r1
    72fe:	4348      	muls	r0, r1
    7300:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7304:	f240 2371 	movw	r3, #625	; 0x271
    7308:	0a0a      	lsrs	r2, r1, #8
    730a:	f240 2171 	movw	r1, #625	; 0x271
    730e:	434a      	muls	r2, r1
    7310:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7314:	0a09      	lsrs	r1, r1, #8
    7316:	4359      	muls	r1, r3
    7318:	4290      	cmp	r0, r2
    731a:	d801      	bhi.n	7320 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    731c:	9204      	str	r2, [sp, #16]
    731e:	e004      	b.n	732a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7320:	4288      	cmp	r0, r1
    7322:	d801      	bhi.n	7328 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7324:	9004      	str	r0, [sp, #16]
    7326:	e000      	b.n	732a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7328:	9104      	str	r1, [sp, #16]
    732a:	7ca0      	ldrb	r0, [r4, #18]
    732c:	f88d 0017 	strb.w	r0, [sp, #23]
    7330:	7e20      	ldrb	r0, [r4, #24]
    7332:	2801      	cmp	r0, #1
    7334:	d000      	beq.n	7338 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7336:	2000      	movs	r0, #0
    7338:	f88d 0014 	strb.w	r0, [sp, #20]
    733c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    733e:	f006 fa9e 	bl	d87e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7342:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7344:	f006 fb3e 	bl	d9c4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7348:	2220      	movs	r2, #32
    734a:	a902      	add	r1, sp, #8
    734c:	4628      	mov	r0, r5
    734e:	f005 f9dd 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7352:	980a      	ldr	r0, [sp, #40]	; 0x28
    7354:	6228      	str	r0, [r5, #32]
    7356:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    735a:	84a8      	strh	r0, [r5, #36]	; 0x24
    735c:	7ae0      	ldrb	r0, [r4, #11]
    735e:	b168      	cbz	r0, 737c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7360:	2802      	cmp	r0, #2
    7362:	d00b      	beq.n	737c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7364:	f05f 0001 	movs.w	r0, #1
    7368:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    736c:	68e0      	ldr	r0, [r4, #12]
    736e:	6528      	str	r0, [r5, #80]	; 0x50
    7370:	8a20      	ldrh	r0, [r4, #16]
    7372:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7376:	b00d      	add	sp, #52	; 0x34
    7378:	2000      	movs	r0, #0
    737a:	bd30      	pop	{r4, r5, pc}
    737c:	2000      	movs	r0, #0
    737e:	e7f3      	b.n	7368 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007380 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7380:	4a0a      	ldr	r2, [pc, #40]	; (73ac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7382:	b510      	push	{r4, lr}
    7384:	2100      	movs	r1, #0
    7386:	7011      	strb	r1, [r2, #0]
    7388:	4c09      	ldr	r4, [pc, #36]	; (73b0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    738a:	6060      	str	r0, [r4, #4]
    738c:	f000 f822 	bl	73d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7390:	b110      	cbz	r0, 7398 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7392:	f240 312a 	movw	r1, #810	; 0x32a
    7396:	e004      	b.n	73a2 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7398:	68a0      	ldr	r0, [r4, #8]
    739a:	2800      	cmp	r0, #0
    739c:	d104      	bne.n	73a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    739e:	f240 312d 	movw	r1, #813	; 0x32d
    73a2:	202d      	movs	r0, #45	; 0x2d
    73a4:	f7fd fb52 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73a8:	bd10      	pop	{r4, pc}
    73aa:	0000      	.short	0x0000
    73ac:	200011b4 	.word	0x200011b4
    73b0:	200000f8 	.word	0x200000f8

000073b4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    73b4:	4902      	ldr	r1, [pc, #8]	; (73c0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    73b6:	4801      	ldr	r0, [pc, #4]	; (73bc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    73b8:	6088      	str	r0, [r1, #8]
    73ba:	4770      	bx	lr
    73bc:	00007eb4 	.word	0x00007eb4
    73c0:	200000f8 	.word	0x200000f8

000073c4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    73c4:	4902      	ldr	r1, [pc, #8]	; (73d0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    73c6:	6008      	str	r0, [r1, #0]
    73c8:	6889      	ldr	r1, [r1, #8]
    73ca:	6809      	ldr	r1, [r1, #0]
    73cc:	4708      	bx	r1
    73ce:	0000      	.short	0x0000
    73d0:	200000f8 	.word	0x200000f8

000073d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    73d4:	4808      	ldr	r0, [pc, #32]	; (73f8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    73d6:	b510      	push	{r4, lr}
    73d8:	7800      	ldrb	r0, [r0, #0]
    73da:	b110      	cbz	r0, 73e2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    73dc:	240c      	movs	r4, #12
    73de:	4620      	mov	r0, r4
    73e0:	bd10      	pop	{r4, pc}
    73e2:	2400      	movs	r4, #0
    73e4:	2218      	movs	r2, #24
    73e6:	4621      	mov	r1, r4
    73e8:	4803      	ldr	r0, [pc, #12]	; (73f8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    73ea:	f005 fa09 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    73ee:	f004 f8c3 	bl	b578 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    73f2:	f003 fea5 	bl	b140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    73f6:	e7f2      	b.n	73de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    73f8:	200011b4 	.word	0x200011b4

000073fc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    73fc:	4904      	ldr	r1, [pc, #16]	; (7410 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    73fe:	b510      	push	{r4, lr}
    7400:	7809      	ldrb	r1, [r1, #0]
    7402:	2901      	cmp	r1, #1
    7404:	d101      	bne.n	740a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    7406:	f000 fb81 	bl	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    740a:	2000      	movs	r0, #0
    740c:	bd10      	pop	{r4, pc}
    740e:	0000      	.short	0x0000
    7410:	200011b4 	.word	0x200011b4

00007414 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7414:	4902      	ldr	r1, [pc, #8]	; (7420 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    7416:	4801      	ldr	r0, [pc, #4]	; (741c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    7418:	6008      	str	r0, [r1, #0]
    741a:	4770      	bx	lr
    741c:	00007c59 	.word	0x00007c59
    7420:	20000104 	.word	0x20000104
    7424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7428:	000f      	movs	r7, r1
    742a:	4604      	mov	r4, r0
    742c:	d023      	beq.n	7476 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    742e:	f104 0020 	add.w	r0, r4, #32
    7432:	4605      	mov	r5, r0
    7434:	f007 fadd 	bl	e9f2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7438:	b9b0      	cbnz	r0, 7468 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    743a:	78a0      	ldrb	r0, [r4, #2]
    743c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7440:	b350      	cbz	r0, 7498 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7442:	4628      	mov	r0, r5
    7444:	f007 faac 	bl	e9a0 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7448:	4606      	mov	r6, r0
    744a:	4628      	mov	r0, r5
    744c:	f007 fad1 	bl	e9f2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7450:	1a30      	subs	r0, r6, r0
    7452:	b2c0      	uxtb	r0, r0
    7454:	f007 fb22 	bl	ea9c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7458:	4601      	mov	r1, r0
    745a:	4835      	ldr	r0, [pc, #212]	; (7530 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    745c:	6842      	ldr	r2, [r0, #4]
    745e:	4411      	add	r1, r2
    7460:	6041      	str	r1, [r0, #4]
    7462:	4628      	mov	r0, r5
    7464:	f007 fae3 	bl	ea2e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7468:	4628      	mov	r0, r5
    746a:	f007 faa5 	bl	e9b8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    746e:	4601      	mov	r1, r0
    7470:	4620      	mov	r0, r4
    7472:	f007 fa64 	bl	e93e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7476:	4d2f      	ldr	r5, [pc, #188]	; (7534 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7478:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    747c:	2100      	movs	r1, #0
    747e:	6868      	ldr	r0, [r5, #4]
    7480:	8001      	strh	r1, [r0, #0]
    7482:	f007 fa72 	bl	e96a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7486:	8860      	ldrh	r0, [r4, #2]
    7488:	2813      	cmp	r0, #19
    748a:	d013      	beq.n	74b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    748c:	dc09      	bgt.n	74a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    748e:	2810      	cmp	r0, #16
    7490:	d036      	beq.n	7500 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7492:	2812      	cmp	r0, #18
    7494:	d109      	bne.n	74aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7496:	e031      	b.n	74fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7498:	4620      	mov	r0, r4
    749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    749e:	f000 bb35 	b.w	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    74a2:	2815      	cmp	r0, #21
    74a4:	d00f      	beq.n	74c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    74a6:	281d      	cmp	r0, #29
    74a8:	d00d      	beq.n	74c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    74aa:	f240 616c 	movw	r1, #1644	; 0x66c
    74ae:	202d      	movs	r0, #45	; 0x2d
    74b0:	f7fd facc 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74b4:	2100      	movs	r1, #0
    74b6:	6868      	ldr	r0, [r5, #4]
    74b8:	f006 fe9b 	bl	e1f2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    74bc:	2101      	movs	r1, #1
    74be:	6868      	ldr	r0, [r5, #4]
    74c0:	f007 fa53 	bl	e96a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    74c4:	e020      	b.n	7508 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    74c6:	2101      	movs	r1, #1
    74c8:	6868      	ldr	r0, [r5, #4]
    74ca:	f006 fe92 	bl	e1f2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    74ce:	2101      	movs	r1, #1
    74d0:	6868      	ldr	r0, [r5, #4]
    74d2:	f007 fa4a 	bl	e96a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    74d6:	b136      	cbz	r6, 74e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    74d8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    74dc:	6868      	ldr	r0, [r5, #4]
    74de:	f006 fea3 	bl	e228 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    74e2:	2101      	movs	r1, #1
    74e4:	e006      	b.n	74f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    74e6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    74ea:	6868      	ldr	r0, [r5, #4]
    74ec:	f006 fe9c 	bl	e228 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    74f0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    74f4:	6868      	ldr	r0, [r5, #4]
    74f6:	f006 fe9d 	bl	e234 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    74fa:	e005      	b.n	7508 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    74fc:	2106      	movs	r1, #6
    74fe:	e000      	b.n	7502 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7500:	2102      	movs	r1, #2
    7502:	6868      	ldr	r0, [r5, #4]
    7504:	f006 fe75 	bl	e1f2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7508:	4620      	mov	r0, r4
    750a:	f000 fcaf 	bl	7e6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    750e:	8860      	ldrh	r0, [r4, #2]
    7510:	281d      	cmp	r0, #29
    7512:	d006      	beq.n	7522 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7514:	2815      	cmp	r0, #21
    7516:	d004      	beq.n	7522 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7518:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    751a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    751c:	6868      	ldr	r0, [r5, #4]
    751e:	f006 fe58 	bl	e1d2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7522:	4639      	mov	r1, r7
    7524:	4620      	mov	r0, r4
    7526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    752a:	f000 b9e5 	b.w	78f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    752e:	0000      	.short	0x0000
    7530:	200011b4 	.word	0x200011b4
    7534:	200000f8 	.word	0x200000f8
    7538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    753c:	4d2e      	ldr	r5, [pc, #184]	; (75f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    753e:	4607      	mov	r7, r0
    7540:	7828      	ldrb	r0, [r5, #0]
    7542:	2802      	cmp	r0, #2
    7544:	d005      	beq.n	7552 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7546:	7828      	ldrb	r0, [r5, #0]
    7548:	2803      	cmp	r0, #3
    754a:	d002      	beq.n	7552 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    754c:	f640 41f7 	movw	r1, #3319	; 0xcf7
    7550:	e029      	b.n	75a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    7552:	4c2a      	ldr	r4, [pc, #168]	; (75fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7554:	6820      	ldr	r0, [r4, #0]
    7556:	7b01      	ldrb	r1, [r0, #12]
    7558:	b109      	cbz	r1, 755e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    755a:	f007 f9fb 	bl	e954 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    755e:	6860      	ldr	r0, [r4, #4]
    7560:	f04f 0800 	mov.w	r8, #0
    7564:	7802      	ldrb	r2, [r0, #0]
    7566:	f002 060f 	and.w	r6, r2, #15
    756a:	b357      	cbz	r7, 75c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    756c:	6821      	ldr	r1, [r4, #0]
    756e:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7572:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    7576:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    757a:	d122      	bne.n	75c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    757c:	2206      	movs	r2, #6
    757e:	4619      	mov	r1, r3
    7580:	3009      	adds	r0, #9
    7582:	f005 f8b1 	bl	c6e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7586:	b9e0      	cbnz	r0, 75c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7588:	4641      	mov	r1, r8
    758a:	6860      	ldr	r0, [r4, #4]
    758c:	f006 fe11 	bl	e1b2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7590:	b1b8      	cbz	r0, 75c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7592:	782a      	ldrb	r2, [r5, #0]
    7594:	6820      	ldr	r0, [r4, #0]
    7596:	4631      	mov	r1, r6
    7598:	2a02      	cmp	r2, #2
    759a:	d007      	beq.n	75ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    759c:	782a      	ldrb	r2, [r5, #0]
    759e:	2a03      	cmp	r2, #3
    75a0:	d004      	beq.n	75ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    75a2:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    75a6:	202d      	movs	r0, #45	; 0x2d
    75a8:	f7fd fa50 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75ac:	68a2      	ldr	r2, [r4, #8]
    75ae:	782b      	ldrb	r3, [r5, #0]
    75b0:	6952      	ldr	r2, [r2, #20]
    75b2:	f06f 0607 	mvn.w	r6, #7
    75b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    75ba:	58d2      	ldr	r2, [r2, r3]
    75bc:	4790      	blx	r2
    75be:	4606      	mov	r6, r0
    75c0:	e000      	b.n	75c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    75c2:	2601      	movs	r6, #1
    75c4:	7ba8      	ldrb	r0, [r5, #14]
    75c6:	b118      	cbz	r0, 75d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    75c8:	f003 ffd6 	bl	b578 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    75cc:	f003 fdb8 	bl	b140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    75d0:	2e00      	cmp	r6, #0
    75d2:	d00f      	beq.n	75f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    75d4:	6820      	ldr	r0, [r4, #0]
    75d6:	f007 fa77 	bl	eac8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    75da:	b130      	cbz	r0, 75ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    75dc:	f003 ffec 	bl	b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    75e0:	68a0      	ldr	r0, [r4, #8]
    75e2:	6880      	ldr	r0, [r0, #8]
    75e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75e8:	4700      	bx	r0
    75ea:	6820      	ldr	r0, [r4, #0]
    75ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75f0:	f000 ba8c 	b.w	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    75f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75f8:	200011b4 	.word	0x200011b4
    75fc:	200000f8 	.word	0x200000f8
    7600:	b510      	push	{r4, lr}
    7602:	2903      	cmp	r1, #3
    7604:	d002      	beq.n	760c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    7606:	2905      	cmp	r1, #5
    7608:	d10a      	bne.n	7620 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    760a:	e002      	b.n	7612 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    760c:	f000 fb7e 	bl	7d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    7610:	e003      	b.n	761a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7612:	4904      	ldr	r1, [pc, #16]	; (7624 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7614:	6809      	ldr	r1, [r1, #0]
    7616:	b109      	cbz	r1, 761c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    7618:	4788      	blx	r1
    761a:	b108      	cbz	r0, 7620 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    761c:	2000      	movs	r0, #0
    761e:	bd10      	pop	{r4, pc}
    7620:	2001      	movs	r0, #1
    7622:	bd10      	pop	{r4, pc}
    7624:	20000104 	.word	0x20000104
    7628:	4a09      	ldr	r2, [pc, #36]	; (7650 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    762a:	0003      	movs	r3, r0
    762c:	6810      	ldr	r0, [r2, #0]
    762e:	d001      	beq.n	7634 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7630:	f000 ba6c 	b.w	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7634:	2900      	cmp	r1, #0
    7636:	d009      	beq.n	764c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7638:	6891      	ldr	r1, [r2, #8]
    763a:	4a06      	ldr	r2, [pc, #24]	; (7654 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    763c:	6909      	ldr	r1, [r1, #16]
    763e:	7812      	ldrb	r2, [r2, #0]
    7640:	f06f 030f 	mvn.w	r3, #15
    7644:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7648:	5889      	ldr	r1, [r1, r2]
    764a:	4708      	bx	r1
    764c:	4770      	bx	lr
    764e:	0000      	.short	0x0000
    7650:	200000f8 	.word	0x200000f8
    7654:	200011b4 	.word	0x200011b4
    7658:	b570      	push	{r4, r5, r6, lr}
    765a:	4604      	mov	r4, r0
    765c:	8840      	ldrh	r0, [r0, #2]
    765e:	2810      	cmp	r0, #16
    7660:	d019      	beq.n	7696 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7662:	4d10      	ldr	r5, [pc, #64]	; (76a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7664:	7ba8      	ldrb	r0, [r5, #14]
    7666:	b120      	cbz	r0, 7672 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7668:	f003 fd8a 	bl	b180 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    766c:	2040      	movs	r0, #64	; 0x40
    766e:	f003 ff91 	bl	b594 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7672:	480d      	ldr	r0, [pc, #52]	; (76a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7674:	6840      	ldr	r0, [r0, #4]
    7676:	f004 fa4d 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    767a:	78a0      	ldrb	r0, [r4, #2]
    767c:	0740      	lsls	r0, r0, #29
    767e:	d404      	bmi.n	768a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7680:	2100      	movs	r1, #0
    7682:	7922      	ldrb	r2, [r4, #4]
    7684:	4608      	mov	r0, r1
    7686:	f004 fad1 	bl	bc2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    768a:	2000      	movs	r0, #0
    768c:	f004 f8d8 	bl	b840 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7690:	2002      	movs	r0, #2
    7692:	7028      	strb	r0, [r5, #0]
    7694:	bd70      	pop	{r4, r5, r6, pc}
    7696:	4620      	mov	r0, r4
    7698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    769c:	2101      	movs	r1, #1
    769e:	f7ff bec1 	b.w	7424 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    76a2:	0000      	.short	0x0000
    76a4:	200011b4 	.word	0x200011b4
    76a8:	200000f8 	.word	0x200000f8
    76ac:	b510      	push	{r4, lr}
    76ae:	4c12      	ldr	r4, [pc, #72]	; (76f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    76b0:	6820      	ldr	r0, [r4, #0]
    76b2:	f000 f825 	bl	7700 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    76b6:	6820      	ldr	r0, [r4, #0]
    76b8:	f007 fa06 	bl	eac8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    76bc:	2800      	cmp	r0, #0
    76be:	6820      	ldr	r0, [r4, #0]
    76c0:	d00b      	beq.n	76da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    76c2:	490e      	ldr	r1, [pc, #56]	; (76fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    76c4:	780a      	ldrb	r2, [r1, #0]
    76c6:	2a02      	cmp	r2, #2
    76c8:	d00b      	beq.n	76e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    76ca:	780a      	ldrb	r2, [r1, #0]
    76cc:	2a03      	cmp	r2, #3
    76ce:	d008      	beq.n	76e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    76d0:	f640 31fe 	movw	r1, #3070	; 0xbfe
    76d4:	202d      	movs	r0, #45	; 0x2d
    76d6:	f7fd f9b9 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76de:	f000 ba15 	b.w	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    76e2:	68a2      	ldr	r2, [r4, #8]
    76e4:	7809      	ldrb	r1, [r1, #0]
    76e6:	68d2      	ldr	r2, [r2, #12]
    76e8:	f06f 0307 	mvn.w	r3, #7
    76ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    76f0:	5851      	ldr	r1, [r2, r1]
    76f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76f6:	4708      	bx	r1
    76f8:	200000f8 	.word	0x200000f8
    76fc:	200011b4 	.word	0x200011b4
    7700:	b510      	push	{r4, lr}
    7702:	7b01      	ldrb	r1, [r0, #12]
    7704:	b109      	cbz	r1, 770a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    7706:	f007 f925 	bl	e954 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    770a:	4805      	ldr	r0, [pc, #20]	; (7720 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    770c:	7b80      	ldrb	r0, [r0, #14]
    770e:	2800      	cmp	r0, #0
    7710:	d005      	beq.n	771e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7712:	f003 ff31 	bl	b578 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    771a:	f003 bd11 	b.w	b140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    771e:	bd10      	pop	{r4, pc}
    7720:	200011b4 	.word	0x200011b4

00007724 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7728:	4d58      	ldr	r5, [pc, #352]	; (788c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    772a:	4604      	mov	r4, r0
    772c:	b088      	sub	sp, #32
    772e:	7828      	ldrb	r0, [r5, #0]
    7730:	bbf0      	cbnz	r0, 77b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    7732:	7820      	ldrb	r0, [r4, #0]
    7734:	28ff      	cmp	r0, #255	; 0xff
    7736:	d03c      	beq.n	77b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7738:	2600      	movs	r6, #0
    773a:	81ae      	strh	r6, [r5, #12]
    773c:	606e      	str	r6, [r5, #4]
    773e:	706e      	strb	r6, [r5, #1]
    7740:	70ae      	strb	r6, [r5, #2]
    7742:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    7746:	4b52      	ldr	r3, [pc, #328]	; (7890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7748:	f8df 8148 	ldr.w	r8, [pc, #328]	; 7894 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    774c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    774e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    7752:	f8d8 0008 	ldr.w	r0, [r8, #8]
    7756:	6840      	ldr	r0, [r0, #4]
    7758:	9003      	str	r0, [sp, #12]
    775a:	4668      	mov	r0, sp
    775c:	f004 f844 	bl	b7e8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7760:	f004 f94c 	bl	b9fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7764:	f004 fbb8 	bl	bed8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7768:	f003 ff06 	bl	b578 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    776c:	f003 fce8 	bl	b140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7770:	4849      	ldr	r0, [pc, #292]	; (7898 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    7772:	f004 fa9d 	bl	bcb0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7776:	4846      	ldr	r0, [pc, #280]	; (7890 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    7778:	1f00      	subs	r0, r0, #4
    777a:	f004 faa3 	bl	bcc4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    777e:	f104 0020 	add.w	r0, r4, #32
    7782:	4607      	mov	r7, r0
    7784:	f007 f953 	bl	ea2e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7788:	4638      	mov	r0, r7
    778a:	f007 f915 	bl	e9b8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    778e:	4601      	mov	r1, r0
    7790:	4620      	mov	r0, r4
    7792:	f007 f8d4 	bl	e93e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7796:	f994 000e 	ldrsb.w	r0, [r4, #14]
    779a:	f004 f9b5 	bl	bb08 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    779e:	7921      	ldrb	r1, [r4, #4]
    77a0:	2000      	movs	r0, #0
    77a2:	f003 ffa5 	bl	b6f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    77a6:	60a8      	str	r0, [r5, #8]
    77a8:	b138      	cbz	r0, 77ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    77aa:	7ea0      	ldrb	r0, [r4, #26]
    77ac:	b968      	cbnz	r0, 77ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    77ae:	e007      	b.n	77c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    77b0:	e7ff      	b.n	77b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    77b2:	200c      	movs	r0, #12
    77b4:	b008      	add	sp, #32
    77b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77ba:	2001      	movs	r0, #1
    77bc:	7028      	strb	r0, [r5, #0]
    77be:	e062      	b.n	7886 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    77c0:	7e20      	ldrb	r0, [r4, #24]
    77c2:	b910      	cbnz	r0, 77ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    77c4:	78a0      	ldrb	r0, [r4, #2]
    77c6:	0740      	lsls	r0, r0, #29
    77c8:	d529      	bpl.n	781e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    77ca:	f004 fe2a 	bl	c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    77ce:	4682      	mov	sl, r0
    77d0:	4651      	mov	r1, sl
    77d2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    77d4:	f7fa fd6a 	bl	22ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    77d8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 789c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    77dc:	4607      	mov	r7, r0
    77de:	fb90 f1f9 	sdiv	r1, r0, r9
    77e2:	fb09 7011 	mls	r0, r9, r1, r7
    77e6:	4241      	negs	r1, r0
    77e8:	4650      	mov	r0, sl
    77ea:	f7fa fd2d 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    77ee:	6460      	str	r0, [r4, #68]	; 0x44
    77f0:	fb97 f0f9 	sdiv	r0, r7, r9
    77f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    77f6:	4408      	add	r0, r1
    77f8:	6420      	str	r0, [r4, #64]	; 0x40
    77fa:	f7fe fedf 	bl	65bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    77fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7800:	4288      	cmp	r0, r1
    7802:	d80c      	bhi.n	781e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7804:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7808:	2101      	movs	r1, #1
    780a:	4620      	mov	r0, r4
    780c:	f007 f85b 	bl	e8c6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    7810:	78a0      	ldrb	r0, [r4, #2]
    7812:	0740      	lsls	r0, r0, #29
    7814:	d503      	bpl.n	781e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7816:	2101      	movs	r1, #1
    7818:	4620      	mov	r0, r4
    781a:	f000 fab1 	bl	7d80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    781e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7822:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7824:	f006 f89d 	bl	d962 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7828:	f104 0138 	add.w	r1, r4, #56	; 0x38
    782c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    782e:	f006 f89b 	bl	d968 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7832:	f7fe ff29 	bl	6688 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7836:	f8d8 0004 	ldr.w	r0, [r8, #4]
    783a:	1cc0      	adds	r0, r0, #3
    783c:	f006 f959 	bl	daf2 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7840:	73a8      	strb	r0, [r5, #14]
    7842:	78a0      	ldrb	r0, [r4, #2]
    7844:	07c0      	lsls	r0, r0, #31
    7846:	d01e      	beq.n	7886 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7848:	a904      	add	r1, sp, #16
    784a:	2000      	movs	r0, #0
    784c:	f005 ff63 	bl	d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7850:	b120      	cbz	r0, 785c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    7852:	f640 11c9 	movw	r1, #2505	; 0x9c9
    7856:	202d      	movs	r0, #45	; 0x2d
    7858:	f7fd f8f8 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    785c:	20ff      	movs	r0, #255	; 0xff
    785e:	73e8      	strb	r0, [r5, #15]
    7860:	e00c      	b.n	787c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    7862:	9806      	ldr	r0, [sp, #24]
    7864:	69e1      	ldr	r1, [r4, #28]
    7866:	4281      	cmp	r1, r0
    7868:	d008      	beq.n	787c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    786a:	7881      	ldrb	r1, [r0, #2]
    786c:	73e9      	strb	r1, [r5, #15]
    786e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7872:	6129      	str	r1, [r5, #16]
    7874:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7878:	82a8      	strh	r0, [r5, #20]
    787a:	e004      	b.n	7886 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    787c:	a804      	add	r0, sp, #16
    787e:	f7fd fb1d 	bl	4ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7882:	2800      	cmp	r0, #0
    7884:	d0ed      	beq.n	7862 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    7886:	2000      	movs	r0, #0
    7888:	e794      	b.n	77b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    788a:	0000      	.short	0x0000
    788c:	200011b4 	.word	0x200011b4
    7890:	00007e94 	.word	0x00007e94
    7894:	200000f8 	.word	0x200000f8
    7898:	8e89bed6 	.word	0x8e89bed6
    789c:	000f4240 	.word	0x000f4240
    78a0:	b510      	push	{r4, lr}
    78a2:	4604      	mov	r4, r0
    78a4:	f7ff ff3e 	bl	7724 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    78a8:	2800      	cmp	r0, #0
    78aa:	d108      	bne.n	78be <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    78ac:	4804      	ldr	r0, [pc, #16]	; (78c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    78ae:	7800      	ldrb	r0, [r0, #0]
    78b0:	2801      	cmp	r0, #1
    78b2:	d003      	beq.n	78bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    78b4:	2100      	movs	r1, #0
    78b6:	4620      	mov	r0, r4
    78b8:	f7ff fdb4 	bl	7424 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    78bc:	2000      	movs	r0, #0
    78be:	bd10      	pop	{r4, pc}
    78c0:	200011b4 	.word	0x200011b4
    78c4:	480a      	ldr	r0, [pc, #40]	; (78f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    78c6:	b510      	push	{r4, lr}
    78c8:	490a      	ldr	r1, [pc, #40]	; (78f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    78ca:	6804      	ldr	r4, [r0, #0]
    78cc:	7808      	ldrb	r0, [r1, #0]
    78ce:	2800      	cmp	r0, #0
    78d0:	d00d      	beq.n	78ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    78d2:	7808      	ldrb	r0, [r1, #0]
    78d4:	2802      	cmp	r0, #2
    78d6:	d002      	beq.n	78de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    78d8:	7808      	ldrb	r0, [r1, #0]
    78da:	2803      	cmp	r0, #3
    78dc:	d102      	bne.n	78e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    78de:	4620      	mov	r0, r4
    78e0:	f7ff ff0e 	bl	7700 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    78e4:	4620      	mov	r0, r4
    78e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78ea:	f000 b90f 	b.w	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    78ee:	bd10      	pop	{r4, pc}
    78f0:	200000f8 	.word	0x200000f8
    78f4:	200011b4 	.word	0x200011b4
    78f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78fc:	4604      	mov	r4, r0
    78fe:	4827      	ldr	r0, [pc, #156]	; (799c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    7900:	460d      	mov	r5, r1
    7902:	6840      	ldr	r0, [r0, #4]
    7904:	f004 f906 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7908:	4e25      	ldr	r6, [pc, #148]	; (79a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    790a:	2004      	movs	r0, #4
    790c:	7030      	strb	r0, [r6, #0]
    790e:	b325      	cbz	r5, 795a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7910:	8860      	ldrh	r0, [r4, #2]
    7912:	2810      	cmp	r0, #16
    7914:	d02a      	beq.n	796c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    7916:	f104 0020 	add.w	r0, r4, #32
    791a:	4680      	mov	r8, r0
    791c:	68b5      	ldr	r5, [r6, #8]
    791e:	f007 f83f 	bl	e9a0 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7922:	4607      	mov	r7, r0
    7924:	4640      	mov	r0, r8
    7926:	f007 f864 	bl	e9f2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    792a:	1a38      	subs	r0, r7, r0
    792c:	1e40      	subs	r0, r0, #1
    792e:	b2c0      	uxtb	r0, r0
    7930:	8861      	ldrh	r1, [r4, #2]
    7932:	2228      	movs	r2, #40	; 0x28
    7934:	f000 faea 	bl	7f0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7938:	4405      	add	r5, r0
    793a:	78a0      	ldrb	r0, [r4, #2]
    793c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7940:	b130      	cbz	r0, 7950 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    7942:	6870      	ldr	r0, [r6, #4]
    7944:	4405      	add	r5, r0
    7946:	f007 f8ad 	bl	eaa4 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    794a:	4428      	add	r0, r5
    794c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7950:	7922      	ldrb	r2, [r4, #4]
    7952:	4629      	mov	r1, r5
    7954:	2000      	movs	r0, #0
    7956:	f004 f8ed 	bl	bb34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    795a:	8860      	ldrh	r0, [r4, #2]
    795c:	2813      	cmp	r0, #19
    795e:	d013      	beq.n	7988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7960:	dc09      	bgt.n	7976 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    7962:	2810      	cmp	r0, #16
    7964:	d017      	beq.n	7996 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7966:	2812      	cmp	r0, #18
    7968:	d109      	bne.n	797e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    796a:	e00d      	b.n	7988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    796c:	7921      	ldrb	r1, [r4, #4]
    796e:	2000      	movs	r0, #0
    7970:	f003 fe72 	bl	b658 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7974:	e7f1      	b.n	795a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7976:	2815      	cmp	r0, #21
    7978:	d006      	beq.n	7988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    797a:	281d      	cmp	r0, #29
    797c:	d004      	beq.n	7988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    797e:	f640 5185 	movw	r1, #3461	; 0xd85
    7982:	202d      	movs	r0, #45	; 0x2d
    7984:	f7fd f862 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7988:	7922      	ldrb	r2, [r4, #4]
    798a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    798e:	2101      	movs	r1, #1
    7990:	2000      	movs	r0, #0
    7992:	f004 b94b 	b.w	bc2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    799a:	0000      	.short	0x0000
    799c:	200000f8 	.word	0x200000f8
    79a0:	200011b4 	.word	0x200011b4
    79a4:	b510      	push	{r4, lr}
    79a6:	4604      	mov	r4, r0
    79a8:	7800      	ldrb	r0, [r0, #0]
    79aa:	460b      	mov	r3, r1
    79ac:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    79b0:	29ff      	cmp	r1, #255	; 0xff
    79b2:	d010      	beq.n	79d6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    79b4:	f104 0297 	add.w	r2, r4, #151	; 0x97
    79b8:	1e51      	subs	r1, r2, #1
    79ba:	4618      	mov	r0, r3
    79bc:	f7fe fd7c 	bl	64b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    79c0:	b130      	cbz	r0, 79d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    79c2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    79c6:	f040 0002 	orr.w	r0, r0, #2
    79ca:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    79ce:	e011      	b.n	79f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    79d0:	f640 71bc 	movw	r1, #4028	; 0xfbc
    79d4:	e020      	b.n	7a18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    79d6:	4812      	ldr	r0, [pc, #72]	; (7a20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    79d8:	6840      	ldr	r0, [r0, #4]
    79da:	7801      	ldrb	r1, [r0, #0]
    79dc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    79e0:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    79e4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    79e8:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    79ec:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    79f0:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    79f4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    79f8:	287f      	cmp	r0, #127	; 0x7f
    79fa:	d00b      	beq.n	7a14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    79fc:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7a00:	207f      	movs	r0, #127	; 0x7f
    7a02:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7a06:	347e      	adds	r4, #126	; 0x7e
    7a08:	2001      	movs	r0, #1
    7a0a:	75a0      	strb	r0, [r4, #22]
    7a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a10:	f7ff b9a8 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7a14:	f640 6137 	movw	r1, #3639	; 0xe37
    7a18:	202d      	movs	r0, #45	; 0x2d
    7a1a:	f7fd f817 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a1e:	0000      	.short	0x0000
    7a20:	200000f8 	.word	0x200000f8
    7a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a28:	4690      	mov	r8, r2
    7a2a:	460e      	mov	r6, r1
    7a2c:	4604      	mov	r4, r0
    7a2e:	2903      	cmp	r1, #3
    7a30:	d004      	beq.n	7a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7a32:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7a36:	b108      	cbz	r0, 7a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7a38:	2001      	movs	r0, #1
    7a3a:	e000      	b.n	7a3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    7a3c:	2000      	movs	r0, #0
    7a3e:	4681      	mov	r9, r0
    7a40:	f003 fdb4 	bl	b5ac <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7a44:	4605      	mov	r5, r0
    7a46:	2e03      	cmp	r6, #3
    7a48:	d003      	beq.n	7a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    7a4a:	2701      	movs	r7, #1
    7a4c:	2e05      	cmp	r6, #5
    7a4e:	d005      	beq.n	7a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    7a50:	e008      	b.n	7a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    7a52:	78a0      	ldrb	r0, [r4, #2]
    7a54:	2702      	movs	r7, #2
    7a56:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7a5a:	e001      	b.n	7a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7a5c:	78a0      	ldrb	r0, [r4, #2]
    7a5e:	07c0      	lsls	r0, r0, #31
    7a60:	2800      	cmp	r0, #0
    7a62:	d04a      	beq.n	7afa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    7a64:	f1b9 0f00 	cmp.w	r9, #0
    7a68:	d146      	bne.n	7af8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7a6a:	4826      	ldr	r0, [pc, #152]	; (7b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    7a6c:	7b80      	ldrb	r0, [r0, #14]
    7a6e:	b140      	cbz	r0, 7a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    7a70:	f006 f842 	bl	daf8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7a74:	f888 0000 	strb.w	r0, [r8]
    7a78:	28ff      	cmp	r0, #255	; 0xff
    7a7a:	d002      	beq.n	7a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    7a7c:	f7fe fd36 	bl	64ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7a80:	4305      	orrs	r5, r0
    7a82:	4e21      	ldr	r6, [pc, #132]	; (7b08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    7a84:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7a88:	6870      	ldr	r0, [r6, #4]
    7a8a:	7801      	ldrb	r1, [r0, #0]
    7a8c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7a90:	4291      	cmp	r1, r2
    7a92:	d106      	bne.n	7aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    7a94:	2206      	movs	r2, #6
    7a96:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7a9a:	1cc0      	adds	r0, r0, #3
    7a9c:	f004 fe24 	bl	c6e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7aa0:	b130      	cbz	r0, 7ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    7aa2:	2000      	movs	r0, #0
    7aa4:	f898 1000 	ldrb.w	r1, [r8]
    7aa8:	29ff      	cmp	r1, #255	; 0xff
    7aaa:	d007      	beq.n	7abc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    7aac:	b9a8      	cbnz	r0, 7ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7aae:	e001      	b.n	7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    7ab0:	2001      	movs	r0, #1
    7ab2:	e7f7      	b.n	7aa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    7ab4:	7e60      	ldrb	r0, [r4, #25]
    7ab6:	4288      	cmp	r0, r1
    7ab8:	d00f      	beq.n	7ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7aba:	e008      	b.n	7ace <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7abc:	b138      	cbz	r0, 7ace <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7abe:	6871      	ldr	r1, [r6, #4]
    7ac0:	f811 0b03 	ldrb.w	r0, [r1], #3
    7ac4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7ac8:	f006 febb 	bl	e842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7acc:	b128      	cbz	r0, 7ada <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7ace:	2000      	movs	r0, #0
    7ad0:	78a1      	ldrb	r1, [r4, #2]
    7ad2:	0749      	lsls	r1, r1, #29
    7ad4:	d503      	bpl.n	7ade <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    7ad6:	b990      	cbnz	r0, 7afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7ad8:	e00e      	b.n	7af8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7ada:	2001      	movs	r0, #1
    7adc:	e7f8      	b.n	7ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    7ade:	b975      	cbnz	r5, 7afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7ae0:	7be0      	ldrb	r0, [r4, #15]
    7ae2:	b108      	cbz	r0, 7ae8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    7ae4:	42b8      	cmp	r0, r7
    7ae6:	d107      	bne.n	7af8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7ae8:	6871      	ldr	r1, [r6, #4]
    7aea:	f811 0b03 	ldrb.w	r0, [r1], #3
    7aee:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7af2:	f006 fea6 	bl	e842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7af6:	b110      	cbz	r0, 7afe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7af8:	2000      	movs	r0, #0
    7afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7afe:	2001      	movs	r0, #1
    7b00:	e7fb      	b.n	7afa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    7b02:	0000      	.short	0x0000
    7b04:	200011b4 	.word	0x200011b4
    7b08:	200000f8 	.word	0x200000f8
    7b0c:	b570      	push	{r4, r5, r6, lr}
    7b0e:	4604      	mov	r4, r0
    7b10:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7b12:	4d13      	ldr	r5, [pc, #76]	; (7b60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    7b14:	1c40      	adds	r0, r0, #1
    7b16:	62a0      	str	r0, [r4, #40]	; 0x28
    7b18:	7ba8      	ldrb	r0, [r5, #14]
    7b1a:	2600      	movs	r6, #0
    7b1c:	b120      	cbz	r0, 7b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    7b1e:	f003 fd2b 	bl	b578 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7b22:	f003 fb0d 	bl	b140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7b26:	73ae      	strb	r6, [r5, #14]
    7b28:	702e      	strb	r6, [r5, #0]
    7b2a:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7b2e:	b108      	cbz	r0, 7b34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    7b30:	2101      	movs	r1, #1
    7b32:	e00f      	b.n	7b54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    7b34:	7b60      	ldrb	r0, [r4, #13]
    7b36:	b160      	cbz	r0, 7b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7b38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7b3a:	4288      	cmp	r0, r1
    7b3c:	d809      	bhi.n	7b52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7b3e:	2101      	movs	r1, #1
    7b40:	4620      	mov	r0, r4
    7b42:	f006 ffd6 	bl	eaf2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7b46:	78a0      	ldrb	r0, [r4, #2]
    7b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b4c:	07c0      	lsls	r0, r0, #31
    7b4e:	f7ff b909 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b52:	2100      	movs	r1, #0
    7b54:	4620      	mov	r0, r4
    7b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b5a:	f006 bfca 	b.w	eaf2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7b5e:	0000      	.short	0x0000
    7b60:	200011b4 	.word	0x200011b4
    7b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b68:	4604      	mov	r4, r0
    7b6a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7b6e:	4617      	mov	r7, r2
    7b70:	460d      	mov	r5, r1
    7b72:	f88d 0000 	strb.w	r0, [sp]
    7b76:	9800      	ldr	r0, [sp, #0]
    7b78:	9000      	str	r0, [sp, #0]
    7b7a:	f89d 0000 	ldrb.w	r0, [sp]
    7b7e:	b110      	cbz	r0, 7b86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    7b80:	f640 4132 	movw	r1, #3122	; 0xc32
    7b84:	e054      	b.n	7c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    7b86:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7b8a:	8828      	ldrh	r0, [r5, #0]
    7b8c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    7b90:	2b00      	cmp	r3, #0
    7b92:	d15d      	bne.n	7c50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    7b94:	68e8      	ldr	r0, [r5, #12]
    7b96:	f006 f80d 	bl	dbb4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7b9a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7b9e:	8aa8      	ldrh	r0, [r5, #20]
    7ba0:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    7ba4:	8ae8      	ldrh	r0, [r5, #22]
    7ba6:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    7baa:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    7bae:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    7bb2:	7e21      	ldrb	r1, [r4, #24]
    7bb4:	f104 0849 	add.w	r8, r4, #73	; 0x49
    7bb8:	2600      	movs	r6, #0
    7bba:	b129      	cbz	r1, 7bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    7bbc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7bc0:	4641      	mov	r1, r8
    7bc2:	f006 fd56 	bl	e672 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7bc6:	b940      	cbnz	r0, 7bda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    7bc8:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7bcc:	b170      	cbz	r0, 7bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    7bce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7bd2:	4641      	mov	r1, r8
    7bd4:	f006 fd44 	bl	e660 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7bd8:	b140      	cbz	r0, 7bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    7bda:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7bde:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    7be2:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7be6:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    7bea:	e003      	b.n	7bf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    7bec:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    7bf0:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    7bf4:	4817      	ldr	r0, [pc, #92]	; (7c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
    7bf6:	2fff      	cmp	r7, #255	; 0xff
    7bf8:	6840      	ldr	r0, [r0, #4]
    7bfa:	7801      	ldrb	r1, [r0, #0]
    7bfc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7c00:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7c04:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7c08:	d015      	beq.n	7c36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    7c0a:	67a1      	str	r1, [r4, #120]	; 0x78
    7c0c:	8880      	ldrh	r0, [r0, #4]
    7c0e:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7c12:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7c16:	1e51      	subs	r1, r2, #1
    7c18:	4638      	mov	r0, r7
    7c1a:	f7fe fc4d 	bl	64b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7c1e:	b128      	cbz	r0, 7c2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    7c20:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7c24:	f040 0002 	orr.w	r0, r0, #2
    7c28:	7020      	strb	r0, [r4, #0]
    7c2a:	e00a      	b.n	7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    7c2c:	f640 4153 	movw	r1, #3155	; 0xc53
    7c30:	202d      	movs	r0, #45	; 0x2d
    7c32:	f7fc ff0b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c36:	f844 1f6c 	str.w	r1, [r4, #108]!
    7c3a:	8880      	ldrh	r0, [r0, #4]
    7c3c:	80a0      	strh	r0, [r4, #4]
    7c3e:	60e6      	str	r6, [r4, #12]
    7c40:	8226      	strh	r6, [r4, #16]
    7c42:	8828      	ldrh	r0, [r5, #0]
    7c44:	f7fd fb1c 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7c48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c4c:	f005 bc40 	b.w	d4d0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7c54:	200000f8 	.word	0x200000f8
    7c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c5c:	4604      	mov	r4, r0
    7c5e:	20ff      	movs	r0, #255	; 0xff
    7c60:	f88d 0000 	strb.w	r0, [sp]
    7c64:	2601      	movs	r6, #1
    7c66:	466a      	mov	r2, sp
    7c68:	2105      	movs	r1, #5
    7c6a:	4620      	mov	r0, r4
    7c6c:	f7ff feda 	bl	7a24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7c70:	b3e8      	cbz	r0, 7cee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7c72:	4d24      	ldr	r5, [pc, #144]	; (7d04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7c74:	4f24      	ldr	r7, [pc, #144]	; (7d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7c76:	46b0      	mov	r8, r6
    7c78:	6868      	ldr	r0, [r5, #4]
    7c7a:	7bfa      	ldrb	r2, [r7, #15]
    7c7c:	f04f 0900 	mov.w	r9, #0
    7c80:	7801      	ldrb	r1, [r0, #0]
    7c82:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7c86:	4291      	cmp	r1, r2
    7c88:	d106      	bne.n	7c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    7c8a:	2206      	movs	r2, #6
    7c8c:	f107 0110 	add.w	r1, r7, #16
    7c90:	1cc0      	adds	r0, r0, #3
    7c92:	f004 fd29 	bl	c6e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7c96:	b350      	cbz	r0, 7cee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7c98:	686a      	ldr	r2, [r5, #4]
    7c9a:	69e0      	ldr	r0, [r4, #28]
    7c9c:	7812      	ldrb	r2, [r2, #0]
    7c9e:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    7ca2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7ca6:	4011      	ands	r1, r2
    7ca8:	7001      	strb	r1, [r0, #0]
    7caa:	2201      	movs	r2, #1
    7cac:	4620      	mov	r0, r4
    7cae:	69e1      	ldr	r1, [r4, #28]
    7cb0:	f000 f894 	bl	7ddc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    7cb4:	2300      	movs	r3, #0
    7cb6:	f89d 2000 	ldrb.w	r2, [sp]
    7cba:	4620      	mov	r0, r4
    7cbc:	69e1      	ldr	r1, [r4, #28]
    7cbe:	f7ff ff51 	bl	7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    7cc2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    7cc6:	f7ff f84d 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7cca:	f887 9000 	strb.w	r9, [r7]
    7cce:	2200      	movs	r2, #0
    7cd0:	4621      	mov	r1, r4
    7cd2:	69e0      	ldr	r0, [r4, #28]
    7cd4:	f000 fa58 	bl	8188 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7cd8:	6868      	ldr	r0, [r5, #4]
    7cda:	69e1      	ldr	r1, [r4, #28]
    7cdc:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7ce0:	f841 2f03 	str.w	r2, [r1, #3]!
    7ce4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7ce8:	808a      	strh	r2, [r1, #4]
    7cea:	7800      	ldrb	r0, [r0, #0]
    7cec:	e000      	b.n	7cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    7cee:	e004      	b.n	7cfa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    7cf0:	69e1      	ldr	r1, [r4, #28]
    7cf2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7cf6:	7088      	strb	r0, [r1, #2]
    7cf8:	e000      	b.n	7cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    7cfa:	2600      	movs	r6, #0
    7cfc:	4630      	mov	r0, r6
    7cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d02:	0000      	.short	0x0000
    7d04:	200000f8 	.word	0x200000f8
    7d08:	200011b4 	.word	0x200011b4
    7d0c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7d0e:	4604      	mov	r4, r0
    7d10:	20ff      	movs	r0, #255	; 0xff
    7d12:	f88d 0000 	strb.w	r0, [sp]
    7d16:	2501      	movs	r5, #1
    7d18:	466a      	mov	r2, sp
    7d1a:	2103      	movs	r1, #3
    7d1c:	4620      	mov	r0, r4
    7d1e:	f7ff fe81 	bl	7a24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7d22:	b328      	cbz	r0, 7d70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    7d24:	7b20      	ldrb	r0, [r4, #12]
    7d26:	b168      	cbz	r0, 7d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7d28:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7d2c:	f88d 0004 	strb.w	r0, [sp, #4]
    7d30:	9801      	ldr	r0, [sp, #4]
    7d32:	9001      	str	r0, [sp, #4]
    7d34:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7d38:	b920      	cbnz	r0, 7d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7d3a:	f89d 1000 	ldrb.w	r1, [sp]
    7d3e:	4620      	mov	r0, r4
    7d40:	f7ff fe30 	bl	79a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7d44:	4e0c      	ldr	r6, [pc, #48]	; (7d78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7d46:	2100      	movs	r1, #0
    7d48:	6870      	ldr	r0, [r6, #4]
    7d4a:	8001      	strh	r1, [r0, #0]
    7d4c:	2104      	movs	r1, #4
    7d4e:	f006 fa50 	bl	e1f2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7d52:	4620      	mov	r0, r4
    7d54:	f000 f88a 	bl	7e6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    7d58:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7d5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7d5c:	6870      	ldr	r0, [r6, #4]
    7d5e:	f006 fa7f 	bl	e260 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7d62:	4906      	ldr	r1, [pc, #24]	; (7d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7d64:	2005      	movs	r0, #5
    7d66:	7008      	strb	r0, [r1, #0]
    7d68:	6870      	ldr	r0, [r6, #4]
    7d6a:	f003 fed3 	bl	bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7d6e:	e000      	b.n	7d72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7d70:	2500      	movs	r5, #0
    7d72:	4628      	mov	r0, r5
    7d74:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7d76:	0000      	.short	0x0000
    7d78:	200000f8 	.word	0x200000f8
    7d7c:	200011b4 	.word	0x200011b4
    7d80:	b570      	push	{r4, r5, r6, lr}
    7d82:	4604      	mov	r4, r0
    7d84:	460e      	mov	r6, r1
    7d86:	7e40      	ldrb	r0, [r0, #25]
    7d88:	f7fe fb64 	bl	6454 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7d8c:	0005      	movs	r5, r0
    7d8e:	d019      	beq.n	7dc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7d90:	2110      	movs	r1, #16
    7d92:	f006 f89b 	bl	decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7d96:	2800      	cmp	r0, #0
    7d98:	d114      	bne.n	7dc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7d9a:	2001      	movs	r0, #1
    7d9c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7da0:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7da4:	4632      	mov	r2, r6
    7da6:	460c      	mov	r4, r1
    7da8:	4628      	mov	r0, r5
    7daa:	f005 fe47 	bl	da3c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7dae:	4621      	mov	r1, r4
    7db0:	4c05      	ldr	r4, [pc, #20]	; (7dc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    7db2:	6860      	ldr	r0, [r4, #4]
    7db4:	f006 fa38 	bl	e228 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7db8:	6860      	ldr	r0, [r4, #4]
    7dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7dbe:	2101      	movs	r1, #1
    7dc0:	f006 ba38 	b.w	e234 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7dc4:	bd70      	pop	{r4, r5, r6, pc}
    7dc6:	0000      	.short	0x0000
    7dc8:	200000f8 	.word	0x200000f8
    7dcc:	4802      	ldr	r0, [pc, #8]	; (7dd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    7dce:	2101      	movs	r1, #1
    7dd0:	6800      	ldr	r0, [r0, #0]
    7dd2:	f7ff bb27 	b.w	7424 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7dd6:	0000      	.short	0x0000
    7dd8:	200000f8 	.word	0x200000f8
    7ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7de0:	4e21      	ldr	r6, [pc, #132]	; (7e68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
    7de2:	4680      	mov	r8, r0
    7de4:	460c      	mov	r4, r1
    7de6:	6870      	ldr	r0, [r6, #4]
    7de8:	4615      	mov	r5, r2
    7dea:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7dee:	6121      	str	r1, [r4, #16]
    7df0:	8881      	ldrh	r1, [r0, #4]
    7df2:	8321      	strh	r1, [r4, #24]
    7df4:	7981      	ldrb	r1, [r0, #6]
    7df6:	76a1      	strb	r1, [r4, #26]
    7df8:	8940      	ldrh	r0, [r0, #10]
    7dfa:	f005 fed7 	bl	dbac <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7dfe:	4607      	mov	r7, r0
    7e00:	60e0      	str	r0, [r4, #12]
    7e02:	6870      	ldr	r0, [r6, #4]
    7e04:	4639      	mov	r1, r7
    7e06:	7d80      	ldrb	r0, [r0, #22]
    7e08:	f006 f85b 	bl	dec2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7e0c:	83a0      	strh	r0, [r4, #28]
    7e0e:	6870      	ldr	r0, [r6, #4]
    7e10:	4639      	mov	r1, r7
    7e12:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7e16:	f006 f850 	bl	deba <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7e1a:	6220      	str	r0, [r4, #32]
    7e1c:	6870      	ldr	r0, [r6, #4]
    7e1e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7e22:	82a1      	strh	r1, [r4, #20]
    7e24:	8841      	ldrh	r1, [r0, #2]
    7e26:	82e1      	strh	r1, [r4, #22]
    7e28:	6841      	ldr	r1, [r0, #4]
    7e2a:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    7e2e:	7a01      	ldrb	r1, [r0, #8]
    7e30:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    7e34:	7a41      	ldrb	r1, [r0, #9]
    7e36:	f001 011f 	and.w	r1, r1, #31
    7e3a:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    7e3e:	7a40      	ldrb	r0, [r0, #9]
    7e40:	0940      	lsrs	r0, r0, #5
    7e42:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    7e46:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7e4a:	7205      	strb	r5, [r0, #8]
    7e4c:	7245      	strb	r5, [r0, #9]
    7e4e:	2101      	movs	r1, #1
    7e50:	7281      	strb	r1, [r0, #10]
    7e52:	2100      	movs	r1, #0
    7e54:	3836      	subs	r0, #54	; 0x36
    7e56:	f006 fb77 	bl	e548 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7e5a:	f898 000e 	ldrb.w	r0, [r8, #14]
    7e5e:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    7e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e66:	0000      	.short	0x0000
    7e68:	200000f8 	.word	0x200000f8
    7e6c:	b570      	push	{r4, r5, r6, lr}
    7e6e:	4d07      	ldr	r5, [pc, #28]	; (7e8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    7e70:	4604      	mov	r4, r0
    7e72:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7e76:	6868      	ldr	r0, [r5, #4]
    7e78:	f006 f9e3 	bl	e242 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7e7c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7e80:	6868      	ldr	r0, [r5, #4]
    7e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e86:	f006 b9e2 	b.w	e24e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7e8a:	0000      	.short	0x0000
    7e8c:	200000f8 	.word	0x200000f8
    7e90:	00555555 	.word	0x00555555
    7e94:	000076ad 	.word	0x000076ad
    7e98:	00007539 	.word	0x00007539
    7e9c:	00007629 	.word	0x00007629
    7ea0:	00000000 	.word	0x00000000
    7ea4:	00007601 	.word	0x00007601
    7ea8:	00007659 	.word	0x00007659
    7eac:	0000e869 	.word	0x0000e869
    7eb0:	0000e86f 	.word	0x0000e86f
    7eb4:	000078a1 	.word	0x000078a1
    7eb8:	000078c5 	.word	0x000078c5
    7ebc:	00007dcd 	.word	0x00007dcd
    7ec0:	00007eb0 	.word	0x00007eb0
    7ec4:	00007ea8 	.word	0x00007ea8
    7ec8:	00007ea4 	.word	0x00007ea4

00007ecc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7ecc:	b510      	push	{r4, lr}
    7ece:	1e42      	subs	r2, r0, #1
    7ed0:	2a02      	cmp	r2, #2
    7ed2:	d901      	bls.n	7ed8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7ed4:	21ca      	movs	r1, #202	; 0xca
    7ed6:	e009      	b.n	7eec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7ed8:	1e40      	subs	r0, r0, #1
    7eda:	2910      	cmp	r1, #16
    7edc:	d009      	beq.n	7ef2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    7ede:	2912      	cmp	r1, #18
    7ee0:	d00c      	beq.n	7efc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7ee2:	2913      	cmp	r1, #19
    7ee4:	d00a      	beq.n	7efc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    7ee6:	2915      	cmp	r1, #21
    7ee8:	d005      	beq.n	7ef6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    7eea:	21d8      	movs	r1, #216	; 0xd8
    7eec:	202f      	movs	r0, #47	; 0x2f
    7eee:	f7fc fdad 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ef2:	4905      	ldr	r1, [pc, #20]	; (7f08 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7ef4:	e004      	b.n	7f00 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7ef6:	4904      	ldr	r1, [pc, #16]	; (7f08 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7ef8:	1d89      	adds	r1, r1, #6
    7efa:	e001      	b.n	7f00 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    7efc:	4902      	ldr	r1, [pc, #8]	; (7f08 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    7efe:	1f89      	subs	r1, r1, #6
    7f00:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7f04:	bd10      	pop	{r4, pc}
    7f06:	0000      	.short	0x0000
    7f08:	0000eabc 	.word	0x0000eabc

00007f0c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    7f0c:	1e42      	subs	r2, r0, #1
    7f0e:	b510      	push	{r4, lr}
    7f10:	b2d2      	uxtb	r2, r2
    7f12:	2a01      	cmp	r2, #1
    7f14:	d903      	bls.n	7f1e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7f16:	291d      	cmp	r1, #29
    7f18:	d001      	beq.n	7f1e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7f1a:	21ee      	movs	r1, #238	; 0xee
    7f1c:	e00d      	b.n	7f3a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    7f1e:	2913      	cmp	r1, #19
    7f20:	d013      	beq.n	7f4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7f22:	dc04      	bgt.n	7f2e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7f24:	2910      	cmp	r1, #16
    7f26:	d00b      	beq.n	7f40 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7f28:	2912      	cmp	r1, #18
    7f2a:	d104      	bne.n	7f36 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    7f2c:	e00d      	b.n	7f4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7f2e:	2915      	cmp	r1, #21
    7f30:	d008      	beq.n	7f44 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7f32:	291d      	cmp	r1, #29
    7f34:	d00e      	beq.n	7f54 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7f36:	f44f 7181 	mov.w	r1, #258	; 0x102
    7f3a:	202f      	movs	r0, #47	; 0x2f
    7f3c:	f7fc fd86 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f40:	4807      	ldr	r0, [pc, #28]	; (7f60 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7f42:	e004      	b.n	7f4e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7f44:	4806      	ldr	r0, [pc, #24]	; (7f60 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7f46:	3008      	adds	r0, #8
    7f48:	e001      	b.n	7f4e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7f4a:	4805      	ldr	r0, [pc, #20]	; (7f60 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7f4c:	1d00      	adds	r0, r0, #4
    7f4e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7f52:	bd10      	pop	{r4, pc}
    7f54:	f240 315a 	movw	r1, #858	; 0x35a
    7f58:	fb10 f001 	smulbb	r0, r0, r1
    7f5c:	bd10      	pop	{r4, pc}
    7f5e:	0000      	.short	0x0000
    7f60:	0000eaaa 	.word	0x0000eaaa

00007f64 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f68:	4604      	mov	r4, r0
    7f6a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    7f6e:	4615      	mov	r5, r2
    7f70:	460f      	mov	r7, r1
    7f72:	2800      	cmp	r0, #0
    7f74:	d157      	bne.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    7f76:	4621      	mov	r1, r4
    7f78:	4841      	ldr	r0, [pc, #260]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7f7a:	f7fb f855 	bl	3028 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7f7e:	4606      	mov	r6, r0
    7f80:	2820      	cmp	r0, #32
    7f82:	d050      	beq.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    7f84:	2234      	movs	r2, #52	; 0x34
    7f86:	2100      	movs	r1, #0
    7f88:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    7f8c:	f004 fc38 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f90:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    7f94:	2601      	movs	r6, #1
    7f96:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    7f9a:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    7f9e:	b13f      	cbz	r7, 7fb0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    7fa0:	2000      	movs	r0, #0
    7fa2:	f000 fbf9 	bl	8798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    7fa6:	f000 0007 	and.w	r0, r0, #7
    7faa:	1c40      	adds	r0, r0, #1
    7fac:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    7fb0:	4620      	mov	r0, r4
    7fb2:	f006 ff63 	bl	ee7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    7fb6:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    7fba:	2003      	movs	r0, #3
    7fbc:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    7fc0:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    7fc4:	2700      	movs	r7, #0
    7fc6:	f804 7fb8 	strb.w	r7, [r4, #184]!
    7fca:	f7fa fa99 	bl	2500 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7fce:	8921      	ldrh	r1, [r4, #8]
    7fd0:	3cb8      	subs	r4, #184	; 0xb8
    7fd2:	4288      	cmp	r0, r1
    7fd4:	d800      	bhi.n	7fd8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    7fd6:	4608      	mov	r0, r1
    7fd8:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    7fdc:	fa1f f880 	uxth.w	r8, r0
    7fe0:	4620      	mov	r0, r4
    7fe2:	f006 fbee 	bl	e7c2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7fe6:	b308      	cbz	r0, 802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    7fe8:	f008 f9aa 	bl	10340 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7fec:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    7ff0:	b281      	uxth	r1, r0
    7ff2:	4628      	mov	r0, r5
    7ff4:	f004 fa49 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7ff8:	4428      	add	r0, r5
    7ffa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    7ffe:	34a4      	adds	r4, #164	; 0xa4
    8000:	f004 fa0f 	bl	c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8004:	4641      	mov	r1, r8
    8006:	f7fa f91f 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    800a:	6220      	str	r0, [r4, #32]
    800c:	f804 7c03 	strb.w	r7, [r4, #-3]
    8010:	7126      	strb	r6, [r4, #4]
    8012:	2001      	movs	r0, #1
    8014:	f006 fd42 	bl	ea9c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    8018:	f200 1009 	addw	r0, r0, #265	; 0x109
    801c:	1a28      	subs	r0, r5, r0
    801e:	62a7      	str	r7, [r4, #40]	; 0x28
    8020:	60a0      	str	r0, [r4, #8]
    8022:	3ca4      	subs	r4, #164	; 0xa4
    8024:	e017      	b.n	8056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    8026:	200c      	movs	r0, #12
    8028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    802c:	4620      	mov	r0, r4
    802e:	f006 fe78 	bl	ed22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    8032:	f844 0fbc 	str.w	r0, [r4, #188]!
    8036:	f804 6c1b 	strb.w	r6, [r4, #-27]
    803a:	f004 f9f2 	bl	c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    803e:	4606      	mov	r6, r0
    8040:	2000      	movs	r0, #0
    8042:	f006 ffc7 	bl	efd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    8046:	eb00 0108 	add.w	r1, r0, r8
    804a:	4630      	mov	r0, r6
    804c:	f7fa f8fc 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8050:	6125      	str	r5, [r4, #16]
    8052:	60a0      	str	r0, [r4, #8]
    8054:	3cbc      	subs	r4, #188	; 0xbc
    8056:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    805a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    805e:	f006 ff0b 	bl	ee78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    8062:	b138      	cbz	r0, 8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    8064:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    8068:	2100      	movs	r1, #0
    806a:	4620      	mov	r0, r4
    806c:	f006 fbcb 	bl	e806 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8070:	2000      	movs	r0, #0
    8072:	e7d9      	b.n	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    8074:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    8078:	2030      	movs	r0, #48	; 0x30
    807a:	f7fc fce7 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    807e:	0000      	.short	0x0000
    8080:	0000efe9 	.word	0x0000efe9

00008084 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8084:	4808      	ldr	r0, [pc, #32]	; (80a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    8086:	b510      	push	{r4, lr}
    8088:	2100      	movs	r1, #0
    808a:	7001      	strb	r1, [r0, #0]
    808c:	2201      	movs	r2, #1
    808e:	7082      	strb	r2, [r0, #2]
    8090:	7041      	strb	r1, [r0, #1]
    8092:	3018      	adds	r0, #24
    8094:	f006 fad7 	bl	e646 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8098:	4803      	ldr	r0, [pc, #12]	; (80a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    809a:	3020      	adds	r0, #32
    809c:	f006 fad3 	bl	e646 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    80a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    80a4:	f006 bd65 	b.w	eb72 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    80a8:	20000108 	.word	0x20000108

000080ac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    80ac:	4901      	ldr	r1, [pc, #4]	; (80b4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    80ae:	7008      	strb	r0, [r1, #0]
    80b0:	4770      	bx	lr
    80b2:	0000      	.short	0x0000
    80b4:	20000108 	.word	0x20000108

000080b8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    80b8:	4905      	ldr	r1, [pc, #20]	; (80d0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    80ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80be:	fbb1 f1f2 	udiv	r1, r1, r2
    80c2:	b510      	push	{r4, lr}
    80c4:	f201 2191 	addw	r1, r1, #657	; 0x291
    80c8:	f006 fa57 	bl	e57a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    80cc:	b280      	uxth	r0, r0
    80ce:	bd10      	pop	{r4, pc}
    80d0:	0001527d 	.word	0x0001527d

000080d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    80d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80d8:	4c10      	ldr	r4, [pc, #64]	; (811c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    80da:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    80de:	f003 fc17 	bl	b910 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    80e2:	4606      	mov	r6, r0
    80e4:	7820      	ldrb	r0, [r4, #0]
    80e6:	b128      	cbz	r0, 80f4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    80e8:	4632      	mov	r2, r6
    80ea:	4639      	mov	r1, r7
    80ec:	4628      	mov	r0, r5
    80ee:	f005 fd67 	bl	dbc0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    80f2:	4605      	mov	r5, r0
    80f4:	6860      	ldr	r0, [r4, #4]
    80f6:	4285      	cmp	r5, r0
    80f8:	d005      	beq.n	8106 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    80fa:	68e1      	ldr	r1, [r4, #12]
    80fc:	1a28      	subs	r0, r5, r0
    80fe:	4408      	add	r0, r1
    8100:	60e0      	str	r0, [r4, #12]
    8102:	f7fb f89b 	bl	323c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8106:	6065      	str	r5, [r4, #4]
    8108:	42ae      	cmp	r6, r5
    810a:	d801      	bhi.n	8110 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    810c:	7860      	ldrb	r0, [r4, #1]
    810e:	b110      	cbz	r0, 8116 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8110:	2000      	movs	r0, #0
    8112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8116:	2001      	movs	r0, #1
    8118:	e7fb      	b.n	8112 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    811a:	0000      	.short	0x0000
    811c:	20000108 	.word	0x20000108

00008120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8120:	b510      	push	{r4, lr}
    8122:	4604      	mov	r4, r0
    8124:	2905      	cmp	r1, #5
    8126:	d227      	bcs.n	8178 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    8128:	e8df f001 	tbb	[pc, r1]
    812c:	0e030b05 	.word	0x0e030b05
    8130:	000f      	.short	0x000f
    8132:	2100      	movs	r1, #0
    8134:	e000      	b.n	8138 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    8136:	2101      	movs	r1, #1
    8138:	4620      	mov	r0, r4
    813a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    813e:	f000 b8f5 	b.w	832c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8142:	2003      	movs	r0, #3
    8144:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8148:	bd10      	pop	{r4, pc}
    814a:	f003 fc1d 	bl	b988 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    814e:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8152:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8156:	f008 f98c 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    815a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    815e:	1a09      	subs	r1, r1, r0
    8160:	4808      	ldr	r0, [pc, #32]	; (8184 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    8162:	6842      	ldr	r2, [r0, #4]
    8164:	440a      	add	r2, r1
    8166:	6042      	str	r2, [r0, #4]
    8168:	6882      	ldr	r2, [r0, #8]
    816a:	4411      	add	r1, r2
    816c:	6081      	str	r1, [r0, #8]
    816e:	4620      	mov	r0, r4
    8170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8174:	f006 be13 	b.w	ed9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    8178:	f240 7151 	movw	r1, #1873	; 0x751
    817c:	2030      	movs	r0, #48	; 0x30
    817e:	f7fc fc65 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8182:	0000      	.short	0x0000
    8184:	20000108 	.word	0x20000108

00008188 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8188:	b570      	push	{r4, r5, r6, lr}
    818a:	460c      	mov	r4, r1
    818c:	4605      	mov	r5, r0
    818e:	b112      	cbz	r2, 8196 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8190:	f240 717b 	movw	r1, #1915	; 0x77b
    8194:	e010      	b.n	81b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8196:	f003 fbbb 	bl	b910 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    819a:	4601      	mov	r1, r0
    819c:	2200      	movs	r2, #0
    819e:	4620      	mov	r0, r4
    81a0:	f006 fece 	bl	ef40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    81a4:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    81a8:	462a      	mov	r2, r5
    81aa:	4905      	ldr	r1, [pc, #20]	; (81c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    81ac:	f7fa fdfe 	bl	2dac <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    81b0:	2800      	cmp	r0, #0
    81b2:	d104      	bne.n	81be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    81b4:	f240 7164 	movw	r1, #1892	; 0x764
    81b8:	2030      	movs	r0, #48	; 0x30
    81ba:	f7fc fc47 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81be:	bd70      	pop	{r4, r5, r6, pc}
    81c0:	0000f089 	.word	0x0000f089
    81c4:	b510      	push	{r4, lr}
    81c6:	280c      	cmp	r0, #12
    81c8:	d304      	bcc.n	81d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    81ca:	f240 3116 	movw	r1, #790	; 0x316
    81ce:	2006      	movs	r0, #6
    81d0:	f7fc fc3c 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81d4:	4901      	ldr	r1, [pc, #4]	; (81dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    81d6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    81da:	bd10      	pop	{r4, pc}
    81dc:	0000f282 	.word	0x0000f282
    81e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    81e2:	4c18      	ldr	r4, [pc, #96]	; (8244 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    81e4:	2001      	movs	r0, #1
    81e6:	7060      	strb	r0, [r4, #1]
    81e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    81ec:	e00b      	b.n	8206 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    81ee:	2100      	movs	r1, #0
    81f0:	f005 fa87 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    81f4:	0006      	movs	r6, r0
    81f6:	d010      	beq.n	821a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    81f8:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    81fc:	f7fa fe08 	bl	2e10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8200:	4630      	mov	r0, r6
    8202:	f006 fe90 	bl	ef26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    8206:	4669      	mov	r1, sp
    8208:	2000      	movs	r0, #0
    820a:	f005 fa84 	bl	d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    820e:	b180      	cbz	r0, 8232 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8210:	f44f 7187 	mov.w	r1, #270	; 0x10e
    8214:	2030      	movs	r0, #48	; 0x30
    8216:	f7fc fc19 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    821a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    821e:	e7f9      	b.n	8214 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8220:	9802      	ldr	r0, [sp, #8]
    8222:	b130      	cbz	r0, 8232 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8224:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    8228:	b119      	cbz	r1, 8232 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    822a:	8800      	ldrh	r0, [r0, #0]
    822c:	42a8      	cmp	r0, r5
    822e:	d1de      	bne.n	81ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8230:	e004      	b.n	823c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8232:	4668      	mov	r0, sp
    8234:	f7fc fe42 	bl	4ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8238:	2800      	cmp	r0, #0
    823a:	d0f1      	beq.n	8220 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    823c:	2000      	movs	r0, #0
    823e:	7060      	strb	r0, [r4, #1]
    8240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8242:	0000      	.short	0x0000
    8244:	20000108 	.word	0x20000108
    8248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    824c:	4604      	mov	r4, r0
    824e:	4836      	ldr	r0, [pc, #216]	; (8328 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    8250:	461e      	mov	r6, r3
    8252:	4690      	mov	r8, r2
    8254:	7880      	ldrb	r0, [r0, #2]
    8256:	4689      	mov	r9, r1
    8258:	2500      	movs	r5, #0
    825a:	b368      	cbz	r0, 82b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    825c:	f7fc f876 	bl	434c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8260:	b350      	cbz	r0, 82b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8262:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    8266:	2802      	cmp	r0, #2
    8268:	d326      	bcc.n	82b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    826a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    826e:	2802      	cmp	r0, #2
    8270:	d022      	beq.n	82b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8272:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    8276:	b9f8      	cbnz	r0, 82b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8278:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    827c:	f7ff ffa2 	bl	81c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8280:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8284:	b281      	uxth	r1, r0
    8286:	8031      	strh	r1, [r6, #0]
    8288:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    828c:	2700      	movs	r7, #0
    828e:	2801      	cmp	r0, #1
    8290:	d015      	beq.n	82be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    8292:	68e0      	ldr	r0, [r4, #12]
    8294:	f004 f8f9 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8298:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    829c:	b280      	uxth	r0, r0
    829e:	4442      	add	r2, r8
    82a0:	eba2 0109 	sub.w	r1, r2, r9
    82a4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    82a8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    82ac:	1a82      	subs	r2, r0, r2
    82ae:	fb01 7502 	mla	r5, r1, r2, r7
    82b2:	2001      	movs	r0, #1
    82b4:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    82b8:	4628      	mov	r0, r5
    82ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82be:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    82c2:	2803      	cmp	r0, #3
    82c4:	d02c      	beq.n	8320 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    82c6:	2101      	movs	r1, #1
    82c8:	2000      	movs	r0, #0
    82ca:	f005 fd33 	bl	dd34 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    82ce:	6a21      	ldr	r1, [r4, #32]
    82d0:	1847      	adds	r7, r0, r1
    82d2:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    82d6:	8831      	ldrh	r1, [r6, #0]
    82d8:	34d0      	adds	r4, #208	; 0xd0
    82da:	f004 f8d6 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82de:	6da2      	ldr	r2, [r4, #88]	; 0x58
    82e0:	6e21      	ldr	r1, [r4, #96]	; 0x60
    82e2:	1a82      	subs	r2, r0, r2
    82e4:	fb01 5502 	mla	r5, r1, r2, r5
    82e8:	65a0      	str	r0, [r4, #88]	; 0x58
    82ea:	8831      	ldrh	r1, [r6, #0]
    82ec:	4638      	mov	r0, r7
    82ee:	f004 f8cc 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82f2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    82f4:	66a0      	str	r0, [r4, #104]	; 0x68
    82f6:	1a41      	subs	r1, r0, r1
    82f8:	440d      	add	r5, r1
    82fa:	8831      	ldrh	r1, [r6, #0]
    82fc:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    8300:	f004 f8c3 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8304:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    8306:	4442      	add	r2, r8
    8308:	eba2 0109 	sub.w	r1, r2, r9
    830c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    830e:	1a89      	subs	r1, r1, r2
    8310:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    8312:	1e49      	subs	r1, r1, #1
    8314:	1a82      	subs	r2, r0, r2
    8316:	fb01 5502 	mla	r5, r1, r2, r5
    831a:	66e0      	str	r0, [r4, #108]	; 0x6c
    831c:	3cd0      	subs	r4, #208	; 0xd0
    831e:	e7c8      	b.n	82b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    8320:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8324:	e7d3      	b.n	82ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    8326:	0000      	.short	0x0000
    8328:	20000108 	.word	0x20000108
    832c:	b538      	push	{r3, r4, r5, lr}
    832e:	2500      	movs	r5, #0
    8330:	4604      	mov	r4, r0
    8332:	2901      	cmp	r1, #1
    8334:	d102      	bne.n	833c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    8336:	4811      	ldr	r0, [pc, #68]	; (837c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    8338:	7840      	ldrb	r0, [r0, #1]
    833a:	b178      	cbz	r0, 835c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    833c:	2004      	movs	r0, #4
    833e:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8342:	bf00      	nop
    8344:	f006 fd24 	bl	ed90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    8348:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    834c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    8350:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    8354:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    8358:	77e5      	strb	r5, [r4, #31]
    835a:	bd38      	pop	{r3, r4, r5, pc}
    835c:	9500      	str	r5, [sp, #0]
    835e:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    8362:	2301      	movs	r3, #1
    8364:	2200      	movs	r2, #0
    8366:	4620      	mov	r0, r4
    8368:	f000 f80a 	bl	8380 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    836c:	2800      	cmp	r0, #0
    836e:	d0e9      	beq.n	8344 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    8370:	f240 61c9 	movw	r1, #1737	; 0x6c9
    8374:	2030      	movs	r0, #48	; 0x30
    8376:	f7fc fb69 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    837a:	0000      	.short	0x0000
    837c:	20000108 	.word	0x20000108
    8380:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8384:	4604      	mov	r4, r0
    8386:	b085      	sub	sp, #20
    8388:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    838c:	469a      	mov	sl, r3
    838e:	e9cd 3000 	strd	r3, r0, [sp]
    8392:	460f      	mov	r7, r1
    8394:	f007 ffd4 	bl	10340 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8398:	4605      	mov	r5, r0
    839a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    839e:	f7ff ff11 	bl	81c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    83a2:	4428      	add	r0, r5
    83a4:	f8ad 0008 	strh.w	r0, [sp, #8]
    83a8:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    83ac:	280d      	cmp	r0, #13
    83ae:	d004      	beq.n	83ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    83b0:	2000      	movs	r0, #0
    83b2:	9003      	str	r0, [sp, #12]
    83b4:	9807      	ldr	r0, [sp, #28]
    83b6:	b110      	cbz	r0, 83be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    83b8:	e02e      	b.n	8418 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    83ba:	2001      	movs	r0, #1
    83bc:	e7f9      	b.n	83b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    83be:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    83c2:	2803      	cmp	r0, #3
    83c4:	d128      	bne.n	8418 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    83c6:	9803      	ldr	r0, [sp, #12]
    83c8:	b330      	cbz	r0, 8418 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    83ca:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    83ce:	42b8      	cmp	r0, r7
    83d0:	d122      	bne.n	8418 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    83d2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    83d6:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    83da:	68e0      	ldr	r0, [r4, #12]
    83dc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    83e0:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    83e4:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    83e8:	4408      	add	r0, r1
    83ea:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    83ee:	4620      	mov	r0, r4
    83f0:	f006 ff5d 	bl	f2ae <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    83f4:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    83f8:	6220      	str	r0, [r4, #32]
    83fa:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    83fe:	83a0      	strh	r0, [r4, #28]
    8400:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    8404:	60e0      	str	r0, [r4, #12]
    8406:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    840a:	82a0      	strh	r0, [r4, #20]
    840c:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    8410:	82e0      	strh	r0, [r4, #22]
    8412:	2002      	movs	r0, #2
    8414:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8418:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    841c:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    8420:	1a38      	subs	r0, r7, r0
    8422:	fa0f f980 	sxth.w	r9, r0
    8426:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    842a:	1a38      	subs	r0, r7, r0
    842c:	fa0f f880 	sxth.w	r8, r0
    8430:	f1b8 0f00 	cmp.w	r8, #0
    8434:	da06      	bge.n	8444 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    8436:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    843a:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    843e:	2001      	movs	r0, #1
    8440:	46c8      	mov	r8, r9
    8442:	9000      	str	r0, [sp, #0]
    8444:	ab02      	add	r3, sp, #8
    8446:	464a      	mov	r2, r9
    8448:	4641      	mov	r1, r8
    844a:	4620      	mov	r0, r4
    844c:	f7ff fefc 	bl	8248 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8450:	9004      	str	r0, [sp, #16]
    8452:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8456:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8794 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    845a:	b140      	cbz	r0, 846e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    845c:	2801      	cmp	r0, #1
    845e:	d07d      	beq.n	855c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    8460:	2802      	cmp	r0, #2
    8462:	d052      	beq.n	850a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    8464:	2803      	cmp	r0, #3
    8466:	d07a      	beq.n	855e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    8468:	f240 514d 	movw	r1, #1357	; 0x54d
    846c:	e18e      	b.n	878c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    846e:	2101      	movs	r1, #1
    8470:	2000      	movs	r0, #0
    8472:	f005 fc5f 	bl	dd34 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8476:	4606      	mov	r6, r0
    8478:	6a20      	ldr	r0, [r4, #32]
    847a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    847e:	4430      	add	r0, r6
    8480:	f004 f803 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8484:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8488:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    848c:	68e0      	ldr	r0, [r4, #12]
    848e:	f003 fffc 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8492:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8496:	a901      	add	r1, sp, #4
    8498:	4668      	mov	r0, sp
    849a:	f003 f99d 	bl	b7d8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    849e:	e9dd 1200 	ldrd	r1, r2, [sp]
    84a2:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    84a6:	f7fa ff7f 	bl	33a8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    84aa:	4681      	mov	r9, r0
    84ac:	4620      	mov	r0, r4
    84ae:	f006 fc61 	bl	ed74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    84b2:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    84b6:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    84ba:	f007 ffe8 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    84be:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    84c2:	4401      	add	r1, r0
    84c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    84c8:	fbb1 f0f0 	udiv	r0, r1, r0
    84cc:	6a21      	ldr	r1, [r4, #32]
    84ce:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    84d2:	4431      	add	r1, r6
    84d4:	1a08      	subs	r0, r1, r0
    84d6:	1a81      	subs	r1, r0, r2
    84d8:	4441      	add	r1, r8
    84da:	3920      	subs	r1, #32
    84dc:	eba1 0609 	sub.w	r6, r1, r9
    84e0:	0050      	lsls	r0, r2, #1
    84e2:	8ba1      	ldrh	r1, [r4, #28]
    84e4:	3060      	adds	r0, #96	; 0x60
    84e6:	4401      	add	r1, r0
    84e8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    84ec:	f006 fcb2 	bl	ee54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    84f0:	3022      	adds	r0, #34	; 0x22
    84f2:	f8cb 0010 	str.w	r0, [fp, #16]
    84f6:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    84fa:	4659      	mov	r1, fp
    84fc:	1a30      	subs	r0, r6, r0
    84fe:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    8502:	d859      	bhi.n	85b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    8504:	f240 41e6 	movw	r1, #1254	; 0x4e6
    8508:	e140      	b.n	878c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    850a:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    850e:	6a20      	ldr	r0, [r4, #32]
    8510:	4408      	add	r0, r1
    8512:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8516:	f003 ffb8 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    851a:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    851e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8522:	68e0      	ldr	r0, [r4, #12]
    8524:	f003 ffb1 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8528:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    852c:	4620      	mov	r0, r4
    852e:	f006 fc21 	bl	ed74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    8532:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    8536:	bb10      	cbnz	r0, 857e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8538:	f1ba 0f00 	cmp.w	sl, #0
    853c:	d01f      	beq.n	857e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    853e:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    8542:	4640      	mov	r0, r8
    8544:	f007 ffa3 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8548:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    854c:	4401      	add	r1, r0
    854e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8552:	fbb1 f0f0 	udiv	r0, r1, r0
    8556:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    855a:	e001      	b.n	8560 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    855c:	e02d      	b.n	85ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    855e:	e049      	b.n	85f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    8560:	4408      	add	r0, r1
    8562:	6a22      	ldr	r2, [r4, #32]
    8564:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    8568:	4411      	add	r1, r2
    856a:	1a0e      	subs	r6, r1, r0
    856c:	4640      	mov	r0, r8
    856e:	f007 ff80 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8572:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    8576:	1a08      	subs	r0, r1, r0
    8578:	4406      	add	r6, r0
    857a:	3e20      	subs	r6, #32
    857c:	e006      	b.n	858c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    857e:	6a21      	ldr	r1, [r4, #32]
    8580:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8584:	4408      	add	r0, r1
    8586:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    858a:	1a46      	subs	r6, r0, r1
    858c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    8590:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    8594:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    8598:	fb01 0002 	mla	r0, r1, r2, r0
    859c:	0040      	lsls	r0, r0, #1
    859e:	8ba1      	ldrh	r1, [r4, #28]
    85a0:	3060      	adds	r0, #96	; 0x60
    85a2:	4401      	add	r1, r0
    85a4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    85a8:	f006 fc54 	bl	ee54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    85ac:	f8cb 0010 	str.w	r0, [fp, #16]
    85b0:	2001      	movs	r0, #1
    85b2:	4659      	mov	r1, fp
    85b4:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    85b8:	e062      	b.n	8680 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    85ba:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    85be:	68e0      	ldr	r0, [r4, #12]
    85c0:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    85c4:	1a86      	subs	r6, r0, r2
    85c6:	eb01 0009 	add.w	r0, r1, r9
    85ca:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    85ce:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    85d2:	1a40      	subs	r0, r0, r1
    85d4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    85d8:	1e40      	subs	r0, r0, #1
    85da:	fb0c 3101 	mla	r1, ip, r1, r3
    85de:	fb00 1002 	mla	r0, r0, r2, r1
    85e2:	0040      	lsls	r0, r0, #1
    85e4:	8ba1      	ldrh	r1, [r4, #28]
    85e6:	3060      	adds	r0, #96	; 0x60
    85e8:	4401      	add	r1, r0
    85ea:	fb06 f608 	mul.w	r6, r6, r8
    85ee:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    85f2:	e040      	b.n	8676 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    85f4:	68e0      	ldr	r0, [r4, #12]
    85f6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    85fa:	fb00 f008 	mul.w	r0, r0, r8
    85fe:	fb08 0611 	mls	r6, r8, r1, r0
    8602:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    8606:	2824      	cmp	r0, #36	; 0x24
    8608:	d003      	beq.n	8612 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    860a:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    860e:	2824      	cmp	r0, #36	; 0x24
    8610:	d109      	bne.n	8626 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8612:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    8616:	1a38      	subs	r0, r7, r0
    8618:	b200      	sxth	r0, r0
    861a:	2800      	cmp	r0, #0
    861c:	db03      	blt.n	8626 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    861e:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    8622:	b100      	cbz	r0, 8626 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8624:	9001      	str	r0, [sp, #4]
    8626:	9800      	ldr	r0, [sp, #0]
    8628:	b1d8      	cbz	r0, 8662 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    862a:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    862e:	b9c0      	cbnz	r0, 8662 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8630:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8634:	2800      	cmp	r0, #0
    8636:	d07d      	beq.n	8734 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    8638:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    863c:	f007 ff27 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8640:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8644:	4401      	add	r1, r0
    8646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    864a:	fbb1 f0f0 	udiv	r0, r1, r0
    864e:	1a36      	subs	r6, r6, r0
    8650:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8654:	f007 ff0d 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8658:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    865c:	1a08      	subs	r0, r1, r0
    865e:	4406      	add	r6, r0
    8660:	3e20      	subs	r6, #32
    8662:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    8666:	eb01 0009 	add.w	r0, r1, r9
    866a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    866e:	4348      	muls	r0, r1
    8670:	0041      	lsls	r1, r0, #1
    8672:	3160      	adds	r1, #96	; 0x60
    8674:	9801      	ldr	r0, [sp, #4]
    8676:	f006 fbed 	bl	ee54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    867a:	4659      	mov	r1, fp
    867c:	f8cb 0010 	str.w	r0, [fp, #16]
    8680:	9804      	ldr	r0, [sp, #16]
    8682:	6909      	ldr	r1, [r1, #16]
    8684:	1a33      	subs	r3, r6, r0
    8686:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    868a:	68e0      	ldr	r0, [r4, #12]
    868c:	1b80      	subs	r0, r0, r6
    868e:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    8692:	f8cb 0014 	str.w	r0, [fp, #20]
    8696:	4281      	cmp	r1, r0
    8698:	d800      	bhi.n	869c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    869a:	4608      	mov	r0, r1
    869c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    86a0:	2000      	movs	r0, #0
    86a2:	7028      	strb	r0, [r5, #0]
    86a4:	2064      	movs	r0, #100	; 0x64
    86a6:	8128      	strh	r0, [r5, #8]
    86a8:	4619      	mov	r1, r3
    86aa:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    86ae:	f7f9 fdcb 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    86b2:	60e8      	str	r0, [r5, #12]
    86b4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    86b8:	f005 ff30 	bl	e51c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    86bc:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    86c0:	4408      	add	r0, r1
    86c2:	6068      	str	r0, [r5, #4]
    86c4:	68e8      	ldr	r0, [r5, #12]
    86c6:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    86ca:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    86ce:	2001      	movs	r0, #1
    86d0:	72a8      	strb	r0, [r5, #10]
    86d2:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    86d6:	1bc9      	subs	r1, r1, r7
    86d8:	b209      	sxth	r1, r1
    86da:	2900      	cmp	r1, #0
    86dc:	dd01      	ble.n	86e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    86de:	2103      	movs	r1, #3
    86e0:	72a9      	strb	r1, [r5, #10]
    86e2:	9903      	ldr	r1, [sp, #12]
    86e4:	b339      	cbz	r1, 8736 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    86e6:	f1ba 0f00 	cmp.w	sl, #0
    86ea:	d01f      	beq.n	872c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    86ec:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    86f0:	b38a      	cbz	r2, 8756 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
    86f2:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    86f6:	bf00      	nop
    86f8:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    86fc:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    8700:	1c49      	adds	r1, r1, #1
    8702:	434b      	muls	r3, r1
    8704:	4293      	cmp	r3, r2
    8706:	d211      	bcs.n	872c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    8708:	7aa9      	ldrb	r1, [r5, #10]
    870a:	1e49      	subs	r1, r1, #1
    870c:	2900      	cmp	r1, #0
    870e:	dd0d      	ble.n	872c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    8710:	72a8      	strb	r0, [r5, #10]
    8712:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8716:	1c40      	adds	r0, r0, #1
    8718:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    871c:	2001      	movs	r0, #1
    871e:	f000 f83b 	bl	8798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8722:	f000 0007 	and.w	r0, r0, #7
    8726:	1c40      	adds	r0, r0, #1
    8728:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    872c:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    8730:	4629      	mov	r1, r5
    8732:	e001      	b.n	8738 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    8734:	e00c      	b.n	8750 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    8736:	e00f      	b.n	8758 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    8738:	f006 fb9e 	bl	ee78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    873c:	b320      	cbz	r0, 8788 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    873e:	9807      	ldr	r0, [sp, #28]
    8740:	f080 0001 	eor.w	r0, r0, #1
    8744:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    8748:	2000      	movs	r0, #0
    874a:	b009      	add	sp, #36	; 0x24
    874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8750:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    8754:	e01a      	b.n	878c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    8756:	e015      	b.n	8784 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    8758:	f1ba 0f00 	cmp.w	sl, #0
    875c:	d1c6      	bne.n	86ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    875e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8762:	2800      	cmp	r0, #0
    8764:	d0e2      	beq.n	872c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    8766:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    876a:	68e0      	ldr	r0, [r4, #12]
    876c:	1a41      	subs	r1, r0, r1
    876e:	4628      	mov	r0, r5
    8770:	f005 faf2 	bl	dd58 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8774:	0400      	lsls	r0, r0, #16
    8776:	0c00      	lsrs	r0, r0, #16
    8778:	d0d8      	beq.n	872c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    877a:	9912      	ldr	r1, [sp, #72]	; 0x48
    877c:	b101      	cbz	r1, 8780 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    877e:	8008      	strh	r0, [r1, #0]
    8780:	2001      	movs	r0, #1
    8782:	e7e2      	b.n	874a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    8784:	2100      	movs	r1, #0
    8786:	e7b7      	b.n	86f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    8788:	f240 5197 	movw	r1, #1431	; 0x597
    878c:	2030      	movs	r0, #48	; 0x30
    878e:	f7fc f95d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8792:	0000      	.short	0x0000
    8794:	20000108 	.word	0x20000108
    8798:	b108      	cbz	r0, 879e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    879a:	4803      	ldr	r0, [pc, #12]	; (87a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    879c:	e001      	b.n	87a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
    879e:	4802      	ldr	r0, [pc, #8]	; (87a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    87a0:	3008      	adds	r0, #8
    87a2:	f7fe bc7b 	b.w	709c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    87a6:	0000      	.short	0x0000
    87a8:	20000120 	.word	0x20000120
    87ac:	b570      	push	{r4, r5, r6, lr}
    87ae:	4604      	mov	r4, r0
    87b0:	f7f9 fea6 	bl	2500 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    87b4:	2864      	cmp	r0, #100	; 0x64
    87b6:	d901      	bls.n	87bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
    87b8:	4605      	mov	r5, r0
    87ba:	e000      	b.n	87be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
    87bc:	2564      	movs	r5, #100	; 0x64
    87be:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    87c2:	2128      	movs	r1, #40	; 0x28
    87c4:	f006 fa47 	bl	ec56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    87c8:	4428      	add	r0, r5
    87ca:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    87ce:	f200 203d 	addw	r0, r0, #573	; 0x23d
    87d2:	180e      	adds	r6, r1, r0
    87d4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    87d8:	2128      	movs	r1, #40	; 0x28
    87da:	f006 fa3c 	bl	ec56 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    87de:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    87e2:	4620      	mov	r0, r4
    87e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    87e6:	f005 fe38 	bl	e45a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    87ea:	4605      	mov	r5, r0
    87ec:	4632      	mov	r2, r6
    87ee:	4620      	mov	r0, r4
    87f0:	68e1      	ldr	r1, [r4, #12]
    87f2:	f005 fe32 	bl	e45a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    87f6:	4907      	ldr	r1, [pc, #28]	; (8814 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
    87f8:	4285      	cmp	r5, r0
    87fa:	6088      	str	r0, [r1, #8]
    87fc:	d200      	bcs.n	8800 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
    87fe:	4628      	mov	r0, r5
    8800:	6048      	str	r0, [r1, #4]
    8802:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8806:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    880a:	60c8      	str	r0, [r1, #12]
    880c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8810:	f7fa bd14 	b.w	323c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8814:	20000108 	.word	0x20000108

00008818 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8818:	4806      	ldr	r0, [pc, #24]	; (8834 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    881a:	4905      	ldr	r1, [pc, #20]	; (8830 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    881c:	6501      	str	r1, [r0, #80]	; 0x50
    881e:	4906      	ldr	r1, [pc, #24]	; (8838 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8820:	6541      	str	r1, [r0, #84]	; 0x54
    8822:	4807      	ldr	r0, [pc, #28]	; (8840 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8824:	4905      	ldr	r1, [pc, #20]	; (883c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8826:	6501      	str	r1, [r0, #80]	; 0x50
    8828:	4906      	ldr	r1, [pc, #24]	; (8844 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    882a:	6541      	str	r1, [r0, #84]	; 0x54
    882c:	4770      	bx	lr
    882e:	0000      	.short	0x0000
    8830:	00009d79 	.word	0x00009d79
    8834:	20000144 	.word	0x20000144
    8838:	00009e55 	.word	0x00009e55
    883c:	0000a4d1 	.word	0x0000a4d1
    8840:	200001a8 	.word	0x200001a8
    8844:	0000a501 	.word	0x0000a501

00008848 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    884a:	460d      	mov	r5, r1
    884c:	4607      	mov	r7, r0
    884e:	2100      	movs	r1, #0
    8850:	f004 ff57 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8854:	1e04      	subs	r4, r0, #0
    8856:	d04f      	beq.n	88f8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8858:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    885c:	2800      	cmp	r0, #0
    885e:	d04b      	beq.n	88f8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8860:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8864:	f88d 0000 	strb.w	r0, [sp]
    8868:	9800      	ldr	r0, [sp, #0]
    886a:	9000      	str	r0, [sp, #0]
    886c:	f89d 0000 	ldrb.w	r0, [sp]
    8870:	2600      	movs	r6, #0
    8872:	b1d8      	cbz	r0, 88ac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    8874:	706e      	strb	r6, [r5, #1]
    8876:	2007      	movs	r0, #7
    8878:	7028      	strb	r0, [r5, #0]
    887a:	e00b      	b.n	8894 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    887c:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    8880:	84a6      	strh	r6, [r4, #36]	; 0x24
    8882:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8886:	6068      	str	r0, [r5, #4]
    8888:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    888c:	60a8      	str	r0, [r5, #8]
    888e:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    8892:	81a8      	strh	r0, [r5, #12]
    8894:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8898:	f88d 0000 	strb.w	r0, [sp]
    889c:	9800      	ldr	r0, [sp, #0]
    889e:	9000      	str	r0, [sp, #0]
    88a0:	f89d 0000 	ldrb.w	r0, [sp]
    88a4:	2800      	cmp	r0, #0
    88a6:	d1e9      	bne.n	887c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    88a8:	712e      	strb	r6, [r5, #4]
    88aa:	e10b      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    88ac:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    88b0:	b3a0      	cbz	r0, 891c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    88b2:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    88b6:	280b      	cmp	r0, #11
    88b8:	d016      	beq.n	88e8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    88ba:	280c      	cmp	r0, #12
    88bc:	d004      	beq.n	88c8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    88be:	f640 21ee 	movw	r1, #2798	; 0xaee
    88c2:	2031      	movs	r0, #49	; 0x31
    88c4:	f7fc f8c2 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88c8:	8820      	ldrh	r0, [r4, #0]
    88ca:	f7fc fcd9 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88ce:	4607      	mov	r7, r0
    88d0:	f004 fddd 	bl	d48e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    88d4:	b978      	cbnz	r0, 88f6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    88d6:	706e      	strb	r6, [r5, #1]
    88d8:	200c      	movs	r0, #12
    88da:	7028      	strb	r0, [r5, #0]
    88dc:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    88e0:	7128      	strb	r0, [r5, #4]
    88e2:	8820      	ldrh	r0, [r4, #0]
    88e4:	80e8      	strh	r0, [r5, #6]
    88e6:	e013      	b.n	8910 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    88e8:	8820      	ldrh	r0, [r4, #0]
    88ea:	f7fc fcc9 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    88ee:	4607      	mov	r7, r0
    88f0:	f004 fdcd 	bl	d48e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    88f4:	b108      	cbz	r0, 88fa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    88f6:	2000      	movs	r0, #0
    88f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88fa:	706e      	strb	r6, [r5, #1]
    88fc:	200b      	movs	r0, #11
    88fe:	7028      	strb	r0, [r5, #0]
    8900:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8904:	7128      	strb	r0, [r5, #4]
    8906:	8820      	ldrh	r0, [r4, #0]
    8908:	80e8      	strh	r0, [r5, #6]
    890a:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    890e:	7228      	strb	r0, [r5, #8]
    8910:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    8914:	4638      	mov	r0, r7
    8916:	f004 fdd5 	bl	d4c4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    891a:	e0d3      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    891c:	e7ff      	b.n	891e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    891e:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8922:	f88d 0000 	strb.w	r0, [sp]
    8926:	9800      	ldr	r0, [sp, #0]
    8928:	9000      	str	r0, [sp, #0]
    892a:	f89d 0000 	ldrb.w	r0, [sp]
    892e:	b130      	cbz	r0, 893e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8930:	706e      	strb	r6, [r5, #1]
    8932:	200e      	movs	r0, #14
    8934:	7028      	strb	r0, [r5, #0]
    8936:	80af      	strh	r7, [r5, #4]
    8938:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    893c:	e0c2      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    893e:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    8942:	f88d 0000 	strb.w	r0, [sp]
    8946:	9800      	ldr	r0, [sp, #0]
    8948:	9000      	str	r0, [sp, #0]
    894a:	f89d 0000 	ldrb.w	r0, [sp]
    894e:	b198      	cbz	r0, 8978 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8950:	706e      	strb	r6, [r5, #1]
    8952:	2008      	movs	r0, #8
    8954:	7028      	strb	r0, [r5, #0]
    8956:	8820      	ldrh	r0, [r4, #0]
    8958:	80a8      	strh	r0, [r5, #4]
    895a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    895e:	f8c5 1006 	str.w	r1, [r5, #6]
    8962:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    8966:	f8c5 100a 	str.w	r1, [r5, #10]
    896a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    896e:	81e8      	strh	r0, [r5, #14]
    8970:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    8974:	7026      	strb	r6, [r4, #0]
    8976:	e0a5      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8978:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    897c:	f88d 0000 	strb.w	r0, [sp]
    8980:	9800      	ldr	r0, [sp, #0]
    8982:	9000      	str	r0, [sp, #0]
    8984:	f89d 0000 	ldrb.w	r0, [sp]
    8988:	b1a0      	cbz	r0, 89b4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    898a:	706e      	strb	r6, [r5, #1]
    898c:	2016      	movs	r0, #22
    898e:	7028      	strb	r0, [r5, #0]
    8990:	e005      	b.n	899e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    8992:	bf00      	nop
    8994:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8998:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    899c:	6068      	str	r0, [r5, #4]
    899e:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    89a2:	f88d 0000 	strb.w	r0, [sp]
    89a6:	9800      	ldr	r0, [sp, #0]
    89a8:	9000      	str	r0, [sp, #0]
    89aa:	f89d 0000 	ldrb.w	r0, [sp]
    89ae:	2800      	cmp	r0, #0
    89b0:	d1f0      	bne.n	8994 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    89b2:	e087      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    89b4:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    89b8:	f88d 0000 	strb.w	r0, [sp]
    89bc:	9800      	ldr	r0, [sp, #0]
    89be:	9000      	str	r0, [sp, #0]
    89c0:	f89d 0000 	ldrb.w	r0, [sp]
    89c4:	b170      	cbz	r0, 89e4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    89c6:	706e      	strb	r6, [r5, #1]
    89c8:	2006      	movs	r0, #6
    89ca:	7028      	strb	r0, [r5, #0]
    89cc:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    89d0:	6068      	str	r0, [r5, #4]
    89d2:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    89d6:	60a8      	str	r0, [r5, #8]
    89d8:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    89dc:	60e8      	str	r0, [r5, #12]
    89de:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    89e2:	e03a      	b.n	8a5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    89e4:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    89e8:	f88d 0000 	strb.w	r0, [sp]
    89ec:	9800      	ldr	r0, [sp, #0]
    89ee:	9000      	str	r0, [sp, #0]
    89f0:	f89d 0000 	ldrb.w	r0, [sp]
    89f4:	b1d0      	cbz	r0, 8a2c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    89f6:	706e      	strb	r6, [r5, #1]
    89f8:	2012      	movs	r0, #18
    89fa:	7028      	strb	r0, [r5, #0]
    89fc:	e00b      	b.n	8a16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    89fe:	bf00      	nop
    8a00:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    8a04:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8a08:	6068      	str	r0, [r5, #4]
    8a0a:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    8a0e:	60a8      	str	r0, [r5, #8]
    8a10:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    8a14:	60e8      	str	r0, [r5, #12]
    8a16:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8a1a:	f88d 0000 	strb.w	r0, [sp]
    8a1e:	9800      	ldr	r0, [sp, #0]
    8a20:	9000      	str	r0, [sp, #0]
    8a22:	f89d 0000 	ldrb.w	r0, [sp]
    8a26:	2800      	cmp	r0, #0
    8a28:	d1ea      	bne.n	8a00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    8a2a:	e04b      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8a2c:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    8a30:	f88d 0000 	strb.w	r0, [sp]
    8a34:	9800      	ldr	r0, [sp, #0]
    8a36:	9000      	str	r0, [sp, #0]
    8a38:	f89d 0000 	ldrb.w	r0, [sp]
    8a3c:	b180      	cbz	r0, 8a60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    8a3e:	706e      	strb	r6, [r5, #1]
    8a40:	2018      	movs	r0, #24
    8a42:	7028      	strb	r0, [r5, #0]
    8a44:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    8a48:	6068      	str	r0, [r5, #4]
    8a4a:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8a4e:	60a8      	str	r0, [r5, #8]
    8a50:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8a54:	81a8      	strh	r0, [r5, #12]
    8a56:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    8a5a:	f804 6c02 	strb.w	r6, [r4, #-2]
    8a5e:	e031      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8a60:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    8a64:	f88d 0000 	strb.w	r0, [sp]
    8a68:	9800      	ldr	r0, [sp, #0]
    8a6a:	9000      	str	r0, [sp, #0]
    8a6c:	f89d 0000 	ldrb.w	r0, [sp]
    8a70:	b138      	cbz	r0, 8a82 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    8a72:	2019      	movs	r0, #25
    8a74:	7028      	strb	r0, [r5, #0]
    8a76:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    8a7a:	6068      	str	r0, [r5, #4]
    8a7c:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    8a80:	e020      	b.n	8ac4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8a82:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8a86:	f88d 0000 	strb.w	r0, [sp]
    8a8a:	9800      	ldr	r0, [sp, #0]
    8a8c:	9000      	str	r0, [sp, #0]
    8a8e:	f89d 0000 	ldrb.w	r0, [sp]
    8a92:	2800      	cmp	r0, #0
    8a94:	f43f af30 	beq.w	88f8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8a98:	706e      	strb	r6, [r5, #1]
    8a9a:	2013      	movs	r0, #19
    8a9c:	7028      	strb	r0, [r5, #0]
    8a9e:	e007      	b.n	8ab0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    8aa0:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    8aa4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8aa8:	6068      	str	r0, [r5, #4]
    8aaa:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    8aae:	8128      	strh	r0, [r5, #8]
    8ab0:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8ab4:	f88d 0000 	strb.w	r0, [sp]
    8ab8:	9800      	ldr	r0, [sp, #0]
    8aba:	9000      	str	r0, [sp, #0]
    8abc:	f89d 0000 	ldrb.w	r0, [sp]
    8ac0:	2800      	cmp	r0, #0
    8ac2:	d1ed      	bne.n	8aa0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    8ac4:	2001      	movs	r0, #1
    8ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008ac8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8ac8:	481b      	ldr	r0, [pc, #108]	; (8b38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    8aca:	491a      	ldr	r1, [pc, #104]	; (8b34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    8acc:	6081      	str	r1, [r0, #8]
    8ace:	491b      	ldr	r1, [pc, #108]	; (8b3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8ad0:	6041      	str	r1, [r0, #4]
    8ad2:	491b      	ldr	r1, [pc, #108]	; (8b40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8ad4:	6001      	str	r1, [r0, #0]
    8ad6:	491b      	ldr	r1, [pc, #108]	; (8b44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8ad8:	6281      	str	r1, [r0, #40]	; 0x28
    8ada:	491b      	ldr	r1, [pc, #108]	; (8b48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8adc:	62c1      	str	r1, [r0, #44]	; 0x2c
    8ade:	491b      	ldr	r1, [pc, #108]	; (8b4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8ae0:	60c1      	str	r1, [r0, #12]
    8ae2:	491b      	ldr	r1, [pc, #108]	; (8b50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8ae4:	6181      	str	r1, [r0, #24]
    8ae6:	491b      	ldr	r1, [pc, #108]	; (8b54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8ae8:	6301      	str	r1, [r0, #48]	; 0x30
    8aea:	491b      	ldr	r1, [pc, #108]	; (8b58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8aec:	6201      	str	r1, [r0, #32]
    8aee:	491b      	ldr	r1, [pc, #108]	; (8b5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8af0:	64c1      	str	r1, [r0, #76]	; 0x4c
    8af2:	491b      	ldr	r1, [pc, #108]	; (8b60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8af4:	6481      	str	r1, [r0, #72]	; 0x48
    8af6:	491b      	ldr	r1, [pc, #108]	; (8b64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8af8:	6441      	str	r1, [r0, #68]	; 0x44
    8afa:	491b      	ldr	r1, [pc, #108]	; (8b68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8afc:	6341      	str	r1, [r0, #52]	; 0x34
    8afe:	491b      	ldr	r1, [pc, #108]	; (8b6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8b00:	61c1      	str	r1, [r0, #28]
    8b02:	481c      	ldr	r0, [pc, #112]	; (8b74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8b04:	491a      	ldr	r1, [pc, #104]	; (8b70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8b06:	6081      	str	r1, [r0, #8]
    8b08:	491b      	ldr	r1, [pc, #108]	; (8b78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8b0a:	61c1      	str	r1, [r0, #28]
    8b0c:	491b      	ldr	r1, [pc, #108]	; (8b7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8b0e:	6241      	str	r1, [r0, #36]	; 0x24
    8b10:	491b      	ldr	r1, [pc, #108]	; (8b80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8b12:	62c1      	str	r1, [r0, #44]	; 0x2c
    8b14:	491b      	ldr	r1, [pc, #108]	; (8b84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8b16:	6101      	str	r1, [r0, #16]
    8b18:	491b      	ldr	r1, [pc, #108]	; (8b88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8b1a:	6141      	str	r1, [r0, #20]
    8b1c:	491b      	ldr	r1, [pc, #108]	; (8b8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8b1e:	6441      	str	r1, [r0, #68]	; 0x44
    8b20:	6341      	str	r1, [r0, #52]	; 0x34
    8b22:	491b      	ldr	r1, [pc, #108]	; (8b90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8b24:	6181      	str	r1, [r0, #24]
    8b26:	491b      	ldr	r1, [pc, #108]	; (8b94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8b28:	6301      	str	r1, [r0, #48]	; 0x30
    8b2a:	491b      	ldr	r1, [pc, #108]	; (8b98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8b2c:	6481      	str	r1, [r0, #72]	; 0x48
    8b2e:	491b      	ldr	r1, [pc, #108]	; (8b9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8b30:	64c1      	str	r1, [r0, #76]	; 0x4c
    8b32:	4770      	bx	lr
    8b34:	0000a205 	.word	0x0000a205
    8b38:	20000144 	.word	0x20000144
    8b3c:	00009b41 	.word	0x00009b41
    8b40:	00009b9d 	.word	0x00009b9d
    8b44:	00009f1d 	.word	0x00009f1d
    8b48:	00009f61 	.word	0x00009f61
    8b4c:	00009c49 	.word	0x00009c49
    8b50:	0000a1dd 	.word	0x0000a1dd
    8b54:	0000a321 	.word	0x0000a321
    8b58:	00009cf5 	.word	0x00009cf5
    8b5c:	00009ef1 	.word	0x00009ef1
    8b60:	00009ec5 	.word	0x00009ec5
    8b64:	0000a19d 	.word	0x0000a19d
    8b68:	0000a1cd 	.word	0x0000a1cd
    8b6c:	0000a239 	.word	0x0000a239
    8b70:	0000a6b9 	.word	0x0000a6b9
    8b74:	200001a8 	.word	0x200001a8
    8b78:	0000a6e1 	.word	0x0000a6e1
    8b7c:	0000a4a1 	.word	0x0000a4a1
    8b80:	0000a579 	.word	0x0000a579
    8b84:	0000a475 	.word	0x0000a475
    8b88:	0000a621 	.word	0x0000a621
    8b8c:	0000a5fd 	.word	0x0000a5fd
    8b90:	0000a645 	.word	0x0000a645
    8b94:	0000a739 	.word	0x0000a739
    8b98:	0000a531 	.word	0x0000a531
    8b9c:	0000a561 	.word	0x0000a561

00008ba0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8ba0:	4806      	ldr	r0, [pc, #24]	; (8bbc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8ba2:	4905      	ldr	r1, [pc, #20]	; (8bb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8ba4:	6581      	str	r1, [r0, #88]	; 0x58
    8ba6:	4906      	ldr	r1, [pc, #24]	; (8bc0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8ba8:	6601      	str	r1, [r0, #96]	; 0x60
    8baa:	4807      	ldr	r0, [pc, #28]	; (8bc8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8bac:	4905      	ldr	r1, [pc, #20]	; (8bc4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8bae:	6581      	str	r1, [r0, #88]	; 0x58
    8bb0:	4906      	ldr	r1, [pc, #24]	; (8bcc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8bb2:	65c1      	str	r1, [r0, #92]	; 0x5c
    8bb4:	4770      	bx	lr
    8bb6:	0000      	.short	0x0000
    8bb8:	00009f81 	.word	0x00009f81
    8bbc:	20000144 	.word	0x20000144
    8bc0:	0000a059 	.word	0x0000a059
    8bc4:	0000a5a5 	.word	0x0000a5a5
    8bc8:	200001a8 	.word	0x200001a8
    8bcc:	0000a5d5 	.word	0x0000a5d5

00008bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8bd4:	2601      	movs	r6, #1
    8bd6:	4c7c      	ldr	r4, [pc, #496]	; (8dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8bd8:	2500      	movs	r5, #0
    8bda:	f366 0107 	bfi	r1, r6, #0, #8
    8bde:	8065      	strh	r5, [r4, #2]
    8be0:	7065      	strb	r5, [r4, #1]
    8be2:	7025      	strb	r5, [r4, #0]
    8be4:	60a0      	str	r0, [r4, #8]
    8be6:	4689      	mov	r9, r1
    8be8:	4680      	mov	r8, r0
    8bea:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    8bee:	8800      	ldrh	r0, [r0, #0]
    8bf0:	f7fc fb5c 	bl	52ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8bf4:	b180      	cbz	r0, 8c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8bf6:	68a0      	ldr	r0, [r4, #8]
    8bf8:	8800      	ldrh	r0, [r0, #0]
    8bfa:	f7fc fe01 	bl	5800 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8bfe:	68a0      	ldr	r0, [r4, #8]
    8c00:	8800      	ldrh	r0, [r0, #0]
    8c02:	f7fc fda5 	bl	5750 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8c06:	68a0      	ldr	r0, [r4, #8]
    8c08:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    8c0c:	b1c9      	cbz	r1, 8c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8c0e:	3070      	adds	r0, #112	; 0x70
    8c10:	f006 fb91 	bl	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8c14:	b118      	cbz	r0, 8c1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    8c16:	e014      	b.n	8c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8c18:	f640 31c9 	movw	r1, #3017	; 0xbc9
    8c1c:	e06b      	b.n	8cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    8c1e:	68a0      	ldr	r0, [r4, #8]
    8c20:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8c24:	f88d 1000 	strb.w	r1, [sp]
    8c28:	9900      	ldr	r1, [sp, #0]
    8c2a:	9100      	str	r1, [sp, #0]
    8c2c:	f89d 1000 	ldrb.w	r1, [sp]
    8c30:	b139      	cbz	r1, 8c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8c32:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8c36:	2301      	movs	r3, #1
    8c38:	4619      	mov	r1, r3
    8c3a:	3070      	adds	r0, #112	; 0x70
    8c3c:	f004 ffd3 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c40:	b180      	cbz	r0, 8c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    8c42:	68a0      	ldr	r0, [r4, #8]
    8c44:	3070      	adds	r0, #112	; 0x70
    8c46:	f006 fb76 	bl	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8c4a:	b128      	cbz	r0, 8c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    8c4c:	68a0      	ldr	r0, [r4, #8]
    8c4e:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    8c52:	bf00      	nop
    8c54:	f000 fbb0 	bl	93b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    8c58:	68a0      	ldr	r0, [r4, #8]
    8c5a:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    8c5e:	b189      	cbz	r1, 8c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    8c60:	80a5      	strh	r5, [r4, #4]
    8c62:	e01e      	b.n	8ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    8c64:	68a0      	ldr	r0, [r4, #8]
    8c66:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    8c6a:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8c6e:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8c72:	2100      	movs	r1, #0
    8c74:	2002      	movs	r0, #2
    8c76:	f000 fe41 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8c7a:	68a0      	ldr	r0, [r4, #8]
    8c7c:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    8c80:	2002      	movs	r0, #2
    8c82:	e7e7      	b.n	8c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8c84:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8c88:	f88d 1000 	strb.w	r1, [sp]
    8c8c:	9900      	ldr	r1, [sp, #0]
    8c8e:	9100      	str	r1, [sp, #0]
    8c90:	f89d 1000 	ldrb.w	r1, [sp]
    8c94:	b919      	cbnz	r1, 8c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    8c96:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8c98:	8a82      	ldrh	r2, [r0, #20]
    8c9a:	4291      	cmp	r1, r2
    8c9c:	d800      	bhi.n	8ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    8c9e:	8a81      	ldrh	r1, [r0, #20]
    8ca0:	80a1      	strh	r1, [r4, #4]
    8ca2:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    8ca6:	1e49      	subs	r1, r1, #1
    8ca8:	b28f      	uxth	r7, r1
    8caa:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8cae:	4439      	add	r1, r7
    8cb0:	f820 195c 	strh.w	r1, [r0], #-92
    8cb4:	8801      	ldrh	r1, [r0, #0]
    8cb6:	4439      	add	r1, r7
    8cb8:	8001      	strh	r1, [r0, #0]
    8cba:	f001 fd6b 	bl	a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    8cbe:	b120      	cbz	r0, 8cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    8cc0:	68a0      	ldr	r0, [r4, #8]
    8cc2:	f850 1f98 	ldr.w	r1, [r0, #152]!
    8cc6:	4439      	add	r1, r7
    8cc8:	6001      	str	r1, [r0, #0]
    8cca:	68a1      	ldr	r1, [r4, #8]
    8ccc:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8cd0:	2801      	cmp	r0, #1
    8cd2:	d802      	bhi.n	8cda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    8cd4:	1c40      	adds	r0, r0, #1
    8cd6:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    8cda:	b10f      	cbz	r7, 8ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    8cdc:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    8ce0:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8ce4:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    8ce8:	f101 0070 	add.w	r0, r1, #112	; 0x70
    8cec:	f005 f8fd 	bl	deea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8cf0:	b120      	cbz	r0, 8cfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    8cf2:	f640 410d 	movw	r1, #3085	; 0xc0d
    8cf6:	2031      	movs	r0, #49	; 0x31
    8cf8:	f7fb fea8 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cfc:	68a0      	ldr	r0, [r4, #8]
    8cfe:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8d02:	290b      	cmp	r1, #11
    8d04:	d001      	beq.n	8d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    8d06:	290c      	cmp	r1, #12
    8d08:	d118      	bne.n	8d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8d0a:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    8d0e:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    8d12:	1ad2      	subs	r2, r2, r3
    8d14:	b212      	sxth	r2, r2
    8d16:	2a00      	cmp	r2, #0
    8d18:	db10      	blt.n	8d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8d1a:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    8d1e:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    8d22:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    8d26:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    8d2a:	2103      	movs	r1, #3
    8d2c:	f7fd fdcc 	bl	68c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8d30:	68a0      	ldr	r0, [r4, #8]
    8d32:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8d36:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    8d3a:	e026      	b.n	8d8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8d3c:	2924      	cmp	r1, #36	; 0x24
    8d3e:	d111      	bne.n	8d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8d40:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8d44:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8d48:	1a89      	subs	r1, r1, r2
    8d4a:	b209      	sxth	r1, r1
    8d4c:	2900      	cmp	r1, #0
    8d4e:	db09      	blt.n	8d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8d50:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8d54:	f000 fe82 	bl	9a5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8d58:	2800      	cmp	r0, #0
    8d5a:	68a0      	ldr	r0, [r4, #8]
    8d5c:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8d60:	d029      	beq.n	8db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8d62:	e012      	b.n	8d8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8d64:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8d68:	2924      	cmp	r1, #36	; 0x24
    8d6a:	d001      	beq.n	8d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8d6c:	2925      	cmp	r1, #37	; 0x25
    8d6e:	d10c      	bne.n	8d8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8d70:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8d74:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8d78:	1a89      	subs	r1, r1, r2
    8d7a:	b209      	sxth	r1, r1
    8d7c:	2900      	cmp	r1, #0
    8d7e:	db04      	blt.n	8d8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8d80:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8d84:	f000 fe6a 	bl	9a5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8d88:	b1a8      	cbz	r0, 8db6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8d8a:	4810      	ldr	r0, [pc, #64]	; (8dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8d8c:	9000      	str	r0, [sp, #0]
    8d8e:	4b10      	ldr	r3, [pc, #64]	; (8dd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8d90:	4a10      	ldr	r2, [pc, #64]	; (8dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    8d92:	4641      	mov	r1, r8
    8d94:	4648      	mov	r0, r9
    8d96:	f7fc fde9 	bl	596c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8d9a:	68a0      	ldr	r0, [r4, #8]
    8d9c:	2301      	movs	r3, #1
    8d9e:	2105      	movs	r1, #5
    8da0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8da4:	3070      	adds	r0, #112	; 0x70
    8da6:	f004 ff1e 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8daa:	2800      	cmp	r0, #0
    8dac:	d009      	beq.n	8dc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8dae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8db2:	f7fc bdd5 	b.w	5960 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8db6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8dba:	2100      	movs	r1, #0
    8dbc:	4608      	mov	r0, r1
    8dbe:	f000 bbd5 	b.w	956c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    8dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dc6:	0000      	.short	0x0000
    8dc8:	20000130 	.word	0x20000130
    8dcc:	0000956d 	.word	0x0000956d
    8dd0:	00009071 	.word	0x00009071
    8dd4:	000099a9 	.word	0x000099a9
    8dd8:	b570      	push	{r4, r5, r6, lr}
    8dda:	4c0f      	ldr	r4, [pc, #60]	; (8e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
    8ddc:	68a5      	ldr	r5, [r4, #8]
    8dde:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    8de2:	2920      	cmp	r1, #32
    8de4:	d002      	beq.n	8dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8de6:	2926      	cmp	r1, #38	; 0x26
    8de8:	d003      	beq.n	8df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    8dea:	e011      	b.n	8e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8dec:	f000 fe84 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    8df0:	e008      	b.n	8e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
    8df2:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    8df6:	2301      	movs	r3, #1
    8df8:	210b      	movs	r1, #11
    8dfa:	f105 0070 	add.w	r0, r5, #112	; 0x70
    8dfe:	f004 fef2 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e02:	b138      	cbz	r0, 8e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    8e04:	68a1      	ldr	r1, [r4, #8]
    8e06:	2000      	movs	r0, #0
    8e08:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8e0c:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    8e10:	2000      	movs	r0, #0
    8e12:	bd70      	pop	{r4, r5, r6, pc}
    8e14:	202a      	movs	r0, #42	; 0x2a
    8e16:	e7e9      	b.n	8dec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    8e18:	20000130 	.word	0x20000130
    8e1c:	4804      	ldr	r0, [pc, #16]	; (8e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    8e1e:	2100      	movs	r1, #0
    8e20:	6880      	ldr	r0, [r0, #8]
    8e22:	f820 1fb0 	strh.w	r1, [r0, #176]!
    8e26:	7881      	ldrb	r1, [r0, #2]
    8e28:	1c49      	adds	r1, r1, #1
    8e2a:	7081      	strb	r1, [r0, #2]
    8e2c:	4770      	bx	lr
    8e2e:	0000      	.short	0x0000
    8e30:	20000130 	.word	0x20000130
    8e34:	4807      	ldr	r0, [pc, #28]	; (8e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
    8e36:	b510      	push	{r4, lr}
    8e38:	6881      	ldr	r1, [r0, #8]
    8e3a:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    8e3e:	1e40      	subs	r0, r0, #1
    8e40:	b240      	sxtb	r0, r0
    8e42:	7008      	strb	r0, [r1, #0]
    8e44:	2800      	cmp	r0, #0
    8e46:	da04      	bge.n	8e52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    8e48:	f44f 71c9 	mov.w	r1, #402	; 0x192
    8e4c:	2031      	movs	r0, #49	; 0x31
    8e4e:	f7fb fdfd 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e52:	bd10      	pop	{r4, pc}
    8e54:	20000130 	.word	0x20000130
    8e58:	491a      	ldr	r1, [pc, #104]	; (8ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
    8e5a:	b508      	push	{r3, lr}
    8e5c:	6889      	ldr	r1, [r1, #8]
    8e5e:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    8e62:	b1b8      	cbz	r0, 8e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    8e64:	2a10      	cmp	r2, #16
    8e66:	d006      	beq.n	8e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
    8e68:	2a14      	cmp	r2, #20
    8e6a:	d007      	beq.n	8e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    8e6c:	2a15      	cmp	r2, #21
    8e6e:	d008      	beq.n	8e82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    8e70:	2a1b      	cmp	r2, #27
    8e72:	d122      	bne.n	8eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    8e74:	e008      	b.n	8e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
    8e76:	2101      	movs	r1, #1
    8e78:	200b      	movs	r0, #11
    8e7a:	e007      	b.n	8e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8e7c:	f001 faac 	bl	a3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
    8e80:	e006      	b.n	8e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    8e82:	f000 fd59 	bl	9938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    8e86:	e003      	b.n	8e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    8e88:	2101      	movs	r1, #1
    8e8a:	2006      	movs	r0, #6
    8e8c:	f000 fd36 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8e90:	2001      	movs	r0, #1
    8e92:	bd08      	pop	{r3, pc}
    8e94:	2a21      	cmp	r2, #33	; 0x21
    8e96:	d110      	bne.n	8eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    8e98:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8e9c:	2802      	cmp	r0, #2
    8e9e:	d00e      	beq.n	8ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8ea0:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8ea4:	2801      	cmp	r0, #1
    8ea6:	d108      	bne.n	8eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    8ea8:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    8eac:	f88d 0000 	strb.w	r0, [sp]
    8eb0:	9800      	ldr	r0, [sp, #0]
    8eb2:	9000      	str	r0, [sp, #0]
    8eb4:	f89d 0000 	ldrb.w	r0, [sp]
    8eb8:	b108      	cbz	r0, 8ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    8eba:	2000      	movs	r0, #0
    8ebc:	bd08      	pop	{r3, pc}
    8ebe:	2101      	movs	r1, #1
    8ec0:	2017      	movs	r0, #23
    8ec2:	e7e3      	b.n	8e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    8ec4:	20000130 	.word	0x20000130
    8ec8:	b538      	push	{r3, r4, r5, lr}
    8eca:	2800      	cmp	r0, #0
    8ecc:	d16b      	bne.n	8fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8ece:	4c37      	ldr	r4, [pc, #220]	; (8fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
    8ed0:	68a0      	ldr	r0, [r4, #8]
    8ed2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8ed6:	07ca      	lsls	r2, r1, #31
    8ed8:	d002      	beq.n	8ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
    8eda:	2101      	movs	r1, #1
    8edc:	2009      	movs	r0, #9
    8ede:	e05b      	b.n	8f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8ee0:	078a      	lsls	r2, r1, #30
    8ee2:	d50a      	bpl.n	8efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
    8ee4:	2101      	movs	r1, #1
    8ee6:	200c      	movs	r0, #12
    8ee8:	f000 fd08 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8eec:	68a0      	ldr	r0, [r4, #8]
    8eee:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8ef2:	f041 0101 	orr.w	r1, r1, #1
    8ef6:	7001      	strb	r1, [r0, #0]
    8ef8:	e050      	b.n	8f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    8efa:	074a      	lsls	r2, r1, #29
    8efc:	d502      	bpl.n	8f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    8efe:	2101      	movs	r1, #1
    8f00:	2013      	movs	r0, #19
    8f02:	e049      	b.n	8f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8f04:	070a      	lsls	r2, r1, #28
    8f06:	d505      	bpl.n	8f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    8f08:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    8f0c:	7141      	strb	r1, [r0, #5]
    8f0e:	2101      	movs	r1, #1
    8f10:	2007      	movs	r0, #7
    8f12:	e041      	b.n	8f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    8f14:	f011 0f30 	tst.w	r1, #48	; 0x30
    8f18:	d045      	beq.n	8fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8f1a:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8f1e:	f88d 1000 	strb.w	r1, [sp]
    8f22:	9900      	ldr	r1, [sp, #0]
    8f24:	9100      	str	r1, [sp, #0]
    8f26:	f89d 1000 	ldrb.w	r1, [sp]
    8f2a:	bbc9      	cbnz	r1, 8fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    8f2c:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8f30:	f88d 1000 	strb.w	r1, [sp]
    8f34:	9900      	ldr	r1, [sp, #0]
    8f36:	9100      	str	r1, [sp, #0]
    8f38:	f89d 1000 	ldrb.w	r1, [sp]
    8f3c:	b1c9      	cbz	r1, 8f72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
    8f3e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8f42:	2924      	cmp	r1, #36	; 0x24
    8f44:	d02d      	beq.n	8fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    8f46:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8f4a:	2924      	cmp	r1, #36	; 0x24
    8f4c:	d029      	beq.n	8fa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    8f4e:	2300      	movs	r3, #0
    8f50:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8f54:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8f58:	f005 fa71 	bl	e43e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8f5c:	68a0      	ldr	r0, [r4, #8]
    8f5e:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    8f62:	f021 0120 	bic.w	r1, r1, #32
    8f66:	f041 0110 	orr.w	r1, r1, #16
    8f6a:	7001      	strb	r1, [r0, #0]
    8f6c:	2100      	movs	r1, #0
    8f6e:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    8f72:	68a0      	ldr	r0, [r4, #8]
    8f74:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8f78:	06c9      	lsls	r1, r1, #27
    8f7a:	d514      	bpl.n	8fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8f7c:	f005 fa7a 	bl	e474 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f80:	f000 f910 	bl	91a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    8f84:	68a1      	ldr	r1, [r4, #8]
    8f86:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8f8a:	8bc2      	ldrh	r2, [r0, #30]
    8f8c:	f821 2fee 	strh.w	r2, [r1, #238]!
    8f90:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8f92:	8048      	strh	r0, [r1, #2]
    8f94:	2101      	movs	r1, #1
    8f96:	2015      	movs	r0, #21
    8f98:	f000 fcb0 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8f9c:	2001      	movs	r0, #1
    8f9e:	bd38      	pop	{r3, r4, r5, pc}
    8fa0:	e001      	b.n	8fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    8fa2:	2301      	movs	r3, #1
    8fa4:	e7d4      	b.n	8f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    8fa6:	2000      	movs	r0, #0
    8fa8:	e7f9      	b.n	8f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
    8faa:	0000      	.short	0x0000
    8fac:	20000130 	.word	0x20000130
    8fb0:	b570      	push	{r4, r5, r6, lr}
    8fb2:	460d      	mov	r5, r1
    8fb4:	4606      	mov	r6, r0
    8fb6:	f005 f884 	bl	e0c2 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    8fba:	4604      	mov	r4, r0
    8fbc:	4630      	mov	r0, r6
    8fbe:	f005 f88c 	bl	e0da <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8fc2:	4629      	mov	r1, r5
    8fc4:	f000 f81e 	bl	9004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
    8fc8:	b1b8      	cbz	r0, 8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    8fca:	4620      	mov	r0, r4
    8fcc:	f004 fea4 	bl	dd18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8fd0:	0001      	movs	r1, r0
    8fd2:	d00d      	beq.n	8ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8fd4:	480a      	ldr	r0, [pc, #40]	; (9000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
    8fd6:	6880      	ldr	r0, [r0, #8]
    8fd8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8fdc:	428a      	cmp	r2, r1
    8fde:	d007      	beq.n	8ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    8fe0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8fe4:	2901      	cmp	r1, #1
    8fe6:	d005      	beq.n	8ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    8fe8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8fec:	4220      	tst	r0, r4
    8fee:	d004      	beq.n	8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    8ff0:	2001      	movs	r0, #1
    8ff2:	bd70      	pop	{r4, r5, r6, pc}
    8ff4:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    8ff8:	e7f8      	b.n	8fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    8ffa:	2000      	movs	r0, #0
    8ffc:	bd70      	pop	{r4, r5, r6, pc}
    8ffe:	0000      	.short	0x0000
    9000:	20000130 	.word	0x20000130
    9004:	b570      	push	{r4, r5, r6, lr}
    9006:	460d      	mov	r5, r1
    9008:	4604      	mov	r4, r0
    900a:	f004 fe85 	bl	dd18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    900e:	b350      	cbz	r0, 9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9010:	4916      	ldr	r1, [pc, #88]	; (906c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
    9012:	6889      	ldr	r1, [r1, #8]
    9014:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    9018:	4282      	cmp	r2, r0
    901a:	d024      	beq.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    901c:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    9020:	2b01      	cmp	r3, #1
    9022:	d005      	beq.n	9030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    9024:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    9028:	4223      	tst	r3, r4
    902a:	d013      	beq.n	9054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    902c:	b11d      	cbz	r5, 9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    902e:	e01a      	b.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9030:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    9034:	e7f8      	b.n	9028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    9036:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    903a:	4221      	tst	r1, r4
    903c:	d113      	bne.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    903e:	b15a      	cbz	r2, 9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    9040:	2a04      	cmp	r2, #4
    9042:	d00e      	beq.n	9062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9044:	2804      	cmp	r0, #4
    9046:	d00c      	beq.n	9062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9048:	2a08      	cmp	r2, #8
    904a:	d00a      	beq.n	9062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    904c:	2808      	cmp	r0, #8
    904e:	d008      	beq.n	9062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9050:	4282      	cmp	r2, r0
    9052:	d908      	bls.n	9066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9054:	2000      	movs	r0, #0
    9056:	bd70      	pop	{r4, r5, r6, pc}
    9058:	f240 1155 	movw	r1, #341	; 0x155
    905c:	2006      	movs	r0, #6
    905e:	f7fb fcf5 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9062:	4282      	cmp	r2, r0
    9064:	d3f6      	bcc.n	9054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    9066:	2001      	movs	r0, #1
    9068:	bd70      	pop	{r4, r5, r6, pc}
    906a:	0000      	.short	0x0000
    906c:	20000130 	.word	0x20000130
    9070:	490c      	ldr	r1, [pc, #48]	; (90a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
    9072:	4602      	mov	r2, r0
    9074:	7848      	ldrb	r0, [r1, #1]
    9076:	b998      	cbnz	r0, 90a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    9078:	4608      	mov	r0, r1
    907a:	6880      	ldr	r0, [r0, #8]
    907c:	b142      	cbz	r2, 9090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
    907e:	7889      	ldrb	r1, [r1, #2]
    9080:	0709      	lsls	r1, r1, #28
    9082:	d503      	bpl.n	908c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    9084:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    9088:	2808      	cmp	r0, #8
    908a:	d009      	beq.n	90a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    908c:	2001      	movs	r0, #1
    908e:	4770      	bx	lr
    9090:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    9094:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9096:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    9098:	428a      	cmp	r2, r1
    909a:	d801      	bhi.n	90a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    909c:	f7ff b81a 	b.w	80d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    90a0:	2000      	movs	r0, #0
    90a2:	4770      	bx	lr
    90a4:	20000130 	.word	0x20000130
    90a8:	b538      	push	{r3, r4, r5, lr}
    90aa:	4c3d      	ldr	r4, [pc, #244]	; (91a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
    90ac:	4605      	mov	r5, r0
    90ae:	68a0      	ldr	r0, [r4, #8]
    90b0:	3070      	adds	r0, #112	; 0x70
    90b2:	f006 f940 	bl	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    90b6:	2800      	cmp	r0, #0
    90b8:	d170      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    90ba:	2d00      	cmp	r5, #0
    90bc:	d16e      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    90be:	68a0      	ldr	r0, [r4, #8]
    90c0:	2301      	movs	r3, #1
    90c2:	4619      	mov	r1, r3
    90c4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    90c8:	3070      	adds	r0, #112	; 0x70
    90ca:	f004 fd8c 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90ce:	2800      	cmp	r0, #0
    90d0:	d164      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    90d2:	68a0      	ldr	r0, [r4, #8]
    90d4:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    90d8:	f88d 1000 	strb.w	r1, [sp]
    90dc:	9900      	ldr	r1, [sp, #0]
    90de:	9100      	str	r1, [sp, #0]
    90e0:	f89d 1000 	ldrb.w	r1, [sp]
    90e4:	b149      	cbz	r1, 90fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    90e6:	2100      	movs	r1, #0
    90e8:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    90ec:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    90f0:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    90f4:	2100      	movs	r1, #0
    90f6:	2002      	movs	r0, #2
    90f8:	e045      	b.n	9186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    90fa:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    90fe:	2301      	movs	r3, #1
    9100:	2104      	movs	r1, #4
    9102:	3070      	adds	r0, #112	; 0x70
    9104:	f004 fd6f 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9108:	4605      	mov	r5, r0
    910a:	f7ff fedd 	bl	8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    910e:	2800      	cmp	r0, #0
    9110:	d144      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9112:	4628      	mov	r0, r5
    9114:	f7ff fea0 	bl	8e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    9118:	2800      	cmp	r0, #0
    911a:	d13f      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    911c:	68a0      	ldr	r0, [r4, #8]
    911e:	2301      	movs	r3, #1
    9120:	2100      	movs	r1, #0
    9122:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9126:	3070      	adds	r0, #112	; 0x70
    9128:	f004 fd5d 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    912c:	b178      	cbz	r0, 914e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    912e:	68a0      	ldr	r0, [r4, #8]
    9130:	2301      	movs	r3, #1
    9132:	2104      	movs	r1, #4
    9134:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9138:	3070      	adds	r0, #112	; 0x70
    913a:	f004 fd54 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    913e:	b930      	cbnz	r0, 914e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9140:	68a0      	ldr	r0, [r4, #8]
    9142:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    9146:	b110      	cbz	r0, 914e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9148:	2100      	movs	r1, #0
    914a:	2012      	movs	r0, #18
    914c:	e01b      	b.n	9186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    914e:	68a0      	ldr	r0, [r4, #8]
    9150:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9154:	290a      	cmp	r1, #10
    9156:	d01a      	beq.n	918e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    9158:	2d00      	cmp	r5, #0
    915a:	d11f      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    915c:	f000 fb1a 	bl	9794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    9160:	2800      	cmp	r0, #0
    9162:	d11b      	bne.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9164:	68a0      	ldr	r0, [r4, #8]
    9166:	2301      	movs	r3, #1
    9168:	2100      	movs	r1, #0
    916a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    916e:	3070      	adds	r0, #112	; 0x70
    9170:	f004 fd39 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9174:	2800      	cmp	r0, #0
    9176:	d011      	beq.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9178:	68a0      	ldr	r0, [r4, #8]
    917a:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    917e:	2800      	cmp	r0, #0
    9180:	d00c      	beq.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9182:	2100      	movs	r1, #0
    9184:	20ff      	movs	r0, #255	; 0xff
    9186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    918a:	f000 bbb7 	b.w	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    918e:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    9192:	7101      	strb	r1, [r0, #4]
    9194:	2100      	movs	r1, #0
    9196:	2007      	movs	r0, #7
    9198:	e7f5      	b.n	9186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    919a:	e7ff      	b.n	919c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    919c:	bd38      	pop	{r3, r4, r5, pc}
    919e:	0000      	.short	0x0000
    91a0:	20000130 	.word	0x20000130
    91a4:	480a      	ldr	r0, [pc, #40]	; (91d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
    91a6:	b510      	push	{r4, lr}
    91a8:	6881      	ldr	r1, [r0, #8]
    91aa:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    91ae:	2801      	cmp	r0, #1
    91b0:	d009      	beq.n	91c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    91b2:	8808      	ldrh	r0, [r1, #0]
    91b4:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    91b8:	312c      	adds	r1, #44	; 0x2c
    91ba:	f005 f91c 	bl	e3f6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    91be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91c2:	f7fd bdcf 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    91c6:	2002      	movs	r0, #2
    91c8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    91cc:	bd10      	pop	{r4, pc}
    91ce:	0000      	.short	0x0000
    91d0:	20000130 	.word	0x20000130
    91d4:	b570      	push	{r4, r5, r6, lr}
    91d6:	4c25      	ldr	r4, [pc, #148]	; (926c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    91d8:	0005      	movs	r5, r0
    91da:	d12f      	bne.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    91dc:	f000 f8a4 	bl	9328 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    91e0:	f000 f848 	bl	9274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    91e4:	0005      	movs	r5, r0
    91e6:	d129      	bne.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    91e8:	8860      	ldrh	r0, [r4, #2]
    91ea:	0741      	lsls	r1, r0, #29
    91ec:	d506      	bpl.n	91fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    91ee:	68a1      	ldr	r1, [r4, #8]
    91f0:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    91f4:	2907      	cmp	r1, #7
    91f6:	d101      	bne.n	91fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    91f8:	2101      	movs	r1, #1
    91fa:	7021      	strb	r1, [r4, #0]
    91fc:	0780      	lsls	r0, r0, #30
    91fe:	d512      	bpl.n	9226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9200:	68e0      	ldr	r0, [r4, #12]
    9202:	78c0      	ldrb	r0, [r0, #3]
    9204:	2819      	cmp	r0, #25
    9206:	d205      	bcs.n	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9208:	4919      	ldr	r1, [pc, #100]	; (9270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    920a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    920e:	b109      	cbz	r1, 9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9210:	4788      	blx	r1
    9212:	e008      	b.n	9226 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9214:	28ff      	cmp	r0, #255	; 0xff
    9216:	d004      	beq.n	9222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    9218:	f240 714d 	movw	r1, #1869	; 0x74d
    921c:	2031      	movs	r0, #49	; 0x31
    921e:	f7fb fc15 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9222:	f001 f91b 	bl	a45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    9226:	78a0      	ldrb	r0, [r4, #2]
    9228:	06c0      	lsls	r0, r0, #27
    922a:	d507      	bpl.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    922c:	68a0      	ldr	r0, [r4, #8]
    922e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9232:	290b      	cmp	r1, #11
    9234:	d102      	bne.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9236:	210c      	movs	r1, #12
    9238:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    923c:	7860      	ldrb	r0, [r4, #1]
    923e:	0700      	lsls	r0, r0, #28
    9240:	d511      	bpl.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    9242:	68a0      	ldr	r0, [r4, #8]
    9244:	2301      	movs	r3, #1
    9246:	2105      	movs	r1, #5
    9248:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    924c:	3070      	adds	r0, #112	; 0x70
    924e:	f004 fcca 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9252:	b128      	cbz	r0, 9260 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
    9254:	68a1      	ldr	r1, [r4, #8]
    9256:	2508      	movs	r5, #8
    9258:	2000      	movs	r0, #0
    925a:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    925e:	e002      	b.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    9260:	2000      	movs	r0, #0
    9262:	f7fc fc4d 	bl	5b00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9266:	4628      	mov	r0, r5
    9268:	bd70      	pop	{r4, r5, r6, pc}
    926a:	0000      	.short	0x0000
    926c:	20000130 	.word	0x20000130
    9270:	200001a8 	.word	0x200001a8
    9274:	b570      	push	{r4, r5, r6, lr}
    9276:	4c2a      	ldr	r4, [pc, #168]	; (9320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    9278:	2000      	movs	r0, #0
    927a:	78a1      	ldrb	r1, [r4, #2]
    927c:	07c9      	lsls	r1, r1, #31
    927e:	d015      	beq.n	92ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
    9280:	6920      	ldr	r0, [r4, #16]
    9282:	2301      	movs	r3, #1
    9284:	2105      	movs	r1, #5
    9286:	78c5      	ldrb	r5, [r0, #3]
    9288:	68a0      	ldr	r0, [r4, #8]
    928a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    928e:	3070      	adds	r0, #112	; 0x70
    9290:	f004 fca9 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9294:	b158      	cbz	r0, 92ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    9296:	1ead      	subs	r5, r5, #2
    9298:	2d0a      	cmp	r5, #10
    929a:	d206      	bcs.n	92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    929c:	e8df f005 	tbb	[pc, r5]
    92a0:	05050707 	.word	0x05050707
    92a4:	05050707 	.word	0x05050707
    92a8:	0707      	.short	0x0707
    92aa:	2008      	movs	r0, #8
    92ac:	bd70      	pop	{r4, r5, r6, pc}
    92ae:	6920      	ldr	r0, [r4, #16]
    92b0:	f7fd fc34 	bl	6b1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    92b4:	b138      	cbz	r0, 92c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
    92b6:	6920      	ldr	r0, [r4, #16]
    92b8:	78c5      	ldrb	r5, [r0, #3]
    92ba:	b145      	cbz	r5, 92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    92bc:	2d01      	cmp	r5, #1
    92be:	d006      	beq.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    92c0:	2d16      	cmp	r5, #22
    92c2:	d118      	bne.n	92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    92c4:	e003      	b.n	92ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    92c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92ca:	f000 bd3d 	b.w	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    92ce:	68a0      	ldr	r0, [r4, #8]
    92d0:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    92d4:	f004 fcd5 	bl	dc82 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    92d8:	b168      	cbz	r0, 92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    92da:	68a1      	ldr	r1, [r4, #8]
    92dc:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    92e0:	281f      	cmp	r0, #31
    92e2:	d008      	beq.n	92f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    92e4:	2820      	cmp	r0, #32
    92e6:	d003      	beq.n	92f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
    92e8:	2d16      	cmp	r5, #22
    92ea:	d00c      	beq.n	9306 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    92ec:	2002      	movs	r0, #2
    92ee:	bd70      	pop	{r4, r5, r6, pc}
    92f0:	2026      	movs	r0, #38	; 0x26
    92f2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    92f6:	2d19      	cmp	r5, #25
    92f8:	d207      	bcs.n	930a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    92fa:	480a      	ldr	r0, [pc, #40]	; (9324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    92fc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9300:	b118      	cbz	r0, 930a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9302:	4780      	blx	r0
    9304:	e003      	b.n	930e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    9306:	2020      	movs	r0, #32
    9308:	bd70      	pop	{r4, r5, r6, pc}
    930a:	f000 fd1d 	bl	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    930e:	68a2      	ldr	r2, [r4, #8]
    9310:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    9314:	1c49      	adds	r1, r1, #1
    9316:	f143 0300 	adc.w	r3, r3, #0
    931a:	e9c2 1300 	strd	r1, r3, [r2]
    931e:	bd70      	pop	{r4, r5, r6, pc}
    9320:	20000130 	.word	0x20000130
    9324:	20000144 	.word	0x20000144
    9328:	b570      	push	{r4, r5, r6, lr}
    932a:	4c22      	ldr	r4, [pc, #136]	; (93b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    932c:	78a0      	ldrb	r0, [r4, #2]
    932e:	0700      	lsls	r0, r0, #28
    9330:	d53e      	bpl.n	93b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9332:	68a0      	ldr	r0, [r4, #8]
    9334:	3070      	adds	r0, #112	; 0x70
    9336:	f005 fffe 	bl	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    933a:	b148      	cbz	r0, 9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    933c:	68a0      	ldr	r0, [r4, #8]
    933e:	21fe      	movs	r1, #254	; 0xfe
    9340:	2500      	movs	r5, #0
    9342:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    9346:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    934a:	2919      	cmp	r1, #25
    934c:	d10c      	bne.n	9368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    934e:	e004      	b.n	935a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9350:	f240 7157 	movw	r1, #1879	; 0x757
    9354:	2031      	movs	r0, #49	; 0x31
    9356:	f7fb fb79 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    935a:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    935e:	f7ff fd69 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    9362:	68a0      	ldr	r0, [r4, #8]
    9364:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    9368:	68a0      	ldr	r0, [r4, #8]
    936a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    936e:	291f      	cmp	r1, #31
    9370:	d002      	beq.n	9378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    9372:	2927      	cmp	r1, #39	; 0x27
    9374:	d113      	bne.n	939e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9376:	e00b      	b.n	9390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9378:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    937c:	f004 fc81 	bl	dc82 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9380:	b108      	cbz	r0, 9386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    9382:	2026      	movs	r0, #38	; 0x26
    9384:	e000      	b.n	9388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    9386:	2020      	movs	r0, #32
    9388:	68a1      	ldr	r1, [r4, #8]
    938a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    938e:	e006      	b.n	939e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    9390:	2101      	movs	r1, #1
    9392:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    9396:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    939a:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    939e:	68a0      	ldr	r0, [r4, #8]
    93a0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    93a4:	2908      	cmp	r1, #8
    93a6:	d103      	bne.n	93b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    93a8:	2102      	movs	r1, #2
    93aa:	7021      	strb	r1, [r4, #0]
    93ac:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    93b0:	bd70      	pop	{r4, r5, r6, pc}
    93b2:	0000      	.short	0x0000
    93b4:	20000130 	.word	0x20000130
    93b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    93ba:	4605      	mov	r5, r0
    93bc:	4668      	mov	r0, sp
    93be:	f7fc fa09 	bl	57d4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    93c2:	b318      	cbz	r0, 940c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    93c4:	2222      	movs	r2, #34	; 0x22
    93c6:	2100      	movs	r1, #0
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	f003 fa19 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    93ce:	2103      	movs	r1, #3
    93d0:	9800      	ldr	r0, [sp, #0]
    93d2:	f004 fed6 	bl	e182 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    93d6:	9800      	ldr	r0, [sp, #0]
    93d8:	7801      	ldrb	r1, [r0, #0]
    93da:	f021 0110 	bic.w	r1, r1, #16
    93de:	7001      	strb	r1, [r0, #0]
    93e0:	4629      	mov	r1, r5
    93e2:	f7fd fbc7 	bl	6b74 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    93e6:	2100      	movs	r1, #0
    93e8:	4c5f      	ldr	r4, [pc, #380]	; (9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    93ea:	f644 162f 	movw	r6, #18735	; 0x492f
    93ee:	2d0e      	cmp	r5, #14
    93f0:	d07e      	beq.n	94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    93f2:	dc0e      	bgt.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    93f4:	f1a5 0502 	sub.w	r5, r5, #2
    93f8:	2d0c      	cmp	r5, #12
    93fa:	d21c      	bcs.n	9436 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    93fc:	e8df f005 	tbb	[pc, r5]
    9400:	aa491b1e 	.word	0xaa491b1e
    9404:	551b1eaa 	.word	0x551b1eaa
    9408:	3034aa1b 	.word	0x3034aa1b
    940c:	f640 1187 	movw	r1, #2439	; 0x987
    9410:	e0a6      	b.n	9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    9412:	2d15      	cmp	r5, #21
    9414:	d05c      	beq.n	94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    9416:	dc08      	bgt.n	942a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    9418:	2d11      	cmp	r5, #17
    941a:	d014      	beq.n	9446 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
    941c:	2d12      	cmp	r5, #18
    941e:	d01e      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    9420:	2d13      	cmp	r5, #19
    9422:	d01c      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    9424:	2d14      	cmp	r5, #20
    9426:	d106      	bne.n	9436 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    9428:	e052      	b.n	94d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    942a:	2d16      	cmp	r5, #22
    942c:	d027      	beq.n	947e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
    942e:	2d17      	cmp	r5, #23
    9430:	d069      	beq.n	9506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
    9432:	2dff      	cmp	r5, #255	; 0xff
    9434:	d072      	beq.n	951c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9436:	f640 11fd 	movw	r1, #2557	; 0x9fd
    943a:	e091      	b.n	9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    943c:	68a1      	ldr	r1, [r4, #8]
    943e:	9800      	ldr	r0, [sp, #0]
    9440:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    9444:	e00e      	b.n	9464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    9446:	68a0      	ldr	r0, [r4, #8]
    9448:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    944c:	9800      	ldr	r0, [sp, #0]
    944e:	f004 fe74 	bl	e13a <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9452:	68a0      	ldr	r0, [r4, #8]
    9454:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    9458:	9800      	ldr	r0, [sp, #0]
    945a:	f004 fe70 	bl	e13e <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    945e:	e079      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9460:	9800      	ldr	r0, [sp, #0]
    9462:	2106      	movs	r1, #6
    9464:	7101      	strb	r1, [r0, #4]
    9466:	e075      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9468:	9800      	ldr	r0, [sp, #0]
    946a:	220b      	movs	r2, #11
    946c:	7102      	strb	r2, [r0, #4]
    946e:	2259      	movs	r2, #89	; 0x59
    9470:	7142      	strb	r2, [r0, #5]
    9472:	7181      	strb	r1, [r0, #6]
    9474:	21fe      	movs	r1, #254	; 0xfe
    9476:	71c1      	strb	r1, [r0, #7]
    9478:	2112      	movs	r1, #18
    947a:	7201      	strb	r1, [r0, #8]
    947c:	e06a      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    947e:	9800      	ldr	r0, [sp, #0]
    9480:	f8d4 1008 	ldr.w	r1, [r4, #8]
    9484:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    9488:	7102      	strb	r2, [r0, #4]
    948a:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    948e:	7141      	strb	r1, [r0, #5]
    9490:	e060      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9492:	68a1      	ldr	r1, [r4, #8]
    9494:	9800      	ldr	r0, [sp, #0]
    9496:	f501 718c 	add.w	r1, r1, #280	; 0x118
    949a:	f004 fe63 	bl	e164 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    949e:	68a1      	ldr	r1, [r4, #8]
    94a0:	9800      	ldr	r0, [sp, #0]
    94a2:	31e4      	adds	r1, #228	; 0xe4
    94a4:	f004 fe5b 	bl	e15e <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    94a8:	e054      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    94aa:	9101      	str	r1, [sp, #4]
    94ac:	9102      	str	r1, [sp, #8]
    94ae:	f001 fe05 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    94b2:	68a1      	ldr	r1, [r4, #8]
    94b4:	4030      	ands	r0, r6
    94b6:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    94ba:	4001      	ands	r1, r0
    94bc:	f88d 1004 	strb.w	r1, [sp, #4]
    94c0:	0a00      	lsrs	r0, r0, #8
    94c2:	f88d 0005 	strb.w	r0, [sp, #5]
    94c6:	a901      	add	r1, sp, #4
    94c8:	9800      	ldr	r0, [sp, #0]
    94ca:	f004 fe55 	bl	e178 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    94ce:	e041      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    94d0:	68a0      	ldr	r0, [r4, #8]
    94d2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    94d6:	9800      	ldr	r0, [sp, #0]
    94d8:	f004 fe5b 	bl	e192 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    94dc:	68a0      	ldr	r0, [r4, #8]
    94de:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    94e2:	9800      	ldr	r0, [sp, #0]
    94e4:	f004 fe59 	bl	e19a <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    94e8:	68a0      	ldr	r0, [r4, #8]
    94ea:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    94ee:	e000      	b.n	94f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    94f0:	e015      	b.n	951e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    94f2:	9800      	ldr	r0, [sp, #0]
    94f4:	f004 fe55 	bl	e1a2 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    94f8:	68a0      	ldr	r0, [r4, #8]
    94fa:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    94fe:	9800      	ldr	r0, [sp, #0]
    9500:	f004 fe53 	bl	e1aa <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9504:	e026      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9506:	68a1      	ldr	r1, [r4, #8]
    9508:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    950c:	2801      	cmp	r0, #1
    950e:	9800      	ldr	r0, [sp, #0]
    9510:	d0b8      	beq.n	9484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
    9512:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    9516:	7102      	strb	r2, [r0, #4]
    9518:	7849      	ldrb	r1, [r1, #1]
    951a:	e7b8      	b.n	948e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    951c:	e012      	b.n	9544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
    951e:	9101      	str	r1, [sp, #4]
    9520:	9102      	str	r1, [sp, #8]
    9522:	f001 fdcb 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9526:	68a1      	ldr	r1, [r4, #8]
    9528:	4030      	ands	r0, r6
    952a:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    952e:	4001      	ands	r1, r0
    9530:	f88d 1004 	strb.w	r1, [sp, #4]
    9534:	0a00      	lsrs	r0, r0, #8
    9536:	f88d 0005 	strb.w	r0, [sp, #5]
    953a:	a901      	add	r1, sp, #4
    953c:	9800      	ldr	r0, [sp, #0]
    953e:	f004 fe16 	bl	e16e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9542:	e007      	b.n	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9544:	68a0      	ldr	r0, [r4, #8]
    9546:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    954a:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    954e:	9800      	ldr	r0, [sp, #0]
    9550:	f004 fdf7 	bl	e142 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9554:	f7fc f918 	bl	5788 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9558:	2800      	cmp	r0, #0
    955a:	d104      	bne.n	9566 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    955c:	f640 2101 	movw	r1, #2561	; 0xa01
    9560:	2031      	movs	r0, #49	; 0x31
    9562:	f7fb fa73 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9568:	20000130 	.word	0x20000130
    956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9570:	4c87      	ldr	r4, [pc, #540]	; (9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    9572:	4682      	mov	sl, r0
    9574:	4689      	mov	r9, r1
    9576:	68a0      	ldr	r0, [r4, #8]
    9578:	8800      	ldrh	r0, [r0, #0]
    957a:	f7fb fe97 	bl	52ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    957e:	0006      	movs	r6, r0
    9580:	d00a      	beq.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    9582:	8860      	ldrh	r0, [r4, #2]
    9584:	f04f 0500 	mov.w	r5, #0
    9588:	05c0      	lsls	r0, r0, #23
    958a:	68a0      	ldr	r0, [r4, #8]
    958c:	d509      	bpl.n	95a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    958e:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    9592:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    9596:	e008      	b.n	95aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    9598:	f640 51a7 	movw	r1, #3495	; 0xda7
    959c:	2031      	movs	r0, #49	; 0x31
    959e:	f7fb fa55 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95a2:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    95a6:	1c49      	adds	r1, r1, #1
    95a8:	8001      	strh	r1, [r0, #0]
    95aa:	f001 f8f3 	bl	a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    95ae:	f04f 0801 	mov.w	r8, #1
    95b2:	b320      	cbz	r0, 95fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    95b4:	8860      	ldrh	r0, [r4, #2]
    95b6:	0500      	lsls	r0, r0, #20
    95b8:	d506      	bpl.n	95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    95ba:	68a0      	ldr	r0, [r4, #8]
    95bc:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    95c0:	b111      	cbz	r1, 95c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    95c2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    95c6:	e01a      	b.n	95fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    95c8:	68a0      	ldr	r0, [r4, #8]
    95ca:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    95ce:	1c49      	adds	r1, r1, #1
    95d0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    95d4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    95d8:	428b      	cmp	r3, r1
    95da:	d301      	bcc.n	95e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    95dc:	1a5a      	subs	r2, r3, r1
    95de:	e000      	b.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    95e0:	2200      	movs	r2, #0
    95e2:	88a7      	ldrh	r7, [r4, #4]
    95e4:	1d7f      	adds	r7, r7, #5
    95e6:	42ba      	cmp	r2, r7
    95e8:	d801      	bhi.n	95ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    95ea:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    95ee:	4299      	cmp	r1, r3
    95f0:	d305      	bcc.n	95fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    95f2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    95f6:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    95fa:	f7fd fbb3 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95fe:	8860      	ldrh	r0, [r4, #2]
    9600:	f04f 0702 	mov.w	r7, #2
    9604:	f410 7f40 	tst.w	r0, #768	; 0x300
    9608:	d00e      	beq.n	9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    960a:	68a0      	ldr	r0, [r4, #8]
    960c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9610:	b111      	cbz	r1, 9618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
    9612:	2903      	cmp	r1, #3
    9614:	d108      	bne.n	9628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    9616:	e002      	b.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
    9618:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    961c:	e001      	b.n	9622 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
    961e:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    9622:	2101      	movs	r1, #1
    9624:	f7fe fd7c 	bl	8120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9628:	68a0      	ldr	r0, [r4, #8]
    962a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    962e:	2901      	cmp	r1, #1
    9630:	d104      	bne.n	963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    9632:	8861      	ldrh	r1, [r4, #2]
    9634:	0549      	lsls	r1, r1, #21
    9636:	d501      	bpl.n	963c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    9638:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    963c:	f1ba 0f00 	cmp.w	sl, #0
    9640:	d176      	bne.n	9730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    9642:	78a1      	ldrb	r1, [r4, #2]
    9644:	0649      	lsls	r1, r1, #25
    9646:	d502      	bpl.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    9648:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    964c:	e004      	b.n	9658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
    964e:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    9652:	1c49      	adds	r1, r1, #1
    9654:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    9658:	4648      	mov	r0, r9
    965a:	f7ff fdbb 	bl	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
    965e:	ea40 0009 	orr.w	r0, r0, r9
    9662:	4681      	mov	r9, r0
    9664:	f7ff fd20 	bl	90a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9668:	68a7      	ldr	r7, [r4, #8]
    966a:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    966e:	1c40      	adds	r0, r0, #1
    9670:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    9674:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    9678:	b128      	cbz	r0, 9686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
    967a:	f7fc faaf 	bl	5bdc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    967e:	b1b0      	cbz	r0, 96ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    9680:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    9684:	e013      	b.n	96ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    9686:	f7fc f927 	bl	58d8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    968a:	b108      	cbz	r0, 9690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
    968c:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    9690:	f7fc f91c 	bl	58cc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9694:	b158      	cbz	r0, 96ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    9696:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    969a:	1c40      	adds	r0, r0, #1
    969c:	b2c0      	uxtb	r0, r0
    969e:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    96a2:	2802      	cmp	r0, #2
    96a4:	d903      	bls.n	96ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    96a6:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    96aa:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    96ae:	68a0      	ldr	r0, [r4, #8]
    96b0:	2301      	movs	r3, #1
    96b2:	2100      	movs	r1, #0
    96b4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    96b8:	3070      	adds	r0, #112	; 0x70
    96ba:	f004 fa94 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96be:	b920      	cbnz	r0, 96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
    96c0:	68a0      	ldr	r0, [r4, #8]
    96c2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    96c6:	280c      	cmp	r0, #12
    96c8:	d15e      	bne.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    96ca:	68a0      	ldr	r0, [r4, #8]
    96cc:	2301      	movs	r3, #1
    96ce:	2100      	movs	r1, #0
    96d0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    96d4:	3070      	adds	r0, #112	; 0x70
    96d6:	f004 fa86 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96da:	b350      	cbz	r0, 9732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    96dc:	68a0      	ldr	r0, [r4, #8]
    96de:	2301      	movs	r3, #1
    96e0:	2100      	movs	r1, #0
    96e2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    96e6:	3070      	adds	r0, #112	; 0x70
    96e8:	f004 fa7d 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    96ec:	b308      	cbz	r0, 9732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    96ee:	68a0      	ldr	r0, [r4, #8]
    96f0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    96f4:	2902      	cmp	r1, #2
    96f6:	d147      	bne.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    96f8:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    96fc:	b9c8      	cbnz	r0, 9732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    96fe:	4630      	mov	r0, r6
    9700:	f003 fd4d 	bl	d19e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9704:	b1a8      	cbz	r0, 9732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9706:	68a0      	ldr	r0, [r4, #8]
    9708:	3070      	adds	r0, #112	; 0x70
    970a:	f005 fe14 	bl	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    970e:	b980      	cbnz	r0, 9732 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9710:	68a1      	ldr	r1, [r4, #8]
    9712:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    9716:	2801      	cmp	r0, #1
    9718:	d936      	bls.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    971a:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    971e:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    9722:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    9726:	1e93      	subs	r3, r2, #2
    9728:	4298      	cmp	r0, r3
    972a:	db03      	blt.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    972c:	2001      	movs	r0, #1
    972e:	e004      	b.n	973a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    9730:	e01c      	b.n	976c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    9732:	e029      	b.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9734:	1a10      	subs	r0, r2, r0
    9736:	1e40      	subs	r0, r0, #1
    9738:	b280      	uxth	r0, r0
    973a:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    973e:	88a3      	ldrh	r3, [r4, #4]
    9740:	429a      	cmp	r2, r3
    9742:	d301      	bcc.n	9748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
    9744:	2201      	movs	r2, #1
    9746:	e002      	b.n	974e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9748:	1a9a      	subs	r2, r3, r2
    974a:	1c52      	adds	r2, r2, #1
    974c:	b292      	uxth	r2, r2
    974e:	4290      	cmp	r0, r2
    9750:	d900      	bls.n	9754 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    9752:	4610      	mov	r0, r2
    9754:	2801      	cmp	r0, #1
    9756:	d101      	bne.n	975c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9758:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    975c:	68a1      	ldr	r1, [r4, #8]
    975e:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    9762:	4410      	add	r0, r2
    9764:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    9768:	f001 f8de 	bl	a928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    976c:	78a0      	ldrb	r0, [r4, #2]
    976e:	464a      	mov	r2, r9
    9770:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9774:	4650      	mov	r0, sl
    9776:	f001 f821 	bl	a7bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    977a:	68a0      	ldr	r0, [r4, #8]
    977c:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    9780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9784:	f7fb bfea 	b.w	575c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9788:	2001      	movs	r0, #1
    978a:	68a1      	ldr	r1, [r4, #8]
    978c:	e7e4      	b.n	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    978e:	0000      	.short	0x0000
    9790:	20000130 	.word	0x20000130
    9794:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9796:	4c58      	ldr	r4, [pc, #352]	; (98f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
    9798:	2301      	movs	r3, #1
    979a:	2100      	movs	r1, #0
    979c:	68a0      	ldr	r0, [r4, #8]
    979e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    97a2:	3070      	adds	r0, #112	; 0x70
    97a4:	f004 fa1f 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97a8:	2800      	cmp	r0, #0
    97aa:	d07d      	beq.n	98a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    97ac:	68a0      	ldr	r0, [r4, #8]
    97ae:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    97b2:	2500      	movs	r5, #0
    97b4:	b139      	cbz	r1, 97c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    97b6:	2100      	movs	r1, #0
    97b8:	200e      	movs	r0, #14
    97ba:	f000 f89f 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    97be:	68a0      	ldr	r0, [r4, #8]
    97c0:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    97c4:	e095      	b.n	98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    97c6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    97ca:	b119      	cbz	r1, 97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    97cc:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    97d0:	0789      	lsls	r1, r1, #30
    97d2:	d016      	beq.n	9802 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    97d4:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    97d8:	f88d 1004 	strb.w	r1, [sp, #4]
    97dc:	9901      	ldr	r1, [sp, #4]
    97de:	9101      	str	r1, [sp, #4]
    97e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    97e4:	b141      	cbz	r1, 97f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    97e6:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    97ea:	f88d 1000 	strb.w	r1, [sp]
    97ee:	9900      	ldr	r1, [sp, #0]
    97f0:	9100      	str	r1, [sp, #0]
    97f2:	f89d 1000 	ldrb.w	r1, [sp]
    97f6:	b189      	cbz	r1, 981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    97f8:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    97fc:	2901      	cmp	r1, #1
    97fe:	d02f      	beq.n	9860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9800:	e071      	b.n	98e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9802:	2100      	movs	r1, #0
    9804:	200c      	movs	r0, #12
    9806:	f000 f879 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    980a:	68a0      	ldr	r0, [r4, #8]
    980c:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    9810:	f041 0101 	orr.w	r1, r1, #1
    9814:	7001      	strb	r1, [r0, #0]
    9816:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    981a:	e06a      	b.n	98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    981c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9820:	2924      	cmp	r1, #36	; 0x24
    9822:	d01b      	beq.n	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9824:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9828:	2924      	cmp	r1, #36	; 0x24
    982a:	d017      	beq.n	985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    982c:	f05f 0300 	movs.w	r3, #0
    9830:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9834:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    9838:	f004 fe01 	bl	e43e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    983c:	68a0      	ldr	r0, [r4, #8]
    983e:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    9842:	2100      	movs	r1, #0
    9844:	2014      	movs	r0, #20
    9846:	f000 f859 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    984a:	68a1      	ldr	r1, [r4, #8]
    984c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9850:	8bc2      	ldrh	r2, [r0, #30]
    9852:	f821 2fee 	strh.w	r2, [r1, #238]!
    9856:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9858:	8048      	strh	r0, [r1, #2]
    985a:	e04a      	b.n	98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    985c:	2301      	movs	r3, #1
    985e:	e7e7      	b.n	9830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    9860:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    9864:	f88d 1000 	strb.w	r1, [sp]
    9868:	9900      	ldr	r1, [sp, #0]
    986a:	9100      	str	r1, [sp, #0]
    986c:	f89d 1000 	ldrb.w	r1, [sp]
    9870:	bb31      	cbnz	r1, 98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    9872:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9876:	2301      	movs	r3, #1
    9878:	210b      	movs	r1, #11
    987a:	3070      	adds	r0, #112	; 0x70
    987c:	f004 f9b3 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9880:	b9f0      	cbnz	r0, 98c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    9882:	68a0      	ldr	r0, [r4, #8]
    9884:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9888:	f005 fd5d 	bl	f346 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    988c:	4605      	mov	r5, r0
    988e:	68a0      	ldr	r0, [r4, #8]
    9890:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9894:	f005 fd57 	bl	f346 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9898:	4606      	mov	r6, r0
    989a:	68a0      	ldr	r0, [r4, #8]
    989c:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    98a0:	4628      	mov	r0, r5
    98a2:	f005 fd5b 	bl	f35c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    98a6:	e000      	b.n	98aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
    98a8:	e01e      	b.n	98e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    98aa:	b150      	cbz	r0, 98c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    98ac:	68a0      	ldr	r0, [r4, #8]
    98ae:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    98b2:	4630      	mov	r0, r6
    98b4:	f005 fd52 	bl	f35c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    98b8:	b118      	cbz	r0, 98c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    98ba:	2000      	movs	r0, #0
    98bc:	f000 f91c 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    98c0:	e011      	b.n	98e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    98c2:	68a0      	ldr	r0, [r4, #8]
    98c4:	2301      	movs	r3, #1
    98c6:	2103      	movs	r1, #3
    98c8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    98cc:	3070      	adds	r0, #112	; 0x70
    98ce:	f004 f98a 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98d2:	b940      	cbnz	r0, 98e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    98d4:	68a0      	ldr	r0, [r4, #8]
    98d6:	2301      	movs	r3, #1
    98d8:	2102      	movs	r1, #2
    98da:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    98de:	3070      	adds	r0, #112	; 0x70
    98e0:	f004 f981 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98e4:	b108      	cbz	r0, 98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    98e6:	2000      	movs	r0, #0
    98e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    98ea:	2100      	movs	r1, #0
    98ec:	2016      	movs	r0, #22
    98ee:	f000 f805 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    98f2:	2001      	movs	r0, #1
    98f4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    98f6:	0000      	.short	0x0000
    98f8:	20000130 	.word	0x20000130
    98fc:	b570      	push	{r4, r5, r6, lr}
    98fe:	4c0d      	ldr	r4, [pc, #52]	; (9934 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
    9900:	4606      	mov	r6, r0
    9902:	460d      	mov	r5, r1
    9904:	68a0      	ldr	r0, [r4, #8]
    9906:	3070      	adds	r0, #112	; 0x70
    9908:	f005 fd15 	bl	f336 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    990c:	b120      	cbz	r0, 9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
    990e:	f640 2114 	movw	r1, #2580	; 0xa14
    9912:	2031      	movs	r0, #49	; 0x31
    9914:	f7fb f89a 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9918:	68a2      	ldr	r2, [r4, #8]
    991a:	2000      	movs	r0, #0
    991c:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    9920:	b115      	cbz	r5, 9928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
    9922:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    9926:	bd70      	pop	{r4, r5, r6, pc}
    9928:	f822 0faa 	strh.w	r0, [r2, #170]!
    992c:	2001      	movs	r0, #1
    992e:	7110      	strb	r0, [r2, #4]
    9930:	bd70      	pop	{r4, r5, r6, pc}
    9932:	0000      	.short	0x0000
    9934:	20000130 	.word	0x20000130
    9938:	b570      	push	{r4, r5, r6, lr}
    993a:	4d1a      	ldr	r5, [pc, #104]	; (99a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    993c:	2600      	movs	r6, #0
    993e:	68ac      	ldr	r4, [r5, #8]
    9940:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    9944:	2801      	cmp	r0, #1
    9946:	d00a      	beq.n	995e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
    9948:	2802      	cmp	r0, #2
    994a:	d129      	bne.n	99a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    994c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    9950:	2106      	movs	r1, #6
    9952:	b1a0      	cbz	r0, 997e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9954:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    9958:	2101      	movs	r1, #1
    995a:	2002      	movs	r0, #2
    995c:	e01b      	b.n	9996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    995e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    9962:	2800      	cmp	r0, #0
    9964:	d11c      	bne.n	99a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9966:	2200      	movs	r2, #0
    9968:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    996c:	f504 7188 	add.w	r1, r4, #272	; 0x110
    9970:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    9974:	f004 f8ef 	bl	db56 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9978:	2101      	movs	r1, #1
    997a:	2005      	movs	r0, #5
    997c:	e00b      	b.n	9996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    997e:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    9982:	0740      	lsls	r0, r0, #29
    9984:	d505      	bpl.n	9992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    9986:	2011      	movs	r0, #17
    9988:	2203      	movs	r2, #3
    998a:	f804 2fee 	strb.w	r2, [r4, #238]!
    998e:	7061      	strb	r1, [r4, #1]
    9990:	e000      	b.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    9992:	200d      	movs	r0, #13
    9994:	2101      	movs	r1, #1
    9996:	f7ff ffb1 	bl	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    999a:	68a8      	ldr	r0, [r5, #8]
    999c:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    99a0:	bd70      	pop	{r4, r5, r6, pc}
    99a2:	0000      	.short	0x0000
    99a4:	20000130 	.word	0x20000130
    99a8:	b570      	push	{r4, r5, r6, lr}
    99aa:	4a2b      	ldr	r2, [pc, #172]	; (9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    99ac:	4603      	mov	r3, r0
    99ae:	8850      	ldrh	r0, [r2, #2]
    99b0:	4318      	orrs	r0, r3
    99b2:	8050      	strh	r0, [r2, #2]
    99b4:	4610      	mov	r0, r2
    99b6:	2b40      	cmp	r3, #64	; 0x40
    99b8:	6880      	ldr	r0, [r0, #8]
    99ba:	d00d      	beq.n	99d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
    99bc:	079e      	lsls	r6, r3, #30
    99be:	f04f 0500 	mov.w	r5, #0
    99c2:	f04f 0401 	mov.w	r4, #1
    99c6:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    99ca:	d50c      	bpl.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    99cc:	b14e      	cbz	r6, 99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    99ce:	f640 5114 	movw	r1, #3348	; 0xd14
    99d2:	2031      	movs	r0, #49	; 0x31
    99d4:	f7fb f83a 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99dc:	2104      	movs	r1, #4
    99de:	f7fe bb9f 	b.w	8120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    99e2:	60d1      	str	r1, [r2, #12]
    99e4:	e01c      	b.n	9a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
    99e6:	b1c6      	cbz	r6, 9a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    99e8:	6111      	str	r1, [r2, #16]
    99ea:	78c9      	ldrb	r1, [r1, #3]
    99ec:	2906      	cmp	r1, #6
    99ee:	d002      	beq.n	99f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    99f0:	290b      	cmp	r1, #11
    99f2:	d112      	bne.n	9a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    99f4:	e009      	b.n	9a0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
    99f6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99fa:	2917      	cmp	r1, #23
    99fc:	d10d      	bne.n	9a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    99fe:	2100      	movs	r1, #0
    9a00:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    9a04:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    9a08:	e007      	b.n	9a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9a0a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a0e:	2911      	cmp	r1, #17
    9a10:	d103      	bne.n	9a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9a12:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    9a16:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9a1a:	0799      	lsls	r1, r3, #30
    9a1c:	d516      	bpl.n	9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9a1e:	68d1      	ldr	r1, [r2, #12]
    9a20:	78c9      	ldrb	r1, [r1, #3]
    9a22:	2905      	cmp	r1, #5
    9a24:	d002      	beq.n	9a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9a26:	290b      	cmp	r1, #11
    9a28:	d110      	bne.n	9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9a2a:	e009      	b.n	9a40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    9a2c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a30:	2915      	cmp	r1, #21
    9a32:	d10b      	bne.n	9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9a34:	2100      	movs	r1, #0
    9a36:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    9a3a:	f800 4c45 	strb.w	r4, [r0, #-69]
    9a3e:	e005      	b.n	9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9a40:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a44:	2910      	cmp	r1, #16
    9a46:	d101      	bne.n	9a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9a48:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    9a4c:	0698      	lsls	r0, r3, #26
    9a4e:	d501      	bpl.n	9a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9a50:	2008      	movs	r0, #8
    9a52:	7050      	strb	r0, [r2, #1]
    9a54:	bd70      	pop	{r4, r5, r6, pc}
    9a56:	0000      	.short	0x0000
    9a58:	20000130 	.word	0x20000130
    9a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a60:	4c24      	ldr	r4, [pc, #144]	; (9af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
    9a62:	2501      	movs	r5, #1
    9a64:	68a2      	ldr	r2, [r4, #8]
    9a66:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    9a6a:	b108      	cbz	r0, 9a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    9a6c:	2701      	movs	r7, #1
    9a6e:	e000      	b.n	9a72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    9a70:	2700      	movs	r7, #0
    9a72:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    9a76:	b109      	cbz	r1, 9a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9a78:	2601      	movs	r6, #1
    9a7a:	e000      	b.n	9a7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    9a7c:	2600      	movs	r6, #0
    9a7e:	b90f      	cbnz	r7, 9a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    9a80:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9a84:	b90e      	cbnz	r6, 9a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    9a86:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9a8a:	f102 0362 	add.w	r3, r2, #98	; 0x62
    9a8e:	7218      	strb	r0, [r3, #8]
    9a90:	7259      	strb	r1, [r3, #9]
    9a92:	2001      	movs	r0, #1
    9a94:	7298      	strb	r0, [r3, #10]
    9a96:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    9a9a:	2801      	cmp	r0, #1
    9a9c:	d001      	beq.n	9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    9a9e:	b907      	cbnz	r7, 9aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    9aa0:	b116      	cbz	r6, 9aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
    9aa2:	2000      	movs	r0, #0
    9aa4:	f000 f828 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9aa8:	68a0      	ldr	r0, [r4, #8]
    9aaa:	302c      	adds	r0, #44	; 0x2c
    9aac:	f004 fd36 	bl	e51c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9ab0:	4606      	mov	r6, r0
    9ab2:	68a0      	ldr	r0, [r4, #8]
    9ab4:	f004 fcde 	bl	e474 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ab8:	b1c0      	cbz	r0, 9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9aba:	68a0      	ldr	r0, [r4, #8]
    9abc:	302c      	adds	r0, #44	; 0x2c
    9abe:	f004 fd2d 	bl	e51c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9ac2:	68a1      	ldr	r1, [r4, #8]
    9ac4:	4607      	mov	r7, r0
    9ac6:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    9aca:	8808      	ldrh	r0, [r1, #0]
    9acc:	312c      	adds	r1, #44	; 0x2c
    9ace:	f004 fc92 	bl	e3f6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9ad2:	42be      	cmp	r6, r7
    9ad4:	d20a      	bcs.n	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9ad6:	f7f8 fba7 	bl	2228 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9ada:	4601      	mov	r1, r0
    9adc:	1bb8      	subs	r0, r7, r6
    9ade:	2865      	cmp	r0, #101	; 0x65
    9ae0:	d200      	bcs.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    9ae2:	2065      	movs	r0, #101	; 0x65
    9ae4:	f7f8 fade 	bl	20a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9ae8:	b100      	cbz	r0, 9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9aea:	2500      	movs	r5, #0
    9aec:	4628      	mov	r0, r5
    9aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9af2:	0000      	.short	0x0000
    9af4:	20000130 	.word	0x20000130
    9af8:	b510      	push	{r4, lr}
    9afa:	4c10      	ldr	r4, [pc, #64]	; (9b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
    9afc:	68a1      	ldr	r1, [r4, #8]
    9afe:	880a      	ldrh	r2, [r1, #0]
    9b00:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    9b04:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    9b08:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9b0c:	f005 fc1b 	bl	f346 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9b10:	68a1      	ldr	r1, [r4, #8]
    9b12:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    9b16:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9b1a:	f005 fc14 	bl	f346 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9b1e:	68a2      	ldr	r2, [r4, #8]
    9b20:	f202 2102 	addw	r1, r2, #514	; 0x202
    9b24:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    9b28:	2001      	movs	r0, #1
    9b2a:	7008      	strb	r0, [r1, #0]
    9b2c:	2000      	movs	r0, #0
    9b2e:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    9b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b36:	f7fd b915 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9b3a:	0000      	.short	0x0000
    9b3c:	20000130 	.word	0x20000130
    9b40:	b510      	push	{r4, lr}
    9b42:	4c15      	ldr	r4, [pc, #84]	; (9b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
    9b44:	2301      	movs	r3, #1
    9b46:	2100      	movs	r1, #0
    9b48:	68a0      	ldr	r0, [r4, #8]
    9b4a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b4e:	3070      	adds	r0, #112	; 0x70
    9b50:	f004 f849 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b54:	b190      	cbz	r0, 9b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
    9b56:	6920      	ldr	r0, [r4, #16]
    9b58:	f004 fa8c 	bl	e074 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9b5c:	68a1      	ldr	r1, [r4, #8]
    9b5e:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9b62:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9b66:	f005 fc07 	bl	f378 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9b6a:	b148      	cbz	r0, 9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    9b6c:	68a0      	ldr	r0, [r4, #8]
    9b6e:	2128      	movs	r1, #40	; 0x28
    9b70:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9b74:	3076      	adds	r0, #118	; 0x76
    9b76:	2101      	movs	r1, #1
    9b78:	7781      	strb	r1, [r0, #30]
    9b7a:	e00b      	b.n	9b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9b7c:	2001      	movs	r0, #1
    9b7e:	bd10      	pop	{r4, pc}
    9b80:	68a1      	ldr	r1, [r4, #8]
    9b82:	6920      	ldr	r0, [r4, #16]
    9b84:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    9b88:	f004 fa6f 	bl	e06a <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9b8c:	68a1      	ldr	r1, [r4, #8]
    9b8e:	200b      	movs	r0, #11
    9b90:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9b94:	2000      	movs	r0, #0
    9b96:	bd10      	pop	{r4, pc}
    9b98:	20000130 	.word	0x20000130
    9b9c:	b570      	push	{r4, r5, r6, lr}
    9b9e:	4c29      	ldr	r4, [pc, #164]	; (9c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
    9ba0:	2301      	movs	r3, #1
    9ba2:	2100      	movs	r1, #0
    9ba4:	68a0      	ldr	r0, [r4, #8]
    9ba6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9baa:	3070      	adds	r0, #112	; 0x70
    9bac:	f004 f81b 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bb0:	b1b8      	cbz	r0, 9be2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
    9bb2:	2100      	movs	r1, #0
    9bb4:	6920      	ldr	r0, [r4, #16]
    9bb6:	f004 fa30 	bl	e01a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9bba:	b1a0      	cbz	r0, 9be6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
    9bbc:	6920      	ldr	r0, [r4, #16]
    9bbe:	68a1      	ldr	r1, [r4, #8]
    9bc0:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9bc4:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9bc8:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9bcc:	f005 fbd4 	bl	f378 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9bd0:	b168      	cbz	r0, 9bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
    9bd2:	68a0      	ldr	r0, [r4, #8]
    9bd4:	2128      	movs	r1, #40	; 0x28
    9bd6:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9bda:	3076      	adds	r0, #118	; 0x76
    9bdc:	2101      	movs	r1, #1
    9bde:	7781      	strb	r1, [r0, #30]
    9be0:	e02e      	b.n	9c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
    9be2:	2001      	movs	r0, #1
    9be4:	bd70      	pop	{r4, r5, r6, pc}
    9be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9bea:	f000 b8ad 	b.w	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9bee:	6920      	ldr	r0, [r4, #16]
    9bf0:	f004 fa43 	bl	e07a <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9bf4:	f003 ffda 	bl	dbac <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9bf8:	4605      	mov	r5, r0
    9bfa:	68a0      	ldr	r0, [r4, #8]
    9bfc:	4629      	mov	r1, r5
    9bfe:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    9c02:	6920      	ldr	r0, [r4, #16]
    9c04:	7900      	ldrb	r0, [r0, #4]
    9c06:	f004 f95c 	bl	dec2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9c0a:	68a1      	ldr	r1, [r4, #8]
    9c0c:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    9c10:	6920      	ldr	r0, [r4, #16]
    9c12:	4629      	mov	r1, r5
    9c14:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9c18:	f004 f94f 	bl	deba <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9c1c:	68a1      	ldr	r1, [r4, #8]
    9c1e:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    9c22:	6920      	ldr	r0, [r4, #16]
    9c24:	f004 fa2c 	bl	e080 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9c28:	68a1      	ldr	r1, [r4, #8]
    9c2a:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    9c2e:	6920      	ldr	r0, [r4, #16]
    9c30:	f004 fa29 	bl	e086 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9c34:	68a1      	ldr	r1, [r4, #8]
    9c36:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    9c3a:	200d      	movs	r0, #13
    9c3c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9c40:	2000      	movs	r0, #0
    9c42:	bd70      	pop	{r4, r5, r6, pc}
    9c44:	20000130 	.word	0x20000130
    9c48:	b538      	push	{r3, r4, r5, lr}
    9c4a:	4c29      	ldr	r4, [pc, #164]	; (9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
    9c4c:	2301      	movs	r3, #1
    9c4e:	2100      	movs	r1, #0
    9c50:	68a0      	ldr	r0, [r4, #8]
    9c52:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9c56:	3070      	adds	r0, #112	; 0x70
    9c58:	f003 ffc5 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c5c:	b970      	cbnz	r0, 9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9c5e:	68a0      	ldr	r0, [r4, #8]
    9c60:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9c64:	2a12      	cmp	r2, #18
    9c66:	d009      	beq.n	9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9c68:	2301      	movs	r3, #1
    9c6a:	2105      	movs	r1, #5
    9c6c:	3070      	adds	r0, #112	; 0x70
    9c6e:	f003 ffba 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c72:	b108      	cbz	r0, 9c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
    9c74:	2008      	movs	r0, #8
    9c76:	bd38      	pop	{r3, r4, r5, pc}
    9c78:	2001      	movs	r0, #1
    9c7a:	bd38      	pop	{r3, r4, r5, pc}
    9c7c:	68a0      	ldr	r0, [r4, #8]
    9c7e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    9c82:	b908      	cbnz	r0, 9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    9c84:	f7ff f8ca 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9c88:	68a1      	ldr	r1, [r4, #8]
    9c8a:	6920      	ldr	r0, [r4, #16]
    9c8c:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9c90:	f004 fa08 	bl	e0a4 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9c94:	68a1      	ldr	r1, [r4, #8]
    9c96:	6920      	ldr	r0, [r4, #16]
    9c98:	31e0      	adds	r1, #224	; 0xe0
    9c9a:	f004 f9fa 	bl	e092 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9c9e:	68a1      	ldr	r1, [r4, #8]
    9ca0:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    9ca4:	f88d 0000 	strb.w	r0, [sp]
    9ca8:	9800      	ldr	r0, [sp, #0]
    9caa:	9000      	str	r0, [sp, #0]
    9cac:	f89d 0000 	ldrb.w	r0, [sp]
    9cb0:	b120      	cbz	r0, 9cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    9cb2:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    9cb6:	2031      	movs	r0, #49	; 0x31
    9cb8:	f7fa fec8 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cbc:	8808      	ldrh	r0, [r1, #0]
    9cbe:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    9cc2:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9cc6:	6920      	ldr	r0, [r4, #16]
    9cc8:	f004 f9e7 	bl	e09a <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9ccc:	68a1      	ldr	r1, [r4, #8]
    9cce:	6920      	ldr	r0, [r4, #16]
    9cd0:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    9cd4:	f004 f9da 	bl	e08c <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9cd8:	68a0      	ldr	r0, [r4, #8]
    9cda:	4601      	mov	r1, r0
    9cdc:	2201      	movs	r2, #1
    9cde:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    9ce2:	2014      	movs	r0, #20
    9ce4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9ce8:	f7fd f83c 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9cec:	2000      	movs	r0, #0
    9cee:	bd38      	pop	{r3, r4, r5, pc}
    9cf0:	20000130 	.word	0x20000130
    9cf4:	b51c      	push	{r2, r3, r4, lr}
    9cf6:	4c13      	ldr	r4, [pc, #76]	; (9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
    9cf8:	68a0      	ldr	r0, [r4, #8]
    9cfa:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9cfe:	07c0      	lsls	r0, r0, #31
    9d00:	d001      	beq.n	9d06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
    9d02:	2001      	movs	r0, #1
    9d04:	bd1c      	pop	{r2, r3, r4, pc}
    9d06:	4669      	mov	r1, sp
    9d08:	6920      	ldr	r0, [r4, #16]
    9d0a:	f004 f9d1 	bl	e0b0 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9d0e:	f001 f9d5 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9d12:	f644 112f 	movw	r1, #18735	; 0x492f
    9d16:	4008      	ands	r0, r1
    9d18:	f89d 2000 	ldrb.w	r2, [sp]
    9d1c:	68a1      	ldr	r1, [r4, #8]
    9d1e:	4002      	ands	r2, r0
    9d20:	f801 2fbc 	strb.w	r2, [r1, #188]!
    9d24:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9d28:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9d2c:	7048      	strb	r0, [r1, #1]
    9d2e:	f7ff f875 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9d32:	68a0      	ldr	r0, [r4, #8]
    9d34:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9d38:	f041 0101 	orr.w	r1, r1, #1
    9d3c:	7001      	strb	r1, [r0, #0]
    9d3e:	2000      	movs	r0, #0
    9d40:	bd1c      	pop	{r2, r3, r4, pc}
    9d42:	0000      	.short	0x0000
    9d44:	20000130 	.word	0x20000130
    9d48:	4a0a      	ldr	r2, [pc, #40]	; (9d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    9d4a:	b510      	push	{r4, lr}
    9d4c:	6890      	ldr	r0, [r2, #8]
    9d4e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9d52:	070b      	lsls	r3, r1, #28
    9d54:	d501      	bpl.n	9d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
    9d56:	2001      	movs	r0, #1
    9d58:	bd10      	pop	{r4, pc}
    9d5a:	f041 0108 	orr.w	r1, r1, #8
    9d5e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9d62:	6911      	ldr	r1, [r2, #16]
    9d64:	78c9      	ldrb	r1, [r1, #3]
    9d66:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    9d6a:	f7ff f857 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9d6e:	2000      	movs	r0, #0
    9d70:	bd10      	pop	{r4, pc}
    9d72:	0000      	.short	0x0000
    9d74:	20000130 	.word	0x20000130
    9d78:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9d7c:	4c34      	ldr	r4, [pc, #208]	; (9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
    9d7e:	68a0      	ldr	r0, [r4, #8]
    9d80:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9d84:	f010 0f30 	tst.w	r0, #48	; 0x30
    9d88:	d002      	beq.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    9d8a:	2001      	movs	r0, #1
    9d8c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9d90:	6920      	ldr	r0, [r4, #16]
    9d92:	f004 f9a8 	bl	e0e6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9d96:	b318      	cbz	r0, 9de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    9d98:	6920      	ldr	r0, [r4, #16]
    9d9a:	f004 f996 	bl	e0ca <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9d9e:	4607      	mov	r7, r0
    9da0:	6920      	ldr	r0, [r4, #16]
    9da2:	f004 f996 	bl	e0d2 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9da6:	4606      	mov	r6, r0
    9da8:	6920      	ldr	r0, [r4, #16]
    9daa:	f004 f98c 	bl	e0c6 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9dae:	4605      	mov	r5, r0
    9db0:	6920      	ldr	r0, [r4, #16]
    9db2:	f004 f98c 	bl	e0ce <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9db6:	4601      	mov	r1, r0
    9db8:	9700      	str	r7, [sp, #0]
    9dba:	68a0      	ldr	r0, [r4, #8]
    9dbc:	4633      	mov	r3, r6
    9dbe:	462a      	mov	r2, r5
    9dc0:	302c      	adds	r0, #44	; 0x2c
    9dc2:	f004 fbe5 	bl	e590 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9dc6:	78a0      	ldrb	r0, [r4, #2]
    9dc8:	0780      	lsls	r0, r0, #30
    9dca:	d503      	bpl.n	9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
    9dcc:	68e0      	ldr	r0, [r4, #12]
    9dce:	78c0      	ldrb	r0, [r0, #3]
    9dd0:	2814      	cmp	r0, #20
    9dd2:	d009      	beq.n	9de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    9dd4:	68a0      	ldr	r0, [r4, #8]
    9dd6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9dda:	281c      	cmp	r0, #28
    9ddc:	d004      	beq.n	9de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    9dde:	e007      	b.n	9df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
    9de0:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9de4:	f7ff bfb0 	b.w	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9de8:	68a1      	ldr	r1, [r4, #8]
    9dea:	2001      	movs	r0, #1
    9dec:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9df0:	68a1      	ldr	r1, [r4, #8]
    9df2:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9df6:	2801      	cmp	r0, #1
    9df8:	d011      	beq.n	9e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    9dfa:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    9dfe:	f88d 0004 	strb.w	r0, [sp, #4]
    9e02:	9801      	ldr	r0, [sp, #4]
    9e04:	9001      	str	r0, [sp, #4]
    9e06:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9e0a:	b940      	cbnz	r0, 9e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    9e0c:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    9e10:	f88d 0000 	strb.w	r0, [sp]
    9e14:	9800      	ldr	r0, [sp, #0]
    9e16:	9000      	str	r0, [sp, #0]
    9e18:	f89d 0000 	ldrb.w	r0, [sp]
    9e1c:	b128      	cbz	r0, 9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
    9e1e:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    9e22:	f040 0010 	orr.w	r0, r0, #16
    9e26:	7008      	strb	r0, [r1, #0]
    9e28:	e00d      	b.n	9e46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    9e2a:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    9e2e:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    9e32:	f040 0020 	orr.w	r0, r0, #32
    9e36:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    9e3a:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9e3e:	f004 fbae 	bl	e59e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9e42:	f7fc ff8f 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9e46:	f7fe ffe9 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9e4a:	2000      	movs	r0, #0
    9e4c:	e79e      	b.n	9d8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    9e4e:	0000      	.short	0x0000
    9e50:	20000130 	.word	0x20000130
    9e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e56:	4c1a      	ldr	r4, [pc, #104]	; (9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
    9e58:	2301      	movs	r3, #1
    9e5a:	210a      	movs	r1, #10
    9e5c:	68a0      	ldr	r0, [r4, #8]
    9e5e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9e62:	3070      	adds	r0, #112	; 0x70
    9e64:	f003 febf 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e68:	b338      	cbz	r0, 9eba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
    9e6a:	6920      	ldr	r0, [r4, #16]
    9e6c:	f004 f93b 	bl	e0e6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9e70:	b1c8      	cbz	r0, 9ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
    9e72:	6920      	ldr	r0, [r4, #16]
    9e74:	f004 f929 	bl	e0ca <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9e78:	4607      	mov	r7, r0
    9e7a:	6920      	ldr	r0, [r4, #16]
    9e7c:	f004 f929 	bl	e0d2 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9e80:	4606      	mov	r6, r0
    9e82:	6920      	ldr	r0, [r4, #16]
    9e84:	f004 f91f 	bl	e0c6 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9e88:	4605      	mov	r5, r0
    9e8a:	6920      	ldr	r0, [r4, #16]
    9e8c:	f004 f91f 	bl	e0ce <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9e90:	4601      	mov	r1, r0
    9e92:	9700      	str	r7, [sp, #0]
    9e94:	68a0      	ldr	r0, [r4, #8]
    9e96:	4633      	mov	r3, r6
    9e98:	462a      	mov	r2, r5
    9e9a:	302c      	adds	r0, #44	; 0x2c
    9e9c:	f004 fb78 	bl	e590 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9ea0:	68a0      	ldr	r0, [r4, #8]
    9ea2:	f004 fae7 	bl	e474 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ea6:	68a1      	ldr	r1, [r4, #8]
    9ea8:	2000      	movs	r0, #0
    9eaa:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    9eae:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9eb2:	f7ff f977 	bl	91a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9eb6:	2000      	movs	r0, #0
    9eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9eba:	2001      	movs	r0, #1
    9ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ebe:	0000      	.short	0x0000
    9ec0:	20000130 	.word	0x20000130
    9ec4:	b510      	push	{r4, lr}
    9ec6:	4c09      	ldr	r4, [pc, #36]	; (9eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
    9ec8:	68a0      	ldr	r0, [r4, #8]
    9eca:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9ece:	0740      	lsls	r0, r0, #29
    9ed0:	d501      	bpl.n	9ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
    9ed2:	2001      	movs	r0, #1
    9ed4:	bd10      	pop	{r4, pc}
    9ed6:	f7fe ffa1 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9eda:	68a0      	ldr	r0, [r4, #8]
    9edc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9ee0:	f041 0104 	orr.w	r1, r1, #4
    9ee4:	7001      	strb	r1, [r0, #0]
    9ee6:	2000      	movs	r0, #0
    9ee8:	bd10      	pop	{r4, pc}
    9eea:	0000      	.short	0x0000
    9eec:	20000130 	.word	0x20000130
    9ef0:	b510      	push	{r4, lr}
    9ef2:	4c09      	ldr	r4, [pc, #36]	; (9f18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
    9ef4:	2301      	movs	r3, #1
    9ef6:	2109      	movs	r1, #9
    9ef8:	68a0      	ldr	r0, [r4, #8]
    9efa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9efe:	3070      	adds	r0, #112	; 0x70
    9f00:	f003 fe71 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f04:	2800      	cmp	r0, #0
    9f06:	d006      	beq.n	9f16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    9f08:	68a1      	ldr	r1, [r4, #8]
    9f0a:	2000      	movs	r0, #0
    9f0c:	f801 0fa2 	strb.w	r0, [r1, #162]!
    9f10:	7308      	strb	r0, [r1, #12]
    9f12:	f801 0c25 	strb.w	r0, [r1, #-37]
    9f16:	bd10      	pop	{r4, pc}
    9f18:	20000130 	.word	0x20000130
    9f1c:	b510      	push	{r4, lr}
    9f1e:	4c0f      	ldr	r4, [pc, #60]	; (9f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
    9f20:	2301      	movs	r3, #1
    9f22:	2100      	movs	r1, #0
    9f24:	68a0      	ldr	r0, [r4, #8]
    9f26:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9f2a:	3070      	adds	r0, #112	; 0x70
    9f2c:	f003 fe5b 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f30:	b138      	cbz	r0, 9f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    9f32:	f7fe ff73 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9f36:	68a1      	ldr	r1, [r4, #8]
    9f38:	2010      	movs	r0, #16
    9f3a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9f3e:	2000      	movs	r0, #0
    9f40:	bd10      	pop	{r4, pc}
    9f42:	68a0      	ldr	r0, [r4, #8]
    9f44:	2301      	movs	r3, #1
    9f46:	2105      	movs	r1, #5
    9f48:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9f4c:	3070      	adds	r0, #112	; 0x70
    9f4e:	f003 fe4a 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f52:	b108      	cbz	r0, 9f58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    9f54:	2008      	movs	r0, #8
    9f56:	bd10      	pop	{r4, pc}
    9f58:	2001      	movs	r0, #1
    9f5a:	bd10      	pop	{r4, pc}
    9f5c:	20000130 	.word	0x20000130
    9f60:	4806      	ldr	r0, [pc, #24]	; (9f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
    9f62:	6880      	ldr	r0, [r0, #8]
    9f64:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9f68:	2911      	cmp	r1, #17
    9f6a:	d001      	beq.n	9f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
    9f6c:	2002      	movs	r0, #2
    9f6e:	4770      	bx	lr
    9f70:	2112      	movs	r1, #18
    9f72:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9f76:	2000      	movs	r0, #0
    9f78:	4770      	bx	lr
    9f7a:	0000      	.short	0x0000
    9f7c:	20000130 	.word	0x20000130
    9f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f82:	4c34      	ldr	r4, [pc, #208]	; (a054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    9f84:	2301      	movs	r3, #1
    9f86:	210b      	movs	r1, #11
    9f88:	68a0      	ldr	r0, [r4, #8]
    9f8a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9f8e:	3070      	adds	r0, #112	; 0x70
    9f90:	f003 fe29 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f94:	bb78      	cbnz	r0, 9ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
    9f96:	68a0      	ldr	r0, [r4, #8]
    9f98:	2301      	movs	r3, #1
    9f9a:	2100      	movs	r1, #0
    9f9c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9fa0:	3070      	adds	r0, #112	; 0x70
    9fa2:	f003 fe20 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fa6:	b320      	cbz	r0, 9ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    9fa8:	68a0      	ldr	r0, [r4, #8]
    9faa:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9fae:	2824      	cmp	r0, #36	; 0x24
    9fb0:	d022      	beq.n	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9fb2:	6920      	ldr	r0, [r4, #16]
    9fb4:	f004 f8b3 	bl	e11e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9fb8:	b300      	cbz	r0, 9ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    9fba:	68a0      	ldr	r0, [r4, #8]
    9fbc:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9fc0:	f041 0104 	orr.w	r1, r1, #4
    9fc4:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    9fc8:	6921      	ldr	r1, [r4, #16]
    9fca:	794a      	ldrb	r2, [r1, #5]
    9fcc:	f002 0207 	and.w	r2, r2, #7
    9fd0:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    9fd4:	7909      	ldrb	r1, [r1, #4]
    9fd6:	f001 0107 	and.w	r1, r1, #7
    9fda:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    9fde:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    9fe2:	f88d 3000 	strb.w	r3, [sp]
    9fe6:	9b00      	ldr	r3, [sp, #0]
    9fe8:	9300      	str	r3, [sp, #0]
    9fea:	f89d 3000 	ldrb.w	r3, [sp]
    9fee:	bb43      	cbnz	r3, a042 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    9ff0:	e008      	b.n	a004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    9ff2:	2001      	movs	r0, #1
    9ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ff6:	e7ff      	b.n	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    9ff8:	2020      	movs	r0, #32
    9ffa:	e7fb      	b.n	9ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    9ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a000:	f7ff bea2 	b.w	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a004:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    a008:	2b01      	cmp	r3, #1
    a00a:	d01a      	beq.n	a042 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a00c:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    a010:	2501      	movs	r5, #1
    a012:	785e      	ldrb	r6, [r3, #1]
    a014:	428e      	cmp	r6, r1
    a016:	d106      	bne.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    a018:	7819      	ldrb	r1, [r3, #0]
    a01a:	4291      	cmp	r1, r2
    a01c:	d103      	bne.n	a026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    a01e:	2102      	movs	r1, #2
    a020:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    a024:	e00d      	b.n	a042 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a026:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    a02a:	8802      	ldrh	r2, [r0, #0]
    a02c:	f821 2902 	strh.w	r2, [r1], #-2
    a030:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    a034:	710a      	strb	r2, [r1, #4]
    a036:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    a03a:	7148      	strb	r0, [r1, #5]
    a03c:	700d      	strb	r5, [r1, #0]
    a03e:	f7fc fe91 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a042:	68a1      	ldr	r1, [r4, #8]
    a044:	2021      	movs	r0, #33	; 0x21
    a046:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a04a:	f7fe fee7 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a04e:	2000      	movs	r0, #0
    a050:	e7d0      	b.n	9ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a052:	0000      	.short	0x0000
    a054:	20000130 	.word	0x20000130
    a058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a05c:	4c4e      	ldr	r4, [pc, #312]	; (a198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a05e:	68a0      	ldr	r0, [r4, #8]
    a060:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a064:	2920      	cmp	r1, #32
    a066:	d009      	beq.n	a07c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
    a068:	f05f 0700 	movs.w	r7, #0
    a06c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a070:	2922      	cmp	r1, #34	; 0x22
    a072:	d005      	beq.n	a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
    a074:	b387      	cbz	r7, a0d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
    a076:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    a07a:	e003      	b.n	a084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    a07c:	2701      	movs	r7, #1
    a07e:	e7f5      	b.n	a06c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a080:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    a084:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    a088:	f041 0104 	orr.w	r1, r1, #4
    a08c:	7001      	strb	r1, [r0, #0]
    a08e:	6920      	ldr	r0, [r4, #16]
    a090:	f7fc fd54 	bl	6b3c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a094:	f04f 0801 	mov.w	r8, #1
    a098:	2600      	movs	r6, #0
    a09a:	b308      	cbz	r0, a0e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a09c:	4639      	mov	r1, r7
    a09e:	6920      	ldr	r0, [r4, #16]
    a0a0:	f7fe ff86 	bl	8fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
    a0a4:	b1e0      	cbz	r0, a0e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a0a6:	466a      	mov	r2, sp
    a0a8:	6921      	ldr	r1, [r4, #16]
    a0aa:	68a0      	ldr	r0, [r4, #8]
    a0ac:	f003 febf 	bl	de2e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a0b0:	b388      	cbz	r0, a116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    a0b2:	6920      	ldr	r0, [r4, #16]
    a0b4:	f004 f80f 	bl	e0d6 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a0b8:	68a1      	ldr	r1, [r4, #8]
    a0ba:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    a0be:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    a0c2:	f005 f959 	bl	f378 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a0c6:	b338      	cbz	r0, a118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
    a0c8:	68a0      	ldr	r0, [r4, #8]
    a0ca:	2128      	movs	r1, #40	; 0x28
    a0cc:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a0d0:	3076      	adds	r0, #118	; 0x76
    a0d2:	f880 801e 	strb.w	r8, [r0, #30]
    a0d6:	e053      	b.n	a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a0d8:	e7ff      	b.n	a0da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    a0da:	2002      	movs	r0, #2
    a0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0e0:	68a0      	ldr	r0, [r4, #8]
    a0e2:	f04f 0900 	mov.w	r9, #0
    a0e6:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a0ea:	2901      	cmp	r1, #1
    a0ec:	d015      	beq.n	a11a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    a0ee:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    a0f2:	b1f7      	cbz	r7, a132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a0f4:	6920      	ldr	r0, [r4, #16]
    a0f6:	68a1      	ldr	r1, [r4, #8]
    a0f8:	78c0      	ldrb	r0, [r0, #3]
    a0fa:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    a0fe:	fa08 f200 	lsl.w	r2, r8, r0
    a102:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a106:	b160      	cbz	r0, a122 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
    a108:	200a      	movs	r0, #10
    a10a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a10e:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    a112:	b9a0      	cbnz	r0, a13e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    a114:	e008      	b.n	a128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    a116:	e014      	b.n	a142 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a118:	e027      	b.n	a16a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
    a11a:	201e      	movs	r0, #30
    a11c:	f7ff fcec 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a120:	e7e7      	b.n	a0f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
    a122:	f240 31cb 	movw	r1, #971	; 0x3cb
    a126:	e001      	b.n	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
    a128:	f240 31d3 	movw	r1, #979	; 0x3d3
    a12c:	2031      	movs	r0, #49	; 0x31
    a12e:	f7fa fc8d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a132:	702e      	strb	r6, [r5, #0]
    a134:	f7fe fe7e 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a138:	f7ff fe06 	bl	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a13c:	4681      	mov	r9, r0
    a13e:	4648      	mov	r0, r9
    a140:	e7cc      	b.n	a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    a142:	68a0      	ldr	r0, [r4, #8]
    a144:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a148:	2901      	cmp	r1, #1
    a14a:	d009      	beq.n	a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
    a14c:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    a150:	68a0      	ldr	r0, [r4, #8]
    a152:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    a156:	428d      	cmp	r5, r1
    a158:	d112      	bne.n	a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a15a:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    a15e:	e00f      	b.n	a180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a160:	2000      	movs	r0, #0
    a162:	f7ff fcc9 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a166:	702e      	strb	r6, [r5, #0]
    a168:	e7f2      	b.n	a150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
    a16a:	68a0      	ldr	r0, [r4, #8]
    a16c:	f89d 1000 	ldrb.w	r1, [sp]
    a170:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    a174:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a178:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    a17c:	2024      	movs	r0, #36	; 0x24
    a17e:	7028      	strb	r0, [r5, #0]
    a180:	68a0      	ldr	r0, [r4, #8]
    a182:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    a186:	428d      	cmp	r5, r1
    a188:	d102      	bne.n	a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    a18a:	f7fe fe53 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a18e:	e001      	b.n	a194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    a190:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    a194:	2000      	movs	r0, #0
    a196:	e7a1      	b.n	a0dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    a198:	20000130 	.word	0x20000130
    a19c:	b510      	push	{r4, lr}
    a19e:	4c0a      	ldr	r4, [pc, #40]	; (a1c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    a1a0:	68a0      	ldr	r0, [r4, #8]
    a1a2:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    a1a6:	f041 0104 	orr.w	r1, r1, #4
    a1aa:	7001      	strb	r1, [r0, #0]
    a1ac:	6920      	ldr	r0, [r4, #16]
    a1ae:	f003 ffc0 	bl	e132 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a1b2:	2816      	cmp	r0, #22
    a1b4:	d001      	beq.n	a1ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    a1b6:	2000      	movs	r0, #0
    a1b8:	bd10      	pop	{r4, pc}
    a1ba:	6920      	ldr	r0, [r4, #16]
    a1bc:	f003 ffbb 	bl	e136 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a1c4:	f7fe be08 	b.w	8dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    a1c8:	20000130 	.word	0x20000130
    a1cc:	4802      	ldr	r0, [pc, #8]	; (a1d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
    a1ce:	6900      	ldr	r0, [r0, #16]
    a1d0:	7900      	ldrb	r0, [r0, #4]
    a1d2:	f7fe be01 	b.w	8dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    a1d6:	0000      	.short	0x0000
    a1d8:	20000130 	.word	0x20000130
    a1dc:	b510      	push	{r4, lr}
    a1de:	4c08      	ldr	r4, [pc, #32]	; (a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
    a1e0:	68a0      	ldr	r0, [r4, #8]
    a1e2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    a1e6:	2817      	cmp	r0, #23
    a1e8:	d001      	beq.n	a1ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
    a1ea:	2002      	movs	r0, #2
    a1ec:	bd10      	pop	{r4, pc}
    a1ee:	f7fe fe21 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a1f2:	68a1      	ldr	r1, [r4, #8]
    a1f4:	201b      	movs	r0, #27
    a1f6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a1fa:	2000      	movs	r0, #0
    a1fc:	bd10      	pop	{r4, pc}
    a1fe:	0000      	.short	0x0000
    a200:	20000130 	.word	0x20000130
    a204:	b510      	push	{r4, lr}
    a206:	4c0b      	ldr	r4, [pc, #44]	; (a234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a208:	2301      	movs	r3, #1
    a20a:	4619      	mov	r1, r3
    a20c:	68a0      	ldr	r0, [r4, #8]
    a20e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a212:	3070      	adds	r0, #112	; 0x70
    a214:	f003 fce7 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a218:	b108      	cbz	r0, a21e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
    a21a:	2000      	movs	r0, #0
    a21c:	bd10      	pop	{r4, pc}
    a21e:	6920      	ldr	r0, [r4, #16]
    a220:	f003 ff5d 	bl	e0de <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a224:	68a1      	ldr	r1, [r4, #8]
    a226:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    a22a:	2007      	movs	r0, #7
    a22c:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a230:	e7f3      	b.n	a21a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
    a232:	0000      	.short	0x0000
    a234:	20000130 	.word	0x20000130
    a238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a23c:	4d37      	ldr	r5, [pc, #220]	; (a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    a23e:	2600      	movs	r6, #0
    a240:	4628      	mov	r0, r5
    a242:	68a9      	ldr	r1, [r5, #8]
    a244:	6900      	ldr	r0, [r0, #16]
    a246:	2701      	movs	r7, #1
    a248:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    a24c:	7900      	ldrb	r0, [r0, #4]
    a24e:	2b0e      	cmp	r3, #14
    a250:	d101      	bne.n	a256 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    a252:	2812      	cmp	r0, #18
    a254:	d006      	beq.n	a264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    a256:	4a31      	ldr	r2, [pc, #196]	; (a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    a258:	2400      	movs	r4, #0
    a25a:	6892      	ldr	r2, [r2, #8]
    a25c:	32bc      	adds	r2, #188	; 0xbc
    a25e:	2b1c      	cmp	r3, #28
    a260:	d004      	beq.n	a26c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
    a262:	e005      	b.n	a270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
    a264:	f7ff fe44 	bl	9ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
    a268:	4606      	mov	r6, r0
    a26a:	e053      	b.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a26c:	2814      	cmp	r0, #20
    a26e:	d002      	beq.n	a276 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
    a270:	2b04      	cmp	r3, #4
    a272:	d00b      	beq.n	a28c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    a274:	e00c      	b.n	a290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
    a276:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    a27a:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    a27e:	2105      	movs	r1, #5
    a280:	4610      	mov	r0, r2
    a282:	f005 f80a 	bl	f29a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    a286:	f7fe ff8d 	bl	91a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    a28a:	e043      	b.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a28c:	280e      	cmp	r0, #14
    a28e:	d002      	beq.n	a296 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    a290:	2b20      	cmp	r3, #32
    a292:	d00f      	beq.n	a2b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    a294:	e010      	b.n	a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
    a296:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    a29a:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    a29e:	8808      	ldrh	r0, [r1, #0]
    a2a0:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    a2a4:	201a      	movs	r0, #26
    a2a6:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    a2aa:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    a2ae:	f7fc fd59 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a2b2:	e02f      	b.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a2b4:	2816      	cmp	r0, #22
    a2b6:	d006      	beq.n	a2c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    a2b8:	2b26      	cmp	r3, #38	; 0x26
    a2ba:	d101      	bne.n	a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    a2bc:	2816      	cmp	r0, #22
    a2be:	d002      	beq.n	a2c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    a2c0:	2817      	cmp	r0, #23
    a2c2:	d014      	beq.n	a2ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
    a2c4:	e026      	b.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a2c6:	f801 4f7d 	strb.w	r4, [r1, #125]!
    a2ca:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a2ce:	7848      	ldrb	r0, [r1, #1]
    a2d0:	2821      	cmp	r0, #33	; 0x21
    a2d2:	d01f      	beq.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a2d4:	2108      	movs	r1, #8
    a2d6:	4610      	mov	r0, r2
    a2d8:	f004 ffdf 	bl	f29a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    a2dc:	68a8      	ldr	r0, [r5, #8]
    a2de:	210b      	movs	r1, #11
    a2e0:	30bc      	adds	r0, #188	; 0xbc
    a2e2:	f004 ffda 	bl	f29a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    a2e6:	201a      	movs	r0, #26
    a2e8:	f7ff fc06 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a2ec:	e012      	b.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a2ee:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    a2f2:	2822      	cmp	r0, #34	; 0x22
    a2f4:	d10e      	bne.n	a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a2f6:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    a2fa:	f7fe fd9b 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a2fe:	68a8      	ldr	r0, [r5, #8]
    a300:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    a304:	2801      	cmp	r0, #1
    a306:	d102      	bne.n	a30e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
    a308:	2000      	movs	r0, #0
    a30a:	f7ff fbf5 	bl	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a30e:	68a8      	ldr	r0, [r5, #8]
    a310:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    a314:	4630      	mov	r0, r6
    a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a31a:	0000      	.short	0x0000
    a31c:	20000130 	.word	0x20000130
    a320:	b570      	push	{r4, r5, r6, lr}
    a322:	4c2c      	ldr	r4, [pc, #176]	; (a3d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    a324:	68a0      	ldr	r0, [r4, #8]
    a326:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a32a:	0789      	lsls	r1, r1, #30
    a32c:	d507      	bpl.n	a33e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
    a32e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a332:	2301      	movs	r3, #1
    a334:	2108      	movs	r1, #8
    a336:	3070      	adds	r0, #112	; 0x70
    a338:	f003 fc55 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a33c:	b1e8      	cbz	r0, a37a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
    a33e:	68a0      	ldr	r0, [r4, #8]
    a340:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    a344:	0780      	lsls	r0, r0, #30
    a346:	d412      	bmi.n	a36e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
    a348:	6920      	ldr	r0, [r4, #16]
    a34a:	f003 feca 	bl	e0e2 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a34e:	68a1      	ldr	r1, [r4, #8]
    a350:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    a354:	6920      	ldr	r0, [r4, #16]
    a356:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a35a:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    a35e:	8840      	ldrh	r0, [r0, #2]
    a360:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    a364:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    a368:	f040 0002 	orr.w	r0, r0, #2
    a36c:	7008      	strb	r0, [r1, #0]
    a36e:	68a0      	ldr	r0, [r4, #8]
    a370:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a374:	07c9      	lsls	r1, r1, #31
    a376:	d002      	beq.n	a37e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a378:	e010      	b.n	a39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
    a37a:	2001      	movs	r0, #1
    a37c:	bd70      	pop	{r4, r5, r6, pc}
    a37e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a382:	078a      	lsls	r2, r1, #30
    a384:	d504      	bpl.n	a390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    a386:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    a38a:	2031      	movs	r0, #49	; 0x31
    a38c:	f7fa fb5e 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a390:	f041 0102 	orr.w	r1, r1, #2
    a394:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a398:	f7fe fd40 	bl	8e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a39c:	68a0      	ldr	r0, [r4, #8]
    a39e:	2500      	movs	r5, #0
    a3a0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a3a4:	2906      	cmp	r1, #6
    a3a6:	d105      	bne.n	a3b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
    a3a8:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    a3ac:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a3b0:	f7fc fcd8 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3b4:	68a0      	ldr	r0, [r4, #8]
    a3b6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a3ba:	b149      	cbz	r1, a3d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a3bc:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a3c0:	f7fc fcd0 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a3c4:	68a0      	ldr	r0, [r4, #8]
    a3c6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a3ca:	b909      	cbnz	r1, a3d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a3cc:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a3d0:	2000      	movs	r0, #0
    a3d2:	bd70      	pop	{r4, r5, r6, pc}
    a3d4:	20000130 	.word	0x20000130
    a3d8:	b510      	push	{r4, lr}
    a3da:	4c1f      	ldr	r4, [pc, #124]	; (a458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
    a3dc:	68a3      	ldr	r3, [r4, #8]
    a3de:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a3e2:	2808      	cmp	r0, #8
    a3e4:	d20e      	bcs.n	a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    a3e6:	f100 0208 	add.w	r2, r0, #8
    a3ea:	f1c0 0008 	rsb	r0, r0, #8
    a3ee:	b2c1      	uxtb	r1, r0
    a3f0:	1898      	adds	r0, r3, r2
    a3f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    a3f6:	f7fa fbb5 	bl	4b64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a3fa:	68a1      	ldr	r1, [r4, #8]
    a3fc:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a400:	4410      	add	r0, r2
    a402:	7008      	strb	r0, [r1, #0]
    a404:	68a3      	ldr	r3, [r4, #8]
    a406:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a40a:	3808      	subs	r0, #8
    a40c:	2804      	cmp	r0, #4
    a40e:	d20c      	bcs.n	a42a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x185a>
    a410:	1d02      	adds	r2, r0, #4
    a412:	f1c0 0004 	rsb	r0, r0, #4
    a416:	b2c1      	uxtb	r1, r0
    a418:	1898      	adds	r0, r3, r2
    a41a:	30e0      	adds	r0, #224	; 0xe0
    a41c:	f7fa fba2 	bl	4b64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a420:	68a1      	ldr	r1, [r4, #8]
    a422:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a426:	4410      	add	r0, r2
    a428:	7008      	strb	r0, [r1, #0]
    a42a:	68a0      	ldr	r0, [r4, #8]
    a42c:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a430:	290c      	cmp	r1, #12
    a432:	d30f      	bcc.n	a454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>
    a434:	d005      	beq.n	a442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1872>
    a436:	f240 71bf 	movw	r1, #1983	; 0x7bf
    a43a:	f04f 0031 	mov.w	r0, #49	; 0x31
    a43e:	f7fa fb05 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a442:	2100      	movs	r1, #0
    a444:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    a448:	2101      	movs	r1, #1
    a44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a44e:	2004      	movs	r0, #4
    a450:	f7ff ba54 	b.w	98fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a454:	bd10      	pop	{r4, pc}
    a456:	0000      	.short	0x0000
    a458:	20000130 	.word	0x20000130
    a45c:	4804      	ldr	r0, [pc, #16]	; (a470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a0>)
    a45e:	2127      	movs	r1, #39	; 0x27
    a460:	6880      	ldr	r0, [r0, #8]
    a462:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a466:	2100      	movs	r1, #0
    a468:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    a46c:	4770      	bx	lr
    a46e:	0000      	.short	0x0000
    a470:	20000130 	.word	0x20000130
    a474:	4809      	ldr	r0, [pc, #36]	; (a49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18cc>)
    a476:	b510      	push	{r4, lr}
    a478:	6880      	ldr	r0, [r0, #8]
    a47a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a47e:	2914      	cmp	r1, #20
    a480:	d004      	beq.n	a48c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    a482:	f240 619a 	movw	r1, #1690	; 0x69a
    a486:	2031      	movs	r0, #49	; 0x31
    a488:	f7fa fae0 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a48c:	2101      	movs	r1, #1
    a48e:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a492:	2115      	movs	r1, #21
    a494:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a498:	bd10      	pop	{r4, pc}
    a49a:	0000      	.short	0x0000
    a49c:	20000130 	.word	0x20000130
    a4a0:	b510      	push	{r4, lr}
    a4a2:	4c0a      	ldr	r4, [pc, #40]	; (a4cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>)
    a4a4:	68a0      	ldr	r0, [r4, #8]
    a4a6:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a4aa:	07c0      	lsls	r0, r0, #31
    a4ac:	d008      	beq.n	a4c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    a4ae:	f7fe fcc1 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a4b2:	68a0      	ldr	r0, [r4, #8]
    a4b4:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a4b8:	f021 0101 	bic.w	r1, r1, #1
    a4bc:	7001      	strb	r1, [r0, #0]
    a4be:	bd10      	pop	{r4, pc}
    a4c0:	f240 6183 	movw	r1, #1667	; 0x683
    a4c4:	2031      	movs	r0, #49	; 0x31
    a4c6:	f7fa fac1 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4ca:	0000      	.short	0x0000
    a4cc:	20000130 	.word	0x20000130
    a4d0:	b510      	push	{r4, lr}
    a4d2:	4c0a      	ldr	r4, [pc, #40]	; (a4fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>)
    a4d4:	2301      	movs	r3, #1
    a4d6:	2100      	movs	r1, #0
    a4d8:	68a0      	ldr	r0, [r4, #8]
    a4da:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a4de:	3070      	adds	r0, #112	; 0x70
    a4e0:	f003 fb81 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4e4:	b120      	cbz	r0, a4f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    a4e6:	68a1      	ldr	r1, [r4, #8]
    a4e8:	201c      	movs	r0, #28
    a4ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a4ee:	bd10      	pop	{r4, pc}
    a4f0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    a4f4:	2031      	movs	r0, #49	; 0x31
    a4f6:	f7fa faa9 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a4fa:	0000      	.short	0x0000
    a4fc:	20000130 	.word	0x20000130
    a500:	480a      	ldr	r0, [pc, #40]	; (a52c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>)
    a502:	b510      	push	{r4, lr}
    a504:	6880      	ldr	r0, [r0, #8]
    a506:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a50a:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a50e:	2a01      	cmp	r2, #1
    a510:	d004      	beq.n	a51c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    a512:	f240 710f 	movw	r1, #1807	; 0x70f
    a516:	2031      	movs	r0, #49	; 0x31
    a518:	f7fa fa98 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a51c:	f021 0110 	bic.w	r1, r1, #16
    a520:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a528:	f7fe bc84 	b.w	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a52c:	20000130 	.word	0x20000130
    a530:	b510      	push	{r4, lr}
    a532:	4c0a      	ldr	r4, [pc, #40]	; (a55c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>)
    a534:	2301      	movs	r3, #1
    a536:	2100      	movs	r1, #0
    a538:	68a0      	ldr	r0, [r4, #8]
    a53a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a53e:	3070      	adds	r0, #112	; 0x70
    a540:	f003 fb51 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a544:	b120      	cbz	r0, a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
    a546:	68a1      	ldr	r1, [r4, #8]
    a548:	200e      	movs	r0, #14
    a54a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a54e:	bd10      	pop	{r4, pc}
    a550:	f240 61fb 	movw	r1, #1787	; 0x6fb
    a554:	2031      	movs	r0, #49	; 0x31
    a556:	f7fa fa79 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a55a:	0000      	.short	0x0000
    a55c:	20000130 	.word	0x20000130
    a560:	4804      	ldr	r0, [pc, #16]	; (a574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a4>)
    a562:	6880      	ldr	r0, [r0, #8]
    a564:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a568:	f021 0104 	bic.w	r1, r1, #4
    a56c:	7001      	strb	r1, [r0, #0]
    a56e:	f7fe bc61 	b.w	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a572:	0000      	.short	0x0000
    a574:	20000130 	.word	0x20000130
    a578:	4809      	ldr	r0, [pc, #36]	; (a5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>)
    a57a:	b510      	push	{r4, lr}
    a57c:	6880      	ldr	r0, [r0, #8]
    a57e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a582:	2910      	cmp	r1, #16
    a584:	d004      	beq.n	a590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
    a586:	f240 6192 	movw	r1, #1682	; 0x692
    a58a:	2031      	movs	r0, #49	; 0x31
    a58c:	f7fa fa5e 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a590:	2101      	movs	r1, #1
    a592:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a596:	2111      	movs	r1, #17
    a598:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a59c:	bd10      	pop	{r4, pc}
    a59e:	0000      	.short	0x0000
    a5a0:	20000130 	.word	0x20000130
    a5a4:	b510      	push	{r4, lr}
    a5a6:	4c0a      	ldr	r4, [pc, #40]	; (a5d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>)
    a5a8:	2301      	movs	r3, #1
    a5aa:	2100      	movs	r1, #0
    a5ac:	68a0      	ldr	r0, [r4, #8]
    a5ae:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a5b2:	3070      	adds	r0, #112	; 0x70
    a5b4:	f003 fb17 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a5b8:	b120      	cbz	r0, a5c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    a5ba:	68a1      	ldr	r1, [r4, #8]
    a5bc:	201f      	movs	r0, #31
    a5be:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a5c2:	bd10      	pop	{r4, pc}
    a5c4:	f240 711b 	movw	r1, #1819	; 0x71b
    a5c8:	2031      	movs	r0, #49	; 0x31
    a5ca:	f7fa fa3f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ce:	0000      	.short	0x0000
    a5d0:	20000130 	.word	0x20000130
    a5d4:	4808      	ldr	r0, [pc, #32]	; (a5f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a28>)
    a5d6:	b510      	push	{r4, lr}
    a5d8:	6880      	ldr	r0, [r0, #8]
    a5da:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a5de:	2921      	cmp	r1, #33	; 0x21
    a5e0:	d005      	beq.n	a5ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    a5e2:	b121      	cbz	r1, a5ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    a5e4:	f240 7122 	movw	r1, #1826	; 0x722
    a5e8:	2031      	movs	r0, #49	; 0x31
    a5ea:	f7fa fa2f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ee:	2122      	movs	r1, #34	; 0x22
    a5f0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a5f4:	bd10      	pop	{r4, pc}
    a5f6:	0000      	.short	0x0000
    a5f8:	20000130 	.word	0x20000130
    a5fc:	4807      	ldr	r0, [pc, #28]	; (a61c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>)
    a5fe:	b510      	push	{r4, lr}
    a600:	6880      	ldr	r0, [r0, #8]
    a602:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a606:	2915      	cmp	r1, #21
    a608:	d004      	beq.n	a614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a44>
    a60a:	f240 61a7 	movw	r1, #1703	; 0x6a7
    a60e:	2031      	movs	r0, #49	; 0x31
    a610:	f7fa fa1c 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a614:	2119      	movs	r1, #25
    a616:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a61a:	bd10      	pop	{r4, pc}
    a61c:	20000130 	.word	0x20000130
    a620:	4807      	ldr	r0, [pc, #28]	; (a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>)
    a622:	b510      	push	{r4, lr}
    a624:	6880      	ldr	r0, [r0, #8]
    a626:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a62a:	2915      	cmp	r1, #21
    a62c:	d004      	beq.n	a638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
    a62e:	f240 61a1 	movw	r1, #1697	; 0x6a1
    a632:	2031      	movs	r0, #49	; 0x31
    a634:	f7fa fa0a 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a638:	2117      	movs	r1, #23
    a63a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a63e:	bd10      	pop	{r4, pc}
    a640:	20000130 	.word	0x20000130
    a644:	b570      	push	{r4, r5, r6, lr}
    a646:	4d1b      	ldr	r5, [pc, #108]	; (a6b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>)
    a648:	68a8      	ldr	r0, [r5, #8]
    a64a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a64e:	291b      	cmp	r1, #27
    a650:	d002      	beq.n	a658 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    a652:	f240 61c1 	movw	r1, #1729	; 0x6c1
    a656:	e007      	b.n	a668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    a658:	2400      	movs	r4, #0
    a65a:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    a65e:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a662:	b121      	cbz	r1, a66e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    a664:	f240 61c5 	movw	r1, #1733	; 0x6c5
    a668:	2031      	movs	r0, #49	; 0x31
    a66a:	f7fa f9ef 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a66e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a672:	b141      	cbz	r1, a686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
    a674:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    a678:	8801      	ldrh	r1, [r0, #0]
    a67a:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a67e:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a682:	210c      	movs	r1, #12
    a684:	e008      	b.n	a698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
    a686:	8801      	ldrh	r1, [r0, #0]
    a688:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a68c:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a690:	2101      	movs	r1, #1
    a692:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    a696:	210b      	movs	r1, #11
    a698:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    a69c:	8800      	ldrh	r0, [r0, #0]
    a69e:	f7fa fdef 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a6a2:	f002 ff15 	bl	d4d0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a6a6:	f7fc fb5d 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a6aa:	68a8      	ldr	r0, [r5, #8]
    a6ac:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    a6b0:	bd70      	pop	{r4, r5, r6, pc}
    a6b2:	0000      	.short	0x0000
    a6b4:	20000130 	.word	0x20000130
    a6b8:	b510      	push	{r4, lr}
    a6ba:	4c08      	ldr	r4, [pc, #32]	; (a6dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    a6bc:	2301      	movs	r3, #1
    a6be:	4619      	mov	r1, r3
    a6c0:	68a0      	ldr	r0, [r4, #8]
    a6c2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a6c6:	3070      	adds	r0, #112	; 0x70
    a6c8:	f003 fa8d 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a6cc:	2800      	cmp	r0, #0
    a6ce:	d103      	bne.n	a6d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    a6d0:	68a1      	ldr	r1, [r4, #8]
    a6d2:	2008      	movs	r0, #8
    a6d4:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a6d8:	bd10      	pop	{r4, pc}
    a6da:	0000      	.short	0x0000
    a6dc:	20000130 	.word	0x20000130
    a6e0:	4814      	ldr	r0, [pc, #80]	; (a734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>)
    a6e2:	b510      	push	{r4, lr}
    a6e4:	68c1      	ldr	r1, [r0, #12]
    a6e6:	6880      	ldr	r0, [r0, #8]
    a6e8:	7909      	ldrb	r1, [r1, #4]
    a6ea:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a6ee:	2a0a      	cmp	r2, #10
    a6f0:	d109      	bne.n	a706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a6f2:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    a6f6:	428a      	cmp	r2, r1
    a6f8:	d105      	bne.n	a706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a6fa:	2100      	movs	r1, #0
    a6fc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a700:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a704:	bd10      	pop	{r4, pc}
    a706:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a70a:	0713      	lsls	r3, r2, #28
    a70c:	d507      	bpl.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4e>
    a70e:	f022 0108 	bic.w	r1, r2, #8
    a712:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a71a:	f7fe bb8b 	b.w	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a71e:	29ff      	cmp	r1, #255	; 0xff
    a720:	d004      	beq.n	a72c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5c>
    a722:	f240 617d 	movw	r1, #1661	; 0x67d
    a726:	2031      	movs	r0, #49	; 0x31
    a728:	f7fa f990 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a730:	f7ff be94 	b.w	a45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    a734:	20000130 	.word	0x20000130
    a738:	b510      	push	{r4, lr}
    a73a:	4c15      	ldr	r4, [pc, #84]	; (a790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc0>)
    a73c:	68a0      	ldr	r0, [r4, #8]
    a73e:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a742:	0789      	lsls	r1, r1, #30
    a744:	d411      	bmi.n	a76a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9a>
    a746:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a74a:	2301      	movs	r3, #1
    a74c:	2100      	movs	r1, #0
    a74e:	3070      	adds	r0, #112	; 0x70
    a750:	f003 fa49 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a754:	b120      	cbz	r0, a760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b90>
    a756:	68a1      	ldr	r1, [r4, #8]
    a758:	2006      	movs	r0, #6
    a75a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a75e:	e009      	b.n	a774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    a760:	f240 61e7 	movw	r1, #1767	; 0x6e7
    a764:	2031      	movs	r0, #49	; 0x31
    a766:	f7fa f971 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a76a:	2100      	movs	r1, #0
    a76c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a770:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    a774:	68a0      	ldr	r0, [r4, #8]
    a776:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a77a:	0780      	lsls	r0, r0, #30
    a77c:	d507      	bpl.n	a78e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    a77e:	f7fe fb59 	bl	8e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a782:	68a0      	ldr	r0, [r4, #8]
    a784:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a788:	f021 0102 	bic.w	r1, r1, #2
    a78c:	7001      	strb	r1, [r0, #0]
    a78e:	bd10      	pop	{r4, pc}
    a790:	20000130 	.word	0x20000130
    a794:	4808      	ldr	r0, [pc, #32]	; (a7b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    a796:	b510      	push	{r4, lr}
    a798:	6880      	ldr	r0, [r0, #8]
    a79a:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    a79e:	b941      	cbnz	r1, a7b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be2>
    a7a0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a7a4:	2301      	movs	r3, #1
    a7a6:	2106      	movs	r1, #6
    a7a8:	3070      	adds	r0, #112	; 0x70
    a7aa:	f003 fa1c 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7ae:	2800      	cmp	r0, #0
    a7b0:	d000      	beq.n	a7b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be4>
    a7b2:	2001      	movs	r0, #1
    a7b4:	bd10      	pop	{r4, pc}
    a7b6:	0000      	.short	0x0000
    a7b8:	20000130 	.word	0x20000130
    a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7be:	4c59      	ldr	r4, [pc, #356]	; (a924 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d54>)
    a7c0:	4606      	mov	r6, r0
    a7c2:	4615      	mov	r5, r2
    a7c4:	68a0      	ldr	r0, [r4, #8]
    a7c6:	b109      	cbz	r1, a7cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    a7c8:	2100      	movs	r1, #0
    a7ca:	e004      	b.n	a7d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
    a7cc:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    a7d0:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    a7d4:	4411      	add	r1, r2
    a7d6:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    a7da:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    a7de:	f88d 1000 	strb.w	r1, [sp]
    a7e2:	9900      	ldr	r1, [sp, #0]
    a7e4:	9100      	str	r1, [sp, #0]
    a7e6:	f89d 1000 	ldrb.w	r1, [sp]
    a7ea:	b939      	cbnz	r1, a7fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    a7ec:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a7f0:	2301      	movs	r3, #1
    a7f2:	4619      	mov	r1, r3
    a7f4:	3070      	adds	r0, #112	; 0x70
    a7f6:	f003 f9f6 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7fa:	b130      	cbz	r0, a80a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    a7fc:	68a0      	ldr	r0, [r4, #8]
    a7fe:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    a802:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    a806:	4411      	add	r1, r2
    a808:	8001      	strh	r1, [r0, #0]
    a80a:	68a0      	ldr	r0, [r4, #8]
    a80c:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    a810:	b132      	cbz	r2, a820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c50>
    a812:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    a816:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    a81a:	4419      	add	r1, r3
    a81c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    a820:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    a824:	2b00      	cmp	r3, #0
    a826:	dd06      	ble.n	a836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
    a828:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    a82c:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    a830:	4439      	add	r1, r7
    a832:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    a836:	2101      	movs	r1, #1
    a838:	273d      	movs	r7, #61	; 0x3d
    a83a:	b116      	cbz	r6, a842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    a83c:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    a840:	e012      	b.n	a868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a842:	7824      	ldrb	r4, [r4, #0]
    a844:	2c02      	cmp	r4, #2
    a846:	d009      	beq.n	a85c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8c>
    a848:	2c01      	cmp	r4, #1
    a84a:	d011      	beq.n	a870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
    a84c:	b33d      	cbz	r5, a89e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cce>
    a84e:	f100 0294 	add.w	r2, r0, #148	; 0x94
    a852:	7011      	strb	r1, [r2, #0]
    a854:	06e9      	lsls	r1, r5, #27
    a856:	d50e      	bpl.n	a876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca6>
    a858:	211e      	movs	r1, #30
    a85a:	e018      	b.n	a88e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    a85c:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    a860:	2a06      	cmp	r2, #6
    a862:	d044      	beq.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a864:	2216      	movs	r2, #22
    a866:	e042      	b.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a868:	f100 0294 	add.w	r2, r0, #148	; 0x94
    a86c:	7011      	strb	r1, [r2, #0]
    a86e:	e047      	b.n	a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a870:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    a874:	e03b      	b.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a876:	0729      	lsls	r1, r5, #28
    a878:	d502      	bpl.n	a880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    a87a:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    a87e:	e03f      	b.n	a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a880:	06a9      	lsls	r1, r5, #26
    a882:	d501      	bpl.n	a888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb8>
    a884:	2123      	movs	r1, #35	; 0x23
    a886:	e002      	b.n	a88e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    a888:	07a9      	lsls	r1, r5, #30
    a88a:	d003      	beq.n	a894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>
    a88c:	212a      	movs	r1, #42	; 0x2a
    a88e:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a892:	e035      	b.n	a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a894:	f640 41c1 	movw	r1, #3265	; 0xcc1
    a898:	2031      	movs	r0, #49	; 0x31
    a89a:	f7fa f8d7 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a89e:	b12a      	cbz	r2, a8ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cdc>
    a8a0:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    a8a4:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    a8a8:	42a2      	cmp	r2, r4
    a8aa:	d216      	bcs.n	a8da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	dd05      	ble.n	a8bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>
    a8b0:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    a8b4:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    a8b8:	429a      	cmp	r2, r3
    a8ba:	d20e      	bcs.n	a8da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    a8bc:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    a8c0:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    a8c4:	4293      	cmp	r3, r2
    a8c6:	d30a      	bcc.n	a8de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    a8c8:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a8cc:	f88d 3000 	strb.w	r3, [sp]
    a8d0:	9b00      	ldr	r3, [sp, #0]
    a8d2:	9300      	str	r3, [sp, #0]
    a8d4:	f89d 3000 	ldrb.w	r3, [sp]
    a8d8:	b10b      	cbz	r3, a8de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    a8da:	2222      	movs	r2, #34	; 0x22
    a8dc:	e007      	b.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a8de:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    a8e2:	b13b      	cbz	r3, a8f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d24>
    a8e4:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    a8e8:	4293      	cmp	r3, r2
    a8ea:	d309      	bcc.n	a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a8ec:	2208      	movs	r2, #8
    a8ee:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    a8f2:	e7b9      	b.n	a868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    a8f4:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    a8f8:	2a06      	cmp	r2, #6
    a8fa:	d301      	bcc.n	a900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    a8fc:	223e      	movs	r2, #62	; 0x3e
    a8fe:	e7f6      	b.n	a8ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    a900:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    a904:	f88d 1000 	strb.w	r1, [sp]
    a908:	9900      	ldr	r1, [sp, #0]
    a90a:	9100      	str	r1, [sp, #0]
    a90c:	f89d 1000 	ldrb.w	r1, [sp]
    a910:	b119      	cbz	r1, a91a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4a>
    a912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a916:	f004 bcff 	b.w	f318 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    a91a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a91e:	2100      	movs	r1, #0
    a920:	f7fd bbfe 	b.w	8120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    a924:	20000130 	.word	0x20000130
    a928:	b570      	push	{r4, r5, r6, lr}
    a92a:	4d2d      	ldr	r5, [pc, #180]	; (a9e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e10>)
    a92c:	68a8      	ldr	r0, [r5, #8]
    a92e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    a932:	b151      	cbz	r1, a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    a934:	2901      	cmp	r1, #1
    a936:	d008      	beq.n	a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    a938:	2902      	cmp	r1, #2
    a93a:	d009      	beq.n	a950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    a93c:	2903      	cmp	r1, #3
    a93e:	d007      	beq.n	a950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    a940:	f640 217f 	movw	r1, #2687	; 0xa7f
    a944:	2031      	movs	r0, #49	; 0x31
    a946:	f7fa f881 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a94a:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    a94e:	e035      	b.n	a9bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dec>
    a950:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    a954:	2908      	cmp	r1, #8
    a956:	d034      	beq.n	a9c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    a958:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    a95c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    a960:	2400      	movs	r4, #0
    a962:	1c8b      	adds	r3, r1, #2
    a964:	429a      	cmp	r2, r3
    a966:	d306      	bcc.n	a976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    a968:	1a51      	subs	r1, r2, r1
    a96a:	1e89      	subs	r1, r1, #2
    a96c:	040c      	lsls	r4, r1, #16
    a96e:	0c24      	lsrs	r4, r4, #16
    a970:	d001      	beq.n	a976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    a972:	1e64      	subs	r4, r4, #1
    a974:	b2a4      	uxth	r4, r4
    a976:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    a97a:	b139      	cbz	r1, a98c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbc>
    a97c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a980:	2301      	movs	r3, #1
    a982:	2109      	movs	r1, #9
    a984:	3070      	adds	r0, #112	; 0x70
    a986:	f003 f92e 	bl	dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a98a:	b330      	cbz	r0, a9da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0a>
    a98c:	f7ff ff02 	bl	a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    a990:	b168      	cbz	r0, a9ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    a992:	68a9      	ldr	r1, [r5, #8]
    a994:	2000      	movs	r0, #0
    a996:	3198      	adds	r1, #152	; 0x98
    a998:	c906      	ldmia	r1, {r1, r2}
    a99a:	1c8b      	adds	r3, r1, #2
    a99c:	429a      	cmp	r2, r3
    a99e:	d303      	bcc.n	a9a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    a9a0:	1a50      	subs	r0, r2, r1
    a9a2:	1e80      	subs	r0, r0, #2
    a9a4:	d000      	beq.n	a9a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    a9a6:	1e40      	subs	r0, r0, #1
    a9a8:	42a0      	cmp	r0, r4
    a9aa:	d200      	bcs.n	a9ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    a9ac:	b284      	uxth	r4, r0
    a9ae:	b10c      	cbz	r4, a9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a9b0:	1e64      	subs	r4, r4, #1
    a9b2:	b2a4      	uxth	r4, r4
    a9b4:	68a8      	ldr	r0, [r5, #8]
    a9b6:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    a9ba:	4421      	add	r1, r4
    a9bc:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    a9c0:	bd70      	pop	{r4, r5, r6, pc}
    a9c2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    a9c6:	2903      	cmp	r1, #3
    a9c8:	d3bf      	bcc.n	a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    a9ca:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    a9ce:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    a9d0:	4411      	add	r1, r2
    a9d2:	1c49      	adds	r1, r1, #1
    a9d4:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    a9d8:	bd70      	pop	{r4, r5, r6, pc}
    a9da:	2400      	movs	r4, #0
    a9dc:	e7ea      	b.n	a9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    a9de:	0000      	.short	0x0000
    a9e0:	20000130 	.word	0x20000130

0000a9e4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a9e4:	4903      	ldr	r1, [pc, #12]	; (a9f4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a9e6:	884a      	ldrh	r2, [r1, #2]
    a9e8:	8002      	strh	r2, [r0, #0]
    a9ea:	7809      	ldrb	r1, [r1, #0]
    a9ec:	7081      	strb	r1, [r0, #2]
    a9ee:	2000      	movs	r0, #0
    a9f0:	4770      	bx	lr
    a9f2:	0000      	.short	0x0000
    a9f4:	20001198 	.word	0x20001198

0000a9f8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a9f8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a9fa:	460c      	mov	r4, r1
    a9fc:	4605      	mov	r5, r0
    a9fe:	8800      	ldrh	r0, [r0, #0]
    aa00:	4669      	mov	r1, sp
    aa02:	f003 f8c6 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    aa06:	0001      	movs	r1, r0
    aa08:	f04f 0000 	mov.w	r0, #0
    aa0c:	d005      	beq.n	aa1a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    aa0e:	f8c4 0002 	str.w	r0, [r4, #2]
    aa12:	71a0      	strb	r0, [r4, #6]
    aa14:	8020      	strh	r0, [r4, #0]
    aa16:	2002      	movs	r0, #2
    aa18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aa1a:	9901      	ldr	r1, [sp, #4]
    aa1c:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    aa20:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    aa24:	f8d1 2016 	ldr.w	r2, [r1, #22]
    aa28:	f8c4 2002 	str.w	r2, [r4, #2]
    aa2c:	7e8a      	ldrb	r2, [r1, #26]
    aa2e:	71a2      	strb	r2, [r4, #6]
    aa30:	882a      	ldrh	r2, [r5, #0]
    aa32:	8022      	strh	r2, [r4, #0]
    aa34:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    aa38:	f88d 2008 	strb.w	r2, [sp, #8]
    aa3c:	9a02      	ldr	r2, [sp, #8]
    aa3e:	9202      	str	r2, [sp, #8]
    aa40:	f89d 2008 	ldrb.w	r2, [sp, #8]
    aa44:	2a00      	cmp	r2, #0
    aa46:	d1eb      	bne.n	aa20 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    aa48:	2000      	movs	r0, #0
    aa4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000aa4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    aa4c:	b51c      	push	{r2, r3, r4, lr}
    aa4e:	8800      	ldrh	r0, [r0, #0]
    aa50:	4669      	mov	r1, sp
    aa52:	f003 f89e 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    aa56:	2800      	cmp	r0, #0
    aa58:	d10b      	bne.n	aa72 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    aa5a:	480b      	ldr	r0, [pc, #44]	; (aa88 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    aa5c:	7800      	ldrb	r0, [r0, #0]
    aa5e:	b188      	cbz	r0, aa84 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    aa60:	9801      	ldr	r0, [sp, #4]
    aa62:	f005 fb77 	bl	10154 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    aa66:	b128      	cbz	r0, aa74 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    aa68:	9801      	ldr	r0, [sp, #4]
    aa6a:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    aa6e:	b118      	cbz	r0, aa78 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    aa70:	203a      	movs	r0, #58	; 0x3a
    aa72:	bd1c      	pop	{r2, r3, r4, pc}
    aa74:	2002      	movs	r0, #2
    aa76:	bd1c      	pop	{r2, r3, r4, pc}
    aa78:	9901      	ldr	r1, [sp, #4]
    aa7a:	2001      	movs	r0, #1
    aa7c:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    aa80:	2000      	movs	r0, #0
    aa82:	bd1c      	pop	{r2, r3, r4, pc}
    aa84:	2011      	movs	r0, #17
    aa86:	bd1c      	pop	{r2, r3, r4, pc}
    aa88:	2000020c 	.word	0x2000020c

0000aa8c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    aa8c:	b510      	push	{r4, lr}
    aa8e:	4604      	mov	r4, r0
    aa90:	f005 fb57 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    aa94:	b130      	cbz	r0, aaa4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    aa96:	4804      	ldr	r0, [pc, #16]	; (aaa8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    aa98:	8881      	ldrh	r1, [r0, #4]
    aa9a:	8021      	strh	r1, [r4, #0]
    aa9c:	88c0      	ldrh	r0, [r0, #6]
    aa9e:	8060      	strh	r0, [r4, #2]
    aaa0:	2000      	movs	r0, #0
    aaa2:	bd10      	pop	{r4, pc}
    aaa4:	2001      	movs	r0, #1
    aaa6:	bd10      	pop	{r4, pc}
    aaa8:	20000214 	.word	0x20000214

0000aaac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    aaac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    aaae:	4605      	mov	r5, r0
    aab0:	f000 fb04 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    aab4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    aab8:	b310      	cbz	r0, ab00 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    aaba:	2400      	movs	r4, #0
    aabc:	a802      	add	r0, sp, #8
    aabe:	f88d 4004 	strb.w	r4, [sp, #4]
    aac2:	f88d 4008 	strb.w	r4, [sp, #8]
    aac6:	9000      	str	r0, [sp, #0]
    aac8:	78aa      	ldrb	r2, [r5, #2]
    aaca:	7869      	ldrb	r1, [r5, #1]
    aacc:	7828      	ldrb	r0, [r5, #0]
    aace:	ab01      	add	r3, sp, #4
    aad0:	f005 fb98 	bl	10204 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    aad4:	2800      	cmp	r0, #0
    aad6:	d112      	bne.n	aafe <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    aad8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aadc:	f005 fa99 	bl	10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    aae0:	b180      	cbz	r0, ab04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    aae2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aae6:	f005 fa94 	bl	10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    aaea:	b158      	cbz	r0, ab04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    aaec:	4806      	ldr	r0, [pc, #24]	; (ab08 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    aaee:	f89d 1004 	ldrb.w	r1, [sp, #4]
    aaf2:	7381      	strb	r1, [r0, #14]
    aaf4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    aaf8:	73c1      	strb	r1, [r0, #15]
    aafa:	8204      	strh	r4, [r0, #16]
    aafc:	2000      	movs	r0, #0
    aafe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab00:	2001      	movs	r0, #1
    ab02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab04:	2011      	movs	r0, #17
    ab06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ab08:	20001198 	.word	0x20001198

0000ab0c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ab0c:	7801      	ldrb	r1, [r0, #0]
    ab0e:	b171      	cbz	r1, ab2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab10:	7841      	ldrb	r1, [r0, #1]
    ab12:	b161      	cbz	r1, ab2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab14:	8841      	ldrh	r1, [r0, #2]
    ab16:	291b      	cmp	r1, #27
    ab18:	d309      	bcc.n	ab2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab1a:	8881      	ldrh	r1, [r0, #4]
    ab1c:	291b      	cmp	r1, #27
    ab1e:	d306      	bcc.n	ab2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ab20:	4904      	ldr	r1, [pc, #16]	; (ab34 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ab22:	6802      	ldr	r2, [r0, #0]
    ab24:	600a      	str	r2, [r1, #0]
    ab26:	8880      	ldrh	r0, [r0, #4]
    ab28:	8088      	strh	r0, [r1, #4]
    ab2a:	2000      	movs	r0, #0
    ab2c:	4770      	bx	lr
    ab2e:	2012      	movs	r0, #18
    ab30:	4770      	bx	lr
    ab32:	0000      	.short	0x0000
    ab34:	20001198 	.word	0x20001198

0000ab38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ab38:	6800      	ldr	r0, [r0, #0]
    ab3a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ab3e:	4288      	cmp	r0, r1
    ab40:	d303      	bcc.n	ab4a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ab42:	4903      	ldr	r1, [pc, #12]	; (ab50 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ab44:	6088      	str	r0, [r1, #8]
    ab46:	2000      	movs	r0, #0
    ab48:	4770      	bx	lr
    ab4a:	2012      	movs	r0, #18
    ab4c:	4770      	bx	lr
    ab4e:	0000      	.short	0x0000
    ab50:	20001198 	.word	0x20001198

0000ab54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ab54:	4a03      	ldr	r2, [pc, #12]	; (ab64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ab56:	e9d2 1200 	ldrd	r1, r2, [r2]
    ab5a:	6001      	str	r1, [r0, #0]
    ab5c:	6042      	str	r2, [r0, #4]
    ab5e:	2000      	movs	r0, #0
    ab60:	4770      	bx	lr
    ab62:	0000      	.short	0x0000
    ab64:	0000af98 	.word	0x0000af98

0000ab68 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    ab68:	b510      	push	{r4, lr}
    ab6a:	2005      	movs	r0, #5
    ab6c:	f000 fa9c 	bl	b0a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ab70:	f7fd fe52 	bl	8818 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    ab74:	4902      	ldr	r1, [pc, #8]	; (ab80 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    ab76:	4801      	ldr	r0, [pc, #4]	; (ab7c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    ab78:	6048      	str	r0, [r1, #4]
    ab7a:	bd10      	pop	{r4, pc}
    ab7c:	0000abd9 	.word	0x0000abd9
    ab80:	2000020c 	.word	0x2000020c

0000ab84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ab84:	b510      	push	{r4, lr}
    ab86:	f002 ff58 	bl	da3a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ab8a:	f7fb fc6f 	bl	646c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ab8e:	f000 faa5 	bl	b0dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    ab92:	f003 fc00 	bl	e396 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    ab96:	480e      	ldr	r0, [pc, #56]	; (abd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    ab98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ab9c:	4b0d      	ldr	r3, [pc, #52]	; (abd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    ab9e:	8281      	strh	r1, [r0, #20]
    aba0:	2100      	movs	r1, #0
    aba2:	7581      	strb	r1, [r0, #22]
    aba4:	8301      	strh	r1, [r0, #24]
    aba6:	221b      	movs	r2, #27
    aba8:	801a      	strh	r2, [r3, #0]
    abaa:	f44f 74a4 	mov.w	r4, #328	; 0x148
    abae:	805c      	strh	r4, [r3, #2]
    abb0:	809a      	strh	r2, [r3, #4]
    abb2:	80dc      	strh	r4, [r3, #6]
    abb4:	7381      	strb	r1, [r0, #14]
    abb6:	73c1      	strb	r1, [r0, #15]
    abb8:	2303      	movs	r3, #3
    abba:	7003      	strb	r3, [r0, #0]
    abbc:	2302      	movs	r3, #2
    abbe:	7043      	strb	r3, [r0, #1]
    abc0:	8042      	strh	r2, [r0, #2]
    abc2:	8082      	strh	r2, [r0, #4]
    abc4:	f640 62a6 	movw	r2, #3750	; 0xea6
    abc8:	6082      	str	r2, [r0, #8]
    abca:	7481      	strb	r1, [r0, #18]
    abcc:	7301      	strb	r1, [r0, #12]
    abce:	bd10      	pop	{r4, pc}
    abd0:	20001198 	.word	0x20001198
    abd4:	20000214 	.word	0x20000214
    abd8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abdc:	4692      	mov	sl, r2
    abde:	460f      	mov	r7, r1
    abe0:	4681      	mov	r9, r0
    abe2:	f005 faae 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    abe6:	2800      	cmp	r0, #0
    abe8:	d063      	beq.n	acb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    abea:	4933      	ldr	r1, [pc, #204]	; (acb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    abec:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    abf0:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    abf4:	8808      	ldrh	r0, [r1, #0]
    abf6:	4290      	cmp	r0, r2
    abf8:	d300      	bcc.n	abfc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    abfa:	4610      	mov	r0, r2
    abfc:	4680      	mov	r8, r0
    abfe:	8888      	ldrh	r0, [r1, #4]
    ac00:	42b0      	cmp	r0, r6
    ac02:	d200      	bcs.n	ac06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    ac04:	4606      	mov	r6, r0
    ac06:	884c      	ldrh	r4, [r1, #2]
    ac08:	f640 0048 	movw	r0, #2120	; 0x848
    ac0c:	4284      	cmp	r4, r0
    ac0e:	d300      	bcc.n	ac12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    ac10:	4604      	mov	r4, r0
    ac12:	88cd      	ldrh	r5, [r1, #6]
    ac14:	4285      	cmp	r5, r0
    ac16:	d300      	bcc.n	ac1a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    ac18:	4605      	mov	r5, r0
    ac1a:	4284      	cmp	r4, r0
    ac1c:	d300      	bcc.n	ac20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    ac1e:	4604      	mov	r4, r0
    ac20:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ac24:	2e1b      	cmp	r6, #27
    ac26:	d001      	beq.n	ac2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    ac28:	428d      	cmp	r5, r1
    ac2a:	d104      	bne.n	ac36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    ac2c:	f1b8 0f1b 	cmp.w	r8, #27
    ac30:	d03f      	beq.n	acb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    ac32:	428c      	cmp	r4, r1
    ac34:	d03d      	beq.n	acb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    ac36:	466a      	mov	r2, sp
    ac38:	4651      	mov	r1, sl
    ac3a:	4648      	mov	r0, r9
    ac3c:	f005 fa0c 	bl	10058 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    ac40:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ac44:	4641      	mov	r1, r8
    ac46:	4540      	cmp	r0, r8
    ac48:	d900      	bls.n	ac4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    ac4a:	4608      	mov	r0, r1
    ac4c:	80f8      	strh	r0, [r7, #6]
    ac4e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ac52:	42a1      	cmp	r1, r4
    ac54:	d800      	bhi.n	ac58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    ac56:	460c      	mov	r4, r1
    ac58:	813c      	strh	r4, [r7, #8]
    ac5a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ac5e:	42b1      	cmp	r1, r6
    ac60:	d800      	bhi.n	ac64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    ac62:	460e      	mov	r6, r1
    ac64:	807e      	strh	r6, [r7, #2]
    ac66:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ac6a:	42a9      	cmp	r1, r5
    ac6c:	d900      	bls.n	ac70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    ac6e:	4629      	mov	r1, r5
    ac70:	80b9      	strh	r1, [r7, #4]
    ac72:	2201      	movs	r2, #1
    ac74:	703a      	strb	r2, [r7, #0]
    ac76:	381b      	subs	r0, #27
    ac78:	28e0      	cmp	r0, #224	; 0xe0
    ac7a:	d902      	bls.n	ac82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    ac7c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    ac80:	e014      	b.n	acac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    ac82:	3e1b      	subs	r6, #27
    ac84:	2ee0      	cmp	r6, #224	; 0xe0
    ac86:	d902      	bls.n	ac8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    ac88:	f640 4182 	movw	r1, #3202	; 0xc82
    ac8c:	e00e      	b.n	acac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    ac8e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    ac92:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    ac96:	4284      	cmp	r4, r0
    ac98:	d902      	bls.n	aca0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    ac9a:	f640 4184 	movw	r1, #3204	; 0xc84
    ac9e:	e005      	b.n	acac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    aca0:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    aca4:	4281      	cmp	r1, r0
    aca6:	d904      	bls.n	acb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    aca8:	f640 4186 	movw	r1, #3206	; 0xc86
    acac:	2039      	movs	r0, #57	; 0x39
    acae:	f7f9 fecd 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    acb2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acb6:	0000      	.short	0x0000
    acb8:	20000214 	.word	0x20000214

0000acbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    acbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acc0:	b088      	sub	sp, #32
    acc2:	460c      	mov	r4, r1
    acc4:	4606      	mov	r6, r0
    acc6:	f003 fd89 	bl	e7dc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    acca:	b198      	cbz	r0, acf4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    accc:	4630      	mov	r0, r6
    acce:	f003 fd78 	bl	e7c2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    acd2:	b130      	cbz	r0, ace2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    acd4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    acd8:	2012      	movs	r0, #18
    acda:	2900      	cmp	r1, #0
    acdc:	d00b      	beq.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    acde:	2980      	cmp	r1, #128	; 0x80
    ace0:	d809      	bhi.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ace2:	4630      	mov	r0, r6
    ace4:	f003 fd5c 	bl	e7a0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    ace8:	b140      	cbz	r0, acfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    acea:	4630      	mov	r0, r6
    acec:	f003 fcd4 	bl	e698 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    acf0:	b130      	cbz	r0, ad00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    acf2:	e009      	b.n	ad08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    acf4:	2042      	movs	r0, #66	; 0x42
    acf6:	b008      	add	sp, #32
    acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acfc:	200c      	movs	r0, #12
    acfe:	e7fa      	b.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad00:	4630      	mov	r0, r6
    ad02:	f003 fd58 	bl	e7b6 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    ad06:	b3a8      	cbz	r0, ad74 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    ad08:	4630      	mov	r0, r6
    ad0a:	f003 ff2f 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ad0e:	2800      	cmp	r0, #0
    ad10:	d1f4      	bne.n	acfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ad12:	4630      	mov	r0, r6
    ad14:	f003 fcdb 	bl	e6ce <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    ad18:	2800      	cmp	r0, #0
    ad1a:	d1ef      	bne.n	acfc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    ad1c:	4630      	mov	r0, r6
    ad1e:	f7fc f9d7 	bl	70d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    ad22:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ad26:	f242 7110 	movw	r1, #10000	; 0x2710
    ad2a:	fb00 f801 	mul.w	r8, r0, r1
    ad2e:	78e1      	ldrb	r1, [r4, #3]
    ad30:	4630      	mov	r0, r6
    ad32:	f003 fd2c 	bl	e78e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    ad36:	4630      	mov	r0, r6
    ad38:	f003 fd3f 	bl	e7ba <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ad3c:	b1e8      	cbz	r0, ad7a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    ad3e:	2200      	movs	r2, #0
    ad40:	4611      	mov	r1, r2
    ad42:	a801      	add	r0, sp, #4
    ad44:	f7fa f8e0 	bl	4f08 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ad48:	0004      	movs	r4, r0
    ad4a:	d06a      	beq.n	ae22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ad4c:	2100      	movs	r1, #0
    ad4e:	f7fb fdbb 	bl	68c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ad52:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    ad56:	8020      	strh	r0, [r4, #0]
    ad58:	4621      	mov	r1, r4
    ad5a:	4630      	mov	r0, r6
    ad5c:	f003 fd51 	bl	e802 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    ad60:	f005 f9ef 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ad64:	4d3a      	ldr	r5, [pc, #232]	; (ae50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    ad66:	2800      	cmp	r0, #0
    ad68:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ad6c:	d00f      	beq.n	ad8e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    ad6e:	886a      	ldrh	r2, [r5, #2]
    ad70:	88a9      	ldrh	r1, [r5, #4]
    ad72:	e00e      	b.n	ad92 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    ad74:	e7ff      	b.n	ad76 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    ad76:	2012      	movs	r0, #18
    ad78:	e7bd      	b.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad7a:	4642      	mov	r2, r8
    ad7c:	2100      	movs	r1, #0
    ad7e:	4630      	mov	r0, r6
    ad80:	f7fd f8f0 	bl	7f64 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    ad84:	2800      	cmp	r0, #0
    ad86:	d0b6      	beq.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ad88:	f241 414c 	movw	r1, #5196	; 0x144c
    ad8c:	e053      	b.n	ae36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ad8e:	221b      	movs	r2, #27
    ad90:	4611      	mov	r1, r2
    ad92:	84c2      	strh	r2, [r0, #38]	; 0x26
    ad94:	8501      	strh	r1, [r0, #40]	; 0x28
    ad96:	68a8      	ldr	r0, [r5, #8]
    ad98:	62e0      	str	r0, [r4, #44]	; 0x2c
    ad9a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    ad9e:	4630      	mov	r0, r6
    ada0:	f003 fd13 	bl	e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ada4:	b910      	cbnz	r0, adac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    ada6:	4630      	mov	r0, r6
    ada8:	f003 fd29 	bl	e7fe <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    adac:	60e7      	str	r7, [r4, #12]
    adae:	8821      	ldrh	r1, [r4, #0]
    adb0:	f8ad 1008 	strh.w	r1, [sp, #8]
    adb4:	7ba9      	ldrb	r1, [r5, #14]
    adb6:	f88d 100a 	strb.w	r1, [sp, #10]
    adba:	7be9      	ldrb	r1, [r5, #15]
    adbc:	f88d 100b 	strb.w	r1, [sp, #11]
    adc0:	8a29      	ldrh	r1, [r5, #16]
    adc2:	f8ad 100c 	strh.w	r1, [sp, #12]
    adc6:	a905      	add	r1, sp, #20
    adc8:	9100      	str	r1, [sp, #0]
    adca:	2001      	movs	r0, #1
    adcc:	ab04      	add	r3, sp, #16
    adce:	aa02      	add	r2, sp, #8
    add0:	4621      	mov	r1, r4
    add2:	f005 f977 	bl	100c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    add6:	b140      	cbz	r0, adea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    add8:	2100      	movs	r1, #0
    adda:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    adde:	f7fa f8bd 	bl	4f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ade2:	b1f0      	cbz	r0, ae22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    ade4:	f241 4198 	movw	r1, #5272	; 0x1498
    ade8:	e025      	b.n	ae36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    adea:	f89d 0010 	ldrb.w	r0, [sp, #16]
    adee:	f88d 0018 	strb.w	r0, [sp, #24]
    adf2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    adf6:	f88d 0019 	strb.w	r0, [sp, #25]
    adfa:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    adfe:	f8ad 001a 	strh.w	r0, [sp, #26]
    ae02:	a906      	add	r1, sp, #24
    ae04:	4620      	mov	r0, r4
    ae06:	f002 ff83 	bl	dd10 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ae0a:	7868      	ldrb	r0, [r5, #1]
    ae0c:	9000      	str	r0, [sp, #0]
    ae0e:	782b      	ldrb	r3, [r5, #0]
    ae10:	88aa      	ldrh	r2, [r5, #4]
    ae12:	8869      	ldrh	r1, [r5, #2]
    ae14:	8820      	ldrh	r0, [r4, #0]
    ae16:	f7fa f96d 	bl	50f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ae1a:	b120      	cbz	r0, ae26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    ae1c:	f241 41a3 	movw	r1, #5283	; 0x14a3
    ae20:	e009      	b.n	ae36 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    ae22:	2009      	movs	r0, #9
    ae24:	e767      	b.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae26:	4642      	mov	r2, r8
    ae28:	4621      	mov	r1, r4
    ae2a:	4630      	mov	r0, r6
    ae2c:	f7fd f89a 	bl	7f64 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    ae30:	b120      	cbz	r0, ae3c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    ae32:	f241 41a5 	movw	r1, #5285	; 0x14a5
    ae36:	2039      	movs	r0, #57	; 0x39
    ae38:	f7f9 fe08 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae3c:	4805      	ldr	r0, [pc, #20]	; (ae54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    ae3e:	6843      	ldr	r3, [r0, #4]
    ae40:	b123      	cbz	r3, ae4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    ae42:	2200      	movs	r2, #0
    ae44:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    ae48:	4620      	mov	r0, r4
    ae4a:	4798      	blx	r3
    ae4c:	2000      	movs	r0, #0
    ae4e:	e752      	b.n	acf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    ae50:	20001198 	.word	0x20001198
    ae54:	2000020c 	.word	0x2000020c
    ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae5c:	b088      	sub	sp, #32
    ae5e:	4604      	mov	r4, r0
    ae60:	8800      	ldrh	r0, [r0, #0]
    ae62:	a906      	add	r1, sp, #24
    ae64:	f002 fe95 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ae68:	2800      	cmp	r0, #0
    ae6a:	d147      	bne.n	aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    ae6c:	9807      	ldr	r0, [sp, #28]
    ae6e:	2700      	movs	r7, #0
    ae70:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    ae74:	f88d 1008 	strb.w	r1, [sp, #8]
    ae78:	9902      	ldr	r1, [sp, #8]
    ae7a:	9102      	str	r1, [sp, #8]
    ae7c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ae80:	f88d 100c 	strb.w	r1, [sp, #12]
    ae84:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    ae88:	3070      	adds	r0, #112	; 0x70
    ae8a:	0689      	lsls	r1, r1, #26
    ae8c:	d502      	bpl.n	ae94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    ae8e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ae92:	b149      	cbz	r1, aea8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    ae94:	f05f 0100 	movs.w	r1, #0
    ae98:	f88d 1004 	strb.w	r1, [sp, #4]
    ae9c:	2105      	movs	r1, #5
    ae9e:	304c      	adds	r0, #76	; 0x4c
    aea0:	f004 fa76 	bl	f390 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    aea4:	b110      	cbz	r0, aeac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    aea6:	e004      	b.n	aeb2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    aea8:	2101      	movs	r1, #1
    aeaa:	e7f5      	b.n	ae98 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    aeac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aeb0:	b318      	cbz	r0, aefa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    aeb2:	8921      	ldrh	r1, [r4, #8]
    aeb4:	88e0      	ldrh	r0, [r4, #6]
    aeb6:	f005 f8c1 	bl	1003c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    aeba:	2800      	cmp	r0, #0
    aebc:	d11e      	bne.n	aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    aebe:	88a1      	ldrh	r1, [r4, #4]
    aec0:	8860      	ldrh	r0, [r4, #2]
    aec2:	f005 f8bb 	bl	1003c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    aec6:	2800      	cmp	r0, #0
    aec8:	d118      	bne.n	aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    aeca:	8921      	ldrh	r1, [r4, #8]
    aecc:	88e0      	ldrh	r0, [r4, #6]
    aece:	f005 f8ab 	bl	10028 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    aed2:	2800      	cmp	r0, #0
    aed4:	d112      	bne.n	aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    aed6:	88a1      	ldrh	r1, [r4, #4]
    aed8:	8860      	ldrh	r0, [r4, #2]
    aeda:	f005 f8a5 	bl	10028 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    aede:	0006      	movs	r6, r0
    aee0:	d10c      	bne.n	aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    aee2:	9807      	ldr	r0, [sp, #28]
    aee4:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    aee8:	f04f 0801 	mov.w	r8, #1
    aeec:	f885 8001 	strb.w	r8, [r5, #1]
    aef0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    aef4:	b129      	cbz	r1, af02 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    aef6:	263a      	movs	r6, #58	; 0x3a
    aef8:	e02f      	b.n	af5a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    aefa:	201a      	movs	r0, #26
    aefc:	b008      	add	sp, #32
    aefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af02:	4639      	mov	r1, r7
    af04:	aa03      	add	r2, sp, #12
    af06:	f005 f8a7 	bl	10058 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    af0a:	8861      	ldrh	r1, [r4, #2]
    af0c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    af10:	4281      	cmp	r1, r0
    af12:	d200      	bcs.n	af16 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    af14:	4608      	mov	r0, r1
    af16:	80e8      	strh	r0, [r5, #6]
    af18:	88a1      	ldrh	r1, [r4, #4]
    af1a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    af1e:	4281      	cmp	r1, r0
    af20:	d200      	bcs.n	af24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    af22:	4608      	mov	r0, r1
    af24:	8128      	strh	r0, [r5, #8]
    af26:	88e2      	ldrh	r2, [r4, #6]
    af28:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    af2c:	428a      	cmp	r2, r1
    af2e:	d200      	bcs.n	af32 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    af30:	4611      	mov	r1, r2
    af32:	8069      	strh	r1, [r5, #2]
    af34:	8922      	ldrh	r2, [r4, #8]
    af36:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    af3a:	428a      	cmp	r2, r1
    af3c:	d200      	bcs.n	af40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    af3e:	4611      	mov	r1, r2
    af40:	f640 0248 	movw	r2, #2120	; 0x848
    af44:	80a9      	strh	r1, [r5, #4]
    af46:	4291      	cmp	r1, r2
    af48:	d300      	bcc.n	af4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    af4a:	4611      	mov	r1, r2
    af4c:	80a9      	strh	r1, [r5, #4]
    af4e:	4290      	cmp	r0, r2
    af50:	d200      	bcs.n	af54 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    af52:	4602      	mov	r2, r0
    af54:	812a      	strh	r2, [r5, #8]
    af56:	f885 8000 	strb.w	r8, [r5]
    af5a:	706f      	strb	r7, [r5, #1]
    af5c:	4630      	mov	r0, r6
    af5e:	e7cd      	b.n	aefc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    af60:	b510      	push	{r4, lr}
    af62:	4604      	mov	r4, r0
    af64:	88c1      	ldrh	r1, [r0, #6]
    af66:	8880      	ldrh	r0, [r0, #4]
    af68:	f005 f868 	bl	1003c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    af6c:	2800      	cmp	r0, #0
    af6e:	d10f      	bne.n	af90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    af70:	8861      	ldrh	r1, [r4, #2]
    af72:	8820      	ldrh	r0, [r4, #0]
    af74:	f005 f862 	bl	1003c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    af78:	2800      	cmp	r0, #0
    af7a:	d109      	bne.n	af90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    af7c:	4805      	ldr	r0, [pc, #20]	; (af94 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    af7e:	88a1      	ldrh	r1, [r4, #4]
    af80:	8081      	strh	r1, [r0, #4]
    af82:	8821      	ldrh	r1, [r4, #0]
    af84:	8001      	strh	r1, [r0, #0]
    af86:	88e1      	ldrh	r1, [r4, #6]
    af88:	80c1      	strh	r1, [r0, #6]
    af8a:	8861      	ldrh	r1, [r4, #2]
    af8c:	8041      	strh	r1, [r0, #2]
    af8e:	2000      	movs	r0, #0
    af90:	bd10      	pop	{r4, pc}
    af92:	0000      	.short	0x0000
    af94:	20000214 	.word	0x20000214
    af98:	0b12fe0b 	.word	0x0b12fe0b
    af9c:	12fe0059 	.word	0x12fe0059
    afa0:	05060708 	.word	0x05060708
    afa4:	00020304 	.word	0x00020304
    afa8:	f0f4f8fc 	.word	0xf0f4f8fc
    afac:	0304d8ec 	.word	0x0304d8ec
    afb0:	f4f8fc00 	.word	0xf4f8fc00
    afb4:	00d8ecf0 	.word	0x00d8ecf0

0000afb8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    afb8:	b510      	push	{r4, lr}
    afba:	f7fb fecd 	bl	6d58 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    afbe:	4804      	ldr	r0, [pc, #16]	; (afd0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    afc0:	6840      	ldr	r0, [r0, #4]
    afc2:	f005 f997 	bl	102f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    afc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afca:	f004 bed3 	b.w	fd74 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    afce:	0000      	.short	0x0000
    afd0:	2000021c 	.word	0x2000021c

0000afd4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    afd4:	b510      	push	{r4, lr}
    afd6:	4c07      	ldr	r4, [pc, #28]	; (aff4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    afd8:	68a0      	ldr	r0, [r4, #8]
    afda:	f005 f98b 	bl	102f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    afde:	68e0      	ldr	r0, [r4, #12]
    afe0:	f005 f988 	bl	102f4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    afe4:	f002 fd29 	bl	da3a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    afe8:	f7fb fa40 	bl	646c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aff0:	f7ff bdc8 	b.w	ab84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    aff4:	2000021c 	.word	0x2000021c

0000aff8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    aff8:	b500      	push	{lr}
    affa:	4905      	ldr	r1, [pc, #20]	; (b010 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    affc:	4805      	ldr	r0, [pc, #20]	; (b014 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    affe:	f005 f95a 	bl	102b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b002:	4804      	ldr	r0, [pc, #16]	; (b014 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b004:	4904      	ldr	r1, [pc, #16]	; (b018 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b006:	1d00      	adds	r0, r0, #4
    b008:	f85d eb04 	ldr.w	lr, [sp], #4
    b00c:	f005 b953 	b.w	102b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b010:	2000022c 	.word	0x2000022c
    b014:	20000220 	.word	0x20000220
    b018:	20000234 	.word	0x20000234

0000b01c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b01c:	b500      	push	{lr}
    b01e:	4908      	ldr	r1, [pc, #32]	; (b040 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b020:	4808      	ldr	r0, [pc, #32]	; (b044 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b022:	f005 f948 	bl	102b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b026:	4807      	ldr	r0, [pc, #28]	; (b044 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b028:	4907      	ldr	r1, [pc, #28]	; (b048 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b02a:	1d00      	adds	r0, r0, #4
    b02c:	f005 f943 	bl	102b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b030:	4804      	ldr	r0, [pc, #16]	; (b044 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b032:	4906      	ldr	r1, [pc, #24]	; (b04c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b034:	3008      	adds	r0, #8
    b036:	f85d eb04 	ldr.w	lr, [sp], #4
    b03a:	f005 b93c 	b.w	102b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b03e:	0000      	.short	0x0000
    b040:	20000244 	.word	0x20000244
    b044:	20000220 	.word	0x20000220
    b048:	2000024c 	.word	0x2000024c
    b04c:	2000023c 	.word	0x2000023c

0000b050 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b050:	4801      	ldr	r0, [pc, #4]	; (b058 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b052:	7800      	ldrb	r0, [r0, #0]
    b054:	4770      	bx	lr
    b056:	0000      	.short	0x0000
    b058:	2000021c 	.word	0x2000021c
    b05c:	b510      	push	{r4, lr}
    b05e:	f7fc f9a9 	bl	73b4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b062:	f7fd f80f 	bl	8084 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b066:	4803      	ldr	r0, [pc, #12]	; (b074 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b068:	f7fc f98a 	bl	7380 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b070:	f7fb be7e 	b.w	6d70 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b074:	20001621 	.word	0x20001621
    b078:	4909      	ldr	r1, [pc, #36]	; (b0a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b07a:	b510      	push	{r4, lr}
    b07c:	2001      	movs	r0, #1
    b07e:	7008      	strb	r0, [r1, #0]
    b080:	f7fc f9c8 	bl	7414 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b084:	f7fd fd20 	bl	8ac8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b088:	f002 fcc5 	bl	da16 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b08c:	4805      	ldr	r0, [pc, #20]	; (b0a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b08e:	f7fa fc53 	bl	5938 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b092:	2000      	movs	r0, #0
    b094:	f7f9 fea8 	bl	4de8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b09c:	f7fb be70 	b.w	6d80 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b0a0:	2000021c 	.word	0x2000021c
    b0a4:	20001621 	.word	0x20001621

0000b0a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b0a8:	2101      	movs	r1, #1
    b0aa:	4081      	lsls	r1, r0
    b0ac:	4802      	ldr	r0, [pc, #8]	; (b0b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b0ae:	6802      	ldr	r2, [r0, #0]
    b0b0:	4311      	orrs	r1, r2
    b0b2:	6001      	str	r1, [r0, #0]
    b0b4:	4770      	bx	lr
    b0b6:	0000      	.short	0x0000
    b0b8:	20000254 	.word	0x20000254

0000b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b0bc:	4801      	ldr	r0, [pc, #4]	; (b0c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b0be:	6800      	ldr	r0, [r0, #0]
    b0c0:	4770      	bx	lr
    b0c2:	0000      	.short	0x0000
    b0c4:	20000254 	.word	0x20000254

0000b0c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b0c8:	4803      	ldr	r0, [pc, #12]	; (b0d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b0ca:	8800      	ldrh	r0, [r0, #0]
    b0cc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b0d0:	0040      	lsls	r0, r0, #1
    b0d2:	1c40      	adds	r0, r0, #1
    b0d4:	4770      	bx	lr
    b0d6:	0000      	.short	0x0000
    b0d8:	20000254 	.word	0x20000254

0000b0dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b0dc:	b510      	push	{r4, lr}
    b0de:	f7f9 f911 	bl	4304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b0e2:	2200      	movs	r2, #0
    b0e4:	4b08      	ldr	r3, [pc, #32]	; (b108 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b0e6:	4611      	mov	r1, r2
    b0e8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b0ec:	4284      	cmp	r4, r0
    b0ee:	d303      	bcc.n	b0f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b0f0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b0f4:	7882      	ldrb	r2, [r0, #2]
    b0f6:	e003      	b.n	b100 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b0f8:	1c49      	adds	r1, r1, #1
    b0fa:	b2c9      	uxtb	r1, r1
    b0fc:	290c      	cmp	r1, #12
    b0fe:	d3f3      	bcc.n	b0e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b100:	4802      	ldr	r0, [pc, #8]	; (b10c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b102:	7002      	strb	r2, [r0, #0]
    b104:	bd10      	pop	{r4, pc}
    b106:	0000      	.short	0x0000
    b108:	00010344 	.word	0x00010344
    b10c:	200002a3 	.word	0x200002a3

0000b110 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b110:	b570      	push	{r4, r5, r6, lr}
    b112:	4605      	mov	r5, r0
    b114:	4616      	mov	r6, r2
    b116:	460c      	mov	r4, r1
    b118:	2002      	movs	r0, #2
    b11a:	f000 f9f9 	bl	b510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b11e:	4906      	ldr	r1, [pc, #24]	; (b138 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b120:	2001      	movs	r0, #1
    b122:	1ef6      	subs	r6, r6, #3
    b124:	7008      	strb	r0, [r1, #0]
    b126:	4805      	ldr	r0, [pc, #20]	; (b13c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b128:	6006      	str	r6, [r0, #0]
    b12a:	4804      	ldr	r0, [pc, #16]	; (b13c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b12c:	3808      	subs	r0, #8
    b12e:	6005      	str	r5, [r0, #0]
    b130:	1f00      	subs	r0, r0, #4
    b132:	6004      	str	r4, [r0, #0]
    b134:	bd70      	pop	{r4, r5, r6, pc}
    b136:	0000      	.short	0x0000
    b138:	200002a4 	.word	0x200002a4
    b13c:	4000f510 	.word	0x4000f510

0000b140 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b140:	b510      	push	{r4, lr}
    b142:	4c0c      	ldr	r4, [pc, #48]	; (b174 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b144:	7820      	ldrb	r0, [r4, #0]
    b146:	b180      	cbz	r0, b16a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b148:	490b      	ldr	r1, [pc, #44]	; (b178 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b14a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b14e:	6008      	str	r0, [r1, #0]
    b150:	f000 f86a 	bl	b228 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b154:	2100      	movs	r1, #0
    b156:	b120      	cbz	r0, b162 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b158:	2001      	movs	r0, #1
    b15a:	7060      	strb	r0, [r4, #1]
    b15c:	4807      	ldr	r0, [pc, #28]	; (b17c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b15e:	6800      	ldr	r0, [r0, #0]
    b160:	e001      	b.n	b166 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b162:	7061      	strb	r1, [r4, #1]
    b164:	2010      	movs	r0, #16
    b166:	70a0      	strb	r0, [r4, #2]
    b168:	7021      	strb	r1, [r4, #0]
    b16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b16e:	2000      	movs	r0, #0
    b170:	f000 b9ce 	b.w	b510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b174:	200002a4 	.word	0x200002a4
    b178:	4001f508 	.word	0x4001f508
    b17c:	4000f400 	.word	0x4000f400

0000b180 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b180:	b510      	push	{r4, lr}
    b182:	2002      	movs	r0, #2
    b184:	f000 f9c4 	bl	b510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b188:	4904      	ldr	r1, [pc, #16]	; (b19c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b18a:	2001      	movs	r0, #1
    b18c:	7008      	strb	r0, [r1, #0]
    b18e:	f000 f859 	bl	b244 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b192:	4903      	ldr	r1, [pc, #12]	; (b1a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b194:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b198:	6008      	str	r0, [r1, #0]
    b19a:	bd10      	pop	{r4, pc}
    b19c:	200002a4 	.word	0x200002a4
    b1a0:	4001f504 	.word	0x4001f504

0000b1a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b1a4:	4803      	ldr	r0, [pc, #12]	; (b1b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b1a6:	2100      	movs	r1, #0
    b1a8:	7001      	strb	r1, [r0, #0]
    b1aa:	7041      	strb	r1, [r0, #1]
    b1ac:	2110      	movs	r1, #16
    b1ae:	7081      	strb	r1, [r0, #2]
    b1b0:	4770      	bx	lr
    b1b2:	0000      	.short	0x0000
    b1b4:	200002a4 	.word	0x200002a4

0000b1b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b1b8:	4807      	ldr	r0, [pc, #28]	; (b1d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b1ba:	b510      	push	{r4, lr}
    b1bc:	7801      	ldrb	r1, [r0, #0]
    b1be:	b141      	cbz	r1, b1d2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b1c0:	f000 f832 	bl	b228 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b1c4:	b118      	cbz	r0, b1ce <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b1c6:	4805      	ldr	r0, [pc, #20]	; (b1dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b1c8:	6800      	ldr	r0, [r0, #0]
    b1ca:	b2c0      	uxtb	r0, r0
    b1cc:	bd10      	pop	{r4, pc}
    b1ce:	2010      	movs	r0, #16
    b1d0:	bd10      	pop	{r4, pc}
    b1d2:	7880      	ldrb	r0, [r0, #2]
    b1d4:	bd10      	pop	{r4, pc}
    b1d6:	0000      	.short	0x0000
    b1d8:	200002a4 	.word	0x200002a4
    b1dc:	4000f400 	.word	0x4000f400

0000b1e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b1e0:	4808      	ldr	r0, [pc, #32]	; (b204 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b1e2:	b510      	push	{r4, lr}
    b1e4:	7801      	ldrb	r1, [r0, #0]
    b1e6:	b159      	cbz	r1, b200 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b1e8:	4807      	ldr	r0, [pc, #28]	; (b208 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b1ea:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b1ee:	b128      	cbz	r0, b1fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b1f0:	f000 f80c 	bl	b20c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b1f4:	2800      	cmp	r0, #0
    b1f6:	d000      	beq.n	b1fa <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b1f8:	2001      	movs	r0, #1
    b1fa:	bd10      	pop	{r4, pc}
    b1fc:	2002      	movs	r0, #2
    b1fe:	bd10      	pop	{r4, pc}
    b200:	7840      	ldrb	r0, [r0, #1]
    b202:	bd10      	pop	{r4, pc}
    b204:	200002a4 	.word	0x200002a4
    b208:	4000f000 	.word	0x4000f000
    b20c:	4805      	ldr	r0, [pc, #20]	; (b224 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b20e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b212:	b111      	cbz	r1, b21a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b214:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b218:	b108      	cbz	r0, b21e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b21a:	2000      	movs	r0, #0
    b21c:	4770      	bx	lr
    b21e:	2001      	movs	r0, #1
    b220:	4770      	bx	lr
    b222:	0000      	.short	0x0000
    b224:	4000f000 	.word	0x4000f000
    b228:	4805      	ldr	r0, [pc, #20]	; (b240 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b22a:	b510      	push	{r4, lr}
    b22c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b230:	b120      	cbz	r0, b23c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b232:	f7ff ffeb 	bl	b20c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b236:	b108      	cbz	r0, b23c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b238:	2001      	movs	r0, #1
    b23a:	bd10      	pop	{r4, pc}
    b23c:	2000      	movs	r0, #0
    b23e:	bd10      	pop	{r4, pc}
    b240:	4000f000 	.word	0x4000f000
    b244:	4804      	ldr	r0, [pc, #16]	; (b258 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b246:	2100      	movs	r1, #0
    b248:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b24c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b250:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b254:	4770      	bx	lr
    b256:	0000      	.short	0x0000
    b258:	4000f000 	.word	0x4000f000

0000b25c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b25c:	4a08      	ldr	r2, [pc, #32]	; (b280 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b25e:	b510      	push	{r4, lr}
    b260:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b264:	4907      	ldr	r1, [pc, #28]	; (b284 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b266:	4610      	mov	r0, r2
    b268:	f7f9 fac0 	bl	47ec <mpsl_fem_lna_configuration_set>
    b26c:	2800      	cmp	r0, #0
    b26e:	d005      	beq.n	b27c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b270:	1c40      	adds	r0, r0, #1
    b272:	d003      	beq.n	b27c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b274:	217d      	movs	r1, #125	; 0x7d
    b276:	2040      	movs	r0, #64	; 0x40
    b278:	f7f9 fbe8 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b27c:	bd10      	pop	{r4, pc}
    b27e:	0000      	.short	0x0000
    b280:	20000258 	.word	0x20000258
    b284:	0000b2b4 	.word	0x0000b2b4

0000b288 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b288:	4a08      	ldr	r2, [pc, #32]	; (b2ac <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b28a:	b510      	push	{r4, lr}
    b28c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b290:	4907      	ldr	r1, [pc, #28]	; (b2b0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b292:	4610      	mov	r0, r2
    b294:	f7f9 fab6 	bl	4804 <mpsl_fem_pa_configuration_set>
    b298:	2800      	cmp	r0, #0
    b29a:	d005      	beq.n	b2a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b29c:	1c40      	adds	r0, r0, #1
    b29e:	d003      	beq.n	b2a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b2a0:	2172      	movs	r1, #114	; 0x72
    b2a2:	2040      	movs	r0, #64	; 0x40
    b2a4:	f7f9 fbd2 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2a8:	bd10      	pop	{r4, pc}
    b2aa:	0000      	.short	0x0000
    b2ac:	20000258 	.word	0x20000258
    b2b0:	0000b2b4 	.word	0x0000b2b4
    b2b4:	00000001 	.word	0x00000001
    b2b8:	40001110 	.word	0x40001110
	...

0000b2cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b2cc:	4a07      	ldr	r2, [pc, #28]	; (b2ec <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b2ce:	b510      	push	{r4, lr}
    b2d0:	7853      	ldrb	r3, [r2, #1]
    b2d2:	b133      	cbz	r3, b2e2 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b2d4:	4b06      	ldr	r3, [pc, #24]	; (b2f0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b2d6:	6019      	str	r1, [r3, #0]
    b2d8:	1d19      	adds	r1, r3, #4
    b2da:	6008      	str	r0, [r1, #0]
    b2dc:	2001      	movs	r0, #1
    b2de:	7090      	strb	r0, [r2, #2]
    b2e0:	bd10      	pop	{r4, pc}
    b2e2:	21ba      	movs	r1, #186	; 0xba
    b2e4:	203c      	movs	r0, #60	; 0x3c
    b2e6:	f7f9 fbb1 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ea:	0000      	.short	0x0000
    b2ec:	200002a7 	.word	0x200002a7
    b2f0:	4000f50c 	.word	0x4000f50c

0000b2f4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b2f4:	4809      	ldr	r0, [pc, #36]	; (b31c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b2f6:	b510      	push	{r4, lr}
    b2f8:	7801      	ldrb	r1, [r0, #0]
    b2fa:	b151      	cbz	r1, b312 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b2fc:	7880      	ldrb	r0, [r0, #2]
    b2fe:	b140      	cbz	r0, b312 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b300:	4907      	ldr	r1, [pc, #28]	; (b320 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b302:	2000      	movs	r0, #0
    b304:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b308:	4906      	ldr	r1, [pc, #24]	; (b324 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b30a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b30e:	6008      	str	r0, [r1, #0]
    b310:	bd10      	pop	{r4, pc}
    b312:	21e1      	movs	r1, #225	; 0xe1
    b314:	203c      	movs	r0, #60	; 0x3c
    b316:	f7f9 fb99 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b31a:	0000      	.short	0x0000
    b31c:	200002a7 	.word	0x200002a7
    b320:	4000f000 	.word	0x4000f000
    b324:	4001f504 	.word	0x4001f504

0000b328 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b328:	b570      	push	{r4, r5, r6, lr}
    b32a:	4c0b      	ldr	r4, [pc, #44]	; (b358 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b32c:	2500      	movs	r5, #0
    b32e:	7820      	ldrb	r0, [r4, #0]
    b330:	b158      	cbz	r0, b34a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b332:	f000 f8e5 	bl	b500 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b336:	4809      	ldr	r0, [pc, #36]	; (b35c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b338:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b33c:	b118      	cbz	r0, b346 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b33e:	4808      	ldr	r0, [pc, #32]	; (b360 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b340:	6800      	ldr	r0, [r0, #0]
    b342:	70e0      	strb	r0, [r4, #3]
    b344:	e000      	b.n	b348 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b346:	70e5      	strb	r5, [r4, #3]
    b348:	7025      	strb	r5, [r4, #0]
    b34a:	2000      	movs	r0, #0
    b34c:	f000 f8e0 	bl	b510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b350:	7065      	strb	r5, [r4, #1]
    b352:	70a5      	strb	r5, [r4, #2]
    b354:	bd70      	pop	{r4, r5, r6, pc}
    b356:	0000      	.short	0x0000
    b358:	200002a7 	.word	0x200002a7
    b35c:	4000f000 	.word	0x4000f000
    b360:	4000f400 	.word	0x4000f400

0000b364 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b364:	480d      	ldr	r0, [pc, #52]	; (b39c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b366:	b510      	push	{r4, lr}
    b368:	7801      	ldrb	r1, [r0, #0]
    b36a:	b191      	cbz	r1, b392 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b36c:	7880      	ldrb	r0, [r0, #2]
    b36e:	b180      	cbz	r0, b392 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b370:	490b      	ldr	r1, [pc, #44]	; (b3a0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b372:	2000      	movs	r0, #0
    b374:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b378:	4a0a      	ldr	r2, [pc, #40]	; (b3a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b37a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b37e:	6010      	str	r0, [r2, #0]
    b380:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b384:	2a01      	cmp	r2, #1
    b386:	d103      	bne.n	b390 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b388:	604a      	str	r2, [r1, #4]
    b38a:	4906      	ldr	r1, [pc, #24]	; (b3a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b38c:	1d09      	adds	r1, r1, #4
    b38e:	6008      	str	r0, [r1, #0]
    b390:	bd10      	pop	{r4, pc}
    b392:	21d1      	movs	r1, #209	; 0xd1
    b394:	203c      	movs	r0, #60	; 0x3c
    b396:	f7f9 fb59 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b39a:	0000      	.short	0x0000
    b39c:	200002a7 	.word	0x200002a7
    b3a0:	4000f000 	.word	0x4000f000
    b3a4:	4001f504 	.word	0x4001f504

0000b3a8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b3a8:	4803      	ldr	r0, [pc, #12]	; (b3b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b3aa:	2100      	movs	r1, #0
    b3ac:	7001      	strb	r1, [r0, #0]
    b3ae:	7041      	strb	r1, [r0, #1]
    b3b0:	7081      	strb	r1, [r0, #2]
    b3b2:	70c1      	strb	r1, [r0, #3]
    b3b4:	4770      	bx	lr
    b3b6:	0000      	.short	0x0000
    b3b8:	200002a7 	.word	0x200002a7

0000b3bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3c0:	4605      	mov	r5, r0
    b3c2:	461c      	mov	r4, r3
    b3c4:	4690      	mov	r8, r2
    b3c6:	460f      	mov	r7, r1
    b3c8:	2001      	movs	r0, #1
    b3ca:	f000 f8a1 	bl	b510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3ce:	4e12      	ldr	r6, [pc, #72]	; (b418 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b3d0:	4812      	ldr	r0, [pc, #72]	; (b41c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b3d2:	7134      	strb	r4, [r6, #4]
    b3d4:	6007      	str	r7, [r0, #0]
    b3d6:	4911      	ldr	r1, [pc, #68]	; (b41c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b3d8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b3dc:	1f09      	subs	r1, r1, #4
    b3de:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b3e2:	6008      	str	r0, [r1, #0]
    b3e4:	f001 f940 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b3e8:	b938      	cbnz	r0, b3fa <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b3ea:	480c      	ldr	r0, [pc, #48]	; (b41c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b3ec:	3010      	adds	r0, #16
    b3ee:	6801      	ldr	r1, [r0, #0]
    b3f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b3f4:	ea41 0108 	orr.w	r1, r1, r8
    b3f8:	6001      	str	r1, [r0, #0]
    b3fa:	f000 f881 	bl	b500 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b3fe:	b93d      	cbnz	r5, b410 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b400:	4808      	ldr	r0, [pc, #32]	; (b424 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b402:	4a07      	ldr	r2, [pc, #28]	; (b420 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b404:	4906      	ldr	r1, [pc, #24]	; (b420 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b406:	3afc      	subs	r2, #252	; 0xfc
    b408:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b40c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b410:	2001      	movs	r0, #1
    b412:	7070      	strb	r0, [r6, #1]
    b414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b418:	200002a7 	.word	0x200002a7
    b41c:	4000f508 	.word	0x4000f508
    b420:	4000f100 	.word	0x4000f100
    b424:	4001f088 	.word	0x4001f088

0000b428 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b428:	4808      	ldr	r0, [pc, #32]	; (b44c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b42a:	b510      	push	{r4, lr}
    b42c:	7841      	ldrb	r1, [r0, #1]
    b42e:	b149      	cbz	r1, b444 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b430:	2101      	movs	r1, #1
    b432:	7001      	strb	r1, [r0, #0]
    b434:	4806      	ldr	r0, [pc, #24]	; (b450 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b436:	2200      	movs	r2, #0
    b438:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b43c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b440:	6001      	str	r1, [r0, #0]
    b442:	bd10      	pop	{r4, pc}
    b444:	21c5      	movs	r1, #197	; 0xc5
    b446:	203c      	movs	r0, #60	; 0x3c
    b448:	f7f9 fb00 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b44c:	200002a7 	.word	0x200002a7
    b450:	4000f000 	.word	0x4000f000

0000b454 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b454:	4806      	ldr	r0, [pc, #24]	; (b470 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b456:	7801      	ldrb	r1, [r0, #0]
    b458:	b141      	cbz	r1, b46c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b45a:	4806      	ldr	r0, [pc, #24]	; (b474 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b45c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b460:	2800      	cmp	r0, #0
    b462:	d002      	beq.n	b46a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b464:	4804      	ldr	r0, [pc, #16]	; (b478 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b466:	6800      	ldr	r0, [r0, #0]
    b468:	b2c0      	uxtb	r0, r0
    b46a:	4770      	bx	lr
    b46c:	78c0      	ldrb	r0, [r0, #3]
    b46e:	4770      	bx	lr
    b470:	200002a7 	.word	0x200002a7
    b474:	4000f000 	.word	0x4000f000
    b478:	4000f400 	.word	0x4000f400

0000b47c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b47c:	4901      	ldr	r1, [pc, #4]	; (b484 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b47e:	2001      	movs	r0, #1
    b480:	6088      	str	r0, [r1, #8]
    b482:	4770      	bx	lr
    b484:	4000f000 	.word	0x4000f000

0000b488 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b48c:	2800      	cmp	r0, #0
    b48e:	d02e      	beq.n	b4ee <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b490:	4818      	ldr	r0, [pc, #96]	; (b4f4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b492:	7800      	ldrb	r0, [r0, #0]
    b494:	b1b0      	cbz	r0, b4c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b496:	4d18      	ldr	r5, [pc, #96]	; (b4f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b498:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b49c:	2800      	cmp	r0, #0
    b49e:	d126      	bne.n	b4ee <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b4a0:	2702      	movs	r7, #2
    b4a2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b4a6:	4c15      	ldr	r4, [pc, #84]	; (b4fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b4a8:	6820      	ldr	r0, [r4, #0]
    b4aa:	43c0      	mvns	r0, r0
    b4ac:	f340 1600 	sbfx	r6, r0, #4, #1
    b4b0:	6820      	ldr	r0, [r4, #0]
    b4b2:	f040 0010 	orr.w	r0, r0, #16
    b4b6:	6020      	str	r0, [r4, #0]
    b4b8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b4bc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b4c0:	1c76      	adds	r6, r6, #1
    b4c2:	e009      	b.n	b4d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b4c4:	f240 1153 	movw	r1, #339	; 0x153
    b4c8:	203c      	movs	r0, #60	; 0x3c
    b4ca:	f7f9 fabf 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4ce:	bf00      	nop
    b4d0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b4d4:	f7f9 f934 	bl	4740 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b4d8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b4dc:	2800      	cmp	r0, #0
    b4de:	d0f7      	beq.n	b4d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b4e0:	b91e      	cbnz	r6, b4ea <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b4e2:	6820      	ldr	r0, [r4, #0]
    b4e4:	f020 0010 	bic.w	r0, r0, #16
    b4e8:	6020      	str	r0, [r4, #0]
    b4ea:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4f2:	0000      	.short	0x0000
    b4f4:	200002a7 	.word	0x200002a7
    b4f8:	4000f000 	.word	0x4000f000
    b4fc:	e000ed10 	.word	0xe000ed10
    b500:	4902      	ldr	r1, [pc, #8]	; (b50c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b502:	4801      	ldr	r0, [pc, #4]	; (b508 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b504:	6008      	str	r0, [r1, #0]
    b506:	4770      	bx	lr
    b508:	02020000 	.word	0x02020000
    b50c:	4001f508 	.word	0x4001f508

0000b510 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b510:	b510      	push	{r4, lr}
    b512:	4604      	mov	r4, r0
    b514:	f000 f822 	bl	b55c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b518:	2c00      	cmp	r4, #0
    b51a:	d017      	beq.n	b54c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b51c:	4a0c      	ldr	r2, [pc, #48]	; (b550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b51e:	480c      	ldr	r0, [pc, #48]	; (b550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b520:	490c      	ldr	r1, [pc, #48]	; (b554 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b522:	3214      	adds	r2, #20
    b524:	4b0c      	ldr	r3, [pc, #48]	; (b558 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b526:	2c01      	cmp	r4, #1
    b528:	d005      	beq.n	b536 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b52a:	2c02      	cmp	r4, #2
    b52c:	d008      	beq.n	b540 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b52e:	2183      	movs	r1, #131	; 0x83
    b530:	203d      	movs	r0, #61	; 0x3d
    b532:	f7f9 fa8b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b536:	2402      	movs	r4, #2
    b538:	6004      	str	r4, [r0, #0]
    b53a:	6011      	str	r1, [r2, #0]
    b53c:	0620      	lsls	r0, r4, #24
    b53e:	e004      	b.n	b54a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b540:	2403      	movs	r4, #3
    b542:	6004      	str	r4, [r0, #0]
    b544:	6011      	str	r1, [r2, #0]
    b546:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b54a:	6018      	str	r0, [r3, #0]
    b54c:	bd10      	pop	{r4, pc}
    b54e:	0000      	.short	0x0000
    b550:	4000f500 	.word	0x4000f500
    b554:	20001723 	.word	0x20001723
    b558:	4001f504 	.word	0x4001f504
    b55c:	4804      	ldr	r0, [pc, #16]	; (b570 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b55e:	2100      	movs	r1, #0
    b560:	6001      	str	r1, [r0, #0]
    b562:	6001      	str	r1, [r0, #0]
    b564:	4903      	ldr	r1, [pc, #12]	; (b574 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b566:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b56a:	6008      	str	r0, [r1, #0]
    b56c:	4770      	bx	lr
    b56e:	0000      	.short	0x0000
    b570:	4000f500 	.word	0x4000f500
    b574:	4001f508 	.word	0x4001f508

0000b578 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b578:	4805      	ldr	r0, [pc, #20]	; (b590 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b57a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b57e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b582:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b586:	2100      	movs	r1, #0
    b588:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b58c:	4770      	bx	lr
    b58e:	0000      	.short	0x0000
    b590:	40001000 	.word	0x40001000

0000b594 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b594:	4904      	ldr	r1, [pc, #16]	; (b5a8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b596:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b59a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b59e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b5a2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b5a6:	4770      	bx	lr
    b5a8:	40001000 	.word	0x40001000

0000b5ac <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b5ac:	4801      	ldr	r0, [pc, #4]	; (b5b4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b5ae:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b5b2:	4770      	bx	lr
    b5b4:	200011dc 	.word	0x200011dc

0000b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5ba:	4c23      	ldr	r4, [pc, #140]	; (b648 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b5bc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b5c0:	f010 0f10 	tst.w	r0, #16
    b5c4:	d001      	beq.n	b5ca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b5c6:	2701      	movs	r7, #1
    b5c8:	e000      	b.n	b5cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b5ca:	2700      	movs	r7, #0
    b5cc:	2010      	movs	r0, #16
    b5ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b5d2:	2002      	movs	r0, #2
    b5d4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b5d8:	481c      	ldr	r0, [pc, #112]	; (b64c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b5da:	2500      	movs	r5, #0
    b5dc:	491d      	ldr	r1, [pc, #116]	; (b654 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b5de:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b5e2:	481b      	ldr	r0, [pc, #108]	; (b650 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b5e4:	6008      	str	r0, [r1, #0]
    b5e6:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b5ea:	f44f 7688 	mov.w	r6, #272	; 0x110
    b5ee:	f010 0fff 	tst.w	r0, #255	; 0xff
    b5f2:	d018      	beq.n	b626 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b5f4:	20ff      	movs	r0, #255	; 0xff
    b5f6:	f88d 0000 	strb.w	r0, [sp]
    b5fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b5fe:	2001      	movs	r0, #1
    b600:	6120      	str	r0, [r4, #16]
    b602:	e004      	b.n	b60e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b604:	f89d 0000 	ldrb.w	r0, [sp]
    b608:	1e40      	subs	r0, r0, #1
    b60a:	f88d 0000 	strb.w	r0, [sp]
    b60e:	f89d 0000 	ldrb.w	r0, [sp]
    b612:	b128      	cbz	r0, b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b614:	4631      	mov	r1, r6
    b616:	4620      	mov	r0, r4
    b618:	f004 ff63 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b61c:	2800      	cmp	r0, #0
    b61e:	d0f1      	beq.n	b604 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b620:	f89d 0000 	ldrb.w	r0, [sp]
    b624:	b158      	cbz	r0, b63e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b626:	f000 fcdb 	bl	bfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b62a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b62e:	f000 fe57 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b632:	2f00      	cmp	r7, #0
    b634:	d002      	beq.n	b63c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b636:	2010      	movs	r0, #16
    b638:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b63e:	f240 718f 	movw	r1, #1935	; 0x78f
    b642:	203e      	movs	r0, #62	; 0x3e
    b644:	f7f9 fa02 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b648:	40001000 	.word	0x40001000
    b64c:	200011dc 	.word	0x200011dc
    b650:	0c0e0000 	.word	0x0c0e0000
    b654:	4001f508 	.word	0x4001f508

0000b658 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b65c:	4d20      	ldr	r5, [pc, #128]	; (b6e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b65e:	4607      	mov	r7, r0
    b660:	4688      	mov	r8, r1
    b662:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b666:	07c1      	lsls	r1, r0, #31
    b668:	d018      	beq.n	b69c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b66a:	4a1e      	ldr	r2, [pc, #120]	; (b6e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b66c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b670:	6011      	str	r1, [r2, #0]
    b672:	4c1d      	ldr	r4, [pc, #116]	; (b6e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b674:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b678:	f041 0101 	orr.w	r1, r1, #1
    b67c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b680:	f040 0002 	orr.w	r0, r0, #2
    b684:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b688:	4640      	mov	r0, r8
    b68a:	f000 fe8d 	bl	c3a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b68e:	f000 fc45 	bl	bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b692:	2601      	movs	r6, #1
    b694:	b13f      	cbz	r7, b6a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b696:	2f01      	cmp	r7, #1
    b698:	d00e      	beq.n	b6b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b69a:	e016      	b.n	b6ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b69c:	f240 611a 	movw	r1, #1562	; 0x61a
    b6a0:	203e      	movs	r0, #62	; 0x3e
    b6a2:	f7f9 f9d3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6a6:	4640      	mov	r0, r8
    b6a8:	f000 fc68 	bl	bf7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b6ac:	4640      	mov	r0, r8
    b6ae:	f000 fc19 	bl	bee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b6b2:	726e      	strb	r6, [r5, #9]
    b6b4:	6026      	str	r6, [r4, #0]
    b6b6:	e008      	b.n	b6ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b6b8:	f000 fc88 	bl	bfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b6bc:	f000 fdd6 	bl	c26c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b6c0:	2002      	movs	r0, #2
    b6c2:	7268      	strb	r0, [r5, #9]
    b6c4:	f000 fcfa 	bl	c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b6c8:	6066      	str	r6, [r4, #4]
    b6ca:	4808      	ldr	r0, [pc, #32]	; (b6ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b6cc:	64c6      	str	r6, [r0, #76]	; 0x4c
    b6ce:	4807      	ldr	r0, [pc, #28]	; (b6ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b6d0:	300c      	adds	r0, #12
    b6d2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b6d6:	4638      	mov	r0, r7
    b6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b6dc:	f004 bee9 	b.w	104b2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b6e0:	200011dc 	.word	0x200011dc
    b6e4:	4001f504 	.word	0x4001f504
    b6e8:	40001000 	.word	0x40001000
    b6ec:	40008000 	.word	0x40008000

0000b6f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6f4:	4d35      	ldr	r5, [pc, #212]	; (b7cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b6f6:	4606      	mov	r6, r0
    b6f8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b6fc:	4689      	mov	r9, r1
    b6fe:	6028      	str	r0, [r5, #0]
    b700:	4c33      	ldr	r4, [pc, #204]	; (b7d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b702:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b706:	f040 0002 	orr.w	r0, r0, #2
    b70a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b70e:	4608      	mov	r0, r1
    b710:	f000 fe4a 	bl	c3a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b714:	f000 fc02 	bl	bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b718:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b71c:	2700      	movs	r7, #0
    b71e:	b116      	cbz	r6, b726 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b720:	2e01      	cmp	r6, #1
    b722:	d027      	beq.n	b774 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b724:	e03f      	b.n	b7a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b726:	4648      	mov	r0, r9
    b728:	f000 fc28 	bl	bf7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b72c:	79e0      	ldrb	r0, [r4, #7]
    b72e:	2801      	cmp	r0, #1
    b730:	d105      	bne.n	b73e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b732:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b736:	f041 0108 	orr.w	r1, r1, #8
    b73a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b73e:	4648      	mov	r0, r9
    b740:	f000 fbd0 	bl	bee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b744:	2001      	movs	r0, #1
    b746:	7260      	strb	r0, [r4, #9]
    b748:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b74a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b74e:	62a0      	str	r0, [r4, #40]	; 0x28
    b750:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b754:	6028      	str	r0, [r5, #0]
    b756:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b75a:	f1b9 0f02 	cmp.w	r9, #2
    b75e:	d007      	beq.n	b770 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b760:	f640 0034 	movw	r0, #2100	; 0x834
    b764:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b768:	4410      	add	r0, r2
    b76a:	fbb0 f7f1 	udiv	r7, r0, r1
    b76e:	e01a      	b.n	b7a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b770:	4608      	mov	r0, r1
    b772:	e7f7      	b.n	b764 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b774:	f000 fc2a 	bl	bfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b778:	f000 fd78 	bl	c26c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b77c:	79e0      	ldrb	r0, [r4, #7]
    b77e:	2801      	cmp	r0, #1
    b780:	d105      	bne.n	b78e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b782:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b786:	f041 0104 	orr.w	r1, r1, #4
    b78a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b78e:	2002      	movs	r0, #2
    b790:	7260      	strb	r0, [r4, #9]
    b792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b794:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b798:	62a0      	str	r0, [r4, #40]	; 0x28
    b79a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b79e:	6028      	str	r0, [r5, #0]
    b7a0:	2729      	movs	r7, #41	; 0x29
    b7a2:	f000 fc8b 	bl	c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b7a6:	f000 fc75 	bl	c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b7aa:	f000 fe37 	bl	c41c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b7ae:	6800      	ldr	r0, [r0, #0]
    b7b0:	2801      	cmp	r0, #1
    b7b2:	d006      	beq.n	b7c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b7b4:	2100      	movs	r1, #0
    b7b6:	4630      	mov	r0, r6
    b7b8:	f004 fe7b 	bl	104b2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b7bc:	4638      	mov	r0, r7
    b7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7c2:	f7ff fef9 	bl	b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b7c6:	2000      	movs	r0, #0
    b7c8:	e7f9      	b.n	b7be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b7ca:	0000      	.short	0x0000
    b7cc:	4001f504 	.word	0x4001f504
    b7d0:	200011dc 	.word	0x200011dc
    b7d4:	40001000 	.word	0x40001000

0000b7d8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    b7d8:	4a02      	ldr	r2, [pc, #8]	; (b7e4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    b7da:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b7dc:	6003      	str	r3, [r0, #0]
    b7de:	6b50      	ldr	r0, [r2, #52]	; 0x34
    b7e0:	6008      	str	r0, [r1, #0]
    b7e2:	4770      	bx	lr
    b7e4:	200011dc 	.word	0x200011dc

0000b7e8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b7e8:	b510      	push	{r4, lr}
    b7ea:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b7ec:	4901      	ldr	r1, [pc, #4]	; (b7f4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b7ee:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b7f2:	bd10      	pop	{r4, pc}
    b7f4:	200011cc 	.word	0x200011cc

0000b7f8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    b7f8:	490f      	ldr	r1, [pc, #60]	; (b838 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    b7fa:	b510      	push	{r4, lr}
    b7fc:	69ca      	ldr	r2, [r1, #28]
    b7fe:	4282      	cmp	r2, r0
    b800:	d302      	bcc.n	b808 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    b802:	f640 010a 	movw	r1, #2058	; 0x80a
    b806:	e00b      	b.n	b820 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    b808:	2201      	movs	r2, #1
    b80a:	730a      	strb	r2, [r1, #12]
    b80c:	6108      	str	r0, [r1, #16]
    b80e:	490b      	ldr	r1, [pc, #44]	; (b83c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    b810:	644a      	str	r2, [r1, #68]	; 0x44
    b812:	1d0a      	adds	r2, r1, #4
    b814:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    b818:	4283      	cmp	r3, r0
    b81a:	d304      	bcc.n	b826 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    b81c:	f640 0113 	movw	r1, #2067	; 0x813
    b820:	203e      	movs	r0, #62	; 0x3e
    b822:	f7f9 f913 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b826:	2300      	movs	r3, #0
    b828:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    b82c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b834:	f000 bd28 	b.w	c288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    b838:	200011dc 	.word	0x200011dc
    b83c:	40008000 	.word	0x40008000

0000b840 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b840:	b570      	push	{r4, r5, r6, lr}
    b842:	4c11      	ldr	r4, [pc, #68]	; (b888 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b844:	4606      	mov	r6, r0
    b846:	2002      	movs	r0, #2
    b848:	7320      	strb	r0, [r4, #12]
    b84a:	2596      	movs	r5, #150	; 0x96
    b84c:	f000 f86e 	bl	b92c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b850:	4602      	mov	r2, r0
    b852:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b856:	f894 1020 	ldrb.w	r1, [r4, #32]
    b85a:	2801      	cmp	r0, #1
    b85c:	d00f      	beq.n	b87e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    b85e:	4628      	mov	r0, r5
    b860:	f004 fe49 	bl	104f6 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b864:	6120      	str	r0, [r4, #16]
    b866:	4809      	ldr	r0, [pc, #36]	; (b88c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b868:	2100      	movs	r1, #0
    b86a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b86e:	6921      	ldr	r1, [r4, #16]
    b870:	69e0      	ldr	r0, [r4, #28]
    b872:	4408      	add	r0, r1
    b874:	4905      	ldr	r1, [pc, #20]	; (b88c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b876:	1d09      	adds	r1, r1, #4
    b878:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b87c:	bd70      	pop	{r4, r5, r6, pc}
    b87e:	4633      	mov	r3, r6
    b880:	4628      	mov	r0, r5
    b882:	f004 fe54 	bl	1052e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b886:	e7ed      	b.n	b864 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b888:	200011dc 	.word	0x200011dc
    b88c:	40008000 	.word	0x40008000

0000b890 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    b890:	b510      	push	{r4, lr}
    b892:	f000 ff05 	bl	c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b896:	2800      	cmp	r0, #0
    b898:	d006      	beq.n	b8a8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    b89a:	4804      	ldr	r0, [pc, #16]	; (b8ac <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    b89c:	6801      	ldr	r1, [r0, #0]
    b89e:	f021 0101 	bic.w	r1, r1, #1
    b8a2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    b8a6:	6001      	str	r1, [r0, #0]
    b8a8:	bd10      	pop	{r4, pc}
    b8aa:	0000      	.short	0x0000
    b8ac:	40001774 	.word	0x40001774

0000b8b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8b4:	2238      	movs	r2, #56	; 0x38
    b8b6:	2100      	movs	r1, #0
    b8b8:	4813      	ldr	r0, [pc, #76]	; (b908 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b8ba:	f000 ffa1 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b8be:	f000 fd0f 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b8c2:	f000 fea6 	bl	c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b8c6:	4d11      	ldr	r5, [pc, #68]	; (b90c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8c8:	4e10      	ldr	r6, [pc, #64]	; (b90c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8ca:	2400      	movs	r4, #0
    b8cc:	4f0f      	ldr	r7, [pc, #60]	; (b90c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8ce:	3508      	adds	r5, #8
    b8d0:	3610      	adds	r6, #16
    b8d2:	b928      	cbnz	r0, b8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b8d4:	f000 feb4 	bl	c640 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b8d8:	b910      	cbnz	r0, b8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b8da:	f000 febb 	bl	c654 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b8de:	b108      	cbz	r0, b8e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b8e0:	2224      	movs	r2, #36	; 0x24
    b8e2:	e006      	b.n	b8f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b8e4:	f000 fef6 	bl	c6d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b8e8:	b910      	cbnz	r0, b8f0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b8ea:	f000 fee9 	bl	c6c0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b8ee:	b140      	cbz	r0, b902 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b8f0:	2240      	movs	r2, #64	; 0x40
    b8f2:	21ff      	movs	r1, #255	; 0xff
    b8f4:	4638      	mov	r0, r7
    b8f6:	f000 ff83 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b8fa:	602c      	str	r4, [r5, #0]
    b8fc:	6034      	str	r4, [r6, #0]
    b8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b902:	2238      	movs	r2, #56	; 0x38
    b904:	e7f5      	b.n	b8f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b906:	0000      	.short	0x0000
    b908:	200011dc 	.word	0x200011dc
    b90c:	40000e00 	.word	0x40000e00

0000b910 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b910:	4805      	ldr	r0, [pc, #20]	; (b928 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    b912:	b510      	push	{r4, lr}
    b914:	69c0      	ldr	r0, [r0, #28]
    b916:	2800      	cmp	r0, #0
    b918:	d104      	bne.n	b924 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    b91a:	f240 11fb 	movw	r1, #507	; 0x1fb
    b91e:	203e      	movs	r0, #62	; 0x3e
    b920:	f7f9 f894 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b924:	bd10      	pop	{r4, pc}
    b926:	0000      	.short	0x0000
    b928:	200011dc 	.word	0x200011dc

0000b92c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b92c:	4814      	ldr	r0, [pc, #80]	; (b980 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b92e:	b510      	push	{r4, lr}
    b930:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b934:	7a40      	ldrb	r0, [r0, #9]
    b936:	b141      	cbz	r1, b94a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b938:	2902      	cmp	r1, #2
    b93a:	d00b      	beq.n	b954 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b93c:	2802      	cmp	r0, #2
    b93e:	d009      	beq.n	b954 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b940:	2901      	cmp	r1, #1
    b942:	d00b      	beq.n	b95c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b944:	2801      	cmp	r0, #1
    b946:	d009      	beq.n	b95c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b948:	e016      	b.n	b978 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b94a:	2800      	cmp	r0, #0
    b94c:	d1f6      	bne.n	b93c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b94e:	f240 117d 	movw	r1, #381	; 0x17d
    b952:	e00e      	b.n	b972 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    b954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b958:	f000 bc38 	b.w	c1cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b95c:	4809      	ldr	r0, [pc, #36]	; (b984 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b95e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b962:	f000 000f 	and.w	r0, r0, #15
    b966:	2803      	cmp	r0, #3
    b968:	d006      	beq.n	b978 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b96a:	2804      	cmp	r0, #4
    b96c:	d006      	beq.n	b97c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    b96e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b972:	203e      	movs	r0, #62	; 0x3e
    b974:	f7f9 f86a 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b978:	2001      	movs	r0, #1
    b97a:	bd10      	pop	{r4, pc}
    b97c:	2002      	movs	r0, #2
    b97e:	bd10      	pop	{r4, pc}
    b980:	200011dc 	.word	0x200011dc
    b984:	40001000 	.word	0x40001000

0000b988 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    b988:	4805      	ldr	r0, [pc, #20]	; (b9a0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    b98a:	b510      	push	{r4, lr}
    b98c:	6980      	ldr	r0, [r0, #24]
    b98e:	2800      	cmp	r0, #0
    b990:	d104      	bne.n	b99c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    b992:	f240 11f5 	movw	r1, #501	; 0x1f5
    b996:	203e      	movs	r0, #62	; 0x3e
    b998:	f7f9 f858 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b99c:	bd10      	pop	{r4, pc}
    b99e:	0000      	.short	0x0000
    b9a0:	200011dc 	.word	0x200011dc

0000b9a4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b9a4:	b510      	push	{r4, lr}
    b9a6:	f000 fc7d 	bl	c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b9aa:	f7ff fe05 	bl	b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b9ae:	f004 fd16 	bl	103de <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b9b2:	480f      	ldr	r0, [pc, #60]	; (b9f0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b9b4:	4a0f      	ldr	r2, [pc, #60]	; (b9f4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b9b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b9b8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b9bc:	6011      	str	r1, [r2, #0]
    b9be:	2400      	movs	r4, #0
    b9c0:	6284      	str	r4, [r0, #40]	; 0x28
    b9c2:	7304      	strb	r4, [r0, #12]
    b9c4:	61c4      	str	r4, [r0, #28]
    b9c6:	6184      	str	r4, [r0, #24]
    b9c8:	f000 fc6c 	bl	c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b9cc:	480a      	ldr	r0, [pc, #40]	; (b9f8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b9ce:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b9d2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b9d6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b9da:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b9de:	2001      	movs	r0, #1
    b9e0:	f004 fd36 	bl	10450 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9e8:	2001      	movs	r0, #1
    b9ea:	f004 bd24 	b.w	10436 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b9ee:	0000      	.short	0x0000
    b9f0:	200011dc 	.word	0x200011dc
    b9f4:	4001f508 	.word	0x4001f508
    b9f8:	40008000 	.word	0x40008000

0000b9fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b9fc:	b570      	push	{r4, r5, r6, lr}
    b9fe:	2001      	movs	r0, #1
    ba00:	f004 fd26 	bl	10450 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ba04:	4c37      	ldr	r4, [pc, #220]	; (bae4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ba06:	2000      	movs	r0, #0
    ba08:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ba0c:	2001      	movs	r0, #1
    ba0e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ba12:	f000 fe35 	bl	c680 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ba16:	4d34      	ldr	r5, [pc, #208]	; (bae8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba18:	b118      	cbz	r0, ba22 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    ba1a:	6828      	ldr	r0, [r5, #0]
    ba1c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ba20:	6028      	str	r0, [r5, #0]
    ba22:	f000 fe21 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba26:	b128      	cbz	r0, ba34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    ba28:	6828      	ldr	r0, [r5, #0]
    ba2a:	4930      	ldr	r1, [pc, #192]	; (baec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ba2c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ba30:	4308      	orrs	r0, r1
    ba32:	6028      	str	r0, [r5, #0]
    ba34:	f000 fe34 	bl	c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ba38:	b138      	cbz	r0, ba4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ba3a:	482b      	ldr	r0, [pc, #172]	; (bae8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba3c:	1d00      	adds	r0, r0, #4
    ba3e:	6801      	ldr	r1, [r0, #0]
    ba40:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ba44:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ba48:	6001      	str	r1, [r0, #0]
    ba4a:	4927      	ldr	r1, [pc, #156]	; (bae8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba4c:	4828      	ldr	r0, [pc, #160]	; (baf0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ba4e:	313c      	adds	r1, #60	; 0x3c
    ba50:	6008      	str	r0, [r1, #0]
    ba52:	f7f8 fee3 	bl	481c <mpsl_fem_device_config_254_apply_get>
    ba56:	b140      	cbz	r0, ba6a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba5c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ba60:	1c41      	adds	r1, r0, #1
    ba62:	d002      	beq.n	ba6a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba64:	4920      	ldr	r1, [pc, #128]	; (bae8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba66:	3110      	adds	r1, #16
    ba68:	6008      	str	r0, [r1, #0]
    ba6a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ba6e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ba70:	1c41      	adds	r1, r0, #1
    ba72:	d004      	beq.n	ba7e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ba74:	491f      	ldr	r1, [pc, #124]	; (baf4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ba76:	680a      	ldr	r2, [r1, #0]
    ba78:	f360 4217 	bfi	r2, r0, #16, #8
    ba7c:	600a      	str	r2, [r1, #0]
    ba7e:	f240 1103 	movw	r1, #259	; 0x103
    ba82:	f240 605b 	movw	r0, #1627	; 0x65b
    ba86:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ba8a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ba8e:	2001      	movs	r0, #1
    ba90:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ba94:	f000 fc88 	bl	c3a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ba98:	f240 1001 	movw	r0, #257	; 0x101
    ba9c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    baa0:	2002      	movs	r0, #2
    baa2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    baa6:	4915      	ldr	r1, [pc, #84]	; (bafc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    baa8:	4813      	ldr	r0, [pc, #76]	; (baf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    baaa:	6008      	str	r0, [r1, #0]
    baac:	4914      	ldr	r1, [pc, #80]	; (bb00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    baae:	2000      	movs	r0, #0
    bab0:	4d14      	ldr	r5, [pc, #80]	; (bb04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    bab2:	8608      	strh	r0, [r1, #48]	; 0x30
    bab4:	3110      	adds	r1, #16
    bab6:	61c8      	str	r0, [r1, #28]
    bab8:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    babc:	7028      	strb	r0, [r5, #0]
    babe:	2001      	movs	r0, #1
    bac0:	f004 fcb9 	bl	10436 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bac4:	2010      	movs	r0, #16
    bac6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    baca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bace:	2002      	movs	r0, #2
    bad0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bad4:	6868      	ldr	r0, [r5, #4]
    bad6:	2800      	cmp	r0, #0
    bad8:	d002      	beq.n	bae0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    bada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bade:	4700      	bx	r0
    bae0:	bd70      	pop	{r4, r5, r6, pc}
    bae2:	0000      	.short	0x0000
    bae4:	40001000 	.word	0x40001000
    bae8:	4000173c 	.word	0x4000173c
    baec:	80000096 	.word	0x80000096
    baf0:	8900002c 	.word	0x8900002c
    baf4:	4000158c 	.word	0x4000158c
    baf8:	0c0e0000 	.word	0x0c0e0000
    bafc:	4001f508 	.word	0x4001f508
    bb00:	200011cc 	.word	0x200011cc
    bb04:	20000270 	.word	0x20000270

0000bb08 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bb08:	4901      	ldr	r1, [pc, #4]	; (bb10 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bb0a:	7508      	strb	r0, [r1, #20]
    bb0c:	4770      	bx	lr
    bb0e:	0000      	.short	0x0000
    bb10:	200011dc 	.word	0x200011dc

0000bb14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bb14:	4905      	ldr	r1, [pc, #20]	; (bb2c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bb16:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bb1a:	4805      	ldr	r0, [pc, #20]	; (bb30 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bb1c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bb20:	f041 0101 	orr.w	r1, r1, #1
    bb24:	7001      	strb	r1, [r0, #0]
    bb26:	f000 ba7b 	b.w	c020 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bb2a:	0000      	.short	0x0000
    bb2c:	40001000 	.word	0x40001000
    bb30:	200011dc 	.word	0x200011dc

0000bb34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb38:	4e36      	ldr	r6, [pc, #216]	; (bc14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    bb3a:	4607      	mov	r7, r0
    bb3c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bb40:	4689      	mov	r9, r1
    bb42:	4614      	mov	r4, r2
    bb44:	6030      	str	r0, [r6, #0]
    bb46:	4610      	mov	r0, r2
    bb48:	f000 fc2e 	bl	c3a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bb4c:	f000 f9e6 	bl	bf1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bb50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; bc18 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    bb54:	4d31      	ldr	r5, [pc, #196]	; (bc1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    bb56:	f04f 0801 	mov.w	r8, #1
    bb5a:	b127      	cbz	r7, bb66 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    bb5c:	2f01      	cmp	r7, #1
    bb5e:	d01d      	beq.n	bb9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    bb60:	f240 710f 	movw	r1, #1807	; 0x70f
    bb64:	e04c      	b.n	bc00 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    bb66:	4620      	mov	r0, r4
    bb68:	f000 fa08 	bl	bf7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bb6c:	4620      	mov	r0, r4
    bb6e:	f000 f9b9 	bl	bee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bb72:	2c02      	cmp	r4, #2
    bb74:	d00f      	beq.n	bb96 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    bb76:	f640 0034 	movw	r0, #2100	; 0x834
    bb7a:	bf00      	nop
    bb7c:	f649 51f8 	movw	r1, #40440	; 0x9df8
    bb80:	4401      	add	r1, r0
    bb82:	4648      	mov	r0, r9
    bb84:	f000 fbb4 	bl	c2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bb88:	4604      	mov	r4, r0
    bb8a:	4650      	mov	r0, sl
    bb8c:	f000 fb9c 	bl	c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bb90:	f885 8009 	strb.w	r8, [r5, #9]
    bb94:	e014      	b.n	bbc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    bb96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bb9a:	e7ef      	b.n	bb7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    bb9c:	f000 fa16 	bl	bfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bba0:	f000 fb64 	bl	c26c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bba4:	f000 fa8a 	bl	c0bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    bba8:	f649 71ba 	movw	r1, #40890	; 0x9fba
    bbac:	4648      	mov	r0, r9
    bbae:	f000 fb9f 	bl	c2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bbb2:	4604      	mov	r4, r0
    bbb4:	4818      	ldr	r0, [pc, #96]	; (bc18 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    bbb6:	1d00      	adds	r0, r0, #4
    bbb8:	f000 fb86 	bl	c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bbbc:	2002      	movs	r0, #2
    bbbe:	7268      	strb	r0, [r5, #9]
    bbc0:	f8df 905c 	ldr.w	r9, [pc, #92]	; bc20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    bbc4:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    bbc8:	4917      	ldr	r1, [pc, #92]	; (bc28 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    bbca:	4816      	ldr	r0, [pc, #88]	; (bc24 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    bbcc:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    bbd0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bbd2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bbd6:	62a8      	str	r0, [r5, #40]	; 0x28
    bbd8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    bbdc:	6030      	str	r0, [r6, #0]
    bbde:	2010      	movs	r0, #16
    bbe0:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    bbe4:	03c0      	lsls	r0, r0, #15
    bbe6:	6030      	str	r0, [r6, #0]
    bbe8:	f000 fa54 	bl	c094 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    bbec:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    bbf0:	480b      	ldr	r0, [pc, #44]	; (bc20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    bbf2:	300c      	adds	r0, #12
    bbf4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbf8:	42a0      	cmp	r0, r4
    bbfa:	d304      	bcc.n	bc06 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    bbfc:	f240 7136 	movw	r1, #1846	; 0x736
    bc00:	203e      	movs	r0, #62	; 0x3e
    bc02:	f7f8 ff23 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc06:	4621      	mov	r1, r4
    bc08:	4638      	mov	r0, r7
    bc0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc0e:	f004 bc50 	b.w	104b2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    bc12:	0000      	.short	0x0000
    bc14:	4001f504 	.word	0x4001f504
    bc18:	40001000 	.word	0x40001000
    bc1c:	200011dc 	.word	0x200011dc
    bc20:	40008000 	.word	0x40008000
    bc24:	40008140 	.word	0x40008140
    bc28:	4001f098 	.word	0x4001f098

0000bc2c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bc2c:	4b0d      	ldr	r3, [pc, #52]	; (bc64 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bc2e:	b510      	push	{r4, lr}
    bc30:	71d8      	strb	r0, [r3, #7]
    bc32:	729a      	strb	r2, [r3, #10]
    bc34:	b151      	cbz	r1, bc4c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bc36:	2002      	movs	r0, #2
    bc38:	7218      	strb	r0, [r3, #8]
    bc3a:	2801      	cmp	r0, #1
    bc3c:	d008      	beq.n	bc50 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bc3e:	2802      	cmp	r0, #2
    bc40:	d00f      	beq.n	bc62 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc42:	f640 1112 	movw	r1, #2322	; 0x912
    bc46:	203e      	movs	r0, #62	; 0x3e
    bc48:	f7f8 ff00 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc4c:	2001      	movs	r0, #1
    bc4e:	e7f3      	b.n	bc38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bc50:	7a58      	ldrb	r0, [r3, #9]
    bc52:	2802      	cmp	r0, #2
    bc54:	d105      	bne.n	bc62 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc56:	f000 f9b9 	bl	bfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bc5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc5e:	f000 bb05 	b.w	c26c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bc62:	bd10      	pop	{r4, pc}
    bc64:	200011dc 	.word	0x200011dc

0000bc68 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bc68:	4902      	ldr	r1, [pc, #8]	; (bc74 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bc6a:	2000      	movs	r0, #0
    bc6c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bc70:	4770      	bx	lr
    bc72:	0000      	.short	0x0000
    bc74:	40008000 	.word	0x40008000

0000bc78 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bc78:	b538      	push	{r3, r4, r5, lr}
    bc7a:	4c0b      	ldr	r4, [pc, #44]	; (bca8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bc7c:	4605      	mov	r5, r0
    bc7e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    bc82:	4620      	mov	r0, r4
    bc84:	f004 fc2d 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bc88:	2800      	cmp	r0, #0
    bc8a:	d00c      	beq.n	bca6 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    bc8c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    bc90:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bc94:	4240      	negs	r0, r0
    bc96:	7028      	strb	r0, [r5, #0]
    bc98:	2000      	movs	r0, #0
    bc9a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    bc9e:	4803      	ldr	r0, [pc, #12]	; (bcac <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bca0:	6800      	ldr	r0, [r0, #0]
    bca2:	9000      	str	r0, [sp, #0]
    bca4:	2001      	movs	r0, #1
    bca6:	bd38      	pop	{r3, r4, r5, pc}
    bca8:	40001000 	.word	0x40001000
    bcac:	4000111c 	.word	0x4000111c

0000bcb0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bcb0:	4903      	ldr	r1, [pc, #12]	; (bcc0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bcb2:	0e02      	lsrs	r2, r0, #24
    bcb4:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bcb8:	0200      	lsls	r0, r0, #8
    bcba:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bcbe:	4770      	bx	lr
    bcc0:	40001000 	.word	0x40001000

0000bcc4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bcc4:	6800      	ldr	r0, [r0, #0]
    bcc6:	4903      	ldr	r1, [pc, #12]	; (bcd4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bcc8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bccc:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bcd0:	4770      	bx	lr
    bcd2:	0000      	.short	0x0000
    bcd4:	40001000 	.word	0x40001000

0000bcd8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bcd8:	b510      	push	{r4, lr}
    bcda:	f000 fb41 	bl	c360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bcde:	4807      	ldr	r0, [pc, #28]	; (bcfc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    bce0:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bce4:	b2c0      	uxtb	r0, r0
    bce6:	2803      	cmp	r0, #3
    bce8:	d001      	beq.n	bcee <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    bcea:	280b      	cmp	r0, #11
    bcec:	d104      	bne.n	bcf8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    bcee:	f44f 7121 	mov.w	r1, #644	; 0x284
    bcf2:	203e      	movs	r0, #62	; 0x3e
    bcf4:	f7f8 feaa 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcf8:	bd10      	pop	{r4, pc}
    bcfa:	0000      	.short	0x0000
    bcfc:	40001000 	.word	0x40001000

0000bd00 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bd00:	4901      	ldr	r1, [pc, #4]	; (bd08 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bd02:	7548      	strb	r0, [r1, #21]
    bd04:	4770      	bx	lr
    bd06:	0000      	.short	0x0000
    bd08:	200011dc 	.word	0x200011dc

0000bd0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd10:	4853      	ldr	r0, [pc, #332]	; (be60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bd12:	f04f 0a01 	mov.w	sl, #1
    bd16:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bd1a:	4851      	ldr	r0, [pc, #324]	; (be60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bd1c:	300c      	adds	r0, #12
    bd1e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bd22:	4850      	ldr	r0, [pc, #320]	; (be64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bd24:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    bd28:	4c4f      	ldr	r4, [pc, #316]	; (be68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bd2a:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bd2e:	f000 f957 	bl	bfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bd32:	494e      	ldr	r1, [pc, #312]	; (be6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bd34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bd36:	6008      	str	r0, [r1, #0]
    bd38:	f8df 9134 	ldr.w	r9, [pc, #308]	; be70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    bd3c:	2600      	movs	r6, #0
    bd3e:	62a6      	str	r6, [r4, #40]	; 0x28
    bd40:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bd44:	f240 121d 	movw	r2, #285	; 0x11d
    bd48:	4391      	bics	r1, r2
    bd4a:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bd4e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bd52:	f000 f9c5 	bl	c0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    bd56:	4605      	mov	r5, r0
    bd58:	4841      	ldr	r0, [pc, #260]	; (be60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bd5a:	3008      	adds	r0, #8
    bd5c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bd60:	61e0      	str	r0, [r4, #28]
    bd62:	f7ff fde3 	bl	b92c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bd66:	f884 0020 	strb.w	r0, [r4, #32]
    bd6a:	7a60      	ldrb	r0, [r4, #9]
    bd6c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bd70:	61a6      	str	r6, [r4, #24]
    bd72:	4e40      	ldr	r6, [pc, #256]	; (be74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bd74:	07a8      	lsls	r0, r5, #30
    bd76:	d502      	bpl.n	bd7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bd78:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bd7c:	61a0      	str	r0, [r4, #24]
    bd7e:	0728      	lsls	r0, r5, #28
    bd80:	d502      	bpl.n	bd88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bd82:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bd86:	61a0      	str	r0, [r4, #24]
    bd88:	f04f 0800 	mov.w	r8, #0
    bd8c:	4639      	mov	r1, r7
    bd8e:	4628      	mov	r0, r5
    bd90:	f000 fa32 	bl	c1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    bd94:	b918      	cbnz	r0, bd9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bd96:	f8c9 a010 	str.w	sl, [r9, #16]
    bd9a:	f04f 0801 	mov.w	r8, #1
    bd9e:	4f32      	ldr	r7, [pc, #200]	; (be68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bda0:	07e8      	lsls	r0, r5, #31
    bda2:	f1a7 0710 	sub.w	r7, r7, #16
    bda6:	d002      	beq.n	bdae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    bda8:	6838      	ldr	r0, [r7, #0]
    bdaa:	4780      	blx	r0
    bdac:	e031      	b.n	be12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bdae:	07a8      	lsls	r0, r5, #30
    bdb0:	d526      	bpl.n	be00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    bdb2:	0768      	lsls	r0, r5, #29
    bdb4:	d41e      	bmi.n	bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdb6:	f000 fc73 	bl	c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bdba:	b9d8      	cbnz	r0, bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdbc:	f000 fc60 	bl	c680 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bdc0:	b9c0      	cbnz	r0, bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdc2:	482d      	ldr	r0, [pc, #180]	; (be78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bdc4:	6800      	ldr	r0, [r0, #0]
    bdc6:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bdca:	f3c0 6100 	ubfx	r1, r0, #24, #1
    bdce:	f000 030f 	and.w	r3, r0, #15
    bdd2:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bdd6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bdda:	b159      	cbz	r1, bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bddc:	b10b      	cbz	r3, bde2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bdde:	b102      	cbz	r2, bde2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bde0:	b940      	cbnz	r0, bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bde2:	4825      	ldr	r0, [pc, #148]	; (be78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bde4:	1d00      	adds	r0, r0, #4
    bde6:	6800      	ldr	r0, [r0, #0]
    bde8:	b120      	cbz	r0, bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdea:	f1bc 0f03 	cmp.w	ip, #3
    bdee:	d201      	bcs.n	bdf4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdf0:	f045 0504 	orr.w	r5, r5, #4
    bdf4:	f345 0080 	sbfx	r0, r5, #2, #1
    bdf8:	4641      	mov	r1, r8
    bdfa:	1c40      	adds	r0, r0, #1
    bdfc:	687a      	ldr	r2, [r7, #4]
    bdfe:	e007      	b.n	be10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    be00:	f015 0f28 	tst.w	r5, #40	; 0x28
    be04:	d005      	beq.n	be12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    be06:	f345 1140 	sbfx	r1, r5, #5, #1
    be0a:	68ba      	ldr	r2, [r7, #8]
    be0c:	4640      	mov	r0, r8
    be0e:	1c49      	adds	r1, r1, #1
    be10:	4790      	blx	r2
    be12:	06e8      	lsls	r0, r5, #27
    be14:	d501      	bpl.n	be1a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    be16:	68f8      	ldr	r0, [r7, #12]
    be18:	4780      	blx	r0
    be1a:	7a60      	ldrb	r0, [r4, #9]
    be1c:	2802      	cmp	r0, #2
    be1e:	d11c      	bne.n	be5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    be20:	7b20      	ldrb	r0, [r4, #12]
    be22:	2800      	cmp	r0, #0
    be24:	d019      	beq.n	be5a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    be26:	2802      	cmp	r0, #2
    be28:	d004      	beq.n	be34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    be2a:	2801      	cmp	r0, #1
    be2c:	d006      	beq.n	be3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    be2e:	f640 21e1 	movw	r1, #2785	; 0xae1
    be32:	e009      	b.n	be48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    be34:	6921      	ldr	r1, [r4, #16]
    be36:	69e0      	ldr	r0, [r4, #28]
    be38:	4408      	add	r0, r1
    be3a:	e008      	b.n	be4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    be3c:	69e1      	ldr	r1, [r4, #28]
    be3e:	6920      	ldr	r0, [r4, #16]
    be40:	4288      	cmp	r0, r1
    be42:	d804      	bhi.n	be4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    be44:	f640 21e2 	movw	r1, #2786	; 0xae2
    be48:	203e      	movs	r0, #62	; 0x3e
    be4a:	f7f8 fdff 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be4e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    be52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be56:	f000 ba17 	b.w	c288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    be5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be5e:	0000      	.short	0x0000
    be60:	40008000 	.word	0x40008000
    be64:	4000b000 	.word	0x4000b000
    be68:	200011dc 	.word	0x200011dc
    be6c:	4001f508 	.word	0x4001f508
    be70:	40001000 	.word	0x40001000
    be74:	40008004 	.word	0x40008004
    be78:	40001450 	.word	0x40001450

0000be7c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    be7c:	b570      	push	{r4, r5, r6, lr}
    be7e:	4b15      	ldr	r3, [pc, #84]	; (bed4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    be80:	888c      	ldrh	r4, [r1, #4]
    be82:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    be86:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    be8a:	780c      	ldrb	r4, [r1, #0]
    be8c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    be90:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    be94:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    be98:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    be9c:	2101      	movs	r1, #1
    be9e:	4081      	lsls	r1, r0
    bea0:	430c      	orrs	r4, r1
    bea2:	b2e4      	uxtb	r4, r4
    bea4:	b132      	cbz	r2, beb4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    bea6:	2a01      	cmp	r2, #1
    bea8:	d00a      	beq.n	bec0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    beaa:	f240 41ac 	movw	r1, #1196	; 0x4ac
    beae:	203e      	movs	r0, #62	; 0x3e
    beb0:	f7f8 fdcc 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    beb4:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    beb8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    bebc:	4388      	bics	r0, r1
    bebe:	e004      	b.n	beca <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    bec0:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    bec4:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    bec8:	b2c0      	uxtb	r0, r0
    beca:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    bece:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bed2:	bd70      	pop	{r4, r5, r6, pc}
    bed4:	40001000 	.word	0x40001000

0000bed8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    bed8:	4901      	ldr	r1, [pc, #4]	; (bee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    beda:	2001      	movs	r0, #1
    bedc:	7008      	strb	r0, [r1, #0]
    bede:	4770      	bx	lr
    bee0:	20000270 	.word	0x20000270
    bee4:	b510      	push	{r4, lr}
    bee6:	4604      	mov	r4, r0
    bee8:	f000 fbda 	bl	c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    beec:	2800      	cmp	r0, #0
    beee:	d00e      	beq.n	bf0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bef0:	4a09      	ldr	r2, [pc, #36]	; (bf18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bef2:	6811      	ldr	r1, [r2, #0]
    bef4:	0650      	lsls	r0, r2, #25
    bef6:	2c02      	cmp	r4, #2
    bef8:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    befc:	d008      	beq.n	bf10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    befe:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bf02:	bf00      	nop
    bf04:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bf08:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bf0c:	6010      	str	r0, [r2, #0]
    bf0e:	bd10      	pop	{r4, pc}
    bf10:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bf14:	e7f6      	b.n	bf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    bf16:	0000      	.short	0x0000
    bf18:	40001588 	.word	0x40001588
    bf1c:	4815      	ldr	r0, [pc, #84]	; (bf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    bf1e:	7d41      	ldrb	r1, [r0, #21]
    bf20:	2925      	cmp	r1, #37	; 0x25
    bf22:	d00a      	beq.n	bf3a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    bf24:	2926      	cmp	r1, #38	; 0x26
    bf26:	d00b      	beq.n	bf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    bf28:	2927      	cmp	r1, #39	; 0x27
    bf2a:	d00c      	beq.n	bf46 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    bf2c:	7d40      	ldrb	r0, [r0, #21]
    bf2e:	0040      	lsls	r0, r0, #1
    bf30:	290a      	cmp	r1, #10
    bf32:	d80b      	bhi.n	bf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    bf34:	f600 1064 	addw	r0, r0, #2404	; 0x964
    bf38:	e00a      	b.n	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    bf3a:	f640 1062 	movw	r0, #2402	; 0x962
    bf3e:	e00f      	b.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf40:	f640 107a 	movw	r0, #2426	; 0x97a
    bf44:	e00c      	b.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf46:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    bf4a:	e009      	b.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf4c:	f600 1066 	addw	r0, r0, #2406	; 0x966
    bf50:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bf54:	d204      	bcs.n	bf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf56:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bf5a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bf5e:	e001      	b.n	bf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    bf60:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bf64:	4a04      	ldr	r2, [pc, #16]	; (bf78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    bf66:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bf6a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bf6e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bf72:	4770      	bx	lr
    bf74:	200011dc 	.word	0x200011dc
    bf78:	40001000 	.word	0x40001000
    bf7c:	4912      	ldr	r1, [pc, #72]	; (bfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    bf7e:	b508      	push	{r3, lr}
    bf80:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bf84:	7d49      	ldrb	r1, [r1, #21]
    bf86:	2801      	cmp	r0, #1
    bf88:	d00a      	beq.n	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    bf8a:	2802      	cmp	r0, #2
    bf8c:	d00a      	beq.n	bfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    bf8e:	2804      	cmp	r0, #4
    bf90:	d00a      	beq.n	bfa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    bf92:	2808      	cmp	r0, #8
    bf94:	d00a      	beq.n	bfac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    bf96:	f240 31ed 	movw	r1, #1005	; 0x3ed
    bf9a:	2006      	movs	r0, #6
    bf9c:	f7f8 fd56 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bfa0:	2000      	movs	r0, #0
    bfa2:	e004      	b.n	bfae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bfa4:	2001      	movs	r0, #1
    bfa6:	e002      	b.n	bfae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bfa8:	2003      	movs	r0, #3
    bfaa:	e000      	b.n	bfae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bfac:	2002      	movs	r0, #2
    bfae:	466b      	mov	r3, sp
    bfb0:	f7f5 f8d6 	bl	1160 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bfb4:	b118      	cbz	r0, bfbe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    bfb6:	f240 41de 	movw	r1, #1246	; 0x4de
    bfba:	203e      	movs	r0, #62	; 0x3e
    bfbc:	e7ee      	b.n	bf9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    bfbe:	f99d 0000 	ldrsb.w	r0, [sp]
    bfc2:	f000 f9eb 	bl	c39c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bfc6:	bd08      	pop	{r3, pc}
    bfc8:	200011dc 	.word	0x200011dc
    bfcc:	4803      	ldr	r0, [pc, #12]	; (bfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    bfce:	7a01      	ldrb	r1, [r0, #8]
    bfd0:	2901      	cmp	r1, #1
    bfd2:	d102      	bne.n	bfda <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    bfd4:	7a80      	ldrb	r0, [r0, #10]
    bfd6:	f7ff bfd1 	b.w	bf7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bfda:	4770      	bx	lr
    bfdc:	200011dc 	.word	0x200011dc
    bfe0:	4805      	ldr	r0, [pc, #20]	; (bff8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    bfe2:	7a40      	ldrb	r0, [r0, #9]
    bfe4:	2801      	cmp	r0, #1
    bfe6:	d003      	beq.n	bff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    bfe8:	2802      	cmp	r0, #2
    bfea:	d103      	bne.n	bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    bfec:	f004 b9df 	b.w	103ae <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bff0:	f004 b9e9 	b.w	103c6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bff4:	4770      	bx	lr
    bff6:	0000      	.short	0x0000
    bff8:	200011dc 	.word	0x200011dc
    bffc:	4807      	ldr	r0, [pc, #28]	; (c01c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    bffe:	2100      	movs	r1, #0
    c000:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c004:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c008:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c00c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c010:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c014:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c018:	4770      	bx	lr
    c01a:	0000      	.short	0x0000
    c01c:	40001000 	.word	0x40001000
    c020:	4818      	ldr	r0, [pc, #96]	; (c084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    c022:	b510      	push	{r4, lr}
    c024:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c028:	07c1      	lsls	r1, r0, #31
    c02a:	d029      	beq.n	c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c02c:	0781      	lsls	r1, r0, #30
    c02e:	d514      	bpl.n	c05a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    c030:	4815      	ldr	r0, [pc, #84]	; (c088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c032:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c036:	f041 0101 	orr.w	r1, r1, #1
    c03a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c03e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c042:	b2c0      	uxtb	r0, r0
    c044:	280b      	cmp	r0, #11
    c046:	d005      	beq.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c048:	280a      	cmp	r0, #10
    c04a:	d003      	beq.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c04c:	2803      	cmp	r0, #3
    c04e:	d001      	beq.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c050:	2802      	cmp	r0, #2
    c052:	d115      	bne.n	c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c054:	f240 510f 	movw	r1, #1295	; 0x50f
    c058:	e00f      	b.n	c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    c05a:	0740      	lsls	r0, r0, #29
    c05c:	d510      	bpl.n	c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c05e:	480a      	ldr	r0, [pc, #40]	; (c088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c060:	490a      	ldr	r1, [pc, #40]	; (c08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    c062:	3008      	adds	r0, #8
    c064:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c068:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c06c:	4808      	ldr	r0, [pc, #32]	; (c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    c06e:	f004 fa3d 	bl	104ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c072:	2800      	cmp	r0, #0
    c074:	d004      	beq.n	c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c076:	f240 5117 	movw	r1, #1303	; 0x517
    c07a:	203e      	movs	r0, #62	; 0x3e
    c07c:	f7f8 fce6 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c080:	bd10      	pop	{r4, pc}
    c082:	0000      	.short	0x0000
    c084:	200011dc 	.word	0x200011dc
    c088:	40001000 	.word	0x40001000
    c08c:	4001f098 	.word	0x4001f098
    c090:	40008000 	.word	0x40008000
    c094:	4808      	ldr	r0, [pc, #32]	; (c0b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    c096:	4601      	mov	r1, r0
    c098:	79c2      	ldrb	r2, [r0, #7]
    c09a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c09e:	b112      	cbz	r2, c0a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    c0a0:	2a01      	cmp	r2, #1
    c0a2:	d003      	beq.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    c0a4:	e006      	b.n	c0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    c0a6:	f041 0102 	orr.w	r1, r1, #2
    c0aa:	e001      	b.n	c0b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    c0ac:	f041 0104 	orr.w	r1, r1, #4
    c0b0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c0b4:	f7ff bfb4 	b.w	c020 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c0b8:	200011dc 	.word	0x200011dc
    c0bc:	b510      	push	{r4, lr}
    c0be:	f000 faef 	bl	c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d108      	bne.n	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c0c6:	f000 fadb 	bl	c680 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c0ca:	2800      	cmp	r0, #0
    c0cc:	d104      	bne.n	c0d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c0ce:	4803      	ldr	r0, [pc, #12]	; (c0dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    c0d0:	6801      	ldr	r1, [r0, #0]
    c0d2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c0d6:	6001      	str	r1, [r0, #0]
    c0d8:	bd10      	pop	{r4, pc}
    c0da:	0000      	.short	0x0000
    c0dc:	40001568 	.word	0x40001568
    c0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0e4:	4d35      	ldr	r5, [pc, #212]	; (c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    c0e6:	2400      	movs	r4, #0
    c0e8:	7b28      	ldrb	r0, [r5, #12]
    c0ea:	b138      	cbz	r0, c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c0ec:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c0f0:	4833      	ldr	r0, [pc, #204]	; (c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    c0f2:	f004 f9fb 	bl	104ec <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c0f6:	b108      	cbz	r0, c0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c0f8:	2601      	movs	r6, #1
    c0fa:	e000      	b.n	c0fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c0fc:	2600      	movs	r6, #0
    c0fe:	7a68      	ldrb	r0, [r5, #9]
    c100:	4f30      	ldr	r7, [pc, #192]	; (c1c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    c102:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c106:	2801      	cmp	r0, #1
    c108:	d002      	beq.n	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    c10a:	2802      	cmp	r0, #2
    c10c:	d008      	beq.n	c120 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c10e:	e018      	b.n	c142 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c110:	4638      	mov	r0, r7
    c112:	f004 f9e6 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c116:	b108      	cbz	r0, c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    c118:	2408      	movs	r4, #8
    c11a:	e012      	b.n	c142 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c11c:	2400      	movs	r4, #0
    c11e:	e010      	b.n	c142 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c120:	4638      	mov	r0, r7
    c122:	f004 f9de 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c126:	b100      	cbz	r0, c12a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    c128:	2002      	movs	r0, #2
    c12a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c12e:	43c9      	mvns	r1, r1
    c130:	f341 0100 	sbfx	r1, r1, #0, #1
    c134:	1c49      	adds	r1, r1, #1
    c136:	d001      	beq.n	c13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    c138:	2400      	movs	r4, #0
    c13a:	e000      	b.n	c13e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    c13c:	2404      	movs	r4, #4
    c13e:	4304      	orrs	r4, r0
    c140:	4334      	orrs	r4, r6
    c142:	f014 0f0b 	tst.w	r4, #11
    c146:	d107      	bne.n	c158 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    c148:	f44f 7188 	mov.w	r1, #272	; 0x110
    c14c:	4638      	mov	r0, r7
    c14e:	f004 f9c8 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c152:	b100      	cbz	r0, c156 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    c154:	2010      	movs	r0, #16
    c156:	4304      	orrs	r4, r0
    c158:	481b      	ldr	r0, [pc, #108]	; (c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c15a:	7800      	ldrb	r0, [r0, #0]
    c15c:	b1f8      	cbz	r0, c19e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c15e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c162:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c166:	d007      	beq.n	c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c168:	f44f 718a 	mov.w	r1, #276	; 0x114
    c16c:	4638      	mov	r0, r7
    c16e:	f004 f9b8 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c172:	b108      	cbz	r0, c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c174:	2001      	movs	r0, #1
    c176:	e000      	b.n	c17a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c178:	2000      	movs	r0, #0
    c17a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c17e:	b13e      	cbz	r6, c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c180:	f44f 718c 	mov.w	r1, #280	; 0x118
    c184:	4638      	mov	r0, r7
    c186:	f004 f9ac 	bl	104e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c18a:	b108      	cbz	r0, c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c18c:	2001      	movs	r0, #1
    c18e:	e000      	b.n	c192 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c190:	2000      	movs	r0, #0
    c192:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c196:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c19a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c19e:	f7ff ff2d 	bl	bffc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c1a2:	06e0      	lsls	r0, r4, #27
    c1a4:	d506      	bpl.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c1a6:	0720      	lsls	r0, r4, #28
    c1a8:	d404      	bmi.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c1aa:	7a68      	ldrb	r0, [r5, #9]
    c1ac:	2801      	cmp	r0, #1
    c1ae:	d101      	bne.n	c1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c1b0:	f044 0420 	orr.w	r4, r4, #32
    c1b4:	4620      	mov	r0, r4
    c1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1ba:	0000      	.short	0x0000
    c1bc:	200011dc 	.word	0x200011dc
    c1c0:	40008000 	.word	0x40008000
    c1c4:	40001000 	.word	0x40001000
    c1c8:	20000270 	.word	0x20000270
    c1cc:	4809      	ldr	r0, [pc, #36]	; (c1f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c1ce:	b510      	push	{r4, lr}
    c1d0:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c1d4:	f000 000f 	and.w	r0, r0, #15
    c1d8:	2803      	cmp	r0, #3
    c1da:	d006      	beq.n	c1ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c1dc:	2804      	cmp	r0, #4
    c1de:	d006      	beq.n	c1ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c1e0:	f240 11dd 	movw	r1, #477	; 0x1dd
    c1e4:	203e      	movs	r0, #62	; 0x3e
    c1e6:	f7f8 fc31 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1ea:	2001      	movs	r0, #1
    c1ec:	bd10      	pop	{r4, pc}
    c1ee:	2002      	movs	r0, #2
    c1f0:	bd10      	pop	{r4, pc}
    c1f2:	0000      	.short	0x0000
    c1f4:	40001000 	.word	0x40001000
    c1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1fc:	4c19      	ldr	r4, [pc, #100]	; (c264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c1fe:	460d      	mov	r5, r1
    c200:	7a21      	ldrb	r1, [r4, #8]
    c202:	b129      	cbz	r1, c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c204:	f010 0f11 	tst.w	r0, #17
    c208:	d00b      	beq.n	c222 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c20a:	f7ff f9d5 	bl	b5b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c20e:	e027      	b.n	c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c210:	4915      	ldr	r1, [pc, #84]	; (c268 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c212:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c216:	6008      	str	r0, [r1, #0]
    c218:	f000 f862 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c21c:	2000      	movs	r0, #0
    c21e:	7320      	strb	r0, [r4, #12]
    c220:	e01e      	b.n	c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c222:	2901      	cmp	r1, #1
    c224:	d001      	beq.n	c22a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c226:	2601      	movs	r6, #1
    c228:	e000      	b.n	c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c22a:	2600      	movs	r6, #0
    c22c:	79e0      	ldrb	r0, [r4, #7]
    c22e:	2801      	cmp	r0, #1
    c230:	d00e      	beq.n	c250 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c232:	2700      	movs	r7, #0
    c234:	f000 f854 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c238:	2196      	movs	r1, #150	; 0x96
    c23a:	4630      	mov	r0, r6
    c23c:	f000 f866 	bl	c30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c240:	4601      	mov	r1, r0
    c242:	b14f      	cbz	r7, c258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c244:	353b      	adds	r5, #59	; 0x3b
    c246:	428d      	cmp	r5, r1
    c248:	d904      	bls.n	c254 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c24a:	2000      	movs	r0, #0
    c24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c250:	2701      	movs	r7, #1
    c252:	e7ef      	b.n	c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c254:	2001      	movs	r0, #1
    c256:	71e0      	strb	r0, [r4, #7]
    c258:	7aa2      	ldrb	r2, [r4, #10]
    c25a:	4630      	mov	r0, r6
    c25c:	f7ff fc6a 	bl	bb34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c260:	2001      	movs	r0, #1
    c262:	e7f3      	b.n	c24c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c264:	200011dc 	.word	0x200011dc
    c268:	4001f508 	.word	0x4001f508
    c26c:	4805      	ldr	r0, [pc, #20]	; (c284 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c26e:	2100      	movs	r1, #0
    c270:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c274:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c278:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c27c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c280:	4770      	bx	lr
    c282:	0000      	.short	0x0000
    c284:	40001000 	.word	0x40001000
    c288:	4804      	ldr	r0, [pc, #16]	; (c29c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c28a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c28c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c290:	6281      	str	r1, [r0, #40]	; 0x28
    c292:	4903      	ldr	r1, [pc, #12]	; (c2a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c294:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c298:	6008      	str	r0, [r1, #0]
    c29a:	4770      	bx	lr
    c29c:	200011dc 	.word	0x200011dc
    c2a0:	4001f504 	.word	0x4001f504
    c2a4:	4a07      	ldr	r2, [pc, #28]	; (c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c2a6:	2000      	movs	r0, #0
    c2a8:	3208      	adds	r2, #8
    c2aa:	4906      	ldr	r1, [pc, #24]	; (c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c2ac:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c2b0:	1d0a      	adds	r2, r1, #4
    c2b2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c2b6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2ba:	4902      	ldr	r1, [pc, #8]	; (c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c2bc:	310c      	adds	r1, #12
    c2be:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c2c2:	4770      	bx	lr
    c2c4:	40008000 	.word	0x40008000
    c2c8:	4903      	ldr	r1, [pc, #12]	; (c2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c2ca:	79c9      	ldrb	r1, [r1, #7]
    c2cc:	2900      	cmp	r1, #0
    c2ce:	d102      	bne.n	c2d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c2d0:	4902      	ldr	r1, [pc, #8]	; (c2dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c2d2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c2d6:	4770      	bx	lr
    c2d8:	200011dc 	.word	0x200011dc
    c2dc:	4001f098 	.word	0x4001f098
    c2e0:	4802      	ldr	r0, [pc, #8]	; (c2ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c2e2:	2100      	movs	r1, #0
    c2e4:	71c1      	strb	r1, [r0, #7]
    c2e6:	7201      	strb	r1, [r0, #8]
    c2e8:	7241      	strb	r1, [r0, #9]
    c2ea:	4770      	bx	lr
    c2ec:	200011dc 	.word	0x200011dc
    c2f0:	4a05      	ldr	r2, [pc, #20]	; (c308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c2f2:	79d2      	ldrb	r2, [r2, #7]
    c2f4:	2a01      	cmp	r2, #1
    c2f6:	d006      	beq.n	c306 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c2f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2fc:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c300:	fbb1 f1f2 	udiv	r1, r1, r2
    c304:	1a40      	subs	r0, r0, r1
    c306:	4770      	bx	lr
    c308:	200011dc 	.word	0x200011dc
    c30c:	b570      	push	{r4, r5, r6, lr}
    c30e:	4c13      	ldr	r4, [pc, #76]	; (c35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c310:	4603      	mov	r3, r0
    c312:	460d      	mov	r5, r1
    c314:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c318:	2000      	movs	r0, #0
    c31a:	b15a      	cbz	r2, c334 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c31c:	4621      	mov	r1, r4
    c31e:	f891 1020 	ldrb.w	r1, [r1, #32]
    c322:	b163      	cbz	r3, c33e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c324:	2b01      	cmp	r3, #1
    c326:	d111      	bne.n	c34c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c328:	2a01      	cmp	r2, #1
    c32a:	4628      	mov	r0, r5
    c32c:	d012      	beq.n	c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c32e:	f004 f922 	bl	10576 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c332:	e009      	b.n	c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c334:	f240 7152 	movw	r1, #1874	; 0x752
    c338:	203e      	movs	r0, #62	; 0x3e
    c33a:	f7f8 fb87 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c33e:	2a01      	cmp	r2, #1
    c340:	4628      	mov	r0, r5
    c342:	d004      	beq.n	c34e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c344:	f004 f925 	bl	10592 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c348:	69e1      	ldr	r1, [r4, #28]
    c34a:	4408      	add	r0, r1
    c34c:	bd70      	pop	{r4, r5, r6, pc}
    c34e:	f004 f93a 	bl	105c6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c352:	e7f9      	b.n	c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c354:	f004 f928 	bl	105a8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c358:	e7f6      	b.n	c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c35a:	0000      	.short	0x0000
    c35c:	200011dc 	.word	0x200011dc
    c360:	b510      	push	{r4, lr}
    c362:	2200      	movs	r2, #0
    c364:	2901      	cmp	r1, #1
    c366:	d008      	beq.n	c37a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c368:	2902      	cmp	r1, #2
    c36a:	d004      	beq.n	c376 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c36c:	f240 2163 	movw	r1, #611	; 0x263
    c370:	203e      	movs	r0, #62	; 0x3e
    c372:	f7f8 fb6b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c37a:	4905      	ldr	r1, [pc, #20]	; (c390 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c37c:	430a      	orrs	r2, r1
    c37e:	4905      	ldr	r1, [pc, #20]	; (c394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c380:	600a      	str	r2, [r1, #0]
    c382:	4905      	ldr	r1, [pc, #20]	; (c398 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c384:	4308      	orrs	r0, r1
    c386:	4903      	ldr	r1, [pc, #12]	; (c394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c388:	1d09      	adds	r1, r1, #4
    c38a:	6008      	str	r0, [r1, #0]
    c38c:	bd10      	pop	{r4, pc}
    c38e:	0000      	.short	0x0000
    c390:	00100108 	.word	0x00100108
    c394:	40001514 	.word	0x40001514
    c398:	02030000 	.word	0x02030000

0000c39c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c39c:	4901      	ldr	r1, [pc, #4]	; (c3a4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c39e:	b2c0      	uxtb	r0, r0
    c3a0:	6008      	str	r0, [r1, #0]
    c3a2:	4770      	bx	lr
    c3a4:	4000150c 	.word	0x4000150c

0000c3a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c3a8:	b510      	push	{r4, lr}
    c3aa:	4907      	ldr	r1, [pc, #28]	; (c3c8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c3ac:	2801      	cmp	r0, #1
    c3ae:	d005      	beq.n	c3bc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c3b0:	2802      	cmp	r0, #2
    c3b2:	d005      	beq.n	c3c0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c3b4:	218b      	movs	r1, #139	; 0x8b
    c3b6:	203f      	movs	r0, #63	; 0x3f
    c3b8:	f7f8 fb48 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3bc:	2003      	movs	r0, #3
    c3be:	e000      	b.n	c3c2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c3c0:	2004      	movs	r0, #4
    c3c2:	6008      	str	r0, [r1, #0]
    c3c4:	bd10      	pop	{r4, pc}
    c3c6:	0000      	.short	0x0000
    c3c8:	40001510 	.word	0x40001510

0000c3cc <strcmp>:
    c3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
    c3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
    c3d4:	2a01      	cmp	r2, #1
    c3d6:	bf28      	it	cs
    c3d8:	429a      	cmpcs	r2, r3
    c3da:	d0f7      	beq.n	c3cc <strcmp>
    c3dc:	1ad0      	subs	r0, r2, r3
    c3de:	4770      	bx	lr

0000c3e0 <strlen>:
    c3e0:	4603      	mov	r3, r0
    c3e2:	f813 2b01 	ldrb.w	r2, [r3], #1
    c3e6:	2a00      	cmp	r2, #0
    c3e8:	d1fb      	bne.n	c3e2 <strlen+0x2>
    c3ea:	1a18      	subs	r0, r3, r0
    c3ec:	3801      	subs	r0, #1
    c3ee:	4770      	bx	lr

0000c3f0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c3f0:	4770      	bx	lr
    c3f2:	2100      	movs	r1, #0
    c3f4:	7081      	strb	r1, [r0, #2]
    c3f6:	7001      	strb	r1, [r0, #0]
    c3f8:	7041      	strb	r1, [r0, #1]
    c3fa:	4770      	bx	lr

0000c3fc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c3fc:	b570      	push	{r4, r5, r6, lr}
    c3fe:	f7f4 fec9 	bl	1194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c402:	4605      	mov	r5, r0
    c404:	2400      	movs	r4, #0
    c406:	e006      	b.n	c416 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c408:	4620      	mov	r0, r4
    c40a:	f7f4 fec9 	bl	11a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c40e:	f7ff fff0 	bl	c3f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c412:	1c64      	adds	r4, r4, #1
    c414:	b2e4      	uxtb	r4, r4
    c416:	42ac      	cmp	r4, r5
    c418:	d3f6      	bcc.n	c408 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c41a:	bd70      	pop	{r4, r5, r6, pc}

0000c41c <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c41c:	2000      	movs	r0, #0
    c41e:	f7f7 bc8f 	b.w	3d40 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c422:	b510      	push	{r4, lr}
    c424:	f7f7 f962 	bl	36ec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c42c:	f000 b800 	b.w	c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c430 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c430:	0a41      	lsrs	r1, r0, #9
    c432:	f643 5209 	movw	r2, #15625	; 0x3d09
    c436:	4351      	muls	r1, r2
    c438:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c43c:	fb10 f002 	smulbb	r0, r0, r2
    c440:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c444:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c448:	4770      	bx	lr

0000c44a <MPSL_IRQ_RADIO_Handler>:
    c44a:	f7f5 bf53 	b.w	22f4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c44e:	2800      	cmp	r0, #0
    c450:	db09      	blt.n	c466 <MPSL_IRQ_RADIO_Handler+0x1c>
    c452:	f000 021f 	and.w	r2, r0, #31
    c456:	2101      	movs	r1, #1
    c458:	4091      	lsls	r1, r2
    c45a:	0940      	lsrs	r0, r0, #5
    c45c:	0080      	lsls	r0, r0, #2
    c45e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c462:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c466:	4770      	bx	lr
    c468:	2800      	cmp	r0, #0
    c46a:	db0d      	blt.n	c488 <MPSL_IRQ_RADIO_Handler+0x3e>
    c46c:	f000 021f 	and.w	r2, r0, #31
    c470:	2101      	movs	r1, #1
    c472:	4091      	lsls	r1, r2
    c474:	0940      	lsrs	r0, r0, #5
    c476:	0080      	lsls	r0, r0, #2
    c478:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c47c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c480:	f3bf 8f4f 	dsb	sy
    c484:	f3bf 8f6f 	isb	sy
    c488:	4770      	bx	lr

0000c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c48a:	b570      	push	{r4, r5, r6, lr}
    c48c:	4602      	mov	r2, r0
    c48e:	2000      	movs	r0, #0
    c490:	2900      	cmp	r1, #0
    c492:	d01d      	beq.n	c4d0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c494:	fba2 0101 	umull	r0, r1, r2, r1
    c498:	0a40      	lsrs	r0, r0, #9
    c49a:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c49e:	0a49      	lsrs	r1, r1, #9
    c4a0:	1c40      	adds	r0, r0, #1
    c4a2:	f141 0100 	adc.w	r1, r1, #0
    c4a6:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c4aa:	1883      	adds	r3, r0, r2
    c4ac:	f141 0100 	adc.w	r1, r1, #0
    c4b0:	1c5b      	adds	r3, r3, #1
    c4b2:	f141 0400 	adc.w	r4, r1, #0
    c4b6:	2100      	movs	r1, #0
    c4b8:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c4bc:	41a1      	sbcs	r1, r4
    c4be:	d203      	bcs.n	c4c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c4c0:	2171      	movs	r1, #113	; 0x71
    c4c2:	206d      	movs	r0, #109	; 0x6d
    c4c4:	f7f8 f816 	bl	44f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4c8:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c4cc:	fbb0 f0f2 	udiv	r0, r0, r2
    c4d0:	bd70      	pop	{r4, r5, r6, pc}
    c4d2:	5840      	ldr	r0, [r0, r1]
    c4d4:	2800      	cmp	r0, #0
    c4d6:	d000      	beq.n	c4da <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c4d8:	2001      	movs	r0, #1
    c4da:	4770      	bx	lr
    c4dc:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c4e0:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c4e4:	f002 0201 	and.w	r2, r2, #1
    c4e8:	03c0      	lsls	r0, r0, #15
    c4ea:	d503      	bpl.n	c4f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c4ec:	428a      	cmp	r2, r1
    c4ee:	d101      	bne.n	c4f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c4f0:	2001      	movs	r0, #1
    c4f2:	4770      	bx	lr
    c4f4:	2000      	movs	r0, #0
    c4f6:	4770      	bx	lr

0000c4f8 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c4f8:	b510      	push	{r4, lr}
    c4fa:	2101      	movs	r1, #1
    c4fc:	0788      	lsls	r0, r1, #30
    c4fe:	f7f7 ffa3 	bl	4448 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c502:	2800      	cmp	r0, #0
    c504:	d000      	beq.n	c508 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c506:	2001      	movs	r0, #1
    c508:	bd10      	pop	{r4, pc}

0000c50a <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c50a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c50e:	2101      	movs	r1, #1
    c510:	6001      	str	r1, [r0, #0]
    c512:	4770      	bx	lr

0000c514 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c514:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c518:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c51c:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c520:	f002 0203 	and.w	r2, r2, #3
    c524:	03c9      	lsls	r1, r1, #15
    c526:	d503      	bpl.n	c530 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c528:	4282      	cmp	r2, r0
    c52a:	d101      	bne.n	c530 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c52c:	2001      	movs	r0, #1
    c52e:	4770      	bx	lr
    c530:	2000      	movs	r0, #0
    c532:	4770      	bx	lr

0000c534 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c534:	b510      	push	{r4, lr}
    c536:	2100      	movs	r1, #0
    c538:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c53c:	f7f7 ff84 	bl	4448 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c540:	2800      	cmp	r0, #0
    c542:	d000      	beq.n	c546 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c544:	2001      	movs	r0, #1
    c546:	bd10      	pop	{r4, pc}
    c548:	2800      	cmp	r0, #0
    c54a:	db09      	blt.n	c560 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c54c:	f000 021f 	and.w	r2, r0, #31
    c550:	2101      	movs	r1, #1
    c552:	4091      	lsls	r1, r2
    c554:	0940      	lsrs	r0, r0, #5
    c556:	0080      	lsls	r0, r0, #2
    c558:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c55c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c560:	4770      	bx	lr
    c562:	2800      	cmp	r0, #0
    c564:	db0d      	blt.n	c582 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c566:	f000 021f 	and.w	r2, r0, #31
    c56a:	2101      	movs	r1, #1
    c56c:	4091      	lsls	r1, r2
    c56e:	0940      	lsrs	r0, r0, #5
    c570:	0080      	lsls	r0, r0, #2
    c572:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c576:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c57a:	f3bf 8f4f 	dsb	sy
    c57e:	f3bf 8f6f 	isb	sy
    c582:	4770      	bx	lr
    c584:	00021000 	.word	0x00021000
    c588:	000000fa 	.word	0x000000fa
    c58c:	24625723 	.word	0x24625723
    c590:	578f3123 	.word	0x578f3123
    c594:	2fd1ee74 	.word	0x2fd1ee74
    c598:	4594c088 	.word	0x4594c088
    c59c:	36f9a2f7 	.word	0x36f9a2f7
    c5a0:	2800      	cmp	r0, #0
    c5a2:	db09      	blt.n	c5b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c5a4:	f000 021f 	and.w	r2, r0, #31
    c5a8:	2101      	movs	r1, #1
    c5aa:	4091      	lsls	r1, r2
    c5ac:	0940      	lsrs	r0, r0, #5
    c5ae:	0080      	lsls	r0, r0, #2
    c5b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c5b4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c5b8:	4770      	bx	lr

0000c5ba <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c5ba:	f3ef 8110 	mrs	r1, PRIMASK
    c5be:	b672      	cpsid	i
    c5c0:	7802      	ldrb	r2, [r0, #0]
    c5c2:	2a01      	cmp	r2, #1
    c5c4:	d001      	beq.n	c5ca <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c5c6:	2201      	movs	r2, #1
    c5c8:	e000      	b.n	c5cc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c5ca:	2200      	movs	r2, #0
    c5cc:	2301      	movs	r3, #1
    c5ce:	7003      	strb	r3, [r0, #0]
    c5d0:	b901      	cbnz	r1, c5d4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c5d2:	b662      	cpsie	i
    c5d4:	b10a      	cbz	r2, c5da <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c5d6:	2000      	movs	r0, #0
    c5d8:	4770      	bx	lr
    c5da:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c5de:	4770      	bx	lr

0000c5e0 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c5e0:	2100      	movs	r1, #0
    c5e2:	7001      	strb	r1, [r0, #0]
    c5e4:	4608      	mov	r0, r1
    c5e6:	4770      	bx	lr

0000c5e8 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c5e8:	f3ef 8110 	mrs	r1, PRIMASK
    c5ec:	b672      	cpsid	i
    c5ee:	2200      	movs	r2, #0
    c5f0:	7002      	strb	r2, [r0, #0]
    c5f2:	b901      	cbnz	r1, c5f6 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c5f4:	b662      	cpsie	i
    c5f6:	2000      	movs	r0, #0
    c5f8:	4770      	bx	lr

0000c5fa <mpsl_low_priority_process>:
    c5fa:	f7f8 b867 	b.w	46cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c5fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c5fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c602:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c606:	280f      	cmp	r0, #15
    c608:	d001      	beq.n	c60e <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c60a:	2000      	movs	r0, #0
    c60c:	4770      	bx	lr
    c60e:	2001      	movs	r0, #1
    c610:	4770      	bx	lr

0000c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c612:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c616:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c61a:	280a      	cmp	r0, #10
    c61c:	d001      	beq.n	c622 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c61e:	2000      	movs	r0, #0
    c620:	4770      	bx	lr
    c622:	2001      	movs	r0, #1
    c624:	4770      	bx	lr

0000c626 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c626:	b500      	push	{lr}
    c628:	f7ff fff3 	bl	c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c62c:	b120      	cbz	r0, c638 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c62e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c632:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c636:	b108      	cbz	r0, c63c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c638:	2000      	movs	r0, #0
    c63a:	bd00      	pop	{pc}
    c63c:	2001      	movs	r0, #1
    c63e:	bd00      	pop	{pc}

0000c640 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c640:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c644:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c648:	280e      	cmp	r0, #14
    c64a:	d001      	beq.n	c650 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c64c:	2000      	movs	r0, #0
    c64e:	4770      	bx	lr
    c650:	2001      	movs	r0, #1
    c652:	4770      	bx	lr

0000c654 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c654:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c658:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c65c:	2810      	cmp	r0, #16
    c65e:	d001      	beq.n	c664 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c660:	2000      	movs	r0, #0
    c662:	4770      	bx	lr
    c664:	2001      	movs	r0, #1
    c666:	4770      	bx	lr

0000c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c668:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c66c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c670:	2806      	cmp	r0, #6
    c672:	d003      	beq.n	c67c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c674:	1c40      	adds	r0, r0, #1
    c676:	d001      	beq.n	c67c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c678:	2000      	movs	r0, #0
    c67a:	4770      	bx	lr
    c67c:	2001      	movs	r0, #1
    c67e:	4770      	bx	lr

0000c680 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c680:	b500      	push	{lr}
    c682:	f7ff fff1 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c686:	b148      	cbz	r0, c69c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c688:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c68c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c690:	2806      	cmp	r0, #6
    c692:	d303      	bcc.n	c69c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c694:	1c40      	adds	r0, r0, #1
    c696:	d001      	beq.n	c69c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c698:	2001      	movs	r0, #1
    c69a:	bd00      	pop	{pc}
    c69c:	2000      	movs	r0, #0
    c69e:	bd00      	pop	{pc}

0000c6a0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c6a0:	b500      	push	{lr}
    c6a2:	f7ff ffe1 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6a6:	b138      	cbz	r0, c6b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c6a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c6ac:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c6b0:	2806      	cmp	r0, #6
    c6b2:	d303      	bcc.n	c6bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c6b4:	1c40      	adds	r0, r0, #1
    c6b6:	d001      	beq.n	c6bc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c6b8:	2000      	movs	r0, #0
    c6ba:	bd00      	pop	{pc}
    c6bc:	2001      	movs	r0, #1
    c6be:	bd00      	pop	{pc}

0000c6c0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c6c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c6c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c6c8:	280d      	cmp	r0, #13
    c6ca:	d001      	beq.n	c6d0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c6cc:	2000      	movs	r0, #0
    c6ce:	4770      	bx	lr
    c6d0:	2001      	movs	r0, #1
    c6d2:	4770      	bx	lr

0000c6d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c6d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c6d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c6dc:	2808      	cmp	r0, #8
    c6de:	d001      	beq.n	c6e4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c6e0:	2000      	movs	r0, #0
    c6e2:	4770      	bx	lr
    c6e4:	2001      	movs	r0, #1
    c6e6:	4770      	bx	lr

0000c6e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c6e8:	2a00      	cmp	r2, #0
    c6ea:	bf04      	itt	eq
    c6ec:	2000      	moveq	r0, #0
    c6ee:	4770      	bxeq	lr
    c6f0:	1e52      	subs	r2, r2, #1
    c6f2:	d007      	beq.n	c704 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c6f4:	7803      	ldrb	r3, [r0, #0]
    c6f6:	f891 c000 	ldrb.w	ip, [r1]
    c6fa:	4563      	cmp	r3, ip
    c6fc:	bf04      	itt	eq
    c6fe:	1c40      	addeq	r0, r0, #1
    c700:	1c49      	addeq	r1, r1, #1
    c702:	d0f5      	beq.n	c6f0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c704:	7800      	ldrb	r0, [r0, #0]
    c706:	7809      	ldrb	r1, [r1, #0]
    c708:	1a40      	subs	r0, r0, r1
    c70a:	4770      	bx	lr

0000c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c70c:	b4f0      	push	{r4, r5, r6, r7}
    c70e:	ea80 0c01 	eor.w	ip, r0, r1
    c712:	4603      	mov	r3, r0
    c714:	f01c 0f03 	tst.w	ip, #3
    c718:	d13c      	bne.n	c794 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c71a:	f013 0f03 	tst.w	r3, #3
    c71e:	d00b      	beq.n	c738 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c720:	2a00      	cmp	r2, #0
    c722:	bf04      	itt	eq
    c724:	bcf0      	popeq	{r4, r5, r6, r7}
    c726:	4770      	bxeq	lr
    c728:	f811 cb01 	ldrb.w	ip, [r1], #1
    c72c:	f803 cb01 	strb.w	ip, [r3], #1
    c730:	1e52      	subs	r2, r2, #1
    c732:	f013 0f03 	tst.w	r3, #3
    c736:	d1f3      	bne.n	c720 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c738:	2a03      	cmp	r2, #3
    c73a:	d94f      	bls.n	c7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c73c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c740:	d24c      	bcs.n	c7dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c742:	f1c2 0c00 	rsb	ip, r2, #0
    c746:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c74a:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c74e:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c752:	f1cc 0c00 	rsb	ip, ip, #0
    c756:	f1bc 0f00 	cmp.w	ip, #0
    c75a:	dd1b      	ble.n	c794 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c75c:	1f0d      	subs	r5, r1, #4
    c75e:	1f1c      	subs	r4, r3, #4
    c760:	f01c 0f01 	tst.w	ip, #1
    c764:	d003      	beq.n	c76e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c766:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c76a:	f844 6f04 	str.w	r6, [r4, #4]!
    c76e:	ea5f 066c 	movs.w	r6, ip, asr #1
    c772:	d007      	beq.n	c784 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c774:	686f      	ldr	r7, [r5, #4]
    c776:	6067      	str	r7, [r4, #4]
    c778:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c77c:	f844 7f08 	str.w	r7, [r4, #8]!
    c780:	1e76      	subs	r6, r6, #1
    c782:	d1f7      	bne.n	c774 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c784:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c788:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c78c:	f1cc 0c00 	rsb	ip, ip, #0
    c790:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c794:	2a00      	cmp	r2, #0
    c796:	bf04      	itt	eq
    c798:	bcf0      	popeq	{r4, r5, r6, r7}
    c79a:	4770      	bxeq	lr
    c79c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c7a0:	d226      	bcs.n	c7f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c7a2:	2a00      	cmp	r2, #0
    c7a4:	bfdc      	itt	le
    c7a6:	bcf0      	pople	{r4, r5, r6, r7}
    c7a8:	4770      	bxle	lr
    c7aa:	1e49      	subs	r1, r1, #1
    c7ac:	1e5b      	subs	r3, r3, #1
    c7ae:	f012 0f01 	tst.w	r2, #1
    c7b2:	d003      	beq.n	c7bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c7b4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c7b8:	f803 cf01 	strb.w	ip, [r3, #1]!
    c7bc:	1052      	asrs	r2, r2, #1
    c7be:	bf04      	itt	eq
    c7c0:	bcf0      	popeq	{r4, r5, r6, r7}
    c7c2:	4770      	bxeq	lr
    c7c4:	f891 c001 	ldrb.w	ip, [r1, #1]
    c7c8:	f883 c001 	strb.w	ip, [r3, #1]
    c7cc:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c7d0:	f803 cf02 	strb.w	ip, [r3, #2]!
    c7d4:	1e52      	subs	r2, r2, #1
    c7d6:	d1f5      	bne.n	c7c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c7d8:	bcf0      	pop	{r4, r5, r6, r7}
    c7da:	4770      	bx	lr
    c7dc:	2a04      	cmp	r2, #4
    c7de:	d3d9      	bcc.n	c794 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c7e0:	f851 cb04 	ldr.w	ip, [r1], #4
    c7e4:	1f12      	subs	r2, r2, #4
    c7e6:	f843 cb04 	str.w	ip, [r3], #4
    c7ea:	2a04      	cmp	r2, #4
    c7ec:	d2f8      	bcs.n	c7e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c7ee:	e7d1      	b.n	c794 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c7f0:	f811 cb01 	ldrb.w	ip, [r1], #1
    c7f4:	f803 cb01 	strb.w	ip, [r3], #1
    c7f8:	1e52      	subs	r2, r2, #1
    c7fa:	d1f9      	bne.n	c7f0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c7fc:	bcf0      	pop	{r4, r5, r6, r7}
    c7fe:	4770      	bx	lr

0000c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c800:	b470      	push	{r4, r5, r6}
    c802:	4603      	mov	r3, r0
    c804:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c808:	f010 0f03 	tst.w	r0, #3
    c80c:	d009      	beq.n	c822 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c80e:	2a00      	cmp	r2, #0
    c810:	bf04      	itt	eq
    c812:	bc70      	popeq	{r4, r5, r6}
    c814:	4770      	bxeq	lr
    c816:	f803 cb01 	strb.w	ip, [r3], #1
    c81a:	1e52      	subs	r2, r2, #1
    c81c:	f013 0f03 	tst.w	r3, #3
    c820:	d1f5      	bne.n	c80e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c822:	b2c9      	uxtb	r1, r1
    c824:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c828:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c82c:	2a03      	cmp	r2, #3
    c82e:	d939      	bls.n	c8a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c830:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c834:	d236      	bcs.n	c8a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c836:	4251      	negs	r1, r2
    c838:	17cc      	asrs	r4, r1, #31
    c83a:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c83e:	1089      	asrs	r1, r1, #2
    c840:	424e      	negs	r6, r1
    c842:	2e00      	cmp	r6, #0
    c844:	dd11      	ble.n	c86a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c846:	1f19      	subs	r1, r3, #4
    c848:	f016 0f01 	tst.w	r6, #1
    c84c:	bf18      	it	ne
    c84e:	f841 5f04 	strne.w	r5, [r1, #4]!
    c852:	1074      	asrs	r4, r6, #1
    c854:	d004      	beq.n	c860 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c856:	604d      	str	r5, [r1, #4]
    c858:	f841 5f08 	str.w	r5, [r1, #8]!
    c85c:	1e64      	subs	r4, r4, #1
    c85e:	d1fa      	bne.n	c856 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c860:	4271      	negs	r1, r6
    c862:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c866:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c86a:	2a00      	cmp	r2, #0
    c86c:	bf04      	itt	eq
    c86e:	bc70      	popeq	{r4, r5, r6}
    c870:	4770      	bxeq	lr
    c872:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c876:	d21d      	bcs.n	c8b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c878:	2a00      	cmp	r2, #0
    c87a:	bfdc      	itt	le
    c87c:	bc70      	pople	{r4, r5, r6}
    c87e:	4770      	bxle	lr
    c880:	1e59      	subs	r1, r3, #1
    c882:	f012 0f01 	tst.w	r2, #1
    c886:	bf18      	it	ne
    c888:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c88c:	1052      	asrs	r2, r2, #1
    c88e:	bf04      	itt	eq
    c890:	bc70      	popeq	{r4, r5, r6}
    c892:	4770      	bxeq	lr
    c894:	f881 c001 	strb.w	ip, [r1, #1]
    c898:	f801 cf02 	strb.w	ip, [r1, #2]!
    c89c:	1e52      	subs	r2, r2, #1
    c89e:	d1f9      	bne.n	c894 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c8a0:	bc70      	pop	{r4, r5, r6}
    c8a2:	4770      	bx	lr
    c8a4:	2a04      	cmp	r2, #4
    c8a6:	d3e0      	bcc.n	c86a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c8a8:	1f12      	subs	r2, r2, #4
    c8aa:	f843 5b04 	str.w	r5, [r3], #4
    c8ae:	2a04      	cmp	r2, #4
    c8b0:	d2fa      	bcs.n	c8a8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c8b2:	e7da      	b.n	c86a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c8b4:	f803 cb01 	strb.w	ip, [r3], #1
    c8b8:	1e52      	subs	r2, r2, #1
    c8ba:	d1fb      	bne.n	c8b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c8bc:	bc70      	pop	{r4, r5, r6}
    c8be:	4770      	bx	lr
    c8c0:	f04f 30ff 	mov.w	r0, #4294967295
    c8c4:	4770      	bx	lr
    c8c6:	2000      	movs	r0, #0
    c8c8:	4770      	bx	lr
    c8ca:	2000      	movs	r0, #0
    c8cc:	4770      	bx	lr
    c8ce:	f04f 30ff 	mov.w	r0, #4294967295
    c8d2:	4770      	bx	lr
    c8d4:	4770      	bx	lr
    c8d6:	4770      	bx	lr
    c8d8:	2000      	movs	r0, #0
    c8da:	4770      	bx	lr
    c8dc:	f04f 30ff 	mov.w	r0, #4294967295
    c8e0:	4770      	bx	lr
    c8e2:	f04f 30ff 	mov.w	r0, #4294967295
    c8e6:	4770      	bx	lr
    c8e8:	2100      	movs	r1, #0
    c8ea:	7001      	strb	r1, [r0, #0]
    c8ec:	4770      	bx	lr
    c8ee:	f04f 30ff 	mov.w	r0, #4294967295
    c8f2:	4770      	bx	lr
    c8f4:	f04f 30ff 	mov.w	r0, #4294967295
    c8f8:	4770      	bx	lr
    c8fa:	2000      	movs	r0, #0
    c8fc:	4770      	bx	lr
    c8fe:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c902:	4605      	mov	r5, r0
    c904:	f100 0003 	add.w	r0, r0, #3
    c908:	f020 0003 	bic.w	r0, r0, #3
    c90c:	460c      	mov	r4, r1
    c90e:	9000      	str	r0, [sp, #0]
    c910:	7849      	ldrb	r1, [r1, #1]
    c912:	f88d 1004 	strb.w	r1, [sp, #4]
    c916:	78a1      	ldrb	r1, [r4, #2]
    c918:	0016      	movs	r6, r2
    c91a:	f88d 1005 	strb.w	r1, [sp, #5]
    c91e:	d000      	beq.n	c922 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    c920:	2000      	movs	r0, #0
    c922:	a901      	add	r1, sp, #4
    c924:	f7f8 fa8a 	bl	4e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c928:	9900      	ldr	r1, [sp, #0]
    c92a:	4408      	add	r0, r1
    c92c:	9000      	str	r0, [sp, #0]
    c92e:	78a1      	ldrb	r1, [r4, #2]
    c930:	b141      	cbz	r1, c944 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    c932:	8a63      	ldrh	r3, [r4, #18]
    c934:	78e2      	ldrb	r2, [r4, #3]
    c936:	b106      	cbz	r6, c93a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    c938:	2000      	movs	r0, #0
    c93a:	f7f8 fd0f 	bl	535c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c93e:	9900      	ldr	r1, [sp, #0]
    c940:	4408      	add	r0, r1
    c942:	9000      	str	r0, [sp, #0]
    c944:	4632      	mov	r2, r6
    c946:	4621      	mov	r1, r4
    c948:	4668      	mov	r0, sp
    c94a:	f000 f808 	bl	c95e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    c94e:	9800      	ldr	r0, [sp, #0]
    c950:	1dc0      	adds	r0, r0, #7
    c952:	f020 0007 	bic.w	r0, r0, #7
    c956:	9000      	str	r0, [sp, #0]
    c958:	1b40      	subs	r0, r0, r5
    c95a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c95e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c962:	4606      	mov	r6, r0
    c964:	460c      	mov	r4, r1
    c966:	7808      	ldrb	r0, [r1, #0]
    c968:	7849      	ldrb	r1, [r1, #1]
    c96a:	2700      	movs	r7, #0
    c96c:	4408      	add	r0, r1
    c96e:	4691      	mov	r9, r2
    c970:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c974:	463d      	mov	r5, r7
    c976:	e00e      	b.n	c996 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c978:	7a23      	ldrb	r3, [r4, #8]
    c97a:	2b02      	cmp	r3, #2
    c97c:	d200      	bcs.n	c980 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c97e:	2302      	movs	r3, #2
    c980:	79e2      	ldrb	r2, [r4, #7]
    c982:	2a03      	cmp	r2, #3
    c984:	d200      	bcs.n	c988 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    c986:	2203      	movs	r2, #3
    c988:	79a1      	ldrb	r1, [r4, #6]
    c98a:	7960      	ldrb	r0, [r4, #5]
    c98c:	f000 fedf 	bl	d74e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c990:	1c6d      	adds	r5, r5, #1
    c992:	4407      	add	r7, r0
    c994:	b2ed      	uxtb	r5, r5
    c996:	4545      	cmp	r5, r8
    c998:	d3ee      	bcc.n	c978 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c99a:	6830      	ldr	r0, [r6, #0]
    c99c:	1cc0      	adds	r0, r0, #3
    c99e:	f020 0003 	bic.w	r0, r0, #3
    c9a2:	6030      	str	r0, [r6, #0]
    c9a4:	f1b9 0f00 	cmp.w	r9, #0
    c9a8:	d000      	beq.n	c9ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    c9aa:	2000      	movs	r0, #0
    c9ac:	463a      	mov	r2, r7
    c9ae:	4641      	mov	r1, r8
    c9b0:	f7f8 fc1e 	bl	51f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c9b4:	6831      	ldr	r1, [r6, #0]
    c9b6:	4408      	add	r0, r1
    c9b8:	6030      	str	r0, [r6, #0]
    c9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c9be <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c9be:	2000      	movs	r0, #0
    c9c0:	4770      	bx	lr

0000c9c2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c9c2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c9c4:	4604      	mov	r4, r0
    c9c6:	1d01      	adds	r1, r0, #4
    c9c8:	4668      	mov	r0, sp
    c9ca:	f7fa f8e7 	bl	6b9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c9ce:	2800      	cmp	r0, #0
    c9d0:	d004      	beq.n	c9dc <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c9d2:	4669      	mov	r1, sp
    c9d4:	4620      	mov	r0, r4
    c9d6:	f000 f848 	bl	ca6a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c9da:	2001      	movs	r0, #1
    c9dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c9de <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c9de:	b50e      	push	{r1, r2, r3, lr}
    c9e0:	4601      	mov	r1, r0
    c9e2:	4668      	mov	r0, sp
    c9e4:	f000 f827 	bl	ca36 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9e8:	4668      	mov	r0, sp
    c9ea:	f001 fc76 	bl	e2da <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9ee:	bd0e      	pop	{r1, r2, r3, pc}

0000c9f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c9f0:	b510      	push	{r4, lr}
    c9f2:	4604      	mov	r4, r0
    c9f4:	4620      	mov	r0, r4
    c9f6:	f7f8 f90f 	bl	4c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c9fa:	2800      	cmp	r0, #0
    c9fc:	d006      	beq.n	ca0c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c9fe:	78a1      	ldrb	r1, [r4, #2]
    ca00:	7820      	ldrb	r0, [r4, #0]
    ca02:	f000 f804 	bl	ca0e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    ca06:	2800      	cmp	r0, #0
    ca08:	d0f4      	beq.n	c9f4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    ca0a:	2001      	movs	r0, #1
    ca0c:	bd10      	pop	{r4, pc}
    ca0e:	b570      	push	{r4, r5, r6, lr}
    ca10:	460c      	mov	r4, r1
    ca12:	4605      	mov	r5, r0
    ca14:	f7f8 f972 	bl	4cfc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    ca18:	2800      	cmp	r0, #0
    ca1a:	d002      	beq.n	ca22 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    ca1c:	2d3e      	cmp	r5, #62	; 0x3e
    ca1e:	d001      	beq.n	ca24 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    ca20:	2001      	movs	r0, #1
    ca22:	bd70      	pop	{r4, r5, r6, pc}
    ca24:	2c12      	cmp	r4, #18
    ca26:	d004      	beq.n	ca32 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    ca28:	4620      	mov	r0, r4
    ca2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca2e:	f7f8 b981 	b.w	4d34 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ca32:	2000      	movs	r0, #0
    ca34:	bd70      	pop	{r4, r5, r6, pc}

0000ca36 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    ca36:	880a      	ldrh	r2, [r1, #0]
    ca38:	f3c2 020b 	ubfx	r2, r2, #0, #12
    ca3c:	8002      	strh	r2, [r0, #0]
    ca3e:	884a      	ldrh	r2, [r1, #2]
    ca40:	8042      	strh	r2, [r0, #2]
    ca42:	784a      	ldrb	r2, [r1, #1]
    ca44:	0993      	lsrs	r3, r2, #6
    ca46:	2200      	movs	r2, #0
    ca48:	7142      	strb	r2, [r0, #5]
    ca4a:	784b      	ldrb	r3, [r1, #1]
    ca4c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ca50:	b11b      	cbz	r3, ca5a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ca52:	2b01      	cmp	r3, #1
    ca54:	d005      	beq.n	ca62 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ca56:	2b02      	cmp	r3, #2
    ca58:	d005      	beq.n	ca66 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ca5a:	7102      	strb	r2, [r0, #4]
    ca5c:	1d09      	adds	r1, r1, #4
    ca5e:	6081      	str	r1, [r0, #8]
    ca60:	4770      	bx	lr
    ca62:	2201      	movs	r2, #1
    ca64:	e7f9      	b.n	ca5a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ca66:	2202      	movs	r2, #2
    ca68:	e7f7      	b.n	ca5a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ca6a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ca6a:	b510      	push	{r4, lr}
    ca6c:	460c      	mov	r4, r1
    ca6e:	7809      	ldrb	r1, [r1, #0]
    ca70:	7001      	strb	r1, [r0, #0]
    ca72:	7841      	ldrb	r1, [r0, #1]
    ca74:	f021 010f 	bic.w	r1, r1, #15
    ca78:	7041      	strb	r1, [r0, #1]
    ca7a:	8822      	ldrh	r2, [r4, #0]
    ca7c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ca80:	4311      	orrs	r1, r2
    ca82:	7041      	strb	r1, [r0, #1]
    ca84:	78a2      	ldrb	r2, [r4, #2]
    ca86:	7082      	strb	r2, [r0, #2]
    ca88:	8862      	ldrh	r2, [r4, #2]
    ca8a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    ca8e:	0a12      	lsrs	r2, r2, #8
    ca90:	70c2      	strb	r2, [r0, #3]
    ca92:	7041      	strb	r1, [r0, #1]
    ca94:	7922      	ldrb	r2, [r4, #4]
    ca96:	f002 0203 	and.w	r2, r2, #3
    ca9a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca9e:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    caa2:	7041      	strb	r1, [r0, #1]
    caa4:	7962      	ldrb	r2, [r4, #5]
    caa6:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    caaa:	7041      	strb	r1, [r0, #1]
    caac:	68a1      	ldr	r1, [r4, #8]
    caae:	1d02      	adds	r2, r0, #4
    cab0:	4291      	cmp	r1, r2
    cab2:	d006      	beq.n	cac2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    cab4:	8862      	ldrh	r2, [r4, #2]
    cab6:	2afb      	cmp	r2, #251	; 0xfb
    cab8:	d300      	bcc.n	cabc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    caba:	22fb      	movs	r2, #251	; 0xfb
    cabc:	1d00      	adds	r0, r0, #4
    cabe:	f7ff fe25 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cac2:	78a0      	ldrb	r0, [r4, #2]
    cac4:	1d00      	adds	r0, r0, #4
    cac6:	b2c0      	uxtb	r0, r0
    cac8:	bd10      	pop	{r4, pc}

0000caca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    caca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cace:	4604      	mov	r4, r0
    cad0:	780f      	ldrb	r7, [r1, #0]
    cad2:	2000      	movs	r0, #0
    cad4:	250c      	movs	r5, #12
    cad6:	2605      	movs	r6, #5
    cad8:	223e      	movs	r2, #62	; 0x3e
    cada:	23ff      	movs	r3, #255	; 0xff
    cadc:	2f1b      	cmp	r7, #27
    cade:	d27d      	bcs.n	cbdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    cae0:	e8df f007 	tbb	[pc, r7]
    cae4:	27250eea 	.word	0x27250eea
    cae8:	816d632d 	.word	0x816d632d
    caec:	bcb1af9b 	.word	0xbcb1af9b
    caf0:	eaf4e2c7 	.word	0xeaf4e2c7
    caf4:	d5d231ea 	.word	0xd5d231ea
    caf8:	eff0f1fd 	.word	0xeff0f1fd
    cafc:	00ecedee 	.word	0x00ecedee
    cb00:	7025      	strb	r5, [r4, #0]
    cb02:	7908      	ldrb	r0, [r1, #4]
    cb04:	70a0      	strb	r0, [r4, #2]
    cb06:	7948      	ldrb	r0, [r1, #5]
    cb08:	70e0      	strb	r0, [r4, #3]
    cb0a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cb0e:	0a00      	lsrs	r0, r0, #8
    cb10:	7120      	strb	r0, [r4, #4]
    cb12:	79c8      	ldrb	r0, [r1, #7]
    cb14:	7160      	strb	r0, [r4, #5]
    cb16:	7a08      	ldrb	r0, [r1, #8]
    cb18:	71a0      	strb	r0, [r4, #6]
    cb1a:	8908      	ldrh	r0, [r1, #8]
    cb1c:	0a00      	lsrs	r0, r0, #8
    cb1e:	71e0      	strb	r0, [r4, #7]
    cb20:	7a88      	ldrb	r0, [r1, #10]
    cb22:	7220      	strb	r0, [r4, #8]
    cb24:	8948      	ldrh	r0, [r1, #10]
    cb26:	0a00      	lsrs	r0, r0, #8
    cb28:	7260      	strb	r0, [r4, #9]
    cb2a:	2008      	movs	r0, #8
    cb2c:	e0c2      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb2e:	2010      	movs	r0, #16
    cb30:	e000      	b.n	cb34 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    cb32:	201a      	movs	r0, #26
    cb34:	7020      	strb	r0, [r4, #0]
    cb36:	7908      	ldrb	r0, [r1, #4]
    cb38:	70a0      	strb	r0, [r4, #2]
    cb3a:	2001      	movs	r0, #1
    cb3c:	e0ba      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cb3e:	4620      	mov	r0, r4
    cb40:	f000 f946 	bl	cdd0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    cb44:	e0b4      	b.n	ccb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    cb46:	7022      	strb	r2, [r4, #0]
    cb48:	200a      	movs	r0, #10
    cb4a:	70a0      	strb	r0, [r4, #2]
    cb4c:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    cb50:	70e0      	strb	r0, [r4, #3]
    cb52:	7888      	ldrb	r0, [r1, #2]
    cb54:	7120      	strb	r0, [r4, #4]
    cb56:	8848      	ldrh	r0, [r1, #2]
    cb58:	0a00      	lsrs	r0, r0, #8
    cb5a:	7160      	strb	r0, [r4, #5]
    cb5c:	7908      	ldrb	r0, [r1, #4]
    cb5e:	71a0      	strb	r0, [r4, #6]
    cb60:	7948      	ldrb	r0, [r1, #5]
    cb62:	71e0      	strb	r0, [r4, #7]
    cb64:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cb68:	60a0      	str	r0, [r4, #8]
    cb6a:	8948      	ldrh	r0, [r1, #10]
    cb6c:	81a0      	strh	r0, [r4, #12]
    cb6e:	68c8      	ldr	r0, [r1, #12]
    cb70:	f8c4 000e 	str.w	r0, [r4, #14]
    cb74:	8a08      	ldrh	r0, [r1, #16]
    cb76:	8260      	strh	r0, [r4, #18]
    cb78:	f8d1 0012 	ldr.w	r0, [r1, #18]
    cb7c:	6160      	str	r0, [r4, #20]
    cb7e:	8ac8      	ldrh	r0, [r1, #22]
    cb80:	8320      	strh	r0, [r4, #24]
    cb82:	7e08      	ldrb	r0, [r1, #24]
    cb84:	76a0      	strb	r0, [r4, #26]
    cb86:	8b08      	ldrh	r0, [r1, #24]
    cb88:	0a00      	lsrs	r0, r0, #8
    cb8a:	76e0      	strb	r0, [r4, #27]
    cb8c:	7e88      	ldrb	r0, [r1, #26]
    cb8e:	7720      	strb	r0, [r4, #28]
    cb90:	8b48      	ldrh	r0, [r1, #26]
    cb92:	0a00      	lsrs	r0, r0, #8
    cb94:	7760      	strb	r0, [r4, #29]
    cb96:	7f08      	ldrb	r0, [r1, #28]
    cb98:	77a0      	strb	r0, [r4, #30]
    cb9a:	8b88      	ldrh	r0, [r1, #28]
    cb9c:	0a00      	lsrs	r0, r0, #8
    cb9e:	77e0      	strb	r0, [r4, #31]
    cba0:	7f88      	ldrb	r0, [r1, #30]
    cba2:	f884 0020 	strb.w	r0, [r4, #32]
    cba6:	201f      	movs	r0, #31
    cba8:	e084      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cbaa:	7022      	strb	r2, [r4, #0]
    cbac:	2014      	movs	r0, #20
    cbae:	70a0      	strb	r0, [r4, #2]
    cbb0:	7908      	ldrb	r0, [r1, #4]
    cbb2:	70e0      	strb	r0, [r4, #3]
    cbb4:	8888      	ldrh	r0, [r1, #4]
    cbb6:	0a00      	lsrs	r0, r0, #8
    cbb8:	7120      	strb	r0, [r4, #4]
    cbba:	7988      	ldrb	r0, [r1, #6]
    cbbc:	e0a7      	b.n	cd0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    cbbe:	7022      	strb	r2, [r4, #0]
    cbc0:	2004      	movs	r0, #4
    cbc2:	70a0      	strb	r0, [r4, #2]
    cbc4:	7908      	ldrb	r0, [r1, #4]
    cbc6:	70e0      	strb	r0, [r4, #3]
    cbc8:	7988      	ldrb	r0, [r1, #6]
    cbca:	7120      	strb	r0, [r4, #4]
    cbcc:	88c8      	ldrh	r0, [r1, #6]
    cbce:	0a00      	lsrs	r0, r0, #8
    cbd0:	7160      	strb	r0, [r4, #5]
    cbd2:	6888      	ldr	r0, [r1, #8]
    cbd4:	f8c4 0006 	str.w	r0, [r4, #6]
    cbd8:	68c8      	ldr	r0, [r1, #12]
    cbda:	e000      	b.n	cbde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cbdc:	e06c      	b.n	ccb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    cbde:	f8c4 000a 	str.w	r0, [r4, #10]
    cbe2:	200c      	movs	r0, #12
    cbe4:	e066      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cbe6:	7022      	strb	r2, [r4, #0]
    cbe8:	2003      	movs	r0, #3
    cbea:	70a0      	strb	r0, [r4, #2]
    cbec:	7908      	ldrb	r0, [r1, #4]
    cbee:	70e0      	strb	r0, [r4, #3]
    cbf0:	7988      	ldrb	r0, [r1, #6]
    cbf2:	7120      	strb	r0, [r4, #4]
    cbf4:	88c8      	ldrh	r0, [r1, #6]
    cbf6:	0a00      	lsrs	r0, r0, #8
    cbf8:	7160      	strb	r0, [r4, #5]
    cbfa:	7a08      	ldrb	r0, [r1, #8]
    cbfc:	71a0      	strb	r0, [r4, #6]
    cbfe:	8908      	ldrh	r0, [r1, #8]
    cc00:	0a00      	lsrs	r0, r0, #8
    cc02:	71e0      	strb	r0, [r4, #7]
    cc04:	7a88      	ldrb	r0, [r1, #10]
    cc06:	7220      	strb	r0, [r4, #8]
    cc08:	8948      	ldrh	r0, [r1, #10]
    cc0a:	0a00      	lsrs	r0, r0, #8
    cc0c:	7260      	strb	r0, [r4, #9]
    cc0e:	7b08      	ldrb	r0, [r1, #12]
    cc10:	72a0      	strb	r0, [r4, #10]
    cc12:	8988      	ldrh	r0, [r1, #12]
    cc14:	0a00      	lsrs	r0, r0, #8
    cc16:	72e0      	strb	r0, [r4, #11]
    cc18:	e0d8      	b.n	cdcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    cc1a:	7022      	strb	r2, [r4, #0]
    cc1c:	70a6      	strb	r6, [r4, #2]
    cc1e:	7908      	ldrb	r0, [r1, #4]
    cc20:	70e0      	strb	r0, [r4, #3]
    cc22:	8888      	ldrh	r0, [r1, #4]
    cc24:	0a00      	lsrs	r0, r0, #8
    cc26:	7120      	strb	r0, [r4, #4]
    cc28:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cc2c:	f8c4 0005 	str.w	r0, [r4, #5]
    cc30:	f8d1 000a 	ldr.w	r0, [r1, #10]
    cc34:	f8c4 0009 	str.w	r0, [r4, #9]
    cc38:	89c8      	ldrh	r0, [r1, #14]
    cc3a:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc3e:	200d      	movs	r0, #13
    cc40:	e038      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc42:	2011      	movs	r0, #17
    cc44:	e043      	b.n	ccce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    cc46:	7026      	strb	r6, [r4, #0]
    cc48:	7908      	ldrb	r0, [r1, #4]
    cc4a:	70a0      	strb	r0, [r4, #2]
    cc4c:	7948      	ldrb	r0, [r1, #5]
    cc4e:	70e0      	strb	r0, [r4, #3]
    cc50:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cc54:	0a00      	lsrs	r0, r0, #8
    cc56:	7120      	strb	r0, [r4, #4]
    cc58:	79c8      	ldrb	r0, [r1, #7]
    cc5a:	e058      	b.n	cd0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    cc5c:	2008      	movs	r0, #8
    cc5e:	7020      	strb	r0, [r4, #0]
    cc60:	7908      	ldrb	r0, [r1, #4]
    cc62:	70a0      	strb	r0, [r4, #2]
    cc64:	7988      	ldrb	r0, [r1, #6]
    cc66:	70e0      	strb	r0, [r4, #3]
    cc68:	88c8      	ldrh	r0, [r1, #6]
    cc6a:	0a00      	lsrs	r0, r0, #8
    cc6c:	7120      	strb	r0, [r4, #4]
    cc6e:	7a08      	ldrb	r0, [r1, #8]
    cc70:	e04d      	b.n	cd0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    cc72:	2030      	movs	r0, #48	; 0x30
    cc74:	7020      	strb	r0, [r4, #0]
    cc76:	7908      	ldrb	r0, [r1, #4]
    cc78:	70a0      	strb	r0, [r4, #2]
    cc7a:	7988      	ldrb	r0, [r1, #6]
    cc7c:	70e0      	strb	r0, [r4, #3]
    cc7e:	88c8      	ldrh	r0, [r1, #6]
    cc80:	0a00      	lsrs	r0, r0, #8
    cc82:	7120      	strb	r0, [r4, #4]
    cc84:	2003      	movs	r0, #3
    cc86:	e015      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cc88:	7022      	strb	r2, [r4, #0]
    cc8a:	2007      	movs	r0, #7
    cc8c:	e044      	b.n	cd18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    cc8e:	7022      	strb	r2, [r4, #0]
    cc90:	70a5      	strb	r5, [r4, #2]
    cc92:	7908      	ldrb	r0, [r1, #4]
    cc94:	70e0      	strb	r0, [r4, #3]
    cc96:	7988      	ldrb	r0, [r1, #6]
    cc98:	7120      	strb	r0, [r4, #4]
    cc9a:	88c8      	ldrh	r0, [r1, #6]
    cc9c:	0a00      	lsrs	r0, r0, #8
    cc9e:	7160      	strb	r0, [r4, #5]
    cca0:	7a08      	ldrb	r0, [r1, #8]
    cca2:	71a0      	strb	r0, [r4, #6]
    cca4:	7a48      	ldrb	r0, [r1, #9]
    cca6:	e027      	b.n	ccf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    cca8:	4620      	mov	r0, r4
    ccaa:	1d09      	adds	r1, r1, #4
    ccac:	f7f7 fff8 	bl	4ca0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    ccb0:	2800      	cmp	r0, #0
    ccb2:	d001      	beq.n	ccb8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    ccb4:	7060      	strb	r0, [r4, #1]
    ccb6:	1c80      	adds	r0, r0, #2
    ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccbc:	e073      	b.n	cda6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    ccbe:	e047      	b.n	cd50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ccc0:	e028      	b.n	cd14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    ccc2:	e053      	b.n	cd6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    ccc4:	e061      	b.n	cd8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    ccc6:	e01a      	b.n	ccfe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ccc8:	e009      	b.n	ccde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    ccca:	e7ff      	b.n	cccc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    cccc:	2057      	movs	r0, #87	; 0x57
    ccce:	7020      	strb	r0, [r4, #0]
    ccd0:	7908      	ldrb	r0, [r1, #4]
    ccd2:	70a0      	strb	r0, [r4, #2]
    ccd4:	8888      	ldrh	r0, [r1, #4]
    ccd6:	0a00      	lsrs	r0, r0, #8
    ccd8:	70e0      	strb	r0, [r4, #3]
    ccda:	2002      	movs	r0, #2
    ccdc:	e7ea      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ccde:	7022      	strb	r2, [r4, #0]
    cce0:	2012      	movs	r0, #18
    cce2:	70a0      	strb	r0, [r4, #2]
    cce4:	7908      	ldrb	r0, [r1, #4]
    cce6:	70e0      	strb	r0, [r4, #3]
    cce8:	7948      	ldrb	r0, [r1, #5]
    ccea:	7120      	strb	r0, [r4, #4]
    ccec:	7988      	ldrb	r0, [r1, #6]
    ccee:	7160      	strb	r0, [r4, #5]
    ccf0:	88c8      	ldrh	r0, [r1, #6]
    ccf2:	0a00      	lsrs	r0, r0, #8
    ccf4:	71a0      	strb	r0, [r4, #6]
    ccf6:	7a08      	ldrb	r0, [r1, #8]
    ccf8:	71e0      	strb	r0, [r4, #7]
    ccfa:	2006      	movs	r0, #6
    ccfc:	e7da      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ccfe:	7023      	strb	r3, [r4, #0]
    cd00:	20a1      	movs	r0, #161	; 0xa1
    cd02:	70a0      	strb	r0, [r4, #2]
    cd04:	7908      	ldrb	r0, [r1, #4]
    cd06:	70e0      	strb	r0, [r4, #3]
    cd08:	7948      	ldrb	r0, [r1, #5]
    cd0a:	7120      	strb	r0, [r4, #4]
    cd0c:	2000      	movs	r0, #0
    cd0e:	7160      	strb	r0, [r4, #5]
    cd10:	2004      	movs	r0, #4
    cd12:	e7cf      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd14:	7023      	strb	r3, [r4, #0]
    cd16:	20a2      	movs	r0, #162	; 0xa2
    cd18:	70a0      	strb	r0, [r4, #2]
    cd1a:	7908      	ldrb	r0, [r1, #4]
    cd1c:	70e0      	strb	r0, [r4, #3]
    cd1e:	8888      	ldrh	r0, [r1, #4]
    cd20:	0a00      	lsrs	r0, r0, #8
    cd22:	7120      	strb	r0, [r4, #4]
    cd24:	7988      	ldrb	r0, [r1, #6]
    cd26:	7160      	strb	r0, [r4, #5]
    cd28:	88c8      	ldrh	r0, [r1, #6]
    cd2a:	0a00      	lsrs	r0, r0, #8
    cd2c:	71a0      	strb	r0, [r4, #6]
    cd2e:	7a08      	ldrb	r0, [r1, #8]
    cd30:	71e0      	strb	r0, [r4, #7]
    cd32:	8908      	ldrh	r0, [r1, #8]
    cd34:	0a00      	lsrs	r0, r0, #8
    cd36:	7220      	strb	r0, [r4, #8]
    cd38:	7a88      	ldrb	r0, [r1, #10]
    cd3a:	7260      	strb	r0, [r4, #9]
    cd3c:	8948      	ldrh	r0, [r1, #10]
    cd3e:	0a00      	lsrs	r0, r0, #8
    cd40:	72a0      	strb	r0, [r4, #10]
    cd42:	7b08      	ldrb	r0, [r1, #12]
    cd44:	72e0      	strb	r0, [r4, #11]
    cd46:	8988      	ldrh	r0, [r1, #12]
    cd48:	0a00      	lsrs	r0, r0, #8
    cd4a:	7320      	strb	r0, [r4, #12]
    cd4c:	200b      	movs	r0, #11
    cd4e:	e7b1      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd50:	7023      	strb	r3, [r4, #0]
    cd52:	20a3      	movs	r0, #163	; 0xa3
    cd54:	70a0      	strb	r0, [r4, #2]
    cd56:	7908      	ldrb	r0, [r1, #4]
    cd58:	70e0      	strb	r0, [r4, #3]
    cd5a:	8888      	ldrh	r0, [r1, #4]
    cd5c:	0a00      	lsrs	r0, r0, #8
    cd5e:	7120      	strb	r0, [r4, #4]
    cd60:	7988      	ldrb	r0, [r1, #6]
    cd62:	7160      	strb	r0, [r4, #5]
    cd64:	79c8      	ldrb	r0, [r1, #7]
    cd66:	71a0      	strb	r0, [r4, #6]
    cd68:	2005      	movs	r0, #5
    cd6a:	e7a3      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd6c:	7022      	strb	r2, [r4, #0]
    cd6e:	2013      	movs	r0, #19
    cd70:	70a0      	strb	r0, [r4, #2]
    cd72:	7908      	ldrb	r0, [r1, #4]
    cd74:	70e0      	strb	r0, [r4, #3]
    cd76:	7948      	ldrb	r0, [r1, #5]
    cd78:	7120      	strb	r0, [r4, #4]
    cd7a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cd7e:	f8c4 0005 	str.w	r0, [r4, #5]
    cd82:	8948      	ldrh	r0, [r1, #10]
    cd84:	f8a4 0009 	strh.w	r0, [r4, #9]
    cd88:	e020      	b.n	cdcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    cd8a:	7023      	strb	r3, [r4, #0]
    cd8c:	20a4      	movs	r0, #164	; 0xa4
    cd8e:	70a0      	strb	r0, [r4, #2]
    cd90:	7908      	ldrb	r0, [r1, #4]
    cd92:	70e0      	strb	r0, [r4, #3]
    cd94:	8888      	ldrh	r0, [r1, #4]
    cd96:	0a00      	lsrs	r0, r0, #8
    cd98:	7120      	strb	r0, [r4, #4]
    cd9a:	7988      	ldrb	r0, [r1, #6]
    cd9c:	7160      	strb	r0, [r4, #5]
    cd9e:	79c8      	ldrb	r0, [r1, #7]
    cda0:	71a0      	strb	r0, [r4, #6]
    cda2:	2007      	movs	r0, #7
    cda4:	e786      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cda6:	7023      	strb	r3, [r4, #0]
    cda8:	2080      	movs	r0, #128	; 0x80
    cdaa:	70a0      	strb	r0, [r4, #2]
    cdac:	888a      	ldrh	r2, [r1, #4]
    cdae:	f8a4 2003 	strh.w	r2, [r4, #3]
    cdb2:	88ca      	ldrh	r2, [r1, #6]
    cdb4:	f8a4 2005 	strh.w	r2, [r4, #5]
    cdb8:	7a0a      	ldrb	r2, [r1, #8]
    cdba:	71e2      	strb	r2, [r4, #7]
    cdbc:	7a4a      	ldrb	r2, [r1, #9]
    cdbe:	8122      	strh	r2, [r4, #8]
    cdc0:	7a8a      	ldrb	r2, [r1, #10]
    cdc2:	72a2      	strb	r2, [r4, #10]
    cdc4:	7ac9      	ldrb	r1, [r1, #11]
    cdc6:	f001 0101 	and.w	r1, r1, #1
    cdca:	72e1      	strb	r1, [r4, #11]
    cdcc:	200a      	movs	r0, #10
    cdce:	e771      	b.n	ccb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000cdd0 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    cdd0:	223e      	movs	r2, #62	; 0x3e
    cdd2:	7002      	strb	r2, [r0, #0]
    cdd4:	2201      	movs	r2, #1
    cdd6:	7082      	strb	r2, [r0, #2]
    cdd8:	790a      	ldrb	r2, [r1, #4]
    cdda:	70c2      	strb	r2, [r0, #3]
    cddc:	798a      	ldrb	r2, [r1, #6]
    cdde:	7102      	strb	r2, [r0, #4]
    cde0:	88ca      	ldrh	r2, [r1, #6]
    cde2:	0a12      	lsrs	r2, r2, #8
    cde4:	7142      	strb	r2, [r0, #5]
    cde6:	7a0a      	ldrb	r2, [r1, #8]
    cde8:	7182      	strb	r2, [r0, #6]
    cdea:	7a4a      	ldrb	r2, [r1, #9]
    cdec:	71c2      	strb	r2, [r0, #7]
    cdee:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cdf2:	6082      	str	r2, [r0, #8]
    cdf4:	89ca      	ldrh	r2, [r1, #14]
    cdf6:	8182      	strh	r2, [r0, #12]
    cdf8:	7c0a      	ldrb	r2, [r1, #16]
    cdfa:	7382      	strb	r2, [r0, #14]
    cdfc:	8a0a      	ldrh	r2, [r1, #16]
    cdfe:	0a12      	lsrs	r2, r2, #8
    ce00:	73c2      	strb	r2, [r0, #15]
    ce02:	7c8a      	ldrb	r2, [r1, #18]
    ce04:	7402      	strb	r2, [r0, #16]
    ce06:	8a4a      	ldrh	r2, [r1, #18]
    ce08:	0a12      	lsrs	r2, r2, #8
    ce0a:	7442      	strb	r2, [r0, #17]
    ce0c:	7d0a      	ldrb	r2, [r1, #20]
    ce0e:	7482      	strb	r2, [r0, #18]
    ce10:	8a8a      	ldrh	r2, [r1, #20]
    ce12:	0a12      	lsrs	r2, r2, #8
    ce14:	74c2      	strb	r2, [r0, #19]
    ce16:	7d89      	ldrb	r1, [r1, #22]
    ce18:	7501      	strb	r1, [r0, #20]
    ce1a:	2013      	movs	r0, #19
    ce1c:	4770      	bx	lr

0000ce1e <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    ce1e:	223e      	movs	r2, #62	; 0x3e
    ce20:	7002      	strb	r2, [r0, #0]
    ce22:	2201      	movs	r2, #1
    ce24:	7082      	strb	r2, [r0, #2]
    ce26:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    ce2a:	70c2      	strb	r2, [r0, #3]
    ce2c:	788a      	ldrb	r2, [r1, #2]
    ce2e:	7102      	strb	r2, [r0, #4]
    ce30:	884a      	ldrh	r2, [r1, #2]
    ce32:	0a12      	lsrs	r2, r2, #8
    ce34:	7142      	strb	r2, [r0, #5]
    ce36:	790a      	ldrb	r2, [r1, #4]
    ce38:	7182      	strb	r2, [r0, #6]
    ce3a:	794a      	ldrb	r2, [r1, #5]
    ce3c:	71c2      	strb	r2, [r0, #7]
    ce3e:	f8d1 2006 	ldr.w	r2, [r1, #6]
    ce42:	6082      	str	r2, [r0, #8]
    ce44:	894a      	ldrh	r2, [r1, #10]
    ce46:	8182      	strh	r2, [r0, #12]
    ce48:	7e0a      	ldrb	r2, [r1, #24]
    ce4a:	7382      	strb	r2, [r0, #14]
    ce4c:	8b0a      	ldrh	r2, [r1, #24]
    ce4e:	0a12      	lsrs	r2, r2, #8
    ce50:	73c2      	strb	r2, [r0, #15]
    ce52:	7e8a      	ldrb	r2, [r1, #26]
    ce54:	7402      	strb	r2, [r0, #16]
    ce56:	8b4a      	ldrh	r2, [r1, #26]
    ce58:	0a12      	lsrs	r2, r2, #8
    ce5a:	7442      	strb	r2, [r0, #17]
    ce5c:	7f0a      	ldrb	r2, [r1, #28]
    ce5e:	7482      	strb	r2, [r0, #18]
    ce60:	8b8a      	ldrh	r2, [r1, #28]
    ce62:	0a12      	lsrs	r2, r2, #8
    ce64:	74c2      	strb	r2, [r0, #19]
    ce66:	7f89      	ldrb	r1, [r1, #30]
    ce68:	7501      	strb	r1, [r0, #20]
    ce6a:	2113      	movs	r1, #19
    ce6c:	7041      	strb	r1, [r0, #1]
    ce6e:	4608      	mov	r0, r1
    ce70:	4770      	bx	lr

0000ce72 <sdc_hci_data_get>:
    ce72:	b510      	push	{r4, lr}
    ce74:	b120      	cbz	r0, ce80 <sdc_hci_data_get+0xe>
    ce76:	f7ff fda4 	bl	c9c2 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    ce7a:	b120      	cbz	r0, ce86 <sdc_hci_data_get+0x14>
    ce7c:	2000      	movs	r0, #0
    ce7e:	bd10      	pop	{r4, pc}
    ce80:	f06f 0015 	mvn.w	r0, #21
    ce84:	bd10      	pop	{r4, pc}
    ce86:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ce8a:	bd10      	pop	{r4, pc}

0000ce8c <sdc_hci_data_put>:
    ce8c:	b510      	push	{r4, lr}
    ce8e:	f06f 0415 	mvn.w	r4, #21
    ce92:	b120      	cbz	r0, ce9e <sdc_hci_data_put+0x12>
    ce94:	f7ff fda3 	bl	c9de <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    ce98:	b108      	cbz	r0, ce9e <sdc_hci_data_put+0x12>
    ce9a:	2000      	movs	r0, #0
    ce9c:	bd10      	pop	{r4, pc}
    ce9e:	4620      	mov	r0, r4
    cea0:	bd10      	pop	{r4, pc}

0000cea2 <sdc_hci_evt_get>:
    cea2:	b510      	push	{r4, lr}
    cea4:	b120      	cbz	r0, ceb0 <sdc_hci_evt_get+0xe>
    cea6:	f7ff fda3 	bl	c9f0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    ceaa:	b120      	cbz	r0, ceb6 <sdc_hci_evt_get+0x14>
    ceac:	2000      	movs	r0, #0
    ceae:	bd10      	pop	{r4, pc}
    ceb0:	f06f 0015 	mvn.w	r0, #21
    ceb4:	bd10      	pop	{r4, pc}
    ceb6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    ceba:	bd10      	pop	{r4, pc}

0000cebc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cebc:	f002 beda 	b.w	fc74 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cec0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cec0:	f002 bf1c 	b.w	fcfc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cec4 <sdc_hci_cmd_cb_set_event_mask>:
    cec4:	b510      	push	{r4, lr}
    cec6:	f7f7 ff49 	bl	4d5c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    ceca:	2000      	movs	r0, #0
    cecc:	bd10      	pop	{r4, pc}

0000cece <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cece:	b510      	push	{r4, lr}
    ced0:	f7f7 ff52 	bl	4d78 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ced4:	2000      	movs	r0, #0
    ced6:	bd10      	pop	{r4, pc}

0000ced8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ced8:	f002 bf2c 	b.w	fd34 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cedc <sdc_hci_cmd_vs_conn_event_extend>:
    cedc:	b508      	push	{r3, lr}
    cede:	7800      	ldrb	r0, [r0, #0]
    cee0:	f88d 0000 	strb.w	r0, [sp]
    cee4:	4668      	mov	r0, sp
    cee6:	f002 fddc 	bl	faa2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ceea:	bd08      	pop	{r3, pc}

0000ceec <sdc_hci_cmd_vs_conn_update>:
    ceec:	2001      	movs	r0, #1
    ceee:	4770      	bx	lr

0000cef0 <sdc_hci_cmd_vs_event_length_set>:
    cef0:	f7fd be22 	b.w	ab38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cef4 <sdc_hci_cmd_vs_llpm_mode_set>:
    cef4:	2001      	movs	r0, #1
    cef6:	4770      	bx	lr

0000cef8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cef8:	7800      	ldrb	r0, [r0, #0]
    cefa:	b100      	cbz	r0, cefe <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cefc:	2001      	movs	r0, #1
    cefe:	f002 bd55 	b.w	f9ac <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cf02 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cf02:	b570      	push	{r4, r5, r6, lr}
    cf04:	4605      	mov	r5, r0
    cf06:	2210      	movs	r2, #16
    cf08:	2100      	movs	r1, #0
    cf0a:	f7ff fc79 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf0e:	2210      	movs	r2, #16
    cf10:	2100      	movs	r1, #0
    cf12:	f105 0010 	add.w	r0, r5, #16
    cf16:	f7ff fc73 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cf1a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cf1e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cf22:	1c40      	adds	r0, r0, #1
    cf24:	d10b      	bne.n	cf3e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cf26:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cf2a:	1c40      	adds	r0, r0, #1
    cf2c:	d107      	bne.n	cf3e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cf2e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cf32:	1c40      	adds	r0, r0, #1
    cf34:	d103      	bne.n	cf3e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cf36:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cf3a:	1c40      	adds	r0, r0, #1
    cf3c:	d00b      	beq.n	cf56 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cf3e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cf42:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cf46:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cf4a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cf4e:	612a      	str	r2, [r5, #16]
    cf50:	6168      	str	r0, [r5, #20]
    cf52:	61a9      	str	r1, [r5, #24]
    cf54:	61eb      	str	r3, [r5, #28]
    cf56:	2000      	movs	r0, #0
    cf58:	f7f8 fca2 	bl	58a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cf5c:	b918      	cbnz	r0, cf66 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cf5e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cf62:	07c0      	lsls	r0, r0, #31
    cf64:	d118      	bne.n	cf98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cf66:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    cf6a:	1c40      	adds	r0, r0, #1
    cf6c:	d10b      	bne.n	cf86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf6e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    cf72:	1c40      	adds	r0, r0, #1
    cf74:	d107      	bne.n	cf86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf76:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    cf7a:	1c40      	adds	r0, r0, #1
    cf7c:	d103      	bne.n	cf86 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    cf7e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    cf82:	1c40      	adds	r0, r0, #1
    cf84:	d008      	beq.n	cf98 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cf86:	f854 0f90 	ldr.w	r0, [r4, #144]!
    cf8a:	6861      	ldr	r1, [r4, #4]
    cf8c:	68a2      	ldr	r2, [r4, #8]
    cf8e:	68e3      	ldr	r3, [r4, #12]
    cf90:	6028      	str	r0, [r5, #0]
    cf92:	6069      	str	r1, [r5, #4]
    cf94:	60aa      	str	r2, [r5, #8]
    cf96:	60eb      	str	r3, [r5, #12]
    cf98:	2000      	movs	r0, #0
    cf9a:	bd70      	pop	{r4, r5, r6, pc}

0000cf9c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    cf9c:	b538      	push	{r3, r4, r5, lr}
    cf9e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    cfa2:	4604      	mov	r4, r0
    cfa4:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cfa8:	1c40      	adds	r0, r0, #1
    cfaa:	d105      	bne.n	cfb8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    cfac:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    cfb0:	43c0      	mvns	r0, r0
    cfb2:	0400      	lsls	r0, r0, #16
    cfb4:	0c00      	lsrs	r0, r0, #16
    cfb6:	d03e      	beq.n	d036 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cfb8:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    cfbc:	07c0      	lsls	r0, r0, #31
    cfbe:	d03a      	beq.n	d036 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    cfc0:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    cfc4:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    cfc8:	f8ad 1000 	strh.w	r1, [sp]
    cfcc:	f8c4 0001 	str.w	r0, [r4, #1]
    cfd0:	f8bd 0000 	ldrh.w	r0, [sp]
    cfd4:	f8a4 0005 	strh.w	r0, [r4, #5]
    cfd8:	79a0      	ldrb	r0, [r4, #6]
    cfda:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    cfde:	71a0      	strb	r0, [r4, #6]
    cfe0:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    cfe4:	1c40      	adds	r0, r0, #1
    cfe6:	d00f      	beq.n	d008 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cfe8:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    cfec:	1c40      	adds	r0, r0, #1
    cfee:	d00b      	beq.n	d008 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cff0:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    cff4:	1c40      	adds	r0, r0, #1
    cff6:	d007      	beq.n	d008 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    cff8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    cffc:	1c40      	adds	r0, r0, #1
    cffe:	d003      	beq.n	d008 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d000:	2000      	movs	r0, #0
    d002:	f7f8 fc4d 	bl	58a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d006:	b140      	cbz	r0, d01a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d008:	2210      	movs	r2, #16
    d00a:	2100      	movs	r1, #0
    d00c:	1de0      	adds	r0, r4, #7
    d00e:	f7ff fbf7 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d012:	2001      	movs	r0, #1
    d014:	7020      	strb	r0, [r4, #0]
    d016:	2000      	movs	r0, #0
    d018:	bd38      	pop	{r3, r4, r5, pc}
    d01a:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d01e:	6869      	ldr	r1, [r5, #4]
    d020:	68a8      	ldr	r0, [r5, #8]
    d022:	68eb      	ldr	r3, [r5, #12]
    d024:	f8c4 2007 	str.w	r2, [r4, #7]
    d028:	f8c4 100b 	str.w	r1, [r4, #11]
    d02c:	f8c4 000f 	str.w	r0, [r4, #15]
    d030:	f8c4 3013 	str.w	r3, [r4, #19]
    d034:	e7ed      	b.n	d012 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d036:	2000      	movs	r0, #0
    d038:	e7ec      	b.n	d014 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d03a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d03a:	f002 bd24 	b.w	fa86 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d03e <sdc_hci_cmd_ip_read_bd_addr>:
    d03e:	f002 be2a 	b.w	fc96 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d042 <sdc_hci_cmd_ip_read_local_version_information>:
    d042:	f7fd bd87 	b.w	ab54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d046 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d046:	f002 ba08 	b.w	f45a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d04a <sdc_hci_cmd_le_add_device_to_white_list>:
    d04a:	f002 ba21 	b.w	f490 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d04e <sdc_hci_cmd_le_clear_resolving_list>:
    d04e:	f002 ba36 	b.w	f4be <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d052 <sdc_hci_cmd_le_clear_white_list>:
    d052:	f002 ba41 	b.w	f4d8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d056 <sdc_hci_cmd_le_encrypt>:
    d056:	f002 ba49 	b.w	f4ec <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d05a <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d05a:	8802      	ldrh	r2, [r0, #0]
    d05c:	800a      	strh	r2, [r1, #0]
    d05e:	f002 ba4e 	b.w	f4fe <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d062 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d062:	8802      	ldrh	r2, [r0, #0]
    d064:	800a      	strh	r2, [r1, #0]
    d066:	f002 ba63 	b.w	f530 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d06a <sdc_hci_cmd_le_rand>:
    d06a:	f002 ba8b 	b.w	f584 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d06e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d06e:	f002 ba8f 	b.w	f590 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d072 <sdc_hci_cmd_le_read_buffer_size>:
    d072:	f7fd bcb7 	b.w	a9e4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d076 <sdc_hci_cmd_le_read_channel_map>:
    d076:	f7fd bcbf 	b.w	a9f8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d07a <sdc_hci_cmd_le_read_max_data_length>:
    d07a:	f002 ba92 	b.w	f5a2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d07e <sdc_hci_cmd_le_read_phy>:
    d07e:	f002 baa0 	b.w	f5c2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d082 <sdc_hci_cmd_le_read_remote_features>:
    d082:	f7fd bce3 	b.w	aa4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d086 <sdc_hci_cmd_le_read_resolving_list_size>:
    d086:	f002 bac7 	b.w	f618 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d08a <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d08a:	f7fd bcff 	b.w	aa8c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d08e <sdc_hci_cmd_le_read_transmit_power>:
    d08e:	f002 bac7 	b.w	f620 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d092 <sdc_hci_cmd_le_read_white_list_size>:
    d092:	f002 bace 	b.w	f632 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d096 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d096:	f002 bad0 	b.w	f63a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d09a <sdc_hci_cmd_le_remove_device_from_white_list>:
    d09a:	f002 bae7 	b.w	f66c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d09e <sdc_hci_cmd_le_set_address_resolution_enable>:
    d09e:	f002 bafa 	b.w	f696 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d0a2 <sdc_hci_cmd_le_set_adv_data>:
    d0a2:	f002 bb06 	b.w	f6b2 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d0a6 <sdc_hci_cmd_le_set_adv_enable>:
    d0a6:	f002 bb19 	b.w	f6dc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d0aa <sdc_hci_cmd_le_set_adv_params>:
    d0aa:	f002 bb4a 	b.w	f742 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d0ae <sdc_hci_cmd_le_set_data_length>:
    d0ae:	f002 bbdd 	b.w	f86c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d0b2 <sdc_hci_cmd_le_set_default_phy>:
    d0b2:	f7fd bcfb 	b.w	aaac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d0b6 <sdc_hci_cmd_le_set_event_mask>:
    d0b6:	b510      	push	{r4, lr}
    d0b8:	f7f7 fe4a 	bl	4d50 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d0bc:	2000      	movs	r0, #0
    d0be:	bd10      	pop	{r4, pc}

0000d0c0 <sdc_hci_cmd_le_set_phy>:
    d0c0:	f002 bbfb 	b.w	f8ba <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d0c4 <sdc_hci_cmd_le_set_privacy_mode>:
    d0c4:	f002 bc19 	b.w	f8fa <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d0c8 <sdc_hci_cmd_le_set_random_address>:
    d0c8:	f002 bc2d 	b.w	f926 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d0cc <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d0cc:	f002 bc39 	b.w	f942 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d0d0 <sdc_hci_cmd_le_set_scan_response_data>:
    d0d0:	f002 bc40 	b.w	f954 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d0d4 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d0d4:	f002 bc53 	b.w	f97e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d0d8 <sdc_hci_cmd_lc_disconnect>:
    d0d8:	f002 b96b 	b.w	f3b2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d0dc <sdc_hci_cmd_lc_read_remote_version_information>:
    d0dc:	f002 bde7 	b.w	fcae <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d0e0:	b570      	push	{r4, r5, r6, lr}
    d0e2:	880b      	ldrh	r3, [r1, #0]
    d0e4:	7f04      	ldrb	r4, [r0, #28]
    d0e6:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d0ea:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d0ee:	8802      	ldrh	r2, [r0, #0]
    d0f0:	4435      	add	r5, r6
    d0f2:	1da4      	adds	r4, r4, #6
    d0f4:	882d      	ldrh	r5, [r5, #0]
    d0f6:	4422      	add	r2, r4
    d0f8:	b292      	uxth	r2, r2
    d0fa:	4425      	add	r5, r4
    d0fc:	1e54      	subs	r4, r2, #1
    d0fe:	442c      	add	r4, r5
    d100:	fb94 f4f2 	sdiv	r4, r4, r2
    d104:	fb02 6204 	mla	r2, r2, r4, r6
    d108:	8840      	ldrh	r0, [r0, #2]
    d10a:	b292      	uxth	r2, r2
    d10c:	4290      	cmp	r0, r2
    d10e:	d903      	bls.n	d118 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d110:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d114:	4310      	orrs	r0, r2
    d116:	e002      	b.n	d11e <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d118:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d11c:	4398      	bics	r0, r3
    d11e:	8008      	strh	r0, [r1, #0]
    d120:	bd70      	pop	{r4, r5, r6, pc}
    d122:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d126:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d12a:	429a      	cmp	r2, r3
    d12c:	d107      	bne.n	d13e <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d12e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d132:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d136:	4288      	cmp	r0, r1
    d138:	d001      	beq.n	d13e <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d13a:	2001      	movs	r0, #1
    d13c:	4770      	bx	lr
    d13e:	2000      	movs	r0, #0
    d140:	4770      	bx	lr

0000d142 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d142:	b570      	push	{r4, r5, r6, lr}
    d144:	7f00      	ldrb	r0, [r0, #28]
    d146:	461c      	mov	r4, r3
    d148:	1d80      	adds	r0, r0, #6
    d14a:	4408      	add	r0, r1
    d14c:	4613      	mov	r3, r2
    d14e:	8809      	ldrh	r1, [r1, #0]
    d150:	9a04      	ldr	r2, [sp, #16]
    d152:	1cc9      	adds	r1, r1, #3
    d154:	b289      	uxth	r1, r1
    d156:	1915      	adds	r5, r2, r4
    d158:	1ec0      	subs	r0, r0, #3
    d15a:	428d      	cmp	r5, r1
    d15c:	d805      	bhi.n	d16a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d15e:	1881      	adds	r1, r0, r2
    d160:	4622      	mov	r2, r4
    d162:	4618      	mov	r0, r3
    d164:	f7ff fad2 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d168:	e000      	b.n	d16c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d16a:	2400      	movs	r4, #0
    d16c:	4620      	mov	r0, r4
    d16e:	bd70      	pop	{r4, r5, r6, pc}

0000d170 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d170:	b570      	push	{r4, r5, r6, lr}
    d172:	7f00      	ldrb	r0, [r0, #28]
    d174:	461c      	mov	r4, r3
    d176:	1d80      	adds	r0, r0, #6
    d178:	4408      	add	r0, r1
    d17a:	4613      	mov	r3, r2
    d17c:	8809      	ldrh	r1, [r1, #0]
    d17e:	9a04      	ldr	r2, [sp, #16]
    d180:	1cc9      	adds	r1, r1, #3
    d182:	b289      	uxth	r1, r1
    d184:	1915      	adds	r5, r2, r4
    d186:	1ec0      	subs	r0, r0, #3
    d188:	428d      	cmp	r5, r1
    d18a:	d805      	bhi.n	d198 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d18c:	4410      	add	r0, r2
    d18e:	4622      	mov	r2, r4
    d190:	4619      	mov	r1, r3
    d192:	f7ff fabb 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d196:	e000      	b.n	d19a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d198:	2400      	movs	r4, #0
    d19a:	4620      	mov	r0, r4
    d19c:	bd70      	pop	{r4, r5, r6, pc}

0000d19e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d19e:	8881      	ldrh	r1, [r0, #4]
    d1a0:	88c0      	ldrh	r0, [r0, #6]
    d1a2:	4288      	cmp	r0, r1
    d1a4:	d101      	bne.n	d1aa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d1a6:	2001      	movs	r0, #1
    d1a8:	4770      	bx	lr
    d1aa:	2000      	movs	r0, #0
    d1ac:	4770      	bx	lr

0000d1ae <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d1ae:	8881      	ldrh	r1, [r0, #4]
    d1b0:	8900      	ldrh	r0, [r0, #8]
    d1b2:	4288      	cmp	r0, r1
    d1b4:	d101      	bne.n	d1ba <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d1b6:	2001      	movs	r0, #1
    d1b8:	4770      	bx	lr
    d1ba:	2000      	movs	r0, #0
    d1bc:	4770      	bx	lr

0000d1be <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d1be:	b570      	push	{r4, r5, r6, lr}
    d1c0:	4604      	mov	r4, r0
    d1c2:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d1c6:	8880      	ldrh	r0, [r0, #4]
    d1c8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d1cc:	4401      	add	r1, r0
    d1ce:	8a20      	ldrh	r0, [r4, #16]
    d1d0:	2800      	cmp	r0, #0
    d1d2:	d01a      	beq.n	d20a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d1d4:	89a2      	ldrh	r2, [r4, #12]
    d1d6:	2500      	movs	r5, #0
    d1d8:	4410      	add	r0, r2
    d1da:	b280      	uxth	r0, r0
    d1dc:	81a0      	strh	r0, [r4, #12]
    d1de:	880a      	ldrh	r2, [r1, #0]
    d1e0:	4290      	cmp	r0, r2
    d1e2:	d905      	bls.n	d1f0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d1e4:	f240 1163 	movw	r1, #355	; 0x163
    d1e8:	f04f 0014 	mov.w	r0, #20
    d1ec:	f7f7 fc2e 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1f0:	d109      	bne.n	d206 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d1f2:	69a0      	ldr	r0, [r4, #24]
    d1f4:	b108      	cbz	r0, d1fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d1f6:	7f40      	ldrb	r0, [r0, #29]
    d1f8:	7088      	strb	r0, [r1, #2]
    d1fa:	f104 0104 	add.w	r1, r4, #4
    d1fe:	4620      	mov	r0, r4
    d200:	f7ff ff6e 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d204:	81a5      	strh	r5, [r4, #12]
    d206:	8225      	strh	r5, [r4, #16]
    d208:	2001      	movs	r0, #1
    d20a:	bd70      	pop	{r4, r5, r6, pc}

0000d20c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d20e:	4604      	mov	r4, r0
    d210:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d214:	88c0      	ldrh	r0, [r0, #6]
    d216:	460e      	mov	r6, r1
    d218:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d21c:	8a60      	ldrh	r0, [r4, #18]
    d21e:	19d9      	adds	r1, r3, r7
    d220:	b108      	cbz	r0, d226 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d222:	42b0      	cmp	r0, r6
    d224:	d201      	bcs.n	d22a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d226:	2000      	movs	r0, #0
    d228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d22a:	89e0      	ldrh	r0, [r4, #14]
    d22c:	2500      	movs	r5, #0
    d22e:	b140      	cbz	r0, d242 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d230:	f8b1 c000 	ldrh.w	ip, [r1]
    d234:	4560      	cmp	r0, ip
    d236:	d008      	beq.n	d24a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d238:	f240 214b 	movw	r1, #587	; 0x24b
    d23c:	2014      	movs	r0, #20
    d23e:	f7f7 fc05 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d242:	7f60      	ldrb	r0, [r4, #29]
    d244:	7088      	strb	r0, [r1, #2]
    d246:	800d      	strh	r5, [r1, #0]
    d248:	e00e      	b.n	d268 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d24a:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d24e:	4418      	add	r0, r3
    d250:	f10c 0c06 	add.w	ip, ip, #6
    d254:	44bc      	add	ip, r7
    d256:	4460      	add	r0, ip
    d258:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d25c:	f820 cc03 	strh.w	ip, [r0, #-3]
    d260:	f894 c020 	ldrb.w	ip, [r4, #32]
    d264:	f800 cc01 	strb.w	ip, [r0, #-1]
    d268:	89e0      	ldrh	r0, [r4, #14]
    d26a:	4430      	add	r0, r6
    d26c:	81e0      	strh	r0, [r4, #14]
    d26e:	8808      	ldrh	r0, [r1, #0]
    d270:	4430      	add	r0, r6
    d272:	8008      	strh	r0, [r1, #0]
    d274:	b19a      	cbz	r2, d29e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d276:	1da1      	adds	r1, r4, #6
    d278:	4620      	mov	r0, r4
    d27a:	f7ff ff31 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d27e:	81e5      	strh	r5, [r4, #14]
    d280:	7f60      	ldrb	r0, [r4, #29]
    d282:	1c40      	adds	r0, r0, #1
    d284:	7760      	strb	r0, [r4, #29]
    d286:	7da0      	ldrb	r0, [r4, #22]
    d288:	f88d 0000 	strb.w	r0, [sp]
    d28c:	9800      	ldr	r0, [sp, #0]
    d28e:	9000      	str	r0, [sp, #0]
    d290:	f89d 0000 	ldrb.w	r0, [sp]
    d294:	b178      	cbz	r0, d2b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d296:	88e0      	ldrh	r0, [r4, #6]
    d298:	82a0      	strh	r0, [r4, #20]
    d29a:	75a5      	strb	r5, [r4, #22]
    d29c:	e00b      	b.n	d2b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d29e:	7f20      	ldrb	r0, [r4, #28]
    d2a0:	89e1      	ldrh	r1, [r4, #14]
    d2a2:	1d80      	adds	r0, r0, #6
    d2a4:	4438      	add	r0, r7
    d2a6:	4419      	add	r1, r3
    d2a8:	4408      	add	r0, r1
    d2aa:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d2ae:	83e1      	strh	r1, [r4, #30]
    d2b0:	7880      	ldrb	r0, [r0, #2]
    d2b2:	f884 0020 	strb.w	r0, [r4, #32]
    d2b6:	8265      	strh	r5, [r4, #18]
    d2b8:	2001      	movs	r0, #1
    d2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d2bc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d2bc:	b510      	push	{r4, lr}
    d2be:	4604      	mov	r4, r0
    d2c0:	88c0      	ldrh	r0, [r0, #6]
    d2c2:	88a1      	ldrh	r1, [r4, #4]
    d2c4:	4281      	cmp	r1, r0
    d2c6:	d007      	beq.n	d2d8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2c8:	89a0      	ldrh	r0, [r4, #12]
    d2ca:	b928      	cbnz	r0, d2d8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2cc:	8a20      	ldrh	r0, [r4, #16]
    d2ce:	b918      	cbnz	r0, d2d8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d2d0:	88a0      	ldrh	r0, [r4, #4]
    d2d2:	8aa1      	ldrh	r1, [r4, #20]
    d2d4:	4288      	cmp	r0, r1
    d2d6:	d101      	bne.n	d2dc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d2d8:	2000      	movs	r0, #0
    d2da:	bd10      	pop	{r4, pc}
    d2dc:	1d21      	adds	r1, r4, #4
    d2de:	4620      	mov	r0, r4
    d2e0:	f7ff fefe 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2e4:	2000      	movs	r0, #0
    d2e6:	8220      	strh	r0, [r4, #16]
    d2e8:	2001      	movs	r0, #1
    d2ea:	bd10      	pop	{r4, pc}

0000d2ec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d2ec:	b510      	push	{r4, lr}
    d2ee:	4604      	mov	r4, r0
    d2f0:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d2f4:	88c0      	ldrh	r0, [r0, #6]
    d2f6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2fa:	4402      	add	r2, r0
    d2fc:	8820      	ldrh	r0, [r4, #0]
    d2fe:	2845      	cmp	r0, #69	; 0x45
    d300:	d200      	bcs.n	d304 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d302:	2045      	movs	r0, #69	; 0x45
    d304:	4288      	cmp	r0, r1
    d306:	d204      	bcs.n	d312 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d308:	f240 1119 	movw	r1, #281	; 0x119
    d30c:	2014      	movs	r0, #20
    d30e:	f7f7 fb9d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d312:	7de0      	ldrb	r0, [r4, #23]
    d314:	2800      	cmp	r0, #0
    d316:	d003      	beq.n	d320 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d318:	8810      	ldrh	r0, [r2, #0]
    d31a:	4288      	cmp	r0, r1
    d31c:	d201      	bcs.n	d322 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d31e:	2000      	movs	r0, #0
    d320:	bd10      	pop	{r4, pc}
    d322:	8011      	strh	r1, [r2, #0]
    d324:	1da1      	adds	r1, r4, #6
    d326:	4620      	mov	r0, r4
    d328:	f7ff feda 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d32c:	2000      	movs	r0, #0
    d32e:	75e0      	strb	r0, [r4, #23]
    d330:	2001      	movs	r0, #1
    d332:	bd10      	pop	{r4, pc}

0000d334 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d338:	8941      	ldrh	r1, [r0, #10]
    d33a:	8886      	ldrh	r6, [r0, #4]
    d33c:	4604      	mov	r4, r0
    d33e:	2500      	movs	r5, #0
    d340:	f100 070a 	add.w	r7, r0, #10
    d344:	e006      	b.n	d354 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d346:	4639      	mov	r1, r7
    d348:	4620      	mov	r0, r4
    d34a:	f7ff fec9 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d34e:	1c6d      	adds	r5, r5, #1
    d350:	8961      	ldrh	r1, [r4, #10]
    d352:	b2ad      	uxth	r5, r5
    d354:	42b1      	cmp	r1, r6
    d356:	d1f6      	bne.n	d346 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d358:	4628      	mov	r0, r5
    d35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d35e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d35e:	b530      	push	{r4, r5, lr}
    d360:	88c4      	ldrh	r4, [r0, #6]
    d362:	8881      	ldrh	r1, [r0, #4]
    d364:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d368:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d36c:	4413      	add	r3, r2
    d36e:	8882      	ldrh	r2, [r0, #4]
    d370:	8a85      	ldrh	r5, [r0, #20]
    d372:	42aa      	cmp	r2, r5
    d374:	d012      	beq.n	d39c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d376:	42a1      	cmp	r1, r4
    d378:	d010      	beq.n	d39c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d37a:	8981      	ldrh	r1, [r0, #12]
    d37c:	b971      	cbnz	r1, d39c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d37e:	6982      	ldr	r2, [r0, #24]
    d380:	b172      	cbz	r2, d3a0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d382:	4610      	mov	r0, r2
    d384:	f7ff ff13 	bl	d1ae <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d388:	b950      	cbnz	r0, d3a0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d38a:	8910      	ldrh	r0, [r2, #8]
    d38c:	3224      	adds	r2, #36	; 0x24
    d38e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d392:	4410      	add	r0, r2
    d394:	7899      	ldrb	r1, [r3, #2]
    d396:	7880      	ldrb	r0, [r0, #2]
    d398:	4288      	cmp	r0, r1
    d39a:	d101      	bne.n	d3a0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d39c:	2000      	movs	r0, #0
    d39e:	bd30      	pop	{r4, r5, pc}
    d3a0:	4618      	mov	r0, r3
    d3a2:	bd30      	pop	{r4, r5, pc}

0000d3a4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d3a4:	7f00      	ldrb	r0, [r0, #28]
    d3a6:	1d80      	adds	r0, r0, #6
    d3a8:	4408      	add	r0, r1
    d3aa:	1ec0      	subs	r0, r0, #3
    d3ac:	6010      	str	r0, [r2, #0]
    d3ae:	8808      	ldrh	r0, [r1, #0]
    d3b0:	4770      	bx	lr

0000d3b2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3b6:	460e      	mov	r6, r1
    d3b8:	88c1      	ldrh	r1, [r0, #6]
    d3ba:	8902      	ldrh	r2, [r0, #8]
    d3bc:	4604      	mov	r4, r0
    d3be:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d3c2:	8800      	ldrh	r0, [r0, #0]
    d3c4:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d3c8:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d3cc:	2845      	cmp	r0, #69	; 0x45
    d3ce:	d200      	bcs.n	d3d2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d3d0:	2045      	movs	r0, #69	; 0x45
    d3d2:	42b0      	cmp	r0, r6
    d3d4:	d203      	bcs.n	d3de <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d3d6:	21db      	movs	r1, #219	; 0xdb
    d3d8:	2014      	movs	r0, #20
    d3da:	f7f7 fb37 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3de:	4610      	mov	r0, r2
    d3e0:	f7ff fe9f 	bl	d122 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d3e4:	b110      	cbz	r0, d3ec <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d3e6:	2000      	movs	r0, #0
    d3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3ec:	42af      	cmp	r7, r5
    d3ee:	d908      	bls.n	d402 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3f0:	7f21      	ldrb	r1, [r4, #28]
    d3f2:	1b78      	subs	r0, r7, r5
    d3f4:	1a40      	subs	r0, r0, r1
    d3f6:	1f80      	subs	r0, r0, #6
    d3f8:	4286      	cmp	r6, r0
    d3fa:	dd02      	ble.n	d402 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3fc:	2000      	movs	r0, #0
    d3fe:	75e0      	strb	r0, [r4, #23]
    d400:	e7f1      	b.n	d3e6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d402:	eb08 0005 	add.w	r0, r8, r5
    d406:	2101      	movs	r1, #1
    d408:	8006      	strh	r6, [r0, #0]
    d40a:	75e1      	strb	r1, [r4, #23]
    d40c:	e7ec      	b.n	d3e8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d40e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d40e:	b538      	push	{r3, r4, r5, lr}
    d410:	88c4      	ldrh	r4, [r0, #6]
    d412:	8881      	ldrh	r1, [r0, #4]
    d414:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d418:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d41c:	441a      	add	r2, r3
    d41e:	42a1      	cmp	r1, r4
    d420:	d010      	beq.n	d444 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d422:	8983      	ldrh	r3, [r0, #12]
    d424:	8a05      	ldrh	r5, [r0, #16]
    d426:	8812      	ldrh	r2, [r2, #0]
    d428:	442b      	add	r3, r5
    d42a:	4293      	cmp	r3, r2
    d42c:	d308      	bcc.n	d440 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d42e:	f8ad 1000 	strh.w	r1, [sp]
    d432:	4669      	mov	r1, sp
    d434:	f7ff fe54 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d438:	f8bd 0000 	ldrh.w	r0, [sp]
    d43c:	42a0      	cmp	r0, r4
    d43e:	d001      	beq.n	d444 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d440:	2001      	movs	r0, #1
    d442:	bd38      	pop	{r3, r4, r5, pc}
    d444:	2000      	movs	r0, #0
    d446:	bd38      	pop	{r3, r4, r5, pc}

0000d448 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d448:	b570      	push	{r4, r5, r6, lr}
    d44a:	88c6      	ldrh	r6, [r0, #6]
    d44c:	8885      	ldrh	r5, [r0, #4]
    d44e:	4603      	mov	r3, r0
    d450:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d454:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d458:	4420      	add	r0, r4
    d45a:	42b5      	cmp	r5, r6
    d45c:	d102      	bne.n	d464 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d45e:	2000      	movs	r0, #0
    d460:	8218      	strh	r0, [r3, #16]
    d462:	bd70      	pop	{r4, r5, r6, pc}
    d464:	8804      	ldrh	r4, [r0, #0]
    d466:	899d      	ldrh	r5, [r3, #12]
    d468:	7f1e      	ldrb	r6, [r3, #28]
    d46a:	1b64      	subs	r4, r4, r5
    d46c:	4435      	add	r5, r6
    d46e:	4428      	add	r0, r5
    d470:	880d      	ldrh	r5, [r1, #0]
    d472:	b2a4      	uxth	r4, r4
    d474:	1cc0      	adds	r0, r0, #3
    d476:	42a5      	cmp	r5, r4
    d478:	d900      	bls.n	d47c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d47a:	800c      	strh	r4, [r1, #0]
    d47c:	899c      	ldrh	r4, [r3, #12]
    d47e:	b124      	cbz	r4, d48a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d480:	2400      	movs	r4, #0
    d482:	7014      	strb	r4, [r2, #0]
    d484:	8809      	ldrh	r1, [r1, #0]
    d486:	8219      	strh	r1, [r3, #16]
    d488:	bd70      	pop	{r4, r5, r6, pc}
    d48a:	2401      	movs	r4, #1
    d48c:	e7f9      	b.n	d482 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d48e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d48e:	b508      	push	{r3, lr}
    d490:	8a81      	ldrh	r1, [r0, #20]
    d492:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d496:	3aff      	subs	r2, #255	; 0xff
    d498:	d008      	beq.n	d4ac <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d49a:	7d82      	ldrb	r2, [r0, #22]
    d49c:	f88d 2000 	strb.w	r2, [sp]
    d4a0:	9a00      	ldr	r2, [sp, #0]
    d4a2:	9200      	str	r2, [sp, #0]
    d4a4:	f89d 2000 	ldrb.w	r2, [sp]
    d4a8:	b952      	cbnz	r2, d4c0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d4aa:	e004      	b.n	d4b6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d4ac:	f44f 7162 	mov.w	r1, #904	; 0x388
    d4b0:	2014      	movs	r0, #20
    d4b2:	f7f7 facb 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4b6:	8880      	ldrh	r0, [r0, #4]
    d4b8:	4281      	cmp	r1, r0
    d4ba:	d101      	bne.n	d4c0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d4bc:	2000      	movs	r0, #0
    d4be:	bd08      	pop	{r3, pc}
    d4c0:	2001      	movs	r0, #1
    d4c2:	bd08      	pop	{r3, pc}

0000d4c4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d4c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d4c8:	8281      	strh	r1, [r0, #20]
    d4ca:	2100      	movs	r1, #0
    d4cc:	7581      	strb	r1, [r0, #22]
    d4ce:	4770      	bx	lr

0000d4d0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d4d0:	b510      	push	{r4, lr}
    d4d2:	8a81      	ldrh	r1, [r0, #20]
    d4d4:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d4d8:	3aff      	subs	r2, #255	; 0xff
    d4da:	d004      	beq.n	d4e6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d4dc:	f44f 7159 	mov.w	r1, #868	; 0x364
    d4e0:	2014      	movs	r0, #20
    d4e2:	f7f7 fab3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4e6:	88c1      	ldrh	r1, [r0, #6]
    d4e8:	8281      	strh	r1, [r0, #20]
    d4ea:	89c1      	ldrh	r1, [r0, #14]
    d4ec:	b109      	cbz	r1, d4f2 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d4ee:	2101      	movs	r1, #1
    d4f0:	e000      	b.n	d4f4 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d4f2:	2100      	movs	r1, #0
    d4f4:	7581      	strb	r1, [r0, #22]
    d4f6:	bd10      	pop	{r4, pc}

0000d4f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4fc:	461d      	mov	r5, r3
    d4fe:	4616      	mov	r6, r2
    d500:	9f06      	ldr	r7, [sp, #24]
    d502:	460b      	mov	r3, r1
    d504:	4604      	mov	r4, r0
    d506:	463a      	mov	r2, r7
    d508:	4629      	mov	r1, r5
    d50a:	4630      	mov	r0, r6
    d50c:	f000 f84f 	bl	d5ae <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d510:	4283      	cmp	r3, r0
    d512:	d201      	bcs.n	d518 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d514:	21a8      	movs	r1, #168	; 0xa8
    d516:	e018      	b.n	d54a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d518:	1ce0      	adds	r0, r4, #3
    d51a:	f020 0103 	bic.w	r1, r0, #3
    d51e:	4620      	mov	r0, r4
    d520:	42a1      	cmp	r1, r4
    d522:	d001      	beq.n	d528 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d524:	21a9      	movs	r1, #169	; 0xa9
    d526:	e010      	b.n	d54a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d528:	2224      	movs	r2, #36	; 0x24
    d52a:	2100      	movs	r1, #0
    d52c:	f7ff f968 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d530:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d534:	82a0      	strh	r0, [r4, #20]
    d536:	19a8      	adds	r0, r5, r6
    d538:	1d80      	adds	r0, r0, #6
    d53a:	4378      	muls	r0, r7
    d53c:	b280      	uxth	r0, r0
    d53e:	7725      	strb	r5, [r4, #28]
    d540:	8060      	strh	r0, [r4, #2]
    d542:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d546:	d903      	bls.n	d550 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d548:	21af      	movs	r1, #175	; 0xaf
    d54a:	2014      	movs	r0, #20
    d54c:	f7f7 fa7e 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d550:	8026      	strh	r6, [r4, #0]
    d552:	2000      	movs	r0, #0
    d554:	7760      	strb	r0, [r4, #29]
    d556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d55a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d55a:	6181      	str	r1, [r0, #24]
    d55c:	6188      	str	r0, [r1, #24]
    d55e:	4770      	bx	lr

0000d560 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d564:	460b      	mov	r3, r1
    d566:	4604      	mov	r4, r0
    d568:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d56c:	8905      	ldrh	r5, [r0, #8]
    d56e:	8946      	ldrh	r6, [r0, #10]
    d570:	8880      	ldrh	r0, [r0, #4]
    d572:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d576:	4439      	add	r1, r7
    d578:	460f      	mov	r7, r1
    d57a:	4285      	cmp	r5, r0
    d57c:	d102      	bne.n	d584 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d57e:	2000      	movs	r0, #0
    d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d584:	b10a      	cbz	r2, d58a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d586:	1cc8      	adds	r0, r1, #3
    d588:	6010      	str	r0, [r2, #0]
    d58a:	b123      	cbz	r3, d596 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d58c:	7f22      	ldrb	r2, [r4, #28]
    d58e:	1cf9      	adds	r1, r7, #3
    d590:	4618      	mov	r0, r3
    d592:	f7ff f8bb 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d596:	883f      	ldrh	r7, [r7, #0]
    d598:	f104 0108 	add.w	r1, r4, #8
    d59c:	4620      	mov	r0, r4
    d59e:	f7ff fd9f 	bl	d0e0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5a2:	42b5      	cmp	r5, r6
    d5a4:	d101      	bne.n	d5aa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d5a6:	8920      	ldrh	r0, [r4, #8]
    d5a8:	8160      	strh	r0, [r4, #10]
    d5aa:	4638      	mov	r0, r7
    d5ac:	e7e8      	b.n	d580 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d5ae <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5ae:	4401      	add	r1, r0
    d5b0:	1d89      	adds	r1, r1, #6
    d5b2:	4351      	muls	r1, r2
    d5b4:	b28a      	uxth	r2, r1
    d5b6:	2100      	movs	r1, #0
    d5b8:	2845      	cmp	r0, #69	; 0x45
    d5ba:	d201      	bcs.n	d5c0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d5bc:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d5c0:	3224      	adds	r2, #36	; 0x24
    d5c2:	1850      	adds	r0, r2, r1
    d5c4:	b280      	uxth	r0, r0
    d5c6:	4770      	bx	lr

0000d5c8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5cc:	4688      	mov	r8, r1
    d5ce:	88c1      	ldrh	r1, [r0, #6]
    d5d0:	4604      	mov	r4, r0
    d5d2:	8900      	ldrh	r0, [r0, #8]
    d5d4:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d5d8:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d5dc:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d5e0:	eb05 0906 	add.w	r9, r5, r6
    d5e4:	f7ff fd9d 	bl	d122 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d5e8:	2200      	movs	r2, #0
    d5ea:	b998      	cbnz	r0, d614 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d5ec:	8820      	ldrh	r0, [r4, #0]
    d5ee:	2845      	cmp	r0, #69	; 0x45
    d5f0:	d200      	bcs.n	d5f4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d5f2:	2045      	movs	r0, #69	; 0x45
    d5f4:	42b7      	cmp	r7, r6
    d5f6:	d906      	bls.n	d606 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d5f8:	7f23      	ldrb	r3, [r4, #28]
    d5fa:	1bb9      	subs	r1, r7, r6
    d5fc:	1ac9      	subs	r1, r1, r3
    d5fe:	1f89      	subs	r1, r1, #6
    d600:	4281      	cmp	r1, r0
    d602:	da00      	bge.n	d606 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d604:	4608      	mov	r0, r1
    d606:	89e1      	ldrh	r1, [r4, #14]
    d608:	b111      	cbz	r1, d610 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d60a:	f8b9 3000 	ldrh.w	r3, [r9]
    d60e:	1ac0      	subs	r0, r0, r3
    d610:	4540      	cmp	r0, r8
    d612:	da03      	bge.n	d61c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d614:	8262      	strh	r2, [r4, #18]
    d616:	2000      	movs	r0, #0
    d618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d61c:	7f20      	ldrb	r0, [r4, #28]
    d61e:	4429      	add	r1, r5
    d620:	1d80      	adds	r0, r0, #6
    d622:	4430      	add	r0, r6
    d624:	4408      	add	r0, r1
    d626:	f8a4 8012 	strh.w	r8, [r4, #18]
    d62a:	1ec0      	subs	r0, r0, #3
    d62c:	e7f4      	b.n	d618 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d62e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d62e:	2100      	movs	r1, #0
    d630:	81c1      	strh	r1, [r0, #14]
    d632:	8241      	strh	r1, [r0, #18]
    d634:	7581      	strb	r1, [r0, #22]
    d636:	4770      	bx	lr

0000d638 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d638:	b570      	push	{r4, r5, r6, lr}
    d63a:	2300      	movs	r3, #0
    d63c:	2908      	cmp	r1, #8
    d63e:	d204      	bcs.n	d64a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d640:	f240 11cb 	movw	r1, #459	; 0x1cb
    d644:	2015      	movs	r0, #21
    d646:	f7f7 fa01 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d64a:	6802      	ldr	r2, [r0, #0]
    d64c:	b90a      	cbnz	r2, d652 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d64e:	e01e      	b.n	d68e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d650:	4610      	mov	r0, r2
    d652:	6802      	ldr	r2, [r0, #0]
    d654:	8893      	ldrh	r3, [r2, #4]
    d656:	428b      	cmp	r3, r1
    d658:	d002      	beq.n	d660 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d65a:	6813      	ldr	r3, [r2, #0]
    d65c:	2b00      	cmp	r3, #0
    d65e:	d1f7      	bne.n	d650 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d660:	8894      	ldrh	r4, [r2, #4]
    d662:	4613      	mov	r3, r2
    d664:	428c      	cmp	r4, r1
    d666:	d101      	bne.n	d66c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d668:	6811      	ldr	r1, [r2, #0]
    d66a:	e00d      	b.n	d688 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d66c:	f101 0508 	add.w	r5, r1, #8
    d670:	b2ae      	uxth	r6, r5
    d672:	2500      	movs	r5, #0
    d674:	42b4      	cmp	r4, r6
    d676:	d309      	bcc.n	d68c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d678:	1a64      	subs	r4, r4, r1
    d67a:	4411      	add	r1, r2
    d67c:	600d      	str	r5, [r1, #0]
    d67e:	808c      	strh	r4, [r1, #4]
    d680:	6802      	ldr	r2, [r0, #0]
    d682:	6812      	ldr	r2, [r2, #0]
    d684:	6002      	str	r2, [r0, #0]
    d686:	600a      	str	r2, [r1, #0]
    d688:	6001      	str	r1, [r0, #0]
    d68a:	e000      	b.n	d68e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d68c:	2300      	movs	r3, #0
    d68e:	4618      	mov	r0, r3
    d690:	bd70      	pop	{r4, r5, r6, pc}

0000d692 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d692:	b510      	push	{r4, lr}
    d694:	000c      	movs	r4, r1
    d696:	d006      	beq.n	d6a6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d698:	2c08      	cmp	r4, #8
    d69a:	d209      	bcs.n	d6b0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d69c:	f240 1195 	movw	r1, #405	; 0x195
    d6a0:	2015      	movs	r0, #21
    d6a2:	f7f7 f9d3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6a6:	b108      	cbz	r0, d6ac <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6a8:	2100      	movs	r1, #0
    d6aa:	6001      	str	r1, [r0, #0]
    d6ac:	2000      	movs	r0, #0
    d6ae:	bd10      	pop	{r4, pc}
    d6b0:	b118      	cbz	r0, d6ba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d6b2:	b2a1      	uxth	r1, r4
    d6b4:	6800      	ldr	r0, [r0, #0]
    d6b6:	f000 f814 	bl	d6e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d6ba:	1d20      	adds	r0, r4, #4
    d6bc:	bd10      	pop	{r4, pc}

0000d6be <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d6be:	2100      	movs	r1, #0
    d6c0:	6802      	ldr	r2, [r0, #0]
    d6c2:	e003      	b.n	d6cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d6c4:	8893      	ldrh	r3, [r2, #4]
    d6c6:	6812      	ldr	r2, [r2, #0]
    d6c8:	4419      	add	r1, r3
    d6ca:	b289      	uxth	r1, r1
    d6cc:	2a00      	cmp	r2, #0
    d6ce:	d1f9      	bne.n	d6c4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d6d0:	f000 b807 	b.w	d6e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d6d4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d6d4:	2300      	movs	r3, #0
    d6d6:	600b      	str	r3, [r1, #0]
    d6d8:	808a      	strh	r2, [r1, #4]
    d6da:	6802      	ldr	r2, [r0, #0]
    d6dc:	600a      	str	r2, [r1, #0]
    d6de:	6001      	str	r1, [r0, #0]
    d6e0:	4770      	bx	lr
    d6e2:	2300      	movs	r3, #0
    d6e4:	6043      	str	r3, [r0, #4]
    d6e6:	1d02      	adds	r2, r0, #4
    d6e8:	8101      	strh	r1, [r0, #8]
    d6ea:	6002      	str	r2, [r0, #0]
    d6ec:	4770      	bx	lr

0000d6ee <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d6ee:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d6f2:	3bff      	subs	r3, #255	; 0xff
    d6f4:	d001      	beq.n	d6fa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d6f6:	2902      	cmp	r1, #2
    d6f8:	d301      	bcc.n	d6fe <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d6fa:	2000      	movs	r0, #0
    d6fc:	4770      	bx	lr
    d6fe:	f7f7 bc5f 	b.w	4fc0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d702:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d706:	3aff      	subs	r2, #255	; 0xff
    d708:	d001      	beq.n	d70e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d70a:	2902      	cmp	r1, #2
    d70c:	d301      	bcc.n	d712 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d70e:	2000      	movs	r0, #0
    d710:	4770      	bx	lr
    d712:	f7f7 bc8f 	b.w	5034 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d716:	b570      	push	{r4, r5, r6, lr}
    d718:	4605      	mov	r5, r0
    d71a:	460c      	mov	r4, r1
    d71c:	4608      	mov	r0, r1
    d71e:	f000 f973 	bl	da08 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d722:	b108      	cbz	r0, d728 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d724:	2010      	movs	r0, #16
    d726:	bd70      	pop	{r4, r5, r6, pc}
    d728:	2d02      	cmp	r5, #2
    d72a:	d301      	bcc.n	d730 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d72c:	2007      	movs	r0, #7
    d72e:	bd70      	pop	{r4, r5, r6, pc}
    d730:	7025      	strb	r5, [r4, #0]
    d732:	2000      	movs	r0, #0
    d734:	8060      	strh	r0, [r4, #2]
    d736:	bd70      	pop	{r4, r5, r6, pc}
    d738:	b510      	push	{r4, lr}
    d73a:	4604      	mov	r4, r0
    d73c:	f7f7 fcc6 	bl	50cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d740:	42a0      	cmp	r0, r4
    d742:	d901      	bls.n	d748 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d744:	2001      	movs	r0, #1
    d746:	bd10      	pop	{r4, pc}
    d748:	2000      	movs	r0, #0
    d74a:	bd10      	pop	{r4, pc}
    d74c:	4770      	bx	lr

0000d74e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d74e:	b570      	push	{r4, r5, r6, lr}
    d750:	460e      	mov	r6, r1
    d752:	461d      	mov	r5, r3
    d754:	4611      	mov	r1, r2
    d756:	f000 f811 	bl	d77c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d75a:	4604      	mov	r4, r0
    d75c:	4629      	mov	r1, r5
    d75e:	4630      	mov	r0, r6
    d760:	f000 f803 	bl	d76a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d764:	4420      	add	r0, r4
    d766:	1d00      	adds	r0, r0, #4
    d768:	bd70      	pop	{r4, r5, r6, pc}
    d76a:	b510      	push	{r4, lr}
    d76c:	460a      	mov	r2, r1
    d76e:	2101      	movs	r1, #1
    d770:	f7ff ff1d 	bl	d5ae <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d774:	1cc0      	adds	r0, r0, #3
    d776:	f020 0003 	bic.w	r0, r0, #3
    d77a:	bd10      	pop	{r4, pc}
    d77c:	b510      	push	{r4, lr}
    d77e:	460a      	mov	r2, r1
    d780:	2101      	movs	r1, #1
    d782:	f7ff ff14 	bl	d5ae <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d786:	1cc0      	adds	r0, r0, #3
    d788:	f020 0003 	bic.w	r0, r0, #3
    d78c:	bd10      	pop	{r4, pc}
    d78e:	b109      	cbz	r1, d794 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d790:	2100      	movs	r1, #0
    d792:	e000      	b.n	d796 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    d794:	2102      	movs	r1, #2
    d796:	1843      	adds	r3, r0, r1
    d798:	7d1a      	ldrb	r2, [r3, #20]
    d79a:	2a02      	cmp	r2, #2
    d79c:	d008      	beq.n	d7b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d79e:	7d5b      	ldrb	r3, [r3, #21]
    d7a0:	2b02      	cmp	r3, #2
    d7a2:	d009      	beq.n	d7b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d7a4:	2a03      	cmp	r2, #3
    d7a6:	d003      	beq.n	d7b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d7a8:	2b03      	cmp	r3, #3
    d7aa:	d005      	beq.n	d7b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d7ac:	2000      	movs	r0, #0
    d7ae:	4770      	bx	lr
    d7b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d7b4:	8b00      	ldrh	r0, [r0, #24]
    d7b6:	4770      	bx	lr
    d7b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d7bc:	8b40      	ldrh	r0, [r0, #26]
    d7be:	4770      	bx	lr
    d7c0:	b109      	cbz	r1, d7c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d7c2:	2100      	movs	r1, #0
    d7c4:	e000      	b.n	d7c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    d7c6:	2102      	movs	r1, #2
    d7c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d7cc:	8b01      	ldrh	r1, [r0, #24]
    d7ce:	b911      	cbnz	r1, d7d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    d7d0:	8b40      	ldrh	r0, [r0, #26]
    d7d2:	2800      	cmp	r0, #0
    d7d4:	d000      	beq.n	d7d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    d7d6:	2001      	movs	r0, #1
    d7d8:	4770      	bx	lr
    d7da:	b538      	push	{r3, r4, r5, lr}
    d7dc:	7883      	ldrb	r3, [r0, #2]
    d7de:	f88d 3000 	strb.w	r3, [sp]
    d7e2:	9b00      	ldr	r3, [sp, #0]
    d7e4:	9300      	str	r3, [sp, #0]
    d7e6:	f89d 3000 	ldrb.w	r3, [sp]
    d7ea:	b953      	cbnz	r3, d802 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    d7ec:	b10a      	cbz	r2, d7f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    d7ee:	2300      	movs	r3, #0
    d7f0:	e000      	b.n	d7f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    d7f2:	2302      	movs	r3, #2
    d7f4:	18c2      	adds	r2, r0, r3
    d7f6:	7d14      	ldrb	r4, [r2, #20]
    d7f8:	2c02      	cmp	r4, #2
    d7fa:	d004      	beq.n	d806 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d7fc:	7d52      	ldrb	r2, [r2, #21]
    d7fe:	2a02      	cmp	r2, #2
    d800:	d004      	beq.n	d80c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    d802:	2000      	movs	r0, #0
    d804:	bd38      	pop	{r3, r4, r5, pc}
    d806:	461a      	mov	r2, r3
    d808:	1c5b      	adds	r3, r3, #1
    d80a:	e000      	b.n	d80e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d80c:	1c5a      	adds	r2, r3, #1
    d80e:	b181      	cbz	r1, d832 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    d810:	18c5      	adds	r5, r0, r3
    d812:	2400      	movs	r4, #0
    d814:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d818:	752c      	strb	r4, [r5, #20]
    d81a:	831c      	strh	r4, [r3, #24]
    d81c:	2303      	movs	r3, #3
    d81e:	1884      	adds	r4, r0, r2
    d820:	7523      	strb	r3, [r4, #20]
    d822:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d826:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d82a:	685b      	ldr	r3, [r3, #4]
    d82c:	600b      	str	r3, [r1, #0]
    d82e:	8b00      	ldrh	r0, [r0, #24]
    d830:	8088      	strh	r0, [r1, #4]
    d832:	2001      	movs	r0, #1
    d834:	bd38      	pop	{r3, r4, r5, pc}
    d836:	b510      	push	{r4, lr}
    d838:	b109      	cbz	r1, d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    d83a:	2100      	movs	r1, #0
    d83c:	e000      	b.n	d840 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    d83e:	2102      	movs	r1, #2
    d840:	1843      	adds	r3, r0, r1
    d842:	7d1c      	ldrb	r4, [r3, #20]
    d844:	4294      	cmp	r4, r2
    d846:	d103      	bne.n	d850 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    d848:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d84c:	8b00      	ldrh	r0, [r0, #24]
    d84e:	bd10      	pop	{r4, pc}
    d850:	7d5b      	ldrb	r3, [r3, #21]
    d852:	4293      	cmp	r3, r2
    d854:	d103      	bne.n	d85e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    d856:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d85a:	8b40      	ldrh	r0, [r0, #26]
    d85c:	bd10      	pop	{r4, pc}
    d85e:	2000      	movs	r0, #0
    d860:	bd10      	pop	{r4, pc}
    d862:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d866:	d201      	bcs.n	d86c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    d868:	0841      	lsrs	r1, r0, #1
    d86a:	e000      	b.n	d86e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    d86c:	21ff      	movs	r1, #255	; 0xff
    d86e:	1a40      	subs	r0, r0, r1
    d870:	f240 6172 	movw	r1, #1650	; 0x672
    d874:	4288      	cmp	r0, r1
    d876:	db00      	blt.n	d87a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    d878:	4608      	mov	r0, r1
    d87a:	b280      	uxth	r0, r0
    d87c:	4770      	bx	lr

0000d87e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d87e:	2101      	movs	r1, #1
    d880:	f7ff bf85 	b.w	d78e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d888:	4606      	mov	r6, r0
    d88a:	f342 0780 	sbfx	r7, r2, #2, #1
    d88e:	7848      	ldrb	r0, [r1, #1]
    d890:	460c      	mov	r4, r1
    d892:	f022 0504 	bic.w	r5, r2, #4
    d896:	1c7f      	adds	r7, r7, #1
    d898:	b100      	cbz	r0, d89c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d89a:	b90d      	cbnz	r5, d8a0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d89c:	4328      	orrs	r0, r5
    d89e:	d104      	bne.n	d8aa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d8a0:	b145      	cbz	r5, d8b4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d8a2:	2100      	movs	r1, #0
    d8a4:	4620      	mov	r0, r4
    d8a6:	f7f7 fd19 	bl	52dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d8aa:	2101      	movs	r1, #1
    d8ac:	70a1      	strb	r1, [r4, #2]
    d8ae:	b11f      	cbz	r7, d8b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d8b0:	2000      	movs	r0, #0
    d8b2:	e002      	b.n	d8ba <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d8b4:	2101      	movs	r1, #1
    d8b6:	e7f5      	b.n	d8a4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d8b8:	2002      	movs	r0, #2
    d8ba:	1822      	adds	r2, r4, r0
    d8bc:	7d12      	ldrb	r2, [r2, #20]
    d8be:	2a03      	cmp	r2, #3
    d8c0:	d102      	bne.n	d8c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d8c2:	2d02      	cmp	r5, #2
    d8c4:	d000      	beq.n	d8c8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d8c6:	1c40      	adds	r0, r0, #1
    d8c8:	1822      	adds	r2, r4, r0
    d8ca:	7511      	strb	r1, [r2, #20]
    d8cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d8d0:	2200      	movs	r2, #0
    d8d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d8d6:	830a      	strh	r2, [r1, #24]
    d8d8:	6840      	ldr	r0, [r0, #4]
    d8da:	70a2      	strb	r2, [r4, #2]
    d8dc:	4631      	mov	r1, r6
    d8de:	f362 010f 	bfi	r1, r2, #0, #16
    d8e2:	e9c6 0100 	strd	r0, r1, [r6]
    d8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d8ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8ee:	461e      	mov	r6, r3
    d8f0:	4613      	mov	r3, r2
    d8f2:	4604      	mov	r4, r0
    d8f4:	b109      	cbz	r1, d8fa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d8f6:	2000      	movs	r0, #0
    d8f8:	e000      	b.n	d8fc <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d8fa:	2002      	movs	r0, #2
    d8fc:	2101      	movs	r1, #1
    d8fe:	70a1      	strb	r1, [r4, #2]
    d900:	1821      	adds	r1, r4, r0
    d902:	7d0a      	ldrb	r2, [r1, #20]
    d904:	2a01      	cmp	r2, #1
    d906:	d003      	beq.n	d910 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d908:	7d49      	ldrb	r1, [r1, #21]
    d90a:	2901      	cmp	r1, #1
    d90c:	d10c      	bne.n	d928 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d90e:	1c40      	adds	r0, r0, #1
    d910:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d914:	2700      	movs	r7, #0
    d916:	8b29      	ldrh	r1, [r5, #24]
    d918:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d91c:	198a      	adds	r2, r1, r6
    d91e:	4562      	cmp	r2, ip
    d920:	d905      	bls.n	d92e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d922:	4420      	add	r0, r4
    d924:	832f      	strh	r7, [r5, #24]
    d926:	7507      	strb	r7, [r0, #20]
    d928:	2000      	movs	r0, #0
    d92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d92e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d932:	4632      	mov	r2, r6
    d934:	6840      	ldr	r0, [r0, #4]
    d936:	4408      	add	r0, r1
    d938:	4619      	mov	r1, r3
    d93a:	f7fe fee7 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d93e:	8b28      	ldrh	r0, [r5, #24]
    d940:	4430      	add	r0, r6
    d942:	8328      	strh	r0, [r5, #24]
    d944:	70a7      	strb	r7, [r4, #2]
    d946:	2001      	movs	r0, #1
    d948:	e7ef      	b.n	d92a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d94a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d94a:	2202      	movs	r2, #2
    d94c:	2100      	movs	r1, #0
    d94e:	f7ff bf72 	b.w	d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d952 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d952:	b510      	push	{r4, lr}
    d954:	2101      	movs	r1, #1
    d956:	f7ff ff33 	bl	d7c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    d95a:	2800      	cmp	r0, #0
    d95c:	d000      	beq.n	d960 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d95e:	2001      	movs	r0, #1
    d960:	bd10      	pop	{r4, pc}

0000d962 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d962:	2201      	movs	r2, #1
    d964:	f7ff bf39 	b.w	d7da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d968 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d968:	2200      	movs	r2, #0
    d96a:	f7ff bf36 	b.w	d7da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d96e:	b570      	push	{r4, r5, r6, lr}
    d970:	b109      	cbz	r1, d976 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d972:	2300      	movs	r3, #0
    d974:	e000      	b.n	d978 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d976:	2302      	movs	r3, #2
    d978:	2101      	movs	r1, #1
    d97a:	7081      	strb	r1, [r0, #2]
    d97c:	18c1      	adds	r1, r0, r3
    d97e:	2402      	movs	r4, #2
    d980:	7d0d      	ldrb	r5, [r1, #20]
    d982:	2d01      	cmp	r5, #1
    d984:	d007      	beq.n	d996 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d986:	7d4d      	ldrb	r5, [r1, #21]
    d988:	2d01      	cmp	r5, #1
    d98a:	d009      	beq.n	d9a0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d98c:	f44f 718b 	mov.w	r1, #278	; 0x116
    d990:	2009      	movs	r0, #9
    d992:	f7f7 f85b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d996:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d99a:	831a      	strh	r2, [r3, #24]
    d99c:	750c      	strb	r4, [r1, #20]
    d99e:	e003      	b.n	d9a8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d9a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d9a4:	835a      	strh	r2, [r3, #26]
    d9a6:	754c      	strb	r4, [r1, #21]
    d9a8:	2100      	movs	r1, #0
    d9aa:	7081      	strb	r1, [r0, #2]
    d9ac:	bd70      	pop	{r4, r5, r6, pc}

0000d9ae <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d9ae:	2101      	movs	r1, #1
    d9b0:	7001      	strb	r1, [r0, #0]
    d9b2:	4770      	bx	lr

0000d9b4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d9b4:	2201      	movs	r2, #1
    d9b6:	4611      	mov	r1, r2
    d9b8:	f7ff bf3d 	b.w	d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d9bc <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d9bc:	2201      	movs	r2, #1
    d9be:	2100      	movs	r1, #0
    d9c0:	f7ff bf39 	b.w	d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d9c4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d9c4:	2100      	movs	r1, #0
    d9c6:	f7ff bee2 	b.w	d78e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    d9ca:	2800      	cmp	r0, #0
    d9cc:	db09      	blt.n	d9e2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d9ce:	f000 021f 	and.w	r2, r0, #31
    d9d2:	2101      	movs	r1, #1
    d9d4:	4091      	lsls	r1, r2
    d9d6:	0940      	lsrs	r0, r0, #5
    d9d8:	0080      	lsls	r0, r0, #2
    d9da:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d9de:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d9e2:	4770      	bx	lr
    d9e4:	5840      	ldr	r0, [r0, r1]
    d9e6:	2800      	cmp	r0, #0
    d9e8:	d000      	beq.n	d9ec <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    d9ea:	2001      	movs	r0, #1
    d9ec:	4770      	bx	lr

0000d9ee <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d9ee:	f7f7 bdcb 	b.w	5588 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d9f2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d9f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d9f6:	2000      	movs	r0, #0
    d9f8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d9fc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    da00:	2001      	movs	r0, #1
    da02:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    da06:	4770      	bx	lr

0000da08 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    da08:	b108      	cbz	r0, da0e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    da0a:	2000      	movs	r0, #0
    da0c:	4770      	bx	lr
    da0e:	2001      	movs	r0, #1
    da10:	4770      	bx	lr

0000da12 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    da12:	f7f7 bf0b 	b.w	582c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000da16 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    da16:	f7f7 bef9 	b.w	580c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000da1a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    da1a:	b510      	push	{r4, lr}
    da1c:	2900      	cmp	r1, #0
    da1e:	4604      	mov	r4, r0
    da20:	f04f 0106 	mov.w	r1, #6
    da24:	d002      	beq.n	da2c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    da26:	f7f7 f89d 	bl	4b64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    da2a:	e001      	b.n	da30 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    da2c:	f7f7 f8a8 	bl	4b80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    da30:	7960      	ldrb	r0, [r4, #5]
    da32:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    da36:	7160      	strb	r0, [r4, #5]
    da38:	bd10      	pop	{r4, pc}

0000da3a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    da3a:	4770      	bx	lr

0000da3c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    da3c:	b530      	push	{r4, r5, lr}
    da3e:	460c      	mov	r4, r1
    da40:	4605      	mov	r5, r0
    da42:	b08d      	sub	sp, #52	; 0x34
    da44:	f04f 0103 	mov.w	r1, #3
    da48:	f104 0003 	add.w	r0, r4, #3
    da4c:	b112      	cbz	r2, da54 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    da4e:	f7f7 f889 	bl	4b64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    da52:	e001      	b.n	da58 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    da54:	f7f7 f894 	bl	4b80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    da58:	7960      	ldrb	r0, [r4, #5]
    da5a:	220d      	movs	r2, #13
    da5c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    da60:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    da64:	7160      	strb	r0, [r4, #5]
    da66:	2100      	movs	r1, #0
    da68:	a804      	add	r0, sp, #16
    da6a:	f7fe fec9 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da6e:	78e0      	ldrb	r0, [r4, #3]
    da70:	f88d 001f 	strb.w	r0, [sp, #31]
    da74:	7920      	ldrb	r0, [r4, #4]
    da76:	f88d 001e 	strb.w	r0, [sp, #30]
    da7a:	7960      	ldrb	r0, [r4, #5]
    da7c:	f88d 001d 	strb.w	r0, [sp, #29]
    da80:	2210      	movs	r2, #16
    da82:	4629      	mov	r1, r5
    da84:	4668      	mov	r0, sp
    da86:	f7fe fe41 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da8a:	4668      	mov	r0, sp
    da8c:	f7ff ffaf 	bl	d9ee <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da90:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    da94:	7020      	strb	r0, [r4, #0]
    da96:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    da9a:	7060      	strb	r0, [r4, #1]
    da9c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    daa0:	70a0      	strb	r0, [r4, #2]
    daa2:	b00d      	add	sp, #52	; 0x34
    daa4:	bd30      	pop	{r4, r5, pc}

0000daa6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    daa6:	f7f8 ba99 	b.w	5fdc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    daaa:	07c1      	lsls	r1, r0, #31
    daac:	d001      	beq.n	dab2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    daae:	2001      	movs	r0, #1
    dab0:	4770      	bx	lr
    dab2:	0780      	lsls	r0, r0, #30
    dab4:	d501      	bpl.n	daba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dab6:	2002      	movs	r0, #2
    dab8:	4770      	bx	lr
    daba:	2000      	movs	r0, #0
    dabc:	4770      	bx	lr
    dabe:	b510      	push	{r4, lr}
    dac0:	2801      	cmp	r0, #1
    dac2:	d008      	beq.n	dad6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dac4:	2802      	cmp	r0, #2
    dac6:	d004      	beq.n	dad2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dac8:	f240 31ad 	movw	r1, #941	; 0x3ad
    dacc:	2006      	movs	r0, #6
    dace:	f7f6 ffbd 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad2:	2001      	movs	r0, #1
    dad4:	bd10      	pop	{r4, pc}
    dad6:	2000      	movs	r0, #0
    dad8:	bd10      	pop	{r4, pc}
    dada:	2900      	cmp	r1, #0
    dadc:	d004      	beq.n	dae8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dade:	2801      	cmp	r0, #1
    dae0:	d003      	beq.n	daea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dae2:	2901      	cmp	r1, #1
    dae4:	d001      	beq.n	daea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dae6:	2002      	movs	r0, #2
    dae8:	4770      	bx	lr
    daea:	2001      	movs	r0, #1
    daec:	4770      	bx	lr
    daee:	f7ff bcab 	b.w	d448 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000daf2 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    daf2:	2101      	movs	r1, #1
    daf4:	f7f8 be02 	b.w	66fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000daf8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    daf8:	b510      	push	{r4, lr}
    dafa:	f002 fc46 	bl	1038a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dafe:	b118      	cbz	r0, db08 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    db00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db04:	f7fd bb58 	b.w	b1b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    db08:	20ff      	movs	r0, #255	; 0xff
    db0a:	bd10      	pop	{r4, pc}

0000db0c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    db0c:	b510      	push	{r4, lr}
    db0e:	f7f8 fe3d 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    db12:	2810      	cmp	r0, #16
    db14:	d003      	beq.n	db1e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    db16:	f7f8 fe09 	bl	672c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    db1a:	2810      	cmp	r0, #16
    db1c:	d100      	bne.n	db20 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    db1e:	2008      	movs	r0, #8
    db20:	bd10      	pop	{r4, pc}

0000db22 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    db22:	b510      	push	{r4, lr}
    db24:	f7f8 fe32 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    db28:	2810      	cmp	r0, #16
    db2a:	d007      	beq.n	db3c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    db2c:	f7f8 fdfe 	bl	672c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    db30:	2810      	cmp	r0, #16
    db32:	d003      	beq.n	db3c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    db34:	f7f8 fe72 	bl	681c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    db38:	2001      	movs	r0, #1
    db3a:	bd10      	pop	{r4, pc}
    db3c:	2000      	movs	r0, #0
    db3e:	bd10      	pop	{r4, pc}

0000db40 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    db40:	b510      	push	{r4, lr}
    db42:	f7f8 fe23 	bl	678c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    db46:	2810      	cmp	r0, #16
    db48:	d003      	beq.n	db52 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    db4a:	f7f8 feaf 	bl	68ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    db4e:	2001      	movs	r0, #1
    db50:	bd10      	pop	{r4, pc}
    db52:	2000      	movs	r0, #0
    db54:	bd10      	pop	{r4, pc}

0000db56 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    db56:	b570      	push	{r4, r5, r6, lr}
    db58:	460e      	mov	r6, r1
    db5a:	b08c      	sub	sp, #48	; 0x30
    db5c:	4614      	mov	r4, r2
    db5e:	4601      	mov	r1, r0
    db60:	461d      	mov	r5, r3
    db62:	2210      	movs	r2, #16
    db64:	4668      	mov	r0, sp
    db66:	f000 f91a 	bl	dd9e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    db6a:	2210      	movs	r2, #16
    db6c:	4631      	mov	r1, r6
    db6e:	a804      	add	r0, sp, #16
    db70:	f000 f915 	bl	dd9e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    db74:	4668      	mov	r0, sp
    db76:	f7ff ff3a 	bl	d9ee <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    db7a:	a908      	add	r1, sp, #32
    db7c:	f04f 0210 	mov.w	r2, #16
    db80:	4628      	mov	r0, r5
    db82:	b11c      	cbz	r4, db8c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    db84:	f000 f90b 	bl	dd9e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    db88:	b00c      	add	sp, #48	; 0x30
    db8a:	bd70      	pop	{r4, r5, r6, pc}
    db8c:	f7fe fdbe 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db90:	e7fa      	b.n	db88 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    db92:	b510      	push	{r4, lr}
    db94:	460c      	mov	r4, r1
    db96:	2100      	movs	r1, #0
    db98:	f7ff fdb3 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    db9c:	6060      	str	r0, [r4, #4]
    db9e:	b118      	cbz	r0, dba8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dba0:	2001      	movs	r0, #1
    dba2:	7020      	strb	r0, [r4, #0]
    dba4:	2000      	movs	r0, #0
    dba6:	bd10      	pop	{r4, pc}
    dba8:	2002      	movs	r0, #2
    dbaa:	bd10      	pop	{r4, pc}

0000dbac <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dbac:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbb0:	4348      	muls	r0, r1
    dbb2:	4770      	bx	lr

0000dbb4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dbb4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dbb8:	fbb0 f0f1 	udiv	r0, r0, r1
    dbbc:	b280      	uxth	r0, r0
    dbbe:	4770      	bx	lr

0000dbc0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dbc0:	b570      	push	{r4, r5, r6, lr}
    dbc2:	4604      	mov	r4, r0
    dbc4:	4290      	cmp	r0, r2
    dbc6:	d20b      	bcs.n	dbe0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dbc8:	1b10      	subs	r0, r2, r4
    dbca:	2865      	cmp	r0, #101	; 0x65
    dbcc:	d200      	bcs.n	dbd0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dbce:	2065      	movs	r0, #101	; 0x65
    dbd0:	1825      	adds	r5, r4, r0
    dbd2:	428d      	cmp	r5, r1
    dbd4:	d803      	bhi.n	dbde <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    dbd6:	2104      	movs	r1, #4
    dbd8:	f7f4 fa64 	bl	20a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    dbdc:	b108      	cbz	r0, dbe2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    dbde:	4620      	mov	r0, r4
    dbe0:	bd70      	pop	{r4, r5, r6, pc}
    dbe2:	4628      	mov	r0, r5
    dbe4:	bd70      	pop	{r4, r5, r6, pc}

0000dbe6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dbe6:	b510      	push	{r4, lr}
    dbe8:	f1a2 030f 	sub.w	r3, r2, #15
    dbec:	290c      	cmp	r1, #12
    dbee:	d244      	bcs.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dbf0:	e8df f001 	tbb	[pc, r1]
    dbf4:	120d0806 	.word	0x120d0806
    dbf8:	241c1815 	.word	0x241c1815
    dbfc:	312a4127 	.word	0x312a4127
    dc00:	b3c2      	cbz	r2, dc74 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    dc02:	e03a      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc04:	2a07      	cmp	r2, #7
    dc06:	d03a      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc08:	2a08      	cmp	r2, #8
    dc0a:	d038      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc0c:	e035      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc0e:	2a0c      	cmp	r2, #12
    dc10:	d035      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc12:	2a0b      	cmp	r2, #11
    dc14:	d033      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc16:	e030      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc18:	2a0d      	cmp	r2, #13
    dc1a:	d030      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc1c:	e02d      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc1e:	2b0c      	cmp	r3, #12
    dc20:	d92d      	bls.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc22:	e02a      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc24:	3a10      	subs	r2, #16
    dc26:	2a0b      	cmp	r2, #11
    dc28:	d929      	bls.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc2a:	e026      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc2c:	2b03      	cmp	r3, #3
    dc2e:	d926      	bls.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc30:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    dc34:	b308      	cbz	r0, dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc36:	2a1b      	cmp	r2, #27
    dc38:	d921      	bls.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc3a:	e01e      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc3c:	2a04      	cmp	r2, #4
    dc3e:	d01e      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc40:	e01b      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc42:	2a06      	cmp	r2, #6
    dc44:	d01b      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc46:	e018      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc48:	2a1c      	cmp	r2, #28
    dc4a:	d018      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc4c:	2a1d      	cmp	r2, #29
    dc4e:	d016      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc50:	2a1e      	cmp	r2, #30
    dc52:	d014      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc54:	e011      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc56:	2a1f      	cmp	r2, #31
    dc58:	d011      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc5a:	2a20      	cmp	r2, #32
    dc5c:	d00f      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc5e:	2a21      	cmp	r2, #33	; 0x21
    dc60:	d00d      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc62:	2a22      	cmp	r2, #34	; 0x22
    dc64:	d00b      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc66:	2a23      	cmp	r2, #35	; 0x23
    dc68:	d009      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc6a:	2a24      	cmp	r2, #36	; 0x24
    dc6c:	d007      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc6e:	2a26      	cmp	r2, #38	; 0x26
    dc70:	d005      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc72:	e002      	b.n	dc7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    dc74:	e003      	b.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc76:	2a0e      	cmp	r2, #14
    dc78:	d001      	beq.n	dc7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dc7a:	2000      	movs	r0, #0
    dc7c:	bd10      	pop	{r4, pc}
    dc7e:	2001      	movs	r0, #1
    dc80:	bd10      	pop	{r4, pc}

0000dc82 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dc82:	280c      	cmp	r0, #12
    dc84:	d013      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc86:	280b      	cmp	r0, #11
    dc88:	d011      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc8a:	280d      	cmp	r0, #13
    dc8c:	d00f      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc8e:	281f      	cmp	r0, #31
    dc90:	d00d      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc92:	2820      	cmp	r0, #32
    dc94:	d00b      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc96:	2821      	cmp	r0, #33	; 0x21
    dc98:	d009      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc9a:	2822      	cmp	r0, #34	; 0x22
    dc9c:	d007      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc9e:	2823      	cmp	r0, #35	; 0x23
    dca0:	d005      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dca2:	2824      	cmp	r0, #36	; 0x24
    dca4:	d003      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dca6:	2826      	cmp	r0, #38	; 0x26
    dca8:	d001      	beq.n	dcae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dcaa:	2000      	movs	r0, #0
    dcac:	4770      	bx	lr
    dcae:	2001      	movs	r0, #1
    dcb0:	4770      	bx	lr

0000dcb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dcb2:	f011 0f0c 	tst.w	r1, #12
    dcb6:	d016      	beq.n	dce6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dcb8:	074a      	lsls	r2, r1, #29
    dcba:	f44f 7116 	mov.w	r1, #600	; 0x258
    dcbe:	2a00      	cmp	r2, #0
    dcc0:	da02      	bge.n	dcc8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dcc2:	f04f 0210 	mov.w	r2, #16
    dcc6:	e001      	b.n	dccc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dcc8:	f04f 0240 	mov.w	r2, #64	; 0x40
    dccc:	da01      	bge.n	dcd2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dcce:	f04f 0196 	mov.w	r1, #150	; 0x96
    dcd2:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dcd6:	eba0 0301 	sub.w	r3, r0, r1
    dcda:	4288      	cmp	r0, r1
    dcdc:	d910      	bls.n	dd00 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcde:	fb93 f0f2 	sdiv	r0, r3, r2
    dce2:	b280      	uxth	r0, r0
    dce4:	4770      	bx	lr
    dce6:	2902      	cmp	r1, #2
    dce8:	d002      	beq.n	dcf0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    dcea:	2870      	cmp	r0, #112	; 0x70
    dcec:	d80a      	bhi.n	dd04 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    dcee:	e007      	b.n	dd00 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcf0:	283c      	cmp	r0, #60	; 0x3c
    dcf2:	d905      	bls.n	dd00 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcf4:	383c      	subs	r0, #60	; 0x3c
    dcf6:	17c1      	asrs	r1, r0, #31
    dcf8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dcfc:	1080      	asrs	r0, r0, #2
    dcfe:	e7f0      	b.n	dce2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dd00:	2000      	movs	r0, #0
    dd02:	e7ee      	b.n	dce2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dd04:	3870      	subs	r0, #112	; 0x70
    dd06:	17c1      	asrs	r1, r0, #31
    dd08:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dd0c:	10c0      	asrs	r0, r0, #3
    dd0e:	e7e8      	b.n	dce2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000dd10 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dd10:	6809      	ldr	r1, [r1, #0]
    dd12:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dd16:	4770      	bx	lr

0000dd18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    dd18:	07c1      	lsls	r1, r0, #31
    dd1a:	d001      	beq.n	dd20 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    dd1c:	2001      	movs	r0, #1
    dd1e:	4770      	bx	lr
    dd20:	0781      	lsls	r1, r0, #30
    dd22:	d501      	bpl.n	dd28 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    dd24:	2002      	movs	r0, #2
    dd26:	4770      	bx	lr
    dd28:	0740      	lsls	r0, r0, #29
    dd2a:	d501      	bpl.n	dd30 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dd2c:	2008      	movs	r0, #8
    dd2e:	4770      	bx	lr
    dd30:	2000      	movs	r0, #0
    dd32:	4770      	bx	lr

0000dd34 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dd34:	b510      	push	{r4, lr}
    dd36:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dd3a:	2901      	cmp	r1, #1
    dd3c:	d006      	beq.n	dd4c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dd3e:	2902      	cmp	r1, #2
    dd40:	d005      	beq.n	dd4e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dd42:	f240 31b1 	movw	r1, #945	; 0x3b1
    dd46:	2029      	movs	r0, #41	; 0x29
    dd48:	f7f6 fe80 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4c:	b108      	cbz	r0, dd52 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dd4e:	4610      	mov	r0, r2
    dd50:	bd10      	pop	{r4, pc}
    dd52:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dd56:	bd10      	pop	{r4, pc}

0000dd58 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd5c:	460c      	mov	r4, r1
    dd5e:	4605      	mov	r5, r0
    dd60:	68c6      	ldr	r6, [r0, #12]
    dd62:	f7f4 fda5 	bl	28b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd66:	b198      	cbz	r0, dd90 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dd68:	b1bc      	cbz	r4, dd9a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dd6a:	4630      	mov	r0, r6
    dd6c:	68e9      	ldr	r1, [r5, #12]
    dd6e:	f7f4 fa9d 	bl	22ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dd72:	2800      	cmp	r0, #0
    dd74:	dd11      	ble.n	dd9a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dd76:	4420      	add	r0, r4
    dd78:	1e40      	subs	r0, r0, #1
    dd7a:	fbb0 f7f4 	udiv	r7, r0, r4
    dd7e:	fb07 f104 	mul.w	r1, r7, r4
    dd82:	4630      	mov	r0, r6
    dd84:	f7f4 fa60 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dd88:	60e8      	str	r0, [r5, #12]
    dd8a:	4638      	mov	r0, r7
    dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd90:	f240 2136 	movw	r1, #566	; 0x236
    dd94:	2029      	movs	r0, #41	; 0x29
    dd96:	f7f6 fe59 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd9a:	2000      	movs	r0, #0
    dd9c:	e7f6      	b.n	dd8c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dd9e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dd9e:	b530      	push	{r4, r5, lr}
    dda0:	4613      	mov	r3, r2
    dda2:	e006      	b.n	ddb2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dda4:	18cc      	adds	r4, r1, r3
    dda6:	1ad5      	subs	r5, r2, r3
    dda8:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ddac:	1e5b      	subs	r3, r3, #1
    ddae:	5544      	strb	r4, [r0, r5]
    ddb0:	b2db      	uxtb	r3, r3
    ddb2:	2b00      	cmp	r3, #0
    ddb4:	d1f6      	bne.n	dda4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ddb6:	bd30      	pop	{r4, r5, pc}

0000ddb8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ddb8:	b538      	push	{r3, r4, r5, lr}
    ddba:	4605      	mov	r5, r0
    ddbc:	460c      	mov	r4, r1
    ddbe:	4668      	mov	r0, sp
    ddc0:	f7fd ff5a 	bl	bc78 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ddc4:	b310      	cbz	r0, de0c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ddc6:	f99d 0000 	ldrsb.w	r0, [sp]
    ddca:	7260      	strb	r0, [r4, #9]
    ddcc:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ddd0:	72a1      	strb	r1, [r4, #10]
    ddd2:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ddd6:	2200      	movs	r2, #0
    ddd8:	1a41      	subs	r1, r0, r1
    ddda:	d500      	bpl.n	ddde <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    dddc:	4249      	negs	r1, r1
    ddde:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    dde2:	428b      	cmp	r3, r1
    dde4:	dc10      	bgt.n	de08 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    dde6:	2bff      	cmp	r3, #255	; 0xff
    dde8:	d00e      	beq.n	de08 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ddea:	7b21      	ldrb	r1, [r4, #12]
    ddec:	1c49      	adds	r1, r1, #1
    ddee:	b2c9      	uxtb	r1, r1
    ddf0:	7321      	strb	r1, [r4, #12]
    ddf2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ddf6:	4299      	cmp	r1, r3
    ddf8:	d802      	bhi.n	de00 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ddfa:	7ae1      	ldrb	r1, [r4, #11]
    ddfc:	297f      	cmp	r1, #127	; 0x7f
    ddfe:	d103      	bne.n	de08 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    de00:	72e0      	strb	r0, [r4, #11]
    de02:	2000      	movs	r0, #0
    de04:	7320      	strb	r0, [r4, #12]
    de06:	2201      	movs	r2, #1
    de08:	4610      	mov	r0, r2
    de0a:	bd38      	pop	{r3, r4, r5, pc}
    de0c:	207f      	movs	r0, #127	; 0x7f
    de0e:	7260      	strb	r0, [r4, #9]
    de10:	2000      	movs	r0, #0
    de12:	bd38      	pop	{r3, r4, r5, pc}

0000de14 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    de14:	2300      	movs	r3, #0
    de16:	6283      	str	r3, [r0, #40]	; 0x28
    de18:	8602      	strh	r2, [r0, #48]	; 0x30
    de1a:	f240 2371 	movw	r3, #625	; 0x271
    de1e:	435a      	muls	r2, r3
    de20:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    de24:	1e52      	subs	r2, r2, #1
    de26:	fbb2 f1f1 	udiv	r1, r2, r1
    de2a:	62c1      	str	r1, [r0, #44]	; 0x2c
    de2c:	4770      	bx	lr

0000de2e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    de2e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    de32:	4607      	mov	r7, r0
    de34:	4690      	mov	r8, r2
    de36:	468b      	mov	fp, r1
    de38:	2601      	movs	r6, #1
    de3a:	4608      	mov	r0, r1
    de3c:	f000 f941 	bl	e0c2 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    de40:	4682      	mov	sl, r0
    de42:	4658      	mov	r0, fp
    de44:	f000 f949 	bl	e0da <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    de48:	4681      	mov	r9, r0
    de4a:	f7ff ff65 	bl	dd18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    de4e:	4604      	mov	r4, r0
    de50:	4650      	mov	r0, sl
    de52:	f7ff ff61 	bl	dd18 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    de56:	4605      	mov	r5, r0
    de58:	ea54 0005 	orrs.w	r0, r4, r5
    de5c:	d100      	bne.n	de60 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    de5e:	2600      	movs	r6, #0
    de60:	f7fd f932 	bl	b0c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    de64:	ea10 0f09 	tst.w	r0, r9
    de68:	d100      	bne.n	de6c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    de6a:	2400      	movs	r4, #0
    de6c:	f7fd f92c 	bl	b0c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    de70:	ea10 0f0a 	tst.w	r0, sl
    de74:	d100      	bne.n	de78 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    de76:	2500      	movs	r5, #0
    de78:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    de7c:	42a0      	cmp	r0, r4
    de7e:	d100      	bne.n	de82 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    de80:	2400      	movs	r4, #0
    de82:	f888 4000 	strb.w	r4, [r8]
    de86:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    de8a:	42a8      	cmp	r0, r5
    de8c:	d100      	bne.n	de90 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    de8e:	2500      	movs	r5, #0
    de90:	f888 5001 	strb.w	r5, [r8, #1]
    de94:	b974      	cbnz	r4, deb4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    de96:	b96d      	cbnz	r5, deb4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    de98:	4658      	mov	r0, fp
    de9a:	f000 f91c 	bl	e0d6 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    de9e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    dea2:	1a40      	subs	r0, r0, r1
    dea4:	b200      	sxth	r0, r0
    dea6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    deaa:	4288      	cmp	r0, r1
    deac:	dc01      	bgt.n	deb2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    deae:	2800      	cmp	r0, #0
    deb0:	dc00      	bgt.n	deb4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    deb2:	2600      	movs	r6, #0
    deb4:	4630      	mov	r0, r6
    deb6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000deba <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    deba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    debe:	4348      	muls	r0, r1
    dec0:	4770      	bx	lr

0000dec2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dec2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dec6:	fb10 f001 	smulbb	r0, r0, r1
    deca:	4770      	bx	lr

0000decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    decc:	b510      	push	{r4, lr}
    dece:	2300      	movs	r3, #0
    ded0:	461a      	mov	r2, r3
    ded2:	e003      	b.n	dedc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    ded4:	5c84      	ldrb	r4, [r0, r2]
    ded6:	4323      	orrs	r3, r4
    ded8:	1c52      	adds	r2, r2, #1
    deda:	b2d2      	uxtb	r2, r2
    dedc:	428a      	cmp	r2, r1
    dede:	d3f9      	bcc.n	ded4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dee0:	b10b      	cbz	r3, dee6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dee2:	2000      	movs	r0, #0
    dee4:	bd10      	pop	{r4, pc}
    dee6:	2001      	movs	r0, #1
    dee8:	bd10      	pop	{r4, pc}

0000deea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    deea:	b510      	push	{r4, lr}
    deec:	4604      	mov	r4, r0
    deee:	f890 0020 	ldrb.w	r0, [r0, #32]
    def2:	b108      	cbz	r0, def8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    def4:	2825      	cmp	r0, #37	; 0x25
    def6:	d901      	bls.n	defc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    def8:	2012      	movs	r0, #18
    defa:	bd10      	pop	{r4, pc}
    defc:	b12a      	cbz	r2, df0a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    defe:	7d60      	ldrb	r0, [r4, #21]
    df00:	b128      	cbz	r0, df0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    df02:	2801      	cmp	r0, #1
    df04:	d009      	beq.n	df1a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    df06:	201f      	movs	r0, #31
    df08:	bd10      	pop	{r4, pc}
    df0a:	2000      	movs	r0, #0
    df0c:	bd10      	pop	{r4, pc}
    df0e:	4620      	mov	r0, r4
    df10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df14:	4611      	mov	r1, r2
    df16:	f7f8 bdbd 	b.w	6a94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    df1a:	88a2      	ldrh	r2, [r4, #4]
    df1c:	6909      	ldr	r1, [r1, #16]
    df1e:	f104 0015 	add.w	r0, r4, #21
    df22:	f7f8 fd63 	bl	69ec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    df26:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    df2a:	e7ee      	b.n	df0a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000df2c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    df2c:	b530      	push	{r4, r5, lr}
    df2e:	1c42      	adds	r2, r0, #1
    df30:	428a      	cmp	r2, r1
    df32:	d004      	beq.n	df3e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    df34:	680a      	ldr	r2, [r1, #0]
    df36:	f8c0 2001 	str.w	r2, [r0, #1]
    df3a:	7909      	ldrb	r1, [r1, #4]
    df3c:	7141      	strb	r1, [r0, #5]
    df3e:	7941      	ldrb	r1, [r0, #5]
    df40:	f001 011f 	and.w	r1, r1, #31
    df44:	7141      	strb	r1, [r0, #5]
    df46:	2100      	movs	r1, #0
    df48:	72c1      	strb	r1, [r0, #11]
    df4a:	1843      	adds	r3, r0, r1
    df4c:	1c49      	adds	r1, r1, #1
    df4e:	785c      	ldrb	r4, [r3, #1]
    df50:	b2c9      	uxtb	r1, r1
    df52:	f004 0201 	and.w	r2, r4, #1
    df56:	0864      	lsrs	r4, r4, #1
    df58:	f004 0501 	and.w	r5, r4, #1
    df5c:	4415      	add	r5, r2
    df5e:	0862      	lsrs	r2, r4, #1
    df60:	f002 0401 	and.w	r4, r2, #1
    df64:	442c      	add	r4, r5
    df66:	0852      	lsrs	r2, r2, #1
    df68:	f002 0501 	and.w	r5, r2, #1
    df6c:	442c      	add	r4, r5
    df6e:	0852      	lsrs	r2, r2, #1
    df70:	f002 0501 	and.w	r5, r2, #1
    df74:	442c      	add	r4, r5
    df76:	0852      	lsrs	r2, r2, #1
    df78:	f002 0501 	and.w	r5, r2, #1
    df7c:	442c      	add	r4, r5
    df7e:	0852      	lsrs	r2, r2, #1
    df80:	f002 0501 	and.w	r5, r2, #1
    df84:	442c      	add	r4, r5
    df86:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    df8a:	719a      	strb	r2, [r3, #6]
    df8c:	7ac3      	ldrb	r3, [r0, #11]
    df8e:	2905      	cmp	r1, #5
    df90:	441a      	add	r2, r3
    df92:	72c2      	strb	r2, [r0, #11]
    df94:	d3d9      	bcc.n	df4a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    df96:	bd30      	pop	{r4, r5, pc}
    df98:	b570      	push	{r4, r5, r6, lr}
    df9a:	f8d0 201f 	ldr.w	r2, [r0, #31]
    df9e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    dfa2:	f012 0fff 	tst.w	r2, #255	; 0xff
    dfa6:	f023 031f 	bic.w	r3, r3, #31
    dfaa:	d108      	bne.n	dfbe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dfac:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dfb0:	b92c      	cbnz	r4, dfbe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dfb2:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dfb6:	b914      	cbnz	r4, dfbe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dfb8:	0e12      	lsrs	r2, r2, #24
    dfba:	d100      	bne.n	dfbe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    dfbc:	b35b      	cbz	r3, e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dfbe:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dfc2:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    dfc6:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    dfca:	7d83      	ldrb	r3, [r0, #22]
    dfcc:	b141      	cbz	r1, dfe0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    dfce:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    dfd2:	d905      	bls.n	dfe0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    dfd4:	f640 5107 	movw	r1, #3335	; 0xd07
    dfd8:	428a      	cmp	r2, r1
    dfda:	d801      	bhi.n	dfe0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    dfdc:	2101      	movs	r1, #1
    dfde:	e000      	b.n	dfe2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    dfe0:	2100      	movs	r1, #0
    dfe2:	7846      	ldrb	r6, [r0, #1]
    dfe4:	2e22      	cmp	r6, #34	; 0x22
    dfe6:	d116      	bne.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dfe8:	b959      	cbnz	r1, e002 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    dfea:	1f91      	subs	r1, r2, #6
    dfec:	f640 467a 	movw	r6, #3194	; 0xc7a
    dff0:	42b1      	cmp	r1, r6
    dff2:	d810      	bhi.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dff4:	b17b      	cbz	r3, e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dff6:	2b08      	cmp	r3, #8
    dff8:	d80d      	bhi.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dffa:	4293      	cmp	r3, r2
    dffc:	d20b      	bcs.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    dffe:	4294      	cmp	r4, r2
    e000:	d809      	bhi.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e002:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e006:	d206      	bcs.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e008:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e00c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e010:	d801      	bhi.n	e016 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e012:	2001      	movs	r0, #1
    e014:	bd70      	pop	{r4, r5, r6, pc}
    e016:	2000      	movs	r0, #0
    e018:	bd70      	pop	{r4, r5, r6, pc}

0000e01a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e01a:	b570      	push	{r4, r5, r6, lr}
    e01c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e020:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e024:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e028:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e02c:	88c0      	ldrh	r0, [r0, #6]
    e02e:	b131      	cbz	r1, e03e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e030:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e034:	d903      	bls.n	e03e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e036:	f640 5107 	movw	r1, #3335	; 0xd07
    e03a:	428a      	cmp	r2, r1
    e03c:	d90b      	bls.n	e056 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e03e:	1f91      	subs	r1, r2, #6
    e040:	f640 467a 	movw	r6, #3194	; 0xc7a
    e044:	42b1      	cmp	r1, r6
    e046:	d80e      	bhi.n	e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e048:	b16b      	cbz	r3, e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e04a:	2b08      	cmp	r3, #8
    e04c:	d80b      	bhi.n	e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e04e:	4293      	cmp	r3, r2
    e050:	d209      	bcs.n	e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e052:	4294      	cmp	r4, r2
    e054:	d807      	bhi.n	e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e056:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e05a:	d204      	bcs.n	e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e05c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e060:	d801      	bhi.n	e066 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e062:	2001      	movs	r0, #1
    e064:	bd70      	pop	{r4, r5, r6, pc}
    e066:	2000      	movs	r0, #0
    e068:	bd70      	pop	{r4, r5, r6, pc}

0000e06a <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e06a:	6842      	ldr	r2, [r0, #4]
    e06c:	600a      	str	r2, [r1, #0]
    e06e:	7a00      	ldrb	r0, [r0, #8]
    e070:	7108      	strb	r0, [r1, #4]
    e072:	4770      	bx	lr

0000e074 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e074:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e078:	4770      	bx	lr

0000e07a <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e07a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e07e:	4770      	bx	lr

0000e080 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e080:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e084:	4770      	bx	lr

0000e086 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e086:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e08a:	4770      	bx	lr

0000e08c <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e08c:	8980      	ldrh	r0, [r0, #12]
    e08e:	8008      	strh	r0, [r1, #0]
    e090:	4770      	bx	lr

0000e092 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e092:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e096:	6008      	str	r0, [r1, #0]
    e098:	4770      	bx	lr

0000e09a <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e09a:	6842      	ldr	r2, [r0, #4]
    e09c:	600a      	str	r2, [r1, #0]
    e09e:	6880      	ldr	r0, [r0, #8]
    e0a0:	6048      	str	r0, [r1, #4]
    e0a2:	4770      	bx	lr

0000e0a4 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e0a4:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e0a8:	600a      	str	r2, [r1, #0]
    e0aa:	6840      	ldr	r0, [r0, #4]
    e0ac:	6048      	str	r0, [r1, #4]
    e0ae:	4770      	bx	lr

0000e0b0 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e0b0:	6842      	ldr	r2, [r0, #4]
    e0b2:	600a      	str	r2, [r1, #0]
    e0b4:	6880      	ldr	r0, [r0, #8]
    e0b6:	6048      	str	r0, [r1, #4]
    e0b8:	4770      	bx	lr

0000e0ba <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e0ba:	7800      	ldrb	r0, [r0, #0]
    e0bc:	f000 0003 	and.w	r0, r0, #3
    e0c0:	4770      	bx	lr

0000e0c2 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e0c2:	7900      	ldrb	r0, [r0, #4]
    e0c4:	4770      	bx	lr

0000e0c6 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e0c6:	8880      	ldrh	r0, [r0, #4]
    e0c8:	4770      	bx	lr

0000e0ca <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e0ca:	88c0      	ldrh	r0, [r0, #6]
    e0cc:	4770      	bx	lr

0000e0ce <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e0ce:	8900      	ldrh	r0, [r0, #8]
    e0d0:	4770      	bx	lr

0000e0d2 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e0d2:	8940      	ldrh	r0, [r0, #10]
    e0d4:	4770      	bx	lr

0000e0d6 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e0d6:	88c0      	ldrh	r0, [r0, #6]
    e0d8:	4770      	bx	lr

0000e0da <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e0da:	7940      	ldrb	r0, [r0, #5]
    e0dc:	4770      	bx	lr

0000e0de <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e0de:	7900      	ldrb	r0, [r0, #4]
    e0e0:	4770      	bx	lr

0000e0e2 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e0e2:	7900      	ldrb	r0, [r0, #4]
    e0e4:	4770      	bx	lr

0000e0e6 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e0e6:	8901      	ldrh	r1, [r0, #8]
    e0e8:	291b      	cmp	r1, #27
    e0ea:	d30c      	bcc.n	e106 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e0ec:	8941      	ldrh	r1, [r0, #10]
    e0ee:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e0f2:	4291      	cmp	r1, r2
    e0f4:	d307      	bcc.n	e106 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e0f6:	8881      	ldrh	r1, [r0, #4]
    e0f8:	291b      	cmp	r1, #27
    e0fa:	d304      	bcc.n	e106 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e0fc:	88c0      	ldrh	r0, [r0, #6]
    e0fe:	4290      	cmp	r0, r2
    e100:	d301      	bcc.n	e106 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e102:	2001      	movs	r0, #1
    e104:	4770      	bx	lr
    e106:	2000      	movs	r0, #0
    e108:	4770      	bx	lr

0000e10a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e10a:	b510      	push	{r4, lr}
    e10c:	29fb      	cmp	r1, #251	; 0xfb
    e10e:	d904      	bls.n	e11a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e110:	f44f 61af 	mov.w	r1, #1400	; 0x578
    e114:	202a      	movs	r0, #42	; 0x2a
    e116:	f7f6 fc99 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e11a:	7041      	strb	r1, [r0, #1]
    e11c:	bd10      	pop	{r4, pc}

0000e11e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e11e:	7901      	ldrb	r1, [r0, #4]
    e120:	0749      	lsls	r1, r1, #29
    e122:	d004      	beq.n	e12e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e124:	7940      	ldrb	r0, [r0, #5]
    e126:	0740      	lsls	r0, r0, #29
    e128:	d001      	beq.n	e12e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e12a:	2001      	movs	r0, #1
    e12c:	4770      	bx	lr
    e12e:	2000      	movs	r0, #0
    e130:	4770      	bx	lr

0000e132 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e132:	7900      	ldrb	r0, [r0, #4]
    e134:	4770      	bx	lr

0000e136 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e136:	7940      	ldrb	r0, [r0, #5]
    e138:	4770      	bx	lr

0000e13a <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e13a:	7101      	strb	r1, [r0, #4]
    e13c:	4770      	bx	lr

0000e13e <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e13e:	7141      	strb	r1, [r0, #5]
    e140:	4770      	bx	lr

0000e142 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    e142:	b510      	push	{r4, lr}
    e144:	2a1b      	cmp	r2, #27
    e146:	d904      	bls.n	e152 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    e148:	f240 31df 	movw	r1, #991	; 0x3df
    e14c:	202a      	movs	r0, #42	; 0x2a
    e14e:	f7f6 fc7d 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e152:	7042      	strb	r2, [r0, #1]
    e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e158:	1cc0      	adds	r0, r0, #3
    e15a:	f7fe bad7 	b.w	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e15e <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    e15e:	6809      	ldr	r1, [r1, #0]
    e160:	60c1      	str	r1, [r0, #12]
    e162:	4770      	bx	lr

0000e164 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    e164:	680a      	ldr	r2, [r1, #0]
    e166:	6042      	str	r2, [r0, #4]
    e168:	6849      	ldr	r1, [r1, #4]
    e16a:	6081      	str	r1, [r0, #8]
    e16c:	4770      	bx	lr

0000e16e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e16e:	680a      	ldr	r2, [r1, #0]
    e170:	6042      	str	r2, [r0, #4]
    e172:	6849      	ldr	r1, [r1, #4]
    e174:	6081      	str	r1, [r0, #8]
    e176:	4770      	bx	lr

0000e178 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    e178:	680a      	ldr	r2, [r1, #0]
    e17a:	6042      	str	r2, [r0, #4]
    e17c:	6849      	ldr	r1, [r1, #4]
    e17e:	6081      	str	r1, [r0, #8]
    e180:	4770      	bx	lr

0000e182 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e182:	7802      	ldrb	r2, [r0, #0]
    e184:	f001 0103 	and.w	r1, r1, #3
    e188:	f022 0203 	bic.w	r2, r2, #3
    e18c:	430a      	orrs	r2, r1
    e18e:	7002      	strb	r2, [r0, #0]
    e190:	4770      	bx	lr

0000e192 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e192:	7101      	strb	r1, [r0, #4]
    e194:	0a09      	lsrs	r1, r1, #8
    e196:	7141      	strb	r1, [r0, #5]
    e198:	4770      	bx	lr

0000e19a <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e19a:	7181      	strb	r1, [r0, #6]
    e19c:	0a09      	lsrs	r1, r1, #8
    e19e:	71c1      	strb	r1, [r0, #7]
    e1a0:	4770      	bx	lr

0000e1a2 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e1a2:	7201      	strb	r1, [r0, #8]
    e1a4:	0a09      	lsrs	r1, r1, #8
    e1a6:	7241      	strb	r1, [r0, #9]
    e1a8:	4770      	bx	lr

0000e1aa <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e1aa:	7281      	strb	r1, [r0, #10]
    e1ac:	0a09      	lsrs	r1, r1, #8
    e1ae:	72c1      	strb	r1, [r0, #11]
    e1b0:	4770      	bx	lr

0000e1b2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e1b2:	7802      	ldrb	r2, [r0, #0]
    e1b4:	f002 020f 	and.w	r2, r2, #15
    e1b8:	2a03      	cmp	r2, #3
    e1ba:	d003      	beq.n	e1c4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    e1bc:	2a05      	cmp	r2, #5
    e1be:	d104      	bne.n	e1ca <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    e1c0:	f7ff beea 	b.w	df98 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    e1c4:	7840      	ldrb	r0, [r0, #1]
    e1c6:	280c      	cmp	r0, #12
    e1c8:	d001      	beq.n	e1ce <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    e1ca:	2000      	movs	r0, #0
    e1cc:	4770      	bx	lr
    e1ce:	2001      	movs	r0, #1
    e1d0:	4770      	bx	lr

0000e1d2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    e1d2:	b570      	push	{r4, r5, r6, lr}
    e1d4:	4614      	mov	r4, r2
    e1d6:	4605      	mov	r5, r0
    e1d8:	2a1f      	cmp	r2, #31
    e1da:	d903      	bls.n	e1e4 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    e1dc:	21b2      	movs	r1, #178	; 0xb2
    e1de:	202a      	movs	r0, #42	; 0x2a
    e1e0:	f7f6 fc34 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1e4:	f105 0009 	add.w	r0, r5, #9
    e1e8:	f7fe fa90 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e1ec:	1da4      	adds	r4, r4, #6
    e1ee:	706c      	strb	r4, [r5, #1]
    e1f0:	bd70      	pop	{r4, r5, r6, pc}

0000e1f2 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e1f2:	b510      	push	{r4, lr}
    e1f4:	7802      	ldrb	r2, [r0, #0]
    e1f6:	f001 030f 	and.w	r3, r1, #15
    e1fa:	f022 020f 	bic.w	r2, r2, #15
    e1fe:	431a      	orrs	r2, r3
    e200:	7002      	strb	r2, [r0, #0]
    e202:	2907      	cmp	r1, #7
    e204:	d20c      	bcs.n	e220 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e206:	e8df f001 	tbb	[pc, r1]
    e20a:	0604      	.short	0x0604
    e20c:	08040604 	.word	0x08040604
    e210:	0004      	.short	0x0004
    e212:	2106      	movs	r1, #6
    e214:	e002      	b.n	e21c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e216:	210c      	movs	r1, #12
    e218:	e000      	b.n	e21c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e21a:	2122      	movs	r1, #34	; 0x22
    e21c:	7041      	strb	r1, [r0, #1]
    e21e:	bd10      	pop	{r4, pc}
    e220:	216e      	movs	r1, #110	; 0x6e
    e222:	202a      	movs	r0, #42	; 0x2a
    e224:	f7f6 fc12 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e228 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e228:	680a      	ldr	r2, [r1, #0]
    e22a:	f840 2f09 	str.w	r2, [r0, #9]!
    e22e:	8889      	ldrh	r1, [r1, #4]
    e230:	8081      	strh	r1, [r0, #4]
    e232:	4770      	bx	lr

0000e234 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e234:	7802      	ldrb	r2, [r0, #0]
    e236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e23a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e23e:	7002      	strb	r2, [r0, #0]
    e240:	4770      	bx	lr

0000e242 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e242:	680a      	ldr	r2, [r1, #0]
    e244:	f840 2f03 	str.w	r2, [r0, #3]!
    e248:	8889      	ldrh	r1, [r1, #4]
    e24a:	8081      	strh	r1, [r0, #4]
    e24c:	4770      	bx	lr

0000e24e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e24e:	7802      	ldrb	r2, [r0, #0]
    e250:	2340      	movs	r3, #64	; 0x40
    e252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e256:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e25a:	430a      	orrs	r2, r1
    e25c:	7002      	strb	r2, [r0, #0]
    e25e:	4770      	bx	lr

0000e260 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    e260:	b570      	push	{r4, r5, r6, lr}
    e262:	4614      	mov	r4, r2
    e264:	4605      	mov	r5, r0
    e266:	2a1f      	cmp	r2, #31
    e268:	d903      	bls.n	e272 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    e26a:	21d4      	movs	r1, #212	; 0xd4
    e26c:	202a      	movs	r0, #42	; 0x2a
    e26e:	f7f6 fbed 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e272:	f105 0009 	add.w	r0, r5, #9
    e276:	f7fe fa49 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e27a:	1da4      	adds	r4, r4, #6
    e27c:	706c      	strb	r4, [r5, #1]
    e27e:	bd70      	pop	{r4, r5, r6, pc}

0000e280 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e280:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e284:	4604      	mov	r4, r0
    e286:	2000      	movs	r0, #0
    e288:	f7f6 fdca 	bl	4e20 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e28c:	2600      	movs	r6, #0
    e28e:	4605      	mov	r5, r0
    e290:	4637      	mov	r7, r6
    e292:	e00e      	b.n	e2b2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e294:	8820      	ldrh	r0, [r4, #0]
    e296:	1c40      	adds	r0, r0, #1
    e298:	b280      	uxth	r0, r0
    e29a:	8020      	strh	r0, [r4, #0]
    e29c:	42a8      	cmp	r0, r5
    e29e:	d300      	bcc.n	e2a2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e2a0:	8027      	strh	r7, [r4, #0]
    e2a2:	8820      	ldrh	r0, [r4, #0]
    e2a4:	4669      	mov	r1, sp
    e2a6:	f7ff fc74 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e2aa:	2800      	cmp	r0, #0
    e2ac:	d007      	beq.n	e2be <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e2ae:	1c76      	adds	r6, r6, #1
    e2b0:	b2f6      	uxtb	r6, r6
    e2b2:	42ae      	cmp	r6, r5
    e2b4:	d3ee      	bcc.n	e294 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e2b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e2ba:	8020      	strh	r0, [r4, #0]
    e2bc:	2012      	movs	r0, #18
    e2be:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e2c2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e2c2:	6841      	ldr	r1, [r0, #4]
    e2c4:	2200      	movs	r2, #0
    e2c6:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d004      	beq.n	e2d8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e2ce:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    e2d2:	6840      	ldr	r0, [r0, #4]
    e2d4:	f000 bc64 	b.w	eba0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e2d8:	4770      	bx	lr

0000e2da <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e2da:	b510      	push	{r4, lr}
    e2dc:	7901      	ldrb	r1, [r0, #4]
    e2de:	b119      	cbz	r1, e2e8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e2e0:	2901      	cmp	r1, #1
    e2e2:	d006      	beq.n	e2f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e2e4:	2000      	movs	r0, #0
    e2e6:	bd10      	pop	{r4, pc}
    e2e8:	8842      	ldrh	r2, [r0, #2]
    e2ea:	6883      	ldr	r3, [r0, #8]
    e2ec:	8800      	ldrh	r0, [r0, #0]
    e2ee:	2102      	movs	r1, #2
    e2f0:	e003      	b.n	e2fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e2f2:	8842      	ldrh	r2, [r0, #2]
    e2f4:	6883      	ldr	r3, [r0, #8]
    e2f6:	8800      	ldrh	r0, [r0, #0]
    e2f8:	2101      	movs	r1, #1
    e2fa:	f7f8 fc79 	bl	6bf0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e2fe:	b908      	cbnz	r0, e304 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e300:	f7f8 fccc 	bl	6c9c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e304:	2001      	movs	r0, #1
    e306:	bd10      	pop	{r4, pc}
    e308:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e30c:	460e      	mov	r6, r1
    e30e:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e312:	4617      	mov	r7, r2
    e314:	39ff      	subs	r1, #255	; 0xff
    e316:	d014      	beq.n	e342 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e318:	8030      	strh	r0, [r6, #0]
    e31a:	2100      	movs	r1, #0
    e31c:	7171      	strb	r1, [r6, #5]
    e31e:	f7f6 ffaf 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e322:	4604      	mov	r4, r0
    e324:	f7ff f81b 	bl	d35e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e328:	0005      	movs	r5, r0
    e32a:	d00a      	beq.n	e342 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e32c:	4620      	mov	r0, r4
    e32e:	4629      	mov	r1, r5
    e330:	aa01      	add	r2, sp, #4
    e332:	f7ff f837 	bl	d3a4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e336:	8070      	strh	r0, [r6, #2]
    e338:	b130      	cbz	r0, e348 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e33a:	28fb      	cmp	r0, #251	; 0xfb
    e33c:	d906      	bls.n	e34c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e33e:	21ae      	movs	r1, #174	; 0xae
    e340:	e026      	b.n	e390 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e342:	2000      	movs	r0, #0
    e344:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e348:	21ad      	movs	r1, #173	; 0xad
    e34a:	e021      	b.n	e390 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e34c:	9801      	ldr	r0, [sp, #4]
    e34e:	f7ff feb4 	bl	e0ba <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e352:	2801      	cmp	r0, #1
    e354:	d003      	beq.n	e35e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e356:	2802      	cmp	r0, #2
    e358:	d001      	beq.n	e35e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e35a:	21bd      	movs	r1, #189	; 0xbd
    e35c:	e018      	b.n	e390 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e35e:	7130      	strb	r0, [r6, #4]
    e360:	4629      	mov	r1, r5
    e362:	8873      	ldrh	r3, [r6, #2]
    e364:	2503      	movs	r5, #3
    e366:	4620      	mov	r0, r4
    e368:	463a      	mov	r2, r7
    e36a:	9500      	str	r5, [sp, #0]
    e36c:	f7fe fee9 	bl	d142 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e370:	4620      	mov	r0, r4
    e372:	60b7      	str	r7, [r6, #8]
    e374:	f7fe ffa2 	bl	d2bc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e378:	b138      	cbz	r0, e38a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e37a:	2100      	movs	r1, #0
    e37c:	4620      	mov	r0, r4
    e37e:	460a      	mov	r2, r1
    e380:	f7ff f8ee 	bl	d560 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e384:	b118      	cbz	r0, e38e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e386:	2001      	movs	r0, #1
    e388:	e7dc      	b.n	e344 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e38a:	21cd      	movs	r1, #205	; 0xcd
    e38c:	e000      	b.n	e390 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e38e:	21d2      	movs	r1, #210	; 0xd2
    e390:	202b      	movs	r0, #43	; 0x2b
    e392:	f7f6 fb5b 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e396 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e396:	f7f8 be3f 	b.w	7018 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    e39a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e39e:	4604      	mov	r4, r0
    e3a0:	2000      	movs	r0, #0
    e3a2:	f7f6 fd3d 	bl	4e20 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e3a6:	4605      	mov	r5, r0
    e3a8:	2001      	movs	r0, #1
    e3aa:	f7f6 fd39 	bl	4e20 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e3ae:	4428      	add	r0, r5
    e3b0:	2600      	movs	r6, #0
    e3b2:	b2c7      	uxtb	r7, r0
    e3b4:	46b0      	mov	r8, r6
    e3b6:	e017      	b.n	e3e8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    e3b8:	8820      	ldrh	r0, [r4, #0]
    e3ba:	1c40      	adds	r0, r0, #1
    e3bc:	b280      	uxth	r0, r0
    e3be:	8020      	strh	r0, [r4, #0]
    e3c0:	42b8      	cmp	r0, r7
    e3c2:	d302      	bcc.n	e3ca <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    e3c4:	4640      	mov	r0, r8
    e3c6:	f8a4 8000 	strh.w	r8, [r4]
    e3ca:	b280      	uxth	r0, r0
    e3cc:	42a8      	cmp	r0, r5
    e3ce:	d304      	bcc.n	e3da <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e3d0:	42b8      	cmp	r0, r7
    e3d2:	d202      	bcs.n	e3da <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e3d4:	2000      	movs	r0, #0
    e3d6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e3da:	4669      	mov	r1, sp
    e3dc:	f7ff fbd9 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e3e0:	2800      	cmp	r0, #0
    e3e2:	d0f8      	beq.n	e3d6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e3e4:	1c76      	adds	r6, r6, #1
    e3e6:	b2f6      	uxtb	r6, r6
    e3e8:	42be      	cmp	r6, r7
    e3ea:	d3e5      	bcc.n	e3b8 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    e3ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e3f0:	8020      	strh	r0, [r4, #0]
    e3f2:	2012      	movs	r0, #18
    e3f4:	e7ef      	b.n	e3d6 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000e3f6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e3f6:	b570      	push	{r4, r5, r6, lr}
    e3f8:	8050      	strh	r0, [r2, #2]
    e3fa:	890c      	ldrh	r4, [r1, #8]
    e3fc:	8094      	strh	r4, [r2, #4]
    e3fe:	898b      	ldrh	r3, [r1, #12]
    e400:	80d3      	strh	r3, [r2, #6]
    e402:	8948      	ldrh	r0, [r1, #10]
    e404:	8110      	strh	r0, [r2, #8]
    e406:	89cd      	ldrh	r5, [r1, #14]
    e408:	8155      	strh	r5, [r2, #10]
    e40a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e40c:	42ae      	cmp	r6, r5
    e40e:	d108      	bne.n	e422 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e410:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e412:	4285      	cmp	r5, r0
    e414:	d105      	bne.n	e422 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e416:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e418:	429d      	cmp	r5, r3
    e41a:	d102      	bne.n	e422 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e41c:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e41e:	42a3      	cmp	r3, r4
    e420:	d001      	beq.n	e426 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e422:	2301      	movs	r3, #1
    e424:	e000      	b.n	e428 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e426:	2300      	movs	r3, #0
    e428:	7313      	strb	r3, [r2, #12]
    e42a:	8548      	strh	r0, [r1, #42]	; 0x2a
    e42c:	8950      	ldrh	r0, [r2, #10]
    e42e:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e430:	8890      	ldrh	r0, [r2, #4]
    e432:	8588      	strh	r0, [r1, #44]	; 0x2c
    e434:	88d0      	ldrh	r0, [r2, #6]
    e436:	8608      	strh	r0, [r1, #48]	; 0x30
    e438:	2001      	movs	r0, #1
    e43a:	7010      	strb	r0, [r2, #0]
    e43c:	bd70      	pop	{r4, r5, r6, pc}

0000e43e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e43e:	b510      	push	{r4, lr}
    e440:	888c      	ldrh	r4, [r1, #4]
    e442:	890a      	ldrh	r2, [r1, #8]
    e444:	884b      	ldrh	r3, [r1, #2]
    e446:	88c9      	ldrh	r1, [r1, #6]
    e448:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e44c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e450:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e454:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e458:	bd10      	pop	{r4, pc}

0000e45a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e45a:	b570      	push	{r4, r5, r6, lr}
    e45c:	4615      	mov	r5, r2
    e45e:	460c      	mov	r4, r1
    e460:	f000 f8c7 	bl	e5f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e464:	3096      	adds	r0, #150	; 0x96
    e466:	4428      	add	r0, r5
    e468:	42a0      	cmp	r0, r4
    e46a:	d801      	bhi.n	e470 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e46c:	1a20      	subs	r0, r4, r0
    e46e:	bd70      	pop	{r4, r5, r6, pc}
    e470:	2000      	movs	r0, #0
    e472:	bd70      	pop	{r4, r5, r6, pc}

0000e474 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e478:	4604      	mov	r4, r0
    e47a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e47c:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e47e:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e482:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e486:	4285      	cmp	r5, r0
    e488:	d300      	bcc.n	e48c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e48a:	4605      	mov	r5, r0
    e48c:	4620      	mov	r0, r4
    e48e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e492:	f000 f89e 	bl	e5d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e496:	4601      	mov	r1, r0
    e498:	86e5      	strh	r5, [r4, #54]	; 0x36
    e49a:	8761      	strh	r1, [r4, #58]	; 0x3a
    e49c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e49e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e4a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e4a4:	4680      	mov	r8, r0
    e4a6:	42aa      	cmp	r2, r5
    e4a8:	d200      	bcs.n	e4ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e4aa:	462a      	mov	r2, r5
    e4ac:	428b      	cmp	r3, r1
    e4ae:	d200      	bcs.n	e4b2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e4b0:	460b      	mov	r3, r1
    e4b2:	8202      	strh	r2, [r0, #16]
    e4b4:	f8a8 3012 	strh.w	r3, [r8, #18]
    e4b8:	42bd      	cmp	r5, r7
    e4ba:	d101      	bne.n	e4c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e4bc:	42b1      	cmp	r1, r6
    e4be:	d001      	beq.n	e4c4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e4c0:	2001      	movs	r0, #1
    e4c2:	e000      	b.n	e4c6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e4c4:	2000      	movs	r0, #0
    e4c6:	4681      	mov	r9, r0
    e4c8:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e4cc:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e4d0:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e4d2:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e4d4:	4285      	cmp	r5, r0
    e4d6:	d300      	bcc.n	e4da <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e4d8:	4605      	mov	r5, r0
    e4da:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e4de:	4620      	mov	r0, r4
    e4e0:	f000 f87f 	bl	e5e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e4e4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e4e8:	2902      	cmp	r1, #2
    e4ea:	d108      	bne.n	e4fe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e4ec:	42af      	cmp	r7, r5
    e4ee:	d200      	bcs.n	e4f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e4f0:	463d      	mov	r5, r7
    e4f2:	4286      	cmp	r6, r0
    e4f4:	d200      	bcs.n	e4f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e4f6:	4630      	mov	r0, r6
    e4f8:	2100      	movs	r1, #0
    e4fa:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e4fe:	f8a8 5008 	strh.w	r5, [r8, #8]
    e502:	f8a8 000c 	strh.w	r0, [r8, #12]
    e506:	42bd      	cmp	r5, r7
    e508:	d101      	bne.n	e50e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e50a:	42b0      	cmp	r0, r6
    e50c:	d001      	beq.n	e512 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e50e:	2001      	movs	r0, #1
    e510:	e000      	b.n	e514 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e512:	2000      	movs	r0, #0
    e514:	ea40 0009 	orr.w	r0, r0, r9
    e518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e51c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e51c:	6840      	ldr	r0, [r0, #4]
    e51e:	4770      	bx	lr

0000e520 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e524:	4616      	mov	r6, r2
    e526:	460f      	mov	r7, r1
    e528:	4604      	mov	r4, r0
    e52a:	f000 f862 	bl	e5f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e52e:	4605      	mov	r5, r0
    e530:	463a      	mov	r2, r7
    e532:	68e1      	ldr	r1, [r4, #12]
    e534:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e536:	f000 f847 	bl	e5c8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e53a:	19a9      	adds	r1, r5, r6
    e53c:	4281      	cmp	r1, r0
    e53e:	d300      	bcc.n	e542 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e540:	4608      	mov	r0, r1
    e542:	6320      	str	r0, [r4, #48]	; 0x30
    e544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e548 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e548:	221b      	movs	r2, #27
    e54a:	8402      	strh	r2, [r0, #32]
    e54c:	8382      	strh	r2, [r0, #28]
    e54e:	82c2      	strh	r2, [r0, #22]
    e550:	8282      	strh	r2, [r0, #20]
    e552:	8142      	strh	r2, [r0, #10]
    e554:	8202      	strh	r2, [r0, #16]
    e556:	8102      	strh	r2, [r0, #8]
    e558:	8542      	strh	r2, [r0, #42]	; 0x2a
    e55a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e55c:	8482      	strh	r2, [r0, #36]	; 0x24
    e55e:	2900      	cmp	r1, #0
    e560:	d10a      	bne.n	e578 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e562:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e566:	8441      	strh	r1, [r0, #34]	; 0x22
    e568:	83c1      	strh	r1, [r0, #30]
    e56a:	8341      	strh	r1, [r0, #26]
    e56c:	8301      	strh	r1, [r0, #24]
    e56e:	81c1      	strh	r1, [r0, #14]
    e570:	8241      	strh	r1, [r0, #18]
    e572:	8181      	strh	r1, [r0, #12]
    e574:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e576:	8601      	strh	r1, [r0, #48]	; 0x30
    e578:	4770      	bx	lr

0000e57a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e57a:	6800      	ldr	r0, [r0, #0]
    e57c:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e580:	4290      	cmp	r0, r2
    e582:	d903      	bls.n	e58c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e584:	1a40      	subs	r0, r0, r1
    e586:	389c      	subs	r0, #156	; 0x9c
    e588:	0840      	lsrs	r0, r0, #1
    e58a:	4770      	bx	lr
    e58c:	2000      	movs	r0, #0
    e58e:	4770      	bx	lr

0000e590 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e590:	b510      	push	{r4, lr}
    e592:	9c02      	ldr	r4, [sp, #8]
    e594:	8281      	strh	r1, [r0, #20]
    e596:	82c2      	strh	r2, [r0, #22]
    e598:	8303      	strh	r3, [r0, #24]
    e59a:	8344      	strh	r4, [r0, #26]
    e59c:	bd10      	pop	{r4, pc}

0000e59e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e59e:	8050      	strh	r0, [r2, #2]
    e5a0:	8a88      	ldrh	r0, [r1, #20]
    e5a2:	8090      	strh	r0, [r2, #4]
    e5a4:	8ac8      	ldrh	r0, [r1, #22]
    e5a6:	80d0      	strh	r0, [r2, #6]
    e5a8:	8b08      	ldrh	r0, [r1, #24]
    e5aa:	8110      	strh	r0, [r2, #8]
    e5ac:	8b48      	ldrh	r0, [r1, #26]
    e5ae:	8150      	strh	r0, [r2, #10]
    e5b0:	2001      	movs	r0, #1
    e5b2:	7010      	strb	r0, [r2, #0]
    e5b4:	4770      	bx	lr
    e5b6:	2902      	cmp	r1, #2
    e5b8:	d003      	beq.n	e5c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e5ba:	00c0      	lsls	r0, r0, #3
    e5bc:	3070      	adds	r0, #112	; 0x70
    e5be:	b280      	uxth	r0, r0
    e5c0:	4770      	bx	lr
    e5c2:	0080      	lsls	r0, r0, #2
    e5c4:	303c      	adds	r0, #60	; 0x3c
    e5c6:	e7fa      	b.n	e5be <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e5c8:	4288      	cmp	r0, r1
    e5ca:	d300      	bcc.n	e5ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e5cc:	4608      	mov	r0, r1
    e5ce:	1a80      	subs	r0, r0, r2
    e5d0:	4770      	bx	lr
    e5d2:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e5d6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e5da:	4281      	cmp	r1, r0
    e5dc:	d200      	bcs.n	e5e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e5de:	4608      	mov	r0, r1
    e5e0:	4770      	bx	lr
    e5e2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e5e6:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e5ea:	4281      	cmp	r1, r0
    e5ec:	d200      	bcs.n	e5f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e5ee:	4608      	mov	r0, r1
    e5f0:	4770      	bx	lr
    e5f2:	2196      	movs	r1, #150	; 0x96
    e5f4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e5f8:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e5fc:	f000 b800 	b.w	e600 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e604:	460d      	mov	r5, r1
    e606:	4606      	mov	r6, r0
    e608:	4698      	mov	r8, r3
    e60a:	4617      	mov	r7, r2
    e60c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e60e:	4611      	mov	r1, r2
    e610:	f7ff ffd1 	bl	e5b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e614:	4604      	mov	r4, r0
    e616:	4639      	mov	r1, r7
    e618:	4630      	mov	r0, r6
    e61a:	f7ff ffe2 	bl	e5e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e61e:	42a0      	cmp	r0, r4
    e620:	d200      	bcs.n	e624 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e622:	4604      	mov	r4, r0
    e624:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e626:	4641      	mov	r1, r8
    e628:	f7ff ffc5 	bl	e5b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e62c:	4607      	mov	r7, r0
    e62e:	4641      	mov	r1, r8
    e630:	4630      	mov	r0, r6
    e632:	f7ff ffce 	bl	e5d2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e636:	42b8      	cmp	r0, r7
    e638:	d300      	bcc.n	e63c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e63a:	4638      	mov	r0, r7
    e63c:	4420      	add	r0, r4
    e63e:	4428      	add	r0, r5
    e640:	1d80      	adds	r0, r0, #6
    e642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e646 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    e646:	b510      	push	{r4, lr}
    e648:	4604      	mov	r4, r0
    e64a:	2108      	movs	r1, #8
    e64c:	4620      	mov	r0, r4
    e64e:	f7f6 fa97 	bl	4b80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e652:	6820      	ldr	r0, [r4, #0]
    e654:	2800      	cmp	r0, #0
    e656:	d102      	bne.n	e65e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    e658:	6860      	ldr	r0, [r4, #4]
    e65a:	2800      	cmp	r0, #0
    e65c:	d0f5      	beq.n	e64a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    e65e:	bd10      	pop	{r4, pc}
    e660:	2801      	cmp	r0, #1
    e662:	d102      	bne.n	e66a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    e664:	7948      	ldrb	r0, [r1, #5]
    e666:	0980      	lsrs	r0, r0, #6
    e668:	d001      	beq.n	e66e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    e66a:	2000      	movs	r0, #0
    e66c:	4770      	bx	lr
    e66e:	2001      	movs	r0, #1
    e670:	4770      	bx	lr
    e672:	2801      	cmp	r0, #1
    e674:	d106      	bne.n	e684 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e676:	7948      	ldrb	r0, [r1, #5]
    e678:	2101      	movs	r1, #1
    e67a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e67e:	d101      	bne.n	e684 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e680:	2001      	movs	r0, #1
    e682:	4770      	bx	lr
    e684:	2000      	movs	r0, #0
    e686:	4770      	bx	lr
    e688:	2802      	cmp	r0, #2
    e68a:	d003      	beq.n	e694 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    e68c:	2803      	cmp	r0, #3
    e68e:	d001      	beq.n	e694 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    e690:	2000      	movs	r0, #0
    e692:	4770      	bx	lr
    e694:	2001      	movs	r0, #1
    e696:	4770      	bx	lr

0000e698 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e698:	b510      	push	{r4, lr}
    e69a:	4604      	mov	r4, r0
    e69c:	7c00      	ldrb	r0, [r0, #16]
    e69e:	f7ff fff3 	bl	e688 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    e6a2:	b148      	cbz	r0, e6b8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e6a4:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    e6a8:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e6ac:	f7ff fa2e 	bl	db0c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e6b0:	2808      	cmp	r0, #8
    e6b2:	d001      	beq.n	e6b8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e6b4:	2001      	movs	r0, #1
    e6b6:	bd10      	pop	{r4, pc}
    e6b8:	7c20      	ldrb	r0, [r4, #16]
    e6ba:	b118      	cbz	r0, e6c4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e6bc:	2802      	cmp	r0, #2
    e6be:	d001      	beq.n	e6c4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e6c0:	7de0      	ldrb	r0, [r4, #23]
    e6c2:	bd10      	pop	{r4, pc}
    e6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6c8:	2000      	movs	r0, #0
    e6ca:	f7f7 b8e9 	b.w	58a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e6ce <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e6ce:	b508      	push	{r3, lr}
    e6d0:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    e6d4:	f88d 1000 	strb.w	r1, [sp]
    e6d8:	9900      	ldr	r1, [sp, #0]
    e6da:	9100      	str	r1, [sp, #0]
    e6dc:	f89d 1000 	ldrb.w	r1, [sp]
    e6e0:	b109      	cbz	r1, e6e6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e6e2:	2001      	movs	r0, #1
    e6e4:	bd08      	pop	{r3, pc}
    e6e6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    e6ea:	f88d 0000 	strb.w	r0, [sp]
    e6ee:	9800      	ldr	r0, [sp, #0]
    e6f0:	9000      	str	r0, [sp, #0]
    e6f2:	f89d 0000 	ldrb.w	r0, [sp]
    e6f6:	2000      	movs	r0, #0
    e6f8:	bd08      	pop	{r3, pc}

0000e6fa <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e6fa:	20ff      	movs	r0, #255	; 0xff
    e6fc:	7008      	strb	r0, [r1, #0]
    e6fe:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    e700:	f7ff b955 	b.w	d9ae <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e704 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e704:	b51c      	push	{r2, r3, r4, lr}
    e706:	4604      	mov	r4, r0
    e708:	22d4      	movs	r2, #212	; 0xd4
    e70a:	2100      	movs	r1, #0
    e70c:	f7fe f878 	bl	c800 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e710:	20ff      	movs	r0, #255	; 0xff
    e712:	7020      	strb	r0, [r4, #0]
    e714:	207f      	movs	r0, #127	; 0x7f
    e716:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e71a:	2013      	movs	r0, #19
    e71c:	8060      	strh	r0, [r4, #2]
    e71e:	f7f6 fe6f 	bl	5400 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e722:	4601      	mov	r1, r0
    e724:	62e0      	str	r0, [r4, #44]	; 0x2c
    e726:	2200      	movs	r2, #0
    e728:	4668      	mov	r0, sp
    e72a:	f7ff f8ab 	bl	d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e72e:	2200      	movs	r2, #0
    e730:	2101      	movs	r1, #1
    e732:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e734:	f7ff f91b 	bl	d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e738:	2204      	movs	r2, #4
    e73a:	4668      	mov	r0, sp
    e73c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e73e:	f7ff f8a1 	bl	d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e742:	2200      	movs	r2, #0
    e744:	4611      	mov	r1, r2
    e746:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e748:	f7ff f911 	bl	d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e74c:	2000      	movs	r0, #0
    e74e:	73a0      	strb	r0, [r4, #14]
    e750:	f104 0020 	add.w	r0, r4, #32
    e754:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    e758:	f000 b962 	b.w	ea20 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e75c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e75c:	7880      	ldrb	r0, [r0, #2]
    e75e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e762:	b108      	cbz	r0, e768 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e764:	2000      	movs	r0, #0
    e766:	4770      	bx	lr
    e768:	201f      	movs	r0, #31
    e76a:	4770      	bx	lr

0000e76c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e76c:	f7f9 b9ce 	b.w	7b0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000e770 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e770:	6880      	ldr	r0, [r0, #8]
    e772:	4770      	bx	lr

0000e774 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e774:	2001      	movs	r0, #1
    e776:	4770      	bx	lr

0000e778 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e778:	b510      	push	{r4, lr}
    e77a:	4604      	mov	r4, r0
    e77c:	3020      	adds	r0, #32
    e77e:	f000 f90f 	bl	e9a0 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e782:	8861      	ldrh	r1, [r4, #2]
    e784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e788:	2228      	movs	r2, #40	; 0x28
    e78a:	f7f9 bb9f 	b.w	7ecc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e78e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e78e:	2200      	movs	r2, #0
    e790:	6282      	str	r2, [r0, #40]	; 0x28
    e792:	8843      	ldrh	r3, [r0, #2]
    e794:	2b1d      	cmp	r3, #29
    e796:	d001      	beq.n	e79c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e798:	7341      	strb	r1, [r0, #13]
    e79a:	4770      	bx	lr
    e79c:	7342      	strb	r2, [r0, #13]
    e79e:	4770      	bx	lr

0000e7a0 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e7a0:	b510      	push	{r4, lr}
    e7a2:	2400      	movs	r4, #0
    e7a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e7a6:	f7ff f8d0 	bl	d94a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e7aa:	b100      	cbz	r0, e7ae <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e7ac:	2001      	movs	r0, #1
    e7ae:	4384      	bics	r4, r0
    e7b0:	f084 0001 	eor.w	r0, r4, #1
    e7b4:	bd10      	pop	{r4, pc}

0000e7b6 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e7b6:	2000      	movs	r0, #0
    e7b8:	4770      	bx	lr

0000e7ba <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e7ba:	7880      	ldrb	r0, [r0, #2]
    e7bc:	f000 0001 	and.w	r0, r0, #1
    e7c0:	4770      	bx	lr

0000e7c2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e7c2:	7880      	ldrb	r0, [r0, #2]
    e7c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e7c8:	4770      	bx	lr

0000e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e7ca:	2001      	movs	r0, #1
    e7cc:	4770      	bx	lr

0000e7ce <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e7ce:	7880      	ldrb	r0, [r0, #2]
    e7d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e7d4:	4770      	bx	lr

0000e7d6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e7d6:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e7da:	4770      	bx	lr

0000e7dc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e7dc:	7800      	ldrb	r0, [r0, #0]
    e7de:	28ff      	cmp	r0, #255	; 0xff
    e7e0:	d001      	beq.n	e7e6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e7e2:	2001      	movs	r0, #1
    e7e4:	4770      	bx	lr
    e7e6:	2000      	movs	r0, #0
    e7e8:	4770      	bx	lr

0000e7ea <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e7ea:	680a      	ldr	r2, [r1, #0]
    e7ec:	f840 2f11 	str.w	r2, [r0, #17]!
    e7f0:	8889      	ldrh	r1, [r1, #4]
    e7f2:	8081      	strh	r1, [r0, #4]
    e7f4:	2101      	movs	r1, #1
    e7f6:	7181      	strb	r1, [r0, #6]
    e7f8:	4770      	bx	lr

0000e7fa <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e7fa:	7b00      	ldrb	r0, [r0, #12]
    e7fc:	4770      	bx	lr

0000e7fe <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e7fe:	2001      	movs	r0, #1
    e800:	4770      	bx	lr

0000e802 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e802:	61c1      	str	r1, [r0, #28]
    e804:	4770      	bx	lr

0000e806 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e806:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e80a:	4770      	bx	lr

0000e80c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e80c:	b570      	push	{r4, r5, r6, lr}
    e80e:	4604      	mov	r4, r0
    e810:	7880      	ldrb	r0, [r0, #2]
    e812:	2501      	movs	r5, #1
    e814:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e818:	b138      	cbz	r0, e82a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e81a:	233c      	movs	r3, #60	; 0x3c
    e81c:	22ff      	movs	r2, #255	; 0xff
    e81e:	4620      	mov	r0, r4
    e820:	69e1      	ldr	r1, [r4, #28]
    e822:	f7f9 f99f 	bl	7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    e826:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    e82a:	78a0      	ldrb	r0, [r4, #2]
    e82c:	07c0      	lsls	r0, r0, #31
    e82e:	f7f8 fa99 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e832:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e836:	bd70      	pop	{r4, r5, r6, pc}

0000e838 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e838:	7bc0      	ldrb	r0, [r0, #15]
    e83a:	2800      	cmp	r0, #0
    e83c:	d000      	beq.n	e840 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e83e:	2001      	movs	r0, #1
    e840:	4770      	bx	lr
    e842:	b510      	push	{r4, lr}
    e844:	f7ff f962 	bl	db0c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e848:	4604      	mov	r4, r0
    e84a:	f7f7 fecb 	bl	65e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e84e:	b138      	cbz	r0, e860 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e850:	4620      	mov	r0, r4
    e852:	f7f7 fdff 	bl	6454 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e856:	b118      	cbz	r0, e860 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e858:	2110      	movs	r1, #16
    e85a:	f7ff fb37 	bl	decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e85e:	b108      	cbz	r0, e864 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e860:	2000      	movs	r0, #0
    e862:	bd10      	pop	{r4, pc}
    e864:	2001      	movs	r0, #1
    e866:	bd10      	pop	{r4, pc}
    e868:	2101      	movs	r1, #1
    e86a:	f7f8 bddb 	b.w	7424 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e86e:	2101      	movs	r1, #1
    e870:	f7f8 bdd8 	b.w	7424 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e878:	4604      	mov	r4, r0
    e87a:	2700      	movs	r7, #0
    e87c:	704f      	strb	r7, [r1, #1]
    e87e:	2011      	movs	r0, #17
    e880:	460d      	mov	r5, r1
    e882:	7008      	strb	r0, [r1, #0]
    e884:	2220      	movs	r2, #32
    e886:	f104 0166 	add.w	r1, r4, #102	; 0x66
    e88a:	1d28      	adds	r0, r5, #4
    e88c:	f7fd ff3e 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e890:	2601      	movs	r6, #1
    e892:	722e      	strb	r6, [r5, #8]
    e894:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    e898:	7928      	ldrb	r0, [r5, #4]
    e89a:	2800      	cmp	r0, #0
    e89c:	d111      	bne.n	e8c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    e89e:	88e8      	ldrh	r0, [r5, #6]
    e8a0:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    e8a4:	69e0      	ldr	r0, [r4, #28]
    e8a6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    e8aa:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    e8ae:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    e8b2:	8800      	ldrh	r0, [r0, #0]
    e8b4:	f7f6 fce4 	bl	5280 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e8b8:	f7fe fe04 	bl	d4c4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e8bc:	69e0      	ldr	r0, [r4, #28]
    e8be:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8ca:	4604      	mov	r4, r0
    e8cc:	460f      	mov	r7, r1
    e8ce:	7e40      	ldrb	r0, [r0, #25]
    e8d0:	f7f7 fd80 	bl	63d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e8d4:	4606      	mov	r6, r0
    e8d6:	7e20      	ldrb	r0, [r4, #24]
    e8d8:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e8dc:	b120      	cbz	r0, e8e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e8de:	b11e      	cbz	r6, e8e8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e8e0:	7e60      	ldrb	r0, [r4, #25]
    e8e2:	f7f7 fd6b 	bl	63bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e8e6:	b1a0      	cbz	r0, e912 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e8e8:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e8ec:	2800      	cmp	r0, #0
    e8ee:	d024      	beq.n	e93a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e8f0:	7ea0      	ldrb	r0, [r4, #26]
    e8f2:	2800      	cmp	r0, #0
    e8f4:	d021      	beq.n	e93a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e8f6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e8fa:	4629      	mov	r1, r5
    e8fc:	f7ff feb9 	bl	e672 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    e900:	b1a8      	cbz	r0, e92e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e902:	f7f7 fd57 	bl	63b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e906:	463a      	mov	r2, r7
    e908:	4629      	mov	r1, r5
    e90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e90e:	f7ff b895 	b.w	da3c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e912:	2001      	movs	r0, #1
    e914:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e918:	463a      	mov	r2, r7
    e91a:	4629      	mov	r1, r5
    e91c:	4630      	mov	r0, r6
    e91e:	f7ff f88d 	bl	da3c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e922:	7e61      	ldrb	r1, [r4, #25]
    e924:	4628      	mov	r0, r5
    e926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e92a:	f7f7 bd5f 	b.w	63ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e92e:	4639      	mov	r1, r7
    e930:	4628      	mov	r0, r5
    e932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e936:	f7ff b870 	b.w	da1a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e93e:	b510      	push	{r4, lr}
    e940:	4604      	mov	r4, r0
    e942:	4608      	mov	r0, r1
    e944:	f7fd f9dc 	bl	bd00 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e948:	7921      	ldrb	r1, [r4, #4]
    e94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e94e:	2025      	movs	r0, #37	; 0x25
    e950:	f001 bdad 	b.w	104ae <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e954:	b510      	push	{r4, lr}
    e956:	4604      	mov	r4, r0
    e958:	3026      	adds	r0, #38	; 0x26
    e95a:	f7fd f98d 	bl	bc78 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e95e:	2800      	cmp	r0, #0
    e960:	d102      	bne.n	e968 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e962:	207f      	movs	r0, #127	; 0x7f
    e964:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e968:	bd10      	pop	{r4, pc}
    e96a:	7802      	ldrb	r2, [r0, #0]
    e96c:	2320      	movs	r3, #32
    e96e:	f022 0220 	bic.w	r2, r2, #32
    e972:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e976:	430a      	orrs	r2, r1
    e978:	7002      	strb	r2, [r0, #0]
    e97a:	4770      	bx	lr

0000e97c <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e97c:	b570      	push	{r4, r5, r6, lr}
    e97e:	7001      	strb	r1, [r0, #0]
    e980:	7042      	strb	r2, [r0, #1]
    e982:	4614      	mov	r4, r2
    e984:	460d      	mov	r5, r1
    e986:	7880      	ldrb	r0, [r0, #2]
    e988:	f000 f87f 	bl	ea8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e98c:	fb10 f005 	smulbb	r0, r0, r5
    e990:	4360      	muls	r0, r4
    e992:	28ff      	cmp	r0, #255	; 0xff
    e994:	d303      	bcc.n	e99e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e996:	215c      	movs	r1, #92	; 0x5c
    e998:	202e      	movs	r0, #46	; 0x2e
    e99a:	f7f6 f857 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e99e:	bd70      	pop	{r4, r5, r6, pc}

0000e9a0 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e9a0:	b510      	push	{r4, lr}
    e9a2:	4604      	mov	r4, r0
    e9a4:	7880      	ldrb	r0, [r0, #2]
    e9a6:	f000 f870 	bl	ea8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e9aa:	7861      	ldrb	r1, [r4, #1]
    e9ac:	7822      	ldrb	r2, [r4, #0]
    e9ae:	fb11 f102 	smulbb	r1, r1, r2
    e9b2:	4348      	muls	r0, r1
    e9b4:	b2c0      	uxtb	r0, r0
    e9b6:	bd10      	pop	{r4, pc}

0000e9b8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e9b8:	b510      	push	{r4, lr}
    e9ba:	4604      	mov	r4, r0
    e9bc:	f000 f84d 	bl	ea5a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e9c0:	7961      	ldrb	r1, [r4, #5]
    e9c2:	1c49      	adds	r1, r1, #1
    e9c4:	b2c9      	uxtb	r1, r1
    e9c6:	7161      	strb	r1, [r4, #5]
    e9c8:	7862      	ldrb	r2, [r4, #1]
    e9ca:	4291      	cmp	r1, r2
    e9cc:	d10b      	bne.n	e9e6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e9ce:	2200      	movs	r2, #0
    e9d0:	7162      	strb	r2, [r4, #5]
    e9d2:	78e1      	ldrb	r1, [r4, #3]
    e9d4:	4301      	orrs	r1, r0
    e9d6:	70e1      	strb	r1, [r4, #3]
    e9d8:	78a3      	ldrb	r3, [r4, #2]
    e9da:	4299      	cmp	r1, r3
    e9dc:	d103      	bne.n	e9e6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e9de:	70e2      	strb	r2, [r4, #3]
    e9e0:	7921      	ldrb	r1, [r4, #4]
    e9e2:	1c49      	adds	r1, r1, #1
    e9e4:	7121      	strb	r1, [r4, #4]
    e9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9ea:	f000 b825 	b.w	ea38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e9ee <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e9ee:	7081      	strb	r1, [r0, #2]
    e9f0:	4770      	bx	lr

0000e9f2 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e9f2:	b570      	push	{r4, r5, r6, lr}
    e9f4:	4604      	mov	r4, r0
    e9f6:	7880      	ldrb	r0, [r0, #2]
    e9f8:	f000 f847 	bl	ea8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e9fc:	7861      	ldrb	r1, [r4, #1]
    e9fe:	fb11 f500 	smulbb	r5, r1, r0
    ea02:	78e0      	ldrb	r0, [r4, #3]
    ea04:	f000 f841 	bl	ea8a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ea08:	7861      	ldrb	r1, [r4, #1]
    ea0a:	7962      	ldrb	r2, [r4, #5]
    ea0c:	fb10 2001 	smlabb	r0, r0, r1, r2
    ea10:	7821      	ldrb	r1, [r4, #0]
    ea12:	7922      	ldrb	r2, [r4, #4]
    ea14:	1a89      	subs	r1, r1, r2
    ea16:	fb11 f105 	smulbb	r1, r1, r5
    ea1a:	1a08      	subs	r0, r1, r0
    ea1c:	b2c0      	uxtb	r0, r0
    ea1e:	bd70      	pop	{r4, r5, r6, pc}

0000ea20 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ea20:	2100      	movs	r1, #0
    ea22:	6001      	str	r1, [r0, #0]
    ea24:	8081      	strh	r1, [r0, #4]
    ea26:	2101      	movs	r1, #1
    ea28:	7041      	strb	r1, [r0, #1]
    ea2a:	7001      	strb	r1, [r0, #0]
    ea2c:	4770      	bx	lr

0000ea2e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ea2e:	2100      	movs	r1, #0
    ea30:	70c1      	strb	r1, [r0, #3]
    ea32:	7141      	strb	r1, [r0, #5]
    ea34:	7101      	strb	r1, [r0, #4]
    ea36:	4770      	bx	lr
    ea38:	b510      	push	{r4, lr}
    ea3a:	2801      	cmp	r0, #1
    ea3c:	d007      	beq.n	ea4e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ea3e:	2802      	cmp	r0, #2
    ea40:	d007      	beq.n	ea52 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ea42:	2804      	cmp	r0, #4
    ea44:	d007      	beq.n	ea56 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ea46:	2139      	movs	r1, #57	; 0x39
    ea48:	202e      	movs	r0, #46	; 0x2e
    ea4a:	f7f5 ffff 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea4e:	2025      	movs	r0, #37	; 0x25
    ea50:	bd10      	pop	{r4, pc}
    ea52:	2026      	movs	r0, #38	; 0x26
    ea54:	bd10      	pop	{r4, pc}
    ea56:	2027      	movs	r0, #39	; 0x27
    ea58:	bd10      	pop	{r4, pc}
    ea5a:	4601      	mov	r1, r0
    ea5c:	2000      	movs	r0, #0
    ea5e:	788a      	ldrb	r2, [r1, #2]
    ea60:	07d3      	lsls	r3, r2, #31
    ea62:	d002      	beq.n	ea6a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ea64:	78cb      	ldrb	r3, [r1, #3]
    ea66:	07db      	lsls	r3, r3, #31
    ea68:	d006      	beq.n	ea78 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ea6a:	0793      	lsls	r3, r2, #30
    ea6c:	d506      	bpl.n	ea7c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ea6e:	78cb      	ldrb	r3, [r1, #3]
    ea70:	079b      	lsls	r3, r3, #30
    ea72:	d403      	bmi.n	ea7c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ea74:	2002      	movs	r0, #2
    ea76:	4770      	bx	lr
    ea78:	2001      	movs	r0, #1
    ea7a:	4770      	bx	lr
    ea7c:	0752      	lsls	r2, r2, #29
    ea7e:	d5fc      	bpl.n	ea7a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ea80:	78c9      	ldrb	r1, [r1, #3]
    ea82:	0749      	lsls	r1, r1, #29
    ea84:	d4f9      	bmi.n	ea7a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ea86:	2004      	movs	r0, #4
    ea88:	4770      	bx	lr
    ea8a:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ea8e:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ea92:	4411      	add	r1, r2
    ea94:	f000 0001 	and.w	r0, r0, #1
    ea98:	4408      	add	r0, r1
    ea9a:	4770      	bx	lr

0000ea9c <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ea9c:	f240 315a 	movw	r1, #858	; 0x35a
    eaa0:	4348      	muls	r0, r1
    eaa2:	4770      	bx	lr

0000eaa4 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    eaa4:	f240 20ef 	movw	r0, #751	; 0x2ef
    eaa8:	4770      	bx	lr
    eaaa:	020e      	.short	0x020e
    eaac:	0630041c 	.word	0x0630041c
    eab0:	035a0c60 	.word	0x035a0c60
    eab4:	05c506b4 	.word	0x05c506b4
    eab8:	12250bf5 	.word	0x12250bf5
    eabc:	03b101a3 	.word	0x03b101a3
    eac0:	02ef05bf 	.word	0x02ef05bf
    eac4:	09a30649 	.word	0x09a30649

0000eac8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    eac8:	b510      	push	{r4, lr}
    eaca:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    eace:	b109      	cbz	r1, ead4 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ead0:	2000      	movs	r0, #0
    ead2:	bd10      	pop	{r4, pc}
    ead4:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    ead8:	b949      	cbnz	r1, eaee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    eada:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    eade:	b131      	cbz	r1, eaee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    eae0:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    eae4:	428a      	cmp	r2, r1
    eae6:	d902      	bls.n	eaee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    eae8:	f7ff fe90 	bl	e80c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eaec:	e7f0      	b.n	ead0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    eaee:	2001      	movs	r0, #1
    eaf0:	bd10      	pop	{r4, pc}

0000eaf2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    eaf2:	b510      	push	{r4, lr}
    eaf4:	b131      	cbz	r1, eb04 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    eaf6:	2901      	cmp	r1, #1
    eaf8:	d008      	beq.n	eb0c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    eafa:	f240 718b 	movw	r1, #1931	; 0x78b
    eafe:	2030      	movs	r0, #48	; 0x30
    eb00:	f7f5 ffa4 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb08:	f000 b9d4 	b.w	eeb4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    eb0c:	2100      	movs	r1, #0
    eb0e:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    eb12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb16:	f000 b93b 	b.w	ed90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000eb1a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    eb1a:	b510      	push	{r4, lr}
    eb1c:	4604      	mov	r4, r0
    eb1e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    eb22:	2800      	cmp	r0, #0
    eb24:	d019      	beq.n	eb5a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    eb26:	2001      	movs	r0, #1
    eb28:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    eb2c:	4601      	mov	r1, r0
    eb2e:	4620      	mov	r0, r4
    eb30:	f7ff fe69 	bl	e806 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    eb34:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    eb38:	b170      	cbz	r0, eb58 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    eb3a:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    eb3e:	f7f4 f819 	bl	2b74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    eb42:	7820      	ldrb	r0, [r4, #0]
    eb44:	f7f4 f964 	bl	2e10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    eb48:	f814 09a0 	ldrb.w	r0, [r4], #-160
    eb4c:	f7f4 f93e 	bl	2dcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eb50:	b120      	cbz	r0, eb5c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    eb52:	2000      	movs	r0, #0
    eb54:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    eb58:	2000      	movs	r0, #0
    eb5a:	bd10      	pop	{r4, pc}
    eb5c:	f240 2103 	movw	r1, #515	; 0x203
    eb60:	2030      	movs	r0, #48	; 0x30
    eb62:	f7f5 ff73 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb66 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    eb66:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    eb6a:	4770      	bx	lr

0000eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    eb6c:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    eb70:	4770      	bx	lr

0000eb72 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    eb72:	b50e      	push	{r1, r2, r3, lr}
    eb74:	4669      	mov	r1, sp
    eb76:	2001      	movs	r0, #1
    eb78:	f7fe fdcd 	bl	d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eb7c:	b138      	cbz	r0, eb8e <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    eb7e:	f44f 71a1 	mov.w	r1, #322	; 0x142
    eb82:	2030      	movs	r0, #48	; 0x30
    eb84:	f7f5 ff62 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb88:	9802      	ldr	r0, [sp, #8]
    eb8a:	f7ff ffc6 	bl	eb1a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    eb8e:	4668      	mov	r0, sp
    eb90:	f7f6 f994 	bl	4ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eb94:	2800      	cmp	r0, #0
    eb96:	d0f7      	beq.n	eb88 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    eb98:	f7f9 fb22 	bl	81e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    eb9c:	2000      	movs	r0, #0
    eb9e:	bd0e      	pop	{r1, r2, r3, pc}

0000eba0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    eba0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eba2:	4604      	mov	r4, r0
    eba4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    eba8:	2800      	cmp	r0, #0
    ebaa:	d153      	bne.n	ec54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ebac:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    ebb0:	2803      	cmp	r0, #3
    ebb2:	d14f      	bne.n	ec54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ebb4:	f7fd fc35 	bl	c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    ebb8:	4601      	mov	r1, r0
    ebba:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    ebbe:	f7f3 fb75 	bl	22ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ebc2:	2800      	cmp	r0, #0
    ebc4:	dd46      	ble.n	ec54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ebc6:	68e1      	ldr	r1, [r4, #12]
    ebc8:	b111      	cbz	r1, ebd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    ebca:	fbb0 f0f1 	udiv	r0, r0, r1
    ebce:	e000      	b.n	ebd2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    ebd0:	2000      	movs	r0, #0
    ebd2:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ebd6:	1c40      	adds	r0, r0, #1
    ebd8:	4408      	add	r0, r1
    ebda:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ebde:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ebe2:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    ebe6:	1a08      	subs	r0, r1, r0
    ebe8:	b200      	sxth	r0, r0
    ebea:	2800      	cmp	r0, #0
    ebec:	dd32      	ble.n	ec54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ebee:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    ebf2:	f7f3 ffbf 	bl	2b74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ebf6:	2800      	cmp	r0, #0
    ebf8:	d02c      	beq.n	ec54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ebfa:	2001      	movs	r0, #1
    ebfc:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    ec00:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    ec04:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    ec08:	ae01      	add	r6, sp, #4
    ec0a:	1a40      	subs	r0, r0, r1
    ec0c:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ec10:	1e40      	subs	r0, r0, #1
    ec12:	4408      	add	r0, r1
    ec14:	b285      	uxth	r5, r0
    ec16:	e017      	b.n	ec48 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    ec18:	9600      	str	r6, [sp, #0]
    ec1a:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    ec1e:	2300      	movs	r3, #0
    ec20:	2201      	movs	r2, #1
    ec22:	4620      	mov	r0, r4
    ec24:	f7f9 fbac 	bl	8380 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ec28:	2800      	cmp	r0, #0
    ec2a:	d013      	beq.n	ec54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ec2c:	2801      	cmp	r0, #1
    ec2e:	d004      	beq.n	ec3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    ec30:	f240 6101 	movw	r1, #1537	; 0x601
    ec34:	2030      	movs	r0, #48	; 0x30
    ec36:	f7f5 ff09 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec3a:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ec3e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ec42:	4408      	add	r0, r1
    ec44:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ec48:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ec4c:	1a28      	subs	r0, r5, r0
    ec4e:	b200      	sxth	r0, r0
    ec50:	2800      	cmp	r0, #0
    ec52:	dae1      	bge.n	ec18 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    ec54:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ec56:	2000      	movs	r0, #0
    ec58:	4770      	bx	lr
    ec5a:	b570      	push	{r4, r5, r6, lr}
    ec5c:	4604      	mov	r4, r0
    ec5e:	2601      	movs	r6, #1
    ec60:	f000 f90c 	bl	ee7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    ec64:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    ec68:	2000      	movs	r0, #0
    ec6a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    ec6e:	2001      	movs	r0, #1
    ec70:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    ec74:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    ec78:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    ec7c:	b160      	cbz	r0, ec98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    ec7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ec82:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    ec86:	f7f3 fadf 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ec8a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    ec8e:	2100      	movs	r1, #0
    ec90:	4628      	mov	r0, r5
    ec92:	f7ff f861 	bl	dd58 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ec96:	e00f      	b.n	ecb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    ec98:	4620      	mov	r0, r4
    ec9a:	f7ff fd69 	bl	e770 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ec9e:	4606      	mov	r6, r0
    eca0:	4631      	mov	r1, r6
    eca2:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    eca6:	f7f3 facf 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ecaa:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    ecae:	4631      	mov	r1, r6
    ecb0:	4628      	mov	r0, r5
    ecb2:	f7ff f851 	bl	dd58 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ecb6:	1c46      	adds	r6, r0, #1
    ecb8:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ecbc:	1c41      	adds	r1, r0, #1
    ecbe:	290a      	cmp	r1, #10
    ecc0:	d202      	bcs.n	ecc8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    ecc2:	4430      	add	r0, r6
    ecc4:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    ecc8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    eccc:	b130      	cbz	r0, ecdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ecce:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ecd2:	1c40      	adds	r0, r0, #1
    ecd4:	280a      	cmp	r0, #10
    ecd6:	d301      	bcc.n	ecdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ecd8:	2002      	movs	r0, #2
    ecda:	e000      	b.n	ecde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    ecdc:	2003      	movs	r0, #3
    ecde:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    ece2:	2100      	movs	r1, #0
    ece4:	4620      	mov	r0, r4
    ece6:	f000 f822 	bl	ed2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ecea:	b120      	cbz	r0, ecf6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    ecec:	4620      	mov	r0, r4
    ecee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ecf2:	f000 b80d 	b.w	ed10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    ecf6:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    ecfa:	4629      	mov	r1, r5
    ecfc:	f000 f8bc 	bl	ee78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    ed00:	2800      	cmp	r0, #0
    ed02:	d104      	bne.n	ed0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    ed04:	f240 61a2 	movw	r1, #1698	; 0x6a2
    ed08:	2030      	movs	r0, #48	; 0x30
    ed0a:	f7f5 fe9f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed0e:	bd70      	pop	{r4, r5, r6, pc}
    ed10:	b510      	push	{r4, lr}
    ed12:	4604      	mov	r4, r0
    ed14:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    ed18:	f7f4 f858 	bl	2dcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed1c:	2000      	movs	r0, #0
    ed1e:	7520      	strb	r0, [r4, #20]
    ed20:	bd10      	pop	{r4, pc}
    ed22:	b510      	push	{r4, lr}
    ed24:	f7ff fd28 	bl	e778 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ed28:	f200 1009 	addw	r0, r0, #265	; 0x109
    ed2c:	bd10      	pop	{r4, pc}
    ed2e:	b570      	push	{r4, r5, r6, lr}
    ed30:	4604      	mov	r4, r0
    ed32:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    ed36:	460d      	mov	r5, r1
    ed38:	b108      	cbz	r0, ed3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    ed3a:	2001      	movs	r0, #1
    ed3c:	bd70      	pop	{r4, r5, r6, pc}
    ed3e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ed42:	b1a8      	cbz	r0, ed70 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    ed44:	4620      	mov	r0, r4
    ed46:	f7ff fd13 	bl	e770 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ed4a:	4405      	add	r5, r0
    ed4c:	4620      	mov	r0, r4
    ed4e:	f7ff ffe8 	bl	ed22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ed52:	1941      	adds	r1, r0, r5
    ed54:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ed58:	4288      	cmp	r0, r1
    ed5a:	d206      	bcs.n	ed6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    ed5c:	2001      	movs	r0, #1
    ed5e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    ed62:	4620      	mov	r0, r4
    ed64:	f7ff fd52 	bl	e80c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ed68:	e7e7      	b.n	ed3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    ed6a:	1b40      	subs	r0, r0, r5
    ed6c:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    ed70:	2000      	movs	r0, #0
    ed72:	bd70      	pop	{r4, r5, r6, pc}
    ed74:	b510      	push	{r4, lr}
    ed76:	4604      	mov	r4, r0
    ed78:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ed7c:	f000 f9e8 	bl	f150 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    ed80:	4602      	mov	r2, r0
    ed82:	4620      	mov	r0, r4
    ed84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed88:	f240 111b 	movw	r1, #283	; 0x11b
    ed8c:	f7ff bbc8 	b.w	e520 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ed90:	b510      	push	{r4, lr}
    ed92:	f7fc fe07 	bl	b9a4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed9a:	f7f4 b96d 	b.w	3078 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ed9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eda2:	4604      	mov	r4, r0
    eda4:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    eda8:	2800      	cmp	r0, #0
    edaa:	d051      	beq.n	ee50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    edac:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    edb0:	2803      	cmp	r0, #3
    edb2:	d14d      	bne.n	ee50 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    edb4:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    edb8:	f001 fac2 	bl	10340 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    edbc:	4605      	mov	r5, r0
    edbe:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    edc2:	f7f9 f9ff 	bl	81c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    edc6:	4428      	add	r0, r5
    edc8:	b286      	uxth	r6, r0
    edca:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    edce:	f7f9 f9f9 	bl	81c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    edd2:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    edd6:	fa1f f880 	uxth.w	r8, r0
    edda:	4648      	mov	r0, r9
    eddc:	f001 fb49 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ede0:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    ede4:	1a0d      	subs	r5, r1, r0
    ede6:	4648      	mov	r0, r9
    ede8:	f001 fb51 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    edec:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    edf0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    edf4:	fbb0 f0fa 	udiv	r0, r0, sl
    edf8:	1a2d      	subs	r5, r5, r0
    edfa:	4648      	mov	r0, r9
    edfc:	f001 fb39 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ee00:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    ee04:	1a0f      	subs	r7, r1, r0
    ee06:	4648      	mov	r0, r9
    ee08:	f001 fb41 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ee0c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ee10:	4401      	add	r1, r0
    ee12:	fbb1 f0fa 	udiv	r0, r1, sl
    ee16:	1a39      	subs	r1, r7, r0
    ee18:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    ee1c:	4370      	muls	r0, r6
    ee1e:	fbb0 f2f8 	udiv	r2, r0, r8
    ee22:	2029      	movs	r0, #41	; 0x29
    ee24:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    ee28:	3260      	adds	r2, #96	; 0x60
    ee2a:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    ee2e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    ee32:	42a9      	cmp	r1, r5
    ee34:	d801      	bhi.n	ee3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    ee36:	4285      	cmp	r5, r0
    ee38:	d901      	bls.n	ee3e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    ee3a:	f7f5 fa69 	bl	4310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    ee3e:	4631      	mov	r1, r6
    ee40:	68e0      	ldr	r0, [r4, #12]
    ee42:	f7fd fb22 	bl	c48a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ee46:	2100      	movs	r1, #0
    ee48:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    ee4c:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    ee50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee54:	b570      	push	{r4, r5, r6, lr}
    ee56:	460c      	mov	r4, r1
    ee58:	4605      	mov	r5, r0
    ee5a:	f001 fb18 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ee5e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ee62:	4408      	add	r0, r1
    ee64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ee68:	fbb0 f6f1 	udiv	r6, r0, r1
    ee6c:	4628      	mov	r0, r5
    ee6e:	f001 fb00 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ee72:	4430      	add	r0, r6
    ee74:	4420      	add	r0, r4
    ee76:	bd70      	pop	{r4, r5, r6, pc}
    ee78:	f7f3 bb4c 	b.w	2514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ee7c:	b510      	push	{r4, lr}
    ee7e:	4604      	mov	r4, r0
    ee80:	f7ff fca3 	bl	e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ee84:	b1a0      	cbz	r0, eeb0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    ee86:	4620      	mov	r0, r4
    ee88:	f7ff fc97 	bl	e7ba <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ee8c:	b918      	cbnz	r0, ee96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    ee8e:	4620      	mov	r0, r4
    ee90:	f7ff fc9d 	bl	e7ce <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ee94:	b120      	cbz	r0, eea0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    ee96:	2449      	movs	r4, #73	; 0x49
    ee98:	f001 fab7 	bl	1040a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    ee9c:	b928      	cbnz	r0, eeaa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    ee9e:	e001      	b.n	eea4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    eea0:	2442      	movs	r4, #66	; 0x42
    eea2:	e7f9      	b.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    eea4:	f001 faa7 	bl	103f6 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    eea8:	b100      	cbz	r0, eeac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    eeaa:	1de4      	adds	r4, r4, #7
    eeac:	4620      	mov	r0, r4
    eeae:	bd10      	pop	{r4, pc}
    eeb0:	206b      	movs	r0, #107	; 0x6b
    eeb2:	bd10      	pop	{r4, pc}
    eeb4:	b570      	push	{r4, r5, r6, lr}
    eeb6:	4604      	mov	r4, r0
    eeb8:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    eebc:	2500      	movs	r5, #0
    eebe:	b118      	cbz	r0, eec8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    eec0:	2001      	movs	r0, #1
    eec2:	f000 f887 	bl	efd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    eec6:	4605      	mov	r5, r0
    eec8:	4620      	mov	r0, r4
    eeca:	f7ff fc51 	bl	e770 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    eece:	1941      	adds	r1, r0, r5
    eed0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    eed4:	34b8      	adds	r4, #184	; 0xb8
    eed6:	f7f3 f9b7 	bl	2248 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    eeda:	2600      	movs	r6, #0
    eedc:	60e0      	str	r0, [r4, #12]
    eede:	f804 6b0b 	strb.w	r6, [r4], #11
    eee2:	2001      	movs	r0, #1
    eee4:	f804 0901 	strb.w	r0, [r4], #-1
    eee8:	2003      	movs	r0, #3
    eeea:	f804 09c2 	strb.w	r0, [r4], #-194
    eeee:	4620      	mov	r0, r4
    eef0:	f7ff ffc4 	bl	ee7c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    eef4:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    eef8:	4629      	mov	r1, r5
    eefa:	4620      	mov	r0, r4
    eefc:	f7ff ff17 	bl	ed2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ef00:	b930      	cbnz	r0, ef10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    ef02:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    ef06:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    ef0a:	f7ff ffb5 	bl	ee78 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    ef0e:	b128      	cbz	r0, ef1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    ef10:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    ef14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef18:	f7ff bf3a 	b.w	ed90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    ef1c:	f240 61eb 	movw	r1, #1771	; 0x6eb
    ef20:	2030      	movs	r0, #48	; 0x30
    ef22:	f7f5 fd93 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef26:	b510      	push	{r4, lr}
    ef28:	4604      	mov	r4, r0
    ef2a:	2000      	movs	r0, #0
    ef2c:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    ef30:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    ef34:	f7f3 ff4a 	bl	2dcc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef38:	2020      	movs	r0, #32
    ef3a:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    ef3e:	bd10      	pop	{r4, pc}
    ef40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef44:	2500      	movs	r5, #0
    ef46:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    ef4a:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    ef4e:	4688      	mov	r8, r1
    ef50:	4604      	mov	r4, r0
    ef52:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    ef56:	2701      	movs	r7, #1
    ef58:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    ef5c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    ef60:	4639      	mov	r1, r7
    ef62:	34a0      	adds	r4, #160	; 0xa0
    ef64:	f7f7 fcb0 	bl	68c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    ef68:	6860      	ldr	r0, [r4, #4]
    ef6a:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    ef6e:	6861      	ldr	r1, [r4, #4]
    ef70:	7820      	ldrb	r0, [r4, #0]
    ef72:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    ef76:	6861      	ldr	r1, [r4, #4]
    ef78:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    ef7c:	6860      	ldr	r0, [r4, #4]
    ef7e:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    ef82:	6864      	ldr	r4, [r4, #4]
    ef84:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    ef88:	2300      	movs	r3, #0
    ef8a:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    ef8e:	461a      	mov	r2, r3
    ef90:	4619      	mov	r1, r3
    ef92:	4620      	mov	r0, r4
    ef94:	9500      	str	r5, [sp, #0]
    ef96:	f7f9 f9f3 	bl	8380 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ef9a:	b120      	cbz	r0, efa6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    ef9c:	f240 2117 	movw	r1, #535	; 0x217
    efa0:	2030      	movs	r0, #48	; 0x30
    efa2:	f7f5 fd53 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efa6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    efaa:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    efae:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    efb2:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    efb6:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    efba:	f504 7498 	add.w	r4, r4, #304	; 0x130
    efbe:	7665      	strb	r5, [r4, #25]
    efc0:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    efc4:	1e40      	subs	r0, r0, #1
    efc6:	f824 0cbc 	strh.w	r0, [r4, #-188]
    efca:	86e5      	strh	r5, [r4, #54]	; 0x36
    efcc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    efd0:	f7ff bede 	b.w	ed90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    efd4:	b510      	push	{r4, lr}
    efd6:	f7f9 fbdf 	bl	8798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    efda:	f242 7110 	movw	r1, #10000	; 0x2710
    efde:	fbb0 f2f1 	udiv	r2, r0, r1
    efe2:	fb01 0012 	mls	r0, r1, r2, r0
    efe6:	bd10      	pop	{r4, pc}
    efe8:	b570      	push	{r4, r5, r6, lr}
    efea:	b140      	cbz	r0, effe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
    efec:	2909      	cmp	r1, #9
    efee:	d248      	bcs.n	f082 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
    eff0:	e8df f001 	tbb	[pc, r1]
    eff4:	3b3b1507 	.word	0x3b3b1507
    eff8:	3f294737 	.word	0x3f294737
    effc:	0043      	.short	0x0043
    effe:	21cd      	movs	r1, #205	; 0xcd
    f000:	e03c      	b.n	f07c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f002:	4604      	mov	r4, r0
    f004:	f7f8 f9de 	bl	73c4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f008:	b110      	cbz	r0, f010 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
    f00a:	f240 2175 	movw	r1, #629	; 0x275
    f00e:	e035      	b.n	f07c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f010:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    f014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f018:	38f8      	subs	r0, #248	; 0xf8
    f01a:	f7f4 b90f 	b.w	323c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f01e:	4605      	mov	r5, r0
    f020:	f7ff fbcf 	bl	e7c2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f024:	b9a8      	cbnz	r0, f052 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    f026:	4628      	mov	r0, r5
    f028:	f7ff fe7b 	bl	ed22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f02c:	4604      	mov	r4, r0
    f02e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    f032:	42a0      	cmp	r0, r4
    f034:	d20b      	bcs.n	f04e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    f036:	1a20      	subs	r0, r4, r0
    f038:	2104      	movs	r1, #4
    f03a:	f7f3 f833 	bl	20a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f03e:	b130      	cbz	r0, f04e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    f040:	4628      	mov	r0, r5
    f042:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f04a:	f7ff bb8f 	b.w	e76c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f04e:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f052:	4628      	mov	r0, r5
    f054:	f7f8 f9d2 	bl	73fc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f058:	2800      	cmp	r0, #0
    f05a:	d014      	beq.n	f086 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
    f05c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    f060:	e00c      	b.n	f07c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f066:	f7fc be51 	b.w	bd0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f06e:	f7ff bdf4 	b.w	ec5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    f072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f076:	f7ff be4b 	b.w	ed10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f07a:	21ed      	movs	r1, #237	; 0xed
    f07c:	2030      	movs	r0, #48	; 0x30
    f07e:	f7f5 fce5 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f082:	21f1      	movs	r1, #241	; 0xf1
    f084:	e7fa      	b.n	f07c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f086:	bd70      	pop	{r4, r5, r6, pc}
    f088:	b510      	push	{r4, lr}
    f08a:	0004      	movs	r4, r0
    f08c:	d008      	beq.n	f0a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
    f08e:	2909      	cmp	r1, #9
    f090:	d25c      	bcs.n	f14c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
    f092:	e8df f001 	tbb	[pc, r1]
    f096:	3607      	.short	0x3607
    f098:	5b3a3e3e 	.word	0x5b3a3e3e
    f09c:	00574a43 	.word	0x00574a43
    f0a0:	2196      	movs	r1, #150	; 0x96
    f0a2:	e050      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    f0a4:	2100      	movs	r1, #0
    f0a6:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    f0aa:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    f0ae:	4620      	mov	r0, r4
    f0b0:	b189      	cbz	r1, f0d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
    f0b2:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    f0b6:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    f0ba:	428a      	cmp	r2, r1
    f0bc:	d106      	bne.n	f0cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
    f0be:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    f0c2:	1a51      	subs	r1, r2, r1
    f0c4:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f0c8:	4611      	mov	r1, r2
    f0ca:	e00d      	b.n	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    f0cc:	1a51      	subs	r1, r2, r1
    f0ce:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f0d2:	b291      	uxth	r1, r2
    f0d4:	e008      	b.n	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    f0d6:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    f0da:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    f0de:	1a89      	subs	r1, r1, r2
    f0e0:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f0e4:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    f0e8:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    f0ec:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    f0f0:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    f0f4:	f7f9 fd6c 	bl	8bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f0f8:	4620      	mov	r0, r4
    f0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0fe:	f7f9 bb55 	b.w	87ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    f102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f106:	f000 b905 	b.w	f314 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f10a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f10e:	f7fc bdfd 	b.w	bd0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f112:	4620      	mov	r0, r4
    f114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f118:	f000 b827 	b.w	f16a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
    f11c:	2001      	movs	r0, #1
    f11e:	f7f2 ffb1 	bl	2084 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f126:	f7fe bcbe 	b.w	daa6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f12a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    f12e:	2804      	cmp	r0, #4
    f130:	d001      	beq.n	f136 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f132:	21b8      	movs	r1, #184	; 0xb8
    f134:	e007      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    f136:	4620      	mov	r0, r4
    f138:	f7ff fef5 	bl	ef26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    f13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f140:	f7f7 be10 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f144:	21c1      	movs	r1, #193	; 0xc1
    f146:	2030      	movs	r0, #48	; 0x30
    f148:	f7f5 fc80 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f14c:	21c5      	movs	r1, #197	; 0xc5
    f14e:	e7fa      	b.n	f146 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    f150:	b510      	push	{r4, lr}
    f152:	f001 f99c 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f156:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f15a:	4408      	add	r0, r1
    f15c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f160:	fbb0 f0f1 	udiv	r0, r0, r1
    f164:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    f168:	bd10      	pop	{r4, pc}
    f16a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f16c:	4604      	mov	r4, r0
    f16e:	f7fd f958 	bl	c422 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    f172:	4601      	mov	r1, r0
    f174:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    f178:	f7f3 f898 	bl	22ac <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f17c:	68e1      	ldr	r1, [r4, #12]
    f17e:	b111      	cbz	r1, f186 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
    f180:	fbb0 f0f1 	udiv	r0, r0, r1
    f184:	e000      	b.n	f188 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
    f186:	2000      	movs	r0, #0
    f188:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    f18c:	290d      	cmp	r1, #13
    f18e:	d00c      	beq.n	f1aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
    f190:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    f194:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f198:	1813      	adds	r3, r2, r0
    f19a:	1acb      	subs	r3, r1, r3
    f19c:	b21b      	sxth	r3, r3
    f19e:	2b00      	cmp	r3, #0
    f1a0:	db06      	blt.n	f1b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
    f1a2:	1c49      	adds	r1, r1, #1
    f1a4:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    f1a8:	e006      	b.n	f1b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
    f1aa:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f1ae:	e012      	b.n	f1d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    f1b0:	1c40      	adds	r0, r0, #1
    f1b2:	4410      	add	r0, r2
    f1b4:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f1b8:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    f1bc:	f88d 0000 	strb.w	r0, [sp]
    f1c0:	9800      	ldr	r0, [sp, #0]
    f1c2:	9000      	str	r0, [sp, #0]
    f1c4:	f89d 0000 	ldrb.w	r0, [sp]
    f1c8:	b940      	cbnz	r0, f1dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    f1ca:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f1ce:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    f1d2:	4288      	cmp	r0, r1
    f1d4:	d102      	bne.n	f1dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    f1d6:	1c40      	adds	r0, r0, #1
    f1d8:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f1dc:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    f1e0:	1c40      	adds	r0, r0, #1
    f1e2:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    f1e6:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    f1ea:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    f1ee:	1a40      	subs	r0, r0, r1
    f1f0:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    f1f4:	1e40      	subs	r0, r0, #1
    f1f6:	4408      	add	r0, r1
    f1f8:	b285      	uxth	r5, r0
    f1fa:	e026      	b.n	f24a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    f1fc:	a801      	add	r0, sp, #4
    f1fe:	2300      	movs	r3, #0
    f200:	9000      	str	r0, [sp, #0]
    f202:	461a      	mov	r2, r3
    f204:	4620      	mov	r0, r4
    f206:	f7f9 f8bb 	bl	8380 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f20a:	2800      	cmp	r0, #0
    f20c:	d038      	beq.n	f280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
    f20e:	2801      	cmp	r0, #1
    f210:	d004      	beq.n	f21c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
    f212:	f240 614e 	movw	r1, #1614	; 0x64e
    f216:	2030      	movs	r0, #48	; 0x30
    f218:	f7f5 fc18 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f21c:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f220:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    f224:	1a42      	subs	r2, r0, r1
    f226:	b212      	sxth	r2, r2
    f228:	2a00      	cmp	r2, #0
    f22a:	da09      	bge.n	f240 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    f22c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f230:	4402      	add	r2, r0
    f232:	1aaa      	subs	r2, r5, r2
    f234:	b212      	sxth	r2, r2
    f236:	2a00      	cmp	r2, #0
    f238:	da02      	bge.n	f240 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    f23a:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    f23e:	e004      	b.n	f24a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    f240:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f244:	4408      	add	r0, r1
    f246:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f24a:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f24e:	1a68      	subs	r0, r5, r1
    f250:	b200      	sxth	r0, r0
    f252:	2800      	cmp	r0, #0
    f254:	dad2      	bge.n	f1fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
    f256:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    f25a:	b178      	cbz	r0, f27c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
    f25c:	2008      	movs	r0, #8
    f25e:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    f262:	2001      	movs	r0, #1
    f264:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    f268:	4620      	mov	r0, r4
    f26a:	f000 f855 	bl	f318 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f26e:	4620      	mov	r0, r4
    f270:	f7ff fe59 	bl	ef26 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    f274:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f278:	f7f7 bd74 	b.w	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f27c:	203e      	movs	r0, #62	; 0x3e
    f27e:	e7ee      	b.n	f25e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
    f280:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f282:	01f4      	.short	0x01f4
    f284:	009600fa 	.word	0x009600fa
    f288:	004b0064 	.word	0x004b0064
    f28c:	001e0032 	.word	0x001e0032
    f290:	000a0014 	.word	0x000a0014
    f294:	00020005 	.word	0x00020005
    f298:	0001      	.short	0x0001
    f29a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f29e:	f001 0307 	and.w	r3, r1, #7
    f2a2:	7802      	ldrb	r2, [r0, #0]
    f2a4:	2101      	movs	r1, #1
    f2a6:	4099      	lsls	r1, r3
    f2a8:	438a      	bics	r2, r1
    f2aa:	7002      	strb	r2, [r0, #0]
    f2ac:	4770      	bx	lr

0000f2ae <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f2ae:	b510      	push	{r4, lr}
    f2b0:	4604      	mov	r4, r0
    f2b2:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    f2b6:	68e1      	ldr	r1, [r4, #12]
    f2b8:	4288      	cmp	r0, r1
    f2ba:	d109      	bne.n	f2d0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f2bc:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    f2c0:	8aa2      	ldrh	r2, [r4, #20]
    f2c2:	4291      	cmp	r1, r2
    f2c4:	d104      	bne.n	f2d0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f2c6:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    f2ca:	8ae2      	ldrh	r2, [r4, #22]
    f2cc:	4291      	cmp	r1, r2
    f2ce:	d013      	beq.n	f2f8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    f2d0:	8821      	ldrh	r1, [r4, #0]
    f2d2:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    f2d6:	f7fe fc6d 	bl	dbb4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f2da:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    f2de:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    f2e2:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    f2e6:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    f2ea:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    f2ee:	2001      	movs	r0, #1
    f2f0:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    f2f4:	f7f7 fd36 	bl	6d64 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f2f8:	2102      	movs	r1, #2
    f2fa:	4620      	mov	r0, r4
    f2fc:	f7f7 fae4 	bl	68c8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f300:	2000      	movs	r0, #0
    f302:	f804 0f7e 	strb.w	r0, [r4, #126]!
    f306:	2003      	movs	r0, #3
    f308:	70e0      	strb	r0, [r4, #3]
    f30a:	bd10      	pop	{r4, pc}

0000f30c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f30c:	f7f5 bf44 	b.w	5198 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f310 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f310:	2000      	movs	r0, #0
    f312:	4770      	bx	lr

0000f314 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f314:	f7f6 bc78 	b.w	5c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f318 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f318:	2100      	movs	r1, #0
    f31a:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    f31e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    f322:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    f326:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    f32a:	b109      	cbz	r1, f330 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f32c:	2102      	movs	r1, #2
    f32e:	e000      	b.n	f332 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f330:	2103      	movs	r1, #3
    f332:	f7f8 bef5 	b.w	8120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f336:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    f33a:	28fe      	cmp	r0, #254	; 0xfe
    f33c:	d001      	beq.n	f342 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f33e:	2001      	movs	r0, #1
    f340:	4770      	bx	lr
    f342:	2000      	movs	r0, #0
    f344:	4770      	bx	lr
    f346:	b510      	push	{r4, lr}
    f348:	2801      	cmp	r0, #1
    f34a:	d006      	beq.n	f35a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f34c:	2802      	cmp	r0, #2
    f34e:	d004      	beq.n	f35a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f350:	f240 2163 	movw	r1, #611	; 0x263
    f354:	2006      	movs	r0, #6
    f356:	f7f5 fb79 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f35a:	bd10      	pop	{r4, pc}
    f35c:	2801      	cmp	r0, #1
    f35e:	d002      	beq.n	f366 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f360:	2802      	cmp	r0, #2
    f362:	d105      	bne.n	f370 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f364:	e002      	b.n	f36c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f366:	2901      	cmp	r1, #1
    f368:	d004      	beq.n	f374 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f36a:	e001      	b.n	f370 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f36c:	2902      	cmp	r1, #2
    f36e:	d001      	beq.n	f374 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f370:	2000      	movs	r0, #0
    f372:	4770      	bx	lr
    f374:	2001      	movs	r0, #1
    f376:	4770      	bx	lr
    f378:	1a40      	subs	r0, r0, r1
    f37a:	b200      	sxth	r0, r0
    f37c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f380:	4288      	cmp	r0, r1
    f382:	dc01      	bgt.n	f388 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f384:	2800      	cmp	r0, #0
    f386:	dc01      	bgt.n	f38c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f388:	2001      	movs	r0, #1
    f38a:	4770      	bx	lr
    f38c:	2000      	movs	r0, #0
    f38e:	4770      	bx	lr
    f390:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f394:	f001 0107 	and.w	r1, r1, #7
    f398:	7800      	ldrb	r0, [r0, #0]
    f39a:	2201      	movs	r2, #1
    f39c:	408a      	lsls	r2, r1
    f39e:	4010      	ands	r0, r2
    f3a0:	40c8      	lsrs	r0, r1
    f3a2:	4770      	bx	lr
    f3a4:	b118      	cbz	r0, f3ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f3a6:	2802      	cmp	r0, #2
    f3a8:	d001      	beq.n	f3ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f3aa:	2001      	movs	r0, #1
    f3ac:	4770      	bx	lr
    f3ae:	2000      	movs	r0, #0
    f3b0:	4770      	bx	lr

0000f3b2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f3b2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f3b4:	7881      	ldrb	r1, [r0, #2]
    f3b6:	4604      	mov	r4, r0
    f3b8:	291a      	cmp	r1, #26
    f3ba:	d025      	beq.n	f408 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f3bc:	dc0e      	bgt.n	f3dc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f3be:	2916      	cmp	r1, #22
    f3c0:	d22d      	bcs.n	f41e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f3c2:	e8df f001 	tbb	[pc, r1]
    f3c6:	2c2c      	.short	0x2c2c
    f3c8:	212c2c2c 	.word	0x212c2c2c
    f3cc:	2c2c2c2c 	.word	0x2c2c2c2c
    f3d0:	2c2c2c2c 	.word	0x2c2c2c2c
    f3d4:	2c2c2c2c 	.word	0x2c2c2c2c
    f3d8:	2121212c 	.word	0x2121212c
    f3dc:	292a      	cmp	r1, #42	; 0x2a
    f3de:	d01e      	beq.n	f41e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f3e0:	dc0b      	bgt.n	f3fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f3e2:	f1a1 011e 	sub.w	r1, r1, #30
    f3e6:	290c      	cmp	r1, #12
    f3e8:	d219      	bcs.n	f41e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f3ea:	e8df f001 	tbb	[pc, r1]
    f3ee:	1818      	.short	0x1818
    f3f0:	18181818 	.word	0x18181818
    f3f4:	18181818 	.word	0x18181818
    f3f8:	0d18      	.short	0x0d18
    f3fa:	393a      	subs	r1, #58	; 0x3a
    f3fc:	2904      	cmp	r1, #4
    f3fe:	d20e      	bcs.n	f41e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f400:	e8df f001 	tbb	[pc, r1]
    f404:	020d020d 	.word	0x020d020d
    f408:	8820      	ldrh	r0, [r4, #0]
    f40a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f40e:	d206      	bcs.n	f41e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f410:	2701      	movs	r7, #1
    f412:	4669      	mov	r1, sp
    f414:	f7fe fbbd 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f418:	b118      	cbz	r0, f422 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f41a:	2002      	movs	r0, #2
    f41c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f41e:	2012      	movs	r0, #18
    f420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f422:	9d01      	ldr	r5, [sp, #4]
    f424:	4668      	mov	r0, sp
    f426:	462e      	mov	r6, r5
    f428:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    f42c:	f206 1679 	addw	r6, r6, #377	; 0x179
    f430:	f000 fe8d 	bl	1014e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    f434:	b138      	cbz	r0, f446 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f436:	7828      	ldrb	r0, [r5, #0]
    f438:	f88d 0008 	strb.w	r0, [sp, #8]
    f43c:	9802      	ldr	r0, [sp, #8]
    f43e:	9002      	str	r0, [sp, #8]
    f440:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f444:	b108      	cbz	r0, f44a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f446:	200c      	movs	r0, #12
    f448:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f44a:	702f      	strb	r7, [r5, #0]
    f44c:	78a0      	ldrb	r0, [r4, #2]
    f44e:	7030      	strb	r0, [r6, #0]
    f450:	4668      	mov	r0, sp
    f452:	f7fe ff36 	bl	e2c2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f456:	2000      	movs	r0, #0
    f458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f45a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f45a:	b510      	push	{r4, lr}
    f45c:	4604      	mov	r4, r0
    f45e:	7800      	ldrb	r0, [r0, #0]
    f460:	b118      	cbz	r0, f46a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f462:	2801      	cmp	r0, #1
    f464:	d001      	beq.n	f46a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f466:	2012      	movs	r0, #18
    f468:	bd10      	pop	{r4, pc}
    f46a:	f000 fe9e 	bl	101aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f46e:	b120      	cbz	r0, f47a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f470:	f7f7 f81c 	bl	64ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f474:	b108      	cbz	r0, f47a <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f476:	200c      	movs	r0, #12
    f478:	bd10      	pop	{r4, pc}
    f47a:	7820      	ldrb	r0, [r4, #0]
    f47c:	f7ff ff92 	bl	f3a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f480:	1de2      	adds	r2, r4, #7
    f482:	f104 0317 	add.w	r3, r4, #23
    f486:	1c61      	adds	r1, r4, #1
    f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f48c:	f7f7 b840 	b.w	6510 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f490 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f490:	b510      	push	{r4, lr}
    f492:	4604      	mov	r4, r0
    f494:	f000 fef2 	bl	1027c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f498:	b108      	cbz	r0, f49e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f49a:	200c      	movs	r0, #12
    f49c:	bd10      	pop	{r4, pc}
    f49e:	7820      	ldrb	r0, [r4, #0]
    f4a0:	b118      	cbz	r0, f4aa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f4a2:	2801      	cmp	r0, #1
    f4a4:	d001      	beq.n	f4aa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f4a6:	2012      	movs	r0, #18
    f4a8:	bd10      	pop	{r4, pc}
    f4aa:	f7ff ff7b 	bl	f3a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f4ae:	1c61      	adds	r1, r4, #1
    f4b0:	f7f7 f8a6 	bl	6600 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f4b4:	b108      	cbz	r0, f4ba <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f4b6:	2000      	movs	r0, #0
    f4b8:	bd10      	pop	{r4, pc}
    f4ba:	2007      	movs	r0, #7
    f4bc:	bd10      	pop	{r4, pc}

0000f4be <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f4be:	b510      	push	{r4, lr}
    f4c0:	f000 fe73 	bl	101aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f4c4:	b120      	cbz	r0, f4d0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f4c6:	f7f6 fff1 	bl	64ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f4ca:	b108      	cbz	r0, f4d0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f4cc:	200c      	movs	r0, #12
    f4ce:	bd10      	pop	{r4, pc}
    f4d0:	f7f7 f864 	bl	659c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f4d4:	2000      	movs	r0, #0
    f4d6:	bd10      	pop	{r4, pc}

0000f4d8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f4d8:	b510      	push	{r4, lr}
    f4da:	f000 fecf 	bl	1027c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f4de:	b108      	cbz	r0, f4e4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f4e0:	200c      	movs	r0, #12
    f4e2:	bd10      	pop	{r4, pc}
    f4e4:	f7f7 f8b4 	bl	6650 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f4e8:	2000      	movs	r0, #0
    f4ea:	bd10      	pop	{r4, pc}

0000f4ec <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f4ec:	b510      	push	{r4, lr}
    f4ee:	460b      	mov	r3, r1
    f4f0:	2201      	movs	r2, #1
    f4f2:	f100 0110 	add.w	r1, r0, #16
    f4f6:	f7fe fb2e 	bl	db56 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f4fa:	2000      	movs	r0, #0
    f4fc:	bd10      	pop	{r4, pc}

0000f4fe <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f4fe:	b510      	push	{r4, lr}
    f500:	8800      	ldrh	r0, [r0, #0]
    f502:	2100      	movs	r1, #0
    f504:	f7fe f8fd 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f508:	b118      	cbz	r0, f512 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f50a:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    f50e:	b111      	cbz	r1, f516 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f510:	e007      	b.n	f522 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f512:	2002      	movs	r0, #2
    f514:	bd10      	pop	{r4, pc}
    f516:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f51a:	2914      	cmp	r1, #20
    f51c:	d003      	beq.n	f526 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f51e:	2915      	cmp	r1, #21
    f520:	d001      	beq.n	f526 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f522:	200c      	movs	r0, #12
    f524:	bd10      	pop	{r4, pc}
    f526:	2102      	movs	r1, #2
    f528:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    f52c:	2000      	movs	r0, #0
    f52e:	bd10      	pop	{r4, pc}

0000f530 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f530:	b538      	push	{r3, r4, r5, lr}
    f532:	4605      	mov	r5, r0
    f534:	8800      	ldrh	r0, [r0, #0]
    f536:	2100      	movs	r1, #0
    f538:	f7fe f8e3 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f53c:	0004      	movs	r4, r0
    f53e:	d003      	beq.n	f548 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f540:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    f544:	b110      	cbz	r0, f54c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f546:	e010      	b.n	f56a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f548:	2002      	movs	r0, #2
    f54a:	bd38      	pop	{r3, r4, r5, pc}
    f54c:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    f550:	2814      	cmp	r0, #20
    f552:	d001      	beq.n	f558 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f554:	2815      	cmp	r0, #21
    f556:	d108      	bne.n	f56a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f558:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    f55c:	f88d 0000 	strb.w	r0, [sp]
    f560:	9800      	ldr	r0, [sp, #0]
    f562:	9000      	str	r0, [sp, #0]
    f564:	f89d 0000 	ldrb.w	r0, [sp]
    f568:	b108      	cbz	r0, f56e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    f56a:	200c      	movs	r0, #12
    f56c:	bd38      	pop	{r3, r4, r5, pc}
    f56e:	2210      	movs	r2, #16
    f570:	1ca9      	adds	r1, r5, #2
    f572:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    f576:	f7fd f8c9 	bl	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f57a:	2001      	movs	r0, #1
    f57c:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    f580:	2000      	movs	r0, #0
    f582:	bd38      	pop	{r3, r4, r5, pc}

0000f584 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f584:	b510      	push	{r4, lr}
    f586:	2108      	movs	r1, #8
    f588:	f7f5 fafa 	bl	4b80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f58c:	2000      	movs	r0, #0
    f58e:	bd10      	pop	{r4, pc}

0000f590 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f590:	b510      	push	{r4, lr}
    f592:	4604      	mov	r4, r0
    f594:	f000 fdf2 	bl	1017c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f598:	f7ff f91d 	bl	e7d6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f59c:	7020      	strb	r0, [r4, #0]
    f59e:	2000      	movs	r0, #0
    f5a0:	bd10      	pop	{r4, pc}

0000f5a2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f5a2:	b510      	push	{r4, lr}
    f5a4:	4604      	mov	r4, r0
    f5a6:	f000 fdcc 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f5aa:	b140      	cbz	r0, f5be <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f5ac:	20fb      	movs	r0, #251	; 0xfb
    f5ae:	8020      	strh	r0, [r4, #0]
    f5b0:	f640 0148 	movw	r1, #2120	; 0x848
    f5b4:	8061      	strh	r1, [r4, #2]
    f5b6:	80a0      	strh	r0, [r4, #4]
    f5b8:	80e1      	strh	r1, [r4, #6]
    f5ba:	2000      	movs	r0, #0
    f5bc:	bd10      	pop	{r4, pc}
    f5be:	2001      	movs	r0, #1
    f5c0:	bd10      	pop	{r4, pc}

0000f5c2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    f5c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f5c4:	460d      	mov	r5, r1
    f5c6:	4606      	mov	r6, r0
    f5c8:	f7fb fd78 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f5cc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f5d0:	b300      	cbz	r0, f614 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    f5d2:	8830      	ldrh	r0, [r6, #0]
    f5d4:	4669      	mov	r1, sp
    f5d6:	f7fe fadc 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f5da:	2800      	cmp	r0, #0
    f5dc:	d119      	bne.n	f612 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    f5de:	9c01      	ldr	r4, [sp, #4]
    f5e0:	2700      	movs	r7, #0
    f5e2:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    f5e6:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    f5ea:	f000 fc46 	bl	fe7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f5ee:	70a8      	strb	r0, [r5, #2]
    f5f0:	7860      	ldrb	r0, [r4, #1]
    f5f2:	f000 fc42 	bl	fe7a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f5f6:	70e8      	strb	r0, [r5, #3]
    f5f8:	78a0      	ldrb	r0, [r4, #2]
    f5fa:	f88d 0008 	strb.w	r0, [sp, #8]
    f5fe:	9802      	ldr	r0, [sp, #8]
    f600:	9002      	str	r0, [sp, #8]
    f602:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f606:	3c6a      	subs	r4, #106	; 0x6a
    f608:	2800      	cmp	r0, #0
    f60a:	d1ea      	bne.n	f5e2 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    f60c:	8830      	ldrh	r0, [r6, #0]
    f60e:	8028      	strh	r0, [r5, #0]
    f610:	2000      	movs	r0, #0
    f612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f614:	2001      	movs	r0, #1
    f616:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f618 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f618:	2108      	movs	r1, #8
    f61a:	7001      	strb	r1, [r0, #0]
    f61c:	2000      	movs	r0, #0
    f61e:	4770      	bx	lr

0000f620 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f620:	b510      	push	{r4, lr}
    f622:	4604      	mov	r4, r0
    f624:	20d8      	movs	r0, #216	; 0xd8
    f626:	7020      	strb	r0, [r4, #0]
    f628:	f000 fd6c 	bl	10104 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f62c:	7060      	strb	r0, [r4, #1]
    f62e:	2000      	movs	r0, #0
    f630:	bd10      	pop	{r4, pc}

0000f632 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f632:	2108      	movs	r1, #8
    f634:	7001      	strb	r1, [r0, #0]
    f636:	2000      	movs	r0, #0
    f638:	4770      	bx	lr

0000f63a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f63a:	b510      	push	{r4, lr}
    f63c:	4604      	mov	r4, r0
    f63e:	7800      	ldrb	r0, [r0, #0]
    f640:	b108      	cbz	r0, f646 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f642:	2801      	cmp	r0, #1
    f644:	d110      	bne.n	f668 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f646:	f000 fdb0 	bl	101aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f64a:	b120      	cbz	r0, f656 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f64c:	f7f6 ff2e 	bl	64ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f650:	b108      	cbz	r0, f656 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f652:	200c      	movs	r0, #12
    f654:	bd10      	pop	{r4, pc}
    f656:	7820      	ldrb	r0, [r4, #0]
    f658:	f7ff fea4 	bl	f3a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f65c:	1c61      	adds	r1, r4, #1
    f65e:	f7fe fa60 	bl	db22 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f662:	b108      	cbz	r0, f668 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f664:	2000      	movs	r0, #0
    f666:	bd10      	pop	{r4, pc}
    f668:	2012      	movs	r0, #18
    f66a:	bd10      	pop	{r4, pc}

0000f66c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f66c:	b510      	push	{r4, lr}
    f66e:	4604      	mov	r4, r0
    f670:	f000 fe04 	bl	1027c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f674:	b108      	cbz	r0, f67a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f676:	200c      	movs	r0, #12
    f678:	bd10      	pop	{r4, pc}
    f67a:	7820      	ldrb	r0, [r4, #0]
    f67c:	b108      	cbz	r0, f682 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f67e:	2801      	cmp	r0, #1
    f680:	d107      	bne.n	f692 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f682:	f7ff fe8f 	bl	f3a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f686:	1c61      	adds	r1, r4, #1
    f688:	f7fe fa5a 	bl	db40 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f68c:	b108      	cbz	r0, f692 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f68e:	2000      	movs	r0, #0
    f690:	bd10      	pop	{r4, pc}
    f692:	2012      	movs	r0, #18
    f694:	bd10      	pop	{r4, pc}

0000f696 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f696:	b510      	push	{r4, lr}
    f698:	4604      	mov	r4, r0
    f69a:	f000 fd86 	bl	101aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f69e:	b108      	cbz	r0, f6a4 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f6a0:	200c      	movs	r0, #12
    f6a2:	bd10      	pop	{r4, pc}
    f6a4:	7820      	ldrb	r0, [r4, #0]
    f6a6:	f000 0001 	and.w	r0, r0, #1
    f6aa:	f7f6 fef9 	bl	64a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f6ae:	2000      	movs	r0, #0
    f6b0:	bd10      	pop	{r4, pc}

0000f6b2 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f6b2:	b51c      	push	{r2, r3, r4, lr}
    f6b4:	4604      	mov	r4, r0
    f6b6:	f000 fd61 	bl	1017c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f6ba:	2000      	movs	r0, #0
    f6bc:	f88d 0002 	strb.w	r0, [sp, #2]
    f6c0:	2103      	movs	r1, #3
    f6c2:	f88d 1001 	strb.w	r1, [sp, #1]
    f6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
    f6ca:	f88d 1003 	strb.w	r1, [sp, #3]
    f6ce:	f88d 0000 	strb.w	r0, [sp]
    f6d2:	4668      	mov	r0, sp
    f6d4:	9401      	str	r4, [sp, #4]
    f6d6:	f000 f9f8 	bl	faca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f6da:	bd1c      	pop	{r2, r3, r4, pc}

0000f6dc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f6dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f6de:	4605      	mov	r5, r0
    f6e0:	f000 fd4c 	bl	1017c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f6e4:	4606      	mov	r6, r0
    f6e6:	7828      	ldrb	r0, [r5, #0]
    f6e8:	2400      	movs	r4, #0
    f6ea:	b160      	cbz	r0, f706 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f6ec:	f88d 4000 	strb.w	r4, [sp]
    f6f0:	2001      	movs	r0, #1
    f6f2:	f10d 0101 	add.w	r1, sp, #1
    f6f6:	f7f6 f8a7 	bl	5848 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f6fa:	b120      	cbz	r0, f706 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f6fc:	4668      	mov	r0, sp
    f6fe:	f000 f897 	bl	f830 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f702:	2800      	cmp	r0, #0
    f704:	d112      	bne.n	f72c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f706:	f88d 400c 	strb.w	r4, [sp, #12]
    f70a:	4630      	mov	r0, r6
    f70c:	f7ff f859 	bl	e7c2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f710:	b118      	cbz	r0, f71a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f712:	2080      	movs	r0, #128	; 0x80
    f714:	f8ad 000d 	strh.w	r0, [sp, #13]
    f718:	e001      	b.n	f71e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f71a:	f8ad 400d 	strh.w	r4, [sp, #13]
    f71e:	f88d 400f 	strb.w	r4, [sp, #15]
    f722:	7828      	ldrb	r0, [r5, #0]
    f724:	2801      	cmp	r0, #1
    f726:	d003      	beq.n	f730 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f728:	b138      	cbz	r0, f73a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f72a:	2012      	movs	r0, #18
    f72c:	b004      	add	sp, #16
    f72e:	bd70      	pop	{r4, r5, r6, pc}
    f730:	a903      	add	r1, sp, #12
    f732:	4630      	mov	r0, r6
    f734:	f7fb fac2 	bl	acbc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f738:	e7f8      	b.n	f72c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f73a:	4630      	mov	r0, r6
    f73c:	f000 fd3c 	bl	101b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    f740:	e7f4      	b.n	f72c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f742 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f742:	b530      	push	{r4, r5, lr}
    f744:	b08b      	sub	sp, #44	; 0x2c
    f746:	4604      	mov	r4, r0
    f748:	f000 fd18 	bl	1017c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f74c:	4602      	mov	r2, r0
    f74e:	7920      	ldrb	r0, [r4, #4]
    f750:	2804      	cmp	r0, #4
    f752:	d803      	bhi.n	f75c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f754:	8860      	ldrh	r0, [r4, #2]
    f756:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f75a:	d902      	bls.n	f762 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f75c:	2012      	movs	r0, #18
    f75e:	b00b      	add	sp, #44	; 0x2c
    f760:	bd30      	pop	{r4, r5, pc}
    f762:	2500      	movs	r5, #0
    f764:	f88d 5004 	strb.w	r5, [sp, #4]
    f768:	7921      	ldrb	r1, [r4, #4]
    f76a:	9500      	str	r5, [sp, #0]
    f76c:	f89d 0000 	ldrb.w	r0, [sp]
    f770:	2905      	cmp	r1, #5
    f772:	f040 0010 	orr.w	r0, r0, #16
    f776:	f88d 0000 	strb.w	r0, [sp]
    f77a:	d254      	bcs.n	f826 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f77c:	e8df f001 	tbb	[pc, r1]
    f780:	11050803 	.word	0x11050803
    f784:	000b      	.short	0x000b
    f786:	f040 0001 	orr.w	r0, r0, #1
    f78a:	f040 0002 	orr.w	r0, r0, #2
    f78e:	e006      	b.n	f79e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f790:	f040 0009 	orr.w	r0, r0, #9
    f794:	e001      	b.n	f79a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f796:	f040 0001 	orr.w	r0, r0, #1
    f79a:	f040 0004 	orr.w	r0, r0, #4
    f79e:	f88d 0000 	strb.w	r0, [sp]
    f7a2:	f8bd 0000 	ldrh.w	r0, [sp]
    f7a6:	9000      	str	r0, [sp, #0]
    f7a8:	f8bd 0000 	ldrh.w	r0, [sp]
    f7ac:	f8ad 0005 	strh.w	r0, [sp, #5]
    f7b0:	8821      	ldrh	r1, [r4, #0]
    f7b2:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f7b6:	f361 201f 	bfi	r0, r1, #8, #24
    f7ba:	f8cd 0006 	str.w	r0, [sp, #6]
    f7be:	8861      	ldrh	r1, [r4, #2]
    f7c0:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f7c4:	f361 201f 	bfi	r0, r1, #8, #24
    f7c8:	f8cd 0009 	str.w	r0, [sp, #9]
    f7cc:	7b60      	ldrb	r0, [r4, #13]
    f7ce:	f88d 000d 	strb.w	r0, [sp, #13]
    f7d2:	7960      	ldrb	r0, [r4, #5]
    f7d4:	f88d 000e 	strb.w	r0, [sp, #14]
    f7d8:	79a0      	ldrb	r0, [r4, #6]
    f7da:	f88d 000f 	strb.w	r0, [sp, #15]
    f7de:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f7e2:	9004      	str	r0, [sp, #16]
    f7e4:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f7e8:	f8ad 0014 	strh.w	r0, [sp, #20]
    f7ec:	7ba0      	ldrb	r0, [r4, #14]
    f7ee:	f88d 0016 	strb.w	r0, [sp, #22]
    f7f2:	207f      	movs	r0, #127	; 0x7f
    f7f4:	f88d 0017 	strb.w	r0, [sp, #23]
    f7f8:	2001      	movs	r0, #1
    f7fa:	f88d 0018 	strb.w	r0, [sp, #24]
    f7fe:	f88d 5019 	strb.w	r5, [sp, #25]
    f802:	f88d 001a 	strb.w	r0, [sp, #26]
    f806:	f88d 501b 	strb.w	r5, [sp, #27]
    f80a:	4610      	mov	r0, r2
    f80c:	f7fe fff5 	bl	e7fa <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f810:	f88d 001c 	strb.w	r0, [sp, #28]
    f814:	f88d 501d 	strb.w	r5, [sp, #29]
    f818:	f88d 501e 	strb.w	r5, [sp, #30]
    f81c:	a909      	add	r1, sp, #36	; 0x24
    f81e:	a801      	add	r0, sp, #4
    f820:	f000 f8de 	bl	f9e0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f824:	e79b      	b.n	f75e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f826:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
    f82a:	2039      	movs	r0, #57	; 0x39
    f82c:	f7f5 f90e 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f830 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f830:	b570      	push	{r4, r5, r6, lr}
    f832:	4604      	mov	r4, r0
    f834:	7800      	ldrb	r0, [r0, #0]
    f836:	2101      	movs	r1, #1
    f838:	f7fd ff63 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f83c:	0005      	movs	r5, r0
    f83e:	d007      	beq.n	f850 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f840:	f7ff f994 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f844:	b160      	cbz	r0, f860 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f846:	4628      	mov	r0, r5
    f848:	f7fe ffc1 	bl	e7ce <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f84c:	b110      	cbz	r0, f854 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f84e:	e005      	b.n	f85c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f850:	2042      	movs	r0, #66	; 0x42
    f852:	bd70      	pop	{r4, r5, r6, pc}
    f854:	4628      	mov	r0, r5
    f856:	f7fe ffb0 	bl	e7ba <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f85a:	b108      	cbz	r0, f860 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f85c:	200c      	movs	r0, #12
    f85e:	bd70      	pop	{r4, r5, r6, pc}
    f860:	1c61      	adds	r1, r4, #1
    f862:	4628      	mov	r0, r5
    f864:	f7fe ffc1 	bl	e7ea <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f868:	2000      	movs	r0, #0
    f86a:	bd70      	pop	{r4, r5, r6, pc}

0000f86c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f86c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f86e:	460d      	mov	r5, r1
    f870:	4604      	mov	r4, r0
    f872:	f000 fc66 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f876:	b130      	cbz	r0, f886 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f878:	88a2      	ldrh	r2, [r4, #4]
    f87a:	f244 2090 	movw	r0, #17040	; 0x4290
    f87e:	4282      	cmp	r2, r0
    f880:	d903      	bls.n	f88a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f882:	2012      	movs	r0, #18
    f884:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f886:	2001      	movs	r0, #1
    f888:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f88a:	f640 0048 	movw	r0, #2120	; 0x848
    f88e:	4282      	cmp	r2, r0
    f890:	d300      	bcc.n	f894 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f892:	4602      	mov	r2, r0
    f894:	8820      	ldrh	r0, [r4, #0]
    f896:	f8ad 0000 	strh.w	r0, [sp]
    f89a:	8860      	ldrh	r0, [r4, #2]
    f89c:	f8ad 0002 	strh.w	r0, [sp, #2]
    f8a0:	f8ad 2004 	strh.w	r2, [sp, #4]
    f8a4:	8860      	ldrh	r0, [r4, #2]
    f8a6:	f8ad 0006 	strh.w	r0, [sp, #6]
    f8aa:	f8ad 2008 	strh.w	r2, [sp, #8]
    f8ae:	8820      	ldrh	r0, [r4, #0]
    f8b0:	8028      	strh	r0, [r5, #0]
    f8b2:	4668      	mov	r0, sp
    f8b4:	f7fb fad0 	bl	ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f8b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f8ba <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f8ba:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f8bc:	4604      	mov	r4, r0
    f8be:	f7fb fbfd 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f8c2:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f8c6:	b1b0      	cbz	r0, f8f6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f8c8:	f10d 0007 	add.w	r0, sp, #7
    f8cc:	9000      	str	r0, [sp, #0]
    f8ce:	7922      	ldrb	r2, [r4, #4]
    f8d0:	78e1      	ldrb	r1, [r4, #3]
    f8d2:	78a0      	ldrb	r0, [r4, #2]
    f8d4:	f10d 0306 	add.w	r3, sp, #6
    f8d8:	f000 fc94 	bl	10204 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    f8dc:	2800      	cmp	r0, #0
    f8de:	d109      	bne.n	f8f4 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f8e0:	8820      	ldrh	r0, [r4, #0]
    f8e2:	f8ad 0004 	strh.w	r0, [sp, #4]
    f8e6:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f8ea:	f8ad 0008 	strh.w	r0, [sp, #8]
    f8ee:	a801      	add	r0, sp, #4
    f8f0:	f000 f9a6 	bl	fc40 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f8f4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f8f6:	2001      	movs	r0, #1
    f8f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f8fa <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f8fa:	b510      	push	{r4, lr}
    f8fc:	4604      	mov	r4, r0
    f8fe:	f000 fc54 	bl	101aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f902:	b120      	cbz	r0, f90e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f904:	f7f6 fdd2 	bl	64ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f908:	b108      	cbz	r0, f90e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f90a:	200c      	movs	r0, #12
    f90c:	bd10      	pop	{r4, pc}
    f90e:	7820      	ldrb	r0, [r4, #0]
    f910:	f7ff fd48 	bl	f3a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f914:	79e2      	ldrb	r2, [r4, #7]
    f916:	1c61      	adds	r1, r4, #1
    f918:	f7f6 fd76 	bl	6408 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f91c:	b108      	cbz	r0, f922 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f91e:	2000      	movs	r0, #0
    f920:	bd10      	pop	{r4, pc}
    f922:	2002      	movs	r0, #2
    f924:	bd10      	pop	{r4, pc}

0000f926 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f926:	b510      	push	{r4, lr}
    f928:	4604      	mov	r4, r0
    f92a:	2001      	movs	r0, #1
    f92c:	f000 fac8 	bl	fec0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f930:	b128      	cbz	r0, f93e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f932:	4621      	mov	r1, r4
    f934:	2001      	movs	r0, #1
    f936:	f7f5 ff9f 	bl	5878 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f93a:	2000      	movs	r0, #0
    f93c:	bd10      	pop	{r4, pc}
    f93e:	200c      	movs	r0, #12
    f940:	bd10      	pop	{r4, pc}

0000f942 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f942:	b510      	push	{r4, lr}
    f944:	8800      	ldrh	r0, [r0, #0]
    f946:	f7f6 fe3f 	bl	65c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f94a:	b108      	cbz	r0, f950 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f94c:	2000      	movs	r0, #0
    f94e:	bd10      	pop	{r4, pc}
    f950:	2030      	movs	r0, #48	; 0x30
    f952:	bd10      	pop	{r4, pc}

0000f954 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f954:	b51c      	push	{r2, r3, r4, lr}
    f956:	4604      	mov	r4, r0
    f958:	f000 fc10 	bl	1017c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f95c:	2000      	movs	r0, #0
    f95e:	f88d 0000 	strb.w	r0, [sp]
    f962:	f88d 0002 	strb.w	r0, [sp, #2]
    f966:	2003      	movs	r0, #3
    f968:	f88d 0001 	strb.w	r0, [sp, #1]
    f96c:	f814 0b01 	ldrb.w	r0, [r4], #1
    f970:	f88d 0003 	strb.w	r0, [sp, #3]
    f974:	4668      	mov	r0, sp
    f976:	9401      	str	r4, [sp, #4]
    f978:	f000 f910 	bl	fb9c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f97c:	bd1c      	pop	{r2, r3, r4, pc}

0000f97e <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f97e:	b51c      	push	{r2, r3, r4, lr}
    f980:	4604      	mov	r4, r0
    f982:	f000 fbde 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f986:	b178      	cbz	r0, f9a8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f988:	8820      	ldrh	r0, [r4, #0]
    f98a:	f8ad 0000 	strh.w	r0, [sp]
    f98e:	8860      	ldrh	r0, [r4, #2]
    f990:	f8ad 0002 	strh.w	r0, [sp, #2]
    f994:	8820      	ldrh	r0, [r4, #0]
    f996:	f8ad 0004 	strh.w	r0, [sp, #4]
    f99a:	8860      	ldrh	r0, [r4, #2]
    f99c:	f8ad 0006 	strh.w	r0, [sp, #6]
    f9a0:	4668      	mov	r0, sp
    f9a2:	f7fb fadd 	bl	af60 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f9a6:	bd1c      	pop	{r2, r3, r4, pc}
    f9a8:	2001      	movs	r0, #1
    f9aa:	bd1c      	pop	{r2, r3, r4, pc}

0000f9ac <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f9ac:	b510      	push	{r4, lr}
    f9ae:	f7f5 ff87 	bl	58c0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f9b2:	2000      	movs	r0, #0
    f9b4:	bd10      	pop	{r4, pc}

0000f9b6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f9b6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f9b8:	460c      	mov	r4, r1
    f9ba:	4605      	mov	r5, r0
    f9bc:	f000 fbc1 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f9c0:	b160      	cbz	r0, f9dc <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f9c2:	4669      	mov	r1, sp
    f9c4:	4628      	mov	r0, r5
    f9c6:	f7fe f8e4 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d105      	bne.n	f9da <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f9ce:	2100      	movs	r1, #0
    f9d0:	4622      	mov	r2, r4
    f9d2:	9801      	ldr	r0, [sp, #4]
    f9d4:	f000 fb40 	bl	10058 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    f9d8:	2000      	movs	r0, #0
    f9da:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f9dc:	2001      	movs	r0, #1
    f9de:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f9e0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f9e0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f9e4:	460f      	mov	r7, r1
    f9e6:	4605      	mov	r5, r0
    f9e8:	7806      	ldrb	r6, [r0, #0]
    f9ea:	f000 fac5 	bl	ff78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    f9ee:	2800      	cmp	r0, #0
    f9f0:	d10a      	bne.n	fa08 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f9f2:	4628      	mov	r0, r5
    f9f4:	f000 fa9a 	bl	ff2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d105      	bne.n	fa08 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f9fc:	2001      	movs	r0, #1
    f9fe:	f7f5 fa0f 	bl	4e20 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    fa02:	4286      	cmp	r6, r0
    fa04:	d302      	bcc.n	fa0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    fa06:	2007      	movs	r0, #7
    fa08:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fa0c:	2101      	movs	r1, #1
    fa0e:	4630      	mov	r0, r6
    fa10:	f7fd fe77 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa14:	0004      	movs	r4, r0
    fa16:	d004      	beq.n	fa22 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    fa18:	f7ff f8a8 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fa1c:	b150      	cbz	r0, fa34 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    fa1e:	200c      	movs	r0, #12
    fa20:	e7f2      	b.n	fa08 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fa22:	2200      	movs	r2, #0
    fa24:	2101      	movs	r1, #1
    fa26:	4630      	mov	r0, r6
    fa28:	f7fd fe61 	bl	d6ee <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    fa2c:	0004      	movs	r4, r0
    fa2e:	d00f      	beq.n	fa50 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    fa30:	f7fe fe68 	bl	e704 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    fa34:	4620      	mov	r0, r4
    fa36:	f7fe fece 	bl	e7d6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fa3a:	7038      	strb	r0, [r7, #0]
    fa3c:	74e8      	strb	r0, [r5, #19]
    fa3e:	4629      	mov	r1, r5
    fa40:	4620      	mov	r0, r4
    fa42:	f7f7 fbf7 	bl	7234 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    fa46:	4606      	mov	r6, r0
    fa48:	7e68      	ldrb	r0, [r5, #25]
    fa4a:	b1d0      	cbz	r0, fa82 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    fa4c:	b12e      	cbz	r6, fa5a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    fa4e:	e018      	b.n	fa82 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    fa50:	f241 212d 	movw	r1, #4653	; 0x122d
    fa54:	2039      	movs	r0, #57	; 0x39
    fa56:	f7f4 fff9 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa5a:	2200      	movs	r2, #0
    fa5c:	4668      	mov	r0, sp
    fa5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fa60:	f7fd ff10 	bl	d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa64:	2200      	movs	r2, #0
    fa66:	2101      	movs	r1, #1
    fa68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa6a:	f7fd ff80 	bl	d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa6e:	2204      	movs	r2, #4
    fa70:	4668      	mov	r0, sp
    fa72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fa74:	f7fd ff06 	bl	d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fa78:	2200      	movs	r2, #0
    fa7a:	4611      	mov	r1, r2
    fa7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fa7e:	f7fd ff76 	bl	d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fa82:	4630      	mov	r0, r6
    fa84:	e7c0      	b.n	fa08 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000fa86 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fa86:	b510      	push	{r4, lr}
    fa88:	4604      	mov	r4, r0
    fa8a:	2000      	movs	r0, #0
    fa8c:	f000 fa18 	bl	fec0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    fa90:	b128      	cbz	r0, fa9e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fa92:	4621      	mov	r1, r4
    fa94:	2000      	movs	r0, #0
    fa96:	f7f5 feef 	bl	5878 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa9a:	2000      	movs	r0, #0
    fa9c:	bd10      	pop	{r4, pc}
    fa9e:	200c      	movs	r0, #12
    faa0:	bd10      	pop	{r4, pc}

0000faa2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    faa2:	b510      	push	{r4, lr}
    faa4:	7800      	ldrb	r0, [r0, #0]
    faa6:	f000 0001 	and.w	r0, r0, #1
    faaa:	f7f8 faff 	bl	80ac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    faae:	2000      	movs	r0, #0
    fab0:	bd10      	pop	{r4, pc}

0000fab2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fab2:	b510      	push	{r4, lr}
    fab4:	4604      	mov	r4, r0
    fab6:	f000 fb44 	bl	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    faba:	b120      	cbz	r0, fac6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    fabc:	4620      	mov	r0, r4
    fabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fac2:	f7fb b9c9 	b.w	ae58 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    fac6:	2001      	movs	r0, #1
    fac8:	bd10      	pop	{r4, pc}

0000faca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    faca:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    face:	4606      	mov	r6, r0
    fad0:	7845      	ldrb	r5, [r0, #1]
    fad2:	7800      	ldrb	r0, [r0, #0]
    fad4:	2101      	movs	r1, #1
    fad6:	f7fd fe14 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fada:	0004      	movs	r4, r0
    fadc:	d01e      	beq.n	fb1c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fade:	f7fe fe3d 	bl	e75c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fae2:	78f1      	ldrb	r1, [r6, #3]
    fae4:	4281      	cmp	r1, r0
    fae6:	d800      	bhi.n	faea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fae8:	4608      	mov	r0, r1
    faea:	4607      	mov	r7, r0
    faec:	2d04      	cmp	r5, #4
    faee:	d018      	beq.n	fb22 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    faf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    faf2:	f7fd ff5f 	bl	d9b4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    faf6:	4438      	add	r0, r7
    faf8:	b281      	uxth	r1, r0
    fafa:	4620      	mov	r0, r4
    fafc:	2201      	movs	r2, #1
    fafe:	f000 f9f1 	bl	fee4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    fb02:	2800      	cmp	r0, #0
    fb04:	d10b      	bne.n	fb1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fb06:	2d03      	cmp	r5, #3
    fb08:	d000      	beq.n	fb0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fb0a:	b1df      	cbz	r7, fb44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fb0c:	4620      	mov	r0, r4
    fb0e:	f7fe fe5c 	bl	e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fb12:	7871      	ldrb	r1, [r6, #1]
    fb14:	2903      	cmp	r1, #3
    fb16:	d010      	beq.n	fb3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fb18:	b9a0      	cbnz	r0, fb44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fb1a:	e004      	b.n	fb26 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fb1c:	2042      	movs	r0, #66	; 0x42
    fb1e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb22:	b97f      	cbnz	r7, fb44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fb24:	e7f2      	b.n	fb0c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fb26:	2904      	cmp	r1, #4
    fb28:	d107      	bne.n	fb3a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fb2a:	4620      	mov	r0, r4
    fb2c:	f7ff f81e 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fb30:	b140      	cbz	r0, fb44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fb32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb34:	f7fd ff0d 	bl	d952 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fb38:	b120      	cbz	r0, fb44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fb3a:	2d01      	cmp	r5, #1
    fb3c:	d004      	beq.n	fb48 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fb3e:	2d03      	cmp	r5, #3
    fb40:	d002      	beq.n	fb48 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fb42:	e00e      	b.n	fb62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    fb44:	2012      	movs	r0, #18
    fb46:	e7ea      	b.n	fb1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fb48:	4620      	mov	r0, r4
    fb4a:	f7fe fe3e 	bl	e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fb4e:	b108      	cbz	r0, fb54 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    fb50:	2200      	movs	r2, #0
    fb52:	e002      	b.n	fb5a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fb54:	2d01      	cmp	r5, #1
    fb56:	d013      	beq.n	fb80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fb58:	2201      	movs	r2, #1
    fb5a:	4668      	mov	r0, sp
    fb5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fb5e:	f7fd fe91 	bl	d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fb62:	2d04      	cmp	r5, #4
    fb64:	d018      	beq.n	fb98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fb66:	6872      	ldr	r2, [r6, #4]
    fb68:	463b      	mov	r3, r7
    fb6a:	2101      	movs	r1, #1
    fb6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb6e:	f7fd febc 	bl	d8ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fb72:	b138      	cbz	r0, fb84 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    fb74:	7870      	ldrb	r0, [r6, #1]
    fb76:	2802      	cmp	r0, #2
    fb78:	d006      	beq.n	fb88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fb7a:	2803      	cmp	r0, #3
    fb7c:	d004      	beq.n	fb88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fb7e:	e00b      	b.n	fb98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fb80:	2202      	movs	r2, #2
    fb82:	e7ea      	b.n	fb5a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fb84:	2007      	movs	r0, #7
    fb86:	e7ca      	b.n	fb1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fb88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb8a:	f7fd ff13 	bl	d9b4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fb8e:	4602      	mov	r2, r0
    fb90:	2101      	movs	r1, #1
    fb92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb94:	f7fd feeb 	bl	d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fb98:	2000      	movs	r0, #0
    fb9a:	e7c0      	b.n	fb1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000fb9c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    fb9c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fba0:	4607      	mov	r7, r0
    fba2:	7845      	ldrb	r5, [r0, #1]
    fba4:	78c6      	ldrb	r6, [r0, #3]
    fba6:	7800      	ldrb	r0, [r0, #0]
    fba8:	2101      	movs	r1, #1
    fbaa:	f7fd fdaa 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fbae:	0004      	movs	r4, r0
    fbb0:	d003      	beq.n	fbba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    fbb2:	f7fe fe0c 	bl	e7ce <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fbb6:	b118      	cbz	r0, fbc0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    fbb8:	e003      	b.n	fbc2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    fbba:	2042      	movs	r0, #66	; 0x42
    fbbc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fbc0:	2600      	movs	r6, #0
    fbc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fbc4:	f7fd fefa 	bl	d9bc <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    fbc8:	4430      	add	r0, r6
    fbca:	b281      	uxth	r1, r0
    fbcc:	4688      	mov	r8, r1
    fbce:	4620      	mov	r0, r4
    fbd0:	2201      	movs	r2, #1
    fbd2:	f000 f987 	bl	fee4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    fbd6:	2800      	cmp	r0, #0
    fbd8:	d1f0      	bne.n	fbbc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fbda:	2d04      	cmp	r5, #4
    fbdc:	d008      	beq.n	fbf0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fbde:	2d03      	cmp	r5, #3
    fbe0:	d00a      	beq.n	fbf8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    fbe2:	b12e      	cbz	r6, fbf0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fbe4:	4620      	mov	r0, r4
    fbe6:	f7fe ffc1 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fbea:	b118      	cbz	r0, fbf4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    fbec:	200c      	movs	r0, #12
    fbee:	e7e5      	b.n	fbbc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fbf0:	2012      	movs	r0, #18
    fbf2:	e7e3      	b.n	fbbc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fbf4:	2d01      	cmp	r5, #1
    fbf6:	d10c      	bne.n	fc12 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    fbf8:	4620      	mov	r0, r4
    fbfa:	f7fe fde6 	bl	e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fbfe:	b108      	cbz	r0, fc04 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    fc00:	2204      	movs	r2, #4
    fc02:	e002      	b.n	fc0a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fc04:	2d01      	cmp	r5, #1
    fc06:	d010      	beq.n	fc2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    fc08:	2205      	movs	r2, #5
    fc0a:	4668      	mov	r0, sp
    fc0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fc0e:	f7fd fe39 	bl	d884 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fc12:	687a      	ldr	r2, [r7, #4]
    fc14:	4633      	mov	r3, r6
    fc16:	2100      	movs	r1, #0
    fc18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fc1a:	f7fd fe66 	bl	d8ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fc1e:	b130      	cbz	r0, fc2e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    fc20:	2d02      	cmp	r5, #2
    fc22:	d006      	beq.n	fc32 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fc24:	2d03      	cmp	r5, #3
    fc26:	d004      	beq.n	fc32 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fc28:	e008      	b.n	fc3c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    fc2a:	2206      	movs	r2, #6
    fc2c:	e7ed      	b.n	fc0a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fc2e:	2007      	movs	r0, #7
    fc30:	e7c4      	b.n	fbbc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fc32:	4642      	mov	r2, r8
    fc34:	2100      	movs	r1, #0
    fc36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fc38:	f7fd fe99 	bl	d96e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fc3c:	2000      	movs	r0, #0
    fc3e:	e7bd      	b.n	fbbc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000fc40 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fc40:	b510      	push	{r4, lr}
    fc42:	4604      	mov	r4, r0
    fc44:	8880      	ldrh	r0, [r0, #4]
    fc46:	b128      	cbz	r0, fc54 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fc48:	2801      	cmp	r0, #1
    fc4a:	d003      	beq.n	fc54 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fc4c:	2802      	cmp	r0, #2
    fc4e:	d001      	beq.n	fc54 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fc50:	2012      	movs	r0, #18
    fc52:	bd10      	pop	{r4, pc}
    fc54:	78e0      	ldrb	r0, [r4, #3]
    fc56:	f000 f9dc 	bl	10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fc5a:	b148      	cbz	r0, fc70 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fc5c:	78a0      	ldrb	r0, [r4, #2]
    fc5e:	f000 f9d8 	bl	10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fc62:	b128      	cbz	r0, fc70 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fc64:	4620      	mov	r0, r4
    fc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc6a:	2101      	movs	r1, #1
    fc6c:	f000 b884 	b.w	fd78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fc70:	2011      	movs	r0, #17
    fc72:	bd10      	pop	{r4, pc}

0000fc74 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fc74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fc76:	460c      	mov	r4, r1
    fc78:	4605      	mov	r5, r0
    fc7a:	8800      	ldrh	r0, [r0, #0]
    fc7c:	4669      	mov	r1, sp
    fc7e:	f7fd ff88 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc82:	2800      	cmp	r0, #0
    fc84:	d106      	bne.n	fc94 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fc86:	9801      	ldr	r0, [sp, #4]
    fc88:	8829      	ldrh	r1, [r5, #0]
    fc8a:	8021      	strh	r1, [r4, #0]
    fc8c:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    fc90:	8060      	strh	r0, [r4, #2]
    fc92:	2000      	movs	r0, #0
    fc94:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fc96 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fc96:	b510      	push	{r4, lr}
    fc98:	4604      	mov	r4, r0
    fc9a:	4601      	mov	r1, r0
    fc9c:	2000      	movs	r0, #0
    fc9e:	f7f5 fdd3 	bl	5848 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fca2:	b910      	cbnz	r0, fcaa <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fca4:	2000      	movs	r0, #0
    fca6:	6020      	str	r0, [r4, #0]
    fca8:	80a0      	strh	r0, [r4, #4]
    fcaa:	2000      	movs	r0, #0
    fcac:	bd10      	pop	{r4, pc}

0000fcae <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    fcae:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fcb0:	8800      	ldrh	r0, [r0, #0]
    fcb2:	4669      	mov	r1, sp
    fcb4:	f7fd ff6d 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fcb8:	b958      	cbnz	r0, fcd2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    fcba:	4668      	mov	r0, sp
    fcbc:	f000 fa47 	bl	1014e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    fcc0:	b138      	cbz	r0, fcd2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    fcc2:	9c01      	ldr	r4, [sp, #4]
    fcc4:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    fcc8:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    fccc:	3470      	adds	r4, #112	; 0x70
    fcce:	b929      	cbnz	r1, fcdc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    fcd0:	e001      	b.n	fcd6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    fcd2:	2002      	movs	r0, #2
    fcd4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fcd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    fcda:	b109      	cbz	r1, fce0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    fcdc:	203a      	movs	r0, #58	; 0x3a
    fcde:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fce0:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    fce4:	f04f 0501 	mov.w	r5, #1
    fce8:	0789      	lsls	r1, r1, #30
    fcea:	d103      	bne.n	fcf4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    fcec:	7005      	strb	r5, [r0, #0]
    fcee:	4668      	mov	r0, sp
    fcf0:	f7fe fae7 	bl	e2c2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fcf4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    fcf8:	2000      	movs	r0, #0
    fcfa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fcfc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fcfc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fcfe:	460c      	mov	r4, r1
    fd00:	4605      	mov	r5, r0
    fd02:	8800      	ldrh	r0, [r0, #0]
    fd04:	4669      	mov	r1, sp
    fd06:	f7fd ff44 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fd0a:	b108      	cbz	r0, fd10 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fd0c:	2002      	movs	r0, #2
    fd0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fd10:	78a8      	ldrb	r0, [r5, #2]
    fd12:	b130      	cbz	r0, fd22 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    fd14:	f000 f9f6 	bl	10104 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    fd18:	70a0      	strb	r0, [r4, #2]
    fd1a:	8828      	ldrh	r0, [r5, #0]
    fd1c:	8020      	strh	r0, [r4, #0]
    fd1e:	2000      	movs	r0, #0
    fd20:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fd22:	9801      	ldr	r0, [sp, #4]
    fd24:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fd28:	e7f6      	b.n	fd18 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fd2a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fd2a:	b510      	push	{r4, lr}
    fd2c:	f7fb f952 	bl	afd4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fd30:	2000      	movs	r0, #0
    fd32:	bd10      	pop	{r4, pc}

0000fd34 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fd34:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fd38:	4604      	mov	r4, r0
    fd3a:	8840      	ldrh	r0, [r0, #2]
    fd3c:	460d      	mov	r5, r1
    fd3e:	b1b8      	cbz	r0, fd70 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fd40:	8820      	ldrh	r0, [r4, #0]
    fd42:	4669      	mov	r1, sp
    fd44:	f7fd ff25 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fd48:	2800      	cmp	r0, #0
    fd4a:	d10f      	bne.n	fd6c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fd4c:	8820      	ldrh	r0, [r4, #0]
    fd4e:	8028      	strh	r0, [r5, #0]
    fd50:	9e01      	ldr	r6, [sp, #4]
    fd52:	f106 050c 	add.w	r5, r6, #12
    fd56:	3670      	adds	r6, #112	; 0x70
    fd58:	682f      	ldr	r7, [r5, #0]
    fd5a:	8862      	ldrh	r2, [r4, #2]
    fd5c:	4639      	mov	r1, r7
    fd5e:	4630      	mov	r0, r6
    fd60:	f7fe f858 	bl	de14 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fd64:	6828      	ldr	r0, [r5, #0]
    fd66:	42b8      	cmp	r0, r7
    fd68:	d1f6      	bne.n	fd58 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fd6a:	2000      	movs	r0, #0
    fd6c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fd70:	2012      	movs	r0, #18
    fd72:	e7fb      	b.n	fd6c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fd74 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fd74:	f7fa bf06 	b.w	ab84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fd78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd7c:	b086      	sub	sp, #24
    fd7e:	468a      	mov	sl, r1
    fd80:	4606      	mov	r6, r0
    fd82:	8800      	ldrh	r0, [r0, #0]
    fd84:	a901      	add	r1, sp, #4
    fd86:	f7fd ff04 	bl	db92 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fd8a:	2800      	cmp	r0, #0
    fd8c:	d138      	bne.n	fe00 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    fd8e:	9802      	ldr	r0, [sp, #8]
    fd90:	f04f 0800 	mov.w	r8, #0
    fd94:	4601      	mov	r1, r0
    fd96:	4689      	mov	r9, r1
    fd98:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    fd9c:	f88d 1000 	strb.w	r1, [sp]
    fda0:	9900      	ldr	r1, [sp, #0]
    fda2:	9100      	str	r1, [sp, #0]
    fda4:	f89d 5000 	ldrb.w	r5, [sp]
    fda8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    fdac:	3070      	adds	r0, #112	; 0x70
    fdae:	2921      	cmp	r1, #33	; 0x21
    fdb0:	d100      	bne.n	fdb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    fdb2:	b13d      	cbz	r5, fdc4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fdb4:	2400      	movs	r4, #0
    fdb6:	304c      	adds	r0, #76	; 0x4c
    fdb8:	2108      	movs	r1, #8
    fdba:	4607      	mov	r7, r0
    fdbc:	f7ff fae8 	bl	f390 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    fdc0:	b110      	cbz	r0, fdc8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    fdc2:	e007      	b.n	fdd4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fdc4:	2401      	movs	r4, #1
    fdc6:	e7f6      	b.n	fdb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    fdc8:	210b      	movs	r1, #11
    fdca:	4638      	mov	r0, r7
    fdcc:	f7ff fae0 	bl	f390 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    fdd0:	b900      	cbnz	r0, fdd4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fdd2:	b1a4      	cbz	r4, fdfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    fdd4:	a804      	add	r0, sp, #16
    fdd6:	9000      	str	r0, [sp, #0]
    fdd8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fddc:	ab03      	add	r3, sp, #12
    fdde:	4632      	mov	r2, r6
    fde0:	4649      	mov	r1, r9
    fde2:	f000 f96f 	bl	100c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    fde6:	0007      	movs	r7, r0
    fde8:	d10a      	bne.n	fe00 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    fdea:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fdee:	9c02      	ldr	r4, [sp, #8]
    fdf0:	b148      	cbz	r0, fe06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fdf2:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    fdf6:	2001      	movs	r0, #1
    fdf8:	7060      	strb	r0, [r4, #1]
    fdfa:	b94d      	cbnz	r5, fe10 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    fdfc:	e006      	b.n	fe0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    fdfe:	201a      	movs	r0, #26
    fe00:	b006      	add	sp, #24
    fe02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe06:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    fe0a:	e7f4      	b.n	fdf6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    fe0c:	7820      	ldrb	r0, [r4, #0]
    fe0e:	b108      	cbz	r0, fe14 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    fe10:	273a      	movs	r7, #58	; 0x3a
    fe12:	e012      	b.n	fe3a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    fe14:	f884 a000 	strb.w	sl, [r4]
    fe18:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fe1c:	70a0      	strb	r0, [r4, #2]
    fe1e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fe22:	70e1      	strb	r1, [r4, #3]
    fe24:	f88d 0000 	strb.w	r0, [sp]
    fe28:	f88d 1001 	strb.w	r1, [sp, #1]
    fe2c:	88b0      	ldrh	r0, [r6, #4]
    fe2e:	f8ad 0002 	strh.w	r0, [sp, #2]
    fe32:	4669      	mov	r1, sp
    fe34:	4648      	mov	r0, r9
    fe36:	f7fd ff6b 	bl	dd10 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fe3a:	f884 8001 	strb.w	r8, [r4, #1]
    fe3e:	4638      	mov	r0, r7
    fe40:	e7de      	b.n	fe00 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000fe42 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fe42:	b510      	push	{r4, lr}
    fe44:	2008      	movs	r0, #8
    fe46:	f7fb f92f 	bl	b0a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    fe4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe4e:	f7f8 bea7 	b.w	8ba0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    fe52:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fe56:	4288      	cmp	r0, r1
    fe58:	d303      	bcc.n	fe62 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    fe5a:	f640 0148 	movw	r1, #2120	; 0x848
    fe5e:	4288      	cmp	r0, r1
    fe60:	d300      	bcc.n	fe64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    fe62:	4608      	mov	r0, r1
    fe64:	4770      	bx	lr
    fe66:	07c1      	lsls	r1, r0, #31
    fe68:	d001      	beq.n	fe6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    fe6a:	2001      	movs	r0, #1
    fe6c:	4770      	bx	lr
    fe6e:	0780      	lsls	r0, r0, #30
    fe70:	d501      	bpl.n	fe76 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    fe72:	2002      	movs	r0, #2
    fe74:	4770      	bx	lr
    fe76:	2000      	movs	r0, #0
    fe78:	4770      	bx	lr
    fe7a:	b510      	push	{r4, lr}
    fe7c:	2801      	cmp	r0, #1
    fe7e:	d006      	beq.n	fe8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    fe80:	2802      	cmp	r0, #2
    fe82:	d004      	beq.n	fe8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    fe84:	f240 2163 	movw	r1, #611	; 0x263
    fe88:	2006      	movs	r0, #6
    fe8a:	f7f4 fddf 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe8e:	bd10      	pop	{r4, pc}
    fe90:	b50e      	push	{r1, r2, r3, lr}
    fe92:	4669      	mov	r1, sp
    fe94:	2001      	movs	r0, #1
    fe96:	f7fd fc3e 	bl	d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fe9a:	b150      	cbz	r0, feb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    fe9c:	f240 114f 	movw	r1, #335	; 0x14f
    fea0:	2039      	movs	r0, #57	; 0x39
    fea2:	f7f4 fdd3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fea6:	9802      	ldr	r0, [sp, #8]
    fea8:	f7fe fe60 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    feac:	b108      	cbz	r0, feb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    feae:	2001      	movs	r0, #1
    feb0:	bd0e      	pop	{r1, r2, r3, pc}
    feb2:	4668      	mov	r0, sp
    feb4:	f7f5 f802 	bl	4ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    feb8:	2800      	cmp	r0, #0
    feba:	d0f4      	beq.n	fea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    febc:	2000      	movs	r0, #0
    febe:	bd0e      	pop	{r1, r2, r3, pc}
    fec0:	b510      	push	{r4, lr}
    fec2:	f7ff ffe5 	bl	fe90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fec6:	b158      	cbz	r0, fee0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    fec8:	f000 f958 	bl	1017c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    fecc:	4604      	mov	r4, r0
    fece:	f7fe fc7e 	bl	e7ce <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fed2:	b918      	cbnz	r0, fedc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    fed4:	4620      	mov	r0, r4
    fed6:	f7fe fc70 	bl	e7ba <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    feda:	b108      	cbz	r0, fee0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    fedc:	2000      	movs	r0, #0
    fede:	bd10      	pop	{r4, pc}
    fee0:	2001      	movs	r0, #1
    fee2:	bd10      	pop	{r4, pc}
    fee4:	b570      	push	{r4, r5, r6, lr}
    fee6:	460c      	mov	r4, r1
    fee8:	4605      	mov	r5, r0
    feea:	b112      	cbz	r2, fef2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    feec:	291f      	cmp	r1, #31
    feee:	d80c      	bhi.n	ff0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    fef0:	e016      	b.n	ff20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    fef2:	f7f5 faa9 	bl	5448 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    fef6:	42a0      	cmp	r0, r4
    fef8:	d201      	bcs.n	fefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    fefa:	2007      	movs	r0, #7
    fefc:	bd70      	pop	{r4, r5, r6, pc}
    fefe:	4628      	mov	r0, r5
    ff00:	f7fe fc63 	bl	e7ca <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff04:	b118      	cbz	r0, ff0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    ff06:	2c1f      	cmp	r4, #31
    ff08:	d901      	bls.n	ff0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    ff0a:	2012      	movs	r0, #18
    ff0c:	bd70      	pop	{r4, r5, r6, pc}
    ff0e:	4628      	mov	r0, r5
    ff10:	f7fe fc64 	bl	e7dc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ff14:	b130      	cbz	r0, ff24 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    ff16:	4621      	mov	r1, r4
    ff18:	4628      	mov	r0, r5
    ff1a:	f7fe fc2b 	bl	e774 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    ff1e:	b118      	cbz	r0, ff28 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    ff20:	2000      	movs	r0, #0
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    ff24:	2042      	movs	r0, #66	; 0x42
    ff26:	bd70      	pop	{r4, r5, r6, pc}
    ff28:	2045      	movs	r0, #69	; 0x45
    ff2a:	bd70      	pop	{r4, r5, r6, pc}
    ff2c:	b510      	push	{r4, lr}
    ff2e:	4604      	mov	r4, r0
    ff30:	7840      	ldrb	r0, [r0, #1]
    ff32:	06c1      	lsls	r1, r0, #27
    ff34:	d51c      	bpl.n	ff70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    ff36:	07c0      	lsls	r0, r0, #31
    ff38:	d00b      	beq.n	ff52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    ff3a:	f7fb f889 	bl	b050 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    ff3e:	b1b8      	cbz	r0, ff70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    ff40:	7860      	ldrb	r0, [r4, #1]
    ff42:	06c1      	lsls	r1, r0, #27
    ff44:	d405      	bmi.n	ff52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    ff46:	0700      	lsls	r0, r0, #28
    ff48:	d503      	bpl.n	ff52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    ff4a:	7d20      	ldrb	r0, [r4, #20]
    ff4c:	2802      	cmp	r0, #2
    ff4e:	d10f      	bne.n	ff70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    ff50:	e010      	b.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    ff52:	7d20      	ldrb	r0, [r4, #20]
    ff54:	2802      	cmp	r0, #2
    ff56:	d001      	beq.n	ff5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    ff58:	7ea0      	ldrb	r0, [r4, #26]
    ff5a:	b948      	cbnz	r0, ff70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    ff5c:	7860      	ldrb	r0, [r4, #1]
    ff5e:	0700      	lsls	r0, r0, #28
    ff60:	d408      	bmi.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    ff62:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ff66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    ff6a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    ff6e:	d201      	bcs.n	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    ff70:	2011      	movs	r0, #17
    ff72:	bd10      	pop	{r4, pc}
    ff74:	2000      	movs	r0, #0
    ff76:	bd10      	pop	{r4, pc}
    ff78:	b538      	push	{r3, r4, r5, lr}
    ff7a:	4604      	mov	r4, r0
    ff7c:	7800      	ldrb	r0, [r0, #0]
    ff7e:	28ef      	cmp	r0, #239	; 0xef
    ff80:	d843      	bhi.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    ff82:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ff86:	f8ad 0000 	strh.w	r0, [sp]
    ff8a:	9800      	ldr	r0, [sp, #0]
    ff8c:	f000 f951 	bl	10232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    ff90:	b3a0      	cbz	r0, fffc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    ff92:	7861      	ldrb	r1, [r4, #1]
    ff94:	0708      	lsls	r0, r1, #28
    ff96:	d40b      	bmi.n	ffb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    ff98:	f8d4 0002 	ldr.w	r0, [r4, #2]
    ff9c:	f8d4 3005 	ldr.w	r3, [r4, #5]
    ffa0:	0a02      	lsrs	r2, r0, #8
    ffa2:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    ffa6:	d830      	bhi.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    ffa8:	2220      	movs	r2, #32
    ffaa:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ffae:	d82c      	bhi.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    ffb0:	7a60      	ldrb	r0, [r4, #9]
    ffb2:	b318      	cbz	r0, fffc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    ffb4:	2807      	cmp	r0, #7
    ffb6:	d828      	bhi.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    ffb8:	7aa0      	ldrb	r0, [r4, #10]
    ffba:	b128      	cbz	r0, ffc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    ffbc:	2801      	cmp	r0, #1
    ffbe:	d003      	beq.n	ffc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    ffc0:	2802      	cmp	r0, #2
    ffc2:	d001      	beq.n	ffc8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    ffc4:	2803      	cmp	r0, #3
    ffc6:	d120      	bne.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    ffc8:	074a      	lsls	r2, r1, #29
    ffca:	d403      	bmi.n	ffd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    ffcc:	2802      	cmp	r0, #2
    ffce:	d001      	beq.n	ffd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    ffd0:	2803      	cmp	r0, #3
    ffd2:	d105      	bne.n	ffe0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    ffd4:	7ae0      	ldrb	r0, [r4, #11]
    ffd6:	b108      	cbz	r0, ffdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ffd8:	2801      	cmp	r0, #1
    ffda:	d116      	bne.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    ffdc:	0748      	lsls	r0, r1, #29
    ffde:	d407      	bmi.n	fff0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    ffe0:	7ca0      	ldrb	r0, [r4, #18]
    ffe2:	b128      	cbz	r0, fff0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    ffe4:	2801      	cmp	r0, #1
    ffe6:	d003      	beq.n	fff0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    ffe8:	2802      	cmp	r0, #2
    ffea:	d001      	beq.n	fff0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    ffec:	2803      	cmp	r0, #3
    ffee:	d10c      	bne.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fff0:	06c8      	lsls	r0, r1, #27
    fff2:	7d20      	ldrb	r0, [r4, #20]
    fff4:	d503      	bpl.n	fffe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    fff6:	2801      	cmp	r0, #1
    fff8:	d107      	bne.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fffa:	e002      	b.n	10002 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    fffc:	e005      	b.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    fffe:	2802      	cmp	r0, #2
   10000:	d003      	beq.n	1000a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10002:	7e20      	ldrb	r0, [r4, #24]
   10004:	b118      	cbz	r0, 1000e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   10006:	2801      	cmp	r0, #1
   10008:	d001      	beq.n	1000e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1000a:	2012      	movs	r0, #18
   1000c:	bd38      	pop	{r3, r4, r5, pc}
   1000e:	2000      	movs	r0, #0
   10010:	bd38      	pop	{r3, r4, r5, pc}
   10012:	b510      	push	{r4, lr}
   10014:	0004      	movs	r4, r0
   10016:	d005      	beq.n	10024 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10018:	f7fb f856 	bl	b0c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1001c:	4384      	bics	r4, r0
   1001e:	d001      	beq.n	10024 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10020:	2000      	movs	r0, #0
   10022:	bd10      	pop	{r4, pc}
   10024:	2001      	movs	r0, #1
   10026:	bd10      	pop	{r4, pc}
   10028:	28fb      	cmp	r0, #251	; 0xfb
   1002a:	d803      	bhi.n	10034 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   1002c:	f640 0048 	movw	r0, #2120	; 0x848
   10030:	4281      	cmp	r1, r0
   10032:	d901      	bls.n	10038 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   10034:	2011      	movs	r0, #17
   10036:	4770      	bx	lr
   10038:	2000      	movs	r0, #0
   1003a:	4770      	bx	lr
   1003c:	381b      	subs	r0, #27
   1003e:	28e1      	cmp	r0, #225	; 0xe1
   10040:	d206      	bcs.n	10050 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10042:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10046:	d303      	bcc.n	10050 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10048:	f244 2090 	movw	r0, #17040	; 0x4290
   1004c:	4281      	cmp	r1, r0
   1004e:	d901      	bls.n	10054 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   10050:	2012      	movs	r0, #18
   10052:	4770      	bx	lr
   10054:	2000      	movs	r0, #0
   10056:	4770      	bx	lr
   10058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1005c:	4606      	mov	r6, r0
   1005e:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10062:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10066:	4615      	mov	r5, r2
   10068:	302c      	adds	r0, #44	; 0x2c
   1006a:	f7f8 f825 	bl	80b8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   1006e:	4680      	mov	r8, r0
   10070:	2102      	movs	r1, #2
   10072:	f7fd fe1e 	bl	dcb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10076:	4287      	cmp	r7, r0
   10078:	d200      	bcs.n	1007c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   1007a:	4638      	mov	r0, r7
   1007c:	4607      	mov	r7, r0
   1007e:	2102      	movs	r1, #2
   10080:	4640      	mov	r0, r8
   10082:	f7fd fe16 	bl	dcb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10086:	4284      	cmp	r4, r0
   10088:	d200      	bcs.n	1008c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   1008a:	4620      	mov	r0, r4
   1008c:	8831      	ldrh	r1, [r6, #0]
   1008e:	8029      	strh	r1, [r5, #0]
   10090:	2f1b      	cmp	r7, #27
   10092:	d913      	bls.n	100bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   10094:	2ffb      	cmp	r7, #251	; 0xfb
   10096:	d300      	bcc.n	1009a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10098:	27fb      	movs	r7, #251	; 0xfb
   1009a:	806f      	strh	r7, [r5, #2]
   1009c:	281b      	cmp	r0, #27
   1009e:	d90f      	bls.n	100c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   100a0:	28fb      	cmp	r0, #251	; 0xfb
   100a2:	d300      	bcc.n	100a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   100a4:	20fb      	movs	r0, #251	; 0xfb
   100a6:	80e8      	strh	r0, [r5, #6]
   100a8:	4640      	mov	r0, r8
   100aa:	f7ff fed2 	bl	fe52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   100ae:	80a8      	strh	r0, [r5, #4]
   100b0:	4640      	mov	r0, r8
   100b2:	f7ff fece 	bl	fe52 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   100b6:	8128      	strh	r0, [r5, #8]
   100b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100bc:	271b      	movs	r7, #27
   100be:	e7ec      	b.n	1009a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   100c0:	201b      	movs	r0, #27
   100c2:	e7f0      	b.n	100a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   100c8:	7890      	ldrb	r0, [r2, #2]
   100ca:	9e06      	ldr	r6, [sp, #24]
   100cc:	461d      	mov	r5, r3
   100ce:	4614      	mov	r4, r2
   100d0:	b908      	cbnz	r0, 100d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   100d2:	f7fa fff9 	bl	b0c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   100d6:	78e4      	ldrb	r4, [r4, #3]
   100d8:	4607      	mov	r7, r0
   100da:	b914      	cbnz	r4, 100e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   100dc:	f7fa fff4 	bl	b0c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   100e0:	4604      	mov	r4, r0
   100e2:	b16f      	cbz	r7, 10100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   100e4:	b164      	cbz	r4, 10100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   100e6:	4638      	mov	r0, r7
   100e8:	f7ff febd 	bl	fe66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   100ec:	4620      	mov	r0, r4
   100ee:	f7ff feba 	bl	fe66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   100f2:	b12f      	cbz	r7, 10100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   100f4:	b124      	cbz	r4, 10100 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   100f6:	702f      	strb	r7, [r5, #0]
   100f8:	7034      	strb	r4, [r6, #0]
   100fa:	2000      	movs	r0, #0
   100fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10100:	2009      	movs	r0, #9
   10102:	e7fb      	b.n	100fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   10104:	b510      	push	{r4, lr}
   10106:	f7fc faa5 	bl	c654 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1010a:	b928      	cbnz	r0, 10118 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   1010c:	f7fc fad8 	bl	c6c0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10110:	b910      	cbnz	r0, 10118 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10112:	f7fc fadf 	bl	c6d4 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10116:	b108      	cbz	r0, 1011c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   10118:	2008      	movs	r0, #8
   1011a:	bd10      	pop	{r4, pc}
   1011c:	f7fc fa6f 	bl	c5fe <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10120:	b940      	cbnz	r0, 10134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10122:	f7fc fa76 	bl	c612 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10126:	b928      	cbnz	r0, 10134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10128:	f7fc fa8a 	bl	c640 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1012c:	b910      	cbnz	r0, 10134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1012e:	f7fc fa9b 	bl	c668 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10132:	b108      	cbz	r0, 10138 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   10134:	2004      	movs	r0, #4
   10136:	bd10      	pop	{r4, pc}
   10138:	f240 519c 	movw	r1, #1436	; 0x59c
   1013c:	2039      	movs	r0, #57	; 0x39
   1013e:	f7f4 fc85 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10142:	b510      	push	{r4, lr}
   10144:	f7fa ffba 	bl	b0bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10148:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1014c:	bd10      	pop	{r4, pc}
   1014e:	6840      	ldr	r0, [r0, #4]
   10150:	f000 b800 	b.w	10154 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   10154:	b508      	push	{r3, lr}
   10156:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   1015a:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   1015e:	f88d 0000 	strb.w	r0, [sp]
   10162:	9800      	ldr	r0, [sp, #0]
   10164:	9000      	str	r0, [sp, #0]
   10166:	f89d 0000 	ldrb.w	r0, [sp]
   1016a:	1e40      	subs	r0, r0, #1
   1016c:	4208      	tst	r0, r1
   1016e:	d003      	beq.n	10178 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   10170:	2904      	cmp	r1, #4
   10172:	d001      	beq.n	10178 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   10174:	2001      	movs	r0, #1
   10176:	bd08      	pop	{r3, pc}
   10178:	2000      	movs	r0, #0
   1017a:	bd08      	pop	{r3, pc}
   1017c:	b510      	push	{r4, lr}
   1017e:	2101      	movs	r1, #1
   10180:	2000      	movs	r0, #0
   10182:	f7fd fabe 	bl	d702 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10186:	0004      	movs	r4, r0
   10188:	d108      	bne.n	1019c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
   1018a:	2200      	movs	r2, #0
   1018c:	2101      	movs	r1, #1
   1018e:	4610      	mov	r0, r2
   10190:	f7fd faad 	bl	d6ee <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   10194:	0004      	movs	r4, r0
   10196:	d003      	beq.n	101a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
   10198:	f7fe fab4 	bl	e704 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1019c:	4620      	mov	r0, r4
   1019e:	bd10      	pop	{r4, pc}
   101a0:	f240 2135 	movw	r1, #565	; 0x235
   101a4:	2039      	movs	r0, #57	; 0x39
   101a6:	f7f4 fc51 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   101aa:	b510      	push	{r4, lr}
   101ac:	f7ff fe70 	bl	fe90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   101b0:	2800      	cmp	r0, #0
   101b2:	d000      	beq.n	101b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
   101b4:	2001      	movs	r0, #1
   101b6:	bd10      	pop	{r4, pc}
   101b8:	b570      	push	{r4, r5, r6, lr}
   101ba:	4605      	mov	r5, r0
   101bc:	f7fe fb0e 	bl	e7dc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   101c0:	b170      	cbz	r0, 101e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
   101c2:	4628      	mov	r0, r5
   101c4:	f7fe fcd2 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   101c8:	2800      	cmp	r0, #0
   101ca:	d008      	beq.n	101de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
   101cc:	4628      	mov	r0, r5
   101ce:	f7fe fcca 	bl	eb66 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   101d2:	4604      	mov	r4, r0
   101d4:	4628      	mov	r0, r5
   101d6:	f7fe fca0 	bl	eb1a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   101da:	b118      	cbz	r0, 101e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
   101dc:	200c      	movs	r0, #12
   101de:	bd70      	pop	{r4, r5, r6, pc}
   101e0:	2042      	movs	r0, #66	; 0x42
   101e2:	bd70      	pop	{r4, r5, r6, pc}
   101e4:	b164      	cbz	r4, 10200 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   101e6:	8820      	ldrh	r0, [r4, #0]
   101e8:	f7fd fc13 	bl	da12 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   101ec:	8820      	ldrh	r0, [r4, #0]
   101ee:	2100      	movs	r1, #0
   101f0:	f7f4 feb4 	bl	4f5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   101f4:	b120      	cbz	r0, 10200 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   101f6:	f241 41ca 	movw	r1, #5322	; 0x14ca
   101fa:	2039      	movs	r0, #57	; 0x39
   101fc:	f7f4 fc26 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10200:	2000      	movs	r0, #0
   10202:	bd70      	pop	{r4, r5, r6, pc}
   10204:	b530      	push	{r4, r5, lr}
   10206:	f340 0400 	sbfx	r4, r0, #0, #1
   1020a:	f340 0040 	sbfx	r0, r0, #1, #1
   1020e:	1c40      	adds	r0, r0, #1
   10210:	9d03      	ldr	r5, [sp, #12]
   10212:	1c64      	adds	r4, r4, #1
   10214:	d000      	beq.n	10218 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
   10216:	b119      	cbz	r1, 10220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   10218:	b100      	cbz	r0, 1021c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   1021a:	b10a      	cbz	r2, 10220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1021c:	b91c      	cbnz	r4, 10226 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
   1021e:	e001      	b.n	10224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
   10220:	2011      	movs	r0, #17
   10222:	bd30      	pop	{r4, r5, pc}
   10224:	2100      	movs	r1, #0
   10226:	7019      	strb	r1, [r3, #0]
   10228:	b900      	cbnz	r0, 1022c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
   1022a:	2200      	movs	r2, #0
   1022c:	702a      	strb	r2, [r5, #0]
   1022e:	2000      	movs	r0, #0
   10230:	bd30      	pop	{r4, r5, pc}
   10232:	b2c0      	uxtb	r0, r0
   10234:	06c1      	lsls	r1, r0, #27
   10236:	d40c      	bmi.n	10252 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
   10238:	0681      	lsls	r1, r0, #26
   1023a:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   1023e:	d503      	bpl.n	10248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
   10240:	b9d1      	cbnz	r1, 10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10242:	0781      	lsls	r1, r0, #30
   10244:	d418      	bmi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10246:	e001      	b.n	1024c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
   10248:	2900      	cmp	r1, #0
   1024a:	d1fa      	bne.n	10242 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
   1024c:	0700      	lsls	r0, r0, #28
   1024e:	d413      	bmi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10250:	e010      	b.n	10274 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   10252:	0641      	lsls	r1, r0, #25
   10254:	d410      	bmi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10256:	0681      	lsls	r1, r0, #26
   10258:	d40e      	bmi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1025a:	07c1      	lsls	r1, r0, #31
   1025c:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10260:	d004      	beq.n	1026c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   10262:	2900      	cmp	r1, #0
   10264:	db02      	blt.n	1026c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   10266:	0740      	lsls	r0, r0, #29
   10268:	d404      	bmi.n	10274 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   1026a:	e005      	b.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1026c:	0701      	lsls	r1, r0, #28
   1026e:	d403      	bmi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10270:	0740      	lsls	r0, r0, #29
   10272:	d401      	bmi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10274:	2001      	movs	r0, #1
   10276:	4770      	bx	lr
   10278:	2000      	movs	r0, #0
   1027a:	4770      	bx	lr
   1027c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1027e:	4669      	mov	r1, sp
   10280:	2001      	movs	r0, #1
   10282:	f7fd fa48 	bl	d716 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10286:	b178      	cbz	r0, 102a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   10288:	f240 116d 	movw	r1, #365	; 0x16d
   1028c:	2039      	movs	r0, #57	; 0x39
   1028e:	f7f4 fbdd 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10292:	9c02      	ldr	r4, [sp, #8]
   10294:	4620      	mov	r0, r4
   10296:	f7fe fc69 	bl	eb6c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1029a:	b128      	cbz	r0, 102a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   1029c:	4620      	mov	r0, r4
   1029e:	f7fe facb 	bl	e838 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   102a2:	b108      	cbz	r0, 102a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   102a4:	2001      	movs	r0, #1
   102a6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   102a8:	4668      	mov	r0, sp
   102aa:	f7f4 fe07 	bl	4ebc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   102ae:	2800      	cmp	r0, #0
   102b0:	d0ef      	beq.n	10292 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
   102b2:	2000      	movs	r0, #0
   102b4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000102b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   102b6:	6802      	ldr	r2, [r0, #0]
   102b8:	b912      	cbnz	r2, 102c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   102ba:	6001      	str	r1, [r0, #0]
   102bc:	4770      	bx	lr
   102be:	4602      	mov	r2, r0
   102c0:	6850      	ldr	r0, [r2, #4]
   102c2:	b108      	cbz	r0, 102c8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   102c4:	428a      	cmp	r2, r1
   102c6:	d1fa      	bne.n	102be <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   102c8:	428a      	cmp	r2, r1
   102ca:	d0f7      	beq.n	102bc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   102cc:	6051      	str	r1, [r2, #4]
   102ce:	4770      	bx	lr
   102d0:	b510      	push	{r4, lr}
   102d2:	f7fe fc4e 	bl	eb72 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   102d6:	b108      	cbz	r0, 102dc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   102d8:	21d9      	movs	r1, #217	; 0xd9
   102da:	e003      	b.n	102e4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   102dc:	f7f7 f87a 	bl	73d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   102e0:	b118      	cbz	r0, 102ea <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   102e2:	21de      	movs	r1, #222	; 0xde
   102e4:	2001      	movs	r0, #1
   102e6:	f7f4 fbb1 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102ee:	2001      	movs	r0, #1
   102f0:	f7f4 bd7a 	b.w	4de8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   102f4:	b510      	push	{r4, lr}
   102f6:	4604      	mov	r4, r0
   102f8:	e002      	b.n	10300 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
   102fa:	6820      	ldr	r0, [r4, #0]
   102fc:	4780      	blx	r0
   102fe:	6864      	ldr	r4, [r4, #4]
   10300:	2c00      	cmp	r4, #0
   10302:	d1fa      	bne.n	102fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   10304:	bd10      	pop	{r4, pc}
   10306:	b510      	push	{r4, lr}
   10308:	2000      	movs	r0, #0
   1030a:	f7f4 fd6d 	bl	4de8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1030e:	f7f4 ffa3 	bl	5258 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10312:	f7f5 fa7b 	bl	580c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10316:	f7f5 fc69 	bl	5bec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1031a:	2800      	cmp	r0, #0
   1031c:	d003      	beq.n	10326 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   1031e:	21b8      	movs	r1, #184	; 0xb8
   10320:	2001      	movs	r0, #1
   10322:	f7f4 fb93 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10326:	bd10      	pop	{r4, pc}
   10328:	b510      	push	{r4, lr}
   1032a:	f7ff ffd1 	bl	102d0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   1032e:	f7fe ffef 	bl	f310 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10332:	2800      	cmp	r0, #0
   10334:	d003      	beq.n	1033e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
   10336:	21f5      	movs	r1, #245	; 0xf5
   10338:	2001      	movs	r0, #1
   1033a:	f7f4 fb87 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1033e:	bd10      	pop	{r4, pc}

00010340 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10340:	f7f3 bfe0 	b.w	4304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10344:	000b0001 	.word	0x000b0001
   10348:	000a0002 	.word	0x000a0002
   1034c:	00090005 	.word	0x00090005
   10350:	0008000a 	.word	0x0008000a
   10354:	00070014 	.word	0x00070014
   10358:	0006001e 	.word	0x0006001e
   1035c:	00050032 	.word	0x00050032
   10360:	0004004b 	.word	0x0004004b
   10364:	00030064 	.word	0x00030064
   10368:	00020096 	.word	0x00020096
   1036c:	000100fa 	.word	0x000100fa
   10370:	000001f4 	.word	0x000001f4

00010374 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10374:	b510      	push	{r4, lr}
   10376:	f7fb fa9b 	bl	b8b0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   1037a:	f000 f850 	bl	1041e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1037e:	f7fa ff11 	bl	b1a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10386:	f7fb b80f 	b.w	b3a8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0001038a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   1038a:	b510      	push	{r4, lr}
   1038c:	24c8      	movs	r4, #200	; 0xc8
   1038e:	1e64      	subs	r4, r4, #1
   10390:	b2e4      	uxtb	r4, r4
   10392:	f7fa ff25 	bl	b1e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10396:	2802      	cmp	r0, #2
   10398:	d003      	beq.n	103a2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   1039a:	2801      	cmp	r0, #1
   1039c:	d000      	beq.n	103a0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   1039e:	2000      	movs	r0, #0
   103a0:	bd10      	pop	{r4, pc}
   103a2:	2c00      	cmp	r4, #0
   103a4:	d1f3      	bne.n	1038e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   103a6:	2193      	movs	r1, #147	; 0x93
   103a8:	203b      	movs	r0, #59	; 0x3b
   103aa:	f7f4 fb4f 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000103ae <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   103ae:	b510      	push	{r4, lr}
   103b0:	f7f4 fa16 	bl	47e0 <mpsl_fem_lna_configuration_clear>
   103b4:	2800      	cmp	r0, #0
   103b6:	d005      	beq.n	103c4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   103b8:	1c40      	adds	r0, r0, #1
   103ba:	d003      	beq.n	103c4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   103bc:	2150      	movs	r1, #80	; 0x50
   103be:	2040      	movs	r0, #64	; 0x40
   103c0:	f7f4 fb44 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103c4:	bd10      	pop	{r4, pc}

000103c6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   103c6:	b510      	push	{r4, lr}
   103c8:	f7f4 fa16 	bl	47f8 <mpsl_fem_pa_configuration_clear>
   103cc:	2800      	cmp	r0, #0
   103ce:	d005      	beq.n	103dc <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   103d0:	1c40      	adds	r0, r0, #1
   103d2:	d003      	beq.n	103dc <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   103d4:	2149      	movs	r1, #73	; 0x49
   103d6:	2040      	movs	r0, #64	; 0x40
   103d8:	f7f4 fb38 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103dc:	bd10      	pop	{r4, pc}

000103de <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   103de:	b510      	push	{r4, lr}
   103e0:	f7f4 f9f8 	bl	47d4 <mpsl_fem_disable>
   103e4:	2800      	cmp	r0, #0
   103e6:	d005      	beq.n	103f4 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   103e8:	1c40      	adds	r0, r0, #1
   103ea:	d003      	beq.n	103f4 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   103ec:	2157      	movs	r1, #87	; 0x57
   103ee:	2040      	movs	r0, #64	; 0x40
   103f0:	f7f4 fb2c 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103f4:	bd10      	pop	{r4, pc}

000103f6 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   103f6:	b510      	push	{r4, lr}
   103f8:	2100      	movs	r1, #0
   103fa:	4608      	mov	r0, r1
   103fc:	f7f4 f9f6 	bl	47ec <mpsl_fem_lna_configuration_set>
   10400:	b108      	cbz	r0, 10406 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10402:	2000      	movs	r0, #0
   10404:	bd10      	pop	{r4, pc}
   10406:	2001      	movs	r0, #1
   10408:	bd10      	pop	{r4, pc}

0001040a <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1040a:	b508      	push	{r3, lr}
   1040c:	4668      	mov	r0, sp
   1040e:	f7f4 f9ff 	bl	4810 <mpsl_fem_pa_is_configured>
   10412:	f89d 0000 	ldrb.w	r0, [sp]
   10416:	2800      	cmp	r0, #0
   10418:	d000      	beq.n	1041c <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1041a:	2001      	movs	r0, #1
   1041c:	bd08      	pop	{r3, pc}

0001041e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   1041e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10422:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10426:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1042a:	f3bf 8f4f 	dsb	sy
   1042e:	f3bf 8f6f 	isb	sy
   10432:	f7fb b893 	b.w	b55c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   10436:	2800      	cmp	r0, #0
   10438:	db09      	blt.n	1044e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1043a:	f000 021f 	and.w	r2, r0, #31
   1043e:	2101      	movs	r1, #1
   10440:	4091      	lsls	r1, r2
   10442:	0940      	lsrs	r0, r0, #5
   10444:	0080      	lsls	r0, r0, #2
   10446:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1044a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1044e:	4770      	bx	lr
   10450:	2800      	cmp	r0, #0
   10452:	db0d      	blt.n	10470 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10454:	f000 021f 	and.w	r2, r0, #31
   10458:	2101      	movs	r1, #1
   1045a:	4091      	lsls	r1, r2
   1045c:	0940      	lsrs	r0, r0, #5
   1045e:	0080      	lsls	r0, r0, #2
   10460:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10464:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10468:	f3bf 8f4f 	dsb	sy
   1046c:	f3bf 8f6f 	isb	sy
   10470:	4770      	bx	lr

00010472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   10472:	b510      	push	{r4, lr}
   10474:	2801      	cmp	r0, #1
   10476:	d006      	beq.n	10486 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   10478:	2802      	cmp	r0, #2
   1047a:	d006      	beq.n	1048a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   1047c:	f640 3141 	movw	r1, #2881	; 0xb41
   10480:	203e      	movs	r0, #62	; 0x3e
   10482:	f7f4 fae3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10486:	2028      	movs	r0, #40	; 0x28
   10488:	bd10      	pop	{r4, pc}
   1048a:	2018      	movs	r0, #24
   1048c:	bd10      	pop	{r4, pc}

0001048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   1048e:	b510      	push	{r4, lr}
   10490:	2801      	cmp	r0, #1
   10492:	d006      	beq.n	104a2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   10494:	2802      	cmp	r0, #2
   10496:	d007      	beq.n	104a8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   10498:	f640 3155 	movw	r1, #2901	; 0xb55
   1049c:	203e      	movs	r0, #62	; 0x3e
   1049e:	f7f4 fad5 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104a2:	f641 6014 	movw	r0, #7700	; 0x1e14
   104a6:	bd10      	pop	{r4, pc}
   104a8:	f241 1030 	movw	r0, #4400	; 0x1130
   104ac:	bd10      	pop	{r4, pc}

000104ae <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   104ae:	f7fb bf57 	b.w	c360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   104b2:	b510      	push	{r4, lr}
   104b4:	460a      	mov	r2, r1
   104b6:	b130      	cbz	r0, 104c6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   104b8:	2801      	cmp	r0, #1
   104ba:	d00b      	beq.n	104d4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   104bc:	f240 6114 	movw	r1, #1556	; 0x614
   104c0:	203e      	movs	r0, #62	; 0x3e
   104c2:	f7f4 fac3 	bl	4a4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104ca:	f102 0128 	add.w	r1, r2, #40	; 0x28
   104ce:	4610      	mov	r0, r2
   104d0:	f7fa beda 	b.w	b288 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   104d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104d8:	f102 0129 	add.w	r1, r2, #41	; 0x29
   104dc:	4610      	mov	r0, r2
   104de:	f7fa bebd 	b.w	b25c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   104e2:	5840      	ldr	r0, [r0, r1]
   104e4:	2800      	cmp	r0, #0
   104e6:	d000      	beq.n	104ea <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   104e8:	2001      	movs	r0, #1
   104ea:	4770      	bx	lr
   104ec:	5840      	ldr	r0, [r0, r1]
   104ee:	2800      	cmp	r0, #0
   104f0:	d000      	beq.n	104f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   104f2:	2001      	movs	r0, #1
   104f4:	4770      	bx	lr

000104f6 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   104f6:	b570      	push	{r4, r5, r6, lr}
   104f8:	4605      	mov	r5, r0
   104fa:	4614      	mov	r4, r2
   104fc:	4608      	mov	r0, r1
   104fe:	f7ff ffc6 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10502:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10506:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1050a:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   1050e:	4620      	mov	r0, r4
   10510:	f7ff ffbd 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10514:	4428      	add	r0, r5
   10516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1051a:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1051e:	fbb0 f5f1 	udiv	r5, r0, r1
   10522:	4620      	mov	r0, r4
   10524:	f7ff ffa5 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10528:	4428      	add	r0, r5
   1052a:	1d40      	adds	r0, r0, #5
   1052c:	bd70      	pop	{r4, r5, r6, pc}

0001052e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1052e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10532:	4607      	mov	r7, r0
   10534:	461d      	mov	r5, r3
   10536:	460e      	mov	r6, r1
   10538:	4614      	mov	r4, r2
   1053a:	4610      	mov	r0, r2
   1053c:	f7ff ffa7 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10540:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10544:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   10548:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1054c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10550:	2e02      	cmp	r6, #2
   10552:	d00e      	beq.n	10572 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10554:	f240 52dc 	movw	r2, #1500	; 0x5dc
   10558:	4411      	add	r1, r2
   1055a:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   1055e:	fbb1 f6f0 	udiv	r6, r1, r0
   10562:	4620      	mov	r0, r4
   10564:	f7ff ff85 	bl	10472 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10568:	4430      	add	r0, r6
   1056a:	4428      	add	r0, r5
   1056c:	1d40      	adds	r0, r0, #5
   1056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10572:	4602      	mov	r2, r0
   10574:	e7f0      	b.n	10558 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00010576 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10576:	b510      	push	{r4, lr}
   10578:	4604      	mov	r4, r0
   1057a:	4608      	mov	r0, r1
   1057c:	f7ff ff87 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10580:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10584:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10588:	fbb0 f0f1 	udiv	r0, r0, r1
   1058c:	1a20      	subs	r0, r4, r0
   1058e:	1e80      	subs	r0, r0, #2
   10590:	bd10      	pop	{r4, pc}

00010592 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10592:	b510      	push	{r4, lr}
   10594:	4604      	mov	r4, r0
   10596:	4608      	mov	r0, r1
   10598:	f7ff ff79 	bl	1048e <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1059c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   105a0:	fbb0 f0f1 	udiv	r0, r0, r1
   105a4:	1a20      	subs	r0, r4, r0
   105a6:	bd10      	pop	{r4, pc}

000105a8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   105a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   105ac:	2902      	cmp	r1, #2
   105ae:	d008      	beq.n	105c2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   105b0:	f240 51dc 	movw	r1, #1500	; 0x5dc
   105b4:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   105b8:	fbb1 f1f2 	udiv	r1, r1, r2
   105bc:	4408      	add	r0, r1
   105be:	1e80      	subs	r0, r0, #2
   105c0:	4770      	bx	lr
   105c2:	4611      	mov	r1, r2
   105c4:	e7f6      	b.n	105b4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

000105c6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   105c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   105ca:	2902      	cmp	r1, #2
   105cc:	d007      	beq.n	105de <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   105ce:	f240 51dc 	movw	r1, #1500	; 0x5dc
   105d2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   105d6:	fbb1 f1f2 	udiv	r1, r1, r2
   105da:	4408      	add	r0, r1
   105dc:	4770      	bx	lr
   105de:	4611      	mov	r1, r2
   105e0:	e7f7      	b.n	105d2 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   105e2:	080c      	.short	0x080c
   105e4:	010d1702 	.word	0x010d1702
   105e8:	09090201 	.word	0x09090201
   105ec:	02060101 	.word	0x02060101
   105f0:	03181809 	.word	0x03181809
   105f4:	09090101 	.word	0x09090101
   105f8:	00050303 	.word	0x00050303
   105fc:	00000000 	.word	0x00000000

00010600 <toCelsius>:
    // sleep now
    sendCmd(CMD_SLEEP);
    return ret;
}

float toCelsius(uint16_t raw) {
   10600:	b508      	push	{r3, lr}
    return 175.0 * ((float)raw / 65535.0) - 45.0;
   10602:	f7f0 fb05 	bl	c10 <__aeabi_ui2f>
   10606:	f7ef ff93 	bl	530 <__aeabi_f2d>
   1060a:	a309      	add	r3, pc, #36	; (adr r3, 10630 <toCelsius+0x30>)
   1060c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10610:	f7f0 f910 	bl	834 <__aeabi_ddiv>
   10614:	a308      	add	r3, pc, #32	; (adr r3, 10638 <toCelsius+0x38>)
   10616:	e9d3 2300 	ldrd	r2, r3, [r3]
   1061a:	f7ef ffe1 	bl	5e0 <__aeabi_dmul>
   1061e:	2200      	movs	r2, #0
   10620:	4b07      	ldr	r3, [pc, #28]	; (10640 <toCelsius+0x40>)
   10622:	f7ef fe25 	bl	270 <__aeabi_dsub>
   10626:	f7f0 f9ed 	bl	a04 <__aeabi_d2f>
}
   1062a:	bd08      	pop	{r3, pc}
   1062c:	f3af 8000 	nop.w
   10630:	00000000 	.word	0x00000000
   10634:	40efffe0 	.word	0x40efffe0
   10638:	00000000 	.word	0x00000000
   1063c:	4065e000 	.word	0x4065e000
   10640:	40468000 	.word	0x40468000
   10644:	00000000 	.word	0x00000000

00010648 <toPercentage>:

static float toFahrenheit(uint16_t raw) {
    return toCelsius(raw) * 9.0 / 5.0 + 32.0;
}

extern float toPercentage(uint16_t raw) {
   10648:	b508      	push	{r3, lr}
    return 100.0 * ((float)raw / 65535.0);
   1064a:	f7f0 fae1 	bl	c10 <__aeabi_ui2f>
   1064e:	f7ef ff6f 	bl	530 <__aeabi_f2d>
   10652:	a307      	add	r3, pc, #28	; (adr r3, 10670 <toPercentage+0x28>)
   10654:	e9d3 2300 	ldrd	r2, r3, [r3]
   10658:	f7f0 f8ec 	bl	834 <__aeabi_ddiv>
   1065c:	2200      	movs	r2, #0
   1065e:	4b06      	ldr	r3, [pc, #24]	; (10678 <toPercentage+0x30>)
   10660:	f7ef ffbe 	bl	5e0 <__aeabi_dmul>
   10664:	f7f0 f9ce 	bl	a04 <__aeabi_d2f>
}
   10668:	bd08      	pop	{r3, pc}
   1066a:	bf00      	nop
   1066c:	f3af 8000 	nop.w
   10670:	00000000 	.word	0x00000000
   10674:	40efffe0 	.word	0x40efffe0
   10678:	40590000 	.word	0x40590000

0001067c <getData>:
    }

    return true;
}

static bool getData(char *data, size_t len) {
   1067c:	b510      	push	{r4, lr}
   1067e:	b084      	sub	sp, #16
   10680:	4603      	mov	r3, r0
    int ack = -1;
	
    ack = i2c_read(SHTC_dev, data, len, _address);
   10682:	4a09      	ldr	r2, [pc, #36]	; (106a8 <getData+0x2c>)
   10684:	6810      	ldr	r0, [r2, #0]
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   10686:	9301      	str	r3, [sp, #4]
	msg.len = num_bytes;
   10688:	9102      	str	r1, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1068a:	2303      	movs	r3, #3
   1068c:	f88d 300c 	strb.w	r3, [sp, #12]
	const struct i2c_driver_api *api =
   10690:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10692:	689c      	ldr	r4, [r3, #8]
   10694:	2370      	movs	r3, #112	; 0x70
   10696:	2201      	movs	r2, #1
   10698:	a901      	add	r1, sp, #4
   1069a:	47a0      	blx	r4
    
    if (ack != 0) {
   1069c:	b910      	cbnz	r0, 106a4 <getData+0x28>
        return false;
        printk("Read data error\n");
    }

    return true;
   1069e:	2001      	movs	r0, #1
}
   106a0:	b004      	add	sp, #16
   106a2:	bd10      	pop	{r4, pc}
        return false;
   106a4:	2000      	movs	r0, #0
   106a6:	e7fb      	b.n	106a0 <getData+0x24>
   106a8:	20002220 	.word	0x20002220

000106ac <sendCmd>:
static bool sendCmd(shtc3_cmd_t cmd) {
   106ac:	b510      	push	{r4, lr}
   106ae:	b084      	sub	sp, #16
   106b0:	4604      	mov	r4, r0
    if (DEBUG_MODE){printk("Sending CMD to SHTC: %04X \n", (uint16_t)cmd);}
   106b2:	4601      	mov	r1, r0
   106b4:	480f      	ldr	r0, [pc, #60]	; (106f4 <sendCmd+0x48>)
   106b6:	f00f fade 	bl	1fc76 <printk>
    data[0] = (uint16_t)cmd >> 8;
   106ba:	0a23      	lsrs	r3, r4, #8
   106bc:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = (uint16_t)cmd & UCHAR_MAX;
   106c0:	f88d 400d 	strb.w	r4, [sp, #13]
    ack = i2c_write(SHTC_dev, &data, 2, _address);
   106c4:	4b0c      	ldr	r3, [pc, #48]	; (106f8 <sendCmd+0x4c>)
   106c6:	6818      	ldr	r0, [r3, #0]
	msg.buf = (uint8_t *)buf;
   106c8:	ab03      	add	r3, sp, #12
   106ca:	9300      	str	r3, [sp, #0]
	msg.len = num_bytes;
   106cc:	2302      	movs	r3, #2
   106ce:	9301      	str	r3, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   106d0:	f88d 3008 	strb.w	r3, [sp, #8]
	const struct i2c_driver_api *api =
   106d4:	6883      	ldr	r3, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   106d6:	689c      	ldr	r4, [r3, #8]
   106d8:	2370      	movs	r3, #112	; 0x70
   106da:	2201      	movs	r2, #1
   106dc:	4669      	mov	r1, sp
   106de:	47a0      	blx	r4
    if (ack != 0) {
   106e0:	b910      	cbnz	r0, 106e8 <sendCmd+0x3c>
    return true;
   106e2:	2001      	movs	r0, #1
}
   106e4:	b004      	add	sp, #16
   106e6:	bd10      	pop	{r4, pc}
        printk("Write failed \n");
   106e8:	4804      	ldr	r0, [pc, #16]	; (106fc <sendCmd+0x50>)
   106ea:	f00f fac4 	bl	1fc76 <printk>
        return false;
   106ee:	2000      	movs	r0, #0
   106f0:	e7f8      	b.n	106e4 <sendCmd+0x38>
   106f2:	bf00      	nop
   106f4:	00025c68 	.word	0x00025c68
   106f8:	20002220 	.word	0x20002220
   106fc:	00025c84 	.word	0x00025c84

00010700 <shtc_read>:
extern bool shtc_read(uint16_t *temp, uint16_t *humidity, bool low_power) {
   10700:	b5f0      	push	{r4, r5, r6, r7, lr}
   10702:	b083      	sub	sp, #12
   10704:	4605      	mov	r5, r0
   10706:	460e      	mov	r6, r1
   10708:	4614      	mov	r4, r2
    if (DEBUG_MODE){printk("SHTC reading...\n");}
   1070a:	4828      	ldr	r0, [pc, #160]	; (107ac <shtc_read+0xac>)
   1070c:	f00f fab3 	bl	1fc76 <printk>
    if (!sendCmd(CMD_WAKEUP)) {
   10710:	f243 5017 	movw	r0, #13591	; 0x3517
   10714:	f7ff ffca 	bl	106ac <sendCmd>
   10718:	4607      	mov	r7, r0
   1071a:	b910      	cbnz	r0, 10722 <shtc_read+0x22>
}
   1071c:	4638      	mov	r0, r7
   1071e:	b003      	add	sp, #12
   10720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   10722:	2008      	movs	r0, #8
   10724:	2100      	movs	r1, #0
   10726:	f00b f95d 	bl	1b9e4 <z_impl_k_sleep>
    shtc3_cmd_t cmd = (low_power ? CMD_MEASUREMENT_LOW_POWER : CMD_MEASUREMENT_NORMAL);
   1072a:	b19c      	cbz	r4, 10754 <shtc_read+0x54>
   1072c:	f244 001a 	movw	r0, #16410	; 0x401a
    sendCmd(cmd);
   10730:	f7ff ffbc 	bl	106ac <sendCmd>
    if (!low_power) {
   10734:	b18c      	cbz	r4, 1075a <shtc_read+0x5a>
    shtc3_cmd_t cmd = (low_power ? CMD_MEASUREMENT_LOW_POWER : CMD_MEASUREMENT_NORMAL);
   10736:	2400      	movs	r4, #0
    for (; i < CONF_SHTC3_TIMEOUT; i++) { // safety timeout
   10738:	2c13      	cmp	r4, #19
   1073a:	d814      	bhi.n	10766 <shtc_read+0x66>
        if (getData(data, sizeof(data))) {
   1073c:	2106      	movs	r1, #6
   1073e:	4668      	mov	r0, sp
   10740:	f7ff ff9c 	bl	1067c <getData>
   10744:	b978      	cbnz	r0, 10766 <shtc_read+0x66>
   10746:	2021      	movs	r0, #33	; 0x21
   10748:	2100      	movs	r1, #0
   1074a:	f00b f94b 	bl	1b9e4 <z_impl_k_sleep>
    for (; i < CONF_SHTC3_TIMEOUT; i++) { // safety timeout
   1074e:	3401      	adds	r4, #1
   10750:	b2e4      	uxtb	r4, r4
   10752:	e7f1      	b.n	10738 <shtc_read+0x38>
    shtc3_cmd_t cmd = (low_power ? CMD_MEASUREMENT_LOW_POWER : CMD_MEASUREMENT_NORMAL);
   10754:	f645 00e0 	movw	r0, #22752	; 0x58e0
   10758:	e7ea      	b.n	10730 <shtc_read+0x30>
   1075a:	f44f 70c5 	mov.w	r0, #394	; 0x18a
   1075e:	2100      	movs	r1, #0
   10760:	f00b f940 	bl	1b9e4 <z_impl_k_sleep>
   10764:	e7e7      	b.n	10736 <shtc_read+0x36>
    printk("Measuring took %ums \n", i);
   10766:	4621      	mov	r1, r4
   10768:	4811      	ldr	r0, [pc, #68]	; (107b0 <shtc_read+0xb0>)
   1076a:	f00f fa84 	bl	1fc76 <printk>
    if (!checkCRC(data, sizeof(data))) {
   1076e:	2106      	movs	r1, #6
   10770:	4668      	mov	r0, sp
   10772:	f00e fb5f 	bl	1ee34 <checkCRC>
   10776:	b1a0      	cbz	r0, 107a2 <shtc_read+0xa2>
    if (humidity) {
   10778:	b136      	cbz	r6, 10788 <shtc_read+0x88>
        *humidity = (data[0] << 8) | data[1];
   1077a:	f89d 2000 	ldrb.w	r2, [sp]
   1077e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   10782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10786:	8033      	strh	r3, [r6, #0]
    if (temp) {
   10788:	b135      	cbz	r5, 10798 <shtc_read+0x98>
        *temp = (data[3] << 8) | data[4];
   1078a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1078e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10796:	802b      	strh	r3, [r5, #0]
    sendCmd(CMD_SLEEP);
   10798:	f24b 0098 	movw	r0, #45208	; 0xb098
   1079c:	f7ff ff86 	bl	106ac <sendCmd>
    return ret;
   107a0:	e7bc      	b.n	1071c <shtc_read+0x1c>
        printk("crc error \n");
   107a2:	4804      	ldr	r0, [pc, #16]	; (107b4 <shtc_read+0xb4>)
   107a4:	f00f fa67 	bl	1fc76 <printk>
   107a8:	e7e6      	b.n	10778 <shtc_read+0x78>
   107aa:	bf00      	nop
   107ac:	00025c94 	.word	0x00025c94
   107b0:	00025ca8 	.word	0x00025ca8
   107b4:	00025cc0 	.word	0x00025cc0

000107b8 <sendDataSHTC>:
        k_timer_start(&timer_shtc, K_MSEC(shtcData.timer_interval*10), K_MSEC(shtcData.timer_interval*10));
        return error;
    }
}

extern void sendDataSHTC(void){
   107b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   107ba:	b083      	sub	sp, #12
    if(shtc_read(&raw_temp,&raw_humidity,power_mode)) {
   107bc:	4b2c      	ldr	r3, [pc, #176]	; (10870 <sendDataSHTC+0xb8>)
   107be:	781a      	ldrb	r2, [r3, #0]
   107c0:	3a00      	subs	r2, #0
   107c2:	bf18      	it	ne
   107c4:	2201      	movne	r2, #1
   107c6:	492b      	ldr	r1, [pc, #172]	; (10874 <sendDataSHTC+0xbc>)
   107c8:	482b      	ldr	r0, [pc, #172]	; (10878 <sendDataSHTC+0xc0>)
   107ca:	f7ff ff99 	bl	10700 <shtc_read>
   107ce:	2800      	cmp	r0, #0
   107d0:	d049      	beq.n	10866 <sendDataSHTC+0xae>

        shtcData.temperature = toCelsius(raw_temp);
   107d2:	4b29      	ldr	r3, [pc, #164]	; (10878 <sendDataSHTC+0xc0>)
   107d4:	8818      	ldrh	r0, [r3, #0]
   107d6:	f7ff ff13 	bl	10600 <toCelsius>
   107da:	4606      	mov	r6, r0
   107dc:	4d27      	ldr	r5, [pc, #156]	; (1087c <sendDataSHTC+0xc4>)
   107de:	6068      	str	r0, [r5, #4]
        shtcData.humidity = toPercentage(raw_humidity);
   107e0:	4b24      	ldr	r3, [pc, #144]	; (10874 <sendDataSHTC+0xbc>)
   107e2:	8818      	ldrh	r0, [r3, #0]
   107e4:	f7ff ff30 	bl	10648 <toPercentage>
   107e8:	4604      	mov	r4, r0
   107ea:	6028      	str	r0, [r5, #0]

        if(PRINT_SENSOR_DATA){
		    printk("SHTC: temp: %f humid: %f\n", shtcData.temperature,shtcData.humidity);
   107ec:	4630      	mov	r0, r6
   107ee:	f7ef fe9f 	bl	530 <__aeabi_f2d>
   107f2:	4606      	mov	r6, r0
   107f4:	460f      	mov	r7, r1
   107f6:	4620      	mov	r0, r4
   107f8:	f7ef fe9a 	bl	530 <__aeabi_f2d>
   107fc:	e9cd 0100 	strd	r0, r1, [sp]
   10800:	4632      	mov	r2, r6
   10802:	463b      	mov	r3, r7
   10804:	481e      	ldr	r0, [pc, #120]	; (10880 <sendDataSHTC+0xc8>)
   10806:	f00f fa36 	bl	1fc76 <printk>
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1080a:	f014 fe66 	bl	254da <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1080e:	014b      	lsls	r3, r1, #5
   10810:	0142      	lsls	r2, r0, #5
   10812:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   10816:	1a13      	subs	r3, r2, r0
   10818:	eb64 0201 	sbc.w	r2, r4, r1
   1081c:	0094      	lsls	r4, r2, #2
   1081e:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   10822:	009e      	lsls	r6, r3, #2
   10824:	4622      	mov	r2, r4
   10826:	1833      	adds	r3, r6, r0
   10828:	eb41 0202 	adc.w	r2, r1, r2
   1082c:	00d1      	lsls	r1, r2, #3
   1082e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   10832:	00d8      	lsls	r0, r3, #3
   10834:	0bc3      	lsrs	r3, r0, #15
	    }

        float timestamp = k_uptime_get() /1000.0;
   10836:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
   1083a:	0bc9      	lsrs	r1, r1, #15
   1083c:	f7ef fea2 	bl	584 <__aeabi_l2d>
   10840:	2200      	movs	r2, #0
   10842:	4b10      	ldr	r3, [pc, #64]	; (10884 <sendDataSHTC+0xcc>)
   10844:	f7ef fff6 	bl	834 <__aeabi_ddiv>
   10848:	f7f0 f8dc 	bl	a04 <__aeabi_d2f>
        shtcData.timestamp = timestamp;
   1084c:	60a8      	str	r0, [r5, #8]

        shtcData.array[0] = shtcData.temperature;
   1084e:	686b      	ldr	r3, [r5, #4]
   10850:	60eb      	str	r3, [r5, #12]
        shtcData.array[1] = shtcData.humidity;
   10852:	682b      	ldr	r3, [r5, #0]
   10854:	612b      	str	r3, [r5, #16]
        shtcData.array[2] = shtcData.timestamp;
   10856:	6168      	str	r0, [r5, #20]

        sendData(SENSOR_SHTC_ID, &shtcData.array, 4*3);
   10858:	220c      	movs	r2, #12
   1085a:	18a9      	adds	r1, r5, r2
   1085c:	2004      	movs	r0, #4
   1085e:	f000 fa2b 	bl	10cb8 <sendData>
    }
    else {
        printk("Error reading SHTC");
    }
}
   10862:	b003      	add	sp, #12
   10864:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("Error reading SHTC");
   10866:	4808      	ldr	r0, [pc, #32]	; (10888 <sendDataSHTC+0xd0>)
   10868:	f00f fa05 	bl	1fc76 <printk>
}
   1086c:	e7f9      	b.n	10862 <sendDataSHTC+0xaa>
   1086e:	bf00      	nop
   10870:	20003f6a 	.word	0x20003f6a
   10874:	20003f64 	.word	0x20003f64
   10878:	20003f66 	.word	0x20003f66
   1087c:	200022d4 	.word	0x200022d4
   10880:	00025ccc 	.word	0x00025ccc
   10884:	408f4000 	.word	0x408f4000
   10888:	00025ce8 	.word	0x00025ce8

0001088c <shtcDataReady>:

static void shtcDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
   1088c:	b508      	push	{r3, lr}
	k_work_submit(&work_shtc);
   1088e:	4802      	ldr	r0, [pc, #8]	; (10898 <shtcDataReady+0xc>)
   10890:	f00a fcc2 	bl	1b218 <k_work_submit>
}
   10894:	bd08      	pop	{r3, pc}
   10896:	bf00      	nop
   10898:	20002234 	.word	0x20002234

0001089c <initSHTC>:
extern bool initSHTC(struct device *i2c_pointer) {
   1089c:	b510      	push	{r4, lr}
   1089e:	b082      	sub	sp, #8
   108a0:	4604      	mov	r4, r0
    if (DEBUG_MODE){printk("SHTC initialising...\n");}
   108a2:	4839      	ldr	r0, [pc, #228]	; (10988 <initSHTC+0xec>)
   108a4:	f00f f9e7 	bl	1fc76 <printk>
    SHTC_dev = i2c_pointer;
   108a8:	4b38      	ldr	r3, [pc, #224]	; (1098c <initSHTC+0xf0>)
   108aa:	601c      	str	r4, [r3, #0]
    if (DEBUG_MODE){printk("SHTC waking up...\n");}
   108ac:	4838      	ldr	r0, [pc, #224]	; (10990 <initSHTC+0xf4>)
   108ae:	f00f f9e2 	bl	1fc76 <printk>
    if (!sendCmd(CMD_WAKEUP)) {
   108b2:	f243 5017 	movw	r0, #13591	; 0x3517
   108b6:	f7ff fef9 	bl	106ac <sendCmd>
   108ba:	2800      	cmp	r0, #0
   108bc:	d03d      	beq.n	1093a <initSHTC+0x9e>
    if (DEBUG_MODE){printk("SHTC initialised succesfully...\n");}
   108be:	4835      	ldr	r0, [pc, #212]	; (10994 <initSHTC+0xf8>)
   108c0:	f00f f9d9 	bl	1fc76 <printk>
	return z_impl_k_sleep(timeout);
   108c4:	2008      	movs	r0, #8
   108c6:	2100      	movs	r1, #0
   108c8:	f00b f88c 	bl	1b9e4 <z_impl_k_sleep>
    if (DEBUG_MODE){printk("SHTC requesting ID...\n");}
   108cc:	4832      	ldr	r0, [pc, #200]	; (10998 <initSHTC+0xfc>)
   108ce:	f00f f9d2 	bl	1fc76 <printk>
    if (!sendCmd(CMD_READ_ID)) {
   108d2:	f64e 70c8 	movw	r0, #61384	; 0xefc8
   108d6:	f7ff fee9 	bl	106ac <sendCmd>
   108da:	4604      	mov	r4, r0
   108dc:	b3a0      	cbz	r0, 10948 <initSHTC+0xac>
    if (DEBUG_MODE){printk("SHTC requesting ID succesfully\n");}
   108de:	482f      	ldr	r0, [pc, #188]	; (1099c <initSHTC+0x100>)
   108e0:	f00f f9c9 	bl	1fc76 <printk>
    if (DEBUG_MODE){printk("SHTC reading ID...\n");}
   108e4:	482e      	ldr	r0, [pc, #184]	; (109a0 <initSHTC+0x104>)
   108e6:	f00f f9c6 	bl	1fc76 <printk>
    if (!getData(data, sizeof(data))) {
   108ea:	2103      	movs	r1, #3
   108ec:	a801      	add	r0, sp, #4
   108ee:	f7ff fec5 	bl	1067c <getData>
   108f2:	4604      	mov	r4, r0
   108f4:	b360      	cbz	r0, 10950 <initSHTC+0xb4>
    if (DEBUG_MODE){printk("SHTC read ID succesfully\n");}
   108f6:	482b      	ldr	r0, [pc, #172]	; (109a4 <initSHTC+0x108>)
   108f8:	f00f f9bd 	bl	1fc76 <printk>
    if (DEBUG_MODE){printk("SHTC checking CRC...\n");}
   108fc:	482a      	ldr	r0, [pc, #168]	; (109a8 <initSHTC+0x10c>)
   108fe:	f00f f9ba 	bl	1fc76 <printk>
    if (!checkCRC(data, sizeof(data))) {
   10902:	2103      	movs	r1, #3
   10904:	a801      	add	r0, sp, #4
   10906:	f00e fa95 	bl	1ee34 <checkCRC>
   1090a:	4604      	mov	r4, r0
   1090c:	b320      	cbz	r0, 10958 <initSHTC+0xbc>
    if(DEBUG_MODE){printk("SHTC CRC checked succesfully\n");}
   1090e:	4827      	ldr	r0, [pc, #156]	; (109ac <initSHTC+0x110>)
   10910:	f00f f9b1 	bl	1fc76 <printk>
    if (DEBUG_MODE){printk("SHTC checking ID...\n");}
   10914:	4826      	ldr	r0, [pc, #152]	; (109b0 <initSHTC+0x114>)
   10916:	f00f f9ae 	bl	1fc76 <printk>
    if ((data[0] & 0b00001000) != 0b00001000 || (data[1] & 0b00111111) != 0b00000111) {
   1091a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1091e:	f013 0f08 	tst.w	r3, #8
   10922:	d005      	beq.n	10930 <initSHTC+0x94>
   10924:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1092c:	2b07      	cmp	r3, #7
   1092e:	d017      	beq.n	10960 <initSHTC+0xc4>
        printk("ID doesn't match\n");
   10930:	4820      	ldr	r0, [pc, #128]	; (109b4 <initSHTC+0x118>)
   10932:	f00f f9a0 	bl	1fc76 <printk>
        return false;
   10936:	2400      	movs	r4, #0
   10938:	e003      	b.n	10942 <initSHTC+0xa6>
   1093a:	4604      	mov	r4, r0
        printk("SHTC Wake up failed\n");
   1093c:	481e      	ldr	r0, [pc, #120]	; (109b8 <initSHTC+0x11c>)
   1093e:	f00f f99a 	bl	1fc76 <printk>
}
   10942:	4620      	mov	r0, r4
   10944:	b002      	add	sp, #8
   10946:	bd10      	pop	{r4, pc}
        printk("SHTC requesting ID failed\n");
   10948:	481c      	ldr	r0, [pc, #112]	; (109bc <initSHTC+0x120>)
   1094a:	f00f f994 	bl	1fc76 <printk>
        return false;
   1094e:	e7f8      	b.n	10942 <initSHTC+0xa6>
        printk("Read ID failed\n");
   10950:	481b      	ldr	r0, [pc, #108]	; (109c0 <initSHTC+0x124>)
   10952:	f00f f990 	bl	1fc76 <printk>
        return false;
   10956:	e7f4      	b.n	10942 <initSHTC+0xa6>
        printk("SHTC requesting ID...\n");
   10958:	480f      	ldr	r0, [pc, #60]	; (10998 <initSHTC+0xfc>)
   1095a:	f00f f98c 	bl	1fc76 <printk>
        return false;
   1095e:	e7f0      	b.n	10942 <initSHTC+0xa6>
        printk("SHTC ID checked successfully\n");
   10960:	4818      	ldr	r0, [pc, #96]	; (109c4 <initSHTC+0x128>)
   10962:	f00f f988 	bl	1fc76 <printk>
        printk("SHTC ID: %04X \n", data[0] | data[1]);
   10966:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1096a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1096e:	4319      	orrs	r1, r3
   10970:	4815      	ldr	r0, [pc, #84]	; (109c8 <initSHTC+0x12c>)
   10972:	f00f f980 	bl	1fc76 <printk>
    if (DEBUG_MODE){printk("SHTC init successfull. Putting SHTC back to sleep\n");}
   10976:	4815      	ldr	r0, [pc, #84]	; (109cc <initSHTC+0x130>)
   10978:	f00f f97d 	bl	1fc76 <printk>
    return sendCmd(CMD_SLEEP);
   1097c:	f24b 0098 	movw	r0, #45208	; 0xb098
   10980:	f7ff fe94 	bl	106ac <sendCmd>
   10984:	4604      	mov	r4, r0
   10986:	e7dc      	b.n	10942 <initSHTC+0xa6>
   10988:	00025cfc 	.word	0x00025cfc
   1098c:	20002220 	.word	0x20002220
   10990:	00025d14 	.word	0x00025d14
   10994:	00025d40 	.word	0x00025d40
   10998:	00025d64 	.word	0x00025d64
   1099c:	00025d98 	.word	0x00025d98
   109a0:	00025db8 	.word	0x00025db8
   109a4:	00025ddc 	.word	0x00025ddc
   109a8:	00025df8 	.word	0x00025df8
   109ac:	00025e10 	.word	0x00025e10
   109b0:	00025e30 	.word	0x00025e30
   109b4:	00025e48 	.word	0x00025e48
   109b8:	00025d28 	.word	0x00025d28
   109bc:	00025d7c 	.word	0x00025d7c
   109c0:	00025dcc 	.word	0x00025dcc
   109c4:	00025e5c 	.word	0x00025e5c
   109c8:	00025e7c 	.word	0x00025e7c
   109cc:	00025e8c 	.word	0x00025e8c

000109d0 <sleepSHTC>:
extern uint8_t sleepSHTC(bool SLEEP) {
   109d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   109d2:	b083      	sub	sp, #12
    if (SLEEP) {
   109d4:	b158      	cbz	r0, 109ee <sleepSHTC+0x1e>
        if (DEBUG_MODE){printk("Stopping timer \n");}
   109d6:	481b      	ldr	r0, [pc, #108]	; (10a44 <sleepSHTC+0x74>)
   109d8:	f00f f94d 	bl	1fc76 <printk>
	z_impl_k_timer_stop(timer);
   109dc:	481a      	ldr	r0, [pc, #104]	; (10a48 <sleepSHTC+0x78>)
   109de:	f014 fdc2 	bl	25566 <z_impl_k_timer_stop>
        error = sendCmd(CMD_SLEEP);
   109e2:	f24b 0098 	movw	r0, #45208	; 0xb098
   109e6:	f7ff fe61 	bl	106ac <sendCmd>
}
   109ea:	b003      	add	sp, #12
   109ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (DEBUG_MODE){printk("Setting Timer with interval of %i \n", shtcData.timer_interval);}
   109ee:	4d17      	ldr	r5, [pc, #92]	; (10a4c <sleepSHTC+0x7c>)
   109f0:	7e29      	ldrb	r1, [r5, #24]
   109f2:	4817      	ldr	r0, [pc, #92]	; (10a50 <sleepSHTC+0x80>)
   109f4:	f00f f93f 	bl	1fc76 <printk>
        error = sendCmd(CMD_WAKEUP);
   109f8:	f243 5017 	movw	r0, #13591	; 0x3517
   109fc:	f7ff fe56 	bl	106ac <sendCmd>
   10a00:	4604      	mov	r4, r0
        k_timer_start(&timer_shtc, K_MSEC(shtcData.timer_interval*10), K_MSEC(shtcData.timer_interval*10));
   10a02:	7e2b      	ldrb	r3, [r5, #24]
   10a04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10a08:	005b      	lsls	r3, r3, #1
   10a0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a0e:	17df      	asrs	r7, r3, #31
   10a10:	03f9      	lsls	r1, r7, #15
   10a12:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   10a16:	03d8      	lsls	r0, r3, #15
   10a18:	f240 35e7 	movw	r5, #999	; 0x3e7
   10a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a20:	2300      	movs	r3, #0
   10a22:	1940      	adds	r0, r0, r5
   10a24:	f04f 0500 	mov.w	r5, #0
   10a28:	eb45 0101 	adc.w	r1, r5, r1
   10a2c:	f7f0 f9de 	bl	dec <__aeabi_uldivmod>
   10a30:	4602      	mov	r2, r0
   10a32:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   10a34:	9000      	str	r0, [sp, #0]
   10a36:	9101      	str	r1, [sp, #4]
   10a38:	4803      	ldr	r0, [pc, #12]	; (10a48 <sleepSHTC+0x78>)
   10a3a:	f00b fa27 	bl	1be8c <z_impl_k_timer_start>
        return error;
   10a3e:	4620      	mov	r0, r4
   10a40:	e7d3      	b.n	109ea <sleepSHTC+0x1a>
   10a42:	bf00      	nop
   10a44:	00025ec0 	.word	0x00025ec0
   10a48:	20001830 	.word	0x20001830
   10a4c:	200022d4 	.word	0x200022d4
   10a50:	00025ed4 	.word	0x00025ed4

00010a54 <setConfigSHTC>:

extern void submitConfigSHTC(){
	k_work_submit(&config_work_shtc);
}

static void setConfigSHTC(){
   10a54:	b508      	push	{r3, lr}
    if (DEBUG_MODE) {printk("SHTC Setting config...\n");}
   10a56:	480b      	ldr	r0, [pc, #44]	; (10a84 <setConfigSHTC+0x30>)
   10a58:	f00f f90d 	bl	1fc76 <printk>
    
    shtcData.timer_interval = shtcData.config[1];
   10a5c:	4a0a      	ldr	r2, [pc, #40]	; (10a88 <setConfigSHTC+0x34>)
   10a5e:	7e93      	ldrb	r3, [r2, #26]
   10a60:	7613      	strb	r3, [r2, #24]
    //Minimum of 30ms
    if (shtcData.timer_interval < 3) {
   10a62:	2b02      	cmp	r3, #2
   10a64:	d802      	bhi.n	10a6c <setConfigSHTC+0x18>
        shtcData.timer_interval = 3;
   10a66:	4613      	mov	r3, r2
   10a68:	2203      	movs	r2, #3
   10a6a:	761a      	strb	r2, [r3, #24]
    }

    //powermode
    power_mode = shtcData.config[2];
   10a6c:	4b06      	ldr	r3, [pc, #24]	; (10a88 <setConfigSHTC+0x34>)
   10a6e:	7ed9      	ldrb	r1, [r3, #27]
   10a70:	4a06      	ldr	r2, [pc, #24]	; (10a8c <setConfigSHTC+0x38>)
   10a72:	7011      	strb	r1, [r2, #0]

	sleepSHTC(!shtcData.config[0]);
   10a74:	7e58      	ldrb	r0, [r3, #25]
   10a76:	fab0 f080 	clz	r0, r0
   10a7a:	0940      	lsrs	r0, r0, #5
   10a7c:	f7ff ffa8 	bl	109d0 <sleepSHTC>
   10a80:	bd08      	pop	{r3, pc}
   10a82:	bf00      	nop
   10a84:	00025ef8 	.word	0x00025ef8
   10a88:	200022d4 	.word	0x200022d4
   10a8c:	20003f6a 	.word	0x20003f6a

00010a90 <init_Interrupt_SHTC>:
void init_Interrupt_SHTC() {
   10a90:	b508      	push	{r3, lr}
    k_work_init(&work_shtc, sendDataSHTC);
   10a92:	4907      	ldr	r1, [pc, #28]	; (10ab0 <init_Interrupt_SHTC+0x20>)
   10a94:	4807      	ldr	r0, [pc, #28]	; (10ab4 <init_Interrupt_SHTC+0x24>)
   10a96:	f014 fa4c 	bl	24f32 <k_work_init>
	k_work_init(&config_work_shtc, setConfigSHTC);
   10a9a:	4907      	ldr	r1, [pc, #28]	; (10ab8 <init_Interrupt_SHTC+0x28>)
   10a9c:	4807      	ldr	r0, [pc, #28]	; (10abc <init_Interrupt_SHTC+0x2c>)
   10a9e:	f014 fa48 	bl	24f32 <k_work_init>
    k_timer_init(&timer_shtc, shtcDataReady, NULL);
   10aa2:	2200      	movs	r2, #0
   10aa4:	4906      	ldr	r1, [pc, #24]	; (10ac0 <init_Interrupt_SHTC+0x30>)
   10aa6:	4807      	ldr	r0, [pc, #28]	; (10ac4 <init_Interrupt_SHTC+0x34>)
   10aa8:	f014 fd51 	bl	2554e <k_timer_init>
}
   10aac:	bd08      	pop	{r3, pc}
   10aae:	bf00      	nop
   10ab0:	000107b9 	.word	0x000107b9
   10ab4:	20002234 	.word	0x20002234
   10ab8:	00010a55 	.word	0x00010a55
   10abc:	20002224 	.word	0x20002224
   10ac0:	0001088d 	.word	0x0001088d
   10ac4:	20001830 	.word	0x20001830

00010ac8 <submitConfigSHTC>:
extern void submitConfigSHTC(){
   10ac8:	b508      	push	{r3, lr}
	k_work_submit(&config_work_shtc);
   10aca:	4802      	ldr	r0, [pc, #8]	; (10ad4 <submitConfigSHTC+0xc>)
   10acc:	f00a fba4 	bl	1b218 <k_work_submit>
}
   10ad0:	bd08      	pop	{r3, pc}
   10ad2:	bf00      	nop
   10ad4:	20002224 	.word	0x20002224

00010ad8 <imu_config_notification>:
static void bmp_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
	printk("config bmp set");
}
static void imu_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
   10ad8:	b508      	push	{r3, lr}
	printk("config imu set");
   10ada:	4802      	ldr	r0, [pc, #8]	; (10ae4 <imu_config_notification+0xc>)
   10adc:	f00f f8cb 	bl	1fc76 <printk>
}
   10ae0:	bd08      	pop	{r3, pc}
   10ae2:	bf00      	nop
   10ae4:	00025f10 	.word	0x00025f10

00010ae8 <shtc_config_notification>:
static void shtc_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
   10ae8:	b508      	push	{r3, lr}
	printk("config imu set");
   10aea:	4802      	ldr	r0, [pc, #8]	; (10af4 <shtc_config_notification+0xc>)
   10aec:	f00f f8c3 	bl	1fc76 <printk>
}
   10af0:	bd08      	pop	{r3, pc}
   10af2:	bf00      	nop
   10af4:	00025f10 	.word	0x00025f10

00010af8 <bmp_config_notification>:
{
   10af8:	b508      	push	{r3, lr}
	printk("config bmp set");
   10afa:	4802      	ldr	r0, [pc, #8]	; (10b04 <bmp_config_notification+0xc>)
   10afc:	f00f f8bb 	bl	1fc76 <printk>
}
   10b00:	bd08      	pop	{r3, pc}
   10b02:	bf00      	nop
   10b04:	00025f20 	.word	0x00025f20

00010b08 <dataWritten>:

	return len;
}

static ssize_t dataWritten(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf, uint16_t len, uint16_t offset,uint8_t flags)
{
   10b08:	b570      	push	{r4, r5, r6, lr}
   10b0a:	460c      	mov	r4, r1
   10b0c:	4611      	mov	r1, r2
   10b0e:	461a      	mov	r2, r3
   10b10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	uint8_t *value = attr->user_data;
   10b14:	68e0      	ldr	r0, [r4, #12]
	if (offset + len > sizeof(config_data)) {
   10b16:	189e      	adds	r6, r3, r2
   10b18:	2e14      	cmp	r6, #20
   10b1a:	d813      	bhi.n	10b44 <dataWritten+0x3c>
   10b1c:	4615      	mov	r5, r2
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10b1e:	4418      	add	r0, r3
   10b20:	f014 fe01 	bl	25726 <memcpy>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}
	memcpy(value + offset, buf, len);
	
	if(attr->uuid == &bmp_cnfg.uuid){
   10b24:	6822      	ldr	r2, [r4, #0]
   10b26:	4b09      	ldr	r3, [pc, #36]	; (10b4c <dataWritten+0x44>)
   10b28:	429a      	cmp	r2, r3
   10b2a:	d005      	beq.n	10b38 <dataWritten+0x30>
		submitConfigBMP();
	}
	if(attr->uuid == &shtc_cnfg.uuid){
   10b2c:	6822      	ldr	r2, [r4, #0]
   10b2e:	4b08      	ldr	r3, [pc, #32]	; (10b50 <dataWritten+0x48>)
   10b30:	429a      	cmp	r2, r3
   10b32:	d004      	beq.n	10b3e <dataWritten+0x36>
		submitConfigSHTC();
	}
	return len;
}
   10b34:	4628      	mov	r0, r5
   10b36:	bd70      	pop	{r4, r5, r6, pc}
		submitConfigBMP();
   10b38:	f000 fc4e 	bl	113d8 <submitConfigBMP>
   10b3c:	e7f6      	b.n	10b2c <dataWritten+0x24>
		submitConfigSHTC();
   10b3e:	f7ff ffc3 	bl	10ac8 <submitConfigSHTC>
   10b42:	e7f7      	b.n	10b34 <dataWritten+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   10b44:	f06f 0506 	mvn.w	r5, #6
   10b48:	e7f4      	b.n	10b34 <dataWritten+0x2c>
   10b4a:	bf00      	nop
   10b4c:	200005e4 	.word	0x200005e4
   10b50:	20000698 	.word	0x20000698

00010b54 <read_u16>:
{
   10b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b58:	b084      	sub	sp, #16
   10b5a:	4606      	mov	r6, r0
   10b5c:	460c      	mov	r4, r1
   10b5e:	4617      	mov	r7, r2
   10b60:	461d      	mov	r5, r3
   10b62:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    printk("len: %i\n",len);
   10b66:	4619      	mov	r1, r3
   10b68:	480a      	ldr	r0, [pc, #40]	; (10b94 <read_u16+0x40>)
   10b6a:	f00f f884 	bl	1fc76 <printk>
	printk("offset: %i\n",offset);
   10b6e:	4641      	mov	r1, r8
   10b70:	4809      	ldr	r0, [pc, #36]	; (10b98 <read_u16+0x44>)
   10b72:	f00f f880 	bl	1fc76 <printk>
	uint8_t *value = attr->user_data;
   10b76:	68e3      	ldr	r3, [r4, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, 12);
   10b78:	220c      	movs	r2, #12
   10b7a:	9202      	str	r2, [sp, #8]
   10b7c:	9301      	str	r3, [sp, #4]
   10b7e:	f8cd 8000 	str.w	r8, [sp]
   10b82:	462b      	mov	r3, r5
   10b84:	463a      	mov	r2, r7
   10b86:	4621      	mov	r1, r4
   10b88:	4630      	mov	r0, r6
   10b8a:	f012 fa9d 	bl	230c8 <bt_gatt_attr_read>
}
   10b8e:	b004      	add	sp, #16
   10b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b94:	00025f30 	.word	0x00025f30
   10b98:	00025f3c 	.word	0x00025f3c

00010b9c <bas_ready>:

	bt_bas_set_battery_level(battery_level);
}

static void bas_ready(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
   10b9c:	b508      	push	{r3, lr}
	k_work_submit(&work_bas);
   10b9e:	4802      	ldr	r0, [pc, #8]	; (10ba8 <bas_ready+0xc>)
   10ba0:	f00a fb3a 	bl	1b218 <k_work_submit>
}
   10ba4:	bd08      	pop	{r3, pc}
   10ba6:	bf00      	nop
   10ba8:	20002304 	.word	0x20002304

00010bac <disconnected>:
{
   10bac:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
   10bae:	4806      	ldr	r0, [pc, #24]	; (10bc8 <disconnected+0x1c>)
   10bb0:	f00f f861 	bl	1fc76 <printk>
	sleepBMP(true);
   10bb4:	2001      	movs	r0, #1
   10bb6:	f000 fc17 	bl	113e8 <sleepBMP>
	sleepSHTC(true);
   10bba:	2001      	movs	r0, #1
   10bbc:	f7ff ff08 	bl	109d0 <sleepSHTC>
	sleepMLX(true);
   10bc0:	2001      	movs	r0, #1
   10bc2:	f000 f993 	bl	10eec <sleepMLX>
}
   10bc6:	bd08      	pop	{r3, pc}
   10bc8:	00025f48 	.word	0x00025f48

00010bcc <connected>:
{
   10bcc:	b538      	push	{r3, r4, r5, lr}
   10bce:	4605      	mov	r5, r0
   10bd0:	460c      	mov	r4, r1
	printk(bt_conn_index(conn));
   10bd2:	f005 f9f7 	bl	15fc4 <bt_conn_index>
   10bd6:	f00f f84e 	bl	1fc76 <printk>
	printk("\n");
   10bda:	480a      	ldr	r0, [pc, #40]	; (10c04 <connected+0x38>)
   10bdc:	f00f f84b 	bl	1fc76 <printk>
	bt_conn_le_param_update(conn,&conn_paramter);
   10be0:	4909      	ldr	r1, [pc, #36]	; (10c08 <connected+0x3c>)
   10be2:	4628      	mov	r0, r5
   10be4:	f010 fec1 	bl	2196a <bt_conn_le_param_update>
	if (err) {
   10be8:	b144      	cbz	r4, 10bfc <connected+0x30>
		printk("Connection failed (err 0x%02x)\n", err);
   10bea:	4621      	mov	r1, r4
   10bec:	4807      	ldr	r0, [pc, #28]	; (10c0c <connected+0x40>)
   10bee:	f00f f842 	bl	1fc76 <printk>
	blink_LED(LED_BLUE_ID,3);
   10bf2:	2103      	movs	r1, #3
   10bf4:	2000      	movs	r0, #0
   10bf6:	f000 fe6f 	bl	118d8 <blink_LED>
}
   10bfa:	bd38      	pop	{r3, r4, r5, pc}
		printk("Connected\n");
   10bfc:	4804      	ldr	r0, [pc, #16]	; (10c10 <connected+0x44>)
   10bfe:	f00f f83a 	bl	1fc76 <printk>
   10c02:	e7f6      	b.n	10bf2 <connected+0x26>
   10c04:	00025cbc 	.word	0x00025cbc
   10c08:	00026260 	.word	0x00026260
   10c0c:	00025f68 	.word	0x00025f68
   10c10:	00025f88 	.word	0x00025f88

00010c14 <bt_ready>:
{
   10c14:	b500      	push	{lr}
   10c16:	b083      	sub	sp, #12
	printk("Bluetooth initialized\n");
   10c18:	480a      	ldr	r0, [pc, #40]	; (10c44 <bt_ready+0x30>)
   10c1a:	f00f f82c 	bl	1fc76 <printk>
	err = bt_le_adv_start(&adv_param_normal, ad, ARRAY_SIZE(ad), NULL, 0);
   10c1e:	2300      	movs	r3, #0
   10c20:	9300      	str	r3, [sp, #0]
   10c22:	2203      	movs	r2, #3
   10c24:	4908      	ldr	r1, [pc, #32]	; (10c48 <bt_ready+0x34>)
   10c26:	4809      	ldr	r0, [pc, #36]	; (10c4c <bt_ready+0x38>)
   10c28:	f005 f83c 	bl	15ca4 <bt_le_adv_start>
	if (err) {
   10c2c:	b928      	cbnz	r0, 10c3a <bt_ready+0x26>
	printk("Advertising successfully started\n");
   10c2e:	4808      	ldr	r0, [pc, #32]	; (10c50 <bt_ready+0x3c>)
   10c30:	f00f f821 	bl	1fc76 <printk>
}
   10c34:	b003      	add	sp, #12
   10c36:	f85d fb04 	ldr.w	pc, [sp], #4
   10c3a:	4601      	mov	r1, r0
		printk("Advertising failed to start (err %d)\n", err);
   10c3c:	4805      	ldr	r0, [pc, #20]	; (10c54 <bt_ready+0x40>)
   10c3e:	f00f f81a 	bl	1fc76 <printk>
		return;
   10c42:	e7f7      	b.n	10c34 <bt_ready+0x20>
   10c44:	00025f94 	.word	0x00025f94
   10c48:	00026004 	.word	0x00026004
   10c4c:	0002601c 	.word	0x0002601c
   10c50:	00025fd4 	.word	0x00025fd4
   10c54:	00025fac 	.word	0x00025fac

00010c58 <init_BAS>:

void init_BAS() {
   10c58:	b510      	push	{r4, lr}
   10c5a:	b082      	sub	sp, #8
    k_work_init(&work_bas, bas_notify);
   10c5c:	490b      	ldr	r1, [pc, #44]	; (10c8c <init_BAS+0x34>)
   10c5e:	480c      	ldr	r0, [pc, #48]	; (10c90 <init_BAS+0x38>)
   10c60:	f014 f967 	bl	24f32 <k_work_init>
    k_timer_init(&timer_bas, bas_ready, NULL);
   10c64:	4c0b      	ldr	r4, [pc, #44]	; (10c94 <init_BAS+0x3c>)
   10c66:	2200      	movs	r2, #0
   10c68:	490b      	ldr	r1, [pc, #44]	; (10c98 <init_BAS+0x40>)
   10c6a:	4620      	mov	r0, r4
   10c6c:	f014 fc6f 	bl	2554e <k_timer_init>
	k_timer_start(&timer_bas,K_SECONDS(1),K_SECONDS(1));
   10c70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10c74:	2300      	movs	r3, #0
   10c76:	e9cd 2300 	strd	r2, r3, [sp]
   10c7a:	4620      	mov	r0, r4
   10c7c:	f00b f906 	bl	1be8c <z_impl_k_timer_start>

    if (DEBUG_MODE){printk("init BAS\n");}
   10c80:	4806      	ldr	r0, [pc, #24]	; (10c9c <init_BAS+0x44>)
   10c82:	f00e fff8 	bl	1fc76 <printk>
}
   10c86:	b002      	add	sp, #8
   10c88:	bd10      	pop	{r4, pc}
   10c8a:	bf00      	nop
   10c8c:	0001ee61 	.word	0x0001ee61
   10c90:	20002304 	.word	0x20002304
   10c94:	20001868 	.word	0x20001868
   10c98:	00010b9d 	.word	0x00010b9d
   10c9c:	00025ff8 	.word	0x00025ff8

00010ca0 <initBLE>:


extern void initBLE(){
   10ca0:	b508      	push	{r3, lr}
     bt_enable(NULL);
   10ca2:	2000      	movs	r0, #0
   10ca4:	f004 fac2 	bl	1522c <bt_enable>
     bt_ready();
   10ca8:	f7ff ffb4 	bl	10c14 <bt_ready>
     bt_conn_cb_register(&conn_callbacks);
   10cac:	4801      	ldr	r0, [pc, #4]	; (10cb4 <initBLE+0x14>)
   10cae:	f005 fa35 	bl	1611c <bt_conn_cb_register>
};
   10cb2:	bd08      	pop	{r3, pc}
   10cb4:	2000060c 	.word	0x2000060c

00010cb8 <sendData>:


extern void sendData(uint8_t ID, float* DATA,uint8_t LEN){
   10cb8:	b500      	push	{lr}
   10cba:	b087      	sub	sp, #28
	if(ID == SENSOR_IMU_ACC_ID){
   10cbc:	2802      	cmp	r0, #2
   10cbe:	d00a      	beq.n	10cd6 <sendData+0x1e>
		bt_gatt_notify_uuid(NULL, &icm_uuid_acc.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if(ID == SENSOR_IMU_GYR_ID){
   10cc0:	2803      	cmp	r0, #3
   10cc2:	d017      	beq.n	10cf4 <sendData+0x3c>
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if(ID == SENSOR_BMP384_ID){
   10cc4:	2801      	cmp	r0, #1
   10cc6:	d024      	beq.n	10d12 <sendData+0x5a>
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if (ID == SENSOR_SHTC_ID)
   10cc8:	2804      	cmp	r0, #4
   10cca:	d031      	beq.n	10d30 <sendData+0x78>
	{
		bt_gatt_notify_uuid(NULL, &shtc_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if (ID == SENSOR_MLX_ID)
   10ccc:	2805      	cmp	r0, #5
   10cce:	d03e      	beq.n	10d4e <sendData+0x96>
	{
		bt_gatt_notify_uuid(NULL, &mlx_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
};
   10cd0:	b007      	add	sp, #28
   10cd2:	f85d fb04 	ldr.w	pc, [sp], #4
				      const struct bt_gatt_attr *attr,
				      const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   10cd6:	2000      	movs	r0, #0
   10cd8:	9003      	str	r0, [sp, #12]
   10cda:	9004      	str	r0, [sp, #16]
   10cdc:	9005      	str	r0, [sp, #20]

	params.uuid = uuid;
   10cde:	4b23      	ldr	r3, [pc, #140]	; (10d6c <sendData+0xb4>)
   10ce0:	9300      	str	r3, [sp, #0]
	params.attr = attr;
   10ce2:	4b23      	ldr	r3, [pc, #140]	; (10d70 <sendData+0xb8>)
   10ce4:	9301      	str	r3, [sp, #4]
	params.data = data;
   10ce6:	9102      	str	r1, [sp, #8]
	params.len = len;
   10ce8:	f8ad 200c 	strh.w	r2, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
   10cec:	4669      	mov	r1, sp
   10cee:	f006 fcdd 	bl	176ac <bt_gatt_notify_cb>
   10cf2:	e7ed      	b.n	10cd0 <sendData+0x18>
	memset(&params, 0, sizeof(params));
   10cf4:	2000      	movs	r0, #0
   10cf6:	9003      	str	r0, [sp, #12]
   10cf8:	9004      	str	r0, [sp, #16]
   10cfa:	9005      	str	r0, [sp, #20]
	params.uuid = uuid;
   10cfc:	4b1d      	ldr	r3, [pc, #116]	; (10d74 <sendData+0xbc>)
   10cfe:	9300      	str	r3, [sp, #0]
	params.attr = attr;
   10d00:	4b1b      	ldr	r3, [pc, #108]	; (10d70 <sendData+0xb8>)
   10d02:	9301      	str	r3, [sp, #4]
	params.data = data;
   10d04:	9102      	str	r1, [sp, #8]
	params.len = len;
   10d06:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   10d0a:	4669      	mov	r1, sp
   10d0c:	f006 fcce 	bl	176ac <bt_gatt_notify_cb>
   10d10:	e7de      	b.n	10cd0 <sendData+0x18>
	memset(&params, 0, sizeof(params));
   10d12:	2000      	movs	r0, #0
   10d14:	9003      	str	r0, [sp, #12]
   10d16:	9004      	str	r0, [sp, #16]
   10d18:	9005      	str	r0, [sp, #20]
	params.uuid = uuid;
   10d1a:	4b17      	ldr	r3, [pc, #92]	; (10d78 <sendData+0xc0>)
   10d1c:	9300      	str	r3, [sp, #0]
	params.attr = attr;
   10d1e:	4b14      	ldr	r3, [pc, #80]	; (10d70 <sendData+0xb8>)
   10d20:	9301      	str	r3, [sp, #4]
	params.data = data;
   10d22:	9102      	str	r1, [sp, #8]
	params.len = len;
   10d24:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   10d28:	4669      	mov	r1, sp
   10d2a:	f006 fcbf 	bl	176ac <bt_gatt_notify_cb>
   10d2e:	e7cf      	b.n	10cd0 <sendData+0x18>
	memset(&params, 0, sizeof(params));
   10d30:	2000      	movs	r0, #0
   10d32:	9003      	str	r0, [sp, #12]
   10d34:	9004      	str	r0, [sp, #16]
   10d36:	9005      	str	r0, [sp, #20]
	params.uuid = uuid;
   10d38:	4b10      	ldr	r3, [pc, #64]	; (10d7c <sendData+0xc4>)
   10d3a:	9300      	str	r3, [sp, #0]
	params.attr = attr;
   10d3c:	4b0c      	ldr	r3, [pc, #48]	; (10d70 <sendData+0xb8>)
   10d3e:	9301      	str	r3, [sp, #4]
	params.data = data;
   10d40:	9102      	str	r1, [sp, #8]
	params.len = len;
   10d42:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   10d46:	4669      	mov	r1, sp
   10d48:	f006 fcb0 	bl	176ac <bt_gatt_notify_cb>
   10d4c:	e7c0      	b.n	10cd0 <sendData+0x18>
	memset(&params, 0, sizeof(params));
   10d4e:	2000      	movs	r0, #0
   10d50:	9003      	str	r0, [sp, #12]
   10d52:	9004      	str	r0, [sp, #16]
   10d54:	9005      	str	r0, [sp, #20]
	params.uuid = uuid;
   10d56:	4b0a      	ldr	r3, [pc, #40]	; (10d80 <sendData+0xc8>)
   10d58:	9300      	str	r3, [sp, #0]
	params.attr = attr;
   10d5a:	4b05      	ldr	r3, [pc, #20]	; (10d70 <sendData+0xb8>)
   10d5c:	9301      	str	r3, [sp, #4]
	params.data = data;
   10d5e:	9102      	str	r1, [sp, #8]
	params.len = len;
   10d60:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   10d64:	4669      	mov	r1, sp
   10d66:	f006 fca1 	bl	176ac <bt_gatt_notify_cb>
   10d6a:	e7b1      	b.n	10cd0 <sendData+0x18>
   10d6c:	20000648 	.word	0x20000648
   10d70:	00026030 	.word	0x00026030
   10d74:	2000065c 	.word	0x2000065c
   10d78:	200005f8 	.word	0x200005f8
   10d7c:	200006ac 	.word	0x200006ac
   10d80:	20000684 	.word	0x20000684

00010d84 <sendDataMLX>:
{
	//printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
	k_work_submit(&work_mlx);

}
extern void sendDataMLX(){
   10d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10d88:	b085      	sub	sp, #20
    mlx_readData(&mlxData.x,&mlxData.y,&mlxData.z,mlxdev);
   10d8a:	4d1b      	ldr	r5, [pc, #108]	; (10df8 <sendDataMLX+0x74>)
   10d8c:	f1a5 0408 	sub.w	r4, r5, #8
   10d90:	4b1a      	ldr	r3, [pc, #104]	; (10dfc <sendDataMLX+0x78>)
   10d92:	681b      	ldr	r3, [r3, #0]
   10d94:	462a      	mov	r2, r5
   10d96:	1f29      	subs	r1, r5, #4
   10d98:	4620      	mov	r0, r4
   10d9a:	f000 fd55 	bl	11848 <mlx_readData>
	if(PRINT_SENSOR_DATA){
    	printk("MLX: x: %f y: %f z: %f \n",mlxData.x,mlxData.y,mlxData.z);
   10d9e:	f8d4 8004 	ldr.w	r8, [r4, #4]
   10da2:	f8d4 9008 	ldr.w	r9, [r4, #8]
   10da6:	f855 0c08 	ldr.w	r0, [r5, #-8]
   10daa:	f7ef fbc1 	bl	530 <__aeabi_f2d>
   10dae:	4606      	mov	r6, r0
   10db0:	460f      	mov	r7, r1
   10db2:	4648      	mov	r0, r9
   10db4:	f7ef fbbc 	bl	530 <__aeabi_f2d>
   10db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   10dbc:	4640      	mov	r0, r8
   10dbe:	f7ef fbb7 	bl	530 <__aeabi_f2d>
   10dc2:	e9cd 0100 	strd	r0, r1, [sp]
   10dc6:	4632      	mov	r2, r6
   10dc8:	463b      	mov	r3, r7
   10dca:	480d      	ldr	r0, [pc, #52]	; (10e00 <sendDataMLX+0x7c>)
   10dcc:	f00e ff53 	bl	1fc76 <printk>
	return z_impl_k_uptime_ticks();
   10dd0:	f014 fb83 	bl	254da <z_impl_k_uptime_ticks>
	}
	
	float timestamp = k_uptime_get() /1000.0;

	mlxData.array[0] = mlxData.x;
   10dd4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   10dd8:	6123      	str	r3, [r4, #16]
	mlxData.array[1] = mlxData.y;
   10dda:	6863      	ldr	r3, [r4, #4]
   10ddc:	6163      	str	r3, [r4, #20]
	mlxData.array[2] = mlxData.z;
   10dde:	68a3      	ldr	r3, [r4, #8]
   10de0:	61a3      	str	r3, [r4, #24]
	mlxData.array[3] = mlxData.timestamp;
   10de2:	68e3      	ldr	r3, [r4, #12]
   10de4:	61e3      	str	r3, [r4, #28]

	sendData(SENSOR_MLX_ID, &mlxData.array, sizeof(mlxData.array));
   10de6:	2210      	movs	r2, #16
   10de8:	18a1      	adds	r1, r4, r2
   10dea:	2005      	movs	r0, #5
   10dec:	f7ff ff64 	bl	10cb8 <sendData>
}
   10df0:	b005      	add	sp, #20
   10df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10df6:	bf00      	nop
   10df8:	200022a8 	.word	0x200022a8
   10dfc:	20002320 	.word	0x20002320
   10e00:	00026268 	.word	0x00026268

00010e04 <mlx_int1_triggered>:
{
   10e04:	b508      	push	{r3, lr}
	k_work_submit(&work_mlx);
   10e06:	4802      	ldr	r0, [pc, #8]	; (10e10 <mlx_int1_triggered+0xc>)
   10e08:	f00a fa06 	bl	1b218 <k_work_submit>
}
   10e0c:	bd08      	pop	{r3, pc}
   10e0e:	bf00      	nop
   10e10:	20002324 	.word	0x20002324

00010e14 <initMLX>:
extern int8_t initMLX(struct device *i2c_dev){
   10e14:	b508      	push	{r3, lr}
	    mlxdev = i2c_dev;
   10e16:	4b03      	ldr	r3, [pc, #12]	; (10e24 <initMLX+0x10>)
   10e18:	6018      	str	r0, [r3, #0]
    	return mlx_init(mlxdev);
   10e1a:	f00e fe7f 	bl	1fb1c <mlx_init>
}
   10e1e:	b240      	sxtb	r0, r0
   10e20:	bd08      	pop	{r3, pc}
   10e22:	bf00      	nop
   10e24:	20002320 	.word	0x20002320

00010e28 <init_Interrupt_MLX>:

int8_t init_Interrupt_MLX(){
   10e28:	b510      	push	{r4, lr}
    int8_t returnValue;

	k_work_init(&work_mlx, sendDataMLX);
   10e2a:	4927      	ldr	r1, [pc, #156]	; (10ec8 <init_Interrupt_MLX+0xa0>)
   10e2c:	4827      	ldr	r0, [pc, #156]	; (10ecc <init_Interrupt_MLX+0xa4>)
   10e2e:	f014 f880 	bl	24f32 <k_work_init>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   10e32:	4827      	ldr	r0, [pc, #156]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e34:	f013 fdbf 	bl	249b6 <z_device_ready>
   10e38:	2800      	cmp	r0, #0
   10e3a:	d02e      	beq.n	10e9a <init_Interrupt_MLX+0x72>

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
	const struct gpio_driver_api *api =
   10e3c:	4824      	ldr	r0, [pc, #144]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e3e:	6881      	ldr	r1, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   10e40:	6902      	ldr	r2, [r0, #16]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10e42:	6813      	ldr	r3, [r2, #0]
   10e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10e48:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   10e4a:	680b      	ldr	r3, [r1, #0]
   10e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
   10e50:	210f      	movs	r1, #15
   10e52:	4798      	blx	r3
		printk("Error: button device %s is not ready\n",
		       mlx_int1.port->name);
		return 1;
	}

	returnValue = gpio_pin_configure_dt(&mlx_int1, GPIO_INPUT);
   10e54:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10e56:	bb3c      	cbnz	r4, 10ea8 <init_Interrupt_MLX+0x80>
	const struct gpio_driver_api *api =
   10e58:	481d      	ldr	r0, [pc, #116]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e5a:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10e5c:	699c      	ldr	r4, [r3, #24]
   10e5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   10e62:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   10e66:	210f      	movs	r1, #15
   10e68:	47a0      	blx	r4
		printk("Error %d: failed to configure %s pin %d\n",
		       returnValue, mlx_int1.port->name, mlx_int1.pin);
		return returnValue;
	}

	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
   10e6a:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10e6c:	bb24      	cbnz	r4, 10eb8 <init_Interrupt_MLX+0x90>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   10e6e:	4b19      	ldr	r3, [pc, #100]	; (10ed4 <init_Interrupt_MLX+0xac>)
   10e70:	4a19      	ldr	r2, [pc, #100]	; (10ed8 <init_Interrupt_MLX+0xb0>)
   10e72:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   10e74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10e78:	609a      	str	r2, [r3, #8]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   10e7a:	4b15      	ldr	r3, [pc, #84]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e7c:	689b      	ldr	r3, [r3, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   10e7e:	69db      	ldr	r3, [r3, #28]
   10e80:	b11b      	cbz	r3, 10e8a <init_Interrupt_MLX+0x62>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10e82:	2201      	movs	r2, #1
   10e84:	4913      	ldr	r1, [pc, #76]	; (10ed4 <init_Interrupt_MLX+0xac>)
   10e86:	4812      	ldr	r0, [pc, #72]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e88:	4798      	blx	r3
		return returnValue;
	}

	gpio_init_callback(&mlx_int1_cb_data, mlx_int1_triggered, BIT(mlx_int1.pin));
	gpio_add_callback(mlx_int1.port, &mlx_int1_cb_data);
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);
   10e8a:	220f      	movs	r2, #15
   10e8c:	4b10      	ldr	r3, [pc, #64]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e8e:	6819      	ldr	r1, [r3, #0]
   10e90:	4812      	ldr	r0, [pc, #72]	; (10edc <init_Interrupt_MLX+0xb4>)
   10e92:	f00e fef0 	bl	1fc76 <printk>

    return returnValue;
}
   10e96:	4620      	mov	r0, r4
   10e98:	bd10      	pop	{r4, pc}
		printk("Error: button device %s is not ready\n",
   10e9a:	4b0d      	ldr	r3, [pc, #52]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10e9c:	6819      	ldr	r1, [r3, #0]
   10e9e:	4810      	ldr	r0, [pc, #64]	; (10ee0 <init_Interrupt_MLX+0xb8>)
   10ea0:	f00e fee9 	bl	1fc76 <printk>
		return 1;
   10ea4:	2401      	movs	r4, #1
   10ea6:	e7f6      	b.n	10e96 <init_Interrupt_MLX+0x6e>
		printk("Error %d: failed to configure %s pin %d\n",
   10ea8:	230f      	movs	r3, #15
   10eaa:	4a09      	ldr	r2, [pc, #36]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10eac:	6812      	ldr	r2, [r2, #0]
   10eae:	4621      	mov	r1, r4
   10eb0:	480c      	ldr	r0, [pc, #48]	; (10ee4 <init_Interrupt_MLX+0xbc>)
   10eb2:	f00e fee0 	bl	1fc76 <printk>
		return returnValue;
   10eb6:	e7ee      	b.n	10e96 <init_Interrupt_MLX+0x6e>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10eb8:	230f      	movs	r3, #15
   10eba:	4a05      	ldr	r2, [pc, #20]	; (10ed0 <init_Interrupt_MLX+0xa8>)
   10ebc:	6812      	ldr	r2, [r2, #0]
   10ebe:	4621      	mov	r1, r4
   10ec0:	4809      	ldr	r0, [pc, #36]	; (10ee8 <init_Interrupt_MLX+0xc0>)
   10ec2:	f00e fed8 	bl	1fc76 <printk>
		return returnValue;
   10ec6:	e7e6      	b.n	10e96 <init_Interrupt_MLX+0x6e>
   10ec8:	00010d85 	.word	0x00010d85
   10ecc:	20002324 	.word	0x20002324
   10ed0:	000258f8 	.word	0x000258f8
   10ed4:	20002314 	.word	0x20002314
   10ed8:	00010e05 	.word	0x00010e05
   10edc:	00026310 	.word	0x00026310
   10ee0:	00026284 	.word	0x00026284
   10ee4:	000262ac 	.word	0x000262ac
   10ee8:	000262d8 	.word	0x000262d8

00010eec <sleepMLX>:

extern uint8_t sleepMLX(bool SLEEP) {
   10eec:	b508      	push	{r3, lr}
	if(SLEEP){
   10eee:	b128      	cbz	r0, 10efc <sleepMLX+0x10>
		return mlx_exitMode(mlxdev);
   10ef0:	4b05      	ldr	r3, [pc, #20]	; (10f08 <sleepMLX+0x1c>)
   10ef2:	6818      	ldr	r0, [r3, #0]
   10ef4:	f00e fda4 	bl	1fa40 <mlx_exitMode>
   10ef8:	b2c0      	uxtb	r0, r0
	}else{
		return mlx_enable(mlxdev);
	}
}
   10efa:	bd08      	pop	{r3, pc}
		return mlx_enable(mlxdev);
   10efc:	4b02      	ldr	r3, [pc, #8]	; (10f08 <sleepMLX+0x1c>)
   10efe:	6818      	ldr	r0, [r3, #0]
   10f00:	f00d ffbe 	bl	1ee80 <mlx_enable>
   10f04:	b2c0      	uxtb	r0, r0
   10f06:	e7f8      	b.n	10efa <sleepMLX+0xe>
   10f08:	20002320 	.word	0x20002320

00010f0c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
   10f0c:	b538      	push	{r3, r4, r5, lr}
   10f0e:	4605      	mov	r5, r0
   10f10:	460c      	mov	r4, r1
    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   10f12:	7843      	ldrb	r3, [r0, #1]
   10f14:	7800      	ldrb	r0, [r0, #0]
   10f16:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10f1a:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   10f1e:	f7ef fae5 	bl	4ec <__aeabi_ui2d>
   10f22:	2200      	movs	r2, #0
   10f24:	4b5a      	ldr	r3, [pc, #360]	; (11090 <parse_calib_data+0x184>)
   10f26:	f7ef fb5b 	bl	5e0 <__aeabi_dmul>
   10f2a:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   10f2e:	78eb      	ldrb	r3, [r5, #3]
   10f30:	78a8      	ldrb	r0, [r5, #2]
   10f32:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10f36:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    temp_var = 1073741824.0f;
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   10f3a:	f7ef fad7 	bl	4ec <__aeabi_ui2d>
   10f3e:	2200      	movs	r2, #0
   10f40:	4b54      	ldr	r3, [pc, #336]	; (11094 <parse_calib_data+0x188>)
   10f42:	f7ef fb4d 	bl	5e0 <__aeabi_dmul>
   10f46:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   10f4a:	f995 0004 	ldrsb.w	r0, [r5, #4]
   10f4e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    temp_var = 281474976710656.0f;
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   10f52:	f7ef fadb 	bl	50c <__aeabi_i2d>
   10f56:	2200      	movs	r2, #0
   10f58:	4b4f      	ldr	r3, [pc, #316]	; (11098 <parse_calib_data+0x18c>)
   10f5a:	f7ef fb41 	bl	5e0 <__aeabi_dmul>
   10f5e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   10f62:	79ab      	ldrb	r3, [r5, #6]
   10f64:	7968      	ldrb	r0, [r5, #5]
   10f66:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10f6a:	b200      	sxth	r0, r0
   10f6c:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    temp_var = 1048576.0f;
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   10f70:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   10f74:	f7ef faca 	bl	50c <__aeabi_i2d>
   10f78:	2200      	movs	r2, #0
   10f7a:	4b48      	ldr	r3, [pc, #288]	; (1109c <parse_calib_data+0x190>)
   10f7c:	f7ef fb30 	bl	5e0 <__aeabi_dmul>
   10f80:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   10f84:	7a2b      	ldrb	r3, [r5, #8]
   10f86:	79e8      	ldrb	r0, [r5, #7]
   10f88:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10f8c:	b200      	sxth	r0, r0
   10f8e:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    temp_var = 536870912.0f;
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   10f92:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   10f96:	f7ef fab9 	bl	50c <__aeabi_i2d>
   10f9a:	2200      	movs	r2, #0
   10f9c:	4b40      	ldr	r3, [pc, #256]	; (110a0 <parse_calib_data+0x194>)
   10f9e:	f7ef fb1f 	bl	5e0 <__aeabi_dmul>
   10fa2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   10fa6:	f995 0009 	ldrsb.w	r0, [r5, #9]
   10faa:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    temp_var = 4294967296.0f;
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   10fae:	f7ef faad 	bl	50c <__aeabi_i2d>
   10fb2:	2200      	movs	r2, #0
   10fb4:	4b3b      	ldr	r3, [pc, #236]	; (110a4 <parse_calib_data+0x198>)
   10fb6:	f7ef fb13 	bl	5e0 <__aeabi_dmul>
   10fba:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   10fbe:	f995 000a 	ldrsb.w	r0, [r5, #10]
   10fc2:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    temp_var = 137438953472.0f;
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   10fc6:	f7ef faa1 	bl	50c <__aeabi_i2d>
   10fca:	2200      	movs	r2, #0
   10fcc:	4b36      	ldr	r3, [pc, #216]	; (110a8 <parse_calib_data+0x19c>)
   10fce:	f7ef fb07 	bl	5e0 <__aeabi_dmul>
   10fd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   10fd6:	7b2b      	ldrb	r3, [r5, #12]
   10fd8:	7ae8      	ldrb	r0, [r5, #11]
   10fda:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10fde:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c

    /* 1 / 2^3 */
    temp_var = 0.125f;
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   10fe2:	f7ef fa83 	bl	4ec <__aeabi_ui2d>
   10fe6:	2200      	movs	r2, #0
   10fe8:	4b30      	ldr	r3, [pc, #192]	; (110ac <parse_calib_data+0x1a0>)
   10fea:	f7ef faf9 	bl	5e0 <__aeabi_dmul>
   10fee:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   10ff2:	7bab      	ldrb	r3, [r5, #14]
   10ff4:	7b68      	ldrb	r0, [r5, #13]
   10ff6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10ffa:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    temp_var = 64.0f;
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   10ffe:	f7ef fa75 	bl	4ec <__aeabi_ui2d>
   11002:	2200      	movs	r2, #0
   11004:	4b2a      	ldr	r3, [pc, #168]	; (110b0 <parse_calib_data+0x1a4>)
   11006:	f7ef faeb 	bl	5e0 <__aeabi_dmul>
   1100a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   1100e:	f995 000f 	ldrsb.w	r0, [r5, #15]
   11012:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    temp_var = 256.0f;
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   11016:	f7ef fa79 	bl	50c <__aeabi_i2d>
   1101a:	2200      	movs	r2, #0
   1101c:	4b25      	ldr	r3, [pc, #148]	; (110b4 <parse_calib_data+0x1a8>)
   1101e:	f7ef fadf 	bl	5e0 <__aeabi_dmul>
   11022:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   11026:	f995 0010 	ldrsb.w	r0, [r5, #16]
   1102a:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    temp_var = 32768.0f;
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   1102e:	f7ef fa6d 	bl	50c <__aeabi_i2d>
   11032:	2200      	movs	r2, #0
   11034:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   11038:	f7ef fad2 	bl	5e0 <__aeabi_dmul>
   1103c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   11040:	7cab      	ldrb	r3, [r5, #18]
   11042:	7c68      	ldrb	r0, [r5, #17]
   11044:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   11048:	b200      	sxth	r0, r0
   1104a:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    temp_var = 281474976710656.0f;
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   1104e:	f7ef fa5d 	bl	50c <__aeabi_i2d>
   11052:	2200      	movs	r2, #0
   11054:	4b10      	ldr	r3, [pc, #64]	; (11098 <parse_calib_data+0x18c>)
   11056:	f7ef fac3 	bl	5e0 <__aeabi_dmul>
   1105a:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   1105e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   11062:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    temp_var = 281474976710656.0f;
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   11066:	f7ef fa51 	bl	50c <__aeabi_i2d>
   1106a:	2200      	movs	r2, #0
   1106c:	4b0a      	ldr	r3, [pc, #40]	; (11098 <parse_calib_data+0x18c>)
   1106e:	f7ef fab7 	bl	5e0 <__aeabi_dmul>
   11072:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   11076:	f995 0014 	ldrsb.w	r0, [r5, #20]
   1107a:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    temp_var = 36893488147419103232.0f;
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   1107e:	f7ef fa45 	bl	50c <__aeabi_i2d>
   11082:	2200      	movs	r2, #0
   11084:	4b0c      	ldr	r3, [pc, #48]	; (110b8 <parse_calib_data+0x1ac>)
   11086:	f7ef faab 	bl	5e0 <__aeabi_dmul>
   1108a:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   1108e:	bd38      	pop	{r3, r4, r5, pc}
   11090:	40700000 	.word	0x40700000
   11094:	3e100000 	.word	0x3e100000
   11098:	3cf00000 	.word	0x3cf00000
   1109c:	3eb00000 	.word	0x3eb00000
   110a0:	3e200000 	.word	0x3e200000
   110a4:	3df00000 	.word	0x3df00000
   110a8:	3da00000 	.word	0x3da00000
   110ac:	40200000 	.word	0x40200000
   110b0:	3f900000 	.word	0x3f900000
   110b4:	3f700000 	.word	0x3f700000
   110b8:	3be00000 	.word	0x3be00000

000110bc <calculate_press_meas_time>:
{
   110bc:	b500      	push	{lr}
   110be:	b083      	sub	sp, #12
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
   110c0:	f8d0 00b3 	ldr.w	r0, [r0, #179]	; 0xb3
    partial_out = pow_bmp3(base, odr_filter.press_os);
   110c4:	b2c2      	uxtb	r2, r0
   110c6:	2000      	movs	r0, #0
   110c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   110cc:	f00d ffa4 	bl	1f018 <pow_bmp3>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   110d0:	4905      	ldr	r1, [pc, #20]	; (110e8 <calculate_press_meas_time+0x2c>)
   110d2:	f7ef f815 	bl	100 <__aeabi_fmul>
   110d6:	4905      	ldr	r1, [pc, #20]	; (110ec <calculate_press_meas_time+0x30>)
   110d8:	f7ef fcea 	bl	ab0 <__addsf3>
   110dc:	f7ef fe66 	bl	dac <__aeabi_f2uiz>
}
   110e0:	b003      	add	sp, #12
   110e2:	f85d fb04 	ldr.w	pc, [sp], #4
   110e6:	bf00      	nop
   110e8:	44fa0000 	.word	0x44fa0000
   110ec:	43c40000 	.word	0x43c40000

000110f0 <calculate_temp_meas_time>:
{
   110f0:	b500      	push	{lr}
   110f2:	b083      	sub	sp, #12
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
   110f4:	f8d0 00b3 	ldr.w	r0, [r0, #179]	; 0xb3
    partial_out = pow_bmp3(base, odr_filter.temp_os);
   110f8:	f3c0 2207 	ubfx	r2, r0, #8, #8
   110fc:	2000      	movs	r0, #0
   110fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11102:	f00d ff89 	bl	1f018 <pow_bmp3>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   11106:	4905      	ldr	r1, [pc, #20]	; (1111c <calculate_temp_meas_time+0x2c>)
   11108:	f7ee fffa 	bl	100 <__aeabi_fmul>
   1110c:	4904      	ldr	r1, [pc, #16]	; (11120 <calculate_temp_meas_time+0x30>)
   1110e:	f7ef fccf 	bl	ab0 <__addsf3>
   11112:	f7ef fe4b 	bl	dac <__aeabi_f2uiz>
}
   11116:	b003      	add	sp, #12
   11118:	f85d fb04 	ldr.w	pc, [sp], #4
   1111c:	44fa0000 	.word	0x44fa0000
   11120:	439c8000 	.word	0x439c8000

00011124 <validate_osr_and_odr_settings>:
{
   11124:	b530      	push	{r4, r5, lr}
   11126:	b093      	sub	sp, #76	; 0x4c
   11128:	4604      	mov	r4, r0
    uint32_t odr[18] = {
   1112a:	2248      	movs	r2, #72	; 0x48
   1112c:	4910      	ldr	r1, [pc, #64]	; (11170 <validate_osr_and_odr_settings+0x4c>)
   1112e:	4668      	mov	r0, sp
   11130:	f014 faf9 	bl	25726 <memcpy>
    if (dev->settings.press_en)
   11134:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
   11138:	b1bb      	cbz	r3, 1116a <validate_osr_and_odr_settings+0x46>
        meas_t_p += calculate_press_meas_time(dev);
   1113a:	4620      	mov	r0, r4
   1113c:	f7ff ffbe 	bl	110bc <calculate_press_meas_time>
   11140:	4605      	mov	r5, r0
    if (dev->settings.temp_en)
   11142:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   11146:	b11b      	cbz	r3, 11150 <validate_osr_and_odr_settings+0x2c>
        meas_t_p += calculate_temp_meas_time(dev);
   11148:	4620      	mov	r0, r4
   1114a:	f7ff ffd1 	bl	110f0 <calculate_temp_meas_time>
   1114e:	4405      	add	r5, r0
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   11150:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
   11154:	aa12      	add	r2, sp, #72	; 0x48
   11156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1115a:	f853 1c48 	ldr.w	r1, [r3, #-72]
   1115e:	f105 00ea 	add.w	r0, r5, #234	; 0xea
   11162:	f00d feb2 	bl	1eeca <verify_meas_time_and_odr_duration>
}
   11166:	b013      	add	sp, #76	; 0x4c
   11168:	bd30      	pop	{r4, r5, pc}
    uint32_t meas_t_p = 0;
   1116a:	2500      	movs	r5, #0
   1116c:	e7e9      	b.n	11142 <validate_osr_and_odr_settings+0x1e>
   1116e:	bf00      	nop
   11170:	00025bb0 	.word	0x00025bb0

00011174 <set_odr_filter_settings>:
{
   11174:	b570      	push	{r4, r5, r6, lr}
   11176:	b086      	sub	sp, #24
   11178:	4605      	mov	r5, r0
   1117a:	460c      	mov	r4, r1
    uint8_t reg_addr[3] = { 0 };
   1117c:	4b27      	ldr	r3, [pc, #156]	; (1121c <set_odr_filter_settings+0xa8>)
   1117e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   11182:	f8ad 3014 	strh.w	r3, [sp, #20]
   11186:	2300      	movs	r3, #0
   11188:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8_t len = 0;
   1118c:	f88d 300f 	strb.w	r3, [sp, #15]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   11190:	460b      	mov	r3, r1
   11192:	2204      	movs	r2, #4
   11194:	a904      	add	r1, sp, #16
   11196:	201c      	movs	r0, #28
   11198:	f00e f853 	bl	1f242 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1119c:	4606      	mov	r6, r0
   1119e:	b998      	cbnz	r0, 111c8 <set_odr_filter_settings+0x54>
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
   111a0:	4629      	mov	r1, r5
   111a2:	2030      	movs	r0, #48	; 0x30
   111a4:	f00e f82d 	bl	1f202 <are_settings_changed>
   111a8:	b988      	cbnz	r0, 111ce <set_odr_filter_settings+0x5a>
        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
   111aa:	4629      	mov	r1, r5
   111ac:	2080      	movs	r0, #128	; 0x80
   111ae:	f00e f828 	bl	1f202 <are_settings_changed>
   111b2:	b9a8      	cbnz	r0, 111e0 <set_odr_filter_settings+0x6c>
        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
   111b4:	4629      	mov	r1, r5
   111b6:	2040      	movs	r0, #64	; 0x40
   111b8:	f00e f823 	bl	1f202 <are_settings_changed>
   111bc:	b9c0      	cbnz	r0, 111f0 <set_odr_filter_settings+0x7c>
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   111be:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   111c2:	2b03      	cmp	r3, #3
   111c4:	d01c      	beq.n	11200 <set_odr_filter_settings+0x8c>
        if (rslt == BMP3_OK)
   111c6:	b306      	cbz	r6, 1120a <set_odr_filter_settings+0x96>
}
   111c8:	4630      	mov	r0, r6
   111ca:	b006      	add	sp, #24
   111cc:	bd70      	pop	{r4, r5, r6, pc}
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
   111ce:	9400      	str	r4, [sp, #0]
   111d0:	f10d 030f 	add.w	r3, sp, #15
   111d4:	aa04      	add	r2, sp, #16
   111d6:	a905      	add	r1, sp, #20
   111d8:	4628      	mov	r0, r5
   111da:	f00d fe7d 	bl	1eed8 <fill_osr_data>
   111de:	e7e4      	b.n	111aa <set_odr_filter_settings+0x36>
            fill_odr_data(reg_addr, reg_data, &len, dev);
   111e0:	4623      	mov	r3, r4
   111e2:	f10d 020f 	add.w	r2, sp, #15
   111e6:	a904      	add	r1, sp, #16
   111e8:	a805      	add	r0, sp, #20
   111ea:	f00d fea5 	bl	1ef38 <fill_odr_data>
   111ee:	e7e1      	b.n	111b4 <set_odr_filter_settings+0x40>
            fill_filter_data(reg_addr, reg_data, &len, dev);
   111f0:	4623      	mov	r3, r4
   111f2:	f10d 020f 	add.w	r2, sp, #15
   111f6:	a904      	add	r1, sp, #16
   111f8:	a805      	add	r0, sp, #20
   111fa:	f00d feb8 	bl	1ef6e <fill_filter_data>
   111fe:	e7de      	b.n	111be <set_odr_filter_settings+0x4a>
            rslt = validate_osr_and_odr_settings(dev);
   11200:	4620      	mov	r0, r4
   11202:	f7ff ff8f 	bl	11124 <validate_osr_and_odr_settings>
   11206:	4606      	mov	r6, r0
   11208:	e7dd      	b.n	111c6 <set_odr_filter_settings+0x52>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   1120a:	4623      	mov	r3, r4
   1120c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11210:	a904      	add	r1, sp, #16
   11212:	a805      	add	r0, sp, #20
   11214:	f00e f88f 	bl	1f336 <bmp3_set_regs>
   11218:	4606      	mov	r6, r0
   1121a:	e7d5      	b.n	111c8 <set_odr_filter_settings+0x54>
   1121c:	00025bb0 	.word	0x00025bb0

00011220 <sendDataBMP>:

static void app_us_delay(uint32_t period, void *intf_ptr) {
	return k_busy_wait(period);
}

extern void sendDataBMP(void){
   11220:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   11224:	b082      	sub	sp, #8
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   11226:	4d2b      	ldr	r5, [pc, #172]	; (112d4 <sendDataBMP+0xb4>)
   11228:	4a2b      	ldr	r2, [pc, #172]	; (112d8 <sendDataBMP+0xb8>)
   1122a:	4629      	mov	r1, r5
   1122c:	4b2b      	ldr	r3, [pc, #172]	; (112dc <sendDataBMP+0xbc>)
   1122e:	7818      	ldrb	r0, [r3, #0]
   11230:	f00e faf2 	bl	1f818 <bmp3_get_sensor_data>
   11234:	4b2a      	ldr	r3, [pc, #168]	; (112e0 <sendDataBMP+0xc0>)
   11236:	7018      	strb	r0, [r3, #0]
	if(PRINT_SENSOR_DATA){
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
   11238:	e9d5 2300 	ldrd	r2, r3, [r5]
   1123c:	e9cd 2300 	strd	r2, r3, [sp]
   11240:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   11244:	4827      	ldr	r0, [pc, #156]	; (112e4 <sendDataBMP+0xc4>)
   11246:	f00e fd16 	bl	1fc76 <printk>
   1124a:	f014 f946 	bl	254da <z_impl_k_uptime_ticks>
   1124e:	014b      	lsls	r3, r1, #5
   11250:	0142      	lsls	r2, r0, #5
   11252:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   11256:	1a13      	subs	r3, r2, r0
   11258:	eb64 0201 	sbc.w	r2, r4, r1
   1125c:	0094      	lsls	r4, r2, #2
   1125e:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   11262:	009e      	lsls	r6, r3, #2
   11264:	4622      	mov	r2, r4
   11266:	1833      	adds	r3, r6, r0
   11268:	eb41 0202 	adc.w	r2, r1, r2
   1126c:	00d1      	lsls	r1, r2, #3
   1126e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   11272:	00d8      	lsls	r0, r3, #3
   11274:	0bc3      	lsrs	r3, r0, #15
	}
	float timestamp = k_uptime_get() /1000.0;
   11276:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
   1127a:	0bc9      	lsrs	r1, r1, #15
   1127c:	f7ef f982 	bl	584 <__aeabi_l2d>
   11280:	2200      	movs	r2, #0
   11282:	4b19      	ldr	r3, [pc, #100]	; (112e8 <sendDataBMP+0xc8>)
   11284:	f7ef fad6 	bl	834 <__aeabi_ddiv>
   11288:	f7ef fbbc 	bl	a04 <__aeabi_d2f>
   1128c:	4606      	mov	r6, r0

	bmpData.pressure = myData.pressure / 100.0; //Pa to hPa
   1128e:	e9d5 8902 	ldrd	r8, r9, [r5, #8]
   11292:	2200      	movs	r2, #0
   11294:	4b15      	ldr	r3, [pc, #84]	; (112ec <sendDataBMP+0xcc>)
   11296:	4640      	mov	r0, r8
   11298:	4649      	mov	r1, r9
   1129a:	f7ef facb 	bl	834 <__aeabi_ddiv>
   1129e:	f7ef fbb1 	bl	a04 <__aeabi_d2f>
   112a2:	4c13      	ldr	r4, [pc, #76]	; (112f0 <sendDataBMP+0xd0>)
   112a4:	6020      	str	r0, [r4, #0]
	bmpData.temperature = myData.temperature;
   112a6:	e9d5 0100 	ldrd	r0, r1, [r5]
   112aa:	f7ef fbab 	bl	a04 <__aeabi_d2f>
   112ae:	4605      	mov	r5, r0
   112b0:	6060      	str	r0, [r4, #4]
	bmpData.timestamp=timestamp;
   112b2:	60a6      	str	r6, [r4, #8]
	
	bmpData.array[0] = myData.pressure;
   112b4:	4640      	mov	r0, r8
   112b6:	4649      	mov	r1, r9
   112b8:	f7ef fba4 	bl	a04 <__aeabi_d2f>
   112bc:	60e0      	str	r0, [r4, #12]
	bmpData.array[1] = myData.temperature;
   112be:	6125      	str	r5, [r4, #16]
	bmpData.array[2] = bmpData.timestamp;
   112c0:	6166      	str	r6, [r4, #20]

	sendData(SENSOR_BMP384_ID, &bmpData.array, 4*3);
   112c2:	220c      	movs	r2, #12
   112c4:	18a1      	adds	r1, r4, r2
   112c6:	2001      	movs	r0, #1
   112c8:	f7ff fcf6 	bl	10cb8 <sendData>
}
   112cc:	b002      	add	sp, #8
   112ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   112d2:	bf00      	nop
   112d4:	20001970 	.word	0x20001970
   112d8:	200018a0 	.word	0x200018a0
   112dc:	200009f4 	.word	0x200009f4
   112e0:	20003f6b 	.word	0x20003f6b
   112e4:	00026330 	.word	0x00026330
   112e8:	408f4000 	.word	0x408f4000
   112ec:	40590000 	.word	0x40590000
   112f0:	20002244 	.word	0x20002244

000112f4 <bmpDataReady>:

static const struct gpio_dt_spec bmpInt = GPIO_DT_SPEC_GET_OR(BMP_INT, gpios,{0});
static struct gpio_callback bmpInt_cb_data;

static void bmpDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
   112f4:	b508      	push	{r3, lr}
	k_work_submit(&work_data);
   112f6:	4802      	ldr	r0, [pc, #8]	; (11300 <bmpDataReady+0xc>)
   112f8:	f009 ff8e 	bl	1b218 <k_work_submit>
}
   112fc:	bd08      	pop	{r3, pc}
   112fe:	bf00      	nop
   11300:	20002350 	.word	0x20002350

00011304 <init_Interrupt_BMP>:

int8_t init_Interrupt_BMP(){
   11304:	b510      	push	{r4, lr}
    int8_t returnValue;

	k_work_init(&work_data, sendDataBMP);
   11306:	4929      	ldr	r1, [pc, #164]	; (113ac <init_Interrupt_BMP+0xa8>)
   11308:	4829      	ldr	r0, [pc, #164]	; (113b0 <init_Interrupt_BMP+0xac>)
   1130a:	f013 fe12 	bl	24f32 <k_work_init>
	k_work_init(&work_config, setConfigBMP);
   1130e:	4929      	ldr	r1, [pc, #164]	; (113b4 <init_Interrupt_BMP+0xb0>)
   11310:	4829      	ldr	r0, [pc, #164]	; (113b8 <init_Interrupt_BMP+0xb4>)
   11312:	f013 fe0e 	bl	24f32 <k_work_init>
   11316:	4829      	ldr	r0, [pc, #164]	; (113bc <init_Interrupt_BMP+0xb8>)
   11318:	f013 fb4d 	bl	249b6 <z_device_ready>
   1131c:	2800      	cmp	r0, #0
   1131e:	d02e      	beq.n	1137e <init_Interrupt_BMP+0x7a>
	const struct gpio_driver_api *api =
   11320:	4826      	ldr	r0, [pc, #152]	; (113bc <init_Interrupt_BMP+0xb8>)
   11322:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   11324:	6902      	ldr	r2, [r0, #16]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11326:	6813      	ldr	r3, [r2, #0]
   11328:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1132c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1132e:	680b      	ldr	r3, [r1, #0]
   11330:	f44f 7280 	mov.w	r2, #256	; 0x100
   11334:	2111      	movs	r1, #17
   11336:	4798      	blx	r3
		printk("Error: bmp interrupt %s is not ready\n",
		       bmpInt.port->name);
		return 1;
	}

	returnValue = gpio_pin_configure_dt(&bmpInt, GPIO_INPUT);
   11338:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   1133a:	bb3c      	cbnz	r4, 1138c <init_Interrupt_BMP+0x88>
	const struct gpio_driver_api *api =
   1133c:	481f      	ldr	r0, [pc, #124]	; (113bc <init_Interrupt_BMP+0xb8>)
   1133e:	6883      	ldr	r3, [r0, #8]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11340:	699c      	ldr	r4, [r3, #24]
   11342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   11346:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   1134a:	2111      	movs	r1, #17
   1134c:	47a0      	blx	r4
		printk("Error %d: failed to configure %s pin %d\n",
		       returnValue, bmpInt.port->name, bmpInt.pin);
		return returnValue;
	}

	returnValue = gpio_pin_interrupt_configure_dt(&bmpInt,GPIO_INT_EDGE_RISING);
   1134e:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11350:	bb24      	cbnz	r4, 1139c <init_Interrupt_BMP+0x98>
	callback->handler = handler;
   11352:	4b1b      	ldr	r3, [pc, #108]	; (113c0 <init_Interrupt_BMP+0xbc>)
   11354:	4a1b      	ldr	r2, [pc, #108]	; (113c4 <init_Interrupt_BMP+0xc0>)
   11356:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   11358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1135c:	609a      	str	r2, [r3, #8]
	const struct gpio_driver_api *api =
   1135e:	4b17      	ldr	r3, [pc, #92]	; (113bc <init_Interrupt_BMP+0xb8>)
   11360:	689b      	ldr	r3, [r3, #8]
	if (api->manage_callback == NULL) {
   11362:	69db      	ldr	r3, [r3, #28]
   11364:	b11b      	cbz	r3, 1136e <init_Interrupt_BMP+0x6a>
	return api->manage_callback(port, callback, true);
   11366:	2201      	movs	r2, #1
   11368:	4915      	ldr	r1, [pc, #84]	; (113c0 <init_Interrupt_BMP+0xbc>)
   1136a:	4814      	ldr	r0, [pc, #80]	; (113bc <init_Interrupt_BMP+0xb8>)
   1136c:	4798      	blx	r3
	}

	gpio_init_callback(&bmpInt_cb_data, bmpDataReady, BIT(bmpInt.pin));
	gpio_add_callback(bmpInt.port, &bmpInt_cb_data);

	if(DEBUG_MODE){printk("Set up BMP Interrupt button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);}
   1136e:	2211      	movs	r2, #17
   11370:	4b12      	ldr	r3, [pc, #72]	; (113bc <init_Interrupt_BMP+0xb8>)
   11372:	6819      	ldr	r1, [r3, #0]
   11374:	4814      	ldr	r0, [pc, #80]	; (113c8 <init_Interrupt_BMP+0xc4>)
   11376:	f00e fc7e 	bl	1fc76 <printk>
	
    return returnValue;
}
   1137a:	4620      	mov	r0, r4
   1137c:	bd10      	pop	{r4, pc}
		printk("Error: bmp interrupt %s is not ready\n",
   1137e:	4b0f      	ldr	r3, [pc, #60]	; (113bc <init_Interrupt_BMP+0xb8>)
   11380:	6819      	ldr	r1, [r3, #0]
   11382:	4812      	ldr	r0, [pc, #72]	; (113cc <init_Interrupt_BMP+0xc8>)
   11384:	f00e fc77 	bl	1fc76 <printk>
		return 1;
   11388:	2401      	movs	r4, #1
   1138a:	e7f6      	b.n	1137a <init_Interrupt_BMP+0x76>
		printk("Error %d: failed to configure %s pin %d\n",
   1138c:	2311      	movs	r3, #17
   1138e:	4a0b      	ldr	r2, [pc, #44]	; (113bc <init_Interrupt_BMP+0xb8>)
   11390:	6812      	ldr	r2, [r2, #0]
   11392:	4621      	mov	r1, r4
   11394:	480e      	ldr	r0, [pc, #56]	; (113d0 <init_Interrupt_BMP+0xcc>)
   11396:	f00e fc6e 	bl	1fc76 <printk>
		return returnValue;
   1139a:	e7ee      	b.n	1137a <init_Interrupt_BMP+0x76>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1139c:	2311      	movs	r3, #17
   1139e:	4a07      	ldr	r2, [pc, #28]	; (113bc <init_Interrupt_BMP+0xb8>)
   113a0:	6812      	ldr	r2, [r2, #0]
   113a2:	4621      	mov	r1, r4
   113a4:	480b      	ldr	r0, [pc, #44]	; (113d4 <init_Interrupt_BMP+0xd0>)
   113a6:	f00e fc66 	bl	1fc76 <printk>
		return returnValue;
   113aa:	e7e6      	b.n	1137a <init_Interrupt_BMP+0x76>
   113ac:	00011221 	.word	0x00011221
   113b0:	20002350 	.word	0x20002350
   113b4:	0001152d 	.word	0x0001152d
   113b8:	20002340 	.word	0x20002340
   113bc:	000258f8 	.word	0x000258f8
   113c0:	20002334 	.word	0x20002334
   113c4:	000112f5 	.word	0x000112f5
   113c8:	00026374 	.word	0x00026374
   113cc:	0002634c 	.word	0x0002634c
   113d0:	000262ac 	.word	0x000262ac
   113d4:	000262d8 	.word	0x000262d8

000113d8 <submitConfigBMP>:
extern void submitConfigBMP(){
   113d8:	b508      	push	{r3, lr}
	k_work_submit(&work_config);
   113da:	4802      	ldr	r0, [pc, #8]	; (113e4 <submitConfigBMP+0xc>)
   113dc:	f009 ff1c 	bl	1b218 <k_work_submit>
};
   113e0:	bd08      	pop	{r3, pc}
   113e2:	bf00      	nop
   113e4:	20002340 	.word	0x20002340

000113e8 <sleepBMP>:
extern uint8_t sleepBMP(bool SLEEP){
   113e8:	b508      	push	{r3, lr}
	if(SLEEP){
   113ea:	b138      	cbz	r0, 113fc <sleepBMP+0x14>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   113ec:	4807      	ldr	r0, [pc, #28]	; (1140c <sleepBMP+0x24>)
   113ee:	2300      	movs	r3, #0
   113f0:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   113f4:	f00e f9e1 	bl	1f7ba <bmp3_set_op_mode>
   113f8:	b2c0      	uxtb	r0, r0
	}else{
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
		return bmp3_set_op_mode(&bmp388_dev);
	}
};
   113fa:	bd08      	pop	{r3, pc}
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   113fc:	4803      	ldr	r0, [pc, #12]	; (1140c <sleepBMP+0x24>)
   113fe:	2303      	movs	r3, #3
   11400:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   11404:	f00e f9d9 	bl	1f7ba <bmp3_set_op_mode>
   11408:	b2c0      	uxtb	r0, r0
   1140a:	e7f6      	b.n	113fa <sleepBMP+0x12>
   1140c:	200018a0 	.word	0x200018a0

00011410 <initBMP384>:
void initBMP384(struct device *i2c_dev){
   11410:	b510      	push	{r4, lr}
   11412:	4604      	mov	r4, r0
	if (DEBUG_MODE){printk("BMP initialising...\n");}
   11414:	4836      	ldr	r0, [pc, #216]	; (114f0 <initBMP384+0xe0>)
   11416:	f00e fc2e 	bl	1fc76 <printk>
	bmp388_dev.intf = BMP3_I2C_INTF;
   1141a:	4836      	ldr	r0, [pc, #216]	; (114f4 <initBMP384+0xe4>)
   1141c:	2301      	movs	r3, #1
   1141e:	7203      	strb	r3, [r0, #8]
	bmp388_dev.intf_ptr = i2c_dev;
   11420:	6044      	str	r4, [r0, #4]
	bmp388_dev.intf_rslt = bmpResult;
   11422:	4c35      	ldr	r4, [pc, #212]	; (114f8 <initBMP384+0xe8>)
   11424:	7823      	ldrb	r3, [r4, #0]
   11426:	7243      	strb	r3, [r0, #9]
	bmp388_dev.dummy_byte = dByte;
   11428:	2300      	movs	r3, #0
   1142a:	7283      	strb	r3, [r0, #10]
	bmp388_dev.read = app_i2c_read;
   1142c:	4b33      	ldr	r3, [pc, #204]	; (114fc <initBMP384+0xec>)
   1142e:	60c3      	str	r3, [r0, #12]
	bmp388_dev.write = app_i2c_write;
   11430:	4b33      	ldr	r3, [pc, #204]	; (11500 <initBMP384+0xf0>)
   11432:	6103      	str	r3, [r0, #16]
	bmp388_dev.delay_us = app_us_delay;
   11434:	4b33      	ldr	r3, [pc, #204]	; (11504 <initBMP384+0xf4>)
   11436:	6143      	str	r3, [r0, #20]
	bmpResult = bmp3_init(&bmp388_dev);
   11438:	f00e f979 	bl	1f72e <bmp3_init>
   1143c:	7020      	strb	r0, [r4, #0]
	if(bmpResult != 0){
   1143e:	b380      	cbz	r0, 114a2 <initBMP384+0x92>
   11440:	4601      	mov	r1, r0
		printk("init error: %i \n",bmpResult);
   11442:	4831      	ldr	r0, [pc, #196]	; (11508 <initBMP384+0xf8>)
   11444:	f00e fc17 	bl	1fc76 <printk>
	if (DEBUG_MODE){printk("BMP applying settings...\n");}
   11448:	4830      	ldr	r0, [pc, #192]	; (1150c <initBMP384+0xfc>)
   1144a:	f00e fc14 	bl	1fc76 <printk>
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   1144e:	4929      	ldr	r1, [pc, #164]	; (114f4 <initBMP384+0xe4>)
   11450:	2301      	movs	r3, #1
   11452:	f881 30b1 	strb.w	r3, [r1, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   11456:	f881 30b2 	strb.w	r3, [r1, #178]	; 0xb2
    bmp388_dev.settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
   1145a:	f881 30b3 	strb.w	r3, [r1, #179]	; 0xb3
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   1145e:	2200      	movs	r2, #0
   11460:	f881 20b4 	strb.w	r2, [r1, #180]	; 0xb4
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   11464:	f881 30ba 	strb.w	r3, [r1, #186]	; 0xba
    bmp388_dev.settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_3;
   11468:	2202      	movs	r2, #2
   1146a:	f881 20b5 	strb.w	r2, [r1, #181]	; 0xb5
    bmp388_dev.settings.int_settings.level = BMP3_INT_PIN_ACTIVE_HIGH;
   1146e:	f881 30b8 	strb.w	r3, [r1, #184]	; 0xb8
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
   11472:	2307      	movs	r3, #7
   11474:	f881 30b6 	strb.w	r3, [r1, #182]	; 0xb6
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   11478:	f240 20fe 	movw	r0, #766	; 0x2fe
   1147c:	f00e f8d9 	bl	1f632 <bmp3_set_sensor_settings>
   11480:	4601      	mov	r1, r0
   11482:	4b1d      	ldr	r3, [pc, #116]	; (114f8 <initBMP384+0xe8>)
   11484:	7018      	strb	r0, [r3, #0]
	if(bmpResult != 0){
   11486:	b180      	cbz	r0, 114aa <initBMP384+0x9a>
		printk("BMP apply settings error: %i \n",bmpResult);
   11488:	4821      	ldr	r0, [pc, #132]	; (11510 <initBMP384+0x100>)
   1148a:	f00e fbf4 	bl	1fc76 <printk>
	if (bmpResult == BMP3_SENSOR_OK){
   1148e:	4b1a      	ldr	r3, [pc, #104]	; (114f8 <initBMP384+0xe8>)
   11490:	f993 3000 	ldrsb.w	r3, [r3]
   11494:	b16b      	cbz	r3, 114b2 <initBMP384+0xa2>
	bmpResult = sleepBMP(true);
   11496:	2001      	movs	r0, #1
   11498:	f7ff ffa6 	bl	113e8 <sleepBMP>
   1149c:	4b16      	ldr	r3, [pc, #88]	; (114f8 <initBMP384+0xe8>)
   1149e:	7018      	strb	r0, [r3, #0]
}
   114a0:	bd10      	pop	{r4, pc}
		printk("BMP init successful\n");
   114a2:	481c      	ldr	r0, [pc, #112]	; (11514 <initBMP384+0x104>)
   114a4:	f00e fbe7 	bl	1fc76 <printk>
   114a8:	e7ce      	b.n	11448 <initBMP384+0x38>
	else if (DEBUG_MODE){printk("BMP applied settings successfully\n");}
   114aa:	481b      	ldr	r0, [pc, #108]	; (11518 <initBMP384+0x108>)
   114ac:	f00e fbe3 	bl	1fc76 <printk>
   114b0:	e7ed      	b.n	1148e <initBMP384+0x7e>
		if (DEBUG_MODE){printk("BMP setting mode...\n");}
   114b2:	481a      	ldr	r0, [pc, #104]	; (1151c <initBMP384+0x10c>)
   114b4:	f00e fbdf 	bl	1fc76 <printk>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   114b8:	480e      	ldr	r0, [pc, #56]	; (114f4 <initBMP384+0xe4>)
   114ba:	2303      	movs	r3, #3
   114bc:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   114c0:	f00e f97b 	bl	1f7ba <bmp3_set_op_mode>
   114c4:	4601      	mov	r1, r0
   114c6:	4b0c      	ldr	r3, [pc, #48]	; (114f8 <initBMP384+0xe8>)
   114c8:	7018      	strb	r0, [r3, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   114ca:	b960      	cbnz	r0, 114e6 <initBMP384+0xd6>
			if (DEBUG_MODE){printk("BMP mode set successfully\n");}
   114cc:	4814      	ldr	r0, [pc, #80]	; (11520 <initBMP384+0x110>)
   114ce:	f00e fbd2 	bl	1fc76 <printk>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   114d2:	4b08      	ldr	r3, [pc, #32]	; (114f4 <initBMP384+0xe4>)
   114d4:	695a      	ldr	r2, [r3, #20]
   114d6:	6859      	ldr	r1, [r3, #4]
   114d8:	f649 4040 	movw	r0, #40000	; 0x9c40
   114dc:	4790      	blx	r2
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   114de:	4b11      	ldr	r3, [pc, #68]	; (11524 <initBMP384+0x114>)
   114e0:	2203      	movs	r2, #3
   114e2:	701a      	strb	r2, [r3, #0]
   114e4:	e7d7      	b.n	11496 <initBMP384+0x86>
			printk("BMP set mode error: %i \n", bmpResult);
   114e6:	4810      	ldr	r0, [pc, #64]	; (11528 <initBMP384+0x118>)
   114e8:	f00e fbc5 	bl	1fc76 <printk>
   114ec:	e7d3      	b.n	11496 <initBMP384+0x86>
   114ee:	bf00      	nop
   114f0:	000263a0 	.word	0x000263a0
   114f4:	200018a0 	.word	0x200018a0
   114f8:	20003f6b 	.word	0x20003f6b
   114fc:	0001f879 	.word	0x0001f879
   11500:	0001f8d1 	.word	0x0001f8d1
   11504:	0001f8c9 	.word	0x0001f8c9
   11508:	000263b8 	.word	0x000263b8
   1150c:	000263e4 	.word	0x000263e4
   11510:	00026400 	.word	0x00026400
   11514:	000263cc 	.word	0x000263cc
   11518:	00026420 	.word	0x00026420
   1151c:	00026444 	.word	0x00026444
   11520:	0002645c 	.word	0x0002645c
   11524:	200009f4 	.word	0x200009f4
   11528:	00026478 	.word	0x00026478

0001152c <setConfigBMP>:
static void setConfigBMP(){
   1152c:	b570      	push	{r4, r5, r6, lr}
   1152e:	b082      	sub	sp, #8
	if (DEBUG_MODE) {printk("BMP Setting config...\n");}
   11530:	4828      	ldr	r0, [pc, #160]	; (115d4 <setConfigBMP+0xa8>)
   11532:	f00e fba0 	bl	1fc76 <printk>
	uint8_t oversampling = bmpData.config[1];
   11536:	4b28      	ldr	r3, [pc, #160]	; (115d8 <setConfigBMP+0xac>)
   11538:	7e5c      	ldrb	r4, [r3, #25]
	uint8_t filter = bmpData.config[2];
   1153a:	7e9d      	ldrb	r5, [r3, #26]
	uint8_t rate = bmpData.config[3];
   1153c:	7ede      	ldrb	r6, [r3, #27]
	uint16_t settings_sel;

    bmp388_dev.settings.odr_filter.press_os = oversampling;
   1153e:	4927      	ldr	r1, [pc, #156]	; (115dc <setConfigBMP+0xb0>)
   11540:	f881 40b3 	strb.w	r4, [r1, #179]	; 0xb3
        bmp388_dev.settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
    }else {
        bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
    }
    
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11544:	2300      	movs	r3, #0
   11546:	f881 30b4 	strb.w	r3, [r1, #180]	; 0xb4
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   1154a:	2301      	movs	r3, #1
   1154c:	f881 30ba 	strb.w	r3, [r1, #186]	; 0xba
    bmp388_dev.settings.odr_filter.iir_filter = filter;
   11550:	f881 50b5 	strb.w	r5, [r1, #181]	; 0xb5
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
   11554:	f881 60b6 	strb.w	r6, [r1, #182]	; 0xb6
	settings_sel = BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_IIR_FILTER;
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   11558:	20f0      	movs	r0, #240	; 0xf0
   1155a:	f00e f86a 	bl	1f632 <bmp3_set_sensor_settings>
   1155e:	4b20      	ldr	r3, [pc, #128]	; (115e0 <setConfigBMP+0xb4>)
   11560:	7018      	strb	r0, [r3, #0]
    if (bmpResult == BMP3_SENSOR_OK){
   11562:	b9b0      	cbnz	r0, 11592 <setConfigBMP+0x66>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   11564:	481d      	ldr	r0, [pc, #116]	; (115dc <setConfigBMP+0xb0>)
   11566:	2303      	movs	r3, #3
   11568:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   1156c:	f00e f925 	bl	1f7ba <bmp3_set_op_mode>
   11570:	4b1b      	ldr	r3, [pc, #108]	; (115e0 <setConfigBMP+0xb4>)
   11572:	7018      	strb	r0, [r3, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   11574:	b948      	cbnz	r0, 1158a <setConfigBMP+0x5e>
        {
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   11576:	4b19      	ldr	r3, [pc, #100]	; (115dc <setConfigBMP+0xb0>)
   11578:	695a      	ldr	r2, [r3, #20]
   1157a:	6859      	ldr	r1, [r3, #4]
   1157c:	f649 4040 	movw	r0, #40000	; 0x9c40
   11580:	4790      	blx	r2
            /* Sensor component selection */
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   11582:	4b18      	ldr	r3, [pc, #96]	; (115e4 <setConfigBMP+0xb8>)
   11584:	2203      	movs	r2, #3
   11586:	701a      	strb	r2, [r3, #0]
   11588:	e006      	b.n	11598 <setConfigBMP+0x6c>
            /* Temperature and Pressure data are read and stored in the bmp3_data instance */
        }
		else {printk("BMP error setting settings\n");}
   1158a:	4817      	ldr	r0, [pc, #92]	; (115e8 <setConfigBMP+0xbc>)
   1158c:	f00e fb73 	bl	1fc76 <printk>
   11590:	e002      	b.n	11598 <setConfigBMP+0x6c>
    }
	else {printk("BMP error setting settings\n");}
   11592:	4815      	ldr	r0, [pc, #84]	; (115e8 <setConfigBMP+0xbc>)
   11594:	f00e fb6f 	bl	1fc76 <printk>

	if (DEBUG_MODE && bmpResult == BMP3_SENSOR_OK) {
   11598:	4b11      	ldr	r3, [pc, #68]	; (115e0 <setConfigBMP+0xb4>)
   1159a:	f993 3000 	ldrsb.w	r3, [r3]
   1159e:	b9ab      	cbnz	r3, 115cc <setConfigBMP+0xa0>
		printk("BMP settings set to:\nEnable Bit: %i\nOversampling: %i\nFilter: %i\nDatarate: %i",bmpData.config[0],oversampling,filter,rate);
   115a0:	9600      	str	r6, [sp, #0]
   115a2:	462b      	mov	r3, r5
   115a4:	4622      	mov	r2, r4
   115a6:	490c      	ldr	r1, [pc, #48]	; (115d8 <setConfigBMP+0xac>)
   115a8:	7e09      	ldrb	r1, [r1, #24]
   115aa:	4810      	ldr	r0, [pc, #64]	; (115ec <setConfigBMP+0xc0>)
   115ac:	f00e fb63 	bl	1fc76 <printk>
	return z_impl_k_sleep(timeout);
   115b0:	f640 40cd 	movw	r0, #3277	; 0xccd
   115b4:	2100      	movs	r1, #0
   115b6:	f00a fa15 	bl	1b9e4 <z_impl_k_sleep>
	}
	else {printk("BMP error setting settings\n");}

	k_sleep(K_MSEC(100));
	sleepBMP(!bmpData.config[0]);  
   115ba:	4b07      	ldr	r3, [pc, #28]	; (115d8 <setConfigBMP+0xac>)
   115bc:	7e18      	ldrb	r0, [r3, #24]
   115be:	fab0 f080 	clz	r0, r0
   115c2:	0940      	lsrs	r0, r0, #5
   115c4:	f7ff ff10 	bl	113e8 <sleepBMP>
}
   115c8:	b002      	add	sp, #8
   115ca:	bd70      	pop	{r4, r5, r6, pc}
	else {printk("BMP error setting settings\n");}
   115cc:	4806      	ldr	r0, [pc, #24]	; (115e8 <setConfigBMP+0xbc>)
   115ce:	f00e fb52 	bl	1fc76 <printk>
   115d2:	e7ed      	b.n	115b0 <setConfigBMP+0x84>
   115d4:	00026494 	.word	0x00026494
   115d8:	20002244 	.word	0x20002244
   115dc:	200018a0 	.word	0x200018a0
   115e0:	20003f6b 	.word	0x20003f6b
   115e4:	200009f4 	.word	0x200009f4
   115e8:	000264ac 	.word	0x000264ac
   115ec:	000264c8 	.word	0x000264c8

000115f0 <mlx_setGain>:
/**
 * Sets the sensor gain to the specified level.
 * @param gain  The gain level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   115f0:	b530      	push	{r4, r5, lr}
   115f2:	b083      	sub	sp, #12
   115f4:	4605      	mov	r5, r0
   115f6:	460c      	mov	r4, r1
  _gain = gain;
   115f8:	4b0b      	ldr	r3, [pc, #44]	; (11628 <mlx_setGain+0x38>)
   115fa:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF1, &data, mlx_device_t);
   115fc:	460a      	mov	r2, r1
   115fe:	f10d 0106 	add.w	r1, sp, #6
   11602:	2000      	movs	r0, #0
   11604:	f00e f9fd 	bl	1fa02 <readRegister>

  // mask off gain bits
  data &= ~0x0070;
   11608:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1160c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   11610:	b29b      	uxth	r3, r3
  // set gain bits
  data |= gain << MLX90393_GAIN_SHIFT;
   11612:	ea43 1105 	orr.w	r1, r3, r5, lsl #4
   11616:	f8ad 1006 	strh.w	r1, [sp, #6]

  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   1161a:	4622      	mov	r2, r4
   1161c:	2000      	movs	r0, #0
   1161e:	f00e f9d5 	bl	1f9cc <writeRegister>
}
   11622:	b003      	add	sp, #12
   11624:	bd30      	pop	{r4, r5, pc}
   11626:	bf00      	nop
   11628:	20003f6d 	.word	0x20003f6d

0001162c <mlx_setResolution>:
 * @param axis  The axis to set.
 * @param resolution  The resolution level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setResolution(enum mlx90393_axis axis,
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   1162c:	b570      	push	{r4, r5, r6, lr}
   1162e:	b082      	sub	sp, #8
   11630:	4604      	mov	r4, r0
   11632:	460d      	mov	r5, r1
   11634:	4616      	mov	r6, r2

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11636:	f10d 0106 	add.w	r1, sp, #6
   1163a:	2002      	movs	r0, #2
   1163c:	f00e f9e1 	bl	1fa02 <readRegister>

  switch (axis) {
   11640:	2c01      	cmp	r4, #1
   11642:	d016      	beq.n	11672 <mlx_setResolution+0x46>
   11644:	2c02      	cmp	r4, #2
   11646:	d020      	beq.n	1168a <mlx_setResolution+0x5e>
   11648:	b13c      	cbz	r4, 1165a <mlx_setResolution+0x2e>
    data &= ~0x0600;
    data |= resolution << 9;
    break;
  }

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   1164a:	4632      	mov	r2, r6
   1164c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11650:	2002      	movs	r0, #2
   11652:	f00e f9bb 	bl	1f9cc <writeRegister>
}
   11656:	b002      	add	sp, #8
   11658:	bd70      	pop	{r4, r5, r6, pc}
    _res_x = resolution;
   1165a:	4b12      	ldr	r3, [pc, #72]	; (116a4 <mlx_setResolution+0x78>)
   1165c:	701d      	strb	r5, [r3, #0]
    data &= ~0x0060;
   1165e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11662:	f021 0160 	bic.w	r1, r1, #96	; 0x60
   11666:	b289      	uxth	r1, r1
    data |= resolution << 5;
   11668:	ea41 1545 	orr.w	r5, r1, r5, lsl #5
   1166c:	f8ad 5006 	strh.w	r5, [sp, #6]
    break;
   11670:	e7eb      	b.n	1164a <mlx_setResolution+0x1e>
    _res_y = resolution;
   11672:	4b0d      	ldr	r3, [pc, #52]	; (116a8 <mlx_setResolution+0x7c>)
   11674:	701d      	strb	r5, [r3, #0]
    data &= ~0x0180;
   11676:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1167a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
   1167e:	b289      	uxth	r1, r1
    data |= resolution << 7;
   11680:	ea41 15c5 	orr.w	r5, r1, r5, lsl #7
   11684:	f8ad 5006 	strh.w	r5, [sp, #6]
    break;
   11688:	e7df      	b.n	1164a <mlx_setResolution+0x1e>
    _res_z = resolution;
   1168a:	4b08      	ldr	r3, [pc, #32]	; (116ac <mlx_setResolution+0x80>)
   1168c:	701d      	strb	r5, [r3, #0]
    data &= ~0x0600;
   1168e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11692:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
   11696:	b289      	uxth	r1, r1
    data |= resolution << 9;
   11698:	ea41 2545 	orr.w	r5, r1, r5, lsl #9
   1169c:	f8ad 5006 	strh.w	r5, [sp, #6]
    break;
   116a0:	e7d3      	b.n	1164a <mlx_setResolution+0x1e>
   116a2:	bf00      	nop
   116a4:	20003f6f 	.word	0x20003f6f
   116a8:	20003f70 	.word	0x20003f70
   116ac:	20003f71 	.word	0x20003f71

000116b0 <mlx_setFilter>:
/**
 * Sets the digital filter.
 * @param filter The digital filter setting.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   116b0:	b530      	push	{r4, r5, lr}
   116b2:	b083      	sub	sp, #12
   116b4:	4605      	mov	r5, r0
   116b6:	460c      	mov	r4, r1
  _dig_filt = filter;
   116b8:	4b0b      	ldr	r3, [pc, #44]	; (116e8 <mlx_setFilter+0x38>)
   116ba:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   116bc:	460a      	mov	r2, r1
   116be:	f10d 0106 	add.w	r1, sp, #6
   116c2:	2002      	movs	r0, #2
   116c4:	f00e f99d 	bl	1fa02 <readRegister>

  data &= ~0x1C;
   116c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   116cc:	f023 031c 	bic.w	r3, r3, #28
   116d0:	b29b      	uxth	r3, r3
  data |= filter << 2;
   116d2:	ea43 0185 	orr.w	r1, r3, r5, lsl #2
   116d6:	f8ad 1006 	strh.w	r1, [sp, #6]

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   116da:	4622      	mov	r2, r4
   116dc:	2002      	movs	r0, #2
   116de:	f00e f975 	bl	1f9cc <writeRegister>
}
   116e2:	b003      	add	sp, #12
   116e4:	bd30      	pop	{r4, r5, pc}
   116e6:	bf00      	nop
   116e8:	20003f6c 	.word	0x20003f6c

000116ec <mlx_setOversampling>:
 * Sets the oversampling.
 * @param oversampling The oversampling value to use.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setOversampling(
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   116ec:	b530      	push	{r4, r5, lr}
   116ee:	b083      	sub	sp, #12
   116f0:	4605      	mov	r5, r0
   116f2:	460c      	mov	r4, r1
  _osr = oversampling;
   116f4:	4b0b      	ldr	r3, [pc, #44]	; (11724 <mlx_setOversampling+0x38>)
   116f6:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   116f8:	460a      	mov	r2, r1
   116fa:	f10d 0106 	add.w	r1, sp, #6
   116fe:	2002      	movs	r0, #2
   11700:	f00e f97f 	bl	1fa02 <readRegister>

  data &= ~0x03;
   11704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11708:	f023 0303 	bic.w	r3, r3, #3
   1170c:	b29b      	uxth	r3, r3
  data |= oversampling;
   1170e:	ea43 0105 	orr.w	r1, r3, r5
   11712:	f8ad 1006 	strh.w	r1, [sp, #6]

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11716:	4622      	mov	r2, r4
   11718:	2002      	movs	r0, #2
   1171a:	f00e f957 	bl	1f9cc <writeRegister>
}
   1171e:	b003      	add	sp, #12
   11720:	bd30      	pop	{r4, r5, pc}
   11722:	bf00      	nop
   11724:	20003f6e 	.word	0x20003f6e

00011728 <mlx_readMeasurement>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True on command success
 */
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1172c:	b087      	sub	sp, #28
   1172e:	4682      	mov	sl, r0
   11730:	4689      	mov	r9, r1
   11732:	4690      	mov	r8, r2
  uint8_t tx[1] = {MLX90393_REG_RM | MLX90393_AXIS_ALL};
   11734:	224e      	movs	r2, #78	; 0x4e
   11736:	f88d 2014 	strb.w	r2, [sp, #20]
  uint8_t rx[6] = {0};
   1173a:	2200      	movs	r2, #0
   1173c:	9203      	str	r2, [sp, #12]
   1173e:	f8ad 2010 	strh.w	r2, [sp, #16]

  /* Read a single data sample. */


  
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11742:	9301      	str	r3, [sp, #4]
   11744:	9200      	str	r2, [sp, #0]
   11746:	2306      	movs	r3, #6
   11748:	aa03      	add	r2, sp, #12
   1174a:	2101      	movs	r1, #1
   1174c:	a805      	add	r0, sp, #20
   1174e:	f00e f8e0 	bl	1f912 <transceive>
  

  int16_t xi, yi, zi;

  /* Convert data to uT and float. */
  xi = (rx[0] << 8) | rx[1];
   11752:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11756:	0200      	lsls	r0, r0, #8
   11758:	b200      	sxth	r0, r0
   1175a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1175e:	4318      	orrs	r0, r3
  yi = (rx[2] << 8) | rx[3];
   11760:	f89d 500e 	ldrb.w	r5, [sp, #14]
   11764:	022d      	lsls	r5, r5, #8
   11766:	b22d      	sxth	r5, r5
   11768:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1176c:	431d      	orrs	r5, r3
  zi = (rx[4] << 8) | rx[5];
   1176e:	f89d 4010 	ldrb.w	r4, [sp, #16]
   11772:	0224      	lsls	r4, r4, #8
   11774:	b224      	sxth	r4, r4
   11776:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1177a:	431c      	orrs	r4, r3

  if (_res_x == MLX90393_RES_18)
   1177c:	4b2d      	ldr	r3, [pc, #180]	; (11834 <mlx_readMeasurement+0x10c>)
   1177e:	781f      	ldrb	r7, [r3, #0]
   11780:	2f02      	cmp	r7, #2
   11782:	d03f      	beq.n	11804 <mlx_readMeasurement+0xdc>
    xi -= 0x8000;
  if (_res_x == MLX90393_RES_19)
   11784:	2f03      	cmp	r7, #3
   11786:	d041      	beq.n	1180c <mlx_readMeasurement+0xe4>
    xi -= 0x4000;
  if (_res_y == MLX90393_RES_18)
   11788:	4b2b      	ldr	r3, [pc, #172]	; (11838 <mlx_readMeasurement+0x110>)
   1178a:	781b      	ldrb	r3, [r3, #0]
   1178c:	2b02      	cmp	r3, #2
   1178e:	d041      	beq.n	11814 <mlx_readMeasurement+0xec>
    yi -= 0x8000;
  if (_res_y == MLX90393_RES_19)
   11790:	2b03      	cmp	r3, #3
   11792:	d043      	beq.n	1181c <mlx_readMeasurement+0xf4>
    yi -= 0x4000;
  if (_res_z == MLX90393_RES_18)
   11794:	4b29      	ldr	r3, [pc, #164]	; (1183c <mlx_readMeasurement+0x114>)
   11796:	781b      	ldrb	r3, [r3, #0]
   11798:	2b02      	cmp	r3, #2
   1179a:	d043      	beq.n	11824 <mlx_readMeasurement+0xfc>
    zi -= 0x8000;
  if (_res_z == MLX90393_RES_19)
   1179c:	2b03      	cmp	r3, #3
   1179e:	d045      	beq.n	1182c <mlx_readMeasurement+0x104>
    zi -= 0x4000;

  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   117a0:	f7ef fa3a 	bl	c18 <__aeabi_i2f>
   117a4:	4e26      	ldr	r6, [pc, #152]	; (11840 <mlx_readMeasurement+0x118>)
   117a6:	f8df b09c 	ldr.w	fp, [pc, #156]	; 11844 <mlx_readMeasurement+0x11c>
   117aa:	f89b 3000 	ldrb.w	r3, [fp]
   117ae:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   117b2:	f856 1037 	ldr.w	r1, [r6, r7, lsl #3]
   117b6:	f7ee fca3 	bl	100 <__aeabi_fmul>
   117ba:	f8ca 0000 	str.w	r0, [sl]
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   117be:	4628      	mov	r0, r5
   117c0:	f7ef fa2a 	bl	c18 <__aeabi_i2f>
   117c4:	f89b 2000 	ldrb.w	r2, [fp]
   117c8:	4b1b      	ldr	r3, [pc, #108]	; (11838 <mlx_readMeasurement+0x110>)
   117ca:	781b      	ldrb	r3, [r3, #0]
   117cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   117d0:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   117d4:	f7ee fc94 	bl	100 <__aeabi_fmul>
   117d8:	f8c9 0000 	str.w	r0, [r9]
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   117dc:	4620      	mov	r0, r4
   117de:	f7ef fa1b 	bl	c18 <__aeabi_i2f>
   117e2:	f89b 2000 	ldrb.w	r2, [fp]
   117e6:	4b15      	ldr	r3, [pc, #84]	; (1183c <mlx_readMeasurement+0x114>)
   117e8:	781b      	ldrb	r3, [r3, #0]
   117ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   117ee:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   117f2:	6871      	ldr	r1, [r6, #4]
   117f4:	f7ee fc84 	bl	100 <__aeabi_fmul>
   117f8:	f8c8 0000 	str.w	r0, [r8]

  return true;
}
   117fc:	2001      	movs	r0, #1
   117fe:	b007      	add	sp, #28
   11800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xi -= 0x8000;
   11804:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
   11808:	b200      	sxth	r0, r0
   1180a:	e7bb      	b.n	11784 <mlx_readMeasurement+0x5c>
    xi -= 0x4000;
   1180c:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   11810:	b200      	sxth	r0, r0
   11812:	e7b9      	b.n	11788 <mlx_readMeasurement+0x60>
    yi -= 0x8000;
   11814:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
   11818:	b22d      	sxth	r5, r5
   1181a:	e7b9      	b.n	11790 <mlx_readMeasurement+0x68>
    yi -= 0x4000;
   1181c:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   11820:	b22d      	sxth	r5, r5
   11822:	e7b7      	b.n	11794 <mlx_readMeasurement+0x6c>
    zi -= 0x8000;
   11824:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
   11828:	b224      	sxth	r4, r4
   1182a:	e7b7      	b.n	1179c <mlx_readMeasurement+0x74>
    zi -= 0x4000;
   1182c:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   11830:	b224      	sxth	r4, r4
   11832:	e7b5      	b.n	117a0 <mlx_readMeasurement+0x78>
   11834:	20003f6f 	.word	0x20003f6f
   11838:	20003f70 	.word	0x20003f70
   1183c:	20003f71 	.word	0x20003f71
   11840:	00026518 	.word	0x00026518
   11844:	20003f6d 	.word	0x20003f6d

00011848 <mlx_readData>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_readData(float *x, float *y, float *z, struct device *mlx_device_t) {
   11848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1184c:	4605      	mov	r5, r0
   1184e:	460e      	mov	r6, r1
   11850:	4617      	mov	r7, r2
   11852:	461c      	mov	r4, r3
  if (!startSingleMeasurement(mlx_device_t)) {
   11854:	4618      	mov	r0, r3
   11856:	f00e f939 	bl	1facc <startSingleMeasurement>
   1185a:	b398      	cbz	r0, 118c4 <mlx_readData+0x7c>
  }
  // See MLX90393 Getting Started Guide for fancy formula
  // tconv = f(OSR, DIG_FILT, OSR2, ZYXT)
  // For now, using Table 18 from datasheet
  // Without +10ms delay measurement doesn't always seem to work
  k_sleep(K_MSEC(mlx90393_tconv[_dig_filt][_osr] + 10));
   1185c:	4b1a      	ldr	r3, [pc, #104]	; (118c8 <mlx_readData+0x80>)
   1185e:	781a      	ldrb	r2, [r3, #0]
   11860:	4b1a      	ldr	r3, [pc, #104]	; (118cc <mlx_readData+0x84>)
   11862:	781b      	ldrb	r3, [r3, #0]
   11864:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11868:	4919      	ldr	r1, [pc, #100]	; (118d0 <mlx_readData+0x88>)
   1186a:	4a1a      	ldr	r2, [pc, #104]	; (118d4 <mlx_readData+0x8c>)
   1186c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   11870:	f7ef f91e 	bl	ab0 <__addsf3>
   11874:	4680      	mov	r8, r0
   11876:	2100      	movs	r1, #0
   11878:	f7ef fa8e 	bl	d98 <__aeabi_fcmpgt>
   1187c:	b1f8      	cbz	r0, 118be <mlx_readData+0x76>
   1187e:	4640      	mov	r0, r8
   11880:	f7ef facc 	bl	e1c <__aeabi_f2ulz>
   11884:	ea4f 3cc1 	mov.w	ip, r1, lsl #15
   11888:	ea4c 4c50 	orr.w	ip, ip, r0, lsr #17
   1188c:	ea4f 3ec0 	mov.w	lr, r0, lsl #15
   11890:	f240 30e7 	movw	r0, #999	; 0x3e7
   11894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11898:	2300      	movs	r3, #0
   1189a:	eb1e 0000 	adds.w	r0, lr, r0
   1189e:	f04f 0100 	mov.w	r1, #0
   118a2:	eb4c 0101 	adc.w	r1, ip, r1
   118a6:	f7ef faa1 	bl	dec <__aeabi_uldivmod>
   118aa:	f00a f89b 	bl	1b9e4 <z_impl_k_sleep>
	//k_sleep(K_SECONDS(1));

  return mlx_readMeasurement(x, y, z, mlx_device_t);
   118ae:	4623      	mov	r3, r4
   118b0:	463a      	mov	r2, r7
   118b2:	4631      	mov	r1, r6
   118b4:	4628      	mov	r0, r5
   118b6:	f7ff ff37 	bl	11728 <mlx_readMeasurement>
  return 0;
}
   118ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  k_sleep(K_MSEC(mlx90393_tconv[_dig_filt][_osr] + 10));
   118be:	2000      	movs	r0, #0
   118c0:	4601      	mov	r1, r0
   118c2:	e7df      	b.n	11884 <mlx_readData+0x3c>
    return false;
   118c4:	2000      	movs	r0, #0
   118c6:	e7f8      	b.n	118ba <mlx_readData+0x72>
   118c8:	20003f6c 	.word	0x20003f6c
   118cc:	20003f6e 	.word	0x20003f6e
   118d0:	41200000 	.word	0x41200000
   118d4:	00026718 	.word	0x00026718

000118d8 <blink_LED>:
	//printk("start imu\n");
	//initIMU(i2c_dev,AFS_2G, GFS_15_125DPS, AODR_25Hz, GODR_25Hz);
	//setState(0,0); //disable 0,0 enable 1,1
}

bool blink_LED(uint8_t ID, uint8_t count) {
   118d8:	b570      	push	{r4, r5, r6, lr}
   118da:	4605      	mov	r5, r0
   118dc:	460e      	mov	r6, r1
    for (uint8_t i = 0; i < count*2; i++)
   118de:	2400      	movs	r4, #0
   118e0:	e008      	b.n	118f4 <blink_LED+0x1c>
    {
        if (ID == LED_BLUE_ID)
        {
            gpio_pin_toggle(led_blue_dev, LED0_PIN);
        }
        if (ID == LED_RED_ID)
   118e2:	2d01      	cmp	r5, #1
   118e4:	d012      	beq.n	1190c <blink_LED+0x34>
   118e6:	f242 6067 	movw	r0, #9831	; 0x2667
   118ea:	2100      	movs	r1, #0
   118ec:	f00a f87a 	bl	1b9e4 <z_impl_k_sleep>
    for (uint8_t i = 0; i < count*2; i++)
   118f0:	3401      	adds	r4, #1
   118f2:	b2e4      	uxtb	r4, r4
   118f4:	ebb4 0f46 	cmp.w	r4, r6, lsl #1
   118f8:	da10      	bge.n	1191c <blink_LED+0x44>
        if (ID == LED_BLUE_ID)
   118fa:	2d00      	cmp	r5, #0
   118fc:	d1f1      	bne.n	118e2 <blink_LED+0xa>
            gpio_pin_toggle(led_blue_dev, LED0_PIN);
   118fe:	4b08      	ldr	r3, [pc, #32]	; (11920 <blink_LED+0x48>)
   11900:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   11902:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   11904:	695b      	ldr	r3, [r3, #20]
   11906:	2108      	movs	r1, #8
   11908:	4798      	blx	r3
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   1190a:	e7ea      	b.n	118e2 <blink_LED+0xa>
        { 
            gpio_pin_toggle(led_red_dev, LED1_PIN);
   1190c:	4b05      	ldr	r3, [pc, #20]	; (11924 <blink_LED+0x4c>)
   1190e:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   11910:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
   11912:	695b      	ldr	r3, [r3, #20]
   11914:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   11918:	4798      	blx	r3
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
   1191a:	e7e4      	b.n	118e6 <blink_LED+0xe>
        }
        
        k_msleep(300);
    }
    return true;
   1191c:	2001      	movs	r0, #1
   1191e:	bd70      	pop	{r4, r5, r6, pc}
   11920:	20002364 	.word	0x20002364
   11924:	20002368 	.word	0x20002368

00011928 <main>:
{
   11928:	b538      	push	{r3, r4, r5, lr}
	printk("Hello World %s\n", CONFIG_BOARD);
   1192a:	493b      	ldr	r1, [pc, #236]	; (11a18 <main+0xf0>)
   1192c:	483b      	ldr	r0, [pc, #236]	; (11a1c <main+0xf4>)
   1192e:	f00e f9a2 	bl	1fc76 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11932:	483b      	ldr	r0, [pc, #236]	; (11a20 <main+0xf8>)
   11934:	f008 ff0c 	bl	1a750 <z_impl_device_get_binding>
	led_blue_dev = device_get_binding(LED0_GPIO);
   11938:	4b3a      	ldr	r3, [pc, #232]	; (11a24 <main+0xfc>)
   1193a:	6018      	str	r0, [r3, #0]
    if (!led_blue_dev) {
   1193c:	2800      	cmp	r0, #0
   1193e:	d05a      	beq.n	119f6 <main+0xce>
   11940:	4837      	ldr	r0, [pc, #220]	; (11a20 <main+0xf8>)
   11942:	f008 ff05 	bl	1a750 <z_impl_device_get_binding>
	led_red_dev = device_get_binding(LED1_GPIO);
   11946:	4b38      	ldr	r3, [pc, #224]	; (11a28 <main+0x100>)
   11948:	6018      	str	r0, [r3, #0]
    if (!led_blue_dev) {
   1194a:	4b36      	ldr	r3, [pc, #216]	; (11a24 <main+0xfc>)
   1194c:	6818      	ldr	r0, [r3, #0]
   1194e:	2800      	cmp	r0, #0
   11950:	d055      	beq.n	119fe <main+0xd6>
	const struct gpio_driver_api *api =
   11952:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   11954:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11956:	6813      	ldr	r3, [r2, #0]
   11958:	f043 0308 	orr.w	r3, r3, #8
   1195c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1195e:	680b      	ldr	r3, [r1, #0]
   11960:	f240 2201 	movw	r2, #513	; 0x201
   11964:	2103      	movs	r1, #3
   11966:	4798      	blx	r3
    gpio_pin_configure(led_red_dev, LED1_PIN, GPIO_OUTPUT | LED1_FLAGS);
   11968:	4b2f      	ldr	r3, [pc, #188]	; (11a28 <main+0x100>)
   1196a:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_api *api =
   1196c:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
   1196e:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   11970:	6813      	ldr	r3, [r2, #0]
   11972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11976:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11978:	680b      	ldr	r3, [r1, #0]
   1197a:	f240 2201 	movw	r2, #513	; 0x201
   1197e:	211c      	movs	r1, #28
   11980:	4798      	blx	r3
	gpio_pin_set(led_blue_dev,LED0_PIN,GPIO_OUT_PIN0_High);
   11982:	4b28      	ldr	r3, [pc, #160]	; (11a24 <main+0xfc>)
   11984:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
   11986:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   11988:	681b      	ldr	r3, [r3, #0]
   1198a:	f013 0f08 	tst.w	r3, #8
   1198e:	d13a      	bne.n	11a06 <main+0xde>
   11990:	2201      	movs	r2, #1
	return gpio_pin_set_raw(port, pin, value);
   11992:	2103      	movs	r1, #3
   11994:	f00e f90d 	bl	1fbb2 <gpio_pin_set_raw>
    gpio_pin_set(led_red_dev,LED1_PIN,GPIO_OUT_PIN1_High);
   11998:	4b23      	ldr	r3, [pc, #140]	; (11a28 <main+0x100>)
   1199a:	6818      	ldr	r0, [r3, #0]
	const struct gpio_driver_data *const data =
   1199c:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1199e:	681b      	ldr	r3, [r3, #0]
   119a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   119a4:	d131      	bne.n	11a0a <main+0xe2>
   119a6:	2201      	movs	r2, #1
	return gpio_pin_set_raw(port, pin, value);
   119a8:	211c      	movs	r1, #28
   119aa:	f00e f902 	bl	1fbb2 <gpio_pin_set_raw>
	init_BAS();
   119ae:	f7ff f953 	bl	10c58 <init_BAS>
   119b2:	481e      	ldr	r0, [pc, #120]	; (11a2c <main+0x104>)
   119b4:	f008 fecc 	bl	1a750 <z_impl_device_get_binding>
	i2c_dev = device_get_binding("myi2c");
   119b8:	4b1d      	ldr	r3, [pc, #116]	; (11a30 <main+0x108>)
   119ba:	6018      	str	r0, [r3, #0]
	if (!i2c_dev) {
   119bc:	b338      	cbz	r0, 11a0e <main+0xe6>
	error = initBMP384(i2c_dev);
   119be:	f7ff fd27 	bl	11410 <initBMP384>
   119c2:	4c1c      	ldr	r4, [pc, #112]	; (11a34 <main+0x10c>)
   119c4:	7020      	strb	r0, [r4, #0]
	error = init_Interrupt_BMP();
   119c6:	f7ff fc9d 	bl	11304 <init_Interrupt_BMP>
   119ca:	7020      	strb	r0, [r4, #0]
	error = initSHTC(i2c_dev);
   119cc:	4d18      	ldr	r5, [pc, #96]	; (11a30 <main+0x108>)
   119ce:	6828      	ldr	r0, [r5, #0]
   119d0:	f7fe ff64 	bl	1089c <initSHTC>
   119d4:	7020      	strb	r0, [r4, #0]
	init_Interrupt_SHTC();
   119d6:	f7ff f85b 	bl	10a90 <init_Interrupt_SHTC>
	error = initMLX(i2c_dev);
   119da:	6828      	ldr	r0, [r5, #0]
   119dc:	f7ff fa1a 	bl	10e14 <initMLX>
   119e0:	7020      	strb	r0, [r4, #0]
	error = init_Interrupt_MLX();
   119e2:	f7ff fa21 	bl	10e28 <init_Interrupt_MLX>
   119e6:	7020      	strb	r0, [r4, #0]
	initBLE();
   119e8:	f7ff f95a 	bl	10ca0 <initBLE>
	blink_LED(LED_RED_ID,3);
   119ec:	2103      	movs	r1, #3
   119ee:	2001      	movs	r0, #1
   119f0:	f7ff ff72 	bl	118d8 <blink_LED>
}
   119f4:	bd38      	pop	{r3, r4, r5, pc}
        printk("BLUE-LED: Device driver not found.\n");
   119f6:	4810      	ldr	r0, [pc, #64]	; (11a38 <main+0x110>)
   119f8:	f00e f93d 	bl	1fc76 <printk>
        return;
   119fc:	e7fa      	b.n	119f4 <main+0xcc>
        printk("LED1: Device driver not found.\n");
   119fe:	480f      	ldr	r0, [pc, #60]	; (11a3c <main+0x114>)
   11a00:	f00e f939 	bl	1fc76 <printk>
        return;
   11a04:	e7f6      	b.n	119f4 <main+0xcc>
		value = (value != 0) ? 0 : 1;
   11a06:	2200      	movs	r2, #0
   11a08:	e7c3      	b.n	11992 <main+0x6a>
   11a0a:	2200      	movs	r2, #0
   11a0c:	e7cc      	b.n	119a8 <main+0x80>
		printk("I2C: Device driver not found.\n");
   11a0e:	480c      	ldr	r0, [pc, #48]	; (11a40 <main+0x118>)
   11a10:	f00e f931 	bl	1fc76 <printk>
		return;
   11a14:	e7ee      	b.n	119f4 <main+0xcc>
   11a16:	bf00      	nop
   11a18:	00026798 	.word	0x00026798
   11a1c:	000267ac 	.word	0x000267ac
   11a20:	000267bc 	.word	0x000267bc
   11a24:	20002364 	.word	0x20002364
   11a28:	20002368 	.word	0x20002368
   11a2c:	00026808 	.word	0x00026808
   11a30:	20002360 	.word	0x20002360
   11a34:	20003f72 	.word	0x20003f72
   11a38:	000267c4 	.word	0x000267c4
   11a3c:	000267e8 	.word	0x000267e8
   11a40:	00026810 	.word	0x00026810

00011a44 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   11a44:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11a46:	680b      	ldr	r3, [r1, #0]
   11a48:	3301      	adds	r3, #1
   11a4a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11a4c:	4b01      	ldr	r3, [pc, #4]	; (11a54 <char_out+0x10>)
   11a4e:	681b      	ldr	r3, [r3, #0]
   11a50:	4798      	blx	r3
}
   11a52:	bd08      	pop	{r3, pc}
   11a54:	200006c0 	.word	0x200006c0

00011a58 <__printk_hook_install>:
	_char_out = fn;
   11a58:	4b01      	ldr	r3, [pc, #4]	; (11a60 <__printk_hook_install+0x8>)
   11a5a:	6018      	str	r0, [r3, #0]
}
   11a5c:	4770      	bx	lr
   11a5e:	bf00      	nop
   11a60:	200006c0 	.word	0x200006c0

00011a64 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   11a64:	b500      	push	{lr}
   11a66:	b083      	sub	sp, #12
   11a68:	4602      	mov	r2, r0
   11a6a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11a6c:	2100      	movs	r1, #0
   11a6e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11a70:	a901      	add	r1, sp, #4
   11a72:	4803      	ldr	r0, [pc, #12]	; (11a80 <vprintk+0x1c>)
   11a74:	f000 fb66 	bl	12144 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   11a78:	b003      	add	sp, #12
   11a7a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a7e:	bf00      	nop
   11a80:	00011a45 	.word	0x00011a45

00011a84 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11a84:	b510      	push	{r4, lr}
   11a86:	b084      	sub	sp, #16
   11a88:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   11a8a:	9001      	str	r0, [sp, #4]
   11a8c:	9102      	str	r1, [sp, #8]
   11a8e:	2100      	movs	r1, #0
   11a90:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   11a92:	a901      	add	r1, sp, #4
   11a94:	4805      	ldr	r0, [pc, #20]	; (11aac <vsnprintk+0x28>)
   11a96:	f000 fb55 	bl	12144 <cbvprintf>

	if (ctx.count < ctx.max) {
   11a9a:	9b03      	ldr	r3, [sp, #12]
   11a9c:	9a02      	ldr	r2, [sp, #8]
   11a9e:	4293      	cmp	r3, r2
   11aa0:	da01      	bge.n	11aa6 <vsnprintk+0x22>
		str[ctx.count] = '\0';
   11aa2:	2200      	movs	r2, #0
   11aa4:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   11aa6:	9803      	ldr	r0, [sp, #12]
   11aa8:	b004      	add	sp, #16
   11aaa:	bd10      	pop	{r4, pc}
   11aac:	0001fc47 	.word	0x0001fc47

00011ab0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11ab4:	b083      	sub	sp, #12
   11ab6:	4604      	mov	r4, r0
   11ab8:	4608      	mov	r0, r1
   11aba:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11abc:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11abe:	f013 0f08 	tst.w	r3, #8
   11ac2:	d105      	bne.n	11ad0 <process_event+0x20>
   11ac4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   11ac8:	2300      	movs	r3, #0
   11aca:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   11acc:	9301      	str	r3, [sp, #4]
}
   11ace:	e069      	b.n	11ba4 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   11ad0:	2901      	cmp	r1, #1
   11ad2:	d009      	beq.n	11ae8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11ad4:	f043 0320 	orr.w	r3, r3, #32
   11ad8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11ada:	f385 8811 	msr	BASEPRI, r5
   11ade:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11ae2:	b003      	add	sp, #12
   11ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11ae8:	f043 0310 	orr.w	r3, r3, #16
   11aec:	8323      	strh	r3, [r4, #24]
   11aee:	e7f4      	b.n	11ada <process_event+0x2a>
			evt = process_recheck(mgr);
   11af0:	4620      	mov	r0, r4
   11af2:	f00e f903 	bl	1fcfc <process_recheck>
   11af6:	e057      	b.n	11ba8 <process_event+0xf8>
			res = mgr->last_res;
   11af8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   11afc:	464a      	mov	r2, r9
   11afe:	4669      	mov	r1, sp
   11b00:	4620      	mov	r0, r4
   11b02:	f00e f914 	bl	1fd2e <process_complete>
		onoff_transition_fn transit = NULL;
   11b06:	2700      	movs	r7, #0
   11b08:	e05a      	b.n	11bc0 <process_event+0x110>
			transit = mgr->transitions->start;
   11b0a:	6923      	ldr	r3, [r4, #16]
   11b0c:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   11b0e:	2106      	movs	r1, #6
   11b10:	4620      	mov	r0, r4
   11b12:	f00e f8cc 	bl	1fcae <set_state>
		res = 0;
   11b16:	f04f 0900 	mov.w	r9, #0
   11b1a:	e051      	b.n	11bc0 <process_event+0x110>
			transit = mgr->transitions->stop;
   11b1c:	6923      	ldr	r3, [r4, #16]
   11b1e:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   11b20:	2104      	movs	r1, #4
   11b22:	4620      	mov	r0, r4
   11b24:	f00e f8c3 	bl	1fcae <set_state>
		res = 0;
   11b28:	f04f 0900 	mov.w	r9, #0
   11b2c:	e048      	b.n	11bc0 <process_event+0x110>
			transit = mgr->transitions->reset;
   11b2e:	6923      	ldr	r3, [r4, #16]
   11b30:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   11b32:	2105      	movs	r1, #5
   11b34:	4620      	mov	r0, r4
   11b36:	f00e f8ba 	bl	1fcae <set_state>
		res = 0;
   11b3a:	f04f 0900 	mov.w	r9, #0
   11b3e:	e03f      	b.n	11bc0 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   11b40:	2200      	movs	r2, #0
   11b42:	e046      	b.n	11bd2 <process_event+0x122>
   11b44:	2200      	movs	r2, #0
   11b46:	e044      	b.n	11bd2 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11b48:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   11b4c:	8323      	strh	r3, [r4, #24]
   11b4e:	f385 8811 	msr	BASEPRI, r5
   11b52:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11b56:	2900      	cmp	r1, #0
   11b58:	d144      	bne.n	11be4 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11b5a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   11b5c:	b12b      	cbz	r3, 11b6a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   11b5e:	464b      	mov	r3, r9
   11b60:	4642      	mov	r2, r8
   11b62:	4669      	mov	r1, sp
   11b64:	4620      	mov	r0, r4
   11b66:	f00e f958 	bl	1fe1a <notify_all>
			if (transit != NULL) {
   11b6a:	b117      	cbz	r7, 11b72 <process_event+0xc2>
				transit(mgr, transition_complete);
   11b6c:	4925      	ldr	r1, [pc, #148]	; (11c04 <process_event+0x154>)
   11b6e:	4620      	mov	r0, r4
   11b70:	47b8      	blx	r7
	__asm__ volatile(
   11b72:	f04f 0340 	mov.w	r3, #64	; 0x40
   11b76:	f3ef 8511 	mrs	r5, BASEPRI
   11b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   11b7e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11b82:	8b23      	ldrh	r3, [r4, #24]
   11b84:	f023 0308 	bic.w	r3, r3, #8
   11b88:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11b8a:	8b23      	ldrh	r3, [r4, #24]
   11b8c:	f013 0f10 	tst.w	r3, #16
   11b90:	d02e      	beq.n	11bf0 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11b92:	f023 0310 	bic.w	r3, r3, #16
   11b96:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   11b98:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11b9a:	8b26      	ldrh	r6, [r4, #24]
   11b9c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   11ba0:	2800      	cmp	r0, #0
   11ba2:	d09a      	beq.n	11ada <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   11ba4:	2802      	cmp	r0, #2
   11ba6:	d0a3      	beq.n	11af0 <process_event+0x40>
		if (evt == EVT_NOP) {
   11ba8:	2800      	cmp	r0, #0
   11baa:	d096      	beq.n	11ada <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   11bac:	2801      	cmp	r0, #1
   11bae:	d0a3      	beq.n	11af8 <process_event+0x48>
		} else if (evt == EVT_START) {
   11bb0:	2803      	cmp	r0, #3
   11bb2:	d0aa      	beq.n	11b0a <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   11bb4:	2804      	cmp	r0, #4
   11bb6:	d0b1      	beq.n	11b1c <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   11bb8:	2805      	cmp	r0, #5
   11bba:	d0b8      	beq.n	11b2e <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   11bbc:	2700      	movs	r7, #0
		res = 0;
   11bbe:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11bc0:	8b23      	ldrh	r3, [r4, #24]
   11bc2:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11bc6:	45b0      	cmp	r8, r6
   11bc8:	d0ba      	beq.n	11b40 <process_event+0x90>
   11bca:	68a2      	ldr	r2, [r4, #8]
   11bcc:	2a00      	cmp	r2, #0
   11bce:	d0b9      	beq.n	11b44 <process_event+0x94>
   11bd0:	2201      	movs	r2, #1
		if (do_monitors
   11bd2:	4611      	mov	r1, r2
   11bd4:	2a00      	cmp	r2, #0
   11bd6:	d1b7      	bne.n	11b48 <process_event+0x98>
   11bd8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   11bda:	2a00      	cmp	r2, #0
   11bdc:	d1b4      	bne.n	11b48 <process_event+0x98>
		    || (transit != NULL)) {
   11bde:	2f00      	cmp	r7, #0
   11be0:	d1b2      	bne.n	11b48 <process_event+0x98>
   11be2:	e7d2      	b.n	11b8a <process_event+0xda>
				notify_monitors(mgr, state, res);
   11be4:	464a      	mov	r2, r9
   11be6:	4641      	mov	r1, r8
   11be8:	4620      	mov	r0, r4
   11bea:	f00e f868 	bl	1fcbe <notify_monitors>
   11bee:	e7b4      	b.n	11b5a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11bf0:	f013 0f20 	tst.w	r3, #32
   11bf4:	d004      	beq.n	11c00 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11bf6:	f023 0320 	bic.w	r3, r3, #32
   11bfa:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   11bfc:	2002      	movs	r0, #2
   11bfe:	e7cc      	b.n	11b9a <process_event+0xea>
		evt = EVT_NOP;
   11c00:	2000      	movs	r0, #0
   11c02:	e7ca      	b.n	11b9a <process_event+0xea>
   11c04:	0001fe49 	.word	0x0001fe49

00011c08 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   11c08:	b410      	push	{r4}
   11c0a:	4604      	mov	r4, r0
	const char *sp = *str;
   11c0c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   11c0e:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   11c10:	7813      	ldrb	r3, [r2, #0]
   11c12:	4907      	ldr	r1, [pc, #28]	; (11c30 <extract_decimal+0x28>)
   11c14:	5c59      	ldrb	r1, [r3, r1]
   11c16:	f011 0f04 	tst.w	r1, #4
   11c1a:	d006      	beq.n	11c2a <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   11c1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11c20:	3201      	adds	r2, #1
   11c22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   11c26:	3830      	subs	r0, #48	; 0x30
   11c28:	e7f2      	b.n	11c10 <extract_decimal+0x8>
	}
	*str = sp;
   11c2a:	6022      	str	r2, [r4, #0]
	return val;
}
   11c2c:	bc10      	pop	{r4}
   11c2e:	4770      	bx	lr
   11c30:	00027301 	.word	0x00027301

00011c34 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   11c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c38:	b083      	sub	sp, #12
   11c3a:	4604      	mov	r4, r0
   11c3c:	460d      	mov	r5, r1
   11c3e:	9201      	str	r2, [sp, #4]
   11c40:	469a      	mov	sl, r3
   11c42:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   11c46:	78d3      	ldrb	r3, [r2, #3]
   11c48:	4a31      	ldr	r2, [pc, #196]	; (11d10 <encode_uint+0xdc>)
   11c4a:	f813 b002 	ldrb.w	fp, [r3, r2]
   11c4e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   11c52:	2b6f      	cmp	r3, #111	; 0x6f
   11c54:	d00f      	beq.n	11c76 <encode_uint+0x42>
   11c56:	d906      	bls.n	11c66 <encode_uint+0x32>
   11c58:	2b70      	cmp	r3, #112	; 0x70
   11c5a:	d00f      	beq.n	11c7c <encode_uint+0x48>
   11c5c:	2b78      	cmp	r3, #120	; 0x78
   11c5e:	d110      	bne.n	11c82 <encode_uint+0x4e>
		return 16;
   11c60:	f04f 0910 	mov.w	r9, #16
   11c64:	e023      	b.n	11cae <encode_uint+0x7a>
	switch (specifier) {
   11c66:	2b58      	cmp	r3, #88	; 0x58
   11c68:	d002      	beq.n	11c70 <encode_uint+0x3c>
   11c6a:	f04f 090a 	mov.w	r9, #10
   11c6e:	e01e      	b.n	11cae <encode_uint+0x7a>
		return 16;
   11c70:	f04f 0910 	mov.w	r9, #16
   11c74:	e01b      	b.n	11cae <encode_uint+0x7a>
		return 8;
   11c76:	f04f 0908 	mov.w	r9, #8
   11c7a:	e018      	b.n	11cae <encode_uint+0x7a>
		return 16;
   11c7c:	f04f 0910 	mov.w	r9, #16
   11c80:	e015      	b.n	11cae <encode_uint+0x7a>
	switch (specifier) {
   11c82:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   11c86:	e012      	b.n	11cae <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c88:	b2d2      	uxtb	r2, r2
   11c8a:	3230      	adds	r2, #48	; 0x30
   11c8c:	b2d2      	uxtb	r2, r2
   11c8e:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   11c92:	4632      	mov	r2, r6
   11c94:	463b      	mov	r3, r7
   11c96:	4620      	mov	r0, r4
   11c98:	4629      	mov	r1, r5
   11c9a:	f7ef f8a7 	bl	dec <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   11c9e:	42bd      	cmp	r5, r7
   11ca0:	bf08      	it	eq
   11ca2:	42b4      	cmpeq	r4, r6
   11ca4:	d318      	bcc.n	11cd8 <encode_uint+0xa4>
   11ca6:	45d0      	cmp	r8, sl
   11ca8:	d916      	bls.n	11cd8 <encode_uint+0xa4>
		value /= radix;
   11caa:	4604      	mov	r4, r0
   11cac:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   11cae:	464e      	mov	r6, r9
   11cb0:	2700      	movs	r7, #0
   11cb2:	464a      	mov	r2, r9
   11cb4:	463b      	mov	r3, r7
   11cb6:	4620      	mov	r0, r4
   11cb8:	4629      	mov	r1, r5
   11cba:	f7ef f897 	bl	dec <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11cbe:	2a09      	cmp	r2, #9
   11cc0:	d9e2      	bls.n	11c88 <encode_uint+0x54>
   11cc2:	f1bb 0f01 	cmp.w	fp, #1
   11cc6:	d003      	beq.n	11cd0 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   11cc8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11cca:	3257      	adds	r2, #87	; 0x57
   11ccc:	b2d2      	uxtb	r2, r2
   11cce:	e7de      	b.n	11c8e <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   11cd0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11cd2:	3237      	adds	r2, #55	; 0x37
   11cd4:	b2d2      	uxtb	r2, r2
   11cd6:	e7da      	b.n	11c8e <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   11cd8:	9b01      	ldr	r3, [sp, #4]
   11cda:	781b      	ldrb	r3, [r3, #0]
   11cdc:	f013 0f20 	tst.w	r3, #32
   11ce0:	d005      	beq.n	11cee <encode_uint+0xba>
		if (radix == 8) {
   11ce2:	f1b9 0f08 	cmp.w	r9, #8
   11ce6:	d006      	beq.n	11cf6 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   11ce8:	f1b9 0f10 	cmp.w	r9, #16
   11cec:	d009      	beq.n	11d02 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   11cee:	4640      	mov	r0, r8
   11cf0:	b003      	add	sp, #12
   11cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   11cf6:	9a01      	ldr	r2, [sp, #4]
   11cf8:	7893      	ldrb	r3, [r2, #2]
   11cfa:	f043 0308 	orr.w	r3, r3, #8
   11cfe:	7093      	strb	r3, [r2, #2]
   11d00:	e7f5      	b.n	11cee <encode_uint+0xba>
			conv->altform_0c = true;
   11d02:	9a01      	ldr	r2, [sp, #4]
   11d04:	7893      	ldrb	r3, [r2, #2]
   11d06:	f043 0310 	orr.w	r3, r3, #16
   11d0a:	7093      	strb	r3, [r2, #2]
   11d0c:	e7ef      	b.n	11cee <encode_uint+0xba>
   11d0e:	bf00      	nop
   11d10:	00027301 	.word	0x00027301

00011d14 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   11d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d18:	b089      	sub	sp, #36	; 0x24
   11d1a:	4692      	mov	sl, r2
   11d1c:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   11d1e:	2800      	cmp	r0, #0
   11d20:	f171 0300 	sbcs.w	r3, r1, #0
   11d24:	db08      	blt.n	11d38 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   11d26:	f89a 3000 	ldrb.w	r3, [sl]
   11d2a:	f013 0f08 	tst.w	r3, #8
   11d2e:	d014      	beq.n	11d5a <encode_float+0x46>
		*sign = '+';
   11d30:	232b      	movs	r3, #43	; 0x2b
   11d32:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11d34:	7013      	strb	r3, [r2, #0]
   11d36:	e002      	b.n	11d3e <encode_float+0x2a>
		*sign = '-';
   11d38:	232d      	movs	r3, #45	; 0x2d
   11d3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11d3c:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   11d3e:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11d42:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   11d46:	4602      	mov	r2, r0
   11d48:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   11d4c:	b964      	cbnz	r4, 11d68 <encode_float+0x54>
   11d4e:	ea52 0103 	orrs.w	r1, r2, r3
   11d52:	d130      	bne.n	11db6 <encode_float+0xa2>
   11d54:	f04f 0e00 	mov.w	lr, #0
   11d58:	e008      	b.n	11d6c <encode_float+0x58>
	} else if (conv->flag_space) {
   11d5a:	f013 0f10 	tst.w	r3, #16
   11d5e:	d0ee      	beq.n	11d3e <encode_float+0x2a>
		*sign = ' ';
   11d60:	2320      	movs	r3, #32
   11d62:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11d64:	7013      	strb	r3, [r2, #0]
   11d66:	e7ea      	b.n	11d3e <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11d68:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11d6c:	f240 71ff 	movw	r1, #2047	; 0x7ff
   11d70:	428c      	cmp	r4, r1
   11d72:	d023      	beq.n	11dbc <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   11d74:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
   11d78:	d060      	beq.n	11e3c <encode_float+0x128>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   11d7a:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
   11d7e:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
   11d82:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
   11d84:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
   11d88:	9206      	str	r2, [sp, #24]
   11d8a:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   11d8e:	ea44 0002 	orr.w	r0, r4, r2
   11d92:	17e3      	asrs	r3, r4, #31
   11d94:	ea43 010c 	orr.w	r1, r3, ip
   11d98:	ea50 0301 	orrs.w	r3, r0, r1
   11d9c:	d008      	beq.n	11db0 <encode_float+0x9c>
		if (is_subnormal) {
   11d9e:	f1be 0f00 	cmp.w	lr, #0
   11da2:	d14f      	bne.n	11e44 <encode_float+0x130>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11da4:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   11da8:	9b07      	ldr	r3, [sp, #28]
   11daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11dae:	9307      	str	r3, [sp, #28]
		c = 'f';
   11db0:	f04f 0800 	mov.w	r8, #0
   11db4:	e061      	b.n	11e7a <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11db6:	f04f 0e01 	mov.w	lr, #1
   11dba:	e7d7      	b.n	11d6c <encode_float+0x58>
		if (fract == 0) {
   11dbc:	4313      	orrs	r3, r2
   11dbe:	d122      	bne.n	11e06 <encode_float+0xf2>
			if (isupper((int)c)) {
   11dc0:	4bad      	ldr	r3, [pc, #692]	; (12078 <encode_float+0x364>)
   11dc2:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11dc6:	f003 0303 	and.w	r3, r3, #3
   11dca:	2b01      	cmp	r3, #1
   11dcc:	d011      	beq.n	11df2 <encode_float+0xde>
				*buf++ = 'i';
   11dce:	2369      	movs	r3, #105	; 0x69
   11dd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11dd2:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
   11dd4:	236e      	movs	r3, #110	; 0x6e
   11dd6:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
   11dd8:	3203      	adds	r2, #3
   11dda:	2366      	movs	r3, #102	; 0x66
   11ddc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11dde:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
   11de0:	f89a 3000 	ldrb.w	r3, [sl]
   11de4:	f36f 1386 	bfc	r3, #6, #1
   11de8:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
   11dec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11dee:	601a      	str	r2, [r3, #0]
		return bps;
   11df0:	e192      	b.n	12118 <encode_float+0x404>
				*buf++ = 'I';
   11df2:	2349      	movs	r3, #73	; 0x49
   11df4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11df6:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
   11df8:	234e      	movs	r3, #78	; 0x4e
   11dfa:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
   11dfc:	3203      	adds	r2, #3
   11dfe:	2346      	movs	r3, #70	; 0x46
   11e00:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11e02:	708b      	strb	r3, [r1, #2]
   11e04:	e7ec      	b.n	11de0 <encode_float+0xcc>
			if (isupper((int)c)) {
   11e06:	4b9c      	ldr	r3, [pc, #624]	; (12078 <encode_float+0x364>)
   11e08:	f81b 3003 	ldrb.w	r3, [fp, r3]
   11e0c:	f003 0303 	and.w	r3, r3, #3
   11e10:	2b01      	cmp	r3, #1
   11e12:	d009      	beq.n	11e28 <encode_float+0x114>
				*buf++ = 'n';
   11e14:	236e      	movs	r3, #110	; 0x6e
   11e16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11e18:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
   11e1a:	2261      	movs	r2, #97	; 0x61
   11e1c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11e1e:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
   11e20:	460a      	mov	r2, r1
   11e22:	3203      	adds	r2, #3
   11e24:	708b      	strb	r3, [r1, #2]
   11e26:	e7db      	b.n	11de0 <encode_float+0xcc>
				*buf++ = 'N';
   11e28:	234e      	movs	r3, #78	; 0x4e
   11e2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11e2c:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
   11e2e:	2241      	movs	r2, #65	; 0x41
   11e30:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11e32:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
   11e34:	460a      	mov	r2, r1
   11e36:	3203      	adds	r2, #3
   11e38:	708b      	strb	r3, [r1, #2]
   11e3a:	e7d1      	b.n	11de0 <encode_float+0xcc>
		c = 'f';
   11e3c:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11e40:	e79b      	b.n	11d7a <encode_float+0x66>
				expo--;
   11e42:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   11e44:	9b06      	ldr	r3, [sp, #24]
   11e46:	9a07      	ldr	r2, [sp, #28]
   11e48:	eb13 0803 	adds.w	r8, r3, r3
   11e4c:	eb42 0902 	adc.w	r9, r2, r2
   11e50:	e9cd 8906 	strd	r8, r9, [sp, #24]
   11e54:	f1b8 0f00 	cmp.w	r8, #0
   11e58:	f179 0300 	sbcs.w	r3, r9, #0
   11e5c:	daf1      	bge.n	11e42 <encode_float+0x12e>
   11e5e:	e7a1      	b.n	11da4 <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   11e60:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   11e64:	0098      	lsls	r0, r3, #2
   11e66:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
   11e6a:	18c3      	adds	r3, r0, r3
   11e6c:	eb44 0202 	adc.w	r2, r4, r2
   11e70:	9306      	str	r3, [sp, #24]
   11e72:	9207      	str	r2, [sp, #28]
		expo++;
   11e74:	1c8c      	adds	r4, r1, #2
		decexp--;
   11e76:	f108 38ff 	add.w	r8, r8, #4294967295
	while (expo < -2) {
   11e7a:	f114 0f02 	cmn.w	r4, #2
   11e7e:	da26      	bge.n	11ece <encode_float+0x1ba>
			fract >>= 1;
   11e80:	9907      	ldr	r1, [sp, #28]
   11e82:	9b06      	ldr	r3, [sp, #24]
   11e84:	085b      	lsrs	r3, r3, #1
   11e86:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   11e8a:	084a      	lsrs	r2, r1, #1
   11e8c:	9306      	str	r3, [sp, #24]
   11e8e:	9207      	str	r2, [sp, #28]
			expo++;
   11e90:	4621      	mov	r1, r4
   11e92:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11e94:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   11e98:	d2f2      	bcs.n	11e80 <encode_float+0x16c>
   11e9a:	e7e1      	b.n	11e60 <encode_float+0x14c>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   11e9c:	9b06      	ldr	r3, [sp, #24]
   11e9e:	3302      	adds	r3, #2
   11ea0:	9a07      	ldr	r2, [sp, #28]
   11ea2:	f142 0200 	adc.w	r2, r2, #0
   11ea6:	9306      	str	r3, [sp, #24]
   11ea8:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
   11eaa:	a806      	add	r0, sp, #24
   11eac:	f00e fa45 	bl	2033a <_ldiv5>
		expo--;
   11eb0:	3c01      	subs	r4, #1
		decexp++;
   11eb2:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   11eb6:	9b06      	ldr	r3, [sp, #24]
   11eb8:	9a07      	ldr	r2, [sp, #28]
   11eba:	18de      	adds	r6, r3, r3
   11ebc:	eb42 0702 	adc.w	r7, r2, r2
   11ec0:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
   11ec4:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   11ec6:	2e00      	cmp	r6, #0
   11ec8:	f177 0300 	sbcs.w	r3, r7, #0
   11ecc:	daf3      	bge.n	11eb6 <encode_float+0x1a2>
	while (expo > 0) {
   11ece:	2c00      	cmp	r4, #0
   11ed0:	dce4      	bgt.n	11e9c <encode_float+0x188>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   11ed2:	f1c4 0104 	rsb	r1, r4, #4
   11ed6:	9a07      	ldr	r2, [sp, #28]
   11ed8:	341c      	adds	r4, #28
   11eda:	f1a1 0020 	sub.w	r0, r1, #32
   11ede:	9b06      	ldr	r3, [sp, #24]
   11ee0:	40cb      	lsrs	r3, r1
   11ee2:	fa02 f404 	lsl.w	r4, r2, r4
   11ee6:	4323      	orrs	r3, r4
   11ee8:	fa22 f000 	lsr.w	r0, r2, r0
   11eec:	4303      	orrs	r3, r0
   11eee:	40ca      	lsrs	r2, r1
   11ef0:	9306      	str	r3, [sp, #24]
   11ef2:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
   11ef4:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   11ef8:	d012      	beq.n	11f20 <encode_float+0x20c>
   11efa:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   11efe:	d00f      	beq.n	11f20 <encode_float+0x20c>
	bool prune_zero = false;
   11f00:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   11f02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   11f06:	d029      	beq.n	11f5c <encode_float+0x248>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   11f08:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
   11f0a:	2310      	movs	r3, #16
   11f0c:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
   11f0e:	429c      	cmp	r4, r3
   11f10:	dd00      	ble.n	11f14 <encode_float+0x200>
		decimals = 16;
   11f12:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   11f14:	2200      	movs	r2, #0
   11f16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   11f1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
   11f1e:	e028      	b.n	11f72 <encode_float+0x25e>
		if (decexp < (-4 + 1) || decexp > precision) {
   11f20:	f118 0f03 	cmn.w	r8, #3
   11f24:	db01      	blt.n	11f2a <encode_float+0x216>
   11f26:	45a8      	cmp	r8, r5
   11f28:	dd11      	ble.n	11f4e <encode_float+0x23a>
			c += 'e' - 'g';  /* e or E */
   11f2a:	f1ab 0b02 	sub.w	fp, fp, #2
   11f2e:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
   11f32:	2d00      	cmp	r5, #0
   11f34:	dd00      	ble.n	11f38 <encode_float+0x224>
				precision--;
   11f36:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   11f38:	f89a 3000 	ldrb.w	r3, [sl]
   11f3c:	f3c3 1740 	ubfx	r7, r3, #5, #1
   11f40:	f013 0f20 	tst.w	r3, #32
   11f44:	d108      	bne.n	11f58 <encode_float+0x244>
   11f46:	2d00      	cmp	r5, #0
   11f48:	dddb      	ble.n	11f02 <encode_float+0x1ee>
			prune_zero = true;
   11f4a:	2701      	movs	r7, #1
   11f4c:	e7d9      	b.n	11f02 <encode_float+0x1ee>
			precision -= decexp;
   11f4e:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
   11f52:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11f56:	e7ef      	b.n	11f38 <encode_float+0x224>
	bool prune_zero = false;
   11f58:	2700      	movs	r7, #0
   11f5a:	e7d2      	b.n	11f02 <encode_float+0x1ee>
		if (decimals < 0) {
   11f5c:	eb18 0405 	adds.w	r4, r8, r5
   11f60:	d5d3      	bpl.n	11f0a <encode_float+0x1f6>
	int digit_count = 16;
   11f62:	2310      	movs	r3, #16
   11f64:	9305      	str	r3, [sp, #20]
			decimals = 0;
   11f66:	2400      	movs	r4, #0
   11f68:	e7d4      	b.n	11f14 <encode_float+0x200>
		_ldiv10(&round);
   11f6a:	a802      	add	r0, sp, #8
   11f6c:	f00e fa03 	bl	20376 <_ldiv10>
	while (decimals--) {
   11f70:	4634      	mov	r4, r6
   11f72:	1e66      	subs	r6, r4, #1
   11f74:	2c00      	cmp	r4, #0
   11f76:	d1f8      	bne.n	11f6a <encode_float+0x256>
	}
	fract += round;
   11f78:	9b06      	ldr	r3, [sp, #24]
   11f7a:	9a02      	ldr	r2, [sp, #8]
   11f7c:	189b      	adds	r3, r3, r2
   11f7e:	9300      	str	r3, [sp, #0]
   11f80:	9a07      	ldr	r2, [sp, #28]
   11f82:	9b03      	ldr	r3, [sp, #12]
   11f84:	eb42 0303 	adc.w	r3, r2, r3
   11f88:	9301      	str	r3, [sp, #4]
   11f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
   11f8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   11f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   11f96:	bf08      	it	eq
   11f98:	2a00      	cmpeq	r2, #0
   11f9a:	d207      	bcs.n	11fac <encode_float+0x298>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   11f9c:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   11fa0:	d145      	bne.n	1202e <encode_float+0x31a>
		if (decexp > 0) {
   11fa2:	f1b8 0f00 	cmp.w	r8, #0
   11fa6:	dd3d      	ble.n	12024 <encode_float+0x310>
	char *buf = bps;
   11fa8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11faa:	e00d      	b.n	11fc8 <encode_float+0x2b4>
		_ldiv10(&fract);
   11fac:	a806      	add	r0, sp, #24
   11fae:	f00e f9e2 	bl	20376 <_ldiv10>
		decexp++;
   11fb2:	f108 0801 	add.w	r8, r8, #1
   11fb6:	e7f1      	b.n	11f9c <encode_float+0x288>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   11fb8:	a905      	add	r1, sp, #20
   11fba:	a806      	add	r0, sp, #24
   11fbc:	f00e f9e7 	bl	2038e <_get_digit>
   11fc0:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
   11fc4:	f108 38ff 	add.w	r8, r8, #4294967295
			while (decexp > 0 && digit_count > 0) {
   11fc8:	f1b8 0f00 	cmp.w	r8, #0
   11fcc:	dd02      	ble.n	11fd4 <encode_float+0x2c0>
   11fce:	9b05      	ldr	r3, [sp, #20]
   11fd0:	2b00      	cmp	r3, #0
   11fd2:	dcf1      	bgt.n	11fb8 <encode_float+0x2a4>
			}

			conv->pad0_value = decexp;
   11fd4:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
   11fd8:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   11fda:	f89a 3000 	ldrb.w	r3, [sl]
   11fde:	f013 0f20 	tst.w	r3, #32
   11fe2:	d101      	bne.n	11fe8 <encode_float+0x2d4>
   11fe4:	2d00      	cmp	r5, #0
   11fe6:	dd02      	ble.n	11fee <encode_float+0x2da>
			*buf++ = '.';
   11fe8:	232e      	movs	r3, #46	; 0x2e
   11fea:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
   11fee:	f1b8 0f00 	cmp.w	r8, #0
   11ff2:	da33      	bge.n	1205c <encode_float+0x348>
   11ff4:	2d00      	cmp	r5, #0
   11ff6:	dd31      	ble.n	1205c <encode_float+0x348>
			conv->pad0_value = -decexp;
   11ff8:	f1c8 0300 	rsb	r3, r8, #0
   11ffc:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
   12000:	429d      	cmp	r5, r3
   12002:	da01      	bge.n	12008 <encode_float+0x2f4>
				conv->pad0_value = precision;
   12004:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
   12008:	f8da 3004 	ldr.w	r3, [sl, #4]
   1200c:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   1200e:	2b00      	cmp	r3, #0
   12010:	bfd4      	ite	le
   12012:	2300      	movle	r3, #0
   12014:	2301      	movgt	r3, #1
   12016:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1201a:	f363 1245 	bfi	r2, r3, #5, #1
   1201e:	f88a 2002 	strb.w	r2, [sl, #2]
   12022:	e01b      	b.n	1205c <encode_float+0x348>
			*buf++ = '0';
   12024:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   12026:	2330      	movs	r3, #48	; 0x30
   12028:	f806 3b01 	strb.w	r3, [r6], #1
   1202c:	e7d5      	b.n	11fda <encode_float+0x2c6>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   1202e:	a905      	add	r1, sp, #20
   12030:	a806      	add	r0, sp, #24
   12032:	f00e f9ac 	bl	2038e <_get_digit>
   12036:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   12038:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
   1203c:	2830      	cmp	r0, #48	; 0x30
   1203e:	d001      	beq.n	12044 <encode_float+0x330>
			decexp--;
   12040:	f108 38ff 	add.w	r8, r8, #4294967295
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   12044:	f89a 3000 	ldrb.w	r3, [sl]
   12048:	f013 0f20 	tst.w	r3, #32
   1204c:	d101      	bne.n	12052 <encode_float+0x33e>
   1204e:	2d00      	cmp	r5, #0
   12050:	dd04      	ble.n	1205c <encode_float+0x348>
			*buf++ = '.';
   12052:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12054:	1c9e      	adds	r6, r3, #2
   12056:	232e      	movs	r3, #46	; 0x2e
   12058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1205a:	7053      	strb	r3, [r2, #1]
		}
	}

	while (precision > 0 && digit_count > 0) {
   1205c:	2d00      	cmp	r5, #0
   1205e:	dd0d      	ble.n	1207c <encode_float+0x368>
   12060:	9b05      	ldr	r3, [sp, #20]
   12062:	2b00      	cmp	r3, #0
   12064:	dd0a      	ble.n	1207c <encode_float+0x368>
		*buf++ = _get_digit(&fract, &digit_count);
   12066:	a905      	add	r1, sp, #20
   12068:	a806      	add	r0, sp, #24
   1206a:	f00e f990 	bl	2038e <_get_digit>
   1206e:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
   12072:	3d01      	subs	r5, #1
   12074:	e7f2      	b.n	1205c <encode_float+0x348>
   12076:	bf00      	nop
   12078:	00027301 	.word	0x00027301
	}

	conv->pad0_pre_exp = precision;
   1207c:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
   12080:	b157      	cbz	r7, 12098 <encode_float+0x384>
		conv->pad0_pre_exp = 0;
   12082:	2300      	movs	r3, #0
   12084:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
   12088:	4633      	mov	r3, r6
   1208a:	461e      	mov	r6, r3
   1208c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   12090:	2a30      	cmp	r2, #48	; 0x30
   12092:	d0fa      	beq.n	1208a <encode_float+0x376>
			;
		}
		if (*buf != '.') {
   12094:	2a2e      	cmp	r2, #46	; 0x2e
   12096:	d043      	beq.n	12120 <encode_float+0x40c>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   12098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   1209c:	d002      	beq.n	120a4 <encode_float+0x390>
   1209e:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
   120a2:	d12a      	bne.n	120fa <encode_float+0x3e6>
		*buf++ = c;
   120a4:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
   120a8:	f1b8 0f00 	cmp.w	r8, #0
   120ac:	db3a      	blt.n	12124 <encode_float+0x410>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   120ae:	1cb2      	adds	r2, r6, #2
   120b0:	232b      	movs	r3, #43	; 0x2b
   120b2:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   120b4:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   120b8:	dd0d      	ble.n	120d6 <encode_float+0x3c2>
			*buf++ = (decexp / 100) + '0';
   120ba:	4920      	ldr	r1, [pc, #128]	; (1213c <encode_float+0x428>)
   120bc:	fb81 3108 	smull	r3, r1, r1, r8
   120c0:	ea4f 73e8 	mov.w	r3, r8, asr #31
   120c4:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   120c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   120cc:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   120d0:	2164      	movs	r1, #100	; 0x64
   120d2:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
   120d6:	491a      	ldr	r1, [pc, #104]	; (12140 <encode_float+0x42c>)
   120d8:	fb81 3108 	smull	r3, r1, r1, r8
   120dc:	ea4f 73e8 	mov.w	r3, r8, asr #31
   120e0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   120e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
   120e8:	4616      	mov	r6, r2
   120ea:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
   120ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   120f2:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
   120f6:	3330      	adds	r3, #48	; 0x30
   120f8:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   120fa:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
   120fe:	2b00      	cmp	r3, #0
   12100:	dd16      	ble.n	12130 <encode_float+0x41c>
   12102:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
   12104:	f89a 3002 	ldrb.w	r3, [sl, #2]
   12108:	f364 1386 	bfi	r3, r4, #6, #1
   1210c:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   12110:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12112:	601e      	str	r6, [r3, #0]
	*buf = 0;
   12114:	2300      	movs	r3, #0
   12116:	7033      	strb	r3, [r6, #0]
	return bps;
}
   12118:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1211a:	b009      	add	sp, #36	; 0x24
   1211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   12120:	461e      	mov	r6, r3
   12122:	e7b9      	b.n	12098 <encode_float+0x384>
			decexp = -decexp;
   12124:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
   12128:	1cb2      	adds	r2, r6, #2
   1212a:	232d      	movs	r3, #45	; 0x2d
   1212c:	7073      	strb	r3, [r6, #1]
   1212e:	e7c1      	b.n	120b4 <encode_float+0x3a0>
		|| (conv->pad0_pre_exp > 0);
   12130:	f8da 3008 	ldr.w	r3, [sl, #8]
   12134:	2b00      	cmp	r3, #0
   12136:	dde5      	ble.n	12104 <encode_float+0x3f0>
   12138:	2401      	movs	r4, #1
   1213a:	e7e3      	b.n	12104 <encode_float+0x3f0>
   1213c:	51eb851f 	.word	0x51eb851f
   12140:	66666667 	.word	0x66666667

00012144 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12148:	b099      	sub	sp, #100	; 0x64
   1214a:	4606      	mov	r6, r0
   1214c:	460d      	mov	r5, r1
   1214e:	4617      	mov	r7, r2
   12150:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12152:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12154:	e000      	b.n	12158 <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
   12156:	3401      	adds	r4, #1
	while (*fp != 0) {
   12158:	7838      	ldrb	r0, [r7, #0]
   1215a:	2800      	cmp	r0, #0
   1215c:	f000 8593 	beq.w	12c86 <cbvprintf+0xb42>
		if (*fp != '%') {
   12160:	2825      	cmp	r0, #37	; 0x25
   12162:	d007      	beq.n	12174 <cbvprintf+0x30>
			OUTC(*fp++);
   12164:	3701      	adds	r7, #1
   12166:	4629      	mov	r1, r5
   12168:	47b0      	blx	r6
   1216a:	2800      	cmp	r0, #0
   1216c:	daf3      	bge.n	12156 <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
   1216e:	b019      	add	sp, #100	; 0x64
   12170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
   12174:	2300      	movs	r3, #0
   12176:	930a      	str	r3, [sp, #40]	; 0x28
   12178:	930b      	str	r3, [sp, #44]	; 0x2c
   1217a:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   1217c:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   12180:	9208      	str	r2, [sp, #32]
		char sign = 0;
   12182:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
   12186:	930c      	str	r3, [sp, #48]	; 0x30
   12188:	930d      	str	r3, [sp, #52]	; 0x34
   1218a:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
   1218c:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
   12190:	787b      	ldrb	r3, [r7, #1]
   12192:	2b25      	cmp	r3, #37	; 0x25
   12194:	d002      	beq.n	1219c <cbvprintf+0x58>
	bool loop = true;
   12196:	f04f 0801 	mov.w	r8, #1
   1219a:	e031      	b.n	12200 <cbvprintf+0xbc>
		conv->specifier = *sp++;
   1219c:	f107 0902 	add.w	r9, r7, #2
   121a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
   121a4:	e1ae      	b.n	12504 <cbvprintf+0x3c0>
			conv->flag_dash = true;
   121a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   121aa:	f043 0304 	orr.w	r3, r3, #4
   121ae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
   121b2:	f1b8 0f00 	cmp.w	r8, #0
   121b6:	d020      	beq.n	121fa <cbvprintf+0xb6>
			++sp;
   121b8:	f109 0901 	add.w	r9, r9, #1
   121bc:	e01d      	b.n	121fa <cbvprintf+0xb6>
			conv->flag_plus = true;
   121be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   121c2:	f043 0308 	orr.w	r3, r3, #8
   121c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   121ca:	e7f2      	b.n	121b2 <cbvprintf+0x6e>
			conv->flag_space = true;
   121cc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   121d0:	f043 0310 	orr.w	r3, r3, #16
   121d4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   121d8:	e7eb      	b.n	121b2 <cbvprintf+0x6e>
			conv->flag_hash = true;
   121da:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   121de:	f043 0320 	orr.w	r3, r3, #32
   121e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   121e6:	e7e4      	b.n	121b2 <cbvprintf+0x6e>
			conv->flag_zero = true;
   121e8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   121ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   121f0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   121f4:	e7dd      	b.n	121b2 <cbvprintf+0x6e>
		switch (*sp) {
   121f6:	f04f 0800 	mov.w	r8, #0
	} while (loop);
   121fa:	f1b8 0f00 	cmp.w	r8, #0
   121fe:	d029      	beq.n	12254 <cbvprintf+0x110>
		switch (*sp) {
   12200:	f899 3000 	ldrb.w	r3, [r9]
   12204:	3b20      	subs	r3, #32
   12206:	2b10      	cmp	r3, #16
   12208:	d8f5      	bhi.n	121f6 <cbvprintf+0xb2>
   1220a:	a201      	add	r2, pc, #4	; (adr r2, 12210 <cbvprintf+0xcc>)
   1220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12210:	000121cd 	.word	0x000121cd
   12214:	000121f7 	.word	0x000121f7
   12218:	000121f7 	.word	0x000121f7
   1221c:	000121db 	.word	0x000121db
   12220:	000121f7 	.word	0x000121f7
   12224:	000121f7 	.word	0x000121f7
   12228:	000121f7 	.word	0x000121f7
   1222c:	000121f7 	.word	0x000121f7
   12230:	000121f7 	.word	0x000121f7
   12234:	000121f7 	.word	0x000121f7
   12238:	000121f7 	.word	0x000121f7
   1223c:	000121bf 	.word	0x000121bf
   12240:	000121f7 	.word	0x000121f7
   12244:	000121a7 	.word	0x000121a7
   12248:	000121f7 	.word	0x000121f7
   1224c:	000121f7 	.word	0x000121f7
   12250:	000121e9 	.word	0x000121e9
	if (conv->flag_zero && conv->flag_dash) {
   12254:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12258:	f003 0344 	and.w	r3, r3, #68	; 0x44
   1225c:	2b44      	cmp	r3, #68	; 0x44
   1225e:	d06d      	beq.n	1233c <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
   12260:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
   12264:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1226c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
   12270:	f899 3000 	ldrb.w	r3, [r9]
   12274:	2b2a      	cmp	r3, #42	; 0x2a
   12276:	d068      	beq.n	1234a <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
   12278:	a809      	add	r0, sp, #36	; 0x24
   1227a:	f7ff fcc5 	bl	11c08 <extract_decimal>
	if (sp != wp) {
   1227e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12280:	4599      	cmp	r9, r3
   12282:	d012      	beq.n	122aa <cbvprintf+0x166>
		conv->width_present = true;
   12284:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1228c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
   12290:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
   12292:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   12296:	2800      	cmp	r0, #0
   12298:	db60      	blt.n	1235c <cbvprintf+0x218>
   1229a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   1229c:	4313      	orrs	r3, r2
   1229e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   122a2:	f363 0241 	bfi	r2, r3, #1, #1
   122a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   122aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
   122ac:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
   122ae:	781b      	ldrb	r3, [r3, #0]
   122b0:	2b2e      	cmp	r3, #46	; 0x2e
   122b2:	bf14      	ite	ne
   122b4:	2300      	movne	r3, #0
   122b6:	2301      	moveq	r3, #1
   122b8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   122bc:	f363 0241 	bfi	r2, r3, #1, #1
   122c0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   122c4:	2b00      	cmp	r3, #0
   122c6:	d04b      	beq.n	12360 <cbvprintf+0x21c>
	++sp;
   122c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122ca:	1c5a      	adds	r2, r3, #1
   122cc:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   122ce:	785b      	ldrb	r3, [r3, #1]
   122d0:	2b2a      	cmp	r3, #42	; 0x2a
   122d2:	d048      	beq.n	12366 <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
   122d4:	a809      	add	r0, sp, #36	; 0x24
   122d6:	f7ff fc97 	bl	11c08 <extract_decimal>
	conv->prec_value = prec;
   122da:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   122dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   122e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   122e4:	2800      	cmp	r0, #0
   122e6:	db47      	blt.n	12378 <cbvprintf+0x234>
   122e8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   122ea:	4313      	orrs	r3, r2
   122ec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   122f0:	f363 0241 	bfi	r2, r3, #1, #1
   122f4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   122f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
   122fc:	f899 3000 	ldrb.w	r3, [r9]
   12300:	3b4c      	subs	r3, #76	; 0x4c
   12302:	2b2e      	cmp	r3, #46	; 0x2e
   12304:	f200 80dc 	bhi.w	124c0 <cbvprintf+0x37c>
   12308:	e8df f003 	tbb	[pc, r3]
   1230c:	dadadaca 	.word	0xdadadaca
   12310:	dadadada 	.word	0xdadadada
   12314:	dadadada 	.word	0xdadadada
   12318:	dadadada 	.word	0xdadadada
   1231c:	dadadada 	.word	0xdadadada
   12320:	dadadada 	.word	0xdadadada
   12324:	dadadada 	.word	0xdadadada
   12328:	da6ada38 	.word	0xda6ada38
   1232c:	dadada51 	.word	0xdadada51
   12330:	dadadada 	.word	0xdadadada
   12334:	dadadac0 	.word	0xdadadac0
   12338:	dada      	.short	0xdada
   1233a:	b6          	.byte	0xb6
   1233b:	00          	.byte	0x00
		conv->flag_zero = false;
   1233c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12340:	f36f 1386 	bfc	r3, #6, #1
   12344:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   12348:	e78a      	b.n	12260 <cbvprintf+0x11c>
		conv->width_star = true;
   1234a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1234e:	f043 0301 	orr.w	r3, r3, #1
   12352:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   12356:	464b      	mov	r3, r9
   12358:	3301      	adds	r3, #1
   1235a:	e7a7      	b.n	122ac <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
   1235c:	2201      	movs	r2, #1
   1235e:	e79d      	b.n	1229c <cbvprintf+0x158>
		return sp;
   12360:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   12364:	e7ca      	b.n	122fc <cbvprintf+0x1b8>
		conv->prec_star = true;
   12366:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1236a:	f043 0304 	orr.w	r3, r3, #4
   1236e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   12372:	f102 0901 	add.w	r9, r2, #1
   12376:	e7c1      	b.n	122fc <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
   12378:	2201      	movs	r2, #1
   1237a:	e7b6      	b.n	122ea <cbvprintf+0x1a6>
		if (*++sp == 'h') {
   1237c:	f109 0201 	add.w	r2, r9, #1
   12380:	f899 3001 	ldrb.w	r3, [r9, #1]
   12384:	2b68      	cmp	r3, #104	; 0x68
   12386:	d008      	beq.n	1239a <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
   12388:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1238c:	2102      	movs	r1, #2
   1238e:	f361 03c6 	bfi	r3, r1, #3, #4
   12392:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
   12396:	4691      	mov	r9, r2
   12398:	e02b      	b.n	123f2 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
   1239a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1239e:	2201      	movs	r2, #1
   123a0:	f362 03c6 	bfi	r3, r2, #3, #4
   123a4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   123a8:	f109 0902 	add.w	r9, r9, #2
   123ac:	e021      	b.n	123f2 <cbvprintf+0x2ae>
		if (*++sp == 'l') {
   123ae:	f109 0201 	add.w	r2, r9, #1
   123b2:	f899 3001 	ldrb.w	r3, [r9, #1]
   123b6:	2b6c      	cmp	r3, #108	; 0x6c
   123b8:	d008      	beq.n	123cc <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
   123ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   123be:	2103      	movs	r1, #3
   123c0:	f361 03c6 	bfi	r3, r1, #3, #4
   123c4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
   123c8:	4691      	mov	r9, r2
   123ca:	e012      	b.n	123f2 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
   123cc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   123d0:	2204      	movs	r2, #4
   123d2:	f362 03c6 	bfi	r3, r2, #3, #4
   123d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   123da:	f109 0902 	add.w	r9, r9, #2
   123de:	e008      	b.n	123f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   123e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   123e4:	2205      	movs	r2, #5
   123e6:	f362 03c6 	bfi	r3, r2, #3, #4
   123ea:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   123ee:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
   123f2:	f819 2b01 	ldrb.w	r2, [r9], #1
   123f6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   123fa:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   123fe:	2b37      	cmp	r3, #55	; 0x37
   12400:	f200 8185 	bhi.w	1270e <cbvprintf+0x5ca>
   12404:	e8df f013 	tbh	[pc, r3, lsl #1]
   12408:	01830131 	.word	0x01830131
   1240c:	01830183 	.word	0x01830183
   12410:	01310131 	.word	0x01310131
   12414:	01830131 	.word	0x01830131
   12418:	01830183 	.word	0x01830183
   1241c:	01830183 	.word	0x01830183
   12420:	01830183 	.word	0x01830183
   12424:	01830183 	.word	0x01830183
   12428:	01830183 	.word	0x01830183
   1242c:	01830183 	.word	0x01830183
   12430:	01830183 	.word	0x01830183
   12434:	011c0183 	.word	0x011c0183
   12438:	01830183 	.word	0x01830183
   1243c:	01830183 	.word	0x01830183
   12440:	01830183 	.word	0x01830183
   12444:	01830183 	.word	0x01830183
   12448:	01830131 	.word	0x01830131
   1244c:	0063011c 	.word	0x0063011c
   12450:	01310131 	.word	0x01310131
   12454:	01830131 	.word	0x01830131
   12458:	01830063 	.word	0x01830063
   1245c:	01830183 	.word	0x01830183
   12460:	01620183 	.word	0x01620183
   12464:	0173011c 	.word	0x0173011c
   12468:	01830183 	.word	0x01830183
   1246c:	01830173 	.word	0x01830173
   12470:	0183011c 	.word	0x0183011c
   12474:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
   12478:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1247c:	2206      	movs	r2, #6
   1247e:	f362 03c6 	bfi	r3, r2, #3, #4
   12482:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12486:	f109 0901 	add.w	r9, r9, #1
		break;
   1248a:	e7b2      	b.n	123f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   1248c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12490:	2207      	movs	r2, #7
   12492:	f362 03c6 	bfi	r3, r2, #3, #4
   12496:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   1249a:	f109 0901 	add.w	r9, r9, #1
		break;
   1249e:	e7a8      	b.n	123f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
   124a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   124a4:	2208      	movs	r2, #8
   124a6:	f362 03c6 	bfi	r3, r2, #3, #4
   124aa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   124ae:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
   124b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   124b6:	f043 0302 	orr.w	r3, r3, #2
   124ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   124be:	e798      	b.n	123f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
   124c0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   124c4:	f36f 03c6 	bfc	r3, #3, #4
   124c8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   124cc:	e791      	b.n	123f2 <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
   124ce:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   124d2:	2101      	movs	r1, #1
   124d4:	f361 0302 	bfi	r3, r1, #0, #3
   124d8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   124dc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   124e0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   124e4:	2b40      	cmp	r3, #64	; 0x40
   124e6:	f000 80b3 	beq.w	12650 <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
   124ea:	2a63      	cmp	r2, #99	; 0x63
   124ec:	f000 80b7 	beq.w	1265e <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
   124f0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   124f4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   124f8:	ea48 0802 	orr.w	r8, r8, r2
   124fc:	f368 0341 	bfi	r3, r8, #1, #1
   12500:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
   12504:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12508:	f013 0f01 	tst.w	r3, #1
   1250c:	f000 8112 	beq.w	12734 <cbvprintf+0x5f0>
			width = va_arg(ap, int);
   12510:	9b05      	ldr	r3, [sp, #20]
   12512:	1d1a      	adds	r2, r3, #4
   12514:	9205      	str	r2, [sp, #20]
   12516:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
   1251a:	f1b8 0f00 	cmp.w	r8, #0
   1251e:	f2c0 8100 	blt.w	12722 <cbvprintf+0x5de>
		if (conv->prec_star) {
   12522:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12526:	f013 0f04 	tst.w	r3, #4
   1252a:	f000 8116 	beq.w	1275a <cbvprintf+0x616>
			int arg = va_arg(ap, int);
   1252e:	9b05      	ldr	r3, [sp, #20]
   12530:	1d1a      	adds	r2, r3, #4
   12532:	9205      	str	r2, [sp, #20]
   12534:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
   12538:	f1ba 0f00 	cmp.w	sl, #0
   1253c:	f2c0 8104 	blt.w	12748 <cbvprintf+0x604>
		conv->pad0_value = 0;
   12540:	2300      	movs	r3, #0
   12542:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
   12544:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
   12546:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1254a:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1254e:	2b04      	cmp	r3, #4
   12550:	f000 810c 	beq.w	1276c <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
   12554:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12558:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
   1255c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
   12560:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12564:	2b01      	cmp	r3, #1
   12566:	f000 8111 	beq.w	1278c <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1256a:	2b02      	cmp	r3, #2
   1256c:	f000 8156 	beq.w	1281c <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
   12570:	2b04      	cmp	r3, #4
   12572:	f000 81a7 	beq.w	128c4 <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12576:	2b03      	cmp	r3, #3
   12578:	f000 81be 	beq.w	128f8 <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
   1257c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12580:	f012 0f03 	tst.w	r2, #3
   12584:	f040 81be 	bne.w	12904 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   12588:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1258c:	3b25      	subs	r3, #37	; 0x25
   1258e:	2b53      	cmp	r3, #83	; 0x53
   12590:	f200 81cb 	bhi.w	1292a <cbvprintf+0x7e6>
   12594:	e8df f013 	tbh	[pc, r3, lsl #1]
   12598:	01c901c2 	.word	0x01c901c2
   1259c:	01c901c9 	.word	0x01c901c9
   125a0:	01c901c9 	.word	0x01c901c9
   125a4:	01c901c9 	.word	0x01c901c9
   125a8:	01c901c9 	.word	0x01c901c9
   125ac:	01c901c9 	.word	0x01c901c9
   125b0:	01c901c9 	.word	0x01c901c9
   125b4:	01c901c9 	.word	0x01c901c9
   125b8:	01c901c9 	.word	0x01c901c9
   125bc:	01c901c9 	.word	0x01c901c9
   125c0:	01c901c9 	.word	0x01c901c9
   125c4:	01c901c9 	.word	0x01c901c9
   125c8:	01c901c9 	.word	0x01c901c9
   125cc:	01c901c9 	.word	0x01c901c9
   125d0:	01c9028a 	.word	0x01c9028a
   125d4:	01c901c9 	.word	0x01c901c9
   125d8:	028a028a 	.word	0x028a028a
   125dc:	01c9028a 	.word	0x01c9028a
   125e0:	01c901c9 	.word	0x01c901c9
   125e4:	01c901c9 	.word	0x01c901c9
   125e8:	01c901c9 	.word	0x01c901c9
   125ec:	01c901c9 	.word	0x01c901c9
   125f0:	01c901c9 	.word	0x01c901c9
   125f4:	01c901c9 	.word	0x01c901c9
   125f8:	01c901c9 	.word	0x01c901c9
   125fc:	022401c9 	.word	0x022401c9
   12600:	01c901c9 	.word	0x01c901c9
   12604:	01c901c9 	.word	0x01c901c9
   12608:	01c901c9 	.word	0x01c901c9
   1260c:	01c901c9 	.word	0x01c901c9
   12610:	01c9028a 	.word	0x01c9028a
   12614:	0216020e 	.word	0x0216020e
   12618:	028a028a 	.word	0x028a028a
   1261c:	01c9028a 	.word	0x01c9028a
   12620:	01c90216 	.word	0x01c90216
   12624:	01c901c9 	.word	0x01c901c9
   12628:	026601c9 	.word	0x026601c9
   1262c:	024e0224 	.word	0x024e0224
   12630:	01c901c9 	.word	0x01c901c9
   12634:	01c901cb 	.word	0x01c901cb
   12638:	01c90224 	.word	0x01c90224
   1263c:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
   12640:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12644:	2102      	movs	r1, #2
   12646:	f361 0302 	bfi	r3, r1, #0, #3
   1264a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1264e:	e745      	b.n	124dc <cbvprintf+0x398>
			conv->invalid = true;
   12650:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   12654:	f041 0101 	orr.w	r1, r1, #1
   12658:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1265c:	e745      	b.n	124ea <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1265e:	f1b3 0800 	subs.w	r8, r3, #0
   12662:	bf18      	it	ne
   12664:	f04f 0801 	movne.w	r8, #1
   12668:	e742      	b.n	124f0 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
   1266a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1266e:	2104      	movs	r1, #4
   12670:	f361 0302 	bfi	r3, r1, #0, #3
   12674:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
   12678:	2a61      	cmp	r2, #97	; 0x61
   1267a:	d01f      	beq.n	126bc <cbvprintf+0x578>
   1267c:	2a41      	cmp	r2, #65	; 0x41
   1267e:	d01b      	beq.n	126b8 <cbvprintf+0x574>
   12680:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
   12682:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12686:	f362 13c7 	bfi	r3, r2, #7, #1
   1268a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
   1268e:	b2da      	uxtb	r2, r3
   12690:	f013 0f80 	tst.w	r3, #128	; 0x80
   12694:	d142      	bne.n	1271c <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
   12696:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1269a:	2a18      	cmp	r2, #24
   1269c:	d010      	beq.n	126c0 <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
   1269e:	2a00      	cmp	r2, #0
   126a0:	f43f af26 	beq.w	124f0 <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   126a4:	2a40      	cmp	r2, #64	; 0x40
   126a6:	f43f af23 	beq.w	124f0 <cbvprintf+0x3ac>
			conv->invalid = true;
   126aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   126ae:	f043 0301 	orr.w	r3, r3, #1
   126b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   126b6:	e71b      	b.n	124f0 <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
   126b8:	2201      	movs	r2, #1
   126ba:	e7e2      	b.n	12682 <cbvprintf+0x53e>
   126bc:	2201      	movs	r2, #1
   126be:	e7e0      	b.n	12682 <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
   126c0:	b2db      	uxtb	r3, r3
   126c2:	f36f 03c6 	bfc	r3, #3, #4
   126c6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   126ca:	e711      	b.n	124f0 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   126cc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   126d0:	2203      	movs	r2, #3
   126d2:	f362 0302 	bfi	r3, r2, #0, #3
   126d6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   126da:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   126de:	f003 0378 	and.w	r3, r3, #120	; 0x78
   126e2:	2b40      	cmp	r3, #64	; 0x40
   126e4:	f47f af04 	bne.w	124f0 <cbvprintf+0x3ac>
			unsupported = true;
   126e8:	f04f 0801 	mov.w	r8, #1
   126ec:	e700      	b.n	124f0 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   126ee:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   126f2:	2203      	movs	r2, #3
   126f4:	f362 0302 	bfi	r3, r2, #0, #3
   126f8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   126fc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12700:	f013 0f78 	tst.w	r3, #120	; 0x78
   12704:	f43f aef4 	beq.w	124f0 <cbvprintf+0x3ac>
			unsupported = true;
   12708:	f04f 0801 	mov.w	r8, #1
   1270c:	e6f0      	b.n	124f0 <cbvprintf+0x3ac>
		conv->invalid = true;
   1270e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12712:	f043 0301 	orr.w	r3, r3, #1
   12716:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   1271a:	e6e9      	b.n	124f0 <cbvprintf+0x3ac>
			unsupported = true;
   1271c:	f04f 0801 	mov.w	r8, #1
   12720:	e6e6      	b.n	124f0 <cbvprintf+0x3ac>
				conv->flag_dash = true;
   12722:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12726:	f043 0304 	orr.w	r3, r3, #4
   1272a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
   1272e:	f1c8 0800 	rsb	r8, r8, #0
   12732:	e6f6      	b.n	12522 <cbvprintf+0x3de>
		} else if (conv->width_present) {
   12734:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   12738:	2b00      	cmp	r3, #0
   1273a:	db02      	blt.n	12742 <cbvprintf+0x5fe>
		int width = -1;
   1273c:	f04f 38ff 	mov.w	r8, #4294967295
   12740:	e6ef      	b.n	12522 <cbvprintf+0x3de>
			width = conv->width_value;
   12742:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   12746:	e6ec      	b.n	12522 <cbvprintf+0x3de>
				conv->prec_present = false;
   12748:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1274c:	f36f 0341 	bfc	r3, #1, #1
   12750:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12754:	f04f 3aff 	mov.w	sl, #4294967295
   12758:	e6f2      	b.n	12540 <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
   1275a:	f013 0f02 	tst.w	r3, #2
   1275e:	d002      	beq.n	12766 <cbvprintf+0x622>
			precision = conv->prec_value;
   12760:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12764:	e6ec      	b.n	12540 <cbvprintf+0x3fc>
		int precision = -1;
   12766:	f04f 3aff 	mov.w	sl, #4294967295
   1276a:	e6e9      	b.n	12540 <cbvprintf+0x3fc>
		    && !conv->prec_present) {
   1276c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12770:	f013 0f02 	tst.w	r3, #2
   12774:	f47f aeee 	bne.w	12554 <cbvprintf+0x410>
			if (conv->specifier_a) {
   12778:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   1277c:	2b00      	cmp	r3, #0
   1277e:	db02      	blt.n	12786 <cbvprintf+0x642>
				precision = 6;
   12780:	f04f 0a06 	mov.w	sl, #6
   12784:	e6e6      	b.n	12554 <cbvprintf+0x410>
				precision = FRACTION_HEX;
   12786:	f04f 0a0d 	mov.w	sl, #13
   1278a:	e6e3      	b.n	12554 <cbvprintf+0x410>
			switch (length_mod) {
   1278c:	1ecb      	subs	r3, r1, #3
   1278e:	2b04      	cmp	r3, #4
   12790:	d804      	bhi.n	1279c <cbvprintf+0x658>
   12792:	e8df f003 	tbb	[pc, r3]
   12796:	1d0b      	.short	0x1d0b
   12798:	3529      	.short	0x3529
   1279a:	35          	.byte	0x35
   1279b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1279c:	9b05      	ldr	r3, [sp, #20]
   1279e:	1d1a      	adds	r2, r3, #4
   127a0:	9205      	str	r2, [sp, #20]
   127a2:	681a      	ldr	r2, [r3, #0]
   127a4:	17d3      	asrs	r3, r2, #31
   127a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   127aa:	e006      	b.n	127ba <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
   127ac:	9b05      	ldr	r3, [sp, #20]
   127ae:	1d1a      	adds	r2, r3, #4
   127b0:	9205      	str	r2, [sp, #20]
   127b2:	681a      	ldr	r2, [r3, #0]
   127b4:	17d3      	asrs	r3, r2, #31
   127b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   127ba:	2901      	cmp	r1, #1
   127bc:	d028      	beq.n	12810 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   127be:	2902      	cmp	r1, #2
   127c0:	f47f aedc 	bne.w	1257c <cbvprintf+0x438>
				value->sint = (short)value->sint;
   127c4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   127c8:	17d3      	asrs	r3, r2, #31
   127ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   127ce:	e6d5      	b.n	1257c <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
   127d0:	9b05      	ldr	r3, [sp, #20]
   127d2:	3307      	adds	r3, #7
   127d4:	f023 0307 	bic.w	r3, r3, #7
   127d8:	f103 0208 	add.w	r2, r3, #8
   127dc:	9205      	str	r2, [sp, #20]
   127de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   127e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   127e6:	e7e8      	b.n	127ba <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
   127e8:	9b05      	ldr	r3, [sp, #20]
   127ea:	3307      	adds	r3, #7
   127ec:	f023 0307 	bic.w	r3, r3, #7
   127f0:	f103 0208 	add.w	r2, r3, #8
   127f4:	9205      	str	r2, [sp, #20]
   127f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   127fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   127fe:	e7dc      	b.n	127ba <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12800:	9b05      	ldr	r3, [sp, #20]
   12802:	1d1a      	adds	r2, r3, #4
   12804:	9205      	str	r2, [sp, #20]
   12806:	681a      	ldr	r2, [r3, #0]
   12808:	17d3      	asrs	r3, r2, #31
				value->sint =
   1280a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1280e:	e7d4      	b.n	127ba <cbvprintf+0x676>
				value->sint = (char)value->sint;
   12810:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   12814:	930a      	str	r3, [sp, #40]	; 0x28
   12816:	2300      	movs	r3, #0
   12818:	930b      	str	r3, [sp, #44]	; 0x2c
   1281a:	e6af      	b.n	1257c <cbvprintf+0x438>
			switch (length_mod) {
   1281c:	1ecb      	subs	r3, r1, #3
   1281e:	2b04      	cmp	r3, #4
   12820:	d804      	bhi.n	1282c <cbvprintf+0x6e8>
   12822:	e8df f003 	tbb	[pc, r3]
   12826:	1f0b      	.short	0x1f0b
   12828:	4135      	.short	0x4135
   1282a:	41          	.byte	0x41
   1282b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1282c:	9b05      	ldr	r3, [sp, #20]
   1282e:	1d1a      	adds	r2, r3, #4
   12830:	9205      	str	r2, [sp, #20]
   12832:	681b      	ldr	r3, [r3, #0]
   12834:	930a      	str	r3, [sp, #40]	; 0x28
   12836:	2300      	movs	r3, #0
   12838:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   1283a:	e01e      	b.n	1287a <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
   1283c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
   12840:	2b63      	cmp	r3, #99	; 0x63
   12842:	d007      	beq.n	12854 <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
   12844:	9b05      	ldr	r3, [sp, #20]
   12846:	1d1a      	adds	r2, r3, #4
   12848:	9205      	str	r2, [sp, #20]
   1284a:	681b      	ldr	r3, [r3, #0]
   1284c:	930a      	str	r3, [sp, #40]	; 0x28
   1284e:	2300      	movs	r3, #0
   12850:	930b      	str	r3, [sp, #44]	; 0x2c
   12852:	e012      	b.n	1287a <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
   12854:	9b05      	ldr	r3, [sp, #20]
   12856:	1d1a      	adds	r2, r3, #4
   12858:	9205      	str	r2, [sp, #20]
   1285a:	681b      	ldr	r3, [r3, #0]
   1285c:	930a      	str	r3, [sp, #40]	; 0x28
   1285e:	2300      	movs	r3, #0
   12860:	930b      	str	r3, [sp, #44]	; 0x2c
   12862:	e00a      	b.n	1287a <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
   12864:	9b05      	ldr	r3, [sp, #20]
   12866:	3307      	adds	r3, #7
   12868:	f023 0307 	bic.w	r3, r3, #7
   1286c:	f103 0208 	add.w	r2, r3, #8
   12870:	9205      	str	r2, [sp, #20]
   12872:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   12876:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1287a:	2901      	cmp	r1, #1
   1287c:	d01c      	beq.n	128b8 <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
   1287e:	2902      	cmp	r1, #2
   12880:	f47f ae7c 	bne.w	1257c <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
   12884:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   12888:	930a      	str	r3, [sp, #40]	; 0x28
   1288a:	2300      	movs	r3, #0
   1288c:	930b      	str	r3, [sp, #44]	; 0x2c
   1288e:	e675      	b.n	1257c <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
   12890:	9b05      	ldr	r3, [sp, #20]
   12892:	3307      	adds	r3, #7
   12894:	f023 0307 	bic.w	r3, r3, #7
   12898:	f103 0208 	add.w	r2, r3, #8
   1289c:	9205      	str	r2, [sp, #20]
   1289e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   128a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   128a6:	e7e8      	b.n	1287a <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
   128a8:	9b05      	ldr	r3, [sp, #20]
   128aa:	1d1a      	adds	r2, r3, #4
   128ac:	9205      	str	r2, [sp, #20]
   128ae:	681b      	ldr	r3, [r3, #0]
				value->uint =
   128b0:	930a      	str	r3, [sp, #40]	; 0x28
   128b2:	2300      	movs	r3, #0
   128b4:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   128b6:	e7e0      	b.n	1287a <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
   128b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   128bc:	930a      	str	r3, [sp, #40]	; 0x28
   128be:	2300      	movs	r3, #0
   128c0:	930b      	str	r3, [sp, #44]	; 0x2c
   128c2:	e65b      	b.n	1257c <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
   128c4:	2908      	cmp	r1, #8
   128c6:	d00b      	beq.n	128e0 <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
   128c8:	9b05      	ldr	r3, [sp, #20]
   128ca:	3307      	adds	r3, #7
   128cc:	f023 0307 	bic.w	r3, r3, #7
   128d0:	f103 0208 	add.w	r2, r3, #8
   128d4:	9205      	str	r2, [sp, #20]
   128d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   128da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   128de:	e64d      	b.n	1257c <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
   128e0:	9b05      	ldr	r3, [sp, #20]
   128e2:	3307      	adds	r3, #7
   128e4:	f023 0307 	bic.w	r3, r3, #7
   128e8:	f103 0208 	add.w	r2, r3, #8
   128ec:	9205      	str	r2, [sp, #20]
   128ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   128f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   128f6:	e641      	b.n	1257c <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
   128f8:	9b05      	ldr	r3, [sp, #20]
   128fa:	1d1a      	adds	r2, r3, #4
   128fc:	9205      	str	r2, [sp, #20]
   128fe:	681b      	ldr	r3, [r3, #0]
   12900:	930a      	str	r3, [sp, #40]	; 0x28
   12902:	e63b      	b.n	1257c <cbvprintf+0x438>
			OUTS(sp, fp);
   12904:	464b      	mov	r3, r9
   12906:	463a      	mov	r2, r7
   12908:	4629      	mov	r1, r5
   1290a:	4630      	mov	r0, r6
   1290c:	f00d fd5b 	bl	203c6 <outs>
   12910:	2800      	cmp	r0, #0
   12912:	f6ff ac2c 	blt.w	1216e <cbvprintf+0x2a>
   12916:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   12918:	464f      	mov	r7, r9
			continue;
   1291a:	e41d      	b.n	12158 <cbvprintf+0x14>
			OUTC('%');
   1291c:	4629      	mov	r1, r5
   1291e:	2025      	movs	r0, #37	; 0x25
   12920:	47b0      	blx	r6
   12922:	2800      	cmp	r0, #0
   12924:	f6ff ac23 	blt.w	1216e <cbvprintf+0x2a>
   12928:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
   1292a:	464f      	mov	r7, r9
			continue;
   1292c:	e414      	b.n	12158 <cbvprintf+0x14>
			bps = (const char *)value->ptr;
   1292e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
   12930:	f1ba 0f00 	cmp.w	sl, #0
   12934:	db3a      	blt.n	129ac <cbvprintf+0x868>
				len = strnlen(bps, precision);
   12936:	4651      	mov	r1, sl
   12938:	4638      	mov	r0, r7
   1293a:	f012 ff5d 	bl	257f8 <strnlen>
			bpe = bps + len;
   1293e:	4438      	add	r0, r7
   12940:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
   12942:	2f00      	cmp	r7, #0
   12944:	d0f1      	beq.n	1292a <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
   12946:	9b08      	ldr	r3, [sp, #32]
   12948:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
   1294a:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1294e:	b100      	cbz	r0, 12952 <cbvprintf+0x80e>
			nj_len += 1U;
   12950:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12952:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   12956:	f011 0f10 	tst.w	r1, #16
   1295a:	f000 80b6 	beq.w	12aca <cbvprintf+0x986>
			nj_len += 2U;
   1295e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   12960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12962:	4413      	add	r3, r2
		if (conv->pad_fp) {
   12964:	f011 0f40 	tst.w	r1, #64	; 0x40
   12968:	d001      	beq.n	1296e <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
   1296a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1296c:	4413      	add	r3, r2
		if (width > 0) {
   1296e:	f1b8 0f00 	cmp.w	r8, #0
   12972:	f340 80c3 	ble.w	12afc <cbvprintf+0x9b8>
			width -= (int)nj_len;
   12976:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1297a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1297e:	f013 0f04 	tst.w	r3, #4
   12982:	f040 80bb 	bne.w	12afc <cbvprintf+0x9b8>
				if (conv->flag_zero) {
   12986:	f013 0f40 	tst.w	r3, #64	; 0x40
   1298a:	f000 80a4 	beq.w	12ad6 <cbvprintf+0x992>
					if (sign != 0) {
   1298e:	2800      	cmp	r0, #0
   12990:	f000 80a4 	beq.w	12adc <cbvprintf+0x998>
						OUTC(sign);
   12994:	4629      	mov	r1, r5
   12996:	47b0      	blx	r6
   12998:	2800      	cmp	r0, #0
   1299a:	f6ff abe8 	blt.w	1216e <cbvprintf+0x2a>
   1299e:	3401      	adds	r4, #1
						sign = 0;
   129a0:	2300      	movs	r3, #0
   129a2:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
   129a6:	f04f 0a30 	mov.w	sl, #48	; 0x30
   129aa:	e099      	b.n	12ae0 <cbvprintf+0x99c>
				len = strlen(bps);
   129ac:	4638      	mov	r0, r7
   129ae:	f7f9 fd17 	bl	c3e0 <strlen>
   129b2:	e7c4      	b.n	1293e <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   129b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   129b6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
   129ba:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   129be:	9308      	str	r3, [sp, #32]
			bps = buf;
   129c0:	af11      	add	r7, sp, #68	; 0x44
			break;
   129c2:	e7be      	b.n	12942 <cbvprintf+0x7fe>
			if (conv->flag_plus) {
   129c4:	f012 0f08 	tst.w	r2, #8
   129c8:	d024      	beq.n	12a14 <cbvprintf+0x8d0>
				sign = '+';
   129ca:	232b      	movs	r3, #43	; 0x2b
   129cc:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
   129d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   129d4:	2a00      	cmp	r2, #0
   129d6:	f173 0100 	sbcs.w	r1, r3, #0
   129da:	db22      	blt.n	12a22 <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
   129dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
   129e0:	9b08      	ldr	r3, [sp, #32]
   129e2:	9300      	str	r3, [sp, #0]
   129e4:	ab11      	add	r3, sp, #68	; 0x44
   129e6:	aa0c      	add	r2, sp, #48	; 0x30
   129e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   129ec:	f7ff f922 	bl	11c34 <encode_uint>
   129f0:	4607      	mov	r7, r0
			if (precision >= 0) {
   129f2:	f1ba 0f00 	cmp.w	sl, #0
   129f6:	dba4      	blt.n	12942 <cbvprintf+0x7fe>
				size_t len = bpe - bps;
   129f8:	9b08      	ldr	r3, [sp, #32]
   129fa:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   129fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12a00:	f36f 1286 	bfc	r2, #6, #1
   12a04:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   12a08:	459a      	cmp	sl, r3
   12a0a:	d99a      	bls.n	12942 <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
   12a0c:	ebaa 0303 	sub.w	r3, sl, r3
   12a10:	930d      	str	r3, [sp, #52]	; 0x34
   12a12:	e796      	b.n	12942 <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
   12a14:	f012 0f10 	tst.w	r2, #16
   12a18:	d0da      	beq.n	129d0 <cbvprintf+0x88c>
				sign = ' ';
   12a1a:	2320      	movs	r3, #32
   12a1c:	f88d 301f 	strb.w	r3, [sp, #31]
   12a20:	e7d6      	b.n	129d0 <cbvprintf+0x88c>
				sign = '-';
   12a22:	212d      	movs	r1, #45	; 0x2d
   12a24:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
   12a28:	4252      	negs	r2, r2
   12a2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12a2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   12a32:	e7d5      	b.n	129e0 <cbvprintf+0x89c>
			if (value->ptr != NULL) {
   12a34:	980a      	ldr	r0, [sp, #40]	; 0x28
   12a36:	b918      	cbnz	r0, 12a40 <cbvprintf+0x8fc>
			bpe = bps + 5;
   12a38:	4f94      	ldr	r7, [pc, #592]	; (12c8c <cbvprintf+0xb48>)
   12a3a:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
   12a3c:	3f05      	subs	r7, #5
			break;
   12a3e:	e780      	b.n	12942 <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12a40:	9b08      	ldr	r3, [sp, #32]
   12a42:	9300      	str	r3, [sp, #0]
   12a44:	ab11      	add	r3, sp, #68	; 0x44
   12a46:	aa0c      	add	r2, sp, #48	; 0x30
   12a48:	2100      	movs	r1, #0
   12a4a:	f7ff f8f3 	bl	11c34 <encode_uint>
   12a4e:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12a50:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12a54:	f043 0310 	orr.w	r3, r3, #16
   12a58:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
   12a5c:	2378      	movs	r3, #120	; 0x78
   12a5e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
   12a62:	e7c6      	b.n	129f2 <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
   12a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12a66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12a6a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   12a6e:	2b07      	cmp	r3, #7
   12a70:	f63f af5b 	bhi.w	1292a <cbvprintf+0x7e6>
   12a74:	e8df f003 	tbb	[pc, r3]
   12a78:	0a080604 	.word	0x0a080604
   12a7c:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
   12a80:	6014      	str	r4, [r2, #0]
		break;
   12a82:	e752      	b.n	1292a <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
   12a84:	7014      	strb	r4, [r2, #0]
		break;
   12a86:	e750      	b.n	1292a <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
   12a88:	8014      	strh	r4, [r2, #0]
		break;
   12a8a:	e74e      	b.n	1292a <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
   12a8c:	6014      	str	r4, [r2, #0]
		break;
   12a8e:	e74c      	b.n	1292a <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
   12a90:	4620      	mov	r0, r4
   12a92:	17e1      	asrs	r1, r4, #31
   12a94:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   12a98:	e747      	b.n	1292a <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
   12a9a:	4620      	mov	r0, r4
   12a9c:	17e1      	asrs	r1, r4, #31
   12a9e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   12aa2:	e742      	b.n	1292a <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
   12aa4:	6014      	str	r4, [r2, #0]
		break;
   12aa6:	e740      	b.n	1292a <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12aa8:	6014      	str	r4, [r2, #0]
}
   12aaa:	e73e      	b.n	1292a <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
   12aac:	ab08      	add	r3, sp, #32
   12aae:	9302      	str	r3, [sp, #8]
   12ab0:	ab11      	add	r3, sp, #68	; 0x44
   12ab2:	9301      	str	r3, [sp, #4]
   12ab4:	f10d 031f 	add.w	r3, sp, #31
   12ab8:	9300      	str	r3, [sp, #0]
   12aba:	4653      	mov	r3, sl
   12abc:	aa0c      	add	r2, sp, #48	; 0x30
   12abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   12ac2:	f7ff f927 	bl	11d14 <encode_float>
   12ac6:	4607      	mov	r7, r0
			break;
   12ac8:	e73b      	b.n	12942 <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
   12aca:	f011 0f08 	tst.w	r1, #8
   12ace:	f43f af47 	beq.w	12960 <cbvprintf+0x81c>
			nj_len += 1U;
   12ad2:	3301      	adds	r3, #1
   12ad4:	e744      	b.n	12960 <cbvprintf+0x81c>
				char pad = ' ';
   12ad6:	f04f 0a20 	mov.w	sl, #32
   12ada:	e001      	b.n	12ae0 <cbvprintf+0x99c>
					pad = '0';
   12adc:	f04f 0a30 	mov.w	sl, #48	; 0x30
   12ae0:	4643      	mov	r3, r8
				while (width-- > 0) {
   12ae2:	f103 38ff 	add.w	r8, r3, #4294967295
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	dd08      	ble.n	12afc <cbvprintf+0x9b8>
					OUTC(pad);
   12aea:	4629      	mov	r1, r5
   12aec:	4650      	mov	r0, sl
   12aee:	47b0      	blx	r6
   12af0:	2800      	cmp	r0, #0
   12af2:	f6ff ab3c 	blt.w	1216e <cbvprintf+0x2a>
   12af6:	3401      	adds	r4, #1
				while (width-- > 0) {
   12af8:	4643      	mov	r3, r8
   12afa:	e7f2      	b.n	12ae2 <cbvprintf+0x99e>
		if (sign != 0) {
   12afc:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12b00:	b128      	cbz	r0, 12b0e <cbvprintf+0x9ca>
			OUTC(sign);
   12b02:	4629      	mov	r1, r5
   12b04:	47b0      	blx	r6
   12b06:	2800      	cmp	r0, #0
   12b08:	f6ff ab31 	blt.w	1216e <cbvprintf+0x2a>
   12b0c:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   12b0e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12b12:	f013 0f40 	tst.w	r3, #64	; 0x40
   12b16:	d072      	beq.n	12bfe <cbvprintf+0xaba>
			if (conv->specifier_a) {
   12b18:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   12b1c:	2b00      	cmp	r3, #0
   12b1e:	db0d      	blt.n	12b3c <cbvprintf+0x9f8>
				while (isdigit((int)*cp)) {
   12b20:	7838      	ldrb	r0, [r7, #0]
   12b22:	4b5b      	ldr	r3, [pc, #364]	; (12c90 <cbvprintf+0xb4c>)
   12b24:	5cc3      	ldrb	r3, [r0, r3]
   12b26:	f013 0f04 	tst.w	r3, #4
   12b2a:	d012      	beq.n	12b52 <cbvprintf+0xa0e>
					OUTC(*cp++);
   12b2c:	3701      	adds	r7, #1
   12b2e:	4629      	mov	r1, r5
   12b30:	47b0      	blx	r6
   12b32:	2800      	cmp	r0, #0
   12b34:	f6ff ab1b 	blt.w	1216e <cbvprintf+0x2a>
   12b38:	3401      	adds	r4, #1
   12b3a:	e7f1      	b.n	12b20 <cbvprintf+0x9dc>
				while (*cp != 'p') {
   12b3c:	7838      	ldrb	r0, [r7, #0]
   12b3e:	2870      	cmp	r0, #112	; 0x70
   12b40:	d044      	beq.n	12bcc <cbvprintf+0xa88>
					OUTC(*cp++);
   12b42:	3701      	adds	r7, #1
   12b44:	4629      	mov	r1, r5
   12b46:	47b0      	blx	r6
   12b48:	2800      	cmp	r0, #0
   12b4a:	f6ff ab10 	blt.w	1216e <cbvprintf+0x2a>
   12b4e:	3401      	adds	r4, #1
   12b50:	e7f4      	b.n	12b3c <cbvprintf+0x9f8>
				pad_len = conv->pad0_value;
   12b52:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
   12b56:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12b5a:	f013 0f20 	tst.w	r3, #32
   12b5e:	d010      	beq.n	12b82 <cbvprintf+0xa3e>
				if (*cp == '.') {
   12b60:	7838      	ldrb	r0, [r7, #0]
   12b62:	282e      	cmp	r0, #46	; 0x2e
   12b64:	d01d      	beq.n	12ba2 <cbvprintf+0xa5e>
				while (isdigit((int)*cp)) {
   12b66:	7838      	ldrb	r0, [r7, #0]
   12b68:	4b49      	ldr	r3, [pc, #292]	; (12c90 <cbvprintf+0xb4c>)
   12b6a:	5cc3      	ldrb	r3, [r0, r3]
   12b6c:	f013 0f04 	tst.w	r3, #4
   12b70:	d02c      	beq.n	12bcc <cbvprintf+0xa88>
					OUTC(*cp++);
   12b72:	3701      	adds	r7, #1
   12b74:	4629      	mov	r1, r5
   12b76:	47b0      	blx	r6
   12b78:	2800      	cmp	r0, #0
   12b7a:	f6ff aaf8 	blt.w	1216e <cbvprintf+0x2a>
   12b7e:	3401      	adds	r4, #1
   12b80:	e7f1      	b.n	12b66 <cbvprintf+0xa22>
					while (pad_len-- > 0) {
   12b82:	f10a 3bff 	add.w	fp, sl, #4294967295
   12b86:	f1ba 0f00 	cmp.w	sl, #0
   12b8a:	dd08      	ble.n	12b9e <cbvprintf+0xa5a>
						OUTC('0');
   12b8c:	4629      	mov	r1, r5
   12b8e:	2030      	movs	r0, #48	; 0x30
   12b90:	47b0      	blx	r6
   12b92:	2800      	cmp	r0, #0
   12b94:	f6ff aaeb 	blt.w	1216e <cbvprintf+0x2a>
   12b98:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   12b9a:	46da      	mov	sl, fp
   12b9c:	e7f1      	b.n	12b82 <cbvprintf+0xa3e>
   12b9e:	46da      	mov	sl, fp
   12ba0:	e7de      	b.n	12b60 <cbvprintf+0xa1c>
					OUTC(*cp++);
   12ba2:	3701      	adds	r7, #1
   12ba4:	4629      	mov	r1, r5
   12ba6:	47b0      	blx	r6
   12ba8:	2800      	cmp	r0, #0
   12baa:	f6ff aae0 	blt.w	1216e <cbvprintf+0x2a>
   12bae:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   12bb0:	f10a 3bff 	add.w	fp, sl, #4294967295
   12bb4:	f1ba 0f00 	cmp.w	sl, #0
   12bb8:	ddd5      	ble.n	12b66 <cbvprintf+0xa22>
						OUTC('0');
   12bba:	4629      	mov	r1, r5
   12bbc:	2030      	movs	r0, #48	; 0x30
   12bbe:	47b0      	blx	r6
   12bc0:	2800      	cmp	r0, #0
   12bc2:	f6ff aad4 	blt.w	1216e <cbvprintf+0x2a>
   12bc6:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   12bc8:	46da      	mov	sl, fp
   12bca:	e7f1      	b.n	12bb0 <cbvprintf+0xa6c>
			pad_len = conv->pad0_pre_exp;
   12bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
   12bce:	f103 3aff 	add.w	sl, r3, #4294967295
   12bd2:	2b00      	cmp	r3, #0
   12bd4:	dd08      	ble.n	12be8 <cbvprintf+0xaa4>
				OUTC('0');
   12bd6:	4629      	mov	r1, r5
   12bd8:	2030      	movs	r0, #48	; 0x30
   12bda:	47b0      	blx	r6
   12bdc:	2800      	cmp	r0, #0
   12bde:	f6ff aac6 	blt.w	1216e <cbvprintf+0x2a>
   12be2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   12be4:	4653      	mov	r3, sl
   12be6:	e7f2      	b.n	12bce <cbvprintf+0xa8a>
			OUTS(cp, bpe);
   12be8:	9b08      	ldr	r3, [sp, #32]
   12bea:	463a      	mov	r2, r7
   12bec:	4629      	mov	r1, r5
   12bee:	4630      	mov	r0, r6
   12bf0:	f00d fbe9 	bl	203c6 <outs>
   12bf4:	2800      	cmp	r0, #0
   12bf6:	f6ff aaba 	blt.w	1216e <cbvprintf+0x2a>
   12bfa:	4404      	add	r4, r0
   12bfc:	e033      	b.n	12c66 <cbvprintf+0xb22>
			if (conv->altform_0c | conv->altform_0) {
   12bfe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12c02:	f3c3 1200 	ubfx	r2, r3, #4, #1
   12c06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12c0a:	4313      	orrs	r3, r2
   12c0c:	d006      	beq.n	12c1c <cbvprintf+0xad8>
				OUTC('0');
   12c0e:	4629      	mov	r1, r5
   12c10:	2030      	movs	r0, #48	; 0x30
   12c12:	47b0      	blx	r6
   12c14:	2800      	cmp	r0, #0
   12c16:	f6ff aaaa 	blt.w	1216e <cbvprintf+0x2a>
   12c1a:	3401      	adds	r4, #1
			if (conv->altform_0c) {
   12c1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12c20:	f013 0f10 	tst.w	r3, #16
   12c24:	d007      	beq.n	12c36 <cbvprintf+0xaf2>
				OUTC(conv->specifier);
   12c26:	4629      	mov	r1, r5
   12c28:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12c2c:	47b0      	blx	r6
   12c2e:	2800      	cmp	r0, #0
   12c30:	f6ff aa9d 	blt.w	1216e <cbvprintf+0x2a>
   12c34:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
   12c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
   12c38:	f103 3aff 	add.w	sl, r3, #4294967295
   12c3c:	2b00      	cmp	r3, #0
   12c3e:	dd08      	ble.n	12c52 <cbvprintf+0xb0e>
				OUTC('0');
   12c40:	4629      	mov	r1, r5
   12c42:	2030      	movs	r0, #48	; 0x30
   12c44:	47b0      	blx	r6
   12c46:	2800      	cmp	r0, #0
   12c48:	f6ff aa91 	blt.w	1216e <cbvprintf+0x2a>
   12c4c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   12c4e:	4653      	mov	r3, sl
   12c50:	e7f2      	b.n	12c38 <cbvprintf+0xaf4>
			OUTS(bps, bpe);
   12c52:	9b08      	ldr	r3, [sp, #32]
   12c54:	463a      	mov	r2, r7
   12c56:	4629      	mov	r1, r5
   12c58:	4630      	mov	r0, r6
   12c5a:	f00d fbb4 	bl	203c6 <outs>
   12c5e:	2800      	cmp	r0, #0
   12c60:	f6ff aa85 	blt.w	1216e <cbvprintf+0x2a>
   12c64:	4404      	add	r4, r0
		while (width > 0) {
   12c66:	f1b8 0f00 	cmp.w	r8, #0
   12c6a:	dd09      	ble.n	12c80 <cbvprintf+0xb3c>
			OUTC(' ');
   12c6c:	4629      	mov	r1, r5
   12c6e:	2020      	movs	r0, #32
   12c70:	47b0      	blx	r6
   12c72:	2800      	cmp	r0, #0
   12c74:	f6ff aa7b 	blt.w	1216e <cbvprintf+0x2a>
   12c78:	3401      	adds	r4, #1
			--width;
   12c7a:	f108 38ff 	add.w	r8, r8, #4294967295
   12c7e:	e7f2      	b.n	12c66 <cbvprintf+0xb22>
		fp = extract_conversion(conv, sp);
   12c80:	464f      	mov	r7, r9
   12c82:	f7ff ba69 	b.w	12158 <cbvprintf+0x14>
	return count;
   12c86:	4620      	mov	r0, r4
   12c88:	f7ff ba71 	b.w	1216e <cbvprintf+0x2a>
   12c8c:	00026835 	.word	0x00026835
   12c90:	00027301 	.word	0x00027301

00012c94 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12c94:	b508      	push	{r3, lr}
   12c96:	f04f 0240 	mov.w	r2, #64	; 0x40
   12c9a:	f3ef 8311 	mrs	r3, BASEPRI
   12c9e:	f382 8812 	msr	BASEPRI_MAX, r2
   12ca2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12ca6:	f001 fa53 	bl	14150 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12caa:	4803      	ldr	r0, [pc, #12]	; (12cb8 <sys_reboot+0x24>)
   12cac:	f00c ffe3 	bl	1fc76 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12cb0:	f000 fe4a 	bl	13948 <arch_cpu_idle>
   12cb4:	e7fc      	b.n	12cb0 <sys_reboot+0x1c>
   12cb6:	bf00      	nop
   12cb8:	00026838 	.word	0x00026838

00012cbc <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   12cbc:	b510      	push	{r4, lr}
   12cbe:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   12cc0:	4c07      	ldr	r4, [pc, #28]	; (12ce0 <read_blvl+0x24>)
   12cc2:	7824      	ldrb	r4, [r4, #0]
   12cc4:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   12cc8:	2401      	movs	r4, #1
   12cca:	9402      	str	r4, [sp, #8]
   12ccc:	f10d 0417 	add.w	r4, sp, #23
   12cd0:	9401      	str	r4, [sp, #4]
   12cd2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   12cd6:	9400      	str	r4, [sp, #0]
   12cd8:	f010 f9f6 	bl	230c8 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   12cdc:	b006      	add	sp, #24
   12cde:	bd10      	pop	{r4, pc}
   12ce0:	200009f5 	.word	0x200009f5

00012ce4 <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
   12ce4:	4b01      	ldr	r3, [pc, #4]	; (12cec <bt_bas_get_battery_level+0x8>)
   12ce6:	7818      	ldrb	r0, [r3, #0]
   12ce8:	4770      	bx	lr
   12cea:	bf00      	nop
   12cec:	200009f5 	.word	0x200009f5

00012cf0 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
   12cf0:	b500      	push	{lr}
   12cf2:	b089      	sub	sp, #36	; 0x24
   12cf4:	f88d 0007 	strb.w	r0, [sp, #7]
	int rc;

	if (level > 100U) {
   12cf8:	2864      	cmp	r0, #100	; 0x64
   12cfa:	d817      	bhi.n	12d2c <bt_bas_set_battery_level+0x3c>
		return -EINVAL;
	}

	battery_level = level;
   12cfc:	4b0e      	ldr	r3, [pc, #56]	; (12d38 <bt_bas_set_battery_level+0x48>)
   12cfe:	7018      	strb	r0, [r3, #0]
	memset(&params, 0, sizeof(params));
   12d00:	2000      	movs	r0, #0
   12d02:	9002      	str	r0, [sp, #8]
   12d04:	9005      	str	r0, [sp, #20]
   12d06:	9006      	str	r0, [sp, #24]
   12d08:	9007      	str	r0, [sp, #28]
	params.attr = attr;
   12d0a:	4b0c      	ldr	r3, [pc, #48]	; (12d3c <bt_bas_set_battery_level+0x4c>)
   12d0c:	9303      	str	r3, [sp, #12]
	params.data = data;
   12d0e:	f10d 0307 	add.w	r3, sp, #7
   12d12:	9304      	str	r3, [sp, #16]
	params.len = len;
   12d14:	2301      	movs	r3, #1
   12d16:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   12d1a:	a902      	add	r1, sp, #8
   12d1c:	f004 fcc6 	bl	176ac <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   12d20:	f110 0f80 	cmn.w	r0, #128	; 0x80
   12d24:	d005      	beq.n	12d32 <bt_bas_set_battery_level+0x42>
}
   12d26:	b009      	add	sp, #36	; 0x24
   12d28:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   12d2c:	f06f 0015 	mvn.w	r0, #21
   12d30:	e7f9      	b.n	12d26 <bt_bas_set_battery_level+0x36>
	return rc == -ENOTCONN ? 0 : rc;
   12d32:	2000      	movs	r0, #0
   12d34:	e7f7      	b.n	12d26 <bt_bas_set_battery_level+0x36>
   12d36:	bf00      	nop
   12d38:	200009f5 	.word	0x200009f5
   12d3c:	00026968 	.word	0x00026968

00012d40 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   12d40:	b570      	push	{r4, r5, r6, lr}
   12d42:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   12d44:	4b2c      	ldr	r3, [pc, #176]	; (12df8 <pm_system_resume+0xb8>)
   12d46:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12d48:	f004 031f 	and.w	r3, r4, #31
   12d4c:	2201      	movs	r2, #1
   12d4e:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12d50:	0961      	lsrs	r1, r4, #5
   12d52:	4b2a      	ldr	r3, [pc, #168]	; (12dfc <pm_system_resume+0xbc>)
   12d54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12d58:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12d5a:	f3bf 8f5b 	dmb	ish
   12d5e:	e853 1f00 	ldrex	r1, [r3]
   12d62:	ea01 0500 	and.w	r5, r1, r0
   12d66:	e843 5600 	strex	r6, r5, [r3]
   12d6a:	2e00      	cmp	r6, #0
   12d6c:	d1f7      	bne.n	12d5e <pm_system_resume+0x1e>
   12d6e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12d72:	420a      	tst	r2, r1
   12d74:	d03d      	beq.n	12df2 <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
   12d76:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12d7a:	009a      	lsls	r2, r3, #2
   12d7c:	4b20      	ldr	r3, [pc, #128]	; (12e00 <pm_system_resume+0xc0>)
   12d7e:	4413      	add	r3, r2
   12d80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12d84:	ab04      	add	r3, sp, #16
   12d86:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12d8a:	4b1e      	ldr	r3, [pc, #120]	; (12e04 <pm_system_resume+0xc4>)
   12d8c:	b163      	cbz	r3, 12da8 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   12d8e:	f00d fd47 	bl	20820 <pm_power_state_exit_post_ops>
   12d92:	f04f 0340 	mov.w	r3, #64	; 0x40
   12d96:	f3ef 8611 	mrs	r6, BASEPRI
   12d9a:	f383 8812 	msr	BASEPRI_MAX, r3
   12d9e:	f3bf 8f6f 	isb	sy
   12da2:	4b19      	ldr	r3, [pc, #100]	; (12e08 <pm_system_resume+0xc8>)
   12da4:	681d      	ldr	r5, [r3, #0]
   12da6:	e00a      	b.n	12dbe <pm_system_resume+0x7e>
	__asm__ volatile(
   12da8:	2300      	movs	r3, #0
   12daa:	f383 8811 	msr	BASEPRI, r3
   12dae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12db2:	e7ee      	b.n	12d92 <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12db4:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   12db6:	b10d      	cbz	r5, 12dbc <pm_system_resume+0x7c>
	return node->next;
   12db8:	682b      	ldr	r3, [r5, #0]
   12dba:	b16b      	cbz	r3, 12dd8 <pm_system_resume+0x98>
{
   12dbc:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12dbe:	b15d      	cbz	r5, 12dd8 <pm_system_resume+0x98>
			callback = notifier->state_exit;
   12dc0:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   12dc2:	2a00      	cmp	r2, #0
   12dc4:	d0f6      	beq.n	12db4 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
   12dc6:	4b0c      	ldr	r3, [pc, #48]	; (12df8 <pm_system_resume+0xb8>)
   12dc8:	7d1b      	ldrb	r3, [r3, #20]
   12dca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12dce:	0099      	lsls	r1, r3, #2
   12dd0:	4b0b      	ldr	r3, [pc, #44]	; (12e00 <pm_system_resume+0xc0>)
   12dd2:	5c58      	ldrb	r0, [r3, r1]
   12dd4:	4790      	blx	r2
   12dd6:	e7ed      	b.n	12db4 <pm_system_resume+0x74>
	__asm__ volatile(
   12dd8:	f386 8811 	msr	BASEPRI, r6
   12ddc:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12de0:	4807      	ldr	r0, [pc, #28]	; (12e00 <pm_system_resume+0xc0>)
   12de2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   12de6:	00a2      	lsls	r2, r4, #2
   12de8:	1881      	adds	r1, r0, r2
   12dea:	2300      	movs	r3, #0
   12dec:	5083      	str	r3, [r0, r2]
   12dee:	604b      	str	r3, [r1, #4]
   12df0:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   12df2:	b004      	add	sp, #16
   12df4:	bd70      	pop	{r4, r5, r6, pc}
   12df6:	bf00      	nop
   12df8:	20003548 	.word	0x20003548
   12dfc:	20002374 	.word	0x20002374
   12e00:	20002378 	.word	0x20002378
   12e04:	00020821 	.word	0x00020821
   12e08:	2000236c 	.word	0x2000236c

00012e0c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e0e:	b089      	sub	sp, #36	; 0x24
   12e10:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   12e12:	4b55      	ldr	r3, [pc, #340]	; (12f68 <pm_system_suspend+0x15c>)
   12e14:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12e16:	f004 031f 	and.w	r3, r4, #31
   12e1a:	2201      	movs	r2, #1
   12e1c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12e1e:	0961      	lsrs	r1, r4, #5
   12e20:	4b52      	ldr	r3, [pc, #328]	; (12f6c <pm_system_suspend+0x160>)
   12e22:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12e26:	f3bf 8f5b 	dmb	ish
   12e2a:	e853 1f00 	ldrex	r1, [r3]
   12e2e:	ea41 0002 	orr.w	r0, r1, r2
   12e32:	e843 0600 	strex	r6, r0, [r3]
   12e36:	2e00      	cmp	r6, #0
   12e38:	d1f7      	bne.n	12e2a <pm_system_suspend+0x1e>
   12e3a:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   12e3e:	420a      	tst	r2, r1
   12e40:	d017      	beq.n	12e72 <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   12e42:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12e46:	4a4a      	ldr	r2, [pc, #296]	; (12f70 <pm_system_suspend+0x164>)
   12e48:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   12e4c:	2b00      	cmp	r3, #0
   12e4e:	f000 8088 	beq.w	12f62 <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   12e52:	f1b5 3fff 	cmp.w	r5, #4294967295
   12e56:	d11c      	bne.n	12e92 <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12e58:	f008 fab2 	bl	1b3c0 <k_sched_lock>
	__asm__ volatile(
   12e5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12e60:	f3ef 8611 	mrs	r6, BASEPRI
   12e64:	f383 8812 	msr	BASEPRI_MAX, r3
   12e68:	f3bf 8f6f 	isb	sy
	return list->head;
   12e6c:	4b41      	ldr	r3, [pc, #260]	; (12f74 <pm_system_suspend+0x168>)
   12e6e:	681d      	ldr	r5, [r3, #0]
   12e70:	e02a      	b.n	12ec8 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   12e72:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   12e76:	4b3e      	ldr	r3, [pc, #248]	; (12f70 <pm_system_suspend+0x164>)
   12e78:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   12e7c:	466f      	mov	r7, sp
   12e7e:	462a      	mov	r2, r5
   12e80:	4621      	mov	r1, r4
   12e82:	4638      	mov	r0, r7
   12e84:	f00d fad9 	bl	2043a <pm_policy_next_state>
   12e88:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   12e8c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   12e90:	e7d7      	b.n	12e42 <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   12e92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12e9a:	689b      	ldr	r3, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   12e9c:	0c59      	lsrs	r1, r3, #17
   12e9e:	03d8      	lsls	r0, r3, #15
   12ea0:	4e35      	ldr	r6, [pc, #212]	; (12f78 <pm_system_suspend+0x16c>)
   12ea2:	4a36      	ldr	r2, [pc, #216]	; (12f7c <pm_system_suspend+0x170>)
   12ea4:	2300      	movs	r3, #0
   12ea6:	1980      	adds	r0, r0, r6
   12ea8:	f04f 0600 	mov.w	r6, #0
   12eac:	eb46 0101 	adc.w	r1, r6, r1
   12eb0:	f7ed ff9c 	bl	dec <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12eb4:	2101      	movs	r1, #1
   12eb6:	1a28      	subs	r0, r5, r0
   12eb8:	f012 fae0 	bl	2547c <z_set_timeout_expiry>
   12ebc:	e7cc      	b.n	12e58 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12ebe:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   12ec0:	b10d      	cbz	r5, 12ec6 <pm_system_suspend+0xba>
	return node->next;
   12ec2:	682b      	ldr	r3, [r5, #0]
   12ec4:	b16b      	cbz	r3, 12ee2 <pm_system_suspend+0xd6>
{
   12ec6:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12ec8:	b15d      	cbz	r5, 12ee2 <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
   12eca:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   12ecc:	2a00      	cmp	r2, #0
   12ece:	d0f6      	beq.n	12ebe <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
   12ed0:	4b25      	ldr	r3, [pc, #148]	; (12f68 <pm_system_suspend+0x15c>)
   12ed2:	7d1b      	ldrb	r3, [r3, #20]
   12ed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12ed8:	4925      	ldr	r1, [pc, #148]	; (12f70 <pm_system_suspend+0x164>)
   12eda:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   12ede:	4790      	blx	r2
   12ee0:	e7ed      	b.n	12ebe <pm_system_suspend+0xb2>
	__asm__ volatile(
   12ee2:	f386 8811 	msr	BASEPRI, r6
   12ee6:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12eea:	f004 031f 	and.w	r3, r4, #31
   12eee:	2101      	movs	r1, #1
   12ef0:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12ef2:	0963      	lsrs	r3, r4, #5
   12ef4:	4a22      	ldr	r2, [pc, #136]	; (12f80 <pm_system_suspend+0x174>)
   12ef6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12efa:	f3bf 8f5b 	dmb	ish
   12efe:	e853 2f00 	ldrex	r2, [r3]
   12f02:	430a      	orrs	r2, r1
   12f04:	e843 2000 	strex	r0, r2, [r3]
   12f08:	2800      	cmp	r0, #0
   12f0a:	d1f8      	bne.n	12efe <pm_system_suspend+0xf2>
   12f0c:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   12f10:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12f14:	4a16      	ldr	r2, [pc, #88]	; (12f70 <pm_system_suspend+0x164>)
   12f16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   12f1e:	ab08      	add	r3, sp, #32
   12f20:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12f24:	4b17      	ldr	r3, [pc, #92]	; (12f84 <pm_system_suspend+0x178>)
   12f26:	b10b      	cbz	r3, 12f2c <pm_system_suspend+0x120>
		pm_power_state_set(info);
   12f28:	f00d fc67 	bl	207fa <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   12f2c:	f7ff ff08 	bl	12d40 <pm_system_resume>
	k_sched_unlock();
   12f30:	f008 fc44 	bl	1b7bc <k_sched_unlock>
	bool ret = true;
   12f34:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f36:	f004 021f 	and.w	r2, r4, #31
   12f3a:	2301      	movs	r3, #1
   12f3c:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12f3e:	0964      	lsrs	r4, r4, #5
   12f40:	4a0a      	ldr	r2, [pc, #40]	; (12f6c <pm_system_suspend+0x160>)
   12f42:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   12f46:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f48:	f3bf 8f5b 	dmb	ish
   12f4c:	e854 2f00 	ldrex	r2, [r4]
   12f50:	401a      	ands	r2, r3
   12f52:	e844 2100 	strex	r1, r2, [r4]
   12f56:	2900      	cmp	r1, #0
   12f58:	d1f8      	bne.n	12f4c <pm_system_suspend+0x140>
   12f5a:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   12f5e:	b009      	add	sp, #36	; 0x24
   12f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   12f62:	2000      	movs	r0, #0
   12f64:	e7e7      	b.n	12f36 <pm_system_suspend+0x12a>
   12f66:	bf00      	nop
   12f68:	20003548 	.word	0x20003548
   12f6c:	20002384 	.word	0x20002384
   12f70:	20002378 	.word	0x20002378
   12f74:	2000236c 	.word	0x2000236c
   12f78:	000f423f 	.word	0x000f423f
   12f7c:	000f4240 	.word	0x000f4240
   12f80:	20002374 	.word	0x20002374
   12f84:	000207fb 	.word	0x000207fb

00012f88 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   12f88:	b4f0      	push	{r4, r5, r6, r7}
   12f8a:	b08c      	sub	sp, #48	; 0x30
   12f8c:	4607      	mov	r7, r0
   12f8e:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   12f90:	ac01      	add	r4, sp, #4
   12f92:	4d2a      	ldr	r5, [pc, #168]	; (1303c <tc_aes128_set_encrypt_key+0xb4>)
   12f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   12fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   12fa4:	2f00      	cmp	r7, #0
   12fa6:	d045      	beq.n	13034 <tc_aes128_set_encrypt_key+0xac>
   12fa8:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   12faa:	2e00      	cmp	r6, #0
   12fac:	d044      	beq.n	13038 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   12fae:	2300      	movs	r3, #0
   12fb0:	e00f      	b.n	12fd2 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12fb2:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   12fb6:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   12fba:	784a      	ldrb	r2, [r1, #1]
   12fbc:	0412      	lsls	r2, r2, #16
   12fbe:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12fc2:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12fc4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12fc8:	78c9      	ldrb	r1, [r1, #3]
   12fca:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12fcc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   12fd0:	3301      	adds	r3, #1
   12fd2:	2b03      	cmp	r3, #3
   12fd4:	d9ed      	bls.n	12fb2 <tc_aes128_set_encrypt_key+0x2a>
   12fd6:	e006      	b.n	12fe6 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   12fd8:	1f19      	subs	r1, r3, #4
   12fda:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   12fde:	404a      	eors	r2, r1
   12fe0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12fe4:	3301      	adds	r3, #1
   12fe6:	2b2b      	cmp	r3, #43	; 0x2b
   12fe8:	d820      	bhi.n	1302c <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   12fea:	1e5a      	subs	r2, r3, #1
   12fec:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   12ff0:	f013 0f03 	tst.w	r3, #3
   12ff4:	d1f0      	bne.n	12fd8 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   12ff6:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12ffa:	0e11      	lsrs	r1, r2, #24
   12ffc:	4c10      	ldr	r4, [pc, #64]	; (13040 <tc_aes128_set_encrypt_key+0xb8>)
   12ffe:	5c65      	ldrb	r5, [r4, r1]
   13000:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13004:	5c61      	ldrb	r1, [r4, r1]
   13006:	0409      	lsls	r1, r1, #16
   13008:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   1300c:	f3c2 2507 	ubfx	r5, r2, #8, #8
   13010:	5d65      	ldrb	r5, [r4, r5]
   13012:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   13016:	b2d2      	uxtb	r2, r2
   13018:	5ca2      	ldrb	r2, [r4, r2]
   1301a:	4311      	orrs	r1, r2
   1301c:	f023 0203 	bic.w	r2, r3, #3
   13020:	ac0c      	add	r4, sp, #48	; 0x30
   13022:	4422      	add	r2, r4
   13024:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   13028:	404a      	eors	r2, r1
   1302a:	e7d5      	b.n	12fd8 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1302c:	2001      	movs	r0, #1
}
   1302e:	b00c      	add	sp, #48	; 0x30
   13030:	bcf0      	pop	{r4, r5, r6, r7}
   13032:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   13034:	2000      	movs	r0, #0
   13036:	e7fa      	b.n	1302e <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   13038:	2000      	movs	r0, #0
   1303a:	e7f8      	b.n	1302e <tc_aes128_set_encrypt_key+0xa6>
   1303c:	00025bfc 	.word	0x00025bfc
   13040:	000269a4 	.word	0x000269a4

00013044 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   13044:	2800      	cmp	r0, #0
   13046:	f000 839a 	beq.w	1377e <tc_aes_encrypt+0x73a>
{
   1304a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1304e:	b088      	sub	sp, #32
   13050:	4616      	mov	r6, r2
   13052:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   13054:	2900      	cmp	r1, #0
   13056:	f000 8394 	beq.w	13782 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1305a:	2a00      	cmp	r2, #0
   1305c:	f000 8393 	beq.w	13786 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   13060:	2310      	movs	r3, #16
   13062:	460a      	mov	r2, r1
   13064:	4619      	mov	r1, r3
   13066:	eb0d 0003 	add.w	r0, sp, r3
   1306a:	f00d f9eb 	bl	20444 <_copy>
	add_round_key(state, s->words);
   1306e:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   13070:	6833      	ldr	r3, [r6, #0]
   13072:	f89d 2010 	ldrb.w	r2, [sp, #16]
   13076:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1307a:	f88d 2010 	strb.w	r2, [sp, #16]
   1307e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13082:	f89d 1011 	ldrb.w	r1, [sp, #17]
   13086:	404a      	eors	r2, r1
   13088:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1308c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13090:	f89d 1012 	ldrb.w	r1, [sp, #18]
   13094:	404a      	eors	r2, r1
   13096:	f88d 2012 	strb.w	r2, [sp, #18]
   1309a:	b2db      	uxtb	r3, r3
   1309c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   130a0:	4053      	eors	r3, r2
   130a2:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   130a6:	6873      	ldr	r3, [r6, #4]
   130a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
   130ac:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   130b0:	f88d 2014 	strb.w	r2, [sp, #20]
   130b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   130b8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   130bc:	404a      	eors	r2, r1
   130be:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   130c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   130c6:	f89d 1016 	ldrb.w	r1, [sp, #22]
   130ca:	404a      	eors	r2, r1
   130cc:	f88d 2016 	strb.w	r2, [sp, #22]
   130d0:	b2db      	uxtb	r3, r3
   130d2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   130d6:	4053      	eors	r3, r2
   130d8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   130dc:	68b3      	ldr	r3, [r6, #8]
   130de:	f89d 2018 	ldrb.w	r2, [sp, #24]
   130e2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   130e6:	f88d 2018 	strb.w	r2, [sp, #24]
   130ea:	f3c3 4207 	ubfx	r2, r3, #16, #8
   130ee:	f89d 1019 	ldrb.w	r1, [sp, #25]
   130f2:	404a      	eors	r2, r1
   130f4:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   130f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   130fc:	f89d 101a 	ldrb.w	r1, [sp, #26]
   13100:	404a      	eors	r2, r1
   13102:	f88d 201a 	strb.w	r2, [sp, #26]
   13106:	b2db      	uxtb	r3, r3
   13108:	f89d 201b 	ldrb.w	r2, [sp, #27]
   1310c:	4053      	eors	r3, r2
   1310e:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   13112:	68f3      	ldr	r3, [r6, #12]
   13114:	f89d 201c 	ldrb.w	r2, [sp, #28]
   13118:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1311c:	f88d 201c 	strb.w	r2, [sp, #28]
   13120:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13124:	f89d 101d 	ldrb.w	r1, [sp, #29]
   13128:	404a      	eors	r2, r1
   1312a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1312e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13132:	f89d 101e 	ldrb.w	r1, [sp, #30]
   13136:	404a      	eors	r2, r1
   13138:	f88d 201e 	strb.w	r2, [sp, #30]
   1313c:	b2db      	uxtb	r3, r3
   1313e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   13142:	4053      	eors	r3, r2
   13144:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   13148:	2400      	movs	r4, #0
}
   1314a:	e239      	b.n	135c0 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1314c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13150:	f88d 3000 	strb.w	r3, [sp]
   13154:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13158:	f88d 3001 	strb.w	r3, [sp, #1]
   1315c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13160:	f88d 3002 	strb.w	r3, [sp, #2]
   13164:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13168:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1316c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13170:	f88d 3004 	strb.w	r3, [sp, #4]
   13174:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13178:	f88d 3005 	strb.w	r3, [sp, #5]
   1317c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   13180:	f88d 3006 	strb.w	r3, [sp, #6]
   13184:	f89d 3013 	ldrb.w	r3, [sp, #19]
   13188:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1318c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13190:	f88d 3008 	strb.w	r3, [sp, #8]
   13194:	f89d 301d 	ldrb.w	r3, [sp, #29]
   13198:	f88d 3009 	strb.w	r3, [sp, #9]
   1319c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   131a0:	f88d 300a 	strb.w	r3, [sp, #10]
   131a4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   131a8:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   131ac:	f89d 301c 	ldrb.w	r3, [sp, #28]
   131b0:	f88d 300c 	strb.w	r3, [sp, #12]
   131b4:	f89d 3011 	ldrb.w	r3, [sp, #17]
   131b8:	f88d 300d 	strb.w	r3, [sp, #13]
   131bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   131c0:	f88d 300e 	strb.w	r3, [sp, #14]
   131c4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   131c8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   131cc:	2310      	movs	r3, #16
   131ce:	466a      	mov	r2, sp
   131d0:	4619      	mov	r1, r3
   131d2:	eb0d 0003 	add.w	r0, sp, r3
   131d6:	f00d f935 	bl	20444 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   131da:	f89d 0010 	ldrb.w	r0, [sp, #16]
   131de:	f00d f942 	bl	20466 <_double_byte>
   131e2:	4680      	mov	r8, r0
   131e4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   131e8:	f00d f93d 	bl	20466 <_double_byte>
   131ec:	4601      	mov	r1, r0
   131ee:	f89d 0011 	ldrb.w	r0, [sp, #17]
   131f2:	f89d 2012 	ldrb.w	r2, [sp, #18]
   131f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   131fa:	4041      	eors	r1, r0
   131fc:	ea88 0801 	eor.w	r8, r8, r1
   13200:	ea82 0208 	eor.w	r2, r2, r8
   13204:	4053      	eors	r3, r2
   13206:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1320a:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1320e:	f00d f92a 	bl	20466 <_double_byte>
   13212:	ea88 0800 	eor.w	r8, r8, r0
   13216:	fa5f f888 	uxtb.w	r8, r8
   1321a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1321e:	f00d f922 	bl	20466 <_double_byte>
   13222:	4602      	mov	r2, r0
   13224:	f89d 0012 	ldrb.w	r0, [sp, #18]
   13228:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1322c:	4042      	eors	r2, r0
   1322e:	ea88 0802 	eor.w	r8, r8, r2
   13232:	ea83 0308 	eor.w	r3, r3, r8
   13236:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1323a:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1323e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13242:	ea88 0803 	eor.w	r8, r8, r3
   13246:	f00d f90e 	bl	20466 <_double_byte>
   1324a:	ea88 0800 	eor.w	r8, r8, r0
   1324e:	fa5f f888 	uxtb.w	r8, r8
   13252:	f89d 0013 	ldrb.w	r0, [sp, #19]
   13256:	f00d f906 	bl	20466 <_double_byte>
   1325a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1325e:	4058      	eors	r0, r3
   13260:	ea88 0800 	eor.w	r8, r8, r0
   13264:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   13268:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1326c:	f00d f8fb 	bl	20466 <_double_byte>
   13270:	f89d 2010 	ldrb.w	r2, [sp, #16]
   13274:	f89d 3011 	ldrb.w	r3, [sp, #17]
   13278:	f89d 8012 	ldrb.w	r8, [sp, #18]
   1327c:	4050      	eors	r0, r2
   1327e:	4043      	eors	r3, r0
   13280:	ea88 0803 	eor.w	r8, r8, r3
   13284:	fa5f f888 	uxtb.w	r8, r8
   13288:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1328c:	f00d f8eb 	bl	20466 <_double_byte>
   13290:	ea88 0800 	eor.w	r8, r8, r0
   13294:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   13298:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1329c:	f00d f8e3 	bl	20466 <_double_byte>
   132a0:	4680      	mov	r8, r0
   132a2:	f89d 0015 	ldrb.w	r0, [sp, #21]
   132a6:	f00d f8de 	bl	20466 <_double_byte>
   132aa:	4601      	mov	r1, r0
   132ac:	f89d 0015 	ldrb.w	r0, [sp, #21]
   132b0:	f89d 2016 	ldrb.w	r2, [sp, #22]
   132b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   132b8:	4041      	eors	r1, r0
   132ba:	ea88 0801 	eor.w	r8, r8, r1
   132be:	ea82 0208 	eor.w	r2, r2, r8
   132c2:	4053      	eors	r3, r2
   132c4:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   132c8:	f89d 8014 	ldrb.w	r8, [sp, #20]
   132cc:	f00d f8cb 	bl	20466 <_double_byte>
   132d0:	ea88 0800 	eor.w	r8, r8, r0
   132d4:	fa5f f888 	uxtb.w	r8, r8
   132d8:	f89d 0016 	ldrb.w	r0, [sp, #22]
   132dc:	f00d f8c3 	bl	20466 <_double_byte>
   132e0:	4602      	mov	r2, r0
   132e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
   132e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   132ea:	4042      	eors	r2, r0
   132ec:	ea88 0802 	eor.w	r8, r8, r2
   132f0:	ea83 0308 	eor.w	r3, r3, r8
   132f4:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   132f8:	f89d 8014 	ldrb.w	r8, [sp, #20]
   132fc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13300:	ea88 0803 	eor.w	r8, r8, r3
   13304:	f00d f8af 	bl	20466 <_double_byte>
   13308:	ea88 0800 	eor.w	r8, r8, r0
   1330c:	fa5f f888 	uxtb.w	r8, r8
   13310:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13314:	f00d f8a7 	bl	20466 <_double_byte>
   13318:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1331c:	4058      	eors	r0, r3
   1331e:	ea88 0800 	eor.w	r8, r8, r0
   13322:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   13326:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1332a:	f00d f89c 	bl	20466 <_double_byte>
   1332e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   13332:	f89d 3015 	ldrb.w	r3, [sp, #21]
   13336:	f89d 8016 	ldrb.w	r8, [sp, #22]
   1333a:	4050      	eors	r0, r2
   1333c:	4043      	eors	r3, r0
   1333e:	ea88 0803 	eor.w	r8, r8, r3
   13342:	fa5f f888 	uxtb.w	r8, r8
   13346:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1334a:	f00d f88c 	bl	20466 <_double_byte>
   1334e:	ea88 0800 	eor.w	r8, r8, r0
   13352:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   13356:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1335a:	f00d f884 	bl	20466 <_double_byte>
   1335e:	4680      	mov	r8, r0
   13360:	f89d 0019 	ldrb.w	r0, [sp, #25]
   13364:	f00d f87f 	bl	20466 <_double_byte>
   13368:	4601      	mov	r1, r0
   1336a:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1336e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   13372:	f89d 301b 	ldrb.w	r3, [sp, #27]
   13376:	4041      	eors	r1, r0
   13378:	ea88 0801 	eor.w	r8, r8, r1
   1337c:	ea82 0208 	eor.w	r2, r2, r8
   13380:	4053      	eors	r3, r2
   13382:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   13386:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1338a:	f00d f86c 	bl	20466 <_double_byte>
   1338e:	ea88 0800 	eor.w	r8, r8, r0
   13392:	fa5f f888 	uxtb.w	r8, r8
   13396:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1339a:	f00d f864 	bl	20466 <_double_byte>
   1339e:	4602      	mov	r2, r0
   133a0:	f89d 001a 	ldrb.w	r0, [sp, #26]
   133a4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   133a8:	4042      	eors	r2, r0
   133aa:	ea88 0802 	eor.w	r8, r8, r2
   133ae:	ea83 0308 	eor.w	r3, r3, r8
   133b2:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   133b6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   133ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
   133be:	ea88 0803 	eor.w	r8, r8, r3
   133c2:	f00d f850 	bl	20466 <_double_byte>
   133c6:	ea88 0800 	eor.w	r8, r8, r0
   133ca:	fa5f f888 	uxtb.w	r8, r8
   133ce:	f89d 001b 	ldrb.w	r0, [sp, #27]
   133d2:	f00d f848 	bl	20466 <_double_byte>
   133d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   133da:	4058      	eors	r0, r3
   133dc:	ea88 0800 	eor.w	r8, r8, r0
   133e0:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   133e4:	f89d 0018 	ldrb.w	r0, [sp, #24]
   133e8:	f00d f83d 	bl	20466 <_double_byte>
   133ec:	f89d 2018 	ldrb.w	r2, [sp, #24]
   133f0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   133f4:	f89d 801a 	ldrb.w	r8, [sp, #26]
   133f8:	4050      	eors	r0, r2
   133fa:	4043      	eors	r3, r0
   133fc:	ea88 0803 	eor.w	r8, r8, r3
   13400:	fa5f f888 	uxtb.w	r8, r8
   13404:	f89d 001b 	ldrb.w	r0, [sp, #27]
   13408:	f00d f82d 	bl	20466 <_double_byte>
   1340c:	ea88 0800 	eor.w	r8, r8, r0
   13410:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   13414:	f89d 001c 	ldrb.w	r0, [sp, #28]
   13418:	f00d f825 	bl	20466 <_double_byte>
   1341c:	4680      	mov	r8, r0
   1341e:	f89d 001d 	ldrb.w	r0, [sp, #29]
   13422:	f00d f820 	bl	20466 <_double_byte>
   13426:	4601      	mov	r1, r0
   13428:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1342c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   13430:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13434:	4041      	eors	r1, r0
   13436:	ea88 0801 	eor.w	r8, r8, r1
   1343a:	ea82 0208 	eor.w	r2, r2, r8
   1343e:	4053      	eors	r3, r2
   13440:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   13444:	f89d 801c 	ldrb.w	r8, [sp, #28]
   13448:	f00d f80d 	bl	20466 <_double_byte>
   1344c:	ea88 0800 	eor.w	r8, r8, r0
   13450:	fa5f f888 	uxtb.w	r8, r8
   13454:	f89d 001e 	ldrb.w	r0, [sp, #30]
   13458:	f00d f805 	bl	20466 <_double_byte>
   1345c:	4602      	mov	r2, r0
   1345e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   13462:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13466:	4042      	eors	r2, r0
   13468:	ea88 0802 	eor.w	r8, r8, r2
   1346c:	ea83 0308 	eor.w	r3, r3, r8
   13470:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   13474:	f89d 801c 	ldrb.w	r8, [sp, #28]
   13478:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1347c:	ea88 0803 	eor.w	r8, r8, r3
   13480:	f00c fff1 	bl	20466 <_double_byte>
   13484:	ea88 0800 	eor.w	r8, r8, r0
   13488:	fa5f f888 	uxtb.w	r8, r8
   1348c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   13490:	f00c ffe9 	bl	20466 <_double_byte>
   13494:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13498:	4058      	eors	r0, r3
   1349a:	ea88 0800 	eor.w	r8, r8, r0
   1349e:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   134a2:	f89d 001c 	ldrb.w	r0, [sp, #28]
   134a6:	f00c ffde 	bl	20466 <_double_byte>
   134aa:	f89d 201c 	ldrb.w	r2, [sp, #28]
   134ae:	f89d 301d 	ldrb.w	r3, [sp, #29]
   134b2:	f89d 801e 	ldrb.w	r8, [sp, #30]
   134b6:	4050      	eors	r0, r2
   134b8:	4043      	eors	r3, r0
   134ba:	ea88 0803 	eor.w	r8, r8, r3
   134be:	fa5f f888 	uxtb.w	r8, r8
   134c2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   134c6:	f00c ffce 	bl	20466 <_double_byte>
   134ca:	ea88 0800 	eor.w	r8, r8, r0
   134ce:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   134d2:	2310      	movs	r3, #16
   134d4:	466a      	mov	r2, sp
   134d6:	4619      	mov	r1, r3
   134d8:	eb0d 0003 	add.w	r0, sp, r3
   134dc:	f00c ffb2 	bl	20444 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   134e0:	3401      	adds	r4, #1
   134e2:	0123      	lsls	r3, r4, #4
   134e4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   134e8:	58eb      	ldr	r3, [r5, r3]
   134ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
   134ee:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   134f2:	f88d 1010 	strb.w	r1, [sp, #16]
   134f6:	f3c3 4107 	ubfx	r1, r3, #16, #8
   134fa:	f89d 0011 	ldrb.w	r0, [sp, #17]
   134fe:	4041      	eors	r1, r0
   13500:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   13504:	f3c3 2107 	ubfx	r1, r3, #8, #8
   13508:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1350c:	4041      	eors	r1, r0
   1350e:	f88d 1012 	strb.w	r1, [sp, #18]
   13512:	b2db      	uxtb	r3, r3
   13514:	f89d 1013 	ldrb.w	r1, [sp, #19]
   13518:	404b      	eors	r3, r1
   1351a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1351e:	6853      	ldr	r3, [r2, #4]
   13520:	f89d 1014 	ldrb.w	r1, [sp, #20]
   13524:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   13528:	f88d 1014 	strb.w	r1, [sp, #20]
   1352c:	f3c3 4107 	ubfx	r1, r3, #16, #8
   13530:	f89d 0015 	ldrb.w	r0, [sp, #21]
   13534:	4041      	eors	r1, r0
   13536:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1353a:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1353e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   13542:	4041      	eors	r1, r0
   13544:	f88d 1016 	strb.w	r1, [sp, #22]
   13548:	b2db      	uxtb	r3, r3
   1354a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1354e:	404b      	eors	r3, r1
   13550:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   13554:	6893      	ldr	r3, [r2, #8]
   13556:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1355a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1355e:	f88d 1018 	strb.w	r1, [sp, #24]
   13562:	f3c3 4107 	ubfx	r1, r3, #16, #8
   13566:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1356a:	4041      	eors	r1, r0
   1356c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   13570:	f3c3 2107 	ubfx	r1, r3, #8, #8
   13574:	f89d 001a 	ldrb.w	r0, [sp, #26]
   13578:	4041      	eors	r1, r0
   1357a:	f88d 101a 	strb.w	r1, [sp, #26]
   1357e:	b2db      	uxtb	r3, r3
   13580:	f89d 101b 	ldrb.w	r1, [sp, #27]
   13584:	404b      	eors	r3, r1
   13586:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1358a:	68d3      	ldr	r3, [r2, #12]
   1358c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   13590:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   13594:	f88d 201c 	strb.w	r2, [sp, #28]
   13598:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1359c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   135a0:	404a      	eors	r2, r1
   135a2:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   135a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   135aa:	f89d 101e 	ldrb.w	r1, [sp, #30]
   135ae:	404a      	eors	r2, r1
   135b0:	f88d 201e 	strb.w	r2, [sp, #30]
   135b4:	b2db      	uxtb	r3, r3
   135b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   135ba:	4053      	eors	r3, r2
   135bc:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   135c0:	2c08      	cmp	r4, #8
   135c2:	d80a      	bhi.n	135da <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   135c4:	2300      	movs	r3, #0
   135c6:	2b0f      	cmp	r3, #15
   135c8:	f63f adc0 	bhi.w	1314c <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   135cc:	a904      	add	r1, sp, #16
   135ce:	5cc8      	ldrb	r0, [r1, r3]
   135d0:	4a6e      	ldr	r2, [pc, #440]	; (1378c <tc_aes_encrypt+0x748>)
   135d2:	5c10      	ldrb	r0, [r2, r0]
   135d4:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   135d6:	3301      	adds	r3, #1
   135d8:	e7f5      	b.n	135c6 <tc_aes_encrypt+0x582>
   135da:	2300      	movs	r3, #0
   135dc:	e005      	b.n	135ea <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   135de:	aa04      	add	r2, sp, #16
   135e0:	5cd1      	ldrb	r1, [r2, r3]
   135e2:	486a      	ldr	r0, [pc, #424]	; (1378c <tc_aes_encrypt+0x748>)
   135e4:	5c41      	ldrb	r1, [r0, r1]
   135e6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   135e8:	3301      	adds	r3, #1
   135ea:	2b0f      	cmp	r3, #15
   135ec:	d9f7      	bls.n	135de <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   135ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
   135f2:	f88d 3000 	strb.w	r3, [sp]
   135f6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   135fa:	f88d 3001 	strb.w	r3, [sp, #1]
   135fe:	f89d 301a 	ldrb.w	r3, [sp, #26]
   13602:	f88d 3002 	strb.w	r3, [sp, #2]
   13606:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1360a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1360e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13612:	f88d 3004 	strb.w	r3, [sp, #4]
   13616:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1361a:	f88d 3005 	strb.w	r3, [sp, #5]
   1361e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   13622:	f88d 3006 	strb.w	r3, [sp, #6]
   13626:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1362a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1362e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13632:	f88d 3008 	strb.w	r3, [sp, #8]
   13636:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1363a:	f88d 3009 	strb.w	r3, [sp, #9]
   1363e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   13642:	f88d 300a 	strb.w	r3, [sp, #10]
   13646:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1364a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1364e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   13652:	f88d 300c 	strb.w	r3, [sp, #12]
   13656:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1365a:	f88d 300d 	strb.w	r3, [sp, #13]
   1365e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   13662:	f88d 300e 	strb.w	r3, [sp, #14]
   13666:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1366a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1366e:	2310      	movs	r3, #16
   13670:	466a      	mov	r2, sp
   13672:	4619      	mov	r1, r3
   13674:	eb0d 0003 	add.w	r0, sp, r3
   13678:	f00c fee4 	bl	20444 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   1367c:	1c63      	adds	r3, r4, #1
   1367e:	011a      	lsls	r2, r3, #4
   13680:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   13684:	58b2      	ldr	r2, [r6, r2]
   13686:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1368a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   1368e:	f88d 1010 	strb.w	r1, [sp, #16]
   13692:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13696:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1369a:	4041      	eors	r1, r0
   1369c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   136a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
   136a4:	f89d 0012 	ldrb.w	r0, [sp, #18]
   136a8:	4041      	eors	r1, r0
   136aa:	f88d 1012 	strb.w	r1, [sp, #18]
   136ae:	b2d2      	uxtb	r2, r2
   136b0:	f89d 1013 	ldrb.w	r1, [sp, #19]
   136b4:	404a      	eors	r2, r1
   136b6:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   136ba:	685a      	ldr	r2, [r3, #4]
   136bc:	f89d 1014 	ldrb.w	r1, [sp, #20]
   136c0:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   136c4:	f88d 1014 	strb.w	r1, [sp, #20]
   136c8:	f3c2 4107 	ubfx	r1, r2, #16, #8
   136cc:	f89d 0015 	ldrb.w	r0, [sp, #21]
   136d0:	4041      	eors	r1, r0
   136d2:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   136d6:	f3c2 2107 	ubfx	r1, r2, #8, #8
   136da:	f89d 0016 	ldrb.w	r0, [sp, #22]
   136de:	4041      	eors	r1, r0
   136e0:	f88d 1016 	strb.w	r1, [sp, #22]
   136e4:	b2d2      	uxtb	r2, r2
   136e6:	f89d 1017 	ldrb.w	r1, [sp, #23]
   136ea:	404a      	eors	r2, r1
   136ec:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   136f0:	689a      	ldr	r2, [r3, #8]
   136f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
   136f6:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   136fa:	f88d 1018 	strb.w	r1, [sp, #24]
   136fe:	f3c2 4107 	ubfx	r1, r2, #16, #8
   13702:	f89d 0019 	ldrb.w	r0, [sp, #25]
   13706:	4041      	eors	r1, r0
   13708:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1370c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13710:	f89d 001a 	ldrb.w	r0, [sp, #26]
   13714:	4041      	eors	r1, r0
   13716:	f88d 101a 	strb.w	r1, [sp, #26]
   1371a:	b2d2      	uxtb	r2, r2
   1371c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   13720:	404a      	eors	r2, r1
   13722:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   13726:	68db      	ldr	r3, [r3, #12]
   13728:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1372c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   13730:	f88d 201c 	strb.w	r2, [sp, #28]
   13734:	f3c3 4207 	ubfx	r2, r3, #16, #8
   13738:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1373c:	404a      	eors	r2, r1
   1373e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   13742:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13746:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1374a:	404a      	eors	r2, r1
   1374c:	f88d 201e 	strb.w	r2, [sp, #30]
   13750:	b2db      	uxtb	r3, r3
   13752:	f89d 201f 	ldrb.w	r2, [sp, #31]
   13756:	4053      	eors	r3, r2
   13758:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1375c:	2310      	movs	r3, #16
   1375e:	eb0d 0203 	add.w	r2, sp, r3
   13762:	4619      	mov	r1, r3
   13764:	4638      	mov	r0, r7
   13766:	f00c fe6d 	bl	20444 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1376a:	2210      	movs	r2, #16
   1376c:	2100      	movs	r1, #0
   1376e:	eb0d 0002 	add.w	r0, sp, r2
   13772:	f00c fe74 	bl	2045e <_set>

	return TC_CRYPTO_SUCCESS;
   13776:	2001      	movs	r0, #1
}
   13778:	b008      	add	sp, #32
   1377a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   1377e:	2000      	movs	r0, #0
}
   13780:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   13782:	2000      	movs	r0, #0
   13784:	e7f8      	b.n	13778 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   13786:	2000      	movs	r0, #0
   13788:	e7f6      	b.n	13778 <tc_aes_encrypt+0x734>
   1378a:	bf00      	nop
   1378c:	000269a4 	.word	0x000269a4

00013790 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   13790:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   13792:	4802      	ldr	r0, [pc, #8]	; (1379c <nrf_cc3xx_platform_abort_init+0xc>)
   13794:	f008 ff2c 	bl	1c5f0 <nrf_cc3xx_platform_set_abort>
}
   13798:	bd08      	pop	{r3, pc}
   1379a:	bf00      	nop
   1379c:	00026aa4 	.word	0x00026aa4

000137a0 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   137a0:	b1d0      	cbz	r0, 137d8 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   137a2:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   137a4:	6842      	ldr	r2, [r0, #4]
   137a6:	2a04      	cmp	r2, #4
   137a8:	d005      	beq.n	137b6 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   137aa:	b1d2      	cbz	r2, 137e2 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   137ac:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   137ae:	f007 fae9 	bl	1ad84 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   137b2:	2000      	movs	r0, #0
    }
}
   137b4:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   137b6:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   137b8:	2200      	movs	r2, #0
   137ba:	f3bf 8f5b 	dmb	ish
   137be:	e853 1f00 	ldrex	r1, [r3]
   137c2:	2901      	cmp	r1, #1
   137c4:	d103      	bne.n	137ce <mutex_unlock_platform+0x2e>
   137c6:	e843 2000 	strex	r0, r2, [r3]
   137ca:	2800      	cmp	r0, #0
   137cc:	d1f7      	bne.n	137be <mutex_unlock_platform+0x1e>
   137ce:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   137d2:	d104      	bne.n	137de <mutex_unlock_platform+0x3e>
   137d4:	4610      	mov	r0, r2
   137d6:	e7ed      	b.n	137b4 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   137d8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   137dc:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   137de:	4802      	ldr	r0, [pc, #8]	; (137e8 <mutex_unlock_platform+0x48>)
   137e0:	e7e8      	b.n	137b4 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   137e2:	4802      	ldr	r0, [pc, #8]	; (137ec <mutex_unlock_platform+0x4c>)
   137e4:	e7e6      	b.n	137b4 <mutex_unlock_platform+0x14>
   137e6:	bf00      	nop
   137e8:	ffff8fe9 	.word	0xffff8fe9
   137ec:	ffff8fea 	.word	0xffff8fea

000137f0 <mutex_lock_platform>:
    if(mutex == NULL) {
   137f0:	b320      	cbz	r0, 1383c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   137f2:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   137f4:	6842      	ldr	r2, [r0, #4]
   137f6:	2a04      	cmp	r2, #4
   137f8:	d002      	beq.n	13800 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   137fa:	b992      	cbnz	r2, 13822 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   137fc:	4811      	ldr	r0, [pc, #68]	; (13844 <mutex_lock_platform+0x54>)
   137fe:	e00f      	b.n	13820 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   13800:	6803      	ldr	r3, [r0, #0]
   13802:	2201      	movs	r2, #1
   13804:	f3bf 8f5b 	dmb	ish
   13808:	e853 1f00 	ldrex	r1, [r3]
   1380c:	2900      	cmp	r1, #0
   1380e:	d103      	bne.n	13818 <mutex_lock_platform+0x28>
   13810:	e843 2000 	strex	r0, r2, [r3]
   13814:	2800      	cmp	r0, #0
   13816:	d1f7      	bne.n	13808 <mutex_lock_platform+0x18>
   13818:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1381c:	d10c      	bne.n	13838 <mutex_lock_platform+0x48>
   1381e:	2000      	movs	r0, #0
}
   13820:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   13822:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13824:	f04f 32ff 	mov.w	r2, #4294967295
   13828:	f04f 33ff 	mov.w	r3, #4294967295
   1382c:	f007 fa20 	bl	1ac70 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13830:	2800      	cmp	r0, #0
   13832:	d0f5      	beq.n	13820 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   13834:	4804      	ldr	r0, [pc, #16]	; (13848 <mutex_lock_platform+0x58>)
   13836:	e7f3      	b.n	13820 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13838:	4803      	ldr	r0, [pc, #12]	; (13848 <mutex_lock_platform+0x58>)
   1383a:	e7f1      	b.n	13820 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1383c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   13840:	4770      	bx	lr
   13842:	bf00      	nop
   13844:	ffff8fea 	.word	0xffff8fea
   13848:	ffff8fe9 	.word	0xffff8fe9

0001384c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1384c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1384e:	4604      	mov	r4, r0
   13850:	b190      	cbz	r0, 13878 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13852:	6863      	ldr	r3, [r4, #4]
   13854:	2b04      	cmp	r3, #4
   13856:	d00e      	beq.n	13876 <mutex_free_platform+0x2a>
   13858:	2b08      	cmp	r3, #8
   1385a:	d00c      	beq.n	13876 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1385c:	b15b      	cbz	r3, 13876 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1385e:	f013 0f02 	tst.w	r3, #2
   13862:	d10e      	bne.n	13882 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13864:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   13866:	2200      	movs	r2, #0
   13868:	601a      	str	r2, [r3, #0]
   1386a:	605a      	str	r2, [r3, #4]
   1386c:	609a      	str	r2, [r3, #8]
   1386e:	60da      	str	r2, [r3, #12]
   13870:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13872:	2300      	movs	r3, #0
   13874:	6063      	str	r3, [r4, #4]
}
   13876:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   13878:	4b05      	ldr	r3, [pc, #20]	; (13890 <mutex_free_platform+0x44>)
   1387a:	685b      	ldr	r3, [r3, #4]
   1387c:	4805      	ldr	r0, [pc, #20]	; (13894 <mutex_free_platform+0x48>)
   1387e:	4798      	blx	r3
   13880:	e7e7      	b.n	13852 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13882:	4621      	mov	r1, r4
   13884:	4804      	ldr	r0, [pc, #16]	; (13898 <mutex_free_platform+0x4c>)
   13886:	f011 f952 	bl	24b2e <k_mem_slab_free>
        mutex->mutex = NULL;
   1388a:	2300      	movs	r3, #0
   1388c:	6023      	str	r3, [r4, #0]
   1388e:	e7f0      	b.n	13872 <mutex_free_platform+0x26>
   13890:	20000984 	.word	0x20000984
   13894:	00026aac 	.word	0x00026aac
   13898:	20002388 	.word	0x20002388

0001389c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1389c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1389e:	4604      	mov	r4, r0
   138a0:	b178      	cbz	r0, 138c2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   138a2:	6863      	ldr	r3, [r4, #4]
   138a4:	2b04      	cmp	r3, #4
   138a6:	d00b      	beq.n	138c0 <mutex_init_platform+0x24>
   138a8:	2b08      	cmp	r3, #8
   138aa:	d009      	beq.n	138c0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   138ac:	b90b      	cbnz	r3, 138b2 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   138ae:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   138b0:	b163      	cbz	r3, 138cc <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   138b2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   138b4:	f011 f9cc 	bl	24c50 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   138b8:	6863      	ldr	r3, [r4, #4]
   138ba:	f043 0301 	orr.w	r3, r3, #1
   138be:	6063      	str	r3, [r4, #4]
}
   138c0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   138c2:	4b10      	ldr	r3, [pc, #64]	; (13904 <mutex_init_platform+0x68>)
   138c4:	685b      	ldr	r3, [r3, #4]
   138c6:	4810      	ldr	r0, [pc, #64]	; (13908 <mutex_init_platform+0x6c>)
   138c8:	4798      	blx	r3
   138ca:	e7ea      	b.n	138a2 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   138cc:	f04f 32ff 	mov.w	r2, #4294967295
   138d0:	f04f 33ff 	mov.w	r3, #4294967295
   138d4:	4621      	mov	r1, r4
   138d6:	480d      	ldr	r0, [pc, #52]	; (1390c <mutex_init_platform+0x70>)
   138d8:	f007 f886 	bl	1a9e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   138dc:	b908      	cbnz	r0, 138e2 <mutex_init_platform+0x46>
   138de:	6823      	ldr	r3, [r4, #0]
   138e0:	b91b      	cbnz	r3, 138ea <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   138e2:	4b08      	ldr	r3, [pc, #32]	; (13904 <mutex_init_platform+0x68>)
   138e4:	685b      	ldr	r3, [r3, #4]
   138e6:	480a      	ldr	r0, [pc, #40]	; (13910 <mutex_init_platform+0x74>)
   138e8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   138ea:	6823      	ldr	r3, [r4, #0]
   138ec:	2200      	movs	r2, #0
   138ee:	601a      	str	r2, [r3, #0]
   138f0:	605a      	str	r2, [r3, #4]
   138f2:	609a      	str	r2, [r3, #8]
   138f4:	60da      	str	r2, [r3, #12]
   138f6:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   138f8:	6863      	ldr	r3, [r4, #4]
   138fa:	f043 0302 	orr.w	r3, r3, #2
   138fe:	6063      	str	r3, [r4, #4]
   13900:	e7d7      	b.n	138b2 <mutex_init_platform+0x16>
   13902:	bf00      	nop
   13904:	20000984 	.word	0x20000984
   13908:	00026aac 	.word	0x00026aac
   1390c:	20002388 	.word	0x20002388
   13910:	00026ad4 	.word	0x00026ad4

00013914 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13914:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   13916:	2340      	movs	r3, #64	; 0x40
   13918:	2214      	movs	r2, #20
   1391a:	4904      	ldr	r1, [pc, #16]	; (1392c <nrf_cc3xx_platform_mutex_init+0x18>)
   1391c:	4804      	ldr	r0, [pc, #16]	; (13930 <nrf_cc3xx_platform_mutex_init+0x1c>)
   1391e:	f011 f8f8 	bl	24b12 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13922:	4904      	ldr	r1, [pc, #16]	; (13934 <nrf_cc3xx_platform_mutex_init+0x20>)
   13924:	4804      	ldr	r0, [pc, #16]	; (13938 <nrf_cc3xx_platform_mutex_init+0x24>)
   13926:	f008 ff1b 	bl	1c760 <nrf_cc3xx_platform_set_mutexes>
}
   1392a:	bd08      	pop	{r3, pc}
   1392c:	200023a4 	.word	0x200023a4
   13930:	20002388 	.word	0x20002388
   13934:	00026b14 	.word	0x00026b14
   13938:	00026b04 	.word	0x00026b04

0001393c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1393c:	4901      	ldr	r1, [pc, #4]	; (13944 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1393e:	2210      	movs	r2, #16
	str	r2, [r1]
   13940:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13942:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13944:	e000ed10 	.word	0xe000ed10

00013948 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13948:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1394a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1394c:	f380 8811 	msr	BASEPRI, r0
	isb
   13950:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13954:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13958:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1395a:	b662      	cpsie	i
	isb
   1395c:	f3bf 8f6f 	isb	sy

	bx	lr
   13960:	4770      	bx	lr
   13962:	bf00      	nop

00013964 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13964:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13966:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13968:	f381 8811 	msr	BASEPRI, r1

	wfe
   1396c:	bf20      	wfe

	msr	BASEPRI, r0
   1396e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13972:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13974:	4770      	bx	lr
   13976:	bf00      	nop

00013978 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13978:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1397a:	2b00      	cmp	r3, #0
   1397c:	db08      	blt.n	13990 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1397e:	f000 001f 	and.w	r0, r0, #31
   13982:	095b      	lsrs	r3, r3, #5
   13984:	2201      	movs	r2, #1
   13986:	fa02 f000 	lsl.w	r0, r2, r0
   1398a:	4a02      	ldr	r2, [pc, #8]	; (13994 <arch_irq_enable+0x1c>)
   1398c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13990:	4770      	bx	lr
   13992:	bf00      	nop
   13994:	e000e100 	.word	0xe000e100

00013998 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13998:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1399a:	2b00      	cmp	r3, #0
   1399c:	db0d      	blt.n	139ba <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1399e:	f000 001f 	and.w	r0, r0, #31
   139a2:	095b      	lsrs	r3, r3, #5
   139a4:	2201      	movs	r2, #1
   139a6:	fa02 f000 	lsl.w	r0, r2, r0
   139aa:	3320      	adds	r3, #32
   139ac:	4a03      	ldr	r2, [pc, #12]	; (139bc <arch_irq_disable+0x24>)
   139ae:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   139b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   139b6:	f3bf 8f6f 	isb	sy
}
   139ba:	4770      	bx	lr
   139bc:	e000e100 	.word	0xe000e100

000139c0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   139c0:	0942      	lsrs	r2, r0, #5
   139c2:	4b05      	ldr	r3, [pc, #20]	; (139d8 <arch_irq_is_enabled+0x18>)
   139c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   139c8:	f000 001f 	and.w	r0, r0, #31
   139cc:	2301      	movs	r3, #1
   139ce:	fa03 f000 	lsl.w	r0, r3, r0
}
   139d2:	4010      	ands	r0, r2
   139d4:	4770      	bx	lr
   139d6:	bf00      	nop
   139d8:	e000e100 	.word	0xe000e100

000139dc <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   139dc:	f012 0f01 	tst.w	r2, #1
   139e0:	d10c      	bne.n	139fc <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   139e2:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   139e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   139e6:	2b00      	cmp	r3, #0
   139e8:	db0a      	blt.n	13a00 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   139ea:	0149      	lsls	r1, r1, #5
   139ec:	b2c9      	uxtb	r1, r1
   139ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   139f2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   139f6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   139fa:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   139fc:	2100      	movs	r1, #0
   139fe:	e7f1      	b.n	139e4 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13a00:	f000 000f 	and.w	r0, r0, #15
   13a04:	0149      	lsls	r1, r1, #5
   13a06:	b2c9      	uxtb	r1, r1
   13a08:	4b01      	ldr	r3, [pc, #4]	; (13a10 <z_arm_irq_priority_set+0x34>)
   13a0a:	5419      	strb	r1, [r3, r0]
}
   13a0c:	4770      	bx	lr
   13a0e:	bf00      	nop
   13a10:	e000ed14 	.word	0xe000ed14

00013a14 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13a14:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13a16:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13a18:	4b05      	ldr	r3, [pc, #20]	; (13a30 <_arch_isr_direct_pm+0x1c>)
   13a1a:	699b      	ldr	r3, [r3, #24]
   13a1c:	b90b      	cbnz	r3, 13a22 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13a1e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13a20:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   13a22:	4b03      	ldr	r3, [pc, #12]	; (13a30 <_arch_isr_direct_pm+0x1c>)
   13a24:	2200      	movs	r2, #0
   13a26:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13a28:	f011 f8f6 	bl	24c18 <z_pm_save_idle_exit>
   13a2c:	e7f7      	b.n	13a1e <_arch_isr_direct_pm+0xa>
   13a2e:	bf00      	nop
   13a30:	20003548 	.word	0x20003548

00013a34 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13a34:	bf30      	wfi
    b z_SysNmiOnReset
   13a36:	f7ff bffd 	b.w	13a34 <z_SysNmiOnReset>
   13a3a:	bf00      	nop

00013a3c <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13a3c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13a3e:	4b0b      	ldr	r3, [pc, #44]	; (13a6c <z_arm_prep_c+0x30>)
   13a40:	4a0b      	ldr	r2, [pc, #44]	; (13a70 <z_arm_prep_c+0x34>)
   13a42:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13a46:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13a48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13a4c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13a50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13a54:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13a5c:	f006 ff50 	bl	1a900 <z_bss_zero>
	z_data_copy();
   13a60:	f008 f83c 	bl	1badc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13a64:	f000 fa18 	bl	13e98 <z_arm_interrupt_init>
	z_cstart();
   13a68:	f006 ff56 	bl	1a918 <z_cstart>
   13a6c:	e000ed00 	.word	0xe000ed00
   13a70:	00000000 	.word	0x00000000

00013a74 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13a74:	4a0a      	ldr	r2, [pc, #40]	; (13aa0 <arch_swap+0x2c>)
   13a76:	6893      	ldr	r3, [r2, #8]
   13a78:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13a7c:	4909      	ldr	r1, [pc, #36]	; (13aa4 <arch_swap+0x30>)
   13a7e:	6809      	ldr	r1, [r1, #0]
   13a80:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13a84:	4908      	ldr	r1, [pc, #32]	; (13aa8 <arch_swap+0x34>)
   13a86:	684b      	ldr	r3, [r1, #4]
   13a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13a8c:	604b      	str	r3, [r1, #4]
   13a8e:	2300      	movs	r3, #0
   13a90:	f383 8811 	msr	BASEPRI, r3
   13a94:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13a98:	6893      	ldr	r3, [r2, #8]
}
   13a9a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   13a9e:	4770      	bx	lr
   13aa0:	20003548 	.word	0x20003548
   13aa4:	0002711c 	.word	0x0002711c
   13aa8:	e000ed00 	.word	0xe000ed00

00013aac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13aac:	4913      	ldr	r1, [pc, #76]	; (13afc <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13aae:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13ab0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13ab4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13ab6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13aba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13abe:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13ac0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13ac4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13ac8:	4f0d      	ldr	r7, [pc, #52]	; (13b00 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13aca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13ace:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13ad0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13ad2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13ad4:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13ad8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13ada:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13ade:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13ae2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13ae4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13ae6:	f000 fa79 	bl	13fdc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13aea:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13aee:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13af2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13af6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13afa:	4770      	bx	lr
    ldr r1, =_kernel
   13afc:	20003548 	.word	0x20003548
    ldr v4, =_SCS_ICSR
   13b00:	e000ed04 	.word	0xe000ed04

00013b04 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13b04:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13b08:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13b0a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13b0e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13b12:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13b14:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13b18:	2902      	cmp	r1, #2
    beq _oops
   13b1a:	d0ff      	beq.n	13b1c <_oops>

00013b1c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13b1c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13b1e:	f00c fdbc 	bl	2069a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13b22:	bd01      	pop	{r0, pc}

00013b24 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   13b24:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13b26:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13b2a:	490d      	ldr	r1, [pc, #52]	; (13b60 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   13b2c:	f021 0101 	bic.w	r1, r1, #1
   13b30:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13b34:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13b38:	9b01      	ldr	r3, [sp, #4]
   13b3a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13b3e:	9b02      	ldr	r3, [sp, #8]
   13b40:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13b44:	9b03      	ldr	r3, [sp, #12]
   13b46:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13b4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13b4e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   13b52:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13b54:	2300      	movs	r3, #0
   13b56:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13b5a:	bc10      	pop	{r4}
   13b5c:	4770      	bx	lr
   13b5e:	bf00      	nop
   13b60:	0001ff55 	.word	0x0001ff55

00013b64 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13b64:	4b16      	ldr	r3, [pc, #88]	; (13bc0 <z_check_thread_stack_fail+0x5c>)
   13b66:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   13b68:	b1da      	cbz	r2, 13ba2 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13b6a:	f110 0f16 	cmn.w	r0, #22
   13b6e:	d01a      	beq.n	13ba6 <z_check_thread_stack_fail+0x42>
{
   13b70:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13b72:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13b76:	f1a3 0420 	sub.w	r4, r3, #32
   13b7a:	4284      	cmp	r4, r0
   13b7c:	d805      	bhi.n	13b8a <z_check_thread_stack_fail+0x26>
   13b7e:	4283      	cmp	r3, r0
   13b80:	d908      	bls.n	13b94 <z_check_thread_stack_fail+0x30>
   13b82:	428b      	cmp	r3, r1
   13b84:	d808      	bhi.n	13b98 <z_check_thread_stack_fail+0x34>
   13b86:	2100      	movs	r1, #0
   13b88:	e000      	b.n	13b8c <z_check_thread_stack_fail+0x28>
   13b8a:	2100      	movs	r1, #0
   13b8c:	b931      	cbnz	r1, 13b9c <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13b8e:	2000      	movs	r0, #0
}
   13b90:	bc10      	pop	{r4}
   13b92:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13b94:	2100      	movs	r1, #0
   13b96:	e7f9      	b.n	13b8c <z_check_thread_stack_fail+0x28>
   13b98:	2101      	movs	r1, #1
   13b9a:	e7f7      	b.n	13b8c <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   13b9c:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13ba0:	e7f6      	b.n	13b90 <z_check_thread_stack_fail+0x2c>
		return 0;
   13ba2:	2000      	movs	r0, #0
   13ba4:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13ba6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   13baa:	428b      	cmp	r3, r1
   13bac:	bf94      	ite	ls
   13bae:	2100      	movls	r1, #0
   13bb0:	2101      	movhi	r1, #1
   13bb2:	b909      	cbnz	r1, 13bb8 <z_check_thread_stack_fail+0x54>
	return 0;
   13bb4:	2000      	movs	r0, #0
}
   13bb6:	4770      	bx	lr
		return thread->stack_info.start;
   13bb8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   13bbc:	4770      	bx	lr
   13bbe:	bf00      	nop
   13bc0:	20003548 	.word	0x20003548

00013bc4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13bc4:	b508      	push	{r3, lr}
   13bc6:	460d      	mov	r5, r1
   13bc8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13bca:	4b08      	ldr	r3, [pc, #32]	; (13bec <arch_switch_to_main_thread+0x28>)
   13bcc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13bce:	f000 fa05 	bl	13fdc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13bd2:	4620      	mov	r0, r4
   13bd4:	f385 8809 	msr	PSP, r5
   13bd8:	2100      	movs	r1, #0
   13bda:	b663      	cpsie	if
   13bdc:	f381 8811 	msr	BASEPRI, r1
   13be0:	f3bf 8f6f 	isb	sy
   13be4:	2200      	movs	r2, #0
   13be6:	2300      	movs	r3, #0
   13be8:	f00c f9b4 	bl	1ff54 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13bec:	20003548 	.word	0x20003548

00013bf0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13bf0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13bf2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13bf4:	4a0b      	ldr	r2, [pc, #44]	; (13c24 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13bf6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13bf8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13bfa:	bf1e      	ittt	ne
	movne	r1, #0
   13bfc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13bfe:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13c00:	f011 f80a 	blne	24c18 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13c04:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13c06:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13c0a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13c0e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13c12:	4905      	ldr	r1, [pc, #20]	; (13c28 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13c14:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13c16:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13c18:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13c1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13c1e:	4903      	ldr	r1, [pc, #12]	; (13c2c <_isr_wrapper+0x3c>)
	bx r1
   13c20:	4708      	bx	r1
   13c22:	0000      	.short	0x0000
	ldr r2, =_kernel
   13c24:	20003548 	.word	0x20003548
	ldr r1, =_sw_isr_table
   13c28:	00025970 	.word	0x00025970
	ldr r1, =z_arm_int_exit
   13c2c:	00013c31 	.word	0x00013c31

00013c30 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13c30:	4b04      	ldr	r3, [pc, #16]	; (13c44 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13c32:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13c34:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13c36:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13c38:	d003      	beq.n	13c42 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13c3a:	4903      	ldr	r1, [pc, #12]	; (13c48 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13c40:	600a      	str	r2, [r1, #0]

00013c42 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13c42:	4770      	bx	lr
	ldr r3, =_kernel
   13c44:	20003548 	.word	0x20003548
	ldr r1, =_SCS_ICSR
   13c48:	e000ed04 	.word	0xe000ed04

00013c4c <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   13c4c:	b510      	push	{r4, lr}
   13c4e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13c50:	4b12      	ldr	r3, [pc, #72]	; (13c9c <bus_fault+0x50>)
   13c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c58:	f413 7f00 	tst.w	r3, #512	; 0x200
   13c5c:	d00b      	beq.n	13c76 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13c5e:	4b0f      	ldr	r3, [pc, #60]	; (13c9c <bus_fault+0x50>)
   13c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   13c68:	d005      	beq.n	13c76 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   13c6a:	b121      	cbz	r1, 13c76 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13c6c:	4a0b      	ldr	r2, [pc, #44]	; (13c9c <bus_fault+0x50>)
   13c6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13c74:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13c76:	4b09      	ldr	r3, [pc, #36]	; (13c9c <bus_fault+0x50>)
   13c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c7c:	f413 7f80 	tst.w	r3, #256	; 0x100
   13c80:	d101      	bne.n	13c86 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13c82:	4b06      	ldr	r3, [pc, #24]	; (13c9c <bus_fault+0x50>)
   13c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13c86:	4a05      	ldr	r2, [pc, #20]	; (13c9c <bus_fault+0x50>)
   13c88:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c8a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13c8e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   13c90:	2101      	movs	r1, #1
   13c92:	f00c fd14 	bl	206be <memory_fault_recoverable>
   13c96:	7020      	strb	r0, [r4, #0]

	return reason;
}
   13c98:	2000      	movs	r0, #0
   13c9a:	bd10      	pop	{r4, pc}
   13c9c:	e000ed00 	.word	0xe000ed00

00013ca0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13ca0:	4b07      	ldr	r3, [pc, #28]	; (13cc0 <usage_fault+0x20>)
   13ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13cb0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   13cb4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   13cb8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   13cba:	2000      	movs	r0, #0
   13cbc:	4770      	bx	lr
   13cbe:	bf00      	nop
   13cc0:	e000ed00 	.word	0xe000ed00

00013cc4 <mem_manage_fault>:
{
   13cc4:	b570      	push	{r4, r5, r6, lr}
   13cc6:	4605      	mov	r5, r0
   13cc8:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13cca:	4b20      	ldr	r3, [pc, #128]	; (13d4c <mem_manage_fault+0x88>)
   13ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13cce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13cd2:	f013 0f02 	tst.w	r3, #2
   13cd6:	d00c      	beq.n	13cf2 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
   13cd8:	4b1c      	ldr	r3, [pc, #112]	; (13d4c <mem_manage_fault+0x88>)
   13cda:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13cde:	f013 0f80 	tst.w	r3, #128	; 0x80
   13ce2:	d025      	beq.n	13d30 <mem_manage_fault+0x6c>
			if (from_hard_fault != 0) {
   13ce4:	b139      	cbz	r1, 13cf6 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13ce6:	4a19      	ldr	r2, [pc, #100]	; (13d4c <mem_manage_fault+0x88>)
   13ce8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13cee:	6293      	str	r3, [r2, #40]	; 0x28
   13cf0:	e001      	b.n	13cf6 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
   13cf2:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13cf6:	4b15      	ldr	r3, [pc, #84]	; (13d4c <mem_manage_fault+0x88>)
   13cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13cfe:	f013 0f10 	tst.w	r3, #16
   13d02:	d104      	bne.n	13d0e <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13d04:	4b11      	ldr	r3, [pc, #68]	; (13d4c <mem_manage_fault+0x88>)
   13d06:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13d08:	f014 0402 	ands.w	r4, r4, #2
   13d0c:	d004      	beq.n	13d18 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13d0e:	4b0f      	ldr	r3, [pc, #60]	; (13d4c <mem_manage_fault+0x88>)
   13d10:	685c      	ldr	r4, [r3, #4]
   13d12:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   13d16:	d10e      	bne.n	13d36 <mem_manage_fault+0x72>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13d18:	4a0c      	ldr	r2, [pc, #48]	; (13d4c <mem_manage_fault+0x88>)
   13d1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13d1c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13d20:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13d22:	2101      	movs	r1, #1
   13d24:	4628      	mov	r0, r5
   13d26:	f00c fcca 	bl	206be <memory_fault_recoverable>
   13d2a:	7030      	strb	r0, [r6, #0]
}
   13d2c:	4620      	mov	r0, r4
   13d2e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
   13d30:	f06f 0015 	mvn.w	r0, #21
   13d34:	e7df      	b.n	13cf6 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13d36:	4629      	mov	r1, r5
   13d38:	f7ff ff14 	bl	13b64 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13d3c:	4604      	mov	r4, r0
   13d3e:	2800      	cmp	r0, #0
   13d40:	d0ea      	beq.n	13d18 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13d42:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13d46:	2402      	movs	r4, #2
   13d48:	e7e6      	b.n	13d18 <mem_manage_fault+0x54>
   13d4a:	bf00      	nop
   13d4c:	e000ed00 	.word	0xe000ed00

00013d50 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   13d50:	b510      	push	{r4, lr}
   13d52:	4604      	mov	r4, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   13d54:	2300      	movs	r3, #0
   13d56:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13d58:	4b1b      	ldr	r3, [pc, #108]	; (13dc8 <hard_fault+0x78>)
   13d5a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   13d5c:	f010 0002 	ands.w	r0, r0, #2
   13d60:	d12d      	bne.n	13dbe <hard_fault+0x6e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13d64:	2b00      	cmp	r3, #0
   13d66:	db2b      	blt.n	13dc0 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13d68:	4b17      	ldr	r3, [pc, #92]	; (13dc8 <hard_fault+0x78>)
   13d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13d6c:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
   13d70:	d027      	beq.n	13dc2 <hard_fault+0x72>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   13d72:	69a3      	ldr	r3, [r4, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   13d74:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13d78:	f64d 7302 	movw	r3, #57090	; 0xdf02
   13d7c:	429a      	cmp	r2, r3
   13d7e:	d010      	beq.n	13da2 <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
   13d80:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13d84:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   13d88:	781b      	ldrb	r3, [r3, #0]
   13d8a:	b963      	cbnz	r3, 13da6 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   13d8c:	4b0f      	ldr	r3, [pc, #60]	; (13dcc <hard_fault+0x7c>)
   13d8e:	781b      	ldrb	r3, [r3, #0]
   13d90:	b97b      	cbnz	r3, 13db2 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   13d92:	4b0f      	ldr	r3, [pc, #60]	; (13dd0 <hard_fault+0x80>)
   13d94:	881b      	ldrh	r3, [r3, #0]
   13d96:	b29b      	uxth	r3, r3
   13d98:	b193      	cbz	r3, 13dc0 <hard_fault+0x70>
			reason = usage_fault(esf);
   13d9a:	4620      	mov	r0, r4
   13d9c:	f7ff ff80 	bl	13ca0 <usage_fault>
   13da0:	e00e      	b.n	13dc0 <hard_fault+0x70>
			reason = esf->basic.r0;
   13da2:	6820      	ldr	r0, [r4, #0]
   13da4:	e00c      	b.n	13dc0 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
   13da6:	460a      	mov	r2, r1
   13da8:	2101      	movs	r1, #1
   13daa:	4620      	mov	r0, r4
   13dac:	f7ff ff8a 	bl	13cc4 <mem_manage_fault>
   13db0:	e006      	b.n	13dc0 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
   13db2:	460a      	mov	r2, r1
   13db4:	2101      	movs	r1, #1
   13db6:	4620      	mov	r0, r4
   13db8:	f7ff ff48 	bl	13c4c <bus_fault>
   13dbc:	e000      	b.n	13dc0 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13dbe:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   13dc0:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13dc2:	4618      	mov	r0, r3
	return reason;
   13dc4:	e7fc      	b.n	13dc0 <hard_fault+0x70>
   13dc6:	bf00      	nop
   13dc8:	e000ed00 	.word	0xe000ed00
   13dcc:	e000ed29 	.word	0xe000ed29
   13dd0:	e000ed2a 	.word	0xe000ed2a

00013dd4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13dd6:	b08b      	sub	sp, #44	; 0x2c
   13dd8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13dda:	4b25      	ldr	r3, [pc, #148]	; (13e70 <z_arm_fault+0x9c>)
   13ddc:	6859      	ldr	r1, [r3, #4]
   13dde:	f3c1 0108 	ubfx	r1, r1, #0, #9
   13de2:	2300      	movs	r3, #0
   13de4:	f383 8811 	msr	BASEPRI, r3
   13de8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13dec:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13df0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13df4:	d115      	bne.n	13e22 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13df6:	f002 030c 	and.w	r3, r2, #12
   13dfa:	2b08      	cmp	r3, #8
   13dfc:	d014      	beq.n	13e28 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13dfe:	f012 0f08 	tst.w	r2, #8
   13e02:	d00b      	beq.n	13e1c <z_arm_fault+0x48>
	*nested_exc = false;
   13e04:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   13e06:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   13e0a:	4620      	mov	r0, r4
   13e0c:	f00c fc5c 	bl	206c8 <fault_handle>
   13e10:	4606      	mov	r6, r0
	if (recoverable) {
   13e12:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13e16:	b153      	cbz	r3, 13e2e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   13e18:	b00b      	add	sp, #44	; 0x2c
   13e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ptr_esf = (z_arch_esf_t *)msp;
   13e1c:	4604      	mov	r4, r0
			*nested_exc = true;
   13e1e:	2701      	movs	r7, #1
   13e20:	e7f1      	b.n	13e06 <z_arm_fault+0x32>
	*nested_exc = false;
   13e22:	2700      	movs	r7, #0
		return NULL;
   13e24:	463c      	mov	r4, r7
   13e26:	e7ee      	b.n	13e06 <z_arm_fault+0x32>
	*nested_exc = false;
   13e28:	2700      	movs	r7, #0
		return NULL;
   13e2a:	463c      	mov	r4, r7
   13e2c:	e7eb      	b.n	13e06 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13e2e:	ad01      	add	r5, sp, #4
   13e30:	6820      	ldr	r0, [r4, #0]
   13e32:	6861      	ldr	r1, [r4, #4]
   13e34:	68a2      	ldr	r2, [r4, #8]
   13e36:	68e3      	ldr	r3, [r4, #12]
   13e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e3a:	6920      	ldr	r0, [r4, #16]
   13e3c:	6961      	ldr	r1, [r4, #20]
   13e3e:	69a2      	ldr	r2, [r4, #24]
   13e40:	69e3      	ldr	r3, [r4, #28]
   13e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
   13e44:	b14f      	cbz	r7, 13e5a <z_arm_fault+0x86>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13e46:	9b08      	ldr	r3, [sp, #32]
   13e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13e4c:	b95a      	cbnz	r2, 13e66 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13e4e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13e52:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13e56:	9308      	str	r3, [sp, #32]
   13e58:	e005      	b.n	13e66 <z_arm_fault+0x92>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13e5a:	9b08      	ldr	r3, [sp, #32]
   13e5c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13e60:	f023 0301 	bic.w	r3, r3, #1
   13e64:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   13e66:	a901      	add	r1, sp, #4
   13e68:	4630      	mov	r0, r6
   13e6a:	f00c fc12 	bl	20692 <z_arm_fatal_error>
   13e6e:	e7d3      	b.n	13e18 <z_arm_fault+0x44>
   13e70:	e000ed00 	.word	0xe000ed00

00013e74 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13e74:	4a02      	ldr	r2, [pc, #8]	; (13e80 <z_arm_fault_init+0xc>)
   13e76:	6953      	ldr	r3, [r2, #20]
   13e78:	f043 0310 	orr.w	r3, r3, #16
   13e7c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13e7e:	4770      	bx	lr
   13e80:	e000ed00 	.word	0xe000ed00

00013e84 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13e84:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13e88:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13e8c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13e8e:	4672      	mov	r2, lr
	bl z_arm_fault
   13e90:	f7ff ffa0 	bl	13dd4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13e94:	bd01      	pop	{r0, pc}
   13e96:	bf00      	nop

00013e98 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13e98:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13e9a:	e006      	b.n	13eaa <z_arm_interrupt_init+0x12>
   13e9c:	f002 010f 	and.w	r1, r2, #15
   13ea0:	4b09      	ldr	r3, [pc, #36]	; (13ec8 <z_arm_interrupt_init+0x30>)
   13ea2:	440b      	add	r3, r1
   13ea4:	2140      	movs	r1, #64	; 0x40
   13ea6:	7619      	strb	r1, [r3, #24]
   13ea8:	3201      	adds	r2, #1
   13eaa:	2a2f      	cmp	r2, #47	; 0x2f
   13eac:	dc0a      	bgt.n	13ec4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13eae:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	dbf3      	blt.n	13e9c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13eb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13eb8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13ebc:	2140      	movs	r1, #64	; 0x40
   13ebe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13ec2:	e7f1      	b.n	13ea8 <z_arm_interrupt_init+0x10>
	}
}
   13ec4:	4770      	bx	lr
   13ec6:	bf00      	nop
   13ec8:	e000ecfc 	.word	0xe000ecfc

00013ecc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13ecc:	2000      	movs	r0, #0
    msr CONTROL, r0
   13ece:	f380 8814 	msr	CONTROL, r0
    isb
   13ed2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13ed6:	f011 fc9d 	bl	25814 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13eda:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13edc:	490d      	ldr	r1, [pc, #52]	; (13f14 <__start+0x48>)
    str r0, [r1]
   13ede:	6008      	str	r0, [r1, #0]
    dsb
   13ee0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13ee4:	480c      	ldr	r0, [pc, #48]	; (13f18 <__start+0x4c>)
    msr msp, r0
   13ee6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13eea:	f000 f829 	bl	13f40 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13eee:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13ef0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13ef4:	4809      	ldr	r0, [pc, #36]	; (13f1c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13ef6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13efa:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13efc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13f00:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13f04:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13f06:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13f08:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13f0c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13f10:	f7ff fd94 	bl	13a3c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13f14:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13f18:	20005bc0 	.word	0x20005bc0
    ldr r0, =z_interrupt_stacks
   13f1c:	20005d40 	.word	0x20005d40

00013f20 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13f20:	4b06      	ldr	r3, [pc, #24]	; (13f3c <z_arm_clear_arm_mpu_config+0x1c>)
   13f22:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   13f24:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   13f28:	2300      	movs	r3, #0
   13f2a:	4283      	cmp	r3, r0
   13f2c:	da05      	bge.n	13f3a <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   13f2e:	4a03      	ldr	r2, [pc, #12]	; (13f3c <z_arm_clear_arm_mpu_config+0x1c>)
   13f30:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   13f32:	2100      	movs	r1, #0
   13f34:	6111      	str	r1, [r2, #16]
   13f36:	3301      	adds	r3, #1
   13f38:	e7f7      	b.n	13f2a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   13f3a:	4770      	bx	lr
   13f3c:	e000ed90 	.word	0xe000ed90

00013f40 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13f40:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13f42:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13f44:	2400      	movs	r4, #0
   13f46:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13f4a:	f7ff ffe9 	bl	13f20 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13f4e:	4623      	mov	r3, r4
   13f50:	e008      	b.n	13f64 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   13f52:	f103 0120 	add.w	r1, r3, #32
   13f56:	4a0e      	ldr	r2, [pc, #56]	; (13f90 <z_arm_init_arch_hw_at_boot+0x50>)
   13f58:	f04f 30ff 	mov.w	r0, #4294967295
   13f5c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13f60:	3301      	adds	r3, #1
   13f62:	b2db      	uxtb	r3, r3
   13f64:	2b07      	cmp	r3, #7
   13f66:	d9f4      	bls.n	13f52 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13f68:	2300      	movs	r3, #0
   13f6a:	e008      	b.n	13f7e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13f6c:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13f70:	4a07      	ldr	r2, [pc, #28]	; (13f90 <z_arm_init_arch_hw_at_boot+0x50>)
   13f72:	f04f 30ff 	mov.w	r0, #4294967295
   13f76:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13f7a:	3301      	adds	r3, #1
   13f7c:	b2db      	uxtb	r3, r3
   13f7e:	2b07      	cmp	r3, #7
   13f80:	d9f4      	bls.n	13f6c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   13f82:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13f84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13f88:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13f8c:	bd10      	pop	{r4, pc}
   13f8e:	bf00      	nop
   13f90:	e000e100 	.word	0xe000e100

00013f94 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13f94:	b508      	push	{r3, lr}
	if (_current == thread) {
   13f96:	4b08      	ldr	r3, [pc, #32]	; (13fb8 <z_impl_k_thread_abort+0x24>)
   13f98:	689b      	ldr	r3, [r3, #8]
   13f9a:	4283      	cmp	r3, r0
   13f9c:	d002      	beq.n	13fa4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   13f9e:	f007 fd63 	bl	1ba68 <z_thread_abort>
}
   13fa2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13fa4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d0f8      	beq.n	13f9e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13fac:	4a03      	ldr	r2, [pc, #12]	; (13fbc <z_impl_k_thread_abort+0x28>)
   13fae:	6853      	ldr	r3, [r2, #4]
   13fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13fb4:	6053      	str	r3, [r2, #4]
   13fb6:	e7f2      	b.n	13f9e <z_impl_k_thread_abort+0xa>
   13fb8:	20003548 	.word	0x20003548
   13fbc:	e000ed00 	.word	0xe000ed00

00013fc0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13fc0:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13fc2:	4b03      	ldr	r3, [pc, #12]	; (13fd0 <z_arm_configure_static_mpu_regions+0x10>)
   13fc4:	4a03      	ldr	r2, [pc, #12]	; (13fd4 <z_arm_configure_static_mpu_regions+0x14>)
   13fc6:	2101      	movs	r1, #1
   13fc8:	4803      	ldr	r0, [pc, #12]	; (13fd8 <z_arm_configure_static_mpu_regions+0x18>)
   13fca:	f00c fc03 	bl	207d4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13fce:	bd08      	pop	{r3, pc}
   13fd0:	20040000 	.word	0x20040000
   13fd4:	20000000 	.word	0x20000000
   13fd8:	00026b28 	.word	0x00026b28

00013fdc <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   13fdc:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13fde:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   13fe2:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13fe4:	4804      	ldr	r0, [pc, #16]	; (13ff8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13fe6:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   13fe8:	2320      	movs	r3, #32
   13fea:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13fec:	4b03      	ldr	r3, [pc, #12]	; (13ffc <z_arm_configure_dynamic_mpu_regions+0x20>)
   13fee:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13ff0:	2101      	movs	r1, #1
   13ff2:	f00c fbf3 	bl	207dc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   13ff6:	bd08      	pop	{r3, pc}
   13ff8:	200028a4 	.word	0x200028a4
   13ffc:	150b0000 	.word	0x150b0000

00014000 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14000:	4a06      	ldr	r2, [pc, #24]	; (1401c <region_init+0x1c>)
   14002:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14004:	680b      	ldr	r3, [r1, #0]
   14006:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1400a:	4303      	orrs	r3, r0
   1400c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14010:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14012:	688b      	ldr	r3, [r1, #8]
   14014:	f043 0301 	orr.w	r3, r3, #1
   14018:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   1401a:	4770      	bx	lr
   1401c:	e000ed90 	.word	0xe000ed90

00014020 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   14020:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   14022:	4c03      	ldr	r4, [pc, #12]	; (14030 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14024:	2301      	movs	r3, #1
   14026:	7822      	ldrb	r2, [r4, #0]
   14028:	f00c fbac 	bl	20784 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1402c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   1402e:	bd10      	pop	{r4, pc}
   14030:	20003f73 	.word	0x20003f73

00014034 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14034:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14036:	2300      	movs	r3, #0
   14038:	4a08      	ldr	r2, [pc, #32]	; (1405c <mpu_configure_dynamic_mpu_regions+0x28>)
   1403a:	7812      	ldrb	r2, [r2, #0]
   1403c:	f00c fba2 	bl	20784 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14040:	f110 0f16 	cmn.w	r0, #22
   14044:	d008      	beq.n	14058 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14046:	4603      	mov	r3, r0
   14048:	2b07      	cmp	r3, #7
   1404a:	dc05      	bgt.n	14058 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   1404c:	4a04      	ldr	r2, [pc, #16]	; (14060 <mpu_configure_dynamic_mpu_regions+0x2c>)
   1404e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   14050:	2100      	movs	r1, #0
   14052:	6111      	str	r1, [r2, #16]
   14054:	3301      	adds	r3, #1
   14056:	e7f7      	b.n	14048 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   14058:	bd08      	pop	{r3, pc}
   1405a:	bf00      	nop
   1405c:	20003f73 	.word	0x20003f73
   14060:	e000ed90 	.word	0xe000ed90

00014064 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14064:	4b03      	ldr	r3, [pc, #12]	; (14074 <arm_core_mpu_enable+0x10>)
   14066:	2205      	movs	r2, #5
   14068:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1406a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1406e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14072:	4770      	bx	lr
   14074:	e000ed90 	.word	0xe000ed90

00014078 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14078:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1407c:	4b01      	ldr	r3, [pc, #4]	; (14084 <arm_core_mpu_disable+0xc>)
   1407e:	2200      	movs	r2, #0
   14080:	605a      	str	r2, [r3, #4]
}
   14082:	4770      	bx	lr
   14084:	e000ed90 	.word	0xe000ed90

00014088 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   14088:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1408a:	4b0e      	ldr	r3, [pc, #56]	; (140c4 <z_arm_mpu_init+0x3c>)
   1408c:	681d      	ldr	r5, [r3, #0]
   1408e:	2d08      	cmp	r5, #8
   14090:	d815      	bhi.n	140be <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14092:	f7ff fff1 	bl	14078 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14096:	2400      	movs	r4, #0
   14098:	42a5      	cmp	r5, r4
   1409a:	d90a      	bls.n	140b2 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1409c:	4b09      	ldr	r3, [pc, #36]	; (140c4 <z_arm_mpu_init+0x3c>)
   1409e:	6859      	ldr	r1, [r3, #4]
   140a0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   140a4:	0093      	lsls	r3, r2, #2
   140a6:	4419      	add	r1, r3
   140a8:	4620      	mov	r0, r4
   140aa:	f7ff ffa9 	bl	14000 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   140ae:	3401      	adds	r4, #1
   140b0:	e7f2      	b.n	14098 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   140b2:	4b05      	ldr	r3, [pc, #20]	; (140c8 <z_arm_mpu_init+0x40>)
   140b4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   140b6:	f7ff ffd5 	bl	14064 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   140ba:	2000      	movs	r0, #0
}
   140bc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   140be:	f04f 30ff 	mov.w	r0, #4294967295
   140c2:	e7fb      	b.n	140bc <z_arm_mpu_init+0x34>
   140c4:	00026b64 	.word	0x00026b64
   140c8:	20003f73 	.word	0x20003f73

000140cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   140cc:	4b01      	ldr	r3, [pc, #4]	; (140d4 <__stdout_hook_install+0x8>)
   140ce:	6018      	str	r0, [r3, #0]
}
   140d0:	4770      	bx	lr
   140d2:	bf00      	nop
   140d4:	20000788 	.word	0x20000788

000140d8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   140d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140da:	4605      	mov	r5, r0
   140dc:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   140de:	2400      	movs	r4, #0
   140e0:	e004      	b.n	140ec <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   140e2:	4b09      	ldr	r3, [pc, #36]	; (14108 <z_impl_zephyr_write_stdout+0x30>)
   140e4:	681b      	ldr	r3, [r3, #0]
   140e6:	7830      	ldrb	r0, [r6, #0]
   140e8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   140ea:	3401      	adds	r4, #1
   140ec:	42bc      	cmp	r4, r7
   140ee:	da08      	bge.n	14102 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   140f0:	192e      	adds	r6, r5, r4
   140f2:	5d2b      	ldrb	r3, [r5, r4]
   140f4:	2b0a      	cmp	r3, #10
   140f6:	d1f4      	bne.n	140e2 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   140f8:	4b03      	ldr	r3, [pc, #12]	; (14108 <z_impl_zephyr_write_stdout+0x30>)
   140fa:	681b      	ldr	r3, [r3, #0]
   140fc:	200d      	movs	r0, #13
   140fe:	4798      	blx	r3
   14100:	e7ef      	b.n	140e2 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   14102:	4638      	mov	r0, r7
   14104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14106:	bf00      	nop
   14108:	20000788 	.word	0x20000788

0001410c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   1410c:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   1410e:	221d      	movs	r2, #29
   14110:	4904      	ldr	r1, [pc, #16]	; (14124 <__chk_fail+0x18>)
   14112:	2002      	movs	r0, #2
   14114:	f00c fb6b 	bl	207ee <_write>
	k_oops();
   14118:	4040      	eors	r0, r0
   1411a:	f380 8811 	msr	BASEPRI, r0
   1411e:	f04f 0003 	mov.w	r0, #3
   14122:	df02      	svc	2
	CODE_UNREACHABLE;
   14124:	00026b34 	.word	0x00026b34

00014128 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   14128:	f04f 0240 	mov.w	r2, #64	; 0x40
   1412c:	f3ef 8311 	mrs	r3, BASEPRI
   14130:	f382 8812 	msr	BASEPRI_MAX, r2
   14134:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   14138:	4a04      	ldr	r2, [pc, #16]	; (1414c <nordicsemi_nrf52_init+0x24>)
   1413a:	2101      	movs	r1, #1
   1413c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   14140:	f383 8811 	msr	BASEPRI, r3
   14144:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14148:	2000      	movs	r0, #0
   1414a:	4770      	bx	lr
   1414c:	4001e000 	.word	0x4001e000

00014150 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   14150:	b2c0      	uxtb	r0, r0
   14152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14156:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1415a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1415e:	4905      	ldr	r1, [pc, #20]	; (14174 <sys_arch_reboot+0x24>)
   14160:	68ca      	ldr	r2, [r1, #12]
   14162:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14166:	4b04      	ldr	r3, [pc, #16]	; (14178 <sys_arch_reboot+0x28>)
   14168:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1416a:	60cb      	str	r3, [r1, #12]
   1416c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14170:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14172:	e7fd      	b.n	14170 <sys_arch_reboot+0x20>
   14174:	e000ed00 	.word	0xe000ed00
   14178:	05fa0004 	.word	0x05fa0004

0001417c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1417c:	b130      	cbz	r0, 1418c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   1417e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14180:	0180      	lsls	r0, r0, #6
   14182:	4b03      	ldr	r3, [pc, #12]	; (14190 <arch_busy_wait+0x14>)
   14184:	f043 0301 	orr.w	r3, r3, #1
   14188:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   1418a:	bd08      	pop	{r3, pc}
   1418c:	4770      	bx	lr
   1418e:	bf00      	nop
   14190:	00025c60 	.word	0x00025c60

00014194 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14194:	b470      	push	{r4, r5, r6}
   14196:	4605      	mov	r5, r0
   14198:	460c      	mov	r4, r1
	switch (src->type) {
   1419a:	7803      	ldrb	r3, [r0, #0]
   1419c:	2b01      	cmp	r3, #1
   1419e:	d011      	beq.n	141c4 <uuid_to_uuid128+0x30>
   141a0:	2b02      	cmp	r3, #2
   141a2:	d021      	beq.n	141e8 <uuid_to_uuid128+0x54>
   141a4:	b10b      	cbz	r3, 141aa <uuid_to_uuid128+0x16>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   141a6:	bc70      	pop	{r4, r5, r6}
   141a8:	4770      	bx	lr
		*dst = uuid128_base;
   141aa:	4e15      	ldr	r6, [pc, #84]	; (14200 <uuid_to_uuid128+0x6c>)
   141ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   141ae:	6020      	str	r0, [r4, #0]
   141b0:	6061      	str	r1, [r4, #4]
   141b2:	60a2      	str	r2, [r4, #8]
   141b4:	60e3      	str	r3, [r4, #12]
   141b6:	7833      	ldrb	r3, [r6, #0]
   141b8:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   141ba:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   141bc:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   141be:	0a1b      	lsrs	r3, r3, #8
   141c0:	73a3      	strb	r3, [r4, #14]
}
   141c2:	e7f0      	b.n	141a6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   141c4:	4e0e      	ldr	r6, [pc, #56]	; (14200 <uuid_to_uuid128+0x6c>)
   141c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   141c8:	6020      	str	r0, [r4, #0]
   141ca:	6061      	str	r1, [r4, #4]
   141cc:	60a2      	str	r2, [r4, #8]
   141ce:	60e3      	str	r3, [r4, #12]
   141d0:	7833      	ldrb	r3, [r6, #0]
   141d2:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   141d4:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   141d6:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   141d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   141dc:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   141de:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   141e0:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   141e2:	0e1b      	lsrs	r3, r3, #24
   141e4:	7423      	strb	r3, [r4, #16]
}
   141e6:	e7de      	b.n	141a6 <uuid_to_uuid128+0x12>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   141e8:	6800      	ldr	r0, [r0, #0]
   141ea:	6869      	ldr	r1, [r5, #4]
   141ec:	68aa      	ldr	r2, [r5, #8]
   141ee:	68eb      	ldr	r3, [r5, #12]
   141f0:	6020      	str	r0, [r4, #0]
   141f2:	6061      	str	r1, [r4, #4]
   141f4:	60a2      	str	r2, [r4, #8]
   141f6:	60e3      	str	r3, [r4, #12]
   141f8:	7c2b      	ldrb	r3, [r5, #16]
   141fa:	7423      	strb	r3, [r4, #16]
   141fc:	e7d3      	b.n	141a6 <uuid_to_uuid128+0x12>
   141fe:	bf00      	nop
   14200:	00026b84 	.word	0x00026b84

00014204 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14204:	b538      	push	{r3, r4, r5, lr}
   14206:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   14208:	4805      	ldr	r0, [pc, #20]	; (14220 <bt_buf_get_rx+0x1c>)
   1420a:	f00f fa21 	bl	23650 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1420e:	4605      	mov	r5, r0
   14210:	b120      	cbz	r0, 1421c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   14212:	2100      	movs	r1, #0
   14214:	3008      	adds	r0, #8
   14216:	f00f fa3d 	bl	23694 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1421a:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1421c:	4628      	mov	r0, r5
   1421e:	bd38      	pop	{r3, r4, r5, pc}
   14220:	20000bc4 	.word	0x20000bc4

00014224 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14224:	b510      	push	{r4, lr}
   14226:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14228:	4b0a      	ldr	r3, [pc, #40]	; (14254 <bt_buf_get_cmd_complete+0x30>)
   1422a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1422e:	b158      	cbz	r0, 14248 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14230:	f00f fa67 	bl	23702 <net_buf_ref>
   14234:	4604      	mov	r4, r0
   14236:	2301      	movs	r3, #1
   14238:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1423a:	2100      	movs	r1, #0
   1423c:	8181      	strh	r1, [r0, #12]
   1423e:	3008      	adds	r0, #8
   14240:	f00f fa28 	bl	23694 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   14244:	4620      	mov	r0, r4
   14246:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14248:	460b      	mov	r3, r1
   1424a:	2001      	movs	r0, #1
   1424c:	f7ff ffda 	bl	14204 <bt_buf_get_rx>
   14250:	4604      	mov	r4, r0
   14252:	e7f7      	b.n	14244 <bt_buf_get_cmd_complete+0x20>
   14254:	200002b0 	.word	0x200002b0

00014258 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14258:	b510      	push	{r4, lr}
	switch (evt) {
   1425a:	280f      	cmp	r0, #15
   1425c:	d90d      	bls.n	1427a <bt_buf_get_evt+0x22>
   1425e:	2813      	cmp	r0, #19
   14260:	d10d      	bne.n	1427e <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   14262:	4814      	ldr	r0, [pc, #80]	; (142b4 <bt_buf_get_evt+0x5c>)
   14264:	f00f f9f4 	bl	23650 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   14268:	4604      	mov	r4, r0
   1426a:	b198      	cbz	r0, 14294 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1426c:	2100      	movs	r1, #0
   1426e:	3008      	adds	r0, #8
   14270:	f00f fa10 	bl	23694 <net_buf_simple_reserve>
   14274:	2301      	movs	r3, #1
   14276:	7523      	strb	r3, [r4, #20]
}
   14278:	e00c      	b.n	14294 <bt_buf_get_evt+0x3c>
	switch (evt) {
   1427a:	280e      	cmp	r0, #14
   1427c:	d205      	bcs.n	1428a <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   1427e:	b959      	cbnz	r1, 14298 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14280:	2001      	movs	r0, #1
   14282:	f7ff ffbf 	bl	14204 <bt_buf_get_rx>
   14286:	4604      	mov	r4, r0
   14288:	e004      	b.n	14294 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   1428a:	4610      	mov	r0, r2
   1428c:	4619      	mov	r1, r3
   1428e:	f7ff ffc9 	bl	14224 <bt_buf_get_cmd_complete>
   14292:	4604      	mov	r4, r0
	}
}
   14294:	4620      	mov	r0, r4
   14296:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   14298:	4807      	ldr	r0, [pc, #28]	; (142b8 <bt_buf_get_evt+0x60>)
   1429a:	f00f f9d9 	bl	23650 <net_buf_alloc_fixed>
			if (buf) {
   1429e:	4604      	mov	r4, r0
   142a0:	2800      	cmp	r0, #0
   142a2:	d0f7      	beq.n	14294 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   142a4:	2100      	movs	r1, #0
   142a6:	3008      	adds	r0, #8
   142a8:	f00f f9f4 	bl	23694 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   142ac:	2301      	movs	r3, #1
   142ae:	7523      	strb	r3, [r4, #20]
			return buf;
   142b0:	e7f0      	b.n	14294 <bt_buf_get_evt+0x3c>
   142b2:	bf00      	nop
   142b4:	20000bf0 	.word	0x20000bf0
   142b8:	20000b40 	.word	0x20000b40

000142bc <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   142bc:	2300      	movs	r3, #0
   142be:	2b00      	cmp	r3, #0
   142c0:	dd00      	ble.n	142c4 <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   142c2:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   142c4:	4a05      	ldr	r2, [pc, #20]	; (142dc <conn_handle_disconnected+0x20>)
   142c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   142ca:	b922      	cbnz	r2, 142d6 <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   142cc:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   142d0:	4902      	ldr	r1, [pc, #8]	; (142dc <conn_handle_disconnected+0x20>)
   142d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   142d6:	3301      	adds	r3, #1
   142d8:	e7f1      	b.n	142be <conn_handle_disconnected+0x2>
   142da:	bf00      	nop
   142dc:	200028c8 	.word	0x200028c8

000142e0 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   142e0:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   142e4:	2300      	movs	r3, #0
   142e6:	2b00      	cmp	r3, #0
   142e8:	dd01      	ble.n	142ee <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   142ea:	2000      	movs	r0, #0
}
   142ec:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   142ee:	4a06      	ldr	r2, [pc, #24]	; (14308 <conn_handle_is_disconnected+0x28>)
   142f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   142f4:	4282      	cmp	r2, r0
   142f6:	d001      	beq.n	142fc <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   142f8:	3301      	adds	r3, #1
   142fa:	e7f4      	b.n	142e6 <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   142fc:	4a02      	ldr	r2, [pc, #8]	; (14308 <conn_handle_is_disconnected+0x28>)
   142fe:	2100      	movs	r1, #0
   14300:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   14304:	2001      	movs	r0, #1
   14306:	4770      	bx	lr
   14308:	200028c8 	.word	0x200028c8

0001430c <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1430c:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   1430e:	7851      	ldrb	r1, [r2, #1]
   14310:	4b08      	ldr	r3, [pc, #32]	; (14334 <read_local_ver_complete+0x28>)
   14312:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14316:	8851      	ldrh	r1, [r2, #2]
   14318:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1431c:	7911      	ldrb	r1, [r2, #4]
   1431e:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   14322:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   14326:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1432a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   1432e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   14332:	4770      	bx	lr
   14334:	200002b0 	.word	0x200002b0

00014338 <read_le_features_complete>:
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14338:	4b03      	ldr	r3, [pc, #12]	; (14348 <read_le_features_complete+0x10>)
   1433a:	6882      	ldr	r2, [r0, #8]
   1433c:	f852 0f01 	ldr.w	r0, [r2, #1]!
   14340:	6851      	ldr	r1, [r2, #4]
   14342:	c303      	stmia	r3!, {r0, r1}
}
   14344:	4770      	bx	lr
   14346:	bf00      	nop
   14348:	20000380 	.word	0x20000380

0001434c <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   1434c:	b4f0      	push	{r4, r5, r6, r7}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1434e:	6886      	ldr	r6, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   14350:	1c74      	adds	r4, r6, #1
   14352:	4f07      	ldr	r7, [pc, #28]	; (14370 <read_supported_commands_complete+0x24>)
   14354:	3641      	adds	r6, #65	; 0x41
   14356:	463d      	mov	r5, r7
   14358:	6820      	ldr	r0, [r4, #0]
   1435a:	6861      	ldr	r1, [r4, #4]
   1435c:	68a2      	ldr	r2, [r4, #8]
   1435e:	68e3      	ldr	r3, [r4, #12]
   14360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14362:	3410      	adds	r4, #16
   14364:	462f      	mov	r7, r5
   14366:	42b4      	cmp	r4, r6
   14368:	d1f5      	bne.n	14356 <read_supported_commands_complete+0xa>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   1436a:	bcf0      	pop	{r4, r5, r6, r7}
   1436c:	4770      	bx	lr
   1436e:	bf00      	nop
   14370:	20000328 	.word	0x20000328

00014374 <read_local_features_complete>:
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14374:	4b03      	ldr	r3, [pc, #12]	; (14384 <read_local_features_complete+0x10>)
   14376:	6882      	ldr	r2, [r0, #8]
   14378:	f852 0f01 	ldr.w	r0, [r2, #1]!
   1437c:	6851      	ldr	r1, [r2, #4]
   1437e:	c303      	stmia	r3!, {r0, r1}
}
   14380:	4770      	bx	lr
   14382:	bf00      	nop
   14384:	20000320 	.word	0x20000320

00014388 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   14388:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1438a:	7a19      	ldrb	r1, [r3, #8]
   1438c:	79da      	ldrb	r2, [r3, #7]
   1438e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   14392:	7998      	ldrb	r0, [r3, #6]
   14394:	795a      	ldrb	r2, [r3, #5]
   14396:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1439a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   1439e:	7918      	ldrb	r0, [r3, #4]
   143a0:	78d9      	ldrb	r1, [r3, #3]
   143a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   143a6:	7898      	ldrb	r0, [r3, #2]
   143a8:	785b      	ldrb	r3, [r3, #1]
   143aa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   143ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   143b2:	4903      	ldr	r1, [pc, #12]	; (143c0 <le_read_supp_states_complete+0x38>)
   143b4:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   143b8:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   143bc:	4770      	bx	lr
   143be:	bf00      	nop
   143c0:	200002b0 	.word	0x200002b0

000143c4 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   143c4:	6883      	ldr	r3, [r0, #8]
   143c6:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   143c8:	b993      	cbnz	r3, 143f0 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   143ca:	f3bf 8f5b 	dmb	ish
   143ce:	4b09      	ldr	r3, [pc, #36]	; (143f4 <hci_reset_complete+0x30>)
   143d0:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   143d4:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   143d8:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   143dc:	f3bf 8f5b 	dmb	ish
   143e0:	e853 1f00 	ldrex	r1, [r3]
   143e4:	e843 2000 	strex	r0, r2, [r3]
   143e8:	2800      	cmp	r0, #0
   143ea:	d1f9      	bne.n	143e0 <hci_reset_complete+0x1c>
   143ec:	f3bf 8f5b 	dmb	ish
}
   143f0:	4770      	bx	lr
   143f2:	bf00      	nop
   143f4:	200002b0 	.word	0x200002b0

000143f8 <le_read_buffer_size_complete>:
{
   143f8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   143fa:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   143fc:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14400:	b299      	uxth	r1, r3
   14402:	4806      	ldr	r0, [pc, #24]	; (1441c <le_read_buffer_size_complete+0x24>)
   14404:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   14408:	b901      	cbnz	r1, 1440c <le_read_buffer_size_complete+0x14>
}
   1440a:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1440c:	78d1      	ldrb	r1, [r2, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1440e:	460a      	mov	r2, r1
   14410:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14414:	f010 fd04 	bl	24e20 <z_impl_k_sem_init>
   14418:	e7f7      	b.n	1440a <le_read_buffer_size_complete+0x12>
   1441a:	bf00      	nop
   1441c:	200002b0 	.word	0x200002b0

00014420 <read_buffer_size_complete>:
{
   14420:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   14422:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   14424:	4b08      	ldr	r3, [pc, #32]	; (14448 <read_buffer_size_complete+0x28>)
   14426:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1442a:	b103      	cbz	r3, 1442e <read_buffer_size_complete+0xe>
}
   1442c:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1442e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   14432:	4805      	ldr	r0, [pc, #20]	; (14448 <read_buffer_size_complete+0x28>)
   14434:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   14438:	8891      	ldrh	r1, [r2, #4]
   1443a:	460a      	mov	r2, r1
   1443c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   14440:	f010 fcee 	bl	24e20 <z_impl_k_sem_init>
   14444:	e7f2      	b.n	1442c <read_buffer_size_complete+0xc>
   14446:	bf00      	nop
   14448:	200002b0 	.word	0x200002b0

0001444c <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1444c:	2801      	cmp	r0, #1
   1444e:	d001      	beq.n	14454 <find_pending_connect+0x8>
	return NULL;
   14450:	2000      	movs	r0, #0
}
   14452:	4770      	bx	lr
{
   14454:	b500      	push	{lr}
   14456:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14458:	2205      	movs	r2, #5
   1445a:	4b0d      	ldr	r3, [pc, #52]	; (14490 <find_pending_connect+0x44>)
   1445c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14460:	f001 fe8a 	bl	16178 <bt_conn_lookup_state_le>
		if (!conn) {
   14464:	b110      	cbz	r0, 1446c <find_pending_connect+0x20>
}
   14466:	b003      	add	sp, #12
   14468:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   1446c:	4b09      	ldr	r3, [pc, #36]	; (14494 <find_pending_connect+0x48>)
   1446e:	e893 0003 	ldmia.w	r3, {r0, r1}
   14472:	9000      	str	r0, [sp, #0]
   14474:	f8ad 1004 	strh.w	r1, [sp, #4]
   14478:	0c09      	lsrs	r1, r1, #16
   1447a:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1447e:	2204      	movs	r2, #4
   14480:	4669      	mov	r1, sp
   14482:	4b03      	ldr	r3, [pc, #12]	; (14490 <find_pending_connect+0x44>)
   14484:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14488:	f001 fe76 	bl	16178 <bt_conn_lookup_state_le>
		return conn;
   1448c:	e7eb      	b.n	14466 <find_pending_connect+0x1a>
   1448e:	bf00      	nop
   14490:	200002b0 	.word	0x200002b0
   14494:	00025c28 	.word	0x00025c28

00014498 <hci_cmd_done>:
{
   14498:	b570      	push	{r4, r5, r6, lr}
   1449a:	4606      	mov	r6, r0
   1449c:	460d      	mov	r5, r1
   1449e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   144a0:	7990      	ldrb	r0, [r2, #6]
   144a2:	f003 faeb 	bl	17a7c <net_buf_pool_get>
   144a6:	4b39      	ldr	r3, [pc, #228]	; (1458c <hci_cmd_done+0xf4>)
   144a8:	4283      	cmp	r3, r0
   144aa:	d000      	beq.n	144ae <hci_cmd_done+0x16>
}
   144ac:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   144ae:	4620      	mov	r0, r4
   144b0:	f00f f81b 	bl	234ea <net_buf_id>
   144b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   144b8:	4b35      	ldr	r3, [pc, #212]	; (14590 <hci_cmd_done+0xf8>)
   144ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   144be:	8843      	ldrh	r3, [r0, #2]
   144c0:	42b3      	cmp	r3, r6
   144c2:	d1f3      	bne.n	144ac <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
   144c4:	4b33      	ldr	r3, [pc, #204]	; (14594 <hci_cmd_done+0xfc>)
   144c6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   144ca:	b128      	cbz	r0, 144d8 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
   144cc:	f00f f8f3 	bl	236b6 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   144d0:	4b30      	ldr	r3, [pc, #192]	; (14594 <hci_cmd_done+0xfc>)
   144d2:	2200      	movs	r2, #0
   144d4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   144d8:	4620      	mov	r0, r4
   144da:	f00f f806 	bl	234ea <net_buf_id>
   144de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   144e2:	4b2b      	ldr	r3, [pc, #172]	; (14590 <hci_cmd_done+0xf8>)
   144e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   144e8:	6843      	ldr	r3, [r0, #4]
   144ea:	b103      	cbz	r3, 144ee <hci_cmd_done+0x56>
   144ec:	b1ed      	cbz	r5, 1452a <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
   144ee:	4620      	mov	r0, r4
   144f0:	f00e fffb 	bl	234ea <net_buf_id>
   144f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   144f8:	4b25      	ldr	r3, [pc, #148]	; (14590 <hci_cmd_done+0xf8>)
   144fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   144fe:	6883      	ldr	r3, [r0, #8]
   14500:	2b00      	cmp	r3, #0
   14502:	d0d3      	beq.n	144ac <hci_cmd_done+0x14>
		cmd(buf)->status = status;
   14504:	4620      	mov	r0, r4
   14506:	f00e fff0 	bl	234ea <net_buf_id>
   1450a:	4e21      	ldr	r6, [pc, #132]	; (14590 <hci_cmd_done+0xf8>)
   1450c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14510:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   14514:	4620      	mov	r0, r4
   14516:	f00e ffe8 	bl	234ea <net_buf_id>
   1451a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1451e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   14522:	68b0      	ldr	r0, [r6, #8]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   14524:	f006 fcae 	bl	1ae84 <z_impl_k_sem_give>
}
   14528:	e7c0      	b.n	144ac <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1452a:	4620      	mov	r0, r4
   1452c:	f00e ffdd 	bl	234ea <net_buf_id>
   14530:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14534:	4b16      	ldr	r3, [pc, #88]	; (14590 <hci_cmd_done+0xf8>)
   14536:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1453a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1453c:	6819      	ldr	r1, [r3, #0]
   1453e:	685a      	ldr	r2, [r3, #4]
   14540:	7a18      	ldrb	r0, [r3, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14542:	f002 061f 	and.w	r6, r2, #31
   14546:	2301      	movs	r3, #1
   14548:	40b3      	lsls	r3, r6

	if (val) {
   1454a:	b170      	cbz	r0, 1456a <hci_cmd_done+0xd2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1454c:	0952      	lsrs	r2, r2, #5
   1454e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14552:	f3bf 8f5b 	dmb	ish
   14556:	e852 1f00 	ldrex	r1, [r2]
   1455a:	4319      	orrs	r1, r3
   1455c:	e842 1000 	strex	r0, r1, [r2]
   14560:	2800      	cmp	r0, #0
   14562:	d1f8      	bne.n	14556 <hci_cmd_done+0xbe>
   14564:	f3bf 8f5b 	dmb	ish
   14568:	e7c1      	b.n	144ee <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1456a:	0952      	lsrs	r2, r2, #5
   1456c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   14570:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14572:	f3bf 8f5b 	dmb	ish
   14576:	e852 1f00 	ldrex	r1, [r2]
   1457a:	4019      	ands	r1, r3
   1457c:	e842 1000 	strex	r0, r1, [r2]
   14580:	2800      	cmp	r0, #0
   14582:	d1f8      	bne.n	14576 <hci_cmd_done+0xde>
   14584:	f3bf 8f5b 	dmb	ish
	}
}
   14588:	e7b1      	b.n	144ee <hci_cmd_done+0x56>
   1458a:	bf00      	nop
   1458c:	20000b98 	.word	0x20000b98
   14590:	200028b0 	.word	0x200028b0
   14594:	200002b0 	.word	0x200002b0

00014598 <hci_cmd_status>:
{
   14598:	b538      	push	{r3, r4, r5, lr}
   1459a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1459c:	2104      	movs	r1, #4
   1459e:	3008      	adds	r0, #8
   145a0:	f00f f8fb 	bl	2379a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   145a4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   145a6:	4622      	mov	r2, r4
   145a8:	7801      	ldrb	r1, [r0, #0]
   145aa:	8840      	ldrh	r0, [r0, #2]
   145ac:	f7ff ff74 	bl	14498 <hci_cmd_done>
	if (ncmd) {
   145b0:	b905      	cbnz	r5, 145b4 <hci_cmd_status+0x1c>
}
   145b2:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   145b4:	4801      	ldr	r0, [pc, #4]	; (145bc <hci_cmd_status+0x24>)
   145b6:	f006 fc65 	bl	1ae84 <z_impl_k_sem_give>
   145ba:	e7fa      	b.n	145b2 <hci_cmd_status+0x1a>
   145bc:	200003c8 	.word	0x200003c8

000145c0 <hci_cmd_complete>:
{
   145c0:	b538      	push	{r3, r4, r5, lr}
   145c2:	4604      	mov	r4, r0
   145c4:	2103      	movs	r1, #3
   145c6:	3008      	adds	r0, #8
   145c8:	f00f f8e7 	bl	2379a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   145cc:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   145ce:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   145d0:	4622      	mov	r2, r4
   145d2:	7819      	ldrb	r1, [r3, #0]
   145d4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   145d8:	f7ff ff5e 	bl	14498 <hci_cmd_done>
	if (ncmd) {
   145dc:	b905      	cbnz	r5, 145e0 <hci_cmd_complete+0x20>
}
   145de:	bd38      	pop	{r3, r4, r5, pc}
   145e0:	4801      	ldr	r0, [pc, #4]	; (145e8 <hci_cmd_complete+0x28>)
   145e2:	f006 fc4f 	bl	1ae84 <z_impl_k_sem_give>
   145e6:	e7fa      	b.n	145de <hci_cmd_complete+0x1e>
   145e8:	200003c8 	.word	0x200003c8

000145ec <hci_event>:
{
   145ec:	b538      	push	{r3, r4, r5, lr}
   145ee:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   145f0:	8983      	ldrh	r3, [r0, #12]
   145f2:	2b01      	cmp	r3, #1
   145f4:	d916      	bls.n	14624 <hci_event+0x38>
   145f6:	2102      	movs	r1, #2
   145f8:	f104 0008 	add.w	r0, r4, #8
   145fc:	f00f f8cd 	bl	2379a <net_buf_simple_pull_mem>
   14600:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14602:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   14604:	3b05      	subs	r3, #5
   14606:	2b15      	cmp	r3, #21
   14608:	d81c      	bhi.n	14644 <hci_event+0x58>
   1460a:	e8df f003 	tbb	[pc, r3]
   1460e:	1b19      	.short	0x1b19
   14610:	1b1b1b1b 	.word	0x1b1b1b1b
   14614:	351b1b1b 	.word	0x351b1b1b
   14618:	1b1b1b35 	.word	0x1b1b1b35
   1461c:	1b1b1b35 	.word	0x1b1b1b35
   14620:	351b1b1b 	.word	0x351b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14624:	f640 1317 	movw	r3, #2327	; 0x917
   14628:	4a1c      	ldr	r2, [pc, #112]	; (1469c <hci_event+0xb0>)
   1462a:	491d      	ldr	r1, [pc, #116]	; (146a0 <hci_event+0xb4>)
   1462c:	481d      	ldr	r0, [pc, #116]	; (146a4 <hci_event+0xb8>)
   1462e:	f00b fb22 	bl	1fc76 <printk>
   14632:	4040      	eors	r0, r0
   14634:	f380 8811 	msr	BASEPRI, r0
   14638:	f04f 0003 	mov.w	r0, #3
   1463c:	df02      	svc	2
   1463e:	e7da      	b.n	145f6 <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14640:	2303      	movs	r3, #3
   14642:	e000      	b.n	14646 <hci_event+0x5a>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   14644:	2302      	movs	r3, #2
   14646:	f013 0f02 	tst.w	r3, #2
   1464a:	d017      	beq.n	1467c <hci_event+0x90>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1464c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   1464e:	2300      	movs	r3, #0
   14650:	2b03      	cmp	r3, #3
   14652:	d80d      	bhi.n	14670 <hci_event+0x84>
		const struct event_handler *handler = &handlers[i];
   14654:	4a14      	ldr	r2, [pc, #80]	; (146a8 <hci_event+0xbc>)
   14656:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   1465a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1465e:	4282      	cmp	r2, r0
   14660:	d11a      	bne.n	14698 <hci_event+0xac>
		if (buf->len < handler->min_len) {
   14662:	89a3      	ldrh	r3, [r4, #12]
   14664:	784a      	ldrb	r2, [r1, #1]
   14666:	429a      	cmp	r2, r3
   14668:	d802      	bhi.n	14670 <hci_event+0x84>
		handler->handler(buf);
   1466a:	684b      	ldr	r3, [r1, #4]
   1466c:	4620      	mov	r0, r4
   1466e:	4798      	blx	r3
	net_buf_unref(buf);
   14670:	4620      	mov	r0, r4
   14672:	f00f f820 	bl	236b6 <net_buf_unref>
}
   14676:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14678:	2301      	movs	r3, #1
   1467a:	e7e4      	b.n	14646 <hci_event+0x5a>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1467c:	f640 131b 	movw	r3, #2331	; 0x91b
   14680:	4a06      	ldr	r2, [pc, #24]	; (1469c <hci_event+0xb0>)
   14682:	490a      	ldr	r1, [pc, #40]	; (146ac <hci_event+0xc0>)
   14684:	4807      	ldr	r0, [pc, #28]	; (146a4 <hci_event+0xb8>)
   14686:	f00b faf6 	bl	1fc76 <printk>
   1468a:	4040      	eors	r0, r0
   1468c:	f380 8811 	msr	BASEPRI, r0
   14690:	f04f 0003 	mov.w	r0, #3
   14694:	df02      	svc	2
   14696:	e7d9      	b.n	1464c <hci_event+0x60>
	for (i = 0; i < num_handlers; i++) {
   14698:	3301      	adds	r3, #1
   1469a:	e7d9      	b.n	14650 <hci_event+0x64>
   1469c:	00026bc8 	.word	0x00026bc8
   146a0:	00026bfc 	.word	0x00026bfc
   146a4:	00026c18 	.word	0x00026c18
   146a8:	00026d18 	.word	0x00026d18
   146ac:	00026c38 	.word	0x00026c38

000146b0 <hci_le_meta_event>:
{
   146b0:	b510      	push	{r4, lr}
   146b2:	4604      	mov	r4, r0
   146b4:	2101      	movs	r1, #1
   146b6:	3008      	adds	r0, #8
   146b8:	f00f f86f 	bl	2379a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   146bc:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   146be:	2300      	movs	r3, #0
   146c0:	2b06      	cmp	r3, #6
   146c2:	d80d      	bhi.n	146e0 <hci_le_meta_event+0x30>
		const struct event_handler *handler = &handlers[i];
   146c4:	4a08      	ldr	r2, [pc, #32]	; (146e8 <hci_le_meta_event+0x38>)
   146c6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   146ca:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   146ce:	4282      	cmp	r2, r0
   146d0:	d107      	bne.n	146e2 <hci_le_meta_event+0x32>
		if (buf->len < handler->min_len) {
   146d2:	89a3      	ldrh	r3, [r4, #12]
   146d4:	784a      	ldrb	r2, [r1, #1]
   146d6:	429a      	cmp	r2, r3
   146d8:	d802      	bhi.n	146e0 <hci_le_meta_event+0x30>
		handler->handler(buf);
   146da:	684b      	ldr	r3, [r1, #4]
   146dc:	4620      	mov	r0, r4
   146de:	4798      	blx	r3
}
   146e0:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
   146e2:	3301      	adds	r3, #1
   146e4:	e7ec      	b.n	146c0 <hci_le_meta_event+0x10>
   146e6:	bf00      	nop
   146e8:	00026cd0 	.word	0x00026cd0

000146ec <hci_acl>:
{
   146ec:	b570      	push	{r4, r5, r6, lr}
   146ee:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   146f0:	8983      	ldrh	r3, [r0, #12]
   146f2:	2b03      	cmp	r3, #3
   146f4:	d913      	bls.n	1471e <hci_acl+0x32>
   146f6:	2104      	movs	r1, #4
   146f8:	f104 0008 	add.w	r0, r4, #8
   146fc:	f00f f84d 	bl	2379a <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   14700:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14702:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   14704:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   14706:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1470a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1470c:	22ff      	movs	r2, #255	; 0xff
   1470e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   14710:	89a2      	ldrh	r2, [r4, #12]
   14712:	429a      	cmp	r2, r3
   14714:	d011      	beq.n	1473a <hci_acl+0x4e>
		net_buf_unref(buf);
   14716:	4620      	mov	r0, r4
   14718:	f00e ffcd 	bl	236b6 <net_buf_unref>
}
   1471c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1471e:	f240 13b5 	movw	r3, #437	; 0x1b5
   14722:	4a10      	ldr	r2, [pc, #64]	; (14764 <hci_acl+0x78>)
   14724:	4910      	ldr	r1, [pc, #64]	; (14768 <hci_acl+0x7c>)
   14726:	4811      	ldr	r0, [pc, #68]	; (1476c <hci_acl+0x80>)
   14728:	f00b faa5 	bl	1fc76 <printk>
   1472c:	4040      	eors	r0, r0
   1472e:	f380 8811 	msr	BASEPRI, r0
   14732:	f04f 0003 	mov.w	r0, #3
   14736:	df02      	svc	2
   14738:	e7dd      	b.n	146f6 <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1473a:	f001 fbb3 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   1473e:	4605      	mov	r5, r0
   14740:	b158      	cbz	r0, 1475a <hci_acl+0x6e>
	acl(buf)->index = bt_conn_index(conn);
   14742:	f001 fc3f 	bl	15fc4 <bt_conn_index>
   14746:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14748:	4632      	mov	r2, r6
   1474a:	4621      	mov	r1, r4
   1474c:	4628      	mov	r0, r5
   1474e:	f00c ffeb 	bl	21728 <bt_conn_recv>
	bt_conn_unref(conn);
   14752:	4628      	mov	r0, r5
   14754:	f00d f844 	bl	217e0 <bt_conn_unref>
   14758:	e7e0      	b.n	1471c <hci_acl+0x30>
		net_buf_unref(buf);
   1475a:	4620      	mov	r0, r4
   1475c:	f00e ffab 	bl	236b6 <net_buf_unref>
		return;
   14760:	e7dc      	b.n	1471c <hci_acl+0x30>
   14762:	bf00      	nop
   14764:	00026bc8 	.word	0x00026bc8
   14768:	00026bfc 	.word	0x00026bfc
   1476c:	00026c18 	.word	0x00026c18

00014770 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   14770:	b508      	push	{r3, lr}
   14772:	e003      	b.n	1477c <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   14774:	f7ff ff3a 	bl	145ec <hci_event>
	z_impl_k_yield();
   14778:	f007 f8a0 	bl	1b8bc <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   1477c:	f04f 32ff 	mov.w	r2, #4294967295
   14780:	f04f 33ff 	mov.w	r3, #4294967295
   14784:	4806      	ldr	r0, [pc, #24]	; (147a0 <hci_rx_thread+0x30>)
   14786:	f00e ff6a 	bl	2365e <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1478a:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   1478c:	2b01      	cmp	r3, #1
   1478e:	d0f1      	beq.n	14774 <hci_rx_thread+0x4>
   14790:	2b03      	cmp	r3, #3
   14792:	d102      	bne.n	1479a <hci_rx_thread+0x2a>
			hci_acl(buf);
   14794:	f7ff ffaa 	bl	146ec <hci_acl>
			break;
   14798:	e7ee      	b.n	14778 <hci_rx_thread+0x8>
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   1479a:	f00e ff8c 	bl	236b6 <net_buf_unref>
			break;
   1479e:	e7eb      	b.n	14778 <hci_rx_thread+0x8>
   147a0:	200003e4 	.word	0x200003e4

000147a4 <bt_hci_cmd_state_set_init>:
{
   147a4:	b510      	push	{r4, lr}
   147a6:	460c      	mov	r4, r1
	state->target = target;
   147a8:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   147aa:	604b      	str	r3, [r1, #4]
	state->val = val;
   147ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
   147b0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   147b2:	f00e fe9a 	bl	234ea <net_buf_id>
   147b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147ba:	4b02      	ldr	r3, [pc, #8]	; (147c4 <bt_hci_cmd_state_set_init+0x20>)
   147bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   147c0:	6044      	str	r4, [r0, #4]
}
   147c2:	bd10      	pop	{r4, pc}
   147c4:	200028b0 	.word	0x200028b0

000147c8 <bt_hci_cmd_create>:
{
   147c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147cc:	4682      	mov	sl, r0
   147ce:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   147d0:	f04f 32ff 	mov.w	r2, #4294967295
   147d4:	f04f 33ff 	mov.w	r3, #4294967295
   147d8:	4817      	ldr	r0, [pc, #92]	; (14838 <bt_hci_cmd_create+0x70>)
   147da:	f00e ff39 	bl	23650 <net_buf_alloc_fixed>
   147de:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   147e0:	f100 0808 	add.w	r8, r0, #8
   147e4:	2100      	movs	r1, #0
   147e6:	4640      	mov	r0, r8
   147e8:	f00e ff54 	bl	23694 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   147ec:	2700      	movs	r7, #0
   147ee:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   147f0:	4620      	mov	r0, r4
   147f2:	f00e fe7a 	bl	234ea <net_buf_id>
   147f6:	4d11      	ldr	r5, [pc, #68]	; (1483c <bt_hci_cmd_create+0x74>)
   147f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147fc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14800:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   14804:	4620      	mov	r0, r4
   14806:	f00e fe70 	bl	234ea <net_buf_id>
   1480a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1480e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14812:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   14814:	4620      	mov	r0, r4
   14816:	f00e fe68 	bl	234ea <net_buf_id>
   1481a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1481e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   14822:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   14824:	2103      	movs	r1, #3
   14826:	4640      	mov	r0, r8
   14828:	f00e ff8f 	bl	2374a <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1482c:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   14830:	7086      	strb	r6, [r0, #2]
}
   14832:	4620      	mov	r0, r4
   14834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14838:	20000b98 	.word	0x20000b98
   1483c:	200028b0 	.word	0x200028b0

00014840 <bt_hci_cmd_send_sync>:
{
   14840:	b570      	push	{r4, r5, r6, lr}
   14842:	b086      	sub	sp, #24
   14844:	4615      	mov	r5, r2
	if (!buf) {
   14846:	460c      	mov	r4, r1
   14848:	b359      	cbz	r1, 148a2 <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1484a:	2201      	movs	r2, #1
   1484c:	2100      	movs	r1, #0
   1484e:	4668      	mov	r0, sp
   14850:	f010 fae6 	bl	24e20 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14854:	4620      	mov	r0, r4
   14856:	f00e fe48 	bl	234ea <net_buf_id>
   1485a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1485e:	4b26      	ldr	r3, [pc, #152]	; (148f8 <bt_hci_cmd_send_sync+0xb8>)
   14860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14864:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14868:	4620      	mov	r0, r4
   1486a:	f00e ff4a 	bl	23702 <net_buf_ref>
   1486e:	4601      	mov	r1, r0
   14870:	4822      	ldr	r0, [pc, #136]	; (148fc <bt_hci_cmd_send_sync+0xbc>)
   14872:	f00e ff13 	bl	2369c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14876:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1487a:	2300      	movs	r3, #0
   1487c:	4668      	mov	r0, sp
   1487e:	f006 fb29 	bl	1aed4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   14882:	4606      	mov	r6, r0
   14884:	b9a8      	cbnz	r0, 148b2 <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
   14886:	4620      	mov	r0, r4
   14888:	f00e fe2f 	bl	234ea <net_buf_id>
   1488c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14890:	4b19      	ldr	r3, [pc, #100]	; (148f8 <bt_hci_cmd_send_sync+0xb8>)
   14892:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
   14896:	b9f6      	cbnz	r6, 148d6 <bt_hci_cmd_send_sync+0x96>
	if (rsp) {
   14898:	b345      	cbz	r5, 148ec <bt_hci_cmd_send_sync+0xac>
		*rsp = buf;
   1489a:	602c      	str	r4, [r5, #0]
	return 0;
   1489c:	2000      	movs	r0, #0
}
   1489e:	b006      	add	sp, #24
   148a0:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   148a2:	f7ff ff91 	bl	147c8 <bt_hci_cmd_create>
		if (!buf) {
   148a6:	4604      	mov	r4, r0
   148a8:	2800      	cmp	r0, #0
   148aa:	d1ce      	bne.n	1484a <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
   148ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   148b0:	e7f5      	b.n	1489e <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   148b2:	f240 1331 	movw	r3, #305	; 0x131
   148b6:	4a12      	ldr	r2, [pc, #72]	; (14900 <bt_hci_cmd_send_sync+0xc0>)
   148b8:	4912      	ldr	r1, [pc, #72]	; (14904 <bt_hci_cmd_send_sync+0xc4>)
   148ba:	4813      	ldr	r0, [pc, #76]	; (14908 <bt_hci_cmd_send_sync+0xc8>)
   148bc:	f00b f9db 	bl	1fc76 <printk>
   148c0:	4631      	mov	r1, r6
   148c2:	4812      	ldr	r0, [pc, #72]	; (1490c <bt_hci_cmd_send_sync+0xcc>)
   148c4:	f00b f9d7 	bl	1fc76 <printk>
   148c8:	4040      	eors	r0, r0
   148ca:	f380 8811 	msr	BASEPRI, r0
   148ce:	f04f 0003 	mov.w	r0, #3
   148d2:	df02      	svc	2
   148d4:	e7d7      	b.n	14886 <bt_hci_cmd_send_sync+0x46>
		net_buf_unref(buf);
   148d6:	4620      	mov	r0, r4
   148d8:	f00e feed 	bl	236b6 <net_buf_unref>
		switch (status) {
   148dc:	2e09      	cmp	r6, #9
   148de:	d002      	beq.n	148e6 <bt_hci_cmd_send_sync+0xa6>
			return -EIO;
   148e0:	f06f 0004 	mvn.w	r0, #4
   148e4:	e7db      	b.n	1489e <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
   148e6:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   148ea:	e7d8      	b.n	1489e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
   148ec:	4620      	mov	r0, r4
   148ee:	f00e fee2 	bl	236b6 <net_buf_unref>
	return 0;
   148f2:	2000      	movs	r0, #0
   148f4:	e7d3      	b.n	1489e <bt_hci_cmd_send_sync+0x5e>
   148f6:	bf00      	nop
   148f8:	200028b0 	.word	0x200028b0
   148fc:	200003fc 	.word	0x200003fc
   14900:	00026bc8 	.word	0x00026bc8
   14904:	00026c68 	.word	0x00026c68
   14908:	00026c18 	.word	0x00026c18
   1490c:	00026c74 	.word	0x00026c74

00014910 <common_init>:
{
   14910:	b510      	push	{r4, lr}
   14912:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14914:	4b22      	ldr	r3, [pc, #136]	; (149a0 <common_init+0x90>)
   14916:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1491a:	689b      	ldr	r3, [r3, #8]
   1491c:	f013 0f01 	tst.w	r3, #1
   14920:	d10d      	bne.n	1493e <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14922:	aa01      	add	r2, sp, #4
   14924:	2100      	movs	r1, #0
   14926:	f640 4003 	movw	r0, #3075	; 0xc03
   1492a:	f7ff ff89 	bl	14840 <bt_hci_cmd_send_sync>
		if (err) {
   1492e:	4604      	mov	r4, r0
   14930:	b968      	cbnz	r0, 1494e <common_init+0x3e>
		hci_reset_complete(rsp);
   14932:	9801      	ldr	r0, [sp, #4]
   14934:	f7ff fd46 	bl	143c4 <hci_reset_complete>
		net_buf_unref(rsp);
   14938:	9801      	ldr	r0, [sp, #4]
   1493a:	f00e febc 	bl	236b6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1493e:	aa01      	add	r2, sp, #4
   14940:	2100      	movs	r1, #0
   14942:	f241 0003 	movw	r0, #4099	; 0x1003
   14946:	f7ff ff7b 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   1494a:	4604      	mov	r4, r0
   1494c:	b110      	cbz	r0, 14954 <common_init+0x44>
}
   1494e:	4620      	mov	r0, r4
   14950:	b002      	add	sp, #8
   14952:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   14954:	9801      	ldr	r0, [sp, #4]
   14956:	f7ff fd0d 	bl	14374 <read_local_features_complete>
	net_buf_unref(rsp);
   1495a:	9801      	ldr	r0, [sp, #4]
   1495c:	f00e feab 	bl	236b6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14960:	aa01      	add	r2, sp, #4
   14962:	2100      	movs	r1, #0
   14964:	f241 0001 	movw	r0, #4097	; 0x1001
   14968:	f7ff ff6a 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   1496c:	4604      	mov	r4, r0
   1496e:	2800      	cmp	r0, #0
   14970:	d1ed      	bne.n	1494e <common_init+0x3e>
	read_local_ver_complete(rsp);
   14972:	9801      	ldr	r0, [sp, #4]
   14974:	f7ff fcca 	bl	1430c <read_local_ver_complete>
	net_buf_unref(rsp);
   14978:	9801      	ldr	r0, [sp, #4]
   1497a:	f00e fe9c 	bl	236b6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1497e:	aa01      	add	r2, sp, #4
   14980:	2100      	movs	r1, #0
   14982:	f241 0002 	movw	r0, #4098	; 0x1002
   14986:	f7ff ff5b 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   1498a:	4604      	mov	r4, r0
   1498c:	2800      	cmp	r0, #0
   1498e:	d1de      	bne.n	1494e <common_init+0x3e>
	read_supported_commands_complete(rsp);
   14990:	9801      	ldr	r0, [sp, #4]
   14992:	f7ff fcdb 	bl	1434c <read_supported_commands_complete>
	net_buf_unref(rsp);
   14996:	9801      	ldr	r0, [sp, #4]
   14998:	f00e fe8d 	bl	236b6 <net_buf_unref>
	return 0;
   1499c:	e7d7      	b.n	1494e <common_init+0x3e>
   1499e:	bf00      	nop
   149a0:	200002b0 	.word	0x200002b0

000149a4 <le_set_event_mask>:
{
   149a4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   149a6:	2108      	movs	r1, #8
   149a8:	f242 0001 	movw	r0, #8193	; 0x2001
   149ac:	f7ff ff0c 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   149b0:	b398      	cbz	r0, 14a1a <le_set_event_mask+0x76>
   149b2:	4604      	mov	r4, r0
   149b4:	2108      	movs	r1, #8
   149b6:	4408      	add	r0, r1
   149b8:	f00e fec7 	bl	2374a <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   149bc:	4b18      	ldr	r3, [pc, #96]	; (14a20 <le_set_event_mask+0x7c>)
   149be:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   149c2:	f011 0f02 	tst.w	r1, #2
   149c6:	d125      	bne.n	14a14 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   149c8:	220f      	movs	r2, #15
   149ca:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   149cc:	f011 0f20 	tst.w	r1, #32
   149d0:	d001      	beq.n	149d6 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   149d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   149d6:	4912      	ldr	r1, [pc, #72]	; (14a20 <le_set_event_mask+0x7c>)
   149d8:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   149dc:	f011 0f09 	tst.w	r1, #9
   149e0:	d001      	beq.n	149e6 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   149e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   149e6:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   149e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
   149ec:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   149ee:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   149f0:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   149f2:	0e12      	lsrs	r2, r2, #24
   149f4:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   149f6:	b29a      	uxth	r2, r3
	dst[0] = val;
   149f8:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   149fa:	0a12      	lsrs	r2, r2, #8
   149fc:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   149fe:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   14a00:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14a02:	0a13      	lsrs	r3, r2, #8
   14a04:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14a06:	2200      	movs	r2, #0
   14a08:	4621      	mov	r1, r4
   14a0a:	f242 0001 	movw	r0, #8193	; 0x2001
   14a0e:	f7ff ff17 	bl	14840 <bt_hci_cmd_send_sync>
}
   14a12:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14a14:	222f      	movs	r2, #47	; 0x2f
   14a16:	2300      	movs	r3, #0
   14a18:	e7d8      	b.n	149cc <le_set_event_mask+0x28>
		return -ENOBUFS;
   14a1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14a1e:	e7f8      	b.n	14a12 <le_set_event_mask+0x6e>
   14a20:	200002b0 	.word	0x200002b0

00014a24 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
   14a24:	4b49      	ldr	r3, [pc, #292]	; (14b4c <le_init+0x128>)
   14a26:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14a2a:	f013 0f40 	tst.w	r3, #64	; 0x40
   14a2e:	f000 8086 	beq.w	14b3e <le_init+0x11a>
{
   14a32:	b510      	push	{r4, lr}
   14a34:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14a36:	aa01      	add	r2, sp, #4
   14a38:	2100      	movs	r1, #0
   14a3a:	f242 0003 	movw	r0, #8195	; 0x2003
   14a3e:	f7ff feff 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   14a42:	4603      	mov	r3, r0
   14a44:	b110      	cbz	r0, 14a4c <le_init+0x28>
}
   14a46:	4618      	mov	r0, r3
   14a48:	b002      	add	sp, #8
   14a4a:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
   14a4c:	9801      	ldr	r0, [sp, #4]
   14a4e:	f7ff fc73 	bl	14338 <read_le_features_complete>
	net_buf_unref(rsp);
   14a52:	9801      	ldr	r0, [sp, #4]
   14a54:	f00e fe2f 	bl	236b6 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14a58:	aa01      	add	r2, sp, #4
   14a5a:	2100      	movs	r1, #0
   14a5c:	f242 0002 	movw	r0, #8194	; 0x2002
   14a60:	f7ff feee 	bl	14840 <bt_hci_cmd_send_sync>
		if (err) {
   14a64:	4603      	mov	r3, r0
   14a66:	2800      	cmp	r0, #0
   14a68:	d1ed      	bne.n	14a46 <le_init+0x22>
		le_read_buffer_size_complete(rsp);
   14a6a:	9801      	ldr	r0, [sp, #4]
   14a6c:	f7ff fcc4 	bl	143f8 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   14a70:	9801      	ldr	r0, [sp, #4]
   14a72:	f00e fe20 	bl	236b6 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14a76:	4b35      	ldr	r3, [pc, #212]	; (14b4c <le_init+0x128>)
   14a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14a7c:	f013 0f20 	tst.w	r3, #32
   14a80:	d032      	beq.n	14ae8 <le_init+0xc4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14a82:	4b32      	ldr	r3, [pc, #200]	; (14b4c <le_init+0x128>)
   14a84:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   14a88:	f013 0f08 	tst.w	r3, #8
   14a8c:	d144      	bne.n	14b18 <le_init+0xf4>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   14a8e:	4b2f      	ldr	r3, [pc, #188]	; (14b4c <le_init+0x128>)
   14a90:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14a94:	f013 0f20 	tst.w	r3, #32
   14a98:	d022      	beq.n	14ae0 <le_init+0xbc>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14a9a:	f10d 0102 	add.w	r1, sp, #2
   14a9e:	4668      	mov	r0, sp
   14aa0:	f00c f84d 	bl	20b3e <hci_le_read_max_data_len>
		if (err) {
   14aa4:	4603      	mov	r3, r0
   14aa6:	2800      	cmp	r0, #0
   14aa8:	d1cd      	bne.n	14a46 <le_init+0x22>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14aaa:	2104      	movs	r1, #4
   14aac:	f242 0024 	movw	r0, #8228	; 0x2024
   14ab0:	f7ff fe8a 	bl	147c8 <bt_hci_cmd_create>
		if (!buf) {
   14ab4:	4604      	mov	r4, r0
   14ab6:	2800      	cmp	r0, #0
   14ab8:	d03e      	beq.n	14b38 <le_init+0x114>
   14aba:	2104      	movs	r1, #4
   14abc:	3008      	adds	r0, #8
   14abe:	f00e fe44 	bl	2374a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14ac2:	f8bd 3000 	ldrh.w	r3, [sp]
   14ac6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   14ac8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   14acc:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14ace:	2200      	movs	r2, #0
   14ad0:	4621      	mov	r1, r4
   14ad2:	f242 0024 	movw	r0, #8228	; 0x2024
   14ad6:	f7ff feb3 	bl	14840 <bt_hci_cmd_send_sync>
		if (err) {
   14ada:	4603      	mov	r3, r0
   14adc:	2800      	cmp	r0, #0
   14ade:	d1b2      	bne.n	14a46 <le_init+0x22>
	return  le_set_event_mask();
   14ae0:	f7ff ff60 	bl	149a4 <le_set_event_mask>
   14ae4:	4603      	mov	r3, r0
   14ae6:	e7ae      	b.n	14a46 <le_init+0x22>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14ae8:	2102      	movs	r1, #2
   14aea:	f640 406d 	movw	r0, #3181	; 0xc6d
   14aee:	f7ff fe6b 	bl	147c8 <bt_hci_cmd_create>
		if (!buf) {
   14af2:	4604      	mov	r4, r0
   14af4:	b338      	cbz	r0, 14b46 <le_init+0x122>
   14af6:	2102      	movs	r1, #2
   14af8:	3008      	adds	r0, #8
   14afa:	f00e fe26 	bl	2374a <net_buf_simple_add>
		cp_le->le = 0x01;
   14afe:	2301      	movs	r3, #1
   14b00:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14b02:	2200      	movs	r2, #0
   14b04:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14b06:	4621      	mov	r1, r4
   14b08:	f640 406d 	movw	r0, #3181	; 0xc6d
   14b0c:	f7ff fe98 	bl	14840 <bt_hci_cmd_send_sync>
		if (err) {
   14b10:	4603      	mov	r3, r0
   14b12:	2800      	cmp	r0, #0
   14b14:	d0b5      	beq.n	14a82 <le_init+0x5e>
   14b16:	e796      	b.n	14a46 <le_init+0x22>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   14b18:	aa01      	add	r2, sp, #4
   14b1a:	2100      	movs	r1, #0
   14b1c:	f242 001c 	movw	r0, #8220	; 0x201c
   14b20:	f7ff fe8e 	bl	14840 <bt_hci_cmd_send_sync>
		if (err) {
   14b24:	4603      	mov	r3, r0
   14b26:	2800      	cmp	r0, #0
   14b28:	d18d      	bne.n	14a46 <le_init+0x22>
		le_read_supp_states_complete(rsp);
   14b2a:	9801      	ldr	r0, [sp, #4]
   14b2c:	f7ff fc2c 	bl	14388 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   14b30:	9801      	ldr	r0, [sp, #4]
   14b32:	f00e fdc0 	bl	236b6 <net_buf_unref>
   14b36:	e7aa      	b.n	14a8e <le_init+0x6a>
			return -ENOBUFS;
   14b38:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14b3c:	e783      	b.n	14a46 <le_init+0x22>
		return -ENODEV;
   14b3e:	f06f 0312 	mvn.w	r3, #18
}
   14b42:	4618      	mov	r0, r3
   14b44:	4770      	bx	lr
			return -ENOBUFS;
   14b46:	f06f 0368 	mvn.w	r3, #104	; 0x68
   14b4a:	e77c      	b.n	14a46 <le_init+0x22>
   14b4c:	200002b0 	.word	0x200002b0

00014b50 <bt_br_init>:
{
   14b50:	b510      	push	{r4, lr}
   14b52:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   14b54:	4b0b      	ldr	r3, [pc, #44]	; (14b84 <bt_br_init+0x34>)
   14b56:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14b5a:	b11b      	cbz	r3, 14b64 <bt_br_init+0x14>
		return 0;
   14b5c:	2400      	movs	r4, #0
}
   14b5e:	4620      	mov	r0, r4
   14b60:	b002      	add	sp, #8
   14b62:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14b64:	aa01      	add	r2, sp, #4
   14b66:	2100      	movs	r1, #0
   14b68:	f241 0005 	movw	r0, #4101	; 0x1005
   14b6c:	f7ff fe68 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   14b70:	4604      	mov	r4, r0
   14b72:	2800      	cmp	r0, #0
   14b74:	d1f3      	bne.n	14b5e <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   14b76:	9801      	ldr	r0, [sp, #4]
   14b78:	f7ff fc52 	bl	14420 <read_buffer_size_complete>
	net_buf_unref(rsp);
   14b7c:	9801      	ldr	r0, [sp, #4]
   14b7e:	f00e fd9a 	bl	236b6 <net_buf_unref>
	return 0;
   14b82:	e7ec      	b.n	14b5e <bt_br_init+0xe>
   14b84:	200002b0 	.word	0x200002b0

00014b88 <hci_vs_init>:
{
   14b88:	b510      	push	{r4, lr}
   14b8a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14b8c:	aa01      	add	r2, sp, #4
   14b8e:	2100      	movs	r1, #0
   14b90:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14b94:	f7ff fe54 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   14b98:	b108      	cbz	r0, 14b9e <hci_vs_init+0x16>
}
   14b9a:	b002      	add	sp, #8
   14b9c:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
   14b9e:	9801      	ldr	r0, [sp, #4]
   14ba0:	f00e fd89 	bl	236b6 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14ba4:	aa01      	add	r2, sp, #4
   14ba6:	2100      	movs	r1, #0
   14ba8:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14bac:	f7ff fe48 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   14bb0:	2800      	cmp	r0, #0
   14bb2:	d1f2      	bne.n	14b9a <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
   14bb4:	9801      	ldr	r0, [sp, #4]
   14bb6:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14bb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   14bbc:	4c0c      	ldr	r4, [pc, #48]	; (14bf0 <hci_vs_init+0x68>)
   14bbe:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   14bc2:	f00e fd78 	bl	236b6 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14bc6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   14bca:	f013 0f04 	tst.w	r3, #4
   14bce:	d0e4      	beq.n	14b9a <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14bd0:	aa01      	add	r2, sp, #4
   14bd2:	2100      	movs	r1, #0
   14bd4:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14bd8:	f7ff fe32 	bl	14840 <bt_hci_cmd_send_sync>
		if (err) {
   14bdc:	2800      	cmp	r0, #0
   14bde:	d1dc      	bne.n	14b9a <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
   14be0:	9801      	ldr	r0, [sp, #4]
   14be2:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14be4:	785a      	ldrb	r2, [r3, #1]
   14be6:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		net_buf_unref(rsp);
   14bea:	f00e fd64 	bl	236b6 <net_buf_unref>
   14bee:	e7d4      	b.n	14b9a <hci_vs_init+0x12>
   14bf0:	200002b0 	.word	0x200002b0

00014bf4 <hci_init>:
{
   14bf4:	b508      	push	{r3, lr}
	err = common_init();
   14bf6:	f7ff fe8b 	bl	14910 <common_init>
	if (err) {
   14bfa:	4603      	mov	r3, r0
   14bfc:	b108      	cbz	r0, 14c02 <hci_init+0xe>
}
   14bfe:	4618      	mov	r0, r3
   14c00:	bd08      	pop	{r3, pc}
	err = le_init();
   14c02:	f7ff ff0f 	bl	14a24 <le_init>
	if (err) {
   14c06:	4603      	mov	r3, r0
   14c08:	2800      	cmp	r0, #0
   14c0a:	d1f8      	bne.n	14bfe <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14c0c:	4b0e      	ldr	r3, [pc, #56]	; (14c48 <hci_init+0x54>)
   14c0e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14c12:	f013 0f20 	tst.w	r3, #32
   14c16:	d00e      	beq.n	14c36 <hci_init+0x42>
	else if (!bt_dev.le.acl_mtu) {
   14c18:	4b0b      	ldr	r3, [pc, #44]	; (14c48 <hci_init+0x54>)
   14c1a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   14c1e:	b183      	cbz	r3, 14c42 <hci_init+0x4e>
	err = set_event_mask();
   14c20:	f00b ffa7 	bl	20b72 <set_event_mask>
	if (err) {
   14c24:	4603      	mov	r3, r0
   14c26:	2800      	cmp	r0, #0
   14c28:	d1e9      	bne.n	14bfe <hci_init+0xa>
	hci_vs_init();
   14c2a:	f7ff ffad 	bl	14b88 <hci_vs_init>
	err = bt_id_init();
   14c2e:	f000 fd77 	bl	15720 <bt_id_init>
   14c32:	4603      	mov	r3, r0
	if (err) {
   14c34:	e7e3      	b.n	14bfe <hci_init+0xa>
		err = bt_br_init();
   14c36:	f7ff ff8b 	bl	14b50 <bt_br_init>
		if (err) {
   14c3a:	4603      	mov	r3, r0
   14c3c:	2800      	cmp	r0, #0
   14c3e:	d0ef      	beq.n	14c20 <hci_init+0x2c>
   14c40:	e7dd      	b.n	14bfe <hci_init+0xa>
		return -EIO;
   14c42:	f06f 0304 	mvn.w	r3, #4
   14c46:	e7da      	b.n	14bfe <hci_init+0xa>
   14c48:	200002b0 	.word	0x200002b0

00014c4c <bt_send>:
{
   14c4c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   14c4e:	4b03      	ldr	r3, [pc, #12]	; (14c5c <bt_send+0x10>)
   14c50:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14c54:	691b      	ldr	r3, [r3, #16]
   14c56:	4798      	blx	r3
}
   14c58:	bd08      	pop	{r3, pc}
   14c5a:	bf00      	nop
   14c5c:	200002b0 	.word	0x200002b0

00014c60 <bt_hci_cmd_send>:
{
   14c60:	b538      	push	{r3, r4, r5, lr}
   14c62:	4604      	mov	r4, r0
	if (!buf) {
   14c64:	460d      	mov	r5, r1
   14c66:	b151      	cbz	r1, 14c7e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14c68:	f640 4335 	movw	r3, #3125	; 0xc35
   14c6c:	429c      	cmp	r4, r3
   14c6e:	d00e      	beq.n	14c8e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14c70:	4629      	mov	r1, r5
   14c72:	480c      	ldr	r0, [pc, #48]	; (14ca4 <bt_hci_cmd_send+0x44>)
   14c74:	f00e fd12 	bl	2369c <net_buf_put>
	return 0;
   14c78:	2400      	movs	r4, #0
}
   14c7a:	4620      	mov	r0, r4
   14c7c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14c7e:	f7ff fda3 	bl	147c8 <bt_hci_cmd_create>
		if (!buf) {
   14c82:	4605      	mov	r5, r0
   14c84:	2800      	cmp	r0, #0
   14c86:	d1ef      	bne.n	14c68 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   14c88:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14c8c:	e7f5      	b.n	14c7a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   14c8e:	4628      	mov	r0, r5
   14c90:	f7ff ffdc 	bl	14c4c <bt_send>
		if (err) {
   14c94:	4604      	mov	r4, r0
   14c96:	2800      	cmp	r0, #0
   14c98:	d0ef      	beq.n	14c7a <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
   14c9a:	4628      	mov	r0, r5
   14c9c:	f00e fd0b 	bl	236b6 <net_buf_unref>
		return err;
   14ca0:	e7eb      	b.n	14c7a <bt_hci_cmd_send+0x1a>
   14ca2:	bf00      	nop
   14ca4:	200003fc 	.word	0x200003fc

00014ca8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   14ca8:	7a83      	ldrb	r3, [r0, #10]
   14caa:	2b07      	cmp	r3, #7
   14cac:	d000      	beq.n	14cb0 <conn_auto_initiate+0x8>
   14cae:	4770      	bx	lr
{
   14cb0:	b530      	push	{r4, r5, lr}
   14cb2:	b085      	sub	sp, #20
   14cb4:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14cb6:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14cb8:	f3bf 8f5b 	dmb	ish
   14cbc:	6843      	ldr	r3, [r0, #4]
   14cbe:	f3bf 8f5b 	dmb	ish
   14cc2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   14cc6:	d10b      	bne.n	14ce0 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14cc8:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14cca:	b12b      	cbz	r3, 14cd8 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   14ccc:	4b25      	ldr	r3, [pc, #148]	; (14d64 <conn_auto_initiate+0xbc>)
   14cce:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14cd2:	f013 0f08 	tst.w	r3, #8
   14cd6:	d003      	beq.n	14ce0 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   14cd8:	4620      	mov	r0, r4
   14cda:	f00b fff0 	bl	20cbe <hci_le_read_remote_features>
		if (!err) {
   14cde:	b1d0      	cbz	r0, 14d16 <conn_auto_initiate+0x6e>
   14ce0:	f3bf 8f5b 	dmb	ish
   14ce4:	6863      	ldr	r3, [r4, #4]
   14ce6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14cea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   14cee:	d105      	bne.n	14cfc <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   14cf0:	4b1c      	ldr	r3, [pc, #112]	; (14d64 <conn_auto_initiate+0xbc>)
   14cf2:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   14cf6:	f013 0f01 	tst.w	r3, #1
   14cfa:	d10e      	bne.n	14d1a <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   14cfc:	4b19      	ldr	r3, [pc, #100]	; (14d64 <conn_auto_initiate+0xbc>)
   14cfe:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   14d02:	f013 0f20 	tst.w	r3, #32
   14d06:	d006      	beq.n	14d16 <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14d08:	4b16      	ldr	r3, [pc, #88]	; (14d64 <conn_auto_initiate+0xbc>)
   14d0a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14d0e:	689b      	ldr	r3, [r3, #8]
   14d10:	f013 0f02 	tst.w	r3, #2
   14d14:	d117      	bne.n	14d46 <conn_auto_initiate+0x9e>
}
   14d16:	b005      	add	sp, #20
   14d18:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   14d1a:	2100      	movs	r1, #0
   14d1c:	9100      	str	r1, [sp, #0]
   14d1e:	2302      	movs	r3, #2
   14d20:	461a      	mov	r2, r3
   14d22:	4620      	mov	r0, r4
   14d24:	f00b ffa7 	bl	20c76 <bt_le_set_phy>
		if (!err) {
   14d28:	2800      	cmp	r0, #0
   14d2a:	d1e7      	bne.n	14cfc <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14d2c:	f3bf 8f5b 	dmb	ish
   14d30:	e855 3f00 	ldrex	r3, [r5]
   14d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14d38:	e845 3200 	strex	r2, r3, [r5]
   14d3c:	2a00      	cmp	r2, #0
   14d3e:	d1f7      	bne.n	14d30 <conn_auto_initiate+0x88>
   14d40:	f3bf 8f5b 	dmb	ish
			return;
   14d44:	e7e7      	b.n	14d16 <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14d46:	f10d 010e 	add.w	r1, sp, #14
   14d4a:	a803      	add	r0, sp, #12
   14d4c:	f00b fef7 	bl	20b3e <hci_le_read_max_data_len>
			if (!err) {
   14d50:	2800      	cmp	r0, #0
   14d52:	d1e0      	bne.n	14d16 <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   14d54:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   14d58:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14d5c:	4620      	mov	r0, r4
   14d5e:	f00b ff6e 	bl	20c3e <bt_le_set_data_len>
		}
   14d62:	e7d8      	b.n	14d16 <conn_auto_initiate+0x6e>
   14d64:	200002b0 	.word	0x200002b0

00014d68 <bt_hci_le_enh_conn_complete>:
{
   14d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d6c:	b084      	sub	sp, #16
   14d6e:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14d70:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   14d74:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   14d78:	4640      	mov	r0, r8
   14d7a:	f7ff fab1 	bl	142e0 <conn_handle_is_disconnected>
   14d7e:	4606      	mov	r6, r0
	if (evt->status) {
   14d80:	7820      	ldrb	r0, [r4, #0]
   14d82:	b120      	cbz	r0, 14d8e <bt_hci_le_enh_conn_complete+0x26>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14d84:	283c      	cmp	r0, #60	; 0x3c
   14d86:	d156      	bne.n	14e36 <bt_hci_le_enh_conn_complete+0xce>
			le_conn_complete_adv_timeout();
   14d88:	f00b fdc7 	bl	2091a <le_conn_complete_adv_timeout>
			return;
   14d8c:	e053      	b.n	14e36 <bt_hci_le_enh_conn_complete+0xce>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14d8e:	7923      	ldrb	r3, [r4, #4]
   14d90:	3b02      	subs	r3, #2
   14d92:	b2db      	uxtb	r3, r3
   14d94:	2b01      	cmp	r3, #1
   14d96:	d951      	bls.n	14e3c <bt_hci_le_enh_conn_complete+0xd4>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14d98:	78e3      	ldrb	r3, [r4, #3]
   14d9a:	2b01      	cmp	r3, #1
   14d9c:	d068      	beq.n	14e70 <bt_hci_le_enh_conn_complete+0x108>
				bt_lookup_id_addr(id, &evt->peer_addr));
   14d9e:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   14da0:	4629      	mov	r1, r5
   14da2:	f00c f8c4 	bl	20f2e <bt_lookup_id_addr>
   14da6:	4603      	mov	r3, r0
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
   14da8:	6800      	ldr	r0, [r0, #0]
   14daa:	9000      	str	r0, [sp, #0]
   14dac:	889a      	ldrh	r2, [r3, #4]
   14dae:	799b      	ldrb	r3, [r3, #6]
   14db0:	f8ad 2004 	strh.w	r2, [sp, #4]
   14db4:	f88d 3006 	strb.w	r3, [sp, #6]
   14db8:	6860      	ldr	r0, [r4, #4]
   14dba:	9002      	str	r0, [sp, #8]
   14dbc:	8922      	ldrh	r2, [r4, #8]
   14dbe:	7aa3      	ldrb	r3, [r4, #10]
   14dc0:	f8ad 200c 	strh.w	r2, [sp, #12]
   14dc4:	f88d 300e 	strb.w	r3, [sp, #14]
	conn = find_pending_connect(evt->role, &id_addr);
   14dc8:	4669      	mov	r1, sp
   14dca:	78e0      	ldrb	r0, [r4, #3]
   14dcc:	f7ff fb3e 	bl	1444c <find_pending_connect>
   14dd0:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   14dd2:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14dd4:	2b01      	cmp	r3, #1
   14dd6:	d04f      	beq.n	14e78 <bt_hci_le_enh_conn_complete+0x110>
	if (!conn) {
   14dd8:	2d00      	cmp	r5, #0
   14dda:	d060      	beq.n	14e9e <bt_hci_le_enh_conn_complete+0x136>
	conn->handle = handle;
   14ddc:	462b      	mov	r3, r5
   14dde:	f823 7b88 	strh.w	r7, [r3], #136
   14de2:	9800      	ldr	r0, [sp, #0]
   14de4:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   14de8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   14dec:	f89d 2006 	ldrb.w	r2, [sp, #6]
   14df0:	8099      	strh	r1, [r3, #4]
   14df2:	719a      	strb	r2, [r3, #6]
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14df4:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   14df8:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14dfc:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   14e00:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14e04:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   14e08:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   14e0c:	78e3      	ldrb	r3, [r4, #3]
   14e0e:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   14e10:	2200      	movs	r2, #0
   14e12:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14e14:	2b01      	cmp	r3, #1
   14e16:	d047      	beq.n	14ea8 <bt_hci_le_enh_conn_complete+0x140>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14e18:	2107      	movs	r1, #7
   14e1a:	4628      	mov	r0, r5
   14e1c:	f001 f84c 	bl	15eb8 <bt_conn_set_state>
	if (is_disconnected) {
   14e20:	2e00      	cmp	r6, #0
   14e22:	d166      	bne.n	14ef2 <bt_hci_le_enh_conn_complete+0x18a>
	bt_conn_connected(conn);
   14e24:	4628      	mov	r0, r5
   14e26:	f00c fd24 	bl	21872 <bt_conn_connected>
	conn_auto_initiate(conn);
   14e2a:	4628      	mov	r0, r5
   14e2c:	f7ff ff3c 	bl	14ca8 <conn_auto_initiate>
	bt_conn_unref(conn);
   14e30:	4628      	mov	r0, r5
   14e32:	f00c fcd5 	bl	217e0 <bt_conn_unref>
}
   14e36:	b004      	add	sp, #16
   14e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14e3c:	4623      	mov	r3, r4
   14e3e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   14e42:	9000      	str	r0, [sp, #0]
   14e44:	889a      	ldrh	r2, [r3, #4]
   14e46:	799b      	ldrb	r3, [r3, #6]
   14e48:	f8ad 2004 	strh.w	r2, [sp, #4]
   14e4c:	f88d 3006 	strb.w	r3, [sp, #6]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14e50:	b2c0      	uxtb	r0, r0
   14e52:	3802      	subs	r0, #2
   14e54:	f88d 0000 	strb.w	r0, [sp]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14e58:	4623      	mov	r3, r4
	memcpy(dst, src, sizeof(*dst));
   14e5a:	f853 2f11 	ldr.w	r2, [r3, #17]!
   14e5e:	f8cd 2009 	str.w	r2, [sp, #9]
   14e62:	889b      	ldrh	r3, [r3, #4]
   14e64:	f8ad 300d 	strh.w	r3, [sp, #13]
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14e68:	2301      	movs	r3, #1
   14e6a:	f88d 3008 	strb.w	r3, [sp, #8]
   14e6e:	e7ab      	b.n	14dc8 <bt_hci_le_enh_conn_complete+0x60>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14e70:	4b22      	ldr	r3, [pc, #136]	; (14efc <bt_hci_le_enh_conn_complete+0x194>)
   14e72:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14e76:	e792      	b.n	14d9e <bt_hci_le_enh_conn_complete+0x36>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14e78:	f000 fd3c 	bl	158f4 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   14e7c:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14e80:	f3bf 8f5b 	dmb	ish
   14e84:	e853 2f00 	ldrex	r2, [r3]
   14e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14e8c:	e843 2100 	strex	r1, r2, [r3]
   14e90:	2900      	cmp	r1, #0
   14e92:	d1f7      	bne.n	14e84 <bt_hci_le_enh_conn_complete+0x11c>
   14e94:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   14e98:	f00c f9ff 	bl	2129a <bt_le_lim_adv_cancel_timeout>
   14e9c:	e79c      	b.n	14dd8 <bt_hci_le_enh_conn_complete+0x70>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14e9e:	211f      	movs	r1, #31
   14ea0:	4640      	mov	r0, r8
   14ea2:	f00b fe88 	bl	20bb6 <bt_hci_disconnect>
		return;
   14ea6:	e7c6      	b.n	14e36 <bt_hci_le_enh_conn_complete+0xce>
   14ea8:	9802      	ldr	r0, [sp, #8]
   14eaa:	f8c5 008f 	str.w	r0, [r5, #143]	; 0x8f
   14eae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14eb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14eb6:	f8a5 2093 	strh.w	r2, [r5, #147]	; 0x93
   14eba:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14ebe:	f000 fd19 	bl	158f4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   14ec2:	7a2b      	ldrb	r3, [r5, #8]
   14ec4:	4a0d      	ldr	r2, [pc, #52]	; (14efc <bt_hci_le_enh_conn_complete+0x194>)
   14ec6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   14eca:	18d1      	adds	r1, r2, r3
   14ecc:	58d3      	ldr	r3, [r2, r3]
   14ece:	f8c5 3096 	str.w	r3, [r5, #150]	; 0x96
   14ed2:	8888      	ldrh	r0, [r1, #4]
   14ed4:	798b      	ldrb	r3, [r1, #6]
   14ed6:	f8a5 009a 	strh.w	r0, [r5, #154]	; 0x9a
   14eda:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   14ede:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   14ee2:	2200      	movs	r2, #0
   14ee4:	f001 0340 	and.w	r3, r1, #64	; 0x40
   14ee8:	4313      	orrs	r3, r2
   14eea:	d095      	beq.n	14e18 <bt_hci_le_enh_conn_complete+0xb0>
			bt_le_adv_resume();
   14eec:	f00c fa12 	bl	21314 <bt_le_adv_resume>
   14ef0:	e792      	b.n	14e18 <bt_hci_le_enh_conn_complete+0xb0>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14ef2:	2101      	movs	r1, #1
   14ef4:	4628      	mov	r0, r5
   14ef6:	f000 ffdf 	bl	15eb8 <bt_conn_set_state>
   14efa:	e793      	b.n	14e24 <bt_hci_le_enh_conn_complete+0xbc>
   14efc:	200002b0 	.word	0x200002b0

00014f00 <send_cmd>:
{
   14f00:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14f02:	2200      	movs	r2, #0
   14f04:	2300      	movs	r3, #0
   14f06:	4826      	ldr	r0, [pc, #152]	; (14fa0 <send_cmd+0xa0>)
   14f08:	f00e fba9 	bl	2365e <net_buf_get>
	BT_ASSERT(buf);
   14f0c:	4604      	mov	r4, r0
   14f0e:	b1d8      	cbz	r0, 14f48 <send_cmd+0x48>
   14f10:	4d24      	ldr	r5, [pc, #144]	; (14fa4 <send_cmd+0xa4>)
   14f12:	f04f 32ff 	mov.w	r2, #4294967295
   14f16:	f04f 33ff 	mov.w	r3, #4294967295
   14f1a:	f505 708c 	add.w	r0, r5, #280	; 0x118
   14f1e:	f005 ffd9 	bl	1aed4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14f22:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   14f26:	b120      	cbz	r0, 14f32 <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
   14f28:	f00e fbc5 	bl	236b6 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14f2c:	2200      	movs	r2, #0
   14f2e:	f8c5 2130 	str.w	r2, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14f32:	4620      	mov	r0, r4
   14f34:	f00e fbe5 	bl	23702 <net_buf_ref>
   14f38:	4b1a      	ldr	r3, [pc, #104]	; (14fa4 <send_cmd+0xa4>)
   14f3a:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   14f3e:	4620      	mov	r0, r4
   14f40:	f7ff fe84 	bl	14c4c <bt_send>
	if (err) {
   14f44:	b970      	cbnz	r0, 14f64 <send_cmd+0x64>
}
   14f46:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   14f48:	f640 132a 	movw	r3, #2346	; 0x92a
   14f4c:	4a16      	ldr	r2, [pc, #88]	; (14fa8 <send_cmd+0xa8>)
   14f4e:	4917      	ldr	r1, [pc, #92]	; (14fac <send_cmd+0xac>)
   14f50:	4817      	ldr	r0, [pc, #92]	; (14fb0 <send_cmd+0xb0>)
   14f52:	f00a fe90 	bl	1fc76 <printk>
   14f56:	4040      	eors	r0, r0
   14f58:	f380 8811 	msr	BASEPRI, r0
   14f5c:	f04f 0003 	mov.w	r0, #3
   14f60:	df02      	svc	2
   14f62:	e7d5      	b.n	14f10 <send_cmd+0x10>
	z_impl_k_sem_give(sem);
   14f64:	4d0f      	ldr	r5, [pc, #60]	; (14fa4 <send_cmd+0xa4>)
   14f66:	f505 708c 	add.w	r0, r5, #280	; 0x118
   14f6a:	f005 ff8b 	bl	1ae84 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14f6e:	4620      	mov	r0, r4
   14f70:	f00e fabb 	bl	234ea <net_buf_id>
   14f74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14f78:	4b0e      	ldr	r3, [pc, #56]	; (14fb4 <send_cmd+0xb4>)
   14f7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14f7e:	4622      	mov	r2, r4
   14f80:	211f      	movs	r1, #31
   14f82:	8840      	ldrh	r0, [r0, #2]
   14f84:	f7ff fa88 	bl	14498 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   14f88:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   14f8c:	f00e fb93 	bl	236b6 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14f90:	2300      	movs	r3, #0
   14f92:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   14f96:	4620      	mov	r0, r4
   14f98:	f00e fb8d 	bl	236b6 <net_buf_unref>
   14f9c:	e7d3      	b.n	14f46 <send_cmd+0x46>
   14f9e:	bf00      	nop
   14fa0:	200003fc 	.word	0x200003fc
   14fa4:	200002b0 	.word	0x200002b0
   14fa8:	00026bc8 	.word	0x00026bc8
   14fac:	00026c94 	.word	0x00026c94
   14fb0:	00026c18 	.word	0x00026c18
   14fb4:	200028b0 	.word	0x200028b0

00014fb8 <hci_tx_thread>:
{
   14fb8:	b538      	push	{r3, r4, r5, lr}
   14fba:	e005      	b.n	14fc8 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   14fbc:	4621      	mov	r1, r4
   14fbe:	4813      	ldr	r0, [pc, #76]	; (1500c <hci_tx_thread+0x54>)
   14fc0:	f00b ff8b 	bl	20eda <process_events>
	z_impl_k_yield();
   14fc4:	f006 fc7a 	bl	1b8bc <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   14fc8:	4d10      	ldr	r5, [pc, #64]	; (1500c <hci_tx_thread+0x54>)
   14fca:	68eb      	ldr	r3, [r5, #12]
   14fcc:	f36f 3352 	bfc	r3, #13, #6
   14fd0:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14fd2:	f105 0014 	add.w	r0, r5, #20
   14fd6:	f000 ff43 	bl	15e60 <bt_conn_prepare_events>
   14fda:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   14fdc:	f04f 32ff 	mov.w	r2, #4294967295
   14fe0:	f04f 33ff 	mov.w	r3, #4294967295
   14fe4:	4621      	mov	r1, r4
   14fe6:	4628      	mov	r0, r5
   14fe8:	f006 ffc0 	bl	1bf6c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14fec:	2800      	cmp	r0, #0
   14fee:	d0e5      	beq.n	14fbc <hci_tx_thread+0x4>
   14ff0:	f640 1393 	movw	r3, #2451	; 0x993
   14ff4:	4a06      	ldr	r2, [pc, #24]	; (15010 <hci_tx_thread+0x58>)
   14ff6:	4907      	ldr	r1, [pc, #28]	; (15014 <hci_tx_thread+0x5c>)
   14ff8:	4807      	ldr	r0, [pc, #28]	; (15018 <hci_tx_thread+0x60>)
   14ffa:	f00a fe3c 	bl	1fc76 <printk>
   14ffe:	4040      	eors	r0, r0
   15000:	f380 8811 	msr	BASEPRI, r0
   15004:	f04f 0003 	mov.w	r0, #3
   15008:	df02      	svc	2
   1500a:	e7d7      	b.n	14fbc <hci_tx_thread+0x4>
   1500c:	2000078c 	.word	0x2000078c
   15010:	00026bc8 	.word	0x00026bc8
   15014:	00026c68 	.word	0x00026c68
   15018:	00026c18 	.word	0x00026c18

0001501c <hci_event_prio>:
{
   1501c:	b570      	push	{r4, r5, r6, lr}
   1501e:	b082      	sub	sp, #8
   15020:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15022:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15026:	4628      	mov	r0, r5
   15028:	f00e fbc7 	bl	237ba <net_buf_simple_headroom>
   1502c:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   15030:	89a3      	ldrh	r3, [r4, #12]
   15032:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15036:	2b01      	cmp	r3, #1
   15038:	d915      	bls.n	15066 <hci_event_prio+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1503a:	2102      	movs	r1, #2
   1503c:	4628      	mov	r0, r5
   1503e:	f00e fbac 	bl	2379a <net_buf_simple_pull_mem>
   15042:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15044:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   15046:	3b05      	subs	r3, #5
   15048:	2b15      	cmp	r3, #21
   1504a:	d81c      	bhi.n	15086 <hci_event_prio+0x6a>
   1504c:	e8df f003 	tbb	[pc, r3]
   15050:	1b1b1b19 	.word	0x1b1b1b19
   15054:	1b1b1b1b 	.word	0x1b1b1b1b
   15058:	1b3e3e1b 	.word	0x1b3e3e1b
   1505c:	1b3e1b1b 	.word	0x1b3e1b1b
   15060:	1b1b1b1b 	.word	0x1b1b1b1b
   15064:	3e1b      	.short	0x3e1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15066:	f640 5327 	movw	r3, #3367	; 0xd27
   1506a:	4a23      	ldr	r2, [pc, #140]	; (150f8 <hci_event_prio+0xdc>)
   1506c:	4923      	ldr	r1, [pc, #140]	; (150fc <hci_event_prio+0xe0>)
   1506e:	4824      	ldr	r0, [pc, #144]	; (15100 <hci_event_prio+0xe4>)
   15070:	f00a fe01 	bl	1fc76 <printk>
   15074:	4040      	eors	r0, r0
   15076:	f380 8811 	msr	BASEPRI, r0
   1507a:	f04f 0003 	mov.w	r0, #3
   1507e:	df02      	svc	2
   15080:	e7db      	b.n	1503a <hci_event_prio+0x1e>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15082:	2603      	movs	r6, #3
   15084:	e000      	b.n	15088 <hci_event_prio+0x6c>
		return BT_HCI_EVT_FLAG_RECV;
   15086:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15088:	f016 0f01 	tst.w	r6, #1
   1508c:	d020      	beq.n	150d0 <hci_event_prio+0xb4>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1508e:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   15090:	2300      	movs	r3, #0
   15092:	2b04      	cmp	r3, #4
   15094:	d80d      	bhi.n	150b2 <hci_event_prio+0x96>
		const struct event_handler *handler = &handlers[i];
   15096:	4a1b      	ldr	r2, [pc, #108]	; (15104 <hci_event_prio+0xe8>)
   15098:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   1509c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   150a0:	4290      	cmp	r0, r2
   150a2:	d123      	bne.n	150ec <hci_event_prio+0xd0>
		if (buf->len < handler->min_len) {
   150a4:	89a2      	ldrh	r2, [r4, #12]
   150a6:	784b      	ldrb	r3, [r1, #1]
   150a8:	429a      	cmp	r2, r3
   150aa:	d302      	bcc.n	150b2 <hci_event_prio+0x96>
		handler->handler(buf);
   150ac:	684b      	ldr	r3, [r1, #4]
   150ae:	4620      	mov	r0, r4
   150b0:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   150b2:	f016 0f02 	tst.w	r6, #2
   150b6:	d01b      	beq.n	150f0 <hci_event_prio+0xd4>
	buf->data = buf->__buf + state->offset;
   150b8:	6923      	ldr	r3, [r4, #16]
   150ba:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   150be:	4413      	add	r3, r2
   150c0:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   150c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   150c6:	81a3      	strh	r3, [r4, #12]
}
   150c8:	b002      	add	sp, #8
   150ca:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   150cc:	2601      	movs	r6, #1
   150ce:	e7db      	b.n	15088 <hci_event_prio+0x6c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   150d0:	f640 532b 	movw	r3, #3371	; 0xd2b
   150d4:	4a08      	ldr	r2, [pc, #32]	; (150f8 <hci_event_prio+0xdc>)
   150d6:	490c      	ldr	r1, [pc, #48]	; (15108 <hci_event_prio+0xec>)
   150d8:	4809      	ldr	r0, [pc, #36]	; (15100 <hci_event_prio+0xe4>)
   150da:	f00a fdcc 	bl	1fc76 <printk>
   150de:	4040      	eors	r0, r0
   150e0:	f380 8811 	msr	BASEPRI, r0
   150e4:	f04f 0003 	mov.w	r0, #3
   150e8:	df02      	svc	2
   150ea:	e7d0      	b.n	1508e <hci_event_prio+0x72>
	for (i = 0; i < num_handlers; i++) {
   150ec:	3301      	adds	r3, #1
   150ee:	e7d0      	b.n	15092 <hci_event_prio+0x76>
		net_buf_unref(buf);
   150f0:	4620      	mov	r0, r4
   150f2:	f00e fae0 	bl	236b6 <net_buf_unref>
}
   150f6:	e7e7      	b.n	150c8 <hci_event_prio+0xac>
   150f8:	00026bc8 	.word	0x00026bc8
   150fc:	00026bfc 	.word	0x00026bfc
   15100:	00026c18 	.word	0x00026c18
   15104:	00026d38 	.word	0x00026d38
   15108:	00026c98 	.word	0x00026c98

0001510c <bt_recv>:
{
   1510c:	b538      	push	{r3, r4, r5, lr}
   1510e:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15110:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15112:	2d01      	cmp	r5, #1
   15114:	d007      	beq.n	15126 <bt_recv+0x1a>
   15116:	2d03      	cmp	r5, #3
   15118:	d12c      	bne.n	15174 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   1511a:	4601      	mov	r1, r0
   1511c:	4818      	ldr	r0, [pc, #96]	; (15180 <bt_recv+0x74>)
   1511e:	f00e fabd 	bl	2369c <net_buf_put>
		return 0;
   15122:	2000      	movs	r0, #0
}
   15124:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   15126:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15128:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   1512a:	3b05      	subs	r3, #5
   1512c:	2b15      	cmp	r3, #21
   1512e:	d80e      	bhi.n	1514e <bt_recv+0x42>
   15130:	e8df f003 	tbb	[pc, r3]
   15134:	0d0d0d0b 	.word	0x0d0d0d0b
   15138:	0d0d0d0d 	.word	0x0d0d0d0d
   1513c:	0d0e0e0d 	.word	0x0d0e0e0d
   15140:	0d0e0d0d 	.word	0x0d0e0d0d
   15144:	0d0d0d0d 	.word	0x0d0d0d0d
   15148:	0e0d      	.short	0x0e0d
   1514a:	2503      	movs	r5, #3
   1514c:	e000      	b.n	15150 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   1514e:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15150:	f015 0f01 	tst.w	r5, #1
   15154:	d104      	bne.n	15160 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15156:	f015 0f02 	tst.w	r5, #2
   1515a:	d105      	bne.n	15168 <bt_recv+0x5c>
		return 0;
   1515c:	2000      	movs	r0, #0
   1515e:	e7e1      	b.n	15124 <bt_recv+0x18>
			hci_event_prio(buf);
   15160:	4620      	mov	r0, r4
   15162:	f7ff ff5b 	bl	1501c <hci_event_prio>
   15166:	e7f6      	b.n	15156 <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   15168:	4621      	mov	r1, r4
   1516a:	4805      	ldr	r0, [pc, #20]	; (15180 <bt_recv+0x74>)
   1516c:	f00e fa96 	bl	2369c <net_buf_put>
		return 0;
   15170:	2000      	movs	r0, #0
   15172:	e7d7      	b.n	15124 <bt_recv+0x18>
		net_buf_unref(buf);
   15174:	f00e fa9f 	bl	236b6 <net_buf_unref>
		return -EINVAL;
   15178:	f06f 0015 	mvn.w	r0, #21
   1517c:	e7d2      	b.n	15124 <bt_recv+0x18>
   1517e:	bf00      	nop
   15180:	200003e4 	.word	0x200003e4

00015184 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15184:	4b0a      	ldr	r3, [pc, #40]	; (151b0 <bt_hci_driver_register+0x2c>)
   15186:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1518a:	b943      	cbnz	r3, 1519e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1518c:	68c3      	ldr	r3, [r0, #12]
   1518e:	b14b      	cbz	r3, 151a4 <bt_hci_driver_register+0x20>
   15190:	6903      	ldr	r3, [r0, #16]
   15192:	b153      	cbz	r3, 151aa <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15194:	4b06      	ldr	r3, [pc, #24]	; (151b0 <bt_hci_driver_register+0x2c>)
   15196:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   1519a:	2000      	movs	r0, #0
   1519c:	4770      	bx	lr
		return -EALREADY;
   1519e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   151a2:	4770      	bx	lr
		return -EINVAL;
   151a4:	f06f 0015 	mvn.w	r0, #21
   151a8:	4770      	bx	lr
   151aa:	f06f 0015 	mvn.w	r0, #21
}
   151ae:	4770      	bx	lr
   151b0:	200002b0 	.word	0x200002b0

000151b4 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   151b4:	4b06      	ldr	r3, [pc, #24]	; (151d0 <bt_finalize_init+0x1c>)
   151b6:	f3bf 8f5b 	dmb	ish
   151ba:	e853 2f00 	ldrex	r2, [r3]
   151be:	f042 0202 	orr.w	r2, r2, #2
   151c2:	e843 2100 	strex	r1, r2, [r3]
   151c6:	2900      	cmp	r1, #0
   151c8:	d1f7      	bne.n	151ba <bt_finalize_init+0x6>
   151ca:	f3bf 8f5b 	dmb	ish
}
   151ce:	4770      	bx	lr
   151d0:	2000037c 	.word	0x2000037c

000151d4 <init_work>:
{
   151d4:	b508      	push	{r3, lr}
	err = bt_init();
   151d6:	f00b fe99 	bl	20f0c <bt_init>
	if (ready_cb) {
   151da:	4b02      	ldr	r3, [pc, #8]	; (151e4 <init_work+0x10>)
   151dc:	681b      	ldr	r3, [r3, #0]
   151de:	b103      	cbz	r3, 151e2 <init_work+0xe>
		ready_cb(err);
   151e0:	4798      	blx	r3
}
   151e2:	bd08      	pop	{r3, pc}
   151e4:	200028cc 	.word	0x200028cc

000151e8 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   151e8:	b570      	push	{r4, r5, r6, lr}
   151ea:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   151ec:	f7f7 f8f8 	bl	c3e0 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   151f0:	2841      	cmp	r0, #65	; 0x41
   151f2:	d813      	bhi.n	1521c <bt_set_name+0x34>
   151f4:	4604      	mov	r4, r0
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   151f6:	4629      	mov	r1, r5
   151f8:	480a      	ldr	r0, [pc, #40]	; (15224 <bt_set_name+0x3c>)
   151fa:	f7f7 f8e7 	bl	c3cc <strcmp>
   151fe:	b900      	cbnz	r0, 15202 <bt_set_name+0x1a>

	return 0;
#else
	return -ENOMEM;
#endif
}
   15200:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   15202:	4e09      	ldr	r6, [pc, #36]	; (15228 <bt_set_name+0x40>)
   15204:	2348      	movs	r3, #72	; 0x48
   15206:	4622      	mov	r2, r4
   15208:	4629      	mov	r1, r5
   1520a:	f506 70b4 	add.w	r0, r6, #360	; 0x168
   1520e:	f010 fae0 	bl	257d2 <__strncpy_chk>
	bt_dev.name[len] = '\0';
   15212:	4434      	add	r4, r6
   15214:	2000      	movs	r0, #0
   15216:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
	return 0;
   1521a:	e7f1      	b.n	15200 <bt_set_name+0x18>
		return -ENOMEM;
   1521c:	f06f 000b 	mvn.w	r0, #11
   15220:	e7ee      	b.n	15200 <bt_set_name+0x18>
   15222:	bf00      	nop
   15224:	20000418 	.word	0x20000418
   15228:	200002b0 	.word	0x200002b0

0001522c <bt_enable>:
{
   1522c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15230:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   15232:	4b31      	ldr	r3, [pc, #196]	; (152f8 <bt_enable+0xcc>)
   15234:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   15238:	2b00      	cmp	r3, #0
   1523a:	d057      	beq.n	152ec <bt_enable+0xc0>
   1523c:	4605      	mov	r5, r0
   1523e:	4b2f      	ldr	r3, [pc, #188]	; (152fc <bt_enable+0xd0>)
   15240:	f3bf 8f5b 	dmb	ish
   15244:	e853 2f00 	ldrex	r2, [r3]
   15248:	f042 0101 	orr.w	r1, r2, #1
   1524c:	e843 1000 	strex	r0, r1, [r3]
   15250:	2800      	cmp	r0, #0
   15252:	d1f7      	bne.n	15244 <bt_enable+0x18>
   15254:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15258:	f012 0f01 	tst.w	r2, #1
   1525c:	d149      	bne.n	152f2 <bt_enable+0xc6>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   1525e:	4828      	ldr	r0, [pc, #160]	; (15300 <bt_enable+0xd4>)
   15260:	f7ff ffc2 	bl	151e8 <bt_set_name>
	ready_cb = cb;
   15264:	4b27      	ldr	r3, [pc, #156]	; (15304 <bt_enable+0xd8>)
   15266:	601d      	str	r5, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   15268:	f04f 0800 	mov.w	r8, #0
   1526c:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15270:	4e25      	ldr	r6, [pc, #148]	; (15308 <bt_enable+0xdc>)
   15272:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15276:	2400      	movs	r4, #0
   15278:	9404      	str	r4, [sp, #16]
   1527a:	f06f 0308 	mvn.w	r3, #8
   1527e:	9303      	str	r3, [sp, #12]
   15280:	9402      	str	r4, [sp, #8]
   15282:	9401      	str	r4, [sp, #4]
   15284:	9400      	str	r4, [sp, #0]
   15286:	4b21      	ldr	r3, [pc, #132]	; (1530c <bt_enable+0xe0>)
   15288:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1528c:	4920      	ldr	r1, [pc, #128]	; (15310 <bt_enable+0xe4>)
   1528e:	4630      	mov	r0, r6
   15290:	f00f fca0 	bl	24bd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15294:	491f      	ldr	r1, [pc, #124]	; (15314 <bt_enable+0xe8>)
   15296:	4630      	mov	r0, r6
   15298:	f005 fbfc 	bl	1aa94 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1529c:	4e1e      	ldr	r6, [pc, #120]	; (15318 <bt_enable+0xec>)
   1529e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   152a2:	9404      	str	r4, [sp, #16]
   152a4:	f06f 0307 	mvn.w	r3, #7
   152a8:	9303      	str	r3, [sp, #12]
   152aa:	9402      	str	r4, [sp, #8]
   152ac:	9401      	str	r4, [sp, #4]
   152ae:	9400      	str	r4, [sp, #0]
   152b0:	4b1a      	ldr	r3, [pc, #104]	; (1531c <bt_enable+0xf0>)
   152b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   152b6:	491a      	ldr	r1, [pc, #104]	; (15320 <bt_enable+0xf4>)
   152b8:	4630      	mov	r0, r6
   152ba:	f00f fc8b 	bl	24bd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   152be:	4919      	ldr	r1, [pc, #100]	; (15324 <bt_enable+0xf8>)
   152c0:	4630      	mov	r0, r6
   152c2:	f005 fbe7 	bl	1aa94 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   152c6:	4b0c      	ldr	r3, [pc, #48]	; (152f8 <bt_enable+0xcc>)
   152c8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   152cc:	68db      	ldr	r3, [r3, #12]
   152ce:	4798      	blx	r3
	if (err) {
   152d0:	4604      	mov	r4, r0
   152d2:	b918      	cbnz	r0, 152dc <bt_enable+0xb0>
	if (!cb) {
   152d4:	b135      	cbz	r5, 152e4 <bt_enable+0xb8>
	k_work_submit(&bt_dev.init);
   152d6:	4814      	ldr	r0, [pc, #80]	; (15328 <bt_enable+0xfc>)
   152d8:	f005 ff9e 	bl	1b218 <k_work_submit>
}
   152dc:	4620      	mov	r0, r4
   152de:	b008      	add	sp, #32
   152e0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return bt_init();
   152e4:	f00b fe12 	bl	20f0c <bt_init>
   152e8:	4604      	mov	r4, r0
   152ea:	e7f7      	b.n	152dc <bt_enable+0xb0>
		return -ENODEV;
   152ec:	f06f 0412 	mvn.w	r4, #18
   152f0:	e7f4      	b.n	152dc <bt_enable+0xb0>
		return -EALREADY;
   152f2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   152f6:	e7f1      	b.n	152dc <bt_enable+0xb0>
   152f8:	200002b0 	.word	0x200002b0
   152fc:	2000037c 	.word	0x2000037c
   15300:	00026cb4 	.word	0x00026cb4
   15304:	200028cc 	.word	0x200028cc
   15308:	20001a38 	.word	0x20001a38
   1530c:	00014fb9 	.word	0x00014fb9
   15310:	20004560 	.word	0x20004560
   15314:	00026cc0 	.word	0x00026cc0
   15318:	20001980 	.word	0x20001980
   1531c:	00014771 	.word	0x00014771
   15320:	20004140 	.word	0x20004140
   15324:	00026cc8 	.word	0x00026cc8
   15328:	2000036c 	.word	0x2000036c

0001532c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1532c:	4800      	ldr	r0, [pc, #0]	; (15330 <bt_get_name+0x4>)
   1532e:	4770      	bx	lr
   15330:	20000418 	.word	0x20000418

00015334 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15334:	b570      	push	{r4, r5, r6, lr}
   15336:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   15338:	2400      	movs	r4, #0
   1533a:	4b0a      	ldr	r3, [pc, #40]	; (15364 <id_find+0x30>)
   1533c:	79db      	ldrb	r3, [r3, #7]
   1533e:	42a3      	cmp	r3, r4
   15340:	d90c      	bls.n	1535c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   15342:	4626      	mov	r6, r4
   15344:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   15348:	2207      	movs	r2, #7
   1534a:	4b06      	ldr	r3, [pc, #24]	; (15364 <id_find+0x30>)
   1534c:	4419      	add	r1, r3
   1534e:	4628      	mov	r0, r5
   15350:	f010 f9db 	bl	2570a <memcmp>
   15354:	b120      	cbz	r0, 15360 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   15356:	3401      	adds	r4, #1
   15358:	b2e4      	uxtb	r4, r4
   1535a:	e7ee      	b.n	1533a <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   1535c:	f06f 0601 	mvn.w	r6, #1
}
   15360:	4630      	mov	r0, r6
   15362:	bd70      	pop	{r4, r5, r6, pc}
   15364:	200002b0 	.word	0x200002b0

00015368 <set_random_address>:
{
   15368:	b538      	push	{r3, r4, r5, lr}
   1536a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1536c:	2206      	movs	r2, #6
   1536e:	4913      	ldr	r1, [pc, #76]	; (153bc <set_random_address+0x54>)
   15370:	f010 f9cb 	bl	2570a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15374:	b900      	cbnz	r0, 15378 <set_random_address+0x10>
}
   15376:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   15378:	2106      	movs	r1, #6
   1537a:	f242 0005 	movw	r0, #8197	; 0x2005
   1537e:	f7ff fa23 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   15382:	4605      	mov	r5, r0
   15384:	b1b8      	cbz	r0, 153b6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15386:	2206      	movs	r2, #6
   15388:	4621      	mov	r1, r4
   1538a:	3008      	adds	r0, #8
   1538c:	f00e f9e3 	bl	23756 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15390:	2200      	movs	r2, #0
   15392:	4629      	mov	r1, r5
   15394:	f242 0005 	movw	r0, #8197	; 0x2005
   15398:	f7ff fa52 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   1539c:	2800      	cmp	r0, #0
   1539e:	d1ea      	bne.n	15376 <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
   153a0:	4b07      	ldr	r3, [pc, #28]	; (153c0 <set_random_address+0x58>)
   153a2:	6822      	ldr	r2, [r4, #0]
   153a4:	f8c3 2061 	str.w	r2, [r3, #97]	; 0x61
   153a8:	88a2      	ldrh	r2, [r4, #4]
   153aa:	f8a3 2065 	strh.w	r2, [r3, #101]	; 0x65
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   153ae:	2201      	movs	r2, #1
   153b0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	return 0;
   153b4:	e7df      	b.n	15376 <set_random_address+0xe>
		return -ENOBUFS;
   153b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   153ba:	e7dc      	b.n	15376 <set_random_address+0xe>
   153bc:	20000311 	.word	0x20000311
   153c0:	200002b0 	.word	0x200002b0

000153c4 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   153c4:	b530      	push	{r4, r5, lr}
   153c6:	b085      	sub	sp, #20
   153c8:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   153ca:	460d      	mov	r5, r1
   153cc:	b149      	cbz	r1, 153e2 <id_create+0x1e>
   153ce:	2300      	movs	r3, #0
   153d0:	9302      	str	r3, [sp, #8]
   153d2:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   153d6:	2207      	movs	r2, #7
   153d8:	a902      	add	r1, sp, #8
   153da:	4628      	mov	r0, r5
   153dc:	f010 f995 	bl	2570a <memcmp>
   153e0:	bb00      	cbnz	r0, 15424 <id_create+0x60>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   153e2:	4668      	mov	r0, sp
   153e4:	f00b fa89 	bl	208fa <bt_addr_le_create_static>
			if (err) {
   153e8:	4603      	mov	r3, r0
   153ea:	b9c0      	cbnz	r0, 1541e <id_create+0x5a>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   153ec:	4668      	mov	r0, sp
   153ee:	f7ff ffa1 	bl	15334 <id_find>
   153f2:	2800      	cmp	r0, #0
   153f4:	daf5      	bge.n	153e2 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   153f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   153fa:	4a10      	ldr	r2, [pc, #64]	; (1543c <id_create+0x78>)
   153fc:	18a3      	adds	r3, r4, r2
   153fe:	9800      	ldr	r0, [sp, #0]
   15400:	50a0      	str	r0, [r4, r2]
   15402:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   15406:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1540a:	8099      	strh	r1, [r3, #4]
   1540c:	719a      	strb	r2, [r3, #6]

		if (addr) {
   1540e:	b12d      	cbz	r5, 1541c <id_create+0x58>
   15410:	681a      	ldr	r2, [r3, #0]
   15412:	602a      	str	r2, [r5, #0]
   15414:	889a      	ldrh	r2, [r3, #4]
   15416:	799b      	ldrb	r3, [r3, #6]
   15418:	80aa      	strh	r2, [r5, #4]
   1541a:	71ab      	strb	r3, [r5, #6]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1541c:	2300      	movs	r3, #0
}
   1541e:	4618      	mov	r0, r3
   15420:	b005      	add	sp, #20
   15422:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15424:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15428:	4a04      	ldr	r2, [pc, #16]	; (1543c <id_create+0x78>)
   1542a:	18a3      	adds	r3, r4, r2
   1542c:	6829      	ldr	r1, [r5, #0]
   1542e:	50a1      	str	r1, [r4, r2]
   15430:	88a9      	ldrh	r1, [r5, #4]
   15432:	79aa      	ldrb	r2, [r5, #6]
   15434:	8099      	strh	r1, [r3, #4]
   15436:	719a      	strb	r2, [r3, #6]
}
   15438:	e7f0      	b.n	1541c <id_create+0x58>
   1543a:	bf00      	nop
   1543c:	200002b0 	.word	0x200002b0

00015440 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15440:	b570      	push	{r4, r5, r6, lr}
   15442:	b084      	sub	sp, #16
   15444:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15446:	4605      	mov	r5, r0
   15448:	b1c0      	cbz	r0, 1547c <bt_id_create+0x3c>
   1544a:	2300      	movs	r3, #0
   1544c:	9300      	str	r3, [sp, #0]
   1544e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   15452:	2207      	movs	r2, #7
   15454:	4669      	mov	r1, sp
   15456:	f010 f958 	bl	2570a <memcmp>
   1545a:	b178      	cbz	r0, 1547c <bt_id_create+0x3c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1545c:	782b      	ldrb	r3, [r5, #0]
   1545e:	2b01      	cmp	r3, #1
   15460:	d132      	bne.n	154c8 <bt_id_create+0x88>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   15462:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15468:	2bc0      	cmp	r3, #192	; 0xc0
   1546a:	d002      	beq.n	15472 <bt_id_create+0x32>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
   1546c:	f06f 0015 	mvn.w	r0, #21
   15470:	e028      	b.n	154c4 <bt_id_create+0x84>
		}

		if (id_find(addr) >= 0) {
   15472:	4628      	mov	r0, r5
   15474:	f7ff ff5e 	bl	15334 <id_find>
   15478:	2800      	cmp	r0, #0
   1547a:	da28      	bge.n	154ce <bt_id_create+0x8e>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1547c:	bb6c      	cbnz	r4, 154da <bt_id_create+0x9a>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1547e:	4b1a      	ldr	r3, [pc, #104]	; (154e8 <bt_id_create+0xa8>)
   15480:	79db      	ldrb	r3, [r3, #7]
   15482:	2b01      	cmp	r3, #1
   15484:	d02c      	beq.n	154e0 <bt_id_create+0xa0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15486:	f3bf 8f5b 	dmb	ish
   1548a:	4b18      	ldr	r3, [pc, #96]	; (154ec <bt_id_create+0xac>)
   1548c:	681b      	ldr	r3, [r3, #0]
   1548e:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15492:	f013 0f01 	tst.w	r3, #1
   15496:	d10a      	bne.n	154ae <bt_id_create+0x6e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   15498:	b1e5      	cbz	r5, 154d4 <bt_id_create+0x94>
   1549a:	2300      	movs	r3, #0
   1549c:	9302      	str	r3, [sp, #8]
   1549e:	f8cd 300b 	str.w	r3, [sp, #11]
   154a2:	2207      	movs	r2, #7
   154a4:	a902      	add	r1, sp, #8
   154a6:	4628      	mov	r0, r5
   154a8:	f010 f92f 	bl	2570a <memcmp>
   154ac:	b190      	cbz	r0, 154d4 <bt_id_create+0x94>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   154ae:	4b0e      	ldr	r3, [pc, #56]	; (154e8 <bt_id_create+0xa8>)
   154b0:	79de      	ldrb	r6, [r3, #7]
   154b2:	1c72      	adds	r2, r6, #1
   154b4:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   154b6:	4622      	mov	r2, r4
   154b8:	4629      	mov	r1, r5
   154ba:	4630      	mov	r0, r6
   154bc:	f7ff ff82 	bl	153c4 <id_create>
	if (err) {
   154c0:	b900      	cbnz	r0, 154c4 <bt_id_create+0x84>
		return err;
	}

	return new_id;
   154c2:	4630      	mov	r0, r6
}
   154c4:	b004      	add	sp, #16
   154c6:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   154c8:	f06f 0015 	mvn.w	r0, #21
   154cc:	e7fa      	b.n	154c4 <bt_id_create+0x84>
			return -EALREADY;
   154ce:	f06f 0077 	mvn.w	r0, #119	; 0x77
   154d2:	e7f7      	b.n	154c4 <bt_id_create+0x84>
			return -EINVAL;
   154d4:	f06f 0015 	mvn.w	r0, #21
   154d8:	e7f4      	b.n	154c4 <bt_id_create+0x84>
		return -EINVAL;
   154da:	f06f 0015 	mvn.w	r0, #21
   154de:	e7f1      	b.n	154c4 <bt_id_create+0x84>
		return -ENOMEM;
   154e0:	f06f 000b 	mvn.w	r0, #11
   154e4:	e7ee      	b.n	154c4 <bt_id_create+0x84>
   154e6:	bf00      	nop
   154e8:	200002b0 	.word	0x200002b0
   154ec:	2000037c 	.word	0x2000037c

000154f0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   154f0:	b530      	push	{r4, r5, lr}
   154f2:	b087      	sub	sp, #28
   154f4:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   154f6:	aa01      	add	r2, sp, #4
   154f8:	2100      	movs	r1, #0
   154fa:	f241 0009 	movw	r0, #4105	; 0x1009
   154fe:	f7ff f99f 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   15502:	b110      	cbz	r0, 1550a <bt_id_read_public_addr+0x1a>
		BT_WARN("Failed to read public address");
		return 0U;
   15504:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   15506:	b007      	add	sp, #28
   15508:	bd30      	pop	{r4, r5, pc}
	rp = (void *)rsp->data;
   1550a:	9b01      	ldr	r3, [sp, #4]
   1550c:	689c      	ldr	r4, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1550e:	3401      	adds	r4, #1
   15510:	2300      	movs	r3, #0
   15512:	9302      	str	r3, [sp, #8]
   15514:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   15518:	2206      	movs	r2, #6
   1551a:	a902      	add	r1, sp, #8
   1551c:	4620      	mov	r0, r4
   1551e:	f010 f8f4 	bl	2570a <memcmp>
   15522:	b158      	cbz	r0, 1553c <bt_id_read_public_addr+0x4c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   15524:	4b0e      	ldr	r3, [pc, #56]	; (15560 <bt_id_read_public_addr+0x70>)
   15526:	e893 0003 	ldmia.w	r3, {r0, r1}
   1552a:	9004      	str	r0, [sp, #16]
   1552c:	f8ad 1014 	strh.w	r1, [sp, #20]
   15530:	2206      	movs	r2, #6
   15532:	a904      	add	r1, sp, #16
   15534:	4620      	mov	r0, r4
   15536:	f010 f8e8 	bl	2570a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1553a:	b920      	cbnz	r0, 15546 <bt_id_read_public_addr+0x56>
		net_buf_unref(rsp);
   1553c:	9801      	ldr	r0, [sp, #4]
   1553e:	f00e f8ba 	bl	236b6 <net_buf_unref>
		return 0U;
   15542:	2000      	movs	r0, #0
   15544:	e7df      	b.n	15506 <bt_id_read_public_addr+0x16>
   15546:	6823      	ldr	r3, [r4, #0]
   15548:	f8c5 3001 	str.w	r3, [r5, #1]
   1554c:	88a3      	ldrh	r3, [r4, #4]
   1554e:	f8a5 3005 	strh.w	r3, [r5, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
   15552:	2300      	movs	r3, #0
   15554:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   15556:	9801      	ldr	r0, [sp, #4]
   15558:	f00e f8ad 	bl	236b6 <net_buf_unref>
	return 1U;
   1555c:	2001      	movs	r0, #1
   1555e:	e7d2      	b.n	15506 <bt_id_read_public_addr+0x16>
   15560:	00025c30 	.word	0x00025c30

00015564 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   15564:	b500      	push	{lr}
   15566:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   15568:	4668      	mov	r0, sp
   1556a:	f7ff ffc1 	bl	154f0 <bt_id_read_public_addr>
   1556e:	4b06      	ldr	r3, [pc, #24]	; (15588 <bt_setup_public_id_addr+0x24>)
   15570:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   15572:	b918      	cbnz	r0, 1557c <bt_setup_public_id_addr+0x18>
		return 0;
   15574:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   15576:	b003      	add	sp, #12
   15578:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   1557c:	2200      	movs	r2, #0
   1557e:	4669      	mov	r1, sp
   15580:	4610      	mov	r0, r2
   15582:	f7ff ff1f 	bl	153c4 <id_create>
   15586:	e7f6      	b.n	15576 <bt_setup_public_id_addr+0x12>
   15588:	200002b0 	.word	0x200002b0

0001558c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15590:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   15592:	4b1e      	ldr	r3, [pc, #120]	; (1560c <bt_read_static_addr+0x80>)
   15594:	f893 60ba 	ldrb.w	r6, [r3, #186]	; 0xba
   15598:	f016 0601 	ands.w	r6, r6, #1
   1559c:	d103      	bne.n	155a6 <bt_read_static_addr+0x1a>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1559e:	4630      	mov	r0, r6
   155a0:	b002      	add	sp, #8
   155a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   155a6:	4607      	mov	r7, r0
   155a8:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   155aa:	aa01      	add	r2, sp, #4
   155ac:	2100      	movs	r1, #0
   155ae:	f64f 4009 	movw	r0, #64521	; 0xfc09
   155b2:	f7ff f945 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   155b6:	4604      	mov	r4, r0
   155b8:	bb28      	cbnz	r0, 15606 <bt_read_static_addr+0x7a>
	rp = (void *)rsp->data;
   155ba:	9b01      	ldr	r3, [sp, #4]
   155bc:	f8d3 8008 	ldr.w	r8, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   155c0:	f898 6001 	ldrb.w	r6, [r8, #1]
   155c4:	42ae      	cmp	r6, r5
   155c6:	bf28      	it	cs
   155c8:	462e      	movcs	r6, r5
	for (i = 0; i < cnt; i++) {
   155ca:	e016      	b.n	155fa <bt_read_static_addr+0x6e>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   155cc:	2116      	movs	r1, #22
   155ce:	fb01 f104 	mul.w	r1, r1, r4
   155d2:	187a      	adds	r2, r7, r1
   155d4:	4643      	mov	r3, r8
   155d6:	f853 5f02 	ldr.w	r5, [r3, #2]!
   155da:	f8d3 e004 	ldr.w	lr, [r3, #4]
   155de:	f8d3 c008 	ldr.w	ip, [r3, #8]
   155e2:	68d8      	ldr	r0, [r3, #12]
   155e4:	507d      	str	r5, [r7, r1]
   155e6:	f8c2 e004 	str.w	lr, [r2, #4]
   155ea:	f8c2 c008 	str.w	ip, [r2, #8]
   155ee:	60d0      	str	r0, [r2, #12]
   155f0:	691d      	ldr	r5, [r3, #16]
   155f2:	6115      	str	r5, [r2, #16]
   155f4:	8a9b      	ldrh	r3, [r3, #20]
   155f6:	8293      	strh	r3, [r2, #20]
	for (i = 0; i < cnt; i++) {
   155f8:	3401      	adds	r4, #1
   155fa:	42a6      	cmp	r6, r4
   155fc:	dce6      	bgt.n	155cc <bt_read_static_addr+0x40>
	net_buf_unref(rsp);
   155fe:	9801      	ldr	r0, [sp, #4]
   15600:	f00e f859 	bl	236b6 <net_buf_unref>
	return cnt;
   15604:	e7cb      	b.n	1559e <bt_read_static_addr+0x12>
		return 0;
   15606:	2600      	movs	r6, #0
   15608:	e7c9      	b.n	1559e <bt_read_static_addr+0x12>
   1560a:	bf00      	nop
   1560c:	200002b0 	.word	0x200002b0

00015610 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   15610:	b510      	push	{r4, lr}
   15612:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   15614:	4b17      	ldr	r3, [pc, #92]	; (15674 <bt_setup_random_id_addr+0x64>)
   15616:	79dc      	ldrb	r4, [r3, #7]
   15618:	b934      	cbnz	r4, 15628 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1561a:	2101      	movs	r1, #1
   1561c:	a802      	add	r0, sp, #8
   1561e:	f7ff ffb5 	bl	1558c <bt_read_static_addr>
   15622:	4b14      	ldr	r3, [pc, #80]	; (15674 <bt_setup_random_id_addr+0x64>)
   15624:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   15626:	b938      	cbnz	r0, 15638 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15628:	2100      	movs	r1, #0
   1562a:	4608      	mov	r0, r1
   1562c:	f7ff ff08 	bl	15440 <bt_id_create>
   15630:	4603      	mov	r3, r0
}
   15632:	4618      	mov	r0, r3
   15634:	b008      	add	sp, #32
   15636:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15638:	4b0e      	ldr	r3, [pc, #56]	; (15674 <bt_setup_random_id_addr+0x64>)
   1563a:	79db      	ldrb	r3, [r3, #7]
   1563c:	42a3      	cmp	r3, r4
   1563e:	d917      	bls.n	15670 <bt_setup_random_id_addr+0x60>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15640:	2316      	movs	r3, #22
   15642:	aa02      	add	r2, sp, #8
   15644:	fb03 2304 	mla	r3, r3, r4, r2
	memcpy(dst, src, sizeof(*dst));
   15648:	681a      	ldr	r2, [r3, #0]
   1564a:	f8cd 2001 	str.w	r2, [sp, #1]
   1564e:	889b      	ldrh	r3, [r3, #4]
   15650:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
   15654:	2301      	movs	r3, #1
   15656:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1565a:	2200      	movs	r2, #0
   1565c:	4669      	mov	r1, sp
   1565e:	4620      	mov	r0, r4
   15660:	f7ff feb0 	bl	153c4 <id_create>
				if (err) {
   15664:	4603      	mov	r3, r0
   15666:	2800      	cmp	r0, #0
   15668:	d1e3      	bne.n	15632 <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1566a:	3401      	adds	r4, #1
   1566c:	b2e4      	uxtb	r4, r4
   1566e:	e7e3      	b.n	15638 <bt_setup_random_id_addr+0x28>
			return 0;
   15670:	2300      	movs	r3, #0
   15672:	e7de      	b.n	15632 <bt_setup_random_id_addr+0x22>
   15674:	200002b0 	.word	0x200002b0

00015678 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   15678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1567a:	460d      	mov	r5, r1
   1567c:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   1567e:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   15680:	f011 0f01 	tst.w	r1, #1
   15684:	d027      	beq.n	156d6 <bt_id_set_adv_own_addr+0x5e>
   15686:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   15688:	b142      	cbz	r2, 1569c <bt_id_set_adv_own_addr+0x24>
   1568a:	f011 0f20 	tst.w	r1, #32
   1568e:	d005      	beq.n	1569c <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   15690:	4b22      	ldr	r3, [pc, #136]	; (1571c <bt_id_set_adv_own_addr+0xa4>)
   15692:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   15696:	f013 0f40 	tst.w	r3, #64	; 0x40
   1569a:	d038      	beq.n	1570e <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1569c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   156a0:	4a1e      	ldr	r2, [pc, #120]	; (1571c <bt_id_set_adv_own_addr+0xa4>)
   156a2:	5cd3      	ldrb	r3, [r2, r3]
   156a4:	2b01      	cmp	r3, #1
   156a6:	d00d      	beq.n	156c4 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   156a8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   156ac:	4b1b      	ldr	r3, [pc, #108]	; (1571c <bt_id_set_adv_own_addr+0xa4>)
   156ae:	5d1b      	ldrb	r3, [r3, r4]
   156b0:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   156b2:	b37f      	cbz	r7, 15714 <bt_id_set_adv_own_addr+0x9c>
   156b4:	f015 0f20 	tst.w	r5, #32
   156b8:	d02e      	beq.n	15718 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   156ba:	f043 0302 	orr.w	r3, r3, #2
   156be:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   156c0:	2000      	movs	r0, #0
   156c2:	e017      	b.n	156f4 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   156c4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   156c8:	4411      	add	r1, r2
   156ca:	3101      	adds	r1, #1
   156cc:	f00b fc31 	bl	20f32 <bt_id_set_adv_random_addr>
				if (err) {
   156d0:	2800      	cmp	r0, #0
   156d2:	d0e9      	beq.n	156a8 <bt_id_set_adv_own_addr+0x30>
   156d4:	e00e      	b.n	156f4 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   156d6:	f011 0f04 	tst.w	r1, #4
   156da:	d013      	beq.n	15704 <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   156dc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   156e0:	4a0e      	ldr	r2, [pc, #56]	; (1571c <bt_id_set_adv_own_addr+0xa4>)
   156e2:	5cd3      	ldrb	r3, [r2, r3]
   156e4:	2b01      	cmp	r3, #1
   156e6:	d006      	beq.n	156f6 <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   156e8:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   156ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   156ee:	4b0b      	ldr	r3, [pc, #44]	; (1571c <bt_id_set_adv_own_addr+0xa4>)
   156f0:	5d1b      	ldrb	r3, [r3, r4]
   156f2:	7033      	strb	r3, [r6, #0]
}
   156f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   156f6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   156fa:	4411      	add	r1, r2
   156fc:	3101      	adds	r1, #1
   156fe:	f00b fc18 	bl	20f32 <bt_id_set_adv_random_addr>
   15702:	e7f2      	b.n	156ea <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   15704:	f00b fc1a 	bl	20f3c <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15708:	2301      	movs	r3, #1
   1570a:	7033      	strb	r3, [r6, #0]
		if (err) {
   1570c:	e7f2      	b.n	156f4 <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   1570e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15712:	e7ef      	b.n	156f4 <bt_id_set_adv_own_addr+0x7c>
	return 0;
   15714:	2000      	movs	r0, #0
   15716:	e7ed      	b.n	156f4 <bt_id_set_adv_own_addr+0x7c>
   15718:	2000      	movs	r0, #0
   1571a:	e7eb      	b.n	156f4 <bt_id_set_adv_own_addr+0x7c>
   1571c:	200002b0 	.word	0x200002b0

00015720 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15720:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15722:	4b0a      	ldr	r3, [pc, #40]	; (1574c <bt_id_init+0x2c>)
   15724:	79db      	ldrb	r3, [r3, #7]
   15726:	b123      	cbz	r3, 15732 <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15728:	4b08      	ldr	r3, [pc, #32]	; (1574c <bt_id_init+0x2c>)
   1572a:	79db      	ldrb	r3, [r3, #7]
   1572c:	b133      	cbz	r3, 1573c <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1572e:	2000      	movs	r0, #0
}
   15730:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
   15732:	f7ff ff17 	bl	15564 <bt_setup_public_id_addr>
		if (err) {
   15736:	2800      	cmp	r0, #0
   15738:	d0f6      	beq.n	15728 <bt_id_init+0x8>
   1573a:	e7f9      	b.n	15730 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   1573c:	f7ff ff68 	bl	15610 <bt_setup_random_id_addr>
		if (err) {
   15740:	2800      	cmp	r0, #0
   15742:	d1f5      	bne.n	15730 <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
   15744:	4802      	ldr	r0, [pc, #8]	; (15750 <bt_id_init+0x30>)
   15746:	f7ff fe0f 	bl	15368 <set_random_address>
		if (err) {
   1574a:	e7f1      	b.n	15730 <bt_id_init+0x10>
   1574c:	200002b0 	.word	0x200002b0
   15750:	200002b1 	.word	0x200002b1

00015754 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   15754:	4800      	ldr	r0, [pc, #0]	; (15758 <adv_new_legacy+0x4>)
   15756:	4770      	bx	lr
   15758:	200002c8 	.word	0x200002c8

0001575c <valid_adv_ext_param>:

	return bt_le_adv_set_enable_legacy(adv, enable);
}

static bool valid_adv_ext_param(const struct bt_le_adv_param *param)
{
   1575c:	b510      	push	{r4, lr}
   1575e:	b082      	sub	sp, #8
   15760:	4604      	mov	r4, r0
	    (param->options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
		/* own addr type used for both RPAs in directed advertising. */
		return false;
	}

	if (param->id >= bt_dev.id_count ||
   15762:	7800      	ldrb	r0, [r0, #0]
   15764:	4b23      	ldr	r3, [pc, #140]	; (157f4 <valid_adv_ext_param+0x98>)
   15766:	79db      	ldrb	r3, [r3, #7]
   15768:	4298      	cmp	r0, r3
   1576a:	d302      	bcc.n	15772 <valid_adv_ext_param+0x16>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
		return false;
   1576c:	2000      	movs	r0, #0
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_39)) {
		return false;
	}

	return true;
}
   1576e:	b002      	add	sp, #8
   15770:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15772:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15776:	2300      	movs	r3, #0
   15778:	9300      	str	r3, [sp, #0]
   1577a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1577e:	2207      	movs	r2, #7
   15780:	4669      	mov	r1, sp
   15782:	4b1c      	ldr	r3, [pc, #112]	; (157f4 <valid_adv_ext_param+0x98>)
   15784:	4418      	add	r0, r3
   15786:	f00f ffc0 	bl	2570a <memcmp>
	if (param->id >= bt_dev.id_count ||
   1578a:	2800      	cmp	r0, #0
   1578c:	d0ee      	beq.n	1576c <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1578e:	6863      	ldr	r3, [r4, #4]
   15790:	f013 0f01 	tst.w	r3, #1
   15794:	d107      	bne.n	157a6 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15796:	4a17      	ldr	r2, [pc, #92]	; (157f4 <valid_adv_ext_param+0x98>)
   15798:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   1579c:	2a08      	cmp	r2, #8
   1579e:	d802      	bhi.n	157a6 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   157a0:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   157a2:	2a9f      	cmp	r2, #159	; 0x9f
   157a4:	d91b      	bls.n	157de <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   157a6:	f013 0f30 	tst.w	r3, #48	; 0x30
   157aa:	d001      	beq.n	157b0 <valid_adv_ext_param+0x54>
	    !param->peer) {
   157ac:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   157ae:	b1c2      	cbz	r2, 157e2 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   157b0:	f013 0f10 	tst.w	r3, #16
   157b4:	d108      	bne.n	157c8 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   157b6:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   157b8:	b132      	cbz	r2, 157c8 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   157ba:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   157be:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   157c2:	d014      	beq.n	157ee <valid_adv_ext_param+0x92>
	return true;
   157c4:	2001      	movs	r0, #1
   157c6:	e7d2      	b.n	1576e <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   157c8:	68a2      	ldr	r2, [r4, #8]
   157ca:	68e1      	ldr	r1, [r4, #12]
   157cc:	428a      	cmp	r2, r1
   157ce:	d80a      	bhi.n	157e6 <valid_adv_ext_param+0x8a>
   157d0:	2a1f      	cmp	r2, #31
   157d2:	d90a      	bls.n	157ea <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   157d4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   157d8:	d9ef      	bls.n	157ba <valid_adv_ext_param+0x5e>
			return false;
   157da:	2000      	movs	r0, #0
   157dc:	e7c7      	b.n	1576e <valid_adv_ext_param+0x12>
			return false;
   157de:	2000      	movs	r0, #0
   157e0:	e7c5      	b.n	1576e <valid_adv_ext_param+0x12>
		return false;
   157e2:	2000      	movs	r0, #0
   157e4:	e7c3      	b.n	1576e <valid_adv_ext_param+0x12>
			return false;
   157e6:	2000      	movs	r0, #0
   157e8:	e7c1      	b.n	1576e <valid_adv_ext_param+0x12>
   157ea:	2000      	movs	r0, #0
   157ec:	e7bf      	b.n	1576e <valid_adv_ext_param+0x12>
		return false;
   157ee:	2000      	movs	r0, #0
   157f0:	e7bd      	b.n	1576e <valid_adv_ext_param+0x12>
   157f2:	bf00      	nop
   157f4:	200002b0 	.word	0x200002b0

000157f8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   157f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   157fa:	b085      	sub	sp, #20
   157fc:	4604      	mov	r4, r0
   157fe:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   15800:	4605      	mov	r5, r0
   15802:	f815 2b09 	ldrb.w	r2, [r5], #9
   15806:	4b1f      	ldr	r3, [pc, #124]	; (15884 <le_adv_start_add_conn+0x8c>)
   15808:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1580c:	2300      	movs	r3, #0
   1580e:	9300      	str	r3, [sp, #0]
   15810:	f8cd 3003 	str.w	r3, [sp, #3]
   15814:	2207      	movs	r2, #7
   15816:	4669      	mov	r1, sp
   15818:	4628      	mov	r0, r5
   1581a:	f00f ff76 	bl	2570a <memcmp>
   1581e:	b9b8      	cbnz	r0, 15850 <le_adv_start_add_conn+0x58>
   15820:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15822:	4b19      	ldr	r3, [pc, #100]	; (15888 <le_adv_start_add_conn+0x90>)
   15824:	e893 0003 	ldmia.w	r3, {r0, r1}
   15828:	9002      	str	r0, [sp, #8]
   1582a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1582e:	0c09      	lsrs	r1, r1, #16
   15830:	f88d 100e 	strb.w	r1, [sp, #14]
   15834:	a902      	add	r1, sp, #8
   15836:	7820      	ldrb	r0, [r4, #0]
   15838:	f00c f825 	bl	21886 <bt_conn_add_le>
		if (!conn) {
   1583c:	4604      	mov	r4, r0
   1583e:	b120      	cbz	r0, 1584a <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   15840:	2104      	movs	r1, #4
   15842:	f000 fb39 	bl	15eb8 <bt_conn_set_state>
		*out_conn = conn;
   15846:	603c      	str	r4, [r7, #0]
		return 0;
   15848:	e012      	b.n	15870 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   1584a:	f06f 060b 	mvn.w	r6, #11
   1584e:	e00f      	b.n	15870 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15850:	4629      	mov	r1, r5
   15852:	7820      	ldrb	r0, [r4, #0]
   15854:	f00c f859 	bl	2190a <bt_conn_exists_le>
   15858:	b968      	cbnz	r0, 15876 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1585a:	4629      	mov	r1, r5
   1585c:	7820      	ldrb	r0, [r4, #0]
   1585e:	f00c f812 	bl	21886 <bt_conn_add_le>
	if (!conn) {
   15862:	4604      	mov	r4, r0
   15864:	b150      	cbz	r0, 1587c <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   15866:	2105      	movs	r1, #5
   15868:	f000 fb26 	bl	15eb8 <bt_conn_set_state>
	*out_conn = conn;
   1586c:	603c      	str	r4, [r7, #0]
	return 0;
   1586e:	2600      	movs	r6, #0
}
   15870:	4630      	mov	r0, r6
   15872:	b005      	add	sp, #20
   15874:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   15876:	f06f 0615 	mvn.w	r6, #21
   1587a:	e7f9      	b.n	15870 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   1587c:	f06f 060b 	mvn.w	r6, #11
   15880:	e7f6      	b.n	15870 <le_adv_start_add_conn+0x78>
   15882:	bf00      	nop
   15884:	200002b0 	.word	0x200002b0
   15888:	00025c38 	.word	0x00025c38

0001588c <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   1588c:	b570      	push	{r4, r5, r6, lr}
   1588e:	b084      	sub	sp, #16
   15890:	4604      	mov	r4, r0
   15892:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15894:	f100 0509 	add.w	r5, r0, #9
   15898:	2300      	movs	r3, #0
   1589a:	9300      	str	r3, [sp, #0]
   1589c:	f8cd 3003 	str.w	r3, [sp, #3]
   158a0:	2207      	movs	r2, #7
   158a2:	4669      	mov	r1, sp
   158a4:	4628      	mov	r0, r5
   158a6:	f00f ff30 	bl	2570a <memcmp>
   158aa:	b9c8      	cbnz	r0, 158e0 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   158ac:	4b10      	ldr	r3, [pc, #64]	; (158f0 <le_adv_stop_free_conn+0x64>)
   158ae:	e893 0003 	ldmia.w	r3, {r0, r1}
   158b2:	9002      	str	r0, [sp, #8]
   158b4:	f8ad 100c 	strh.w	r1, [sp, #12]
   158b8:	0c09      	lsrs	r1, r1, #16
   158ba:	f88d 100e 	strb.w	r1, [sp, #14]
   158be:	2204      	movs	r2, #4
   158c0:	a902      	add	r1, sp, #8
   158c2:	7820      	ldrb	r0, [r4, #0]
   158c4:	f000 fc58 	bl	16178 <bt_conn_lookup_state_le>
   158c8:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   158ca:	b13c      	cbz	r4, 158dc <le_adv_stop_free_conn+0x50>
		conn->err = status;
   158cc:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   158ce:	2100      	movs	r1, #0
   158d0:	4620      	mov	r0, r4
   158d2:	f000 faf1 	bl	15eb8 <bt_conn_set_state>
		bt_conn_unref(conn);
   158d6:	4620      	mov	r0, r4
   158d8:	f00b ff82 	bl	217e0 <bt_conn_unref>
	}
}
   158dc:	b004      	add	sp, #16
   158de:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   158e0:	2205      	movs	r2, #5
   158e2:	4629      	mov	r1, r5
   158e4:	7820      	ldrb	r0, [r4, #0]
   158e6:	f000 fc47 	bl	16178 <bt_conn_lookup_state_le>
   158ea:	4604      	mov	r4, r0
   158ec:	e7ed      	b.n	158ca <le_adv_stop_free_conn+0x3e>
   158ee:	bf00      	nop
   158f0:	00025c38 	.word	0x00025c38

000158f4 <bt_le_adv_lookup_legacy>:
}
   158f4:	4800      	ldr	r0, [pc, #0]	; (158f8 <bt_le_adv_lookup_legacy+0x4>)
   158f6:	4770      	bx	lr
   158f8:	200002c8 	.word	0x200002c8

000158fc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   158fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15900:	b08f      	sub	sp, #60	; 0x3c
   15902:	9205      	str	r2, [sp, #20]
   15904:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   15906:	2300      	movs	r3, #0
   15908:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1590a:	690e      	ldr	r6, [r1, #16]
   1590c:	ebb6 0b03 	subs.w	fp, r6, r3
   15910:	bf18      	it	ne
   15912:	f04f 0b01 	movne.w	fp, #1
   15916:	f3bf 8f5b 	dmb	ish
   1591a:	4bc4      	ldr	r3, [pc, #784]	; (15c2c <bt_le_adv_start_legacy+0x330>)
   1591c:	681b      	ldr	r3, [r3, #0]
   1591e:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15922:	f013 0f02 	tst.w	r3, #2
   15926:	f000 81ac 	beq.w	15c82 <bt_le_adv_start_legacy+0x386>
   1592a:	4605      	mov	r5, r0
   1592c:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1592e:	4608      	mov	r0, r1
   15930:	f00b fc62 	bl	211f8 <valid_adv_param>
   15934:	2800      	cmp	r0, #0
   15936:	f000 81a7 	beq.w	15c88 <bt_le_adv_start_legacy+0x38c>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1593a:	4620      	mov	r0, r4
   1593c:	f00b fb13 	bl	20f66 <bt_id_adv_random_addr_check>
   15940:	4682      	mov	sl, r0
   15942:	2800      	cmp	r0, #0
   15944:	f000 81a3 	beq.w	15c8e <bt_le_adv_start_legacy+0x392>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15948:	f105 0710 	add.w	r7, r5, #16
   1594c:	f3bf 8f5b 	dmb	ish
   15950:	692b      	ldr	r3, [r5, #16]
   15952:	f3bf 8f5b 	dmb	ish
   15956:	f013 0f40 	tst.w	r3, #64	; 0x40
   1595a:	f040 819b 	bne.w	15c94 <bt_le_adv_start_legacy+0x398>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1595e:	2300      	movs	r3, #0
   15960:	9309      	str	r3, [sp, #36]	; 0x24
   15962:	930a      	str	r3, [sp, #40]	; 0x28
   15964:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15968:	68a3      	ldr	r3, [r4, #8]
   1596a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1596e:	68e3      	ldr	r3, [r4, #12]
   15970:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   15974:	f8d4 9004 	ldr.w	r9, [r4, #4]
   15978:	4648      	mov	r0, r9
   1597a:	f00b fb16 	bl	20faa <get_adv_channel_map>
   1597e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   15982:	4648      	mov	r0, r9
   15984:	f00b fb0f 	bl	20fa6 <get_filter_policy>
   15988:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   1598c:	782a      	ldrb	r2, [r5, #0]
   1598e:	7823      	ldrb	r3, [r4, #0]
   15990:	429a      	cmp	r2, r3
   15992:	d00c      	beq.n	159ae <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15994:	4ba5      	ldr	r3, [pc, #660]	; (15c2c <bt_le_adv_start_legacy+0x330>)
   15996:	f3bf 8f5b 	dmb	ish
   1599a:	e853 2f00 	ldrex	r2, [r3]
   1599e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   159a2:	e843 2100 	strex	r1, r2, [r3]
   159a6:	2900      	cmp	r1, #0
   159a8:	d1f7      	bne.n	1599a <bt_le_adv_start_legacy+0x9e>
   159aa:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   159ae:	7823      	ldrb	r3, [r4, #0]
   159b0:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   159b2:	4a9f      	ldr	r2, [pc, #636]	; (15c30 <bt_le_adv_start_legacy+0x334>)
   159b4:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   159b8:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   159bc:	465a      	mov	r2, fp
   159be:	6861      	ldr	r1, [r4, #4]
   159c0:	4628      	mov	r0, r5
   159c2:	f7ff fe59 	bl	15678 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   159c6:	4681      	mov	r9, r0
   159c8:	2800      	cmp	r0, #0
   159ca:	f040 80f1 	bne.w	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return err;
	}

	if (dir_adv) {
   159ce:	b326      	cbz	r6, 15a1a <bt_le_adv_start_legacy+0x11e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   159d0:	6923      	ldr	r3, [r4, #16]
   159d2:	681a      	ldr	r2, [r3, #0]
   159d4:	f8c5 2009 	str.w	r2, [r5, #9]
   159d8:	889a      	ldrh	r2, [r3, #4]
   159da:	799b      	ldrb	r3, [r3, #6]
   159dc:	f8a5 200d 	strh.w	r2, [r5, #13]
   159e0:	73eb      	strb	r3, [r5, #15]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   159e2:	4620      	mov	r0, r4
   159e4:	f00b fc19 	bl	2121a <get_adv_name_type_param>
   159e8:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   159ea:	6863      	ldr	r3, [r4, #4]
   159ec:	f013 0f01 	tst.w	r3, #1
   159f0:	d023      	beq.n	15a3a <bt_le_adv_start_legacy+0x13e>
		if (dir_adv) {
   159f2:	b1f6      	cbz	r6, 15a32 <bt_le_adv_start_legacy+0x136>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   159f4:	f013 0f10 	tst.w	r3, #16
   159f8:	d017      	beq.n	15a2a <bt_le_adv_start_legacy+0x12e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   159fa:	2304      	movs	r3, #4
   159fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   15a00:	6923      	ldr	r3, [r4, #16]
	memcpy(dst, src, sizeof(*dst));
   15a02:	681a      	ldr	r2, [r3, #0]
   15a04:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
   15a08:	889a      	ldrh	r2, [r3, #4]
   15a0a:	799b      	ldrb	r3, [r3, #6]
   15a0c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   15a10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
   15a14:	f04f 0a00 	mov.w	sl, #0
}
   15a18:	e017      	b.n	15a4a <bt_le_adv_start_legacy+0x14e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15a1a:	2300      	movs	r3, #0
   15a1c:	930c      	str	r3, [sp, #48]	; 0x30
   15a1e:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
   15a22:	f8c5 3009 	str.w	r3, [r5, #9]
   15a26:	60eb      	str	r3, [r5, #12]
   15a28:	e7db      	b.n	159e2 <bt_le_adv_start_legacy+0xe6>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   15a2a:	2301      	movs	r3, #1
   15a2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15a30:	e7e6      	b.n	15a00 <bt_le_adv_start_legacy+0x104>
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   15a32:	2300      	movs	r3, #0
   15a34:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15a38:	e007      	b.n	15a4a <bt_le_adv_start_legacy+0x14e>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15a3a:	f413 7f00 	tst.w	r3, #512	; 0x200
   15a3e:	d101      	bne.n	15a44 <bt_le_adv_start_legacy+0x148>
   15a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15a42:	b35b      	cbz	r3, 15a9c <bt_le_adv_start_legacy+0x1a0>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   15a44:	2302      	movs	r3, #2
   15a46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15a4a:	210f      	movs	r1, #15
   15a4c:	f242 0006 	movw	r0, #8198	; 0x2006
   15a50:	f7fe feba 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   15a54:	4681      	mov	r9, r0
   15a56:	2800      	cmp	r0, #0
   15a58:	f000 811f 	beq.w	15c9a <bt_le_adv_start_legacy+0x39e>
   15a5c:	220f      	movs	r2, #15
   15a5e:	a908      	add	r1, sp, #32
   15a60:	3008      	adds	r0, #8
   15a62:	f00d fe78 	bl	23756 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15a66:	2200      	movs	r2, #0
   15a68:	4649      	mov	r1, r9
   15a6a:	f242 0006 	movw	r0, #8198	; 0x2006
   15a6e:	f7fe fee7 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   15a72:	4681      	mov	r9, r0
   15a74:	2800      	cmp	r0, #0
   15a76:	f040 809b 	bne.w	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return err;
	}

	if (!dir_adv) {
   15a7a:	b1be      	cbz	r6, 15aac <bt_le_adv_start_legacy+0x1b0>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15a7c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15a7e:	f013 0f01 	tst.w	r3, #1
   15a82:	d02b      	beq.n	15adc <bt_le_adv_start_legacy+0x1e0>
		err = le_adv_start_add_conn(adv, &conn);
   15a84:	a907      	add	r1, sp, #28
   15a86:	4628      	mov	r0, r5
   15a88:	f7ff feb6 	bl	157f8 <le_adv_start_add_conn>
		if (err) {
   15a8c:	b330      	cbz	r0, 15adc <bt_le_adv_start_legacy+0x1e0>
			if (err == -ENOMEM && !dir_adv &&
   15a8e:	f110 0f0c 	cmn.w	r0, #12
   15a92:	f040 8105 	bne.w	15ca0 <bt_le_adv_start_legacy+0x3a4>
   15a96:	b1de      	cbz	r6, 15ad0 <bt_le_adv_start_legacy+0x1d4>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   15a98:	4681      	mov	r9, r0
   15a9a:	e089      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15a9c:	2802      	cmp	r0, #2
   15a9e:	d0d1      	beq.n	15a44 <bt_le_adv_start_legacy+0x148>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15aa0:	2303      	movs	r3, #3
   15aa2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   15aa6:	f04f 0a00 	mov.w	sl, #0
   15aaa:	e7ce      	b.n	15a4a <bt_le_adv_start_legacy+0x14e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15aac:	f8cd b00c 	str.w	fp, [sp, #12]
   15ab0:	f8cd a008 	str.w	sl, [sp, #8]
   15ab4:	2300      	movs	r3, #0
   15ab6:	9301      	str	r3, [sp, #4]
   15ab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15aba:	9300      	str	r3, [sp, #0]
   15abc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15abe:	4642      	mov	r2, r8
   15ac0:	9905      	ldr	r1, [sp, #20]
   15ac2:	4628      	mov	r0, r5
   15ac4:	f00b fb0d 	bl	210e2 <le_adv_update>
		if (err) {
   15ac8:	2800      	cmp	r0, #0
   15aca:	d0d7      	beq.n	15a7c <bt_le_adv_start_legacy+0x180>
			return err;
   15acc:	4681      	mov	r9, r0
   15ace:	e06f      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   15ad0:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15ad2:	f012 0f02 	tst.w	r2, #2
   15ad6:	d00c      	beq.n	15af2 <bt_le_adv_start_legacy+0x1f6>
			return err;
   15ad8:	4681      	mov	r9, r0
   15ada:	e069      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   15adc:	2101      	movs	r1, #1
   15ade:	4628      	mov	r0, r5
   15ae0:	f00b fbd7 	bl	21292 <bt_le_adv_set_enable>
	if (err) {
   15ae4:	4605      	mov	r5, r0
   15ae6:	2800      	cmp	r0, #0
   15ae8:	d166      	bne.n	15bb8 <bt_le_adv_start_legacy+0x2bc>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15aea:	9807      	ldr	r0, [sp, #28]
   15aec:	b108      	cbz	r0, 15af2 <bt_le_adv_start_legacy+0x1f6>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   15aee:	f00b fe77 	bl	217e0 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15af2:	2e00      	cmp	r6, #0
   15af4:	d06a      	beq.n	15bcc <bt_le_adv_start_legacy+0x2d0>
   15af6:	464b      	mov	r3, r9
	if (val) {
   15af8:	f013 0f01 	tst.w	r3, #1
   15afc:	d06e      	beq.n	15bdc <bt_le_adv_start_legacy+0x2e0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15afe:	f3bf 8f5b 	dmb	ish
   15b02:	e857 3f00 	ldrex	r3, [r7]
   15b06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   15b0a:	e847 3200 	strex	r2, r3, [r7]
   15b0e:	2a00      	cmp	r2, #0
   15b10:	d1f7      	bne.n	15b02 <bt_le_adv_start_legacy+0x206>
   15b12:	f3bf 8f5b 	dmb	ish
   15b16:	f1bb 0f01 	cmp.w	fp, #1
   15b1a:	d16c      	bne.n	15bf6 <bt_le_adv_start_legacy+0x2fa>
   15b1c:	f3bf 8f5b 	dmb	ish
   15b20:	e857 3f00 	ldrex	r3, [r7]
   15b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15b28:	e847 3200 	strex	r2, r3, [r7]
   15b2c:	2a00      	cmp	r2, #0
   15b2e:	d1f7      	bne.n	15b20 <bt_le_adv_start_legacy+0x224>
   15b30:	f3bf 8f5b 	dmb	ish
   15b34:	f1bb 0f02 	cmp.w	fp, #2
   15b38:	d16a      	bne.n	15c10 <bt_le_adv_start_legacy+0x314>
   15b3a:	f3bf 8f5b 	dmb	ish
   15b3e:	e857 3f00 	ldrex	r3, [r7]
   15b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15b46:	e847 3200 	strex	r2, r3, [r7]
   15b4a:	2a00      	cmp	r2, #0
   15b4c:	d1f7      	bne.n	15b3e <bt_le_adv_start_legacy+0x242>
   15b4e:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   15b52:	6863      	ldr	r3, [r4, #4]
   15b54:	f013 0f01 	tst.w	r3, #1
   15b58:	d06c      	beq.n	15c34 <bt_le_adv_start_legacy+0x338>
   15b5a:	f3bf 8f5b 	dmb	ish
   15b5e:	e857 3f00 	ldrex	r3, [r7]
   15b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15b66:	e847 3200 	strex	r2, r3, [r7]
   15b6a:	2a00      	cmp	r2, #0
   15b6c:	d1f7      	bne.n	15b5e <bt_le_adv_start_legacy+0x262>
   15b6e:	f3bf 8f5b 	dmb	ish
   15b72:	f1ba 0f00 	cmp.w	sl, #0
   15b76:	d06a      	beq.n	15c4e <bt_le_adv_start_legacy+0x352>
   15b78:	f3bf 8f5b 	dmb	ish
   15b7c:	e857 3f00 	ldrex	r3, [r7]
   15b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   15b84:	e847 3200 	strex	r2, r3, [r7]
   15b88:	2a00      	cmp	r2, #0
   15b8a:	d1f7      	bne.n	15b7c <bt_le_adv_start_legacy+0x280>
   15b8c:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   15b90:	6863      	ldr	r3, [r4, #4]
   15b92:	f013 0f04 	tst.w	r3, #4
   15b96:	d067      	beq.n	15c68 <bt_le_adv_start_legacy+0x36c>
   15b98:	f3bf 8f5b 	dmb	ish
   15b9c:	e857 3f00 	ldrex	r3, [r7]
   15ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15ba4:	e847 3200 	strex	r2, r3, [r7]
   15ba8:	2a00      	cmp	r2, #0
   15baa:	d1f7      	bne.n	15b9c <bt_le_adv_start_legacy+0x2a0>
   15bac:	f3bf 8f5b 	dmb	ish

	return 0;
}
   15bb0:	4648      	mov	r0, r9
   15bb2:	b00f      	add	sp, #60	; 0x3c
   15bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15bb8:	9807      	ldr	r0, [sp, #28]
   15bba:	b128      	cbz	r0, 15bc8 <bt_le_adv_start_legacy+0x2cc>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15bbc:	2100      	movs	r1, #0
   15bbe:	f000 f97b 	bl	15eb8 <bt_conn_set_state>
			bt_conn_unref(conn);
   15bc2:	9807      	ldr	r0, [sp, #28]
   15bc4:	f00b fe0c 	bl	217e0 <bt_conn_unref>
		return err;
   15bc8:	46a9      	mov	r9, r5
   15bca:	e7f1      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   15bcc:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15bce:	f013 0f02 	tst.w	r3, #2
   15bd2:	d001      	beq.n	15bd8 <bt_le_adv_start_legacy+0x2dc>
   15bd4:	464b      	mov	r3, r9
   15bd6:	e78f      	b.n	15af8 <bt_le_adv_start_legacy+0x1fc>
   15bd8:	2301      	movs	r3, #1
   15bda:	e78d      	b.n	15af8 <bt_le_adv_start_legacy+0x1fc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15bdc:	f3bf 8f5b 	dmb	ish
   15be0:	e857 3f00 	ldrex	r3, [r7]
   15be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   15be8:	e847 3200 	strex	r2, r3, [r7]
   15bec:	2a00      	cmp	r2, #0
   15bee:	d1f7      	bne.n	15be0 <bt_le_adv_start_legacy+0x2e4>
   15bf0:	f3bf 8f5b 	dmb	ish
   15bf4:	e78f      	b.n	15b16 <bt_le_adv_start_legacy+0x21a>
   15bf6:	f3bf 8f5b 	dmb	ish
   15bfa:	e857 3f00 	ldrex	r3, [r7]
   15bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15c02:	e847 3200 	strex	r2, r3, [r7]
   15c06:	2a00      	cmp	r2, #0
   15c08:	d1f7      	bne.n	15bfa <bt_le_adv_start_legacy+0x2fe>
   15c0a:	f3bf 8f5b 	dmb	ish
   15c0e:	e791      	b.n	15b34 <bt_le_adv_start_legacy+0x238>
   15c10:	f3bf 8f5b 	dmb	ish
   15c14:	e857 3f00 	ldrex	r3, [r7]
   15c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   15c1c:	e847 3200 	strex	r2, r3, [r7]
   15c20:	2a00      	cmp	r2, #0
   15c22:	d1f7      	bne.n	15c14 <bt_le_adv_start_legacy+0x318>
   15c24:	f3bf 8f5b 	dmb	ish
   15c28:	e793      	b.n	15b52 <bt_le_adv_start_legacy+0x256>
   15c2a:	bf00      	nop
   15c2c:	2000037c 	.word	0x2000037c
   15c30:	200002b0 	.word	0x200002b0
   15c34:	f3bf 8f5b 	dmb	ish
   15c38:	e857 3f00 	ldrex	r3, [r7]
   15c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   15c40:	e847 3200 	strex	r2, r3, [r7]
   15c44:	2a00      	cmp	r2, #0
   15c46:	d1f7      	bne.n	15c38 <bt_le_adv_start_legacy+0x33c>
   15c48:	f3bf 8f5b 	dmb	ish
   15c4c:	e791      	b.n	15b72 <bt_le_adv_start_legacy+0x276>
   15c4e:	f3bf 8f5b 	dmb	ish
   15c52:	e857 3f00 	ldrex	r3, [r7]
   15c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   15c5a:	e847 3200 	strex	r2, r3, [r7]
   15c5e:	2a00      	cmp	r2, #0
   15c60:	d1f7      	bne.n	15c52 <bt_le_adv_start_legacy+0x356>
   15c62:	f3bf 8f5b 	dmb	ish
   15c66:	e793      	b.n	15b90 <bt_le_adv_start_legacy+0x294>
   15c68:	f3bf 8f5b 	dmb	ish
   15c6c:	e857 3f00 	ldrex	r3, [r7]
   15c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   15c74:	e847 3200 	strex	r2, r3, [r7]
   15c78:	2a00      	cmp	r2, #0
   15c7a:	d1f7      	bne.n	15c6c <bt_le_adv_start_legacy+0x370>
   15c7c:	f3bf 8f5b 	dmb	ish
}
   15c80:	e796      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return -EAGAIN;
   15c82:	f06f 090a 	mvn.w	r9, #10
   15c86:	e793      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return -EINVAL;
   15c88:	f06f 0915 	mvn.w	r9, #21
   15c8c:	e790      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return -EINVAL;
   15c8e:	f06f 0915 	mvn.w	r9, #21
   15c92:	e78d      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return -EALREADY;
   15c94:	f06f 0977 	mvn.w	r9, #119	; 0x77
   15c98:	e78a      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
		return -ENOBUFS;
   15c9a:	f06f 0968 	mvn.w	r9, #104	; 0x68
   15c9e:	e787      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>
			return err;
   15ca0:	4681      	mov	r9, r0
   15ca2:	e785      	b.n	15bb0 <bt_le_adv_start_legacy+0x2b4>

00015ca4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ca8:	b082      	sub	sp, #8
   15caa:	4606      	mov	r6, r0
   15cac:	460c      	mov	r4, r1
   15cae:	4615      	mov	r5, r2
   15cb0:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   15cb2:	f7ff fd4f 	bl	15754 <adv_new_legacy>
	int err;

	if (!adv) {
   15cb6:	b1f8      	cbz	r0, 15cf8 <bt_le_adv_start+0x54>
   15cb8:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15cba:	9b08      	ldr	r3, [sp, #32]
   15cbc:	9301      	str	r3, [sp, #4]
   15cbe:	9700      	str	r7, [sp, #0]
   15cc0:	462b      	mov	r3, r5
   15cc2:	4622      	mov	r2, r4
   15cc4:	4631      	mov	r1, r6
   15cc6:	f7ff fe19 	bl	158fc <bt_le_adv_start_legacy>
   15cca:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   15ccc:	4629      	mov	r1, r5
   15cce:	4620      	mov	r0, r4
   15cd0:	f00b f94b 	bl	20f6a <ad_is_limited>
   15cd4:	b918      	cbnz	r0, 15cde <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   15cd6:	4630      	mov	r0, r6
   15cd8:	b002      	add	sp, #8
   15cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   15cde:	f108 0818 	add.w	r8, r8, #24
   15ce2:	4907      	ldr	r1, [pc, #28]	; (15d00 <bt_le_adv_start+0x5c>)
   15ce4:	4640      	mov	r0, r8
   15ce6:	f00f f94a 	bl	24f7e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   15cea:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   15cee:	2300      	movs	r3, #0
   15cf0:	4640      	mov	r0, r8
   15cf2:	f005 fadf 	bl	1b2b4 <k_work_reschedule>
   15cf6:	e7ee      	b.n	15cd6 <bt_le_adv_start+0x32>
		return -ENOMEM;
   15cf8:	f06f 060b 	mvn.w	r6, #11
   15cfc:	e7eb      	b.n	15cd6 <bt_le_adv_start+0x32>
   15cfe:	bf00      	nop
   15d00:	0002130d 	.word	0x0002130d

00015d04 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   15d04:	b538      	push	{r3, r4, r5, lr}
   15d06:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15d08:	4b0c      	ldr	r3, [pc, #48]	; (15d3c <notify_disconnected+0x38>)
   15d0a:	681c      	ldr	r4, [r3, #0]
   15d0c:	e000      	b.n	15d10 <notify_disconnected+0xc>
   15d0e:	6924      	ldr	r4, [r4, #16]
   15d10:	b134      	cbz	r4, 15d20 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   15d12:	6863      	ldr	r3, [r4, #4]
   15d14:	2b00      	cmp	r3, #0
   15d16:	d0fa      	beq.n	15d0e <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   15d18:	7a69      	ldrb	r1, [r5, #9]
   15d1a:	4628      	mov	r0, r5
   15d1c:	4798      	blx	r3
   15d1e:	e7f6      	b.n	15d0e <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d20:	4c07      	ldr	r4, [pc, #28]	; (15d40 <notify_disconnected+0x3c>)
   15d22:	e000      	b.n	15d26 <notify_disconnected+0x22>
   15d24:	3414      	adds	r4, #20
   15d26:	4b07      	ldr	r3, [pc, #28]	; (15d44 <notify_disconnected+0x40>)
   15d28:	429c      	cmp	r4, r3
   15d2a:	d206      	bcs.n	15d3a <notify_disconnected+0x36>
		if (cb->disconnected) {
   15d2c:	6863      	ldr	r3, [r4, #4]
   15d2e:	2b00      	cmp	r3, #0
   15d30:	d0f8      	beq.n	15d24 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   15d32:	7a69      	ldrb	r1, [r5, #9]
   15d34:	4628      	mov	r0, r5
   15d36:	4798      	blx	r3
   15d38:	e7f4      	b.n	15d24 <notify_disconnected+0x20>
		}
	}
}
   15d3a:	bd38      	pop	{r3, r4, r5, pc}
   15d3c:	200028d0 	.word	0x200028d0
   15d40:	00025b14 	.word	0x00025b14
   15d44:	00025b14 	.word	0x00025b14

00015d48 <tx_free>:
{
   15d48:	b508      	push	{r3, lr}
   15d4a:	4601      	mov	r1, r0
	tx->cb = NULL;
   15d4c:	2300      	movs	r3, #0
   15d4e:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   15d50:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   15d52:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15d54:	4801      	ldr	r0, [pc, #4]	; (15d5c <tx_free+0x14>)
   15d56:	f00f f810 	bl	24d7a <k_queue_append>
}
   15d5a:	bd08      	pop	{r3, pc}
   15d5c:	20000afc 	.word	0x20000afc

00015d60 <conn_tx_alloc>:
{
   15d60:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   15d62:	f005 fe6b 	bl	1ba3c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15d66:	4b08      	ldr	r3, [pc, #32]	; (15d88 <conn_tx_alloc+0x28>)
   15d68:	4283      	cmp	r3, r0
   15d6a:	d007      	beq.n	15d7c <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   15d6c:	f04f 32ff 	mov.w	r2, #4294967295
   15d70:	f04f 33ff 	mov.w	r3, #4294967295
   15d74:	4805      	ldr	r0, [pc, #20]	; (15d8c <conn_tx_alloc+0x2c>)
   15d76:	f005 f849 	bl	1ae0c <z_impl_k_queue_get>
}
   15d7a:	bd08      	pop	{r3, pc}
   15d7c:	2200      	movs	r2, #0
   15d7e:	2300      	movs	r3, #0
   15d80:	4802      	ldr	r0, [pc, #8]	; (15d8c <conn_tx_alloc+0x2c>)
   15d82:	f005 f843 	bl	1ae0c <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   15d86:	e7f8      	b.n	15d7a <conn_tx_alloc+0x1a>
   15d88:	20002140 	.word	0x20002140
   15d8c:	20000afc 	.word	0x20000afc

00015d90 <notify_connected>:
{
   15d90:	b538      	push	{r3, r4, r5, lr}
   15d92:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15d94:	4b0f      	ldr	r3, [pc, #60]	; (15dd4 <notify_connected+0x44>)
   15d96:	681c      	ldr	r4, [r3, #0]
   15d98:	e000      	b.n	15d9c <notify_connected+0xc>
   15d9a:	6924      	ldr	r4, [r4, #16]
   15d9c:	b134      	cbz	r4, 15dac <notify_connected+0x1c>
		if (cb->connected) {
   15d9e:	6823      	ldr	r3, [r4, #0]
   15da0:	2b00      	cmp	r3, #0
   15da2:	d0fa      	beq.n	15d9a <notify_connected+0xa>
			cb->connected(conn, conn->err);
   15da4:	7a69      	ldrb	r1, [r5, #9]
   15da6:	4628      	mov	r0, r5
   15da8:	4798      	blx	r3
   15daa:	e7f6      	b.n	15d9a <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15dac:	4c0a      	ldr	r4, [pc, #40]	; (15dd8 <notify_connected+0x48>)
   15dae:	e000      	b.n	15db2 <notify_connected+0x22>
   15db0:	3414      	adds	r4, #20
   15db2:	4b0a      	ldr	r3, [pc, #40]	; (15ddc <notify_connected+0x4c>)
   15db4:	429c      	cmp	r4, r3
   15db6:	d206      	bcs.n	15dc6 <notify_connected+0x36>
		if (cb->connected) {
   15db8:	6823      	ldr	r3, [r4, #0]
   15dba:	2b00      	cmp	r3, #0
   15dbc:	d0f8      	beq.n	15db0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   15dbe:	7a69      	ldrb	r1, [r5, #9]
   15dc0:	4628      	mov	r0, r5
   15dc2:	4798      	blx	r3
   15dc4:	e7f4      	b.n	15db0 <notify_connected+0x20>
	if (!conn->err) {
   15dc6:	7a6b      	ldrb	r3, [r5, #9]
   15dc8:	b103      	cbz	r3, 15dcc <notify_connected+0x3c>
}
   15dca:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   15dcc:	4628      	mov	r0, r5
   15dce:	f001 fdb5 	bl	1793c <bt_gatt_connected>
}
   15dd2:	e7fa      	b.n	15dca <notify_connected+0x3a>
   15dd4:	200028d0 	.word	0x200028d0
   15dd8:	00025b14 	.word	0x00025b14
   15ddc:	00025b14 	.word	0x00025b14

00015de0 <bt_conn_get_pkts>:
}
   15de0:	4800      	ldr	r0, [pc, #0]	; (15de4 <bt_conn_get_pkts+0x4>)
   15de2:	4770      	bx	lr
   15de4:	200003b0 	.word	0x200003b0

00015de8 <bt_conn_new>:
{
   15de8:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   15dea:	2300      	movs	r3, #0
   15dec:	428b      	cmp	r3, r1
   15dee:	d228      	bcs.n	15e42 <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15df0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   15df4:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   15df8:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15dfc:	2501      	movs	r5, #1
   15dfe:	f3bf 8f5b 	dmb	ish
   15e02:	e852 6f00 	ldrex	r6, [r2]
   15e06:	2e00      	cmp	r6, #0
   15e08:	d104      	bne.n	15e14 <bt_conn_new+0x2c>
   15e0a:	e842 5c00 	strex	ip, r5, [r2]
   15e0e:	f1bc 0f00 	cmp.w	ip, #0
   15e12:	d1f6      	bne.n	15e02 <bt_conn_new+0x1a>
   15e14:	f3bf 8f5b 	dmb	ish
   15e18:	d111      	bne.n	15e3e <bt_conn_new+0x56>
	if (!conn) {
   15e1a:	b174      	cbz	r4, 15e3a <bt_conn_new+0x52>
__ssp_bos_icheck3(memset, void *, int)
   15e1c:	22b8      	movs	r2, #184	; 0xb8
   15e1e:	2100      	movs	r1, #0
   15e20:	4620      	mov	r0, r4
   15e22:	f00f fcbb 	bl	2579c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   15e26:	4908      	ldr	r1, [pc, #32]	; (15e48 <bt_conn_new+0x60>)
   15e28:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15e2c:	f00f f8a7 	bl	24f7e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15e30:	4906      	ldr	r1, [pc, #24]	; (15e4c <bt_conn_new+0x64>)
   15e32:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15e36:	f00f f87c 	bl	24f32 <k_work_init>
}
   15e3a:	4620      	mov	r0, r4
   15e3c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   15e3e:	442b      	add	r3, r5
   15e40:	e7d4      	b.n	15dec <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   15e42:	2400      	movs	r4, #0
   15e44:	e7e9      	b.n	15e1a <bt_conn_new+0x32>
   15e46:	bf00      	nop
   15e48:	00016251 	.word	0x00016251
   15e4c:	00021403 	.word	0x00021403

00015e50 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   15e50:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15e52:	2101      	movs	r1, #1
   15e54:	4801      	ldr	r0, [pc, #4]	; (15e5c <acl_conn_new+0xc>)
   15e56:	f7ff ffc7 	bl	15de8 <bt_conn_new>
}
   15e5a:	bd08      	pop	{r3, pc}
   15e5c:	20001af0 	.word	0x20001af0

00015e60 <bt_conn_prepare_events>:
{
   15e60:	b570      	push	{r4, r5, r6, lr}
   15e62:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   15e64:	4b0d      	ldr	r3, [pc, #52]	; (15e9c <bt_conn_prepare_events+0x3c>)
   15e66:	2400      	movs	r4, #0
   15e68:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15e6a:	4622      	mov	r2, r4
   15e6c:	2101      	movs	r1, #1
   15e6e:	f00f fc07 	bl	25680 <k_poll_event_init>
   15e72:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15e74:	2c00      	cmp	r4, #0
   15e76:	dd01      	ble.n	15e7c <bt_conn_prepare_events+0x1c>
}
   15e78:	4628      	mov	r0, r5
   15e7a:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   15e7c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   15e80:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   15e84:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   15e88:	4b05      	ldr	r3, [pc, #20]	; (15ea0 <bt_conn_prepare_events+0x40>)
   15e8a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   15e8e:	f00b fc16 	bl	216be <conn_prepare_events>
   15e92:	b900      	cbnz	r0, 15e96 <bt_conn_prepare_events+0x36>
			ev_count++;
   15e94:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15e96:	3401      	adds	r4, #1
   15e98:	e7ec      	b.n	15e74 <bt_conn_prepare_events+0x14>
   15e9a:	bf00      	nop
   15e9c:	200007c8 	.word	0x200007c8
   15ea0:	20001af0 	.word	0x20001af0

00015ea4 <bt_conn_lookup_handle>:
{
   15ea4:	b508      	push	{r3, lr}
   15ea6:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15ea8:	2101      	movs	r1, #1
   15eaa:	4802      	ldr	r0, [pc, #8]	; (15eb4 <bt_conn_lookup_handle+0x10>)
   15eac:	f00b fcb5 	bl	2181a <conn_lookup_handle>
}
   15eb0:	bd08      	pop	{r3, pc}
   15eb2:	bf00      	nop
   15eb4:	20001af0 	.word	0x20001af0

00015eb8 <bt_conn_set_state>:
{
   15eb8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
   15eba:	7a85      	ldrb	r5, [r0, #10]
   15ebc:	428d      	cmp	r5, r1
   15ebe:	d00b      	beq.n	15ed8 <bt_conn_set_state+0x20>
   15ec0:	4604      	mov	r4, r0
	conn->state = state;
   15ec2:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   15ec4:	b915      	cbnz	r5, 15ecc <bt_conn_set_state+0x14>
		if (conn->type != BT_CONN_TYPE_ISO) {
   15ec6:	7883      	ldrb	r3, [r0, #2]
   15ec8:	2b08      	cmp	r3, #8
   15eca:	d106      	bne.n	15eda <bt_conn_set_state+0x22>
	switch (conn->state) {
   15ecc:	7aa3      	ldrb	r3, [r4, #10]
   15ece:	2b01      	cmp	r3, #1
   15ed0:	d071      	beq.n	15fb6 <bt_conn_set_state+0xfe>
   15ed2:	2b07      	cmp	r3, #7
   15ed4:	d004      	beq.n	15ee0 <bt_conn_set_state+0x28>
   15ed6:	b1e3      	cbz	r3, 15f12 <bt_conn_set_state+0x5a>
}
   15ed8:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_ref(conn);
   15eda:	f00b fc5a 	bl	21792 <bt_conn_ref>
   15ede:	e7f5      	b.n	15ecc <bt_conn_set_state+0x14>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15ee0:	78a3      	ldrb	r3, [r4, #2]
   15ee2:	2b04      	cmp	r3, #4
   15ee4:	d0f8      	beq.n	15ed8 <bt_conn_set_state+0x20>
		k_fifo_init(&conn->tx_queue);
   15ee6:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   15eea:	f00e ff3a 	bl	24d62 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15eee:	2100      	movs	r1, #0
   15ef0:	4833      	ldr	r0, [pc, #204]	; (15fc0 <bt_conn_set_state+0x108>)
   15ef2:	f006 fadd 	bl	1c4b0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15ef6:	2300      	movs	r3, #0
   15ef8:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   15efa:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   15efc:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15efe:	2b01      	cmp	r3, #1
   15f00:	d1ea      	bne.n	15ed8 <bt_conn_set_state+0x20>
			k_work_schedule(&conn->deferred_work,
   15f02:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   15f06:	2300      	movs	r3, #0
   15f08:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15f0c:	f005 f9ca 	bl	1b2a4 <k_work_schedule>
   15f10:	e7e2      	b.n	15ed8 <bt_conn_set_state+0x20>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15f12:	78a3      	ldrb	r3, [r4, #2]
   15f14:	2b04      	cmp	r3, #4
   15f16:	d007      	beq.n	15f28 <bt_conn_set_state+0x70>
		switch (old_state) {
   15f18:	3d01      	subs	r5, #1
   15f1a:	2d05      	cmp	r5, #5
   15f1c:	d8dc      	bhi.n	15ed8 <bt_conn_set_state+0x20>
   15f1e:	e8df f005 	tbb	[pc, r5]
   15f22:	2e07      	.short	0x2e07
   15f24:	24384642 	.word	0x24384642
			bt_conn_unref(conn);
   15f28:	4620      	mov	r0, r4
   15f2a:	f00b fc59 	bl	217e0 <bt_conn_unref>
			break;
   15f2e:	e7d3      	b.n	15ed8 <bt_conn_set_state+0x20>
			tx_notify(conn);
   15f30:	4620      	mov	r0, r4
   15f32:	f00b fa41 	bl	213b8 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   15f36:	78a3      	ldrb	r3, [r4, #2]
   15f38:	2b01      	cmp	r3, #1
   15f3a:	d011      	beq.n	15f60 <bt_conn_set_state+0xa8>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   15f3c:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15f3e:	f3bf 8f5b 	dmb	ish
   15f42:	e854 3f00 	ldrex	r3, [r4]
   15f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15f4a:	e844 3200 	strex	r2, r3, [r4]
   15f4e:	2a00      	cmp	r2, #0
   15f50:	d1f7      	bne.n	15f42 <bt_conn_set_state+0x8a>
   15f52:	f3bf 8f5b 	dmb	ish
   15f56:	2100      	movs	r1, #0
   15f58:	4819      	ldr	r0, [pc, #100]	; (15fc0 <bt_conn_set_state+0x108>)
   15f5a:	f006 faa9 	bl	1c4b0 <z_impl_k_poll_signal_raise>
   15f5e:	e7bb      	b.n	15ed8 <bt_conn_set_state+0x20>
				k_work_cancel_delayable(&conn->deferred_work);
   15f60:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15f64:	f00f f857 	bl	25016 <k_work_cancel_delayable>
   15f68:	e7e8      	b.n	15f3c <bt_conn_set_state+0x84>
			if (conn->err) {
   15f6a:	7a63      	ldrb	r3, [r4, #9]
   15f6c:	b91b      	cbnz	r3, 15f76 <bt_conn_set_state+0xbe>
			bt_conn_unref(conn);
   15f6e:	4620      	mov	r0, r4
   15f70:	f00b fc36 	bl	217e0 <bt_conn_unref>
			break;
   15f74:	e7b0      	b.n	15ed8 <bt_conn_set_state+0x20>
				notify_connected(conn);
   15f76:	4620      	mov	r0, r4
   15f78:	f7ff ff0a 	bl	15d90 <notify_connected>
   15f7c:	e7f7      	b.n	15f6e <bt_conn_set_state+0xb6>
			if (conn->err) {
   15f7e:	7a63      	ldrb	r3, [r4, #9]
   15f80:	b91b      	cbnz	r3, 15f8a <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
   15f82:	4620      	mov	r0, r4
   15f84:	f00b fc2c 	bl	217e0 <bt_conn_unref>
			break;
   15f88:	e7a6      	b.n	15ed8 <bt_conn_set_state+0x20>
				notify_connected(conn);
   15f8a:	4620      	mov	r0, r4
   15f8c:	f7ff ff00 	bl	15d90 <notify_connected>
   15f90:	e7f7      	b.n	15f82 <bt_conn_set_state+0xca>
			if (conn->err) {
   15f92:	7a63      	ldrb	r3, [r4, #9]
   15f94:	b91b      	cbnz	r3, 15f9e <bt_conn_set_state+0xe6>
			bt_conn_unref(conn);
   15f96:	4620      	mov	r0, r4
   15f98:	f00b fc22 	bl	217e0 <bt_conn_unref>
			break;
   15f9c:	e79c      	b.n	15ed8 <bt_conn_set_state+0x20>
				notify_connected(conn);
   15f9e:	4620      	mov	r0, r4
   15fa0:	f7ff fef6 	bl	15d90 <notify_connected>
   15fa4:	e7f7      	b.n	15f96 <bt_conn_set_state+0xde>
			bt_conn_unref(conn);
   15fa6:	4620      	mov	r0, r4
   15fa8:	f00b fc1a 	bl	217e0 <bt_conn_unref>
			break;
   15fac:	e794      	b.n	15ed8 <bt_conn_set_state+0x20>
			bt_conn_unref(conn);
   15fae:	4620      	mov	r0, r4
   15fb0:	f00b fc16 	bl	217e0 <bt_conn_unref>
			break;
   15fb4:	e790      	b.n	15ed8 <bt_conn_set_state+0x20>
		process_unack_tx(conn);
   15fb6:	4620      	mov	r0, r4
   15fb8:	f00b fac5 	bl	21546 <process_unack_tx>
		break;
   15fbc:	e78c      	b.n	15ed8 <bt_conn_set_state+0x20>
   15fbe:	bf00      	nop
   15fc0:	200007c8 	.word	0x200007c8

00015fc4 <bt_conn_index>:
		index = conn - acl_conns;
   15fc4:	4b03      	ldr	r3, [pc, #12]	; (15fd4 <bt_conn_index+0x10>)
   15fc6:	1ac0      	subs	r0, r0, r3
   15fc8:	1180      	asrs	r0, r0, #6
   15fca:	4b03      	ldr	r3, [pc, #12]	; (15fd8 <bt_conn_index+0x14>)
   15fcc:	fb03 f000 	mul.w	r0, r3, r0
}
   15fd0:	b2c0      	uxtb	r0, r0
   15fd2:	4770      	bx	lr
   15fd4:	20001af0 	.word	0x20001af0
   15fd8:	aaaaaaab 	.word	0xaaaaaaab

00015fdc <bt_conn_create_pdu_timeout>:
{
   15fdc:	b538      	push	{r3, r4, r5, lr}
   15fde:	460c      	mov	r4, r1
	if (!pool) {
   15fe0:	4601      	mov	r1, r0
   15fe2:	b150      	cbz	r0, 15ffa <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   15fe4:	4608      	mov	r0, r1
   15fe6:	f00d fb33 	bl	23650 <net_buf_alloc_fixed>
	if (!buf) {
   15fea:	4605      	mov	r5, r0
   15fec:	b118      	cbz	r0, 15ff6 <bt_conn_create_pdu_timeout+0x1a>
	net_buf_simple_reserve(&buf->b, reserve);
   15fee:	1d21      	adds	r1, r4, #4
   15ff0:	3008      	adds	r0, #8
   15ff2:	f00d fb4f 	bl	23694 <net_buf_simple_reserve>
}
   15ff6:	4628      	mov	r0, r5
   15ff8:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   15ffa:	4901      	ldr	r1, [pc, #4]	; (16000 <bt_conn_create_pdu_timeout+0x24>)
   15ffc:	e7f2      	b.n	15fe4 <bt_conn_create_pdu_timeout+0x8>
   15ffe:	bf00      	nop
   16000:	20000b14 	.word	0x20000b14

00016004 <notify_le_param_updated>:
{
   16004:	b570      	push	{r4, r5, r6, lr}
   16006:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16008:	f3bf 8f5b 	dmb	ish
   1600c:	6843      	ldr	r3, [r0, #4]
   1600e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16012:	f413 7f00 	tst.w	r3, #512	; 0x200
   16016:	d010      	beq.n	1603a <notify_le_param_updated+0x36>
   16018:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   1601a:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   1601e:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   16022:	428b      	cmp	r3, r1
   16024:	d309      	bcc.n	1603a <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   16026:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1602a:	428b      	cmp	r3, r1
   1602c:	d805      	bhi.n	1603a <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   1602e:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   16032:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   16036:	4299      	cmp	r1, r3
   16038:	d002      	beq.n	16040 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1603a:	4b18      	ldr	r3, [pc, #96]	; (1609c <notify_le_param_updated+0x98>)
   1603c:	681d      	ldr	r5, [r3, #0]
   1603e:	e00d      	b.n	1605c <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16040:	f3bf 8f5b 	dmb	ish
   16044:	e852 3f00 	ldrex	r3, [r2]
   16048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1604c:	e842 3100 	strex	r1, r3, [r2]
   16050:	2900      	cmp	r1, #0
   16052:	d1f7      	bne.n	16044 <notify_le_param_updated+0x40>
   16054:	f3bf 8f5b 	dmb	ish
}
   16058:	e7ef      	b.n	1603a <notify_le_param_updated+0x36>
   1605a:	692d      	ldr	r5, [r5, #16]
   1605c:	b15d      	cbz	r5, 16076 <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   1605e:	68ee      	ldr	r6, [r5, #12]
   16060:	2e00      	cmp	r6, #0
   16062:	d0fa      	beq.n	1605a <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   16064:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   16068:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1606c:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   16070:	4620      	mov	r0, r4
   16072:	47b0      	blx	r6
   16074:	e7f1      	b.n	1605a <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16076:	4d0a      	ldr	r5, [pc, #40]	; (160a0 <notify_le_param_updated+0x9c>)
   16078:	e000      	b.n	1607c <notify_le_param_updated+0x78>
   1607a:	3514      	adds	r5, #20
   1607c:	4b09      	ldr	r3, [pc, #36]	; (160a4 <notify_le_param_updated+0xa0>)
   1607e:	429d      	cmp	r5, r3
   16080:	d20b      	bcs.n	1609a <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   16082:	68ee      	ldr	r6, [r5, #12]
   16084:	2e00      	cmp	r6, #0
   16086:	d0f8      	beq.n	1607a <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   16088:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1608c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   16090:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   16094:	4620      	mov	r0, r4
   16096:	47b0      	blx	r6
   16098:	e7ef      	b.n	1607a <notify_le_param_updated+0x76>
}
   1609a:	bd70      	pop	{r4, r5, r6, pc}
   1609c:	200028d0 	.word	0x200028d0
   160a0:	00025b14 	.word	0x00025b14
   160a4:	00025b14 	.word	0x00025b14

000160a8 <le_param_req>:
{
   160a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   160aa:	4606      	mov	r6, r0
   160ac:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   160ae:	4608      	mov	r0, r1
   160b0:	f00a fd9b 	bl	20bea <bt_le_conn_params_valid>
   160b4:	4607      	mov	r7, r0
   160b6:	b338      	cbz	r0, 16108 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   160b8:	4b15      	ldr	r3, [pc, #84]	; (16110 <le_param_req+0x68>)
   160ba:	681c      	ldr	r4, [r3, #0]
   160bc:	e000      	b.n	160c0 <le_param_req+0x18>
   160be:	6924      	ldr	r4, [r4, #16]
   160c0:	b16c      	cbz	r4, 160de <le_param_req+0x36>
		if (!cb->le_param_req) {
   160c2:	68a3      	ldr	r3, [r4, #8]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d0fa      	beq.n	160be <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   160c8:	4629      	mov	r1, r5
   160ca:	4630      	mov	r0, r6
   160cc:	4798      	blx	r3
   160ce:	b1d0      	cbz	r0, 16106 <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   160d0:	4628      	mov	r0, r5
   160d2:	f00a fd8a 	bl	20bea <bt_le_conn_params_valid>
   160d6:	2800      	cmp	r0, #0
   160d8:	d1f1      	bne.n	160be <le_param_req+0x16>
			return false;
   160da:	4607      	mov	r7, r0
   160dc:	e014      	b.n	16108 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   160de:	4c0d      	ldr	r4, [pc, #52]	; (16114 <le_param_req+0x6c>)
   160e0:	e000      	b.n	160e4 <le_param_req+0x3c>
   160e2:	3414      	adds	r4, #20
   160e4:	4b0c      	ldr	r3, [pc, #48]	; (16118 <le_param_req+0x70>)
   160e6:	429c      	cmp	r4, r3
   160e8:	d20e      	bcs.n	16108 <le_param_req+0x60>
		if (!cb->le_param_req) {
   160ea:	68a3      	ldr	r3, [r4, #8]
   160ec:	2b00      	cmp	r3, #0
   160ee:	d0f8      	beq.n	160e2 <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   160f0:	4629      	mov	r1, r5
   160f2:	4630      	mov	r0, r6
   160f4:	4798      	blx	r3
   160f6:	b148      	cbz	r0, 1610c <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   160f8:	4628      	mov	r0, r5
   160fa:	f00a fd76 	bl	20bea <bt_le_conn_params_valid>
   160fe:	2800      	cmp	r0, #0
   16100:	d1ef      	bne.n	160e2 <le_param_req+0x3a>
			return false;
   16102:	4607      	mov	r7, r0
   16104:	e000      	b.n	16108 <le_param_req+0x60>
			return false;
   16106:	4607      	mov	r7, r0
}
   16108:	4638      	mov	r0, r7
   1610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1610c:	4607      	mov	r7, r0
   1610e:	e7fb      	b.n	16108 <le_param_req+0x60>
   16110:	200028d0 	.word	0x200028d0
   16114:	00025b14 	.word	0x00025b14
   16118:	00025b14 	.word	0x00025b14

0001611c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1611c:	4b02      	ldr	r3, [pc, #8]	; (16128 <bt_conn_cb_register+0xc>)
   1611e:	681a      	ldr	r2, [r3, #0]
   16120:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   16122:	6018      	str	r0, [r3, #0]
}
   16124:	4770      	bx	lr
   16126:	bf00      	nop
   16128:	200028d0 	.word	0x200028d0

0001612c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1612e:	4607      	mov	r7, r0
   16130:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16132:	2400      	movs	r4, #0
   16134:	2c00      	cmp	r4, #0
   16136:	dd02      	ble.n	1613e <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   16138:	2500      	movs	r5, #0
}
   1613a:	4628      	mov	r0, r5
   1613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1613e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16142:	480c      	ldr	r0, [pc, #48]	; (16174 <bt_conn_lookup_addr_le+0x48>)
   16144:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   16148:	f00b fb23 	bl	21792 <bt_conn_ref>
		if (!conn) {
   1614c:	4605      	mov	r5, r0
   1614e:	b170      	cbz	r0, 1616e <bt_conn_lookup_addr_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
   16150:	7883      	ldrb	r3, [r0, #2]
   16152:	2b01      	cmp	r3, #1
   16154:	d109      	bne.n	1616a <bt_conn_lookup_addr_le+0x3e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16156:	4632      	mov	r2, r6
   16158:	4639      	mov	r1, r7
   1615a:	f00b fbaf 	bl	218bc <bt_conn_is_peer_addr_le>
   1615e:	2800      	cmp	r0, #0
   16160:	d1eb      	bne.n	1613a <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   16162:	4628      	mov	r0, r5
   16164:	f00b fb3c 	bl	217e0 <bt_conn_unref>
			continue;
   16168:	e001      	b.n	1616e <bt_conn_lookup_addr_le+0x42>
			bt_conn_unref(conn);
   1616a:	f00b fb39 	bl	217e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1616e:	3401      	adds	r4, #1
   16170:	e7e0      	b.n	16134 <bt_conn_lookup_addr_le+0x8>
   16172:	bf00      	nop
   16174:	20001af0 	.word	0x20001af0

00016178 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1617c:	4607      	mov	r7, r0
   1617e:	460e      	mov	r6, r1
   16180:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16182:	2400      	movs	r4, #0
   16184:	2c00      	cmp	r4, #0
   16186:	dd03      	ble.n	16190 <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   16188:	2500      	movs	r5, #0
}
   1618a:	4628      	mov	r0, r5
   1618c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16190:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   16194:	4b10      	ldr	r3, [pc, #64]	; (161d8 <bt_conn_lookup_state_le+0x60>)
   16196:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1619a:	f00b fafa 	bl	21792 <bt_conn_ref>
		if (!conn) {
   1619e:	4605      	mov	r5, r0
   161a0:	b188      	cbz	r0, 161c6 <bt_conn_lookup_state_le+0x4e>
		if (conn->type != BT_CONN_TYPE_LE) {
   161a2:	7883      	ldrb	r3, [r0, #2]
   161a4:	2b01      	cmp	r3, #1
   161a6:	d110      	bne.n	161ca <bt_conn_lookup_state_le+0x52>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   161a8:	b126      	cbz	r6, 161b4 <bt_conn_lookup_state_le+0x3c>
   161aa:	4632      	mov	r2, r6
   161ac:	4639      	mov	r1, r7
   161ae:	f00b fb85 	bl	218bc <bt_conn_is_peer_addr_le>
   161b2:	b168      	cbz	r0, 161d0 <bt_conn_lookup_state_le+0x58>
		if (!(conn->state == state && conn->id == id)) {
   161b4:	7aab      	ldrb	r3, [r5, #10]
   161b6:	4543      	cmp	r3, r8
   161b8:	d102      	bne.n	161c0 <bt_conn_lookup_state_le+0x48>
   161ba:	7a2b      	ldrb	r3, [r5, #8]
   161bc:	42bb      	cmp	r3, r7
   161be:	d0e4      	beq.n	1618a <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   161c0:	4628      	mov	r0, r5
   161c2:	f00b fb0d 	bl	217e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   161c6:	3401      	adds	r4, #1
   161c8:	e7dc      	b.n	16184 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   161ca:	f00b fb09 	bl	217e0 <bt_conn_unref>
			continue;
   161ce:	e7fa      	b.n	161c6 <bt_conn_lookup_state_le+0x4e>
			bt_conn_unref(conn);
   161d0:	4628      	mov	r0, r5
   161d2:	f00b fb05 	bl	217e0 <bt_conn_unref>
			continue;
   161d6:	e7f6      	b.n	161c6 <bt_conn_lookup_state_le+0x4e>
   161d8:	20001af0 	.word	0x20001af0

000161dc <send_conn_le_param_update>:
{
   161dc:	b538      	push	{r3, r4, r5, lr}
   161de:	4604      	mov	r4, r0
   161e0:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   161e2:	4608      	mov	r0, r1
   161e4:	f00a fd01 	bl	20bea <bt_le_conn_params_valid>
   161e8:	b360      	cbz	r0, 16244 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   161ea:	4b18      	ldr	r3, [pc, #96]	; (1624c <send_conn_le_param_update+0x70>)
   161ec:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   161f0:	f013 0f02 	tst.w	r3, #2
   161f4:	d004      	beq.n	16200 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   161f6:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   161fa:	f013 0f02 	tst.w	r3, #2
   161fe:	d113      	bne.n	16228 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   16200:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   16202:	b9d3      	cbnz	r3, 1623a <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   16204:	4629      	mov	r1, r5
   16206:	4620      	mov	r0, r4
   16208:	f00b fb89 	bl	2191e <bt_conn_le_conn_update>
		if (rc == 0) {
   1620c:	b9c8      	cbnz	r0, 16242 <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   1620e:	882b      	ldrh	r3, [r5, #0]
   16210:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   16214:	886b      	ldrh	r3, [r5, #2]
   16216:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1621a:	88ab      	ldrh	r3, [r5, #4]
   1621c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   16220:	88eb      	ldrh	r3, [r5, #6]
   16222:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   16226:	e00c      	b.n	16242 <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16228:	f3bf 8f5b 	dmb	ish
   1622c:	6863      	ldr	r3, [r4, #4]
   1622e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   16232:	f413 6f80 	tst.w	r3, #1024	; 0x400
   16236:	d1e3      	bne.n	16200 <send_conn_le_param_update+0x24>
   16238:	e7e4      	b.n	16204 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1623a:	4629      	mov	r1, r5
   1623c:	4620      	mov	r0, r4
   1623e:	f00b fd2a 	bl	21c96 <bt_l2cap_update_conn_param>
}
   16242:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16244:	f06f 0015 	mvn.w	r0, #21
   16248:	e7fb      	b.n	16242 <send_conn_le_param_update+0x66>
   1624a:	bf00      	nop
   1624c:	200002b0 	.word	0x200002b0

00016250 <deferred_work>:
{
   16250:	b530      	push	{r4, r5, lr}
   16252:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   16254:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   16258:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1625c:	b3b3      	cbz	r3, 162cc <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   1625e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   16262:	2b01      	cmp	r3, #1
   16264:	d130      	bne.n	162c8 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   16266:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1626a:	f3bf 8f5b 	dmb	ish
   1626e:	e855 3f00 	ldrex	r3, [r5]
   16272:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   16276:	e845 2100 	strex	r1, r2, [r5]
   1627a:	2900      	cmp	r1, #0
   1627c:	d1f7      	bne.n	1626e <deferred_work+0x1e>
   1627e:	f3bf 8f5b 	dmb	ish
   16282:	f413 7f00 	tst.w	r3, #512	; 0x200
   16286:	d02b      	beq.n	162e0 <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16288:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1628c:	f8ad 3000 	strh.w	r3, [sp]
   16290:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   16294:	f8ad 3002 	strh.w	r3, [sp, #2]
   16298:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1629c:	f8ad 3004 	strh.w	r3, [sp, #4]
   162a0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   162a4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   162a8:	4669      	mov	r1, sp
   162aa:	4620      	mov	r0, r4
   162ac:	f7ff ff96 	bl	161dc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   162b0:	f3bf 8f5b 	dmb	ish
   162b4:	e855 3f00 	ldrex	r3, [r5]
   162b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   162bc:	e845 3200 	strex	r2, r3, [r5]
   162c0:	2a00      	cmp	r2, #0
   162c2:	d1f7      	bne.n	162b4 <deferred_work+0x64>
   162c4:	f3bf 8f5b 	dmb	ish
}
   162c8:	b005      	add	sp, #20
   162ca:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   162cc:	4620      	mov	r0, r4
   162ce:	f00b fbfd 	bl	21acc <bt_l2cap_disconnected>
		notify_disconnected(conn);
   162d2:	4620      	mov	r0, r4
   162d4:	f7ff fd16 	bl	15d04 <notify_disconnected>
		bt_conn_unref(conn);
   162d8:	4620      	mov	r0, r4
   162da:	f00b fa81 	bl	217e0 <bt_conn_unref>
		return;
   162de:	e7f3      	b.n	162c8 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   162e0:	4a05      	ldr	r2, [pc, #20]	; (162f8 <deferred_work+0xa8>)
   162e2:	ab02      	add	r3, sp, #8
   162e4:	e892 0003 	ldmia.w	r2, {r0, r1}
   162e8:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   162ec:	4619      	mov	r1, r3
   162ee:	4620      	mov	r0, r4
   162f0:	f7ff ff74 	bl	161dc <send_conn_le_param_update>
   162f4:	e7dc      	b.n	162b0 <deferred_work+0x60>
   162f6:	bf00      	nop
   162f8:	00025c40 	.word	0x00025c40

000162fc <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   162fc:	b508      	push	{r3, lr}
   162fe:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   16300:	4801      	ldr	r0, [pc, #4]	; (16308 <bt_conn_create_frag_timeout+0xc>)
   16302:	f7ff fe6b 	bl	15fdc <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   16306:	bd08      	pop	{r3, pc}
   16308:	20000b6c 	.word	0x20000b6c

0001630c <create_frag>:
{
   1630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1630e:	4606      	mov	r6, r0
   16310:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   16312:	f04f 32ff 	mov.w	r2, #4294967295
   16316:	f04f 33ff 	mov.w	r3, #4294967295
   1631a:	2000      	movs	r0, #0
   1631c:	f7ff ffee 	bl	162fc <bt_conn_create_frag_timeout>
   16320:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16322:	7ab3      	ldrb	r3, [r6, #10]
   16324:	2b07      	cmp	r3, #7
   16326:	d11a      	bne.n	1635e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   16328:	2300      	movs	r3, #0
   1632a:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   1632c:	4b10      	ldr	r3, [pc, #64]	; (16370 <create_frag+0x64>)
   1632e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16332:	f100 0708 	add.w	r7, r0, #8
   16336:	4638      	mov	r0, r7
   16338:	f00d fa43 	bl	237c2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1633c:	4286      	cmp	r6, r0
   1633e:	d212      	bcs.n	16366 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   16340:	4b0b      	ldr	r3, [pc, #44]	; (16370 <create_frag+0x64>)
   16342:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16346:	4632      	mov	r2, r6
   16348:	f855 1f08 	ldr.w	r1, [r5, #8]!
   1634c:	4638      	mov	r0, r7
   1634e:	f00d fa02 	bl	23756 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16352:	4631      	mov	r1, r6
   16354:	4628      	mov	r0, r5
   16356:	f00d fa18 	bl	2378a <net_buf_simple_pull>
}
   1635a:	4620      	mov	r0, r4
   1635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1635e:	f00d f9aa 	bl	236b6 <net_buf_unref>
		return NULL;
   16362:	2400      	movs	r4, #0
   16364:	e7f9      	b.n	1635a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   16366:	4638      	mov	r0, r7
   16368:	f00d fa2b 	bl	237c2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1636c:	b286      	uxth	r6, r0
   1636e:	e7ea      	b.n	16346 <create_frag+0x3a>
   16370:	200002b0 	.word	0x200002b0

00016374 <send_buf>:
{
   16374:	b538      	push	{r3, r4, r5, lr}
   16376:	4605      	mov	r5, r0
   16378:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1637a:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   1637c:	4a1b      	ldr	r2, [pc, #108]	; (163ec <send_buf+0x78>)
   1637e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   16382:	429a      	cmp	r2, r3
   16384:	d21f      	bcs.n	163c6 <send_buf+0x52>
	frag = create_frag(conn, buf);
   16386:	f7ff ffc1 	bl	1630c <create_frag>
	if (!frag) {
   1638a:	4601      	mov	r1, r0
   1638c:	b350      	cbz	r0, 163e4 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1638e:	2301      	movs	r3, #1
   16390:	2200      	movs	r2, #0
   16392:	4628      	mov	r0, r5
   16394:	f00b f85c 	bl	21450 <send_frag>
   16398:	4603      	mov	r3, r0
   1639a:	b1c8      	cbz	r0, 163d0 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1639c:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1639e:	4a13      	ldr	r2, [pc, #76]	; (163ec <send_buf+0x78>)
   163a0:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   163a4:	429a      	cmp	r2, r3
   163a6:	d215      	bcs.n	163d4 <send_buf+0x60>
		frag = create_frag(conn, buf);
   163a8:	4621      	mov	r1, r4
   163aa:	4628      	mov	r0, r5
   163ac:	f7ff ffae 	bl	1630c <create_frag>
		if (!frag) {
   163b0:	4601      	mov	r1, r0
   163b2:	b1c8      	cbz	r0, 163e8 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   163b4:	2301      	movs	r3, #1
   163b6:	461a      	mov	r2, r3
   163b8:	4628      	mov	r0, r5
   163ba:	f00b f849 	bl	21450 <send_frag>
   163be:	4603      	mov	r3, r0
   163c0:	2800      	cmp	r0, #0
   163c2:	d1eb      	bne.n	1639c <send_buf+0x28>
   163c4:	e004      	b.n	163d0 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   163c6:	2300      	movs	r3, #0
   163c8:	2202      	movs	r2, #2
   163ca:	f00b f841 	bl	21450 <send_frag>
   163ce:	4603      	mov	r3, r0
}
   163d0:	4618      	mov	r0, r3
   163d2:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   163d4:	2300      	movs	r3, #0
   163d6:	2203      	movs	r2, #3
   163d8:	4621      	mov	r1, r4
   163da:	4628      	mov	r0, r5
   163dc:	f00b f838 	bl	21450 <send_frag>
   163e0:	4603      	mov	r3, r0
   163e2:	e7f5      	b.n	163d0 <send_buf+0x5c>
		return false;
   163e4:	2300      	movs	r3, #0
   163e6:	e7f3      	b.n	163d0 <send_buf+0x5c>
			return false;
   163e8:	2300      	movs	r3, #0
   163ea:	e7f1      	b.n	163d0 <send_buf+0x5c>
   163ec:	200002b0 	.word	0x200002b0

000163f0 <bt_conn_process_tx>:
{
   163f0:	b538      	push	{r3, r4, r5, lr}
   163f2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   163f4:	7a83      	ldrb	r3, [r0, #10]
   163f6:	b97b      	cbnz	r3, 16418 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   163f8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163fa:	f3bf 8f5b 	dmb	ish
   163fe:	e853 2f00 	ldrex	r2, [r3]
   16402:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   16406:	e843 1000 	strex	r0, r1, [r3]
   1640a:	2800      	cmp	r0, #0
   1640c:	d1f7      	bne.n	163fe <bt_conn_process_tx+0xe>
   1640e:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   16412:	f012 0f40 	tst.w	r2, #64	; 0x40
   16416:	d10d      	bne.n	16434 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16418:	2200      	movs	r2, #0
   1641a:	2300      	movs	r3, #0
   1641c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16420:	f00d f91d 	bl	2365e <net_buf_get>
	BT_ASSERT(buf);
   16424:	4605      	mov	r5, r0
   16426:	b148      	cbz	r0, 1643c <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   16428:	4629      	mov	r1, r5
   1642a:	4620      	mov	r0, r4
   1642c:	f7ff ffa2 	bl	16374 <send_buf>
   16430:	b190      	cbz	r0, 16458 <bt_conn_process_tx+0x68>
}
   16432:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   16434:	4620      	mov	r0, r4
   16436:	f00b f924 	bl	21682 <conn_cleanup>
		return;
   1643a:	e7fa      	b.n	16432 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   1643c:	f240 23e7 	movw	r3, #743	; 0x2e7
   16440:	4a07      	ldr	r2, [pc, #28]	; (16460 <bt_conn_process_tx+0x70>)
   16442:	4908      	ldr	r1, [pc, #32]	; (16464 <bt_conn_process_tx+0x74>)
   16444:	4808      	ldr	r0, [pc, #32]	; (16468 <bt_conn_process_tx+0x78>)
   16446:	f009 fc16 	bl	1fc76 <printk>
   1644a:	4040      	eors	r0, r0
   1644c:	f380 8811 	msr	BASEPRI, r0
   16450:	f04f 0003 	mov.w	r0, #3
   16454:	df02      	svc	2
   16456:	e7e7      	b.n	16428 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   16458:	4628      	mov	r0, r5
   1645a:	f00d f92c 	bl	236b6 <net_buf_unref>
   1645e:	e7e8      	b.n	16432 <bt_conn_process_tx+0x42>
   16460:	00026d60 	.word	0x00026d60
   16464:	00026c94 	.word	0x00026c94
   16468:	00026c18 	.word	0x00026c18

0001646c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1646c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1646e:	2400      	movs	r4, #0
   16470:	e006      	b.n	16480 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   16472:	490a      	ldr	r1, [pc, #40]	; (1649c <bt_conn_init+0x30>)
   16474:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   16478:	4809      	ldr	r0, [pc, #36]	; (164a0 <bt_conn_init+0x34>)
   1647a:	f00e fc7e 	bl	24d7a <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1647e:	3401      	adds	r4, #1
   16480:	2c02      	cmp	r4, #2
   16482:	ddf6      	ble.n	16472 <bt_conn_init+0x6>
	}

	bt_att_init();
   16484:	f00c faa9 	bl	229da <bt_att_init>

	err = bt_smp_init();
   16488:	f00d f807 	bl	2349a <bt_smp_init>
	if (err) {
   1648c:	4604      	mov	r4, r0
   1648e:	b108      	cbz	r0, 16494 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16490:	4620      	mov	r0, r4
   16492:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   16494:	f00b fc2c 	bl	21cf0 <bt_l2cap_init>
	return 0;
   16498:	e7fa      	b.n	16490 <bt_conn_init+0x24>
   1649a:	bf00      	nop
   1649c:	200028d4 	.word	0x200028d4
   164a0:	20000afc 	.word	0x20000afc

000164a4 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   164a4:	4a05      	ldr	r2, [pc, #20]	; (164bc <get_ident+0x18>)
   164a6:	7813      	ldrb	r3, [r2, #0]
   164a8:	3301      	adds	r3, #1
   164aa:	b2db      	uxtb	r3, r3
   164ac:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   164ae:	b90b      	cbnz	r3, 164b4 <get_ident+0x10>
		ident++;
   164b0:	3301      	adds	r3, #1
   164b2:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   164b4:	4b01      	ldr	r3, [pc, #4]	; (164bc <get_ident+0x18>)
   164b6:	7818      	ldrb	r0, [r3, #0]
   164b8:	4770      	bx	lr
   164ba:	bf00      	nop
   164bc:	20003f74 	.word	0x20003f74

000164c0 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   164c0:	2300      	movs	r3, #0
   164c2:	2b00      	cmp	r3, #0
   164c4:	dd02      	ble.n	164cc <l2cap_accept+0xc>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   164c6:	f06f 000b 	mvn.w	r0, #11
}
   164ca:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
   164cc:	22e8      	movs	r2, #232	; 0xe8
   164ce:	fb02 f203 	mul.w	r2, r2, r3
   164d2:	4807      	ldr	r0, [pc, #28]	; (164f0 <l2cap_accept+0x30>)
   164d4:	5882      	ldr	r2, [r0, r2]
   164d6:	b10a      	cbz	r2, 164dc <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   164d8:	3301      	adds	r3, #1
   164da:	e7f2      	b.n	164c2 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
   164dc:	4a04      	ldr	r2, [pc, #16]	; (164f0 <l2cap_accept+0x30>)
   164de:	20e8      	movs	r0, #232	; 0xe8
   164e0:	fb00 2303 	mla	r3, r0, r3, r2
   164e4:	4a03      	ldr	r2, [pc, #12]	; (164f4 <l2cap_accept+0x34>)
   164e6:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   164e8:	600b      	str	r3, [r1, #0]
		return 0;
   164ea:	2000      	movs	r0, #0
   164ec:	4770      	bx	lr
   164ee:	bf00      	nop
   164f0:	20001bb0 	.word	0x20001bb0
   164f4:	00026db0 	.word	0x00026db0

000164f8 <l2cap_chan_add>:
	if (!ch) {
   164f8:	b1e1      	cbz	r1, 16534 <l2cap_chan_add+0x3c>
{
   164fa:	b570      	push	{r4, r5, r6, lr}
   164fc:	4604      	mov	r4, r0
   164fe:	4615      	mov	r5, r2
   16500:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16502:	490d      	ldr	r1, [pc, #52]	; (16538 <l2cap_chan_add+0x40>)
   16504:	f106 0010 	add.w	r0, r6, #16
   16508:	f00e fd39 	bl	24f7e <k_work_init_delayable>
	atomic_clear(chan->status);
   1650c:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16510:	2200      	movs	r2, #0
   16512:	f3bf 8f5b 	dmb	ish
   16516:	e853 1f00 	ldrex	r1, [r3]
   1651a:	e843 2000 	strex	r0, r2, [r3]
   1651e:	2800      	cmp	r0, #0
   16520:	d1f9      	bne.n	16516 <l2cap_chan_add+0x1e>
   16522:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   16526:	462a      	mov	r2, r5
   16528:	4631      	mov	r1, r6
   1652a:	4620      	mov	r0, r4
   1652c:	f00b fabe 	bl	21aac <bt_l2cap_chan_add>
	return true;
   16530:	2001      	movs	r0, #1
}
   16532:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   16534:	2000      	movs	r0, #0
}
   16536:	4770      	bx	lr
   16538:	00021a97 	.word	0x00021a97

0001653c <bt_l2cap_connected>:
{
   1653c:	b530      	push	{r4, r5, lr}
   1653e:	b083      	sub	sp, #12
   16540:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16542:	4c1a      	ldr	r4, [pc, #104]	; (165ac <bt_l2cap_connected+0x70>)
   16544:	e000      	b.n	16548 <bt_l2cap_connected+0xc>
   16546:	340c      	adds	r4, #12
   16548:	4b19      	ldr	r3, [pc, #100]	; (165b0 <bt_l2cap_connected+0x74>)
   1654a:	429c      	cmp	r4, r3
   1654c:	d22c      	bcs.n	165a8 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   1654e:	6863      	ldr	r3, [r4, #4]
   16550:	a901      	add	r1, sp, #4
   16552:	4628      	mov	r0, r5
   16554:	4798      	blx	r3
   16556:	2800      	cmp	r0, #0
   16558:	dbf5      	blt.n	16546 <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   1655a:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   1655c:	8823      	ldrh	r3, [r4, #0]
   1655e:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   16562:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16566:	68a2      	ldr	r2, [r4, #8]
   16568:	4628      	mov	r0, r5
   1656a:	f7ff ffc5 	bl	164f8 <l2cap_chan_add>
   1656e:	b1d8      	cbz	r0, 165a8 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   16570:	9801      	ldr	r0, [sp, #4]
   16572:	6843      	ldr	r3, [r0, #4]
   16574:	681b      	ldr	r3, [r3, #0]
   16576:	b103      	cbz	r3, 1657a <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   16578:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1657a:	9b01      	ldr	r3, [sp, #4]
   1657c:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1657e:	f3bf 8f5b 	dmb	ish
   16582:	e853 2f00 	ldrex	r2, [r3]
   16586:	f042 0201 	orr.w	r2, r2, #1
   1658a:	e843 2100 	strex	r1, r2, [r3]
   1658e:	2900      	cmp	r1, #0
   16590:	d1f7      	bne.n	16582 <bt_l2cap_connected+0x46>
   16592:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16596:	9801      	ldr	r0, [sp, #4]
   16598:	6843      	ldr	r3, [r0, #4]
   1659a:	699b      	ldr	r3, [r3, #24]
   1659c:	2b00      	cmp	r3, #0
   1659e:	d0d2      	beq.n	16546 <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   165a0:	f100 0168 	add.w	r1, r0, #104	; 0x68
   165a4:	4798      	blx	r3
   165a6:	e7ce      	b.n	16546 <bt_l2cap_connected+0xa>
}
   165a8:	b003      	add	sp, #12
   165aa:	bd30      	pop	{r4, r5, pc}
   165ac:	00025af0 	.word	0x00025af0
   165b0:	00025b14 	.word	0x00025b14

000165b4 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   165b4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   165b6:	4b03      	ldr	r3, [pc, #12]	; (165c4 <att_cfm_sent+0x10>)
   165b8:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   165bc:	f00b fb99 	bl	21cf2 <att_sent>
}
   165c0:	bd08      	pop	{r3, pc}
   165c2:	bf00      	nop
   165c4:	00022095 	.word	0x00022095

000165c8 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   165c8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   165ca:	4b03      	ldr	r3, [pc, #12]	; (165d8 <att_rsp_sent+0x10>)
   165cc:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   165d0:	f00b fb8f 	bl	21cf2 <att_sent>
}
   165d4:	bd08      	pop	{r3, pc}
   165d6:	bf00      	nop
   165d8:	000220b1 	.word	0x000220b1

000165dc <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   165dc:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   165de:	4b03      	ldr	r3, [pc, #12]	; (165ec <att_req_sent+0x10>)
   165e0:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   165e4:	f00b fb85 	bl	21cf2 <att_sent>
}
   165e8:	bd08      	pop	{r3, pc}
   165ea:	bf00      	nop
   165ec:	0002207d 	.word	0x0002207d

000165f0 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   165f0:	4b08      	ldr	r3, [pc, #32]	; (16614 <att_cb+0x24>)
   165f2:	4298      	cmp	r0, r3
   165f4:	d009      	beq.n	1660a <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   165f6:	4b08      	ldr	r3, [pc, #32]	; (16618 <att_cb+0x28>)
   165f8:	4298      	cmp	r0, r3
   165fa:	d008      	beq.n	1660e <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   165fc:	4b07      	ldr	r3, [pc, #28]	; (1661c <att_cb+0x2c>)
   165fe:	4298      	cmp	r0, r3
   16600:	d001      	beq.n	16606 <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   16602:	4807      	ldr	r0, [pc, #28]	; (16620 <att_cb+0x30>)
	}
}
   16604:	4770      	bx	lr
		return att_req_sent;
   16606:	4807      	ldr	r0, [pc, #28]	; (16624 <att_cb+0x34>)
   16608:	4770      	bx	lr
		return att_rsp_sent;
   1660a:	4807      	ldr	r0, [pc, #28]	; (16628 <att_cb+0x38>)
   1660c:	4770      	bx	lr
		return att_cfm_sent;
   1660e:	4807      	ldr	r0, [pc, #28]	; (1662c <att_cb+0x3c>)
   16610:	4770      	bx	lr
   16612:	bf00      	nop
   16614:	000220b1 	.word	0x000220b1
   16618:	00022095 	.word	0x00022095
   1661c:	0002207d 	.word	0x0002207d
   16620:	00021cf3 	.word	0x00021cf3
   16624:	000165dd 	.word	0x000165dd
   16628:	000165c9 	.word	0x000165c9
   1662c:	000165b5 	.word	0x000165b5

00016630 <chan_cb>:
{
   16630:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   16632:	6883      	ldr	r3, [r0, #8]
   16634:	7818      	ldrb	r0, [r3, #0]
   16636:	f00b fba5 	bl	21d84 <att_op_get_type>
   1663a:	3801      	subs	r0, #1
   1663c:	2804      	cmp	r0, #4
   1663e:	d808      	bhi.n	16652 <chan_cb+0x22>
   16640:	e8df f000 	tbb	[pc, r0]
   16644:	09070305 	.word	0x09070305
   16648:	05          	.byte	0x05
   16649:	00          	.byte	0x00
   1664a:	4804      	ldr	r0, [pc, #16]	; (1665c <chan_cb+0x2c>)
   1664c:	e000      	b.n	16650 <chan_cb+0x20>
		return chan_req_sent;
   1664e:	4804      	ldr	r0, [pc, #16]	; (16660 <chan_cb+0x30>)
}
   16650:	bd08      	pop	{r3, pc}
		return NULL;
   16652:	2000      	movs	r0, #0
   16654:	e7fc      	b.n	16650 <chan_cb+0x20>
		return chan_cfm_sent;
   16656:	4803      	ldr	r0, [pc, #12]	; (16664 <chan_cb+0x34>)
   16658:	e7fa      	b.n	16650 <chan_cb+0x20>
   1665a:	bf00      	nop
   1665c:	000220b1 	.word	0x000220b1
   16660:	0002207d 	.word	0x0002207d
   16664:	00022095 	.word	0x00022095

00016668 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   16668:	b570      	push	{r4, r5, r6, lr}
   1666a:	b082      	sub	sp, #8
   1666c:	4605      	mov	r5, r0
   1666e:	460e      	mov	r6, r1
	return list->head;
   16670:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16672:	b10b      	cbz	r3, 16678 <att_chan_new+0x10>
   16674:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   16678:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1667a:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1667c:	e002      	b.n	16684 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   1667e:	3201      	adds	r2, #1
   16680:	e005      	b.n	1668e <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16682:	9301      	str	r3, [sp, #4]
   16684:	9c01      	ldr	r4, [sp, #4]
   16686:	b174      	cbz	r4, 166a6 <att_chan_new+0x3e>
		if (chan->att == att) {
   16688:	6823      	ldr	r3, [r4, #0]
   1668a:	42ab      	cmp	r3, r5
   1668c:	d0f7      	beq.n	1667e <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   1668e:	2a01      	cmp	r2, #1
   16690:	d02e      	beq.n	166f0 <att_chan_new+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16692:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   16696:	d0f4      	beq.n	16682 <att_chan_new+0x1a>
	return node->next;
   16698:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1669c:	2b00      	cmp	r3, #0
   1669e:	d0f0      	beq.n	16682 <att_chan_new+0x1a>
   166a0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   166a4:	e7ed      	b.n	16682 <att_chan_new+0x1a>
			BT_ERR("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   166a6:	2200      	movs	r2, #0
   166a8:	2300      	movs	r3, #0
   166aa:	a901      	add	r1, sp, #4
   166ac:	4811      	ldr	r0, [pc, #68]	; (166f4 <att_chan_new+0x8c>)
   166ae:	f004 f99b 	bl	1a9e8 <k_mem_slab_alloc>
   166b2:	b9d0      	cbnz	r0, 166ea <att_chan_new+0x82>
   166b4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   166b8:	2100      	movs	r1, #0
   166ba:	9801      	ldr	r0, [sp, #4]
   166bc:	f00f f86e 	bl	2579c <memset>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
	chan->chan.chan.ops = &ops;
   166c0:	9801      	ldr	r0, [sp, #4]
   166c2:	4b0d      	ldr	r3, [pc, #52]	; (166f8 <att_chan_new+0x90>)
   166c4:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   166c6:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   166c8:	f00e fb4b 	bl	24d62 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   166cc:	9b01      	ldr	r3, [sp, #4]
   166ce:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   166d0:	f3bf 8f5b 	dmb	ish
   166d4:	e853 2f00 	ldrex	r2, [r3]
   166d8:	e843 6100 	strex	r1, r6, [r3]
   166dc:	2900      	cmp	r1, #0
   166de:	d1f9      	bne.n	166d4 <att_chan_new+0x6c>
   166e0:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   166e4:	9b01      	ldr	r3, [sp, #4]
   166e6:	601d      	str	r5, [r3, #0]

	return chan;
   166e8:	9c01      	ldr	r4, [sp, #4]
}
   166ea:	4620      	mov	r0, r4
   166ec:	b002      	add	sp, #8
   166ee:	bd70      	pop	{r4, r5, r6, pc}
			return NULL;
   166f0:	2400      	movs	r4, #0
   166f2:	e7fa      	b.n	166ea <att_chan_new+0x82>
   166f4:	20000a30 	.word	0x20000a30
   166f8:	200007d8 	.word	0x200007d8

000166fc <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   166fc:	b570      	push	{r4, r5, r6, lr}
   166fe:	b082      	sub	sp, #8
   16700:	4604      	mov	r4, r0
   16702:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16704:	2200      	movs	r2, #0
   16706:	2300      	movs	r3, #0
   16708:	a901      	add	r1, sp, #4
   1670a:	4810      	ldr	r0, [pc, #64]	; (1674c <bt_att_accept+0x50>)
   1670c:	f004 f96c 	bl	1a9e8 <k_mem_slab_alloc>
   16710:	b9b0      	cbnz	r0, 16740 <bt_att_accept+0x44>
   16712:	4606      	mov	r6, r0
   16714:	222c      	movs	r2, #44	; 0x2c
   16716:	2100      	movs	r1, #0
   16718:	9801      	ldr	r0, [sp, #4]
   1671a:	f00f f83f 	bl	2579c <memset>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   1671e:	9b01      	ldr	r3, [sp, #4]
   16720:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   16722:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   16724:	2100      	movs	r1, #0
   16726:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   16728:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1672a:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1672c:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   1672e:	f7ff ff9b 	bl	16668 <att_chan_new>
	if (!chan) {
   16732:	4603      	mov	r3, r0
   16734:	b138      	cbz	r0, 16746 <bt_att_accept+0x4a>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   16736:	3308      	adds	r3, #8
   16738:	602b      	str	r3, [r5, #0]

	return 0;
}
   1673a:	4630      	mov	r0, r6
   1673c:	b002      	add	sp, #8
   1673e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   16740:	f06f 060b 	mvn.w	r6, #11
   16744:	e7f9      	b.n	1673a <bt_att_accept+0x3e>
		return -ENOMEM;
   16746:	f06f 060b 	mvn.w	r6, #11
   1674a:	e7f6      	b.n	1673a <bt_att_accept+0x3e>
   1674c:	20000a14 	.word	0x20000a14

00016750 <bt_att_released>:
{
   16750:	b500      	push	{lr}
   16752:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16754:	3808      	subs	r0, #8
   16756:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   16758:	a901      	add	r1, sp, #4
   1675a:	4803      	ldr	r0, [pc, #12]	; (16768 <bt_att_released+0x18>)
   1675c:	f00e f9e7 	bl	24b2e <k_mem_slab_free>
}
   16760:	b003      	add	sp, #12
   16762:	f85d fb04 	ldr.w	pc, [sp], #4
   16766:	bf00      	nop
   16768:	20000a30 	.word	0x20000a30

0001676c <read_group_cb>:
{
   1676c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1676e:	b085      	sub	sp, #20
   16770:	4605      	mov	r5, r0
   16772:	460e      	mov	r6, r1
   16774:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16776:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16778:	2300      	movs	r3, #0
   1677a:	f88d 3008 	strb.w	r3, [sp, #8]
   1677e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16782:	f8ad 300a 	strh.w	r3, [sp, #10]
   16786:	a902      	add	r1, sp, #8
   16788:	6800      	ldr	r0, [r0, #0]
   1678a:	f00a f867 	bl	2085c <bt_uuid_cmp>
   1678e:	b158      	cbz	r0, 167a8 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16790:	2300      	movs	r3, #0
   16792:	f88d 300c 	strb.w	r3, [sp, #12]
   16796:	f642 0301 	movw	r3, #10241	; 0x2801
   1679a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1679e:	a903      	add	r1, sp, #12
   167a0:	6828      	ldr	r0, [r5, #0]
   167a2:	f00a f85b 	bl	2085c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   167a6:	bb30      	cbnz	r0, 167f6 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   167a8:	6861      	ldr	r1, [r4, #4]
   167aa:	6828      	ldr	r0, [r5, #0]
   167ac:	f00a f856 	bl	2085c <bt_uuid_cmp>
   167b0:	bb48      	cbnz	r0, 16806 <read_group_cb+0x9a>
	if (data->rsp->len &&
   167b2:	68e3      	ldr	r3, [r4, #12]
   167b4:	781a      	ldrb	r2, [r3, #0]
   167b6:	b132      	cbz	r2, 167c6 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   167b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   167bc:	68a1      	ldr	r1, [r4, #8]
   167be:	8989      	ldrh	r1, [r1, #12]
   167c0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   167c2:	4293      	cmp	r3, r2
   167c4:	db24      	blt.n	16810 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   167c6:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   167c8:	2104      	movs	r1, #4
   167ca:	3008      	adds	r0, #8
   167cc:	f00c ffbd 	bl	2374a <net_buf_simple_add>
   167d0:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   167d2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   167d4:	6923      	ldr	r3, [r4, #16]
   167d6:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   167d8:	9401      	str	r4, [sp, #4]
   167da:	4b10      	ldr	r3, [pc, #64]	; (1681c <read_group_cb+0xb0>)
   167dc:	9300      	str	r3, [sp, #0]
   167de:	2300      	movs	r3, #0
   167e0:	68a2      	ldr	r2, [r4, #8]
   167e2:	4629      	mov	r1, r5
   167e4:	4638      	mov	r0, r7
   167e6:	f00b fd46 	bl	22276 <att_chan_read>
	if (read < 0) {
   167ea:	2800      	cmp	r0, #0
   167ec:	db12      	blt.n	16814 <read_group_cb+0xa8>
	if (!data->group) {
   167ee:	6923      	ldr	r3, [r4, #16]
   167f0:	b193      	cbz	r3, 16818 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   167f2:	2001      	movs	r0, #1
   167f4:	e00a      	b.n	1680c <read_group_cb+0xa0>
		if (data->group &&
   167f6:	6923      	ldr	r3, [r4, #16]
   167f8:	b11b      	cbz	r3, 16802 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   167fa:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   167fc:	42b2      	cmp	r2, r6
   167fe:	d200      	bcs.n	16802 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16800:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16802:	2001      	movs	r0, #1
   16804:	e002      	b.n	1680c <read_group_cb+0xa0>
		data->group = NULL;
   16806:	2300      	movs	r3, #0
   16808:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1680a:	2001      	movs	r0, #1
}
   1680c:	b005      	add	sp, #20
   1680e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   16810:	2000      	movs	r0, #0
   16812:	e7fb      	b.n	1680c <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   16814:	2000      	movs	r0, #0
   16816:	e7f9      	b.n	1680c <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   16818:	2000      	movs	r0, #0
   1681a:	e7f7      	b.n	1680c <read_group_cb+0xa0>
   1681c:	00021d57 	.word	0x00021d57

00016820 <read_type_cb>:
{
   16820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16824:	b083      	sub	sp, #12
   16826:	4606      	mov	r6, r0
   16828:	4688      	mov	r8, r1
   1682a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1682c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1682e:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16830:	6851      	ldr	r1, [r2, #4]
   16832:	6800      	ldr	r0, [r0, #0]
   16834:	f00a f812 	bl	2085c <bt_uuid_cmp>
   16838:	b120      	cbz	r0, 16844 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1683a:	2501      	movs	r5, #1
}
   1683c:	4628      	mov	r0, r5
   1683e:	b003      	add	sp, #12
   16840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16844:	2215      	movs	r2, #21
   16846:	4631      	mov	r1, r6
   16848:	4628      	mov	r0, r5
   1684a:	f00c fd50 	bl	232ee <bt_gatt_check_perm>
   1684e:	4605      	mov	r5, r0
   16850:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16852:	b130      	cbz	r0, 16862 <read_type_cb+0x42>
		if (data->rsp->len) {
   16854:	68e3      	ldr	r3, [r4, #12]
   16856:	781b      	ldrb	r3, [r3, #0]
   16858:	b10b      	cbz	r3, 1685e <read_type_cb+0x3e>
			data->err = 0x00;
   1685a:	2300      	movs	r3, #0
   1685c:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1685e:	2500      	movs	r5, #0
   16860:	e7ec      	b.n	1683c <read_type_cb+0x1c>
	data->err = 0x00;
   16862:	f04f 0900 	mov.w	r9, #0
   16866:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1686a:	68a0      	ldr	r0, [r4, #8]
   1686c:	f00c ff4d 	bl	2370a <net_buf_frag_last>
   16870:	2102      	movs	r1, #2
   16872:	3008      	adds	r0, #8
   16874:	f00c ff69 	bl	2374a <net_buf_simple_add>
   16878:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1687a:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1687e:	9401      	str	r4, [sp, #4]
   16880:	4b11      	ldr	r3, [pc, #68]	; (168c8 <read_type_cb+0xa8>)
   16882:	9300      	str	r3, [sp, #0]
   16884:	464b      	mov	r3, r9
   16886:	68a2      	ldr	r2, [r4, #8]
   16888:	4631      	mov	r1, r6
   1688a:	4638      	mov	r0, r7
   1688c:	f00b fcf3 	bl	22276 <att_chan_read>
	if (read < 0) {
   16890:	2800      	cmp	r0, #0
   16892:	db07      	blt.n	168a4 <read_type_cb+0x84>
	if (!data->item) {
   16894:	6923      	ldr	r3, [r4, #16]
   16896:	2b00      	cmp	r3, #0
   16898:	d0d0      	beq.n	1683c <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1689a:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   1689e:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   168a0:	2200      	movs	r2, #0

	while (buf) {
   168a2:	e006      	b.n	168b2 <read_type_cb+0x92>
		data->err = err_to_att(read);
   168a4:	f00b fa3b 	bl	21d1e <err_to_att>
   168a8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   168aa:	e7c7      	b.n	1683c <read_type_cb+0x1c>
		bytes += buf->len;
   168ac:	8999      	ldrh	r1, [r3, #12]
   168ae:	440a      	add	r2, r1
		buf = buf->frags;
   168b0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   168b2:	2b00      	cmp	r3, #0
   168b4:	d1fa      	bne.n	168ac <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   168b6:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   168b8:	68e3      	ldr	r3, [r4, #12]
   168ba:	781d      	ldrb	r5, [r3, #0]
   168bc:	42aa      	cmp	r2, r5
   168be:	bf94      	ite	ls
   168c0:	2500      	movls	r5, #0
   168c2:	2501      	movhi	r5, #1
   168c4:	e7ba      	b.n	1683c <read_type_cb+0x1c>
   168c6:	bf00      	nop
   168c8:	00021d2f 	.word	0x00021d2f

000168cc <bt_att_connected>:
{
   168cc:	b538      	push	{r3, r4, r5, lr}
   168ce:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   168d0:	4605      	mov	r5, r0
   168d2:	f855 0908 	ldr.w	r0, [r5], #-8
   168d6:	f00b fef2 	bl	226be <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   168da:	4629      	mov	r1, r5
   168dc:	6800      	ldr	r0, [r0, #0]
   168de:	f00b faea 	bl	21eb6 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168e2:	f3bf 8f5b 	dmb	ish
   168e6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   168ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   168ee:	f013 0f08 	tst.w	r3, #8
   168f2:	d104      	bne.n	168fe <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   168f4:	2317      	movs	r3, #23
   168f6:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   168fa:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   168fe:	4628      	mov	r0, r5
   16900:	f00b fe97 	bl	22632 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16904:	4902      	ldr	r1, [pc, #8]	; (16910 <bt_att_connected+0x44>)
   16906:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1690a:	f00e fb38 	bl	24f7e <k_work_init_delayable>
}
   1690e:	bd38      	pop	{r3, r4, r5, pc}
   16910:	00022a89 	.word	0x00022a89

00016914 <send_err_rsp>:
	if (!req) {
   16914:	b901      	cbnz	r1, 16918 <send_err_rsp+0x4>
   16916:	4770      	bx	lr
{
   16918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1691c:	4606      	mov	r6, r0
   1691e:	4615      	mov	r5, r2
   16920:	461c      	mov	r4, r3
   16922:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16924:	2204      	movs	r2, #4
   16926:	2101      	movs	r1, #1
   16928:	f00b fecf 	bl	226ca <bt_att_chan_create_pdu>
	if (!buf) {
   1692c:	4680      	mov	r8, r0
   1692e:	b160      	cbz	r0, 1694a <send_err_rsp+0x36>
	return net_buf_simple_add(&buf->b, len);
   16930:	2104      	movs	r1, #4
   16932:	3008      	adds	r0, #8
   16934:	f00c ff09 	bl	2374a <net_buf_simple_add>
	rsp->request = req;
   16938:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   1693a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1693e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   16940:	4a03      	ldr	r2, [pc, #12]	; (16950 <send_err_rsp+0x3c>)
   16942:	4641      	mov	r1, r8
   16944:	4630      	mov	r0, r6
   16946:	f00b fc89 	bl	2225c <bt_att_chan_send_rsp>
}
   1694a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1694e:	bf00      	nop
   16950:	000220b1 	.word	0x000220b1

00016954 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16954:	898b      	ldrh	r3, [r1, #12]
   16956:	b90b      	cbnz	r3, 1695c <bt_att_recv+0x8>
}
   16958:	2000      	movs	r0, #0
   1695a:	4770      	bx	lr
{
   1695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16960:	4606      	mov	r6, r0
   16962:	460d      	mov	r5, r1
   16964:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   16968:	2101      	movs	r1, #1
   1696a:	f105 0008 	add.w	r0, r5, #8
   1696e:	f00c ff14 	bl	2379a <net_buf_simple_pull_mem>
   16972:	4607      	mov	r7, r0
	if (!att_chan->att) {
   16974:	f856 3c08 	ldr.w	r3, [r6, #-8]
   16978:	2b00      	cmp	r3, #0
   1697a:	d054      	beq.n	16a26 <bt_att_recv+0xd2>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1697c:	2300      	movs	r3, #0
   1697e:	2b0c      	cmp	r3, #12
   16980:	d80b      	bhi.n	1699a <bt_att_recv+0x46>
		if (hdr->code == handlers[i].op) {
   16982:	783c      	ldrb	r4, [r7, #0]
   16984:	4a2e      	ldr	r2, [pc, #184]	; (16a40 <bt_att_recv+0xec>)
   16986:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1698a:	4294      	cmp	r4, r2
   1698c:	d001      	beq.n	16992 <bt_att_recv+0x3e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1698e:	3301      	adds	r3, #1
   16990:	e7f5      	b.n	1697e <bt_att_recv+0x2a>
			handler = &handlers[i];
   16992:	4c2b      	ldr	r4, [pc, #172]	; (16a40 <bt_att_recv+0xec>)
   16994:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   16998:	e000      	b.n	1699c <bt_att_recv+0x48>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1699a:	2400      	movs	r4, #0
	if (!handler) {
   1699c:	b174      	cbz	r4, 169bc <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
   1699e:	78a3      	ldrb	r3, [r4, #2]
   169a0:	2b01      	cmp	r3, #1
   169a2:	d019      	beq.n	169d8 <bt_att_recv+0x84>
		} else if (handler->type == ATT_INDICATION &&
   169a4:	78a3      	ldrb	r3, [r4, #2]
   169a6:	2b05      	cmp	r3, #5
   169a8:	d028      	beq.n	169fc <bt_att_recv+0xa8>
	if (buf->len < handler->expect_len) {
   169aa:	89aa      	ldrh	r2, [r5, #12]
   169ac:	7863      	ldrb	r3, [r4, #1]
   169ae:	429a      	cmp	r2, r3
   169b0:	d335      	bcc.n	16a1e <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
   169b2:	6863      	ldr	r3, [r4, #4]
   169b4:	4629      	mov	r1, r5
   169b6:	4640      	mov	r0, r8
   169b8:	4798      	blx	r3
   169ba:	e031      	b.n	16a20 <bt_att_recv+0xcc>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   169bc:	783c      	ldrb	r4, [r7, #0]
   169be:	4620      	mov	r0, r4
   169c0:	f00b f9e0 	bl	21d84 <att_op_get_type>
   169c4:	b378      	cbz	r0, 16a26 <bt_att_recv+0xd2>
   169c6:	2805      	cmp	r0, #5
   169c8:	d02d      	beq.n	16a26 <bt_att_recv+0xd2>
			send_err_rsp(att_chan, hdr->code, 0,
   169ca:	2306      	movs	r3, #6
   169cc:	2200      	movs	r2, #0
   169ce:	4621      	mov	r1, r4
   169d0:	4640      	mov	r0, r8
   169d2:	f7ff ff9f 	bl	16914 <send_err_rsp>
		return 0;
   169d6:	e026      	b.n	16a26 <bt_att_recv+0xd2>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   169d8:	f106 03e8 	add.w	r3, r6, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   169dc:	f3bf 8f5b 	dmb	ish
   169e0:	e853 2f00 	ldrex	r2, [r3]
   169e4:	f042 0101 	orr.w	r1, r2, #1
   169e8:	e843 1000 	strex	r0, r1, [r3]
   169ec:	2800      	cmp	r0, #0
   169ee:	d1f7      	bne.n	169e0 <bt_att_recv+0x8c>
   169f0:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   169f4:	f012 0f01 	tst.w	r2, #1
   169f8:	d0d4      	beq.n	169a4 <bt_att_recv+0x50>
   169fa:	e014      	b.n	16a26 <bt_att_recv+0xd2>
			   atomic_test_and_set_bit(att_chan->flags,
   169fc:	36e8      	adds	r6, #232	; 0xe8
   169fe:	f3bf 8f5b 	dmb	ish
   16a02:	e856 3f00 	ldrex	r3, [r6]
   16a06:	f043 0202 	orr.w	r2, r3, #2
   16a0a:	e846 2100 	strex	r1, r2, [r6]
   16a0e:	2900      	cmp	r1, #0
   16a10:	d1f7      	bne.n	16a02 <bt_att_recv+0xae>
   16a12:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   16a16:	f013 0f02 	tst.w	r3, #2
   16a1a:	d0c6      	beq.n	169aa <bt_att_recv+0x56>
   16a1c:	e003      	b.n	16a26 <bt_att_recv+0xd2>
		err = BT_ATT_ERR_INVALID_PDU;
   16a1e:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   16a20:	78a3      	ldrb	r3, [r4, #2]
   16a22:	2b01      	cmp	r3, #1
   16a24:	d002      	beq.n	16a2c <bt_att_recv+0xd8>
}
   16a26:	2000      	movs	r0, #0
   16a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   16a2c:	2800      	cmp	r0, #0
   16a2e:	d0fa      	beq.n	16a26 <bt_att_recv+0xd2>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16a30:	4603      	mov	r3, r0
   16a32:	2200      	movs	r2, #0
   16a34:	7839      	ldrb	r1, [r7, #0]
   16a36:	4640      	mov	r0, r8
   16a38:	f7ff ff6c 	bl	16914 <send_err_rsp>
   16a3c:	e7f3      	b.n	16a26 <bt_att_recv+0xd2>
   16a3e:	bf00      	nop
   16a40:	00026dd4 	.word	0x00026dd4

00016a44 <att_write_rsp>:
{
   16a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a48:	b08a      	sub	sp, #40	; 0x28
   16a4a:	4604      	mov	r4, r0
   16a4c:	4616      	mov	r6, r2
   16a4e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16a50:	6803      	ldr	r3, [r0, #0]
   16a52:	4688      	mov	r8, r1
   16a54:	3900      	subs	r1, #0
   16a56:	bf18      	it	ne
   16a58:	2101      	movne	r1, #1
   16a5a:	6818      	ldr	r0, [r3, #0]
   16a5c:	f00c fca5 	bl	233aa <bt_gatt_change_aware>
   16a60:	2800      	cmp	r0, #0
   16a62:	d051      	beq.n	16b08 <att_write_rsp+0xc4>
	if (!handle) {
   16a64:	b925      	cbnz	r5, 16a70 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16a66:	2701      	movs	r7, #1
}
   16a68:	4638      	mov	r0, r7
   16a6a:	b00a      	add	sp, #40	; 0x28
   16a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   16a70:	2300      	movs	r3, #0
   16a72:	9304      	str	r3, [sp, #16]
   16a74:	9305      	str	r3, [sp, #20]
   16a76:	9306      	str	r3, [sp, #24]
   16a78:	9307      	str	r3, [sp, #28]
   16a7a:	9308      	str	r3, [sp, #32]
   16a7c:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   16a7e:	b13e      	cbz	r6, 16a90 <att_write_rsp+0x4c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16a80:	461a      	mov	r2, r3
   16a82:	4631      	mov	r1, r6
   16a84:	4620      	mov	r0, r4
   16a86:	f00b fe20 	bl	226ca <bt_att_chan_create_pdu>
   16a8a:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   16a8c:	2800      	cmp	r0, #0
   16a8e:	d03d      	beq.n	16b0c <att_write_rsp+0xc8>
	data.conn = chan->att->conn;
   16a90:	6823      	ldr	r3, [r4, #0]
   16a92:	681b      	ldr	r3, [r3, #0]
   16a94:	9304      	str	r3, [sp, #16]
	data.req = req;
   16a96:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   16a9a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   16a9e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   16aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16aa4:	9307      	str	r3, [sp, #28]
	data.len = len;
   16aa6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   16aaa:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16aae:	2301      	movs	r3, #1
   16ab0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   16ab4:	ab04      	add	r3, sp, #16
   16ab6:	9302      	str	r3, [sp, #8]
   16ab8:	4b15      	ldr	r3, [pc, #84]	; (16b10 <att_write_rsp+0xcc>)
   16aba:	9301      	str	r3, [sp, #4]
   16abc:	2200      	movs	r2, #0
   16abe:	9200      	str	r2, [sp, #0]
   16ac0:	4613      	mov	r3, r2
   16ac2:	4629      	mov	r1, r5
   16ac4:	4628      	mov	r0, r5
   16ac6:	f000 fc19 	bl	172fc <bt_gatt_foreach_attr_type>
	if (data.err) {
   16aca:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   16ace:	b93f      	cbnz	r7, 16ae0 <att_write_rsp+0x9c>
	if (data.buf) {
   16ad0:	9905      	ldr	r1, [sp, #20]
   16ad2:	2900      	cmp	r1, #0
   16ad4:	d0c8      	beq.n	16a68 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16ad6:	4a0f      	ldr	r2, [pc, #60]	; (16b14 <att_write_rsp+0xd0>)
   16ad8:	4620      	mov	r0, r4
   16ada:	f00b fbbf 	bl	2225c <bt_att_chan_send_rsp>
   16ade:	e7c3      	b.n	16a68 <att_write_rsp+0x24>
		if (rsp) {
   16ae0:	b926      	cbnz	r6, 16aec <att_write_rsp+0xa8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   16ae2:	f1b8 0f18 	cmp.w	r8, #24
   16ae6:	d00c      	beq.n	16b02 <att_write_rsp+0xbe>
   16ae8:	2700      	movs	r7, #0
   16aea:	e7bd      	b.n	16a68 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   16aec:	9805      	ldr	r0, [sp, #20]
   16aee:	f00c fde2 	bl	236b6 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   16af2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   16af6:	462a      	mov	r2, r5
   16af8:	4641      	mov	r1, r8
   16afa:	4620      	mov	r0, r4
   16afc:	f7ff ff0a 	bl	16914 <send_err_rsp>
   16b00:	e7ef      	b.n	16ae2 <att_write_rsp+0x9e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   16b02:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   16b06:	e7af      	b.n	16a68 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16b08:	2712      	movs	r7, #18
   16b0a:	e7ad      	b.n	16a68 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   16b0c:	270e      	movs	r7, #14
   16b0e:	e7ab      	b.n	16a68 <att_write_rsp+0x24>
   16b10:	000221ff 	.word	0x000221ff
   16b14:	000220b1 	.word	0x000220b1

00016b18 <att_read_group_rsp>:
{
   16b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b1c:	b08a      	sub	sp, #40	; 0x28
   16b1e:	4605      	mov	r5, r0
   16b20:	4688      	mov	r8, r1
   16b22:	4616      	mov	r6, r2
   16b24:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   16b26:	2400      	movs	r4, #0
   16b28:	9405      	str	r4, [sp, #20]
   16b2a:	9406      	str	r4, [sp, #24]
   16b2c:	9407      	str	r4, [sp, #28]
   16b2e:	9408      	str	r4, [sp, #32]
   16b30:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16b32:	2201      	movs	r2, #1
   16b34:	2111      	movs	r1, #17
   16b36:	6880      	ldr	r0, [r0, #8]
   16b38:	f00b fe1d 	bl	22776 <bt_att_create_pdu>
   16b3c:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   16b3e:	b358      	cbz	r0, 16b98 <att_read_group_rsp+0x80>
	data.chan = chan;
   16b40:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   16b42:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   16b46:	2101      	movs	r1, #1
   16b48:	3008      	adds	r0, #8
   16b4a:	f00c fdfe 	bl	2374a <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16b4e:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   16b50:	4622      	mov	r2, r4
   16b52:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   16b54:	9409      	str	r4, [sp, #36]	; 0x24
   16b56:	ab05      	add	r3, sp, #20
   16b58:	9302      	str	r3, [sp, #8]
   16b5a:	4b10      	ldr	r3, [pc, #64]	; (16b9c <att_read_group_rsp+0x84>)
   16b5c:	9301      	str	r3, [sp, #4]
   16b5e:	9400      	str	r4, [sp, #0]
   16b60:	4623      	mov	r3, r4
   16b62:	4639      	mov	r1, r7
   16b64:	4630      	mov	r0, r6
   16b66:	f000 fbc9 	bl	172fc <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   16b6a:	9b08      	ldr	r3, [sp, #32]
   16b6c:	781c      	ldrb	r4, [r3, #0]
   16b6e:	b14c      	cbz	r4, 16b84 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16b70:	4a0b      	ldr	r2, [pc, #44]	; (16ba0 <att_read_group_rsp+0x88>)
   16b72:	9907      	ldr	r1, [sp, #28]
   16b74:	4628      	mov	r0, r5
   16b76:	f00b fb71 	bl	2225c <bt_att_chan_send_rsp>
	return 0;
   16b7a:	2400      	movs	r4, #0
}
   16b7c:	4620      	mov	r0, r4
   16b7e:	b00a      	add	sp, #40	; 0x28
   16b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   16b84:	9807      	ldr	r0, [sp, #28]
   16b86:	f00c fd96 	bl	236b6 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   16b8a:	230a      	movs	r3, #10
   16b8c:	4632      	mov	r2, r6
   16b8e:	2110      	movs	r1, #16
   16b90:	4628      	mov	r0, r5
   16b92:	f7ff febf 	bl	16914 <send_err_rsp>
		return 0;
   16b96:	e7f1      	b.n	16b7c <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   16b98:	240e      	movs	r4, #14
   16b9a:	e7ef      	b.n	16b7c <att_read_group_rsp+0x64>
   16b9c:	0001676d 	.word	0x0001676d
   16ba0:	000220b1 	.word	0x000220b1

00016ba4 <att_read_mult_req>:
{
   16ba4:	b570      	push	{r4, r5, r6, lr}
   16ba6:	b088      	sub	sp, #32
   16ba8:	4606      	mov	r6, r0
   16baa:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   16bac:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   16bae:	2101      	movs	r1, #1
   16bb0:	4620      	mov	r0, r4
   16bb2:	f00c fbfa 	bl	233aa <bt_gatt_change_aware>
   16bb6:	2800      	cmp	r0, #0
   16bb8:	d037      	beq.n	16c2a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   16bba:	2200      	movs	r2, #0
   16bbc:	9204      	str	r2, [sp, #16]
   16bbe:	9205      	str	r2, [sp, #20]
   16bc0:	9206      	str	r2, [sp, #24]
   16bc2:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16bc4:	210f      	movs	r1, #15
   16bc6:	4620      	mov	r0, r4
   16bc8:	f00b fdd5 	bl	22776 <bt_att_create_pdu>
   16bcc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   16bce:	b378      	cbz	r0, 16c30 <att_read_mult_req+0x8c>
	data.chan = chan;
   16bd0:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   16bd2:	89ab      	ldrh	r3, [r5, #12]
   16bd4:	2b01      	cmp	r3, #1
   16bd6:	d921      	bls.n	16c1c <att_read_mult_req+0x78>
	return net_buf_simple_pull_le16(&buf->b);
   16bd8:	f105 0008 	add.w	r0, r5, #8
   16bdc:	f00c fde5 	bl	237aa <net_buf_simple_pull_le16>
   16be0:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16be2:	2301      	movs	r3, #1
   16be4:	f88d 301c 	strb.w	r3, [sp, #28]
   16be8:	ab04      	add	r3, sp, #16
   16bea:	9302      	str	r3, [sp, #8]
   16bec:	4b11      	ldr	r3, [pc, #68]	; (16c34 <att_read_mult_req+0x90>)
   16bee:	9301      	str	r3, [sp, #4]
   16bf0:	2200      	movs	r2, #0
   16bf2:	9200      	str	r2, [sp, #0]
   16bf4:	4613      	mov	r3, r2
   16bf6:	4601      	mov	r1, r0
   16bf8:	f000 fb80 	bl	172fc <bt_gatt_foreach_attr_type>
		if (data.err) {
   16bfc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   16c00:	2b00      	cmp	r3, #0
   16c02:	d0e6      	beq.n	16bd2 <att_read_mult_req+0x2e>
			net_buf_unref(data.buf);
   16c04:	9806      	ldr	r0, [sp, #24]
   16c06:	f00c fd56 	bl	236b6 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   16c0a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   16c0e:	4622      	mov	r2, r4
   16c10:	210e      	movs	r1, #14
   16c12:	4630      	mov	r0, r6
   16c14:	f7ff fe7e 	bl	16914 <send_err_rsp>
			return 0;
   16c18:	2000      	movs	r0, #0
   16c1a:	e007      	b.n	16c2c <att_read_mult_req+0x88>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16c1c:	4a06      	ldr	r2, [pc, #24]	; (16c38 <att_read_mult_req+0x94>)
   16c1e:	9906      	ldr	r1, [sp, #24]
   16c20:	4630      	mov	r0, r6
   16c22:	f00b fb1b 	bl	2225c <bt_att_chan_send_rsp>
	return 0;
   16c26:	2000      	movs	r0, #0
   16c28:	e000      	b.n	16c2c <att_read_mult_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16c2a:	2012      	movs	r0, #18
}
   16c2c:	b008      	add	sp, #32
   16c2e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   16c30:	200e      	movs	r0, #14
   16c32:	e7fb      	b.n	16c2c <att_read_mult_req+0x88>
   16c34:	000223cd 	.word	0x000223cd
   16c38:	000220b1 	.word	0x000220b1

00016c3c <att_read_rsp>:
{
   16c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c40:	b088      	sub	sp, #32
   16c42:	4604      	mov	r4, r0
   16c44:	4688      	mov	r8, r1
   16c46:	4616      	mov	r6, r2
   16c48:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   16c4a:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   16c4c:	2101      	movs	r1, #1
   16c4e:	4638      	mov	r0, r7
   16c50:	f00c fbab 	bl	233aa <bt_gatt_change_aware>
   16c54:	2800      	cmp	r0, #0
   16c56:	d038      	beq.n	16cca <att_read_rsp+0x8e>
	if (!handle) {
   16c58:	b925      	cbnz	r5, 16c64 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   16c5a:	2601      	movs	r6, #1
}
   16c5c:	4630      	mov	r0, r6
   16c5e:	b008      	add	sp, #32
   16c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   16c64:	2200      	movs	r2, #0
   16c66:	9204      	str	r2, [sp, #16]
   16c68:	9205      	str	r2, [sp, #20]
   16c6a:	9206      	str	r2, [sp, #24]
   16c6c:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16c6e:	4631      	mov	r1, r6
   16c70:	4638      	mov	r0, r7
   16c72:	f00b fd80 	bl	22776 <bt_att_create_pdu>
   16c76:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   16c78:	b348      	cbz	r0, 16cce <att_read_rsp+0x92>
	data.chan = chan;
   16c7a:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   16c7c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   16c80:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16c84:	2301      	movs	r3, #1
   16c86:	f88d 301c 	strb.w	r3, [sp, #28]
   16c8a:	ab04      	add	r3, sp, #16
   16c8c:	9302      	str	r3, [sp, #8]
   16c8e:	4b11      	ldr	r3, [pc, #68]	; (16cd4 <att_read_rsp+0x98>)
   16c90:	9301      	str	r3, [sp, #4]
   16c92:	2200      	movs	r2, #0
   16c94:	9200      	str	r2, [sp, #0]
   16c96:	4613      	mov	r3, r2
   16c98:	4629      	mov	r1, r5
   16c9a:	4628      	mov	r0, r5
   16c9c:	f000 fb2e 	bl	172fc <bt_gatt_foreach_attr_type>
	if (data.err) {
   16ca0:	f89d 601c 	ldrb.w	r6, [sp, #28]
   16ca4:	b92e      	cbnz	r6, 16cb2 <att_read_rsp+0x76>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16ca6:	4a0c      	ldr	r2, [pc, #48]	; (16cd8 <att_read_rsp+0x9c>)
   16ca8:	9906      	ldr	r1, [sp, #24]
   16caa:	4620      	mov	r0, r4
   16cac:	f00b fad6 	bl	2225c <bt_att_chan_send_rsp>
	return 0;
   16cb0:	e7d4      	b.n	16c5c <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   16cb2:	9806      	ldr	r0, [sp, #24]
   16cb4:	f00c fcff 	bl	236b6 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   16cb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   16cbc:	462a      	mov	r2, r5
   16cbe:	4641      	mov	r1, r8
   16cc0:	4620      	mov	r0, r4
   16cc2:	f7ff fe27 	bl	16914 <send_err_rsp>
		return 0;
   16cc6:	2600      	movs	r6, #0
   16cc8:	e7c8      	b.n	16c5c <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16cca:	2612      	movs	r6, #18
   16ccc:	e7c6      	b.n	16c5c <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   16cce:	260e      	movs	r6, #14
   16cd0:	e7c4      	b.n	16c5c <att_read_rsp+0x20>
   16cd2:	bf00      	nop
   16cd4:	000223cd 	.word	0x000223cd
   16cd8:	000220b1 	.word	0x000220b1

00016cdc <att_read_type_rsp>:
{
   16cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ce0:	b08a      	sub	sp, #40	; 0x28
   16ce2:	4605      	mov	r5, r0
   16ce4:	4688      	mov	r8, r1
   16ce6:	4616      	mov	r6, r2
   16ce8:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   16cea:	2400      	movs	r4, #0
   16cec:	9404      	str	r4, [sp, #16]
   16cee:	9405      	str	r4, [sp, #20]
   16cf0:	9406      	str	r4, [sp, #24]
   16cf2:	9407      	str	r4, [sp, #28]
   16cf4:	9408      	str	r4, [sp, #32]
   16cf6:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   16cf8:	2201      	movs	r2, #1
   16cfa:	2109      	movs	r1, #9
   16cfc:	6880      	ldr	r0, [r0, #8]
   16cfe:	f00b fd3a 	bl	22776 <bt_att_create_pdu>
   16d02:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   16d04:	b370      	cbz	r0, 16d64 <att_read_type_rsp+0x88>
	data.chan = chan;
   16d06:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   16d08:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   16d0c:	2101      	movs	r1, #1
   16d0e:	3008      	adds	r0, #8
   16d10:	f00c fd1b 	bl	2374a <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16d14:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   16d16:	4622      	mov	r2, r4
   16d18:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16d1a:	230a      	movs	r3, #10
   16d1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16d20:	ab04      	add	r3, sp, #16
   16d22:	9302      	str	r3, [sp, #8]
   16d24:	4b10      	ldr	r3, [pc, #64]	; (16d68 <att_read_type_rsp+0x8c>)
   16d26:	9301      	str	r3, [sp, #4]
   16d28:	9400      	str	r4, [sp, #0]
   16d2a:	4623      	mov	r3, r4
   16d2c:	4639      	mov	r1, r7
   16d2e:	4630      	mov	r0, r6
   16d30:	f000 fae4 	bl	172fc <bt_gatt_foreach_attr_type>
	if (data.err) {
   16d34:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   16d38:	b944      	cbnz	r4, 16d4c <att_read_type_rsp+0x70>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16d3a:	4a0c      	ldr	r2, [pc, #48]	; (16d6c <att_read_type_rsp+0x90>)
   16d3c:	9906      	ldr	r1, [sp, #24]
   16d3e:	4628      	mov	r0, r5
   16d40:	f00b fa8c 	bl	2225c <bt_att_chan_send_rsp>
}
   16d44:	4620      	mov	r0, r4
   16d46:	b00a      	add	sp, #40	; 0x28
   16d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   16d4c:	9806      	ldr	r0, [sp, #24]
   16d4e:	f00c fcb2 	bl	236b6 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   16d52:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   16d56:	4632      	mov	r2, r6
   16d58:	2108      	movs	r1, #8
   16d5a:	4628      	mov	r0, r5
   16d5c:	f7ff fdda 	bl	16914 <send_err_rsp>
		return 0;
   16d60:	2400      	movs	r4, #0
   16d62:	e7ef      	b.n	16d44 <att_read_type_rsp+0x68>
		return BT_ATT_ERR_UNLIKELY;
   16d64:	240e      	movs	r4, #14
   16d66:	e7ed      	b.n	16d44 <att_read_type_rsp+0x68>
   16d68:	00016821 	.word	0x00016821
   16d6c:	000220b1 	.word	0x000220b1

00016d70 <att_find_type_rsp>:
{
   16d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d72:	b08b      	sub	sp, #44	; 0x2c
   16d74:	4604      	mov	r4, r0
   16d76:	460d      	mov	r5, r1
   16d78:	4616      	mov	r6, r2
   16d7a:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   16d7c:	2200      	movs	r2, #0
   16d7e:	9205      	str	r2, [sp, #20]
   16d80:	9206      	str	r2, [sp, #24]
   16d82:	9207      	str	r2, [sp, #28]
   16d84:	9208      	str	r2, [sp, #32]
   16d86:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   16d88:	2107      	movs	r1, #7
   16d8a:	6880      	ldr	r0, [r0, #8]
   16d8c:	f00b fcf3 	bl	22776 <bt_att_create_pdu>
   16d90:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   16d92:	b358      	cbz	r0, 16dec <att_find_type_rsp+0x7c>
	data.chan = chan;
   16d94:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   16d96:	2200      	movs	r2, #0
   16d98:	9207      	str	r2, [sp, #28]
	data.value = value;
   16d9a:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   16d9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   16da0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16da4:	230a      	movs	r3, #10
   16da6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   16daa:	ab05      	add	r3, sp, #20
   16dac:	9302      	str	r3, [sp, #8]
   16dae:	4b10      	ldr	r3, [pc, #64]	; (16df0 <att_find_type_rsp+0x80>)
   16db0:	9301      	str	r3, [sp, #4]
   16db2:	9200      	str	r2, [sp, #0]
   16db4:	4613      	mov	r3, r2
   16db6:	4631      	mov	r1, r6
   16db8:	4628      	mov	r0, r5
   16dba:	f000 fa9f 	bl	172fc <bt_gatt_foreach_attr_type>
	if (data.err) {
   16dbe:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   16dc2:	b93e      	cbnz	r6, 16dd4 <att_find_type_rsp+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16dc4:	4a0b      	ldr	r2, [pc, #44]	; (16df4 <att_find_type_rsp+0x84>)
   16dc6:	9906      	ldr	r1, [sp, #24]
   16dc8:	4620      	mov	r0, r4
   16dca:	f00b fa47 	bl	2225c <bt_att_chan_send_rsp>
}
   16dce:	4630      	mov	r0, r6
   16dd0:	b00b      	add	sp, #44	; 0x2c
   16dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   16dd4:	9806      	ldr	r0, [sp, #24]
   16dd6:	f00c fc6e 	bl	236b6 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   16dda:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   16dde:	462a      	mov	r2, r5
   16de0:	2106      	movs	r1, #6
   16de2:	4620      	mov	r0, r4
   16de4:	f7ff fd96 	bl	16914 <send_err_rsp>
		return 0;
   16de8:	2600      	movs	r6, #0
   16dea:	e7f0      	b.n	16dce <att_find_type_rsp+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   16dec:	260e      	movs	r6, #14
   16dee:	e7ee      	b.n	16dce <att_find_type_rsp+0x5e>
   16df0:	00022415 	.word	0x00022415
   16df4:	000220b1 	.word	0x000220b1

00016df8 <att_find_info_rsp>:
{
   16df8:	b570      	push	{r4, r5, r6, lr}
   16dfa:	b088      	sub	sp, #32
   16dfc:	4604      	mov	r4, r0
   16dfe:	460e      	mov	r6, r1
   16e00:	4615      	mov	r5, r2
	(void)memset(&data, 0, sizeof(data));
   16e02:	2200      	movs	r2, #0
   16e04:	9204      	str	r2, [sp, #16]
   16e06:	9205      	str	r2, [sp, #20]
   16e08:	9206      	str	r2, [sp, #24]
   16e0a:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16e0c:	2105      	movs	r1, #5
   16e0e:	6880      	ldr	r0, [r0, #8]
   16e10:	f00b fcb1 	bl	22776 <bt_att_create_pdu>
   16e14:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   16e16:	b300      	cbz	r0, 16e5a <att_find_info_rsp+0x62>
	data.chan = chan;
   16e18:	9404      	str	r4, [sp, #16]
   16e1a:	ab04      	add	r3, sp, #16
   16e1c:	9302      	str	r3, [sp, #8]
   16e1e:	4b10      	ldr	r3, [pc, #64]	; (16e60 <att_find_info_rsp+0x68>)
   16e20:	9301      	str	r3, [sp, #4]
   16e22:	2200      	movs	r2, #0
   16e24:	9200      	str	r2, [sp, #0]
   16e26:	4613      	mov	r3, r2
   16e28:	4629      	mov	r1, r5
   16e2a:	4630      	mov	r0, r6
   16e2c:	f000 fa66 	bl	172fc <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   16e30:	9b06      	ldr	r3, [sp, #24]
   16e32:	b13b      	cbz	r3, 16e44 <att_find_info_rsp+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16e34:	4a0b      	ldr	r2, [pc, #44]	; (16e64 <att_find_info_rsp+0x6c>)
   16e36:	9905      	ldr	r1, [sp, #20]
   16e38:	4620      	mov	r0, r4
   16e3a:	f00b fa0f 	bl	2225c <bt_att_chan_send_rsp>
	return 0;
   16e3e:	2000      	movs	r0, #0
}
   16e40:	b008      	add	sp, #32
   16e42:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(data.buf);
   16e44:	9805      	ldr	r0, [sp, #20]
   16e46:	f00c fc36 	bl	236b6 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   16e4a:	230a      	movs	r3, #10
   16e4c:	4632      	mov	r2, r6
   16e4e:	2104      	movs	r1, #4
   16e50:	4620      	mov	r0, r4
   16e52:	f7ff fd5f 	bl	16914 <send_err_rsp>
		return 0;
   16e56:	2000      	movs	r0, #0
   16e58:	e7f2      	b.n	16e40 <att_find_info_rsp+0x48>
		return BT_ATT_ERR_UNLIKELY;
   16e5a:	200e      	movs	r0, #14
   16e5c:	e7f0      	b.n	16e40 <att_find_info_rsp+0x48>
   16e5e:	bf00      	nop
   16e60:	0002256b 	.word	0x0002256b
   16e64:	000220b1 	.word	0x000220b1

00016e68 <att_mtu_req>:
{
   16e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e6a:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   16e6c:	6803      	ldr	r3, [r0, #0]
   16e6e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e70:	f3bf 8f5b 	dmb	ish
   16e74:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   16e78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   16e7c:	f013 0f08 	tst.w	r3, #8
   16e80:	d122      	bne.n	16ec8 <att_mtu_req+0x60>
	req = (void *)buf->data;
   16e82:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   16e84:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   16e86:	2e16      	cmp	r6, #22
   16e88:	d920      	bls.n	16ecc <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   16e8a:	2202      	movs	r2, #2
   16e8c:	2103      	movs	r1, #3
   16e8e:	f00b fc72 	bl	22776 <bt_att_create_pdu>
	if (!pdu) {
   16e92:	4607      	mov	r7, r0
   16e94:	b1e0      	cbz	r0, 16ed0 <att_mtu_req+0x68>
   16e96:	2102      	movs	r1, #2
   16e98:	3008      	adds	r0, #8
   16e9a:	f00c fc56 	bl	2374a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   16e9e:	2500      	movs	r5, #0
   16ea0:	2317      	movs	r3, #23
   16ea2:	7003      	strb	r3, [r0, #0]
   16ea4:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   16ea6:	4a0b      	ldr	r2, [pc, #44]	; (16ed4 <att_mtu_req+0x6c>)
   16ea8:	4639      	mov	r1, r7
   16eaa:	4620      	mov	r0, r4
   16eac:	f00b f9d6 	bl	2225c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   16eb0:	2e17      	cmp	r6, #23
   16eb2:	bf28      	it	cs
   16eb4:	2617      	movcs	r6, #23
   16eb6:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   16eba:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   16ebe:	4620      	mov	r0, r4
   16ec0:	f00b fbb7 	bl	22632 <att_chan_mtu_updated>
	return 0;
   16ec4:	4628      	mov	r0, r5
}
   16ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   16ec8:	2006      	movs	r0, #6
   16eca:	e7fc      	b.n	16ec6 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   16ecc:	2004      	movs	r0, #4
   16ece:	e7fa      	b.n	16ec6 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   16ed0:	200e      	movs	r0, #14
   16ed2:	e7f8      	b.n	16ec6 <att_mtu_req+0x5e>
   16ed4:	000220b1 	.word	0x000220b1

00016ed8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16ed8:	b500      	push	{lr}
   16eda:	b083      	sub	sp, #12
   16edc:	4602      	mov	r2, r0
   16ede:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   16ee0:	2100      	movs	r1, #0
   16ee2:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16ee4:	a901      	add	r1, sp, #4
   16ee6:	4808      	ldr	r0, [pc, #32]	; (16f08 <bt_att_req_alloc+0x30>)
   16ee8:	f003 fd7e 	bl	1a9e8 <k_mem_slab_alloc>
   16eec:	b948      	cbnz	r0, 16f02 <bt_att_req_alloc+0x2a>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16eee:	9b01      	ldr	r3, [sp, #4]
   16ef0:	2200      	movs	r2, #0
   16ef2:	601a      	str	r2, [r3, #0]
   16ef4:	605a      	str	r2, [r3, #4]
   16ef6:	609a      	str	r2, [r3, #8]
   16ef8:	60da      	str	r2, [r3, #12]

	return req;
   16efa:	9801      	ldr	r0, [sp, #4]
}
   16efc:	b003      	add	sp, #12
   16efe:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   16f02:	2000      	movs	r0, #0
   16f04:	e7fa      	b.n	16efc <bt_att_req_alloc+0x24>
   16f06:	bf00      	nop
   16f08:	20000a4c 	.word	0x20000a4c

00016f0c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16f0c:	b500      	push	{lr}
   16f0e:	b083      	sub	sp, #12
   16f10:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   16f12:	6880      	ldr	r0, [r0, #8]
   16f14:	b120      	cbz	r0, 16f20 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   16f16:	f00c fbce 	bl	236b6 <net_buf_unref>
		req->buf = NULL;
   16f1a:	9b01      	ldr	r3, [sp, #4]
   16f1c:	2200      	movs	r2, #0
   16f1e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16f20:	a901      	add	r1, sp, #4
   16f22:	4803      	ldr	r0, [pc, #12]	; (16f30 <bt_att_req_free+0x24>)
   16f24:	f00d fe03 	bl	24b2e <k_mem_slab_free>
}
   16f28:	b003      	add	sp, #12
   16f2a:	f85d fb04 	ldr.w	pc, [sp], #4
   16f2e:	bf00      	nop
   16f30:	20000a4c 	.word	0x20000a4c

00016f34 <att_handle_rsp>:
{
   16f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f38:	b082      	sub	sp, #8
   16f3a:	4604      	mov	r4, r0
   16f3c:	460f      	mov	r7, r1
   16f3e:	4691      	mov	r9, r2
   16f40:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16f42:	f500 7088 	add.w	r0, r0, #272	; 0x110
   16f46:	f00e f866 	bl	25016 <k_work_cancel_delayable>
	if (!chan->req) {
   16f4a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   16f4e:	b318      	cbz	r0, 16f98 <att_handle_rsp+0x64>
	if (chan->req == &cancel) {
   16f50:	4b12      	ldr	r3, [pc, #72]	; (16f9c <att_handle_rsp+0x68>)
   16f52:	4298      	cmp	r0, r3
   16f54:	d01c      	beq.n	16f90 <att_handle_rsp+0x5c>
	func = chan->req->func;
   16f56:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   16f58:	f04f 0a00 	mov.w	sl, #0
   16f5c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   16f60:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   16f64:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   16f68:	f7ff ffd0 	bl	16f0c <bt_att_req_free>
	chan->req = NULL;
   16f6c:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   16f70:	6820      	ldr	r0, [r4, #0]
   16f72:	f00b f83f 	bl	21ff4 <att_req_send_process>
	if (func) {
   16f76:	b13d      	cbz	r5, 16f88 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   16f78:	6823      	ldr	r3, [r4, #0]
   16f7a:	6818      	ldr	r0, [r3, #0]
   16f7c:	f8cd 8000 	str.w	r8, [sp]
   16f80:	464b      	mov	r3, r9
   16f82:	463a      	mov	r2, r7
   16f84:	4631      	mov	r1, r6
   16f86:	47a8      	blx	r5
}
   16f88:	2000      	movs	r0, #0
   16f8a:	b002      	add	sp, #8
   16f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->req = NULL;
   16f90:	2500      	movs	r5, #0
   16f92:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   16f96:	e7eb      	b.n	16f70 <att_handle_rsp+0x3c>
	bt_att_func_t func = NULL;
   16f98:	2500      	movs	r5, #0
   16f9a:	e7e9      	b.n	16f70 <att_handle_rsp+0x3c>
   16f9c:	20002904 	.word	0x20002904

00016fa0 <att_reset>:
{
   16fa0:	b530      	push	{r4, r5, lr}
   16fa2:	b085      	sub	sp, #20
   16fa4:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16fa6:	2200      	movs	r2, #0
   16fa8:	2300      	movs	r3, #0
   16faa:	9803      	ldr	r0, [sp, #12]
   16fac:	300c      	adds	r0, #12
   16fae:	f00c fb56 	bl	2365e <net_buf_get>
   16fb2:	4603      	mov	r3, r0
   16fb4:	b118      	cbz	r0, 16fbe <att_reset+0x1e>
		net_buf_unref(buf);
   16fb6:	4618      	mov	r0, r3
   16fb8:	f00c fb7d 	bl	236b6 <net_buf_unref>
   16fbc:	e7f3      	b.n	16fa6 <att_reset+0x6>
	att->conn = NULL;
   16fbe:	9b03      	ldr	r3, [sp, #12]
   16fc0:	2200      	movs	r2, #0
   16fc2:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   16fc4:	e004      	b.n	16fd0 <att_reset+0x30>
	list->tail = node;
   16fc6:	609a      	str	r2, [r3, #8]
}
   16fc8:	e00a      	b.n	16fe0 <att_reset+0x40>
		bt_att_req_free(req);
   16fca:	4620      	mov	r0, r4
   16fcc:	f7ff ff9e 	bl	16f0c <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   16fd0:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   16fd2:	685c      	ldr	r4, [r3, #4]
   16fd4:	b17c      	cbz	r4, 16ff6 <att_reset+0x56>
	return node->next;
   16fd6:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   16fd8:	605a      	str	r2, [r3, #4]
	return list->tail;
   16fda:	6899      	ldr	r1, [r3, #8]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16fdc:	42a1      	cmp	r1, r4
   16fde:	d0f2      	beq.n	16fc6 <att_reset+0x26>
		if (req->func) {
   16fe0:	6865      	ldr	r5, [r4, #4]
   16fe2:	2d00      	cmp	r5, #0
   16fe4:	d0f1      	beq.n	16fca <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16fe6:	68e3      	ldr	r3, [r4, #12]
   16fe8:	9300      	str	r3, [sp, #0]
   16fea:	2300      	movs	r3, #0
   16fec:	461a      	mov	r2, r3
   16fee:	210e      	movs	r1, #14
   16ff0:	4618      	mov	r0, r3
   16ff2:	47a8      	blx	r5
   16ff4:	e7e9      	b.n	16fca <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   16ff6:	a903      	add	r1, sp, #12
   16ff8:	4802      	ldr	r0, [pc, #8]	; (17004 <att_reset+0x64>)
   16ffa:	f00d fd98 	bl	24b2e <k_mem_slab_free>
}
   16ffe:	b005      	add	sp, #20
   17000:	bd30      	pop	{r4, r5, pc}
   17002:	bf00      	nop
   17004:	20000a14 	.word	0x20000a14

00017008 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17008:	4b0d      	ldr	r3, [pc, #52]	; (17040 <bt_gatt_service_init+0x38>)
   1700a:	2201      	movs	r2, #1
   1700c:	f3bf 8f5b 	dmb	ish
   17010:	e853 1f00 	ldrex	r1, [r3]
   17014:	2900      	cmp	r1, #0
   17016:	d103      	bne.n	17020 <bt_gatt_service_init+0x18>
   17018:	e843 2000 	strex	r0, r2, [r3]
   1701c:	2800      	cmp	r0, #0
   1701e:	d1f7      	bne.n	17010 <bt_gatt_service_init+0x8>
   17020:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   17024:	d101      	bne.n	1702a <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17026:	4b07      	ldr	r3, [pc, #28]	; (17044 <bt_gatt_service_init+0x3c>)
   17028:	e006      	b.n	17038 <bt_gatt_service_init+0x30>
   1702a:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1702c:	685a      	ldr	r2, [r3, #4]
   1702e:	4906      	ldr	r1, [pc, #24]	; (17048 <bt_gatt_service_init+0x40>)
   17030:	8808      	ldrh	r0, [r1, #0]
   17032:	4402      	add	r2, r0
   17034:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17036:	3308      	adds	r3, #8
   17038:	4a04      	ldr	r2, [pc, #16]	; (1704c <bt_gatt_service_init+0x44>)
   1703a:	4293      	cmp	r3, r2
   1703c:	d3f6      	bcc.n	1702c <bt_gatt_service_init+0x24>
	}
}
   1703e:	4770      	bx	lr
   17040:	20002954 	.word	0x20002954
   17044:	00025b14 	.word	0x00025b14
   17048:	20003f68 	.word	0x20003f68
   1704c:	00025b3c 	.word	0x00025b3c

00017050 <find_cf_cfg>:
{
   17050:	b570      	push	{r4, r5, r6, lr}
   17052:	b082      	sub	sp, #8
   17054:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17056:	2400      	movs	r4, #0
   17058:	2c00      	cmp	r4, #0
   1705a:	dd03      	ble.n	17064 <find_cf_cfg+0x14>
	return NULL;
   1705c:	2500      	movs	r5, #0
}
   1705e:	4628      	mov	r0, r5
   17060:	b002      	add	sp, #8
   17062:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17064:	4d0e      	ldr	r5, [pc, #56]	; (170a0 <find_cf_cfg+0x50>)
   17066:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1706a:	b166      	cbz	r6, 17086 <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1706c:	490c      	ldr	r1, [pc, #48]	; (170a0 <find_cf_cfg+0x50>)
   1706e:	0123      	lsls	r3, r4, #4
   17070:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   17074:	3201      	adds	r2, #1
   17076:	5cc9      	ldrb	r1, [r1, r3]
   17078:	4630      	mov	r0, r6
   1707a:	f00a fc1f 	bl	218bc <bt_conn_is_peer_addr_le>
   1707e:	2800      	cmp	r0, #0
   17080:	d1ed      	bne.n	1705e <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17082:	3401      	adds	r4, #1
   17084:	e7e8      	b.n	17058 <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17086:	4628      	mov	r0, r5
   17088:	2300      	movs	r3, #0
   1708a:	9300      	str	r3, [sp, #0]
   1708c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   17090:	2207      	movs	r2, #7
   17092:	4669      	mov	r1, sp
   17094:	3001      	adds	r0, #1
   17096:	f00e fb38 	bl	2570a <memcmp>
   1709a:	2800      	cmp	r0, #0
   1709c:	d1f1      	bne.n	17082 <find_cf_cfg+0x32>
   1709e:	e7de      	b.n	1705e <find_cf_cfg+0xe>
   170a0:	2000291c 	.word	0x2000291c

000170a4 <find_sc_cfg>:
{
   170a4:	b570      	push	{r4, r5, r6, lr}
   170a6:	4606      	mov	r6, r0
   170a8:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170aa:	2400      	movs	r4, #0
   170ac:	b10c      	cbz	r4, 170b2 <find_sc_cfg+0xe>
	return NULL;
   170ae:	2000      	movs	r0, #0
}
   170b0:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   170b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   170b6:	4a0c      	ldr	r2, [pc, #48]	; (170e8 <find_sc_cfg+0x44>)
   170b8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   170bc:	429e      	cmp	r6, r3
   170be:	d001      	beq.n	170c4 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   170c0:	3401      	adds	r4, #1
   170c2:	e7f3      	b.n	170ac <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   170c4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   170c8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   170cc:	2207      	movs	r2, #7
   170ce:	4629      	mov	r1, r5
   170d0:	3001      	adds	r0, #1
   170d2:	f00e fb1a 	bl	2570a <memcmp>
		if (id == sc_cfg[i].id &&
   170d6:	2800      	cmp	r0, #0
   170d8:	d1f2      	bne.n	170c0 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   170da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   170de:	4802      	ldr	r0, [pc, #8]	; (170e8 <find_sc_cfg+0x44>)
   170e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   170e4:	e7e4      	b.n	170b0 <find_sc_cfg+0xc>
   170e6:	bf00      	nop
   170e8:	20002930 	.word	0x20002930

000170ec <sc_indicate_rsp>:
{
   170ec:	b510      	push	{r4, lr}
   170ee:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   170f0:	4b19      	ldr	r3, [pc, #100]	; (17158 <sc_indicate_rsp+0x6c>)
   170f2:	f103 0250 	add.w	r2, r3, #80	; 0x50
   170f6:	f3bf 8f5b 	dmb	ish
   170fa:	e852 1f00 	ldrex	r1, [r2]
   170fe:	f021 0102 	bic.w	r1, r1, #2
   17102:	e842 1000 	strex	r0, r1, [r2]
   17106:	2800      	cmp	r0, #0
   17108:	d1f7      	bne.n	170fa <sc_indicate_rsp+0xe>
   1710a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1710e:	f3bf 8f5b 	dmb	ish
   17112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17114:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17118:	f013 0f01 	tst.w	r3, #1
   1711c:	d116      	bne.n	1714c <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   1711e:	4620      	mov	r0, r4
   17120:	f7ff ff96 	bl	17050 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   17124:	4603      	mov	r3, r0
   17126:	b180      	cbz	r0, 1714a <sc_indicate_rsp+0x5e>
   17128:	7a02      	ldrb	r2, [r0, #8]
   1712a:	f012 0f01 	tst.w	r2, #1
   1712e:	d00c      	beq.n	1714a <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17130:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17132:	f3bf 8f5b 	dmb	ish
   17136:	e853 2f00 	ldrex	r2, [r3]
   1713a:	f042 0201 	orr.w	r2, r2, #1
   1713e:	e843 2100 	strex	r1, r2, [r3]
   17142:	2900      	cmp	r1, #0
   17144:	d1f7      	bne.n	17136 <sc_indicate_rsp+0x4a>
   17146:	f3bf 8f5b 	dmb	ish
}
   1714a:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1714c:	2200      	movs	r2, #0
   1714e:	2300      	movs	r3, #0
   17150:	4802      	ldr	r0, [pc, #8]	; (1715c <sc_indicate_rsp+0x70>)
   17152:	f004 f8af 	bl	1b2b4 <k_work_reschedule>
   17156:	e7e2      	b.n	1711e <sc_indicate_rsp+0x32>
   17158:	20001d00 	.word	0x20001d00
   1715c:	20001d20 	.word	0x20001d20

00017160 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   17160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17164:	b083      	sub	sp, #12
   17166:	4615      	mov	r5, r2
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17168:	6882      	ldr	r2, [r0, #8]
   1716a:	4b30      	ldr	r3, [pc, #192]	; (1722c <disconnected_cb+0xcc>)
   1716c:	429a      	cmp	r2, r3
   1716e:	d003      	beq.n	17178 <disconnected_cb+0x18>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   17170:	2001      	movs	r0, #1
   17172:	b003      	add	sp, #12
   17174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17178:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1717a:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1717c:	897b      	ldrh	r3, [r7, #10]
   1717e:	2b00      	cmp	r3, #0
   17180:	d0f6      	beq.n	17170 <disconnected_cb+0x10>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17182:	2600      	movs	r6, #0
	value_used = false;
   17184:	46b1      	mov	r9, r6
   17186:	e021      	b.n	171cc <disconnected_cb+0x6c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   17188:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   1718c:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   17190:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   17194:	b1cb      	cbz	r3, 171ca <disconnected_cb+0x6a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17196:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1719a:	f108 0a01 	add.w	sl, r8, #1
   1719e:	4652      	mov	r2, sl
   171a0:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   171a4:	4628      	mov	r0, r5
   171a6:	f00a fb89 	bl	218bc <bt_conn_is_peer_addr_le>
   171aa:	bb00      	cbnz	r0, 171ee <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   171ac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   171b0:	4651      	mov	r1, sl
   171b2:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   171b6:	f7fe ffb9 	bl	1612c <bt_conn_lookup_addr_le>
			if (tmp) {
   171ba:	4603      	mov	r3, r0
   171bc:	b128      	cbz	r0, 171ca <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
   171be:	7a82      	ldrb	r2, [r0, #10]
   171c0:	2a07      	cmp	r2, #7
   171c2:	d011      	beq.n	171e8 <disconnected_cb+0x88>
				bt_conn_unref(tmp);
   171c4:	4618      	mov	r0, r3
   171c6:	f00a fb0b 	bl	217e0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   171ca:	3601      	adds	r6, #1
   171cc:	2e00      	cmp	r6, #0
   171ce:	d0db      	beq.n	17188 <disconnected_cb+0x28>
	if (!value_used) {
   171d0:	f1b9 0f00 	cmp.w	r9, #0
   171d4:	d1cc      	bne.n	17170 <disconnected_cb+0x10>
		ccc->value = 0U;
   171d6:	2300      	movs	r3, #0
   171d8:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   171da:	68fb      	ldr	r3, [r7, #12]
   171dc:	2b00      	cmp	r3, #0
   171de:	d0c7      	beq.n	17170 <disconnected_cb+0x10>
			ccc->cfg_changed(attr, ccc->value);
   171e0:	2100      	movs	r1, #0
   171e2:	4620      	mov	r0, r4
   171e4:	4798      	blx	r3
   171e6:	e7c3      	b.n	17170 <disconnected_cb+0x10>
					value_used = true;
   171e8:	f04f 0901 	mov.w	r9, #1
   171ec:	e7ea      	b.n	171c4 <disconnected_cb+0x64>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   171ee:	f105 0388 	add.w	r3, r5, #136	; 0x88
   171f2:	9301      	str	r3, [sp, #4]
   171f4:	4619      	mov	r1, r3
   171f6:	7a28      	ldrb	r0, [r5, #8]
   171f8:	f009 fe97 	bl	20f2a <bt_addr_le_is_bonded>
   171fc:	b950      	cbnz	r0, 17214 <disconnected_cb+0xb4>
				if (ccc == &sc_ccc) {
   171fe:	4b0c      	ldr	r3, [pc, #48]	; (17230 <disconnected_cb+0xd0>)
   17200:	429f      	cmp	r7, r3
   17202:	d003      	beq.n	1720c <disconnected_cb+0xac>
				clear_ccc_cfg(cfg);
   17204:	4640      	mov	r0, r8
   17206:	f00b fe38 	bl	22e7a <clear_ccc_cfg>
   1720a:	e7de      	b.n	171ca <disconnected_cb+0x6a>
					sc_clear(conn);
   1720c:	4628      	mov	r0, r5
   1720e:	f00b fdbd 	bl	22d8c <sc_clear>
   17212:	e7f7      	b.n	17204 <disconnected_cb+0xa4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17214:	9a01      	ldr	r2, [sp, #4]
   17216:	6813      	ldr	r3, [r2, #0]
   17218:	f8c8 3001 	str.w	r3, [r8, #1]
   1721c:	4613      	mov	r3, r2
   1721e:	8892      	ldrh	r2, [r2, #4]
   17220:	799b      	ldrb	r3, [r3, #6]
   17222:	f8aa 2004 	strh.w	r2, [sl, #4]
   17226:	f88a 3006 	strb.w	r3, [sl, #6]
}
   1722a:	e7ce      	b.n	171ca <disconnected_cb+0x6a>
   1722c:	00023011 	.word	0x00023011
   17230:	20000888 	.word	0x20000888

00017234 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17234:	4b13      	ldr	r3, [pc, #76]	; (17284 <bt_gatt_init+0x50>)
   17236:	2201      	movs	r2, #1
   17238:	f3bf 8f5b 	dmb	ish
   1723c:	e853 1f00 	ldrex	r1, [r3]
   17240:	2900      	cmp	r1, #0
   17242:	d103      	bne.n	1724c <bt_gatt_init+0x18>
   17244:	e843 2000 	strex	r0, r2, [r3]
   17248:	2800      	cmp	r0, #0
   1724a:	d1f7      	bne.n	1723c <bt_gatt_init+0x8>
   1724c:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   17250:	d116      	bne.n	17280 <bt_gatt_init+0x4c>
{
   17252:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   17254:	f7ff fed8 	bl	17008 <bt_gatt_service_init>
	list->head = NULL;
   17258:	4b0b      	ldr	r3, [pc, #44]	; (17288 <bt_gatt_init+0x54>)
   1725a:	2200      	movs	r2, #0
   1725c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1725e:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   17260:	4c0a      	ldr	r4, [pc, #40]	; (1728c <bt_gatt_init+0x58>)
   17262:	490b      	ldr	r1, [pc, #44]	; (17290 <bt_gatt_init+0x5c>)
   17264:	4620      	mov	r0, r4
   17266:	f00d fe8a 	bl	24f7e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1726a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1726e:	2300      	movs	r3, #0
   17270:	4620      	mov	r0, r4
   17272:	f004 f817 	bl	1b2a4 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   17276:	4907      	ldr	r1, [pc, #28]	; (17294 <bt_gatt_init+0x60>)
   17278:	4807      	ldr	r0, [pc, #28]	; (17298 <bt_gatt_init+0x64>)
   1727a:	f00d fe80 	bl	24f7e <k_work_init_delayable>
}
   1727e:	bd10      	pop	{r4, pc}
   17280:	4770      	bx	lr
   17282:	bf00      	nop
   17284:	2000292c 	.word	0x2000292c
   17288:	20002914 	.word	0x20002914
   1728c:	20001ca8 	.word	0x20001ca8
   17290:	000232e5 	.word	0x000232e5
   17294:	000175c9 	.word	0x000175c9
   17298:	20001d20 	.word	0x20001d20

0001729c <bt_gatt_attr_get_handle>:
	if (!attr) {
   1729c:	b328      	cbz	r0, 172ea <bt_gatt_attr_get_handle+0x4e>
{
   1729e:	b4f0      	push	{r4, r5, r6, r7}
   172a0:	4606      	mov	r6, r0
	if (attr->handle) {
   172a2:	8a00      	ldrh	r0, [r0, #16]
   172a4:	bb20      	cbnz	r0, 172f0 <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   172a6:	4d13      	ldr	r5, [pc, #76]	; (172f4 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   172a8:	2201      	movs	r2, #1
   172aa:	e003      	b.n	172b4 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   172ac:	686b      	ldr	r3, [r5, #4]
   172ae:	441a      	add	r2, r3
   172b0:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   172b2:	3508      	adds	r5, #8
   172b4:	4b10      	ldr	r3, [pc, #64]	; (172f8 <bt_gatt_attr_get_handle+0x5c>)
   172b6:	429d      	cmp	r5, r3
   172b8:	d21a      	bcs.n	172f0 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   172ba:	682c      	ldr	r4, [r5, #0]
   172bc:	42b4      	cmp	r4, r6
   172be:	d8f5      	bhi.n	172ac <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   172c0:	686f      	ldr	r7, [r5, #4]
   172c2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   172c6:	009b      	lsls	r3, r3, #2
   172c8:	3b14      	subs	r3, #20
   172ca:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   172cc:	42b3      	cmp	r3, r6
   172ce:	d3ed      	bcc.n	172ac <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   172d0:	2300      	movs	r3, #0
   172d2:	429f      	cmp	r7, r3
   172d4:	d9ed      	bls.n	172b2 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   172d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   172da:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   172de:	42b1      	cmp	r1, r6
   172e0:	d005      	beq.n	172ee <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   172e2:	3301      	adds	r3, #1
   172e4:	3201      	adds	r2, #1
   172e6:	b292      	uxth	r2, r2
   172e8:	e7f3      	b.n	172d2 <bt_gatt_attr_get_handle+0x36>
		return 0;
   172ea:	2000      	movs	r0, #0
}
   172ec:	4770      	bx	lr
				return handle;
   172ee:	4610      	mov	r0, r2
}
   172f0:	bcf0      	pop	{r4, r5, r6, r7}
   172f2:	4770      	bx	lr
   172f4:	00025b14 	.word	0x00025b14
   172f8:	00025b3c 	.word	0x00025b3c

000172fc <bt_gatt_foreach_attr_type>:
{
   172fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17300:	b089      	sub	sp, #36	; 0x24
   17302:	4607      	mov	r7, r0
   17304:	468a      	mov	sl, r1
   17306:	4690      	mov	r8, r2
   17308:	4699      	mov	r9, r3
   1730a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1730e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   17312:	b91b      	cbnz	r3, 1731c <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   17314:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17318:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1731c:	4b19      	ldr	r3, [pc, #100]	; (17384 <bt_gatt_foreach_attr_type+0x88>)
   1731e:	881b      	ldrh	r3, [r3, #0]
   17320:	42bb      	cmp	r3, r7
   17322:	d22c      	bcs.n	1737e <bt_gatt_foreach_attr_type+0x82>
}
   17324:	b009      	add	sp, #36	; 0x24
   17326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1732a:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1732c:	3608      	adds	r6, #8
   1732e:	4b16      	ldr	r3, [pc, #88]	; (17388 <bt_gatt_foreach_attr_type+0x8c>)
   17330:	429e      	cmp	r6, r3
   17332:	d2f7      	bcs.n	17324 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   17334:	6873      	ldr	r3, [r6, #4]
   17336:	18e2      	adds	r2, r4, r3
   17338:	42ba      	cmp	r2, r7
   1733a:	d3f6      	bcc.n	1732a <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1733c:	2500      	movs	r5, #0
   1733e:	9707      	str	r7, [sp, #28]
   17340:	6873      	ldr	r3, [r6, #4]
   17342:	42ab      	cmp	r3, r5
   17344:	d919      	bls.n	1737a <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17346:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1734a:	f8cd b010 	str.w	fp, [sp, #16]
   1734e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17350:	9303      	str	r3, [sp, #12]
   17352:	ab12      	add	r3, sp, #72	; 0x48
   17354:	9302      	str	r3, [sp, #8]
   17356:	f8cd 9004 	str.w	r9, [sp, #4]
   1735a:	f8cd 8000 	str.w	r8, [sp]
   1735e:	4653      	mov	r3, sl
   17360:	9a07      	ldr	r2, [sp, #28]
   17362:	4621      	mov	r1, r4
   17364:	6837      	ldr	r7, [r6, #0]
   17366:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1736a:	f00b fd4d 	bl	22e08 <gatt_foreach_iter>
   1736e:	2800      	cmp	r0, #0
   17370:	d0d8      	beq.n	17324 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17372:	3501      	adds	r5, #1
   17374:	3401      	adds	r4, #1
   17376:	b2a4      	uxth	r4, r4
   17378:	e7e2      	b.n	17340 <bt_gatt_foreach_attr_type+0x44>
   1737a:	9f07      	ldr	r7, [sp, #28]
   1737c:	e7d6      	b.n	1732c <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1737e:	4e03      	ldr	r6, [pc, #12]	; (1738c <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   17380:	2401      	movs	r4, #1
   17382:	e7d4      	b.n	1732e <bt_gatt_foreach_attr_type+0x32>
   17384:	20003f68 	.word	0x20003f68
   17388:	00025b3c 	.word	0x00025b3c
   1738c:	00025b14 	.word	0x00025b14

00017390 <db_hash_gen>:
{
   17390:	b510      	push	{r4, lr}
   17392:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   17394:	2300      	movs	r3, #0
   17396:	9348      	str	r3, [sp, #288]	; 0x120
   17398:	9349      	str	r3, [sp, #292]	; 0x124
   1739a:	934a      	str	r3, [sp, #296]	; 0x128
   1739c:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1739e:	aa1c      	add	r2, sp, #112	; 0x70
   173a0:	a948      	add	r1, sp, #288	; 0x120
   173a2:	a804      	add	r0, sp, #16
   173a4:	f009 f8a2 	bl	204ec <tc_cmac_setup>
   173a8:	b348      	cbz	r0, 173fe <db_hash_gen+0x6e>
   173aa:	ac04      	add	r4, sp, #16
   173ac:	9402      	str	r4, [sp, #8]
   173ae:	4b15      	ldr	r3, [pc, #84]	; (17404 <db_hash_gen+0x74>)
   173b0:	9301      	str	r3, [sp, #4]
   173b2:	2200      	movs	r2, #0
   173b4:	9200      	str	r2, [sp, #0]
   173b6:	4613      	mov	r3, r2
   173b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   173bc:	2001      	movs	r0, #1
   173be:	f7ff ff9d 	bl	172fc <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   173c2:	4621      	mov	r1, r4
   173c4:	4810      	ldr	r0, [pc, #64]	; (17408 <db_hash_gen+0x78>)
   173c6:	f009 f92c 	bl	20622 <tc_cmac_final>
   173ca:	b1c0      	cbz	r0, 173fe <db_hash_gen+0x6e>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   173cc:	2300      	movs	r3, #0
   173ce:	e007      	b.n	173e0 <db_hash_gen+0x50>
		uint8_t tmp = ((uint8_t *)buf)[i];
   173d0:	4a0d      	ldr	r2, [pc, #52]	; (17408 <db_hash_gen+0x78>)
   173d2:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   173d4:	f1c3 010f 	rsb	r1, r3, #15
   173d8:	5c54      	ldrb	r4, [r2, r1]
   173da:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   173dc:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   173de:	3301      	adds	r3, #1
   173e0:	2b07      	cmp	r3, #7
   173e2:	d9f5      	bls.n	173d0 <db_hash_gen+0x40>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   173e4:	4b09      	ldr	r3, [pc, #36]	; (1740c <db_hash_gen+0x7c>)
   173e6:	f3bf 8f5b 	dmb	ish
   173ea:	e853 2f00 	ldrex	r2, [r3]
   173ee:	f042 0204 	orr.w	r2, r2, #4
   173f2:	e843 2100 	strex	r1, r2, [r3]
   173f6:	2900      	cmp	r1, #0
   173f8:	d1f7      	bne.n	173ea <db_hash_gen+0x5a>
   173fa:	f3bf 8f5b 	dmb	ish
}
   173fe:	b04c      	add	sp, #304	; 0x130
   17400:	bd10      	pop	{r4, pc}
   17402:	bf00      	nop
   17404:	00022c3b 	.word	0x00022c3b
   17408:	20001c98 	.word	0x20001c98
   1740c:	20001d50 	.word	0x20001d50

00017410 <gatt_find_by_uuid>:
{
   17410:	b510      	push	{r4, lr}
   17412:	b084      	sub	sp, #16
   17414:	4604      	mov	r4, r0
   17416:	460a      	mov	r2, r1
	found->attr = NULL;
   17418:	2300      	movs	r3, #0
   1741a:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1741c:	9002      	str	r0, [sp, #8]
   1741e:	4907      	ldr	r1, [pc, #28]	; (1743c <gatt_find_by_uuid+0x2c>)
   17420:	9101      	str	r1, [sp, #4]
   17422:	2101      	movs	r1, #1
   17424:	9100      	str	r1, [sp, #0]
   17426:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1742a:	8880      	ldrh	r0, [r0, #4]
   1742c:	f7ff ff66 	bl	172fc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17430:	6820      	ldr	r0, [r4, #0]
}
   17432:	3800      	subs	r0, #0
   17434:	bf18      	it	ne
   17436:	2001      	movne	r0, #1
   17438:	b004      	add	sp, #16
   1743a:	bd10      	pop	{r4, pc}
   1743c:	00022beb 	.word	0x00022beb

00017440 <gatt_indicate>:
{
   17440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17444:	b082      	sub	sp, #8
   17446:	4606      	mov	r6, r0
   17448:	460f      	mov	r7, r1
   1744a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1744c:	2214      	movs	r2, #20
   1744e:	6861      	ldr	r1, [r4, #4]
   17450:	f00b ff4d 	bl	232ee <bt_gatt_check_perm>
   17454:	2800      	cmp	r0, #0
   17456:	d139      	bne.n	174cc <gatt_indicate+0x8c>
	len = sizeof(*ind) + params->len;
   17458:	8aa5      	ldrh	r5, [r4, #20]
   1745a:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1745c:	9500      	str	r5, [sp, #0]
   1745e:	231d      	movs	r3, #29
   17460:	2200      	movs	r2, #0
   17462:	4621      	mov	r1, r4
   17464:	481c      	ldr	r0, [pc, #112]	; (174d8 <gatt_indicate+0x98>)
   17466:	f00b fcfa 	bl	22e5e <gatt_req_alloc>
	if (!req) {
   1746a:	4680      	mov	r8, r0
   1746c:	b388      	cbz	r0, 174d2 <gatt_indicate+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1746e:	462a      	mov	r2, r5
   17470:	211d      	movs	r1, #29
   17472:	4630      	mov	r0, r6
   17474:	f00b f97f 	bl	22776 <bt_att_create_pdu>
	if (!buf) {
   17478:	4681      	mov	r9, r0
   1747a:	b1e8      	cbz	r0, 174b8 <gatt_indicate+0x78>
   1747c:	f100 0a08 	add.w	sl, r0, #8
   17480:	2102      	movs	r1, #2
   17482:	4650      	mov	r0, sl
   17484:	f00c f961 	bl	2374a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17488:	4605      	mov	r5, r0
   1748a:	f825 7b02 	strh.w	r7, [r5], #2
   1748e:	8aa1      	ldrh	r1, [r4, #20]
   17490:	4650      	mov	r0, sl
   17492:	f00c f95a 	bl	2374a <net_buf_simple_add>
   17496:	8aa2      	ldrh	r2, [r4, #20]
   17498:	6921      	ldr	r1, [r4, #16]
   1749a:	4628      	mov	r0, r5
   1749c:	f00e f943 	bl	25726 <memcpy>
	req->buf = buf;
   174a0:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   174a4:	4641      	mov	r1, r8
   174a6:	4630      	mov	r0, r6
   174a8:	f00b fb19 	bl	22ade <bt_att_req_send>
	if (err) {
   174ac:	4604      	mov	r4, r0
   174ae:	b948      	cbnz	r0, 174c4 <gatt_indicate+0x84>
}
   174b0:	4620      	mov	r0, r4
   174b2:	b002      	add	sp, #8
   174b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_att_req_free(req);
   174b8:	4640      	mov	r0, r8
   174ba:	f7ff fd27 	bl	16f0c <bt_att_req_free>
		return -ENOMEM;
   174be:	f06f 040b 	mvn.w	r4, #11
   174c2:	e7f5      	b.n	174b0 <gatt_indicate+0x70>
		bt_att_req_free(req);
   174c4:	4640      	mov	r0, r8
   174c6:	f7ff fd21 	bl	16f0c <bt_att_req_free>
   174ca:	e7f1      	b.n	174b0 <gatt_indicate+0x70>
		return -EPERM;
   174cc:	f04f 34ff 	mov.w	r4, #4294967295
   174d0:	e7ee      	b.n	174b0 <gatt_indicate+0x70>
		return -ENOMEM;
   174d2:	f06f 040b 	mvn.w	r4, #11
   174d6:	e7eb      	b.n	174b0 <gatt_indicate+0x70>
   174d8:	00022bc9 	.word	0x00022bc9

000174dc <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   174dc:	f3bf 8f5b 	dmb	ish
   174e0:	4b37      	ldr	r3, [pc, #220]	; (175c0 <bt_gatt_indicate+0xe4>)
   174e2:	681b      	ldr	r3, [r3, #0]
   174e4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   174e8:	f013 0f02 	tst.w	r3, #2
   174ec:	d05e      	beq.n	175ac <bt_gatt_indicate+0xd0>
{
   174ee:	b530      	push	{r4, r5, lr}
   174f0:	b08d      	sub	sp, #52	; 0x34
   174f2:	4605      	mov	r5, r0
   174f4:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   174f6:	b110      	cbz	r0, 174fe <bt_gatt_indicate+0x22>
   174f8:	7a83      	ldrb	r3, [r0, #10]
   174fa:	2b07      	cmp	r3, #7
   174fc:	d159      	bne.n	175b2 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   174fe:	6860      	ldr	r0, [r4, #4]
   17500:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17502:	f7ff fecb 	bl	1729c <bt_gatt_attr_get_handle>
   17506:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1750a:	6821      	ldr	r1, [r4, #0]
   1750c:	b341      	cbz	r1, 17560 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1750e:	a805      	add	r0, sp, #20
   17510:	f7ff ff7e 	bl	17410 <gatt_find_by_uuid>
   17514:	2800      	cmp	r0, #0
   17516:	d04f      	beq.n	175b8 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   17518:	9b05      	ldr	r3, [sp, #20]
   1751a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1751c:	9b05      	ldr	r3, [sp, #20]
   1751e:	6818      	ldr	r0, [r3, #0]
   17520:	2300      	movs	r3, #0
   17522:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17526:	f642 0303 	movw	r3, #10243	; 0x2803
   1752a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1752e:	a90b      	add	r1, sp, #44	; 0x2c
   17530:	f009 f994 	bl	2085c <bt_uuid_cmp>
   17534:	b948      	cbnz	r0, 1754a <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17536:	9805      	ldr	r0, [sp, #20]
   17538:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1753a:	799b      	ldrb	r3, [r3, #6]
   1753c:	f013 0f20 	tst.w	r3, #32
   17540:	d013      	beq.n	1756a <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17542:	f00b fe79 	bl	23238 <bt_gatt_attr_value_handle>
   17546:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1754a:	b18d      	cbz	r5, 17570 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1754c:	2301      	movs	r3, #1
   1754e:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   17550:	4622      	mov	r2, r4
   17552:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   17556:	4628      	mov	r0, r5
   17558:	f7ff ff72 	bl	17440 <gatt_indicate>
}
   1755c:	b00d      	add	sp, #52	; 0x34
   1755e:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   17560:	2800      	cmp	r0, #0
   17562:	d1db      	bne.n	1751c <bt_gatt_indicate+0x40>
			return -ENOENT;
   17564:	f06f 0001 	mvn.w	r0, #1
   17568:	e7f8      	b.n	1755c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1756a:	f06f 0015 	mvn.w	r0, #21
   1756e:	e7f5      	b.n	1755c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   17570:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17574:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17576:	2302      	movs	r3, #2
   17578:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1757c:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1757e:	2300      	movs	r3, #0
   17580:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17582:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17586:	f642 1202 	movw	r2, #10498	; 0x2902
   1758a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1758e:	aa05      	add	r2, sp, #20
   17590:	9202      	str	r2, [sp, #8]
   17592:	4a0c      	ldr	r2, [pc, #48]	; (175c4 <bt_gatt_indicate+0xe8>)
   17594:	9201      	str	r2, [sp, #4]
   17596:	2201      	movs	r2, #1
   17598:	9200      	str	r2, [sp, #0]
   1759a:	aa0a      	add	r2, sp, #40	; 0x28
   1759c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   175a0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   175a4:	f7ff feaa 	bl	172fc <bt_gatt_foreach_attr_type>
	return data.err;
   175a8:	9807      	ldr	r0, [sp, #28]
   175aa:	e7d7      	b.n	1755c <bt_gatt_indicate+0x80>
		return -EAGAIN;
   175ac:	f06f 000a 	mvn.w	r0, #10
}
   175b0:	4770      	bx	lr
		return -ENOTCONN;
   175b2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   175b6:	e7d1      	b.n	1755c <bt_gatt_indicate+0x80>
			return -ENOENT;
   175b8:	f06f 0001 	mvn.w	r0, #1
   175bc:	e7ce      	b.n	1755c <bt_gatt_indicate+0x80>
   175be:	bf00      	nop
   175c0:	2000037c 	.word	0x2000037c
   175c4:	00017791 	.word	0x00017791

000175c8 <sc_process>:
{
   175c8:	b510      	push	{r4, lr}
   175ca:	b082      	sub	sp, #8
   175cc:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   175ce:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   175d2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   175d6:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   175da:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   175de:	f1a0 0120 	sub.w	r1, r0, #32
   175e2:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   175e6:	f3bf 8f5b 	dmb	ish
   175ea:	e854 2f00 	ldrex	r2, [r4]
   175ee:	f022 0201 	bic.w	r2, r2, #1
   175f2:	e844 2000 	strex	r0, r2, [r4]
   175f6:	2800      	cmp	r0, #0
   175f8:	d1f7      	bne.n	175ea <sc_process+0x22>
   175fa:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   175fe:	2000      	movs	r0, #0
   17600:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17604:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17608:	4a0e      	ldr	r2, [pc, #56]	; (17644 <sc_process+0x7c>)
   1760a:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1760e:	4a0e      	ldr	r2, [pc, #56]	; (17648 <sc_process+0x80>)
   17610:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17614:	aa01      	add	r2, sp, #4
   17616:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1761a:	2204      	movs	r2, #4
   1761c:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17620:	f7ff ff5c 	bl	174dc <bt_gatt_indicate>
   17624:	b108      	cbz	r0, 1762a <sc_process+0x62>
}
   17626:	b002      	add	sp, #8
   17628:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1762a:	f3bf 8f5b 	dmb	ish
   1762e:	e854 3f00 	ldrex	r3, [r4]
   17632:	f043 0302 	orr.w	r3, r3, #2
   17636:	e844 3200 	strex	r2, r3, [r4]
   1763a:	2a00      	cmp	r2, #0
   1763c:	d1f7      	bne.n	1762e <sc_process+0x66>
   1763e:	f3bf 8f5b 	dmb	ish
   17642:	e7f0      	b.n	17626 <sc_process+0x5e>
   17644:	00026e64 	.word	0x00026e64
   17648:	000170ed 	.word	0x000170ed

0001764c <sc_restore>:
{
   1764c:	b510      	push	{r4, lr}
   1764e:	b082      	sub	sp, #8
   17650:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17652:	f100 0188 	add.w	r1, r0, #136	; 0x88
   17656:	7a00      	ldrb	r0, [r0, #8]
   17658:	f7ff fd24 	bl	170a4 <find_sc_cfg>
	if (!cfg) {
   1765c:	b1e8      	cbz	r0, 1769a <sc_restore+0x4e>
   1765e:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   17660:	8902      	ldrh	r2, [r0, #8]
   17662:	b90a      	cbnz	r2, 17668 <sc_restore+0x1c>
   17664:	8941      	ldrh	r1, [r0, #10]
   17666:	b1c1      	cbz	r1, 1769a <sc_restore+0x4e>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17668:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1766c:	895b      	ldrh	r3, [r3, #10]
   1766e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   17672:	4620      	mov	r0, r4
   17674:	f7fe fca6 	bl	15fc4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17678:	4909      	ldr	r1, [pc, #36]	; (176a0 <sc_restore+0x54>)
   1767a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1767e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   17682:	4a08      	ldr	r2, [pc, #32]	; (176a4 <sc_restore+0x58>)
   17684:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17686:	4a08      	ldr	r2, [pc, #32]	; (176a8 <sc_restore+0x5c>)
   17688:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1768a:	aa01      	add	r2, sp, #4
   1768c:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1768e:	2204      	movs	r2, #4
   17690:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17692:	4619      	mov	r1, r3
   17694:	4620      	mov	r0, r4
   17696:	f7ff ff21 	bl	174dc <bt_gatt_indicate>
}
   1769a:	b002      	add	sp, #8
   1769c:	bd10      	pop	{r4, pc}
   1769e:	bf00      	nop
   176a0:	2000293c 	.word	0x2000293c
   176a4:	00026e64 	.word	0x00026e64
   176a8:	00022dc1 	.word	0x00022dc1

000176ac <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   176ac:	f3bf 8f5b 	dmb	ish
   176b0:	4b35      	ldr	r3, [pc, #212]	; (17788 <bt_gatt_notify_cb+0xdc>)
   176b2:	681b      	ldr	r3, [r3, #0]
   176b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   176b8:	f013 0f02 	tst.w	r3, #2
   176bc:	d05a      	beq.n	17774 <bt_gatt_notify_cb+0xc8>
{
   176be:	b530      	push	{r4, r5, lr}
   176c0:	b08d      	sub	sp, #52	; 0x34
   176c2:	4605      	mov	r5, r0
   176c4:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   176c6:	b110      	cbz	r0, 176ce <bt_gatt_notify_cb+0x22>
   176c8:	7a83      	ldrb	r3, [r0, #10]
   176ca:	2b07      	cmp	r3, #7
   176cc:	d155      	bne.n	1777a <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
   176ce:	6860      	ldr	r0, [r4, #4]
   176d0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   176d2:	f7ff fde3 	bl	1729c <bt_gatt_attr_get_handle>
   176d6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   176da:	6821      	ldr	r1, [r4, #0]
   176dc:	b331      	cbz	r1, 1772c <bt_gatt_notify_cb+0x80>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   176de:	a805      	add	r0, sp, #20
   176e0:	f7ff fe96 	bl	17410 <gatt_find_by_uuid>
   176e4:	2800      	cmp	r0, #0
   176e6:	d04b      	beq.n	17780 <bt_gatt_notify_cb+0xd4>
		params->attr = data.attr;
   176e8:	9b05      	ldr	r3, [sp, #20]
   176ea:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   176ec:	9b05      	ldr	r3, [sp, #20]
   176ee:	6818      	ldr	r0, [r3, #0]
   176f0:	2300      	movs	r3, #0
   176f2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   176f6:	f642 0303 	movw	r3, #10243	; 0x2803
   176fa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   176fe:	a90b      	add	r1, sp, #44	; 0x2c
   17700:	f009 f8ac 	bl	2085c <bt_uuid_cmp>
   17704:	b948      	cbnz	r0, 1771a <bt_gatt_notify_cb+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17706:	9805      	ldr	r0, [sp, #20]
   17708:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1770a:	799b      	ldrb	r3, [r3, #6]
   1770c:	f013 0f10 	tst.w	r3, #16
   17710:	d011      	beq.n	17736 <bt_gatt_notify_cb+0x8a>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17712:	f00b fd91 	bl	23238 <bt_gatt_attr_value_handle>
   17716:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1771a:	b17d      	cbz	r5, 1773c <bt_gatt_notify_cb+0x90>
		return gatt_notify(conn, data.handle, params);
   1771c:	4622      	mov	r2, r4
   1771e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   17722:	4628      	mov	r0, r5
   17724:	f00b fe0f 	bl	23346 <gatt_notify>
}
   17728:	b00d      	add	sp, #52	; 0x34
   1772a:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1772c:	2800      	cmp	r0, #0
   1772e:	d1dd      	bne.n	176ec <bt_gatt_notify_cb+0x40>
			return -ENOENT;
   17730:	f06f 0001 	mvn.w	r0, #1
   17734:	e7f8      	b.n	17728 <bt_gatt_notify_cb+0x7c>
			return -EINVAL;
   17736:	f06f 0015 	mvn.w	r0, #21
   1773a:	e7f5      	b.n	17728 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
   1773c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17740:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17742:	2201      	movs	r2, #1
   17744:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   17748:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1774a:	2300      	movs	r3, #0
   1774c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17750:	f642 1102 	movw	r1, #10498	; 0x2902
   17754:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   17758:	a905      	add	r1, sp, #20
   1775a:	9102      	str	r1, [sp, #8]
   1775c:	490b      	ldr	r1, [pc, #44]	; (1778c <bt_gatt_notify_cb+0xe0>)
   1775e:	9101      	str	r1, [sp, #4]
   17760:	9200      	str	r2, [sp, #0]
   17762:	aa0a      	add	r2, sp, #40	; 0x28
   17764:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17768:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1776c:	f7ff fdc6 	bl	172fc <bt_gatt_foreach_attr_type>
	return data.err;
   17770:	9807      	ldr	r0, [sp, #28]
   17772:	e7d9      	b.n	17728 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   17774:	f06f 000a 	mvn.w	r0, #10
}
   17778:	4770      	bx	lr
		return -ENOTCONN;
   1777a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1777e:	e7d3      	b.n	17728 <bt_gatt_notify_cb+0x7c>
			return -ENOENT;
   17780:	f06f 0001 	mvn.w	r0, #1
   17784:	e7d0      	b.n	17728 <bt_gatt_notify_cb+0x7c>
   17786:	bf00      	nop
   17788:	2000037c 	.word	0x2000037c
   1778c:	00017791 	.word	0x00017791

00017790 <notify_cb>:
{
   17790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17794:	b082      	sub	sp, #8
   17796:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17798:	6882      	ldr	r2, [r0, #8]
   1779a:	4b49      	ldr	r3, [pc, #292]	; (178c0 <notify_cb+0x130>)
   1779c:	429a      	cmp	r2, r3
   1779e:	d005      	beq.n	177ac <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   177a0:	f04f 0901 	mov.w	r9, #1
}
   177a4:	4648      	mov	r0, r9
   177a6:	b002      	add	sp, #8
   177a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   177ac:	4607      	mov	r7, r0
	ccc = attr->user_data;
   177ae:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   177b0:	4b44      	ldr	r3, [pc, #272]	; (178c4 <notify_cb+0x134>)
   177b2:	429d      	cmp	r5, r3
   177b4:	d031      	beq.n	1781a <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   177b6:	2400      	movs	r4, #0
   177b8:	e047      	b.n	1784a <notify_cb+0xba>
				sc = (struct sc_data *)data->ind_params->data;
   177ba:	6933      	ldr	r3, [r6, #16]
   177bc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   177be:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   177c2:	8853      	ldrh	r3, [r2, #2]
   177c4:	8812      	ldrh	r2, [r2, #0]
   177c6:	4641      	mov	r1, r8
   177c8:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 178c8 <notify_cb+0x138>
   177cc:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   177d0:	f00b fbdb 	bl	22f8a <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   177d4:	3401      	adds	r4, #1
   177d6:	2c00      	cmp	r4, #0
   177d8:	d1ed      	bne.n	177b6 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   177da:	eb04 0844 	add.w	r8, r4, r4, lsl #1
   177de:	4b3a      	ldr	r3, [pc, #232]	; (178c8 <notify_cb+0x138>)
   177e0:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   177e4:	f108 0801 	add.w	r8, r8, #1
   177e8:	2300      	movs	r3, #0
   177ea:	9300      	str	r3, [sp, #0]
   177ec:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   177f0:	2207      	movs	r2, #7
   177f2:	4669      	mov	r1, sp
   177f4:	4640      	mov	r0, r8
   177f6:	f00d ff88 	bl	2570a <memcmp>
   177fa:	2800      	cmp	r0, #0
   177fc:	d0ea      	beq.n	177d4 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   177fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   17802:	2207      	movs	r2, #7
   17804:	4641      	mov	r1, r8
   17806:	4830      	ldr	r0, [pc, #192]	; (178c8 <notify_cb+0x138>)
   17808:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1780c:	f7fe fcb4 	bl	16178 <bt_conn_lookup_state_le>
			if (!conn) {
   17810:	2800      	cmp	r0, #0
   17812:	d0d2      	beq.n	177ba <notify_cb+0x2a>
			bt_conn_unref(conn);
   17814:	f009 ffe4 	bl	217e0 <bt_conn_unref>
   17818:	e7dc      	b.n	177d4 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1781a:	2400      	movs	r4, #0
   1781c:	e7db      	b.n	177d6 <notify_cb+0x46>
			bt_conn_unref(conn);
   1781e:	f009 ffdf 	bl	217e0 <bt_conn_unref>
			continue;
   17822:	e011      	b.n	17848 <notify_cb+0xb8>
			bt_conn_unref(conn);
   17824:	4640      	mov	r0, r8
   17826:	f009 ffdb 	bl	217e0 <bt_conn_unref>
			continue;
   1782a:	e00d      	b.n	17848 <notify_cb+0xb8>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1782c:	6932      	ldr	r2, [r6, #16]
   1782e:	88b1      	ldrh	r1, [r6, #4]
   17830:	4640      	mov	r0, r8
   17832:	f00b fd88 	bl	23346 <gatt_notify>
   17836:	4682      	mov	sl, r0
		bt_conn_unref(conn);
   17838:	4640      	mov	r0, r8
   1783a:	f009 ffd1 	bl	217e0 <bt_conn_unref>
		if (err < 0) {
   1783e:	f1ba 0f00 	cmp.w	sl, #0
   17842:	dbaf      	blt.n	177a4 <notify_cb+0x14>
		data->err = 0;
   17844:	2300      	movs	r3, #0
   17846:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17848:	3401      	adds	r4, #1
   1784a:	2c00      	cmp	r4, #0
   1784c:	d134      	bne.n	178b8 <notify_cb+0x128>
		if (cfg->value != data->type) {
   1784e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17852:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   17856:	8919      	ldrh	r1, [r3, #8]
   17858:	89b3      	ldrh	r3, [r6, #12]
   1785a:	4299      	cmp	r1, r3
   1785c:	d1f4      	bne.n	17848 <notify_cb+0xb8>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1785e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17862:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   17866:	3101      	adds	r1, #1
   17868:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1786c:	f7fe fc5e 	bl	1612c <bt_conn_lookup_addr_le>
		if (!conn) {
   17870:	4680      	mov	r8, r0
   17872:	2800      	cmp	r0, #0
   17874:	d0e8      	beq.n	17848 <notify_cb+0xb8>
		if (conn->state != BT_CONN_CONNECTED) {
   17876:	7a83      	ldrb	r3, [r0, #10]
   17878:	2b07      	cmp	r3, #7
   1787a:	d1d0      	bne.n	1781e <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1787c:	696b      	ldr	r3, [r5, #20]
   1787e:	b11b      	cbz	r3, 17888 <notify_cb+0xf8>
   17880:	4639      	mov	r1, r7
   17882:	4798      	blx	r3
   17884:	2800      	cmp	r0, #0
   17886:	d0cd      	beq.n	17824 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   17888:	2214      	movs	r2, #20
   1788a:	4639      	mov	r1, r7
   1788c:	4640      	mov	r0, r8
   1788e:	f00b fd2e 	bl	232ee <bt_gatt_check_perm>
   17892:	4681      	mov	r9, r0
   17894:	2800      	cmp	r0, #0
   17896:	d1d7      	bne.n	17848 <notify_cb+0xb8>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17898:	89b3      	ldrh	r3, [r6, #12]
   1789a:	2b02      	cmp	r3, #2
   1789c:	d1c6      	bne.n	1782c <notify_cb+0x9c>
			err = gatt_indicate(conn, data->handle,
   1789e:	6932      	ldr	r2, [r6, #16]
   178a0:	88b1      	ldrh	r1, [r6, #4]
   178a2:	4640      	mov	r0, r8
   178a4:	f7ff fdcc 	bl	17440 <gatt_indicate>
			if (err == 0) {
   178a8:	4682      	mov	sl, r0
   178aa:	2800      	cmp	r0, #0
   178ac:	d1c4      	bne.n	17838 <notify_cb+0xa8>
				data->ind_params->_ref++;
   178ae:	6932      	ldr	r2, [r6, #16]
   178b0:	7d93      	ldrb	r3, [r2, #22]
   178b2:	3301      	adds	r3, #1
   178b4:	7593      	strb	r3, [r2, #22]
   178b6:	e7bf      	b.n	17838 <notify_cb+0xa8>
	return BT_GATT_ITER_CONTINUE;
   178b8:	f04f 0901 	mov.w	r9, #1
   178bc:	e772      	b.n	177a4 <notify_cb+0x14>
   178be:	bf00      	nop
   178c0:	00023011 	.word	0x00023011
   178c4:	20000888 	.word	0x20000888
   178c8:	20002930 	.word	0x20002930

000178cc <update_ccc>:
{
   178cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = data->conn;
   178ce:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   178d0:	6882      	ldr	r2, [r0, #8]
   178d2:	4b18      	ldr	r3, [pc, #96]	; (17934 <update_ccc+0x68>)
   178d4:	429a      	cmp	r2, r3
   178d6:	d001      	beq.n	178dc <update_ccc+0x10>
}
   178d8:	2001      	movs	r0, #1
   178da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   178dc:	4604      	mov	r4, r0
	ccc = attr->user_data;
   178de:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   178e0:	2500      	movs	r5, #0
   178e2:	2d00      	cmp	r5, #0
   178e4:	d1f8      	bne.n	178d8 <update_ccc+0xc>
		if (!cfg->value ||
   178e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   178ea:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   178ee:	891b      	ldrh	r3, [r3, #8]
   178f0:	b1eb      	cbz	r3, 1792e <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   178f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   178f6:	eb06 0243 	add.w	r2, r6, r3, lsl #1
   178fa:	3201      	adds	r2, #1
   178fc:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
   17900:	4638      	mov	r0, r7
   17902:	f009 ffdb 	bl	218bc <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17906:	b190      	cbz	r0, 1792e <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17908:	222a      	movs	r2, #42	; 0x2a
   1790a:	4621      	mov	r1, r4
   1790c:	4638      	mov	r0, r7
   1790e:	f00b fcee 	bl	232ee <bt_gatt_check_perm>
		if (err) {
   17912:	b108      	cbz	r0, 17918 <update_ccc+0x4c>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17914:	2803      	cmp	r0, #3
   17916:	d00a      	beq.n	1792e <update_ccc+0x62>
		gatt_ccc_changed(attr, ccc);
   17918:	4631      	mov	r1, r6
   1791a:	4620      	mov	r0, r4
   1791c:	f00b f93c 	bl	22b98 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17920:	4b05      	ldr	r3, [pc, #20]	; (17938 <update_ccc+0x6c>)
   17922:	429e      	cmp	r6, r3
   17924:	d1d8      	bne.n	178d8 <update_ccc+0xc>
			sc_restore(conn);
   17926:	4638      	mov	r0, r7
   17928:	f7ff fe90 	bl	1764c <sc_restore>
   1792c:	e7d4      	b.n	178d8 <update_ccc+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1792e:	3501      	adds	r5, #1
   17930:	e7d7      	b.n	178e2 <update_ccc+0x16>
   17932:	bf00      	nop
   17934:	00023011 	.word	0x00023011
   17938:	20000888 	.word	0x20000888

0001793c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1793c:	b500      	push	{lr}
   1793e:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   17940:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   17942:	2001      	movs	r0, #1
   17944:	f88d 0014 	strb.w	r0, [sp, #20]
   17948:	ab04      	add	r3, sp, #16
   1794a:	9302      	str	r3, [sp, #8]
   1794c:	4b05      	ldr	r3, [pc, #20]	; (17964 <bt_gatt_connected+0x28>)
   1794e:	9301      	str	r3, [sp, #4]
   17950:	2200      	movs	r2, #0
   17952:	9200      	str	r2, [sp, #0]
   17954:	4613      	mov	r3, r2
   17956:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1795a:	f7ff fccf 	bl	172fc <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1795e:	b007      	add	sp, #28
   17960:	f85d fb04 	ldr.w	pc, [sp], #4
   17964:	000178cd 	.word	0x000178cd

00017968 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   17968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1796a:	4605      	mov	r5, r0
   1796c:	460e      	mov	r6, r1
   1796e:	4617      	mov	r7, r2
	return list->head;
   17970:	4b0a      	ldr	r3, [pc, #40]	; (1799c <bt_gatt_att_max_mtu_changed+0x34>)
   17972:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17974:	b134      	cbz	r4, 17984 <bt_gatt_att_max_mtu_changed+0x1c>
   17976:	3c04      	subs	r4, #4
   17978:	e004      	b.n	17984 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1797a:	1d23      	adds	r3, r4, #4
   1797c:	d00b      	beq.n	17996 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1797e:	6864      	ldr	r4, [r4, #4]
   17980:	b15c      	cbz	r4, 1799a <bt_gatt_att_max_mtu_changed+0x32>
   17982:	3c04      	subs	r4, #4
   17984:	b14c      	cbz	r4, 1799a <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   17986:	6823      	ldr	r3, [r4, #0]
   17988:	2b00      	cmp	r3, #0
   1798a:	d0f6      	beq.n	1797a <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1798c:	463a      	mov	r2, r7
   1798e:	4631      	mov	r1, r6
   17990:	4628      	mov	r0, r5
   17992:	4798      	blx	r3
   17994:	e7f1      	b.n	1797a <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17996:	461c      	mov	r4, r3
   17998:	e7f4      	b.n	17984 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   1799a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1799c:	20002914 	.word	0x20002914

000179a0 <db_hash_read>:
{
   179a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   179a2:	b085      	sub	sp, #20
   179a4:	4604      	mov	r4, r0
   179a6:	460d      	mov	r5, r1
   179a8:	4616      	mov	r6, r2
   179aa:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   179ac:	4812      	ldr	r0, [pc, #72]	; (179f8 <db_hash_read+0x58>)
   179ae:	f100 0140 	add.w	r1, r0, #64	; 0x40
   179b2:	3010      	adds	r0, #16
   179b4:	f00d fb3f 	bl	25036 <k_work_cancel_delayable_sync>
   179b8:	f3bf 8f5b 	dmb	ish
   179bc:	4b0f      	ldr	r3, [pc, #60]	; (179fc <db_hash_read+0x5c>)
   179be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   179c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   179c4:	f013 0f04 	tst.w	r3, #4
   179c8:	d012      	beq.n	179f0 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   179ca:	2101      	movs	r1, #1
   179cc:	4620      	mov	r0, r4
   179ce:	f00b fcec 	bl	233aa <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   179d2:	2310      	movs	r3, #16
   179d4:	9302      	str	r3, [sp, #8]
   179d6:	4b08      	ldr	r3, [pc, #32]	; (179f8 <db_hash_read+0x58>)
   179d8:	9301      	str	r3, [sp, #4]
   179da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   179de:	9300      	str	r3, [sp, #0]
   179e0:	463b      	mov	r3, r7
   179e2:	4632      	mov	r2, r6
   179e4:	4629      	mov	r1, r5
   179e6:	4620      	mov	r0, r4
   179e8:	f00b fb6e 	bl	230c8 <bt_gatt_attr_read>
}
   179ec:	b005      	add	sp, #20
   179ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   179f0:	2001      	movs	r0, #1
   179f2:	f7ff fccd 	bl	17390 <db_hash_gen>
   179f6:	e7e8      	b.n	179ca <db_hash_read+0x2a>
   179f8:	20001c98 	.word	0x20001c98
   179fc:	20001d00 	.word	0x20001d00

00017a00 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17a00:	b510      	push	{r4, lr}
   17a02:	b084      	sub	sp, #16
   17a04:	4604      	mov	r4, r0
   17a06:	9002      	str	r0, [sp, #8]
   17a08:	4b07      	ldr	r3, [pc, #28]	; (17a28 <bt_gatt_disconnected+0x28>)
   17a0a:	9301      	str	r3, [sp, #4]
   17a0c:	2200      	movs	r2, #0
   17a0e:	9200      	str	r2, [sp, #0]
   17a10:	4613      	mov	r3, r2
   17a12:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17a16:	2001      	movs	r0, #1
   17a18:	f7ff fc70 	bl	172fc <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   17a1c:	4620      	mov	r0, r4
   17a1e:	f00b fa8d 	bl	22f3c <remove_cf_cfg>
#endif
}
   17a22:	b004      	add	sp, #16
   17a24:	bd10      	pop	{r4, pc}
   17a26:	bf00      	nop
   17a28:	00017161 	.word	0x00017161

00017a2c <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   17a2c:	2300      	movs	r3, #0
   17a2e:	2b00      	cmp	r3, #0
   17a30:	dd02      	ble.n	17a38 <bt_smp_accept+0xc>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   17a32:	f06f 000b 	mvn.w	r0, #11
}
   17a36:	4770      	bx	lr
		if (smp->chan.conn) {
   17a38:	22e8      	movs	r2, #232	; 0xe8
   17a3a:	fb02 f203 	mul.w	r2, r2, r3
   17a3e:	4807      	ldr	r0, [pc, #28]	; (17a5c <bt_smp_accept+0x30>)
   17a40:	5882      	ldr	r2, [r0, r2]
   17a42:	b10a      	cbz	r2, 17a48 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   17a44:	3301      	adds	r3, #1
   17a46:	e7f2      	b.n	17a2e <bt_smp_accept+0x2>
		smp->chan.ops = &ops;
   17a48:	4a04      	ldr	r2, [pc, #16]	; (17a5c <bt_smp_accept+0x30>)
   17a4a:	20e8      	movs	r0, #232	; 0xe8
   17a4c:	fb00 2303 	mla	r3, r0, r3, r2
   17a50:	4a03      	ldr	r2, [pc, #12]	; (17a60 <bt_smp_accept+0x34>)
   17a52:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   17a54:	600b      	str	r3, [r1, #0]
		return 0;
   17a56:	2000      	movs	r0, #0
   17a58:	4770      	bx	lr
   17a5a:	bf00      	nop
   17a5c:	20001d58 	.word	0x20001d58
   17a60:	00026f68 	.word	0x00026f68

00017a64 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   17a64:	4b03      	ldr	r3, [pc, #12]	; (17a74 <pool_id+0x10>)
   17a66:	1ac0      	subs	r0, r0, r3
   17a68:	1080      	asrs	r0, r0, #2
}
   17a6a:	4b03      	ldr	r3, [pc, #12]	; (17a78 <pool_id+0x14>)
   17a6c:	fb03 f000 	mul.w	r0, r3, r0
   17a70:	4770      	bx	lr
   17a72:	bf00      	nop
   17a74:	20000b14 	.word	0x20000b14
   17a78:	ba2e8ba3 	.word	0xba2e8ba3

00017a7c <net_buf_pool_get>:
}
   17a7c:	222c      	movs	r2, #44	; 0x2c
   17a7e:	4b02      	ldr	r3, [pc, #8]	; (17a88 <net_buf_pool_get+0xc>)
   17a80:	fb02 3000 	mla	r0, r2, r0, r3
   17a84:	4770      	bx	lr
   17a86:	bf00      	nop
   17a88:	20000b14 	.word	0x20000b14

00017a8c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   17a8c:	4800      	ldr	r0, [pc, #0]	; (17a90 <get_hf_flags+0x4>)
   17a8e:	4770      	bx	lr
   17a90:	200029a8 	.word	0x200029a8

00017a94 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   17a94:	4b03      	ldr	r3, [pc, #12]	; (17aa4 <get_subsys+0x10>)
   17a96:	1ac0      	subs	r0, r0, r3
   17a98:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   17a9a:	4b03      	ldr	r3, [pc, #12]	; (17aa8 <get_subsys+0x14>)
   17a9c:	fb03 f000 	mul.w	r0, r3, r0
   17aa0:	4770      	bx	lr
   17aa2:	bf00      	nop
   17aa4:	20002968 	.word	0x20002968
   17aa8:	b6db6db7 	.word	0xb6db6db7

00017aac <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17aac:	b538      	push	{r3, r4, r5, lr}
   17aae:	4605      	mov	r5, r0
   17ab0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17ab2:	f7ff ffef 	bl	17a94 <get_subsys>
   17ab6:	4601      	mov	r1, r0
   17ab8:	2240      	movs	r2, #64	; 0x40
   17aba:	4803      	ldr	r0, [pc, #12]	; (17ac8 <onoff_stop+0x1c>)
   17abc:	f00b ff01 	bl	238c2 <stop>
   17ac0:	4601      	mov	r1, r0
	notify(mgr, res);
   17ac2:	4628      	mov	r0, r5
   17ac4:	47a0      	blx	r4
}
   17ac6:	bd38      	pop	{r3, r4, r5, pc}
   17ac8:	000258c8 	.word	0x000258c8

00017acc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17acc:	b530      	push	{r4, r5, lr}
   17ace:	b083      	sub	sp, #12
   17ad0:	4605      	mov	r5, r0
   17ad2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17ad4:	f7ff ffde 	bl	17a94 <get_subsys>
   17ad8:	4601      	mov	r1, r0
   17ada:	2340      	movs	r3, #64	; 0x40
   17adc:	9300      	str	r3, [sp, #0]
   17ade:	4623      	mov	r3, r4
   17ae0:	4a05      	ldr	r2, [pc, #20]	; (17af8 <onoff_start+0x2c>)
   17ae2:	4806      	ldr	r0, [pc, #24]	; (17afc <onoff_start+0x30>)
   17ae4:	f00b ff07 	bl	238f6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   17ae8:	1e01      	subs	r1, r0, #0
   17aea:	db01      	blt.n	17af0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   17aec:	b003      	add	sp, #12
   17aee:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   17af0:	4628      	mov	r0, r5
   17af2:	47a0      	blx	r4
}
   17af4:	e7fa      	b.n	17aec <onoff_start+0x20>
   17af6:	bf00      	nop
   17af8:	0002393f 	.word	0x0002393f
   17afc:	000258c8 	.word	0x000258c8

00017b00 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   17b00:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   17b02:	b110      	cbz	r0, 17b0a <clock_event_handler+0xa>
   17b04:	2801      	cmp	r0, #1
   17b06:	d00d      	beq.n	17b24 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   17b08:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   17b0a:	2100      	movs	r1, #0
   17b0c:	4808      	ldr	r0, [pc, #32]	; (17b30 <clock_event_handler+0x30>)
   17b0e:	f00b fe61 	bl	237d4 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   17b12:	6883      	ldr	r3, [r0, #8]
   17b14:	f013 0f07 	tst.w	r3, #7
   17b18:	d1f6      	bne.n	17b08 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   17b1a:	2100      	movs	r1, #0
   17b1c:	4804      	ldr	r0, [pc, #16]	; (17b30 <clock_event_handler+0x30>)
   17b1e:	f00b febe 	bl	2389e <clkstarted_handle>
   17b22:	e7f1      	b.n	17b08 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   17b24:	2101      	movs	r1, #1
   17b26:	4802      	ldr	r0, [pc, #8]	; (17b30 <clock_event_handler+0x30>)
   17b28:	f00b feb9 	bl	2389e <clkstarted_handle>
}
   17b2c:	e7ec      	b.n	17b08 <clock_event_handler+0x8>
   17b2e:	bf00      	nop
   17b30:	000258c8 	.word	0x000258c8

00017b34 <generic_hfclk_start>:
{
   17b34:	b510      	push	{r4, lr}
	__asm__ volatile(
   17b36:	f04f 0340 	mov.w	r3, #64	; 0x40
   17b3a:	f3ef 8411 	mrs	r4, BASEPRI
   17b3e:	f383 8812 	msr	BASEPRI_MAX, r3
   17b42:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17b46:	4a13      	ldr	r2, [pc, #76]	; (17b94 <generic_hfclk_start+0x60>)
   17b48:	6813      	ldr	r3, [r2, #0]
   17b4a:	f043 0302 	orr.w	r3, r3, #2
   17b4e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17b50:	f013 0f01 	tst.w	r3, #1
   17b54:	d108      	bne.n	17b68 <generic_hfclk_start+0x34>
	bool already_started = false;
   17b56:	2300      	movs	r3, #0
	__asm__ volatile(
   17b58:	f384 8811 	msr	BASEPRI, r4
   17b5c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   17b60:	b99b      	cbnz	r3, 17b8a <generic_hfclk_start+0x56>
	hfclk_start();
   17b62:	f00b fef4 	bl	2394e <hfclk_start>
}
   17b66:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b6c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17b70:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   17b74:	f012 0f01 	tst.w	r2, #1
   17b78:	d101      	bne.n	17b7e <generic_hfclk_start+0x4a>
	bool already_started = false;
   17b7a:	2300      	movs	r3, #0
   17b7c:	e7ec      	b.n	17b58 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   17b7e:	f7ff ff85 	bl	17a8c <get_hf_flags>
   17b82:	f00b fe79 	bl	23878 <set_on_state>
			already_started = true;
   17b86:	2301      	movs	r3, #1
   17b88:	e7e6      	b.n	17b58 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   17b8a:	2100      	movs	r1, #0
   17b8c:	4802      	ldr	r0, [pc, #8]	; (17b98 <generic_hfclk_start+0x64>)
   17b8e:	f00b fe86 	bl	2389e <clkstarted_handle>
		return;
   17b92:	e7e8      	b.n	17b66 <generic_hfclk_start+0x32>
   17b94:	200029b8 	.word	0x200029b8
   17b98:	000258c8 	.word	0x000258c8

00017b9c <generic_hfclk_stop>:
{
   17b9c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b9e:	4b0a      	ldr	r3, [pc, #40]	; (17bc8 <generic_hfclk_stop+0x2c>)
   17ba0:	f3bf 8f5b 	dmb	ish
   17ba4:	e853 2f00 	ldrex	r2, [r3]
   17ba8:	f022 0102 	bic.w	r1, r2, #2
   17bac:	e843 1000 	strex	r0, r1, [r3]
   17bb0:	2800      	cmp	r0, #0
   17bb2:	d1f7      	bne.n	17ba4 <generic_hfclk_stop+0x8>
   17bb4:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   17bb8:	f012 0f01 	tst.w	r2, #1
   17bbc:	d000      	beq.n	17bc0 <generic_hfclk_stop+0x24>
}
   17bbe:	bd08      	pop	{r3, pc}
	hfclk_stop();
   17bc0:	f00b fecf 	bl	23962 <hfclk_stop>
   17bc4:	e7fb      	b.n	17bbe <generic_hfclk_stop+0x22>
   17bc6:	bf00      	nop
   17bc8:	200029b8 	.word	0x200029b8

00017bcc <api_blocking_start>:
{
   17bcc:	b500      	push	{lr}
   17bce:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17bd0:	f8cd d000 	str.w	sp, [sp]
   17bd4:	f8cd d004 	str.w	sp, [sp, #4]
   17bd8:	2300      	movs	r3, #0
   17bda:	9302      	str	r3, [sp, #8]
   17bdc:	2301      	movs	r3, #1
   17bde:	9303      	str	r3, [sp, #12]
   17be0:	ab04      	add	r3, sp, #16
   17be2:	9304      	str	r3, [sp, #16]
   17be4:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17be6:	466b      	mov	r3, sp
   17be8:	4a06      	ldr	r2, [pc, #24]	; (17c04 <api_blocking_start+0x38>)
   17bea:	f00b fea0 	bl	2392e <api_start>
	if (err < 0) {
   17bee:	2800      	cmp	r0, #0
   17bf0:	db05      	blt.n	17bfe <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   17bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17bf6:	2300      	movs	r3, #0
   17bf8:	4668      	mov	r0, sp
   17bfa:	f003 f96b 	bl	1aed4 <z_impl_k_sem_take>
}
   17bfe:	b007      	add	sp, #28
   17c00:	f85d fb04 	ldr.w	pc, [sp], #4
   17c04:	00023977 	.word	0x00023977

00017c08 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   17c08:	b570      	push	{r4, r5, r6, lr}
   17c0a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17c0c:	2200      	movs	r2, #0
   17c0e:	2101      	movs	r1, #1
   17c10:	4610      	mov	r0, r2
   17c12:	f7fb fee3 	bl	139dc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   17c16:	2000      	movs	r0, #0
   17c18:	f7fb feae 	bl	13978 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   17c1c:	4811      	ldr	r0, [pc, #68]	; (17c64 <clk_init+0x5c>)
   17c1e:	f001 faeb 	bl	191f8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   17c22:	4b11      	ldr	r3, [pc, #68]	; (17c68 <clk_init+0x60>)
   17c24:	4298      	cmp	r0, r3
   17c26:	d11a      	bne.n	17c5e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   17c28:	f00c fdcc 	bl	247c4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   17c2c:	2400      	movs	r4, #0
   17c2e:	e003      	b.n	17c38 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   17c30:	2301      	movs	r3, #1
   17c32:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   17c34:	441c      	add	r4, r3
   17c36:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   17c38:	2c01      	cmp	r4, #1
   17c3a:	d80e      	bhi.n	17c5a <clk_init+0x52>
						get_sub_data(dev, i);
   17c3c:	4621      	mov	r1, r4
   17c3e:	4630      	mov	r0, r6
   17c40:	f00b fdc8 	bl	237d4 <get_sub_data>
   17c44:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   17c46:	4621      	mov	r1, r4
   17c48:	4630      	mov	r0, r6
   17c4a:	f00b fdce 	bl	237ea <get_onoff_manager>
   17c4e:	4907      	ldr	r1, [pc, #28]	; (17c6c <clk_init+0x64>)
   17c50:	f008 f908 	bl	1fe64 <onoff_manager_init>
		if (err < 0) {
   17c54:	2800      	cmp	r0, #0
   17c56:	daeb      	bge.n	17c30 <clk_init+0x28>
   17c58:	e000      	b.n	17c5c <clk_init+0x54>
	}

	return 0;
   17c5a:	2000      	movs	r0, #0
}
   17c5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   17c5e:	f06f 0004 	mvn.w	r0, #4
   17c62:	e7fb      	b.n	17c5c <clk_init+0x54>
   17c64:	00017b01 	.word	0x00017b01
   17c68:	0bad0000 	.word	0x0bad0000
   17c6c:	00026fc8 	.word	0x00026fc8

00017c70 <lfclk_spinwait>:
{
   17c70:	b570      	push	{r4, r5, r6, lr}
   17c72:	4605      	mov	r5, r0
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17c74:	f00c ff99 	bl	24baa <k_is_in_isr>
   17c78:	b920      	cbnz	r0, 17c84 <lfclk_spinwait+0x14>
	return !z_sys_post_kernel;
   17c7a:	4b21      	ldr	r3, [pc, #132]	; (17d00 <lfclk_spinwait+0x90>)
   17c7c:	781b      	ldrb	r3, [r3, #0]
   17c7e:	b19b      	cbz	r3, 17ca8 <lfclk_spinwait+0x38>
   17c80:	2300      	movs	r3, #0
   17c82:	e000      	b.n	17c86 <lfclk_spinwait+0x16>
   17c84:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   17c86:	461c      	mov	r4, r3
   17c88:	b183      	cbz	r3, 17cac <lfclk_spinwait+0x3c>
	__asm__ volatile(
   17c8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   17c8e:	f3ef 8611 	mrs	r6, BASEPRI
   17c92:	f383 8812 	msr	BASEPRI_MAX, r3
   17c96:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   17c9a:	b96c      	cbnz	r4, 17cb8 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
   17c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17ca0:	2202      	movs	r2, #2
   17ca2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   17ca6:	e007      	b.n	17cb8 <lfclk_spinwait+0x48>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17ca8:	2301      	movs	r3, #1
   17caa:	e7ec      	b.n	17c86 <lfclk_spinwait+0x16>
	int key = isr_mode ? irq_lock() : 0;
   17cac:	2600      	movs	r6, #0
   17cae:	e7f4      	b.n	17c9a <lfclk_spinwait+0x2a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   17cb0:	b1cc      	cbz	r4, 17ce6 <lfclk_spinwait+0x76>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   17cb2:	4630      	mov	r0, r6
   17cb4:	f7fb fe56 	bl	13964 <arch_cpu_atomic_idle>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17cbc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   17cc0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17cc4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   17cc8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   17ccc:	d110      	bne.n	17cf0 <lfclk_spinwait+0x80>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   17cce:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   17cd0:	2a00      	cmp	r2, #0
   17cd2:	d0ed      	beq.n	17cb0 <lfclk_spinwait+0x40>
   17cd4:	b10b      	cbz	r3, 17cda <lfclk_spinwait+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   17cd6:	2d01      	cmp	r5, #1
   17cd8:	d1ea      	bne.n	17cb0 <lfclk_spinwait+0x40>
	if (isr_mode) {
   17cda:	b15c      	cbz	r4, 17cf4 <lfclk_spinwait+0x84>
	__asm__ volatile(
   17cdc:	f386 8811 	msr	BASEPRI, r6
   17ce0:	f3bf 8f6f 	isb	sy
}
   17ce4:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   17ce6:	2021      	movs	r0, #33	; 0x21
   17ce8:	2100      	movs	r1, #0
   17cea:	f003 fe7b 	bl	1b9e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17cee:	e7e3      	b.n	17cb8 <lfclk_spinwait+0x48>
                return true;
   17cf0:	2201      	movs	r2, #1
   17cf2:	e7ed      	b.n	17cd0 <lfclk_spinwait+0x60>
    p_reg->INTENSET = mask;
   17cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17cf8:	2202      	movs	r2, #2
   17cfa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17cfe:	e7f1      	b.n	17ce4 <lfclk_spinwait+0x74>
   17d00:	20003f76 	.word	0x20003f76

00017d04 <z_nrf_clock_control_lf_on>:
{
   17d04:	b510      	push	{r4, lr}
   17d06:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17d08:	4b10      	ldr	r3, [pc, #64]	; (17d4c <z_nrf_clock_control_lf_on+0x48>)
   17d0a:	2101      	movs	r1, #1
   17d0c:	f3bf 8f5b 	dmb	ish
   17d10:	e853 2f00 	ldrex	r2, [r3]
   17d14:	e843 1000 	strex	r0, r1, [r3]
   17d18:	2800      	cmp	r0, #0
   17d1a:	d1f9      	bne.n	17d10 <z_nrf_clock_control_lf_on+0xc>
   17d1c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   17d20:	b11a      	cbz	r2, 17d2a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   17d22:	1e63      	subs	r3, r4, #1
   17d24:	2b01      	cmp	r3, #1
   17d26:	d90c      	bls.n	17d42 <z_nrf_clock_control_lf_on+0x3e>
}
   17d28:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   17d2a:	4809      	ldr	r0, [pc, #36]	; (17d50 <z_nrf_clock_control_lf_on+0x4c>)
   17d2c:	f00b fd5d 	bl	237ea <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   17d30:	4908      	ldr	r1, [pc, #32]	; (17d54 <z_nrf_clock_control_lf_on+0x50>)
   17d32:	2300      	movs	r3, #0
   17d34:	604b      	str	r3, [r1, #4]
   17d36:	60cb      	str	r3, [r1, #12]
   17d38:	2301      	movs	r3, #1
   17d3a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   17d3c:	f008 f8ae 	bl	1fe9c <onoff_request>
   17d40:	e7ef      	b.n	17d22 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   17d42:	4620      	mov	r0, r4
   17d44:	f7ff ff94 	bl	17c70 <lfclk_spinwait>
		break;
   17d48:	e7ee      	b.n	17d28 <z_nrf_clock_control_lf_on+0x24>
   17d4a:	bf00      	nop
   17d4c:	200029bc 	.word	0x200029bc
   17d50:	000258c8 	.word	0x000258c8
   17d54:	20002958 	.word	0x20002958

00017d58 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   17d58:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   17d5a:	4c04      	ldr	r4, [pc, #16]	; (17d6c <rtt_console_init+0x14>)
   17d5c:	4620      	mov	r0, r4
   17d5e:	f7f9 fe7b 	bl	11a58 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   17d62:	4620      	mov	r0, r4
   17d64:	f7fc f9b2 	bl	140cc <__stdout_hook_install>

	return 0;
}
   17d68:	2000      	movs	r0, #0
   17d6a:	bd10      	pop	{r4, pc}
   17d6c:	00017d71 	.word	0x00017d71

00017d70 <rtt_console_out>:
{
   17d70:	b570      	push	{r4, r5, r6, lr}
   17d72:	b082      	sub	sp, #8
   17d74:	4606      	mov	r6, r0
	char c = (char)character;
   17d76:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   17d7a:	2402      	movs	r4, #2
   17d7c:	e006      	b.n	17d8c <rtt_console_out+0x1c>
			host_present = true;
   17d7e:	4b11      	ldr	r3, [pc, #68]	; (17dc4 <rtt_console_out+0x54>)
   17d80:	2201      	movs	r2, #1
   17d82:	701a      	strb	r2, [r3, #0]
   17d84:	e01a      	b.n	17dbc <rtt_console_out+0x4c>
				wait();
   17d86:	f00b fdfb 	bl	23980 <wait>
				max_cnt--;
   17d8a:	3c01      	subs	r4, #1
		SEGGER_RTT_LOCK();
   17d8c:	f3ef 8511 	mrs	r5, BASEPRI
   17d90:	f04f 0120 	mov.w	r1, #32
   17d94:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   17d98:	2201      	movs	r2, #1
   17d9a:	f10d 0107 	add.w	r1, sp, #7
   17d9e:	2000      	movs	r0, #0
   17da0:	f002 fc6c 	bl	1a67c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   17da4:	f385 8811 	msr	BASEPRI, r5
		if (cnt) {
   17da8:	2800      	cmp	r0, #0
   17daa:	d1e8      	bne.n	17d7e <rtt_console_out+0xe>
		} else if (host_present) {
   17dac:	4b05      	ldr	r3, [pc, #20]	; (17dc4 <rtt_console_out+0x54>)
   17dae:	781b      	ldrb	r3, [r3, #0]
   17db0:	b123      	cbz	r3, 17dbc <rtt_console_out+0x4c>
			if (max_cnt) {
   17db2:	2c00      	cmp	r4, #0
   17db4:	d1e7      	bne.n	17d86 <rtt_console_out+0x16>
				host_present = false;
   17db6:	4b03      	ldr	r3, [pc, #12]	; (17dc4 <rtt_console_out+0x54>)
   17db8:	2200      	movs	r2, #0
   17dba:	701a      	strb	r2, [r3, #0]
}
   17dbc:	4630      	mov	r0, r6
   17dbe:	b002      	add	sp, #8
   17dc0:	bd70      	pop	{r4, r5, r6, pc}
   17dc2:	bf00      	nop
   17dc4:	20003f75 	.word	0x20003f75

00017dc8 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17dc8:	4b1f      	ldr	r3, [pc, #124]	; (17e48 <get_drive+0x80>)
   17dca:	4003      	ands	r3, r0
   17dcc:	4a1f      	ldr	r2, [pc, #124]	; (17e4c <get_drive+0x84>)
   17dce:	4293      	cmp	r3, r2
   17dd0:	d032      	beq.n	17e38 <get_drive+0x70>
   17dd2:	d816      	bhi.n	17e02 <get_drive+0x3a>
   17dd4:	2b06      	cmp	r3, #6
   17dd6:	d02b      	beq.n	17e30 <get_drive+0x68>
   17dd8:	d906      	bls.n	17de8 <get_drive+0x20>
   17dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   17dde:	d10d      	bne.n	17dfc <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   17de0:	2301      	movs	r3, #1
   17de2:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17de4:	2000      	movs	r0, #0
		break;
   17de6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17de8:	b1fb      	cbz	r3, 17e2a <get_drive+0x62>
   17dea:	2b02      	cmp	r3, #2
   17dec:	d103      	bne.n	17df6 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   17dee:	2304      	movs	r3, #4
   17df0:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17df2:	2000      	movs	r0, #0
		break;
   17df4:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17df6:	f06f 0015 	mvn.w	r0, #21
   17dfa:	4770      	bx	lr
   17dfc:	f06f 0015 	mvn.w	r0, #21
   17e00:	4770      	bx	lr
   17e02:	4a13      	ldr	r2, [pc, #76]	; (17e50 <get_drive+0x88>)
   17e04:	4293      	cmp	r3, r2
   17e06:	d01b      	beq.n	17e40 <get_drive+0x78>
   17e08:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   17e0c:	d103      	bne.n	17e16 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   17e0e:	2303      	movs	r3, #3
   17e10:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17e12:	2000      	movs	r0, #0
		break;
   17e14:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   17e1a:	d103      	bne.n	17e24 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   17e1c:	2302      	movs	r3, #2
   17e1e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17e20:	2000      	movs	r0, #0
		break;
   17e22:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17e24:	f06f 0015 	mvn.w	r0, #21
   17e28:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   17e2a:	2000      	movs	r0, #0
   17e2c:	7008      	strb	r0, [r1, #0]
		break;
   17e2e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   17e30:	2306      	movs	r3, #6
   17e32:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17e34:	2000      	movs	r0, #0
		break;
   17e36:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   17e38:	2307      	movs	r3, #7
   17e3a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17e3c:	2000      	movs	r0, #0
		break;
   17e3e:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   17e40:	2305      	movs	r3, #5
   17e42:	700b      	strb	r3, [r1, #0]
	int err = 0;
   17e44:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   17e46:	4770      	bx	lr
   17e48:	00f00006 	.word	0x00f00006
   17e4c:	00100006 	.word	0x00100006
   17e50:	00400002 	.word	0x00400002

00017e54 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17e54:	b128      	cbz	r0, 17e62 <get_dev+0xe>
   17e56:	2801      	cmp	r0, #1
   17e58:	d101      	bne.n	17e5e <get_dev+0xa>
   17e5a:	4803      	ldr	r0, [pc, #12]	; (17e68 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   17e5c:	4770      	bx	lr
	const struct device *dev = NULL;
   17e5e:	2000      	movs	r0, #0
   17e60:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17e62:	4802      	ldr	r0, [pc, #8]	; (17e6c <get_dev+0x18>)
   17e64:	4770      	bx	lr
   17e66:	bf00      	nop
   17e68:	000258e0 	.word	0x000258e0
   17e6c:	000258f8 	.word	0x000258f8

00017e70 <gpio_nrfx_pin_interrupt_configure>:
{
   17e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e72:	b085      	sub	sp, #20
   17e74:	460e      	mov	r6, r1
   17e76:	4619      	mov	r1, r3
	return port->config;
   17e78:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17e7a:	7b1b      	ldrb	r3, [r3, #12]
   17e7c:	f006 051f 	and.w	r5, r6, #31
   17e80:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   17e84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   17e88:	d022      	beq.n	17ed0 <gpio_nrfx_pin_interrupt_configure+0x60>
   17e8a:	4607      	mov	r7, r0
   17e8c:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   17e8e:	2300      	movs	r3, #0
   17e90:	9302      	str	r3, [sp, #8]
   17e92:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   17e94:	4610      	mov	r0, r2
   17e96:	f00b fdb0 	bl	239fa <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   17e9a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   17e9e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   17ea0:	6899      	ldr	r1, [r3, #8]
   17ea2:	40f1      	lsrs	r1, r6
   17ea4:	f011 0f01 	tst.w	r1, #1
   17ea8:	d102      	bne.n	17eb0 <gpio_nrfx_pin_interrupt_configure+0x40>
   17eaa:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   17eae:	d014      	beq.n	17eda <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17eb0:	2300      	movs	r3, #0
   17eb2:	aa02      	add	r2, sp, #8
   17eb4:	4619      	mov	r1, r3
   17eb6:	4628      	mov	r0, r5
   17eb8:	f001 fd60 	bl	1997c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17ebc:	4b1b      	ldr	r3, [pc, #108]	; (17f2c <gpio_nrfx_pin_interrupt_configure+0xbc>)
   17ebe:	4298      	cmp	r0, r3
   17ec0:	d131      	bne.n	17f26 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   17ec2:	2101      	movs	r1, #1
   17ec4:	4628      	mov	r0, r5
   17ec6:	f001 ff31 	bl	19d2c <nrfx_gpiote_trigger_enable>
	return 0;
   17eca:	2000      	movs	r0, #0
}
   17ecc:	b005      	add	sp, #20
   17ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   17ed0:	4628      	mov	r0, r5
   17ed2:	f001 ff8f 	bl	19df4 <nrfx_gpiote_trigger_disable>
		return 0;
   17ed6:	2000      	movs	r0, #0
   17ed8:	e7f8      	b.n	17ecc <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   17eda:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   17ede:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   17ee0:	2a01      	cmp	r2, #1
   17ee2:	d014      	beq.n	17f0e <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   17ee4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17ee8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   17ef0:	f013 0f01 	tst.w	r3, #1
   17ef4:	d1dc      	bne.n	17eb0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   17ef6:	f10d 0107 	add.w	r1, sp, #7
   17efa:	4628      	mov	r0, r5
   17efc:	f001 feba 	bl	19c74 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   17f00:	4b0b      	ldr	r3, [pc, #44]	; (17f30 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   17f02:	4298      	cmp	r0, r3
   17f04:	d005      	beq.n	17f12 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   17f06:	f10d 0307 	add.w	r3, sp, #7
   17f0a:	9303      	str	r3, [sp, #12]
   17f0c:	e7d0      	b.n	17eb0 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   17f0e:	4a09      	ldr	r2, [pc, #36]	; (17f34 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   17f10:	e7ea      	b.n	17ee8 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   17f12:	f10d 0007 	add.w	r0, sp, #7
   17f16:	f001 ff01 	bl	19d1c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   17f1a:	4b04      	ldr	r3, [pc, #16]	; (17f2c <gpio_nrfx_pin_interrupt_configure+0xbc>)
   17f1c:	4298      	cmp	r0, r3
   17f1e:	d0f2      	beq.n	17f06 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   17f20:	f06f 000b 	mvn.w	r0, #11
   17f24:	e7d2      	b.n	17ecc <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   17f26:	f06f 0004 	mvn.w	r0, #4
   17f2a:	e7cf      	b.n	17ecc <gpio_nrfx_pin_interrupt_configure+0x5c>
   17f2c:	0bad0000 	.word	0x0bad0000
   17f30:	0bad0004 	.word	0x0bad0004
   17f34:	50000300 	.word	0x50000300

00017f38 <pin_uninit>:
{
   17f38:	b530      	push	{r4, r5, lr}
   17f3a:	b083      	sub	sp, #12
   17f3c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   17f3e:	f10d 0107 	add.w	r1, sp, #7
   17f42:	f001 fe97 	bl	19c74 <nrfx_gpiote_channel_get>
   17f46:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   17f48:	4620      	mov	r0, r4
   17f4a:	f001 ff83 	bl	19e54 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   17f4e:	4b0b      	ldr	r3, [pc, #44]	; (17f7c <pin_uninit+0x44>)
   17f50:	4298      	cmp	r0, r3
   17f52:	d10f      	bne.n	17f74 <pin_uninit+0x3c>
	if (free_ch) {
   17f54:	429d      	cmp	r5, r3
   17f56:	d005      	beq.n	17f64 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17f58:	4b08      	ldr	r3, [pc, #32]	; (17f7c <pin_uninit+0x44>)
   17f5a:	4298      	cmp	r0, r3
   17f5c:	d107      	bne.n	17f6e <pin_uninit+0x36>
   17f5e:	2000      	movs	r0, #0
}
   17f60:	b003      	add	sp, #12
   17f62:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   17f64:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17f68:	f001 fed0 	bl	19d0c <nrfx_gpiote_channel_free>
   17f6c:	e7f4      	b.n	17f58 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17f6e:	f06f 0004 	mvn.w	r0, #4
   17f72:	e7f5      	b.n	17f60 <pin_uninit+0x28>
		return -EIO;
   17f74:	f06f 0004 	mvn.w	r0, #4
   17f78:	e7f2      	b.n	17f60 <pin_uninit+0x28>
   17f7a:	bf00      	nop
   17f7c:	0bad0000 	.word	0x0bad0000

00017f80 <gpio_nrfx_pin_configure>:
{
   17f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f84:	b087      	sub	sp, #28
	return port->config;
   17f86:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17f8a:	f898 300c 	ldrb.w	r3, [r8, #12]
   17f8e:	f001 051f 	and.w	r5, r1, #31
   17f92:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   17f96:	2a00      	cmp	r2, #0
   17f98:	d044      	beq.n	18024 <gpio_nrfx_pin_configure+0xa4>
   17f9a:	460c      	mov	r4, r1
   17f9c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   17f9e:	2600      	movs	r6, #0
   17fa0:	9603      	str	r6, [sp, #12]
   17fa2:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   17fa4:	f10d 0117 	add.w	r1, sp, #23
   17fa8:	4620      	mov	r0, r4
   17faa:	f001 fe63 	bl	19c74 <nrfx_gpiote_channel_get>
   17fae:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17fb0:	4633      	mov	r3, r6
   17fb2:	aa03      	add	r2, sp, #12
   17fb4:	4631      	mov	r1, r6
   17fb6:	4628      	mov	r0, r5
   17fb8:	f001 fce0 	bl	1997c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17fbc:	4b30      	ldr	r3, [pc, #192]	; (18080 <gpio_nrfx_pin_configure+0x100>)
   17fbe:	4298      	cmp	r0, r3
   17fc0:	d15b      	bne.n	1807a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   17fc2:	4599      	cmp	r9, r3
   17fc4:	d036      	beq.n	18034 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   17fc6:	f417 7f00 	tst.w	r7, #512	; 0x200
   17fca:	d043      	beq.n	18054 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   17fcc:	f10d 0103 	add.w	r1, sp, #3
   17fd0:	4638      	mov	r0, r7
   17fd2:	f7ff fef9 	bl	17dc8 <get_drive>
		if (rv != 0) {
   17fd6:	4606      	mov	r6, r0
   17fd8:	bb40      	cbnz	r0, 1802c <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   17fda:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17fde:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   17fe2:	f417 7f80 	tst.w	r7, #256	; 0x100
   17fe6:	bf0c      	ite	eq
   17fe8:	2301      	moveq	r3, #1
   17fea:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   17fec:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   17ff0:	4638      	mov	r0, r7
   17ff2:	f00b fccf 	bl	23994 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   17ff6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17ffa:	f417 6f00 	tst.w	r7, #2048	; 0x800
   17ffe:	d01e      	beq.n	1803e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   18000:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18004:	2101      	movs	r1, #1
   18006:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   1800a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1800e:	2200      	movs	r2, #0
   18010:	a901      	add	r1, sp, #4
   18012:	4628      	mov	r0, r5
   18014:	f001 fd68 	bl	19ae8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   18018:	4b19      	ldr	r3, [pc, #100]	; (18080 <gpio_nrfx_pin_configure+0x100>)
   1801a:	4298      	cmp	r0, r3
   1801c:	d006      	beq.n	1802c <gpio_nrfx_pin_configure+0xac>
   1801e:	f06f 0615 	mvn.w	r6, #21
   18022:	e003      	b.n	1802c <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   18024:	4628      	mov	r0, r5
   18026:	f7ff ff87 	bl	17f38 <pin_uninit>
   1802a:	4606      	mov	r6, r0
}
   1802c:	4630      	mov	r0, r6
   1802e:	b007      	add	sp, #28
   18030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   18034:	f89d 0017 	ldrb.w	r0, [sp, #23]
   18038:	f001 fe68 	bl	19d0c <nrfx_gpiote_channel_free>
   1803c:	e7c3      	b.n	17fc6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1803e:	f417 6f80 	tst.w	r7, #1024	; 0x400
   18042:	d0e4      	beq.n	1800e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   18044:	f8d8 2004 	ldr.w	r2, [r8, #4]
   18048:	2301      	movs	r3, #1
   1804a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   1804e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   18052:	e7dc      	b.n	1800e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   18054:	4638      	mov	r0, r7
   18056:	f00b fc9d 	bl	23994 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1805a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1805e:	2300      	movs	r3, #0
   18060:	461a      	mov	r2, r3
   18062:	a902      	add	r1, sp, #8
   18064:	4628      	mov	r0, r5
   18066:	f001 fc89 	bl	1997c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1806a:	4b05      	ldr	r3, [pc, #20]	; (18080 <gpio_nrfx_pin_configure+0x100>)
   1806c:	4298      	cmp	r0, r3
   1806e:	d101      	bne.n	18074 <gpio_nrfx_pin_configure+0xf4>
   18070:	2600      	movs	r6, #0
   18072:	e7db      	b.n	1802c <gpio_nrfx_pin_configure+0xac>
   18074:	f06f 0615 	mvn.w	r6, #21
   18078:	e7d8      	b.n	1802c <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   1807a:	f06f 0615 	mvn.w	r6, #21
   1807e:	e7d5      	b.n	1802c <gpio_nrfx_pin_configure+0xac>
   18080:	0bad0000 	.word	0x0bad0000

00018084 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18084:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   18086:	f001 fe37 	bl	19cf8 <nrfx_gpiote_is_init>
   1808a:	b108      	cbz	r0, 18090 <gpio_nrfx_init+0xc>
		return 0;
   1808c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1808e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   18090:	f001 fe08 	bl	19ca4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   18094:	4b08      	ldr	r3, [pc, #32]	; (180b8 <gpio_nrfx_init+0x34>)
   18096:	4298      	cmp	r0, r3
   18098:	d10a      	bne.n	180b0 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1809a:	2100      	movs	r1, #0
   1809c:	4807      	ldr	r0, [pc, #28]	; (180bc <gpio_nrfx_init+0x38>)
   1809e:	f001 fde3 	bl	19c68 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   180a2:	2200      	movs	r2, #0
   180a4:	2105      	movs	r1, #5
   180a6:	2006      	movs	r0, #6
   180a8:	f7fb fc98 	bl	139dc <z_arm_irq_priority_set>
	return 0;
   180ac:	2000      	movs	r0, #0
   180ae:	e7ee      	b.n	1808e <gpio_nrfx_init+0xa>
		return -EIO;
   180b0:	f06f 0004 	mvn.w	r0, #4
   180b4:	e7eb      	b.n	1808e <gpio_nrfx_init+0xa>
   180b6:	bf00      	nop
   180b8:	0bad0000 	.word	0x0bad0000
   180bc:	00023a8b 	.word	0x00023a8b

000180c0 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   180c0:	b508      	push	{r3, lr}
	return dev->config;
   180c2:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   180c4:	68d9      	ldr	r1, [r3, #12]
   180c6:	6898      	ldr	r0, [r3, #8]
   180c8:	f002 fa44 	bl	1a554 <nrfx_twi_twim_bus_recover>
	nrfx_err_t err = nrfx_twim_bus_recover(get_dev_config(dev)->config.scl,
					       get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   180cc:	4b03      	ldr	r3, [pc, #12]	; (180dc <i2c_nrfx_twim_recover_bus+0x1c>)
   180ce:	4298      	cmp	r0, r3
   180d0:	d101      	bne.n	180d6 <i2c_nrfx_twim_recover_bus+0x16>
   180d2:	2000      	movs	r0, #0
}
   180d4:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   180d6:	f06f 000f 	mvn.w	r0, #15
   180da:	e7fb      	b.n	180d4 <i2c_nrfx_twim_recover_bus+0x14>
   180dc:	0bad0000 	.word	0x0bad0000

000180e0 <i2c_nrfx_twim_transfer>:
{
   180e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180e4:	b08f      	sub	sp, #60	; 0x3c
   180e6:	4688      	mov	r8, r1
   180e8:	4691      	mov	r9, r2
	return dev->data;
   180ea:	6901      	ldr	r1, [r0, #16]
   180ec:	460e      	mov	r6, r1
   180ee:	9104      	str	r1, [sp, #16]
	return dev->config;
   180f0:	6844      	ldr	r4, [r0, #4]
   180f2:	9407      	str	r4, [sp, #28]
	uint8_t *msg_buf = dev_data->msg_buf;
   180f4:	f8d1 a038 	ldr.w	sl, [r1, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   180f8:	8b22      	ldrh	r2, [r4, #24]
   180fa:	9203      	str	r2, [sp, #12]
	nrfx_twim_xfer_desc_t cur_xfer = {
   180fc:	2500      	movs	r5, #0
   180fe:	9509      	str	r5, [sp, #36]	; 0x24
   18100:	950a      	str	r5, [sp, #40]	; 0x28
   18102:	950b      	str	r5, [sp, #44]	; 0x2c
   18104:	950c      	str	r5, [sp, #48]	; 0x30
   18106:	950d      	str	r5, [sp, #52]	; 0x34
   18108:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	return z_impl_k_sem_take(sem, timeout);
   1810c:	f04f 32ff 	mov.w	r2, #4294967295
   18110:	f04f 33ff 	mov.w	r3, #4294967295
   18114:	4608      	mov	r0, r1
   18116:	f002 fedd 	bl	1aed4 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   1811a:	f106 0318 	add.w	r3, r6, #24
   1811e:	4618      	mov	r0, r3
   18120:	9306      	str	r3, [sp, #24]
   18122:	2200      	movs	r2, #0
   18124:	2300      	movs	r3, #0
   18126:	f002 fed5 	bl	1aed4 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   1812a:	4620      	mov	r0, r4
   1812c:	9405      	str	r4, [sp, #20]
   1812e:	f002 f9cb 	bl	1a4c8 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   18132:	462e      	mov	r6, r5
	uint16_t msg_buf_used = 0;
   18134:	462c      	mov	r4, r5
	int ret = 0;
   18136:	9502      	str	r5, [sp, #8]
	for (size_t i = 0; i < num_msgs; i++) {
   18138:	e047      	b.n	181ca <i2c_nrfx_twim_transfer+0xea>
				&& ((msgs[i].flags & I2C_MSG_READ)
   1813a:	2200      	movs	r2, #0
		if (concat_next || (msg_buf_used != 0)) {
   1813c:	9201      	str	r2, [sp, #4]
   1813e:	b90a      	cbnz	r2, 18144 <i2c_nrfx_twim_transfer+0x64>
   18140:	2c00      	cmp	r4, #0
   18142:	d068      	beq.n	18216 <i2c_nrfx_twim_transfer+0x136>
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   18144:	686a      	ldr	r2, [r5, #4]
   18146:	18a1      	adds	r1, r4, r2
   18148:	9803      	ldr	r0, [sp, #12]
   1814a:	4281      	cmp	r1, r0
   1814c:	f200 80b3 	bhi.w	182b6 <i2c_nrfx_twim_transfer+0x1d6>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   18150:	f013 0f01 	tst.w	r3, #1
   18154:	d105      	bne.n	18162 <i2c_nrfx_twim_transfer+0x82>
   18156:	f858 100b 	ldr.w	r1, [r8, fp]
   1815a:	eb04 000a 	add.w	r0, r4, sl
   1815e:	f00d fae2 	bl	25726 <memcpy>
			msg_buf_used += msgs[i].len;
   18162:	686b      	ldr	r3, [r5, #4]
   18164:	441c      	add	r4, r3
   18166:	b2a4      	uxth	r4, r4
		if (concat_next) {
   18168:	9b01      	ldr	r3, [sp, #4]
   1816a:	bb6b      	cbnz	r3, 181c8 <i2c_nrfx_twim_transfer+0xe8>
		if (msg_buf_used == 0) {
   1816c:	2c00      	cmp	r4, #0
   1816e:	d166      	bne.n	1823e <i2c_nrfx_twim_transfer+0x15e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   18170:	f858 300b 	ldr.w	r3, [r8, fp]
   18174:	930c      	str	r3, [sp, #48]	; 0x30
			cur_xfer.primary_length = msgs[i].len;
   18176:	686b      	ldr	r3, [r5, #4]
   18178:	930a      	str	r3, [sp, #40]	; 0x28
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1817a:	7a2b      	ldrb	r3, [r5, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1817c:	f003 0201 	and.w	r2, r3, #1
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   18180:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   18184:	f013 0f02 	tst.w	r3, #2
   18188:	d05d      	beq.n	18246 <i2c_nrfx_twim_transfer+0x166>
   1818a:	2200      	movs	r2, #0
   1818c:	a909      	add	r1, sp, #36	; 0x24
   1818e:	9805      	ldr	r0, [sp, #20]
   18190:	f002 f9c8 	bl	1a524 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   18194:	4b4e      	ldr	r3, [pc, #312]	; (182d0 <i2c_nrfx_twim_transfer+0x1f0>)
   18196:	4298      	cmp	r0, r3
   18198:	d157      	bne.n	1824a <i2c_nrfx_twim_transfer+0x16a>
   1819a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1819e:	2300      	movs	r3, #0
   181a0:	9806      	ldr	r0, [sp, #24]
   181a2:	f002 fe97 	bl	1aed4 <z_impl_k_sem_take>
		if (ret != 0) {
   181a6:	9002      	str	r0, [sp, #8]
   181a8:	2800      	cmp	r0, #0
   181aa:	d159      	bne.n	18260 <i2c_nrfx_twim_transfer+0x180>
		res = dev_data->res;
   181ac:	9b04      	ldr	r3, [sp, #16]
   181ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   181b0:	4b47      	ldr	r3, [pc, #284]	; (182d0 <i2c_nrfx_twim_transfer+0x1f0>)
   181b2:	429a      	cmp	r2, r3
   181b4:	f040 8087 	bne.w	182c6 <i2c_nrfx_twim_transfer+0x1e6>
		if ((msgs[i].flags & I2C_MSG_READ)
   181b8:	7a2b      	ldrb	r3, [r5, #8]
   181ba:	f013 0f01 	tst.w	r3, #1
   181be:	d002      	beq.n	181c6 <i2c_nrfx_twim_transfer+0xe6>
		    && cur_xfer.p_primary_buf == msg_buf) {
   181c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   181c2:	459a      	cmp	sl, r3
   181c4:	d058      	beq.n	18278 <i2c_nrfx_twim_transfer+0x198>
		msg_buf_used = 0;
   181c6:	2400      	movs	r4, #0
   181c8:	463e      	mov	r6, r7
	for (size_t i = 0; i < num_msgs; i++) {
   181ca:	454e      	cmp	r6, r9
   181cc:	d269      	bcs.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   181ce:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   181d2:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   181d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   181da:	7a2b      	ldrb	r3, [r5, #8]
   181dc:	f013 0f08 	tst.w	r3, #8
   181e0:	d15c      	bne.n	1829c <i2c_nrfx_twim_transfer+0x1bc>
		bool concat_next = ((i + 1) < num_msgs)
   181e2:	1c77      	adds	r7, r6, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   181e4:	454f      	cmp	r7, r9
   181e6:	d2a8      	bcs.n	1813a <i2c_nrfx_twim_transfer+0x5a>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   181e8:	f013 0f02 	tst.w	r3, #2
   181ec:	d10d      	bne.n	1820a <i2c_nrfx_twim_transfer+0x12a>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   181ee:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   181f2:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   181f6:	7a12      	ldrb	r2, [r2, #8]
   181f8:	f012 0f04 	tst.w	r2, #4
   181fc:	d107      	bne.n	1820e <i2c_nrfx_twim_transfer+0x12e>
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   181fe:	405a      	eors	r2, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   18200:	f012 0f01 	tst.w	r2, #1
   18204:	d005      	beq.n	18212 <i2c_nrfx_twim_transfer+0x132>
   18206:	2200      	movs	r2, #0
   18208:	e798      	b.n	1813c <i2c_nrfx_twim_transfer+0x5c>
   1820a:	2200      	movs	r2, #0
   1820c:	e796      	b.n	1813c <i2c_nrfx_twim_transfer+0x5c>
   1820e:	2200      	movs	r2, #0
   18210:	e794      	b.n	1813c <i2c_nrfx_twim_transfer+0x5c>
   18212:	2201      	movs	r2, #1
   18214:	e792      	b.n	1813c <i2c_nrfx_twim_transfer+0x5c>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   18216:	f013 0f01 	tst.w	r3, #1
   1821a:	d1a5      	bne.n	18168 <i2c_nrfx_twim_transfer+0x88>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   1821c:	f858 100b 	ldr.w	r1, [r8, fp]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   18220:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   18224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   18228:	d09e      	beq.n	18168 <i2c_nrfx_twim_transfer+0x88>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   1822a:	686a      	ldr	r2, [r5, #4]
   1822c:	9b07      	ldr	r3, [sp, #28]
   1822e:	8b5b      	ldrh	r3, [r3, #26]
   18230:	429a      	cmp	r2, r3
   18232:	d844      	bhi.n	182be <i2c_nrfx_twim_transfer+0x1de>
   18234:	4650      	mov	r0, sl
   18236:	f00d fa76 	bl	25726 <memcpy>
			msg_buf_used = msgs[i].len;
   1823a:	88ac      	ldrh	r4, [r5, #4]
   1823c:	e794      	b.n	18168 <i2c_nrfx_twim_transfer+0x88>
			cur_xfer.p_primary_buf = msg_buf;
   1823e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
			cur_xfer.primary_length = msg_buf_used;
   18242:	940a      	str	r4, [sp, #40]	; 0x28
   18244:	e799      	b.n	1817a <i2c_nrfx_twim_transfer+0x9a>
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   18246:	2220      	movs	r2, #32
   18248:	e7a0      	b.n	1818c <i2c_nrfx_twim_transfer+0xac>
			if (res == NRFX_ERROR_BUSY) {
   1824a:	330b      	adds	r3, #11
   1824c:	4298      	cmp	r0, r3
   1824e:	d003      	beq.n	18258 <i2c_nrfx_twim_transfer+0x178>
				ret = -EIO;
   18250:	f06f 0304 	mvn.w	r3, #4
   18254:	9302      	str	r3, [sp, #8]
   18256:	e024      	b.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
				ret = -EBUSY;
   18258:	f06f 030f 	mvn.w	r3, #15
   1825c:	9302      	str	r3, [sp, #8]
   1825e:	e020      	b.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
			nrfx_twim_disable(&dev_config->twim);
   18260:	9c07      	ldr	r4, [sp, #28]
   18262:	4620      	mov	r0, r4
   18264:	f002 f940 	bl	1a4e8 <nrfx_twim_disable>
   18268:	68e1      	ldr	r1, [r4, #12]
   1826a:	68a0      	ldr	r0, [r4, #8]
   1826c:	f002 f972 	bl	1a554 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   18270:	f06f 0304 	mvn.w	r3, #4
   18274:	9302      	str	r3, [sp, #8]
			break;
   18276:	e014      	b.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
			while (msg_buf_used >= msgs[j].len) {
   18278:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1827c:	0098      	lsls	r0, r3, #2
   1827e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   18282:	685a      	ldr	r2, [r3, #4]
   18284:	4294      	cmp	r4, r2
   18286:	d39e      	bcc.n	181c6 <i2c_nrfx_twim_transfer+0xe6>
				msg_buf_used -= msgs[j].len;
   18288:	1aa4      	subs	r4, r4, r2
   1828a:	b2a4      	uxth	r4, r4
   1828c:	eb0a 0104 	add.w	r1, sl, r4
   18290:	f858 0000 	ldr.w	r0, [r8, r0]
   18294:	f00d fa47 	bl	25726 <memcpy>
				j--;
   18298:	3e01      	subs	r6, #1
   1829a:	e7ed      	b.n	18278 <i2c_nrfx_twim_transfer+0x198>
			ret = -ENOTSUP;
   1829c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   182a0:	9302      	str	r3, [sp, #8]
	nrfx_twim_disable(&dev_config->twim);
   182a2:	9807      	ldr	r0, [sp, #28]
   182a4:	f002 f920 	bl	1a4e8 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   182a8:	9804      	ldr	r0, [sp, #16]
   182aa:	f002 fdeb 	bl	1ae84 <z_impl_k_sem_give>
}
   182ae:	9802      	ldr	r0, [sp, #8]
   182b0:	b00f      	add	sp, #60	; 0x3c
   182b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOSPC;
   182b6:	f06f 031b 	mvn.w	r3, #27
   182ba:	9302      	str	r3, [sp, #8]
   182bc:	e7f1      	b.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
				ret = -EINVAL;
   182be:	f06f 0315 	mvn.w	r3, #21
   182c2:	9302      	str	r3, [sp, #8]
   182c4:	e7ed      	b.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
			ret = -EIO;
   182c6:	f06f 0304 	mvn.w	r3, #4
   182ca:	9302      	str	r3, [sp, #8]
   182cc:	e7e9      	b.n	182a2 <i2c_nrfx_twim_transfer+0x1c2>
   182ce:	bf00      	nop
   182d0:	0bad0000 	.word	0x0bad0000

000182d4 <event_handler>:
{
   182d4:	b508      	push	{r3, lr}
	switch (p_event->type) {
   182d6:	7803      	ldrb	r3, [r0, #0]
   182d8:	2b01      	cmp	r3, #1
   182da:	d00c      	beq.n	182f6 <event_handler+0x22>
   182dc:	2b02      	cmp	r3, #2
   182de:	d00d      	beq.n	182fc <event_handler+0x28>
   182e0:	b113      	cbz	r3, 182e8 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
   182e2:	4b08      	ldr	r3, [pc, #32]	; (18304 <event_handler+0x30>)
   182e4:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   182e6:	e001      	b.n	182ec <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
   182e8:	4b07      	ldr	r3, [pc, #28]	; (18308 <event_handler+0x34>)
   182ea:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
   182ec:	f101 0018 	add.w	r0, r1, #24
   182f0:	f002 fdc8 	bl	1ae84 <z_impl_k_sem_give>
}
   182f4:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   182f6:	4b05      	ldr	r3, [pc, #20]	; (1830c <event_handler+0x38>)
   182f8:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   182fa:	e7f7      	b.n	182ec <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   182fc:	4b04      	ldr	r3, [pc, #16]	; (18310 <event_handler+0x3c>)
   182fe:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   18300:	e7f4      	b.n	182ec <event_handler+0x18>
   18302:	bf00      	nop
   18304:	0bad0001 	.word	0x0bad0001
   18308:	0bad0000 	.word	0x0bad0000
   1830c:	0bae0001 	.word	0x0bae0001
   18310:	0bae0002 	.word	0x0bae0002

00018314 <init_twim>:
	.transfer    = i2c_nrfx_twim_transfer,
	.recover_bus = i2c_nrfx_twim_recover_bus,
};

static int init_twim(const struct device *dev)
{
   18314:	b508      	push	{r3, lr}
   18316:	4603      	mov	r3, r0
	return dev->config;
   18318:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = get_dev_data(dev);
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1831a:	691b      	ldr	r3, [r3, #16]
   1831c:	4a06      	ldr	r2, [pc, #24]	; (18338 <init_twim+0x24>)
   1831e:	f100 0108 	add.w	r1, r0, #8
   18322:	f002 f887 	bl	1a434 <nrfx_twim_init>
					   &get_dev_config(dev)->config,
					   event_handler,
					   dev_data);
	if (result != NRFX_SUCCESS) {
   18326:	4b05      	ldr	r3, [pc, #20]	; (1833c <init_twim+0x28>)
   18328:	4298      	cmp	r0, r3
   1832a:	d101      	bne.n	18330 <init_twim+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			dev->name);
		return -EBUSY;
	}

	return 0;
   1832c:	2000      	movs	r0, #0
}
   1832e:	bd08      	pop	{r3, pc}
		return -EBUSY;
   18330:	f06f 000f 	mvn.w	r0, #15
   18334:	e7fb      	b.n	1832e <init_twim+0x1a>
   18336:	bf00      	nop
   18338:	000182d5 	.word	0x000182d5
   1833c:	0bad0000 	.word	0x0bad0000

00018340 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
   18340:	b410      	push	{r4}
	return dev->config;
   18342:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   18344:	2900      	cmp	r1, #0
   18346:	d17e      	bne.n	18446 <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18348:	68da      	ldr	r2, [r3, #12]
   1834a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1834e:	d017      	beq.n	18380 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
   18350:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   18354:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18356:	2a01      	cmp	r2, #1
   18358:	d065      	beq.n	18426 <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
   1835a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1835e:	2201      	movs	r2, #1
   18360:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   18362:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   18366:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   18368:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1836c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1836e:	2a01      	cmp	r2, #1
   18370:	d05b      	beq.n	1842a <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
   18372:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   18376:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1837a:	2103      	movs	r1, #3
   1837c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18380:	691a      	ldr	r2, [r3, #16]
   18382:	f1b2 3fff 	cmp.w	r2, #4294967295
   18386:	d00f      	beq.n	183a8 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   18388:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   1838a:	2900      	cmp	r1, #0
   1838c:	d04f      	beq.n	1842e <uarte_nrfx_pins_configure+0xee>
   1838e:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   18390:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   18394:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18396:	2a01      	cmp	r2, #1
   18398:	d04b      	beq.n	18432 <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
   1839a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1839e:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   183a0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   183a4:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   183a8:	695a      	ldr	r2, [r3, #20]
   183aa:	f1b2 3fff 	cmp.w	r2, #4294967295
   183ae:	d017      	beq.n	183e0 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
   183b0:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   183b4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   183b6:	2a01      	cmp	r2, #1
   183b8:	d03d      	beq.n	18436 <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
   183ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   183be:	2201      	movs	r2, #1
   183c0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   183c2:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   183c6:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   183c8:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   183cc:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   183ce:	2a01      	cmp	r2, #1
   183d0:	d033      	beq.n	1843a <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
   183d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   183d6:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   183da:	2103      	movs	r1, #3
   183dc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   183e0:	699a      	ldr	r2, [r3, #24]
   183e2:	f1b2 3fff 	cmp.w	r2, #4294967295
   183e6:	d00e      	beq.n	18406 <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   183e8:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   183ea:	b341      	cbz	r1, 1843e <uarte_nrfx_pins_configure+0xfe>
   183ec:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   183ee:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   183f2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   183f4:	2a01      	cmp	r2, #1
   183f6:	d024      	beq.n	18442 <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
   183f8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   183fc:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   183fe:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   18402:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   18406:	681a      	ldr	r2, [r3, #0]
   18408:	68d8      	ldr	r0, [r3, #12]
   1840a:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   1840c:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   18410:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   18414:	681a      	ldr	r2, [r3, #0]
   18416:	6959      	ldr	r1, [r3, #20]
   18418:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   1841a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1841e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   18422:	bc10      	pop	{r4}
   18424:	4770      	bx	lr
        case 1: return NRF_P1;
   18426:	482c      	ldr	r0, [pc, #176]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   18428:	e799      	b.n	1835e <uarte_nrfx_pins_configure+0x1e>
   1842a:	482b      	ldr	r0, [pc, #172]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   1842c:	e7a3      	b.n	18376 <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1842e:	2000      	movs	r0, #0
   18430:	e7ae      	b.n	18390 <uarte_nrfx_pins_configure+0x50>
   18432:	4c29      	ldr	r4, [pc, #164]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   18434:	e7b3      	b.n	1839e <uarte_nrfx_pins_configure+0x5e>
   18436:	4828      	ldr	r0, [pc, #160]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   18438:	e7c1      	b.n	183be <uarte_nrfx_pins_configure+0x7e>
   1843a:	4827      	ldr	r0, [pc, #156]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   1843c:	e7cb      	b.n	183d6 <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1843e:	2000      	movs	r0, #0
   18440:	e7d5      	b.n	183ee <uarte_nrfx_pins_configure+0xae>
   18442:	4c25      	ldr	r4, [pc, #148]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   18444:	e7da      	b.n	183fc <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18446:	68da      	ldr	r2, [r3, #12]
   18448:	f1b2 3fff 	cmp.w	r2, #4294967295
   1844c:	d00b      	beq.n	18466 <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
   1844e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   18452:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18454:	2a01      	cmp	r2, #1
   18456:	d037      	beq.n	184c8 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
   18458:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1845c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   18460:	2102      	movs	r1, #2
   18462:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18466:	691a      	ldr	r2, [r3, #16]
   18468:	f1b2 3fff 	cmp.w	r2, #4294967295
   1846c:	d00b      	beq.n	18486 <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
   1846e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   18472:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18474:	2a01      	cmp	r2, #1
   18476:	d029      	beq.n	184cc <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
   18478:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1847c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   18480:	2102      	movs	r1, #2
   18482:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   18486:	695a      	ldr	r2, [r3, #20]
   18488:	f1b2 3fff 	cmp.w	r2, #4294967295
   1848c:	d00b      	beq.n	184a6 <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
   1848e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   18492:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18494:	2a01      	cmp	r2, #1
   18496:	d01b      	beq.n	184d0 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
   18498:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1849c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   184a0:	2102      	movs	r1, #2
   184a2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   184a6:	699a      	ldr	r2, [r3, #24]
   184a8:	f1b2 3fff 	cmp.w	r2, #4294967295
   184ac:	d0ab      	beq.n	18406 <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   184ae:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   184b2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   184b4:	2a01      	cmp	r2, #1
   184b6:	d00d      	beq.n	184d4 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
   184b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   184bc:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   184c0:	2102      	movs	r1, #2
   184c2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   184c6:	e79e      	b.n	18406 <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
   184c8:	4803      	ldr	r0, [pc, #12]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   184ca:	e7c7      	b.n	1845c <uarte_nrfx_pins_configure+0x11c>
   184cc:	4802      	ldr	r0, [pc, #8]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   184ce:	e7d5      	b.n	1847c <uarte_nrfx_pins_configure+0x13c>
   184d0:	4801      	ldr	r0, [pc, #4]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   184d2:	e7e3      	b.n	1849c <uarte_nrfx_pins_configure+0x15c>
   184d4:	4800      	ldr	r0, [pc, #0]	; (184d8 <uarte_nrfx_pins_configure+0x198>)
   184d6:	e7f1      	b.n	184bc <uarte_nrfx_pins_configure+0x17c>
   184d8:	50000300 	.word	0x50000300

000184dc <baudrate_set>:
	return dev->config;
   184dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   184de:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   184e0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   184e4:	d06f      	beq.n	185c6 <baudrate_set+0xea>
   184e6:	d83a      	bhi.n	1855e <baudrate_set+0x82>
   184e8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   184ec:	d06e      	beq.n	185cc <baudrate_set+0xf0>
   184ee:	d90a      	bls.n	18506 <baudrate_set+0x2a>
   184f0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   184f4:	d075      	beq.n	185e2 <baudrate_set+0x106>
   184f6:	d924      	bls.n	18542 <baudrate_set+0x66>
   184f8:	f647 2312 	movw	r3, #31250	; 0x7a12
   184fc:	4299      	cmp	r1, r3
   184fe:	d12b      	bne.n	18558 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18500:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   18504:	e013      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   18506:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1850a:	d061      	beq.n	185d0 <baudrate_set+0xf4>
   1850c:	d907      	bls.n	1851e <baudrate_set+0x42>
   1850e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   18512:	d063      	beq.n	185dc <baudrate_set+0x100>
   18514:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   18518:	d110      	bne.n	1853c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1851a:	4b3c      	ldr	r3, [pc, #240]	; (1860c <baudrate_set+0x130>)
   1851c:	e007      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   1851e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   18522:	d058      	beq.n	185d6 <baudrate_set+0xfa>
   18524:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   18528:	d105      	bne.n	18536 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1852a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1852e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   18532:	2000      	movs	r0, #0
   18534:	4770      	bx	lr
	switch (baudrate) {
   18536:	f06f 0015 	mvn.w	r0, #21
   1853a:	4770      	bx	lr
   1853c:	f06f 0015 	mvn.w	r0, #21
   18540:	4770      	bx	lr
   18542:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   18546:	d04e      	beq.n	185e6 <baudrate_set+0x10a>
   18548:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1854c:	d101      	bne.n	18552 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1854e:	4b30      	ldr	r3, [pc, #192]	; (18610 <baudrate_set+0x134>)
   18550:	e7ed      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   18552:	f06f 0015 	mvn.w	r0, #21
   18556:	4770      	bx	lr
   18558:	f06f 0015 	mvn.w	r0, #21
   1855c:	4770      	bx	lr
   1855e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   18562:	d042      	beq.n	185ea <baudrate_set+0x10e>
   18564:	d909      	bls.n	1857a <baudrate_set+0x9e>
   18566:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1856a:	d046      	beq.n	185fa <baudrate_set+0x11e>
   1856c:	d91f      	bls.n	185ae <baudrate_set+0xd2>
   1856e:	4b29      	ldr	r3, [pc, #164]	; (18614 <baudrate_set+0x138>)
   18570:	4299      	cmp	r1, r3
   18572:	d148      	bne.n	18606 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   18574:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18578:	e7d9      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   1857a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1857e:	d037      	beq.n	185f0 <baudrate_set+0x114>
   18580:	d905      	bls.n	1858e <baudrate_set+0xb2>
   18582:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   18586:	d10f      	bne.n	185a8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   18588:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1858c:	e7cf      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   1858e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   18592:	4299      	cmp	r1, r3
   18594:	d02e      	beq.n	185f4 <baudrate_set+0x118>
   18596:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1859a:	d102      	bne.n	185a2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1859c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   185a0:	e7c5      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   185a2:	f06f 0015 	mvn.w	r0, #21
   185a6:	4770      	bx	lr
   185a8:	f06f 0015 	mvn.w	r0, #21
   185ac:	4770      	bx	lr
   185ae:	4b1a      	ldr	r3, [pc, #104]	; (18618 <baudrate_set+0x13c>)
   185b0:	4299      	cmp	r1, r3
   185b2:	d025      	beq.n	18600 <baudrate_set+0x124>
   185b4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   185b8:	d102      	bne.n	185c0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   185ba:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   185be:	e7b6      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   185c0:	f06f 0015 	mvn.w	r0, #21
   185c4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   185c6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   185ca:	e7b0      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   185cc:	4b13      	ldr	r3, [pc, #76]	; (1861c <baudrate_set+0x140>)
   185ce:	e7ae      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   185d0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   185d4:	e7ab      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   185d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   185da:	e7a8      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   185dc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   185e0:	e7a5      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   185e2:	4b0f      	ldr	r3, [pc, #60]	; (18620 <baudrate_set+0x144>)
   185e4:	e7a3      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   185e6:	4b0f      	ldr	r3, [pc, #60]	; (18624 <baudrate_set+0x148>)
   185e8:	e7a1      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   185ea:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   185ee:	e79e      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   185f0:	4b0d      	ldr	r3, [pc, #52]	; (18628 <baudrate_set+0x14c>)
   185f2:	e79c      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   185f4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   185f8:	e799      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   185fa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   185fe:	e796      	b.n	1852e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   18600:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18604:	e793      	b.n	1852e <baudrate_set+0x52>
	switch (baudrate) {
   18606:	f06f 0015 	mvn.w	r0, #21
}
   1860a:	4770      	bx	lr
   1860c:	0013b000 	.word	0x0013b000
   18610:	004ea000 	.word	0x004ea000
   18614:	000f4240 	.word	0x000f4240
   18618:	0003d090 	.word	0x0003d090
   1861c:	00275000 	.word	0x00275000
   18620:	0075c000 	.word	0x0075c000
   18624:	003af000 	.word	0x003af000
   18628:	013a9000 	.word	0x013a9000

0001862c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18630:	4605      	mov	r5, r0
   18632:	460f      	mov	r7, r1
	return dev->data;
   18634:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18638:	f00c fab7 	bl	24baa <k_is_in_isr>
   1863c:	b920      	cbnz	r0, 18648 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1863e:	4b16      	ldr	r3, [pc, #88]	; (18698 <uarte_nrfx_poll_out+0x6c>)
   18640:	781b      	ldrb	r3, [r3, #0]
   18642:	b1ab      	cbz	r3, 18670 <uarte_nrfx_poll_out+0x44>
   18644:	2300      	movs	r3, #0
   18646:	e000      	b.n	1864a <uarte_nrfx_poll_out+0x1e>
   18648:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1864a:	b19b      	cbz	r3, 18674 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   1864c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18650:	f3ef 8411 	mrs	r4, BASEPRI
   18654:	f383 8812 	msr	BASEPRI_MAX, r3
   18658:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1865c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1865e:	4628      	mov	r0, r5
   18660:	f00b fb07 	bl	23c72 <is_tx_ready>
   18664:	b950      	cbnz	r0, 1867c <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   18666:	f384 8811 	msr	BASEPRI, r4
   1866a:	f3bf 8f6f 	isb	sy
}
   1866e:	e7ed      	b.n	1864c <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18670:	2301      	movs	r3, #1
   18672:	e7ea      	b.n	1864a <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   18674:	4628      	mov	r0, r5
   18676:	f00b fb4b 	bl	23d10 <wait_tx_ready>
   1867a:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1867c:	4641      	mov	r1, r8
   1867e:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   18682:	2201      	movs	r2, #1
   18684:	4628      	mov	r0, r5
   18686:	f00b fb0e 	bl	23ca6 <tx_start>
	__asm__ volatile(
   1868a:	f386 8811 	msr	BASEPRI, r6
   1868e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   18692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18696:	bf00      	nop
   18698:	20003f76 	.word	0x20003f76

0001869c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1869c:	b538      	push	{r3, r4, r5, lr}
   1869e:	4604      	mov	r4, r0
   186a0:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   186a2:	f101 0012 	add.w	r0, r1, #18
   186a6:	f001 fc29 	bl	19efc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   186aa:	4b0c      	ldr	r3, [pc, #48]	; (186dc <endtx_stoptx_ppi_init+0x40>)
   186ac:	4298      	cmp	r0, r3
   186ae:	d111      	bne.n	186d4 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   186b0:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   186b2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   186b6:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   186b8:	4a09      	ldr	r2, [pc, #36]	; (186e0 <endtx_stoptx_ppi_init+0x44>)
   186ba:	33a2      	adds	r3, #162	; 0xa2
   186bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   186c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   186c4:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   186c6:	7ca9      	ldrb	r1, [r5, #18]
   186c8:	2301      	movs	r3, #1
   186ca:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   186cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   186d0:	2000      	movs	r0, #0
}
   186d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   186d4:	f06f 0004 	mvn.w	r0, #4
   186d8:	e7fb      	b.n	186d2 <endtx_stoptx_ppi_init+0x36>
   186da:	bf00      	nop
   186dc:	0bad0000 	.word	0x0bad0000
   186e0:	4001f000 	.word	0x4001f000

000186e4 <random_byte_get>:
	__asm__ volatile(
   186e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   186e8:	f3ef 8211 	mrs	r2, BASEPRI
   186ec:	f383 8812 	msr	BASEPRI_MAX, r3
   186f0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   186f4:	4b09      	ldr	r3, [pc, #36]	; (1871c <random_byte_get+0x38>)
   186f6:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   186f8:	b16b      	cbz	r3, 18716 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   186fa:	4b09      	ldr	r3, [pc, #36]	; (18720 <random_byte_get+0x3c>)
   186fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   18700:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18702:	f503 7380 	add.w	r3, r3, #256	; 0x100
   18706:	2100      	movs	r1, #0
   18708:	6019      	str	r1, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1870a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1870c:	f382 8811 	msr	BASEPRI, r2
   18710:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18714:	4770      	bx	lr
	int retval = -EAGAIN;
   18716:	f06f 000a 	mvn.w	r0, #10
   1871a:	e7f7      	b.n	1870c <random_byte_get+0x28>
   1871c:	4000d100 	.word	0x4000d100
   18720:	4000d000 	.word	0x4000d000

00018724 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18728:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1872a:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1872e:	78c5      	ldrb	r5, [r0, #3]
   18730:	462f      	mov	r7, r5
	__asm__ volatile(
   18732:	f04f 0340 	mov.w	r3, #64	; 0x40
   18736:	f3ef 8811 	mrs	r8, BASEPRI
   1873a:	f383 8812 	msr	BASEPRI_MAX, r3
   1873e:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18742:	7800      	ldrb	r0, [r0, #0]
   18744:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18746:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1874a:	ebac 0c00 	sub.w	ip, ip, r0
   1874e:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   18752:	4562      	cmp	r2, ip
   18754:	d901      	bls.n	1875a <rng_pool_get+0x36>
		len = available;
   18756:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1875a:	1883      	adds	r3, r0, r2
   1875c:	402b      	ands	r3, r5
   1875e:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   18760:	f388 8811 	msr	BASEPRI, r8
   18764:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   18768:	460b      	mov	r3, r1
}
   1876a:	e006      	b.n	1877a <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1876c:	1932      	adds	r2, r6, r4
   1876e:	7952      	ldrb	r2, [r2, #5]
   18770:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   18774:	3401      	adds	r4, #1
   18776:	403c      	ands	r4, r7
	while (likely(len--)) {
   18778:	462a      	mov	r2, r5
   1877a:	1e55      	subs	r5, r2, #1
   1877c:	b2ad      	uxth	r5, r5
   1877e:	2a00      	cmp	r2, #0
   18780:	d1f4      	bne.n	1876c <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18782:	4570      	cmp	r0, lr
   18784:	d10d      	bne.n	187a2 <rng_pool_get+0x7e>
	__asm__ volatile(
   18786:	f04f 0040 	mov.w	r0, #64	; 0x40
   1878a:	f3ef 8211 	mrs	r2, BASEPRI
   1878e:	f380 8812 	msr	BASEPRI_MAX, r0
   18792:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18796:	7830      	ldrb	r0, [r6, #0]
   18798:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1879a:	f382 8811 	msr	BASEPRI, r2
   1879e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   187a2:	1a5b      	subs	r3, r3, r1
   187a4:	b298      	uxth	r0, r3
	available = available - len;
   187a6:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   187aa:	7933      	ldrb	r3, [r6, #4]
   187ac:	4563      	cmp	r3, ip
   187ae:	d302      	bcc.n	187b6 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   187b0:	4b02      	ldr	r3, [pc, #8]	; (187bc <rng_pool_get+0x98>)
   187b2:	2201      	movs	r2, #1
   187b4:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   187b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   187ba:	bf00      	nop
   187bc:	4000d000 	.word	0x4000d000

000187c0 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   187c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187c2:	460d      	mov	r5, r1
   187c4:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   187c6:	f013 0f01 	tst.w	r3, #1
   187ca:	d103      	bne.n	187d4 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   187cc:	4822      	ldr	r0, [pc, #136]	; (18858 <entropy_nrf5_get_entropy_isr+0x98>)
   187ce:	f7ff ffa9 	bl	18724 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   187d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   187d4:	b90a      	cbnz	r2, 187da <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   187d6:	4620      	mov	r0, r4
   187d8:	e7fb      	b.n	187d2 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   187da:	f04f 0340 	mov.w	r3, #64	; 0x40
   187de:	f3ef 8611 	mrs	r6, BASEPRI
   187e2:	f383 8812 	msr	BASEPRI_MAX, r3
   187e6:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   187ea:	200d      	movs	r0, #13
   187ec:	f7fb f8e8 	bl	139c0 <arch_irq_is_enabled>
   187f0:	4607      	mov	r7, r0
		irq_disable(IRQN);
   187f2:	200d      	movs	r0, #13
   187f4:	f7fb f8d0 	bl	13998 <arch_irq_disable>
	__asm__ volatile(
   187f8:	f386 8811 	msr	BASEPRI, r6
   187fc:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18800:	4b16      	ldr	r3, [pc, #88]	; (1885c <entropy_nrf5_get_entropy_isr+0x9c>)
   18802:	2200      	movs	r2, #0
   18804:	601a      	str	r2, [r3, #0]
   18806:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18808:	4b15      	ldr	r3, [pc, #84]	; (18860 <entropy_nrf5_get_entropy_isr+0xa0>)
   1880a:	2201      	movs	r2, #1
   1880c:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1880e:	4b15      	ldr	r3, [pc, #84]	; (18864 <entropy_nrf5_get_entropy_isr+0xa4>)
   18810:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18814:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18818:	4626      	mov	r6, r4
   1881a:	e004      	b.n	18826 <entropy_nrf5_get_entropy_isr+0x66>
   1881c:	f3bf 8f4f 	dsb	sy
				__WFE();
   18820:	bf20      	wfe
				__SEV();
   18822:	bf40      	sev
				__WFE();
   18824:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18826:	4b0d      	ldr	r3, [pc, #52]	; (1885c <entropy_nrf5_get_entropy_isr+0x9c>)
   18828:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1882a:	2b00      	cmp	r3, #0
   1882c:	d0f6      	beq.n	1881c <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   1882e:	f7ff ff59 	bl	186e4 <random_byte_get>
   18832:	4b0c      	ldr	r3, [pc, #48]	; (18864 <entropy_nrf5_get_entropy_isr+0xa4>)
   18834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18838:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1883c:	2800      	cmp	r0, #0
   1883e:	db02      	blt.n	18846 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   18840:	3e01      	subs	r6, #1
   18842:	b2b6      	uxth	r6, r6
   18844:	55a8      	strb	r0, [r5, r6]
		} while (len);
   18846:	2e00      	cmp	r6, #0
   18848:	d1ed      	bne.n	18826 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1884a:	2f00      	cmp	r7, #0
   1884c:	d0c3      	beq.n	187d6 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1884e:	200d      	movs	r0, #13
   18850:	f7fb f892 	bl	13978 <arch_irq_enable>
   18854:	e7bf      	b.n	187d6 <entropy_nrf5_get_entropy_isr+0x16>
   18856:	bf00      	nop
   18858:	20002a18 	.word	0x20002a18
   1885c:	4000d100 	.word	0x4000d100
   18860:	4000d000 	.word	0x4000d000
   18864:	e000e100 	.word	0xe000e100

00018868 <isr>:
{
   18868:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1886a:	f7ff ff3b 	bl	186e4 <random_byte_get>
	if (byte < 0) {
   1886e:	2800      	cmp	r0, #0
   18870:	db06      	blt.n	18880 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18872:	b2c4      	uxtb	r4, r0
   18874:	4621      	mov	r1, r4
   18876:	480a      	ldr	r0, [pc, #40]	; (188a0 <isr+0x38>)
   18878:	f00b faca 	bl	23e10 <rng_pool_put>
	if (ret < 0) {
   1887c:	2800      	cmp	r0, #0
   1887e:	db00      	blt.n	18882 <isr+0x1a>
}
   18880:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   18882:	4621      	mov	r1, r4
   18884:	4807      	ldr	r0, [pc, #28]	; (188a4 <isr+0x3c>)
   18886:	f00b fac3 	bl	23e10 <rng_pool_put>
		if (ret < 0) {
   1888a:	2800      	cmp	r0, #0
   1888c:	db03      	blt.n	18896 <isr+0x2e>
   1888e:	4806      	ldr	r0, [pc, #24]	; (188a8 <isr+0x40>)
   18890:	f002 faf8 	bl	1ae84 <z_impl_k_sem_give>
}
   18894:	e7f4      	b.n	18880 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18896:	4b05      	ldr	r3, [pc, #20]	; (188ac <isr+0x44>)
   18898:	2201      	movs	r2, #1
   1889a:	601a      	str	r2, [r3, #0]
}
   1889c:	e7f7      	b.n	1888e <isr+0x26>
   1889e:	bf00      	nop
   188a0:	20002a18 	.word	0x20002a18
   188a4:	20002a2d 	.word	0x20002a2d
   188a8:	20002a00 	.word	0x20002a00
   188ac:	4000d004 	.word	0x4000d004

000188b0 <entropy_nrf5_get_entropy>:
{
   188b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   188b2:	460f      	mov	r7, r1
   188b4:	4614      	mov	r4, r2
	while (len) {
   188b6:	e002      	b.n	188be <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   188b8:	1b64      	subs	r4, r4, r5
   188ba:	b2a4      	uxth	r4, r4
		buf += bytes;
   188bc:	442f      	add	r7, r5
	while (len) {
   188be:	b1e4      	cbz	r4, 188fa <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   188c0:	4e0f      	ldr	r6, [pc, #60]	; (18900 <entropy_nrf5_get_entropy+0x50>)
   188c2:	f04f 32ff 	mov.w	r2, #4294967295
   188c6:	f04f 33ff 	mov.w	r3, #4294967295
   188ca:	4630      	mov	r0, r6
   188cc:	f002 fb02 	bl	1aed4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   188d0:	4622      	mov	r2, r4
   188d2:	4639      	mov	r1, r7
   188d4:	f106 0045 	add.w	r0, r6, #69	; 0x45
   188d8:	f7ff ff24 	bl	18724 <rng_pool_get>
   188dc:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   188de:	4630      	mov	r0, r6
   188e0:	f002 fad0 	bl	1ae84 <z_impl_k_sem_give>
		if (bytes == 0U) {
   188e4:	2d00      	cmp	r5, #0
   188e6:	d1e7      	bne.n	188b8 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   188e8:	f04f 32ff 	mov.w	r2, #4294967295
   188ec:	f04f 33ff 	mov.w	r3, #4294967295
   188f0:	f106 0018 	add.w	r0, r6, #24
   188f4:	f002 faee 	bl	1aed4 <z_impl_k_sem_take>
			continue;
   188f8:	e7e1      	b.n	188be <entropy_nrf5_get_entropy+0xe>
}
   188fa:	2000      	movs	r0, #0
   188fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   188fe:	bf00      	nop
   18900:	200029e8 	.word	0x200029e8

00018904 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   18904:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18906:	4c18      	ldr	r4, [pc, #96]	; (18968 <entropy_nrf5_init+0x64>)
   18908:	2201      	movs	r2, #1
   1890a:	4611      	mov	r1, r2
   1890c:	4620      	mov	r0, r4
   1890e:	f00c fa87 	bl	24e20 <z_impl_k_sem_init>
   18912:	2201      	movs	r2, #1
   18914:	2100      	movs	r1, #0
   18916:	f104 0018 	add.w	r0, r4, #24
   1891a:	f00c fa81 	bl	24e20 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1891e:	2204      	movs	r2, #4
   18920:	2108      	movs	r1, #8
   18922:	f104 0045 	add.w	r0, r4, #69	; 0x45
   18926:	f00b fa87 	bl	23e38 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1892a:	220c      	movs	r2, #12
   1892c:	2110      	movs	r1, #16
   1892e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18932:	f00b fa81 	bl	23e38 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   18936:	4b0d      	ldr	r3, [pc, #52]	; (1896c <entropy_nrf5_init+0x68>)
   18938:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1893c:	f022 0201 	bic.w	r2, r2, #1
   18940:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18944:	4a0a      	ldr	r2, [pc, #40]	; (18970 <entropy_nrf5_init+0x6c>)
   18946:	2400      	movs	r4, #0
   18948:	6014      	str	r4, [r2, #0]
   1894a:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1894c:	2101      	movs	r1, #1
   1894e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18952:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   18954:	4622      	mov	r2, r4
   18956:	200d      	movs	r0, #13
   18958:	f7fb f840 	bl	139dc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1895c:	200d      	movs	r0, #13
   1895e:	f7fb f80b 	bl	13978 <arch_irq_enable>

	return 0;
}
   18962:	4620      	mov	r0, r4
   18964:	bd10      	pop	{r4, pc}
   18966:	bf00      	nop
   18968:	200029e8 	.word	0x200029e8
   1896c:	4000d000 	.word	0x4000d000
   18970:	4000d100 	.word	0x4000d100

00018974 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   18974:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   18978:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1897c:	4b01      	ldr	r3, [pc, #4]	; (18984 <set_comparator+0x10>)
   1897e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   18982:	4770      	bx	lr
   18984:	40011000 	.word	0x40011000

00018988 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   18988:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1898c:	4b01      	ldr	r3, [pc, #4]	; (18994 <get_comparator+0xc>)
   1898e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   18992:	4770      	bx	lr
   18994:	40011000 	.word	0x40011000

00018998 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1899c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1899e:	4a02      	ldr	r2, [pc, #8]	; (189a8 <event_enable+0x10>)
   189a0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   189a4:	4770      	bx	lr
   189a6:	bf00      	nop
   189a8:	40011000 	.word	0x40011000

000189ac <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   189ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   189b0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   189b2:	4a02      	ldr	r2, [pc, #8]	; (189bc <event_disable+0x10>)
   189b4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   189b8:	4770      	bx	lr
   189ba:	bf00      	nop
   189bc:	40011000 	.word	0x40011000

000189c0 <counter>:
     return p_reg->COUNTER;
   189c0:	4b01      	ldr	r3, [pc, #4]	; (189c8 <counter+0x8>)
   189c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   189c6:	4770      	bx	lr
   189c8:	40011000 	.word	0x40011000

000189cc <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   189cc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   189ce:	2301      	movs	r3, #1
   189d0:	4083      	lsls	r3, r0
   189d2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   189d4:	4a10      	ldr	r2, [pc, #64]	; (18a18 <compare_int_lock+0x4c>)
   189d6:	f3bf 8f5b 	dmb	ish
   189da:	e852 1f00 	ldrex	r1, [r2]
   189de:	ea01 0c04 	and.w	ip, r1, r4
   189e2:	e842 ce00 	strex	lr, ip, [r2]
   189e6:	f1be 0f00 	cmp.w	lr, #0
   189ea:	d1f6      	bne.n	189da <compare_int_lock+0xe>
   189ec:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   189f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   189f4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   189f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   189fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18a00:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   18a04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18a08:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   18a0c:	420b      	tst	r3, r1
}
   18a0e:	bf14      	ite	ne
   18a10:	2001      	movne	r0, #1
   18a12:	2000      	moveq	r0, #0
   18a14:	bd10      	pop	{r4, pc}
   18a16:	bf00      	nop
   18a18:	20002a40 	.word	0x20002a40

00018a1c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   18a1c:	b570      	push	{r4, r5, r6, lr}
   18a1e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   18a20:	f00b fa52 	bl	23ec8 <full_int_lock>
   18a24:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   18a26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18a2a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   18a2c:	4a17      	ldr	r2, [pc, #92]	; (18a8c <channel_processing_check_and_clear+0x70>)
   18a2e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   18a32:	4213      	tst	r3, r2
   18a34:	d105      	bne.n	18a42 <channel_processing_check_and_clear+0x26>
	bool result = false;
   18a36:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   18a38:	4628      	mov	r0, r5
   18a3a:	f00b fa49 	bl	23ed0 <full_int_unlock>

	return result;
}
   18a3e:	4630      	mov	r0, r6
   18a40:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18a42:	2301      	movs	r3, #1
   18a44:	40a3      	lsls	r3, r4
   18a46:	43db      	mvns	r3, r3
   18a48:	4a11      	ldr	r2, [pc, #68]	; (18a90 <channel_processing_check_and_clear+0x74>)
   18a4a:	f3bf 8f5b 	dmb	ish
   18a4e:	e852 1f00 	ldrex	r1, [r2]
   18a52:	ea01 0003 	and.w	r0, r1, r3
   18a56:	e842 0600 	strex	r6, r0, [r2]
   18a5a:	2e00      	cmp	r6, #0
   18a5c:	d1f7      	bne.n	18a4e <channel_processing_check_and_clear+0x32>
   18a5e:	f3bf 8f5b 	dmb	ish
   18a62:	b959      	cbnz	r1, 18a7c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   18a64:	f104 0350 	add.w	r3, r4, #80	; 0x50
   18a68:	009b      	lsls	r3, r3, #2
   18a6a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18a70:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   18a74:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18a76:	b113      	cbz	r3, 18a7e <channel_processing_check_and_clear+0x62>
   18a78:	2301      	movs	r3, #1
   18a7a:	e000      	b.n	18a7e <channel_processing_check_and_clear+0x62>
   18a7c:	2301      	movs	r3, #1
		if (result) {
   18a7e:	461e      	mov	r6, r3
   18a80:	2b00      	cmp	r3, #0
   18a82:	d0d9      	beq.n	18a38 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   18a84:	4620      	mov	r0, r4
   18a86:	f00b fa10 	bl	23eaa <event_clear>
   18a8a:	e7d5      	b.n	18a38 <channel_processing_check_and_clear+0x1c>
   18a8c:	40011000 	.word	0x40011000
   18a90:	20002a3c 	.word	0x20002a3c

00018a94 <compare_int_unlock>:
	if (key) {
   18a94:	b901      	cbnz	r1, 18a98 <compare_int_unlock+0x4>
}
   18a96:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   18a98:	2301      	movs	r3, #1
   18a9a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18a9c:	4a11      	ldr	r2, [pc, #68]	; (18ae4 <compare_int_unlock+0x50>)
   18a9e:	f3bf 8f5b 	dmb	ish
   18aa2:	e852 1f00 	ldrex	r1, [r2]
   18aa6:	4319      	orrs	r1, r3
   18aa8:	e842 1c00 	strex	ip, r1, [r2]
   18aac:	f1bc 0f00 	cmp.w	ip, #0
   18ab0:	d1f7      	bne.n	18aa2 <compare_int_unlock+0xe>
   18ab2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18aba:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   18abc:	4a0a      	ldr	r2, [pc, #40]	; (18ae8 <compare_int_unlock+0x54>)
   18abe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18ac2:	f3bf 8f5b 	dmb	ish
   18ac6:	4b09      	ldr	r3, [pc, #36]	; (18aec <compare_int_unlock+0x58>)
   18ac8:	681b      	ldr	r3, [r3, #0]
   18aca:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18ace:	fa23 f000 	lsr.w	r0, r3, r0
   18ad2:	f010 0f01 	tst.w	r0, #1
   18ad6:	d0de      	beq.n	18a96 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18ad8:	4b05      	ldr	r3, [pc, #20]	; (18af0 <compare_int_unlock+0x5c>)
   18ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18ade:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   18ae2:	e7d8      	b.n	18a96 <compare_int_unlock+0x2>
   18ae4:	20002a40 	.word	0x20002a40
   18ae8:	40011000 	.word	0x40011000
   18aec:	20002a3c 	.word	0x20002a3c
   18af0:	e000e100 	.word	0xe000e100

00018af4 <sys_clock_timeout_handler>:
{
   18af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18af6:	4607      	mov	r7, r0
   18af8:	4614      	mov	r4, r2
   18afa:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   18afc:	4610      	mov	r0, r2
   18afe:	4619      	mov	r1, r3
   18b00:	f00b f9df 	bl	23ec2 <absolute_time_to_cc>
   18b04:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   18b06:	4b15      	ldr	r3, [pc, #84]	; (18b5c <sys_clock_timeout_handler+0x68>)
   18b08:	681a      	ldr	r2, [r3, #0]
   18b0a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   18b0c:	601c      	str	r4, [r3, #0]
   18b0e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   18b10:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   18b14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   18b18:	d308      	bcc.n	18b2c <sys_clock_timeout_handler+0x38>
	return false;
   18b1a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   18b1c:	f003 f8ea 	bl	1bcf4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   18b20:	4638      	mov	r0, r7
   18b22:	f7ff ff31 	bl	18988 <get_comparator>
   18b26:	42a8      	cmp	r0, r5
   18b28:	d00c      	beq.n	18b44 <sys_clock_timeout_handler+0x50>
}
   18b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   18b2c:	4b0c      	ldr	r3, [pc, #48]	; (18b60 <sys_clock_timeout_handler+0x6c>)
   18b2e:	6819      	ldr	r1, [r3, #0]
   18b30:	0a0b      	lsrs	r3, r1, #8
   18b32:	060a      	lsls	r2, r1, #24
   18b34:	1952      	adds	r2, r2, r5
   18b36:	f143 0300 	adc.w	r3, r3, #0
   18b3a:	490a      	ldr	r1, [pc, #40]	; (18b64 <sys_clock_timeout_handler+0x70>)
   18b3c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   18b40:	2401      	movs	r4, #1
   18b42:	e7eb      	b.n	18b1c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   18b44:	b11c      	cbz	r4, 18b4e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   18b46:	4638      	mov	r0, r7
   18b48:	f7ff ff26 	bl	18998 <event_enable>
}
   18b4c:	e7ed      	b.n	18b2a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   18b4e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   18b52:	4638      	mov	r0, r7
   18b54:	f7ff ff0e 	bl	18974 <set_comparator>
   18b58:	e7f5      	b.n	18b46 <sys_clock_timeout_handler+0x52>
   18b5a:	bf00      	nop
   18b5c:	20001e58 	.word	0x20001e58
   18b60:	20002a44 	.word	0x20002a44
   18b64:	20001e40 	.word	0x20001e40

00018b68 <z_nrf_rtc_timer_read>:
{
   18b68:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   18b6a:	4b0d      	ldr	r3, [pc, #52]	; (18ba0 <z_nrf_rtc_timer_read+0x38>)
   18b6c:	681b      	ldr	r3, [r3, #0]
   18b6e:	0a1d      	lsrs	r5, r3, #8
   18b70:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   18b72:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   18b76:	f7ff ff23 	bl	189c0 <counter>
   18b7a:	4603      	mov	r3, r0
	val += cntr;
   18b7c:	1820      	adds	r0, r4, r0
   18b7e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   18b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18b86:	d20a      	bcs.n	18b9e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   18b88:	4b06      	ldr	r3, [pc, #24]	; (18ba4 <z_nrf_rtc_timer_read+0x3c>)
   18b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b8e:	4299      	cmp	r1, r3
   18b90:	bf08      	it	eq
   18b92:	4290      	cmpeq	r0, r2
   18b94:	d203      	bcs.n	18b9e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   18b96:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   18b9a:	f141 0100 	adc.w	r1, r1, #0
}
   18b9e:	bd38      	pop	{r3, r4, r5, pc}
   18ba0:	20002a44 	.word	0x20002a44
   18ba4:	20001e40 	.word	0x20001e40

00018ba8 <compare_set_nolocks>:
{
   18ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18bac:	4606      	mov	r6, r0
   18bae:	4614      	mov	r4, r2
   18bb0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   18bb2:	4610      	mov	r0, r2
   18bb4:	4619      	mov	r1, r3
   18bb6:	f00b f984 	bl	23ec2 <absolute_time_to_cc>
   18bba:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   18bbc:	f7ff ffd4 	bl	18b68 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   18bc0:	42a9      	cmp	r1, r5
   18bc2:	bf08      	it	eq
   18bc4:	42a0      	cmpeq	r0, r4
   18bc6:	d21e      	bcs.n	18c06 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   18bc8:	ebb4 0800 	subs.w	r8, r4, r0
   18bcc:	eb65 0901 	sbc.w	r9, r5, r1
   18bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18bd4:	2300      	movs	r3, #0
   18bd6:	454b      	cmp	r3, r9
   18bd8:	bf08      	it	eq
   18bda:	4542      	cmpeq	r2, r8
   18bdc:	d32e      	bcc.n	18c3c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   18bde:	4b19      	ldr	r3, [pc, #100]	; (18c44 <compare_set_nolocks+0x9c>)
   18be0:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   18be4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   18be8:	42ab      	cmp	r3, r5
   18bea:	bf08      	it	eq
   18bec:	42a2      	cmpeq	r2, r4
   18bee:	d018      	beq.n	18c22 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   18bf0:	4639      	mov	r1, r7
   18bf2:	4630      	mov	r0, r6
   18bf4:	f00b f96f 	bl	23ed6 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   18bf8:	4639      	mov	r1, r7
   18bfa:	f00b f952 	bl	23ea2 <counter_sub>
   18bfe:	1824      	adds	r4, r4, r0
   18c00:	f145 0500 	adc.w	r5, r5, #0
   18c04:	e00d      	b.n	18c22 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   18c06:	2301      	movs	r3, #1
   18c08:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c0a:	4a0f      	ldr	r2, [pc, #60]	; (18c48 <compare_set_nolocks+0xa0>)
   18c0c:	f3bf 8f5b 	dmb	ish
   18c10:	e852 1f00 	ldrex	r1, [r2]
   18c14:	4319      	orrs	r1, r3
   18c16:	e842 1000 	strex	r0, r1, [r2]
   18c1a:	2800      	cmp	r0, #0
   18c1c:	d1f8      	bne.n	18c10 <compare_set_nolocks+0x68>
   18c1e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   18c22:	4b08      	ldr	r3, [pc, #32]	; (18c44 <compare_set_nolocks+0x9c>)
   18c24:	0132      	lsls	r2, r6, #4
   18c26:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   18c2a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   18c2e:	9908      	ldr	r1, [sp, #32]
   18c30:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   18c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18c34:	6073      	str	r3, [r6, #4]
	return ret;
   18c36:	2000      	movs	r0, #0
}
   18c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   18c3c:	f06f 0015 	mvn.w	r0, #21
   18c40:	e7fa      	b.n	18c38 <compare_set_nolocks+0x90>
   18c42:	bf00      	nop
   18c44:	20001e48 	.word	0x20001e48
   18c48:	20002a3c 	.word	0x20002a3c

00018c4c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18c4c:	b530      	push	{r4, r5, lr}
   18c4e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   18c50:	2300      	movs	r3, #0
   18c52:	4a1e      	ldr	r2, [pc, #120]	; (18ccc <sys_clock_driver_init+0x80>)
   18c54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18c58:	2b00      	cmp	r3, #0
   18c5a:	dd25      	ble.n	18ca8 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   18c5c:	4c1b      	ldr	r4, [pc, #108]	; (18ccc <sys_clock_driver_init+0x80>)
   18c5e:	2502      	movs	r5, #2
   18c60:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18c64:	4b1a      	ldr	r3, [pc, #104]	; (18cd0 <sys_clock_driver_init+0x84>)
   18c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18c6a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18c6e:	2200      	movs	r2, #0
   18c70:	2101      	movs	r1, #1
   18c72:	2011      	movs	r0, #17
   18c74:	f7fa feb2 	bl	139dc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18c78:	2011      	movs	r0, #17
   18c7a:	f7fa fe7d 	bl	13978 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18c7e:	2301      	movs	r3, #1
   18c80:	4a14      	ldr	r2, [pc, #80]	; (18cd4 <sys_clock_driver_init+0x88>)
   18c82:	6013      	str	r3, [r2, #0]
   18c84:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18c86:	4a14      	ldr	r2, [pc, #80]	; (18cd8 <sys_clock_driver_init+0x8c>)
   18c88:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   18c8a:	2400      	movs	r4, #0
   18c8c:	9401      	str	r4, [sp, #4]
   18c8e:	4b13      	ldr	r3, [pc, #76]	; (18cdc <sys_clock_driver_init+0x90>)
   18c90:	9300      	str	r3, [sp, #0]
   18c92:	4a13      	ldr	r2, [pc, #76]	; (18ce0 <sys_clock_driver_init+0x94>)
   18c94:	2300      	movs	r3, #0
   18c96:	4620      	mov	r0, r4
   18c98:	f00b f958 	bl	23f4c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   18c9c:	4628      	mov	r0, r5
   18c9e:	f7ff f831 	bl	17d04 <z_nrf_clock_control_lf_on>

	return 0;
}
   18ca2:	4620      	mov	r0, r4
   18ca4:	b003      	add	sp, #12
   18ca6:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   18ca8:	4a0e      	ldr	r2, [pc, #56]	; (18ce4 <sys_clock_driver_init+0x98>)
   18caa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   18cae:	f04f 30ff 	mov.w	r0, #4294967295
   18cb2:	f04f 31ff 	mov.w	r1, #4294967295
   18cb6:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18cbe:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   18cc0:	4902      	ldr	r1, [pc, #8]	; (18ccc <sys_clock_driver_init+0x80>)
   18cc2:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18cc6:	3301      	adds	r3, #1
   18cc8:	e7c6      	b.n	18c58 <sys_clock_driver_init+0xc>
   18cca:	bf00      	nop
   18ccc:	40011000 	.word	0x40011000
   18cd0:	e000e100 	.word	0xe000e100
   18cd4:	40011008 	.word	0x40011008
   18cd8:	20002a40 	.word	0x20002a40
   18cdc:	00018af5 	.word	0x00018af5
   18ce0:	007fffff 	.word	0x007fffff
   18ce4:	20001e48 	.word	0x20001e48

00018ce8 <process_channel>:
{
   18ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18cec:	b082      	sub	sp, #8
   18cee:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   18cf0:	f7ff fe94 	bl	18a1c <channel_processing_check_and_clear>
   18cf4:	b910      	cbnz	r0, 18cfc <process_channel+0x14>
}
   18cf6:	b002      	add	sp, #8
   18cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   18cfc:	f7ff ff34 	bl	18b68 <z_nrf_rtc_timer_read>
   18d00:	4606      	mov	r6, r0
   18d02:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   18d04:	f00b f8e0 	bl	23ec8 <full_int_lock>
   18d08:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   18d0a:	4b13      	ldr	r3, [pc, #76]	; (18d58 <process_channel+0x70>)
   18d0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   18d10:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   18d14:	454f      	cmp	r7, r9
   18d16:	bf08      	it	eq
   18d18:	4546      	cmpeq	r6, r8
   18d1a:	d20b      	bcs.n	18d34 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   18d1c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   18d1e:	4650      	mov	r0, sl
   18d20:	f00b f8d6 	bl	23ed0 <full_int_unlock>
		if (handler) {
   18d24:	2e00      	cmp	r6, #0
   18d26:	d0e6      	beq.n	18cf6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   18d28:	9500      	str	r5, [sp, #0]
   18d2a:	4642      	mov	r2, r8
   18d2c:	464b      	mov	r3, r9
   18d2e:	4620      	mov	r0, r4
   18d30:	47b0      	blx	r6
}
   18d32:	e7e0      	b.n	18cf6 <process_channel+0xe>
			handler = cc_data[chan].callback;
   18d34:	4a08      	ldr	r2, [pc, #32]	; (18d58 <process_channel+0x70>)
   18d36:	0123      	lsls	r3, r4, #4
   18d38:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   18d3c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   18d3e:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   18d40:	2000      	movs	r0, #0
   18d42:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18d44:	f04f 32ff 	mov.w	r2, #4294967295
   18d48:	f04f 33ff 	mov.w	r3, #4294967295
   18d4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   18d50:	4620      	mov	r0, r4
   18d52:	f7ff fe2b 	bl	189ac <event_disable>
   18d56:	e7e2      	b.n	18d1e <process_channel+0x36>
   18d58:	20001e48 	.word	0x20001e48

00018d5c <rtc_nrf_isr>:
{
   18d5c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   18d5e:	4b0d      	ldr	r3, [pc, #52]	; (18d94 <rtc_nrf_isr+0x38>)
   18d60:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   18d64:	f013 0f02 	tst.w	r3, #2
   18d68:	d00a      	beq.n	18d80 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18d6a:	4b0b      	ldr	r3, [pc, #44]	; (18d98 <rtc_nrf_isr+0x3c>)
   18d6c:	681b      	ldr	r3, [r3, #0]
   18d6e:	b13b      	cbz	r3, 18d80 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18d70:	4b09      	ldr	r3, [pc, #36]	; (18d98 <rtc_nrf_isr+0x3c>)
   18d72:	2200      	movs	r2, #0
   18d74:	601a      	str	r2, [r3, #0]
   18d76:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   18d78:	4a08      	ldr	r2, [pc, #32]	; (18d9c <rtc_nrf_isr+0x40>)
   18d7a:	6813      	ldr	r3, [r2, #0]
   18d7c:	3301      	adds	r3, #1
   18d7e:	6013      	str	r3, [r2, #0]
{
   18d80:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18d82:	2c00      	cmp	r4, #0
   18d84:	dd00      	ble.n	18d88 <rtc_nrf_isr+0x2c>
}
   18d86:	bd10      	pop	{r4, pc}
		process_channel(chan);
   18d88:	4620      	mov	r0, r4
   18d8a:	f7ff ffad 	bl	18ce8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18d8e:	3401      	adds	r4, #1
   18d90:	e7f7      	b.n	18d82 <rtc_nrf_isr+0x26>
   18d92:	bf00      	nop
   18d94:	40011000 	.word	0x40011000
   18d98:	40011104 	.word	0x40011104
   18d9c:	20002a44 	.word	0x20002a44

00018da0 <sys_clock_set_timeout>:
{
   18da0:	b510      	push	{r4, lr}
   18da2:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18da4:	f1b0 3fff 	cmp.w	r0, #4294967295
   18da8:	d007      	beq.n	18dba <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18daa:	1e44      	subs	r4, r0, #1
   18dac:	2c00      	cmp	r4, #0
   18dae:	dd07      	ble.n	18dc0 <sys_clock_set_timeout+0x20>
   18db0:	4b11      	ldr	r3, [pc, #68]	; (18df8 <sys_clock_set_timeout+0x58>)
   18db2:	429c      	cmp	r4, r3
   18db4:	dd05      	ble.n	18dc2 <sys_clock_set_timeout+0x22>
   18db6:	4c11      	ldr	r4, [pc, #68]	; (18dfc <sys_clock_set_timeout+0x5c>)
   18db8:	e003      	b.n	18dc2 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18dba:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   18dbe:	e7f4      	b.n	18daa <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18dc0:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   18dc2:	f7ff fed1 	bl	18b68 <z_nrf_rtc_timer_read>
   18dc6:	4b0e      	ldr	r3, [pc, #56]	; (18e00 <sys_clock_set_timeout+0x60>)
   18dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   18dcc:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   18dce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18dd2:	d300      	bcc.n	18dd6 <sys_clock_set_timeout+0x36>
		ticks = 0;
   18dd4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   18dd6:	4404      	add	r4, r0
   18dd8:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   18dda:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   18dde:	d300      	bcc.n	18de2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   18de0:	4c06      	ldr	r4, [pc, #24]	; (18dfc <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   18de2:	2000      	movs	r0, #0
   18de4:	9001      	str	r0, [sp, #4]
   18de6:	4907      	ldr	r1, [pc, #28]	; (18e04 <sys_clock_set_timeout+0x64>)
   18de8:	9100      	str	r1, [sp, #0]
   18dea:	1912      	adds	r2, r2, r4
   18dec:	f143 0300 	adc.w	r3, r3, #0
   18df0:	f00b f8ac 	bl	23f4c <compare_set>
}
   18df4:	b002      	add	sp, #8
   18df6:	bd10      	pop	{r4, pc}
   18df8:	007ffffe 	.word	0x007ffffe
   18dfc:	007fffff 	.word	0x007fffff
   18e00:	20001e58 	.word	0x20001e58
   18e04:	00018af5 	.word	0x00018af5

00018e08 <sys_clock_elapsed>:
{
   18e08:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   18e0a:	f7ff fead 	bl	18b68 <z_nrf_rtc_timer_read>
   18e0e:	4b02      	ldr	r3, [pc, #8]	; (18e18 <sys_clock_elapsed+0x10>)
   18e10:	681b      	ldr	r3, [r3, #0]
}
   18e12:	1ac0      	subs	r0, r0, r3
   18e14:	bd08      	pop	{r3, pc}
   18e16:	bf00      	nop
   18e18:	20001e58 	.word	0x20001e58

00018e1c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   18e1c:	b508      	push	{r3, lr}
   18e1e:	4602      	mov	r2, r0
   18e20:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   18e22:	4802      	ldr	r0, [pc, #8]	; (18e2c <multithreading_lock_acquire+0x10>)
   18e24:	f001 ff24 	bl	1ac70 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   18e28:	bd08      	pop	{r3, pc}
   18e2a:	bf00      	nop
   18e2c:	20000a7c 	.word	0x20000a7c

00018e30 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   18e30:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   18e32:	4802      	ldr	r0, [pc, #8]	; (18e3c <multithreading_lock_release+0xc>)
   18e34:	f001 ffa6 	bl	1ad84 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   18e38:	bd08      	pop	{r3, pc}
   18e3a:	bf00      	nop
   18e3c:	20000a7c 	.word	0x20000a7c

00018e40 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   18e40:	b510      	push	{r4, lr}
   18e42:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   18e44:	4a03      	ldr	r2, [pc, #12]	; (18e54 <rand_prio_low_vector_get_blocking+0x14>)
   18e46:	6810      	ldr	r0, [r2, #0]
   18e48:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   18e4a:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   18e4c:	680c      	ldr	r4, [r1, #0]
   18e4e:	4619      	mov	r1, r3
   18e50:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   18e52:	bd10      	pop	{r4, pc}
   18e54:	20002a48 	.word	0x20002a48

00018e58 <host_signal>:
{
   18e58:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   18e5a:	4802      	ldr	r0, [pc, #8]	; (18e64 <host_signal+0xc>)
   18e5c:	f002 f812 	bl	1ae84 <z_impl_k_sem_give>
}
   18e60:	bd08      	pop	{r3, pc}
   18e62:	bf00      	nop
   18e64:	20000acc 	.word	0x20000acc

00018e68 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18e68:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18e6a:	4803      	ldr	r0, [pc, #12]	; (18e78 <hci_driver_init+0x10>)
   18e6c:	f7fc f98a 	bl	15184 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   18e70:	4802      	ldr	r0, [pc, #8]	; (18e7c <hci_driver_init+0x14>)
   18e72:	f7eb fd9f 	bl	49b4 <sdc_init>
	return err;
}
   18e76:	bd08      	pop	{r3, pc}
   18e78:	000270d0 	.word	0x000270d0
   18e7c:	00023f87 	.word	0x00023f87

00018e80 <acl_handle>:
{
   18e80:	b538      	push	{r3, r4, r5, lr}
   18e82:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18e84:	f04f 30ff 	mov.w	r0, #4294967295
   18e88:	f04f 31ff 	mov.w	r1, #4294967295
   18e8c:	f7ff ffc6 	bl	18e1c <multithreading_lock_acquire>
	if (!errcode) {
   18e90:	4605      	mov	r5, r0
   18e92:	b108      	cbz	r0, 18e98 <acl_handle+0x18>
}
   18e94:	4628      	mov	r0, r5
   18e96:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   18e98:	68a0      	ldr	r0, [r4, #8]
   18e9a:	f7f3 fff7 	bl	ce8c <sdc_hci_data_put>
   18e9e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   18ea0:	f7ff ffc6 	bl	18e30 <multithreading_lock_release>
		if (errcode) {
   18ea4:	2d00      	cmp	r5, #0
   18ea6:	d0f5      	beq.n	18e94 <acl_handle+0x14>
   18ea8:	4801      	ldr	r0, [pc, #4]	; (18eb0 <acl_handle+0x30>)
   18eaa:	f001 ffeb 	bl	1ae84 <z_impl_k_sem_give>
}
   18eae:	e7f1      	b.n	18e94 <acl_handle+0x14>
   18eb0:	20000acc 	.word	0x20000acc

00018eb4 <cmd_handle>:
{
   18eb4:	b538      	push	{r3, r4, r5, lr}
   18eb6:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   18eb8:	f04f 30ff 	mov.w	r0, #4294967295
   18ebc:	f04f 31ff 	mov.w	r1, #4294967295
   18ec0:	f7ff ffac 	bl	18e1c <multithreading_lock_acquire>
	if (!errcode) {
   18ec4:	4604      	mov	r4, r0
   18ec6:	b110      	cbz	r0, 18ece <cmd_handle+0x1a>
	if (errcode) {
   18ec8:	b144      	cbz	r4, 18edc <cmd_handle+0x28>
}
   18eca:	4620      	mov	r0, r4
   18ecc:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   18ece:	68a8      	ldr	r0, [r5, #8]
   18ed0:	f000 f8b8 	bl	19044 <hci_internal_cmd_put>
   18ed4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18ed6:	f7ff ffab 	bl	18e30 <multithreading_lock_release>
   18eda:	e7f5      	b.n	18ec8 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   18edc:	4801      	ldr	r0, [pc, #4]	; (18ee4 <cmd_handle+0x30>)
   18ede:	f001 ffd1 	bl	1ae84 <z_impl_k_sem_give>
	return 0;
   18ee2:	e7f2      	b.n	18eca <cmd_handle+0x16>
   18ee4:	20000acc 	.word	0x20000acc

00018ee8 <rand_prio_high_vector_get>:
{
   18ee8:	b538      	push	{r3, r4, r5, lr}
   18eea:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18eec:	4b07      	ldr	r3, [pc, #28]	; (18f0c <rand_prio_high_vector_get+0x24>)
   18eee:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   18ef0:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   18ef2:	685d      	ldr	r5, [r3, #4]
   18ef4:	b13d      	cbz	r5, 18f06 <rand_prio_high_vector_get+0x1e>
   18ef6:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   18ef8:	2300      	movs	r3, #0
   18efa:	4621      	mov	r1, r4
   18efc:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   18efe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   18f02:	b2c0      	uxtb	r0, r0
   18f04:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18f06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18f0a:	e7f8      	b.n	18efe <rand_prio_high_vector_get+0x16>
   18f0c:	20002a48 	.word	0x20002a48

00018f10 <rand_prio_low_vector_get>:
{
   18f10:	b538      	push	{r3, r4, r5, lr}
   18f12:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18f14:	4b07      	ldr	r3, [pc, #28]	; (18f34 <rand_prio_low_vector_get+0x24>)
   18f16:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   18f18:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   18f1a:	685d      	ldr	r5, [r3, #4]
   18f1c:	b13d      	cbz	r5, 18f2e <rand_prio_low_vector_get+0x1e>
   18f1e:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   18f20:	2300      	movs	r3, #0
   18f22:	4621      	mov	r1, r4
   18f24:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   18f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   18f2a:	b2c0      	uxtb	r0, r0
   18f2c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18f2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18f32:	e7f8      	b.n	18f26 <rand_prio_low_vector_get+0x16>
   18f34:	20002a48 	.word	0x20002a48

00018f38 <recv_thread>:
{
   18f38:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   18f3a:	2500      	movs	r5, #0
	bool received_evt = false;
   18f3c:	462c      	mov	r4, r5
   18f3e:	e00a      	b.n	18f56 <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   18f40:	4d0b      	ldr	r5, [pc, #44]	; (18f70 <recv_thread+0x38>)
   18f42:	4628      	mov	r0, r5
   18f44:	f00b f873 	bl	2402e <fetch_and_process_hci_evt>
   18f48:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   18f4a:	4628      	mov	r0, r5
   18f4c:	f00b f89d 	bl	2408a <fetch_and_process_acl_data>
   18f50:	4605      	mov	r5, r0
	z_impl_k_yield();
   18f52:	f002 fcb3 	bl	1b8bc <z_impl_k_yield>
		if (!received_evt && !received_data) {
   18f56:	2c00      	cmp	r4, #0
   18f58:	d1f2      	bne.n	18f40 <recv_thread+0x8>
   18f5a:	2d00      	cmp	r5, #0
   18f5c:	d1f0      	bne.n	18f40 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   18f5e:	f04f 32ff 	mov.w	r2, #4294967295
   18f62:	f04f 33ff 	mov.w	r3, #4294967295
   18f66:	4803      	ldr	r0, [pc, #12]	; (18f74 <recv_thread+0x3c>)
   18f68:	f001 ffb4 	bl	1aed4 <z_impl_k_sem_take>
   18f6c:	e7e8      	b.n	18f40 <recv_thread+0x8>
   18f6e:	bf00      	nop
   18f70:	20002a4c 	.word	0x20002a4c
   18f74:	20000acc 	.word	0x20000acc

00018f78 <hci_driver_open>:
{
   18f78:	b530      	push	{r4, r5, lr}
   18f7a:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18f7c:	4c28      	ldr	r4, [pc, #160]	; (19020 <hci_driver_open+0xa8>)
   18f7e:	2200      	movs	r2, #0
   18f80:	2300      	movs	r3, #0
   18f82:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18f86:	2300      	movs	r3, #0
   18f88:	9304      	str	r3, [sp, #16]
   18f8a:	f06f 0209 	mvn.w	r2, #9
   18f8e:	9203      	str	r2, [sp, #12]
   18f90:	9302      	str	r3, [sp, #8]
   18f92:	9301      	str	r3, [sp, #4]
   18f94:	9300      	str	r3, [sp, #0]
   18f96:	4b23      	ldr	r3, [pc, #140]	; (19024 <hci_driver_open+0xac>)
   18f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18f9c:	4922      	ldr	r1, [pc, #136]	; (19028 <hci_driver_open+0xb0>)
   18f9e:	4620      	mov	r0, r4
   18fa0:	f00b fe18 	bl	24bd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18fa4:	4921      	ldr	r1, [pc, #132]	; (1902c <hci_driver_open+0xb4>)
   18fa6:	4620      	mov	r0, r4
   18fa8:	f001 fd74 	bl	1aa94 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   18fac:	a80b      	add	r0, sp, #44	; 0x2c
   18fae:	f7eb fc6f 	bl	4890 <sdc_build_revision_get>
	err = configure_supported_features();
   18fb2:	f00b f883 	bl	240bc <configure_supported_features>
	if (err) {
   18fb6:	4604      	mov	r4, r0
   18fb8:	b110      	cbz	r0, 18fc0 <hci_driver_open+0x48>
}
   18fba:	4620      	mov	r0, r4
   18fbc:	b011      	add	sp, #68	; 0x44
   18fbe:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   18fc0:	f00b f896 	bl	240f0 <configure_memory_usage>
	if (err) {
   18fc4:	4604      	mov	r4, r0
   18fc6:	2800      	cmp	r0, #0
   18fc8:	d1f7      	bne.n	18fba <hci_driver_open+0x42>
   18fca:	4819      	ldr	r0, [pc, #100]	; (19030 <hci_driver_open+0xb8>)
   18fcc:	f001 fbc0 	bl	1a750 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   18fd0:	4b18      	ldr	r3, [pc, #96]	; (19034 <hci_driver_open+0xbc>)
   18fd2:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   18fd4:	b1e8      	cbz	r0, 19012 <hci_driver_open+0x9a>
	sdc_rand_source_t rand_functions = {
   18fd6:	4a18      	ldr	r2, [pc, #96]	; (19038 <hci_driver_open+0xc0>)
   18fd8:	ab08      	add	r3, sp, #32
   18fda:	ca07      	ldmia	r2, {r0, r1, r2}
   18fdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   18fe0:	4618      	mov	r0, r3
   18fe2:	f7eb fde9 	bl	4bb8 <sdc_rand_source_register>
	if (err) {
   18fe6:	4604      	mov	r4, r0
   18fe8:	b9b0      	cbnz	r0, 19018 <hci_driver_open+0xa0>
	err = MULTITHREADING_LOCK_ACQUIRE();
   18fea:	f04f 30ff 	mov.w	r0, #4294967295
   18fee:	f04f 31ff 	mov.w	r1, #4294967295
   18ff2:	f7ff ff13 	bl	18e1c <multithreading_lock_acquire>
	if (!err) {
   18ff6:	4605      	mov	r5, r0
   18ff8:	b118      	cbz	r0, 19002 <hci_driver_open+0x8a>
	if (err < 0) {
   18ffa:	2d00      	cmp	r5, #0
   18ffc:	dadd      	bge.n	18fba <hci_driver_open+0x42>
		return err;
   18ffe:	462c      	mov	r4, r5
   19000:	e7db      	b.n	18fba <hci_driver_open+0x42>
		err = sdc_enable(host_signal, sdc_mempool);
   19002:	490e      	ldr	r1, [pc, #56]	; (1903c <hci_driver_open+0xc4>)
   19004:	480e      	ldr	r0, [pc, #56]	; (19040 <hci_driver_open+0xc8>)
   19006:	f7eb fcad 	bl	4964 <sdc_enable>
   1900a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1900c:	f7ff ff10 	bl	18e30 <multithreading_lock_release>
   19010:	e7f3      	b.n	18ffa <hci_driver_open+0x82>
		return -ENODEV;
   19012:	f06f 0412 	mvn.w	r4, #18
   19016:	e7d0      	b.n	18fba <hci_driver_open+0x42>
		return -EINVAL;
   19018:	f06f 0415 	mvn.w	r4, #21
   1901c:	e7cd      	b.n	18fba <hci_driver_open+0x42>
   1901e:	bf00      	nop
   19020:	20001e60 	.word	0x20001e60
   19024:	00018f39 	.word	0x00018f39
   19028:	20004b80 	.word	0x20004b80
   1902c:	000270b0 	.word	0x000270b0
   19030:	00027090 	.word	0x00027090
   19034:	20002a48 	.word	0x20002a48
   19038:	00025c48 	.word	0x00025c48
   1903c:	20002a94 	.word	0x20002a94
   19040:	00018e59 	.word	0x00018e59

00019044 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   19044:	4b0b      	ldr	r3, [pc, #44]	; (19074 <hci_internal_cmd_put+0x30>)
   19046:	781b      	ldrb	r3, [r3, #0]
   19048:	b96b      	cbnz	r3, 19066 <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1904a:	7883      	ldrb	r3, [r0, #2]
   1904c:	3303      	adds	r3, #3
   1904e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   19052:	dc0b      	bgt.n	1906c <hci_internal_cmd_put+0x28>
{
   19054:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   19056:	4c07      	ldr	r4, [pc, #28]	; (19074 <hci_internal_cmd_put+0x30>)
   19058:	1c61      	adds	r1, r4, #1
   1905a:	f00b fb21 	bl	246a0 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1905e:	2301      	movs	r3, #1
   19060:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   19062:	2000      	movs	r0, #0
}
   19064:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   19066:	f04f 30ff 	mov.w	r0, #4294967295
   1906a:	4770      	bx	lr
		return -EINVAL;
   1906c:	f06f 0015 	mvn.w	r0, #21
}
   19070:	4770      	bx	lr
   19072:	bf00      	nop
   19074:	2000300c 	.word	0x2000300c

00019078 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19078:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1907a:	4b07      	ldr	r3, [pc, #28]	; (19098 <hci_internal_evt_get+0x20>)
   1907c:	781b      	ldrb	r3, [r3, #0]
   1907e:	b143      	cbz	r3, 19092 <hci_internal_evt_get+0x1a>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   19080:	4c05      	ldr	r4, [pc, #20]	; (19098 <hci_internal_evt_get+0x20>)
   19082:	78a2      	ldrb	r2, [r4, #2]
   19084:	3202      	adds	r2, #2
   19086:	1c61      	adds	r1, r4, #1
   19088:	f00c fb4d 	bl	25726 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   1908c:	2000      	movs	r0, #0
   1908e:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   19090:	bd10      	pop	{r4, pc}
	return sdc_hci_evt_get(evt_out);
   19092:	f7f3 ff06 	bl	cea2 <sdc_hci_evt_get>
   19096:	e7fb      	b.n	19090 <hci_internal_evt_get+0x18>
   19098:	2000300c 	.word	0x2000300c

0001909c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1909c:	b538      	push	{r3, r4, r5, lr}
   1909e:	4605      	mov	r5, r0
   190a0:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   190a2:	4b0a      	ldr	r3, [pc, #40]	; (190cc <bt_rand+0x30>)
   190a4:	681b      	ldr	r3, [r3, #0]
   190a6:	b13b      	cbz	r3, 190b8 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   190a8:	4b08      	ldr	r3, [pc, #32]	; (190cc <bt_rand+0x30>)
   190aa:	6818      	ldr	r0, [r3, #0]
   190ac:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   190ae:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   190b0:	681b      	ldr	r3, [r3, #0]
   190b2:	4629      	mov	r1, r5
   190b4:	4798      	blx	r3
}
   190b6:	bd38      	pop	{r3, r4, r5, pc}
   190b8:	4805      	ldr	r0, [pc, #20]	; (190d0 <bt_rand+0x34>)
   190ba:	f001 fb49 	bl	1a750 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   190be:	4b03      	ldr	r3, [pc, #12]	; (190cc <bt_rand+0x30>)
   190c0:	6018      	str	r0, [r3, #0]
		if (!dev) {
   190c2:	2800      	cmp	r0, #0
   190c4:	d1f0      	bne.n	190a8 <bt_rand+0xc>
			return -ENODEV;
   190c6:	f06f 0012 	mvn.w	r0, #18
   190ca:	e7f4      	b.n	190b6 <bt_rand+0x1a>
   190cc:	20003054 	.word	0x20003054
   190d0:	00027090 	.word	0x00027090

000190d4 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   190d4:	b510      	push	{r4, lr}
   190d6:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   190d8:	f00b fb40 	bl	2475c <m_config_clock_source_get>
   190dc:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   190e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   190e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   190e8:	2300      	movs	r3, #0
   190ea:	f88d 3006 	strb.w	r3, [sp, #6]
	BUILD_ASSERT(IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION),
		    "MPSL requires clock calibration to be enabled when RC is used as LFCLK");

	/* clock_cfg.rc_ctiv is given in 1/4 seconds units.
	 * CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD is given in ms. */
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
   190ee:	2310      	movs	r3, #16
   190f0:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   190f4:	2302      	movs	r3, #2
   190f6:	f88d 3002 	strb.w	r3, [sp, #2]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   190fa:	4a0d      	ldr	r2, [pc, #52]	; (19130 <mpsl_lib_init+0x5c>)
   190fc:	2119      	movs	r1, #25
   190fe:	4668      	mov	r0, sp
   19100:	f7eb fa1c 	bl	453c <mpsl_init>
	if (err) {
   19104:	4604      	mov	r4, r0
   19106:	b110      	cbz	r0, 1910e <mpsl_lib_init+0x3a>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19108:	4620      	mov	r0, r4
   1910a:	b002      	add	sp, #8
   1910c:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1910e:	2201      	movs	r2, #1
   19110:	2100      	movs	r1, #0
   19112:	2008      	movs	r0, #8
   19114:	f7fa fc62 	bl	139dc <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19118:	2201      	movs	r2, #1
   1911a:	2100      	movs	r1, #0
   1911c:	200b      	movs	r0, #11
   1911e:	f7fa fc5d 	bl	139dc <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19122:	2201      	movs	r2, #1
   19124:	2100      	movs	r1, #0
   19126:	4610      	mov	r0, r2
   19128:	f7fa fc58 	bl	139dc <z_arm_irq_priority_set>
	return 0;
   1912c:	e7ec      	b.n	19108 <mpsl_lib_init+0x34>
   1912e:	bf00      	nop
   19130:	0002474f 	.word	0x0002474f

00019134 <signal_thread>:
{
   19134:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   19136:	f04f 34ff 	mov.w	r4, #4294967295
   1913a:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1913e:	4622      	mov	r2, r4
   19140:	462b      	mov	r3, r5
   19142:	4806      	ldr	r0, [pc, #24]	; (1915c <signal_thread+0x28>)
   19144:	f001 fec6 	bl	1aed4 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   19148:	4620      	mov	r0, r4
   1914a:	4629      	mov	r1, r5
   1914c:	f7ff fe66 	bl	18e1c <multithreading_lock_acquire>
		mpsl_low_priority_process();
   19150:	f7f3 fa53 	bl	c5fa <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   19154:	f7ff fe6c 	bl	18e30 <multithreading_lock_release>
	while (true) {
   19158:	e7ed      	b.n	19136 <signal_thread+0x2>
   1915a:	bf00      	nop
   1915c:	20000ae4 	.word	0x20000ae4

00019160 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   19160:	b530      	push	{r4, r5, lr}
   19162:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19164:	4d0f      	ldr	r5, [pc, #60]	; (191a4 <mpsl_signal_thread_init+0x44>)
   19166:	2200      	movs	r2, #0
   19168:	2300      	movs	r3, #0
   1916a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1916e:	2400      	movs	r4, #0
   19170:	9404      	str	r4, [sp, #16]
   19172:	f06f 0309 	mvn.w	r3, #9
   19176:	9303      	str	r3, [sp, #12]
   19178:	9402      	str	r4, [sp, #8]
   1917a:	9401      	str	r4, [sp, #4]
   1917c:	9400      	str	r4, [sp, #0]
   1917e:	4b0a      	ldr	r3, [pc, #40]	; (191a8 <mpsl_signal_thread_init+0x48>)
   19180:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19184:	4909      	ldr	r1, [pc, #36]	; (191ac <mpsl_signal_thread_init+0x4c>)
   19186:	4628      	mov	r0, r5
   19188:	f00b fd24 	bl	24bd4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1918c:	4908      	ldr	r1, [pc, #32]	; (191b0 <mpsl_signal_thread_init+0x50>)
   1918e:	4628      	mov	r0, r5
   19190:	f001 fc80 	bl	1aa94 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19194:	4622      	mov	r2, r4
   19196:	2104      	movs	r1, #4
   19198:	2019      	movs	r0, #25
   1919a:	f7fa fc1f 	bl	139dc <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1919e:	4620      	mov	r0, r4
   191a0:	b009      	add	sp, #36	; 0x24
   191a2:	bd30      	pop	{r4, r5, pc}
   191a4:	20001f18 	.word	0x20001f18
   191a8:	00019135 	.word	0x00019135
   191ac:	20004fa0 	.word	0x20004fa0
   191b0:	000270e4 	.word	0x000270e4

000191b4 <mpsl_low_prio_irq_handler>:
{
   191b4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   191b6:	4802      	ldr	r0, [pc, #8]	; (191c0 <mpsl_low_prio_irq_handler+0xc>)
   191b8:	f001 fe64 	bl	1ae84 <z_impl_k_sem_give>
}
   191bc:	bd08      	pop	{r3, pc}
   191be:	bf00      	nop
   191c0:	20000ae4 	.word	0x20000ae4

000191c4 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   191c4:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   191c6:	4b02      	ldr	r3, [pc, #8]	; (191d0 <mpsl_hfclk_callback+0xc>)
   191c8:	681b      	ldr	r3, [r3, #0]
   191ca:	2000      	movs	r0, #0
   191cc:	4798      	blx	r3
}
   191ce:	bd08      	pop	{r3, pc}
   191d0:	20003058 	.word	0x20003058

000191d4 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   191d4:	b508      	push	{r3, lr}
	switch (domain) {
   191d6:	b128      	cbz	r0, 191e4 <nrfx_clock_start+0x10>
   191d8:	2801      	cmp	r0, #1
   191da:	d102      	bne.n	191e2 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   191dc:	4804      	ldr	r0, [pc, #16]	; (191f0 <nrfx_clock_start+0x1c>)
   191de:	f7ea fff9 	bl	41d4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   191e2:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   191e4:	4b03      	ldr	r3, [pc, #12]	; (191f4 <nrfx_clock_start+0x20>)
   191e6:	681b      	ldr	r3, [r3, #0]
   191e8:	2001      	movs	r0, #1
   191ea:	4798      	blx	r3
}
   191ec:	e7f9      	b.n	191e2 <nrfx_clock_start+0xe>
   191ee:	bf00      	nop
   191f0:	000191c5 	.word	0x000191c5
   191f4:	20003058 	.word	0x20003058

000191f8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   191f8:	4b01      	ldr	r3, [pc, #4]	; (19200 <nrfx_clock_init+0x8>)
   191fa:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   191fc:	4801      	ldr	r0, [pc, #4]	; (19204 <nrfx_clock_init+0xc>)
   191fe:	4770      	bx	lr
   19200:	20003058 	.word	0x20003058
   19204:	0bad0000 	.word	0x0bad0000

00019208 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19208:	4b03      	ldr	r3, [pc, #12]	; (19218 <nrf52_errata_36+0x10>)
   1920a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1920c:	2b08      	cmp	r3, #8
   1920e:	d001      	beq.n	19214 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   19210:	2000      	movs	r0, #0
   19212:	4770      	bx	lr
                        return true;
   19214:	2001      	movs	r0, #1
    #endif
}
   19216:	4770      	bx	lr
   19218:	10000130 	.word	0x10000130

0001921c <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1921c:	4b03      	ldr	r3, [pc, #12]	; (1922c <nrf52_errata_66+0x10>)
   1921e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19220:	2b08      	cmp	r3, #8
   19222:	d001      	beq.n	19228 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   19224:	2000      	movs	r0, #0
   19226:	4770      	bx	lr
                        return true;
   19228:	2001      	movs	r0, #1
    #endif
}
   1922a:	4770      	bx	lr
   1922c:	10000130 	.word	0x10000130

00019230 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19230:	4b08      	ldr	r3, [pc, #32]	; (19254 <nrf52_errata_98+0x24>)
   19232:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19234:	3304      	adds	r3, #4
   19236:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19238:	2a08      	cmp	r2, #8
   1923a:	d001      	beq.n	19240 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1923c:	2000      	movs	r0, #0
   1923e:	4770      	bx	lr
                switch(var2)
   19240:	2b00      	cmp	r3, #0
   19242:	d804      	bhi.n	1924e <nrf52_errata_98+0x1e>
   19244:	e8df f003 	tbb	[pc, r3]
   19248:	01          	.byte	0x01
   19249:	00          	.byte	0x00
            if (var1 == 0x08)
   1924a:	2001      	movs	r0, #1
   1924c:	4770      	bx	lr
                        return false;
   1924e:	2000      	movs	r0, #0
    #endif
}
   19250:	4770      	bx	lr
   19252:	bf00      	nop
   19254:	10000130 	.word	0x10000130

00019258 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19258:	4b08      	ldr	r3, [pc, #32]	; (1927c <nrf52_errata_103+0x24>)
   1925a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1925c:	3304      	adds	r3, #4
   1925e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19260:	2a08      	cmp	r2, #8
   19262:	d001      	beq.n	19268 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19264:	2000      	movs	r0, #0
   19266:	4770      	bx	lr
                switch(var2)
   19268:	2b00      	cmp	r3, #0
   1926a:	d804      	bhi.n	19276 <nrf52_errata_103+0x1e>
   1926c:	e8df f003 	tbb	[pc, r3]
   19270:	01          	.byte	0x01
   19271:	00          	.byte	0x00
            if (var1 == 0x08)
   19272:	2001      	movs	r0, #1
   19274:	4770      	bx	lr
                        return false;
   19276:	2000      	movs	r0, #0
    #endif
}
   19278:	4770      	bx	lr
   1927a:	bf00      	nop
   1927c:	10000130 	.word	0x10000130

00019280 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19280:	4b08      	ldr	r3, [pc, #32]	; (192a4 <nrf52_errata_115+0x24>)
   19282:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19284:	3304      	adds	r3, #4
   19286:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19288:	2a08      	cmp	r2, #8
   1928a:	d001      	beq.n	19290 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1928c:	2000      	movs	r0, #0
   1928e:	4770      	bx	lr
                switch(var2)
   19290:	2b00      	cmp	r3, #0
   19292:	d804      	bhi.n	1929e <nrf52_errata_115+0x1e>
   19294:	e8df f003 	tbb	[pc, r3]
   19298:	01          	.byte	0x01
   19299:	00          	.byte	0x00
            if (var1 == 0x08)
   1929a:	2001      	movs	r0, #1
   1929c:	4770      	bx	lr
                        return false;
   1929e:	2000      	movs	r0, #0
    #endif
}
   192a0:	4770      	bx	lr
   192a2:	bf00      	nop
   192a4:	10000130 	.word	0x10000130

000192a8 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   192a8:	4b08      	ldr	r3, [pc, #32]	; (192cc <nrf52_errata_120+0x24>)
   192aa:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   192ac:	3304      	adds	r3, #4
   192ae:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   192b0:	2a08      	cmp	r2, #8
   192b2:	d001      	beq.n	192b8 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   192b4:	2000      	movs	r0, #0
   192b6:	4770      	bx	lr
                switch(var2)
   192b8:	2b00      	cmp	r3, #0
   192ba:	d804      	bhi.n	192c6 <nrf52_errata_120+0x1e>
   192bc:	e8df f003 	tbb	[pc, r3]
   192c0:	01          	.byte	0x01
   192c1:	00          	.byte	0x00
            if (var1 == 0x08)
   192c2:	2001      	movs	r0, #1
   192c4:	4770      	bx	lr
                        return false;
   192c6:	2000      	movs	r0, #0
    #endif
}
   192c8:	4770      	bx	lr
   192ca:	bf00      	nop
   192cc:	10000130 	.word	0x10000130

000192d0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   192d0:	4b03      	ldr	r3, [pc, #12]	; (192e0 <nrf52_errata_136+0x10>)
   192d2:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   192d4:	2b08      	cmp	r3, #8
   192d6:	d001      	beq.n	192dc <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   192d8:	2000      	movs	r0, #0
   192da:	4770      	bx	lr
                        return true;
   192dc:	2001      	movs	r0, #1
    #endif
}
   192de:	4770      	bx	lr
   192e0:	10000130 	.word	0x10000130

000192e4 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   192e4:	4b06      	ldr	r3, [pc, #24]	; (19300 <nrf52_configuration_249+0x1c>)
   192e6:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   192e8:	4a06      	ldr	r2, [pc, #24]	; (19304 <nrf52_configuration_249+0x20>)
   192ea:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   192ec:	2b08      	cmp	r3, #8
   192ee:	d001      	beq.n	192f4 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   192f0:	2000      	movs	r0, #0
   192f2:	4770      	bx	lr
                switch(var2)
   192f4:	2a04      	cmp	r2, #4
   192f6:	d801      	bhi.n	192fc <nrf52_configuration_249+0x18>
   192f8:	2000      	movs	r0, #0
   192fa:	4770      	bx	lr
                        return true;
   192fc:	2001      	movs	r0, #1
    #endif
}
   192fe:	4770      	bx	lr
   19300:	10000130 	.word	0x10000130
   19304:	10000134 	.word	0x10000134

00019308 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19308:	4b02      	ldr	r3, [pc, #8]	; (19314 <nvmc_wait+0xc>)
   1930a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1930e:	2b00      	cmp	r3, #0
   19310:	d0fa      	beq.n	19308 <nvmc_wait>
}
   19312:	4770      	bx	lr
   19314:	4001e000 	.word	0x4001e000

00019318 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   19318:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1931a:	4b03      	ldr	r3, [pc, #12]	; (19328 <nvmc_config+0x10>)
   1931c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   19320:	f7ff fff2 	bl	19308 <nvmc_wait>
}
   19324:	bd08      	pop	{r3, pc}
   19326:	bf00      	nop
   19328:	4001e000 	.word	0x4001e000

0001932c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1932c:	4b01      	ldr	r3, [pc, #4]	; (19334 <SystemCoreClockUpdate+0x8>)
   1932e:	4a02      	ldr	r2, [pc, #8]	; (19338 <SystemCoreClockUpdate+0xc>)
   19330:	601a      	str	r2, [r3, #0]
}
   19332:	4770      	bx	lr
   19334:	200008f0 	.word	0x200008f0
   19338:	03d09000 	.word	0x03d09000

0001933c <SystemInit>:

void SystemInit(void)
{
   1933c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1933e:	f7ff ff63 	bl	19208 <nrf52_errata_36>
   19342:	b140      	cbz	r0, 19356 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19348:	2200      	movs	r2, #0
   1934a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1934e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19352:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19356:	f7ff ff61 	bl	1921c <nrf52_errata_66>
   1935a:	2800      	cmp	r0, #0
   1935c:	d046      	beq.n	193ec <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19362:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19366:	4b56      	ldr	r3, [pc, #344]	; (194c0 <SystemInit+0x184>)
   19368:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1936c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19370:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19374:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19378:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1937c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19380:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19384:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19388:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1938c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19390:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19394:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19398:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1939c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   193a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   193a4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   193a8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   193ac:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   193b0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   193b4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   193b8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   193bc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   193c0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   193c4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   193c8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   193cc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   193d0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   193d4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   193d8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   193dc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   193e0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   193e4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   193e8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   193ec:	f7ff ff20 	bl	19230 <nrf52_errata_98>
   193f0:	b110      	cbz	r0, 193f8 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   193f2:	4b34      	ldr	r3, [pc, #208]	; (194c4 <SystemInit+0x188>)
   193f4:	4a34      	ldr	r2, [pc, #208]	; (194c8 <SystemInit+0x18c>)
   193f6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   193f8:	f7ff ff2e 	bl	19258 <nrf52_errata_103>
   193fc:	b118      	cbz	r0, 19406 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   193fe:	4b33      	ldr	r3, [pc, #204]	; (194cc <SystemInit+0x190>)
   19400:	22fb      	movs	r2, #251	; 0xfb
   19402:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19406:	f7ff ff3b 	bl	19280 <nrf52_errata_115>
   1940a:	b148      	cbz	r0, 19420 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1940c:	4930      	ldr	r1, [pc, #192]	; (194d0 <SystemInit+0x194>)
   1940e:	680b      	ldr	r3, [r1, #0]
   19410:	f023 030f 	bic.w	r3, r3, #15
   19414:	4a2f      	ldr	r2, [pc, #188]	; (194d4 <SystemInit+0x198>)
   19416:	6812      	ldr	r2, [r2, #0]
   19418:	f002 020f 	and.w	r2, r2, #15
   1941c:	4313      	orrs	r3, r2
   1941e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19420:	f7ff ff42 	bl	192a8 <nrf52_errata_120>
   19424:	b118      	cbz	r0, 1942e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   19426:	4b2c      	ldr	r3, [pc, #176]	; (194d8 <SystemInit+0x19c>)
   19428:	f44f 7200 	mov.w	r2, #512	; 0x200
   1942c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1942e:	f7ff ff4f 	bl	192d0 <nrf52_errata_136>
   19432:	b160      	cbz	r0, 1944e <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19438:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1943c:	f013 0f01 	tst.w	r3, #1
   19440:	d005      	beq.n	1944e <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19446:	f06f 0201 	mvn.w	r2, #1
   1944a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1944e:	f7ff ff49 	bl	192e4 <nrf52_configuration_249>
   19452:	b138      	cbz	r0, 19464 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19454:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19458:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1945c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19460:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19464:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1946c:	2b00      	cmp	r3, #0
   1946e:	db08      	blt.n	19482 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19470:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19474:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19478:	2b00      	cmp	r3, #0
   1947a:	db02      	blt.n	19482 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1947c:	f7ff ff56 	bl	1932c <SystemCoreClockUpdate>
}
   19480:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   19482:	2001      	movs	r0, #1
   19484:	f7ff ff48 	bl	19318 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19488:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1948c:	2512      	movs	r5, #18
   1948e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   19492:	f7ff ff39 	bl	19308 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19496:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1949a:	f7ff ff35 	bl	19308 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1949e:	2000      	movs	r0, #0
   194a0:	f7ff ff3a 	bl	19318 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   194a4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   194a8:	490c      	ldr	r1, [pc, #48]	; (194dc <SystemInit+0x1a0>)
   194aa:	68ca      	ldr	r2, [r1, #12]
   194ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   194b0:	4b0b      	ldr	r3, [pc, #44]	; (194e0 <SystemInit+0x1a4>)
   194b2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   194b4:	60cb      	str	r3, [r1, #12]
   194b6:	f3bf 8f4f 	dsb	sy
    __NOP();
   194ba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   194bc:	e7fd      	b.n	194ba <SystemInit+0x17e>
   194be:	bf00      	nop
   194c0:	4000c000 	.word	0x4000c000
   194c4:	4000568c 	.word	0x4000568c
   194c8:	00038148 	.word	0x00038148
   194cc:	4000f000 	.word	0x4000f000
   194d0:	40000ee4 	.word	0x40000ee4
   194d4:	10000258 	.word	0x10000258
   194d8:	40029640 	.word	0x40029640
   194dc:	e000ed00 	.word	0xe000ed00
   194e0:	05fa0004 	.word	0x05fa0004

000194e4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   194e4:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   194e6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   194e8:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   194ec:	f1d3 031f 	rsbs	r3, r3, #31
   194f0:	d415      	bmi.n	1951e <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   194f2:	2201      	movs	r2, #1
   194f4:	409a      	lsls	r2, r3
   194f6:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   194fa:	f3bf 8f5b 	dmb	ish
   194fe:	e850 5f00 	ldrex	r5, [r0]
   19502:	42a5      	cmp	r5, r4
   19504:	d104      	bne.n	19510 <nrfx_flag32_alloc+0x2c>
   19506:	e840 2c00 	strex	ip, r2, [r0]
   1950a:	f1bc 0f00 	cmp.w	ip, #0
   1950e:	d1f6      	bne.n	194fe <nrfx_flag32_alloc+0x1a>
   19510:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19514:	d1e7      	bne.n	194e6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   19516:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   19518:	4802      	ldr	r0, [pc, #8]	; (19524 <nrfx_flag32_alloc+0x40>)
}
   1951a:	bc30      	pop	{r4, r5}
   1951c:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   1951e:	4802      	ldr	r0, [pc, #8]	; (19528 <nrfx_flag32_alloc+0x44>)
   19520:	e7fb      	b.n	1951a <nrfx_flag32_alloc+0x36>
   19522:	bf00      	nop
   19524:	0bad0000 	.word	0x0bad0000
   19528:	0bad0002 	.word	0x0bad0002

0001952c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1952c:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1952e:	6803      	ldr	r3, [r0, #0]
   19530:	460c      	mov	r4, r1
   19532:	fa23 f101 	lsr.w	r1, r3, r1
   19536:	f011 0f01 	tst.w	r1, #1
   1953a:	d114      	bne.n	19566 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1953c:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1953e:	2301      	movs	r3, #1
   19540:	40a3      	lsls	r3, r4
   19542:	4313      	orrs	r3, r2
   19544:	f3bf 8f5b 	dmb	ish
   19548:	e850 1f00 	ldrex	r1, [r0]
   1954c:	4291      	cmp	r1, r2
   1954e:	d104      	bne.n	1955a <nrfx_flag32_free+0x2e>
   19550:	e840 3c00 	strex	ip, r3, [r0]
   19554:	f1bc 0f00 	cmp.w	ip, #0
   19558:	d1f6      	bne.n	19548 <nrfx_flag32_free+0x1c>
   1955a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1955e:	d1ed      	bne.n	1953c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   19560:	4802      	ldr	r0, [pc, #8]	; (1956c <nrfx_flag32_free+0x40>)
}
   19562:	bc10      	pop	{r4}
   19564:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   19566:	4802      	ldr	r0, [pc, #8]	; (19570 <nrfx_flag32_free+0x44>)
   19568:	e7fb      	b.n	19562 <nrfx_flag32_free+0x36>
   1956a:	bf00      	nop
   1956c:	0bad0000 	.word	0x0bad0000
   19570:	0bad0004 	.word	0x0bad0004

00019574 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19574:	3008      	adds	r0, #8
   19576:	4b03      	ldr	r3, [pc, #12]	; (19584 <pin_in_use+0x10>)
   19578:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1957c:	f000 0001 	and.w	r0, r0, #1
   19580:	4770      	bx	lr
   19582:	bf00      	nop
   19584:	200008f4 	.word	0x200008f4

00019588 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19588:	3008      	adds	r0, #8
   1958a:	4b03      	ldr	r3, [pc, #12]	; (19598 <pin_in_use_by_te+0x10>)
   1958c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19590:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19594:	4770      	bx	lr
   19596:	bf00      	nop
   19598:	200008f4 	.word	0x200008f4

0001959c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1959c:	3008      	adds	r0, #8
   1959e:	4b04      	ldr	r3, [pc, #16]	; (195b0 <pin_has_trigger+0x14>)
   195a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   195a4:	f010 001c 	ands.w	r0, r0, #28
   195a8:	bf18      	it	ne
   195aa:	2001      	movne	r0, #1
   195ac:	4770      	bx	lr
   195ae:	bf00      	nop
   195b0:	200008f4 	.word	0x200008f4

000195b4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   195b4:	3008      	adds	r0, #8
   195b6:	4b03      	ldr	r3, [pc, #12]	; (195c4 <pin_is_output+0x10>)
   195b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   195bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   195c0:	4770      	bx	lr
   195c2:	bf00      	nop
   195c4:	200008f4 	.word	0x200008f4

000195c8 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   195c8:	3008      	adds	r0, #8
   195ca:	4b02      	ldr	r3, [pc, #8]	; (195d4 <pin_te_get+0xc>)
   195cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   195d0:	0b40      	lsrs	r0, r0, #13
   195d2:	4770      	bx	lr
   195d4:	200008f4 	.word	0x200008f4

000195d8 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   195d8:	2200      	movs	r2, #0
   195da:	e004      	b.n	195e6 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   195dc:	f04f 33ff 	mov.w	r3, #4294967295
   195e0:	4283      	cmp	r3, r0
   195e2:	d00f      	beq.n	19604 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   195e4:	3201      	adds	r2, #1
   195e6:	2a2f      	cmp	r2, #47	; 0x2f
   195e8:	d80a      	bhi.n	19600 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   195ea:	f102 0308 	add.w	r3, r2, #8
   195ee:	4906      	ldr	r1, [pc, #24]	; (19608 <handler_in_use+0x30>)
   195f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   195f4:	f413 7f80 	tst.w	r3, #256	; 0x100
   195f8:	d0f0      	beq.n	195dc <handler_in_use+0x4>
   195fa:	f3c3 2343 	ubfx	r3, r3, #9, #4
   195fe:	e7ef      	b.n	195e0 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   19600:	2000      	movs	r0, #0
   19602:	4770      	bx	lr
            return true;
   19604:	2001      	movs	r0, #1
}
   19606:	4770      	bx	lr
   19608:	200008f4 	.word	0x200008f4

0001960c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1960c:	2300      	movs	r3, #0
   1960e:	b113      	cbz	r3, 19616 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   19610:	f04f 30ff 	mov.w	r0, #4294967295
}
   19614:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19616:	4a07      	ldr	r2, [pc, #28]	; (19634 <find_handler+0x28>)
   19618:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1961c:	4282      	cmp	r2, r0
   1961e:	d001      	beq.n	19624 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   19620:	3301      	adds	r3, #1
   19622:	e7f4      	b.n	1960e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19624:	4a03      	ldr	r2, [pc, #12]	; (19634 <find_handler+0x28>)
   19626:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1962a:	6852      	ldr	r2, [r2, #4]
   1962c:	428a      	cmp	r2, r1
   1962e:	d1f7      	bne.n	19620 <find_handler+0x14>
            return i;
   19630:	4618      	mov	r0, r3
   19632:	4770      	bx	lr
   19634:	200008f4 	.word	0x200008f4

00019638 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19638:	3008      	adds	r0, #8
   1963a:	4b06      	ldr	r3, [pc, #24]	; (19654 <channel_handler_get+0x1c>)
   1963c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19640:	f410 7f80 	tst.w	r0, #256	; 0x100
   19644:	d004      	beq.n	19650 <channel_handler_get+0x18>
   19646:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1964a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1964e:	4770      	bx	lr
        return NULL;
   19650:	2000      	movs	r0, #0
}
   19652:	4770      	bx	lr
   19654:	200008f4 	.word	0x200008f4

00019658 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19658:	b570      	push	{r4, r5, r6, lr}
   1965a:	4604      	mov	r4, r0
   1965c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1965e:	f7ff ffeb 	bl	19638 <channel_handler_get>

    if (handler)
   19662:	b120      	cbz	r0, 1966e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   19664:	6806      	ldr	r6, [r0, #0]
   19666:	6842      	ldr	r2, [r0, #4]
   19668:	4629      	mov	r1, r5
   1966a:	4620      	mov	r0, r4
   1966c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1966e:	4b04      	ldr	r3, [pc, #16]	; (19680 <call_handler+0x28>)
   19670:	689b      	ldr	r3, [r3, #8]
   19672:	b123      	cbz	r3, 1967e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19674:	4a02      	ldr	r2, [pc, #8]	; (19680 <call_handler+0x28>)
   19676:	68d2      	ldr	r2, [r2, #12]
   19678:	4629      	mov	r1, r5
   1967a:	4620      	mov	r0, r4
   1967c:	4798      	blx	r3
    }
}
   1967e:	bd70      	pop	{r4, r5, r6, pc}
   19680:	200008f4 	.word	0x200008f4

00019684 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   19684:	b570      	push	{r4, r5, r6, lr}
   19686:	4604      	mov	r4, r0
   19688:	460d      	mov	r5, r1
   1968a:	4616      	mov	r6, r2
    if (is_level(trigger))
   1968c:	4608      	mov	r0, r1
   1968e:	f00b f8cb 	bl	24828 <is_level>
   19692:	b9d0      	cbnz	r0, 196ca <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19694:	2e02      	cmp	r6, #2
   19696:	d03e      	beq.n	19716 <next_sense_cond_call_handler+0x92>
   19698:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   1969a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1969e:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   196a0:	2901      	cmp	r1, #1
   196a2:	d03a      	beq.n	1971a <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
   196a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   196a8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   196ac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   196b0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   196b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   196b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   196bc:	2d03      	cmp	r5, #3
   196be:	d030      	beq.n	19722 <next_sense_cond_call_handler+0x9e>
   196c0:	2e02      	cmp	r6, #2
   196c2:	d02c      	beq.n	1971e <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   196c4:	2e03      	cmp	r6, #3
   196c6:	d031      	beq.n	1972c <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   196c8:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   196ca:	4629      	mov	r1, r5
   196cc:	4620      	mov	r0, r4
   196ce:	f7ff ffc3 	bl	19658 <call_handler>
    *p_pin = pin_number & 0x1F;
   196d2:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   196d6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   196d8:	2c01      	cmp	r4, #1
   196da:	d01a      	beq.n	19712 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
   196dc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   196e0:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   196e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   196e8:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   196ec:	4296      	cmp	r6, r2
   196ee:	d1eb      	bne.n	196c8 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   196f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   196f4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   196f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   196fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19700:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   19704:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19708:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1970c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   19710:	e7da      	b.n	196c8 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   19712:	4908      	ldr	r1, [pc, #32]	; (19734 <next_sense_cond_call_handler+0xb0>)
   19714:	e7e4      	b.n	196e0 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19716:	2003      	movs	r0, #3
   19718:	e7bf      	b.n	1969a <next_sense_cond_call_handler+0x16>
   1971a:	4906      	ldr	r1, [pc, #24]	; (19734 <next_sense_cond_call_handler+0xb0>)
   1971c:	e7c4      	b.n	196a8 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1971e:	2d01      	cmp	r5, #1
   19720:	d1d0      	bne.n	196c4 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   19722:	4629      	mov	r1, r5
   19724:	4620      	mov	r0, r4
   19726:	f7ff ff97 	bl	19658 <call_handler>
}
   1972a:	e7cd      	b.n	196c8 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1972c:	2d02      	cmp	r5, #2
   1972e:	d1cb      	bne.n	196c8 <next_sense_cond_call_handler+0x44>
   19730:	e7f7      	b.n	19722 <next_sense_cond_call_handler+0x9e>
   19732:	bf00      	nop
   19734:	50000300 	.word	0x50000300

00019738 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   19738:	b410      	push	{r4}
   1973a:	b083      	sub	sp, #12
   1973c:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1973e:	4b12      	ldr	r3, [pc, #72]	; (19788 <latch_pending_read_and_check+0x50>)
   19740:	e893 0003 	ldmia.w	r3, {r0, r1}
   19744:	ab02      	add	r3, sp, #8
   19746:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1974a:	4620      	mov	r0, r4
   1974c:	2300      	movs	r3, #0
   1974e:	e00b      	b.n	19768 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   19750:	aa02      	add	r2, sp, #8
   19752:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   19756:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1975a:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1975e:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   19762:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   19766:	3301      	adds	r3, #1
   19768:	2b01      	cmp	r3, #1
   1976a:	d9f1      	bls.n	19750 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1976c:	2300      	movs	r3, #0
   1976e:	2b01      	cmp	r3, #1
   19770:	d804      	bhi.n	1977c <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   19772:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   19776:	b92a      	cbnz	r2, 19784 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   19778:	3301      	adds	r3, #1
   1977a:	e7f8      	b.n	1976e <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1977c:	2000      	movs	r0, #0
}
   1977e:	b003      	add	sp, #12
   19780:	bc10      	pop	{r4}
   19782:	4770      	bx	lr
            return true;
   19784:	2001      	movs	r0, #1
   19786:	e7fa      	b.n	1977e <latch_pending_read_and_check+0x46>
   19788:	00025c54 	.word	0x00025c54

0001978c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1978c:	f100 0208 	add.w	r2, r0, #8
   19790:	4b0e      	ldr	r3, [pc, #56]	; (197cc <release_handler+0x40>)
   19792:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19796:	f413 7f80 	tst.w	r3, #256	; 0x100
   1979a:	d016      	beq.n	197ca <release_handler+0x3e>
{
   1979c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1979e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   197a2:	4610      	mov	r0, r2
   197a4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   197a8:	4a08      	ldr	r2, [pc, #32]	; (197cc <release_handler+0x40>)
   197aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   197ae:	4620      	mov	r0, r4
   197b0:	f7ff ff12 	bl	195d8 <handler_in_use>
   197b4:	b100      	cbz	r0, 197b8 <release_handler+0x2c>
}
   197b6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   197b8:	4804      	ldr	r0, [pc, #16]	; (197cc <release_handler+0x40>)
   197ba:	2300      	movs	r3, #0
   197bc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   197c0:	4621      	mov	r1, r4
   197c2:	3074      	adds	r0, #116	; 0x74
   197c4:	f7ff feb2 	bl	1952c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   197c8:	e7f5      	b.n	197b6 <release_handler+0x2a>
   197ca:	4770      	bx	lr
   197cc:	200008f4 	.word	0x200008f4

000197d0 <pin_handler_trigger_uninit>:
{
   197d0:	b510      	push	{r4, lr}
   197d2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   197d4:	f7ff fed8 	bl	19588 <pin_in_use_by_te>
   197d8:	b140      	cbz	r0, 197ec <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   197da:	4620      	mov	r0, r4
   197dc:	f7ff fef4 	bl	195c8 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   197e0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   197e4:	4b06      	ldr	r3, [pc, #24]	; (19800 <pin_handler_trigger_uninit+0x30>)
   197e6:	2200      	movs	r2, #0
   197e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   197ec:	4620      	mov	r0, r4
   197ee:	f7ff ffcd 	bl	1978c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   197f2:	3408      	adds	r4, #8
   197f4:	4b03      	ldr	r3, [pc, #12]	; (19804 <pin_handler_trigger_uninit+0x34>)
   197f6:	2200      	movs	r2, #0
   197f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   197fc:	bd10      	pop	{r4, pc}
   197fe:	bf00      	nop
   19800:	40006000 	.word	0x40006000
   19804:	200008f4 	.word	0x200008f4

00019808 <pin_handler_set>:
{
   19808:	b570      	push	{r4, r5, r6, lr}
   1980a:	b082      	sub	sp, #8
   1980c:	4606      	mov	r6, r0
   1980e:	460c      	mov	r4, r1
   19810:	4615      	mov	r5, r2
    release_handler(pin);
   19812:	f7ff ffbb 	bl	1978c <release_handler>
    if (!handler)
   19816:	b324      	cbz	r4, 19862 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   19818:	4629      	mov	r1, r5
   1981a:	4620      	mov	r0, r4
   1981c:	f7ff fef6 	bl	1960c <find_handler>
    if (handler_id < 0)
   19820:	1e03      	subs	r3, r0, #0
   19822:	db13      	blt.n	1984c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   19824:	4a10      	ldr	r2, [pc, #64]	; (19868 <pin_handler_set+0x60>)
   19826:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1982a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1982e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19830:	025b      	lsls	r3, r3, #9
   19832:	b29b      	uxth	r3, r3
   19834:	f106 0008 	add.w	r0, r6, #8
   19838:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   1983c:	430b      	orrs	r3, r1
   1983e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19842:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   19846:	4809      	ldr	r0, [pc, #36]	; (1986c <pin_handler_set+0x64>)
}
   19848:	b002      	add	sp, #8
   1984a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1984c:	f10d 0107 	add.w	r1, sp, #7
   19850:	4807      	ldr	r0, [pc, #28]	; (19870 <pin_handler_set+0x68>)
   19852:	f7ff fe47 	bl	194e4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   19856:	4b05      	ldr	r3, [pc, #20]	; (1986c <pin_handler_set+0x64>)
   19858:	4298      	cmp	r0, r3
   1985a:	d1f5      	bne.n	19848 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1985c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19860:	e7e0      	b.n	19824 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   19862:	4802      	ldr	r0, [pc, #8]	; (1986c <pin_handler_set+0x64>)
   19864:	e7f0      	b.n	19848 <pin_handler_set+0x40>
   19866:	bf00      	nop
   19868:	200008f4 	.word	0x200008f4
   1986c:	0bad0000 	.word	0x0bad0000
   19870:	20000968 	.word	0x20000968

00019874 <port_event_handle>:

static void port_event_handle(void)
{
   19874:	b570      	push	{r4, r5, r6, lr}
   19876:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   19878:	4a2c      	ldr	r2, [pc, #176]	; (1992c <port_event_handle+0xb8>)
   1987a:	466b      	mov	r3, sp
   1987c:	e892 0003 	ldmia.w	r2, {r0, r1}
   19880:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   19884:	2300      	movs	r3, #0
   19886:	a802      	add	r0, sp, #8
   19888:	e00b      	b.n	198a2 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   1988a:	aa04      	add	r2, sp, #16
   1988c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   19890:	f852 2c10 	ldr.w	r2, [r2, #-16]
   19894:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   19898:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1989c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   198a0:	3301      	adds	r3, #1
   198a2:	2b01      	cmp	r3, #1
   198a4:	d9f1      	bls.n	1988a <port_event_handle+0x16>
   198a6:	e03d      	b.n	19924 <port_event_handle+0xb0>
        case 1: return NRF_P1;
   198a8:	4e21      	ldr	r6, [pc, #132]	; (19930 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   198aa:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   198ae:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   198b2:	f3c2 4201 	ubfx	r2, r2, #16, #2
   198b6:	f7ff fee5 	bl	19684 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   198ba:	2301      	movs	r3, #1
   198bc:	40ab      	lsls	r3, r5
   198be:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   198c2:	ab04      	add	r3, sp, #16
   198c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   198c8:	f853 0c08 	ldr.w	r0, [r3, #-8]
   198cc:	b1f8      	cbz	r0, 1990e <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
   198ce:	fa90 f0a0 	rbit	r0, r0
   198d2:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   198d6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   198da:	f100 0208 	add.w	r2, r0, #8
   198de:	4b15      	ldr	r3, [pc, #84]	; (19934 <port_event_handle+0xc0>)
   198e0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   198e4:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   198e8:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   198ea:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   198ee:	ae02      	add	r6, sp, #8
   198f0:	2301      	movs	r3, #1
   198f2:	fa03 f202 	lsl.w	r2, r3, r2
   198f6:	5d73      	ldrb	r3, [r6, r5]
   198f8:	ea23 0302 	bic.w	r3, r3, r2
   198fc:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
   198fe:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   19902:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19904:	2b01      	cmp	r3, #1
   19906:	d0cf      	beq.n	198a8 <port_event_handle+0x34>
        case 0: return NRF_P0;
   19908:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1990c:	e7cd      	b.n	198aa <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1990e:	3401      	adds	r4, #1
   19910:	2c01      	cmp	r4, #1
   19912:	d9d6      	bls.n	198c2 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19914:	4b08      	ldr	r3, [pc, #32]	; (19938 <port_event_handle+0xc4>)
   19916:	2200      	movs	r2, #0
   19918:	601a      	str	r2, [r3, #0]
   1991a:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1991c:	a802      	add	r0, sp, #8
   1991e:	f7ff ff0b 	bl	19738 <latch_pending_read_and_check>
   19922:	b108      	cbz	r0, 19928 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   19924:	2400      	movs	r4, #0
   19926:	e7f3      	b.n	19910 <port_event_handle+0x9c>
}
   19928:	b004      	add	sp, #16
   1992a:	bd70      	pop	{r4, r5, r6, pc}
   1992c:	00025c54 	.word	0x00025c54
   19930:	50000300 	.word	0x50000300
   19934:	200008f4 	.word	0x200008f4
   19938:	4000617c 	.word	0x4000617c

0001993c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1993c:	b538      	push	{r3, r4, r5, lr}
   1993e:	4604      	mov	r4, r0
    while (mask)
   19940:	b1cc      	cbz	r4, 19976 <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   19942:	fa94 f3a4 	rbit	r3, r4
   19946:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1994a:	2201      	movs	r2, #1
   1994c:	409a      	lsls	r2, r3
   1994e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19952:	4a09      	ldr	r2, [pc, #36]	; (19978 <gpiote_evt_handle+0x3c>)
   19954:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   19958:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1995c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   19960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   19964:	f3c0 4001 	ubfx	r0, r0, #16, #2
   19968:	f00a ff5c 	bl	24824 <gpiote_polarity_to_trigger>
   1996c:	4601      	mov	r1, r0
   1996e:	4628      	mov	r0, r5
   19970:	f7ff fe72 	bl	19658 <call_handler>
   19974:	e7e4      	b.n	19940 <gpiote_evt_handle+0x4>
    }
}
   19976:	bd38      	pop	{r3, r4, r5, pc}
   19978:	40006000 	.word	0x40006000

0001997c <nrfx_gpiote_input_configure>:
{
   1997c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19980:	4604      	mov	r4, r0
   19982:	4615      	mov	r5, r2
   19984:	461e      	mov	r6, r3
    if (p_input_config)
   19986:	b361      	cbz	r1, 199e2 <nrfx_gpiote_input_configure+0x66>
   19988:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1998a:	f00a ff35 	bl	247f8 <pin_is_task_output>
   1998e:	2800      	cmp	r0, #0
   19990:	f040 8097 	bne.w	19ac2 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
   19994:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   19998:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1999a:	2b01      	cmp	r3, #1
   1999c:	d042      	beq.n	19a24 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
   1999e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   199a2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   199a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   199aa:	2f00      	cmp	r7, #0
   199ac:	d03c      	beq.n	19a28 <nrfx_gpiote_input_configure+0xac>
   199ae:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   199b0:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   199b4:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   199b8:	2f00      	cmp	r7, #0
   199ba:	d037      	beq.n	19a2c <nrfx_gpiote_input_configure+0xb0>
   199bc:	7839      	ldrb	r1, [r7, #0]
   199be:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   199c0:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   199c2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   199c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   199ca:	4a42      	ldr	r2, [pc, #264]	; (19ad4 <nrfx_gpiote_input_configure+0x158>)
   199cc:	f104 0108 	add.w	r1, r4, #8
   199d0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   199d4:	f023 0302 	bic.w	r3, r3, #2
   199d8:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   199da:	f043 0301 	orr.w	r3, r3, #1
   199de:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   199e2:	b1b5      	cbz	r5, 19a12 <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   199e4:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   199e8:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   199ec:	4620      	mov	r0, r4
   199ee:	f7ff fde1 	bl	195b4 <pin_is_output>
   199f2:	b1e8      	cbz	r0, 19a30 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
   199f4:	f1b9 0f00 	cmp.w	r9, #0
   199f8:	d165      	bne.n	19ac6 <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   199fa:	4b36      	ldr	r3, [pc, #216]	; (19ad4 <nrfx_gpiote_input_configure+0x158>)
   199fc:	f104 0208 	add.w	r2, r4, #8
   19a00:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   19a04:	f020 001c 	bic.w	r0, r0, #28
   19a08:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   19a0a:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   19a0e:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   19a12:	2e00      	cmp	r6, #0
   19a14:	d05b      	beq.n	19ace <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   19a16:	6872      	ldr	r2, [r6, #4]
   19a18:	6831      	ldr	r1, [r6, #0]
   19a1a:	4620      	mov	r0, r4
   19a1c:	f7ff fef4 	bl	19808 <pin_handler_set>
}
   19a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
   19a24:	482c      	ldr	r0, [pc, #176]	; (19ad8 <nrfx_gpiote_input_configure+0x15c>)
   19a26:	e7bc      	b.n	199a2 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19a28:	2100      	movs	r1, #0
   19a2a:	e7c1      	b.n	199b0 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19a2c:	2100      	movs	r1, #0
   19a2e:	e7c7      	b.n	199c0 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   19a30:	4b28      	ldr	r3, [pc, #160]	; (19ad4 <nrfx_gpiote_input_configure+0x158>)
   19a32:	f104 0208 	add.w	r2, r4, #8
   19a36:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   19a3a:	f027 0720 	bic.w	r7, r7, #32
   19a3e:	04ff      	lsls	r7, r7, #19
   19a40:	0cff      	lsrs	r7, r7, #19
   19a42:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   19a46:	f1b9 0f00 	cmp.w	r9, #0
   19a4a:	d0d6      	beq.n	199fa <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
   19a4c:	f1b8 0f03 	cmp.w	r8, #3
   19a50:	d83b      	bhi.n	19aca <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   19a52:	686b      	ldr	r3, [r5, #4]
   19a54:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   19a56:	f1b8 0f00 	cmp.w	r8, #0
   19a5a:	d106      	bne.n	19a6a <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   19a5c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   19a60:	4b1e      	ldr	r3, [pc, #120]	; (19adc <nrfx_gpiote_input_configure+0x160>)
   19a62:	2200      	movs	r2, #0
   19a64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   19a68:	e7c7      	b.n	199fa <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   19a6a:	4640      	mov	r0, r8
   19a6c:	f00a fedb 	bl	24826 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19a70:	4b1a      	ldr	r3, [pc, #104]	; (19adc <nrfx_gpiote_input_configure+0x160>)
   19a72:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   19a76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   19a7a:	f021 0103 	bic.w	r1, r1, #3
   19a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19a82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   19a86:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   19a8a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   19a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19a92:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   19a96:	0221      	lsls	r1, r4, #8
   19a98:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   19a9c:	0400      	lsls	r0, r0, #16
   19a9e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19aa2:	4301      	orrs	r1, r0
   19aa4:	ea4c 0101 	orr.w	r1, ip, r1
   19aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19aac:	036d      	lsls	r5, r5, #13
   19aae:	b2ad      	uxth	r5, r5
   19ab0:	f104 0308 	add.w	r3, r4, #8
   19ab4:	432f      	orrs	r7, r5
   19ab6:	f047 0720 	orr.w	r7, r7, #32
   19aba:	4a06      	ldr	r2, [pc, #24]	; (19ad4 <nrfx_gpiote_input_configure+0x158>)
   19abc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   19ac0:	e79b      	b.n	199fa <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
   19ac2:	4807      	ldr	r0, [pc, #28]	; (19ae0 <nrfx_gpiote_input_configure+0x164>)
   19ac4:	e7ac      	b.n	19a20 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
   19ac6:	4806      	ldr	r0, [pc, #24]	; (19ae0 <nrfx_gpiote_input_configure+0x164>)
   19ac8:	e7aa      	b.n	19a20 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
   19aca:	4805      	ldr	r0, [pc, #20]	; (19ae0 <nrfx_gpiote_input_configure+0x164>)
   19acc:	e7a8      	b.n	19a20 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
   19ace:	4805      	ldr	r0, [pc, #20]	; (19ae4 <nrfx_gpiote_input_configure+0x168>)
   19ad0:	e7a6      	b.n	19a20 <nrfx_gpiote_input_configure+0xa4>
   19ad2:	bf00      	nop
   19ad4:	200008f4 	.word	0x200008f4
   19ad8:	50000300 	.word	0x50000300
   19adc:	40006000 	.word	0x40006000
   19ae0:	0bad0004 	.word	0x0bad0004
   19ae4:	0bad0000 	.word	0x0bad0000

00019ae8 <nrfx_gpiote_output_configure>:
{
   19ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19aea:	4604      	mov	r4, r0
   19aec:	4615      	mov	r5, r2
    if (p_config)
   19aee:	2900      	cmp	r1, #0
   19af0:	d052      	beq.n	19b98 <nrfx_gpiote_output_configure+0xb0>
   19af2:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   19af4:	f00a fe8f 	bl	24816 <pin_is_input>
   19af8:	b128      	cbz	r0, 19b06 <nrfx_gpiote_output_configure+0x1e>
   19afa:	4620      	mov	r0, r4
   19afc:	f7ff fd44 	bl	19588 <pin_in_use_by_te>
   19b00:	2800      	cmp	r0, #0
   19b02:	f040 809d 	bne.w	19c40 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   19b06:	4620      	mov	r0, r4
   19b08:	f7ff fd48 	bl	1959c <pin_has_trigger>
   19b0c:	b118      	cbz	r0, 19b16 <nrfx_gpiote_output_configure+0x2e>
   19b0e:	7873      	ldrb	r3, [r6, #1]
   19b10:	2b01      	cmp	r3, #1
   19b12:	f000 8097 	beq.w	19c44 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   19b16:	f106 0c01 	add.w	ip, r6, #1
   19b1a:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   19b1c:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   19b20:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19b22:	2b01      	cmp	r3, #1
   19b24:	d07c      	beq.n	19c20 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
   19b26:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19b2a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19b2e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19b32:	f1bc 0f00 	cmp.w	ip, #0
   19b36:	d075      	beq.n	19c24 <nrfx_gpiote_output_configure+0x13c>
   19b38:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   19b3a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19b3e:	2f00      	cmp	r7, #0
   19b40:	d072      	beq.n	19c28 <nrfx_gpiote_output_configure+0x140>
   19b42:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19b46:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   19b4a:	2e00      	cmp	r6, #0
   19b4c:	d06f      	beq.n	19c2e <nrfx_gpiote_output_configure+0x146>
   19b4e:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19b52:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   19b56:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   19b5a:	f1bc 0f00 	cmp.w	ip, #0
   19b5e:	d069      	beq.n	19c34 <nrfx_gpiote_output_configure+0x14c>
   19b60:	7873      	ldrb	r3, [r6, #1]
   19b62:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19b64:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19b68:	2f00      	cmp	r7, #0
   19b6a:	d065      	beq.n	19c38 <nrfx_gpiote_output_configure+0x150>
   19b6c:	78b7      	ldrb	r7, [r6, #2]
   19b6e:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   19b70:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   19b72:	2e00      	cmp	r6, #0
   19b74:	d062      	beq.n	19c3c <nrfx_gpiote_output_configure+0x154>
   19b76:	7836      	ldrb	r6, [r6, #0]
   19b78:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19b7a:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19b7c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   19b7e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   19b82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   19b86:	4a33      	ldr	r2, [pc, #204]	; (19c54 <nrfx_gpiote_output_configure+0x16c>)
   19b88:	f104 0108 	add.w	r1, r4, #8
   19b8c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   19b90:	f043 0303 	orr.w	r3, r3, #3
   19b94:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   19b98:	2d00      	cmp	r5, #0
   19b9a:	d055      	beq.n	19c48 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
   19b9c:	4620      	mov	r0, r4
   19b9e:	f00a fe3a 	bl	24816 <pin_is_input>
   19ba2:	2800      	cmp	r0, #0
   19ba4:	d152      	bne.n	19c4c <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
   19ba6:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   19ba8:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   19bac:	4b2a      	ldr	r3, [pc, #168]	; (19c58 <nrfx_gpiote_output_configure+0x170>)
   19bae:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   19bb2:	4928      	ldr	r1, [pc, #160]	; (19c54 <nrfx_gpiote_output_configure+0x16c>)
   19bb4:	f104 0008 	add.w	r0, r4, #8
   19bb8:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   19bbc:	f023 0320 	bic.w	r3, r3, #32
   19bc0:	04db      	lsls	r3, r3, #19
   19bc2:	0cdb      	lsrs	r3, r3, #19
   19bc4:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19bc8:	7869      	ldrb	r1, [r5, #1]
   19bca:	2900      	cmp	r1, #0
   19bcc:	d040      	beq.n	19c50 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   19bce:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   19bd2:	4d21      	ldr	r5, [pc, #132]	; (19c58 <nrfx_gpiote_output_configure+0x170>)
   19bd4:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   19bd8:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   19bdc:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   19be0:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   19be4:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19be8:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   19bec:	0220      	lsls	r0, r4, #8
   19bee:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19bf2:	0409      	lsls	r1, r1, #16
   19bf4:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19bf8:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   19bfa:	ea4f 500c 	mov.w	r0, ip, lsl #20
   19bfe:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19c02:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19c04:	4339      	orrs	r1, r7
   19c06:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19c0a:	0352      	lsls	r2, r2, #13
   19c0c:	b292      	uxth	r2, r2
   19c0e:	3408      	adds	r4, #8
   19c10:	431a      	orrs	r2, r3
   19c12:	f042 0220 	orr.w	r2, r2, #32
   19c16:	4b0f      	ldr	r3, [pc, #60]	; (19c54 <nrfx_gpiote_output_configure+0x16c>)
   19c18:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   19c1c:	480f      	ldr	r0, [pc, #60]	; (19c5c <nrfx_gpiote_output_configure+0x174>)
   19c1e:	e014      	b.n	19c4a <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
   19c20:	490f      	ldr	r1, [pc, #60]	; (19c60 <nrfx_gpiote_output_configure+0x178>)
   19c22:	e782      	b.n	19b2a <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   19c24:	2300      	movs	r3, #0
   19c26:	e788      	b.n	19b3a <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   19c28:	f04f 0e00 	mov.w	lr, #0
   19c2c:	e78b      	b.n	19b46 <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   19c2e:	f04f 0e00 	mov.w	lr, #0
   19c32:	e78e      	b.n	19b52 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   19c34:	2300      	movs	r3, #0
   19c36:	e795      	b.n	19b64 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   19c38:	2700      	movs	r7, #0
   19c3a:	e799      	b.n	19b70 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   19c3c:	2600      	movs	r6, #0
   19c3e:	e79c      	b.n	19b7a <nrfx_gpiote_output_configure+0x92>
   19c40:	4808      	ldr	r0, [pc, #32]	; (19c64 <nrfx_gpiote_output_configure+0x17c>)
   19c42:	e002      	b.n	19c4a <nrfx_gpiote_output_configure+0x162>
   19c44:	4807      	ldr	r0, [pc, #28]	; (19c64 <nrfx_gpiote_output_configure+0x17c>)
   19c46:	e000      	b.n	19c4a <nrfx_gpiote_output_configure+0x162>
   19c48:	4804      	ldr	r0, [pc, #16]	; (19c5c <nrfx_gpiote_output_configure+0x174>)
}
   19c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   19c4c:	4805      	ldr	r0, [pc, #20]	; (19c64 <nrfx_gpiote_output_configure+0x17c>)
   19c4e:	e7fc      	b.n	19c4a <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
   19c50:	4802      	ldr	r0, [pc, #8]	; (19c5c <nrfx_gpiote_output_configure+0x174>)
   19c52:	e7fa      	b.n	19c4a <nrfx_gpiote_output_configure+0x162>
   19c54:	200008f4 	.word	0x200008f4
   19c58:	40006000 	.word	0x40006000
   19c5c:	0bad0000 	.word	0x0bad0000
   19c60:	50000300 	.word	0x50000300
   19c64:	0bad0004 	.word	0x0bad0004

00019c68 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   19c68:	4b01      	ldr	r3, [pc, #4]	; (19c70 <nrfx_gpiote_global_callback_set+0x8>)
   19c6a:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   19c6c:	60d9      	str	r1, [r3, #12]
}
   19c6e:	4770      	bx	lr
   19c70:	200008f4 	.word	0x200008f4

00019c74 <nrfx_gpiote_channel_get>:
{
   19c74:	b538      	push	{r3, r4, r5, lr}
   19c76:	4604      	mov	r4, r0
   19c78:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   19c7a:	f7ff fc85 	bl	19588 <pin_in_use_by_te>
   19c7e:	b140      	cbz	r0, 19c92 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19c80:	f104 0008 	add.w	r0, r4, #8
   19c84:	4b04      	ldr	r3, [pc, #16]	; (19c98 <nrfx_gpiote_channel_get+0x24>)
   19c86:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   19c8a:	0b5b      	lsrs	r3, r3, #13
   19c8c:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   19c8e:	4803      	ldr	r0, [pc, #12]	; (19c9c <nrfx_gpiote_channel_get+0x28>)
}
   19c90:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19c92:	4803      	ldr	r0, [pc, #12]	; (19ca0 <nrfx_gpiote_channel_get+0x2c>)
   19c94:	e7fc      	b.n	19c90 <nrfx_gpiote_channel_get+0x1c>
   19c96:	bf00      	nop
   19c98:	200008f4 	.word	0x200008f4
   19c9c:	0bad0000 	.word	0x0bad0000
   19ca0:	0bad0004 	.word	0x0bad0004

00019ca4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19ca4:	4b0f      	ldr	r3, [pc, #60]	; (19ce4 <nrfx_gpiote_init+0x40>)
   19ca6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   19caa:	b10b      	cbz	r3, 19cb0 <nrfx_gpiote_init+0xc>
        return err_code;
   19cac:	480e      	ldr	r0, [pc, #56]	; (19ce8 <nrfx_gpiote_init+0x44>)
}
   19cae:	4770      	bx	lr
{
   19cb0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   19cb2:	4c0c      	ldr	r4, [pc, #48]	; (19ce4 <nrfx_gpiote_init+0x40>)
   19cb4:	2260      	movs	r2, #96	; 0x60
   19cb6:	2100      	movs	r1, #0
   19cb8:	f104 0010 	add.w	r0, r4, #16
   19cbc:	f00b fd6e 	bl	2579c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   19cc0:	2006      	movs	r0, #6
   19cc2:	f7f9 fe59 	bl	13978 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19cc6:	4b09      	ldr	r3, [pc, #36]	; (19cec <nrfx_gpiote_init+0x48>)
   19cc8:	2200      	movs	r2, #0
   19cca:	601a      	str	r2, [r3, #0]
   19ccc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   19cce:	4b08      	ldr	r3, [pc, #32]	; (19cf0 <nrfx_gpiote_init+0x4c>)
   19cd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19cd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19cd8:	2301      	movs	r3, #1
   19cda:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   19cde:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
   19ce0:	4804      	ldr	r0, [pc, #16]	; (19cf4 <nrfx_gpiote_init+0x50>)
}
   19ce2:	bd10      	pop	{r4, pc}
   19ce4:	200008f4 	.word	0x200008f4
   19ce8:	0bad0005 	.word	0x0bad0005
   19cec:	4000617c 	.word	0x4000617c
   19cf0:	40006000 	.word	0x40006000
   19cf4:	0bad0000 	.word	0x0bad0000

00019cf8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   19cf8:	4b03      	ldr	r3, [pc, #12]	; (19d08 <nrfx_gpiote_is_init+0x10>)
   19cfa:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   19cfe:	3800      	subs	r0, #0
   19d00:	bf18      	it	ne
   19d02:	2001      	movne	r0, #1
   19d04:	4770      	bx	lr
   19d06:	bf00      	nop
   19d08:	200008f4 	.word	0x200008f4

00019d0c <nrfx_gpiote_channel_free>:
{
   19d0c:	b508      	push	{r3, lr}
   19d0e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   19d10:	4801      	ldr	r0, [pc, #4]	; (19d18 <nrfx_gpiote_channel_free+0xc>)
   19d12:	f7ff fc0b 	bl	1952c <nrfx_flag32_free>
}
   19d16:	bd08      	pop	{r3, pc}
   19d18:	20000964 	.word	0x20000964

00019d1c <nrfx_gpiote_channel_alloc>:
{
   19d1c:	b508      	push	{r3, lr}
   19d1e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   19d20:	4801      	ldr	r0, [pc, #4]	; (19d28 <nrfx_gpiote_channel_alloc+0xc>)
   19d22:	f7ff fbdf 	bl	194e4 <nrfx_flag32_alloc>
}
   19d26:	bd08      	pop	{r3, pc}
   19d28:	20000964 	.word	0x20000964

00019d2c <nrfx_gpiote_trigger_enable>:
{
   19d2c:	b538      	push	{r3, r4, r5, lr}
   19d2e:	4604      	mov	r4, r0
   19d30:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19d32:	f7ff fc29 	bl	19588 <pin_in_use_by_te>
   19d36:	b308      	cbz	r0, 19d7c <nrfx_gpiote_trigger_enable+0x50>
   19d38:	4620      	mov	r0, r4
   19d3a:	f00a fd6c 	bl	24816 <pin_is_input>
   19d3e:	b1e8      	cbz	r0, 19d7c <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   19d40:	4620      	mov	r0, r4
   19d42:	f7ff fc41 	bl	195c8 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   19d46:	0083      	lsls	r3, r0, #2
   19d48:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   19d4c:	b29b      	uxth	r3, r3
   19d4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19d52:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19d56:	2200      	movs	r2, #0
   19d58:	601a      	str	r2, [r3, #0]
   19d5a:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19d5c:	4a22      	ldr	r2, [pc, #136]	; (19de8 <nrfx_gpiote_trigger_enable+0xbc>)
   19d5e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   19d62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   19d66:	f043 0301 	orr.w	r3, r3, #1
   19d6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   19d6e:	b39d      	cbz	r5, 19dd8 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19d70:	2301      	movs	r3, #1
   19d72:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   19d76:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   19d7a:	e02d      	b.n	19dd8 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19d7c:	f104 0308 	add.w	r3, r4, #8
   19d80:	4a1a      	ldr	r2, [pc, #104]	; (19dec <nrfx_gpiote_trigger_enable+0xc0>)
   19d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   19d86:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   19d8a:	2b04      	cmp	r3, #4
   19d8c:	d012      	beq.n	19db4 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19d8e:	2b05      	cmp	r3, #5
   19d90:	d023      	beq.n	19dda <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   19d92:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   19d96:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19d98:	2b01      	cmp	r3, #1
   19d9a:	d009      	beq.n	19db0 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   19d9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   19da0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19da4:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19da6:	f013 0f01 	tst.w	r3, #1
   19daa:	d018      	beq.n	19dde <nrfx_gpiote_trigger_enable+0xb2>
   19dac:	2003      	movs	r0, #3
   19dae:	e002      	b.n	19db6 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   19db0:	4b0f      	ldr	r3, [pc, #60]	; (19df0 <nrfx_gpiote_trigger_enable+0xc4>)
   19db2:	e7f5      	b.n	19da0 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   19db4:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   19db6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   19dba:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19dbc:	2c01      	cmp	r4, #1
   19dbe:	d010      	beq.n	19de2 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   19dc0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19dc4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   19dc8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   19dcc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   19dd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   19dd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   19dd8:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   19dda:	2002      	movs	r0, #2
   19ddc:	e7eb      	b.n	19db6 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19dde:	2002      	movs	r0, #2
   19de0:	e7e9      	b.n	19db6 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   19de2:	4903      	ldr	r1, [pc, #12]	; (19df0 <nrfx_gpiote_trigger_enable+0xc4>)
   19de4:	e7ee      	b.n	19dc4 <nrfx_gpiote_trigger_enable+0x98>
   19de6:	bf00      	nop
   19de8:	40006000 	.word	0x40006000
   19dec:	200008f4 	.word	0x200008f4
   19df0:	50000300 	.word	0x50000300

00019df4 <nrfx_gpiote_trigger_disable>:
{
   19df4:	b510      	push	{r4, lr}
   19df6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19df8:	f7ff fbc6 	bl	19588 <pin_in_use_by_te>
   19dfc:	b1a0      	cbz	r0, 19e28 <nrfx_gpiote_trigger_disable+0x34>
   19dfe:	4620      	mov	r0, r4
   19e00:	f00a fd09 	bl	24816 <pin_is_input>
   19e04:	b180      	cbz	r0, 19e28 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   19e06:	4620      	mov	r0, r4
   19e08:	f7ff fbde 	bl	195c8 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   19e0c:	2201      	movs	r2, #1
   19e0e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   19e10:	4b0e      	ldr	r3, [pc, #56]	; (19e4c <nrfx_gpiote_trigger_disable+0x58>)
   19e12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19e16:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   19e1a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   19e1e:	f022 0203 	bic.w	r2, r2, #3
   19e22:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   19e26:	e00e      	b.n	19e46 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   19e28:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   19e2c:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19e2e:	2c01      	cmp	r4, #1
   19e30:	d00a      	beq.n	19e48 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   19e32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   19e36:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19e3a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   19e3e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   19e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   19e46:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   19e48:	4901      	ldr	r1, [pc, #4]	; (19e50 <nrfx_gpiote_trigger_disable+0x5c>)
   19e4a:	e7f4      	b.n	19e36 <nrfx_gpiote_trigger_disable+0x42>
   19e4c:	40006000 	.word	0x40006000
   19e50:	50000300 	.word	0x50000300

00019e54 <nrfx_gpiote_pin_uninit>:
{
   19e54:	b510      	push	{r4, lr}
   19e56:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   19e58:	f7ff fb8c 	bl	19574 <pin_in_use>
   19e5c:	b908      	cbnz	r0, 19e62 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   19e5e:	480c      	ldr	r0, [pc, #48]	; (19e90 <nrfx_gpiote_pin_uninit+0x3c>)
}
   19e60:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   19e62:	4620      	mov	r0, r4
   19e64:	f7ff ffc6 	bl	19df4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   19e68:	4620      	mov	r0, r4
   19e6a:	f7ff fcb1 	bl	197d0 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   19e6e:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   19e72:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19e74:	2c01      	cmp	r4, #1
   19e76:	d008      	beq.n	19e8a <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   19e78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19e7c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19e80:	2102      	movs	r1, #2
   19e82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   19e86:	4803      	ldr	r0, [pc, #12]	; (19e94 <nrfx_gpiote_pin_uninit+0x40>)
   19e88:	e7ea      	b.n	19e60 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   19e8a:	4a03      	ldr	r2, [pc, #12]	; (19e98 <nrfx_gpiote_pin_uninit+0x44>)
   19e8c:	e7f6      	b.n	19e7c <nrfx_gpiote_pin_uninit+0x28>
   19e8e:	bf00      	nop
   19e90:	0bad0004 	.word	0x0bad0004
   19e94:	0bad0000 	.word	0x0bad0000
   19e98:	50000300 	.word	0x50000300

00019e9c <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   19e9c:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19e9e:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   19ea0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19ea4:	2100      	movs	r1, #0
    uint32_t status = 0;
   19ea6:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19ea8:	e003      	b.n	19eb2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   19eaa:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   19eac:	3304      	adds	r3, #4
   19eae:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19eb0:	3101      	adds	r1, #1
   19eb2:	2907      	cmp	r1, #7
   19eb4:	d814      	bhi.n	19ee0 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19eb6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   19eba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   19ebe:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   19ec0:	2a00      	cmp	r2, #0
   19ec2:	d0f2      	beq.n	19eaa <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   19ec4:	4a0b      	ldr	r2, [pc, #44]	; (19ef4 <nrfx_gpiote_irq_handler+0x58>)
   19ec6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19eca:	4210      	tst	r0, r2
   19ecc:	d0ed      	beq.n	19eaa <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   19ece:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   19ed2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19ed6:	2400      	movs	r4, #0
   19ed8:	6014      	str	r4, [r2, #0]
   19eda:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   19edc:	4305      	orrs	r5, r0
   19ede:	e7e4      	b.n	19eaa <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ee0:	4b05      	ldr	r3, [pc, #20]	; (19ef8 <nrfx_gpiote_irq_handler+0x5c>)
   19ee2:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   19ee4:	b91b      	cbnz	r3, 19eee <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   19ee6:	4628      	mov	r0, r5
   19ee8:	f7ff fd28 	bl	1993c <gpiote_evt_handle>
}
   19eec:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   19eee:	f7ff fcc1 	bl	19874 <port_event_handle>
   19ef2:	e7f8      	b.n	19ee6 <nrfx_gpiote_irq_handler+0x4a>
   19ef4:	40006000 	.word	0x40006000
   19ef8:	4000617c 	.word	0x4000617c

00019efc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   19efc:	b508      	push	{r3, lr}
   19efe:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   19f00:	4801      	ldr	r0, [pc, #4]	; (19f08 <nrfx_ppi_channel_alloc+0xc>)
   19f02:	f7ff faef 	bl	194e4 <nrfx_flag32_alloc>
}
   19f06:	bd08      	pop	{r3, pc}
   19f08:	20000970 	.word	0x20000970

00019f0c <twi_process_error>:
} twim_control_block_t;

static twim_control_block_t m_cb[NRFX_TWIM_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
   19f0c:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   19f0e:	f010 0f01 	tst.w	r0, #1
   19f12:	d108      	bne.n	19f26 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   19f14:	4806      	ldr	r0, [pc, #24]	; (19f30 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   19f16:	f013 0f02 	tst.w	r3, #2
   19f1a:	d000      	beq.n	19f1e <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   19f1c:	4805      	ldr	r0, [pc, #20]	; (19f34 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   19f1e:	f013 0f04 	tst.w	r3, #4
   19f22:	d102      	bne.n	19f2a <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   19f24:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   19f26:	4804      	ldr	r0, [pc, #16]	; (19f38 <twi_process_error+0x2c>)
   19f28:	e7f5      	b.n	19f16 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   19f2a:	4804      	ldr	r0, [pc, #16]	; (19f3c <twi_process_error+0x30>)
    return ret;
   19f2c:	e7fa      	b.n	19f24 <twi_process_error+0x18>
   19f2e:	bf00      	nop
   19f30:	0bad0001 	.word	0x0bad0001
   19f34:	0bae0001 	.word	0x0bae0001
   19f38:	0bae0000 	.word	0x0bae0000
   19f3c:	0bae0002 	.word	0x0bae0002

00019f40 <twim_pins_configure>:
static bool twim_pins_configure(NRF_TWIM_Type * p_twim, nrfx_twim_config_t const * p_config)
{
    // If both GPIO configuration and pin selection are to be skipped,
    // the pin numbers may be not specified at all, so even validation
    // of those numbers cannot be performed.
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   19f40:	7b8b      	ldrb	r3, [r1, #14]
   19f42:	b10b      	cbz	r3, 19f48 <twim_pins_configure+0x8>
   19f44:	7bca      	ldrb	r2, [r1, #15]
   19f46:	bba2      	cbnz	r2, 19fb2 <twim_pins_configure+0x72>

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    if (!p_config->skip_gpio_cfg)
   19f48:	bb5b      	cbnz	r3, 19fa2 <twim_pins_configure+0x62>
{
   19f4a:	b410      	push	{r4}
    {
        TWIM_PIN_INIT(p_config->scl, drive);
   19f4c:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   19f4e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19f52:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19f54:	2b01      	cmp	r3, #1
   19f56:	d020      	beq.n	19f9a <twim_pins_configure+0x5a>
        case 0: return NRF_P0;
   19f58:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19f5c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19f60:	f240 620c 	movw	r2, #1548	; 0x60c
   19f64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   19f68:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
   19f6a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19f6e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19f70:	2b01      	cmp	r3, #1
   19f72:	d014      	beq.n	19f9e <twim_pins_configure+0x5e>
        case 0: return NRF_P0;
   19f74:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19f78:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19f7c:	f240 620c 	movw	r2, #1548	; 0x60c
   19f80:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    }

    if (!p_config->skip_psel_cfg)
   19f84:	7bcb      	ldrb	r3, [r1, #15]
   19f86:	b92b      	cbnz	r3, 19f94 <twim_pins_configure+0x54>
    {
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   19f88:	680a      	ldr	r2, [r1, #0]
   19f8a:	684b      	ldr	r3, [r1, #4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   19f8c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   19f90:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    }

    return true;
}
   19f94:	2001      	movs	r0, #1
   19f96:	bc10      	pop	{r4}
   19f98:	4770      	bx	lr
        case 1: return NRF_P1;
   19f9a:	4c07      	ldr	r4, [pc, #28]	; (19fb8 <twim_pins_configure+0x78>)
   19f9c:	e7de      	b.n	19f5c <twim_pins_configure+0x1c>
   19f9e:	4c06      	ldr	r4, [pc, #24]	; (19fb8 <twim_pins_configure+0x78>)
   19fa0:	e7ea      	b.n	19f78 <twim_pins_configure+0x38>
    if (!p_config->skip_psel_cfg)
   19fa2:	7bcb      	ldrb	r3, [r1, #15]
   19fa4:	b92b      	cbnz	r3, 19fb2 <twim_pins_configure+0x72>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   19fa6:	680a      	ldr	r2, [r1, #0]
   19fa8:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
   19faa:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   19fae:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   19fb2:	2001      	movs	r0, #1
   19fb4:	4770      	bx	lr
   19fb6:	bf00      	nop
   19fb8:	50000300 	.word	0x50000300

00019fbc <twim_xfer>:
}
static nrfx_err_t twim_xfer(twim_control_block_t        * p_cb,
                            NRF_TWIM_Type               * p_twim,
                            nrfx_twim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   19fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19fc0:	4605      	mov	r5, r0
   19fc2:	460c      	mov	r4, r1
   19fc4:	4616      	mov	r6, r2
   19fc6:	461f      	mov	r7, r3
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    p_cb->error = false;
   19fc8:	2300      	movs	r3, #0
   19fca:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e

    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19fce:	6853      	ldr	r3, [r2, #4]
   19fd0:	b133      	cbz	r3, 19fe0 <twim_xfer+0x24>
   19fd2:	68d3      	ldr	r3, [r2, #12]
   19fd4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   19fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   19fdc:	f040 8131 	bne.w	1a242 <twim_xfer+0x286>
    p_reg->INTENCLR = mask;
   19fe0:	4b9c      	ldr	r3, [pc, #624]	; (1a254 <twim_xfer+0x298>)
   19fe2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    if (p_cb->busy)
   19fe6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   19fea:	f003 08ff 	and.w	r8, r3, #255	; 0xff
   19fee:	2b00      	cmp	r3, #0
   19ff0:	d136      	bne.n	1a060 <twim_xfer+0xa4>
        return err_code;
    }
    else
    {
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   19ff2:	f017 0f14 	tst.w	r7, #20
   19ff6:	bf0c      	ite	eq
   19ff8:	2301      	moveq	r3, #1
   19ffa:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   19ffc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    p_cb->xfer_desc = *p_xfer_desc;
   1a000:	f105 0c0c 	add.w	ip, r5, #12
   1a004:	46b6      	mov	lr, r6
   1a006:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1a00a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1a00e:	f8de 3000 	ldr.w	r3, [lr]
   1a012:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1a016:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1a01a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags = flags;
   1a01e:	622f      	str	r7, [r5, #32]
    nrf_twim_address_set(p_twim, p_xfer_desc->address);
   1a020:	7873      	ldrb	r3, [r6, #1]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   1a022:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a026:	2300      	movs	r3, #0
   1a028:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1a02c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   1a030:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a034:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a038:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   1a03c:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
   1a040:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1a044:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
    nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_SUSPENDED);

    twim_list_enable_handle(p_twim, flags);
   1a048:	4639      	mov	r1, r7
   1a04a:	4620      	mov	r0, r4
   1a04c:	f00a fc32 	bl	248b4 <twim_list_enable_handle>
    switch (p_xfer_desc->type)
   1a050:	7833      	ldrb	r3, [r6, #0]
   1a052:	2b03      	cmp	r3, #3
   1a054:	f200 80a8 	bhi.w	1a1a8 <twim_xfer+0x1ec>
   1a058:	e8df f003 	tbb	[pc, r3]
   1a05c:	08379455 	.word	0x08379455
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a060:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   1a062:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1a066:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 1a258 <twim_xfer+0x29c>
   1a06a:	e081      	b.n	1a170 <twim_xfer+0x1b4>
    {
    case NRFX_TWIM_XFER_TXTX:
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a06c:	6933      	ldr	r3, [r6, #16]
   1a06e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1a072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a076:	f040 80e7 	bne.w	1a248 <twim_xfer+0x28c>
}

NRF_STATIC_INLINE void nrf_twim_shorts_set(NRF_TWIM_Type * p_reg,
                                           uint32_t mask)
{
    p_reg->SHORTS = mask;
   1a07a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a07e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a082:	68f2      	ldr	r2, [r6, #12]
   1a084:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a086:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a08a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a08e:	2300      	movs	r3, #0
   1a090:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1a094:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a098:	2301      	movs	r3, #1
   1a09a:	6223      	str	r3, [r4, #32]
   1a09c:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a09e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STARTTX);
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1a0a2:	2b00      	cmp	r3, #0
   1a0a4:	d0fb      	beq.n	1a09e <twim_xfer+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a0a6:	2300      	movs	r3, #0
   1a0a8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   1a0ac:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        {}
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_TXSTARTED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_TXSTARTED);
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a0b0:	6932      	ldr	r2, [r6, #16]
   1a0b2:	68b3      	ldr	r3, [r6, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a0b4:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a0b8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a0bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a0c0:	60ab      	str	r3, [r5, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1a0c2:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a0c4:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1a25c <twim_xfer+0x2a0>
        break;
   1a0c8:	e032      	b.n	1a130 <twim_xfer+0x174>
    case NRFX_TWIM_XFER_TXRX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a0ca:	68f2      	ldr	r2, [r6, #12]
   1a0cc:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a0ce:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a0d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a0d6:	6933      	ldr	r3, [r6, #16]
   1a0d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
   1a0dc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   1a0e0:	f040 80b5 	bne.w	1a24e <twim_xfer+0x292>
            NRFX_LOG_WARNING("Function: %s, error code: %s.",
                             __func__,
                             NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
        }
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a0e4:	68b2      	ldr	r2, [r6, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a0e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a0ea:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a0ee:	f44f 5384 	mov.w	r3, #4224	; 0x1080
   1a0f2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_STARTRX_MASK |
                                    NRF_TWIM_SHORT_LASTRX_STOP_MASK);
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a0f6:	2302      	movs	r3, #2
   1a0f8:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a0fa:	2301      	movs	r3, #1
   1a0fc:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1a0fe:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a100:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1a25c <twim_xfer+0x2a0>
}
   1a104:	e014      	b.n	1a130 <twim_xfer+0x174>
        nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
        break;
    case NRFX_TWIM_XFER_TX:
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a106:	68f2      	ldr	r2, [r6, #12]
   1a108:	6873      	ldr	r3, [r6, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a10a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a10e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1a112:	f017 0f20 	tst.w	r7, #32
   1a116:	d02e      	beq.n	1a176 <twim_xfer+0x1ba>
    p_reg->SHORTS = mask;
   1a118:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a11c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        {
            nrf_twim_shorts_set(p_twim, NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK);
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a124:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a126:	2301      	movs	r3, #1
   1a128:	6223      	str	r3, [r4, #32]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1a12a:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a12c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1a25c <twim_xfer+0x2a0>
    default:
        err_code = NRFX_ERROR_INVALID_PARAM;
        break;
    }

    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1a130:	f017 0f08 	tst.w	r7, #8
   1a134:	d107      	bne.n	1a146 <twim_xfer+0x18a>
   1a136:	7832      	ldrb	r2, [r6, #0]
   1a138:	2a03      	cmp	r2, #3
   1a13a:	d004      	beq.n	1a146 <twim_xfer+0x18a>
   1a13c:	2201      	movs	r2, #1
   1a13e:	50e2      	str	r2, [r4, r3]
    {
        nrf_twim_task_trigger(p_twim, start_task);
        if (p_xfer_desc->primary_length == 0)
   1a140:	6873      	ldr	r3, [r6, #4]
   1a142:	b903      	cbnz	r3, 1a146 <twim_xfer+0x18a>
   1a144:	6162      	str	r2, [r4, #20]
        {
            nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
        }
    }

    if (p_cb->handler)
   1a146:	682b      	ldr	r3, [r5, #0]
   1a148:	b393      	cbz	r3, 1a1b0 <twim_xfer+0x1f4>
    {
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1a14a:	f017 0f04 	tst.w	r7, #4
   1a14e:	d001      	beq.n	1a154 <twim_xfer+0x198>
        {
            p_cb->int_mask = 0;
   1a150:	2300      	movs	r3, #0
   1a152:	60ab      	str	r3, [r5, #8]
        }

        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1a154:	f017 0f40 	tst.w	r7, #64	; 0x40
   1a158:	d103      	bne.n	1a162 <twim_xfer+0x1a6>
        {
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1a15a:	68ab      	ldr	r3, [r5, #8]
   1a15c:	f043 0302 	orr.w	r3, r3, #2
   1a160:	60ab      	str	r3, [r5, #8]
        }

        // Interrupts for ERROR are implicitly enabled, regardless of driver configuration.
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1a162:	68ab      	ldr	r3, [r5, #8]
   1a164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a168:	60ab      	str	r3, [r5, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a16a:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   1a16c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
                err_code = NRFX_ERROR_INTERNAL;
            }
        }
    }
    return err_code;
}
   1a170:	4648      	mov	r0, r9
   1a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p_reg->SHORTS = mask;
   1a176:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a17a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a17e:	2302      	movs	r3, #2
   1a180:	60ab      	str	r3, [r5, #8]
   1a182:	e7d0      	b.n	1a126 <twim_xfer+0x16a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a184:	68f2      	ldr	r2, [r6, #12]
   1a186:	6873      	ldr	r3, [r6, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a188:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a18c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a194:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a198:	2302      	movs	r3, #2
   1a19a:	60ab      	str	r3, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a19c:	2301      	movs	r3, #1
   1a19e:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   1a1a0:	2300      	movs	r3, #0
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a1a2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1a25c <twim_xfer+0x2a0>
}
   1a1a6:	e7c3      	b.n	1a130 <twim_xfer+0x174>
    switch (p_xfer_desc->type)
   1a1a8:	2308      	movs	r3, #8
   1a1aa:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1a260 <twim_xfer+0x2a4>
   1a1ae:	e7bf      	b.n	1a130 <twim_xfer+0x174>
        bool transmission_finished = false;
   1a1b0:	4643      	mov	r3, r8
   1a1b2:	e000      	b.n	1a1b6 <twim_xfer+0x1fa>
        } while (!transmission_finished);
   1a1b4:	bb6b      	cbnz	r3, 1a212 <twim_xfer+0x256>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a1b6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1a1ba:	b102      	cbz	r2, 1a1be <twim_xfer+0x202>
                transmission_finished = true;
   1a1bc:	2301      	movs	r3, #1
   1a1be:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a1c2:	b12a      	cbz	r2, 1a1d0 <twim_xfer+0x214>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a1c4:	2300      	movs	r3, #0
   1a1c6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1a1ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   1a1ce:	2301      	movs	r3, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a1d0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a1d4:	2a00      	cmp	r2, #0
   1a1d6:	d0ed      	beq.n	1a1b4 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a1d8:	2200      	movs	r2, #0
   1a1da:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a1de:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a1e2:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   1a1e6:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1a1ea:	b112      	cbz	r2, 1a1f2 <twim_xfer+0x236>
   1a1ec:	f411 7f00 	tst.w	r1, #512	; 0x200
   1a1f0:	d103      	bne.n	1a1fa <twim_xfer+0x23e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a1f2:	2301      	movs	r3, #1
   1a1f4:	6223      	str	r3, [r4, #32]
   1a1f6:	6163      	str	r3, [r4, #20]
                    transmission_finished = false;
   1a1f8:	4643      	mov	r3, r8
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a1fa:	2a00      	cmp	r2, #0
   1a1fc:	d0da      	beq.n	1a1b4 <twim_xfer+0x1f8>
   1a1fe:	f411 7f80 	tst.w	r1, #256	; 0x100
   1a202:	d0d7      	beq.n	1a1b4 <twim_xfer+0x1f8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a204:	2300      	movs	r3, #0
   1a206:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1a20a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
                    transmission_finished = false;
   1a20e:	4643      	mov	r3, r8
   1a210:	e7d1      	b.n	1a1b6 <twim_xfer+0x1fa>
    uint32_t error_source = p_reg->ERRORSRC;
   1a212:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a216:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        p_cb->busy = false;
   1a21a:	2300      	movs	r3, #0
   1a21c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
        if (errorsrc)
   1a220:	b118      	cbz	r0, 1a22a <twim_xfer+0x26e>
            err_code = twi_process_error(errorsrc);
   1a222:	f7ff fe73 	bl	19f0c <twi_process_error>
   1a226:	4681      	mov	r9, r0
   1a228:	e7a2      	b.n	1a170 <twim_xfer+0x1b4>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1a22a:	f017 0f40 	tst.w	r7, #64	; 0x40
   1a22e:	d19f      	bne.n	1a170 <twim_xfer+0x1b4>
                !xfer_completeness_check(p_twim, p_cb))
   1a230:	4629      	mov	r1, r5
   1a232:	4620      	mov	r0, r4
   1a234:	f00a fafd 	bl	24832 <xfer_completeness_check>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1a238:	2800      	cmp	r0, #0
   1a23a:	d199      	bne.n	1a170 <twim_xfer+0x1b4>
                err_code = NRFX_ERROR_INTERNAL;
   1a23c:	f8df 9024 	ldr.w	r9, [pc, #36]	; 1a264 <twim_xfer+0x2a8>
   1a240:	e796      	b.n	1a170 <twim_xfer+0x1b4>
        return err_code;
   1a242:	f8df 9024 	ldr.w	r9, [pc, #36]	; 1a268 <twim_xfer+0x2ac>
   1a246:	e793      	b.n	1a170 <twim_xfer+0x1b4>
            return err_code;
   1a248:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1a268 <twim_xfer+0x2ac>
   1a24c:	e790      	b.n	1a170 <twim_xfer+0x1b4>
            return err_code;
   1a24e:	f8df 9018 	ldr.w	r9, [pc, #24]	; 1a268 <twim_xfer+0x2ac>
   1a252:	e78d      	b.n	1a170 <twim_xfer+0x1b4>
   1a254:	019c0202 	.word	0x019c0202
   1a258:	0bad000b 	.word	0x0bad000b
   1a25c:	0bad0000 	.word	0x0bad0000
   1a260:	0bad0004 	.word	0x0bad0004
   1a264:	0bad0001 	.word	0x0bad0001
   1a268:	0bad000a 	.word	0x0bad000a

0001a26c <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   1a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a26e:	b087      	sub	sp, #28
   1a270:	4604      	mov	r4, r0
   1a272:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a274:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a278:	b143      	cbz	r3, 1a28c <twim_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a27a:	2300      	movs	r3, #0
   1a27c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1a280:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a284:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a288:	2b00      	cmp	r3, #0
   1a28a:	d05c      	beq.n	1a346 <twim_irq_handler+0xda>
   1a28c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        }
    }

    nrfx_twim_evt_t event;

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a290:	2b00      	cmp	r3, #0
   1a292:	d078      	beq.n	1a386 <twim_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a294:	2300      	movs	r3, #0
   1a296:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1a29a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    {
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_STOPPED));
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_STOPPED);

        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1a29e:	6a2b      	ldr	r3, [r5, #32]
   1a2a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a2a4:	d103      	bne.n	1a2ae <twim_irq_handler+0x42>
   1a2a6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1a2aa:	2b00      	cmp	r3, #0
   1a2ac:	d062      	beq.n	1a374 <twim_irq_handler+0x108>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
        }

        // Further processing of STOPPED event is valid only if NO_XFER_EVT_HANDLER
        // setting is not used.
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1a2ae:	6a2b      	ldr	r3, [r5, #32]
   1a2b0:	f013 0f04 	tst.w	r3, #4
   1a2b4:	d12b      	bne.n	1a30e <twim_irq_handler+0xa2>
        {
            event.xfer_desc = p_cb->xfer_desc;
   1a2b6:	ae01      	add	r6, sp, #4
   1a2b8:	f105 070c 	add.w	r7, r5, #12
   1a2bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a2be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a2c0:	683b      	ldr	r3, [r7, #0]
   1a2c2:	6033      	str	r3, [r6, #0]
   1a2c4:	2300      	movs	r3, #0
   1a2c6:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
   1a2ca:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
   1a2ce:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
   1a2d2:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTTX);
            nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_LASTRX);
            if (!p_cb->repeated || p_cb->error)
   1a2d6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a2da:	b113      	cbz	r3, 1a2e2 <twim_irq_handler+0x76>
   1a2dc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1a2e0:	b1ab      	cbz	r3, 1a30e <twim_irq_handler+0xa2>
    p_reg->SHORTS = mask;
   1a2e2:	2300      	movs	r3, #0
   1a2e4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            {
                nrf_twim_shorts_set(p_twim, 0);
                p_cb->int_mask = 0;
   1a2e8:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1a2ea:	4b50      	ldr	r3, [pc, #320]	; (1a42c <twim_irq_handler+0x1c0>)
   1a2ec:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1a2f0:	0b22      	lsrs	r2, r4, #12
   1a2f2:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   1a2f6:	2b00      	cmp	r3, #0
   1a2f8:	db09      	blt.n	1a30e <twim_irq_handler+0xa2>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a2fa:	f002 021f 	and.w	r2, r2, #31
   1a2fe:	095b      	lsrs	r3, r3, #5
   1a300:	2101      	movs	r1, #1
   1a302:	fa01 f202 	lsl.w	r2, r1, r2
   1a306:	3360      	adds	r3, #96	; 0x60
   1a308:	4949      	ldr	r1, [pc, #292]	; (1a430 <twim_irq_handler+0x1c4>)
   1a30a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t error_source = p_reg->ERRORSRC;
   1a30e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a312:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            return;
        }
    }

    uint32_t errorsrc = nrf_twim_errorsrc_get_and_clear(p_twim);
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1a316:	f013 0f02 	tst.w	r3, #2
   1a31a:	d06e      	beq.n	1a3fa <twim_irq_handler+0x18e>
    {
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1a31c:	2301      	movs	r3, #1
   1a31e:	f88d 3000 	strb.w	r3, [sp]
    {
        event.type = NRFX_TWIM_EVT_DONE;
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
    }

    if (!p_cb->repeated)
   1a322:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a326:	b90b      	cbnz	r3, 1a32c <twim_irq_handler+0xc0>
    {
        p_cb->busy = false;
   1a328:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    }

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   1a32c:	6a2b      	ldr	r3, [r5, #32]
   1a32e:	f013 0f04 	tst.w	r3, #4
   1a332:	d002      	beq.n	1a33a <twim_irq_handler+0xce>
   1a334:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1a338:	b11b      	cbz	r3, 1a342 <twim_irq_handler+0xd6>
    {
        p_cb->handler(&event, p_cb->p_context);
   1a33a:	682b      	ldr	r3, [r5, #0]
   1a33c:	6869      	ldr	r1, [r5, #4]
   1a33e:	4668      	mov	r0, sp
   1a340:	4798      	blx	r3
    }
}
   1a342:	b007      	add	sp, #28
   1a344:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1a346:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENCLR = mask;
   1a348:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a34c:	2302      	movs	r3, #2
   1a34e:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a350:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   1a352:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a356:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1a35a:	b123      	cbz	r3, 1a366 <twim_irq_handler+0xfa>
    return p_reg->SHORTS;
   1a35c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1a360:	f413 7f00 	tst.w	r3, #512	; 0x200
   1a364:	d102      	bne.n	1a36c <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a366:	2301      	movs	r3, #1
   1a368:	6223      	str	r3, [r4, #32]
   1a36a:	6163      	str	r3, [r4, #20]
            p_cb->error = true;
   1a36c:	2301      	movs	r3, #1
   1a36e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
            return;
   1a372:	e7e6      	b.n	1a342 <twim_irq_handler+0xd6>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1a374:	4629      	mov	r1, r5
   1a376:	4620      	mov	r0, r4
   1a378:	f00a fa5b 	bl	24832 <xfer_completeness_check>
   1a37c:	f080 0001 	eor.w	r0, r0, #1
   1a380:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   1a384:	e793      	b.n	1a2ae <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a386:	2300      	movs	r3, #0
   1a388:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1a38c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1a390:	7b2b      	ldrb	r3, [r5, #12]
   1a392:	bb03      	cbnz	r3, 1a3d6 <twim_irq_handler+0x16a>
            event.xfer_desc = p_cb->xfer_desc;
   1a394:	ae01      	add	r6, sp, #4
   1a396:	f105 070c 	add.w	r7, r5, #12
   1a39a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a39c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a39e:	683b      	ldr	r3, [r7, #0]
   1a3a0:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1a3a2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a3a6:	2b00      	cmp	r3, #0
   1a3a8:	d1b1      	bne.n	1a30e <twim_irq_handler+0xa2>
    p_reg->SHORTS = mask;
   1a3aa:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   1a3ae:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1a3b0:	4b1e      	ldr	r3, [pc, #120]	; (1a42c <twim_irq_handler+0x1c0>)
   1a3b2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1a3b6:	0b22      	lsrs	r2, r4, #12
   1a3b8:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   1a3bc:	2b00      	cmp	r3, #0
   1a3be:	dba6      	blt.n	1a30e <twim_irq_handler+0xa2>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a3c0:	f002 021f 	and.w	r2, r2, #31
   1a3c4:	095b      	lsrs	r3, r3, #5
   1a3c6:	2101      	movs	r1, #1
   1a3c8:	fa01 f202 	lsl.w	r2, r1, r2
   1a3cc:	3360      	adds	r3, #96	; 0x60
   1a3ce:	4918      	ldr	r1, [pc, #96]	; (1a430 <twim_irq_handler+0x1c4>)
   1a3d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a3d4:	e79b      	b.n	1a30e <twim_irq_handler+0xa2>
    p_reg->SHORTS = mask;
   1a3d6:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a3da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1a3de:	f240 2302 	movw	r3, #514	; 0x202
   1a3e2:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   1a3e4:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1a3e8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a3ec:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   1a3ee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a3f2:	2301      	movs	r3, #1
   1a3f4:	60a3      	str	r3, [r4, #8]
   1a3f6:	6223      	str	r3, [r4, #32]
            return;
   1a3f8:	e7a3      	b.n	1a342 <twim_irq_handler+0xd6>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1a3fa:	f013 0f04 	tst.w	r3, #4
   1a3fe:	d003      	beq.n	1a408 <twim_irq_handler+0x19c>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1a400:	2302      	movs	r3, #2
   1a402:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DATA_NACK));
   1a406:	e78c      	b.n	1a322 <twim_irq_handler+0xb6>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1a408:	f013 0f01 	tst.w	r3, #1
   1a40c:	d003      	beq.n	1a416 <twim_irq_handler+0x1aa>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1a40e:	2303      	movs	r3, #3
   1a410:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_OVERRUN));
   1a414:	e785      	b.n	1a322 <twim_irq_handler+0xb6>
    else if (p_cb->error)
   1a416:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1a41a:	b11b      	cbz	r3, 1a424 <twim_irq_handler+0x1b8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1a41c:	2304      	movs	r3, #4
   1a41e:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_BUS_ERROR));
   1a422:	e77e      	b.n	1a322 <twim_irq_handler+0xb6>
        event.type = NRFX_TWIM_EVT_DONE;
   1a424:	2300      	movs	r3, #0
   1a426:	f88d 3000 	strb.w	r3, [sp]
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWIM_EVT_DONE));
   1a42a:	e77a      	b.n	1a322 <twim_irq_handler+0xb6>
   1a42c:	019c0202 	.word	0x019c0202
   1a430:	e000e100 	.word	0xe000e100

0001a434 <nrfx_twim_init>:
{
   1a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a436:	4604      	mov	r4, r0
   1a438:	460d      	mov	r5, r1
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a43a:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1a43c:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a43e:	481e      	ldr	r0, [pc, #120]	; (1a4b8 <nrfx_twim_init+0x84>)
   1a440:	2134      	movs	r1, #52	; 0x34
   1a442:	fb01 0106 	mla	r1, r1, r6, r0
   1a446:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
   1a44a:	b109      	cbz	r1, 1a450 <nrfx_twim_init+0x1c>
        return err_code;
   1a44c:	481b      	ldr	r0, [pc, #108]	; (1a4bc <nrfx_twim_init+0x88>)
}
   1a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    p_cb->handler         = event_handler;
   1a450:	4684      	mov	ip, r0
   1a452:	2034      	movs	r0, #52	; 0x34
   1a454:	fb00 f006 	mul.w	r0, r0, r6
   1a458:	eb0c 0100 	add.w	r1, ip, r0
   1a45c:	f84c 2000 	str.w	r2, [ip, r0]
    p_cb->p_context       = p_context;
   1a460:	604b      	str	r3, [r1, #4]
    p_cb->int_mask        = 0;
   1a462:	2300      	movs	r3, #0
   1a464:	608b      	str	r3, [r1, #8]
    p_cb->repeated        = false;
   1a466:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
    p_cb->busy            = false;
   1a46a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1a46e:	7b6b      	ldrb	r3, [r5, #13]
   1a470:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1a474:	7bab      	ldrb	r3, [r5, #14]
   1a476:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (!twim_pins_configure(p_twim, p_config))
   1a47a:	4629      	mov	r1, r5
   1a47c:	4638      	mov	r0, r7
   1a47e:	f7ff fd5f 	bl	19f40 <twim_pins_configure>
   1a482:	b1b0      	cbz	r0, 1a4b2 <nrfx_twim_init+0x7e>
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   1a484:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = frequency;
   1a486:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    if (p_cb->handler)
   1a48a:	2334      	movs	r3, #52	; 0x34
   1a48c:	fb03 f306 	mul.w	r3, r3, r6
   1a490:	4a09      	ldr	r2, [pc, #36]	; (1a4b8 <nrfx_twim_init+0x84>)
   1a492:	58d3      	ldr	r3, [r2, r3]
   1a494:	b123      	cbz	r3, 1a4a0 <nrfx_twim_init+0x6c>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1a496:	6820      	ldr	r0, [r4, #0]
   1a498:	f340 3007 	sbfx	r0, r0, #12, #8
   1a49c:	f7f9 fa6c 	bl	13978 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a4a0:	4b05      	ldr	r3, [pc, #20]	; (1a4b8 <nrfx_twim_init+0x84>)
   1a4a2:	2234      	movs	r2, #52	; 0x34
   1a4a4:	fb02 3606 	mla	r6, r2, r6, r3
   1a4a8:	2301      	movs	r3, #1
   1a4aa:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    return err_code;
   1a4ae:	4804      	ldr	r0, [pc, #16]	; (1a4c0 <nrfx_twim_init+0x8c>)
   1a4b0:	e7cd      	b.n	1a44e <nrfx_twim_init+0x1a>
        return NRFX_ERROR_INVALID_PARAM;
   1a4b2:	4804      	ldr	r0, [pc, #16]	; (1a4c4 <nrfx_twim_init+0x90>)
   1a4b4:	e7cb      	b.n	1a44e <nrfx_twim_init+0x1a>
   1a4b6:	bf00      	nop
   1a4b8:	2000305c 	.word	0x2000305c
   1a4bc:	0bad0005 	.word	0x0bad0005
   1a4c0:	0bad0000 	.word	0x0bad0000
   1a4c4:	0bad0004 	.word	0x0bad0004

0001a4c8 <nrfx_twim_enable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a4c8:	7903      	ldrb	r3, [r0, #4]
    nrf_twim_enable(p_instance->p_twim);
   1a4ca:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a4cc:	2106      	movs	r1, #6
   1a4ce:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1a4d2:	4a04      	ldr	r2, [pc, #16]	; (1a4e4 <nrfx_twim_enable+0x1c>)
   1a4d4:	2134      	movs	r1, #52	; 0x34
   1a4d6:	fb01 2303 	mla	r3, r1, r3, r2
   1a4da:	2202      	movs	r2, #2
   1a4dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   1a4e0:	4770      	bx	lr
   1a4e2:	bf00      	nop
   1a4e4:	2000305c 	.word	0x2000305c

0001a4e8 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a4e8:	7903      	ldrb	r3, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1a4ea:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1a4ec:	490b      	ldr	r1, [pc, #44]	; (1a51c <nrfx_twim_disable+0x34>)
   1a4ee:	2034      	movs	r0, #52	; 0x34
   1a4f0:	fb00 1303 	mla	r3, r0, r3, r1
   1a4f4:	2100      	movs	r1, #0
   1a4f6:	6099      	str	r1, [r3, #8]
    p_reg->INTENCLR = mask;
   1a4f8:	4809      	ldr	r0, [pc, #36]	; (1a520 <nrfx_twim_disable+0x38>)
   1a4fa:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1a4fe:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1a502:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   1a506:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a50a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a50e:	2201      	movs	r2, #1
   1a510:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   1a514:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   1a518:	4770      	bx	lr
   1a51a:	bf00      	nop
   1a51c:	2000305c 	.word	0x2000305c
   1a520:	019c0202 	.word	0x019c0202

0001a524 <nrfx_twim_xfer>:
{
   1a524:	b538      	push	{r3, r4, r5, lr}
   1a526:	4613      	mov	r3, r2
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a528:	7905      	ldrb	r5, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1a52a:	460a      	mov	r2, r1
   1a52c:	6801      	ldr	r1, [r0, #0]
   1a52e:	4c03      	ldr	r4, [pc, #12]	; (1a53c <nrfx_twim_xfer+0x18>)
   1a530:	2034      	movs	r0, #52	; 0x34
   1a532:	fb00 4005 	mla	r0, r0, r5, r4
   1a536:	f7ff fd41 	bl	19fbc <twim_xfer>
}
   1a53a:	bd38      	pop	{r3, r4, r5, pc}
   1a53c:	2000305c 	.word	0x2000305c

0001a540 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   1a540:	b508      	push	{r3, lr}
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   1a542:	4902      	ldr	r1, [pc, #8]	; (1a54c <nrfx_twim_0_irq_handler+0xc>)
   1a544:	4802      	ldr	r0, [pc, #8]	; (1a550 <nrfx_twim_0_irq_handler+0x10>)
   1a546:	f7ff fe91 	bl	1a26c <twim_irq_handler>
}
   1a54a:	bd08      	pop	{r3, pc}
   1a54c:	2000305c 	.word	0x2000305c
   1a550:	40003000 	.word	0x40003000

0001a554 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1a554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
   1a558:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   1a55c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a55e:	2801      	cmp	r0, #1
   1a560:	d036      	beq.n	1a5d0 <nrfx_twi_twim_bus_recover+0x7c>
        case 0: return NRF_P0;
   1a562:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a566:	2501      	movs	r5, #1
   1a568:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
   1a56a:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1a56e:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
   1a572:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a574:	2901      	cmp	r1, #1
   1a576:	d02d      	beq.n	1a5d4 <nrfx_twi_twim_bus_recover+0x80>
        case 0: return NRF_P0;
   1a578:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a57c:	f04f 0901 	mov.w	r9, #1
   1a580:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
   1a584:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   1a588:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a58c:	f240 620d 	movw	r2, #1549	; 0x60d
   1a590:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
   1a594:	f508 73e0 	add.w	r3, r8, #448	; 0x1c0
   1a598:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1a59c:	2004      	movs	r0, #4
   1a59e:	f00a f927 	bl	247f0 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   1a5a2:	2400      	movs	r4, #0
   1a5a4:	2c08      	cmp	r4, #8
   1a5a6:	d817      	bhi.n	1a5d8 <nrfx_twi_twim_bus_recover+0x84>
    return p_reg->IN;
   1a5a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a5ac:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
   1a5b0:	f013 0f01 	tst.w	r3, #1
   1a5b4:	d110      	bne.n	1a5d8 <nrfx_twi_twim_bus_recover+0x84>
    p_reg->OUTCLR = clr_mask;
   1a5b6:	f8c6 550c 	str.w	r5, [r6, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1a5ba:	2004      	movs	r0, #4
   1a5bc:	f00a f918 	bl	247f0 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   1a5c0:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   1a5c4:	2004      	movs	r0, #4
   1a5c6:	f00a f913 	bl	247f0 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1a5ca:	3401      	adds	r4, #1
   1a5cc:	b2e4      	uxtb	r4, r4
   1a5ce:	e7e9      	b.n	1a5a4 <nrfx_twi_twim_bus_recover+0x50>
        case 1: return NRF_P1;
   1a5d0:	4e0c      	ldr	r6, [pc, #48]	; (1a604 <nrfx_twi_twim_bus_recover+0xb0>)
   1a5d2:	e7c8      	b.n	1a566 <nrfx_twi_twim_bus_recover+0x12>
   1a5d4:	4f0b      	ldr	r7, [pc, #44]	; (1a604 <nrfx_twi_twim_bus_recover+0xb0>)
   1a5d6:	e7d1      	b.n	1a57c <nrfx_twi_twim_bus_recover+0x28>
    p_reg->OUTCLR = clr_mask;
   1a5d8:	f8c7 950c 	str.w	r9, [r7, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1a5dc:	2004      	movs	r0, #4
   1a5de:	f00a f907 	bl	247f0 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   1a5e2:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   1a5e6:	2004      	movs	r0, #4
   1a5e8:	f00a f902 	bl	247f0 <nrfx_busy_wait>
    return p_reg->IN;
   1a5ec:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a5f0:	fa23 f808 	lsr.w	r8, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
   1a5f4:	f018 0f01 	tst.w	r8, #1
   1a5f8:	d002      	beq.n	1a600 <nrfx_twi_twim_bus_recover+0xac>
    {
        return NRFX_SUCCESS;
   1a5fa:	4803      	ldr	r0, [pc, #12]	; (1a608 <nrfx_twi_twim_bus_recover+0xb4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1a5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
   1a600:	4802      	ldr	r0, [pc, #8]	; (1a60c <nrfx_twi_twim_bus_recover+0xb8>)
   1a602:	e7fb      	b.n	1a5fc <nrfx_twi_twim_bus_recover+0xa8>
   1a604:	50000300 	.word	0x50000300
   1a608:	0bad0000 	.word	0x0bad0000
   1a60c:	0bad0001 	.word	0x0bad0001

0001a610 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a610:	4b14      	ldr	r3, [pc, #80]	; (1a664 <_DoInit+0x54>)
   1a612:	2203      	movs	r2, #3
   1a614:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a616:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a618:	4913      	ldr	r1, [pc, #76]	; (1a668 <_DoInit+0x58>)
   1a61a:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a61c:	4a13      	ldr	r2, [pc, #76]	; (1a66c <_DoInit+0x5c>)
   1a61e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a620:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a624:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1a626:	2200      	movs	r2, #0
   1a628:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a62a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a62c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1a62e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a630:	490f      	ldr	r1, [pc, #60]	; (1a670 <_DoInit+0x60>)
   1a632:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a634:	2110      	movs	r1, #16
   1a636:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a638:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a63a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a63c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a63e:	4a0d      	ldr	r2, [pc, #52]	; (1a674 <_DoInit+0x64>)
   1a640:	6810      	ldr	r0, [r2, #0]
   1a642:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a646:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a64a:	4a0b      	ldr	r2, [pc, #44]	; (1a678 <_DoInit+0x68>)
   1a64c:	e892 0003 	ldmia.w	r2, {r0, r1}
   1a650:	6018      	str	r0, [r3, #0]
   1a652:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a654:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1a658:	2220      	movs	r2, #32
   1a65a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a65c:	f3bf 8f5f 	dmb	sy
}
   1a660:	4770      	bx	lr
   1a662:	bf00      	nop
   1a664:	20003090 	.word	0x20003090
   1a668:	000270f0 	.word	0x000270f0
   1a66c:	20003148 	.word	0x20003148
   1a670:	20003138 	.word	0x20003138
   1a674:	000270fc 	.word	0x000270fc
   1a678:	00027100 	.word	0x00027100

0001a67c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a67e:	460f      	mov	r7, r1
   1a680:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1a682:	4b18      	ldr	r3, [pc, #96]	; (1a6e4 <SEGGER_RTT_WriteNoLock+0x68>)
   1a684:	1c45      	adds	r5, r0, #1
   1a686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1a68a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1a68e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a692:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a696:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1a698:	2c01      	cmp	r4, #1
   1a69a:	d011      	beq.n	1a6c0 <SEGGER_RTT_WriteNoLock+0x44>
   1a69c:	2c02      	cmp	r4, #2
   1a69e:	d01c      	beq.n	1a6da <SEGGER_RTT_WriteNoLock+0x5e>
   1a6a0:	b114      	cbz	r4, 1a6a8 <SEGGER_RTT_WriteNoLock+0x2c>
   1a6a2:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   1a6a4:	4620      	mov	r0, r4
   1a6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1a6a8:	4628      	mov	r0, r5
   1a6aa:	f00a f918 	bl	248de <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1a6ae:	4286      	cmp	r6, r0
   1a6b0:	d8f8      	bhi.n	1a6a4 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   1a6b2:	4632      	mov	r2, r6
   1a6b4:	4639      	mov	r1, r7
   1a6b6:	4628      	mov	r0, r5
   1a6b8:	f00a f91d 	bl	248f6 <_WriteNoCheck>
      Status = NumBytes;
   1a6bc:	4634      	mov	r4, r6
   1a6be:	e7f1      	b.n	1a6a4 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   1a6c0:	4628      	mov	r0, r5
   1a6c2:	f00a f90c 	bl	248de <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a6c6:	4634      	mov	r4, r6
   1a6c8:	4286      	cmp	r6, r0
   1a6ca:	bf28      	it	cs
   1a6cc:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1a6ce:	4622      	mov	r2, r4
   1a6d0:	4639      	mov	r1, r7
   1a6d2:	4628      	mov	r0, r5
   1a6d4:	f00a f90f 	bl	248f6 <_WriteNoCheck>
    break;
   1a6d8:	e7e4      	b.n	1a6a4 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1a6da:	4628      	mov	r0, r5
   1a6dc:	f00a f931 	bl	24942 <_WriteBlocking>
   1a6e0:	4604      	mov	r4, r0
    break;
   1a6e2:	e7df      	b.n	1a6a4 <SEGGER_RTT_WriteNoLock+0x28>
   1a6e4:	20003090 	.word	0x20003090

0001a6e8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1a6e8:	4b03      	ldr	r3, [pc, #12]	; (1a6f8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1a6ea:	4a04      	ldr	r2, [pc, #16]	; (1a6fc <z_device_state_init+0x14>)
   1a6ec:	4293      	cmp	r3, r2
   1a6ee:	d201      	bcs.n	1a6f4 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1a6f0:	3318      	adds	r3, #24
   1a6f2:	e7fa      	b.n	1a6ea <z_device_state_init+0x2>
	}
}
   1a6f4:	4770      	bx	lr
   1a6f6:	bf00      	nop
   1a6f8:	000258c8 	.word	0x000258c8
   1a6fc:	00025970 	.word	0x00025970

0001a700 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1a700:	b570      	push	{r4, r5, r6, lr}
   1a702:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a704:	4b11      	ldr	r3, [pc, #68]	; (1a74c <z_sys_init_run_level+0x4c>)
   1a706:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a70a:	e009      	b.n	1a720 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1a70c:	4240      	negs	r0, r0
   1a70e:	e017      	b.n	1a740 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1a710:	68eb      	ldr	r3, [r5, #12]
   1a712:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1a714:	68ea      	ldr	r2, [r5, #12]
   1a716:	7853      	ldrb	r3, [r2, #1]
   1a718:	f043 0301 	orr.w	r3, r3, #1
   1a71c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a71e:	3408      	adds	r4, #8
   1a720:	1c73      	adds	r3, r6, #1
   1a722:	4a0a      	ldr	r2, [pc, #40]	; (1a74c <z_sys_init_run_level+0x4c>)
   1a724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a728:	42a3      	cmp	r3, r4
   1a72a:	d90d      	bls.n	1a748 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1a72c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1a72e:	6823      	ldr	r3, [r4, #0]
   1a730:	4628      	mov	r0, r5
   1a732:	4798      	blx	r3
		if (dev != NULL) {
   1a734:	2d00      	cmp	r5, #0
   1a736:	d0f2      	beq.n	1a71e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1a738:	2800      	cmp	r0, #0
   1a73a:	d0eb      	beq.n	1a714 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1a73c:	2800      	cmp	r0, #0
   1a73e:	dbe5      	blt.n	1a70c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1a740:	28ff      	cmp	r0, #255	; 0xff
   1a742:	dde5      	ble.n	1a710 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1a744:	20ff      	movs	r0, #255	; 0xff
   1a746:	e7e3      	b.n	1a710 <z_sys_init_run_level+0x10>
		}
	}
}
   1a748:	bd70      	pop	{r4, r5, r6, pc}
   1a74a:	bf00      	nop
   1a74c:	00027108 	.word	0x00027108

0001a750 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1a750:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1a752:	4605      	mov	r5, r0
   1a754:	b328      	cbz	r0, 1a7a2 <z_impl_device_get_binding+0x52>
   1a756:	7803      	ldrb	r3, [r0, #0]
   1a758:	b32b      	cbz	r3, 1a7a6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1a75a:	4c14      	ldr	r4, [pc, #80]	; (1a7ac <z_impl_device_get_binding+0x5c>)
   1a75c:	e000      	b.n	1a760 <z_impl_device_get_binding+0x10>
   1a75e:	3418      	adds	r4, #24
   1a760:	4b13      	ldr	r3, [pc, #76]	; (1a7b0 <z_impl_device_get_binding+0x60>)
   1a762:	429c      	cmp	r4, r3
   1a764:	d008      	beq.n	1a778 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a766:	4620      	mov	r0, r4
   1a768:	f00a f925 	bl	249b6 <z_device_ready>
   1a76c:	2800      	cmp	r0, #0
   1a76e:	d0f6      	beq.n	1a75e <z_impl_device_get_binding+0xe>
   1a770:	6823      	ldr	r3, [r4, #0]
   1a772:	42ab      	cmp	r3, r5
   1a774:	d1f3      	bne.n	1a75e <z_impl_device_get_binding+0xe>
   1a776:	e012      	b.n	1a79e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1a778:	4c0c      	ldr	r4, [pc, #48]	; (1a7ac <z_impl_device_get_binding+0x5c>)
   1a77a:	e000      	b.n	1a77e <z_impl_device_get_binding+0x2e>
   1a77c:	3418      	adds	r4, #24
   1a77e:	4b0c      	ldr	r3, [pc, #48]	; (1a7b0 <z_impl_device_get_binding+0x60>)
   1a780:	429c      	cmp	r4, r3
   1a782:	d00b      	beq.n	1a79c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a784:	4620      	mov	r0, r4
   1a786:	f00a f916 	bl	249b6 <z_device_ready>
   1a78a:	2800      	cmp	r0, #0
   1a78c:	d0f6      	beq.n	1a77c <z_impl_device_get_binding+0x2c>
   1a78e:	6821      	ldr	r1, [r4, #0]
   1a790:	4628      	mov	r0, r5
   1a792:	f7f1 fe1b 	bl	c3cc <strcmp>
   1a796:	2800      	cmp	r0, #0
   1a798:	d1f0      	bne.n	1a77c <z_impl_device_get_binding+0x2c>
   1a79a:	e000      	b.n	1a79e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1a79c:	2400      	movs	r4, #0
}
   1a79e:	4620      	mov	r0, r4
   1a7a0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1a7a2:	4604      	mov	r4, r0
   1a7a4:	e7fb      	b.n	1a79e <z_impl_device_get_binding+0x4e>
   1a7a6:	2400      	movs	r4, #0
   1a7a8:	e7f9      	b.n	1a79e <z_impl_device_get_binding+0x4e>
   1a7aa:	bf00      	nop
   1a7ac:	000258c8 	.word	0x000258c8
   1a7b0:	00025970 	.word	0x00025970

0001a7b4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7b6:	b089      	sub	sp, #36	; 0x24
   1a7b8:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1a7ba:	4b15      	ldr	r3, [pc, #84]	; (1a810 <init_idle_thread+0x5c>)
   1a7bc:	25b8      	movs	r5, #184	; 0xb8
   1a7be:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1a7c2:	4b14      	ldr	r3, [pc, #80]	; (1a814 <init_idle_thread+0x60>)
   1a7c4:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1a7c8:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1a7cc:	af06      	add	r7, sp, #24
   1a7ce:	4603      	mov	r3, r0
   1a7d0:	4a11      	ldr	r2, [pc, #68]	; (1a818 <init_idle_thread+0x64>)
   1a7d2:	2108      	movs	r1, #8
   1a7d4:	4638      	mov	r0, r7
   1a7d6:	f005 fa5c 	bl	1fc92 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a7da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a7de:	480f      	ldr	r0, [pc, #60]	; (1a81c <init_idle_thread+0x68>)
   1a7e0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1a7e4:	9705      	str	r7, [sp, #20]
   1a7e6:	2301      	movs	r3, #1
   1a7e8:	9304      	str	r3, [sp, #16]
   1a7ea:	230f      	movs	r3, #15
   1a7ec:	9303      	str	r3, [sp, #12]
   1a7ee:	2300      	movs	r3, #0
   1a7f0:	9302      	str	r3, [sp, #8]
   1a7f2:	9301      	str	r3, [sp, #4]
   1a7f4:	9400      	str	r4, [sp, #0]
   1a7f6:	4b0a      	ldr	r3, [pc, #40]	; (1a820 <init_idle_thread+0x6c>)
   1a7f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a7fc:	4631      	mov	r1, r6
   1a7fe:	4628      	mov	r0, r5
   1a800:	f000 f96c 	bl	1aadc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a804:	7b6b      	ldrb	r3, [r5, #13]
   1a806:	f023 0304 	bic.w	r3, r3, #4
   1a80a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1a80c:	b009      	add	sp, #36	; 0x24
   1a80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a810:	20001fd0 	.word	0x20001fd0
   1a814:	20005be0 	.word	0x20005be0
   1a818:	00027120 	.word	0x00027120
   1a81c:	20003548 	.word	0x20003548
   1a820:	0001ac41 	.word	0x0001ac41

0001a824 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1a824:	b570      	push	{r4, r5, r6, lr}
   1a826:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1a828:	f001 f83c 	bl	1b8a4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1a82c:	4d1b      	ldr	r5, [pc, #108]	; (1a89c <prepare_multithreading+0x78>)
   1a82e:	4b1c      	ldr	r3, [pc, #112]	; (1a8a0 <prepare_multithreading+0x7c>)
   1a830:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a832:	4b1c      	ldr	r3, [pc, #112]	; (1a8a4 <prepare_multithreading+0x80>)
   1a834:	9305      	str	r3, [sp, #20]
   1a836:	2301      	movs	r3, #1
   1a838:	9304      	str	r3, [sp, #16]
   1a83a:	2400      	movs	r4, #0
   1a83c:	9403      	str	r4, [sp, #12]
   1a83e:	9402      	str	r4, [sp, #8]
   1a840:	9401      	str	r4, [sp, #4]
   1a842:	9400      	str	r4, [sp, #0]
   1a844:	4b18      	ldr	r3, [pc, #96]	; (1a8a8 <prepare_multithreading+0x84>)
   1a846:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a84a:	4918      	ldr	r1, [pc, #96]	; (1a8ac <prepare_multithreading+0x88>)
   1a84c:	4628      	mov	r0, r5
   1a84e:	f000 f945 	bl	1aadc <z_setup_new_thread>
   1a852:	4606      	mov	r6, r0
   1a854:	7b6b      	ldrb	r3, [r5, #13]
   1a856:	f023 0304 	bic.w	r3, r3, #4
   1a85a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1a85c:	4628      	mov	r0, r5
   1a85e:	f00a fc89 	bl	25174 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1a862:	2c00      	cmp	r4, #0
   1a864:	dd02      	ble.n	1a86c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1a866:	4630      	mov	r0, r6
   1a868:	b006      	add	sp, #24
   1a86a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1a86c:	4620      	mov	r0, r4
   1a86e:	f7ff ffa1 	bl	1a7b4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1a872:	4b0f      	ldr	r3, [pc, #60]	; (1a8b0 <prepare_multithreading+0x8c>)
   1a874:	22b8      	movs	r2, #184	; 0xb8
   1a876:	fb02 3204 	mla	r2, r2, r4, r3
   1a87a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1a87e:	4b08      	ldr	r3, [pc, #32]	; (1a8a0 <prepare_multithreading+0x7c>)
   1a880:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1a884:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1a886:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1a888:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1a88c:	4a09      	ldr	r2, [pc, #36]	; (1a8b4 <prepare_multithreading+0x90>)
   1a88e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1a892:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1a896:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1a898:	3401      	adds	r4, #1
   1a89a:	e7e2      	b.n	1a862 <prepare_multithreading+0x3e>
   1a89c:	20002088 	.word	0x20002088
   1a8a0:	20003548 	.word	0x20003548
   1a8a4:	0002712c 	.word	0x0002712c
   1a8a8:	0001a8b9 	.word	0x0001a8b9
   1a8ac:	200053c0 	.word	0x200053c0
   1a8b0:	20001fd0 	.word	0x20001fd0
   1a8b4:	20005d40 	.word	0x20005d40

0001a8b8 <bg_thread_main>:
{
   1a8b8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1a8ba:	4b0a      	ldr	r3, [pc, #40]	; (1a8e4 <bg_thread_main+0x2c>)
   1a8bc:	2201      	movs	r2, #1
   1a8be:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a8c0:	2002      	movs	r0, #2
   1a8c2:	f7ff ff1d 	bl	1a700 <z_sys_init_run_level>
	boot_banner();
   1a8c6:	f001 fe31 	bl	1c52c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a8ca:	2003      	movs	r0, #3
   1a8cc:	f7ff ff18 	bl	1a700 <z_sys_init_run_level>
	z_init_static_threads();
   1a8d0:	f000 f968 	bl	1aba4 <z_init_static_threads>
	main();
   1a8d4:	f7f7 f828 	bl	11928 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a8d8:	4a03      	ldr	r2, [pc, #12]	; (1a8e8 <bg_thread_main+0x30>)
   1a8da:	7b13      	ldrb	r3, [r2, #12]
   1a8dc:	f023 0301 	bic.w	r3, r3, #1
   1a8e0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a8e2:	bd08      	pop	{r3, pc}
   1a8e4:	20003f76 	.word	0x20003f76
   1a8e8:	20002088 	.word	0x20002088

0001a8ec <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1a8ec:	b508      	push	{r3, lr}
   1a8ee:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a8f0:	4a01      	ldr	r2, [pc, #4]	; (1a8f8 <switch_to_main_thread+0xc>)
   1a8f2:	4802      	ldr	r0, [pc, #8]	; (1a8fc <switch_to_main_thread+0x10>)
   1a8f4:	f7f9 f966 	bl	13bc4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a8f8:	0001a8b9 	.word	0x0001a8b9
   1a8fc:	20002088 	.word	0x20002088

0001a900 <z_bss_zero>:
{
   1a900:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1a902:	4803      	ldr	r0, [pc, #12]	; (1a910 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   1a904:	4a03      	ldr	r2, [pc, #12]	; (1a914 <z_bss_zero+0x14>)
   1a906:	1a12      	subs	r2, r2, r0
   1a908:	2100      	movs	r1, #0
   1a90a:	f00a ff47 	bl	2579c <memset>
}
   1a90e:	bd08      	pop	{r3, pc}
   1a910:	20000c20 	.word	0x20000c20
   1a914:	20004134 	.word	0x20004134

0001a918 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1a918:	b500      	push	{lr}
   1a91a:	b0af      	sub	sp, #188	; 0xbc
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1a91c:	4b1d      	ldr	r3, [pc, #116]	; (1a994 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a91e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1a922:	4c1d      	ldr	r4, [pc, #116]	; (1a998 <z_cstart+0x80>)
   1a924:	6963      	ldr	r3, [r4, #20]
   1a926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a92a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a92c:	23e0      	movs	r3, #224	; 0xe0
   1a92e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1a932:	2320      	movs	r3, #32
   1a934:	77e3      	strb	r3, [r4, #31]
   1a936:	2500      	movs	r5, #0
   1a938:	7625      	strb	r5, [r4, #24]
   1a93a:	7665      	strb	r5, [r4, #25]
   1a93c:	76a5      	strb	r5, [r4, #26]
   1a93e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a942:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a944:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a948:	6263      	str	r3, [r4, #36]	; 0x24
   1a94a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a94e:	f7f9 fa91 	bl	13e74 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a952:	f7f8 fff3 	bl	1393c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a956:	f04f 33ff 	mov.w	r3, #4294967295
   1a95a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a95c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1a95e:	f7f9 fb93 	bl	14088 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1a962:	f7f9 fb2d 	bl	13fc0 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1a966:	2401      	movs	r4, #1
   1a968:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a96c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1a970:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1a972:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1a974:	4b09      	ldr	r3, [pc, #36]	; (1a99c <z_cstart+0x84>)
   1a976:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1a97a:	f7ff feb5 	bl	1a6e8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1a97e:	4628      	mov	r0, r5
   1a980:	f7ff febe 	bl	1a700 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a984:	4620      	mov	r0, r4
   1a986:	f7ff febb 	bl	1a700 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1a98a:	f7ff ff4b 	bl	1a824 <prepare_multithreading>
   1a98e:	f7ff ffad 	bl	1a8ec <switch_to_main_thread>
   1a992:	bf00      	nop
   1a994:	20006560 	.word	0x20006560
   1a998:	e000ed00 	.word	0xe000ed00
   1a99c:	20003548 	.word	0x20003548

0001a9a0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1a9a0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1a9a2:	4c06      	ldr	r4, [pc, #24]	; (1a9bc <statics_init+0x1c>)
   1a9a4:	4b06      	ldr	r3, [pc, #24]	; (1a9c0 <statics_init+0x20>)
   1a9a6:	429c      	cmp	r4, r3
   1a9a8:	d206      	bcs.n	1a9b8 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a9aa:	68a2      	ldr	r2, [r4, #8]
   1a9ac:	6861      	ldr	r1, [r4, #4]
   1a9ae:	4620      	mov	r0, r4
   1a9b0:	f00a f828 	bl	24a04 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1a9b4:	3414      	adds	r4, #20
   1a9b6:	e7f5      	b.n	1a9a4 <statics_init+0x4>
		}
	}
	return 0;
}
   1a9b8:	2000      	movs	r0, #0
   1a9ba:	bd10      	pop	{r4, pc}
   1a9bc:	20000a68 	.word	0x20000a68
   1a9c0:	20000a68 	.word	0x20000a68

0001a9c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a9c4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a9c6:	4c06      	ldr	r4, [pc, #24]	; (1a9e0 <init_mem_slab_module+0x1c>)
	int rc = 0;
   1a9c8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a9ca:	4b06      	ldr	r3, [pc, #24]	; (1a9e4 <init_mem_slab_module+0x20>)
   1a9cc:	429c      	cmp	r4, r3
   1a9ce:	d206      	bcs.n	1a9de <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1a9d0:	4620      	mov	r0, r4
   1a9d2:	f00a f887 	bl	24ae4 <create_free_list>
		if (rc < 0) {
   1a9d6:	2800      	cmp	r0, #0
   1a9d8:	db01      	blt.n	1a9de <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a9da:	341c      	adds	r4, #28
   1a9dc:	e7f5      	b.n	1a9ca <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1a9de:	bd10      	pop	{r4, pc}
   1a9e0:	20000a14 	.word	0x20000a14
   1a9e4:	20000a68 	.word	0x20000a68

0001a9e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9ea:	b083      	sub	sp, #12
   1a9ec:	460c      	mov	r4, r1
   1a9ee:	461f      	mov	r7, r3
	__asm__ volatile(
   1a9f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9f4:	f3ef 8111 	mrs	r1, BASEPRI
   1a9f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1aa00:	6943      	ldr	r3, [r0, #20]
   1aa02:	b16b      	cbz	r3, 1aa20 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1aa04:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1aa06:	6943      	ldr	r3, [r0, #20]
   1aa08:	681b      	ldr	r3, [r3, #0]
   1aa0a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1aa0c:	6983      	ldr	r3, [r0, #24]
   1aa0e:	3301      	adds	r3, #1
   1aa10:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1aa12:	2000      	movs	r0, #0
	__asm__ volatile(
   1aa14:	f381 8811 	msr	BASEPRI, r1
   1aa18:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1aa1c:	b003      	add	sp, #12
   1aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa20:	4616      	mov	r6, r2
   1aa22:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1aa26:	ea56 0307 	orrs.w	r3, r6, r7
   1aa2a:	d104      	bne.n	1aa36 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1aa2c:	2300      	movs	r3, #0
   1aa2e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1aa30:	f06f 000b 	mvn.w	r0, #11
   1aa34:	e7ee      	b.n	1aa14 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1aa36:	e9cd 6700 	strd	r6, r7, [sp]
   1aa3a:	4602      	mov	r2, r0
   1aa3c:	4628      	mov	r0, r5
   1aa3e:	f000 fe07 	bl	1b650 <z_pend_curr>
		if (result == 0) {
   1aa42:	2800      	cmp	r0, #0
   1aa44:	d1ea      	bne.n	1aa1c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1aa46:	4b02      	ldr	r3, [pc, #8]	; (1aa50 <k_mem_slab_alloc+0x68>)
   1aa48:	689b      	ldr	r3, [r3, #8]
   1aa4a:	695b      	ldr	r3, [r3, #20]
   1aa4c:	6023      	str	r3, [r4, #0]
		return result;
   1aa4e:	e7e5      	b.n	1aa1c <k_mem_slab_alloc+0x34>
   1aa50:	20003548 	.word	0x20003548

0001aa54 <z_thread_monitor_exit>:
	__asm__ volatile(
   1aa54:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aa58:	f3ef 8111 	mrs	r1, BASEPRI
   1aa5c:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa60:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1aa64:	4b0a      	ldr	r3, [pc, #40]	; (1aa90 <z_thread_monitor_exit+0x3c>)
   1aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aa68:	4283      	cmp	r3, r0
   1aa6a:	d104      	bne.n	1aa76 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1aa6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1aa6e:	4b08      	ldr	r3, [pc, #32]	; (1aa90 <z_thread_monitor_exit+0x3c>)
   1aa70:	629a      	str	r2, [r3, #40]	; 0x28
   1aa72:	e007      	b.n	1aa84 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1aa74:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1aa76:	b113      	cbz	r3, 1aa7e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1aa78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1aa7a:	4282      	cmp	r2, r0
   1aa7c:	d1fa      	bne.n	1aa74 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1aa7e:	b10b      	cbz	r3, 1aa84 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1aa80:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1aa82:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1aa84:	f381 8811 	msr	BASEPRI, r1
   1aa88:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1aa8c:	4770      	bx	lr
   1aa8e:	bf00      	nop
   1aa90:	20003548 	.word	0x20003548

0001aa94 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1aa94:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1aa96:	4604      	mov	r4, r0
   1aa98:	b140      	cbz	r0, 1aaac <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1aa9a:	2220      	movs	r2, #32
   1aa9c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1aaa0:	f00a fe84 	bl	257ac <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1aaa4:	2000      	movs	r0, #0
   1aaa6:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1aaaa:	bd10      	pop	{r4, pc}
		thread = _current;
   1aaac:	4b01      	ldr	r3, [pc, #4]	; (1aab4 <z_impl_k_thread_name_set+0x20>)
   1aaae:	689c      	ldr	r4, [r3, #8]
   1aab0:	e7f3      	b.n	1aa9a <z_impl_k_thread_name_set+0x6>
   1aab2:	bf00      	nop
   1aab4:	20003548 	.word	0x20003548

0001aab8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1aab8:	b538      	push	{r3, r4, r5, lr}
   1aaba:	4614      	mov	r4, r2
   1aabc:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aabe:	ea54 0305 	orrs.w	r3, r4, r5
   1aac2:	d102      	bne.n	1aaca <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1aac4:	f00a f877 	bl	24bb6 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1aac8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1aaca:	462b      	mov	r3, r5
   1aacc:	4902      	ldr	r1, [pc, #8]	; (1aad8 <schedule_new_thread+0x20>)
   1aace:	3018      	adds	r0, #24
   1aad0:	f001 f866 	bl	1bba0 <z_add_timeout>
   1aad4:	e7f8      	b.n	1aac8 <schedule_new_thread+0x10>
   1aad6:	bf00      	nop
   1aad8:	000251ad 	.word	0x000251ad

0001aadc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aae0:	b085      	sub	sp, #20
   1aae2:	4604      	mov	r4, r0
   1aae4:	460f      	mov	r7, r1
   1aae6:	4615      	mov	r5, r2
   1aae8:	461e      	mov	r6, r3
   1aaea:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1aaee:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1aaf2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1aaf6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1aafa:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1aafe:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1ab00:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1ab02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ab04:	2204      	movs	r2, #4
   1ab06:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ab08:	f00a f859 	bl	24bbe <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1ab0c:	462a      	mov	r2, r5
   1ab0e:	4639      	mov	r1, r7
   1ab10:	4620      	mov	r0, r4
   1ab12:	f00a f838 	bl	24b86 <setup_thread_stack>
   1ab16:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ab18:	f8cd 8008 	str.w	r8, [sp, #8]
   1ab1c:	f8cd 9004 	str.w	r9, [sp, #4]
   1ab20:	f8cd a000 	str.w	sl, [sp]
   1ab24:	4633      	mov	r3, r6
   1ab26:	4602      	mov	r2, r0
   1ab28:	4639      	mov	r1, r7
   1ab2a:	4620      	mov	r0, r4
   1ab2c:	f7f8 fffa 	bl	13b24 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1ab30:	2300      	movs	r3, #0
   1ab32:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1ab34:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1ab36:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1ab3a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1ab3e:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1ab42:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab46:	f3ef 8211 	mrs	r2, BASEPRI
   1ab4a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab4e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1ab52:	4b13      	ldr	r3, [pc, #76]	; (1aba0 <z_setup_new_thread+0xc4>)
   1ab54:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1ab56:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1ab58:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1ab5a:	f382 8811 	msr	BASEPRI, r2
   1ab5e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1ab62:	f1bb 0f00 	cmp.w	fp, #0
   1ab66:	d013      	beq.n	1ab90 <z_setup_new_thread+0xb4>
   1ab68:	221f      	movs	r2, #31
   1ab6a:	4659      	mov	r1, fp
   1ab6c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1ab70:	f00a fe1c 	bl	257ac <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1ab74:	2300      	movs	r3, #0
   1ab76:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1ab7a:	4b09      	ldr	r3, [pc, #36]	; (1aba0 <z_setup_new_thread+0xc4>)
   1ab7c:	689b      	ldr	r3, [r3, #8]
   1ab7e:	b15b      	cbz	r3, 1ab98 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1ab80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1ab84:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   1ab88:	4628      	mov	r0, r5
   1ab8a:	b005      	add	sp, #20
   1ab8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1ab90:	2300      	movs	r3, #0
   1ab92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1ab96:	e7f0      	b.n	1ab7a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1ab98:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1ab9c:	e7f4      	b.n	1ab88 <z_setup_new_thread+0xac>
   1ab9e:	bf00      	nop
   1aba0:	20003548 	.word	0x20003548

0001aba4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1aba4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1aba8:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1abaa:	4c23      	ldr	r4, [pc, #140]	; (1ac38 <z_init_static_threads+0x94>)
   1abac:	4b23      	ldr	r3, [pc, #140]	; (1ac3c <z_init_static_threads+0x98>)
   1abae:	429c      	cmp	r4, r3
   1abb0:	d215      	bcs.n	1abde <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1abb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1abb4:	9305      	str	r3, [sp, #20]
   1abb6:	6a23      	ldr	r3, [r4, #32]
   1abb8:	9304      	str	r3, [sp, #16]
   1abba:	69e3      	ldr	r3, [r4, #28]
   1abbc:	9303      	str	r3, [sp, #12]
   1abbe:	69a3      	ldr	r3, [r4, #24]
   1abc0:	9302      	str	r3, [sp, #8]
   1abc2:	6963      	ldr	r3, [r4, #20]
   1abc4:	9301      	str	r3, [sp, #4]
   1abc6:	6923      	ldr	r3, [r4, #16]
   1abc8:	9300      	str	r3, [sp, #0]
   1abca:	68e3      	ldr	r3, [r4, #12]
   1abcc:	68a2      	ldr	r2, [r4, #8]
   1abce:	6861      	ldr	r1, [r4, #4]
   1abd0:	6820      	ldr	r0, [r4, #0]
   1abd2:	f7ff ff83 	bl	1aadc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1abd6:	6823      	ldr	r3, [r4, #0]
   1abd8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1abda:	3430      	adds	r4, #48	; 0x30
   1abdc:	e7e6      	b.n	1abac <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1abde:	f000 fbef 	bl	1b3c0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1abe2:	4c15      	ldr	r4, [pc, #84]	; (1ac38 <z_init_static_threads+0x94>)
   1abe4:	e01b      	b.n	1ac1e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1abe6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1abe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1abec:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
   1abf0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1abf4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1abf8:	03d8      	lsls	r0, r3, #15
   1abfa:	f240 35e7 	movw	r5, #999	; 0x3e7
   1abfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ac02:	2300      	movs	r3, #0
   1ac04:	1940      	adds	r0, r0, r5
   1ac06:	f04f 0500 	mov.w	r5, #0
   1ac0a:	eb45 0101 	adc.w	r1, r5, r1
   1ac0e:	f7e6 f8ed 	bl	dec <__aeabi_uldivmod>
   1ac12:	4602      	mov	r2, r0
   1ac14:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1ac16:	4630      	mov	r0, r6
   1ac18:	f7ff ff4e 	bl	1aab8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ac1c:	3430      	adds	r4, #48	; 0x30
   1ac1e:	4b07      	ldr	r3, [pc, #28]	; (1ac3c <z_init_static_threads+0x98>)
   1ac20:	429c      	cmp	r4, r3
   1ac22:	d204      	bcs.n	1ac2e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ac24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ac26:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ac2a:	d0f7      	beq.n	1ac1c <z_init_static_threads+0x78>
   1ac2c:	e7db      	b.n	1abe6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1ac2e:	f000 fdc5 	bl	1b7bc <k_sched_unlock>
}
   1ac32:	b006      	add	sp, #24
   1ac34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1ac38:	20000a14 	.word	0x20000a14
   1ac3c:	20000a14 	.word	0x20000a14

0001ac40 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ac40:	b508      	push	{r3, lr}
   1ac42:	e001      	b.n	1ac48 <idle+0x8>
	arch_cpu_idle();
   1ac44:	f7f8 fe80 	bl	13948 <arch_cpu_idle>
	__asm__ volatile(
   1ac48:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ac4c:	f3ef 8311 	mrs	r3, BASEPRI
   1ac50:	f382 8812 	msr	BASEPRI_MAX, r2
   1ac54:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1ac58:	f00a fbfa 	bl	25450 <z_get_next_timeout_expiry>
   1ac5c:	4b03      	ldr	r3, [pc, #12]	; (1ac6c <idle+0x2c>)
   1ac5e:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   1ac60:	f7f8 f8d4 	bl	12e0c <pm_system_suspend>
   1ac64:	2800      	cmp	r0, #0
   1ac66:	d1ef      	bne.n	1ac48 <idle+0x8>
   1ac68:	e7ec      	b.n	1ac44 <idle+0x4>
   1ac6a:	bf00      	nop
   1ac6c:	20003548 	.word	0x20003548

0001ac70 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ac70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ac74:	b083      	sub	sp, #12
   1ac76:	4604      	mov	r4, r0
   1ac78:	461d      	mov	r5, r3
   1ac7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac7e:	f3ef 8711 	mrs	r7, BASEPRI
   1ac82:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac86:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ac8a:	68c1      	ldr	r1, [r0, #12]
   1ac8c:	b999      	cbnz	r1, 1acb6 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1ac8e:	2900      	cmp	r1, #0
   1ac90:	d14f      	bne.n	1ad32 <z_impl_k_mutex_lock+0xc2>
   1ac92:	4b3a      	ldr	r3, [pc, #232]	; (1ad7c <z_impl_k_mutex_lock+0x10c>)
   1ac94:	689b      	ldr	r3, [r3, #8]
   1ac96:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ac9a:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1ac9c:	3101      	adds	r1, #1
   1ac9e:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1aca0:	4b36      	ldr	r3, [pc, #216]	; (1ad7c <z_impl_k_mutex_lock+0x10c>)
   1aca2:	689b      	ldr	r3, [r3, #8]
   1aca4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1aca6:	f387 8811 	msr	BASEPRI, r7
   1acaa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1acae:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1acb0:	b003      	add	sp, #12
   1acb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1acb6:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1acb8:	6882      	ldr	r2, [r0, #8]
   1acba:	4b30      	ldr	r3, [pc, #192]	; (1ad7c <z_impl_k_mutex_lock+0x10c>)
   1acbc:	689b      	ldr	r3, [r3, #8]
   1acbe:	429a      	cmp	r2, r3
   1acc0:	d0e5      	beq.n	1ac8e <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1acc2:	ea55 0106 	orrs.w	r1, r5, r6
   1acc6:	bf0c      	ite	eq
   1acc8:	f04f 0801 	moveq.w	r8, #1
   1accc:	f04f 0800 	movne.w	r8, #0
   1acd0:	d031      	beq.n	1ad36 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1acd2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1acd6:	4649      	mov	r1, r9
   1acd8:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1acdc:	f009 ffa2 	bl	24c24 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ace0:	4581      	cmp	r9, r0
   1ace2:	dc2f      	bgt.n	1ad44 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1ace4:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ace8:	9600      	str	r6, [sp, #0]
   1acea:	9501      	str	r5, [sp, #4]
   1acec:	4622      	mov	r2, r4
   1acee:	4639      	mov	r1, r7
   1acf0:	4823      	ldr	r0, [pc, #140]	; (1ad80 <z_impl_k_mutex_lock+0x110>)
   1acf2:	f000 fcad 	bl	1b650 <z_pend_curr>
	if (got_mutex == 0) {
   1acf6:	2800      	cmp	r0, #0
   1acf8:	d0da      	beq.n	1acb0 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1acfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1acfe:	f3ef 8511 	mrs	r5, BASEPRI
   1ad02:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad06:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ad0a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad0c:	429c      	cmp	r4, r3
   1ad0e:	d01f      	beq.n	1ad50 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ad10:	b1f3      	cbz	r3, 1ad50 <z_impl_k_mutex_lock+0xe0>
   1ad12:	6921      	ldr	r1, [r4, #16]
   1ad14:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1ad18:	f009 ff84 	bl	24c24 <new_prio_for_inheritance>
   1ad1c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ad1e:	4620      	mov	r0, r4
   1ad20:	f009 ff8b 	bl	24c3a <adjust_owner_prio>
   1ad24:	b9b0      	cbnz	r0, 1ad54 <z_impl_k_mutex_lock+0xe4>
   1ad26:	f1b9 0f00 	cmp.w	r9, #0
   1ad2a:	d015      	beq.n	1ad58 <z_impl_k_mutex_lock+0xe8>
   1ad2c:	f04f 0801 	mov.w	r8, #1
   1ad30:	e012      	b.n	1ad58 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1ad32:	6923      	ldr	r3, [r4, #16]
   1ad34:	e7b1      	b.n	1ac9a <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1ad36:	f387 8811 	msr	BASEPRI, r7
   1ad3a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1ad3e:	f06f 000f 	mvn.w	r0, #15
   1ad42:	e7b5      	b.n	1acb0 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1ad44:	4601      	mov	r1, r0
   1ad46:	4620      	mov	r0, r4
   1ad48:	f009 ff77 	bl	24c3a <adjust_owner_prio>
   1ad4c:	4681      	mov	r9, r0
   1ad4e:	e7cb      	b.n	1ace8 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ad50:	6921      	ldr	r1, [r4, #16]
   1ad52:	e7e4      	b.n	1ad1e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ad54:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1ad58:	f1b8 0f00 	cmp.w	r8, #0
   1ad5c:	d106      	bne.n	1ad6c <z_impl_k_mutex_lock+0xfc>
   1ad5e:	f385 8811 	msr	BASEPRI, r5
   1ad62:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1ad66:	f06f 000a 	mvn.w	r0, #10
   1ad6a:	e7a1      	b.n	1acb0 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1ad6c:	4629      	mov	r1, r5
   1ad6e:	4804      	ldr	r0, [pc, #16]	; (1ad80 <z_impl_k_mutex_lock+0x110>)
   1ad70:	f000 fb0a 	bl	1b388 <z_reschedule>
	return -EAGAIN;
   1ad74:	f06f 000a 	mvn.w	r0, #10
   1ad78:	e79a      	b.n	1acb0 <z_impl_k_mutex_lock+0x40>
   1ad7a:	bf00      	nop
   1ad7c:	20003548 	.word	0x20003548
   1ad80:	20003574 	.word	0x20003574

0001ad84 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1ad84:	6882      	ldr	r2, [r0, #8]
   1ad86:	2a00      	cmp	r2, #0
   1ad88:	d035      	beq.n	1adf6 <z_impl_k_mutex_unlock+0x72>
{
   1ad8a:	b538      	push	{r3, r4, r5, lr}
   1ad8c:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ad8e:	4b1d      	ldr	r3, [pc, #116]	; (1ae04 <z_impl_k_mutex_unlock+0x80>)
   1ad90:	689b      	ldr	r3, [r3, #8]
   1ad92:	429a      	cmp	r2, r3
   1ad94:	d132      	bne.n	1adfc <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1ad96:	7bda      	ldrb	r2, [r3, #15]
   1ad98:	3a01      	subs	r2, #1
   1ad9a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1ad9c:	68c3      	ldr	r3, [r0, #12]
   1ad9e:	2b01      	cmp	r3, #1
   1ada0:	d905      	bls.n	1adae <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ada2:	3b01      	subs	r3, #1
   1ada4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1ada6:	f000 fd09 	bl	1b7bc <k_sched_unlock>

	return 0;
   1adaa:	2000      	movs	r0, #0
}
   1adac:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1adae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1adb2:	f3ef 8511 	mrs	r5, BASEPRI
   1adb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1adba:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1adbe:	6901      	ldr	r1, [r0, #16]
   1adc0:	f009 ff3b 	bl	24c3a <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1adc4:	4620      	mov	r0, r4
   1adc6:	f00a fa97 	bl	252f8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1adca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1adcc:	b160      	cbz	r0, 1ade8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1adce:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1add2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1add4:	2300      	movs	r3, #0
   1add6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1adda:	f00a f9cb 	bl	25174 <z_ready_thread>
		z_reschedule(&lock, key);
   1adde:	4629      	mov	r1, r5
   1ade0:	4809      	ldr	r0, [pc, #36]	; (1ae08 <z_impl_k_mutex_unlock+0x84>)
   1ade2:	f000 fad1 	bl	1b388 <z_reschedule>
   1ade6:	e7de      	b.n	1ada6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1ade8:	2300      	movs	r3, #0
   1adea:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1adec:	f385 8811 	msr	BASEPRI, r5
   1adf0:	f3bf 8f6f 	isb	sy
   1adf4:	e7d7      	b.n	1ada6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1adf6:	f06f 0015 	mvn.w	r0, #21
}
   1adfa:	4770      	bx	lr
		return -EPERM;
   1adfc:	f04f 30ff 	mov.w	r0, #4294967295
   1ae00:	e7d4      	b.n	1adac <z_impl_k_mutex_unlock+0x28>
   1ae02:	bf00      	nop
   1ae04:	20003548 	.word	0x20003548
   1ae08:	20003574 	.word	0x20003574

0001ae0c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1ae0c:	b5d0      	push	{r4, r6, r7, lr}
   1ae0e:	b082      	sub	sp, #8
   1ae10:	4601      	mov	r1, r0
   1ae12:	4616      	mov	r6, r2
   1ae14:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ae16:	4602      	mov	r2, r0
	__asm__ volatile(
   1ae18:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae1c:	f3ef 8411 	mrs	r4, BASEPRI
   1ae20:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae24:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1ae28:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ae2c:	b188      	cbz	r0, 1ae52 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ae2e:	6803      	ldr	r3, [r0, #0]
   1ae30:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1ae34:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1ae36:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ae38:	4290      	cmp	r0, r2
   1ae3a:	d008      	beq.n	1ae4e <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ae3c:	2101      	movs	r1, #1
   1ae3e:	f009 ff81 	bl	24d44 <z_queue_node_peek>
	__asm__ volatile(
   1ae42:	f384 8811 	msr	BASEPRI, r4
   1ae46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ae4a:	b002      	add	sp, #8
   1ae4c:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1ae4e:	604b      	str	r3, [r1, #4]
}
   1ae50:	e7f4      	b.n	1ae3c <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ae52:	ea56 0307 	orrs.w	r3, r6, r7
   1ae56:	d00a      	beq.n	1ae6e <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1ae58:	e9cd 6700 	strd	r6, r7, [sp]
   1ae5c:	4621      	mov	r1, r4
   1ae5e:	4610      	mov	r0, r2
   1ae60:	f000 fbf6 	bl	1b650 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1ae64:	b948      	cbnz	r0, 1ae7a <z_impl_k_queue_get+0x6e>
   1ae66:	4b06      	ldr	r3, [pc, #24]	; (1ae80 <z_impl_k_queue_get+0x74>)
   1ae68:	689b      	ldr	r3, [r3, #8]
   1ae6a:	6958      	ldr	r0, [r3, #20]
   1ae6c:	e7ed      	b.n	1ae4a <z_impl_k_queue_get+0x3e>
   1ae6e:	f384 8811 	msr	BASEPRI, r4
   1ae72:	f3bf 8f6f 	isb	sy
		return NULL;
   1ae76:	2000      	movs	r0, #0
   1ae78:	e7e7      	b.n	1ae4a <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1ae7a:	2000      	movs	r0, #0
   1ae7c:	e7e5      	b.n	1ae4a <z_impl_k_queue_get+0x3e>
   1ae7e:	bf00      	nop
   1ae80:	20003548 	.word	0x20003548

0001ae84 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ae84:	b538      	push	{r3, r4, r5, lr}
   1ae86:	4604      	mov	r4, r0
	__asm__ volatile(
   1ae88:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae8c:	f3ef 8511 	mrs	r5, BASEPRI
   1ae90:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae94:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1ae98:	f00a fa2e 	bl	252f8 <z_unpend_first_thread>

	if (thread != NULL) {
   1ae9c:	b148      	cbz	r0, 1aeb2 <z_impl_k_sem_give+0x2e>
   1ae9e:	2200      	movs	r2, #0
   1aea0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1aea4:	f00a f966 	bl	25174 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1aea8:	4629      	mov	r1, r5
   1aeaa:	4809      	ldr	r0, [pc, #36]	; (1aed0 <z_impl_k_sem_give+0x4c>)
   1aeac:	f000 fa6c 	bl	1b388 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1aeb0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1aeb2:	68a3      	ldr	r3, [r4, #8]
   1aeb4:	68e2      	ldr	r2, [r4, #12]
   1aeb6:	4293      	cmp	r3, r2
   1aeb8:	d008      	beq.n	1aecc <z_impl_k_sem_give+0x48>
   1aeba:	2201      	movs	r2, #1
   1aebc:	4413      	add	r3, r2
   1aebe:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1aec0:	2102      	movs	r1, #2
   1aec2:	f104 0010 	add.w	r0, r4, #16
   1aec6:	f00a fbf2 	bl	256ae <z_handle_obj_poll_events>
}
   1aeca:	e7ed      	b.n	1aea8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1aecc:	2200      	movs	r2, #0
   1aece:	e7f5      	b.n	1aebc <z_impl_k_sem_give+0x38>
   1aed0:	20003574 	.word	0x20003574

0001aed4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1aed4:	b530      	push	{r4, r5, lr}
   1aed6:	b083      	sub	sp, #12
   1aed8:	461d      	mov	r5, r3
   1aeda:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aede:	f3ef 8111 	mrs	r1, BASEPRI
   1aee2:	f383 8812 	msr	BASEPRI_MAX, r3
   1aee6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1aeea:	6883      	ldr	r3, [r0, #8]
   1aeec:	b143      	cbz	r3, 1af00 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1aeee:	3b01      	subs	r3, #1
   1aef0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1aef2:	f381 8811 	msr	BASEPRI, r1
   1aef6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1aefa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1aefc:	b003      	add	sp, #12
   1aefe:	bd30      	pop	{r4, r5, pc}
   1af00:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1af02:	ea54 0305 	orrs.w	r3, r4, r5
   1af06:	d006      	beq.n	1af16 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1af08:	e9cd 4500 	strd	r4, r5, [sp]
   1af0c:	4602      	mov	r2, r0
   1af0e:	4805      	ldr	r0, [pc, #20]	; (1af24 <z_impl_k_sem_take+0x50>)
   1af10:	f000 fb9e 	bl	1b650 <z_pend_curr>
	return ret;
   1af14:	e7f2      	b.n	1aefc <z_impl_k_sem_take+0x28>
   1af16:	f381 8811 	msr	BASEPRI, r1
   1af1a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1af1e:	f06f 000f 	mvn.w	r0, #15
   1af22:	e7eb      	b.n	1aefc <z_impl_k_sem_take+0x28>
   1af24:	20003574 	.word	0x20003574

0001af28 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1af28:	b510      	push	{r4, lr}
   1af2a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1af2c:	4b08      	ldr	r3, [pc, #32]	; (1af50 <k_sys_work_q_init+0x28>)
   1af2e:	9302      	str	r3, [sp, #8]
   1af30:	2400      	movs	r4, #0
   1af32:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1af36:	ab02      	add	r3, sp, #8
   1af38:	9300      	str	r3, [sp, #0]
   1af3a:	f04f 33ff 	mov.w	r3, #4294967295
   1af3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1af42:	4904      	ldr	r1, [pc, #16]	; (1af54 <k_sys_work_q_init+0x2c>)
   1af44:	4804      	ldr	r0, [pc, #16]	; (1af58 <k_sys_work_q_init+0x30>)
   1af46:	f000 f96f 	bl	1b228 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1af4a:	4620      	mov	r0, r4
   1af4c:	b004      	add	sp, #16
   1af4e:	bd10      	pop	{r4, pc}
   1af50:	00027134 	.word	0x00027134
   1af54:	20006560 	.word	0x20006560
   1af58:	20002140 	.word	0x20002140

0001af5c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af5e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1af60:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1af62:	f013 0f02 	tst.w	r3, #2
   1af66:	d15b      	bne.n	1b020 <submit_to_queue_locked+0xc4>
   1af68:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1af6a:	f013 0f04 	tst.w	r3, #4
   1af6e:	d15c      	bne.n	1b02a <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1af70:	680b      	ldr	r3, [r1, #0]
   1af72:	2b00      	cmp	r3, #0
   1af74:	d037      	beq.n	1afe6 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1af76:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1af78:	f013 0f01 	tst.w	r3, #1
   1af7c:	d036      	beq.n	1afec <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1af7e:	68a3      	ldr	r3, [r4, #8]
   1af80:	602b      	str	r3, [r5, #0]
			ret = 2;
   1af82:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1af84:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1af86:	2e00      	cmp	r6, #0
   1af88:	d03e      	beq.n	1b008 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1af8a:	4b29      	ldr	r3, [pc, #164]	; (1b030 <submit_to_queue_locked+0xd4>)
   1af8c:	689b      	ldr	r3, [r3, #8]
   1af8e:	42b3      	cmp	r3, r6
   1af90:	d02e      	beq.n	1aff0 <submit_to_queue_locked+0x94>
   1af92:	2300      	movs	r3, #0
   1af94:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1af96:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1af9a:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1af9e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1afa2:	f013 0f01 	tst.w	r3, #1
   1afa6:	d032      	beq.n	1b00e <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1afa8:	b101      	cbz	r1, 1afac <submit_to_queue_locked+0x50>
   1afaa:	b39a      	cbz	r2, 1b014 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1afac:	b100      	cbz	r0, 1afb0 <submit_to_queue_locked+0x54>
   1afae:	b3a1      	cbz	r1, 1b01a <submit_to_queue_locked+0xbe>
	parent->next = child;
   1afb0:	2300      	movs	r3, #0
   1afb2:	6023      	str	r3, [r4, #0]
	return list->tail;
   1afb4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1afb8:	b30b      	cbz	r3, 1affe <submit_to_queue_locked+0xa2>
	parent->next = child;
   1afba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1afbc:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1afc0:	2200      	movs	r2, #0
   1afc2:	4611      	mov	r1, r2
   1afc4:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1afc8:	f00a f9d6 	bl	25378 <z_sched_wake>
		ret = 1;
   1afcc:	2001      	movs	r0, #1

		if (rc < 0) {
   1afce:	2800      	cmp	r0, #0
   1afd0:	db06      	blt.n	1afe0 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1afd2:	68e3      	ldr	r3, [r4, #12]
   1afd4:	f043 0304 	orr.w	r3, r3, #4
   1afd8:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1afda:	682b      	ldr	r3, [r5, #0]
   1afdc:	60a3      	str	r3, [r4, #8]
   1afde:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1afe0:	2800      	cmp	r0, #0
   1afe2:	dc21      	bgt.n	1b028 <submit_to_queue_locked+0xcc>
   1afe4:	e01e      	b.n	1b024 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1afe6:	6883      	ldr	r3, [r0, #8]
   1afe8:	600b      	str	r3, [r1, #0]
   1afea:	e7c4      	b.n	1af76 <submit_to_queue_locked+0x1a>
		ret = 1;
   1afec:	2701      	movs	r7, #1
   1afee:	e7c9      	b.n	1af84 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1aff0:	f009 fddb 	bl	24baa <k_is_in_isr>
   1aff4:	b908      	cbnz	r0, 1affa <submit_to_queue_locked+0x9e>
   1aff6:	2301      	movs	r3, #1
   1aff8:	e7cc      	b.n	1af94 <submit_to_queue_locked+0x38>
   1affa:	2300      	movs	r3, #0
   1affc:	e7ca      	b.n	1af94 <submit_to_queue_locked+0x38>
   1affe:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1b002:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1b006:	e7db      	b.n	1afc0 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1b008:	f06f 0015 	mvn.w	r0, #21
   1b00c:	e7df      	b.n	1afce <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1b00e:	f06f 0012 	mvn.w	r0, #18
   1b012:	e7dc      	b.n	1afce <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1b014:	f06f 000f 	mvn.w	r0, #15
   1b018:	e7d9      	b.n	1afce <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1b01a:	f06f 000f 	mvn.w	r0, #15
   1b01e:	e7d6      	b.n	1afce <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1b020:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1b024:	2300      	movs	r3, #0
   1b026:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1b028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1b02a:	2000      	movs	r0, #0
   1b02c:	e7fa      	b.n	1b024 <submit_to_queue_locked+0xc8>
   1b02e:	bf00      	nop
   1b030:	20003548 	.word	0x20003548

0001b034 <finalize_cancel_locked>:
{
   1b034:	b570      	push	{r4, r5, r6, lr}
   1b036:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1b038:	68c3      	ldr	r3, [r0, #12]
   1b03a:	f023 0302 	bic.w	r3, r3, #2
   1b03e:	60c3      	str	r3, [r0, #12]
	return list->head;
   1b040:	4b19      	ldr	r3, [pc, #100]	; (1b0a8 <finalize_cancel_locked+0x74>)
   1b042:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b044:	b1e8      	cbz	r0, 1b082 <finalize_cancel_locked+0x4e>
   1b046:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b048:	b100      	cbz	r0, 1b04c <finalize_cancel_locked+0x18>
	return node->next;
   1b04a:	6804      	ldr	r4, [r0, #0]
   1b04c:	2600      	movs	r6, #0
   1b04e:	e01d      	b.n	1b08c <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1b050:	b15e      	cbz	r6, 1b06a <finalize_cancel_locked+0x36>
	return node->next;
   1b052:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1b054:	6033      	str	r3, [r6, #0]
	return list->tail;
   1b056:	4b14      	ldr	r3, [pc, #80]	; (1b0a8 <finalize_cancel_locked+0x74>)
   1b058:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b05a:	4298      	cmp	r0, r3
   1b05c:	d00e      	beq.n	1b07c <finalize_cancel_locked+0x48>
	parent->next = child;
   1b05e:	2300      	movs	r3, #0
   1b060:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b064:	f7ff ff0e 	bl	1ae84 <z_impl_k_sem_give>
}
   1b068:	e015      	b.n	1b096 <finalize_cancel_locked+0x62>
	return node->next;
   1b06a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1b06c:	4b0e      	ldr	r3, [pc, #56]	; (1b0a8 <finalize_cancel_locked+0x74>)
   1b06e:	601a      	str	r2, [r3, #0]
	return list->tail;
   1b070:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b072:	4298      	cmp	r0, r3
   1b074:	d1f3      	bne.n	1b05e <finalize_cancel_locked+0x2a>
	list->tail = node;
   1b076:	4b0c      	ldr	r3, [pc, #48]	; (1b0a8 <finalize_cancel_locked+0x74>)
   1b078:	605a      	str	r2, [r3, #4]
}
   1b07a:	e7f0      	b.n	1b05e <finalize_cancel_locked+0x2a>
	list->tail = node;
   1b07c:	4b0a      	ldr	r3, [pc, #40]	; (1b0a8 <finalize_cancel_locked+0x74>)
   1b07e:	605e      	str	r6, [r3, #4]
}
   1b080:	e7ed      	b.n	1b05e <finalize_cancel_locked+0x2a>
   1b082:	4604      	mov	r4, r0
   1b084:	e7e2      	b.n	1b04c <finalize_cancel_locked+0x18>
   1b086:	4623      	mov	r3, r4
   1b088:	4620      	mov	r0, r4
   1b08a:	461c      	mov	r4, r3
   1b08c:	b150      	cbz	r0, 1b0a4 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1b08e:	6843      	ldr	r3, [r0, #4]
   1b090:	42ab      	cmp	r3, r5
   1b092:	d0dd      	beq.n	1b050 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1b094:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b096:	2c00      	cmp	r4, #0
   1b098:	d0f5      	beq.n	1b086 <finalize_cancel_locked+0x52>
   1b09a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b09c:	2c00      	cmp	r4, #0
   1b09e:	d0f3      	beq.n	1b088 <finalize_cancel_locked+0x54>
	return node->next;
   1b0a0:	6823      	ldr	r3, [r4, #0]
   1b0a2:	e7f1      	b.n	1b088 <finalize_cancel_locked+0x54>
}
   1b0a4:	bd70      	pop	{r4, r5, r6, pc}
   1b0a6:	bf00      	nop
   1b0a8:	20003574 	.word	0x20003574

0001b0ac <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1b0ac:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b0ae:	68c5      	ldr	r5, [r0, #12]
   1b0b0:	f015 0f02 	tst.w	r5, #2
   1b0b4:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1b0b8:	d101      	bne.n	1b0be <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1b0ba:	4628      	mov	r0, r5
   1b0bc:	bd70      	pop	{r4, r5, r6, pc}
   1b0be:	4604      	mov	r4, r0
   1b0c0:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1b0c2:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b0c6:	2201      	movs	r2, #1
   1b0c8:	2100      	movs	r1, #0
   1b0ca:	f009 fea9 	bl	24e20 <z_impl_k_sem_init>
	canceler->work = work;
   1b0ce:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1b0d0:	2300      	movs	r3, #0
   1b0d2:	6033      	str	r3, [r6, #0]
	return list->tail;
   1b0d4:	4b05      	ldr	r3, [pc, #20]	; (1b0ec <cancel_sync_locked+0x40>)
   1b0d6:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b0d8:	b11b      	cbz	r3, 1b0e2 <cancel_sync_locked+0x36>
	parent->next = child;
   1b0da:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1b0dc:	4b03      	ldr	r3, [pc, #12]	; (1b0ec <cancel_sync_locked+0x40>)
   1b0de:	605e      	str	r6, [r3, #4]
}
   1b0e0:	e7eb      	b.n	1b0ba <cancel_sync_locked+0xe>
   1b0e2:	4b02      	ldr	r3, [pc, #8]	; (1b0ec <cancel_sync_locked+0x40>)
   1b0e4:	605e      	str	r6, [r3, #4]
	list->head = node;
   1b0e6:	601e      	str	r6, [r3, #0]
}
   1b0e8:	e7e7      	b.n	1b0ba <cancel_sync_locked+0xe>
   1b0ea:	bf00      	nop
   1b0ec:	20003574 	.word	0x20003574

0001b0f0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0f2:	b085      	sub	sp, #20
   1b0f4:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1b0f6:	e016      	b.n	1b126 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1b0f8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1b0fc:	f023 0204 	bic.w	r2, r3, #4
   1b100:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1b104:	f013 0f04 	tst.w	r3, #4
   1b108:	d158      	bne.n	1b1bc <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b10a:	2300      	movs	r3, #0
   1b10c:	9302      	str	r3, [sp, #8]
   1b10e:	f04f 32ff 	mov.w	r2, #4294967295
   1b112:	f04f 33ff 	mov.w	r3, #4294967295
   1b116:	e9cd 2300 	strd	r2, r3, [sp]
   1b11a:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1b11e:	4631      	mov	r1, r6
   1b120:	482e      	ldr	r0, [pc, #184]	; (1b1dc <work_queue_main+0xec>)
   1b122:	f000 fcc9 	bl	1bab8 <z_sched_wait>
	__asm__ volatile(
   1b126:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b12a:	f3ef 8611 	mrs	r6, BASEPRI
   1b12e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b132:	f3bf 8f6f 	isb	sy
	return list->head;
   1b136:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1b13a:	2c00      	cmp	r4, #0
   1b13c:	d0dc      	beq.n	1b0f8 <work_queue_main+0x8>
	return node->next;
   1b13e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1b140:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1b144:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b148:	4294      	cmp	r4, r2
   1b14a:	d034      	beq.n	1b1b6 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1b14c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1b150:	f043 0302 	orr.w	r3, r3, #2
   1b154:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1b158:	68e3      	ldr	r3, [r4, #12]
   1b15a:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1b15e:	f023 0304 	bic.w	r3, r3, #4
   1b162:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1b164:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1b166:	2c00      	cmp	r4, #0
   1b168:	d0cf      	beq.n	1b10a <work_queue_main+0x1a>
	__asm__ volatile(
   1b16a:	f386 8811 	msr	BASEPRI, r6
   1b16e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1b172:	4620      	mov	r0, r4
   1b174:	4798      	blx	r3
	__asm__ volatile(
   1b176:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b17a:	f3ef 8611 	mrs	r6, BASEPRI
   1b17e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b182:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b186:	68e3      	ldr	r3, [r4, #12]
   1b188:	f023 0301 	bic.w	r3, r3, #1
   1b18c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b18e:	f013 0f02 	tst.w	r3, #2
   1b192:	d11e      	bne.n	1b1d2 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1b194:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1b198:	f023 0302 	bic.w	r3, r3, #2
   1b19c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1b1a0:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1b1a4:	f386 8811 	msr	BASEPRI, r6
   1b1a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1b1ac:	2b00      	cmp	r3, #0
   1b1ae:	d1ba      	bne.n	1b126 <work_queue_main+0x36>
	z_impl_k_yield();
   1b1b0:	f000 fb84 	bl	1b8bc <z_impl_k_yield>
}
   1b1b4:	e7b7      	b.n	1b126 <work_queue_main+0x36>
	list->tail = node;
   1b1b6:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1b1ba:	e7c7      	b.n	1b14c <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b1bc:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b1c0:	2200      	movs	r2, #0
   1b1c2:	2101      	movs	r1, #1
   1b1c4:	4638      	mov	r0, r7
   1b1c6:	f00a f8d7 	bl	25378 <z_sched_wake>
   1b1ca:	2800      	cmp	r0, #0
   1b1cc:	d1f8      	bne.n	1b1c0 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1b1ce:	2300      	movs	r3, #0
   1b1d0:	e7c9      	b.n	1b166 <work_queue_main+0x76>
			finalize_cancel_locked(work);
   1b1d2:	4620      	mov	r0, r4
   1b1d4:	f7ff ff2e 	bl	1b034 <finalize_cancel_locked>
   1b1d8:	e7dc      	b.n	1b194 <work_queue_main+0xa4>
   1b1da:	bf00      	nop
   1b1dc:	20003574 	.word	0x20003574

0001b1e0 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b1e0:	b570      	push	{r4, r5, r6, lr}
   1b1e2:	4606      	mov	r6, r0
   1b1e4:	4608      	mov	r0, r1
   1b1e6:	4614      	mov	r4, r2
   1b1e8:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b1ea:	ea54 0305 	orrs.w	r3, r4, r5
   1b1ee:	d00c      	beq.n	1b20a <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1b1f0:	68cb      	ldr	r3, [r1, #12]
   1b1f2:	f043 0308 	orr.w	r3, r3, #8
   1b1f6:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1b1f8:	6833      	ldr	r3, [r6, #0]
   1b1fa:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b1fc:	462b      	mov	r3, r5
   1b1fe:	4905      	ldr	r1, [pc, #20]	; (1b214 <schedule_for_queue_locked+0x34>)
   1b200:	3010      	adds	r0, #16
   1b202:	f000 fccd 	bl	1bba0 <z_add_timeout>

	return ret;
   1b206:	2001      	movs	r0, #1
}
   1b208:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1b20a:	4631      	mov	r1, r6
   1b20c:	f7ff fea6 	bl	1af5c <submit_to_queue_locked>
   1b210:	e7fa      	b.n	1b208 <schedule_for_queue_locked+0x28>
   1b212:	bf00      	nop
   1b214:	00024ecb 	.word	0x00024ecb

0001b218 <k_work_submit>:
{
   1b218:	b508      	push	{r3, lr}
   1b21a:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b21c:	4801      	ldr	r0, [pc, #4]	; (1b224 <k_work_submit+0xc>)
   1b21e:	f009 fe8e 	bl	24f3e <k_work_submit_to_queue>
}
   1b222:	bd08      	pop	{r3, pc}
   1b224:	20002140 	.word	0x20002140

0001b228 <k_work_queue_start>:
{
   1b228:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b22a:	b089      	sub	sp, #36	; 0x24
   1b22c:	4604      	mov	r4, r0
   1b22e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1b230:	2000      	movs	r0, #0
   1b232:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1b236:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1b23a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1b23e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1b242:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1b246:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1b24a:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1b24e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1b252:	b1fd      	cbz	r5, 1b294 <k_work_queue_start+0x6c>
   1b254:	7928      	ldrb	r0, [r5, #4]
   1b256:	b9f8      	cbnz	r0, 1b298 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b258:	2001      	movs	r0, #1
	*flagp = flags;
   1b25a:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b25e:	f04f 36ff 	mov.w	r6, #4294967295
   1b262:	f04f 37ff 	mov.w	r7, #4294967295
   1b266:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b26a:	2000      	movs	r0, #0
   1b26c:	9004      	str	r0, [sp, #16]
   1b26e:	9303      	str	r3, [sp, #12]
   1b270:	9002      	str	r0, [sp, #8]
   1b272:	9001      	str	r0, [sp, #4]
   1b274:	9400      	str	r4, [sp, #0]
   1b276:	4b0a      	ldr	r3, [pc, #40]	; (1b2a0 <k_work_queue_start+0x78>)
   1b278:	4620      	mov	r0, r4
   1b27a:	f009 fcab 	bl	24bd4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b27e:	b125      	cbz	r5, 1b28a <k_work_queue_start+0x62>
   1b280:	6829      	ldr	r1, [r5, #0]
   1b282:	b111      	cbz	r1, 1b28a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1b284:	4620      	mov	r0, r4
   1b286:	f7ff fc05 	bl	1aa94 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b28a:	4620      	mov	r0, r4
   1b28c:	f009 fc93 	bl	24bb6 <z_impl_k_thread_start>
}
   1b290:	b009      	add	sp, #36	; 0x24
   1b292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b294:	2001      	movs	r0, #1
   1b296:	e7e0      	b.n	1b25a <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b298:	f240 1001 	movw	r0, #257	; 0x101
   1b29c:	e7dd      	b.n	1b25a <k_work_queue_start+0x32>
   1b29e:	bf00      	nop
   1b2a0:	0001b0f1 	.word	0x0001b0f1

0001b2a4 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b2a4:	b508      	push	{r3, lr}
   1b2a6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b2a8:	4801      	ldr	r0, [pc, #4]	; (1b2b0 <k_work_schedule+0xc>)
   1b2aa:	f009 fe74 	bl	24f96 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1b2ae:	bd08      	pop	{r3, pc}
   1b2b0:	20002140 	.word	0x20002140

0001b2b4 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b2b4:	b508      	push	{r3, lr}
   1b2b6:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b2b8:	4801      	ldr	r0, [pc, #4]	; (1b2c0 <k_work_reschedule+0xc>)
   1b2ba:	f009 fe86 	bl	24fca <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1b2be:	bd08      	pop	{r3, pc}
   1b2c0:	20002140 	.word	0x20002140

0001b2c4 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1b2c4:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b2ca:	bf08      	it	eq
   1b2cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1b2d0:	d100      	bne.n	1b2d4 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1b2d2:	bd38      	pop	{r3, r4, r5, pc}
   1b2d4:	4902      	ldr	r1, [pc, #8]	; (1b2e0 <add_thread_timeout+0x1c>)
   1b2d6:	3018      	adds	r0, #24
   1b2d8:	f000 fc62 	bl	1bba0 <z_add_timeout>
   1b2dc:	e7f9      	b.n	1b2d2 <add_thread_timeout+0xe>
   1b2de:	bf00      	nop
   1b2e0:	000251ad 	.word	0x000251ad

0001b2e4 <z_reset_time_slice>:
{
   1b2e4:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1b2e6:	4b08      	ldr	r3, [pc, #32]	; (1b308 <z_reset_time_slice+0x24>)
   1b2e8:	681b      	ldr	r3, [r3, #0]
   1b2ea:	b903      	cbnz	r3, 1b2ee <z_reset_time_slice+0xa>
}
   1b2ec:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b2ee:	f7fd fd8b 	bl	18e08 <sys_clock_elapsed>
   1b2f2:	4603      	mov	r3, r0
   1b2f4:	4a04      	ldr	r2, [pc, #16]	; (1b308 <z_reset_time_slice+0x24>)
   1b2f6:	6810      	ldr	r0, [r2, #0]
   1b2f8:	4403      	add	r3, r0
   1b2fa:	4a04      	ldr	r2, [pc, #16]	; (1b30c <z_reset_time_slice+0x28>)
   1b2fc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b2fe:	2100      	movs	r1, #0
   1b300:	f00a f8bc 	bl	2547c <z_set_timeout_expiry>
}
   1b304:	e7f2      	b.n	1b2ec <z_reset_time_slice+0x8>
   1b306:	bf00      	nop
   1b308:	20003584 	.word	0x20003584
   1b30c:	20003548 	.word	0x20003548

0001b310 <k_sched_time_slice_set>:
{
   1b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b314:	4606      	mov	r6, r0
   1b316:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1b318:	2300      	movs	r3, #0
	__asm__ volatile(
   1b31a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b31e:	f3ef 8711 	mrs	r7, BASEPRI
   1b322:	f382 8812 	msr	BASEPRI_MAX, r2
   1b326:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b32a:	e009      	b.n	1b340 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1b32c:	4b13      	ldr	r3, [pc, #76]	; (1b37c <k_sched_time_slice_set+0x6c>)
   1b32e:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1b332:	f7ff ffd7 	bl	1b2e4 <z_reset_time_slice>
	__asm__ volatile(
   1b336:	f387 8811 	msr	BASEPRI, r7
   1b33a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b33e:	2301      	movs	r3, #1
   1b340:	b9cb      	cbnz	r3, 1b376 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1b342:	2300      	movs	r3, #0
   1b344:	4a0e      	ldr	r2, [pc, #56]	; (1b380 <k_sched_time_slice_set+0x70>)
   1b346:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b348:	0c75      	lsrs	r5, r6, #17
   1b34a:	03f4      	lsls	r4, r6, #15
   1b34c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b354:	2300      	movs	r3, #0
   1b356:	1820      	adds	r0, r4, r0
   1b358:	f04f 0100 	mov.w	r1, #0
   1b35c:	eb45 0101 	adc.w	r1, r5, r1
   1b360:	f7e5 fd44 	bl	dec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b364:	4b07      	ldr	r3, [pc, #28]	; (1b384 <k_sched_time_slice_set+0x74>)
   1b366:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b368:	2e00      	cmp	r6, #0
   1b36a:	dddf      	ble.n	1b32c <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1b36c:	2802      	cmp	r0, #2
   1b36e:	bfb8      	it	lt
   1b370:	2002      	movlt	r0, #2
   1b372:	6018      	str	r0, [r3, #0]
   1b374:	e7da      	b.n	1b32c <k_sched_time_slice_set+0x1c>
}
   1b376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b37a:	bf00      	nop
   1b37c:	20003580 	.word	0x20003580
   1b380:	20003548 	.word	0x20003548
   1b384:	20003584 	.word	0x20003584

0001b388 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1b388:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1b38a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b38c:	b921      	cbnz	r1, 1b398 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b38e:	f3ef 8305 	mrs	r3, IPSR
   1b392:	b913      	cbnz	r3, 1b39a <z_reschedule+0x12>
   1b394:	2101      	movs	r1, #1
   1b396:	e000      	b.n	1b39a <z_reschedule+0x12>
   1b398:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1b39a:	f011 0f01 	tst.w	r1, #1
   1b39e:	d007      	beq.n	1b3b0 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1b3a0:	4b06      	ldr	r3, [pc, #24]	; (1b3bc <z_reschedule+0x34>)
   1b3a2:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1b3a4:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1b3a6:	429a      	cmp	r2, r3
   1b3a8:	d002      	beq.n	1b3b0 <z_reschedule+0x28>
	ret = arch_swap(key);
   1b3aa:	f7f8 fb63 	bl	13a74 <arch_swap>
		z_swap(lock, key);
   1b3ae:	e003      	b.n	1b3b8 <z_reschedule+0x30>
   1b3b0:	f380 8811 	msr	BASEPRI, r0
   1b3b4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b3b8:	bd08      	pop	{r3, pc}
   1b3ba:	bf00      	nop
   1b3bc:	20003548 	.word	0x20003548

0001b3c0 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1b3c0:	2300      	movs	r3, #0
	__asm__ volatile(
   1b3c2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b3c6:	f3ef 8111 	mrs	r1, BASEPRI
   1b3ca:	f382 8812 	msr	BASEPRI_MAX, r2
   1b3ce:	f3bf 8f6f 	isb	sy
   1b3d2:	b953      	cbnz	r3, 1b3ea <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1b3d4:	4b05      	ldr	r3, [pc, #20]	; (1b3ec <k_sched_lock+0x2c>)
   1b3d6:	689a      	ldr	r2, [r3, #8]
   1b3d8:	7bd3      	ldrb	r3, [r2, #15]
   1b3da:	3b01      	subs	r3, #1
   1b3dc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b3de:	f381 8811 	msr	BASEPRI, r1
   1b3e2:	f3bf 8f6f 	isb	sy
   1b3e6:	2301      	movs	r3, #1
   1b3e8:	e7f3      	b.n	1b3d2 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b3ea:	4770      	bx	lr
   1b3ec:	20003548 	.word	0x20003548

0001b3f0 <update_cache>:
{
   1b3f0:	b538      	push	{r3, r4, r5, lr}
   1b3f2:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   1b3f4:	480f      	ldr	r0, [pc, #60]	; (1b434 <update_cache+0x44>)
   1b3f6:	f009 feb6 	bl	25166 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b3fa:	4605      	mov	r5, r0
   1b3fc:	b170      	cbz	r0, 1b41c <update_cache+0x2c>
	if (preempt_ok != 0) {
   1b3fe:	b984      	cbnz	r4, 1b422 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1b400:	4b0d      	ldr	r3, [pc, #52]	; (1b438 <update_cache+0x48>)
   1b402:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1b404:	7b5a      	ldrb	r2, [r3, #13]
   1b406:	f012 0f1f 	tst.w	r2, #31
   1b40a:	d10a      	bne.n	1b422 <update_cache+0x32>
	return node->next != NULL;
   1b40c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b40e:	b942      	cbnz	r2, 1b422 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1b410:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1b412:	2a7f      	cmp	r2, #127	; 0x7f
   1b414:	d905      	bls.n	1b422 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1b416:	4a08      	ldr	r2, [pc, #32]	; (1b438 <update_cache+0x48>)
   1b418:	61d3      	str	r3, [r2, #28]
   1b41a:	e00a      	b.n	1b432 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b41c:	4b06      	ldr	r3, [pc, #24]	; (1b438 <update_cache+0x48>)
   1b41e:	68dd      	ldr	r5, [r3, #12]
   1b420:	e7ed      	b.n	1b3fe <update_cache+0xe>
		if (thread != _current) {
   1b422:	4b05      	ldr	r3, [pc, #20]	; (1b438 <update_cache+0x48>)
   1b424:	689b      	ldr	r3, [r3, #8]
   1b426:	42ab      	cmp	r3, r5
   1b428:	d001      	beq.n	1b42e <update_cache+0x3e>
			z_reset_time_slice();
   1b42a:	f7ff ff5b 	bl	1b2e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b42e:	4b02      	ldr	r3, [pc, #8]	; (1b438 <update_cache+0x48>)
   1b430:	61dd      	str	r5, [r3, #28]
}
   1b432:	bd38      	pop	{r3, r4, r5, pc}
   1b434:	20003568 	.word	0x20003568
   1b438:	20003548 	.word	0x20003548

0001b43c <move_thread_to_end_of_prio_q>:
{
   1b43c:	b538      	push	{r3, r4, r5, lr}
   1b43e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1b440:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1b442:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b446:	2b00      	cmp	r3, #0
   1b448:	db28      	blt.n	1b49c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b44a:	7b6b      	ldrb	r3, [r5, #13]
   1b44c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b450:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1b452:	4b1a      	ldr	r3, [pc, #104]	; (1b4bc <move_thread_to_end_of_prio_q+0x80>)
   1b454:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b458:	429c      	cmp	r4, r3
   1b45a:	d02d      	beq.n	1b4b8 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b45c:	b16c      	cbz	r4, 1b47a <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b45e:	4621      	mov	r1, r4
   1b460:	4628      	mov	r0, r5
   1b462:	f009 fe17 	bl	25094 <z_sched_prio_cmp>
   1b466:	2800      	cmp	r0, #0
   1b468:	dc20      	bgt.n	1b4ac <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b46a:	b134      	cbz	r4, 1b47a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1b46c:	4b13      	ldr	r3, [pc, #76]	; (1b4bc <move_thread_to_end_of_prio_q+0x80>)
   1b46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b470:	429c      	cmp	r4, r3
   1b472:	d002      	beq.n	1b47a <move_thread_to_end_of_prio_q+0x3e>
   1b474:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b476:	2c00      	cmp	r4, #0
   1b478:	d1f0      	bne.n	1b45c <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1b47a:	4b10      	ldr	r3, [pc, #64]	; (1b4bc <move_thread_to_end_of_prio_q+0x80>)
   1b47c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1b47e:	f103 0120 	add.w	r1, r3, #32
   1b482:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1b484:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1b486:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1b488:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1b48a:	4b0c      	ldr	r3, [pc, #48]	; (1b4bc <move_thread_to_end_of_prio_q+0x80>)
   1b48c:	6898      	ldr	r0, [r3, #8]
   1b48e:	42a8      	cmp	r0, r5
   1b490:	bf14      	ite	ne
   1b492:	2000      	movne	r0, #0
   1b494:	2001      	moveq	r0, #1
   1b496:	f7ff ffab 	bl	1b3f0 <update_cache>
}
   1b49a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b49c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b4a0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b4a2:	4601      	mov	r1, r0
   1b4a4:	4806      	ldr	r0, [pc, #24]	; (1b4c0 <move_thread_to_end_of_prio_q+0x84>)
   1b4a6:	f009 fe33 	bl	25110 <z_priq_dumb_remove>
}
   1b4aa:	e7ce      	b.n	1b44a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b4ac:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1b4ae:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1b4b0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1b4b2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1b4b4:	6065      	str	r5, [r4, #4]
}
   1b4b6:	e7e8      	b.n	1b48a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b4b8:	2400      	movs	r4, #0
   1b4ba:	e7cf      	b.n	1b45c <move_thread_to_end_of_prio_q+0x20>
   1b4bc:	20003548 	.word	0x20003548
   1b4c0:	20003568 	.word	0x20003568

0001b4c4 <z_time_slice>:
{
   1b4c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b4c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4ca:	f3ef 8411 	mrs	r4, BASEPRI
   1b4ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4d2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b4d6:	4b1c      	ldr	r3, [pc, #112]	; (1b548 <z_time_slice+0x84>)
   1b4d8:	689b      	ldr	r3, [r3, #8]
   1b4da:	4a1c      	ldr	r2, [pc, #112]	; (1b54c <z_time_slice+0x88>)
   1b4dc:	6812      	ldr	r2, [r2, #0]
   1b4de:	4293      	cmp	r3, r2
   1b4e0:	d01d      	beq.n	1b51e <z_time_slice+0x5a>
	pending_current = NULL;
   1b4e2:	4a1a      	ldr	r2, [pc, #104]	; (1b54c <z_time_slice+0x88>)
   1b4e4:	2100      	movs	r1, #0
   1b4e6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b4e8:	4a19      	ldr	r2, [pc, #100]	; (1b550 <z_time_slice+0x8c>)
   1b4ea:	6812      	ldr	r2, [r2, #0]
   1b4ec:	b322      	cbz	r2, 1b538 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1b4ee:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1b4f0:	2a7f      	cmp	r2, #127	; 0x7f
   1b4f2:	d821      	bhi.n	1b538 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1b4f4:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1b4f6:	f012 0f1f 	tst.w	r2, #31
   1b4fa:	d11d      	bne.n	1b538 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b4fc:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b500:	4a14      	ldr	r2, [pc, #80]	; (1b554 <z_time_slice+0x90>)
   1b502:	6812      	ldr	r2, [r2, #0]
   1b504:	4291      	cmp	r1, r2
   1b506:	db17      	blt.n	1b538 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1b508:	4a13      	ldr	r2, [pc, #76]	; (1b558 <z_time_slice+0x94>)
   1b50a:	4293      	cmp	r3, r2
   1b50c:	d014      	beq.n	1b538 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1b50e:	4a0e      	ldr	r2, [pc, #56]	; (1b548 <z_time_slice+0x84>)
   1b510:	6912      	ldr	r2, [r2, #16]
   1b512:	4282      	cmp	r2, r0
   1b514:	dd0a      	ble.n	1b52c <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1b516:	1a10      	subs	r0, r2, r0
   1b518:	4b0b      	ldr	r3, [pc, #44]	; (1b548 <z_time_slice+0x84>)
   1b51a:	6118      	str	r0, [r3, #16]
   1b51c:	e00f      	b.n	1b53e <z_time_slice+0x7a>
		z_reset_time_slice();
   1b51e:	f7ff fee1 	bl	1b2e4 <z_reset_time_slice>
	__asm__ volatile(
   1b522:	f384 8811 	msr	BASEPRI, r4
   1b526:	f3bf 8f6f 	isb	sy
		return;
   1b52a:	e00c      	b.n	1b546 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1b52c:	4618      	mov	r0, r3
   1b52e:	f7ff ff85 	bl	1b43c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1b532:	f7ff fed7 	bl	1b2e4 <z_reset_time_slice>
   1b536:	e002      	b.n	1b53e <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1b538:	4b03      	ldr	r3, [pc, #12]	; (1b548 <z_time_slice+0x84>)
   1b53a:	2200      	movs	r2, #0
   1b53c:	611a      	str	r2, [r3, #16]
   1b53e:	f384 8811 	msr	BASEPRI, r4
   1b542:	f3bf 8f6f 	isb	sy
}
   1b546:	bd10      	pop	{r4, pc}
   1b548:	20003548 	.word	0x20003548
   1b54c:	2000357c 	.word	0x2000357c
   1b550:	20003584 	.word	0x20003584
   1b554:	20003580 	.word	0x20003580
   1b558:	20001fd0 	.word	0x20001fd0

0001b55c <ready_thread>:
{
   1b55c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1b55e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b560:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b564:	2a00      	cmp	r2, #0
   1b566:	db2d      	blt.n	1b5c4 <ready_thread+0x68>
   1b568:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b56a:	f013 0f1f 	tst.w	r3, #31
   1b56e:	d105      	bne.n	1b57c <ready_thread+0x20>
	return node->next != NULL;
   1b570:	6982      	ldr	r2, [r0, #24]
   1b572:	b10a      	cbz	r2, 1b578 <ready_thread+0x1c>
   1b574:	2200      	movs	r2, #0
   1b576:	e002      	b.n	1b57e <ready_thread+0x22>
   1b578:	2201      	movs	r2, #1
   1b57a:	e000      	b.n	1b57e <ready_thread+0x22>
   1b57c:	2200      	movs	r2, #0
   1b57e:	b30a      	cbz	r2, 1b5c4 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b580:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b584:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1b586:	4b14      	ldr	r3, [pc, #80]	; (1b5d8 <ready_thread+0x7c>)
   1b588:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b58c:	429d      	cmp	r5, r3
   1b58e:	d020      	beq.n	1b5d2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b590:	b16d      	cbz	r5, 1b5ae <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b592:	4629      	mov	r1, r5
   1b594:	4620      	mov	r0, r4
   1b596:	f009 fd7d 	bl	25094 <z_sched_prio_cmp>
   1b59a:	2800      	cmp	r0, #0
   1b59c:	dc13      	bgt.n	1b5c6 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b59e:	b135      	cbz	r5, 1b5ae <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1b5a0:	4b0d      	ldr	r3, [pc, #52]	; (1b5d8 <ready_thread+0x7c>)
   1b5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b5a4:	429d      	cmp	r5, r3
   1b5a6:	d002      	beq.n	1b5ae <ready_thread+0x52>
   1b5a8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b5aa:	2d00      	cmp	r5, #0
   1b5ac:	d1f0      	bne.n	1b590 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1b5ae:	4b0a      	ldr	r3, [pc, #40]	; (1b5d8 <ready_thread+0x7c>)
   1b5b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1b5b2:	f103 0120 	add.w	r1, r3, #32
   1b5b6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1b5b8:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1b5ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b5bc:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1b5be:	2000      	movs	r0, #0
   1b5c0:	f7ff ff16 	bl	1b3f0 <update_cache>
}
   1b5c4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1b5c6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1b5c8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1b5ca:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1b5cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1b5ce:	606c      	str	r4, [r5, #4]
}
   1b5d0:	e7f5      	b.n	1b5be <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b5d2:	2500      	movs	r5, #0
   1b5d4:	e7dc      	b.n	1b590 <ready_thread+0x34>
   1b5d6:	bf00      	nop
   1b5d8:	20003548 	.word	0x20003548

0001b5dc <z_sched_start>:
{
   1b5dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b5de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5e2:	f3ef 8411 	mrs	r4, BASEPRI
   1b5e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5ea:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b5ee:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b5f0:	f013 0f04 	tst.w	r3, #4
   1b5f4:	d104      	bne.n	1b600 <z_sched_start+0x24>
	__asm__ volatile(
   1b5f6:	f384 8811 	msr	BASEPRI, r4
   1b5fa:	f3bf 8f6f 	isb	sy
}
   1b5fe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b600:	f023 0304 	bic.w	r3, r3, #4
   1b604:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1b606:	f7ff ffa9 	bl	1b55c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b60a:	4621      	mov	r1, r4
   1b60c:	4801      	ldr	r0, [pc, #4]	; (1b614 <z_sched_start+0x38>)
   1b60e:	f7ff febb 	bl	1b388 <z_reschedule>
   1b612:	e7f4      	b.n	1b5fe <z_sched_start+0x22>
   1b614:	20003580 	.word	0x20003580

0001b618 <unready_thread>:
{
   1b618:	b510      	push	{r4, lr}
   1b61a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1b61c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1b61e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b622:	2b00      	cmp	r3, #0
   1b624:	db08      	blt.n	1b638 <unready_thread+0x20>
	update_cache(thread == _current);
   1b626:	4b08      	ldr	r3, [pc, #32]	; (1b648 <unready_thread+0x30>)
   1b628:	6898      	ldr	r0, [r3, #8]
   1b62a:	42a0      	cmp	r0, r4
   1b62c:	bf14      	ite	ne
   1b62e:	2000      	movne	r0, #0
   1b630:	2001      	moveq	r0, #1
   1b632:	f7ff fedd 	bl	1b3f0 <update_cache>
}
   1b636:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b63c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b63e:	4601      	mov	r1, r0
   1b640:	4802      	ldr	r0, [pc, #8]	; (1b64c <unready_thread+0x34>)
   1b642:	f009 fd65 	bl	25110 <z_priq_dumb_remove>
}
   1b646:	e7ee      	b.n	1b626 <unready_thread+0xe>
   1b648:	20003548 	.word	0x20003548
   1b64c:	20003568 	.word	0x20003568

0001b650 <z_pend_curr>:
{
   1b650:	b510      	push	{r4, lr}
   1b652:	460c      	mov	r4, r1
   1b654:	4611      	mov	r1, r2
	pending_current = _current;
   1b656:	4b06      	ldr	r3, [pc, #24]	; (1b670 <z_pend_curr+0x20>)
   1b658:	6898      	ldr	r0, [r3, #8]
   1b65a:	4b06      	ldr	r3, [pc, #24]	; (1b674 <z_pend_curr+0x24>)
   1b65c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b65e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b662:	f009 fe01 	bl	25268 <pend>
   1b666:	4620      	mov	r0, r4
   1b668:	f7f8 fa04 	bl	13a74 <arch_swap>
}
   1b66c:	bd10      	pop	{r4, pc}
   1b66e:	bf00      	nop
   1b670:	20003548 	.word	0x20003548
   1b674:	2000357c 	.word	0x2000357c

0001b678 <z_set_prio>:
{
   1b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b67c:	4604      	mov	r4, r0
   1b67e:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1b680:	2300      	movs	r3, #0
	__asm__ volatile(
   1b682:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b686:	f3ef 8611 	mrs	r6, BASEPRI
   1b68a:	f382 8812 	msr	BASEPRI_MAX, r2
   1b68e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1b692:	4698      	mov	r8, r3
   1b694:	e008      	b.n	1b6a8 <z_set_prio+0x30>
		if (need_sched) {
   1b696:	f012 0801 	ands.w	r8, r2, #1
   1b69a:	d111      	bne.n	1b6c0 <z_set_prio+0x48>
			thread->base.prio = prio;
   1b69c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1b69e:	f386 8811 	msr	BASEPRI, r6
   1b6a2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b6a6:	2301      	movs	r3, #1
   1b6a8:	461a      	mov	r2, r3
   1b6aa:	2b00      	cmp	r3, #0
   1b6ac:	d13d      	bne.n	1b72a <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1b6ae:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b6b0:	f013 0f1f 	tst.w	r3, #31
   1b6b4:	d1ef      	bne.n	1b696 <z_set_prio+0x1e>
	return node->next != NULL;
   1b6b6:	69a1      	ldr	r1, [r4, #24]
   1b6b8:	2900      	cmp	r1, #0
   1b6ba:	d1ec      	bne.n	1b696 <z_set_prio+0x1e>
   1b6bc:	2201      	movs	r2, #1
   1b6be:	e7ea      	b.n	1b696 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b6c4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b6c6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1b734 <z_set_prio+0xbc>
   1b6ca:	4621      	mov	r1, r4
   1b6cc:	4648      	mov	r0, r9
   1b6ce:	f009 fd1f 	bl	25110 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1b6d2:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b6d4:	7b63      	ldrb	r3, [r4, #13]
   1b6d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b6da:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1b6dc:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b6e0:	454d      	cmp	r5, r9
   1b6e2:	d020      	beq.n	1b726 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6e4:	b16d      	cbz	r5, 1b702 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b6e6:	4629      	mov	r1, r5
   1b6e8:	4620      	mov	r0, r4
   1b6ea:	f009 fcd3 	bl	25094 <z_sched_prio_cmp>
   1b6ee:	2800      	cmp	r0, #0
   1b6f0:	dc13      	bgt.n	1b71a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b6f2:	b135      	cbz	r5, 1b702 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1b6f4:	4b0e      	ldr	r3, [pc, #56]	; (1b730 <z_set_prio+0xb8>)
   1b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b6f8:	429d      	cmp	r5, r3
   1b6fa:	d002      	beq.n	1b702 <z_set_prio+0x8a>
   1b6fc:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6fe:	2d00      	cmp	r5, #0
   1b700:	d1f0      	bne.n	1b6e4 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1b702:	4b0b      	ldr	r3, [pc, #44]	; (1b730 <z_set_prio+0xb8>)
   1b704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1b706:	f103 0120 	add.w	r1, r3, #32
   1b70a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1b70c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1b70e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b710:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1b712:	2001      	movs	r0, #1
   1b714:	f7ff fe6c 	bl	1b3f0 <update_cache>
   1b718:	e7c1      	b.n	1b69e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1b71a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1b71c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1b71e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1b720:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1b722:	606c      	str	r4, [r5, #4]
}
   1b724:	e7f5      	b.n	1b712 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b726:	2500      	movs	r5, #0
   1b728:	e7dc      	b.n	1b6e4 <z_set_prio+0x6c>
}
   1b72a:	4640      	mov	r0, r8
   1b72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b730:	20003548 	.word	0x20003548
   1b734:	20003568 	.word	0x20003568

0001b738 <z_impl_k_thread_suspend>:
{
   1b738:	b538      	push	{r3, r4, r5, lr}
   1b73a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b73c:	3018      	adds	r0, #24
   1b73e:	f009 fe69 	bl	25414 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1b742:	2300      	movs	r3, #0
	__asm__ volatile(
   1b744:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b748:	f3ef 8511 	mrs	r5, BASEPRI
   1b74c:	f382 8812 	msr	BASEPRI_MAX, r2
   1b750:	f3bf 8f6f 	isb	sy
   1b754:	e010      	b.n	1b778 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b756:	7b63      	ldrb	r3, [r4, #13]
   1b758:	f043 0310 	orr.w	r3, r3, #16
   1b75c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b75e:	4b15      	ldr	r3, [pc, #84]	; (1b7b4 <z_impl_k_thread_suspend+0x7c>)
   1b760:	6898      	ldr	r0, [r3, #8]
   1b762:	42a0      	cmp	r0, r4
   1b764:	bf14      	ite	ne
   1b766:	2000      	movne	r0, #0
   1b768:	2001      	moveq	r0, #1
   1b76a:	f7ff fe41 	bl	1b3f0 <update_cache>
	__asm__ volatile(
   1b76e:	f385 8811 	msr	BASEPRI, r5
   1b772:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b776:	2301      	movs	r3, #1
   1b778:	b963      	cbnz	r3, 1b794 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1b77a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1b77c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b780:	2b00      	cmp	r3, #0
   1b782:	dae8      	bge.n	1b756 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b788:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b78a:	4621      	mov	r1, r4
   1b78c:	480a      	ldr	r0, [pc, #40]	; (1b7b8 <z_impl_k_thread_suspend+0x80>)
   1b78e:	f009 fcbf 	bl	25110 <z_priq_dumb_remove>
}
   1b792:	e7e0      	b.n	1b756 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1b794:	4b07      	ldr	r3, [pc, #28]	; (1b7b4 <z_impl_k_thread_suspend+0x7c>)
   1b796:	689b      	ldr	r3, [r3, #8]
   1b798:	42a3      	cmp	r3, r4
   1b79a:	d000      	beq.n	1b79e <z_impl_k_thread_suspend+0x66>
}
   1b79c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b79e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7a2:	f3ef 8011 	mrs	r0, BASEPRI
   1b7a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7aa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b7ae:	f009 fc9a 	bl	250e6 <z_reschedule_irqlock>
   1b7b2:	e7f3      	b.n	1b79c <z_impl_k_thread_suspend+0x64>
   1b7b4:	20003548 	.word	0x20003548
   1b7b8:	20003568 	.word	0x20003568

0001b7bc <k_sched_unlock>:

void k_sched_unlock(void)
{
   1b7bc:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1b7be:	2300      	movs	r3, #0
   1b7c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b7c4:	f3ef 8411 	mrs	r4, BASEPRI
   1b7c8:	f382 8812 	msr	BASEPRI_MAX, r2
   1b7cc:	f3bf 8f6f 	isb	sy
   1b7d0:	b96b      	cbnz	r3, 1b7ee <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1b7d2:	4b0c      	ldr	r3, [pc, #48]	; (1b804 <k_sched_unlock+0x48>)
   1b7d4:	689a      	ldr	r2, [r3, #8]
   1b7d6:	7bd3      	ldrb	r3, [r2, #15]
   1b7d8:	3301      	adds	r3, #1
   1b7da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b7dc:	2000      	movs	r0, #0
   1b7de:	f7ff fe07 	bl	1b3f0 <update_cache>
	__asm__ volatile(
   1b7e2:	f384 8811 	msr	BASEPRI, r4
   1b7e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b7ea:	2301      	movs	r3, #1
   1b7ec:	e7f0      	b.n	1b7d0 <k_sched_unlock+0x14>
	__asm__ volatile(
   1b7ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7f2:	f3ef 8011 	mrs	r0, BASEPRI
   1b7f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7fa:	f3bf 8f6f 	isb	sy
   1b7fe:	f009 fc72 	bl	250e6 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1b802:	bd10      	pop	{r4, pc}
   1b804:	20003548 	.word	0x20003548

0001b808 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1b80a:	7b43      	ldrb	r3, [r0, #13]
   1b80c:	f013 0f08 	tst.w	r3, #8
   1b810:	d145      	bne.n	1b89e <end_thread+0x96>
   1b812:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1b814:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b818:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b81c:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1b81e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b822:	d114      	bne.n	1b84e <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   1b824:	68ab      	ldr	r3, [r5, #8]
   1b826:	b15b      	cbz	r3, 1b840 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1b828:	4628      	mov	r0, r5
   1b82a:	f009 fc31 	bl	25090 <pended_on_thread>
   1b82e:	4629      	mov	r1, r5
   1b830:	f009 fc6e 	bl	25110 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b834:	7b6b      	ldrb	r3, [r5, #13]
   1b836:	f023 0302 	bic.w	r3, r3, #2
   1b83a:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1b83c:	2300      	movs	r3, #0
   1b83e:	60ab      	str	r3, [r5, #8]
   1b840:	f105 0018 	add.w	r0, r5, #24
   1b844:	f009 fde6 	bl	25414 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1b848:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b84c:	e01c      	b.n	1b888 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b852:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b854:	4601      	mov	r1, r0
   1b856:	4812      	ldr	r0, [pc, #72]	; (1b8a0 <end_thread+0x98>)
   1b858:	f009 fc5a 	bl	25110 <z_priq_dumb_remove>
}
   1b85c:	e7e2      	b.n	1b824 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1b85e:	4620      	mov	r0, r4
   1b860:	f009 fc16 	bl	25090 <pended_on_thread>
   1b864:	4621      	mov	r1, r4
   1b866:	f009 fc53 	bl	25110 <z_priq_dumb_remove>
   1b86a:	7b63      	ldrb	r3, [r4, #13]
   1b86c:	f023 0302 	bic.w	r3, r3, #2
   1b870:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1b872:	2600      	movs	r6, #0
   1b874:	60a6      	str	r6, [r4, #8]
   1b876:	f104 0018 	add.w	r0, r4, #24
   1b87a:	f009 fdcb 	bl	25414 <z_abort_timeout>
   1b87e:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1b882:	4620      	mov	r0, r4
   1b884:	f7ff fe6a 	bl	1b55c <ready_thread>
	return list->head == list;
   1b888:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b88a:	42bc      	cmp	r4, r7
   1b88c:	d001      	beq.n	1b892 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b88e:	2c00      	cmp	r4, #0
   1b890:	d1e5      	bne.n	1b85e <end_thread+0x56>
		update_cache(1);
   1b892:	2001      	movs	r0, #1
   1b894:	f7ff fdac 	bl	1b3f0 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1b898:	4628      	mov	r0, r5
   1b89a:	f7ff f8db 	bl	1aa54 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1b89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8a0:	20003568 	.word	0x20003568

0001b8a4 <z_sched_init>:
{
   1b8a4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   1b8a6:	4804      	ldr	r0, [pc, #16]	; (1b8b8 <z_sched_init+0x14>)
   1b8a8:	f009 fd62 	bl	25370 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b8ac:	2100      	movs	r1, #0
   1b8ae:	4608      	mov	r0, r1
   1b8b0:	f7ff fd2e 	bl	1b310 <k_sched_time_slice_set>
}
   1b8b4:	bd08      	pop	{r3, pc}
   1b8b6:	bf00      	nop
   1b8b8:	20003564 	.word	0x20003564

0001b8bc <z_impl_k_yield>:
{
   1b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8c2:	f3ef 8611 	mrs	r6, BASEPRI
   1b8c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8ca:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1b8ce:	4c1c      	ldr	r4, [pc, #112]	; (1b940 <z_impl_k_yield+0x84>)
   1b8d0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b8d2:	7b4b      	ldrb	r3, [r1, #13]
   1b8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b8d8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1b8da:	f104 0720 	add.w	r7, r4, #32
   1b8de:	4638      	mov	r0, r7
   1b8e0:	f009 fc16 	bl	25110 <z_priq_dumb_remove>
	queue_thread(_current);
   1b8e4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b8e6:	7b6b      	ldrb	r3, [r5, #13]
   1b8e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b8ec:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1b8ee:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8f0:	42bc      	cmp	r4, r7
   1b8f2:	d023      	beq.n	1b93c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8f4:	b16c      	cbz	r4, 1b912 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b8f6:	4621      	mov	r1, r4
   1b8f8:	4628      	mov	r0, r5
   1b8fa:	f009 fbcb 	bl	25094 <z_sched_prio_cmp>
   1b8fe:	2800      	cmp	r0, #0
   1b900:	dc16      	bgt.n	1b930 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b902:	b134      	cbz	r4, 1b912 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1b904:	4b0e      	ldr	r3, [pc, #56]	; (1b940 <z_impl_k_yield+0x84>)
   1b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b908:	429c      	cmp	r4, r3
   1b90a:	d002      	beq.n	1b912 <z_impl_k_yield+0x56>
   1b90c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b90e:	2c00      	cmp	r4, #0
   1b910:	d1f0      	bne.n	1b8f4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1b912:	4b0b      	ldr	r3, [pc, #44]	; (1b940 <z_impl_k_yield+0x84>)
   1b914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1b916:	f103 0120 	add.w	r1, r3, #32
   1b91a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1b91c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1b91e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1b920:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1b922:	2001      	movs	r0, #1
   1b924:	f7ff fd64 	bl	1b3f0 <update_cache>
   1b928:	4630      	mov	r0, r6
   1b92a:	f7f8 f8a3 	bl	13a74 <arch_swap>
}
   1b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1b930:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1b932:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1b934:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1b936:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1b938:	6065      	str	r5, [r4, #4]
}
   1b93a:	e7f2      	b.n	1b922 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b93c:	2400      	movs	r4, #0
   1b93e:	e7d9      	b.n	1b8f4 <z_impl_k_yield+0x38>
   1b940:	20003548 	.word	0x20003548

0001b944 <z_tick_sleep>:
{
   1b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b948:	4604      	mov	r4, r0
   1b94a:	460d      	mov	r5, r1
	if (ticks == 0) {
   1b94c:	ea54 0105 	orrs.w	r1, r4, r5
   1b950:	d037      	beq.n	1b9c2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1b952:	f06f 0101 	mvn.w	r1, #1
   1b956:	1a0a      	subs	r2, r1, r0
   1b958:	f04f 31ff 	mov.w	r1, #4294967295
   1b95c:	eb61 0305 	sbc.w	r3, r1, r5
   1b960:	2a01      	cmp	r2, #1
   1b962:	f173 0300 	sbcs.w	r3, r3, #0
   1b966:	db30      	blt.n	1b9ca <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1b968:	f06f 0601 	mvn.w	r6, #1
   1b96c:	1a36      	subs	r6, r6, r0
   1b96e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b972:	f3ef 8811 	mrs	r8, BASEPRI
   1b976:	f383 8812 	msr	BASEPRI_MAX, r3
   1b97a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1b97e:	4f16      	ldr	r7, [pc, #88]	; (1b9d8 <z_tick_sleep+0x94>)
   1b980:	68b8      	ldr	r0, [r7, #8]
   1b982:	4b16      	ldr	r3, [pc, #88]	; (1b9dc <z_tick_sleep+0x98>)
   1b984:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b986:	f7ff fe47 	bl	1b618 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b98a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b98c:	4622      	mov	r2, r4
   1b98e:	462b      	mov	r3, r5
   1b990:	4913      	ldr	r1, [pc, #76]	; (1b9e0 <z_tick_sleep+0x9c>)
   1b992:	3018      	adds	r0, #24
   1b994:	f000 f904 	bl	1bba0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b998:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b99a:	7b53      	ldrb	r3, [r2, #13]
   1b99c:	f043 0310 	orr.w	r3, r3, #16
   1b9a0:	7353      	strb	r3, [r2, #13]
   1b9a2:	4640      	mov	r0, r8
   1b9a4:	f7f8 f866 	bl	13a74 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b9a8:	2500      	movs	r5, #0
   1b9aa:	f009 fd92 	bl	254d2 <sys_clock_tick_get_32>
   1b9ae:	1a34      	subs	r4, r6, r0
   1b9b0:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1b9b4:	2c01      	cmp	r4, #1
   1b9b6:	f175 0300 	sbcs.w	r3, r5, #0
   1b9ba:	da0a      	bge.n	1b9d2 <z_tick_sleep+0x8e>
	return 0;
   1b9bc:	2000      	movs	r0, #0
}
   1b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1b9c2:	f7ff ff7b 	bl	1b8bc <z_impl_k_yield>
		return 0;
   1b9c6:	2000      	movs	r0, #0
   1b9c8:	e7f9      	b.n	1b9be <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b9ca:	f009 fd82 	bl	254d2 <sys_clock_tick_get_32>
   1b9ce:	1906      	adds	r6, r0, r4
   1b9d0:	e7cd      	b.n	1b96e <z_tick_sleep+0x2a>
		return ticks;
   1b9d2:	4620      	mov	r0, r4
   1b9d4:	e7f3      	b.n	1b9be <z_tick_sleep+0x7a>
   1b9d6:	bf00      	nop
   1b9d8:	20003548 	.word	0x20003548
   1b9dc:	2000357c 	.word	0x2000357c
   1b9e0:	000251ad 	.word	0x000251ad

0001b9e4 <z_impl_k_sleep>:
{
   1b9e4:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b9e6:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b9ea:	bf08      	it	eq
   1b9ec:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1b9f0:	d01a      	beq.n	1ba28 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1b9f2:	f7ff ffa7 	bl	1b944 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1b9f6:	4604      	mov	r4, r0
   1b9f8:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1b9fa:	0169      	lsls	r1, r5, #5
   1b9fc:	0143      	lsls	r3, r0, #5
   1b9fe:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1ba02:	1a18      	subs	r0, r3, r0
   1ba04:	eb62 0305 	sbc.w	r3, r2, r5
   1ba08:	009a      	lsls	r2, r3, #2
   1ba0a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1ba0e:	0081      	lsls	r1, r0, #2
   1ba10:	4613      	mov	r3, r2
   1ba12:	1908      	adds	r0, r1, r4
   1ba14:	eb45 0303 	adc.w	r3, r5, r3
   1ba18:	00da      	lsls	r2, r3, #3
   1ba1a:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1ba1e:	00c1      	lsls	r1, r0, #3
   1ba20:	0bc8      	lsrs	r0, r1, #15
   1ba22:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1ba26:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1ba28:	4b03      	ldr	r3, [pc, #12]	; (1ba38 <z_impl_k_sleep+0x54>)
   1ba2a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1ba2c:	f7ff fe84 	bl	1b738 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1ba30:	f04f 30ff 	mov.w	r0, #4294967295
   1ba34:	e7f7      	b.n	1ba26 <z_impl_k_sleep+0x42>
   1ba36:	bf00      	nop
   1ba38:	20003548 	.word	0x20003548

0001ba3c <z_impl_z_current_get>:
}
   1ba3c:	4b01      	ldr	r3, [pc, #4]	; (1ba44 <z_impl_z_current_get+0x8>)
   1ba3e:	6898      	ldr	r0, [r3, #8]
   1ba40:	4770      	bx	lr
   1ba42:	bf00      	nop
   1ba44:	20003548 	.word	0x20003548

0001ba48 <z_impl_k_is_preempt_thread>:
   1ba48:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1ba4c:	b933      	cbnz	r3, 1ba5c <z_impl_k_is_preempt_thread+0x14>
   1ba4e:	4b05      	ldr	r3, [pc, #20]	; (1ba64 <z_impl_k_is_preempt_thread+0x1c>)
   1ba50:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1ba52:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1ba54:	2b7f      	cmp	r3, #127	; 0x7f
   1ba56:	d803      	bhi.n	1ba60 <z_impl_k_is_preempt_thread+0x18>
   1ba58:	2001      	movs	r0, #1
   1ba5a:	4770      	bx	lr
   1ba5c:	2000      	movs	r0, #0
   1ba5e:	4770      	bx	lr
   1ba60:	2000      	movs	r0, #0
}
   1ba62:	4770      	bx	lr
   1ba64:	20003548 	.word	0x20003548

0001ba68 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1ba68:	b538      	push	{r3, r4, r5, lr}
   1ba6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba6e:	f3ef 8511 	mrs	r5, BASEPRI
   1ba72:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba76:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ba7a:	7b43      	ldrb	r3, [r0, #13]
   1ba7c:	f013 0f08 	tst.w	r3, #8
   1ba80:	d004      	beq.n	1ba8c <z_thread_abort+0x24>
	__asm__ volatile(
   1ba82:	f385 8811 	msr	BASEPRI, r5
   1ba86:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ba8a:	bd38      	pop	{r3, r4, r5, pc}
   1ba8c:	4604      	mov	r4, r0
	end_thread(thread);
   1ba8e:	f7ff febb 	bl	1b808 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1ba92:	4b08      	ldr	r3, [pc, #32]	; (1bab4 <z_thread_abort+0x4c>)
   1ba94:	689b      	ldr	r3, [r3, #8]
   1ba96:	42a3      	cmp	r3, r4
   1ba98:	d004      	beq.n	1baa4 <z_thread_abort+0x3c>
   1ba9a:	f385 8811 	msr	BASEPRI, r5
   1ba9e:	f3bf 8f6f 	isb	sy
   1baa2:	e7f2      	b.n	1ba8a <z_thread_abort+0x22>
   1baa4:	f3ef 8305 	mrs	r3, IPSR
   1baa8:	2b00      	cmp	r3, #0
   1baaa:	d1f6      	bne.n	1ba9a <z_thread_abort+0x32>
   1baac:	4628      	mov	r0, r5
   1baae:	f7f7 ffe1 	bl	13a74 <arch_swap>
	return ret;
   1bab2:	e7f2      	b.n	1ba9a <z_thread_abort+0x32>
   1bab4:	20003548 	.word	0x20003548

0001bab8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bab8:	b5d0      	push	{r4, r6, r7, lr}
   1baba:	b082      	sub	sp, #8
   1babc:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1babe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1bac2:	e9cd 6700 	strd	r6, r7, [sp]
   1bac6:	f7ff fdc3 	bl	1b650 <z_pend_curr>

	if (data != NULL) {
   1baca:	b11c      	cbz	r4, 1bad4 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1bacc:	4b02      	ldr	r3, [pc, #8]	; (1bad8 <z_sched_wait+0x20>)
   1bace:	689b      	ldr	r3, [r3, #8]
   1bad0:	695b      	ldr	r3, [r3, #20]
   1bad2:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bad4:	b002      	add	sp, #8
   1bad6:	bdd0      	pop	{r4, r6, r7, pc}
   1bad8:	20003548 	.word	0x20003548

0001badc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1badc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1bade:	4806      	ldr	r0, [pc, #24]	; (1baf8 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bae0:	4a06      	ldr	r2, [pc, #24]	; (1bafc <z_data_copy+0x20>)
   1bae2:	1a12      	subs	r2, r2, r0
   1bae4:	4906      	ldr	r1, [pc, #24]	; (1bb00 <z_data_copy+0x24>)
   1bae6:	f009 fe1e 	bl	25726 <memcpy>
   1baea:	4a06      	ldr	r2, [pc, #24]	; (1bb04 <z_data_copy+0x28>)
   1baec:	4906      	ldr	r1, [pc, #24]	; (1bb08 <z_data_copy+0x2c>)
   1baee:	4807      	ldr	r0, [pc, #28]	; (1bb0c <z_data_copy+0x30>)
   1baf0:	f009 fe19 	bl	25726 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1baf4:	bd08      	pop	{r3, pc}
   1baf6:	bf00      	nop
   1baf8:	20000000 	.word	0x20000000
   1bafc:	20000c1c 	.word	0x20000c1c
   1bb00:	00027404 	.word	0x00027404
   1bb04:	00000000 	.word	0x00000000
   1bb08:	00027404 	.word	0x00027404
   1bb0c:	20000000 	.word	0x20000000

0001bb10 <first>:
	return list->head == list;
   1bb10:	4b03      	ldr	r3, [pc, #12]	; (1bb20 <first+0x10>)
   1bb12:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb14:	4298      	cmp	r0, r3
   1bb16:	d000      	beq.n	1bb1a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1bb18:	4770      	bx	lr
   1bb1a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1bb1c:	e7fc      	b.n	1bb18 <first+0x8>
   1bb1e:	bf00      	nop
   1bb20:	20000974 	.word	0x20000974

0001bb24 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bb24:	b130      	cbz	r0, 1bb34 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1bb26:	4a04      	ldr	r2, [pc, #16]	; (1bb38 <next+0x14>)
   1bb28:	6852      	ldr	r2, [r2, #4]
   1bb2a:	4290      	cmp	r0, r2
   1bb2c:	d001      	beq.n	1bb32 <next+0xe>
   1bb2e:	6800      	ldr	r0, [r0, #0]
   1bb30:	4770      	bx	lr
   1bb32:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1bb34:	4770      	bx	lr
   1bb36:	bf00      	nop
   1bb38:	20000974 	.word	0x20000974

0001bb3c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1bb3c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bb3e:	4b04      	ldr	r3, [pc, #16]	; (1bb50 <elapsed+0x14>)
   1bb40:	681b      	ldr	r3, [r3, #0]
   1bb42:	b10b      	cbz	r3, 1bb48 <elapsed+0xc>
   1bb44:	2000      	movs	r0, #0
}
   1bb46:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bb48:	f7fd f95e 	bl	18e08 <sys_clock_elapsed>
   1bb4c:	e7fb      	b.n	1bb46 <elapsed+0xa>
   1bb4e:	bf00      	nop
   1bb50:	20003588 	.word	0x20003588

0001bb54 <next_timeout>:

static int32_t next_timeout(void)
{
   1bb54:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1bb56:	f7ff ffdb 	bl	1bb10 <first>
   1bb5a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1bb5c:	f7ff ffee 	bl	1bb3c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1bb60:	b18c      	cbz	r4, 1bb86 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bb62:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1bb66:	1a12      	subs	r2, r2, r0
   1bb68:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bb6c:	2a01      	cmp	r2, #1
   1bb6e:	f173 0100 	sbcs.w	r1, r3, #0
   1bb72:	db11      	blt.n	1bb98 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bb74:	4610      	mov	r0, r2
   1bb76:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1bb7a:	f173 0300 	sbcs.w	r3, r3, #0
   1bb7e:	db04      	blt.n	1bb8a <next_timeout+0x36>
   1bb80:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bb84:	e001      	b.n	1bb8a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1bb86:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bb8a:	4b04      	ldr	r3, [pc, #16]	; (1bb9c <next_timeout+0x48>)
   1bb8c:	691b      	ldr	r3, [r3, #16]
   1bb8e:	b113      	cbz	r3, 1bb96 <next_timeout+0x42>
   1bb90:	4283      	cmp	r3, r0
   1bb92:	da00      	bge.n	1bb96 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1bb94:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1bb96:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bb98:	2000      	movs	r0, #0
   1bb9a:	e7f6      	b.n	1bb8a <next_timeout+0x36>
   1bb9c:	20003548 	.word	0x20003548

0001bba0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bba4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bbaa:	bf08      	it	eq
   1bbac:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bbb0:	f000 8096 	beq.w	1bce0 <z_add_timeout+0x140>
   1bbb4:	4682      	mov	sl, r0
   1bbb6:	4614      	mov	r4, r2
   1bbb8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bbba:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1bbbc:	2300      	movs	r3, #0
	__asm__ volatile(
   1bbbe:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bbc2:	f3ef 8b11 	mrs	fp, BASEPRI
   1bbc6:	f382 8812 	msr	BASEPRI_MAX, r2
   1bbca:	f3bf 8f6f 	isb	sy
   1bbce:	e02e      	b.n	1bc2e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1bbd0:	2201      	movs	r2, #1
   1bbd2:	2300      	movs	r3, #0
   1bbd4:	e04b      	b.n	1bc6e <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bbd6:	f7ff ffb1 	bl	1bb3c <elapsed>
   1bbda:	1822      	adds	r2, r4, r0
   1bbdc:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1bbe0:	3201      	adds	r2, #1
   1bbe2:	f143 0300 	adc.w	r3, r3, #0
   1bbe6:	f8ca 2010 	str.w	r2, [sl, #16]
   1bbea:	f8ca 3014 	str.w	r3, [sl, #20]
   1bbee:	e042      	b.n	1bc76 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1bbf0:	9b00      	ldr	r3, [sp, #0]
   1bbf2:	1ac2      	subs	r2, r0, r3
   1bbf4:	9b01      	ldr	r3, [sp, #4]
   1bbf6:	eb61 0303 	sbc.w	r3, r1, r3
   1bbfa:	f8cc 2010 	str.w	r2, [ip, #16]
   1bbfe:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1bc02:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1bc06:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1bc0a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1bc0e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1bc12:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1bc16:	f1bc 0f00 	cmp.w	ip, #0
   1bc1a:	d049      	beq.n	1bcb0 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bc1c:	f7ff ff78 	bl	1bb10 <first>
   1bc20:	4582      	cmp	sl, r0
   1bc22:	d050      	beq.n	1bcc6 <z_add_timeout+0x126>
	__asm__ volatile(
   1bc24:	f38b 8811 	msr	BASEPRI, fp
   1bc28:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1bc2c:	2301      	movs	r3, #1
   1bc2e:	2b00      	cmp	r3, #0
   1bc30:	d156      	bne.n	1bce0 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1bc32:	f06f 0301 	mvn.w	r3, #1
   1bc36:	ebb3 0804 	subs.w	r8, r3, r4
   1bc3a:	f04f 30ff 	mov.w	r0, #4294967295
   1bc3e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bc42:	f1b8 0f00 	cmp.w	r8, #0
   1bc46:	f179 0300 	sbcs.w	r3, r9, #0
   1bc4a:	dbc4      	blt.n	1bbd6 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bc4c:	4a26      	ldr	r2, [pc, #152]	; (1bce8 <z_add_timeout+0x148>)
   1bc4e:	6813      	ldr	r3, [r2, #0]
   1bc50:	6852      	ldr	r2, [r2, #4]
   1bc52:	18e3      	adds	r3, r4, r3
   1bc54:	eb45 0202 	adc.w	r2, r5, r2
   1bc58:	f06f 0101 	mvn.w	r1, #1
   1bc5c:	1ace      	subs	r6, r1, r3
   1bc5e:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1bc62:	4632      	mov	r2, r6
   1bc64:	463b      	mov	r3, r7
   1bc66:	2e01      	cmp	r6, #1
   1bc68:	f177 0100 	sbcs.w	r1, r7, #0
   1bc6c:	dbb0      	blt.n	1bbd0 <z_add_timeout+0x30>
   1bc6e:	f8ca 2010 	str.w	r2, [sl, #16]
   1bc72:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1bc76:	f7ff ff4b 	bl	1bb10 <first>
   1bc7a:	4684      	mov	ip, r0
   1bc7c:	f1bc 0f00 	cmp.w	ip, #0
   1bc80:	d0c9      	beq.n	1bc16 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1bc82:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1bc86:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1bc8a:	e9cd 2300 	strd	r2, r3, [sp]
   1bc8e:	4282      	cmp	r2, r0
   1bc90:	418b      	sbcs	r3, r1
   1bc92:	dbad      	blt.n	1bbf0 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1bc94:	9b00      	ldr	r3, [sp, #0]
   1bc96:	1a1a      	subs	r2, r3, r0
   1bc98:	9b01      	ldr	r3, [sp, #4]
   1bc9a:	eb63 0301 	sbc.w	r3, r3, r1
   1bc9e:	f8ca 2010 	str.w	r2, [sl, #16]
   1bca2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1bca6:	4660      	mov	r0, ip
   1bca8:	f7ff ff3c 	bl	1bb24 <next>
   1bcac:	4684      	mov	ip, r0
   1bcae:	e7e5      	b.n	1bc7c <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1bcb0:	4b0e      	ldr	r3, [pc, #56]	; (1bcec <z_add_timeout+0x14c>)
   1bcb2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1bcb4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1bcb8:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1bcbc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1bcc0:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1bcc4:	e7aa      	b.n	1bc1c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bcc6:	f7ff ff45 	bl	1bb54 <next_timeout>

			if (next_time == 0 ||
   1bcca:	4603      	mov	r3, r0
   1bccc:	b118      	cbz	r0, 1bcd6 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1bcce:	4a08      	ldr	r2, [pc, #32]	; (1bcf0 <z_add_timeout+0x150>)
   1bcd0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1bcd2:	4282      	cmp	r2, r0
   1bcd4:	d0a6      	beq.n	1bc24 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1bcd6:	2100      	movs	r1, #0
   1bcd8:	4618      	mov	r0, r3
   1bcda:	f7fd f861 	bl	18da0 <sys_clock_set_timeout>
   1bcde:	e7a1      	b.n	1bc24 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bce0:	b003      	add	sp, #12
   1bce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bce6:	bf00      	nop
   1bce8:	20002218 	.word	0x20002218
   1bcec:	20000974 	.word	0x20000974
   1bcf0:	20003548 	.word	0x20003548

0001bcf4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcf6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bcf8:	f7ff fbe4 	bl	1b4c4 <z_time_slice>
	__asm__ volatile(
   1bcfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd00:	f3ef 8511 	mrs	r5, BASEPRI
   1bd04:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd08:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bd0c:	4b28      	ldr	r3, [pc, #160]	; (1bdb0 <sys_clock_announce+0xbc>)
   1bd0e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bd10:	f7ff fefe 	bl	1bb10 <first>
   1bd14:	4604      	mov	r4, r0
   1bd16:	b350      	cbz	r0, 1bd6e <sys_clock_announce+0x7a>
   1bd18:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1bd1c:	4b24      	ldr	r3, [pc, #144]	; (1bdb0 <sys_clock_announce+0xbc>)
   1bd1e:	681b      	ldr	r3, [r3, #0]
   1bd20:	17d9      	asrs	r1, r3, #31
   1bd22:	42b3      	cmp	r3, r6
   1bd24:	eb71 0207 	sbcs.w	r2, r1, r7
   1bd28:	db21      	blt.n	1bd6e <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1bd2a:	4a22      	ldr	r2, [pc, #136]	; (1bdb4 <sys_clock_announce+0xc0>)
   1bd2c:	e9d2 0100 	ldrd	r0, r1, [r2]
   1bd30:	1980      	adds	r0, r0, r6
   1bd32:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1bd36:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1bd3a:	1b9b      	subs	r3, r3, r6
   1bd3c:	4a1c      	ldr	r2, [pc, #112]	; (1bdb0 <sys_clock_announce+0xbc>)
   1bd3e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1bd40:	2200      	movs	r2, #0
   1bd42:	2300      	movs	r3, #0
   1bd44:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1bd48:	4620      	mov	r0, r4
   1bd4a:	f009 fb4c 	bl	253e6 <remove_timeout>
	__asm__ volatile(
   1bd4e:	f385 8811 	msr	BASEPRI, r5
   1bd52:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1bd56:	68a3      	ldr	r3, [r4, #8]
   1bd58:	4620      	mov	r0, r4
   1bd5a:	4798      	blx	r3
	__asm__ volatile(
   1bd5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd60:	f3ef 8511 	mrs	r5, BASEPRI
   1bd64:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd68:	f3bf 8f6f 	isb	sy
   1bd6c:	e7d0      	b.n	1bd10 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1bd6e:	b144      	cbz	r4, 1bd82 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1bd70:	4b0f      	ldr	r3, [pc, #60]	; (1bdb0 <sys_clock_announce+0xbc>)
   1bd72:	6819      	ldr	r1, [r3, #0]
   1bd74:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1bd78:	1a52      	subs	r2, r2, r1
   1bd7a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1bd7e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1bd82:	480c      	ldr	r0, [pc, #48]	; (1bdb4 <sys_clock_announce+0xc0>)
   1bd84:	490a      	ldr	r1, [pc, #40]	; (1bdb0 <sys_clock_announce+0xbc>)
   1bd86:	680c      	ldr	r4, [r1, #0]
   1bd88:	e9d0 2300 	ldrd	r2, r3, [r0]
   1bd8c:	1912      	adds	r2, r2, r4
   1bd8e:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1bd92:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1bd96:	2400      	movs	r4, #0
   1bd98:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bd9a:	f7ff fedb 	bl	1bb54 <next_timeout>
   1bd9e:	4621      	mov	r1, r4
   1bda0:	f7fc fffe 	bl	18da0 <sys_clock_set_timeout>
	__asm__ volatile(
   1bda4:	f385 8811 	msr	BASEPRI, r5
   1bda8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdae:	bf00      	nop
   1bdb0:	20003588 	.word	0x20003588
   1bdb4:	20002218 	.word	0x20002218

0001bdb8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bdb8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1bdba:	2100      	movs	r1, #0
	__asm__ volatile(
   1bdbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdc0:	f3ef 8411 	mrs	r4, BASEPRI
   1bdc4:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdc8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1bdcc:	2200      	movs	r2, #0
   1bdce:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1bdd0:	b969      	cbnz	r1, 1bdee <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1bdd2:	f7fd f819 	bl	18e08 <sys_clock_elapsed>
   1bdd6:	4b07      	ldr	r3, [pc, #28]	; (1bdf4 <sys_clock_tick_get+0x3c>)
   1bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bddc:	1812      	adds	r2, r2, r0
   1bdde:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1bde2:	f384 8811 	msr	BASEPRI, r4
   1bde6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1bdea:	2101      	movs	r1, #1
   1bdec:	e7f0      	b.n	1bdd0 <sys_clock_tick_get+0x18>
	}
	return t;
}
   1bdee:	4610      	mov	r0, r2
   1bdf0:	4619      	mov	r1, r3
   1bdf2:	bd10      	pop	{r4, pc}
   1bdf4:	20002218 	.word	0x20002218

0001bdf8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bdf8:	b570      	push	{r4, r5, r6, lr}
   1bdfa:	4604      	mov	r4, r0
	__asm__ volatile(
   1bdfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be00:	f3ef 8611 	mrs	r6, BASEPRI
   1be04:	f383 8812 	msr	BASEPRI_MAX, r3
   1be08:	f3bf 8f6f 	isb	sy
   1be0c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1be0e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1be12:	ea52 0103 	orrs.w	r1, r2, r3
   1be16:	d005      	beq.n	1be24 <z_timer_expiration_handler+0x2c>
   1be18:	f1b3 3fff 	cmp.w	r3, #4294967295
   1be1c:	bf08      	it	eq
   1be1e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1be22:	d127      	bne.n	1be74 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1be24:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1be26:	3301      	adds	r3, #1
   1be28:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1be2a:	6a23      	ldr	r3, [r4, #32]
   1be2c:	b173      	cbz	r3, 1be4c <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   1be2e:	f386 8811 	msr	BASEPRI, r6
   1be32:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1be36:	6a23      	ldr	r3, [r4, #32]
   1be38:	4620      	mov	r0, r4
   1be3a:	4798      	blx	r3
	__asm__ volatile(
   1be3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be40:	f3ef 8511 	mrs	r5, BASEPRI
   1be44:	f383 8812 	msr	BASEPRI_MAX, r3
   1be48:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1be4c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1be50:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1be52:	42a3      	cmp	r3, r4
   1be54:	d012      	beq.n	1be7c <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1be56:	b18c      	cbz	r4, 1be7c <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   1be58:	4620      	mov	r0, r4
   1be5a:	f009 f925 	bl	250a8 <z_unpend_thread_no_timeout>
   1be5e:	2300      	movs	r3, #0
   1be60:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1be64:	f385 8811 	msr	BASEPRI, r5
   1be68:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   1be6c:	4620      	mov	r0, r4
   1be6e:	f009 f981 	bl	25174 <z_ready_thread>
}
   1be72:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1be74:	4904      	ldr	r1, [pc, #16]	; (1be88 <z_timer_expiration_handler+0x90>)
   1be76:	f7ff fe93 	bl	1bba0 <z_add_timeout>
   1be7a:	e7d3      	b.n	1be24 <z_timer_expiration_handler+0x2c>
   1be7c:	f385 8811 	msr	BASEPRI, r5
   1be80:	f3bf 8f6f 	isb	sy
		return;
   1be84:	e7f5      	b.n	1be72 <z_timer_expiration_handler+0x7a>
   1be86:	bf00      	nop
   1be88:	0001bdf9 	.word	0x0001bdf9

0001be8c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be90:	b087      	sub	sp, #28
   1be92:	4614      	mov	r4, r2
   1be94:	461d      	mov	r5, r3
   1be96:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1be9e:	bf08      	it	eq
   1bea0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bea4:	d035      	beq.n	1bf12 <z_impl_k_timer_start+0x86>
   1bea6:	4606      	mov	r6, r0
   1bea8:	4613      	mov	r3, r2
   1beaa:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1beac:	f1b9 3fff 	cmp.w	r9, #4294967295
   1beb0:	bf08      	it	eq
   1beb2:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   1beb6:	d012      	beq.n	1bede <z_impl_k_timer_start+0x52>
   1beb8:	ea58 0109 	orrs.w	r1, r8, r9
   1bebc:	d00f      	beq.n	1bede <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   1bebe:	f06f 0701 	mvn.w	r7, #1
   1bec2:	ebb7 0708 	subs.w	r7, r7, r8
   1bec6:	9702      	str	r7, [sp, #8]
   1bec8:	f04f 31ff 	mov.w	r1, #4294967295
   1becc:	eb61 0709 	sbc.w	r7, r1, r9
   1bed0:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1bed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1bed6:	2800      	cmp	r0, #0
   1bed8:	f171 0100 	sbcs.w	r1, r1, #0
   1bedc:	db1c      	blt.n	1bf18 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bede:	f06f 0101 	mvn.w	r1, #1
   1bee2:	ebb1 0a03 	subs.w	sl, r1, r3
   1bee6:	f04f 31ff 	mov.w	r1, #4294967295
   1beea:	eb61 0b02 	sbc.w	fp, r1, r2
   1beee:	f1ba 0f00 	cmp.w	sl, #0
   1bef2:	f17b 0100 	sbcs.w	r1, fp, #0
   1bef6:	db23      	blt.n	1bf40 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1bef8:	4630      	mov	r0, r6
   1befa:	f009 fa8b 	bl	25414 <z_abort_timeout>
	timer->period = period;
   1befe:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1bf02:	2300      	movs	r3, #0
   1bf04:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bf06:	4622      	mov	r2, r4
   1bf08:	462b      	mov	r3, r5
   1bf0a:	4917      	ldr	r1, [pc, #92]	; (1bf68 <z_impl_k_timer_start+0xdc>)
   1bf0c:	4630      	mov	r0, r6
   1bf0e:	f7ff fe47 	bl	1bba0 <z_add_timeout>
		     duration);
}
   1bf12:	b007      	add	sp, #28
   1bf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1bf18:	f118 31ff 	adds.w	r1, r8, #4294967295
   1bf1c:	9104      	str	r1, [sp, #16]
   1bf1e:	f149 31ff 	adc.w	r1, r9, #4294967295
   1bf22:	9105      	str	r1, [sp, #20]
   1bf24:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   1bf28:	4638      	mov	r0, r7
   1bf2a:	4641      	mov	r1, r8
   1bf2c:	2f01      	cmp	r7, #1
   1bf2e:	f178 0700 	sbcs.w	r7, r8, #0
   1bf32:	db02      	blt.n	1bf3a <z_impl_k_timer_start+0xae>
   1bf34:	4680      	mov	r8, r0
   1bf36:	4689      	mov	r9, r1
   1bf38:	e7d1      	b.n	1bede <z_impl_k_timer_start+0x52>
   1bf3a:	2001      	movs	r0, #1
   1bf3c:	2100      	movs	r1, #0
   1bf3e:	e7f9      	b.n	1bf34 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bf40:	f113 33ff 	adds.w	r3, r3, #4294967295
   1bf44:	9300      	str	r3, [sp, #0]
   1bf46:	f142 33ff 	adc.w	r3, r2, #4294967295
   1bf4a:	9301      	str	r3, [sp, #4]
   1bf4c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1bf50:	4602      	mov	r2, r0
   1bf52:	460b      	mov	r3, r1
   1bf54:	2800      	cmp	r0, #0
   1bf56:	f171 0100 	sbcs.w	r1, r1, #0
   1bf5a:	db02      	blt.n	1bf62 <z_impl_k_timer_start+0xd6>
   1bf5c:	4614      	mov	r4, r2
   1bf5e:	461d      	mov	r5, r3
   1bf60:	e7ca      	b.n	1bef8 <z_impl_k_timer_start+0x6c>
   1bf62:	2200      	movs	r2, #0
   1bf64:	4613      	mov	r3, r2
   1bf66:	e7f9      	b.n	1bf5c <z_impl_k_timer_start+0xd0>
   1bf68:	0001bdf9 	.word	0x0001bdf9

0001bf6c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1bf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf70:	b08d      	sub	sp, #52	; 0x34
   1bf72:	4605      	mov	r5, r0
   1bf74:	9107      	str	r1, [sp, #28]
   1bf76:	9202      	str	r2, [sp, #8]
   1bf78:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1bf7a:	4ba4      	ldr	r3, [pc, #656]	; (1c20c <z_impl_k_poll+0x2a0>)
   1bf7c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1bf80:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1bf84:	2301      	movs	r3, #1
   1bf86:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1bf8a:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1bf8e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1bf92:	4613      	mov	r3, r2
   1bf94:	430b      	orrs	r3, r1
   1bf96:	bf0c      	ite	eq
   1bf98:	2301      	moveq	r3, #1
   1bf9a:	2300      	movne	r3, #0
   1bf9c:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1bf9e:	2600      	movs	r6, #0
	int events_registered = 0;
   1bfa0:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1bfa2:	e02e      	b.n	1c002 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1bfa4:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1bfa6:	689b      	ldr	r3, [r3, #8]
   1bfa8:	b1c3      	cbz	r3, 1bfdc <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1bfaa:	2302      	movs	r3, #2
   1bfac:	9305      	str	r3, [sp, #20]
			return true;
   1bfae:	2301      	movs	r3, #1
   1bfb0:	e014      	b.n	1bfdc <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1bfb2:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1bfb4:	681b      	ldr	r3, [r3, #0]
   1bfb6:	b18b      	cbz	r3, 1bfdc <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1bfb8:	2304      	movs	r3, #4
   1bfba:	9305      	str	r3, [sp, #20]
			return true;
   1bfbc:	2301      	movs	r3, #1
   1bfbe:	e00d      	b.n	1bfdc <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1bfc0:	6923      	ldr	r3, [r4, #16]
   1bfc2:	689b      	ldr	r3, [r3, #8]
   1bfc4:	b153      	cbz	r3, 1bfdc <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1bfc6:	2301      	movs	r3, #1
   1bfc8:	9305      	str	r3, [sp, #20]
   1bfca:	e007      	b.n	1bfdc <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1bfcc:	6923      	ldr	r3, [r4, #16]
   1bfce:	6a1b      	ldr	r3, [r3, #32]
   1bfd0:	b123      	cbz	r3, 1bfdc <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1bfd2:	2310      	movs	r3, #16
   1bfd4:	9305      	str	r3, [sp, #20]
			return true;
   1bfd6:	2301      	movs	r3, #1
   1bfd8:	e000      	b.n	1bfdc <z_impl_k_poll+0x70>
	switch (event->type) {
   1bfda:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1bfdc:	2b00      	cmp	r3, #0
   1bfde:	d03d      	beq.n	1c05c <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1bfe0:	2100      	movs	r1, #0
   1bfe2:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1bfe4:	68e3      	ldr	r3, [r4, #12]
   1bfe6:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1bfea:	9805      	ldr	r0, [sp, #20]
   1bfec:	4302      	orrs	r2, r0
   1bfee:	f362 3352 	bfi	r3, r2, #13, #6
   1bff2:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1bff4:	7039      	strb	r1, [r7, #0]
   1bff6:	9b08      	ldr	r3, [sp, #32]
   1bff8:	f383 8811 	msr	BASEPRI, r3
   1bffc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c000:	3601      	adds	r6, #1
   1c002:	9b07      	ldr	r3, [sp, #28]
   1c004:	42b3      	cmp	r3, r6
   1c006:	f340 81bf 	ble.w	1c388 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1c00a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c00e:	f3ef 8211 	mrs	r2, BASEPRI
   1c012:	f383 8812 	msr	BASEPRI_MAX, r3
   1c016:	f3bf 8f6f 	isb	sy
   1c01a:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1c01c:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1c020:	00a3      	lsls	r3, r4, #2
   1c022:	9309      	str	r3, [sp, #36]	; 0x24
   1c024:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1c028:	7b63      	ldrb	r3, [r4, #13]
   1c02a:	f003 031f 	and.w	r3, r3, #31
   1c02e:	3b01      	subs	r3, #1
   1c030:	2b07      	cmp	r3, #7
   1c032:	d8d2      	bhi.n	1bfda <z_impl_k_poll+0x6e>
   1c034:	a201      	add	r2, pc, #4	; (adr r2, 1c03c <z_impl_k_poll+0xd0>)
   1c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c03a:	bf00      	nop
   1c03c:	0001bfc1 	.word	0x0001bfc1
   1c040:	0001bfa5 	.word	0x0001bfa5
   1c044:	0001bfdb 	.word	0x0001bfdb
   1c048:	0001bfb3 	.word	0x0001bfb3
   1c04c:	0001bfdb 	.word	0x0001bfdb
   1c050:	0001bfdb 	.word	0x0001bfdb
   1c054:	0001bfdb 	.word	0x0001bfdb
   1c058:	0001bfcd 	.word	0x0001bfcd
		} else if (!just_check && poller->is_polling) {
   1c05c:	9b06      	ldr	r3, [sp, #24]
   1c05e:	2b00      	cmp	r3, #0
   1c060:	d1c9      	bne.n	1bff6 <z_impl_k_poll+0x8a>
   1c062:	783b      	ldrb	r3, [r7, #0]
   1c064:	2b00      	cmp	r3, #0
   1c066:	d0c6      	beq.n	1bff6 <z_impl_k_poll+0x8a>
	switch (event->type) {
   1c068:	7b63      	ldrb	r3, [r4, #13]
   1c06a:	f003 031f 	and.w	r3, r3, #31
   1c06e:	3b01      	subs	r3, #1
   1c070:	2b07      	cmp	r3, #7
   1c072:	d846      	bhi.n	1c102 <z_impl_k_poll+0x196>
   1c074:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c078:	000800cc 	.word	0x000800cc
   1c07c:	006a0045 	.word	0x006a0045
   1c080:	00450045 	.word	0x00450045
   1c084:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1c088:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c08c:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1c090:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c094:	4598      	cmp	r8, r3
   1c096:	d02b      	beq.n	1c0f0 <z_impl_k_poll+0x184>
   1c098:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c09c:	b343      	cbz	r3, 1c0f0 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c09e:	6898      	ldr	r0, [r3, #8]
   1c0a0:	f009 fa7c 	bl	2559c <poller_thread>
   1c0a4:	900b      	str	r0, [sp, #44]	; 0x2c
   1c0a6:	4638      	mov	r0, r7
   1c0a8:	f009 fa78 	bl	2559c <poller_thread>
   1c0ac:	4601      	mov	r1, r0
   1c0ae:	900a      	str	r0, [sp, #40]	; 0x28
   1c0b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c0b2:	f008 ffef 	bl	25094 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c0b6:	2800      	cmp	r0, #0
   1c0b8:	dc1a      	bgt.n	1c0f0 <z_impl_k_poll+0x184>
	return list->head == list;
   1c0ba:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0be:	45d0      	cmp	r8, sl
   1c0c0:	d02f      	beq.n	1c122 <z_impl_k_poll+0x1b6>
   1c0c2:	4653      	mov	r3, sl
   1c0c4:	46a2      	mov	sl, r4
   1c0c6:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c0c8:	b38c      	cbz	r4, 1c12e <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c0ca:	68a0      	ldr	r0, [r4, #8]
   1c0cc:	f009 fa66 	bl	2559c <poller_thread>
   1c0d0:	4601      	mov	r1, r0
   1c0d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c0d4:	f008 ffde 	bl	25094 <z_sched_prio_cmp>
   1c0d8:	2800      	cmp	r0, #0
   1c0da:	dc16      	bgt.n	1c10a <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c0dc:	b34c      	cbz	r4, 1c132 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1c0de:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c0e2:	429c      	cmp	r4, r3
   1c0e4:	d030      	beq.n	1c148 <z_impl_k_poll+0x1dc>
   1c0e6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c0e8:	2c00      	cmp	r4, #0
   1c0ea:	d1ed      	bne.n	1c0c8 <z_impl_k_poll+0x15c>
   1c0ec:	4654      	mov	r4, sl
   1c0ee:	e021      	b.n	1c134 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1c0f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c0f6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c0fa:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c0fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c0fe:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1c102:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1c104:	f10b 0b01 	add.w	fp, fp, #1
   1c108:	e775      	b.n	1bff6 <z_impl_k_poll+0x8a>
   1c10a:	4623      	mov	r3, r4
   1c10c:	4654      	mov	r4, sl
   1c10e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c110:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c112:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c114:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c116:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c11a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c11c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c120:	e7ef      	b.n	1c102 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c122:	f04f 0a00 	mov.w	sl, #0
   1c126:	4653      	mov	r3, sl
   1c128:	46a2      	mov	sl, r4
   1c12a:	461c      	mov	r4, r3
   1c12c:	e7cc      	b.n	1c0c8 <z_impl_k_poll+0x15c>
   1c12e:	4654      	mov	r4, sl
   1c130:	e000      	b.n	1c134 <z_impl_k_poll+0x1c8>
   1c132:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c134:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c138:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c13a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c13e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c140:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c142:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c146:	e7dc      	b.n	1c102 <z_impl_k_poll+0x196>
   1c148:	4654      	mov	r4, sl
   1c14a:	e7f3      	b.n	1c134 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1c14c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c150:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1c154:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c158:	4598      	cmp	r8, r3
   1c15a:	d02b      	beq.n	1c1b4 <z_impl_k_poll+0x248>
   1c15c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c160:	b343      	cbz	r3, 1c1b4 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c162:	6898      	ldr	r0, [r3, #8]
   1c164:	f009 fa1a 	bl	2559c <poller_thread>
   1c168:	900b      	str	r0, [sp, #44]	; 0x2c
   1c16a:	4638      	mov	r0, r7
   1c16c:	f009 fa16 	bl	2559c <poller_thread>
   1c170:	4601      	mov	r1, r0
   1c172:	900a      	str	r0, [sp, #40]	; 0x28
   1c174:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c176:	f008 ff8d 	bl	25094 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c17a:	2800      	cmp	r0, #0
   1c17c:	dc1a      	bgt.n	1c1b4 <z_impl_k_poll+0x248>
	return list->head == list;
   1c17e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c182:	45d0      	cmp	r8, sl
   1c184:	d02c      	beq.n	1c1e0 <z_impl_k_poll+0x274>
   1c186:	4653      	mov	r3, sl
   1c188:	46a2      	mov	sl, r4
   1c18a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c18c:	b374      	cbz	r4, 1c1ec <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c18e:	68a0      	ldr	r0, [r4, #8]
   1c190:	f009 fa04 	bl	2559c <poller_thread>
   1c194:	4601      	mov	r1, r0
   1c196:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c198:	f008 ff7c 	bl	25094 <z_sched_prio_cmp>
   1c19c:	2800      	cmp	r0, #0
   1c19e:	dc13      	bgt.n	1c1c8 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c1a0:	b334      	cbz	r4, 1c1f0 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1c1a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c1a6:	429c      	cmp	r4, r3
   1c1a8:	d02d      	beq.n	1c206 <z_impl_k_poll+0x29a>
   1c1aa:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c1ac:	2c00      	cmp	r4, #0
   1c1ae:	d1ed      	bne.n	1c18c <z_impl_k_poll+0x220>
   1c1b0:	4654      	mov	r4, sl
   1c1b2:	e01e      	b.n	1c1f2 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1c1b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c1ba:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c1be:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c1c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c1c2:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c1c6:	e79c      	b.n	1c102 <z_impl_k_poll+0x196>
   1c1c8:	4623      	mov	r3, r4
   1c1ca:	4654      	mov	r4, sl
   1c1cc:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c1ce:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c1d0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c1d4:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c1d8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c1da:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c1de:	e790      	b.n	1c102 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c1e0:	f04f 0a00 	mov.w	sl, #0
   1c1e4:	4653      	mov	r3, sl
   1c1e6:	46a2      	mov	sl, r4
   1c1e8:	461c      	mov	r4, r3
   1c1ea:	e7cf      	b.n	1c18c <z_impl_k_poll+0x220>
   1c1ec:	4654      	mov	r4, sl
   1c1ee:	e000      	b.n	1c1f2 <z_impl_k_poll+0x286>
   1c1f0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c1f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c1f8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c1fc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c1fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c200:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c204:	e77d      	b.n	1c102 <z_impl_k_poll+0x196>
   1c206:	4654      	mov	r4, sl
   1c208:	e7f3      	b.n	1c1f2 <z_impl_k_poll+0x286>
   1c20a:	bf00      	nop
   1c20c:	20003548 	.word	0x20003548
		add_event(&event->signal->poll_events, event, poller);
   1c210:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1c214:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c218:	4598      	cmp	r8, r3
   1c21a:	d02b      	beq.n	1c274 <z_impl_k_poll+0x308>
   1c21c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c220:	b343      	cbz	r3, 1c274 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c222:	6898      	ldr	r0, [r3, #8]
   1c224:	f009 f9ba 	bl	2559c <poller_thread>
   1c228:	4682      	mov	sl, r0
   1c22a:	4638      	mov	r0, r7
   1c22c:	f009 f9b6 	bl	2559c <poller_thread>
   1c230:	4601      	mov	r1, r0
   1c232:	900a      	str	r0, [sp, #40]	; 0x28
   1c234:	4650      	mov	r0, sl
   1c236:	f008 ff2d 	bl	25094 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c23a:	2800      	cmp	r0, #0
   1c23c:	dc1a      	bgt.n	1c274 <z_impl_k_poll+0x308>
	return list->head == list;
   1c23e:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c242:	45d0      	cmp	r8, sl
   1c244:	d02c      	beq.n	1c2a0 <z_impl_k_poll+0x334>
   1c246:	4653      	mov	r3, sl
   1c248:	46a2      	mov	sl, r4
   1c24a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c24c:	b374      	cbz	r4, 1c2ac <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c24e:	68a0      	ldr	r0, [r4, #8]
   1c250:	f009 f9a4 	bl	2559c <poller_thread>
   1c254:	4601      	mov	r1, r0
   1c256:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c258:	f008 ff1c 	bl	25094 <z_sched_prio_cmp>
   1c25c:	2800      	cmp	r0, #0
   1c25e:	dc13      	bgt.n	1c288 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c260:	b334      	cbz	r4, 1c2b0 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1c262:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c266:	429c      	cmp	r4, r3
   1c268:	d02d      	beq.n	1c2c6 <z_impl_k_poll+0x35a>
   1c26a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c26c:	2c00      	cmp	r4, #0
   1c26e:	d1ed      	bne.n	1c24c <z_impl_k_poll+0x2e0>
   1c270:	4654      	mov	r4, sl
   1c272:	e01e      	b.n	1c2b2 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1c274:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c278:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c27a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c27e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c280:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c282:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c286:	e73c      	b.n	1c102 <z_impl_k_poll+0x196>
   1c288:	4623      	mov	r3, r4
   1c28a:	4654      	mov	r4, sl
   1c28c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c28e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c290:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c292:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c294:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c298:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c29a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c29e:	e730      	b.n	1c102 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c2a0:	f04f 0a00 	mov.w	sl, #0
   1c2a4:	4653      	mov	r3, sl
   1c2a6:	46a2      	mov	sl, r4
   1c2a8:	461c      	mov	r4, r3
   1c2aa:	e7cf      	b.n	1c24c <z_impl_k_poll+0x2e0>
   1c2ac:	4654      	mov	r4, sl
   1c2ae:	e000      	b.n	1c2b2 <z_impl_k_poll+0x346>
   1c2b0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c2b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c2b8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c2bc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c2be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c2c0:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c2c4:	e71d      	b.n	1c102 <z_impl_k_poll+0x196>
   1c2c6:	4654      	mov	r4, sl
   1c2c8:	e7f3      	b.n	1c2b2 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1c2ca:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c2ce:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1c2d2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c2d6:	4598      	cmp	r8, r3
   1c2d8:	d02b      	beq.n	1c332 <z_impl_k_poll+0x3c6>
   1c2da:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c2de:	b343      	cbz	r3, 1c332 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c2e0:	6898      	ldr	r0, [r3, #8]
   1c2e2:	f009 f95b 	bl	2559c <poller_thread>
   1c2e6:	900b      	str	r0, [sp, #44]	; 0x2c
   1c2e8:	4638      	mov	r0, r7
   1c2ea:	f009 f957 	bl	2559c <poller_thread>
   1c2ee:	4601      	mov	r1, r0
   1c2f0:	900a      	str	r0, [sp, #40]	; 0x28
   1c2f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c2f4:	f008 fece 	bl	25094 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c2f8:	2800      	cmp	r0, #0
   1c2fa:	dc1a      	bgt.n	1c332 <z_impl_k_poll+0x3c6>
	return list->head == list;
   1c2fc:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c300:	45d0      	cmp	r8, sl
   1c302:	d02c      	beq.n	1c35e <z_impl_k_poll+0x3f2>
   1c304:	4653      	mov	r3, sl
   1c306:	46a2      	mov	sl, r4
   1c308:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c30a:	b374      	cbz	r4, 1c36a <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c30c:	68a0      	ldr	r0, [r4, #8]
   1c30e:	f009 f945 	bl	2559c <poller_thread>
   1c312:	4601      	mov	r1, r0
   1c314:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c316:	f008 febd 	bl	25094 <z_sched_prio_cmp>
   1c31a:	2800      	cmp	r0, #0
   1c31c:	dc13      	bgt.n	1c346 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c31e:	b334      	cbz	r4, 1c36e <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1c320:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c324:	429c      	cmp	r4, r3
   1c326:	d02d      	beq.n	1c384 <z_impl_k_poll+0x418>
   1c328:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c32a:	2c00      	cmp	r4, #0
   1c32c:	d1ed      	bne.n	1c30a <z_impl_k_poll+0x39e>
   1c32e:	4654      	mov	r4, sl
   1c330:	e01e      	b.n	1c370 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1c332:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c336:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c338:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c33c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c33e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c340:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c344:	e6dd      	b.n	1c102 <z_impl_k_poll+0x196>
   1c346:	4623      	mov	r3, r4
   1c348:	4654      	mov	r4, sl
   1c34a:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c34c:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c34e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c350:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c352:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c356:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c358:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c35c:	e6d1      	b.n	1c102 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c35e:	f04f 0a00 	mov.w	sl, #0
   1c362:	4653      	mov	r3, sl
   1c364:	46a2      	mov	sl, r4
   1c366:	461c      	mov	r4, r3
   1c368:	e7cf      	b.n	1c30a <z_impl_k_poll+0x39e>
   1c36a:	4654      	mov	r4, sl
   1c36c:	e000      	b.n	1c370 <z_impl_k_poll+0x404>
   1c36e:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c370:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c374:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c376:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c37a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c37c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c37e:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c382:	e6be      	b.n	1c102 <z_impl_k_poll+0x196>
   1c384:	4654      	mov	r4, sl
   1c386:	e7f3      	b.n	1c370 <z_impl_k_poll+0x404>
   1c388:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c38c:	f3ef 8111 	mrs	r1, BASEPRI
   1c390:	f383 8812 	msr	BASEPRI_MAX, r3
   1c394:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c398:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1c39c:	b1cb      	cbz	r3, 1c3d2 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1c39e:	2300      	movs	r3, #0
   1c3a0:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c3a4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1c3a8:	4323      	orrs	r3, r4
   1c3aa:	d045      	beq.n	1c438 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c3ac:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1c3b0:	e9cd 3400 	strd	r3, r4, [sp]
   1c3b4:	4a3c      	ldr	r2, [pc, #240]	; (1c4a8 <z_impl_k_poll+0x53c>)
   1c3b6:	483d      	ldr	r0, [pc, #244]	; (1c4ac <z_impl_k_poll+0x540>)
   1c3b8:	f7ff f94a 	bl	1b650 <z_pend_curr>
   1c3bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3c0:	f3ef 8c11 	mrs	ip, BASEPRI
   1c3c4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3c8:	f3bf 8f6f 	isb	sy
   1c3cc:	4661      	mov	r1, ip
	while (num_events--) {
   1c3ce:	465b      	mov	r3, fp
   1c3d0:	e04e      	b.n	1c470 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1c3d2:	4608      	mov	r0, r1
	while (num_events--) {
   1c3d4:	465b      	mov	r3, fp
   1c3d6:	e014      	b.n	1c402 <z_impl_k_poll+0x496>
	return node->next != NULL;
   1c3d8:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c3da:	b12a      	cbz	r2, 1c3e8 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1c3dc:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1c3de:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1c3e0:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1c3e2:	2200      	movs	r2, #0
   1c3e4:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1c3e6:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1c3e8:	f380 8811 	msr	BASEPRI, r0
   1c3ec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c3f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3f4:	f3ef 8011 	mrs	r0, BASEPRI
   1c3f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3fc:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1c400:	463b      	mov	r3, r7
   1c402:	1e5f      	subs	r7, r3, #1
   1c404:	b193      	cbz	r3, 1c42c <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1c406:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1c40a:	009e      	lsls	r6, r3, #2
   1c40c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1c410:	2200      	movs	r2, #0
   1c412:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1c414:	7b5a      	ldrb	r2, [r3, #13]
   1c416:	f002 021f 	and.w	r2, r2, #31
   1c41a:	2a08      	cmp	r2, #8
   1c41c:	d8e4      	bhi.n	1c3e8 <z_impl_k_poll+0x47c>
   1c41e:	2401      	movs	r4, #1
   1c420:	fa04 f202 	lsl.w	r2, r4, r2
   1c424:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1c428:	d0de      	beq.n	1c3e8 <z_impl_k_poll+0x47c>
   1c42a:	e7d5      	b.n	1c3d8 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1c42c:	f381 8811 	msr	BASEPRI, r1
   1c430:	f3bf 8f6f 	isb	sy
		return 0;
   1c434:	4618      	mov	r0, r3
   1c436:	e034      	b.n	1c4a2 <z_impl_k_poll+0x536>
   1c438:	f381 8811 	msr	BASEPRI, r1
   1c43c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c440:	f06f 000a 	mvn.w	r0, #10
   1c444:	e02d      	b.n	1c4a2 <z_impl_k_poll+0x536>
	return node->next != NULL;
   1c446:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c448:	b12a      	cbz	r2, 1c456 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1c44a:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1c44c:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1c44e:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1c450:	2200      	movs	r2, #0
   1c452:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1c454:	605a      	str	r2, [r3, #4]
   1c456:	f381 8811 	msr	BASEPRI, r1
   1c45a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c45e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c462:	f3ef 8111 	mrs	r1, BASEPRI
   1c466:	f383 8812 	msr	BASEPRI_MAX, r3
   1c46a:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1c46e:	4623      	mov	r3, r4
   1c470:	1e5c      	subs	r4, r3, #1
   1c472:	b193      	cbz	r3, 1c49a <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1c474:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c478:	009f      	lsls	r7, r3, #2
   1c47a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1c47e:	2200      	movs	r2, #0
   1c480:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1c482:	7b5a      	ldrb	r2, [r3, #13]
   1c484:	f002 021f 	and.w	r2, r2, #31
   1c488:	2a08      	cmp	r2, #8
   1c48a:	d8e4      	bhi.n	1c456 <z_impl_k_poll+0x4ea>
   1c48c:	2601      	movs	r6, #1
   1c48e:	fa06 f202 	lsl.w	r2, r6, r2
   1c492:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1c496:	d0de      	beq.n	1c456 <z_impl_k_poll+0x4ea>
   1c498:	e7d5      	b.n	1c446 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1c49a:	f38c 8811 	msr	BASEPRI, ip
   1c49e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c4a2:	b00d      	add	sp, #52	; 0x34
   1c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4a8:	2000097c 	.word	0x2000097c
   1c4ac:	2000358c 	.word	0x2000358c

0001c4b0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c4b0:	b538      	push	{r3, r4, r5, lr}
   1c4b2:	4603      	mov	r3, r0
	__asm__ volatile(
   1c4b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c4b8:	f3ef 8511 	mrs	r5, BASEPRI
   1c4bc:	f382 8812 	msr	BASEPRI_MAX, r2
   1c4c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c4c4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c4c6:	2201      	movs	r2, #1
   1c4c8:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1c4ca:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c4cc:	4283      	cmp	r3, r0
   1c4ce:	d011      	beq.n	1c4f4 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1c4d0:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1c4d2:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1c4d4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c4d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c4d8:	2300      	movs	r3, #0
   1c4da:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1c4dc:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1c4de:	b148      	cbz	r0, 1c4f4 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c4e0:	2101      	movs	r1, #1
   1c4e2:	f009 f8ab 	bl	2563c <signal_poll_event>
   1c4e6:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1c4e8:	4629      	mov	r1, r5
   1c4ea:	4805      	ldr	r0, [pc, #20]	; (1c500 <z_impl_k_poll_signal_raise+0x50>)
   1c4ec:	f7fe ff4c 	bl	1b388 <z_reschedule>
	return rc;
}
   1c4f0:	4620      	mov	r0, r4
   1c4f2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c4f4:	f385 8811 	msr	BASEPRI, r5
   1c4f8:	f3bf 8f6f 	isb	sy
		return 0;
   1c4fc:	2400      	movs	r4, #0
   1c4fe:	e7f7      	b.n	1c4f0 <z_impl_k_poll_signal_raise+0x40>
   1c500:	2000358c 	.word	0x2000358c

0001c504 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c504:	b538      	push	{r3, r4, r5, lr}
   1c506:	4604      	mov	r4, r0
   1c508:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c50a:	f008 fb4e 	bl	24baa <k_is_in_isr>
   1c50e:	b948      	cbnz	r0, 1c524 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c510:	4b05      	ldr	r3, [pc, #20]	; (1c528 <z_thread_aligned_alloc+0x24>)
   1c512:	689b      	ldr	r3, [r3, #8]
   1c514:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1c518:	b118      	cbz	r0, 1c522 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1c51a:	462a      	mov	r2, r5
   1c51c:	4621      	mov	r1, r4
   1c51e:	f009 f8d6 	bl	256ce <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1c522:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   1c524:	2000      	movs	r0, #0
	return ret;
   1c526:	e7fc      	b.n	1c522 <z_thread_aligned_alloc+0x1e>
   1c528:	20003548 	.word	0x20003548

0001c52c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1c52c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c52e:	4a03      	ldr	r2, [pc, #12]	; (1c53c <boot_banner+0x10>)
   1c530:	4903      	ldr	r1, [pc, #12]	; (1c540 <boot_banner+0x14>)
   1c532:	4804      	ldr	r0, [pc, #16]	; (1c544 <boot_banner+0x18>)
   1c534:	f003 fb9f 	bl	1fc76 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1c538:	bd08      	pop	{r3, pc}
   1c53a:	bf00      	nop
   1c53c:	00026280 	.word	0x00026280
   1c540:	00027140 	.word	0x00027140
   1c544:	00027150 	.word	0x00027150

0001c548 <nrf_cc3xx_platform_init>:
   1c548:	b510      	push	{r4, lr}
   1c54a:	4c0c      	ldr	r4, [pc, #48]	; (1c57c <nrf_cc3xx_platform_init+0x34>)
   1c54c:	6823      	ldr	r3, [r4, #0]
   1c54e:	b113      	cbz	r3, 1c556 <nrf_cc3xx_platform_init+0xe>
   1c550:	4b0b      	ldr	r3, [pc, #44]	; (1c580 <nrf_cc3xx_platform_init+0x38>)
   1c552:	681b      	ldr	r3, [r3, #0]
   1c554:	b92b      	cbnz	r3, 1c562 <nrf_cc3xx_platform_init+0x1a>
   1c556:	f000 fe73 	bl	1d240 <CC_LibInit>
   1c55a:	b930      	cbnz	r0, 1c56a <nrf_cc3xx_platform_init+0x22>
   1c55c:	4b08      	ldr	r3, [pc, #32]	; (1c580 <nrf_cc3xx_platform_init+0x38>)
   1c55e:	2201      	movs	r2, #1
   1c560:	601a      	str	r2, [r3, #0]
   1c562:	2301      	movs	r3, #1
   1c564:	6023      	str	r3, [r4, #0]
   1c566:	2000      	movs	r0, #0
   1c568:	bd10      	pop	{r4, pc}
   1c56a:	3801      	subs	r0, #1
   1c56c:	2806      	cmp	r0, #6
   1c56e:	d901      	bls.n	1c574 <nrf_cc3xx_platform_init+0x2c>
   1c570:	4804      	ldr	r0, [pc, #16]	; (1c584 <nrf_cc3xx_platform_init+0x3c>)
   1c572:	bd10      	pop	{r4, pc}
   1c574:	4b04      	ldr	r3, [pc, #16]	; (1c588 <nrf_cc3xx_platform_init+0x40>)
   1c576:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c57a:	bd10      	pop	{r4, pc}
   1c57c:	2000358c 	.word	0x2000358c
   1c580:	20003590 	.word	0x20003590
   1c584:	ffff8ffe 	.word	0xffff8ffe
   1c588:	00027178 	.word	0x00027178

0001c58c <nrf_cc3xx_platform_abort>:
   1c58c:	f3bf 8f4f 	dsb	sy
   1c590:	4905      	ldr	r1, [pc, #20]	; (1c5a8 <nrf_cc3xx_platform_abort+0x1c>)
   1c592:	4b06      	ldr	r3, [pc, #24]	; (1c5ac <nrf_cc3xx_platform_abort+0x20>)
   1c594:	68ca      	ldr	r2, [r1, #12]
   1c596:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c59a:	4313      	orrs	r3, r2
   1c59c:	60cb      	str	r3, [r1, #12]
   1c59e:	f3bf 8f4f 	dsb	sy
   1c5a2:	bf00      	nop
   1c5a4:	e7fd      	b.n	1c5a2 <nrf_cc3xx_platform_abort+0x16>
   1c5a6:	bf00      	nop
   1c5a8:	e000ed00 	.word	0xe000ed00
   1c5ac:	05fa0004 	.word	0x05fa0004

0001c5b0 <CC_PalAbort>:
   1c5b0:	b4f0      	push	{r4, r5, r6, r7}
   1c5b2:	4f09      	ldr	r7, [pc, #36]	; (1c5d8 <CC_PalAbort+0x28>)
   1c5b4:	4e09      	ldr	r6, [pc, #36]	; (1c5dc <CC_PalAbort+0x2c>)
   1c5b6:	4c0a      	ldr	r4, [pc, #40]	; (1c5e0 <CC_PalAbort+0x30>)
   1c5b8:	4a0a      	ldr	r2, [pc, #40]	; (1c5e4 <CC_PalAbort+0x34>)
   1c5ba:	4d0b      	ldr	r5, [pc, #44]	; (1c5e8 <CC_PalAbort+0x38>)
   1c5bc:	490b      	ldr	r1, [pc, #44]	; (1c5ec <CC_PalAbort+0x3c>)
   1c5be:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1c5c2:	603b      	str	r3, [r7, #0]
   1c5c4:	6852      	ldr	r2, [r2, #4]
   1c5c6:	6033      	str	r3, [r6, #0]
   1c5c8:	6023      	str	r3, [r4, #0]
   1c5ca:	2400      	movs	r4, #0
   1c5cc:	602b      	str	r3, [r5, #0]
   1c5ce:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1c5d2:	bcf0      	pop	{r4, r5, r6, r7}
   1c5d4:	4710      	bx	r2
   1c5d6:	bf00      	nop
   1c5d8:	5002b400 	.word	0x5002b400
   1c5dc:	5002b404 	.word	0x5002b404
   1c5e0:	5002b408 	.word	0x5002b408
   1c5e4:	20000984 	.word	0x20000984
   1c5e8:	5002b40c 	.word	0x5002b40c
   1c5ec:	5002a000 	.word	0x5002a000

0001c5f0 <nrf_cc3xx_platform_set_abort>:
   1c5f0:	e9d0 1200 	ldrd	r1, r2, [r0]
   1c5f4:	4b01      	ldr	r3, [pc, #4]	; (1c5fc <nrf_cc3xx_platform_set_abort+0xc>)
   1c5f6:	e9c3 1200 	strd	r1, r2, [r3]
   1c5fa:	4770      	bx	lr
   1c5fc:	20000984 	.word	0x20000984

0001c600 <nrf_cc3xx_platform_ctr_drbg_init>:
   1c600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c604:	4c15      	ldr	r4, [pc, #84]	; (1c65c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1c606:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1c664 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1c60a:	2800      	cmp	r0, #0
   1c60c:	bf18      	it	ne
   1c60e:	4604      	movne	r4, r0
   1c610:	b083      	sub	sp, #12
   1c612:	6820      	ldr	r0, [r4, #0]
   1c614:	4540      	cmp	r0, r8
   1c616:	d01d      	beq.n	1c654 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1c618:	460d      	mov	r5, r1
   1c61a:	4620      	mov	r0, r4
   1c61c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1c620:	f104 0904 	add.w	r9, r4, #4
   1c624:	4616      	mov	r6, r2
   1c626:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1c62a:	f000 f8d3 	bl	1c7d4 <mbedtls_platform_zeroize>
   1c62e:	4648      	mov	r0, r9
   1c630:	f000 fcf2 	bl	1d018 <cc_mbedtls_entropy_init>
   1c634:	4638      	mov	r0, r7
   1c636:	f000 fb1f 	bl	1cc78 <cc_mbedtls_ctr_drbg_init>
   1c63a:	4909      	ldr	r1, [pc, #36]	; (1c660 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1c63c:	9600      	str	r6, [sp, #0]
   1c63e:	464a      	mov	r2, r9
   1c640:	4638      	mov	r0, r7
   1c642:	462b      	mov	r3, r5
   1c644:	f000 fb2e 	bl	1cca4 <cc_mbedtls_ctr_drbg_seed>
   1c648:	b908      	cbnz	r0, 1c64e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1c64a:	f8c4 8000 	str.w	r8, [r4]
   1c64e:	b003      	add	sp, #12
   1c650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c654:	2000      	movs	r0, #0
   1c656:	b003      	add	sp, #12
   1c658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c65c:	20003f78 	.word	0x20003f78
   1c660:	0001d095 	.word	0x0001d095
   1c664:	5ac9bca5 	.word	0x5ac9bca5

0001c668 <nrf_cc3xx_platform_ctr_drbg_get>:
   1c668:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c66a:	4c0d      	ldr	r4, [pc, #52]	; (1c6a0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1c66c:	4e0d      	ldr	r6, [pc, #52]	; (1c6a4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1c66e:	2800      	cmp	r0, #0
   1c670:	bf08      	it	eq
   1c672:	4620      	moveq	r0, r4
   1c674:	b083      	sub	sp, #12
   1c676:	6807      	ldr	r7, [r0, #0]
   1c678:	42b7      	cmp	r7, r6
   1c67a:	d10e      	bne.n	1c69a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1c67c:	2600      	movs	r6, #0
   1c67e:	461d      	mov	r5, r3
   1c680:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1c684:	9600      	str	r6, [sp, #0]
   1c686:	4633      	mov	r3, r6
   1c688:	4614      	mov	r4, r2
   1c68a:	f000 fb57 	bl	1cd3c <cc_mbedtls_ctr_drbg_random_with_add>
   1c68e:	2800      	cmp	r0, #0
   1c690:	bf18      	it	ne
   1c692:	4634      	movne	r4, r6
   1c694:	602c      	str	r4, [r5, #0]
   1c696:	b003      	add	sp, #12
   1c698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c69a:	4803      	ldr	r0, [pc, #12]	; (1c6a8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1c69c:	e7fb      	b.n	1c696 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1c69e:	bf00      	nop
   1c6a0:	20003f78 	.word	0x20003f78
   1c6a4:	5ac9bca5 	.word	0x5ac9bca5
   1c6a8:	ffff8fe8 	.word	0xffff8fe8

0001c6ac <mutex_free>:
   1c6ac:	b510      	push	{r4, lr}
   1c6ae:	4604      	mov	r4, r0
   1c6b0:	b130      	cbz	r0, 1c6c0 <mutex_free+0x14>
   1c6b2:	6863      	ldr	r3, [r4, #4]
   1c6b4:	06db      	lsls	r3, r3, #27
   1c6b6:	d502      	bpl.n	1c6be <mutex_free+0x12>
   1c6b8:	2300      	movs	r3, #0
   1c6ba:	6023      	str	r3, [r4, #0]
   1c6bc:	6063      	str	r3, [r4, #4]
   1c6be:	bd10      	pop	{r4, pc}
   1c6c0:	4b02      	ldr	r3, [pc, #8]	; (1c6cc <mutex_free+0x20>)
   1c6c2:	4803      	ldr	r0, [pc, #12]	; (1c6d0 <mutex_free+0x24>)
   1c6c4:	685b      	ldr	r3, [r3, #4]
   1c6c6:	4798      	blx	r3
   1c6c8:	e7f3      	b.n	1c6b2 <mutex_free+0x6>
   1c6ca:	bf00      	nop
   1c6cc:	20000984 	.word	0x20000984
   1c6d0:	00027194 	.word	0x00027194

0001c6d4 <mutex_unlock>:
   1c6d4:	b168      	cbz	r0, 1c6f2 <mutex_unlock+0x1e>
   1c6d6:	6843      	ldr	r3, [r0, #4]
   1c6d8:	b13b      	cbz	r3, 1c6ea <mutex_unlock+0x16>
   1c6da:	06db      	lsls	r3, r3, #27
   1c6dc:	d507      	bpl.n	1c6ee <mutex_unlock+0x1a>
   1c6de:	f3bf 8f5f 	dmb	sy
   1c6e2:	2300      	movs	r3, #0
   1c6e4:	6003      	str	r3, [r0, #0]
   1c6e6:	4618      	mov	r0, r3
   1c6e8:	4770      	bx	lr
   1c6ea:	4803      	ldr	r0, [pc, #12]	; (1c6f8 <mutex_unlock+0x24>)
   1c6ec:	4770      	bx	lr
   1c6ee:	4803      	ldr	r0, [pc, #12]	; (1c6fc <mutex_unlock+0x28>)
   1c6f0:	4770      	bx	lr
   1c6f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c6f6:	4770      	bx	lr
   1c6f8:	ffff8fea 	.word	0xffff8fea
   1c6fc:	ffff8fe9 	.word	0xffff8fe9

0001c700 <mutex_init>:
   1c700:	b510      	push	{r4, lr}
   1c702:	4604      	mov	r4, r0
   1c704:	b120      	cbz	r0, 1c710 <mutex_init+0x10>
   1c706:	2200      	movs	r2, #0
   1c708:	2311      	movs	r3, #17
   1c70a:	6022      	str	r2, [r4, #0]
   1c70c:	6063      	str	r3, [r4, #4]
   1c70e:	bd10      	pop	{r4, pc}
   1c710:	4801      	ldr	r0, [pc, #4]	; (1c718 <mutex_init+0x18>)
   1c712:	f7ff ff4d 	bl	1c5b0 <CC_PalAbort>
   1c716:	e7f6      	b.n	1c706 <mutex_init+0x6>
   1c718:	000271bc 	.word	0x000271bc

0001c71c <mutex_lock>:
   1c71c:	b1c0      	cbz	r0, 1c750 <mutex_lock+0x34>
   1c71e:	6843      	ldr	r3, [r0, #4]
   1c720:	b1a3      	cbz	r3, 1c74c <mutex_lock+0x30>
   1c722:	06db      	lsls	r3, r3, #27
   1c724:	d510      	bpl.n	1c748 <mutex_lock+0x2c>
   1c726:	2201      	movs	r2, #1
   1c728:	f3bf 8f5b 	dmb	ish
   1c72c:	e850 3f00 	ldrex	r3, [r0]
   1c730:	e840 2100 	strex	r1, r2, [r0]
   1c734:	2900      	cmp	r1, #0
   1c736:	d1f9      	bne.n	1c72c <mutex_lock+0x10>
   1c738:	f3bf 8f5b 	dmb	ish
   1c73c:	2b01      	cmp	r3, #1
   1c73e:	d0f3      	beq.n	1c728 <mutex_lock+0xc>
   1c740:	f3bf 8f5f 	dmb	sy
   1c744:	2000      	movs	r0, #0
   1c746:	4770      	bx	lr
   1c748:	4803      	ldr	r0, [pc, #12]	; (1c758 <mutex_lock+0x3c>)
   1c74a:	4770      	bx	lr
   1c74c:	4803      	ldr	r0, [pc, #12]	; (1c75c <mutex_lock+0x40>)
   1c74e:	4770      	bx	lr
   1c750:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c754:	4770      	bx	lr
   1c756:	bf00      	nop
   1c758:	ffff8fe9 	.word	0xffff8fe9
   1c75c:	ffff8fea 	.word	0xffff8fea

0001c760 <nrf_cc3xx_platform_set_mutexes>:
   1c760:	b570      	push	{r4, r5, r6, lr}
   1c762:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c766:	4c13      	ldr	r4, [pc, #76]	; (1c7b4 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1c768:	4d13      	ldr	r5, [pc, #76]	; (1c7b8 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1c76a:	e9c4 2300 	strd	r2, r3, [r4]
   1c76e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1c772:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1c776:	4b11      	ldr	r3, [pc, #68]	; (1c7bc <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1c778:	6808      	ldr	r0, [r1, #0]
   1c77a:	6018      	str	r0, [r3, #0]
   1c77c:	6848      	ldr	r0, [r1, #4]
   1c77e:	6058      	str	r0, [r3, #4]
   1c780:	6888      	ldr	r0, [r1, #8]
   1c782:	6098      	str	r0, [r3, #8]
   1c784:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1c788:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1c78c:	60de      	str	r6, [r3, #12]
   1c78e:	6118      	str	r0, [r3, #16]
   1c790:	06cb      	lsls	r3, r1, #27
   1c792:	d50d      	bpl.n	1c7b0 <nrf_cc3xx_platform_set_mutexes+0x50>
   1c794:	2300      	movs	r3, #0
   1c796:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1c79a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1c79e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1c7a2:	4790      	blx	r2
   1c7a4:	6823      	ldr	r3, [r4, #0]
   1c7a6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1c7aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c7ae:	4718      	bx	r3
   1c7b0:	bd70      	pop	{r4, r5, r6, pc}
   1c7b2:	bf00      	nop
   1c7b4:	20000994 	.word	0x20000994
   1c7b8:	20003f78 	.word	0x20003f78
   1c7bc:	200009a4 	.word	0x200009a4

0001c7c0 <mbedtls_zeroize_internal>:
   1c7c0:	b138      	cbz	r0, 1c7d2 <mbedtls_zeroize_internal+0x12>
   1c7c2:	b131      	cbz	r1, 1c7d2 <mbedtls_zeroize_internal+0x12>
   1c7c4:	4401      	add	r1, r0
   1c7c6:	2200      	movs	r2, #0
   1c7c8:	4603      	mov	r3, r0
   1c7ca:	3001      	adds	r0, #1
   1c7cc:	4281      	cmp	r1, r0
   1c7ce:	701a      	strb	r2, [r3, #0]
   1c7d0:	d1fa      	bne.n	1c7c8 <mbedtls_zeroize_internal+0x8>
   1c7d2:	4770      	bx	lr

0001c7d4 <mbedtls_platform_zeroize>:
   1c7d4:	b138      	cbz	r0, 1c7e6 <mbedtls_platform_zeroize+0x12>
   1c7d6:	b131      	cbz	r1, 1c7e6 <mbedtls_platform_zeroize+0x12>
   1c7d8:	4401      	add	r1, r0
   1c7da:	2200      	movs	r2, #0
   1c7dc:	4603      	mov	r3, r0
   1c7de:	3001      	adds	r0, #1
   1c7e0:	4288      	cmp	r0, r1
   1c7e2:	701a      	strb	r2, [r3, #0]
   1c7e4:	d1fa      	bne.n	1c7dc <mbedtls_platform_zeroize+0x8>
   1c7e6:	4770      	bx	lr

0001c7e8 <block_cipher_df>:
   1c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7ec:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1c7f0:	b0b1      	sub	sp, #196	; 0xc4
   1c7f2:	f200 812e 	bhi.w	1ca52 <block_cipher_df+0x26a>
   1c7f6:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1ca64 <block_cipher_df+0x27c>
   1c7fa:	4614      	mov	r4, r2
   1c7fc:	460d      	mov	r5, r1
   1c7fe:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1c802:	2100      	movs	r1, #0
   1c804:	4682      	mov	sl, r0
   1c806:	4648      	mov	r0, r9
   1c808:	f008 ffc8 	bl	2579c <memset>
   1c80c:	a813      	add	r0, sp, #76	; 0x4c
   1c80e:	f001 f9e5 	bl	1dbdc <cc_mbedtls_aes_init>
   1c812:	2600      	movs	r6, #0
   1c814:	4629      	mov	r1, r5
   1c816:	2320      	movs	r3, #32
   1c818:	ba65      	rev16	r5, r4
   1c81a:	4622      	mov	r2, r4
   1c81c:	f109 0018 	add.w	r0, r9, #24
   1c820:	f8a9 5012 	strh.w	r5, [r9, #18]
   1c824:	f889 3017 	strb.w	r3, [r9, #23]
   1c828:	f8a9 6010 	strh.w	r6, [r9, #16]
   1c82c:	f008 ff7b 	bl	25726 <memcpy>
   1c830:	eb09 0304 	add.w	r3, r9, r4
   1c834:	2280      	movs	r2, #128	; 0x80
   1c836:	4d88      	ldr	r5, [pc, #544]	; (1ca58 <block_cipher_df+0x270>)
   1c838:	761a      	strb	r2, [r3, #24]
   1c83a:	4b88      	ldr	r3, [pc, #544]	; (1ca5c <block_cipher_df+0x274>)
   1c83c:	9503      	str	r5, [sp, #12]
   1c83e:	9304      	str	r3, [sp, #16]
   1c840:	a813      	add	r0, sp, #76	; 0x4c
   1c842:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1c846:	a903      	add	r1, sp, #12
   1c848:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1c84c:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1c850:	f001 f9da 	bl	1dc08 <cc_mbedtls_aes_setkey_enc>
   1c854:	4680      	mov	r8, r0
   1c856:	2800      	cmp	r0, #0
   1c858:	f040 80da 	bne.w	1ca10 <block_cipher_df+0x228>
   1c85c:	f104 0319 	add.w	r3, r4, #25
   1c860:	9301      	str	r3, [sp, #4]
   1c862:	af07      	add	r7, sp, #28
   1c864:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1c868:	2210      	movs	r2, #16
   1c86a:	2100      	movs	r1, #0
   1c86c:	4638      	mov	r0, r7
   1c86e:	f008 ff95 	bl	2579c <memset>
   1c872:	4c7b      	ldr	r4, [pc, #492]	; (1ca60 <block_cipher_df+0x278>)
   1c874:	9d01      	ldr	r5, [sp, #4]
   1c876:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1c87a:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1c87e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1c882:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1c886:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1c88a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1c88e:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1c892:	404e      	eors	r6, r1
   1c894:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1c898:	f88d 601d 	strb.w	r6, [sp, #29]
   1c89c:	ea8e 0303 	eor.w	r3, lr, r3
   1c8a0:	4050      	eors	r0, r2
   1c8a2:	ea8c 0101 	eor.w	r1, ip, r1
   1c8a6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1c8aa:	f88d 301c 	strb.w	r3, [sp, #28]
   1c8ae:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1c8b2:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1c8b6:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1c8ba:	f88d 001e 	strb.w	r0, [sp, #30]
   1c8be:	f88d 101f 	strb.w	r1, [sp, #31]
   1c8c2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1c8c6:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1c8ca:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1c8ce:	405a      	eors	r2, r3
   1c8d0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1c8d4:	f88d 2020 	strb.w	r2, [sp, #32]
   1c8d8:	ea8c 0606 	eor.w	r6, ip, r6
   1c8dc:	4048      	eors	r0, r1
   1c8de:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1c8e2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1c8e6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1c8ea:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1c8ee:	ea8e 0303 	eor.w	r3, lr, r3
   1c8f2:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1c8f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1c8fa:	ea8c 0101 	eor.w	r1, ip, r1
   1c8fe:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1c902:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1c906:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1c90a:	ea82 020c 	eor.w	r2, r2, ip
   1c90e:	4073      	eors	r3, r6
   1c910:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1c914:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1c918:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1c91c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1c920:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1c924:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1c928:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1c92c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1c930:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1c934:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1c938:	ea8e 0202 	eor.w	r2, lr, r2
   1c93c:	4041      	eors	r1, r0
   1c93e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1c942:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1c946:	4073      	eors	r3, r6
   1c948:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1c94c:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1c950:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1c954:	ea8c 0000 	eor.w	r0, ip, r0
   1c958:	4056      	eors	r6, r2
   1c95a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1c95e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1c962:	463b      	mov	r3, r7
   1c964:	463a      	mov	r2, r7
   1c966:	2101      	movs	r1, #1
   1c968:	a813      	add	r0, sp, #76	; 0x4c
   1c96a:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1c96e:	f001 f965 	bl	1dc3c <cc_mbedtls_aes_crypt_ecb>
   1c972:	2d10      	cmp	r5, #16
   1c974:	bf94      	ite	ls
   1c976:	1b6d      	subls	r5, r5, r5
   1c978:	3d10      	subhi	r5, #16
   1c97a:	2800      	cmp	r0, #0
   1c97c:	d167      	bne.n	1ca4e <block_cipher_df+0x266>
   1c97e:	3410      	adds	r4, #16
   1c980:	2d00      	cmp	r5, #0
   1c982:	f47f af78 	bne.w	1c876 <block_cipher_df+0x8e>
   1c986:	eb0b 0008 	add.w	r0, fp, r8
   1c98a:	2210      	movs	r2, #16
   1c98c:	4639      	mov	r1, r7
   1c98e:	f008 feca 	bl	25726 <memcpy>
   1c992:	f899 3003 	ldrb.w	r3, [r9, #3]
   1c996:	f108 0810 	add.w	r8, r8, #16
   1c99a:	3301      	adds	r3, #1
   1c99c:	f1b8 0f20 	cmp.w	r8, #32
   1c9a0:	f889 3003 	strb.w	r3, [r9, #3]
   1c9a4:	f47f af60 	bne.w	1c868 <block_cipher_df+0x80>
   1c9a8:	2280      	movs	r2, #128	; 0x80
   1c9aa:	4659      	mov	r1, fp
   1c9ac:	a813      	add	r0, sp, #76	; 0x4c
   1c9ae:	f001 f92b 	bl	1dc08 <cc_mbedtls_aes_setkey_enc>
   1c9b2:	4680      	mov	r8, r0
   1c9b4:	bb78      	cbnz	r0, 1ca16 <block_cipher_df+0x22e>
   1c9b6:	f10a 0520 	add.w	r5, sl, #32
   1c9ba:	4654      	mov	r4, sl
   1c9bc:	ab0f      	add	r3, sp, #60	; 0x3c
   1c9be:	461a      	mov	r2, r3
   1c9c0:	2101      	movs	r1, #1
   1c9c2:	a813      	add	r0, sp, #76	; 0x4c
   1c9c4:	f001 f93a 	bl	1dc3c <cc_mbedtls_aes_crypt_ecb>
   1c9c8:	2210      	movs	r2, #16
   1c9ca:	4680      	mov	r8, r0
   1c9cc:	a90f      	add	r1, sp, #60	; 0x3c
   1c9ce:	4620      	mov	r0, r4
   1c9d0:	4414      	add	r4, r2
   1c9d2:	f1b8 0f00 	cmp.w	r8, #0
   1c9d6:	d11e      	bne.n	1ca16 <block_cipher_df+0x22e>
   1c9d8:	f008 fea5 	bl	25726 <memcpy>
   1c9dc:	42ac      	cmp	r4, r5
   1c9de:	d1ed      	bne.n	1c9bc <block_cipher_df+0x1d4>
   1c9e0:	a813      	add	r0, sp, #76	; 0x4c
   1c9e2:	f001 f90b 	bl	1dbfc <cc_mbedtls_aes_free>
   1c9e6:	481f      	ldr	r0, [pc, #124]	; (1ca64 <block_cipher_df+0x27c>)
   1c9e8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1c9ec:	f7ff fef2 	bl	1c7d4 <mbedtls_platform_zeroize>
   1c9f0:	4658      	mov	r0, fp
   1c9f2:	2120      	movs	r1, #32
   1c9f4:	f7ff feee 	bl	1c7d4 <mbedtls_platform_zeroize>
   1c9f8:	a803      	add	r0, sp, #12
   1c9fa:	2110      	movs	r1, #16
   1c9fc:	f7ff feea 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca00:	4638      	mov	r0, r7
   1ca02:	2110      	movs	r1, #16
   1ca04:	f7ff fee6 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca08:	4640      	mov	r0, r8
   1ca0a:	b031      	add	sp, #196	; 0xc4
   1ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca10:	af07      	add	r7, sp, #28
   1ca12:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1ca16:	a813      	add	r0, sp, #76	; 0x4c
   1ca18:	f001 f8f0 	bl	1dbfc <cc_mbedtls_aes_free>
   1ca1c:	4811      	ldr	r0, [pc, #68]	; (1ca64 <block_cipher_df+0x27c>)
   1ca1e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ca22:	f7ff fed7 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca26:	4658      	mov	r0, fp
   1ca28:	2120      	movs	r1, #32
   1ca2a:	f7ff fed3 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca2e:	a803      	add	r0, sp, #12
   1ca30:	2110      	movs	r1, #16
   1ca32:	f7ff fecf 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca36:	4638      	mov	r0, r7
   1ca38:	2110      	movs	r1, #16
   1ca3a:	f7ff fecb 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca3e:	4650      	mov	r0, sl
   1ca40:	2120      	movs	r1, #32
   1ca42:	f7ff fec7 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ca46:	4640      	mov	r0, r8
   1ca48:	b031      	add	sp, #196	; 0xc4
   1ca4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca4e:	4680      	mov	r8, r0
   1ca50:	e7e1      	b.n	1ca16 <block_cipher_df+0x22e>
   1ca52:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1ca56:	e7f6      	b.n	1ca46 <block_cipher_df+0x25e>
   1ca58:	03020100 	.word	0x03020100
   1ca5c:	07060504 	.word	0x07060504
   1ca60:	200035b4 	.word	0x200035b4
   1ca64:	200035a4 	.word	0x200035a4

0001ca68 <ctr_drbg_update_internal>:
   1ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca6c:	b088      	sub	sp, #32
   1ca6e:	4604      	mov	r4, r0
   1ca70:	2220      	movs	r2, #32
   1ca72:	460d      	mov	r5, r1
   1ca74:	4668      	mov	r0, sp
   1ca76:	2100      	movs	r1, #0
   1ca78:	eb04 0802 	add.w	r8, r4, r2
   1ca7c:	f008 fe8e 	bl	2579c <memset>
   1ca80:	466e      	mov	r6, sp
   1ca82:	7be2      	ldrb	r2, [r4, #15]
   1ca84:	3201      	adds	r2, #1
   1ca86:	b2d2      	uxtb	r2, r2
   1ca88:	73e2      	strb	r2, [r4, #15]
   1ca8a:	2a00      	cmp	r2, #0
   1ca8c:	d14d      	bne.n	1cb2a <ctr_drbg_update_internal+0xc2>
   1ca8e:	7ba2      	ldrb	r2, [r4, #14]
   1ca90:	3201      	adds	r2, #1
   1ca92:	b2d2      	uxtb	r2, r2
   1ca94:	73a2      	strb	r2, [r4, #14]
   1ca96:	2a00      	cmp	r2, #0
   1ca98:	d147      	bne.n	1cb2a <ctr_drbg_update_internal+0xc2>
   1ca9a:	7b63      	ldrb	r3, [r4, #13]
   1ca9c:	3301      	adds	r3, #1
   1ca9e:	b2db      	uxtb	r3, r3
   1caa0:	7363      	strb	r3, [r4, #13]
   1caa2:	2b00      	cmp	r3, #0
   1caa4:	d141      	bne.n	1cb2a <ctr_drbg_update_internal+0xc2>
   1caa6:	7b23      	ldrb	r3, [r4, #12]
   1caa8:	3301      	adds	r3, #1
   1caaa:	b2db      	uxtb	r3, r3
   1caac:	7323      	strb	r3, [r4, #12]
   1caae:	2b00      	cmp	r3, #0
   1cab0:	d13b      	bne.n	1cb2a <ctr_drbg_update_internal+0xc2>
   1cab2:	7ae3      	ldrb	r3, [r4, #11]
   1cab4:	3301      	adds	r3, #1
   1cab6:	b2db      	uxtb	r3, r3
   1cab8:	72e3      	strb	r3, [r4, #11]
   1caba:	2b00      	cmp	r3, #0
   1cabc:	d135      	bne.n	1cb2a <ctr_drbg_update_internal+0xc2>
   1cabe:	7aa3      	ldrb	r3, [r4, #10]
   1cac0:	3301      	adds	r3, #1
   1cac2:	b2db      	uxtb	r3, r3
   1cac4:	72a3      	strb	r3, [r4, #10]
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d12f      	bne.n	1cb2a <ctr_drbg_update_internal+0xc2>
   1caca:	7a63      	ldrb	r3, [r4, #9]
   1cacc:	3301      	adds	r3, #1
   1cace:	b2db      	uxtb	r3, r3
   1cad0:	7263      	strb	r3, [r4, #9]
   1cad2:	bb53      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cad4:	7a23      	ldrb	r3, [r4, #8]
   1cad6:	3301      	adds	r3, #1
   1cad8:	b2db      	uxtb	r3, r3
   1cada:	7223      	strb	r3, [r4, #8]
   1cadc:	bb2b      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cade:	79e3      	ldrb	r3, [r4, #7]
   1cae0:	3301      	adds	r3, #1
   1cae2:	b2db      	uxtb	r3, r3
   1cae4:	71e3      	strb	r3, [r4, #7]
   1cae6:	bb03      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cae8:	79a3      	ldrb	r3, [r4, #6]
   1caea:	3301      	adds	r3, #1
   1caec:	b2db      	uxtb	r3, r3
   1caee:	71a3      	strb	r3, [r4, #6]
   1caf0:	b9db      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1caf2:	7963      	ldrb	r3, [r4, #5]
   1caf4:	3301      	adds	r3, #1
   1caf6:	b2db      	uxtb	r3, r3
   1caf8:	7163      	strb	r3, [r4, #5]
   1cafa:	b9b3      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cafc:	7923      	ldrb	r3, [r4, #4]
   1cafe:	3301      	adds	r3, #1
   1cb00:	b2db      	uxtb	r3, r3
   1cb02:	7123      	strb	r3, [r4, #4]
   1cb04:	b98b      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cb06:	78e3      	ldrb	r3, [r4, #3]
   1cb08:	3301      	adds	r3, #1
   1cb0a:	b2db      	uxtb	r3, r3
   1cb0c:	70e3      	strb	r3, [r4, #3]
   1cb0e:	b963      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cb10:	78a3      	ldrb	r3, [r4, #2]
   1cb12:	3301      	adds	r3, #1
   1cb14:	b2db      	uxtb	r3, r3
   1cb16:	70a3      	strb	r3, [r4, #2]
   1cb18:	b93b      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cb1a:	7863      	ldrb	r3, [r4, #1]
   1cb1c:	3301      	adds	r3, #1
   1cb1e:	b2db      	uxtb	r3, r3
   1cb20:	7063      	strb	r3, [r4, #1]
   1cb22:	b913      	cbnz	r3, 1cb2a <ctr_drbg_update_internal+0xc2>
   1cb24:	7823      	ldrb	r3, [r4, #0]
   1cb26:	3301      	adds	r3, #1
   1cb28:	7023      	strb	r3, [r4, #0]
   1cb2a:	4633      	mov	r3, r6
   1cb2c:	4622      	mov	r2, r4
   1cb2e:	2101      	movs	r1, #1
   1cb30:	4640      	mov	r0, r8
   1cb32:	f001 f883 	bl	1dc3c <cc_mbedtls_aes_crypt_ecb>
   1cb36:	4607      	mov	r7, r0
   1cb38:	2800      	cmp	r0, #0
   1cb3a:	d12b      	bne.n	1cb94 <ctr_drbg_update_internal+0x12c>
   1cb3c:	3610      	adds	r6, #16
   1cb3e:	ab08      	add	r3, sp, #32
   1cb40:	429e      	cmp	r6, r3
   1cb42:	d19e      	bne.n	1ca82 <ctr_drbg_update_internal+0x1a>
   1cb44:	9e01      	ldr	r6, [sp, #4]
   1cb46:	686a      	ldr	r2, [r5, #4]
   1cb48:	9f00      	ldr	r7, [sp, #0]
   1cb4a:	6829      	ldr	r1, [r5, #0]
   1cb4c:	68ab      	ldr	r3, [r5, #8]
   1cb4e:	4072      	eors	r2, r6
   1cb50:	9e02      	ldr	r6, [sp, #8]
   1cb52:	9201      	str	r2, [sp, #4]
   1cb54:	4079      	eors	r1, r7
   1cb56:	4073      	eors	r3, r6
   1cb58:	9100      	str	r1, [sp, #0]
   1cb5a:	9e03      	ldr	r6, [sp, #12]
   1cb5c:	68e9      	ldr	r1, [r5, #12]
   1cb5e:	692a      	ldr	r2, [r5, #16]
   1cb60:	9302      	str	r3, [sp, #8]
   1cb62:	4071      	eors	r1, r6
   1cb64:	9e04      	ldr	r6, [sp, #16]
   1cb66:	696b      	ldr	r3, [r5, #20]
   1cb68:	9103      	str	r1, [sp, #12]
   1cb6a:	4056      	eors	r6, r2
   1cb6c:	9a05      	ldr	r2, [sp, #20]
   1cb6e:	9604      	str	r6, [sp, #16]
   1cb70:	ea83 0102 	eor.w	r1, r3, r2
   1cb74:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1cb78:	9d06      	ldr	r5, [sp, #24]
   1cb7a:	9105      	str	r1, [sp, #20]
   1cb7c:	4055      	eors	r5, r2
   1cb7e:	9a07      	ldr	r2, [sp, #28]
   1cb80:	4640      	mov	r0, r8
   1cb82:	4053      	eors	r3, r2
   1cb84:	4669      	mov	r1, sp
   1cb86:	2280      	movs	r2, #128	; 0x80
   1cb88:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1cb8c:	f001 f83c 	bl	1dc08 <cc_mbedtls_aes_setkey_enc>
   1cb90:	4607      	mov	r7, r0
   1cb92:	b138      	cbz	r0, 1cba4 <ctr_drbg_update_internal+0x13c>
   1cb94:	4668      	mov	r0, sp
   1cb96:	2120      	movs	r1, #32
   1cb98:	f7ff fe1c 	bl	1c7d4 <mbedtls_platform_zeroize>
   1cb9c:	4638      	mov	r0, r7
   1cb9e:	b008      	add	sp, #32
   1cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cba4:	2210      	movs	r2, #16
   1cba6:	4620      	mov	r0, r4
   1cba8:	eb0d 0102 	add.w	r1, sp, r2
   1cbac:	f008 fdbb 	bl	25726 <memcpy>
   1cbb0:	e7f0      	b.n	1cb94 <ctr_drbg_update_internal+0x12c>
   1cbb2:	bf00      	nop

0001cbb4 <mbedtls_ctr_drbg_reseed_internal>:
   1cbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cbb8:	4604      	mov	r4, r0
   1cbba:	6980      	ldr	r0, [r0, #24]
   1cbbc:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1cbc0:	d852      	bhi.n	1cc68 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1cbc2:	461d      	mov	r5, r3
   1cbc4:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1cbc8:	42ab      	cmp	r3, r5
   1cbca:	d34d      	bcc.n	1cc68 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1cbcc:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1cbd0:	1a18      	subs	r0, r3, r0
   1cbd2:	4290      	cmp	r0, r2
   1cbd4:	4616      	mov	r6, r2
   1cbd6:	d347      	bcc.n	1cc68 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1cbd8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1cc74 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1cbdc:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1cbe0:	460f      	mov	r7, r1
   1cbe2:	4648      	mov	r0, r9
   1cbe4:	2100      	movs	r1, #0
   1cbe6:	f008 fdd9 	bl	2579c <memset>
   1cbea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1cbee:	69a2      	ldr	r2, [r4, #24]
   1cbf0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1cbf4:	4649      	mov	r1, r9
   1cbf6:	4798      	blx	r3
   1cbf8:	2800      	cmp	r0, #0
   1cbfa:	d138      	bne.n	1cc6e <mbedtls_ctr_drbg_reseed_internal+0xba>
   1cbfc:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1cc00:	b13d      	cbz	r5, 1cc12 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1cc02:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1cc06:	462a      	mov	r2, r5
   1cc08:	eb09 0108 	add.w	r1, r9, r8
   1cc0c:	4798      	blx	r3
   1cc0e:	bb70      	cbnz	r0, 1cc6e <mbedtls_ctr_drbg_reseed_internal+0xba>
   1cc10:	44a8      	add	r8, r5
   1cc12:	b107      	cbz	r7, 1cc16 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1cc14:	b9c6      	cbnz	r6, 1cc48 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1cc16:	4917      	ldr	r1, [pc, #92]	; (1cc74 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1cc18:	4642      	mov	r2, r8
   1cc1a:	4608      	mov	r0, r1
   1cc1c:	f7ff fde4 	bl	1c7e8 <block_cipher_df>
   1cc20:	4605      	mov	r5, r0
   1cc22:	b138      	cbz	r0, 1cc34 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1cc24:	4813      	ldr	r0, [pc, #76]	; (1cc74 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1cc26:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1cc2a:	f7ff fdd3 	bl	1c7d4 <mbedtls_platform_zeroize>
   1cc2e:	4628      	mov	r0, r5
   1cc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cc34:	490f      	ldr	r1, [pc, #60]	; (1cc74 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1cc36:	4620      	mov	r0, r4
   1cc38:	f7ff ff16 	bl	1ca68 <ctr_drbg_update_internal>
   1cc3c:	4605      	mov	r5, r0
   1cc3e:	2800      	cmp	r0, #0
   1cc40:	d1f0      	bne.n	1cc24 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cc42:	2301      	movs	r3, #1
   1cc44:	6123      	str	r3, [r4, #16]
   1cc46:	e7ed      	b.n	1cc24 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cc48:	4639      	mov	r1, r7
   1cc4a:	eb09 0008 	add.w	r0, r9, r8
   1cc4e:	4632      	mov	r2, r6
   1cc50:	f008 fd69 	bl	25726 <memcpy>
   1cc54:	4907      	ldr	r1, [pc, #28]	; (1cc74 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1cc56:	44b0      	add	r8, r6
   1cc58:	4642      	mov	r2, r8
   1cc5a:	4608      	mov	r0, r1
   1cc5c:	f7ff fdc4 	bl	1c7e8 <block_cipher_df>
   1cc60:	4605      	mov	r5, r0
   1cc62:	2800      	cmp	r0, #0
   1cc64:	d1de      	bne.n	1cc24 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cc66:	e7e5      	b.n	1cc34 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1cc68:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1cc6c:	e7df      	b.n	1cc2e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1cc6e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1cc72:	e7dc      	b.n	1cc2e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1cc74:	20003744 	.word	0x20003744

0001cc78 <cc_mbedtls_ctr_drbg_init>:
   1cc78:	b510      	push	{r4, lr}
   1cc7a:	22a4      	movs	r2, #164	; 0xa4
   1cc7c:	4604      	mov	r4, r0
   1cc7e:	2100      	movs	r1, #0
   1cc80:	f008 fd8c 	bl	2579c <memset>
   1cc84:	4b06      	ldr	r3, [pc, #24]	; (1cca0 <cc_mbedtls_ctr_drbg_init+0x28>)
   1cc86:	f04f 31ff 	mov.w	r1, #4294967295
   1cc8a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1cc8e:	6121      	str	r1, [r4, #16]
   1cc90:	61e2      	str	r2, [r4, #28]
   1cc92:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1cc96:	681b      	ldr	r3, [r3, #0]
   1cc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cc9c:	4718      	bx	r3
   1cc9e:	bf00      	nop
   1cca0:	200009e8 	.word	0x200009e8

0001cca4 <cc_mbedtls_ctr_drbg_seed>:
   1cca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cca8:	b085      	sub	sp, #20
   1ccaa:	4605      	mov	r5, r0
   1ccac:	460f      	mov	r7, r1
   1ccae:	4616      	mov	r6, r2
   1ccb0:	4668      	mov	r0, sp
   1ccb2:	2210      	movs	r2, #16
   1ccb4:	2100      	movs	r1, #0
   1ccb6:	4699      	mov	r9, r3
   1ccb8:	f008 fd70 	bl	2579c <memset>
   1ccbc:	4b1d      	ldr	r3, [pc, #116]	; (1cd34 <cc_mbedtls_ctr_drbg_seed+0x90>)
   1ccbe:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1ccc2:	681b      	ldr	r3, [r3, #0]
   1ccc4:	4640      	mov	r0, r8
   1ccc6:	4798      	blx	r3
   1ccc8:	b120      	cbz	r0, 1ccd4 <cc_mbedtls_ctr_drbg_seed+0x30>
   1ccca:	4604      	mov	r4, r0
   1cccc:	4620      	mov	r0, r4
   1ccce:	b005      	add	sp, #20
   1ccd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ccd4:	f105 0420 	add.w	r4, r5, #32
   1ccd8:	4620      	mov	r0, r4
   1ccda:	f000 ff7f 	bl	1dbdc <cc_mbedtls_aes_init>
   1ccde:	69aa      	ldr	r2, [r5, #24]
   1cce0:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1cce4:	692e      	ldr	r6, [r5, #16]
   1cce6:	b9e2      	cbnz	r2, 1cd22 <cc_mbedtls_ctr_drbg_seed+0x7e>
   1cce8:	2220      	movs	r2, #32
   1ccea:	2e00      	cmp	r6, #0
   1ccec:	61aa      	str	r2, [r5, #24]
   1ccee:	db1f      	blt.n	1cd30 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1ccf0:	4620      	mov	r0, r4
   1ccf2:	4669      	mov	r1, sp
   1ccf4:	2280      	movs	r2, #128	; 0x80
   1ccf6:	f000 ff87 	bl	1dc08 <cc_mbedtls_aes_setkey_enc>
   1ccfa:	4604      	mov	r4, r0
   1ccfc:	b930      	cbnz	r0, 1cd0c <cc_mbedtls_ctr_drbg_seed+0x68>
   1ccfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cd00:	4633      	mov	r3, r6
   1cd02:	4649      	mov	r1, r9
   1cd04:	4628      	mov	r0, r5
   1cd06:	f7ff ff55 	bl	1cbb4 <mbedtls_ctr_drbg_reseed_internal>
   1cd0a:	4604      	mov	r4, r0
   1cd0c:	4b0a      	ldr	r3, [pc, #40]	; (1cd38 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1cd0e:	4640      	mov	r0, r8
   1cd10:	681b      	ldr	r3, [r3, #0]
   1cd12:	4798      	blx	r3
   1cd14:	2800      	cmp	r0, #0
   1cd16:	bf18      	it	ne
   1cd18:	4604      	movne	r4, r0
   1cd1a:	4620      	mov	r0, r4
   1cd1c:	b005      	add	sp, #20
   1cd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cd22:	2e00      	cmp	r6, #0
   1cd24:	dae4      	bge.n	1ccf0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1cd26:	2a17      	cmp	r2, #23
   1cd28:	d802      	bhi.n	1cd30 <cc_mbedtls_ctr_drbg_seed+0x8c>
   1cd2a:	1c53      	adds	r3, r2, #1
   1cd2c:	085e      	lsrs	r6, r3, #1
   1cd2e:	e7df      	b.n	1ccf0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1cd30:	2600      	movs	r6, #0
   1cd32:	e7dd      	b.n	1ccf0 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1cd34:	200009ec 	.word	0x200009ec
   1cd38:	200009f0 	.word	0x200009f0

0001cd3c <cc_mbedtls_ctr_drbg_random_with_add>:
   1cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd40:	b08d      	sub	sp, #52	; 0x34
   1cd42:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1cd46:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1cd4a:	f200 80e4 	bhi.w	1cf16 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1cd4e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1cd52:	f200 80dd 	bhi.w	1cf10 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1cd56:	4604      	mov	r4, r0
   1cd58:	4615      	mov	r5, r2
   1cd5a:	460e      	mov	r6, r1
   1cd5c:	2220      	movs	r2, #32
   1cd5e:	2100      	movs	r1, #0
   1cd60:	a804      	add	r0, sp, #16
   1cd62:	461f      	mov	r7, r3
   1cd64:	f008 fd1a 	bl	2579c <memset>
   1cd68:	4b6c      	ldr	r3, [pc, #432]	; (1cf1c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1cd6a:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	4648      	mov	r0, r9
   1cd72:	4798      	blx	r3
   1cd74:	4683      	mov	fp, r0
   1cd76:	2800      	cmp	r0, #0
   1cd78:	f040 8093 	bne.w	1cea2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1cd7c:	6922      	ldr	r2, [r4, #16]
   1cd7e:	69e3      	ldr	r3, [r4, #28]
   1cd80:	429a      	cmp	r2, r3
   1cd82:	f300 8092 	bgt.w	1ceaa <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1cd86:	6963      	ldr	r3, [r4, #20]
   1cd88:	2b00      	cmp	r3, #0
   1cd8a:	f040 808e 	bne.w	1ceaa <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1cd8e:	f1b8 0f00 	cmp.w	r8, #0
   1cd92:	f040 80a9 	bne.w	1cee8 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1cd96:	f8df a188 	ldr.w	sl, [pc, #392]	; 1cf20 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1cd9a:	466f      	mov	r7, sp
   1cd9c:	2d00      	cmp	r5, #0
   1cd9e:	f000 8098 	beq.w	1ced2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1cda2:	f104 0820 	add.w	r8, r4, #32
   1cda6:	466f      	mov	r7, sp
   1cda8:	e00e      	b.n	1cdc8 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1cdaa:	2d10      	cmp	r5, #16
   1cdac:	46ab      	mov	fp, r5
   1cdae:	bf28      	it	cs
   1cdb0:	f04f 0b10 	movcs.w	fp, #16
   1cdb4:	4630      	mov	r0, r6
   1cdb6:	465a      	mov	r2, fp
   1cdb8:	4639      	mov	r1, r7
   1cdba:	f008 fcb4 	bl	25726 <memcpy>
   1cdbe:	ebb5 050b 	subs.w	r5, r5, fp
   1cdc2:	445e      	add	r6, fp
   1cdc4:	f000 8085 	beq.w	1ced2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1cdc8:	7be3      	ldrb	r3, [r4, #15]
   1cdca:	3301      	adds	r3, #1
   1cdcc:	b2db      	uxtb	r3, r3
   1cdce:	73e3      	strb	r3, [r4, #15]
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	d14d      	bne.n	1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1cdd4:	7ba3      	ldrb	r3, [r4, #14]
   1cdd6:	3301      	adds	r3, #1
   1cdd8:	b2db      	uxtb	r3, r3
   1cdda:	73a3      	strb	r3, [r4, #14]
   1cddc:	2b00      	cmp	r3, #0
   1cdde:	d147      	bne.n	1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1cde0:	7b63      	ldrb	r3, [r4, #13]
   1cde2:	3301      	adds	r3, #1
   1cde4:	b2db      	uxtb	r3, r3
   1cde6:	7363      	strb	r3, [r4, #13]
   1cde8:	2b00      	cmp	r3, #0
   1cdea:	d141      	bne.n	1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1cdec:	7b23      	ldrb	r3, [r4, #12]
   1cdee:	3301      	adds	r3, #1
   1cdf0:	b2db      	uxtb	r3, r3
   1cdf2:	7323      	strb	r3, [r4, #12]
   1cdf4:	2b00      	cmp	r3, #0
   1cdf6:	d13b      	bne.n	1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1cdf8:	7ae3      	ldrb	r3, [r4, #11]
   1cdfa:	3301      	adds	r3, #1
   1cdfc:	b2db      	uxtb	r3, r3
   1cdfe:	72e3      	strb	r3, [r4, #11]
   1ce00:	2b00      	cmp	r3, #0
   1ce02:	d135      	bne.n	1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce04:	7aa3      	ldrb	r3, [r4, #10]
   1ce06:	3301      	adds	r3, #1
   1ce08:	b2db      	uxtb	r3, r3
   1ce0a:	72a3      	strb	r3, [r4, #10]
   1ce0c:	2b00      	cmp	r3, #0
   1ce0e:	d12f      	bne.n	1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce10:	7a63      	ldrb	r3, [r4, #9]
   1ce12:	3301      	adds	r3, #1
   1ce14:	b2db      	uxtb	r3, r3
   1ce16:	7263      	strb	r3, [r4, #9]
   1ce18:	bb53      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce1a:	7a23      	ldrb	r3, [r4, #8]
   1ce1c:	3301      	adds	r3, #1
   1ce1e:	b2db      	uxtb	r3, r3
   1ce20:	7223      	strb	r3, [r4, #8]
   1ce22:	bb2b      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce24:	79e3      	ldrb	r3, [r4, #7]
   1ce26:	3301      	adds	r3, #1
   1ce28:	b2db      	uxtb	r3, r3
   1ce2a:	71e3      	strb	r3, [r4, #7]
   1ce2c:	bb03      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce2e:	79a3      	ldrb	r3, [r4, #6]
   1ce30:	3301      	adds	r3, #1
   1ce32:	b2db      	uxtb	r3, r3
   1ce34:	71a3      	strb	r3, [r4, #6]
   1ce36:	b9db      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce38:	7963      	ldrb	r3, [r4, #5]
   1ce3a:	3301      	adds	r3, #1
   1ce3c:	b2db      	uxtb	r3, r3
   1ce3e:	7163      	strb	r3, [r4, #5]
   1ce40:	b9b3      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce42:	7923      	ldrb	r3, [r4, #4]
   1ce44:	3301      	adds	r3, #1
   1ce46:	b2db      	uxtb	r3, r3
   1ce48:	7123      	strb	r3, [r4, #4]
   1ce4a:	b98b      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce4c:	78e3      	ldrb	r3, [r4, #3]
   1ce4e:	3301      	adds	r3, #1
   1ce50:	b2db      	uxtb	r3, r3
   1ce52:	70e3      	strb	r3, [r4, #3]
   1ce54:	b963      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce56:	78a3      	ldrb	r3, [r4, #2]
   1ce58:	3301      	adds	r3, #1
   1ce5a:	b2db      	uxtb	r3, r3
   1ce5c:	70a3      	strb	r3, [r4, #2]
   1ce5e:	b93b      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce60:	7863      	ldrb	r3, [r4, #1]
   1ce62:	3301      	adds	r3, #1
   1ce64:	b2db      	uxtb	r3, r3
   1ce66:	7063      	strb	r3, [r4, #1]
   1ce68:	b913      	cbnz	r3, 1ce70 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1ce6a:	7823      	ldrb	r3, [r4, #0]
   1ce6c:	3301      	adds	r3, #1
   1ce6e:	7023      	strb	r3, [r4, #0]
   1ce70:	463b      	mov	r3, r7
   1ce72:	4622      	mov	r2, r4
   1ce74:	2101      	movs	r1, #1
   1ce76:	4640      	mov	r0, r8
   1ce78:	f000 fee0 	bl	1dc3c <cc_mbedtls_aes_crypt_ecb>
   1ce7c:	4683      	mov	fp, r0
   1ce7e:	2800      	cmp	r0, #0
   1ce80:	d093      	beq.n	1cdaa <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1ce82:	f8da 3000 	ldr.w	r3, [sl]
   1ce86:	4648      	mov	r0, r9
   1ce88:	4798      	blx	r3
   1ce8a:	2120      	movs	r1, #32
   1ce8c:	4603      	mov	r3, r0
   1ce8e:	a804      	add	r0, sp, #16
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	bf18      	it	ne
   1ce94:	469b      	movne	fp, r3
   1ce96:	f7ff fc9d 	bl	1c7d4 <mbedtls_platform_zeroize>
   1ce9a:	4638      	mov	r0, r7
   1ce9c:	2110      	movs	r1, #16
   1ce9e:	f7ff fc99 	bl	1c7d4 <mbedtls_platform_zeroize>
   1cea2:	4658      	mov	r0, fp
   1cea4:	b00d      	add	sp, #52	; 0x34
   1cea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceaa:	4642      	mov	r2, r8
   1ceac:	4639      	mov	r1, r7
   1ceae:	2300      	movs	r3, #0
   1ceb0:	4620      	mov	r0, r4
   1ceb2:	f7ff fe7f 	bl	1cbb4 <mbedtls_ctr_drbg_reseed_internal>
   1ceb6:	f8df a068 	ldr.w	sl, [pc, #104]	; 1cf20 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ceba:	2800      	cmp	r0, #0
   1cebc:	f43f af6d 	beq.w	1cd9a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1cec0:	f8da 3000 	ldr.w	r3, [sl]
   1cec4:	4648      	mov	r0, r9
   1cec6:	4798      	blx	r3
   1cec8:	4683      	mov	fp, r0
   1ceca:	2800      	cmp	r0, #0
   1cecc:	f43f af65 	beq.w	1cd9a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1ced0:	e7e7      	b.n	1cea2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ced2:	a904      	add	r1, sp, #16
   1ced4:	4620      	mov	r0, r4
   1ced6:	f7ff fdc7 	bl	1ca68 <ctr_drbg_update_internal>
   1ceda:	4683      	mov	fp, r0
   1cedc:	2800      	cmp	r0, #0
   1cede:	d1d0      	bne.n	1ce82 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1cee0:	6923      	ldr	r3, [r4, #16]
   1cee2:	3301      	adds	r3, #1
   1cee4:	6123      	str	r3, [r4, #16]
   1cee6:	e7cc      	b.n	1ce82 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1cee8:	4642      	mov	r2, r8
   1ceea:	4639      	mov	r1, r7
   1ceec:	a804      	add	r0, sp, #16
   1ceee:	f7ff fc7b 	bl	1c7e8 <block_cipher_df>
   1cef2:	4683      	mov	fp, r0
   1cef4:	b118      	cbz	r0, 1cefe <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1cef6:	f8df a028 	ldr.w	sl, [pc, #40]	; 1cf20 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1cefa:	466f      	mov	r7, sp
   1cefc:	e7c1      	b.n	1ce82 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1cefe:	a904      	add	r1, sp, #16
   1cf00:	4620      	mov	r0, r4
   1cf02:	f7ff fdb1 	bl	1ca68 <ctr_drbg_update_internal>
   1cf06:	4683      	mov	fp, r0
   1cf08:	2800      	cmp	r0, #0
   1cf0a:	f43f af44 	beq.w	1cd96 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1cf0e:	e7f2      	b.n	1cef6 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1cf10:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1cf14:	e7c5      	b.n	1cea2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1cf16:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1cf1a:	e7c2      	b.n	1cea2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1cf1c:	200009ec 	.word	0x200009ec
   1cf20:	200009f0 	.word	0x200009f0

0001cf24 <entropy_update>:
   1cf24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cf28:	2b20      	cmp	r3, #32
   1cf2a:	b08b      	sub	sp, #44	; 0x2c
   1cf2c:	461d      	mov	r5, r3
   1cf2e:	4606      	mov	r6, r0
   1cf30:	4689      	mov	r9, r1
   1cf32:	4690      	mov	r8, r2
   1cf34:	d826      	bhi.n	1cf84 <entropy_update+0x60>
   1cf36:	b2db      	uxtb	r3, r3
   1cf38:	af02      	add	r7, sp, #8
   1cf3a:	6831      	ldr	r1, [r6, #0]
   1cf3c:	f88d 9004 	strb.w	r9, [sp, #4]
   1cf40:	f88d 3005 	strb.w	r3, [sp, #5]
   1cf44:	f106 0904 	add.w	r9, r6, #4
   1cf48:	b921      	cbnz	r1, 1cf54 <entropy_update+0x30>
   1cf4a:	4648      	mov	r0, r9
   1cf4c:	f000 feba 	bl	1dcc4 <cc_mbedtls_sha256_starts>
   1cf50:	4604      	mov	r4, r0
   1cf52:	b940      	cbnz	r0, 1cf66 <entropy_update+0x42>
   1cf54:	2301      	movs	r3, #1
   1cf56:	6033      	str	r3, [r6, #0]
   1cf58:	2202      	movs	r2, #2
   1cf5a:	a901      	add	r1, sp, #4
   1cf5c:	4648      	mov	r0, r9
   1cf5e:	f000 fec5 	bl	1dcec <cc_mbedtls_sha256_update>
   1cf62:	4604      	mov	r4, r0
   1cf64:	b138      	cbz	r0, 1cf76 <entropy_update+0x52>
   1cf66:	4638      	mov	r0, r7
   1cf68:	2120      	movs	r1, #32
   1cf6a:	f7ff fc33 	bl	1c7d4 <mbedtls_platform_zeroize>
   1cf6e:	4620      	mov	r0, r4
   1cf70:	b00b      	add	sp, #44	; 0x2c
   1cf72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cf76:	462a      	mov	r2, r5
   1cf78:	4641      	mov	r1, r8
   1cf7a:	4648      	mov	r0, r9
   1cf7c:	f000 feb6 	bl	1dcec <cc_mbedtls_sha256_update>
   1cf80:	4604      	mov	r4, r0
   1cf82:	e7f0      	b.n	1cf66 <entropy_update+0x42>
   1cf84:	af02      	add	r7, sp, #8
   1cf86:	4619      	mov	r1, r3
   1cf88:	4610      	mov	r0, r2
   1cf8a:	2300      	movs	r3, #0
   1cf8c:	463a      	mov	r2, r7
   1cf8e:	f000 ffad 	bl	1deec <cc_mbedtls_sha256>
   1cf92:	4604      	mov	r4, r0
   1cf94:	2800      	cmp	r0, #0
   1cf96:	d1e6      	bne.n	1cf66 <entropy_update+0x42>
   1cf98:	2320      	movs	r3, #32
   1cf9a:	461d      	mov	r5, r3
   1cf9c:	46b8      	mov	r8, r7
   1cf9e:	e7cc      	b.n	1cf3a <entropy_update+0x16>

0001cfa0 <entropy_gather_internal.part.0>:
   1cfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfa2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1cfa6:	b0a7      	sub	sp, #156	; 0x9c
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	bfd8      	it	le
   1cfac:	ae02      	addle	r6, sp, #8
   1cfae:	dd2c      	ble.n	1d00a <entropy_gather_internal.part.0+0x6a>
   1cfb0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1cfb4:	4605      	mov	r5, r0
   1cfb6:	2300      	movs	r3, #0
   1cfb8:	ae02      	add	r6, sp, #8
   1cfba:	9301      	str	r3, [sp, #4]
   1cfbc:	f1a4 0701 	sub.w	r7, r4, #1
   1cfc0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1cfc4:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1cfc8:	4631      	mov	r1, r6
   1cfca:	ab01      	add	r3, sp, #4
   1cfcc:	2290      	movs	r2, #144	; 0x90
   1cfce:	47a0      	blx	r4
   1cfd0:	fab7 f787 	clz	r7, r7
   1cfd4:	097f      	lsrs	r7, r7, #5
   1cfd6:	4604      	mov	r4, r0
   1cfd8:	b910      	cbnz	r0, 1cfe0 <entropy_gather_internal.part.0+0x40>
   1cfda:	9b01      	ldr	r3, [sp, #4]
   1cfdc:	b93b      	cbnz	r3, 1cfee <entropy_gather_internal.part.0+0x4e>
   1cfde:	b1a7      	cbz	r7, 1d00a <entropy_gather_internal.part.0+0x6a>
   1cfe0:	4630      	mov	r0, r6
   1cfe2:	2190      	movs	r1, #144	; 0x90
   1cfe4:	f7ff fbf6 	bl	1c7d4 <mbedtls_platform_zeroize>
   1cfe8:	4620      	mov	r0, r4
   1cfea:	b027      	add	sp, #156	; 0x9c
   1cfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cfee:	4601      	mov	r1, r0
   1cff0:	4632      	mov	r2, r6
   1cff2:	4628      	mov	r0, r5
   1cff4:	f7ff ff96 	bl	1cf24 <entropy_update>
   1cff8:	b950      	cbnz	r0, 1d010 <entropy_gather_internal.part.0+0x70>
   1cffa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1cffe:	9a01      	ldr	r2, [sp, #4]
   1d000:	4413      	add	r3, r2
   1d002:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1d006:	2f00      	cmp	r7, #0
   1d008:	d1ea      	bne.n	1cfe0 <entropy_gather_internal.part.0+0x40>
   1d00a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d00e:	e7e7      	b.n	1cfe0 <entropy_gather_internal.part.0+0x40>
   1d010:	4604      	mov	r4, r0
   1d012:	4620      	mov	r0, r4
   1d014:	b027      	add	sp, #156	; 0x9c
   1d016:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d018 <cc_mbedtls_entropy_init>:
   1d018:	b570      	push	{r4, r5, r6, lr}
   1d01a:	2500      	movs	r5, #0
   1d01c:	4604      	mov	r4, r0
   1d01e:	4629      	mov	r1, r5
   1d020:	2214      	movs	r2, #20
   1d022:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1d026:	30f8      	adds	r0, #248	; 0xf8
   1d028:	f008 fbb8 	bl	2579c <memset>
   1d02c:	4b15      	ldr	r3, [pc, #84]	; (1d084 <cc_mbedtls_entropy_init+0x6c>)
   1d02e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1d032:	681b      	ldr	r3, [r3, #0]
   1d034:	4630      	mov	r0, r6
   1d036:	4798      	blx	r3
   1d038:	4620      	mov	r0, r4
   1d03a:	f840 5b04 	str.w	r5, [r0], #4
   1d03e:	f000 fe27 	bl	1dc90 <cc_mbedtls_sha256_init>
   1d042:	4b11      	ldr	r3, [pc, #68]	; (1d088 <cc_mbedtls_entropy_init+0x70>)
   1d044:	4630      	mov	r0, r6
   1d046:	681b      	ldr	r3, [r3, #0]
   1d048:	4798      	blx	r3
   1d04a:	b9c8      	cbnz	r0, 1d080 <cc_mbedtls_entropy_init+0x68>
   1d04c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d050:	42ab      	cmp	r3, r5
   1d052:	dc0f      	bgt.n	1d074 <cc_mbedtls_entropy_init+0x5c>
   1d054:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d058:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d05c:	490b      	ldr	r1, [pc, #44]	; (1d08c <cc_mbedtls_entropy_init+0x74>)
   1d05e:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1d062:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1d066:	3301      	adds	r3, #1
   1d068:	2020      	movs	r0, #32
   1d06a:	2101      	movs	r1, #1
   1d06c:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1d070:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1d074:	4b06      	ldr	r3, [pc, #24]	; (1d090 <cc_mbedtls_entropy_init+0x78>)
   1d076:	4630      	mov	r0, r6
   1d078:	681b      	ldr	r3, [r3, #0]
   1d07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d07e:	4718      	bx	r3
   1d080:	bd70      	pop	{r4, r5, r6, pc}
   1d082:	bf00      	nop
   1d084:	200009e8 	.word	0x200009e8
   1d088:	200009ec 	.word	0x200009ec
   1d08c:	0001dae1 	.word	0x0001dae1
   1d090:	200009f0 	.word	0x200009f0

0001d094 <cc_mbedtls_entropy_func>:
   1d094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d098:	2a20      	cmp	r2, #32
   1d09a:	b088      	sub	sp, #32
   1d09c:	d876      	bhi.n	1d18c <cc_mbedtls_entropy_func+0xf8>
   1d09e:	4b3d      	ldr	r3, [pc, #244]	; (1d194 <cc_mbedtls_entropy_func+0x100>)
   1d0a0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1d0a4:	681b      	ldr	r3, [r3, #0]
   1d0a6:	4604      	mov	r4, r0
   1d0a8:	4648      	mov	r0, r9
   1d0aa:	4617      	mov	r7, r2
   1d0ac:	4688      	mov	r8, r1
   1d0ae:	4798      	blx	r3
   1d0b0:	4605      	mov	r5, r0
   1d0b2:	bba0      	cbnz	r0, 1d11e <cc_mbedtls_entropy_func+0x8a>
   1d0b4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d0b8:	f240 1601 	movw	r6, #257	; 0x101
   1d0bc:	e001      	b.n	1d0c2 <cc_mbedtls_entropy_func+0x2e>
   1d0be:	3e01      	subs	r6, #1
   1d0c0:	d060      	beq.n	1d184 <cc_mbedtls_entropy_func+0xf0>
   1d0c2:	4620      	mov	r0, r4
   1d0c4:	b37b      	cbz	r3, 1d126 <cc_mbedtls_entropy_func+0x92>
   1d0c6:	f7ff ff6b 	bl	1cfa0 <entropy_gather_internal.part.0>
   1d0ca:	4605      	mov	r5, r0
   1d0cc:	bb68      	cbnz	r0, 1d12a <cc_mbedtls_entropy_func+0x96>
   1d0ce:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d0d2:	2b00      	cmp	r3, #0
   1d0d4:	ddf3      	ble.n	1d0be <cc_mbedtls_entropy_func+0x2a>
   1d0d6:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1d0da:	4290      	cmp	r0, r2
   1d0dc:	d3ef      	bcc.n	1d0be <cc_mbedtls_entropy_func+0x2a>
   1d0de:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1d0e2:	2a01      	cmp	r2, #1
   1d0e4:	d1eb      	bne.n	1d0be <cc_mbedtls_entropy_func+0x2a>
   1d0e6:	281f      	cmp	r0, #31
   1d0e8:	d9e9      	bls.n	1d0be <cc_mbedtls_entropy_func+0x2a>
   1d0ea:	466e      	mov	r6, sp
   1d0ec:	4629      	mov	r1, r5
   1d0ee:	2220      	movs	r2, #32
   1d0f0:	4630      	mov	r0, r6
   1d0f2:	f104 0a04 	add.w	sl, r4, #4
   1d0f6:	f008 fb51 	bl	2579c <memset>
   1d0fa:	4631      	mov	r1, r6
   1d0fc:	4650      	mov	r0, sl
   1d0fe:	f000 fe1f 	bl	1dd40 <cc_mbedtls_sha256_finish>
   1d102:	4605      	mov	r5, r0
   1d104:	b198      	cbz	r0, 1d12e <cc_mbedtls_entropy_func+0x9a>
   1d106:	4630      	mov	r0, r6
   1d108:	2120      	movs	r1, #32
   1d10a:	f7ff fb63 	bl	1c7d4 <mbedtls_platform_zeroize>
   1d10e:	4b22      	ldr	r3, [pc, #136]	; (1d198 <cc_mbedtls_entropy_func+0x104>)
   1d110:	4648      	mov	r0, r9
   1d112:	681b      	ldr	r3, [r3, #0]
   1d114:	4798      	blx	r3
   1d116:	2800      	cmp	r0, #0
   1d118:	bf18      	it	ne
   1d11a:	f06f 051d 	mvnne.w	r5, #29
   1d11e:	4628      	mov	r0, r5
   1d120:	b008      	add	sp, #32
   1d122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d126:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d12a:	466e      	mov	r6, sp
   1d12c:	e7eb      	b.n	1d106 <cc_mbedtls_entropy_func+0x72>
   1d12e:	4650      	mov	r0, sl
   1d130:	f000 fdc2 	bl	1dcb8 <cc_mbedtls_sha256_free>
   1d134:	4650      	mov	r0, sl
   1d136:	f000 fdab 	bl	1dc90 <cc_mbedtls_sha256_init>
   1d13a:	4629      	mov	r1, r5
   1d13c:	4650      	mov	r0, sl
   1d13e:	f000 fdc1 	bl	1dcc4 <cc_mbedtls_sha256_starts>
   1d142:	4605      	mov	r5, r0
   1d144:	2800      	cmp	r0, #0
   1d146:	d1de      	bne.n	1d106 <cc_mbedtls_entropy_func+0x72>
   1d148:	4650      	mov	r0, sl
   1d14a:	2220      	movs	r2, #32
   1d14c:	4631      	mov	r1, r6
   1d14e:	f000 fdcd 	bl	1dcec <cc_mbedtls_sha256_update>
   1d152:	4605      	mov	r5, r0
   1d154:	2800      	cmp	r0, #0
   1d156:	d1d6      	bne.n	1d106 <cc_mbedtls_entropy_func+0x72>
   1d158:	4603      	mov	r3, r0
   1d15a:	4632      	mov	r2, r6
   1d15c:	2120      	movs	r1, #32
   1d15e:	4630      	mov	r0, r6
   1d160:	f000 fec4 	bl	1deec <cc_mbedtls_sha256>
   1d164:	4605      	mov	r5, r0
   1d166:	2800      	cmp	r0, #0
   1d168:	d1cd      	bne.n	1d106 <cc_mbedtls_entropy_func+0x72>
   1d16a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d16e:	2b00      	cmp	r3, #0
   1d170:	bfc4      	itt	gt
   1d172:	2300      	movgt	r3, #0
   1d174:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1d178:	463a      	mov	r2, r7
   1d17a:	4640      	mov	r0, r8
   1d17c:	4631      	mov	r1, r6
   1d17e:	f008 fad2 	bl	25726 <memcpy>
   1d182:	e7c0      	b.n	1d106 <cc_mbedtls_entropy_func+0x72>
   1d184:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d188:	466e      	mov	r6, sp
   1d18a:	e7bc      	b.n	1d106 <cc_mbedtls_entropy_func+0x72>
   1d18c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d190:	e7c5      	b.n	1d11e <cc_mbedtls_entropy_func+0x8a>
   1d192:	bf00      	nop
   1d194:	200009ec 	.word	0x200009ec
   1d198:	200009f0 	.word	0x200009f0

0001d19c <RndStartupTest.constprop.0>:
   1d19c:	b530      	push	{r4, r5, lr}
   1d19e:	b0c3      	sub	sp, #268	; 0x10c
   1d1a0:	22dc      	movs	r2, #220	; 0xdc
   1d1a2:	2100      	movs	r1, #0
   1d1a4:	a80b      	add	r0, sp, #44	; 0x2c
   1d1a6:	f008 faf9 	bl	2579c <memset>
   1d1aa:	2228      	movs	r2, #40	; 0x28
   1d1ac:	2100      	movs	r1, #0
   1d1ae:	a801      	add	r0, sp, #4
   1d1b0:	f008 faf4 	bl	2579c <memset>
   1d1b4:	a801      	add	r0, sp, #4
   1d1b6:	f000 fec1 	bl	1df3c <RNG_PLAT_SetUserRngParameters>
   1d1ba:	4604      	mov	r4, r0
   1d1bc:	b110      	cbz	r0, 1d1c4 <RndStartupTest.constprop.0+0x28>
   1d1be:	4620      	mov	r0, r4
   1d1c0:	b043      	add	sp, #268	; 0x10c
   1d1c2:	bd30      	pop	{r4, r5, pc}
   1d1c4:	4d18      	ldr	r5, [pc, #96]	; (1d228 <RndStartupTest.constprop.0+0x8c>)
   1d1c6:	f04f 31ff 	mov.w	r1, #4294967295
   1d1ca:	6828      	ldr	r0, [r5, #0]
   1d1cc:	f000 f93c 	bl	1d448 <CC_PalMutexLock>
   1d1d0:	4604      	mov	r4, r0
   1d1d2:	b9c0      	cbnz	r0, 1d206 <RndStartupTest.constprop.0+0x6a>
   1d1d4:	2000      	movs	r0, #0
   1d1d6:	f000 f967 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1d1da:	bb00      	cbnz	r0, 1d21e <RndStartupTest.constprop.0+0x82>
   1d1dc:	4a13      	ldr	r2, [pc, #76]	; (1d22c <RndStartupTest.constprop.0+0x90>)
   1d1de:	a901      	add	r1, sp, #4
   1d1e0:	a80b      	add	r0, sp, #44	; 0x2c
   1d1e2:	f000 fc6f 	bl	1dac4 <LLF_RND_RunTrngStartupTest>
   1d1e6:	4604      	mov	r4, r0
   1d1e8:	2001      	movs	r0, #1
   1d1ea:	f000 f95d 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1d1ee:	b990      	cbnz	r0, 1d216 <RndStartupTest.constprop.0+0x7a>
   1d1f0:	6828      	ldr	r0, [r5, #0]
   1d1f2:	f000 f931 	bl	1d458 <CC_PalMutexUnlock>
   1d1f6:	2800      	cmp	r0, #0
   1d1f8:	d0e1      	beq.n	1d1be <RndStartupTest.constprop.0+0x22>
   1d1fa:	480d      	ldr	r0, [pc, #52]	; (1d230 <RndStartupTest.constprop.0+0x94>)
   1d1fc:	f7ff f9d8 	bl	1c5b0 <CC_PalAbort>
   1d200:	4620      	mov	r0, r4
   1d202:	b043      	add	sp, #268	; 0x10c
   1d204:	bd30      	pop	{r4, r5, pc}
   1d206:	480b      	ldr	r0, [pc, #44]	; (1d234 <RndStartupTest.constprop.0+0x98>)
   1d208:	f7ff f9d2 	bl	1c5b0 <CC_PalAbort>
   1d20c:	2c01      	cmp	r4, #1
   1d20e:	bf08      	it	eq
   1d210:	2405      	moveq	r4, #5
   1d212:	d0ed      	beq.n	1d1f0 <RndStartupTest.constprop.0+0x54>
   1d214:	e7de      	b.n	1d1d4 <RndStartupTest.constprop.0+0x38>
   1d216:	4808      	ldr	r0, [pc, #32]	; (1d238 <RndStartupTest.constprop.0+0x9c>)
   1d218:	f7ff f9ca 	bl	1c5b0 <CC_PalAbort>
   1d21c:	e7e8      	b.n	1d1f0 <RndStartupTest.constprop.0+0x54>
   1d21e:	4807      	ldr	r0, [pc, #28]	; (1d23c <RndStartupTest.constprop.0+0xa0>)
   1d220:	f7ff f9c6 	bl	1c5b0 <CC_PalAbort>
   1d224:	e7da      	b.n	1d1dc <RndStartupTest.constprop.0+0x40>
   1d226:	bf00      	nop
   1d228:	200009e4 	.word	0x200009e4
   1d22c:	2000392c 	.word	0x2000392c
   1d230:	00027238 	.word	0x00027238
   1d234:	000271e0 	.word	0x000271e0
   1d238:	00027218 	.word	0x00027218
   1d23c:	000271f8 	.word	0x000271f8

0001d240 <CC_LibInit>:
   1d240:	b510      	push	{r4, lr}
   1d242:	b082      	sub	sp, #8
   1d244:	f000 f854 	bl	1d2f0 <CC_HalInit>
   1d248:	b128      	cbz	r0, 1d256 <CC_LibInit+0x16>
   1d24a:	f000 f8a3 	bl	1d394 <CC_PalTerminate>
   1d24e:	2403      	movs	r4, #3
   1d250:	4620      	mov	r0, r4
   1d252:	b002      	add	sp, #8
   1d254:	bd10      	pop	{r4, pc}
   1d256:	f000 f86f 	bl	1d338 <CC_PalInit>
   1d25a:	b9d0      	cbnz	r0, 1d292 <CC_LibInit+0x52>
   1d25c:	f000 f924 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1d260:	b9d8      	cbnz	r0, 1d29a <CC_LibInit+0x5a>
   1d262:	4b1e      	ldr	r3, [pc, #120]	; (1d2dc <CC_LibInit+0x9c>)
   1d264:	681b      	ldr	r3, [r3, #0]
   1d266:	0e1b      	lsrs	r3, r3, #24
   1d268:	2bf0      	cmp	r3, #240	; 0xf0
   1d26a:	d10a      	bne.n	1d282 <CC_LibInit+0x42>
   1d26c:	4a1c      	ldr	r2, [pc, #112]	; (1d2e0 <CC_LibInit+0xa0>)
   1d26e:	4b1d      	ldr	r3, [pc, #116]	; (1d2e4 <CC_LibInit+0xa4>)
   1d270:	6812      	ldr	r2, [r2, #0]
   1d272:	429a      	cmp	r2, r3
   1d274:	d029      	beq.n	1d2ca <CC_LibInit+0x8a>
   1d276:	f000 f83d 	bl	1d2f4 <CC_HalTerminate>
   1d27a:	2407      	movs	r4, #7
   1d27c:	f000 f88a 	bl	1d394 <CC_PalTerminate>
   1d280:	e7e6      	b.n	1d250 <CC_LibInit+0x10>
   1d282:	f000 f837 	bl	1d2f4 <CC_HalTerminate>
   1d286:	f000 f885 	bl	1d394 <CC_PalTerminate>
   1d28a:	2406      	movs	r4, #6
   1d28c:	4620      	mov	r0, r4
   1d28e:	b002      	add	sp, #8
   1d290:	bd10      	pop	{r4, pc}
   1d292:	2404      	movs	r4, #4
   1d294:	4620      	mov	r0, r4
   1d296:	b002      	add	sp, #8
   1d298:	bd10      	pop	{r4, pc}
   1d29a:	f000 f82b 	bl	1d2f4 <CC_HalTerminate>
   1d29e:	f000 f879 	bl	1d394 <CC_PalTerminate>
   1d2a2:	f7ff ff7b 	bl	1d19c <RndStartupTest.constprop.0>
   1d2a6:	4604      	mov	r4, r0
   1d2a8:	b958      	cbnz	r0, 1d2c2 <CC_LibInit+0x82>
   1d2aa:	4602      	mov	r2, r0
   1d2ac:	4601      	mov	r1, r0
   1d2ae:	f7ff f9a7 	bl	1c600 <nrf_cc3xx_platform_ctr_drbg_init>
   1d2b2:	b930      	cbnz	r0, 1d2c2 <CC_LibInit+0x82>
   1d2b4:	490c      	ldr	r1, [pc, #48]	; (1d2e8 <CC_LibInit+0xa8>)
   1d2b6:	ab01      	add	r3, sp, #4
   1d2b8:	2268      	movs	r2, #104	; 0x68
   1d2ba:	f7ff f9d5 	bl	1c668 <nrf_cc3xx_platform_ctr_drbg_get>
   1d2be:	2800      	cmp	r0, #0
   1d2c0:	d0c6      	beq.n	1d250 <CC_LibInit+0x10>
   1d2c2:	2405      	movs	r4, #5
   1d2c4:	4620      	mov	r0, r4
   1d2c6:	b002      	add	sp, #8
   1d2c8:	bd10      	pop	{r4, pc}
   1d2ca:	2001      	movs	r0, #1
   1d2cc:	f000 f8ec 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1d2d0:	2800      	cmp	r0, #0
   1d2d2:	d1e2      	bne.n	1d29a <CC_LibInit+0x5a>
   1d2d4:	4b05      	ldr	r3, [pc, #20]	; (1d2ec <CC_LibInit+0xac>)
   1d2d6:	6018      	str	r0, [r3, #0]
   1d2d8:	e7e3      	b.n	1d2a2 <CC_LibInit+0x62>
   1d2da:	bf00      	nop
   1d2dc:	5002b928 	.word	0x5002b928
   1d2e0:	5002ba24 	.word	0x5002ba24
   1d2e4:	20e00000 	.word	0x20e00000
   1d2e8:	200038c4 	.word	0x200038c4
   1d2ec:	5002ba0c 	.word	0x5002ba0c

0001d2f0 <CC_HalInit>:
   1d2f0:	2000      	movs	r0, #0
   1d2f2:	4770      	bx	lr

0001d2f4 <CC_HalTerminate>:
   1d2f4:	2000      	movs	r0, #0
   1d2f6:	4770      	bx	lr

0001d2f8 <CC_HalClearInterruptBit>:
   1d2f8:	0543      	lsls	r3, r0, #21
   1d2fa:	d503      	bpl.n	1d304 <CC_HalClearInterruptBit+0xc>
   1d2fc:	4b03      	ldr	r3, [pc, #12]	; (1d30c <CC_HalClearInterruptBit+0x14>)
   1d2fe:	f04f 32ff 	mov.w	r2, #4294967295
   1d302:	601a      	str	r2, [r3, #0]
   1d304:	4b02      	ldr	r3, [pc, #8]	; (1d310 <CC_HalClearInterruptBit+0x18>)
   1d306:	6018      	str	r0, [r3, #0]
   1d308:	4770      	bx	lr
   1d30a:	bf00      	nop
   1d30c:	5002b108 	.word	0x5002b108
   1d310:	5002ba08 	.word	0x5002ba08

0001d314 <CC_HalMaskInterrupt>:
   1d314:	4b01      	ldr	r3, [pc, #4]	; (1d31c <CC_HalMaskInterrupt+0x8>)
   1d316:	6018      	str	r0, [r3, #0]
   1d318:	4770      	bx	lr
   1d31a:	bf00      	nop
   1d31c:	5002ba04 	.word	0x5002ba04

0001d320 <CC_HalWaitInterrupt>:
   1d320:	b108      	cbz	r0, 1d326 <CC_HalWaitInterrupt+0x6>
   1d322:	f000 b86f 	b.w	1d404 <CC_PalWaitInterrupt>
   1d326:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d32a:	4770      	bx	lr

0001d32c <CC_HalWaitInterruptRND>:
   1d32c:	b108      	cbz	r0, 1d332 <CC_HalWaitInterruptRND+0x6>
   1d32e:	f000 b84f 	b.w	1d3d0 <CC_PalWaitInterruptRND>
   1d332:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d336:	4770      	bx	lr

0001d338 <CC_PalInit>:
   1d338:	b510      	push	{r4, lr}
   1d33a:	4811      	ldr	r0, [pc, #68]	; (1d380 <CC_PalInit+0x48>)
   1d33c:	f000 f870 	bl	1d420 <CC_PalMutexCreate>
   1d340:	b100      	cbz	r0, 1d344 <CC_PalInit+0xc>
   1d342:	bd10      	pop	{r4, pc}
   1d344:	480f      	ldr	r0, [pc, #60]	; (1d384 <CC_PalInit+0x4c>)
   1d346:	f000 f86b 	bl	1d420 <CC_PalMutexCreate>
   1d34a:	2800      	cmp	r0, #0
   1d34c:	d1f9      	bne.n	1d342 <CC_PalInit+0xa>
   1d34e:	4c0e      	ldr	r4, [pc, #56]	; (1d388 <CC_PalInit+0x50>)
   1d350:	4620      	mov	r0, r4
   1d352:	f000 f865 	bl	1d420 <CC_PalMutexCreate>
   1d356:	2800      	cmp	r0, #0
   1d358:	d1f3      	bne.n	1d342 <CC_PalInit+0xa>
   1d35a:	4b0c      	ldr	r3, [pc, #48]	; (1d38c <CC_PalInit+0x54>)
   1d35c:	480c      	ldr	r0, [pc, #48]	; (1d390 <CC_PalInit+0x58>)
   1d35e:	601c      	str	r4, [r3, #0]
   1d360:	f000 f85e 	bl	1d420 <CC_PalMutexCreate>
   1d364:	4601      	mov	r1, r0
   1d366:	2800      	cmp	r0, #0
   1d368:	d1eb      	bne.n	1d342 <CC_PalInit+0xa>
   1d36a:	f000 f82d 	bl	1d3c8 <CC_PalDmaInit>
   1d36e:	4604      	mov	r4, r0
   1d370:	b108      	cbz	r0, 1d376 <CC_PalInit+0x3e>
   1d372:	4620      	mov	r0, r4
   1d374:	bd10      	pop	{r4, pc}
   1d376:	f000 f879 	bl	1d46c <CC_PalPowerSaveModeInit>
   1d37a:	4620      	mov	r0, r4
   1d37c:	e7fa      	b.n	1d374 <CC_PalInit+0x3c>
   1d37e:	bf00      	nop
   1d380:	200009e0 	.word	0x200009e0
   1d384:	200009d4 	.word	0x200009d4
   1d388:	200009dc 	.word	0x200009dc
   1d38c:	200009e4 	.word	0x200009e4
   1d390:	200009d8 	.word	0x200009d8

0001d394 <CC_PalTerminate>:
   1d394:	b508      	push	{r3, lr}
   1d396:	4808      	ldr	r0, [pc, #32]	; (1d3b8 <CC_PalTerminate+0x24>)
   1d398:	f000 f84c 	bl	1d434 <CC_PalMutexDestroy>
   1d39c:	4807      	ldr	r0, [pc, #28]	; (1d3bc <CC_PalTerminate+0x28>)
   1d39e:	f000 f849 	bl	1d434 <CC_PalMutexDestroy>
   1d3a2:	4807      	ldr	r0, [pc, #28]	; (1d3c0 <CC_PalTerminate+0x2c>)
   1d3a4:	f000 f846 	bl	1d434 <CC_PalMutexDestroy>
   1d3a8:	4806      	ldr	r0, [pc, #24]	; (1d3c4 <CC_PalTerminate+0x30>)
   1d3aa:	f000 f843 	bl	1d434 <CC_PalMutexDestroy>
   1d3ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d3b2:	f000 b80b 	b.w	1d3cc <CC_PalDmaTerminate>
   1d3b6:	bf00      	nop
   1d3b8:	200009e0 	.word	0x200009e0
   1d3bc:	200009d4 	.word	0x200009d4
   1d3c0:	200009dc 	.word	0x200009dc
   1d3c4:	200009d8 	.word	0x200009d8

0001d3c8 <CC_PalDmaInit>:
   1d3c8:	2000      	movs	r0, #0
   1d3ca:	4770      	bx	lr

0001d3cc <CC_PalDmaTerminate>:
   1d3cc:	4770      	bx	lr
   1d3ce:	bf00      	nop

0001d3d0 <CC_PalWaitInterruptRND>:
   1d3d0:	b410      	push	{r4}
   1d3d2:	4c08      	ldr	r4, [pc, #32]	; (1d3f4 <CC_PalWaitInterruptRND+0x24>)
   1d3d4:	4602      	mov	r2, r0
   1d3d6:	6823      	ldr	r3, [r4, #0]
   1d3d8:	4213      	tst	r3, r2
   1d3da:	d0fc      	beq.n	1d3d6 <CC_PalWaitInterruptRND+0x6>
   1d3dc:	b121      	cbz	r1, 1d3e8 <CC_PalWaitInterruptRND+0x18>
   1d3de:	4b06      	ldr	r3, [pc, #24]	; (1d3f8 <CC_PalWaitInterruptRND+0x28>)
   1d3e0:	4806      	ldr	r0, [pc, #24]	; (1d3fc <CC_PalWaitInterruptRND+0x2c>)
   1d3e2:	681b      	ldr	r3, [r3, #0]
   1d3e4:	600b      	str	r3, [r1, #0]
   1d3e6:	6003      	str	r3, [r0, #0]
   1d3e8:	4b05      	ldr	r3, [pc, #20]	; (1d400 <CC_PalWaitInterruptRND+0x30>)
   1d3ea:	601a      	str	r2, [r3, #0]
   1d3ec:	2000      	movs	r0, #0
   1d3ee:	bc10      	pop	{r4}
   1d3f0:	4770      	bx	lr
   1d3f2:	bf00      	nop
   1d3f4:	5002ba00 	.word	0x5002ba00
   1d3f8:	5002b104 	.word	0x5002b104
   1d3fc:	5002b108 	.word	0x5002b108
   1d400:	5002ba08 	.word	0x5002ba08

0001d404 <CC_PalWaitInterrupt>:
   1d404:	4904      	ldr	r1, [pc, #16]	; (1d418 <CC_PalWaitInterrupt+0x14>)
   1d406:	4602      	mov	r2, r0
   1d408:	680b      	ldr	r3, [r1, #0]
   1d40a:	421a      	tst	r2, r3
   1d40c:	d0fc      	beq.n	1d408 <CC_PalWaitInterrupt+0x4>
   1d40e:	4b03      	ldr	r3, [pc, #12]	; (1d41c <CC_PalWaitInterrupt+0x18>)
   1d410:	2000      	movs	r0, #0
   1d412:	601a      	str	r2, [r3, #0]
   1d414:	4770      	bx	lr
   1d416:	bf00      	nop
   1d418:	5002ba00 	.word	0x5002ba00
   1d41c:	5002ba08 	.word	0x5002ba08

0001d420 <CC_PalMutexCreate>:
   1d420:	b508      	push	{r3, lr}
   1d422:	4b03      	ldr	r3, [pc, #12]	; (1d430 <CC_PalMutexCreate+0x10>)
   1d424:	6802      	ldr	r2, [r0, #0]
   1d426:	681b      	ldr	r3, [r3, #0]
   1d428:	6810      	ldr	r0, [r2, #0]
   1d42a:	4798      	blx	r3
   1d42c:	2000      	movs	r0, #0
   1d42e:	bd08      	pop	{r3, pc}
   1d430:	20000994 	.word	0x20000994

0001d434 <CC_PalMutexDestroy>:
   1d434:	b508      	push	{r3, lr}
   1d436:	4b03      	ldr	r3, [pc, #12]	; (1d444 <CC_PalMutexDestroy+0x10>)
   1d438:	6802      	ldr	r2, [r0, #0]
   1d43a:	685b      	ldr	r3, [r3, #4]
   1d43c:	6810      	ldr	r0, [r2, #0]
   1d43e:	4798      	blx	r3
   1d440:	2000      	movs	r0, #0
   1d442:	bd08      	pop	{r3, pc}
   1d444:	20000994 	.word	0x20000994

0001d448 <CC_PalMutexLock>:
   1d448:	4b02      	ldr	r3, [pc, #8]	; (1d454 <CC_PalMutexLock+0xc>)
   1d44a:	6802      	ldr	r2, [r0, #0]
   1d44c:	689b      	ldr	r3, [r3, #8]
   1d44e:	6810      	ldr	r0, [r2, #0]
   1d450:	4718      	bx	r3
   1d452:	bf00      	nop
   1d454:	20000994 	.word	0x20000994

0001d458 <CC_PalMutexUnlock>:
   1d458:	b508      	push	{r3, lr}
   1d45a:	4b03      	ldr	r3, [pc, #12]	; (1d468 <CC_PalMutexUnlock+0x10>)
   1d45c:	6802      	ldr	r2, [r0, #0]
   1d45e:	68db      	ldr	r3, [r3, #12]
   1d460:	6810      	ldr	r0, [r2, #0]
   1d462:	4798      	blx	r3
   1d464:	2000      	movs	r0, #0
   1d466:	bd08      	pop	{r3, pc}
   1d468:	20000994 	.word	0x20000994

0001d46c <CC_PalPowerSaveModeInit>:
   1d46c:	b570      	push	{r4, r5, r6, lr}
   1d46e:	4c09      	ldr	r4, [pc, #36]	; (1d494 <CC_PalPowerSaveModeInit+0x28>)
   1d470:	4d09      	ldr	r5, [pc, #36]	; (1d498 <CC_PalPowerSaveModeInit+0x2c>)
   1d472:	6920      	ldr	r0, [r4, #16]
   1d474:	68ab      	ldr	r3, [r5, #8]
   1d476:	4798      	blx	r3
   1d478:	b118      	cbz	r0, 1d482 <CC_PalPowerSaveModeInit+0x16>
   1d47a:	4b08      	ldr	r3, [pc, #32]	; (1d49c <CC_PalPowerSaveModeInit+0x30>)
   1d47c:	4808      	ldr	r0, [pc, #32]	; (1d4a0 <CC_PalPowerSaveModeInit+0x34>)
   1d47e:	685b      	ldr	r3, [r3, #4]
   1d480:	4798      	blx	r3
   1d482:	4a08      	ldr	r2, [pc, #32]	; (1d4a4 <CC_PalPowerSaveModeInit+0x38>)
   1d484:	68eb      	ldr	r3, [r5, #12]
   1d486:	6920      	ldr	r0, [r4, #16]
   1d488:	2100      	movs	r1, #0
   1d48a:	6011      	str	r1, [r2, #0]
   1d48c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d490:	4718      	bx	r3
   1d492:	bf00      	nop
   1d494:	200009a4 	.word	0x200009a4
   1d498:	20000994 	.word	0x20000994
   1d49c:	20000984 	.word	0x20000984
   1d4a0:	00027250 	.word	0x00027250
   1d4a4:	20003b4c 	.word	0x20003b4c

0001d4a8 <CC_PalPowerSaveModeSelect>:
   1d4a8:	b570      	push	{r4, r5, r6, lr}
   1d4aa:	4d1a      	ldr	r5, [pc, #104]	; (1d514 <CC_PalPowerSaveModeSelect+0x6c>)
   1d4ac:	4e1a      	ldr	r6, [pc, #104]	; (1d518 <CC_PalPowerSaveModeSelect+0x70>)
   1d4ae:	4604      	mov	r4, r0
   1d4b0:	68b2      	ldr	r2, [r6, #8]
   1d4b2:	6928      	ldr	r0, [r5, #16]
   1d4b4:	4790      	blx	r2
   1d4b6:	b9f0      	cbnz	r0, 1d4f6 <CC_PalPowerSaveModeSelect+0x4e>
   1d4b8:	b15c      	cbz	r4, 1d4d2 <CC_PalPowerSaveModeSelect+0x2a>
   1d4ba:	4c18      	ldr	r4, [pc, #96]	; (1d51c <CC_PalPowerSaveModeSelect+0x74>)
   1d4bc:	6823      	ldr	r3, [r4, #0]
   1d4be:	b1ab      	cbz	r3, 1d4ec <CC_PalPowerSaveModeSelect+0x44>
   1d4c0:	2b01      	cmp	r3, #1
   1d4c2:	d01a      	beq.n	1d4fa <CC_PalPowerSaveModeSelect+0x52>
   1d4c4:	3b01      	subs	r3, #1
   1d4c6:	6023      	str	r3, [r4, #0]
   1d4c8:	6928      	ldr	r0, [r5, #16]
   1d4ca:	68f3      	ldr	r3, [r6, #12]
   1d4cc:	4798      	blx	r3
   1d4ce:	2000      	movs	r0, #0
   1d4d0:	bd70      	pop	{r4, r5, r6, pc}
   1d4d2:	4c12      	ldr	r4, [pc, #72]	; (1d51c <CC_PalPowerSaveModeSelect+0x74>)
   1d4d4:	6821      	ldr	r1, [r4, #0]
   1d4d6:	b939      	cbnz	r1, 1d4e8 <CC_PalPowerSaveModeSelect+0x40>
   1d4d8:	4b11      	ldr	r3, [pc, #68]	; (1d520 <CC_PalPowerSaveModeSelect+0x78>)
   1d4da:	4a12      	ldr	r2, [pc, #72]	; (1d524 <CC_PalPowerSaveModeSelect+0x7c>)
   1d4dc:	2001      	movs	r0, #1
   1d4de:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1d4e2:	6813      	ldr	r3, [r2, #0]
   1d4e4:	2b00      	cmp	r3, #0
   1d4e6:	d1fc      	bne.n	1d4e2 <CC_PalPowerSaveModeSelect+0x3a>
   1d4e8:	3101      	adds	r1, #1
   1d4ea:	6021      	str	r1, [r4, #0]
   1d4ec:	68f3      	ldr	r3, [r6, #12]
   1d4ee:	6928      	ldr	r0, [r5, #16]
   1d4f0:	4798      	blx	r3
   1d4f2:	2000      	movs	r0, #0
   1d4f4:	bd70      	pop	{r4, r5, r6, pc}
   1d4f6:	480c      	ldr	r0, [pc, #48]	; (1d528 <CC_PalPowerSaveModeSelect+0x80>)
   1d4f8:	bd70      	pop	{r4, r5, r6, pc}
   1d4fa:	4a0a      	ldr	r2, [pc, #40]	; (1d524 <CC_PalPowerSaveModeSelect+0x7c>)
   1d4fc:	6813      	ldr	r3, [r2, #0]
   1d4fe:	2b00      	cmp	r3, #0
   1d500:	d1fc      	bne.n	1d4fc <CC_PalPowerSaveModeSelect+0x54>
   1d502:	4a07      	ldr	r2, [pc, #28]	; (1d520 <CC_PalPowerSaveModeSelect+0x78>)
   1d504:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d508:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d50c:	f7ff ff02 	bl	1d314 <CC_HalMaskInterrupt>
   1d510:	6823      	ldr	r3, [r4, #0]
   1d512:	e7d7      	b.n	1d4c4 <CC_PalPowerSaveModeSelect+0x1c>
   1d514:	200009a4 	.word	0x200009a4
   1d518:	20000994 	.word	0x20000994
   1d51c:	20003b4c 	.word	0x20003b4c
   1d520:	5002a000 	.word	0x5002a000
   1d524:	5002b910 	.word	0x5002b910
   1d528:	ffff8fe9 	.word	0xffff8fe9

0001d52c <mutex_init>:
   1d52c:	4b01      	ldr	r3, [pc, #4]	; (1d534 <mutex_init+0x8>)
   1d52e:	681b      	ldr	r3, [r3, #0]
   1d530:	4718      	bx	r3
   1d532:	bf00      	nop
   1d534:	20000994 	.word	0x20000994

0001d538 <mutex_lock>:
   1d538:	4b01      	ldr	r3, [pc, #4]	; (1d540 <mutex_lock+0x8>)
   1d53a:	689b      	ldr	r3, [r3, #8]
   1d53c:	4718      	bx	r3
   1d53e:	bf00      	nop
   1d540:	20000994 	.word	0x20000994

0001d544 <mutex_unlock>:
   1d544:	4b01      	ldr	r3, [pc, #4]	; (1d54c <mutex_unlock+0x8>)
   1d546:	68db      	ldr	r3, [r3, #12]
   1d548:	4718      	bx	r3
   1d54a:	bf00      	nop
   1d54c:	20000994 	.word	0x20000994

0001d550 <startTrngHW>:
   1d550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d554:	2800      	cmp	r0, #0
   1d556:	d07b      	beq.n	1d650 <startTrngHW+0x100>
   1d558:	460c      	mov	r4, r1
   1d55a:	2900      	cmp	r1, #0
   1d55c:	d078      	beq.n	1d650 <startTrngHW+0x100>
   1d55e:	461d      	mov	r5, r3
   1d560:	2b00      	cmp	r3, #0
   1d562:	d075      	beq.n	1d650 <startTrngHW+0x100>
   1d564:	4606      	mov	r6, r0
   1d566:	b122      	cbz	r2, 1d572 <startTrngHW+0x22>
   1d568:	2201      	movs	r2, #1
   1d56a:	2300      	movs	r3, #0
   1d56c:	602a      	str	r2, [r5, #0]
   1d56e:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   1d572:	682b      	ldr	r3, [r5, #0]
   1d574:	2b00      	cmp	r3, #0
   1d576:	d067      	beq.n	1d648 <startTrngHW+0xf8>
   1d578:	4629      	mov	r1, r5
   1d57a:	4620      	mov	r0, r4
   1d57c:	f000 fda4 	bl	1e0c8 <LLF_RND_GetFastestRosc>
   1d580:	4607      	mov	r7, r0
   1d582:	2800      	cmp	r0, #0
   1d584:	d161      	bne.n	1d64a <startTrngHW+0xfa>
   1d586:	6828      	ldr	r0, [r5, #0]
   1d588:	4621      	mov	r1, r4
   1d58a:	f000 fd7f 	bl	1e08c <LLF_RND_GetRoscSampleCnt>
   1d58e:	4607      	mov	r7, r0
   1d590:	2800      	cmp	r0, #0
   1d592:	d15a      	bne.n	1d64a <startTrngHW+0xfa>
   1d594:	682b      	ldr	r3, [r5, #0]
   1d596:	2b08      	cmp	r3, #8
   1d598:	d069      	beq.n	1d66e <startTrngHW+0x11e>
   1d59a:	2b04      	cmp	r3, #4
   1d59c:	d06a      	beq.n	1d674 <startTrngHW+0x124>
   1d59e:	f1a3 0802 	sub.w	r8, r3, #2
   1d5a2:	fab8 f888 	clz	r8, r8
   1d5a6:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1d5aa:	4b34      	ldr	r3, [pc, #208]	; (1d67c <startTrngHW+0x12c>)
   1d5ac:	4934      	ldr	r1, [pc, #208]	; (1d680 <startTrngHW+0x130>)
   1d5ae:	4a35      	ldr	r2, [pc, #212]	; (1d684 <startTrngHW+0x134>)
   1d5b0:	2001      	movs	r0, #1
   1d5b2:	6018      	str	r0, [r3, #0]
   1d5b4:	469c      	mov	ip, r3
   1d5b6:	6008      	str	r0, [r1, #0]
   1d5b8:	f8cc 0000 	str.w	r0, [ip]
   1d5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d5be:	6013      	str	r3, [r2, #0]
   1d5c0:	6811      	ldr	r1, [r2, #0]
   1d5c2:	428b      	cmp	r3, r1
   1d5c4:	d1f8      	bne.n	1d5b8 <startTrngHW+0x68>
   1d5c6:	4b30      	ldr	r3, [pc, #192]	; (1d688 <startTrngHW+0x138>)
   1d5c8:	f04f 0900 	mov.w	r9, #0
   1d5cc:	f8c3 9000 	str.w	r9, [r3]
   1d5d0:	f04f 30ff 	mov.w	r0, #4294967295
   1d5d4:	f7ff fe90 	bl	1d2f8 <CC_HalClearInterruptBit>
   1d5d8:	4b2c      	ldr	r3, [pc, #176]	; (1d68c <startTrngHW+0x13c>)
   1d5da:	f06f 021b 	mvn.w	r2, #27
   1d5de:	601a      	str	r2, [r3, #0]
   1d5e0:	4648      	mov	r0, r9
   1d5e2:	f7ff fe97 	bl	1d314 <CC_HalMaskInterrupt>
   1d5e6:	4a2a      	ldr	r2, [pc, #168]	; (1d690 <startTrngHW+0x140>)
   1d5e8:	4b2a      	ldr	r3, [pc, #168]	; (1d694 <startTrngHW+0x144>)
   1d5ea:	f8c2 8000 	str.w	r8, [r2]
   1d5ee:	6818      	ldr	r0, [r3, #0]
   1d5f0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d5f4:	f7ff fe8e 	bl	1d314 <CC_HalMaskInterrupt>
   1d5f8:	4b27      	ldr	r3, [pc, #156]	; (1d698 <startTrngHW+0x148>)
   1d5fa:	220a      	movs	r2, #10
   1d5fc:	601a      	str	r2, [r3, #0]
   1d5fe:	9908      	ldr	r1, [sp, #32]
   1d600:	6923      	ldr	r3, [r4, #16]
   1d602:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d604:	2901      	cmp	r1, #1
   1d606:	d027      	beq.n	1d658 <startTrngHW+0x108>
   1d608:	4924      	ldr	r1, [pc, #144]	; (1d69c <startTrngHW+0x14c>)
   1d60a:	fba1 1303 	umull	r1, r3, r1, r3
   1d60e:	091b      	lsrs	r3, r3, #4
   1d610:	fb03 f302 	mul.w	r3, r3, r2
   1d614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d618:	4921      	ldr	r1, [pc, #132]	; (1d6a0 <startTrngHW+0x150>)
   1d61a:	4a1b      	ldr	r2, [pc, #108]	; (1d688 <startTrngHW+0x138>)
   1d61c:	03db      	lsls	r3, r3, #15
   1d61e:	099b      	lsrs	r3, r3, #6
   1d620:	600b      	str	r3, [r1, #0]
   1d622:	2301      	movs	r3, #1
   1d624:	6013      	str	r3, [r2, #0]
   1d626:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   1d62a:	682a      	ldr	r2, [r5, #0]
   1d62c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d630:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d634:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1d638:	682a      	ldr	r2, [r5, #0]
   1d63a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d63e:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   1d642:	4638      	mov	r0, r7
   1d644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d648:	4f16      	ldr	r7, [pc, #88]	; (1d6a4 <startTrngHW+0x154>)
   1d64a:	4638      	mov	r0, r7
   1d64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d650:	4f15      	ldr	r7, [pc, #84]	; (1d6a8 <startTrngHW+0x158>)
   1d652:	4638      	mov	r0, r7
   1d654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d65c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1d660:	3101      	adds	r1, #1
   1d662:	d002      	beq.n	1d66a <startTrngHW+0x11a>
   1d664:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1d668:	e7ce      	b.n	1d608 <startTrngHW+0xb8>
   1d66a:	2316      	movs	r3, #22
   1d66c:	e7d0      	b.n	1d610 <startTrngHW+0xc0>
   1d66e:	f04f 0803 	mov.w	r8, #3
   1d672:	e79a      	b.n	1d5aa <startTrngHW+0x5a>
   1d674:	f04f 0802 	mov.w	r8, #2
   1d678:	e797      	b.n	1d5aa <startTrngHW+0x5a>
   1d67a:	bf00      	nop
   1d67c:	5002b1c4 	.word	0x5002b1c4
   1d680:	5002b140 	.word	0x5002b140
   1d684:	5002b130 	.word	0x5002b130
   1d688:	5002b12c 	.word	0x5002b12c
   1d68c:	5002b100 	.word	0x5002b100
   1d690:	5002b10c 	.word	0x5002b10c
   1d694:	5002ba04 	.word	0x5002ba04
   1d698:	5002b138 	.word	0x5002b138
   1d69c:	aaaaaaab 	.word	0xaaaaaaab
   1d6a0:	5002b1d8 	.word	0x5002b1d8
   1d6a4:	00f10c31 	.word	0x00f10c31
   1d6a8:	00f10c35 	.word	0x00f10c35

0001d6ac <LLF_RND_RepetitionCounterTest.part.0>:
   1d6ac:	b4f0      	push	{r4, r5, r6, r7}
   1d6ae:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1d6b2:	2400      	movs	r4, #0
   1d6b4:	f10c 3cff 	add.w	ip, ip, #4294967295
   1d6b8:	4626      	mov	r6, r4
   1d6ba:	4627      	mov	r7, r4
   1d6bc:	e006      	b.n	1d6cc <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1d6be:	429f      	cmp	r7, r3
   1d6c0:	d016      	beq.n	1d6f0 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1d6c2:	2601      	movs	r6, #1
   1d6c4:	4565      	cmp	r5, ip
   1d6c6:	d819      	bhi.n	1d6fc <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1d6c8:	462c      	mov	r4, r5
   1d6ca:	461f      	mov	r7, r3
   1d6cc:	0963      	lsrs	r3, r4, #5
   1d6ce:	f004 011f 	and.w	r1, r4, #31
   1d6d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d6d6:	291f      	cmp	r1, #31
   1d6d8:	fa23 f301 	lsr.w	r3, r3, r1
   1d6dc:	f104 0501 	add.w	r5, r4, #1
   1d6e0:	bf18      	it	ne
   1d6e2:	f003 0301 	andne.w	r3, r3, #1
   1d6e6:	2c00      	cmp	r4, #0
   1d6e8:	d1e9      	bne.n	1d6be <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1d6ea:	2601      	movs	r6, #1
   1d6ec:	4635      	mov	r5, r6
   1d6ee:	e7eb      	b.n	1d6c8 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1d6f0:	3601      	adds	r6, #1
   1d6f2:	4296      	cmp	r6, r2
   1d6f4:	d1e6      	bne.n	1d6c4 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1d6f6:	4803      	ldr	r0, [pc, #12]	; (1d704 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1d6f8:	bcf0      	pop	{r4, r5, r6, r7}
   1d6fa:	4770      	bx	lr
   1d6fc:	2000      	movs	r0, #0
   1d6fe:	bcf0      	pop	{r4, r5, r6, r7}
   1d700:	4770      	bx	lr
   1d702:	bf00      	nop
   1d704:	00f10c36 	.word	0x00f10c36

0001d708 <LLF_RND_AdaptiveProportionTest>:
   1d708:	2800      	cmp	r0, #0
   1d70a:	d061      	beq.n	1d7d0 <LLF_RND_AdaptiveProportionTest+0xc8>
   1d70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d710:	1e4c      	subs	r4, r1, #1
   1d712:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1d716:	d227      	bcs.n	1d768 <LLF_RND_AdaptiveProportionTest+0x60>
   1d718:	b333      	cbz	r3, 1d768 <LLF_RND_AdaptiveProportionTest+0x60>
   1d71a:	b32a      	cbz	r2, 1d768 <LLF_RND_AdaptiveProportionTest+0x60>
   1d71c:	00cd      	lsls	r5, r1, #3
   1d71e:	2b01      	cmp	r3, #1
   1d720:	f105 3eff 	add.w	lr, r5, #4294967295
   1d724:	d030      	beq.n	1d788 <LLF_RND_AdaptiveProportionTest+0x80>
   1d726:	2100      	movs	r1, #0
   1d728:	468c      	mov	ip, r1
   1d72a:	460f      	mov	r7, r1
   1d72c:	460e      	mov	r6, r1
   1d72e:	f103 38ff 	add.w	r8, r3, #4294967295
   1d732:	094c      	lsrs	r4, r1, #5
   1d734:	f001 051f 	and.w	r5, r1, #31
   1d738:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1d73c:	2d1f      	cmp	r5, #31
   1d73e:	fa24 f405 	lsr.w	r4, r4, r5
   1d742:	bf18      	it	ne
   1d744:	f004 0401 	andne.w	r4, r4, #1
   1d748:	b921      	cbnz	r1, 1d754 <LLF_RND_AdaptiveProportionTest+0x4c>
   1d74a:	2601      	movs	r6, #1
   1d74c:	46b4      	mov	ip, r6
   1d74e:	4631      	mov	r1, r6
   1d750:	4627      	mov	r7, r4
   1d752:	e7ee      	b.n	1d732 <LLF_RND_AdaptiveProportionTest+0x2a>
   1d754:	42b3      	cmp	r3, r6
   1d756:	d013      	beq.n	1d780 <LLF_RND_AdaptiveProportionTest+0x78>
   1d758:	42a7      	cmp	r7, r4
   1d75a:	d101      	bne.n	1d760 <LLF_RND_AdaptiveProportionTest+0x58>
   1d75c:	f10c 0c01 	add.w	ip, ip, #1
   1d760:	4546      	cmp	r6, r8
   1d762:	d104      	bne.n	1d76e <LLF_RND_AdaptiveProportionTest+0x66>
   1d764:	4562      	cmp	r2, ip
   1d766:	d202      	bcs.n	1d76e <LLF_RND_AdaptiveProportionTest+0x66>
   1d768:	481a      	ldr	r0, [pc, #104]	; (1d7d4 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1d76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d76e:	463c      	mov	r4, r7
   1d770:	3101      	adds	r1, #1
   1d772:	458e      	cmp	lr, r1
   1d774:	f106 0601 	add.w	r6, r6, #1
   1d778:	d2ea      	bcs.n	1d750 <LLF_RND_AdaptiveProportionTest+0x48>
   1d77a:	2000      	movs	r0, #0
   1d77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d780:	2600      	movs	r6, #0
   1d782:	f04f 0c01 	mov.w	ip, #1
   1d786:	e7f3      	b.n	1d770 <LLF_RND_AdaptiveProportionTest+0x68>
   1d788:	2600      	movs	r6, #0
   1d78a:	46b4      	mov	ip, r6
   1d78c:	4637      	mov	r7, r6
   1d78e:	4634      	mov	r4, r6
   1d790:	0961      	lsrs	r1, r4, #5
   1d792:	f004 031f 	and.w	r3, r4, #31
   1d796:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1d79a:	2b1f      	cmp	r3, #31
   1d79c:	fa21 f103 	lsr.w	r1, r1, r3
   1d7a0:	bf18      	it	ne
   1d7a2:	f001 0101 	andne.w	r1, r1, #1
   1d7a6:	b13c      	cbz	r4, 1d7b8 <LLF_RND_AdaptiveProportionTest+0xb0>
   1d7a8:	b95f      	cbnz	r7, 1d7c2 <LLF_RND_AdaptiveProportionTest+0xba>
   1d7aa:	458c      	cmp	ip, r1
   1d7ac:	d001      	beq.n	1d7b2 <LLF_RND_AdaptiveProportionTest+0xaa>
   1d7ae:	4661      	mov	r1, ip
   1d7b0:	e008      	b.n	1d7c4 <LLF_RND_AdaptiveProportionTest+0xbc>
   1d7b2:	3601      	adds	r6, #1
   1d7b4:	4661      	mov	r1, ip
   1d7b6:	e005      	b.n	1d7c4 <LLF_RND_AdaptiveProportionTest+0xbc>
   1d7b8:	2601      	movs	r6, #1
   1d7ba:	4634      	mov	r4, r6
   1d7bc:	468c      	mov	ip, r1
   1d7be:	2701      	movs	r7, #1
   1d7c0:	e7e6      	b.n	1d790 <LLF_RND_AdaptiveProportionTest+0x88>
   1d7c2:	463e      	mov	r6, r7
   1d7c4:	42b2      	cmp	r2, r6
   1d7c6:	d3cf      	bcc.n	1d768 <LLF_RND_AdaptiveProportionTest+0x60>
   1d7c8:	3401      	adds	r4, #1
   1d7ca:	42ac      	cmp	r4, r5
   1d7cc:	d1f6      	bne.n	1d7bc <LLF_RND_AdaptiveProportionTest+0xb4>
   1d7ce:	e7d4      	b.n	1d77a <LLF_RND_AdaptiveProportionTest+0x72>
   1d7d0:	4800      	ldr	r0, [pc, #0]	; (1d7d4 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1d7d2:	4770      	bx	lr
   1d7d4:	00f10c37 	.word	0x00f10c37

0001d7d8 <getTrngSource>:
   1d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7dc:	b08d      	sub	sp, #52	; 0x34
   1d7de:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1d7e2:	4607      	mov	r7, r0
   1d7e4:	460c      	mov	r4, r1
   1d7e6:	2d00      	cmp	r5, #0
   1d7e8:	d14d      	bne.n	1d886 <getTrngSource+0xae>
   1d7ea:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1d7ee:	601e      	str	r6, [r3, #0]
   1d7f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d7f2:	2100      	movs	r1, #0
   1d7f4:	6019      	str	r1, [r3, #0]
   1d7f6:	2a00      	cmp	r2, #0
   1d7f8:	f000 8120 	beq.w	1da3c <getTrngSource+0x264>
   1d7fc:	4a9b      	ldr	r2, [pc, #620]	; (1da6c <getTrngSource+0x294>)
   1d7fe:	4b9c      	ldr	r3, [pc, #624]	; (1da70 <getTrngSource+0x298>)
   1d800:	6811      	ldr	r1, [r2, #0]
   1d802:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d804:	681b      	ldr	r3, [r3, #0]
   1d806:	429a      	cmp	r2, r3
   1d808:	d148      	bne.n	1d89c <getTrngSource+0xc4>
   1d80a:	290a      	cmp	r1, #10
   1d80c:	d146      	bne.n	1d89c <getTrngSource+0xc4>
   1d80e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   1d812:	9304      	str	r3, [sp, #16]
   1d814:	4b97      	ldr	r3, [pc, #604]	; (1da74 <getTrngSource+0x29c>)
   1d816:	fba3 230a 	umull	r2, r3, r3, sl
   1d81a:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1d81e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1d822:	f106 0208 	add.w	r2, r6, #8
   1d826:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1d82a:	2304      	movs	r3, #4
   1d82c:	9203      	str	r2, [sp, #12]
   1d82e:	9302      	str	r3, [sp, #8]
   1d830:	46b8      	mov	r8, r7
   1d832:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d834:	f8c3 a000 	str.w	sl, [r3]
   1d838:	f1ba 0f00 	cmp.w	sl, #0
   1d83c:	f000 80c4 	beq.w	1d9c8 <getTrngSource+0x1f0>
   1d840:	9e03      	ldr	r6, [sp, #12]
   1d842:	4655      	mov	r5, sl
   1d844:	f04f 0900 	mov.w	r9, #0
   1d848:	f000 fc4e 	bl	1e0e8 <LLF_RND_TurnOffTrng>
   1d84c:	2300      	movs	r3, #0
   1d84e:	9305      	str	r3, [sp, #20]
   1d850:	f1b8 0f00 	cmp.w	r8, #0
   1d854:	f000 80e6 	beq.w	1da24 <getTrngSource+0x24c>
   1d858:	2c00      	cmp	r4, #0
   1d85a:	f000 80e3 	beq.w	1da24 <getTrngSource+0x24c>
   1d85e:	9b04      	ldr	r3, [sp, #16]
   1d860:	2b00      	cmp	r3, #0
   1d862:	f000 80dd 	beq.w	1da20 <getTrngSource+0x248>
   1d866:	a904      	add	r1, sp, #16
   1d868:	4620      	mov	r0, r4
   1d86a:	f000 fc2d 	bl	1e0c8 <LLF_RND_GetFastestRosc>
   1d86e:	b1b8      	cbz	r0, 1d8a0 <getTrngSource+0xc8>
   1d870:	4b81      	ldr	r3, [pc, #516]	; (1da78 <getTrngSource+0x2a0>)
   1d872:	4298      	cmp	r0, r3
   1d874:	f040 80a8 	bne.w	1d9c8 <getTrngSource+0x1f0>
   1d878:	9002      	str	r0, [sp, #8]
   1d87a:	f000 fc35 	bl	1e0e8 <LLF_RND_TurnOffTrng>
   1d87e:	9802      	ldr	r0, [sp, #8]
   1d880:	b00d      	add	sp, #52	; 0x34
   1d882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d886:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1d88a:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1d88e:	3001      	adds	r0, #1
   1d890:	bf14      	ite	ne
   1d892:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1d896:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1d89a:	e7a8      	b.n	1d7ee <getTrngSource+0x16>
   1d89c:	4877      	ldr	r0, [pc, #476]	; (1da7c <getTrngSource+0x2a4>)
   1d89e:	e7eb      	b.n	1d878 <getTrngSource+0xa0>
   1d8a0:	9804      	ldr	r0, [sp, #16]
   1d8a2:	4621      	mov	r1, r4
   1d8a4:	f000 fbf2 	bl	1e08c <LLF_RND_GetRoscSampleCnt>
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	d1e1      	bne.n	1d870 <getTrngSource+0x98>
   1d8ac:	9f04      	ldr	r7, [sp, #16]
   1d8ae:	2f08      	cmp	r7, #8
   1d8b0:	f000 80ba 	beq.w	1da28 <getTrngSource+0x250>
   1d8b4:	2f04      	cmp	r7, #4
   1d8b6:	f000 80b9 	beq.w	1da2c <getTrngSource+0x254>
   1d8ba:	f1a7 0702 	sub.w	r7, r7, #2
   1d8be:	fab7 f787 	clz	r7, r7
   1d8c2:	097f      	lsrs	r7, r7, #5
   1d8c4:	496e      	ldr	r1, [pc, #440]	; (1da80 <getTrngSource+0x2a8>)
   1d8c6:	2301      	movs	r3, #1
   1d8c8:	600b      	str	r3, [r1, #0]
   1d8ca:	f841 3c84 	str.w	r3, [r1, #-132]
   1d8ce:	4619      	mov	r1, r3
   1d8d0:	4b6b      	ldr	r3, [pc, #428]	; (1da80 <getTrngSource+0x2a8>)
   1d8d2:	4867      	ldr	r0, [pc, #412]	; (1da70 <getTrngSource+0x298>)
   1d8d4:	6019      	str	r1, [r3, #0]
   1d8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d8d8:	6003      	str	r3, [r0, #0]
   1d8da:	6800      	ldr	r0, [r0, #0]
   1d8dc:	4283      	cmp	r3, r0
   1d8de:	d1f7      	bne.n	1d8d0 <getTrngSource+0xf8>
   1d8e0:	4a68      	ldr	r2, [pc, #416]	; (1da84 <getTrngSource+0x2ac>)
   1d8e2:	2300      	movs	r3, #0
   1d8e4:	6013      	str	r3, [r2, #0]
   1d8e6:	f04f 30ff 	mov.w	r0, #4294967295
   1d8ea:	f7ff fd05 	bl	1d2f8 <CC_HalClearInterruptBit>
   1d8ee:	2300      	movs	r3, #0
   1d8f0:	4618      	mov	r0, r3
   1d8f2:	4b65      	ldr	r3, [pc, #404]	; (1da88 <getTrngSource+0x2b0>)
   1d8f4:	f06f 011b 	mvn.w	r1, #27
   1d8f8:	6019      	str	r1, [r3, #0]
   1d8fa:	f7ff fd0b 	bl	1d314 <CC_HalMaskInterrupt>
   1d8fe:	4963      	ldr	r1, [pc, #396]	; (1da8c <getTrngSource+0x2b4>)
   1d900:	4b63      	ldr	r3, [pc, #396]	; (1da90 <getTrngSource+0x2b8>)
   1d902:	600f      	str	r7, [r1, #0]
   1d904:	6818      	ldr	r0, [r3, #0]
   1d906:	4f5b      	ldr	r7, [pc, #364]	; (1da74 <getTrngSource+0x29c>)
   1d908:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d90c:	f7ff fd02 	bl	1d314 <CC_HalMaskInterrupt>
   1d910:	4b56      	ldr	r3, [pc, #344]	; (1da6c <getTrngSource+0x294>)
   1d912:	4860      	ldr	r0, [pc, #384]	; (1da94 <getTrngSource+0x2bc>)
   1d914:	210a      	movs	r1, #10
   1d916:	6019      	str	r1, [r3, #0]
   1d918:	6921      	ldr	r1, [r4, #16]
   1d91a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d91c:	fba7 c101 	umull	ip, r1, r7, r1
   1d920:	0909      	lsrs	r1, r1, #4
   1d922:	fb03 f301 	mul.w	r3, r3, r1
   1d926:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d92a:	03db      	lsls	r3, r3, #15
   1d92c:	099b      	lsrs	r3, r3, #6
   1d92e:	6003      	str	r3, [r0, #0]
   1d930:	4b54      	ldr	r3, [pc, #336]	; (1da84 <getTrngSource+0x2ac>)
   1d932:	2201      	movs	r2, #1
   1d934:	601a      	str	r2, [r3, #0]
   1d936:	9904      	ldr	r1, [sp, #16]
   1d938:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1d93c:	020b      	lsls	r3, r1, #8
   1d93e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1d942:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d946:	4313      	orrs	r3, r2
   1d948:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1d94c:	a805      	add	r0, sp, #20
   1d94e:	f000 fb8d 	bl	1e06c <LLF_RND_WaitRngInterrupt>
   1d952:	9b05      	ldr	r3, [sp, #20]
   1d954:	f003 031a 	and.w	r3, r3, #26
   1d958:	4303      	orrs	r3, r0
   1d95a:	d135      	bne.n	1d9c8 <getTrngSource+0x1f0>
   1d95c:	4a4e      	ldr	r2, [pc, #312]	; (1da98 <getTrngSource+0x2c0>)
   1d95e:	4b4f      	ldr	r3, [pc, #316]	; (1da9c <getTrngSource+0x2c4>)
   1d960:	6812      	ldr	r2, [r2, #0]
   1d962:	9206      	str	r2, [sp, #24]
   1d964:	681a      	ldr	r2, [r3, #0]
   1d966:	9207      	str	r2, [sp, #28]
   1d968:	685a      	ldr	r2, [r3, #4]
   1d96a:	9208      	str	r2, [sp, #32]
   1d96c:	689a      	ldr	r2, [r3, #8]
   1d96e:	9209      	str	r2, [sp, #36]	; 0x24
   1d970:	68da      	ldr	r2, [r3, #12]
   1d972:	920a      	str	r2, [sp, #40]	; 0x28
   1d974:	3310      	adds	r3, #16
   1d976:	fba7 2705 	umull	r2, r7, r7, r5
   1d97a:	681b      	ldr	r3, [r3, #0]
   1d97c:	930b      	str	r3, [sp, #44]	; 0x2c
   1d97e:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1d982:	d102      	bne.n	1d98a <getTrngSource+0x1b2>
   1d984:	f1bb 0f00 	cmp.w	fp, #0
   1d988:	d141      	bne.n	1da0e <getTrngSource+0x236>
   1d98a:	2218      	movs	r2, #24
   1d98c:	4630      	mov	r0, r6
   1d98e:	eb0d 0102 	add.w	r1, sp, r2
   1d992:	f000 fb0f 	bl	1dfb4 <CC_PalMemCopyPlat>
   1d996:	3d18      	subs	r5, #24
   1d998:	3618      	adds	r6, #24
   1d99a:	f109 0901 	add.w	r9, r9, #1
   1d99e:	2d00      	cmp	r5, #0
   1d9a0:	f47f af52 	bne.w	1d848 <getTrngSource+0x70>
   1d9a4:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1d9a8:	d85d      	bhi.n	1da66 <getTrngSource+0x28e>
   1d9aa:	9d03      	ldr	r5, [sp, #12]
   1d9ac:	6962      	ldr	r2, [r4, #20]
   1d9ae:	4651      	mov	r1, sl
   1d9b0:	4628      	mov	r0, r5
   1d9b2:	f7ff fe7b 	bl	1d6ac <LLF_RND_RepetitionCounterTest.part.0>
   1d9b6:	2800      	cmp	r0, #0
   1d9b8:	d04b      	beq.n	1da52 <getTrngSource+0x27a>
   1d9ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d9bc:	2300      	movs	r3, #0
   1d9be:	6013      	str	r3, [r2, #0]
   1d9c0:	4b2d      	ldr	r3, [pc, #180]	; (1da78 <getTrngSource+0x2a0>)
   1d9c2:	4298      	cmp	r0, r3
   1d9c4:	f43f af58 	beq.w	1d878 <getTrngSource+0xa0>
   1d9c8:	9d04      	ldr	r5, [sp, #16]
   1d9ca:	2d08      	cmp	r5, #8
   1d9cc:	d034      	beq.n	1da38 <getTrngSource+0x260>
   1d9ce:	2200      	movs	r2, #0
   1d9d0:	ab04      	add	r3, sp, #16
   1d9d2:	006d      	lsls	r5, r5, #1
   1d9d4:	9200      	str	r2, [sp, #0]
   1d9d6:	4621      	mov	r1, r4
   1d9d8:	4640      	mov	r0, r8
   1d9da:	9504      	str	r5, [sp, #16]
   1d9dc:	f7ff fdb8 	bl	1d550 <startTrngHW>
   1d9e0:	4b2f      	ldr	r3, [pc, #188]	; (1daa0 <getTrngSource+0x2c8>)
   1d9e2:	4298      	cmp	r0, r3
   1d9e4:	d024      	beq.n	1da30 <getTrngSource+0x258>
   1d9e6:	2800      	cmp	r0, #0
   1d9e8:	f47f af46 	bne.w	1d878 <getTrngSource+0xa0>
   1d9ec:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   1d9f0:	0a13      	lsrs	r3, r2, #8
   1d9f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1d9f6:	4313      	orrs	r3, r2
   1d9f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d9fc:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   1da00:	9b02      	ldr	r3, [sp, #8]
   1da02:	3b01      	subs	r3, #1
   1da04:	9302      	str	r3, [sp, #8]
   1da06:	f47f af14 	bne.w	1d832 <getTrngSource+0x5a>
   1da0a:	2000      	movs	r0, #0
   1da0c:	e734      	b.n	1d878 <getTrngSource+0xa0>
   1da0e:	4630      	mov	r0, r6
   1da10:	465a      	mov	r2, fp
   1da12:	a906      	add	r1, sp, #24
   1da14:	f000 face 	bl	1dfb4 <CC_PalMemCopyPlat>
   1da18:	eba5 050b 	sub.w	r5, r5, fp
   1da1c:	445e      	add	r6, fp
   1da1e:	e7bc      	b.n	1d99a <getTrngSource+0x1c2>
   1da20:	481f      	ldr	r0, [pc, #124]	; (1daa0 <getTrngSource+0x2c8>)
   1da22:	e725      	b.n	1d870 <getTrngSource+0x98>
   1da24:	481f      	ldr	r0, [pc, #124]	; (1daa4 <getTrngSource+0x2cc>)
   1da26:	e723      	b.n	1d870 <getTrngSource+0x98>
   1da28:	2703      	movs	r7, #3
   1da2a:	e74b      	b.n	1d8c4 <getTrngSource+0xec>
   1da2c:	2702      	movs	r7, #2
   1da2e:	e749      	b.n	1d8c4 <getTrngSource+0xec>
   1da30:	6a23      	ldr	r3, [r4, #32]
   1da32:	2b00      	cmp	r3, #0
   1da34:	f43f af20 	beq.w	1d878 <getTrngSource+0xa0>
   1da38:	481b      	ldr	r0, [pc, #108]	; (1daa8 <getTrngSource+0x2d0>)
   1da3a:	e71d      	b.n	1d878 <getTrngSource+0xa0>
   1da3c:	9500      	str	r5, [sp, #0]
   1da3e:	ab04      	add	r3, sp, #16
   1da40:	2201      	movs	r2, #1
   1da42:	4621      	mov	r1, r4
   1da44:	4638      	mov	r0, r7
   1da46:	f7ff fd83 	bl	1d550 <startTrngHW>
   1da4a:	2800      	cmp	r0, #0
   1da4c:	f43f aee2 	beq.w	1d814 <getTrngSource+0x3c>
   1da50:	e712      	b.n	1d878 <getTrngSource+0xa0>
   1da52:	69a2      	ldr	r2, [r4, #24]
   1da54:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1da58:	4651      	mov	r1, sl
   1da5a:	4628      	mov	r0, r5
   1da5c:	f7ff fe54 	bl	1d708 <LLF_RND_AdaptiveProportionTest>
   1da60:	2800      	cmp	r0, #0
   1da62:	d1aa      	bne.n	1d9ba <getTrngSource+0x1e2>
   1da64:	e7d1      	b.n	1da0a <getTrngSource+0x232>
   1da66:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1da68:	601d      	str	r5, [r3, #0]
   1da6a:	e7ad      	b.n	1d9c8 <getTrngSource+0x1f0>
   1da6c:	5002b138 	.word	0x5002b138
   1da70:	5002b130 	.word	0x5002b130
   1da74:	aaaaaaab 	.word	0xaaaaaaab
   1da78:	00f10c02 	.word	0x00f10c02
   1da7c:	00f10c30 	.word	0x00f10c30
   1da80:	5002b1c4 	.word	0x5002b1c4
   1da84:	5002b12c 	.word	0x5002b12c
   1da88:	5002b100 	.word	0x5002b100
   1da8c:	5002b10c 	.word	0x5002b10c
   1da90:	5002ba04 	.word	0x5002ba04
   1da94:	5002b1d8 	.word	0x5002b1d8
   1da98:	5002b114 	.word	0x5002b114
   1da9c:	5002b118 	.word	0x5002b118
   1daa0:	00f10c31 	.word	0x00f10c31
   1daa4:	00f10c35 	.word	0x00f10c35
   1daa8:	00f10c32 	.word	0x00f10c32

0001daac <LLF_RND_GetTrngSource>:
   1daac:	b430      	push	{r4, r5}
   1daae:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1dab2:	9d04      	ldr	r5, [sp, #16]
   1dab4:	9402      	str	r4, [sp, #8]
   1dab6:	2400      	movs	r4, #0
   1dab8:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1dabc:	bc30      	pop	{r4, r5}
   1dabe:	f7ff be8b 	b.w	1d7d8 <getTrngSource>
   1dac2:	bf00      	nop

0001dac4 <LLF_RND_RunTrngStartupTest>:
   1dac4:	b510      	push	{r4, lr}
   1dac6:	b086      	sub	sp, #24
   1dac8:	ab05      	add	r3, sp, #20
   1daca:	2401      	movs	r4, #1
   1dacc:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1dad0:	9300      	str	r3, [sp, #0]
   1dad2:	2200      	movs	r2, #0
   1dad4:	ab04      	add	r3, sp, #16
   1dad6:	f7ff fe7f 	bl	1d7d8 <getTrngSource>
   1dada:	b006      	add	sp, #24
   1dadc:	bd10      	pop	{r4, pc}
   1dade:	bf00      	nop

0001dae0 <mbedtls_hardware_poll>:
   1dae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dae2:	b089      	sub	sp, #36	; 0x24
   1dae4:	9205      	str	r2, [sp, #20]
   1dae6:	2900      	cmp	r1, #0
   1dae8:	d064      	beq.n	1dbb4 <mbedtls_hardware_poll+0xd4>
   1daea:	461c      	mov	r4, r3
   1daec:	2b00      	cmp	r3, #0
   1daee:	d061      	beq.n	1dbb4 <mbedtls_hardware_poll+0xd4>
   1daf0:	4615      	mov	r5, r2
   1daf2:	2a00      	cmp	r2, #0
   1daf4:	d05e      	beq.n	1dbb4 <mbedtls_hardware_poll+0xd4>
   1daf6:	4f31      	ldr	r7, [pc, #196]	; (1dbbc <mbedtls_hardware_poll+0xdc>)
   1daf8:	460e      	mov	r6, r1
   1dafa:	6838      	ldr	r0, [r7, #0]
   1dafc:	f04f 31ff 	mov.w	r1, #4294967295
   1db00:	f7ff fca2 	bl	1d448 <CC_PalMutexLock>
   1db04:	2800      	cmp	r0, #0
   1db06:	d14b      	bne.n	1dba0 <mbedtls_hardware_poll+0xc0>
   1db08:	2000      	movs	r0, #0
   1db0a:	f7ff fccd 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1db0e:	2800      	cmp	r0, #0
   1db10:	d142      	bne.n	1db98 <mbedtls_hardware_poll+0xb8>
   1db12:	482b      	ldr	r0, [pc, #172]	; (1dbc0 <mbedtls_hardware_poll+0xe0>)
   1db14:	f000 fa12 	bl	1df3c <RNG_PLAT_SetUserRngParameters>
   1db18:	b1d8      	cbz	r0, 1db52 <mbedtls_hardware_poll+0x72>
   1db1a:	2001      	movs	r0, #1
   1db1c:	f04f 36ff 	mov.w	r6, #4294967295
   1db20:	f7ff fcc2 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1db24:	2800      	cmp	r0, #0
   1db26:	d133      	bne.n	1db90 <mbedtls_hardware_poll+0xb0>
   1db28:	4826      	ldr	r0, [pc, #152]	; (1dbc4 <mbedtls_hardware_poll+0xe4>)
   1db2a:	f44f 7108 	mov.w	r1, #544	; 0x220
   1db2e:	f7fe fe47 	bl	1c7c0 <mbedtls_zeroize_internal>
   1db32:	4825      	ldr	r0, [pc, #148]	; (1dbc8 <mbedtls_hardware_poll+0xe8>)
   1db34:	21dc      	movs	r1, #220	; 0xdc
   1db36:	f7fe fe43 	bl	1c7c0 <mbedtls_zeroize_internal>
   1db3a:	4821      	ldr	r0, [pc, #132]	; (1dbc0 <mbedtls_hardware_poll+0xe0>)
   1db3c:	2128      	movs	r1, #40	; 0x28
   1db3e:	f7fe fe3f 	bl	1c7c0 <mbedtls_zeroize_internal>
   1db42:	6838      	ldr	r0, [r7, #0]
   1db44:	f7ff fc88 	bl	1d458 <CC_PalMutexUnlock>
   1db48:	2800      	cmp	r0, #0
   1db4a:	d12d      	bne.n	1dba8 <mbedtls_hardware_poll+0xc8>
   1db4c:	4630      	mov	r0, r6
   1db4e:	b009      	add	sp, #36	; 0x24
   1db50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1db52:	491c      	ldr	r1, [pc, #112]	; (1dbc4 <mbedtls_hardware_poll+0xe4>)
   1db54:	9003      	str	r0, [sp, #12]
   1db56:	ab07      	add	r3, sp, #28
   1db58:	4602      	mov	r2, r0
   1db5a:	9102      	str	r1, [sp, #8]
   1db5c:	9300      	str	r3, [sp, #0]
   1db5e:	4918      	ldr	r1, [pc, #96]	; (1dbc0 <mbedtls_hardware_poll+0xe0>)
   1db60:	4819      	ldr	r0, [pc, #100]	; (1dbc8 <mbedtls_hardware_poll+0xe8>)
   1db62:	9401      	str	r4, [sp, #4]
   1db64:	ab05      	add	r3, sp, #20
   1db66:	f7ff ffa1 	bl	1daac <LLF_RND_GetTrngSource>
   1db6a:	4603      	mov	r3, r0
   1db6c:	2800      	cmp	r0, #0
   1db6e:	d1d4      	bne.n	1db1a <mbedtls_hardware_poll+0x3a>
   1db70:	6822      	ldr	r2, [r4, #0]
   1db72:	42aa      	cmp	r2, r5
   1db74:	d3d1      	bcc.n	1db1a <mbedtls_hardware_poll+0x3a>
   1db76:	9907      	ldr	r1, [sp, #28]
   1db78:	4630      	mov	r0, r6
   1db7a:	3108      	adds	r1, #8
   1db7c:	462a      	mov	r2, r5
   1db7e:	461e      	mov	r6, r3
   1db80:	f000 fa18 	bl	1dfb4 <CC_PalMemCopyPlat>
   1db84:	6025      	str	r5, [r4, #0]
   1db86:	2001      	movs	r0, #1
   1db88:	f7ff fc8e 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1db8c:	2800      	cmp	r0, #0
   1db8e:	d0cb      	beq.n	1db28 <mbedtls_hardware_poll+0x48>
   1db90:	480e      	ldr	r0, [pc, #56]	; (1dbcc <mbedtls_hardware_poll+0xec>)
   1db92:	f7fe fd0d 	bl	1c5b0 <CC_PalAbort>
   1db96:	e7c7      	b.n	1db28 <mbedtls_hardware_poll+0x48>
   1db98:	480d      	ldr	r0, [pc, #52]	; (1dbd0 <mbedtls_hardware_poll+0xf0>)
   1db9a:	f7fe fd09 	bl	1c5b0 <CC_PalAbort>
   1db9e:	e7b8      	b.n	1db12 <mbedtls_hardware_poll+0x32>
   1dba0:	480c      	ldr	r0, [pc, #48]	; (1dbd4 <mbedtls_hardware_poll+0xf4>)
   1dba2:	f7fe fd05 	bl	1c5b0 <CC_PalAbort>
   1dba6:	e7af      	b.n	1db08 <mbedtls_hardware_poll+0x28>
   1dba8:	480b      	ldr	r0, [pc, #44]	; (1dbd8 <mbedtls_hardware_poll+0xf8>)
   1dbaa:	f7fe fd01 	bl	1c5b0 <CC_PalAbort>
   1dbae:	4630      	mov	r0, r6
   1dbb0:	b009      	add	sp, #36	; 0x24
   1dbb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dbb4:	f04f 36ff 	mov.w	r6, #4294967295
   1dbb8:	e7c8      	b.n	1db4c <mbedtls_hardware_poll+0x6c>
   1dbba:	bf00      	nop
   1dbbc:	200009e4 	.word	0x200009e4
   1dbc0:	20003e4c 	.word	0x20003e4c
   1dbc4:	20003c2c 	.word	0x20003c2c
   1dbc8:	20003b50 	.word	0x20003b50
   1dbcc:	00027218 	.word	0x00027218
   1dbd0:	000271f8 	.word	0x000271f8
   1dbd4:	000271e0 	.word	0x000271e0
   1dbd8:	00027270 	.word	0x00027270

0001dbdc <cc_mbedtls_aes_init>:
   1dbdc:	b510      	push	{r4, lr}
   1dbde:	4604      	mov	r4, r0
   1dbe0:	b130      	cbz	r0, 1dbf0 <cc_mbedtls_aes_init+0x14>
   1dbe2:	2200      	movs	r2, #0
   1dbe4:	2301      	movs	r3, #1
   1dbe6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1dbea:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1dbee:	bd10      	pop	{r4, pc}
   1dbf0:	4801      	ldr	r0, [pc, #4]	; (1dbf8 <cc_mbedtls_aes_init+0x1c>)
   1dbf2:	f7fe fcdd 	bl	1c5b0 <CC_PalAbort>
   1dbf6:	e7f4      	b.n	1dbe2 <cc_mbedtls_aes_init+0x6>
   1dbf8:	00027288 	.word	0x00027288

0001dbfc <cc_mbedtls_aes_free>:
   1dbfc:	b118      	cbz	r0, 1dc06 <cc_mbedtls_aes_free+0xa>
   1dbfe:	2274      	movs	r2, #116	; 0x74
   1dc00:	2100      	movs	r1, #0
   1dc02:	f000 b9d9 	b.w	1dfb8 <CC_PalMemSetPlat>
   1dc06:	4770      	bx	lr

0001dc08 <cc_mbedtls_aes_setkey_enc>:
   1dc08:	b190      	cbz	r0, 1dc30 <cc_mbedtls_aes_setkey_enc+0x28>
   1dc0a:	b1a1      	cbz	r1, 1dc36 <cc_mbedtls_aes_setkey_enc+0x2e>
   1dc0c:	b510      	push	{r4, lr}
   1dc0e:	2a80      	cmp	r2, #128	; 0x80
   1dc10:	f04f 0400 	mov.w	r4, #0
   1dc14:	6384      	str	r4, [r0, #56]	; 0x38
   1dc16:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1dc1a:	d106      	bne.n	1dc2a <cc_mbedtls_aes_setkey_enc+0x22>
   1dc1c:	6304      	str	r4, [r0, #48]	; 0x30
   1dc1e:	2210      	movs	r2, #16
   1dc20:	3010      	adds	r0, #16
   1dc22:	f000 f9c7 	bl	1dfb4 <CC_PalMemCopyPlat>
   1dc26:	4620      	mov	r0, r4
   1dc28:	bd10      	pop	{r4, pc}
   1dc2a:	f06f 001f 	mvn.w	r0, #31
   1dc2e:	bd10      	pop	{r4, pc}
   1dc30:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dc34:	4770      	bx	lr
   1dc36:	f06f 001f 	mvn.w	r0, #31
   1dc3a:	4770      	bx	lr

0001dc3c <cc_mbedtls_aes_crypt_ecb>:
   1dc3c:	b320      	cbz	r0, 1dc88 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1dc3e:	b31a      	cbz	r2, 1dc88 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1dc40:	b313      	cbz	r3, 1dc88 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1dc42:	2901      	cmp	r1, #1
   1dc44:	d820      	bhi.n	1dc88 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1dc46:	b570      	push	{r4, r5, r6, lr}
   1dc48:	4604      	mov	r4, r0
   1dc4a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1dc4c:	b086      	sub	sp, #24
   1dc4e:	d016      	beq.n	1dc7e <cc_mbedtls_aes_crypt_ecb+0x42>
   1dc50:	2901      	cmp	r1, #1
   1dc52:	d116      	bne.n	1dc82 <cc_mbedtls_aes_crypt_ecb+0x46>
   1dc54:	2100      	movs	r1, #0
   1dc56:	2510      	movs	r5, #16
   1dc58:	ae04      	add	r6, sp, #16
   1dc5a:	6361      	str	r1, [r4, #52]	; 0x34
   1dc5c:	4610      	mov	r0, r2
   1dc5e:	e9cd 5600 	strd	r5, r6, [sp]
   1dc62:	aa02      	add	r2, sp, #8
   1dc64:	4629      	mov	r1, r5
   1dc66:	f000 fa4d 	bl	1e104 <SetDataBuffersInfo>
   1dc6a:	b950      	cbnz	r0, 1dc82 <cc_mbedtls_aes_crypt_ecb+0x46>
   1dc6c:	462b      	mov	r3, r5
   1dc6e:	4632      	mov	r2, r6
   1dc70:	a902      	add	r1, sp, #8
   1dc72:	4620      	mov	r0, r4
   1dc74:	f000 fcda 	bl	1e62c <ProcessAesDrv>
   1dc78:	b918      	cbnz	r0, 1dc82 <cc_mbedtls_aes_crypt_ecb+0x46>
   1dc7a:	b006      	add	sp, #24
   1dc7c:	bd70      	pop	{r4, r5, r6, pc}
   1dc7e:	2900      	cmp	r1, #0
   1dc80:	d0e8      	beq.n	1dc54 <cc_mbedtls_aes_crypt_ecb+0x18>
   1dc82:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dc86:	e7f8      	b.n	1dc7a <cc_mbedtls_aes_crypt_ecb+0x3e>
   1dc88:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dc8c:	4770      	bx	lr
   1dc8e:	bf00      	nop

0001dc90 <cc_mbedtls_sha256_init>:
   1dc90:	b510      	push	{r4, lr}
   1dc92:	4604      	mov	r4, r0
   1dc94:	b128      	cbz	r0, 1dca2 <cc_mbedtls_sha256_init+0x12>
   1dc96:	4620      	mov	r0, r4
   1dc98:	21f0      	movs	r1, #240	; 0xf0
   1dc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dc9e:	f000 b98d 	b.w	1dfbc <CC_PalMemSetZeroPlat>
   1dca2:	4804      	ldr	r0, [pc, #16]	; (1dcb4 <cc_mbedtls_sha256_init+0x24>)
   1dca4:	f7fe fc84 	bl	1c5b0 <CC_PalAbort>
   1dca8:	4620      	mov	r0, r4
   1dcaa:	21f0      	movs	r1, #240	; 0xf0
   1dcac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dcb0:	f000 b984 	b.w	1dfbc <CC_PalMemSetZeroPlat>
   1dcb4:	0002729c 	.word	0x0002729c

0001dcb8 <cc_mbedtls_sha256_free>:
   1dcb8:	b110      	cbz	r0, 1dcc0 <cc_mbedtls_sha256_free+0x8>
   1dcba:	21f0      	movs	r1, #240	; 0xf0
   1dcbc:	f7fe bd80 	b.w	1c7c0 <mbedtls_zeroize_internal>
   1dcc0:	4770      	bx	lr
   1dcc2:	bf00      	nop

0001dcc4 <cc_mbedtls_sha256_starts>:
   1dcc4:	b508      	push	{r3, lr}
   1dcc6:	b161      	cbz	r1, 1dce2 <cc_mbedtls_sha256_starts+0x1e>
   1dcc8:	2901      	cmp	r1, #1
   1dcca:	d107      	bne.n	1dcdc <cc_mbedtls_sha256_starts+0x18>
   1dccc:	2102      	movs	r1, #2
   1dcce:	f000 f85b 	bl	1dd88 <mbedtls_sha_starts_internal>
   1dcd2:	2800      	cmp	r0, #0
   1dcd4:	bf18      	it	ne
   1dcd6:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1dcda:	bd08      	pop	{r3, pc}
   1dcdc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1dce0:	bd08      	pop	{r3, pc}
   1dce2:	2101      	movs	r1, #1
   1dce4:	f000 f850 	bl	1dd88 <mbedtls_sha_starts_internal>
   1dce8:	e7f3      	b.n	1dcd2 <cc_mbedtls_sha256_starts+0xe>
   1dcea:	bf00      	nop

0001dcec <cc_mbedtls_sha256_update>:
   1dcec:	b570      	push	{r4, r5, r6, lr}
   1dcee:	188e      	adds	r6, r1, r2
   1dcf0:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   1dcf4:	b0a0      	sub	sp, #128	; 0x80
   1dcf6:	460b      	mov	r3, r1
   1dcf8:	4614      	mov	r4, r2
   1dcfa:	4605      	mov	r5, r0
   1dcfc:	d801      	bhi.n	1dd02 <cc_mbedtls_sha256_update+0x16>
   1dcfe:	2a80      	cmp	r2, #128	; 0x80
   1dd00:	d90c      	bls.n	1dd1c <cc_mbedtls_sha256_update+0x30>
   1dd02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dd06:	d917      	bls.n	1dd38 <cc_mbedtls_sha256_update+0x4c>
   1dd08:	4622      	mov	r2, r4
   1dd0a:	4619      	mov	r1, r3
   1dd0c:	4628      	mov	r0, r5
   1dd0e:	f000 f87d 	bl	1de0c <mbedtls_sha_update_internal>
   1dd12:	4604      	mov	r4, r0
   1dd14:	b984      	cbnz	r4, 1dd38 <cc_mbedtls_sha256_update+0x4c>
   1dd16:	4620      	mov	r0, r4
   1dd18:	b020      	add	sp, #128	; 0x80
   1dd1a:	bd70      	pop	{r4, r5, r6, pc}
   1dd1c:	4668      	mov	r0, sp
   1dd1e:	f000 f949 	bl	1dfb4 <CC_PalMemCopyPlat>
   1dd22:	4622      	mov	r2, r4
   1dd24:	4669      	mov	r1, sp
   1dd26:	4628      	mov	r0, r5
   1dd28:	f000 f870 	bl	1de0c <mbedtls_sha_update_internal>
   1dd2c:	2180      	movs	r1, #128	; 0x80
   1dd2e:	4604      	mov	r4, r0
   1dd30:	4668      	mov	r0, sp
   1dd32:	f000 f943 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1dd36:	e7ed      	b.n	1dd14 <cc_mbedtls_sha256_update+0x28>
   1dd38:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1dd3c:	e7eb      	b.n	1dd16 <cc_mbedtls_sha256_update+0x2a>
   1dd3e:	bf00      	nop

0001dd40 <cc_mbedtls_sha256_finish>:
   1dd40:	b570      	push	{r4, r5, r6, lr}
   1dd42:	b1e8      	cbz	r0, 1dd80 <cc_mbedtls_sha256_finish+0x40>
   1dd44:	460e      	mov	r6, r1
   1dd46:	b1d9      	cbz	r1, 1dd80 <cc_mbedtls_sha256_finish+0x40>
   1dd48:	4604      	mov	r4, r0
   1dd4a:	f000 f831 	bl	1ddb0 <mbedtls_sha_finish_internal>
   1dd4e:	4605      	mov	r5, r0
   1dd50:	b9b0      	cbnz	r0, 1dd80 <cc_mbedtls_sha256_finish+0x40>
   1dd52:	6823      	ldr	r3, [r4, #0]
   1dd54:	2b01      	cmp	r3, #1
   1dd56:	d00b      	beq.n	1dd70 <cc_mbedtls_sha256_finish+0x30>
   1dd58:	2b02      	cmp	r3, #2
   1dd5a:	d001      	beq.n	1dd60 <cc_mbedtls_sha256_finish+0x20>
   1dd5c:	4628      	mov	r0, r5
   1dd5e:	bd70      	pop	{r4, r5, r6, pc}
   1dd60:	f104 0108 	add.w	r1, r4, #8
   1dd64:	4630      	mov	r0, r6
   1dd66:	221c      	movs	r2, #28
   1dd68:	f000 f924 	bl	1dfb4 <CC_PalMemCopyPlat>
   1dd6c:	4628      	mov	r0, r5
   1dd6e:	bd70      	pop	{r4, r5, r6, pc}
   1dd70:	f104 0108 	add.w	r1, r4, #8
   1dd74:	4630      	mov	r0, r6
   1dd76:	2220      	movs	r2, #32
   1dd78:	f000 f91c 	bl	1dfb4 <CC_PalMemCopyPlat>
   1dd7c:	4628      	mov	r0, r5
   1dd7e:	bd70      	pop	{r4, r5, r6, pc}
   1dd80:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1dd84:	e7ea      	b.n	1dd5c <cc_mbedtls_sha256_finish+0x1c>
   1dd86:	bf00      	nop

0001dd88 <mbedtls_sha_starts_internal>:
   1dd88:	b178      	cbz	r0, 1ddaa <mbedtls_sha_starts_internal+0x22>
   1dd8a:	b538      	push	{r3, r4, r5, lr}
   1dd8c:	4604      	mov	r4, r0
   1dd8e:	460d      	mov	r5, r1
   1dd90:	21f0      	movs	r1, #240	; 0xf0
   1dd92:	f000 f913 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1dd96:	2340      	movs	r3, #64	; 0x40
   1dd98:	6025      	str	r5, [r4, #0]
   1dd9a:	65e3      	str	r3, [r4, #92]	; 0x5c
   1dd9c:	4620      	mov	r0, r4
   1dd9e:	f000 f9e5 	bl	1e16c <InitHashDrv>
   1dda2:	3800      	subs	r0, #0
   1dda4:	bf18      	it	ne
   1dda6:	2001      	movne	r0, #1
   1dda8:	bd38      	pop	{r3, r4, r5, pc}
   1ddaa:	2001      	movs	r0, #1
   1ddac:	4770      	bx	lr
   1ddae:	bf00      	nop

0001ddb0 <mbedtls_sha_finish_internal>:
   1ddb0:	b570      	push	{r4, r5, r6, lr}
   1ddb2:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1ddb4:	b0a4      	sub	sp, #144	; 0x90
   1ddb6:	4604      	mov	r4, r0
   1ddb8:	ae04      	add	r6, sp, #16
   1ddba:	b9e5      	cbnz	r5, 1ddf6 <mbedtls_sha_finish_internal+0x46>
   1ddbc:	2201      	movs	r2, #1
   1ddbe:	2300      	movs	r3, #0
   1ddc0:	6062      	str	r2, [r4, #4]
   1ddc2:	4630      	mov	r0, r6
   1ddc4:	e9cd 3300 	strd	r3, r3, [sp]
   1ddc8:	aa02      	add	r2, sp, #8
   1ddca:	4629      	mov	r1, r5
   1ddcc:	f000 f99a 	bl	1e104 <SetDataBuffersInfo>
   1ddd0:	b110      	cbz	r0, 1ddd8 <mbedtls_sha_finish_internal+0x28>
   1ddd2:	2001      	movs	r0, #1
   1ddd4:	b024      	add	sp, #144	; 0x90
   1ddd6:	bd70      	pop	{r4, r5, r6, pc}
   1ddd8:	462a      	mov	r2, r5
   1ddda:	a902      	add	r1, sp, #8
   1dddc:	4620      	mov	r0, r4
   1ddde:	f000 f9ef 	bl	1e1c0 <ProcessHashDrv>
   1dde2:	2800      	cmp	r0, #0
   1dde4:	d1f5      	bne.n	1ddd2 <mbedtls_sha_finish_internal+0x22>
   1dde6:	4620      	mov	r0, r4
   1dde8:	f000 fb18 	bl	1e41c <FinishHashDrv>
   1ddec:	2800      	cmp	r0, #0
   1ddee:	d1f0      	bne.n	1ddd2 <mbedtls_sha_finish_internal+0x22>
   1ddf0:	6620      	str	r0, [r4, #96]	; 0x60
   1ddf2:	b024      	add	sp, #144	; 0x90
   1ddf4:	bd70      	pop	{r4, r5, r6, pc}
   1ddf6:	2d80      	cmp	r5, #128	; 0x80
   1ddf8:	462a      	mov	r2, r5
   1ddfa:	4630      	mov	r0, r6
   1ddfc:	bf28      	it	cs
   1ddfe:	2280      	movcs	r2, #128	; 0x80
   1de00:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1de04:	f000 f8d6 	bl	1dfb4 <CC_PalMemCopyPlat>
   1de08:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1de0a:	e7d7      	b.n	1ddbc <mbedtls_sha_finish_internal+0xc>

0001de0c <mbedtls_sha_update_internal>:
   1de0c:	2800      	cmp	r0, #0
   1de0e:	d054      	beq.n	1deba <mbedtls_sha_update_internal+0xae>
   1de10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de12:	4614      	mov	r4, r2
   1de14:	b0a5      	sub	sp, #148	; 0x94
   1de16:	b1b2      	cbz	r2, 1de46 <mbedtls_sha_update_internal+0x3a>
   1de18:	460e      	mov	r6, r1
   1de1a:	b351      	cbz	r1, 1de72 <mbedtls_sha_update_internal+0x66>
   1de1c:	4605      	mov	r5, r0
   1de1e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1de22:	1a1a      	subs	r2, r3, r0
   1de24:	fbb2 f7f3 	udiv	r7, r2, r3
   1de28:	fb03 2717 	mls	r7, r3, r7, r2
   1de2c:	42a7      	cmp	r7, r4
   1de2e:	bf28      	it	cs
   1de30:	4627      	movcs	r7, r4
   1de32:	2f00      	cmp	r7, #0
   1de34:	d143      	bne.n	1debe <mbedtls_sha_update_internal+0xb2>
   1de36:	4283      	cmp	r3, r0
   1de38:	d008      	beq.n	1de4c <mbedtls_sha_update_internal+0x40>
   1de3a:	fbb4 f7f3 	udiv	r7, r4, r3
   1de3e:	fb03 f707 	mul.w	r7, r3, r7
   1de42:	b9cf      	cbnz	r7, 1de78 <mbedtls_sha_update_internal+0x6c>
   1de44:	bb6c      	cbnz	r4, 1dea2 <mbedtls_sha_update_internal+0x96>
   1de46:	2000      	movs	r0, #0
   1de48:	b025      	add	sp, #148	; 0x94
   1de4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de4c:	2b80      	cmp	r3, #128	; 0x80
   1de4e:	bf28      	it	cs
   1de50:	2380      	movcs	r3, #128	; 0x80
   1de52:	461a      	mov	r2, r3
   1de54:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1de58:	a804      	add	r0, sp, #16
   1de5a:	f000 f8ab 	bl	1dfb4 <CC_PalMemCopyPlat>
   1de5e:	2300      	movs	r3, #0
   1de60:	e9cd 3300 	strd	r3, r3, [sp]
   1de64:	a804      	add	r0, sp, #16
   1de66:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1de68:	aa02      	add	r2, sp, #8
   1de6a:	f000 f94b 	bl	1e104 <SetDataBuffersInfo>
   1de6e:	2800      	cmp	r0, #0
   1de70:	d032      	beq.n	1ded8 <mbedtls_sha_update_internal+0xcc>
   1de72:	2001      	movs	r0, #1
   1de74:	b025      	add	sp, #148	; 0x94
   1de76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de78:	2300      	movs	r3, #0
   1de7a:	e9cd 3300 	strd	r3, r3, [sp]
   1de7e:	aa02      	add	r2, sp, #8
   1de80:	4639      	mov	r1, r7
   1de82:	4630      	mov	r0, r6
   1de84:	f000 f93e 	bl	1e104 <SetDataBuffersInfo>
   1de88:	2800      	cmp	r0, #0
   1de8a:	d1f2      	bne.n	1de72 <mbedtls_sha_update_internal+0x66>
   1de8c:	a902      	add	r1, sp, #8
   1de8e:	463a      	mov	r2, r7
   1de90:	4628      	mov	r0, r5
   1de92:	f000 f995 	bl	1e1c0 <ProcessHashDrv>
   1de96:	2800      	cmp	r0, #0
   1de98:	d1eb      	bne.n	1de72 <mbedtls_sha_update_internal+0x66>
   1de9a:	1be4      	subs	r4, r4, r7
   1de9c:	443e      	add	r6, r7
   1de9e:	2c00      	cmp	r4, #0
   1dea0:	d0d1      	beq.n	1de46 <mbedtls_sha_update_internal+0x3a>
   1dea2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1dea4:	3019      	adds	r0, #25
   1dea6:	4622      	mov	r2, r4
   1dea8:	4631      	mov	r1, r6
   1deaa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1deae:	f000 f881 	bl	1dfb4 <CC_PalMemCopyPlat>
   1deb2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1deb4:	4422      	add	r2, r4
   1deb6:	662a      	str	r2, [r5, #96]	; 0x60
   1deb8:	e7c5      	b.n	1de46 <mbedtls_sha_update_internal+0x3a>
   1deba:	2001      	movs	r0, #1
   1debc:	4770      	bx	lr
   1debe:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1dec2:	4418      	add	r0, r3
   1dec4:	463a      	mov	r2, r7
   1dec6:	f000 f875 	bl	1dfb4 <CC_PalMemCopyPlat>
   1deca:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1dece:	4438      	add	r0, r7
   1ded0:	443e      	add	r6, r7
   1ded2:	1be4      	subs	r4, r4, r7
   1ded4:	6628      	str	r0, [r5, #96]	; 0x60
   1ded6:	e7ae      	b.n	1de36 <mbedtls_sha_update_internal+0x2a>
   1ded8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1deda:	a902      	add	r1, sp, #8
   1dedc:	4628      	mov	r0, r5
   1dede:	f000 f96f 	bl	1e1c0 <ProcessHashDrv>
   1dee2:	2800      	cmp	r0, #0
   1dee4:	d1c5      	bne.n	1de72 <mbedtls_sha_update_internal+0x66>
   1dee6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1dee8:	6628      	str	r0, [r5, #96]	; 0x60
   1deea:	e7a6      	b.n	1de3a <mbedtls_sha_update_internal+0x2e>

0001deec <cc_mbedtls_sha256>:
   1deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deee:	461c      	mov	r4, r3
   1def0:	4605      	mov	r5, r0
   1def2:	4811      	ldr	r0, [pc, #68]	; (1df38 <cc_mbedtls_sha256+0x4c>)
   1def4:	460e      	mov	r6, r1
   1def6:	4617      	mov	r7, r2
   1def8:	f7ff feca 	bl	1dc90 <cc_mbedtls_sha256_init>
   1defc:	4621      	mov	r1, r4
   1defe:	480e      	ldr	r0, [pc, #56]	; (1df38 <cc_mbedtls_sha256+0x4c>)
   1df00:	f7ff fee0 	bl	1dcc4 <cc_mbedtls_sha256_starts>
   1df04:	4604      	mov	r4, r0
   1df06:	b120      	cbz	r0, 1df12 <cc_mbedtls_sha256+0x26>
   1df08:	480b      	ldr	r0, [pc, #44]	; (1df38 <cc_mbedtls_sha256+0x4c>)
   1df0a:	f7ff fed5 	bl	1dcb8 <cc_mbedtls_sha256_free>
   1df0e:	4620      	mov	r0, r4
   1df10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df12:	4809      	ldr	r0, [pc, #36]	; (1df38 <cc_mbedtls_sha256+0x4c>)
   1df14:	4632      	mov	r2, r6
   1df16:	4629      	mov	r1, r5
   1df18:	f7ff fee8 	bl	1dcec <cc_mbedtls_sha256_update>
   1df1c:	4604      	mov	r4, r0
   1df1e:	2800      	cmp	r0, #0
   1df20:	d1f2      	bne.n	1df08 <cc_mbedtls_sha256+0x1c>
   1df22:	4639      	mov	r1, r7
   1df24:	4804      	ldr	r0, [pc, #16]	; (1df38 <cc_mbedtls_sha256+0x4c>)
   1df26:	f7ff ff0b 	bl	1dd40 <cc_mbedtls_sha256_finish>
   1df2a:	4604      	mov	r4, r0
   1df2c:	4802      	ldr	r0, [pc, #8]	; (1df38 <cc_mbedtls_sha256+0x4c>)
   1df2e:	f7ff fec3 	bl	1dcb8 <cc_mbedtls_sha256_free>
   1df32:	4620      	mov	r0, r4
   1df34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df36:	bf00      	nop
   1df38:	20003e74 	.word	0x20003e74

0001df3c <RNG_PLAT_SetUserRngParameters>:
   1df3c:	b530      	push	{r4, r5, lr}
   1df3e:	b083      	sub	sp, #12
   1df40:	231c      	movs	r3, #28
   1df42:	a901      	add	r1, sp, #4
   1df44:	4604      	mov	r4, r0
   1df46:	9301      	str	r3, [sp, #4]
   1df48:	f000 f83c 	bl	1dfc4 <CC_PalTrngParamGet>
   1df4c:	4605      	mov	r5, r0
   1df4e:	b938      	cbnz	r0, 1df60 <RNG_PLAT_SetUserRngParameters+0x24>
   1df50:	9b01      	ldr	r3, [sp, #4]
   1df52:	2b1c      	cmp	r3, #28
   1df54:	d007      	beq.n	1df66 <RNG_PLAT_SetUserRngParameters+0x2a>
   1df56:	4d15      	ldr	r5, [pc, #84]	; (1dfac <RNG_PLAT_SetUserRngParameters+0x70>)
   1df58:	4620      	mov	r0, r4
   1df5a:	211c      	movs	r1, #28
   1df5c:	f000 f82e 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1df60:	4628      	mov	r0, r5
   1df62:	b003      	add	sp, #12
   1df64:	bd30      	pop	{r4, r5, pc}
   1df66:	e9d4 3200 	ldrd	r3, r2, [r4]
   1df6a:	2101      	movs	r1, #1
   1df6c:	3b00      	subs	r3, #0
   1df6e:	bf18      	it	ne
   1df70:	2301      	movne	r3, #1
   1df72:	61e1      	str	r1, [r4, #28]
   1df74:	b10a      	cbz	r2, 1df7a <RNG_PLAT_SetUserRngParameters+0x3e>
   1df76:	f043 0302 	orr.w	r3, r3, #2
   1df7a:	68a2      	ldr	r2, [r4, #8]
   1df7c:	b932      	cbnz	r2, 1df8c <RNG_PLAT_SetUserRngParameters+0x50>
   1df7e:	68e2      	ldr	r2, [r4, #12]
   1df80:	b942      	cbnz	r2, 1df94 <RNG_PLAT_SetUserRngParameters+0x58>
   1df82:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1df86:	b97b      	cbnz	r3, 1dfa8 <RNG_PLAT_SetUserRngParameters+0x6c>
   1df88:	4d09      	ldr	r5, [pc, #36]	; (1dfb0 <RNG_PLAT_SetUserRngParameters+0x74>)
   1df8a:	e7e5      	b.n	1df58 <RNG_PLAT_SetUserRngParameters+0x1c>
   1df8c:	68e2      	ldr	r2, [r4, #12]
   1df8e:	f043 0304 	orr.w	r3, r3, #4
   1df92:	b13a      	cbz	r2, 1dfa4 <RNG_PLAT_SetUserRngParameters+0x68>
   1df94:	f043 0308 	orr.w	r3, r3, #8
   1df98:	2200      	movs	r2, #0
   1df9a:	4628      	mov	r0, r5
   1df9c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1dfa0:	b003      	add	sp, #12
   1dfa2:	bd30      	pop	{r4, r5, pc}
   1dfa4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1dfa8:	4615      	mov	r5, r2
   1dfaa:	e7d9      	b.n	1df60 <RNG_PLAT_SetUserRngParameters+0x24>
   1dfac:	00f00c37 	.word	0x00f00c37
   1dfb0:	00f00c0e 	.word	0x00f00c0e

0001dfb4 <CC_PalMemCopyPlat>:
   1dfb4:	f007 bbd8 	b.w	25768 <memmove>

0001dfb8 <CC_PalMemSetPlat>:
   1dfb8:	f007 bbf0 	b.w	2579c <memset>

0001dfbc <CC_PalMemSetZeroPlat>:
   1dfbc:	460a      	mov	r2, r1
   1dfbe:	2100      	movs	r1, #0
   1dfc0:	f007 bbec 	b.w	2579c <memset>

0001dfc4 <CC_PalTrngParamGet>:
   1dfc4:	b118      	cbz	r0, 1dfce <CC_PalTrngParamGet+0xa>
   1dfc6:	b111      	cbz	r1, 1dfce <CC_PalTrngParamGet+0xa>
   1dfc8:	680b      	ldr	r3, [r1, #0]
   1dfca:	2b1c      	cmp	r3, #28
   1dfcc:	d001      	beq.n	1dfd2 <CC_PalTrngParamGet+0xe>
   1dfce:	2001      	movs	r0, #1
   1dfd0:	4770      	bx	lr
   1dfd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dfd6:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1dfda:	3201      	adds	r2, #1
   1dfdc:	bf14      	ite	ne
   1dfde:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1dfe2:	f241 225c 	movweq	r2, #4700	; 0x125c
   1dfe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dfea:	6002      	str	r2, [r0, #0]
   1dfec:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1dff0:	3201      	adds	r2, #1
   1dff2:	bf14      	ite	ne
   1dff4:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1dff8:	f641 1264 	movweq	r2, #6500	; 0x1964
   1dffc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e000:	6042      	str	r2, [r0, #4]
   1e002:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1e006:	3201      	adds	r2, #1
   1e008:	bf14      	ite	ne
   1e00a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1e00e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1e012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e016:	6082      	str	r2, [r0, #8]
   1e018:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1e01c:	3201      	adds	r2, #1
   1e01e:	bf14      	ite	ne
   1e020:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1e024:	f241 3288 	movweq	r2, #5000	; 0x1388
   1e028:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e02c:	60c2      	str	r2, [r0, #12]
   1e02e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1e032:	3201      	adds	r2, #1
   1e034:	bf14      	ite	ne
   1e036:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1e03a:	2290      	moveq	r2, #144	; 0x90
   1e03c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e040:	6102      	str	r2, [r0, #16]
   1e042:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1e046:	3201      	adds	r2, #1
   1e048:	bf14      	ite	ne
   1e04a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1e04e:	2251      	moveq	r2, #81	; 0x51
   1e050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e054:	6142      	str	r2, [r0, #20]
   1e056:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1e05a:	3201      	adds	r2, #1
   1e05c:	bf14      	ite	ne
   1e05e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1e062:	f240 3337 	movweq	r3, #823	; 0x337
   1e066:	6183      	str	r3, [r0, #24]
   1e068:	2000      	movs	r0, #0
   1e06a:	4770      	bx	lr

0001e06c <LLF_RND_WaitRngInterrupt>:
   1e06c:	b508      	push	{r3, lr}
   1e06e:	4601      	mov	r1, r0
   1e070:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e074:	f7ff f95a 	bl	1d32c <CC_HalWaitInterruptRND>
   1e078:	4902      	ldr	r1, [pc, #8]	; (1e084 <LLF_RND_WaitRngInterrupt+0x18>)
   1e07a:	4a03      	ldr	r2, [pc, #12]	; (1e088 <LLF_RND_WaitRngInterrupt+0x1c>)
   1e07c:	2300      	movs	r3, #0
   1e07e:	600b      	str	r3, [r1, #0]
   1e080:	6013      	str	r3, [r2, #0]
   1e082:	bd08      	pop	{r3, pc}
   1e084:	5002b1c8 	.word	0x5002b1c8
   1e088:	5002b12c 	.word	0x5002b12c

0001e08c <LLF_RND_GetRoscSampleCnt>:
   1e08c:	3801      	subs	r0, #1
   1e08e:	2807      	cmp	r0, #7
   1e090:	d805      	bhi.n	1e09e <LLF_RND_GetRoscSampleCnt+0x12>
   1e092:	e8df f000 	tbb	[pc, r0]
   1e096:	0e0a      	.short	0x0e0a
   1e098:	04041204 	.word	0x04041204
   1e09c:	0604      	.short	0x0604
   1e09e:	4809      	ldr	r0, [pc, #36]	; (1e0c4 <LLF_RND_GetRoscSampleCnt+0x38>)
   1e0a0:	4770      	bx	lr
   1e0a2:	68cb      	ldr	r3, [r1, #12]
   1e0a4:	624b      	str	r3, [r1, #36]	; 0x24
   1e0a6:	2000      	movs	r0, #0
   1e0a8:	4770      	bx	lr
   1e0aa:	680b      	ldr	r3, [r1, #0]
   1e0ac:	624b      	str	r3, [r1, #36]	; 0x24
   1e0ae:	2000      	movs	r0, #0
   1e0b0:	4770      	bx	lr
   1e0b2:	684b      	ldr	r3, [r1, #4]
   1e0b4:	624b      	str	r3, [r1, #36]	; 0x24
   1e0b6:	2000      	movs	r0, #0
   1e0b8:	4770      	bx	lr
   1e0ba:	688b      	ldr	r3, [r1, #8]
   1e0bc:	624b      	str	r3, [r1, #36]	; 0x24
   1e0be:	2000      	movs	r0, #0
   1e0c0:	4770      	bx	lr
   1e0c2:	bf00      	nop
   1e0c4:	00f10c31 	.word	0x00f10c31

0001e0c8 <LLF_RND_GetFastestRosc>:
   1e0c8:	680b      	ldr	r3, [r1, #0]
   1e0ca:	e002      	b.n	1e0d2 <LLF_RND_GetFastestRosc+0xa>
   1e0cc:	2b08      	cmp	r3, #8
   1e0ce:	600b      	str	r3, [r1, #0]
   1e0d0:	d806      	bhi.n	1e0e0 <LLF_RND_GetFastestRosc+0x18>
   1e0d2:	6a02      	ldr	r2, [r0, #32]
   1e0d4:	4213      	tst	r3, r2
   1e0d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1e0da:	d0f7      	beq.n	1e0cc <LLF_RND_GetFastestRosc+0x4>
   1e0dc:	2000      	movs	r0, #0
   1e0de:	4770      	bx	lr
   1e0e0:	4800      	ldr	r0, [pc, #0]	; (1e0e4 <LLF_RND_GetFastestRosc+0x1c>)
   1e0e2:	4770      	bx	lr
   1e0e4:	00f10c31 	.word	0x00f10c31

0001e0e8 <LLF_RND_TurnOffTrng>:
   1e0e8:	4904      	ldr	r1, [pc, #16]	; (1e0fc <LLF_RND_TurnOffTrng+0x14>)
   1e0ea:	4a05      	ldr	r2, [pc, #20]	; (1e100 <LLF_RND_TurnOffTrng+0x18>)
   1e0ec:	2300      	movs	r3, #0
   1e0ee:	600b      	str	r3, [r1, #0]
   1e0f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e0f4:	6013      	str	r3, [r2, #0]
   1e0f6:	f7ff b8ff 	b.w	1d2f8 <CC_HalClearInterruptBit>
   1e0fa:	bf00      	nop
   1e0fc:	5002b12c 	.word	0x5002b12c
   1e100:	5002b1c4 	.word	0x5002b1c4

0001e104 <SetDataBuffersInfo>:
   1e104:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e106:	b083      	sub	sp, #12
   1e108:	2400      	movs	r4, #0
   1e10a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1e10e:	f88d 4007 	strb.w	r4, [sp, #7]
   1e112:	d325      	bcc.n	1e160 <SetDataBuffersInfo+0x5c>
   1e114:	460c      	mov	r4, r1
   1e116:	4404      	add	r4, r0
   1e118:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1e11c:	4605      	mov	r5, r0
   1e11e:	d81f      	bhi.n	1e160 <SetDataBuffersInfo+0x5c>
   1e120:	4617      	mov	r7, r2
   1e122:	461e      	mov	r6, r3
   1e124:	2201      	movs	r2, #1
   1e126:	f10d 0307 	add.w	r3, sp, #7
   1e12a:	f000 fe7f 	bl	1ee2c <CC_PalDataBufferAttrGet>
   1e12e:	4604      	mov	r4, r0
   1e130:	b9b0      	cbnz	r0, 1e160 <SetDataBuffersInfo+0x5c>
   1e132:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e134:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e138:	603d      	str	r5, [r7, #0]
   1e13a:	713b      	strb	r3, [r7, #4]
   1e13c:	b192      	cbz	r2, 1e164 <SetDataBuffersInfo+0x60>
   1e13e:	b14e      	cbz	r6, 1e154 <SetDataBuffersInfo+0x50>
   1e140:	4602      	mov	r2, r0
   1e142:	9908      	ldr	r1, [sp, #32]
   1e144:	f10d 0307 	add.w	r3, sp, #7
   1e148:	4630      	mov	r0, r6
   1e14a:	f000 fe6f 	bl	1ee2c <CC_PalDataBufferAttrGet>
   1e14e:	b938      	cbnz	r0, 1e160 <SetDataBuffersInfo+0x5c>
   1e150:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e154:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e156:	4620      	mov	r0, r4
   1e158:	6016      	str	r6, [r2, #0]
   1e15a:	7113      	strb	r3, [r2, #4]
   1e15c:	b003      	add	sp, #12
   1e15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e160:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1e164:	4620      	mov	r0, r4
   1e166:	b003      	add	sp, #12
   1e168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e16a:	bf00      	nop

0001e16c <InitHashDrv>:
   1e16c:	b1e8      	cbz	r0, 1e1aa <InitHashDrv+0x3e>
   1e16e:	b510      	push	{r4, lr}
   1e170:	6804      	ldr	r4, [r0, #0]
   1e172:	2c01      	cmp	r4, #1
   1e174:	d004      	beq.n	1e180 <InitHashDrv+0x14>
   1e176:	2c02      	cmp	r4, #2
   1e178:	d010      	beq.n	1e19c <InitHashDrv+0x30>
   1e17a:	b144      	cbz	r4, 1e18e <InitHashDrv+0x22>
   1e17c:	480c      	ldr	r0, [pc, #48]	; (1e1b0 <InitHashDrv+0x44>)
   1e17e:	bd10      	pop	{r4, pc}
   1e180:	490c      	ldr	r1, [pc, #48]	; (1e1b4 <InitHashDrv+0x48>)
   1e182:	2220      	movs	r2, #32
   1e184:	3008      	adds	r0, #8
   1e186:	f7ff ff15 	bl	1dfb4 <CC_PalMemCopyPlat>
   1e18a:	2000      	movs	r0, #0
   1e18c:	bd10      	pop	{r4, pc}
   1e18e:	490a      	ldr	r1, [pc, #40]	; (1e1b8 <InitHashDrv+0x4c>)
   1e190:	2214      	movs	r2, #20
   1e192:	3008      	adds	r0, #8
   1e194:	f7ff ff0e 	bl	1dfb4 <CC_PalMemCopyPlat>
   1e198:	4620      	mov	r0, r4
   1e19a:	bd10      	pop	{r4, pc}
   1e19c:	4907      	ldr	r1, [pc, #28]	; (1e1bc <InitHashDrv+0x50>)
   1e19e:	2220      	movs	r2, #32
   1e1a0:	3008      	adds	r0, #8
   1e1a2:	f7ff ff07 	bl	1dfb4 <CC_PalMemCopyPlat>
   1e1a6:	2000      	movs	r0, #0
   1e1a8:	bd10      	pop	{r4, pc}
   1e1aa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e1ae:	4770      	bx	lr
   1e1b0:	00f30001 	.word	0x00f30001
   1e1b4:	000272e0 	.word	0x000272e0
   1e1b8:	000272ac 	.word	0x000272ac
   1e1bc:	000272c0 	.word	0x000272c0

0001e1c0 <ProcessHashDrv>:
   1e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1c4:	2900      	cmp	r1, #0
   1e1c6:	f000 80ef 	beq.w	1e3a8 <ProcessHashDrv+0x1e8>
   1e1ca:	4604      	mov	r4, r0
   1e1cc:	2800      	cmp	r0, #0
   1e1ce:	f000 80ef 	beq.w	1e3b0 <ProcessHashDrv+0x1f0>
   1e1d2:	6803      	ldr	r3, [r0, #0]
   1e1d4:	4617      	mov	r7, r2
   1e1d6:	460e      	mov	r6, r1
   1e1d8:	2b00      	cmp	r3, #0
   1e1da:	f000 80b9 	beq.w	1e350 <ProcessHashDrv+0x190>
   1e1de:	3b01      	subs	r3, #1
   1e1e0:	2b01      	cmp	r3, #1
   1e1e2:	f200 80cd 	bhi.w	1e380 <ProcessHashDrv+0x1c0>
   1e1e6:	4874      	ldr	r0, [pc, #464]	; (1e3b8 <ProcessHashDrv+0x1f8>)
   1e1e8:	f04f 31ff 	mov.w	r1, #4294967295
   1e1ec:	f04f 0802 	mov.w	r8, #2
   1e1f0:	f7ff f92a 	bl	1d448 <CC_PalMutexLock>
   1e1f4:	2800      	cmp	r0, #0
   1e1f6:	f040 80b5 	bne.w	1e364 <ProcessHashDrv+0x1a4>
   1e1fa:	2000      	movs	r0, #0
   1e1fc:	f7ff f954 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1e200:	4605      	mov	r5, r0
   1e202:	2800      	cmp	r0, #0
   1e204:	f040 80b8 	bne.w	1e378 <ProcessHashDrv+0x1b8>
   1e208:	4a6c      	ldr	r2, [pc, #432]	; (1e3bc <ProcessHashDrv+0x1fc>)
   1e20a:	6813      	ldr	r3, [r2, #0]
   1e20c:	2b00      	cmp	r3, #0
   1e20e:	d1fc      	bne.n	1e20a <ProcessHashDrv+0x4a>
   1e210:	486b      	ldr	r0, [pc, #428]	; (1e3c0 <ProcessHashDrv+0x200>)
   1e212:	6803      	ldr	r3, [r0, #0]
   1e214:	2b00      	cmp	r3, #0
   1e216:	d1fc      	bne.n	1e212 <ProcessHashDrv+0x52>
   1e218:	f04f 30ff 	mov.w	r0, #4294967295
   1e21c:	f7ff f86c 	bl	1d2f8 <CC_HalClearInterruptBit>
   1e220:	4b68      	ldr	r3, [pc, #416]	; (1e3c4 <ProcessHashDrv+0x204>)
   1e222:	6818      	ldr	r0, [r3, #0]
   1e224:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e228:	f7ff f874 	bl	1d314 <CC_HalMaskInterrupt>
   1e22c:	4866      	ldr	r0, [pc, #408]	; (1e3c8 <ProcessHashDrv+0x208>)
   1e22e:	4a67      	ldr	r2, [pc, #412]	; (1e3cc <ProcessHashDrv+0x20c>)
   1e230:	4967      	ldr	r1, [pc, #412]	; (1e3d0 <ProcessHashDrv+0x210>)
   1e232:	2301      	movs	r3, #1
   1e234:	6003      	str	r3, [r0, #0]
   1e236:	2007      	movs	r0, #7
   1e238:	6010      	str	r0, [r2, #0]
   1e23a:	600b      	str	r3, [r1, #0]
   1e23c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1e240:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e242:	6013      	str	r3, [r2, #0]
   1e244:	4b63      	ldr	r3, [pc, #396]	; (1e3d4 <ProcessHashDrv+0x214>)
   1e246:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1e248:	6051      	str	r1, [r2, #4]
   1e24a:	f8c3 8000 	str.w	r8, [r3]
   1e24e:	6823      	ldr	r3, [r4, #0]
   1e250:	b15b      	cbz	r3, 1e26a <ProcessHashDrv+0xaa>
   1e252:	3b01      	subs	r3, #1
   1e254:	2b01      	cmp	r3, #1
   1e256:	d817      	bhi.n	1e288 <ProcessHashDrv+0xc8>
   1e258:	4b5f      	ldr	r3, [pc, #380]	; (1e3d8 <ProcessHashDrv+0x218>)
   1e25a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e25c:	601a      	str	r2, [r3, #0]
   1e25e:	6a22      	ldr	r2, [r4, #32]
   1e260:	f843 2c04 	str.w	r2, [r3, #-4]
   1e264:	69e2      	ldr	r2, [r4, #28]
   1e266:	f843 2c08 	str.w	r2, [r3, #-8]
   1e26a:	4b5c      	ldr	r3, [pc, #368]	; (1e3dc <ProcessHashDrv+0x21c>)
   1e26c:	69a2      	ldr	r2, [r4, #24]
   1e26e:	601a      	str	r2, [r3, #0]
   1e270:	6962      	ldr	r2, [r4, #20]
   1e272:	f843 2c04 	str.w	r2, [r3, #-4]
   1e276:	6922      	ldr	r2, [r4, #16]
   1e278:	f843 2c08 	str.w	r2, [r3, #-8]
   1e27c:	68e2      	ldr	r2, [r4, #12]
   1e27e:	f843 2c0c 	str.w	r2, [r3, #-12]
   1e282:	68a2      	ldr	r2, [r4, #8]
   1e284:	f843 2c10 	str.w	r2, [r3, #-16]
   1e288:	4a55      	ldr	r2, [pc, #340]	; (1e3e0 <ProcessHashDrv+0x220>)
   1e28a:	6813      	ldr	r3, [r2, #0]
   1e28c:	2b00      	cmp	r3, #0
   1e28e:	d1fc      	bne.n	1e28a <ProcessHashDrv+0xca>
   1e290:	2f00      	cmp	r7, #0
   1e292:	d059      	beq.n	1e348 <ProcessHashDrv+0x188>
   1e294:	6863      	ldr	r3, [r4, #4]
   1e296:	2b01      	cmp	r3, #1
   1e298:	bf04      	itt	eq
   1e29a:	4a52      	ldreq	r2, [pc, #328]	; (1e3e4 <ProcessHashDrv+0x224>)
   1e29c:	6013      	streq	r3, [r2, #0]
   1e29e:	4a52      	ldr	r2, [pc, #328]	; (1e3e8 <ProcessHashDrv+0x228>)
   1e2a0:	4b52      	ldr	r3, [pc, #328]	; (1e3ec <ProcessHashDrv+0x22c>)
   1e2a2:	6831      	ldr	r1, [r6, #0]
   1e2a4:	6011      	str	r1, [r2, #0]
   1e2a6:	2040      	movs	r0, #64	; 0x40
   1e2a8:	601f      	str	r7, [r3, #0]
   1e2aa:	f7ff f839 	bl	1d320 <CC_HalWaitInterrupt>
   1e2ae:	4605      	mov	r5, r0
   1e2b0:	4a4b      	ldr	r2, [pc, #300]	; (1e3e0 <ProcessHashDrv+0x220>)
   1e2b2:	6813      	ldr	r3, [r2, #0]
   1e2b4:	2b00      	cmp	r3, #0
   1e2b6:	d1fc      	bne.n	1e2b2 <ProcessHashDrv+0xf2>
   1e2b8:	4a41      	ldr	r2, [pc, #260]	; (1e3c0 <ProcessHashDrv+0x200>)
   1e2ba:	6813      	ldr	r3, [r2, #0]
   1e2bc:	2b00      	cmp	r3, #0
   1e2be:	d1fc      	bne.n	1e2ba <ProcessHashDrv+0xfa>
   1e2c0:	6823      	ldr	r3, [r4, #0]
   1e2c2:	b15b      	cbz	r3, 1e2dc <ProcessHashDrv+0x11c>
   1e2c4:	3b01      	subs	r3, #1
   1e2c6:	2b01      	cmp	r3, #1
   1e2c8:	d817      	bhi.n	1e2fa <ProcessHashDrv+0x13a>
   1e2ca:	4a43      	ldr	r2, [pc, #268]	; (1e3d8 <ProcessHashDrv+0x218>)
   1e2cc:	4b48      	ldr	r3, [pc, #288]	; (1e3f0 <ProcessHashDrv+0x230>)
   1e2ce:	6812      	ldr	r2, [r2, #0]
   1e2d0:	6262      	str	r2, [r4, #36]	; 0x24
   1e2d2:	681a      	ldr	r2, [r3, #0]
   1e2d4:	6222      	str	r2, [r4, #32]
   1e2d6:	3b04      	subs	r3, #4
   1e2d8:	681b      	ldr	r3, [r3, #0]
   1e2da:	61e3      	str	r3, [r4, #28]
   1e2dc:	4a3f      	ldr	r2, [pc, #252]	; (1e3dc <ProcessHashDrv+0x21c>)
   1e2de:	4b45      	ldr	r3, [pc, #276]	; (1e3f4 <ProcessHashDrv+0x234>)
   1e2e0:	6812      	ldr	r2, [r2, #0]
   1e2e2:	61a2      	str	r2, [r4, #24]
   1e2e4:	681a      	ldr	r2, [r3, #0]
   1e2e6:	6162      	str	r2, [r4, #20]
   1e2e8:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1e2ec:	6122      	str	r2, [r4, #16]
   1e2ee:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1e2f2:	60e2      	str	r2, [r4, #12]
   1e2f4:	3b0c      	subs	r3, #12
   1e2f6:	681b      	ldr	r3, [r3, #0]
   1e2f8:	60a3      	str	r3, [r4, #8]
   1e2fa:	4b3f      	ldr	r3, [pc, #252]	; (1e3f8 <ProcessHashDrv+0x238>)
   1e2fc:	4a3f      	ldr	r2, [pc, #252]	; (1e3fc <ProcessHashDrv+0x23c>)
   1e2fe:	681b      	ldr	r3, [r3, #0]
   1e300:	64a3      	str	r3, [r4, #72]	; 0x48
   1e302:	6812      	ldr	r2, [r2, #0]
   1e304:	4b32      	ldr	r3, [pc, #200]	; (1e3d0 <ProcessHashDrv+0x210>)
   1e306:	64e2      	str	r2, [r4, #76]	; 0x4c
   1e308:	4836      	ldr	r0, [pc, #216]	; (1e3e4 <ProcessHashDrv+0x224>)
   1e30a:	493d      	ldr	r1, [pc, #244]	; (1e400 <ProcessHashDrv+0x240>)
   1e30c:	2201      	movs	r2, #1
   1e30e:	601a      	str	r2, [r3, #0]
   1e310:	2300      	movs	r3, #0
   1e312:	4a33      	ldr	r2, [pc, #204]	; (1e3e0 <ProcessHashDrv+0x220>)
   1e314:	6003      	str	r3, [r0, #0]
   1e316:	600b      	str	r3, [r1, #0]
   1e318:	6813      	ldr	r3, [r2, #0]
   1e31a:	2b00      	cmp	r3, #0
   1e31c:	d1fc      	bne.n	1e318 <ProcessHashDrv+0x158>
   1e31e:	4a2a      	ldr	r2, [pc, #168]	; (1e3c8 <ProcessHashDrv+0x208>)
   1e320:	6013      	str	r3, [r2, #0]
   1e322:	2d00      	cmp	r5, #0
   1e324:	d13a      	bne.n	1e39c <ProcessHashDrv+0x1dc>
   1e326:	4b27      	ldr	r3, [pc, #156]	; (1e3c4 <ProcessHashDrv+0x204>)
   1e328:	6818      	ldr	r0, [r3, #0]
   1e32a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e32e:	f7fe fff1 	bl	1d314 <CC_HalMaskInterrupt>
   1e332:	2001      	movs	r0, #1
   1e334:	f7ff f8b8 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1e338:	bb60      	cbnz	r0, 1e394 <ProcessHashDrv+0x1d4>
   1e33a:	481f      	ldr	r0, [pc, #124]	; (1e3b8 <ProcessHashDrv+0x1f8>)
   1e33c:	f7ff f88c 	bl	1d458 <CC_PalMutexUnlock>
   1e340:	bb10      	cbnz	r0, 1e388 <ProcessHashDrv+0x1c8>
   1e342:	4628      	mov	r0, r5
   1e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e348:	4b2d      	ldr	r3, [pc, #180]	; (1e400 <ProcessHashDrv+0x240>)
   1e34a:	2204      	movs	r2, #4
   1e34c:	601a      	str	r2, [r3, #0]
   1e34e:	e7af      	b.n	1e2b0 <ProcessHashDrv+0xf0>
   1e350:	4819      	ldr	r0, [pc, #100]	; (1e3b8 <ProcessHashDrv+0x1f8>)
   1e352:	f04f 31ff 	mov.w	r1, #4294967295
   1e356:	f04f 0801 	mov.w	r8, #1
   1e35a:	f7ff f875 	bl	1d448 <CC_PalMutexLock>
   1e35e:	2800      	cmp	r0, #0
   1e360:	f43f af4b 	beq.w	1e1fa <ProcessHashDrv+0x3a>
   1e364:	4827      	ldr	r0, [pc, #156]	; (1e404 <ProcessHashDrv+0x244>)
   1e366:	f7fe f923 	bl	1c5b0 <CC_PalAbort>
   1e36a:	2000      	movs	r0, #0
   1e36c:	f7ff f89c 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1e370:	4605      	mov	r5, r0
   1e372:	2800      	cmp	r0, #0
   1e374:	f43f af48 	beq.w	1e208 <ProcessHashDrv+0x48>
   1e378:	4823      	ldr	r0, [pc, #140]	; (1e408 <ProcessHashDrv+0x248>)
   1e37a:	f7fe f919 	bl	1c5b0 <CC_PalAbort>
   1e37e:	e743      	b.n	1e208 <ProcessHashDrv+0x48>
   1e380:	4d22      	ldr	r5, [pc, #136]	; (1e40c <ProcessHashDrv+0x24c>)
   1e382:	4628      	mov	r0, r5
   1e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e388:	4821      	ldr	r0, [pc, #132]	; (1e410 <ProcessHashDrv+0x250>)
   1e38a:	f7fe f911 	bl	1c5b0 <CC_PalAbort>
   1e38e:	4628      	mov	r0, r5
   1e390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e394:	481f      	ldr	r0, [pc, #124]	; (1e414 <ProcessHashDrv+0x254>)
   1e396:	f7fe f90b 	bl	1c5b0 <CC_PalAbort>
   1e39a:	e7ce      	b.n	1e33a <ProcessHashDrv+0x17a>
   1e39c:	f104 0008 	add.w	r0, r4, #8
   1e3a0:	2110      	movs	r1, #16
   1e3a2:	f7ff fe0b 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1e3a6:	e7be      	b.n	1e326 <ProcessHashDrv+0x166>
   1e3a8:	4d1b      	ldr	r5, [pc, #108]	; (1e418 <ProcessHashDrv+0x258>)
   1e3aa:	4628      	mov	r0, r5
   1e3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e3b0:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1e3b4:	e7c5      	b.n	1e342 <ProcessHashDrv+0x182>
   1e3b6:	bf00      	nop
   1e3b8:	200009e0 	.word	0x200009e0
   1e3bc:	5002b91c 	.word	0x5002b91c
   1e3c0:	5002bc20 	.word	0x5002bc20
   1e3c4:	5002ba04 	.word	0x5002ba04
   1e3c8:	5002b818 	.word	0x5002b818
   1e3cc:	5002b900 	.word	0x5002b900
   1e3d0:	5002b7c4 	.word	0x5002b7c4
   1e3d4:	5002b7c0 	.word	0x5002b7c0
   1e3d8:	5002b65c 	.word	0x5002b65c
   1e3dc:	5002b650 	.word	0x5002b650
   1e3e0:	5002b910 	.word	0x5002b910
   1e3e4:	5002b684 	.word	0x5002b684
   1e3e8:	5002bc28 	.word	0x5002bc28
   1e3ec:	5002bc2c 	.word	0x5002bc2c
   1e3f0:	5002b658 	.word	0x5002b658
   1e3f4:	5002b64c 	.word	0x5002b64c
   1e3f8:	5002b7cc 	.word	0x5002b7cc
   1e3fc:	5002b7d0 	.word	0x5002b7d0
   1e400:	5002b7c8 	.word	0x5002b7c8
   1e404:	000271e0 	.word	0x000271e0
   1e408:	000271f8 	.word	0x000271f8
   1e40c:	00f30001 	.word	0x00f30001
   1e410:	00027238 	.word	0x00027238
   1e414:	00027218 	.word	0x00027218
   1e418:	00f30003 	.word	0x00f30003

0001e41c <FinishHashDrv>:
   1e41c:	2800      	cmp	r0, #0
   1e41e:	d03b      	beq.n	1e498 <FinishHashDrv+0x7c>
   1e420:	b4f0      	push	{r4, r5, r6, r7}
   1e422:	b082      	sub	sp, #8
   1e424:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1e426:	9301      	str	r3, [sp, #4]
   1e428:	6883      	ldr	r3, [r0, #8]
   1e42a:	fa93 fc83 	rev.w	ip, r3
   1e42e:	9b01      	ldr	r3, [sp, #4]
   1e430:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1e434:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1e438:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1e43c:	ba1b      	rev	r3, r3
   1e43e:	6243      	str	r3, [r0, #36]	; 0x24
   1e440:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1e442:	9301      	str	r3, [sp, #4]
   1e444:	ba09      	rev	r1, r1
   1e446:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1e448:	61c1      	str	r1, [r0, #28]
   1e44a:	ba12      	rev	r2, r2
   1e44c:	6202      	str	r2, [r0, #32]
   1e44e:	ba3f      	rev	r7, r7
   1e450:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1e454:	ba36      	rev	r6, r6
   1e456:	ba2d      	rev	r5, r5
   1e458:	ba24      	rev	r4, r4
   1e45a:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1e45e:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1e462:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1e464:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1e466:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1e468:	6184      	str	r4, [r0, #24]
   1e46a:	fa93 fc83 	rev.w	ip, r3
   1e46e:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1e470:	9b01      	ldr	r3, [sp, #4]
   1e472:	ba3f      	rev	r7, r7
   1e474:	ba36      	rev	r6, r6
   1e476:	ba2d      	rev	r5, r5
   1e478:	ba24      	rev	r4, r4
   1e47a:	ba09      	rev	r1, r1
   1e47c:	ba12      	rev	r2, r2
   1e47e:	ba1b      	rev	r3, r3
   1e480:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1e484:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1e488:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e48c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e490:	2000      	movs	r0, #0
   1e492:	b002      	add	sp, #8
   1e494:	bcf0      	pop	{r4, r5, r6, r7}
   1e496:	4770      	bx	lr
   1e498:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e49c:	4770      	bx	lr
   1e49e:	bf00      	nop

0001e4a0 <LoadAesKey>:
   1e4a0:	2800      	cmp	r0, #0
   1e4a2:	d03b      	beq.n	1e51c <LoadAesKey+0x7c>
   1e4a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e4a8:	2b00      	cmp	r3, #0
   1e4aa:	d02c      	beq.n	1e506 <LoadAesKey+0x66>
   1e4ac:	2b03      	cmp	r3, #3
   1e4ae:	b510      	push	{r4, lr}
   1e4b0:	d00f      	beq.n	1e4d2 <LoadAesKey+0x32>
   1e4b2:	481c      	ldr	r0, [pc, #112]	; (1e524 <LoadAesKey+0x84>)
   1e4b4:	4c1c      	ldr	r4, [pc, #112]	; (1e528 <LoadAesKey+0x88>)
   1e4b6:	6822      	ldr	r2, [r4, #0]
   1e4b8:	4b1c      	ldr	r3, [pc, #112]	; (1e52c <LoadAesKey+0x8c>)
   1e4ba:	6812      	ldr	r2, [r2, #0]
   1e4bc:	601a      	str	r2, [r3, #0]
   1e4be:	6822      	ldr	r2, [r4, #0]
   1e4c0:	6852      	ldr	r2, [r2, #4]
   1e4c2:	605a      	str	r2, [r3, #4]
   1e4c4:	6822      	ldr	r2, [r4, #0]
   1e4c6:	6892      	ldr	r2, [r2, #8]
   1e4c8:	609a      	str	r2, [r3, #8]
   1e4ca:	6822      	ldr	r2, [r4, #0]
   1e4cc:	68d2      	ldr	r2, [r2, #12]
   1e4ce:	60da      	str	r2, [r3, #12]
   1e4d0:	bd10      	pop	{r4, pc}
   1e4d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e4d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e4d6:	4c14      	ldr	r4, [pc, #80]	; (1e528 <LoadAesKey+0x88>)
   1e4d8:	f000 fba4 	bl	1ec24 <kmu_validate_kdr_slot_and_size>
   1e4dc:	2800      	cmp	r0, #0
   1e4de:	d1ea      	bne.n	1e4b6 <LoadAesKey+0x16>
   1e4e0:	6821      	ldr	r1, [r4, #0]
   1e4e2:	4a12      	ldr	r2, [pc, #72]	; (1e52c <LoadAesKey+0x8c>)
   1e4e4:	6809      	ldr	r1, [r1, #0]
   1e4e6:	6011      	str	r1, [r2, #0]
   1e4e8:	6821      	ldr	r1, [r4, #0]
   1e4ea:	4b11      	ldr	r3, [pc, #68]	; (1e530 <LoadAesKey+0x90>)
   1e4ec:	6849      	ldr	r1, [r1, #4]
   1e4ee:	6019      	str	r1, [r3, #0]
   1e4f0:	6821      	ldr	r1, [r4, #0]
   1e4f2:	6889      	ldr	r1, [r1, #8]
   1e4f4:	6091      	str	r1, [r2, #8]
   1e4f6:	6822      	ldr	r2, [r4, #0]
   1e4f8:	68d2      	ldr	r2, [r2, #12]
   1e4fa:	609a      	str	r2, [r3, #8]
   1e4fc:	f000 fb9e 	bl	1ec3c <kmu_use_kdr_key>
   1e500:	2800      	cmp	r0, #0
   1e502:	d1d8      	bne.n	1e4b6 <LoadAesKey+0x16>
   1e504:	bd10      	pop	{r4, pc}
   1e506:	4a09      	ldr	r2, [pc, #36]	; (1e52c <LoadAesKey+0x8c>)
   1e508:	6901      	ldr	r1, [r0, #16]
   1e50a:	6011      	str	r1, [r2, #0]
   1e50c:	6941      	ldr	r1, [r0, #20]
   1e50e:	6051      	str	r1, [r2, #4]
   1e510:	6981      	ldr	r1, [r0, #24]
   1e512:	6091      	str	r1, [r2, #8]
   1e514:	69c1      	ldr	r1, [r0, #28]
   1e516:	60d1      	str	r1, [r2, #12]
   1e518:	4618      	mov	r0, r3
   1e51a:	4770      	bx	lr
   1e51c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1e520:	4770      	bx	lr
   1e522:	bf00      	nop
   1e524:	00f10009 	.word	0x00f10009
   1e528:	200009d0 	.word	0x200009d0
   1e52c:	5002b400 	.word	0x5002b400
   1e530:	5002b404 	.word	0x5002b404

0001e534 <InitAes.part.0>:
   1e534:	4a32      	ldr	r2, [pc, #200]	; (1e600 <InitAes.part.0+0xcc>)
   1e536:	b510      	push	{r4, lr}
   1e538:	4604      	mov	r4, r0
   1e53a:	6813      	ldr	r3, [r2, #0]
   1e53c:	2b00      	cmp	r3, #0
   1e53e:	d1fc      	bne.n	1e53a <InitAes.part.0+0x6>
   1e540:	4a30      	ldr	r2, [pc, #192]	; (1e604 <InitAes.part.0+0xd0>)
   1e542:	6813      	ldr	r3, [r2, #0]
   1e544:	2b00      	cmp	r3, #0
   1e546:	d1fc      	bne.n	1e542 <InitAes.part.0+0xe>
   1e548:	4a2f      	ldr	r2, [pc, #188]	; (1e608 <InitAes.part.0+0xd4>)
   1e54a:	6813      	ldr	r3, [r2, #0]
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d1fc      	bne.n	1e54a <InitAes.part.0+0x16>
   1e550:	4a2e      	ldr	r2, [pc, #184]	; (1e60c <InitAes.part.0+0xd8>)
   1e552:	6813      	ldr	r3, [r2, #0]
   1e554:	2b00      	cmp	r3, #0
   1e556:	d1fc      	bne.n	1e552 <InitAes.part.0+0x1e>
   1e558:	4a2d      	ldr	r2, [pc, #180]	; (1e610 <InitAes.part.0+0xdc>)
   1e55a:	6813      	ldr	r3, [r2, #0]
   1e55c:	2b00      	cmp	r3, #0
   1e55e:	d1fc      	bne.n	1e55a <InitAes.part.0+0x26>
   1e560:	4a2c      	ldr	r2, [pc, #176]	; (1e614 <InitAes.part.0+0xe0>)
   1e562:	6813      	ldr	r3, [r2, #0]
   1e564:	2b00      	cmp	r3, #0
   1e566:	d1fc      	bne.n	1e562 <InitAes.part.0+0x2e>
   1e568:	f04f 30ff 	mov.w	r0, #4294967295
   1e56c:	f7fe fec4 	bl	1d2f8 <CC_HalClearInterruptBit>
   1e570:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e572:	f023 0304 	bic.w	r3, r3, #4
   1e576:	2b03      	cmp	r3, #3
   1e578:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e57a:	d036      	beq.n	1e5ea <InitAes.part.0+0xb6>
   1e57c:	2b01      	cmp	r3, #1
   1e57e:	4b26      	ldr	r3, [pc, #152]	; (1e618 <InitAes.part.0+0xe4>)
   1e580:	6818      	ldr	r0, [r3, #0]
   1e582:	bf0c      	ite	eq
   1e584:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1e588:	f020 0020 	bicne.w	r0, r0, #32
   1e58c:	f7fe fec2 	bl	1d314 <CC_HalMaskInterrupt>
   1e590:	4b22      	ldr	r3, [pc, #136]	; (1e61c <InitAes.part.0+0xe8>)
   1e592:	4a1b      	ldr	r2, [pc, #108]	; (1e600 <InitAes.part.0+0xcc>)
   1e594:	2101      	movs	r1, #1
   1e596:	6019      	str	r1, [r3, #0]
   1e598:	6813      	ldr	r3, [r2, #0]
   1e59a:	2b00      	cmp	r3, #0
   1e59c:	d1fc      	bne.n	1e598 <InitAes.part.0+0x64>
   1e59e:	4a19      	ldr	r2, [pc, #100]	; (1e604 <InitAes.part.0+0xd0>)
   1e5a0:	6813      	ldr	r3, [r2, #0]
   1e5a2:	2b00      	cmp	r3, #0
   1e5a4:	d1fc      	bne.n	1e5a0 <InitAes.part.0+0x6c>
   1e5a6:	491e      	ldr	r1, [pc, #120]	; (1e620 <InitAes.part.0+0xec>)
   1e5a8:	4a15      	ldr	r2, [pc, #84]	; (1e600 <InitAes.part.0+0xcc>)
   1e5aa:	600b      	str	r3, [r1, #0]
   1e5ac:	6813      	ldr	r3, [r2, #0]
   1e5ae:	2b00      	cmp	r3, #0
   1e5b0:	d1fc      	bne.n	1e5ac <InitAes.part.0+0x78>
   1e5b2:	4a14      	ldr	r2, [pc, #80]	; (1e604 <InitAes.part.0+0xd0>)
   1e5b4:	6813      	ldr	r3, [r2, #0]
   1e5b6:	2b00      	cmp	r3, #0
   1e5b8:	d1fc      	bne.n	1e5b4 <InitAes.part.0+0x80>
   1e5ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e5bc:	f022 0104 	bic.w	r1, r2, #4
   1e5c0:	2903      	cmp	r1, #3
   1e5c2:	bf18      	it	ne
   1e5c4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1e5c6:	4917      	ldr	r1, [pc, #92]	; (1e624 <InitAes.part.0+0xf0>)
   1e5c8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1e5cc:	bf18      	it	ne
   1e5ce:	f003 0301 	andne.w	r3, r3, #1
   1e5d2:	f002 021c 	and.w	r2, r2, #28
   1e5d6:	4313      	orrs	r3, r2
   1e5d8:	600b      	str	r3, [r1, #0]
   1e5da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e5dc:	2b07      	cmp	r3, #7
   1e5de:	d102      	bne.n	1e5e6 <InitAes.part.0+0xb2>
   1e5e0:	4b11      	ldr	r3, [pc, #68]	; (1e628 <InitAes.part.0+0xf4>)
   1e5e2:	2201      	movs	r2, #1
   1e5e4:	601a      	str	r2, [r3, #0]
   1e5e6:	2000      	movs	r0, #0
   1e5e8:	bd10      	pop	{r4, pc}
   1e5ea:	2b01      	cmp	r3, #1
   1e5ec:	4b0a      	ldr	r3, [pc, #40]	; (1e618 <InitAes.part.0+0xe4>)
   1e5ee:	6818      	ldr	r0, [r3, #0]
   1e5f0:	bf0c      	ite	eq
   1e5f2:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1e5f6:	f020 0010 	bicne.w	r0, r0, #16
   1e5fa:	f7fe fe8b 	bl	1d314 <CC_HalMaskInterrupt>
   1e5fe:	e7c7      	b.n	1e590 <InitAes.part.0+0x5c>
   1e600:	5002b910 	.word	0x5002b910
   1e604:	5002b470 	.word	0x5002b470
   1e608:	5002bd20 	.word	0x5002bd20
   1e60c:	5002bc20 	.word	0x5002bc20
   1e610:	5002bd38 	.word	0x5002bd38
   1e614:	5002bc38 	.word	0x5002bc38
   1e618:	5002ba04 	.word	0x5002ba04
   1e61c:	5002b900 	.word	0x5002b900
   1e620:	5002b4bc 	.word	0x5002b4bc
   1e624:	5002b4c0 	.word	0x5002b4c0
   1e628:	5002b47c 	.word	0x5002b47c

0001e62c <ProcessAesDrv>:
   1e62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e630:	b087      	sub	sp, #28
   1e632:	2900      	cmp	r1, #0
   1e634:	f000 80a5 	beq.w	1e782 <ProcessAesDrv+0x156>
   1e638:	4616      	mov	r6, r2
   1e63a:	2a00      	cmp	r2, #0
   1e63c:	f000 80a1 	beq.w	1e782 <ProcessAesDrv+0x156>
   1e640:	4604      	mov	r4, r0
   1e642:	2800      	cmp	r0, #0
   1e644:	f000 813f 	beq.w	1e8c6 <ProcessAesDrv+0x29a>
   1e648:	461f      	mov	r7, r3
   1e64a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e64c:	460d      	mov	r5, r1
   1e64e:	2b00      	cmp	r3, #0
   1e650:	d150      	bne.n	1e6f4 <ProcessAesDrv+0xc8>
   1e652:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1e656:	d252      	bcs.n	1e6fe <ProcessAesDrv+0xd2>
   1e658:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1e65c:	2b04      	cmp	r3, #4
   1e65e:	f000 8109 	beq.w	1e874 <ProcessAesDrv+0x248>
   1e662:	f04f 0800 	mov.w	r8, #0
   1e666:	48aa      	ldr	r0, [pc, #680]	; (1e910 <ProcessAesDrv+0x2e4>)
   1e668:	f04f 31ff 	mov.w	r1, #4294967295
   1e66c:	f7fe feec 	bl	1d448 <CC_PalMutexLock>
   1e670:	2800      	cmp	r0, #0
   1e672:	f040 80de 	bne.w	1e832 <ProcessAesDrv+0x206>
   1e676:	2000      	movs	r0, #0
   1e678:	f7fe ff16 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1e67c:	2800      	cmp	r0, #0
   1e67e:	f040 80e1 	bne.w	1e844 <ProcessAesDrv+0x218>
   1e682:	4ba4      	ldr	r3, [pc, #656]	; (1e914 <ProcessAesDrv+0x2e8>)
   1e684:	4aa4      	ldr	r2, [pc, #656]	; (1e918 <ProcessAesDrv+0x2ec>)
   1e686:	2101      	movs	r1, #1
   1e688:	6019      	str	r1, [r3, #0]
   1e68a:	6813      	ldr	r3, [r2, #0]
   1e68c:	2b00      	cmp	r3, #0
   1e68e:	d1fc      	bne.n	1e68a <ProcessAesDrv+0x5e>
   1e690:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e692:	2b03      	cmp	r3, #3
   1e694:	dc39      	bgt.n	1e70a <ProcessAesDrv+0xde>
   1e696:	2b00      	cmp	r3, #0
   1e698:	da3a      	bge.n	1e710 <ProcessAesDrv+0xe4>
   1e69a:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1e964 <ProcessAesDrv+0x338>
   1e69e:	4a9e      	ldr	r2, [pc, #632]	; (1e918 <ProcessAesDrv+0x2ec>)
   1e6a0:	6813      	ldr	r3, [r2, #0]
   1e6a2:	2b00      	cmp	r3, #0
   1e6a4:	d1fc      	bne.n	1e6a0 <ProcessAesDrv+0x74>
   1e6a6:	f1b8 0f00 	cmp.w	r8, #0
   1e6aa:	f040 80da 	bne.w	1e862 <ProcessAesDrv+0x236>
   1e6ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e6b0:	f023 0304 	bic.w	r3, r3, #4
   1e6b4:	2b03      	cmp	r3, #3
   1e6b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e6b8:	d058      	beq.n	1e76c <ProcessAesDrv+0x140>
   1e6ba:	2b01      	cmp	r3, #1
   1e6bc:	4b97      	ldr	r3, [pc, #604]	; (1e91c <ProcessAesDrv+0x2f0>)
   1e6be:	6818      	ldr	r0, [r3, #0]
   1e6c0:	bf0c      	ite	eq
   1e6c2:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1e6c6:	f040 0020 	orrne.w	r0, r0, #32
   1e6ca:	f7fe fe23 	bl	1d314 <CC_HalMaskInterrupt>
   1e6ce:	4b91      	ldr	r3, [pc, #580]	; (1e914 <ProcessAesDrv+0x2e8>)
   1e6d0:	2200      	movs	r2, #0
   1e6d2:	601a      	str	r2, [r3, #0]
   1e6d4:	2001      	movs	r0, #1
   1e6d6:	f7fe fee7 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1e6da:	2800      	cmp	r0, #0
   1e6dc:	f040 80bd 	bne.w	1e85a <ProcessAesDrv+0x22e>
   1e6e0:	488b      	ldr	r0, [pc, #556]	; (1e910 <ProcessAesDrv+0x2e4>)
   1e6e2:	f7fe feb9 	bl	1d458 <CC_PalMutexUnlock>
   1e6e6:	2800      	cmp	r0, #0
   1e6e8:	f040 80b0 	bne.w	1e84c <ProcessAesDrv+0x220>
   1e6ec:	4648      	mov	r0, r9
   1e6ee:	b007      	add	sp, #28
   1e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6f4:	2b01      	cmp	r3, #1
   1e6f6:	d1af      	bne.n	1e658 <ProcessAesDrv+0x2c>
   1e6f8:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1e6fc:	d3ac      	bcc.n	1e658 <ProcessAesDrv+0x2c>
   1e6fe:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1e968 <ProcessAesDrv+0x33c>
   1e702:	4648      	mov	r0, r9
   1e704:	b007      	add	sp, #28
   1e706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e70a:	3b06      	subs	r3, #6
   1e70c:	2b01      	cmp	r3, #1
   1e70e:	d8c4      	bhi.n	1e69a <ProcessAesDrv+0x6e>
   1e710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e712:	2b01      	cmp	r3, #1
   1e714:	f200 80d4 	bhi.w	1e8c0 <ProcessAesDrv+0x294>
   1e718:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e71a:	2b01      	cmp	r3, #1
   1e71c:	d837      	bhi.n	1e78e <ProcessAesDrv+0x162>
   1e71e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e720:	2b01      	cmp	r3, #1
   1e722:	f200 8131 	bhi.w	1e988 <ProcessAesDrv+0x35c>
   1e726:	4620      	mov	r0, r4
   1e728:	f7ff ff04 	bl	1e534 <InitAes.part.0>
   1e72c:	4681      	mov	r9, r0
   1e72e:	2800      	cmp	r0, #0
   1e730:	d1b5      	bne.n	1e69e <ProcessAesDrv+0x72>
   1e732:	4620      	mov	r0, r4
   1e734:	f7ff feb4 	bl	1e4a0 <LoadAesKey>
   1e738:	4681      	mov	r9, r0
   1e73a:	2800      	cmp	r0, #0
   1e73c:	d1af      	bne.n	1e69e <ProcessAesDrv+0x72>
   1e73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e740:	2b07      	cmp	r3, #7
   1e742:	d8aa      	bhi.n	1e69a <ProcessAesDrv+0x6e>
   1e744:	a201      	add	r2, pc, #4	; (adr r2, 1e74c <ProcessAesDrv+0x120>)
   1e746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e74a:	bf00      	nop
   1e74c:	0001e7a9 	.word	0x0001e7a9
   1e750:	0001e795 	.word	0x0001e795
   1e754:	0001e905 	.word	0x0001e905
   1e758:	0001e795 	.word	0x0001e795
   1e75c:	0001e69b 	.word	0x0001e69b
   1e760:	0001e69b 	.word	0x0001e69b
   1e764:	0001e905 	.word	0x0001e905
   1e768:	0001e795 	.word	0x0001e795
   1e76c:	2b01      	cmp	r3, #1
   1e76e:	4b6b      	ldr	r3, [pc, #428]	; (1e91c <ProcessAesDrv+0x2f0>)
   1e770:	6818      	ldr	r0, [r3, #0]
   1e772:	bf0c      	ite	eq
   1e774:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1e778:	f040 0010 	orrne.w	r0, r0, #16
   1e77c:	f7fe fdca 	bl	1d314 <CC_HalMaskInterrupt>
   1e780:	e7a5      	b.n	1e6ce <ProcessAesDrv+0xa2>
   1e782:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1e96c <ProcessAesDrv+0x340>
   1e786:	4648      	mov	r0, r9
   1e788:	b007      	add	sp, #28
   1e78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e78e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1e970 <ProcessAesDrv+0x344>
   1e792:	e784      	b.n	1e69e <ProcessAesDrv+0x72>
   1e794:	4b62      	ldr	r3, [pc, #392]	; (1e920 <ProcessAesDrv+0x2f4>)
   1e796:	6822      	ldr	r2, [r4, #0]
   1e798:	601a      	str	r2, [r3, #0]
   1e79a:	6862      	ldr	r2, [r4, #4]
   1e79c:	605a      	str	r2, [r3, #4]
   1e79e:	68a2      	ldr	r2, [r4, #8]
   1e7a0:	609a      	str	r2, [r3, #8]
   1e7a2:	68e2      	ldr	r2, [r4, #12]
   1e7a4:	60da      	str	r2, [r3, #12]
   1e7a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e7a8:	682a      	ldr	r2, [r5, #0]
   1e7aa:	f023 0304 	bic.w	r3, r3, #4
   1e7ae:	2b03      	cmp	r3, #3
   1e7b0:	d009      	beq.n	1e7c6 <ProcessAesDrv+0x19a>
   1e7b2:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1e7b4:	6833      	ldr	r3, [r6, #0]
   1e7b6:	2901      	cmp	r1, #1
   1e7b8:	bf07      	ittee	eq
   1e7ba:	485a      	ldreq	r0, [pc, #360]	; (1e924 <ProcessAesDrv+0x2f8>)
   1e7bc:	495a      	ldreq	r1, [pc, #360]	; (1e928 <ProcessAesDrv+0x2fc>)
   1e7be:	485b      	ldrne	r0, [pc, #364]	; (1e92c <ProcessAesDrv+0x300>)
   1e7c0:	495b      	ldrne	r1, [pc, #364]	; (1e930 <ProcessAesDrv+0x304>)
   1e7c2:	6003      	str	r3, [r0, #0]
   1e7c4:	600f      	str	r7, [r1, #0]
   1e7c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e7c8:	2b01      	cmp	r3, #1
   1e7ca:	bf0b      	itete	eq
   1e7cc:	4b59      	ldreq	r3, [pc, #356]	; (1e934 <ProcessAesDrv+0x308>)
   1e7ce:	4b5a      	ldrne	r3, [pc, #360]	; (1e938 <ProcessAesDrv+0x30c>)
   1e7d0:	495a      	ldreq	r1, [pc, #360]	; (1e93c <ProcessAesDrv+0x310>)
   1e7d2:	495b      	ldrne	r1, [pc, #364]	; (1e940 <ProcessAesDrv+0x314>)
   1e7d4:	600a      	str	r2, [r1, #0]
   1e7d6:	601f      	str	r7, [r3, #0]
   1e7d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e7da:	f023 0304 	bic.w	r3, r3, #4
   1e7de:	2b03      	cmp	r3, #3
   1e7e0:	d074      	beq.n	1e8cc <ProcessAesDrv+0x2a0>
   1e7e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e7e4:	2b01      	cmp	r3, #1
   1e7e6:	bf0c      	ite	eq
   1e7e8:	2080      	moveq	r0, #128	; 0x80
   1e7ea:	2020      	movne	r0, #32
   1e7ec:	f7fe fd98 	bl	1d320 <CC_HalWaitInterrupt>
   1e7f0:	4681      	mov	r9, r0
   1e7f2:	2800      	cmp	r0, #0
   1e7f4:	f47f af53 	bne.w	1e69e <ProcessAesDrv+0x72>
   1e7f8:	4b47      	ldr	r3, [pc, #284]	; (1e918 <ProcessAesDrv+0x2ec>)
   1e7fa:	681a      	ldr	r2, [r3, #0]
   1e7fc:	2a00      	cmp	r2, #0
   1e7fe:	d1fc      	bne.n	1e7fa <ProcessAesDrv+0x1ce>
   1e800:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e802:	3b01      	subs	r3, #1
   1e804:	4691      	mov	r9, r2
   1e806:	2b06      	cmp	r3, #6
   1e808:	d810      	bhi.n	1e82c <ProcessAesDrv+0x200>
   1e80a:	e8df f003 	tbb	[pc, r3]
   1e80e:	7d04      	.short	0x7d04
   1e810:	7d0f0f04 	.word	0x7d0f0f04
   1e814:	04          	.byte	0x04
   1e815:	00          	.byte	0x00
   1e816:	4a42      	ldr	r2, [pc, #264]	; (1e920 <ProcessAesDrv+0x2f4>)
   1e818:	4b4a      	ldr	r3, [pc, #296]	; (1e944 <ProcessAesDrv+0x318>)
   1e81a:	6812      	ldr	r2, [r2, #0]
   1e81c:	6022      	str	r2, [r4, #0]
   1e81e:	681a      	ldr	r2, [r3, #0]
   1e820:	6062      	str	r2, [r4, #4]
   1e822:	685a      	ldr	r2, [r3, #4]
   1e824:	60a2      	str	r2, [r4, #8]
   1e826:	3308      	adds	r3, #8
   1e828:	681b      	ldr	r3, [r3, #0]
   1e82a:	60e3      	str	r3, [r4, #12]
   1e82c:	2301      	movs	r3, #1
   1e82e:	65a3      	str	r3, [r4, #88]	; 0x58
   1e830:	e735      	b.n	1e69e <ProcessAesDrv+0x72>
   1e832:	4845      	ldr	r0, [pc, #276]	; (1e948 <ProcessAesDrv+0x31c>)
   1e834:	f7fd febc 	bl	1c5b0 <CC_PalAbort>
   1e838:	2000      	movs	r0, #0
   1e83a:	f7fe fe35 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1e83e:	2800      	cmp	r0, #0
   1e840:	f43f af1f 	beq.w	1e682 <ProcessAesDrv+0x56>
   1e844:	4841      	ldr	r0, [pc, #260]	; (1e94c <ProcessAesDrv+0x320>)
   1e846:	f7fd feb3 	bl	1c5b0 <CC_PalAbort>
   1e84a:	e71a      	b.n	1e682 <ProcessAesDrv+0x56>
   1e84c:	4840      	ldr	r0, [pc, #256]	; (1e950 <ProcessAesDrv+0x324>)
   1e84e:	f7fd feaf 	bl	1c5b0 <CC_PalAbort>
   1e852:	4648      	mov	r0, r9
   1e854:	b007      	add	sp, #28
   1e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e85a:	483e      	ldr	r0, [pc, #248]	; (1e954 <ProcessAesDrv+0x328>)
   1e85c:	f7fd fea8 	bl	1c5b0 <CC_PalAbort>
   1e860:	e73e      	b.n	1e6e0 <ProcessAesDrv+0xb4>
   1e862:	2304      	movs	r3, #4
   1e864:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1e868:	2120      	movs	r1, #32
   1e86a:	f104 0010 	add.w	r0, r4, #16
   1e86e:	f7ff fba5 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1e872:	e71c      	b.n	1e6ae <ProcessAesDrv+0x82>
   1e874:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e876:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1e878:	f000 f9c8 	bl	1ec0c <kmu_validate_slot_and_size>
   1e87c:	b9e8      	cbnz	r0, 1e8ba <ProcessAesDrv+0x28e>
   1e87e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1e974 <ProcessAesDrv+0x348>
   1e882:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1e978 <ProcessAesDrv+0x34c>
   1e886:	f8d8 3000 	ldr.w	r3, [r8]
   1e88a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1e97c <ProcessAesDrv+0x350>
   1e88e:	681b      	ldr	r3, [r3, #0]
   1e890:	f8cb 3000 	str.w	r3, [fp]
   1e894:	f8d8 3000 	ldr.w	r3, [r8]
   1e898:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1e980 <ProcessAesDrv+0x354>
   1e89c:	685b      	ldr	r3, [r3, #4]
   1e89e:	f8ca 3000 	str.w	r3, [sl]
   1e8a2:	f8d8 3000 	ldr.w	r3, [r8]
   1e8a6:	4a2c      	ldr	r2, [pc, #176]	; (1e958 <ProcessAesDrv+0x32c>)
   1e8a8:	689b      	ldr	r3, [r3, #8]
   1e8aa:	f8c9 3000 	str.w	r3, [r9]
   1e8ae:	f8d8 3000 	ldr.w	r3, [r8]
   1e8b2:	68db      	ldr	r3, [r3, #12]
   1e8b4:	6013      	str	r3, [r2, #0]
   1e8b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e8b8:	b171      	cbz	r1, 1e8d8 <ProcessAesDrv+0x2ac>
   1e8ba:	f04f 0801 	mov.w	r8, #1
   1e8be:	e6d2      	b.n	1e666 <ProcessAesDrv+0x3a>
   1e8c0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1e984 <ProcessAesDrv+0x358>
   1e8c4:	e6eb      	b.n	1e69e <ProcessAesDrv+0x72>
   1e8c6:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1e8ca:	e70f      	b.n	1e6ec <ProcessAesDrv+0xc0>
   1e8cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e8ce:	2b01      	cmp	r3, #1
   1e8d0:	bf0c      	ite	eq
   1e8d2:	2040      	moveq	r0, #64	; 0x40
   1e8d4:	2010      	movne	r0, #16
   1e8d6:	e789      	b.n	1e7ec <ProcessAesDrv+0x1c0>
   1e8d8:	f104 0310 	add.w	r3, r4, #16
   1e8dc:	4618      	mov	r0, r3
   1e8de:	9305      	str	r3, [sp, #20]
   1e8e0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1e8e4:	e9cd 3200 	strd	r3, r2, [sp]
   1e8e8:	9002      	str	r0, [sp, #8]
   1e8ea:	2010      	movs	r0, #16
   1e8ec:	9003      	str	r0, [sp, #12]
   1e8ee:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1e8f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1e8f4:	f000 f9ae 	bl	1ec54 <kmu_derive_cmac>
   1e8f8:	2800      	cmp	r0, #0
   1e8fa:	d148      	bne.n	1e98e <ProcessAesDrv+0x362>
   1e8fc:	2300      	movs	r3, #0
   1e8fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1e902:	e7da      	b.n	1e8ba <ProcessAesDrv+0x28e>
   1e904:	4b15      	ldr	r3, [pc, #84]	; (1e95c <ProcessAesDrv+0x330>)
   1e906:	e746      	b.n	1e796 <ProcessAesDrv+0x16a>
   1e908:	4a14      	ldr	r2, [pc, #80]	; (1e95c <ProcessAesDrv+0x330>)
   1e90a:	4b15      	ldr	r3, [pc, #84]	; (1e960 <ProcessAesDrv+0x334>)
   1e90c:	e785      	b.n	1e81a <ProcessAesDrv+0x1ee>
   1e90e:	bf00      	nop
   1e910:	200009e0 	.word	0x200009e0
   1e914:	5002b810 	.word	0x5002b810
   1e918:	5002b910 	.word	0x5002b910
   1e91c:	5002ba04 	.word	0x5002ba04
   1e920:	5002b440 	.word	0x5002b440
   1e924:	5002bd28 	.word	0x5002bd28
   1e928:	5002bd2c 	.word	0x5002bd2c
   1e92c:	5002bd30 	.word	0x5002bd30
   1e930:	5002bd34 	.word	0x5002bd34
   1e934:	5002bc2c 	.word	0x5002bc2c
   1e938:	5002bc34 	.word	0x5002bc34
   1e93c:	5002bc28 	.word	0x5002bc28
   1e940:	5002bc30 	.word	0x5002bc30
   1e944:	5002b444 	.word	0x5002b444
   1e948:	000271e0 	.word	0x000271e0
   1e94c:	000271f8 	.word	0x000271f8
   1e950:	00027238 	.word	0x00027238
   1e954:	00027218 	.word	0x00027218
   1e958:	5002b40c 	.word	0x5002b40c
   1e95c:	5002b460 	.word	0x5002b460
   1e960:	5002b464 	.word	0x5002b464
   1e964:	00f10001 	.word	0x00f10001
   1e968:	00f10005 	.word	0x00f10005
   1e96c:	00f1000b 	.word	0x00f1000b
   1e970:	00f10003 	.word	0x00f10003
   1e974:	200009d0 	.word	0x200009d0
   1e978:	5002b400 	.word	0x5002b400
   1e97c:	5002b404 	.word	0x5002b404
   1e980:	5002b408 	.word	0x5002b408
   1e984:	00f10002 	.word	0x00f10002
   1e988:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1e9c4 <ProcessAesDrv+0x398>
   1e98c:	e687      	b.n	1e69e <ProcessAesDrv+0x72>
   1e98e:	f8d8 3000 	ldr.w	r3, [r8]
   1e992:	4a0b      	ldr	r2, [pc, #44]	; (1e9c0 <ProcessAesDrv+0x394>)
   1e994:	681b      	ldr	r3, [r3, #0]
   1e996:	f8cb 3000 	str.w	r3, [fp]
   1e99a:	f8d8 3000 	ldr.w	r3, [r8]
   1e99e:	685b      	ldr	r3, [r3, #4]
   1e9a0:	f8ca 3000 	str.w	r3, [sl]
   1e9a4:	f8d8 3000 	ldr.w	r3, [r8]
   1e9a8:	689b      	ldr	r3, [r3, #8]
   1e9aa:	f8c9 3000 	str.w	r3, [r9]
   1e9ae:	f8d8 3000 	ldr.w	r3, [r8]
   1e9b2:	68db      	ldr	r3, [r3, #12]
   1e9b4:	6013      	str	r3, [r2, #0]
   1e9b6:	9805      	ldr	r0, [sp, #20]
   1e9b8:	2110      	movs	r1, #16
   1e9ba:	f7ff faff 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1e9be:	e79d      	b.n	1e8fc <ProcessAesDrv+0x2d0>
   1e9c0:	5002b40c 	.word	0x5002b40c
   1e9c4:	00f10004 	.word	0x00f10004

0001e9c8 <FinishAesDrv>:
   1e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9cc:	b301      	cbz	r1, 1ea10 <FinishAesDrv+0x48>
   1e9ce:	b1fa      	cbz	r2, 1ea10 <FinishAesDrv+0x48>
   1e9d0:	4604      	mov	r4, r0
   1e9d2:	2800      	cmp	r0, #0
   1e9d4:	d07a      	beq.n	1eacc <FinishAesDrv+0x104>
   1e9d6:	461d      	mov	r5, r3
   1e9d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e9da:	2b07      	cmp	r3, #7
   1e9dc:	460e      	mov	r6, r1
   1e9de:	d01b      	beq.n	1ea18 <FinishAesDrv+0x50>
   1e9e0:	b95d      	cbnz	r5, 1e9fa <FinishAesDrv+0x32>
   1e9e2:	2b03      	cmp	r3, #3
   1e9e4:	d110      	bne.n	1ea08 <FinishAesDrv+0x40>
   1e9e6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1e9e8:	b973      	cbnz	r3, 1ea08 <FinishAesDrv+0x40>
   1e9ea:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1e9ee:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1e9f2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1e9f6:	600b      	str	r3, [r1, #0]
   1e9f8:	2510      	movs	r5, #16
   1e9fa:	462b      	mov	r3, r5
   1e9fc:	4631      	mov	r1, r6
   1e9fe:	4620      	mov	r0, r4
   1ea00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ea04:	f7ff be12 	b.w	1e62c <ProcessAesDrv>
   1ea08:	462f      	mov	r7, r5
   1ea0a:	4638      	mov	r0, r7
   1ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ea10:	4f66      	ldr	r7, [pc, #408]	; (1ebac <FinishAesDrv+0x1e4>)
   1ea12:	4638      	mov	r0, r7
   1ea14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ea18:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1ea1a:	2b00      	cmp	r3, #0
   1ea1c:	d159      	bne.n	1ead2 <FinishAesDrv+0x10a>
   1ea1e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1ea22:	d25b      	bcs.n	1eadc <FinishAesDrv+0x114>
   1ea24:	b915      	cbnz	r5, 1ea2c <FinishAesDrv+0x64>
   1ea26:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ea28:	2b00      	cmp	r3, #0
   1ea2a:	d157      	bne.n	1eadc <FinishAesDrv+0x114>
   1ea2c:	4860      	ldr	r0, [pc, #384]	; (1ebb0 <FinishAesDrv+0x1e8>)
   1ea2e:	f04f 31ff 	mov.w	r1, #4294967295
   1ea32:	f7fe fd09 	bl	1d448 <CC_PalMutexLock>
   1ea36:	2800      	cmp	r0, #0
   1ea38:	f040 8097 	bne.w	1eb6a <FinishAesDrv+0x1a2>
   1ea3c:	2000      	movs	r0, #0
   1ea3e:	f7fe fd33 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1ea42:	2800      	cmp	r0, #0
   1ea44:	f040 808d 	bne.w	1eb62 <FinishAesDrv+0x19a>
   1ea48:	4b5a      	ldr	r3, [pc, #360]	; (1ebb4 <FinishAesDrv+0x1ec>)
   1ea4a:	4a5b      	ldr	r2, [pc, #364]	; (1ebb8 <FinishAesDrv+0x1f0>)
   1ea4c:	2101      	movs	r1, #1
   1ea4e:	6019      	str	r1, [r3, #0]
   1ea50:	6813      	ldr	r3, [r2, #0]
   1ea52:	2b00      	cmp	r3, #0
   1ea54:	d1fc      	bne.n	1ea50 <FinishAesDrv+0x88>
   1ea56:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea58:	2b03      	cmp	r3, #3
   1ea5a:	dd20      	ble.n	1ea9e <FinishAesDrv+0xd6>
   1ea5c:	3b06      	subs	r3, #6
   1ea5e:	2b01      	cmp	r3, #1
   1ea60:	d81f      	bhi.n	1eaa2 <FinishAesDrv+0xda>
   1ea62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1ea64:	2b01      	cmp	r3, #1
   1ea66:	d83b      	bhi.n	1eae0 <FinishAesDrv+0x118>
   1ea68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ea6a:	2b01      	cmp	r3, #1
   1ea6c:	f200 8085 	bhi.w	1eb7a <FinishAesDrv+0x1b2>
   1ea70:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ea72:	2b01      	cmp	r3, #1
   1ea74:	f200 8083 	bhi.w	1eb7e <FinishAesDrv+0x1b6>
   1ea78:	4620      	mov	r0, r4
   1ea7a:	f7ff fd5b 	bl	1e534 <InitAes.part.0>
   1ea7e:	4607      	mov	r7, r0
   1ea80:	b980      	cbnz	r0, 1eaa4 <FinishAesDrv+0xdc>
   1ea82:	4620      	mov	r0, r4
   1ea84:	f7ff fd0c 	bl	1e4a0 <LoadAesKey>
   1ea88:	4607      	mov	r7, r0
   1ea8a:	b958      	cbnz	r0, 1eaa4 <FinishAesDrv+0xdc>
   1ea8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ea8e:	2b07      	cmp	r3, #7
   1ea90:	d807      	bhi.n	1eaa2 <FinishAesDrv+0xda>
   1ea92:	e8df f003 	tbb	[pc, r3]
   1ea96:	2730      	.short	0x2730
   1ea98:	06062755 	.word	0x06062755
   1ea9c:	2755      	.short	0x2755
   1ea9e:	2b00      	cmp	r3, #0
   1eaa0:	dadf      	bge.n	1ea62 <FinishAesDrv+0x9a>
   1eaa2:	4f46      	ldr	r7, [pc, #280]	; (1ebbc <FinishAesDrv+0x1f4>)
   1eaa4:	4a44      	ldr	r2, [pc, #272]	; (1ebb8 <FinishAesDrv+0x1f0>)
   1eaa6:	6813      	ldr	r3, [r2, #0]
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d1fc      	bne.n	1eaa6 <FinishAesDrv+0xde>
   1eaac:	4a41      	ldr	r2, [pc, #260]	; (1ebb4 <FinishAesDrv+0x1ec>)
   1eaae:	2001      	movs	r0, #1
   1eab0:	6013      	str	r3, [r2, #0]
   1eab2:	f7fe fcf9 	bl	1d4a8 <CC_PalPowerSaveModeSelect>
   1eab6:	2800      	cmp	r0, #0
   1eab8:	d15b      	bne.n	1eb72 <FinishAesDrv+0x1aa>
   1eaba:	483d      	ldr	r0, [pc, #244]	; (1ebb0 <FinishAesDrv+0x1e8>)
   1eabc:	f7fe fccc 	bl	1d458 <CC_PalMutexUnlock>
   1eac0:	2800      	cmp	r0, #0
   1eac2:	d0a2      	beq.n	1ea0a <FinishAesDrv+0x42>
   1eac4:	483e      	ldr	r0, [pc, #248]	; (1ebc0 <FinishAesDrv+0x1f8>)
   1eac6:	f7fd fd73 	bl	1c5b0 <CC_PalAbort>
   1eaca:	e79e      	b.n	1ea0a <FinishAesDrv+0x42>
   1eacc:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1ead0:	e79b      	b.n	1ea0a <FinishAesDrv+0x42>
   1ead2:	2b01      	cmp	r3, #1
   1ead4:	d1a6      	bne.n	1ea24 <FinishAesDrv+0x5c>
   1ead6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1eada:	d3a3      	bcc.n	1ea24 <FinishAesDrv+0x5c>
   1eadc:	4f39      	ldr	r7, [pc, #228]	; (1ebc4 <FinishAesDrv+0x1fc>)
   1eade:	e794      	b.n	1ea0a <FinishAesDrv+0x42>
   1eae0:	4f39      	ldr	r7, [pc, #228]	; (1ebc8 <FinishAesDrv+0x200>)
   1eae2:	e7df      	b.n	1eaa4 <FinishAesDrv+0xdc>
   1eae4:	4b39      	ldr	r3, [pc, #228]	; (1ebcc <FinishAesDrv+0x204>)
   1eae6:	6822      	ldr	r2, [r4, #0]
   1eae8:	601a      	str	r2, [r3, #0]
   1eaea:	6862      	ldr	r2, [r4, #4]
   1eaec:	605a      	str	r2, [r3, #4]
   1eaee:	68a2      	ldr	r2, [r4, #8]
   1eaf0:	609a      	str	r2, [r3, #8]
   1eaf2:	68e2      	ldr	r2, [r4, #12]
   1eaf4:	60da      	str	r2, [r3, #12]
   1eaf6:	4936      	ldr	r1, [pc, #216]	; (1ebd0 <FinishAesDrv+0x208>)
   1eaf8:	4a36      	ldr	r2, [pc, #216]	; (1ebd4 <FinishAesDrv+0x20c>)
   1eafa:	2301      	movs	r3, #1
   1eafc:	600b      	str	r3, [r1, #0]
   1eafe:	6015      	str	r5, [r2, #0]
   1eb00:	2d00      	cmp	r5, #0
   1eb02:	d13e      	bne.n	1eb82 <FinishAesDrv+0x1ba>
   1eb04:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1eb06:	b90a      	cbnz	r2, 1eb0c <FinishAesDrv+0x144>
   1eb08:	4a33      	ldr	r2, [pc, #204]	; (1ebd8 <FinishAesDrv+0x210>)
   1eb0a:	6013      	str	r3, [r2, #0]
   1eb0c:	4b2a      	ldr	r3, [pc, #168]	; (1ebb8 <FinishAesDrv+0x1f0>)
   1eb0e:	681f      	ldr	r7, [r3, #0]
   1eb10:	2f00      	cmp	r7, #0
   1eb12:	d1fc      	bne.n	1eb0e <FinishAesDrv+0x146>
   1eb14:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eb16:	3b01      	subs	r3, #1
   1eb18:	2b06      	cmp	r3, #6
   1eb1a:	d8c3      	bhi.n	1eaa4 <FinishAesDrv+0xdc>
   1eb1c:	a201      	add	r2, pc, #4	; (adr r2, 1eb24 <FinishAesDrv+0x15c>)
   1eb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1eb22:	bf00      	nop
   1eb24:	0001eb45 	.word	0x0001eb45
   1eb28:	0001eb5d 	.word	0x0001eb5d
   1eb2c:	0001eb45 	.word	0x0001eb45
   1eb30:	0001eaa5 	.word	0x0001eaa5
   1eb34:	0001eaa5 	.word	0x0001eaa5
   1eb38:	0001eb5d 	.word	0x0001eb5d
   1eb3c:	0001eb45 	.word	0x0001eb45
   1eb40:	4b26      	ldr	r3, [pc, #152]	; (1ebdc <FinishAesDrv+0x214>)
   1eb42:	e7d0      	b.n	1eae6 <FinishAesDrv+0x11e>
   1eb44:	4a21      	ldr	r2, [pc, #132]	; (1ebcc <FinishAesDrv+0x204>)
   1eb46:	4b26      	ldr	r3, [pc, #152]	; (1ebe0 <FinishAesDrv+0x218>)
   1eb48:	6812      	ldr	r2, [r2, #0]
   1eb4a:	6022      	str	r2, [r4, #0]
   1eb4c:	681a      	ldr	r2, [r3, #0]
   1eb4e:	6062      	str	r2, [r4, #4]
   1eb50:	685a      	ldr	r2, [r3, #4]
   1eb52:	60a2      	str	r2, [r4, #8]
   1eb54:	3308      	adds	r3, #8
   1eb56:	681b      	ldr	r3, [r3, #0]
   1eb58:	60e3      	str	r3, [r4, #12]
   1eb5a:	e7a3      	b.n	1eaa4 <FinishAesDrv+0xdc>
   1eb5c:	4a1f      	ldr	r2, [pc, #124]	; (1ebdc <FinishAesDrv+0x214>)
   1eb5e:	4b21      	ldr	r3, [pc, #132]	; (1ebe4 <FinishAesDrv+0x21c>)
   1eb60:	e7f2      	b.n	1eb48 <FinishAesDrv+0x180>
   1eb62:	4821      	ldr	r0, [pc, #132]	; (1ebe8 <FinishAesDrv+0x220>)
   1eb64:	f7fd fd24 	bl	1c5b0 <CC_PalAbort>
   1eb68:	e76e      	b.n	1ea48 <FinishAesDrv+0x80>
   1eb6a:	4820      	ldr	r0, [pc, #128]	; (1ebec <FinishAesDrv+0x224>)
   1eb6c:	f7fd fd20 	bl	1c5b0 <CC_PalAbort>
   1eb70:	e764      	b.n	1ea3c <FinishAesDrv+0x74>
   1eb72:	481f      	ldr	r0, [pc, #124]	; (1ebf0 <FinishAesDrv+0x228>)
   1eb74:	f7fd fd1c 	bl	1c5b0 <CC_PalAbort>
   1eb78:	e79f      	b.n	1eaba <FinishAesDrv+0xf2>
   1eb7a:	4f1e      	ldr	r7, [pc, #120]	; (1ebf4 <FinishAesDrv+0x22c>)
   1eb7c:	e792      	b.n	1eaa4 <FinishAesDrv+0xdc>
   1eb7e:	4f1e      	ldr	r7, [pc, #120]	; (1ebf8 <FinishAesDrv+0x230>)
   1eb80:	e790      	b.n	1eaa4 <FinishAesDrv+0xdc>
   1eb82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1eb84:	6833      	ldr	r3, [r6, #0]
   1eb86:	2a01      	cmp	r2, #1
   1eb88:	d00a      	beq.n	1eba0 <FinishAesDrv+0x1d8>
   1eb8a:	491c      	ldr	r1, [pc, #112]	; (1ebfc <FinishAesDrv+0x234>)
   1eb8c:	4a1c      	ldr	r2, [pc, #112]	; (1ec00 <FinishAesDrv+0x238>)
   1eb8e:	600b      	str	r3, [r1, #0]
   1eb90:	2010      	movs	r0, #16
   1eb92:	6015      	str	r5, [r2, #0]
   1eb94:	f7fe fbc4 	bl	1d320 <CC_HalWaitInterrupt>
   1eb98:	4607      	mov	r7, r0
   1eb9a:	2800      	cmp	r0, #0
   1eb9c:	d0b6      	beq.n	1eb0c <FinishAesDrv+0x144>
   1eb9e:	e781      	b.n	1eaa4 <FinishAesDrv+0xdc>
   1eba0:	4918      	ldr	r1, [pc, #96]	; (1ec04 <FinishAesDrv+0x23c>)
   1eba2:	4a19      	ldr	r2, [pc, #100]	; (1ec08 <FinishAesDrv+0x240>)
   1eba4:	600b      	str	r3, [r1, #0]
   1eba6:	2040      	movs	r0, #64	; 0x40
   1eba8:	6015      	str	r5, [r2, #0]
   1ebaa:	e7f3      	b.n	1eb94 <FinishAesDrv+0x1cc>
   1ebac:	00f1000b 	.word	0x00f1000b
   1ebb0:	200009e0 	.word	0x200009e0
   1ebb4:	5002b810 	.word	0x5002b810
   1ebb8:	5002b910 	.word	0x5002b910
   1ebbc:	00f10001 	.word	0x00f10001
   1ebc0:	00027238 	.word	0x00027238
   1ebc4:	00f10005 	.word	0x00f10005
   1ebc8:	00f10002 	.word	0x00f10002
   1ebcc:	5002b440 	.word	0x5002b440
   1ebd0:	5002b47c 	.word	0x5002b47c
   1ebd4:	5002b4bc 	.word	0x5002b4bc
   1ebd8:	5002b524 	.word	0x5002b524
   1ebdc:	5002b460 	.word	0x5002b460
   1ebe0:	5002b444 	.word	0x5002b444
   1ebe4:	5002b464 	.word	0x5002b464
   1ebe8:	000271f8 	.word	0x000271f8
   1ebec:	000271e0 	.word	0x000271e0
   1ebf0:	00027218 	.word	0x00027218
   1ebf4:	00f10003 	.word	0x00f10003
   1ebf8:	00f10004 	.word	0x00f10004
   1ebfc:	5002bc30 	.word	0x5002bc30
   1ec00:	5002bc34 	.word	0x5002bc34
   1ec04:	5002bc28 	.word	0x5002bc28
   1ec08:	5002bc2c 	.word	0x5002bc2c

0001ec0c <kmu_validate_slot_and_size>:
   1ec0c:	b921      	cbnz	r1, 1ec18 <kmu_validate_slot_and_size+0xc>
   1ec0e:	4b03      	ldr	r3, [pc, #12]	; (1ec1c <kmu_validate_slot_and_size+0x10>)
   1ec10:	2800      	cmp	r0, #0
   1ec12:	bf18      	it	ne
   1ec14:	4618      	movne	r0, r3
   1ec16:	4770      	bx	lr
   1ec18:	4801      	ldr	r0, [pc, #4]	; (1ec20 <kmu_validate_slot_and_size+0x14>)
   1ec1a:	4770      	bx	lr
   1ec1c:	00f70001 	.word	0x00f70001
   1ec20:	00f70003 	.word	0x00f70003

0001ec24 <kmu_validate_kdr_slot_and_size>:
   1ec24:	b921      	cbnz	r1, 1ec30 <kmu_validate_kdr_slot_and_size+0xc>
   1ec26:	4b03      	ldr	r3, [pc, #12]	; (1ec34 <kmu_validate_kdr_slot_and_size+0x10>)
   1ec28:	2800      	cmp	r0, #0
   1ec2a:	bf18      	it	ne
   1ec2c:	4618      	movne	r0, r3
   1ec2e:	4770      	bx	lr
   1ec30:	4801      	ldr	r0, [pc, #4]	; (1ec38 <kmu_validate_kdr_slot_and_size+0x14>)
   1ec32:	4770      	bx	lr
   1ec34:	00f70001 	.word	0x00f70001
   1ec38:	00f70003 	.word	0x00f70003

0001ec3c <kmu_use_kdr_key>:
   1ec3c:	4903      	ldr	r1, [pc, #12]	; (1ec4c <kmu_use_kdr_key+0x10>)
   1ec3e:	4b04      	ldr	r3, [pc, #16]	; (1ec50 <kmu_use_kdr_key+0x14>)
   1ec40:	2000      	movs	r0, #0
   1ec42:	2201      	movs	r2, #1
   1ec44:	6008      	str	r0, [r1, #0]
   1ec46:	601a      	str	r2, [r3, #0]
   1ec48:	4770      	bx	lr
   1ec4a:	bf00      	nop
   1ec4c:	5002ba38 	.word	0x5002ba38
   1ec50:	5002b478 	.word	0x5002b478

0001ec54 <kmu_derive_cmac>:
   1ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec58:	b0cd      	sub	sp, #308	; 0x134
   1ec5a:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1ec5e:	460f      	mov	r7, r1
   1ec60:	2100      	movs	r1, #0
   1ec62:	460c      	mov	r4, r1
   1ec64:	4681      	mov	r9, r0
   1ec66:	4616      	mov	r6, r2
   1ec68:	a80e      	add	r0, sp, #56	; 0x38
   1ec6a:	2274      	movs	r2, #116	; 0x74
   1ec6c:	469b      	mov	fp, r3
   1ec6e:	f006 fd95 	bl	2579c <memset>
   1ec72:	4621      	mov	r1, r4
   1ec74:	2280      	movs	r2, #128	; 0x80
   1ec76:	a82c      	add	r0, sp, #176	; 0xb0
   1ec78:	942b      	str	r4, [sp, #172]	; 0xac
   1ec7a:	f006 fd8f 	bl	2579c <memset>
   1ec7e:	2384      	movs	r3, #132	; 0x84
   1ec80:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1ec84:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1ec88:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1ec8c:	9305      	str	r3, [sp, #20]
   1ec8e:	d860      	bhi.n	1ed52 <kmu_derive_cmac+0xfe>
   1ec90:	ab05      	add	r3, sp, #20
   1ec92:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1ec96:	9301      	str	r3, [sp, #4]
   1ec98:	9502      	str	r5, [sp, #8]
   1ec9a:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1ec9e:	4659      	mov	r1, fp
   1eca0:	4630      	mov	r0, r6
   1eca2:	f8cd a000 	str.w	sl, [sp]
   1eca6:	f000 f865 	bl	1ed74 <UtilCmacBuildDataForDerivation>
   1ecaa:	2800      	cmp	r0, #0
   1ecac:	d14c      	bne.n	1ed48 <kmu_derive_cmac+0xf4>
   1ecae:	2303      	movs	r3, #3
   1ecb0:	f88d 3013 	strb.w	r3, [sp, #19]
   1ecb4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ecb8:	901c      	str	r0, [sp, #112]	; 0x70
   1ecba:	2200      	movs	r2, #0
   1ecbc:	2110      	movs	r1, #16
   1ecbe:	a80e      	add	r0, sp, #56	; 0x38
   1ecc0:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1ecc4:	2607      	movs	r6, #7
   1ecc6:	2301      	movs	r3, #1
   1ecc8:	2401      	movs	r4, #1
   1ecca:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1ecce:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1ecd2:	971a      	str	r7, [sp, #104]	; 0x68
   1ecd4:	961b      	str	r6, [sp, #108]	; 0x6c
   1ecd6:	9426      	str	r4, [sp, #152]	; 0x98
   1ecd8:	f10d 0920 	add.w	r9, sp, #32
   1ecdc:	f7ff f96e 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1ece0:	2110      	movs	r1, #16
   1ece2:	e9cd 1900 	strd	r1, r9, [sp]
   1ece6:	ab0a      	add	r3, sp, #40	; 0x28
   1ece8:	9905      	ldr	r1, [sp, #20]
   1ecea:	4650      	mov	r0, sl
   1ecec:	aa06      	add	r2, sp, #24
   1ecee:	f7ff fa09 	bl	1e104 <SetDataBuffersInfo>
   1ecf2:	4607      	mov	r7, r0
   1ecf4:	b150      	cbz	r0, 1ed0c <kmu_derive_cmac+0xb8>
   1ecf6:	e01e      	b.n	1ed36 <kmu_derive_cmac+0xe2>
   1ecf8:	f7ff f95c 	bl	1dfb4 <CC_PalMemCopyPlat>
   1ecfc:	2110      	movs	r1, #16
   1ecfe:	a80e      	add	r0, sp, #56	; 0x38
   1ed00:	f7ff f95c 	bl	1dfbc <CC_PalMemSetZeroPlat>
   1ed04:	3401      	adds	r4, #1
   1ed06:	1bad      	subs	r5, r5, r6
   1ed08:	b2e4      	uxtb	r4, r4
   1ed0a:	d027      	beq.n	1ed5c <kmu_derive_cmac+0x108>
   1ed0c:	9b05      	ldr	r3, [sp, #20]
   1ed0e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1ed12:	2d10      	cmp	r5, #16
   1ed14:	464a      	mov	r2, r9
   1ed16:	a906      	add	r1, sp, #24
   1ed18:	a80e      	add	r0, sp, #56	; 0x38
   1ed1a:	462e      	mov	r6, r5
   1ed1c:	bf28      	it	cs
   1ed1e:	2610      	movcs	r6, #16
   1ed20:	f7ff fe52 	bl	1e9c8 <FinishAesDrv>
   1ed24:	4603      	mov	r3, r0
   1ed26:	4632      	mov	r2, r6
   1ed28:	eb08 0007 	add.w	r0, r8, r7
   1ed2c:	a90e      	add	r1, sp, #56	; 0x38
   1ed2e:	4437      	add	r7, r6
   1ed30:	2b00      	cmp	r3, #0
   1ed32:	d0e1      	beq.n	1ecf8 <kmu_derive_cmac+0xa4>
   1ed34:	461f      	mov	r7, r3
   1ed36:	a80e      	add	r0, sp, #56	; 0x38
   1ed38:	2274      	movs	r2, #116	; 0x74
   1ed3a:	2100      	movs	r1, #0
   1ed3c:	f7ff f93c 	bl	1dfb8 <CC_PalMemSetPlat>
   1ed40:	4638      	mov	r0, r7
   1ed42:	b04d      	add	sp, #308	; 0x134
   1ed44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed48:	4f08      	ldr	r7, [pc, #32]	; (1ed6c <kmu_derive_cmac+0x118>)
   1ed4a:	4638      	mov	r0, r7
   1ed4c:	b04d      	add	sp, #308	; 0x134
   1ed4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed52:	4f07      	ldr	r7, [pc, #28]	; (1ed70 <kmu_derive_cmac+0x11c>)
   1ed54:	4638      	mov	r0, r7
   1ed56:	b04d      	add	sp, #308	; 0x134
   1ed58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed5c:	a80e      	add	r0, sp, #56	; 0x38
   1ed5e:	2274      	movs	r2, #116	; 0x74
   1ed60:	2100      	movs	r1, #0
   1ed62:	462f      	mov	r7, r5
   1ed64:	f7ff f928 	bl	1dfb8 <CC_PalMemSetPlat>
   1ed68:	e7ea      	b.n	1ed40 <kmu_derive_cmac+0xec>
   1ed6a:	bf00      	nop
   1ed6c:	00f1000e 	.word	0x00f1000e
   1ed70:	00f1000f 	.word	0x00f1000f

0001ed74 <UtilCmacBuildDataForDerivation>:
   1ed74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed78:	b082      	sub	sp, #8
   1ed7a:	2600      	movs	r6, #0
   1ed7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1ed7e:	9601      	str	r6, [sp, #4]
   1ed80:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1ed84:	d83c      	bhi.n	1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1ed86:	00ee      	lsls	r6, r5, #3
   1ed88:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1ed8c:	f101 35ff 	add.w	r5, r1, #4294967295
   1ed90:	461f      	mov	r7, r3
   1ed92:	bf34      	ite	cc
   1ed94:	2303      	movcc	r3, #3
   1ed96:	2304      	movcs	r3, #4
   1ed98:	2d3f      	cmp	r5, #63	; 0x3f
   1ed9a:	460c      	mov	r4, r1
   1ed9c:	9300      	str	r3, [sp, #0]
   1ed9e:	d82f      	bhi.n	1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1eda0:	b370      	cbz	r0, 1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1eda2:	4690      	mov	r8, r2
   1eda4:	b117      	cbz	r7, 1edac <UtilCmacBuildDataForDerivation+0x38>
   1eda6:	b35a      	cbz	r2, 1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1eda8:	2f40      	cmp	r7, #64	; 0x40
   1edaa:	d829      	bhi.n	1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1edac:	9a08      	ldr	r2, [sp, #32]
   1edae:	b33a      	cbz	r2, 1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1edb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1edb2:	6811      	ldr	r1, [r2, #0]
   1edb4:	b321      	cbz	r1, 1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1edb6:	19e2      	adds	r2, r4, r7
   1edb8:	4413      	add	r3, r2
   1edba:	4299      	cmp	r1, r3
   1edbc:	d320      	bcc.n	1ee00 <UtilCmacBuildDataForDerivation+0x8c>
   1edbe:	9b08      	ldr	r3, [sp, #32]
   1edc0:	4622      	mov	r2, r4
   1edc2:	4601      	mov	r1, r0
   1edc4:	1c58      	adds	r0, r3, #1
   1edc6:	f7ff f8f5 	bl	1dfb4 <CC_PalMemCopyPlat>
   1edca:	9b08      	ldr	r3, [sp, #32]
   1edcc:	4423      	add	r3, r4
   1edce:	2200      	movs	r2, #0
   1edd0:	3402      	adds	r4, #2
   1edd2:	705a      	strb	r2, [r3, #1]
   1edd4:	bb07      	cbnz	r7, 1ee18 <UtilCmacBuildDataForDerivation+0xa4>
   1edd6:	2eff      	cmp	r6, #255	; 0xff
   1edd8:	9600      	str	r6, [sp, #0]
   1edda:	d915      	bls.n	1ee08 <UtilCmacBuildDataForDerivation+0x94>
   1eddc:	9b08      	ldr	r3, [sp, #32]
   1edde:	0235      	lsls	r5, r6, #8
   1ede0:	b2ad      	uxth	r5, r5
   1ede2:	1918      	adds	r0, r3, r4
   1ede4:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1ede8:	2202      	movs	r2, #2
   1edea:	a901      	add	r1, sp, #4
   1edec:	9501      	str	r5, [sp, #4]
   1edee:	f7ff f8e1 	bl	1dfb4 <CC_PalMemCopyPlat>
   1edf2:	3402      	adds	r4, #2
   1edf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1edf6:	2000      	movs	r0, #0
   1edf8:	601c      	str	r4, [r3, #0]
   1edfa:	b002      	add	sp, #8
   1edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee00:	4809      	ldr	r0, [pc, #36]	; (1ee28 <UtilCmacBuildDataForDerivation+0xb4>)
   1ee02:	b002      	add	sp, #8
   1ee04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee08:	9b08      	ldr	r3, [sp, #32]
   1ee0a:	2201      	movs	r2, #1
   1ee0c:	1918      	adds	r0, r3, r4
   1ee0e:	4669      	mov	r1, sp
   1ee10:	f7ff f8d0 	bl	1dfb4 <CC_PalMemCopyPlat>
   1ee14:	3401      	adds	r4, #1
   1ee16:	e7ed      	b.n	1edf4 <UtilCmacBuildDataForDerivation+0x80>
   1ee18:	9b08      	ldr	r3, [sp, #32]
   1ee1a:	4641      	mov	r1, r8
   1ee1c:	1918      	adds	r0, r3, r4
   1ee1e:	463a      	mov	r2, r7
   1ee20:	f7ff f8c8 	bl	1dfb4 <CC_PalMemCopyPlat>
   1ee24:	443c      	add	r4, r7
   1ee26:	e7d6      	b.n	1edd6 <UtilCmacBuildDataForDerivation+0x62>
   1ee28:	80000006 	.word	0x80000006

0001ee2c <CC_PalDataBufferAttrGet>:
   1ee2c:	2000      	movs	r0, #0
   1ee2e:	7018      	strb	r0, [r3, #0]
   1ee30:	4770      	bx	lr
   1ee32:	bf00      	nop

0001ee34 <checkCRC>:
}
   1ee34:	2001      	movs	r0, #1
   1ee36:	4770      	bx	lr

0001ee38 <ccc_cfg_changed>:
}
   1ee38:	4770      	bx	lr

0001ee3a <write_u16>:
{
   1ee3a:	b538      	push	{r3, r4, r5, lr}
   1ee3c:	4608      	mov	r0, r1
   1ee3e:	4611      	mov	r1, r2
   1ee40:	461a      	mov	r2, r3
   1ee42:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	uint8_t *value = attr->user_data;
   1ee46:	68c0      	ldr	r0, [r0, #12]
	if (offset + len > sizeof(config_data)) {
   1ee48:	189d      	adds	r5, r3, r2
   1ee4a:	2d14      	cmp	r5, #20
   1ee4c:	d805      	bhi.n	1ee5a <write_u16+0x20>
   1ee4e:	4614      	mov	r4, r2
   1ee50:	4418      	add	r0, r3
   1ee52:	f006 fc68 	bl	25726 <memcpy>
}
   1ee56:	4620      	mov	r0, r4
   1ee58:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ee5a:	f06f 0406 	mvn.w	r4, #6
   1ee5e:	e7fa      	b.n	1ee56 <write_u16+0x1c>

0001ee60 <bas_notify>:
{
   1ee60:	b508      	push	{r3, lr}
	uint8_t battery_level = bt_bas_get_battery_level();
   1ee62:	f7f3 ff3f 	bl	12ce4 <bt_bas_get_battery_level>
	battery_level = battery_level - 5U;
   1ee66:	3805      	subs	r0, #5
   1ee68:	b2c0      	uxtb	r0, r0
	if (battery_level < 5U) {
   1ee6a:	2804      	cmp	r0, #4
   1ee6c:	d902      	bls.n	1ee74 <bas_notify+0x14>
	bt_bas_set_battery_level(battery_level);
   1ee6e:	f7f3 ff3f 	bl	12cf0 <bt_bas_set_battery_level>
}
   1ee72:	bd08      	pop	{r3, pc}
		blink_LED(LED_RED_ID,1);
   1ee74:	2101      	movs	r1, #1
   1ee76:	4608      	mov	r0, r1
   1ee78:	f7f2 fd2e 	bl	118d8 <blink_LED>
		battery_level = 100U;
   1ee7c:	2064      	movs	r0, #100	; 0x64
   1ee7e:	e7f6      	b.n	1ee6e <bas_notify+0xe>

0001ee80 <mlx_enable>:
extern int8_t mlx_enable(struct device *i2c_dev){
   1ee80:	b508      	push	{r3, lr}
    return startBurstMode(i2c_dev);
   1ee82:	f000 fe33 	bl	1faec <startBurstMode>
}
   1ee86:	b240      	sxtb	r0, r0
   1ee88:	bd08      	pop	{r3, pc}

0001ee8a <interleave_reg_addr>:
{
   1ee8a:	b470      	push	{r4, r5, r6}
    for (index = 1; index < len; index++)
   1ee8c:	2401      	movs	r4, #1
   1ee8e:	429c      	cmp	r4, r3
   1ee90:	d208      	bcs.n	1eea4 <interleave_reg_addr+0x1a>
        temp_buff[(index * 2) - 1] = reg_addr[index];
   1ee92:	0065      	lsls	r5, r4, #1
   1ee94:	3d01      	subs	r5, #1
   1ee96:	5d06      	ldrb	r6, [r0, r4]
   1ee98:	554e      	strb	r6, [r1, r5]
        temp_buff[index * 2] = reg_data[index];
   1ee9a:	5d15      	ldrb	r5, [r2, r4]
   1ee9c:	f801 5014 	strb.w	r5, [r1, r4, lsl #1]
    for (index = 1; index < len; index++)
   1eea0:	3401      	adds	r4, #1
   1eea2:	e7f4      	b.n	1ee8e <interleave_reg_addr+0x4>
}
   1eea4:	bc70      	pop	{r4, r5, r6}
   1eea6:	4770      	bx	lr

0001eea8 <parse_odr_filter_settings>:
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1eea8:	7803      	ldrb	r3, [r0, #0]
   1eeaa:	f003 0307 	and.w	r3, r3, #7
   1eeae:	700b      	strb	r3, [r1, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   1eeb0:	7803      	ldrb	r3, [r0, #0]
   1eeb2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1eeb6:	704b      	strb	r3, [r1, #1]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1eeb8:	7843      	ldrb	r3, [r0, #1]
   1eeba:	f003 031f 	and.w	r3, r3, #31
   1eebe:	70cb      	strb	r3, [r1, #3]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   1eec0:	78c3      	ldrb	r3, [r0, #3]
   1eec2:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1eec6:	708b      	strb	r3, [r1, #2]
}
   1eec8:	4770      	bx	lr

0001eeca <verify_meas_time_and_odr_duration>:
    if (meas_t < odr_duration)
   1eeca:	4288      	cmp	r0, r1
   1eecc:	d201      	bcs.n	1eed2 <verify_meas_time_and_odr_duration+0x8>
        rslt = BMP3_OK;
   1eece:	2000      	movs	r0, #0
   1eed0:	4770      	bx	lr
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   1eed2:	f06f 0002 	mvn.w	r0, #2
}
   1eed6:	4770      	bx	lr

0001eed8 <fill_osr_data>:
{
   1eed8:	b470      	push	{r4, r5, r6}
   1eeda:	b083      	sub	sp, #12
   1eedc:	4604      	mov	r4, r0
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
   1eede:	9806      	ldr	r0, [sp, #24]
   1eee0:	f8d0 00b3 	ldr.w	r0, [r0, #179]	; 0xb3
   1eee4:	9001      	str	r0, [sp, #4]
    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
   1eee6:	f014 0f30 	tst.w	r4, #48	; 0x30
   1eeea:	d022      	beq.n	1ef32 <fill_osr_data+0x5a>
        if (settings & BMP3_SEL_PRESS_OS)
   1eeec:	f014 0f10 	tst.w	r4, #16
   1eef0:	d00a      	beq.n	1ef08 <fill_osr_data+0x30>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   1eef2:	f992 0000 	ldrsb.w	r0, [r2]
   1eef6:	f020 0007 	bic.w	r0, r0, #7
   1eefa:	f99d 5004 	ldrsb.w	r5, [sp, #4]
   1eefe:	f005 0507 	and.w	r5, r5, #7
   1ef02:	781e      	ldrb	r6, [r3, #0]
   1ef04:	4328      	orrs	r0, r5
   1ef06:	5590      	strb	r0, [r2, r6]
        if (settings & BMP3_SEL_TEMP_OS)
   1ef08:	f014 0f20 	tst.w	r4, #32
   1ef0c:	d00b      	beq.n	1ef26 <fill_osr_data+0x4e>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   1ef0e:	f992 0000 	ldrsb.w	r0, [r2]
   1ef12:	f020 0038 	bic.w	r0, r0, #56	; 0x38
   1ef16:	f89d 4005 	ldrb.w	r4, [sp, #5]
   1ef1a:	00e4      	lsls	r4, r4, #3
   1ef1c:	f004 0438 	and.w	r4, r4, #56	; 0x38
   1ef20:	781d      	ldrb	r5, [r3, #0]
   1ef22:	4320      	orrs	r0, r4
   1ef24:	5550      	strb	r0, [r2, r5]
        addr[*len] = BMP3_REG_OSR;
   1ef26:	781a      	ldrb	r2, [r3, #0]
   1ef28:	201c      	movs	r0, #28
   1ef2a:	5488      	strb	r0, [r1, r2]
        (*len)++;
   1ef2c:	781a      	ldrb	r2, [r3, #0]
   1ef2e:	3201      	adds	r2, #1
   1ef30:	701a      	strb	r2, [r3, #0]
}
   1ef32:	b003      	add	sp, #12
   1ef34:	bc70      	pop	{r4, r5, r6}
   1ef36:	4770      	bx	lr

0001ef38 <fill_odr_data>:
{
   1ef38:	b430      	push	{r4, r5}
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   1ef3a:	f893 40b6 	ldrb.w	r4, [r3, #182]	; 0xb6
   1ef3e:	2c11      	cmp	r4, #17
   1ef40:	d902      	bls.n	1ef48 <fill_odr_data+0x10>
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   1ef42:	2411      	movs	r4, #17
   1ef44:	f883 40b6 	strb.w	r4, [r3, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   1ef48:	f991 4001 	ldrsb.w	r4, [r1, #1]
   1ef4c:	f024 041f 	bic.w	r4, r4, #31
   1ef50:	f993 30b6 	ldrsb.w	r3, [r3, #182]	; 0xb6
   1ef54:	f003 031f 	and.w	r3, r3, #31
   1ef58:	7815      	ldrb	r5, [r2, #0]
   1ef5a:	4323      	orrs	r3, r4
   1ef5c:	554b      	strb	r3, [r1, r5]
    addr[*len] = BMP3_REG_ODR;
   1ef5e:	7813      	ldrb	r3, [r2, #0]
   1ef60:	211d      	movs	r1, #29
   1ef62:	54c1      	strb	r1, [r0, r3]
    (*len)++;
   1ef64:	7813      	ldrb	r3, [r2, #0]
   1ef66:	3301      	adds	r3, #1
   1ef68:	7013      	strb	r3, [r2, #0]
}
   1ef6a:	bc30      	pop	{r4, r5}
   1ef6c:	4770      	bx	lr

0001ef6e <fill_filter_data>:
{
   1ef6e:	b430      	push	{r4, r5}
   1ef70:	b082      	sub	sp, #8
   1ef72:	4604      	mov	r4, r0
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
   1ef74:	f8d3 00b3 	ldr.w	r0, [r3, #179]	; 0xb3
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   1ef78:	f991 3003 	ldrsb.w	r3, [r1, #3]
   1ef7c:	f023 030e 	bic.w	r3, r3, #14
   1ef80:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1ef84:	0040      	lsls	r0, r0, #1
   1ef86:	f000 000e 	and.w	r0, r0, #14
   1ef8a:	7815      	ldrb	r5, [r2, #0]
   1ef8c:	4318      	orrs	r0, r3
   1ef8e:	5548      	strb	r0, [r1, r5]
    addr[*len] = BMP3_REG_CONFIG;
   1ef90:	7813      	ldrb	r3, [r2, #0]
   1ef92:	211f      	movs	r1, #31
   1ef94:	54e1      	strb	r1, [r4, r3]
    (*len)++;
   1ef96:	7813      	ldrb	r3, [r2, #0]
   1ef98:	3301      	adds	r3, #1
   1ef9a:	7013      	strb	r3, [r2, #0]
}
   1ef9c:	b002      	add	sp, #8
   1ef9e:	bc30      	pop	{r4, r5}
   1efa0:	4770      	bx	lr

0001efa2 <parse_sensor_data>:
{
   1efa2:	b410      	push	{r4}
    data_xlsb = (uint32_t)reg_data[0];
   1efa4:	7802      	ldrb	r2, [r0, #0]
    data_lsb = (uint32_t)reg_data[1] << 8;
   1efa6:	7844      	ldrb	r4, [r0, #1]
    data_msb = (uint32_t)reg_data[2] << 16;
   1efa8:	7883      	ldrb	r3, [r0, #2]
   1efaa:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1efac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   1efb0:	4313      	orrs	r3, r2
   1efb2:	600b      	str	r3, [r1, #0]
    data_xlsb = (uint32_t)reg_data[3];
   1efb4:	78c2      	ldrb	r2, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << 8;
   1efb6:	7904      	ldrb	r4, [r0, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   1efb8:	7943      	ldrb	r3, [r0, #5]
   1efba:	041b      	lsls	r3, r3, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1efbc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   1efc0:	4313      	orrs	r3, r2
   1efc2:	604b      	str	r3, [r1, #4]
}
   1efc4:	bc10      	pop	{r4}
   1efc6:	4770      	bx	lr

0001efc8 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
   1efc8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
   1efcc:	460c      	mov	r4, r1
    uint32_t uncomp_temp = uncomp_data->temperature;
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1efce:	6840      	ldr	r0, [r0, #4]
   1efd0:	f7e1 fa8c 	bl	4ec <__aeabi_ui2d>
   1efd4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1efd8:	f7e1 f94a 	bl	270 <__aeabi_dsub>
   1efdc:	4606      	mov	r6, r0
   1efde:	460f      	mov	r7, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1efe0:	4602      	mov	r2, r0
   1efe2:	460b      	mov	r3, r1
   1efe4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   1efe8:	f7e1 fafa 	bl	5e0 <__aeabi_dmul>
   1efec:	4680      	mov	r8, r0
   1efee:	4689      	mov	r9, r1

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1eff0:	4632      	mov	r2, r6
   1eff2:	463b      	mov	r3, r7
   1eff4:	4630      	mov	r0, r6
   1eff6:	4639      	mov	r1, r7
   1eff8:	f7e1 faf2 	bl	5e0 <__aeabi_dmul>
   1effc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f000:	f7e1 faee 	bl	5e0 <__aeabi_dmul>
   1f004:	4642      	mov	r2, r8
   1f006:	464b      	mov	r3, r9
   1f008:	f7e1 f934 	bl	274 <__adddf3>
   1f00c:	4602      	mov	r2, r0
   1f00e:	460b      	mov	r3, r1
   1f010:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
                                             calib_data->quantized_calib_data.par_t3;

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
}
   1f014:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

0001f018 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
   1f018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f01a:	4606      	mov	r6, r0
   1f01c:	460f      	mov	r7, r1
   1f01e:	4614      	mov	r4, r2
    float pow_output = 1;
   1f020:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000

    while (power != 0)
   1f024:	b15c      	cbz	r4, 1f03e <pow_bmp3+0x26>
    {
        pow_output = (float) base * pow_output;
   1f026:	4630      	mov	r0, r6
   1f028:	4639      	mov	r1, r7
   1f02a:	f7e1 fceb 	bl	a04 <__aeabi_d2f>
   1f02e:	4601      	mov	r1, r0
   1f030:	4628      	mov	r0, r5
   1f032:	f7e1 f865 	bl	100 <__aeabi_fmul>
   1f036:	4605      	mov	r5, r0
        power--;
   1f038:	3c01      	subs	r4, #1
   1f03a:	b2e4      	uxtb	r4, r4
   1f03c:	e7f2      	b.n	1f024 <pow_bmp3+0xc>
    }

    return pow_output;
}
   1f03e:	4628      	mov	r0, r5
   1f040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f042 <compensate_pressure>:
{
   1f042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f046:	b087      	sub	sp, #28
   1f048:	4683      	mov	fp, r0
   1f04a:	468a      	mov	sl, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f04c:	e9d1 891c 	ldrd	r8, r9, [r1, #112]	; 0x70
   1f050:	4642      	mov	r2, r8
   1f052:	464b      	mov	r3, r9
   1f054:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
   1f058:	f7e1 fac2 	bl	5e0 <__aeabi_dmul>
   1f05c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f060:	e9da 4512 	ldrd	r4, r5, [sl, #72]	; 0x48
   1f064:	2202      	movs	r2, #2
   1f066:	4640      	mov	r0, r8
   1f068:	4649      	mov	r1, r9
   1f06a:	f7ff ffd5 	bl	1f018 <pow_bmp3>
   1f06e:	f7e1 fa5f 	bl	530 <__aeabi_f2d>
   1f072:	4606      	mov	r6, r0
   1f074:	460f      	mov	r7, r1
   1f076:	4602      	mov	r2, r0
   1f078:	460b      	mov	r3, r1
   1f07a:	4620      	mov	r0, r4
   1f07c:	4629      	mov	r1, r5
   1f07e:	f7e1 faaf 	bl	5e0 <__aeabi_dmul>
   1f082:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f086:	e9da 4514 	ldrd	r4, r5, [sl, #80]	; 0x50
   1f08a:	2203      	movs	r2, #3
   1f08c:	4640      	mov	r0, r8
   1f08e:	4649      	mov	r1, r9
   1f090:	f7ff ffc2 	bl	1f018 <pow_bmp3>
   1f094:	f7e1 fa4c 	bl	530 <__aeabi_f2d>
   1f098:	460a      	mov	r2, r1
   1f09a:	4601      	mov	r1, r0
   1f09c:	e9cd 1200 	strd	r1, r2, [sp]
   1f0a0:	4613      	mov	r3, r2
   1f0a2:	4602      	mov	r2, r0
   1f0a4:	4620      	mov	r0, r4
   1f0a6:	4629      	mov	r1, r5
   1f0a8:	f7e1 fa9a 	bl	5e0 <__aeabi_dmul>
   1f0ac:	4604      	mov	r4, r0
   1f0ae:	460d      	mov	r5, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f0b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f0b4:	e9da 010e 	ldrd	r0, r1, [sl, #56]	; 0x38
   1f0b8:	f7e1 f8dc 	bl	274 <__adddf3>
   1f0bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f0c0:	f7e1 f8d8 	bl	274 <__adddf3>
   1f0c4:	4622      	mov	r2, r4
   1f0c6:	462b      	mov	r3, r5
   1f0c8:	f7e1 f8d4 	bl	274 <__adddf3>
   1f0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1f0d0:	e9da 2308 	ldrd	r2, r3, [sl, #32]
   1f0d4:	4640      	mov	r0, r8
   1f0d6:	4649      	mov	r1, r9
   1f0d8:	f7e1 fa82 	bl	5e0 <__aeabi_dmul>
   1f0dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f0e0:	e9da 230a 	ldrd	r2, r3, [sl, #40]	; 0x28
   1f0e4:	4630      	mov	r0, r6
   1f0e6:	4639      	mov	r1, r7
   1f0e8:	f7e1 fa7a 	bl	5e0 <__aeabi_dmul>
   1f0ec:	4606      	mov	r6, r0
   1f0ee:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f0f0:	e9da 230c 	ldrd	r2, r3, [sl, #48]	; 0x30
   1f0f4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f0f8:	f7e1 fa72 	bl	5e0 <__aeabi_dmul>
   1f0fc:	e9cd 0100 	strd	r0, r1, [sp]
    partial_out2 = uncomp_data->pressure *
   1f100:	f8db 0000 	ldr.w	r0, [fp]
   1f104:	f7e1 f9f2 	bl	4ec <__aeabi_ui2d>
   1f108:	4604      	mov	r4, r0
   1f10a:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f10c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f110:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1f114:	f7e1 f8ae 	bl	274 <__adddf3>
   1f118:	4632      	mov	r2, r6
   1f11a:	463b      	mov	r3, r7
   1f11c:	f7e1 f8aa 	bl	274 <__adddf3>
   1f120:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f124:	f7e1 f8a6 	bl	274 <__adddf3>
   1f128:	4602      	mov	r2, r0
   1f12a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
   1f12c:	4620      	mov	r0, r4
   1f12e:	4629      	mov	r1, r5
   1f130:	f7e1 fa56 	bl	5e0 <__aeabi_dmul>
   1f134:	e9cd 0100 	strd	r0, r1, [sp]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1f138:	2202      	movs	r2, #2
   1f13a:	4620      	mov	r0, r4
   1f13c:	4629      	mov	r1, r5
   1f13e:	f7ff ff6b 	bl	1f018 <pow_bmp3>
   1f142:	f7e1 f9f5 	bl	530 <__aeabi_f2d>
   1f146:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f14a:	e9da 6716 	ldrd	r6, r7, [sl, #88]	; 0x58
   1f14e:	e9da 2318 	ldrd	r2, r3, [sl, #96]	; 0x60
   1f152:	4640      	mov	r0, r8
   1f154:	4649      	mov	r1, r9
   1f156:	f7e1 fa43 	bl	5e0 <__aeabi_dmul>
   1f15a:	4602      	mov	r2, r0
   1f15c:	460b      	mov	r3, r1
   1f15e:	4630      	mov	r0, r6
   1f160:	4639      	mov	r1, r7
   1f162:	f7e1 f887 	bl	274 <__adddf3>
   1f166:	4602      	mov	r2, r0
   1f168:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   1f16a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f16e:	f7e1 fa37 	bl	5e0 <__aeabi_dmul>
   1f172:	4606      	mov	r6, r0
   1f174:	460f      	mov	r7, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   1f176:	2203      	movs	r2, #3
   1f178:	4620      	mov	r0, r4
   1f17a:	4629      	mov	r1, r5
   1f17c:	f7ff ff4c 	bl	1f018 <pow_bmp3>
   1f180:	f7e1 f9d6 	bl	530 <__aeabi_f2d>
   1f184:	e9da 231a 	ldrd	r2, r3, [sl, #104]	; 0x68
   1f188:	f7e1 fa2a 	bl	5e0 <__aeabi_dmul>
   1f18c:	4632      	mov	r2, r6
   1f18e:	463b      	mov	r3, r7
   1f190:	f7e1 f870 	bl	274 <__adddf3>
   1f194:	4604      	mov	r4, r0
   1f196:	460d      	mov	r5, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f198:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f1a0:	f7e1 f868 	bl	274 <__adddf3>
   1f1a4:	4622      	mov	r2, r4
   1f1a6:	462b      	mov	r3, r5
   1f1a8:	f7e1 f864 	bl	274 <__adddf3>
}
   1f1ac:	b007      	add	sp, #28
   1f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001f1b2 <compensate_data>:
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1f1b2:	b1d9      	cbz	r1, 1f1ec <compensate_data+0x3a>
{
   1f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f1b6:	4604      	mov	r4, r0
   1f1b8:	4616      	mov	r6, r2
   1f1ba:	461d      	mov	r5, r3
   1f1bc:	460f      	mov	r7, r1
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1f1be:	b1c2      	cbz	r2, 1f1f2 <compensate_data+0x40>
   1f1c0:	b1d3      	cbz	r3, 1f1f8 <compensate_data+0x46>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   1f1c2:	f010 0f03 	tst.w	r0, #3
   1f1c6:	d10a      	bne.n	1f1de <compensate_data+0x2c>
        if (sensor_comp & BMP3_PRESS)
   1f1c8:	f014 0f01 	tst.w	r4, #1
   1f1cc:	d017      	beq.n	1f1fe <compensate_data+0x4c>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   1f1ce:	4629      	mov	r1, r5
   1f1d0:	4638      	mov	r0, r7
   1f1d2:	f7ff ff36 	bl	1f042 <compensate_pressure>
   1f1d6:	e9c6 0102 	strd	r0, r1, [r6, #8]
    int8_t rslt = BMP3_OK;
   1f1da:	2000      	movs	r0, #0
   1f1dc:	e010      	b.n	1f200 <compensate_data+0x4e>
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   1f1de:	4619      	mov	r1, r3
   1f1e0:	4638      	mov	r0, r7
   1f1e2:	f7ff fef1 	bl	1efc8 <compensate_temperature>
   1f1e6:	e9c6 0100 	strd	r0, r1, [r6]
   1f1ea:	e7ed      	b.n	1f1c8 <compensate_data+0x16>
        rslt = BMP3_E_NULL_PTR;
   1f1ec:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f1f0:	4770      	bx	lr
        rslt = BMP3_E_NULL_PTR;
   1f1f2:	f04f 30ff 	mov.w	r0, #4294967295
   1f1f6:	e003      	b.n	1f200 <compensate_data+0x4e>
   1f1f8:	f04f 30ff 	mov.w	r0, #4294967295
   1f1fc:	e000      	b.n	1f200 <compensate_data+0x4e>
    int8_t rslt = BMP3_OK;
   1f1fe:	2000      	movs	r0, #0
}
   1f200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f202 <are_settings_changed>:
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
   1f202:	4208      	tst	r0, r1
   1f204:	d001      	beq.n	1f20a <are_settings_changed+0x8>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
   1f206:	2001      	movs	r0, #1
   1f208:	4770      	bx	lr
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
   1f20a:	2000      	movs	r0, #0
    }

    return settings_changed;
}
   1f20c:	4770      	bx	lr

0001f20e <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1f20e:	b160      	cbz	r0, 1f22a <null_ptr_check+0x1c>
   1f210:	68c2      	ldr	r2, [r0, #12]
   1f212:	b16a      	cbz	r2, 1f230 <null_ptr_check+0x22>
   1f214:	6902      	ldr	r2, [r0, #16]
   1f216:	b172      	cbz	r2, 1f236 <null_ptr_check+0x28>
   1f218:	6942      	ldr	r2, [r0, #20]
   1f21a:	b17a      	cbz	r2, 1f23c <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
   1f21c:	6843      	ldr	r3, [r0, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1f21e:	b10b      	cbz	r3, 1f224 <null_ptr_check+0x16>
        rslt = BMP3_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
   1f220:	2000      	movs	r0, #0
    }

    return rslt;
}
   1f222:	4770      	bx	lr
        rslt = BMP3_E_NULL_PTR;
   1f224:	f04f 30ff 	mov.w	r0, #4294967295
   1f228:	4770      	bx	lr
   1f22a:	f04f 30ff 	mov.w	r0, #4294967295
   1f22e:	4770      	bx	lr
   1f230:	f04f 30ff 	mov.w	r0, #4294967295
   1f234:	4770      	bx	lr
   1f236:	f04f 30ff 	mov.w	r0, #4294967295
   1f23a:	4770      	bx	lr
   1f23c:	f04f 30ff 	mov.w	r0, #4294967295
   1f240:	4770      	bx	lr

0001f242 <bmp3_get_regs>:
{
   1f242:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f246:	af00      	add	r7, sp, #0
   1f248:	4606      	mov	r6, r0
   1f24a:	4688      	mov	r8, r1
   1f24c:	4615      	mov	r5, r2
   1f24e:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   1f250:	4618      	mov	r0, r3
   1f252:	f7ff ffdc 	bl	1f20e <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   1f256:	bb98      	cbnz	r0, 1f2c0 <bmp3_get_regs+0x7e>
   1f258:	4681      	mov	r9, r0
   1f25a:	f1b8 0f00 	cmp.w	r8, #0
   1f25e:	d032      	beq.n	1f2c6 <bmp3_get_regs+0x84>
    {
   1f260:	46ea      	mov	sl, sp
        uint32_t temp_len = len + dev->dummy_byte;
   1f262:	7aa2      	ldrb	r2, [r4, #10]
   1f264:	442a      	add	r2, r5
        uint8_t temp_buff[len + dev->dummy_byte];
   1f266:	1dd3      	adds	r3, r2, #7
   1f268:	f023 0307 	bic.w	r3, r3, #7
   1f26c:	ebad 0d03 	sub.w	sp, sp, r3
   1f270:	46eb      	mov	fp, sp
        if (dev->intf != BMP3_I2C_INTF)
   1f272:	7a23      	ldrb	r3, [r4, #8]
   1f274:	2b01      	cmp	r3, #1
   1f276:	d01b      	beq.n	1f2b0 <bmp3_get_regs+0x6e>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f278:	6863      	ldr	r3, [r4, #4]
   1f27a:	4659      	mov	r1, fp
   1f27c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   1f280:	68e6      	ldr	r6, [r4, #12]
   1f282:	47b0      	blx	r6
   1f284:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   1f286:	2300      	movs	r3, #0
   1f288:	e006      	b.n	1f298 <bmp3_get_regs+0x56>
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   1f28a:	7aa2      	ldrb	r2, [r4, #10]
   1f28c:	441a      	add	r2, r3
   1f28e:	f81b 2002 	ldrb.w	r2, [fp, r2]
   1f292:	f808 2003 	strb.w	r2, [r8, r3]
            for (idx = 0; idx < len; idx++)
   1f296:	3301      	adds	r3, #1
   1f298:	42ab      	cmp	r3, r5
   1f29a:	d3f6      	bcc.n	1f28a <bmp3_get_regs+0x48>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1f29c:	f994 3009 	ldrsb.w	r3, [r4, #9]
   1f2a0:	b10b      	cbz	r3, 1f2a6 <bmp3_get_regs+0x64>
            rslt = BMP3_E_COMM_FAIL;
   1f2a2:	f06f 0906 	mvn.w	r9, #6
   1f2a6:	46d5      	mov	sp, sl
}
   1f2a8:	4648      	mov	r0, r9
   1f2aa:	46bd      	mov	sp, r7
   1f2ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   1f2b0:	6863      	ldr	r3, [r4, #4]
   1f2b2:	462a      	mov	r2, r5
   1f2b4:	4641      	mov	r1, r8
   1f2b6:	4630      	mov	r0, r6
   1f2b8:	68e5      	ldr	r5, [r4, #12]
   1f2ba:	47a8      	blx	r5
   1f2bc:	7260      	strb	r0, [r4, #9]
   1f2be:	e7ed      	b.n	1f29c <bmp3_get_regs+0x5a>
        rslt = BMP3_E_NULL_PTR;
   1f2c0:	f04f 39ff 	mov.w	r9, #4294967295
   1f2c4:	e7f0      	b.n	1f2a8 <bmp3_get_regs+0x66>
   1f2c6:	f04f 39ff 	mov.w	r9, #4294967295
   1f2ca:	e7ed      	b.n	1f2a8 <bmp3_get_regs+0x66>

0001f2cc <get_calib_data>:
{
   1f2cc:	b530      	push	{r4, r5, lr}
   1f2ce:	b087      	sub	sp, #28
   1f2d0:	4604      	mov	r4, r0
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   1f2d2:	2300      	movs	r3, #0
   1f2d4:	9300      	str	r3, [sp, #0]
   1f2d6:	9301      	str	r3, [sp, #4]
   1f2d8:	9302      	str	r3, [sp, #8]
   1f2da:	9303      	str	r3, [sp, #12]
   1f2dc:	9304      	str	r3, [sp, #16]
   1f2de:	f88d 3014 	strb.w	r3, [sp, #20]
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   1f2e2:	4603      	mov	r3, r0
   1f2e4:	2215      	movs	r2, #21
   1f2e6:	4669      	mov	r1, sp
   1f2e8:	2031      	movs	r0, #49	; 0x31
   1f2ea:	f7ff ffaa 	bl	1f242 <bmp3_get_regs>
   1f2ee:	4605      	mov	r5, r0
    parse_calib_data(calib_data, dev);
   1f2f0:	4621      	mov	r1, r4
   1f2f2:	4668      	mov	r0, sp
   1f2f4:	f7f1 fe0a 	bl	10f0c <parse_calib_data>
}
   1f2f8:	4628      	mov	r0, r5
   1f2fa:	b007      	add	sp, #28
   1f2fc:	bd30      	pop	{r4, r5, pc}

0001f2fe <get_odr_filter_settings>:
{
   1f2fe:	b530      	push	{r4, r5, lr}
   1f300:	b083      	sub	sp, #12
   1f302:	4604      	mov	r4, r0
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1f304:	4603      	mov	r3, r0
   1f306:	2204      	movs	r2, #4
   1f308:	eb0d 0102 	add.w	r1, sp, r2
   1f30c:	201c      	movs	r0, #28
   1f30e:	f7ff ff98 	bl	1f242 <bmp3_get_regs>
   1f312:	4605      	mov	r5, r0
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
   1f314:	f104 01b3 	add.w	r1, r4, #179	; 0xb3
   1f318:	a801      	add	r0, sp, #4
   1f31a:	f7ff fdc5 	bl	1eea8 <parse_odr_filter_settings>
}
   1f31e:	4628      	mov	r0, r5
   1f320:	b003      	add	sp, #12
   1f322:	bd30      	pop	{r4, r5, pc}

0001f324 <validate_normal_mode_settings>:
{
   1f324:	b510      	push	{r4, lr}
   1f326:	4604      	mov	r4, r0
    rslt = get_odr_filter_settings(dev);
   1f328:	f7ff ffe9 	bl	1f2fe <get_odr_filter_settings>
    if (rslt == BMP3_OK)
   1f32c:	b910      	cbnz	r0, 1f334 <validate_normal_mode_settings+0x10>
        rslt = validate_osr_and_odr_settings(dev);
   1f32e:	4620      	mov	r0, r4
   1f330:	f7f1 fef8 	bl	11124 <validate_osr_and_odr_settings>
}
   1f334:	bd10      	pop	{r4, pc}

0001f336 <bmp3_set_regs>:
{
   1f336:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f33a:	af00      	add	r7, sp, #0
   1f33c:	4604      	mov	r4, r0
   1f33e:	460e      	mov	r6, r1
   1f340:	4615      	mov	r5, r2
   1f342:	4698      	mov	r8, r3
    uint8_t temp_buff[len * 2];
   1f344:	ea4f 0b42 	mov.w	fp, r2, lsl #1
   1f348:	f10b 0307 	add.w	r3, fp, #7
   1f34c:	f023 0307 	bic.w	r3, r3, #7
   1f350:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   1f354:	4640      	mov	r0, r8
   1f356:	f7ff ff5a 	bl	1f20e <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   1f35a:	bb60      	cbnz	r0, 1f3b6 <bmp3_set_regs+0x80>
   1f35c:	46e9      	mov	r9, sp
   1f35e:	4682      	mov	sl, r0
   1f360:	b364      	cbz	r4, 1f3bc <bmp3_set_regs+0x86>
   1f362:	b376      	cbz	r6, 1f3c2 <bmp3_set_regs+0x8c>
        if (len != 0)
   1f364:	b385      	cbz	r5, 1f3c8 <bmp3_set_regs+0x92>
            temp_buff[0] = reg_data[0];
   1f366:	7833      	ldrb	r3, [r6, #0]
   1f368:	f889 3000 	strb.w	r3, [r9]
            if (dev->intf == BMP3_SPI_INTF)
   1f36c:	f898 3008 	ldrb.w	r3, [r8, #8]
   1f370:	b1b3      	cbz	r3, 1f3a0 <bmp3_set_regs+0x6a>
            if (len > 1)
   1f372:	2d01      	cmp	r5, #1
   1f374:	d817      	bhi.n	1f3a6 <bmp3_set_regs+0x70>
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1f376:	f8d8 6010 	ldr.w	r6, [r8, #16]
   1f37a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1f37e:	462a      	mov	r2, r5
   1f380:	4649      	mov	r1, r9
   1f382:	7820      	ldrb	r0, [r4, #0]
   1f384:	47b0      	blx	r6
   1f386:	f888 0009 	strb.w	r0, [r8, #9]
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1f38a:	bb00      	cbnz	r0, 1f3ce <bmp3_set_regs+0x98>
}
   1f38c:	4650      	mov	r0, sl
   1f38e:	46bd      	mov	sp, r7
   1f390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   1f394:	5ce2      	ldrb	r2, [r4, r3]
   1f396:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1f39a:	54e2      	strb	r2, [r4, r3]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   1f39c:	3301      	adds	r3, #1
   1f39e:	b2db      	uxtb	r3, r3
   1f3a0:	42ab      	cmp	r3, r5
   1f3a2:	d3f7      	bcc.n	1f394 <bmp3_set_regs+0x5e>
   1f3a4:	e7e5      	b.n	1f372 <bmp3_set_regs+0x3c>
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
   1f3a6:	462b      	mov	r3, r5
   1f3a8:	4632      	mov	r2, r6
   1f3aa:	4649      	mov	r1, r9
   1f3ac:	4620      	mov	r0, r4
   1f3ae:	f7ff fd6c 	bl	1ee8a <interleave_reg_addr>
                temp_len = len * 2;
   1f3b2:	465d      	mov	r5, fp
   1f3b4:	e7df      	b.n	1f376 <bmp3_set_regs+0x40>
        rslt = BMP3_E_NULL_PTR;
   1f3b6:	f04f 3aff 	mov.w	sl, #4294967295
   1f3ba:	e7e7      	b.n	1f38c <bmp3_set_regs+0x56>
   1f3bc:	f04f 3aff 	mov.w	sl, #4294967295
   1f3c0:	e7e4      	b.n	1f38c <bmp3_set_regs+0x56>
   1f3c2:	f04f 3aff 	mov.w	sl, #4294967295
   1f3c6:	e7e1      	b.n	1f38c <bmp3_set_regs+0x56>
            rslt = BMP3_E_INVALID_LEN;
   1f3c8:	f06f 0a05 	mvn.w	sl, #5
   1f3cc:	e7de      	b.n	1f38c <bmp3_set_regs+0x56>
                rslt = BMP3_E_COMM_FAIL;
   1f3ce:	f06f 0a06 	mvn.w	sl, #6
   1f3d2:	e7db      	b.n	1f38c <bmp3_set_regs+0x56>

0001f3d4 <set_pwr_ctrl_settings>:
{
   1f3d4:	b530      	push	{r4, r5, lr}
   1f3d6:	b083      	sub	sp, #12
   1f3d8:	4605      	mov	r5, r0
   1f3da:	460c      	mov	r4, r1
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f3dc:	201b      	movs	r0, #27
   1f3de:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1f3e2:	460b      	mov	r3, r1
   1f3e4:	2201      	movs	r2, #1
   1f3e6:	f10d 0106 	add.w	r1, sp, #6
   1f3ea:	f7ff ff2a 	bl	1f242 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f3ee:	bb30      	cbnz	r0, 1f43e <set_pwr_ctrl_settings+0x6a>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   1f3f0:	f015 0f02 	tst.w	r5, #2
   1f3f4:	d00b      	beq.n	1f40e <set_pwr_ctrl_settings+0x3a>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   1f3f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f3fa:	f023 0301 	bic.w	r3, r3, #1
   1f3fe:	b25b      	sxtb	r3, r3
   1f400:	f994 20b1 	ldrsb.w	r2, [r4, #177]	; 0xb1
   1f404:	f002 0201 	and.w	r2, r2, #1
   1f408:	4313      	orrs	r3, r2
   1f40a:	f88d 3006 	strb.w	r3, [sp, #6]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   1f40e:	f015 0f04 	tst.w	r5, #4
   1f412:	d00c      	beq.n	1f42e <set_pwr_ctrl_settings+0x5a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   1f414:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f418:	f023 0302 	bic.w	r3, r3, #2
   1f41c:	b25a      	sxtb	r2, r3
   1f41e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   1f422:	005b      	lsls	r3, r3, #1
   1f424:	f003 0302 	and.w	r3, r3, #2
   1f428:	4313      	orrs	r3, r2
   1f42a:	f88d 3006 	strb.w	r3, [sp, #6]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   1f42e:	4623      	mov	r3, r4
   1f430:	2201      	movs	r2, #1
   1f432:	f10d 0106 	add.w	r1, sp, #6
   1f436:	f10d 0007 	add.w	r0, sp, #7
   1f43a:	f7ff ff7c 	bl	1f336 <bmp3_set_regs>
}
   1f43e:	b003      	add	sp, #12
   1f440:	bd30      	pop	{r4, r5, pc}

0001f442 <set_int_ctrl_settings>:
{
   1f442:	b530      	push	{r4, r5, lr}
   1f444:	b083      	sub	sp, #12
   1f446:	4605      	mov	r5, r0
   1f448:	460c      	mov	r4, r1
    reg_addr = BMP3_REG_INT_CTRL;
   1f44a:	2019      	movs	r0, #25
   1f44c:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1f450:	460b      	mov	r3, r1
   1f452:	2201      	movs	r2, #1
   1f454:	f10d 0107 	add.w	r1, sp, #7
   1f458:	f7ff fef3 	bl	1f242 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f45c:	2800      	cmp	r0, #0
   1f45e:	d149      	bne.n	1f4f4 <set_int_ctrl_settings+0xb2>
        int_settings = dev->settings.int_settings;
   1f460:	f8d4 00b7 	ldr.w	r0, [r4, #183]	; 0xb7
   1f464:	9000      	str	r0, [sp, #0]
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   1f466:	f415 7f80 	tst.w	r5, #256	; 0x100
   1f46a:	d00b      	beq.n	1f484 <set_int_ctrl_settings+0x42>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   1f46c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f470:	f023 0301 	bic.w	r3, r3, #1
   1f474:	b25b      	sxtb	r3, r3
   1f476:	f99d 2000 	ldrsb.w	r2, [sp]
   1f47a:	f002 0201 	and.w	r2, r2, #1
   1f47e:	4313      	orrs	r3, r2
   1f480:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BMP3_SEL_LEVEL)
   1f484:	f415 7f00 	tst.w	r5, #512	; 0x200
   1f488:	d00c      	beq.n	1f4a4 <set_int_ctrl_settings+0x62>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   1f48a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f48e:	f023 0302 	bic.w	r3, r3, #2
   1f492:	b25a      	sxtb	r2, r3
   1f494:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1f498:	005b      	lsls	r3, r3, #1
   1f49a:	f003 0302 	and.w	r3, r3, #2
   1f49e:	4313      	orrs	r3, r2
   1f4a0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BMP3_SEL_LATCH)
   1f4a4:	f415 6f80 	tst.w	r5, #1024	; 0x400
   1f4a8:	d00c      	beq.n	1f4c4 <set_int_ctrl_settings+0x82>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   1f4aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4ae:	f023 0304 	bic.w	r3, r3, #4
   1f4b2:	b25a      	sxtb	r2, r3
   1f4b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1f4b8:	009b      	lsls	r3, r3, #2
   1f4ba:	f003 0304 	and.w	r3, r3, #4
   1f4be:	4313      	orrs	r3, r2
   1f4c0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   1f4c4:	f015 0f08 	tst.w	r5, #8
   1f4c8:	d00c      	beq.n	1f4e4 <set_int_ctrl_settings+0xa2>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   1f4ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1f4d2:	b25a      	sxtb	r2, r3
   1f4d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1f4d8:	019b      	lsls	r3, r3, #6
   1f4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1f4de:	4313      	orrs	r3, r2
   1f4e0:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   1f4e4:	4623      	mov	r3, r4
   1f4e6:	2201      	movs	r2, #1
   1f4e8:	f10d 0107 	add.w	r1, sp, #7
   1f4ec:	f10d 0006 	add.w	r0, sp, #6
   1f4f0:	f7ff ff21 	bl	1f336 <bmp3_set_regs>
}
   1f4f4:	b003      	add	sp, #12
   1f4f6:	bd30      	pop	{r4, r5, pc}

0001f4f8 <set_advance_settings>:
{
   1f4f8:	b530      	push	{r4, r5, lr}
   1f4fa:	b083      	sub	sp, #12
   1f4fc:	4605      	mov	r5, r0
   1f4fe:	460c      	mov	r4, r1
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   1f500:	f8b1 30bb 	ldrh.w	r3, [r1, #187]	; 0xbb
   1f504:	f8ad 3004 	strh.w	r3, [sp, #4]
    reg_addr = BMP3_REG_IF_CONF;
   1f508:	201a      	movs	r0, #26
   1f50a:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1f50e:	460b      	mov	r3, r1
   1f510:	2201      	movs	r2, #1
   1f512:	f10d 0106 	add.w	r1, sp, #6
   1f516:	f7ff fe94 	bl	1f242 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f51a:	bb38      	cbnz	r0, 1f56c <set_advance_settings+0x74>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   1f51c:	f415 6f00 	tst.w	r5, #2048	; 0x800
   1f520:	d00c      	beq.n	1f53c <set_advance_settings+0x44>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   1f522:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f526:	f023 0302 	bic.w	r3, r3, #2
   1f52a:	b25a      	sxtb	r2, r3
   1f52c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f530:	005b      	lsls	r3, r3, #1
   1f532:	f003 0302 	and.w	r3, r3, #2
   1f536:	4313      	orrs	r3, r2
   1f538:	f88d 3006 	strb.w	r3, [sp, #6]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   1f53c:	f415 5f80 	tst.w	r5, #4096	; 0x1000
   1f540:	d00c      	beq.n	1f55c <set_advance_settings+0x64>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   1f542:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f546:	f023 0304 	bic.w	r3, r3, #4
   1f54a:	b25a      	sxtb	r2, r3
   1f54c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1f550:	009b      	lsls	r3, r3, #2
   1f552:	f003 0304 	and.w	r3, r3, #4
   1f556:	4313      	orrs	r3, r2
   1f558:	f88d 3006 	strb.w	r3, [sp, #6]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   1f55c:	4623      	mov	r3, r4
   1f55e:	2201      	movs	r2, #1
   1f560:	f10d 0106 	add.w	r1, sp, #6
   1f564:	f10d 0007 	add.w	r0, sp, #7
   1f568:	f7ff fee5 	bl	1f336 <bmp3_set_regs>
}
   1f56c:	b003      	add	sp, #12
   1f56e:	bd30      	pop	{r4, r5, pc}

0001f570 <put_device_to_sleep>:
{
   1f570:	b510      	push	{r4, lr}
   1f572:	b082      	sub	sp, #8
   1f574:	4604      	mov	r4, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f576:	201b      	movs	r0, #27
   1f578:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f57c:	4623      	mov	r3, r4
   1f57e:	2201      	movs	r2, #1
   1f580:	f10d 0106 	add.w	r1, sp, #6
   1f584:	f7ff fe5d 	bl	1f242 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f588:	b108      	cbz	r0, 1f58e <put_device_to_sleep+0x1e>
}
   1f58a:	b002      	add	sp, #8
   1f58c:	bd10      	pop	{r4, pc}
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   1f58e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f592:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1f596:	f88d 3006 	strb.w	r3, [sp, #6]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f59a:	4623      	mov	r3, r4
   1f59c:	2201      	movs	r2, #1
   1f59e:	f10d 0106 	add.w	r1, sp, #6
   1f5a2:	f10d 0007 	add.w	r0, sp, #7
   1f5a6:	f7ff fec6 	bl	1f336 <bmp3_set_regs>
   1f5aa:	e7ee      	b.n	1f58a <put_device_to_sleep+0x1a>

0001f5ac <write_power_mode>:
{
   1f5ac:	b530      	push	{r4, r5, lr}
   1f5ae:	b083      	sub	sp, #12
   1f5b0:	4604      	mov	r4, r0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f5b2:	201b      	movs	r0, #27
   1f5b4:	f88d 0007 	strb.w	r0, [sp, #7]
    uint8_t op_mode = dev->settings.op_mode;
   1f5b8:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f5bc:	4623      	mov	r3, r4
   1f5be:	2201      	movs	r2, #1
   1f5c0:	f10d 0106 	add.w	r1, sp, #6
   1f5c4:	f7ff fe3d 	bl	1f242 <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f5c8:	b108      	cbz	r0, 1f5ce <write_power_mode+0x22>
}
   1f5ca:	b003      	add	sp, #12
   1f5cc:	bd30      	pop	{r4, r5, pc}
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   1f5ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f5d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f5d6:	b25b      	sxtb	r3, r3
   1f5d8:	012d      	lsls	r5, r5, #4
   1f5da:	f005 0530 	and.w	r5, r5, #48	; 0x30
   1f5de:	431d      	orrs	r5, r3
   1f5e0:	f88d 5006 	strb.w	r5, [sp, #6]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f5e4:	4623      	mov	r3, r4
   1f5e6:	2201      	movs	r2, #1
   1f5e8:	f10d 0106 	add.w	r1, sp, #6
   1f5ec:	f10d 0007 	add.w	r0, sp, #7
   1f5f0:	f7ff fea1 	bl	1f336 <bmp3_set_regs>
   1f5f4:	e7e9      	b.n	1f5ca <write_power_mode+0x1e>

0001f5f6 <set_normal_mode>:
{
   1f5f6:	b510      	push	{r4, lr}
   1f5f8:	b082      	sub	sp, #8
   1f5fa:	4604      	mov	r4, r0
    rslt = validate_normal_mode_settings(dev);
   1f5fc:	f7ff fe92 	bl	1f324 <validate_normal_mode_settings>
    if (rslt == BMP3_OK)
   1f600:	b108      	cbz	r0, 1f606 <set_normal_mode+0x10>
}
   1f602:	b002      	add	sp, #8
   1f604:	bd10      	pop	{r4, pc}
        rslt = write_power_mode(dev);
   1f606:	4620      	mov	r0, r4
   1f608:	f7ff ffd0 	bl	1f5ac <write_power_mode>
        if (rslt == BMP3_OK)
   1f60c:	2800      	cmp	r0, #0
   1f60e:	d1f8      	bne.n	1f602 <set_normal_mode+0xc>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   1f610:	4623      	mov	r3, r4
   1f612:	2201      	movs	r2, #1
   1f614:	f10d 0107 	add.w	r1, sp, #7
   1f618:	2002      	movs	r0, #2
   1f61a:	f7ff fe12 	bl	1f242 <bmp3_get_regs>
            if (rslt == BMP3_OK)
   1f61e:	2800      	cmp	r0, #0
   1f620:	d1ef      	bne.n	1f602 <set_normal_mode+0xc>
                if (conf_err_status & BMP3_ERR_CONF)
   1f622:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f626:	f013 0f04 	tst.w	r3, #4
   1f62a:	d0ea      	beq.n	1f602 <set_normal_mode+0xc>
                    rslt = BMP3_E_CONFIGURATION_ERR;
   1f62c:	f06f 0004 	mvn.w	r0, #4
   1f630:	e7e7      	b.n	1f602 <set_normal_mode+0xc>

0001f632 <bmp3_set_sensor_settings>:
{
   1f632:	b570      	push	{r4, r5, r6, lr}
   1f634:	4604      	mov	r4, r0
   1f636:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   1f638:	4608      	mov	r0, r1
   1f63a:	f7ff fde8 	bl	1f20e <null_ptr_check>
    if (rslt == BMP3_OK)
   1f63e:	4606      	mov	r6, r0
   1f640:	b9c0      	cbnz	r0, 1f674 <bmp3_set_sensor_settings+0x42>
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
   1f642:	4621      	mov	r1, r4
   1f644:	2006      	movs	r0, #6
   1f646:	f7ff fddc 	bl	1f202 <are_settings_changed>
   1f64a:	b9a8      	cbnz	r0, 1f678 <bmp3_set_sensor_settings+0x46>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   1f64c:	4621      	mov	r1, r4
   1f64e:	20f0      	movs	r0, #240	; 0xf0
   1f650:	f7ff fdd7 	bl	1f202 <are_settings_changed>
   1f654:	b100      	cbz	r0, 1f658 <bmp3_set_sensor_settings+0x26>
   1f656:	b1ae      	cbz	r6, 1f684 <bmp3_set_sensor_settings+0x52>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   1f658:	4621      	mov	r1, r4
   1f65a:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   1f65e:	f7ff fdd0 	bl	1f202 <are_settings_changed>
   1f662:	b100      	cbz	r0, 1f666 <bmp3_set_sensor_settings+0x34>
   1f664:	b1a6      	cbz	r6, 1f690 <bmp3_set_sensor_settings+0x5e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   1f666:	4621      	mov	r1, r4
   1f668:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
   1f66c:	f7ff fdc9 	bl	1f202 <are_settings_changed>
   1f670:	b100      	cbz	r0, 1f674 <bmp3_set_sensor_settings+0x42>
   1f672:	b19e      	cbz	r6, 1f69c <bmp3_set_sensor_settings+0x6a>
}
   1f674:	4630      	mov	r0, r6
   1f676:	bd70      	pop	{r4, r5, r6, pc}
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
   1f678:	4629      	mov	r1, r5
   1f67a:	4620      	mov	r0, r4
   1f67c:	f7ff feaa 	bl	1f3d4 <set_pwr_ctrl_settings>
   1f680:	4606      	mov	r6, r0
   1f682:	e7e3      	b.n	1f64c <bmp3_set_sensor_settings+0x1a>
            rslt = set_odr_filter_settings(desired_settings, dev);
   1f684:	4629      	mov	r1, r5
   1f686:	4620      	mov	r0, r4
   1f688:	f7f1 fd74 	bl	11174 <set_odr_filter_settings>
   1f68c:	4606      	mov	r6, r0
   1f68e:	e7e3      	b.n	1f658 <bmp3_set_sensor_settings+0x26>
            rslt = set_int_ctrl_settings(desired_settings, dev);
   1f690:	4629      	mov	r1, r5
   1f692:	4620      	mov	r0, r4
   1f694:	f7ff fed5 	bl	1f442 <set_int_ctrl_settings>
   1f698:	4606      	mov	r6, r0
   1f69a:	e7e4      	b.n	1f666 <bmp3_set_sensor_settings+0x34>
            rslt = set_advance_settings(desired_settings, dev);
   1f69c:	4629      	mov	r1, r5
   1f69e:	4620      	mov	r0, r4
   1f6a0:	f7ff ff2a 	bl	1f4f8 <set_advance_settings>
   1f6a4:	4606      	mov	r6, r0
   1f6a6:	e7e5      	b.n	1f674 <bmp3_set_sensor_settings+0x42>

0001f6a8 <bmp3_soft_reset>:
{
   1f6a8:	b510      	push	{r4, lr}
   1f6aa:	b082      	sub	sp, #8
   1f6ac:	4604      	mov	r4, r0
    uint8_t reg_addr = BMP3_REG_CMD;
   1f6ae:	237e      	movs	r3, #126	; 0x7e
   1f6b0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f6b4:	23b6      	movs	r3, #182	; 0xb6
   1f6b6:	f88d 3006 	strb.w	r3, [sp, #6]
    rslt = null_ptr_check(dev);
   1f6ba:	f7ff fda8 	bl	1f20e <null_ptr_check>
    if (rslt == BMP3_OK)
   1f6be:	b108      	cbz	r0, 1f6c4 <bmp3_soft_reset+0x1c>
}
   1f6c0:	b002      	add	sp, #8
   1f6c2:	bd10      	pop	{r4, pc}
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   1f6c4:	4623      	mov	r3, r4
   1f6c6:	2201      	movs	r2, #1
   1f6c8:	f10d 0105 	add.w	r1, sp, #5
   1f6cc:	2003      	movs	r0, #3
   1f6ce:	f7ff fdb8 	bl	1f242 <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f6d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1f6d6:	f013 0f10 	tst.w	r3, #16
   1f6da:	d01f      	beq.n	1f71c <bmp3_soft_reset+0x74>
   1f6dc:	bb08      	cbnz	r0, 1f722 <bmp3_soft_reset+0x7a>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   1f6de:	4623      	mov	r3, r4
   1f6e0:	2201      	movs	r2, #1
   1f6e2:	f10d 0106 	add.w	r1, sp, #6
   1f6e6:	f10d 0007 	add.w	r0, sp, #7
   1f6ea:	f7ff fe24 	bl	1f336 <bmp3_set_regs>
            if (rslt == BMP3_OK)
   1f6ee:	2800      	cmp	r0, #0
   1f6f0:	d1e6      	bne.n	1f6c0 <bmp3_soft_reset+0x18>
                dev->delay_us(2000, dev->intf_ptr);
   1f6f2:	6963      	ldr	r3, [r4, #20]
   1f6f4:	6861      	ldr	r1, [r4, #4]
   1f6f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1f6fa:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   1f6fc:	4623      	mov	r3, r4
   1f6fe:	2201      	movs	r2, #1
   1f700:	a901      	add	r1, sp, #4
   1f702:	2002      	movs	r0, #2
   1f704:	f7ff fd9d 	bl	1f242 <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   1f708:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f70c:	f013 0f7e 	tst.w	r3, #126	; 0x7e
   1f710:	d10a      	bne.n	1f728 <bmp3_soft_reset+0x80>
   1f712:	2800      	cmp	r0, #0
   1f714:	d0d4      	beq.n	1f6c0 <bmp3_soft_reset+0x18>
                    rslt = BMP3_E_CMD_EXEC_FAILED;
   1f716:	f06f 0003 	mvn.w	r0, #3
   1f71a:	e7d1      	b.n	1f6c0 <bmp3_soft_reset+0x18>
            rslt = BMP3_E_CMD_EXEC_FAILED;
   1f71c:	f06f 0003 	mvn.w	r0, #3
   1f720:	e7ce      	b.n	1f6c0 <bmp3_soft_reset+0x18>
   1f722:	f06f 0003 	mvn.w	r0, #3
   1f726:	e7cb      	b.n	1f6c0 <bmp3_soft_reset+0x18>
                    rslt = BMP3_E_CMD_EXEC_FAILED;
   1f728:	f06f 0003 	mvn.w	r0, #3
   1f72c:	e7c8      	b.n	1f6c0 <bmp3_soft_reset+0x18>

0001f72e <bmp3_init>:
{
   1f72e:	b510      	push	{r4, lr}
   1f730:	b082      	sub	sp, #8
   1f732:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   1f734:	2300      	movs	r3, #0
   1f736:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   1f73a:	f7ff fd68 	bl	1f20e <null_ptr_check>
    if (rslt == BMP3_OK)
   1f73e:	b9b8      	cbnz	r0, 1f770 <bmp3_init+0x42>
        if (dev->intf != BMP3_I2C_INTF)
   1f740:	7a23      	ldrb	r3, [r4, #8]
   1f742:	2b01      	cmp	r3, #1
   1f744:	d016      	beq.n	1f774 <bmp3_init+0x46>
            dev->dummy_byte = 1;
   1f746:	2301      	movs	r3, #1
   1f748:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   1f74a:	4623      	mov	r3, r4
   1f74c:	2201      	movs	r2, #1
   1f74e:	f10d 0107 	add.w	r1, sp, #7
   1f752:	2000      	movs	r0, #0
   1f754:	f7ff fd75 	bl	1f242 <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1f758:	b950      	cbnz	r0, 1f770 <bmp3_init+0x42>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   1f75a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f75e:	2b50      	cmp	r3, #80	; 0x50
   1f760:	d001      	beq.n	1f766 <bmp3_init+0x38>
   1f762:	2b60      	cmp	r3, #96	; 0x60
   1f764:	d10d      	bne.n	1f782 <bmp3_init+0x54>
                dev->chip_id = chip_id;
   1f766:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   1f768:	4620      	mov	r0, r4
   1f76a:	f7ff ff9d 	bl	1f6a8 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   1f76e:	b120      	cbz	r0, 1f77a <bmp3_init+0x4c>
}
   1f770:	b002      	add	sp, #8
   1f772:	bd10      	pop	{r4, pc}
            dev->dummy_byte = 0;
   1f774:	2300      	movs	r3, #0
   1f776:	72a3      	strb	r3, [r4, #10]
   1f778:	e7e7      	b.n	1f74a <bmp3_init+0x1c>
                    rslt = get_calib_data(dev);
   1f77a:	4620      	mov	r0, r4
   1f77c:	f7ff fda6 	bl	1f2cc <get_calib_data>
   1f780:	e7f6      	b.n	1f770 <bmp3_init+0x42>
                rslt = BMP3_E_DEV_NOT_FOUND;
   1f782:	f06f 0001 	mvn.w	r0, #1
   1f786:	e7f3      	b.n	1f770 <bmp3_init+0x42>

0001f788 <bmp3_get_op_mode>:
{
   1f788:	b538      	push	{r3, r4, r5, lr}
   1f78a:	4604      	mov	r4, r0
   1f78c:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   1f78e:	4608      	mov	r0, r1
   1f790:	f7ff fd3d 	bl	1f20e <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   1f794:	b958      	cbnz	r0, 1f7ae <bmp3_get_op_mode+0x26>
   1f796:	b16c      	cbz	r4, 1f7b4 <bmp3_get_op_mode+0x2c>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   1f798:	462b      	mov	r3, r5
   1f79a:	2201      	movs	r2, #1
   1f79c:	4621      	mov	r1, r4
   1f79e:	201b      	movs	r0, #27
   1f7a0:	f7ff fd4f 	bl	1f242 <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   1f7a4:	7823      	ldrb	r3, [r4, #0]
   1f7a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1f7aa:	7023      	strb	r3, [r4, #0]
}
   1f7ac:	bd38      	pop	{r3, r4, r5, pc}
        rslt = BMP3_E_NULL_PTR;
   1f7ae:	f04f 30ff 	mov.w	r0, #4294967295
   1f7b2:	e7fb      	b.n	1f7ac <bmp3_get_op_mode+0x24>
   1f7b4:	f04f 30ff 	mov.w	r0, #4294967295
   1f7b8:	e7f8      	b.n	1f7ac <bmp3_get_op_mode+0x24>

0001f7ba <bmp3_set_op_mode>:
{
   1f7ba:	b570      	push	{r4, r5, r6, lr}
   1f7bc:	b082      	sub	sp, #8
   1f7be:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1f7c0:	f7ff fd25 	bl	1f20e <null_ptr_check>
    if (rslt == BMP3_OK)
   1f7c4:	4605      	mov	r5, r0
   1f7c6:	b110      	cbz	r0, 1f7ce <bmp3_set_op_mode+0x14>
}
   1f7c8:	4628      	mov	r0, r5
   1f7ca:	b002      	add	sp, #8
   1f7cc:	bd70      	pop	{r4, r5, r6, pc}
        uint8_t curr_mode = dev->settings.op_mode;
   1f7ce:	f894 60b0 	ldrb.w	r6, [r4, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f7d2:	4621      	mov	r1, r4
   1f7d4:	f10d 0007 	add.w	r0, sp, #7
   1f7d8:	f7ff ffd6 	bl	1f788 <bmp3_get_op_mode>
   1f7dc:	4605      	mov	r5, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f7de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f7e2:	b953      	cbnz	r3, 1f7fa <bmp3_set_op_mode+0x40>
        if (rslt == BMP3_OK)
   1f7e4:	2d00      	cmp	r5, #0
   1f7e6:	d1ef      	bne.n	1f7c8 <bmp3_set_op_mode+0xe>
            if (curr_mode == BMP3_MODE_NORMAL)
   1f7e8:	2e03      	cmp	r6, #3
   1f7ea:	d010      	beq.n	1f80e <bmp3_set_op_mode+0x54>
            else if (curr_mode == BMP3_MODE_FORCED)
   1f7ec:	2e01      	cmp	r6, #1
   1f7ee:	d1eb      	bne.n	1f7c8 <bmp3_set_op_mode+0xe>
                rslt = write_power_mode(dev);
   1f7f0:	4620      	mov	r0, r4
   1f7f2:	f7ff fedb 	bl	1f5ac <write_power_mode>
   1f7f6:	4605      	mov	r5, r0
   1f7f8:	e7e6      	b.n	1f7c8 <bmp3_set_op_mode+0xe>
            rslt = put_device_to_sleep(dev);
   1f7fa:	4620      	mov	r0, r4
   1f7fc:	f7ff feb8 	bl	1f570 <put_device_to_sleep>
   1f800:	4605      	mov	r5, r0
            dev->delay_us(5000, dev->intf_ptr);
   1f802:	6963      	ldr	r3, [r4, #20]
   1f804:	6861      	ldr	r1, [r4, #4]
   1f806:	f241 3088 	movw	r0, #5000	; 0x1388
   1f80a:	4798      	blx	r3
   1f80c:	e7ea      	b.n	1f7e4 <bmp3_set_op_mode+0x2a>
                rslt = set_normal_mode(dev);
   1f80e:	4620      	mov	r0, r4
   1f810:	f7ff fef1 	bl	1f5f6 <set_normal_mode>
   1f814:	4605      	mov	r5, r0
   1f816:	e7d7      	b.n	1f7c8 <bmp3_set_op_mode+0xe>

0001f818 <bmp3_get_sensor_data>:
{
   1f818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f81a:	b085      	sub	sp, #20
   1f81c:	4606      	mov	r6, r0
   1f81e:	460d      	mov	r5, r1
   1f820:	4614      	mov	r4, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f822:	2300      	movs	r3, #0
   1f824:	9302      	str	r3, [sp, #8]
   1f826:	f8ad 300c 	strh.w	r3, [sp, #12]
    struct bmp3_uncomp_data uncomp_data = { 0 };
   1f82a:	9300      	str	r3, [sp, #0]
   1f82c:	9301      	str	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   1f82e:	4610      	mov	r0, r2
   1f830:	f7ff fced 	bl	1f20e <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   1f834:	b9d0      	cbnz	r0, 1f86c <bmp3_get_sensor_data+0x54>
   1f836:	b1e5      	cbz	r5, 1f872 <bmp3_get_sensor_data+0x5a>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   1f838:	4623      	mov	r3, r4
   1f83a:	2206      	movs	r2, #6
   1f83c:	a902      	add	r1, sp, #8
   1f83e:	2004      	movs	r0, #4
   1f840:	f7ff fcff 	bl	1f242 <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1f844:	4607      	mov	r7, r0
   1f846:	b110      	cbz	r0, 1f84e <bmp3_get_sensor_data+0x36>
}
   1f848:	4638      	mov	r0, r7
   1f84a:	b005      	add	sp, #20
   1f84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            parse_sensor_data(reg_data, &uncomp_data);
   1f84e:	4669      	mov	r1, sp
   1f850:	a802      	add	r0, sp, #8
   1f852:	f7ff fba6 	bl	1efa2 <parse_sensor_data>
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f856:	f104 0318 	add.w	r3, r4, #24
   1f85a:	462a      	mov	r2, r5
   1f85c:	4669      	mov	r1, sp
   1f85e:	4630      	mov	r0, r6
   1f860:	f7ff fca7 	bl	1f1b2 <compensate_data>
   1f864:	4607      	mov	r7, r0
            printk();
   1f866:	f000 fa06 	bl	1fc76 <printk>
   1f86a:	e7ed      	b.n	1f848 <bmp3_get_sensor_data+0x30>
        rslt = BMP3_E_NULL_PTR;
   1f86c:	f04f 37ff 	mov.w	r7, #4294967295
   1f870:	e7ea      	b.n	1f848 <bmp3_get_sensor_data+0x30>
   1f872:	f04f 37ff 	mov.w	r7, #4294967295
   1f876:	e7e7      	b.n	1f848 <bmp3_get_sensor_data+0x30>

0001f878 <app_i2c_read>:
static BMP3_INTF_RET_TYPE app_i2c_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr) {
   1f878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f87c:	b086      	sub	sp, #24
   1f87e:	460f      	mov	r7, r1
   1f880:	4616      	mov	r6, r2
   1f882:	461c      	mov	r4, r3
   1f884:	f88d 0007 	strb.w	r0, [sp, #7]
	msg.buf = (uint8_t *)buf;
   1f888:	f10d 0307 	add.w	r3, sp, #7
   1f88c:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1f88e:	2501      	movs	r5, #1
   1f890:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f892:	2302      	movs	r3, #2
   1f894:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   1f898:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f89a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f89e:	2376      	movs	r3, #118	; 0x76
   1f8a0:	462a      	mov	r2, r5
   1f8a2:	a903      	add	r1, sp, #12
   1f8a4:	4620      	mov	r0, r4
   1f8a6:	47c0      	blx	r8
	msg.buf = buf;
   1f8a8:	9703      	str	r7, [sp, #12]
	msg.len = num_bytes;
   1f8aa:	9604      	str	r6, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f8ac:	2303      	movs	r3, #3
   1f8ae:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct i2c_driver_api *api =
   1f8b2:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f8b4:	689e      	ldr	r6, [r3, #8]
   1f8b6:	2376      	movs	r3, #118	; 0x76
   1f8b8:	462a      	mov	r2, r5
   1f8ba:	a903      	add	r1, sp, #12
   1f8bc:	4620      	mov	r0, r4
   1f8be:	47b0      	blx	r6
}
   1f8c0:	b240      	sxtb	r0, r0
   1f8c2:	b006      	add	sp, #24
   1f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f8c8 <app_us_delay>:
static void app_us_delay(uint32_t period, void *intf_ptr) {
   1f8c8:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1f8ca:	f005 fe0a 	bl	254e2 <z_impl_k_busy_wait>
}
   1f8ce:	bd08      	pop	{r3, pc}

0001f8d0 <app_i2c_write>:
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8d2:	b085      	sub	sp, #20
   1f8d4:	af00      	add	r7, sp, #0
   1f8d6:	4614      	mov	r4, r2
   1f8d8:	461d      	mov	r5, r3
	uint8_t dataBuffer[len+1];
   1f8da:	1c56      	adds	r6, r2, #1
   1f8dc:	3408      	adds	r4, #8
   1f8de:	f024 0407 	bic.w	r4, r4, #7
   1f8e2:	ebad 0d04 	sub.w	sp, sp, r4
	dataBuffer[0]=reg_addr;
   1f8e6:	466b      	mov	r3, sp
   1f8e8:	f803 0b01 	strb.w	r0, [r3], #1
   1f8ec:	4618      	mov	r0, r3
   1f8ee:	f005 ff1a 	bl	25726 <memcpy>
	msg.buf = (uint8_t *)buf;
   1f8f2:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   1f8f6:	60be      	str	r6, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f8f8:	2302      	movs	r3, #2
   1f8fa:	733b      	strb	r3, [r7, #12]
	const struct i2c_driver_api *api =
   1f8fc:	68ab      	ldr	r3, [r5, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f8fe:	689c      	ldr	r4, [r3, #8]
   1f900:	2376      	movs	r3, #118	; 0x76
   1f902:	2201      	movs	r2, #1
   1f904:	1d39      	adds	r1, r7, #4
   1f906:	4628      	mov	r0, r5
   1f908:	47a0      	blx	r4
}
   1f90a:	b240      	sxtb	r0, r0
   1f90c:	3714      	adds	r7, #20
   1f90e:	46bd      	mov	sp, r7
   1f910:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f912 <transceive>:
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f916:	b085      	sub	sp, #20
   1f918:	af00      	add	r7, sp, #0
   1f91a:	461d      	mov	r5, r3
   1f91c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
  uint8_t rxbuf2[rxlen + 2];
   1f91e:	f103 0b01 	add.w	fp, r3, #1
   1f922:	3309      	adds	r3, #9
   1f924:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   1f928:	ebad 0d03 	sub.w	sp, sp, r3
  if (mlx_device_t == NULL) {
   1f92c:	2c00      	cmp	r4, #0
   1f92e:	d045      	beq.n	1f9bc <transceive+0xaa>
   1f930:	4682      	mov	sl, r0
   1f932:	4689      	mov	r9, r1
   1f934:	4690      	mov	r8, r2
   1f936:	466e      	mov	r6, sp
   1f938:	4620      	mov	r0, r4
   1f93a:	f005 f83c 	bl	249b6 <z_device_ready>
   1f93e:	2800      	cmp	r0, #0
   1f940:	d03e      	beq.n	1f9c0 <transceive+0xae>
	msg.buf = (uint8_t *)buf;
   1f942:	f8c7 a004 	str.w	sl, [r7, #4]
	msg.len = num_bytes;
   1f946:	f8c7 9008 	str.w	r9, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f94a:	2302      	movs	r3, #2
   1f94c:	733b      	strb	r3, [r7, #12]
	const struct i2c_driver_api *api =
   1f94e:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f950:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1f954:	230c      	movs	r3, #12
   1f956:	2201      	movs	r2, #1
   1f958:	1d39      	adds	r1, r7, #4
   1f95a:	4620      	mov	r0, r4
   1f95c:	47c8      	blx	r9
  if (i2c_write(mlx_device_t,txbuf, txlen, MLX90393_DEFAULT_ADDR)) {
   1f95e:	bb88      	cbnz	r0, 1f9c4 <transceive+0xb2>
   1f960:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
   1f964:	03c9      	lsls	r1, r1, #15
   1f966:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f96a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f96e:	2300      	movs	r3, #0
   1f970:	1808      	adds	r0, r1, r0
   1f972:	f04f 0c00 	mov.w	ip, #0
   1f976:	eb4c 010c 	adc.w	r1, ip, ip
   1f97a:	f7e1 fa37 	bl	dec <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1f97e:	f7fc f831 	bl	1b9e4 <z_impl_k_sleep>
	msg.buf = buf;
   1f982:	607e      	str	r6, [r7, #4]
	msg.len = num_bytes;
   1f984:	f8c7 b008 	str.w	fp, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f988:	2303      	movs	r3, #3
   1f98a:	733b      	strb	r3, [r7, #12]
	const struct i2c_driver_api *api =
   1f98c:	68a3      	ldr	r3, [r4, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f98e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1f992:	230c      	movs	r3, #12
   1f994:	2201      	movs	r2, #1
   1f996:	1d39      	adds	r1, r7, #4
   1f998:	4620      	mov	r0, r4
   1f99a:	47c8      	blx	r9
  if (i2c_read(mlx_device_t,rxbuf2, rxlen + 1,MLX90393_DEFAULT_ADDR)) {
   1f99c:	b9a0      	cbnz	r0, 1f9c8 <transceive+0xb6>
  status = rxbuf2[0];
   1f99e:	7830      	ldrb	r0, [r6, #0]
  for (i = 0; i < rxlen; i++) {
   1f9a0:	2100      	movs	r1, #0
   1f9a2:	e004      	b.n	1f9ae <transceive+0x9c>
    rxbuf[i] = rxbuf2[i + 1];
   1f9a4:	1c4c      	adds	r4, r1, #1
   1f9a6:	5d33      	ldrb	r3, [r6, r4]
   1f9a8:	f808 3001 	strb.w	r3, [r8, r1]
  for (i = 0; i < rxlen; i++) {
   1f9ac:	b2e1      	uxtb	r1, r4
   1f9ae:	42a9      	cmp	r1, r5
   1f9b0:	d3f8      	bcc.n	1f9a4 <transceive+0x92>
  return (status >> 2);
   1f9b2:	0880      	lsrs	r0, r0, #2
}
   1f9b4:	3714      	adds	r7, #20
   1f9b6:	46bd      	mov	sp, r7
   1f9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   1f9bc:	2000      	movs	r0, #0
   1f9be:	e7f9      	b.n	1f9b4 <transceive+0xa2>
    return false;
   1f9c0:	2000      	movs	r0, #0
   1f9c2:	e7f7      	b.n	1f9b4 <transceive+0xa2>
    return MLX90393_STATUS_ERROR;
   1f9c4:	20ff      	movs	r0, #255	; 0xff
   1f9c6:	e7f5      	b.n	1f9b4 <transceive+0xa2>
    return MLX90393_STATUS_ERROR;
   1f9c8:	20ff      	movs	r0, #255	; 0xff
   1f9ca:	e7f3      	b.n	1f9b4 <transceive+0xa2>

0001f9cc <writeRegister>:
bool writeRegister(uint8_t reg, uint16_t data, struct device *mlx_device_t) {
   1f9cc:	b500      	push	{lr}
   1f9ce:	b085      	sub	sp, #20
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f9d0:	2360      	movs	r3, #96	; 0x60
   1f9d2:	f88d 300c 	strb.w	r3, [sp, #12]
   1f9d6:	0a0b      	lsrs	r3, r1, #8
   1f9d8:	f88d 300d 	strb.w	r3, [sp, #13]
   1f9dc:	f88d 100e 	strb.w	r1, [sp, #14]
                   reg << 2};   // the register itself, shift up by 2 bits!
   1f9e0:	0080      	lsls	r0, r0, #2
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f9e2:	f88d 000f 	strb.w	r0, [sp, #15]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f9e6:	9201      	str	r2, [sp, #4]
   1f9e8:	2200      	movs	r2, #0
   1f9ea:	9200      	str	r2, [sp, #0]
   1f9ec:	4613      	mov	r3, r2
   1f9ee:	2104      	movs	r1, #4
   1f9f0:	a803      	add	r0, sp, #12
   1f9f2:	f7ff ff8e 	bl	1f912 <transceive>
}
   1f9f6:	fab0 f080 	clz	r0, r0
   1f9fa:	0940      	lsrs	r0, r0, #5
   1f9fc:	b005      	add	sp, #20
   1f9fe:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa02 <readRegister>:
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1fa02:	b510      	push	{r4, lr}
   1fa04:	b084      	sub	sp, #16
   1fa06:	460c      	mov	r4, r1
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1fa08:	2350      	movs	r3, #80	; 0x50
   1fa0a:	f88d 300c 	strb.w	r3, [sp, #12]
   1fa0e:	0080      	lsls	r0, r0, #2
   1fa10:	f88d 000d 	strb.w	r0, [sp, #13]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1fa14:	9201      	str	r2, [sp, #4]
   1fa16:	2300      	movs	r3, #0
   1fa18:	9300      	str	r3, [sp, #0]
   1fa1a:	2302      	movs	r3, #2
   1fa1c:	aa02      	add	r2, sp, #8
   1fa1e:	4619      	mov	r1, r3
   1fa20:	a803      	add	r0, sp, #12
   1fa22:	f7ff ff76 	bl	1f912 <transceive>
   1fa26:	b948      	cbnz	r0, 1fa3c <readRegister+0x3a>
  *data = ((uint16_t)rx[0] << 8) | rx[1];
   1fa28:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1fa2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1fa30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fa34:	8023      	strh	r3, [r4, #0]
  return true;
   1fa36:	2001      	movs	r0, #1
}
   1fa38:	b004      	add	sp, #16
   1fa3a:	bd10      	pop	{r4, pc}
    return false;
   1fa3c:	2000      	movs	r0, #0
   1fa3e:	e7fb      	b.n	1fa38 <readRegister+0x36>

0001fa40 <mlx_exitMode>:
bool mlx_exitMode(struct device *mlx_device_t) {
   1fa40:	b500      	push	{lr}
   1fa42:	b085      	sub	sp, #20
  uint8_t tx[1] = {MLX90393_REG_EX};
   1fa44:	2380      	movs	r3, #128	; 0x80
   1fa46:	f88d 300c 	strb.w	r3, [sp, #12]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1fa4a:	9001      	str	r0, [sp, #4]
   1fa4c:	2200      	movs	r2, #0
   1fa4e:	9200      	str	r2, [sp, #0]
   1fa50:	4613      	mov	r3, r2
   1fa52:	2101      	movs	r1, #1
   1fa54:	a803      	add	r0, sp, #12
   1fa56:	f7ff ff5c 	bl	1f912 <transceive>
}
   1fa5a:	fab0 f080 	clz	r0, r0
   1fa5e:	0940      	lsrs	r0, r0, #5
   1fa60:	b005      	add	sp, #20
   1fa62:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa66 <mlx_reset>:
bool mlx_reset(struct device *mlx_device_t) {
   1fa66:	b500      	push	{lr}
   1fa68:	b085      	sub	sp, #20
  uint8_t tx[1] = {MLX90393_REG_RT};
   1fa6a:	23f0      	movs	r3, #240	; 0xf0
   1fa6c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (transceive(tx, sizeof(tx), NULL, 0, 5, mlx_device_t) != MLX90393_STATUS_RESET) {
   1fa70:	9001      	str	r0, [sp, #4]
   1fa72:	2305      	movs	r3, #5
   1fa74:	9300      	str	r3, [sp, #0]
   1fa76:	2300      	movs	r3, #0
   1fa78:	461a      	mov	r2, r3
   1fa7a:	2101      	movs	r1, #1
   1fa7c:	a803      	add	r0, sp, #12
   1fa7e:	f7ff ff48 	bl	1f912 <transceive>
   1fa82:	2801      	cmp	r0, #1
   1fa84:	d000      	beq.n	1fa88 <mlx_reset+0x22>
    return false;
   1fa86:	2000      	movs	r0, #0
}
   1fa88:	b005      	add	sp, #20
   1fa8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa8e <mlx_setTrigInt>:
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1fa8e:	b530      	push	{r4, r5, lr}
   1fa90:	b083      	sub	sp, #12
   1fa92:	4605      	mov	r5, r0
   1fa94:	460c      	mov	r4, r1
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1fa96:	460a      	mov	r2, r1
   1fa98:	f10d 0106 	add.w	r1, sp, #6
   1fa9c:	2001      	movs	r0, #1
   1fa9e:	f7ff ffb0 	bl	1fa02 <readRegister>
  data &= ~0x8000;
   1faa2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1faa6:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1faaa:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (state) {
   1faae:	b12d      	cbz	r5, 1fabc <mlx_setTrigInt+0x2e>
    data |= 0x8000;
   1fab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1fab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1fab8:	f8ad 3006 	strh.w	r3, [sp, #6]
  return writeRegister(MLX90393_CONF2, data, mlx_device_t);
   1fabc:	4622      	mov	r2, r4
   1fabe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1fac2:	2001      	movs	r0, #1
   1fac4:	f7ff ff82 	bl	1f9cc <writeRegister>
}
   1fac8:	b003      	add	sp, #12
   1faca:	bd30      	pop	{r4, r5, pc}

0001facc <startSingleMeasurement>:
uint8_t startSingleMeasurement(struct device *mlx_device_t) {
   1facc:	b500      	push	{lr}
   1face:	b085      	sub	sp, #20
  uint8_t tx[1] = {MLX90393_REG_SM | MLX90393_AXIS_ALL};
   1fad0:	233e      	movs	r3, #62	; 0x3e
   1fad2:	f88d 300c 	strb.w	r3, [sp, #12]
  uint8_t stat = transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t);
   1fad6:	9001      	str	r0, [sp, #4]
   1fad8:	2200      	movs	r2, #0
   1fada:	9200      	str	r2, [sp, #0]
   1fadc:	4613      	mov	r3, r2
   1fade:	2101      	movs	r1, #1
   1fae0:	a803      	add	r0, sp, #12
   1fae2:	f7ff ff16 	bl	1f912 <transceive>
}
   1fae6:	b005      	add	sp, #20
   1fae8:	f85d fb04 	ldr.w	pc, [sp], #4

0001faec <startBurstMode>:
uint8_t startBurstMode(struct device *mlx_device_t){
   1faec:	b500      	push	{lr}
   1faee:	b085      	sub	sp, #20
    uint8_t tx[1] = {MLX90393_REG_SB | MLX90393_AXIS_ALL};  
   1faf0:	231e      	movs	r3, #30
   1faf2:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t stat = transceive(tx, sizeof(tx), NULL, 0, 0,mlx_device_t);
   1faf6:	9001      	str	r0, [sp, #4]
   1faf8:	2200      	movs	r2, #0
   1fafa:	9200      	str	r2, [sp, #0]
   1fafc:	4613      	mov	r3, r2
   1fafe:	2101      	movs	r1, #1
   1fb00:	a803      	add	r0, sp, #12
   1fb02:	f7ff ff06 	bl	1f912 <transceive>
    if ((stat == MLX90393_STATUS_OK) || (stat == MLX90393_STATUS_SMMODE)) {
   1fb06:	b128      	cbz	r0, 1fb14 <startBurstMode+0x28>
   1fb08:	2808      	cmp	r0, #8
   1fb0a:	d005      	beq.n	1fb18 <startBurstMode+0x2c>
    return false;  
   1fb0c:	2000      	movs	r0, #0
}
   1fb0e:	b005      	add	sp, #20
   1fb10:	f85d fb04 	ldr.w	pc, [sp], #4
        return true;
   1fb14:	2001      	movs	r0, #1
   1fb16:	e7fa      	b.n	1fb0e <startBurstMode+0x22>
   1fb18:	2001      	movs	r0, #1
   1fb1a:	e7f8      	b.n	1fb0e <startBurstMode+0x22>

0001fb1c <mlx_init>:
bool mlx_init(struct device *mlx_device) {

	//const struct device *mlx_device = device_get_binding("I2C_1");
  

  if (mlx_device == NULL) {
   1fb1c:	2800      	cmp	r0, #0
   1fb1e:	d045      	beq.n	1fbac <mlx_init+0x90>
bool mlx_init(struct device *mlx_device) {
   1fb20:	b510      	push	{r4, lr}
   1fb22:	4604      	mov	r4, r0
   1fb24:	f004 ff47 	bl	249b6 <z_device_ready>
   1fb28:	4603      	mov	r3, r0
   1fb2a:	b120      	cbz	r0, 1fb36 <mlx_init+0x1a>

  if (!device_is_ready(mlx_device)) {
    return false;
  }

  if (!mlx_exitMode(mlx_device)){
   1fb2c:	4620      	mov	r0, r4
   1fb2e:	f7ff ff87 	bl	1fa40 <mlx_exitMode>
   1fb32:	4603      	mov	r3, r0
   1fb34:	b908      	cbnz	r0, 1fb3a <mlx_init+0x1e>
  }

  

  return true;
   1fb36:	4618      	mov	r0, r3
   1fb38:	bd10      	pop	{r4, pc}
  if (!mlx_reset(mlx_device)) {
   1fb3a:	4620      	mov	r0, r4
   1fb3c:	f7ff ff93 	bl	1fa66 <mlx_reset>
   1fb40:	4603      	mov	r3, r0
   1fb42:	2800      	cmp	r0, #0
   1fb44:	d0f7      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setGain(MLX90393_GAIN_1X, mlx_device)) {
   1fb46:	4621      	mov	r1, r4
   1fb48:	2007      	movs	r0, #7
   1fb4a:	f7f1 fd51 	bl	115f0 <mlx_setGain>
   1fb4e:	4603      	mov	r3, r0
   1fb50:	2800      	cmp	r0, #0
   1fb52:	d0f0      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setResolution(MLX90393_X, MLX90393_RES_16, mlx_device)){
   1fb54:	4622      	mov	r2, r4
   1fb56:	2100      	movs	r1, #0
   1fb58:	4608      	mov	r0, r1
   1fb5a:	f7f1 fd67 	bl	1162c <mlx_setResolution>
   1fb5e:	4603      	mov	r3, r0
   1fb60:	2800      	cmp	r0, #0
   1fb62:	d0e8      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setResolution(MLX90393_Y, MLX90393_RES_16, mlx_device)){
   1fb64:	4622      	mov	r2, r4
   1fb66:	2100      	movs	r1, #0
   1fb68:	2001      	movs	r0, #1
   1fb6a:	f7f1 fd5f 	bl	1162c <mlx_setResolution>
   1fb6e:	4603      	mov	r3, r0
   1fb70:	2800      	cmp	r0, #0
   1fb72:	d0e0      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setResolution(MLX90393_Z, MLX90393_RES_16, mlx_device)){
   1fb74:	4622      	mov	r2, r4
   1fb76:	2100      	movs	r1, #0
   1fb78:	2002      	movs	r0, #2
   1fb7a:	f7f1 fd57 	bl	1162c <mlx_setResolution>
   1fb7e:	4603      	mov	r3, r0
   1fb80:	2800      	cmp	r0, #0
   1fb82:	d0d8      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setOversampling(MLX90393_OSR_3, mlx_device)) {
   1fb84:	4621      	mov	r1, r4
   1fb86:	2003      	movs	r0, #3
   1fb88:	f7f1 fdb0 	bl	116ec <mlx_setOversampling>
   1fb8c:	4603      	mov	r3, r0
   1fb8e:	2800      	cmp	r0, #0
   1fb90:	d0d1      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setFilter(MLX90393_FILTER_7, mlx_device)) {
   1fb92:	4621      	mov	r1, r4
   1fb94:	2007      	movs	r0, #7
   1fb96:	f7f1 fd8b 	bl	116b0 <mlx_setFilter>
   1fb9a:	4603      	mov	r3, r0
   1fb9c:	2800      	cmp	r0, #0
   1fb9e:	d0ca      	beq.n	1fb36 <mlx_init+0x1a>
  if (!mlx_setTrigInt(true, mlx_device)) {
   1fba0:	4621      	mov	r1, r4
   1fba2:	2001      	movs	r0, #1
   1fba4:	f7ff ff73 	bl	1fa8e <mlx_setTrigInt>
   1fba8:	4603      	mov	r3, r0
   1fbaa:	e7c4      	b.n	1fb36 <mlx_init+0x1a>
    return false;
   1fbac:	2300      	movs	r3, #0
   1fbae:	4618      	mov	r0, r3
   1fbb0:	4770      	bx	lr

0001fbb2 <gpio_pin_set_raw>:
{
   1fbb2:	b508      	push	{r3, lr}
	if (value != 0)	{
   1fbb4:	b132      	cbz	r2, 1fbc4 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1fbb6:	2301      	movs	r3, #1
   1fbb8:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1fbbc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   1fbbe:	68db      	ldr	r3, [r3, #12]
   1fbc0:	4798      	blx	r3
}
   1fbc2:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
   1fbc4:	2301      	movs	r3, #1
   1fbc6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
   1fbca:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1fbcc:	691b      	ldr	r3, [r3, #16]
   1fbce:	4798      	blx	r3
	return ret;
   1fbd0:	e7f7      	b.n	1fbc2 <gpio_pin_set_raw+0x10>

0001fbd2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1fbd2:	4602      	mov	r2, r0
   1fbd4:	b1b0      	cbz	r0, 1fc04 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1fbd6:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1fbd8:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1fbdc:	2b02      	cmp	r3, #2
   1fbde:	d00b      	beq.n	1fbf8 <sys_notify_validate+0x26>
   1fbe0:	2b03      	cmp	r3, #3
   1fbe2:	d004      	beq.n	1fbee <sys_notify_validate+0x1c>
   1fbe4:	2b01      	cmp	r3, #1
   1fbe6:	d004      	beq.n	1fbf2 <sys_notify_validate+0x20>
   1fbe8:	f06f 0015 	mvn.w	r0, #21
   1fbec:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1fbee:	6803      	ldr	r3, [r0, #0]
   1fbf0:	b15b      	cbz	r3, 1fc0a <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1fbf2:	2000      	movs	r0, #0
   1fbf4:	6090      	str	r0, [r2, #8]
   1fbf6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1fbf8:	6803      	ldr	r3, [r0, #0]
   1fbfa:	2b00      	cmp	r3, #0
   1fbfc:	d1f9      	bne.n	1fbf2 <sys_notify_validate+0x20>
			rv = -EINVAL;
   1fbfe:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1fc02:	4770      	bx	lr
		return -EINVAL;
   1fc04:	f06f 0015 	mvn.w	r0, #21
   1fc08:	4770      	bx	lr
			rv = -EINVAL;
   1fc0a:	f06f 0015 	mvn.w	r0, #21
   1fc0e:	4770      	bx	lr

0001fc10 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1fc10:	b510      	push	{r4, lr}
   1fc12:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1fc14:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1fc16:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1fc1a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1fc1c:	2a02      	cmp	r2, #2
   1fc1e:	d004      	beq.n	1fc2a <sys_notify_finalize+0x1a>
   1fc20:	2a03      	cmp	r2, #3
   1fc22:	d105      	bne.n	1fc30 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1fc24:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1fc26:	2000      	movs	r0, #0
		break;
   1fc28:	e004      	b.n	1fc34 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1fc2a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1fc2c:	2400      	movs	r4, #0
		break;
   1fc2e:	e001      	b.n	1fc34 <sys_notify_finalize+0x24>
	switch (method) {
   1fc30:	2400      	movs	r4, #0
   1fc32:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1fc34:	2200      	movs	r2, #0
   1fc36:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1fc38:	b108      	cbz	r0, 1fc3e <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   1fc3a:	f7fc fc39 	bl	1c4b0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1fc3e:	4620      	mov	r0, r4
   1fc40:	bd10      	pop	{r4, pc}

0001fc42 <arch_printk_char_out>:
}
   1fc42:	2000      	movs	r0, #0
   1fc44:	4770      	bx	lr

0001fc46 <str_out>:
{
   1fc46:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1fc48:	680c      	ldr	r4, [r1, #0]
   1fc4a:	b154      	cbz	r4, 1fc62 <str_out+0x1c>
   1fc4c:	688a      	ldr	r2, [r1, #8]
   1fc4e:	684b      	ldr	r3, [r1, #4]
   1fc50:	429a      	cmp	r2, r3
   1fc52:	da06      	bge.n	1fc62 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1fc54:	3b01      	subs	r3, #1
   1fc56:	429a      	cmp	r2, r3
   1fc58:	d008      	beq.n	1fc6c <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1fc5a:	1c53      	adds	r3, r2, #1
   1fc5c:	608b      	str	r3, [r1, #8]
   1fc5e:	54a0      	strb	r0, [r4, r2]
   1fc60:	e002      	b.n	1fc68 <str_out+0x22>
		ctx->count++;
   1fc62:	688b      	ldr	r3, [r1, #8]
   1fc64:	3301      	adds	r3, #1
   1fc66:	608b      	str	r3, [r1, #8]
}
   1fc68:	bc10      	pop	{r4}
   1fc6a:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1fc6c:	1c53      	adds	r3, r2, #1
   1fc6e:	608b      	str	r3, [r1, #8]
   1fc70:	2300      	movs	r3, #0
   1fc72:	54a3      	strb	r3, [r4, r2]
   1fc74:	e7f8      	b.n	1fc68 <str_out+0x22>

0001fc76 <printk>:
{
   1fc76:	b40f      	push	{r0, r1, r2, r3}
   1fc78:	b500      	push	{lr}
   1fc7a:	b083      	sub	sp, #12
   1fc7c:	a904      	add	r1, sp, #16
   1fc7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1fc82:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1fc84:	f7f1 feee 	bl	11a64 <vprintk>
}
   1fc88:	b003      	add	sp, #12
   1fc8a:	f85d eb04 	ldr.w	lr, [sp], #4
   1fc8e:	b004      	add	sp, #16
   1fc90:	4770      	bx	lr

0001fc92 <snprintk>:
{
   1fc92:	b40c      	push	{r2, r3}
   1fc94:	b500      	push	{lr}
   1fc96:	b083      	sub	sp, #12
   1fc98:	ab04      	add	r3, sp, #16
   1fc9a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1fc9e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1fca0:	f7f1 fef0 	bl	11a84 <vsnprintk>
}
   1fca4:	b003      	add	sp, #12
   1fca6:	f85d eb04 	ldr.w	lr, [sp], #4
   1fcaa:	b002      	add	sp, #8
   1fcac:	4770      	bx	lr

0001fcae <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1fcae:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1fcb2:	8b01      	ldrh	r1, [r0, #24]
   1fcb4:	f021 0107 	bic.w	r1, r1, #7
   1fcb8:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1fcba:	8301      	strh	r1, [r0, #24]
}
   1fcbc:	4770      	bx	lr

0001fcbe <notify_monitors>:
{
   1fcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fcc2:	4606      	mov	r6, r0
   1fcc4:	460f      	mov	r7, r1
   1fcc6:	4690      	mov	r8, r2
	return list->head;
   1fcc8:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fcca:	b119      	cbz	r1, 1fcd4 <notify_monitors+0x16>
   1fccc:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fcce:	b131      	cbz	r1, 1fcde <notify_monitors+0x20>
	return node->next;
   1fcd0:	680c      	ldr	r4, [r1, #0]
   1fcd2:	e004      	b.n	1fcde <notify_monitors+0x20>
   1fcd4:	460c      	mov	r4, r1
   1fcd6:	e002      	b.n	1fcde <notify_monitors+0x20>
   1fcd8:	4623      	mov	r3, r4
   1fcda:	4621      	mov	r1, r4
   1fcdc:	461c      	mov	r4, r3
   1fcde:	b159      	cbz	r1, 1fcf8 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1fce0:	684d      	ldr	r5, [r1, #4]
   1fce2:	4643      	mov	r3, r8
   1fce4:	463a      	mov	r2, r7
   1fce6:	4630      	mov	r0, r6
   1fce8:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fcea:	2c00      	cmp	r4, #0
   1fcec:	d0f4      	beq.n	1fcd8 <notify_monitors+0x1a>
   1fcee:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fcf0:	2c00      	cmp	r4, #0
   1fcf2:	d0f2      	beq.n	1fcda <notify_monitors+0x1c>
	return node->next;
   1fcf4:	6823      	ldr	r3, [r4, #0]
   1fcf6:	e7f0      	b.n	1fcda <notify_monitors+0x1c>
}
   1fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fcfc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fcfc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1fcfe:	f013 0307 	ands.w	r3, r3, #7
   1fd02:	d103      	bne.n	1fd0c <process_recheck+0x10>
	return list->head;
   1fd04:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1fd06:	b10a      	cbz	r2, 1fd0c <process_recheck+0x10>
		evt = EVT_START;
   1fd08:	2003      	movs	r0, #3
   1fd0a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1fd0c:	2b02      	cmp	r3, #2
   1fd0e:	d003      	beq.n	1fd18 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1fd10:	2b01      	cmp	r3, #1
   1fd12:	d006      	beq.n	1fd22 <process_recheck+0x26>
	int evt = EVT_NOP;
   1fd14:	2000      	movs	r0, #0
   1fd16:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1fd18:	8b42      	ldrh	r2, [r0, #26]
   1fd1a:	2a00      	cmp	r2, #0
   1fd1c:	d1f8      	bne.n	1fd10 <process_recheck+0x14>
		evt = EVT_STOP;
   1fd1e:	2004      	movs	r0, #4
   1fd20:	4770      	bx	lr
   1fd22:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1fd24:	b10b      	cbz	r3, 1fd2a <process_recheck+0x2e>
		evt = EVT_RESET;
   1fd26:	2005      	movs	r0, #5
}
   1fd28:	4770      	bx	lr
	int evt = EVT_NOP;
   1fd2a:	2000      	movs	r0, #0
   1fd2c:	4770      	bx	lr

0001fd2e <process_complete>:
{
   1fd2e:	b538      	push	{r3, r4, r5, lr}
   1fd30:	4604      	mov	r4, r0
   1fd32:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fd34:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1fd36:	2a00      	cmp	r2, #0
   1fd38:	db07      	blt.n	1fd4a <process_complete+0x1c>
   1fd3a:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1fd3e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1fd40:	2a01      	cmp	r2, #1
   1fd42:	d90e      	bls.n	1fd62 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1fd44:	2b04      	cmp	r3, #4
   1fd46:	d032      	beq.n	1fdae <process_complete+0x80>
}
   1fd48:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   1fd4a:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fd4e:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1fd52:	2300      	movs	r3, #0
   1fd54:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1fd56:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1fd58:	2101      	movs	r1, #1
   1fd5a:	4620      	mov	r0, r4
   1fd5c:	f7ff ffa7 	bl	1fcae <set_state>
   1fd60:	e7f2      	b.n	1fd48 <process_complete+0x1a>
		*clients = mgr->clients;
   1fd62:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fd66:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1fd6a:	2200      	movs	r2, #0
   1fd6c:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1fd6e:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1fd70:	2b06      	cmp	r3, #6
   1fd72:	d117      	bne.n	1fda4 <process_complete+0x76>
	return list->head;
   1fd74:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fd76:	b13b      	cbz	r3, 1fd88 <process_complete+0x5a>
				mgr->refs += 1U;
   1fd78:	8b62      	ldrh	r2, [r4, #26]
   1fd7a:	3201      	adds	r2, #1
   1fd7c:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fd7e:	2b00      	cmp	r3, #0
   1fd80:	d0f9      	beq.n	1fd76 <process_complete+0x48>
	return node->next;
   1fd82:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fd84:	2b00      	cmp	r3, #0
   1fd86:	d1f6      	bne.n	1fd76 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1fd88:	2102      	movs	r1, #2
   1fd8a:	4620      	mov	r0, r4
   1fd8c:	f7ff ff8f 	bl	1fcae <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fd90:	4620      	mov	r0, r4
   1fd92:	f7ff ffb3 	bl	1fcfc <process_recheck>
   1fd96:	2800      	cmp	r0, #0
   1fd98:	d0d6      	beq.n	1fd48 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fd9a:	8b23      	ldrh	r3, [r4, #24]
   1fd9c:	f043 0320 	orr.w	r3, r3, #32
   1fda0:	8323      	strh	r3, [r4, #24]
   1fda2:	e7d1      	b.n	1fd48 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1fda4:	2100      	movs	r1, #0
   1fda6:	4620      	mov	r0, r4
   1fda8:	f7ff ff81 	bl	1fcae <set_state>
   1fdac:	e7f0      	b.n	1fd90 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1fdae:	2100      	movs	r1, #0
   1fdb0:	f7ff ff7d 	bl	1fcae <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fdb4:	4620      	mov	r0, r4
   1fdb6:	f7ff ffa1 	bl	1fcfc <process_recheck>
   1fdba:	2800      	cmp	r0, #0
   1fdbc:	d0c4      	beq.n	1fd48 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fdbe:	8b23      	ldrh	r3, [r4, #24]
   1fdc0:	f043 0320 	orr.w	r3, r3, #32
   1fdc4:	8323      	strh	r3, [r4, #24]
}
   1fdc6:	e7bf      	b.n	1fd48 <process_complete+0x1a>

0001fdc8 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1fdc8:	b158      	cbz	r0, 1fde2 <validate_args+0x1a>
{
   1fdca:	b510      	push	{r4, lr}
   1fdcc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1fdce:	b159      	cbz	r1, 1fde8 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1fdd0:	1d08      	adds	r0, r1, #4
   1fdd2:	f7ff fefe 	bl	1fbd2 <sys_notify_validate>
	if ((rv == 0)
   1fdd6:	b918      	cbnz	r0, 1fde0 <validate_args+0x18>
	    && ((cli->notify.flags
   1fdd8:	68a3      	ldr	r3, [r4, #8]
   1fdda:	f033 0303 	bics.w	r3, r3, #3
   1fdde:	d106      	bne.n	1fdee <validate_args+0x26>
}
   1fde0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fde2:	f06f 0015 	mvn.w	r0, #21
}
   1fde6:	4770      	bx	lr
		return -EINVAL;
   1fde8:	f06f 0015 	mvn.w	r0, #21
   1fdec:	e7f8      	b.n	1fde0 <validate_args+0x18>
		rv = -EINVAL;
   1fdee:	f06f 0015 	mvn.w	r0, #21
   1fdf2:	e7f5      	b.n	1fde0 <validate_args+0x18>

0001fdf4 <notify_one>:
{
   1fdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdf8:	4607      	mov	r7, r0
   1fdfa:	460c      	mov	r4, r1
   1fdfc:	4616      	mov	r6, r2
   1fdfe:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fe00:	4619      	mov	r1, r3
   1fe02:	1d20      	adds	r0, r4, #4
   1fe04:	f7ff ff04 	bl	1fc10 <sys_notify_finalize>
	if (cb) {
   1fe08:	b128      	cbz	r0, 1fe16 <notify_one+0x22>
   1fe0a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1fe0c:	462b      	mov	r3, r5
   1fe0e:	4632      	mov	r2, r6
   1fe10:	4621      	mov	r1, r4
   1fe12:	4638      	mov	r0, r7
   1fe14:	47c0      	blx	r8
}
   1fe16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fe1a <notify_all>:
{
   1fe1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fe1e:	4681      	mov	r9, r0
   1fe20:	460c      	mov	r4, r1
   1fe22:	4690      	mov	r8, r2
   1fe24:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   1fe26:	e005      	b.n	1fe34 <notify_all+0x1a>
	list->tail = node;
   1fe28:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   1fe2a:	463b      	mov	r3, r7
   1fe2c:	4642      	mov	r2, r8
   1fe2e:	4648      	mov	r0, r9
   1fe30:	f7ff ffe0 	bl	1fdf4 <notify_one>
	return list->head;
   1fe34:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1fe36:	b129      	cbz	r1, 1fe44 <notify_all+0x2a>
	return node->next;
   1fe38:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1fe3a:	6025      	str	r5, [r4, #0]
	return list->tail;
   1fe3c:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fe3e:	428e      	cmp	r6, r1
   1fe40:	d1f3      	bne.n	1fe2a <notify_all+0x10>
   1fe42:	e7f1      	b.n	1fe28 <notify_all+0xe>
}
   1fe44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fe48 <transition_complete>:
{
   1fe48:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fe4a:	f04f 0440 	mov.w	r4, #64	; 0x40
   1fe4e:	f3ef 8211 	mrs	r2, BASEPRI
   1fe52:	f384 8812 	msr	BASEPRI_MAX, r4
   1fe56:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1fe5a:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1fe5c:	2101      	movs	r1, #1
   1fe5e:	f7f1 fe27 	bl	11ab0 <process_event>
}
   1fe62:	bd10      	pop	{r4, pc}

0001fe64 <onoff_manager_init>:
	if ((mgr == NULL)
   1fe64:	4603      	mov	r3, r0
   1fe66:	b168      	cbz	r0, 1fe84 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1fe68:	b179      	cbz	r1, 1fe8a <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   1fe6a:	680a      	ldr	r2, [r1, #0]
   1fe6c:	b182      	cbz	r2, 1fe90 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1fe6e:	684a      	ldr	r2, [r1, #4]
   1fe70:	b18a      	cbz	r2, 1fe96 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1fe72:	2000      	movs	r0, #0
   1fe74:	6018      	str	r0, [r3, #0]
   1fe76:	6058      	str	r0, [r3, #4]
   1fe78:	6098      	str	r0, [r3, #8]
   1fe7a:	60d8      	str	r0, [r3, #12]
   1fe7c:	6158      	str	r0, [r3, #20]
   1fe7e:	6198      	str	r0, [r3, #24]
   1fe80:	6119      	str	r1, [r3, #16]
	return 0;
   1fe82:	4770      	bx	lr
		return -EINVAL;
   1fe84:	f06f 0015 	mvn.w	r0, #21
   1fe88:	4770      	bx	lr
   1fe8a:	f06f 0015 	mvn.w	r0, #21
   1fe8e:	4770      	bx	lr
   1fe90:	f06f 0015 	mvn.w	r0, #21
   1fe94:	4770      	bx	lr
   1fe96:	f06f 0015 	mvn.w	r0, #21
}
   1fe9a:	4770      	bx	lr

0001fe9c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe9e:	4604      	mov	r4, r0
   1fea0:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1fea2:	f7ff ff91 	bl	1fdc8 <validate_args>

	if (rv < 0) {
   1fea6:	1e06      	subs	r6, r0, #0
   1fea8:	db37      	blt.n	1ff1a <onoff_request+0x7e>
   1feaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1feae:	f3ef 8211 	mrs	r2, BASEPRI
   1feb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1feb6:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1feba:	8b25      	ldrh	r5, [r4, #24]
   1febc:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fec0:	8b63      	ldrh	r3, [r4, #26]
   1fec2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fec6:	428b      	cmp	r3, r1
   1fec8:	d02f      	beq.n	1ff2a <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1feca:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1fecc:	2d02      	cmp	r5, #2
   1fece:	d00c      	beq.n	1feea <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1fed0:	b18d      	cbz	r5, 1fef6 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1fed2:	2d04      	cmp	r5, #4
   1fed4:	d00f      	beq.n	1fef6 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fed6:	2d06      	cmp	r5, #6
   1fed8:	d00d      	beq.n	1fef6 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1feda:	2d05      	cmp	r5, #5
   1fedc:	d01f      	beq.n	1ff1e <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1fede:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1fee2:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1fee4:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fee6:	4608      	mov	r0, r1
   1fee8:	e00a      	b.n	1ff00 <onoff_request+0x64>
		mgr->refs += 1U;
   1feea:	3301      	adds	r3, #1
   1feec:	8363      	strh	r3, [r4, #26]
		notify = true;
   1feee:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1fef0:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1fef2:	4618      	mov	r0, r3
   1fef4:	e004      	b.n	1ff00 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1fef6:	fab5 f385 	clz	r3, r5
   1fefa:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1fefc:	2100      	movs	r1, #0
		add_client = true;
   1fefe:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1ff00:	b128      	cbz	r0, 1ff0e <onoff_request+0x72>
	parent->next = child;
   1ff02:	2000      	movs	r0, #0
   1ff04:	6038      	str	r0, [r7, #0]
	return list->tail;
   1ff06:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1ff08:	b1a8      	cbz	r0, 1ff36 <onoff_request+0x9a>
	parent->next = child;
   1ff0a:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1ff0c:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1ff0e:	b9ab      	cbnz	r3, 1ff3c <onoff_request+0xa0>
	__asm__ volatile(
   1ff10:	f382 8811 	msr	BASEPRI, r2
   1ff14:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ff18:	b9a9      	cbnz	r1, 1ff46 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1ff1a:	4630      	mov	r0, r6
   1ff1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1ff1e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1ff22:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ff24:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ff26:	4608      	mov	r0, r1
   1ff28:	e7ea      	b.n	1ff00 <onoff_request+0x64>
		rv = -EAGAIN;
   1ff2a:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1ff2e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ff30:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ff32:	4608      	mov	r0, r1
   1ff34:	e7e4      	b.n	1ff00 <onoff_request+0x64>
   1ff36:	6067      	str	r7, [r4, #4]
	list->head = node;
   1ff38:	6027      	str	r7, [r4, #0]
}
   1ff3a:	e7e8      	b.n	1ff0e <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1ff3c:	2102      	movs	r1, #2
   1ff3e:	4620      	mov	r0, r4
   1ff40:	f7f1 fdb6 	bl	11ab0 <process_event>
   1ff44:	e7e9      	b.n	1ff1a <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1ff46:	2300      	movs	r3, #0
   1ff48:	462a      	mov	r2, r5
   1ff4a:	4639      	mov	r1, r7
   1ff4c:	4620      	mov	r0, r4
   1ff4e:	f7ff ff51 	bl	1fdf4 <notify_one>
   1ff52:	e7e2      	b.n	1ff1a <onoff_request+0x7e>

0001ff54 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ff54:	b508      	push	{r3, lr}
   1ff56:	4604      	mov	r4, r0
   1ff58:	4608      	mov	r0, r1
   1ff5a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1ff5c:	461a      	mov	r2, r3
   1ff5e:	47a0      	blx	r4
	return z_impl_z_current_get();
   1ff60:	f7fb fd6c 	bl	1ba3c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1ff64:	f7f4 f816 	bl	13f94 <z_impl_k_thread_abort>

0001ff68 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ff68:	00c9      	lsls	r1, r1, #3
   1ff6a:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1ff6c:	4408      	add	r0, r1
   1ff6e:	4770      	bx	lr

0001ff70 <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1ff70:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   1ff74:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   1ff76:	4299      	cmp	r1, r3
   1ff78:	d00e      	beq.n	1ff98 <free_list_remove_bidx+0x28>
{
   1ff7a:	b410      	push	{r4}
   1ff7c:	00cc      	lsls	r4, r1, #3
   1ff7e:	4404      	add	r4, r0
   1ff80:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1ff82:	3204      	adds	r2, #4
   1ff84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1ff88:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1ff8a:	3206      	adds	r2, #6
   1ff8c:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   1ff8e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1ff90:	3304      	adds	r3, #4
   1ff92:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1ff94:	bc10      	pop	{r4}
   1ff96:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   1ff98:	2301      	movs	r3, #1
   1ff9a:	fa03 f102 	lsl.w	r1, r3, r2
   1ff9e:	68c3      	ldr	r3, [r0, #12]
   1ffa0:	ea23 0301 	bic.w	r3, r3, r1
   1ffa4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1ffa6:	3204      	adds	r2, #4
   1ffa8:	2300      	movs	r3, #0
   1ffaa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   1ffae:	4770      	bx	lr

0001ffb0 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1ffb0:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1ffb2:	1d13      	adds	r3, r2, #4
   1ffb4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1ffb8:	b984      	cbnz	r4, 1ffdc <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   1ffba:	2301      	movs	r3, #1
   1ffbc:	fa03 f402 	lsl.w	r4, r3, r2
   1ffc0:	68c3      	ldr	r3, [r0, #12]
   1ffc2:	4323      	orrs	r3, r4
   1ffc4:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1ffc6:	3204      	adds	r2, #4
   1ffc8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1ffcc:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   1ffce:	1d1a      	adds	r2, r3, #4
   1ffd0:	b289      	uxth	r1, r1
   1ffd2:	5281      	strh	r1, [r0, r2]
   1ffd4:	3306      	adds	r3, #6
   1ffd6:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   1ffd8:	bc70      	pop	{r4, r5, r6}
   1ffda:	4770      	bx	lr
	void *cmem = &buf[c];
   1ffdc:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1ffde:	3204      	adds	r2, #4
   1ffe0:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1ffe2:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   1ffe4:	1d2e      	adds	r6, r5, #4
   1ffe6:	5383      	strh	r3, [r0, r6]
   1ffe8:	3506      	adds	r5, #6
   1ffea:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   1ffec:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   1ffee:	3306      	adds	r3, #6
   1fff0:	b289      	uxth	r1, r1
   1fff2:	52c1      	strh	r1, [r0, r3]
   1fff4:	5281      	strh	r1, [r0, r2]
   1fff6:	e7ef      	b.n	1ffd8 <free_list_add_bidx+0x28>

0001fff8 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1fff8:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   1fffa:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   1fffc:	3302      	adds	r3, #2
   1fffe:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   20000:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   20002:	1a89      	subs	r1, r1, r2
   20004:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20008:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2000a:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2000c:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   2000e:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   20010:	3402      	adds	r4, #2
   20012:	5303      	strh	r3, [r0, r4]
   20014:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20018:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   2001c:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   2001e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   20022:	bc30      	pop	{r4, r5}
   20024:	4770      	bx	lr

00020026 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   20026:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   20028:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   2002a:	3102      	adds	r1, #2
   2002c:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   2002e:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   20030:	3402      	adds	r4, #2
   20032:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20034:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   20036:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2003a:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   2003c:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   2003e:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   20040:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   20044:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   20048:	bc30      	pop	{r4, r5}
   2004a:	4770      	bx	lr

0002004c <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2004c:	3904      	subs	r1, #4
   2004e:	1a08      	subs	r0, r1, r0
}
   20050:	08c0      	lsrs	r0, r0, #3
   20052:	4770      	bx	lr

00020054 <free_list_remove>:
{
   20054:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   20056:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   2005a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2005c:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2005e:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   20062:	f1c2 021f 	rsb	r2, r2, #31
   20066:	f7ff ff83 	bl	1ff70 <free_list_remove_bidx>
}
   2006a:	bd08      	pop	{r3, pc}

0002006c <free_list_add>:
{
   2006c:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   2006e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   20072:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20074:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   20076:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   2007a:	f1c2 021f 	rsb	r2, r2, #31
   2007e:	f7ff ff97 	bl	1ffb0 <free_list_add_bidx>
}
   20082:	bd08      	pop	{r3, pc}

00020084 <free_chunk>:
{
   20084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20086:	4604      	mov	r4, r0
   20088:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   2008a:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   2008c:	1cb7      	adds	r7, r6, #2
   2008e:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   20090:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   20094:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   20098:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2009a:	f013 0f01 	tst.w	r3, #1
   2009e:	d00c      	beq.n	200ba <free_chunk+0x36>
   200a0:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   200a2:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   200a4:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   200a8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   200aa:	f013 0f01 	tst.w	r3, #1
   200ae:	d00e      	beq.n	200ce <free_chunk+0x4a>
	free_list_add(h, c);
   200b0:	4629      	mov	r1, r5
   200b2:	4620      	mov	r0, r4
   200b4:	f7ff ffda 	bl	2006c <free_list_add>
}
   200b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   200ba:	f7ff ffcb 	bl	20054 <free_list_remove>
   200be:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   200c0:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   200c4:	4629      	mov	r1, r5
   200c6:	4620      	mov	r0, r4
   200c8:	f7ff ffad 	bl	20026 <merge_chunks>
   200cc:	e7e8      	b.n	200a0 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   200ce:	4620      	mov	r0, r4
   200d0:	f7ff ffc0 	bl	20054 <free_list_remove>
   200d4:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   200d6:	462a      	mov	r2, r5
   200d8:	1a69      	subs	r1, r5, r1
   200da:	4620      	mov	r0, r4
   200dc:	f7ff ffa3 	bl	20026 <merge_chunks>
   200e0:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   200e2:	1aed      	subs	r5, r5, r3
   200e4:	e7e4      	b.n	200b0 <free_chunk+0x2c>

000200e6 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   200e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   200e8:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   200ec:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   200f0:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   200f4:	b1b7      	cbz	r7, 20124 <alloc_chunk+0x3e>
   200f6:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   200fa:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   200fc:	1d14      	adds	r4, r2, #4
   200fe:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   20102:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   20104:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   20108:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   2010c:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   20110:	d912      	bls.n	20138 <alloc_chunk+0x52>
   20112:	4405      	add	r5, r0
   20114:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   20116:	1d15      	adds	r5, r2, #4
   20118:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   2011c:	3e01      	subs	r6, #1
   2011e:	d001      	beq.n	20124 <alloc_chunk+0x3e>
   20120:	42a7      	cmp	r7, r4
   20122:	d1eb      	bne.n	200fc <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   20124:	68c4      	ldr	r4, [r0, #12]
   20126:	f1c3 0220 	rsb	r2, r3, #32
   2012a:	2301      	movs	r3, #1
   2012c:	4093      	lsls	r3, r2
   2012e:	425b      	negs	r3, r3

	if (bmask != 0U) {
   20130:	401c      	ands	r4, r3
   20132:	d105      	bne.n	20140 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   20134:	4620      	mov	r0, r4
   20136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   20138:	4621      	mov	r1, r4
   2013a:	f7ff ff19 	bl	1ff70 <free_list_remove_bidx>
				return c;
   2013e:	e7f9      	b.n	20134 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   20140:	fa94 f2a4 	rbit	r2, r4
   20144:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   20148:	1d13      	adds	r3, r2, #4
   2014a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2014e:	4621      	mov	r1, r4
   20150:	f7ff ff0e 	bl	1ff70 <free_list_remove_bidx>
		return c;
   20154:	e7ee      	b.n	20134 <alloc_chunk+0x4e>

00020156 <sys_heap_free>:
	if (mem == NULL) {
   20156:	b179      	cbz	r1, 20178 <sys_heap_free+0x22>
{
   20158:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   2015a:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   2015c:	4620      	mov	r0, r4
   2015e:	f7ff ff75 	bl	2004c <mem_to_chunkid>
   20162:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   20164:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   20168:	8853      	ldrh	r3, [r2, #2]
   2016a:	f023 0301 	bic.w	r3, r3, #1
   2016e:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   20170:	4620      	mov	r0, r4
   20172:	f7ff ff87 	bl	20084 <free_chunk>
}
   20176:	bd10      	pop	{r4, pc}
   20178:	4770      	bx	lr

0002017a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2017a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   2017c:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   2017e:	b341      	cbz	r1, 201d2 <sys_heap_alloc+0x58>
   20180:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   20182:	68aa      	ldr	r2, [r5, #8]
   20184:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   20188:	d925      	bls.n	201d6 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2018a:	330b      	adds	r3, #11
   2018c:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2018e:	4621      	mov	r1, r4
   20190:	4628      	mov	r0, r5
   20192:	f7ff ffa8 	bl	200e6 <alloc_chunk>
	if (c == 0U) {
   20196:	4607      	mov	r7, r0
   20198:	b1f8      	cbz	r0, 201da <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   2019a:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   2019c:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   201a0:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   201a2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   201a6:	d309      	bcc.n	201bc <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   201a8:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   201aa:	885a      	ldrh	r2, [r3, #2]
   201ac:	f042 0201 	orr.w	r2, r2, #1
   201b0:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   201b2:	4639      	mov	r1, r7
   201b4:	4628      	mov	r0, r5
   201b6:	f7ff fed7 	bl	1ff68 <chunk_mem>
}
   201ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   201bc:	4404      	add	r4, r0
   201be:	4622      	mov	r2, r4
   201c0:	4601      	mov	r1, r0
   201c2:	4628      	mov	r0, r5
   201c4:	f7ff ff18 	bl	1fff8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   201c8:	4621      	mov	r1, r4
   201ca:	4628      	mov	r0, r5
   201cc:	f7ff ff4e 	bl	2006c <free_list_add>
   201d0:	e7ea      	b.n	201a8 <sys_heap_alloc+0x2e>
		return NULL;
   201d2:	2000      	movs	r0, #0
   201d4:	e7f1      	b.n	201ba <sys_heap_alloc+0x40>
   201d6:	2000      	movs	r0, #0
   201d8:	e7ef      	b.n	201ba <sys_heap_alloc+0x40>
		return NULL;
   201da:	2000      	movs	r0, #0
   201dc:	e7ed      	b.n	201ba <sys_heap_alloc+0x40>

000201de <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   201de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   201e2:	460d      	mov	r5, r1
   201e4:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   201e6:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   201e8:	424b      	negs	r3, r1
   201ea:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   201ee:	ea31 0303 	bics.w	r3, r1, r3
   201f2:	d03e      	beq.n	20272 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   201f4:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   201f8:	f1b8 0f03 	cmp.w	r8, #3
   201fc:	d844      	bhi.n	20288 <sys_heap_aligned_alloc+0xaa>
   201fe:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   20200:	2c00      	cmp	r4, #0
   20202:	d057      	beq.n	202b4 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   20204:	68b3      	ldr	r3, [r6, #8]
   20206:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2020a:	d955      	bls.n	202b8 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2020c:	1929      	adds	r1, r5, r4
   2020e:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   20210:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   20212:	08c9      	lsrs	r1, r1, #3
   20214:	4630      	mov	r0, r6
   20216:	f7ff ff66 	bl	200e6 <alloc_chunk>

	if (c0 == 0) {
   2021a:	4607      	mov	r7, r0
   2021c:	2800      	cmp	r0, #0
   2021e:	d04d      	beq.n	202bc <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   20220:	4601      	mov	r1, r0
   20222:	4630      	mov	r0, r6
   20224:	f7ff fea0 	bl	1ff68 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   20228:	4440      	add	r0, r8
   2022a:	4428      	add	r0, r5
   2022c:	3801      	subs	r0, #1
   2022e:	426d      	negs	r5, r5
   20230:	4005      	ands	r5, r0
   20232:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   20236:	442c      	add	r4, r5
   20238:	3407      	adds	r4, #7
   2023a:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   2023e:	4629      	mov	r1, r5
   20240:	4630      	mov	r0, r6
   20242:	f7ff ff03 	bl	2004c <mem_to_chunkid>
   20246:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   20248:	1ba4      	subs	r4, r4, r6
   2024a:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   2024c:	4287      	cmp	r7, r0
   2024e:	d31d      	bcc.n	2028c <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   20250:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   20254:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   20258:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   2025a:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   2025e:	429c      	cmp	r4, r3
   20260:	d31e      	bcc.n	202a0 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   20262:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   20264:	8873      	ldrh	r3, [r6, #2]
   20266:	f043 0301 	orr.w	r3, r3, #1
   2026a:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   2026c:	4628      	mov	r0, r5
   2026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   20272:	2904      	cmp	r1, #4
   20274:	d903      	bls.n	2027e <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   20276:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   2027a:	2204      	movs	r2, #4
   2027c:	e7c0      	b.n	20200 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   2027e:	4611      	mov	r1, r2
   20280:	f7ff ff7b 	bl	2017a <sys_heap_alloc>
   20284:	4605      	mov	r5, r0
   20286:	e7f1      	b.n	2026c <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   20288:	2204      	movs	r2, #4
   2028a:	e7b9      	b.n	20200 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   2028c:	4602      	mov	r2, r0
   2028e:	4639      	mov	r1, r7
   20290:	4630      	mov	r0, r6
   20292:	f7ff feb1 	bl	1fff8 <split_chunks>
		free_list_add(h, c0);
   20296:	4639      	mov	r1, r7
   20298:	4630      	mov	r0, r6
   2029a:	f7ff fee7 	bl	2006c <free_list_add>
   2029e:	e7d7      	b.n	20250 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   202a0:	4622      	mov	r2, r4
   202a2:	4641      	mov	r1, r8
   202a4:	4630      	mov	r0, r6
   202a6:	f7ff fea7 	bl	1fff8 <split_chunks>
		free_list_add(h, c_end);
   202aa:	4621      	mov	r1, r4
   202ac:	4630      	mov	r0, r6
   202ae:	f7ff fedd 	bl	2006c <free_list_add>
   202b2:	e7d6      	b.n	20262 <sys_heap_aligned_alloc+0x84>
		return NULL;
   202b4:	2500      	movs	r5, #0
   202b6:	e7d9      	b.n	2026c <sys_heap_aligned_alloc+0x8e>
   202b8:	2500      	movs	r5, #0
   202ba:	e7d7      	b.n	2026c <sys_heap_aligned_alloc+0x8e>
		return NULL;
   202bc:	2500      	movs	r5, #0
   202be:	e7d5      	b.n	2026c <sys_heap_aligned_alloc+0x8e>

000202c0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   202c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202c2:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   202c4:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   202c6:	1dc8      	adds	r0, r1, #7
   202c8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   202cc:	440d      	add	r5, r1
   202ce:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   202d2:	1a2d      	subs	r5, r5, r0
   202d4:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   202d8:	4607      	mov	r7, r0
	heap->heap = h;
   202da:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   202dc:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   202e0:	2300      	movs	r3, #0
   202e2:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   202e4:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   202e8:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   202ec:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   202f0:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   202f2:	f102 0c07 	add.w	ip, r2, #7
   202f6:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   202fa:	42b3      	cmp	r3, r6
   202fc:	da05      	bge.n	2030a <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   202fe:	1d1a      	adds	r2, r3, #4
   20300:	2400      	movs	r4, #0
   20302:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   20306:	3301      	adds	r3, #1
   20308:	e7f7      	b.n	202fa <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2030a:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   2030c:	b29b      	uxth	r3, r3
   2030e:	2200      	movs	r2, #0
   20310:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   20312:	f043 0301 	orr.w	r3, r3, #1
   20316:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   20318:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2031c:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   2031e:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   20322:	1c94      	adds	r4, r2, #2
   20324:	5306      	strh	r6, [r0, r4]
   20326:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   20328:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   2032c:	4405      	add	r5, r0
   2032e:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   20330:	2301      	movs	r3, #1
   20332:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   20334:	f7ff fe9a 	bl	2006c <free_list_add>
}
   20338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002033a <_ldiv5>:
{
   2033a:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
   2033c:	6806      	ldr	r6, [r0, #0]
   2033e:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
   20340:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
   20344:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   20348:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
   2034a:	fba6 6702 	umull	r6, r7, r6, r2
   2034e:	1871      	adds	r1, r6, r1
   20350:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
   20354:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
   20356:	1871      	adds	r1, r6, r1
   20358:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
   2035c:	fba5 2302 	umull	r2, r3, r5, r2
   20360:	1851      	adds	r1, r2, r1
   20362:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
   20366:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
   20368:	1911      	adds	r1, r2, r4
   2036a:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
   2036e:	6001      	str	r1, [r0, #0]
   20370:	6045      	str	r5, [r0, #4]
}
   20372:	bcf0      	pop	{r4, r5, r6, r7}
   20374:	4770      	bx	lr

00020376 <_ldiv10>:
{
   20376:	b508      	push	{r3, lr}
	*v >>= 1;
   20378:	6802      	ldr	r2, [r0, #0]
   2037a:	6841      	ldr	r1, [r0, #4]
   2037c:	0852      	lsrs	r2, r2, #1
   2037e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   20382:	0849      	lsrs	r1, r1, #1
   20384:	6002      	str	r2, [r0, #0]
   20386:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   20388:	f7ff ffd7 	bl	2033a <_ldiv5>
}
   2038c:	bd08      	pop	{r3, pc}

0002038e <_get_digit>:
	if (*digit_count > 0) {
   2038e:	680b      	ldr	r3, [r1, #0]
   20390:	2b00      	cmp	r3, #0
   20392:	dd16      	ble.n	203c2 <_get_digit+0x34>
{
   20394:	b430      	push	{r4, r5}
   20396:	4604      	mov	r4, r0
		--*digit_count;
   20398:	3b01      	subs	r3, #1
   2039a:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   2039c:	6801      	ldr	r1, [r0, #0]
   2039e:	6840      	ldr	r0, [r0, #4]
   203a0:	0085      	lsls	r5, r0, #2
   203a2:	008b      	lsls	r3, r1, #2
   203a4:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   203a8:	185b      	adds	r3, r3, r1
   203aa:	eb40 0202 	adc.w	r2, r0, r2
   203ae:	18db      	adds	r3, r3, r3
   203b0:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   203b2:	0f10      	lsrs	r0, r2, #28
   203b4:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   203b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   203ba:	6023      	str	r3, [r4, #0]
   203bc:	6062      	str	r2, [r4, #4]
}
   203be:	bc30      	pop	{r4, r5}
   203c0:	4770      	bx	lr
		rval = '0';
   203c2:	2030      	movs	r0, #48	; 0x30
}
   203c4:	4770      	bx	lr

000203c6 <outs>:
{
   203c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203ca:	4607      	mov	r7, r0
   203cc:	460e      	mov	r6, r1
   203ce:	4614      	mov	r4, r2
   203d0:	4698      	mov	r8, r3
	size_t count = 0;
   203d2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   203d4:	e006      	b.n	203e4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   203d6:	4631      	mov	r1, r6
   203d8:	f814 0b01 	ldrb.w	r0, [r4], #1
   203dc:	47b8      	blx	r7
		if (rc < 0) {
   203de:	2800      	cmp	r0, #0
   203e0:	db09      	blt.n	203f6 <outs+0x30>
		++count;
   203e2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   203e4:	4544      	cmp	r4, r8
   203e6:	d3f6      	bcc.n	203d6 <outs+0x10>
   203e8:	f1b8 0f00 	cmp.w	r8, #0
   203ec:	d102      	bne.n	203f4 <outs+0x2e>
   203ee:	7823      	ldrb	r3, [r4, #0]
   203f0:	2b00      	cmp	r3, #0
   203f2:	d1f0      	bne.n	203d6 <outs+0x10>
	return (int)count;
   203f4:	4628      	mov	r0, r5
}
   203f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000203fa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   203fa:	4770      	bx	lr

000203fc <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   203fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20400:	b084      	sub	sp, #16
   20402:	4605      	mov	r5, r0
   20404:	460c      	mov	r4, r1
   20406:	4616      	mov	r6, r2
   20408:	461f      	mov	r7, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2040a:	f8d1 800c 	ldr.w	r8, [r1, #12]
				 strlen(attr->user_data));
   2040e:	4640      	mov	r0, r8
   20410:	f7eb ffe6 	bl	c3e0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   20414:	b280      	uxth	r0, r0
   20416:	9002      	str	r0, [sp, #8]
   20418:	f8cd 8004 	str.w	r8, [sp, #4]
   2041c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   20420:	9300      	str	r3, [sp, #0]
   20422:	463b      	mov	r3, r7
   20424:	4632      	mov	r2, r6
   20426:	4621      	mov	r1, r4
   20428:	4628      	mov	r0, r5
   2042a:	f002 fe4d 	bl	230c8 <bt_gatt_attr_read>
}
   2042e:	b004      	add	sp, #16
   20430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020434 <blvl_ccc_cfg_changed>:
}
   20434:	4770      	bx	lr

00020436 <bas_init>:
}
   20436:	2000      	movs	r0, #0
   20438:	4770      	bx	lr

0002043a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2043a:	2200      	movs	r2, #0
   2043c:	6002      	str	r2, [r0, #0]
   2043e:	6042      	str	r2, [r0, #4]
   20440:	6082      	str	r2, [r0, #8]
}
   20442:	4770      	bx	lr

00020444 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   20444:	428b      	cmp	r3, r1
   20446:	d808      	bhi.n	2045a <_copy+0x16>
{
   20448:	b538      	push	{r3, r4, r5, lr}
   2044a:	4615      	mov	r5, r2
   2044c:	461c      	mov	r4, r3
   2044e:	461a      	mov	r2, r3
   20450:	4629      	mov	r1, r5
   20452:	f005 f968 	bl	25726 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   20456:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   20458:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2045a:	2000      	movs	r0, #0
}
   2045c:	4770      	bx	lr

0002045e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2045e:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   20460:	f005 f99c 	bl	2579c <memset>
	(void)memset(to, val, len);
}
   20464:	bd08      	pop	{r3, pc}

00020466 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   20466:	09c3      	lsrs	r3, r0, #7
   20468:	005a      	lsls	r2, r3, #1
   2046a:	4413      	add	r3, r2
   2046c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   20470:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   20474:	b2c0      	uxtb	r0, r0
   20476:	4770      	bx	lr

00020478 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20478:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2047a:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2047c:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   20480:	2a00      	cmp	r2, #0
   20482:	db03      	blt.n	2048c <gf_double+0x14>
   20484:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   20486:	f100 020f 	add.w	r2, r0, #15
   2048a:	e004      	b.n	20496 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2048c:	2487      	movs	r4, #135	; 0x87
   2048e:	e7fa      	b.n	20486 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   20490:	f813 0901 	ldrb.w	r0, [r3], #-1
   20494:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   20496:	7818      	ldrb	r0, [r3, #0]
   20498:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   2049c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   204a0:	428b      	cmp	r3, r1
   204a2:	d1f5      	bne.n	20490 <gf_double+0x18>
	}
}
   204a4:	bc10      	pop	{r4}
   204a6:	4770      	bx	lr

000204a8 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   204a8:	b130      	cbz	r0, 204b8 <tc_cmac_erase+0x10>
{
   204aa:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   204ac:	2258      	movs	r2, #88	; 0x58
   204ae:	2100      	movs	r1, #0
   204b0:	f7ff ffd5 	bl	2045e <_set>

	return TC_CRYPTO_SUCCESS;
   204b4:	2001      	movs	r0, #1
}
   204b6:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   204b8:	2000      	movs	r0, #0
}
   204ba:	4770      	bx	lr

000204bc <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   204bc:	b1a0      	cbz	r0, 204e8 <tc_cmac_init+0x2c>
{
   204be:	b510      	push	{r4, lr}
   204c0:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   204c2:	2210      	movs	r2, #16
   204c4:	2100      	movs	r1, #0
   204c6:	f7ff ffca 	bl	2045e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   204ca:	2210      	movs	r2, #16
   204cc:	2100      	movs	r1, #0
   204ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   204d2:	f7ff ffc4 	bl	2045e <_set>
	s->leftover_offset = 0;
   204d6:	2300      	movs	r3, #0
   204d8:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   204da:	2200      	movs	r2, #0
   204dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   204e0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   204e4:	2001      	movs	r0, #1
}
   204e6:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   204e8:	2000      	movs	r0, #0
}
   204ea:	4770      	bx	lr

000204ec <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   204ec:	b338      	cbz	r0, 2053e <tc_cmac_setup+0x52>
{
   204ee:	b570      	push	{r4, r5, r6, lr}
   204f0:	460d      	mov	r5, r1
   204f2:	4616      	mov	r6, r2
   204f4:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   204f6:	b321      	cbz	r1, 20542 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   204f8:	2258      	movs	r2, #88	; 0x58
   204fa:	2100      	movs	r1, #0
   204fc:	f7ff ffaf 	bl	2045e <_set>
	s->sched = sched;
   20500:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   20502:	4629      	mov	r1, r5
   20504:	4630      	mov	r0, r6
   20506:	f7f2 fd3f 	bl	12f88 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2050a:	2210      	movs	r2, #16
   2050c:	2100      	movs	r1, #0
   2050e:	4620      	mov	r0, r4
   20510:	f7ff ffa5 	bl	2045e <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   20514:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20516:	4621      	mov	r1, r4
   20518:	4620      	mov	r0, r4
   2051a:	f7f2 fd93 	bl	13044 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2051e:	f104 0510 	add.w	r5, r4, #16
   20522:	4621      	mov	r1, r4
   20524:	4628      	mov	r0, r5
   20526:	f7ff ffa7 	bl	20478 <gf_double>
	gf_double (s->K2, s->K1);
   2052a:	4629      	mov	r1, r5
   2052c:	f104 0020 	add.w	r0, r4, #32
   20530:	f7ff ffa2 	bl	20478 <gf_double>
	tc_cmac_init(s);
   20534:	4620      	mov	r0, r4
   20536:	f7ff ffc1 	bl	204bc <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2053a:	2001      	movs	r0, #1
}
   2053c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2053e:	2000      	movs	r0, #0
}
   20540:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   20542:	2000      	movs	r0, #0
   20544:	e7fa      	b.n	2053c <tc_cmac_setup+0x50>

00020546 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20546:	2800      	cmp	r0, #0
   20548:	d062      	beq.n	20610 <tc_cmac_update+0xca>
{
   2054a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2054e:	460e      	mov	r6, r1
   20550:	4617      	mov	r7, r2
   20552:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20554:	2a00      	cmp	r2, #0
   20556:	d05d      	beq.n	20614 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   20558:	2900      	cmp	r1, #0
   2055a:	d05e      	beq.n	2061a <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2055c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20560:	ea50 0301 	orrs.w	r3, r0, r1
   20564:	d05b      	beq.n	2061e <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   20566:	f110 32ff 	adds.w	r2, r0, #4294967295
   2056a:	f141 33ff 	adc.w	r3, r1, #4294967295
   2056e:	6522      	str	r2, [r4, #80]	; 0x50
   20570:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   20572:	6c65      	ldr	r5, [r4, #68]	; 0x44
   20574:	b3a5      	cbz	r5, 205e0 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   20576:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   2057a:	4547      	cmp	r7, r8
   2057c:	d30d      	bcc.n	2059a <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2057e:	f105 0030 	add.w	r0, r5, #48	; 0x30
   20582:	4643      	mov	r3, r8
   20584:	4632      	mov	r2, r6
   20586:	4641      	mov	r1, r8
   20588:	4420      	add	r0, r4
   2058a:	f7ff ff5b 	bl	20444 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2058e:	3d10      	subs	r5, #16
   20590:	442f      	add	r7, r5
		data += remaining_space;
   20592:	4446      	add	r6, r8
		s->leftover_offset = 0;
   20594:	2300      	movs	r3, #0
   20596:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20598:	e013      	b.n	205c2 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2059a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2059e:	463b      	mov	r3, r7
   205a0:	4632      	mov	r2, r6
   205a2:	4639      	mov	r1, r7
   205a4:	4420      	add	r0, r4
   205a6:	f7ff ff4d 	bl	20444 <_copy>
			s->leftover_offset += data_length;
   205aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   205ac:	443b      	add	r3, r7
   205ae:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   205b0:	2001      	movs	r0, #1
   205b2:	e030      	b.n	20616 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   205b4:	18e2      	adds	r2, r4, r3
   205b6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   205ba:	5ce1      	ldrb	r1, [r4, r3]
   205bc:	404a      	eors	r2, r1
   205be:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   205c0:	3301      	adds	r3, #1
   205c2:	2b0f      	cmp	r3, #15
   205c4:	d9f6      	bls.n	205b4 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   205c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   205c8:	4621      	mov	r1, r4
   205ca:	4620      	mov	r0, r4
   205cc:	f7f2 fd3a 	bl	13044 <tc_aes_encrypt>
   205d0:	e006      	b.n	205e0 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   205d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   205d4:	4621      	mov	r1, r4
   205d6:	4620      	mov	r0, r4
   205d8:	f7f2 fd34 	bl	13044 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   205dc:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   205de:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   205e0:	2f10      	cmp	r7, #16
   205e2:	d908      	bls.n	205f6 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   205e4:	2300      	movs	r3, #0
   205e6:	2b0f      	cmp	r3, #15
   205e8:	d8f3      	bhi.n	205d2 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   205ea:	5cf0      	ldrb	r0, [r6, r3]
   205ec:	5ce5      	ldrb	r5, [r4, r3]
   205ee:	4068      	eors	r0, r5
   205f0:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   205f2:	3301      	adds	r3, #1
   205f4:	e7f7      	b.n	205e6 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   205f6:	b90f      	cbnz	r7, 205fc <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   205f8:	2001      	movs	r0, #1
   205fa:	e00c      	b.n	20616 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   205fc:	463b      	mov	r3, r7
   205fe:	4632      	mov	r2, r6
   20600:	4639      	mov	r1, r7
   20602:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20606:	f7ff ff1d 	bl	20444 <_copy>
		s->leftover_offset = data_length;
   2060a:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2060c:	2001      	movs	r0, #1
   2060e:	e002      	b.n	20616 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   20610:	2000      	movs	r0, #0
}
   20612:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   20614:	2001      	movs	r0, #1
}
   20616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2061a:	2000      	movs	r0, #0
   2061c:	e7fb      	b.n	20616 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   2061e:	2000      	movs	r0, #0
   20620:	e7f9      	b.n	20616 <tc_cmac_update+0xd0>

00020622 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   20622:	b370      	cbz	r0, 20682 <tc_cmac_final+0x60>
{
   20624:	b538      	push	{r3, r4, r5, lr}
   20626:	460c      	mov	r4, r1
   20628:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   2062a:	b361      	cbz	r1, 20686 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2062c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2062e:	2a10      	cmp	r2, #16
   20630:	d10d      	bne.n	2064e <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   20632:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20634:	2300      	movs	r3, #0
   20636:	2b0f      	cmp	r3, #15
   20638:	d819      	bhi.n	2066e <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2063a:	18e2      	adds	r2, r4, r3
   2063c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   20640:	5cc8      	ldrb	r0, [r1, r3]
   20642:	4050      	eors	r0, r2
   20644:	5ce2      	ldrb	r2, [r4, r3]
   20646:	4042      	eors	r2, r0
   20648:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2064a:	3301      	adds	r3, #1
   2064c:	e7f3      	b.n	20636 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2064e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20652:	f1c2 0210 	rsb	r2, r2, #16
   20656:	2100      	movs	r1, #0
   20658:	4420      	add	r0, r4
   2065a:	f7ff ff00 	bl	2045e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2065e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20660:	4423      	add	r3, r4
   20662:	2280      	movs	r2, #128	; 0x80
   20664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   20668:	f104 0120 	add.w	r1, r4, #32
   2066c:	e7e2      	b.n	20634 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2066e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20670:	4621      	mov	r1, r4
   20672:	4628      	mov	r0, r5
   20674:	f7f2 fce6 	bl	13044 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20678:	4620      	mov	r0, r4
   2067a:	f7ff ff15 	bl	204a8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2067e:	2001      	movs	r0, #1
}
   20680:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   20682:	2000      	movs	r0, #0
}
   20684:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   20686:	2000      	movs	r0, #0
   20688:	e7fa      	b.n	20680 <tc_cmac_final+0x5e>

0002068a <abort_function>:
{
   2068a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2068c:	2000      	movs	r0, #0
   2068e:	f7f2 fb01 	bl	12c94 <sys_reboot>

00020692 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20692:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   20694:	f004 f99c 	bl	249d0 <z_fatal_error>
}
   20698:	bd08      	pop	{r3, pc}

0002069a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2069a:	b508      	push	{r3, lr}
   2069c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2069e:	6800      	ldr	r0, [r0, #0]
   206a0:	f7ff fff7 	bl	20692 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   206a4:	bd08      	pop	{r3, pc}

000206a6 <z_irq_spurious>:
{
   206a6:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   206a8:	2100      	movs	r1, #0
   206aa:	2001      	movs	r0, #1
   206ac:	f7ff fff1 	bl	20692 <z_arm_fatal_error>
}
   206b0:	bd08      	pop	{r3, pc}

000206b2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   206b2:	b508      	push	{r3, lr}
	handler();
   206b4:	f7f3 f9be 	bl	13a34 <z_SysNmiOnReset>
	z_arm_int_exit();
   206b8:	f7f3 faba 	bl	13c30 <z_arm_exc_exit>
}
   206bc:	bd08      	pop	{r3, pc}

000206be <memory_fault_recoverable>:
}
   206be:	2000      	movs	r0, #0
   206c0:	4770      	bx	lr

000206c2 <debug_monitor>:
	*recoverable = false;
   206c2:	2300      	movs	r3, #0
   206c4:	700b      	strb	r3, [r1, #0]
}
   206c6:	4770      	bx	lr

000206c8 <fault_handle>:
{
   206c8:	b508      	push	{r3, lr}
	*recoverable = false;
   206ca:	2300      	movs	r3, #0
   206cc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   206ce:	1ecb      	subs	r3, r1, #3
   206d0:	2b09      	cmp	r3, #9
   206d2:	d81a      	bhi.n	2070a <fault_handle+0x42>
   206d4:	e8df f003 	tbb	[pc, r3]
   206d8:	110d0905 	.word	0x110d0905
   206dc:	19191919 	.word	0x19191919
   206e0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   206e2:	4611      	mov	r1, r2
   206e4:	f7f3 fb34 	bl	13d50 <hard_fault>
		break;
   206e8:	e010      	b.n	2070c <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   206ea:	2100      	movs	r1, #0
   206ec:	f7f3 faea 	bl	13cc4 <mem_manage_fault>
		break;
   206f0:	e00c      	b.n	2070c <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   206f2:	2100      	movs	r1, #0
   206f4:	f7f3 faaa 	bl	13c4c <bus_fault>
		break;
   206f8:	e008      	b.n	2070c <fault_handle+0x44>
		reason = usage_fault(esf);
   206fa:	f7f3 fad1 	bl	13ca0 <usage_fault>
		break;
   206fe:	e005      	b.n	2070c <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   20700:	4611      	mov	r1, r2
   20702:	f7ff ffde 	bl	206c2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   20706:	2000      	movs	r0, #0
		break;
   20708:	e000      	b.n	2070c <fault_handle+0x44>
	*recoverable = false;
   2070a:	2000      	movs	r0, #0
}
   2070c:	bd08      	pop	{r3, pc}

0002070e <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   2070e:	6843      	ldr	r3, [r0, #4]
   20710:	1e5a      	subs	r2, r3, #1
		&&
   20712:	4213      	tst	r3, r2
   20714:	d106      	bne.n	20724 <mpu_partition_is_valid+0x16>
		&&
   20716:	2b1f      	cmp	r3, #31
   20718:	d906      	bls.n	20728 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2071a:	6803      	ldr	r3, [r0, #0]
		&&
   2071c:	421a      	tst	r2, r3
   2071e:	d005      	beq.n	2072c <mpu_partition_is_valid+0x1e>
   20720:	2000      	movs	r0, #0
   20722:	4770      	bx	lr
   20724:	2000      	movs	r0, #0
   20726:	4770      	bx	lr
   20728:	2000      	movs	r0, #0
   2072a:	4770      	bx	lr
   2072c:	2001      	movs	r0, #1
}
   2072e:	4770      	bx	lr

00020730 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   20730:	2807      	cmp	r0, #7
   20732:	d805      	bhi.n	20740 <region_allocate_and_init+0x10>
{
   20734:	b510      	push	{r4, lr}
   20736:	4604      	mov	r4, r0
	region_init(index, region_conf);
   20738:	f7f3 fc62 	bl	14000 <region_init>
	return index;
   2073c:	4620      	mov	r0, r4
}
   2073e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   20740:	f06f 0015 	mvn.w	r0, #21
}
   20744:	4770      	bx	lr

00020746 <mpu_configure_region>:
{
   20746:	b500      	push	{lr}
   20748:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   2074a:	680b      	ldr	r3, [r1, #0]
   2074c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2074e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   20750:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   20752:	2b20      	cmp	r3, #32
   20754:	d912      	bls.n	2077c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   20756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2075a:	d811      	bhi.n	20780 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2075c:	3b01      	subs	r3, #1
   2075e:	fab3 f383 	clz	r3, r3
   20762:	f1c3 031f 	rsb	r3, r3, #31
   20766:	005b      	lsls	r3, r3, #1
   20768:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2076c:	4313      	orrs	r3, r2
   2076e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   20770:	a901      	add	r1, sp, #4
   20772:	f7ff ffdd 	bl	20730 <region_allocate_and_init>
}
   20776:	b005      	add	sp, #20
   20778:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   2077c:	2308      	movs	r3, #8
   2077e:	e7f5      	b.n	2076c <mpu_configure_region+0x26>
		return REGION_4G;
   20780:	233e      	movs	r3, #62	; 0x3e
   20782:	e7f3      	b.n	2076c <mpu_configure_region+0x26>

00020784 <mpu_configure_regions>:
{
   20784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20788:	4680      	mov	r8, r0
   2078a:	460f      	mov	r7, r1
   2078c:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   2078e:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   20790:	2500      	movs	r5, #0
   20792:	e009      	b.n	207a8 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   20794:	4621      	mov	r1, r4
   20796:	b2f0      	uxtb	r0, r6
   20798:	f7ff ffd5 	bl	20746 <mpu_configure_region>
   2079c:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   2079e:	f110 0f16 	cmn.w	r0, #22
   207a2:	d014      	beq.n	207ce <mpu_configure_regions+0x4a>
		reg_index++;
   207a4:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   207a6:	3501      	adds	r5, #1
   207a8:	42bd      	cmp	r5, r7
   207aa:	da10      	bge.n	207ce <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   207ac:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   207b0:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   207b4:	6862      	ldr	r2, [r4, #4]
   207b6:	2a00      	cmp	r2, #0
   207b8:	d0f5      	beq.n	207a6 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   207ba:	f1b9 0f00 	cmp.w	r9, #0
   207be:	d0e9      	beq.n	20794 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   207c0:	4620      	mov	r0, r4
   207c2:	f7ff ffa4 	bl	2070e <mpu_partition_is_valid>
		if (do_sanity_check &&
   207c6:	2800      	cmp	r0, #0
   207c8:	d1e4      	bne.n	20794 <mpu_configure_regions+0x10>
			return -EINVAL;
   207ca:	f06f 0615 	mvn.w	r6, #21
}
   207ce:	4630      	mov	r0, r6
   207d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000207d4 <arm_core_mpu_configure_static_mpu_regions>:
{
   207d4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   207d6:	f7f3 fc23 	bl	14020 <mpu_configure_static_mpu_regions>
}
   207da:	bd08      	pop	{r3, pc}

000207dc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   207dc:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   207de:	f7f3 fc29 	bl	14034 <mpu_configure_dynamic_mpu_regions>
}
   207e2:	bd08      	pop	{r3, pc}

000207e4 <malloc_prepare>:
}
   207e4:	2000      	movs	r0, #0
   207e6:	4770      	bx	lr

000207e8 <_stdout_hook_default>:
}
   207e8:	f04f 30ff 	mov.w	r0, #4294967295
   207ec:	4770      	bx	lr

000207ee <_write>:
{
   207ee:	b508      	push	{r3, lr}
   207f0:	4608      	mov	r0, r1
   207f2:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   207f4:	f7f3 fc70 	bl	140d8 <z_impl_zephyr_write_stdout>
}
   207f8:	bd08      	pop	{r3, pc}

000207fa <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   207fa:	b084      	sub	sp, #16
   207fc:	ab04      	add	r3, sp, #16
   207fe:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   20802:	f89d 3004 	ldrb.w	r3, [sp, #4]
   20806:	2b06      	cmp	r3, #6
   20808:	d001      	beq.n	2080e <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2080a:	b004      	add	sp, #16
   2080c:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2080e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20812:	2201      	movs	r2, #1
   20814:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20818:	f3bf 8f4f 	dsb	sy
        __WFE();
   2081c:	bf20      	wfe
    while (true)
   2081e:	e7fd      	b.n	2081c <pm_power_state_set+0x22>

00020820 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   20820:	b084      	sub	sp, #16
   20822:	ab04      	add	r3, sp, #16
   20824:	e903 0007 	stmdb	r3, {r0, r1, r2}
   20828:	2300      	movs	r3, #0
   2082a:	f383 8811 	msr	BASEPRI, r3
   2082e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   20832:	b004      	add	sp, #16
   20834:	4770      	bx	lr

00020836 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   20836:	b510      	push	{r4, lr}
   20838:	b08a      	sub	sp, #40	; 0x28
   2083a:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   2083c:	a905      	add	r1, sp, #20
   2083e:	f7f3 fca9 	bl	14194 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20842:	4669      	mov	r1, sp
   20844:	4620      	mov	r0, r4
   20846:	f7f3 fca5 	bl	14194 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   2084a:	2210      	movs	r2, #16
   2084c:	f10d 0101 	add.w	r1, sp, #1
   20850:	f10d 0015 	add.w	r0, sp, #21
   20854:	f004 ff59 	bl	2570a <memcmp>
}
   20858:	b00a      	add	sp, #40	; 0x28
   2085a:	bd10      	pop	{r4, pc}

0002085c <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2085c:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2085e:	7803      	ldrb	r3, [r0, #0]
   20860:	780a      	ldrb	r2, [r1, #0]
   20862:	4293      	cmp	r3, r2
   20864:	d107      	bne.n	20876 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   20866:	2b01      	cmp	r3, #1
   20868:	d00c      	beq.n	20884 <bt_uuid_cmp+0x28>
   2086a:	2b02      	cmp	r3, #2
   2086c:	d00e      	beq.n	2088c <bt_uuid_cmp+0x30>
   2086e:	b12b      	cbz	r3, 2087c <bt_uuid_cmp+0x20>
   20870:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   20874:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   20876:	f7ff ffde 	bl	20836 <uuid128_cmp>
   2087a:	e7fb      	b.n	20874 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2087c:	8840      	ldrh	r0, [r0, #2]
   2087e:	884b      	ldrh	r3, [r1, #2]
   20880:	1ac0      	subs	r0, r0, r3
   20882:	e7f7      	b.n	20874 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20884:	6840      	ldr	r0, [r0, #4]
   20886:	684b      	ldr	r3, [r1, #4]
   20888:	1ac0      	subs	r0, r0, r3
   2088a:	e7f3      	b.n	20874 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2088c:	2210      	movs	r2, #16
   2088e:	3101      	adds	r1, #1
   20890:	3001      	adds	r0, #1
   20892:	f004 ff3a 	bl	2570a <memcmp>
   20896:	e7ed      	b.n	20874 <bt_uuid_cmp+0x18>

00020898 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   20898:	b470      	push	{r4, r5, r6}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2089a:	2a04      	cmp	r2, #4
   2089c:	d00f      	beq.n	208be <bt_uuid_create+0x26>
   2089e:	2a10      	cmp	r2, #16
   208a0:	d01c      	beq.n	208dc <bt_uuid_create+0x44>
   208a2:	2a02      	cmp	r2, #2
   208a4:	d002      	beq.n	208ac <bt_uuid_create+0x14>
   208a6:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   208a8:	bc70      	pop	{r4, r5, r6}
   208aa:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_16;
   208ac:	2300      	movs	r3, #0
   208ae:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   208b0:	784a      	ldrb	r2, [r1, #1]
   208b2:	780b      	ldrb	r3, [r1, #0]
   208b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   208b8:	8043      	strh	r3, [r0, #2]
	return true;
   208ba:	2001      	movs	r0, #1
		break;
   208bc:	e7f4      	b.n	208a8 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   208be:	2301      	movs	r3, #1
   208c0:	7003      	strb	r3, [r0, #0]
   208c2:	78cc      	ldrb	r4, [r1, #3]
   208c4:	788a      	ldrb	r2, [r1, #2]
   208c6:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   208ca:	784d      	ldrb	r5, [r1, #1]
   208cc:	780a      	ldrb	r2, [r1, #0]
   208ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   208d2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   208d6:	6042      	str	r2, [r0, #4]
	return true;
   208d8:	4618      	mov	r0, r3
		break;
   208da:	e7e5      	b.n	208a8 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   208dc:	4603      	mov	r3, r0
   208de:	2202      	movs	r2, #2
   208e0:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   208e4:	680e      	ldr	r6, [r1, #0]
   208e6:	684d      	ldr	r5, [r1, #4]
   208e8:	688c      	ldr	r4, [r1, #8]
   208ea:	68ca      	ldr	r2, [r1, #12]
   208ec:	f8c0 6001 	str.w	r6, [r0, #1]
   208f0:	605d      	str	r5, [r3, #4]
   208f2:	609c      	str	r4, [r3, #8]
   208f4:	60da      	str	r2, [r3, #12]
	return true;
   208f6:	2001      	movs	r0, #1
   208f8:	e7d6      	b.n	208a8 <bt_uuid_create+0x10>

000208fa <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   208fa:	b510      	push	{r4, lr}
   208fc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   208fe:	2301      	movs	r3, #1
   20900:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20904:	2106      	movs	r1, #6
   20906:	f7f8 fbc9 	bl	1909c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2090a:	b918      	cbnz	r0, 20914 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2090c:	79a3      	ldrb	r3, [r4, #6]
   2090e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20912:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   20914:	bd10      	pop	{r4, pc}

00020916 <hci_data_buf_overflow>:
}
   20916:	4770      	bx	lr

00020918 <hci_vendor_event>:
}
   20918:	4770      	bx	lr

0002091a <le_conn_complete_adv_timeout>:
{
   2091a:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2091c:	f7f4 ffea 	bl	158f4 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   20920:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20922:	f3bf 8f5b 	dmb	ish
   20926:	e850 3f00 	ldrex	r3, [r0]
   2092a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2092e:	e840 3200 	strex	r2, r3, [r0]
   20932:	2a00      	cmp	r2, #0
   20934:	d1f7      	bne.n	20926 <le_conn_complete_adv_timeout+0xc>
   20936:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   2093a:	2100      	movs	r1, #0
   2093c:	2001      	movs	r0, #1
   2093e:	f7f3 fd85 	bl	1444c <find_pending_connect>
		if (!conn) {
   20942:	4604      	mov	r4, r0
   20944:	b138      	cbz	r0, 20956 <le_conn_complete_adv_timeout+0x3c>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   20946:	233c      	movs	r3, #60	; 0x3c
   20948:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2094a:	2100      	movs	r1, #0
   2094c:	f7f5 fab4 	bl	15eb8 <bt_conn_set_state>
		bt_conn_unref(conn);
   20950:	4620      	mov	r0, r4
   20952:	f000 ff45 	bl	217e0 <bt_conn_unref>
}
   20956:	bd10      	pop	{r4, pc}

00020958 <hci_disconn_complete_prio>:
{
   20958:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2095a:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2095c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   20960:	781b      	ldrb	r3, [r3, #0]
   20962:	b103      	cbz	r3, 20966 <hci_disconn_complete_prio+0xe>
}
   20964:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   20966:	4620      	mov	r0, r4
   20968:	f7f5 fa9c 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   2096c:	4605      	mov	r5, r0
   2096e:	b130      	cbz	r0, 2097e <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   20970:	2101      	movs	r1, #1
   20972:	f7f5 faa1 	bl	15eb8 <bt_conn_set_state>
	bt_conn_unref(conn);
   20976:	4628      	mov	r0, r5
   20978:	f000 ff32 	bl	217e0 <bt_conn_unref>
   2097c:	e7f2      	b.n	20964 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   2097e:	4620      	mov	r0, r4
   20980:	f7f3 fc9c 	bl	142bc <conn_handle_disconnected>
		return;
   20984:	e7ee      	b.n	20964 <hci_disconn_complete_prio+0xc>

00020986 <hci_disconn_complete>:
{
   20986:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   20988:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2098a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
   2098e:	7823      	ldrb	r3, [r4, #0]
   20990:	b103      	cbz	r3, 20994 <hci_disconn_complete+0xe>
}
   20992:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   20994:	f7f5 fa86 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   20998:	4605      	mov	r5, r0
   2099a:	2800      	cmp	r0, #0
   2099c:	d0f9      	beq.n	20992 <hci_disconn_complete+0xc>
	conn->err = evt->reason;
   2099e:	78e3      	ldrb	r3, [r4, #3]
   209a0:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   209a2:	2100      	movs	r1, #0
   209a4:	f7f5 fa88 	bl	15eb8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   209a8:	78ab      	ldrb	r3, [r5, #2]
   209aa:	2b01      	cmp	r3, #1
   209ac:	d003      	beq.n	209b6 <hci_disconn_complete+0x30>
		bt_conn_unref(conn);
   209ae:	4628      	mov	r0, r5
   209b0:	f000 ff16 	bl	217e0 <bt_conn_unref>
		return;
   209b4:	e7ed      	b.n	20992 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   209b6:	4628      	mov	r0, r5
   209b8:	f000 ff12 	bl	217e0 <bt_conn_unref>
   209bc:	e7e9      	b.n	20992 <hci_disconn_complete+0xc>

000209be <le_data_len_change>:
{
   209be:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   209c0:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   209c2:	8818      	ldrh	r0, [r3, #0]
   209c4:	f7f5 fa6e 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   209c8:	b108      	cbz	r0, 209ce <le_data_len_change+0x10>
	bt_conn_unref(conn);
   209ca:	f000 ff09 	bl	217e0 <bt_conn_unref>
}
   209ce:	bd08      	pop	{r3, pc}

000209d0 <hci_num_completed_packets>:
{
   209d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   209d4:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   209d8:	2700      	movs	r7, #0
   209da:	e04f      	b.n	20a7c <hci_num_completed_packets+0xac>
				conn->pending_no_cb--;
   209dc:	3b01      	subs	r3, #1
   209de:	61e3      	str	r3, [r4, #28]
   209e0:	f382 8811 	msr	BASEPRI, r2
   209e4:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   209e8:	4620      	mov	r0, r4
   209ea:	f7f5 f9f9 	bl	15de0 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   209ee:	f7fa fa49 	bl	1ae84 <z_impl_k_sem_give>
				continue;
   209f2:	e024      	b.n	20a3e <hci_num_completed_packets+0x6e>
	list->tail = node;
   209f4:	61a1      	str	r1, [r4, #24]
   209f6:	f382 8811 	msr	BASEPRI, r2
   209fa:	f3bf 8f6f 	isb	sy
			if (!node) {
   209fe:	2b00      	cmp	r3, #0
   20a00:	d038      	beq.n	20a74 <hci_num_completed_packets+0xa4>
	__asm__ volatile(
   20a02:	f04f 0240 	mov.w	r2, #64	; 0x40
   20a06:	f3ef 8111 	mrs	r1, BASEPRI
   20a0a:	f382 8812 	msr	BASEPRI_MAX, r2
   20a0e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   20a12:	68da      	ldr	r2, [r3, #12]
   20a14:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   20a16:	2200      	movs	r2, #0
   20a18:	60da      	str	r2, [r3, #12]
	parent->next = child;
   20a1a:	601a      	str	r2, [r3, #0]
	return list->tail;
   20a1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   20a1e:	b332      	cbz	r2, 20a6e <hci_num_completed_packets+0x9e>
	parent->next = child;
   20a20:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20a22:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   20a24:	f381 8811 	msr	BASEPRI, r1
   20a28:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   20a2c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   20a30:	f7fa fbf2 	bl	1b218 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   20a34:	4620      	mov	r0, r4
   20a36:	f7f5 f9d3 	bl	15de0 <bt_conn_get_pkts>
   20a3a:	f7fa fa23 	bl	1ae84 <z_impl_k_sem_give>
{
   20a3e:	462e      	mov	r6, r5
		while (count--) {
   20a40:	1e75      	subs	r5, r6, #1
   20a42:	b2ad      	uxth	r5, r5
   20a44:	b1b6      	cbz	r6, 20a74 <hci_num_completed_packets+0xa4>
	__asm__ volatile(
   20a46:	f04f 0340 	mov.w	r3, #64	; 0x40
   20a4a:	f3ef 8211 	mrs	r2, BASEPRI
   20a4e:	f383 8812 	msr	BASEPRI_MAX, r3
   20a52:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   20a56:	69e3      	ldr	r3, [r4, #28]
   20a58:	2b00      	cmp	r3, #0
   20a5a:	d1bf      	bne.n	209dc <hci_num_completed_packets+0xc>
	return list->head;
   20a5c:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   20a5e:	2b00      	cmp	r3, #0
   20a60:	d0c9      	beq.n	209f6 <hci_num_completed_packets+0x26>
	return node->next;
   20a62:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   20a64:	6161      	str	r1, [r4, #20]
	return list->tail;
   20a66:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a68:	4298      	cmp	r0, r3
   20a6a:	d1c4      	bne.n	209f6 <hci_num_completed_packets+0x26>
   20a6c:	e7c2      	b.n	209f4 <hci_num_completed_packets+0x24>
	list->tail = node;
   20a6e:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   20a70:	6223      	str	r3, [r4, #32]
}
   20a72:	e7d7      	b.n	20a24 <hci_num_completed_packets+0x54>
		bt_conn_unref(conn);
   20a74:	4620      	mov	r0, r4
   20a76:	f000 feb3 	bl	217e0 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   20a7a:	3701      	adds	r7, #1
   20a7c:	f898 3000 	ldrb.w	r3, [r8]
   20a80:	429f      	cmp	r7, r3
   20a82:	da0b      	bge.n	20a9c <hci_num_completed_packets+0xcc>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   20a84:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		count = sys_le16_to_cpu(evt->h[i].count);
   20a88:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   20a8c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20a90:	f7f5 fa08 	bl	15ea4 <bt_conn_lookup_handle>
		if (!conn) {
   20a94:	4604      	mov	r4, r0
   20a96:	2800      	cmp	r0, #0
   20a98:	d1d2      	bne.n	20a40 <hci_num_completed_packets+0x70>
   20a9a:	e7ee      	b.n	20a7a <hci_num_completed_packets+0xaa>
}
   20a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020aa0 <hci_hardware_error>:
{
   20aa0:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   20aa2:	2101      	movs	r1, #1
   20aa4:	3008      	adds	r0, #8
   20aa6:	f002 fe78 	bl	2379a <net_buf_simple_pull_mem>
}
   20aaa:	bd08      	pop	{r3, pc}

00020aac <le_conn_update_complete>:
{
   20aac:	b530      	push	{r4, r5, lr}
   20aae:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   20ab0:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20ab2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   20ab6:	f7f5 f9f5 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   20aba:	b138      	cbz	r0, 20acc <le_conn_update_complete+0x20>
   20abc:	4605      	mov	r5, r0
	if (!evt->status) {
   20abe:	7823      	ldrb	r3, [r4, #0]
   20ac0:	b133      	cbz	r3, 20ad0 <le_conn_update_complete+0x24>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   20ac2:	2b1a      	cmp	r3, #26
   20ac4:	d013      	beq.n	20aee <le_conn_update_complete+0x42>
	bt_conn_unref(conn);
   20ac6:	4628      	mov	r0, r5
   20ac8:	f000 fe8a 	bl	217e0 <bt_conn_unref>
}
   20acc:	b003      	add	sp, #12
   20ace:	bd30      	pop	{r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   20ad0:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   20ad4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   20ad8:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   20adc:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   20ae0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   20ae4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   20ae8:	f7f5 fa8c 	bl	16004 <notify_le_param_updated>
   20aec:	e7eb      	b.n	20ac6 <le_conn_update_complete+0x1a>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   20aee:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   20af0:	2b01      	cmp	r3, #1
   20af2:	d1e8      	bne.n	20ac6 <le_conn_update_complete+0x1a>
		   !atomic_test_and_set_bit(conn->flags,
   20af4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20af6:	f3bf 8f5b 	dmb	ish
   20afa:	e853 2f00 	ldrex	r2, [r3]
   20afe:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   20b02:	e843 1000 	strex	r0, r1, [r3]
   20b06:	2800      	cmp	r0, #0
   20b08:	d1f7      	bne.n	20afa <le_conn_update_complete+0x4e>
   20b0a:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   20b0e:	f412 6f80 	tst.w	r2, #1024	; 0x400
   20b12:	d1d8      	bne.n	20ac6 <le_conn_update_complete+0x1a>
		param.interval_min = conn->le.interval_min;
   20b14:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   20b18:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   20b1c:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   20b20:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   20b24:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   20b28:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   20b2c:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   20b30:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   20b34:	4669      	mov	r1, sp
   20b36:	4628      	mov	r0, r5
   20b38:	f001 f8ad 	bl	21c96 <bt_l2cap_update_conn_param>
   20b3c:	e7c3      	b.n	20ac6 <le_conn_update_complete+0x1a>

00020b3e <hci_le_read_max_data_len>:
{
   20b3e:	b570      	push	{r4, r5, r6, lr}
   20b40:	b082      	sub	sp, #8
   20b42:	4605      	mov	r5, r0
   20b44:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   20b46:	aa01      	add	r2, sp, #4
   20b48:	2100      	movs	r1, #0
   20b4a:	f242 002f 	movw	r0, #8239	; 0x202f
   20b4e:	f7f3 fe77 	bl	14840 <bt_hci_cmd_send_sync>
	if (err) {
   20b52:	4606      	mov	r6, r0
   20b54:	b110      	cbz	r0, 20b5c <hci_le_read_max_data_len+0x1e>
}
   20b56:	4630      	mov	r0, r6
   20b58:	b002      	add	sp, #8
   20b5a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   20b5c:	9801      	ldr	r0, [sp, #4]
   20b5e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   20b60:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20b64:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   20b66:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   20b6a:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   20b6c:	f002 fda3 	bl	236b6 <net_buf_unref>
	return 0;
   20b70:	e7f1      	b.n	20b56 <hci_le_read_max_data_len+0x18>

00020b72 <set_event_mask>:
{
   20b72:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   20b74:	2108      	movs	r1, #8
   20b76:	f640 4001 	movw	r0, #3073	; 0xc01
   20b7a:	f7f3 fe25 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20b7e:	b1b8      	cbz	r0, 20bb0 <set_event_mask+0x3e>
   20b80:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   20b82:	2108      	movs	r1, #8
   20b84:	4408      	add	r0, r1
   20b86:	f002 fde0 	bl	2374a <net_buf_simple_add>
	dst[0] = val;
   20b8a:	2310      	movs	r3, #16
   20b8c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   20b8e:	2388      	movs	r3, #136	; 0x88
   20b90:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   20b92:	2200      	movs	r2, #0
   20b94:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   20b96:	2302      	movs	r3, #2
   20b98:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   20b9a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   20b9c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   20b9e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   20ba0:	2320      	movs	r3, #32
   20ba2:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   20ba4:	4621      	mov	r1, r4
   20ba6:	f640 4001 	movw	r0, #3073	; 0xc01
   20baa:	f7f3 fe49 	bl	14840 <bt_hci_cmd_send_sync>
}
   20bae:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   20bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20bb4:	e7fb      	b.n	20bae <set_event_mask+0x3c>

00020bb6 <bt_hci_disconnect>:
{
   20bb6:	b570      	push	{r4, r5, r6, lr}
   20bb8:	4605      	mov	r5, r0
   20bba:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   20bbc:	2103      	movs	r1, #3
   20bbe:	f240 4006 	movw	r0, #1030	; 0x406
   20bc2:	f7f3 fe01 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20bc6:	b168      	cbz	r0, 20be4 <bt_hci_disconnect+0x2e>
   20bc8:	4606      	mov	r6, r0
   20bca:	2103      	movs	r1, #3
   20bcc:	3008      	adds	r0, #8
   20bce:	f002 fdbc 	bl	2374a <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   20bd2:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   20bd4:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20bd6:	2200      	movs	r2, #0
   20bd8:	4631      	mov	r1, r6
   20bda:	f240 4006 	movw	r0, #1030	; 0x406
   20bde:	f7f3 fe2f 	bl	14840 <bt_hci_cmd_send_sync>
}
   20be2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   20be4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20be8:	e7fb      	b.n	20be2 <bt_hci_disconnect+0x2c>

00020bea <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   20bea:	8802      	ldrh	r2, [r0, #0]
   20bec:	8843      	ldrh	r3, [r0, #2]
   20bee:	429a      	cmp	r2, r3
   20bf0:	d819      	bhi.n	20c26 <bt_le_conn_params_valid+0x3c>
   20bf2:	2a05      	cmp	r2, #5
   20bf4:	d919      	bls.n	20c2a <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20bf6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20bfa:	d818      	bhi.n	20c2e <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   20bfc:	8881      	ldrh	r1, [r0, #4]
   20bfe:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   20c02:	d216      	bcs.n	20c32 <bt_le_conn_params_valid+0x48>
{
   20c04:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   20c06:	88c0      	ldrh	r0, [r0, #6]
   20c08:	f1a0 020a 	sub.w	r2, r0, #10
   20c0c:	b292      	uxth	r2, r2
   20c0e:	f640 4476 	movw	r4, #3190	; 0xc76
   20c12:	42a2      	cmp	r2, r4
   20c14:	d80f      	bhi.n	20c36 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   20c16:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   20c1a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   20c1e:	d20c      	bcs.n	20c3a <bt_le_conn_params_valid+0x50>
	return true;
   20c20:	2001      	movs	r0, #1
}
   20c22:	bc10      	pop	{r4}
   20c24:	4770      	bx	lr
		return false;
   20c26:	2000      	movs	r0, #0
   20c28:	4770      	bx	lr
   20c2a:	2000      	movs	r0, #0
   20c2c:	4770      	bx	lr
   20c2e:	2000      	movs	r0, #0
   20c30:	4770      	bx	lr
		return false;
   20c32:	2000      	movs	r0, #0
}
   20c34:	4770      	bx	lr
		return false;
   20c36:	2000      	movs	r0, #0
   20c38:	e7f3      	b.n	20c22 <bt_le_conn_params_valid+0x38>
   20c3a:	2000      	movs	r0, #0
   20c3c:	e7f1      	b.n	20c22 <bt_le_conn_params_valid+0x38>

00020c3e <bt_le_set_data_len>:
{
   20c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c40:	4606      	mov	r6, r0
   20c42:	460f      	mov	r7, r1
   20c44:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20c46:	2106      	movs	r1, #6
   20c48:	f242 0022 	movw	r0, #8226	; 0x2022
   20c4c:	f7f3 fdbc 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20c50:	b170      	cbz	r0, 20c70 <bt_le_set_data_len+0x32>
   20c52:	4605      	mov	r5, r0
   20c54:	2106      	movs	r1, #6
   20c56:	3008      	adds	r0, #8
   20c58:	f002 fd77 	bl	2374a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20c5c:	8833      	ldrh	r3, [r6, #0]
   20c5e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   20c60:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20c62:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   20c64:	4629      	mov	r1, r5
   20c66:	f242 0022 	movw	r0, #8226	; 0x2022
   20c6a:	f7f3 fff9 	bl	14c60 <bt_hci_cmd_send>
}
   20c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   20c70:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20c74:	e7fb      	b.n	20c6e <bt_le_set_data_len+0x30>

00020c76 <bt_le_set_phy>:
{
   20c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c7a:	4607      	mov	r7, r0
   20c7c:	460e      	mov	r6, r1
   20c7e:	4615      	mov	r5, r2
   20c80:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20c82:	2107      	movs	r1, #7
   20c84:	f242 0032 	movw	r0, #8242	; 0x2032
   20c88:	f7f3 fd9e 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20c8c:	b1a0      	cbz	r0, 20cb8 <bt_le_set_phy+0x42>
   20c8e:	4680      	mov	r8, r0
   20c90:	2107      	movs	r1, #7
   20c92:	3008      	adds	r0, #8
   20c94:	f002 fd59 	bl	2374a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20c98:	883b      	ldrh	r3, [r7, #0]
   20c9a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   20c9c:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20c9e:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20ca0:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   20ca2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   20ca6:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   20caa:	4641      	mov	r1, r8
   20cac:	f242 0032 	movw	r0, #8242	; 0x2032
   20cb0:	f7f3 ffd6 	bl	14c60 <bt_hci_cmd_send>
}
   20cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   20cb8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20cbc:	e7fa      	b.n	20cb4 <bt_le_set_phy+0x3e>

00020cbe <hci_le_read_remote_features>:
{
   20cbe:	b538      	push	{r3, r4, r5, lr}
   20cc0:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   20cc2:	2102      	movs	r1, #2
   20cc4:	f242 0016 	movw	r0, #8214	; 0x2016
   20cc8:	f7f3 fd7e 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20ccc:	b168      	cbz	r0, 20cea <hci_le_read_remote_features+0x2c>
   20cce:	4605      	mov	r5, r0
   20cd0:	2102      	movs	r1, #2
   20cd2:	3008      	adds	r0, #8
   20cd4:	f002 fd39 	bl	2374a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20cd8:	8823      	ldrh	r3, [r4, #0]
   20cda:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   20cdc:	4629      	mov	r1, r5
   20cde:	f242 0016 	movw	r0, #8214	; 0x2016
   20ce2:	f7f3 ffbd 	bl	14c60 <bt_hci_cmd_send>
	return 0;
   20ce6:	2000      	movs	r0, #0
}
   20ce8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   20cea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20cee:	e7fb      	b.n	20ce8 <hci_le_read_remote_features+0x2a>

00020cf0 <enh_conn_complete>:
{
   20cf0:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   20cf2:	f7f4 f839 	bl	14d68 <bt_hci_le_enh_conn_complete>
}
   20cf6:	bd08      	pop	{r3, pc}

00020cf8 <le_enh_conn_complete>:
{
   20cf8:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   20cfa:	6880      	ldr	r0, [r0, #8]
   20cfc:	f7ff fff8 	bl	20cf0 <enh_conn_complete>
}
   20d00:	bd08      	pop	{r3, pc}

00020d02 <le_legacy_conn_complete>:
{
   20d02:	b500      	push	{lr}
   20d04:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   20d06:	6883      	ldr	r3, [r0, #8]
	enh.status         = evt->status;
   20d08:	781a      	ldrb	r2, [r3, #0]
   20d0a:	f88d 2000 	strb.w	r2, [sp]
	enh.handle         = evt->handle;
   20d0e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20d12:	f8ad 2001 	strh.w	r2, [sp, #1]
	enh.role           = evt->role;
   20d16:	78da      	ldrb	r2, [r3, #3]
   20d18:	f88d 2003 	strb.w	r2, [sp, #3]
	enh.interval       = evt->interval;
   20d1c:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   20d20:	f8ad 2017 	strh.w	r2, [sp, #23]
	enh.latency        = evt->latency;
   20d24:	f8b3 200d 	ldrh.w	r2, [r3, #13]
   20d28:	f8ad 2019 	strh.w	r2, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   20d2c:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   20d30:	f8ad 201b 	strh.w	r2, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   20d34:	7c5a      	ldrb	r2, [r3, #17]
   20d36:	f88d 201d 	strb.w	r2, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   20d3a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   20d3e:	9001      	str	r0, [sp, #4]
   20d40:	889a      	ldrh	r2, [r3, #4]
   20d42:	799b      	ldrb	r3, [r3, #6]
   20d44:	f8ad 2008 	strh.w	r2, [sp, #8]
   20d48:	f88d 300a 	strb.w	r3, [sp, #10]
	memcpy(dst, src, sizeof(*dst));
   20d4c:	2300      	movs	r3, #0
   20d4e:	f8cd 300b 	str.w	r3, [sp, #11]
   20d52:	f8ad 300f 	strh.w	r3, [sp, #15]
   20d56:	f8cd 3011 	str.w	r3, [sp, #17]
   20d5a:	f8ad 3015 	strh.w	r3, [sp, #21]
	enh_conn_complete(&enh);
   20d5e:	4668      	mov	r0, sp
   20d60:	f7ff ffc6 	bl	20cf0 <enh_conn_complete>
}
   20d64:	b009      	add	sp, #36	; 0x24
   20d66:	f85d fb04 	ldr.w	pc, [sp], #4

00020d6a <le_phy_update_complete>:
{
   20d6a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   20d6c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20d6e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20d72:	f7f5 f897 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   20d76:	b198      	cbz	r0, 20da0 <le_phy_update_complete+0x36>
   20d78:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   20d7a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20d7c:	f3bf 8f5b 	dmb	ish
   20d80:	e853 2f00 	ldrex	r2, [r3]
   20d84:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   20d88:	e843 1000 	strex	r0, r1, [r3]
   20d8c:	2800      	cmp	r0, #0
   20d8e:	d1f7      	bne.n	20d80 <le_phy_update_complete+0x16>
   20d90:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   20d94:	f012 0f80 	tst.w	r2, #128	; 0x80
   20d98:	d103      	bne.n	20da2 <le_phy_update_complete+0x38>
	bt_conn_unref(conn);
   20d9a:	4620      	mov	r0, r4
   20d9c:	f000 fd20 	bl	217e0 <bt_conn_unref>
}
   20da0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20da2:	f3bf 8f5b 	dmb	ish
   20da6:	e853 2f00 	ldrex	r2, [r3]
   20daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   20dae:	e843 2100 	strex	r1, r2, [r3]
   20db2:	2900      	cmp	r1, #0
   20db4:	d1f7      	bne.n	20da6 <le_phy_update_complete+0x3c>
   20db6:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   20dba:	4620      	mov	r0, r4
   20dbc:	f7f3 ff74 	bl	14ca8 <conn_auto_initiate>
   20dc0:	e7eb      	b.n	20d9a <le_phy_update_complete+0x30>

00020dc2 <le_remote_feat_complete>:
{
   20dc2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   20dc4:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20dc6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   20dca:	f7f5 f86b 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   20dce:	b1e0      	cbz	r0, 20e0a <le_remote_feat_complete+0x48>
   20dd0:	4605      	mov	r5, r0
	if (!evt->status) {
   20dd2:	7823      	ldrb	r3, [r4, #0]
   20dd4:	b933      	cbnz	r3, 20de4 <le_remote_feat_complete+0x22>
   20dd6:	f854 2f03 	ldr.w	r2, [r4, #3]!
   20dda:	6863      	ldr	r3, [r4, #4]
   20ddc:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   20de0:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   20de4:	1d2b      	adds	r3, r5, #4
   20de6:	f3bf 8f5b 	dmb	ish
   20dea:	e853 2f00 	ldrex	r2, [r3]
   20dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   20df2:	e843 2100 	strex	r1, r2, [r3]
   20df6:	2900      	cmp	r1, #0
   20df8:	d1f7      	bne.n	20dea <le_remote_feat_complete+0x28>
   20dfa:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   20dfe:	4628      	mov	r0, r5
   20e00:	f7f3 ff52 	bl	14ca8 <conn_auto_initiate>
	bt_conn_unref(conn);
   20e04:	4628      	mov	r0, r5
   20e06:	f000 fceb 	bl	217e0 <bt_conn_unref>
}
   20e0a:	bd38      	pop	{r3, r4, r5, pc}

00020e0c <le_conn_param_neg_reply>:
{
   20e0c:	b570      	push	{r4, r5, r6, lr}
   20e0e:	4605      	mov	r5, r0
   20e10:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   20e12:	2103      	movs	r1, #3
   20e14:	f242 0021 	movw	r0, #8225	; 0x2021
   20e18:	f7f3 fcd6 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20e1c:	b158      	cbz	r0, 20e36 <le_conn_param_neg_reply+0x2a>
   20e1e:	4606      	mov	r6, r0
   20e20:	2103      	movs	r1, #3
   20e22:	3008      	adds	r0, #8
   20e24:	f002 fc91 	bl	2374a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   20e28:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   20e2a:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20e2c:	4631      	mov	r1, r6
   20e2e:	f242 0021 	movw	r0, #8225	; 0x2021
   20e32:	f7f3 ff15 	bl	14c60 <bt_hci_cmd_send>
}
   20e36:	bd70      	pop	{r4, r5, r6, pc}

00020e38 <le_conn_param_req_reply>:
{
   20e38:	b570      	push	{r4, r5, r6, lr}
   20e3a:	4605      	mov	r5, r0
   20e3c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   20e3e:	210e      	movs	r1, #14
   20e40:	f242 0020 	movw	r0, #8224	; 0x2020
   20e44:	f7f3 fcc0 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   20e48:	b1c0      	cbz	r0, 20e7c <le_conn_param_req_reply+0x44>
   20e4a:	4606      	mov	r6, r0
   20e4c:	210e      	movs	r1, #14
   20e4e:	3008      	adds	r0, #8
   20e50:	f002 fc7b 	bl	2374a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   20e54:	2300      	movs	r3, #0
   20e56:	6003      	str	r3, [r0, #0]
   20e58:	6043      	str	r3, [r0, #4]
   20e5a:	6083      	str	r3, [r0, #8]
   20e5c:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   20e5e:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   20e60:	8823      	ldrh	r3, [r4, #0]
   20e62:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   20e64:	8863      	ldrh	r3, [r4, #2]
   20e66:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   20e68:	88a3      	ldrh	r3, [r4, #4]
   20e6a:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20e6c:	88e3      	ldrh	r3, [r4, #6]
   20e6e:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   20e70:	4631      	mov	r1, r6
   20e72:	f242 0020 	movw	r0, #8224	; 0x2020
   20e76:	f7f3 fef3 	bl	14c60 <bt_hci_cmd_send>
}
   20e7a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   20e7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20e80:	e7fb      	b.n	20e7a <le_conn_param_req_reply+0x42>

00020e82 <le_conn_param_req>:
{
   20e82:	b530      	push	{r4, r5, lr}
   20e84:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   20e86:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   20e88:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20e8a:	885a      	ldrh	r2, [r3, #2]
   20e8c:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   20e90:	889a      	ldrh	r2, [r3, #4]
   20e92:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20e96:	88da      	ldrh	r2, [r3, #6]
   20e98:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20e9c:	891b      	ldrh	r3, [r3, #8]
   20e9e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   20ea2:	4620      	mov	r0, r4
   20ea4:	f7f4 fffe 	bl	15ea4 <bt_conn_lookup_handle>
	if (!conn) {
   20ea8:	b168      	cbz	r0, 20ec6 <le_conn_param_req+0x44>
   20eaa:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   20eac:	4669      	mov	r1, sp
   20eae:	f7f5 f8fb 	bl	160a8 <le_param_req>
   20eb2:	b968      	cbnz	r0, 20ed0 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   20eb4:	211e      	movs	r1, #30
   20eb6:	4620      	mov	r0, r4
   20eb8:	f7ff ffa8 	bl	20e0c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20ebc:	4628      	mov	r0, r5
   20ebe:	f000 fc8f 	bl	217e0 <bt_conn_unref>
}
   20ec2:	b003      	add	sp, #12
   20ec4:	bd30      	pop	{r4, r5, pc}
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   20ec6:	2102      	movs	r1, #2
   20ec8:	4620      	mov	r0, r4
   20eca:	f7ff ff9f 	bl	20e0c <le_conn_param_neg_reply>
		return;
   20ece:	e7f8      	b.n	20ec2 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   20ed0:	4669      	mov	r1, sp
   20ed2:	4620      	mov	r0, r4
   20ed4:	f7ff ffb0 	bl	20e38 <le_conn_param_req_reply>
   20ed8:	e7f0      	b.n	20ebc <le_conn_param_req+0x3a>

00020eda <process_events>:
{
   20eda:	b538      	push	{r3, r4, r5, lr}
   20edc:	4604      	mov	r4, r0
   20ede:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   20ee0:	e003      	b.n	20eea <process_events+0x10>
				send_cmd();
   20ee2:	f7f4 f80d 	bl	14f00 <send_cmd>
	for (; count; ev++, count--) {
   20ee6:	3414      	adds	r4, #20
   20ee8:	3d01      	subs	r5, #1
   20eea:	b175      	cbz	r5, 20f0a <process_events+0x30>
		switch (ev->state) {
   20eec:	68e3      	ldr	r3, [r4, #12]
   20eee:	f3c3 3345 	ubfx	r3, r3, #13, #6
   20ef2:	2b04      	cmp	r3, #4
   20ef4:	d1f7      	bne.n	20ee6 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   20ef6:	7b23      	ldrb	r3, [r4, #12]
   20ef8:	2b00      	cmp	r3, #0
   20efa:	d0f2      	beq.n	20ee2 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   20efc:	2b01      	cmp	r3, #1
   20efe:	d1f2      	bne.n	20ee6 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
   20f00:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   20f02:	3838      	subs	r0, #56	; 0x38
   20f04:	f7f5 fa74 	bl	163f0 <bt_conn_process_tx>
   20f08:	e7ed      	b.n	20ee6 <process_events+0xc>
}
   20f0a:	bd38      	pop	{r3, r4, r5, pc}

00020f0c <bt_init>:
{
   20f0c:	b510      	push	{r4, lr}
	err = hci_init();
   20f0e:	f7f3 fe71 	bl	14bf4 <hci_init>
	if (err) {
   20f12:	4604      	mov	r4, r0
   20f14:	b108      	cbz	r0, 20f1a <bt_init+0xe>
}
   20f16:	4620      	mov	r0, r4
   20f18:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   20f1a:	f7f5 faa7 	bl	1646c <bt_conn_init>
		if (err) {
   20f1e:	4604      	mov	r4, r0
   20f20:	2800      	cmp	r0, #0
   20f22:	d1f8      	bne.n	20f16 <bt_init+0xa>
	bt_finalize_init();
   20f24:	f7f4 f946 	bl	151b4 <bt_finalize_init>
	return 0;
   20f28:	e7f5      	b.n	20f16 <bt_init+0xa>

00020f2a <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   20f2a:	2000      	movs	r0, #0
   20f2c:	4770      	bx	lr

00020f2e <bt_lookup_id_addr>:
}
   20f2e:	4608      	mov	r0, r1
   20f30:	4770      	bx	lr

00020f32 <bt_id_set_adv_random_addr>:
{
   20f32:	b508      	push	{r3, lr}
		return set_random_address(addr);
   20f34:	4608      	mov	r0, r1
   20f36:	f7f4 fa17 	bl	15368 <set_random_address>
}
   20f3a:	bd08      	pop	{r3, pc}

00020f3c <bt_id_set_adv_private_addr>:
{
   20f3c:	b510      	push	{r4, lr}
   20f3e:	b082      	sub	sp, #8
   20f40:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20f42:	2106      	movs	r1, #6
   20f44:	4668      	mov	r0, sp
   20f46:	f7f8 f8a9 	bl	1909c <bt_rand>
	if (err) {
   20f4a:	b108      	cbz	r0, 20f50 <bt_id_set_adv_private_addr+0x14>
}
   20f4c:	b002      	add	sp, #8
   20f4e:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   20f50:	f89d 3005 	ldrb.w	r3, [sp, #5]
   20f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20f58:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   20f5c:	4669      	mov	r1, sp
   20f5e:	4620      	mov	r0, r4
   20f60:	f7ff ffe7 	bl	20f32 <bt_id_set_adv_random_addr>
	if (err) {
   20f64:	e7f2      	b.n	20f4c <bt_id_set_adv_private_addr+0x10>

00020f66 <bt_id_adv_random_addr_check>:
}
   20f66:	2001      	movs	r0, #1
   20f68:	4770      	bx	lr

00020f6a <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   20f6a:	2300      	movs	r3, #0
   20f6c:	428b      	cmp	r3, r1
   20f6e:	d218      	bcs.n	20fa2 <ad_is_limited+0x38>
{
   20f70:	b430      	push	{r4, r5}
   20f72:	e002      	b.n	20f7a <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   20f74:	3301      	adds	r3, #1
   20f76:	428b      	cmp	r3, r1
   20f78:	d210      	bcs.n	20f9c <ad_is_limited+0x32>
		if (ad[i].type == BT_DATA_FLAGS &&
   20f7a:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   20f7e:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
   20f82:	f240 1201 	movw	r2, #257	; 0x101
   20f86:	4294      	cmp	r4, r2
   20f88:	d1f4      	bne.n	20f74 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   20f8a:	686a      	ldr	r2, [r5, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   20f8c:	2a00      	cmp	r2, #0
   20f8e:	d0f1      	beq.n	20f74 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   20f90:	7812      	ldrb	r2, [r2, #0]
   20f92:	f012 0f01 	tst.w	r2, #1
   20f96:	d0ed      	beq.n	20f74 <ad_is_limited+0xa>
				return true;
   20f98:	2001      	movs	r0, #1
   20f9a:	e000      	b.n	20f9e <ad_is_limited+0x34>
	return false;
   20f9c:	2000      	movs	r0, #0
}
   20f9e:	bc30      	pop	{r4, r5}
   20fa0:	4770      	bx	lr
	return false;
   20fa2:	2000      	movs	r0, #0
}
   20fa4:	4770      	bx	lr

00020fa6 <get_filter_policy>:
}
   20fa6:	2000      	movs	r0, #0
   20fa8:	4770      	bx	lr

00020faa <get_adv_channel_map>:
{
   20faa:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   20fac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20fb0:	d10b      	bne.n	20fca <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   20fb2:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20fb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   20fb8:	d001      	beq.n	20fbe <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   20fba:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20fbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   20fc2:	d001      	beq.n	20fc8 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   20fc4:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   20fc8:	4770      	bx	lr
		channel_map &= ~0x01;
   20fca:	2006      	movs	r0, #6
   20fcc:	e7f2      	b.n	20fb4 <get_adv_channel_map+0xa>

00020fce <set_data_add_complete>:
{
   20fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fd2:	b083      	sub	sp, #12
   20fd4:	4605      	mov	r5, r0
   20fd6:	4688      	mov	r8, r1
   20fd8:	9201      	str	r2, [sp, #4]
   20fda:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < ad_len; i++) {
   20fdc:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   20fe0:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   20fe2:	9a00      	ldr	r2, [sp, #0]
   20fe4:	4552      	cmp	r2, sl
   20fe6:	d939      	bls.n	2105c <set_data_add_complete+0x8e>
		const struct bt_data *data = ad[i].data;
   20fe8:	9a01      	ldr	r2, [sp, #4]
   20fea:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   20fee:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]
		for (size_t j = 0; j < ad[i].len; j++) {
   20ff2:	2400      	movs	r4, #0
   20ff4:	e016      	b.n	21024 <set_data_add_complete+0x56>
				type = BT_DATA_NAME_SHORTENED;
   20ff6:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   20ffa:	b2d6      	uxtb	r6, r2
   20ffc:	1c59      	adds	r1, r3, #1
   20ffe:	b2c9      	uxtb	r1, r1
   21000:	f106 0b01 	add.w	fp, r6, #1
   21004:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   21008:	3302      	adds	r3, #2
   2100a:	fa5f fb83 	uxtb.w	fp, r3
   2100e:	f805 c001 	strb.w	ip, [r5, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21012:	6841      	ldr	r1, [r0, #4]
   21014:	eb05 000b 	add.w	r0, r5, fp
   21018:	f004 fb85 	bl	25726 <memcpy>
			set_data_len += len;
   2101c:	eb0b 0306 	add.w	r3, fp, r6
   21020:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   21022:	3401      	adds	r4, #1
   21024:	f8d9 2004 	ldr.w	r2, [r9, #4]
   21028:	4294      	cmp	r4, r2
   2102a:	d214      	bcs.n	21056 <set_data_add_complete+0x88>
			size_t len = data[j].data_len;
   2102c:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   21030:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   21032:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   21036:	469e      	mov	lr, r3
   21038:	1899      	adds	r1, r3, r2
   2103a:	3102      	adds	r1, #2
   2103c:	4541      	cmp	r1, r8
   2103e:	d9dc      	bls.n	20ffa <set_data_add_complete+0x2c>
				ssize_t shortened_len = set_data_len_max -
   21040:	eba8 0203 	sub.w	r2, r8, r3
   21044:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   21046:	f1bc 0f09 	cmp.w	ip, #9
   2104a:	d10b      	bne.n	21064 <set_data_add_complete+0x96>
   2104c:	2a00      	cmp	r2, #0
   2104e:	dcd2      	bgt.n	20ff6 <set_data_add_complete+0x28>
					return -EINVAL;
   21050:	f06f 0015 	mvn.w	r0, #21
   21054:	e008      	b.n	21068 <set_data_add_complete+0x9a>
	for (size_t i = 0; i < ad_len; i++) {
   21056:	f10a 0a01 	add.w	sl, sl, #1
   2105a:	e7c2      	b.n	20fe2 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   2105c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2105e:	7013      	strb	r3, [r2, #0]
	return 0;
   21060:	2000      	movs	r0, #0
   21062:	e001      	b.n	21068 <set_data_add_complete+0x9a>
					return -EINVAL;
   21064:	f06f 0015 	mvn.w	r0, #21
}
   21068:	b003      	add	sp, #12
   2106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002106e <hci_set_ad>:
{
   2106e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21072:	b082      	sub	sp, #8
   21074:	4607      	mov	r7, r0
   21076:	460d      	mov	r5, r1
   21078:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2107a:	2120      	movs	r1, #32
   2107c:	f7f3 fba4 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   21080:	b300      	cbz	r0, 210c4 <hci_set_ad+0x56>
   21082:	4680      	mov	r8, r0
   21084:	2120      	movs	r1, #32
   21086:	3008      	adds	r0, #8
   21088:	f002 fb5f 	bl	2374a <net_buf_simple_add>
   2108c:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2108e:	2220      	movs	r2, #32
   21090:	2100      	movs	r1, #0
   21092:	f004 fb83 	bl	2579c <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   21096:	9400      	str	r4, [sp, #0]
   21098:	4633      	mov	r3, r6
   2109a:	462a      	mov	r2, r5
   2109c:	211f      	movs	r1, #31
   2109e:	1c60      	adds	r0, r4, #1
   210a0:	f7ff ff95 	bl	20fce <set_data_add_complete>
	if (err) {
   210a4:	4604      	mov	r4, r0
   210a6:	b948      	cbnz	r0, 210bc <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   210a8:	2200      	movs	r2, #0
   210aa:	4641      	mov	r1, r8
   210ac:	4638      	mov	r0, r7
   210ae:	f7f3 fbc7 	bl	14840 <bt_hci_cmd_send_sync>
   210b2:	4604      	mov	r4, r0
}
   210b4:	4620      	mov	r0, r4
   210b6:	b002      	add	sp, #8
   210b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   210bc:	4640      	mov	r0, r8
   210be:	f002 fafa 	bl	236b6 <net_buf_unref>
		return err;
   210c2:	e7f7      	b.n	210b4 <hci_set_ad+0x46>
		return -ENOBUFS;
   210c4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   210c8:	e7f4      	b.n	210b4 <hci_set_ad+0x46>

000210ca <set_ad>:
{
   210ca:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   210cc:	f242 0008 	movw	r0, #8200	; 0x2008
   210d0:	f7ff ffcd 	bl	2106e <hci_set_ad>
}
   210d4:	bd08      	pop	{r3, pc}

000210d6 <set_sd>:
{
   210d6:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   210d8:	f242 0009 	movw	r0, #8201	; 0x2009
   210dc:	f7ff ffc7 	bl	2106e <hci_set_ad>
}
   210e0:	bd08      	pop	{r3, pc}

000210e2 <le_adv_update>:
{
   210e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210e6:	b089      	sub	sp, #36	; 0x24
   210e8:	4604      	mov	r4, r0
   210ea:	460e      	mov	r6, r1
   210ec:	4617      	mov	r7, r2
   210ee:	461d      	mov	r5, r3
   210f0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   210f4:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   210f8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   210fc:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   21100:	2300      	movs	r3, #0
   21102:	9304      	str	r3, [sp, #16]
   21104:	9305      	str	r3, [sp, #20]
   21106:	9306      	str	r3, [sp, #24]
   21108:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   2110a:	f1b9 0f00 	cmp.w	r9, #0
   2110e:	d133      	bne.n	21178 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   21110:	f1bb 0f00 	cmp.w	fp, #0
   21114:	d002      	beq.n	2111c <le_adv_update+0x3a>
   21116:	f1ba 0f00 	cmp.w	sl, #0
   2111a:	d10b      	bne.n	21134 <le_adv_update+0x52>
		d[0].data = ad;
   2111c:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   2111e:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   21120:	f1b9 0f01 	cmp.w	r9, #1
   21124:	d056      	beq.n	211d4 <le_adv_update+0xf2>
		d_len = 1;
   21126:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   21128:	a904      	add	r1, sp, #16
   2112a:	4620      	mov	r0, r4
   2112c:	f7ff ffcd 	bl	210ca <set_ad>
		if (err) {
   21130:	4603      	mov	r3, r0
   21132:	b9e8      	cbnz	r0, 21170 <le_adv_update+0x8e>
	if (scannable) {
   21134:	f1ba 0f00 	cmp.w	sl, #0
   21138:	d00c      	beq.n	21154 <le_adv_update+0x72>
		d[0].data = sd;
   2113a:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   2113c:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   21140:	f1b9 0f02 	cmp.w	r9, #2
   21144:	d04c      	beq.n	211e0 <le_adv_update+0xfe>
		d_len = 1;
   21146:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   21148:	a904      	add	r1, sp, #16
   2114a:	4620      	mov	r0, r4
   2114c:	f7ff ffc3 	bl	210d6 <set_sd>
		if (err) {
   21150:	4603      	mov	r3, r0
   21152:	b968      	cbnz	r0, 21170 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   21154:	3410      	adds	r4, #16
   21156:	f3bf 8f5b 	dmb	ish
   2115a:	e854 3f00 	ldrex	r3, [r4]
   2115e:	f043 0304 	orr.w	r3, r3, #4
   21162:	e844 3200 	strex	r2, r3, [r4]
   21166:	2a00      	cmp	r2, #0
   21168:	d1f7      	bne.n	2115a <le_adv_update+0x78>
   2116a:	f3bf 8f5b 	dmb	ish
	return 0;
   2116e:	2300      	movs	r3, #0
}
   21170:	4618      	mov	r0, r3
   21172:	b009      	add	sp, #36	; 0x24
   21174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   21178:	f7f4 f8d8 	bl	1532c <bt_get_name>
   2117c:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   2117e:	b166      	cbz	r6, 2119a <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   21180:	2200      	movs	r2, #0
   21182:	4297      	cmp	r7, r2
   21184:	d907      	bls.n	21196 <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   21186:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   2118a:	3b08      	subs	r3, #8
   2118c:	b2db      	uxtb	r3, r3
   2118e:	2b01      	cmp	r3, #1
   21190:	d90f      	bls.n	211b2 <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   21192:	3201      	adds	r2, #1
   21194:	e7f5      	b.n	21182 <le_adv_update+0xa0>
	return false;
   21196:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   21198:	bb43      	cbnz	r3, 211ec <le_adv_update+0x10a>
   2119a:	b175      	cbz	r5, 211ba <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   2119c:	2200      	movs	r2, #0
   2119e:	4590      	cmp	r8, r2
   211a0:	d909      	bls.n	211b6 <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   211a2:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   211a6:	3b08      	subs	r3, #8
   211a8:	b2db      	uxtb	r3, r3
   211aa:	2b01      	cmp	r3, #1
   211ac:	d910      	bls.n	211d0 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   211ae:	3201      	adds	r2, #1
   211b0:	e7f5      	b.n	2119e <le_adv_update+0xbc>
			return true;
   211b2:	2301      	movs	r3, #1
   211b4:	e7f0      	b.n	21198 <le_adv_update+0xb6>
	return false;
   211b6:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   211b8:	b9db      	cbnz	r3, 211f2 <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   211ba:	9801      	ldr	r0, [sp, #4]
   211bc:	f7eb f910 	bl	c3e0 <strlen>
   211c0:	2309      	movs	r3, #9
   211c2:	f88d 3008 	strb.w	r3, [sp, #8]
   211c6:	f88d 0009 	strb.w	r0, [sp, #9]
   211ca:	9b01      	ldr	r3, [sp, #4]
   211cc:	9303      	str	r3, [sp, #12]
   211ce:	e79f      	b.n	21110 <le_adv_update+0x2e>
			return true;
   211d0:	2301      	movs	r3, #1
   211d2:	e7f1      	b.n	211b8 <le_adv_update+0xd6>
			d[1].data = &data;
   211d4:	ab02      	add	r3, sp, #8
   211d6:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   211d8:	2301      	movs	r3, #1
   211da:	9307      	str	r3, [sp, #28]
			d_len = 2;
   211dc:	2202      	movs	r2, #2
   211de:	e7a3      	b.n	21128 <le_adv_update+0x46>
			d[1].data = &data;
   211e0:	ab02      	add	r3, sp, #8
   211e2:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   211e4:	2301      	movs	r3, #1
   211e6:	9307      	str	r3, [sp, #28]
			d_len = 2;
   211e8:	2202      	movs	r2, #2
   211ea:	e7ad      	b.n	21148 <le_adv_update+0x66>
			return -EINVAL;
   211ec:	f06f 0315 	mvn.w	r3, #21
   211f0:	e7be      	b.n	21170 <le_adv_update+0x8e>
   211f2:	f06f 0315 	mvn.w	r3, #21
   211f6:	e7bb      	b.n	21170 <le_adv_update+0x8e>

000211f8 <valid_adv_param>:
{
   211f8:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   211fa:	6843      	ldr	r3, [r0, #4]
   211fc:	f413 6f80 	tst.w	r3, #1024	; 0x400
   21200:	d107      	bne.n	21212 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   21202:	6902      	ldr	r2, [r0, #16]
   21204:	b112      	cbz	r2, 2120c <valid_adv_param+0x14>
   21206:	f013 0f01 	tst.w	r3, #1
   2120a:	d004      	beq.n	21216 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   2120c:	f7f4 faa6 	bl	1575c <valid_adv_ext_param>
}
   21210:	bd08      	pop	{r3, pc}
		return false;
   21212:	2000      	movs	r0, #0
   21214:	e7fc      	b.n	21210 <valid_adv_param+0x18>
		return false;
   21216:	2000      	movs	r0, #0
   21218:	e7fa      	b.n	21210 <valid_adv_param+0x18>

0002121a <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2121a:	6843      	ldr	r3, [r0, #4]
   2121c:	f013 0f08 	tst.w	r3, #8
   21220:	d00b      	beq.n	2123a <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   21222:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   21226:	d10a      	bne.n	2123e <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   21228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2122c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   21230:	d001      	beq.n	21236 <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   21232:	2002      	movs	r0, #2
}
   21234:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   21236:	2001      	movs	r0, #1
   21238:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   2123a:	2000      	movs	r0, #0
   2123c:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2123e:	2001      	movs	r0, #1
   21240:	4770      	bx	lr

00021242 <bt_le_adv_set_enable_legacy>:
{
   21242:	b570      	push	{r4, r5, r6, lr}
   21244:	b086      	sub	sp, #24
   21246:	4605      	mov	r5, r0
   21248:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2124a:	2101      	movs	r1, #1
   2124c:	f242 000a 	movw	r0, #8202	; 0x200a
   21250:	f7f3 faba 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   21254:	b1d0      	cbz	r0, 2128c <bt_le_adv_set_enable_legacy+0x4a>
   21256:	4606      	mov	r6, r0
	if (enable) {
   21258:	b19c      	cbz	r4, 21282 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2125a:	2101      	movs	r1, #1
   2125c:	3008      	adds	r0, #8
   2125e:	f002 fa85 	bl	2376c <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   21262:	9400      	str	r4, [sp, #0]
   21264:	2306      	movs	r3, #6
   21266:	f105 0210 	add.w	r2, r5, #16
   2126a:	a903      	add	r1, sp, #12
   2126c:	4630      	mov	r0, r6
   2126e:	f7f3 fa99 	bl	147a4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   21272:	2200      	movs	r2, #0
   21274:	4631      	mov	r1, r6
   21276:	f242 000a 	movw	r0, #8202	; 0x200a
   2127a:	f7f3 fae1 	bl	14840 <bt_hci_cmd_send_sync>
}
   2127e:	b006      	add	sp, #24
   21280:	bd70      	pop	{r4, r5, r6, pc}
   21282:	2100      	movs	r1, #0
   21284:	3008      	adds	r0, #8
   21286:	f002 fa71 	bl	2376c <net_buf_simple_add_u8>
   2128a:	e7ea      	b.n	21262 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   2128c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21290:	e7f5      	b.n	2127e <bt_le_adv_set_enable_legacy+0x3c>

00021292 <bt_le_adv_set_enable>:
{
   21292:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   21294:	f7ff ffd5 	bl	21242 <bt_le_adv_set_enable_legacy>
}
   21298:	bd08      	pop	{r3, pc}

0002129a <bt_le_lim_adv_cancel_timeout>:
{
   2129a:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2129c:	3018      	adds	r0, #24
   2129e:	f003 feba 	bl	25016 <k_work_cancel_delayable>
}
   212a2:	bd08      	pop	{r3, pc}

000212a4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   212a4:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   212a6:	f7f4 fb25 	bl	158f4 <bt_le_adv_lookup_legacy>
   212aa:	4604      	mov	r4, r0
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   212ac:	f7ff fff5 	bl	2129a <bt_le_lim_adv_cancel_timeout>

	if (!adv) {
   212b0:	b354      	cbz	r4, 21308 <bt_le_adv_stop+0x64>
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   212b2:	f104 0310 	add.w	r3, r4, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   212b6:	f3bf 8f5b 	dmb	ish
   212ba:	e853 2f00 	ldrex	r2, [r3]
   212be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   212c2:	e843 2100 	strex	r1, r2, [r3]
   212c6:	2900      	cmp	r1, #0
   212c8:	d1f7      	bne.n	212ba <bt_le_adv_stop+0x16>
   212ca:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   212ce:	f3bf 8f5b 	dmb	ish
   212d2:	6923      	ldr	r3, [r4, #16]
   212d4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   212d8:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   212dc:	f013 0f40 	tst.w	r3, #64	; 0x40
   212e0:	d100      	bne.n	212e4 <bt_le_adv_stop+0x40>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   212e2:	bd10      	pop	{r4, pc}
   212e4:	f3bf 8f5b 	dmb	ish
   212e8:	6923      	ldr	r3, [r4, #16]
   212ea:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   212ee:	f413 7f00 	tst.w	r3, #512	; 0x200
   212f2:	d104      	bne.n	212fe <bt_le_adv_stop+0x5a>
		err = bt_le_adv_set_enable_legacy(adv, false);
   212f4:	2100      	movs	r1, #0
   212f6:	4620      	mov	r0, r4
   212f8:	f7ff ffa3 	bl	21242 <bt_le_adv_set_enable_legacy>
		if (err) {
   212fc:	e7f1      	b.n	212e2 <bt_le_adv_stop+0x3e>
		le_adv_stop_free_conn(adv, 0);
   212fe:	2100      	movs	r1, #0
   21300:	4620      	mov	r0, r4
   21302:	f7f4 fac3 	bl	1588c <le_adv_stop_free_conn>
   21306:	e7f5      	b.n	212f4 <bt_le_adv_stop+0x50>
		return 0;
   21308:	2000      	movs	r0, #0
   2130a:	e7ea      	b.n	212e2 <bt_le_adv_stop+0x3e>

0002130c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   2130c:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   2130e:	f7ff ffc9 	bl	212a4 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
}
   21312:	bd08      	pop	{r3, pc}

00021314 <bt_le_adv_resume>:
{
   21314:	b530      	push	{r4, r5, lr}
   21316:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   21318:	f7f4 faec 	bl	158f4 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2131c:	b150      	cbz	r0, 21334 <bt_le_adv_resume+0x20>
   2131e:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   21320:	f100 0510 	add.w	r5, r0, #16
   21324:	f3bf 8f5b 	dmb	ish
   21328:	6903      	ldr	r3, [r0, #16]
   2132a:	f3bf 8f5b 	dmb	ish
   2132e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   21332:	d101      	bne.n	21338 <bt_le_adv_resume+0x24>
}
   21334:	b003      	add	sp, #12
   21336:	bd30      	pop	{r4, r5, pc}
   21338:	f3bf 8f5b 	dmb	ish
   2133c:	6903      	ldr	r3, [r0, #16]
   2133e:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   21342:	f013 0f40 	tst.w	r3, #64	; 0x40
   21346:	d1f5      	bne.n	21334 <bt_le_adv_resume+0x20>
   21348:	f3bf 8f5b 	dmb	ish
   2134c:	6903      	ldr	r3, [r0, #16]
   2134e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   21352:	f413 7f00 	tst.w	r3, #512	; 0x200
   21356:	d0ed      	beq.n	21334 <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   21358:	a901      	add	r1, sp, #4
   2135a:	f7f4 fa4d 	bl	157f8 <le_adv_start_add_conn>
	if (err) {
   2135e:	2800      	cmp	r0, #0
   21360:	d1e8      	bne.n	21334 <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   21362:	2101      	movs	r1, #1
   21364:	4620      	mov	r0, r4
   21366:	f7ff ff94 	bl	21292 <bt_le_adv_set_enable>
	if (err) {
   2136a:	b908      	cbnz	r0, 21370 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   2136c:	2400      	movs	r4, #0
   2136e:	e011      	b.n	21394 <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   21370:	2100      	movs	r1, #0
   21372:	9801      	ldr	r0, [sp, #4]
   21374:	f7f4 fda0 	bl	15eb8 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21378:	f3bf 8f5b 	dmb	ish
   2137c:	e855 4f00 	ldrex	r4, [r5]
   21380:	f424 5300 	bic.w	r3, r4, #8192	; 0x2000
   21384:	e845 3200 	strex	r2, r3, [r5]
   21388:	2a00      	cmp	r2, #0
   2138a:	d1f7      	bne.n	2137c <bt_le_adv_resume+0x68>
   2138c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21390:	f3c4 3440 	ubfx	r4, r4, #13, #1
	bt_conn_unref(conn);
   21394:	9801      	ldr	r0, [sp, #4]
   21396:	f000 fa23 	bl	217e0 <bt_conn_unref>
	if (persist_paused) {
   2139a:	2c00      	cmp	r4, #0
   2139c:	d0ca      	beq.n	21334 <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2139e:	f3bf 8f5b 	dmb	ish
   213a2:	e855 3f00 	ldrex	r3, [r5]
   213a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   213aa:	e845 3200 	strex	r2, r3, [r5]
   213ae:	2a00      	cmp	r2, #0
   213b0:	d1f7      	bne.n	213a2 <bt_le_adv_resume+0x8e>
   213b2:	f3bf 8f5b 	dmb	ish
}
   213b6:	e7bd      	b.n	21334 <bt_le_adv_resume+0x20>

000213b8 <tx_notify>:
{
   213b8:	b570      	push	{r4, r5, r6, lr}
   213ba:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   213bc:	e010      	b.n	213e0 <tx_notify+0x28>
	__asm__ volatile(
   213be:	f383 8811 	msr	BASEPRI, r3
   213c2:	f3bf 8f6f 	isb	sy
}
   213c6:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   213c8:	6262      	str	r2, [r4, #36]	; 0x24
   213ca:	f383 8811 	msr	BASEPRI, r3
   213ce:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   213d2:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   213d4:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   213d6:	f7f4 fcb7 	bl	15d48 <tx_free>
		cb(conn, user_data);
   213da:	4631      	mov	r1, r6
   213dc:	4620      	mov	r0, r4
   213de:	47a8      	blx	r5
	__asm__ volatile(
   213e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   213e4:	f3ef 8311 	mrs	r3, BASEPRI
   213e8:	f382 8812 	msr	BASEPRI_MAX, r2
   213ec:	f3bf 8f6f 	isb	sy
	return list->head;
   213f0:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   213f2:	2800      	cmp	r0, #0
   213f4:	d0e3      	beq.n	213be <tx_notify+0x6>
	return node->next;
   213f6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   213f8:	6222      	str	r2, [r4, #32]
	return list->tail;
   213fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   213fc:	4281      	cmp	r1, r0
   213fe:	d1e4      	bne.n	213ca <tx_notify+0x12>
   21400:	e7e2      	b.n	213c8 <tx_notify+0x10>

00021402 <tx_complete_work>:
{
   21402:	b508      	push	{r3, lr}
	tx_notify(conn);
   21404:	3828      	subs	r0, #40	; 0x28
   21406:	f7ff ffd7 	bl	213b8 <tx_notify>
}
   2140a:	bd08      	pop	{r3, pc}

0002140c <send_acl>:
{
   2140c:	b570      	push	{r4, r5, r6, lr}
   2140e:	4605      	mov	r5, r0
   21410:	460c      	mov	r4, r1
	switch (flags) {
   21412:	2a03      	cmp	r2, #3
   21414:	d819      	bhi.n	2144a <send_acl+0x3e>
   21416:	e8df f002 	tbb	[pc, r2]
   2141a:	1602      	.short	0x1602
   2141c:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   2141e:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   21420:	2104      	movs	r1, #4
   21422:	f104 0008 	add.w	r0, r4, #8
   21426:	f002 f9a8 	bl	2377a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2142a:	f9b5 3000 	ldrsh.w	r3, [r5]
   2142e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   21432:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21434:	89a3      	ldrh	r3, [r4, #12]
   21436:	3b04      	subs	r3, #4
   21438:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2143a:	2302      	movs	r3, #2
   2143c:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   2143e:	4620      	mov	r0, r4
   21440:	f7f3 fc04 	bl	14c4c <bt_send>
}
   21444:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   21446:	2601      	movs	r6, #1
   21448:	e7ea      	b.n	21420 <send_acl+0x14>
   2144a:	f06f 0015 	mvn.w	r0, #21
   2144e:	e7f9      	b.n	21444 <send_acl+0x38>

00021450 <send_frag>:
{
   21450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21454:	4605      	mov	r5, r0
   21456:	460e      	mov	r6, r1
   21458:	4691      	mov	r9, r2
   2145a:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2145c:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   2145e:	f7f4 fcbf 	bl	15de0 <bt_conn_get_pkts>
   21462:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   21464:	f04f 32ff 	mov.w	r2, #4294967295
   21468:	f04f 33ff 	mov.w	r3, #4294967295
   2146c:	f7f9 fd32 	bl	1aed4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   21470:	7aab      	ldrb	r3, [r5, #10]
   21472:	2b07      	cmp	r3, #7
   21474:	d148      	bne.n	21508 <send_frag+0xb8>
   21476:	f04f 0240 	mov.w	r2, #64	; 0x40
   2147a:	f3ef 8311 	mrs	r3, BASEPRI
   2147e:	f382 8812 	msr	BASEPRI_MAX, r2
   21482:	f3bf 8f6f 	isb	sy
	if (tx) {
   21486:	b1a7      	cbz	r7, 214b2 <send_frag+0x62>
	parent->next = child;
   21488:	2200      	movs	r2, #0
   2148a:	603a      	str	r2, [r7, #0]
	return list->tail;
   2148c:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   2148e:	b16a      	cbz	r2, 214ac <send_frag+0x5c>
	parent->next = child;
   21490:	6017      	str	r7, [r2, #0]
	list->tail = node;
   21492:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   21494:	f383 8811 	msr	BASEPRI, r3
   21498:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   2149c:	464a      	mov	r2, r9
   2149e:	4631      	mov	r1, r6
   214a0:	4628      	mov	r0, r5
   214a2:	f7ff ffb3 	bl	2140c <send_acl>
	if (err) {
   214a6:	b988      	cbnz	r0, 214cc <send_frag+0x7c>
	return true;
   214a8:	2001      	movs	r0, #1
   214aa:	e036      	b.n	2151a <send_frag+0xca>
   214ac:	61af      	str	r7, [r5, #24]
	list->head = node;
   214ae:	616f      	str	r7, [r5, #20]
}
   214b0:	e7f0      	b.n	21494 <send_frag+0x44>
	return list->tail;
   214b2:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   214b4:	b13a      	cbz	r2, 214c6 <send_frag+0x76>
			pending_no_cb = &tail_tx->pending_no_cb;
   214b6:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   214ba:	f8da 2000 	ldr.w	r2, [sl]
   214be:	3201      	adds	r2, #1
   214c0:	f8ca 2000 	str.w	r2, [sl]
   214c4:	e7e6      	b.n	21494 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   214c6:	f105 0a1c 	add.w	sl, r5, #28
   214ca:	e7f6      	b.n	214ba <send_frag+0x6a>
	__asm__ volatile(
   214cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   214d0:	f3ef 8011 	mrs	r0, BASEPRI
   214d4:	f383 8812 	msr	BASEPRI_MAX, r3
   214d8:	f3bf 8f6f 	isb	sy
		if (tx) {
   214dc:	b347      	cbz	r7, 21530 <send_frag+0xe0>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   214de:	4639      	mov	r1, r7
	return list->head;
   214e0:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   214e2:	2200      	movs	r2, #0
   214e4:	b163      	cbz	r3, 21500 <send_frag+0xb0>
   214e6:	428b      	cmp	r3, r1
   214e8:	d002      	beq.n	214f0 <send_frag+0xa0>
   214ea:	461a      	mov	r2, r3
   214ec:	681b      	ldr	r3, [r3, #0]
   214ee:	e7f9      	b.n	214e4 <send_frag+0x94>
Z_GENLIST_REMOVE(slist, snode)
   214f0:	b1aa      	cbz	r2, 2151e <send_frag+0xce>
	return node->next;
   214f2:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   214f4:	6013      	str	r3, [r2, #0]
	return list->tail;
   214f6:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   214f8:	42bb      	cmp	r3, r7
   214fa:	d017      	beq.n	2152c <send_frag+0xdc>
	parent->next = child;
   214fc:	2300      	movs	r3, #0
   214fe:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   21500:	f380 8811 	msr	BASEPRI, r0
   21504:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   21508:	4640      	mov	r0, r8
   2150a:	f7f9 fcbb 	bl	1ae84 <z_impl_k_sem_give>
	if (tx) {
   2150e:	b117      	cbz	r7, 21516 <send_frag+0xc6>
		tx_free(tx);
   21510:	4638      	mov	r0, r7
   21512:	f7f4 fc19 	bl	15d48 <tx_free>
	if (always_consume) {
   21516:	b98c      	cbnz	r4, 2153c <send_frag+0xec>
	return false;
   21518:	4620      	mov	r0, r4
}
   2151a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   2151e:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   21520:	616b      	str	r3, [r5, #20]
	return list->tail;
   21522:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   21524:	42ba      	cmp	r2, r7
   21526:	d1e9      	bne.n	214fc <send_frag+0xac>
	list->tail = node;
   21528:	61ab      	str	r3, [r5, #24]
}
   2152a:	e7e7      	b.n	214fc <send_frag+0xac>
	list->tail = node;
   2152c:	61aa      	str	r2, [r5, #24]
}
   2152e:	e7e5      	b.n	214fc <send_frag+0xac>
			(*pending_no_cb)--;
   21530:	f8da 3000 	ldr.w	r3, [sl]
   21534:	3b01      	subs	r3, #1
   21536:	f8ca 3000 	str.w	r3, [sl]
   2153a:	e7e1      	b.n	21500 <send_frag+0xb0>
		net_buf_unref(buf);
   2153c:	4630      	mov	r0, r6
   2153e:	f002 f8ba 	bl	236b6 <net_buf_unref>
	return false;
   21542:	2000      	movs	r0, #0
   21544:	e7e9      	b.n	2151a <send_frag+0xca>

00021546 <process_unack_tx>:
{
   21546:	b510      	push	{r4, lr}
   21548:	4604      	mov	r4, r0
   2154a:	e028      	b.n	2159e <process_unack_tx+0x58>
			conn->pending_no_cb--;
   2154c:	3b01      	subs	r3, #1
   2154e:	61e3      	str	r3, [r4, #28]
   21550:	f382 8811 	msr	BASEPRI, r2
   21554:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   21558:	4620      	mov	r0, r4
   2155a:	f7f4 fc41 	bl	15de0 <bt_conn_get_pkts>
   2155e:	f7f9 fc91 	bl	1ae84 <z_impl_k_sem_give>
			continue;
   21562:	e01c      	b.n	2159e <process_unack_tx+0x58>
	list->tail = node;
   21564:	61a3      	str	r3, [r4, #24]
   21566:	f382 8811 	msr	BASEPRI, r2
   2156a:	f3bf 8f6f 	isb	sy
		if (!node) {
   2156e:	b350      	cbz	r0, 215c6 <process_unack_tx+0x80>
	__asm__ volatile(
   21570:	f04f 0240 	mov.w	r2, #64	; 0x40
   21574:	f3ef 8311 	mrs	r3, BASEPRI
   21578:	f382 8812 	msr	BASEPRI_MAX, r2
   2157c:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   21580:	68c2      	ldr	r2, [r0, #12]
   21582:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   21584:	2200      	movs	r2, #0
   21586:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   21588:	f383 8811 	msr	BASEPRI, r3
   2158c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   21590:	f7f4 fbda 	bl	15d48 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   21594:	4620      	mov	r0, r4
   21596:	f7f4 fc23 	bl	15de0 <bt_conn_get_pkts>
   2159a:	f7f9 fc73 	bl	1ae84 <z_impl_k_sem_give>
	__asm__ volatile(
   2159e:	f04f 0340 	mov.w	r3, #64	; 0x40
   215a2:	f3ef 8211 	mrs	r2, BASEPRI
   215a6:	f383 8812 	msr	BASEPRI_MAX, r3
   215aa:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   215ae:	69e3      	ldr	r3, [r4, #28]
   215b0:	2b00      	cmp	r3, #0
   215b2:	d1cb      	bne.n	2154c <process_unack_tx+0x6>
	return list->head;
   215b4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   215b6:	2800      	cmp	r0, #0
   215b8:	d0d5      	beq.n	21566 <process_unack_tx+0x20>
	return node->next;
   215ba:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   215bc:	6163      	str	r3, [r4, #20]
	return list->tail;
   215be:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   215c0:	4288      	cmp	r0, r1
   215c2:	d1d0      	bne.n	21566 <process_unack_tx+0x20>
   215c4:	e7ce      	b.n	21564 <process_unack_tx+0x1e>
}
   215c6:	bd10      	pop	{r4, pc}

000215c8 <bt_conn_reset_rx_state>:
{
   215c8:	b510      	push	{r4, lr}
   215ca:	4604      	mov	r4, r0
	if (!conn->rx) {
   215cc:	6900      	ldr	r0, [r0, #16]
   215ce:	b118      	cbz	r0, 215d8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   215d0:	f002 f871 	bl	236b6 <net_buf_unref>
	conn->rx = NULL;
   215d4:	2300      	movs	r3, #0
   215d6:	6123      	str	r3, [r4, #16]
}
   215d8:	bd10      	pop	{r4, pc}

000215da <bt_acl_recv>:
{
   215da:	b570      	push	{r4, r5, r6, lr}
   215dc:	4604      	mov	r4, r0
   215de:	460d      	mov	r5, r1
	switch (flags) {
   215e0:	2a01      	cmp	r2, #1
   215e2:	d01b      	beq.n	2161c <bt_acl_recv+0x42>
   215e4:	2a02      	cmp	r2, #2
   215e6:	d142      	bne.n	2166e <bt_acl_recv+0x94>
		if (conn->rx) {
   215e8:	6903      	ldr	r3, [r0, #16]
   215ea:	b10b      	cbz	r3, 215f0 <bt_acl_recv+0x16>
			bt_conn_reset_rx_state(conn);
   215ec:	f7ff ffec 	bl	215c8 <bt_conn_reset_rx_state>
		conn->rx = buf;
   215f0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   215f2:	6921      	ldr	r1, [r4, #16]
   215f4:	898a      	ldrh	r2, [r1, #12]
   215f6:	2a01      	cmp	r2, #1
   215f8:	d93e      	bls.n	21678 <bt_acl_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   215fa:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   215fc:	7845      	ldrb	r5, [r0, #1]
   215fe:	7803      	ldrb	r3, [r0, #0]
   21600:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   21604:	3304      	adds	r3, #4
   21606:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   21608:	429a      	cmp	r2, r3
   2160a:	d335      	bcc.n	21678 <bt_acl_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   2160c:	d835      	bhi.n	2167a <bt_acl_recv+0xa0>
	conn->rx = NULL;
   2160e:	2300      	movs	r3, #0
   21610:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   21612:	2201      	movs	r2, #1
   21614:	4620      	mov	r0, r4
   21616:	f000 fb20 	bl	21c5a <bt_l2cap_recv>
   2161a:	e02d      	b.n	21678 <bt_acl_recv+0x9e>
		if (!conn->rx) {
   2161c:	6900      	ldr	r0, [r0, #16]
   2161e:	b180      	cbz	r0, 21642 <bt_acl_recv+0x68>
		if (!buf->len) {
   21620:	898e      	ldrh	r6, [r1, #12]
   21622:	b1ae      	cbz	r6, 21650 <bt_acl_recv+0x76>
	return net_buf_simple_tailroom(&buf->b);
   21624:	3008      	adds	r0, #8
   21626:	f002 f8cc 	bl	237c2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   2162a:	4286      	cmp	r6, r0
   2162c:	d814      	bhi.n	21658 <bt_acl_recv+0x7e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   2162e:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21630:	89aa      	ldrh	r2, [r5, #12]
   21632:	68a9      	ldr	r1, [r5, #8]
   21634:	3008      	adds	r0, #8
   21636:	f002 f88e 	bl	23756 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   2163a:	4628      	mov	r0, r5
   2163c:	f002 f83b 	bl	236b6 <net_buf_unref>
		break;
   21640:	e7d7      	b.n	215f2 <bt_acl_recv+0x18>
			bt_conn_reset_rx_state(conn);
   21642:	4620      	mov	r0, r4
   21644:	f7ff ffc0 	bl	215c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   21648:	4628      	mov	r0, r5
   2164a:	f002 f834 	bl	236b6 <net_buf_unref>
			return;
   2164e:	e013      	b.n	21678 <bt_acl_recv+0x9e>
			net_buf_unref(buf);
   21650:	4608      	mov	r0, r1
   21652:	f002 f830 	bl	236b6 <net_buf_unref>
			return;
   21656:	e00f      	b.n	21678 <bt_acl_recv+0x9e>
			bt_l2cap_recv(conn, conn->rx, false);
   21658:	2200      	movs	r2, #0
   2165a:	6921      	ldr	r1, [r4, #16]
   2165c:	4620      	mov	r0, r4
   2165e:	f000 fafc 	bl	21c5a <bt_l2cap_recv>
			conn->rx = NULL;
   21662:	2300      	movs	r3, #0
   21664:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   21666:	4628      	mov	r0, r5
   21668:	f002 f825 	bl	236b6 <net_buf_unref>
			return;
   2166c:	e004      	b.n	21678 <bt_acl_recv+0x9e>
		bt_conn_reset_rx_state(conn);
   2166e:	f7ff ffab 	bl	215c8 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   21672:	4628      	mov	r0, r5
   21674:	f002 f81f 	bl	236b6 <net_buf_unref>
}
   21678:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
   2167a:	4620      	mov	r0, r4
   2167c:	f7ff ffa4 	bl	215c8 <bt_conn_reset_rx_state>
		return;
   21680:	e7fa      	b.n	21678 <bt_acl_recv+0x9e>

00021682 <conn_cleanup>:
{
   21682:	b538      	push	{r3, r4, r5, lr}
   21684:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21686:	e004      	b.n	21692 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   21688:	f7f4 fb5e 	bl	15d48 <tx_free>
		net_buf_unref(buf);
   2168c:	4620      	mov	r0, r4
   2168e:	f002 f812 	bl	236b6 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21692:	2200      	movs	r2, #0
   21694:	2300      	movs	r3, #0
   21696:	f105 0038 	add.w	r0, r5, #56	; 0x38
   2169a:	f001 ffe0 	bl	2365e <net_buf_get>
   2169e:	4604      	mov	r4, r0
   216a0:	b118      	cbz	r0, 216aa <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   216a2:	6960      	ldr	r0, [r4, #20]
   216a4:	2800      	cmp	r0, #0
   216a6:	d1ef      	bne.n	21688 <conn_cleanup+0x6>
   216a8:	e7f0      	b.n	2168c <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   216aa:	4628      	mov	r0, r5
   216ac:	f7ff ff8c 	bl	215c8 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   216b0:	2200      	movs	r2, #0
   216b2:	2300      	movs	r3, #0
   216b4:	f105 0058 	add.w	r0, r5, #88	; 0x58
   216b8:	f7f9 fdfc 	bl	1b2b4 <k_work_reschedule>
}
   216bc:	bd38      	pop	{r3, r4, r5, pc}

000216be <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   216be:	f3bf 8f5b 	dmb	ish
   216c2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   216c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   216ca:	b33b      	cbz	r3, 2171c <conn_prepare_events+0x5e>
{
   216cc:	b510      	push	{r4, lr}
   216ce:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   216d0:	7a83      	ldrb	r3, [r0, #10]
   216d2:	b983      	cbnz	r3, 216f6 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   216d4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   216d6:	f3bf 8f5b 	dmb	ish
   216da:	e853 2f00 	ldrex	r2, [r3]
   216de:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   216e2:	e843 1c00 	strex	ip, r1, [r3]
   216e6:	f1bc 0f00 	cmp.w	ip, #0
   216ea:	d1f6      	bne.n	216da <conn_prepare_events+0x1c>
   216ec:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   216f0:	f012 0f40 	tst.w	r2, #64	; 0x40
   216f4:	d10d      	bne.n	21712 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   216f6:	7a83      	ldrb	r3, [r0, #10]
   216f8:	2b07      	cmp	r3, #7
   216fa:	d112      	bne.n	21722 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   216fc:	f100 0338 	add.w	r3, r0, #56	; 0x38
   21700:	2200      	movs	r2, #0
   21702:	2104      	movs	r1, #4
   21704:	4620      	mov	r0, r4
   21706:	f003 ffbb 	bl	25680 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2170a:	2301      	movs	r3, #1
   2170c:	7323      	strb	r3, [r4, #12]
	return 0;
   2170e:	2000      	movs	r0, #0
}
   21710:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   21712:	f7ff ffb6 	bl	21682 <conn_cleanup>
		return -ENOTCONN;
   21716:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2171a:	e7f9      	b.n	21710 <conn_prepare_events+0x52>
		return -ENOTCONN;
   2171c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   21720:	4770      	bx	lr
		return -ENOTCONN;
   21722:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21726:	e7f3      	b.n	21710 <conn_prepare_events+0x52>

00021728 <bt_conn_recv>:
{
   21728:	b570      	push	{r4, r5, r6, lr}
   2172a:	4604      	mov	r4, r0
   2172c:	460d      	mov	r5, r1
   2172e:	4616      	mov	r6, r2
	tx_notify(conn);
   21730:	f7ff fe42 	bl	213b8 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   21734:	4632      	mov	r2, r6
   21736:	4629      	mov	r1, r5
   21738:	4620      	mov	r0, r4
   2173a:	f7ff ff4e 	bl	215da <bt_acl_recv>
}
   2173e:	bd70      	pop	{r4, r5, r6, pc}

00021740 <bt_conn_send_cb>:
{
   21740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21742:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   21744:	7a83      	ldrb	r3, [r0, #10]
   21746:	2b07      	cmp	r3, #7
   21748:	d11d      	bne.n	21786 <bt_conn_send_cb+0x46>
   2174a:	4604      	mov	r4, r0
   2174c:	460d      	mov	r5, r1
   2174e:	4616      	mov	r6, r2
	if (cb) {
   21750:	b1b2      	cbz	r2, 21780 <bt_conn_send_cb+0x40>
		tx = conn_tx_alloc();
   21752:	f7f4 fb05 	bl	15d60 <conn_tx_alloc>
		if (!tx) {
   21756:	b1c8      	cbz	r0, 2178c <bt_conn_send_cb+0x4c>
		if (conn->state != BT_CONN_CONNECTED) {
   21758:	7aa2      	ldrb	r2, [r4, #10]
   2175a:	2a07      	cmp	r2, #7
   2175c:	d10b      	bne.n	21776 <bt_conn_send_cb+0x36>
		tx->cb = cb;
   2175e:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   21760:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   21762:	2200      	movs	r2, #0
   21764:	60c2      	str	r2, [r0, #12]
		tx_data(buf)->tx = tx;
   21766:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   21768:	4629      	mov	r1, r5
   2176a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2176e:	f001 ff95 	bl	2369c <net_buf_put>
	return 0;
   21772:	2000      	movs	r0, #0
}
   21774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tx_free(tx);
   21776:	f7f4 fae7 	bl	15d48 <tx_free>
			return -ENOTCONN;
   2177a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2177e:	e7f9      	b.n	21774 <bt_conn_send_cb+0x34>
		tx_data(buf)->tx = NULL;
   21780:	2300      	movs	r3, #0
   21782:	614b      	str	r3, [r1, #20]
   21784:	e7f0      	b.n	21768 <bt_conn_send_cb+0x28>
		return -ENOTCONN;
   21786:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2178a:	e7f3      	b.n	21774 <bt_conn_send_cb+0x34>
			return -ENOBUFS;
   2178c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21790:	e7f0      	b.n	21774 <bt_conn_send_cb+0x34>

00021792 <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21792:	f3bf 8f5b 	dmb	ish
   21796:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2179a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2179e:	b1eb      	cbz	r3, 217dc <bt_conn_ref+0x4a>
{
   217a0:	b410      	push	{r4}
   217a2:	e006      	b.n	217b2 <bt_conn_ref+0x20>
   217a4:	f3bf 8f5b 	dmb	ish
   217a8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   217ac:	f3bf 8f5b 	dmb	ish
		if (!old) {
   217b0:	b193      	cbz	r3, 217d8 <bt_conn_ref+0x46>
   217b2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   217b6:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   217b8:	f3bf 8f5b 	dmb	ish
   217bc:	e852 4f00 	ldrex	r4, [r2]
   217c0:	429c      	cmp	r4, r3
   217c2:	d104      	bne.n	217ce <bt_conn_ref+0x3c>
   217c4:	e842 1c00 	strex	ip, r1, [r2]
   217c8:	f1bc 0f00 	cmp.w	ip, #0
   217cc:	d1f6      	bne.n	217bc <bt_conn_ref+0x2a>
   217ce:	f3bf 8f5b 	dmb	ish
   217d2:	d1e7      	bne.n	217a4 <bt_conn_ref+0x12>
}
   217d4:	bc10      	pop	{r4}
   217d6:	4770      	bx	lr
			return NULL;
   217d8:	2000      	movs	r0, #0
   217da:	e7fb      	b.n	217d4 <bt_conn_ref+0x42>
   217dc:	2000      	movs	r0, #0
}
   217de:	4770      	bx	lr

000217e0 <bt_conn_unref>:
{
   217e0:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   217e2:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   217e6:	f3bf 8f5b 	dmb	ish
   217ea:	e853 2f00 	ldrex	r2, [r3]
   217ee:	3a01      	subs	r2, #1
   217f0:	e843 2100 	strex	r1, r2, [r3]
   217f4:	2900      	cmp	r1, #0
   217f6:	d1f8      	bne.n	217ea <bt_conn_unref+0xa>
   217f8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   217fc:	7883      	ldrb	r3, [r0, #2]
   217fe:	2b01      	cmp	r3, #1
   21800:	d000      	beq.n	21804 <bt_conn_unref+0x24>
}
   21802:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21804:	f3bf 8f5b 	dmb	ish
   21808:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2180c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   21810:	2b00      	cmp	r3, #0
   21812:	d1f6      	bne.n	21802 <bt_conn_unref+0x22>
		bt_le_adv_resume();
   21814:	f7ff fd7e 	bl	21314 <bt_le_adv_resume>
}
   21818:	e7f3      	b.n	21802 <bt_conn_unref+0x22>

0002181a <conn_lookup_handle>:
{
   2181a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2181e:	4607      	mov	r7, r0
   21820:	460e      	mov	r6, r1
   21822:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   21824:	2400      	movs	r4, #0
   21826:	e003      	b.n	21830 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   21828:	4628      	mov	r0, r5
   2182a:	f7ff ffd9 	bl	217e0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2182e:	3401      	adds	r4, #1
   21830:	42b4      	cmp	r4, r6
   21832:	d21c      	bcs.n	2186e <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   21834:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   21838:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   2183c:	f7ff ffa9 	bl	21792 <bt_conn_ref>
		if (!conn) {
   21840:	4605      	mov	r5, r0
   21842:	2800      	cmp	r0, #0
   21844:	d0f3      	beq.n	2182e <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   21846:	7a83      	ldrb	r3, [r0, #10]
   21848:	2b01      	cmp	r3, #1
   2184a:	d006      	beq.n	2185a <conn_lookup_handle+0x40>
   2184c:	b25a      	sxtb	r2, r3
   2184e:	2a00      	cmp	r2, #0
   21850:	d0ea      	beq.n	21828 <conn_lookup_handle+0xe>
   21852:	3b07      	subs	r3, #7
   21854:	b2db      	uxtb	r3, r3
   21856:	2b01      	cmp	r3, #1
   21858:	d8e6      	bhi.n	21828 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   2185a:	882b      	ldrh	r3, [r5, #0]
   2185c:	4543      	cmp	r3, r8
   2185e:	d102      	bne.n	21866 <conn_lookup_handle+0x4c>
}
   21860:	4628      	mov	r0, r5
   21862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   21866:	4628      	mov	r0, r5
   21868:	f7ff ffba 	bl	217e0 <bt_conn_unref>
			continue;
   2186c:	e7df      	b.n	2182e <conn_lookup_handle+0x14>
	return NULL;
   2186e:	2500      	movs	r5, #0
   21870:	e7f6      	b.n	21860 <conn_lookup_handle+0x46>

00021872 <bt_conn_connected>:
{
   21872:	b510      	push	{r4, lr}
   21874:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   21876:	f7f4 fe61 	bl	1653c <bt_l2cap_connected>
	notify_connected(conn);
   2187a:	4620      	mov	r0, r4
   2187c:	f7f4 fa88 	bl	15d90 <notify_connected>
}
   21880:	bd10      	pop	{r4, pc}

00021882 <bt_conn_get_security>:
}
   21882:	2001      	movs	r0, #1
   21884:	4770      	bx	lr

00021886 <bt_conn_add_le>:
{
   21886:	b538      	push	{r3, r4, r5, lr}
   21888:	4605      	mov	r5, r0
   2188a:	460c      	mov	r4, r1
	struct bt_conn *conn = acl_conn_new();
   2188c:	f7f4 fae0 	bl	15e50 <acl_conn_new>
	if (!conn) {
   21890:	4603      	mov	r3, r0
   21892:	b188      	cbz	r0, 218b8 <bt_conn_add_le+0x32>
	conn->id = id;
   21894:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21896:	6822      	ldr	r2, [r4, #0]
   21898:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   2189c:	88a1      	ldrh	r1, [r4, #4]
   2189e:	79a2      	ldrb	r2, [r4, #6]
   218a0:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
   218a4:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
	conn->type = BT_CONN_TYPE_LE;
   218a8:	2201      	movs	r2, #1
   218aa:	7082      	strb	r2, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   218ac:	2218      	movs	r2, #24
   218ae:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   218b2:	2228      	movs	r2, #40	; 0x28
   218b4:	f8a0 20a2 	strh.w	r2, [r0, #162]	; 0xa2
}
   218b8:	4618      	mov	r0, r3
   218ba:	bd38      	pop	{r3, r4, r5, pc}

000218bc <bt_conn_is_peer_addr_le>:
{
   218bc:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   218be:	7a03      	ldrb	r3, [r0, #8]
   218c0:	428b      	cmp	r3, r1
   218c2:	d001      	beq.n	218c8 <bt_conn_is_peer_addr_le+0xc>
		return false;
   218c4:	2000      	movs	r0, #0
}
   218c6:	bd38      	pop	{r3, r4, r5, pc}
   218c8:	4604      	mov	r4, r0
   218ca:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   218cc:	2207      	movs	r2, #7
   218ce:	f100 0188 	add.w	r1, r0, #136	; 0x88
   218d2:	4628      	mov	r0, r5
   218d4:	f003 ff19 	bl	2570a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   218d8:	b1a8      	cbz	r0, 21906 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   218da:	78e3      	ldrb	r3, [r4, #3]
   218dc:	b14b      	cbz	r3, 218f2 <bt_conn_is_peer_addr_le+0x36>
   218de:	2207      	movs	r2, #7
   218e0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   218e4:	4628      	mov	r0, r5
   218e6:	f003 ff10 	bl	2570a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   218ea:	fab0 f080 	clz	r0, r0
   218ee:	0940      	lsrs	r0, r0, #5
   218f0:	e7e9      	b.n	218c6 <bt_conn_is_peer_addr_le+0xa>
   218f2:	2207      	movs	r2, #7
   218f4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   218f8:	4628      	mov	r0, r5
   218fa:	f003 ff06 	bl	2570a <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   218fe:	fab0 f080 	clz	r0, r0
   21902:	0940      	lsrs	r0, r0, #5
   21904:	e7df      	b.n	218c6 <bt_conn_is_peer_addr_le+0xa>
		return true;
   21906:	2001      	movs	r0, #1
   21908:	e7dd      	b.n	218c6 <bt_conn_is_peer_addr_le+0xa>

0002190a <bt_conn_exists_le>:
{
   2190a:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   2190c:	f7f4 fc0e 	bl	1612c <bt_conn_lookup_addr_le>
	if (conn) {
   21910:	b908      	cbnz	r0, 21916 <bt_conn_exists_le+0xc>
	return false;
   21912:	2000      	movs	r0, #0
}
   21914:	bd08      	pop	{r3, pc}
		bt_conn_unref(conn);
   21916:	f7ff ff63 	bl	217e0 <bt_conn_unref>
		return true;
   2191a:	2001      	movs	r0, #1
   2191c:	e7fa      	b.n	21914 <bt_conn_exists_le+0xa>

0002191e <bt_conn_le_conn_update>:
{
   2191e:	b570      	push	{r4, r5, r6, lr}
   21920:	4605      	mov	r5, r0
   21922:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21924:	210e      	movs	r1, #14
   21926:	f242 0013 	movw	r0, #8211	; 0x2013
   2192a:	f7f2 ff4d 	bl	147c8 <bt_hci_cmd_create>
	if (!buf) {
   2192e:	b1c8      	cbz	r0, 21964 <bt_conn_le_conn_update+0x46>
   21930:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   21932:	210e      	movs	r1, #14
   21934:	3008      	adds	r0, #8
   21936:	f001 ff08 	bl	2374a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2193a:	2200      	movs	r2, #0
   2193c:	6002      	str	r2, [r0, #0]
   2193e:	6042      	str	r2, [r0, #4]
   21940:	6082      	str	r2, [r0, #8]
   21942:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21944:	882b      	ldrh	r3, [r5, #0]
   21946:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21948:	8823      	ldrh	r3, [r4, #0]
   2194a:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2194c:	8863      	ldrh	r3, [r4, #2]
   2194e:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   21950:	88a3      	ldrh	r3, [r4, #4]
   21952:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21954:	88e3      	ldrh	r3, [r4, #6]
   21956:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21958:	4631      	mov	r1, r6
   2195a:	f242 0013 	movw	r0, #8211	; 0x2013
   2195e:	f7f2 ff6f 	bl	14840 <bt_hci_cmd_send_sync>
}
   21962:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   21964:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21968:	e7fb      	b.n	21962 <bt_conn_le_conn_update+0x44>

0002196a <bt_conn_le_param_update>:
{
   2196a:	4603      	mov	r3, r0
	if (conn->le.interval >= param->interval_min &&
   2196c:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
   21970:	8808      	ldrh	r0, [r1, #0]
   21972:	4282      	cmp	r2, r0
   21974:	d307      	bcc.n	21986 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
   21976:	8848      	ldrh	r0, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
   21978:	4282      	cmp	r2, r0
   2197a:	d804      	bhi.n	21986 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
   2197c:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
   21980:	888a      	ldrh	r2, [r1, #4]
	    conn->le.interval <= param->interval_max &&
   21982:	4290      	cmp	r0, r2
   21984:	d024      	beq.n	219d0 <bt_conn_le_param_update+0x66>
{
   21986:	b510      	push	{r4, lr}
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   21988:	1d1c      	adds	r4, r3, #4
   2198a:	f3bf 8f5b 	dmb	ish
   2198e:	685a      	ldr	r2, [r3, #4]
   21990:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21994:	f3c2 2000 	ubfx	r0, r2, #8, #1
   21998:	f412 7f80 	tst.w	r2, #256	; 0x100
   2199c:	d12d      	bne.n	219fa <bt_conn_le_param_update+0x90>
		conn->le.interval_min = param->interval_min;
   2199e:	880a      	ldrh	r2, [r1, #0]
   219a0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   219a4:	884a      	ldrh	r2, [r1, #2]
   219a6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   219aa:	888a      	ldrh	r2, [r1, #4]
   219ac:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   219b0:	88ca      	ldrh	r2, [r1, #6]
   219b2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   219b6:	f3bf 8f5b 	dmb	ish
   219ba:	e854 3f00 	ldrex	r3, [r4]
   219be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   219c2:	e844 3200 	strex	r2, r3, [r4]
   219c6:	2a00      	cmp	r2, #0
   219c8:	d1f7      	bne.n	219ba <bt_conn_le_param_update+0x50>
   219ca:	f3bf 8f5b 	dmb	ish
}
   219ce:	bd10      	pop	{r4, pc}
	    conn->le.timeout == param->timeout) {
   219d0:	f8b3 00a6 	ldrh.w	r0, [r3, #166]	; 0xa6
   219d4:	88ca      	ldrh	r2, [r1, #6]
	    conn->le.latency == param->latency &&
   219d6:	4290      	cmp	r0, r2
   219d8:	d1d5      	bne.n	21986 <bt_conn_le_param_update+0x1c>
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
   219da:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   219dc:	f3bf 8f5b 	dmb	ish
   219e0:	e853 2f00 	ldrex	r2, [r3]
   219e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   219e8:	e843 2100 	strex	r1, r2, [r3]
   219ec:	2900      	cmp	r1, #0
   219ee:	d1f7      	bne.n	219e0 <bt_conn_le_param_update+0x76>
   219f0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   219f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   219f8:	4770      	bx	lr
			return send_conn_le_param_update(conn, param);
   219fa:	4618      	mov	r0, r3
   219fc:	f7f4 fbee 	bl	161dc <send_conn_le_param_update>
   21a00:	e7e5      	b.n	219ce <bt_conn_le_param_update+0x64>

00021a02 <l2cap_connected>:
}
   21a02:	4770      	bx	lr

00021a04 <l2cap_chan_recv>:
{
   21a04:	b510      	push	{r4, lr}
   21a06:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   21a08:	6843      	ldr	r3, [r0, #4]
   21a0a:	691b      	ldr	r3, [r3, #16]
   21a0c:	4798      	blx	r3
	net_buf_unref(buf);
   21a0e:	4620      	mov	r0, r4
   21a10:	f001 fe51 	bl	236b6 <net_buf_unref>
}
   21a14:	bd10      	pop	{r4, pc}

00021a16 <l2cap_disconnected>:
{
   21a16:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   21a18:	3010      	adds	r0, #16
   21a1a:	f003 fafc 	bl	25016 <k_work_cancel_delayable>
}
   21a1e:	bd08      	pop	{r3, pc}

00021a20 <bt_l2cap_chan_remove>:
	return list->head;
   21a20:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21a22:	b103      	cbz	r3, 21a26 <bt_l2cap_chan_remove+0x6>
   21a24:	3b08      	subs	r3, #8
   21a26:	2200      	movs	r2, #0
   21a28:	e016      	b.n	21a58 <bt_l2cap_chan_remove+0x38>
{
   21a2a:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   21a2c:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   21a30:	b142      	cbz	r2, 21a44 <bt_l2cap_chan_remove+0x24>
	return node->next;
   21a32:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   21a34:	6014      	str	r4, [r2, #0]
	return list->tail;
   21a36:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   21a38:	42a1      	cmp	r1, r4
   21a3a:	d00a      	beq.n	21a52 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   21a3c:	2200      	movs	r2, #0
   21a3e:	609a      	str	r2, [r3, #8]
}
   21a40:	bc10      	pop	{r4}
   21a42:	4770      	bx	lr
	return node->next;
   21a44:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   21a46:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   21a48:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   21a4a:	42a1      	cmp	r1, r4
   21a4c:	d1f6      	bne.n	21a3c <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   21a4e:	6542      	str	r2, [r0, #84]	; 0x54
}
   21a50:	e7f4      	b.n	21a3c <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   21a52:	6542      	str	r2, [r0, #84]	; 0x54
}
   21a54:	e7f2      	b.n	21a3c <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21a56:	4613      	mov	r3, r2
   21a58:	b14b      	cbz	r3, 21a6e <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   21a5a:	428b      	cmp	r3, r1
   21a5c:	d0e5      	beq.n	21a2a <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21a5e:	f113 0208 	adds.w	r2, r3, #8
   21a62:	d0f8      	beq.n	21a56 <bt_l2cap_chan_remove+0x36>
	return node->next;
   21a64:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21a66:	2b00      	cmp	r3, #0
   21a68:	d0f6      	beq.n	21a58 <bt_l2cap_chan_remove+0x38>
   21a6a:	3b08      	subs	r3, #8
   21a6c:	e7f4      	b.n	21a58 <bt_l2cap_chan_remove+0x38>
   21a6e:	4770      	bx	lr

00021a70 <bt_l2cap_chan_del>:
{
   21a70:	b538      	push	{r3, r4, r5, lr}
   21a72:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   21a74:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   21a76:	6803      	ldr	r3, [r0, #0]
   21a78:	b123      	cbz	r3, 21a84 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21a7a:	686b      	ldr	r3, [r5, #4]
   21a7c:	b103      	cbz	r3, 21a80 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   21a7e:	4798      	blx	r3
	chan->conn = NULL;
   21a80:	2300      	movs	r3, #0
   21a82:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   21a84:	68e3      	ldr	r3, [r4, #12]
   21a86:	b10b      	cbz	r3, 21a8c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   21a88:	4620      	mov	r0, r4
   21a8a:	4798      	blx	r3
	if (ops->released) {
   21a8c:	69eb      	ldr	r3, [r5, #28]
   21a8e:	b10b      	cbz	r3, 21a94 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   21a90:	4620      	mov	r0, r4
   21a92:	4798      	blx	r3
}
   21a94:	bd38      	pop	{r3, r4, r5, pc}

00021a96 <l2cap_rtx_timeout>:
{
   21a96:	b510      	push	{r4, lr}
	struct bt_conn *conn = chan->chan.conn;
   21a98:	4604      	mov	r4, r0
   21a9a:	f854 0d10 	ldr.w	r0, [r4, #-16]!
	bt_l2cap_chan_remove(conn, &chan->chan);
   21a9e:	4621      	mov	r1, r4
   21aa0:	f7ff ffbe 	bl	21a20 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   21aa4:	4620      	mov	r0, r4
   21aa6:	f7ff ffe3 	bl	21a70 <bt_l2cap_chan_del>
}
   21aaa:	bd10      	pop	{r4, pc}

00021aac <bt_l2cap_chan_add>:
{
   21aac:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   21aae:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   21ab2:	2400      	movs	r4, #0
   21ab4:	608c      	str	r4, [r1, #8]
	return list->tail;
   21ab6:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   21ab8:	b12c      	cbz	r4, 21ac6 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   21aba:	6023      	str	r3, [r4, #0]
	list->tail = node;
   21abc:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   21abe:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   21ac0:	60ca      	str	r2, [r1, #12]
}
   21ac2:	bc10      	pop	{r4}
   21ac4:	4770      	bx	lr
   21ac6:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   21ac8:	6503      	str	r3, [r0, #80]	; 0x50
}
   21aca:	e7f8      	b.n	21abe <bt_l2cap_chan_add+0x12>

00021acc <bt_l2cap_disconnected>:
{
   21acc:	b510      	push	{r4, lr}
	return list->head;
   21ace:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21ad0:	b140      	cbz	r0, 21ae4 <bt_l2cap_disconnected+0x18>
   21ad2:	3808      	subs	r0, #8
   21ad4:	d008      	beq.n	21ae8 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21ad6:	f110 0408 	adds.w	r4, r0, #8
   21ada:	d00a      	beq.n	21af2 <bt_l2cap_disconnected+0x26>
	return node->next;
   21adc:	6884      	ldr	r4, [r0, #8]
   21ade:	b144      	cbz	r4, 21af2 <bt_l2cap_disconnected+0x26>
   21ae0:	3c08      	subs	r4, #8
   21ae2:	e006      	b.n	21af2 <bt_l2cap_disconnected+0x26>
   21ae4:	4604      	mov	r4, r0
   21ae6:	e004      	b.n	21af2 <bt_l2cap_disconnected+0x26>
   21ae8:	4604      	mov	r4, r0
   21aea:	e002      	b.n	21af2 <bt_l2cap_disconnected+0x26>
   21aec:	4623      	mov	r3, r4
   21aee:	4620      	mov	r0, r4
   21af0:	461c      	mov	r4, r3
   21af2:	b158      	cbz	r0, 21b0c <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   21af4:	f7ff ffbc 	bl	21a70 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   21af8:	2c00      	cmp	r4, #0
   21afa:	d0f7      	beq.n	21aec <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21afc:	f114 0308 	adds.w	r3, r4, #8
   21b00:	d0f5      	beq.n	21aee <bt_l2cap_disconnected+0x22>
	return node->next;
   21b02:	68a3      	ldr	r3, [r4, #8]
   21b04:	2b00      	cmp	r3, #0
   21b06:	d0f2      	beq.n	21aee <bt_l2cap_disconnected+0x22>
   21b08:	3b08      	subs	r3, #8
   21b0a:	e7f0      	b.n	21aee <bt_l2cap_disconnected+0x22>
}
   21b0c:	bd10      	pop	{r4, pc}

00021b0e <bt_l2cap_create_pdu_timeout>:
{
   21b0e:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   21b10:	3104      	adds	r1, #4
   21b12:	f7f4 fa63 	bl	15fdc <bt_conn_create_pdu_timeout>
}
   21b16:	bd08      	pop	{r3, pc}

00021b18 <l2cap_create_le_sig_pdu>:
{
   21b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b1a:	460e      	mov	r6, r1
   21b1c:	4615      	mov	r5, r2
   21b1e:	461c      	mov	r4, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   21b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21b24:	2300      	movs	r3, #0
   21b26:	2100      	movs	r1, #0
   21b28:	4608      	mov	r0, r1
   21b2a:	f7ff fff0 	bl	21b0e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21b2e:	4607      	mov	r7, r0
   21b30:	b130      	cbz	r0, 21b40 <l2cap_create_le_sig_pdu+0x28>
   21b32:	2104      	movs	r1, #4
   21b34:	3008      	adds	r0, #8
   21b36:	f001 fe08 	bl	2374a <net_buf_simple_add>
	hdr->code = code;
   21b3a:	7006      	strb	r6, [r0, #0]
	hdr->ident = ident;
   21b3c:	7045      	strb	r5, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   21b3e:	8044      	strh	r4, [r0, #2]
}
   21b40:	4638      	mov	r0, r7
   21b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021b44 <bt_l2cap_send_cb>:
{
   21b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b46:	4605      	mov	r5, r0
   21b48:	460f      	mov	r7, r1
   21b4a:	4614      	mov	r4, r2
   21b4c:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   21b4e:	2104      	movs	r1, #4
   21b50:	f102 0008 	add.w	r0, r2, #8
   21b54:	f001 fe11 	bl	2377a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21b58:	89a3      	ldrh	r3, [r4, #12]
   21b5a:	3b04      	subs	r3, #4
   21b5c:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   21b5e:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21b60:	9b06      	ldr	r3, [sp, #24]
   21b62:	4632      	mov	r2, r6
   21b64:	4621      	mov	r1, r4
   21b66:	4628      	mov	r0, r5
   21b68:	f7ff fdea 	bl	21740 <bt_conn_send_cb>
}
   21b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021b6e <l2cap_send_reject>:
{
   21b6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21b72:	b083      	sub	sp, #12
   21b74:	4605      	mov	r5, r0
   21b76:	4690      	mov	r8, r2
   21b78:	461c      	mov	r4, r3
   21b7a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   21b7e:	1cbb      	adds	r3, r7, #2
   21b80:	460a      	mov	r2, r1
   21b82:	2101      	movs	r1, #1
   21b84:	2000      	movs	r0, #0
   21b86:	f7ff ffc7 	bl	21b18 <l2cap_create_le_sig_pdu>
	if (!buf) {
   21b8a:	b1b0      	cbz	r0, 21bba <l2cap_send_reject+0x4c>
   21b8c:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   21b8e:	f100 0908 	add.w	r9, r0, #8
   21b92:	2102      	movs	r1, #2
   21b94:	4648      	mov	r0, r9
   21b96:	f001 fdd8 	bl	2374a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   21b9a:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   21b9e:	b124      	cbz	r4, 21baa <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21ba0:	463a      	mov	r2, r7
   21ba2:	4621      	mov	r1, r4
   21ba4:	4648      	mov	r0, r9
   21ba6:	f001 fdd6 	bl	23756 <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   21baa:	2300      	movs	r3, #0
   21bac:	9300      	str	r3, [sp, #0]
   21bae:	4632      	mov	r2, r6
   21bb0:	2105      	movs	r1, #5
   21bb2:	4628      	mov	r0, r5
   21bb4:	f7ff ffc6 	bl	21b44 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21bb8:	b910      	cbnz	r0, 21bc0 <l2cap_send_reject+0x52>
}
   21bba:	b003      	add	sp, #12
   21bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   21bc0:	4630      	mov	r0, r6
   21bc2:	f001 fd78 	bl	236b6 <net_buf_unref>
}
   21bc6:	e7f8      	b.n	21bba <l2cap_send_reject+0x4c>

00021bc8 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   21bc8:	898b      	ldrh	r3, [r1, #12]
   21bca:	2b03      	cmp	r3, #3
   21bcc:	d801      	bhi.n	21bd2 <l2cap_recv+0xa>
}
   21bce:	2000      	movs	r0, #0
   21bd0:	4770      	bx	lr
{
   21bd2:	b530      	push	{r4, r5, lr}
   21bd4:	b083      	sub	sp, #12
   21bd6:	4605      	mov	r5, r0
   21bd8:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   21bda:	2104      	movs	r1, #4
   21bdc:	f104 0008 	add.w	r0, r4, #8
   21be0:	f001 fddb 	bl	2379a <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   21be4:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   21be6:	89a1      	ldrh	r1, [r4, #12]
   21be8:	4291      	cmp	r1, r2
   21bea:	d106      	bne.n	21bfa <l2cap_recv+0x32>
	if (!hdr->ident) {
   21bec:	7841      	ldrb	r1, [r0, #1]
   21bee:	b121      	cbz	r1, 21bfa <l2cap_recv+0x32>
	switch (hdr->code) {
   21bf0:	7803      	ldrb	r3, [r0, #0]
   21bf2:	2b01      	cmp	r3, #1
   21bf4:	d001      	beq.n	21bfa <l2cap_recv+0x32>
   21bf6:	2b13      	cmp	r3, #19
   21bf8:	d102      	bne.n	21c00 <l2cap_recv+0x38>
}
   21bfa:	2000      	movs	r0, #0
   21bfc:	b003      	add	sp, #12
   21bfe:	bd30      	pop	{r4, r5, pc}
		l2cap_send_reject(chan->conn, hdr->ident,
   21c00:	2200      	movs	r2, #0
   21c02:	9200      	str	r2, [sp, #0]
   21c04:	4613      	mov	r3, r2
   21c06:	6828      	ldr	r0, [r5, #0]
   21c08:	f7ff ffb1 	bl	21b6e <l2cap_send_reject>
		break;
   21c0c:	e7f5      	b.n	21bfa <l2cap_recv+0x32>

00021c0e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   21c0e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21c10:	b110      	cbz	r0, 21c18 <bt_l2cap_le_lookup_tx_cid+0xa>
   21c12:	3808      	subs	r0, #8
   21c14:	e000      	b.n	21c18 <bt_l2cap_le_lookup_tx_cid+0xa>
   21c16:	3808      	subs	r0, #8
   21c18:	b148      	cbz	r0, 21c2e <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   21c1a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   21c1e:	428b      	cmp	r3, r1
   21c20:	d005      	beq.n	21c2e <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21c22:	f110 0308 	adds.w	r3, r0, #8
   21c26:	d003      	beq.n	21c30 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   21c28:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21c2a:	2800      	cmp	r0, #0
   21c2c:	d1f3      	bne.n	21c16 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   21c2e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21c30:	4618      	mov	r0, r3
   21c32:	e7f1      	b.n	21c18 <bt_l2cap_le_lookup_tx_cid+0xa>

00021c34 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   21c34:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21c36:	b110      	cbz	r0, 21c3e <bt_l2cap_le_lookup_rx_cid+0xa>
   21c38:	3808      	subs	r0, #8
   21c3a:	e000      	b.n	21c3e <bt_l2cap_le_lookup_rx_cid+0xa>
   21c3c:	3808      	subs	r0, #8
   21c3e:	b148      	cbz	r0, 21c54 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   21c40:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   21c44:	428b      	cmp	r3, r1
   21c46:	d005      	beq.n	21c54 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21c48:	f110 0308 	adds.w	r3, r0, #8
   21c4c:	d003      	beq.n	21c56 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   21c4e:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21c50:	2800      	cmp	r0, #0
   21c52:	d1f3      	bne.n	21c3c <bt_l2cap_le_lookup_rx_cid+0x8>
}
   21c54:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21c56:	4618      	mov	r0, r3
   21c58:	e7f1      	b.n	21c3e <bt_l2cap_le_lookup_rx_cid+0xa>

00021c5a <bt_l2cap_recv>:
{
   21c5a:	b570      	push	{r4, r5, r6, lr}
   21c5c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   21c5e:	898b      	ldrh	r3, [r1, #12]
   21c60:	2b03      	cmp	r3, #3
   21c62:	d910      	bls.n	21c86 <bt_l2cap_recv+0x2c>
   21c64:	4605      	mov	r5, r0
   21c66:	4616      	mov	r6, r2
   21c68:	2104      	movs	r1, #4
   21c6a:	f104 0008 	add.w	r0, r4, #8
   21c6e:	f001 fd94 	bl	2379a <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   21c72:	8841      	ldrh	r1, [r0, #2]
   21c74:	4628      	mov	r0, r5
   21c76:	f7ff ffdd 	bl	21c34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21c7a:	b140      	cbz	r0, 21c8e <bt_l2cap_recv+0x34>
	l2cap_chan_recv(chan, buf, complete);
   21c7c:	4632      	mov	r2, r6
   21c7e:	4621      	mov	r1, r4
   21c80:	f7ff fec0 	bl	21a04 <l2cap_chan_recv>
}
   21c84:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   21c86:	4608      	mov	r0, r1
   21c88:	f001 fd15 	bl	236b6 <net_buf_unref>
		return;
   21c8c:	e7fa      	b.n	21c84 <bt_l2cap_recv+0x2a>
		net_buf_unref(buf);
   21c8e:	4620      	mov	r0, r4
   21c90:	f001 fd11 	bl	236b6 <net_buf_unref>
		return;
   21c94:	e7f6      	b.n	21c84 <bt_l2cap_recv+0x2a>

00021c96 <bt_l2cap_update_conn_param>:
{
   21c96:	b570      	push	{r4, r5, r6, lr}
   21c98:	b082      	sub	sp, #8
   21c9a:	4605      	mov	r5, r0
   21c9c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   21c9e:	f7f4 fc01 	bl	164a4 <get_ident>
   21ca2:	4602      	mov	r2, r0
   21ca4:	2308      	movs	r3, #8
   21ca6:	2112      	movs	r1, #18
   21ca8:	2000      	movs	r0, #0
   21caa:	f7ff ff35 	bl	21b18 <l2cap_create_le_sig_pdu>
	if (!buf) {
   21cae:	b1e0      	cbz	r0, 21cea <bt_l2cap_update_conn_param+0x54>
   21cb0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   21cb2:	2108      	movs	r1, #8
   21cb4:	4408      	add	r0, r1
   21cb6:	f001 fd48 	bl	2374a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   21cba:	8823      	ldrh	r3, [r4, #0]
   21cbc:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   21cbe:	8863      	ldrh	r3, [r4, #2]
   21cc0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   21cc2:	88a3      	ldrh	r3, [r4, #4]
   21cc4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   21cc6:	88e3      	ldrh	r3, [r4, #6]
   21cc8:	80c3      	strh	r3, [r0, #6]
   21cca:	2300      	movs	r3, #0
   21ccc:	9300      	str	r3, [sp, #0]
   21cce:	4632      	mov	r2, r6
   21cd0:	2105      	movs	r1, #5
   21cd2:	4628      	mov	r0, r5
   21cd4:	f7ff ff36 	bl	21b44 <bt_l2cap_send_cb>
	if (err) {
   21cd8:	4604      	mov	r4, r0
   21cda:	b910      	cbnz	r0, 21ce2 <bt_l2cap_update_conn_param+0x4c>
}
   21cdc:	4620      	mov	r0, r4
   21cde:	b002      	add	sp, #8
   21ce0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   21ce2:	4630      	mov	r0, r6
   21ce4:	f001 fce7 	bl	236b6 <net_buf_unref>
		return err;
   21ce8:	e7f8      	b.n	21cdc <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   21cea:	f06f 040b 	mvn.w	r4, #11
   21cee:	e7f5      	b.n	21cdc <bt_l2cap_update_conn_param+0x46>

00021cf0 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   21cf0:	4770      	bx	lr

00021cf2 <att_sent>:
{
   21cf2:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   21cf4:	684b      	ldr	r3, [r1, #4]
   21cf6:	695b      	ldr	r3, [r3, #20]
   21cf8:	b10b      	cbz	r3, 21cfe <att_sent+0xc>
   21cfa:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   21cfc:	4798      	blx	r3
}
   21cfe:	bd08      	pop	{r3, pc}

00021d00 <range_is_valid>:
	if (!start || !end) {
   21d00:	b120      	cbz	r0, 21d0c <range_is_valid+0xc>
   21d02:	b119      	cbz	r1, 21d0c <range_is_valid+0xc>
	if (start > end) {
   21d04:	4288      	cmp	r0, r1
   21d06:	d806      	bhi.n	21d16 <range_is_valid+0x16>
	return true;
   21d08:	2001      	movs	r0, #1
}
   21d0a:	4770      	bx	lr
		if (err) {
   21d0c:	b10a      	cbz	r2, 21d12 <range_is_valid+0x12>
			*err = 0U;
   21d0e:	2300      	movs	r3, #0
   21d10:	8013      	strh	r3, [r2, #0]
		return false;
   21d12:	2000      	movs	r0, #0
   21d14:	4770      	bx	lr
		if (err) {
   21d16:	b102      	cbz	r2, 21d1a <range_is_valid+0x1a>
			*err = start;
   21d18:	8010      	strh	r0, [r2, #0]
		return false;
   21d1a:	2000      	movs	r0, #0
   21d1c:	4770      	bx	lr

00021d1e <err_to_att>:
	if (err < 0 && err >= -0xff) {
   21d1e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   21d22:	d201      	bcs.n	21d28 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   21d24:	200e      	movs	r0, #14
}
   21d26:	4770      	bx	lr
		return -err;
   21d28:	4240      	negs	r0, r0
   21d2a:	b2c0      	uxtb	r0, r0
   21d2c:	4770      	bx	lr

00021d2e <attr_read_type_cb>:
{
   21d2e:	b410      	push	{r4}
	if (!data->rsp->len) {
   21d30:	68d4      	ldr	r4, [r2, #12]
   21d32:	7823      	ldrb	r3, [r4, #0]
   21d34:	b923      	cbnz	r3, 21d40 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   21d36:	3102      	adds	r1, #2
   21d38:	7021      	strb	r1, [r4, #0]
	return true;
   21d3a:	2001      	movs	r0, #1
}
   21d3c:	bc10      	pop	{r4}
   21d3e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   21d40:	3102      	adds	r1, #2
   21d42:	428b      	cmp	r3, r1
   21d44:	d005      	beq.n	21d52 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   21d46:	8983      	ldrh	r3, [r0, #12]
   21d48:	3b02      	subs	r3, #2
   21d4a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   21d4c:	2000      	movs	r0, #0
   21d4e:	6110      	str	r0, [r2, #16]
		return false;
   21d50:	e7f4      	b.n	21d3c <attr_read_type_cb+0xe>
	return true;
   21d52:	2001      	movs	r0, #1
   21d54:	e7f2      	b.n	21d3c <attr_read_type_cb+0xe>

00021d56 <attr_read_group_cb>:
	if (!data->rsp->len) {
   21d56:	68d0      	ldr	r0, [r2, #12]
   21d58:	7803      	ldrb	r3, [r0, #0]
   21d5a:	b91b      	cbnz	r3, 21d64 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21d5c:	3104      	adds	r1, #4
   21d5e:	7001      	strb	r1, [r0, #0]
	return true;
   21d60:	2001      	movs	r0, #1
   21d62:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   21d64:	3104      	adds	r1, #4
   21d66:	428b      	cmp	r3, r1
   21d68:	d006      	beq.n	21d78 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   21d6a:	6891      	ldr	r1, [r2, #8]
   21d6c:	898b      	ldrh	r3, [r1, #12]
   21d6e:	3b04      	subs	r3, #4
   21d70:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21d72:	2000      	movs	r0, #0
   21d74:	6110      	str	r0, [r2, #16]
		return false;
   21d76:	4770      	bx	lr
	return true;
   21d78:	2001      	movs	r0, #1
}
   21d7a:	4770      	bx	lr

00021d7c <att_prepare_write_req>:
}
   21d7c:	2006      	movs	r0, #6
   21d7e:	4770      	bx	lr

00021d80 <att_exec_write_req>:
}
   21d80:	2006      	movs	r0, #6
   21d82:	4770      	bx	lr

00021d84 <att_op_get_type>:
	switch (op) {
   21d84:	1e43      	subs	r3, r0, #1
   21d86:	2bd1      	cmp	r3, #209	; 0xd1
   21d88:	d874      	bhi.n	21e74 <att_op_get_type+0xf0>
   21d8a:	e8df f003 	tbb	[pc, r3]
   21d8e:	696d      	.short	0x696d
   21d90:	696d696d 	.word	0x696d696d
   21d94:	696d696d 	.word	0x696d696d
   21d98:	696d696d 	.word	0x696d696d
   21d9c:	696d696d 	.word	0x696d696d
   21da0:	6973736d 	.word	0x6973736d
   21da4:	736d696d 	.word	0x736d696d
   21da8:	7871736f 	.word	0x7871736f
   21dac:	73737373 	.word	0x73737373
   21db0:	73737373 	.word	0x73737373
   21db4:	73737373 	.word	0x73737373
   21db8:	73737373 	.word	0x73737373
   21dbc:	73737373 	.word	0x73737373
   21dc0:	73737373 	.word	0x73737373
   21dc4:	73737373 	.word	0x73737373
   21dc8:	73737373 	.word	0x73737373
   21dcc:	73737373 	.word	0x73737373
   21dd0:	73737373 	.word	0x73737373
   21dd4:	73737373 	.word	0x73737373
   21dd8:	73737373 	.word	0x73737373
   21ddc:	6b737373 	.word	0x6b737373
   21de0:	73737373 	.word	0x73737373
   21de4:	73737373 	.word	0x73737373
   21de8:	73737373 	.word	0x73737373
   21dec:	73737373 	.word	0x73737373
   21df0:	73737373 	.word	0x73737373
   21df4:	73737373 	.word	0x73737373
   21df8:	73737373 	.word	0x73737373
   21dfc:	73737373 	.word	0x73737373
   21e00:	73737373 	.word	0x73737373
   21e04:	73737373 	.word	0x73737373
   21e08:	73737373 	.word	0x73737373
   21e0c:	73737373 	.word	0x73737373
   21e10:	73737373 	.word	0x73737373
   21e14:	73737373 	.word	0x73737373
   21e18:	73737373 	.word	0x73737373
   21e1c:	73737373 	.word	0x73737373
   21e20:	73737373 	.word	0x73737373
   21e24:	73737373 	.word	0x73737373
   21e28:	73737373 	.word	0x73737373
   21e2c:	73737373 	.word	0x73737373
   21e30:	73737373 	.word	0x73737373
   21e34:	73737373 	.word	0x73737373
   21e38:	73737373 	.word	0x73737373
   21e3c:	73737373 	.word	0x73737373
   21e40:	73737373 	.word	0x73737373
   21e44:	73737373 	.word	0x73737373
   21e48:	73737373 	.word	0x73737373
   21e4c:	73737373 	.word	0x73737373
   21e50:	73737373 	.word	0x73737373
   21e54:	73737373 	.word	0x73737373
   21e58:	73737373 	.word	0x73737373
   21e5c:	6b737373 	.word	0x6b737373
{
   21e60:	2001      	movs	r0, #1
   21e62:	4770      	bx	lr
		return ATT_COMMAND;
   21e64:	2000      	movs	r0, #0
   21e66:	4770      	bx	lr
		return ATT_RESPONSE;
   21e68:	2002      	movs	r0, #2
   21e6a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   21e6c:	2003      	movs	r0, #3
   21e6e:	4770      	bx	lr
		return ATT_INDICATION;
   21e70:	2005      	movs	r0, #5
   21e72:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   21e74:	f010 0f40 	tst.w	r0, #64	; 0x40
   21e78:	d103      	bne.n	21e82 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   21e7a:	2006      	movs	r0, #6
   21e7c:	4770      	bx	lr
		return ATT_CONFIRMATION;
   21e7e:	2004      	movs	r0, #4
   21e80:	4770      	bx	lr
		return ATT_COMMAND;
   21e82:	2000      	movs	r0, #0
}
   21e84:	4770      	bx	lr

00021e86 <att_get>:
{
   21e86:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21e88:	7a83      	ldrb	r3, [r0, #10]
   21e8a:	2b07      	cmp	r3, #7
   21e8c:	d10f      	bne.n	21eae <att_get+0x28>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21e8e:	2104      	movs	r1, #4
   21e90:	f7ff fed0 	bl	21c34 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21e94:	b160      	cbz	r0, 21eb0 <att_get+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21e96:	f3bf 8f5b 	dmb	ish
   21e9a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   21e9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   21ea2:	f013 0f04 	tst.w	r3, #4
   21ea6:	d104      	bne.n	21eb2 <att_get+0x2c>
	return att_chan->att;
   21ea8:	f850 0c08 	ldr.w	r0, [r0, #-8]
   21eac:	e000      	b.n	21eb0 <att_get+0x2a>
		return NULL;
   21eae:	2000      	movs	r0, #0
}
   21eb0:	bd08      	pop	{r3, pc}
		return NULL;
   21eb2:	2000      	movs	r0, #0
   21eb4:	e7fc      	b.n	21eb0 <att_get+0x2a>

00021eb6 <att_chan_attach>:
{
   21eb6:	b538      	push	{r3, r4, r5, lr}
   21eb8:	4604      	mov	r4, r0
   21eba:	460d      	mov	r5, r1
	return list->head;
   21ebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   21ebe:	b143      	cbz	r3, 21ed2 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   21ec0:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   21ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   21ec6:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   21eca:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   21ecc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   21ece:	b122      	cbz	r2, 21eda <att_chan_attach+0x24>
}
   21ed0:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   21ed2:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   21ed4:	f002 ff45 	bl	24d62 <z_impl_k_queue_init>
}
   21ed8:	e7f2      	b.n	21ec0 <att_chan_attach+0xa>
	list->tail = node;
   21eda:	62a3      	str	r3, [r4, #40]	; 0x28
}
   21edc:	e7f8      	b.n	21ed0 <att_chan_attach+0x1a>

00021ede <chan_send>:
{
   21ede:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ee2:	b083      	sub	sp, #12
   21ee4:	4604      	mov	r4, r0
   21ee6:	460d      	mov	r5, r1
   21ee8:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   21eea:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   21eec:	781b      	ldrb	r3, [r3, #0]
   21eee:	2bd2      	cmp	r3, #210	; 0xd2
   21ef0:	d021      	beq.n	21f36 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   21ef2:	f105 0008 	add.w	r0, r5, #8
   21ef6:	f001 fc60 	bl	237ba <net_buf_simple_headroom>
   21efa:	b287      	uxth	r7, r0
	state->len = buf->len;
   21efc:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   21f00:	b326      	cbz	r6, 21f4c <chan_send+0x6e>
   21f02:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   21f06:	f854 8b08 	ldr.w	r8, [r4], #8
   21f0a:	4630      	mov	r0, r6
   21f0c:	f7f4 fb70 	bl	165f0 <att_cb>
   21f10:	4603      	mov	r3, r0
   21f12:	f8d8 0000 	ldr.w	r0, [r8]
   21f16:	9400      	str	r4, [sp, #0]
   21f18:	462a      	mov	r2, r5
   21f1a:	2104      	movs	r1, #4
   21f1c:	f7ff fe12 	bl	21b44 <bt_l2cap_send_cb>
	if (err) {
   21f20:	4680      	mov	r8, r0
   21f22:	b120      	cbz	r0, 21f2e <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   21f24:	6928      	ldr	r0, [r5, #16]
   21f26:	4438      	add	r0, r7
   21f28:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   21f2a:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   21f2e:	4640      	mov	r0, r8
   21f30:	b003      	add	sp, #12
   21f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   21f36:	6803      	ldr	r3, [r0, #0]
   21f38:	6818      	ldr	r0, [r3, #0]
   21f3a:	f001 faab 	bl	23494 <bt_smp_sign>
		if (err) {
   21f3e:	4680      	mov	r8, r0
   21f40:	2800      	cmp	r0, #0
   21f42:	d0d6      	beq.n	21ef2 <chan_send+0x14>
			net_buf_unref(buf);
   21f44:	4628      	mov	r0, r5
   21f46:	f001 fbb6 	bl	236b6 <net_buf_unref>
			return err;
   21f4a:	e7f0      	b.n	21f2e <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   21f4c:	4628      	mov	r0, r5
   21f4e:	f7f4 fb6f 	bl	16630 <chan_cb>
   21f52:	4606      	mov	r6, r0
   21f54:	e7d5      	b.n	21f02 <chan_send+0x24>

00021f56 <chan_req_send>:
{
   21f56:	b570      	push	{r4, r5, r6, lr}
   21f58:	4606      	mov	r6, r0
   21f5a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21f5c:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   21f60:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   21f62:	2200      	movs	r2, #0
	while (buf) {
   21f64:	b11b      	cbz	r3, 21f6e <chan_req_send+0x18>
		bytes += buf->len;
   21f66:	899c      	ldrh	r4, [r3, #12]
   21f68:	4422      	add	r2, r4
		buf = buf->frags;
   21f6a:	681b      	ldr	r3, [r3, #0]
   21f6c:	e7fa      	b.n	21f64 <chan_req_send+0xe>
   21f6e:	4291      	cmp	r1, r2
   21f70:	d30e      	bcc.n	21f90 <chan_req_send+0x3a>
	chan->req = req;
   21f72:	f8c6 50f4 	str.w	r5, [r6, #244]	; 0xf4
	buf = req->buf;
   21f76:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   21f78:	2200      	movs	r2, #0
   21f7a:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   21f7c:	4621      	mov	r1, r4
   21f7e:	4630      	mov	r0, r6
   21f80:	f7ff ffad 	bl	21ede <chan_send>
	if (err) {
   21f84:	b118      	cbz	r0, 21f8e <chan_req_send+0x38>
		req->buf = buf;
   21f86:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   21f88:	2300      	movs	r3, #0
   21f8a:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
}
   21f8e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   21f90:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21f94:	e7fb      	b.n	21f8e <chan_req_send+0x38>

00021f96 <bt_att_chan_req_send>:
{
   21f96:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   21f98:	f7ff ffdd 	bl	21f56 <chan_req_send>
}
   21f9c:	bd08      	pop	{r3, pc}

00021f9e <bt_att_status>:
{
   21f9e:	b538      	push	{r3, r4, r5, lr}
   21fa0:	f3bf 8f5b 	dmb	ish
   21fa4:	680b      	ldr	r3, [r1, #0]
   21fa6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21faa:	f013 0f01 	tst.w	r3, #1
   21fae:	d007      	beq.n	21fc0 <bt_att_status+0x22>
   21fb0:	4604      	mov	r4, r0
   21fb2:	3808      	subs	r0, #8
	if (!chan->att) {
   21fb4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   21fb8:	b113      	cbz	r3, 21fc0 <bt_att_status+0x22>
	if (chan->req) {
   21fba:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   21fbe:	b102      	cbz	r2, 21fc2 <bt_att_status+0x24>
}
   21fc0:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   21fc2:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   21fc4:	2d00      	cmp	r5, #0
   21fc6:	d0fb      	beq.n	21fc0 <bt_att_status+0x22>
	return node->next;
   21fc8:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   21fca:	605a      	str	r2, [r3, #4]
	return list->tail;
   21fcc:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21fce:	42a9      	cmp	r1, r5
   21fd0:	d00e      	beq.n	21ff0 <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21fd2:	4629      	mov	r1, r5
   21fd4:	f7ff ffdf 	bl	21f96 <bt_att_chan_req_send>
   21fd8:	2800      	cmp	r0, #0
   21fda:	daf1      	bge.n	21fc0 <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   21fdc:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   21fe0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   21fe2:	602a      	str	r2, [r5, #0]
	list->head = node;
   21fe4:	605d      	str	r5, [r3, #4]
	return list->tail;
   21fe6:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   21fe8:	2a00      	cmp	r2, #0
   21fea:	d1e9      	bne.n	21fc0 <bt_att_status+0x22>
	list->tail = node;
   21fec:	609d      	str	r5, [r3, #8]
}
   21fee:	e7e7      	b.n	21fc0 <bt_att_status+0x22>
	list->tail = node;
   21ff0:	609a      	str	r2, [r3, #8]
}
   21ff2:	e7ee      	b.n	21fd2 <bt_att_status+0x34>

00021ff4 <att_req_send_process>:
{
   21ff4:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   21ff6:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   21ff8:	2e00      	cmp	r6, #0
   21ffa:	d038      	beq.n	2206e <att_req_send_process+0x7a>
   21ffc:	4605      	mov	r5, r0
	return node->next;
   21ffe:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   22000:	6043      	str	r3, [r0, #4]
	return list->tail;
   22002:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22004:	4296      	cmp	r6, r2
   22006:	d00d      	beq.n	22024 <att_req_send_process+0x30>
	return list->head;
   22008:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2200a:	b198      	cbz	r0, 22034 <att_req_send_process+0x40>
   2200c:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   22010:	d012      	beq.n	22038 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22012:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   22016:	d014      	beq.n	22042 <att_req_send_process+0x4e>
	return node->next;
   22018:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   2201c:	b18c      	cbz	r4, 22042 <att_req_send_process+0x4e>
   2201e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   22022:	e00e      	b.n	22042 <att_req_send_process+0x4e>
	list->tail = node;
   22024:	6083      	str	r3, [r0, #8]
}
   22026:	e7ef      	b.n	22008 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22028:	4631      	mov	r1, r6
   2202a:	f7ff ffb4 	bl	21f96 <bt_att_chan_req_send>
   2202e:	2800      	cmp	r0, #0
   22030:	db0c      	blt.n	2204c <att_req_send_process+0x58>
   22032:	e01c      	b.n	2206e <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22034:	4604      	mov	r4, r0
   22036:	e004      	b.n	22042 <att_req_send_process+0x4e>
   22038:	4604      	mov	r4, r0
   2203a:	e002      	b.n	22042 <att_req_send_process+0x4e>
   2203c:	4623      	mov	r3, r4
   2203e:	4620      	mov	r0, r4
   22040:	461c      	mov	r4, r3
   22042:	b178      	cbz	r0, 22064 <att_req_send_process+0x70>
		if (!chan->req) {
   22044:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   22048:	2b00      	cmp	r3, #0
   2204a:	d0ed      	beq.n	22028 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2204c:	2c00      	cmp	r4, #0
   2204e:	d0f5      	beq.n	2203c <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22050:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   22054:	d0f3      	beq.n	2203e <att_req_send_process+0x4a>
	return node->next;
   22056:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2205a:	2b00      	cmp	r3, #0
   2205c:	d0ef      	beq.n	2203e <att_req_send_process+0x4a>
   2205e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   22062:	e7ec      	b.n	2203e <att_req_send_process+0x4a>
	return list->head;
   22064:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   22066:	6033      	str	r3, [r6, #0]
	list->head = node;
   22068:	606e      	str	r6, [r5, #4]
	return list->tail;
   2206a:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2206c:	b103      	cbz	r3, 22070 <att_req_send_process+0x7c>
}
   2206e:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   22070:	60ae      	str	r6, [r5, #8]
}
   22072:	e7fc      	b.n	2206e <att_req_send_process+0x7a>

00022074 <bt_att_chan_send>:
{
   22074:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   22076:	f7ff ff32 	bl	21ede <chan_send>
}
   2207a:	bd08      	pop	{r3, pc}

0002207c <chan_req_sent>:
{
   2207c:	b508      	push	{r3, lr}
	if (chan->req) {
   2207e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   22082:	b133      	cbz	r3, 22092 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   22084:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22088:	2300      	movs	r3, #0
   2208a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2208e:	f7f9 f911 	bl	1b2b4 <k_work_reschedule>
}
   22092:	bd08      	pop	{r3, pc}

00022094 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   22094:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22096:	f3bf 8f5b 	dmb	ish
   2209a:	e850 3f00 	ldrex	r3, [r0]
   2209e:	f023 0302 	bic.w	r3, r3, #2
   220a2:	e840 3200 	strex	r2, r3, [r0]
   220a6:	2a00      	cmp	r2, #0
   220a8:	d1f7      	bne.n	2209a <chan_cfm_sent+0x6>
   220aa:	f3bf 8f5b 	dmb	ish
}
   220ae:	4770      	bx	lr

000220b0 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   220b0:	30f0      	adds	r0, #240	; 0xf0
   220b2:	f3bf 8f5b 	dmb	ish
   220b6:	e850 3f00 	ldrex	r3, [r0]
   220ba:	f023 0301 	bic.w	r3, r3, #1
   220be:	e840 3200 	strex	r2, r3, [r0]
   220c2:	2a00      	cmp	r2, #0
   220c4:	d1f7      	bne.n	220b6 <chan_rsp_sent+0x6>
   220c6:	f3bf 8f5b 	dmb	ish
}
   220ca:	4770      	bx	lr

000220cc <process_queue>:
{
   220cc:	b570      	push	{r4, r5, r6, lr}
   220ce:	4605      	mov	r5, r0
   220d0:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   220d2:	2200      	movs	r2, #0
   220d4:	2300      	movs	r3, #0
   220d6:	4608      	mov	r0, r1
   220d8:	f001 fac1 	bl	2365e <net_buf_get>
	if (buf) {
   220dc:	b170      	cbz	r0, 220fc <process_queue+0x30>
   220de:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   220e0:	2200      	movs	r2, #0
   220e2:	4601      	mov	r1, r0
   220e4:	4628      	mov	r0, r5
   220e6:	f7ff fefa 	bl	21ede <chan_send>
		if (err) {
   220ea:	4605      	mov	r5, r0
   220ec:	b908      	cbnz	r0, 220f2 <process_queue+0x26>
}
   220ee:	4628      	mov	r0, r5
   220f0:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   220f2:	4631      	mov	r1, r6
   220f4:	4620      	mov	r0, r4
   220f6:	f002 fe4c 	bl	24d92 <k_queue_prepend>
			return err;
   220fa:	e7f8      	b.n	220ee <process_queue+0x22>
	return -ENOENT;
   220fc:	f06f 0501 	mvn.w	r5, #1
   22100:	e7f5      	b.n	220ee <process_queue+0x22>

00022102 <bt_att_sent>:
{
   22102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22104:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   22106:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   2210a:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   2210e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   22112:	b10b      	cbz	r3, 22118 <bt_att_sent+0x16>
		chan->sent(chan);
   22114:	4630      	mov	r0, r6
   22116:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   22118:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   2211c:	f3bf 8f5b 	dmb	ish
   22120:	e853 2f00 	ldrex	r2, [r3]
   22124:	f022 0210 	bic.w	r2, r2, #16
   22128:	e843 2100 	strex	r1, r2, [r3]
   2212c:	2900      	cmp	r1, #0
   2212e:	d1f7      	bne.n	22120 <bt_att_sent+0x1e>
   22130:	f3bf 8f5b 	dmb	ish
	if (!att) {
   22134:	b145      	cbz	r5, 22148 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   22136:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2213a:	b133      	cbz	r3, 2214a <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   2213c:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   22140:	4630      	mov	r0, r6
   22142:	f7ff ffc3 	bl	220cc <process_queue>
	if (!err) {
   22146:	b9c0      	cbnz	r0, 2217a <bt_att_sent+0x78>
}
   22148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   2214a:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2214c:	2f00      	cmp	r7, #0
   2214e:	d0f5      	beq.n	2213c <bt_att_sent+0x3a>
	return node->next;
   22150:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   22152:	606b      	str	r3, [r5, #4]
	return list->tail;
   22154:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22156:	42ba      	cmp	r2, r7
   22158:	d00d      	beq.n	22176 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2215a:	4639      	mov	r1, r7
   2215c:	4630      	mov	r0, r6
   2215e:	f7ff fefa 	bl	21f56 <chan_req_send>
   22162:	2800      	cmp	r0, #0
   22164:	daf0      	bge.n	22148 <bt_att_sent+0x46>
	return list->head;
   22166:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   22168:	603b      	str	r3, [r7, #0]
	list->head = node;
   2216a:	606f      	str	r7, [r5, #4]
	return list->tail;
   2216c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   2216e:	2b00      	cmp	r3, #0
   22170:	d1e4      	bne.n	2213c <bt_att_sent+0x3a>
	list->tail = node;
   22172:	60af      	str	r7, [r5, #8]
}
   22174:	e7e2      	b.n	2213c <bt_att_sent+0x3a>
	list->tail = node;
   22176:	60ab      	str	r3, [r5, #8]
}
   22178:	e7ef      	b.n	2215a <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   2217a:	f105 010c 	add.w	r1, r5, #12
   2217e:	4630      	mov	r0, r6
   22180:	f7ff ffa4 	bl	220cc <process_queue>
   22184:	e7e0      	b.n	22148 <bt_att_sent+0x46>

00022186 <att_send_process>:
{
   22186:	b570      	push	{r4, r5, r6, lr}
   22188:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2218a:	2200      	movs	r2, #0
   2218c:	2300      	movs	r3, #0
   2218e:	300c      	adds	r0, #12
   22190:	f001 fa65 	bl	2365e <net_buf_get>
	if (!buf) {
   22194:	b360      	cbz	r0, 221f0 <att_send_process+0x6a>
   22196:	4605      	mov	r5, r0
	return list->head;
   22198:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2219a:	b158      	cbz	r0, 221b4 <att_send_process+0x2e>
   2219c:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   221a0:	d00c      	beq.n	221bc <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   221a2:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   221a6:	d006      	beq.n	221b6 <att_send_process+0x30>
	return node->next;
   221a8:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   221ac:	b11c      	cbz	r4, 221b6 <att_send_process+0x30>
   221ae:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   221b2:	e000      	b.n	221b6 <att_send_process+0x30>
   221b4:	4604      	mov	r4, r0
   221b6:	f06f 0301 	mvn.w	r3, #1
   221ba:	e004      	b.n	221c6 <att_send_process+0x40>
   221bc:	4604      	mov	r4, r0
   221be:	e7fa      	b.n	221b6 <att_send_process+0x30>
   221c0:	4622      	mov	r2, r4
   221c2:	4620      	mov	r0, r4
   221c4:	4614      	mov	r4, r2
   221c6:	b188      	cbz	r0, 221ec <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   221c8:	2200      	movs	r2, #0
   221ca:	4629      	mov	r1, r5
   221cc:	f7ff ff52 	bl	22074 <bt_att_chan_send>
		if (err >= 0) {
   221d0:	1e03      	subs	r3, r0, #0
   221d2:	da0b      	bge.n	221ec <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   221d4:	2c00      	cmp	r4, #0
   221d6:	d0f3      	beq.n	221c0 <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   221d8:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   221dc:	d0f1      	beq.n	221c2 <att_send_process+0x3c>
	return node->next;
   221de:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   221e2:	2a00      	cmp	r2, #0
   221e4:	d0ed      	beq.n	221c2 <att_send_process+0x3c>
   221e6:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   221ea:	e7ea      	b.n	221c2 <att_send_process+0x3c>
	if (err < 0) {
   221ec:	2b00      	cmp	r3, #0
   221ee:	db00      	blt.n	221f2 <att_send_process+0x6c>
}
   221f0:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   221f2:	4629      	mov	r1, r5
   221f4:	f106 000c 	add.w	r0, r6, #12
   221f8:	f002 fdcb 	bl	24d92 <k_queue_prepend>
   221fc:	e7f8      	b.n	221f0 <att_send_process+0x6a>

000221fe <write_cb>:
{
   221fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   22200:	b083      	sub	sp, #12
   22202:	4606      	mov	r6, r0
   22204:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   22206:	222a      	movs	r2, #42	; 0x2a
   22208:	4601      	mov	r1, r0
   2220a:	6820      	ldr	r0, [r4, #0]
   2220c:	f001 f86f 	bl	232ee <bt_gatt_check_perm>
   22210:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   22212:	bb08      	cbnz	r0, 22258 <write_cb+0x5a>
   22214:	4605      	mov	r5, r0
	if (!data->req) {
   22216:	7a23      	ldrb	r3, [r4, #8]
   22218:	b11b      	cbz	r3, 22222 <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2221a:	2b18      	cmp	r3, #24
   2221c:	d016      	beq.n	2224c <write_cb+0x4e>
	uint8_t flags = 0U;
   2221e:	4603      	mov	r3, r0
   22220:	e000      	b.n	22224 <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   22222:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   22224:	68b7      	ldr	r7, [r6, #8]
   22226:	9301      	str	r3, [sp, #4]
   22228:	8a63      	ldrh	r3, [r4, #18]
   2222a:	9300      	str	r3, [sp, #0]
   2222c:	8a23      	ldrh	r3, [r4, #16]
   2222e:	68e2      	ldr	r2, [r4, #12]
   22230:	4631      	mov	r1, r6
   22232:	6820      	ldr	r0, [r4, #0]
   22234:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   22236:	2800      	cmp	r0, #0
   22238:	db02      	blt.n	22240 <write_cb+0x42>
   2223a:	8a23      	ldrh	r3, [r4, #16]
   2223c:	4298      	cmp	r0, r3
   2223e:	d007      	beq.n	22250 <write_cb+0x52>
		data->err = err_to_att(write);
   22240:	f7ff fd6d 	bl	21d1e <err_to_att>
   22244:	7520      	strb	r0, [r4, #20]
}
   22246:	4628      	mov	r0, r5
   22248:	b003      	add	sp, #12
   2224a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2224c:	2304      	movs	r3, #4
   2224e:	e7e9      	b.n	22224 <write_cb+0x26>
	data->err = 0U;
   22250:	2300      	movs	r3, #0
   22252:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   22254:	2501      	movs	r5, #1
   22256:	e7f6      	b.n	22246 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   22258:	2500      	movs	r5, #0
   2225a:	e7f4      	b.n	22246 <write_cb+0x48>

0002225c <bt_att_chan_send_rsp>:
{
   2225c:	b538      	push	{r3, r4, r5, lr}
   2225e:	4604      	mov	r4, r0
   22260:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   22262:	f7ff ff07 	bl	22074 <bt_att_chan_send>
	if (err) {
   22266:	b900      	cbnz	r0, 2226a <bt_att_chan_send_rsp+0xe>
}
   22268:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   2226a:	4629      	mov	r1, r5
   2226c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   22270:	f001 fa14 	bl	2369c <net_buf_put>
}
   22274:	e7f8      	b.n	22268 <bt_att_chan_send_rsp+0xc>

00022276 <att_chan_read>:
{
   22276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2227a:	b085      	sub	sp, #20
   2227c:	4680      	mov	r8, r0
   2227e:	4689      	mov	r9, r1
   22280:	9202      	str	r2, [sp, #8]
   22282:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   22284:	6881      	ldr	r1, [r0, #8]
   22286:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   22288:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   2228c:	4613      	mov	r3, r2
	size_t bytes = 0;
   2228e:	2200      	movs	r2, #0
	while (buf) {
   22290:	b11b      	cbz	r3, 2229a <att_chan_read+0x24>
		bytes += buf->len;
   22292:	8999      	ldrh	r1, [r3, #12]
   22294:	440a      	add	r2, r1
		buf = buf->frags;
   22296:	681b      	ldr	r3, [r3, #0]
   22298:	e7fa      	b.n	22290 <att_chan_read+0x1a>
   2229a:	4290      	cmp	r0, r2
   2229c:	d804      	bhi.n	222a8 <att_chan_read+0x32>
		return 0;
   2229e:	2400      	movs	r4, #0
}
   222a0:	4620      	mov	r0, r4
   222a2:	b005      	add	sp, #20
   222a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   222a8:	9802      	ldr	r0, [sp, #8]
   222aa:	f001 fa2e 	bl	2370a <net_buf_frag_last>
   222ae:	4607      	mov	r7, r0
	size_t len, total = 0;
   222b0:	f04f 0a00 	mov.w	sl, #0
   222b4:	e083      	b.n	223be <att_chan_read+0x148>
		bytes += buf->len;
   222b6:	8999      	ldrh	r1, [r3, #12]
   222b8:	440a      	add	r2, r1
		buf = buf->frags;
   222ba:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   222bc:	2b00      	cmp	r3, #0
   222be:	d1fa      	bne.n	222b6 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   222c0:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   222c2:	f107 0608 	add.w	r6, r7, #8
   222c6:	4630      	mov	r0, r6
   222c8:	f001 fa7b 	bl	237c2 <net_buf_simple_tailroom>
   222cc:	4284      	cmp	r4, r0
   222ce:	d32c      	bcc.n	2232a <att_chan_read+0xb4>
   222d0:	4630      	mov	r0, r6
   222d2:	f001 fa76 	bl	237c2 <net_buf_simple_tailroom>
   222d6:	4606      	mov	r6, r0
		if (!len) {
   222d8:	2e00      	cmp	r6, #0
   222da:	d032      	beq.n	22342 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   222dc:	f8d9 4004 	ldr.w	r4, [r9, #4]
   222e0:	68b9      	ldr	r1, [r7, #8]
   222e2:	89ba      	ldrh	r2, [r7, #12]
   222e4:	9500      	str	r5, [sp, #0]
   222e6:	b2b3      	uxth	r3, r6
   222e8:	440a      	add	r2, r1
   222ea:	4649      	mov	r1, r9
   222ec:	9803      	ldr	r0, [sp, #12]
   222ee:	47a0      	blx	r4
		if (read < 0) {
   222f0:	1e04      	subs	r4, r0, #0
   222f2:	db5a      	blt.n	223aa <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   222f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   222f6:	b12b      	cbz	r3, 22304 <att_chan_read+0x8e>
   222f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   222fa:	4621      	mov	r1, r4
   222fc:	4638      	mov	r0, r7
   222fe:	4798      	blx	r3
   22300:	2800      	cmp	r0, #0
   22302:	d061      	beq.n	223c8 <att_chan_read+0x152>
		net_buf_add(frag, read);
   22304:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   22306:	4621      	mov	r1, r4
   22308:	f107 0008 	add.w	r0, r7, #8
   2230c:	f001 fa1d 	bl	2374a <net_buf_simple_add>
		total += read;
   22310:	44a2      	add	sl, r4
		offset += read;
   22312:	4425      	add	r5, r4
   22314:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   22316:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   2231a:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2231c:	2200      	movs	r2, #0
	while (buf) {
   2231e:	2b00      	cmp	r3, #0
   22320:	d049      	beq.n	223b6 <att_chan_read+0x140>
		bytes += buf->len;
   22322:	8999      	ldrh	r1, [r3, #12]
   22324:	440a      	add	r2, r1
		buf = buf->frags;
   22326:	681b      	ldr	r3, [r3, #0]
   22328:	e7f9      	b.n	2231e <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2232a:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   2232e:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   22330:	2200      	movs	r2, #0
	while (buf) {
   22332:	e002      	b.n	2233a <att_chan_read+0xc4>
		bytes += buf->len;
   22334:	8999      	ldrh	r1, [r3, #12]
   22336:	440a      	add	r2, r1
		buf = buf->frags;
   22338:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2233a:	2b00      	cmp	r3, #0
   2233c:	d1fa      	bne.n	22334 <att_chan_read+0xbe>
   2233e:	1ab6      	subs	r6, r6, r2
   22340:	e7ca      	b.n	222d8 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   22342:	9b02      	ldr	r3, [sp, #8]
   22344:	7998      	ldrb	r0, [r3, #6]
   22346:	f7f5 fb99 	bl	17a7c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2234a:	2200      	movs	r2, #0
   2234c:	2300      	movs	r3, #0
   2234e:	f001 f97f 	bl	23650 <net_buf_alloc_fixed>
			if (!frag) {
   22352:	4607      	mov	r7, r0
   22354:	b150      	cbz	r0, 2236c <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   22356:	4601      	mov	r1, r0
   22358:	f8dd b008 	ldr.w	fp, [sp, #8]
   2235c:	4658      	mov	r0, fp
   2235e:	f001 f9e5 	bl	2372c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22362:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   22366:	4632      	mov	r2, r6
	while (buf) {
   22368:	465b      	mov	r3, fp
   2236a:	e004      	b.n	22376 <att_chan_read+0x100>
				return total;
   2236c:	4654      	mov	r4, sl
   2236e:	e797      	b.n	222a0 <att_chan_read+0x2a>
		bytes += buf->len;
   22370:	8999      	ldrh	r1, [r3, #12]
   22372:	440a      	add	r2, r1
		buf = buf->frags;
   22374:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22376:	2b00      	cmp	r3, #0
   22378:	d1fa      	bne.n	22370 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2237a:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   2237c:	f107 0b08 	add.w	fp, r7, #8
   22380:	4658      	mov	r0, fp
   22382:	f001 fa1e 	bl	237c2 <net_buf_simple_tailroom>
   22386:	4284      	cmp	r4, r0
   22388:	d304      	bcc.n	22394 <att_chan_read+0x11e>
   2238a:	4658      	mov	r0, fp
   2238c:	f001 fa19 	bl	237c2 <net_buf_simple_tailroom>
   22390:	4606      	mov	r6, r0
   22392:	e7a3      	b.n	222dc <att_chan_read+0x66>
   22394:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   22398:	9b02      	ldr	r3, [sp, #8]
   2239a:	e002      	b.n	223a2 <att_chan_read+0x12c>
		bytes += buf->len;
   2239c:	899a      	ldrh	r2, [r3, #12]
   2239e:	4416      	add	r6, r2
		buf = buf->frags;
   223a0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   223a2:	2b00      	cmp	r3, #0
   223a4:	d1fa      	bne.n	2239c <att_chan_read+0x126>
   223a6:	1b8e      	subs	r6, r1, r6
   223a8:	e798      	b.n	222dc <att_chan_read+0x66>
			if (total) {
   223aa:	f1ba 0f00 	cmp.w	sl, #0
   223ae:	f43f af77 	beq.w	222a0 <att_chan_read+0x2a>
				return total;
   223b2:	4654      	mov	r4, sl
   223b4:	e774      	b.n	222a0 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   223b6:	4290      	cmp	r0, r2
   223b8:	d906      	bls.n	223c8 <att_chan_read+0x152>
   223ba:	45b3      	cmp	fp, r6
   223bc:	d104      	bne.n	223c8 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   223be:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   223c2:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   223c4:	2200      	movs	r2, #0
	while (buf) {
   223c6:	e779      	b.n	222bc <att_chan_read+0x46>
	return total;
   223c8:	4654      	mov	r4, sl
   223ca:	e769      	b.n	222a0 <att_chan_read+0x2a>

000223cc <read_cb>:
{
   223cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   223ce:	b083      	sub	sp, #12
   223d0:	4606      	mov	r6, r0
   223d2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   223d4:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   223d6:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   223d8:	2300      	movs	r3, #0
   223da:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   223dc:	2215      	movs	r2, #21
   223de:	4631      	mov	r1, r6
   223e0:	f000 ff85 	bl	232ee <bt_gatt_check_perm>
   223e4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   223e6:	b118      	cbz	r0, 223f0 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   223e8:	2500      	movs	r5, #0
}
   223ea:	4628      	mov	r0, r5
   223ec:	b003      	add	sp, #12
   223ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   223f0:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   223f2:	2300      	movs	r3, #0
   223f4:	9301      	str	r3, [sp, #4]
   223f6:	9300      	str	r3, [sp, #0]
   223f8:	88a3      	ldrh	r3, [r4, #4]
   223fa:	68a2      	ldr	r2, [r4, #8]
   223fc:	4631      	mov	r1, r6
   223fe:	4638      	mov	r0, r7
   22400:	f7ff ff39 	bl	22276 <att_chan_read>
	if (ret < 0) {
   22404:	2800      	cmp	r0, #0
   22406:	db01      	blt.n	2240c <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   22408:	2501      	movs	r5, #1
   2240a:	e7ee      	b.n	223ea <read_cb+0x1e>
		data->err = err_to_att(ret);
   2240c:	f7ff fc87 	bl	21d1e <err_to_att>
   22410:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   22412:	e7ea      	b.n	223ea <read_cb+0x1e>

00022414 <find_type_cb>:
{
   22414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22418:	b093      	sub	sp, #76	; 0x4c
   2241a:	4606      	mov	r6, r0
   2241c:	460f      	mov	r7, r1
   2241e:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   22420:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   22424:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   22428:	2300      	movs	r3, #0
   2242a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   2242e:	f642 0301 	movw	r3, #10241	; 0x2801
   22432:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   22436:	a910      	add	r1, sp, #64	; 0x40
   22438:	6800      	ldr	r0, [r0, #0]
   2243a:	f7fe fa0f 	bl	2085c <bt_uuid_cmp>
   2243e:	b928      	cbnz	r0, 2244c <find_type_cb+0x38>
	data->group = NULL;
   22440:	2300      	movs	r3, #0
   22442:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   22444:	2001      	movs	r0, #1
}
   22446:	b013      	add	sp, #76	; 0x4c
   22448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   2244c:	2300      	movs	r3, #0
   2244e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   22452:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22456:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   2245a:	a911      	add	r1, sp, #68	; 0x44
   2245c:	6830      	ldr	r0, [r6, #0]
   2245e:	f7fe f9fd 	bl	2085c <bt_uuid_cmp>
   22462:	b928      	cbnz	r0, 22470 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   22464:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   22468:	6868      	ldr	r0, [r5, #4]
   2246a:	4603      	mov	r3, r0
	size_t bytes = 0;
   2246c:	2400      	movs	r4, #0
	while (buf) {
   2246e:	e00a      	b.n	22486 <find_type_cb+0x72>
		if (data->group &&
   22470:	68ab      	ldr	r3, [r5, #8]
   22472:	b11b      	cbz	r3, 2247c <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   22474:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   22476:	42ba      	cmp	r2, r7
   22478:	d200      	bcs.n	2247c <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2247a:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2247c:	2001      	movs	r0, #1
   2247e:	e7e2      	b.n	22446 <find_type_cb+0x32>
		bytes += buf->len;
   22480:	899a      	ldrh	r2, [r3, #12]
   22482:	4414      	add	r4, r2
		buf = buf->frags;
   22484:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22486:	2b00      	cmp	r3, #0
   22488:	d1fa      	bne.n	22480 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   2248a:	1b0c      	subs	r4, r1, r4
   2248c:	2c03      	cmp	r4, #3
   2248e:	d801      	bhi.n	22494 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   22490:	2000      	movs	r0, #0
   22492:	e7d8      	b.n	22446 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   22494:	f001 f939 	bl	2370a <net_buf_frag_last>
   22498:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   2249a:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   2249e:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   224a0:	2200      	movs	r2, #0
	while (buf) {
   224a2:	b11b      	cbz	r3, 224ac <find_type_cb+0x98>
		bytes += buf->len;
   224a4:	8999      	ldrh	r1, [r3, #12]
   224a6:	440a      	add	r2, r1
		buf = buf->frags;
   224a8:	681b      	ldr	r3, [r3, #0]
   224aa:	e7fa      	b.n	224a2 <find_type_cb+0x8e>
   224ac:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   224b0:	f104 0b08 	add.w	fp, r4, #8
   224b4:	4658      	mov	r0, fp
   224b6:	f001 f984 	bl	237c2 <net_buf_simple_tailroom>
   224ba:	4582      	cmp	sl, r0
   224bc:	d22c      	bcs.n	22518 <find_type_cb+0x104>
   224be:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   224c2:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   224c4:	2200      	movs	r2, #0
	while (buf) {
   224c6:	e002      	b.n	224ce <find_type_cb+0xba>
		bytes += buf->len;
   224c8:	8999      	ldrh	r1, [r3, #12]
   224ca:	440a      	add	r2, r1
		buf = buf->frags;
   224cc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   224ce:	2b00      	cmp	r3, #0
   224d0:	d1fa      	bne.n	224c8 <find_type_cb+0xb4>
   224d2:	1a80      	subs	r0, r0, r2
	if (!len) {
   224d4:	b320      	cbz	r0, 22520 <find_type_cb+0x10c>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   224d6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   224da:	2300      	movs	r3, #0
   224dc:	9300      	str	r3, [sp, #0]
   224de:	2310      	movs	r3, #16
   224e0:	aa0c      	add	r2, sp, #48	; 0x30
   224e2:	4631      	mov	r1, r6
   224e4:	4648      	mov	r0, r9
   224e6:	47c0      	blx	r8
	if (read < 0) {
   224e8:	1e06      	subs	r6, r0, #0
   224ea:	dba9      	blt.n	22440 <find_type_cb+0x2c>
	if (read != data->value_len) {
   224ec:	7c2a      	ldrb	r2, [r5, #16]
   224ee:	42b2      	cmp	r2, r6
   224f0:	d026      	beq.n	22540 <find_type_cb+0x12c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   224f2:	68e9      	ldr	r1, [r5, #12]
   224f4:	a807      	add	r0, sp, #28
   224f6:	f7fe f9cf 	bl	20898 <bt_uuid_create>
   224fa:	2800      	cmp	r0, #0
   224fc:	d0a0      	beq.n	22440 <find_type_cb+0x2c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   224fe:	b2f2      	uxtb	r2, r6
   22500:	a90c      	add	r1, sp, #48	; 0x30
   22502:	a802      	add	r0, sp, #8
   22504:	f7fe f9c8 	bl	20898 <bt_uuid_create>
   22508:	2800      	cmp	r0, #0
   2250a:	d099      	beq.n	22440 <find_type_cb+0x2c>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2250c:	a902      	add	r1, sp, #8
   2250e:	a807      	add	r0, sp, #28
   22510:	f7fe f9a4 	bl	2085c <bt_uuid_cmp>
   22514:	b1e0      	cbz	r0, 22550 <find_type_cb+0x13c>
   22516:	e793      	b.n	22440 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   22518:	4658      	mov	r0, fp
   2251a:	f001 f952 	bl	237c2 <net_buf_simple_tailroom>
   2251e:	e7d9      	b.n	224d4 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   22520:	686b      	ldr	r3, [r5, #4]
   22522:	7998      	ldrb	r0, [r3, #6]
   22524:	f7f5 faaa 	bl	17a7c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   22528:	2200      	movs	r2, #0
   2252a:	2300      	movs	r3, #0
   2252c:	f001 f890 	bl	23650 <net_buf_alloc_fixed>
		if (!frag) {
   22530:	4604      	mov	r4, r0
   22532:	2800      	cmp	r0, #0
   22534:	d087      	beq.n	22446 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   22536:	4601      	mov	r1, r0
   22538:	6868      	ldr	r0, [r5, #4]
   2253a:	f001 f8f7 	bl	2372c <net_buf_frag_add>
   2253e:	e7ca      	b.n	224d6 <find_type_cb+0xc2>
	} else if (memcmp(data->value, uuid, read)) {
   22540:	4632      	mov	r2, r6
   22542:	a90c      	add	r1, sp, #48	; 0x30
   22544:	68e8      	ldr	r0, [r5, #12]
   22546:	f003 f8e0 	bl	2570a <memcmp>
   2254a:	2800      	cmp	r0, #0
   2254c:	f47f af78 	bne.w	22440 <find_type_cb+0x2c>
	data->err = 0x00;
   22550:	2300      	movs	r3, #0
   22552:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   22554:	2104      	movs	r1, #4
   22556:	f104 0008 	add.w	r0, r4, #8
   2255a:	f001 f8f6 	bl	2374a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   2255e:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   22560:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   22562:	68ab      	ldr	r3, [r5, #8]
   22564:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   22566:	2001      	movs	r0, #1
   22568:	e76d      	b.n	22446 <find_type_cb+0x32>

0002256a <find_info_cb>:
{
   2256a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2256e:	4606      	mov	r6, r0
   22570:	460f      	mov	r7, r1
   22572:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   22574:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   22578:	6893      	ldr	r3, [r2, #8]
   2257a:	b14b      	cbz	r3, 22590 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2257c:	68a3      	ldr	r3, [r4, #8]
   2257e:	781d      	ldrb	r5, [r3, #0]
   22580:	2d01      	cmp	r5, #1
   22582:	d013      	beq.n	225ac <find_info_cb+0x42>
   22584:	2d02      	cmp	r5, #2
   22586:	d02d      	beq.n	225e4 <find_info_cb+0x7a>
   22588:	2500      	movs	r5, #0
}
   2258a:	4628      	mov	r0, r5
   2258c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   22590:	6850      	ldr	r0, [r2, #4]
   22592:	2101      	movs	r1, #1
   22594:	3008      	adds	r0, #8
   22596:	f001 f8d8 	bl	2374a <net_buf_simple_add>
   2259a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2259c:	6833      	ldr	r3, [r6, #0]
   2259e:	781b      	ldrb	r3, [r3, #0]
   225a0:	b913      	cbnz	r3, 225a8 <find_info_cb+0x3e>
   225a2:	2301      	movs	r3, #1
   225a4:	7003      	strb	r3, [r0, #0]
   225a6:	e7e9      	b.n	2257c <find_info_cb+0x12>
   225a8:	2302      	movs	r3, #2
   225aa:	e7fb      	b.n	225a4 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   225ac:	6833      	ldr	r3, [r6, #0]
   225ae:	f893 9000 	ldrb.w	r9, [r3]
   225b2:	f1b9 0f00 	cmp.w	r9, #0
   225b6:	d001      	beq.n	225bc <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   225b8:	2500      	movs	r5, #0
   225ba:	e7e6      	b.n	2258a <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   225bc:	6860      	ldr	r0, [r4, #4]
   225be:	2104      	movs	r1, #4
   225c0:	3008      	adds	r0, #8
   225c2:	f001 f8c2 	bl	2374a <net_buf_simple_add>
   225c6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   225c8:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   225ca:	6832      	ldr	r2, [r6, #0]
   225cc:	68e3      	ldr	r3, [r4, #12]
   225ce:	8852      	ldrh	r2, [r2, #2]
   225d0:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   225d2:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   225d6:	6862      	ldr	r2, [r4, #4]
   225d8:	8992      	ldrh	r2, [r2, #12]
   225da:	1a9b      	subs	r3, r3, r2
   225dc:	2b04      	cmp	r3, #4
   225de:	d8d4      	bhi.n	2258a <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   225e0:	464d      	mov	r5, r9
   225e2:	e7d2      	b.n	2258a <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   225e4:	6833      	ldr	r3, [r6, #0]
   225e6:	781b      	ldrb	r3, [r3, #0]
   225e8:	2b02      	cmp	r3, #2
   225ea:	d001      	beq.n	225f0 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   225ec:	2500      	movs	r5, #0
   225ee:	e7cc      	b.n	2258a <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   225f0:	6860      	ldr	r0, [r4, #4]
   225f2:	2112      	movs	r1, #18
   225f4:	3008      	adds	r0, #8
   225f6:	f001 f8a8 	bl	2374a <net_buf_simple_add>
   225fa:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   225fc:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   225fe:	68e2      	ldr	r2, [r4, #12]
   22600:	6833      	ldr	r3, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22602:	f853 5f01 	ldr.w	r5, [r3, #1]!
   22606:	6858      	ldr	r0, [r3, #4]
   22608:	6899      	ldr	r1, [r3, #8]
   2260a:	68db      	ldr	r3, [r3, #12]
   2260c:	f8c2 5002 	str.w	r5, [r2, #2]
   22610:	f8c2 0006 	str.w	r0, [r2, #6]
   22614:	f8c2 100a 	str.w	r1, [r2, #10]
   22618:	f8c2 300e 	str.w	r3, [r2, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   2261c:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   22620:	6862      	ldr	r2, [r4, #4]
   22622:	8992      	ldrh	r2, [r2, #12]
   22624:	1a9b      	subs	r3, r3, r2
   22626:	2b12      	cmp	r3, #18
   22628:	d801      	bhi.n	2262e <find_info_cb+0xc4>
	return BT_GATT_ITER_STOP;
   2262a:	2500      	movs	r5, #0
   2262c:	e7ad      	b.n	2258a <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2262e:	2501      	movs	r5, #1
   22630:	e7ab      	b.n	2258a <find_info_cb+0x20>

00022632 <att_chan_mtu_updated>:
{
   22632:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   22634:	6806      	ldr	r6, [r0, #0]
	return list->head;
   22636:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22638:	b15c      	cbz	r4, 22652 <att_chan_mtu_updated+0x20>
   2263a:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   2263e:	d00c      	beq.n	2265a <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22640:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   22644:	d006      	beq.n	22654 <att_chan_mtu_updated+0x22>
	return node->next;
   22646:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2264a:	b11b      	cbz	r3, 22654 <att_chan_mtu_updated+0x22>
   2264c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   22650:	e000      	b.n	22654 <att_chan_mtu_updated+0x22>
   22652:	4623      	mov	r3, r4
   22654:	2200      	movs	r2, #0
   22656:	4611      	mov	r1, r2
   22658:	e004      	b.n	22664 <att_chan_mtu_updated+0x32>
   2265a:	4623      	mov	r3, r4
   2265c:	e7fa      	b.n	22654 <att_chan_mtu_updated+0x22>
   2265e:	461d      	mov	r5, r3
   22660:	461c      	mov	r4, r3
   22662:	462b      	mov	r3, r5
   22664:	b1bc      	cbz	r4, 22696 <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   22666:	4284      	cmp	r4, r0
   22668:	d009      	beq.n	2267e <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2266a:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   2266e:	42a9      	cmp	r1, r5
   22670:	bf38      	it	cc
   22672:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   22674:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   22678:	42a2      	cmp	r2, r4
   2267a:	bf38      	it	cc
   2267c:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2267e:	2b00      	cmp	r3, #0
   22680:	d0ed      	beq.n	2265e <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22682:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   22686:	d0eb      	beq.n	22660 <att_chan_mtu_updated+0x2e>
	return node->next;
   22688:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   2268c:	2d00      	cmp	r5, #0
   2268e:	d0e7      	beq.n	22660 <att_chan_mtu_updated+0x2e>
   22690:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   22694:	e7e4      	b.n	22660 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   22696:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2269a:	428b      	cmp	r3, r1
   2269c:	d803      	bhi.n	226a6 <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2269e:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   226a2:	4294      	cmp	r4, r2
   226a4:	d90a      	bls.n	226bc <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   226a6:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   226aa:	4282      	cmp	r2, r0
   226ac:	bf38      	it	cc
   226ae:	4602      	movcc	r2, r0
   226b0:	4299      	cmp	r1, r3
   226b2:	bf38      	it	cc
   226b4:	4619      	movcc	r1, r3
   226b6:	6830      	ldr	r0, [r6, #0]
   226b8:	f7f5 f956 	bl	17968 <bt_gatt_att_max_mtu_changed>
}
   226bc:	bd70      	pop	{r4, r5, r6, pc}

000226be <att_get_fixed_chan>:
{
   226be:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   226c0:	2104      	movs	r1, #4
   226c2:	f7ff faa4 	bl	21c0e <bt_l2cap_le_lookup_tx_cid>
}
   226c6:	3808      	subs	r0, #8
   226c8:	bd08      	pop	{r3, pc}

000226ca <bt_att_chan_create_pdu>:
{
   226ca:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   226cc:	3201      	adds	r2, #1
   226ce:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   226d2:	429a      	cmp	r2, r3
   226d4:	d822      	bhi.n	2271c <bt_att_chan_create_pdu+0x52>
   226d6:	460d      	mov	r5, r1
	switch (att_op_get_type(op)) {
   226d8:	4608      	mov	r0, r1
   226da:	f7ff fb53 	bl	21d84 <att_op_get_type>
   226de:	2802      	cmp	r0, #2
   226e0:	d00b      	beq.n	226fa <bt_att_chan_create_pdu+0x30>
   226e2:	2804      	cmp	r0, #4
   226e4:	d009      	beq.n	226fa <bt_att_chan_create_pdu+0x30>
		buf = bt_l2cap_create_pdu(NULL, 0);
   226e6:	f04f 32ff 	mov.w	r2, #4294967295
   226ea:	f04f 33ff 	mov.w	r3, #4294967295
   226ee:	2100      	movs	r1, #0
   226f0:	4608      	mov	r0, r1
   226f2:	f7ff fa0c 	bl	21b0e <bt_l2cap_create_pdu_timeout>
   226f6:	4604      	mov	r4, r0
   226f8:	e007      	b.n	2270a <bt_att_chan_create_pdu+0x40>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   226fa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   226fe:	2300      	movs	r3, #0
   22700:	2100      	movs	r1, #0
   22702:	4608      	mov	r0, r1
   22704:	f7ff fa03 	bl	21b0e <bt_l2cap_create_pdu_timeout>
   22708:	4604      	mov	r4, r0
	if (!buf) {
   2270a:	b12c      	cbz	r4, 22718 <bt_att_chan_create_pdu+0x4e>
   2270c:	2101      	movs	r1, #1
   2270e:	f104 0008 	add.w	r0, r4, #8
   22712:	f001 f81a 	bl	2374a <net_buf_simple_add>
	hdr->code = op;
   22716:	7005      	strb	r5, [r0, #0]
}
   22718:	4620      	mov	r0, r4
   2271a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   2271c:	2400      	movs	r4, #0
   2271e:	e7fb      	b.n	22718 <bt_att_chan_create_pdu+0x4e>

00022720 <att_write_cmd>:
{
   22720:	b530      	push	{r4, r5, lr}
   22722:	b085      	sub	sp, #20
   22724:	4605      	mov	r5, r0
   22726:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   22728:	f101 0008 	add.w	r0, r1, #8
   2272c:	f001 f83d 	bl	237aa <net_buf_simple_pull_le16>
   22730:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   22732:	68a2      	ldr	r2, [r4, #8]
   22734:	89a1      	ldrh	r1, [r4, #12]
   22736:	9102      	str	r1, [sp, #8]
   22738:	9201      	str	r2, [sp, #4]
   2273a:	2100      	movs	r1, #0
   2273c:	9100      	str	r1, [sp, #0]
   2273e:	460a      	mov	r2, r1
   22740:	4628      	mov	r0, r5
   22742:	f7f4 f97f 	bl	16a44 <att_write_rsp>
}
   22746:	b005      	add	sp, #20
   22748:	bd30      	pop	{r4, r5, pc}

0002274a <att_write_req>:
{
   2274a:	b530      	push	{r4, r5, lr}
   2274c:	b085      	sub	sp, #20
   2274e:	4605      	mov	r5, r0
   22750:	460c      	mov	r4, r1
   22752:	f101 0008 	add.w	r0, r1, #8
   22756:	f001 f828 	bl	237aa <net_buf_simple_pull_le16>
   2275a:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   2275c:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2275e:	89a1      	ldrh	r1, [r4, #12]
   22760:	9102      	str	r1, [sp, #8]
   22762:	9201      	str	r2, [sp, #4]
   22764:	2200      	movs	r2, #0
   22766:	9200      	str	r2, [sp, #0]
   22768:	2213      	movs	r2, #19
   2276a:	2112      	movs	r1, #18
   2276c:	4628      	mov	r0, r5
   2276e:	f7f4 f969 	bl	16a44 <att_write_rsp>
}
   22772:	b005      	add	sp, #20
   22774:	bd30      	pop	{r4, r5, pc}

00022776 <bt_att_create_pdu>:
{
   22776:	b570      	push	{r4, r5, r6, lr}
   22778:	460e      	mov	r6, r1
   2277a:	4615      	mov	r5, r2
	att = att_get(conn);
   2277c:	f7ff fb83 	bl	21e86 <att_get>
	if (!att) {
   22780:	b350      	cbz	r0, 227d8 <bt_att_create_pdu+0x62>
	return list->head;
   22782:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22784:	b158      	cbz	r0, 2279e <bt_att_create_pdu+0x28>
   22786:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2278a:	d00a      	beq.n	227a2 <bt_att_create_pdu+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2278c:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   22790:	d00c      	beq.n	227ac <bt_att_create_pdu+0x36>
	return node->next;
   22792:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   22796:	b14c      	cbz	r4, 227ac <bt_att_create_pdu+0x36>
   22798:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   2279c:	e006      	b.n	227ac <bt_att_create_pdu+0x36>
   2279e:	4604      	mov	r4, r0
   227a0:	e004      	b.n	227ac <bt_att_create_pdu+0x36>
   227a2:	4604      	mov	r4, r0
   227a4:	e002      	b.n	227ac <bt_att_create_pdu+0x36>
   227a6:	4623      	mov	r3, r4
   227a8:	4620      	mov	r0, r4
   227aa:	461c      	mov	r4, r3
   227ac:	b1a0      	cbz	r0, 227d8 <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   227ae:	1c6b      	adds	r3, r5, #1
   227b0:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   227b4:	4293      	cmp	r3, r2
   227b6:	d90b      	bls.n	227d0 <bt_att_create_pdu+0x5a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   227b8:	2c00      	cmp	r4, #0
   227ba:	d0f4      	beq.n	227a6 <bt_att_create_pdu+0x30>
Z_GENLIST_PEEK_NEXT(slist, snode)
   227bc:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   227c0:	d0f2      	beq.n	227a8 <bt_att_create_pdu+0x32>
	return node->next;
   227c2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   227c6:	2b00      	cmp	r3, #0
   227c8:	d0ee      	beq.n	227a8 <bt_att_create_pdu+0x32>
   227ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   227ce:	e7eb      	b.n	227a8 <bt_att_create_pdu+0x32>
		return bt_att_chan_create_pdu(chan, op, len);
   227d0:	462a      	mov	r2, r5
   227d2:	4631      	mov	r1, r6
   227d4:	f7ff ff79 	bl	226ca <bt_att_chan_create_pdu>
}
   227d8:	bd70      	pop	{r4, r5, r6, pc}

000227da <att_read_group_req>:
{
   227da:	b5f0      	push	{r4, r5, r6, r7, lr}
   227dc:	b089      	sub	sp, #36	; 0x24
   227de:	4605      	mov	r5, r0
   227e0:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   227e2:	7b0c      	ldrb	r4, [r1, #12]
   227e4:	3c04      	subs	r4, #4
   227e6:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   227e8:	2c02      	cmp	r4, #2
   227ea:	d001      	beq.n	227f0 <att_read_group_req+0x16>
   227ec:	2c10      	cmp	r4, #16
   227ee:	d142      	bne.n	22876 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   227f0:	2104      	movs	r1, #4
   227f2:	3008      	adds	r0, #8
   227f4:	f000 ffd1 	bl	2379a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   227f8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   227fa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   227fc:	4622      	mov	r2, r4
   227fe:	1d01      	adds	r1, r0, #4
   22800:	a801      	add	r0, sp, #4
   22802:	f7fe f849 	bl	20898 <bt_uuid_create>
   22806:	b3c8      	cbz	r0, 2287c <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22808:	f10d 0216 	add.w	r2, sp, #22
   2280c:	4639      	mov	r1, r7
   2280e:	4630      	mov	r0, r6
   22810:	f7ff fa76 	bl	21d00 <range_is_valid>
   22814:	b1f0      	cbz	r0, 22854 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   22816:	2300      	movs	r3, #0
   22818:	f88d 3018 	strb.w	r3, [sp, #24]
   2281c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22820:	f8ad 301a 	strh.w	r3, [sp, #26]
   22824:	a906      	add	r1, sp, #24
   22826:	a801      	add	r0, sp, #4
   22828:	f7fe f818 	bl	2085c <bt_uuid_cmp>
   2282c:	b158      	cbz	r0, 22846 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2282e:	2300      	movs	r3, #0
   22830:	f88d 301c 	strb.w	r3, [sp, #28]
   22834:	f642 0301 	movw	r3, #10241	; 0x2801
   22838:	f8ad 301e 	strh.w	r3, [sp, #30]
   2283c:	a907      	add	r1, sp, #28
   2283e:	a801      	add	r0, sp, #4
   22840:	f7fe f80c 	bl	2085c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   22844:	b978      	cbnz	r0, 22866 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   22846:	463b      	mov	r3, r7
   22848:	4632      	mov	r2, r6
   2284a:	a901      	add	r1, sp, #4
   2284c:	4628      	mov	r0, r5
   2284e:	f7f4 f963 	bl	16b18 <att_read_group_rsp>
   22852:	e011      	b.n	22878 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   22854:	2301      	movs	r3, #1
   22856:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2285a:	2110      	movs	r1, #16
   2285c:	4628      	mov	r0, r5
   2285e:	f7f4 f859 	bl	16914 <send_err_rsp>
		return 0;
   22862:	2000      	movs	r0, #0
   22864:	e008      	b.n	22878 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   22866:	2310      	movs	r3, #16
   22868:	4632      	mov	r2, r6
   2286a:	4619      	mov	r1, r3
   2286c:	4628      	mov	r0, r5
   2286e:	f7f4 f851 	bl	16914 <send_err_rsp>
		return 0;
   22872:	2000      	movs	r0, #0
   22874:	e000      	b.n	22878 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   22876:	2004      	movs	r0, #4
}
   22878:	b009      	add	sp, #36	; 0x24
   2287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   2287c:	200e      	movs	r0, #14
   2287e:	e7fb      	b.n	22878 <att_read_group_req+0x9e>

00022880 <att_read_blob_req>:
{
   22880:	b500      	push	{lr}
   22882:	b083      	sub	sp, #12
	req = (void *)buf->data;
   22884:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   22886:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   22888:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2288a:	9200      	str	r2, [sp, #0]
   2288c:	220d      	movs	r2, #13
   2288e:	210c      	movs	r1, #12
   22890:	f7f4 f9d4 	bl	16c3c <att_read_rsp>
}
   22894:	b003      	add	sp, #12
   22896:	f85d fb04 	ldr.w	pc, [sp], #4

0002289a <att_read_req>:
{
   2289a:	b500      	push	{lr}
   2289c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2289e:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   228a0:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   228a2:	2200      	movs	r2, #0
   228a4:	9200      	str	r2, [sp, #0]
   228a6:	220b      	movs	r2, #11
   228a8:	210a      	movs	r1, #10
   228aa:	f7f4 f9c7 	bl	16c3c <att_read_rsp>
}
   228ae:	b003      	add	sp, #12
   228b0:	f85d fb04 	ldr.w	pc, [sp], #4

000228b4 <att_read_type_req>:
{
   228b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   228b6:	b087      	sub	sp, #28
   228b8:	4605      	mov	r5, r0
   228ba:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   228bc:	7b0c      	ldrb	r4, [r1, #12]
   228be:	3c04      	subs	r4, #4
   228c0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   228c2:	2c02      	cmp	r4, #2
   228c4:	d001      	beq.n	228ca <att_read_type_req+0x16>
   228c6:	2c10      	cmp	r4, #16
   228c8:	d123      	bne.n	22912 <att_read_type_req+0x5e>
   228ca:	2104      	movs	r1, #4
   228cc:	3008      	adds	r0, #8
   228ce:	f000 ff64 	bl	2379a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   228d2:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   228d4:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   228d6:	4622      	mov	r2, r4
   228d8:	1d01      	adds	r1, r0, #4
   228da:	a801      	add	r0, sp, #4
   228dc:	f7fd ffdc 	bl	20898 <bt_uuid_create>
   228e0:	b1c8      	cbz	r0, 22916 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   228e2:	f10d 0216 	add.w	r2, sp, #22
   228e6:	4639      	mov	r1, r7
   228e8:	4630      	mov	r0, r6
   228ea:	f7ff fa09 	bl	21d00 <range_is_valid>
   228ee:	b138      	cbz	r0, 22900 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   228f0:	463b      	mov	r3, r7
   228f2:	4632      	mov	r2, r6
   228f4:	a901      	add	r1, sp, #4
   228f6:	4628      	mov	r0, r5
   228f8:	f7f4 f9f0 	bl	16cdc <att_read_type_rsp>
}
   228fc:	b007      	add	sp, #28
   228fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   22900:	2301      	movs	r3, #1
   22902:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22906:	2108      	movs	r1, #8
   22908:	4628      	mov	r0, r5
   2290a:	f7f4 f803 	bl	16914 <send_err_rsp>
		return 0;
   2290e:	2000      	movs	r0, #0
   22910:	e7f4      	b.n	228fc <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   22912:	2004      	movs	r0, #4
   22914:	e7f2      	b.n	228fc <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   22916:	200e      	movs	r0, #14
   22918:	e7f0      	b.n	228fc <att_read_type_req+0x48>

0002291a <att_find_type_req>:
{
   2291a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2291e:	b087      	sub	sp, #28
   22920:	4607      	mov	r7, r0
   22922:	460c      	mov	r4, r1
   22924:	2106      	movs	r1, #6
   22926:	f104 0008 	add.w	r0, r4, #8
   2292a:	f000 ff36 	bl	2379a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2292e:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   22930:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   22932:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   22936:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   2293a:	f10d 020e 	add.w	r2, sp, #14
   2293e:	4631      	mov	r1, r6
   22940:	4628      	mov	r0, r5
   22942:	f7ff f9dd 	bl	21d00 <range_is_valid>
   22946:	b1d0      	cbz	r0, 2297e <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   22948:	2300      	movs	r3, #0
   2294a:	f88d 3010 	strb.w	r3, [sp, #16]
   2294e:	f8ad 8012 	strh.w	r8, [sp, #18]
   22952:	f88d 3014 	strb.w	r3, [sp, #20]
   22956:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2295a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2295e:	a905      	add	r1, sp, #20
   22960:	a804      	add	r0, sp, #16
   22962:	f7fd ff7b 	bl	2085c <bt_uuid_cmp>
   22966:	b998      	cbnz	r0, 22990 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   22968:	7b23      	ldrb	r3, [r4, #12]
   2296a:	9300      	str	r3, [sp, #0]
   2296c:	464b      	mov	r3, r9
   2296e:	4632      	mov	r2, r6
   22970:	4629      	mov	r1, r5
   22972:	4638      	mov	r0, r7
   22974:	f7f4 f9fc 	bl	16d70 <att_find_type_rsp>
}
   22978:	b007      	add	sp, #28
   2297a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   2297e:	2301      	movs	r3, #1
   22980:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   22984:	2106      	movs	r1, #6
   22986:	4638      	mov	r0, r7
   22988:	f7f3 ffc4 	bl	16914 <send_err_rsp>
		return 0;
   2298c:	2000      	movs	r0, #0
   2298e:	e7f3      	b.n	22978 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   22990:	230a      	movs	r3, #10
   22992:	462a      	mov	r2, r5
   22994:	2106      	movs	r1, #6
   22996:	4638      	mov	r0, r7
   22998:	f7f3 ffbc 	bl	16914 <send_err_rsp>
		return 0;
   2299c:	2000      	movs	r0, #0
   2299e:	e7eb      	b.n	22978 <att_find_type_req+0x5e>

000229a0 <att_find_info_req>:
{
   229a0:	b570      	push	{r4, r5, r6, lr}
   229a2:	b082      	sub	sp, #8
   229a4:	4604      	mov	r4, r0
	req = (void *)buf->data;
   229a6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   229a8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   229aa:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   229ac:	f10d 0206 	add.w	r2, sp, #6
   229b0:	4631      	mov	r1, r6
   229b2:	4628      	mov	r0, r5
   229b4:	f7ff f9a4 	bl	21d00 <range_is_valid>
   229b8:	b130      	cbz	r0, 229c8 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   229ba:	4632      	mov	r2, r6
   229bc:	4629      	mov	r1, r5
   229be:	4620      	mov	r0, r4
   229c0:	f7f4 fa1a 	bl	16df8 <att_find_info_rsp>
}
   229c4:	b002      	add	sp, #8
   229c6:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   229c8:	2301      	movs	r3, #1
   229ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   229ce:	2104      	movs	r1, #4
   229d0:	4620      	mov	r0, r4
   229d2:	f7f3 ff9f 	bl	16914 <send_err_rsp>
		return 0;
   229d6:	2000      	movs	r0, #0
   229d8:	e7f4      	b.n	229c4 <att_find_info_req+0x24>

000229da <bt_att_init>:
{
   229da:	b508      	push	{r3, lr}
	bt_gatt_init();
   229dc:	f7f4 fc2a 	bl	17234 <bt_gatt_init>
}
   229e0:	bd08      	pop	{r3, pc}

000229e2 <att_confirm>:
{
   229e2:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   229e4:	2300      	movs	r3, #0
   229e6:	898a      	ldrh	r2, [r1, #12]
   229e8:	6889      	ldr	r1, [r1, #8]
   229ea:	f7f4 faa3 	bl	16f34 <att_handle_rsp>
}
   229ee:	bd08      	pop	{r3, pc}

000229f0 <att_chan_detach>:
{
   229f0:	b510      	push	{r4, lr}
   229f2:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   229f4:	6800      	ldr	r0, [r0, #0]
   229f6:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   229fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   229fc:	2100      	movs	r1, #0
   229fe:	b1e3      	cbz	r3, 22a3a <att_chan_detach+0x4a>
   22a00:	4293      	cmp	r3, r2
   22a02:	d002      	beq.n	22a0a <att_chan_detach+0x1a>
   22a04:	4619      	mov	r1, r3
   22a06:	681b      	ldr	r3, [r3, #0]
   22a08:	e7f9      	b.n	229fe <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   22a0a:	b149      	cbz	r1, 22a20 <att_chan_detach+0x30>
	return node->next;
   22a0c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   22a10:	600b      	str	r3, [r1, #0]
	return list->tail;
   22a12:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   22a14:	4293      	cmp	r3, r2
   22a16:	d00b      	beq.n	22a30 <att_chan_detach+0x40>
	parent->next = child;
   22a18:	2300      	movs	r3, #0
   22a1a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22a1e:	e00c      	b.n	22a3a <att_chan_detach+0x4a>
	return node->next;
   22a20:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   22a24:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   22a26:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   22a28:	4291      	cmp	r1, r2
   22a2a:	d1f5      	bne.n	22a18 <att_chan_detach+0x28>
	list->tail = node;
   22a2c:	6283      	str	r3, [r0, #40]	; 0x28
}
   22a2e:	e7f3      	b.n	22a18 <att_chan_detach+0x28>
	list->tail = node;
   22a30:	6281      	str	r1, [r0, #40]	; 0x28
}
   22a32:	e7f1      	b.n	22a18 <att_chan_detach+0x28>
		net_buf_unref(buf);
   22a34:	4618      	mov	r0, r3
   22a36:	f000 fe3e 	bl	236b6 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   22a3a:	2200      	movs	r2, #0
   22a3c:	2300      	movs	r3, #0
   22a3e:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   22a42:	f000 fe0c 	bl	2365e <net_buf_get>
   22a46:	4603      	mov	r3, r0
   22a48:	2800      	cmp	r0, #0
   22a4a:	d1f3      	bne.n	22a34 <att_chan_detach+0x44>
	if (chan->req) {
   22a4c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   22a50:	b12b      	cbz	r3, 22a5e <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   22a52:	230e      	movs	r3, #14
   22a54:	2200      	movs	r2, #0
   22a56:	4611      	mov	r1, r2
   22a58:	4620      	mov	r0, r4
   22a5a:	f7f4 fa6b 	bl	16f34 <att_handle_rsp>
	chan->att = NULL;
   22a5e:	2300      	movs	r3, #0
   22a60:	6023      	str	r3, [r4, #0]
}
   22a62:	bd10      	pop	{r4, pc}

00022a64 <bt_att_disconnected>:
{
   22a64:	b538      	push	{r3, r4, r5, lr}
   22a66:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   22a68:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   22a6c:	b125      	cbz	r5, 22a78 <bt_att_disconnected+0x14>
   22a6e:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   22a70:	f7ff ffbe 	bl	229f0 <att_chan_detach>
	return list->head;
   22a74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   22a76:	b103      	cbz	r3, 22a7a <bt_att_disconnected+0x16>
}
   22a78:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   22a7a:	4628      	mov	r0, r5
   22a7c:	f7f4 fa90 	bl	16fa0 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   22a80:	6820      	ldr	r0, [r4, #0]
   22a82:	f7f4 ffbd 	bl	17a00 <bt_gatt_disconnected>
   22a86:	e7f7      	b.n	22a78 <bt_att_disconnected+0x14>

00022a88 <att_timeout>:
{
   22a88:	b508      	push	{r3, lr}
	bt_att_disconnected(&chan->chan.chan);
   22a8a:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   22a8e:	f7ff ffe9 	bl	22a64 <bt_att_disconnected>
}
   22a92:	bd08      	pop	{r3, pc}

00022a94 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   22a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a98:	b082      	sub	sp, #8
   22a9a:	4607      	mov	r7, r0
   22a9c:	460d      	mov	r5, r1
   22a9e:	4614      	mov	r4, r2
   22aa0:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   22aa2:	f7ff f9f0 	bl	21e86 <att_get>
	if (!att) {
   22aa6:	b158      	cbz	r0, 22ac0 <bt_att_send+0x2c>
   22aa8:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   22aaa:	b17c      	cbz	r4, 22acc <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   22aac:	9600      	str	r6, [sp, #0]
   22aae:	4623      	mov	r3, r4
   22ab0:	462a      	mov	r2, r5
   22ab2:	2104      	movs	r1, #4
   22ab4:	4638      	mov	r0, r7
   22ab6:	f7ff f845 	bl	21b44 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   22aba:	b002      	add	sp, #8
   22abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   22ac0:	4628      	mov	r0, r5
   22ac2:	f000 fdf8 	bl	236b6 <net_buf_unref>
		return -ENOTCONN;
   22ac6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22aca:	e7f6      	b.n	22aba <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   22acc:	4629      	mov	r1, r5
   22ace:	300c      	adds	r0, #12
   22ad0:	f000 fde4 	bl	2369c <net_buf_put>
	att_send_process(att);
   22ad4:	4640      	mov	r0, r8
   22ad6:	f7ff fb56 	bl	22186 <att_send_process>
	return 0;
   22ada:	2000      	movs	r0, #0
   22adc:	e7ed      	b.n	22aba <bt_att_send+0x26>

00022ade <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   22ade:	b510      	push	{r4, lr}
   22ae0:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   22ae2:	f7ff f9d0 	bl	21e86 <att_get>
	if (!att) {
   22ae6:	b170      	cbz	r0, 22b06 <bt_att_req_send+0x28>
   22ae8:	4603      	mov	r3, r0
	parent->next = child;
   22aea:	2200      	movs	r2, #0
   22aec:	6022      	str	r2, [r4, #0]
	return list->tail;
   22aee:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   22af0:	b132      	cbz	r2, 22b00 <bt_att_req_send+0x22>
	parent->next = child;
   22af2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22af4:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   22af6:	4618      	mov	r0, r3
   22af8:	f7ff fa7c 	bl	21ff4 <att_req_send_process>

	return 0;
   22afc:	2000      	movs	r0, #0
}
   22afe:	bd10      	pop	{r4, pc}
   22b00:	6084      	str	r4, [r0, #8]
	list->head = node;
   22b02:	6044      	str	r4, [r0, #4]
}
   22b04:	e7f7      	b.n	22af6 <bt_att_req_send+0x18>
		return -ENOTCONN;
   22b06:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22b0a:	e7f8      	b.n	22afe <bt_att_req_send+0x20>

00022b0c <update_range>:
{
   22b0c:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   22b0e:	8804      	ldrh	r4, [r0, #0]
   22b10:	42a2      	cmp	r2, r4
   22b12:	d302      	bcc.n	22b1a <update_range+0xe>
   22b14:	880d      	ldrh	r5, [r1, #0]
   22b16:	42ab      	cmp	r3, r5
   22b18:	d908      	bls.n	22b2c <update_range+0x20>
	if (*start > new_start) {
   22b1a:	42a2      	cmp	r2, r4
   22b1c:	d200      	bcs.n	22b20 <update_range+0x14>
		*start = new_start;
   22b1e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   22b20:	880a      	ldrh	r2, [r1, #0]
   22b22:	4293      	cmp	r3, r2
   22b24:	d904      	bls.n	22b30 <update_range+0x24>
		*end = new_end;
   22b26:	800b      	strh	r3, [r1, #0]
	return true;
   22b28:	2001      	movs	r0, #1
   22b2a:	e002      	b.n	22b32 <update_range+0x26>
		return false;
   22b2c:	2000      	movs	r0, #0
   22b2e:	e000      	b.n	22b32 <update_range+0x26>
	return true;
   22b30:	2001      	movs	r0, #1
}
   22b32:	bc30      	pop	{r4, r5}
   22b34:	4770      	bx	lr

00022b36 <cf_set_value>:
{
   22b36:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   22b38:	2300      	movs	r3, #0
   22b3a:	e001      	b.n	22b40 <cf_set_value+0xa>
   22b3c:	3301      	adds	r3, #1
   22b3e:	b29b      	uxth	r3, r3
   22b40:	2b02      	cmp	r3, #2
   22b42:	d824      	bhi.n	22b8e <cf_set_value+0x58>
   22b44:	08dd      	lsrs	r5, r3, #3
   22b46:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   22b4a:	d90f      	bls.n	22b6c <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22b4c:	1944      	adds	r4, r0, r5
   22b4e:	7a24      	ldrb	r4, [r4, #8]
   22b50:	f003 0607 	and.w	r6, r3, #7
   22b54:	40f4      	lsrs	r4, r6
   22b56:	f014 0f01 	tst.w	r4, #1
   22b5a:	d0ef      	beq.n	22b3c <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   22b5c:	5d4c      	ldrb	r4, [r1, r5]
   22b5e:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22b62:	f016 0f01 	tst.w	r6, #1
   22b66:	d1e9      	bne.n	22b3c <cf_set_value+0x6>
			return false;
   22b68:	2000      	movs	r0, #0
   22b6a:	e013      	b.n	22b94 <cf_set_value+0x5e>
   22b6c:	2300      	movs	r3, #0
   22b6e:	e008      	b.n	22b82 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   22b70:	5ccc      	ldrb	r4, [r1, r3]
   22b72:	f004 0407 	and.w	r4, r4, #7
   22b76:	18c5      	adds	r5, r0, r3
   22b78:	7a2e      	ldrb	r6, [r5, #8]
   22b7a:	4334      	orrs	r4, r6
   22b7c:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   22b7e:	3301      	adds	r3, #1
   22b80:	b29b      	uxth	r3, r3
   22b82:	4293      	cmp	r3, r2
   22b84:	d205      	bcs.n	22b92 <cf_set_value+0x5c>
   22b86:	2b00      	cmp	r3, #0
   22b88:	d0f2      	beq.n	22b70 <cf_set_value+0x3a>
	return true;
   22b8a:	2001      	movs	r0, #1
   22b8c:	e002      	b.n	22b94 <cf_set_value+0x5e>
   22b8e:	2300      	movs	r3, #0
   22b90:	e7f7      	b.n	22b82 <cf_set_value+0x4c>
   22b92:	2001      	movs	r0, #1
}
   22b94:	bc70      	pop	{r4, r5, r6}
   22b96:	4770      	bx	lr

00022b98 <gatt_ccc_changed>:
{
   22b98:	b510      	push	{r4, lr}
   22b9a:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   22b9c:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22b9e:	460b      	mov	r3, r1
   22ba0:	2b00      	cmp	r3, #0
   22ba2:	dd07      	ble.n	22bb4 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   22ba4:	8953      	ldrh	r3, [r2, #10]
   22ba6:	4299      	cmp	r1, r3
   22ba8:	d003      	beq.n	22bb2 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   22baa:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   22bac:	68d3      	ldr	r3, [r2, #12]
   22bae:	b103      	cbz	r3, 22bb2 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   22bb0:	4798      	blx	r3
}
   22bb2:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   22bb4:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   22bb8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   22bbc:	8924      	ldrh	r4, [r4, #8]
   22bbe:	428c      	cmp	r4, r1
   22bc0:	d900      	bls.n	22bc4 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   22bc2:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22bc4:	3301      	adds	r3, #1
   22bc6:	e7eb      	b.n	22ba0 <gatt_ccc_changed+0x8>

00022bc8 <gatt_indicate_rsp>:
{
   22bc8:	b510      	push	{r4, lr}
   22bca:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   22bcc:	68a3      	ldr	r3, [r4, #8]
   22bce:	b113      	cbz	r3, 22bd6 <gatt_indicate_rsp+0xe>
   22bd0:	460a      	mov	r2, r1
		params->func(conn, params, err);
   22bd2:	4621      	mov	r1, r4
   22bd4:	4798      	blx	r3
	params->_ref--;
   22bd6:	7da3      	ldrb	r3, [r4, #22]
   22bd8:	3b01      	subs	r3, #1
   22bda:	b2db      	uxtb	r3, r3
   22bdc:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   22bde:	68e2      	ldr	r2, [r4, #12]
   22be0:	b112      	cbz	r2, 22be8 <gatt_indicate_rsp+0x20>
   22be2:	b90b      	cbnz	r3, 22be8 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   22be4:	4620      	mov	r0, r4
   22be6:	4790      	blx	r2
}
   22be8:	bd10      	pop	{r4, pc}

00022bea <match_uuid>:
	data->attr = attr;
   22bea:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   22bec:	8091      	strh	r1, [r2, #4]
}
   22bee:	2000      	movs	r0, #0
   22bf0:	4770      	bx	lr

00022bf2 <write_name>:
{
   22bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   22bf4:	b093      	sub	sp, #76	; 0x4c
   22bf6:	4616      	mov	r6, r2
   22bf8:	461c      	mov	r4, r3
   22bfa:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   22bfe:	2100      	movs	r1, #0
   22c00:	9101      	str	r1, [sp, #4]
   22c02:	223d      	movs	r2, #61	; 0x3d
   22c04:	a802      	add	r0, sp, #8
   22c06:	f002 fdc9 	bl	2579c <memset>
	if (offset >= sizeof(value)) {
   22c0a:	2d40      	cmp	r5, #64	; 0x40
   22c0c:	d80f      	bhi.n	22c2e <write_name+0x3c>
	if (offset + len >= sizeof(value)) {
   22c0e:	4627      	mov	r7, r4
   22c10:	4425      	add	r5, r4
   22c12:	2d40      	cmp	r5, #64	; 0x40
   22c14:	d80e      	bhi.n	22c34 <write_name+0x42>
	memcpy(value, buf, len);
   22c16:	2341      	movs	r3, #65	; 0x41
   22c18:	4622      	mov	r2, r4
   22c1a:	4631      	mov	r1, r6
   22c1c:	a801      	add	r0, sp, #4
   22c1e:	f002 fd90 	bl	25742 <__memcpy_chk>
	bt_set_name(value);
   22c22:	a801      	add	r0, sp, #4
   22c24:	f7f2 fae0 	bl	151e8 <bt_set_name>
}
   22c28:	4638      	mov	r0, r7
   22c2a:	b013      	add	sp, #76	; 0x4c
   22c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22c2e:	f06f 0706 	mvn.w	r7, #6
   22c32:	e7f9      	b.n	22c28 <write_name+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   22c34:	f06f 070c 	mvn.w	r7, #12
   22c38:	e7f6      	b.n	22c28 <write_name+0x36>

00022c3a <gen_hash_m>:
{
   22c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c3c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22c3e:	6806      	ldr	r6, [r0, #0]
   22c40:	7835      	ldrb	r5, [r6, #0]
   22c42:	2d00      	cmp	r5, #0
   22c44:	d161      	bne.n	22d0a <gen_hash_m+0xd0>
   22c46:	4607      	mov	r7, r0
   22c48:	4614      	mov	r4, r2
	switch (u16->val) {
   22c4a:	8873      	ldrh	r3, [r6, #2]
   22c4c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   22c50:	d019      	beq.n	22c86 <gen_hash_m+0x4c>
   22c52:	d913      	bls.n	22c7c <gen_hash_m+0x42>
   22c54:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   22c58:	33ff      	adds	r3, #255	; 0xff
   22c5a:	b29b      	uxth	r3, r3
   22c5c:	2b04      	cmp	r3, #4
   22c5e:	d85a      	bhi.n	22d16 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   22c60:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c64:	2202      	movs	r2, #2
   22c66:	f10d 010e 	add.w	r1, sp, #14
   22c6a:	4620      	mov	r0, r4
   22c6c:	f7fd fc6b 	bl	20546 <tc_cmac_update>
   22c70:	2800      	cmp	r0, #0
   22c72:	d13a      	bne.n	22cea <gen_hash_m+0xb0>
			state->err = -EINVAL;
   22c74:	f06f 0315 	mvn.w	r3, #21
   22c78:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22c7a:	e047      	b.n	22d0c <gen_hash_m+0xd2>
	switch (u16->val) {
   22c7c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22c80:	b29b      	uxth	r3, r3
   22c82:	2b03      	cmp	r3, #3
   22c84:	d845      	bhi.n	22d12 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   22c86:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22c8a:	2202      	movs	r2, #2
   22c8c:	f10d 010e 	add.w	r1, sp, #14
   22c90:	4620      	mov	r0, r4
   22c92:	f7fd fc58 	bl	20546 <tc_cmac_update>
   22c96:	b918      	cbnz	r0, 22ca0 <gen_hash_m+0x66>
			state->err = -EINVAL;
   22c98:	f06f 0315 	mvn.w	r3, #21
   22c9c:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22c9e:	e035      	b.n	22d0c <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   22ca0:	8873      	ldrh	r3, [r6, #2]
   22ca2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22ca6:	2202      	movs	r2, #2
   22ca8:	f10d 010e 	add.w	r1, sp, #14
   22cac:	4620      	mov	r0, r4
   22cae:	f7fd fc4a 	bl	20546 <tc_cmac_update>
   22cb2:	b180      	cbz	r0, 22cd6 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   22cb4:	687e      	ldr	r6, [r7, #4]
   22cb6:	2000      	movs	r0, #0
   22cb8:	9000      	str	r0, [sp, #0]
   22cba:	2310      	movs	r3, #16
   22cbc:	eb0d 0203 	add.w	r2, sp, r3
   22cc0:	4639      	mov	r1, r7
   22cc2:	47b0      	blx	r6
		if (len < 0) {
   22cc4:	1e02      	subs	r2, r0, #0
   22cc6:	db0a      	blt.n	22cde <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   22cc8:	a904      	add	r1, sp, #16
   22cca:	4620      	mov	r0, r4
   22ccc:	f7fd fc3b 	bl	20546 <tc_cmac_update>
   22cd0:	b138      	cbz	r0, 22ce2 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   22cd2:	2501      	movs	r5, #1
   22cd4:	e01a      	b.n	22d0c <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22cd6:	f06f 0315 	mvn.w	r3, #21
   22cda:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22cdc:	e016      	b.n	22d0c <gen_hash_m+0xd2>
			state->err = len;
   22cde:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22ce0:	e014      	b.n	22d0c <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22ce2:	f06f 0315 	mvn.w	r3, #21
   22ce6:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22ce8:	e010      	b.n	22d0c <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   22cea:	8873      	ldrh	r3, [r6, #2]
   22cec:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22cf0:	2202      	movs	r2, #2
   22cf2:	f10d 010e 	add.w	r1, sp, #14
   22cf6:	4620      	mov	r0, r4
   22cf8:	f7fd fc25 	bl	20546 <tc_cmac_update>
   22cfc:	b108      	cbz	r0, 22d02 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   22cfe:	2501      	movs	r5, #1
   22d00:	e004      	b.n	22d0c <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22d02:	f06f 0315 	mvn.w	r3, #21
   22d06:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22d08:	e000      	b.n	22d0c <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   22d0a:	2501      	movs	r5, #1
}
   22d0c:	4628      	mov	r0, r5
   22d0e:	b009      	add	sp, #36	; 0x24
   22d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22d12:	2501      	movs	r5, #1
   22d14:	e7fa      	b.n	22d0c <gen_hash_m+0xd2>
   22d16:	2501      	movs	r5, #1
   22d18:	e7f8      	b.n	22d0c <gen_hash_m+0xd2>

00022d1a <find_ccc_cfg>:
{
   22d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d1c:	b083      	sub	sp, #12
   22d1e:	4607      	mov	r7, r0
   22d20:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22d22:	2400      	movs	r4, #0
   22d24:	b11c      	cbz	r4, 22d2e <find_ccc_cfg+0x14>
	return NULL;
   22d26:	2600      	movs	r6, #0
}
   22d28:	4630      	mov	r0, r6
   22d2a:	b003      	add	sp, #12
   22d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   22d2e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   22d32:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   22d36:	b167      	cbz	r7, 22d52 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   22d38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22d3c:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22d3e:	3201      	adds	r2, #1
   22d40:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   22d44:	4638      	mov	r0, r7
   22d46:	f7fe fdb9 	bl	218bc <bt_conn_is_peer_addr_le>
   22d4a:	2800      	cmp	r0, #0
   22d4c:	d1ec      	bne.n	22d28 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22d4e:	3401      	adds	r4, #1
   22d50:	e7e8      	b.n	22d24 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   22d52:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   22d56:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   22d5a:	2300      	movs	r3, #0
   22d5c:	9300      	str	r3, [sp, #0]
   22d5e:	f8cd 3003 	str.w	r3, [sp, #3]
   22d62:	2207      	movs	r2, #7
   22d64:	4669      	mov	r1, sp
   22d66:	3001      	adds	r0, #1
   22d68:	f002 fccf 	bl	2570a <memcmp>
   22d6c:	2800      	cmp	r0, #0
   22d6e:	d1ee      	bne.n	22d4e <find_ccc_cfg+0x34>
   22d70:	e7da      	b.n	22d28 <find_ccc_cfg+0xe>

00022d72 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   22d72:	2300      	movs	r3, #0
   22d74:	6003      	str	r3, [r0, #0]
   22d76:	6043      	str	r3, [r0, #4]
   22d78:	6083      	str	r3, [r0, #8]
}
   22d7a:	4770      	bx	lr

00022d7c <bt_gatt_clear_sc>:
{
   22d7c:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22d7e:	f7f4 f991 	bl	170a4 <find_sc_cfg>
	if (!cfg) {
   22d82:	b108      	cbz	r0, 22d88 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   22d84:	f7ff fff5 	bl	22d72 <clear_sc_cfg>
}
   22d88:	2000      	movs	r0, #0
   22d8a:	bd08      	pop	{r3, pc}

00022d8c <sc_clear>:
{
   22d8c:	b538      	push	{r3, r4, r5, lr}
   22d8e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22d90:	f100 0588 	add.w	r5, r0, #136	; 0x88
   22d94:	4629      	mov	r1, r5
   22d96:	7a00      	ldrb	r0, [r0, #8]
   22d98:	f7fe f8c7 	bl	20f2a <bt_addr_le_is_bonded>
   22d9c:	b120      	cbz	r0, 22da8 <sc_clear+0x1c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   22d9e:	4629      	mov	r1, r5
   22da0:	7a20      	ldrb	r0, [r4, #8]
   22da2:	f7ff ffeb 	bl	22d7c <bt_gatt_clear_sc>
}
   22da6:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   22da8:	4629      	mov	r1, r5
   22daa:	7a20      	ldrb	r0, [r4, #8]
   22dac:	f7f4 f97a 	bl	170a4 <find_sc_cfg>
		if (cfg) {
   22db0:	2800      	cmp	r0, #0
   22db2:	d0f8      	beq.n	22da6 <sc_clear+0x1a>
			clear_sc_cfg(cfg);
   22db4:	f7ff ffdd 	bl	22d72 <clear_sc_cfg>
}
   22db8:	e7f5      	b.n	22da6 <sc_clear+0x1a>

00022dba <sc_reset>:
   22dba:	2300      	movs	r3, #0
   22dbc:	6083      	str	r3, [r0, #8]
}
   22dbe:	4770      	bx	lr

00022dc0 <sc_restore_rsp>:
{
   22dc0:	b538      	push	{r3, r4, r5, lr}
   22dc2:	4605      	mov	r5, r0
   22dc4:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   22dc6:	f7f4 f943 	bl	17050 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   22dca:	b188      	cbz	r0, 22df0 <sc_restore_rsp+0x30>
   22dcc:	4603      	mov	r3, r0
   22dce:	7a02      	ldrb	r2, [r0, #8]
   22dd0:	f012 0f01 	tst.w	r2, #1
   22dd4:	d00c      	beq.n	22df0 <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22dd6:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22dd8:	f3bf 8f5b 	dmb	ish
   22ddc:	e853 2f00 	ldrex	r2, [r3]
   22de0:	f042 0201 	orr.w	r2, r2, #1
   22de4:	e843 2100 	strex	r1, r2, [r3]
   22de8:	2900      	cmp	r1, #0
   22dea:	d1f7      	bne.n	22ddc <sc_restore_rsp+0x1c>
   22dec:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   22df0:	b104      	cbz	r4, 22df4 <sc_restore_rsp+0x34>
}
   22df2:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   22df4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   22df8:	7a28      	ldrb	r0, [r5, #8]
   22dfa:	f7f4 f953 	bl	170a4 <find_sc_cfg>
		if (sc_cfg) {
   22dfe:	2800      	cmp	r0, #0
   22e00:	d0f7      	beq.n	22df2 <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   22e02:	f7ff ffda 	bl	22dba <sc_reset>
}
   22e06:	e7f4      	b.n	22df2 <sc_restore_rsp+0x32>

00022e08 <gatt_foreach_iter>:
	if (handle > end_handle) {
   22e08:	4299      	cmp	r1, r3
   22e0a:	d822      	bhi.n	22e52 <gatt_foreach_iter+0x4a>
{
   22e0c:	b538      	push	{r3, r4, r5, lr}
   22e0e:	4605      	mov	r5, r0
   22e10:	460c      	mov	r4, r1
	if (handle < start_handle) {
   22e12:	4291      	cmp	r1, r2
   22e14:	d31f      	bcc.n	22e56 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   22e16:	9b04      	ldr	r3, [sp, #16]
   22e18:	b123      	cbz	r3, 22e24 <gatt_foreach_iter+0x1c>
   22e1a:	6801      	ldr	r1, [r0, #0]
   22e1c:	4618      	mov	r0, r3
   22e1e:	f7fd fd1d 	bl	2085c <bt_uuid_cmp>
   22e22:	b9d0      	cbnz	r0, 22e5a <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   22e24:	9b05      	ldr	r3, [sp, #20]
   22e26:	b12b      	cbz	r3, 22e34 <gatt_foreach_iter+0x2c>
   22e28:	68eb      	ldr	r3, [r5, #12]
   22e2a:	9a05      	ldr	r2, [sp, #20]
   22e2c:	4293      	cmp	r3, r2
   22e2e:	d001      	beq.n	22e34 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   22e30:	2001      	movs	r0, #1
   22e32:	e011      	b.n	22e58 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   22e34:	9b06      	ldr	r3, [sp, #24]
   22e36:	881b      	ldrh	r3, [r3, #0]
   22e38:	3b01      	subs	r3, #1
   22e3a:	9a06      	ldr	r2, [sp, #24]
   22e3c:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   22e3e:	9a08      	ldr	r2, [sp, #32]
   22e40:	4621      	mov	r1, r4
   22e42:	4628      	mov	r0, r5
   22e44:	9b07      	ldr	r3, [sp, #28]
   22e46:	4798      	blx	r3
	if (!*num_matches) {
   22e48:	9b06      	ldr	r3, [sp, #24]
   22e4a:	881b      	ldrh	r3, [r3, #0]
   22e4c:	b923      	cbnz	r3, 22e58 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   22e4e:	2000      	movs	r0, #0
   22e50:	e002      	b.n	22e58 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   22e52:	2000      	movs	r0, #0
}
   22e54:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   22e56:	2001      	movs	r0, #1
}
   22e58:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   22e5a:	2001      	movs	r0, #1
   22e5c:	e7fc      	b.n	22e58 <gatt_foreach_iter+0x50>

00022e5e <gatt_req_alloc>:
{
   22e5e:	b538      	push	{r3, r4, r5, lr}
   22e60:	4605      	mov	r5, r0
   22e62:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   22e64:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   22e68:	2100      	movs	r1, #0
   22e6a:	f7f4 f835 	bl	16ed8 <bt_att_req_alloc>
	if (!req) {
   22e6e:	4603      	mov	r3, r0
   22e70:	b108      	cbz	r0, 22e76 <gatt_req_alloc+0x18>
	req->func = func;
   22e72:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   22e74:	60c4      	str	r4, [r0, #12]
}
   22e76:	4618      	mov	r0, r3
   22e78:	bd38      	pop	{r3, r4, r5, pc}

00022e7a <clear_ccc_cfg>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22e7a:	2300      	movs	r3, #0
   22e7c:	f8c0 3001 	str.w	r3, [r0, #1]
   22e80:	6043      	str	r3, [r0, #4]
	cfg->id = 0U;
   22e82:	7003      	strb	r3, [r0, #0]
	cfg->value = 0U;
   22e84:	8103      	strh	r3, [r0, #8]
}
   22e86:	4770      	bx	lr

00022e88 <clear_cf_cfg>:
{
   22e88:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22e8a:	2300      	movs	r3, #0
   22e8c:	9300      	str	r3, [sp, #0]
   22e8e:	f8cd 3003 	str.w	r3, [sp, #3]
   22e92:	f8c0 3001 	str.w	r3, [r0, #1]
   22e96:	6043      	str	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   22e98:	7203      	strb	r3, [r0, #8]
	atomic_set(cfg->flags, 0);
   22e9a:	300c      	adds	r0, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22e9c:	f3bf 8f5b 	dmb	ish
   22ea0:	e850 2f00 	ldrex	r2, [r0]
   22ea4:	e840 3100 	strex	r1, r3, [r0]
   22ea8:	2900      	cmp	r1, #0
   22eaa:	d1f9      	bne.n	22ea0 <clear_cf_cfg+0x18>
   22eac:	f3bf 8f5b 	dmb	ish
}
   22eb0:	b002      	add	sp, #8
   22eb2:	4770      	bx	lr

00022eb4 <cf_write>:
{
   22eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22eb8:	461d      	mov	r5, r3
   22eba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   22ebe:	2b01      	cmp	r3, #1
   22ec0:	d830      	bhi.n	22f24 <cf_write+0x70>
   22ec2:	4606      	mov	r6, r0
   22ec4:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   22ec6:	462f      	mov	r7, r5
   22ec8:	442b      	add	r3, r5
   22eca:	2b01      	cmp	r3, #1
   22ecc:	d82d      	bhi.n	22f2a <cf_write+0x76>
	cfg = find_cf_cfg(conn);
   22ece:	f7f4 f8bf 	bl	17050 <find_cf_cfg>
	if (!cfg) {
   22ed2:	4604      	mov	r4, r0
   22ed4:	b310      	cbz	r0, 22f1c <cf_write+0x68>
	if (!cfg) {
   22ed6:	b35c      	cbz	r4, 22f30 <cf_write+0x7c>
	if (!cf_set_value(cfg, value, len)) {
   22ed8:	462a      	mov	r2, r5
   22eda:	4641      	mov	r1, r8
   22edc:	4620      	mov	r0, r4
   22ede:	f7ff fe2a 	bl	22b36 <cf_set_value>
   22ee2:	b340      	cbz	r0, 22f36 <cf_write+0x82>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   22ee4:	4633      	mov	r3, r6
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22ee6:	f853 2f88 	ldr.w	r2, [r3, #136]!
   22eea:	f8c4 2001 	str.w	r2, [r4, #1]
   22eee:	889a      	ldrh	r2, [r3, #4]
   22ef0:	799b      	ldrb	r3, [r3, #6]
   22ef2:	f8a4 2005 	strh.w	r2, [r4, #5]
   22ef6:	71e3      	strb	r3, [r4, #7]
	cfg->id = conn->id;
   22ef8:	7a33      	ldrb	r3, [r6, #8]
   22efa:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22efe:	f3bf 8f5b 	dmb	ish
   22f02:	e854 3f00 	ldrex	r3, [r4]
   22f06:	f043 0301 	orr.w	r3, r3, #1
   22f0a:	e844 3200 	strex	r2, r3, [r4]
   22f0e:	2a00      	cmp	r2, #0
   22f10:	d1f7      	bne.n	22f02 <cf_write+0x4e>
   22f12:	f3bf 8f5b 	dmb	ish
}
   22f16:	4638      	mov	r0, r7
   22f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   22f1c:	f7f4 f898 	bl	17050 <find_cf_cfg>
   22f20:	4604      	mov	r4, r0
   22f22:	e7d8      	b.n	22ed6 <cf_write+0x22>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22f24:	f06f 0706 	mvn.w	r7, #6
   22f28:	e7f5      	b.n	22f16 <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   22f2a:	f06f 070c 	mvn.w	r7, #12
   22f2e:	e7f2      	b.n	22f16 <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   22f30:	f06f 0710 	mvn.w	r7, #16
   22f34:	e7ef      	b.n	22f16 <cf_write+0x62>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   22f36:	f06f 0712 	mvn.w	r7, #18
   22f3a:	e7ec      	b.n	22f16 <cf_write+0x62>

00022f3c <remove_cf_cfg>:
{
   22f3c:	b570      	push	{r4, r5, r6, lr}
   22f3e:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   22f40:	f7f4 f886 	bl	17050 <find_cf_cfg>
	if (!cfg) {
   22f44:	b300      	cbz	r0, 22f88 <remove_cf_cfg+0x4c>
   22f46:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22f48:	f104 0688 	add.w	r6, r4, #136	; 0x88
   22f4c:	4631      	mov	r1, r6
   22f4e:	7a20      	ldrb	r0, [r4, #8]
   22f50:	f7fd ffeb 	bl	20f2a <bt_addr_le_is_bonded>
   22f54:	b918      	cbnz	r0, 22f5e <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   22f56:	4628      	mov	r0, r5
   22f58:	f7ff ff96 	bl	22e88 <clear_cf_cfg>
   22f5c:	e014      	b.n	22f88 <remove_cf_cfg+0x4c>
   22f5e:	6833      	ldr	r3, [r6, #0]
   22f60:	f8c5 3001 	str.w	r3, [r5, #1]
   22f64:	88b2      	ldrh	r2, [r6, #4]
   22f66:	79b3      	ldrb	r3, [r6, #6]
   22f68:	f8a5 2005 	strh.w	r2, [r5, #5]
   22f6c:	71eb      	strb	r3, [r5, #7]
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   22f6e:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22f70:	f3bf 8f5b 	dmb	ish
   22f74:	e855 3f00 	ldrex	r3, [r5]
   22f78:	f023 0302 	bic.w	r3, r3, #2
   22f7c:	e845 3200 	strex	r2, r3, [r5]
   22f80:	2a00      	cmp	r2, #0
   22f82:	d1f7      	bne.n	22f74 <remove_cf_cfg+0x38>
   22f84:	f3bf 8f5b 	dmb	ish
}
   22f88:	bd70      	pop	{r4, r5, r6, pc}

00022f8a <sc_save>:
{
   22f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f8e:	b082      	sub	sp, #8
   22f90:	4607      	mov	r7, r0
   22f92:	4688      	mov	r8, r1
   22f94:	4616      	mov	r6, r2
   22f96:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   22f98:	f7f4 f884 	bl	170a4 <find_sc_cfg>
	if (!cfg) {
   22f9c:	4604      	mov	r4, r0
   22f9e:	b170      	cbz	r0, 22fbe <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   22fa0:	8923      	ldrh	r3, [r4, #8]
   22fa2:	b90b      	cbnz	r3, 22fa8 <sc_save+0x1e>
   22fa4:	8963      	ldrh	r3, [r4, #10]
   22fa6:	b30b      	cbz	r3, 22fec <sc_save+0x62>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   22fa8:	462b      	mov	r3, r5
   22faa:	4632      	mov	r2, r6
   22fac:	f104 010a 	add.w	r1, r4, #10
   22fb0:	f104 0008 	add.w	r0, r4, #8
   22fb4:	f7ff fdaa 	bl	22b0c <update_range>
}
   22fb8:	b002      	add	sp, #8
   22fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   22fbe:	9000      	str	r0, [sp, #0]
   22fc0:	f8cd 0003 	str.w	r0, [sp, #3]
   22fc4:	4669      	mov	r1, sp
   22fc6:	f7f4 f86d 	bl	170a4 <find_sc_cfg>
		if (!cfg) {
   22fca:	4604      	mov	r4, r0
   22fcc:	2800      	cmp	r0, #0
   22fce:	d0f3      	beq.n	22fb8 <sc_save+0x2e>
		cfg->id = id;
   22fd0:	4603      	mov	r3, r0
   22fd2:	f803 7b01 	strb.w	r7, [r3], #1
   22fd6:	f8d8 2000 	ldr.w	r2, [r8]
   22fda:	f8c0 2001 	str.w	r2, [r0, #1]
   22fde:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   22fe2:	f898 2006 	ldrb.w	r2, [r8, #6]
   22fe6:	8099      	strh	r1, [r3, #4]
   22fe8:	719a      	strb	r2, [r3, #6]
   22fea:	e7d9      	b.n	22fa0 <sc_save+0x16>
		cfg->data.start = start;
   22fec:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   22fee:	8165      	strh	r5, [r4, #10]
		goto done;
   22ff0:	e7e2      	b.n	22fb8 <sc_save+0x2e>

00022ff2 <sc_ccc_cfg_write>:
{
   22ff2:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22ff4:	2a02      	cmp	r2, #2
   22ff6:	d003      	beq.n	23000 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   22ff8:	f7ff fec8 	bl	22d8c <sc_clear>
}
   22ffc:	2002      	movs	r0, #2
   22ffe:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   23000:	2300      	movs	r3, #0
   23002:	461a      	mov	r2, r3
   23004:	f100 0188 	add.w	r1, r0, #136	; 0x88
   23008:	7a00      	ldrb	r0, [r0, #8]
   2300a:	f7ff ffbe 	bl	22f8a <sc_save>
   2300e:	e7f5      	b.n	22ffc <sc_ccc_cfg_write+0xa>

00023010 <bt_gatt_attr_write_ccc>:
{
   23010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23014:	461c      	mov	r4, r3
   23016:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2301a:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   2301c:	2b00      	cmp	r3, #0
   2301e:	d147      	bne.n	230b0 <bt_gatt_attr_write_ccc+0xa0>
   23020:	4681      	mov	r9, r0
   23022:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   23024:	1e63      	subs	r3, r4, #1
   23026:	b29b      	uxth	r3, r3
   23028:	2b01      	cmp	r3, #1
   2302a:	d844      	bhi.n	230b6 <bt_gatt_attr_write_ccc+0xa6>
	if (len < sizeof(uint16_t)) {
   2302c:	2c01      	cmp	r4, #1
   2302e:	d91d      	bls.n	2306c <bt_gatt_attr_write_ccc+0x5c>
   23030:	7853      	ldrb	r3, [r2, #1]
   23032:	7815      	ldrb	r5, [r2, #0]
   23034:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   23038:	4639      	mov	r1, r7
   2303a:	4648      	mov	r0, r9
   2303c:	f7ff fe6d 	bl	22d1a <find_ccc_cfg>
	if (!cfg) {
   23040:	4680      	mov	r8, r0
   23042:	b1a8      	cbz	r0, 23070 <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   23044:	693b      	ldr	r3, [r7, #16]
   23046:	b143      	cbz	r3, 2305a <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   23048:	462a      	mov	r2, r5
   2304a:	4631      	mov	r1, r6
   2304c:	4648      	mov	r0, r9
   2304e:	4798      	blx	r3
		if (write < 0) {
   23050:	2800      	cmp	r0, #0
   23052:	db09      	blt.n	23068 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   23054:	3801      	subs	r0, #1
   23056:	2801      	cmp	r0, #1
   23058:	d833      	bhi.n	230c2 <bt_gatt_attr_write_ccc+0xb2>
	cfg->value = value;
   2305a:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   2305e:	897b      	ldrh	r3, [r7, #10]
   23060:	429d      	cmp	r5, r3
   23062:	d11c      	bne.n	2309e <bt_gatt_attr_write_ccc+0x8e>
	if (!value) {
   23064:	b305      	cbz	r5, 230a8 <bt_gatt_attr_write_ccc+0x98>
	return len;
   23066:	4620      	mov	r0, r4
}
   23068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   2306c:	7815      	ldrb	r5, [r2, #0]
   2306e:	e7e3      	b.n	23038 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   23070:	b90d      	cbnz	r5, 23076 <bt_gatt_attr_write_ccc+0x66>
			return len;
   23072:	4620      	mov	r0, r4
   23074:	e7f8      	b.n	23068 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   23076:	4639      	mov	r1, r7
   23078:	2000      	movs	r0, #0
   2307a:	f7ff fe4e 	bl	22d1a <find_ccc_cfg>
		if (!cfg) {
   2307e:	4680      	mov	r8, r0
   23080:	b1e0      	cbz	r0, 230bc <bt_gatt_attr_write_ccc+0xac>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   23082:	464b      	mov	r3, r9
   23084:	f853 2f88 	ldr.w	r2, [r3, #136]!
   23088:	f8c0 2001 	str.w	r2, [r0, #1]
   2308c:	889a      	ldrh	r2, [r3, #4]
   2308e:	799b      	ldrb	r3, [r3, #6]
   23090:	f8a0 2005 	strh.w	r2, [r0, #5]
   23094:	71c3      	strb	r3, [r0, #7]
		cfg->id = conn->id;
   23096:	f899 3008 	ldrb.w	r3, [r9, #8]
   2309a:	7003      	strb	r3, [r0, #0]
   2309c:	e7d2      	b.n	23044 <bt_gatt_attr_write_ccc+0x34>
		gatt_ccc_changed(attr, ccc);
   2309e:	4639      	mov	r1, r7
   230a0:	4630      	mov	r0, r6
   230a2:	f7ff fd79 	bl	22b98 <gatt_ccc_changed>
   230a6:	e7dd      	b.n	23064 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   230a8:	4640      	mov	r0, r8
   230aa:	f7ff fee6 	bl	22e7a <clear_ccc_cfg>
   230ae:	e7da      	b.n	23066 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   230b0:	f06f 0006 	mvn.w	r0, #6
   230b4:	e7d8      	b.n	23068 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   230b6:	f06f 000c 	mvn.w	r0, #12
   230ba:	e7d5      	b.n	23068 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   230bc:	f06f 0010 	mvn.w	r0, #16
   230c0:	e7d2      	b.n	23068 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   230c2:	f06f 000d 	mvn.w	r0, #13
   230c6:	e7cf      	b.n	23068 <bt_gatt_attr_write_ccc+0x58>

000230c8 <bt_gatt_attr_read>:
{
   230c8:	b510      	push	{r4, lr}
   230ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   230ce:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   230d2:	428c      	cmp	r4, r1
   230d4:	d30c      	bcc.n	230f0 <bt_gatt_attr_read+0x28>
   230d6:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   230d8:	1a64      	subs	r4, r4, r1
   230da:	42a3      	cmp	r3, r4
   230dc:	bfa8      	it	ge
   230de:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   230e0:	b29c      	uxth	r4, r3
   230e2:	4622      	mov	r2, r4
   230e4:	9b03      	ldr	r3, [sp, #12]
   230e6:	4419      	add	r1, r3
   230e8:	f002 fb1d 	bl	25726 <memcpy>
	return len;
   230ec:	4620      	mov	r0, r4
}
   230ee:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   230f0:	f06f 0006 	mvn.w	r0, #6
   230f4:	e7fb      	b.n	230ee <bt_gatt_attr_read+0x26>

000230f6 <read_ppcp>:
{
   230f6:	b510      	push	{r4, lr}
   230f8:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   230fa:	2418      	movs	r4, #24
   230fc:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   23100:	2428      	movs	r4, #40	; 0x28
   23102:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   23106:	2400      	movs	r4, #0
   23108:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2310c:	242a      	movs	r4, #42	; 0x2a
   2310e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   23112:	2408      	movs	r4, #8
   23114:	9402      	str	r4, [sp, #8]
   23116:	ac04      	add	r4, sp, #16
   23118:	9401      	str	r4, [sp, #4]
   2311a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2311e:	9400      	str	r4, [sp, #0]
   23120:	f7ff ffd2 	bl	230c8 <bt_gatt_attr_read>
}
   23124:	b006      	add	sp, #24
   23126:	bd10      	pop	{r4, pc}

00023128 <read_appearance>:
{
   23128:	b510      	push	{r4, lr}
   2312a:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2312c:	2400      	movs	r4, #0
   2312e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   23132:	2402      	movs	r4, #2
   23134:	9402      	str	r4, [sp, #8]
   23136:	f10d 0416 	add.w	r4, sp, #22
   2313a:	9401      	str	r4, [sp, #4]
   2313c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   23140:	9400      	str	r4, [sp, #0]
   23142:	f7ff ffc1 	bl	230c8 <bt_gatt_attr_read>
}
   23146:	b006      	add	sp, #24
   23148:	bd10      	pop	{r4, pc}

0002314a <read_name>:
{
   2314a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2314e:	b084      	sub	sp, #16
   23150:	4604      	mov	r4, r0
   23152:	460d      	mov	r5, r1
   23154:	4616      	mov	r6, r2
   23156:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   23158:	f7f2 f8e8 	bl	1532c <bt_get_name>
   2315c:	4680      	mov	r8, r0
				 strlen(name));
   2315e:	f7e9 f93f 	bl	c3e0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   23162:	b280      	uxth	r0, r0
   23164:	9002      	str	r0, [sp, #8]
   23166:	f8cd 8004 	str.w	r8, [sp, #4]
   2316a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2316e:	9300      	str	r3, [sp, #0]
   23170:	463b      	mov	r3, r7
   23172:	4632      	mov	r2, r6
   23174:	4629      	mov	r1, r5
   23176:	4620      	mov	r0, r4
   23178:	f7ff ffa6 	bl	230c8 <bt_gatt_attr_read>
}
   2317c:	b004      	add	sp, #16
   2317e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023182 <cf_read>:
{
   23182:	b5f0      	push	{r4, r5, r6, r7, lr}
   23184:	b087      	sub	sp, #28
   23186:	4604      	mov	r4, r0
   23188:	460d      	mov	r5, r1
   2318a:	4616      	mov	r6, r2
   2318c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2318e:	2300      	movs	r3, #0
   23190:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   23194:	f7f3 ff5c 	bl	17050 <find_cf_cfg>
	if (cfg) {
   23198:	b110      	cbz	r0, 231a0 <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   2319a:	7a03      	ldrb	r3, [r0, #8]
   2319c:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   231a0:	2301      	movs	r3, #1
   231a2:	9302      	str	r3, [sp, #8]
   231a4:	ab05      	add	r3, sp, #20
   231a6:	9301      	str	r3, [sp, #4]
   231a8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   231ac:	9300      	str	r3, [sp, #0]
   231ae:	463b      	mov	r3, r7
   231b0:	4632      	mov	r2, r6
   231b2:	4629      	mov	r1, r5
   231b4:	4620      	mov	r0, r4
   231b6:	f7ff ff87 	bl	230c8 <bt_gatt_attr_read>
}
   231ba:	b007      	add	sp, #28
   231bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000231be <bt_gatt_attr_read_service>:
{
   231be:	b570      	push	{r4, r5, r6, lr}
   231c0:	b086      	sub	sp, #24
   231c2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   231c6:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   231c8:	7826      	ldrb	r6, [r4, #0]
   231ca:	b146      	cbz	r6, 231de <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   231cc:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   231ce:	2610      	movs	r6, #16
   231d0:	9602      	str	r6, [sp, #8]
   231d2:	9401      	str	r4, [sp, #4]
   231d4:	9500      	str	r5, [sp, #0]
   231d6:	f7ff ff77 	bl	230c8 <bt_gatt_attr_read>
}
   231da:	b006      	add	sp, #24
   231dc:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   231de:	8864      	ldrh	r4, [r4, #2]
   231e0:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   231e4:	2402      	movs	r4, #2
   231e6:	9402      	str	r4, [sp, #8]
   231e8:	f10d 0416 	add.w	r4, sp, #22
   231ec:	9401      	str	r4, [sp, #4]
   231ee:	9500      	str	r5, [sp, #0]
   231f0:	f7ff ff6a 	bl	230c8 <bt_gatt_attr_read>
   231f4:	e7f1      	b.n	231da <bt_gatt_attr_read_service+0x1c>

000231f6 <bt_gatt_attr_read_ccc>:
{
   231f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   231f8:	b087      	sub	sp, #28
   231fa:	4605      	mov	r5, r0
   231fc:	460c      	mov	r4, r1
   231fe:	4616      	mov	r6, r2
   23200:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   23202:	68c9      	ldr	r1, [r1, #12]
   23204:	f7ff fd89 	bl	22d1a <find_ccc_cfg>
	if (cfg) {
   23208:	b190      	cbz	r0, 23230 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   2320a:	8903      	ldrh	r3, [r0, #8]
   2320c:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   23210:	2302      	movs	r3, #2
   23212:	9302      	str	r3, [sp, #8]
   23214:	f10d 0316 	add.w	r3, sp, #22
   23218:	9301      	str	r3, [sp, #4]
   2321a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2321e:	9300      	str	r3, [sp, #0]
   23220:	463b      	mov	r3, r7
   23222:	4632      	mov	r2, r6
   23224:	4621      	mov	r1, r4
   23226:	4628      	mov	r0, r5
   23228:	f7ff ff4e 	bl	230c8 <bt_gatt_attr_read>
}
   2322c:	b007      	add	sp, #28
   2322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   23230:	2300      	movs	r3, #0
   23232:	f8ad 3016 	strh.w	r3, [sp, #22]
   23236:	e7eb      	b.n	23210 <bt_gatt_attr_read_ccc+0x1a>

00023238 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23238:	b1b8      	cbz	r0, 2326a <bt_gatt_attr_value_handle+0x32>
{
   2323a:	b510      	push	{r4, lr}
   2323c:	b082      	sub	sp, #8
   2323e:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23240:	2300      	movs	r3, #0
   23242:	f88d 3004 	strb.w	r3, [sp, #4]
   23246:	f642 0303 	movw	r3, #10243	; 0x2803
   2324a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2324e:	a901      	add	r1, sp, #4
   23250:	6800      	ldr	r0, [r0, #0]
   23252:	f7fd fb03 	bl	2085c <bt_uuid_cmp>
   23256:	b950      	cbnz	r0, 2326e <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   23258:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   2325a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2325c:	b940      	cbnz	r0, 23270 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2325e:	4620      	mov	r0, r4
   23260:	f7f4 f81c 	bl	1729c <bt_gatt_attr_get_handle>
   23264:	3001      	adds	r0, #1
   23266:	b280      	uxth	r0, r0
   23268:	e002      	b.n	23270 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   2326a:	2000      	movs	r0, #0
}
   2326c:	4770      	bx	lr
	uint16_t handle = 0;
   2326e:	2000      	movs	r0, #0
}
   23270:	b002      	add	sp, #8
   23272:	bd10      	pop	{r4, pc}

00023274 <bt_gatt_attr_read_chrc>:
{
   23274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23278:	b08a      	sub	sp, #40	; 0x28
   2327a:	4605      	mov	r5, r0
   2327c:	460c      	mov	r4, r1
   2327e:	4616      	mov	r6, r2
   23280:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   23282:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   23286:	f898 3006 	ldrb.w	r3, [r8, #6]
   2328a:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2328e:	4608      	mov	r0, r1
   23290:	f7ff ffd2 	bl	23238 <bt_gatt_attr_value_handle>
   23294:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   23298:	f8d8 1000 	ldr.w	r1, [r8]
   2329c:	780b      	ldrb	r3, [r1, #0]
   2329e:	b993      	cbnz	r3, 232c6 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   232a0:	884b      	ldrh	r3, [r1, #2]
   232a2:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   232a6:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   232a8:	9302      	str	r3, [sp, #8]
   232aa:	ab05      	add	r3, sp, #20
   232ac:	9301      	str	r3, [sp, #4]
   232ae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   232b2:	9300      	str	r3, [sp, #0]
   232b4:	463b      	mov	r3, r7
   232b6:	4632      	mov	r2, r6
   232b8:	4621      	mov	r1, r4
   232ba:	4628      	mov	r0, r5
   232bc:	f7ff ff04 	bl	230c8 <bt_gatt_attr_read>
}
   232c0:	b00a      	add	sp, #40	; 0x28
   232c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   232c6:	f851 cf01 	ldr.w	ip, [r1, #1]!
   232ca:	6848      	ldr	r0, [r1, #4]
   232cc:	688a      	ldr	r2, [r1, #8]
   232ce:	68cb      	ldr	r3, [r1, #12]
   232d0:	f8cd c017 	str.w	ip, [sp, #23]
   232d4:	f8cd 001b 	str.w	r0, [sp, #27]
   232d8:	f8cd 201f 	str.w	r2, [sp, #31]
   232dc:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   232e0:	2313      	movs	r3, #19
   232e2:	e7e1      	b.n	232a8 <bt_gatt_attr_read_chrc+0x34>

000232e4 <db_hash_process>:
{
   232e4:	b508      	push	{r3, lr}
	db_hash_gen(true);
   232e6:	2001      	movs	r0, #1
   232e8:	f7f4 f852 	bl	17390 <db_hash_gen>
}
   232ec:	bd08      	pop	{r3, pc}

000232ee <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   232ee:	f012 0f01 	tst.w	r2, #1
   232f2:	d005      	beq.n	23300 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   232f4:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   232f6:	f013 0f15 	tst.w	r3, #21
   232fa:	d01a      	beq.n	23332 <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   232fc:	684b      	ldr	r3, [r1, #4]
   232fe:	b1d3      	cbz	r3, 23336 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   23300:	f012 0f02 	tst.w	r2, #2
   23304:	d005      	beq.n	23312 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23306:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   23308:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   2330c:	d015      	beq.n	2333a <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2330e:	688b      	ldr	r3, [r1, #8]
   23310:	b1ab      	cbz	r3, 2333e <bt_gatt_check_perm+0x50>
{
   23312:	b510      	push	{r4, lr}
	mask &= attr->perm;
   23314:	7c8c      	ldrb	r4, [r1, #18]
   23316:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   23318:	f014 0f30 	tst.w	r4, #48	; 0x30
   2331c:	d103      	bne.n	23326 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2331e:	f014 000c 	ands.w	r0, r4, #12
   23322:	d10e      	bne.n	23342 <bt_gatt_check_perm+0x54>
}
   23324:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   23326:	f7fe faac 	bl	21882 <bt_conn_get_security>
   2332a:	2802      	cmp	r0, #2
   2332c:	d8f7      	bhi.n	2331e <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   2332e:	2005      	movs	r0, #5
   23330:	e7f8      	b.n	23324 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   23332:	2002      	movs	r0, #2
   23334:	4770      	bx	lr
   23336:	2002      	movs	r0, #2
   23338:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2333a:	2003      	movs	r0, #3
   2333c:	4770      	bx	lr
   2333e:	2003      	movs	r0, #3
}
   23340:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   23342:	200f      	movs	r0, #15
   23344:	e7ee      	b.n	23324 <bt_gatt_check_perm+0x36>

00023346 <gatt_notify>:
{
   23346:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2334a:	4606      	mov	r6, r0
   2334c:	460f      	mov	r7, r1
   2334e:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   23350:	2214      	movs	r2, #20
   23352:	6861      	ldr	r1, [r4, #4]
   23354:	f7ff ffcb 	bl	232ee <bt_gatt_check_perm>
   23358:	bb08      	cbnz	r0, 2339e <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   2335a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2335c:	3202      	adds	r2, #2
   2335e:	211b      	movs	r1, #27
   23360:	4630      	mov	r0, r6
   23362:	f7ff fa08 	bl	22776 <bt_att_create_pdu>
	if (!buf) {
   23366:	4680      	mov	r8, r0
   23368:	b1e0      	cbz	r0, 233a4 <gatt_notify+0x5e>
	return net_buf_simple_add(&buf->b, len);
   2336a:	f100 0908 	add.w	r9, r0, #8
   2336e:	2102      	movs	r1, #2
   23370:	4648      	mov	r0, r9
   23372:	f000 f9ea 	bl	2374a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   23376:	4605      	mov	r5, r0
   23378:	f825 7b02 	strh.w	r7, [r5], #2
   2337c:	89a1      	ldrh	r1, [r4, #12]
   2337e:	4648      	mov	r0, r9
   23380:	f000 f9e3 	bl	2374a <net_buf_simple_add>
   23384:	89a2      	ldrh	r2, [r4, #12]
   23386:	68a1      	ldr	r1, [r4, #8]
   23388:	4628      	mov	r0, r5
   2338a:	f002 f9cc 	bl	25726 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   2338e:	6963      	ldr	r3, [r4, #20]
   23390:	6922      	ldr	r2, [r4, #16]
   23392:	4641      	mov	r1, r8
   23394:	4630      	mov	r0, r6
   23396:	f7ff fb7d 	bl	22a94 <bt_att_send>
}
   2339a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EPERM;
   2339e:	f04f 30ff 	mov.w	r0, #4294967295
   233a2:	e7fa      	b.n	2339a <gatt_notify+0x54>
		return -ENOMEM;
   233a4:	f06f 000b 	mvn.w	r0, #11
   233a8:	e7f7      	b.n	2339a <gatt_notify+0x54>

000233aa <bt_gatt_change_aware>:
{
   233aa:	b510      	push	{r4, lr}
   233ac:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   233ae:	f7f3 fe4f 	bl	17050 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   233b2:	2800      	cmp	r0, #0
   233b4:	d042      	beq.n	2343c <bt_gatt_change_aware+0x92>
   233b6:	7a02      	ldrb	r2, [r0, #8]
   233b8:	f012 0f01 	tst.w	r2, #1
   233bc:	d101      	bne.n	233c2 <bt_gatt_change_aware+0x18>
		return true;
   233be:	2001      	movs	r0, #1
}
   233c0:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   233c2:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   233c6:	f3bf 8f5b 	dmb	ish
   233ca:	68c2      	ldr	r2, [r0, #12]
   233cc:	f3bf 8f5b 	dmb	ish
   233d0:	f012 0f01 	tst.w	r2, #1
   233d4:	d134      	bne.n	23440 <bt_gatt_change_aware+0x96>
	if (!req) {
   233d6:	b90c      	cbnz	r4, 233dc <bt_gatt_change_aware+0x32>
		return false;
   233d8:	4620      	mov	r0, r4
   233da:	e7f1      	b.n	233c0 <bt_gatt_change_aware+0x16>
   233dc:	f3bf 8f5b 	dmb	ish
   233e0:	68c3      	ldr	r3, [r0, #12]
   233e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   233e6:	f013 0f02 	tst.w	r3, #2
   233ea:	d10d      	bne.n	23408 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   233ec:	f3bf 8f5b 	dmb	ish
   233f0:	e851 3f00 	ldrex	r3, [r1]
   233f4:	f043 0302 	orr.w	r3, r3, #2
   233f8:	e841 3200 	strex	r2, r3, [r1]
   233fc:	2a00      	cmp	r2, #0
   233fe:	d1f7      	bne.n	233f0 <bt_gatt_change_aware+0x46>
   23400:	f3bf 8f5b 	dmb	ish
	return false;
   23404:	2000      	movs	r0, #0
   23406:	e7db      	b.n	233c0 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23408:	f3bf 8f5b 	dmb	ish
   2340c:	e851 3f00 	ldrex	r3, [r1]
   23410:	f023 0302 	bic.w	r3, r3, #2
   23414:	e841 3200 	strex	r2, r3, [r1]
   23418:	2a00      	cmp	r2, #0
   2341a:	d1f7      	bne.n	2340c <bt_gatt_change_aware+0x62>
   2341c:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23420:	f3bf 8f5b 	dmb	ish
   23424:	e851 3f00 	ldrex	r3, [r1]
   23428:	f043 0301 	orr.w	r3, r3, #1
   2342c:	e841 3200 	strex	r2, r3, [r1]
   23430:	2a00      	cmp	r2, #0
   23432:	d1f7      	bne.n	23424 <bt_gatt_change_aware+0x7a>
   23434:	f3bf 8f5b 	dmb	ish
		return true;
   23438:	4620      	mov	r0, r4
   2343a:	e7c1      	b.n	233c0 <bt_gatt_change_aware+0x16>
		return true;
   2343c:	2001      	movs	r0, #1
   2343e:	e7bf      	b.n	233c0 <bt_gatt_change_aware+0x16>
		return true;
   23440:	2001      	movs	r0, #1
   23442:	e7bd      	b.n	233c0 <bt_gatt_change_aware+0x16>

00023444 <bt_smp_recv>:
{
   23444:	b5f0      	push	{r4, r5, r6, r7, lr}
   23446:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   23448:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2344a:	f04f 32ff 	mov.w	r2, #4294967295
   2344e:	f04f 33ff 	mov.w	r3, #4294967295
   23452:	2100      	movs	r1, #0
   23454:	4608      	mov	r0, r1
   23456:	f7fe fb5a 	bl	21b0e <bt_l2cap_create_pdu_timeout>
   2345a:	4604      	mov	r4, r0
   2345c:	f100 0608 	add.w	r6, r0, #8
   23460:	2101      	movs	r1, #1
   23462:	4630      	mov	r0, r6
   23464:	f000 f971 	bl	2374a <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   23468:	2505      	movs	r5, #5
   2346a:	7005      	strb	r5, [r0, #0]
   2346c:	2101      	movs	r1, #1
   2346e:	4630      	mov	r0, r6
   23470:	f000 f96b 	bl	2374a <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   23474:	7005      	strb	r5, [r0, #0]
   23476:	2300      	movs	r3, #0
   23478:	9300      	str	r3, [sp, #0]
   2347a:	4622      	mov	r2, r4
   2347c:	2106      	movs	r1, #6
   2347e:	4638      	mov	r0, r7
   23480:	f7fe fb60 	bl	21b44 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   23484:	b910      	cbnz	r0, 2348c <bt_smp_recv+0x48>
}
   23486:	2000      	movs	r0, #0
   23488:	b003      	add	sp, #12
   2348a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   2348c:	4620      	mov	r0, r4
   2348e:	f000 f912 	bl	236b6 <net_buf_unref>
   23492:	e7f8      	b.n	23486 <bt_smp_recv+0x42>

00023494 <bt_smp_sign>:
}
   23494:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23498:	4770      	bx	lr

0002349a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2349a:	2000      	movs	r0, #0
   2349c:	4770      	bx	lr

0002349e <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   2349e:	4770      	bx	lr

000234a0 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   234a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   234a4:	4604      	mov	r4, r0
   234a6:	460d      	mov	r5, r1
   234a8:	4617      	mov	r7, r2
   234aa:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   234ac:	7980      	ldrb	r0, [r0, #6]
   234ae:	f7f4 fae5 	bl	17a7c <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   234b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   234b4:	681b      	ldr	r3, [r3, #0]
   234b6:	f8d3 8000 	ldr.w	r8, [r3]
   234ba:	463a      	mov	r2, r7
   234bc:	4633      	mov	r3, r6
   234be:	4629      	mov	r1, r5
   234c0:	4620      	mov	r0, r4
   234c2:	47c0      	blx	r8
}
   234c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000234c8 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   234c8:	b538      	push	{r3, r4, r5, lr}
   234ca:	4604      	mov	r4, r0
   234cc:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   234ce:	7980      	ldrb	r0, [r0, #6]
   234d0:	f7f4 fad4 	bl	17a7c <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   234d4:	7963      	ldrb	r3, [r4, #5]
   234d6:	f013 0f02 	tst.w	r3, #2
   234da:	d105      	bne.n	234e8 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   234dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   234de:	681b      	ldr	r3, [r3, #0]
   234e0:	689b      	ldr	r3, [r3, #8]
   234e2:	4629      	mov	r1, r5
   234e4:	4620      	mov	r0, r4
   234e6:	4798      	blx	r3
}
   234e8:	bd38      	pop	{r3, r4, r5, pc}

000234ea <net_buf_id>:
{
   234ea:	b510      	push	{r4, lr}
   234ec:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   234ee:	7980      	ldrb	r0, [r0, #6]
   234f0:	f7f4 fac4 	bl	17a7c <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   234f4:	7f03      	ldrb	r3, [r0, #28]
   234f6:	3317      	adds	r3, #23
   234f8:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   234fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   234fe:	1a20      	subs	r0, r4, r0
}
   23500:	fbb0 f0f3 	udiv	r0, r0, r3
   23504:	bd10      	pop	{r4, pc}

00023506 <fixed_data_alloc>:
{
   23506:	b570      	push	{r4, r5, r6, lr}
   23508:	4604      	mov	r4, r0
   2350a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2350c:	7980      	ldrb	r0, [r0, #6]
   2350e:	f7f4 fab5 	bl	17a7c <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23512:	6a43      	ldr	r3, [r0, #36]	; 0x24
   23514:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   23516:	682a      	ldr	r2, [r5, #0]
   23518:	6819      	ldr	r1, [r3, #0]
   2351a:	428a      	cmp	r2, r1
   2351c:	bf28      	it	cs
   2351e:	460a      	movcs	r2, r1
   23520:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   23522:	685d      	ldr	r5, [r3, #4]
   23524:	681e      	ldr	r6, [r3, #0]
   23526:	4620      	mov	r0, r4
   23528:	f7ff ffdf 	bl	234ea <net_buf_id>
}
   2352c:	fb00 5006 	mla	r0, r0, r6, r5
   23530:	bd70      	pop	{r4, r5, r6, pc}

00023532 <net_buf_reset>:
	buf->len  = 0U;
   23532:	2300      	movs	r3, #0
   23534:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   23536:	6903      	ldr	r3, [r0, #16]
   23538:	6083      	str	r3, [r0, #8]
}
   2353a:	4770      	bx	lr

0002353c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23540:	b083      	sub	sp, #12
   23542:	4605      	mov	r5, r0
   23544:	9101      	str	r1, [sp, #4]
   23546:	4616      	mov	r6, r2
   23548:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2354a:	4610      	mov	r0, r2
   2354c:	4619      	mov	r1, r3
   2354e:	f001 ffce 	bl	254ee <sys_clock_timeout_end_calc>
   23552:	4682      	mov	sl, r0
   23554:	9100      	str	r1, [sp, #0]
   23556:	f04f 0340 	mov.w	r3, #64	; 0x40
   2355a:	f3ef 8211 	mrs	r2, BASEPRI
   2355e:	f383 8812 	msr	BASEPRI_MAX, r3
   23562:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   23566:	8b6b      	ldrh	r3, [r5, #26]
   23568:	2b00      	cmp	r3, #0
   2356a:	d042      	beq.n	235f2 <net_buf_alloc_len+0xb6>
   2356c:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2356e:	8b2a      	ldrh	r2, [r5, #24]
   23570:	4293      	cmp	r3, r2
   23572:	d20b      	bcs.n	2358c <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   23574:	2200      	movs	r2, #0
   23576:	2300      	movs	r3, #0
   23578:	4628      	mov	r0, r5
   2357a:	f7f7 fc47 	bl	1ae0c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2357e:	4604      	mov	r4, r0
   23580:	b120      	cbz	r0, 2358c <net_buf_alloc_len+0x50>
	__asm__ volatile(
   23582:	f38b 8811 	msr	BASEPRI, fp
   23586:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   2358a:	e015      	b.n	235b8 <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   2358c:	8b6a      	ldrh	r2, [r5, #26]
   2358e:	1e53      	subs	r3, r2, #1
   23590:	836b      	strh	r3, [r5, #26]
   23592:	f38b 8811 	msr	BASEPRI, fp
   23596:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2359a:	7f2c      	ldrb	r4, [r5, #28]
   2359c:	3417      	adds	r4, #23
   2359e:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   235a2:	8b2b      	ldrh	r3, [r5, #24]
   235a4:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   235a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   235a8:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   235ac:	4628      	mov	r0, r5
   235ae:	f7f4 fa59 	bl	17a64 <pool_id>
   235b2:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   235b4:	7f2b      	ldrb	r3, [r5, #28]
   235b6:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   235b8:	9b01      	ldr	r3, [sp, #4]
   235ba:	2b00      	cmp	r3, #0
   235bc:	d038      	beq.n	23630 <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   235be:	ea56 0307 	orrs.w	r3, r6, r7
   235c2:	d005      	beq.n	235d0 <net_buf_alloc_len+0x94>
   235c4:	f1b7 3fff 	cmp.w	r7, #4294967295
   235c8:	bf08      	it	eq
   235ca:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   235ce:	d11d      	bne.n	2360c <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   235d0:	4632      	mov	r2, r6
   235d2:	463b      	mov	r3, r7
   235d4:	a901      	add	r1, sp, #4
   235d6:	4620      	mov	r0, r4
   235d8:	f7ff ff62 	bl	234a0 <data_alloc>
   235dc:	4605      	mov	r5, r0
   235de:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   235e0:	bb40      	cbnz	r0, 23634 <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   235e2:	79a0      	ldrb	r0, [r4, #6]
   235e4:	f7f4 fa4a 	bl	17a7c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   235e8:	4621      	mov	r1, r4
   235ea:	f001 fbd2 	bl	24d92 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   235ee:	462c      	mov	r4, r5
}
   235f0:	e02a      	b.n	23648 <net_buf_alloc_len+0x10c>
   235f2:	f382 8811 	msr	BASEPRI, r2
   235f6:	f3bf 8f6f 	isb	sy
   235fa:	4632      	mov	r2, r6
   235fc:	463b      	mov	r3, r7
   235fe:	4628      	mov	r0, r5
   23600:	f7f7 fc04 	bl	1ae0c <z_impl_k_queue_get>
	if (!buf) {
   23604:	4604      	mov	r4, r0
   23606:	2800      	cmp	r0, #0
   23608:	d1d6      	bne.n	235b8 <net_buf_alloc_len+0x7c>
   2360a:	e01d      	b.n	23648 <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   2360c:	f7f8 fbd4 	bl	1bdb8 <sys_clock_tick_get>
   23610:	ebba 0800 	subs.w	r8, sl, r0
   23614:	9b00      	ldr	r3, [sp, #0]
   23616:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   2361a:	f1b8 0f01 	cmp.w	r8, #1
   2361e:	f179 0300 	sbcs.w	r3, r9, #0
   23622:	db02      	blt.n	2362a <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   23624:	4646      	mov	r6, r8
   23626:	464f      	mov	r7, r9
   23628:	e7d2      	b.n	235d0 <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   2362a:	2600      	movs	r6, #0
   2362c:	2700      	movs	r7, #0
   2362e:	e7cf      	b.n	235d0 <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   23630:	2300      	movs	r3, #0
   23632:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   23634:	2301      	movs	r3, #1
   23636:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   23638:	2300      	movs	r3, #0
   2363a:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   2363c:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   2363e:	9b01      	ldr	r3, [sp, #4]
   23640:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   23642:	4620      	mov	r0, r4
   23644:	f7ff ff75 	bl	23532 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   23648:	4620      	mov	r0, r4
   2364a:	b003      	add	sp, #12
   2364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023650 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   23650:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23652:	6a41      	ldr	r1, [r0, #36]	; 0x24
   23654:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   23656:	6809      	ldr	r1, [r1, #0]
   23658:	f7ff ff70 	bl	2353c <net_buf_alloc_len>
}
   2365c:	bd08      	pop	{r3, pc}

0002365e <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2365e:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   23660:	4605      	mov	r5, r0
   23662:	f7f7 fbd3 	bl	1ae0c <z_impl_k_queue_get>
	if (!buf) {
   23666:	4606      	mov	r6, r0
   23668:	b190      	cbz	r0, 23690 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2366a:	4604      	mov	r4, r0
   2366c:	e00a      	b.n	23684 <net_buf_get+0x26>
   2366e:	2200      	movs	r2, #0
   23670:	2300      	movs	r3, #0
   23672:	4628      	mov	r0, r5
   23674:	f7f7 fbca 	bl	1ae0c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   23678:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   2367a:	7963      	ldrb	r3, [r4, #5]
   2367c:	f023 0301 	bic.w	r3, r3, #1
   23680:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23682:	4604      	mov	r4, r0
   23684:	7963      	ldrb	r3, [r4, #5]
   23686:	f013 0f01 	tst.w	r3, #1
   2368a:	d1f0      	bne.n	2366e <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   2368c:	2300      	movs	r3, #0
   2368e:	6023      	str	r3, [r4, #0]

	return buf;
}
   23690:	4630      	mov	r0, r6
   23692:	bd70      	pop	{r4, r5, r6, pc}

00023694 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   23694:	6883      	ldr	r3, [r0, #8]
   23696:	440b      	add	r3, r1
   23698:	6003      	str	r3, [r0, #0]
}
   2369a:	4770      	bx	lr

0002369c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2369c:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   2369e:	460a      	mov	r2, r1
   236a0:	6814      	ldr	r4, [r2, #0]
   236a2:	b12c      	cbz	r4, 236b0 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   236a4:	7953      	ldrb	r3, [r2, #5]
   236a6:	f043 0301 	orr.w	r3, r3, #1
   236aa:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   236ac:	4622      	mov	r2, r4
   236ae:	e7f7      	b.n	236a0 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   236b0:	f001 fb7a 	bl	24da8 <k_queue_append_list>
}
   236b4:	bd10      	pop	{r4, pc}

000236b6 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   236b6:	b538      	push	{r3, r4, r5, lr}
   236b8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   236ba:	e00f      	b.n	236dc <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   236bc:	4620      	mov	r0, r4
   236be:	f7ff ff03 	bl	234c8 <data_unref>
			buf->__buf = NULL;
   236c2:	2300      	movs	r3, #0
   236c4:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   236c6:	2300      	movs	r3, #0
   236c8:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   236ca:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   236cc:	79a0      	ldrb	r0, [r4, #6]
   236ce:	f7f4 f9d5 	bl	17a7c <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   236d2:	6a03      	ldr	r3, [r0, #32]
   236d4:	b16b      	cbz	r3, 236f2 <net_buf_unref+0x3c>
			pool->destroy(buf);
   236d6:	4620      	mov	r0, r4
   236d8:	4798      	blx	r3
{
   236da:	462c      	mov	r4, r5
	while (buf) {
   236dc:	b184      	cbz	r4, 23700 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   236de:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   236e0:	7923      	ldrb	r3, [r4, #4]
   236e2:	3b01      	subs	r3, #1
   236e4:	b2db      	uxtb	r3, r3
   236e6:	7123      	strb	r3, [r4, #4]
   236e8:	b953      	cbnz	r3, 23700 <net_buf_unref+0x4a>
		if (buf->__buf) {
   236ea:	6921      	ldr	r1, [r4, #16]
   236ec:	2900      	cmp	r1, #0
   236ee:	d1e5      	bne.n	236bc <net_buf_unref+0x6>
   236f0:	e7e9      	b.n	236c6 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   236f2:	79a0      	ldrb	r0, [r4, #6]
   236f4:	f7f4 f9c2 	bl	17a7c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   236f8:	4621      	mov	r1, r4
   236fa:	f001 fb4a 	bl	24d92 <k_queue_prepend>
}
   236fe:	e7ec      	b.n	236da <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   23700:	bd38      	pop	{r3, r4, r5, pc}

00023702 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23702:	7902      	ldrb	r2, [r0, #4]
   23704:	3201      	adds	r2, #1
   23706:	7102      	strb	r2, [r0, #4]
	return buf;
}
   23708:	4770      	bx	lr

0002370a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2370a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2370c:	4618      	mov	r0, r3
   2370e:	681b      	ldr	r3, [r3, #0]
   23710:	2b00      	cmp	r3, #0
   23712:	d1fb      	bne.n	2370c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23714:	4770      	bx	lr

00023716 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   23716:	b570      	push	{r4, r5, r6, lr}
   23718:	4604      	mov	r4, r0
   2371a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2371c:	6806      	ldr	r6, [r0, #0]
   2371e:	b11e      	cbz	r6, 23728 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   23720:	4608      	mov	r0, r1
   23722:	f7ff fff2 	bl	2370a <net_buf_frag_last>
   23726:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   23728:	6025      	str	r5, [r4, #0]
}
   2372a:	bd70      	pop	{r4, r5, r6, pc}

0002372c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2372c:	b538      	push	{r3, r4, r5, lr}
   2372e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   23730:	b138      	cbz	r0, 23742 <net_buf_frag_add+0x16>
   23732:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23734:	f7ff ffe9 	bl	2370a <net_buf_frag_last>
   23738:	4629      	mov	r1, r5
   2373a:	f7ff ffec 	bl	23716 <net_buf_frag_insert>

	return head;
   2373e:	4620      	mov	r0, r4
}
   23740:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   23742:	4608      	mov	r0, r1
   23744:	f7ff ffdd 	bl	23702 <net_buf_ref>
   23748:	e7fa      	b.n	23740 <net_buf_frag_add+0x14>

0002374a <net_buf_simple_add>:
	return buf->data + buf->len;
   2374a:	6802      	ldr	r2, [r0, #0]
   2374c:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2374e:	4419      	add	r1, r3
   23750:	8081      	strh	r1, [r0, #4]
	return tail;
}
   23752:	18d0      	adds	r0, r2, r3
   23754:	4770      	bx	lr

00023756 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   23756:	b538      	push	{r3, r4, r5, lr}
   23758:	460d      	mov	r5, r1
   2375a:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2375c:	4611      	mov	r1, r2
   2375e:	f7ff fff4 	bl	2374a <net_buf_simple_add>
   23762:	4622      	mov	r2, r4
   23764:	4629      	mov	r1, r5
   23766:	f001 ffde 	bl	25726 <memcpy>
}
   2376a:	bd38      	pop	{r3, r4, r5, pc}

0002376c <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2376c:	b510      	push	{r4, lr}
   2376e:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   23770:	2101      	movs	r1, #1
   23772:	f7ff ffea 	bl	2374a <net_buf_simple_add>
	*u8 = val;
   23776:	7004      	strb	r4, [r0, #0]

	return u8;
}
   23778:	bd10      	pop	{r4, pc}

0002377a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2377a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2377c:	6800      	ldr	r0, [r0, #0]
   2377e:	1a40      	subs	r0, r0, r1
   23780:	6018      	str	r0, [r3, #0]
	buf->len += len;
   23782:	889a      	ldrh	r2, [r3, #4]
   23784:	4411      	add	r1, r2
   23786:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   23788:	4770      	bx	lr

0002378a <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2378a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2378c:	8882      	ldrh	r2, [r0, #4]
   2378e:	1a52      	subs	r2, r2, r1
   23790:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   23792:	6800      	ldr	r0, [r0, #0]
   23794:	4408      	add	r0, r1
   23796:	6018      	str	r0, [r3, #0]
}
   23798:	4770      	bx	lr

0002379a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2379a:	4603      	mov	r3, r0
	void *data = buf->data;
   2379c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2379e:	889a      	ldrh	r2, [r3, #4]
   237a0:	1a52      	subs	r2, r2, r1
   237a2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   237a4:	4401      	add	r1, r0
   237a6:	6019      	str	r1, [r3, #0]

	return data;
}
   237a8:	4770      	bx	lr

000237aa <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   237aa:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   237ac:	6803      	ldr	r3, [r0, #0]
   237ae:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   237b0:	2102      	movs	r1, #2
   237b2:	f7ff ffea 	bl	2378a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   237b6:	4620      	mov	r0, r4
   237b8:	bd10      	pop	{r4, pc}

000237ba <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   237ba:	6802      	ldr	r2, [r0, #0]
   237bc:	6880      	ldr	r0, [r0, #8]
}
   237be:	1a10      	subs	r0, r2, r0
   237c0:	4770      	bx	lr

000237c2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   237c2:	b538      	push	{r3, r4, r5, lr}
   237c4:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   237c6:	88c5      	ldrh	r5, [r0, #6]
   237c8:	f7ff fff7 	bl	237ba <net_buf_simple_headroom>
   237cc:	1a2d      	subs	r5, r5, r0
   237ce:	88a0      	ldrh	r0, [r4, #4]
}
   237d0:	1a28      	subs	r0, r5, r0
   237d2:	bd38      	pop	{r3, r4, r5, pc}

000237d4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   237d4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   237d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   237da:	0089      	lsls	r1, r1, #2
   237dc:	3138      	adds	r1, #56	; 0x38
}
   237de:	4408      	add	r0, r1
   237e0:	4770      	bx	lr

000237e2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   237e2:	6840      	ldr	r0, [r0, #4]
}
   237e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   237e8:	4770      	bx	lr

000237ea <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   237ea:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   237ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   237f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   237f4:	4770      	bx	lr

000237f6 <get_status>:
{
   237f6:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   237f8:	b2c9      	uxtb	r1, r1
   237fa:	f7ff ffeb 	bl	237d4 <get_sub_data>
   237fe:	6880      	ldr	r0, [r0, #8]
}
   23800:	f000 0007 	and.w	r0, r0, #7
   23804:	bd08      	pop	{r3, pc}

00023806 <set_off_state>:
	__asm__ volatile(
   23806:	f04f 0340 	mov.w	r3, #64	; 0x40
   2380a:	f3ef 8211 	mrs	r2, BASEPRI
   2380e:	f383 8812 	msr	BASEPRI_MAX, r3
   23812:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23816:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23818:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2381c:	d001      	beq.n	23822 <set_off_state+0x1c>
   2381e:	428b      	cmp	r3, r1
   23820:	d107      	bne.n	23832 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23822:	2301      	movs	r3, #1
   23824:	6003      	str	r3, [r0, #0]
	int err = 0;
   23826:	2000      	movs	r0, #0
	__asm__ volatile(
   23828:	f382 8811 	msr	BASEPRI, r2
   2382c:	f3bf 8f6f 	isb	sy
}
   23830:	4770      	bx	lr
		err = -EPERM;
   23832:	f04f 30ff 	mov.w	r0, #4294967295
   23836:	e7f7      	b.n	23828 <set_off_state+0x22>

00023838 <set_starting_state>:
{
   23838:	b410      	push	{r4}
	__asm__ volatile(
   2383a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2383e:	f3ef 8211 	mrs	r2, BASEPRI
   23842:	f383 8812 	msr	BASEPRI_MAX, r3
   23846:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2384a:	6803      	ldr	r3, [r0, #0]
   2384c:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23850:	f003 0307 	and.w	r3, r3, #7
   23854:	2b01      	cmp	r3, #1
   23856:	d009      	beq.n	2386c <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   23858:	428c      	cmp	r4, r1
   2385a:	d00a      	beq.n	23872 <set_starting_state+0x3a>
		err = -EPERM;
   2385c:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   23860:	f382 8811 	msr	BASEPRI, r2
   23864:	f3bf 8f6f 	isb	sy
}
   23868:	bc10      	pop	{r4}
   2386a:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2386c:	6001      	str	r1, [r0, #0]
	int err = 0;
   2386e:	2000      	movs	r0, #0
   23870:	e7f6      	b.n	23860 <set_starting_state+0x28>
		err = -EALREADY;
   23872:	f06f 0077 	mvn.w	r0, #119	; 0x77
   23876:	e7f3      	b.n	23860 <set_starting_state+0x28>

00023878 <set_on_state>:
	__asm__ volatile(
   23878:	f04f 0340 	mov.w	r3, #64	; 0x40
   2387c:	f3ef 8211 	mrs	r2, BASEPRI
   23880:	f383 8812 	msr	BASEPRI_MAX, r3
   23884:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   23888:	6803      	ldr	r3, [r0, #0]
   2388a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2388e:	f043 0302 	orr.w	r3, r3, #2
   23892:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   23894:	f382 8811 	msr	BASEPRI, r2
   23898:	f3bf 8f6f 	isb	sy
}
   2389c:	4770      	bx	lr

0002389e <clkstarted_handle>:
{
   2389e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238a0:	4606      	mov	r6, r0
   238a2:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   238a4:	f7ff ff96 	bl	237d4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   238a8:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   238aa:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   238ac:	2300      	movs	r3, #0
   238ae:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   238b2:	f7ff ffe1 	bl	23878 <set_on_state>
	if (callback) {
   238b6:	b11d      	cbz	r5, 238c0 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   238b8:	463a      	mov	r2, r7
   238ba:	4621      	mov	r1, r4
   238bc:	4630      	mov	r0, r6
   238be:	47a8      	blx	r5
}
   238c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000238c2 <stop>:
{
   238c2:	b570      	push	{r4, r5, r6, lr}
   238c4:	4606      	mov	r6, r0
   238c6:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   238c8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   238ca:	4621      	mov	r1, r4
   238cc:	f7ff ff82 	bl	237d4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   238d0:	4629      	mov	r1, r5
   238d2:	3008      	adds	r0, #8
   238d4:	f7ff ff97 	bl	23806 <set_off_state>
	if (err < 0) {
   238d8:	2800      	cmp	r0, #0
   238da:	db06      	blt.n	238ea <stop+0x28>
	get_sub_config(dev, type)->stop();
   238dc:	4621      	mov	r1, r4
   238de:	4630      	mov	r0, r6
   238e0:	f7ff ff7f 	bl	237e2 <get_sub_config>
   238e4:	6843      	ldr	r3, [r0, #4]
   238e6:	4798      	blx	r3
	return 0;
   238e8:	2000      	movs	r0, #0
}
   238ea:	bd70      	pop	{r4, r5, r6, pc}

000238ec <api_stop>:
{
   238ec:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   238ee:	2280      	movs	r2, #128	; 0x80
   238f0:	f7ff ffe7 	bl	238c2 <stop>
}
   238f4:	bd08      	pop	{r3, pc}

000238f6 <async_start>:
{
   238f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   238fa:	4606      	mov	r6, r0
   238fc:	4690      	mov	r8, r2
   238fe:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23900:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23902:	4629      	mov	r1, r5
   23904:	f7ff ff66 	bl	237d4 <get_sub_data>
   23908:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2390a:	9906      	ldr	r1, [sp, #24]
   2390c:	3008      	adds	r0, #8
   2390e:	f7ff ff93 	bl	23838 <set_starting_state>
	if (err < 0) {
   23912:	2800      	cmp	r0, #0
   23914:	db09      	blt.n	2392a <async_start+0x34>
	subdata->cb = cb;
   23916:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2391a:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2391c:	4629      	mov	r1, r5
   2391e:	4630      	mov	r0, r6
   23920:	f7ff ff5f 	bl	237e2 <get_sub_config>
   23924:	6803      	ldr	r3, [r0, #0]
   23926:	4798      	blx	r3
	return 0;
   23928:	2000      	movs	r0, #0
}
   2392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002392e <api_start>:
{
   2392e:	b510      	push	{r4, lr}
   23930:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   23932:	2480      	movs	r4, #128	; 0x80
   23934:	9400      	str	r4, [sp, #0]
   23936:	f7ff ffde 	bl	238f6 <async_start>
}
   2393a:	b002      	add	sp, #8
   2393c:	bd10      	pop	{r4, pc}

0002393e <onoff_started_callback>:
{
   2393e:	b510      	push	{r4, lr}
   23940:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   23942:	b2c9      	uxtb	r1, r1
   23944:	f7ff ff51 	bl	237ea <get_onoff_manager>
	notify(mgr, 0);
   23948:	2100      	movs	r1, #0
   2394a:	47a0      	blx	r4
}
   2394c:	bd10      	pop	{r4, pc}

0002394e <hfclk_start>:
{
   2394e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   23950:	2001      	movs	r0, #1
   23952:	f7f5 fc3f 	bl	191d4 <nrfx_clock_start>
}
   23956:	bd08      	pop	{r3, pc}

00023958 <lfclk_start>:
{
   23958:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2395a:	2000      	movs	r0, #0
   2395c:	f7f5 fc3a 	bl	191d4 <nrfx_clock_start>
}
   23960:	bd08      	pop	{r3, pc}

00023962 <hfclk_stop>:
{
   23962:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   23964:	2001      	movs	r0, #1
   23966:	f000 ff26 	bl	247b6 <nrfx_clock_stop>
}
   2396a:	bd08      	pop	{r3, pc}

0002396c <lfclk_stop>:
{
   2396c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2396e:	2000      	movs	r0, #0
   23970:	f000 ff21 	bl	247b6 <nrfx_clock_stop>
}
   23974:	bd08      	pop	{r3, pc}

00023976 <blocking_start_callback>:
{
   23976:	b508      	push	{r3, lr}
   23978:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2397a:	f7f7 fa83 	bl	1ae84 <z_impl_k_sem_give>
}
   2397e:	bd08      	pop	{r3, pc}

00023980 <wait>:
{
   23980:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   23982:	f001 f912 	bl	24baa <k_is_in_isr>
   23986:	b100      	cbz	r0, 2398a <wait+0xa>
}
   23988:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   2398a:	2042      	movs	r0, #66	; 0x42
   2398c:	2100      	movs	r1, #0
   2398e:	f7f8 f829 	bl	1b9e4 <z_impl_k_sleep>
   23992:	e7f9      	b.n	23988 <wait+0x8>

00023994 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   23994:	f010 0f10 	tst.w	r0, #16
   23998:	d104      	bne.n	239a4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   2399a:	f010 0f20 	tst.w	r0, #32
   2399e:	d103      	bne.n	239a8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   239a0:	2000      	movs	r0, #0
   239a2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   239a4:	2003      	movs	r0, #3
   239a6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   239a8:	2001      	movs	r0, #1
}
   239aa:	4770      	bx	lr

000239ac <gpio_nrfx_port_get_raw>:
	return port->config;
   239ac:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   239ae:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   239b0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   239b4:	600b      	str	r3, [r1, #0]
}
   239b6:	2000      	movs	r0, #0
   239b8:	4770      	bx	lr

000239ba <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   239ba:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   239bc:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   239be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   239c2:	4042      	eors	r2, r0
   239c4:	400a      	ands	r2, r1
   239c6:	4042      	eors	r2, r0
    p_reg->OUT = value;
   239c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   239cc:	2000      	movs	r0, #0
   239ce:	4770      	bx	lr

000239d0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   239d0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   239d2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   239d4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   239d8:	2000      	movs	r0, #0
   239da:	4770      	bx	lr

000239dc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   239dc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   239de:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   239e0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   239e4:	2000      	movs	r0, #0
   239e6:	4770      	bx	lr

000239e8 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   239e8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   239ea:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   239ec:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   239f0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   239f2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   239f6:	2000      	movs	r0, #0
   239f8:	4770      	bx	lr

000239fa <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   239fa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   239fe:	d007      	beq.n	23a10 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   23a00:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   23a04:	d00d      	beq.n	23a22 <get_trigger+0x28>
   23a06:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   23a0a:	d008      	beq.n	23a1e <get_trigger+0x24>
   23a0c:	2001      	movs	r0, #1
}
   23a0e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   23a10:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   23a14:	d001      	beq.n	23a1a <get_trigger+0x20>
   23a16:	2005      	movs	r0, #5
   23a18:	4770      	bx	lr
   23a1a:	2004      	movs	r0, #4
   23a1c:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   23a1e:	2002      	movs	r0, #2
   23a20:	4770      	bx	lr
   23a22:	2003      	movs	r0, #3
   23a24:	4770      	bx	lr

00023a26 <gpio_nrfx_manage_callback>:
{
   23a26:	b470      	push	{r4, r5, r6}
	return port->data;
   23a28:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23a2a:	1d05      	adds	r5, r0, #4
	return list->head;
   23a2c:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   23a2e:	b1db      	cbz	r3, 23a68 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   23a30:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23a32:	2400      	movs	r4, #0
   23a34:	e00a      	b.n	23a4c <gpio_nrfx_manage_callback+0x26>
	return node->next;
   23a36:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   23a38:	6043      	str	r3, [r0, #4]
	return list->tail;
   23a3a:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   23a3c:	42a1      	cmp	r1, r4
   23a3e:	d10f      	bne.n	23a60 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   23a40:	606b      	str	r3, [r5, #4]
}
   23a42:	e00d      	b.n	23a60 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   23a44:	606c      	str	r4, [r5, #4]
}
   23a46:	e00b      	b.n	23a60 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23a48:	461c      	mov	r4, r3
   23a4a:	681b      	ldr	r3, [r3, #0]
   23a4c:	b15b      	cbz	r3, 23a66 <gpio_nrfx_manage_callback+0x40>
   23a4e:	429e      	cmp	r6, r3
   23a50:	d1fa      	bne.n	23a48 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   23a52:	2c00      	cmp	r4, #0
   23a54:	d0ef      	beq.n	23a36 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   23a56:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   23a58:	6023      	str	r3, [r4, #0]
	return list->tail;
   23a5a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   23a5c:	4299      	cmp	r1, r3
   23a5e:	d0f1      	beq.n	23a44 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   23a60:	2300      	movs	r3, #0
   23a62:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23a64:	e000      	b.n	23a68 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   23a66:	b152      	cbz	r2, 23a7e <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   23a68:	b162      	cbz	r2, 23a84 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   23a6a:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   23a6c:	600b      	str	r3, [r1, #0]
	list->head = node;
   23a6e:	6041      	str	r1, [r0, #4]
	return list->tail;
   23a70:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   23a72:	b10b      	cbz	r3, 23a78 <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   23a74:	2000      	movs	r0, #0
   23a76:	e006      	b.n	23a86 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   23a78:	6069      	str	r1, [r5, #4]
   23a7a:	2000      	movs	r0, #0
}
   23a7c:	e003      	b.n	23a86 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   23a7e:	f06f 0015 	mvn.w	r0, #21
   23a82:	e000      	b.n	23a86 <gpio_nrfx_manage_callback+0x60>
	return 0;
   23a84:	2000      	movs	r0, #0
}
   23a86:	bc70      	pop	{r4, r5, r6}
   23a88:	4770      	bx	lr

00023a8a <nrfx_gpio_handler>:
{
   23a8a:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   23a8c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   23a90:	0940      	lsrs	r0, r0, #5
   23a92:	f7f4 f9df 	bl	17e54 <get_dev>
	if (port == NULL) {
   23a96:	b1d8      	cbz	r0, 23ad0 <nrfx_gpio_handler+0x46>
   23a98:	4606      	mov	r6, r0
	return port->data;
   23a9a:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   23a9c:	2501      	movs	r5, #1
   23a9e:	40a5      	lsls	r5, r4
	return list->head;
   23aa0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23aa2:	b119      	cbz	r1, 23aac <nrfx_gpio_handler+0x22>
   23aa4:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   23aa6:	b149      	cbz	r1, 23abc <nrfx_gpio_handler+0x32>
	return node->next;
   23aa8:	680c      	ldr	r4, [r1, #0]
   23aaa:	e007      	b.n	23abc <nrfx_gpio_handler+0x32>
   23aac:	460c      	mov	r4, r1
   23aae:	e005      	b.n	23abc <nrfx_gpio_handler+0x32>
   23ab0:	b164      	cbz	r4, 23acc <nrfx_gpio_handler+0x42>
   23ab2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   23ab4:	b104      	cbz	r4, 23ab8 <nrfx_gpio_handler+0x2e>
	return node->next;
   23ab6:	6823      	ldr	r3, [r4, #0]
   23ab8:	4621      	mov	r1, r4
   23aba:	461c      	mov	r4, r3
   23abc:	b141      	cbz	r1, 23ad0 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   23abe:	688a      	ldr	r2, [r1, #8]
   23ac0:	402a      	ands	r2, r5
   23ac2:	d0f5      	beq.n	23ab0 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   23ac4:	684b      	ldr	r3, [r1, #4]
   23ac6:	4630      	mov	r0, r6
   23ac8:	4798      	blx	r3
   23aca:	e7f1      	b.n	23ab0 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   23acc:	4623      	mov	r3, r4
   23ace:	e7f3      	b.n	23ab8 <nrfx_gpio_handler+0x2e>
}
   23ad0:	bd70      	pop	{r4, r5, r6, pc}

00023ad2 <i2c_nrfx_twim_configure>:
	return dev->config;
   23ad2:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   23ad4:	f011 0f01 	tst.w	r1, #1
   23ad8:	d117      	bne.n	23b0a <i2c_nrfx_twim_configure+0x38>
	switch (I2C_SPEED_GET(dev_config)) {
   23ada:	f3c1 0342 	ubfx	r3, r1, #1, #3
   23ade:	2b01      	cmp	r3, #1
   23ae0:	d004      	beq.n	23aec <i2c_nrfx_twim_configure+0x1a>
   23ae2:	2b02      	cmp	r3, #2
   23ae4:	d00b      	beq.n	23afe <i2c_nrfx_twim_configure+0x2c>
   23ae6:	f06f 0015 	mvn.w	r0, #21
   23aea:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   23aec:	6813      	ldr	r3, [r2, #0]
    p_reg->FREQUENCY = frequency;
   23aee:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   23af2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return dev->data;
   23af6:	6903      	ldr	r3, [r0, #16]
	get_dev_data(dev)->dev_config = dev_config;
   23af8:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   23afa:	2000      	movs	r0, #0
   23afc:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   23afe:	6813      	ldr	r3, [r2, #0]
   23b00:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   23b04:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   23b08:	e7f5      	b.n	23af6 <i2c_nrfx_twim_configure+0x24>
		return -EINVAL;
   23b0a:	f06f 0015 	mvn.w	r0, #21
}
   23b0e:	4770      	bx	lr

00023b10 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   23b10:	b510      	push	{r4, lr}
   23b12:	4604      	mov	r4, r0
   23b14:	2200      	movs	r2, #0
   23b16:	2101      	movs	r1, #1
   23b18:	2003      	movs	r0, #3
   23b1a:	f7ef ff5f 	bl	139dc <z_arm_irq_priority_set>
   23b1e:	4620      	mov	r0, r4
   23b20:	f7f4 fbf8 	bl	18314 <init_twim>
   23b24:	bd10      	pop	{r4, pc}

00023b26 <endtx_isr>:
	return dev->config;
   23b26:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23b28:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   23b2a:	f04f 0140 	mov.w	r1, #64	; 0x40
   23b2e:	f3ef 8211 	mrs	r2, BASEPRI
   23b32:	f381 8812 	msr	BASEPRI_MAX, r1
   23b36:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b3a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23b3e:	b131      	cbz	r1, 23b4e <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b40:	2100      	movs	r1, #0
   23b42:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   23b46:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23b4a:	2101      	movs	r1, #1
   23b4c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   23b4e:	f382 8811 	msr	BASEPRI, r2
   23b52:	f3bf 8f6f 	isb	sy
}
   23b56:	4770      	bx	lr

00023b58 <uarte_nrfx_isr_int>:
{
   23b58:	b538      	push	{r3, r4, r5, lr}
   23b5a:	4604      	mov	r4, r0
	return dev->config;
   23b5c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23b5e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   23b60:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23b64:	f413 7f80 	tst.w	r3, #256	; 0x100
   23b68:	d002      	beq.n	23b70 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23b6a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   23b6e:	b9db      	cbnz	r3, 23ba8 <uarte_nrfx_isr_int+0x50>
	return dev->config;
   23b70:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23b72:	685b      	ldr	r3, [r3, #4]
   23b74:	f013 0f10 	tst.w	r3, #16
   23b78:	d015      	beq.n	23ba6 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   23b7a:	f04f 0240 	mov.w	r2, #64	; 0x40
   23b7e:	f3ef 8311 	mrs	r3, BASEPRI
   23b82:	f382 8812 	msr	BASEPRI_MAX, r2
   23b86:	f3bf 8f6f 	isb	sy
   23b8a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   23b8e:	b112      	cbz	r2, 23b96 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23b90:	2200      	movs	r2, #0
   23b92:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   23b96:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   23b9a:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   23b9e:	f383 8811 	msr	BASEPRI, r3
   23ba2:	f3bf 8f6f 	isb	sy
}
   23ba6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   23ba8:	f7ff ffbd 	bl	23b26 <endtx_isr>
   23bac:	e7e0      	b.n	23b70 <uarte_nrfx_isr_int+0x18>

00023bae <uarte_nrfx_configure>:
{
   23bae:	b570      	push	{r4, r5, r6, lr}
   23bb0:	b082      	sub	sp, #8
   23bb2:	4605      	mov	r5, r0
   23bb4:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   23bb6:	794b      	ldrb	r3, [r1, #5]
   23bb8:	2b01      	cmp	r3, #1
   23bba:	d006      	beq.n	23bca <uarte_nrfx_configure+0x1c>
   23bbc:	2b03      	cmp	r3, #3
   23bbe:	d011      	beq.n	23be4 <uarte_nrfx_configure+0x36>
   23bc0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   23bc4:	4618      	mov	r0, r3
   23bc6:	b002      	add	sp, #8
   23bc8:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   23bca:	2300      	movs	r3, #0
   23bcc:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   23bd0:	79a3      	ldrb	r3, [r4, #6]
   23bd2:	2b03      	cmp	r3, #3
   23bd4:	d138      	bne.n	23c48 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   23bd6:	79e3      	ldrb	r3, [r4, #7]
   23bd8:	b143      	cbz	r3, 23bec <uarte_nrfx_configure+0x3e>
   23bda:	2b01      	cmp	r3, #1
   23bdc:	d010      	beq.n	23c00 <uarte_nrfx_configure+0x52>
   23bde:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23be2:	e7ef      	b.n	23bc4 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   23be4:	2310      	movs	r3, #16
   23be6:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   23bea:	e7f1      	b.n	23bd0 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   23bec:	2300      	movs	r3, #0
   23bee:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   23bf2:	7923      	ldrb	r3, [r4, #4]
   23bf4:	b143      	cbz	r3, 23c08 <uarte_nrfx_configure+0x5a>
   23bf6:	2b02      	cmp	r3, #2
   23bf8:	d022      	beq.n	23c40 <uarte_nrfx_configure+0x92>
   23bfa:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23bfe:	e7e1      	b.n	23bc4 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   23c00:	2301      	movs	r3, #1
   23c02:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   23c06:	e7f4      	b.n	23bf2 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   23c08:	2300      	movs	r3, #0
   23c0a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   23c0e:	6821      	ldr	r1, [r4, #0]
   23c10:	4628      	mov	r0, r5
   23c12:	f7f4 fc63 	bl	184dc <baudrate_set>
   23c16:	4603      	mov	r3, r0
   23c18:	b9c8      	cbnz	r0, 23c4e <uarte_nrfx_configure+0xa0>
	return dev->config;
   23c1a:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   23c1c:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23c1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   23c22:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   23c26:	f89d 2004 	ldrb.w	r2, [sp, #4]
   23c2a:	4331      	orrs	r1, r6
   23c2c:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23c2e:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   23c32:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   23c34:	3204      	adds	r2, #4
   23c36:	e894 0003 	ldmia.w	r4, {r0, r1}
   23c3a:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   23c3e:	e7c1      	b.n	23bc4 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   23c40:	230e      	movs	r3, #14
   23c42:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   23c46:	e7e2      	b.n	23c0e <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   23c48:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23c4c:	e7ba      	b.n	23bc4 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   23c4e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23c52:	e7b7      	b.n	23bc4 <uarte_nrfx_configure+0x16>

00023c54 <uarte_nrfx_config_get>:
{
   23c54:	460b      	mov	r3, r1
	return dev->data;
   23c56:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   23c58:	6891      	ldr	r1, [r2, #8]
   23c5a:	6850      	ldr	r0, [r2, #4]
   23c5c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23c60:	2000      	movs	r0, #0
   23c62:	4770      	bx	lr

00023c64 <uarte_nrfx_err_check>:
	return dev->config;
   23c64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23c66:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23c68:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23c6c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23c70:	4770      	bx	lr

00023c72 <is_tx_ready>:
	return dev->config;
   23c72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23c74:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   23c76:	685b      	ldr	r3, [r3, #4]
   23c78:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23c7c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   23c80:	b929      	cbnz	r1, 23c8e <is_tx_ready+0x1c>
   23c82:	b933      	cbnz	r3, 23c92 <is_tx_ready+0x20>
   23c84:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   23c88:	b92b      	cbnz	r3, 23c96 <is_tx_ready+0x24>
   23c8a:	2000      	movs	r0, #0
   23c8c:	4770      	bx	lr
   23c8e:	2001      	movs	r0, #1
   23c90:	4770      	bx	lr
   23c92:	2000      	movs	r0, #0
   23c94:	4770      	bx	lr
   23c96:	2001      	movs	r0, #1
}
   23c98:	4770      	bx	lr

00023c9a <uarte_enable>:
	return dev->config;
   23c9a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23c9c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   23c9e:	2208      	movs	r2, #8
   23ca0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   23ca4:	4770      	bx	lr

00023ca6 <tx_start>:
{
   23ca6:	b510      	push	{r4, lr}
	return dev->config;
   23ca8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23caa:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23cac:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23cb0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cb4:	2300      	movs	r3, #0
   23cb6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   23cba:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   23cbe:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   23cc2:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   23cc6:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23cc8:	685b      	ldr	r3, [r3, #4]
   23cca:	f013 0f10 	tst.w	r3, #16
   23cce:	d102      	bne.n	23cd6 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23cd0:	2301      	movs	r3, #1
   23cd2:	60a3      	str	r3, [r4, #8]
}
   23cd4:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   23cd6:	2101      	movs	r1, #1
   23cd8:	f7ff ffdf 	bl	23c9a <uarte_enable>
    p_reg->INTENSET = mask;
   23cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   23ce0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   23ce4:	e7f4      	b.n	23cd0 <tx_start+0x2a>

00023ce6 <uarte_nrfx_poll_in>:
{
   23ce6:	b410      	push	{r4}
	return dev->data;
   23ce8:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   23cea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23cec:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23cee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23cf2:	b152      	cbz	r2, 23d0a <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   23cf4:	7c62      	ldrb	r2, [r4, #17]
   23cf6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cf8:	2000      	movs	r0, #0
   23cfa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23cfe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23d02:	2201      	movs	r2, #1
   23d04:	601a      	str	r2, [r3, #0]
}
   23d06:	bc10      	pop	{r4}
   23d08:	4770      	bx	lr
		return -1;
   23d0a:	f04f 30ff 	mov.w	r0, #4294967295
   23d0e:	e7fa      	b.n	23d06 <uarte_nrfx_poll_in+0x20>

00023d10 <wait_tx_ready>:
{
   23d10:	b570      	push	{r4, r5, r6, lr}
   23d12:	4606      	mov	r6, r0
   23d14:	e014      	b.n	23d40 <wait_tx_ready+0x30>
		if (res) {
   23d16:	b17d      	cbz	r5, 23d38 <wait_tx_ready+0x28>
	__asm__ volatile(
   23d18:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d1c:	f3ef 8411 	mrs	r4, BASEPRI
   23d20:	f383 8812 	msr	BASEPRI_MAX, r3
   23d24:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   23d28:	4630      	mov	r0, r6
   23d2a:	f7ff ffa2 	bl	23c72 <is_tx_ready>
   23d2e:	b9a0      	cbnz	r0, 23d5a <wait_tx_ready+0x4a>
	__asm__ volatile(
   23d30:	f384 8811 	msr	BASEPRI, r4
   23d34:	f3bf 8f6f 	isb	sy
   23d38:	2021      	movs	r0, #33	; 0x21
   23d3a:	2100      	movs	r1, #0
   23d3c:	f7f7 fe52 	bl	1b9e4 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   23d40:	2464      	movs	r4, #100	; 0x64
   23d42:	4630      	mov	r0, r6
   23d44:	f7ff ff95 	bl	23c72 <is_tx_ready>
   23d48:	4605      	mov	r5, r0
   23d4a:	2800      	cmp	r0, #0
   23d4c:	d1e3      	bne.n	23d16 <wait_tx_ready+0x6>
   23d4e:	2001      	movs	r0, #1
   23d50:	f000 fd4e 	bl	247f0 <nrfx_busy_wait>
   23d54:	3c01      	subs	r4, #1
   23d56:	d1f4      	bne.n	23d42 <wait_tx_ready+0x32>
   23d58:	e7dd      	b.n	23d16 <wait_tx_ready+0x6>
}
   23d5a:	4620      	mov	r0, r4
   23d5c:	bd70      	pop	{r4, r5, r6, pc}

00023d5e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   23d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d60:	4604      	mov	r4, r0
	return dev->config;
   23d62:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   23d64:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   23d66:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   23d68:	2100      	movs	r1, #0
   23d6a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   23d6e:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   23d70:	f7f4 fae6 	bl	18340 <uarte_nrfx_pins_configure>
	return dev->data;
   23d74:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   23d76:	3104      	adds	r1, #4
   23d78:	4620      	mov	r0, r4
   23d7a:	f7ff ff18 	bl	23bae <uarte_nrfx_configure>
	if (err) {
   23d7e:	4604      	mov	r4, r0
   23d80:	bb68      	cbnz	r0, 23dde <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   23d82:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   23d84:	f013 0f02 	tst.w	r3, #2
   23d88:	d12b      	bne.n	23de2 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   23d8a:	2308      	movs	r3, #8
   23d8c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   23d90:	7a33      	ldrb	r3, [r6, #8]
   23d92:	b95b      	cbnz	r3, 23dac <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d94:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   23d98:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   23d9c:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   23da0:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   23da4:	2301      	movs	r3, #1
   23da6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23daa:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   23dac:	6873      	ldr	r3, [r6, #4]
   23dae:	f013 0f02 	tst.w	r3, #2
   23db2:	d103      	bne.n	23dbc <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   23db4:	f44f 7380 	mov.w	r3, #256	; 0x100
   23db8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23dbc:	6873      	ldr	r3, [r6, #4]
   23dbe:	f013 0f10 	tst.w	r3, #16
   23dc2:	d003      	beq.n	23dcc <uarte_instance_init+0x6e>
   23dc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   23dc8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   23dcc:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23dce:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23dd2:	2300      	movs	r3, #0
   23dd4:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23dd8:	2301      	movs	r3, #1
   23dda:	60ab      	str	r3, [r5, #8]
   23ddc:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   23dde:	4620      	mov	r0, r4
   23de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   23de2:	4639      	mov	r1, r7
   23de4:	4628      	mov	r0, r5
   23de6:	f7f4 fc59 	bl	1869c <endtx_stoptx_ppi_init>
		if (err < 0) {
   23dea:	2800      	cmp	r0, #0
   23dec:	dacd      	bge.n	23d8a <uarte_instance_init+0x2c>
			return err;
   23dee:	4604      	mov	r4, r0
   23df0:	e7f5      	b.n	23dde <uarte_instance_init+0x80>

00023df2 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   23df2:	b510      	push	{r4, lr}
   23df4:	4604      	mov	r4, r0
   23df6:	2200      	movs	r2, #0
   23df8:	2101      	movs	r1, #1
   23dfa:	2002      	movs	r0, #2
   23dfc:	f7ef fdee 	bl	139dc <z_arm_irq_priority_set>
   23e00:	2002      	movs	r0, #2
   23e02:	f7ef fdb9 	bl	13978 <arch_irq_enable>
   23e06:	2100      	movs	r1, #0
   23e08:	4620      	mov	r0, r4
   23e0a:	f7ff ffa8 	bl	23d5e <uarte_instance_init>
   23e0e:	bd10      	pop	{r4, pc}

00023e10 <rng_pool_put>:
{
   23e10:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   23e12:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   23e14:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   23e16:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   23e18:	1a9a      	subs	r2, r3, r2
   23e1a:	ea34 0202 	bics.w	r2, r4, r2
   23e1e:	d008      	beq.n	23e32 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   23e20:	18c2      	adds	r2, r0, r3
   23e22:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   23e24:	3301      	adds	r3, #1
   23e26:	b25b      	sxtb	r3, r3
   23e28:	4023      	ands	r3, r4
   23e2a:	7083      	strb	r3, [r0, #2]
	return 0;
   23e2c:	2000      	movs	r0, #0
}
   23e2e:	bc10      	pop	{r4}
   23e30:	4770      	bx	lr
		return -ENOBUFS;
   23e32:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23e36:	e7fa      	b.n	23e2e <rng_pool_put+0x1e>

00023e38 <rng_pool_init>:
	rngp->first_alloc = 0U;
   23e38:	2300      	movs	r3, #0
   23e3a:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   23e3c:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   23e3e:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   23e40:	3901      	subs	r1, #1
   23e42:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   23e44:	7102      	strb	r2, [r0, #4]
}
   23e46:	4770      	bx	lr

00023e48 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   23e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e4a:	b083      	sub	sp, #12
   23e4c:	460f      	mov	r7, r1
   23e4e:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   23e50:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   23e54:	2400      	movs	r4, #0
	int res = -EINVAL;
   23e56:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   23e5a:	e00a      	b.n	23e72 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   23e5c:	ab01      	add	r3, sp, #4
   23e5e:	462a      	mov	r2, r5
   23e60:	1939      	adds	r1, r7, r4
   23e62:	2000      	movs	r0, #0
   23e64:	f7f8 fc00 	bl	1c668 <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   23e68:	9b01      	ldr	r3, [sp, #4]
   23e6a:	42ab      	cmp	r3, r5
   23e6c:	d109      	bne.n	23e82 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   23e6e:	b950      	cbnz	r0, 23e86 <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   23e70:	442c      	add	r4, r5
	while (offset < length) {
   23e72:	42a6      	cmp	r6, r4
   23e74:	d907      	bls.n	23e86 <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   23e76:	1b33      	subs	r3, r6, r4
   23e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23e7c:	d2ee      	bcs.n	23e5c <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   23e7e:	461d      	mov	r5, r3
   23e80:	e7ec      	b.n	23e5c <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   23e82:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   23e86:	b003      	add	sp, #12
   23e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023e8a <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   23e8a:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   23e8c:	2200      	movs	r2, #0
   23e8e:	4611      	mov	r1, r2
   23e90:	4610      	mov	r0, r2
   23e92:	f7f8 fbb5 	bl	1c600 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   23e96:	b900      	cbnz	r0, 23e9a <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   23e98:	bd08      	pop	{r3, pc}
			return -EINVAL;
   23e9a:	f06f 0015 	mvn.w	r0, #21
   23e9e:	e7fb      	b.n	23e98 <entropy_cc3xx_rng_init+0xe>

00023ea0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   23ea0:	4770      	bx	lr

00023ea2 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   23ea2:	1a40      	subs	r0, r0, r1
}
   23ea4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   23ea8:	4770      	bx	lr

00023eaa <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   23eaa:	f100 0350 	add.w	r3, r0, #80	; 0x50
   23eae:	009b      	lsls	r3, r3, #2
   23eb0:	b29b      	uxth	r3, r3
   23eb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23eb6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   23eba:	2200      	movs	r2, #0
   23ebc:	601a      	str	r2, [r3, #0]
   23ebe:	681b      	ldr	r3, [r3, #0]
}
   23ec0:	4770      	bx	lr

00023ec2 <absolute_time_to_cc>:
}
   23ec2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   23ec6:	4770      	bx	lr

00023ec8 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   23ec8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   23ecc:	b672      	cpsid	i
}
   23ece:	4770      	bx	lr

00023ed0 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   23ed0:	f380 8810 	msr	PRIMASK, r0
}
   23ed4:	4770      	bx	lr

00023ed6 <set_absolute_alarm>:
{
   23ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ed8:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   23eda:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   23ede:	f7f4 fd53 	bl	18988 <get_comparator>
   23ee2:	4607      	mov	r7, r0
   23ee4:	e019      	b.n	23f1a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   23ee6:	2013      	movs	r0, #19
   23ee8:	f001 fafb 	bl	254e2 <z_impl_k_busy_wait>
}
   23eec:	e022      	b.n	23f34 <set_absolute_alarm+0x5e>
		event_clear(chan);
   23eee:	4630      	mov	r0, r6
   23ef0:	f7ff ffdb 	bl	23eaa <event_clear>
		event_enable(chan);
   23ef4:	4630      	mov	r0, r6
   23ef6:	f7f4 fd4f 	bl	18998 <event_enable>
		set_comparator(chan, cc_val);
   23efa:	4629      	mov	r1, r5
   23efc:	4630      	mov	r0, r6
   23efe:	f7f4 fd39 	bl	18974 <set_comparator>
		now2 = counter();
   23f02:	f7f4 fd5d 	bl	189c0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   23f06:	4284      	cmp	r4, r0
   23f08:	d01e      	beq.n	23f48 <set_absolute_alarm+0x72>
   23f0a:	1c81      	adds	r1, r0, #2
   23f0c:	4628      	mov	r0, r5
   23f0e:	f7ff ffc8 	bl	23ea2 <counter_sub>
	} while ((now2 != now) &&
   23f12:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   23f16:	d917      	bls.n	23f48 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   23f18:	462f      	mov	r7, r5
		now = counter();
   23f1a:	f7f4 fd51 	bl	189c0 <counter>
   23f1e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   23f20:	4601      	mov	r1, r0
   23f22:	4630      	mov	r0, r6
   23f24:	f7f4 fd26 	bl	18974 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   23f28:	4621      	mov	r1, r4
   23f2a:	4638      	mov	r0, r7
   23f2c:	f7ff ffb9 	bl	23ea2 <counter_sub>
   23f30:	2801      	cmp	r0, #1
   23f32:	d0d8      	beq.n	23ee6 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   23f34:	1ca7      	adds	r7, r4, #2
   23f36:	4639      	mov	r1, r7
   23f38:	4628      	mov	r0, r5
   23f3a:	f7ff ffb2 	bl	23ea2 <counter_sub>
   23f3e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   23f42:	d9d4      	bls.n	23eee <set_absolute_alarm+0x18>
			cc_val = now + 2;
   23f44:	463d      	mov	r5, r7
   23f46:	e7d2      	b.n	23eee <set_absolute_alarm+0x18>
}
   23f48:	4628      	mov	r0, r5
   23f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023f4c <compare_set>:
{
   23f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f4e:	b083      	sub	sp, #12
   23f50:	4604      	mov	r4, r0
   23f52:	4617      	mov	r7, r2
   23f54:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   23f56:	f7f4 fd39 	bl	189cc <compare_int_lock>
   23f5a:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   23f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23f5e:	9301      	str	r3, [sp, #4]
   23f60:	9b08      	ldr	r3, [sp, #32]
   23f62:	9300      	str	r3, [sp, #0]
   23f64:	463a      	mov	r2, r7
   23f66:	462b      	mov	r3, r5
   23f68:	4620      	mov	r0, r4
   23f6a:	f7f4 fe1d 	bl	18ba8 <compare_set_nolocks>
   23f6e:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   23f70:	4631      	mov	r1, r6
   23f72:	4620      	mov	r0, r4
   23f74:	f7f4 fd8e 	bl	18a94 <compare_int_unlock>
}
   23f78:	4628      	mov	r0, r5
   23f7a:	b003      	add	sp, #12
   23f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023f7e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23f7e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   23f80:	2000      	movs	r0, #0
   23f82:	f7f0 f8e5 	bl	14150 <sys_arch_reboot>

00023f86 <sdc_assertion_handler>:
	k_oops();
   23f86:	4040      	eors	r0, r0
   23f88:	f380 8811 	msr	BASEPRI, r0
   23f8c:	f04f 0003 	mov.w	r0, #3
   23f90:	df02      	svc	2
}
   23f92:	4770      	bx	lr

00023f94 <event_packet_is_discardable>:
	switch (hdr->evt) {
   23f94:	7803      	ldrb	r3, [r0, #0]
   23f96:	2b3e      	cmp	r3, #62	; 0x3e
   23f98:	d003      	beq.n	23fa2 <event_packet_is_discardable+0xe>
   23f9a:	2bff      	cmp	r3, #255	; 0xff
   23f9c:	d008      	beq.n	23fb0 <event_packet_is_discardable+0x1c>
   23f9e:	2000      	movs	r0, #0
   23fa0:	4770      	bx	lr
		switch (me->subevent) {
   23fa2:	7883      	ldrb	r3, [r0, #2]
   23fa4:	2b02      	cmp	r3, #2
   23fa6:	d001      	beq.n	23fac <event_packet_is_discardable+0x18>
			return false;
   23fa8:	2000      	movs	r0, #0
   23faa:	4770      	bx	lr
			return true;
   23fac:	2001      	movs	r0, #1
   23fae:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   23fb0:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   23fb2:	2b80      	cmp	r3, #128	; 0x80
   23fb4:	d001      	beq.n	23fba <event_packet_is_discardable+0x26>
			return false;
   23fb6:	2000      	movs	r0, #0
}
   23fb8:	4770      	bx	lr
			return true;
   23fba:	2001      	movs	r0, #1
   23fbc:	4770      	bx	lr

00023fbe <hci_driver_send>:
{
   23fbe:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   23fc0:	8983      	ldrh	r3, [r0, #12]
   23fc2:	b183      	cbz	r3, 23fe6 <hci_driver_send+0x28>
   23fc4:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   23fc6:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   23fc8:	b14b      	cbz	r3, 23fde <hci_driver_send+0x20>
   23fca:	2b02      	cmp	r3, #2
   23fcc:	d10e      	bne.n	23fec <hci_driver_send+0x2e>
		err = acl_handle(buf);
   23fce:	f7f4 ff57 	bl	18e80 <acl_handle>
   23fd2:	4605      	mov	r5, r0
	if (!err) {
   23fd4:	b965      	cbnz	r5, 23ff0 <hci_driver_send+0x32>
		net_buf_unref(buf);
   23fd6:	4620      	mov	r0, r4
   23fd8:	f7ff fb6d 	bl	236b6 <net_buf_unref>
   23fdc:	e008      	b.n	23ff0 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   23fde:	f7f4 ff69 	bl	18eb4 <cmd_handle>
   23fe2:	4605      	mov	r5, r0
		break;
   23fe4:	e7f6      	b.n	23fd4 <hci_driver_send+0x16>
		return -EINVAL;
   23fe6:	f06f 0515 	mvn.w	r5, #21
   23fea:	e001      	b.n	23ff0 <hci_driver_send+0x32>
	switch (type) {
   23fec:	f06f 0515 	mvn.w	r5, #21
}
   23ff0:	4628      	mov	r0, r5
   23ff2:	bd38      	pop	{r3, r4, r5, pc}

00023ff4 <event_packet_process>:
{
   23ff4:	b538      	push	{r3, r4, r5, lr}
   23ff6:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   23ff8:	f7ff ffcc 	bl	23f94 <event_packet_is_discardable>
   23ffc:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   23ffe:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   24000:	4619      	mov	r1, r3
   24002:	b17b      	cbz	r3, 24024 <event_packet_process+0x30>
   24004:	2200      	movs	r2, #0
   24006:	2300      	movs	r3, #0
   24008:	f7f0 f926 	bl	14258 <bt_buf_get_evt>
	if (!evt_buf) {
   2400c:	4605      	mov	r5, r0
   2400e:	b140      	cbz	r0, 24022 <event_packet_process+0x2e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   24010:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   24012:	3202      	adds	r2, #2
   24014:	4621      	mov	r1, r4
   24016:	3008      	adds	r0, #8
   24018:	f7ff fb9d 	bl	23756 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2401c:	4628      	mov	r0, r5
   2401e:	f7f1 f875 	bl	1510c <bt_recv>
}
   24022:	bd38      	pop	{r3, r4, r5, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   24024:	f04f 32ff 	mov.w	r2, #4294967295
   24028:	f04f 33ff 	mov.w	r3, #4294967295
   2402c:	e7ec      	b.n	24008 <event_packet_process+0x14>

0002402e <fetch_and_process_hci_evt>:
{
   2402e:	b538      	push	{r3, r4, r5, lr}
   24030:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   24032:	f04f 30ff 	mov.w	r0, #4294967295
   24036:	f04f 31ff 	mov.w	r1, #4294967295
   2403a:	f7f4 feef 	bl	18e1c <multithreading_lock_acquire>
	if (!errcode) {
   2403e:	4605      	mov	r5, r0
   24040:	b110      	cbz	r0, 24048 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   24042:	b145      	cbz	r5, 24056 <fetch_and_process_hci_evt+0x28>
		return false;
   24044:	2000      	movs	r0, #0
}
   24046:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   24048:	4620      	mov	r0, r4
   2404a:	f7f5 f815 	bl	19078 <hci_internal_evt_get>
   2404e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   24050:	f7f4 feee 	bl	18e30 <multithreading_lock_release>
   24054:	e7f5      	b.n	24042 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   24056:	4620      	mov	r0, r4
   24058:	f7ff ffcc 	bl	23ff4 <event_packet_process>
	return true;
   2405c:	2001      	movs	r0, #1
   2405e:	e7f2      	b.n	24046 <fetch_and_process_hci_evt+0x18>

00024060 <data_packet_process>:
{
   24060:	b538      	push	{r3, r4, r5, lr}
   24062:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   24064:	f04f 32ff 	mov.w	r2, #4294967295
   24068:	f04f 33ff 	mov.w	r3, #4294967295
   2406c:	2003      	movs	r0, #3
   2406e:	f7f0 f8c9 	bl	14204 <bt_buf_get_rx>
	if (!data_buf) {
   24072:	b148      	cbz	r0, 24088 <data_packet_process+0x28>
   24074:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   24076:	8862      	ldrh	r2, [r4, #2]
   24078:	3204      	adds	r2, #4
   2407a:	4621      	mov	r1, r4
   2407c:	3008      	adds	r0, #8
   2407e:	f7ff fb6a 	bl	23756 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   24082:	4628      	mov	r0, r5
   24084:	f7f1 f842 	bl	1510c <bt_recv>
}
   24088:	bd38      	pop	{r3, r4, r5, pc}

0002408a <fetch_and_process_acl_data>:
{
   2408a:	b538      	push	{r3, r4, r5, lr}
   2408c:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2408e:	f04f 30ff 	mov.w	r0, #4294967295
   24092:	f04f 31ff 	mov.w	r1, #4294967295
   24096:	f7f4 fec1 	bl	18e1c <multithreading_lock_acquire>
	if (!errcode) {
   2409a:	4605      	mov	r5, r0
   2409c:	b110      	cbz	r0, 240a4 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   2409e:	b145      	cbz	r5, 240b2 <fetch_and_process_acl_data+0x28>
		return false;
   240a0:	2000      	movs	r0, #0
}
   240a2:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   240a4:	4620      	mov	r0, r4
   240a6:	f7e8 fee4 	bl	ce72 <sdc_hci_data_get>
   240aa:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   240ac:	f7f4 fec0 	bl	18e30 <multithreading_lock_release>
   240b0:	e7f5      	b.n	2409e <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   240b2:	4620      	mov	r0, r4
   240b4:	f7ff ffd4 	bl	24060 <data_packet_process>
	return true;
   240b8:	2001      	movs	r0, #1
   240ba:	e7f2      	b.n	240a2 <fetch_and_process_acl_data+0x18>

000240bc <configure_supported_features>:
{
   240bc:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   240be:	f7e0 fcf9 	bl	4ab4 <sdc_support_adv>
			if (err) {
   240c2:	b948      	cbnz	r0, 240d8 <configure_supported_features+0x1c>
		err = sdc_support_slave();
   240c4:	f7e0 fd26 	bl	4b14 <sdc_support_slave>
		if (err) {
   240c8:	b948      	cbnz	r0, 240de <configure_supported_features+0x22>
		err = sdc_support_dle();
   240ca:	f7e0 fd03 	bl	4ad4 <sdc_support_dle>
		if (err) {
   240ce:	b948      	cbnz	r0, 240e4 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   240d0:	f7e0 fd10 	bl	4af4 <sdc_support_le_2m_phy>
		if (err) {
   240d4:	b948      	cbnz	r0, 240ea <configure_supported_features+0x2e>
}
   240d6:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   240d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   240dc:	e7fb      	b.n	240d6 <configure_supported_features+0x1a>
			return -ENOTSUP;
   240de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   240e2:	e7f8      	b.n	240d6 <configure_supported_features+0x1a>
			return -ENOTSUP;
   240e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   240e8:	e7f5      	b.n	240d6 <configure_supported_features+0x1a>
			return -ENOTSUP;
   240ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   240ee:	e7f2      	b.n	240d6 <configure_supported_features+0x1a>

000240f0 <configure_memory_usage>:
{
   240f0:	b500      	push	{lr}
   240f2:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   240f4:	2000      	movs	r0, #0
   240f6:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   240fa:	aa01      	add	r2, sp, #4
   240fc:	2101      	movs	r1, #1
   240fe:	f7e0 fbd5 	bl	48ac <sdc_cfg_set>
	if (required_memory < 0) {
   24102:	2800      	cmp	r0, #0
   24104:	db3c      	blt.n	24180 <configure_memory_usage+0x90>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   24106:	2301      	movs	r3, #1
   24108:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2410c:	aa01      	add	r2, sp, #4
   2410e:	2102      	movs	r1, #2
   24110:	2000      	movs	r0, #0
   24112:	f7e0 fbcb 	bl	48ac <sdc_cfg_set>
	if (required_memory < 0) {
   24116:	2800      	cmp	r0, #0
   24118:	db32      	blt.n	24180 <configure_memory_usage+0x90>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   2411a:	231b      	movs	r3, #27
   2411c:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   24120:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   24124:	2302      	movs	r3, #2
   24126:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   2412a:	2103      	movs	r1, #3
   2412c:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   24130:	aa01      	add	r2, sp, #4
   24132:	2000      	movs	r0, #0
   24134:	f7e0 fbba 	bl	48ac <sdc_cfg_set>
	if (required_memory < 0) {
   24138:	2800      	cmp	r0, #0
   2413a:	db21      	blt.n	24180 <configure_memory_usage+0x90>
	cfg.event_length.event_length_us =
   2413c:	f641 534c 	movw	r3, #7500	; 0x1d4c
   24140:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   24142:	aa01      	add	r2, sp, #4
   24144:	2104      	movs	r1, #4
   24146:	2000      	movs	r0, #0
   24148:	f7e0 fbb0 	bl	48ac <sdc_cfg_set>
	if (required_memory < 0) {
   2414c:	2800      	cmp	r0, #0
   2414e:	db17      	blt.n	24180 <configure_memory_usage+0x90>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   24150:	2301      	movs	r3, #1
   24152:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   24156:	aa01      	add	r2, sp, #4
   24158:	2105      	movs	r1, #5
   2415a:	2000      	movs	r0, #0
   2415c:	f7e0 fba6 	bl	48ac <sdc_cfg_set>
	if (required_memory < 0) {
   24160:	2800      	cmp	r0, #0
   24162:	db0d      	blt.n	24180 <configure_memory_usage+0x90>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   24164:	231f      	movs	r3, #31
   24166:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2416a:	aa01      	add	r2, sp, #4
   2416c:	2107      	movs	r1, #7
   2416e:	2000      	movs	r0, #0
   24170:	f7e0 fb9c 	bl	48ac <sdc_cfg_set>
		if (required_memory < 0) {
   24174:	2800      	cmp	r0, #0
   24176:	db03      	blt.n	24180 <configure_memory_usage+0x90>
	if (required_memory > sizeof(sdc_mempool)) {
   24178:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   2417c:	d803      	bhi.n	24186 <configure_memory_usage+0x96>
	return 0;
   2417e:	2000      	movs	r0, #0
}
   24180:	b003      	add	sp, #12
   24182:	f85d fb04 	ldr.w	pc, [sp], #4
		k_panic();
   24186:	4040      	eors	r0, r0
   24188:	f380 8811 	msr	BASEPRI, r0
   2418c:	f04f 0004 	mov.w	r0, #4
   24190:	df02      	svc	2
		return -ENOMEM;
   24192:	f06f 000b 	mvn.w	r0, #11
   24196:	e7f3      	b.n	24180 <configure_memory_usage+0x90>

00024198 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   24198:	f242 0344 	movw	r3, #8260	; 0x2044
   2419c:	4298      	cmp	r0, r3
   2419e:	d834      	bhi.n	2420a <command_generates_command_complete_event+0x72>
   241a0:	f242 030d 	movw	r3, #8205	; 0x200d
   241a4:	4298      	cmp	r0, r3
   241a6:	d20b      	bcs.n	241c0 <command_generates_command_complete_event+0x28>
   241a8:	f240 4306 	movw	r3, #1030	; 0x406
   241ac:	4298      	cmp	r0, r3
   241ae:	d02e      	beq.n	2420e <command_generates_command_complete_event+0x76>
   241b0:	f240 431d 	movw	r3, #1053	; 0x41d
   241b4:	4298      	cmp	r0, r3
   241b6:	d001      	beq.n	241bc <command_generates_command_complete_event+0x24>
		return true;
   241b8:	2001      	movs	r0, #1
   241ba:	4770      	bx	lr
	switch (hci_opcode) {
   241bc:	2000      	movs	r0, #0
   241be:	4770      	bx	lr
   241c0:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   241c4:	380d      	subs	r0, #13
   241c6:	2837      	cmp	r0, #55	; 0x37
   241c8:	d823      	bhi.n	24212 <command_generates_command_complete_event+0x7a>
   241ca:	e8df f000 	tbb	[pc, r0]
   241ce:	221c      	.short	0x221c
   241d0:	22222222 	.word	0x22222222
   241d4:	1c22221c 	.word	0x1c22221c
   241d8:	221c2222 	.word	0x221c2222
   241dc:	22222222 	.word	0x22222222
   241e0:	22222222 	.word	0x22222222
   241e4:	22222222 	.word	0x22222222
   241e8:	22222222 	.word	0x22222222
   241ec:	22222222 	.word	0x22222222
   241f0:	1c222222 	.word	0x1c222222
   241f4:	22222222 	.word	0x22222222
   241f8:	22222222 	.word	0x22222222
   241fc:	22222222 	.word	0x22222222
   24200:	22222222 	.word	0x22222222
   24204:	1c1c      	.short	0x1c1c
   24206:	2000      	movs	r0, #0
   24208:	4770      	bx	lr
		return true;
   2420a:	2001      	movs	r0, #1
   2420c:	4770      	bx	lr
	switch (hci_opcode) {
   2420e:	2000      	movs	r0, #0
   24210:	4770      	bx	lr
		return true;
   24212:	2001      	movs	r0, #1
}
   24214:	4770      	bx	lr

00024216 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24216:	230f      	movs	r3, #15
   24218:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2421a:	2304      	movs	r3, #4
   2421c:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2421e:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   24220:	2301      	movs	r3, #1
   24222:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   24224:	8081      	strh	r1, [r0, #4]
}
   24226:	4770      	bx	lr

00024228 <encode_command_complete_header>:
{
   24228:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2422a:	240e      	movs	r4, #14
   2422c:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   2422e:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   24230:	2201      	movs	r2, #1
   24232:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   24234:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   24238:	7143      	strb	r3, [r0, #5]
}
   2423a:	bc10      	pop	{r4}
   2423c:	4770      	bx	lr

0002423e <le_read_supported_states>:
	*buf = states1;
   2423e:	238f      	movs	r3, #143	; 0x8f
   24240:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   24242:	23c0      	movs	r3, #192	; 0xc0
   24244:	7103      	strb	r3, [r0, #4]
}
   24246:	4770      	bx	lr

00024248 <status_param_cmd_put>:
}
   24248:	2001      	movs	r0, #1
   2424a:	4770      	bx	lr

0002424c <link_control_cmd_put>:
{
   2424c:	b508      	push	{r3, lr}
   2424e:	7842      	ldrb	r2, [r0, #1]
   24250:	f810 3b03 	ldrb.w	r3, [r0], #3
   24254:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24258:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2425a:	f240 4206 	movw	r2, #1030	; 0x406
   2425e:	4293      	cmp	r3, r2
   24260:	d005      	beq.n	2426e <link_control_cmd_put+0x22>
   24262:	f240 421d 	movw	r2, #1053	; 0x41d
   24266:	4293      	cmp	r3, r2
   24268:	d004      	beq.n	24274 <link_control_cmd_put+0x28>
   2426a:	2001      	movs	r0, #1
}
   2426c:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2426e:	f7e8 ff33 	bl	d0d8 <sdc_hci_cmd_lc_disconnect>
   24272:	e7fb      	b.n	2426c <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   24274:	f7e8 ff32 	bl	d0dc <sdc_hci_cmd_lc_read_remote_version_information>
   24278:	e7f8      	b.n	2426c <link_control_cmd_put+0x20>

0002427a <controller_and_baseband_cmd_put>:
{
   2427a:	b538      	push	{r3, r4, r5, lr}
   2427c:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2427e:	3003      	adds	r0, #3
   24280:	7865      	ldrb	r5, [r4, #1]
   24282:	7823      	ldrb	r3, [r4, #0]
   24284:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   24288:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2428a:	f640 4463 	movw	r4, #3171	; 0xc63
   2428e:	42a3      	cmp	r3, r4
   24290:	d02c      	beq.n	242ec <controller_and_baseband_cmd_put+0x72>
   24292:	f101 0106 	add.w	r1, r1, #6
   24296:	dc16      	bgt.n	242c6 <controller_and_baseband_cmd_put+0x4c>
   24298:	f640 4403 	movw	r4, #3075	; 0xc03
   2429c:	42a3      	cmp	r3, r4
   2429e:	d022      	beq.n	242e6 <controller_and_baseband_cmd_put+0x6c>
   242a0:	f640 442d 	movw	r4, #3117	; 0xc2d
   242a4:	42a3      	cmp	r3, r4
   242a6:	d105      	bne.n	242b4 <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   242a8:	7813      	ldrb	r3, [r2, #0]
   242aa:	3303      	adds	r3, #3
   242ac:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   242ae:	f7e8 fe07 	bl	cec0 <sdc_hci_cmd_cb_read_transmit_power_level>
   242b2:	e007      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   242b4:	f640 4201 	movw	r2, #3073	; 0xc01
   242b8:	4293      	cmp	r3, r2
   242ba:	d102      	bne.n	242c2 <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   242bc:	f7e8 fe02 	bl	cec4 <sdc_hci_cmd_cb_set_event_mask>
   242c0:	e000      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   242c2:	2001      	movs	r0, #1
}
   242c4:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   242c6:	f640 447b 	movw	r4, #3195	; 0xc7b
   242ca:	42a3      	cmp	r3, r4
   242cc:	d011      	beq.n	242f2 <controller_and_baseband_cmd_put+0x78>
   242ce:	f640 447c 	movw	r4, #3196	; 0xc7c
   242d2:	42a3      	cmp	r3, r4
   242d4:	d105      	bne.n	242e2 <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   242d6:	7813      	ldrb	r3, [r2, #0]
   242d8:	3302      	adds	r3, #2
   242da:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   242dc:	f7e8 fdfc 	bl	ced8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   242e0:	e7f0      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   242e2:	2001      	movs	r0, #1
   242e4:	e7ee      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   242e6:	f7e0 fd5b 	bl	4da0 <sdc_hci_cmd_cb_reset>
   242ea:	e7eb      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   242ec:	f7e8 fdef 	bl	cece <sdc_hci_cmd_cb_set_event_mask_page_2>
   242f0:	e7e8      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   242f2:	7813      	ldrb	r3, [r2, #0]
   242f4:	3304      	adds	r3, #4
   242f6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   242f8:	f7e8 fde0 	bl	cebc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   242fc:	e7e2      	b.n	242c4 <controller_and_baseband_cmd_put+0x4a>

000242fe <supported_commands>:
{
   242fe:	b510      	push	{r4, lr}
   24300:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   24302:	222e      	movs	r2, #46	; 0x2e
   24304:	2100      	movs	r1, #0
   24306:	f001 fa49 	bl	2579c <memset>
	cmds->hci_disconnect = 1;
   2430a:	2320      	movs	r3, #32
   2430c:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2430e:	2380      	movs	r3, #128	; 0x80
   24310:	70a3      	strb	r3, [r4, #2]
	cmds->hci_reset = 1;
   24312:	23c0      	movs	r3, #192	; 0xc0
   24314:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   24316:	2304      	movs	r3, #4
   24318:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_supported_features = 1;
   2431a:	2328      	movs	r3, #40	; 0x28
   2431c:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2431e:	2302      	movs	r3, #2
   24320:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   24322:	2304      	movs	r3, #4
   24324:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_advertising_data = 1;
   24326:	23f7      	movs	r3, #247	; 0xf7
   24328:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_clear_white_list = 1;
   2432a:	23c3      	movs	r3, #195	; 0xc3
   2432c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   2432e:	23f3      	movs	r3, #243	; 0xf3
   24330:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_test_end = 1;
   24332:	237e      	movs	r3, #126	; 0x7e
   24334:	7723      	strb	r3, [r4, #28]
	cmds->hci_write_authenticated_payload_timeout = 1;
   24336:	2330      	movs	r3, #48	; 0x30
   24338:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_read_suggested_default_data_length = 1;
   2433c:	23c0      	movs	r3, #192	; 0xc0
   2433e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_resolving_list_size = 1;
   24342:	2379      	movs	r3, #121	; 0x79
   24344:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_receiver_test_v2 = 1;
   24348:	23fe      	movs	r3, #254	; 0xfe
   2434a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2434e:	2301      	movs	r3, #1
   24350:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   24354:	2380      	movs	r3, #128	; 0x80
   24356:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   2435a:	2304      	movs	r3, #4
   2435c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   24360:	bd10      	pop	{r4, pc}

00024362 <supported_features>:
   24362:	2300      	movs	r3, #0
   24364:	6003      	str	r3, [r0, #0]
   24366:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   24368:	7903      	ldrb	r3, [r0, #4]
	features->le_supported = 1;
   2436a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2436e:	7103      	strb	r3, [r0, #4]
}
   24370:	4770      	bx	lr

00024372 <info_param_cmd_put>:
{
   24372:	b538      	push	{r3, r4, r5, lr}
   24374:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   24376:	1d88      	adds	r0, r1, #6
   24378:	7865      	ldrb	r5, [r4, #1]
   2437a:	7823      	ldrb	r3, [r4, #0]
   2437c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   24380:	b21b      	sxth	r3, r3
	switch (opcode)	{
   24382:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   24386:	3b01      	subs	r3, #1
   24388:	2b08      	cmp	r3, #8
   2438a:	d820      	bhi.n	243ce <info_param_cmd_put+0x5c>
   2438c:	e8df f003 	tbb	[pc, r3]
   24390:	1f120b05 	.word	0x1f120b05
   24394:	1f1f1f1f 	.word	0x1f1f1f1f
   24398:	19          	.byte	0x19
   24399:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2439a:	7813      	ldrb	r3, [r2, #0]
   2439c:	3308      	adds	r3, #8
   2439e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   243a0:	f7e8 fe4f 	bl	d042 <sdc_hci_cmd_ip_read_local_version_information>
   243a4:	e014      	b.n	243d0 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   243a6:	7813      	ldrb	r3, [r2, #0]
   243a8:	3340      	adds	r3, #64	; 0x40
   243aa:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   243ac:	f7ff ffa7 	bl	242fe <supported_commands>
		return 0;
   243b0:	2000      	movs	r0, #0
   243b2:	e00d      	b.n	243d0 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   243b4:	7813      	ldrb	r3, [r2, #0]
   243b6:	3308      	adds	r3, #8
   243b8:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   243ba:	f7ff ffd2 	bl	24362 <supported_features>
		return 0;
   243be:	2000      	movs	r0, #0
   243c0:	e006      	b.n	243d0 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   243c2:	7813      	ldrb	r3, [r2, #0]
   243c4:	3306      	adds	r3, #6
   243c6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   243c8:	f7e8 fe39 	bl	d03e <sdc_hci_cmd_ip_read_bd_addr>
   243cc:	e000      	b.n	243d0 <info_param_cmd_put+0x5e>
   243ce:	2001      	movs	r0, #1
}
   243d0:	bd38      	pop	{r3, r4, r5, pc}

000243d2 <le_supported_features>:
   243d2:	2300      	movs	r3, #0
   243d4:	6003      	str	r3, [r0, #0]
   243d6:	7103      	strb	r3, [r0, #4]
	features->le_encryption = 1;
   243d8:	7803      	ldrb	r3, [r0, #0]
	features->ll_privacy = 1;
   243da:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   243de:	7003      	strb	r3, [r0, #0]
	features->le_2m_phy = 1;
   243e0:	7843      	ldrb	r3, [r0, #1]
	features->channel_selection_algorithm_2 = 1;
   243e2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   243e6:	7043      	strb	r3, [r0, #1]
}
   243e8:	4770      	bx	lr

000243ea <vs_zephyr_supported_commands>:
   243ea:	2300      	movs	r3, #0
   243ec:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   243ee:	7803      	ldrb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   243f0:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   243f4:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   243f6:	7843      	ldrb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   243f8:	f043 0307 	orr.w	r3, r3, #7
   243fc:	7043      	strb	r3, [r0, #1]
}
   243fe:	4770      	bx	lr

00024400 <vs_supported_commands>:
	cmds->event_length_set = 1;
   24400:	233f      	movs	r3, #63	; 0x3f
   24402:	7003      	strb	r3, [r0, #0]
}
   24404:	4770      	bx	lr

00024406 <le_controller_cmd_put>:
{
   24406:	b538      	push	{r3, r4, r5, lr}
   24408:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2440a:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2440c:	3106      	adds	r1, #6
   2440e:	7865      	ldrb	r5, [r4, #1]
   24410:	7823      	ldrb	r3, [r4, #0]
   24412:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   24416:	b21b      	sxth	r3, r3
	switch (opcode)	{
   24418:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2441c:	3b01      	subs	r3, #1
   2441e:	2b4d      	cmp	r3, #77	; 0x4d
   24420:	f200 80ce 	bhi.w	245c0 <le_controller_cmd_put+0x1ba>
   24424:	e8df f003 	tbb	[pc, r3]
   24428:	cc312a27 	.word	0xcc312a27
   2442c:	463f3c39 	.word	0x463f3c39
   24430:	cccc4c49 	.word	0xcccc4c49
   24434:	564fcccc 	.word	0x564fcccc
   24438:	cccc5c59 	.word	0xcccc5c59
   2443c:	6e68655f 	.word	0x6e68655f
   24440:	817b75cc 	.word	0x817b75cc
   24444:	cccccccc 	.word	0xcccccccc
   24448:	968f89cc 	.word	0x968f89cc
   2444c:	9c99cccc 	.word	0x9c99cccc
   24450:	cccca29f 	.word	0xcccca29f
   24454:	b6afaca9 	.word	0xb6afaca9
   24458:	ccccbfbc 	.word	0xccccbfbc
   2445c:	cccccccc 	.word	0xcccccccc
   24460:	cccccccc 	.word	0xcccccccc
   24464:	cccccccc 	.word	0xcccccccc
   24468:	cccccccc 	.word	0xcccccccc
   2446c:	cccccccc 	.word	0xcccccccc
   24470:	ccc2cccc 	.word	0xccc2cccc
   24474:	c9cc      	.short	0xc9cc
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   24476:	f7e8 fe1e 	bl	d0b6 <sdc_hci_cmd_le_set_event_mask>
   2447a:	e0a2      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2447c:	7813      	ldrb	r3, [r2, #0]
   2447e:	3303      	adds	r3, #3
   24480:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   24482:	4608      	mov	r0, r1
   24484:	f7e8 fdf5 	bl	d072 <sdc_hci_cmd_le_read_buffer_size>
   24488:	e09b      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2448a:	7813      	ldrb	r3, [r2, #0]
   2448c:	3308      	adds	r3, #8
   2448e:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   24490:	4608      	mov	r0, r1
   24492:	f7ff ff9e 	bl	243d2 <le_supported_features>
		return 0;
   24496:	2000      	movs	r0, #0
   24498:	e093      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2449a:	f7e8 fe15 	bl	d0c8 <sdc_hci_cmd_le_set_random_address>
   2449e:	e090      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   244a0:	f7e8 fe03 	bl	d0aa <sdc_hci_cmd_le_set_adv_params>
   244a4:	e08d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   244a6:	7813      	ldrb	r3, [r2, #0]
   244a8:	3301      	adds	r3, #1
   244aa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   244ac:	4608      	mov	r0, r1
   244ae:	f7e8 fdde 	bl	d06e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   244b2:	e086      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   244b4:	f7e8 fdf5 	bl	d0a2 <sdc_hci_cmd_le_set_adv_data>
   244b8:	e083      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   244ba:	f7e8 fe09 	bl	d0d0 <sdc_hci_cmd_le_set_scan_response_data>
   244be:	e080      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   244c0:	f7e8 fdf1 	bl	d0a6 <sdc_hci_cmd_le_set_adv_enable>
   244c4:	e07d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   244c6:	7813      	ldrb	r3, [r2, #0]
   244c8:	3301      	adds	r3, #1
   244ca:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   244cc:	4608      	mov	r0, r1
   244ce:	f7e8 fde0 	bl	d092 <sdc_hci_cmd_le_read_white_list_size>
   244d2:	e076      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   244d4:	f7e8 fdbd 	bl	d052 <sdc_hci_cmd_le_clear_white_list>
   244d8:	e073      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   244da:	f7e8 fdb6 	bl	d04a <sdc_hci_cmd_le_add_device_to_white_list>
   244de:	e070      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   244e0:	f7e8 fddb 	bl	d09a <sdc_hci_cmd_le_remove_device_from_white_list>
   244e4:	e06d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   244e6:	7813      	ldrb	r3, [r2, #0]
   244e8:	3307      	adds	r3, #7
   244ea:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   244ec:	f7e8 fdc3 	bl	d076 <sdc_hci_cmd_le_read_channel_map>
   244f0:	e067      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   244f2:	f7e8 fdc6 	bl	d082 <sdc_hci_cmd_le_read_remote_features>
   244f6:	e064      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   244f8:	7813      	ldrb	r3, [r2, #0]
   244fa:	3310      	adds	r3, #16
   244fc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   244fe:	f7e8 fdaa 	bl	d056 <sdc_hci_cmd_le_encrypt>
   24502:	e05e      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   24504:	7813      	ldrb	r3, [r2, #0]
   24506:	3308      	adds	r3, #8
   24508:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2450a:	4608      	mov	r0, r1
   2450c:	f7e8 fdad 	bl	d06a <sdc_hci_cmd_le_rand>
   24510:	e057      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   24512:	7813      	ldrb	r3, [r2, #0]
   24514:	3302      	adds	r3, #2
   24516:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   24518:	f7e8 fda3 	bl	d062 <sdc_hci_cmd_le_long_term_key_request_reply>
   2451c:	e051      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2451e:	7813      	ldrb	r3, [r2, #0]
   24520:	3302      	adds	r3, #2
   24522:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   24524:	f7e8 fd99 	bl	d05a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   24528:	e04b      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2452a:	7813      	ldrb	r3, [r2, #0]
   2452c:	3308      	adds	r3, #8
   2452e:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   24530:	4608      	mov	r0, r1
   24532:	f7ff fe84 	bl	2423e <le_read_supported_states>
		return 0;
   24536:	2000      	movs	r0, #0
   24538:	e043      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2453a:	7813      	ldrb	r3, [r2, #0]
   2453c:	3302      	adds	r3, #2
   2453e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   24540:	f7e8 fdb5 	bl	d0ae <sdc_hci_cmd_le_set_data_length>
   24544:	e03d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   24546:	7813      	ldrb	r3, [r2, #0]
   24548:	3304      	adds	r3, #4
   2454a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2454c:	4608      	mov	r0, r1
   2454e:	f7e8 fd9c 	bl	d08a <sdc_hci_cmd_le_read_suggested_default_data_length>
   24552:	e036      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   24554:	f7e8 fdbe 	bl	d0d4 <sdc_hci_cmd_le_write_suggested_default_data_length>
   24558:	e033      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2455a:	f7e8 fd74 	bl	d046 <sdc_hci_cmd_le_add_device_to_resolving_list>
   2455e:	e030      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   24560:	f7e8 fd99 	bl	d096 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   24564:	e02d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   24566:	f7e8 fd72 	bl	d04e <sdc_hci_cmd_le_clear_resolving_list>
   2456a:	e02a      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2456c:	7813      	ldrb	r3, [r2, #0]
   2456e:	3301      	adds	r3, #1
   24570:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   24572:	4608      	mov	r0, r1
   24574:	f7e8 fd87 	bl	d086 <sdc_hci_cmd_le_read_resolving_list_size>
   24578:	e023      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2457a:	f7e8 fd90 	bl	d09e <sdc_hci_cmd_le_set_address_resolution_enable>
   2457e:	e020      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   24580:	f7e8 fda4 	bl	d0cc <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   24584:	e01d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   24586:	7813      	ldrb	r3, [r2, #0]
   24588:	3308      	adds	r3, #8
   2458a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2458c:	4608      	mov	r0, r1
   2458e:	f7e8 fd74 	bl	d07a <sdc_hci_cmd_le_read_max_data_length>
   24592:	e016      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   24594:	7813      	ldrb	r3, [r2, #0]
   24596:	3304      	adds	r3, #4
   24598:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2459a:	f7e8 fd70 	bl	d07e <sdc_hci_cmd_le_read_phy>
   2459e:	e010      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   245a0:	f7e8 fd87 	bl	d0b2 <sdc_hci_cmd_le_set_default_phy>
   245a4:	e00d      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   245a6:	f7e8 fd8b 	bl	d0c0 <sdc_hci_cmd_le_set_phy>
   245aa:	e00a      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   245ac:	7813      	ldrb	r3, [r2, #0]
   245ae:	3302      	adds	r3, #2
   245b0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   245b2:	4608      	mov	r0, r1
   245b4:	f7e8 fd6b 	bl	d08e <sdc_hci_cmd_le_read_transmit_power>
   245b8:	e003      	b.n	245c2 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   245ba:	f7e8 fd83 	bl	d0c4 <sdc_hci_cmd_le_set_privacy_mode>
   245be:	e000      	b.n	245c2 <le_controller_cmd_put+0x1bc>
   245c0:	2001      	movs	r0, #1
}
   245c2:	bd38      	pop	{r3, r4, r5, pc}

000245c4 <vs_cmd_put>:
{
   245c4:	b538      	push	{r3, r4, r5, lr}
   245c6:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   245c8:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   245ca:	3106      	adds	r1, #6
   245cc:	7865      	ldrb	r5, [r4, #1]
   245ce:	7823      	ldrb	r3, [r4, #0]
   245d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   245d4:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   245d8:	42a3      	cmp	r3, r4
   245da:	d90f      	bls.n	245fc <vs_cmd_put+0x38>
   245dc:	f64f 5405 	movw	r4, #64773	; 0xfd05
   245e0:	42a3      	cmp	r3, r4
   245e2:	d85b      	bhi.n	2469c <vs_cmd_put+0xd8>
   245e4:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   245e8:	d319      	bcc.n	2461e <vs_cmd_put+0x5a>
   245ea:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   245ee:	2b05      	cmp	r3, #5
   245f0:	d850      	bhi.n	24694 <vs_cmd_put+0xd0>
   245f2:	e8df f003 	tbb	[pc, r3]
   245f6:	4038      	.short	0x4038
   245f8:	4c494643 	.word	0x4c494643
   245fc:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   24600:	d801      	bhi.n	24606 <vs_cmd_put+0x42>
   24602:	2001      	movs	r0, #1
}
   24604:	bd38      	pop	{r3, r4, r5, pc}
   24606:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2460a:	3b01      	subs	r3, #1
   2460c:	2b09      	cmp	r3, #9
   2460e:	d843      	bhi.n	24698 <vs_cmd_put+0xd4>
   24610:	e8df f003 	tbb	[pc, r3]
   24614:	42420e07 	.word	0x42420e07
   24618:	42422642 	.word	0x42422642
   2461c:	1f16      	.short	0x1f16
	switch (opcode)	{
   2461e:	2001      	movs	r0, #1
   24620:	e7f0      	b.n	24604 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   24622:	7813      	ldrb	r3, [r2, #0]
   24624:	330c      	adds	r3, #12
   24626:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   24628:	4608      	mov	r0, r1
   2462a:	f7e0 fbcd 	bl	4dc8 <sdc_hci_cmd_vs_zephyr_read_version_info>
   2462e:	e7e9      	b.n	24604 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   24630:	7813      	ldrb	r3, [r2, #0]
   24632:	3340      	adds	r3, #64	; 0x40
   24634:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   24636:	4608      	mov	r0, r1
   24638:	f7ff fed7 	bl	243ea <vs_zephyr_supported_commands>
		return 0;
   2463c:	2000      	movs	r0, #0
   2463e:	e7e1      	b.n	24604 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   24640:	7813      	ldrb	r3, [r2, #0]
   24642:	3301      	adds	r3, #1
   24644:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   24646:	3316      	adds	r3, #22
   24648:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2464a:	4608      	mov	r0, r1
   2464c:	f7e8 fca6 	bl	cf9c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   24650:	e7d8      	b.n	24604 <vs_cmd_put+0x40>
		*param_length_out +=
   24652:	7813      	ldrb	r3, [r2, #0]
   24654:	3320      	adds	r3, #32
   24656:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   24658:	4608      	mov	r0, r1
   2465a:	f7e8 fc52 	bl	cf02 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2465e:	e7d1      	b.n	24604 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   24660:	f7e8 fceb 	bl	d03a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   24664:	e7ce      	b.n	24604 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   24666:	7813      	ldrb	r3, [r2, #0]
   24668:	3340      	adds	r3, #64	; 0x40
   2466a:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2466c:	4608      	mov	r0, r1
   2466e:	f7ff fec7 	bl	24400 <vs_supported_commands>
		return 0;
   24672:	2000      	movs	r0, #0
   24674:	e7c6      	b.n	24604 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   24676:	f7e8 fc3d 	bl	cef4 <sdc_hci_cmd_vs_llpm_mode_set>
   2467a:	e7c3      	b.n	24604 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2467c:	f7e8 fc36 	bl	ceec <sdc_hci_cmd_vs_conn_update>
   24680:	e7c0      	b.n	24604 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   24682:	f7e8 fc2b 	bl	cedc <sdc_hci_cmd_vs_conn_event_extend>
   24686:	e7bd      	b.n	24604 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   24688:	f7e8 fc36 	bl	cef8 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2468c:	e7ba      	b.n	24604 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2468e:	f7e8 fc2f 	bl	cef0 <sdc_hci_cmd_vs_event_length_set>
   24692:	e7b7      	b.n	24604 <vs_cmd_put+0x40>
	switch (opcode)	{
   24694:	2001      	movs	r0, #1
   24696:	e7b5      	b.n	24604 <vs_cmd_put+0x40>
   24698:	2001      	movs	r0, #1
   2469a:	e7b3      	b.n	24604 <vs_cmd_put+0x40>
   2469c:	2001      	movs	r0, #1
   2469e:	e7b1      	b.n	24604 <vs_cmd_put+0x40>

000246a0 <cmd_put>:
{
   246a0:	b570      	push	{r4, r5, r6, lr}
   246a2:	b082      	sub	sp, #8
   246a4:	460e      	mov	r6, r1
   246a6:	7842      	ldrb	r2, [r0, #1]
   246a8:	7805      	ldrb	r5, [r0, #0]
   246aa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   246ae:	2304      	movs	r3, #4
   246b0:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   246b4:	0893      	lsrs	r3, r2, #2
   246b6:	2a23      	cmp	r2, #35	; 0x23
   246b8:	d80b      	bhi.n	246d2 <cmd_put+0x32>
   246ba:	b21a      	sxth	r2, r3
   246bc:	2a00      	cmp	r2, #0
   246be:	d03a      	beq.n	24736 <cmd_put+0x96>
   246c0:	3b01      	subs	r3, #1
   246c2:	2b07      	cmp	r3, #7
   246c4:	d839      	bhi.n	2473a <cmd_put+0x9a>
   246c6:	e8df f003 	tbb	[pc, r3]
   246ca:	381a      	.short	0x381a
   246cc:	382a241e 	.word	0x382a241e
   246d0:	3038      	.short	0x3038
   246d2:	2b3f      	cmp	r3, #63	; 0x3f
   246d4:	d105      	bne.n	246e2 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   246d6:	f10d 0207 	add.w	r2, sp, #7
   246da:	f7ff ff73 	bl	245c4 <vs_cmd_put>
   246de:	4604      	mov	r4, r0
		break;
   246e0:	e000      	b.n	246e4 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   246e2:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   246e4:	4628      	mov	r0, r5
   246e6:	f7ff fd57 	bl	24198 <command_generates_command_complete_event>
   246ea:	b108      	cbz	r0, 246f0 <cmd_put+0x50>
   246ec:	2c01      	cmp	r4, #1
   246ee:	d126      	bne.n	2473e <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   246f0:	4622      	mov	r2, r4
   246f2:	4629      	mov	r1, r5
   246f4:	4630      	mov	r0, r6
   246f6:	f7ff fd8e 	bl	24216 <encode_command_status>
}
   246fa:	b002      	add	sp, #8
   246fc:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   246fe:	f7ff fda5 	bl	2424c <link_control_cmd_put>
   24702:	4604      	mov	r4, r0
		break;
   24704:	e7ee      	b.n	246e4 <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   24706:	f10d 0207 	add.w	r2, sp, #7
   2470a:	f7ff fdb6 	bl	2427a <controller_and_baseband_cmd_put>
   2470e:	4604      	mov	r4, r0
		break;
   24710:	e7e8      	b.n	246e4 <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   24712:	f10d 0207 	add.w	r2, sp, #7
   24716:	f7ff fe2c 	bl	24372 <info_param_cmd_put>
   2471a:	4604      	mov	r4, r0
		break;
   2471c:	e7e2      	b.n	246e4 <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   2471e:	f10d 0207 	add.w	r2, sp, #7
   24722:	f7ff fd91 	bl	24248 <status_param_cmd_put>
   24726:	4604      	mov	r4, r0
		break;
   24728:	e7dc      	b.n	246e4 <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   2472a:	f10d 0207 	add.w	r2, sp, #7
   2472e:	f7ff fe6a 	bl	24406 <le_controller_cmd_put>
   24732:	4604      	mov	r4, r0
		break;
   24734:	e7d6      	b.n	246e4 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   24736:	2401      	movs	r4, #1
   24738:	e7d4      	b.n	246e4 <cmd_put+0x44>
   2473a:	2401      	movs	r4, #1
   2473c:	e7d2      	b.n	246e4 <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2473e:	4623      	mov	r3, r4
   24740:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24744:	4629      	mov	r1, r5
   24746:	4630      	mov	r0, r6
   24748:	f7ff fd6e 	bl	24228 <encode_command_complete_header>
}
   2474c:	e7d5      	b.n	246fa <cmd_put+0x5a>

0002474e <m_assert_handler>:
	k_oops();
   2474e:	4040      	eors	r0, r0
   24750:	f380 8811 	msr	BASEPRI, r0
   24754:	f04f 0003 	mov.w	r0, #3
   24758:	df02      	svc	2
}
   2475a:	4770      	bx	lr

0002475c <m_config_clock_source_get>:
}
   2475c:	2000      	movs	r0, #0
   2475e:	4770      	bx	lr

00024760 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24760:	4668      	mov	r0, sp
   24762:	f020 0107 	bic.w	r1, r0, #7
   24766:	468d      	mov	sp, r1
   24768:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2476a:	f7de ff0d 	bl	3588 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2476e:	f7ef f951 	bl	13a14 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24772:	f7ef fa5d 	bl	13c30 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24776:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2477a:	4685      	mov	sp, r0
   2477c:	4770      	bx	lr

0002477e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2477e:	4668      	mov	r0, sp
   24780:	f020 0107 	bic.w	r1, r0, #7
   24784:	468d      	mov	sp, r1
   24786:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   24788:	f7de fe80 	bl	348c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2478c:	f7ef f942 	bl	13a14 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24790:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24794:	4685      	mov	sp, r0
   24796:	4770      	bx	lr

00024798 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24798:	4668      	mov	r0, sp
   2479a:	f020 0107 	bic.w	r1, r0, #7
   2479e:	468d      	mov	sp, r1
   247a0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   247a2:	f7e7 fe52 	bl	c44a <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   247a6:	f7ef f935 	bl	13a14 <_arch_isr_direct_pm>
   247aa:	f7ef fa41 	bl	13c30 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   247ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   247b2:	4685      	mov	sp, r0
   247b4:	4770      	bx	lr

000247b6 <nrfx_clock_stop>:
	switch (domain) {
   247b6:	2801      	cmp	r0, #1
   247b8:	d000      	beq.n	247bc <nrfx_clock_stop+0x6>
   247ba:	4770      	bx	lr
{
   247bc:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   247be:	f7df fcfb 	bl	41b8 <mpsl_clock_hfclk_release>
}
   247c2:	bd08      	pop	{r3, pc}

000247c4 <nrfx_clock_enable>:
}
   247c4:	4770      	bx	lr

000247c6 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   247c6:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   247c8:	f7df fb14 	bl	3df4 <MPSL_IRQ_CLOCK_Handler>
}
   247cc:	bd08      	pop	{r3, pc}

000247ce <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   247ce:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   247d0:	f7f7 feba 	bl	1c548 <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   247d4:	bd08      	pop	{r3, pc}

000247d6 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   247d6:	b510      	push	{r4, lr}
   247d8:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   247da:	f7ee ffd9 	bl	13790 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   247de:	f7ef f899 	bl	13914 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   247e2:	4620      	mov	r0, r4
   247e4:	f7ff fff3 	bl	247ce <hw_cc3xx_init_internal>
	return res;
}
   247e8:	bd10      	pop	{r4, pc}

000247ea <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   247ea:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   247ec:	4780      	blx	r0
}
   247ee:	bd08      	pop	{r3, pc}

000247f0 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   247f0:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   247f2:	f000 fe76 	bl	254e2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   247f6:	bd08      	pop	{r3, pc}

000247f8 <pin_is_task_output>:
{
   247f8:	b510      	push	{r4, lr}
   247fa:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   247fc:	f7f4 feda 	bl	195b4 <pin_is_output>
   24800:	b128      	cbz	r0, 2480e <pin_is_task_output+0x16>
   24802:	4620      	mov	r0, r4
   24804:	f7f4 fec0 	bl	19588 <pin_in_use_by_te>
   24808:	b118      	cbz	r0, 24812 <pin_is_task_output+0x1a>
   2480a:	2001      	movs	r0, #1
   2480c:	e000      	b.n	24810 <pin_is_task_output+0x18>
   2480e:	2000      	movs	r0, #0
}
   24810:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   24812:	2000      	movs	r0, #0
   24814:	e7fc      	b.n	24810 <pin_is_task_output+0x18>

00024816 <pin_is_input>:
{
   24816:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   24818:	f7f4 fecc 	bl	195b4 <pin_is_output>
   2481c:	f080 0001 	eor.w	r0, r0, #1
}
   24820:	b2c0      	uxtb	r0, r0
   24822:	bd08      	pop	{r3, pc}

00024824 <gpiote_polarity_to_trigger>:
}
   24824:	4770      	bx	lr

00024826 <gpiote_trigger_to_polarity>:
}
   24826:	4770      	bx	lr

00024828 <is_level>:
}
   24828:	2803      	cmp	r0, #3
   2482a:	bf94      	ite	ls
   2482c:	2000      	movls	r0, #0
   2482e:	2001      	movhi	r0, #1
   24830:	4770      	bx	lr

00024832 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   24832:	7b0b      	ldrb	r3, [r1, #12]
   24834:	2b03      	cmp	r3, #3
   24836:	d839      	bhi.n	248ac <xfer_completeness_check+0x7a>
   24838:	e8df f003 	tbb	[pc, r3]
   2483c:	0216312a 	.word	0x0216312a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   24840:	688b      	ldr	r3, [r1, #8]
   24842:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   24846:	d004      	beq.n	24852 <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   24848:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2484c:	690a      	ldr	r2, [r1, #16]
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2484e:	429a      	cmp	r2, r3
   24850:	d10f      	bne.n	24872 <xfer_completeness_check+0x40>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   24852:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   24854:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   24858:	d12a      	bne.n	248b0 <xfer_completeness_check+0x7e>
   2485a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length)))
   2485e:	694a      	ldr	r2, [r1, #20]
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   24860:	429a      	cmp	r2, r3
   24862:	d106      	bne.n	24872 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   24864:	2001      	movs	r0, #1
   24866:	4770      	bx	lr
   24868:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2486c:	690a      	ldr	r2, [r1, #16]
   2486e:	429a      	cmp	r2, r3
   24870:	d007      	beq.n	24882 <xfer_completeness_check+0x50>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   24872:	2300      	movs	r3, #0
   24874:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   24878:	2206      	movs	r2, #6
   2487a:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   2487e:	4618      	mov	r0, r3
   24880:	4770      	bx	lr
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   24882:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
                (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.secondary_length))
   24886:	694a      	ldr	r2, [r1, #20]
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   24888:	429a      	cmp	r2, r3
   2488a:	d1f2      	bne.n	24872 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   2488c:	2001      	movs	r0, #1
   2488e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   24890:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   24894:	690a      	ldr	r2, [r1, #16]
   24896:	429a      	cmp	r2, r3
   24898:	d1eb      	bne.n	24872 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   2489a:	2001      	movs	r0, #1
   2489c:	4770      	bx	lr
    return p_reg->RXD.AMOUNT;
   2489e:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   248a2:	690a      	ldr	r2, [r1, #16]
   248a4:	429a      	cmp	r2, r3
   248a6:	d1e4      	bne.n	24872 <xfer_completeness_check+0x40>
    bool transfer_complete = true;
   248a8:	2001      	movs	r0, #1
}
   248aa:	4770      	bx	lr
    switch (p_cb->xfer_desc.type)
   248ac:	2001      	movs	r0, #1
   248ae:	4770      	bx	lr
    bool transfer_complete = true;
   248b0:	2001      	movs	r0, #1
   248b2:	4770      	bx	lr

000248b4 <twim_list_enable_handle>:
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   248b4:	f011 0f01 	tst.w	r1, #1
   248b8:	d009      	beq.n	248ce <twim_list_enable_handle+0x1a>
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   248ba:	2301      	movs	r3, #1
   248bc:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   248c0:	f011 0f02 	tst.w	r1, #2
   248c4:	d007      	beq.n	248d6 <twim_list_enable_handle+0x22>
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   248c6:	2301      	movs	r3, #1
   248c8:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   248cc:	4770      	bx	lr
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   248ce:	2300      	movs	r3, #0
   248d0:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   248d4:	e7f4      	b.n	248c0 <twim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   248d6:	2300      	movs	r3, #0
   248d8:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   248dc:	4770      	bx	lr

000248de <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   248de:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   248e0:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   248e2:	4293      	cmp	r3, r2
   248e4:	d804      	bhi.n	248f0 <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   248e6:	6880      	ldr	r0, [r0, #8]
   248e8:	1a80      	subs	r0, r0, r2
   248ea:	4403      	add	r3, r0
   248ec:	1e58      	subs	r0, r3, #1
   248ee:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   248f0:	1a9b      	subs	r3, r3, r2
   248f2:	1e58      	subs	r0, r3, #1
}
   248f4:	4770      	bx	lr

000248f6 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   248f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   248fa:	4604      	mov	r4, r0
   248fc:	4688      	mov	r8, r1
   248fe:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   24900:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   24902:	6887      	ldr	r7, [r0, #8]
   24904:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   24908:	4591      	cmp	r9, r2
   2490a:	d909      	bls.n	24920 <_WriteNoCheck+0x2a>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2490c:	6840      	ldr	r0, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2490e:	4428      	add	r0, r5
   24910:	f000 ff09 	bl	25726 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   24914:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
   24918:	4435      	add	r5, r6
   2491a:	60e5      	str	r5, [r4, #12]
}
   2491c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24920:	6840      	ldr	r0, [r0, #4]
   24922:	464a      	mov	r2, r9
   24924:	4428      	add	r0, r5
   24926:	f000 fefe 	bl	25726 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   2492a:	1bed      	subs	r5, r5, r7
   2492c:	4435      	add	r5, r6
   2492e:	462a      	mov	r2, r5
   24930:	eb08 0109 	add.w	r1, r8, r9
   24934:	6860      	ldr	r0, [r4, #4]
   24936:	f000 fef6 	bl	25726 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   2493a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   2493e:	60e5      	str	r5, [r4, #12]
}
   24940:	e7ec      	b.n	2491c <_WriteNoCheck+0x26>

00024942 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   24942:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24946:	4606      	mov	r6, r0
   24948:	4688      	mov	r8, r1
   2494a:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   2494c:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   2494e:	f04f 0900 	mov.w	r9, #0
   24952:	e01a      	b.n	2498a <_WriteBlocking+0x48>
      NumBytesToWrite = RdOff - WrOff - 1u;
   24954:	1b64      	subs	r4, r4, r5
   24956:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   24958:	68b3      	ldr	r3, [r6, #8]
   2495a:	1b5c      	subs	r4, r3, r5
   2495c:	4294      	cmp	r4, r2
   2495e:	bf28      	it	cs
   24960:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   24962:	42bc      	cmp	r4, r7
   24964:	bf28      	it	cs
   24966:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24968:	6870      	ldr	r0, [r6, #4]
   2496a:	4622      	mov	r2, r4
   2496c:	4641      	mov	r1, r8
   2496e:	4428      	add	r0, r5
   24970:	f000 fed9 	bl	25726 <memcpy>
    NumBytesWritten += NumBytesToWrite;
   24974:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   24976:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   24978:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   2497a:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   2497c:	68b3      	ldr	r3, [r6, #8]
   2497e:	42ab      	cmp	r3, r5
   24980:	d00b      	beq.n	2499a <_WriteBlocking+0x58>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   24982:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   24986:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   24988:	b14f      	cbz	r7, 2499e <_WriteBlocking+0x5c>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2498a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   2498c:	42a5      	cmp	r5, r4
   2498e:	d3e1      	bcc.n	24954 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   24990:	68b2      	ldr	r2, [r6, #8]
   24992:	1b64      	subs	r4, r4, r5
   24994:	4414      	add	r4, r2
   24996:	1e62      	subs	r2, r4, #1
   24998:	e7de      	b.n	24958 <_WriteBlocking+0x16>
      WrOff = 0u;
   2499a:	2500      	movs	r5, #0
   2499c:	e7f1      	b.n	24982 <_WriteBlocking+0x40>
}
   2499e:	4648      	mov	r0, r9
   249a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000249a4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   249a4:	b508      	push	{r3, lr}
  _DoInit();
   249a6:	f7f5 fe33 	bl	1a610 <_DoInit>
}
   249aa:	bd08      	pop	{r3, pc}

000249ac <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   249ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   249ae:	f7ff fff9 	bl	249a4 <SEGGER_RTT_Init>

	return 0;
}
   249b2:	2000      	movs	r0, #0
   249b4:	bd08      	pop	{r3, pc}

000249b6 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   249b6:	b148      	cbz	r0, 249cc <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   249b8:	68c3      	ldr	r3, [r0, #12]
   249ba:	8818      	ldrh	r0, [r3, #0]
   249bc:	f3c0 0008 	ubfx	r0, r0, #0, #9
   249c0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   249c4:	bf14      	ite	ne
   249c6:	2000      	movne	r0, #0
   249c8:	2001      	moveq	r0, #1
   249ca:	4770      	bx	lr
		return false;
   249cc:	2000      	movs	r0, #0
}
   249ce:	4770      	bx	lr

000249d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   249d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249d2:	4605      	mov	r5, r0
   249d4:	460e      	mov	r6, r1
	__asm__ volatile(
   249d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   249da:	f3ef 8711 	mrs	r7, BASEPRI
   249de:	f383 8812 	msr	BASEPRI_MAX, r3
   249e2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   249e6:	f7f7 f829 	bl	1ba3c <z_impl_z_current_get>
   249ea:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   249ec:	4631      	mov	r1, r6
   249ee:	4628      	mov	r0, r5
   249f0:	f7ff fac5 	bl	23f7e <k_sys_fatal_error_handler>
	__asm__ volatile(
   249f4:	f387 8811 	msr	BASEPRI, r7
   249f8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   249fc:	4620      	mov	r0, r4
   249fe:	f7ef fac9 	bl	13f94 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024a04 <k_heap_init>:
{
   24a04:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   24a06:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   24a0a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   24a0c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   24a0e:	f7fb fc57 	bl	202c0 <sys_heap_init>
}
   24a12:	bd10      	pop	{r4, pc}

00024a14 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a18:	b087      	sub	sp, #28
   24a1a:	4680      	mov	r8, r0
   24a1c:	9103      	str	r1, [sp, #12]
   24a1e:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   24a24:	f000 fd63 	bl	254ee <sys_clock_timeout_end_calc>
   24a28:	4681      	mov	r9, r0
   24a2a:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24a2c:	f108 0314 	add.w	r3, r8, #20
   24a30:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   24a32:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a36:	f3ef 8511 	mrs	r5, BASEPRI
   24a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   24a3e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   24a42:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   24a46:	4654      	mov	r4, sl

	while (ret == NULL) {
   24a48:	e00f      	b.n	24a6a <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24a4a:	e9cd 6700 	strd	r6, r7, [sp]
   24a4e:	f108 020c 	add.w	r2, r8, #12
   24a52:	4629      	mov	r1, r5
   24a54:	9805      	ldr	r0, [sp, #20]
   24a56:	f7f6 fdfb 	bl	1b650 <z_pend_curr>
   24a5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a5e:	f3ef 8511 	mrs	r5, BASEPRI
   24a62:	f383 8812 	msr	BASEPRI_MAX, r3
   24a66:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   24a6a:	b9b4      	cbnz	r4, 24a9a <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24a6c:	9a04      	ldr	r2, [sp, #16]
   24a6e:	9903      	ldr	r1, [sp, #12]
   24a70:	4640      	mov	r0, r8
   24a72:	f7fb fbb4 	bl	201de <sys_heap_aligned_alloc>
   24a76:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   24a78:	f7f7 f99e 	bl	1bdb8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24a7c:	b96c      	cbnz	r4, 24a9a <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   24a7e:	ebb9 0600 	subs.w	r6, r9, r0
   24a82:	eb6b 0701 	sbc.w	r7, fp, r1
   24a86:	2e01      	cmp	r6, #1
   24a88:	f177 0300 	sbcs.w	r3, r7, #0
   24a8c:	db05      	blt.n	24a9a <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   24a8e:	f1ba 0f00 	cmp.w	sl, #0
   24a92:	d1da      	bne.n	24a4a <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   24a94:	f04f 0a01 	mov.w	sl, #1
   24a98:	e7d7      	b.n	24a4a <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   24a9a:	f385 8811 	msr	BASEPRI, r5
   24a9e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24aa2:	4620      	mov	r0, r4
   24aa4:	b007      	add	sp, #28
   24aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024aaa <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24aaa:	b570      	push	{r4, r5, r6, lr}
   24aac:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24aae:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   24ab2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ab6:	f3ef 8511 	mrs	r5, BASEPRI
   24aba:	f383 8812 	msr	BASEPRI_MAX, r3
   24abe:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   24ac2:	f7fb fb48 	bl	20156 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24ac6:	f104 000c 	add.w	r0, r4, #12
   24aca:	f000 fc40 	bl	2534e <z_unpend_all>
   24ace:	b920      	cbnz	r0, 24ada <k_heap_free+0x30>
	__asm__ volatile(
   24ad0:	f385 8811 	msr	BASEPRI, r5
   24ad4:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24ad8:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   24ada:	4629      	mov	r1, r5
   24adc:	4630      	mov	r0, r6
   24ade:	f7f6 fc53 	bl	1b388 <z_reschedule>
   24ae2:	e7f9      	b.n	24ad8 <k_heap_free+0x2e>

00024ae4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24ae4:	68c2      	ldr	r2, [r0, #12]
   24ae6:	6903      	ldr	r3, [r0, #16]
   24ae8:	431a      	orrs	r2, r3
   24aea:	f012 0203 	ands.w	r2, r2, #3
   24aee:	d10d      	bne.n	24b0c <create_free_list+0x28>
	slab->free_list = NULL;
   24af0:	2100      	movs	r1, #0
   24af2:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24af4:	e005      	b.n	24b02 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   24af6:	6941      	ldr	r1, [r0, #20]
   24af8:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   24afa:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   24afc:	68c1      	ldr	r1, [r0, #12]
   24afe:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   24b00:	3201      	adds	r2, #1
   24b02:	6881      	ldr	r1, [r0, #8]
   24b04:	4291      	cmp	r1, r2
   24b06:	d8f6      	bhi.n	24af6 <create_free_list+0x12>
	return 0;
   24b08:	2000      	movs	r0, #0
   24b0a:	4770      	bx	lr
		return -EINVAL;
   24b0c:	f06f 0015 	mvn.w	r0, #21
}
   24b10:	4770      	bx	lr

00024b12 <k_mem_slab_init>:
{
   24b12:	b510      	push	{r4, lr}
   24b14:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   24b16:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   24b18:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   24b1a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   24b1c:	2300      	movs	r3, #0
   24b1e:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   24b20:	f7ff ffe0 	bl	24ae4 <create_free_list>
	if (rc < 0) {
   24b24:	2800      	cmp	r0, #0
   24b26:	db01      	blt.n	24b2c <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   24b28:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   24b2a:	6064      	str	r4, [r4, #4]
}
   24b2c:	bd10      	pop	{r4, pc}

00024b2e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b30:	4604      	mov	r4, r0
   24b32:	460d      	mov	r5, r1
	__asm__ volatile(
   24b34:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b38:	f3ef 8611 	mrs	r6, BASEPRI
   24b3c:	f383 8812 	msr	BASEPRI_MAX, r3
   24b40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24b44:	6943      	ldr	r3, [r0, #20]
   24b46:	b163      	cbz	r3, 24b62 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   24b48:	682b      	ldr	r3, [r5, #0]
   24b4a:	6962      	ldr	r2, [r4, #20]
   24b4c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24b4e:	682b      	ldr	r3, [r5, #0]
   24b50:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   24b52:	69a3      	ldr	r3, [r4, #24]
   24b54:	3b01      	subs	r3, #1
   24b56:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   24b58:	f386 8811 	msr	BASEPRI, r6
   24b5c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24b62:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24b66:	f000 fbc7 	bl	252f8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   24b6a:	2800      	cmp	r0, #0
   24b6c:	d0ec      	beq.n	24b48 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24b6e:	682a      	ldr	r2, [r5, #0]
   24b70:	2100      	movs	r1, #0
   24b72:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24b76:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24b78:	f000 fafc 	bl	25174 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24b7c:	4631      	mov	r1, r6
   24b7e:	4638      	mov	r0, r7
   24b80:	f7f6 fc02 	bl	1b388 <z_reschedule>
			return;
   24b84:	e7ec      	b.n	24b60 <k_mem_slab_free+0x32>

00024b86 <setup_thread_stack>:
{
   24b86:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24b88:	3207      	adds	r2, #7
   24b8a:	f022 0207 	bic.w	r2, r2, #7
   24b8e:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   24b92:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   24b96:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   24b9a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   24b9e:	2200      	movs	r2, #0
   24ba0:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   24ba4:	18c8      	adds	r0, r1, r3
   24ba6:	bc10      	pop	{r4}
   24ba8:	4770      	bx	lr

00024baa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24baa:	f3ef 8005 	mrs	r0, IPSR
}
   24bae:	3800      	subs	r0, #0
   24bb0:	bf18      	it	ne
   24bb2:	2001      	movne	r0, #1
   24bb4:	4770      	bx	lr

00024bb6 <z_impl_k_thread_start>:
{
   24bb6:	b508      	push	{r3, lr}
	z_sched_start(thread);
   24bb8:	f7f6 fd10 	bl	1b5dc <z_sched_start>
}
   24bbc:	bd08      	pop	{r3, pc}

00024bbe <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   24bbe:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   24bc0:	2400      	movs	r4, #0
   24bc2:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   24bc4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24bc6:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   24bc8:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   24bca:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   24bcc:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   24bce:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   24bd0:	bc10      	pop	{r4}
   24bd2:	4770      	bx	lr

00024bd4 <z_impl_k_thread_create>:
{
   24bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24bd6:	b087      	sub	sp, #28
   24bd8:	4604      	mov	r4, r0
   24bda:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24bde:	2500      	movs	r5, #0
   24be0:	9505      	str	r5, [sp, #20]
   24be2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24be4:	9504      	str	r5, [sp, #16]
   24be6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24be8:	9503      	str	r5, [sp, #12]
   24bea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24bec:	9502      	str	r5, [sp, #8]
   24bee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24bf0:	9501      	str	r5, [sp, #4]
   24bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24bf4:	9500      	str	r5, [sp, #0]
   24bf6:	f7f5 ff71 	bl	1aadc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24bfa:	f1b7 3fff 	cmp.w	r7, #4294967295
   24bfe:	bf08      	it	eq
   24c00:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24c04:	d102      	bne.n	24c0c <z_impl_k_thread_create+0x38>
}
   24c06:	4620      	mov	r0, r4
   24c08:	b007      	add	sp, #28
   24c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   24c0c:	4632      	mov	r2, r6
   24c0e:	463b      	mov	r3, r7
   24c10:	4620      	mov	r0, r4
   24c12:	f7f5 ff51 	bl	1aab8 <schedule_new_thread>
   24c16:	e7f6      	b.n	24c06 <z_impl_k_thread_create+0x32>

00024c18 <z_pm_save_idle_exit>:
{
   24c18:	b508      	push	{r3, lr}
	pm_system_resume();
   24c1a:	f7ee f891 	bl	12d40 <pm_system_resume>
	sys_clock_idle_exit();
   24c1e:	f7ff f93f 	bl	23ea0 <sys_clock_idle_exit>
}
   24c22:	bd08      	pop	{r3, pc}

00024c24 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   24c24:	4288      	cmp	r0, r1
   24c26:	da00      	bge.n	24c2a <new_prio_for_inheritance+0x6>
   24c28:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   24c2a:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   24c2e:	db01      	blt.n	24c34 <new_prio_for_inheritance+0x10>
   24c30:	4608      	mov	r0, r1
   24c32:	4770      	bx	lr
   24c34:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   24c38:	4770      	bx	lr

00024c3a <adjust_owner_prio>:
{
   24c3a:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   24c3c:	6880      	ldr	r0, [r0, #8]
   24c3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   24c42:	428b      	cmp	r3, r1
   24c44:	d101      	bne.n	24c4a <adjust_owner_prio+0x10>
	return false;
   24c46:	2000      	movs	r0, #0
}
   24c48:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   24c4a:	f7f6 fd15 	bl	1b678 <z_set_prio>
   24c4e:	e7fb      	b.n	24c48 <adjust_owner_prio+0xe>

00024c50 <z_impl_k_mutex_init>:
{
   24c50:	4603      	mov	r3, r0
	mutex->owner = NULL;
   24c52:	2000      	movs	r0, #0
   24c54:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   24c56:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   24c58:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   24c5a:	605b      	str	r3, [r3, #4]
}
   24c5c:	4770      	bx	lr

00024c5e <prepare_thread_to_run>:
{
   24c5e:	b508      	push	{r3, lr}
   24c60:	2200      	movs	r2, #0
   24c62:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   24c66:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   24c68:	f000 fa84 	bl	25174 <z_ready_thread>
}
   24c6c:	bd08      	pop	{r3, pc}

00024c6e <queue_insert>:
{
   24c6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c72:	4605      	mov	r5, r0
   24c74:	460e      	mov	r6, r1
   24c76:	4614      	mov	r4, r2
   24c78:	461f      	mov	r7, r3
   24c7a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24c7e:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   24c82:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c86:	f3ef 8911 	mrs	r9, BASEPRI
   24c8a:	f383 8812 	msr	BASEPRI_MAX, r3
   24c8e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   24c92:	b102      	cbz	r2, 24c96 <queue_insert+0x28>
	return list->tail;
   24c94:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24c96:	4640      	mov	r0, r8
   24c98:	f000 fb2e 	bl	252f8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   24c9c:	b9a0      	cbnz	r0, 24cc8 <queue_insert+0x5a>
	if (alloc) {
   24c9e:	b9e7      	cbnz	r7, 24cda <queue_insert+0x6c>
	node->next_and_flags = flags;
   24ca0:	2300      	movs	r3, #0
   24ca2:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24ca4:	b356      	cbz	r6, 24cfc <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24ca6:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24ca8:	f033 0303 	bics.w	r3, r3, #3
   24cac:	d134      	bne.n	24d18 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24cae:	6823      	ldr	r3, [r4, #0]
   24cb0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24cb4:	6023      	str	r3, [r4, #0]
	return list->tail;
   24cb6:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24cb8:	b35a      	cbz	r2, 24d12 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24cba:	6813      	ldr	r3, [r2, #0]
   24cbc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24cc0:	4323      	orrs	r3, r4
   24cc2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   24cc4:	606c      	str	r4, [r5, #4]
}
   24cc6:	e031      	b.n	24d2c <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   24cc8:	4621      	mov	r1, r4
   24cca:	f7ff ffc8 	bl	24c5e <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   24cce:	4649      	mov	r1, r9
   24cd0:	4640      	mov	r0, r8
   24cd2:	f7f6 fb59 	bl	1b388 <z_reschedule>
		return 0;
   24cd6:	2000      	movs	r0, #0
   24cd8:	e032      	b.n	24d40 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   24cda:	2108      	movs	r1, #8
   24cdc:	2000      	movs	r0, #0
   24cde:	f7f7 fc11 	bl	1c504 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24ce2:	b120      	cbz	r0, 24cee <queue_insert+0x80>
		anode->data = data;
   24ce4:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   24ce6:	2201      	movs	r2, #1
   24ce8:	6002      	str	r2, [r0, #0]
		data = anode;
   24cea:	4604      	mov	r4, r0
   24cec:	e7da      	b.n	24ca4 <queue_insert+0x36>
	__asm__ volatile(
   24cee:	f389 8811 	msr	BASEPRI, r9
   24cf2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24cf6:	f06f 000b 	mvn.w	r0, #11
   24cfa:	e021      	b.n	24d40 <queue_insert+0xd2>
	return list->head;
   24cfc:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24cfe:	6823      	ldr	r3, [r4, #0]
   24d00:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24d04:	4313      	orrs	r3, r2
   24d06:	6023      	str	r3, [r4, #0]
	list->head = node;
   24d08:	602c      	str	r4, [r5, #0]
	return list->tail;
   24d0a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   24d0c:	b973      	cbnz	r3, 24d2c <queue_insert+0xbe>
	list->tail = node;
   24d0e:	606c      	str	r4, [r5, #4]
}
   24d10:	e00c      	b.n	24d2c <queue_insert+0xbe>
	list->tail = node;
   24d12:	606c      	str	r4, [r5, #4]
	list->head = node;
   24d14:	602c      	str	r4, [r5, #0]
}
   24d16:	e009      	b.n	24d2c <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24d18:	6822      	ldr	r2, [r4, #0]
   24d1a:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24d1e:	4313      	orrs	r3, r2
   24d20:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24d22:	6833      	ldr	r3, [r6, #0]
   24d24:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24d28:	431c      	orrs	r4, r3
   24d2a:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24d2c:	2104      	movs	r1, #4
   24d2e:	f105 0010 	add.w	r0, r5, #16
   24d32:	f000 fcbc 	bl	256ae <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24d36:	4649      	mov	r1, r9
   24d38:	4640      	mov	r0, r8
   24d3a:	f7f6 fb25 	bl	1b388 <z_reschedule>
	return 0;
   24d3e:	2000      	movs	r0, #0
}
   24d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024d44 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   24d44:	b160      	cbz	r0, 24d60 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24d46:	6803      	ldr	r3, [r0, #0]
   24d48:	f013 0f03 	tst.w	r3, #3
   24d4c:	d008      	beq.n	24d60 <z_queue_node_peek+0x1c>
{
   24d4e:	b510      	push	{r4, lr}
		ret = anode->data;
   24d50:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   24d52:	b909      	cbnz	r1, 24d58 <z_queue_node_peek+0x14>
		ret = anode->data;
   24d54:	4620      	mov	r0, r4
}
   24d56:	bd10      	pop	{r4, pc}
			k_free(anode);
   24d58:	f000 fccd 	bl	256f6 <k_free>
		ret = anode->data;
   24d5c:	4620      	mov	r0, r4
   24d5e:	e7fa      	b.n	24d56 <z_queue_node_peek+0x12>
}
   24d60:	4770      	bx	lr

00024d62 <z_impl_k_queue_init>:
	list->head = NULL;
   24d62:	2300      	movs	r3, #0
   24d64:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   24d66:	6043      	str	r3, [r0, #4]
   24d68:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   24d6c:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   24d6e:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   24d70:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   24d74:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   24d76:	6143      	str	r3, [r0, #20]
}
   24d78:	4770      	bx	lr

00024d7a <k_queue_append>:
{
   24d7a:	b500      	push	{lr}
   24d7c:	b083      	sub	sp, #12
   24d7e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   24d80:	2301      	movs	r3, #1
   24d82:	9300      	str	r3, [sp, #0]
   24d84:	2300      	movs	r3, #0
   24d86:	4619      	mov	r1, r3
   24d88:	f7ff ff71 	bl	24c6e <queue_insert>
}
   24d8c:	b003      	add	sp, #12
   24d8e:	f85d fb04 	ldr.w	pc, [sp], #4

00024d92 <k_queue_prepend>:
{
   24d92:	b500      	push	{lr}
   24d94:	b083      	sub	sp, #12
   24d96:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   24d98:	2100      	movs	r1, #0
   24d9a:	9100      	str	r1, [sp, #0]
   24d9c:	460b      	mov	r3, r1
   24d9e:	f7ff ff66 	bl	24c6e <queue_insert>
}
   24da2:	b003      	add	sp, #12
   24da4:	f85d fb04 	ldr.w	pc, [sp], #4

00024da8 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   24da8:	b3a1      	cbz	r1, 24e14 <k_queue_append_list+0x6c>
{
   24daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24dae:	4606      	mov	r6, r0
   24db0:	4617      	mov	r7, r2
   24db2:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   24db4:	b38a      	cbz	r2, 24e1a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24db6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24dba:	f04f 0340 	mov.w	r3, #64	; 0x40
   24dbe:	f3ef 8811 	mrs	r8, BASEPRI
   24dc2:	f383 8812 	msr	BASEPRI_MAX, r3
   24dc6:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   24dca:	4628      	mov	r0, r5
   24dcc:	f000 fa94 	bl	252f8 <z_unpend_first_thread>
   24dd0:	e006      	b.n	24de0 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   24dd2:	4621      	mov	r1, r4
   24dd4:	f7ff ff43 	bl	24c5e <prepare_thread_to_run>
		head = *(void **)head;
   24dd8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   24dda:	4628      	mov	r0, r5
   24ddc:	f000 fa8c 	bl	252f8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24de0:	b10c      	cbz	r4, 24de6 <k_queue_append_list+0x3e>
   24de2:	2800      	cmp	r0, #0
   24de4:	d1f5      	bne.n	24dd2 <k_queue_append_list+0x2a>
	if (head != NULL) {
   24de6:	b13c      	cbz	r4, 24df8 <k_queue_append_list+0x50>
	return list->tail;
   24de8:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24dea:	b18a      	cbz	r2, 24e10 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24dec:	6813      	ldr	r3, [r2, #0]
   24dee:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24df2:	431c      	orrs	r4, r3
   24df4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24df6:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24df8:	2104      	movs	r1, #4
   24dfa:	f106 0010 	add.w	r0, r6, #16
   24dfe:	f000 fc56 	bl	256ae <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24e02:	4641      	mov	r1, r8
   24e04:	4628      	mov	r0, r5
   24e06:	f7f6 fabf 	bl	1b388 <z_reschedule>
	return 0;
   24e0a:	2000      	movs	r0, #0
}
   24e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   24e10:	6034      	str	r4, [r6, #0]
}
   24e12:	e7f0      	b.n	24df6 <k_queue_append_list+0x4e>
		return -EINVAL;
   24e14:	f06f 0015 	mvn.w	r0, #21
}
   24e18:	4770      	bx	lr
		return -EINVAL;
   24e1a:	f06f 0015 	mvn.w	r0, #21
   24e1e:	e7f5      	b.n	24e0c <k_queue_append_list+0x64>

00024e20 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24e20:	b15a      	cbz	r2, 24e3a <z_impl_k_sem_init+0x1a>
   24e22:	428a      	cmp	r2, r1
   24e24:	d30c      	bcc.n	24e40 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   24e26:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   24e28:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   24e2a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   24e2c:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   24e2e:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   24e32:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   24e34:	6143      	str	r3, [r0, #20]
	return 0;
   24e36:	2000      	movs	r0, #0
   24e38:	4770      	bx	lr
		return -EINVAL;
   24e3a:	f06f 0015 	mvn.w	r0, #21
   24e3e:	4770      	bx	lr
   24e40:	f06f 0015 	mvn.w	r0, #21
}
   24e44:	4770      	bx	lr

00024e46 <cancel_async_locked>:
{
   24e46:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   24e48:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24e4a:	f012 0f02 	tst.w	r2, #2
   24e4e:	d009      	beq.n	24e64 <cancel_async_locked+0x1e>
	return *flagp;
   24e50:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   24e52:	f012 000f 	ands.w	r0, r2, #15
   24e56:	d037      	beq.n	24ec8 <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   24e58:	f042 0202 	orr.w	r2, r2, #2
   24e5c:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   24e5e:	f002 000f 	and.w	r0, r2, #15
	return ret;
   24e62:	4770      	bx	lr
{
   24e64:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   24e66:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   24e68:	f022 0104 	bic.w	r1, r2, #4
   24e6c:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24e6e:	f012 0f04 	tst.w	r2, #4
   24e72:	d011      	beq.n	24e98 <cancel_async_locked+0x52>
	return list->head;
   24e74:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e78:	2100      	movs	r1, #0
   24e7a:	b16a      	cbz	r2, 24e98 <cancel_async_locked+0x52>
   24e7c:	4290      	cmp	r0, r2
   24e7e:	d002      	beq.n	24e86 <cancel_async_locked+0x40>
   24e80:	4611      	mov	r1, r2
   24e82:	6812      	ldr	r2, [r2, #0]
   24e84:	e7f9      	b.n	24e7a <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   24e86:	b191      	cbz	r1, 24eae <cancel_async_locked+0x68>
	return node->next;
   24e88:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   24e8a:	600a      	str	r2, [r1, #0]
	return list->tail;
   24e8c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   24e90:	4293      	cmp	r3, r2
   24e92:	d016      	beq.n	24ec2 <cancel_async_locked+0x7c>
	parent->next = child;
   24e94:	2200      	movs	r2, #0
   24e96:	601a      	str	r2, [r3, #0]
	return *flagp;
   24e98:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   24e9a:	f012 000f 	ands.w	r0, r2, #15
   24e9e:	d004      	beq.n	24eaa <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   24ea0:	f042 0202 	orr.w	r2, r2, #2
   24ea4:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   24ea6:	f002 000f 	and.w	r0, r2, #15
}
   24eaa:	bc10      	pop	{r4}
   24eac:	4770      	bx	lr
	return node->next;
   24eae:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   24eb0:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   24eb4:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   24eb8:	428b      	cmp	r3, r1
   24eba:	d1eb      	bne.n	24e94 <cancel_async_locked+0x4e>
	list->tail = node;
   24ebc:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   24ec0:	e7e8      	b.n	24e94 <cancel_async_locked+0x4e>
	list->tail = node;
   24ec2:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   24ec6:	e7e5      	b.n	24e94 <cancel_async_locked+0x4e>
   24ec8:	4770      	bx	lr

00024eca <work_timeout>:
{
   24eca:	b510      	push	{r4, lr}
   24ecc:	b082      	sub	sp, #8
   24ece:	4603      	mov	r3, r0
   24ed0:	f04f 0240 	mov.w	r2, #64	; 0x40
   24ed4:	f3ef 8411 	mrs	r4, BASEPRI
   24ed8:	f382 8812 	msr	BASEPRI_MAX, r2
   24edc:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   24ee0:	2200      	movs	r2, #0
   24ee2:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   24ee4:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   24ee8:	f022 0108 	bic.w	r1, r2, #8
   24eec:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24ef0:	f012 0f08 	tst.w	r2, #8
   24ef4:	d105      	bne.n	24f02 <work_timeout+0x38>
	__asm__ volatile(
   24ef6:	f384 8811 	msr	BASEPRI, r4
   24efa:	f3bf 8f6f 	isb	sy
}
   24efe:	b002      	add	sp, #8
   24f00:	bd10      	pop	{r4, pc}
   24f02:	3810      	subs	r0, #16
		queue = dw->queue;
   24f04:	699b      	ldr	r3, [r3, #24]
   24f06:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24f08:	a901      	add	r1, sp, #4
   24f0a:	f7f6 f827 	bl	1af5c <submit_to_queue_locked>
   24f0e:	e7f2      	b.n	24ef6 <work_timeout+0x2c>

00024f10 <cancel_delayable_async_locked>:
{
   24f10:	b510      	push	{r4, lr}
   24f12:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   24f14:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   24f16:	f023 0208 	bic.w	r2, r3, #8
   24f1a:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24f1c:	f013 0f08 	tst.w	r3, #8
   24f20:	d103      	bne.n	24f2a <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   24f22:	4620      	mov	r0, r4
   24f24:	f7ff ff8f 	bl	24e46 <cancel_async_locked>
}
   24f28:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   24f2a:	3010      	adds	r0, #16
   24f2c:	f000 fa72 	bl	25414 <z_abort_timeout>
		ret = true;
   24f30:	e7f7      	b.n	24f22 <cancel_delayable_async_locked+0x12>

00024f32 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24f32:	2300      	movs	r3, #0
   24f34:	6003      	str	r3, [r0, #0]
   24f36:	6083      	str	r3, [r0, #8]
   24f38:	60c3      	str	r3, [r0, #12]
   24f3a:	6041      	str	r1, [r0, #4]
}
   24f3c:	4770      	bx	lr

00024f3e <k_work_submit_to_queue>:
{
   24f3e:	b530      	push	{r4, r5, lr}
   24f40:	b083      	sub	sp, #12
   24f42:	9001      	str	r0, [sp, #4]
   24f44:	4608      	mov	r0, r1
	__asm__ volatile(
   24f46:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f4a:	f3ef 8511 	mrs	r5, BASEPRI
   24f4e:	f383 8812 	msr	BASEPRI_MAX, r3
   24f52:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24f56:	a901      	add	r1, sp, #4
   24f58:	f7f6 f800 	bl	1af5c <submit_to_queue_locked>
   24f5c:	4604      	mov	r4, r0
	__asm__ volatile(
   24f5e:	f385 8811 	msr	BASEPRI, r5
   24f62:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24f66:	2800      	cmp	r0, #0
   24f68:	dc02      	bgt.n	24f70 <k_work_submit_to_queue+0x32>
}
   24f6a:	4620      	mov	r0, r4
   24f6c:	b003      	add	sp, #12
   24f6e:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   24f70:	f7f6 fd6a 	bl	1ba48 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24f74:	2800      	cmp	r0, #0
   24f76:	d0f8      	beq.n	24f6a <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   24f78:	f7f6 fca0 	bl	1b8bc <z_impl_k_yield>
	return ret;
   24f7c:	e7f5      	b.n	24f6a <k_work_submit_to_queue+0x2c>

00024f7e <k_work_init_delayable>:
{
   24f7e:	b538      	push	{r3, r4, r5, lr}
   24f80:	4604      	mov	r4, r0
   24f82:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   24f84:	2230      	movs	r2, #48	; 0x30
   24f86:	2100      	movs	r1, #0
   24f88:	f000 fc08 	bl	2579c <memset>
   24f8c:	6065      	str	r5, [r4, #4]
   24f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
   24f92:	60e3      	str	r3, [r4, #12]
}
   24f94:	bd38      	pop	{r3, r4, r5, pc}

00024f96 <k_work_schedule_for_queue>:
{
   24f96:	b510      	push	{r4, lr}
   24f98:	b082      	sub	sp, #8
   24f9a:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   24f9c:	f04f 0040 	mov.w	r0, #64	; 0x40
   24fa0:	f3ef 8411 	mrs	r4, BASEPRI
   24fa4:	f380 8812 	msr	BASEPRI_MAX, r0
   24fa8:	f3bf 8f6f 	isb	sy
	return *flagp;
   24fac:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   24fae:	f010 0f0e 	tst.w	r0, #14
   24fb2:	d006      	beq.n	24fc2 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   24fb4:	2000      	movs	r0, #0
	__asm__ volatile(
   24fb6:	f384 8811 	msr	BASEPRI, r4
   24fba:	f3bf 8f6f 	isb	sy
}
   24fbe:	b002      	add	sp, #8
   24fc0:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   24fc2:	a801      	add	r0, sp, #4
   24fc4:	f7f6 f90c 	bl	1b1e0 <schedule_for_queue_locked>
   24fc8:	e7f5      	b.n	24fb6 <k_work_schedule_for_queue+0x20>

00024fca <k_work_reschedule_for_queue>:
{
   24fca:	b5f0      	push	{r4, r5, r6, r7, lr}
   24fcc:	b083      	sub	sp, #12
   24fce:	9001      	str	r0, [sp, #4]
   24fd0:	460c      	mov	r4, r1
   24fd2:	4616      	mov	r6, r2
   24fd4:	461d      	mov	r5, r3
	__asm__ volatile(
   24fd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fda:	f3ef 8711 	mrs	r7, BASEPRI
   24fde:	f383 8812 	msr	BASEPRI_MAX, r3
   24fe2:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   24fe6:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   24fe8:	f023 0208 	bic.w	r2, r3, #8
   24fec:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24fee:	f013 0f08 	tst.w	r3, #8
   24ff2:	d10b      	bne.n	2500c <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   24ff4:	4632      	mov	r2, r6
   24ff6:	462b      	mov	r3, r5
   24ff8:	4621      	mov	r1, r4
   24ffa:	a801      	add	r0, sp, #4
   24ffc:	f7f6 f8f0 	bl	1b1e0 <schedule_for_queue_locked>
	__asm__ volatile(
   25000:	f387 8811 	msr	BASEPRI, r7
   25004:	f3bf 8f6f 	isb	sy
}
   25008:	b003      	add	sp, #12
   2500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   2500c:	f101 0010 	add.w	r0, r1, #16
   25010:	f000 fa00 	bl	25414 <z_abort_timeout>
		ret = true;
   25014:	e7ee      	b.n	24ff4 <k_work_reschedule_for_queue+0x2a>

00025016 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   25016:	b510      	push	{r4, lr}
	__asm__ volatile(
   25018:	f04f 0340 	mov.w	r3, #64	; 0x40
   2501c:	f3ef 8411 	mrs	r4, BASEPRI
   25020:	f383 8812 	msr	BASEPRI_MAX, r3
   25024:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   25028:	f7ff ff72 	bl	24f10 <cancel_delayable_async_locked>
	__asm__ volatile(
   2502c:	f384 8811 	msr	BASEPRI, r4
   25030:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   25034:	bd10      	pop	{r4, pc}

00025036 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   25036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25038:	460f      	mov	r7, r1
	__asm__ volatile(
   2503a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2503e:	f3ef 8611 	mrs	r6, BASEPRI
   25042:	f383 8812 	msr	BASEPRI_MAX, r3
   25046:	f3bf 8f6f 	isb	sy
	return *flagp;
   2504a:	68c3      	ldr	r3, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2504c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   25050:	2b00      	cmp	r3, #0
   25052:	bf14      	ite	ne
   25054:	2501      	movne	r5, #1
   25056:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   25058:	d107      	bne.n	2506a <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   2505a:	2000      	movs	r0, #0
	__asm__ volatile(
   2505c:	f386 8811 	msr	BASEPRI, r6
   25060:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   25064:	b948      	cbnz	r0, 2507a <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   25066:	4628      	mov	r0, r5
   25068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2506a:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2506c:	f7ff ff50 	bl	24f10 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   25070:	4639      	mov	r1, r7
   25072:	4620      	mov	r0, r4
   25074:	f7f6 f81a 	bl	1b0ac <cancel_sync_locked>
   25078:	e7f0      	b.n	2505c <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   2507a:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   2507e:	f04f 32ff 	mov.w	r2, #4294967295
   25082:	f04f 33ff 	mov.w	r3, #4294967295
   25086:	f7f5 ff25 	bl	1aed4 <z_impl_k_sem_take>
   2508a:	e7ec      	b.n	25066 <k_work_cancel_delayable_sync+0x30>

0002508c <thread_active_elsewhere>:
}
   2508c:	2000      	movs	r0, #0
   2508e:	4770      	bx	lr

00025090 <pended_on_thread>:
}
   25090:	6880      	ldr	r0, [r0, #8]
   25092:	4770      	bx	lr

00025094 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   25094:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25098:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2509c:	4283      	cmp	r3, r0
   2509e:	d001      	beq.n	250a4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   250a0:	1ac0      	subs	r0, r0, r3
   250a2:	4770      	bx	lr
	return 0;
   250a4:	2000      	movs	r0, #0
}
   250a6:	4770      	bx	lr

000250a8 <z_unpend_thread_no_timeout>:
{
   250a8:	b538      	push	{r3, r4, r5, lr}
   250aa:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   250ac:	2300      	movs	r3, #0
	__asm__ volatile(
   250ae:	f04f 0240 	mov.w	r2, #64	; 0x40
   250b2:	f3ef 8511 	mrs	r5, BASEPRI
   250b6:	f382 8812 	msr	BASEPRI_MAX, r2
   250ba:	f3bf 8f6f 	isb	sy
   250be:	b98b      	cbnz	r3, 250e4 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   250c0:	4620      	mov	r0, r4
   250c2:	f7ff ffe5 	bl	25090 <pended_on_thread>
   250c6:	4621      	mov	r1, r4
   250c8:	f000 f822 	bl	25110 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   250cc:	7b63      	ldrb	r3, [r4, #13]
   250ce:	f023 0302 	bic.w	r3, r3, #2
   250d2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   250d4:	2300      	movs	r3, #0
   250d6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   250d8:	f385 8811 	msr	BASEPRI, r5
   250dc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   250e0:	2301      	movs	r3, #1
   250e2:	e7ec      	b.n	250be <z_unpend_thread_no_timeout+0x16>
}
   250e4:	bd38      	pop	{r3, r4, r5, pc}

000250e6 <z_reschedule_irqlock>:
{
   250e6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   250e8:	4603      	mov	r3, r0
   250ea:	b920      	cbnz	r0, 250f6 <z_reschedule_irqlock+0x10>
   250ec:	f3ef 8205 	mrs	r2, IPSR
   250f0:	b942      	cbnz	r2, 25104 <z_reschedule_irqlock+0x1e>
   250f2:	2201      	movs	r2, #1
   250f4:	e000      	b.n	250f8 <z_reschedule_irqlock+0x12>
   250f6:	2200      	movs	r2, #0
	if (resched(key)) {
   250f8:	b932      	cbnz	r2, 25108 <z_reschedule_irqlock+0x22>
   250fa:	f383 8811 	msr	BASEPRI, r3
   250fe:	f3bf 8f6f 	isb	sy
}
   25102:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25104:	2200      	movs	r2, #0
   25106:	e7f7      	b.n	250f8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   25108:	4618      	mov	r0, r3
   2510a:	f7ee fcb3 	bl	13a74 <arch_swap>
	return ret;
   2510e:	e7f8      	b.n	25102 <z_reschedule_irqlock+0x1c>

00025110 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   25110:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   25112:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   25114:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25116:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25118:	2300      	movs	r3, #0
   2511a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2511c:	604b      	str	r3, [r1, #4]
}
   2511e:	4770      	bx	lr

00025120 <z_unpend_thread>:
{
   25120:	b538      	push	{r3, r4, r5, lr}
   25122:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   25124:	2300      	movs	r3, #0
	__asm__ volatile(
   25126:	f04f 0240 	mov.w	r2, #64	; 0x40
   2512a:	f3ef 8511 	mrs	r5, BASEPRI
   2512e:	f382 8812 	msr	BASEPRI_MAX, r2
   25132:	f3bf 8f6f 	isb	sy
   25136:	b98b      	cbnz	r3, 2515c <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25138:	4620      	mov	r0, r4
   2513a:	f7ff ffa9 	bl	25090 <pended_on_thread>
   2513e:	4621      	mov	r1, r4
   25140:	f7ff ffe6 	bl	25110 <z_priq_dumb_remove>
   25144:	7b63      	ldrb	r3, [r4, #13]
   25146:	f023 0302 	bic.w	r3, r3, #2
   2514a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2514c:	2300      	movs	r3, #0
   2514e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   25150:	f385 8811 	msr	BASEPRI, r5
   25154:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25158:	2301      	movs	r3, #1
   2515a:	e7ec      	b.n	25136 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   2515c:	f104 0018 	add.w	r0, r4, #24
   25160:	f000 f958 	bl	25414 <z_abort_timeout>
}
   25164:	bd38      	pop	{r3, r4, r5, pc}

00025166 <z_priq_dumb_best>:
{
   25166:	4603      	mov	r3, r0
	return list->head == list;
   25168:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2516a:	4283      	cmp	r3, r0
   2516c:	d000      	beq.n	25170 <z_priq_dumb_best+0xa>
}
   2516e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   25170:	2000      	movs	r0, #0
	return thread;
   25172:	e7fc      	b.n	2516e <z_priq_dumb_best+0x8>

00025174 <z_ready_thread>:
{
   25174:	b538      	push	{r3, r4, r5, lr}
   25176:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   25178:	2300      	movs	r3, #0
	__asm__ volatile(
   2517a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2517e:	f3ef 8511 	mrs	r5, BASEPRI
   25182:	f382 8812 	msr	BASEPRI_MAX, r2
   25186:	f3bf 8f6f 	isb	sy
   2518a:	e007      	b.n	2519c <z_ready_thread+0x28>
			ready_thread(thread);
   2518c:	4620      	mov	r0, r4
   2518e:	f7f6 f9e5 	bl	1b55c <ready_thread>
	__asm__ volatile(
   25192:	f385 8811 	msr	BASEPRI, r5
   25196:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2519a:	2301      	movs	r3, #1
   2519c:	b92b      	cbnz	r3, 251aa <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2519e:	4620      	mov	r0, r4
   251a0:	f7ff ff74 	bl	2508c <thread_active_elsewhere>
   251a4:	2800      	cmp	r0, #0
   251a6:	d1f4      	bne.n	25192 <z_ready_thread+0x1e>
   251a8:	e7f0      	b.n	2518c <z_ready_thread+0x18>
}
   251aa:	bd38      	pop	{r3, r4, r5, pc}

000251ac <z_thread_timeout>:
{
   251ac:	b570      	push	{r4, r5, r6, lr}
   251ae:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   251b0:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   251b4:	2300      	movs	r3, #0
	__asm__ volatile(
   251b6:	f04f 0240 	mov.w	r2, #64	; 0x40
   251ba:	f3ef 8611 	mrs	r6, BASEPRI
   251be:	f382 8812 	msr	BASEPRI_MAX, r2
   251c2:	f3bf 8f6f 	isb	sy
   251c6:	e019      	b.n	251fc <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   251c8:	4628      	mov	r0, r5
   251ca:	f7ff ff61 	bl	25090 <pended_on_thread>
   251ce:	4629      	mov	r1, r5
   251d0:	f7ff ff9e 	bl	25110 <z_priq_dumb_remove>
   251d4:	7b6b      	ldrb	r3, [r5, #13]
   251d6:	f023 0302 	bic.w	r3, r3, #2
   251da:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   251dc:	2300      	movs	r3, #0
   251de:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   251e0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   251e4:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   251e8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   251ec:	4628      	mov	r0, r5
   251ee:	f7f6 f9b5 	bl	1b55c <ready_thread>
	__asm__ volatile(
   251f2:	f386 8811 	msr	BASEPRI, r6
   251f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   251fa:	2301      	movs	r3, #1
   251fc:	b94b      	cbnz	r3, 25212 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   251fe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   25202:	f013 0f28 	tst.w	r3, #40	; 0x28
   25206:	d1f4      	bne.n	251f2 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   25208:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2520c:	2b00      	cmp	r3, #0
   2520e:	d1db      	bne.n	251c8 <z_thread_timeout+0x1c>
   25210:	e7e6      	b.n	251e0 <z_thread_timeout+0x34>
}
   25212:	bd70      	pop	{r4, r5, r6, pc}

00025214 <add_to_waitq_locked>:
{
   25214:	b570      	push	{r4, r5, r6, lr}
   25216:	4605      	mov	r5, r0
   25218:	460e      	mov	r6, r1
	unready_thread(thread);
   2521a:	f7f6 f9fd 	bl	1b618 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2521e:	7b6b      	ldrb	r3, [r5, #13]
   25220:	f043 0302 	orr.w	r3, r3, #2
   25224:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   25226:	b1b6      	cbz	r6, 25256 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   25228:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2522a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2522c:	42a6      	cmp	r6, r4
   2522e:	d019      	beq.n	25264 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25230:	b164      	cbz	r4, 2524c <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25232:	4621      	mov	r1, r4
   25234:	4628      	mov	r0, r5
   25236:	f7ff ff2d 	bl	25094 <z_sched_prio_cmp>
   2523a:	2800      	cmp	r0, #0
   2523c:	dc0c      	bgt.n	25258 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2523e:	b12c      	cbz	r4, 2524c <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   25240:	6873      	ldr	r3, [r6, #4]
   25242:	429c      	cmp	r4, r3
   25244:	d002      	beq.n	2524c <add_to_waitq_locked+0x38>
   25246:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25248:	2c00      	cmp	r4, #0
   2524a:	d1f1      	bne.n	25230 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   2524c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2524e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   25250:	606b      	str	r3, [r5, #4]
	tail->next = node;
   25252:	601d      	str	r5, [r3, #0]
	list->tail = node;
   25254:	6075      	str	r5, [r6, #4]
}
   25256:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   25258:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2525a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2525c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2525e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   25260:	6065      	str	r5, [r4, #4]
}
   25262:	e7f8      	b.n	25256 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25264:	2400      	movs	r4, #0
   25266:	e7e3      	b.n	25230 <add_to_waitq_locked+0x1c>

00025268 <pend>:
{
   25268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2526c:	4605      	mov	r5, r0
   2526e:	460f      	mov	r7, r1
   25270:	4691      	mov	r9, r2
   25272:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   25274:	2400      	movs	r4, #0
	__asm__ volatile(
   25276:	f04f 0340 	mov.w	r3, #64	; 0x40
   2527a:	f3ef 8611 	mrs	r6, BASEPRI
   2527e:	f383 8812 	msr	BASEPRI_MAX, r3
   25282:	f3bf 8f6f 	isb	sy
   25286:	b94c      	cbnz	r4, 2529c <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   25288:	4639      	mov	r1, r7
   2528a:	4628      	mov	r0, r5
   2528c:	f7ff ffc2 	bl	25214 <add_to_waitq_locked>
	__asm__ volatile(
   25290:	f386 8811 	msr	BASEPRI, r6
   25294:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25298:	2401      	movs	r4, #1
   2529a:	e7f4      	b.n	25286 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   2529c:	464a      	mov	r2, r9
   2529e:	4643      	mov	r3, r8
   252a0:	4628      	mov	r0, r5
   252a2:	f7f6 f80f 	bl	1b2c4 <add_thread_timeout>
}
   252a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000252aa <z_unpend1_no_timeout>:
{
   252aa:	b570      	push	{r4, r5, r6, lr}
   252ac:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   252ae:	2300      	movs	r3, #0
	__asm__ volatile(
   252b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   252b4:	f3ef 8511 	mrs	r5, BASEPRI
   252b8:	f382 8812 	msr	BASEPRI_MAX, r2
   252bc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   252c0:	461c      	mov	r4, r3
   252c2:	e00f      	b.n	252e4 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   252c4:	f7ff fee4 	bl	25090 <pended_on_thread>
   252c8:	4621      	mov	r1, r4
   252ca:	f7ff ff21 	bl	25110 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   252ce:	7b63      	ldrb	r3, [r4, #13]
   252d0:	f023 0302 	bic.w	r3, r3, #2
   252d4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   252d6:	2300      	movs	r3, #0
   252d8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   252da:	f385 8811 	msr	BASEPRI, r5
   252de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   252e2:	2301      	movs	r3, #1
   252e4:	b933      	cbnz	r3, 252f4 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   252e6:	4630      	mov	r0, r6
   252e8:	f7ff ff3d 	bl	25166 <z_priq_dumb_best>
		if (thread != NULL) {
   252ec:	4604      	mov	r4, r0
   252ee:	2800      	cmp	r0, #0
   252f0:	d1e8      	bne.n	252c4 <z_unpend1_no_timeout+0x1a>
   252f2:	e7f2      	b.n	252da <z_unpend1_no_timeout+0x30>
}
   252f4:	4620      	mov	r0, r4
   252f6:	bd70      	pop	{r4, r5, r6, pc}

000252f8 <z_unpend_first_thread>:
{
   252f8:	b570      	push	{r4, r5, r6, lr}
   252fa:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   252fc:	2300      	movs	r3, #0
	__asm__ volatile(
   252fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   25302:	f3ef 8511 	mrs	r5, BASEPRI
   25306:	f382 8812 	msr	BASEPRI_MAX, r2
   2530a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2530e:	461c      	mov	r4, r3
   25310:	e013      	b.n	2533a <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25312:	f7ff febd 	bl	25090 <pended_on_thread>
   25316:	4621      	mov	r1, r4
   25318:	f7ff fefa 	bl	25110 <z_priq_dumb_remove>
   2531c:	7b63      	ldrb	r3, [r4, #13]
   2531e:	f023 0302 	bic.w	r3, r3, #2
   25322:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   25324:	2300      	movs	r3, #0
   25326:	60a3      	str	r3, [r4, #8]
   25328:	f104 0018 	add.w	r0, r4, #24
   2532c:	f000 f872 	bl	25414 <z_abort_timeout>
	__asm__ volatile(
   25330:	f385 8811 	msr	BASEPRI, r5
   25334:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   25338:	2301      	movs	r3, #1
   2533a:	b933      	cbnz	r3, 2534a <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   2533c:	4630      	mov	r0, r6
   2533e:	f7ff ff12 	bl	25166 <z_priq_dumb_best>
		if (thread != NULL) {
   25342:	4604      	mov	r4, r0
   25344:	2800      	cmp	r0, #0
   25346:	d1e4      	bne.n	25312 <z_unpend_first_thread+0x1a>
   25348:	e7f2      	b.n	25330 <z_unpend_first_thread+0x38>
}
   2534a:	4620      	mov	r0, r4
   2534c:	bd70      	pop	{r4, r5, r6, pc}

0002534e <z_unpend_all>:
{
   2534e:	b538      	push	{r3, r4, r5, lr}
   25350:	4605      	mov	r5, r0
	int need_sched = 0;
   25352:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25354:	e006      	b.n	25364 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   25356:	4620      	mov	r0, r4
   25358:	f7ff fee2 	bl	25120 <z_unpend_thread>
		z_ready_thread(thread);
   2535c:	4620      	mov	r0, r4
   2535e:	f7ff ff09 	bl	25174 <z_ready_thread>
		need_sched = 1;
   25362:	2001      	movs	r0, #1
	return list->head == list;
   25364:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25366:	42a5      	cmp	r5, r4
   25368:	d001      	beq.n	2536e <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2536a:	2c00      	cmp	r4, #0
   2536c:	d1f3      	bne.n	25356 <z_unpend_all+0x8>
}
   2536e:	bd38      	pop	{r3, r4, r5, pc}

00025370 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   25370:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   25372:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   25374:	6083      	str	r3, [r0, #8]
}
   25376:	4770      	bx	lr

00025378 <z_sched_wake>:
{
   25378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2537c:	4606      	mov	r6, r0
   2537e:	4688      	mov	r8, r1
   25380:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   25382:	2300      	movs	r3, #0
	__asm__ volatile(
   25384:	f04f 0240 	mov.w	r2, #64	; 0x40
   25388:	f3ef 8511 	mrs	r5, BASEPRI
   2538c:	f382 8812 	msr	BASEPRI_MAX, r2
   25390:	f3bf 8f6f 	isb	sy
	bool ret = false;
   25394:	4699      	mov	r9, r3
   25396:	e01b      	b.n	253d0 <z_sched_wake+0x58>
   25398:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2539c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2539e:	f7ff fe77 	bl	25090 <pended_on_thread>
   253a2:	4621      	mov	r1, r4
   253a4:	f7ff feb4 	bl	25110 <z_priq_dumb_remove>
   253a8:	7b63      	ldrb	r3, [r4, #13]
   253aa:	f023 0302 	bic.w	r3, r3, #2
   253ae:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   253b0:	2300      	movs	r3, #0
   253b2:	60a3      	str	r3, [r4, #8]
   253b4:	f104 0018 	add.w	r0, r4, #24
   253b8:	f000 f82c 	bl	25414 <z_abort_timeout>
			ready_thread(thread);
   253bc:	4620      	mov	r0, r4
   253be:	f7f6 f8cd 	bl	1b55c <ready_thread>
			ret = true;
   253c2:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   253c6:	f385 8811 	msr	BASEPRI, r5
   253ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   253ce:	2301      	movs	r3, #1
   253d0:	b933      	cbnz	r3, 253e0 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   253d2:	4630      	mov	r0, r6
   253d4:	f7ff fec7 	bl	25166 <z_priq_dumb_best>
		if (thread != NULL) {
   253d8:	4604      	mov	r4, r0
   253da:	2800      	cmp	r0, #0
   253dc:	d1dc      	bne.n	25398 <z_sched_wake+0x20>
   253de:	e7f2      	b.n	253c6 <z_sched_wake+0x4e>
}
   253e0:	4648      	mov	r0, r9
   253e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000253e6 <remove_timeout>:
{
   253e6:	b538      	push	{r3, r4, r5, lr}
   253e8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   253ea:	f7f6 fb9b 	bl	1bb24 <next>
   253ee:	b148      	cbz	r0, 25404 <remove_timeout+0x1e>
   253f0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   253f2:	6920      	ldr	r0, [r4, #16]
   253f4:	6965      	ldr	r5, [r4, #20]
   253f6:	6913      	ldr	r3, [r2, #16]
   253f8:	6951      	ldr	r1, [r2, #20]
   253fa:	181b      	adds	r3, r3, r0
   253fc:	eb45 0101 	adc.w	r1, r5, r1
   25400:	6113      	str	r3, [r2, #16]
   25402:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   25404:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   25406:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   25408:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2540a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2540c:	2300      	movs	r3, #0
   2540e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   25410:	6063      	str	r3, [r4, #4]
}
   25412:	bd38      	pop	{r3, r4, r5, pc}

00025414 <z_abort_timeout>:
{
   25414:	b570      	push	{r4, r5, r6, lr}
   25416:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   25418:	2300      	movs	r3, #0
	__asm__ volatile(
   2541a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2541e:	f3ef 8611 	mrs	r6, BASEPRI
   25422:	f382 8812 	msr	BASEPRI_MAX, r2
   25426:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   2542a:	f06f 0015 	mvn.w	r0, #21
   2542e:	e008      	b.n	25442 <z_abort_timeout+0x2e>
			remove_timeout(to);
   25430:	4620      	mov	r0, r4
   25432:	f7ff ffd8 	bl	253e6 <remove_timeout>
			ret = 0;
   25436:	4628      	mov	r0, r5
	__asm__ volatile(
   25438:	f386 8811 	msr	BASEPRI, r6
   2543c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   25440:	2301      	movs	r3, #1
   25442:	461d      	mov	r5, r3
   25444:	b91b      	cbnz	r3, 2544e <z_abort_timeout+0x3a>
	return node->next != NULL;
   25446:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   25448:	2b00      	cmp	r3, #0
   2544a:	d1f1      	bne.n	25430 <z_abort_timeout+0x1c>
   2544c:	e7f4      	b.n	25438 <z_abort_timeout+0x24>
}
   2544e:	bd70      	pop	{r4, r5, r6, pc}

00025450 <z_get_next_timeout_expiry>:
{
   25450:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   25452:	2300      	movs	r3, #0
	__asm__ volatile(
   25454:	f04f 0240 	mov.w	r2, #64	; 0x40
   25458:	f3ef 8411 	mrs	r4, BASEPRI
   2545c:	f382 8812 	msr	BASEPRI_MAX, r2
   25460:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   25464:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   25468:	b93b      	cbnz	r3, 2547a <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   2546a:	f7f6 fb73 	bl	1bb54 <next_timeout>
	__asm__ volatile(
   2546e:	f384 8811 	msr	BASEPRI, r4
   25472:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   25476:	2301      	movs	r3, #1
   25478:	e7f6      	b.n	25468 <z_get_next_timeout_expiry+0x18>
}
   2547a:	bd10      	pop	{r4, pc}

0002547c <z_set_timeout_expiry>:
{
   2547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2547e:	4606      	mov	r6, r0
   25480:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   25482:	2300      	movs	r3, #0
	__asm__ volatile(
   25484:	f04f 0240 	mov.w	r2, #64	; 0x40
   25488:	f3ef 8511 	mrs	r5, BASEPRI
   2548c:	f382 8812 	msr	BASEPRI_MAX, r2
   25490:	f3bf 8f6f 	isb	sy
   25494:	e00a      	b.n	254ac <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   25496:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   25498:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2549c:	2801      	cmp	r0, #1
   2549e:	dd00      	ble.n	254a2 <z_set_timeout_expiry+0x26>
   254a0:	b97c      	cbnz	r4, 254c2 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   254a2:	f385 8811 	msr	BASEPRI, r5
   254a6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   254aa:	2301      	movs	r3, #1
   254ac:	461c      	mov	r4, r3
   254ae:	b97b      	cbnz	r3, 254d0 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   254b0:	f7f6 fb50 	bl	1bb54 <next_timeout>
			      || (ticks <= next_to);
   254b4:	f1b0 3fff 	cmp.w	r0, #4294967295
   254b8:	d0ed      	beq.n	25496 <z_set_timeout_expiry+0x1a>
   254ba:	42b0      	cmp	r0, r6
   254bc:	dbec      	blt.n	25498 <z_set_timeout_expiry+0x1c>
   254be:	2401      	movs	r4, #1
   254c0:	e7ea      	b.n	25498 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   254c2:	4639      	mov	r1, r7
   254c4:	42b0      	cmp	r0, r6
   254c6:	bfa8      	it	ge
   254c8:	4630      	movge	r0, r6
   254ca:	f7f3 fc69 	bl	18da0 <sys_clock_set_timeout>
   254ce:	e7e8      	b.n	254a2 <z_set_timeout_expiry+0x26>
}
   254d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000254d2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   254d2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   254d4:	f7f6 fc70 	bl	1bdb8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   254d8:	bd08      	pop	{r3, pc}

000254da <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   254da:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   254dc:	f7f6 fc6c 	bl	1bdb8 <sys_clock_tick_get>
}
   254e0:	bd08      	pop	{r3, pc}

000254e2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   254e2:	b900      	cbnz	r0, 254e6 <z_impl_k_busy_wait+0x4>
   254e4:	4770      	bx	lr
{
   254e6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   254e8:	f7ee fe48 	bl	1417c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   254ec:	bd08      	pop	{r3, pc}

000254ee <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   254ee:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   254f0:	f1b1 3fff 	cmp.w	r1, #4294967295
   254f4:	bf08      	it	eq
   254f6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   254fa:	d024      	beq.n	25546 <sys_clock_timeout_end_calc+0x58>
   254fc:	4604      	mov	r4, r0
   254fe:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25500:	ea54 0105 	orrs.w	r1, r4, r5
   25504:	d00d      	beq.n	25522 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25506:	f06f 0101 	mvn.w	r1, #1
   2550a:	1a0a      	subs	r2, r1, r0
   2550c:	f04f 31ff 	mov.w	r1, #4294967295
   25510:	eb61 0305 	sbc.w	r3, r1, r5
   25514:	2a00      	cmp	r2, #0
   25516:	f173 0100 	sbcs.w	r1, r3, #0
   2551a:	db05      	blt.n	25528 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2551c:	4610      	mov	r0, r2
   2551e:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   25520:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   25522:	f7f6 fc49 	bl	1bdb8 <sys_clock_tick_get>
   25526:	e7fb      	b.n	25520 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   25528:	f7f6 fc46 	bl	1bdb8 <sys_clock_tick_get>
   2552c:	4623      	mov	r3, r4
   2552e:	462a      	mov	r2, r5
   25530:	2c01      	cmp	r4, #1
   25532:	f175 0400 	sbcs.w	r4, r5, #0
   25536:	db03      	blt.n	25540 <sys_clock_timeout_end_calc+0x52>
   25538:	18c0      	adds	r0, r0, r3
   2553a:	eb42 0101 	adc.w	r1, r2, r1
   2553e:	e7ef      	b.n	25520 <sys_clock_timeout_end_calc+0x32>
   25540:	2301      	movs	r3, #1
   25542:	2200      	movs	r2, #0
   25544:	e7f8      	b.n	25538 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   25546:	f04f 30ff 	mov.w	r0, #4294967295
   2554a:	4601      	mov	r1, r0
   2554c:	e7e8      	b.n	25520 <sys_clock_timeout_end_calc+0x32>

0002554e <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2554e:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   25550:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   25552:	2300      	movs	r3, #0
   25554:	6303      	str	r3, [r0, #48]	; 0x30
   25556:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2555a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2555c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2555e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   25560:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   25562:	6343      	str	r3, [r0, #52]	; 0x34
}
   25564:	4770      	bx	lr

00025566 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25566:	b510      	push	{r4, lr}
   25568:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2556a:	f7ff ff53 	bl	25414 <z_abort_timeout>

	if (inactive) {
   2556e:	b9a0      	cbnz	r0, 2559a <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   25570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25572:	b10b      	cbz	r3, 25578 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   25574:	4620      	mov	r0, r4
   25576:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   25578:	f104 0018 	add.w	r0, r4, #24
   2557c:	f7ff fe95 	bl	252aa <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   25580:	b158      	cbz	r0, 2559a <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   25582:	f7ff fdf7 	bl	25174 <z_ready_thread>
	__asm__ volatile(
   25586:	f04f 0340 	mov.w	r3, #64	; 0x40
   2558a:	f3ef 8011 	mrs	r0, BASEPRI
   2558e:	f383 8812 	msr	BASEPRI_MAX, r3
   25592:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25596:	f7ff fda6 	bl	250e6 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   2559a:	bd10      	pop	{r4, pc}

0002559c <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2559c:	b108      	cbz	r0, 255a2 <poller_thread+0x6>
   2559e:	3860      	subs	r0, #96	; 0x60
   255a0:	4770      	bx	lr
}
   255a2:	4770      	bx	lr

000255a4 <signal_poller>:
{
   255a4:	b538      	push	{r3, r4, r5, lr}
   255a6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   255a8:	6880      	ldr	r0, [r0, #8]
   255aa:	f7ff fff7 	bl	2559c <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   255ae:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   255b0:	f013 0f02 	tst.w	r3, #2
   255b4:	d028      	beq.n	25608 <signal_poller+0x64>
   255b6:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   255b8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   255bc:	f06f 0001 	mvn.w	r0, #1
   255c0:	f04f 31ff 	mov.w	r1, #4294967295
   255c4:	428b      	cmp	r3, r1
   255c6:	bf08      	it	eq
   255c8:	4282      	cmpeq	r2, r0
   255ca:	d01f      	beq.n	2560c <signal_poller+0x68>
	z_unpend_thread(thread);
   255cc:	4620      	mov	r0, r4
   255ce:	f7ff fda7 	bl	25120 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   255d2:	2d08      	cmp	r5, #8
   255d4:	d00a      	beq.n	255ec <signal_poller+0x48>
   255d6:	2300      	movs	r3, #0
   255d8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   255dc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   255de:	f013 0f1f 	tst.w	r3, #31
   255e2:	d108      	bne.n	255f6 <signal_poller+0x52>
	return node->next != NULL;
   255e4:	69a3      	ldr	r3, [r4, #24]
   255e6:	b123      	cbz	r3, 255f2 <signal_poller+0x4e>
   255e8:	2300      	movs	r3, #0
   255ea:	e005      	b.n	255f8 <signal_poller+0x54>
   255ec:	f06f 0303 	mvn.w	r3, #3
   255f0:	e7f2      	b.n	255d8 <signal_poller+0x34>
   255f2:	2301      	movs	r3, #1
   255f4:	e000      	b.n	255f8 <signal_poller+0x54>
   255f6:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   255f8:	b90b      	cbnz	r3, 255fe <signal_poller+0x5a>
		return 0;
   255fa:	2000      	movs	r0, #0
   255fc:	e005      	b.n	2560a <signal_poller+0x66>
	z_ready_thread(thread);
   255fe:	4620      	mov	r0, r4
   25600:	f7ff fdb8 	bl	25174 <z_ready_thread>
	return 0;
   25604:	2000      	movs	r0, #0
   25606:	e000      	b.n	2560a <signal_poller+0x66>
		return 0;
   25608:	2000      	movs	r0, #0
}
   2560a:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2560c:	f06f 000a 	mvn.w	r0, #10
   25610:	e7fb      	b.n	2560a <signal_poller+0x66>

00025612 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   25612:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   25614:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25616:	7823      	ldrb	r3, [r4, #0]
   25618:	b173      	cbz	r3, 25638 <signal_triggered_work+0x26>
   2561a:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2561e:	b15d      	cbz	r5, 25638 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   25620:	f1a4 0614 	sub.w	r6, r4, #20
   25624:	f104 0014 	add.w	r0, r4, #20
   25628:	f7ff fef4 	bl	25414 <z_abort_timeout>
		twork->poll_result = 0;
   2562c:	2300      	movs	r3, #0
   2562e:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   25630:	4631      	mov	r1, r6
   25632:	4628      	mov	r0, r5
   25634:	f7ff fc83 	bl	24f3e <k_work_submit_to_queue>
	}

	return 0;
}
   25638:	2000      	movs	r0, #0
   2563a:	bd70      	pop	{r4, r5, r6, pc}

0002563c <signal_poll_event>:
{
   2563c:	b570      	push	{r4, r5, r6, lr}
   2563e:	4604      	mov	r4, r0
   25640:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   25642:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   25644:	b1d6      	cbz	r6, 2567c <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   25646:	7873      	ldrb	r3, [r6, #1]
   25648:	2b01      	cmp	r3, #1
   2564a:	d00d      	beq.n	25668 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2564c:	2b02      	cmp	r3, #2
   2564e:	d012      	beq.n	25676 <signal_poll_event+0x3a>
		poller->is_polling = false;
   25650:	2000      	movs	r0, #0
   25652:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   25654:	2300      	movs	r3, #0
   25656:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   25658:	68e3      	ldr	r3, [r4, #12]
   2565a:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2565e:	430d      	orrs	r5, r1
   25660:	f365 3352 	bfi	r3, r5, #13, #6
   25664:	60e3      	str	r3, [r4, #12]
}
   25666:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   25668:	f7ff ff9c 	bl	255a4 <signal_poller>
		poller->is_polling = false;
   2566c:	2300      	movs	r3, #0
   2566e:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   25670:	4298      	cmp	r0, r3
   25672:	daef      	bge.n	25654 <signal_poll_event+0x18>
   25674:	e7f7      	b.n	25666 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   25676:	f7ff ffcc 	bl	25612 <signal_triggered_work>
   2567a:	e7f7      	b.n	2566c <signal_poll_event+0x30>
	int retcode = 0;
   2567c:	2000      	movs	r0, #0
   2567e:	e7e9      	b.n	25654 <signal_poll_event+0x18>

00025680 <k_poll_event_init>:
{
   25680:	b430      	push	{r4, r5}
	event->poller = NULL;
   25682:	2400      	movs	r4, #0
   25684:	6084      	str	r4, [r0, #8]
	event->type = type;
   25686:	7b45      	ldrb	r5, [r0, #13]
   25688:	f361 0504 	bfi	r5, r1, #0, #5
   2568c:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2568e:	68c1      	ldr	r1, [r0, #12]
   25690:	f364 3152 	bfi	r1, r4, #13, #6
   25694:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   25696:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2569a:	f362 01c3 	bfi	r1, r2, #3, #1
   2569e:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   256a0:	89c2      	ldrh	r2, [r0, #14]
   256a2:	f364 120f 	bfi	r2, r4, #4, #12
   256a6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   256a8:	6103      	str	r3, [r0, #16]
}
   256aa:	bc30      	pop	{r4, r5}
   256ac:	4770      	bx	lr

000256ae <z_handle_obj_poll_events>:
{
   256ae:	b508      	push	{r3, lr}
   256b0:	4603      	mov	r3, r0
	return list->head == list;
   256b2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   256b4:	4283      	cmp	r3, r0
   256b6:	d009      	beq.n	256cc <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   256b8:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   256ba:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   256bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   256be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   256c0:	2300      	movs	r3, #0
   256c2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   256c4:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   256c6:	b108      	cbz	r0, 256cc <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   256c8:	f7ff ffb8 	bl	2563c <signal_poll_event>
}
   256cc:	bd08      	pop	{r3, pc}

000256ce <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   256ce:	3204      	adds	r2, #4
   256d0:	d20f      	bcs.n	256f2 <z_heap_aligned_alloc+0x24>
{
   256d2:	b5d0      	push	{r4, r6, r7, lr}
   256d4:	b082      	sub	sp, #8
   256d6:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   256d8:	2600      	movs	r6, #0
   256da:	2700      	movs	r7, #0
   256dc:	e9cd 6700 	strd	r6, r7, [sp]
   256e0:	f041 0104 	orr.w	r1, r1, #4
   256e4:	f7ff f996 	bl	24a14 <k_heap_aligned_alloc>
	if (mem == NULL) {
   256e8:	b108      	cbz	r0, 256ee <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
   256ea:	f840 4b04 	str.w	r4, [r0], #4
}
   256ee:	b002      	add	sp, #8
   256f0:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
   256f2:	2000      	movs	r0, #0
}
   256f4:	4770      	bx	lr

000256f6 <k_free>:
	if (ptr != NULL) {
   256f6:	b130      	cbz	r0, 25706 <k_free+0x10>
{
   256f8:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   256fa:	1f01      	subs	r1, r0, #4
   256fc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   25700:	f7ff f9d3 	bl	24aaa <k_heap_free>
}
   25704:	bd08      	pop	{r3, pc}
   25706:	4770      	bx	lr

00025708 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   25708:	4770      	bx	lr

0002570a <memcmp>:
   2570a:	b530      	push	{r4, r5, lr}
   2570c:	3901      	subs	r1, #1
   2570e:	2400      	movs	r4, #0
   25710:	42a2      	cmp	r2, r4
   25712:	d101      	bne.n	25718 <memcmp+0xe>
   25714:	2000      	movs	r0, #0
   25716:	e005      	b.n	25724 <memcmp+0x1a>
   25718:	5d03      	ldrb	r3, [r0, r4]
   2571a:	3401      	adds	r4, #1
   2571c:	5d0d      	ldrb	r5, [r1, r4]
   2571e:	42ab      	cmp	r3, r5
   25720:	d0f6      	beq.n	25710 <memcmp+0x6>
   25722:	1b58      	subs	r0, r3, r5
   25724:	bd30      	pop	{r4, r5, pc}

00025726 <memcpy>:
   25726:	440a      	add	r2, r1
   25728:	4291      	cmp	r1, r2
   2572a:	f100 33ff 	add.w	r3, r0, #4294967295
   2572e:	d100      	bne.n	25732 <memcpy+0xc>
   25730:	4770      	bx	lr
   25732:	b510      	push	{r4, lr}
   25734:	f811 4b01 	ldrb.w	r4, [r1], #1
   25738:	f803 4f01 	strb.w	r4, [r3, #1]!
   2573c:	4291      	cmp	r1, r2
   2573e:	d1f9      	bne.n	25734 <memcpy+0xe>
   25740:	bd10      	pop	{r4, pc}

00025742 <__memcpy_chk>:
   25742:	429a      	cmp	r2, r3
   25744:	b508      	push	{r3, lr}
   25746:	d901      	bls.n	2574c <__memcpy_chk+0xa>
   25748:	f7ee fce0 	bl	1410c <__chk_fail>
   2574c:	4281      	cmp	r1, r0
   2574e:	d804      	bhi.n	2575a <__memcpy_chk+0x18>
   25750:	188b      	adds	r3, r1, r2
   25752:	4298      	cmp	r0, r3
   25754:	d3f8      	bcc.n	25748 <__memcpy_chk+0x6>
   25756:	4281      	cmp	r1, r0
   25758:	d102      	bne.n	25760 <__memcpy_chk+0x1e>
   2575a:	1883      	adds	r3, r0, r2
   2575c:	4299      	cmp	r1, r3
   2575e:	d3f3      	bcc.n	25748 <__memcpy_chk+0x6>
   25760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25764:	f7ff bfdf 	b.w	25726 <memcpy>

00025768 <memmove>:
   25768:	4288      	cmp	r0, r1
   2576a:	b510      	push	{r4, lr}
   2576c:	eb01 0402 	add.w	r4, r1, r2
   25770:	d902      	bls.n	25778 <memmove+0x10>
   25772:	4284      	cmp	r4, r0
   25774:	4623      	mov	r3, r4
   25776:	d807      	bhi.n	25788 <memmove+0x20>
   25778:	1e43      	subs	r3, r0, #1
   2577a:	42a1      	cmp	r1, r4
   2577c:	d008      	beq.n	25790 <memmove+0x28>
   2577e:	f811 2b01 	ldrb.w	r2, [r1], #1
   25782:	f803 2f01 	strb.w	r2, [r3, #1]!
   25786:	e7f8      	b.n	2577a <memmove+0x12>
   25788:	4402      	add	r2, r0
   2578a:	4601      	mov	r1, r0
   2578c:	428a      	cmp	r2, r1
   2578e:	d100      	bne.n	25792 <memmove+0x2a>
   25790:	bd10      	pop	{r4, pc}
   25792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   25796:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2579a:	e7f7      	b.n	2578c <memmove+0x24>

0002579c <memset>:
   2579c:	4402      	add	r2, r0
   2579e:	4603      	mov	r3, r0
   257a0:	4293      	cmp	r3, r2
   257a2:	d100      	bne.n	257a6 <memset+0xa>
   257a4:	4770      	bx	lr
   257a6:	f803 1b01 	strb.w	r1, [r3], #1
   257aa:	e7f9      	b.n	257a0 <memset+0x4>

000257ac <strncpy>:
   257ac:	b510      	push	{r4, lr}
   257ae:	3901      	subs	r1, #1
   257b0:	4603      	mov	r3, r0
   257b2:	b132      	cbz	r2, 257c2 <strncpy+0x16>
   257b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   257b8:	f803 4b01 	strb.w	r4, [r3], #1
   257bc:	3a01      	subs	r2, #1
   257be:	2c00      	cmp	r4, #0
   257c0:	d1f7      	bne.n	257b2 <strncpy+0x6>
   257c2:	441a      	add	r2, r3
   257c4:	2100      	movs	r1, #0
   257c6:	4293      	cmp	r3, r2
   257c8:	d100      	bne.n	257cc <strncpy+0x20>
   257ca:	bd10      	pop	{r4, pc}
   257cc:	f803 1b01 	strb.w	r1, [r3], #1
   257d0:	e7f9      	b.n	257c6 <strncpy+0x1a>

000257d2 <__strncpy_chk>:
   257d2:	429a      	cmp	r2, r3
   257d4:	b508      	push	{r3, lr}
   257d6:	d901      	bls.n	257dc <__strncpy_chk+0xa>
   257d8:	f7ee fc98 	bl	1410c <__chk_fail>
   257dc:	4281      	cmp	r1, r0
   257de:	d804      	bhi.n	257ea <__strncpy_chk+0x18>
   257e0:	188b      	adds	r3, r1, r2
   257e2:	4298      	cmp	r0, r3
   257e4:	d3f8      	bcc.n	257d8 <__strncpy_chk+0x6>
   257e6:	4281      	cmp	r1, r0
   257e8:	d102      	bne.n	257f0 <__strncpy_chk+0x1e>
   257ea:	1883      	adds	r3, r0, r2
   257ec:	4299      	cmp	r1, r3
   257ee:	d3f3      	bcc.n	257d8 <__strncpy_chk+0x6>
   257f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   257f4:	f7ff bfda 	b.w	257ac <strncpy>

000257f8 <strnlen>:
   257f8:	b510      	push	{r4, lr}
   257fa:	4602      	mov	r2, r0
   257fc:	4401      	add	r1, r0
   257fe:	428a      	cmp	r2, r1
   25800:	4613      	mov	r3, r2
   25802:	d101      	bne.n	25808 <strnlen+0x10>
   25804:	1a18      	subs	r0, r3, r0
   25806:	bd10      	pop	{r4, pc}
   25808:	781c      	ldrb	r4, [r3, #0]
   2580a:	3201      	adds	r2, #1
   2580c:	2c00      	cmp	r4, #0
   2580e:	d1f6      	bne.n	257fe <strnlen+0x6>
   25810:	e7f8      	b.n	25804 <strnlen+0xc>
	...

00025814 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   25814:	f7f3 bd92 	b.w	1933c <SystemInit>
