
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 58 00 20 61 37 01 00 ef ff 01 00 35 37 01 00     .X. a7......57..
  10:	35 37 01 00 35 37 01 00 35 37 01 00 00 00 00 00     57..57..57......
	...
  2c:	31 34 01 00 35 37 01 00 00 00 00 00 dd 33 01 00     14..57.......3..
  3c:	35 37 01 00                                         57..

00000040 <_irq_vector_table>:
  40:	e1 34 01 00 63 25 02 00 e1 34 01 00 e1 34 01 00     .4..c%...4...4..
  50:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  60:	11 25 02 00 e1 34 01 00 e1 34 01 00 49 25 02 00     .%...4...4..I%..
  70:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  80:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  90:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  a0:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  b0:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  c0:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  d0:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  e0:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..
  f0:	e1 34 01 00 e1 34 01 00 e1 34 01 00 e1 34 01 00     .4...4...4...4..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x5c>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2a>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4a>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x58>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_drsub>:
     268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__adddf3>
     26e:	bf00      	nop

00000270 <__aeabi_dsub>:
     270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000274 <__adddf3>:
     274:	b530      	push	{r4, r5, lr}
     276:	ea4f 0441 	mov.w	r4, r1, lsl #1
     27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     27e:	ea94 0f05 	teq	r4, r5
     282:	bf08      	it	eq
     284:	ea90 0f02 	teqeq	r0, r2
     288:	bf1f      	itttt	ne
     28a:	ea54 0c00 	orrsne.w	ip, r4, r0
     28e:	ea55 0c02 	orrsne.w	ip, r5, r2
     292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     29a:	f000 80e2 	beq.w	462 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x62>
     29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     2a6:	bfb8      	it	lt
     2a8:	426d      	neglt	r5, r5
     2aa:	dd0c      	ble.n	2c6 <__adddf3+0x52>
     2ac:	442c      	add	r4, r5
     2ae:	ea80 0202 	eor.w	r2, r0, r2
     2b2:	ea81 0303 	eor.w	r3, r1, r3
     2b6:	ea82 0000 	eor.w	r0, r2, r0
     2ba:	ea83 0101 	eor.w	r1, r3, r1
     2be:	ea80 0202 	eor.w	r2, r0, r2
     2c2:	ea81 0303 	eor.w	r3, r1, r3
     2c6:	2d36      	cmp	r5, #54	; 0x36
     2c8:	bf88      	it	hi
     2ca:	bd30      	pophi	{r4, r5, pc}
     2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     2dc:	d002      	beq.n	2e4 <__adddf3+0x70>
     2de:	4240      	negs	r0, r0
     2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2f0:	d002      	beq.n	2f8 <__adddf3+0x84>
     2f2:	4252      	negs	r2, r2
     2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2f8:	ea94 0f05 	teq	r4, r5
     2fc:	f000 80a7 	beq.w	44e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4e>
     300:	f1a4 0401 	sub.w	r4, r4, #1
     304:	f1d5 0e20 	rsbs	lr, r5, #32
     308:	db0d      	blt.n	326 <__adddf3+0xb2>
     30a:	fa02 fc0e 	lsl.w	ip, r2, lr
     30e:	fa22 f205 	lsr.w	r2, r2, r5
     312:	1880      	adds	r0, r0, r2
     314:	f141 0100 	adc.w	r1, r1, #0
     318:	fa03 f20e 	lsl.w	r2, r3, lr
     31c:	1880      	adds	r0, r0, r2
     31e:	fa43 f305 	asr.w	r3, r3, r5
     322:	4159      	adcs	r1, r3
     324:	e00e      	b.n	344 <__adddf3+0xd0>
     326:	f1a5 0520 	sub.w	r5, r5, #32
     32a:	f10e 0e20 	add.w	lr, lr, #32
     32e:	2a01      	cmp	r2, #1
     330:	fa03 fc0e 	lsl.w	ip, r3, lr
     334:	bf28      	it	cs
     336:	f04c 0c02 	orrcs.w	ip, ip, #2
     33a:	fa43 f305 	asr.w	r3, r3, r5
     33e:	18c0      	adds	r0, r0, r3
     340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     348:	d507      	bpl.n	35a <__adddf3+0xe6>
     34a:	f04f 0e00 	mov.w	lr, #0
     34e:	f1dc 0c00 	rsbs	ip, ip, #0
     352:	eb7e 0000 	sbcs.w	r0, lr, r0
     356:	eb6e 0101 	sbc.w	r1, lr, r1
     35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     35e:	d31b      	bcc.n	398 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x14>
     360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     364:	d30c      	bcc.n	380 <__adddf3+0x10c>
     366:	0849      	lsrs	r1, r1, #1
     368:	ea5f 0030 	movs.w	r0, r0, rrx
     36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     370:	f104 0401 	add.w	r4, r4, #1
     374:	ea4f 5244 	mov.w	r2, r4, lsl #21
     378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     37c:	f080 809a 	bcs.w	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     384:	bf08      	it	eq
     386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     38a:	f150 0000 	adcs.w	r0, r0, #0
     38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     392:	ea41 0105 	orr.w	r1, r1, r5
     396:	bd30      	pop	{r4, r5, pc}
     398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     39c:	4140      	adcs	r0, r0
     39e:	eb41 0101 	adc.w	r1, r1, r1
     3a2:	3c01      	subs	r4, #1
     3a4:	bf28      	it	cs
     3a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     3aa:	d2e9      	bcs.n	380 <__adddf3+0x10c>
     3ac:	f091 0f00 	teq	r1, #0
     3b0:	bf04      	itt	eq
     3b2:	4601      	moveq	r1, r0
     3b4:	2000      	moveq	r0, #0
     3b6:	fab1 f381 	clz	r3, r1
     3ba:	bf08      	it	eq
     3bc:	3320      	addeq	r3, #32
     3be:	f1a3 030b 	sub.w	r3, r3, #11
     3c2:	f1b3 0220 	subs.w	r2, r3, #32
     3c6:	da0c      	bge.n	3e2 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5e>
     3c8:	320c      	adds	r2, #12
     3ca:	dd08      	ble.n	3de <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5a>
     3cc:	f102 0c14 	add.w	ip, r2, #20
     3d0:	f1c2 020c 	rsb	r2, r2, #12
     3d4:	fa01 f00c 	lsl.w	r0, r1, ip
     3d8:	fa21 f102 	lsr.w	r1, r1, r2
     3dc:	e00c      	b.n	3f8 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x74>
     3de:	f102 0214 	add.w	r2, r2, #20
     3e2:	bfd8      	it	le
     3e4:	f1c2 0c20 	rsble	ip, r2, #32
     3e8:	fa01 f102 	lsl.w	r1, r1, r2
     3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
     3f0:	bfdc      	itt	le
     3f2:	ea41 010c 	orrle.w	r1, r1, ip
     3f6:	4090      	lslle	r0, r2
     3f8:	1ae4      	subs	r4, r4, r3
     3fa:	bfa2      	ittt	ge
     3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     400:	4329      	orrge	r1, r5
     402:	bd30      	popge	{r4, r5, pc}
     404:	ea6f 0404 	mvn.w	r4, r4
     408:	3c1f      	subs	r4, #31
     40a:	da1c      	bge.n	446 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x46>
     40c:	340c      	adds	r4, #12
     40e:	dc0e      	bgt.n	42e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2e>
     410:	f104 0414 	add.w	r4, r4, #20
     414:	f1c4 0220 	rsb	r2, r4, #32
     418:	fa20 f004 	lsr.w	r0, r0, r4
     41c:	fa01 f302 	lsl.w	r3, r1, r2
     420:	ea40 0003 	orr.w	r0, r0, r3
     424:	fa21 f304 	lsr.w	r3, r1, r4
     428:	ea45 0103 	orr.w	r1, r5, r3
     42c:	bd30      	pop	{r4, r5, pc}
     42e:	f1c4 040c 	rsb	r4, r4, #12
     432:	f1c4 0220 	rsb	r2, r4, #32
     436:	fa20 f002 	lsr.w	r0, r0, r2
     43a:	fa01 f304 	lsl.w	r3, r1, r4
     43e:	ea40 0003 	orr.w	r0, r0, r3
     442:	4629      	mov	r1, r5
     444:	bd30      	pop	{r4, r5, pc}
     446:	fa21 f004 	lsr.w	r0, r1, r4
     44a:	4629      	mov	r1, r5
     44c:	bd30      	pop	{r4, r5, pc}
     44e:	f094 0f00 	teq	r4, #0
     452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     456:	bf06      	itte	eq
     458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     45c:	3401      	addeq	r4, #1
     45e:	3d01      	subne	r5, #1
     460:	e74e      	b.n	300 <__adddf3+0x8c>
     462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     466:	bf18      	it	ne
     468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     46c:	d029      	beq.n	4c2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4e>
     46e:	ea94 0f05 	teq	r4, r5
     472:	bf08      	it	eq
     474:	ea90 0f02 	teqeq	r0, r2
     478:	d005      	beq.n	486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     47a:	ea54 0c00 	orrs.w	ip, r4, r0
     47e:	bf04      	itt	eq
     480:	4619      	moveq	r1, r3
     482:	4610      	moveq	r0, r2
     484:	bd30      	pop	{r4, r5, pc}
     486:	ea91 0f03 	teq	r1, r3
     48a:	bf1e      	ittt	ne
     48c:	2100      	movne	r1, #0
     48e:	2000      	movne	r0, #0
     490:	bd30      	popne	{r4, r5, pc}
     492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     496:	d105      	bne.n	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     498:	0040      	lsls	r0, r0, #1
     49a:	4149      	adcs	r1, r1
     49c:	bf28      	it	cs
     49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     4a2:	bd30      	pop	{r4, r5, pc}
     4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     4a8:	bf3c      	itt	cc
     4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     4ae:	bd30      	popcc	{r4, r5, pc}
     4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	bd30      	pop	{r4, r5, pc}
     4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     4c6:	bf1a      	itte	ne
     4c8:	4619      	movne	r1, r3
     4ca:	4610      	movne	r0, r2
     4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     4d0:	bf1c      	itt	ne
     4d2:	460b      	movne	r3, r1
     4d4:	4602      	movne	r2, r0
     4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     4da:	bf06      	itte	eq
     4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     4e0:	ea91 0f03 	teqeq	r1, r3
     4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4e8:	bd30      	pop	{r4, r5, pc}
     4ea:	bf00      	nop

000004ec <__aeabi_ui2d>:
     4ec:	f090 0f00 	teq	r0, #0
     4f0:	bf04      	itt	eq
     4f2:	2100      	moveq	r1, #0
     4f4:	4770      	bxeq	lr
     4f6:	b530      	push	{r4, r5, lr}
     4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     500:	f04f 0500 	mov.w	r5, #0
     504:	f04f 0100 	mov.w	r1, #0
     508:	e750      	b.n	3ac <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x28>
     50a:	bf00      	nop

0000050c <__aeabi_i2d>:
     50c:	f090 0f00 	teq	r0, #0
     510:	bf04      	itt	eq
     512:	2100      	moveq	r1, #0
     514:	4770      	bxeq	lr
     516:	b530      	push	{r4, r5, lr}
     518:	f44f 6480 	mov.w	r4, #1024	; 0x400
     51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     524:	bf48      	it	mi
     526:	4240      	negmi	r0, r0
     528:	f04f 0100 	mov.w	r1, #0
     52c:	e73e      	b.n	3ac <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x28>
     52e:	bf00      	nop

00000530 <__aeabi_f2d>:
     530:	0042      	lsls	r2, r0, #1
     532:	ea4f 01e2 	mov.w	r1, r2, asr #3
     536:	ea4f 0131 	mov.w	r1, r1, rrx
     53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     53e:	bf1f      	itttt	ne
     540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     54c:	4770      	bxne	lr
     54e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     552:	bf08      	it	eq
     554:	4770      	bxeq	lr
     556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     55a:	bf04      	itt	eq
     55c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     560:	4770      	bxeq	lr
     562:	b530      	push	{r4, r5, lr}
     564:	f44f 7460 	mov.w	r4, #896	; 0x380
     568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	e71c      	b.n	3ac <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x28>
     572:	bf00      	nop

00000574 <__aeabi_ul2d>:
     574:	ea50 0201 	orrs.w	r2, r0, r1
     578:	bf08      	it	eq
     57a:	4770      	bxeq	lr
     57c:	b530      	push	{r4, r5, lr}
     57e:	f04f 0500 	mov.w	r5, #0
     582:	e00a      	b.n	59a <__aeabi_l2d+0x16>

00000584 <__aeabi_l2d>:
     584:	ea50 0201 	orrs.w	r2, r0, r1
     588:	bf08      	it	eq
     58a:	4770      	bxeq	lr
     58c:	b530      	push	{r4, r5, lr}
     58e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     592:	d502      	bpl.n	59a <__aeabi_l2d+0x16>
     594:	4240      	negs	r0, r0
     596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     59a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     59e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     5a6:	f43f aed8 	beq.w	35a <__adddf3+0xe6>
     5aa:	f04f 0203 	mov.w	r2, #3
     5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5b2:	bf18      	it	ne
     5b4:	3203      	addne	r2, #3
     5b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5ba:	bf18      	it	ne
     5bc:	3203      	addne	r2, #3
     5be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     5c2:	f1c2 0320 	rsb	r3, r2, #32
     5c6:	fa00 fc03 	lsl.w	ip, r0, r3
     5ca:	fa20 f002 	lsr.w	r0, r0, r2
     5ce:	fa01 fe03 	lsl.w	lr, r1, r3
     5d2:	ea40 000e 	orr.w	r0, r0, lr
     5d6:	fa21 f102 	lsr.w	r1, r1, r2
     5da:	4414      	add	r4, r2
     5dc:	e6bd      	b.n	35a <__adddf3+0xe6>
     5de:	bf00      	nop

000005e0 <__aeabi_dmul>:
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     5e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     5ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     5ee:	bf1d      	ittte	ne
     5f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     5f4:	ea94 0f0c 	teqne	r4, ip
     5f8:	ea95 0f0c 	teqne	r5, ip
     5fc:	f000 f8de 	bleq	7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>
     600:	442c      	add	r4, r5
     602:	ea81 0603 	eor.w	r6, r1, r3
     606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     60a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     60e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     612:	bf18      	it	ne
     614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     620:	d038      	beq.n	694 <CONFIG_BT_HCI_TX_STACK_SIZE+0x94>
     622:	fba0 ce02 	umull	ip, lr, r0, r2
     626:	f04f 0500 	mov.w	r5, #0
     62a:	fbe1 e502 	umlal	lr, r5, r1, r2
     62e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     632:	fbe0 e503 	umlal	lr, r5, r0, r3
     636:	f04f 0600 	mov.w	r6, #0
     63a:	fbe1 5603 	umlal	r5, r6, r1, r3
     63e:	f09c 0f00 	teq	ip, #0
     642:	bf18      	it	ne
     644:	f04e 0e01 	orrne.w	lr, lr, #1
     648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     64c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     654:	d204      	bcs.n	660 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     65a:	416d      	adcs	r5, r5
     65c:	eb46 0606 	adc.w	r6, r6, r6
     660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     66c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     678:	bf88      	it	hi
     67a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     67e:	d81e      	bhi.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     684:	bf08      	it	eq
     686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     68a:	f150 0000 	adcs.w	r0, r0, #0
     68e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     698:	ea46 0101 	orr.w	r1, r6, r1
     69c:	ea40 0002 	orr.w	r0, r0, r2
     6a0:	ea81 0103 	eor.w	r1, r1, r3
     6a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     6a8:	bfc2      	ittt	gt
     6aa:	ebd4 050c 	rsbsgt	r5, r4, ip
     6ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     6b2:	bd70      	popgt	{r4, r5, r6, pc}
     6b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     6b8:	f04f 0e00 	mov.w	lr, #0
     6bc:	3c01      	subs	r4, #1
     6be:	f300 80ab 	bgt.w	818 <CONFIG_ISR_STACK_SIZE+0x18>
     6c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     6c6:	bfde      	ittt	le
     6c8:	2000      	movle	r0, #0
     6ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     6ce:	bd70      	pople	{r4, r5, r6, pc}
     6d0:	f1c4 0400 	rsb	r4, r4, #0
     6d4:	3c20      	subs	r4, #32
     6d6:	da35      	bge.n	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     6d8:	340c      	adds	r4, #12
     6da:	dc1b      	bgt.n	714 <CONFIG_BT_HCI_TX_STACK_SIZE+0x114>
     6dc:	f104 0414 	add.w	r4, r4, #20
     6e0:	f1c4 0520 	rsb	r5, r4, #32
     6e4:	fa00 f305 	lsl.w	r3, r0, r5
     6e8:	fa20 f004 	lsr.w	r0, r0, r4
     6ec:	fa01 f205 	lsl.w	r2, r1, r5
     6f0:	ea40 0002 	orr.w	r0, r0, r2
     6f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     6f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     6fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     700:	fa21 f604 	lsr.w	r6, r1, r4
     704:	eb42 0106 	adc.w	r1, r2, r6
     708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     70c:	bf08      	it	eq
     70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     712:	bd70      	pop	{r4, r5, r6, pc}
     714:	f1c4 040c 	rsb	r4, r4, #12
     718:	f1c4 0520 	rsb	r5, r4, #32
     71c:	fa00 f304 	lsl.w	r3, r0, r4
     720:	fa20 f005 	lsr.w	r0, r0, r5
     724:	fa01 f204 	lsl.w	r2, r1, r4
     728:	ea40 0002 	orr.w	r0, r0, r2
     72c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     734:	f141 0100 	adc.w	r1, r1, #0
     738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     73c:	bf08      	it	eq
     73e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	f1c4 0520 	rsb	r5, r4, #32
     748:	fa00 f205 	lsl.w	r2, r0, r5
     74c:	ea4e 0e02 	orr.w	lr, lr, r2
     750:	fa20 f304 	lsr.w	r3, r0, r4
     754:	fa01 f205 	lsl.w	r2, r1, r5
     758:	ea43 0302 	orr.w	r3, r3, r2
     75c:	fa21 f004 	lsr.w	r0, r1, r4
     760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     764:	fa21 f204 	lsr.w	r2, r1, r4
     768:	ea20 0002 	bic.w	r0, r0, r2
     76c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     774:	bf08      	it	eq
     776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	f094 0f00 	teq	r4, #0
     780:	d10f      	bne.n	7a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a2>
     782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     786:	0040      	lsls	r0, r0, #1
     788:	eb41 0101 	adc.w	r1, r1, r1
     78c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     790:	bf08      	it	eq
     792:	3c01      	subeq	r4, #1
     794:	d0f7      	beq.n	786 <CONFIG_BT_HCI_TX_STACK_SIZE+0x186>
     796:	ea41 0106 	orr.w	r1, r1, r6
     79a:	f095 0f00 	teq	r5, #0
     79e:	bf18      	it	ne
     7a0:	4770      	bxne	lr
     7a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     7a6:	0052      	lsls	r2, r2, #1
     7a8:	eb43 0303 	adc.w	r3, r3, r3
     7ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     7b0:	bf08      	it	eq
     7b2:	3d01      	subeq	r5, #1
     7b4:	d0f7      	beq.n	7a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a6>
     7b6:	ea43 0306 	orr.w	r3, r3, r6
     7ba:	4770      	bx	lr
     7bc:	ea94 0f0c 	teq	r4, ip
     7c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7c4:	bf18      	it	ne
     7c6:	ea95 0f0c 	teqne	r5, ip
     7ca:	d00c      	beq.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     7cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7d0:	bf18      	it	ne
     7d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7d6:	d1d1      	bne.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     7d8:	ea81 0103 	eor.w	r1, r1, r3
     7dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7e0:	f04f 0000 	mov.w	r0, #0
     7e4:	bd70      	pop	{r4, r5, r6, pc}
     7e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7ea:	bf06      	itte	eq
     7ec:	4610      	moveq	r0, r2
     7ee:	4619      	moveq	r1, r3
     7f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7f4:	d019      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	d102      	bne.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     7fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     800:	d113      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     802:	ea95 0f0c 	teq	r5, ip
     806:	d105      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     80c:	bf1c      	itt	ne
     80e:	4610      	movne	r0, r2
     810:	4619      	movne	r1, r3
     812:	d10a      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     814:	ea81 0103 	eor.w	r1, r1, r3
     818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     81c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     824:	f04f 0000 	mov.w	r0, #0
     828:	bd70      	pop	{r4, r5, r6, pc}
     82a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     82e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     832:	bd70      	pop	{r4, r5, r6, pc}

00000834 <__aeabi_ddiv>:
     834:	b570      	push	{r4, r5, r6, lr}
     836:	f04f 0cff 	mov.w	ip, #255	; 0xff
     83a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     83e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     842:	bf1d      	ittte	ne
     844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     848:	ea94 0f0c 	teqne	r4, ip
     84c:	ea95 0f0c 	teqne	r5, ip
     850:	f000 f8a7 	bleq	9a2 <__data_size+0x11>
     854:	eba4 0405 	sub.w	r4, r4, r5
     858:	ea81 0e03 	eor.w	lr, r1, r3
     85c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     860:	ea4f 3101 	mov.w	r1, r1, lsl #12
     864:	f000 8088 	beq.w	978 <__aeabi_ddiv+0x144>
     868:	ea4f 3303 	mov.w	r3, r3, lsl #12
     86c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     878:	ea4f 2202 	mov.w	r2, r2, lsl #8
     87c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     884:	ea4f 2600 	mov.w	r6, r0, lsl #8
     888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     88c:	429d      	cmp	r5, r3
     88e:	bf08      	it	eq
     890:	4296      	cmpeq	r6, r2
     892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     896:	f504 7440 	add.w	r4, r4, #768	; 0x300
     89a:	d202      	bcs.n	8a2 <__aeabi_ddiv+0x6e>
     89c:	085b      	lsrs	r3, r3, #1
     89e:	ea4f 0232 	mov.w	r2, r2, rrx
     8a2:	1ab6      	subs	r6, r6, r2
     8a4:	eb65 0503 	sbc.w	r5, r5, r3
     8a8:	085b      	lsrs	r3, r3, #1
     8aa:	ea4f 0232 	mov.w	r2, r2, rrx
     8ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     8b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     8b6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     8be:	bf22      	ittt	cs
     8c0:	1ab6      	subcs	r6, r6, r2
     8c2:	4675      	movcs	r5, lr
     8c4:	ea40 000c 	orrcs.w	r0, r0, ip
     8c8:	085b      	lsrs	r3, r3, #1
     8ca:	ea4f 0232 	mov.w	r2, r2, rrx
     8ce:	ebb6 0e02 	subs.w	lr, r6, r2
     8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     8d6:	bf22      	ittt	cs
     8d8:	1ab6      	subcs	r6, r6, r2
     8da:	4675      	movcs	r5, lr
     8dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     8e0:	085b      	lsrs	r3, r3, #1
     8e2:	ea4f 0232 	mov.w	r2, r2, rrx
     8e6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     8ee:	bf22      	ittt	cs
     8f0:	1ab6      	subcs	r6, r6, r2
     8f2:	4675      	movcs	r5, lr
     8f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     8f8:	085b      	lsrs	r3, r3, #1
     8fa:	ea4f 0232 	mov.w	r2, r2, rrx
     8fe:	ebb6 0e02 	subs.w	lr, r6, r2
     902:	eb75 0e03 	sbcs.w	lr, r5, r3
     906:	bf22      	ittt	cs
     908:	1ab6      	subcs	r6, r6, r2
     90a:	4675      	movcs	r5, lr
     90c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     910:	ea55 0e06 	orrs.w	lr, r5, r6
     914:	d018      	beq.n	948 <__aeabi_ddiv+0x114>
     916:	ea4f 1505 	mov.w	r5, r5, lsl #4
     91a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     91e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     92a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     92e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     932:	d1c0      	bne.n	8b6 <__aeabi_ddiv+0x82>
     934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     938:	d10b      	bne.n	952 <__aeabi_ddiv+0x11e>
     93a:	ea41 0100 	orr.w	r1, r1, r0
     93e:	f04f 0000 	mov.w	r0, #0
     942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     946:	e7b6      	b.n	8b6 <__aeabi_ddiv+0x82>
     948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     94c:	bf04      	itt	eq
     94e:	4301      	orreq	r1, r0
     950:	2000      	moveq	r0, #0
     952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     956:	bf88      	it	hi
     958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     95c:	f63f aeaf 	bhi.w	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     960:	ebb5 0c03 	subs.w	ip, r5, r3
     964:	bf04      	itt	eq
     966:	ebb6 0c02 	subseq.w	ip, r6, r2
     96a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     96e:	f150 0000 	adcs.w	r0, r0, #0
     972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     976:	bd70      	pop	{r4, r5, r6, pc}
     978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     97c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     984:	bfc2      	ittt	gt
     986:	ebd4 050c 	rsbsgt	r5, r4, ip
     98a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     98e:	bd70      	popgt	{r4, r5, r6, pc}
     990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     994:	f04f 0e00 	mov.w	lr, #0
     998:	3c01      	subs	r4, #1
     99a:	e690      	b.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     99c:	ea45 0e06 	orr.w	lr, r5, r6
     9a0:	e68d      	b.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     9a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     9a6:	ea94 0f0c 	teq	r4, ip
     9aa:	bf08      	it	eq
     9ac:	ea95 0f0c 	teqeq	r5, ip
     9b0:	f43f af3b 	beq.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9b4:	ea94 0f0c 	teq	r4, ip
     9b8:	d10a      	bne.n	9d0 <__data_size+0x3f>
     9ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     9be:	f47f af34 	bne.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9c2:	ea95 0f0c 	teq	r5, ip
     9c6:	f47f af25 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9ca:	4610      	mov	r0, r2
     9cc:	4619      	mov	r1, r3
     9ce:	e72c      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9d0:	ea95 0f0c 	teq	r5, ip
     9d4:	d106      	bne.n	9e4 <__data_size+0x53>
     9d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     9da:	f43f aefd 	beq.w	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     9de:	4610      	mov	r0, r2
     9e0:	4619      	mov	r1, r3
     9e2:	e722      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     9e8:	bf18      	it	ne
     9ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     9ee:	f47f aec5 	bne.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     9f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     9f6:	f47f af0d 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     9fe:	f47f aeeb 	bne.w	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     a02:	e712      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>

00000a04 <__gedf2>:
     a04:	f04f 3cff 	mov.w	ip, #4294967295
     a08:	e006      	b.n	a18 <__cmpdf2+0x4>
     a0a:	bf00      	nop

00000a0c <__ledf2>:
     a0c:	f04f 0c01 	mov.w	ip, #1
     a10:	e002      	b.n	a18 <__cmpdf2+0x4>
     a12:	bf00      	nop

00000a14 <__cmpdf2>:
     a14:	f04f 0c01 	mov.w	ip, #1
     a18:	f84d cd04 	str.w	ip, [sp, #-4]!
     a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a28:	bf18      	it	ne
     a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a2e:	d01b      	beq.n	a68 <__cmpdf2+0x54>
     a30:	b001      	add	sp, #4
     a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a36:	bf0c      	ite	eq
     a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a3c:	ea91 0f03 	teqne	r1, r3
     a40:	bf02      	ittt	eq
     a42:	ea90 0f02 	teqeq	r0, r2
     a46:	2000      	moveq	r0, #0
     a48:	4770      	bxeq	lr
     a4a:	f110 0f00 	cmn.w	r0, #0
     a4e:	ea91 0f03 	teq	r1, r3
     a52:	bf58      	it	pl
     a54:	4299      	cmppl	r1, r3
     a56:	bf08      	it	eq
     a58:	4290      	cmpeq	r0, r2
     a5a:	bf2c      	ite	cs
     a5c:	17d8      	asrcs	r0, r3, #31
     a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a62:	f040 0001 	orr.w	r0, r0, #1
     a66:	4770      	bx	lr
     a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a70:	d102      	bne.n	a78 <__cmpdf2+0x64>
     a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a76:	d107      	bne.n	a88 <__cmpdf2+0x74>
     a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a80:	d1d6      	bne.n	a30 <__cmpdf2+0x1c>
     a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a86:	d0d3      	beq.n	a30 <__cmpdf2+0x1c>
     a88:	f85d 0b04 	ldr.w	r0, [sp], #4
     a8c:	4770      	bx	lr
     a8e:	bf00      	nop

00000a90 <__aeabi_cdrcmple>:
     a90:	4684      	mov	ip, r0
     a92:	4610      	mov	r0, r2
     a94:	4662      	mov	r2, ip
     a96:	468c      	mov	ip, r1
     a98:	4619      	mov	r1, r3
     a9a:	4663      	mov	r3, ip
     a9c:	e000      	b.n	aa0 <__aeabi_cdcmpeq>
     a9e:	bf00      	nop

00000aa0 <__aeabi_cdcmpeq>:
     aa0:	b501      	push	{r0, lr}
     aa2:	f7ff ffb7 	bl	a14 <__cmpdf2>
     aa6:	2800      	cmp	r0, #0
     aa8:	bf48      	it	mi
     aaa:	f110 0f00 	cmnmi.w	r0, #0
     aae:	bd01      	pop	{r0, pc}

00000ab0 <__aeabi_dcmpeq>:
     ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ab4:	f7ff fff4 	bl	aa0 <__aeabi_cdcmpeq>
     ab8:	bf0c      	ite	eq
     aba:	2001      	moveq	r0, #1
     abc:	2000      	movne	r0, #0
     abe:	f85d fb08 	ldr.w	pc, [sp], #8
     ac2:	bf00      	nop

00000ac4 <__aeabi_dcmplt>:
     ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac8:	f7ff ffea 	bl	aa0 <__aeabi_cdcmpeq>
     acc:	bf34      	ite	cc
     ace:	2001      	movcc	r0, #1
     ad0:	2000      	movcs	r0, #0
     ad2:	f85d fb08 	ldr.w	pc, [sp], #8
     ad6:	bf00      	nop

00000ad8 <__aeabi_dcmple>:
     ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
     adc:	f7ff ffe0 	bl	aa0 <__aeabi_cdcmpeq>
     ae0:	bf94      	ite	ls
     ae2:	2001      	movls	r0, #1
     ae4:	2000      	movhi	r0, #0
     ae6:	f85d fb08 	ldr.w	pc, [sp], #8
     aea:	bf00      	nop

00000aec <__aeabi_dcmpge>:
     aec:	f84d ed08 	str.w	lr, [sp, #-8]!
     af0:	f7ff ffce 	bl	a90 <__aeabi_cdrcmple>
     af4:	bf94      	ite	ls
     af6:	2001      	movls	r0, #1
     af8:	2000      	movhi	r0, #0
     afa:	f85d fb08 	ldr.w	pc, [sp], #8
     afe:	bf00      	nop

00000b00 <__aeabi_dcmpgt>:
     b00:	f84d ed08 	str.w	lr, [sp, #-8]!
     b04:	f7ff ffc4 	bl	a90 <__aeabi_cdrcmple>
     b08:	bf34      	ite	cc
     b0a:	2001      	movcc	r0, #1
     b0c:	2000      	movcs	r0, #0
     b0e:	f85d fb08 	ldr.w	pc, [sp], #8
     b12:	bf00      	nop

00000b14 <__aeabi_d2f>:
     b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     b1c:	bf24      	itt	cs
     b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     b26:	d90d      	bls.n	b44 <__aeabi_d2f+0x30>
     b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     b3c:	bf08      	it	eq
     b3e:	f020 0001 	biceq.w	r0, r0, #1
     b42:	4770      	bx	lr
     b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     b48:	d121      	bne.n	b8e <__aeabi_d2f+0x7a>
     b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     b4e:	bfbc      	itt	lt
     b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     b54:	4770      	bxlt	lr
     b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     b5e:	f1c2 0218 	rsb	r2, r2, #24
     b62:	f1c2 0c20 	rsb	ip, r2, #32
     b66:	fa10 f30c 	lsls.w	r3, r0, ip
     b6a:	fa20 f002 	lsr.w	r0, r0, r2
     b6e:	bf18      	it	ne
     b70:	f040 0001 	orrne.w	r0, r0, #1
     b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
     b80:	ea40 000c 	orr.w	r0, r0, ip
     b84:	fa23 f302 	lsr.w	r3, r3, r2
     b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b8c:	e7cc      	b.n	b28 <__aeabi_d2f+0x14>
     b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b92:	d107      	bne.n	ba4 <__aeabi_d2f+0x90>
     b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b98:	bf1e      	ittt	ne
     b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ba2:	4770      	bxne	lr
     ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop

00000bb4 <__aeabi_frsub>:
     bb4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     bb8:	e002      	b.n	bc0 <__addsf3>
     bba:	bf00      	nop

00000bbc <__aeabi_fsub>:
     bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000bc0 <__addsf3>:
     bc0:	0042      	lsls	r2, r0, #1
     bc2:	bf1f      	itttt	ne
     bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     bc8:	ea92 0f03 	teqne	r2, r3
     bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bd4:	d06a      	beq.n	cac <__addsf3+0xec>
     bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
     bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     bde:	bfc1      	itttt	gt
     be0:	18d2      	addgt	r2, r2, r3
     be2:	4041      	eorgt	r1, r0
     be4:	4048      	eorgt	r0, r1
     be6:	4041      	eorgt	r1, r0
     be8:	bfb8      	it	lt
     bea:	425b      	neglt	r3, r3
     bec:	2b19      	cmp	r3, #25
     bee:	bf88      	it	hi
     bf0:	4770      	bxhi	lr
     bf2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     bf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     bfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bfe:	bf18      	it	ne
     c00:	4240      	negne	r0, r0
     c02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     c06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     c0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     c0e:	bf18      	it	ne
     c10:	4249      	negne	r1, r1
     c12:	ea92 0f03 	teq	r2, r3
     c16:	d03f      	beq.n	c98 <__addsf3+0xd8>
     c18:	f1a2 0201 	sub.w	r2, r2, #1
     c1c:	fa41 fc03 	asr.w	ip, r1, r3
     c20:	eb10 000c 	adds.w	r0, r0, ip
     c24:	f1c3 0320 	rsb	r3, r3, #32
     c28:	fa01 f103 	lsl.w	r1, r1, r3
     c2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c30:	d502      	bpl.n	c38 <__addsf3+0x78>
     c32:	4249      	negs	r1, r1
     c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     c38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     c3c:	d313      	bcc.n	c66 <__addsf3+0xa6>
     c3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     c42:	d306      	bcc.n	c52 <__addsf3+0x92>
     c44:	0840      	lsrs	r0, r0, #1
     c46:	ea4f 0131 	mov.w	r1, r1, rrx
     c4a:	f102 0201 	add.w	r2, r2, #1
     c4e:	2afe      	cmp	r2, #254	; 0xfe
     c50:	d251      	bcs.n	cf6 <__addsf3+0x136>
     c52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c5a:	bf08      	it	eq
     c5c:	f020 0001 	biceq.w	r0, r0, #1
     c60:	ea40 0003 	orr.w	r0, r0, r3
     c64:	4770      	bx	lr
     c66:	0049      	lsls	r1, r1, #1
     c68:	eb40 0000 	adc.w	r0, r0, r0
     c6c:	3a01      	subs	r2, #1
     c6e:	bf28      	it	cs
     c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     c74:	d2ed      	bcs.n	c52 <__addsf3+0x92>
     c76:	fab0 fc80 	clz	ip, r0
     c7a:	f1ac 0c08 	sub.w	ip, ip, #8
     c7e:	ebb2 020c 	subs.w	r2, r2, ip
     c82:	fa00 f00c 	lsl.w	r0, r0, ip
     c86:	bfaa      	itet	ge
     c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     c8c:	4252      	neglt	r2, r2
     c8e:	4318      	orrge	r0, r3
     c90:	bfbc      	itt	lt
     c92:	40d0      	lsrlt	r0, r2
     c94:	4318      	orrlt	r0, r3
     c96:	4770      	bx	lr
     c98:	f092 0f00 	teq	r2, #0
     c9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     ca0:	bf06      	itte	eq
     ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     ca6:	3201      	addeq	r2, #1
     ca8:	3b01      	subne	r3, #1
     caa:	e7b5      	b.n	c18 <__addsf3+0x58>
     cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
     cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     cb4:	bf18      	it	ne
     cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     cba:	d021      	beq.n	d00 <__addsf3+0x140>
     cbc:	ea92 0f03 	teq	r2, r3
     cc0:	d004      	beq.n	ccc <__addsf3+0x10c>
     cc2:	f092 0f00 	teq	r2, #0
     cc6:	bf08      	it	eq
     cc8:	4608      	moveq	r0, r1
     cca:	4770      	bx	lr
     ccc:	ea90 0f01 	teq	r0, r1
     cd0:	bf1c      	itt	ne
     cd2:	2000      	movne	r0, #0
     cd4:	4770      	bxne	lr
     cd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     cda:	d104      	bne.n	ce6 <__addsf3+0x126>
     cdc:	0040      	lsls	r0, r0, #1
     cde:	bf28      	it	cs
     ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     ce4:	4770      	bx	lr
     ce6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     cea:	bf3c      	itt	cc
     cec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     cf0:	4770      	bxcc	lr
     cf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cfe:	4770      	bx	lr
     d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
     d04:	bf16      	itet	ne
     d06:	4608      	movne	r0, r1
     d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     d0c:	4601      	movne	r1, r0
     d0e:	0242      	lsls	r2, r0, #9
     d10:	bf06      	itte	eq
     d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     d16:	ea90 0f01 	teqeq	r0, r1
     d1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     d1e:	4770      	bx	lr

00000d20 <__aeabi_ui2f>:
     d20:	f04f 0300 	mov.w	r3, #0
     d24:	e004      	b.n	d30 <__aeabi_i2f+0x8>
     d26:	bf00      	nop

00000d28 <__aeabi_i2f>:
     d28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     d2c:	bf48      	it	mi
     d2e:	4240      	negmi	r0, r0
     d30:	ea5f 0c00 	movs.w	ip, r0
     d34:	bf08      	it	eq
     d36:	4770      	bxeq	lr
     d38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     d3c:	4601      	mov	r1, r0
     d3e:	f04f 0000 	mov.w	r0, #0
     d42:	e01c      	b.n	d7e <__aeabi_l2f+0x2a>

00000d44 <__aeabi_ul2f>:
     d44:	ea50 0201 	orrs.w	r2, r0, r1
     d48:	bf08      	it	eq
     d4a:	4770      	bxeq	lr
     d4c:	f04f 0300 	mov.w	r3, #0
     d50:	e00a      	b.n	d68 <__aeabi_l2f+0x14>
     d52:	bf00      	nop

00000d54 <__aeabi_l2f>:
     d54:	ea50 0201 	orrs.w	r2, r0, r1
     d58:	bf08      	it	eq
     d5a:	4770      	bxeq	lr
     d5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     d60:	d502      	bpl.n	d68 <__aeabi_l2f+0x14>
     d62:	4240      	negs	r0, r0
     d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     d68:	ea5f 0c01 	movs.w	ip, r1
     d6c:	bf02      	ittt	eq
     d6e:	4684      	moveq	ip, r0
     d70:	4601      	moveq	r1, r0
     d72:	2000      	moveq	r0, #0
     d74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     d78:	bf08      	it	eq
     d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     d82:	fabc f28c 	clz	r2, ip
     d86:	3a08      	subs	r2, #8
     d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     d8c:	db10      	blt.n	db0 <__aeabi_l2f+0x5c>
     d8e:	fa01 fc02 	lsl.w	ip, r1, r2
     d92:	4463      	add	r3, ip
     d94:	fa00 fc02 	lsl.w	ip, r0, r2
     d98:	f1c2 0220 	rsb	r2, r2, #32
     d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     da0:	fa20 f202 	lsr.w	r2, r0, r2
     da4:	eb43 0002 	adc.w	r0, r3, r2
     da8:	bf08      	it	eq
     daa:	f020 0001 	biceq.w	r0, r0, #1
     dae:	4770      	bx	lr
     db0:	f102 0220 	add.w	r2, r2, #32
     db4:	fa01 fc02 	lsl.w	ip, r1, r2
     db8:	f1c2 0220 	rsb	r2, r2, #32
     dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     dc0:	fa21 f202 	lsr.w	r2, r1, r2
     dc4:	eb43 0002 	adc.w	r0, r3, r2
     dc8:	bf08      	it	eq
     dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dce:	4770      	bx	lr

00000dd0 <__aeabi_f2uiz>:
     dd0:	0042      	lsls	r2, r0, #1
     dd2:	d20e      	bcs.n	df2 <__aeabi_f2uiz+0x22>
     dd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     dd8:	d30b      	bcc.n	df2 <__aeabi_f2uiz+0x22>
     dda:	f04f 039e 	mov.w	r3, #158	; 0x9e
     dde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     de2:	d409      	bmi.n	df8 <__aeabi_f2uiz+0x28>
     de4:	ea4f 2300 	mov.w	r3, r0, lsl #8
     de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     dec:	fa23 f002 	lsr.w	r0, r3, r2
     df0:	4770      	bx	lr
     df2:	f04f 0000 	mov.w	r0, #0
     df6:	4770      	bx	lr
     df8:	f112 0f61 	cmn.w	r2, #97	; 0x61
     dfc:	d101      	bne.n	e02 <__aeabi_f2uiz+0x32>
     dfe:	0242      	lsls	r2, r0, #9
     e00:	d102      	bne.n	e08 <__aeabi_f2uiz+0x38>
     e02:	f04f 30ff 	mov.w	r0, #4294967295
     e06:	4770      	bx	lr
     e08:	f04f 0000 	mov.w	r0, #0
     e0c:	4770      	bx	lr
     e0e:	bf00      	nop

00000e10 <__aeabi_uldivmod>:
     e10:	b953      	cbnz	r3, e28 <__aeabi_uldivmod+0x18>
     e12:	b94a      	cbnz	r2, e28 <__aeabi_uldivmod+0x18>
     e14:	2900      	cmp	r1, #0
     e16:	bf08      	it	eq
     e18:	2800      	cmpeq	r0, #0
     e1a:	bf1c      	itt	ne
     e1c:	f04f 31ff 	movne.w	r1, #4294967295
     e20:	f04f 30ff 	movne.w	r0, #4294967295
     e24:	f000 b80c 	b.w	e40 <__aeabi_idiv0>
     e28:	f1ad 0c08 	sub.w	ip, sp, #8
     e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e30:	f00b fc7e 	bl	c730 <__udivmoddi4>
     e34:	f8dd e004 	ldr.w	lr, [sp, #4]
     e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e3c:	b004      	add	sp, #16
     e3e:	4770      	bx	lr

00000e40 <__aeabi_idiv0>:
     e40:	4770      	bx	lr
     e42:	bf00      	nop

00000e44 <ocrypto_bigint_add256>:
     e44:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e48:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     e4c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e50:	185b      	adds	r3, r3, r1
     e52:	eb54 040c 	adcs.w	r4, r4, ip
     e56:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e5a:	414d      	adcs	r5, r1
     e5c:	eb56 060c 	adcs.w	r6, r6, ip
     e60:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e64:	414f      	adcs	r7, r1
     e66:	eb58 080c 	adcs.w	r8, r8, ip
     e6a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e6e:	eb59 0901 	adcs.w	r9, r9, r1
     e72:	eb5a 0a0c 	adcs.w	sl, sl, ip
     e76:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     e7a:	4180      	sbcs	r0, r0
     e7c:	3001      	adds	r0, #1
     e7e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e82:	4770      	bx	lr

00000e84 <ocrypto_bigint_sub256>:
     e84:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e88:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     e8c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e90:	1a5b      	subs	r3, r3, r1
     e92:	eb74 040c 	sbcs.w	r4, r4, ip
     e96:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e9a:	418d      	sbcs	r5, r1
     e9c:	eb76 060c 	sbcs.w	r6, r6, ip
     ea0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ea4:	418f      	sbcs	r7, r1
     ea6:	eb78 080c 	sbcs.w	r8, r8, ip
     eaa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     eae:	eb79 0901 	sbcs.w	r9, r9, r1
     eb2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     eb6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     eba:	4180      	sbcs	r0, r0
     ebc:	4240      	negs	r0, r0
     ebe:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ec2:	4770      	bx	lr

00000ec4 <ocrypto_bigint_cadd256>:
     ec4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ec8:	4252      	negs	r2, r2
     eca:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     ece:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     ed2:	4017      	ands	r7, r2
     ed4:	19db      	adds	r3, r3, r7
     ed6:	ea18 0802 	ands.w	r8, r8, r2
     eda:	eb54 0408 	adcs.w	r4, r4, r8
     ede:	ea19 0902 	ands.w	r9, r9, r2
     ee2:	eb55 0509 	adcs.w	r5, r5, r9
     ee6:	ea1a 0a02 	ands.w	sl, sl, r2
     eea:	eb56 060a 	adcs.w	r6, r6, sl
     eee:	c078      	stmia	r0!, {r3, r4, r5, r6}
     ef0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     ef4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     ef8:	4017      	ands	r7, r2
     efa:	417b      	adcs	r3, r7
     efc:	ea18 0802 	ands.w	r8, r8, r2
     f00:	eb54 0408 	adcs.w	r4, r4, r8
     f04:	ea19 0902 	ands.w	r9, r9, r2
     f08:	eb55 0509 	adcs.w	r5, r5, r9
     f0c:	ea1a 0a02 	ands.w	sl, sl, r2
     f10:	eb56 060a 	adcs.w	r6, r6, sl
     f14:	c078      	stmia	r0!, {r3, r4, r5, r6}
     f16:	4180      	sbcs	r0, r0
     f18:	3001      	adds	r0, #1
     f1a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f1e:	4770      	bx	lr

00000f20 <ocrypto_bigint_csub256>:
     f20:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f24:	4252      	negs	r2, r2
     f26:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     f2a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     f2e:	4017      	ands	r7, r2
     f30:	1bdb      	subs	r3, r3, r7
     f32:	ea18 0802 	ands.w	r8, r8, r2
     f36:	eb74 0408 	sbcs.w	r4, r4, r8
     f3a:	ea19 0902 	ands.w	r9, r9, r2
     f3e:	eb75 0509 	sbcs.w	r5, r5, r9
     f42:	ea1a 0a02 	ands.w	sl, sl, r2
     f46:	eb76 060a 	sbcs.w	r6, r6, sl
     f4a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     f4c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     f50:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     f54:	4017      	ands	r7, r2
     f56:	41bb      	sbcs	r3, r7
     f58:	ea18 0802 	ands.w	r8, r8, r2
     f5c:	eb74 0408 	sbcs.w	r4, r4, r8
     f60:	ea19 0902 	ands.w	r9, r9, r2
     f64:	eb75 0509 	sbcs.w	r5, r5, r9
     f68:	ea1a 0a02 	ands.w	sl, sl, r2
     f6c:	eb76 060a 	sbcs.w	r6, r6, sl
     f70:	c078      	stmia	r0!, {r3, r4, r5, r6}
     f72:	4180      	sbcs	r0, r0
     f74:	4240      	negs	r0, r0
     f76:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f7a:	4770      	bx	lr

00000f7c <ocrypto_bigint_cswap256>:
     f7c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     f80:	4252      	negs	r2, r2
     f82:	f04f 0804 	mov.w	r8, #4

00000f86 <cswap256_loop>:
     f86:	e890 0030 	ldmia.w	r0, {r4, r5}
     f8a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     f8e:	1ba3      	subs	r3, r4, r6
     f90:	4013      	ands	r3, r2
     f92:	1ae4      	subs	r4, r4, r3
     f94:	18f6      	adds	r6, r6, r3
     f96:	1beb      	subs	r3, r5, r7
     f98:	4013      	ands	r3, r2
     f9a:	1aed      	subs	r5, r5, r3
     f9c:	18ff      	adds	r7, r7, r3
     f9e:	c030      	stmia	r0!, {r4, r5}
     fa0:	c1c0      	stmia	r1!, {r6, r7}
     fa2:	f1b8 0801 	subs.w	r8, r8, #1
     fa6:	d1ee      	bne.n	f86 <cswap256_loop>
     fa8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     fac:	4770      	bx	lr
     fae:	bf00      	nop

00000fb0 <ocrypto_mul256_noframe>:
     fb0:	b500      	push	{lr}
     fb2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     fb6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     fba:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     fbe:	b402      	push	{r1}
     fc0:	fba7 5102 	umull	r5, r1, r7, r2
     fc4:	950a      	str	r5, [sp, #40]	; 0x28
     fc6:	fba8 0b02 	umull	r0, fp, r8, r2
     fca:	fbe7 1063 	umaal	r1, r0, r7, r3
     fce:	fbe9 b062 	umaal	fp, r0, r9, r2
     fd2:	910b      	str	r1, [sp, #44]	; 0x2c
     fd4:	fba8 5103 	umull	r5, r1, r8, r3
     fd8:	fbea 0162 	umaal	r0, r1, sl, r2
     fdc:	fbe7 b564 	umaal	fp, r5, r7, r4
     fe0:	fbe7 0566 	umaal	r0, r5, r7, r6
     fe4:	fbe8 1566 	umaal	r1, r5, r8, r6
     fe8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     fec:	fba9 b603 	umull	fp, r6, r9, r3
     ff0:	fbea 1663 	umaal	r1, r6, sl, r3
     ff4:	fbec 5663 	umaal	r5, r6, ip, r3
     ff8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     ffc:	fbe9 1b64 	umaal	r1, fp, r9, r4
    1000:	fbea 5b64 	umaal	r5, fp, sl, r4
    1004:	fbec 6b64 	umaal	r6, fp, ip, r4
    1008:	900d      	str	r0, [sp, #52]	; 0x34
    100a:	fbac 3002 	umull	r3, r0, ip, r2
    100e:	9c05      	ldr	r4, [sp, #20]
    1010:	fbee 5062 	umaal	r5, r0, lr, r2
    1014:	fbe9 6064 	umaal	r6, r0, r9, r4
    1018:	fbea b064 	umaal	fp, r0, sl, r4
    101c:	fbe7 3164 	umaal	r3, r1, r7, r4
    1020:	fbe8 5164 	umaal	r5, r1, r8, r4
    1024:	9c06      	ldr	r4, [sp, #24]
    1026:	fbe8 6164 	umaal	r6, r1, r8, r4
    102a:	fbe9 b164 	umaal	fp, r1, r9, r4
    102e:	fbea 0164 	umaal	r0, r1, sl, r4
    1032:	930e      	str	r3, [sp, #56]	; 0x38
    1034:	fba7 3204 	umull	r3, r2, r7, r4
    1038:	9c07      	ldr	r4, [sp, #28]
    103a:	fbe7 6264 	umaal	r6, r2, r7, r4
    103e:	fbe8 b264 	umaal	fp, r2, r8, r4
    1042:	fbe9 0264 	umaal	r0, r2, r9, r4
    1046:	fbea 1264 	umaal	r1, r2, sl, r4
    104a:	9c04      	ldr	r4, [sp, #16]
    104c:	fbe9 5364 	umaal	r5, r3, r9, r4
    1050:	fbea 6364 	umaal	r6, r3, sl, r4
    1054:	9c08      	ldr	r4, [sp, #32]
    1056:	fbe7 b364 	umaal	fp, r3, r7, r4
    105a:	fbe8 0364 	umaal	r0, r3, r8, r4
    105e:	fbe9 1364 	umaal	r1, r3, r9, r4
    1062:	fbea 2364 	umaal	r2, r3, sl, r4
    1066:	950f      	str	r5, [sp, #60]	; 0x3c
    1068:	f85d 9b04 	ldr.w	r9, [sp], #4
    106c:	e899 0600 	ldmia.w	r9, {r9, sl}
    1070:	f8dd 8000 	ldr.w	r8, [sp]
    1074:	fba9 5408 	umull	r5, r4, r9, r8
    1078:	fbea b468 	umaal	fp, r4, sl, r8
    107c:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1080:	fbec 0468 	umaal	r0, r4, ip, r8
    1084:	fbee 1468 	umaal	r1, r4, lr, r8
    1088:	fbe9 2468 	umaal	r2, r4, r9, r8
    108c:	fbea 3468 	umaal	r3, r4, sl, r8
    1090:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1094:	fbee 6568 	umaal	r6, r5, lr, r8
    1098:	fbe9 b568 	umaal	fp, r5, r9, r8
    109c:	fbea 0568 	umaal	r0, r5, sl, r8
    10a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    10a4:	fbec 1568 	umaal	r1, r5, ip, r8
    10a8:	fbee 2568 	umaal	r2, r5, lr, r8
    10ac:	fbe9 3568 	umaal	r3, r5, r9, r8
    10b0:	fbea 4568 	umaal	r4, r5, sl, r8
    10b4:	960f      	str	r6, [sp, #60]	; 0x3c
    10b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
    10ba:	fbae 7608 	umull	r7, r6, lr, r8
    10be:	fbe9 0668 	umaal	r0, r6, r9, r8
    10c2:	fbea 1668 	umaal	r1, r6, sl, r8
    10c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
    10ca:	fbec 2668 	umaal	r2, r6, ip, r8
    10ce:	fbee 3668 	umaal	r3, r6, lr, r8
    10d2:	fbe9 4668 	umaal	r4, r6, r9, r8
    10d6:	fbea 5668 	umaal	r5, r6, sl, r8
    10da:	f8dd 800c 	ldr.w	r8, [sp, #12]
    10de:	fbec b768 	umaal	fp, r7, ip, r8
    10e2:	fbee 0768 	umaal	r0, r7, lr, r8
    10e6:	fbe9 1768 	umaal	r1, r7, r9, r8
    10ea:	fbea 2768 	umaal	r2, r7, sl, r8
    10ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
    10f2:	fbec 3768 	umaal	r3, r7, ip, r8
    10f6:	fbee 4768 	umaal	r4, r7, lr, r8
    10fa:	fbe9 5768 	umaal	r5, r7, r9, r8
    10fe:	fbea 6768 	umaal	r6, r7, sl, r8
    1102:	b008      	add	sp, #32
    1104:	bd00      	pop	{pc}
    1106:	bf00      	nop

00001108 <ocrypto_bigint_mul256>:
    1108:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    110c:	b087      	sub	sp, #28
    110e:	f7ff ff4f 	bl	fb0 <ocrypto_mul256_noframe>
    1112:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1116:	f108 0820 	add.w	r8, r8, #32
    111a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    111e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1120:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001128 <ocrypto_sqr256_noframe>:
    1128:	b500      	push	{lr}
    112a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    112e:	fba3 5203 	umull	r5, r2, r3, r3
    1132:	9501      	str	r5, [sp, #4]
    1134:	fba3 0104 	umull	r0, r1, r3, r4
    1138:	fbe3 2064 	umaal	r2, r0, r3, r4
    113c:	fbe3 1067 	umaal	r1, r0, r3, r7
    1140:	9202      	str	r2, [sp, #8]
    1142:	fba3 5207 	umull	r5, r2, r3, r7
    1146:	fbe3 0268 	umaal	r0, r2, r3, r8
    114a:	fbe4 1564 	umaal	r1, r5, r4, r4
    114e:	fbe3 0568 	umaal	r0, r5, r3, r8
    1152:	fbe3 2569 	umaal	r2, r5, r3, r9
    1156:	9103      	str	r1, [sp, #12]
    1158:	fba4 b607 	umull	fp, r6, r4, r7
    115c:	fbe3 2669 	umaal	r2, r6, r3, r9
    1160:	fbe3 566a 	umaal	r5, r6, r3, sl
    1164:	fbe4 0b67 	umaal	r0, fp, r4, r7
    1168:	fbe4 2b68 	umaal	r2, fp, r4, r8
    116c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    1170:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    1174:	9004      	str	r0, [sp, #16]
    1176:	fba4 1008 	umull	r1, r0, r4, r8
    117a:	fbe4 5069 	umaal	r5, r0, r4, r9
    117e:	fbe3 606c 	umaal	r6, r0, r3, ip
    1182:	fbe3 b06e 	umaal	fp, r0, r3, lr
    1186:	fbe7 2167 	umaal	r2, r1, r7, r7
    118a:	fbe4 5169 	umaal	r5, r1, r4, r9
    118e:	fbe4 616a 	umaal	r6, r1, r4, sl
    1192:	fbe3 b16e 	umaal	fp, r1, r3, lr
    1196:	fbe4 016e 	umaal	r0, r1, r4, lr
    119a:	9205      	str	r2, [sp, #20]
    119c:	fba7 3208 	umull	r3, r2, r7, r8
    11a0:	fbe4 626a 	umaal	r6, r2, r4, sl
    11a4:	fbe4 b26c 	umaal	fp, r2, r4, ip
    11a8:	fbe4 026e 	umaal	r0, r2, r4, lr
    11ac:	fbe7 126e 	umaal	r1, r2, r7, lr
    11b0:	fbe7 5368 	umaal	r5, r3, r7, r8
    11b4:	fbe7 6369 	umaal	r6, r3, r7, r9
    11b8:	fbe4 b36c 	umaal	fp, r3, r4, ip
    11bc:	fbe7 036c 	umaal	r0, r3, r7, ip
    11c0:	fbe7 136e 	umaal	r1, r3, r7, lr
    11c4:	fbe8 236e 	umaal	r2, r3, r8, lr
    11c8:	9506      	str	r5, [sp, #24]
    11ca:	fba7 5409 	umull	r5, r4, r7, r9
    11ce:	fbe7 b46a 	umaal	fp, r4, r7, sl
    11d2:	fbe7 046c 	umaal	r0, r4, r7, ip
    11d6:	fbe8 146c 	umaal	r1, r4, r8, ip
    11da:	fbe8 246e 	umaal	r2, r4, r8, lr
    11de:	fbe9 346e 	umaal	r3, r4, r9, lr
    11e2:	fbe8 6568 	umaal	r6, r5, r8, r8
    11e6:	fbe7 b56a 	umaal	fp, r5, r7, sl
    11ea:	fbe8 056a 	umaal	r0, r5, r8, sl
    11ee:	fbe8 156c 	umaal	r1, r5, r8, ip
    11f2:	fbe9 256c 	umaal	r2, r5, r9, ip
    11f6:	fbe9 356e 	umaal	r3, r5, r9, lr
    11fa:	fbea 456e 	umaal	r4, r5, sl, lr
    11fe:	9607      	str	r6, [sp, #28]
    1200:	fba8 7609 	umull	r7, r6, r8, r9
    1204:	fbe8 066a 	umaal	r0, r6, r8, sl
    1208:	fbe9 166a 	umaal	r1, r6, r9, sl
    120c:	fbe9 266c 	umaal	r2, r6, r9, ip
    1210:	fbea 366c 	umaal	r3, r6, sl, ip
    1214:	fbea 466e 	umaal	r4, r6, sl, lr
    1218:	fbec 566e 	umaal	r5, r6, ip, lr
    121c:	fbe8 b769 	umaal	fp, r7, r8, r9
    1220:	fbe9 0769 	umaal	r0, r7, r9, r9
    1224:	fbe9 176a 	umaal	r1, r7, r9, sl
    1228:	fbea 276a 	umaal	r2, r7, sl, sl
    122c:	fbea 376c 	umaal	r3, r7, sl, ip
    1230:	fbec 476c 	umaal	r4, r7, ip, ip
    1234:	fbec 576e 	umaal	r5, r7, ip, lr
    1238:	fbee 676e 	umaal	r6, r7, lr, lr
    123c:	bd00      	pop	{pc}
    123e:	bf00      	nop

00001240 <ocrypto_bigint_sqr256>:
    1240:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1244:	b087      	sub	sp, #28
    1246:	f7ff ff6f 	bl	1128 <ocrypto_sqr256_noframe>
    124a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    124e:	f108 0820 	add.w	r8, r8, #32
    1252:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1256:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    1258:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001260 <ocrypto_constant_time_equal>:
    1260:	b430      	push	{r4, r5}
    1262:	f04f 0300 	mov.w	r3, #0

00001266 <constant_time_equal_loop>:
    1266:	f810 4b01 	ldrb.w	r4, [r0], #1
    126a:	f811 5b01 	ldrb.w	r5, [r1], #1
    126e:	3a01      	subs	r2, #1
    1270:	ea84 0405 	eor.w	r4, r4, r5
    1274:	ea43 0304 	orr.w	r3, r3, r4
    1278:	d1f5      	bne.n	1266 <constant_time_equal_loop>
    127a:	f1a3 0301 	sub.w	r3, r3, #1
    127e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    1282:	bc30      	pop	{r4, r5}
    1284:	4770      	bx	lr
    1286:	bf00      	nop

00001288 <ocrypto_constant_time_is_zero>:
    1288:	f04f 0300 	mov.w	r3, #0

0000128c <constant_time_is_zero_loop>:
    128c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1290:	3901      	subs	r1, #1
    1292:	ea43 0302 	orr.w	r3, r3, r2
    1296:	d1f9      	bne.n	128c <constant_time_is_zero_loop>
    1298:	f1a3 0301 	sub.w	r3, r3, #1
    129c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    12a0:	4770      	bx	lr
    12a2:	bf00      	nop

000012a4 <ocrypto_constant_time_xor>:
    12a4:	b430      	push	{r4, r5}

000012a6 <constant_time_xor_loop>:
    12a6:	f811 4b01 	ldrb.w	r4, [r1], #1
    12aa:	f812 5b01 	ldrb.w	r5, [r2], #1
    12ae:	406c      	eors	r4, r5
    12b0:	f800 4b01 	strb.w	r4, [r0], #1
    12b4:	3b01      	subs	r3, #1
    12b6:	d1f6      	bne.n	12a6 <constant_time_xor_loop>
    12b8:	bc30      	pop	{r4, r5}
    12ba:	4770      	bx	lr

000012bc <ocrypto_mod_p256_add>:
    12bc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    12c0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    12c4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    12c8:	185b      	adds	r3, r3, r1
    12ca:	eb54 040c 	adcs.w	r4, r4, ip
    12ce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    12d2:	414d      	adcs	r5, r1
    12d4:	eb56 060c 	adcs.w	r6, r6, ip
    12d8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    12dc:	414f      	adcs	r7, r1
    12de:	eb58 080c 	adcs.w	r8, r8, ip
    12e2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    12e6:	eb59 0901 	adcs.w	r9, r9, r1
    12ea:	eb5a 0a0c 	adcs.w	sl, sl, ip
    12ee:	4189      	sbcs	r1, r1
    12f0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    12f4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    12f8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    12fc:	f176 0600 	sbcs.w	r6, r6, #0
    1300:	f177 0700 	sbcs.w	r7, r7, #0
    1304:	f178 0800 	sbcs.w	r8, r8, #0
    1308:	f179 0901 	sbcs.w	r9, r9, #1
    130c:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    1310:	f151 0100 	adcs.w	r1, r1, #0
    1314:	185b      	adds	r3, r3, r1
    1316:	414c      	adcs	r4, r1
    1318:	414d      	adcs	r5, r1
    131a:	f156 0600 	adcs.w	r6, r6, #0
    131e:	f157 0700 	adcs.w	r7, r7, #0
    1322:	f158 0800 	adcs.w	r8, r8, #0
    1326:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    132a:	eb5a 0a01 	adcs.w	sl, sl, r1
    132e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1332:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1336:	4770      	bx	lr

00001338 <ocrypto_mod_p256_sub>:
    1338:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    133c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1340:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1344:	1a5b      	subs	r3, r3, r1
    1346:	eb74 040c 	sbcs.w	r4, r4, ip
    134a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    134e:	418d      	sbcs	r5, r1
    1350:	eb76 060c 	sbcs.w	r6, r6, ip
    1354:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1358:	418f      	sbcs	r7, r1
    135a:	eb78 080c 	sbcs.w	r8, r8, ip
    135e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1362:	eb79 0901 	sbcs.w	r9, r9, r1
    1366:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    136a:	4189      	sbcs	r1, r1
    136c:	185b      	adds	r3, r3, r1
    136e:	414c      	adcs	r4, r1
    1370:	414d      	adcs	r5, r1
    1372:	f156 0600 	adcs.w	r6, r6, #0
    1376:	f157 0700 	adcs.w	r7, r7, #0
    137a:	f158 0800 	adcs.w	r8, r8, #0
    137e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1382:	eb5a 0a01 	adcs.w	sl, sl, r1
    1386:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    138a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    138e:	4770      	bx	lr

00001390 <mul_reduce>:
    1390:	eb18 0804 	adds.w	r8, r8, r4
    1394:	eb59 0905 	adcs.w	r9, r9, r5
    1398:	eb5a 0a06 	adcs.w	sl, sl, r6
    139c:	eb5b 0b07 	adcs.w	fp, fp, r7
    13a0:	f05f 0c00 	movs.w	ip, #0
    13a4:	f14c 0c00 	adc.w	ip, ip, #0
    13a8:	eb18 0805 	adds.w	r8, r8, r5
    13ac:	eb59 0906 	adcs.w	r9, r9, r6
    13b0:	eb5a 0a07 	adcs.w	sl, sl, r7
    13b4:	eb5b 0b07 	adcs.w	fp, fp, r7
    13b8:	eb50 000c 	adcs.w	r0, r0, ip
    13bc:	f05f 0c00 	movs.w	ip, #0
    13c0:	eb51 010c 	adcs.w	r1, r1, ip
    13c4:	eb52 020c 	adcs.w	r2, r2, ip
    13c8:	4163      	adcs	r3, r4
    13ca:	f14c 0c00 	adc.w	ip, ip, #0
    13ce:	ebb8 0807 	subs.w	r8, r8, r7
    13d2:	f179 0900 	sbcs.w	r9, r9, #0
    13d6:	f17a 0a00 	sbcs.w	sl, sl, #0
    13da:	eb7b 0b04 	sbcs.w	fp, fp, r4
    13de:	41a8      	sbcs	r0, r5
    13e0:	41b1      	sbcs	r1, r6
    13e2:	41a2      	sbcs	r2, r4
    13e4:	41b3      	sbcs	r3, r6
    13e6:	f16c 0c00 	sbc.w	ip, ip, #0
    13ea:	ebbb 0b05 	subs.w	fp, fp, r5
    13ee:	41b0      	sbcs	r0, r6
    13f0:	41b9      	sbcs	r1, r7
    13f2:	41aa      	sbcs	r2, r5
    13f4:	41bb      	sbcs	r3, r7
    13f6:	f16c 0c00 	sbc.w	ip, ip, #0
    13fa:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    13fe:	ebb8 0804 	subs.w	r8, r8, r4
    1402:	eb79 0904 	sbcs.w	r9, r9, r4
    1406:	eb7a 0a04 	sbcs.w	sl, sl, r4
    140a:	f17b 0b00 	sbcs.w	fp, fp, #0
    140e:	f170 0000 	sbcs.w	r0, r0, #0
    1412:	f171 0100 	sbcs.w	r1, r1, #0
    1416:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    141a:	41a3      	sbcs	r3, r4
    141c:	f16c 0c00 	sbc.w	ip, ip, #0
    1420:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1424:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1428:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    142c:	f15b 0b00 	adcs.w	fp, fp, #0
    1430:	f150 0400 	adcs.w	r4, r0, #0
    1434:	f151 0500 	adcs.w	r5, r1, #0
    1438:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    143c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1440:	f14c 0c00 	adc.w	ip, ip, #0
    1444:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    1448:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    144c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    1450:	f15b 0300 	adcs.w	r3, fp, #0
    1454:	f154 0400 	adcs.w	r4, r4, #0
    1458:	f155 0500 	adcs.w	r5, r5, #0
    145c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    1460:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    1464:	4770      	bx	lr
    1466:	bf00      	nop

00001468 <ocrypto_mod_p256_mul>:
    1468:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    146c:	b087      	sub	sp, #28
    146e:	f7ff fd9f 	bl	fb0 <ocrypto_mul256_noframe>
    1472:	f8dd 8010 	ldr.w	r8, [sp, #16]
    1476:	f8dd 9014 	ldr.w	r9, [sp, #20]
    147a:	f8dd a018 	ldr.w	sl, [sp, #24]
    147e:	f7ff ff87 	bl	1390 <mul_reduce>
    1482:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1486:	f7ff ff83 	bl	1390 <mul_reduce>
    148a:	b003      	add	sp, #12
    148c:	f85d 8b04 	ldr.w	r8, [sp], #4
    1490:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001498 <ocrypto_mod_p256_sqr>:
    1498:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    149c:	b087      	sub	sp, #28
    149e:	f7ff fe43 	bl	1128 <ocrypto_sqr256_noframe>
    14a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    14a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
    14aa:	f8dd a018 	ldr.w	sl, [sp, #24]
    14ae:	f7ff ff6f 	bl	1390 <mul_reduce>
    14b2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    14b6:	f7ff ff6b 	bl	1390 <mul_reduce>
    14ba:	b003      	add	sp, #12
    14bc:	f85d 8b04 	ldr.w	r8, [sp], #4
    14c0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    14c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000014c8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    14c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ca:	4615      	mov	r5, r2
    14cc:	4a0a      	ldr	r2, [pc, #40]	; (14f8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    14ce:	461c      	mov	r4, r3
    14d0:	6856      	ldr	r6, [r2, #4]
    14d2:	b12e      	cbz	r6, 14e0 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    14d4:	b001      	add	sp, #4
    14d6:	462a      	mov	r2, r5
    14d8:	46b4      	mov	ip, r6
    14da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    14de:	4760      	bx	ip
    14e0:	2000      	movs	r0, #0
    14e2:	f88d 0000 	strb.w	r0, [sp]
    14e6:	4668      	mov	r0, sp
    14e8:	f00b fa87 	bl	c9fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    14ec:	f89d 0000 	ldrb.w	r0, [sp]
    14f0:	1a28      	subs	r0, r5, r0
    14f2:	7020      	strb	r0, [r4, #0]
    14f4:	2000      	movs	r0, #0
    14f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14f8:	20000008 	.word	0x20000008

000014fc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    14fc:	4801      	ldr	r0, [pc, #4]	; (1504 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    14fe:	7800      	ldrb	r0, [r0, #0]
    1500:	4770      	bx	lr
    1502:	0000      	.short	0x0000
    1504:	20000010 	.word	0x20000010

00001508 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1508:	4905      	ldr	r1, [pc, #20]	; (1520 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    150a:	780a      	ldrb	r2, [r1, #0]
    150c:	4290      	cmp	r0, r2
    150e:	d301      	bcc.n	1514 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    1510:	2000      	movs	r0, #0
    1512:	4770      	bx	lr
    1514:	6849      	ldr	r1, [r1, #4]
    1516:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    151a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    151e:	4770      	bx	lr
    1520:	20000010 	.word	0x20000010
    1524:	b570      	push	{r4, r5, r6, lr}
    1526:	4605      	mov	r5, r0
    1528:	2a20      	cmp	r2, #32
    152a:	d027      	beq.n	157c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    152c:	4819      	ldr	r0, [pc, #100]	; (1594 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    152e:	4c1a      	ldr	r4, [pc, #104]	; (1598 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    1530:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1534:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    153c:	2920      	cmp	r1, #32
    153e:	d022      	beq.n	1586 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    1540:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1544:	7840      	ldrb	r0, [r0, #1]
    1546:	784c      	ldrb	r4, [r1, #1]
    1548:	7048      	strb	r0, [r1, #1]
    154a:	4620      	mov	r0, r4
    154c:	4601      	mov	r1, r0
    154e:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    1552:	4291      	cmp	r1, r2
    1554:	7005      	strb	r5, [r0, #0]
    1556:	7840      	ldrb	r0, [r0, #1]
    1558:	d1f8      	bne.n	154c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    155a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    155e:	2a20      	cmp	r2, #32
    1560:	bf1a      	itte	ne
    1562:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1566:	7054      	strbne	r4, [r2, #1]
    1568:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    156c:	2220      	movs	r2, #32
    156e:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    1572:	f88c 2001 	strb.w	r2, [ip, #1]
    1576:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    157a:	bd70      	pop	{r4, r5, r6, pc}
    157c:	f240 218a 	movw	r1, #650	; 0x28a
    1580:	2070      	movs	r0, #112	; 0x70
    1582:	f003 f94d 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1586:	f893 4020 	ldrb.w	r4, [r3, #32]
    158a:	7840      	ldrb	r0, [r0, #1]
    158c:	f883 0020 	strb.w	r0, [r3, #32]
    1590:	e7db      	b.n	154a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    1592:	0000      	.short	0x0000
    1594:	20001000 	.word	0x20001000
    1598:	20001080 	.word	0x20001080
    159c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a0:	b085      	sub	sp, #20
    15a2:	4615      	mov	r5, r2
    15a4:	460c      	mov	r4, r1
    15a6:	f002 f8dd 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15aa:	4428      	add	r0, r5
    15ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15b0:	9002      	str	r0, [sp, #8]
    15b2:	6821      	ldr	r1, [r4, #0]
    15b4:	1a08      	subs	r0, r1, r0
    15b6:	0200      	lsls	r0, r0, #8
    15b8:	17c1      	asrs	r1, r0, #31
    15ba:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15be:	1200      	asrs	r0, r0, #8
    15c0:	2800      	cmp	r0, #0
    15c2:	f300 80d5 	bgt.w	1770 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    15c6:	48ac      	ldr	r0, [pc, #688]	; (1878 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    15c8:	9f08      	ldr	r7, [sp, #32]
    15ca:	4eac      	ldr	r6, [pc, #688]	; (187c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    15cc:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    15d0:	9003      	str	r0, [sp, #12]
    15d2:	f890 5020 	ldrb.w	r5, [r0, #32]
    15d6:	2020      	movs	r0, #32
    15d8:	46e9      	mov	r9, sp
    15da:	f10d 0804 	add.w	r8, sp, #4
    15de:	f88d 0000 	strb.w	r0, [sp]
    15e2:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    15e6:	2d20      	cmp	r5, #32
    15e8:	bf18      	it	ne
    15ea:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    15ee:	d025      	beq.n	163c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    15f0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    15f4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    15f8:	6822      	ldr	r2, [r4, #0]
    15fa:	68c1      	ldr	r1, [r0, #12]
    15fc:	1a51      	subs	r1, r2, r1
    15fe:	0209      	lsls	r1, r1, #8
    1600:	17ca      	asrs	r2, r1, #31
    1602:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1606:	3008      	adds	r0, #8
    1608:	1209      	asrs	r1, r1, #8
    160a:	d417      	bmi.n	163c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    160c:	8961      	ldrh	r1, [r4, #10]
    160e:	b171      	cbz	r1, 162e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1610:	8941      	ldrh	r1, [r0, #10]
    1612:	b961      	cbnz	r1, 162e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1614:	f000 fda6 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    1618:	f002 f8a4 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    161c:	6821      	ldr	r1, [r4, #0]
    161e:	1a08      	subs	r0, r1, r0
    1620:	0200      	lsls	r0, r0, #8
    1622:	17c1      	asrs	r1, r0, #31
    1624:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1628:	1200      	asrs	r0, r0, #8
    162a:	2833      	cmp	r0, #51	; 0x33
    162c:	db06      	blt.n	163c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    162e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1632:	f889 5000 	strb.w	r5, [r9]
    1636:	7845      	ldrb	r5, [r0, #1]
    1638:	2d20      	cmp	r5, #32
    163a:	d1d9      	bne.n	15f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    163c:	f899 0000 	ldrb.w	r0, [r9]
    1640:	f888 0000 	strb.w	r0, [r8]
    1644:	46a1      	mov	r9, r4
    1646:	2d20      	cmp	r5, #32
    1648:	bf1c      	itt	ne
    164a:	488d      	ldrne	r0, [pc, #564]	; (1880 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    164c:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    1650:	f000 810e 	beq.w	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1654:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1658:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    165c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1660:	f8da 1008 	ldr.w	r1, [sl, #8]
    1664:	4648      	mov	r0, r9
    1666:	1a89      	subs	r1, r1, r2
    1668:	0209      	lsls	r1, r1, #8
    166a:	17ca      	asrs	r2, r1, #31
    166c:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1670:	f10a 0708 	add.w	r7, sl, #8
    1674:	1209      	asrs	r1, r1, #8
    1676:	d415      	bmi.n	16a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    1678:	8979      	ldrh	r1, [r7, #10]
    167a:	2900      	cmp	r1, #0
    167c:	f000 80f8 	beq.w	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1680:	8941      	ldrh	r1, [r0, #10]
    1682:	2900      	cmp	r1, #0
    1684:	f040 80f4 	bne.w	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1688:	f000 fd6c 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    168c:	f002 f86a 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1690:	6839      	ldr	r1, [r7, #0]
    1692:	1a08      	subs	r0, r1, r0
    1694:	0200      	lsls	r0, r0, #8
    1696:	17c1      	asrs	r1, r0, #31
    1698:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    169c:	1200      	asrs	r0, r0, #8
    169e:	2833      	cmp	r0, #51	; 0x33
    16a0:	f280 80e6 	bge.w	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16a4:	f888 5000 	strb.w	r5, [r8]
    16a8:	f89a 1014 	ldrb.w	r1, [sl, #20]
    16ac:	f899 000c 	ldrb.w	r0, [r9, #12]
    16b0:	4281      	cmp	r1, r0
    16b2:	d906      	bls.n	16c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    16b4:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    16b8:	7845      	ldrb	r5, [r0, #1]
    16ba:	2d20      	cmp	r5, #32
    16bc:	d1ca      	bne.n	1654 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    16be:	f000 b8d7 	b.w	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16c2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    16c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16ca:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    16ce:	8a68      	ldrh	r0, [r5, #18]
    16d0:	68ef      	ldr	r7, [r5, #12]
    16d2:	2800      	cmp	r0, #0
    16d4:	d143      	bne.n	175e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    16d6:	8960      	ldrh	r0, [r4, #10]
    16d8:	b3e8      	cbz	r0, 1756 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    16da:	68a8      	ldr	r0, [r5, #8]
    16dc:	f00b f9ad 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    16e0:	8a69      	ldrh	r1, [r5, #18]
    16e2:	7c2a      	ldrb	r2, [r5, #16]
    16e4:	4b67      	ldr	r3, [pc, #412]	; (1884 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    16e6:	4411      	add	r1, r2
    16e8:	1c49      	adds	r1, r1, #1
    16ea:	1842      	adds	r2, r0, r1
    16ec:	4298      	cmp	r0, r3
    16ee:	d904      	bls.n	16fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    16f0:	f240 51d6 	movw	r1, #1494	; 0x5d6
    16f4:	2070      	movs	r0, #112	; 0x70
    16f6:	f003 f893 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fa:	4863      	ldr	r0, [pc, #396]	; (1888 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    16fc:	4281      	cmp	r1, r0
    16fe:	dd04      	ble.n	170a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    1700:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1704:	2070      	movs	r0, #112	; 0x70
    1706:	f003 f88b 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170a:	4860      	ldr	r0, [pc, #384]	; (188c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    170c:	4281      	cmp	r1, r0
    170e:	da04      	bge.n	171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    1710:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1714:	2070      	movs	r0, #112	; 0x70
    1716:	f003 f883 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    171a:	485d      	ldr	r0, [pc, #372]	; (1890 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    171c:	4290      	cmp	r0, r2
    171e:	bfdc      	itt	le
    1720:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1724:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1728:	dd05      	ble.n	1736 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    172a:	2a00      	cmp	r2, #0
    172c:	bfbc      	itt	lt
    172e:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1732:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1736:	4610      	mov	r0, r2
    1738:	f002 f814 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    173c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1740:	1a78      	subs	r0, r7, r1
    1742:	0200      	lsls	r0, r0, #8
    1744:	17c2      	asrs	r2, r0, #31
    1746:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    174a:	1200      	asrs	r0, r0, #8
    174c:	2833      	cmp	r0, #51	; 0x33
    174e:	bfb8      	it	lt
    1750:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1754:	e000      	b.n	1758 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1756:	e002      	b.n	175e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1758:	bfb8      	it	lt
    175a:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    175e:	9802      	ldr	r0, [sp, #8]
    1760:	1a38      	subs	r0, r7, r0
    1762:	0200      	lsls	r0, r0, #8
    1764:	17c1      	asrs	r1, r0, #31
    1766:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    176a:	1200      	asrs	r0, r0, #8
    176c:	2800      	cmp	r0, #0
    176e:	dd03      	ble.n	1778 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    1770:	b009      	add	sp, #36	; 0x24
    1772:	2000      	movs	r0, #0
    1774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1778:	e9d4 1000 	ldrd	r1, r0, [r4]
    177c:	1a40      	subs	r0, r0, r1
    177e:	4438      	add	r0, r7
    1780:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    1784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1788:	e9c4 1000 	strd	r1, r0, [r4]
    178c:	9803      	ldr	r0, [sp, #12]
    178e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1792:	466f      	mov	r7, sp
    1794:	f890 5020 	ldrb.w	r5, [r0, #32]
    1798:	2020      	movs	r0, #32
    179a:	f10d 0a04 	add.w	sl, sp, #4
    179e:	f88d 0000 	strb.w	r0, [sp]
    17a2:	2d20      	cmp	r5, #32
    17a4:	bf1c      	itt	ne
    17a6:	4836      	ldrne	r0, [pc, #216]	; (1880 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    17a8:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    17ac:	d025      	beq.n	17fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    17ae:	bf00      	nop
    17b0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17b4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    17b8:	6822      	ldr	r2, [r4, #0]
    17ba:	68c1      	ldr	r1, [r0, #12]
    17bc:	1a51      	subs	r1, r2, r1
    17be:	0209      	lsls	r1, r1, #8
    17c0:	17ca      	asrs	r2, r1, #31
    17c2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    17c6:	3008      	adds	r0, #8
    17c8:	1209      	asrs	r1, r1, #8
    17ca:	d416      	bmi.n	17fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    17cc:	8961      	ldrh	r1, [r4, #10]
    17ce:	b171      	cbz	r1, 17ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    17d0:	8941      	ldrh	r1, [r0, #10]
    17d2:	b961      	cbnz	r1, 17ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    17d4:	f000 fcc6 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    17d8:	f001 ffc4 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    17dc:	6821      	ldr	r1, [r4, #0]
    17de:	1a08      	subs	r0, r1, r0
    17e0:	0200      	lsls	r0, r0, #8
    17e2:	17c1      	asrs	r1, r0, #31
    17e4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    17e8:	1200      	asrs	r0, r0, #8
    17ea:	2833      	cmp	r0, #51	; 0x33
    17ec:	db05      	blt.n	17fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    17ee:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    17f2:	703d      	strb	r5, [r7, #0]
    17f4:	7845      	ldrb	r5, [r0, #1]
    17f6:	2d20      	cmp	r5, #32
    17f8:	d1da      	bne.n	17b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    17fa:	7838      	ldrb	r0, [r7, #0]
    17fc:	f88a 0000 	strb.w	r0, [sl]
    1800:	4627      	mov	r7, r4
    1802:	2d20      	cmp	r5, #32
    1804:	bf1c      	itt	ne
    1806:	481e      	ldrne	r0, [pc, #120]	; (1880 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1808:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    180c:	d030      	beq.n	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    180e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1812:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1816:	6879      	ldr	r1, [r7, #4]
    1818:	f8d9 2008 	ldr.w	r2, [r9, #8]
    181c:	4638      	mov	r0, r7
    181e:	1a51      	subs	r1, r2, r1
    1820:	0209      	lsls	r1, r1, #8
    1822:	17ca      	asrs	r2, r1, #31
    1824:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1828:	f109 0808 	add.w	r8, r9, #8
    182c:	1209      	asrs	r1, r1, #8
    182e:	d412      	bmi.n	1856 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    1830:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1834:	b1e1      	cbz	r1, 1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1836:	8941      	ldrh	r1, [r0, #10]
    1838:	b9d1      	cbnz	r1, 1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    183a:	f000 fc93 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    183e:	f001 ff91 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1842:	f8d8 1000 	ldr.w	r1, [r8]
    1846:	1a08      	subs	r0, r1, r0
    1848:	0200      	lsls	r0, r0, #8
    184a:	17c1      	asrs	r1, r0, #31
    184c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1850:	1200      	asrs	r0, r0, #8
    1852:	2833      	cmp	r0, #51	; 0x33
    1854:	da0c      	bge.n	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1856:	f88a 5000 	strb.w	r5, [sl]
    185a:	f899 0014 	ldrb.w	r0, [r9, #20]
    185e:	7b39      	ldrb	r1, [r7, #12]
    1860:	4288      	cmp	r0, r1
    1862:	f67f af2e 	bls.w	16c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1866:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    186a:	7845      	ldrb	r5, [r0, #1]
    186c:	2d20      	cmp	r5, #32
    186e:	d1ce      	bne.n	180e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    1870:	b009      	add	sp, #36	; 0x24
    1872:	2001      	movs	r0, #1
    1874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1878:	20001080 	.word	0x20001080
    187c:	20000d00 	.word	0x20000d00
    1880:	20001000 	.word	0x20001000
    1884:	1e847fff 	.word	0x1e847fff
    1888:	0f424000 	.word	0x0f424000
    188c:	f0bdc000 	.word	0xf0bdc000
    1890:	1e848000 	.word	0x1e848000
    1894:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1898:	4604      	mov	r4, r0
    189a:	483c      	ldr	r0, [pc, #240]	; (198c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    189c:	460e      	mov	r6, r1
    189e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    18a2:	4f3b      	ldr	r7, [pc, #236]	; (1990 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    18a4:	f890 5020 	ldrb.w	r5, [r0, #32]
    18a8:	2020      	movs	r0, #32
    18aa:	4698      	mov	r8, r3
    18ac:	4692      	mov	sl, r2
    18ae:	7010      	strb	r0, [r2, #0]
    18b0:	f507 7940 	add.w	r9, r7, #768	; 0x300
    18b4:	2d20      	cmp	r5, #32
    18b6:	bf18      	it	ne
    18b8:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    18bc:	d028      	beq.n	1910 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    18be:	bf00      	nop
    18c0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    18c4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    18c8:	f100 0108 	add.w	r1, r0, #8
    18cc:	68c0      	ldr	r0, [r0, #12]
    18ce:	6822      	ldr	r2, [r4, #0]
    18d0:	1a10      	subs	r0, r2, r0
    18d2:	0200      	lsls	r0, r0, #8
    18d4:	17c2      	asrs	r2, r0, #31
    18d6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    18da:	1200      	asrs	r0, r0, #8
    18dc:	d418      	bmi.n	1910 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    18de:	8960      	ldrh	r0, [r4, #10]
    18e0:	b178      	cbz	r0, 1902 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    18e2:	8948      	ldrh	r0, [r1, #10]
    18e4:	b968      	cbnz	r0, 1902 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    18e6:	4608      	mov	r0, r1
    18e8:	f000 fc3c 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    18ec:	f001 ff3a 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    18f0:	6821      	ldr	r1, [r4, #0]
    18f2:	1a08      	subs	r0, r1, r0
    18f4:	0200      	lsls	r0, r0, #8
    18f6:	17c1      	asrs	r1, r0, #31
    18f8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    18fc:	1200      	asrs	r0, r0, #8
    18fe:	2833      	cmp	r0, #51	; 0x33
    1900:	db06      	blt.n	1910 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    1902:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1906:	f88a 5000 	strb.w	r5, [sl]
    190a:	7845      	ldrb	r5, [r0, #1]
    190c:	2d20      	cmp	r5, #32
    190e:	d1d7      	bne.n	18c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    1910:	f89a 0000 	ldrb.w	r0, [sl]
    1914:	f888 0000 	strb.w	r0, [r8]
    1918:	2d20      	cmp	r5, #32
    191a:	bf18      	it	ne
    191c:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    1920:	d030      	beq.n	1984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1922:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1926:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    192a:	6861      	ldr	r1, [r4, #4]
    192c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1930:	4620      	mov	r0, r4
    1932:	1a51      	subs	r1, r2, r1
    1934:	0209      	lsls	r1, r1, #8
    1936:	17ca      	asrs	r2, r1, #31
    1938:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    193c:	f109 0608 	add.w	r6, r9, #8
    1940:	1209      	asrs	r1, r1, #8
    1942:	d410      	bmi.n	1966 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1944:	8971      	ldrh	r1, [r6, #10]
    1946:	b1e9      	cbz	r1, 1984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1948:	8941      	ldrh	r1, [r0, #10]
    194a:	b9d9      	cbnz	r1, 1984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    194c:	f000 fc0a 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    1950:	f001 ff08 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1954:	6831      	ldr	r1, [r6, #0]
    1956:	1a08      	subs	r0, r1, r0
    1958:	0200      	lsls	r0, r0, #8
    195a:	17c1      	asrs	r1, r0, #31
    195c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1960:	1200      	asrs	r0, r0, #8
    1962:	2833      	cmp	r0, #51	; 0x33
    1964:	da0e      	bge.n	1984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1966:	f888 5000 	strb.w	r5, [r8]
    196a:	f899 0014 	ldrb.w	r0, [r9, #20]
    196e:	7b21      	ldrb	r1, [r4, #12]
    1970:	4288      	cmp	r0, r1
    1972:	d802      	bhi.n	197a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    1974:	2000      	movs	r0, #0
    1976:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    197a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    197e:	7845      	ldrb	r5, [r0, #1]
    1980:	2d20      	cmp	r5, #32
    1982:	d1ce      	bne.n	1922 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    1984:	2001      	movs	r0, #1
    1986:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    198a:	0000      	.short	0x0000
    198c:	20001080 	.word	0x20001080
    1990:	20000d00 	.word	0x20000d00
    1994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1998:	b096      	sub	sp, #88	; 0x58
    199a:	4615      	mov	r5, r2
    199c:	468a      	mov	sl, r1
    199e:	2600      	movs	r6, #0
    19a0:	f002 f968 	bl	3c74 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    19a4:	4604      	mov	r4, r0
    19a6:	f1ba 0f01 	cmp.w	sl, #1
    19aa:	bf18      	it	ne
    19ac:	f1ba 0f02 	cmpne.w	sl, #2
    19b0:	d005      	beq.n	19be <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    19b2:	f640 1163 	movw	r1, #2403	; 0x963
    19b6:	f04f 0070 	mov.w	r0, #112	; 0x70
    19ba:	f002 ff31 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19be:	49ff      	ldr	r1, [pc, #1020]	; (1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>)
    19c0:	2001      	movs	r0, #1
    19c2:	6008      	str	r0, [r1, #0]
    19c4:	49fe      	ldr	r1, [pc, #1016]	; (1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>)
    19c6:	68c9      	ldr	r1, [r1, #12]
    19c8:	6008      	str	r0, [r1, #0]
    19ca:	f04f 0b00 	mov.w	fp, #0
    19ce:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
    19d2:	1e80      	subs	r0, r0, #2
    19d4:	900c      	str	r0, [sp, #48]	; 0x30
    19d6:	49fb      	ldr	r1, [pc, #1004]	; (1dc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>)
    19d8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    19dc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    19e0:	3308      	adds	r3, #8
    19e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    19e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    19e8:	af0d      	add	r7, sp, #52	; 0x34
    19ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    19ee:	a80d      	add	r0, sp, #52	; 0x34
    19f0:	f000 fbb8 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    19f4:	900b      	str	r0, [sp, #44]	; 0x2c
    19f6:	48f3      	ldr	r0, [pc, #972]	; (1dc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x78>)
    19f8:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    19fc:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1a00:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    1a04:	f1b8 0f00 	cmp.w	r8, #0
    1a08:	bf14      	ite	ne
    1a0a:	f04f 0901 	movne.w	r9, #1
    1a0e:	f04f 0900 	moveq.w	r9, #0
    1a12:	980d      	ldr	r0, [sp, #52]	; 0x34
    1a14:	9014      	str	r0, [sp, #80]	; 0x50
    1a16:	f1b9 0f00 	cmp.w	r9, #0
    1a1a:	d009      	beq.n	1a30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1a1c:	48ea      	ldr	r0, [pc, #936]	; (1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>)
    1a1e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1a22:	b928      	cbnz	r0, 1a30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1a24:	f002 fe84 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1a28:	2800      	cmp	r0, #0
    1a2a:	bf08      	it	eq
    1a2c:	2701      	moveq	r7, #1
    1a2e:	d000      	beq.n	1a32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x52a>
    1a30:	2700      	movs	r7, #0
    1a32:	48e6      	ldr	r0, [pc, #920]	; (1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>)
    1a34:	2100      	movs	r1, #0
    1a36:	460d      	mov	r5, r1
    1a38:	7800      	ldrb	r0, [r0, #0]
    1a3a:	2801      	cmp	r0, #1
    1a3c:	bf18      	it	ne
    1a3e:	2803      	cmpne	r0, #3
    1a40:	d13b      	bne.n	1aba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b2>
    1a42:	48e2      	ldr	r0, [pc, #904]	; (1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>)
    1a44:	8846      	ldrh	r6, [r0, #2]
    1a46:	4546      	cmp	r6, r8
    1a48:	d937      	bls.n	1aba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b2>
    1a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a4c:	43f3      	mvns	r3, r6
    1a4e:	f8df e380 	ldr.w	lr, [pc, #896]	; 1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1a52:	18c8      	adds	r0, r1, r3
    1a54:	f10d 0c0c 	add.w	ip, sp, #12
    1a58:	aa15      	add	r2, sp, #84	; 0x54
    1a5a:	4571      	cmp	r1, lr
    1a5c:	d904      	bls.n	1a68 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x560>
    1a5e:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1a62:	2070      	movs	r0, #112	; 0x70
    1a64:	f002 fedc 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a68:	49da      	ldr	r1, [pc, #872]	; (1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1a6a:	428b      	cmp	r3, r1
    1a6c:	dd04      	ble.n	1a78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x570>
    1a6e:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1a72:	2070      	movs	r0, #112	; 0x70
    1a74:	f002 fed4 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a78:	49d7      	ldr	r1, [pc, #860]	; (1dd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1a7a:	428b      	cmp	r3, r1
    1a7c:	da04      	bge.n	1a88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x580>
    1a7e:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1a82:	2070      	movs	r0, #112	; 0x70
    1a84:	f002 fecc 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a88:	49d4      	ldr	r1, [pc, #848]	; (1ddc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1a8a:	4281      	cmp	r1, r0
    1a8c:	bfdc      	itt	le
    1a8e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1a92:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1a96:	dd05      	ble.n	1aa4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x59c>
    1a98:	2800      	cmp	r0, #0
    1a9a:	bfbc      	itt	lt
    1a9c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1aa0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1aa4:	4661      	mov	r1, ip
    1aa6:	f001 fe79 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1aaa:	9803      	ldr	r0, [sp, #12]
    1aac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ab0:	9003      	str	r0, [sp, #12]
    1ab2:	990d      	ldr	r1, [sp, #52]	; 0x34
    1ab4:	1a08      	subs	r0, r1, r0
    1ab6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1aba:	2f00      	cmp	r7, #0
    1abc:	bf18      	it	ne
    1abe:	2532      	movne	r5, #50	; 0x32
    1ac0:	d104      	bne.n	1acc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5c4>
    1ac2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1ac6:	2800      	cmp	r0, #0
    1ac8:	bf18      	it	ne
    1aca:	2502      	movne	r5, #2
    1acc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1ad0:	d008      	beq.n	1ae4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5dc>
    1ad2:	980d      	ldr	r0, [sp, #52]	; 0x34
    1ad4:	1b00      	subs	r0, r0, r4
    1ad6:	0200      	lsls	r0, r0, #8
    1ad8:	17c2      	asrs	r2, r0, #31
    1ada:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1ade:	1200      	asrs	r0, r0, #8
    1ae0:	2801      	cmp	r0, #1
    1ae2:	da02      	bge.n	1aea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e2>
    1ae4:	2203      	movs	r2, #3
    1ae6:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ae8:	e00b      	b.n	1b02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1aea:	b147      	cbz	r7, 1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5f6>
    1aec:	48b6      	ldr	r0, [pc, #728]	; (1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>)
    1aee:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1af2:	b120      	cbz	r0, 1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5f6>
    1af4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1af8:	1c05      	adds	r5, r0, #0
    1afa:	bf18      	it	ne
    1afc:	2502      	movne	r5, #2
    1afe:	4620      	mov	r0, r4
    1b00:	2200      	movs	r2, #0
    1b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b04:	442a      	add	r2, r5
    1b06:	1a5b      	subs	r3, r3, r1
    1b08:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
    1b0c:	f1ac 0301 	sub.w	r3, ip, #1
    1b10:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
    1b14:	1a2b      	subs	r3, r5, r0
    1b16:	021b      	lsls	r3, r3, #8
    1b18:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    1b1c:	eb03 631e 	add.w	r3, r3, lr, lsr #24
    1b20:	121b      	asrs	r3, r3, #8
    1b22:	4293      	cmp	r3, r2
    1b24:	db04      	blt.n	1b30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    1b26:	2900      	cmp	r1, #0
    1b28:	bf18      	it	ne
    1b2a:	f8cd c034 	strne.w	ip, [sp, #52]	; 0x34
    1b2e:	e027      	b.n	1b80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x678>
    1b30:	b189      	cbz	r1, 1b56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x64e>
    1b32:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    1b36:	b91b      	cbnz	r3, 1b40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x638>
    1b38:	4ba4      	ldr	r3, [pc, #656]	; (1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>)
    1b3a:	781b      	ldrb	r3, [r3, #0]
    1b3c:	2b03      	cmp	r3, #3
    1b3e:	d00a      	beq.n	1b56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x64e>
    1b40:	b927      	cbnz	r7, 1b4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x644>
    1b42:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
    1b46:	2900      	cmp	r1, #0
    1b48:	bf18      	it	ne
    1b4a:	1e92      	subne	r2, r2, #2
    1b4c:	2100      	movs	r1, #0
    1b4e:	f88d b044 	strb.w	fp, [sp, #68]	; 0x44
    1b52:	460e      	mov	r6, r1
    1b54:	e007      	b.n	1b66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x65e>
    1b56:	b937      	cbnz	r7, 1b66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x65e>
    1b58:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	bf1c      	itt	ne
    1b60:	f88d b044 	strbne.w	fp, [sp, #68]	; 0x44
    1b64:	1e92      	subne	r2, r2, #2
    1b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b68:	1a59      	subs	r1, r3, r1
    1b6a:	1e49      	subs	r1, r1, #1
    1b6c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1b70:	1a28      	subs	r0, r5, r0
    1b72:	0200      	lsls	r0, r0, #8
    1b74:	17c1      	asrs	r1, r0, #31
    1b76:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1b7a:	1200      	asrs	r0, r0, #8
    1b7c:	4290      	cmp	r0, r2
    1b7e:	db7c      	blt.n	1c7a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x772>
    1b80:	9709      	str	r7, [sp, #36]	; 0x24
    1b82:	465f      	mov	r7, fp
    1b84:	f001 ff6c 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1b88:	1a28      	subs	r0, r5, r0
    1b8a:	0200      	lsls	r0, r0, #8
    1b8c:	17c1      	asrs	r1, r0, #31
    1b8e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1b92:	1200      	asrs	r0, r0, #8
    1b94:	283d      	cmp	r0, #61	; 0x3d
    1b96:	da20      	bge.n	1bda <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d2>
    1b98:	f1ba 0f01 	cmp.w	sl, #1
    1b9c:	d002      	beq.n	1ba4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x69c>
    1b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    1ba0:	b140      	cbz	r0, 1bb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ac>
    1ba2:	e012      	b.n	1bca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6c2>
    1ba4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1ba8:	d11c      	bne.n	1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1baa:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
    1bae:	2070      	movs	r0, #112	; 0x70
    1bb0:	f002 fe36 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bb4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1bb8:	d007      	beq.n	1bca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6c2>
    1bba:	1b60      	subs	r0, r4, r5
    1bbc:	0200      	lsls	r0, r0, #8
    1bbe:	17c1      	asrs	r1, r0, #31
    1bc0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bc4:	1200      	asrs	r0, r0, #8
    1bc6:	2804      	cmp	r0, #4
    1bc8:	dd04      	ble.n	1bd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6cc>
    1bca:	462c      	mov	r4, r5
    1bcc:	4620      	mov	r0, r4
    1bce:	f001 ff4d 	bl	3a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1bd2:	e007      	b.n	1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1bd4:	2800      	cmp	r0, #0
    1bd6:	dc6d      	bgt.n	1cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1bd8:	e004      	b.n	1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1bda:	462c      	mov	r4, r5
    1bdc:	4620      	mov	r0, r4
    1bde:	f001 ff45 	bl	3a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1be2:	464f      	mov	r7, r9
    1be4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1be8:	d05f      	beq.n	1caa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7a2>
    1bea:	980d      	ldr	r0, [sp, #52]	; 0x34
    1bec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bee:	1b00      	subs	r0, r0, r4
    1bf0:	1b12      	subs	r2, r2, r4
    1bf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bf6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1bfa:	2801      	cmp	r0, #1
    1bfc:	d35a      	bcc.n	1cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1bfe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1c02:	bf98      	it	ls
    1c04:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1c08:	d854      	bhi.n	1cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1c0a:	4620      	mov	r0, r4
    1c0c:	f00a ff15 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c12:	4b70      	ldr	r3, [pc, #448]	; (1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1c14:	1a0d      	subs	r5, r1, r0
    1c16:	1aeb      	subs	r3, r5, r3
    1c18:	465a      	mov	r2, fp
    1c1a:	f17b 0300 	sbcs.w	r3, fp, #0
    1c1e:	d319      	bcc.n	1c54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1c20:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1c24:	1a43      	subs	r3, r0, r1
    1c26:	ebb3 0c0c 	subs.w	ip, r3, ip
    1c2a:	f172 0c00 	sbcs.w	ip, r2, #0
    1c2e:	d311      	bcc.n	1c54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1c30:	f8df c19c 	ldr.w	ip, [pc, #412]	; 1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1c34:	45ac      	cmp	ip, r5
    1c36:	bf3e      	ittt	cc
    1c38:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1c3c:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1c40:	1845      	addcc	r5, r0, r1
    1c42:	d307      	bcc.n	1c54 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1c44:	459c      	cmp	ip, r3
    1c46:	d239      	bcs.n	1cbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    1c48:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1c4c:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1c50:	4408      	add	r0, r1
    1c52:	4245      	negs	r5, r0
    1c54:	f8df b170 	ldr.w	fp, [pc, #368]	; 1dc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c>
    1c58:	f89b 001e 	ldrb.w	r0, [fp, #30]
    1c5c:	b398      	cbz	r0, 1cc6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7be>
    1c5e:	4650      	mov	r0, sl
    1c60:	f04f 0a00 	mov.w	sl, #0
    1c64:	2801      	cmp	r0, #1
    1c66:	d005      	beq.n	1c74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x76c>
    1c68:	2002      	movs	r0, #2
    1c6a:	f002 f95b 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c6e:	2001      	movs	r0, #1
    1c70:	f002 f958 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c74:	45b0      	cmp	r8, r6
    1c76:	d232      	bcs.n	1cde <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d6>
    1c78:	e000      	b.n	1c7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x774>
    1c7a:	e01b      	b.n	1cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1c7c:	eba5 0106 	sub.w	r1, r5, r6
    1c80:	f04f 0301 	mov.w	r3, #1
    1c84:	f04f 0203 	mov.w	r2, #3
    1c88:	f04f 0002 	mov.w	r0, #2
    1c8c:	f002 f876 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c90:	2800      	cmp	r0, #0
    1c92:	bf08      	it	eq
    1c94:	f04f 0a01 	moveq.w	sl, #1
    1c98:	f1b8 0f00 	cmp.w	r8, #0
    1c9c:	d039      	beq.n	1d12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80a>
    1c9e:	2301      	movs	r3, #1
    1ca0:	eba5 0108 	sub.w	r1, r5, r8
    1ca4:	2203      	movs	r2, #3
    1ca6:	4618      	mov	r0, r3
    1ca8:	e027      	b.n	1cfa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f2>
    1caa:	f640 11fd 	movw	r1, #2557	; 0x9fd
    1cae:	2070      	movs	r0, #112	; 0x70
    1cb0:	f002 fdb6 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cb4:	b019      	add	sp, #100	; 0x64
    1cb6:	2000      	movs	r0, #0
    1cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cbc:	f640 21dd 	movw	r1, #2781	; 0xadd
    1cc0:	2070      	movs	r0, #112	; 0x70
    1cc2:	f002 fdad 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cc6:	45b0      	cmp	r8, r6
    1cc8:	bf34      	ite	cc
    1cca:	4630      	movcc	r0, r6
    1ccc:	4640      	movcs	r0, r8
    1cce:	301e      	adds	r0, #30
    1cd0:	42a8      	cmp	r0, r5
    1cd2:	dbc4      	blt.n	1c5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x756>
    1cd4:	f44f 6121 	mov.w	r1, #2576	; 0xa10
    1cd8:	2070      	movs	r0, #112	; 0x70
    1cda:	f002 fda1 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cde:	d910      	bls.n	1d02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7fa>
    1ce0:	2301      	movs	r3, #1
    1ce2:	eba5 0108 	sub.w	r1, r5, r8
    1ce6:	2203      	movs	r2, #3
    1ce8:	4618      	mov	r0, r3
    1cea:	f002 f847 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cee:	b3e0      	cbz	r0, 1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1cf0:	b17e      	cbz	r6, 1d12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80a>
    1cf2:	1ba9      	subs	r1, r5, r6
    1cf4:	2301      	movs	r3, #1
    1cf6:	2203      	movs	r2, #3
    1cf8:	2002      	movs	r0, #2
    1cfa:	f002 f83f 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cfe:	b3a0      	cbz	r0, 1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d00:	e007      	b.n	1d12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80a>
    1d02:	ea56 0008 	orrs.w	r0, r6, r8
    1d06:	d004      	beq.n	1d12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80a>
    1d08:	f640 1147 	movw	r1, #2375	; 0x947
    1d0c:	2070      	movs	r0, #112	; 0x70
    1d0e:	f002 fd87 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d12:	2301      	movs	r3, #1
    1d14:	2203      	movs	r2, #3
    1d16:	4629      	mov	r1, r5
    1d18:	2000      	movs	r0, #0
    1d1a:	f002 f82f 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d1e:	b320      	cbz	r0, 1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d20:	2601      	movs	r6, #1
    1d22:	f1ba 0f00 	cmp.w	sl, #0
    1d26:	d004      	beq.n	1d32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1d28:	9814      	ldr	r0, [sp, #80]	; 0x50
    1d2a:	900d      	str	r0, [sp, #52]	; 0x34
    1d2c:	2000      	movs	r0, #0
    1d2e:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    1d32:	f1b9 0f00 	cmp.w	r9, #0
    1d36:	bf04      	itt	eq
    1d38:	f89b 002d 	ldrbeq.w	r0, [fp, #45]	; 0x2d
    1d3c:	2800      	cmpeq	r0, #0
    1d3e:	d000      	beq.n	1d42 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83a>
    1d40:	b32f      	cbz	r7, 1d8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42>
    1d42:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    1d46:	b120      	cbz	r0, 1d52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1d48:	f002 fbc8 	bl	44dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1d4c:	2000      	movs	r0, #0
    1d4e:	f88b 002c 	strb.w	r0, [fp, #44]	; 0x2c
    1d52:	b1ff      	cbz	r7, 1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d54:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1d58:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1d5c:	2301      	movs	r3, #1
    1d5e:	2203      	movs	r2, #3
    1d60:	2005      	movs	r0, #5
    1d62:	f002 f80b 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d66:	b340      	cbz	r0, 1dba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6e>
    1d68:	e000      	b.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d6a:	e006      	b.n	1d7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e>
    1d6c:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    1d70:	2800      	cmp	r0, #0
    1d72:	bf08      	it	eq
    1d74:	f88b 602d 	strbeq.w	r6, [fp, #45]	; 0x2d
    1d78:	e015      	b.n	1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d7a:	2002      	movs	r0, #2
    1d7c:	f002 f8d2 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d80:	2001      	movs	r0, #1
    1d82:	f002 f8cf 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d86:	b019      	add	sp, #100	; 0x64
    1d88:	2000      	movs	r0, #0
    1d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d8e:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    1d92:	b328      	cbz	r0, 1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1d94:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    1d98:	b128      	cbz	r0, 1da6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a>
    1d9a:	2005      	movs	r0, #5
    1d9c:	f002 f8c2 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1da0:	2000      	movs	r0, #0
    1da2:	f88b 002d 	strb.w	r0, [fp, #45]	; 0x2d
    1da6:	eba5 0008 	sub.w	r0, r5, r8
    1daa:	f1a0 0119 	sub.w	r1, r0, #25
    1dae:	2900      	cmp	r1, #0
    1db0:	dc23      	bgt.n	1dfa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xae>
    1db2:	f640 2142 	movw	r1, #2626	; 0xa42
    1db6:	2070      	movs	r0, #112	; 0x70
    1db8:	e013      	b.n	1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dba:	e019      	b.n	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1dbc:	40000508 	.word	0x40000508
    1dc0:	20000018 	.word	0x20000018
    1dc4:	20000d00 	.word	0x20000d00
    1dc8:	20001080 	.word	0x20001080
    1dcc:	20000020 	.word	0x20000020
    1dd0:	1e847fff 	.word	0x1e847fff
    1dd4:	0f424000 	.word	0x0f424000
    1dd8:	f0bdc000 	.word	0xf0bdc000
    1ddc:	1e848000 	.word	0x1e848000
    1de0:	e001      	b.n	1de6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9a>
    1de2:	f002 fd1d 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1de6:	f002 fb95 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1dea:	f88b 602c 	strb.w	r6, [fp, #44]	; 0x2c
    1dee:	e7b0      	b.n	1d52 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6>
    1df0:	f240 3112 	movw	r1, #786	; 0x312
    1df4:	2070      	movs	r0, #112	; 0x70
    1df6:	f002 fd13 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dfa:	2203      	movs	r2, #3
    1dfc:	2301      	movs	r3, #1
    1dfe:	4610      	mov	r0, r2
    1e00:	f001 ffbc 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1e04:	b300      	cbz	r0, 1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1e06:	4913      	ldr	r1, [pc, #76]	; (1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>)
    1e08:	2000      	movs	r0, #0
    1e0a:	68c9      	ldr	r1, [r1, #12]
    1e0c:	6008      	str	r0, [r1, #0]
    1e0e:	4912      	ldr	r1, [pc, #72]	; (1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>)
    1e10:	6008      	str	r0, [r1, #0]
    1e12:	ac0a      	add	r4, sp, #40	; 0x28
    1e14:	4811      	ldr	r0, [pc, #68]	; (1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1e16:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1e1a:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1e1e:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1e22:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1e26:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1e2a:	ac0e      	add	r4, sp, #56	; 0x38
    1e2c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1e30:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1e34:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1e38:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1e3c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1e40:	b019      	add	sp, #100	; 0x64
    1e42:	2001      	movs	r0, #1
    1e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e48:	f640 214a 	movw	r1, #2634	; 0xa4a
    1e4c:	2070      	movs	r0, #112	; 0x70
    1e4e:	f002 fce7 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e52:	0000      	.short	0x0000
    1e54:	20000018 	.word	0x20000018
    1e58:	40000508 	.word	0x40000508
    1e5c:	20000d00 	.word	0x20000d00
    1e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e64:	4606      	mov	r6, r0
    1e66:	b083      	sub	sp, #12
    1e68:	7808      	ldrb	r0, [r1, #0]
    1e6a:	7390      	strb	r0, [r2, #14]
    1e6c:	7acf      	ldrb	r7, [r1, #11]
    1e6e:	7357      	strb	r7, [r2, #13]
    1e70:	7a88      	ldrb	r0, [r1, #10]
    1e72:	7310      	strb	r0, [r2, #12]
    1e74:	8908      	ldrh	r0, [r1, #8]
    1e76:	4614      	mov	r4, r2
    1e78:	8150      	strh	r0, [r2, #10]
    1e7a:	460d      	mov	r5, r1
    1e7c:	780a      	ldrb	r2, [r1, #0]
    1e7e:	495f      	ldr	r1, [pc, #380]	; (1ffc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b0>)
    1e80:	4699      	mov	r9, r3
    1e82:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1e86:	424b      	negs	r3, r1
    1e88:	f1ac 0801 	sub.w	r8, ip, #1
    1e8c:	b15a      	cbz	r2, 1ea6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e8e:	43c0      	mvns	r0, r0
    1e90:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1e94:	f104 0208 	add.w	r2, r4, #8
    1e98:	4288      	cmp	r0, r1
    1e9a:	dd3d      	ble.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1e9c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1ea0:	2070      	movs	r0, #112	; 0x70
    1ea2:	f002 fcbd 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ea6:	68ee      	ldr	r6, [r5, #12]
    1ea8:	686d      	ldr	r5, [r5, #4]
    1eaa:	ea6f 0900 	mvn.w	r9, r0
    1eae:	f104 0208 	add.w	r2, r4, #8
    1eb2:	eb06 0009 	add.w	r0, r6, r9
    1eb6:	4546      	cmp	r6, r8
    1eb8:	d904      	bls.n	1ec4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x178>
    1eba:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1ebe:	2070      	movs	r0, #112	; 0x70
    1ec0:	f002 fcae 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ec4:	4589      	cmp	r9, r1
    1ec6:	dce9      	bgt.n	1e9c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x150>
    1ec8:	4599      	cmp	r9, r3
    1eca:	db28      	blt.n	1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1ecc:	4584      	cmp	ip, r0
    1ece:	bfdc      	itt	le
    1ed0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1ed4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1ed8:	dd05      	ble.n	1ee6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19a>
    1eda:	2800      	cmp	r0, #0
    1edc:	bfbc      	itt	lt
    1ede:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1ee2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1ee6:	4621      	mov	r1, r4
    1ee8:	f001 fc58 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1eec:	6820      	ldr	r0, [r4, #0]
    1eee:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ef2:	1970      	adds	r0, r6, r5
    1ef4:	1c40      	adds	r0, r0, #1
    1ef6:	6021      	str	r1, [r4, #0]
    1ef8:	2f00      	cmp	r7, #0
    1efa:	bf08      	it	eq
    1efc:	307a      	addeq	r0, #122	; 0x7a
    1efe:	d003      	beq.n	1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>
    1f00:	2f01      	cmp	r7, #1
    1f02:	bf08      	it	eq
    1f04:	3048      	addeq	r0, #72	; 0x48
    1f06:	d12d      	bne.n	1f64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>
    1f08:	f001 fc2c 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1f0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f10:	6060      	str	r0, [r4, #4]
    1f12:	b003      	add	sp, #12
    1f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f18:	4601      	mov	r1, r0
    1f1a:	4298      	cmp	r0, r3
    1f1c:	da04      	bge.n	1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>
    1f1e:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1f22:	2070      	movs	r0, #112	; 0x70
    1f24:	f002 fc7c 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f28:	4584      	cmp	ip, r0
    1f2a:	bfdc      	itt	le
    1f2c:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1f30:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1f34:	dd05      	ble.n	1f42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f6>
    1f36:	2800      	cmp	r0, #0
    1f38:	bfbc      	itt	lt
    1f3a:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1f3e:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1f42:	4621      	mov	r1, r4
    1f44:	f001 fc2a 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f48:	6820      	ldr	r0, [r4, #0]
    1f4a:	2f00      	cmp	r7, #0
    1f4c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1f50:	f108 0001 	add.w	r0, r8, #1
    1f54:	6021      	str	r1, [r4, #0]
    1f56:	bf08      	it	eq
    1f58:	307a      	addeq	r0, #122	; 0x7a
    1f5a:	d008      	beq.n	1f6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x222>
    1f5c:	2f01      	cmp	r7, #1
    1f5e:	bf08      	it	eq
    1f60:	3048      	addeq	r0, #72	; 0x48
    1f62:	d004      	beq.n	1f6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x222>
    1f64:	f240 617e 	movw	r1, #1662	; 0x67e
    1f68:	2070      	movs	r0, #112	; 0x70
    1f6a:	f002 fc59 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f6e:	f001 fbf9 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1f72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1f76:	6061      	str	r1, [r4, #4]
    1f78:	8960      	ldrh	r0, [r4, #10]
    1f7a:	aa01      	add	r2, sp, #4
    1f7c:	4669      	mov	r1, sp
    1f7e:	f001 fc0d 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f82:	481f      	ldr	r0, [pc, #124]	; (2000 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b4>)
    1f84:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1f88:	2920      	cmp	r1, #32
    1f8a:	d023      	beq.n	1fd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>
    1f8c:	6900      	ldr	r0, [r0, #16]
    1f8e:	1d40      	adds	r0, r0, #5
    1f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f94:	e9d4 2100 	ldrd	r2, r1, [r4]
    1f98:	1a89      	subs	r1, r1, r2
    1f9a:	6020      	str	r0, [r4, #0]
    1f9c:	4408      	add	r0, r1
    1f9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fa2:	6060      	str	r0, [r4, #4]
    1fa4:	464b      	mov	r3, r9
    1fa6:	4632      	mov	r2, r6
    1fa8:	4621      	mov	r1, r4
    1faa:	68e8      	ldr	r0, [r5, #12]
    1fac:	f7ff faf6 	bl	159c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1fb0:	2800      	cmp	r0, #0
    1fb2:	bf1c      	itt	ne
    1fb4:	b003      	addne	sp, #12
    1fb6:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fba:	e9d4 1000 	ldrd	r1, r0, [r4]
    1fbe:	1a40      	subs	r0, r0, r1
    1fc0:	4430      	add	r0, r6
    1fc2:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1fc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fca:	e9c4 1000 	strd	r1, r0, [r4]
    1fce:	b003      	add	sp, #12
    1fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fd4:	8960      	ldrh	r0, [r4, #10]
    1fd6:	f106 0709 	add.w	r7, r6, #9
    1fda:	b120      	cbz	r0, 1fe6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29a>
    1fdc:	f002 fba8 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1fe0:	2800      	cmp	r0, #0
    1fe2:	bf08      	it	eq
    1fe4:	3732      	addeq	r7, #50	; 0x32
    1fe6:	4807      	ldr	r0, [pc, #28]	; (2004 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2b8>)
    1fe8:	7841      	ldrb	r1, [r0, #1]
    1fea:	9800      	ldr	r0, [sp, #0]
    1fec:	4281      	cmp	r1, r0
    1fee:	bf84      	itt	hi
    1ff0:	1a08      	subhi	r0, r1, r0
    1ff2:	4407      	addhi	r7, r0
    1ff4:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1ff8:	e7cc      	b.n	1f94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x248>
    1ffa:	0000      	.short	0x0000
    1ffc:	0f424000 	.word	0x0f424000
    2000:	20001080 	.word	0x20001080
    2004:	20000020 	.word	0x20000020
    2008:	b570      	push	{r4, r5, r6, lr}
    200a:	4d1e      	ldr	r5, [pc, #120]	; (2084 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x338>)
    200c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2010:	2820      	cmp	r0, #32
    2012:	bf18      	it	ne
    2014:	bd70      	popne	{r4, r5, r6, pc}
    2016:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    201a:	eb05 0082 	add.w	r0, r5, r2, lsl #2
    201e:	f890 4020 	ldrb.w	r4, [r0, #32]
    2022:	2c20      	cmp	r4, #32
    2024:	d029      	beq.n	207a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32e>
    2026:	4b18      	ldr	r3, [pc, #96]	; (2088 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33c>)
    2028:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    202c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    2030:	7849      	ldrb	r1, [r1, #1]
    2032:	f880 1020 	strb.w	r1, [r0, #32]
    2036:	21ff      	movs	r1, #255	; 0xff
    2038:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    203c:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    2040:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    2044:	4621      	mov	r1, r4
    2046:	2002      	movs	r0, #2
    2048:	f000 f8c6 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    204c:	2000      	movs	r0, #0
    204e:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
    2052:	77a8      	strb	r0, [r5, #30]
    2054:	490d      	ldr	r1, [pc, #52]	; (208c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>)
    2056:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    205a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    205e:	7d00      	ldrb	r0, [r0, #20]
    2060:	2800      	cmp	r0, #0
    2062:	bf08      	it	eq
    2064:	f002 fd32 	bleq	4acc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    2068:	4809      	ldr	r0, [pc, #36]	; (2090 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x344>)
    206a:	6841      	ldr	r1, [r0, #4]
    206c:	2900      	cmp	r1, #0
    206e:	bf08      	it	eq
    2070:	bd70      	popeq	{r4, r5, r6, pc}
    2072:	2000      	movs	r0, #0
    2074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2078:	4708      	bx	r1
    207a:	f240 3152 	movw	r1, #850	; 0x352
    207e:	2070      	movs	r0, #112	; 0x70
    2080:	f002 fbce 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2084:	20001080 	.word	0x20001080
    2088:	20001000 	.word	0x20001000
    208c:	20000d00 	.word	0x20000d00
    2090:	20000018 	.word	0x20000018
    2094:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2098:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2154 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x408>
    209c:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    20a0:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    20a4:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    20a8:	2c20      	cmp	r4, #32
    20aa:	bf08      	it	eq
    20ac:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    20b0:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 2158 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40c>
    20b4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 215c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x410>
    20b8:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    20bc:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    20c0:	2607      	movs	r6, #7
    20c2:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    20c6:	2801      	cmp	r0, #1
    20c8:	d00e      	beq.n	20e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39c>
    20ca:	2804      	cmp	r0, #4
    20cc:	bf08      	it	eq
    20ce:	2602      	moveq	r6, #2
    20d0:	d00a      	beq.n	20e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39c>
    20d2:	2805      	cmp	r0, #5
    20d4:	bf0c      	ite	eq
    20d6:	2603      	moveq	r6, #3
    20d8:	2806      	cmpne	r0, #6
    20da:	d005      	beq.n	20e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39c>
    20dc:	f640 01aa 	movw	r1, #2218	; 0x8aa
    20e0:	f04f 0070 	mov.w	r0, #112	; 0x70
    20e4:	f002 fb9c 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20e8:	f1bb 0f00 	cmp.w	fp, #0
    20ec:	bf18      	it	ne
    20ee:	f3af 8000 	nopne.w
    20f2:	f3ef 8010 	mrs	r0, PRIMASK
    20f6:	b672      	cpsid	i
    20f8:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    20fc:	784a      	ldrb	r2, [r1, #1]
    20fe:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    2102:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    2106:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    210a:	42a2      	cmp	r2, r4
    210c:	bf04      	itt	eq
    210e:	2220      	moveq	r2, #32
    2110:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2114:	b1b8      	cbz	r0, 2146 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3fa>
    2116:	462a      	mov	r2, r5
    2118:	4621      	mov	r1, r4
    211a:	2001      	movs	r0, #1
    211c:	f000 f85c 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    2120:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2124:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    2128:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    212c:	6840      	ldr	r0, [r0, #4]
    212e:	4631      	mov	r1, r6
    2130:	4790      	blx	r2
    2132:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    2136:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    213a:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    213e:	2c20      	cmp	r4, #32
    2140:	d1bc      	bne.n	20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    2142:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2146:	4806      	ldr	r0, [pc, #24]	; (2160 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x414>)
    2148:	2800      	cmp	r0, #0
    214a:	bf18      	it	ne
    214c:	f3af 8000 	nopne.w
    2150:	b662      	cpsie	i
    2152:	e7e0      	b.n	2116 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ca>
    2154:	20001080 	.word	0x20001080
    2158:	00000000 	.word	0x00000000
    215c:	20001000 	.word	0x20001000
    2160:	00000000 	.word	0x00000000
    2164:	b510      	push	{r4, lr}
    2166:	4604      	mov	r4, r0
    2168:	6800      	ldr	r0, [r0, #0]
    216a:	f00a fc66 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    216e:	4602      	mov	r2, r0
    2170:	8960      	ldrh	r0, [r4, #10]
    2172:	7a21      	ldrb	r1, [r4, #8]
    2174:	4b14      	ldr	r3, [pc, #80]	; (21c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x47c>)
    2176:	4408      	add	r0, r1
    2178:	1c41      	adds	r1, r0, #1
    217a:	1850      	adds	r0, r2, r1
    217c:	429a      	cmp	r2, r3
    217e:	d904      	bls.n	218a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43e>
    2180:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2184:	2070      	movs	r0, #112	; 0x70
    2186:	f002 fb4b 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    218a:	4a10      	ldr	r2, [pc, #64]	; (21cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x480>)
    218c:	4291      	cmp	r1, r2
    218e:	dd04      	ble.n	219a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44e>
    2190:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2194:	2070      	movs	r0, #112	; 0x70
    2196:	f002 fb43 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    219a:	4a0d      	ldr	r2, [pc, #52]	; (21d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x484>)
    219c:	4291      	cmp	r1, r2
    219e:	da04      	bge.n	21aa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x45e>
    21a0:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    21a4:	2070      	movs	r0, #112	; 0x70
    21a6:	f002 fb3b 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21aa:	490a      	ldr	r1, [pc, #40]	; (21d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x488>)
    21ac:	4281      	cmp	r1, r0
    21ae:	bfde      	ittt	le
    21b0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    21b4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    21b8:	bd10      	pople	{r4, pc}
    21ba:	2800      	cmp	r0, #0
    21bc:	bfbc      	itt	lt
    21be:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    21c2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    21c6:	bd10      	pop	{r4, pc}
    21c8:	1e847fff 	.word	0x1e847fff
    21cc:	0f424000 	.word	0x0f424000
    21d0:	f0bdc000 	.word	0xf0bdc000
    21d4:	1e848000 	.word	0x1e848000
    21d8:	f8df c054 	ldr.w	ip, [pc, #84]	; 2230 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e4>
    21dc:	b510      	push	{r4, lr}
    21de:	2300      	movs	r3, #0
    21e0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    21e4:	2807      	cmp	r0, #7
    21e6:	d21e      	bcs.n	2226 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4da>
    21e8:	e8df f000 	tbb	[pc, r0]
    21ec:	05050505 	.word	0x05050505
    21f0:	00040404 	.word	0x00040404
    21f4:	2301      	movs	r3, #1
    21f6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    21fa:	2b00      	cmp	r3, #0
    21fc:	bf08      	it	eq
    21fe:	bd10      	popeq	{r4, pc}
    2200:	480c      	ldr	r0, [pc, #48]	; (2234 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e8>)
    2202:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2206:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    220a:	2820      	cmp	r0, #32
    220c:	bf0e      	itee	eq
    220e:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2212:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    2216:	7041      	strbne	r1, [r0, #1]
    2218:	2020      	movs	r0, #32
    221a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    221e:	7058      	strb	r0, [r3, #1]
    2220:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2224:	bd10      	pop	{r4, pc}
    2226:	f44f 7118 	mov.w	r1, #608	; 0x260
    222a:	2070      	movs	r0, #112	; 0x70
    222c:	f002 faf8 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2230:	20001000 	.word	0x20001000
    2234:	20001080 	.word	0x20001080
    2238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    223c:	4681      	mov	r9, r0
    223e:	4856      	ldr	r0, [pc, #344]	; (2398 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64c>)
    2240:	4688      	mov	r8, r1
    2242:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    2246:	9000      	str	r0, [sp, #0]
    2248:	f890 4020 	ldrb.w	r4, [r0, #32]
    224c:	f1b9 0f01 	cmp.w	r9, #1
    2250:	4625      	mov	r5, r4
    2252:	bf18      	it	ne
    2254:	f1b9 0f02 	cmpne.w	r9, #2
    2258:	d005      	beq.n	2266 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x51a>
    225a:	f640 2181 	movw	r1, #2689	; 0xa81
    225e:	f04f 0070 	mov.w	r0, #112	; 0x70
    2262:	f002 fadd 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2266:	2700      	movs	r7, #0
    2268:	2d20      	cmp	r5, #32
    226a:	d044      	beq.n	22f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5aa>
    226c:	484a      	ldr	r0, [pc, #296]	; (2398 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64c>)
    226e:	2600      	movs	r6, #0
    2270:	7f80      	ldrb	r0, [r0, #30]
    2272:	2800      	cmp	r0, #0
    2274:	bf08      	it	eq
    2276:	2602      	moveq	r6, #2
    2278:	f001 fbf2 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    227c:	f8df a11c 	ldr.w	sl, [pc, #284]	; 239c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x650>
    2280:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2284:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2288:	688a      	ldr	r2, [r1, #8]
    228a:	68c9      	ldr	r1, [r1, #12]
    228c:	1a12      	subs	r2, r2, r0
    228e:	1a09      	subs	r1, r1, r0
    2290:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2294:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2298:	4296      	cmp	r6, r2
    229a:	bf99      	ittee	ls
    229c:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    22a0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    22a4:	4a3e      	ldrhi	r2, [pc, #248]	; (23a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x654>)
    22a6:	eb02 1b88 	addhi.w	fp, r2, r8, lsl #6
    22aa:	d922      	bls.n	22f2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a6>
    22ac:	4622      	mov	r2, r4
    22ae:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    22b2:	784c      	ldrb	r4, [r1, #1]
    22b4:	2c20      	cmp	r4, #32
    22b6:	d014      	beq.n	22e2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x596>
    22b8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    22bc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    22c0:	f8d1 c008 	ldr.w	ip, [r1, #8]
    22c4:	68c9      	ldr	r1, [r1, #12]
    22c6:	ebac 0c00 	sub.w	ip, ip, r0
    22ca:	1a09      	subs	r1, r1, r0
    22cc:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    22d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    22d4:	4566      	cmp	r6, ip
    22d6:	bf9c      	itt	ls
    22d8:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    22dc:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    22e0:	d8e4      	bhi.n	22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    22e2:	2a20      	cmp	r2, #32
    22e4:	d005      	beq.n	22f2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a6>
    22e6:	4643      	mov	r3, r8
    22e8:	2120      	movs	r1, #32
    22ea:	2004      	movs	r0, #4
    22ec:	f7ff f91a 	bl	1524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    22f0:	4604      	mov	r4, r0
    22f2:	42ac      	cmp	r4, r5
    22f4:	d116      	bne.n	2324 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d8>
    22f6:	482b      	ldr	r0, [pc, #172]	; (23a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x658>)
    22f8:	2800      	cmp	r0, #0
    22fa:	bf18      	it	ne
    22fc:	f3af 8000 	nopne.w
    2300:	f001 fbae 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2304:	4c24      	ldr	r4, [pc, #144]	; (2398 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64c>)
    2306:	4603      	mov	r3, r0
    2308:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    230c:	2820      	cmp	r0, #32
    230e:	d00c      	beq.n	232a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5de>
    2310:	68e0      	ldr	r0, [r4, #12]
    2312:	1c99      	adds	r1, r3, #2
    2314:	1a08      	subs	r0, r1, r0
    2316:	0200      	lsls	r0, r0, #8
    2318:	17c1      	asrs	r1, r0, #31
    231a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    231e:	1200      	asrs	r0, r0, #8
    2320:	2800      	cmp	r0, #0
    2322:	dd02      	ble.n	232a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5de>
    2324:	2000      	movs	r0, #0
    2326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    232a:	2d20      	cmp	r5, #32
    232c:	d00d      	beq.n	234a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5fe>
    232e:	462a      	mov	r2, r5
    2330:	4649      	mov	r1, r9
    2332:	4618      	mov	r0, r3
    2334:	f7ff fb2e 	bl	1994 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2338:	b320      	cbz	r0, 2384 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x638>
    233a:	9800      	ldr	r0, [sp, #0]
    233c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    2340:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2344:	2001      	movs	r0, #1
    2346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    234a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    234e:	b118      	cbz	r0, 2358 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60c>
    2350:	f002 f8c4 	bl	44dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2354:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    2358:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    235c:	b120      	cbz	r0, 2368 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x61c>
    235e:	2005      	movs	r0, #5
    2360:	f001 fde0 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2364:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    2368:	2004      	movs	r0, #4
    236a:	f001 fddb 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    236e:	f001 fe49 	bl	4004 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2372:	2020      	movs	r0, #32
    2374:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2378:	480b      	ldr	r0, [pc, #44]	; (23a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x65c>)
    237a:	68c0      	ldr	r0, [r0, #12]
    237c:	6007      	str	r7, [r0, #0]
    237e:	480b      	ldr	r0, [pc, #44]	; (23ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x660>)
    2380:	6007      	str	r7, [r0, #0]
    2382:	e7df      	b.n	2344 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5f8>
    2384:	4643      	mov	r3, r8
    2386:	462a      	mov	r2, r5
    2388:	2120      	movs	r1, #32
    238a:	2004      	movs	r0, #4
    238c:	f7ff f8ca 	bl	1524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2390:	2000      	movs	r0, #0
    2392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2396:	0000      	.short	0x0000
    2398:	20001080 	.word	0x20001080
    239c:	20000d00 	.word	0x20000d00
    23a0:	20001000 	.word	0x20001000
    23a4:	00000000 	.word	0x00000000
    23a8:	20000018 	.word	0x20000018
    23ac:	40000508 	.word	0x40000508

000023b0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    23b0:	4906      	ldr	r1, [pc, #24]	; (23cc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    23b2:	b510      	push	{r4, lr}
    23b4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    23b8:	2a20      	cmp	r2, #32
    23ba:	bf1c      	itt	ne
    23bc:	7788      	strbne	r0, [r1, #30]
    23be:	bd10      	popne	{r4, pc}
    23c0:	f240 31b1 	movw	r1, #945	; 0x3b1
    23c4:	2070      	movs	r0, #112	; 0x70
    23c6:	f002 fa2b 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23ca:	0000      	.short	0x0000
    23cc:	20001080 	.word	0x20001080

000023d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    23d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23d4:	4e5e      	ldr	r6, [pc, #376]	; (2550 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    23d6:	4607      	mov	r7, r0
    23d8:	b085      	sub	sp, #20
    23da:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    23de:	4688      	mov	r8, r1
    23e0:	2820      	cmp	r0, #32
    23e2:	d051      	beq.n	2488 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb8>
    23e4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    23e8:	f106 040c 	add.w	r4, r6, #12
    23ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23f0:	f5a6 7960 	sub.w	r9, r6, #896	; 0x380
    23f4:	eb09 0ac0 	add.w	sl, r9, r0, lsl #3
    23f8:	2020      	movs	r0, #32
    23fa:	f88d 0000 	strb.w	r0, [sp]
    23fe:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2402:	aa03      	add	r2, sp, #12
    2404:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2408:	a901      	add	r1, sp, #4
    240a:	f890 5020 	ldrb.w	r5, [r0, #32]
    240e:	6930      	ldr	r0, [r6, #16]
    2410:	9002      	str	r0, [sp, #8]
    2412:	6830      	ldr	r0, [r6, #0]
    2414:	4438      	add	r0, r7
    2416:	f001 f9c1 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    241a:	f8da 000c 	ldr.w	r0, [sl, #12]
    241e:	9901      	ldr	r1, [sp, #4]
    2420:	2f65      	cmp	r7, #101	; 0x65
    2422:	4408      	add	r0, r1
    2424:	d335      	bcc.n	2492 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2426:	4b4b      	ldr	r3, [pc, #300]	; (2554 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x184>)
    2428:	2100      	movs	r1, #0
    242a:	1bdb      	subs	r3, r3, r7
    242c:	4189      	sbcs	r1, r1
    242e:	d330      	bcc.n	2492 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2430:	6821      	ldr	r1, [r4, #0]
    2432:	1a41      	subs	r1, r0, r1
    2434:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2438:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    243c:	d829      	bhi.n	2492 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    243e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2442:	6060      	str	r0, [r4, #4]
    2444:	4630      	mov	r0, r6
    2446:	f884 800c 	strb.w	r8, [r4, #12]
    244a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    244e:	46ea      	mov	sl, sp
    2450:	2d20      	cmp	r5, #32
    2452:	bf1c      	itt	ne
    2454:	4940      	ldrne	r1, [pc, #256]	; (2558 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    2456:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    245a:	d03e      	beq.n	24da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    245c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2460:	eb09 08c0 	add.w	r8, r9, r0, lsl #3
    2464:	6860      	ldr	r0, [r4, #4]
    2466:	f8d8 2008 	ldr.w	r2, [r8, #8]
    246a:	4621      	mov	r1, r4
    246c:	1a10      	subs	r0, r2, r0
    246e:	0200      	lsls	r0, r0, #8
    2470:	17c2      	asrs	r2, r0, #31
    2472:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2476:	f108 0608 	add.w	r6, r8, #8
    247a:	1200      	asrs	r0, r0, #8
    247c:	d41b      	bmi.n	24b6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe6>
    247e:	8970      	ldrh	r0, [r6, #10]
    2480:	b358      	cbz	r0, 24da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2482:	8948      	ldrh	r0, [r1, #10]
    2484:	b148      	cbz	r0, 249a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    2486:	e028      	b.n	24da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2488:	f640 314c 	movw	r1, #2892	; 0xb4c
    248c:	2070      	movs	r0, #112	; 0x70
    248e:	f002 f9c7 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2492:	b005      	add	sp, #20
    2494:	2001      	movs	r0, #1
    2496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    249a:	4620      	mov	r0, r4
    249c:	f7ff fe62 	bl	2164 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x418>
    24a0:	f001 f960 	bl	3764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    24a4:	6831      	ldr	r1, [r6, #0]
    24a6:	1a08      	subs	r0, r1, r0
    24a8:	0200      	lsls	r0, r0, #8
    24aa:	17c1      	asrs	r1, r0, #31
    24ac:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24b0:	1200      	asrs	r0, r0, #8
    24b2:	2833      	cmp	r0, #51	; 0x33
    24b4:	da11      	bge.n	24da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    24b6:	f88a 5000 	strb.w	r5, [sl]
    24ba:	f898 1014 	ldrb.w	r1, [r8, #20]
    24be:	7b20      	ldrb	r0, [r4, #12]
    24c0:	4281      	cmp	r1, r0
    24c2:	d805      	bhi.n	24d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    24c4:	9802      	ldr	r0, [sp, #8]
    24c6:	6060      	str	r0, [r4, #4]
    24c8:	b005      	add	sp, #20
    24ca:	2002      	movs	r0, #2
    24cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24d0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    24d4:	7845      	ldrb	r5, [r0, #1]
    24d6:	2d20      	cmp	r5, #32
    24d8:	d1c0      	bne.n	245c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x8c>
    24da:	2005      	movs	r0, #5
    24dc:	f001 fd22 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    24e0:	4c1b      	ldr	r4, [pc, #108]	; (2550 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    24e2:	f04f 30ff 	mov.w	r0, #4294967295
    24e6:	60a0      	str	r0, [r4, #8]
    24e8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    24ec:	f89d 2000 	ldrb.w	r2, [sp]
    24f0:	2120      	movs	r1, #32
    24f2:	2a20      	cmp	r2, #32
    24f4:	bf13      	iteet	ne
    24f6:	2005      	movne	r0, #5
    24f8:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    24fc:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2500:	f7ff f810 	blne	1524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2504:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2508:	4913      	ldr	r1, [pc, #76]	; (2558 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    250a:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    250e:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    2512:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2516:	7048      	strb	r0, [r1, #1]
    2518:	6820      	ldr	r0, [r4, #0]
    251a:	4438      	add	r0, r7
    251c:	6020      	str	r0, [r4, #0]
    251e:	20ff      	movs	r0, #255	; 0xff
    2520:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2524:	7e60      	ldrb	r0, [r4, #25]
    2526:	2801      	cmp	r0, #1
    2528:	d105      	bne.n	2536 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x166>
    252a:	6920      	ldr	r0, [r4, #16]
    252c:	1e40      	subs	r0, r0, #1
    252e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2532:	f001 fb3d 	bl	3bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2536:	f89d 0000 	ldrb.w	r0, [sp]
    253a:	2820      	cmp	r0, #32
    253c:	d003      	beq.n	2546 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x176>
    253e:	4807      	ldr	r0, [pc, #28]	; (255c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x18c>)
    2540:	7840      	ldrb	r0, [r0, #1]
    2542:	f002 fa3d 	bl	49c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2546:	b005      	add	sp, #20
    2548:	2000      	movs	r0, #0
    254a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254e:	0000      	.short	0x0000
    2550:	20001080 	.word	0x20001080
    2554:	0f424000 	.word	0x0f424000
    2558:	20001000 	.word	0x20001000
    255c:	20000018 	.word	0x20000018

00002560 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2560:	4806      	ldr	r0, [pc, #24]	; (257c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2562:	b510      	push	{r4, lr}
    2564:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2568:	2920      	cmp	r1, #32
    256a:	bf1c      	itt	ne
    256c:	7e00      	ldrbne	r0, [r0, #24]
    256e:	bd10      	popne	{r4, pc}
    2570:	f640 3145 	movw	r1, #2885	; 0xb45
    2574:	2070      	movs	r0, #112	; 0x70
    2576:	f002 f953 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    257a:	0000      	.short	0x0000
    257c:	20001080 	.word	0x20001080

00002580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    2580:	4602      	mov	r2, r0
    2582:	4b14      	ldr	r3, [pc, #80]	; (25d4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2584:	b510      	push	{r4, lr}
    2586:	4408      	add	r0, r1
    2588:	429a      	cmp	r2, r3
    258a:	d904      	bls.n	2596 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    258c:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2590:	2070      	movs	r0, #112	; 0x70
    2592:	f002 f945 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2596:	4a10      	ldr	r2, [pc, #64]	; (25d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2598:	4291      	cmp	r1, r2
    259a:	dd04      	ble.n	25a6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    259c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    25a0:	2070      	movs	r0, #112	; 0x70
    25a2:	f002 f93d 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a6:	4a0d      	ldr	r2, [pc, #52]	; (25dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    25a8:	4291      	cmp	r1, r2
    25aa:	da04      	bge.n	25b6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    25ac:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    25b0:	2070      	movs	r0, #112	; 0x70
    25b2:	f002 f935 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b6:	490a      	ldr	r1, [pc, #40]	; (25e0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    25b8:	4281      	cmp	r1, r0
    25ba:	bfde      	ittt	le
    25bc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25c0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25c4:	bd10      	pople	{r4, pc}
    25c6:	2800      	cmp	r0, #0
    25c8:	bfbc      	itt	lt
    25ca:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25ce:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25d2:	bd10      	pop	{r4, pc}
    25d4:	1e847fff 	.word	0x1e847fff
    25d8:	0f424000 	.word	0x0f424000
    25dc:	f0bdc000 	.word	0xf0bdc000
    25e0:	1e848000 	.word	0x1e848000

000025e4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    25e4:	4b15      	ldr	r3, [pc, #84]	; (263c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    25e6:	1a0a      	subs	r2, r1, r0
    25e8:	f04f 0c00 	mov.w	ip, #0
    25ec:	1ad3      	subs	r3, r2, r3
    25ee:	f17c 0300 	sbcs.w	r3, ip, #0
    25f2:	bf3c      	itt	cc
    25f4:	4610      	movcc	r0, r2
    25f6:	4770      	bxcc	lr
    25f8:	b510      	push	{r4, lr}
    25fa:	1a43      	subs	r3, r0, r1
    25fc:	4c0f      	ldr	r4, [pc, #60]	; (263c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    25fe:	1b1c      	subs	r4, r3, r4
    2600:	f17c 0c00 	sbcs.w	ip, ip, #0
    2604:	bf3c      	itt	cc
    2606:	4610      	movcc	r0, r2
    2608:	bd10      	popcc	{r4, pc}
    260a:	f8df c034 	ldr.w	ip, [pc, #52]	; 2640 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x5c>
    260e:	4594      	cmp	ip, r2
    2610:	bf3f      	itttt	cc
    2612:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2616:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    261a:	4408      	addcc	r0, r1
    261c:	bd10      	popcc	{r4, pc}
    261e:	459c      	cmp	ip, r3
    2620:	d206      	bcs.n	2630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x4c>
    2622:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    2626:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    262a:	4408      	add	r0, r1
    262c:	4240      	negs	r0, r0
    262e:	bd10      	pop	{r4, pc}
    2630:	f640 21dd 	movw	r1, #2781	; 0xadd
    2634:	2070      	movs	r0, #112	; 0x70
    2636:	f002 f8f3 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    263a:	0000      	.short	0x0000
    263c:	0f424000 	.word	0x0f424000
    2640:	1e847fff 	.word	0x1e847fff

00002644 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2644:	490e      	ldr	r1, [pc, #56]	; (2680 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2646:	b510      	push	{r4, lr}
    2648:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    264c:	2820      	cmp	r0, #32
    264e:	d012      	beq.n	2676 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    2650:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2654:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2658:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    265c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2660:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2664:	6840      	ldr	r0, [r0, #4]
    2666:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    266a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    266e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2672:	2104      	movs	r1, #4
    2674:	4710      	bx	r2
    2676:	f640 018d 	movw	r1, #2189	; 0x88d
    267a:	2070      	movs	r0, #112	; 0x70
    267c:	f002 f8d0 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2680:	20001080 	.word	0x20001080

00002684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2686:	4d6c      	ldr	r5, [pc, #432]	; (2838 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    2688:	4a6c      	ldr	r2, [pc, #432]	; (283c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    268a:	f505 7460 	add.w	r4, r5, #896	; 0x380
    268e:	2601      	movs	r6, #1
    2690:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    2694:	2808      	cmp	r0, #8
    2696:	d26e      	bcs.n	2776 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf2>
    2698:	e8df f000 	tbb	[pc, r0]
    269c:	ab997304 	.word	0xab997304
    26a0:	b5b043c9 	.word	0xb5b043c9
    26a4:	b919      	cbnz	r1, 26ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    26a6:	f001 ff35 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26aa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    26ae:	8ae0      	ldrh	r0, [r4, #22]
    26b0:	b110      	cbz	r0, 26b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    26b2:	f002 f83d 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26b6:	b190      	cbz	r0, 26de <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    26b8:	f7ff fca6 	bl	2008 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    26bc:	20ff      	movs	r0, #255	; 0xff
    26be:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    26c2:	68a1      	ldr	r1, [r4, #8]
    26c4:	f1b1 3fff 	cmp.w	r1, #4294967295
    26c8:	d005      	beq.n	26d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    26ca:	2301      	movs	r3, #1
    26cc:	2203      	movs	r2, #3
    26ce:	2005      	movs	r0, #5
    26d0:	f001 fb54 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26d4:	b140      	cbz	r0, 26e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    26d6:	7e60      	ldrb	r0, [r4, #25]
    26d8:	2801      	cmp	r0, #1
    26da:	d110      	bne.n	26fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    26dc:	e009      	b.n	26f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    26de:	f640 013d 	movw	r1, #2109	; 0x83d
    26e2:	2070      	movs	r0, #112	; 0x70
    26e4:	f002 f89c 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26e8:	f640 0142 	movw	r1, #2114	; 0x842
    26ec:	2070      	movs	r0, #112	; 0x70
    26ee:	f002 f897 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26f2:	6920      	ldr	r0, [r4, #16]
    26f4:	1e40      	subs	r0, r0, #1
    26f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26fa:	f001 fa59 	bl	3bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    26fe:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2702:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    270a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    270e:	6840      	ldr	r0, [r0, #4]
    2710:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2714:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2718:	b001      	add	sp, #4
    271a:	2101      	movs	r1, #1
    271c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2720:	4710      	bx	r2
    2722:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2726:	b140      	cbz	r0, 273a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb6>
    2728:	b919      	cbnz	r1, 2732 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xae>
    272a:	f001 fef3 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    272e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2732:	2000      	movs	r0, #0
    2734:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    273a:	f7ff fc65 	bl	2008 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    273e:	f04f 30ff 	mov.w	r0, #4294967295
    2742:	60a0      	str	r0, [r4, #8]
    2744:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2748:	f88d 0000 	strb.w	r0, [sp]
    274c:	f89d 0000 	ldrb.w	r0, [sp]
    2750:	b190      	cbz	r0, 2778 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf4>
    2752:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2756:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    275a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    275e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2762:	6840      	ldr	r0, [r0, #4]
    2764:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2768:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    276c:	b001      	add	sp, #4
    276e:	2106      	movs	r1, #6
    2770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2774:	4710      	bx	r2
    2776:	e05a      	b.n	282e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1aa>
    2778:	f640 015a 	movw	r1, #2138	; 0x85a
    277c:	2070      	movs	r0, #112	; 0x70
    277e:	f002 f84f 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2782:	f7ff fc41 	bl	2008 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    2786:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    278a:	f001 ffd1 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    278e:	b118      	cbz	r0, 2798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x114>
    2790:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2794:	b128      	cbz	r0, 27a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11e>
    2796:	e008      	b.n	27aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    2798:	f640 0168 	movw	r1, #2152	; 0x868
    279c:	2070      	movs	r0, #112	; 0x70
    279e:	f002 f83f 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27a2:	f001 feb7 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    27a6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    27aa:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    27ae:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    27b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    27b6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    27ba:	6840      	ldr	r0, [r0, #4]
    27bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    27c0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    27c4:	b001      	add	sp, #4
    27c6:	2100      	movs	r1, #0
    27c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    27cc:	4710      	bx	r2
    27ce:	f001 fc63 	bl	4098 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    27d2:	8ae0      	ldrh	r0, [r4, #22]
    27d4:	b110      	cbz	r0, 27dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x158>
    27d6:	f001 ffab 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27da:	b128      	cbz	r0, 27e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x164>
    27dc:	4818      	ldr	r0, [pc, #96]	; (2840 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    27de:	7800      	ldrb	r0, [r0, #0]
    27e0:	2803      	cmp	r0, #3
    27e2:	bf08      	it	eq
    27e4:	7766      	strbeq	r6, [r4, #29]
    27e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27e8:	f640 0172 	movw	r1, #2162	; 0x872
    27ec:	2070      	movs	r0, #112	; 0x70
    27ee:	f002 f817 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27f2:	4814      	ldr	r0, [pc, #80]	; (2844 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    27f4:	6006      	str	r6, [r0, #0]
    27f6:	68d0      	ldr	r0, [r2, #12]
    27f8:	6006      	str	r6, [r0, #0]
    27fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27fc:	7810      	ldrb	r0, [r2, #0]
    27fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2802:	f002 b8dd 	b.w	49c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2806:	f7ff fbff 	bl	2008 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    280a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    280e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2812:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2816:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    281a:	6840      	ldr	r0, [r0, #4]
    281c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2820:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2824:	b001      	add	sp, #4
    2826:	2105      	movs	r1, #5
    2828:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    282c:	4710      	bx	r2
    282e:	f640 0185 	movw	r1, #2181	; 0x885
    2832:	2070      	movs	r0, #112	; 0x70
    2834:	f001 fff4 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2838:	20000d00 	.word	0x20000d00
    283c:	20000018 	.word	0x20000018
    2840:	20000020 	.word	0x20000020
    2844:	40000508 	.word	0x40000508

00002848 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    2848:	4803      	ldr	r0, [pc, #12]	; (2858 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    284a:	b510      	push	{r4, lr}
    284c:	7840      	ldrb	r0, [r0, #1]
    284e:	f00a f8f4 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2852:	b280      	uxth	r0, r0
    2854:	bd10      	pop	{r4, pc}
    2856:	0000      	.short	0x0000
    2858:	20000020 	.word	0x20000020

0000285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    285c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2860:	4682      	mov	sl, r0
    2862:	48e0      	ldr	r0, [pc, #896]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2864:	b08b      	sub	sp, #44	; 0x2c
    2866:	6800      	ldr	r0, [r0, #0]
    2868:	4ddf      	ldr	r5, [pc, #892]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    286a:	05c0      	lsls	r0, r0, #23
    286c:	0dc0      	lsrs	r0, r0, #23
    286e:	d00e      	beq.n	288e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2870:	3810      	subs	r0, #16
    2872:	b240      	sxtb	r0, r0
    2874:	2800      	cmp	r0, #0
    2876:	bfb8      	it	lt
    2878:	f000 000f 	andlt.w	r0, r0, #15
    287c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2880:	bfac      	ite	ge
    2882:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2886:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    288a:	0940      	lsrs	r0, r0, #5
    288c:	d00d      	beq.n	28aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    288e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2890:	f04f 0b00 	mov.w	fp, #0
    2894:	7800      	ldrb	r0, [r0, #0]
    2896:	2800      	cmp	r0, #0
    2898:	bf18      	it	ne
    289a:	2801      	cmpne	r0, #1
    289c:	d018      	beq.n	28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    289e:	f240 711c 	movw	r1, #1820	; 0x71c
    28a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    28a6:	f001 ffbb 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    28ae:	f04f 0b01 	mov.w	fp, #1
    28b2:	2820      	cmp	r0, #32
    28b4:	d007      	beq.n	28c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    28b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    28b8:	7800      	ldrb	r0, [r0, #0]
    28ba:	b148      	cbz	r0, 28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    28bc:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    28c0:	2070      	movs	r0, #112	; 0x70
    28c2:	f001 ffad 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c6:	f240 7115 	movw	r1, #1813	; 0x715
    28ca:	2070      	movs	r0, #112	; 0x70
    28cc:	f001 ffa8 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28d0:	4cc6      	ldr	r4, [pc, #792]	; (2bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    28d2:	b124      	cbz	r4, 28de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 701f 	movw	r0, #1823	; 0x71f
    28da:	f3af 8000 	nop.w
    28de:	49c4      	ldr	r1, [pc, #784]	; (2bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    28e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    28e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    28e8:	f04f 0801 	mov.w	r8, #1
    28ec:	9000      	str	r0, [sp, #0]
    28ee:	b124      	cbz	r4, 28fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    28f0:	2100      	movs	r1, #0
    28f2:	f240 7027 	movw	r0, #1831	; 0x727
    28f6:	f3af 8000 	nop.w
    28fa:	f1b8 0f00 	cmp.w	r8, #0
    28fe:	d009      	beq.n	2914 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2900:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2904:	f04f 0900 	mov.w	r9, #0
    2908:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    290c:	f1bb 0f00 	cmp.w	fp, #0
    2910:	d007      	beq.n	2922 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2912:	e032      	b.n	297a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2914:	48b7      	ldr	r0, [pc, #732]	; (2bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2916:	2800      	cmp	r0, #0
    2918:	bf18      	it	ne
    291a:	f3af 8000 	nopne.w
    291e:	b662      	cpsie	i
    2920:	e7ee      	b.n	2900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2922:	4637      	mov	r7, r6
    2924:	2001      	movs	r0, #1
    2926:	ea20 0607 	bic.w	r6, r0, r7
    292a:	48b3      	ldr	r0, [pc, #716]	; (2bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    292c:	2240      	movs	r2, #64	; 0x40
    292e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2932:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2936:	f00a f9ee 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    293a:	b124      	cbz	r4, 2946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    293c:	2100      	movs	r1, #0
    293e:	f240 509a 	movw	r0, #1434	; 0x59a
    2942:	f3af 8000 	nop.w
    2946:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    294a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    294e:	6a09      	ldr	r1, [r1, #32]
    2950:	6201      	str	r1, [r0, #32]
    2952:	b124      	cbz	r4, 295e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2954:	2100      	movs	r1, #0
    2956:	f240 509e 	movw	r0, #1438	; 0x59e
    295a:	f3af 8000 	nop.w
    295e:	b124      	cbz	r4, 296a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2960:	2100      	movs	r1, #0
    2962:	f240 7031 	movw	r0, #1841	; 0x731
    2966:	f3af 8000 	nop.w
    296a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    296e:	f88d 0004 	strb.w	r0, [sp, #4]
    2972:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2976:	2800      	cmp	r0, #0
    2978:	d1b9      	bne.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    297a:	b124      	cbz	r4, 2986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    297c:	2100      	movs	r1, #0
    297e:	f240 703b 	movw	r0, #1851	; 0x73b
    2982:	f3af 8000 	nop.w
    2986:	f001 f86b 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    298a:	4680      	mov	r8, r0
    298c:	4633      	mov	r3, r6
    298e:	aa06      	add	r2, sp, #24
    2990:	990c      	ldr	r1, [sp, #48]	; 0x30
    2992:	f7ff fa65 	bl	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    2996:	b124      	cbz	r4, 29a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2998:	2100      	movs	r1, #0
    299a:	f240 7042 	movw	r0, #1858	; 0x742
    299e:	f3af 8000 	nop.w
    29a2:	4995      	ldr	r1, [pc, #596]	; (2bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    29a4:	a806      	add	r0, sp, #24
    29a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    29aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    29ae:	2901      	cmp	r1, #1
    29b0:	bf18      	it	ne
    29b2:	2902      	cmpne	r1, #2
    29b4:	d136      	bne.n	2a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    29b6:	9906      	ldr	r1, [sp, #24]
    29b8:	9a07      	ldr	r2, [sp, #28]
    29ba:	eba1 0108 	sub.w	r1, r1, r8
    29be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29c2:	eba2 0208 	sub.w	r2, r2, r8
    29c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    29ca:	2902      	cmp	r1, #2
    29cc:	d370      	bcc.n	2ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    29ce:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    29d2:	bf98      	it	ls
    29d4:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    29d8:	d86a      	bhi.n	2ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    29da:	f04f 0901 	mov.w	r9, #1
    29de:	ab01      	add	r3, sp, #4
    29e0:	aa05      	add	r2, sp, #20
    29e2:	4631      	mov	r1, r6
    29e4:	f7fe ff56 	bl	1894 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    29e8:	2800      	cmp	r0, #0
    29ea:	d069      	beq.n	2ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x264>
    29ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    29f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    29f4:	4633      	mov	r3, r6
    29f6:	428a      	cmp	r2, r1
    29f8:	d066      	beq.n	2ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    29fa:	2005      	movs	r0, #5
    29fc:	f7fe fd92 	bl	1524 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2a00:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2a04:	7048      	strb	r0, [r1, #1]
    2a06:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a0a:	2820      	cmp	r0, #32
    2a0c:	bf1c      	itt	ne
    2a0e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2a12:	f880 a001 	strbne.w	sl, [r0, #1]
    2a16:	d061      	beq.n	2adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x280>
    2a18:	4632      	mov	r2, r6
    2a1a:	4651      	mov	r1, sl
    2a1c:	f05f 0003 	movs.w	r0, #3
    2a20:	f7ff fbda 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    2a24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2a28:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2a2c:	f88d 0004 	strb.w	r0, [sp, #4]
    2a30:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2a34:	2800      	cmp	r0, #0
    2a36:	bf14      	ite	ne
    2a38:	2701      	movne	r7, #1
    2a3a:	2700      	moveq	r7, #0
    2a3c:	b124      	cbz	r4, 2a48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2a3e:	2100      	movs	r1, #0
    2a40:	f240 7049 	movw	r0, #1865	; 0x749
    2a44:	f3af 8000 	nop.w
    2a48:	486c      	ldr	r0, [pc, #432]	; (2bfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>)
    2a4a:	2800      	cmp	r0, #0
    2a4c:	bf18      	it	ne
    2a4e:	f3af 8000 	nopne.w
    2a52:	f3ef 8810 	mrs	r8, PRIMASK
    2a56:	b672      	cpsid	i
    2a58:	b124      	cbz	r4, 2a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x208>
    2a5a:	2100      	movs	r1, #0
    2a5c:	f240 704f 	movw	r0, #1871	; 0x74f
    2a60:	f3af 8000 	nop.w
    2a64:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2a68:	f88d 0004 	strb.w	r0, [sp, #4]
    2a6c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2a70:	2800      	cmp	r0, #0
    2a72:	f47f af3c 	bne.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2a76:	b124      	cbz	r4, 2a82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x226>
    2a78:	2100      	movs	r1, #0
    2a7a:	f240 7057 	movw	r0, #1879	; 0x757
    2a7e:	f3af 8000 	nop.w
    2a82:	f10d 0e18 	add.w	lr, sp, #24
    2a86:	9800      	ldr	r0, [sp, #0]
    2a88:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2a8c:	f100 0008 	add.w	r0, r0, #8
    2a90:	f1b9 0f00 	cmp.w	r9, #0
    2a94:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2a98:	d04c      	beq.n	2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2a9a:	b124      	cbz	r4, 2aa6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24a>
    2a9c:	2100      	movs	r1, #0
    2a9e:	f240 7064 	movw	r0, #1892	; 0x764
    2aa2:	f3af 8000 	nop.w
    2aa6:	f1bb 0f00 	cmp.w	fp, #0
    2aaa:	d134      	bne.n	2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2aac:	e01e      	b.n	2aec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2aae:	e7ff      	b.n	2ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2ab0:	4632      	mov	r2, r6
    2ab2:	4651      	mov	r1, sl
    2ab4:	2004      	movs	r0, #4
    2ab6:	f7ff fb8f 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    2aba:	f04f 0901 	mov.w	r9, #1
    2abe:	e7b1      	b.n	2a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2ac0:	4632      	mov	r2, r6
    2ac2:	4651      	mov	r1, sl
    2ac4:	2004      	movs	r0, #4
    2ac6:	e7ab      	b.n	2a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c4>
    2ac8:	2920      	cmp	r1, #32
    2aca:	bf19      	ittee	ne
    2acc:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2ad0:	7840      	ldrbne	r0, [r0, #1]
    2ad2:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2ad6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2ada:	e791      	b.n	2a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2adc:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2ae0:	f880 a020 	strb.w	sl, [r0, #32]
    2ae4:	21ff      	movs	r1, #255	; 0xff
    2ae6:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    2aea:	e795      	b.n	2a18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    2aec:	b19f      	cbz	r7, 2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2aee:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2af2:	2820      	cmp	r0, #32
    2af4:	d10f      	bne.n	2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2af6:	b124      	cbz	r4, 2b02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a6>
    2af8:	2100      	movs	r1, #0
    2afa:	f240 7069 	movw	r0, #1897	; 0x769
    2afe:	f3af 8000 	nop.w
    2b02:	4631      	mov	r1, r6
    2b04:	2002      	movs	r0, #2
    2b06:	f7ff fb97 	bl	2238 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ec>
    2b0a:	b920      	cbnz	r0, 2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b0c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b0e:	7800      	ldrb	r0, [r0, #0]
    2b10:	b3f0      	cbz	r0, 2b90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    2b12:	2801      	cmp	r0, #1
    2b14:	d04c      	beq.n	2bb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    2b16:	b124      	cbz	r4, 2b22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    2b18:	2100      	movs	r1, #0
    2b1a:	f240 7086 	movw	r0, #1926	; 0x786
    2b1e:	f3af 8000 	nop.w
    2b22:	f1bb 0f00 	cmp.w	fp, #0
    2b26:	bf1c      	itt	ne
    2b28:	20ff      	movne	r0, #255	; 0xff
    2b2a:	f885 002b 	strbne.w	r0, [r5, #43]	; 0x2b
    2b2e:	d048      	beq.n	2bc2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2b30:	f04f 0901 	mov.w	r9, #1
    2b34:	b124      	cbz	r4, 2b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    2b36:	2100      	movs	r1, #0
    2b38:	f240 7097 	movw	r0, #1943	; 0x797
    2b3c:	f3af 8000 	nop.w
    2b40:	f1b8 0f00 	cmp.w	r8, #0
    2b44:	d047      	beq.n	2bd6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37a>
    2b46:	b124      	cbz	r4, 2b52 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f6>
    2b48:	2100      	movs	r1, #0
    2b4a:	f240 709b 	movw	r0, #1947	; 0x79b
    2b4e:	f3af 8000 	nop.w
    2b52:	f1b9 0f00 	cmp.w	r9, #0
    2b56:	d011      	beq.n	2b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2b58:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2b5c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2b60:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2b64:	2820      	cmp	r0, #32
    2b66:	d009      	beq.n	2b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2b68:	b124      	cbz	r4, 2b74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x318>
    2b6a:	2100      	movs	r1, #0
    2b6c:	f240 70a2 	movw	r0, #1954	; 0x7a2
    2b70:	f3af 8000 	nop.w
    2b74:	4822      	ldr	r0, [pc, #136]	; (2c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a4>)
    2b76:	7840      	ldrb	r0, [r0, #1]
    2b78:	f001 ff22 	bl	49c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b7c:	b124      	cbz	r4, 2b88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    2b7e:	2100      	movs	r1, #0
    2b80:	f240 70a7 	movw	r0, #1959	; 0x7a7
    2b84:	f3af 8000 	nop.w
    2b88:	b00d      	add	sp, #52	; 0x34
    2b8a:	4648      	mov	r0, r9
    2b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b90:	e7ff      	b.n	2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2b92:	b124      	cbz	r4, 2b9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x342>
    2b94:	2100      	movs	r1, #0
    2b96:	f240 7071 	movw	r0, #1905	; 0x771
    2b9a:	f3af 8000 	nop.w
    2b9e:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2ba2:	4651      	mov	r1, sl
    2ba4:	2004      	movs	r0, #4
    2ba6:	f7ff fb17 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    2baa:	f04f 0901 	mov.w	r9, #1
    2bae:	e7c1      	b.n	2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2bb0:	2c00      	cmp	r4, #0
    2bb2:	f43f ae9c 	beq.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2bb6:	2100      	movs	r1, #0
    2bb8:	f240 707c 	movw	r0, #1916	; 0x77c
    2bbc:	f3af 8000 	nop.w
    2bc0:	e695      	b.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2bc2:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2bc6:	2001      	movs	r0, #1
    2bc8:	4388      	bics	r0, r1
    2bca:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2bce:	20ff      	movs	r0, #255	; 0xff
    2bd0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2bd4:	e7ac      	b.n	2b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2bd6:	4807      	ldr	r0, [pc, #28]	; (2bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2bd8:	2800      	cmp	r0, #0
    2bda:	bf18      	it	ne
    2bdc:	f3af 8000 	nopne.w
    2be0:	b662      	cpsie	i
    2be2:	e7b0      	b.n	2b46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2be4:	e000ed04 	.word	0xe000ed04
    2be8:	20001080 	.word	0x20001080
    2bec:	00000000 	.word	0x00000000
    2bf0:	20000d00 	.word	0x20000d00
    2bf4:	00000000 	.word	0x00000000
    2bf8:	20001000 	.word	0x20001000
    2bfc:	00000000 	.word	0x00000000
    2c00:	20000018 	.word	0x20000018

00002c04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2c04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c08:	48a4      	ldr	r0, [pc, #656]	; (2e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>)
    2c0a:	b086      	sub	sp, #24
    2c0c:	6800      	ldr	r0, [r0, #0]
    2c0e:	05c0      	lsls	r0, r0, #23
    2c10:	0dc0      	lsrs	r0, r0, #23
    2c12:	d011      	beq.n	2c38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2c14:	3810      	subs	r0, #16
    2c16:	b240      	sxtb	r0, r0
    2c18:	2800      	cmp	r0, #0
    2c1a:	bfb8      	it	lt
    2c1c:	f000 000f 	andlt.w	r0, r0, #15
    2c20:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2c24:	bfac      	ite	ge
    2c26:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2c2a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2c2e:	0940      	lsrs	r0, r0, #5
    2c30:	bf08      	it	eq
    2c32:	f04f 0901 	moveq.w	r9, #1
    2c36:	d001      	beq.n	2c3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2c38:	f04f 0900 	mov.w	r9, #0
    2c3c:	9806      	ldr	r0, [sp, #24]
    2c3e:	7800      	ldrb	r0, [r0, #0]
    2c40:	2800      	cmp	r0, #0
    2c42:	bf1e      	ittt	ne
    2c44:	2000      	movne	r0, #0
    2c46:	b007      	addne	sp, #28
    2c48:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c4c:	f04f 0b00 	mov.w	fp, #0
    2c50:	4d93      	ldr	r5, [pc, #588]	; (2ea0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2c52:	4c94      	ldr	r4, [pc, #592]	; (2ea4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    2c54:	46da      	mov	sl, fp
    2c56:	b125      	cbz	r5, 2c62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    2c58:	2100      	movs	r1, #0
    2c5a:	f240 6025 	movw	r0, #1573	; 0x625
    2c5e:	f3af 8000 	nop.w
    2c62:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2c66:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2c6a:	f04f 0800 	mov.w	r8, #0
    2c6e:	b125      	cbz	r5, 2c7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2c70:	2100      	movs	r1, #0
    2c72:	f240 602a 	movw	r0, #1578	; 0x62a
    2c76:	f3af 8000 	nop.w
    2c7a:	f1b9 0f00 	cmp.w	r9, #0
    2c7e:	d11d      	bne.n	2cbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    2c80:	4637      	mov	r7, r6
    2c82:	2001      	movs	r0, #1
    2c84:	ea20 0607 	bic.w	r6, r0, r7
    2c88:	4887      	ldr	r0, [pc, #540]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2c8a:	2240      	movs	r2, #64	; 0x40
    2c8c:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2c90:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2c94:	f00a f83f 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c98:	b125      	cbz	r5, 2ca4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    2c9a:	2100      	movs	r1, #0
    2c9c:	f240 509a 	movw	r0, #1434	; 0x59a
    2ca0:	f3af 8000 	nop.w
    2ca4:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2ca8:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2cac:	6a09      	ldr	r1, [r1, #32]
    2cae:	6201      	str	r1, [r0, #32]
    2cb0:	b125      	cbz	r5, 2cbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    2cb2:	2100      	movs	r1, #0
    2cb4:	f240 509e 	movw	r0, #1438	; 0x59e
    2cb8:	f3af 8000 	nop.w
    2cbc:	b125      	cbz	r5, 2cc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2cbe:	2100      	movs	r1, #0
    2cc0:	f240 6032 	movw	r0, #1586	; 0x632
    2cc4:	f3af 8000 	nop.w
    2cc8:	f000 feca 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2ccc:	4607      	mov	r7, r0
    2cce:	4633      	mov	r3, r6
    2cd0:	466a      	mov	r2, sp
    2cd2:	9906      	ldr	r1, [sp, #24]
    2cd4:	f7ff f8c4 	bl	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    2cd8:	b125      	cbz	r5, 2ce4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    2cda:	2100      	movs	r1, #0
    2cdc:	f44f 60c7 	mov.w	r0, #1592	; 0x638
    2ce0:	f3af 8000 	nop.w
    2ce4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ce8:	2820      	cmp	r0, #32
    2cea:	d014      	beq.n	2d16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    2cec:	6920      	ldr	r0, [r4, #16]
    2cee:	9900      	ldr	r1, [sp, #0]
    2cf0:	1a09      	subs	r1, r1, r0
    2cf2:	0209      	lsls	r1, r1, #8
    2cf4:	17ca      	asrs	r2, r1, #31
    2cf6:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2cfa:	1209      	asrs	r1, r1, #8
    2cfc:	d50b      	bpl.n	2d16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    2cfe:	e9dd 1200 	ldrd	r1, r2, [sp]
    2d02:	1a51      	subs	r1, r2, r1
    2d04:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2d08:	4408      	add	r0, r1
    2d0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d0e:	e9cd 2000 	strd	r2, r0, [sp]
    2d12:	f04f 0801 	mov.w	r8, #1
    2d16:	b14d      	cbz	r5, 2d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x128>
    2d18:	2100      	movs	r1, #0
    2d1a:	f240 6042 	movw	r0, #1602	; 0x642
    2d1e:	f3af 8000 	nop.w
    2d22:	2100      	movs	r1, #0
    2d24:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    2d28:	f3af 8000 	nop.w
    2d2c:	9800      	ldr	r0, [sp, #0]
    2d2e:	9901      	ldr	r1, [sp, #4]
    2d30:	1bc0      	subs	r0, r0, r7
    2d32:	1bc9      	subs	r1, r1, r7
    2d34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d38:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2d40:	bf98      	it	ls
    2d42:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2d46:	d803      	bhi.n	2d50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14c>
    2d48:	f1b9 0f00 	cmp.w	r9, #0
    2d4c:	d10c      	bne.n	2d68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    2d4e:	e003      	b.n	2d58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x154>
    2d50:	f1b9 0f00 	cmp.w	r9, #0
    2d54:	d038      	beq.n	2dc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    2d56:	e094      	b.n	2e82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2d58:	4633      	mov	r3, r6
    2d5a:	463a      	mov	r2, r7
    2d5c:	4669      	mov	r1, sp
    2d5e:	4853      	ldr	r0, [pc, #332]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2d60:	f7fe fc1c 	bl	159c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2d64:	ea48 0800 	orr.w	r8, r8, r0
    2d68:	f1b8 0f00 	cmp.w	r8, #0
    2d6c:	d022      	beq.n	2db4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2d6e:	9800      	ldr	r0, [sp, #0]
    2d70:	f009 fe63 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d74:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2d78:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d7c:	4b4c      	ldr	r3, [pc, #304]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2d7e:	4411      	add	r1, r2
    2d80:	1c49      	adds	r1, r1, #1
    2d82:	1842      	adds	r2, r0, r1
    2d84:	4298      	cmp	r0, r3
    2d86:	d841      	bhi.n	2e0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x208>
    2d88:	4848      	ldr	r0, [pc, #288]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2d8a:	4281      	cmp	r1, r0
    2d8c:	dc5a      	bgt.n	2e44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x240>
    2d8e:	4240      	negs	r0, r0
    2d90:	4281      	cmp	r1, r0
    2d92:	db5f      	blt.n	2e54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>
    2d94:	1c58      	adds	r0, r3, #1
    2d96:	4290      	cmp	r0, r2
    2d98:	bfdc      	itt	le
    2d9a:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2d9e:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2da2:	dd05      	ble.n	2db0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ac>
    2da4:	2a00      	cmp	r2, #0
    2da6:	bfbc      	itt	lt
    2da8:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2dac:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2db0:	9806      	ldr	r0, [sp, #24]
    2db2:	60c2      	str	r2, [r0, #12]
    2db4:	f04f 0b01 	mov.w	fp, #1
    2db8:	2d00      	cmp	r5, #0
    2dba:	d062      	beq.n	2e82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2dbc:	2100      	movs	r1, #0
    2dbe:	f240 605b 	movw	r0, #1627	; 0x65b
    2dc2:	f3af 8000 	nop.w
    2dc6:	e05c      	b.n	2e82 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2dc8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2dcc:	aa05      	add	r2, sp, #20
    2dce:	a904      	add	r1, sp, #16
    2dd0:	f000 fce4 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2dd4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2dd8:	2820      	cmp	r0, #32
    2dda:	d01c      	beq.n	2e16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    2ddc:	6920      	ldr	r0, [r4, #16]
    2dde:	1d40      	adds	r0, r0, #5
    2de0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2de4:	e9dd 2100 	ldrd	r2, r1, [sp]
    2de8:	1a89      	subs	r1, r1, r2
    2dea:	4401      	add	r1, r0
    2dec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2df0:	e9cd 0100 	strd	r0, r1, [sp]
    2df4:	f009 fe21 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2df8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2dfc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2e00:	4b2b      	ldr	r3, [pc, #172]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2e02:	4411      	add	r1, r2
    2e04:	1c4a      	adds	r2, r1, #1
    2e06:	1881      	adds	r1, r0, r2
    2e08:	4298      	cmp	r0, r3
    2e0a:	d918      	bls.n	2e3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23a>
    2e0c:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2e10:	2070      	movs	r0, #112	; 0x70
    2e12:	f001 fd05 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e16:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2e1a:	f107 0609 	add.w	r6, r7, #9
    2e1e:	b120      	cbz	r0, 2e2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x226>
    2e20:	f001 fc86 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e24:	2800      	cmp	r0, #0
    2e26:	bf08      	it	eq
    2e28:	3632      	addeq	r6, #50	; 0x32
    2e2a:	4822      	ldr	r0, [pc, #136]	; (2eb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2e2c:	9904      	ldr	r1, [sp, #16]
    2e2e:	7840      	ldrb	r0, [r0, #1]
    2e30:	4288      	cmp	r0, r1
    2e32:	bf84      	itt	hi
    2e34:	1a40      	subhi	r0, r0, r1
    2e36:	4406      	addhi	r6, r0
    2e38:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2e3c:	e7d2      	b.n	2de4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    2e3e:	481b      	ldr	r0, [pc, #108]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2e40:	4282      	cmp	r2, r0
    2e42:	dd04      	ble.n	2e4e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24a>
    2e44:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2e48:	2070      	movs	r0, #112	; 0x70
    2e4a:	f001 fce9 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e4e:	481a      	ldr	r0, [pc, #104]	; (2eb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2e50:	4282      	cmp	r2, r0
    2e52:	da04      	bge.n	2e5e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    2e54:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    2e58:	2070      	movs	r0, #112	; 0x70
    2e5a:	f001 fce1 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e5e:	4817      	ldr	r0, [pc, #92]	; (2ebc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2e60:	4288      	cmp	r0, r1
    2e62:	bfdc      	itt	le
    2e64:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2e68:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2e6c:	dd05      	ble.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x276>
    2e6e:	2900      	cmp	r1, #0
    2e70:	bfbc      	itt	lt
    2e72:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2e76:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2e7a:	9806      	ldr	r0, [sp, #24]
    2e7c:	f04f 0b01 	mov.w	fp, #1
    2e80:	60c1      	str	r1, [r0, #12]
    2e82:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2e86:	f88d 0010 	strb.w	r0, [sp, #16]
    2e8a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2e8e:	2800      	cmp	r0, #0
    2e90:	f47f aee1 	bne.w	2c56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2e94:	b007      	add	sp, #28
    2e96:	4658      	mov	r0, fp
    2e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e9c:	e000ed04 	.word	0xe000ed04
    2ea0:	00000000 	.word	0x00000000
    2ea4:	20001080 	.word	0x20001080
    2ea8:	20001000 	.word	0x20001000
    2eac:	0f424000 	.word	0x0f424000
    2eb0:	1e847fff 	.word	0x1e847fff
    2eb4:	20000020 	.word	0x20000020
    2eb8:	f0bdc000 	.word	0xf0bdc000
    2ebc:	1e848000 	.word	0x1e848000

00002ec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2ec0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec4:	4d8a      	ldr	r5, [pc, #552]	; (30f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2ec6:	b08c      	sub	sp, #48	; 0x30
    2ec8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ecc:	2000      	movs	r0, #0
    2ece:	4c89      	ldr	r4, [pc, #548]	; (30f4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2ed0:	2701      	movs	r7, #1
    2ed2:	4681      	mov	r9, r0
    2ed4:	f1a5 0880 	sub.w	r8, r5, #128	; 0x80
    2ed8:	9008      	str	r0, [sp, #32]
    2eda:	b124      	cbz	r4, 2ee6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26>
    2edc:	2100      	movs	r1, #0
    2ede:	f240 70b6 	movw	r0, #1974	; 0x7b6
    2ee2:	f3af 8000 	nop.w
    2ee6:	2f00      	cmp	r7, #0
    2ee8:	d039      	beq.n	2f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9e>
    2eea:	bf00      	nop
    2eec:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2ef0:	b124      	cbz	r4, 2efc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    2ef2:	2100      	movs	r1, #0
    2ef4:	f240 70bb 	movw	r0, #1979	; 0x7bb
    2ef8:	f3af 8000 	nop.w
    2efc:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2f00:	2001      	movs	r0, #1
    2f02:	ea20 060a 	bic.w	r6, r0, sl
    2f06:	eb08 1086 	add.w	r0, r8, r6, lsl #6
    2f0a:	eb08 118a 	add.w	r1, r8, sl, lsl #6
    2f0e:	4683      	mov	fp, r0
    2f10:	2240      	movs	r2, #64	; 0x40
    2f12:	f009 ff00 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f16:	b124      	cbz	r4, 2f22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x62>
    2f18:	2100      	movs	r1, #0
    2f1a:	f240 509a 	movw	r0, #1434	; 0x59a
    2f1e:	f3af 8000 	nop.w
    2f22:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2f26:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2f2a:	9000      	str	r0, [sp, #0]
    2f2c:	6a09      	ldr	r1, [r1, #32]
    2f2e:	6201      	str	r1, [r0, #32]
    2f30:	b124      	cbz	r4, 2f3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7c>
    2f32:	2100      	movs	r1, #0
    2f34:	f240 509e 	movw	r0, #1438	; 0x59e
    2f38:	f3af 8000 	nop.w
    2f3c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f40:	f88d 0008 	strb.w	r0, [sp, #8]
    2f44:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f48:	b180      	cbz	r0, 2f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xac>
    2f4a:	2c00      	cmp	r4, #0
    2f4c:	bf1c      	itt	ne
    2f4e:	2100      	movne	r1, #0
    2f50:	f240 70c1 	movwne	r0, #1985	; 0x7c1
    2f54:	d0c1      	beq.n	2eda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    2f56:	bf00      	nop
    2f58:	f3af 8000 	nop.w
    2f5c:	e7bd      	b.n	2eda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    2f5e:	4866      	ldr	r0, [pc, #408]	; (30f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    2f60:	2800      	cmp	r0, #0
    2f62:	bf18      	it	ne
    2f64:	f3af 8000 	nopne.w
    2f68:	b662      	cpsie	i
    2f6a:	e7bf      	b.n	2eec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2f6c:	b124      	cbz	r4, 2f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb8>
    2f6e:	2100      	movs	r1, #0
    2f70:	f240 70c5 	movw	r0, #1989	; 0x7c5
    2f74:	f3af 8000 	nop.w
    2f78:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f7a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2f7e:	2803      	cmp	r0, #3
    2f80:	d178      	bne.n	3074 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b4>
    2f82:	f8dd a000 	ldr.w	sl, [sp]
    2f86:	f8cd a014 	str.w	sl, [sp, #20]
    2f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f8c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2f90:	4288      	cmp	r0, r1
    2f92:	bf14      	ite	ne
    2f94:	f04f 0b00 	movne.w	fp, #0
    2f98:	f04f 0b01 	moveq.w	fp, #1
    2f9c:	f10a 0c20 	add.w	ip, sl, #32
    2fa0:	4686      	mov	lr, r0
    2fa2:	2220      	movs	r2, #32
    2fa4:	eb08 1386 	add.w	r3, r8, r6, lsl #6
    2fa8:	e003      	b.n	2fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf2>
    2faa:	4602      	mov	r2, r0
    2fac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2fb0:	7840      	ldrb	r0, [r0, #1]
    2fb2:	4288      	cmp	r0, r1
    2fb4:	d002      	beq.n	2fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    2fb6:	2820      	cmp	r0, #32
    2fb8:	d00a      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    2fba:	e7f6      	b.n	2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xea>
    2fbc:	2820      	cmp	r0, #32
    2fbe:	d007      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    2fc0:	4586      	cmp	lr, r0
    2fc2:	d107      	bne.n	2fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fc4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2fc8:	7840      	ldrb	r0, [r0, #1]
    2fca:	f88c 0000 	strb.w	r0, [ip]
    2fce:	e007      	b.n	2fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x120>
    2fd0:	4648      	mov	r0, r9
    2fd2:	e00c      	b.n	2fee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12e>
    2fd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2fd8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2fdc:	7840      	ldrb	r0, [r0, #1]
    2fde:	7048      	strb	r0, [r1, #1]
    2fe0:	b124      	cbz	r4, 2fec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12c>
    2fe2:	2100      	movs	r1, #0
    2fe4:	f240 5004 	movw	r0, #1284	; 0x504
    2fe8:	f3af 8000 	nop.w
    2fec:	2001      	movs	r0, #1
    2fee:	ea10 0f0b 	tst.w	r0, fp
    2ff2:	bf1c      	itt	ne
    2ff4:	21ff      	movne	r1, #255	; 0xff
    2ff6:	f88a 1023 	strbne.w	r1, [sl, #35]	; 0x23
    2ffa:	2800      	cmp	r0, #0
    2ffc:	d058      	beq.n	30b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    2ffe:	b124      	cbz	r4, 300a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14a>
    3000:	2100      	movs	r1, #0
    3002:	f240 70ca 	movw	r0, #1994	; 0x7ca
    3006:	f3af 8000 	nop.w
    300a:	4632      	mov	r2, r6
    300c:	2001      	movs	r0, #1
    300e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3010:	f7ff f8e2 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    3014:	9805      	ldr	r0, [sp, #20]
    3016:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    301a:	f88d 0008 	strb.w	r0, [sp, #8]
    301e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3022:	2800      	cmp	r0, #0
    3024:	bf14      	ite	ne
    3026:	f04f 0a01 	movne.w	sl, #1
    302a:	f04f 0a00 	moveq.w	sl, #0
    302e:	b124      	cbz	r4, 303a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    3030:	2100      	movs	r1, #0
    3032:	f240 70d5 	movw	r0, #2005	; 0x7d5
    3036:	f3af 8000 	nop.w
    303a:	4830      	ldr	r0, [pc, #192]	; (30fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x23c>)
    303c:	2800      	cmp	r0, #0
    303e:	bf18      	it	ne
    3040:	f3af 8000 	nopne.w
    3044:	f3ef 8710 	mrs	r7, PRIMASK
    3048:	b672      	cpsid	i
    304a:	b124      	cbz	r4, 3056 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x196>
    304c:	2100      	movs	r1, #0
    304e:	f240 70da 	movw	r0, #2010	; 0x7da
    3052:	f3af 8000 	nop.w
    3056:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    305a:	f88d 0008 	strb.w	r0, [sp, #8]
    305e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3062:	b140      	cbz	r0, 3076 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b6>
    3064:	2c00      	cmp	r4, #0
    3066:	bf1c      	itt	ne
    3068:	2100      	movne	r1, #0
    306a:	f240 70de 	movwne	r0, #2014	; 0x7de
    306e:	f43f af34 	beq.w	2eda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    3072:	e771      	b.n	2f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    3074:	e01c      	b.n	30b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    3076:	f1ba 0f00 	cmp.w	sl, #0
    307a:	d008      	beq.n	308e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    307c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3080:	2820      	cmp	r0, #32
    3082:	d104      	bne.n	308e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    3084:	4631      	mov	r1, r6
    3086:	2002      	movs	r0, #2
    3088:	f7ff f8d6 	bl	2238 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ec>
    308c:	b308      	cbz	r0, 30d2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x212>
    308e:	b124      	cbz	r4, 309a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1da>
    3090:	2100      	movs	r1, #0
    3092:	f240 70f2 	movw	r0, #2034	; 0x7f2
    3096:	f3af 8000 	nop.w
    309a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    309e:	2001      	movs	r0, #1
    30a0:	4388      	bics	r0, r1
    30a2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    30a6:	20ff      	movs	r0, #255	; 0xff
    30a8:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    30ac:	2001      	movs	r0, #1
    30ae:	9008      	str	r0, [sp, #32]
    30b0:	b124      	cbz	r4, 30bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    30b2:	2100      	movs	r1, #0
    30b4:	f240 70fb 	movw	r0, #2043	; 0x7fb
    30b8:	f3af 8000 	nop.w
    30bc:	b18f      	cbz	r7, 30e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x222>
    30be:	b124      	cbz	r4, 30ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    30c0:	2100      	movs	r1, #0
    30c2:	f240 70ff 	movw	r0, #2047	; 0x7ff
    30c6:	f3af 8000 	nop.w
    30ca:	9808      	ldr	r0, [sp, #32]
    30cc:	b00d      	add	sp, #52	; 0x34
    30ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30d2:	2c00      	cmp	r4, #0
    30d4:	d0f2      	beq.n	30bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    30d6:	2100      	movs	r1, #0
    30d8:	f240 70ed 	movw	r0, #2029	; 0x7ed
    30dc:	f3af 8000 	nop.w
    30e0:	e7e7      	b.n	30b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    30e2:	4805      	ldr	r0, [pc, #20]	; (30f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    30e4:	2800      	cmp	r0, #0
    30e6:	bf18      	it	ne
    30e8:	f3af 8000 	nopne.w
    30ec:	b662      	cpsie	i
    30ee:	e7e6      	b.n	30be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    30f0:	20001080 	.word	0x20001080
	...

00003100 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    3100:	2820      	cmp	r0, #32
    3102:	bf24      	itt	cs
    3104:	2000      	movcs	r0, #0
    3106:	4770      	bxcs	lr
    3108:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    310c:	4b03      	ldr	r3, [pc, #12]	; (311c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    310e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    3112:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3116:	6042      	str	r2, [r0, #4]
    3118:	2001      	movs	r0, #1
    311a:	4770      	bx	lr
    311c:	20000d00 	.word	0x20000d00

00003120 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    3120:	b510      	push	{r4, lr}
    3122:	2820      	cmp	r0, #32
    3124:	d211      	bcs.n	314a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3126:	490e      	ldr	r1, [pc, #56]	; (3160 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3128:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    312c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3130:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3134:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3138:	b13b      	cbz	r3, 314a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    313a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    313e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    3142:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    3146:	2a01      	cmp	r2, #1
    3148:	d001      	beq.n	314e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    314a:	2000      	movs	r0, #0
    314c:	bd10      	pop	{r4, pc}
    314e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3152:	4601      	mov	r1, r0
    3154:	2000      	movs	r0, #0
    3156:	f7ff f83f 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    315a:	2001      	movs	r0, #1
    315c:	bd10      	pop	{r4, pc}
    315e:	0000      	.short	0x0000
    3160:	20001080 	.word	0x20001080

00003164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3168:	4e81      	ldr	r6, [pc, #516]	; (3370 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    316a:	4680      	mov	r8, r0
    316c:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3170:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3174:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3178:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    317c:	2800      	cmp	r0, #0
    317e:	d068      	beq.n	3252 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3180:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3184:	4d7b      	ldr	r5, [pc, #492]	; (3374 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3186:	b125      	cbz	r5, 3192 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3188:	2100      	movs	r1, #0
    318a:	f640 3092 	movw	r0, #2962	; 0xb92
    318e:	f3af 8000 	nop.w
    3192:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    3196:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    319a:	2801      	cmp	r0, #1
    319c:	d018      	beq.n	31d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    319e:	b2c0      	uxtb	r0, r0
    31a0:	2804      	cmp	r0, #4
    31a2:	bf1c      	itt	ne
    31a4:	2805      	cmpne	r0, #5
    31a6:	2806      	cmpne	r0, #6
    31a8:	d058      	beq.n	325c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    31aa:	b12d      	cbz	r5, 31b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    31ac:	f04f 0100 	mov.w	r1, #0
    31b0:	f640 309e 	movw	r0, #2974	; 0xb9e
    31b4:	f3af 8000 	nop.w
    31b8:	f001 fc58 	bl	4a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    31bc:	b125      	cbz	r5, 31c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    31be:	2100      	movs	r1, #0
    31c0:	f640 30a2 	movw	r0, #2978	; 0xba2
    31c4:	f3af 8000 	nop.w
    31c8:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    31cc:	2801      	cmp	r0, #1
    31ce:	d1e6      	bne.n	319e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    31d0:	2401      	movs	r4, #1
    31d2:	b125      	cbz	r5, 31de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    31d4:	2100      	movs	r1, #0
    31d6:	f640 30a9 	movw	r0, #2985	; 0xba9
    31da:	f3af 8000 	nop.w
    31de:	2c00      	cmp	r4, #0
    31e0:	d042      	beq.n	3268 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    31e2:	2000      	movs	r0, #0
    31e4:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    31e8:	b125      	cbz	r5, 31f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    31ea:	2100      	movs	r1, #0
    31ec:	f640 30ae 	movw	r0, #2990	; 0xbae
    31f0:	f3af 8000 	nop.w
    31f4:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    31f8:	2001      	movs	r0, #1
    31fa:	ea20 090b 	bic.w	r9, r0, fp
    31fe:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    3202:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3206:	2240      	movs	r2, #64	; 0x40
    3208:	f009 fd85 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    320c:	b125      	cbz	r5, 3218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    320e:	2100      	movs	r1, #0
    3210:	f240 509a 	movw	r0, #1434	; 0x59a
    3214:	f3af 8000 	nop.w
    3218:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    321c:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    3220:	6a00      	ldr	r0, [r0, #32]
    3222:	f8ca 0020 	str.w	r0, [sl, #32]
    3226:	b125      	cbz	r5, 3232 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    3228:	2100      	movs	r1, #0
    322a:	f240 509e 	movw	r0, #1438	; 0x59e
    322e:	f3af 8000 	nop.w
    3232:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3236:	f88d 0000 	strb.w	r0, [sp]
    323a:	f89d 0000 	ldrb.w	r0, [sp]
    323e:	b1d0      	cbz	r0, 3276 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3240:	2d00      	cmp	r5, #0
    3242:	bf1c      	itt	ne
    3244:	2100      	movne	r1, #0
    3246:	f640 30b4 	movwne	r0, #2996	; 0xbb4
    324a:	d0c2      	beq.n	31d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    324c:	f3af 8000 	nop.w
    3250:	e7bf      	b.n	31d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3252:	f640 3189 	movw	r1, #2953	; 0xb89
    3256:	2070      	movs	r0, #112	; 0x70
    3258:	f001 fae2 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    325c:	464a      	mov	r2, r9
    325e:	4641      	mov	r1, r8
    3260:	2001      	movs	r0, #1
    3262:	f7fe ffb9 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    3266:	e7a9      	b.n	31bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3268:	4843      	ldr	r0, [pc, #268]	; (3378 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    326a:	2800      	cmp	r0, #0
    326c:	bf18      	it	ne
    326e:	f3af 8000 	nopne.w
    3272:	b662      	cpsie	i
    3274:	e7b5      	b.n	31e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    3276:	b125      	cbz	r5, 3282 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    3278:	2100      	movs	r1, #0
    327a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    327e:	f3af 8000 	nop.w
    3282:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    3286:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    328a:	4640      	mov	r0, r8
    328c:	461c      	mov	r4, r3
    328e:	f04f 0b20 	mov.w	fp, #32
    3292:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    3296:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    329a:	e004      	b.n	32a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x142>
    329c:	46a3      	mov	fp, r4
    329e:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    32a2:	f89c 4001 	ldrb.w	r4, [ip, #1]
    32a6:	4284      	cmp	r4, r0
    32a8:	d002      	beq.n	32b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14c>
    32aa:	2c20      	cmp	r4, #32
    32ac:	d02b      	beq.n	3306 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    32ae:	e7f5      	b.n	329c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x138>
    32b0:	2c20      	cmp	r4, #32
    32b2:	d028      	beq.n	3306 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    32b4:	42a3      	cmp	r3, r4
    32b6:	d104      	bne.n	32c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    32b8:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    32bc:	7840      	ldrb	r0, [r0, #1]
    32be:	7008      	strb	r0, [r1, #0]
    32c0:	e005      	b.n	32ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x16a>
    32c2:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    32c6:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    32ca:	7840      	ldrb	r0, [r0, #1]
    32cc:	7048      	strb	r0, [r1, #1]
    32ce:	f1ba 0f00 	cmp.w	sl, #0
    32d2:	d011      	beq.n	32f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    32d4:	b125      	cbz	r5, 32e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    32d6:	2100      	movs	r1, #0
    32d8:	f240 40fc 	movw	r0, #1276	; 0x4fc
    32dc:	f3af 8000 	nop.w
    32e0:	f89a 0000 	ldrb.w	r0, [sl]
    32e4:	42a0      	cmp	r0, r4
    32e6:	d107      	bne.n	32f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    32e8:	b125      	cbz	r5, 32f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32ea:	2100      	movs	r1, #0
    32ec:	f240 40ff 	movw	r0, #1279	; 0x4ff
    32f0:	f3af 8000 	nop.w
    32f4:	f88a b000 	strb.w	fp, [sl]
    32f8:	b15d      	cbz	r5, 3312 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    32fa:	2100      	movs	r1, #0
    32fc:	f240 5004 	movw	r0, #1284	; 0x504
    3300:	f3af 8000 	nop.w
    3304:	e000      	b.n	3308 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a4>
    3306:	b125      	cbz	r5, 3312 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    3308:	2100      	movs	r1, #0
    330a:	f640 30bc 	movw	r0, #3004	; 0xbbc
    330e:	f3af 8000 	nop.w
    3312:	481a      	ldr	r0, [pc, #104]	; (337c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x218>)
    3314:	2800      	cmp	r0, #0
    3316:	bf18      	it	ne
    3318:	f3af 8000 	nopne.w
    331c:	f3ef 8410 	mrs	r4, PRIMASK
    3320:	b672      	cpsid	i
    3322:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3326:	f88d 0000 	strb.w	r0, [sp]
    332a:	f89d 0000 	ldrb.w	r0, [sp]
    332e:	b138      	cbz	r0, 3340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1dc>
    3330:	2d00      	cmp	r5, #0
    3332:	bf1c      	itt	ne
    3334:	2100      	movne	r1, #0
    3336:	f640 30c2 	movwne	r0, #3010	; 0xbc2
    333a:	f43f af4a 	beq.w	31d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    333e:	e785      	b.n	324c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3340:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3344:	20ff      	movs	r0, #255	; 0xff
    3346:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    334a:	b154      	cbz	r4, 3362 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fe>
    334c:	2d00      	cmp	r5, #0
    334e:	bf08      	it	eq
    3350:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3354:	2100      	movs	r1, #0
    3356:	f640 30cf 	movw	r0, #3023	; 0xbcf
    335a:	f3af 8000 	nop.w
    335e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3362:	4805      	ldr	r0, [pc, #20]	; (3378 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    3364:	2800      	cmp	r0, #0
    3366:	bf18      	it	ne
    3368:	f3af 8000 	nopne.w
    336c:	b662      	cpsie	i
    336e:	e7ed      	b.n	334c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e8>
    3370:	20001080 	.word	0x20001080
	...

00003380 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3380:	b570      	push	{r4, r5, r6, lr}
    3382:	460d      	mov	r5, r1
    3384:	4606      	mov	r6, r0
    3386:	f001 f9c1 	bl	470c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    338a:	480f      	ldr	r0, [pc, #60]	; (33c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    338c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3390:	2400      	movs	r4, #0
    3392:	3880      	subs	r0, #128	; 0x80
    3394:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3398:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    339c:	b129      	cbz	r1, 33aa <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    339e:	1c61      	adds	r1, r4, #1
    33a0:	b2cc      	uxtb	r4, r1
    33a2:	2c20      	cmp	r4, #32
    33a4:	d3f8      	bcc.n	3398 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    33a6:	2020      	movs	r0, #32
    33a8:	bd70      	pop	{r4, r5, r6, pc}
    33aa:	4808      	ldr	r0, [pc, #32]	; (33cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    33ac:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    33b0:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    33b4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    33b8:	4621      	mov	r1, r4
    33ba:	6045      	str	r5, [r0, #4]
    33bc:	2001      	movs	r0, #1
    33be:	f7fe ff0b 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    33c2:	4620      	mov	r0, r4
    33c4:	bd70      	pop	{r4, r5, r6, pc}
    33c6:	0000      	.short	0x0000
    33c8:	20001080 	.word	0x20001080
    33cc:	20000d00 	.word	0x20000d00

000033d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    33d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33d4:	b082      	sub	sp, #8
    33d6:	f000 fb43 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    33da:	4605      	mov	r5, r0
    33dc:	f000 fe12 	bl	4004 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    33e0:	4c66      	ldr	r4, [pc, #408]	; (357c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    33e2:	68a0      	ldr	r0, [r4, #8]
    33e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    33e8:	bf1c      	itt	ne
    33ea:	f04f 30ff 	movne.w	r0, #4294967295
    33ee:	60a0      	strne	r0, [r4, #8]
    33f0:	7fa0      	ldrb	r0, [r4, #30]
    33f2:	4f63      	ldr	r7, [pc, #396]	; (3580 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    33f4:	b990      	cbnz	r0, 341c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4c>
    33f6:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
    33fa:	1a40      	subs	r0, r0, r1
    33fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3400:	f44f 710c 	mov.w	r1, #560	; 0x230
    3404:	f009 fb46 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3408:	6921      	ldr	r1, [r4, #16]
    340a:	4408      	add	r0, r1
    340c:	1a28      	subs	r0, r5, r0
    340e:	0200      	lsls	r0, r0, #8
    3410:	17c1      	asrs	r1, r0, #31
    3412:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3416:	1200      	asrs	r0, r0, #8
    3418:	0fc0      	lsrs	r0, r0, #31
    341a:	d013      	beq.n	3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    341c:	7e60      	ldrb	r0, [r4, #25]
    341e:	b328      	cbz	r0, 346c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    3420:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3424:	f88d 0000 	strb.w	r0, [sp]
    3428:	f89d 0000 	ldrb.w	r0, [sp]
    342c:	b1f0      	cbz	r0, 346c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    342e:	f000 fc27 	bl	3c80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3432:	bf00      	nop
    3434:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3438:	b1f0      	cbz	r0, 3478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    343a:	f240 4111 	movw	r1, #1041	; 0x411
    343e:	2070      	movs	r0, #112	; 0x70
    3440:	f001 f9ee 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3444:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3448:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    344c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3450:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    3454:	6840      	ldr	r0, [r0, #4]
    3456:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    345a:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
    345e:	2108      	movs	r1, #8
    3460:	4790      	blx	r2
    3462:	f240 31f9 	movw	r1, #1017	; 0x3f9
    3466:	2070      	movs	r0, #112	; 0x70
    3468:	f001 f9da 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    346c:	1ce8      	adds	r0, r5, #3
    346e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3472:	f000 fafb 	bl	3a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3476:	e7dd      	b.n	3434 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    3478:	2001      	movs	r0, #1
    347a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    347e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3482:	2820      	cmp	r0, #32
    3484:	d024      	beq.n	34d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    3486:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    348a:	2020      	movs	r0, #32
    348c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3490:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    3494:	2600      	movs	r6, #0
    3496:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    349a:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    349e:	4839      	ldr	r0, [pc, #228]	; (3584 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>)
    34a0:	6026      	str	r6, [r4, #0]
    34a2:	7800      	ldrb	r0, [r0, #0]
    34a4:	2802      	cmp	r0, #2
    34a6:	bf16      	itet	ne
    34a8:	2803      	cmpne	r0, #3
    34aa:	2001      	moveq	r0, #1
    34ac:	2000      	movne	r0, #0
    34ae:	7720      	strb	r0, [r4, #28]
    34b0:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
    34b4:	eb04 0a89 	add.w	sl, r4, r9, lsl #2
    34b8:	f89a 0020 	ldrb.w	r0, [sl, #32]
    34bc:	2820      	cmp	r0, #32
    34be:	d02f      	beq.n	3520 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    34c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    34c4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    34c8:	7d81      	ldrb	r1, [r0, #22]
    34ca:	2901      	cmp	r1, #1
    34cc:	d005      	beq.n	34da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    34ce:	e027      	b.n	3520 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    34d0:	f240 4114 	movw	r1, #1044	; 0x414
    34d4:	2070      	movs	r0, #112	; 0x70
    34d6:	f001 f9a3 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34da:	462f      	mov	r7, r5
    34dc:	f100 0508 	add.w	r5, r0, #8
    34e0:	8a40      	ldrh	r0, [r0, #18]
    34e2:	aa01      	add	r2, sp, #4
    34e4:	4669      	mov	r1, sp
    34e6:	f000 f959 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    34ea:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    34ee:	2820      	cmp	r0, #32
    34f0:	d004      	beq.n	34fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    34f2:	6920      	ldr	r0, [r4, #16]
    34f4:	1d40      	adds	r0, r0, #5
    34f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34fa:	e009      	b.n	3510 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>
    34fc:	8968      	ldrh	r0, [r5, #10]
    34fe:	3709      	adds	r7, #9
    3500:	b120      	cbz	r0, 350c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>
    3502:	f001 f915 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3506:	2800      	cmp	r0, #0
    3508:	bf08      	it	eq
    350a:	3732      	addeq	r7, #50	; 0x32
    350c:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    3510:	e9d5 2100 	ldrd	r2, r1, [r5]
    3514:	1a89      	subs	r1, r1, r2
    3516:	6028      	str	r0, [r5, #0]
    3518:	4408      	add	r0, r1
    351a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    351e:	6068      	str	r0, [r5, #4]
    3520:	4649      	mov	r1, r9
    3522:	2001      	movs	r0, #1
    3524:	f7fe fe88 	bl	2238 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ec>
    3528:	2800      	cmp	r0, #0
    352a:	d0f9      	beq.n	3520 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    352c:	4816      	ldr	r0, [pc, #88]	; (3588 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    352e:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    3532:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3536:	2802      	cmp	r0, #2
    3538:	d104      	bne.n	3544 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    353a:	464a      	mov	r2, r9
    353c:	4641      	mov	r1, r8
    353e:	2006      	movs	r0, #6
    3540:	f7fe fe4a 	bl	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    3544:	20ff      	movs	r0, #255	; 0xff
    3546:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    354a:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    354e:	4d0f      	ldr	r5, [pc, #60]	; (358c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    3550:	2820      	cmp	r0, #32
    3552:	bf1c      	itt	ne
    3554:	7868      	ldrbne	r0, [r5, #1]
    3556:	f001 fa33 	blne	49c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    355a:	7f20      	ldrb	r0, [r4, #28]
    355c:	b118      	cbz	r0, 3566 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    355e:	f000 fd9b 	bl	4098 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3562:	7726      	strb	r6, [r4, #28]
    3564:	7766      	strb	r6, [r4, #29]
    3566:	6869      	ldr	r1, [r5, #4]
    3568:	2900      	cmp	r1, #0
    356a:	bf04      	itt	eq
    356c:	b002      	addeq	sp, #8
    356e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3572:	2064      	movs	r0, #100	; 0x64
    3574:	b002      	add	sp, #8
    3576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    357a:	4708      	bx	r1
    357c:	20001080 	.word	0x20001080
    3580:	20000d00 	.word	0x20000d00
    3584:	20000020 	.word	0x20000020
    3588:	20001000 	.word	0x20001000
    358c:	20000018 	.word	0x20000018

00003590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3590:	b510      	push	{r4, lr}
    3592:	4c32      	ldr	r4, [pc, #200]	; (365c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3594:	b082      	sub	sp, #8
    3596:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    359a:	2920      	cmp	r1, #32
    359c:	d008      	beq.n	35b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    359e:	68a1      	ldr	r1, [r4, #8]
    35a0:	f1b1 3fff 	cmp.w	r1, #4294967295
    35a4:	d009      	beq.n	35ba <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    35a6:	f640 21ba 	movw	r1, #2746	; 0xaba
    35aa:	2070      	movs	r0, #112	; 0x70
    35ac:	f001 f938 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35b0:	f640 21b9 	movw	r1, #2745	; 0xab9
    35b4:	2070      	movs	r0, #112	; 0x70
    35b6:	f001 f933 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35ba:	6862      	ldr	r2, [r4, #4]
    35bc:	4601      	mov	r1, r0
    35be:	4b28      	ldr	r3, [pc, #160]	; (3660 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    35c0:	1850      	adds	r0, r2, r1
    35c2:	429a      	cmp	r2, r3
    35c4:	d904      	bls.n	35d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    35c6:	f240 51d6 	movw	r1, #1494	; 0x5d6
    35ca:	2070      	movs	r0, #112	; 0x70
    35cc:	f001 f928 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35d0:	4a24      	ldr	r2, [pc, #144]	; (3664 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    35d2:	4291      	cmp	r1, r2
    35d4:	dd04      	ble.n	35e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    35d6:	f240 51d7 	movw	r1, #1495	; 0x5d7
    35da:	2070      	movs	r0, #112	; 0x70
    35dc:	f001 f920 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35e0:	4a21      	ldr	r2, [pc, #132]	; (3668 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    35e2:	4291      	cmp	r1, r2
    35e4:	da04      	bge.n	35f0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    35e6:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    35ea:	2070      	movs	r0, #112	; 0x70
    35ec:	f001 f918 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35f0:	491e      	ldr	r1, [pc, #120]	; (366c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    35f2:	4281      	cmp	r1, r0
    35f4:	bfdc      	itt	le
    35f6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    35fa:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    35fe:	dd05      	ble.n	360c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    3600:	2800      	cmp	r0, #0
    3602:	bfbc      	itt	lt
    3604:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3608:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    360c:	aa01      	add	r2, sp, #4
    360e:	4669      	mov	r1, sp
    3610:	f000 f8c4 	bl	379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3614:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3618:	280f      	cmp	r0, #15
    361a:	bf8c      	ite	hi
    361c:	2001      	movhi	r0, #1
    361e:	2000      	movls	r0, #0
    3620:	9900      	ldr	r1, [sp, #0]
    3622:	4408      	add	r0, r1
    3624:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3628:	60a1      	str	r1, [r4, #8]
    362a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    362e:	f88d 0000 	strb.w	r0, [sp]
    3632:	f89d 0000 	ldrb.w	r0, [sp]
    3636:	2800      	cmp	r0, #0
    3638:	bf04      	itt	eq
    363a:	b002      	addeq	sp, #8
    363c:	bd10      	popeq	{r4, pc}
    363e:	2301      	movs	r3, #1
    3640:	2203      	movs	r2, #3
    3642:	2005      	movs	r0, #5
    3644:	f000 fb9a 	bl	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3648:	2800      	cmp	r0, #0
    364a:	bf1c      	itt	ne
    364c:	b002      	addne	sp, #8
    364e:	bd10      	popne	{r4, pc}
    3650:	f640 21c2 	movw	r1, #2754	; 0xac2
    3654:	2070      	movs	r0, #112	; 0x70
    3656:	f001 f8e3 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    365a:	0000      	.short	0x0000
    365c:	20001080 	.word	0x20001080
    3660:	1e847fff 	.word	0x1e847fff
    3664:	0f424000 	.word	0x0f424000
    3668:	f0bdc000 	.word	0xf0bdc000
    366c:	1e848000 	.word	0x1e848000

00003670 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3670:	b570      	push	{r4, r5, r6, lr}
    3672:	4c1e      	ldr	r4, [pc, #120]	; (36ec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3674:	2120      	movs	r1, #32
    3676:	f884 1020 	strb.w	r1, [r4, #32]
    367a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    367e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3682:	2000      	movs	r0, #0
    3684:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3688:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    368c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3690:	1e42      	subs	r2, r0, #1
    3692:	60a2      	str	r2, [r4, #8]
    3694:	6020      	str	r0, [r4, #0]
    3696:	77a0      	strb	r0, [r4, #30]
    3698:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    369c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    36a0:	7720      	strb	r0, [r4, #28]
    36a2:	7760      	strb	r0, [r4, #29]
    36a4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    36a8:	4911      	ldr	r1, [pc, #68]	; (36f0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    36aa:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    36ae:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    36b2:	7008      	strb	r0, [r1, #0]
    36b4:	7048      	strb	r0, [r1, #1]
    36b6:	8048      	strh	r0, [r1, #2]
    36b8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    36bc:	2210      	movs	r2, #16
    36be:	7088      	strb	r0, [r1, #2]
    36c0:	f801 0f04 	strb.w	r0, [r1, #4]!
    36c4:	1e52      	subs	r2, r2, #1
    36c6:	d1fa      	bne.n	36be <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    36c8:	4d0a      	ldr	r5, [pc, #40]	; (36f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    36ca:	2601      	movs	r6, #1
    36cc:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    36d0:	20ff      	movs	r0, #255	; 0xff
    36d2:	7028      	strb	r0, [r5, #0]
    36d4:	4808      	ldr	r0, [pc, #32]	; (36f8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    36d6:	f001 f955 	bl	4984 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    36da:	7068      	strb	r0, [r5, #1]
    36dc:	f001 f9b0 	bl	4a40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    36e0:	60e8      	str	r0, [r5, #12]
    36e2:	f000 fd07 	bl	40f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    36e6:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    36ea:	bd70      	pop	{r4, r5, r6, pc}
    36ec:	20001080 	.word	0x20001080
    36f0:	20000020 	.word	0x20000020
    36f4:	20000018 	.word	0x20000018
    36f8:	00002095 	.word	0x00002095

000036fc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    36fc:	b570      	push	{r4, r5, r6, lr}
    36fe:	4604      	mov	r4, r0
    3700:	4615      	mov	r5, r2
    3702:	4608      	mov	r0, r1
    3704:	f009 f999 	bl	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3708:	4b14      	ldr	r3, [pc, #80]	; (375c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>)
    370a:	1b01      	subs	r1, r0, r4
    370c:	2200      	movs	r2, #0
    370e:	1acb      	subs	r3, r1, r3
    3710:	f172 0300 	sbcs.w	r3, r2, #0
    3714:	d318      	bcc.n	3748 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3716:	f8df c044 	ldr.w	ip, [pc, #68]	; 375c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>
    371a:	1a23      	subs	r3, r4, r0
    371c:	ebb3 0c0c 	subs.w	ip, r3, ip
    3720:	f172 0200 	sbcs.w	r2, r2, #0
    3724:	d310      	bcc.n	3748 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3726:	4a0e      	ldr	r2, [pc, #56]	; (3760 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>)
    3728:	428a      	cmp	r2, r1
    372a:	bf3e      	ittt	cc
    372c:	f5c4 2190 	rsbcc	r1, r4, #294912	; 0x48000
    3730:	f101 51f4 	addcc.w	r1, r1, #511705088	; 0x1e800000
    3734:	4401      	addcc	r1, r0
    3736:	d307      	bcc.n	3748 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3738:	429a      	cmp	r2, r3
    373a:	d209      	bcs.n	3750 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x54>
    373c:	f5c0 2090 	rsb	r0, r0, #294912	; 0x48000
    3740:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    3744:	4420      	add	r0, r4
    3746:	4241      	negs	r1, r0
    3748:	f101 000f 	add.w	r0, r1, #15
    374c:	1a28      	subs	r0, r5, r0
    374e:	bd70      	pop	{r4, r5, r6, pc}
    3750:	f640 21dd 	movw	r1, #2781	; 0xadd
    3754:	2070      	movs	r0, #112	; 0x70
    3756:	f001 f863 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    375a:	0000      	.short	0x0000
    375c:	0f424000 	.word	0x0f424000
    3760:	1e847fff 	.word	0x1e847fff

00003764 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3764:	0b41      	lsrs	r1, r0, #13
    3766:	f248 6237 	movw	r2, #34359	; 0x8637
    376a:	4351      	muls	r1, r2
    376c:	0c0a      	lsrs	r2, r1, #16
    376e:	4b09      	ldr	r3, [pc, #36]	; (3794 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3770:	0251      	lsls	r1, r2, #9
    3772:	fb02 0203 	mla	r2, r2, r3, r0
    3776:	4808      	ldr	r0, [pc, #32]	; (3798 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3778:	4350      	muls	r0, r2
    377a:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    377e:	306e      	adds	r0, #110	; 0x6e
    3780:	0d40      	lsrs	r0, r0, #21
    3782:	425b      	negs	r3, r3
    3784:	fb10 f303 	smulbb	r3, r0, r3
    3788:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    378c:	bf88      	it	hi
    378e:	1c49      	addhi	r1, r1, #1
    3790:	4408      	add	r0, r1
    3792:	4770      	bx	lr
    3794:	ffffc2f7 	.word	0xffffc2f7
    3798:	00010c6f 	.word	0x00010c6f

0000379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    379c:	0b43      	lsrs	r3, r0, #13
    379e:	f248 6c37 	movw	ip, #34359	; 0x8637
    37a2:	fb03 f30c 	mul.w	r3, r3, ip
    37a6:	b430      	push	{r4, r5}
    37a8:	0c1b      	lsrs	r3, r3, #16
    37aa:	f8df c044 	ldr.w	ip, [pc, #68]	; 37f0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    37ae:	025c      	lsls	r4, r3, #9
    37b0:	fb03 030c 	mla	r3, r3, ip, r0
    37b4:	480f      	ldr	r0, [pc, #60]	; (37f4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    37b6:	4358      	muls	r0, r3
    37b8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    37bc:	eb04 000c 	add.w	r0, r4, ip
    37c0:	f643 5409 	movw	r4, #15625	; 0x3d09
    37c4:	fb1c f404 	smulbb	r4, ip, r4
    37c8:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    37cc:	f643 5508 	movw	r5, #15624	; 0x3d08
    37d0:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    37d4:	442c      	add	r4, r5
    37d6:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    37da:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    37de:	bf84      	itt	hi
    37e0:	f04f 0c00 	movhi.w	ip, #0
    37e4:	1c40      	addhi	r0, r0, #1
    37e6:	6008      	str	r0, [r1, #0]
    37e8:	f882 c000 	strb.w	ip, [r2]
    37ec:	bc30      	pop	{r4, r5}
    37ee:	4770      	bx	lr
    37f0:	ffffc2f7 	.word	0xffffc2f7
    37f4:	00010c6f 	.word	0x00010c6f

000037f8 <MPSL_IRQ_RTC0_Handler>:
    37f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37fc:	4c38      	ldr	r4, [pc, #224]	; (38e0 <MPSL_IRQ_RTC0_Handler+0xe8>)
    37fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3802:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 38e4 <MPSL_IRQ_RTC0_Handler+0xec>
    3806:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    380a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    380e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3812:	f04f 0500 	mov.w	r5, #0
    3816:	d019      	beq.n	384c <MPSL_IRQ_RTC0_Handler+0x54>
    3818:	4833      	ldr	r0, [pc, #204]	; (38e8 <MPSL_IRQ_RTC0_Handler+0xf0>)
    381a:	6800      	ldr	r0, [r0, #0]
    381c:	b1b0      	cbz	r0, 384c <MPSL_IRQ_RTC0_Handler+0x54>
    381e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3822:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3826:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    382a:	f8d8 1000 	ldr.w	r1, [r8]
    382e:	1a40      	subs	r0, r0, r1
    3830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3834:	2802      	cmp	r0, #2
    3836:	d302      	bcc.n	383e <MPSL_IRQ_RTC0_Handler+0x46>
    3838:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    383c:	d906      	bls.n	384c <MPSL_IRQ_RTC0_Handler+0x54>
    383e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3842:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3846:	2004      	movs	r0, #4
    3848:	f7fe ff1c 	bl	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    384c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3850:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3854:	d01a      	beq.n	388c <MPSL_IRQ_RTC0_Handler+0x94>
    3856:	4825      	ldr	r0, [pc, #148]	; (38ec <MPSL_IRQ_RTC0_Handler+0xf4>)
    3858:	6800      	ldr	r0, [r0, #0]
    385a:	b1b8      	cbz	r0, 388c <MPSL_IRQ_RTC0_Handler+0x94>
    385c:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3860:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3864:	4822      	ldr	r0, [pc, #136]	; (38f0 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3866:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    386a:	f8d8 1000 	ldr.w	r1, [r8]
    386e:	1a40      	subs	r0, r0, r1
    3870:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3874:	2802      	cmp	r0, #2
    3876:	d302      	bcc.n	387e <MPSL_IRQ_RTC0_Handler+0x86>
    3878:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    387c:	d906      	bls.n	388c <MPSL_IRQ_RTC0_Handler+0x94>
    387e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3882:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3886:	2005      	movs	r0, #5
    3888:	f7fe fefc 	bl	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    388c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3890:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3894:	bf08      	it	eq
    3896:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    389a:	4816      	ldr	r0, [pc, #88]	; (38f4 <MPSL_IRQ_RTC0_Handler+0xfc>)
    389c:	6800      	ldr	r0, [r0, #0]
    389e:	2800      	cmp	r0, #0
    38a0:	bf08      	it	eq
    38a2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    38a6:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    38aa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38ae:	4812      	ldr	r0, [pc, #72]	; (38f8 <MPSL_IRQ_RTC0_Handler+0x100>)
    38b0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    38b4:	f8d8 1000 	ldr.w	r1, [r8]
    38b8:	1a40      	subs	r0, r0, r1
    38ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    38be:	2802      	cmp	r0, #2
    38c0:	d304      	bcc.n	38cc <MPSL_IRQ_RTC0_Handler+0xd4>
    38c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    38c6:	bf98      	it	ls
    38c8:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    38cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    38d0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    38d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38d8:	2006      	movs	r0, #6
    38da:	f7fe bed3 	b.w	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38de:	0000      	.short	0x0000
    38e0:	4000b000 	.word	0x4000b000
    38e4:	4000b504 	.word	0x4000b504
    38e8:	4000b140 	.word	0x4000b140
    38ec:	4000b144 	.word	0x4000b144
    38f0:	4000b004 	.word	0x4000b004
    38f4:	4000b148 	.word	0x4000b148
    38f8:	4000b008 	.word	0x4000b008

000038fc <MPSL_IRQ_TIMER0_Handler>:
    38fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3900:	4d38      	ldr	r5, [pc, #224]	; (39e4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    3902:	7828      	ldrb	r0, [r5, #0]
    3904:	2804      	cmp	r0, #4
    3906:	d068      	beq.n	39da <MPSL_IRQ_TIMER0_Handler+0xde>
    3908:	1ce8      	adds	r0, r5, #3
    390a:	2201      	movs	r2, #1
    390c:	7801      	ldrb	r1, [r0, #0]
    390e:	b159      	cbz	r1, 3928 <MPSL_IRQ_TIMER0_Handler+0x2c>
    3910:	2901      	cmp	r1, #1
    3912:	bf08      	it	eq
    3914:	706a      	strbeq	r2, [r5, #1]
    3916:	d002      	beq.n	391e <MPSL_IRQ_TIMER0_Handler+0x22>
    3918:	7869      	ldrb	r1, [r5, #1]
    391a:	2900      	cmp	r1, #0
    391c:	d058      	beq.n	39d0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    391e:	2102      	movs	r1, #2
    3920:	7001      	strb	r1, [r0, #0]
    3922:	7840      	ldrb	r0, [r0, #1]
    3924:	f000 fafe 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3928:	4c2f      	ldr	r4, [pc, #188]	; (39e8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    392a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    392e:	f04f 0800 	mov.w	r8, #0
    3932:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3936:	f44f 7780 	mov.w	r7, #256	; 0x100
    393a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    393e:	d00a      	beq.n	3956 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3940:	482a      	ldr	r0, [pc, #168]	; (39ec <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3942:	6800      	ldr	r0, [r0, #0]
    3944:	b138      	cbz	r0, 3956 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3946:	2003      	movs	r0, #3
    3948:	f000 faec 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    394c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3950:	2003      	movs	r0, #3
    3952:	f7fe fe97 	bl	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3956:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    395a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    395e:	d00a      	beq.n	3976 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3960:	4823      	ldr	r0, [pc, #140]	; (39f0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3962:	6800      	ldr	r0, [r0, #0]
    3964:	b138      	cbz	r0, 3976 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3966:	2002      	movs	r0, #2
    3968:	f000 fadc 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    396c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3970:	2002      	movs	r0, #2
    3972:	f7fe fe87 	bl	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3976:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    397a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    397e:	d00a      	beq.n	3996 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3980:	481c      	ldr	r0, [pc, #112]	; (39f4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3982:	6800      	ldr	r0, [r0, #0]
    3984:	b138      	cbz	r0, 3996 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3986:	2001      	movs	r0, #1
    3988:	f000 facc 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    398c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3990:	2001      	movs	r0, #1
    3992:	f7fe fe77 	bl	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3996:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    399a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    399e:	bf08      	it	eq
    39a0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    39a4:	4814      	ldr	r0, [pc, #80]	; (39f8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    39a6:	6800      	ldr	r0, [r0, #0]
    39a8:	2800      	cmp	r0, #0
    39aa:	bf08      	it	eq
    39ac:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    39b0:	2000      	movs	r0, #0
    39b2:	f000 fab7 	bl	3f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    39b6:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    39ba:	2004      	movs	r0, #4
    39bc:	7028      	strb	r0, [r5, #0]
    39be:	f8c5 8008 	str.w	r8, [r5, #8]
    39c2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    39c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39ca:	2000      	movs	r0, #0
    39cc:	f7fe be5a 	b.w	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    39d0:	f240 412b 	movw	r1, #1067	; 0x42b
    39d4:	206c      	movs	r0, #108	; 0x6c
    39d6:	f000 ff23 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    39da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39de:	2007      	movs	r0, #7
    39e0:	f7fe be50 	b.w	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    39e4:	20000028 	.word	0x20000028
    39e8:	40008000 	.word	0x40008000
    39ec:	4000814c 	.word	0x4000814c
    39f0:	40008148 	.word	0x40008148
    39f4:	40008144 	.word	0x40008144
    39f8:	40008140 	.word	0x40008140
    39fc:	2201      	movs	r2, #1
    39fe:	0211      	lsls	r1, r2, #8
    3a00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a04:	2000      	movs	r0, #0
    3a06:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3a0a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3a0e:	f3bf 8f4f 	dsb	sy
    3a12:	f3bf 8f6f 	isb	sy
    3a16:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3a1a:	490e      	ldr	r1, [pc, #56]	; (3a54 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3a1c:	f841 2f04 	str.w	r2, [r1, #4]!
    3a20:	1e43      	subs	r3, r0, #1
    3a22:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3a26:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3a2a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3a2e:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3a30:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a34:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3a38:	1d1b      	adds	r3, r3, #4
    3a3a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a3e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3a42:	1d1b      	adds	r3, r3, #4
    3a44:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a48:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3a4c:	60ca      	str	r2, [r1, #12]
    3a4e:	4903      	ldr	r1, [pc, #12]	; (3a5c <MPSL_IRQ_TIMER0_Handler+0x160>)
    3a50:	7048      	strb	r0, [r1, #1]
    3a52:	4770      	bx	lr
    3a54:	40008000 	.word	0x40008000
    3a58:	40008004 	.word	0x40008004
    3a5c:	20000028 	.word	0x20000028

00003a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3a60:	4801      	ldr	r0, [pc, #4]	; (3a68 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3a62:	6800      	ldr	r0, [r0, #0]
    3a64:	4770      	bx	lr
    3a66:	0000      	.short	0x0000
    3a68:	4000b504 	.word	0x4000b504

00003a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a70:	4e48      	ldr	r6, [pc, #288]	; (3b94 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3a72:	4605      	mov	r5, r0
    3a74:	1ef7      	subs	r7, r6, #3
    3a76:	7833      	ldrb	r3, [r6, #0]
    3a78:	68f9      	ldr	r1, [r7, #12]
    3a7a:	2b01      	cmp	r3, #1
    3a7c:	bf04      	itt	eq
    3a7e:	42a9      	cmpeq	r1, r5
    3a80:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a84:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3a88:	4a43      	ldr	r2, [pc, #268]	; (3b98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3a8a:	6010      	str	r0, [r2, #0]
    3a8c:	4a43      	ldr	r2, [pc, #268]	; (3b9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3a8e:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3a92:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3a96:	f102 0004 	add.w	r0, r2, #4
    3a9a:	f04f 0400 	mov.w	r4, #0
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d063      	beq.n	3b6a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3aa2:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3aa6:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3aaa:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3aae:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3ab2:	483b      	ldr	r0, [pc, #236]	; (3ba0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3ab4:	6800      	ldr	r0, [r0, #0]
    3ab6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3aba:	f04f 0801 	mov.w	r8, #1
    3abe:	2800      	cmp	r0, #0
    3ac0:	bf04      	itt	eq
    3ac2:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    3ac6:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3aca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3ace:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3ad2:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3ad6:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3ada:	4832      	ldr	r0, [pc, #200]	; (3ba4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3adc:	f8d0 c000 	ldr.w	ip, [r0]
    3ae0:	eba5 0c0c 	sub.w	ip, r5, ip
    3ae4:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3ae8:	f1bc 0f02 	cmp.w	ip, #2
    3aec:	d34a      	bcc.n	3b84 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3aee:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3af2:	d847      	bhi.n	3b84 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3af4:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3af8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3afc:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3b00:	b12b      	cbz	r3, 3b0e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa2>
    3b02:	6802      	ldr	r2, [r0, #0]
    3b04:	1a8a      	subs	r2, r1, r2
    3b06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3b0a:	2a02      	cmp	r2, #2
    3b0c:	d3f9      	bcc.n	3b02 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x96>
    3b0e:	f8c7 8008 	str.w	r8, [r7, #8]
    3b12:	703c      	strb	r4, [r7, #0]
    3b14:	f7ff ff72 	bl	39fc <MPSL_IRQ_TIMER0_Handler+0x100>
    3b18:	4823      	ldr	r0, [pc, #140]	; (3ba8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3b1a:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3b1e:	f364 0101 	bfi	r1, r4, #0, #2
    3b22:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3b26:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3b2a:	2102      	movs	r1, #2
    3b2c:	f361 0201 	bfi	r2, r1, #0, #2
    3b30:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3b34:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3b38:	2104      	movs	r1, #4
    3b3a:	f361 0203 	bfi	r2, r1, #0, #4
    3b3e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    3b42:	f8c0 800c 	str.w	r8, [r0, #12]
    3b46:	68b9      	ldr	r1, [r7, #8]
    3b48:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3b4c:	1580      	asrs	r0, r0, #22
    3b4e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3b52:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3b56:	4915      	ldr	r1, [pc, #84]	; (3bac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    3b58:	05c0      	lsls	r0, r0, #23
    3b5a:	6008      	str	r0, [r1, #0]
    3b5c:	2004      	movs	r0, #4
    3b5e:	60fd      	str	r5, [r7, #12]
    3b60:	7070      	strb	r0, [r6, #1]
    3b62:	f886 8000 	strb.w	r8, [r6]
    3b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b6a:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3b6e:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3b72:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3b76:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3b7a:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3b7e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3b82:	e796      	b.n	3ab2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3b84:	2000      	movs	r0, #0
    3b86:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3b8a:	f240 2169 	movw	r1, #617	; 0x269
    3b8e:	206c      	movs	r0, #108	; 0x6c
    3b90:	f000 fe46 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b94:	2000002b 	.word	0x2000002b
    3b98:	4001f508 	.word	0x4001f508
    3b9c:	4000b000 	.word	0x4000b000
    3ba0:	4000b148 	.word	0x4000b148
    3ba4:	4000b504 	.word	0x4000b504
    3ba8:	40008000 	.word	0x40008000
    3bac:	4001f504 	.word	0x4001f504

00003bb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3bb0:	b570      	push	{r4, r5, r6, lr}
    3bb2:	4c2a      	ldr	r4, [pc, #168]	; (3c5c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3bb4:	68e1      	ldr	r1, [r4, #12]
    3bb6:	4281      	cmp	r1, r0
    3bb8:	bf14      	ite	ne
    3bba:	2201      	movne	r2, #1
    3bbc:	2200      	moveq	r2, #0
    3bbe:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3c60 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3bc2:	f89c 5000 	ldrb.w	r5, [ip]
    3bc6:	2d02      	cmp	r5, #2
    3bc8:	d002      	beq.n	3bd0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3bca:	2a00      	cmp	r2, #0
    3bcc:	d034      	beq.n	3c38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    3bce:	e002      	b.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3bd0:	2a00      	cmp	r2, #0
    3bd2:	bf08      	it	eq
    3bd4:	bd70      	popeq	{r4, r5, r6, pc}
    3bd6:	7862      	ldrb	r2, [r4, #1]
    3bd8:	b39a      	cbz	r2, 3c42 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3bda:	4b22      	ldr	r3, [pc, #136]	; (3c64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3be0:	601a      	str	r2, [r3, #0]
    3be2:	4b21      	ldr	r3, [pc, #132]	; (3c68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3be4:	1392      	asrs	r2, r2, #14
    3be6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3bea:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3bee:	2200      	movs	r2, #0
    3bf0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3bf4:	4a1d      	ldr	r2, [pc, #116]	; (3c6c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3bf6:	6816      	ldr	r6, [r2, #0]
    3bf8:	1b86      	subs	r6, r0, r6
    3bfa:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3bfe:	2e02      	cmp	r6, #2
    3c00:	d324      	bcc.n	3c4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3c02:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3c06:	d821      	bhi.n	3c4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3c08:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3c0c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3c10:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3c14:	b12d      	cbz	r5, 3c22 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3c16:	6813      	ldr	r3, [r2, #0]
    3c18:	1acb      	subs	r3, r1, r3
    3c1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3c1e:	2b02      	cmp	r3, #2
    3c20:	d3f9      	bcc.n	3c16 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3c22:	4b13      	ldr	r3, [pc, #76]	; (3c70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3c24:	2102      	movs	r1, #2
    3c26:	074a      	lsls	r2, r1, #29
    3c28:	601a      	str	r2, [r3, #0]
    3c2a:	60e0      	str	r0, [r4, #12]
    3c2c:	2004      	movs	r0, #4
    3c2e:	f88c 0001 	strb.w	r0, [ip, #1]
    3c32:	f88c 1000 	strb.w	r1, [ip]
    3c36:	bd70      	pop	{r4, r5, r6, pc}
    3c38:	f240 2177 	movw	r1, #631	; 0x277
    3c3c:	206c      	movs	r0, #108	; 0x6c
    3c3e:	f000 fdef 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c42:	f240 217b 	movw	r1, #635	; 0x27b
    3c46:	206c      	movs	r0, #108	; 0x6c
    3c48:	f000 fdea 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c4c:	2000      	movs	r0, #0
    3c4e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3c52:	f240 2187 	movw	r1, #647	; 0x287
    3c56:	206c      	movs	r0, #108	; 0x6c
    3c58:	f000 fde2 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c5c:	20000028 	.word	0x20000028
    3c60:	2000002b 	.word	0x2000002b
    3c64:	4001f508 	.word	0x4001f508
    3c68:	4000b000 	.word	0x4000b000
    3c6c:	4000b504 	.word	0x4000b504
    3c70:	4001f504 	.word	0x4001f504

00003c74 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3c74:	4801      	ldr	r0, [pc, #4]	; (3c7c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3c76:	68c0      	ldr	r0, [r0, #12]
    3c78:	4770      	bx	lr
    3c7a:	0000      	.short	0x0000
    3c7c:	20000028 	.word	0x20000028

00003c80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c84:	4836      	ldr	r0, [pc, #216]	; (3d60 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3c86:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
    3c8a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3c8e:	4a35      	ldr	r2, [pc, #212]	; (3d64 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3c90:	f100 0c04 	add.w	ip, r0, #4
    3c94:	2100      	movs	r1, #0
    3c96:	7813      	ldrb	r3, [r2, #0]
    3c98:	b16b      	cbz	r3, 3cb6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3c9a:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3c9e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3ca2:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    3ca6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3caa:	482f      	ldr	r0, [pc, #188]	; (3d68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3cac:	6800      	ldr	r0, [r0, #0]
    3cae:	f04f 0c01 	mov.w	ip, #1
    3cb2:	b998      	cbnz	r0, 3cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5c>
    3cb4:	e00c      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    3cb6:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3cba:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3cbe:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3cc2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3cc6:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    3cca:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3cce:	e7ec      	b.n	3caa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2a>
    3cd0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3cd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3cd8:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3cdc:	2b02      	cmp	r3, #2
    3cde:	d004      	beq.n	3cea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6a>
    3ce0:	f240 2193 	movw	r1, #659	; 0x293
    3ce4:	206c      	movs	r0, #108	; 0x6c
    3ce6:	f000 fd9b 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cea:	4e20      	ldr	r6, [pc, #128]	; (3d6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3cec:	6830      	ldr	r0, [r6, #0]
    3cee:	4c20      	ldr	r4, [pc, #128]	; (3d70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3cf0:	1cc0      	adds	r0, r0, #3
    3cf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3cf6:	68e3      	ldr	r3, [r4, #12]
    3cf8:	4d1e      	ldr	r5, [pc, #120]	; (3d74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3cfa:	4298      	cmp	r0, r3
    3cfc:	d00b      	beq.n	3d16 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3cfe:	6837      	ldr	r7, [r6, #0]
    3d00:	1bdf      	subs	r7, r3, r7
    3d02:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3d06:	2f04      	cmp	r7, #4
    3d08:	d305      	bcc.n	3d16 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3d0a:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3d0e:	d802      	bhi.n	3d16 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3d10:	f7ff feac 	bl	3a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3d14:	e01e      	b.n	3d54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    3d16:	6830      	ldr	r0, [r6, #0]
    3d18:	1a18      	subs	r0, r3, r0
    3d1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d1e:	2802      	cmp	r0, #2
    3d20:	d315      	bcc.n	3d4e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    3d22:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d26:	d812      	bhi.n	3d4e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    3d28:	4b13      	ldr	r3, [pc, #76]	; (3d78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3d2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d2e:	6018      	str	r0, [r3, #0]
    3d30:	f8c4 c008 	str.w	ip, [r4, #8]
    3d34:	7021      	strb	r1, [r4, #0]
    3d36:	f8c5 c004 	str.w	ip, [r5, #4]
    3d3a:	f8c5 c00c 	str.w	ip, [r5, #12]
    3d3e:	0040      	lsls	r0, r0, #1
    3d40:	1f19      	subs	r1, r3, #4
    3d42:	6008      	str	r0, [r1, #0]
    3d44:	2004      	movs	r0, #4
    3d46:	7050      	strb	r0, [r2, #1]
    3d48:	f882 c000 	strb.w	ip, [r2]
    3d4c:	e002      	b.n	3d54 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    3d4e:	f8c4 c008 	str.w	ip, [r4, #8]
    3d52:	7021      	strb	r1, [r4, #0]
    3d54:	68a0      	ldr	r0, [r4, #8]
    3d56:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d5e:	0000      	.short	0x0000
    3d60:	4000b000 	.word	0x4000b000
    3d64:	2000002b 	.word	0x2000002b
    3d68:	4000b148 	.word	0x4000b148
    3d6c:	4000b504 	.word	0x4000b504
    3d70:	20000028 	.word	0x20000028
    3d74:	40008000 	.word	0x40008000
    3d78:	4001f508 	.word	0x4001f508

00003d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d80:	4c63      	ldr	r4, [pc, #396]	; (3f10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x194>)
    3d82:	2700      	movs	r7, #0
    3d84:	2601      	movs	r6, #1
    3d86:	f894 c000 	ldrb.w	ip, [r4]
    3d8a:	7865      	ldrb	r5, [r4, #1]
    3d8c:	f44f 74a0 	mov.w	r4, #320	; 0x140
    3d90:	2807      	cmp	r0, #7
    3d92:	d27b      	bcs.n	3e8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x110>
    3d94:	e8df f000 	tbb	[pc, r0]
    3d98:	04040404 	.word	0x04040404
    3d9c:	006a6a6a 	.word	0x006a6a6a
    3da0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3f14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    3da4:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3da8:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3dac:	bf04      	itt	eq
    3dae:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    3db2:	f1b8 0f00 	cmpeq.w	r8, #0
    3db6:	d003      	beq.n	3dc0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x44>
    3db8:	f1bc 0f02 	cmp.w	ip, #2
    3dbc:	d005      	beq.n	3dca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4e>
    3dbe:	e02c      	b.n	3e1a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9e>
    3dc0:	f240 21d6 	movw	r1, #726	; 0x2d6
    3dc4:	206c      	movs	r0, #108	; 0x6c
    3dc6:	f000 fd2b 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dca:	f1a5 0804 	sub.w	r8, r5, #4
    3dce:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3dd2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    3dd6:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
    3dda:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3dde:	2400      	movs	r4, #0
    3de0:	f1bc 0f01 	cmp.w	ip, #1
    3de4:	d003      	beq.n	3dee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x72>
    3de6:	f1bc 0f02 	cmp.w	ip, #2
    3dea:	d00a      	beq.n	3e02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3dec:	e012      	b.n	3e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    3dee:	2d04      	cmp	r5, #4
    3df0:	bf24      	itt	cs
    3df2:	f8d8 9000 	ldrcs.w	r9, [r8]
    3df6:	f1b9 0f00 	cmpcs.w	r9, #0
    3dfa:	bf08      	it	eq
    3dfc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    3e00:	e008      	b.n	3e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    3e02:	2d04      	cmp	r5, #4
    3e04:	bf24      	itt	cs
    3e06:	f8d8 9000 	ldrcs.w	r9, [r8]
    3e0a:	f1b9 0f00 	cmpcs.w	r9, #0
    3e0e:	bf08      	it	eq
    3e10:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
    3e14:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3e18:	d1e1      	bne.n	3dde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3e1a:	4c3f      	ldr	r4, [pc, #252]	; (3f18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>)
    3e1c:	f100 0c10 	add.w	ip, r0, #16
    3e20:	fa06 fc0c 	lsl.w	ip, r6, ip
    3e24:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3e28:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3e2c:	b1aa      	cbz	r2, 3e5a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xde>
    3e2e:	f04f 0840 	mov.w	r8, #64	; 0x40
    3e32:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    3e36:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3e3a:	44a0      	add	r8, r4
    3e3c:	f8c8 6000 	str.w	r6, [r8]
    3e40:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3e44:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3e48:	eba1 0000 	sub.w	r0, r1, r0
    3e4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3e50:	4290      	cmp	r0, r2
    3e52:	bf38      	it	cc
    3e54:	f8c5 7540 	strcc.w	r7, [r5, #1344]	; 0x540
    3e58:	d351      	bcc.n	3efe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    3e5a:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    3e5e:	2b01      	cmp	r3, #1
    3e60:	bf08      	it	eq
    3e62:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3e66:	2001      	movs	r0, #1
    3e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e6c:	f1bc 0f00 	cmp.w	ip, #0
    3e70:	d006      	beq.n	3e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    3e72:	4285      	cmp	r5, r0
    3e74:	d104      	bne.n	3e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    3e76:	f240 21f9 	movw	r1, #761	; 0x2f9
    3e7a:	206c      	movs	r0, #108	; 0x6c
    3e7c:	f000 fcd0 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e80:	f1a0 0c04 	sub.w	ip, r0, #4
    3e84:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3e88:	2b01      	cmp	r3, #1
    3e8a:	e000      	b.n	3e8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x112>
    3e8c:	e03a      	b.n	3f04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3e8e:	bf0c      	ite	eq
    3e90:	2501      	moveq	r5, #1
    3e92:	2500      	movne	r5, #0
    3e94:	f1bc 0f03 	cmp.w	ip, #3
    3e98:	d304      	bcc.n	3ea4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x128>
    3e9a:	f240 11bd 	movw	r1, #445	; 0x1bd
    3e9e:	206c      	movs	r0, #108	; 0x6c
    3ea0:	f000 fcbe 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ea4:	f10c 0310 	add.w	r3, ip, #16
    3ea8:	fa06 f303 	lsl.w	r3, r6, r3
    3eac:	4e1b      	ldr	r6, [pc, #108]	; (3f1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3eae:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    3eb2:	f8c6 3348 	str.w	r3, [r6, #840]	; 0x348
    3eb6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    3eba:	f846 700c 	str.w	r7, [r6, ip]
    3ebe:	1f00      	subs	r0, r0, #4
    3ec0:	b2c0      	uxtb	r0, r0
    3ec2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    3ec6:	b17a      	cbz	r2, 3ee8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>
    3ec8:	f8df c054 	ldr.w	ip, [pc, #84]	; 3f20 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3ecc:	f8dc c000 	ldr.w	ip, [ip]
    3ed0:	eba1 0c0c 	sub.w	ip, r1, ip
    3ed4:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3ed8:	4562      	cmp	r2, ip
    3eda:	bf92      	itee	ls
    3edc:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    3ee0:	2100      	movhi	r1, #0
    3ee2:	f8c0 1540 	strhi.w	r1, [r0, #1344]	; 0x540
    3ee6:	d80a      	bhi.n	3efe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    3ee8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3eec:	2d00      	cmp	r5, #0
    3eee:	bf18      	it	ne
    3ef0:	f8c6 3304 	strne.w	r3, [r6, #772]	; 0x304
    3ef4:	f8c6 3344 	str.w	r3, [r6, #836]	; 0x344
    3ef8:	2001      	movs	r0, #1
    3efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3efe:	2000      	movs	r0, #0
    3f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f04:	f240 21fe 	movw	r1, #766	; 0x2fe
    3f08:	206c      	movs	r0, #108	; 0x6c
    3f0a:	f000 fc89 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f0e:	0000      	.short	0x0000
    3f10:	2000002b 	.word	0x2000002b
    3f14:	20000028 	.word	0x20000028
    3f18:	40008000 	.word	0x40008000
    3f1c:	4000b000 	.word	0x4000b000
    3f20:	4000b504 	.word	0x4000b504

00003f24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f28:	2601      	movs	r6, #1
    3f2a:	2700      	movs	r7, #0
    3f2c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3f30:	2807      	cmp	r0, #7
    3f32:	d251      	bcs.n	3fd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3f34:	e8df f000 	tbb	[pc, r0]
    3f38:	04040404 	.word	0x04040404
    3f3c:	00191919 	.word	0x00191919
    3f40:	f100 0110 	add.w	r1, r0, #16
    3f44:	fa06 f201 	lsl.w	r2, r6, r1
    3f48:	4926      	ldr	r1, [pc, #152]	; (3fe4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3f4a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3f4e:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3f52:	2200      	movs	r2, #0
    3f54:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3f58:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3f5c:	508f      	str	r7, [r1, r2]
    3f5e:	4922      	ldr	r1, [pc, #136]	; (3fe8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3f60:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3f64:	9000      	str	r0, [sp, #0]
    3f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f6a:	4d20      	ldr	r5, [pc, #128]	; (3fec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3f6c:	1f01      	subs	r1, r0, #4
    3f6e:	b2cc      	uxtb	r4, r1
    3f70:	7829      	ldrb	r1, [r5, #0]
    3f72:	b179      	cbz	r1, 3f94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3f74:	786a      	ldrb	r2, [r5, #1]
    3f76:	4282      	cmp	r2, r0
    3f78:	d10c      	bne.n	3f94 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3f7a:	4a1d      	ldr	r2, [pc, #116]	; (3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3f7c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3f80:	6010      	str	r0, [r2, #0]
    3f82:	2901      	cmp	r1, #1
    3f84:	bf08      	it	eq
    3f86:	f7ff fd39 	bleq	39fc <MPSL_IRQ_TIMER0_Handler+0x100>
    3f8a:	702f      	strb	r7, [r5, #0]
    3f8c:	4919      	ldr	r1, [pc, #100]	; (3ff4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3f8e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3f92:	60c8      	str	r0, [r1, #12]
    3f94:	4918      	ldr	r1, [pc, #96]	; (3ff8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3f96:	f104 0010 	add.w	r0, r4, #16
    3f9a:	fa06 f000 	lsl.w	r0, r6, r0
    3f9e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3fa2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    3fa6:	00a0      	lsls	r0, r4, #2
    3fa8:	4408      	add	r0, r1
    3faa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3fae:	4a13      	ldr	r2, [pc, #76]	; (3ffc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3fb0:	6812      	ldr	r2, [r2, #0]
    3fb2:	1a80      	subs	r0, r0, r2
    3fb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3fb8:	2802      	cmp	r0, #2
    3fba:	d307      	bcc.n	3fcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    3fbc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    3fc0:	2000      	movs	r0, #0
    3fc2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3fc6:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    3fca:	500f      	str	r7, [r1, r0]
    3fcc:	480c      	ldr	r0, [pc, #48]	; (4000 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    3fce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3fd2:	9000      	str	r0, [sp, #0]
    3fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3fd8:	f240 317f 	movw	r1, #895	; 0x37f
    3fdc:	206c      	movs	r0, #108	; 0x6c
    3fde:	f000 fc1f 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fe2:	0000      	.short	0x0000
    3fe4:	40008000 	.word	0x40008000
    3fe8:	40008140 	.word	0x40008140
    3fec:	2000002b 	.word	0x2000002b
    3ff0:	4001f508 	.word	0x4001f508
    3ff4:	20000028 	.word	0x20000028
    3ff8:	4000b000 	.word	0x4000b000
    3ffc:	4000b504 	.word	0x4000b504
    4000:	4000b140 	.word	0x4000b140

00004004 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    4004:	4920      	ldr	r1, [pc, #128]	; (4088 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    4006:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    400a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    400e:	481f      	ldr	r0, [pc, #124]	; (408c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    4010:	1d0a      	adds	r2, r1, #4
    4012:	7803      	ldrb	r3, [r0, #0]
    4014:	2000      	movs	r0, #0
    4016:	b15b      	cbz	r3, 4030 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    4018:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    401c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    4020:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4024:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4028:	4919      	ldr	r1, [pc, #100]	; (4090 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    402a:	6809      	ldr	r1, [r1, #0]
    402c:	b999      	cbnz	r1, 4056 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    402e:	e00c      	b.n	404a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    4030:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    4034:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    4038:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    403c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4040:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4044:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4048:	e7ee      	b.n	4028 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    404a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    404e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4052:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    4056:	490f      	ldr	r1, [pc, #60]	; (4094 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    4058:	f04f 32ff 	mov.w	r2, #4294967295
    405c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4060:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4064:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4068:	1d0a      	adds	r2, r1, #4
    406a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    406e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4072:	1d12      	adds	r2, r2, #4
    4074:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4078:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    407c:	1d12      	adds	r2, r2, #4
    407e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4082:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    4086:	4770      	bx	lr
    4088:	4000b000 	.word	0x4000b000
    408c:	2000002b 	.word	0x2000002b
    4090:	4000b148 	.word	0x4000b148
    4094:	40008000 	.word	0x40008000

00004098 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    4098:	4808      	ldr	r0, [pc, #32]	; (40bc <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    409a:	f990 0002 	ldrsb.w	r0, [r0, #2]
    409e:	2800      	cmp	r0, #0
    40a0:	bfb8      	it	lt
    40a2:	4770      	bxlt	lr
    40a4:	f000 011f 	and.w	r1, r0, #31
    40a8:	2201      	movs	r2, #1
    40aa:	fa02 f101 	lsl.w	r1, r2, r1
    40ae:	0940      	lsrs	r0, r0, #5
    40b0:	0080      	lsls	r0, r0, #2
    40b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    40b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    40ba:	4770      	bx	lr
    40bc:	20000028 	.word	0x20000028

000040c0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    40c0:	b510      	push	{r4, lr}
    40c2:	2807      	cmp	r0, #7
    40c4:	d20d      	bcs.n	40e2 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    40c6:	e8df f000 	tbb	[pc, r0]
    40ca:	0404      	.short	0x0404
    40cc:	06060404 	.word	0x06060404
    40d0:	0006      	.short	0x0006
    40d2:	4906      	ldr	r1, [pc, #24]	; (40ec <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    40d4:	e002      	b.n	40dc <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    40d6:	1f00      	subs	r0, r0, #4
    40d8:	4905      	ldr	r1, [pc, #20]	; (40f0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    40da:	b2c0      	uxtb	r0, r0
    40dc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    40e0:	bd10      	pop	{r4, pc}
    40e2:	f240 3122 	movw	r1, #802	; 0x322
    40e6:	206c      	movs	r0, #108	; 0x6c
    40e8:	f000 fb9a 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40ec:	40008140 	.word	0x40008140
    40f0:	4000b140 	.word	0x4000b140

000040f4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    40f4:	b570      	push	{r4, r5, r6, lr}
    40f6:	481a      	ldr	r0, [pc, #104]	; (4160 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    40f8:	2400      	movs	r4, #0
    40fa:	2104      	movs	r1, #4
    40fc:	7004      	strb	r4, [r0, #0]
    40fe:	1ec0      	subs	r0, r0, #3
    4100:	7001      	strb	r1, [r0, #0]
    4102:	0589      	lsls	r1, r1, #22
    4104:	60c1      	str	r1, [r0, #12]
    4106:	f7ff fc79 	bl	39fc <MPSL_IRQ_TIMER0_Handler+0x100>
    410a:	2301      	movs	r3, #1
    410c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4110:	02dd      	lsls	r5, r3, #11
    4112:	f8cc 5180 	str.w	r5, [ip, #384]	; 0x180
    4116:	f3bf 8f4f 	dsb	sy
    411a:	f3bf 8f6f 	isb	sy
    411e:	f8cc 5280 	str.w	r5, [ip, #640]	; 0x280
    4122:	4a10      	ldr	r2, [pc, #64]	; (4164 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    4124:	6053      	str	r3, [r2, #4]
    4126:	6093      	str	r3, [r2, #8]
    4128:	480f      	ldr	r0, [pc, #60]	; (4168 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    412a:	6801      	ldr	r1, [r0, #0]
    412c:	2900      	cmp	r1, #0
    412e:	d1fc      	bne.n	412a <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    4130:	1e48      	subs	r0, r1, #1
    4132:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    4136:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    413a:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    413e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    4142:	480a      	ldr	r0, [pc, #40]	; (416c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    4144:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4148:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    414c:	1d00      	adds	r0, r0, #4
    414e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4152:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    4156:	f8cc 5100 	str.w	r5, [ip, #256]	; 0x100
    415a:	6013      	str	r3, [r2, #0]
    415c:	bd70      	pop	{r4, r5, r6, pc}
    415e:	0000      	.short	0x0000
    4160:	2000002b 	.word	0x2000002b
    4164:	4000b000 	.word	0x4000b000
    4168:	4000b504 	.word	0x4000b504
    416c:	4000b004 	.word	0x4000b004

00004170 <MPSL_IRQ_CLOCK_Handler>:
    4170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4174:	4c16      	ldr	r4, [pc, #88]	; (41d0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    4176:	7a60      	ldrb	r0, [r4, #9]
    4178:	2800      	cmp	r0, #0
    417a:	d027      	beq.n	41cc <MPSL_IRQ_CLOCK_Handler+0x5c>
    417c:	f44f 7180 	mov.w	r1, #256	; 0x100
    4180:	058d      	lsls	r5, r1, #22
    4182:	4628      	mov	r0, r5
    4184:	f008 fcaa 	bl	cadc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4188:	4680      	mov	r8, r0
    418a:	f44f 7182 	mov.w	r1, #260	; 0x104
    418e:	4628      	mov	r0, r5
    4190:	f008 fca4 	bl	cadc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4194:	2600      	movs	r6, #0
    4196:	4607      	mov	r7, r0
    4198:	f1b8 0f00 	cmp.w	r8, #0
    419c:	d009      	beq.n	41b2 <MPSL_IRQ_CLOCK_Handler+0x42>
    419e:	2001      	movs	r0, #1
    41a0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    41a4:	7920      	ldrb	r0, [r4, #4]
    41a6:	b120      	cbz	r0, 41b2 <MPSL_IRQ_CLOCK_Handler+0x42>
    41a8:	7126      	strb	r6, [r4, #4]
    41aa:	69e0      	ldr	r0, [r4, #28]
    41ac:	b108      	cbz	r0, 41b2 <MPSL_IRQ_CLOCK_Handler+0x42>
    41ae:	4780      	blx	r0
    41b0:	61e6      	str	r6, [r4, #28]
    41b2:	b137      	cbz	r7, 41c2 <MPSL_IRQ_CLOCK_Handler+0x52>
    41b4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    41b8:	2002      	movs	r0, #2
    41ba:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    41be:	f000 fa63 	bl	4688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    41c2:	4640      	mov	r0, r8
    41c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41c8:	f000 b858 	b.w	427c <MPSL_IRQ_CLOCK_Handler+0x10c>
    41cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41d0:	20000038 	.word	0x20000038
    41d4:	b510      	push	{r4, lr}
    41d6:	f008 fd2b 	bl	cc30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    41da:	b930      	cbnz	r0, 41ea <MPSL_IRQ_CLOCK_Handler+0x7a>
    41dc:	f008 fd49 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41e0:	b918      	cbnz	r0, 41ea <MPSL_IRQ_CLOCK_Handler+0x7a>
    41e2:	f008 fd7c 	bl	ccde <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    41e6:	2800      	cmp	r0, #0
    41e8:	d002      	beq.n	41f0 <MPSL_IRQ_CLOCK_Handler+0x80>
    41ea:	4902      	ldr	r1, [pc, #8]	; (41f4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    41ec:	2002      	movs	r0, #2
    41ee:	6008      	str	r0, [r1, #0]
    41f0:	bd10      	pop	{r4, pc}
    41f2:	0000      	.short	0x0000
    41f4:	40000c34 	.word	0x40000c34
    41f8:	b570      	push	{r4, r5, r6, lr}
    41fa:	f000 f98b 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    41fe:	f000 fa97 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4202:	4c09      	ldr	r4, [pc, #36]	; (4228 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4204:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4208:	b130      	cbz	r0, 4218 <MPSL_IRQ_CLOCK_Handler+0xa8>
    420a:	f7ff ffe3 	bl	41d4 <MPSL_IRQ_CLOCK_Handler+0x64>
    420e:	2001      	movs	r0, #1
    4210:	6128      	str	r0, [r5, #16]
    4212:	2004      	movs	r0, #4
    4214:	72a0      	strb	r0, [r4, #10]
    4216:	e004      	b.n	4222 <MPSL_IRQ_CLOCK_Handler+0xb2>
    4218:	2003      	movs	r0, #3
    421a:	72a0      	strb	r0, [r4, #10]
    421c:	2001      	movs	r0, #1
    421e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4222:	2000      	movs	r0, #0
    4224:	71e0      	strb	r0, [r4, #7]
    4226:	bd70      	pop	{r4, r5, r6, pc}
    4228:	20000038 	.word	0x20000038
    422c:	b570      	push	{r4, r5, r6, lr}
    422e:	4c12      	ldr	r4, [pc, #72]	; (4278 <MPSL_IRQ_CLOCK_Handler+0x108>)
    4230:	79a0      	ldrb	r0, [r4, #6]
    4232:	b1e0      	cbz	r0, 426e <MPSL_IRQ_CLOCK_Handler+0xfe>
    4234:	79e1      	ldrb	r1, [r4, #7]
    4236:	1e40      	subs	r0, r0, #1
    4238:	4281      	cmp	r1, r0
    423a:	da18      	bge.n	426e <MPSL_IRQ_CLOCK_Handler+0xfe>
    423c:	f000 fa78 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4240:	4605      	mov	r5, r0
    4242:	f000 fb5d 	bl	4900 <mpsl_temperature_get>
    4246:	79a1      	ldrb	r1, [r4, #6]
    4248:	2901      	cmp	r1, #1
    424a:	d902      	bls.n	4252 <MPSL_IRQ_CLOCK_Handler+0xe2>
    424c:	79e1      	ldrb	r1, [r4, #7]
    424e:	1c49      	adds	r1, r1, #1
    4250:	71e1      	strb	r1, [r4, #7]
    4252:	b10d      	cbz	r5, 4258 <MPSL_IRQ_CLOCK_Handler+0xe8>
    4254:	6961      	ldr	r1, [r4, #20]
    4256:	e000      	b.n	425a <MPSL_IRQ_CLOCK_Handler+0xea>
    4258:	6921      	ldr	r1, [r4, #16]
    425a:	1a41      	subs	r1, r0, r1
    425c:	2902      	cmp	r1, #2
    425e:	da02      	bge.n	4266 <MPSL_IRQ_CLOCK_Handler+0xf6>
    4260:	f111 0f02 	cmn.w	r1, #2
    4264:	dc07      	bgt.n	4276 <MPSL_IRQ_CLOCK_Handler+0x106>
    4266:	b10d      	cbz	r5, 426c <MPSL_IRQ_CLOCK_Handler+0xfc>
    4268:	6160      	str	r0, [r4, #20]
    426a:	e000      	b.n	426e <MPSL_IRQ_CLOCK_Handler+0xfe>
    426c:	6120      	str	r0, [r4, #16]
    426e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4272:	f7ff bfc1 	b.w	41f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4276:	bd70      	pop	{r4, r5, r6, pc}
    4278:	20000038 	.word	0x20000038
    427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4280:	4606      	mov	r6, r0
    4282:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4286:	f44f 7186 	mov.w	r1, #268	; 0x10c
    428a:	4628      	mov	r0, r5
    428c:	f008 fc26 	bl	cadc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4290:	4680      	mov	r8, r0
    4292:	f44f 7188 	mov.w	r1, #272	; 0x110
    4296:	4628      	mov	r0, r5
    4298:	f008 fc20 	bl	cadc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    429c:	4c27      	ldr	r4, [pc, #156]	; (433c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    429e:	4682      	mov	sl, r0
    42a0:	7827      	ldrb	r7, [r4, #0]
    42a2:	f104 0008 	add.w	r0, r4, #8
    42a6:	f008 fc8d 	bl	cbc4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    42aa:	b110      	cbz	r0, 42b2 <MPSL_IRQ_CLOCK_Handler+0x142>
    42ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    42b0:	e016      	b.n	42e0 <MPSL_IRQ_CLOCK_Handler+0x170>
    42b2:	f04f 0901 	mov.w	r9, #1
    42b6:	b146      	cbz	r6, 42ca <MPSL_IRQ_CLOCK_Handler+0x15a>
    42b8:	7aa0      	ldrb	r0, [r4, #10]
    42ba:	2803      	cmp	r0, #3
    42bc:	d105      	bne.n	42ca <MPSL_IRQ_CLOCK_Handler+0x15a>
    42be:	2004      	movs	r0, #4
    42c0:	72a0      	strb	r0, [r4, #10]
    42c2:	f7ff ff87 	bl	41d4 <MPSL_IRQ_CLOCK_Handler+0x64>
    42c6:	f8c5 9010 	str.w	r9, [r5, #16]
    42ca:	2600      	movs	r6, #0
    42cc:	f1b8 0f00 	cmp.w	r8, #0
    42d0:	d018      	beq.n	4304 <MPSL_IRQ_CLOCK_Handler+0x194>
    42d2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    42d6:	7aa0      	ldrb	r0, [r4, #10]
    42d8:	2804      	cmp	r0, #4
    42da:	d004      	beq.n	42e6 <MPSL_IRQ_CLOCK_Handler+0x176>
    42dc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    42e0:	206d      	movs	r0, #109	; 0x6d
    42e2:	f000 fa9d 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    42e6:	f008 fca3 	bl	cc30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    42ea:	b928      	cbnz	r0, 42f8 <MPSL_IRQ_CLOCK_Handler+0x188>
    42ec:	f008 fcc1 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    42f0:	b910      	cbnz	r0, 42f8 <MPSL_IRQ_CLOCK_Handler+0x188>
    42f2:	f008 fcf4 	bl	ccde <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    42f6:	b108      	cbz	r0, 42fc <MPSL_IRQ_CLOCK_Handler+0x18c>
    42f8:	4811      	ldr	r0, [pc, #68]	; (4340 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    42fa:	6006      	str	r6, [r0, #0]
    42fc:	2002      	movs	r0, #2
    42fe:	72a0      	strb	r0, [r4, #10]
    4300:	f000 f8ec 	bl	44dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4304:	f1ba 0f00 	cmp.w	sl, #0
    4308:	d008      	beq.n	431c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    430a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    430e:	7aa0      	ldrb	r0, [r4, #10]
    4310:	2802      	cmp	r0, #2
    4312:	d101      	bne.n	4318 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    4314:	f7ff ff8a 	bl	422c <MPSL_IRQ_CLOCK_Handler+0xbc>
    4318:	f8c5 9014 	str.w	r9, [r5, #20]
    431c:	b13f      	cbz	r7, 432e <MPSL_IRQ_CLOCK_Handler+0x1be>
    431e:	7026      	strb	r6, [r4, #0]
    4320:	7aa0      	ldrb	r0, [r4, #10]
    4322:	2802      	cmp	r0, #2
    4324:	d101      	bne.n	432a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    4326:	f7ff ff67 	bl	41f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    432a:	f000 f8d7 	bl	44dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    432e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4332:	4802      	ldr	r0, [pc, #8]	; (433c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4334:	3008      	adds	r0, #8
    4336:	f008 bc5c 	b.w	cbf2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    433a:	0000      	.short	0x0000
    433c:	20000038 	.word	0x20000038
    4340:	40000c34 	.word	0x40000c34
    4344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4348:	4c5f      	ldr	r4, [pc, #380]	; (44c8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    434a:	2700      	movs	r7, #0
    434c:	4606      	mov	r6, r0
    434e:	61a7      	str	r7, [r4, #24]
    4350:	7842      	ldrb	r2, [r0, #1]
    4352:	7881      	ldrb	r1, [r0, #2]
    4354:	7800      	ldrb	r0, [r0, #0]
    4356:	72e0      	strb	r0, [r4, #11]
    4358:	7162      	strb	r2, [r4, #5]
    435a:	71a1      	strb	r1, [r4, #6]
    435c:	71e7      	strb	r7, [r4, #7]
    435e:	f04f 0801 	mov.w	r8, #1
    4362:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4366:	2805      	cmp	r0, #5
    4368:	d225      	bcs.n	43b6 <MPSL_IRQ_CLOCK_Handler+0x246>
    436a:	e8df f000 	tbb	[pc, r0]
    436e:	0310      	.short	0x0310
    4370:	00222006 	.word	0x00222006
    4374:	f8c4 8018 	str.w	r8, [r4, #24]
    4378:	e009      	b.n	438e <MPSL_IRQ_CLOCK_Handler+0x21e>
    437a:	f000 f8cb 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    437e:	2101      	movs	r1, #1
    4380:	4628      	mov	r0, r5
    4382:	f008 fbb0 	bl	cae6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4386:	2800      	cmp	r0, #0
    4388:	d0f9      	beq.n	437e <MPSL_IRQ_CLOCK_Handler+0x20e>
    438a:	2002      	movs	r0, #2
    438c:	61a0      	str	r0, [r4, #24]
    438e:	f008 fbd6 	bl	cb3e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4392:	b1b0      	cbz	r0, 43c2 <MPSL_IRQ_CLOCK_Handler+0x252>
    4394:	f000 f9e6 	bl	4764 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4398:	7e21      	ldrb	r1, [r4, #24]
    439a:	f001 0103 	and.w	r1, r1, #3
    439e:	4288      	cmp	r0, r1
    43a0:	d10f      	bne.n	43c2 <MPSL_IRQ_CLOCK_Handler+0x252>
    43a2:	79b0      	ldrb	r0, [r6, #6]
    43a4:	b150      	cbz	r0, 43bc <MPSL_IRQ_CLOCK_Handler+0x24c>
    43a6:	2002      	movs	r0, #2
    43a8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    43ac:	e070      	b.n	4490 <MPSL_IRQ_CLOCK_Handler+0x320>
    43ae:	4847      	ldr	r0, [pc, #284]	; (44cc <MPSL_IRQ_CLOCK_Handler+0x35c>)
    43b0:	e7ec      	b.n	438c <MPSL_IRQ_CLOCK_Handler+0x21c>
    43b2:	4847      	ldr	r0, [pc, #284]	; (44d0 <MPSL_IRQ_CLOCK_Handler+0x360>)
    43b4:	e7ea      	b.n	438c <MPSL_IRQ_CLOCK_Handler+0x21c>
    43b6:	f240 312b 	movw	r1, #811	; 0x32b
    43ba:	e04d      	b.n	4458 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    43bc:	f000 f9a6 	bl	470c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    43c0:	e066      	b.n	4490 <MPSL_IRQ_CLOCK_Handler+0x320>
    43c2:	f8c5 800c 	str.w	r8, [r5, #12]
    43c6:	f44f 7a82 	mov.w	sl, #260	; 0x104
    43ca:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    43ce:	69a0      	ldr	r0, [r4, #24]
    43d0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    43d4:	f008 fc18 	bl	cc08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    43d8:	b940      	cbnz	r0, 43ec <MPSL_IRQ_CLOCK_Handler+0x27c>
    43da:	f008 fc1f 	bl	cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    43de:	b928      	cbnz	r0, 43ec <MPSL_IRQ_CLOCK_Handler+0x27c>
    43e0:	f008 fc33 	bl	cc4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    43e4:	b910      	cbnz	r0, 43ec <MPSL_IRQ_CLOCK_Handler+0x27c>
    43e6:	f008 fc44 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    43ea:	b138      	cbz	r0, 43fc <MPSL_IRQ_CLOCK_Handler+0x28c>
    43ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    43f0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    43f4:	4937      	ldr	r1, [pc, #220]	; (44d4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    43f6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    43fa:	6008      	str	r0, [r1, #0]
    43fc:	f008 fc04 	bl	cc08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4400:	b940      	cbnz	r0, 4414 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4402:	f008 fc0b 	bl	cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4406:	b928      	cbnz	r0, 4414 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4408:	f008 fc1f 	bl	cc4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    440c:	b910      	cbnz	r0, 4414 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    440e:	f008 fc30 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4412:	b118      	cbz	r0, 441c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4414:	492f      	ldr	r1, [pc, #188]	; (44d4 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4416:	3110      	adds	r1, #16
    4418:	f8c1 8000 	str.w	r8, [r1]
    441c:	f8c5 8008 	str.w	r8, [r5, #8]
    4420:	2002      	movs	r0, #2
    4422:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4426:	79b0      	ldrb	r0, [r6, #6]
    4428:	bb90      	cbnz	r0, 4490 <MPSL_IRQ_CLOCK_Handler+0x320>
    442a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    442e:	f010 0f02 	tst.w	r0, #2
    4432:	d00f      	beq.n	4454 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4434:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 44d8 <MPSL_IRQ_CLOCK_Handler+0x368>
    4438:	f8d9 1000 	ldr.w	r1, [r9]
    443c:	43c9      	mvns	r1, r1
    443e:	f341 1100 	sbfx	r1, r1, #4, #1
    4442:	f101 0801 	add.w	r8, r1, #1
    4446:	f8d9 1000 	ldr.w	r1, [r9]
    444a:	f041 0110 	orr.w	r1, r1, #16
    444e:	f8c9 1000 	str.w	r1, [r9]
    4452:	e007      	b.n	4464 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    4454:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    4458:	206d      	movs	r0, #109	; 0x6d
    445a:	f000 f9e1 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    445e:	bf00      	nop
    4460:	f000 fb04 	bl	4a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4464:	4651      	mov	r1, sl
    4466:	4628      	mov	r0, r5
    4468:	f008 fb38 	bl	cadc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    446c:	2800      	cmp	r0, #0
    446e:	d0f7      	beq.n	4460 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4470:	f000 f94c 	bl	470c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4474:	f1b8 0f00 	cmp.w	r8, #0
    4478:	d105      	bne.n	4486 <MPSL_IRQ_CLOCK_Handler+0x316>
    447a:	f8d9 1000 	ldr.w	r1, [r9]
    447e:	f021 0110 	bic.w	r1, r1, #16
    4482:	f8c9 1000 	str.w	r1, [r9]
    4486:	2002      	movs	r0, #2
    4488:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    448c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    4490:	79a0      	ldrb	r0, [r4, #6]
    4492:	b170      	cbz	r0, 44b2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4494:	7830      	ldrb	r0, [r6, #0]
    4496:	b960      	cbnz	r0, 44b2 <MPSL_IRQ_CLOCK_Handler+0x342>
    4498:	f000 f94a 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    449c:	4606      	mov	r6, r0
    449e:	f000 fa2f 	bl	4900 <mpsl_temperature_get>
    44a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    44a6:	b116      	cbz	r6, 44ae <MPSL_IRQ_CLOCK_Handler+0x33e>
    44a8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    44ac:	e001      	b.n	44b2 <MPSL_IRQ_CLOCK_Handler+0x342>
    44ae:	e9c4 0104 	strd	r0, r1, [r4, #16]
    44b2:	2101      	movs	r1, #1
    44b4:	4628      	mov	r0, r5
    44b6:	f008 fb16 	bl	cae6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    44ba:	b108      	cbz	r0, 44c0 <MPSL_IRQ_CLOCK_Handler+0x350>
    44bc:	f000 f932 	bl	4724 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    44c0:	72a7      	strb	r7, [r4, #10]
    44c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44c6:	0000      	.short	0x0000
    44c8:	20000038 	.word	0x20000038
    44cc:	00020001 	.word	0x00020001
    44d0:	00030001 	.word	0x00030001
    44d4:	4000053c 	.word	0x4000053c
    44d8:	e000ed10 	.word	0xe000ed10

000044dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    44dc:	b510      	push	{r4, lr}
    44de:	f3ef 8410 	mrs	r4, PRIMASK
    44e2:	b672      	cpsid	i
    44e4:	480a      	ldr	r0, [pc, #40]	; (4510 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    44e6:	7841      	ldrb	r1, [r0, #1]
    44e8:	b129      	cbz	r1, 44f6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    44ea:	7841      	ldrb	r1, [r0, #1]
    44ec:	1e49      	subs	r1, r1, #1
    44ee:	7041      	strb	r1, [r0, #1]
    44f0:	7841      	ldrb	r1, [r0, #1]
    44f2:	b129      	cbz	r1, 4500 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    44f4:	e008      	b.n	4508 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    44f6:	f240 110d 	movw	r1, #269	; 0x10d
    44fa:	206d      	movs	r0, #109	; 0x6d
    44fc:	f000 f990 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4500:	7880      	ldrb	r0, [r0, #2]
    4502:	b908      	cbnz	r0, 4508 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4504:	f000 f922 	bl	474c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4508:	2c00      	cmp	r4, #0
    450a:	d100      	bne.n	450e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    450c:	b662      	cpsie	i
    450e:	bd10      	pop	{r4, pc}
    4510:	20000038 	.word	0x20000038

00004514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4514:	b510      	push	{r4, lr}
    4516:	f3ef 8410 	mrs	r4, PRIMASK
    451a:	b672      	cpsid	i
    451c:	4806      	ldr	r0, [pc, #24]	; (4538 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    451e:	7841      	ldrb	r1, [r0, #1]
    4520:	1c49      	adds	r1, r1, #1
    4522:	7041      	strb	r1, [r0, #1]
    4524:	7840      	ldrb	r0, [r0, #1]
    4526:	2801      	cmp	r0, #1
    4528:	d101      	bne.n	452e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    452a:	f008 faf3 	bl	cb14 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    452e:	2c00      	cmp	r4, #0
    4530:	d100      	bne.n	4534 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    4532:	b662      	cpsie	i
    4534:	bd10      	pop	{r4, pc}
    4536:	0000      	.short	0x0000
    4538:	20000038 	.word	0x20000038

0000453c <mpsl_clock_hfclk_release>:
    453c:	4805      	ldr	r0, [pc, #20]	; (4554 <mpsl_clock_hfclk_release+0x18>)
    453e:	b510      	push	{r4, lr}
    4540:	78c1      	ldrb	r1, [r0, #3]
    4542:	b121      	cbz	r1, 454e <mpsl_clock_hfclk_release+0x12>
    4544:	2100      	movs	r1, #0
    4546:	7101      	strb	r1, [r0, #4]
    4548:	70c1      	strb	r1, [r0, #3]
    454a:	f7ff ffc7 	bl	44dc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    454e:	2000      	movs	r0, #0
    4550:	bd10      	pop	{r4, pc}
    4552:	0000      	.short	0x0000
    4554:	20000038 	.word	0x20000038

00004558 <mpsl_clock_hfclk_request>:
    4558:	b570      	push	{r4, r5, r6, lr}
    455a:	4c0c      	ldr	r4, [pc, #48]	; (458c <mpsl_clock_hfclk_request+0x34>)
    455c:	78e1      	ldrb	r1, [r4, #3]
    455e:	b961      	cbnz	r1, 457a <mpsl_clock_hfclk_request+0x22>
    4560:	2501      	movs	r5, #1
    4562:	70e5      	strb	r5, [r4, #3]
    4564:	61e0      	str	r0, [r4, #28]
    4566:	f7ff ffd5 	bl	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    456a:	f000 f8e1 	bl	4730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    456e:	b130      	cbz	r0, 457e <mpsl_clock_hfclk_request+0x26>
    4570:	69e0      	ldr	r0, [r4, #28]
    4572:	b110      	cbz	r0, 457a <mpsl_clock_hfclk_request+0x22>
    4574:	4780      	blx	r0
    4576:	2000      	movs	r0, #0
    4578:	61e0      	str	r0, [r4, #28]
    457a:	2000      	movs	r0, #0
    457c:	bd70      	pop	{r4, r5, r6, pc}
    457e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4582:	7125      	strb	r5, [r4, #4]
    4584:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4588:	e7f7      	b.n	457a <mpsl_clock_hfclk_request+0x22>
    458a:	0000      	.short	0x0000
    458c:	20000038 	.word	0x20000038

00004590 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4594:	0004      	movs	r4, r0
    4596:	f06f 0015 	mvn.w	r0, #21
    459a:	d03c      	beq.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    459c:	7821      	ldrb	r1, [r4, #0]
    459e:	2904      	cmp	r1, #4
    45a0:	d839      	bhi.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45a2:	2900      	cmp	r1, #0
    45a4:	7861      	ldrb	r1, [r4, #1]
    45a6:	d038      	beq.n	461a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    45a8:	2900      	cmp	r1, #0
    45aa:	d134      	bne.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45ac:	78a1      	ldrb	r1, [r4, #2]
    45ae:	2900      	cmp	r1, #0
    45b0:	d131      	bne.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45b2:	2000      	movs	r0, #0
    45b4:	f008 fa5d 	bl	ca72 <MPSL_IRQ_RADIO_Handler+0x1e>
    45b8:	2000      	movs	r0, #0
    45ba:	f008 fa4d 	bl	ca58 <MPSL_IRQ_RADIO_Handler+0x4>
    45be:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    45c2:	f04f 31ff 	mov.w	r1, #4294967295
    45c6:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    45ca:	2500      	movs	r5, #0
    45cc:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    45d0:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    45d4:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    45d8:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    45dc:	4e13      	ldr	r6, [pc, #76]	; (462c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    45de:	7075      	strb	r5, [r6, #1]
    45e0:	88a0      	ldrh	r0, [r4, #4]
    45e2:	81b0      	strh	r0, [r6, #12]
    45e4:	f008 fa8d 	bl	cb02 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    45e8:	2701      	movs	r7, #1
    45ea:	b108      	cbz	r0, 45f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    45ec:	70f7      	strb	r7, [r6, #3]
    45ee:	7077      	strb	r7, [r6, #1]
    45f0:	2101      	movs	r1, #1
    45f2:	4640      	mov	r0, r8
    45f4:	f008 fa77 	bl	cae6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    45f8:	b108      	cbz	r0, 45fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    45fa:	f000 f893 	bl	4724 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    45fe:	4620      	mov	r0, r4
    4600:	f7ff fea0 	bl	4344 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4604:	7277      	strb	r7, [r6, #9]
    4606:	2000      	movs	r0, #0
    4608:	f008 fa26 	bl	ca58 <MPSL_IRQ_RADIO_Handler+0x4>
    460c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4610:	4628      	mov	r0, r5
    4612:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    461a:	2900      	cmp	r1, #0
    461c:	d0fb      	beq.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    461e:	2920      	cmp	r1, #32
    4620:	d8f9      	bhi.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4622:	78a1      	ldrb	r1, [r4, #2]
    4624:	2921      	cmp	r1, #33	; 0x21
    4626:	d9c4      	bls.n	45b2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4628:	e7f5      	b.n	4616 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    462a:	0000      	.short	0x0000
    462c:	20000038 	.word	0x20000038

00004630 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4630:	4801      	ldr	r0, [pc, #4]	; (4638 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4632:	8980      	ldrh	r0, [r0, #12]
    4634:	4770      	bx	lr
    4636:	0000      	.short	0x0000
    4638:	20000038 	.word	0x20000038

0000463c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    463c:	b510      	push	{r4, lr}
    463e:	480d      	ldr	r0, [pc, #52]	; (4674 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4640:	f008 fac0 	bl	cbc4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4644:	490b      	ldr	r1, [pc, #44]	; (4674 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4646:	3908      	subs	r1, #8
    4648:	b148      	cbz	r0, 465e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    464a:	2001      	movs	r0, #1
    464c:	7008      	strb	r0, [r1, #0]
    464e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4652:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    465a:	f7ff bf5b 	b.w	4514 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    465e:	7a88      	ldrb	r0, [r1, #10]
    4660:	2802      	cmp	r0, #2
    4662:	d101      	bne.n	4668 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4664:	f7ff fdc8 	bl	41f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    466c:	4801      	ldr	r0, [pc, #4]	; (4674 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    466e:	f008 bac0 	b.w	cbf2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4672:	0000      	.short	0x0000
    4674:	20000040 	.word	0x20000040

00004678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4678:	4802      	ldr	r0, [pc, #8]	; (4684 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    467a:	7a80      	ldrb	r0, [r0, #10]
    467c:	2800      	cmp	r0, #0
    467e:	d000      	beq.n	4682 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4680:	2001      	movs	r0, #1
    4682:	4770      	bx	lr
    4684:	20000038 	.word	0x20000038

00004688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    468a:	4d1f      	ldr	r5, [pc, #124]	; (4708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    468c:	7ae8      	ldrb	r0, [r5, #11]
    468e:	2800      	cmp	r0, #0
    4690:	d10f      	bne.n	46b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4692:	7e28      	ldrb	r0, [r5, #24]
    4694:	f000 0003 	and.w	r0, r0, #3
    4698:	f008 fa41 	bl	cb1e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    469c:	2800      	cmp	r0, #0
    469e:	d008      	beq.n	46b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    46a0:	f3ef 8110 	mrs	r1, PRIMASK
    46a4:	b672      	cpsid	i
    46a6:	f7ff ffe7 	bl	4678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    46aa:	b118      	cbz	r0, 46b4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    46ac:	2900      	cmp	r1, #0
    46ae:	d100      	bne.n	46b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    46b0:	b662      	cpsie	i
    46b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46b4:	2601      	movs	r6, #1
    46b6:	72ae      	strb	r6, [r5, #10]
    46b8:	b901      	cbnz	r1, 46bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    46ba:	b662      	cpsie	i
    46bc:	2018      	movs	r0, #24
    46be:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    46c2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    46c6:	61a6      	str	r6, [r4, #24]
    46c8:	f44f 7020 	mov.w	r0, #640	; 0x280
    46cc:	f8ad 0000 	strh.w	r0, [sp]
    46d0:	f8bd 0000 	ldrh.w	r0, [sp]
    46d4:	1e41      	subs	r1, r0, #1
    46d6:	f8ad 1000 	strh.w	r1, [sp]
    46da:	d2f9      	bcs.n	46d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    46dc:	2700      	movs	r7, #0
    46de:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    46e2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    46e6:	4808      	ldr	r0, [pc, #32]	; (4708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    46e8:	3008      	adds	r0, #8
    46ea:	f008 fa7e 	bl	cbea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    46ee:	702f      	strb	r7, [r5, #0]
    46f0:	f7ff fd82 	bl	41f8 <MPSL_IRQ_CLOCK_Handler+0x88>
    46f4:	6166      	str	r6, [r4, #20]
    46f6:	7968      	ldrb	r0, [r5, #5]
    46f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    46fc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4700:	2018      	movs	r0, #24
    4702:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4708:	20000038 	.word	0x20000038

0000470c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    470c:	b510      	push	{r4, lr}
    470e:	4c04      	ldr	r4, [pc, #16]	; (4720 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4710:	7e20      	ldrb	r0, [r4, #24]
    4712:	f000 0003 	and.w	r0, r0, #3
    4716:	f008 fa02 	bl	cb1e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    471a:	2800      	cmp	r0, #0
    471c:	d0f8      	beq.n	4710 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    471e:	bd10      	pop	{r4, pc}
    4720:	20000038 	.word	0x20000038

00004724 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4724:	4901      	ldr	r1, [pc, #4]	; (472c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4726:	2001      	movs	r0, #1
    4728:	7008      	strb	r0, [r1, #0]
    472a:	4770      	bx	lr
    472c:	200002ac 	.word	0x200002ac

00004730 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4730:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4734:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4738:	b918      	cbnz	r0, 4742 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    473a:	4803      	ldr	r0, [pc, #12]	; (4748 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    473c:	7800      	ldrb	r0, [r0, #0]
    473e:	2800      	cmp	r0, #0
    4740:	d000      	beq.n	4744 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4742:	2001      	movs	r0, #1
    4744:	4770      	bx	lr
    4746:	0000      	.short	0x0000
    4748:	200002ac 	.word	0x200002ac

0000474c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    474c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4750:	2101      	movs	r1, #1
    4752:	6041      	str	r1, [r0, #4]
    4754:	2100      	movs	r1, #0
    4756:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    475a:	4801      	ldr	r0, [pc, #4]	; (4760 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    475c:	7001      	strb	r1, [r0, #0]
    475e:	4770      	bx	lr
    4760:	200002ac 	.word	0x200002ac

00004764 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4764:	4802      	ldr	r0, [pc, #8]	; (4770 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4766:	6800      	ldr	r0, [r0, #0]
    4768:	f000 0003 	and.w	r0, r0, #3
    476c:	4770      	bx	lr
    476e:	0000      	.short	0x0000
    4770:	4000041c 	.word	0x4000041c
    4774:	b510      	push	{r4, lr}
    4776:	b131      	cbz	r1, 4786 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4778:	2901      	cmp	r1, #1
    477a:	d007      	beq.n	478c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    477c:	f240 3102 	movw	r1, #770	; 0x302
    4780:	a005      	add	r0, pc, #20	; (adr r0, 4798 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4782:	f000 f821 	bl	47c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4786:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    478a:	e001      	b.n	4790 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    478c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4790:	f000 0001 	and.w	r0, r0, #1
    4794:	bd10      	pop	{r4, pc}
    4796:	0000      	.short	0x0000
    4798:	5f66726e 	.word	0x5f66726e
    479c:	636f6c63 	.word	0x636f6c63
    47a0:	00682e6b 	.word	0x00682e6b
    47a4:	f3bf 8f4f 	dsb	sy
    47a8:	4805      	ldr	r0, [pc, #20]	; (47c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    47aa:	6801      	ldr	r1, [r0, #0]
    47ac:	4a05      	ldr	r2, [pc, #20]	; (47c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    47ae:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    47b2:	4311      	orrs	r1, r2
    47b4:	6001      	str	r1, [r0, #0]
    47b6:	f3bf 8f4f 	dsb	sy
    47ba:	bf00      	nop
    47bc:	e7fd      	b.n	47ba <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    47be:	0000      	.short	0x0000
    47c0:	e000ed0c 	.word	0xe000ed0c
    47c4:	05fa0004 	.word	0x05fa0004

000047c8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    47c8:	b672      	cpsid	i
    47ca:	4a03      	ldr	r2, [pc, #12]	; (47d8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    47cc:	6852      	ldr	r2, [r2, #4]
    47ce:	b102      	cbz	r2, 47d2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    47d0:	4790      	blx	r2
    47d2:	f7ff ffe7 	bl	47a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    47d6:	0000      	.short	0x0000
    47d8:	20000058 	.word	0x20000058
    47dc:	4806      	ldr	r0, [pc, #24]	; (47f8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    47de:	b510      	push	{r4, lr}
    47e0:	2100      	movs	r1, #0
    47e2:	6001      	str	r1, [r0, #0]
    47e4:	2101      	movs	r1, #1
    47e6:	6001      	str	r1, [r0, #0]
    47e8:	4608      	mov	r0, r1
    47ea:	f008 f9bf 	bl	cb6c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    47ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    47f2:	2001      	movs	r0, #1
    47f4:	f008 b9ad 	b.w	cb52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    47f8:	40001ffc 	.word	0x40001ffc
    47fc:	4807      	ldr	r0, [pc, #28]	; (481c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    47fe:	b510      	push	{r4, lr}
    4800:	2101      	movs	r1, #1
    4802:	6041      	str	r1, [r0, #4]
    4804:	1e89      	subs	r1, r1, #2
    4806:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    480a:	200c      	movs	r0, #12
    480c:	f008 f9ae 	bl	cb6c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4814:	200c      	movs	r0, #12
    4816:	f008 b99c 	b.w	cb52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    481a:	0000      	.short	0x0000
    481c:	4000c000 	.word	0x4000c000

00004820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4820:	b50e      	push	{r1, r2, r3, lr}
    4822:	b672      	cpsid	i
    4824:	4a0f      	ldr	r2, [pc, #60]	; (4864 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4826:	6855      	ldr	r5, [r2, #4]
    4828:	b1d5      	cbz	r5, 4860 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    482a:	2200      	movs	r2, #0
    482c:	4603      	mov	r3, r0
    482e:	466e      	mov	r6, sp
    4830:	240a      	movs	r4, #10
    4832:	e003      	b.n	483c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4834:	fbb0 f0f4 	udiv	r0, r0, r4
    4838:	1c52      	adds	r2, r2, #1
    483a:	b2d2      	uxtb	r2, r2
    483c:	2800      	cmp	r0, #0
    483e:	d1f9      	bne.n	4834 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4840:	54b0      	strb	r0, [r6, r2]
    4842:	e009      	b.n	4858 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4844:	fbb3 f0f4 	udiv	r0, r3, r4
    4848:	fb04 3010 	mls	r0, r4, r0, r3
    484c:	fbb3 f3f4 	udiv	r3, r3, r4
    4850:	1e52      	subs	r2, r2, #1
    4852:	b2d2      	uxtb	r2, r2
    4854:	3030      	adds	r0, #48	; 0x30
    4856:	54b0      	strb	r0, [r6, r2]
    4858:	2a00      	cmp	r2, #0
    485a:	d1f3      	bne.n	4844 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    485c:	4630      	mov	r0, r6
    485e:	47a8      	blx	r5
    4860:	f7ff ffa0 	bl	47a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4864:	20000058 	.word	0x20000058

00004868 <mpsl_init>:
    4868:	b570      	push	{r4, r5, r6, lr}
    486a:	4c17      	ldr	r4, [pc, #92]	; (48c8 <mpsl_init+0x60>)
    486c:	4606      	mov	r6, r0
    486e:	460d      	mov	r5, r1
    4870:	7860      	ldrb	r0, [r4, #1]
    4872:	b110      	cbz	r0, 487a <mpsl_init+0x12>
    4874:	f04f 30ff 	mov.w	r0, #4294967295
    4878:	bd70      	pop	{r4, r5, r6, pc}
    487a:	b906      	cbnz	r6, 487e <mpsl_init+0x16>
    487c:	4e13      	ldr	r6, [pc, #76]	; (48cc <mpsl_init+0x64>)
    487e:	6062      	str	r2, [r4, #4]
    4880:	7025      	strb	r5, [r4, #0]
    4882:	f7ff ffab 	bl	47dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4886:	f7ff ffb9 	bl	47fc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    488a:	4630      	mov	r0, r6
    488c:	f7ff fe80 	bl	4590 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4890:	0006      	movs	r6, r0
    4892:	d1f1      	bne.n	4878 <mpsl_init+0x10>
    4894:	f7fe feec 	bl	3670 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4898:	f7ff fef6 	bl	4688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    489c:	f008 f8b3 	bl	ca06 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    48a0:	4628      	mov	r0, r5
    48a2:	f008 f956 	bl	cb52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    48a6:	2001      	movs	r0, #1
    48a8:	2d00      	cmp	r5, #0
    48aa:	db09      	blt.n	48c0 <mpsl_init+0x58>
    48ac:	f005 011f 	and.w	r1, r5, #31
    48b0:	fa00 f101 	lsl.w	r1, r0, r1
    48b4:	096a      	lsrs	r2, r5, #5
    48b6:	0092      	lsls	r2, r2, #2
    48b8:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    48bc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    48c0:	7060      	strb	r0, [r4, #1]
    48c2:	4630      	mov	r0, r6
    48c4:	bd70      	pop	{r4, r5, r6, pc}
    48c6:	0000      	.short	0x0000
    48c8:	20000058 	.word	0x20000058
    48cc:	0000cb8e 	.word	0x0000cb8e

000048d0 <mpsl_is_initialized>:
    48d0:	4801      	ldr	r0, [pc, #4]	; (48d8 <mpsl_is_initialized+0x8>)
    48d2:	7840      	ldrb	r0, [r0, #1]
    48d4:	4770      	bx	lr
    48d6:	0000      	.short	0x0000
    48d8:	20000058 	.word	0x20000058

000048dc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    48dc:	4807      	ldr	r0, [pc, #28]	; (48fc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    48de:	f990 0000 	ldrsb.w	r0, [r0]
    48e2:	2800      	cmp	r0, #0
    48e4:	db09      	blt.n	48fa <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    48e6:	f000 021f 	and.w	r2, r0, #31
    48ea:	2101      	movs	r1, #1
    48ec:	4091      	lsls	r1, r2
    48ee:	0940      	lsrs	r0, r0, #5
    48f0:	0080      	lsls	r0, r0, #2
    48f2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    48f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    48fa:	4770      	bx	lr
    48fc:	20000058 	.word	0x20000058

00004900 <mpsl_temperature_get>:
    4900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4904:	2601      	movs	r6, #1
    4906:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    490a:	0331      	lsls	r1, r6, #12
    490c:	f04f 0800 	mov.w	r8, #0
    4910:	4640      	mov	r0, r8
    4912:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4916:	f3bf 8f4f 	dsb	sy
    491a:	f3bf 8f6f 	isb	sy
    491e:	4c16      	ldr	r4, [pc, #88]	; (4978 <mpsl_temperature_get+0x78>)
    4920:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4924:	200c      	movs	r0, #12
    4926:	f008 f940 	bl	cbaa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    492a:	4d14      	ldr	r5, [pc, #80]	; (497c <mpsl_temperature_get+0x7c>)
    492c:	6828      	ldr	r0, [r5, #0]
    492e:	43c0      	mvns	r0, r0
    4930:	f340 1700 	sbfx	r7, r0, #4, #1
    4934:	6828      	ldr	r0, [r5, #0]
    4936:	f040 0010 	orr.w	r0, r0, #16
    493a:	6028      	str	r0, [r5, #0]
    493c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4940:	6026      	str	r6, [r4, #0]
    4942:	1c7f      	adds	r7, r7, #1
    4944:	e002      	b.n	494c <mpsl_temperature_get+0x4c>
    4946:	bf00      	nop
    4948:	f000 f890 	bl	4a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    494c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4950:	2800      	cmp	r0, #0
    4952:	d0f9      	beq.n	4948 <mpsl_temperature_get+0x48>
    4954:	b91f      	cbnz	r7, 495e <mpsl_temperature_get+0x5e>
    4956:	6828      	ldr	r0, [r5, #0]
    4958:	f020 0010 	bic.w	r0, r0, #16
    495c:	6028      	str	r0, [r5, #0]
    495e:	4808      	ldr	r0, [pc, #32]	; (4980 <mpsl_temperature_get+0x80>)
    4960:	6805      	ldr	r5, [r0, #0]
    4962:	6066      	str	r6, [r4, #4]
    4964:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4968:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    496c:	200c      	movs	r0, #12
    496e:	f008 f91c 	bl	cbaa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4972:	4628      	mov	r0, r5
    4974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4978:	4000c000 	.word	0x4000c000
    497c:	e000ed10 	.word	0xe000ed10
    4980:	4000c508 	.word	0x4000c508

00004984 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4984:	b510      	push	{r4, lr}
    4986:	4602      	mov	r2, r0
    4988:	2005      	movs	r0, #5
    498a:	490c      	ldr	r1, [pc, #48]	; (49bc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    498c:	e004      	b.n	4998 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    498e:	bf00      	nop
    4990:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4994:	791b      	ldrb	r3, [r3, #4]
    4996:	b133      	cbz	r3, 49a6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4998:	1e40      	subs	r0, r0, #1
    499a:	b2c0      	uxtb	r0, r0
    499c:	d2f8      	bcs.n	4990 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    499e:	2148      	movs	r1, #72	; 0x48
    49a0:	2069      	movs	r0, #105	; 0x69
    49a2:	f7ff ff3d 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49a6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    49aa:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    49ae:	2200      	movs	r2, #0
    49b0:	714a      	strb	r2, [r1, #5]
    49b2:	718a      	strb	r2, [r1, #6]
    49b4:	2201      	movs	r2, #1
    49b6:	710a      	strb	r2, [r1, #4]
    49b8:	bd10      	pop	{r4, pc}
    49ba:	0000      	.short	0x0000
    49bc:	200010b4 	.word	0x200010b4

000049c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    49c0:	b510      	push	{r4, lr}
    49c2:	2805      	cmp	r0, #5
    49c4:	d301      	bcc.n	49ca <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    49c6:	2158      	movs	r1, #88	; 0x58
    49c8:	e006      	b.n	49d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    49ca:	490a      	ldr	r1, [pc, #40]	; (49f4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    49cc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    49d0:	7901      	ldrb	r1, [r0, #4]
    49d2:	2901      	cmp	r1, #1
    49d4:	d003      	beq.n	49de <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    49d6:	2159      	movs	r1, #89	; 0x59
    49d8:	2069      	movs	r0, #105	; 0x69
    49da:	f7ff ff21 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49de:	7941      	ldrb	r1, [r0, #5]
    49e0:	7982      	ldrb	r2, [r0, #6]
    49e2:	1c49      	adds	r1, r1, #1
    49e4:	b2c9      	uxtb	r1, r1
    49e6:	428a      	cmp	r2, r1
    49e8:	d000      	beq.n	49ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    49ea:	7141      	strb	r1, [r0, #5]
    49ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49f0:	f7ff bf74 	b.w	48dc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    49f4:	200010b4 	.word	0x200010b4

000049f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    49f8:	b570      	push	{r4, r5, r6, lr}
    49fa:	2505      	movs	r5, #5
    49fc:	4e0e      	ldr	r6, [pc, #56]	; (4a38 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    49fe:	4c0f      	ldr	r4, [pc, #60]	; (4a3c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4a00:	e016      	b.n	4a30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4a02:	7821      	ldrb	r1, [r4, #0]
    4a04:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4a08:	7902      	ldrb	r2, [r0, #4]
    4a0a:	2a01      	cmp	r2, #1
    4a0c:	d108      	bne.n	4a20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4a0e:	7942      	ldrb	r2, [r0, #5]
    4a10:	7983      	ldrb	r3, [r0, #6]
    4a12:	429a      	cmp	r2, r3
    4a14:	d004      	beq.n	4a20 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4a16:	7942      	ldrb	r2, [r0, #5]
    4a18:	7182      	strb	r2, [r0, #6]
    4a1a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4a1e:	4780      	blx	r0
    4a20:	7820      	ldrb	r0, [r4, #0]
    4a22:	1c40      	adds	r0, r0, #1
    4a24:	b2c0      	uxtb	r0, r0
    4a26:	7020      	strb	r0, [r4, #0]
    4a28:	2805      	cmp	r0, #5
    4a2a:	d301      	bcc.n	4a30 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4a2c:	2000      	movs	r0, #0
    4a2e:	7020      	strb	r0, [r4, #0]
    4a30:	1e6d      	subs	r5, r5, #1
    4a32:	b2ed      	uxtb	r5, r5
    4a34:	d2e5      	bcs.n	4a02 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4a36:	bd70      	pop	{r4, r5, r6, pc}
    4a38:	200010b4 	.word	0x200010b4
    4a3c:	200002ad 	.word	0x200002ad

00004a40 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4a40:	b500      	push	{lr}
    4a42:	f008 f8e1 	bl	cc08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4a46:	b940      	cbnz	r0, 4a5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4a48:	f008 f8e8 	bl	cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4a4c:	b928      	cbnz	r0, 4a5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4a4e:	f008 f8fc 	bl	cc4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4a52:	b910      	cbnz	r0, 4a5a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4a54:	f008 f90d 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4a58:	b108      	cbz	r0, 4a5e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4a5a:	4802      	ldr	r0, [pc, #8]	; (4a64 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4a5c:	bd00      	pop	{pc}
    4a5e:	4802      	ldr	r0, [pc, #8]	; (4a68 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4a60:	bd00      	pop	{pc}
    4a62:	0000      	.short	0x0000
    4a64:	4000050c 	.word	0x4000050c
    4a68:	4001e700 	.word	0x4001e700

00004a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4a6c:	b510      	push	{r4, lr}
    4a6e:	f008 f900 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4a72:	b330      	cbz	r0, 4ac2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4a74:	f3ef 8010 	mrs	r0, PRIMASK
    4a78:	b1c8      	cbz	r0, 4aae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4a7a:	2100      	movs	r1, #0
    4a7c:	b672      	cpsid	i
    4a7e:	4812      	ldr	r0, [pc, #72]	; (4ac8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4a80:	6802      	ldr	r2, [r0, #0]
    4a82:	6803      	ldr	r3, [r0, #0]
    4a84:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4a88:	f043 0310 	orr.w	r3, r3, #16
    4a8c:	6003      	str	r3, [r0, #0]
    4a8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4a92:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4a96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4a9a:	431c      	orrs	r4, r3
    4a9c:	d000      	beq.n	4aa0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4a9e:	bf40      	sev
    4aa0:	bf20      	wfe
    4aa2:	bf00      	nop
    4aa4:	bf00      	nop
    4aa6:	bf00      	nop
    4aa8:	bf00      	nop
    4aaa:	b112      	cbz	r2, 4ab2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4aac:	e005      	b.n	4aba <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4aae:	2101      	movs	r1, #1
    4ab0:	e7e4      	b.n	4a7c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4ab2:	6802      	ldr	r2, [r0, #0]
    4ab4:	f022 0210 	bic.w	r2, r2, #16
    4ab8:	6002      	str	r2, [r0, #0]
    4aba:	2900      	cmp	r1, #0
    4abc:	d000      	beq.n	4ac0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4abe:	b662      	cpsie	i
    4ac0:	bd10      	pop	{r4, pc}
    4ac2:	bf20      	wfe
    4ac4:	bd10      	pop	{r4, pc}
    4ac6:	0000      	.short	0x0000
    4ac8:	e000ed10 	.word	0xe000ed10

00004acc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4acc:	4901      	ldr	r1, [pc, #4]	; (4ad4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4ace:	2001      	movs	r0, #1
    4ad0:	7088      	strb	r0, [r1, #2]
    4ad2:	4770      	bx	lr
    4ad4:	20000060 	.word	0x20000060

00004ad8 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4ad8:	0000cee3 0000cf13 0000ceff 0000ceed     ................
    4ae8:	0000cef9 0000cee7 0000cee1 0000cedf     ................
    4af8:	0000cf0f 0000cf05 0000cef3 0000ced9     ................
    4b08:	0000ced1 0000ced5 0000cecb              ............

00004b14 <mpsl_fem_disable>:
    4b14:	4801      	ldr	r0, [pc, #4]	; (4b1c <mpsl_fem_disable+0x8>)
    4b16:	6800      	ldr	r0, [r0, #0]
    4b18:	6800      	ldr	r0, [r0, #0]
    4b1a:	4700      	bx	r0
    4b1c:	20000074 	.word	0x20000074

00004b20 <mpsl_fem_lna_configuration_clear>:
    4b20:	4801      	ldr	r0, [pc, #4]	; (4b28 <mpsl_fem_lna_configuration_clear+0x8>)
    4b22:	6800      	ldr	r0, [r0, #0]
    4b24:	6940      	ldr	r0, [r0, #20]
    4b26:	4700      	bx	r0
    4b28:	20000074 	.word	0x20000074

00004b2c <mpsl_fem_lna_configuration_set>:
    4b2c:	4a01      	ldr	r2, [pc, #4]	; (4b34 <mpsl_fem_lna_configuration_set+0x8>)
    4b2e:	6812      	ldr	r2, [r2, #0]
    4b30:	68d2      	ldr	r2, [r2, #12]
    4b32:	4710      	bx	r2
    4b34:	20000074 	.word	0x20000074

00004b38 <mpsl_fem_pa_configuration_clear>:
    4b38:	4801      	ldr	r0, [pc, #4]	; (4b40 <mpsl_fem_pa_configuration_clear+0x8>)
    4b3a:	6800      	ldr	r0, [r0, #0]
    4b3c:	6900      	ldr	r0, [r0, #16]
    4b3e:	4700      	bx	r0
    4b40:	20000074 	.word	0x20000074

00004b44 <mpsl_fem_pa_configuration_set>:
    4b44:	4a01      	ldr	r2, [pc, #4]	; (4b4c <mpsl_fem_pa_configuration_set+0x8>)
    4b46:	6812      	ldr	r2, [r2, #0]
    4b48:	6892      	ldr	r2, [r2, #8]
    4b4a:	4710      	bx	r2
    4b4c:	20000074 	.word	0x20000074

00004b50 <mpsl_fem_pa_is_configured>:
    4b50:	4901      	ldr	r1, [pc, #4]	; (4b58 <mpsl_fem_pa_is_configured+0x8>)
    4b52:	6809      	ldr	r1, [r1, #0]
    4b54:	6a89      	ldr	r1, [r1, #40]	; 0x28
    4b56:	4708      	bx	r1
    4b58:	20000074 	.word	0x20000074

00004b5c <mpsl_fem_device_config_254_apply_get>:
    4b5c:	4801      	ldr	r0, [pc, #4]	; (4b64 <mpsl_fem_device_config_254_apply_get+0x8>)
    4b5e:	7800      	ldrb	r0, [r0, #0]
    4b60:	4770      	bx	lr
    4b62:	0000      	.short	0x0000
    4b64:	200002ae 	.word	0x200002ae
    4b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4b6a:	4c17      	ldr	r4, [pc, #92]	; (4bc8 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4b6c:	7a20      	ldrb	r0, [r4, #8]
    4b6e:	2802      	cmp	r0, #2
    4b70:	d200      	bcs.n	4b74 <mpsl_fem_device_config_254_apply_get+0x18>
    4b72:	2002      	movs	r0, #2
    4b74:	f88d 0001 	strb.w	r0, [sp, #1]
    4b78:	79e0      	ldrb	r0, [r4, #7]
    4b7a:	2803      	cmp	r0, #3
    4b7c:	d200      	bcs.n	4b80 <mpsl_fem_device_config_254_apply_get+0x24>
    4b7e:	2003      	movs	r0, #3
    4b80:	f88d 0000 	strb.w	r0, [sp]
    4b84:	79a0      	ldrb	r0, [r4, #6]
    4b86:	f8ad 0004 	strh.w	r0, [sp, #4]
    4b8a:	7960      	ldrb	r0, [r4, #5]
    4b8c:	f8ad 0002 	strh.w	r0, [sp, #2]
    4b90:	4668      	mov	r0, sp
    4b92:	f006 f9bb 	bl	af0c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4b96:	b108      	cbz	r0, 4b9c <mpsl_fem_device_config_254_apply_get+0x40>
    4b98:	2183      	movs	r1, #131	; 0x83
    4b9a:	e010      	b.n	4bbe <mpsl_fem_device_config_254_apply_get+0x62>
    4b9c:	68e0      	ldr	r0, [r4, #12]
    4b9e:	9002      	str	r0, [sp, #8]
    4ba0:	a802      	add	r0, sp, #8
    4ba2:	f006 f9c9 	bl	af38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4ba6:	b108      	cbz	r0, 4bac <mpsl_fem_device_config_254_apply_get+0x50>
    4ba8:	2187      	movs	r1, #135	; 0x87
    4baa:	e008      	b.n	4bbe <mpsl_fem_device_config_254_apply_get+0x62>
    4bac:	4807      	ldr	r0, [pc, #28]	; (4bcc <mpsl_fem_device_config_254_apply_get+0x70>)
    4bae:	6800      	ldr	r0, [r0, #0]
    4bb0:	9003      	str	r0, [sp, #12]
    4bb2:	a803      	add	r0, sp, #12
    4bb4:	f00b fa95 	bl	100e2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4bb8:	2800      	cmp	r0, #0
    4bba:	d003      	beq.n	4bc4 <mpsl_fem_device_config_254_apply_get+0x68>
    4bbc:	218b      	movs	r1, #139	; 0x8b
    4bbe:	2003      	movs	r0, #3
    4bc0:	f000 f8e2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bc4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4bc6:	0000      	.short	0x0000
    4bc8:	200010dc 	.word	0x200010dc
    4bcc:	00004e70 	.word	0x00004e70

00004bd0 <sdc_build_revision_get>:
    4bd0:	b510      	push	{r4, lr}
    4bd2:	b128      	cbz	r0, 4be0 <sdc_build_revision_get+0x10>
    4bd4:	2214      	movs	r2, #20
    4bd6:	4904      	ldr	r1, [pc, #16]	; (4be8 <sdc_build_revision_get+0x18>)
    4bd8:	f008 f89d 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4bdc:	2000      	movs	r0, #0
    4bde:	bd10      	pop	{r4, pc}
    4be0:	f06f 0015 	mvn.w	r0, #21
    4be4:	bd10      	pop	{r4, pc}
    4be6:	0000      	.short	0x0000
    4be8:	00004e8c 	.word	0x00004e8c

00004bec <sdc_cfg_set>:
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	0003      	movs	r3, r0
    4bf0:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4bf4:	d103      	bne.n	4bfe <sdc_cfg_set+0x12>
    4bf6:	4c29      	ldr	r4, [pc, #164]	; (4c9c <sdc_cfg_set+0xb0>)
    4bf8:	7863      	ldrb	r3, [r4, #1]
    4bfa:	b10b      	cbz	r3, 4c00 <sdc_cfg_set+0x14>
    4bfc:	1180      	asrs	r0, r0, #6
    4bfe:	bd70      	pop	{r4, r5, r6, pc}
    4c00:	b309      	cbz	r1, 4c46 <sdc_cfg_set+0x5a>
    4c02:	f06f 0515 	mvn.w	r5, #21
    4c06:	b37a      	cbz	r2, 4c68 <sdc_cfg_set+0x7c>
    4c08:	4b25      	ldr	r3, [pc, #148]	; (4ca0 <sdc_cfg_set+0xb4>)
    4c0a:	290c      	cmp	r1, #12
    4c0c:	d241      	bcs.n	4c92 <sdc_cfg_set+0xa6>
    4c0e:	e8df f001 	tbb	[pc, r1]
    4c12:	0640      	.short	0x0640
    4c14:	13100c09 	.word	0x13100c09
    4c18:	2616231b 	.word	0x2616231b
    4c1c:	312c      	.short	0x312c
    4c1e:	7810      	ldrb	r0, [r2, #0]
    4c20:	7018      	strb	r0, [r3, #0]
    4c22:	e02b      	b.n	4c7c <sdc_cfg_set+0x90>
    4c24:	7810      	ldrb	r0, [r2, #0]
    4c26:	7058      	strb	r0, [r3, #1]
    4c28:	e028      	b.n	4c7c <sdc_cfg_set+0x90>
    4c2a:	6810      	ldr	r0, [r2, #0]
    4c2c:	f8c3 0005 	str.w	r0, [r3, #5]
    4c30:	e024      	b.n	4c7c <sdc_cfg_set+0x90>
    4c32:	6810      	ldr	r0, [r2, #0]
    4c34:	60d8      	str	r0, [r3, #12]
    4c36:	e021      	b.n	4c7c <sdc_cfg_set+0x90>
    4c38:	7810      	ldrb	r0, [r2, #0]
    4c3a:	7098      	strb	r0, [r3, #2]
    4c3c:	e01e      	b.n	4c7c <sdc_cfg_set+0x90>
    4c3e:	7811      	ldrb	r1, [r2, #0]
    4c40:	2900      	cmp	r1, #0
    4c42:	d1dc      	bne.n	4bfe <sdc_cfg_set+0x12>
    4c44:	70d9      	strb	r1, [r3, #3]
    4c46:	e019      	b.n	4c7c <sdc_cfg_set+0x90>
    4c48:	78e0      	ldrb	r0, [r4, #3]
    4c4a:	b110      	cbz	r0, 4c52 <sdc_cfg_set+0x66>
    4c4c:	7810      	ldrb	r0, [r2, #0]
    4c4e:	2802      	cmp	r0, #2
    4c50:	d31f      	bcc.n	4c92 <sdc_cfg_set+0xa6>
    4c52:	7810      	ldrb	r0, [r2, #0]
    4c54:	7418      	strb	r0, [r3, #16]
    4c56:	e011      	b.n	4c7c <sdc_cfg_set+0x90>
    4c58:	8810      	ldrh	r0, [r2, #0]
    4c5a:	8258      	strh	r0, [r3, #18]
    4c5c:	e00e      	b.n	4c7c <sdc_cfg_set+0x90>
    4c5e:	7811      	ldrb	r1, [r2, #0]
    4c60:	2900      	cmp	r1, #0
    4c62:	d1cc      	bne.n	4bfe <sdc_cfg_set+0x12>
    4c64:	7119      	strb	r1, [r3, #4]
    4c66:	e009      	b.n	4c7c <sdc_cfg_set+0x90>
    4c68:	e013      	b.n	4c92 <sdc_cfg_set+0xa6>
    4c6a:	7810      	ldrb	r0, [r2, #0]
    4c6c:	2802      	cmp	r0, #2
    4c6e:	d310      	bcc.n	4c92 <sdc_cfg_set+0xa6>
    4c70:	7518      	strb	r0, [r3, #20]
    4c72:	e003      	b.n	4c7c <sdc_cfg_set+0x90>
    4c74:	7811      	ldrb	r1, [r2, #0]
    4c76:	2900      	cmp	r1, #0
    4c78:	d1c1      	bne.n	4bfe <sdc_cfg_set+0x12>
    4c7a:	7559      	strb	r1, [r3, #21]
    4c7c:	2201      	movs	r2, #1
    4c7e:	4908      	ldr	r1, [pc, #32]	; (4ca0 <sdc_cfg_set+0xb4>)
    4c80:	2000      	movs	r0, #0
    4c82:	f008 f967 	bl	cf54 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    4c86:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4c8a:	db04      	blt.n	4c96 <sdc_cfg_set+0xaa>
    4c8c:	f06f 000b 	mvn.w	r0, #11
    4c90:	bd70      	pop	{r4, r5, r6, pc}
    4c92:	4628      	mov	r0, r5
    4c94:	bd70      	pop	{r4, r5, r6, pc}
    4c96:	2101      	movs	r1, #1
    4c98:	70a1      	strb	r1, [r4, #2]
    4c9a:	bd70      	pop	{r4, r5, r6, pc}
    4c9c:	20000078 	.word	0x20000078
    4ca0:	200010dc 	.word	0x200010dc

00004ca4 <sdc_enable>:
    4ca4:	b570      	push	{r4, r5, r6, lr}
    4ca6:	460c      	mov	r4, r1
    4ca8:	0005      	movs	r5, r0
    4caa:	d019      	beq.n	4ce0 <sdc_enable+0x3c>
    4cac:	b1c4      	cbz	r4, 4ce0 <sdc_enable+0x3c>
    4cae:	f000 f913 	bl	4ed8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4cb2:	b1c0      	cbz	r0, 4ce6 <sdc_enable+0x42>
    4cb4:	4628      	mov	r0, r5
    4cb6:	f7ff fe65 	bl	4984 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4cba:	4d0c      	ldr	r5, [pc, #48]	; (4cec <sdc_enable+0x48>)
    4cbc:	2200      	movs	r2, #0
    4cbe:	490c      	ldr	r1, [pc, #48]	; (4cf0 <sdc_enable+0x4c>)
    4cc0:	7028      	strb	r0, [r5, #0]
    4cc2:	4620      	mov	r0, r4
    4cc4:	f008 f946 	bl	cf54 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    4cc8:	f00b ff0a 	bl	10ae0 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4ccc:	2100      	movs	r1, #0
    4cce:	7828      	ldrb	r0, [r5, #0]
    4cd0:	f006 faee 	bl	b2b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4cd4:	f7ff ff48 	bl	4b68 <mpsl_fem_device_config_254_apply_get+0xc>
    4cd8:	2001      	movs	r0, #1
    4cda:	7068      	strb	r0, [r5, #1]
    4cdc:	2000      	movs	r0, #0
    4cde:	bd70      	pop	{r4, r5, r6, pc}
    4ce0:	f06f 0015 	mvn.w	r0, #21
    4ce4:	bd70      	pop	{r4, r5, r6, pc}
    4ce6:	f04f 30ff 	mov.w	r0, #4294967295
    4cea:	bd70      	pop	{r4, r5, r6, pc}
    4cec:	20000078 	.word	0x20000078
    4cf0:	200010dc 	.word	0x200010dc

00004cf4 <sdc_init>:
    4cf4:	b530      	push	{r4, r5, lr}
    4cf6:	b087      	sub	sp, #28
    4cf8:	0005      	movs	r5, r0
    4cfa:	d00c      	beq.n	4d16 <sdc_init+0x22>
    4cfc:	f7ff fde8 	bl	48d0 <mpsl_is_initialized>
    4d00:	f04f 34ff 	mov.w	r4, #4294967295
    4d04:	b120      	cbz	r0, 4d10 <sdc_init+0x1c>
    4d06:	f7ff fc93 	bl	4630 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4d0a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4d0e:	d905      	bls.n	4d1c <sdc_init+0x28>
    4d10:	4620      	mov	r0, r4
    4d12:	b007      	add	sp, #28
    4d14:	bd30      	pop	{r4, r5, pc}
    4d16:	f06f 0015 	mvn.w	r0, #21
    4d1a:	e7fa      	b.n	4d12 <sdc_init+0x1e>
    4d1c:	4c15      	ldr	r4, [pc, #84]	; (4d74 <sdc_init+0x80>)
    4d1e:	4816      	ldr	r0, [pc, #88]	; (4d78 <sdc_init+0x84>)
    4d20:	6065      	str	r5, [r4, #4]
    4d22:	f000 f9e9 	bl	50f8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4d26:	2000      	movs	r0, #0
    4d28:	7060      	strb	r0, [r4, #1]
    4d2a:	70a0      	strb	r0, [r4, #2]
    4d2c:	70e0      	strb	r0, [r4, #3]
    4d2e:	4601      	mov	r1, r0
    4d30:	2218      	movs	r2, #24
    4d32:	4668      	mov	r0, sp
    4d34:	f008 f869 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d38:	2218      	movs	r2, #24
    4d3a:	4910      	ldr	r1, [pc, #64]	; (4d7c <sdc_init+0x88>)
    4d3c:	4668      	mov	r0, sp
    4d3e:	f007 ffea 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d42:	2218      	movs	r2, #24
    4d44:	4669      	mov	r1, sp
    4d46:	480e      	ldr	r0, [pc, #56]	; (4d80 <sdc_init+0x8c>)
    4d48:	f007 ffe5 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d4c:	f3ef 8410 	mrs	r4, PRIMASK
    4d50:	b672      	cpsid	i
    4d52:	f06f 000c 	mvn.w	r0, #12
    4d56:	f000 fd47 	bl	57e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4d5a:	480a      	ldr	r0, [pc, #40]	; (4d84 <sdc_init+0x90>)
    4d5c:	f000 fe12 	bl	5984 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4d60:	b118      	cbz	r0, 4d6a <sdc_init+0x76>
    4d62:	2198      	movs	r1, #152	; 0x98
    4d64:	2003      	movs	r0, #3
    4d66:	f000 f80f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d6a:	b904      	cbnz	r4, 4d6e <sdc_init+0x7a>
    4d6c:	b662      	cpsie	i
    4d6e:	2000      	movs	r0, #0
    4d70:	e7cf      	b.n	4d12 <sdc_init+0x1e>
    4d72:	0000      	.short	0x0000
    4d74:	20000078 	.word	0x20000078
    4d78:	00004b69 	.word	0x00004b69
    4d7c:	00004e74 	.word	0x00004e74
    4d80:	200010dc 	.word	0x200010dc
    4d84:	00004f05 	.word	0x00004f05

00004d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4d88:	b50e      	push	{r1, r2, r3, lr}
    4d8a:	b672      	cpsid	i
    4d8c:	4a15      	ldr	r2, [pc, #84]	; (4de4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4d8e:	6855      	ldr	r5, [r2, #4]
    4d90:	b1d5      	cbz	r5, 4dc8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4d92:	2200      	movs	r2, #0
    4d94:	4603      	mov	r3, r0
    4d96:	466e      	mov	r6, sp
    4d98:	240a      	movs	r4, #10
    4d9a:	e003      	b.n	4da4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4d9c:	fbb0 f0f4 	udiv	r0, r0, r4
    4da0:	1c52      	adds	r2, r2, #1
    4da2:	b2d2      	uxtb	r2, r2
    4da4:	2800      	cmp	r0, #0
    4da6:	d1f9      	bne.n	4d9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4da8:	54b0      	strb	r0, [r6, r2]
    4daa:	e009      	b.n	4dc0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4dac:	fbb3 f0f4 	udiv	r0, r3, r4
    4db0:	fb04 3010 	mls	r0, r4, r0, r3
    4db4:	fbb3 f3f4 	udiv	r3, r3, r4
    4db8:	1e52      	subs	r2, r2, #1
    4dba:	b2d2      	uxtb	r2, r2
    4dbc:	3030      	adds	r0, #48	; 0x30
    4dbe:	54b0      	strb	r0, [r6, r2]
    4dc0:	2a00      	cmp	r2, #0
    4dc2:	d1f3      	bne.n	4dac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4dc4:	4630      	mov	r0, r6
    4dc6:	47a8      	blx	r5
    4dc8:	f3bf 8f4f 	dsb	sy
    4dcc:	4806      	ldr	r0, [pc, #24]	; (4de8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4dce:	6801      	ldr	r1, [r0, #0]
    4dd0:	4a06      	ldr	r2, [pc, #24]	; (4dec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4dd2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4dd6:	4311      	orrs	r1, r2
    4dd8:	6001      	str	r1, [r0, #0]
    4dda:	f3bf 8f4f 	dsb	sy
    4dde:	bf00      	nop
    4de0:	e7fd      	b.n	4dde <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4de2:	0000      	.short	0x0000
    4de4:	20000078 	.word	0x20000078
    4de8:	e000ed0c 	.word	0xe000ed0c
    4dec:	05fa0004 	.word	0x05fa0004

00004df0 <sdc_support_adv>:
    4df0:	4806      	ldr	r0, [pc, #24]	; (4e0c <sdc_support_adv+0x1c>)
    4df2:	b510      	push	{r4, lr}
    4df4:	7881      	ldrb	r1, [r0, #2]
    4df6:	7840      	ldrb	r0, [r0, #1]
    4df8:	4301      	orrs	r1, r0
    4dfa:	d002      	beq.n	4e02 <sdc_support_adv+0x12>
    4dfc:	f04f 30ff 	mov.w	r0, #4294967295
    4e00:	bd10      	pop	{r4, pc}
    4e02:	f006 fa71 	bl	b2e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4e06:	2000      	movs	r0, #0
    4e08:	bd10      	pop	{r4, pc}
    4e0a:	0000      	.short	0x0000
    4e0c:	20000078 	.word	0x20000078

00004e10 <sdc_support_dle>:
    4e10:	4806      	ldr	r0, [pc, #24]	; (4e2c <sdc_support_dle+0x1c>)
    4e12:	b510      	push	{r4, lr}
    4e14:	7881      	ldrb	r1, [r0, #2]
    4e16:	7840      	ldrb	r0, [r0, #1]
    4e18:	4301      	orrs	r1, r0
    4e1a:	d002      	beq.n	4e22 <sdc_support_dle+0x12>
    4e1c:	f04f 30ff 	mov.w	r0, #4294967295
    4e20:	bd10      	pop	{r4, pc}
    4e22:	f006 f8a1 	bl	af68 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4e26:	2000      	movs	r0, #0
    4e28:	bd10      	pop	{r4, pc}
    4e2a:	0000      	.short	0x0000
    4e2c:	20000078 	.word	0x20000078

00004e30 <sdc_support_le_2m_phy>:
    4e30:	4806      	ldr	r0, [pc, #24]	; (4e4c <sdc_support_le_2m_phy+0x1c>)
    4e32:	b510      	push	{r4, lr}
    4e34:	7881      	ldrb	r1, [r0, #2]
    4e36:	7840      	ldrb	r0, [r0, #1]
    4e38:	4301      	orrs	r1, r0
    4e3a:	d002      	beq.n	4e42 <sdc_support_le_2m_phy+0x12>
    4e3c:	f04f 30ff 	mov.w	r0, #4294967295
    4e40:	bd10      	pop	{r4, pc}
    4e42:	f00b fb21 	bl	10488 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4e46:	2000      	movs	r0, #0
    4e48:	bd10      	pop	{r4, pc}
    4e4a:	0000      	.short	0x0000
    4e4c:	20000078 	.word	0x20000078

00004e50 <sdc_support_peripheral>:
    4e50:	4806      	ldr	r0, [pc, #24]	; (4e6c <sdc_support_peripheral+0x1c>)
    4e52:	b510      	push	{r4, lr}
    4e54:	7881      	ldrb	r1, [r0, #2]
    4e56:	7840      	ldrb	r0, [r0, #1]
    4e58:	4301      	orrs	r1, r0
    4e5a:	d002      	beq.n	4e62 <sdc_support_peripheral+0x12>
    4e5c:	f04f 30ff 	mov.w	r0, #4294967295
    4e60:	bd10      	pop	{r4, pc}
    4e62:	f006 fa53 	bl	b30c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4e66:	2000      	movs	r0, #0
    4e68:	bd10      	pop	{r4, pc}
    4e6a:	0000      	.short	0x0000
    4e6c:	20000078 	.word	0x20000078
    4e70:	00000001 	.word	0x00000001
    4e74:	00010101 	.word	0x00010101
    4e78:	031b1b00 	.word	0x031b1b00
    4e7c:	00000002 	.word	0x00000002
    4e80:	00001d4c 	.word	0x00001d4c
    4e84:	001f0003 	.word	0x001f0003
    4e88:	00000000 	.word	0x00000000
    4e8c:	182a7833 	.word	0x182a7833
    4e90:	6161f520 	.word	0x6161f520
    4e94:	60778ba6 	.word	0x60778ba6
    4e98:	2a398362 	.word	0x2a398362
    4e9c:	e414f17c 	.word	0xe414f17c

00004ea0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4ea0:	4a05      	ldr	r2, [pc, #20]	; (4eb8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4ea2:	b510      	push	{r4, lr}
    4ea4:	6852      	ldr	r2, [r2, #4]
    4ea6:	b112      	cbz	r2, 4eae <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4eac:	4710      	bx	r2
    4eae:	2192      	movs	r1, #146	; 0x92
    4eb0:	2004      	movs	r0, #4
    4eb2:	f7ff ff69 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eb6:	0000      	.short	0x0000
    4eb8:	200010f4 	.word	0x200010f4

00004ebc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4ebc:	4a05      	ldr	r2, [pc, #20]	; (4ed4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4ebe:	b510      	push	{r4, lr}
    4ec0:	6892      	ldr	r2, [r2, #8]
    4ec2:	b112      	cbz	r2, 4eca <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ec8:	4710      	bx	r2
    4eca:	2198      	movs	r1, #152	; 0x98
    4ecc:	2004      	movs	r0, #4
    4ece:	f7ff ff5b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ed2:	0000      	.short	0x0000
    4ed4:	200010f4 	.word	0x200010f4

00004ed8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4ed8:	4805      	ldr	r0, [pc, #20]	; (4ef0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4eda:	6801      	ldr	r1, [r0, #0]
    4edc:	b129      	cbz	r1, 4eea <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ede:	6841      	ldr	r1, [r0, #4]
    4ee0:	b119      	cbz	r1, 4eea <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ee2:	6880      	ldr	r0, [r0, #8]
    4ee4:	b108      	cbz	r0, 4eea <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4ee6:	2001      	movs	r0, #1
    4ee8:	4770      	bx	lr
    4eea:	2000      	movs	r0, #0
    4eec:	4770      	bx	lr
    4eee:	0000      	.short	0x0000
    4ef0:	200010f4 	.word	0x200010f4

00004ef4 <sdc_rand_source_register>:
    4ef4:	4902      	ldr	r1, [pc, #8]	; (4f00 <sdc_rand_source_register+0xc>)
    4ef6:	c80d      	ldmia	r0, {r0, r2, r3}
    4ef8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4efc:	2000      	movs	r0, #0
    4efe:	4770      	bx	lr
    4f00:	200010f4 	.word	0x200010f4

00004f04 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f06:	4c12      	ldr	r4, [pc, #72]	; (4f50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4f08:	2600      	movs	r6, #0
    4f0a:	6825      	ldr	r5, [r4, #0]
    4f0c:	e011      	b.n	4f32 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4f0e:	9800      	ldr	r0, [sp, #0]
    4f10:	2802      	cmp	r0, #2
    4f12:	d002      	beq.n	4f1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4f14:	2803      	cmp	r0, #3
    4f16:	d10c      	bne.n	4f32 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4f18:	e006      	b.n	4f28 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4f1a:	6820      	ldr	r0, [r4, #0]
    4f1c:	b110      	cbz	r0, 4f24 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4f1e:	2000      	movs	r0, #0
    4f20:	6026      	str	r6, [r4, #0]
    4f22:	e005      	b.n	4f30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4f24:	2128      	movs	r1, #40	; 0x28
    4f26:	e00c      	b.n	4f42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4f28:	6820      	ldr	r0, [r4, #0]
    4f2a:	b168      	cbz	r0, 4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4f2c:	2001      	movs	r0, #1
    4f2e:	6026      	str	r6, [r4, #0]
    4f30:	47a8      	blx	r5
    4f32:	4668      	mov	r0, sp
    4f34:	f000 fcf8 	bl	5928 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4f38:	2800      	cmp	r0, #0
    4f3a:	d0e8      	beq.n	4f0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4f3c:	2805      	cmp	r0, #5
    4f3e:	d005      	beq.n	4f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4f40:	2135      	movs	r1, #53	; 0x35
    4f42:	2004      	movs	r0, #4
    4f44:	f7ff ff20 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f48:	212d      	movs	r1, #45	; 0x2d
    4f4a:	e7fa      	b.n	4f42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f4e:	0000      	.short	0x0000
    4f50:	20000080 	.word	0x20000080
    4f54:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4f56:	4c1f      	ldr	r4, [pc, #124]	; (4fd4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4f58:	4605      	mov	r5, r0
    4f5a:	7820      	ldrb	r0, [r4, #0]
    4f5c:	b140      	cbz	r0, 4f70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4f5e:	78a2      	ldrb	r2, [r4, #2]
    4f60:	1c61      	adds	r1, r4, #1
    4f62:	4628      	mov	r0, r5
    4f64:	1c92      	adds	r2, r2, #2
    4f66:	f007 fed6 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f6a:	2000      	movs	r0, #0
    4f6c:	7020      	strb	r0, [r4, #0]
    4f6e:	e021      	b.n	4fb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4f70:	4819      	ldr	r0, [pc, #100]	; (4fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4f72:	f001 ffe1 	bl	6f38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4f76:	2800      	cmp	r0, #0
    4f78:	d01d      	beq.n	4fb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4f7a:	4c17      	ldr	r4, [pc, #92]	; (4fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4f7c:	7820      	ldrb	r0, [r4, #0]
    4f7e:	2811      	cmp	r0, #17
    4f80:	d104      	bne.n	4f8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4f82:	210a      	movs	r1, #10
    4f84:	203e      	movs	r0, #62	; 0x3e
    4f86:	f008 f86b 	bl	d060 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4f8a:	b118      	cbz	r0, 4f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4f8c:	7820      	ldrb	r0, [r4, #0]
    4f8e:	2808      	cmp	r0, #8
    4f90:	d005      	beq.n	4f9e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4f92:	e009      	b.n	4fa8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4f94:	4910      	ldr	r1, [pc, #64]	; (4fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4f96:	4628      	mov	r0, r5
    4f98:	f008 fa6c 	bl	d474 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4f9c:	e00a      	b.n	4fb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4f9e:	2105      	movs	r1, #5
    4fa0:	203e      	movs	r0, #62	; 0x3e
    4fa2:	f008 f85d 	bl	d060 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4fa6:	b138      	cbz	r0, 4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4fa8:	490b      	ldr	r1, [pc, #44]	; (4fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4faa:	4628      	mov	r0, r5
    4fac:	f008 f8b6 	bl	d11c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4fb0:	2800      	cmp	r0, #0
    4fb2:	d000      	beq.n	4fb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4fb4:	2001      	movs	r0, #1
    4fb6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4fb8:	88a0      	ldrh	r0, [r4, #4]
    4fba:	f8ad 0000 	strh.w	r0, [sp]
    4fbe:	a901      	add	r1, sp, #4
    4fc0:	4668      	mov	r0, sp
    4fc2:	f008 fb75 	bl	d6b0 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4fc6:	2800      	cmp	r0, #0
    4fc8:	d0f5      	beq.n	4fb6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4fca:	219c      	movs	r1, #156	; 0x9c
    4fcc:	2008      	movs	r0, #8
    4fce:	f7ff fedb 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fd2:	0000      	.short	0x0000
    4fd4:	20001292 	.word	0x20001292
    4fd8:	20001190 	.word	0x20001190
    4fdc:	b570      	push	{r4, r5, r6, lr}
    4fde:	780a      	ldrb	r2, [r1, #0]
    4fe0:	7082      	strb	r2, [r0, #2]
    4fe2:	b33a      	cbz	r2, 5034 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4fe4:	2a01      	cmp	r2, #1
    4fe6:	d825      	bhi.n	5034 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4fe8:	2313      	movs	r3, #19
    4fea:	7003      	strb	r3, [r0, #0]
    4fec:	2300      	movs	r3, #0
    4fee:	e00a      	b.n	5006 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4ff0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4ff4:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4ff8:	78a6      	ldrb	r6, [r4, #2]
    4ffa:	70ee      	strb	r6, [r5, #3]
    4ffc:	8864      	ldrh	r4, [r4, #2]
    4ffe:	0a24      	lsrs	r4, r4, #8
    5000:	1c5b      	adds	r3, r3, #1
    5002:	712c      	strb	r4, [r5, #4]
    5004:	b2db      	uxtb	r3, r3
    5006:	4293      	cmp	r3, r2
    5008:	d3f2      	bcc.n	4ff0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    500a:	2300      	movs	r3, #0
    500c:	e00b      	b.n	5026 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    500e:	bf00      	nop
    5010:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5014:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5018:	792e      	ldrb	r6, [r5, #4]
    501a:	7166      	strb	r6, [r4, #5]
    501c:	88ad      	ldrh	r5, [r5, #4]
    501e:	0a2d      	lsrs	r5, r5, #8
    5020:	1c5b      	adds	r3, r3, #1
    5022:	71a5      	strb	r5, [r4, #6]
    5024:	b2db      	uxtb	r3, r3
    5026:	4293      	cmp	r3, r2
    5028:	d3f2      	bcc.n	5010 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    502a:	2101      	movs	r1, #1
    502c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    5030:	b2c0      	uxtb	r0, r0
    5032:	bd70      	pop	{r4, r5, r6, pc}
    5034:	2000      	movs	r0, #0
    5036:	bd70      	pop	{r4, r5, r6, pc}

00005038 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5038:	2101      	movs	r1, #1
    503a:	4a0c      	ldr	r2, [pc, #48]	; (506c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    503c:	2840      	cmp	r0, #64	; 0x40
    503e:	d20c      	bcs.n	505a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    5040:	2820      	cmp	r0, #32
    5042:	d803      	bhi.n	504c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    5044:	1e40      	subs	r0, r0, #1
    5046:	4081      	lsls	r1, r0
    5048:	6810      	ldr	r0, [r2, #0]
    504a:	e002      	b.n	5052 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    504c:	3821      	subs	r0, #33	; 0x21
    504e:	4081      	lsls	r1, r0
    5050:	6850      	ldr	r0, [r2, #4]
    5052:	4201      	tst	r1, r0
    5054:	d107      	bne.n	5066 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    5056:	2000      	movs	r0, #0
    5058:	4770      	bx	lr
    505a:	28ff      	cmp	r0, #255	; 0xff
    505c:	d003      	beq.n	5066 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    505e:	3840      	subs	r0, #64	; 0x40
    5060:	4081      	lsls	r1, r0
    5062:	6890      	ldr	r0, [r2, #8]
    5064:	e7f5      	b.n	5052 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    5066:	2001      	movs	r0, #1
    5068:	4770      	bx	lr
    506a:	0000      	.short	0x0000
    506c:	20000084 	.word	0x20000084

00005070 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    5070:	2101      	movs	r1, #1
    5072:	1e40      	subs	r0, r0, #1
    5074:	4081      	lsls	r1, r0
    5076:	4804      	ldr	r0, [pc, #16]	; (5088 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    5078:	68c0      	ldr	r0, [r0, #12]
    507a:	4201      	tst	r1, r0
    507c:	d001      	beq.n	5082 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    507e:	2001      	movs	r0, #1
    5080:	4770      	bx	lr
    5082:	2000      	movs	r0, #0
    5084:	4770      	bx	lr
    5086:	0000      	.short	0x0000
    5088:	20000084 	.word	0x20000084

0000508c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    508c:	4901      	ldr	r1, [pc, #4]	; (5094 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    508e:	6800      	ldr	r0, [r0, #0]
    5090:	60c8      	str	r0, [r1, #12]
    5092:	4770      	bx	lr
    5094:	20000084 	.word	0x20000084

00005098 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    5098:	4904      	ldr	r1, [pc, #16]	; (50ac <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    509a:	6802      	ldr	r2, [r0, #0]
    509c:	6840      	ldr	r0, [r0, #4]
    509e:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    50a2:	600a      	str	r2, [r1, #0]
    50a4:	4a02      	ldr	r2, [pc, #8]	; (50b0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    50a6:	4310      	orrs	r0, r2
    50a8:	6048      	str	r0, [r1, #4]
    50aa:	4770      	bx	lr
    50ac:	20000084 	.word	0x20000084
    50b0:	024007f8 	.word	0x024007f8

000050b4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    50b4:	4901      	ldr	r1, [pc, #4]	; (50bc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    50b6:	6800      	ldr	r0, [r0, #0]
    50b8:	6088      	str	r0, [r1, #8]
    50ba:	4770      	bx	lr
    50bc:	20000084 	.word	0x20000084

000050c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    50c0:	4805      	ldr	r0, [pc, #20]	; (50d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    50c2:	f04f 31ff 	mov.w	r1, #4294967295
    50c6:	6001      	str	r1, [r0, #0]
    50c8:	0cc9      	lsrs	r1, r1, #19
    50ca:	6041      	str	r1, [r0, #4]
    50cc:	2100      	movs	r1, #0
    50ce:	6081      	str	r1, [r0, #8]
    50d0:	211f      	movs	r1, #31
    50d2:	60c1      	str	r1, [r0, #12]
    50d4:	4770      	bx	lr
    50d6:	0000      	.short	0x0000
    50d8:	20000084 	.word	0x20000084

000050dc <sdc_hci_cmd_cb_reset>:
    50dc:	b510      	push	{r4, lr}
    50de:	f7ff ffef 	bl	50c0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    50e2:	f00b f942 	bl	1036a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    50e6:	4604      	mov	r4, r0
    50e8:	4802      	ldr	r0, [pc, #8]	; (50f4 <sdc_hci_cmd_cb_reset+0x18>)
    50ea:	6800      	ldr	r0, [r0, #0]
    50ec:	b100      	cbz	r0, 50f0 <sdc_hci_cmd_cb_reset+0x14>
    50ee:	4780      	blx	r0
    50f0:	4620      	mov	r0, r4
    50f2:	bd10      	pop	{r4, pc}
    50f4:	20000094 	.word	0x20000094

000050f8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    50f8:	4901      	ldr	r1, [pc, #4]	; (5100 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    50fa:	6008      	str	r0, [r1, #0]
    50fc:	4770      	bx	lr
    50fe:	0000      	.short	0x0000
    5100:	20000094 	.word	0x20000094

00005104 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5104:	2102      	movs	r1, #2
    5106:	8001      	strh	r1, [r0, #0]
    5108:	8041      	strh	r1, [r0, #2]
    510a:	2100      	movs	r1, #0
    510c:	7101      	strb	r1, [r0, #4]
    510e:	2133      	movs	r1, #51	; 0x33
    5110:	7141      	strb	r1, [r0, #5]
    5112:	f642 2178 	movw	r1, #10872	; 0x2a78
    5116:	80c1      	strh	r1, [r0, #6]
    5118:	4901      	ldr	r1, [pc, #4]	; (5120 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    511a:	6081      	str	r1, [r0, #8]
    511c:	2000      	movs	r0, #0
    511e:	4770      	bx	lr
    5120:	61f52018 	.word	0x61f52018

00005124 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5124:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5126:	4604      	mov	r4, r0
    5128:	4669      	mov	r1, sp
    512a:	f008 fe23 	bl	dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    512e:	b170      	cbz	r0, 514e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5130:	f240 215a 	movw	r1, #602	; 0x25a
    5134:	e008      	b.n	5148 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5136:	bf00      	nop
    5138:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    513c:	4621      	mov	r1, r4
    513e:	f000 f8ab 	bl	5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5142:	b120      	cbz	r0, 514e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5144:	f240 215f 	movw	r1, #607	; 0x25f
    5148:	2017      	movs	r0, #23
    514a:	f7ff fe1d 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    514e:	4668      	mov	r0, sp
    5150:	f000 f852 	bl	51f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5154:	2800      	cmp	r0, #0
    5156:	d0ef      	beq.n	5138 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5158:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000515c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    515c:	b510      	push	{r4, lr}
    515e:	2802      	cmp	r0, #2
    5160:	d304      	bcc.n	516c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    5162:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    5166:	2017      	movs	r0, #23
    5168:	f7ff fe0e 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    516c:	4901      	ldr	r1, [pc, #4]	; (5174 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    516e:	5c08      	ldrb	r0, [r1, r0]
    5170:	bd10      	pop	{r4, pc}
    5172:	0000      	.short	0x0000
    5174:	20001100 	.word	0x20001100

00005178 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    517a:	0005      	movs	r5, r0
    517c:	9500      	str	r5, [sp, #0]
    517e:	d010      	beq.n	51a2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5180:	2600      	movs	r6, #0
    5182:	7808      	ldrb	r0, [r1, #0]
    5184:	7849      	ldrb	r1, [r1, #1]
    5186:	4604      	mov	r4, r0
    5188:	42a1      	cmp	r1, r4
    518a:	d900      	bls.n	518e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    518c:	460c      	mov	r4, r1
    518e:	1cea      	adds	r2, r5, #3
    5190:	f022 0203 	bic.w	r2, r2, #3
    5194:	42aa      	cmp	r2, r5
    5196:	d006      	beq.n	51a6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    5198:	f240 1179 	movw	r1, #377	; 0x179
    519c:	2017      	movs	r0, #23
    519e:	f7ff fdf3 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51a2:	2601      	movs	r6, #1
    51a4:	e7ed      	b.n	5182 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    51a6:	4f13      	ldr	r7, [pc, #76]	; (51f4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    51a8:	7038      	strb	r0, [r7, #0]
    51aa:	7079      	strb	r1, [r7, #1]
    51ac:	4631      	mov	r1, r6
    51ae:	4668      	mov	r0, sp
    51b0:	f000 f8ee 	bl	5390 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    51b4:	2100      	movs	r1, #0
    51b6:	460b      	mov	r3, r1
    51b8:	9800      	ldr	r0, [sp, #0]
    51ba:	1cc0      	adds	r0, r0, #3
    51bc:	f020 0003 	bic.w	r0, r0, #3
    51c0:	9000      	str	r0, [sp, #0]
    51c2:	b96e      	cbnz	r6, 51e0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    51c4:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    51c8:	60d0      	str	r0, [r2, #12]
    51ca:	2000      	movs	r0, #0
    51cc:	e006      	b.n	51dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    51ce:	bf00      	nop
    51d0:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    51d4:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    51d8:	1c40      	adds	r0, r0, #1
    51da:	b2c0      	uxtb	r0, r0
    51dc:	42a0      	cmp	r0, r4
    51de:	d3f7      	bcc.n	51d0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    51e0:	9800      	ldr	r0, [sp, #0]
    51e2:	1c49      	adds	r1, r1, #1
    51e4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    51e8:	b2c9      	uxtb	r1, r1
    51ea:	9000      	str	r0, [sp, #0]
    51ec:	2902      	cmp	r1, #2
    51ee:	d3e3      	bcc.n	51b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    51f0:	1b40      	subs	r0, r0, r5
    51f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51f4:	20001100 	.word	0x20001100

000051f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    51f8:	b570      	push	{r4, r5, r6, lr}
    51fa:	4604      	mov	r4, r0
    51fc:	f008 ff66 	bl	e0cc <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5200:	b108      	cbz	r0, 5206 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5202:	2010      	movs	r0, #16
    5204:	bd70      	pop	{r4, r5, r6, pc}
    5206:	7825      	ldrb	r5, [r4, #0]
    5208:	f000 f8fe 	bl	5408 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    520c:	4602      	mov	r2, r0
    520e:	480c      	ldr	r0, [pc, #48]	; (5240 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5210:	8861      	ldrh	r1, [r4, #2]
    5212:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5216:	e00e      	b.n	5236 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5218:	68c3      	ldr	r3, [r0, #12]
    521a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    521e:	b143      	cbz	r3, 5232 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5220:	1c4a      	adds	r2, r1, #1
    5222:	8062      	strh	r2, [r4, #2]
    5224:	80a1      	strh	r1, [r4, #4]
    5226:	68c0      	ldr	r0, [r0, #12]
    5228:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    522c:	60a0      	str	r0, [r4, #8]
    522e:	2000      	movs	r0, #0
    5230:	bd70      	pop	{r4, r5, r6, pc}
    5232:	1c49      	adds	r1, r1, #1
    5234:	b289      	uxth	r1, r1
    5236:	4291      	cmp	r1, r2
    5238:	d3ee      	bcc.n	5218 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    523a:	8061      	strh	r1, [r4, #2]
    523c:	2005      	movs	r0, #5
    523e:	bd70      	pop	{r4, r5, r6, pc}
    5240:	20001100 	.word	0x20001100

00005244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5248:	b121      	cbz	r1, 5254 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    524a:	2901      	cmp	r1, #1
    524c:	d002      	beq.n	5254 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    524e:	2000      	movs	r0, #0
    5250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5254:	4c0f      	ldr	r4, [pc, #60]	; (5294 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    5256:	2700      	movs	r7, #0
    5258:	463b      	mov	r3, r7
    525a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    525e:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5262:	f814 c001 	ldrb.w	ip, [r4, r1]
    5266:	e00a      	b.n	527e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5268:	19dc      	adds	r4, r3, r7
    526a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    526e:	b2a4      	uxth	r4, r4
    5270:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5274:	f1be 0f00 	cmp.w	lr, #0
    5278:	d004      	beq.n	5284 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    527a:	1c5b      	adds	r3, r3, #1
    527c:	b29b      	uxth	r3, r3
    527e:	459c      	cmp	ip, r3
    5280:	d8f2      	bhi.n	5268 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    5282:	4634      	mov	r4, r6
    5284:	8004      	strh	r4, [r0, #0]
    5286:	4620      	mov	r0, r4
    5288:	42b4      	cmp	r4, r6
    528a:	d0e0      	beq.n	524e <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    528c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5290:	f000 b834 	b.w	52fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    5294:	20001100 	.word	0x20001100

00005298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    529c:	4606      	mov	r6, r0
    529e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    52a2:	460c      	mov	r4, r1
    52a4:	f243 0702 	movw	r7, #12290	; 0x3002
    52a8:	38ff      	subs	r0, #255	; 0xff
    52aa:	d020      	beq.n	52ee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    52ac:	2c02      	cmp	r4, #2
    52ae:	d302      	bcc.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    52b0:	2007      	movs	r0, #7
    52b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52b6:	4630      	mov	r0, r6
    52b8:	f000 f85a 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    52bc:	0005      	movs	r5, r0
    52be:	d016      	beq.n	52ee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    52c0:	480c      	ldr	r0, [pc, #48]	; (52f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    52c2:	4629      	mov	r1, r5
    52c4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    52c8:	4630      	mov	r0, r6
    52ca:	4790      	blx	r2
    52cc:	480a      	ldr	r0, [pc, #40]	; (52f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    52ce:	2100      	movs	r1, #0
    52d0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    52d4:	68f8      	ldr	r0, [r7, #12]
    52d6:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    52da:	4620      	mov	r0, r4
    52dc:	f000 f88a 	bl	53f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    52e0:	4602      	mov	r2, r0
    52e2:	4629      	mov	r1, r5
    52e4:	6878      	ldr	r0, [r7, #4]
    52e6:	f008 fd24 	bl	dd32 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    52ea:	2000      	movs	r0, #0
    52ec:	e7e1      	b.n	52b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    52ee:	4638      	mov	r0, r7
    52f0:	e7df      	b.n	52b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    52f2:	0000      	.short	0x0000
    52f4:	00005428 	.word	0x00005428
    52f8:	20001100 	.word	0x20001100
    52fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5300:	4690      	mov	r8, r2
    5302:	460d      	mov	r5, r1
    5304:	4607      	mov	r7, r0
    5306:	f008 fd46 	bl	dd96 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    530a:	b148      	cbz	r0, 5320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    530c:	4816      	ldr	r0, [pc, #88]	; (5368 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    530e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5312:	68f0      	ldr	r0, [r6, #12]
    5314:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5318:	b128      	cbz	r0, 5326 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    531a:	f44f 719d 	mov.w	r1, #314	; 0x13a
    531e:	e015      	b.n	534c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5320:	f240 1139 	movw	r1, #313	; 0x139
    5324:	e012      	b.n	534c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5326:	6870      	ldr	r0, [r6, #4]
    5328:	2800      	cmp	r0, #0
    532a:	d01a      	beq.n	5362 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    532c:	4628      	mov	r0, r5
    532e:	f000 f861 	bl	53f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5332:	4601      	mov	r1, r0
    5334:	6870      	ldr	r0, [r6, #4]
    5336:	f008 fcae 	bl	dc96 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    533a:	0004      	movs	r4, r0
    533c:	d010      	beq.n	5360 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    533e:	68f0      	ldr	r0, [r6, #12]
    5340:	2d02      	cmp	r5, #2
    5342:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5346:	d304      	bcc.n	5352 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5348:	f240 1145 	movw	r1, #325	; 0x145
    534c:	2017      	movs	r0, #23
    534e:	f7ff fd1b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5352:	4806      	ldr	r0, [pc, #24]	; (536c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5354:	4642      	mov	r2, r8
    5356:	4621      	mov	r1, r4
    5358:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    535c:	4638      	mov	r0, r7
    535e:	4798      	blx	r3
    5360:	4620      	mov	r0, r4
    5362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5366:	0000      	.short	0x0000
    5368:	20001100 	.word	0x20001100
    536c:	00005420 	.word	0x00005420
    5370:	b570      	push	{r4, r5, r6, lr}
    5372:	460c      	mov	r4, r1
    5374:	4605      	mov	r5, r0
    5376:	f008 fd0e 	bl	dd96 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    537a:	2800      	cmp	r0, #0
    537c:	d005      	beq.n	538a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    537e:	4803      	ldr	r0, [pc, #12]	; (538c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5380:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5384:	68c0      	ldr	r0, [r0, #12]
    5386:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    538a:	bd70      	pop	{r4, r5, r6, pc}
    538c:	20001100 	.word	0x20001100
    5390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5394:	4e16      	ldr	r6, [pc, #88]	; (53f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5396:	4688      	mov	r8, r1
    5398:	4605      	mov	r5, r0
    539a:	2400      	movs	r4, #0
    539c:	6828      	ldr	r0, [r5, #0]
    539e:	1cc0      	adds	r0, r0, #3
    53a0:	f020 0003 	bic.w	r0, r0, #3
    53a4:	6028      	str	r0, [r5, #0]
    53a6:	4620      	mov	r0, r4
    53a8:	f000 f824 	bl	53f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    53ac:	5d31      	ldrb	r1, [r6, r4]
    53ae:	4348      	muls	r0, r1
    53b0:	f1b8 0f00 	cmp.w	r8, #0
    53b4:	d001      	beq.n	53ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    53b6:	2200      	movs	r2, #0
    53b8:	e000      	b.n	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    53ba:	682a      	ldr	r2, [r5, #0]
    53bc:	4601      	mov	r1, r0
    53be:	9200      	str	r2, [sp, #0]
    53c0:	b132      	cbz	r2, 53d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    53c2:	2700      	movs	r7, #0
    53c4:	ea4f 000d 	mov.w	r0, sp
    53c8:	f008 fc92 	bl	dcf0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    53cc:	b11f      	cbz	r7, 53d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    53ce:	e006      	b.n	53de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    53d0:	2701      	movs	r7, #1
    53d2:	2000      	movs	r0, #0
    53d4:	e7f8      	b.n	53c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    53d6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    53da:	9a00      	ldr	r2, [sp, #0]
    53dc:	604a      	str	r2, [r1, #4]
    53de:	6829      	ldr	r1, [r5, #0]
    53e0:	1c64      	adds	r4, r4, #1
    53e2:	4408      	add	r0, r1
    53e4:	b2e4      	uxtb	r4, r4
    53e6:	6028      	str	r0, [r5, #0]
    53e8:	2c02      	cmp	r4, #2
    53ea:	d3d7      	bcc.n	539c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    53ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    53f0:	20001100 	.word	0x20001100
    53f4:	4903      	ldr	r1, [pc, #12]	; (5404 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    53f6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    53fa:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    53fe:	1cc0      	adds	r0, r0, #3
    5400:	4008      	ands	r0, r1
    5402:	4770      	bx	lr
    5404:	0000541c 	.word	0x0000541c
    5408:	4903      	ldr	r1, [pc, #12]	; (5418 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    540a:	7808      	ldrb	r0, [r1, #0]
    540c:	7849      	ldrb	r1, [r1, #1]
    540e:	4288      	cmp	r0, r1
    5410:	d200      	bcs.n	5414 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    5412:	4608      	mov	r0, r1
    5414:	4770      	bx	lr
    5416:	0000      	.short	0x0000
    5418:	20001100 	.word	0x20001100
    541c:	00d40228 	.word	0x00d40228
    5420:	0000ddab 	.word	0x0000ddab
    5424:	0000ddab 	.word	0x0000ddab
    5428:	0000f91d 	.word	0x0000f91d
    542c:	0000edeb 	.word	0x0000edeb

00005430 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5430:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5434:	4c26      	ldr	r4, [pc, #152]	; (54d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    5436:	4680      	mov	r8, r0
    5438:	b081      	sub	sp, #4
    543a:	6820      	ldr	r0, [r4, #0]
    543c:	469a      	mov	sl, r3
    543e:	4693      	mov	fp, r2
    5440:	b158      	cbz	r0, 545a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5442:	7a02      	ldrb	r2, [r0, #8]
    5444:	4542      	cmp	r2, r8
    5446:	d903      	bls.n	5450 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5448:	6841      	ldr	r1, [r0, #4]
    544a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    544e:	b140      	cbz	r0, 5462 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5450:	f243 0002 	movw	r0, #12290	; 0x3002
    5454:	b005      	add	sp, #20
    5456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    545a:	21a5      	movs	r1, #165	; 0xa5
    545c:	2018      	movs	r0, #24
    545e:	f7ff fc93 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5462:	4619      	mov	r1, r3
    5464:	9802      	ldr	r0, [sp, #8]
    5466:	f008 fcb8 	bl	ddda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    546a:	b286      	uxth	r6, r0
    546c:	4658      	mov	r0, fp
    546e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5470:	f008 fcaa 	bl	ddc8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5474:	b285      	uxth	r5, r0
    5476:	1970      	adds	r0, r6, r5
    5478:	1d00      	adds	r0, r0, #4
    547a:	b287      	uxth	r7, r0
    547c:	6820      	ldr	r0, [r4, #0]
    547e:	46a1      	mov	r9, r4
    5480:	4639      	mov	r1, r7
    5482:	6800      	ldr	r0, [r0, #0]
    5484:	f008 fc07 	bl	dc96 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5488:	0004      	movs	r4, r0
    548a:	d01f      	beq.n	54cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    548c:	8067      	strh	r7, [r4, #2]
    548e:	8025      	strh	r5, [r4, #0]
    5490:	4629      	mov	r1, r5
    5492:	1d20      	adds	r0, r4, #4
    5494:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5496:	4607      	mov	r7, r0
    5498:	465a      	mov	r2, fp
    549a:	2301      	movs	r3, #1
    549c:	9500      	str	r5, [sp, #0]
    549e:	f008 fb5a 	bl	db56 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    54a2:	8820      	ldrh	r0, [r4, #0]
    54a4:	4631      	mov	r1, r6
    54a6:	4438      	add	r0, r7
    54a8:	2301      	movs	r3, #1
    54aa:	9a02      	ldr	r2, [sp, #8]
    54ac:	f8cd a000 	str.w	sl, [sp]
    54b0:	f008 fb51 	bl	db56 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    54b4:	8820      	ldrh	r0, [r4, #0]
    54b6:	19c1      	adds	r1, r0, r7
    54b8:	4638      	mov	r0, r7
    54ba:	f008 fb7d 	bl	dbb8 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    54be:	f8d9 0000 	ldr.w	r0, [r9]
    54c2:	6841      	ldr	r1, [r0, #4]
    54c4:	2000      	movs	r0, #0
    54c6:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    54ca:	e7c3      	b.n	5454 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    54cc:	2004      	movs	r0, #4
    54ce:	e7c1      	b.n	5454 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    54d0:	20000098 	.word	0x20000098

000054d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    54d4:	b570      	push	{r4, r5, r6, lr}
    54d6:	4c14      	ldr	r4, [pc, #80]	; (5528 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    54d8:	6823      	ldr	r3, [r4, #0]
    54da:	b18b      	cbz	r3, 5500 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    54dc:	7a19      	ldrb	r1, [r3, #8]
    54de:	4281      	cmp	r1, r0
    54e0:	d912      	bls.n	5508 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    54e2:	685a      	ldr	r2, [r3, #4]
    54e4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    54e8:	b171      	cbz	r1, 5508 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    54ea:	2500      	movs	r5, #0
    54ec:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    54f0:	884a      	ldrh	r2, [r1, #2]
    54f2:	6818      	ldr	r0, [r3, #0]
    54f4:	f008 fc1d 	bl	dd32 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    54f8:	6821      	ldr	r1, [r4, #0]
    54fa:	2000      	movs	r0, #0
    54fc:	7a0a      	ldrb	r2, [r1, #8]
    54fe:	e00c      	b.n	551a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5500:	21c8      	movs	r1, #200	; 0xc8
    5502:	2018      	movs	r0, #24
    5504:	f7ff fc40 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5508:	f243 0002 	movw	r0, #12290	; 0x3002
    550c:	bd70      	pop	{r4, r5, r6, pc}
    550e:	684b      	ldr	r3, [r1, #4]
    5510:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5514:	b933      	cbnz	r3, 5524 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5516:	1c40      	adds	r0, r0, #1
    5518:	b2c0      	uxtb	r0, r0
    551a:	4282      	cmp	r2, r0
    551c:	d8f7      	bhi.n	550e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    551e:	6808      	ldr	r0, [r1, #0]
    5520:	f008 fbfc 	bl	dd1c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5524:	2000      	movs	r0, #0
    5526:	bd70      	pop	{r4, r5, r6, pc}
    5528:	20000098 	.word	0x20000098

0000552c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5530:	460d      	mov	r5, r1
    5532:	0004      	movs	r4, r0
    5534:	4690      	mov	r8, r2
    5536:	f04f 0600 	mov.w	r6, #0
    553a:	d009      	beq.n	5550 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    553c:	2700      	movs	r7, #0
    553e:	1ce0      	adds	r0, r4, #3
    5540:	f020 0003 	bic.w	r0, r0, #3
    5544:	42a0      	cmp	r0, r4
    5546:	d005      	beq.n	5554 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5548:	2186      	movs	r1, #134	; 0x86
    554a:	2018      	movs	r0, #24
    554c:	f7ff fc1c 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5550:	2701      	movs	r7, #1
    5552:	e7f4      	b.n	553e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5554:	b1cd      	cbz	r5, 558a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5556:	4611      	mov	r1, r2
    5558:	2000      	movs	r0, #0
    555a:	f008 fbc9 	bl	dcf0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    555e:	300c      	adds	r0, #12
    5560:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5564:	b98f      	cbnz	r7, 558a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5566:	4f0a      	ldr	r7, [pc, #40]	; (5590 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5568:	f104 000c 	add.w	r0, r4, #12
    556c:	00aa      	lsls	r2, r5, #2
    556e:	603c      	str	r4, [r7, #0]
    5570:	7225      	strb	r5, [r4, #8]
    5572:	6060      	str	r0, [r4, #4]
    5574:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5578:	6020      	str	r0, [r4, #0]
    557a:	2100      	movs	r1, #0
    557c:	6860      	ldr	r0, [r4, #4]
    557e:	f007 fc44 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5582:	4641      	mov	r1, r8
    5584:	6838      	ldr	r0, [r7, #0]
    5586:	f008 fbb3 	bl	dcf0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    558a:	4630      	mov	r0, r6
    558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5590:	20000098 	.word	0x20000098

00005594 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5594:	b570      	push	{r4, r5, r6, lr}
    5596:	4d08      	ldr	r5, [pc, #32]	; (55b8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5598:	6828      	ldr	r0, [r5, #0]
    559a:	2800      	cmp	r0, #0
    559c:	d00a      	beq.n	55b4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    559e:	2400      	movs	r4, #0
    55a0:	e004      	b.n	55ac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    55a2:	4620      	mov	r0, r4
    55a4:	f7ff ff96 	bl	54d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    55a8:	1c64      	adds	r4, r4, #1
    55aa:	b2e4      	uxtb	r4, r4
    55ac:	6828      	ldr	r0, [r5, #0]
    55ae:	7a00      	ldrb	r0, [r0, #8]
    55b0:	42a0      	cmp	r0, r4
    55b2:	d8f6      	bhi.n	55a2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    55b4:	bd70      	pop	{r4, r5, r6, pc}
    55b6:	0000      	.short	0x0000
    55b8:	20000098 	.word	0x20000098

000055bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    55bc:	4909      	ldr	r1, [pc, #36]	; (55e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    55be:	b510      	push	{r4, lr}
    55c0:	4602      	mov	r2, r0
    55c2:	6809      	ldr	r1, [r1, #0]
    55c4:	2000      	movs	r0, #0
    55c6:	b149      	cbz	r1, 55dc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    55c8:	7a0b      	ldrb	r3, [r1, #8]
    55ca:	4293      	cmp	r3, r2
    55cc:	d905      	bls.n	55da <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    55ce:	6849      	ldr	r1, [r1, #4]
    55d0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    55d4:	2900      	cmp	r1, #0
    55d6:	d000      	beq.n	55da <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    55d8:	1d08      	adds	r0, r1, #4
    55da:	bd10      	pop	{r4, pc}
    55dc:	21ee      	movs	r1, #238	; 0xee
    55de:	2018      	movs	r0, #24
    55e0:	f7ff fbd2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55e4:	20000098 	.word	0x20000098

000055e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    55e8:	490a      	ldr	r1, [pc, #40]	; (5614 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    55ea:	b510      	push	{r4, lr}
    55ec:	4602      	mov	r2, r0
    55ee:	6809      	ldr	r1, [r1, #0]
    55f0:	2000      	movs	r0, #0
    55f2:	b159      	cbz	r1, 560c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    55f4:	7a0b      	ldrb	r3, [r1, #8]
    55f6:	4293      	cmp	r3, r2
    55f8:	d907      	bls.n	560a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    55fa:	6849      	ldr	r1, [r1, #4]
    55fc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5600:	2900      	cmp	r1, #0
    5602:	d002      	beq.n	560a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5604:	f831 0b04 	ldrh.w	r0, [r1], #4
    5608:	4408      	add	r0, r1
    560a:	bd10      	pop	{r4, pc}
    560c:	21fc      	movs	r1, #252	; 0xfc
    560e:	2018      	movs	r0, #24
    5610:	f7ff fbba 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5614:	20000098 	.word	0x20000098
    5618:	b570      	push	{r4, r5, r6, lr}
    561a:	4b1e      	ldr	r3, [pc, #120]	; (5694 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    561c:	6845      	ldr	r5, [r0, #4]
    561e:	4604      	mov	r4, r0
    5620:	2200      	movs	r2, #0
    5622:	b1a1      	cbz	r1, 564e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5624:	2001      	movs	r0, #1
    5626:	7060      	strb	r0, [r4, #1]
    5628:	8858      	ldrh	r0, [r3, #2]
    562a:	0881      	lsrs	r1, r0, #2
    562c:	f05f 0000 	movs.w	r0, #0
    5630:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5634:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5638:	831a      	strh	r2, [r3, #24]
    563a:	8419      	strh	r1, [r3, #32]
    563c:	fb00 5301 	mla	r3, r0, r1, r5
    5640:	6073      	str	r3, [r6, #4]
    5642:	1823      	adds	r3, r4, r0
    5644:	1c40      	adds	r0, r0, #1
    5646:	751a      	strb	r2, [r3, #20]
    5648:	2804      	cmp	r0, #4
    564a:	d3f1      	bcc.n	5630 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    564c:	bd70      	pop	{r4, r5, r6, pc}
    564e:	7062      	strb	r2, [r4, #1]
    5650:	f05f 0000 	movs.w	r0, #0
    5654:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5658:	830a      	strh	r2, [r1, #24]
    565a:	840a      	strh	r2, [r1, #32]
    565c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5660:	604a      	str	r2, [r1, #4]
    5662:	1821      	adds	r1, r4, r0
    5664:	1c40      	adds	r0, r0, #1
    5666:	750a      	strb	r2, [r1, #20]
    5668:	2804      	cmp	r0, #4
    566a:	d3f3      	bcc.n	5654 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    566c:	8858      	ldrh	r0, [r3, #2]
    566e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    5672:	d201      	bcs.n	5678 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5674:	0846      	lsrs	r6, r0, #1
    5676:	e000      	b.n	567a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5678:	26ff      	movs	r6, #255	; 0xff
    567a:	f008 fc21 	bl	dec0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    567e:	6065      	str	r5, [r4, #4]
    5680:	8420      	strh	r0, [r4, #32]
    5682:	1829      	adds	r1, r5, r0
    5684:	60a1      	str	r1, [r4, #8]
    5686:	8466      	strh	r6, [r4, #34]	; 0x22
    5688:	60e5      	str	r5, [r4, #12]
    568a:	84a0      	strh	r0, [r4, #36]	; 0x24
    568c:	6121      	str	r1, [r4, #16]
    568e:	84e6      	strh	r6, [r4, #38]	; 0x26
    5690:	bd70      	pop	{r4, r5, r6, pc}
    5692:	0000      	.short	0x0000
    5694:	2000009c 	.word	0x2000009c

00005698 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    5698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    569c:	b170      	cbz	r0, 56bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    569e:	2500      	movs	r5, #0
    56a0:	4411      	add	r1, r2
    56a2:	b2cc      	uxtb	r4, r1
    56a4:	4e24      	ldr	r6, [pc, #144]	; (5738 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    56a6:	1cc1      	adds	r1, r0, #3
    56a8:	2700      	movs	r7, #0
    56aa:	f021 0103 	bic.w	r1, r1, #3
    56ae:	7034      	strb	r4, [r6, #0]
    56b0:	4281      	cmp	r1, r0
    56b2:	d005      	beq.n	56c0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    56b4:	214e      	movs	r1, #78	; 0x4e
    56b6:	2009      	movs	r0, #9
    56b8:	f7ff fb66 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56bc:	2501      	movs	r5, #1
    56be:	e7ef      	b.n	56a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    56c0:	2b1f      	cmp	r3, #31
    56c2:	d804      	bhi.n	56ce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    56c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    56c8:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    56cc:	e009      	b.n	56e2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    56ce:	0059      	lsls	r1, r3, #1
    56d0:	2bff      	cmp	r3, #255	; 0xff
    56d2:	d90b      	bls.n	56ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    56d4:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    56d8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    56dc:	d200      	bcs.n	56e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    56de:	4611      	mov	r1, r2
    56e0:	b289      	uxth	r1, r1
    56e2:	1cc9      	adds	r1, r1, #3
    56e4:	f021 0303 	bic.w	r3, r1, #3
    56e8:	b135      	cbz	r5, 56f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    56ea:	e007      	b.n	56fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    56ec:	227c      	movs	r2, #124	; 0x7c
    56ee:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    56f2:	d3f5      	bcc.n	56e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    56f4:	217c      	movs	r1, #124	; 0x7c
    56f6:	e7f3      	b.n	56e0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    56f8:	6070      	str	r0, [r6, #4]
    56fa:	8073      	strh	r3, [r6, #2]
    56fc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    5700:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    5704:	2100      	movs	r1, #0
    5706:	6876      	ldr	r6, [r6, #4]
    5708:	f04f 0c01 	mov.w	ip, #1
    570c:	e00d      	b.n	572a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    570e:	b94d      	cbnz	r5, 5724 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    5710:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    5714:	eb00 0e02 	add.w	lr, r0, r2
    5718:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    571c:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5720:	f8c7 e004 	str.w	lr, [r7, #4]
    5724:	1c49      	adds	r1, r1, #1
    5726:	441a      	add	r2, r3
    5728:	b2c9      	uxtb	r1, r1
    572a:	42a1      	cmp	r1, r4
    572c:	d3ef      	bcc.n	570e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    572e:	1dd2      	adds	r2, r2, #7
    5730:	f022 0007 	bic.w	r0, r2, #7
    5734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5738:	2000009c 	.word	0x2000009c

0000573c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	4a10      	ldr	r2, [pc, #64]	; (5780 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5740:	2000      	movs	r0, #0
    5742:	6851      	ldr	r1, [r2, #4]
    5744:	7812      	ldrb	r2, [r2, #0]
    5746:	e014      	b.n	5772 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5748:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    574c:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5750:	b16b      	cbz	r3, 576e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    5752:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5756:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    575a:	d00c      	beq.n	5776 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    575c:	2500      	movs	r5, #0
    575e:	70a5      	strb	r5, [r4, #2]
    5760:	2101      	movs	r1, #1
    5762:	4620      	mov	r0, r4
    5764:	f7ff ff58 	bl	5618 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5768:	7025      	strb	r5, [r4, #0]
    576a:	4620      	mov	r0, r4
    576c:	bd70      	pop	{r4, r5, r6, pc}
    576e:	1c40      	adds	r0, r0, #1
    5770:	b2c0      	uxtb	r0, r0
    5772:	4290      	cmp	r0, r2
    5774:	d3e8      	bcc.n	5748 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5776:	21a9      	movs	r1, #169	; 0xa9
    5778:	2009      	movs	r0, #9
    577a:	f7ff fb05 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    577e:	0000      	.short	0x0000
    5780:	2000009c 	.word	0x2000009c

00005784 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5784:	4804      	ldr	r0, [pc, #16]	; (5798 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5786:	b510      	push	{r4, lr}
    5788:	8840      	ldrh	r0, [r0, #2]
    578a:	0884      	lsrs	r4, r0, #2
    578c:	f008 fb98 	bl	dec0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5790:	4284      	cmp	r4, r0
    5792:	d300      	bcc.n	5796 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    5794:	4620      	mov	r0, r4
    5796:	bd10      	pop	{r4, pc}
    5798:	2000009c 	.word	0x2000009c
    579c:	b530      	push	{r4, r5, lr}
    579e:	490d      	ldr	r1, [pc, #52]	; (57d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    57a0:	2001      	movs	r0, #1
    57a2:	6048      	str	r0, [r1, #4]
    57a4:	1e82      	subs	r2, r0, #2
    57a6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    57aa:	490b      	ldr	r1, [pc, #44]	; (57d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    57ac:	6088      	str	r0, [r1, #8]
    57ae:	2300      	movs	r3, #0
    57b0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    57b4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    57b8:	4c08      	ldr	r4, [pc, #32]	; (57dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    57ba:	6023      	str	r3, [r4, #0]
    57bc:	1d25      	adds	r5, r4, #4
    57be:	6028      	str	r0, [r5, #0]
    57c0:	6088      	str	r0, [r1, #8]
    57c2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    57c6:	6023      	str	r3, [r4, #0]
    57c8:	6028      	str	r0, [r5, #0]
    57ca:	4906      	ldr	r1, [pc, #24]	; (57e4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    57cc:	4804      	ldr	r0, [pc, #16]	; (57e0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    57ce:	6008      	str	r0, [r1, #0]
    57d0:	bd30      	pop	{r4, r5, pc}
    57d2:	0000      	.short	0x0000
    57d4:	4000e000 	.word	0x4000e000
    57d8:	4000f000 	.word	0x4000f000
    57dc:	4000f500 	.word	0x4000f500
    57e0:	3ff60000 	.word	0x3ff60000
    57e4:	4001f508 	.word	0x4001f508

000057e8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    57e8:	b510      	push	{r4, lr}
    57ea:	4604      	mov	r4, r0
    57ec:	f7ff ffd6 	bl	579c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    57f0:	f008 fc39 	bl	e066 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    57f4:	f000 f888 	bl	5908 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    57f8:	4905      	ldr	r1, [pc, #20]	; (5810 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    57fa:	4804      	ldr	r0, [pc, #16]	; (580c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    57fc:	6008      	str	r0, [r1, #0]
    57fe:	4620      	mov	r0, r4
    5800:	f000 f8b8 	bl	5974 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5808:	f000 b8d0 	b.w	59ac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    580c:	3ff60000 	.word	0x3ff60000
    5810:	4001f508 	.word	0x4001f508
    5814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5818:	4682      	mov	sl, r0
    581a:	4838      	ldr	r0, [pc, #224]	; (58fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    581c:	f007 f9d2 	bl	cbc4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5820:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 58fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5824:	b128      	cbz	r0, 5832 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5826:	2601      	movs	r6, #1
    5828:	f10b 0001 	add.w	r0, fp, #1
    582c:	21ff      	movs	r1, #255	; 0xff
    582e:	7001      	strb	r1, [r0, #0]
    5830:	e000      	b.n	5834 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    5832:	2600      	movs	r6, #0
    5834:	f44f 7580 	mov.w	r5, #256	; 0x100
    5838:	4c31      	ldr	r4, [pc, #196]	; (5900 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    583a:	f04f 0800 	mov.w	r8, #0
    583e:	1d2f      	adds	r7, r5, #4
    5840:	2101      	movs	r1, #1
    5842:	6061      	str	r1, [r4, #4]
    5844:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5848:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    584c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    5850:	6021      	str	r1, [r4, #0]
    5852:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5904 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    5856:	e01c      	b.n	5892 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5858:	f8d9 0000 	ldr.w	r0, [r9]
    585c:	06c0      	lsls	r0, r0, #27
    585e:	d518      	bpl.n	5892 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5860:	200e      	movs	r0, #14
    5862:	f008 fc0f 	bl	e084 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5866:	f3ef 8010 	mrs	r0, PRIMASK
    586a:	9000      	str	r0, [sp, #0]
    586c:	b672      	cpsid	i
    586e:	2103      	movs	r1, #3
    5870:	4620      	mov	r0, r4
    5872:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5876:	4629      	mov	r1, r5
    5878:	f008 fc11 	bl	e09e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    587c:	b930      	cbnz	r0, 588c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    587e:	4639      	mov	r1, r7
    5880:	4620      	mov	r0, r4
    5882:	f008 fc0c 	bl	e09e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    5886:	b908      	cbnz	r0, 588c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    5888:	f7ff f8f0 	bl	4a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    588c:	9800      	ldr	r0, [sp, #0]
    588e:	b900      	cbnz	r0, 5892 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    5890:	b662      	cpsie	i
    5892:	4629      	mov	r1, r5
    5894:	4620      	mov	r0, r4
    5896:	f008 fc02 	bl	e09e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    589a:	b928      	cbnz	r0, 58a8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    589c:	4639      	mov	r1, r7
    589e:	4620      	mov	r0, r4
    58a0:	f008 fbfd 	bl	e09e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58a4:	2800      	cmp	r0, #0
    58a6:	d0d7      	beq.n	5858 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    58a8:	4639      	mov	r1, r7
    58aa:	4620      	mov	r0, r4
    58ac:	f008 fbf7 	bl	e09e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58b0:	2800      	cmp	r0, #0
    58b2:	d1c5      	bne.n	5840 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    58b4:	bb06      	cbnz	r6, 58f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    58b6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    58ba:	f88d 1000 	strb.w	r1, [sp]
    58be:	9900      	ldr	r1, [sp, #0]
    58c0:	9100      	str	r1, [sp, #0]
    58c2:	f89d 1000 	ldrb.w	r1, [sp]
    58c6:	b109      	cbz	r1, 58cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    58c8:	2501      	movs	r5, #1
    58ca:	e000      	b.n	58ce <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    58cc:	2500      	movs	r5, #0
    58ce:	f10b 0001 	add.w	r0, fp, #1
    58d2:	f880 8000 	strb.w	r8, [r0]
    58d6:	2003      	movs	r0, #3
    58d8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    58dc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    58e0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    58e4:	200e      	movs	r0, #14
    58e6:	f008 fbcd 	bl	e084 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    58ea:	4804      	ldr	r0, [pc, #16]	; (58fc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    58ec:	f007 f981 	bl	cbf2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    58f0:	b115      	cbz	r5, 58f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    58f2:	2011      	movs	r0, #17
    58f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58f8:	2000      	movs	r0, #0
    58fa:	e7fb      	b.n	58f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    58fc:	200002af 	.word	0x200002af
    5900:	4000e000 	.word	0x4000e000
    5904:	e000ed10 	.word	0xe000ed10

00005908 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5908:	b510      	push	{r4, lr}
    590a:	4806      	ldr	r0, [pc, #24]	; (5924 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    590c:	f007 f96d 	bl	cbea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5910:	b118      	cbz	r0, 591a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    5912:	2127      	movs	r1, #39	; 0x27
    5914:	201d      	movs	r0, #29
    5916:	f7ff fa37 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    591a:	4802      	ldr	r0, [pc, #8]	; (5924 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    591c:	2100      	movs	r1, #0
    591e:	7041      	strb	r1, [r0, #1]
    5920:	bd10      	pop	{r4, pc}
    5922:	0000      	.short	0x0000
    5924:	200002af 	.word	0x200002af

00005928 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5928:	b570      	push	{r4, r5, r6, lr}
    592a:	4911      	ldr	r1, [pc, #68]	; (5970 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    592c:	680a      	ldr	r2, [r1, #0]
    592e:	b1ea      	cbz	r2, 596c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5930:	2300      	movs	r3, #0
    5932:	461d      	mov	r5, r3
    5934:	2401      	movs	r4, #1
    5936:	684a      	ldr	r2, [r1, #4]
    5938:	1c52      	adds	r2, r2, #1
    593a:	604a      	str	r2, [r1, #4]
    593c:	2a09      	cmp	r2, #9
    593e:	d300      	bcc.n	5942 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5940:	604d      	str	r5, [r1, #4]
    5942:	790e      	ldrb	r6, [r1, #4]
    5944:	fa04 f206 	lsl.w	r2, r4, r6
    5948:	680e      	ldr	r6, [r1, #0]
    594a:	4216      	tst	r6, r2
    594c:	d00b      	beq.n	5966 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    594e:	f3ef 8310 	mrs	r3, PRIMASK
    5952:	b672      	cpsid	i
    5954:	680c      	ldr	r4, [r1, #0]
    5956:	4394      	bics	r4, r2
    5958:	600c      	str	r4, [r1, #0]
    595a:	b903      	cbnz	r3, 595e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    595c:	b662      	cpsie	i
    595e:	6849      	ldr	r1, [r1, #4]
    5960:	6001      	str	r1, [r0, #0]
    5962:	2000      	movs	r0, #0
    5964:	bd70      	pop	{r4, r5, r6, pc}
    5966:	1c5b      	adds	r3, r3, #1
    5968:	2b09      	cmp	r3, #9
    596a:	d3e4      	bcc.n	5936 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    596c:	2005      	movs	r0, #5
    596e:	bd70      	pop	{r4, r5, r6, pc}
    5970:	200000a4 	.word	0x200000a4

00005974 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5974:	4802      	ldr	r0, [pc, #8]	; (5980 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5976:	2100      	movs	r1, #0
    5978:	6001      	str	r1, [r0, #0]
    597a:	6041      	str	r1, [r0, #4]
    597c:	4770      	bx	lr
    597e:	0000      	.short	0x0000
    5980:	200000a4 	.word	0x200000a4

00005984 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5984:	b510      	push	{r4, lr}
    5986:	4c08      	ldr	r4, [pc, #32]	; (59a8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5988:	7861      	ldrb	r1, [r4, #1]
    598a:	b109      	cbz	r1, 5990 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    598c:	200f      	movs	r0, #15
    598e:	bd10      	pop	{r4, pc}
    5990:	f7fe fff8 	bl	4984 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5994:	7020      	strb	r0, [r4, #0]
    5996:	28ff      	cmp	r0, #255	; 0xff
    5998:	d001      	beq.n	599e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    599a:	2000      	movs	r0, #0
    599c:	bd10      	pop	{r4, pc}
    599e:	2178      	movs	r1, #120	; 0x78
    59a0:	201f      	movs	r0, #31
    59a2:	f7ff f9f1 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59a6:	0000      	.short	0x0000
    59a8:	200000ac 	.word	0x200000ac

000059ac <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    59ac:	4901      	ldr	r1, [pc, #4]	; (59b4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    59ae:	2000      	movs	r0, #0
    59b0:	7048      	strb	r0, [r1, #1]
    59b2:	4770      	bx	lr
    59b4:	200000ac 	.word	0x200000ac

000059b8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    59b8:	4806      	ldr	r0, [pc, #24]	; (59d4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    59ba:	4a07      	ldr	r2, [pc, #28]	; (59d8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    59bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    59be:	8852      	ldrh	r2, [r2, #2]
    59c0:	4291      	cmp	r1, r2
    59c2:	d104      	bne.n	59ce <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    59c4:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    59c8:	b108      	cbz	r0, 59ce <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    59ca:	2000      	movs	r0, #0
    59cc:	4770      	bx	lr
    59ce:	2001      	movs	r0, #1
    59d0:	4770      	bx	lr
    59d2:	0000      	.short	0x0000
    59d4:	20001394 	.word	0x20001394
    59d8:	20000294 	.word	0x20000294

000059dc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    59dc:	4901      	ldr	r1, [pc, #4]	; (59e4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    59de:	8048      	strh	r0, [r1, #2]
    59e0:	4770      	bx	lr
    59e2:	0000      	.short	0x0000
    59e4:	20000294 	.word	0x20000294

000059e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    59e8:	4808      	ldr	r0, [pc, #32]	; (5a0c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    59ea:	4a09      	ldr	r2, [pc, #36]	; (5a10 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    59ec:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    59ee:	8852      	ldrh	r2, [r2, #2]
    59f0:	4291      	cmp	r1, r2
    59f2:	d109      	bne.n	5a08 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    59f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    59f8:	8481      	strh	r1, [r0, #36]	; 0x24
    59fa:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    59fe:	b119      	cbz	r1, 5a08 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a00:	2100      	movs	r1, #0
    5a02:	7001      	strb	r1, [r0, #0]
    5a04:	2001      	movs	r0, #1
    5a06:	4770      	bx	lr
    5a08:	2000      	movs	r0, #0
    5a0a:	4770      	bx	lr
    5a0c:	20001394 	.word	0x20001394
    5a10:	20000294 	.word	0x20000294

00005a14 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5a14:	4807      	ldr	r0, [pc, #28]	; (5a34 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5a16:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5a1a:	2901      	cmp	r1, #1
    5a1c:	d007      	beq.n	5a2e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5a1e:	2101      	movs	r1, #1
    5a20:	7001      	strb	r1, [r0, #0]
    5a22:	4805      	ldr	r0, [pc, #20]	; (5a38 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5a24:	4903      	ldr	r1, [pc, #12]	; (5a34 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5a26:	8800      	ldrh	r0, [r0, #0]
    5a28:	8488      	strh	r0, [r1, #36]	; 0x24
    5a2a:	2001      	movs	r0, #1
    5a2c:	4770      	bx	lr
    5a2e:	2000      	movs	r0, #0
    5a30:	4770      	bx	lr
    5a32:	0000      	.short	0x0000
    5a34:	20001394 	.word	0x20001394
    5a38:	20000294 	.word	0x20000294

00005a3c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5a3c:	4906      	ldr	r1, [pc, #24]	; (5a58 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5a3e:	4b07      	ldr	r3, [pc, #28]	; (5a5c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5a40:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a42:	885b      	ldrh	r3, [r3, #2]
    5a44:	429a      	cmp	r2, r3
    5a46:	d105      	bne.n	5a54 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5a48:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a4c:	b112      	cbz	r2, 5a54 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5a4e:	6001      	str	r1, [r0, #0]
    5a50:	2001      	movs	r0, #1
    5a52:	4770      	bx	lr
    5a54:	2000      	movs	r0, #0
    5a56:	4770      	bx	lr
    5a58:	20001394 	.word	0x20001394
    5a5c:	20000294 	.word	0x20000294

00005a60 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5a60:	4909      	ldr	r1, [pc, #36]	; (5a88 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5a62:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a64:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5a68:	3bff      	subs	r3, #255	; 0xff
    5a6a:	d002      	beq.n	5a72 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5a6c:	2100      	movs	r1, #0
    5a6e:	6001      	str	r1, [r0, #0]
    5a70:	e007      	b.n	5a82 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5a72:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a76:	4904      	ldr	r1, [pc, #16]	; (5a88 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5a78:	2a01      	cmp	r2, #1
    5a7a:	d002      	beq.n	5a82 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5a7c:	6001      	str	r1, [r0, #0]
    5a7e:	2001      	movs	r0, #1
    5a80:	4770      	bx	lr
    5a82:	2000      	movs	r0, #0
    5a84:	4770      	bx	lr
    5a86:	0000      	.short	0x0000
    5a88:	20001394 	.word	0x20001394

00005a8c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5a8c:	4901      	ldr	r1, [pc, #4]	; (5a94 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5a8e:	8008      	strh	r0, [r1, #0]
    5a90:	4770      	bx	lr
    5a92:	0000      	.short	0x0000
    5a94:	20000294 	.word	0x20000294

00005a98 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5a98:	4905      	ldr	r1, [pc, #20]	; (5ab0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5a9a:	2000      	movs	r0, #0
    5a9c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5aa0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5aa4:	8488      	strh	r0, [r1, #36]	; 0x24
    5aa6:	4903      	ldr	r1, [pc, #12]	; (5ab4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5aa8:	8008      	strh	r0, [r1, #0]
    5aaa:	8048      	strh	r0, [r1, #2]
    5aac:	4770      	bx	lr
    5aae:	0000      	.short	0x0000
    5ab0:	20001394 	.word	0x20001394
    5ab4:	20000294 	.word	0x20000294
    5ab8:	4905      	ldr	r1, [pc, #20]	; (5ad0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5aba:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5abc:	4282      	cmp	r2, r0
    5abe:	d105      	bne.n	5acc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5ac0:	2000      	movs	r0, #0
    5ac2:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5ac6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5aca:	8488      	strh	r0, [r1, #36]	; 0x24
    5acc:	4770      	bx	lr
    5ace:	0000      	.short	0x0000
    5ad0:	20001394 	.word	0x20001394

00005ad4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5ad4:	4a0a      	ldr	r2, [pc, #40]	; (5b00 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5ad6:	b110      	cbz	r0, 5ade <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5ad8:	2801      	cmp	r0, #1
    5ada:	d007      	beq.n	5aec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5adc:	e00e      	b.n	5afc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5ade:	7850      	ldrb	r0, [r2, #1]
    5ae0:	b160      	cbz	r0, 5afc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5ae2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5ae6:	6008      	str	r0, [r1, #0]
    5ae8:	88d0      	ldrh	r0, [r2, #6]
    5aea:	e004      	b.n	5af6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5aec:	7810      	ldrb	r0, [r2, #0]
    5aee:	b128      	cbz	r0, 5afc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5af0:	6890      	ldr	r0, [r2, #8]
    5af2:	6008      	str	r0, [r1, #0]
    5af4:	8990      	ldrh	r0, [r2, #12]
    5af6:	8088      	strh	r0, [r1, #4]
    5af8:	2001      	movs	r0, #1
    5afa:	4770      	bx	lr
    5afc:	2000      	movs	r0, #0
    5afe:	4770      	bx	lr
    5b00:	200002b1 	.word	0x200002b1

00005b04 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5b04:	4a08      	ldr	r2, [pc, #32]	; (5b28 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5b06:	2301      	movs	r3, #1
    5b08:	b138      	cbz	r0, 5b1a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5b0a:	2801      	cmp	r0, #1
    5b0c:	d104      	bne.n	5b18 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5b0e:	7013      	strb	r3, [r2, #0]
    5b10:	6808      	ldr	r0, [r1, #0]
    5b12:	6090      	str	r0, [r2, #8]
    5b14:	8888      	ldrh	r0, [r1, #4]
    5b16:	8190      	strh	r0, [r2, #12]
    5b18:	4770      	bx	lr
    5b1a:	7053      	strb	r3, [r2, #1]
    5b1c:	6808      	ldr	r0, [r1, #0]
    5b1e:	f8c2 0002 	str.w	r0, [r2, #2]
    5b22:	8888      	ldrh	r0, [r1, #4]
    5b24:	80d0      	strh	r0, [r2, #6]
    5b26:	4770      	bx	lr
    5b28:	200002b1 	.word	0x200002b1

00005b2c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5b2c:	4906      	ldr	r1, [pc, #24]	; (5b48 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5b2e:	b110      	cbz	r0, 5b36 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5b30:	2801      	cmp	r0, #1
    5b32:	d002      	beq.n	5b3a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5b34:	e005      	b.n	5b42 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5b36:	7848      	ldrb	r0, [r1, #1]
    5b38:	e000      	b.n	5b3c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5b3a:	7808      	ldrb	r0, [r1, #0]
    5b3c:	b108      	cbz	r0, 5b42 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5b3e:	2001      	movs	r0, #1
    5b40:	4770      	bx	lr
    5b42:	2000      	movs	r0, #0
    5b44:	4770      	bx	lr
    5b46:	0000      	.short	0x0000
    5b48:	200002b1 	.word	0x200002b1

00005b4c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5b4c:	4901      	ldr	r1, [pc, #4]	; (5b54 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5b4e:	7748      	strb	r0, [r1, #29]
    5b50:	4770      	bx	lr
    5b52:	0000      	.short	0x0000
    5b54:	20000ce2 	.word	0x20000ce2

00005b58 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5b58:	4801      	ldr	r0, [pc, #4]	; (5b60 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5b5a:	78c0      	ldrb	r0, [r0, #3]
    5b5c:	4770      	bx	lr
    5b5e:	0000      	.short	0x0000
    5b60:	200000c8 	.word	0x200000c8

00005b64 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5b64:	4801      	ldr	r0, [pc, #4]	; (5b6c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5b66:	7900      	ldrb	r0, [r0, #4]
    5b68:	4770      	bx	lr
    5b6a:	0000      	.short	0x0000
    5b6c:	200000c8 	.word	0x200000c8

00005b70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b74:	4c14      	ldr	r4, [pc, #80]	; (5bc8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x58>)
    5b76:	4606      	mov	r6, r0
    5b78:	7f60      	ldrb	r0, [r4, #29]
    5b7a:	b318      	cbz	r0, 5bc4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5b7c:	7f20      	ldrb	r0, [r4, #28]
    5b7e:	f88d 0000 	strb.w	r0, [sp]
    5b82:	9800      	ldr	r0, [sp, #0]
    5b84:	9000      	str	r0, [sp, #0]
    5b86:	f89d 0000 	ldrb.w	r0, [sp]
    5b8a:	2700      	movs	r7, #0
    5b8c:	b1d0      	cbz	r0, 5bc4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5b8e:	f104 051c 	add.w	r5, r4, #28
    5b92:	f04f 081a 	mov.w	r8, #26
    5b96:	f104 090e 	add.w	r9, r4, #14
    5b9a:	7f20      	ldrb	r0, [r4, #28]
    5b9c:	f88d 0000 	strb.w	r0, [sp]
    5ba0:	9800      	ldr	r0, [sp, #0]
    5ba2:	9000      	str	r0, [sp, #0]
    5ba4:	f89d 0000 	ldrb.w	r0, [sp]
    5ba8:	b148      	cbz	r0, 5bbe <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4e>
    5baa:	702f      	strb	r7, [r5, #0]
    5bac:	7077      	strb	r7, [r6, #1]
    5bae:	f886 8000 	strb.w	r8, [r6]
    5bb2:	220e      	movs	r2, #14
    5bb4:	4649      	mov	r1, r9
    5bb6:	1d30      	adds	r0, r6, #4
    5bb8:	f007 f8ad 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5bbc:	e7ed      	b.n	5b9a <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x2a>
    5bbe:	2001      	movs	r0, #1
    5bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bc4:	2000      	movs	r0, #0
    5bc6:	e7fb      	b.n	5bc0 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>
    5bc8:	20000ce2 	.word	0x20000ce2

00005bcc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5bcc:	b510      	push	{r4, lr}
    5bce:	4604      	mov	r4, r0
    5bd0:	f000 f950 	bl	5e74 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5bd4:	b118      	cbz	r0, 5bde <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5bd6:	21be      	movs	r1, #190	; 0xbe
    5bd8:	2027      	movs	r0, #39	; 0x27
    5bda:	f7ff f8d5 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bde:	4803      	ldr	r0, [pc, #12]	; (5bec <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5be0:	2101      	movs	r1, #1
    5be2:	f008 fe43 	bl	e86c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5be6:	4802      	ldr	r0, [pc, #8]	; (5bf0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5be8:	62c4      	str	r4, [r0, #44]	; 0x2c
    5bea:	bd10      	pop	{r4, pc}
    5bec:	20000cc0 	.word	0x20000cc0
    5bf0:	200000c8 	.word	0x200000c8

00005bf4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5bf4:	4901      	ldr	r1, [pc, #4]	; (5bfc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5bf6:	2001      	movs	r0, #1
    5bf8:	7188      	strb	r0, [r1, #6]
    5bfa:	4770      	bx	lr
    5bfc:	200000c8 	.word	0x200000c8

00005c00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c04:	4c5d      	ldr	r4, [pc, #372]	; (5d7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    5c06:	9d06      	ldr	r5, [sp, #24]
    5c08:	7826      	ldrb	r6, [r4, #0]
    5c0a:	2e00      	cmp	r6, #0
    5c0c:	d16a      	bne.n	5ce4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c0e:	2a00      	cmp	r2, #0
    5c10:	d068      	beq.n	5ce4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c12:	2b00      	cmp	r3, #0
    5c14:	d066      	beq.n	5ce4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c16:	2d00      	cmp	r5, #0
    5c18:	d064      	beq.n	5ce4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c1a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5c1e:	f104 0614 	add.w	r6, r4, #20
    5c22:	2000      	movs	r0, #0
    5c24:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    5c28:	71a0      	strb	r0, [r4, #6]
    5c2a:	7160      	strb	r0, [r4, #5]
    5c2c:	70e0      	strb	r0, [r4, #3]
    5c2e:	70a0      	strb	r0, [r4, #2]
    5c30:	7120      	strb	r0, [r4, #4]
    5c32:	81a0      	strh	r0, [r4, #12]
    5c34:	81e0      	strh	r0, [r4, #14]
    5c36:	f000 f955 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5c3a:	4606      	mov	r6, r0
    5c3c:	f000 f94c 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5c40:	4605      	mov	r5, r0
    5c42:	f005 ffeb 	bl	bc1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5c46:	f005 fd1d 	bl	b684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c4a:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    5c4e:	f006 f86b 	bl	bd28 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5c52:	f105 001c 	add.w	r0, r5, #28
    5c56:	f006 f951 	bl	befc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5c5a:	6968      	ldr	r0, [r5, #20]
    5c5c:	f006 f944 	bl	bee8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5c60:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5c64:	f006 f97e 	bl	bf64 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5c68:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5c6c:	6840      	ldr	r0, [r0, #4]
    5c6e:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    5c72:	b108      	cbz	r0, 5c78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5c74:	f005 ff42 	bl	bafc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5c78:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5c7c:	2001      	movs	r0, #1
    5c7e:	f005 fe75 	bl	b96c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5c82:	2800      	cmp	r0, #0
    5c84:	d073      	beq.n	5d6e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    5c86:	483e      	ldr	r0, [pc, #248]	; (5d80 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    5c88:	f005 fee8 	bl	ba5c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5c8c:	8828      	ldrh	r0, [r5, #0]
    5c8e:	f7ff fcab 	bl	55e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5c92:	6320      	str	r0, [r4, #48]	; 0x30
    5c94:	8828      	ldrh	r0, [r5, #0]
    5c96:	f7ff fc91 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5c9a:	6360      	str	r0, [r4, #52]	; 0x34
    5c9c:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5ca0:	4838      	ldr	r0, [pc, #224]	; (5d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5ca2:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    5ca4:	f100 0808 	add.w	r8, r0, #8
    5ca8:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5cac:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5cae:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5cb2:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5cb4:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    5cb8:	f000 f99a 	bl	5ff0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x160>
    5cbc:	4601      	mov	r1, r0
    5cbe:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    5cc0:	f008 fb67 	bl	e392 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5cc4:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    5cc6:	4281      	cmp	r1, r0
    5cc8:	d200      	bcs.n	5ccc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xcc>
    5cca:	4608      	mov	r0, r1
    5ccc:	7220      	strb	r0, [r4, #8]
    5cce:	46a0      	mov	r8, r4
    5cd0:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5cd4:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    5cd8:	7cf7      	ldrb	r7, [r6, #19]
    5cda:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    5cde:	2908      	cmp	r1, #8
    5ce0:	d104      	bne.n	5cec <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5ce2:	e002      	b.n	5cea <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5ce4:	f240 1115 	movw	r1, #277	; 0x115
    5ce8:	e045      	b.n	5d76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5cea:	2104      	movs	r1, #4
    5cec:	f008 fb51 	bl	e392 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5cf0:	b90f      	cbnz	r7, 5cf6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    5cf2:	1d00      	adds	r0, r0, #4
    5cf4:	b280      	uxth	r0, r0
    5cf6:	4284      	cmp	r4, r0
    5cf8:	d200      	bcs.n	5cfc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5cfa:	4620      	mov	r0, r4
    5cfc:	b2c4      	uxtb	r4, r0
    5cfe:	f888 4009 	strb.w	r4, [r8, #9]
    5d02:	7cf1      	ldrb	r1, [r6, #19]
    5d04:	2900      	cmp	r1, #0
    5d06:	d001      	beq.n	5d0c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    5d08:	f04f 0104 	mov.w	r1, #4
    5d0c:	4421      	add	r1, r4
    5d0e:	f888 1007 	strb.w	r1, [r8, #7]
    5d12:	d014      	beq.n	5d3e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    5d14:	481b      	ldr	r0, [pc, #108]	; (5d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d16:	f04f 0701 	mov.w	r7, #1
    5d1a:	f100 0008 	add.w	r0, r0, #8
    5d1e:	7607      	strb	r7, [r0, #24]
    5d20:	e9d6 1218 	ldrd	r1, r2, [r6, #96]	; 0x60
    5d24:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5d28:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    5d2c:	f008 fa37 	bl	e19e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5d30:	4914      	ldr	r1, [pc, #80]	; (5d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d32:	4603      	mov	r3, r0
    5d34:	4622      	mov	r2, r4
    5d36:	3108      	adds	r1, #8
    5d38:	4638      	mov	r0, r7
    5d3a:	f005 fc0f 	bl	b55c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5d3e:	2001      	movs	r0, #1
    5d40:	f000 fb7e 	bl	6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    5d44:	4810      	ldr	r0, [pc, #64]	; (5d88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5d46:	6800      	ldr	r0, [r0, #0]
    5d48:	2803      	cmp	r0, #3
    5d4a:	d012      	beq.n	5d72 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5d4c:	280b      	cmp	r0, #11
    5d4e:	d010      	beq.n	5d72 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5d50:	480c      	ldr	r0, [pc, #48]	; (5d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d52:	220e      	movs	r2, #14
    5d54:	2100      	movs	r1, #0
    5d56:	3052      	adds	r0, #82	; 0x52
    5d58:	f007 f857 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d5c:	4809      	ldr	r0, [pc, #36]	; (5d84 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d5e:	88b1      	ldrh	r1, [r6, #4]
    5d60:	3052      	adds	r0, #82	; 0x52
    5d62:	8041      	strh	r1, [r0, #2]
    5d64:	8829      	ldrh	r1, [r5, #0]
    5d66:	8001      	strh	r1, [r0, #0]
    5d68:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5d6c:	7101      	strb	r1, [r0, #4]
    5d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d72:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    5d76:	2027      	movs	r0, #39	; 0x27
    5d78:	f7ff f806 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d7c:	200000c8 	.word	0x200000c8
    5d80:	00006640 	.word	0x00006640
    5d84:	20000c90 	.word	0x20000c90
    5d88:	40001550 	.word	0x40001550

00005d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d90:	4605      	mov	r5, r0
    5d92:	f000 f8a7 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5d96:	4e32      	ldr	r6, [pc, #200]	; (5e60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    5d98:	4604      	mov	r4, r0
    5d9a:	f04f 0800 	mov.w	r8, #0
    5d9e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5da0:	7847      	ldrb	r7, [r0, #1]
    5da2:	b10d      	cbz	r5, 5da8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    5da4:	2d01      	cmp	r5, #1
    5da6:	d101      	bne.n	5dac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5da8:	f886 8001 	strb.w	r8, [r6, #1]
    5dac:	7870      	ldrb	r0, [r6, #1]
    5dae:	f04f 0901 	mov.w	r9, #1
    5db2:	b150      	cbz	r0, 5dca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5db4:	2801      	cmp	r0, #1
    5db6:	d01a      	beq.n	5dee <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    5db8:	2802      	cmp	r0, #2
    5dba:	d034      	beq.n	5e26 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    5dbc:	2803      	cmp	r0, #3
    5dbe:	d048      	beq.n	5e52 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    5dc0:	f240 4114 	movw	r1, #1044	; 0x414
    5dc4:	2027      	movs	r0, #39	; 0x27
    5dc6:	f7fe ffdf 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dca:	2d01      	cmp	r5, #1
    5dcc:	d032      	beq.n	5e34 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5dce:	f000 f8fb 	bl	5fc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5dd2:	4639      	mov	r1, r7
    5dd4:	2201      	movs	r2, #1
    5dd6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5dd8:	f007 fd47 	bl	d86a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5ddc:	e028      	b.n	5e30 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    5dde:	bf00      	nop
    5de0:	f884 8008 	strb.w	r8, [r4, #8]
    5de4:	e031      	b.n	5e4a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5de6:	bf00      	nop
    5de8:	f884 9008 	strb.w	r9, [r4, #8]
    5dec:	e02d      	b.n	5e4a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5dee:	2d01      	cmp	r5, #1
    5df0:	d008      	beq.n	5e04 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    5df2:	f000 f8e9 	bl	5fc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5df6:	4639      	mov	r1, r7
    5df8:	2200      	movs	r2, #0
    5dfa:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5dfc:	f007 fd35 	bl	d86a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5e00:	2d02      	cmp	r5, #2
    5e02:	d00b      	beq.n	5e1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e04:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5e08:	1c40      	adds	r0, r0, #1
    5e0a:	f141 0100 	adc.w	r1, r1, #0
    5e0e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5e12:	7a20      	ldrb	r0, [r4, #8]
    5e14:	2801      	cmp	r0, #1
    5e16:	d003      	beq.n	5e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5e18:	f884 9008 	strb.w	r9, [r4, #8]
    5e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e20:	f884 8008 	strb.w	r8, [r4, #8]
    5e24:	e7fa      	b.n	5e1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e26:	2d01      	cmp	r5, #1
    5e28:	d004      	beq.n	5e34 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5e2a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e2c:	f007 ff2e 	bl	dc8c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5e30:	2d02      	cmp	r5, #2
    5e32:	d0f3      	beq.n	5e1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e34:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5e38:	1c40      	adds	r0, r0, #1
    5e3a:	f141 0100 	adc.w	r1, r1, #0
    5e3e:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5e42:	7a20      	ldrb	r0, [r4, #8]
    5e44:	2801      	cmp	r0, #1
    5e46:	d1cf      	bne.n	5de8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    5e48:	e7ca      	b.n	5de0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    5e4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e4e:	f001 b8d1 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e52:	2d01      	cmp	r5, #1
    5e54:	d0e2      	beq.n	5e1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e56:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e58:	f007 ff18 	bl	dc8c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5e5c:	e7f5      	b.n	5e4a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5e5e:	0000      	.short	0x0000
    5e60:	200000c8 	.word	0x200000c8

00005e64 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5e64:	4802      	ldr	r0, [pc, #8]	; (5e70 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5e66:	89c0      	ldrh	r0, [r0, #14]
    5e68:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5e6c:	4770      	bx	lr
    5e6e:	0000      	.short	0x0000
    5e70:	200000c8 	.word	0x200000c8

00005e74 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5e74:	4804      	ldr	r0, [pc, #16]	; (5e88 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5e76:	7800      	ldrb	r0, [r0, #0]
    5e78:	b108      	cbz	r0, 5e7e <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5e7a:	200c      	movs	r0, #12
    5e7c:	4770      	bx	lr
    5e7e:	4903      	ldr	r1, [pc, #12]	; (5e8c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5e80:	2000      	movs	r0, #0
    5e82:	7748      	strb	r0, [r1, #29]
    5e84:	4770      	bx	lr
    5e86:	0000      	.short	0x0000
    5e88:	200000c8 	.word	0x200000c8
    5e8c:	20000ce2 	.word	0x20000ce2

00005e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5e90:	480c      	ldr	r0, [pc, #48]	; (5ec4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5e92:	b510      	push	{r4, lr}
    5e94:	7801      	ldrb	r1, [r0, #0]
    5e96:	b149      	cbz	r1, 5eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5e98:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5e9c:	7800      	ldrb	r0, [r0, #0]
    5e9e:	2802      	cmp	r0, #2
    5ea0:	d008      	beq.n	5eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5ea2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    5ea6:	2027      	movs	r0, #39	; 0x27
    5ea8:	f7fe ff6e 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5eb0:	f000 b9e6 	b.w	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5eb4:	6848      	ldr	r0, [r1, #4]
    5eb6:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    5eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ebe:	f005 bdd5 	b.w	ba6c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5ec2:	0000      	.short	0x0000
    5ec4:	200000c8 	.word	0x200000c8
    5ec8:	4a02      	ldr	r2, [pc, #8]	; (5ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5eca:	8993      	ldrh	r3, [r2, #12]
    5ecc:	4303      	orrs	r3, r0
    5ece:	8193      	strh	r3, [r2, #12]
    5ed0:	6952      	ldr	r2, [r2, #20]
    5ed2:	4710      	bx	r2
    5ed4:	200000c8 	.word	0x200000c8
    5ed8:	4801      	ldr	r0, [pc, #4]	; (5ee0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5eda:	6840      	ldr	r0, [r0, #4]
    5edc:	4770      	bx	lr
    5ede:	0000      	.short	0x0000
    5ee0:	20000100 	.word	0x20000100
    5ee4:	4801      	ldr	r0, [pc, #4]	; (5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5ee6:	6840      	ldr	r0, [r0, #4]
    5ee8:	3078      	adds	r0, #120	; 0x78
    5eea:	4770      	bx	lr
    5eec:	20000100 	.word	0x20000100
    5ef0:	4a01      	ldr	r2, [pc, #4]	; (5ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5ef2:	2100      	movs	r1, #0
    5ef4:	6952      	ldr	r2, [r2, #20]
    5ef6:	4710      	bx	r2
    5ef8:	200000c8 	.word	0x200000c8
    5efc:	b570      	push	{r4, r5, r6, lr}
    5efe:	f7ff fff1 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f02:	4604      	mov	r4, r0
    5f04:	f7ff ffe8 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f08:	4605      	mov	r5, r0
    5f0a:	4621      	mov	r1, r4
    5f0c:	f008 fac4 	bl	e498 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5f10:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    5f14:	2901      	cmp	r1, #1
    5f16:	d114      	bne.n	5f42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5f18:	2800      	cmp	r0, #0
    5f1a:	d012      	beq.n	5f42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5f1c:	4809      	ldr	r0, [pc, #36]	; (5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5f1e:	6842      	ldr	r2, [r0, #4]
    5f20:	8828      	ldrh	r0, [r5, #0]
    5f22:	f8a2 0206 	strh.w	r0, [r2, #518]	; 0x206
    5f26:	7a60      	ldrb	r0, [r4, #9]
    5f28:	f882 0208 	strb.w	r0, [r2, #520]	; 0x208
    5f2c:	7aa0      	ldrb	r0, [r4, #10]
    5f2e:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    5f32:	f502 7201 	add.w	r2, r2, #516	; 0x204
    5f36:	20ff      	movs	r0, #255	; 0xff
    5f38:	7010      	strb	r0, [r2, #0]
    5f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f3e:	f001 b859 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5f42:	bd70      	pop	{r4, r5, r6, pc}
    5f44:	20000100 	.word	0x20000100
    5f48:	b570      	push	{r4, r5, r6, lr}
    5f4a:	4605      	mov	r5, r0
    5f4c:	2901      	cmp	r1, #1
    5f4e:	d818      	bhi.n	5f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f50:	4c12      	ldr	r4, [pc, #72]	; (5f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5f52:	69a1      	ldr	r1, [r4, #24]
    5f54:	4788      	blx	r1
    5f56:	b1a0      	cbz	r0, 5f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f58:	7960      	ldrb	r0, [r4, #5]
    5f5a:	b990      	cbnz	r0, 5f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f5c:	b9e5      	cbnz	r5, 5f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5f5e:	f104 0010 	add.w	r0, r4, #16
    5f62:	7801      	ldrb	r1, [r0, #0]
    5f64:	06c8      	lsls	r0, r1, #27
    5f66:	d405      	bmi.n	5f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5f68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5f6a:	7800      	ldrb	r0, [r0, #0]
    5f6c:	06c0      	lsls	r0, r0, #27
    5f6e:	d401      	bmi.n	5f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5f70:	2001      	movs	r0, #1
    5f72:	e000      	b.n	5f76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5f74:	2000      	movs	r0, #0
    5f76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5f78:	b92a      	cbnz	r2, 5f86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f7a:	8962      	ldrh	r2, [r4, #10]
    5f7c:	b11a      	cbz	r2, 5f86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f7e:	06c9      	lsls	r1, r1, #27
    5f80:	d401      	bmi.n	5f86 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f82:	2001      	movs	r0, #1
    5f84:	bd70      	pop	{r4, r5, r6, pc}
    5f86:	89a1      	ldrh	r1, [r4, #12]
    5f88:	078a      	lsls	r2, r1, #30
    5f8a:	d503      	bpl.n	5f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5f8c:	6a22      	ldr	r2, [r4, #32]
    5f8e:	78d2      	ldrb	r2, [r2, #3]
    5f90:	2a02      	cmp	r2, #2
    5f92:	d001      	beq.n	5f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5f94:	4308      	orrs	r0, r1
    5f96:	d1f4      	bne.n	5f82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f98:	2000      	movs	r0, #0
    5f9a:	bd70      	pop	{r4, r5, r6, pc}
    5f9c:	200000c8 	.word	0x200000c8
    5fa0:	b530      	push	{r4, r5, lr}
    5fa2:	4b08      	ldr	r3, [pc, #32]	; (5fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5fa4:	88dd      	ldrh	r5, [r3, #6]
    5fa6:	891c      	ldrh	r4, [r3, #8]
    5fa8:	b12a      	cbz	r2, 5fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    5faa:	b908      	cbnz	r0, 5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5fac:	b905      	cbnz	r5, 5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5fae:	b114      	cbz	r4, 5fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    5fb0:	8958      	ldrh	r0, [r3, #10]
    5fb2:	1c40      	adds	r0, r0, #1
    5fb4:	8158      	strh	r0, [r3, #10]
    5fb6:	b111      	cbz	r1, 5fbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    5fb8:	1c6d      	adds	r5, r5, #1
    5fba:	80dd      	strh	r5, [r3, #6]
    5fbc:	bd30      	pop	{r4, r5, pc}
    5fbe:	1c64      	adds	r4, r4, #1
    5fc0:	811c      	strh	r4, [r3, #8]
    5fc2:	bd30      	pop	{r4, r5, pc}
    5fc4:	20000ce2 	.word	0x20000ce2
    5fc8:	b510      	push	{r4, lr}
    5fca:	4c08      	ldr	r4, [pc, #32]	; (5fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>)
    5fcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5fce:	b138      	cbz	r0, 5fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    5fd0:	8962      	ldrh	r2, [r4, #10]
    5fd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5fd4:	1cd2      	adds	r2, r2, #3
    5fd6:	f006 fe9e 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5fda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5fdc:	6260      	str	r0, [r4, #36]	; 0x24
    5fde:	bd10      	pop	{r4, pc}
    5fe0:	f240 415a 	movw	r1, #1114	; 0x45a
    5fe4:	2027      	movs	r0, #39	; 0x27
    5fe6:	f7fe fecf 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fea:	0000      	.short	0x0000
    5fec:	200000c8 	.word	0x200000c8
    5ff0:	b510      	push	{r4, lr}
    5ff2:	f7ff ff71 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ff6:	4604      	mov	r4, r0
    5ff8:	f7ff ff74 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ffc:	4601      	mov	r1, r0
    5ffe:	7b42      	ldrb	r2, [r0, #13]
    6000:	4815      	ldr	r0, [pc, #84]	; (6058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c8>)
    6002:	2a24      	cmp	r2, #36	; 0x24
    6004:	d00e      	beq.n	6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    6006:	7b89      	ldrb	r1, [r1, #14]
    6008:	2924      	cmp	r1, #36	; 0x24
    600a:	d00b      	beq.n	6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    600c:	2a1f      	cmp	r2, #31
    600e:	d00d      	beq.n	602c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    6010:	2a20      	cmp	r2, #32
    6012:	d00b      	beq.n	602c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    6014:	2922      	cmp	r1, #34	; 0x22
    6016:	d00f      	beq.n	6038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    6018:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    601c:	2804      	cmp	r0, #4
    601e:	d100      	bne.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    6020:	2008      	movs	r0, #8
    6022:	bd10      	pop	{r4, pc}
    6024:	6840      	ldr	r0, [r0, #4]
    6026:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    602a:	e00e      	b.n	604a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ba>
    602c:	2922      	cmp	r1, #34	; 0x22
    602e:	d003      	beq.n	6038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    6030:	6840      	ldr	r0, [r0, #4]
    6032:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    6036:	e005      	b.n	6044 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b4>
    6038:	6841      	ldr	r1, [r0, #4]
    603a:	f891 01c0 	ldrb.w	r0, [r1, #448]	; 0x1c0
    603e:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    6042:	4008      	ands	r0, r1
    6044:	f008 f8a1 	bl	e18a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    6048:	4601      	mov	r1, r0
    604a:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    604e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6052:	f008 b8b2 	b.w	e1ba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    6056:	0000      	.short	0x0000
    6058:	20000100 	.word	0x20000100
    605c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6060:	4689      	mov	r9, r1
    6062:	4607      	mov	r7, r0
    6064:	f7ff ff3e 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6068:	4c55      	ldr	r4, [pc, #340]	; (61c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>)
    606a:	f04f 0800 	mov.w	r8, #0
    606e:	4605      	mov	r5, r0
    6070:	f88d 8000 	strb.w	r8, [sp]
    6074:	7820      	ldrb	r0, [r4, #0]
    6076:	4646      	mov	r6, r8
    6078:	2802      	cmp	r0, #2
    607a:	d004      	beq.n	6086 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    607c:	f240 41de 	movw	r1, #1246	; 0x4de
    6080:	2027      	movs	r0, #39	; 0x27
    6082:	f7fe fe81 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6086:	7ba0      	ldrb	r0, [r4, #14]
    6088:	0640      	lsls	r0, r0, #25
    608a:	d406      	bmi.n	609a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    608c:	2040      	movs	r0, #64	; 0x40
    608e:	f7ff ff2f 	bl	5ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6092:	89e0      	ldrh	r0, [r4, #14]
    6094:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6098:	81e0      	strh	r0, [r4, #14]
    609a:	7ce8      	ldrb	r0, [r5, #19]
    609c:	b3d7      	cbz	r7, 6114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    609e:	b180      	cbz	r0, 60c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60a0:	f005 fb2a 	bl	b6f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    60a4:	f005 fb04 	bl	b6b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    60a8:	b958      	cbnz	r0, 60c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    60ac:	7841      	ldrb	r1, [r0, #1]
    60ae:	b141      	cbz	r1, 60c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60b0:	7800      	ldrb	r0, [r0, #0]
    60b2:	7a29      	ldrb	r1, [r5, #8]
    60b4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    60b8:	4288      	cmp	r0, r1
    60ba:	d102      	bne.n	60c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60bc:	2001      	movs	r0, #1
    60be:	70a0      	strb	r0, [r4, #2]
    60c0:	e060      	b.n	6184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    60c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    60c4:	7841      	ldrb	r1, [r0, #1]
    60c6:	8161      	strh	r1, [r4, #10]
    60c8:	b121      	cbz	r1, 60d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    60ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    60cc:	f007 fdab 	bl	dc26 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    60d0:	62a0      	str	r0, [r4, #40]	; 0x28
    60d2:	e000      	b.n	60d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    60d4:	62a6      	str	r6, [r4, #40]	; 0x28
    60d6:	89e0      	ldrh	r0, [r4, #14]
    60d8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    60dc:	81e0      	strh	r0, [r4, #14]
    60de:	6a60      	ldr	r0, [r4, #36]	; 0x24
    60e0:	79e9      	ldrb	r1, [r5, #7]
    60e2:	7800      	ldrb	r0, [r0, #0]
    60e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    60e8:	4288      	cmp	r0, r1
    60ea:	d006      	beq.n	60fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    60ec:	f000 f95a 	bl	63a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x514>
    60f0:	89e0      	ldrh	r0, [r4, #14]
    60f2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    60f6:	81e0      	strh	r0, [r4, #14]
    60f8:	e001      	b.n	60fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    60fa:	f04f 0801 	mov.w	r8, #1
    60fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6100:	7a29      	ldrb	r1, [r5, #8]
    6102:	7800      	ldrb	r0, [r0, #0]
    6104:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6108:	4288      	cmp	r0, r1
    610a:	d10e      	bne.n	612a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    610c:	4668      	mov	r0, sp
    610e:	f000 f90b 	bl	6328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6112:	e00a      	b.n	612a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    6114:	e7ff      	b.n	6116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    6116:	b108      	cbz	r0, 611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    6118:	f005 fae8 	bl	b6ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    611c:	78e0      	ldrb	r0, [r4, #3]
    611e:	1c40      	adds	r0, r0, #1
    6120:	70e0      	strb	r0, [r4, #3]
    6122:	89e0      	ldrh	r0, [r4, #14]
    6124:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6128:	81e0      	strh	r0, [r4, #14]
    612a:	7ca8      	ldrb	r0, [r5, #18]
    612c:	b188      	cbz	r0, 6152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    612e:	f7ff fed3 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6132:	4924      	ldr	r1, [pc, #144]	; (61c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    6134:	760e      	strb	r6, [r1, #24]
    6136:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    613a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    613e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    6142:	f008 f82c 	bl	e19e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6146:	4603      	mov	r3, r0
    6148:	22fb      	movs	r2, #251	; 0xfb
    614a:	491e      	ldr	r1, [pc, #120]	; (61c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    614c:	4630      	mov	r0, r6
    614e:	f005 fa05 	bl	b55c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6152:	f1b9 0f00 	cmp.w	r9, #0
    6156:	d104      	bne.n	6162 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    6158:	78e1      	ldrb	r1, [r4, #3]
    615a:	2001      	movs	r0, #1
    615c:	f7ff fef4 	bl	5f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6160:	b1a0      	cbz	r0, 618c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    6162:	f005 fead 	bl	bec0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    6166:	f89d 0000 	ldrb.w	r0, [sp]
    616a:	b110      	cbz	r0, 6172 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e2>
    616c:	2000      	movs	r0, #0
    616e:	f7ff fe0d 	bl	5d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6172:	88a8      	ldrh	r0, [r5, #4]
    6174:	4642      	mov	r2, r8
    6176:	4639      	mov	r1, r7
    6178:	f7ff ff12 	bl	5fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    617c:	b117      	cbz	r7, 6184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    617e:	70e6      	strb	r6, [r4, #3]
    6180:	f7ff febc 	bl	5efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6184:	f000 f87c 	bl	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    618c:	f89d 0000 	ldrb.w	r0, [sp]
    6190:	b110      	cbz	r0, 6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    6192:	2001      	movs	r0, #1
    6194:	f7ff fdfa 	bl	5d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6198:	2000      	movs	r0, #0
    619a:	f000 f98d 	bl	64b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>
    619e:	f89d 0000 	ldrb.w	r0, [sp]
    61a2:	b110      	cbz	r0, 61aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31a>
    61a4:	2002      	movs	r0, #2
    61a6:	f7ff fdf1 	bl	5d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61aa:	88a8      	ldrh	r0, [r5, #4]
    61ac:	4642      	mov	r2, r8
    61ae:	4639      	mov	r1, r7
    61b0:	f7ff fef6 	bl	5fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    61b4:	2f00      	cmp	r7, #0
    61b6:	d0e7      	beq.n	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    61b8:	70e6      	strb	r6, [r4, #3]
    61ba:	f7ff fe9f 	bl	5efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    61be:	e7e3      	b.n	6188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    61c0:	200000c8 	.word	0x200000c8
    61c4:	20000c98 	.word	0x20000c98
    61c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61cc:	460f      	mov	r7, r1
    61ce:	4680      	mov	r8, r0
    61d0:	f7ff fe88 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    61d4:	4d28      	ldr	r5, [pc, #160]	; (6278 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>)
    61d6:	4604      	mov	r4, r0
    61d8:	7828      	ldrb	r0, [r5, #0]
    61da:	2801      	cmp	r0, #1
    61dc:	d004      	beq.n	61e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    61de:	f240 4169 	movw	r1, #1129	; 0x469
    61e2:	2027      	movs	r0, #39	; 0x27
    61e4:	f7fe fdd0 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61e8:	7861      	ldrb	r1, [r4, #1]
    61ea:	2000      	movs	r0, #0
    61ec:	2601      	movs	r6, #1
    61ee:	b129      	cbz	r1, 61fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>
    61f0:	7060      	strb	r0, [r4, #1]
    61f2:	2100      	movs	r1, #0
    61f4:	2004      	movs	r0, #4
    61f6:	f7ff fe67 	bl	5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61fa:	70e6      	strb	r6, [r4, #3]
    61fc:	6a29      	ldr	r1, [r5, #32]
    61fe:	7808      	ldrb	r0, [r1, #0]
    6200:	43c0      	mvns	r0, r0
    6202:	0780      	lsls	r0, r0, #30
    6204:	d109      	bne.n	621a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38a>
    6206:	79a0      	ldrb	r0, [r4, #6]
    6208:	bb78      	cbnz	r0, 626a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    620a:	2002      	movs	r0, #2
    620c:	f7ff fe5c 	bl	5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6210:	6a28      	ldr	r0, [r5, #32]
    6212:	7800      	ldrb	r0, [r0, #0]
    6214:	43c0      	mvns	r0, r0
    6216:	0780      	lsls	r0, r0, #30
    6218:	d027      	beq.n	626a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    621a:	6a28      	ldr	r0, [r5, #32]
    621c:	7840      	ldrb	r0, [r0, #1]
    621e:	b110      	cbz	r0, 6226 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x396>
    6220:	2002      	movs	r0, #2
    6222:	71a0      	strb	r0, [r4, #6]
    6224:	e000      	b.n	6228 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    6226:	71a6      	strb	r6, [r4, #6]
    6228:	7ce0      	ldrb	r0, [r4, #19]
    622a:	b190      	cbz	r0, 6252 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    622c:	f7ff fe54 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6230:	4912      	ldr	r1, [pc, #72]	; (627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    6232:	7a6d      	ldrb	r5, [r5, #9]
    6234:	760e      	strb	r6, [r1, #24]
    6236:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    623a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    623e:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    6242:	f007 ffac 	bl	e19e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6246:	4603      	mov	r3, r0
    6248:	462a      	mov	r2, r5
    624a:	490c      	ldr	r1, [pc, #48]	; (627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    624c:	4630      	mov	r0, r6
    624e:	f005 f985 	bl	b55c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    6252:	ea37 0708 	bics.w	r7, r7, r8
    6256:	d004      	beq.n	6262 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d2>
    6258:	2100      	movs	r1, #0
    625a:	4608      	mov	r0, r1
    625c:	f7ff fe74 	bl	5f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6260:	b128      	cbz	r0, 626e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3de>
    6262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6266:	f000 b80b 	b.w	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    626a:	2003      	movs	r0, #3
    626c:	e7d9      	b.n	6222 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x392>
    626e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6272:	2000      	movs	r0, #0
    6274:	f000 b8e4 	b.w	6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    6278:	200000c8 	.word	0x200000c8
    627c:	20000c98 	.word	0x20000c98
    6280:	b510      	push	{r4, lr}
    6282:	f005 fad7 	bl	b834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6286:	f005 f9fd 	bl	b684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    628a:	4c0c      	ldr	r4, [pc, #48]	; (62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>)
    628c:	89e0      	ldrh	r0, [r4, #14]
    628e:	f7ff fe2f 	bl	5ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6292:	69e2      	ldr	r2, [r4, #28]
    6294:	7961      	ldrb	r1, [r4, #5]
    6296:	78a0      	ldrb	r0, [r4, #2]
    6298:	4790      	blx	r2
    629a:	4809      	ldr	r0, [pc, #36]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    629c:	7f40      	ldrb	r0, [r0, #29]
    629e:	b150      	cbz	r0, 62b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    62a0:	4907      	ldr	r1, [pc, #28]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    62a2:	220e      	movs	r2, #14
    62a4:	f101 000e 	add.w	r0, r1, #14
    62a8:	f006 fd35 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62ac:	4804      	ldr	r0, [pc, #16]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    62ae:	21ff      	movs	r1, #255	; 0xff
    62b0:	7701      	strb	r1, [r0, #28]
    62b2:	f000 fe9f 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    62b6:	2000      	movs	r0, #0
    62b8:	7020      	strb	r0, [r4, #0]
    62ba:	bd10      	pop	{r4, pc}
    62bc:	200000c8 	.word	0x200000c8
    62c0:	20000ce2 	.word	0x20000ce2
    62c4:	4808      	ldr	r0, [pc, #32]	; (62e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    62c6:	b510      	push	{r4, lr}
    62c8:	7800      	ldrb	r0, [r0, #0]
    62ca:	2802      	cmp	r0, #2
    62cc:	d004      	beq.n	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    62ce:	f44f 7108 	mov.w	r1, #544	; 0x220
    62d2:	2027      	movs	r0, #39	; 0x27
    62d4:	f7fe fd58 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62d8:	4904      	ldr	r1, [pc, #16]	; (62ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    62da:	2001      	movs	r0, #1
    62dc:	7308      	strb	r0, [r1, #12]
    62de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62e2:	f7ff bfcd 	b.w	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    62e6:	0000      	.short	0x0000
    62e8:	200000c8 	.word	0x200000c8
    62ec:	20000ce2 	.word	0x20000ce2
    62f0:	4b0c      	ldr	r3, [pc, #48]	; (6324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    62f2:	b430      	push	{r4, r5}
    62f4:	79db      	ldrb	r3, [r3, #7]
    62f6:	b93a      	cbnz	r2, 6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    62f8:	2bff      	cmp	r3, #255	; 0xff
    62fa:	d105      	bne.n	6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    62fc:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    6300:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    6304:	42a2      	cmp	r2, r4
    6306:	d00a      	beq.n	631e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    6308:	b129      	cbz	r1, 6316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x486>
    630a:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    630e:	bc30      	pop	{r4, r5}
    6310:	4618      	mov	r0, r3
    6312:	f005 bdfd 	b.w	bf10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6316:	23ff      	movs	r3, #255	; 0xff
    6318:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    631c:	e7f7      	b.n	630e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47e>
    631e:	bc30      	pop	{r4, r5}
    6320:	4770      	bx	lr
    6322:	0000      	.short	0x0000
    6324:	200000c8 	.word	0x200000c8
    6328:	b570      	push	{r4, r5, r6, lr}
    632a:	4606      	mov	r6, r0
    632c:	f7ff fdda 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6330:	4a1b      	ldr	r2, [pc, #108]	; (63a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>)
    6332:	4604      	mov	r4, r0
    6334:	2501      	movs	r5, #1
    6336:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6338:	7808      	ldrb	r0, [r1, #0]
    633a:	f000 0003 	and.w	r0, r0, #3
    633e:	2801      	cmp	r0, #1
    6340:	d00c      	beq.n	635c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    6342:	2802      	cmp	r0, #2
    6344:	d00a      	beq.n	635c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    6346:	2803      	cmp	r0, #3
    6348:	d121      	bne.n	638e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    634a:	7065      	strb	r5, [r4, #1]
    634c:	89d0      	ldrh	r0, [r2, #14]
    634e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    6352:	81d0      	strh	r0, [r2, #14]
    6354:	2001      	movs	r0, #1
    6356:	f7ff fdb7 	bl	5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    635a:	e018      	b.n	638e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    635c:	7848      	ldrb	r0, [r1, #1]
    635e:	b1b0      	cbz	r0, 638e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6360:	89d1      	ldrh	r1, [r2, #14]
    6362:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6366:	81d1      	strh	r1, [r2, #14]
    6368:	6a91      	ldr	r1, [r2, #40]	; 0x28
    636a:	2900      	cmp	r1, #0
    636c:	d009      	beq.n	6382 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f2>
    636e:	28fb      	cmp	r0, #251	; 0xfb
    6370:	d808      	bhi.n	6384 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f4>
    6372:	7990      	ldrb	r0, [r2, #6]
    6374:	b120      	cbz	r0, 6380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    6376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    637a:	2020      	movs	r0, #32
    637c:	f7ff bdb8 	b.w	5ef0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6380:	7035      	strb	r5, [r6, #0]
    6382:	bd70      	pop	{r4, r5, r6, pc}
    6384:	7950      	ldrb	r0, [r2, #5]
    6386:	f040 0010 	orr.w	r0, r0, #16
    638a:	7150      	strb	r0, [r2, #5]
    638c:	bd70      	pop	{r4, r5, r6, pc}
    638e:	7a20      	ldrb	r0, [r4, #8]
    6390:	2801      	cmp	r0, #1
    6392:	d001      	beq.n	6398 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>
    6394:	7225      	strb	r5, [r4, #8]
    6396:	bd70      	pop	{r4, r5, r6, pc}
    6398:	2000      	movs	r0, #0
    639a:	7220      	strb	r0, [r4, #8]
    639c:	bd70      	pop	{r4, r5, r6, pc}
    639e:	0000      	.short	0x0000
    63a0:	200000c8 	.word	0x200000c8
    63a4:	b538      	push	{r3, r4, r5, lr}
    63a6:	f7ff fd9d 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63aa:	4604      	mov	r4, r0
    63ac:	7980      	ldrb	r0, [r0, #6]
    63ae:	2800      	cmp	r0, #0
    63b0:	d02f      	beq.n	6412 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x582>
    63b2:	2802      	cmp	r0, #2
    63b4:	d10e      	bne.n	63d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>
    63b6:	481c      	ldr	r0, [pc, #112]	; (6428 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>)
    63b8:	4669      	mov	r1, sp
    63ba:	6b00      	ldr	r0, [r0, #48]	; 0x30
    63bc:	f007 fa2a 	bl	d814 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    63c0:	b340      	cbz	r0, 6414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x584>
    63c2:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    63c6:	1c40      	adds	r0, r0, #1
    63c8:	f141 0100 	adc.w	r1, r1, #0
    63cc:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    63d0:	f000 fe10 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    63d4:	2500      	movs	r5, #0
    63d6:	71a5      	strb	r5, [r4, #6]
    63d8:	78e0      	ldrb	r0, [r4, #3]
    63da:	b120      	cbz	r0, 63e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x556>
    63dc:	70e5      	strb	r5, [r4, #3]
    63de:	2100      	movs	r1, #0
    63e0:	2010      	movs	r0, #16
    63e2:	f7ff fd71 	bl	5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    63e6:	78a0      	ldrb	r0, [r4, #2]
    63e8:	b170      	cbz	r0, 6408 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x578>
    63ea:	70a5      	strb	r5, [r4, #2]
    63ec:	f7ff fafc 	bl	59e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    63f0:	b198      	cbz	r0, 641a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    63f2:	2100      	movs	r1, #0
    63f4:	2008      	movs	r0, #8
    63f6:	f7ff fd67 	bl	5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    63fa:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    63fe:	1c40      	adds	r0, r0, #1
    6400:	f141 0100 	adc.w	r1, r1, #0
    6404:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6408:	79e0      	ldrb	r0, [r4, #7]
    640a:	2801      	cmp	r0, #1
    640c:	d00a      	beq.n	6424 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    640e:	2001      	movs	r0, #1
    6410:	71e0      	strb	r0, [r4, #7]
    6412:	bd38      	pop	{r3, r4, r5, pc}
    6414:	f240 31af 	movw	r1, #943	; 0x3af
    6418:	e001      	b.n	641e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58e>
    641a:	f240 31c7 	movw	r1, #967	; 0x3c7
    641e:	2027      	movs	r0, #39	; 0x27
    6420:	f7fe fcb2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6424:	71e5      	strb	r5, [r4, #7]
    6426:	bd38      	pop	{r3, r4, r5, pc}
    6428:	200000c8 	.word	0x200000c8
    642c:	4803      	ldr	r0, [pc, #12]	; (643c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>)
    642e:	7800      	ldrb	r0, [r0, #0]
    6430:	2800      	cmp	r0, #0
    6432:	d001      	beq.n	6438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a8>
    6434:	f7ff bf24 	b.w	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6438:	4770      	bx	lr
    643a:	0000      	.short	0x0000
    643c:	200000c8 	.word	0x200000c8
    6440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6444:	4606      	mov	r6, r0
    6446:	f7ff fd47 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    644a:	4680      	mov	r8, r0
    644c:	f7ff fd4a 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6450:	4c16      	ldr	r4, [pc, #88]	; (64ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    6452:	4605      	mov	r5, r0
    6454:	4632      	mov	r2, r6
    6456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6458:	6260      	str	r0, [r4, #36]	; 0x24
    645a:	2101      	movs	r1, #1
    645c:	4640      	mov	r0, r8
    645e:	f7ff ff47 	bl	62f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6462:	7ce8      	ldrb	r0, [r5, #19]
    6464:	2700      	movs	r7, #0
    6466:	b170      	cbz	r0, 6486 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f6>
    6468:	4811      	ldr	r0, [pc, #68]	; (64b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    646a:	f005 fc7f 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    646e:	4811      	ldr	r0, [pc, #68]	; (64b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x624>)
    6470:	2101      	movs	r1, #1
    6472:	7601      	strb	r1, [r0, #24]
    6474:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    6478:	e9c0 1204 	strd	r1, r2, [r0, #16]
    647c:	490c      	ldr	r1, [pc, #48]	; (64b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    647e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6480:	f005 f8be 	bl	b600 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6484:	e004      	b.n	6490 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x600>
    6486:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6488:	f005 fc70 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    648c:	f005 f8fa 	bl	b684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6490:	b916      	cbnz	r6, 6498 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>
    6492:	4638      	mov	r0, r7
    6494:	f005 fb0e 	bl	bab4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6498:	2100      	movs	r1, #0
    649a:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    649e:	4608      	mov	r0, r1
    64a0:	f005 fcf0 	bl	be84 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64a4:	2002      	movs	r0, #2
    64a6:	7020      	strb	r0, [r4, #0]
    64a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64ac:	200000c8 	.word	0x200000c8
    64b0:	20000b90 	.word	0x20000b90
    64b4:	20000c98 	.word	0x20000c98
    64b8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    64bc:	4604      	mov	r4, r0
    64be:	f7ff fd11 	bl	5ee4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    64c2:	4605      	mov	r5, r0
    64c4:	f7ff fd08 	bl	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    64c8:	2700      	movs	r7, #0
    64ca:	4606      	mov	r6, r0
    64cc:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6634 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    64d0:	f88d 7000 	strb.w	r7, [sp]
    64d4:	4622      	mov	r2, r4
    64d6:	4639      	mov	r1, r7
    64d8:	f7ff ff0a 	bl	62f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    64dc:	79a8      	ldrb	r0, [r5, #6]
    64de:	f04f 0801 	mov.w	r8, #1
    64e2:	f1a9 0420 	sub.w	r4, r9, #32
    64e6:	b140      	cbz	r0, 64fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    64e8:	2801      	cmp	r0, #1
    64ea:	d020      	beq.n	652e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    64ec:	2802      	cmp	r0, #2
    64ee:	d02f      	beq.n	6550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    64f0:	2803      	cmp	r0, #3
    64f2:	d03b      	beq.n	656c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    64f4:	f240 21cb 	movw	r1, #715	; 0x2cb
    64f8:	e057      	b.n	65aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    64fa:	7a20      	ldrb	r0, [r4, #8]
    64fc:	2154      	movs	r1, #84	; 0x54
    64fe:	f8ad 0004 	strh.w	r0, [sp, #4]
    6502:	5388      	strh	r0, [r1, r6]
    6504:	4648      	mov	r0, r9
    6506:	f7ff fa99 	bl	5a3c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    650a:	b130      	cbz	r0, 651a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    650c:	2080      	movs	r0, #128	; 0x80
    650e:	6a21      	ldr	r1, [r4, #32]
    6510:	f7ff fcda 	bl	5ec8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6514:	f885 8002 	strb.w	r8, [r5, #2]
    6518:	e02c      	b.n	6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    651a:	466a      	mov	r2, sp
    651c:	a901      	add	r1, sp, #4
    651e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6520:	f007 fe55 	bl	e1ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6524:	6220      	str	r0, [r4, #32]
    6526:	b110      	cbz	r0, 652e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6528:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    652c:	b111      	cbz	r1, 6534 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    652e:	4842      	ldr	r0, [pc, #264]	; (6638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    6530:	6220      	str	r0, [r4, #32]
    6532:	e01f      	b.n	6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6534:	f89d 1000 	ldrb.w	r1, [sp]
    6538:	b921      	cbnz	r1, 6544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    653a:	8007      	strh	r7, [r0, #0]
    653c:	7087      	strb	r7, [r0, #2]
    653e:	2101      	movs	r1, #1
    6540:	f008 f994 	bl	e86c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6544:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6548:	6a20      	ldr	r0, [r4, #32]
    654a:	f008 f953 	bl	e7f4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    654e:	e011      	b.n	6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6550:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    6554:	f8ad 0004 	strh.w	r0, [sp, #4]
    6558:	466a      	mov	r2, sp
    655a:	a901      	add	r1, sp, #4
    655c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    655e:	f007 fe36 	bl	e1ce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6562:	6220      	str	r0, [r4, #32]
    6564:	b930      	cbnz	r0, 6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6566:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    656a:	e01e      	b.n	65aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    656c:	4648      	mov	r0, r9
    656e:	f7ff fa65 	bl	5a3c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6572:	b1c0      	cbz	r0, 65a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x716>
    6574:	6a20      	ldr	r0, [r4, #32]
    6576:	2308      	movs	r3, #8
    6578:	7801      	ldrb	r1, [r0, #0]
    657a:	f021 0108 	bic.w	r1, r1, #8
    657e:	7001      	strb	r1, [r0, #0]
    6580:	79ea      	ldrb	r2, [r5, #7]
    6582:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6586:	4311      	orrs	r1, r2
    6588:	f021 0104 	bic.w	r1, r1, #4
    658c:	7001      	strb	r1, [r0, #0]
    658e:	7a2a      	ldrb	r2, [r5, #8]
    6590:	2304      	movs	r3, #4
    6592:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6596:	4311      	orrs	r1, r2
    6598:	f021 0110 	bic.w	r1, r1, #16
    659c:	7001      	strb	r1, [r0, #0]
    659e:	43c9      	mvns	r1, r1
    65a0:	0789      	lsls	r1, r1, #30
    65a2:	d005      	beq.n	65b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    65a4:	e007      	b.n	65b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    65a6:	f240 21c5 	movw	r1, #709	; 0x2c5
    65aa:	2027      	movs	r0, #39	; 0x27
    65ac:	f7fe fbec 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65b0:	78c0      	ldrb	r0, [r0, #3]
    65b2:	2802      	cmp	r0, #2
    65b4:	d00f      	beq.n	65d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    65b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    65b8:	f007 fa58 	bl	da6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    65bc:	b108      	cbz	r0, 65c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    65be:	2101      	movs	r1, #1
    65c0:	e00a      	b.n	65d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    65c2:	6a20      	ldr	r0, [r4, #32]
    65c4:	7800      	ldrb	r0, [r0, #0]
    65c6:	43c0      	mvns	r0, r0
    65c8:	0780      	lsls	r0, r0, #30
    65ca:	d004      	beq.n	65d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    65cc:	f7ff f9f4 	bl	59b8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    65d0:	f080 0101 	eor.w	r1, r0, #1
    65d4:	e000      	b.n	65d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    65d6:	2100      	movs	r1, #0
    65d8:	6a20      	ldr	r0, [r4, #32]
    65da:	7802      	ldrb	r2, [r0, #0]
    65dc:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    65e0:	7001      	strb	r1, [r0, #0]
    65e2:	7ca9      	ldrb	r1, [r5, #18]
    65e4:	b181      	cbz	r1, 6608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    65e6:	7841      	ldrb	r1, [r0, #1]
    65e8:	b171      	cbz	r1, 6608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    65ea:	4814      	ldr	r0, [pc, #80]	; (663c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    65ec:	f005 fbbe 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65f0:	4811      	ldr	r0, [pc, #68]	; (6638 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    65f2:	3828      	subs	r0, #40	; 0x28
    65f4:	7607      	strb	r7, [r0, #24]
    65f6:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    65fa:	e9c0 1204 	strd	r1, r2, [r0, #16]
    65fe:	480f      	ldr	r0, [pc, #60]	; (663c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    6600:	6a21      	ldr	r1, [r4, #32]
    6602:	f004 fffd 	bl	b600 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6606:	e003      	b.n	6610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6608:	f005 fbb0 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    660c:	f005 f83a 	bl	b684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6610:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    6614:	2101      	movs	r1, #1
    6616:	2000      	movs	r0, #0
    6618:	f005 fc34 	bl	be84 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    661c:	f884 8004 	strb.w	r8, [r4, #4]
    6620:	6a21      	ldr	r1, [r4, #32]
    6622:	880a      	ldrh	r2, [r1, #0]
    6624:	8222      	strh	r2, [r4, #16]
    6626:	7889      	ldrb	r1, [r1, #2]
    6628:	74a1      	strb	r1, [r4, #18]
    662a:	f884 8000 	strb.w	r8, [r4]
    662e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6632:	0000      	.short	0x0000
    6634:	200000e8 	.word	0x200000e8
    6638:	20000cc0 	.word	0x20000cc0
    663c:	20000b90 	.word	0x20000b90
    6640:	000062c5 	.word	0x000062c5
    6644:	0000605d 	.word	0x0000605d
    6648:	000061c9 	.word	0x000061c9
    664c:	0000642d 	.word	0x0000642d

00006650 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6650:	4800      	ldr	r0, [pc, #0]	; (6654 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6652:	4770      	bx	lr
    6654:	2000158d 	.word	0x2000158d

00006658 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6658:	4904      	ldr	r1, [pc, #16]	; (666c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    665a:	788a      	ldrb	r2, [r1, #2]
    665c:	4282      	cmp	r2, r0
    665e:	d903      	bls.n	6668 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6660:	4408      	add	r0, r1
    6662:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6666:	4770      	bx	lr
    6668:	2000      	movs	r0, #0
    666a:	4770      	bx	lr
    666c:	200013ba 	.word	0x200013ba

00006670 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6670:	4904      	ldr	r1, [pc, #16]	; (6684 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6672:	788a      	ldrb	r2, [r1, #2]
    6674:	4282      	cmp	r2, r0
    6676:	d903      	bls.n	6680 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6678:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    667c:	3083      	adds	r0, #131	; 0x83
    667e:	4770      	bx	lr
    6680:	2000      	movs	r0, #0
    6682:	4770      	bx	lr
    6684:	200013ba 	.word	0x200013ba

00006688 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6688:	4a05      	ldr	r2, [pc, #20]	; (66a0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    668a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    668e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6692:	6802      	ldr	r2, [r0, #0]
    6694:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6698:	8880      	ldrh	r0, [r0, #4]
    669a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    669e:	4770      	bx	lr
    66a0:	200013ba 	.word	0x200013ba

000066a4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    66a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66a8:	460e      	mov	r6, r1
    66aa:	4607      	mov	r7, r0
    66ac:	4615      	mov	r5, r2
    66ae:	2106      	movs	r1, #6
    66b0:	4630      	mov	r0, r6
    66b2:	f007 ff7b 	bl	e5ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    66b6:	4c0d      	ldr	r4, [pc, #52]	; (66ec <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    66b8:	b160      	cbz	r0, 66d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    66ba:	2000      	movs	r0, #0
    66bc:	e004      	b.n	66c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    66be:	1821      	adds	r1, r4, r0
    66c0:	1c40      	adds	r0, r0, #1
    66c2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    66c6:	b2c0      	uxtb	r0, r0
    66c8:	78a1      	ldrb	r1, [r4, #2]
    66ca:	4281      	cmp	r1, r0
    66cc:	d8f7      	bhi.n	66be <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    66ce:	2001      	movs	r0, #1
    66d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66d4:	4631      	mov	r1, r6
    66d6:	4638      	mov	r0, r7
    66d8:	f007 fd88 	bl	e1ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    66dc:	2808      	cmp	r0, #8
    66de:	d003      	beq.n	66e8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    66e0:	4420      	add	r0, r4
    66e2:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    66e6:	e7f2      	b.n	66ce <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    66e8:	2000      	movs	r0, #0
    66ea:	e7f1      	b.n	66d0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    66ec:	200013ba 	.word	0x200013ba

000066f0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    66f0:	4904      	ldr	r1, [pc, #16]	; (6704 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    66f2:	788a      	ldrb	r2, [r1, #2]
    66f4:	4282      	cmp	r2, r0
    66f6:	d903      	bls.n	6700 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    66f8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    66fc:	1cc0      	adds	r0, r0, #3
    66fe:	4770      	bx	lr
    6700:	2000      	movs	r0, #0
    6702:	4770      	bx	lr
    6704:	200013ba 	.word	0x200013ba

00006708 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6708:	b510      	push	{r4, lr}
    670a:	f240 12d3 	movw	r2, #467	; 0x1d3
    670e:	2100      	movs	r1, #0
    6710:	4808      	ldr	r0, [pc, #32]	; (6734 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    6712:	f006 fb7a 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6716:	2208      	movs	r2, #8
    6718:	21ff      	movs	r1, #255	; 0xff
    671a:	4807      	ldr	r0, [pc, #28]	; (6738 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    671c:	f006 fb75 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6720:	4805      	ldr	r0, [pc, #20]	; (6738 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6722:	2100      	movs	r1, #0
    6724:	1f00      	subs	r0, r0, #4
    6726:	7001      	strb	r1, [r0, #0]
    6728:	7041      	strb	r1, [r0, #1]
    672a:	f44f 7161 	mov.w	r1, #900	; 0x384
    672e:	8041      	strh	r1, [r0, #2]
    6730:	bd10      	pop	{r4, pc}
    6732:	0000      	.short	0x0000
    6734:	200013ba 	.word	0x200013ba
    6738:	2000029c 	.word	0x2000029c

0000673c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    673c:	4901      	ldr	r1, [pc, #4]	; (6744 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    673e:	7008      	strb	r0, [r1, #0]
    6740:	4770      	bx	lr
    6742:	0000      	.short	0x0000
    6744:	20000298 	.word	0x20000298

00006748 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6748:	4801      	ldr	r0, [pc, #4]	; (6750 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    674a:	7800      	ldrb	r0, [r0, #0]
    674c:	4770      	bx	lr
    674e:	0000      	.short	0x0000
    6750:	20000298 	.word	0x20000298

00006754 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    6754:	4b0b      	ldr	r3, [pc, #44]	; (6784 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    6756:	b510      	push	{r4, lr}
    6758:	789c      	ldrb	r4, [r3, #2]
    675a:	4284      	cmp	r4, r0
    675c:	d90f      	bls.n	677e <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    675e:	4418      	add	r0, r3
    6760:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6764:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6768:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    676c:	700b      	strb	r3, [r1, #0]
    676e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6772:	6011      	str	r1, [r2, #0]
    6774:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6778:	8090      	strh	r0, [r2, #4]
    677a:	2001      	movs	r0, #1
    677c:	bd10      	pop	{r4, pc}
    677e:	2000      	movs	r0, #0
    6780:	bd10      	pop	{r4, pc}
    6782:	0000      	.short	0x0000
    6784:	200013ba 	.word	0x200013ba

00006788 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6788:	4907      	ldr	r1, [pc, #28]	; (67a8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    678a:	788a      	ldrb	r2, [r1, #2]
    678c:	4282      	cmp	r2, r0
    678e:	d909      	bls.n	67a4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6790:	4408      	add	r0, r1
    6792:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6796:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    679a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    679e:	f000 0001 	and.w	r0, r0, #1
    67a2:	4770      	bx	lr
    67a4:	2000      	movs	r0, #0
    67a6:	4770      	bx	lr
    67a8:	200013ba 	.word	0x200013ba

000067ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    67ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67b0:	4698      	mov	r8, r3
    67b2:	4691      	mov	r9, r2
    67b4:	460c      	mov	r4, r1
    67b6:	4605      	mov	r5, r0
    67b8:	f000 f936 	bl	6a28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    67bc:	4606      	mov	r6, r0
    67be:	2810      	cmp	r0, #16
    67c0:	d006      	beq.n	67d0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    67c2:	f000 f901 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    67c6:	2810      	cmp	r0, #16
    67c8:	d002      	beq.n	67d0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    67ca:	2012      	movs	r0, #18
    67cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67d0:	4f18      	ldr	r7, [pc, #96]	; (6834 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    67d2:	78b8      	ldrb	r0, [r7, #2]
    67d4:	2808      	cmp	r0, #8
    67d6:	d22a      	bcs.n	682e <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    67d8:	2e10      	cmp	r6, #16
    67da:	d105      	bne.n	67e8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    67dc:	2200      	movs	r2, #0
    67de:	4621      	mov	r1, r4
    67e0:	4628      	mov	r0, r5
    67e2:	f000 f905 	bl	69f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    67e6:	4606      	mov	r6, r0
    67e8:	78bc      	ldrb	r4, [r7, #2]
    67ea:	2210      	movs	r2, #16
    67ec:	1c60      	adds	r0, r4, #1
    67ee:	70b8      	strb	r0, [r7, #2]
    67f0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    67f4:	1ce8      	adds	r0, r5, #3
    67f6:	4649      	mov	r1, r9
    67f8:	f007 fe41 	bl	e47e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    67fc:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6800:	2210      	movs	r2, #16
    6802:	4641      	mov	r1, r8
    6804:	f007 fe3b 	bl	e47e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6808:	2110      	movs	r1, #16
    680a:	4640      	mov	r0, r8
    680c:	f007 fece 	bl	e5ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6810:	443c      	add	r4, r7
    6812:	2110      	movs	r1, #16
    6814:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6818:	4648      	mov	r0, r9
    681a:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    681e:	f007 fec5 	bl	e5ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6822:	77e0      	strb	r0, [r4, #31]
    6824:	f804 6c29 	strb.w	r6, [r4, #-41]
    6828:	2000      	movs	r0, #0
    682a:	73e0      	strb	r0, [r4, #15]
    682c:	e7ce      	b.n	67cc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    682e:	2007      	movs	r0, #7
    6830:	e7cc      	b.n	67cc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6832:	0000      	.short	0x0000
    6834:	200013ba 	.word	0x200013ba

00006838 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6838:	4806      	ldr	r0, [pc, #24]	; (6854 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    683a:	b510      	push	{r4, lr}
    683c:	7880      	ldrb	r0, [r0, #2]
    683e:	1e40      	subs	r0, r0, #1
    6840:	b244      	sxtb	r4, r0
    6842:	e004      	b.n	684e <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6844:	b2e0      	uxtb	r0, r4
    6846:	f000 f935 	bl	6ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    684a:	1e64      	subs	r4, r4, #1
    684c:	b264      	sxtb	r4, r4
    684e:	2c00      	cmp	r4, #0
    6850:	daf8      	bge.n	6844 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    6852:	bd10      	pop	{r4, pc}
    6854:	200013ba 	.word	0x200013ba

00006858 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6858:	4801      	ldr	r0, [pc, #4]	; (6860 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    685a:	8840      	ldrh	r0, [r0, #2]
    685c:	4770      	bx	lr
    685e:	0000      	.short	0x0000
    6860:	20000298 	.word	0x20000298

00006864 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6864:	b138      	cbz	r0, 6876 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6866:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    686a:	4288      	cmp	r0, r1
    686c:	d803      	bhi.n	6876 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    686e:	4903      	ldr	r1, [pc, #12]	; (687c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6870:	8048      	strh	r0, [r1, #2]
    6872:	2001      	movs	r0, #1
    6874:	4770      	bx	lr
    6876:	2000      	movs	r0, #0
    6878:	4770      	bx	lr
    687a:	0000      	.short	0x0000
    687c:	20000298 	.word	0x20000298

00006880 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6880:	4905      	ldr	r1, [pc, #20]	; (6898 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6882:	788a      	ldrb	r2, [r1, #2]
    6884:	4282      	cmp	r2, r0
    6886:	d903      	bls.n	6890 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6888:	4408      	add	r0, r1
    688a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    688e:	b108      	cbz	r0, 6894 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6890:	2000      	movs	r0, #0
    6892:	4770      	bx	lr
    6894:	2001      	movs	r0, #1
    6896:	4770      	bx	lr
    6898:	200013ba 	.word	0x200013ba

0000689c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    689c:	b570      	push	{r4, r5, r6, lr}
    689e:	460d      	mov	r5, r1
    68a0:	4606      	mov	r6, r0
    68a2:	f000 f8c1 	bl	6a28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    68a6:	4c10      	ldr	r4, [pc, #64]	; (68e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    68a8:	2810      	cmp	r0, #16
    68aa:	d007      	beq.n	68bc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    68ac:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    68b0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    68b4:	07c9      	lsls	r1, r1, #31
    68b6:	d001      	beq.n	68bc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    68b8:	2001      	movs	r0, #1
    68ba:	bd70      	pop	{r4, r5, r6, pc}
    68bc:	7861      	ldrb	r1, [r4, #1]
    68be:	2908      	cmp	r1, #8
    68c0:	d210      	bcs.n	68e4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    68c2:	2810      	cmp	r0, #16
    68c4:	d008      	beq.n	68d8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    68c6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    68ca:	2101      	movs	r1, #1
    68cc:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    68d0:	7860      	ldrb	r0, [r4, #1]
    68d2:	1c40      	adds	r0, r0, #1
    68d4:	7060      	strb	r0, [r4, #1]
    68d6:	e7ef      	b.n	68b8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    68d8:	2201      	movs	r2, #1
    68da:	4629      	mov	r1, r5
    68dc:	4630      	mov	r0, r6
    68de:	f000 f887 	bl	69f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    68e2:	e7f5      	b.n	68d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    68e4:	2000      	movs	r0, #0
    68e6:	bd70      	pop	{r4, r5, r6, pc}
    68e8:	200013ba 	.word	0x200013ba

000068ec <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    68ec:	b570      	push	{r4, r5, r6, lr}
    68ee:	4d0b      	ldr	r5, [pc, #44]	; (691c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    68f0:	7828      	ldrb	r0, [r5, #0]
    68f2:	1e40      	subs	r0, r0, #1
    68f4:	b244      	sxtb	r4, r0
    68f6:	e00a      	b.n	690e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    68f8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    68fc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6900:	07c0      	lsls	r0, r0, #31
    6902:	d002      	beq.n	690a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6904:	b2e0      	uxtb	r0, r4
    6906:	f000 f91d 	bl	6b44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    690a:	1e64      	subs	r4, r4, #1
    690c:	b264      	sxtb	r4, r4
    690e:	2c00      	cmp	r4, #0
    6910:	daf2      	bge.n	68f8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6912:	4903      	ldr	r1, [pc, #12]	; (6920 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6914:	2000      	movs	r0, #0
    6916:	7048      	strb	r0, [r1, #1]
    6918:	bd70      	pop	{r4, r5, r6, pc}
    691a:	0000      	.short	0x0000
    691c:	200013ba 	.word	0x200013ba
    6920:	20000298 	.word	0x20000298

00006924 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6928:	2400      	movs	r4, #0
    692a:	4625      	mov	r5, r4
    692c:	4e18      	ldr	r6, [pc, #96]	; (6990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    692e:	e029      	b.n	6984 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6930:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6934:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6938:	07c0      	lsls	r0, r0, #31
    693a:	d021      	beq.n	6980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    693c:	4628      	mov	r0, r5
    693e:	f000 f843 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6942:	4603      	mov	r3, r0
    6944:	f7ff fed4 	bl	66f0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6948:	4601      	mov	r1, r0
    694a:	2000      	movs	r0, #0
    694c:	2b10      	cmp	r3, #16
    694e:	d009      	beq.n	6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6950:	18f2      	adds	r2, r6, r3
    6952:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6956:	f1bc 0f01 	cmp.w	ip, #1
    695a:	d002      	beq.n	6962 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    695c:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6960:	b102      	cbz	r2, 6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6962:	2001      	movs	r0, #1
    6964:	1e40      	subs	r0, r0, #1
    6966:	4201      	tst	r1, r0
    6968:	d10a      	bne.n	6980 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    696a:	480a      	ldr	r0, [pc, #40]	; (6994 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    696c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6970:	5503      	strb	r3, [r0, r4]
    6972:	4620      	mov	r0, r4
    6974:	1c64      	adds	r4, r4, #1
    6976:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    697a:	b2e4      	uxtb	r4, r4
    697c:	f005 fbae 	bl	c0dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6980:	1c6d      	adds	r5, r5, #1
    6982:	b2ed      	uxtb	r5, r5
    6984:	7830      	ldrb	r0, [r6, #0]
    6986:	42a8      	cmp	r0, r5
    6988:	d8d2      	bhi.n	6930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    698a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    698e:	0000      	.short	0x0000
    6990:	200013ba 	.word	0x200013ba
    6994:	2000029c 	.word	0x2000029c
    6998:	4602      	mov	r2, r0
    699a:	4809      	ldr	r0, [pc, #36]	; (69c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    699c:	b510      	push	{r4, lr}
    699e:	7800      	ldrb	r0, [r0, #0]
    69a0:	460b      	mov	r3, r1
    69a2:	b158      	cbz	r0, 69bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    69a4:	4807      	ldr	r0, [pc, #28]	; (69c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    69a6:	7881      	ldrb	r1, [r0, #2]
    69a8:	b141      	cbz	r1, 69bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    69aa:	b10b      	cbz	r3, 69b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    69ac:	1cc0      	adds	r0, r0, #3
    69ae:	e001      	b.n	69b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    69b0:	4804      	ldr	r0, [pc, #16]	; (69c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    69b2:	3083      	adds	r0, #131	; 0x83
    69b4:	f004 fd2c 	bl	b410 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    69b8:	2001      	movs	r0, #1
    69ba:	bd10      	pop	{r4, pc}
    69bc:	2000      	movs	r0, #0
    69be:	bd10      	pop	{r4, pc}
    69c0:	20000298 	.word	0x20000298
    69c4:	200013ba 	.word	0x200013ba
    69c8:	4908      	ldr	r1, [pc, #32]	; (69ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    69ca:	b510      	push	{r4, lr}
    69cc:	4603      	mov	r3, r0
    69ce:	2000      	movs	r0, #0
    69d0:	788a      	ldrb	r2, [r1, #2]
    69d2:	e006      	b.n	69e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    69d4:	180c      	adds	r4, r1, r0
    69d6:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    69da:	429c      	cmp	r4, r3
    69dc:	d004      	beq.n	69e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    69de:	1c40      	adds	r0, r0, #1
    69e0:	b2c0      	uxtb	r0, r0
    69e2:	4282      	cmp	r2, r0
    69e4:	d8f6      	bhi.n	69d4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    69e6:	2010      	movs	r0, #16
    69e8:	bd10      	pop	{r4, pc}
    69ea:	0000      	.short	0x0000
    69ec:	200013ba 	.word	0x200013ba
    69f0:	b570      	push	{r4, r5, r6, lr}
    69f2:	4b0c      	ldr	r3, [pc, #48]	; (6a24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    69f4:	4604      	mov	r4, r0
    69f6:	7818      	ldrb	r0, [r3, #0]
    69f8:	1c45      	adds	r5, r0, #1
    69fa:	701d      	strb	r5, [r3, #0]
    69fc:	2810      	cmp	r0, #16
    69fe:	d303      	bcc.n	6a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6a00:	2146      	movs	r1, #70	; 0x46
    6a02:	2028      	movs	r0, #40	; 0x28
    6a04:	f7fe f9c0 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a08:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6a0c:	680d      	ldr	r5, [r1, #0]
    6a0e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6a12:	8889      	ldrh	r1, [r1, #4]
    6a14:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6a18:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6a1c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6a20:	bd70      	pop	{r4, r5, r6, pc}
    6a22:	0000      	.short	0x0000
    6a24:	200013ba 	.word	0x200013ba
    6a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a2c:	460e      	mov	r6, r1
    6a2e:	4607      	mov	r7, r0
    6a30:	2400      	movs	r4, #0
    6a32:	4d0c      	ldr	r5, [pc, #48]	; (6a64 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x140>)
    6a34:	e00e      	b.n	6a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    6a36:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
    6a3a:	4630      	mov	r0, r6
    6a3c:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    6a40:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6a44:	4297      	cmp	r7, r2
    6a46:	d103      	bne.n	6a50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>
    6a48:	2206      	movs	r2, #6
    6a4a:	f006 f952 	bl	ccf2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6a4e:	b138      	cbz	r0, 6a60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13c>
    6a50:	1c64      	adds	r4, r4, #1
    6a52:	b2e4      	uxtb	r4, r4
    6a54:	7828      	ldrb	r0, [r5, #0]
    6a56:	42a0      	cmp	r0, r4
    6a58:	d8ed      	bhi.n	6a36 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x112>
    6a5a:	2010      	movs	r0, #16
    6a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a60:	4620      	mov	r0, r4
    6a62:	e7fb      	b.n	6a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x138>
    6a64:	200013ba 	.word	0x200013ba
    6a68:	b570      	push	{r4, r5, r6, lr}
    6a6a:	4605      	mov	r5, r0
    6a6c:	f7ff ffac 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a70:	2810      	cmp	r0, #16
    6a72:	d11c      	bne.n	6aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6a74:	4c0e      	ldr	r4, [pc, #56]	; (6ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18c>)
    6a76:	7820      	ldrb	r0, [r4, #0]
    6a78:	1e40      	subs	r0, r0, #1
    6a7a:	b2c0      	uxtb	r0, r0
    6a7c:	7020      	strb	r0, [r4, #0]
    6a7e:	42a8      	cmp	r0, r5
    6a80:	d015      	beq.n	6aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6a82:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6a86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6a8a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6a8e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6a92:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6a96:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6a9a:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6a9e:	7820      	ldrb	r0, [r4, #0]
    6aa0:	f7ff ff92 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6aa4:	2810      	cmp	r0, #16
    6aa6:	d002      	beq.n	6aae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6aa8:	4420      	add	r0, r4
    6aaa:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6aae:	bd70      	pop	{r4, r5, r6, pc}
    6ab0:	200013ba 	.word	0x200013ba
    6ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ab8:	4c21      	ldr	r4, [pc, #132]	; (6b40 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21c>)
    6aba:	4606      	mov	r6, r0
    6abc:	19a7      	adds	r7, r4, r6
    6abe:	78a0      	ldrb	r0, [r4, #2]
    6ac0:	1e40      	subs	r0, r0, #1
    6ac2:	b2c5      	uxtb	r5, r0
    6ac4:	70a5      	strb	r5, [r4, #2]
    6ac6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6aca:	42ae      	cmp	r6, r5
    6acc:	d02a      	beq.n	6b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x200>
    6ace:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6ad2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6ad6:	f10a 0103 	add.w	r1, sl, #3
    6ada:	f109 0003 	add.w	r0, r9, #3
    6ade:	2210      	movs	r2, #16
    6ae0:	f006 f919 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6ae4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6ae8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6aec:	2210      	movs	r2, #16
    6aee:	f006 f912 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6af2:	1960      	adds	r0, r4, r5
    6af4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6af8:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6afc:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6b00:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6b04:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6b08:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6b0c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6b10:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6b14:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6b18:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6b1c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6b20:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6b24:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6b28:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6b2c:	07c0      	lsls	r0, r0, #31
    6b2e:	d104      	bne.n	6b3a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x216>
    6b30:	4640      	mov	r0, r8
    6b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b36:	f7ff bf97 	b.w	6a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b3e:	0000      	.short	0x0000
    6b40:	200013ba 	.word	0x200013ba
    6b44:	4905      	ldr	r1, [pc, #20]	; (6b5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x238>)
    6b46:	784a      	ldrb	r2, [r1, #1]
    6b48:	1e52      	subs	r2, r2, #1
    6b4a:	704a      	strb	r2, [r1, #1]
    6b4c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6b50:	2200      	movs	r2, #0
    6b52:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6b56:	f7ff bf87 	b.w	6a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6b5a:	0000      	.short	0x0000
    6b5c:	200013ba 	.word	0x200013ba

00006b60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b64:	4604      	mov	r4, r0
    6b66:	f04f 0801 	mov.w	r8, #1
    6b6a:	2500      	movs	r5, #0
    6b6c:	b181      	cbz	r1, 6b90 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x30>
    6b6e:	f104 078e 	add.w	r7, r4, #142	; 0x8e
    6b72:	1e7e      	subs	r6, r7, #1
    6b74:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6b78:	2901      	cmp	r1, #1
    6b7a:	d020      	beq.n	6bbe <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    6b7c:	2902      	cmp	r1, #2
    6b7e:	d042      	beq.n	6c06 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6b80:	2903      	cmp	r1, #3
    6b82:	d11a      	bne.n	6bba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6b84:	4639      	mov	r1, r7
    6b86:	4630      	mov	r0, r6
    6b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b8c:	f007 bd3e 	b.w	e60c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b90:	f44f 720a 	mov.w	r2, #552	; 0x228
    6b94:	2100      	movs	r1, #0
    6b96:	f006 f938 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b9a:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
    6b9e:	3484      	adds	r4, #132	; 0x84
    6ba0:	f004 fc06 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6ba4:	f644 112b 	movw	r1, #18731	; 0x492b
    6ba8:	4008      	ands	r0, r1
    6baa:	6420      	str	r0, [r4, #64]	; 0x40
    6bac:	6465      	str	r5, [r4, #68]	; 0x44
    6bae:	20fe      	movs	r0, #254	; 0xfe
    6bb0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6bb4:	207f      	movs	r0, #127	; 0x7f
    6bb6:	f804 0c03 	strb.w	r0, [r4, #-3]
    6bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bbe:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
    6bc2:	f884 5113 	strb.w	r5, [r4, #275]	; 0x113
    6bc6:	4a14      	ldr	r2, [pc, #80]	; (6c18 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    6bc8:	6921      	ldr	r1, [r4, #16]
    6bca:	440a      	add	r2, r1
    6bcc:	fbb2 f2f1 	udiv	r2, r2, r1
    6bd0:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    6bd4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6bd8:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
    6bdc:	8b63      	ldrh	r3, [r4, #26]
    6bde:	460a      	mov	r2, r1
    6be0:	f000 f81c 	bl	6c1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    6be4:	4639      	mov	r1, r7
    6be6:	4630      	mov	r0, r6
    6be8:	f007 fd10 	bl	e60c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6bec:	f006 f85d 	bl	ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6bf0:	b118      	cbz	r0, 6bfa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9a>
    6bf2:	6960      	ldr	r0, [r4, #20]
    6bf4:	f000 fb5e 	bl	72b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6bf8:	b110      	cbz	r0, 6c00 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6bfa:	f884 5184 	strb.w	r5, [r4, #388]	; 0x184
    6bfe:	e7dc      	b.n	6bba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6c00:	f884 8184 	strb.w	r8, [r4, #388]	; 0x184
    6c04:	e7d9      	b.n	6bba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6c06:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6c0a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6c0e:	6921      	ldr	r1, [r4, #16]
    6c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c14:	f000 b802 	b.w	6c1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    6c18:	01c9c37f 	.word	0x01c9c37f
    6c1c:	b530      	push	{r4, r5, lr}
    6c1e:	2400      	movs	r4, #0
    6c20:	8684      	strh	r4, [r0, #52]	; 0x34
    6c22:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6c24:	4d13      	ldr	r5, [pc, #76]	; (6c74 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x114>)
    6c26:	434c      	muls	r4, r1
    6c28:	fbb4 f4f2 	udiv	r4, r4, r2
    6c2c:	8704      	strh	r4, [r0, #56]	; 0x38
    6c2e:	f242 7410 	movw	r4, #10000	; 0x2710
    6c32:	4363      	muls	r3, r4
    6c34:	fbb3 f3f2 	udiv	r3, r3, r2
    6c38:	1c5b      	adds	r3, r3, #1
    6c3a:	b29b      	uxth	r3, r3
    6c3c:	fb03 f402 	mul.w	r4, r3, r2
    6c40:	86c3      	strh	r3, [r0, #54]	; 0x36
    6c42:	42ac      	cmp	r4, r5
    6c44:	d901      	bls.n	6c4a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xea>
    6c46:	1e5b      	subs	r3, r3, #1
    6c48:	86c3      	strh	r3, [r0, #54]	; 0x36
    6c4a:	4b0b      	ldr	r3, [pc, #44]	; (6c78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    6c4c:	f240 2471 	movw	r4, #625	; 0x271
    6c50:	fbb3 f3f2 	udiv	r3, r3, r2
    6c54:	1c5b      	adds	r3, r3, #1
    6c56:	8783      	strh	r3, [r0, #60]	; 0x3c
    6c58:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6c5a:	4363      	muls	r3, r4
    6c5c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6c60:	1e5b      	subs	r3, r3, #1
    6c62:	fbb3 f3f2 	udiv	r3, r3, r2
    6c66:	62c3      	str	r3, [r0, #44]	; 0x2c
    6c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6c6a:	434b      	muls	r3, r1
    6c6c:	fbb3 f1f2 	udiv	r1, r3, r2
    6c70:	6281      	str	r1, [r0, #40]	; 0x28
    6c72:	bd30      	pop	{r4, r5, pc}
    6c74:	01e84800 	.word	0x01e84800
    6c78:	02625a00 	.word	0x02625a00

00006c7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6c7c:	b570      	push	{r4, r5, r6, lr}
    6c7e:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6c82:	b28b      	uxth	r3, r1
    6c84:	7ac5      	ldrb	r5, [r0, #11]
    6c86:	ea83 0102 	eor.w	r1, r3, r2
    6c8a:	2200      	movs	r2, #0
    6c8c:	b2cc      	uxtb	r4, r1
    6c8e:	0a09      	lsrs	r1, r1, #8
    6c90:	fa94 f4a4 	rbit	r4, r4
    6c94:	fa91 f1a1 	rbit	r1, r1
    6c98:	0e24      	lsrs	r4, r4, #24
    6c9a:	0e09      	lsrs	r1, r1, #24
    6c9c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6ca0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6ca4:	1c52      	adds	r2, r2, #1
    6ca6:	4419      	add	r1, r3
    6ca8:	b2d2      	uxtb	r2, r2
    6caa:	b289      	uxth	r1, r1
    6cac:	2a03      	cmp	r2, #3
    6cae:	d3ed      	bcc.n	6c8c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6cb0:	4059      	eors	r1, r3
    6cb2:	2225      	movs	r2, #37	; 0x25
    6cb4:	fbb1 f3f2 	udiv	r3, r1, r2
    6cb8:	fb02 1213 	mls	r2, r2, r3, r1
    6cbc:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6cc0:	f002 0607 	and.w	r6, r2, #7
    6cc4:	785b      	ldrb	r3, [r3, #1]
    6cc6:	2401      	movs	r4, #1
    6cc8:	fa04 f606 	lsl.w	r6, r4, r6
    6ccc:	4233      	tst	r3, r6
    6cce:	d001      	beq.n	6cd4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6cd0:	4610      	mov	r0, r2
    6cd2:	bd70      	pop	{r4, r5, r6, pc}
    6cd4:	434d      	muls	r5, r1
    6cd6:	0c29      	lsrs	r1, r5, #16
    6cd8:	1c49      	adds	r1, r1, #1
    6cda:	b2c9      	uxtb	r1, r1
    6cdc:	2200      	movs	r2, #0
    6cde:	1885      	adds	r5, r0, r2
    6ce0:	79ab      	ldrb	r3, [r5, #6]
    6ce2:	428b      	cmp	r3, r1
    6ce4:	d312      	bcc.n	6d0c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6ce6:	f895 5001 	ldrb.w	r5, [r5, #1]
    6cea:	2300      	movs	r3, #0
    6cec:	fa04 f603 	lsl.w	r6, r4, r3
    6cf0:	4235      	tst	r5, r6
    6cf2:	d001      	beq.n	6cf8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6cf4:	1e49      	subs	r1, r1, #1
    6cf6:	b2c9      	uxtb	r1, r1
    6cf8:	b121      	cbz	r1, 6d04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6cfa:	1c5b      	adds	r3, r3, #1
    6cfc:	b2db      	uxtb	r3, r3
    6cfe:	2b08      	cmp	r3, #8
    6d00:	d3f4      	bcc.n	6cec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6d02:	e005      	b.n	6d10 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6d04:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6d08:	b2c0      	uxtb	r0, r0
    6d0a:	bd70      	pop	{r4, r5, r6, pc}
    6d0c:	1ac9      	subs	r1, r1, r3
    6d0e:	b2c9      	uxtb	r1, r1
    6d10:	1c52      	adds	r2, r2, #1
    6d12:	b2d2      	uxtb	r2, r2
    6d14:	2a05      	cmp	r2, #5
    6d16:	d3e2      	bcc.n	6cde <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6d18:	f240 110d 	movw	r1, #269	; 0x10d
    6d1c:	2046      	movs	r0, #70	; 0x46
    6d1e:	f7fe f833 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d22:	0000      	movs	r0, r0
    6d24:	b570      	push	{r4, r5, r6, lr}
    6d26:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6d2a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6d2e:	2401      	movs	r4, #1
    6d30:	fb03 2101 	mla	r1, r3, r1, r2
    6d34:	2225      	movs	r2, #37	; 0x25
    6d36:	fbb1 f3f2 	udiv	r3, r1, r2
    6d3a:	fb02 1113 	mls	r1, r2, r3, r1
    6d3e:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6d42:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6d46:	f001 0307 	and.w	r3, r1, #7
    6d4a:	7d92      	ldrb	r2, [r2, #22]
    6d4c:	fa04 f303 	lsl.w	r3, r4, r3
    6d50:	421a      	tst	r2, r3
    6d52:	d003      	beq.n	6d5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6d54:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6d58:	2000      	movs	r0, #0
    6d5a:	bd70      	pop	{r4, r5, r6, pc}
    6d5c:	f890 2020 	ldrb.w	r2, [r0, #32]
    6d60:	fbb1 f3f2 	udiv	r3, r1, r2
    6d64:	fb02 1113 	mls	r1, r2, r3, r1
    6d68:	1c49      	adds	r1, r1, #1
    6d6a:	b2c9      	uxtb	r1, r1
    6d6c:	2300      	movs	r3, #0
    6d6e:	18c5      	adds	r5, r0, r3
    6d70:	7eea      	ldrb	r2, [r5, #27]
    6d72:	428a      	cmp	r2, r1
    6d74:	d311      	bcc.n	6d9a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6d76:	f895 5016 	ldrb.w	r5, [r5, #22]
    6d7a:	2200      	movs	r2, #0
    6d7c:	fa04 f602 	lsl.w	r6, r4, r2
    6d80:	4235      	tst	r5, r6
    6d82:	d001      	beq.n	6d88 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6d84:	1e49      	subs	r1, r1, #1
    6d86:	b2c9      	uxtb	r1, r1
    6d88:	b121      	cbz	r1, 6d94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6d8a:	1c52      	adds	r2, r2, #1
    6d8c:	b2d2      	uxtb	r2, r2
    6d8e:	2a08      	cmp	r2, #8
    6d90:	d3f4      	bcc.n	6d7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6d92:	e004      	b.n	6d9e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6d94:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d98:	e7dc      	b.n	6d54 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6d9a:	1a89      	subs	r1, r1, r2
    6d9c:	b2c9      	uxtb	r1, r1
    6d9e:	1c5b      	adds	r3, r3, #1
    6da0:	b2db      	uxtb	r3, r3
    6da2:	2b05      	cmp	r3, #5
    6da4:	d3e3      	bcc.n	6d6e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6da6:	201f      	movs	r0, #31
    6da8:	bd70      	pop	{r4, r5, r6, pc}
	...

00006dac <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6dac:	7841      	ldrb	r1, [r0, #1]
    6dae:	b141      	cbz	r1, 6dc2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6db0:	78c0      	ldrb	r0, [r0, #3]
    6db2:	281a      	cmp	r0, #26
    6db4:	d203      	bcs.n	6dbe <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6db6:	4a04      	ldr	r2, [pc, #16]	; (6dc8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6db8:	5c10      	ldrb	r0, [r2, r0]
    6dba:	4288      	cmp	r0, r1
    6dbc:	d101      	bne.n	6dc2 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6dbe:	2001      	movs	r0, #1
    6dc0:	4770      	bx	lr
    6dc2:	2000      	movs	r0, #0
    6dc4:	4770      	bx	lr
    6dc6:	0000      	.short	0x0000
    6dc8:	00010bbe 	.word	0x00010bbe

00006dcc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6dcc:	b50c      	push	{r2, r3, lr}
    6dce:	a20b      	add	r2, pc, #44	; (adr r2, 6dfc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    6dd0:	e9d2 1200 	ldrd	r1, r2, [r2]
    6dd4:	e9cd 1200 	strd	r1, r2, [sp]
    6dd8:	7901      	ldrb	r1, [r0, #4]
    6dda:	7940      	ldrb	r0, [r0, #5]
    6ddc:	f001 0207 	and.w	r2, r1, #7
    6de0:	4669      	mov	r1, sp
    6de2:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6de6:	2a01      	cmp	r2, #1
    6de8:	d804      	bhi.n	6df4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    6dea:	f000 0007 	and.w	r0, r0, #7
    6dee:	5c08      	ldrb	r0, [r1, r0]
    6df0:	2801      	cmp	r0, #1
    6df2:	d901      	bls.n	6df8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6df4:	2000      	movs	r0, #0
    6df6:	bd0c      	pop	{r2, r3, pc}
    6df8:	2001      	movs	r0, #1
    6dfa:	bd0c      	pop	{r2, r3, pc}
    6dfc:	02010100 	.word	0x02010100
    6e00:	03020201 	.word	0x03020201

00006e04 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6e04:	b510      	push	{r4, lr}
    6e06:	2201      	movs	r2, #1
    6e08:	70c1      	strb	r1, [r0, #3]
    6e0a:	291a      	cmp	r1, #26
    6e0c:	d202      	bcs.n	6e14 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6e0e:	4a06      	ldr	r2, [pc, #24]	; (6e28 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6e10:	5c52      	ldrb	r2, [r2, r1]
    6e12:	e006      	b.n	6e22 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6e14:	29ff      	cmp	r1, #255	; 0xff
    6e16:	d004      	beq.n	6e22 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6e18:	f240 31e2 	movw	r1, #994	; 0x3e2
    6e1c:	202a      	movs	r0, #42	; 0x2a
    6e1e:	f7fd ffb3 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e22:	7042      	strb	r2, [r0, #1]
    6e24:	bd10      	pop	{r4, pc}
    6e26:	0000      	.short	0x0000
    6e28:	00010bbe 	.word	0x00010bbe

00006e2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e30:	4c12      	ldr	r4, [pc, #72]	; (6e7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6e32:	4607      	mov	r7, r0
    6e34:	460e      	mov	r6, r1
    6e36:	7da0      	ldrb	r0, [r4, #22]
    6e38:	b110      	cbz	r0, 6e40 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6e3a:	8b20      	ldrh	r0, [r4, #24]
    6e3c:	2800      	cmp	r0, #0
    6e3e:	d012      	beq.n	6e66 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6e40:	480e      	ldr	r0, [pc, #56]	; (6e7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6e42:	3014      	adds	r0, #20
    6e44:	4680      	mov	r8, r0
    6e46:	f007 fd90 	bl	e96a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6e4a:	b9a8      	cbnz	r0, 6e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6e4c:	8aa5      	ldrh	r5, [r4, #20]
    6e4e:	8aa0      	ldrh	r0, [r4, #20]
    6e50:	4632      	mov	r2, r6
    6e52:	4639      	mov	r1, r7
    6e54:	f007 fdcd 	bl	e9f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6e58:	b138      	cbz	r0, 6e6a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6e5a:	7da0      	ldrb	r0, [r4, #22]
    6e5c:	b110      	cbz	r0, 6e64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6e5e:	8b20      	ldrh	r0, [r4, #24]
    6e60:	1e40      	subs	r0, r0, #1
    6e62:	8320      	strh	r0, [r4, #24]
    6e64:	2001      	movs	r0, #1
    6e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e6a:	4640      	mov	r0, r8
    6e6c:	f007 fd7d 	bl	e96a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6e70:	b910      	cbnz	r0, 6e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6e72:	8aa0      	ldrh	r0, [r4, #20]
    6e74:	42a8      	cmp	r0, r5
    6e76:	d1ea      	bne.n	6e4e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6e78:	2000      	movs	r0, #0
    6e7a:	e7f4      	b.n	6e66 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6e7c:	20001114 	.word	0x20001114
    6e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6e84:	468a      	mov	sl, r1
    6e86:	4699      	mov	r9, r3
    6e88:	4615      	mov	r5, r2
    6e8a:	4604      	mov	r4, r0
    6e8c:	a901      	add	r1, sp, #4
    6e8e:	f007 f9f0 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e92:	bbe0      	cbnz	r0, 6f0e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6e94:	9f02      	ldr	r7, [sp, #8]
    6e96:	f04f 0800 	mov.w	r8, #0
    6e9a:	3778      	adds	r7, #120	; 0x78
    6e9c:	b18d      	cbz	r5, 6ec2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6e9e:	4620      	mov	r0, r4
    6ea0:	f7fe fba2 	bl	55e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6ea4:	0004      	movs	r4, r0
    6ea6:	d00f      	beq.n	6ec8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6ea8:	4629      	mov	r1, r5
    6eaa:	f006 fdb1 	bl	da10 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6eae:	0006      	movs	r6, r0
    6eb0:	d003      	beq.n	6eba <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6eb2:	481d      	ldr	r0, [pc, #116]	; (6f28 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6eb4:	8840      	ldrh	r0, [r0, #2]
    6eb6:	42a8      	cmp	r0, r5
    6eb8:	d208      	bcs.n	6ecc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6eba:	2000      	movs	r0, #0
    6ebc:	b004      	add	sp, #16
    6ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ec2:	2001      	movs	r0, #1
    6ec4:	7538      	strb	r0, [r7, #20]
    6ec6:	e029      	b.n	6f1c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6ec8:	216e      	movs	r1, #110	; 0x6e
    6eca:	e02a      	b.n	6f22 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6ecc:	4620      	mov	r0, r4
    6ece:	4631      	mov	r1, r6
    6ed0:	aa03      	add	r2, sp, #12
    6ed2:	f006 fd96 	bl	da02 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6ed6:	9803      	ldr	r0, [sp, #12]
    6ed8:	f8a0 8000 	strh.w	r8, [r0]
    6edc:	f880 8002 	strb.w	r8, [r0, #2]
    6ee0:	7d39      	ldrb	r1, [r7, #20]
    6ee2:	b109      	cbz	r1, 6ee8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6ee4:	f04f 0a02 	mov.w	sl, #2
    6ee8:	4651      	mov	r1, sl
    6eea:	f007 fcbf 	bl	e86c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6eee:	4631      	mov	r1, r6
    6ef0:	2603      	movs	r6, #3
    6ef2:	4620      	mov	r0, r4
    6ef4:	464a      	mov	r2, r9
    6ef6:	462b      	mov	r3, r5
    6ef8:	9600      	str	r6, [sp, #0]
    6efa:	f006 fc64 	bl	d7c6 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6efe:	4620      	mov	r0, r4
    6f00:	4629      	mov	r1, r5
    6f02:	f006 fd22 	bl	d94a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6f06:	b158      	cbz	r0, 6f20 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6f08:	4644      	mov	r4, r8
    6f0a:	a801      	add	r0, sp, #4
    6f0c:	e000      	b.n	6f10 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6f0e:	e005      	b.n	6f1c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6f10:	f007 fd4c 	bl	e9ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6f14:	9802      	ldr	r0, [sp, #8]
    6f16:	f8a0 410a 	strh.w	r4, [r0, #266]	; 0x10a
    6f1a:	753c      	strb	r4, [r7, #20]
    6f1c:	2001      	movs	r0, #1
    6f1e:	e7cd      	b.n	6ebc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6f20:	2184      	movs	r1, #132	; 0x84
    6f22:	202b      	movs	r0, #43	; 0x2b
    6f24:	f7fd ff30 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f28:	20001114 	.word	0x20001114

00006f2c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6f2c:	4901      	ldr	r1, [pc, #4]	; (6f34 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6f2e:	2001      	movs	r0, #1
    6f30:	7008      	strb	r0, [r1, #0]
    6f32:	4770      	bx	lr
    6f34:	200002a5 	.word	0x200002a5

00006f38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f3c:	0006      	movs	r6, r0
    6f3e:	d00a      	beq.n	6f56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6f40:	4825      	ldr	r0, [pc, #148]	; (6fd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6f42:	7801      	ldrb	r1, [r0, #0]
    6f44:	b151      	cbz	r1, 6f5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6f46:	2100      	movs	r1, #0
    6f48:	7071      	strb	r1, [r6, #1]
    6f4a:	2203      	movs	r2, #3
    6f4c:	7032      	strb	r2, [r6, #0]
    6f4e:	2201      	movs	r2, #1
    6f50:	7132      	strb	r2, [r6, #4]
    6f52:	7001      	strb	r1, [r0, #0]
    6f54:	e03a      	b.n	6fcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6f56:	f240 21c7 	movw	r1, #711	; 0x2c7
    6f5a:	e009      	b.n	6f70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6f5c:	4c1e      	ldr	r4, [pc, #120]	; (6fd8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6f5e:	1ce4      	adds	r4, r4, #3
    6f60:	7820      	ldrb	r0, [r4, #0]
    6f62:	b940      	cbnz	r0, 6f76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6f64:	1ca0      	adds	r0, r4, #2
    6f66:	f007 fd8d 	bl	ea84 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6f6a:	b120      	cbz	r0, 6f76 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6f6c:	f240 21d6 	movw	r1, #726	; 0x2d6
    6f70:	2010      	movs	r0, #16
    6f72:	f7fd ff09 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f76:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6f7a:	2000      	movs	r0, #0
    6f7c:	f7fe f8ee 	bl	515c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6f80:	4f16      	ldr	r7, [pc, #88]	; (6fdc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6f82:	4605      	mov	r5, r0
    6f84:	6838      	ldr	r0, [r7, #0]
    6f86:	b160      	cbz	r0, 6fa2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6f88:	8860      	ldrh	r0, [r4, #2]
    6f8a:	42a8      	cmp	r0, r5
    6f8c:	d309      	bcc.n	6fa2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6f8e:	1b40      	subs	r0, r0, r5
    6f90:	b2c0      	uxtb	r0, r0
    6f92:	2101      	movs	r1, #1
    6f94:	f006 fee4 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6f98:	b158      	cbz	r0, 6fb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6f9a:	4631      	mov	r1, r6
    6f9c:	f000 f84e 	bl	703c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6fa0:	e006      	b.n	6fb0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    6fa2:	480f      	ldr	r0, [pc, #60]	; (6fe0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6fa4:	6800      	ldr	r0, [r0, #0]
    6fa6:	b120      	cbz	r0, 6fb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6fa8:	8860      	ldrh	r0, [r4, #2]
    6faa:	4631      	mov	r1, r6
    6fac:	f000 f8de 	bl	716c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6fb0:	b960      	cbnz	r0, 6fcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6fb2:	1ca0      	adds	r0, r4, #2
    6fb4:	f007 fd66 	bl	ea84 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6fb8:	b910      	cbnz	r0, 6fc0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    6fba:	8861      	ldrh	r1, [r4, #2]
    6fbc:	4541      	cmp	r1, r8
    6fbe:	d1e1      	bne.n	6f84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    6fc0:	4808      	ldr	r0, [pc, #32]	; (6fe4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    6fc2:	6801      	ldr	r1, [r0, #0]
    6fc4:	b129      	cbz	r1, 6fd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6fc6:	4630      	mov	r0, r6
    6fc8:	4788      	blx	r1
    6fca:	b110      	cbz	r0, 6fd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6fcc:	2001      	movs	r0, #1
    6fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fd2:	2000      	movs	r0, #0
    6fd4:	e7fb      	b.n	6fce <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    6fd6:	0000      	.short	0x0000
    6fd8:	200002a5 	.word	0x200002a5
    6fdc:	20000108 	.word	0x20000108
    6fe0:	2000010c 	.word	0x2000010c
    6fe4:	20000110 	.word	0x20000110

00006fe8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6fe8:	4901      	ldr	r1, [pc, #4]	; (6ff0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6fea:	7008      	strb	r0, [r1, #0]
    6fec:	f000 b956 	b.w	729c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    6ff0:	200002a4 	.word	0x200002a4

00006ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6ff4:	4801      	ldr	r0, [pc, #4]	; (6ffc <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6ff6:	7800      	ldrb	r0, [r0, #0]
    6ff8:	f7fd bce2 	b.w	49c0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6ffc:	200002a4 	.word	0x200002a4

00007000 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    7000:	4902      	ldr	r1, [pc, #8]	; (700c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    7002:	4801      	ldr	r0, [pc, #4]	; (7008 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    7004:	6008      	str	r0, [r1, #0]
    7006:	4770      	bx	lr
    7008:	00007409 	.word	0x00007409
    700c:	20000108 	.word	0x20000108

00007010 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    7010:	4905      	ldr	r1, [pc, #20]	; (7028 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    7012:	4804      	ldr	r0, [pc, #16]	; (7024 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    7014:	6008      	str	r0, [r1, #0]
    7016:	4906      	ldr	r1, [pc, #24]	; (7030 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    7018:	4804      	ldr	r0, [pc, #16]	; (702c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    701a:	6008      	str	r0, [r1, #0]
    701c:	4906      	ldr	r1, [pc, #24]	; (7038 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    701e:	4805      	ldr	r0, [pc, #20]	; (7034 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    7020:	6008      	str	r0, [r1, #0]
    7022:	4770      	bx	lr
    7024:	00007409 	.word	0x00007409
    7028:	20000108 	.word	0x20000108
    702c:	00008be5 	.word	0x00008be5
    7030:	2000010c 	.word	0x2000010c
    7034:	00005b71 	.word	0x00005b71
    7038:	20000110 	.word	0x20000110
    703c:	b570      	push	{r4, r5, r6, lr}
    703e:	0005      	movs	r5, r0
    7040:	460c      	mov	r4, r1
    7042:	d02e      	beq.n	70a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7044:	4818      	ldr	r0, [pc, #96]	; (70a8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    7046:	6802      	ldr	r2, [r0, #0]
    7048:	b35a      	cbz	r2, 70a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    704a:	4628      	mov	r0, r5
    704c:	4790      	blx	r2
    704e:	b340      	cbz	r0, 70a2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7050:	7820      	ldrb	r0, [r4, #0]
    7052:	2811      	cmp	r0, #17
    7054:	d002      	beq.n	705c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    7056:	2814      	cmp	r0, #20
    7058:	d003      	beq.n	7062 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    705a:	e020      	b.n	709e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    705c:	7920      	ldrb	r0, [r4, #4]
    705e:	b1f0      	cbz	r0, 709e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7060:	e00a      	b.n	7078 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    7062:	7920      	ldrb	r0, [r4, #4]
    7064:	b120      	cbz	r0, 7070 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    7066:	4628      	mov	r0, r5
    7068:	f007 ff23 	bl	eeb2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    706c:	b120      	cbz	r0, 7078 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    706e:	e016      	b.n	709e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7070:	490e      	ldr	r1, [pc, #56]	; (70ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    7072:	2000      	movs	r0, #0
    7074:	7008      	strb	r0, [r1, #0]
    7076:	e012      	b.n	709e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7078:	88e4      	ldrh	r4, [r4, #6]
    707a:	2100      	movs	r1, #0
    707c:	4620      	mov	r0, r4
    707e:	f006 fe6f 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7082:	b160      	cbz	r0, 709e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7084:	8800      	ldrh	r0, [r0, #0]
    7086:	f007 f826 	bl	e0d6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    708a:	2100      	movs	r1, #0
    708c:	4620      	mov	r0, r4
    708e:	f7fe f903 	bl	5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7092:	b120      	cbz	r0, 709e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    7094:	f240 1171 	movw	r1, #369	; 0x171
    7098:	2010      	movs	r0, #16
    709a:	f7fd fe75 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    709e:	2001      	movs	r0, #1
    70a0:	bd70      	pop	{r4, r5, r6, pc}
    70a2:	2000      	movs	r0, #0
    70a4:	bd70      	pop	{r4, r5, r6, pc}
    70a6:	0000      	.short	0x0000
    70a8:	20000108 	.word	0x20000108
    70ac:	200002a8 	.word	0x200002a8
    70b0:	b510      	push	{r4, lr}
    70b2:	492d      	ldr	r1, [pc, #180]	; (7168 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    70b4:	b086      	sub	sp, #24
    70b6:	7c8a      	ldrb	r2, [r1, #18]
    70b8:	7801      	ldrb	r1, [r0, #0]
    70ba:	07d3      	lsls	r3, r2, #31
    70bc:	d101      	bne.n	70c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    70be:	2919      	cmp	r1, #25
    70c0:	d004      	beq.n	70cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    70c2:	2918      	cmp	r1, #24
    70c4:	d01f      	beq.n	7106 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    70c6:	2912      	cmp	r1, #18
    70c8:	d046      	beq.n	7158 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    70ca:	e04a      	b.n	7162 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    70cc:	8880      	ldrh	r0, [r0, #4]
    70ce:	f8ad 0000 	strh.w	r0, [sp]
    70d2:	a902      	add	r1, sp, #8
    70d4:	f007 f8cd 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    70d8:	b110      	cbz	r0, 70e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    70da:	f44f 71c4 	mov.w	r1, #392	; 0x188
    70de:	e035      	b.n	714c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    70e0:	9803      	ldr	r0, [sp, #12]
    70e2:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    70e6:	f88d 1002 	strb.w	r1, [sp, #2]
    70ea:	7841      	ldrb	r1, [r0, #1]
    70ec:	f88d 1003 	strb.w	r1, [sp, #3]
    70f0:	8840      	ldrh	r0, [r0, #2]
    70f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    70f6:	2102      	movs	r1, #2
    70f8:	4668      	mov	r0, sp
    70fa:	f009 f95d 	bl	103b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    70fe:	b340      	cbz	r0, 7152 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7100:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    7104:	e022      	b.n	714c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7106:	0791      	lsls	r1, r2, #30
    7108:	d42b      	bmi.n	7162 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    710a:	8884      	ldrh	r4, [r0, #4]
    710c:	a903      	add	r1, sp, #12
    710e:	4620      	mov	r0, r4
    7110:	f008 ff71 	bl	fff6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7114:	b110      	cbz	r0, 711c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    7116:	f240 11a5 	movw	r1, #421	; 0x1a5
    711a:	e017      	b.n	714c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    711c:	f8ad 4000 	strh.w	r4, [sp]
    7120:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7124:	f8ad 0002 	strh.w	r0, [sp, #2]
    7128:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    712c:	f8ad 0004 	strh.w	r0, [sp, #4]
    7130:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7134:	f8ad 0006 	strh.w	r0, [sp, #6]
    7138:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    713c:	f8ad 0008 	strh.w	r0, [sp, #8]
    7140:	4668      	mov	r0, sp
    7142:	f008 ffd6 	bl	100f2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7146:	b120      	cbz	r0, 7152 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    714c:	2010      	movs	r0, #16
    714e:	f7fd fe1b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7152:	2001      	movs	r0, #1
    7154:	b006      	add	sp, #24
    7156:	bd10      	pop	{r4, pc}
    7158:	0751      	lsls	r1, r2, #29
    715a:	d402      	bmi.n	7162 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    715c:	7b80      	ldrb	r0, [r0, #14]
    715e:	07c0      	lsls	r0, r0, #31
    7160:	d0f7      	beq.n	7152 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7162:	2000      	movs	r0, #0
    7164:	e7f6      	b.n	7154 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    7166:	0000      	.short	0x0000
    7168:	20001114 	.word	0x20001114
    716c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7170:	460c      	mov	r4, r1
    7172:	4680      	mov	r8, r0
    7174:	4669      	mov	r1, sp
    7176:	f007 f87c 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    717a:	2800      	cmp	r0, #0
    717c:	d17d      	bne.n	727a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    717e:	4d46      	ldr	r5, [pc, #280]	; (7298 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>)
    7180:	4681      	mov	r9, r0
    7182:	9801      	ldr	r0, [sp, #4]
    7184:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7188:	2800      	cmp	r0, #0
    718a:	d059      	beq.n	7240 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    718c:	682a      	ldr	r2, [r5, #0]
    718e:	b14a      	cbz	r2, 71a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    7190:	4621      	mov	r1, r4
    7192:	4640      	mov	r0, r8
    7194:	4790      	blx	r2
    7196:	b128      	cbz	r0, 71a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    7198:	4620      	mov	r0, r4
    719a:	f7ff ff89 	bl	70b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    719e:	2800      	cmp	r0, #0
    71a0:	d1ef      	bne.n	7182 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x172>
    71a2:	e04c      	b.n	723e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    71a4:	9d01      	ldr	r5, [sp, #4]
    71a6:	f895 0144 	ldrb.w	r0, [r5, #324]	; 0x144
    71aa:	f04f 0b01 	mov.w	fp, #1
    71ae:	3578      	adds	r5, #120	; 0x78
    71b0:	b950      	cbnz	r0, 71c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    71b2:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    71b6:	f88d 0008 	strb.w	r0, [sp, #8]
    71ba:	9802      	ldr	r0, [sp, #8]
    71bc:	9002      	str	r0, [sp, #8]
    71be:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71c2:	b108      	cbz	r0, 71c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    71c4:	2001      	movs	r0, #1
    71c6:	e000      	b.n	71ca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ba>
    71c8:	2000      	movs	r0, #0
    71ca:	4682      	mov	sl, r0
    71cc:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    71d0:	b1b8      	cbz	r0, 7202 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    71d2:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    71d6:	0780      	lsls	r0, r0, #30
    71d8:	d513      	bpl.n	7202 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    71da:	f884 9001 	strb.w	r9, [r4, #1]
    71de:	f884 b000 	strb.w	fp, [r4]
    71e2:	f884 9004 	strb.w	r9, [r4, #4]
    71e6:	f8a4 8005 	strh.w	r8, [r4, #5]
    71ea:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    71ee:	71e1      	strb	r1, [r4, #7]
    71f0:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    71f4:	8121      	strh	r1, [r4, #8]
    71f6:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    71fa:	8161      	strh	r1, [r4, #10]
    71fc:	f885 9045 	strb.w	r9, [r5, #69]	; 0x45
    7200:	e01d      	b.n	723e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    7202:	4640      	mov	r0, r8
    7204:	f7fe f9f0 	bl	55e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7208:	0007      	movs	r7, r0
    720a:	d00d      	beq.n	7228 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x218>
    720c:	f006 fbc1 	bl	d992 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    7210:	0006      	movs	r6, r0
    7212:	d017      	beq.n	7244 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x234>
    7214:	f884 9001 	strb.w	r9, [r4, #1]
    7218:	200d      	movs	r0, #13
    721a:	7020      	strb	r0, [r4, #0]
    721c:	f8a4 8006 	strh.w	r8, [r4, #6]
    7220:	8126      	strh	r6, [r4, #8]
    7222:	f884 b004 	strb.w	fp, [r4, #4]
    7226:	e007      	b.n	7238 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x228>
    7228:	f240 212d 	movw	r1, #557	; 0x22d
    722c:	e02e      	b.n	728c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    722e:	2100      	movs	r1, #0
    7230:	4638      	mov	r0, r7
    7232:	460a      	mov	r2, r1
    7234:	f006 fcc3 	bl	dbbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7238:	1e76      	subs	r6, r6, #1
    723a:	b2b6      	uxth	r6, r6
    723c:	d2f7      	bcs.n	722e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x21e>
    723e:	2001      	movs	r0, #1
    7240:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7244:	4640      	mov	r0, r8
    7246:	f7fe f9b9 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    724a:	b1e8      	cbz	r0, 7288 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    724c:	f1ba 0f00 	cmp.w	sl, #0
    7250:	d01f      	beq.n	7292 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    7252:	f006 facf 	bl	d7f4 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7256:	b180      	cbz	r0, 727a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    7258:	4640      	mov	r0, r8
    725a:	f006 ff3c 	bl	e0d6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    725e:	2100      	movs	r1, #0
    7260:	4640      	mov	r0, r8
    7262:	f7fe f819 	bl	5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7266:	f884 9001 	strb.w	r9, [r4, #1]
    726a:	210a      	movs	r1, #10
    726c:	7021      	strb	r1, [r4, #0]
    726e:	f884 9004 	strb.w	r9, [r4, #4]
    7272:	4648      	mov	r0, r9
    7274:	f8a4 8005 	strh.w	r8, [r4, #5]
    7278:	e000      	b.n	727c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    727a:	e00a      	b.n	7292 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    727c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    7280:	71e1      	strb	r1, [r4, #7]
    7282:	3524      	adds	r5, #36	; 0x24
    7284:	7028      	strb	r0, [r5, #0]
    7286:	e7da      	b.n	723e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    7288:	f44f 7111 	mov.w	r1, #580	; 0x244
    728c:	2010      	movs	r0, #16
    728e:	f7fd fd7b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7292:	2000      	movs	r0, #0
    7294:	e7d4      	b.n	7240 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    7296:	0000      	.short	0x0000
    7298:	2000010c 	.word	0x2000010c
    729c:	4804      	ldr	r0, [pc, #16]	; (72b0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2a0>)
    729e:	2100      	movs	r1, #0
    72a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    72a4:	7001      	strb	r1, [r0, #0]
    72a6:	8042      	strh	r2, [r0, #2]
    72a8:	1f00      	subs	r0, r0, #4
    72aa:	f8a0 1001 	strh.w	r1, [r0, #1]
    72ae:	4770      	bx	lr
    72b0:	200002a8 	.word	0x200002a8

000072b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    72b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    72b6:	f06f 021f 	mvn.w	r2, #31
    72ba:	0c01      	lsrs	r1, r0, #16
    72bc:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    72c0:	251f      	movs	r5, #31
    72c2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    72c6:	3854      	subs	r0, #84	; 0x54
    72c8:	d00d      	beq.n	72e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    72ca:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    72ce:	3855      	subs	r0, #85	; 0x55
    72d0:	d009      	beq.n	72e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    72d2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    72d6:	38aa      	subs	r0, #170	; 0xaa
    72d8:	d005      	beq.n	72e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    72da:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    72de:	38aa      	subs	r0, #170	; 0xaa
    72e0:	d001      	beq.n	72e6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    72e2:	2001      	movs	r0, #1
    72e4:	e000      	b.n	72e8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    72e6:	2000      	movs	r0, #0
    72e8:	2200      	movs	r2, #0
    72ea:	4613      	mov	r3, r2
    72ec:	ea4f 0402 	mov.w	r4, r2
    72f0:	ea82 0701 	eor.w	r7, r2, r1
    72f4:	43ff      	mvns	r7, r7
    72f6:	431f      	orrs	r7, r3
    72f8:	1c7f      	adds	r7, r7, #1
    72fa:	d00f      	beq.n	731c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    72fc:	f006 0701 	and.w	r7, r6, #1
    7300:	0852      	lsrs	r2, r2, #1
    7302:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7306:	f005 0701 	and.w	r7, r5, #1
    730a:	085b      	lsrs	r3, r3, #1
    730c:	0876      	lsrs	r6, r6, #1
    730e:	086d      	lsrs	r5, r5, #1
    7310:	1c64      	adds	r4, r4, #1
    7312:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7316:	2c16      	cmp	r4, #22
    7318:	d3ea      	bcc.n	72f0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    731c:	2000      	movs	r0, #0
    731e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007320 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    7320:	b510      	push	{r4, lr}
    7322:	e9d0 2100 	ldrd	r2, r1, [r0]
    7326:	4b09      	ldr	r3, [pc, #36]	; (734c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    7328:	4c09      	ldr	r4, [pc, #36]	; (7350 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    732a:	4353      	muls	r3, r2
    732c:	4354      	muls	r4, r2
    732e:	4051      	eors	r1, r2
    7330:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7334:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7338:	ea4f 41f1 	mov.w	r1, r1, ror #19
    733c:	e9c0 2100 	strd	r2, r1, [r0]
    7340:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7344:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7348:	4618      	mov	r0, r3
    734a:	bd10      	pop	{r4, pc}
    734c:	c6ef3760 	.word	0xc6ef3760
    7350:	9e3779bb 	.word	0x9e3779bb

00007354 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7354:	b570      	push	{r4, r5, r6, lr}
    7356:	4604      	mov	r4, r0
    7358:	7c00      	ldrb	r0, [r0, #16]
    735a:	b300      	cbz	r0, 739e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    735c:	2802      	cmp	r0, #2
    735e:	d01e      	beq.n	739e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7360:	f05f 0001 	movs.w	r0, #1
    7364:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7368:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    736c:	460d      	mov	r5, r1
    736e:	b1c0      	cbz	r0, 73a2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7370:	7de0      	ldrb	r0, [r4, #23]
    7372:	b1f0      	cbz	r0, 73b2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7374:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7378:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    737c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7380:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7384:	7c20      	ldrb	r0, [r4, #16]
    7386:	f007 fcf7 	bl	ed78 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    738a:	7620      	strb	r0, [r4, #24]
    738c:	2008      	movs	r0, #8
    738e:	7660      	strb	r0, [r4, #25]
    7390:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7394:	4629      	mov	r1, r5
    7396:	f007 fcdb 	bl	ed50 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    739a:	b9a8      	cbnz	r0, 73c8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    739c:	e00e      	b.n	73bc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    739e:	2000      	movs	r0, #0
    73a0:	e7e0      	b.n	7364 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    73a2:	2000      	movs	r0, #0
    73a4:	f7fe fb96 	bl	5ad4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    73a8:	2800      	cmp	r0, #0
    73aa:	d1eb      	bne.n	7384 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    73ac:	f240 41ad 	movw	r1, #1197	; 0x4ad
    73b0:	e001      	b.n	73b6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    73b2:	f240 41b1 	movw	r1, #1201	; 0x4b1
    73b6:	202d      	movs	r0, #45	; 0x2d
    73b8:	f7fd fce6 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    73c0:	4629      	mov	r1, r5
    73c2:	f007 fcce 	bl	ed62 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    73c6:	b100      	cbz	r0, 73ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    73c8:	2001      	movs	r0, #1
    73ca:	76a0      	strb	r0, [r4, #26]
    73cc:	7e20      	ldrb	r0, [r4, #24]
    73ce:	b130      	cbz	r0, 73de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    73d0:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    73d4:	f104 0150 	add.w	r1, r4, #80	; 0x50
    73d8:	f006 ff08 	bl	e1ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    73dc:	7660      	strb	r0, [r4, #25]
    73de:	2500      	movs	r5, #0
    73e0:	6425      	str	r5, [r4, #64]	; 0x40
    73e2:	f005 fb23 	bl	ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    73e6:	6460      	str	r0, [r4, #68]	; 0x44
    73e8:	2100      	movs	r1, #0
    73ea:	4620      	mov	r0, r4
    73ec:	f007 fdef 	bl	efce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    73f0:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    73f4:	78a0      	ldrb	r0, [r4, #2]
    73f6:	0740      	lsls	r0, r0, #29
    73f8:	d505      	bpl.n	7406 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    73fa:	4620      	mov	r0, r4
    73fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7400:	2100      	movs	r1, #0
    7402:	f000 bdff 	b.w	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7406:	bd70      	pop	{r4, r5, r6, pc}

00007408 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7408:	b508      	push	{r3, lr}
    740a:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    740e:	f88d 2000 	strb.w	r2, [sp]
    7412:	9a00      	ldr	r2, [sp, #0]
    7414:	9200      	str	r2, [sp, #0]
    7416:	f89d 3000 	ldrb.w	r3, [sp]
    741a:	2200      	movs	r2, #0
    741c:	b163      	cbz	r3, 7438 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    741e:	704a      	strb	r2, [r1, #1]
    7420:	2317      	movs	r3, #23
    7422:	700b      	strb	r3, [r1, #0]
    7424:	f850 3f95 	ldr.w	r3, [r0, #149]!
    7428:	604b      	str	r3, [r1, #4]
    742a:	6843      	ldr	r3, [r0, #4]
    742c:	608b      	str	r3, [r1, #8]
    742e:	7a03      	ldrb	r3, [r0, #8]
    7430:	730b      	strb	r3, [r1, #12]
    7432:	f800 2c01 	strb.w	r2, [r0, #-1]
    7436:	e03b      	b.n	74b0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7438:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    743c:	f88d 3000 	strb.w	r3, [sp]
    7440:	9b00      	ldr	r3, [sp, #0]
    7442:	9300      	str	r3, [sp, #0]
    7444:	f89d 3000 	ldrb.w	r3, [sp]
    7448:	b143      	cbz	r3, 745c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    744a:	704a      	strb	r2, [r1, #1]
    744c:	2305      	movs	r3, #5
    744e:	700b      	strb	r3, [r1, #0]
    7450:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    7454:	604b      	str	r3, [r1, #4]
    7456:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    745a:	e029      	b.n	74b0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    745c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7460:	f88d 3000 	strb.w	r3, [sp]
    7464:	9b00      	ldr	r3, [sp, #0]
    7466:	9300      	str	r3, [sp, #0]
    7468:	f89d 3000 	ldrb.w	r3, [sp]
    746c:	b11b      	cbz	r3, 7476 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    746e:	bf00      	nop
    7470:	f007 fd83 	bl	ef7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7474:	e01c      	b.n	74b0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7476:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    747a:	f88d 3000 	strb.w	r3, [sp]
    747e:	9b00      	ldr	r3, [sp, #0]
    7480:	9300      	str	r3, [sp, #0]
    7482:	f89d 3000 	ldrb.w	r3, [sp]
    7486:	b1ab      	cbz	r3, 74b4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    7488:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    748c:	f88d 3000 	strb.w	r3, [sp]
    7490:	9b00      	ldr	r3, [sp, #0]
    7492:	9300      	str	r3, [sp, #0]
    7494:	f89d 3000 	ldrb.w	r3, [sp]
    7498:	2b00      	cmp	r3, #0
    749a:	d1e9      	bne.n	7470 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    749c:	704a      	strb	r2, [r1, #1]
    749e:	2314      	movs	r3, #20
    74a0:	700b      	strb	r3, [r1, #0]
    74a2:	f850 3f88 	ldr.w	r3, [r0, #136]!
    74a6:	604b      	str	r3, [r1, #4]
    74a8:	8883      	ldrh	r3, [r0, #4]
    74aa:	810b      	strh	r3, [r1, #8]
    74ac:	f800 2c02 	strb.w	r2, [r0, #-2]
    74b0:	2001      	movs	r0, #1
    74b2:	bd08      	pop	{r3, pc}
    74b4:	2000      	movs	r0, #0
    74b6:	bd08      	pop	{r3, pc}

000074b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    74b8:	b530      	push	{r4, r5, lr}
    74ba:	460c      	mov	r4, r1
    74bc:	b08d      	sub	sp, #52	; 0x34
    74be:	4605      	mov	r5, r0
    74c0:	4601      	mov	r1, r0
    74c2:	2220      	movs	r2, #32
    74c4:	a802      	add	r0, sp, #8
    74c6:	f005 fc26 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    74ca:	a80a      	add	r0, sp, #40	; 0x28
    74cc:	f007 fe2c 	bl	f128 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    74d0:	7aa0      	ldrb	r0, [r4, #10]
    74d2:	f88d 0018 	strb.w	r0, [sp, #24]
    74d6:	7820      	ldrb	r0, [r4, #0]
    74d8:	f88d 0008 	strb.w	r0, [sp, #8]
    74dc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    74e0:	f8ad 0000 	strh.w	r0, [sp]
    74e4:	f89d 0000 	ldrb.w	r0, [sp]
    74e8:	f000 0101 	and.w	r1, r0, #1
    74ec:	f3c0 0240 	ubfx	r2, r0, #1, #1
    74f0:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    74f4:	f3c0 0280 	ubfx	r2, r0, #2, #1
    74f8:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    74fc:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7500:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7504:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7508:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    750c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7510:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7514:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7518:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    751c:	f8ad 000a 	strh.w	r0, [sp, #10]
    7520:	7d20      	ldrb	r0, [r4, #20]
    7522:	2801      	cmp	r0, #1
    7524:	d006      	beq.n	7534 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7526:	2802      	cmp	r0, #2
    7528:	d004      	beq.n	7534 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    752a:	f240 2186 	movw	r1, #646	; 0x286
    752e:	2006      	movs	r0, #6
    7530:	f7fd fc2a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7534:	f88d 000c 	strb.w	r0, [sp, #12]
    7538:	7a61      	ldrb	r1, [r4, #9]
    753a:	a80a      	add	r0, sp, #40	; 0x28
    753c:	f007 fddb 	bl	f0f6 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7540:	7d20      	ldrb	r0, [r4, #20]
    7542:	2101      	movs	r1, #1
    7544:	2802      	cmp	r0, #2
    7546:	d102      	bne.n	754e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7548:	7d60      	ldrb	r0, [r4, #21]
    754a:	1c40      	adds	r0, r0, #1
    754c:	b2c1      	uxtb	r1, r0
    754e:	7ea0      	ldrb	r0, [r4, #26]
    7550:	1c40      	adds	r0, r0, #1
    7552:	b2c2      	uxtb	r2, r0
    7554:	a80a      	add	r0, sp, #40	; 0x28
    7556:	f007 fd95 	bl	f084 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    755a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    755e:	0700      	lsls	r0, r0, #28
    7560:	d501      	bpl.n	7566 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7562:	2000      	movs	r0, #0
    7564:	e020      	b.n	75a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7566:	a80a      	add	r0, sp, #40	; 0x28
    7568:	f007 fd9e 	bl	f0a8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    756c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7570:	2228      	movs	r2, #40	; 0x28
    7572:	f000 fded 	bl	8150 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7576:	f240 2171 	movw	r1, #625	; 0x271
    757a:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    757e:	fbb0 f0f1 	udiv	r0, r0, r1
    7582:	4348      	muls	r0, r1
    7584:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7588:	f240 2371 	movw	r3, #625	; 0x271
    758c:	0a0a      	lsrs	r2, r1, #8
    758e:	f240 2171 	movw	r1, #625	; 0x271
    7592:	434a      	muls	r2, r1
    7594:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7598:	0a09      	lsrs	r1, r1, #8
    759a:	4359      	muls	r1, r3
    759c:	4290      	cmp	r0, r2
    759e:	d801      	bhi.n	75a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    75a0:	9204      	str	r2, [sp, #16]
    75a2:	e004      	b.n	75ae <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    75a4:	4288      	cmp	r0, r1
    75a6:	d801      	bhi.n	75ac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    75a8:	9004      	str	r0, [sp, #16]
    75aa:	e000      	b.n	75ae <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    75ac:	9104      	str	r1, [sp, #16]
    75ae:	7ca0      	ldrb	r0, [r4, #18]
    75b0:	f88d 0017 	strb.w	r0, [sp, #23]
    75b4:	7e20      	ldrb	r0, [r4, #24]
    75b6:	2801      	cmp	r0, #1
    75b8:	d000      	beq.n	75bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    75ba:	2000      	movs	r0, #0
    75bc:	f88d 0014 	strb.w	r0, [sp, #20]
    75c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    75c2:	f006 fc8b 	bl	dedc <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    75c6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    75c8:	f006 fd2c 	bl	e024 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    75cc:	2220      	movs	r2, #32
    75ce:	a902      	add	r1, sp, #8
    75d0:	4628      	mov	r0, r5
    75d2:	f005 fba0 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    75d6:	980a      	ldr	r0, [sp, #40]	; 0x28
    75d8:	6228      	str	r0, [r5, #32]
    75da:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    75de:	84a8      	strh	r0, [r5, #36]	; 0x24
    75e0:	7ae0      	ldrb	r0, [r4, #11]
    75e2:	b168      	cbz	r0, 7600 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    75e4:	2802      	cmp	r0, #2
    75e6:	d00b      	beq.n	7600 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    75e8:	f05f 0001 	movs.w	r0, #1
    75ec:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    75f0:	68e0      	ldr	r0, [r4, #12]
    75f2:	6528      	str	r0, [r5, #80]	; 0x50
    75f4:	8a20      	ldrh	r0, [r4, #16]
    75f6:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    75fa:	b00d      	add	sp, #52	; 0x34
    75fc:	2000      	movs	r0, #0
    75fe:	bd30      	pop	{r4, r5, pc}
    7600:	2000      	movs	r0, #0
    7602:	e7f3      	b.n	75ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007604 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7604:	4a0a      	ldr	r2, [pc, #40]	; (7630 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7606:	b510      	push	{r4, lr}
    7608:	2100      	movs	r1, #0
    760a:	7011      	strb	r1, [r2, #0]
    760c:	4c09      	ldr	r4, [pc, #36]	; (7634 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    760e:	6060      	str	r0, [r4, #4]
    7610:	f000 f822 	bl	7658 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7614:	b110      	cbz	r0, 761c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7616:	f240 312d 	movw	r1, #813	; 0x32d
    761a:	e004      	b.n	7626 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    761c:	68a0      	ldr	r0, [r4, #8]
    761e:	2800      	cmp	r0, #0
    7620:	d104      	bne.n	762c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    7622:	f44f 714c 	mov.w	r1, #816	; 0x330
    7626:	202d      	movs	r0, #45	; 0x2d
    7628:	f7fd fbae 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    762c:	bd10      	pop	{r4, pc}
    762e:	0000      	.short	0x0000
    7630:	20001130 	.word	0x20001130
    7634:	20000114 	.word	0x20000114

00007638 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7638:	4902      	ldr	r1, [pc, #8]	; (7644 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    763a:	4801      	ldr	r0, [pc, #4]	; (7640 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    763c:	6088      	str	r0, [r1, #8]
    763e:	4770      	bx	lr
    7640:	00008138 	.word	0x00008138
    7644:	20000114 	.word	0x20000114

00007648 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7648:	4902      	ldr	r1, [pc, #8]	; (7654 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    764a:	6008      	str	r0, [r1, #0]
    764c:	6889      	ldr	r1, [r1, #8]
    764e:	6809      	ldr	r1, [r1, #0]
    7650:	4708      	bx	r1
    7652:	0000      	.short	0x0000
    7654:	20000114 	.word	0x20000114

00007658 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7658:	4808      	ldr	r0, [pc, #32]	; (767c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    765a:	b510      	push	{r4, lr}
    765c:	7800      	ldrb	r0, [r0, #0]
    765e:	b110      	cbz	r0, 7666 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7660:	240c      	movs	r4, #12
    7662:	4620      	mov	r0, r4
    7664:	bd10      	pop	{r4, pc}
    7666:	2400      	movs	r4, #0
    7668:	2218      	movs	r2, #24
    766a:	4621      	mov	r1, r4
    766c:	4803      	ldr	r0, [pc, #12]	; (767c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    766e:	f005 fbcc 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7672:	f004 f8bf 	bl	b7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7676:	f003 fee3 	bl	b440 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    767a:	e7f2      	b.n	7662 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    767c:	20001130 	.word	0x20001130

00007680 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7680:	4904      	ldr	r1, [pc, #16]	; (7694 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7682:	b510      	push	{r4, lr}
    7684:	7809      	ldrb	r1, [r1, #0]
    7686:	2901      	cmp	r1, #1
    7688:	d101      	bne.n	768e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    768a:	f000 fb85 	bl	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    768e:	2000      	movs	r0, #0
    7690:	bd10      	pop	{r4, pc}
    7692:	0000      	.short	0x0000
    7694:	20001130 	.word	0x20001130

00007698 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7698:	4902      	ldr	r1, [pc, #8]	; (76a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    769a:	4801      	ldr	r0, [pc, #4]	; (76a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    769c:	6008      	str	r0, [r1, #0]
    769e:	4770      	bx	lr
    76a0:	00007ee5 	.word	0x00007ee5
    76a4:	20000120 	.word	0x20000120
    76a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76ac:	000f      	movs	r7, r1
    76ae:	4604      	mov	r4, r0
    76b0:	d023      	beq.n	76fa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    76b2:	f104 0020 	add.w	r0, r4, #32
    76b6:	4605      	mov	r5, r0
    76b8:	f007 fd1f 	bl	f0fa <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    76bc:	b9b0      	cbnz	r0, 76ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    76be:	78a0      	ldrb	r0, [r4, #2]
    76c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    76c4:	b350      	cbz	r0, 771c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    76c6:	4628      	mov	r0, r5
    76c8:	f007 fcee 	bl	f0a8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    76cc:	4606      	mov	r6, r0
    76ce:	4628      	mov	r0, r5
    76d0:	f007 fd13 	bl	f0fa <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    76d4:	1a30      	subs	r0, r6, r0
    76d6:	b2c0      	uxtb	r0, r0
    76d8:	f007 fd64 	bl	f1a4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    76dc:	4601      	mov	r1, r0
    76de:	4835      	ldr	r0, [pc, #212]	; (77b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    76e0:	6842      	ldr	r2, [r0, #4]
    76e2:	4411      	add	r1, r2
    76e4:	6041      	str	r1, [r0, #4]
    76e6:	4628      	mov	r0, r5
    76e8:	f007 fd25 	bl	f136 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    76ec:	4628      	mov	r0, r5
    76ee:	f007 fce7 	bl	f0c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    76f2:	4601      	mov	r1, r0
    76f4:	4620      	mov	r0, r4
    76f6:	f007 fca6 	bl	f046 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    76fa:	4d2f      	ldr	r5, [pc, #188]	; (77b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    76fc:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7700:	2100      	movs	r1, #0
    7702:	6868      	ldr	r0, [r5, #4]
    7704:	8001      	strh	r1, [r0, #0]
    7706:	f007 fcb4 	bl	f072 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    770a:	8860      	ldrh	r0, [r4, #2]
    770c:	2813      	cmp	r0, #19
    770e:	d013      	beq.n	7738 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7710:	dc09      	bgt.n	7726 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    7712:	2810      	cmp	r0, #16
    7714:	d036      	beq.n	7784 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7716:	2812      	cmp	r0, #18
    7718:	d109      	bne.n	772e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    771a:	e031      	b.n	7780 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    771c:	4620      	mov	r0, r4
    771e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7722:	f000 bb39 	b.w	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7726:	2815      	cmp	r0, #21
    7728:	d00f      	beq.n	774a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    772a:	281d      	cmp	r0, #29
    772c:	d00d      	beq.n	774a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    772e:	f240 616f 	movw	r1, #1647	; 0x66f
    7732:	202d      	movs	r0, #45	; 0x2d
    7734:	f7fd fb28 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7738:	2100      	movs	r1, #0
    773a:	6868      	ldr	r0, [r5, #4]
    773c:	f007 f8ce 	bl	e8dc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7740:	2101      	movs	r1, #1
    7742:	6868      	ldr	r0, [r5, #4]
    7744:	f007 fc95 	bl	f072 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    7748:	e020      	b.n	778c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    774a:	2101      	movs	r1, #1
    774c:	6868      	ldr	r0, [r5, #4]
    774e:	f007 f8c5 	bl	e8dc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7752:	2101      	movs	r1, #1
    7754:	6868      	ldr	r0, [r5, #4]
    7756:	f007 fc8c 	bl	f072 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    775a:	b136      	cbz	r6, 776a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    775c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7760:	6868      	ldr	r0, [r5, #4]
    7762:	f007 f8d6 	bl	e912 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7766:	2101      	movs	r1, #1
    7768:	e006      	b.n	7778 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    776a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    776e:	6868      	ldr	r0, [r5, #4]
    7770:	f007 f8cf 	bl	e912 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7774:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7778:	6868      	ldr	r0, [r5, #4]
    777a:	f007 f8d0 	bl	e91e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    777e:	e005      	b.n	778c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7780:	2106      	movs	r1, #6
    7782:	e000      	b.n	7786 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7784:	2102      	movs	r1, #2
    7786:	6868      	ldr	r0, [r5, #4]
    7788:	f007 f8a8 	bl	e8dc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    778c:	4620      	mov	r0, r4
    778e:	f000 fcaf 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    7792:	8860      	ldrh	r0, [r4, #2]
    7794:	281d      	cmp	r0, #29
    7796:	d006      	beq.n	77a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7798:	2815      	cmp	r0, #21
    779a:	d004      	beq.n	77a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    779c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    779e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    77a0:	6868      	ldr	r0, [r5, #4]
    77a2:	f007 f88b 	bl	e8bc <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    77a6:	4639      	mov	r1, r7
    77a8:	4620      	mov	r0, r4
    77aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77ae:	f000 b9f1 	b.w	7b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    77b2:	0000      	.short	0x0000
    77b4:	20001130 	.word	0x20001130
    77b8:	20000114 	.word	0x20000114
    77bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77c0:	4d2e      	ldr	r5, [pc, #184]	; (787c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    77c2:	4607      	mov	r7, r0
    77c4:	7828      	ldrb	r0, [r5, #0]
    77c6:	2802      	cmp	r0, #2
    77c8:	d005      	beq.n	77d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    77ca:	7828      	ldrb	r0, [r5, #0]
    77cc:	2803      	cmp	r0, #3
    77ce:	d002      	beq.n	77d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    77d0:	f640 41e5 	movw	r1, #3301	; 0xce5
    77d4:	e028      	b.n	7828 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    77d6:	4c2a      	ldr	r4, [pc, #168]	; (7880 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    77d8:	6820      	ldr	r0, [r4, #0]
    77da:	7b01      	ldrb	r1, [r0, #12]
    77dc:	b109      	cbz	r1, 77e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    77de:	f007 fc3d 	bl	f05c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    77e2:	f8d4 c004 	ldr.w	ip, [r4, #4]
    77e6:	f04f 0800 	mov.w	r8, #0
    77ea:	f89c 0000 	ldrb.w	r0, [ip]
    77ee:	f000 060f 	and.w	r6, r0, #15
    77f2:	b33f      	cbz	r7, 7844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    77f4:	6821      	ldr	r1, [r4, #0]
    77f6:	09c0      	lsrs	r0, r0, #7
    77f8:	f101 0349 	add.w	r3, r1, #73	; 0x49
    77fc:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    7800:	f10c 0109 	add.w	r1, ip, #9
    7804:	f006 fc6b 	bl	e0de <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7808:	b1e0      	cbz	r0, 7844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    780a:	4641      	mov	r1, r8
    780c:	6860      	ldr	r0, [r4, #4]
    780e:	f007 f845 	bl	e89c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    7812:	b1b8      	cbz	r0, 7844 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7814:	782a      	ldrb	r2, [r5, #0]
    7816:	6820      	ldr	r0, [r4, #0]
    7818:	4631      	mov	r1, r6
    781a:	2a02      	cmp	r2, #2
    781c:	d007      	beq.n	782e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    781e:	782a      	ldrb	r2, [r5, #0]
    7820:	2a03      	cmp	r2, #3
    7822:	d004      	beq.n	782e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7824:	f640 41be 	movw	r1, #3262	; 0xcbe
    7828:	202d      	movs	r0, #45	; 0x2d
    782a:	f7fd faad 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    782e:	68a2      	ldr	r2, [r4, #8]
    7830:	782b      	ldrb	r3, [r5, #0]
    7832:	6952      	ldr	r2, [r2, #20]
    7834:	f06f 0607 	mvn.w	r6, #7
    7838:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    783c:	58d2      	ldr	r2, [r2, r3]
    783e:	4790      	blx	r2
    7840:	4606      	mov	r6, r0
    7842:	e000      	b.n	7846 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7844:	2601      	movs	r6, #1
    7846:	7ba8      	ldrb	r0, [r5, #14]
    7848:	b118      	cbz	r0, 7852 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    784a:	f003 ffd3 	bl	b7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    784e:	f003 fdf7 	bl	b440 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7852:	2e00      	cmp	r6, #0
    7854:	d00f      	beq.n	7876 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    7856:	6820      	ldr	r0, [r4, #0]
    7858:	f007 fcba 	bl	f1d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    785c:	b130      	cbz	r0, 786c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    785e:	f003 ffe9 	bl	b834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7862:	68a0      	ldr	r0, [r4, #8]
    7864:	6880      	ldr	r0, [r0, #8]
    7866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    786a:	4700      	bx	r0
    786c:	6820      	ldr	r0, [r4, #0]
    786e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7872:	f000 ba91 	b.w	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    787a:	0000      	.short	0x0000
    787c:	20001130 	.word	0x20001130
    7880:	20000114 	.word	0x20000114
    7884:	b510      	push	{r4, lr}
    7886:	2903      	cmp	r1, #3
    7888:	d002      	beq.n	7890 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    788a:	2905      	cmp	r1, #5
    788c:	d10a      	bne.n	78a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    788e:	e002      	b.n	7896 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7890:	f000 fb7c 	bl	7f8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    7894:	e003      	b.n	789e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7896:	4904      	ldr	r1, [pc, #16]	; (78a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7898:	6809      	ldr	r1, [r1, #0]
    789a:	b109      	cbz	r1, 78a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    789c:	4788      	blx	r1
    789e:	b108      	cbz	r0, 78a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    78a0:	2000      	movs	r0, #0
    78a2:	bd10      	pop	{r4, pc}
    78a4:	2001      	movs	r0, #1
    78a6:	bd10      	pop	{r4, pc}
    78a8:	20000120 	.word	0x20000120
    78ac:	4a09      	ldr	r2, [pc, #36]	; (78d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    78ae:	0003      	movs	r3, r0
    78b0:	6810      	ldr	r0, [r2, #0]
    78b2:	d001      	beq.n	78b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    78b4:	f000 ba70 	b.w	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    78b8:	2900      	cmp	r1, #0
    78ba:	d009      	beq.n	78d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    78bc:	6891      	ldr	r1, [r2, #8]
    78be:	4a06      	ldr	r2, [pc, #24]	; (78d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    78c0:	6909      	ldr	r1, [r1, #16]
    78c2:	7812      	ldrb	r2, [r2, #0]
    78c4:	f06f 030f 	mvn.w	r3, #15
    78c8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    78cc:	5889      	ldr	r1, [r1, r2]
    78ce:	4708      	bx	r1
    78d0:	4770      	bx	lr
    78d2:	0000      	.short	0x0000
    78d4:	20000114 	.word	0x20000114
    78d8:	20001130 	.word	0x20001130
    78dc:	b570      	push	{r4, r5, r6, lr}
    78de:	4604      	mov	r4, r0
    78e0:	8840      	ldrh	r0, [r0, #2]
    78e2:	2810      	cmp	r0, #16
    78e4:	d019      	beq.n	791a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    78e6:	4d10      	ldr	r5, [pc, #64]	; (7928 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    78e8:	7ba8      	ldrb	r0, [r5, #14]
    78ea:	b120      	cbz	r0, 78f6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    78ec:	f003 fdc8 	bl	b480 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    78f0:	2040      	movs	r0, #64	; 0x40
    78f2:	f003 ff8d 	bl	b810 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    78f6:	480d      	ldr	r0, [pc, #52]	; (792c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    78f8:	6840      	ldr	r0, [r0, #4]
    78fa:	f004 fa37 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    78fe:	78a0      	ldrb	r0, [r4, #2]
    7900:	0740      	lsls	r0, r0, #29
    7902:	d404      	bmi.n	790e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7904:	2100      	movs	r1, #0
    7906:	7922      	ldrb	r2, [r4, #4]
    7908:	4608      	mov	r0, r1
    790a:	f004 fabb 	bl	be84 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    790e:	2000      	movs	r0, #0
    7910:	f004 f8d0 	bl	bab4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7914:	2002      	movs	r0, #2
    7916:	7028      	strb	r0, [r5, #0]
    7918:	bd70      	pop	{r4, r5, r6, pc}
    791a:	4620      	mov	r0, r4
    791c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7920:	2101      	movs	r1, #1
    7922:	f7ff bec1 	b.w	76a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7926:	0000      	.short	0x0000
    7928:	20001130 	.word	0x20001130
    792c:	20000114 	.word	0x20000114
    7930:	b510      	push	{r4, lr}
    7932:	4c12      	ldr	r4, [pc, #72]	; (797c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7934:	6820      	ldr	r0, [r4, #0]
    7936:	f000 f825 	bl	7984 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    793a:	6820      	ldr	r0, [r4, #0]
    793c:	f007 fc48 	bl	f1d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7940:	2800      	cmp	r0, #0
    7942:	6820      	ldr	r0, [r4, #0]
    7944:	d00b      	beq.n	795e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7946:	490e      	ldr	r1, [pc, #56]	; (7980 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7948:	780a      	ldrb	r2, [r1, #0]
    794a:	2a02      	cmp	r2, #2
    794c:	d00b      	beq.n	7966 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    794e:	780a      	ldrb	r2, [r1, #0]
    7950:	2a03      	cmp	r2, #3
    7952:	d008      	beq.n	7966 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7954:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
    7958:	202d      	movs	r0, #45	; 0x2d
    795a:	f7fd fa15 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    795e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7962:	f000 ba19 	b.w	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7966:	68a2      	ldr	r2, [r4, #8]
    7968:	7809      	ldrb	r1, [r1, #0]
    796a:	68d2      	ldr	r2, [r2, #12]
    796c:	f06f 0307 	mvn.w	r3, #7
    7970:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7974:	5851      	ldr	r1, [r2, r1]
    7976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    797a:	4708      	bx	r1
    797c:	20000114 	.word	0x20000114
    7980:	20001130 	.word	0x20001130
    7984:	b510      	push	{r4, lr}
    7986:	7b01      	ldrb	r1, [r0, #12]
    7988:	b109      	cbz	r1, 798e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    798a:	f007 fb67 	bl	f05c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    798e:	4805      	ldr	r0, [pc, #20]	; (79a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7990:	7b80      	ldrb	r0, [r0, #14]
    7992:	2800      	cmp	r0, #0
    7994:	d005      	beq.n	79a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7996:	f003 ff2d 	bl	b7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    799a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    799e:	f003 bd4f 	b.w	b440 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79a2:	bd10      	pop	{r4, pc}
    79a4:	20001130 	.word	0x20001130

000079a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    79a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79ac:	4d5e      	ldr	r5, [pc, #376]	; (7b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    79ae:	4604      	mov	r4, r0
    79b0:	b08a      	sub	sp, #40	; 0x28
    79b2:	7828      	ldrb	r0, [r5, #0]
    79b4:	bbf0      	cbnz	r0, 7a34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    79b6:	7820      	ldrb	r0, [r4, #0]
    79b8:	28ff      	cmp	r0, #255	; 0xff
    79ba:	d03e      	beq.n	7a3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    79bc:	2600      	movs	r6, #0
    79be:	81ae      	strh	r6, [r5, #12]
    79c0:	606e      	str	r6, [r5, #4]
    79c2:	706e      	strb	r6, [r5, #1]
    79c4:	70ae      	strb	r6, [r5, #2]
    79c6:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    79ca:	4b58      	ldr	r3, [pc, #352]	; (7b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    79cc:	af06      	add	r7, sp, #24
    79ce:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>
    79d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    79d4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    79d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
    79dc:	6840      	ldr	r0, [r0, #4]
    79de:	9009      	str	r0, [sp, #36]	; 0x24
    79e0:	a806      	add	r0, sp, #24
    79e2:	f004 f83b 	bl	ba5c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    79e6:	f004 f919 	bl	bc1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    79ea:	f004 fba5 	bl	c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    79ee:	f003 ff01 	bl	b7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    79f2:	f003 fd25 	bl	b440 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79f6:	484f      	ldr	r0, [pc, #316]	; (7b34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    79f8:	f004 fa76 	bl	bee8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    79fc:	484b      	ldr	r0, [pc, #300]	; (7b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    79fe:	1f00      	subs	r0, r0, #4
    7a00:	f004 fa7c 	bl	befc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7a04:	f104 0020 	add.w	r0, r4, #32
    7a08:	4607      	mov	r7, r0
    7a0a:	f007 fb94 	bl	f136 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7a0e:	4638      	mov	r0, r7
    7a10:	f007 fb56 	bl	f0c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7a14:	4601      	mov	r1, r0
    7a16:	4620      	mov	r0, r4
    7a18:	f007 fb15 	bl	f046 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    7a1c:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7a20:	f004 f982 	bl	bd28 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7a24:	7921      	ldrb	r1, [r4, #4]
    7a26:	2000      	movs	r0, #0
    7a28:	f003 ffa0 	bl	b96c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7a2c:	60a8      	str	r0, [r5, #8]
    7a2e:	b140      	cbz	r0, 7a42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9a>
    7a30:	7ea0      	ldrb	r0, [r4, #26]
    7a32:	e000      	b.n	7a36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7a34:	e001      	b.n	7a3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7a36:	b960      	cbnz	r0, 7a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7a38:	e006      	b.n	7a48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    7a3a:	200c      	movs	r0, #12
    7a3c:	b00a      	add	sp, #40	; 0x28
    7a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a42:	2001      	movs	r0, #1
    7a44:	7028      	strb	r0, [r5, #0]
    7a46:	e06c      	b.n	7b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7a48:	7e20      	ldrb	r0, [r4, #24]
    7a4a:	b910      	cbnz	r0, 7a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7a4c:	78a0      	ldrb	r0, [r4, #2]
    7a4e:	0740      	lsls	r0, r0, #29
    7a50:	d529      	bpl.n	7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7a52:	f004 ffeb 	bl	ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7a56:	4682      	mov	sl, r0
    7a58:	4651      	mov	r1, sl
    7a5a:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7a5c:	f7fa fdc2 	bl	25e4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7a60:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 7b38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>
    7a64:	4607      	mov	r7, r0
    7a66:	fb90 f1f8 	sdiv	r1, r0, r8
    7a6a:	fb08 7011 	mls	r0, r8, r1, r7
    7a6e:	4241      	negs	r1, r0
    7a70:	4650      	mov	r0, sl
    7a72:	f7fa fd85 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7a76:	6460      	str	r0, [r4, #68]	; 0x44
    7a78:	fb97 f0f8 	sdiv	r0, r7, r8
    7a7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7a7e:	4408      	add	r0, r1
    7a80:	6420      	str	r0, [r4, #64]	; 0x40
    7a82:	f7fe fee9 	bl	6858 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7a86:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7a88:	4288      	cmp	r0, r1
    7a8a:	d80c      	bhi.n	7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7a8c:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7a90:	2101      	movs	r1, #1
    7a92:	4620      	mov	r0, r4
    7a94:	f007 fa9b 	bl	efce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    7a98:	78a0      	ldrb	r0, [r4, #2]
    7a9a:	0740      	lsls	r0, r0, #29
    7a9c:	d503      	bpl.n	7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7a9e:	2101      	movs	r1, #1
    7aa0:	4620      	mov	r0, r4
    7aa2:	f000 faaf 	bl	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7aa6:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7aaa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7aac:	f006 fa89 	bl	dfc2 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7ab0:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7ab4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7ab6:	f006 fa87 	bl	dfc8 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7aba:	f7fe ff33 	bl	6924 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7abe:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7ac2:	1cc0      	adds	r0, r0, #3
    7ac4:	f006 fb85 	bl	e1d2 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7ac8:	73a8      	strb	r0, [r5, #14]
    7aca:	78a0      	ldrb	r0, [r4, #2]
    7acc:	07c0      	lsls	r0, r0, #31
    7ace:	d028      	beq.n	7b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7ad0:	a903      	add	r1, sp, #12
    7ad2:	2000      	movs	r0, #0
    7ad4:	f006 f94e 	bl	dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7ad8:	b120      	cbz	r0, 7ae4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    7ada:	f640 11b9 	movw	r1, #2489	; 0x9b9
    7ade:	202d      	movs	r0, #45	; 0x2d
    7ae0:	f7fd f952 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ae4:	20ff      	movs	r0, #255	; 0xff
    7ae6:	73e8      	strb	r0, [r5, #15]
    7ae8:	69e6      	ldr	r6, [r4, #28]
    7aea:	f106 070a 	add.w	r7, r6, #10
    7aee:	e013      	b.n	7b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7af0:	9c05      	ldr	r4, [sp, #20]
    7af2:	42b4      	cmp	r4, r6
    7af4:	d010      	beq.n	7b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7af6:	7a72      	ldrb	r2, [r6, #9]
    7af8:	7a60      	ldrb	r0, [r4, #9]
    7afa:	463b      	mov	r3, r7
    7afc:	f104 010a 	add.w	r1, r4, #10
    7b00:	f006 faed 	bl	e0de <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7b04:	b140      	cbz	r0, 7b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7b06:	78a0      	ldrb	r0, [r4, #2]
    7b08:	73e8      	strb	r0, [r5, #15]
    7b0a:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7b0e:	6128      	str	r0, [r5, #16]
    7b10:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    7b14:	82a8      	strh	r0, [r5, #20]
    7b16:	e004      	b.n	7b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7b18:	a803      	add	r0, sp, #12
    7b1a:	f7fd fb6d 	bl	51f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7b1e:	2800      	cmp	r0, #0
    7b20:	d0e6      	beq.n	7af0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x148>
    7b22:	2000      	movs	r0, #0
    7b24:	e78a      	b.n	7a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    7b26:	0000      	.short	0x0000
    7b28:	20001130 	.word	0x20001130
    7b2c:	00008118 	.word	0x00008118
    7b30:	20000114 	.word	0x20000114
    7b34:	8e89bed6 	.word	0x8e89bed6
    7b38:	000f4240 	.word	0x000f4240
    7b3c:	b510      	push	{r4, lr}
    7b3e:	4604      	mov	r4, r0
    7b40:	f7ff ff32 	bl	79a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7b44:	2800      	cmp	r0, #0
    7b46:	d108      	bne.n	7b5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7b48:	4804      	ldr	r0, [pc, #16]	; (7b5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7b4a:	7800      	ldrb	r0, [r0, #0]
    7b4c:	2801      	cmp	r0, #1
    7b4e:	d003      	beq.n	7b58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7b50:	2100      	movs	r1, #0
    7b52:	4620      	mov	r0, r4
    7b54:	f7ff fda8 	bl	76a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7b58:	2000      	movs	r0, #0
    7b5a:	bd10      	pop	{r4, pc}
    7b5c:	20001130 	.word	0x20001130
    7b60:	480a      	ldr	r0, [pc, #40]	; (7b8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    7b62:	b510      	push	{r4, lr}
    7b64:	490a      	ldr	r1, [pc, #40]	; (7b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    7b66:	6804      	ldr	r4, [r0, #0]
    7b68:	7808      	ldrb	r0, [r1, #0]
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d00d      	beq.n	7b8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7b6e:	7808      	ldrb	r0, [r1, #0]
    7b70:	2802      	cmp	r0, #2
    7b72:	d002      	beq.n	7b7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    7b74:	7808      	ldrb	r0, [r1, #0]
    7b76:	2803      	cmp	r0, #3
    7b78:	d102      	bne.n	7b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7b7a:	4620      	mov	r0, r4
    7b7c:	f7ff ff02 	bl	7984 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7b80:	4620      	mov	r0, r4
    7b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b86:	f000 b907 	b.w	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7b8a:	bd10      	pop	{r4, pc}
    7b8c:	20000114 	.word	0x20000114
    7b90:	20001130 	.word	0x20001130
    7b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b98:	4604      	mov	r4, r0
    7b9a:	4827      	ldr	r0, [pc, #156]	; (7c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7b9c:	460d      	mov	r5, r1
    7b9e:	6840      	ldr	r0, [r0, #4]
    7ba0:	f004 f8e4 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ba4:	4e25      	ldr	r6, [pc, #148]	; (7c3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    7ba6:	2004      	movs	r0, #4
    7ba8:	7030      	strb	r0, [r6, #0]
    7baa:	b325      	cbz	r5, 7bf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7bac:	8860      	ldrh	r0, [r4, #2]
    7bae:	2810      	cmp	r0, #16
    7bb0:	d02a      	beq.n	7c08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    7bb2:	f104 0020 	add.w	r0, r4, #32
    7bb6:	4680      	mov	r8, r0
    7bb8:	68b5      	ldr	r5, [r6, #8]
    7bba:	f007 fa75 	bl	f0a8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7bbe:	4607      	mov	r7, r0
    7bc0:	4640      	mov	r0, r8
    7bc2:	f007 fa9a 	bl	f0fa <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7bc6:	1a38      	subs	r0, r7, r0
    7bc8:	1e40      	subs	r0, r0, #1
    7bca:	b2c0      	uxtb	r0, r0
    7bcc:	8861      	ldrh	r1, [r4, #2]
    7bce:	2228      	movs	r2, #40	; 0x28
    7bd0:	f000 fade 	bl	8190 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7bd4:	4405      	add	r5, r0
    7bd6:	78a0      	ldrb	r0, [r4, #2]
    7bd8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7bdc:	b130      	cbz	r0, 7bec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    7bde:	6870      	ldr	r0, [r6, #4]
    7be0:	4405      	add	r5, r0
    7be2:	f007 fae3 	bl	f1ac <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7be6:	4428      	add	r0, r5
    7be8:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7bec:	7922      	ldrb	r2, [r4, #4]
    7bee:	4629      	mov	r1, r5
    7bf0:	2000      	movs	r0, #0
    7bf2:	f004 f8d1 	bl	bd98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7bf6:	8860      	ldrh	r0, [r4, #2]
    7bf8:	2813      	cmp	r0, #19
    7bfa:	d013      	beq.n	7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7bfc:	dc09      	bgt.n	7c12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    7bfe:	2810      	cmp	r0, #16
    7c00:	d017      	beq.n	7c32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    7c02:	2812      	cmp	r0, #18
    7c04:	d109      	bne.n	7c1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7c06:	e00d      	b.n	7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c08:	7921      	ldrb	r1, [r4, #4]
    7c0a:	2000      	movs	r0, #0
    7c0c:	f003 fe62 	bl	b8d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7c10:	e7f1      	b.n	7bf6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7c12:	2815      	cmp	r0, #21
    7c14:	d006      	beq.n	7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c16:	281d      	cmp	r0, #29
    7c18:	d004      	beq.n	7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c1a:	f640 5173 	movw	r1, #3443	; 0xd73
    7c1e:	202d      	movs	r0, #45	; 0x2d
    7c20:	f7fd f8b2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c24:	7922      	ldrb	r2, [r4, #4]
    7c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c2a:	2101      	movs	r1, #1
    7c2c:	2000      	movs	r0, #0
    7c2e:	f004 b929 	b.w	be84 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c36:	0000      	.short	0x0000
    7c38:	20000114 	.word	0x20000114
    7c3c:	20001130 	.word	0x20001130
    7c40:	b510      	push	{r4, lr}
    7c42:	4604      	mov	r4, r0
    7c44:	7800      	ldrb	r0, [r0, #0]
    7c46:	460b      	mov	r3, r1
    7c48:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    7c4c:	29ff      	cmp	r1, #255	; 0xff
    7c4e:	d010      	beq.n	7c72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7c50:	f104 0297 	add.w	r2, r4, #151	; 0x97
    7c54:	1e51      	subs	r1, r2, #1
    7c56:	4618      	mov	r0, r3
    7c58:	f7fe fd7c 	bl	6754 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7c5c:	b130      	cbz	r0, 7c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7c5e:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7c62:	f040 0002 	orr.w	r0, r0, #2
    7c66:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    7c6a:	e011      	b.n	7c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7c6c:	f640 71af 	movw	r1, #4015	; 0xfaf
    7c70:	e020      	b.n	7cb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    7c72:	4812      	ldr	r0, [pc, #72]	; (7cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    7c74:	6840      	ldr	r0, [r0, #4]
    7c76:	7801      	ldrb	r1, [r0, #0]
    7c78:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7c7c:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7c80:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7c84:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    7c88:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7c8c:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    7c90:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7c94:	287f      	cmp	r0, #127	; 0x7f
    7c96:	d00b      	beq.n	7cb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x308>
    7c98:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7c9c:	207f      	movs	r0, #127	; 0x7f
    7c9e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7ca2:	347e      	adds	r4, #126	; 0x7e
    7ca4:	20ff      	movs	r0, #255	; 0xff
    7ca6:	75a0      	strb	r0, [r4, #22]
    7ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cac:	f7ff b9a2 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7cb0:	f640 6125 	movw	r1, #3621	; 0xe25
    7cb4:	202d      	movs	r0, #45	; 0x2d
    7cb6:	f7fd f867 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cba:	0000      	.short	0x0000
    7cbc:	20000114 	.word	0x20000114
    7cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cc4:	4690      	mov	r8, r2
    7cc6:	460e      	mov	r6, r1
    7cc8:	4604      	mov	r4, r0
    7cca:	2903      	cmp	r1, #3
    7ccc:	d004      	beq.n	7cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7cce:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7cd2:	b108      	cbz	r0, 7cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7cd4:	2001      	movs	r0, #1
    7cd6:	e000      	b.n	7cda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7cd8:	2000      	movs	r0, #0
    7cda:	4681      	mov	r9, r0
    7cdc:	f003 fda4 	bl	b828 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7ce0:	4605      	mov	r5, r0
    7ce2:	2e03      	cmp	r6, #3
    7ce4:	d003      	beq.n	7cee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    7ce6:	2701      	movs	r7, #1
    7ce8:	2e05      	cmp	r6, #5
    7cea:	d005      	beq.n	7cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    7cec:	e008      	b.n	7d00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    7cee:	78a0      	ldrb	r0, [r4, #2]
    7cf0:	2702      	movs	r7, #2
    7cf2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7cf6:	e001      	b.n	7cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    7cf8:	78a0      	ldrb	r0, [r4, #2]
    7cfa:	07c0      	lsls	r0, r0, #31
    7cfc:	2800      	cmp	r0, #0
    7cfe:	d042      	beq.n	7d86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7d00:	f1b9 0f00 	cmp.w	r9, #0
    7d04:	d13e      	bne.n	7d84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7d06:	4822      	ldr	r0, [pc, #136]	; (7d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    7d08:	7b80      	ldrb	r0, [r0, #14]
    7d0a:	b140      	cbz	r0, 7d1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7d0c:	f006 fa64 	bl	e1d8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7d10:	f888 0000 	strb.w	r0, [r8]
    7d14:	28ff      	cmp	r0, #255	; 0xff
    7d16:	d002      	beq.n	7d1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7d18:	f7fe fd36 	bl	6788 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7d1c:	4305      	orrs	r5, r0
    7d1e:	4e1d      	ldr	r6, [pc, #116]	; (7d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    7d20:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7d24:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7d28:	6871      	ldr	r1, [r6, #4]
    7d2a:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d2e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d32:	f006 f9d4 	bl	e0de <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7d36:	f898 1000 	ldrb.w	r1, [r8]
    7d3a:	29ff      	cmp	r1, #255	; 0xff
    7d3c:	d004      	beq.n	7d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7d3e:	b990      	cbnz	r0, 7d66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7d40:	7e60      	ldrb	r0, [r4, #25]
    7d42:	4288      	cmp	r0, r1
    7d44:	d00f      	beq.n	7d66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7d46:	e008      	b.n	7d5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7d48:	b138      	cbz	r0, 7d5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7d4a:	6871      	ldr	r1, [r6, #4]
    7d4c:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d50:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d54:	f007 f8f8 	bl	ef48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7d58:	b128      	cbz	r0, 7d66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7d5a:	2000      	movs	r0, #0
    7d5c:	78a1      	ldrb	r1, [r4, #2]
    7d5e:	0749      	lsls	r1, r1, #29
    7d60:	d503      	bpl.n	7d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    7d62:	b990      	cbnz	r0, 7d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7d64:	e00e      	b.n	7d84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7d66:	2001      	movs	r0, #1
    7d68:	e7f8      	b.n	7d5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    7d6a:	b975      	cbnz	r5, 7d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7d6c:	7be0      	ldrb	r0, [r4, #15]
    7d6e:	b108      	cbz	r0, 7d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7d70:	42b8      	cmp	r0, r7
    7d72:	d107      	bne.n	7d84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7d74:	6871      	ldr	r1, [r6, #4]
    7d76:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d7e:	f007 f8e3 	bl	ef48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7d82:	b110      	cbz	r0, 7d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7d84:	2000      	movs	r0, #0
    7d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d8a:	2001      	movs	r0, #1
    7d8c:	e7fb      	b.n	7d86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7d8e:	0000      	.short	0x0000
    7d90:	20001130 	.word	0x20001130
    7d94:	20000114 	.word	0x20000114
    7d98:	b570      	push	{r4, r5, r6, lr}
    7d9a:	4604      	mov	r4, r0
    7d9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7d9e:	4d13      	ldr	r5, [pc, #76]	; (7dec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>)
    7da0:	1c40      	adds	r0, r0, #1
    7da2:	62a0      	str	r0, [r4, #40]	; 0x28
    7da4:	7ba8      	ldrb	r0, [r5, #14]
    7da6:	2600      	movs	r6, #0
    7da8:	b120      	cbz	r0, 7db4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    7daa:	f003 fd23 	bl	b7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7dae:	f003 fb47 	bl	b440 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7db2:	73ae      	strb	r6, [r5, #14]
    7db4:	702e      	strb	r6, [r5, #0]
    7db6:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7dba:	b108      	cbz	r0, 7dc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    7dbc:	2101      	movs	r1, #1
    7dbe:	e00f      	b.n	7de0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    7dc0:	7b60      	ldrb	r0, [r4, #13]
    7dc2:	b160      	cbz	r0, 7dde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    7dc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7dc6:	4288      	cmp	r0, r1
    7dc8:	d809      	bhi.n	7dde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    7dca:	2101      	movs	r1, #1
    7dcc:	4620      	mov	r0, r4
    7dce:	f007 fa14 	bl	f1fa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7dd2:	78a0      	ldrb	r0, [r4, #2]
    7dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7dd8:	07c0      	lsls	r0, r0, #31
    7dda:	f7ff b90b 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7dde:	2100      	movs	r1, #0
    7de0:	4620      	mov	r0, r4
    7de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7de6:	f007 ba08 	b.w	f1fa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7dea:	0000      	.short	0x0000
    7dec:	20001130 	.word	0x20001130
    7df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7df4:	4604      	mov	r4, r0
    7df6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7dfa:	4617      	mov	r7, r2
    7dfc:	460d      	mov	r5, r1
    7dfe:	f88d 0000 	strb.w	r0, [sp]
    7e02:	9800      	ldr	r0, [sp, #0]
    7e04:	9000      	str	r0, [sp, #0]
    7e06:	f89d 0000 	ldrb.w	r0, [sp]
    7e0a:	b110      	cbz	r0, 7e12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x46a>
    7e0c:	f640 4124 	movw	r1, #3108	; 0xc24
    7e10:	e054      	b.n	7ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    7e12:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7e16:	2600      	movs	r6, #0
    7e18:	8828      	ldrh	r0, [r5, #0]
    7e1a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d15c      	bne.n	7edc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>
    7e22:	6928      	ldr	r0, [r5, #16]
    7e24:	f006 fa36 	bl	e294 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7e28:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7e2c:	8b28      	ldrh	r0, [r5, #24]
    7e2e:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    7e32:	8b68      	ldrh	r0, [r5, #26]
    7e34:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    7e38:	f895 0185 	ldrb.w	r0, [r5, #389]	; 0x185
    7e3c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    7e40:	7e21      	ldrb	r1, [r4, #24]
    7e42:	f104 0849 	add.w	r8, r4, #73	; 0x49
    7e46:	b129      	cbz	r1, 7e54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>
    7e48:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7e4c:	4641      	mov	r1, r8
    7e4e:	f006 ff88 	bl	ed62 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7e52:	b940      	cbnz	r0, 7e66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4be>
    7e54:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7e58:	b170      	cbz	r0, 7e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    7e5a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7e5e:	4641      	mov	r1, r8
    7e60:	f006 ff76 	bl	ed50 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7e64:	b140      	cbz	r0, 7e78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    7e66:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7e6a:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    7e6e:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7e72:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    7e76:	e003      	b.n	7e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
    7e78:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    7e7c:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    7e80:	4817      	ldr	r0, [pc, #92]	; (7ee0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x538>)
    7e82:	2fff      	cmp	r7, #255	; 0xff
    7e84:	6840      	ldr	r0, [r0, #4]
    7e86:	7801      	ldrb	r1, [r0, #0]
    7e88:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e8c:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7e90:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7e94:	d015      	beq.n	7ec2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51a>
    7e96:	67a1      	str	r1, [r4, #120]	; 0x78
    7e98:	8880      	ldrh	r0, [r0, #4]
    7e9a:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7e9e:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7ea2:	1e51      	subs	r1, r2, #1
    7ea4:	4638      	mov	r0, r7
    7ea6:	f7fe fc55 	bl	6754 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7eaa:	b128      	cbz	r0, 7eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
    7eac:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7eb0:	f040 0002 	orr.w	r0, r0, #2
    7eb4:	7020      	strb	r0, [r4, #0]
    7eb6:	e00a      	b.n	7ece <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    7eb8:	f640 4145 	movw	r1, #3141	; 0xc45
    7ebc:	202d      	movs	r0, #45	; 0x2d
    7ebe:	f7fc ff63 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ec2:	f844 1f6c 	str.w	r1, [r4, #108]!
    7ec6:	8880      	ldrh	r0, [r0, #4]
    7ec8:	80a0      	strh	r0, [r4, #4]
    7eca:	60e6      	str	r6, [r4, #12]
    7ecc:	8226      	strh	r6, [r4, #16]
    7ece:	8828      	ldrh	r0, [r5, #0]
    7ed0:	f7fd fb74 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7ed4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ed8:	f005 be29 	b.w	db2e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ee0:	20000114 	.word	0x20000114
    7ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ee8:	27ff      	movs	r7, #255	; 0xff
    7eea:	4604      	mov	r4, r0
    7eec:	2601      	movs	r6, #1
    7eee:	f88d 7000 	strb.w	r7, [sp]
    7ef2:	466a      	mov	r2, sp
    7ef4:	2105      	movs	r1, #5
    7ef6:	f7ff fee3 	bl	7cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7efa:	b170      	cbz	r0, 7f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x572>
    7efc:	4d22      	ldr	r5, [pc, #136]	; (7f88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7efe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    7f02:	6869      	ldr	r1, [r5, #4]
    7f04:	f898 200f 	ldrb.w	r2, [r8, #15]
    7f08:	f108 0310 	add.w	r3, r8, #16
    7f0c:	f811 0b03 	ldrb.w	r0, [r1], #3
    7f10:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f14:	f006 f8e3 	bl	e0de <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7f18:	b118      	cbz	r0, 7f22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57a>
    7f1a:	2600      	movs	r6, #0
    7f1c:	4630      	mov	r0, r6
    7f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f22:	686a      	ldr	r2, [r5, #4]
    7f24:	69e0      	ldr	r0, [r4, #28]
    7f26:	7812      	ldrb	r2, [r2, #0]
    7f28:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7f2c:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7f30:	4011      	ands	r1, r2
    7f32:	7001      	strb	r1, [r0, #0]
    7f34:	2201      	movs	r2, #1
    7f36:	4620      	mov	r0, r4
    7f38:	69e1      	ldr	r1, [r4, #28]
    7f3a:	f000 f891 	bl	8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
    7f3e:	2300      	movs	r3, #0
    7f40:	f89d 2000 	ldrb.w	r2, [sp]
    7f44:	4620      	mov	r0, r4
    7f46:	69e1      	ldr	r1, [r4, #28]
    7f48:	f7ff ff52 	bl	7df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    7f4c:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    7f50:	f7ff f850 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7f54:	2100      	movs	r1, #0
    7f56:	f888 1000 	strb.w	r1, [r8]
    7f5a:	460a      	mov	r2, r1
    7f5c:	4621      	mov	r1, r4
    7f5e:	69e0      	ldr	r0, [r4, #28]
    7f60:	f000 fa58 	bl	8414 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7f64:	6868      	ldr	r0, [r5, #4]
    7f66:	69e1      	ldr	r1, [r4, #28]
    7f68:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7f6c:	f841 2f03 	str.w	r2, [r1, #3]!
    7f70:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7f74:	808a      	strh	r2, [r1, #4]
    7f76:	7800      	ldrb	r0, [r0, #0]
    7f78:	69e1      	ldr	r1, [r4, #28]
    7f7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f7e:	7088      	strb	r0, [r1, #2]
    7f80:	e7cc      	b.n	7f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    7f82:	0000      	.short	0x0000
    7f84:	20001130 	.word	0x20001130
    7f88:	20000114 	.word	0x20000114
    7f8c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7f90:	4604      	mov	r4, r0
    7f92:	20ff      	movs	r0, #255	; 0xff
    7f94:	f88d 0000 	strb.w	r0, [sp]
    7f98:	2501      	movs	r5, #1
    7f9a:	466a      	mov	r2, sp
    7f9c:	2103      	movs	r1, #3
    7f9e:	4620      	mov	r0, r4
    7fa0:	f7ff fe8e 	bl	7cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7fa4:	b328      	cbz	r0, 7ff2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64a>
    7fa6:	7b20      	ldrb	r0, [r4, #12]
    7fa8:	2700      	movs	r7, #0
    7faa:	b168      	cbz	r0, 7fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7fac:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7fb0:	f88d 0004 	strb.w	r0, [sp, #4]
    7fb4:	9801      	ldr	r0, [sp, #4]
    7fb6:	9001      	str	r0, [sp, #4]
    7fb8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7fbc:	b920      	cbnz	r0, 7fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7fbe:	f89d 1000 	ldrb.w	r1, [sp]
    7fc2:	4620      	mov	r0, r4
    7fc4:	f7ff fe3c 	bl	7c40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    7fc8:	4e0c      	ldr	r6, [pc, #48]	; (7ffc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7fca:	2104      	movs	r1, #4
    7fcc:	6870      	ldr	r0, [r6, #4]
    7fce:	8007      	strh	r7, [r0, #0]
    7fd0:	f006 fc84 	bl	e8dc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7fd4:	4620      	mov	r0, r4
    7fd6:	f000 f88b 	bl	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    7fda:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7fdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7fde:	6870      	ldr	r0, [r6, #4]
    7fe0:	f006 fcb3 	bl	e94a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7fe4:	4906      	ldr	r1, [pc, #24]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7fe6:	2005      	movs	r0, #5
    7fe8:	7008      	strb	r0, [r1, #0]
    7fea:	6870      	ldr	r0, [r6, #4]
    7fec:	f003 febe 	bl	bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ff0:	e000      	b.n	7ff4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    7ff2:	2500      	movs	r5, #0
    7ff4:	4628      	mov	r0, r5
    7ff6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    7ffa:	0000      	.short	0x0000
    7ffc:	20000114 	.word	0x20000114
    8000:	20001130 	.word	0x20001130
    8004:	b570      	push	{r4, r5, r6, lr}
    8006:	4604      	mov	r4, r0
    8008:	460e      	mov	r6, r1
    800a:	7e40      	ldrb	r0, [r0, #25]
    800c:	f7fe fb70 	bl	66f0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    8010:	0005      	movs	r5, r0
    8012:	d019      	beq.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    8014:	2110      	movs	r1, #16
    8016:	f006 fac9 	bl	e5ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    801a:	2800      	cmp	r0, #0
    801c:	d114      	bne.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
    801e:	2001      	movs	r0, #1
    8020:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    8024:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8028:	4632      	mov	r2, r6
    802a:	460c      	mov	r4, r1
    802c:	4628      	mov	r0, r5
    802e:	f006 f875 	bl	e11c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8032:	4621      	mov	r1, r4
    8034:	4c05      	ldr	r4, [pc, #20]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    8036:	6860      	ldr	r0, [r4, #4]
    8038:	f006 fc6b 	bl	e912 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    803c:	6860      	ldr	r0, [r4, #4]
    803e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8042:	2101      	movs	r1, #1
    8044:	f006 bc6b 	b.w	e91e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8048:	bd70      	pop	{r4, r5, r6, pc}
    804a:	0000      	.short	0x0000
    804c:	20000114 	.word	0x20000114
    8050:	4802      	ldr	r0, [pc, #8]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    8052:	2101      	movs	r1, #1
    8054:	6800      	ldr	r0, [r0, #0]
    8056:	f7ff bb27 	b.w	76a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    805a:	0000      	.short	0x0000
    805c:	20000114 	.word	0x20000114
    8060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8064:	4e21      	ldr	r6, [pc, #132]	; (80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>)
    8066:	4680      	mov	r8, r0
    8068:	460c      	mov	r4, r1
    806a:	6870      	ldr	r0, [r6, #4]
    806c:	4615      	mov	r5, r2
    806e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    8072:	6161      	str	r1, [r4, #20]
    8074:	8881      	ldrh	r1, [r0, #4]
    8076:	83a1      	strh	r1, [r4, #28]
    8078:	7981      	ldrb	r1, [r0, #6]
    807a:	77a1      	strb	r1, [r4, #30]
    807c:	8940      	ldrh	r0, [r0, #10]
    807e:	f006 f905 	bl	e28c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8082:	4607      	mov	r7, r0
    8084:	6120      	str	r0, [r4, #16]
    8086:	6870      	ldr	r0, [r6, #4]
    8088:	4639      	mov	r1, r7
    808a:	7d80      	ldrb	r0, [r0, #22]
    808c:	f006 fa89 	bl	e5a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8090:	8420      	strh	r0, [r4, #32]
    8092:	6870      	ldr	r0, [r6, #4]
    8094:	4639      	mov	r1, r7
    8096:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    809a:	f006 fa7e 	bl	e59a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    809e:	6260      	str	r0, [r4, #36]	; 0x24
    80a0:	6870      	ldr	r0, [r6, #4]
    80a2:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    80a6:	8321      	strh	r1, [r4, #24]
    80a8:	8841      	ldrh	r1, [r0, #2]
    80aa:	8361      	strh	r1, [r4, #26]
    80ac:	6841      	ldr	r1, [r0, #4]
    80ae:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    80b2:	7a01      	ldrb	r1, [r0, #8]
    80b4:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    80b8:	7a41      	ldrb	r1, [r0, #9]
    80ba:	f001 011f 	and.w	r1, r1, #31
    80be:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    80c2:	7a40      	ldrb	r0, [r0, #9]
    80c4:	0940      	lsrs	r0, r0, #5
    80c6:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
    80ca:	f104 0066 	add.w	r0, r4, #102	; 0x66
    80ce:	7205      	strb	r5, [r0, #8]
    80d0:	7245      	strb	r5, [r0, #9]
    80d2:	21ff      	movs	r1, #255	; 0xff
    80d4:	7281      	strb	r1, [r0, #10]
    80d6:	2100      	movs	r1, #0
    80d8:	3836      	subs	r0, #54	; 0x36
    80da:	f006 fdac 	bl	ec36 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    80de:	f898 000e 	ldrb.w	r0, [r8, #14]
    80e2:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    80e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80ea:	0000      	.short	0x0000
    80ec:	20000114 	.word	0x20000114
    80f0:	b570      	push	{r4, r5, r6, lr}
    80f2:	4d07      	ldr	r5, [pc, #28]	; (8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    80f4:	4604      	mov	r4, r0
    80f6:	f100 0149 	add.w	r1, r0, #73	; 0x49
    80fa:	6868      	ldr	r0, [r5, #4]
    80fc:	f006 fc16 	bl	e92c <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8100:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8104:	6868      	ldr	r0, [r5, #4]
    8106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    810a:	f006 bc15 	b.w	e938 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    810e:	0000      	.short	0x0000
    8110:	20000114 	.word	0x20000114
    8114:	00555555 	.word	0x00555555
    8118:	00007931 	.word	0x00007931
    811c:	000077bd 	.word	0x000077bd
    8120:	000078ad 	.word	0x000078ad
    8124:	00000000 	.word	0x00000000
    8128:	00007885 	.word	0x00007885
    812c:	000078dd 	.word	0x000078dd
    8130:	0000ef6f 	.word	0x0000ef6f
    8134:	0000ef75 	.word	0x0000ef75
    8138:	00007b3d 	.word	0x00007b3d
    813c:	00007b61 	.word	0x00007b61
    8140:	00008051 	.word	0x00008051
    8144:	00008134 	.word	0x00008134
    8148:	0000812c 	.word	0x0000812c
    814c:	00008128 	.word	0x00008128

00008150 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8150:	b510      	push	{r4, lr}
    8152:	1e42      	subs	r2, r0, #1
    8154:	2a02      	cmp	r2, #2
    8156:	d901      	bls.n	815c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8158:	21ca      	movs	r1, #202	; 0xca
    815a:	e009      	b.n	8170 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    815c:	1e40      	subs	r0, r0, #1
    815e:	2910      	cmp	r1, #16
    8160:	d009      	beq.n	8176 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    8162:	2912      	cmp	r1, #18
    8164:	d00c      	beq.n	8180 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8166:	2913      	cmp	r1, #19
    8168:	d00a      	beq.n	8180 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    816a:	2915      	cmp	r1, #21
    816c:	d005      	beq.n	817a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    816e:	21d8      	movs	r1, #216	; 0xd8
    8170:	202f      	movs	r0, #47	; 0x2f
    8172:	f7fc fe09 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8176:	4905      	ldr	r1, [pc, #20]	; (818c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8178:	e004      	b.n	8184 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    817a:	4904      	ldr	r1, [pc, #16]	; (818c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    817c:	1d89      	adds	r1, r1, #6
    817e:	e001      	b.n	8184 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8180:	4902      	ldr	r1, [pc, #8]	; (818c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8182:	1f89      	subs	r1, r1, #6
    8184:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8188:	bd10      	pop	{r4, pc}
    818a:	0000      	.short	0x0000
    818c:	0000f1c4 	.word	0x0000f1c4

00008190 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8190:	1e42      	subs	r2, r0, #1
    8192:	b510      	push	{r4, lr}
    8194:	b2d2      	uxtb	r2, r2
    8196:	2a01      	cmp	r2, #1
    8198:	d903      	bls.n	81a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    819a:	291d      	cmp	r1, #29
    819c:	d001      	beq.n	81a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    819e:	21ee      	movs	r1, #238	; 0xee
    81a0:	e00d      	b.n	81be <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    81a2:	2913      	cmp	r1, #19
    81a4:	d013      	beq.n	81ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    81a6:	dc04      	bgt.n	81b2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    81a8:	2910      	cmp	r1, #16
    81aa:	d00b      	beq.n	81c4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    81ac:	2912      	cmp	r1, #18
    81ae:	d104      	bne.n	81ba <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    81b0:	e00d      	b.n	81ce <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    81b2:	2915      	cmp	r1, #21
    81b4:	d008      	beq.n	81c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    81b6:	291d      	cmp	r1, #29
    81b8:	d00e      	beq.n	81d8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    81ba:	f44f 7181 	mov.w	r1, #258	; 0x102
    81be:	202f      	movs	r0, #47	; 0x2f
    81c0:	f7fc fde2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81c4:	4807      	ldr	r0, [pc, #28]	; (81e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    81c6:	e004      	b.n	81d2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    81c8:	4806      	ldr	r0, [pc, #24]	; (81e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    81ca:	3008      	adds	r0, #8
    81cc:	e001      	b.n	81d2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    81ce:	4805      	ldr	r0, [pc, #20]	; (81e4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    81d0:	1d00      	adds	r0, r0, #4
    81d2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    81d6:	bd10      	pop	{r4, pc}
    81d8:	f240 315a 	movw	r1, #858	; 0x35a
    81dc:	fb10 f001 	smulbb	r0, r0, r1
    81e0:	bd10      	pop	{r4, pc}
    81e2:	0000      	.short	0x0000
    81e4:	0000f1b2 	.word	0x0000f1b2

000081e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    81e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81ec:	4604      	mov	r4, r0
    81ee:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    81f2:	4615      	mov	r5, r2
    81f4:	460f      	mov	r7, r1
    81f6:	2800      	cmp	r0, #0
    81f8:	d157      	bne.n	82aa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    81fa:	4621      	mov	r1, r4
    81fc:	4841      	ldr	r0, [pc, #260]	; (8304 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    81fe:	f7fb f8bf 	bl	3380 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8202:	4606      	mov	r6, r0
    8204:	2820      	cmp	r0, #32
    8206:	d050      	beq.n	82aa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    8208:	2234      	movs	r2, #52	; 0x34
    820a:	2100      	movs	r1, #0
    820c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    8210:	f004 fdfb 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8214:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    8218:	2601      	movs	r6, #1
    821a:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    821e:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    8222:	b13f      	cbz	r7, 8234 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    8224:	2000      	movs	r0, #0
    8226:	f000 fbfb 	bl	8a20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    822a:	f000 0007 	and.w	r0, r0, #7
    822e:	1c40      	adds	r0, r0, #1
    8230:	f887 0134 	strb.w	r0, [r7, #308]	; 0x134
    8234:	4620      	mov	r0, r4
    8236:	f007 f9a8 	bl	f58a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    823a:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    823e:	2002      	movs	r0, #2
    8240:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    8244:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    8248:	2700      	movs	r7, #0
    824a:	f804 7fb8 	strb.w	r7, [r4, #184]!
    824e:	f7fa fafb 	bl	2848 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8252:	8921      	ldrh	r1, [r4, #8]
    8254:	3cb8      	subs	r4, #184	; 0xb8
    8256:	4288      	cmp	r0, r1
    8258:	d800      	bhi.n	825c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    825a:	4608      	mov	r0, r1
    825c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    8260:	fa1f f880 	uxth.w	r8, r0
    8264:	4620      	mov	r0, r4
    8266:	f006 fe24 	bl	eeb2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    826a:	b308      	cbz	r0, 82b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    826c:	f008 fc1e 	bl	10aac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8270:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8274:	b281      	uxth	r1, r0
    8276:	4628      	mov	r0, r5
    8278:	f004 fc0c 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    827c:	4428      	add	r0, r5
    827e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    8282:	34a4      	adds	r4, #164	; 0xa4
    8284:	f004 fbd2 	bl	ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8288:	4641      	mov	r1, r8
    828a:	f7fa f979 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    828e:	6220      	str	r0, [r4, #32]
    8290:	f804 7c03 	strb.w	r7, [r4, #-3]
    8294:	7126      	strb	r6, [r4, #4]
    8296:	2001      	movs	r0, #1
    8298:	f006 ff84 	bl	f1a4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    829c:	f200 100d 	addw	r0, r0, #269	; 0x10d
    82a0:	1a28      	subs	r0, r5, r0
    82a2:	62a7      	str	r7, [r4, #40]	; 0x28
    82a4:	60a0      	str	r0, [r4, #8]
    82a6:	3ca4      	subs	r4, #164	; 0xa4
    82a8:	e017      	b.n	82da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    82aa:	200c      	movs	r0, #12
    82ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82b0:	4620      	mov	r0, r4
    82b2:	f007 f8bd 	bl	f430 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    82b6:	f844 0fbc 	str.w	r0, [r4, #188]!
    82ba:	f804 6c1b 	strb.w	r6, [r4, #-27]
    82be:	f004 fbb5 	bl	ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    82c2:	4606      	mov	r6, r0
    82c4:	2000      	movs	r0, #0
    82c6:	f007 fa0f 	bl	f6e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    82ca:	eb00 0108 	add.w	r1, r0, r8
    82ce:	4630      	mov	r0, r6
    82d0:	f7fa f956 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    82d4:	6125      	str	r5, [r4, #16]
    82d6:	60a0      	str	r0, [r4, #8]
    82d8:	3cbc      	subs	r4, #188	; 0xbc
    82da:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    82de:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    82e2:	f007 f950 	bl	f586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    82e6:	b138      	cbz	r0, 82f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    82e8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    82ec:	2100      	movs	r1, #0
    82ee:	4620      	mov	r0, r4
    82f0:	f006 fe0b 	bl	ef0a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    82f4:	2000      	movs	r0, #0
    82f6:	e7d9      	b.n	82ac <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    82f8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    82fc:	2030      	movs	r0, #48	; 0x30
    82fe:	f7fc fd43 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8302:	0000      	.short	0x0000
    8304:	0000f6fd 	.word	0x0000f6fd

00008308 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8308:	4808      	ldr	r0, [pc, #32]	; (832c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    830a:	b510      	push	{r4, lr}
    830c:	2100      	movs	r1, #0
    830e:	7001      	strb	r1, [r0, #0]
    8310:	2201      	movs	r2, #1
    8312:	7082      	strb	r2, [r0, #2]
    8314:	7041      	strb	r1, [r0, #1]
    8316:	3018      	adds	r0, #24
    8318:	f006 fd0d 	bl	ed36 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    831c:	4803      	ldr	r0, [pc, #12]	; (832c <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    831e:	3020      	adds	r0, #32
    8320:	f006 fd09 	bl	ed36 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8328:	f006 bfa7 	b.w	f27a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    832c:	20000124 	.word	0x20000124

00008330 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    8330:	4901      	ldr	r1, [pc, #4]	; (8338 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    8332:	7008      	strb	r0, [r1, #0]
    8334:	4770      	bx	lr
    8336:	0000      	.short	0x0000
    8338:	20000124 	.word	0x20000124

0000833c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    833c:	4905      	ldr	r1, [pc, #20]	; (8354 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    833e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8342:	fbb1 f1f2 	udiv	r1, r1, r2
    8346:	b510      	push	{r4, lr}
    8348:	f201 2191 	addw	r1, r1, #657	; 0x291
    834c:	f006 fc8c 	bl	ec68 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8350:	b280      	uxth	r0, r0
    8352:	bd10      	pop	{r4, pc}
    8354:	0001527d 	.word	0x0001527d

00008358 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    835c:	4c10      	ldr	r4, [pc, #64]	; (83a0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    835e:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    8362:	f003 fc0b 	bl	bb7c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8366:	4606      	mov	r6, r0
    8368:	7820      	ldrb	r0, [r4, #0]
    836a:	b128      	cbz	r0, 8378 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    836c:	4632      	mov	r2, r6
    836e:	4639      	mov	r1, r7
    8370:	4628      	mov	r0, r5
    8372:	f005 ff95 	bl	e2a0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8376:	4605      	mov	r5, r0
    8378:	6860      	ldr	r0, [r4, #4]
    837a:	4285      	cmp	r5, r0
    837c:	d005      	beq.n	838a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    837e:	68e1      	ldr	r1, [r4, #12]
    8380:	1a28      	subs	r0, r5, r0
    8382:	4408      	add	r0, r1
    8384:	60e0      	str	r0, [r4, #12]
    8386:	f7fb f903 	bl	3590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    838a:	6065      	str	r5, [r4, #4]
    838c:	42ae      	cmp	r6, r5
    838e:	d801      	bhi.n	8394 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8390:	7860      	ldrb	r0, [r4, #1]
    8392:	b110      	cbz	r0, 839a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8394:	2000      	movs	r0, #0
    8396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    839a:	2001      	movs	r0, #1
    839c:	e7fb      	b.n	8396 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    839e:	0000      	.short	0x0000
    83a0:	20000124 	.word	0x20000124

000083a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    83a4:	b510      	push	{r4, lr}
    83a6:	4604      	mov	r4, r0
    83a8:	2906      	cmp	r1, #6
    83aa:	d22c      	bcs.n	8406 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62>
    83ac:	e8df f001 	tbb	[pc, r1]
    83b0:	0e030b05 	.word	0x0e030b05
    83b4:	260f      	.short	0x260f
    83b6:	2100      	movs	r1, #0
    83b8:	e000      	b.n	83bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    83ba:	2101      	movs	r1, #1
    83bc:	4620      	mov	r0, r4
    83be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83c2:	f000 b8f9 	b.w	85b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    83c6:	2003      	movs	r0, #3
    83c8:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    83cc:	bd10      	pop	{r4, pc}
    83ce:	f003 fbe3 	bl	bb98 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    83d2:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
    83d6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    83da:	f003 fcab 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    83de:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    83e2:	1a09      	subs	r1, r1, r0
    83e4:	480a      	ldr	r0, [pc, #40]	; (8410 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c>)
    83e6:	6842      	ldr	r2, [r0, #4]
    83e8:	440a      	add	r2, r1
    83ea:	6042      	str	r2, [r0, #4]
    83ec:	6882      	ldr	r2, [r0, #8]
    83ee:	4411      	add	r1, r2
    83f0:	6081      	str	r1, [r0, #8]
    83f2:	4620      	mov	r0, r4
    83f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83f8:	f007 b858 	b.w	f4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x204>
    83fc:	4620      	mov	r0, r4
    83fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8402:	f007 b83e 	b.w	f482 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    8406:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    840a:	2030      	movs	r0, #48	; 0x30
    840c:	f7fc fcbc 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8410:	20000124 	.word	0x20000124

00008414 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8414:	b570      	push	{r4, r5, r6, lr}
    8416:	460c      	mov	r4, r1
    8418:	4605      	mov	r5, r0
    841a:	b112      	cbz	r2, 8422 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    841c:	f240 7182 	movw	r1, #1922	; 0x782
    8420:	e010      	b.n	8444 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    8422:	f003 fbab 	bl	bb7c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8426:	4601      	mov	r1, r0
    8428:	2200      	movs	r2, #0
    842a:	4620      	mov	r0, r4
    842c:	f007 f912 	bl	f654 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3ac>
    8430:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    8434:	462a      	mov	r2, r5
    8436:	4905      	ldr	r1, [pc, #20]	; (844c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8438:	f7fa fe62 	bl	3100 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    843c:	2800      	cmp	r0, #0
    843e:	d104      	bne.n	844a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    8440:	f240 716b 	movw	r1, #1899	; 0x76b
    8444:	2030      	movs	r0, #48	; 0x30
    8446:	f7fc fc9f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    844a:	bd70      	pop	{r4, r5, r6, pc}
    844c:	0000f79d 	.word	0x0000f79d
    8450:	b510      	push	{r4, lr}
    8452:	280c      	cmp	r0, #12
    8454:	d304      	bcc.n	8460 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    8456:	f240 3127 	movw	r1, #807	; 0x327
    845a:	2006      	movs	r0, #6
    845c:	f7fc fc94 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8460:	4901      	ldr	r1, [pc, #4]	; (8468 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    8462:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8466:	bd10      	pop	{r4, pc}
    8468:	0000f87e 	.word	0x0000f87e
    846c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    846e:	4c18      	ldr	r4, [pc, #96]	; (84d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8470:	2001      	movs	r0, #1
    8472:	7060      	strb	r0, [r4, #1]
    8474:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8478:	e00b      	b.n	8492 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    847a:	2100      	movs	r1, #0
    847c:	f005 fc70 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8480:	0006      	movs	r6, r0
    8482:	d010      	beq.n	84a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    8484:	f896 0178 	ldrb.w	r0, [r6, #376]	; 0x178
    8488:	f7fa fe6c 	bl	3164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    848c:	4630      	mov	r0, r6
    848e:	f007 f8d4 	bl	f63a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    8492:	4669      	mov	r1, sp
    8494:	2000      	movs	r0, #0
    8496:	f005 fc6d 	bl	dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    849a:	b180      	cbz	r0, 84be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    849c:	f44f 7187 	mov.w	r1, #270	; 0x10e
    84a0:	2030      	movs	r0, #48	; 0x30
    84a2:	f7fc fc71 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84a6:	f44f 7197 	mov.w	r1, #302	; 0x12e
    84aa:	e7f9      	b.n	84a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    84ac:	9802      	ldr	r0, [sp, #8]
    84ae:	b130      	cbz	r0, 84be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    84b0:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    84b4:	b119      	cbz	r1, 84be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    84b6:	8800      	ldrh	r0, [r0, #0]
    84b8:	42a8      	cmp	r0, r5
    84ba:	d1de      	bne.n	847a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    84bc:	e004      	b.n	84c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    84be:	4668      	mov	r0, sp
    84c0:	f7fc fe9a 	bl	51f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    84c4:	2800      	cmp	r0, #0
    84c6:	d0f1      	beq.n	84ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    84c8:	2000      	movs	r0, #0
    84ca:	7060      	strb	r0, [r4, #1]
    84cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    84ce:	0000      	.short	0x0000
    84d0:	20000124 	.word	0x20000124
    84d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84d8:	4604      	mov	r4, r0
    84da:	4836      	ldr	r0, [pc, #216]	; (85b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    84dc:	461e      	mov	r6, r3
    84de:	4690      	mov	r8, r2
    84e0:	7880      	ldrb	r0, [r0, #2]
    84e2:	4689      	mov	r9, r1
    84e4:	2500      	movs	r5, #0
    84e6:	b368      	cbz	r0, 8544 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84e8:	f7fc f8c6 	bl	4678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    84ec:	b350      	cbz	r0, 8544 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84ee:	f8b4 0130 	ldrh.w	r0, [r4, #304]	; 0x130
    84f2:	2802      	cmp	r0, #2
    84f4:	d326      	bcc.n	8544 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84f6:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    84fa:	2802      	cmp	r0, #2
    84fc:	d022      	beq.n	8544 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84fe:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    8502:	b9f8      	cbnz	r0, 8544 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8504:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    8508:	f7ff ffa2 	bl	8450 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    850c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8510:	b281      	uxth	r1, r0
    8512:	8031      	strh	r1, [r6, #0]
    8514:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8518:	2700      	movs	r7, #0
    851a:	2801      	cmp	r0, #1
    851c:	d015      	beq.n	854a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    851e:	6920      	ldr	r0, [r4, #16]
    8520:	f004 fab8 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8524:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    8528:	b280      	uxth	r0, r0
    852a:	4442      	add	r2, r8
    852c:	eba2 0109 	sub.w	r1, r2, r9
    8530:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    8534:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8538:	1a82      	subs	r2, r0, r2
    853a:	fb01 7502 	mla	r5, r1, r2, r7
    853e:	2001      	movs	r0, #1
    8540:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    8544:	4628      	mov	r0, r5
    8546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    854a:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    854e:	2803      	cmp	r0, #3
    8550:	d02c      	beq.n	85ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    8552:	2101      	movs	r1, #1
    8554:	2000      	movs	r0, #0
    8556:	f005 ff5d 	bl	e414 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    855a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    855c:	1847      	adds	r7, r0, r1
    855e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8562:	8831      	ldrh	r1, [r6, #0]
    8564:	34e0      	adds	r4, #224	; 0xe0
    8566:	f004 fa95 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    856a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    856c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    856e:	1a82      	subs	r2, r0, r2
    8570:	fb01 5502 	mla	r5, r1, r2, r5
    8574:	65a0      	str	r0, [r4, #88]	; 0x58
    8576:	8831      	ldrh	r1, [r6, #0]
    8578:	4638      	mov	r0, r7
    857a:	f004 fa8b 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    857e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8580:	66a0      	str	r0, [r4, #104]	; 0x68
    8582:	1a41      	subs	r1, r0, r1
    8584:	440d      	add	r5, r1
    8586:	8831      	ldrh	r1, [r6, #0]
    8588:	f854 0cd0 	ldr.w	r0, [r4, #-208]
    858c:	f004 fa82 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8590:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    8592:	4442      	add	r2, r8
    8594:	eba2 0109 	sub.w	r1, r2, r9
    8598:	6e22      	ldr	r2, [r4, #96]	; 0x60
    859a:	1a89      	subs	r1, r1, r2
    859c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    859e:	1e49      	subs	r1, r1, #1
    85a0:	1a82      	subs	r2, r0, r2
    85a2:	fb01 5502 	mla	r5, r1, r2, r5
    85a6:	66e0      	str	r0, [r4, #108]	; 0x6c
    85a8:	3ce0      	subs	r4, #224	; 0xe0
    85aa:	e7c8      	b.n	853e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    85ac:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    85b0:	e7d3      	b.n	855a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    85b2:	0000      	.short	0x0000
    85b4:	20000124 	.word	0x20000124
    85b8:	b538      	push	{r3, r4, r5, lr}
    85ba:	2500      	movs	r5, #0
    85bc:	4604      	mov	r4, r0
    85be:	2901      	cmp	r1, #1
    85c0:	d102      	bne.n	85c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    85c2:	4811      	ldr	r0, [pc, #68]	; (8608 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    85c4:	7840      	ldrb	r0, [r0, #1]
    85c6:	b178      	cbz	r0, 85e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    85c8:	2004      	movs	r0, #4
    85ca:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    85ce:	bf00      	nop
    85d0:	f006 ff65 	bl	f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    85d4:	f8a4 5176 	strh.w	r5, [r4, #374]	; 0x176
    85d8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    85dc:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    85e0:	f504 749d 	add.w	r4, r4, #314	; 0x13a
    85e4:	77e5      	strb	r5, [r4, #31]
    85e6:	bd38      	pop	{r3, r4, r5, pc}
    85e8:	9500      	str	r5, [sp, #0]
    85ea:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    85ee:	2301      	movs	r3, #1
    85f0:	2200      	movs	r2, #0
    85f2:	4620      	mov	r0, r4
    85f4:	f000 f80a 	bl	860c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    85f8:	2800      	cmp	r0, #0
    85fa:	d0e9      	beq.n	85d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    85fc:	f240 61cd 	movw	r1, #1741	; 0x6cd
    8600:	2030      	movs	r0, #48	; 0x30
    8602:	f7fc fbc1 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8606:	0000      	.short	0x0000
    8608:	20000124 	.word	0x20000124
    860c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8610:	4604      	mov	r4, r0
    8612:	b085      	sub	sp, #20
    8614:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8618:	4699      	mov	r9, r3
    861a:	e9cd 3000 	strd	r3, r0, [sp]
    861e:	460f      	mov	r7, r1
    8620:	f008 fa44 	bl	10aac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8624:	4605      	mov	r5, r0
    8626:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    862a:	f7ff ff11 	bl	8450 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    862e:	4428      	add	r0, r5
    8630:	f8ad 0008 	strh.w	r0, [sp, #8]
    8634:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8638:	280d      	cmp	r0, #13
    863a:	d004      	beq.n	8646 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    863c:	2000      	movs	r0, #0
    863e:	9003      	str	r0, [sp, #12]
    8640:	9807      	ldr	r0, [sp, #28]
    8642:	b110      	cbz	r0, 864a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    8644:	e02e      	b.n	86a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8646:	2001      	movs	r0, #1
    8648:	e7f9      	b.n	863e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    864a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    864e:	2803      	cmp	r0, #3
    8650:	d128      	bne.n	86a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8652:	9803      	ldr	r0, [sp, #12]
    8654:	b330      	cbz	r0, 86a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8656:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    865a:	42b8      	cmp	r0, r7
    865c:	d122      	bne.n	86a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    865e:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8662:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8666:	6920      	ldr	r0, [r4, #16]
    8668:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    866c:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8670:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    8674:	4408      	add	r0, r1
    8676:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    867a:	4620      	mov	r0, r4
    867c:	f007 f91f 	bl	f8be <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8680:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    8684:	6260      	str	r0, [r4, #36]	; 0x24
    8686:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    868a:	8420      	strh	r0, [r4, #32]
    868c:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8690:	6120      	str	r0, [r4, #16]
    8692:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    8696:	8320      	strh	r0, [r4, #24]
    8698:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    869c:	8360      	strh	r0, [r4, #26]
    869e:	2002      	movs	r0, #2
    86a0:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    86a4:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    86a8:	f504 75ae 	add.w	r5, r4, #348	; 0x15c
    86ac:	1a38      	subs	r0, r7, r0
    86ae:	fa0f fa80 	sxth.w	sl, r0
    86b2:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
    86b6:	1a38      	subs	r0, r7, r0
    86b8:	fa0f f880 	sxth.w	r8, r0
    86bc:	f1b8 0f00 	cmp.w	r8, #0
    86c0:	da06      	bge.n	86d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    86c2:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    86c6:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    86ca:	2001      	movs	r0, #1
    86cc:	46d0      	mov	r8, sl
    86ce:	9000      	str	r0, [sp, #0]
    86d0:	ab02      	add	r3, sp, #8
    86d2:	4652      	mov	r2, sl
    86d4:	4641      	mov	r1, r8
    86d6:	4620      	mov	r0, r4
    86d8:	f7ff fefc 	bl	84d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    86dc:	9004      	str	r0, [sp, #16]
    86de:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    86e2:	f8df b338 	ldr.w	fp, [pc, #824]	; 8a1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    86e6:	b140      	cbz	r0, 86fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    86e8:	2801      	cmp	r0, #1
    86ea:	d07d      	beq.n	87e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    86ec:	2802      	cmp	r0, #2
    86ee:	d052      	beq.n	8796 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    86f0:	2803      	cmp	r0, #3
    86f2:	d07a      	beq.n	87ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    86f4:	f240 5151 	movw	r1, #1361	; 0x551
    86f8:	e18c      	b.n	8a14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    86fa:	2101      	movs	r1, #1
    86fc:	2000      	movs	r0, #0
    86fe:	f005 fe89 	bl	e414 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8702:	4606      	mov	r6, r0
    8704:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8706:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    870a:	4430      	add	r0, r6
    870c:	f004 f9c2 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8710:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8714:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8718:	6920      	ldr	r0, [r4, #16]
    871a:	f004 f9bb 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    871e:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8722:	a901      	add	r1, sp, #4
    8724:	4668      	mov	r0, sp
    8726:	f003 f991 	bl	ba4c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    872a:	e9dd 1200 	ldrd	r1, r2, [sp]
    872e:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8732:	f7fa ffe3 	bl	36fc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    8736:	4682      	mov	sl, r0
    8738:	4620      	mov	r0, r4
    873a:	f006 fea2 	bl	f482 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    873e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8742:	f8d4 817c 	ldr.w	r8, [r4, #380]	; 0x17c
    8746:	f003 fb21 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    874a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    874e:	4401      	add	r1, r0
    8750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8754:	fbb1 f0f0 	udiv	r0, r1, r0
    8758:	6a61      	ldr	r1, [r4, #36]	; 0x24
    875a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    875e:	4431      	add	r1, r6
    8760:	1a08      	subs	r0, r1, r0
    8762:	1a81      	subs	r1, r0, r2
    8764:	4441      	add	r1, r8
    8766:	3920      	subs	r1, #32
    8768:	eba1 060a 	sub.w	r6, r1, sl
    876c:	0050      	lsls	r0, r2, #1
    876e:	8c21      	ldrh	r1, [r4, #32]
    8770:	3060      	adds	r0, #96	; 0x60
    8772:	4401      	add	r1, r0
    8774:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8778:	f006 fef3 	bl	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    877c:	3022      	adds	r0, #34	; 0x22
    877e:	f8cb 0010 	str.w	r0, [fp, #16]
    8782:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    8786:	4659      	mov	r1, fp
    8788:	1a30      	subs	r0, r6, r0
    878a:	f5b0 7fdc 	cmp.w	r0, #440	; 0x1b8
    878e:	d859      	bhi.n	8844 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    8790:	f240 41ea 	movw	r1, #1258	; 0x4ea
    8794:	e13e      	b.n	8a14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8796:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    879a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    879c:	4408      	add	r0, r1
    879e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    87a2:	f004 f977 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    87a6:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    87aa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    87ae:	6920      	ldr	r0, [r4, #16]
    87b0:	f004 f970 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    87b4:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    87b8:	4620      	mov	r0, r4
    87ba:	f006 fe62 	bl	f482 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    87be:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    87c2:	bb10      	cbnz	r0, 880a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    87c4:	f1b9 0f00 	cmp.w	r9, #0
    87c8:	d01f      	beq.n	880a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    87ca:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    87ce:	4640      	mov	r0, r8
    87d0:	f003 fadc 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    87d4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    87d8:	4401      	add	r1, r0
    87da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87de:	fbb1 f0f0 	udiv	r0, r1, r0
    87e2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    87e6:	e001      	b.n	87ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    87e8:	e02d      	b.n	8846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    87ea:	e049      	b.n	8880 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    87ec:	4408      	add	r0, r1
    87ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
    87f0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    87f4:	4411      	add	r1, r2
    87f6:	1a0e      	subs	r6, r1, r0
    87f8:	4640      	mov	r0, r8
    87fa:	f003 fa9b 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    87fe:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8802:	1a08      	subs	r0, r1, r0
    8804:	4406      	add	r6, r0
    8806:	3e20      	subs	r6, #32
    8808:	e006      	b.n	8818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    880a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    880c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8810:	4408      	add	r0, r1
    8812:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8816:	1a46      	subs	r6, r0, r1
    8818:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    881c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    8820:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    8824:	fb01 0002 	mla	r0, r1, r2, r0
    8828:	0040      	lsls	r0, r0, #1
    882a:	8c21      	ldrh	r1, [r4, #32]
    882c:	3060      	adds	r0, #96	; 0x60
    882e:	4401      	add	r1, r0
    8830:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8834:	f006 fe95 	bl	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8838:	f8cb 0010 	str.w	r0, [fp, #16]
    883c:	2001      	movs	r0, #1
    883e:	4659      	mov	r1, fp
    8840:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8844:	e062      	b.n	890c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    8846:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    884a:	6920      	ldr	r0, [r4, #16]
    884c:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    8850:	1a46      	subs	r6, r0, r1
    8852:	eb02 000a 	add.w	r0, r2, sl
    8856:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    885a:	f8d4 c138 	ldr.w	ip, [r4, #312]	; 0x138
    885e:	1a80      	subs	r0, r0, r2
    8860:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    8864:	1e40      	subs	r0, r0, #1
    8866:	fb0c 3202 	mla	r2, ip, r2, r3
    886a:	fb00 2001 	mla	r0, r0, r1, r2
    886e:	0040      	lsls	r0, r0, #1
    8870:	8c21      	ldrh	r1, [r4, #32]
    8872:	3060      	adds	r0, #96	; 0x60
    8874:	4401      	add	r1, r0
    8876:	fb06 f608 	mul.w	r6, r6, r8
    887a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    887e:	e040      	b.n	8902 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    8880:	6920      	ldr	r0, [r4, #16]
    8882:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8886:	fb00 f008 	mul.w	r0, r0, r8
    888a:	fb08 0611 	mls	r6, r8, r1, r0
    888e:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    8892:	2824      	cmp	r0, #36	; 0x24
    8894:	d003      	beq.n	889e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    8896:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    889a:	2824      	cmp	r0, #36	; 0x24
    889c:	d109      	bne.n	88b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    889e:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    88a2:	1a38      	subs	r0, r7, r0
    88a4:	b200      	sxth	r0, r0
    88a6:	2800      	cmp	r0, #0
    88a8:	db03      	blt.n	88b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    88aa:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    88ae:	b100      	cbz	r0, 88b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9800      	ldr	r0, [sp, #0]
    88b4:	b1d8      	cbz	r0, 88ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    88b6:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    88ba:	b9c0      	cbnz	r0, 88ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    88bc:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
    88c0:	2800      	cmp	r0, #0
    88c2:	d07d      	beq.n	89c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    88c4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    88c8:	f003 fa60 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    88cc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    88d0:	4401      	add	r1, r0
    88d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    88d6:	fbb1 f0f0 	udiv	r0, r1, r0
    88da:	1a36      	subs	r6, r6, r0
    88dc:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    88e0:	f003 fa28 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    88e4:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    88e8:	1a08      	subs	r0, r1, r0
    88ea:	4406      	add	r6, r0
    88ec:	3e20      	subs	r6, #32
    88ee:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    88f2:	eb01 000a 	add.w	r0, r1, sl
    88f6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    88fa:	4348      	muls	r0, r1
    88fc:	0041      	lsls	r1, r0, #1
    88fe:	3160      	adds	r1, #96	; 0x60
    8900:	9801      	ldr	r0, [sp, #4]
    8902:	f006 fe2e 	bl	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8906:	4659      	mov	r1, fp
    8908:	f8cb 0010 	str.w	r0, [fp, #16]
    890c:	9804      	ldr	r0, [sp, #16]
    890e:	6909      	ldr	r1, [r1, #16]
    8910:	1a32      	subs	r2, r6, r0
    8912:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
    8916:	6920      	ldr	r0, [r4, #16]
    8918:	1b80      	subs	r0, r0, r6
    891a:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    891e:	f8cb 0014 	str.w	r0, [fp, #20]
    8922:	4281      	cmp	r1, r0
    8924:	d800      	bhi.n	8928 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    8926:	4608      	mov	r0, r1
    8928:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    892c:	2600      	movs	r6, #0
    892e:	702e      	strb	r6, [r5, #0]
    8930:	2064      	movs	r0, #100	; 0x64
    8932:	8128      	strh	r0, [r5, #8]
    8934:	4611      	mov	r1, r2
    8936:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    893a:	f7f9 fe21 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    893e:	60e8      	str	r0, [r5, #12]
    8940:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8944:	f006 f961 	bl	ec0a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8948:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    894c:	4408      	add	r0, r1
    894e:	6068      	str	r0, [r5, #4]
    8950:	68e8      	ldr	r0, [r5, #12]
    8952:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8956:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
    895a:	72ae      	strb	r6, [r5, #10]
    895c:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8960:	1bc0      	subs	r0, r0, r7
    8962:	b200      	sxth	r0, r0
    8964:	2800      	cmp	r0, #0
    8966:	dd01      	ble.n	896c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x558>
    8968:	2002      	movs	r0, #2
    896a:	72a8      	strb	r0, [r5, #10]
    896c:	9803      	ldr	r0, [sp, #12]
    896e:	b340      	cbz	r0, 89c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    8970:	f1b9 0f00 	cmp.w	r9, #0
    8974:	d01e      	beq.n	89b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8976:	bf00      	nop
    8978:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    897c:	b379      	cbz	r1, 89de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    897e:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    8982:	bf00      	nop
    8984:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    8988:	f894 2134 	ldrb.w	r2, [r4, #308]	; 0x134
    898c:	1c40      	adds	r0, r0, #1
    898e:	4342      	muls	r2, r0
    8990:	428a      	cmp	r2, r1
    8992:	d20f      	bcs.n	89b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8994:	7aa8      	ldrb	r0, [r5, #10]
    8996:	b168      	cbz	r0, 89b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8998:	72ae      	strb	r6, [r5, #10]
    899a:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    899e:	1c40      	adds	r0, r0, #1
    89a0:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    89a4:	2001      	movs	r0, #1
    89a6:	f000 f83b 	bl	8a20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    89aa:	f000 0007 	and.w	r0, r0, #7
    89ae:	1c40      	adds	r0, r0, #1
    89b0:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    89b4:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    89b8:	4629      	mov	r1, r5
    89ba:	f006 fde4 	bl	f586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    89be:	e001      	b.n	89c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    89c0:	e00a      	b.n	89d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    89c2:	e00d      	b.n	89e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5cc>
    89c4:	b320      	cbz	r0, 8a10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    89c6:	9807      	ldr	r0, [sp, #28]
    89c8:	f080 0001 	eor.w	r0, r0, #1
    89cc:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
    89d0:	2000      	movs	r0, #0
    89d2:	b009      	add	sp, #36	; 0x24
    89d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89d8:	f240 513c 	movw	r1, #1340	; 0x53c
    89dc:	e01a      	b.n	8a14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    89de:	e015      	b.n	8a0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    89e0:	f1b9 0f00 	cmp.w	r9, #0
    89e4:	d1c8      	bne.n	8978 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    89e6:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    89ea:	2800      	cmp	r0, #0
    89ec:	d0e2      	beq.n	89b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    89ee:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    89f2:	6920      	ldr	r0, [r4, #16]
    89f4:	1a41      	subs	r1, r0, r1
    89f6:	4628      	mov	r0, r5
    89f8:	f005 fd1e 	bl	e438 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    89fc:	0400      	lsls	r0, r0, #16
    89fe:	0c00      	lsrs	r0, r0, #16
    8a00:	d0d8      	beq.n	89b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8a02:	9912      	ldr	r1, [sp, #72]	; 0x48
    8a04:	b101      	cbz	r1, 8a08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    8a06:	8008      	strh	r0, [r1, #0]
    8a08:	2001      	movs	r0, #1
    8a0a:	e7e2      	b.n	89d2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5be>
    8a0c:	2000      	movs	r0, #0
    8a0e:	e7b9      	b.n	8984 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    8a10:	f240 519b 	movw	r1, #1435	; 0x59b
    8a14:	2030      	movs	r0, #48	; 0x30
    8a16:	f7fc f9b7 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a1a:	0000      	.short	0x0000
    8a1c:	20000124 	.word	0x20000124
    8a20:	b108      	cbz	r0, 8a26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x612>
    8a22:	4803      	ldr	r0, [pc, #12]	; (8a30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8a24:	e001      	b.n	8a2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    8a26:	4802      	ldr	r0, [pc, #8]	; (8a30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8a28:	3008      	adds	r0, #8
    8a2a:	f7fe bc79 	b.w	7320 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8a2e:	0000      	.short	0x0000
    8a30:	2000013c 	.word	0x2000013c
    8a34:	b570      	push	{r4, r5, r6, lr}
    8a36:	4604      	mov	r4, r0
    8a38:	f7f9 ff06 	bl	2848 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8a3c:	2864      	cmp	r0, #100	; 0x64
    8a3e:	d901      	bls.n	8a44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x630>
    8a40:	4605      	mov	r5, r0
    8a42:	e000      	b.n	8a46 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x632>
    8a44:	2564      	movs	r5, #100	; 0x64
    8a46:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8a4a:	2128      	movs	r1, #40	; 0x28
    8a4c:	f006 fc87 	bl	f35e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8a50:	4428      	add	r0, r5
    8a52:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8a56:	f200 203d 	addw	r0, r0, #573	; 0x23d
    8a5a:	180e      	adds	r6, r1, r0
    8a5c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8a60:	2128      	movs	r1, #40	; 0x28
    8a62:	f006 fc7c 	bl	f35e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8a66:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    8a6a:	4620      	mov	r0, r4
    8a6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8a6e:	f006 f869 	bl	eb44 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8a72:	4605      	mov	r5, r0
    8a74:	4632      	mov	r2, r6
    8a76:	4620      	mov	r0, r4
    8a78:	6921      	ldr	r1, [r4, #16]
    8a7a:	f006 f863 	bl	eb44 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8a7e:	4907      	ldr	r1, [pc, #28]	; (8a9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x688>)
    8a80:	4285      	cmp	r5, r0
    8a82:	6088      	str	r0, [r1, #8]
    8a84:	d200      	bcs.n	8a88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x674>
    8a86:	4628      	mov	r0, r5
    8a88:	6048      	str	r0, [r1, #4]
    8a8a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8a8e:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    8a92:	60c8      	str	r0, [r1, #12]
    8a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a98:	f7fa bd7a 	b.w	3590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a9c:	20000124 	.word	0x20000124
    8aa0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8aa2:	4604      	mov	r4, r0
    8aa4:	f003 ffc2 	bl	ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8aa8:	4601      	mov	r1, r0
    8aaa:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    8aae:	f7f9 fd99 	bl	25e4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8ab2:	4601      	mov	r1, r0
    8ab4:	6922      	ldr	r2, [r4, #16]
    8ab6:	2000      	movs	r0, #0
    8ab8:	b10a      	cbz	r2, 8abe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6aa>
    8aba:	fbb1 f0f2 	udiv	r0, r1, r2
    8abe:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8ac2:	290d      	cmp	r1, #13
    8ac4:	d00c      	beq.n	8ae0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6cc>
    8ac6:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8aca:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8ace:	1813      	adds	r3, r2, r0
    8ad0:	1acb      	subs	r3, r1, r3
    8ad2:	b21b      	sxth	r3, r3
    8ad4:	2b00      	cmp	r3, #0
    8ad6:	db06      	blt.n	8ae6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6d2>
    8ad8:	1c49      	adds	r1, r1, #1
    8ada:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
    8ade:	e006      	b.n	8aee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6da>
    8ae0:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8ae4:	e012      	b.n	8b0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    8ae6:	1c40      	adds	r0, r0, #1
    8ae8:	4410      	add	r0, r2
    8aea:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8aee:	f894 0159 	ldrb.w	r0, [r4, #345]	; 0x159
    8af2:	f88d 0000 	strb.w	r0, [sp]
    8af6:	9800      	ldr	r0, [sp, #0]
    8af8:	9000      	str	r0, [sp, #0]
    8afa:	f89d 0000 	ldrb.w	r0, [sp]
    8afe:	b940      	cbnz	r0, 8b12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8b00:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8b04:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    8b08:	4288      	cmp	r0, r1
    8b0a:	d102      	bne.n	8b12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8b0c:	1c40      	adds	r0, r0, #1
    8b0e:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8b12:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8b16:	1c40      	adds	r0, r0, #1
    8b18:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
    8b1c:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    8b20:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    8b24:	1a40      	subs	r0, r0, r1
    8b26:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    8b2a:	1e40      	subs	r0, r0, #1
    8b2c:	4408      	add	r0, r1
    8b2e:	b285      	uxth	r5, r0
    8b30:	e023      	b.n	8b7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x766>
    8b32:	a801      	add	r0, sp, #4
    8b34:	2300      	movs	r3, #0
    8b36:	9000      	str	r0, [sp, #0]
    8b38:	461a      	mov	r2, r3
    8b3a:	4620      	mov	r0, r4
    8b3c:	f7ff fd66 	bl	860c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8b40:	2800      	cmp	r0, #0
    8b42:	d036      	beq.n	8bb2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79e>
    8b44:	2801      	cmp	r0, #1
    8b46:	d004      	beq.n	8b52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x73e>
    8b48:	f240 6152 	movw	r1, #1618	; 0x652
    8b4c:	2030      	movs	r0, #48	; 0x30
    8b4e:	f7fc f91b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b52:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8b56:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8b5a:	1a0a      	subs	r2, r1, r0
    8b5c:	b212      	sxth	r2, r2
    8b5e:	2a00      	cmp	r2, #0
    8b60:	da06      	bge.n	8b70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x75c>
    8b62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8b66:	440a      	add	r2, r1
    8b68:	1aaa      	subs	r2, r5, r2
    8b6a:	b212      	sxth	r2, r2
    8b6c:	2a00      	cmp	r2, #0
    8b6e:	db02      	blt.n	8b76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x762>
    8b70:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8b74:	4408      	add	r0, r1
    8b76:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8b7a:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8b7e:	1a68      	subs	r0, r5, r1
    8b80:	b200      	sxth	r0, r0
    8b82:	2800      	cmp	r0, #0
    8b84:	dad5      	bge.n	8b32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x71e>
    8b86:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    8b8a:	b180      	cbz	r0, 8bae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79a>
    8b8c:	f05f 0008 	movs.w	r0, #8
    8b90:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    8b94:	20ff      	movs	r0, #255	; 0xff
    8b96:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    8b9a:	4620      	mov	r0, r4
    8b9c:	f006 fec4 	bl	f928 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    8ba0:	4620      	mov	r0, r4
    8ba2:	f006 fd4a 	bl	f63a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    8ba6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    8baa:	f7fe ba23 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bae:	203e      	movs	r0, #62	; 0x3e
    8bb0:	e7ee      	b.n	8b90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x77c>
    8bb2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00008bb4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8bb4:	4806      	ldr	r0, [pc, #24]	; (8bd0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8bb6:	4905      	ldr	r1, [pc, #20]	; (8bcc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8bb8:	6501      	str	r1, [r0, #80]	; 0x50
    8bba:	4906      	ldr	r1, [pc, #24]	; (8bd4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8bbc:	6541      	str	r1, [r0, #84]	; 0x54
    8bbe:	4807      	ldr	r0, [pc, #28]	; (8bdc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8bc0:	4905      	ldr	r1, [pc, #20]	; (8bd8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8bc2:	6501      	str	r1, [r0, #80]	; 0x50
    8bc4:	4906      	ldr	r1, [pc, #24]	; (8be0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8bc6:	6541      	str	r1, [r0, #84]	; 0x54
    8bc8:	4770      	bx	lr
    8bca:	0000      	.short	0x0000
    8bcc:	0000a195 	.word	0x0000a195
    8bd0:	20000160 	.word	0x20000160
    8bd4:	0000a275 	.word	0x0000a275
    8bd8:	0000a8e5 	.word	0x0000a8e5
    8bdc:	200001c8 	.word	0x200001c8
    8be0:	0000a915 	.word	0x0000a915

00008be4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8be6:	460d      	mov	r5, r1
    8be8:	4607      	mov	r7, r0
    8bea:	2100      	movs	r1, #0
    8bec:	f005 f8b8 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8bf0:	1e04      	subs	r4, r0, #0
    8bf2:	d050      	beq.n	8c96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8bf4:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    8bf8:	2800      	cmp	r0, #0
    8bfa:	d04c      	beq.n	8c96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8bfc:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8c00:	f88d 0000 	strb.w	r0, [sp]
    8c04:	9800      	ldr	r0, [sp, #0]
    8c06:	9000      	str	r0, [sp, #0]
    8c08:	f89d 0000 	ldrb.w	r0, [sp]
    8c0c:	2600      	movs	r6, #0
    8c0e:	b118      	cbz	r0, 8c18 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    8c10:	706e      	strb	r6, [r5, #1]
    8c12:	2007      	movs	r0, #7
    8c14:	7028      	strb	r0, [r5, #0]
    8c16:	e00d      	b.n	8c34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    8c18:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    8c1c:	b390      	cbz	r0, 8c84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    8c1e:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    8c22:	280b      	cmp	r0, #11
    8c24:	d02f      	beq.n	8c86 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa2>
    8c26:	280c      	cmp	r0, #12
    8c28:	d01c      	beq.n	8c64 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8c2a:	f640 21dc 	movw	r1, #2780	; 0xadc
    8c2e:	2031      	movs	r0, #49	; 0x31
    8c30:	f7fc f8aa 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c34:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8c38:	f88d 0000 	strb.w	r0, [sp]
    8c3c:	9800      	ldr	r0, [sp, #0]
    8c3e:	9000      	str	r0, [sp, #0]
    8c40:	f89d 0000 	ldrb.w	r0, [sp]
    8c44:	b160      	cbz	r0, 8c60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x7c>
    8c46:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
    8c4a:	8526      	strh	r6, [r4, #40]	; 0x28
    8c4c:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
    8c50:	6068      	str	r0, [r5, #4]
    8c52:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
    8c56:	60a8      	str	r0, [r5, #8]
    8c58:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
    8c5c:	81a8      	strh	r0, [r5, #12]
    8c5e:	e7e9      	b.n	8c34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    8c60:	712e      	strb	r6, [r5, #4]
    8c62:	e0fa      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8c64:	8820      	ldrh	r0, [r4, #0]
    8c66:	f7fc fca9 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8c6a:	4607      	mov	r7, r0
    8c6c:	f004 ff3e 	bl	daec <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8c70:	b980      	cbnz	r0, 8c94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8c72:	706e      	strb	r6, [r5, #1]
    8c74:	200c      	movs	r0, #12
    8c76:	7028      	strb	r0, [r5, #0]
    8c78:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    8c7c:	7128      	strb	r0, [r5, #4]
    8c7e:	8820      	ldrh	r0, [r4, #0]
    8c80:	80e8      	strh	r0, [r5, #6]
    8c82:	e014      	b.n	8cae <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xca>
    8c84:	e019      	b.n	8cba <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    8c86:	8820      	ldrh	r0, [r4, #0]
    8c88:	f7fc fc98 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8c8c:	4607      	mov	r7, r0
    8c8e:	f004 ff2d 	bl	daec <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8c92:	b108      	cbz	r0, 8c98 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb4>
    8c94:	2000      	movs	r0, #0
    8c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c98:	706e      	strb	r6, [r5, #1]
    8c9a:	200b      	movs	r0, #11
    8c9c:	7028      	strb	r0, [r5, #0]
    8c9e:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    8ca2:	7128      	strb	r0, [r5, #4]
    8ca4:	8820      	ldrh	r0, [r4, #0]
    8ca6:	80e8      	strh	r0, [r5, #6]
    8ca8:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8cac:	7228      	strb	r0, [r5, #8]
    8cae:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
    8cb2:	4638      	mov	r0, r7
    8cb4:	f004 ff35 	bl	db22 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8cb8:	e0cf      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8cba:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    8cbe:	f88d 0000 	strb.w	r0, [sp]
    8cc2:	9800      	ldr	r0, [sp, #0]
    8cc4:	9000      	str	r0, [sp, #0]
    8cc6:	f89d 0000 	ldrb.w	r0, [sp]
    8cca:	b130      	cbz	r0, 8cda <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8ccc:	706e      	strb	r6, [r5, #1]
    8cce:	200e      	movs	r0, #14
    8cd0:	7028      	strb	r0, [r5, #0]
    8cd2:	80af      	strh	r7, [r5, #4]
    8cd4:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
    8cd8:	e0bf      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8cda:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    8cde:	f88d 0000 	strb.w	r0, [sp]
    8ce2:	9800      	ldr	r0, [sp, #0]
    8ce4:	9000      	str	r0, [sp, #0]
    8ce6:	f89d 0000 	ldrb.w	r0, [sp]
    8cea:	b198      	cbz	r0, 8d14 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8cec:	706e      	strb	r6, [r5, #1]
    8cee:	2008      	movs	r0, #8
    8cf0:	7028      	strb	r0, [r5, #0]
    8cf2:	8820      	ldrh	r0, [r4, #0]
    8cf4:	80a8      	strh	r0, [r5, #4]
    8cf6:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
    8cfa:	f8c5 1006 	str.w	r1, [r5, #6]
    8cfe:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
    8d02:	f8c5 100a 	str.w	r1, [r5, #10]
    8d06:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
    8d0a:	81e8      	strh	r0, [r5, #14]
    8d0c:	f504 74ee 	add.w	r4, r4, #476	; 0x1dc
    8d10:	7026      	strb	r6, [r4, #0]
    8d12:	e0a2      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8d14:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8d18:	f88d 0000 	strb.w	r0, [sp]
    8d1c:	9800      	ldr	r0, [sp, #0]
    8d1e:	9000      	str	r0, [sp, #0]
    8d20:	f89d 0000 	ldrb.w	r0, [sp]
    8d24:	b118      	cbz	r0, 8d2e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14a>
    8d26:	706e      	strb	r6, [r5, #1]
    8d28:	2016      	movs	r0, #22
    8d2a:	7028      	strb	r0, [r5, #0]
    8d2c:	e017      	b.n	8d5e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    8d2e:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8d32:	f88d 0000 	strb.w	r0, [sp]
    8d36:	9800      	ldr	r0, [sp, #0]
    8d38:	9000      	str	r0, [sp, #0]
    8d3a:	f89d 0000 	ldrb.w	r0, [sp]
    8d3e:	b1e8      	cbz	r0, 8d7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x198>
    8d40:	706e      	strb	r6, [r5, #1]
    8d42:	2006      	movs	r0, #6
    8d44:	7028      	strb	r0, [r5, #0]
    8d46:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
    8d4a:	6068      	str	r0, [r5, #4]
    8d4c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
    8d50:	60a8      	str	r0, [r5, #8]
    8d52:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8d56:	60e8      	str	r0, [r5, #12]
    8d58:	f504 7407 	add.w	r4, r4, #540	; 0x21c
    8d5c:	e032      	b.n	8dc4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e0>
    8d5e:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8d62:	f88d 0000 	strb.w	r0, [sp]
    8d66:	9800      	ldr	r0, [sp, #0]
    8d68:	9000      	str	r0, [sp, #0]
    8d6a:	f89d 0000 	ldrb.w	r0, [sp]
    8d6e:	b358      	cbz	r0, 8dc8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    8d70:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
    8d74:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
    8d78:	6068      	str	r0, [r5, #4]
    8d7a:	e7f0      	b.n	8d5e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    8d7c:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    8d80:	f88d 0000 	strb.w	r0, [sp]
    8d84:	9800      	ldr	r0, [sp, #0]
    8d86:	9000      	str	r0, [sp, #0]
    8d88:	f89d 0000 	ldrb.w	r0, [sp]
    8d8c:	b118      	cbz	r0, 8d96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b2>
    8d8e:	706e      	strb	r6, [r5, #1]
    8d90:	2012      	movs	r0, #18
    8d92:	7028      	strb	r0, [r5, #0]
    8d94:	e019      	b.n	8dca <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    8d96:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
    8d9a:	f88d 0000 	strb.w	r0, [sp]
    8d9e:	9800      	ldr	r0, [sp, #0]
    8da0:	9000      	str	r0, [sp, #0]
    8da2:	f89d 0000 	ldrb.w	r0, [sp]
    8da6:	b328      	cbz	r0, 8df4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x210>
    8da8:	706e      	strb	r6, [r5, #1]
    8daa:	2018      	movs	r0, #24
    8dac:	7028      	strb	r0, [r5, #0]
    8dae:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
    8db2:	6068      	str	r0, [r5, #4]
    8db4:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    8db8:	60a8      	str	r0, [r5, #8]
    8dba:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
    8dbe:	81a8      	strh	r0, [r5, #12]
    8dc0:	f504 74fd 	add.w	r4, r4, #506	; 0x1fa
    8dc4:	f804 6c02 	strb.w	r6, [r4, #-2]
    8dc8:	e047      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8dca:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    8dce:	f88d 0000 	strb.w	r0, [sp]
    8dd2:	9800      	ldr	r0, [sp, #0]
    8dd4:	9000      	str	r0, [sp, #0]
    8dd6:	f89d 0000 	ldrb.w	r0, [sp]
    8dda:	b3e8      	cbz	r0, 8e58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    8ddc:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
    8de0:	f8d4 01ec 	ldr.w	r0, [r4, #492]	; 0x1ec
    8de4:	6068      	str	r0, [r5, #4]
    8de6:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
    8dea:	60a8      	str	r0, [r5, #8]
    8dec:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
    8df0:	60e8      	str	r0, [r5, #12]
    8df2:	e7ea      	b.n	8dca <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    8df4:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
    8df8:	f88d 0000 	strb.w	r0, [sp]
    8dfc:	9800      	ldr	r0, [sp, #0]
    8dfe:	9000      	str	r0, [sp, #0]
    8e00:	f89d 0000 	ldrb.w	r0, [sp]
    8e04:	b138      	cbz	r0, 8e16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x232>
    8e06:	2019      	movs	r0, #25
    8e08:	7028      	strb	r0, [r5, #0]
    8e0a:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
    8e0e:	6068      	str	r0, [r5, #4]
    8e10:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    8e14:	e021      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8e16:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    8e1a:	f88d 0000 	strb.w	r0, [sp]
    8e1e:	9800      	ldr	r0, [sp, #0]
    8e20:	9000      	str	r0, [sp, #0]
    8e22:	f89d 0000 	ldrb.w	r0, [sp]
    8e26:	2800      	cmp	r0, #0
    8e28:	f43f af35 	beq.w	8c96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8e2c:	706e      	strb	r6, [r5, #1]
    8e2e:	2013      	movs	r0, #19
    8e30:	f885 0000 	strb.w	r0, [r5]
    8e34:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    8e38:	f88d 0000 	strb.w	r0, [sp]
    8e3c:	9800      	ldr	r0, [sp, #0]
    8e3e:	9000      	str	r0, [sp, #0]
    8e40:	f89d 0000 	ldrb.w	r0, [sp]
    8e44:	b140      	cbz	r0, 8e58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    8e46:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
    8e4a:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    8e4e:	6068      	str	r0, [r5, #4]
    8e50:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
    8e54:	8128      	strh	r0, [r5, #8]
    8e56:	e7ed      	b.n	8e34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x250>
    8e58:	e7ff      	b.n	8e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8e5a:	2001      	movs	r0, #1
    8e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008e60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8e60:	481d      	ldr	r0, [pc, #116]	; (8ed8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8e62:	491c      	ldr	r1, [pc, #112]	; (8ed4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8e64:	6081      	str	r1, [r0, #8]
    8e66:	491d      	ldr	r1, [pc, #116]	; (8edc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8e68:	6041      	str	r1, [r0, #4]
    8e6a:	491d      	ldr	r1, [pc, #116]	; (8ee0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8e6c:	6001      	str	r1, [r0, #0]
    8e6e:	491d      	ldr	r1, [pc, #116]	; (8ee4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8e70:	6281      	str	r1, [r0, #40]	; 0x28
    8e72:	491d      	ldr	r1, [pc, #116]	; (8ee8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8e74:	62c1      	str	r1, [r0, #44]	; 0x2c
    8e76:	491d      	ldr	r1, [pc, #116]	; (8eec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8e78:	60c1      	str	r1, [r0, #12]
    8e7a:	491d      	ldr	r1, [pc, #116]	; (8ef0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8e7c:	6181      	str	r1, [r0, #24]
    8e7e:	491d      	ldr	r1, [pc, #116]	; (8ef4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8e80:	6301      	str	r1, [r0, #48]	; 0x30
    8e82:	491d      	ldr	r1, [pc, #116]	; (8ef8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8e84:	6201      	str	r1, [r0, #32]
    8e86:	491d      	ldr	r1, [pc, #116]	; (8efc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8e88:	64c1      	str	r1, [r0, #76]	; 0x4c
    8e8a:	491d      	ldr	r1, [pc, #116]	; (8f00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8e8c:	6481      	str	r1, [r0, #72]	; 0x48
    8e8e:	491d      	ldr	r1, [pc, #116]	; (8f04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8e90:	6441      	str	r1, [r0, #68]	; 0x44
    8e92:	491d      	ldr	r1, [pc, #116]	; (8f08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8e94:	6341      	str	r1, [r0, #52]	; 0x34
    8e96:	491d      	ldr	r1, [pc, #116]	; (8f0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8e98:	61c1      	str	r1, [r0, #28]
    8e9a:	491d      	ldr	r1, [pc, #116]	; (8f10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8e9c:	6241      	str	r1, [r0, #36]	; 0x24
    8e9e:	481e      	ldr	r0, [pc, #120]	; (8f18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8ea0:	491c      	ldr	r1, [pc, #112]	; (8f14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8ea2:	6081      	str	r1, [r0, #8]
    8ea4:	491d      	ldr	r1, [pc, #116]	; (8f1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8ea6:	61c1      	str	r1, [r0, #28]
    8ea8:	491d      	ldr	r1, [pc, #116]	; (8f20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8eaa:	6241      	str	r1, [r0, #36]	; 0x24
    8eac:	491d      	ldr	r1, [pc, #116]	; (8f24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8eae:	62c1      	str	r1, [r0, #44]	; 0x2c
    8eb0:	491d      	ldr	r1, [pc, #116]	; (8f28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8eb2:	6101      	str	r1, [r0, #16]
    8eb4:	491d      	ldr	r1, [pc, #116]	; (8f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8eb6:	6141      	str	r1, [r0, #20]
    8eb8:	491d      	ldr	r1, [pc, #116]	; (8f30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8eba:	6441      	str	r1, [r0, #68]	; 0x44
    8ebc:	6341      	str	r1, [r0, #52]	; 0x34
    8ebe:	491d      	ldr	r1, [pc, #116]	; (8f34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8ec0:	6181      	str	r1, [r0, #24]
    8ec2:	491d      	ldr	r1, [pc, #116]	; (8f38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    8ec4:	6301      	str	r1, [r0, #48]	; 0x30
    8ec6:	491d      	ldr	r1, [pc, #116]	; (8f3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    8ec8:	6481      	str	r1, [r0, #72]	; 0x48
    8eca:	491d      	ldr	r1, [pc, #116]	; (8f40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    8ecc:	64c1      	str	r1, [r0, #76]	; 0x4c
    8ece:	491d      	ldr	r1, [pc, #116]	; (8f44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    8ed0:	6381      	str	r1, [r0, #56]	; 0x38
    8ed2:	4770      	bx	lr
    8ed4:	0000a619 	.word	0x0000a619
    8ed8:	20000160 	.word	0x20000160
    8edc:	00009ef9 	.word	0x00009ef9
    8ee0:	00009f55 	.word	0x00009f55
    8ee4:	0000a33d 	.word	0x0000a33d
    8ee8:	0000a381 	.word	0x0000a381
    8eec:	0000a001 	.word	0x0000a001
    8ef0:	0000a5f1 	.word	0x0000a5f1
    8ef4:	0000a731 	.word	0x0000a731
    8ef8:	0000a0ad 	.word	0x0000a0ad
    8efc:	0000a311 	.word	0x0000a311
    8f00:	0000a2e5 	.word	0x0000a2e5
    8f04:	0000a5b1 	.word	0x0000a5b1
    8f08:	0000a5e1 	.word	0x0000a5e1
    8f0c:	0000a64d 	.word	0x0000a64d
    8f10:	0000a0f9 	.word	0x0000a0f9
    8f14:	0000aafd 	.word	0x0000aafd
    8f18:	200001c8 	.word	0x200001c8
    8f1c:	0000ab25 	.word	0x0000ab25
    8f20:	0000a8b5 	.word	0x0000a8b5
    8f24:	0000a98d 	.word	0x0000a98d
    8f28:	0000a889 	.word	0x0000a889
    8f2c:	0000aa65 	.word	0x0000aa65
    8f30:	0000aa11 	.word	0x0000aa11
    8f34:	0000aa89 	.word	0x0000aa89
    8f38:	0000ab7d 	.word	0x0000ab7d
    8f3c:	0000a945 	.word	0x0000a945
    8f40:	0000a975 	.word	0x0000a975
    8f44:	0000aa35 	.word	0x0000aa35

00008f48 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8f48:	4806      	ldr	r0, [pc, #24]	; (8f64 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8f4a:	4905      	ldr	r1, [pc, #20]	; (8f60 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8f4c:	6581      	str	r1, [r0, #88]	; 0x58
    8f4e:	4906      	ldr	r1, [pc, #24]	; (8f68 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8f50:	6601      	str	r1, [r0, #96]	; 0x60
    8f52:	4807      	ldr	r0, [pc, #28]	; (8f70 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8f54:	4905      	ldr	r1, [pc, #20]	; (8f6c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8f56:	6581      	str	r1, [r0, #88]	; 0x58
    8f58:	4906      	ldr	r1, [pc, #24]	; (8f74 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8f5a:	65c1      	str	r1, [r0, #92]	; 0x5c
    8f5c:	4770      	bx	lr
    8f5e:	0000      	.short	0x0000
    8f60:	0000a3a1 	.word	0x0000a3a1
    8f64:	20000160 	.word	0x20000160
    8f68:	0000a475 	.word	0x0000a475
    8f6c:	0000a9b9 	.word	0x0000a9b9
    8f70:	200001c8 	.word	0x200001c8
    8f74:	0000a9e9 	.word	0x0000a9e9

00008f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f7c:	2101      	movs	r1, #1
    8f7e:	4c7d      	ldr	r4, [pc, #500]	; (9174 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8f80:	2500      	movs	r5, #0
    8f82:	f361 0207 	bfi	r2, r1, #0, #8
    8f86:	8065      	strh	r5, [r4, #2]
    8f88:	7065      	strb	r5, [r4, #1]
    8f8a:	7025      	strb	r5, [r4, #0]
    8f8c:	60a0      	str	r0, [r4, #8]
    8f8e:	4690      	mov	r8, r2
    8f90:	4606      	mov	r6, r0
    8f92:	f880 1113 	strb.w	r1, [r0, #275]	; 0x113
    8f96:	8800      	ldrh	r0, [r0, #0]
    8f98:	f7fc fb26 	bl	55e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8f9c:	b180      	cbz	r0, 8fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8f9e:	68a0      	ldr	r0, [r4, #8]
    8fa0:	8800      	ldrh	r0, [r0, #0]
    8fa2:	f7fc fd73 	bl	5a8c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8fa6:	68a0      	ldr	r0, [r4, #8]
    8fa8:	8800      	ldrh	r0, [r0, #0]
    8faa:	f7fc fd17 	bl	59dc <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8fae:	68a0      	ldr	r0, [r4, #8]
    8fb0:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    8fb4:	b1c9      	cbz	r1, 8fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8fb6:	3078      	adds	r0, #120	; 0x78
    8fb8:	f006 fcc5 	bl	f946 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8fbc:	b118      	cbz	r0, 8fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    8fbe:	e014      	b.n	8fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8fc0:	f640 31b9 	movw	r1, #3001	; 0xbb9
    8fc4:	e06c      	b.n	90a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128>
    8fc6:	68a0      	ldr	r0, [r4, #8]
    8fc8:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    8fcc:	f88d 1000 	strb.w	r1, [sp]
    8fd0:	9900      	ldr	r1, [sp, #0]
    8fd2:	9100      	str	r1, [sp, #0]
    8fd4:	f89d 1000 	ldrb.w	r1, [sp]
    8fd8:	b139      	cbz	r1, 8fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8fda:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8fde:	2301      	movs	r3, #1
    8fe0:	4619      	mov	r1, r3
    8fe2:	3078      	adds	r0, #120	; 0x78
    8fe4:	f005 f96f 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fe8:	b180      	cbz	r0, 900c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    8fea:	68a0      	ldr	r0, [r4, #8]
    8fec:	3078      	adds	r0, #120	; 0x78
    8fee:	f006 fcaa 	bl	f946 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8ff2:	b128      	cbz	r0, 9000 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    8ff4:	68a0      	ldr	r0, [r4, #8]
    8ff6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8ffa:	bf00      	nop
    8ffc:	f000 fbb4 	bl	9768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f0>
    9000:	68a0      	ldr	r0, [r4, #8]
    9002:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
    9006:	b189      	cbz	r1, 902c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    9008:	80a5      	strh	r5, [r4, #4]
    900a:	e01e      	b.n	904a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    900c:	68a0      	ldr	r0, [r4, #8]
    900e:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
    9012:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9016:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    901a:	2100      	movs	r1, #0
    901c:	2002      	movs	r0, #2
    901e:	f000 fe43 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9022:	68a0      	ldr	r0, [r4, #8]
    9024:	f880 5112 	strb.w	r5, [r0, #274]	; 0x112
    9028:	2002      	movs	r0, #2
    902a:	e7e7      	b.n	8ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    902c:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    9030:	f88d 1000 	strb.w	r1, [sp]
    9034:	9900      	ldr	r1, [sp, #0]
    9036:	9100      	str	r1, [sp, #0]
    9038:	f89d 1000 	ldrb.w	r1, [sp]
    903c:	b919      	cbnz	r1, 9046 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    903e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    9040:	8b02      	ldrh	r2, [r0, #24]
    9042:	4291      	cmp	r1, r2
    9044:	d800      	bhi.n	9048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    9046:	8b01      	ldrh	r1, [r0, #24]
    9048:	80a1      	strh	r1, [r4, #4]
    904a:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    904e:	1e49      	subs	r1, r1, #1
    9050:	b28f      	uxth	r7, r1
    9052:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    9056:	4439      	add	r1, r7
    9058:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
    905c:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    9060:	4439      	add	r1, r7
    9062:	8001      	strh	r1, [r0, #0]
    9064:	f001 fdb8 	bl	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    9068:	b120      	cbz	r0, 9074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc>
    906a:	68a0      	ldr	r0, [r4, #8]
    906c:	f850 1fa0 	ldr.w	r1, [r0, #160]!
    9070:	4439      	add	r1, r7
    9072:	6001      	str	r1, [r0, #0]
    9074:	68a1      	ldr	r1, [r4, #8]
    9076:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    907a:	2801      	cmp	r0, #1
    907c:	d802      	bhi.n	9084 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c>
    907e:	1c40      	adds	r0, r0, #1
    9080:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
    9084:	b10f      	cbz	r7, 908a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x112>
    9086:	f881 511c 	strb.w	r5, [r1, #284]	; 0x11c
    908a:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    908e:	f8b1 210e 	ldrh.w	r2, [r1, #270]	; 0x10e
    9092:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9096:	f005 fa98 	bl	e5ca <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    909a:	b120      	cbz	r0, 90a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e>
    909c:	f640 31fd 	movw	r1, #3069	; 0xbfd
    90a0:	2031      	movs	r0, #49	; 0x31
    90a2:	f7fb fe71 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90a6:	68a0      	ldr	r0, [r4, #8]
    90a8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    90ac:	290b      	cmp	r1, #11
    90ae:	d001      	beq.n	90b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c>
    90b0:	290c      	cmp	r1, #12
    90b2:	d119      	bne.n	90e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    90b4:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    90b8:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
    90bc:	1ad2      	subs	r2, r2, r3
    90be:	b212      	sxth	r2, r2
    90c0:	2a00      	cmp	r2, #0
    90c2:	db11      	blt.n	90e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    90c4:	f8d0 11a6 	ldr.w	r1, [r0, #422]	; 0x1a6
    90c8:	f8c0 108e 	str.w	r1, [r0, #142]	; 0x8e
    90cc:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    90d0:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
    90d4:	2103      	movs	r1, #3
    90d6:	f7fd fd43 	bl	6b60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    90da:	68a0      	ldr	r0, [r4, #8]
    90dc:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    90e0:	21ff      	movs	r1, #255	; 0xff
    90e2:	f880 10cc 	strb.w	r1, [r0, #204]	; 0xcc
    90e6:	e026      	b.n	9136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    90e8:	2924      	cmp	r1, #36	; 0x24
    90ea:	d111      	bne.n	9110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    90ec:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    90f0:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    90f4:	1a89      	subs	r1, r1, r2
    90f6:	b209      	sxth	r1, r1
    90f8:	2900      	cmp	r1, #0
    90fa:	db09      	blt.n	9110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    90fc:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9100:	f000 fe84 	bl	9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    9104:	2800      	cmp	r0, #0
    9106:	68a0      	ldr	r0, [r4, #8]
    9108:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    910c:	d029      	beq.n	9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    910e:	e012      	b.n	9136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    9110:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9114:	2924      	cmp	r1, #36	; 0x24
    9116:	d001      	beq.n	911c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4>
    9118:	2925      	cmp	r1, #37	; 0x25
    911a:	d10c      	bne.n	9136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    911c:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    9120:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    9124:	1a89      	subs	r1, r1, r2
    9126:	b209      	sxth	r1, r1
    9128:	2900      	cmp	r1, #0
    912a:	db04      	blt.n	9136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    912c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9130:	f000 fe6c 	bl	9e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    9134:	b1a8      	cbz	r0, 9162 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    9136:	4810      	ldr	r0, [pc, #64]	; (9178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    9138:	9000      	str	r0, [sp, #0]
    913a:	4b10      	ldr	r3, [pc, #64]	; (917c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    913c:	4a10      	ldr	r2, [pc, #64]	; (9180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>)
    913e:	4631      	mov	r1, r6
    9140:	4640      	mov	r0, r8
    9142:	f7fc fd5d 	bl	5c00 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9146:	68a0      	ldr	r0, [r4, #8]
    9148:	2301      	movs	r3, #1
    914a:	2105      	movs	r1, #5
    914c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9150:	3078      	adds	r0, #120	; 0x78
    9152:	f005 f8b8 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9156:	2800      	cmp	r0, #0
    9158:	d009      	beq.n	916e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f6>
    915a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    915e:	f7fc bd49 	b.w	5bf4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9162:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9166:	2100      	movs	r1, #0
    9168:	4608      	mov	r0, r1
    916a:	f000 bbd3 	b.w	9914 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    916e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9172:	0000      	.short	0x0000
    9174:	2000014c 	.word	0x2000014c
    9178:	00009915 	.word	0x00009915
    917c:	00009421 	.word	0x00009421
    9180:	00009d59 	.word	0x00009d59
    9184:	b570      	push	{r4, r5, r6, lr}
    9186:	4c0f      	ldr	r4, [pc, #60]	; (91c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
    9188:	68a5      	ldr	r5, [r4, #8]
    918a:	f895 1085 	ldrb.w	r1, [r5, #133]	; 0x85
    918e:	2920      	cmp	r1, #32
    9190:	d002      	beq.n	9198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9192:	2926      	cmp	r1, #38	; 0x26
    9194:	d003      	beq.n	919e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x226>
    9196:	e011      	b.n	91bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    9198:	f000 fe8a 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    919c:	e008      	b.n	91b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>
    919e:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
    91a2:	2301      	movs	r3, #1
    91a4:	210b      	movs	r1, #11
    91a6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    91aa:	f005 f88c 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91ae:	b138      	cbz	r0, 91c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>
    91b0:	68a1      	ldr	r1, [r4, #8]
    91b2:	2000      	movs	r0, #0
    91b4:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    91b8:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    91bc:	2000      	movs	r0, #0
    91be:	bd70      	pop	{r4, r5, r6, pc}
    91c0:	202a      	movs	r0, #42	; 0x2a
    91c2:	e7e9      	b.n	9198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    91c4:	2000014c 	.word	0x2000014c
    91c8:	4804      	ldr	r0, [pc, #16]	; (91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>)
    91ca:	2100      	movs	r1, #0
    91cc:	6880      	ldr	r0, [r0, #8]
    91ce:	f820 1fb8 	strh.w	r1, [r0, #184]!
    91d2:	7881      	ldrb	r1, [r0, #2]
    91d4:	1c49      	adds	r1, r1, #1
    91d6:	7081      	strb	r1, [r0, #2]
    91d8:	4770      	bx	lr
    91da:	0000      	.short	0x0000
    91dc:	2000014c 	.word	0x2000014c
    91e0:	4807      	ldr	r0, [pc, #28]	; (9200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>)
    91e2:	b510      	push	{r4, lr}
    91e4:	6881      	ldr	r1, [r0, #8]
    91e6:	f811 0fba 	ldrb.w	r0, [r1, #186]!
    91ea:	1e40      	subs	r0, r0, #1
    91ec:	b240      	sxtb	r0, r0
    91ee:	7008      	strb	r0, [r1, #0]
    91f0:	2800      	cmp	r0, #0
    91f2:	da04      	bge.n	91fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x286>
    91f4:	f44f 71c7 	mov.w	r1, #398	; 0x18e
    91f8:	2031      	movs	r0, #49	; 0x31
    91fa:	f7fb fdc5 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91fe:	bd10      	pop	{r4, pc}
    9200:	2000014c 	.word	0x2000014c
    9204:	491a      	ldr	r1, [pc, #104]	; (9270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>)
    9206:	b508      	push	{r3, lr}
    9208:	6889      	ldr	r1, [r1, #8]
    920a:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    920e:	b1b8      	cbz	r0, 9240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c8>
    9210:	2a10      	cmp	r2, #16
    9212:	d006      	beq.n	9222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    9214:	2a14      	cmp	r2, #20
    9216:	d007      	beq.n	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    9218:	2a15      	cmp	r2, #21
    921a:	d008      	beq.n	922e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    921c:	2a1b      	cmp	r2, #27
    921e:	d122      	bne.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9220:	e008      	b.n	9234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9222:	2101      	movs	r1, #1
    9224:	200b      	movs	r0, #11
    9226:	e007      	b.n	9238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9228:	f001 fade 	bl	a7e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    922c:	e006      	b.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    922e:	f000 fd59 	bl	9ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    9232:	e003      	b.n	923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9234:	2101      	movs	r1, #1
    9236:	2006      	movs	r0, #6
    9238:	f000 fd36 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    923c:	2001      	movs	r0, #1
    923e:	bd08      	pop	{r3, pc}
    9240:	2a21      	cmp	r2, #33	; 0x21
    9242:	d110      	bne.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9244:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9248:	2802      	cmp	r0, #2
    924a:	d00e      	beq.n	926a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    924c:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9250:	2801      	cmp	r0, #1
    9252:	d108      	bne.n	9266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9254:	f891 01bf 	ldrb.w	r0, [r1, #447]	; 0x1bf
    9258:	f88d 0000 	strb.w	r0, [sp]
    925c:	9800      	ldr	r0, [sp, #0]
    925e:	9000      	str	r0, [sp, #0]
    9260:	f89d 0000 	ldrb.w	r0, [sp]
    9264:	b108      	cbz	r0, 926a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    9266:	2000      	movs	r0, #0
    9268:	bd08      	pop	{r3, pc}
    926a:	2101      	movs	r1, #1
    926c:	2017      	movs	r0, #23
    926e:	e7e3      	b.n	9238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9270:	2000014c 	.word	0x2000014c
    9274:	b538      	push	{r3, r4, r5, lr}
    9276:	2800      	cmp	r0, #0
    9278:	d16d      	bne.n	9356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    927a:	4c38      	ldr	r4, [pc, #224]	; (935c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    927c:	68a0      	ldr	r0, [r4, #8]
    927e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9282:	07ca      	lsls	r2, r1, #31
    9284:	d002      	beq.n	928c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x314>
    9286:	2101      	movs	r1, #1
    9288:	2009      	movs	r0, #9
    928a:	e05d      	b.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    928c:	078a      	lsls	r2, r1, #30
    928e:	d50a      	bpl.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32e>
    9290:	2101      	movs	r1, #1
    9292:	200c      	movs	r0, #12
    9294:	f000 fd08 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9298:	68a0      	ldr	r0, [r4, #8]
    929a:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    929e:	f041 0101 	orr.w	r1, r1, #1
    92a2:	7001      	strb	r1, [r0, #0]
    92a4:	e052      	b.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    92a6:	074a      	lsls	r2, r1, #29
    92a8:	d502      	bpl.n	92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    92aa:	2101      	movs	r1, #1
    92ac:	2013      	movs	r0, #19
    92ae:	e04b      	b.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    92b0:	070a      	lsls	r2, r1, #28
    92b2:	d505      	bpl.n	92c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    92b4:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    92b8:	7141      	strb	r1, [r0, #5]
    92ba:	2101      	movs	r1, #1
    92bc:	2007      	movs	r0, #7
    92be:	e043      	b.n	9348 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    92c0:	f011 0f30 	tst.w	r1, #48	; 0x30
    92c4:	d047      	beq.n	9356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    92c6:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    92ca:	f88d 1000 	strb.w	r1, [sp]
    92ce:	9900      	ldr	r1, [sp, #0]
    92d0:	9100      	str	r1, [sp, #0]
    92d2:	f89d 1000 	ldrb.w	r1, [sp]
    92d6:	bbd9      	cbnz	r1, 9350 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    92d8:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    92dc:	2500      	movs	r5, #0
    92de:	f88d 1000 	strb.w	r1, [sp]
    92e2:	9900      	ldr	r1, [sp, #0]
    92e4:	9100      	str	r1, [sp, #0]
    92e6:	f89d 1000 	ldrb.w	r1, [sp]
    92ea:	b1c9      	cbz	r1, 9320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    92ec:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    92f0:	2924      	cmp	r1, #36	; 0x24
    92f2:	d02e      	beq.n	9352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    92f4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    92f8:	2924      	cmp	r1, #36	; 0x24
    92fa:	d02a      	beq.n	9352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    92fc:	f05f 0300 	movs.w	r3, #0
    9300:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9304:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9308:	f005 fc0e 	bl	eb28 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    930c:	68a0      	ldr	r0, [r4, #8]
    930e:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    9312:	f021 0120 	bic.w	r1, r1, #32
    9316:	f041 0110 	orr.w	r1, r1, #16
    931a:	7001      	strb	r1, [r0, #0]
    931c:	f880 512d 	strb.w	r5, [r0, #301]	; 0x12d
    9320:	68a0      	ldr	r0, [r4, #8]
    9322:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9326:	06c9      	lsls	r1, r1, #27
    9328:	d515      	bpl.n	9356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    932a:	f005 fc18 	bl	eb5e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    932e:	f000 f911 	bl	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    9332:	68a0      	ldr	r0, [r4, #8]
    9334:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9338:	4602      	mov	r2, r0
    933a:	8bc8      	ldrh	r0, [r1, #30]
    933c:	f822 0ffe 	strh.w	r0, [r2, #254]!
    9340:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9342:	8050      	strh	r0, [r2, #2]
    9344:	2101      	movs	r1, #1
    9346:	2015      	movs	r0, #21
    9348:	f000 fcae 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    934c:	2001      	movs	r0, #1
    934e:	bd38      	pop	{r3, r4, r5, pc}
    9350:	e001      	b.n	9356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    9352:	2301      	movs	r3, #1
    9354:	e7d4      	b.n	9300 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    9356:	2000      	movs	r0, #0
    9358:	e7f9      	b.n	934e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    935a:	0000      	.short	0x0000
    935c:	2000014c 	.word	0x2000014c
    9360:	b570      	push	{r4, r5, r6, lr}
    9362:	460d      	mov	r5, r1
    9364:	4606      	mov	r6, r0
    9366:	f005 fa21 	bl	e7ac <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    936a:	4604      	mov	r4, r0
    936c:	4630      	mov	r0, r6
    936e:	f005 fa29 	bl	e7c4 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    9372:	4629      	mov	r1, r5
    9374:	f000 f81e 	bl	93b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    9378:	b1b8      	cbz	r0, 93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    937a:	4620      	mov	r0, r4
    937c:	f005 f83c 	bl	e3f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9380:	0001      	movs	r1, r0
    9382:	d00d      	beq.n	93a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    9384:	480a      	ldr	r0, [pc, #40]	; (93b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>)
    9386:	6880      	ldr	r0, [r0, #8]
    9388:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    938c:	428a      	cmp	r2, r1
    938e:	d007      	beq.n	93a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    9390:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9394:	2901      	cmp	r1, #1
    9396:	d005      	beq.n	93a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42c>
    9398:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    939c:	4220      	tst	r0, r4
    939e:	d004      	beq.n	93aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    93a0:	2001      	movs	r0, #1
    93a2:	bd70      	pop	{r4, r5, r6, pc}
    93a4:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    93a8:	e7f8      	b.n	939c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    93aa:	2000      	movs	r0, #0
    93ac:	bd70      	pop	{r4, r5, r6, pc}
    93ae:	0000      	.short	0x0000
    93b0:	2000014c 	.word	0x2000014c
    93b4:	b570      	push	{r4, r5, r6, lr}
    93b6:	460d      	mov	r5, r1
    93b8:	4604      	mov	r4, r0
    93ba:	f005 f81d 	bl	e3f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    93be:	b350      	cbz	r0, 9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    93c0:	4916      	ldr	r1, [pc, #88]	; (941c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>)
    93c2:	6889      	ldr	r1, [r1, #8]
    93c4:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    93c8:	4282      	cmp	r2, r0
    93ca:	d024      	beq.n	9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    93cc:	f891 31be 	ldrb.w	r3, [r1, #446]	; 0x1be
    93d0:	2b01      	cmp	r3, #1
    93d2:	d005      	beq.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    93d4:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    93d8:	4223      	tst	r3, r4
    93da:	d013      	beq.n	9404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    93dc:	b11d      	cbz	r5, 93e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    93de:	e01a      	b.n	9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    93e0:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
    93e4:	e7f8      	b.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    93e6:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    93ea:	4221      	tst	r1, r4
    93ec:	d113      	bne.n	9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    93ee:	b15a      	cbz	r2, 9408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    93f0:	2a04      	cmp	r2, #4
    93f2:	d00e      	beq.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    93f4:	2804      	cmp	r0, #4
    93f6:	d00c      	beq.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    93f8:	2a08      	cmp	r2, #8
    93fa:	d00a      	beq.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    93fc:	2808      	cmp	r0, #8
    93fe:	d008      	beq.n	9412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    9400:	4282      	cmp	r2, r0
    9402:	d908      	bls.n	9416 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9404:	2000      	movs	r0, #0
    9406:	bd70      	pop	{r4, r5, r6, pc}
    9408:	f240 1155 	movw	r1, #341	; 0x155
    940c:	2006      	movs	r0, #6
    940e:	f7fb fcbb 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9412:	4282      	cmp	r2, r0
    9414:	d3f6      	bcc.n	9404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    9416:	2001      	movs	r0, #1
    9418:	bd70      	pop	{r4, r5, r6, pc}
    941a:	0000      	.short	0x0000
    941c:	2000014c 	.word	0x2000014c
    9420:	490c      	ldr	r1, [pc, #48]	; (9454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4dc>)
    9422:	4602      	mov	r2, r0
    9424:	7848      	ldrb	r0, [r1, #1]
    9426:	b998      	cbnz	r0, 9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9428:	4608      	mov	r0, r1
    942a:	6880      	ldr	r0, [r0, #8]
    942c:	b142      	cbz	r2, 9440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c8>
    942e:	7889      	ldrb	r1, [r1, #2]
    9430:	0709      	lsls	r1, r1, #28
    9432:	d503      	bpl.n	943c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c4>
    9434:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    9438:	2808      	cmp	r0, #8
    943a:	d009      	beq.n	9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    943c:	2001      	movs	r0, #1
    943e:	4770      	bx	lr
    9440:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9444:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9446:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    9448:	428a      	cmp	r2, r1
    944a:	d801      	bhi.n	9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    944c:	f7fe bf84 	b.w	8358 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    9450:	2000      	movs	r0, #0
    9452:	4770      	bx	lr
    9454:	2000014c 	.word	0x2000014c
    9458:	b538      	push	{r3, r4, r5, lr}
    945a:	4c3d      	ldr	r4, [pc, #244]	; (9550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d8>)
    945c:	4605      	mov	r5, r0
    945e:	68a0      	ldr	r0, [r4, #8]
    9460:	3078      	adds	r0, #120	; 0x78
    9462:	f006 fa70 	bl	f946 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9466:	2800      	cmp	r0, #0
    9468:	d170      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    946a:	2d00      	cmp	r5, #0
    946c:	d16e      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    946e:	68a0      	ldr	r0, [r4, #8]
    9470:	2301      	movs	r3, #1
    9472:	4619      	mov	r1, r3
    9474:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9478:	3078      	adds	r0, #120	; 0x78
    947a:	f004 ff24 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    947e:	2800      	cmp	r0, #0
    9480:	d164      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9482:	68a0      	ldr	r0, [r4, #8]
    9484:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9488:	f88d 1000 	strb.w	r1, [sp]
    948c:	9900      	ldr	r1, [sp, #0]
    948e:	9100      	str	r1, [sp, #0]
    9490:	f89d 2000 	ldrb.w	r2, [sp]
    9494:	2100      	movs	r1, #0
    9496:	b142      	cbz	r2, 94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x532>
    9498:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    949c:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    94a0:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    94a4:	2100      	movs	r1, #0
    94a6:	2002      	movs	r0, #2
    94a8:	e045      	b.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    94aa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    94ae:	2301      	movs	r3, #1
    94b0:	2104      	movs	r1, #4
    94b2:	3078      	adds	r0, #120	; 0x78
    94b4:	f004 ff07 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94b8:	4605      	mov	r5, r0
    94ba:	f7ff fedb 	bl	9274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fc>
    94be:	2800      	cmp	r0, #0
    94c0:	d144      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    94c2:	4628      	mov	r0, r5
    94c4:	f7ff fe9e 	bl	9204 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    94c8:	2800      	cmp	r0, #0
    94ca:	d13f      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    94cc:	68a0      	ldr	r0, [r4, #8]
    94ce:	2301      	movs	r3, #1
    94d0:	2100      	movs	r1, #0
    94d2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    94d6:	3078      	adds	r0, #120	; 0x78
    94d8:	f004 fef5 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94dc:	b178      	cbz	r0, 94fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    94de:	68a0      	ldr	r0, [r4, #8]
    94e0:	2301      	movs	r3, #1
    94e2:	2104      	movs	r1, #4
    94e4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    94e8:	3078      	adds	r0, #120	; 0x78
    94ea:	f004 feec 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ee:	b930      	cbnz	r0, 94fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    94f0:	68a0      	ldr	r0, [r4, #8]
    94f2:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
    94f6:	b110      	cbz	r0, 94fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    94f8:	2100      	movs	r1, #0
    94fa:	2012      	movs	r0, #18
    94fc:	e01b      	b.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    94fe:	68a0      	ldr	r0, [r4, #8]
    9500:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9504:	290a      	cmp	r1, #10
    9506:	d01a      	beq.n	953e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    9508:	2d00      	cmp	r5, #0
    950a:	d11f      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    950c:	f000 fb18 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc8>
    9510:	2800      	cmp	r0, #0
    9512:	d11b      	bne.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9514:	68a0      	ldr	r0, [r4, #8]
    9516:	2301      	movs	r3, #1
    9518:	2100      	movs	r1, #0
    951a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    951e:	3078      	adds	r0, #120	; 0x78
    9520:	f004 fed1 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9524:	2800      	cmp	r0, #0
    9526:	d011      	beq.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9528:	68a0      	ldr	r0, [r4, #8]
    952a:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    952e:	2800      	cmp	r0, #0
    9530:	d00c      	beq.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9532:	2100      	movs	r1, #0
    9534:	20ff      	movs	r0, #255	; 0xff
    9536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    953a:	f000 bbb5 	b.w	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    953e:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    9542:	7101      	strb	r1, [r0, #4]
    9544:	2100      	movs	r1, #0
    9546:	2007      	movs	r0, #7
    9548:	e7f5      	b.n	9536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    954a:	e7ff      	b.n	954c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    954c:	bd38      	pop	{r3, r4, r5, pc}
    954e:	0000      	.short	0x0000
    9550:	2000014c 	.word	0x2000014c
    9554:	480a      	ldr	r0, [pc, #40]	; (9580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>)
    9556:	b510      	push	{r4, lr}
    9558:	6881      	ldr	r1, [r0, #8]
    955a:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    955e:	2801      	cmp	r0, #1
    9560:	d009      	beq.n	9576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    9562:	8808      	ldrh	r0, [r1, #0]
    9564:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9568:	3130      	adds	r1, #48	; 0x30
    956a:	f005 fab9 	bl	eae0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    956e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9572:	f7fd bd3f 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9576:	2002      	movs	r0, #2
    9578:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    957c:	bd10      	pop	{r4, pc}
    957e:	0000      	.short	0x0000
    9580:	2000014c 	.word	0x2000014c
    9584:	b570      	push	{r4, r5, r6, lr}
    9586:	4c25      	ldr	r4, [pc, #148]	; (961c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    9588:	0005      	movs	r5, r0
    958a:	d12f      	bne.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    958c:	f000 f8a4 	bl	96d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>
    9590:	f000 f848 	bl	9624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    9594:	0005      	movs	r5, r0
    9596:	d129      	bne.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9598:	8860      	ldrh	r0, [r4, #2]
    959a:	0741      	lsls	r1, r0, #29
    959c:	d506      	bpl.n	95ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    959e:	68a1      	ldr	r1, [r4, #8]
    95a0:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    95a4:	2907      	cmp	r1, #7
    95a6:	d101      	bne.n	95ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    95a8:	2101      	movs	r1, #1
    95aa:	7021      	strb	r1, [r4, #0]
    95ac:	0780      	lsls	r0, r0, #30
    95ae:	d512      	bpl.n	95d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    95b0:	68e0      	ldr	r0, [r4, #12]
    95b2:	78c0      	ldrb	r0, [r0, #3]
    95b4:	281a      	cmp	r0, #26
    95b6:	d205      	bcs.n	95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    95b8:	4919      	ldr	r1, [pc, #100]	; (9620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    95ba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    95be:	b109      	cbz	r1, 95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    95c0:	4788      	blx	r1
    95c2:	e008      	b.n	95d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    95c4:	28ff      	cmp	r0, #255	; 0xff
    95c6:	d004      	beq.n	95d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65a>
    95c8:	f240 7144 	movw	r1, #1860	; 0x744
    95cc:	2031      	movs	r0, #49	; 0x31
    95ce:	f7fb fbdb 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95d2:	f001 f94d 	bl	a870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    95d6:	78a0      	ldrb	r0, [r4, #2]
    95d8:	06c0      	lsls	r0, r0, #27
    95da:	d507      	bpl.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    95dc:	68a0      	ldr	r0, [r4, #8]
    95de:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    95e2:	290b      	cmp	r1, #11
    95e4:	d102      	bne.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    95e6:	210c      	movs	r1, #12
    95e8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    95ec:	7860      	ldrb	r0, [r4, #1]
    95ee:	0700      	lsls	r0, r0, #28
    95f0:	d511      	bpl.n	9616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    95f2:	68a0      	ldr	r0, [r4, #8]
    95f4:	2301      	movs	r3, #1
    95f6:	2105      	movs	r1, #5
    95f8:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    95fc:	3078      	adds	r0, #120	; 0x78
    95fe:	f004 fe62 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9602:	b128      	cbz	r0, 9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    9604:	68a1      	ldr	r1, [r4, #8]
    9606:	2508      	movs	r5, #8
    9608:	2000      	movs	r0, #0
    960a:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    960e:	e002      	b.n	9616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    9610:	2000      	movs	r0, #0
    9612:	f7fc fbbb 	bl	5d8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9616:	4628      	mov	r0, r5
    9618:	bd70      	pop	{r4, r5, r6, pc}
    961a:	0000      	.short	0x0000
    961c:	2000014c 	.word	0x2000014c
    9620:	200001c8 	.word	0x200001c8
    9624:	b570      	push	{r4, r5, r6, lr}
    9626:	4c2a      	ldr	r4, [pc, #168]	; (96d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>)
    9628:	2000      	movs	r0, #0
    962a:	78a1      	ldrb	r1, [r4, #2]
    962c:	07c9      	lsls	r1, r1, #31
    962e:	d015      	beq.n	965c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e4>
    9630:	6920      	ldr	r0, [r4, #16]
    9632:	2301      	movs	r3, #1
    9634:	2105      	movs	r1, #5
    9636:	78c5      	ldrb	r5, [r0, #3]
    9638:	68a0      	ldr	r0, [r4, #8]
    963a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    963e:	3078      	adds	r0, #120	; 0x78
    9640:	f004 fe41 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9644:	b158      	cbz	r0, 965e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    9646:	1ead      	subs	r5, r5, #2
    9648:	2d0a      	cmp	r5, #10
    964a:	d206      	bcs.n	965a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    964c:	e8df f005 	tbb	[pc, r5]
    9650:	05050707 	.word	0x05050707
    9654:	05050707 	.word	0x05050707
    9658:	0707      	.short	0x0707
    965a:	2008      	movs	r0, #8
    965c:	bd70      	pop	{r4, r5, r6, pc}
    965e:	6920      	ldr	r0, [r4, #16]
    9660:	f7fd fba4 	bl	6dac <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    9664:	b138      	cbz	r0, 9676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9666:	6920      	ldr	r0, [r4, #16]
    9668:	78c5      	ldrb	r5, [r0, #3]
    966a:	b145      	cbz	r5, 967e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    966c:	2d01      	cmp	r5, #1
    966e:	d006      	beq.n	967e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9670:	2d16      	cmp	r5, #22
    9672:	d118      	bne.n	96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9674:	e003      	b.n	967e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    9676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    967a:	f000 bd73 	b.w	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    967e:	68a0      	ldr	r0, [r4, #8]
    9680:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9684:	f004 fe6d 	bl	e362 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9688:	b168      	cbz	r0, 96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    968a:	68a1      	ldr	r1, [r4, #8]
    968c:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9690:	281f      	cmp	r0, #31
    9692:	d008      	beq.n	96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    9694:	2820      	cmp	r0, #32
    9696:	d003      	beq.n	96a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    9698:	2d16      	cmp	r5, #22
    969a:	d00c      	beq.n	96b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    969c:	2002      	movs	r0, #2
    969e:	bd70      	pop	{r4, r5, r6, pc}
    96a0:	2026      	movs	r0, #38	; 0x26
    96a2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    96a6:	2d1a      	cmp	r5, #26
    96a8:	d207      	bcs.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    96aa:	480a      	ldr	r0, [pc, #40]	; (96d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>)
    96ac:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    96b0:	b118      	cbz	r0, 96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    96b2:	4780      	blx	r0
    96b4:	e003      	b.n	96be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    96b6:	2020      	movs	r0, #32
    96b8:	bd70      	pop	{r4, r5, r6, pc}
    96ba:	f000 fd53 	bl	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    96be:	68a2      	ldr	r2, [r4, #8]
    96c0:	e9f2 1336 	ldrd	r1, r3, [r2, #216]!	; 0xd8
    96c4:	1c49      	adds	r1, r1, #1
    96c6:	f143 0300 	adc.w	r3, r3, #0
    96ca:	e9c2 1300 	strd	r1, r3, [r2]
    96ce:	bd70      	pop	{r4, r5, r6, pc}
    96d0:	2000014c 	.word	0x2000014c
    96d4:	20000160 	.word	0x20000160
    96d8:	b570      	push	{r4, r5, r6, lr}
    96da:	4c22      	ldr	r4, [pc, #136]	; (9764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>)
    96dc:	78a0      	ldrb	r0, [r4, #2]
    96de:	0700      	lsls	r0, r0, #28
    96e0:	d53e      	bpl.n	9760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    96e2:	68a0      	ldr	r0, [r4, #8]
    96e4:	3078      	adds	r0, #120	; 0x78
    96e6:	f006 f92e 	bl	f946 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    96ea:	b148      	cbz	r0, 9700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    96ec:	68a0      	ldr	r0, [r4, #8]
    96ee:	21fe      	movs	r1, #254	; 0xfe
    96f0:	2500      	movs	r5, #0
    96f2:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    96f6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    96fa:	2919      	cmp	r1, #25
    96fc:	d10c      	bne.n	9718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a0>
    96fe:	e004      	b.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x792>
    9700:	f240 714e 	movw	r1, #1870	; 0x74e
    9704:	2031      	movs	r0, #49	; 0x31
    9706:	f7fb fb3f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    970a:	f880 50bb 	strb.w	r5, [r0, #187]	; 0xbb
    970e:	f7ff fd67 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    9712:	68a0      	ldr	r0, [r4, #8]
    9714:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9718:	68a0      	ldr	r0, [r4, #8]
    971a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    971e:	291f      	cmp	r1, #31
    9720:	d002      	beq.n	9728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b0>
    9722:	2927      	cmp	r1, #39	; 0x27
    9724:	d113      	bne.n	974e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    9726:	e00b      	b.n	9740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c8>
    9728:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    972c:	f004 fe19 	bl	e362 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9730:	b108      	cbz	r0, 9736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7be>
    9732:	2026      	movs	r0, #38	; 0x26
    9734:	e000      	b.n	9738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9736:	2020      	movs	r0, #32
    9738:	68a1      	ldr	r1, [r4, #8]
    973a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    973e:	e006      	b.n	974e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    9740:	2101      	movs	r1, #1
    9742:	f880 119d 	strb.w	r1, [r0, #413]	; 0x19d
    9746:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    974a:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    974e:	68a0      	ldr	r0, [r4, #8]
    9750:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9754:	2908      	cmp	r1, #8
    9756:	d103      	bne.n	9760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    9758:	2102      	movs	r1, #2
    975a:	7021      	strb	r1, [r4, #0]
    975c:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9760:	bd70      	pop	{r4, r5, r6, pc}
    9762:	0000      	.short	0x0000
    9764:	2000014c 	.word	0x2000014c
    9768:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    976a:	4606      	mov	r6, r0
    976c:	4668      	mov	r0, sp
    976e:	f7fc f977 	bl	5a60 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9772:	b318      	cbz	r0, 97bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x844>
    9774:	2222      	movs	r2, #34	; 0x22
    9776:	2100      	movs	r1, #0
    9778:	9800      	ldr	r0, [sp, #0]
    977a:	f003 fb46 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    977e:	2103      	movs	r1, #3
    9780:	9800      	ldr	r0, [sp, #0]
    9782:	f005 f873 	bl	e86c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9786:	9800      	ldr	r0, [sp, #0]
    9788:	7801      	ldrb	r1, [r0, #0]
    978a:	f021 0110 	bic.w	r1, r1, #16
    978e:	7001      	strb	r1, [r0, #0]
    9790:	4631      	mov	r1, r6
    9792:	f7fd fb37 	bl	6e04 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9796:	2500      	movs	r5, #0
    9798:	4c5d      	ldr	r4, [pc, #372]	; (9910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    979a:	f644 172f 	movw	r7, #18735	; 0x492f
    979e:	2e0e      	cmp	r6, #14
    97a0:	d07e      	beq.n	98a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    97a2:	dc0e      	bgt.n	97c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    97a4:	f1a6 0602 	sub.w	r6, r6, #2
    97a8:	2e0c      	cmp	r6, #12
    97aa:	d21c      	bcs.n	97e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    97ac:	e8df f006 	tbb	[pc, r6]
    97b0:	a5491b1e 	.word	0xa5491b1e
    97b4:	551b1ea5 	.word	0x551b1ea5
    97b8:	3034a51b 	.word	0x3034a51b
    97bc:	f640 1178 	movw	r1, #2424	; 0x978
    97c0:	e0a1      	b.n	9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    97c2:	2e15      	cmp	r6, #21
    97c4:	d05b      	beq.n	987e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    97c6:	dc08      	bgt.n	97da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x862>
    97c8:	2e11      	cmp	r6, #17
    97ca:	d014      	beq.n	97f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    97cc:	2e12      	cmp	r6, #18
    97ce:	d01e      	beq.n	980e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    97d0:	2e13      	cmp	r6, #19
    97d2:	d01c      	beq.n	980e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    97d4:	2e14      	cmp	r6, #20
    97d6:	d106      	bne.n	97e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    97d8:	e051      	b.n	987e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    97da:	2e16      	cmp	r6, #22
    97dc:	d027      	beq.n	982e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b6>
    97de:	2e17      	cmp	r6, #23
    97e0:	d068      	beq.n	98b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x93c>
    97e2:	2eff      	cmp	r6, #255	; 0xff
    97e4:	d071      	beq.n	98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x952>
    97e6:	f640 11eb 	movw	r1, #2539	; 0x9eb
    97ea:	e08c      	b.n	9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    97ec:	68a1      	ldr	r1, [r4, #8]
    97ee:	9800      	ldr	r0, [sp, #0]
    97f0:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    97f4:	e00e      	b.n	9814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    97f6:	68a0      	ldr	r0, [r4, #8]
    97f8:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    97fc:	9800      	ldr	r0, [sp, #0]
    97fe:	f005 f811 	bl	e824 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9802:	68a0      	ldr	r0, [r4, #8]
    9804:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9808:	9800      	ldr	r0, [sp, #0]
    980a:	f005 f80d 	bl	e828 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    980e:	e074      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9810:	9800      	ldr	r0, [sp, #0]
    9812:	2106      	movs	r1, #6
    9814:	7101      	strb	r1, [r0, #4]
    9816:	e070      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9818:	9800      	ldr	r0, [sp, #0]
    981a:	210c      	movs	r1, #12
    981c:	7101      	strb	r1, [r0, #4]
    981e:	2159      	movs	r1, #89	; 0x59
    9820:	7141      	strb	r1, [r0, #5]
    9822:	7185      	strb	r5, [r0, #6]
    9824:	2136      	movs	r1, #54	; 0x36
    9826:	71c1      	strb	r1, [r0, #7]
    9828:	2111      	movs	r1, #17
    982a:	7201      	strb	r1, [r0, #8]
    982c:	e065      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    982e:	9800      	ldr	r0, [sp, #0]
    9830:	f8d4 1008 	ldr.w	r1, [r4, #8]
    9834:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    9838:	7102      	strb	r2, [r0, #4]
    983a:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    983e:	7141      	strb	r1, [r0, #5]
    9840:	e05b      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9842:	68a1      	ldr	r1, [r4, #8]
    9844:	9800      	ldr	r0, [sp, #0]
    9846:	f501 7194 	add.w	r1, r1, #296	; 0x128
    984a:	f005 f800 	bl	e84e <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    984e:	68a1      	ldr	r1, [r4, #8]
    9850:	9800      	ldr	r0, [sp, #0]
    9852:	31f4      	adds	r1, #244	; 0xf4
    9854:	f004 fff8 	bl	e848 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    9858:	e04f      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    985a:	f001 fda9 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    985e:	4038      	ands	r0, r7
    9860:	e9cd 0501 	strd	r0, r5, [sp, #4]
    9864:	68a1      	ldr	r1, [r4, #8]
    9866:	f89d 0004 	ldrb.w	r0, [sp, #4]
    986a:	f891 10c4 	ldrb.w	r1, [r1, #196]	; 0xc4
    986e:	4008      	ands	r0, r1
    9870:	f88d 0004 	strb.w	r0, [sp, #4]
    9874:	a901      	add	r1, sp, #4
    9876:	9800      	ldr	r0, [sp, #0]
    9878:	f004 fff3 	bl	e862 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    987c:	e03d      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    987e:	68a0      	ldr	r0, [r4, #8]
    9880:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    9884:	9800      	ldr	r0, [sp, #0]
    9886:	f004 fff9 	bl	e87c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    988a:	68a0      	ldr	r0, [r4, #8]
    988c:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    9890:	9800      	ldr	r0, [sp, #0]
    9892:	f004 fff7 	bl	e884 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9896:	68a0      	ldr	r0, [r4, #8]
    9898:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    989c:	9800      	ldr	r0, [sp, #0]
    989e:	e000      	b.n	98a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92a>
    98a0:	e014      	b.n	98cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x954>
    98a2:	f004 fff3 	bl	e88c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    98a6:	68a0      	ldr	r0, [r4, #8]
    98a8:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    98ac:	9800      	ldr	r0, [sp, #0]
    98ae:	f004 fff1 	bl	e894 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    98b2:	e022      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    98b4:	68a1      	ldr	r1, [r4, #8]
    98b6:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    98ba:	2801      	cmp	r0, #1
    98bc:	9800      	ldr	r0, [sp, #0]
    98be:	d0b9      	beq.n	9834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8bc>
    98c0:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    98c4:	7102      	strb	r2, [r0, #4]
    98c6:	7849      	ldrb	r1, [r1, #1]
    98c8:	e7b9      	b.n	983e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    98ca:	e00e      	b.n	98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    98cc:	9501      	str	r5, [sp, #4]
    98ce:	9502      	str	r5, [sp, #8]
    98d0:	f001 fd6e 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    98d4:	4038      	ands	r0, r7
    98d6:	f88d 0004 	strb.w	r0, [sp, #4]
    98da:	0a00      	lsrs	r0, r0, #8
    98dc:	f88d 0005 	strb.w	r0, [sp, #5]
    98e0:	a901      	add	r1, sp, #4
    98e2:	9800      	ldr	r0, [sp, #0]
    98e4:	f004 ffb8 	bl	e858 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    98e8:	e007      	b.n	98fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    98ea:	68a0      	ldr	r0, [r4, #8]
    98ec:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    98f0:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    98f4:	9800      	ldr	r0, [sp, #0]
    98f6:	f004 ff99 	bl	e82c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    98fa:	f7fc f88b 	bl	5a14 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    98fe:	2800      	cmp	r0, #0
    9900:	d104      	bne.n	990c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    9902:	f640 11ef 	movw	r1, #2543	; 0x9ef
    9906:	2031      	movs	r0, #49	; 0x31
    9908:	f7fb fa3e 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    990c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    990e:	0000      	.short	0x0000
    9910:	2000014c 	.word	0x2000014c
    9914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9918:	4c88      	ldr	r4, [pc, #544]	; (9b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>)
    991a:	4682      	mov	sl, r0
    991c:	4689      	mov	r9, r1
    991e:	68a0      	ldr	r0, [r4, #8]
    9920:	8800      	ldrh	r0, [r0, #0]
    9922:	f7fb fe61 	bl	55e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9926:	0006      	movs	r6, r0
    9928:	d00a      	beq.n	9940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    992a:	8860      	ldrh	r0, [r4, #2]
    992c:	f04f 0500 	mov.w	r5, #0
    9930:	05c0      	lsls	r0, r0, #23
    9932:	68a0      	ldr	r0, [r4, #8]
    9934:	d509      	bpl.n	994a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9936:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
    993a:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
    993e:	e008      	b.n	9952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    9940:	f640 5197 	movw	r1, #3479	; 0xd97
    9944:	2031      	movs	r0, #49	; 0x31
    9946:	f7fb fa1f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    994a:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    994e:	1c49      	adds	r1, r1, #1
    9950:	8001      	strh	r1, [r0, #0]
    9952:	f001 f941 	bl	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    9956:	f04f 0801 	mov.w	r8, #1
    995a:	b328      	cbz	r0, 99a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    995c:	8860      	ldrh	r0, [r4, #2]
    995e:	0500      	lsls	r0, r0, #20
    9960:	d506      	bpl.n	9970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    9962:	68a0      	ldr	r0, [r4, #8]
    9964:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9968:	b111      	cbz	r1, 9970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    996a:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    996e:	e01b      	b.n	99a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    9970:	68a0      	ldr	r0, [r4, #8]
    9972:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9976:	1c49      	adds	r1, r1, #1
    9978:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    997c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    9980:	428a      	cmp	r2, r1
    9982:	d301      	bcc.n	9988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    9984:	1a53      	subs	r3, r2, r1
    9986:	e000      	b.n	998a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    9988:	2300      	movs	r3, #0
    998a:	88a7      	ldrh	r7, [r4, #4]
    998c:	1d7f      	adds	r7, r7, #5
    998e:	42bb      	cmp	r3, r7
    9990:	d801      	bhi.n	9996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9992:	f880 80aa 	strb.w	r8, [r0, #170]	; 0xaa
    9996:	4291      	cmp	r1, r2
    9998:	d306      	bcc.n	99a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    999a:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    999e:	21ff      	movs	r1, #255	; 0xff
    99a0:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    99a4:	f7fd fb26 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    99a8:	8860      	ldrh	r0, [r4, #2]
    99aa:	f04f 0702 	mov.w	r7, #2
    99ae:	f410 7f40 	tst.w	r0, #768	; 0x300
    99b2:	d00e      	beq.n	99d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    99b4:	68a0      	ldr	r0, [r4, #8]
    99b6:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    99ba:	b111      	cbz	r1, 99c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    99bc:	2903      	cmp	r1, #3
    99be:	d108      	bne.n	99d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    99c0:	e002      	b.n	99c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    99c2:	f880 8089 	strb.w	r8, [r0, #137]	; 0x89
    99c6:	e001      	b.n	99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    99c8:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    99cc:	2101      	movs	r1, #1
    99ce:	f7fe fce9 	bl	83a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    99d2:	68a0      	ldr	r0, [r4, #8]
    99d4:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    99d8:	2901      	cmp	r1, #1
    99da:	d104      	bne.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    99dc:	8861      	ldrh	r1, [r4, #2]
    99de:	0549      	lsls	r1, r1, #21
    99e0:	d501      	bpl.n	99e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    99e2:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    99e6:	f1ba 0f00 	cmp.w	sl, #0
    99ea:	d176      	bne.n	9ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    99ec:	78a1      	ldrb	r1, [r4, #2]
    99ee:	0649      	lsls	r1, r1, #25
    99f0:	d502      	bpl.n	99f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    99f2:	f8a0 5130 	strh.w	r5, [r0, #304]	; 0x130
    99f6:	e004      	b.n	9a02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8a>
    99f8:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    99fc:	1c49      	adds	r1, r1, #1
    99fe:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9a02:	4648      	mov	r0, r9
    9a04:	f7ff fdbe 	bl	9584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x60c>
    9a08:	ea40 0009 	orr.w	r0, r0, r9
    9a0c:	4681      	mov	r9, r0
    9a0e:	f7ff fd23 	bl	9458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e0>
    9a12:	68a7      	ldr	r7, [r4, #8]
    9a14:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
    9a18:	1c40      	adds	r0, r0, #1
    9a1a:	f8a7 0110 	strh.w	r0, [r7, #272]	; 0x110
    9a1e:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
    9a22:	b128      	cbz	r0, 9a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    9a24:	f7fc fa1e 	bl	5e64 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9a28:	b1b0      	cbz	r0, 9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a2a:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9a2e:	e013      	b.n	9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a30:	f7fc f898 	bl	5b64 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9a34:	b108      	cbz	r0, 9a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac2>
    9a36:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9a3a:	f7fc f88d 	bl	5b58 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9a3e:	b158      	cbz	r0, 9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a40:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    9a44:	1c40      	adds	r0, r0, #1
    9a46:	b2c0      	uxtb	r0, r0
    9a48:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    9a4c:	2802      	cmp	r0, #2
    9a4e:	d903      	bls.n	9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a50:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9a54:	f887 511c 	strb.w	r5, [r7, #284]	; 0x11c
    9a58:	68a0      	ldr	r0, [r4, #8]
    9a5a:	2301      	movs	r3, #1
    9a5c:	2100      	movs	r1, #0
    9a5e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9a62:	3078      	adds	r0, #120	; 0x78
    9a64:	f004 fc2f 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a68:	b920      	cbnz	r0, 9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafc>
    9a6a:	68a0      	ldr	r0, [r4, #8]
    9a6c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9a70:	280c      	cmp	r0, #12
    9a72:	d15f      	bne.n	9b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9a74:	68a0      	ldr	r0, [r4, #8]
    9a76:	2301      	movs	r3, #1
    9a78:	2100      	movs	r1, #0
    9a7a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a7e:	3078      	adds	r0, #120	; 0x78
    9a80:	f004 fc21 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a84:	b350      	cbz	r0, 9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9a86:	68a0      	ldr	r0, [r4, #8]
    9a88:	2301      	movs	r3, #1
    9a8a:	2100      	movs	r1, #0
    9a8c:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9a90:	3078      	adds	r0, #120	; 0x78
    9a92:	f004 fc18 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a96:	b308      	cbz	r0, 9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9a98:	68a0      	ldr	r0, [r4, #8]
    9a9a:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9a9e:	2902      	cmp	r1, #2
    9aa0:	d148      	bne.n	9b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9aa2:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    9aa6:	b9c8      	cbnz	r0, 9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9aa8:	4630      	mov	r0, r6
    9aaa:	f003 fea3 	bl	d7f4 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9aae:	b1a8      	cbz	r0, 9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9ab0:	68a0      	ldr	r0, [r4, #8]
    9ab2:	3078      	adds	r0, #120	; 0x78
    9ab4:	f005 ff47 	bl	f946 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9ab8:	b980      	cbnz	r0, 9adc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9aba:	68a1      	ldr	r1, [r4, #8]
    9abc:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    9ac0:	2801      	cmp	r0, #1
    9ac2:	d937      	bls.n	9b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9ac4:	f881 8112 	strb.w	r8, [r1, #274]	; 0x112
    9ac8:	f8b1 20ae 	ldrh.w	r2, [r1, #174]	; 0xae
    9acc:	f8b1 00ac 	ldrh.w	r0, [r1, #172]	; 0xac
    9ad0:	1e93      	subs	r3, r2, #2
    9ad2:	4298      	cmp	r0, r3
    9ad4:	db03      	blt.n	9ade <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    9ad6:	2001      	movs	r0, #1
    9ad8:	e004      	b.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    9ada:	e01d      	b.n	9b18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba0>
    9adc:	e02a      	b.n	9b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9ade:	1a10      	subs	r0, r2, r0
    9ae0:	1e40      	subs	r0, r0, #1
    9ae2:	b280      	uxth	r0, r0
    9ae4:	f8b1 2110 	ldrh.w	r2, [r1, #272]	; 0x110
    9ae8:	88a3      	ldrh	r3, [r4, #4]
    9aea:	429a      	cmp	r2, r3
    9aec:	d301      	bcc.n	9af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    9aee:	2201      	movs	r2, #1
    9af0:	e002      	b.n	9af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9af2:	1a9a      	subs	r2, r3, r2
    9af4:	1c52      	adds	r2, r2, #1
    9af6:	b292      	uxth	r2, r2
    9af8:	4290      	cmp	r0, r2
    9afa:	d900      	bls.n	9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb86>
    9afc:	4610      	mov	r0, r2
    9afe:	2801      	cmp	r0, #1
    9b00:	d102      	bne.n	9b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb90>
    9b02:	bf00      	nop
    9b04:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    9b08:	68a1      	ldr	r1, [r4, #8]
    9b0a:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9b0e:	4410      	add	r0, r2
    9b10:	f8a1 010c 	strh.w	r0, [r1, #268]	; 0x10c
    9b14:	f001 f92c 	bl	ad70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df8>
    9b18:	78a0      	ldrb	r0, [r4, #2]
    9b1a:	464a      	mov	r2, r9
    9b1c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9b20:	4650      	mov	r0, sl
    9b22:	f001 f86d 	bl	ac00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c88>
    9b26:	68a0      	ldr	r0, [r4, #8]
    9b28:	f880 5113 	strb.w	r5, [r0, #275]	; 0x113
    9b2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b30:	f7fb bf5a 	b.w	59e8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9b34:	2001      	movs	r0, #1
    9b36:	68a1      	ldr	r1, [r4, #8]
    9b38:	e7e4      	b.n	9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9b3a:	0000      	.short	0x0000
    9b3c:	2000014c 	.word	0x2000014c
    9b40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9b42:	4c58      	ldr	r4, [pc, #352]	; (9ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>)
    9b44:	2301      	movs	r3, #1
    9b46:	2100      	movs	r1, #0
    9b48:	68a0      	ldr	r0, [r4, #8]
    9b4a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9b4e:	3078      	adds	r0, #120	; 0x78
    9b50:	f004 fbb9 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b54:	2800      	cmp	r0, #0
    9b56:	d07d      	beq.n	9c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcdc>
    9b58:	68a0      	ldr	r0, [r4, #8]
    9b5a:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    9b5e:	2500      	movs	r5, #0
    9b60:	b139      	cbz	r1, 9b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbfa>
    9b62:	2100      	movs	r1, #0
    9b64:	200e      	movs	r0, #14
    9b66:	f000 f89f 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9b6a:	68a0      	ldr	r0, [r4, #8]
    9b6c:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    9b70:	e095      	b.n	9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9b72:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    9b76:	b119      	cbz	r1, 9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc08>
    9b78:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9b7c:	0789      	lsls	r1, r1, #30
    9b7e:	d016      	beq.n	9bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc36>
    9b80:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9b84:	f88d 1004 	strb.w	r1, [sp, #4]
    9b88:	9901      	ldr	r1, [sp, #4]
    9b8a:	9101      	str	r1, [sp, #4]
    9b8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9b90:	b141      	cbz	r1, 9ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2c>
    9b92:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9b96:	f88d 1000 	strb.w	r1, [sp]
    9b9a:	9900      	ldr	r1, [sp, #0]
    9b9c:	9100      	str	r1, [sp, #0]
    9b9e:	f89d 1000 	ldrb.w	r1, [sp]
    9ba2:	b189      	cbz	r1, 9bc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc50>
    9ba4:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9ba8:	2901      	cmp	r1, #1
    9baa:	d02f      	beq.n	9c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9bac:	e071      	b.n	9c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9bae:	2100      	movs	r1, #0
    9bb0:	200c      	movs	r0, #12
    9bb2:	f000 f879 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9bb6:	68a0      	ldr	r0, [r4, #8]
    9bb8:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    9bbc:	f041 0101 	orr.w	r1, r1, #1
    9bc0:	7001      	strb	r1, [r0, #0]
    9bc2:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
    9bc6:	e06a      	b.n	9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9bc8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9bcc:	2924      	cmp	r1, #36	; 0x24
    9bce:	d01b      	beq.n	9c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9bd0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9bd4:	2924      	cmp	r1, #36	; 0x24
    9bd6:	d017      	beq.n	9c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9bd8:	f05f 0300 	movs.w	r3, #0
    9bdc:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9be0:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9be4:	f004 ffa0 	bl	eb28 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9be8:	68a0      	ldr	r0, [r4, #8]
    9bea:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    9bee:	2100      	movs	r1, #0
    9bf0:	2014      	movs	r0, #20
    9bf2:	f000 f859 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9bf6:	68a1      	ldr	r1, [r4, #8]
    9bf8:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9bfc:	8bc2      	ldrh	r2, [r0, #30]
    9bfe:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9c02:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9c04:	8048      	strh	r0, [r1, #2]
    9c06:	e04a      	b.n	9c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9c08:	2301      	movs	r3, #1
    9c0a:	e7e7      	b.n	9bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc64>
    9c0c:	f890 11bf 	ldrb.w	r1, [r0, #447]	; 0x1bf
    9c10:	f88d 1000 	strb.w	r1, [sp]
    9c14:	9900      	ldr	r1, [sp, #0]
    9c16:	9100      	str	r1, [sp, #0]
    9c18:	f89d 1000 	ldrb.w	r1, [sp]
    9c1c:	bb31      	cbnz	r1, 9c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    9c1e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c22:	2301      	movs	r3, #1
    9c24:	210b      	movs	r1, #11
    9c26:	3078      	adds	r0, #120	; 0x78
    9c28:	f004 fb4d 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c2c:	b9f0      	cbnz	r0, 9c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    9c2e:	68a0      	ldr	r0, [r4, #8]
    9c30:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9c34:	f005 fe8f 	bl	f956 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9c38:	4605      	mov	r5, r0
    9c3a:	68a0      	ldr	r0, [r4, #8]
    9c3c:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9c40:	f005 fe89 	bl	f956 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9c44:	4606      	mov	r6, r0
    9c46:	68a0      	ldr	r0, [r4, #8]
    9c48:	f890 11c0 	ldrb.w	r1, [r0, #448]	; 0x1c0
    9c4c:	4628      	mov	r0, r5
    9c4e:	f005 fe8d 	bl	f96c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9c52:	e000      	b.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    9c54:	e01e      	b.n	9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9c56:	b150      	cbz	r0, 9c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9c58:	68a0      	ldr	r0, [r4, #8]
    9c5a:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    9c5e:	4630      	mov	r0, r6
    9c60:	f005 fe84 	bl	f96c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9c64:	b118      	cbz	r0, 9c6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9c66:	2000      	movs	r0, #0
    9c68:	f000 f922 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9c6c:	e011      	b.n	9c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9c6e:	68a0      	ldr	r0, [r4, #8]
    9c70:	2301      	movs	r3, #1
    9c72:	2103      	movs	r1, #3
    9c74:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c78:	3078      	adds	r0, #120	; 0x78
    9c7a:	f004 fb24 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c7e:	b940      	cbnz	r0, 9c92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9c80:	68a0      	ldr	r0, [r4, #8]
    9c82:	2301      	movs	r3, #1
    9c84:	2102      	movs	r1, #2
    9c86:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c8a:	3078      	adds	r0, #120	; 0x78
    9c8c:	f004 fb1b 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c90:	b108      	cbz	r0, 9c96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1e>
    9c92:	2000      	movs	r0, #0
    9c94:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9c96:	2100      	movs	r1, #0
    9c98:	2016      	movs	r0, #22
    9c9a:	f000 f805 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9c9e:	2001      	movs	r0, #1
    9ca0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9ca2:	0000      	.short	0x0000
    9ca4:	2000014c 	.word	0x2000014c
    9ca8:	b570      	push	{r4, r5, r6, lr}
    9caa:	4c0d      	ldr	r4, [pc, #52]	; (9ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    9cac:	4606      	mov	r6, r0
    9cae:	460d      	mov	r5, r1
    9cb0:	68a0      	ldr	r0, [r4, #8]
    9cb2:	3078      	adds	r0, #120	; 0x78
    9cb4:	f005 fe47 	bl	f946 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9cb8:	b120      	cbz	r0, 9cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9cba:	f640 2102 	movw	r1, #2562	; 0xa02
    9cbe:	2031      	movs	r0, #49	; 0x31
    9cc0:	f7fb f862 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cc4:	68a2      	ldr	r2, [r4, #8]
    9cc6:	2000      	movs	r0, #0
    9cc8:	f882 60fc 	strb.w	r6, [r2, #252]	; 0xfc
    9ccc:	b115      	cbz	r5, 9cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd5c>
    9cce:	f8a2 00b8 	strh.w	r0, [r2, #184]	; 0xb8
    9cd2:	bd70      	pop	{r4, r5, r6, pc}
    9cd4:	f822 0fb2 	strh.w	r0, [r2, #178]!
    9cd8:	2001      	movs	r0, #1
    9cda:	7110      	strb	r0, [r2, #4]
    9cdc:	bd70      	pop	{r4, r5, r6, pc}
    9cde:	0000      	.short	0x0000
    9ce0:	2000014c 	.word	0x2000014c
    9ce4:	b570      	push	{r4, r5, r6, lr}
    9ce6:	4c1b      	ldr	r4, [pc, #108]	; (9d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xddc>)
    9ce8:	2500      	movs	r5, #0
    9cea:	68a0      	ldr	r0, [r4, #8]
    9cec:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    9cf0:	2901      	cmp	r1, #1
    9cf2:	d00a      	beq.n	9d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd92>
    9cf4:	2902      	cmp	r1, #2
    9cf6:	d12c      	bne.n	9d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9cf8:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9cfc:	2206      	movs	r2, #6
    9cfe:	b1a1      	cbz	r1, 9d2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb2>
    9d00:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9d04:	2101      	movs	r1, #1
    9d06:	2002      	movs	r0, #2
    9d08:	e01e      	b.n	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9d0a:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    9d0e:	2900      	cmp	r1, #0
    9d10:	d11f      	bne.n	9d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9d12:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9d16:	f500 7190 	add.w	r1, r0, #288	; 0x120
    9d1a:	2200      	movs	r2, #0
    9d1c:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    9d20:	f004 fa89 	bl	e236 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9d24:	2101      	movs	r1, #1
    9d26:	2005      	movs	r0, #5
    9d28:	e00e      	b.n	9d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9d2a:	21c4      	movs	r1, #196	; 0xc4
    9d2c:	5c09      	ldrb	r1, [r1, r0]
    9d2e:	0889      	lsrs	r1, r1, #2
    9d30:	f011 0f01 	tst.w	r1, #1
    9d34:	d005      	beq.n	9d42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdca>
    9d36:	2311      	movs	r3, #17
    9d38:	2103      	movs	r1, #3
    9d3a:	f800 1ffe 	strb.w	r1, [r0, #254]!
    9d3e:	7042      	strb	r2, [r0, #1]
    9d40:	e000      	b.n	9d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdcc>
    9d42:	230d      	movs	r3, #13
    9d44:	2101      	movs	r1, #1
    9d46:	4618      	mov	r0, r3
    9d48:	f7ff ffae 	bl	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9d4c:	68a0      	ldr	r0, [r4, #8]
    9d4e:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    9d52:	bd70      	pop	{r4, r5, r6, pc}
    9d54:	2000014c 	.word	0x2000014c
    9d58:	b570      	push	{r4, r5, r6, lr}
    9d5a:	4a2b      	ldr	r2, [pc, #172]	; (9e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>)
    9d5c:	4603      	mov	r3, r0
    9d5e:	8850      	ldrh	r0, [r2, #2]
    9d60:	4318      	orrs	r0, r3
    9d62:	8050      	strh	r0, [r2, #2]
    9d64:	4610      	mov	r0, r2
    9d66:	2b40      	cmp	r3, #64	; 0x40
    9d68:	6880      	ldr	r0, [r0, #8]
    9d6a:	d00d      	beq.n	9d88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    9d6c:	079e      	lsls	r6, r3, #30
    9d6e:	f04f 0500 	mov.w	r5, #0
    9d72:	f04f 0401 	mov.w	r4, #1
    9d76:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9d7a:	d50c      	bpl.n	9d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    9d7c:	b14e      	cbz	r6, 9d92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    9d7e:	f640 5104 	movw	r1, #3332	; 0xd04
    9d82:	2031      	movs	r0, #49	; 0x31
    9d84:	f7fb f800 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9d8c:	2104      	movs	r1, #4
    9d8e:	f7fe bb09 	b.w	83a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9d92:	60d1      	str	r1, [r2, #12]
    9d94:	e01c      	b.n	9dd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe58>
    9d96:	b1c6      	cbz	r6, 9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9d98:	6111      	str	r1, [r2, #16]
    9d9a:	78c9      	ldrb	r1, [r1, #3]
    9d9c:	2906      	cmp	r1, #6
    9d9e:	d002      	beq.n	9da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2e>
    9da0:	290b      	cmp	r1, #11
    9da2:	d112      	bne.n	9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9da4:	e009      	b.n	9dba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    9da6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9daa:	2917      	cmp	r1, #23
    9dac:	d10d      	bne.n	9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9dae:	2100      	movs	r1, #0
    9db0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9db4:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
    9db8:	e007      	b.n	9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9dba:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9dbe:	2911      	cmp	r1, #17
    9dc0:	d103      	bne.n	9dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9dc2:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    9dc6:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    9dca:	0799      	lsls	r1, r3, #30
    9dcc:	d516      	bpl.n	9dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9dce:	68d1      	ldr	r1, [r2, #12]
    9dd0:	78c9      	ldrb	r1, [r1, #3]
    9dd2:	2905      	cmp	r1, #5
    9dd4:	d002      	beq.n	9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    9dd6:	290b      	cmp	r1, #11
    9dd8:	d110      	bne.n	9dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9dda:	e009      	b.n	9df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    9ddc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9de0:	2915      	cmp	r1, #21
    9de2:	d10b      	bne.n	9dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9de4:	2100      	movs	r1, #0
    9de6:	e9e0 1136 	strd	r1, r1, [r0, #216]!	; 0xd8
    9dea:	f800 4c4d 	strb.w	r4, [r0, #-77]
    9dee:	e005      	b.n	9dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9df0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9df4:	2910      	cmp	r1, #16
    9df6:	d101      	bne.n	9dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9df8:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    9dfc:	0698      	lsls	r0, r3, #26
    9dfe:	d501      	bpl.n	9e04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    9e00:	2008      	movs	r0, #8
    9e02:	7050      	strb	r0, [r2, #1]
    9e04:	bd70      	pop	{r4, r5, r6, pc}
    9e06:	0000      	.short	0x0000
    9e08:	2000014c 	.word	0x2000014c
    9e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e10:	4c26      	ldr	r4, [pc, #152]	; (9eac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf34>)
    9e12:	2501      	movs	r5, #1
    9e14:	68a2      	ldr	r2, [r4, #8]
    9e16:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9e1a:	b108      	cbz	r0, 9e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea8>
    9e1c:	2601      	movs	r6, #1
    9e1e:	e000      	b.n	9e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeaa>
    9e20:	2600      	movs	r6, #0
    9e22:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9e26:	b109      	cbz	r1, 9e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    9e28:	2701      	movs	r7, #1
    9e2a:	e000      	b.n	9e2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb6>
    9e2c:	2700      	movs	r7, #0
    9e2e:	b90e      	cbnz	r6, 9e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>
    9e30:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    9e34:	b90f      	cbnz	r7, 9e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec2>
    9e36:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    9e3a:	f102 0366 	add.w	r3, r2, #102	; 0x66
    9e3e:	7218      	strb	r0, [r3, #8]
    9e40:	7259      	strb	r1, [r3, #9]
    9e42:	20ff      	movs	r0, #255	; 0xff
    9e44:	7298      	strb	r0, [r3, #10]
    9e46:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9e4a:	2801      	cmp	r0, #1
    9e4c:	d001      	beq.n	9e52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    9e4e:	b906      	cbnz	r6, 9e52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    9e50:	b117      	cbz	r7, 9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    9e52:	2000      	movs	r0, #0
    9e54:	f000 f82c 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9e58:	68a0      	ldr	r0, [r4, #8]
    9e5a:	3030      	adds	r0, #48	; 0x30
    9e5c:	f004 fed5 	bl	ec0a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9e60:	4606      	mov	r6, r0
    9e62:	2105      	movs	r1, #5
    9e64:	68a0      	ldr	r0, [r4, #8]
    9e66:	f7fe fa9d 	bl	83a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9e6a:	68a0      	ldr	r0, [r4, #8]
    9e6c:	3030      	adds	r0, #48	; 0x30
    9e6e:	f004 fecc 	bl	ec0a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9e72:	4607      	mov	r7, r0
    9e74:	42be      	cmp	r6, r7
    9e76:	d20a      	bcs.n	9e8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    9e78:	f7f8 fb72 	bl	2560 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9e7c:	4601      	mov	r1, r0
    9e7e:	1bb8      	subs	r0, r7, r6
    9e80:	2865      	cmp	r0, #101	; 0x65
    9e82:	d200      	bcs.n	9e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    9e84:	2065      	movs	r0, #101	; 0x65
    9e86:	f7f8 faa3 	bl	23d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9e8a:	b100      	cbz	r0, 9e8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    9e8c:	2500      	movs	r5, #0
    9e8e:	68a0      	ldr	r0, [r4, #8]
    9e90:	f004 fe65 	bl	eb5e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9e94:	b130      	cbz	r0, 9ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2c>
    9e96:	68a1      	ldr	r1, [r4, #8]
    9e98:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9e9c:	8808      	ldrh	r0, [r1, #0]
    9e9e:	3130      	adds	r1, #48	; 0x30
    9ea0:	f004 fe1e 	bl	eae0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9ea4:	4628      	mov	r0, r5
    9ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9eaa:	0000      	.short	0x0000
    9eac:	2000014c 	.word	0x2000014c
    9eb0:	b510      	push	{r4, lr}
    9eb2:	4c10      	ldr	r4, [pc, #64]	; (9ef4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>)
    9eb4:	68a1      	ldr	r1, [r4, #8]
    9eb6:	880a      	ldrh	r2, [r1, #0]
    9eb8:	f8a1 2216 	strh.w	r2, [r1, #534]	; 0x216
    9ebc:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    9ec0:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    9ec4:	f005 fd47 	bl	f956 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9ec8:	68a1      	ldr	r1, [r4, #8]
    9eca:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    9ece:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    9ed2:	f005 fd40 	bl	f956 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9ed6:	68a2      	ldr	r2, [r4, #8]
    9ed8:	f202 2112 	addw	r1, r2, #530	; 0x212
    9edc:	f882 0219 	strb.w	r0, [r2, #537]	; 0x219
    9ee0:	20ff      	movs	r0, #255	; 0xff
    9ee2:	7008      	strb	r0, [r1, #0]
    9ee4:	2000      	movs	r0, #0
    9ee6:	f882 01be 	strb.w	r0, [r2, #446]	; 0x1be
    9eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9eee:	f7fd b881 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ef2:	0000      	.short	0x0000
    9ef4:	2000014c 	.word	0x2000014c
    9ef8:	b510      	push	{r4, lr}
    9efa:	4c15      	ldr	r4, [pc, #84]	; (9f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    9efc:	2301      	movs	r3, #1
    9efe:	2100      	movs	r1, #0
    9f00:	68a0      	ldr	r0, [r4, #8]
    9f02:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f06:	3078      	adds	r0, #120	; 0x78
    9f08:	f004 f9dd 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f0c:	b190      	cbz	r0, 9f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfbc>
    9f0e:	6920      	ldr	r0, [r4, #16]
    9f10:	f004 fc20 	bl	e754 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9f14:	68a1      	ldr	r1, [r4, #8]
    9f16:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    9f1a:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9f1e:	f005 fd33 	bl	f988 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9f22:	b148      	cbz	r0, 9f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc0>
    9f24:	68a0      	ldr	r0, [r4, #8]
    9f26:	2128      	movs	r1, #40	; 0x28
    9f28:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    9f2c:	307e      	adds	r0, #126	; 0x7e
    9f2e:	21ff      	movs	r1, #255	; 0xff
    9f30:	7781      	strb	r1, [r0, #30]
    9f32:	e00b      	b.n	9f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>
    9f34:	2001      	movs	r0, #1
    9f36:	bd10      	pop	{r4, pc}
    9f38:	68a1      	ldr	r1, [r4, #8]
    9f3a:	6920      	ldr	r0, [r4, #16]
    9f3c:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    9f40:	f004 fc03 	bl	e74a <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9f44:	68a1      	ldr	r1, [r4, #8]
    9f46:	200b      	movs	r0, #11
    9f48:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9f4c:	2000      	movs	r0, #0
    9f4e:	bd10      	pop	{r4, pc}
    9f50:	2000014c 	.word	0x2000014c
    9f54:	b570      	push	{r4, r5, r6, lr}
    9f56:	4c29      	ldr	r4, [pc, #164]	; (9ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    9f58:	2301      	movs	r3, #1
    9f5a:	2100      	movs	r1, #0
    9f5c:	68a0      	ldr	r0, [r4, #8]
    9f5e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f62:	3078      	adds	r0, #120	; 0x78
    9f64:	f004 f9af 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f68:	b1b8      	cbz	r0, 9f9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1022>
    9f6a:	2100      	movs	r1, #0
    9f6c:	6920      	ldr	r0, [r4, #16]
    9f6e:	f004 fbc4 	bl	e6fa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9f72:	b1a0      	cbz	r0, 9f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1026>
    9f74:	6920      	ldr	r0, [r4, #16]
    9f76:	68a1      	ldr	r1, [r4, #8]
    9f78:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9f7c:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    9f80:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9f84:	f005 fd00 	bl	f988 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9f88:	b168      	cbz	r0, 9fa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102e>
    9f8a:	68a0      	ldr	r0, [r4, #8]
    9f8c:	2128      	movs	r1, #40	; 0x28
    9f8e:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    9f92:	307e      	adds	r0, #126	; 0x7e
    9f94:	21ff      	movs	r1, #255	; 0xff
    9f96:	7781      	strb	r1, [r0, #30]
    9f98:	e02e      	b.n	9ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1080>
    9f9a:	2001      	movs	r0, #1
    9f9c:	bd70      	pop	{r4, r5, r6, pc}
    9f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fa2:	f000 b8df 	b.w	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    9fa6:	6920      	ldr	r0, [r4, #16]
    9fa8:	f004 fbd7 	bl	e75a <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9fac:	f004 f96e 	bl	e28c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9fb0:	4605      	mov	r5, r0
    9fb2:	68a0      	ldr	r0, [r4, #8]
    9fb4:	4629      	mov	r1, r5
    9fb6:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    9fba:	6920      	ldr	r0, [r4, #16]
    9fbc:	7900      	ldrb	r0, [r0, #4]
    9fbe:	f004 faf0 	bl	e5a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9fc2:	68a1      	ldr	r1, [r4, #8]
    9fc4:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    9fc8:	6920      	ldr	r0, [r4, #16]
    9fca:	4629      	mov	r1, r5
    9fcc:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9fd0:	f004 fae3 	bl	e59a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9fd4:	68a1      	ldr	r1, [r4, #8]
    9fd6:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    9fda:	6920      	ldr	r0, [r4, #16]
    9fdc:	f004 fbc0 	bl	e760 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9fe0:	68a1      	ldr	r1, [r4, #8]
    9fe2:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    9fe6:	6920      	ldr	r0, [r4, #16]
    9fe8:	f004 fbbd 	bl	e766 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9fec:	68a1      	ldr	r1, [r4, #8]
    9fee:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    9ff2:	200d      	movs	r0, #13
    9ff4:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9ff8:	2000      	movs	r0, #0
    9ffa:	bd70      	pop	{r4, r5, r6, pc}
    9ffc:	2000014c 	.word	0x2000014c
    a000:	b538      	push	{r3, r4, r5, lr}
    a002:	4c29      	ldr	r4, [pc, #164]	; (a0a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1130>)
    a004:	2301      	movs	r3, #1
    a006:	2100      	movs	r1, #0
    a008:	68a0      	ldr	r0, [r4, #8]
    a00a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a00e:	3078      	adds	r0, #120	; 0x78
    a010:	f004 f959 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a014:	b970      	cbnz	r0, a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a016:	68a0      	ldr	r0, [r4, #8]
    a018:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a01c:	2a12      	cmp	r2, #18
    a01e:	d009      	beq.n	a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a020:	2301      	movs	r3, #1
    a022:	2105      	movs	r1, #5
    a024:	3078      	adds	r0, #120	; 0x78
    a026:	f004 f94e 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a02a:	b108      	cbz	r0, a030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    a02c:	2008      	movs	r0, #8
    a02e:	bd38      	pop	{r3, r4, r5, pc}
    a030:	2001      	movs	r0, #1
    a032:	bd38      	pop	{r3, r4, r5, pc}
    a034:	68a0      	ldr	r0, [r4, #8]
    a036:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    a03a:	b908      	cbnz	r0, a040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c8>
    a03c:	f7ff f8c4 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a040:	68a1      	ldr	r1, [r4, #8]
    a042:	6920      	ldr	r0, [r4, #16]
    a044:	f501 7190 	add.w	r1, r1, #288	; 0x120
    a048:	f004 fb9c 	bl	e784 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a04c:	68a1      	ldr	r1, [r4, #8]
    a04e:	6920      	ldr	r0, [r4, #16]
    a050:	31f0      	adds	r1, #240	; 0xf0
    a052:	f004 fb8e 	bl	e772 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a056:	68a1      	ldr	r1, [r4, #8]
    a058:	f891 01dc 	ldrb.w	r0, [r1, #476]	; 0x1dc
    a05c:	f88d 0000 	strb.w	r0, [sp]
    a060:	9800      	ldr	r0, [sp, #0]
    a062:	9000      	str	r0, [sp, #0]
    a064:	f89d 0000 	ldrb.w	r0, [sp]
    a068:	b120      	cbz	r0, a074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fc>
    a06a:	f44f 7127 	mov.w	r1, #668	; 0x29c
    a06e:	2031      	movs	r0, #49	; 0x31
    a070:	f7fa fe8a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a074:	8808      	ldrh	r0, [r1, #0]
    a076:	f8a1 01de 	strh.w	r0, [r1, #478]	; 0x1de
    a07a:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a07e:	6920      	ldr	r0, [r4, #16]
    a080:	f004 fb7b 	bl	e77a <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a084:	68a1      	ldr	r1, [r4, #8]
    a086:	6920      	ldr	r0, [r4, #16]
    a088:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    a08c:	f004 fb6e 	bl	e76c <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a090:	68a0      	ldr	r0, [r4, #8]
    a092:	4601      	mov	r1, r0
    a094:	22ff      	movs	r2, #255	; 0xff
    a096:	f880 21dc 	strb.w	r2, [r0, #476]	; 0x1dc
    a09a:	2014      	movs	r0, #20
    a09c:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a0a0:	f7fc ffa8 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0a4:	2000      	movs	r0, #0
    a0a6:	bd38      	pop	{r3, r4, r5, pc}
    a0a8:	2000014c 	.word	0x2000014c
    a0ac:	b51c      	push	{r2, r3, r4, lr}
    a0ae:	4c11      	ldr	r4, [pc, #68]	; (a0f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>)
    a0b0:	68a0      	ldr	r0, [r4, #8]
    a0b2:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a0b6:	07c0      	lsls	r0, r0, #31
    a0b8:	d001      	beq.n	a0be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1146>
    a0ba:	2001      	movs	r0, #1
    a0bc:	bd1c      	pop	{r2, r3, r4, pc}
    a0be:	4669      	mov	r1, sp
    a0c0:	6920      	ldr	r0, [r4, #16]
    a0c2:	f004 fb65 	bl	e790 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a0c6:	f001 f973 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a0ca:	f644 112f 	movw	r1, #18735	; 0x492f
    a0ce:	4008      	ands	r0, r1
    a0d0:	68a2      	ldr	r2, [r4, #8]
    a0d2:	9900      	ldr	r1, [sp, #0]
    a0d4:	2300      	movs	r3, #0
    a0d6:	4001      	ands	r1, r0
    a0d8:	f842 1fc4 	str.w	r1, [r2, #196]!
    a0dc:	6053      	str	r3, [r2, #4]
    a0de:	f7ff f873 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a0e2:	68a0      	ldr	r0, [r4, #8]
    a0e4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a0e8:	f041 0101 	orr.w	r1, r1, #1
    a0ec:	7001      	strb	r1, [r0, #0]
    a0ee:	2000      	movs	r0, #0
    a0f0:	bd1c      	pop	{r2, r3, r4, pc}
    a0f2:	0000      	.short	0x0000
    a0f4:	2000014c 	.word	0x2000014c
    a0f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a0fa:	4c19      	ldr	r4, [pc, #100]	; (a160 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e8>)
    a0fc:	2301      	movs	r3, #1
    a0fe:	2107      	movs	r1, #7
    a100:	68a0      	ldr	r0, [r4, #8]
    a102:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a106:	3078      	adds	r0, #120	; 0x78
    a108:	f004 f8dd 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a10c:	b330      	cbz	r0, a15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>
    a10e:	4669      	mov	r1, sp
    a110:	6920      	ldr	r0, [r4, #16]
    a112:	f004 fb42 	bl	e79a <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a116:	68a6      	ldr	r6, [r4, #8]
    a118:	9d00      	ldr	r5, [sp, #0]
    a11a:	36c4      	adds	r6, #196	; 0xc4
    a11c:	f001 f948 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a120:	4005      	ands	r5, r0
    a122:	f644 102f 	movw	r0, #18735	; 0x492f
    a126:	4005      	ands	r5, r0
    a128:	2100      	movs	r1, #0
    a12a:	6035      	str	r5, [r6, #0]
    a12c:	6071      	str	r1, [r6, #4]
    a12e:	68a0      	ldr	r0, [r4, #8]
    a130:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    a134:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a138:	8802      	ldrh	r2, [r0, #0]
    a13a:	f8a0 221e 	strh.w	r2, [r0, #542]	; 0x21e
    a13e:	f880 121c 	strb.w	r1, [r0, #540]	; 0x21c
    a142:	9a00      	ldr	r2, [sp, #0]
    a144:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
    a148:	9a01      	ldr	r2, [sp, #4]
    a14a:	f8c0 2224 	str.w	r2, [r0, #548]	; 0x224
    a14e:	21ff      	movs	r1, #255	; 0xff
    a150:	f880 121a 	strb.w	r1, [r0, #538]	; 0x21a
    a154:	f7fc ff4e 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a158:	2000      	movs	r0, #0
    a15a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a15c:	2001      	movs	r0, #1
    a15e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a160:	2000014c 	.word	0x2000014c
    a164:	4a0a      	ldr	r2, [pc, #40]	; (a190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>)
    a166:	b510      	push	{r4, lr}
    a168:	6890      	ldr	r0, [r2, #8]
    a16a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a16e:	070b      	lsls	r3, r1, #28
    a170:	d501      	bpl.n	a176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fe>
    a172:	2001      	movs	r0, #1
    a174:	bd10      	pop	{r4, pc}
    a176:	f041 0108 	orr.w	r1, r1, #8
    a17a:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a17e:	6911      	ldr	r1, [r2, #16]
    a180:	78c9      	ldrb	r1, [r1, #3]
    a182:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a186:	f7ff f81f 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a18a:	2000      	movs	r0, #0
    a18c:	bd10      	pop	{r4, pc}
    a18e:	0000      	.short	0x0000
    a190:	2000014c 	.word	0x2000014c
    a194:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a198:	4c35      	ldr	r4, [pc, #212]	; (a270 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f8>)
    a19a:	68a0      	ldr	r0, [r4, #8]
    a19c:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a1a0:	f010 0f30 	tst.w	r0, #48	; 0x30
    a1a4:	d002      	beq.n	a1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1234>
    a1a6:	2001      	movs	r0, #1
    a1a8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a1ac:	6920      	ldr	r0, [r4, #16]
    a1ae:	f004 fb0f 	bl	e7d0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a1b2:	b328      	cbz	r0, a200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1288>
    a1b4:	6920      	ldr	r0, [r4, #16]
    a1b6:	f004 fafd 	bl	e7b4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a1ba:	4607      	mov	r7, r0
    a1bc:	6920      	ldr	r0, [r4, #16]
    a1be:	f004 fafd 	bl	e7bc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a1c2:	4606      	mov	r6, r0
    a1c4:	6920      	ldr	r0, [r4, #16]
    a1c6:	f004 faf3 	bl	e7b0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a1ca:	4605      	mov	r5, r0
    a1cc:	6920      	ldr	r0, [r4, #16]
    a1ce:	f004 faf3 	bl	e7b8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a1d2:	4601      	mov	r1, r0
    a1d4:	9700      	str	r7, [sp, #0]
    a1d6:	68a0      	ldr	r0, [r4, #8]
    a1d8:	4633      	mov	r3, r6
    a1da:	462a      	mov	r2, r5
    a1dc:	3030      	adds	r0, #48	; 0x30
    a1de:	f004 fd4e 	bl	ec7e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a1e2:	78a0      	ldrb	r0, [r4, #2]
    a1e4:	0781      	lsls	r1, r0, #30
    a1e6:	f04f 0001 	mov.w	r0, #1
    a1ea:	d503      	bpl.n	a1f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x127c>
    a1ec:	68e1      	ldr	r1, [r4, #12]
    a1ee:	78c9      	ldrb	r1, [r1, #3]
    a1f0:	2914      	cmp	r1, #20
    a1f2:	d009      	beq.n	a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a1f4:	68a1      	ldr	r1, [r4, #8]
    a1f6:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a1fa:	291c      	cmp	r1, #28
    a1fc:	d004      	beq.n	a208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a1fe:	e006      	b.n	a20e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1296>
    a200:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a204:	f7ff bfae 	b.w	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a208:	68a1      	ldr	r1, [r4, #8]
    a20a:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a20e:	68a1      	ldr	r1, [r4, #8]
    a210:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    a214:	2801      	cmp	r0, #1
    a216:	d011      	beq.n	a23c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a218:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    a21c:	f88d 0004 	strb.w	r0, [sp, #4]
    a220:	9801      	ldr	r0, [sp, #4]
    a222:	9001      	str	r0, [sp, #4]
    a224:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a228:	b940      	cbnz	r0, a23c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a22a:	f891 01b4 	ldrb.w	r0, [r1, #436]	; 0x1b4
    a22e:	f88d 0000 	strb.w	r0, [sp]
    a232:	9800      	ldr	r0, [sp, #0]
    a234:	9000      	str	r0, [sp, #0]
    a236:	f89d 0000 	ldrb.w	r0, [sp]
    a23a:	b148      	cbz	r0, a250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d8>
    a23c:	f811 0f87 	ldrb.w	r0, [r1, #135]!
    a240:	f040 0010 	orr.w	r0, r0, #16
    a244:	f881 0000 	strb.w	r0, [r1]
    a248:	f7fe ffbe 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a24c:	2000      	movs	r0, #0
    a24e:	e7ab      	b.n	a1a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1230>
    a250:	f891 0087 	ldrb.w	r0, [r1, #135]	; 0x87
    a254:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    a258:	f040 0020 	orr.w	r0, r0, #32
    a25c:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    a260:	f831 0b30 	ldrh.w	r0, [r1], #48
    a264:	f004 fd12 	bl	ec8c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a268:	f7fc fec4 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a26c:	e7ec      	b.n	a248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    a26e:	0000      	.short	0x0000
    a270:	2000014c 	.word	0x2000014c
    a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a276:	4c1a      	ldr	r4, [pc, #104]	; (a2e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1368>)
    a278:	2301      	movs	r3, #1
    a27a:	210a      	movs	r1, #10
    a27c:	68a0      	ldr	r0, [r4, #8]
    a27e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a282:	3078      	adds	r0, #120	; 0x78
    a284:	f004 f81f 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a288:	b338      	cbz	r0, a2da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1362>
    a28a:	6920      	ldr	r0, [r4, #16]
    a28c:	f004 faa0 	bl	e7d0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a290:	b1c8      	cbz	r0, a2c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a292:	6920      	ldr	r0, [r4, #16]
    a294:	f004 fa8e 	bl	e7b4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a298:	4607      	mov	r7, r0
    a29a:	6920      	ldr	r0, [r4, #16]
    a29c:	f004 fa8e 	bl	e7bc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a2a0:	4606      	mov	r6, r0
    a2a2:	6920      	ldr	r0, [r4, #16]
    a2a4:	f004 fa84 	bl	e7b0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a2a8:	4605      	mov	r5, r0
    a2aa:	6920      	ldr	r0, [r4, #16]
    a2ac:	f004 fa84 	bl	e7b8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a2b0:	4601      	mov	r1, r0
    a2b2:	9700      	str	r7, [sp, #0]
    a2b4:	68a0      	ldr	r0, [r4, #8]
    a2b6:	4633      	mov	r3, r6
    a2b8:	462a      	mov	r2, r5
    a2ba:	3030      	adds	r0, #48	; 0x30
    a2bc:	f004 fcdf 	bl	ec7e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a2c0:	68a0      	ldr	r0, [r4, #8]
    a2c2:	f004 fc4c 	bl	eb5e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a2c6:	68a1      	ldr	r1, [r4, #8]
    a2c8:	2000      	movs	r0, #0
    a2ca:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    a2ce:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a2d2:	f7ff f93f 	bl	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a2d6:	2000      	movs	r0, #0
    a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2da:	2001      	movs	r0, #1
    a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2de:	0000      	.short	0x0000
    a2e0:	2000014c 	.word	0x2000014c
    a2e4:	b510      	push	{r4, lr}
    a2e6:	4c09      	ldr	r4, [pc, #36]	; (a30c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1394>)
    a2e8:	68a0      	ldr	r0, [r4, #8]
    a2ea:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a2ee:	0740      	lsls	r0, r0, #29
    a2f0:	d501      	bpl.n	a2f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    a2f2:	2001      	movs	r0, #1
    a2f4:	bd10      	pop	{r4, pc}
    a2f6:	f7fe ff67 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a2fa:	68a0      	ldr	r0, [r4, #8]
    a2fc:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a300:	f041 0104 	orr.w	r1, r1, #4
    a304:	7001      	strb	r1, [r0, #0]
    a306:	2000      	movs	r0, #0
    a308:	bd10      	pop	{r4, pc}
    a30a:	0000      	.short	0x0000
    a30c:	2000014c 	.word	0x2000014c
    a310:	b510      	push	{r4, lr}
    a312:	4c09      	ldr	r4, [pc, #36]	; (a338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>)
    a314:	2301      	movs	r3, #1
    a316:	2109      	movs	r1, #9
    a318:	68a0      	ldr	r0, [r4, #8]
    a31a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a31e:	3078      	adds	r0, #120	; 0x78
    a320:	f003 ffd1 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a324:	2800      	cmp	r0, #0
    a326:	d006      	beq.n	a336 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13be>
    a328:	68a1      	ldr	r1, [r4, #8]
    a32a:	2000      	movs	r0, #0
    a32c:	f801 0faa 	strb.w	r0, [r1, #170]!
    a330:	7308      	strb	r0, [r1, #12]
    a332:	f801 0c25 	strb.w	r0, [r1, #-37]
    a336:	bd10      	pop	{r4, pc}
    a338:	2000014c 	.word	0x2000014c
    a33c:	b510      	push	{r4, lr}
    a33e:	4c0f      	ldr	r4, [pc, #60]	; (a37c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>)
    a340:	2301      	movs	r3, #1
    a342:	2100      	movs	r1, #0
    a344:	68a0      	ldr	r0, [r4, #8]
    a346:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a34a:	3078      	adds	r0, #120	; 0x78
    a34c:	f003 ffbb 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a350:	b138      	cbz	r0, a362 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ea>
    a352:	f7fe ff39 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a356:	68a1      	ldr	r1, [r4, #8]
    a358:	2010      	movs	r0, #16
    a35a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a35e:	2000      	movs	r0, #0
    a360:	bd10      	pop	{r4, pc}
    a362:	68a0      	ldr	r0, [r4, #8]
    a364:	2301      	movs	r3, #1
    a366:	2105      	movs	r1, #5
    a368:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a36c:	3078      	adds	r0, #120	; 0x78
    a36e:	f003 ffaa 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a372:	b108      	cbz	r0, a378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    a374:	2008      	movs	r0, #8
    a376:	bd10      	pop	{r4, pc}
    a378:	2001      	movs	r0, #1
    a37a:	bd10      	pop	{r4, pc}
    a37c:	2000014c 	.word	0x2000014c
    a380:	4806      	ldr	r0, [pc, #24]	; (a39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>)
    a382:	6880      	ldr	r0, [r0, #8]
    a384:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a388:	2911      	cmp	r1, #17
    a38a:	d001      	beq.n	a390 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1418>
    a38c:	2002      	movs	r0, #2
    a38e:	4770      	bx	lr
    a390:	2112      	movs	r1, #18
    a392:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a396:	2000      	movs	r0, #0
    a398:	4770      	bx	lr
    a39a:	0000      	.short	0x0000
    a39c:	2000014c 	.word	0x2000014c
    a3a0:	b538      	push	{r3, r4, r5, lr}
    a3a2:	4c33      	ldr	r4, [pc, #204]	; (a470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14f8>)
    a3a4:	2301      	movs	r3, #1
    a3a6:	210b      	movs	r1, #11
    a3a8:	68a0      	ldr	r0, [r4, #8]
    a3aa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3ae:	3078      	adds	r0, #120	; 0x78
    a3b0:	f003 ff89 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3b4:	bb70      	cbnz	r0, a414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a3b6:	68a0      	ldr	r0, [r4, #8]
    a3b8:	2301      	movs	r3, #1
    a3ba:	2100      	movs	r1, #0
    a3bc:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3c0:	3078      	adds	r0, #120	; 0x78
    a3c2:	f003 ff80 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3c6:	b318      	cbz	r0, a410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    a3c8:	68a0      	ldr	r0, [r4, #8]
    a3ca:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a3ce:	2824      	cmp	r0, #36	; 0x24
    a3d0:	d020      	beq.n	a414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a3d2:	6920      	ldr	r0, [r4, #16]
    a3d4:	f004 fa18 	bl	e808 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a3d8:	b1f0      	cbz	r0, a418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    a3da:	68a0      	ldr	r0, [r4, #8]
    a3dc:	2102      	movs	r1, #2
    a3de:	30c4      	adds	r0, #196	; 0xc4
    a3e0:	f005 fa63 	bl	f8aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a3e4:	6921      	ldr	r1, [r4, #16]
    a3e6:	7948      	ldrb	r0, [r1, #5]
    a3e8:	f000 0207 	and.w	r2, r0, #7
    a3ec:	68a0      	ldr	r0, [r4, #8]
    a3ee:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    a3f2:	7909      	ldrb	r1, [r1, #4]
    a3f4:	f001 0107 	and.w	r1, r1, #7
    a3f8:	f880 1066 	strb.w	r1, [r0, #102]	; 0x66
    a3fc:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    a400:	f88d 3000 	strb.w	r3, [sp]
    a404:	9b00      	ldr	r3, [sp, #0]
    a406:	9300      	str	r3, [sp, #0]
    a408:	f89d 3000 	ldrb.w	r3, [sp]
    a40c:	bb3b      	cbnz	r3, a45e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a40e:	e007      	b.n	a420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a8>
    a410:	2001      	movs	r0, #1
    a412:	bd38      	pop	{r3, r4, r5, pc}
    a414:	2020      	movs	r0, #32
    a416:	bd38      	pop	{r3, r4, r5, pc}
    a418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a41c:	f7ff bea2 	b.w	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a420:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    a424:	2b01      	cmp	r3, #1
    a426:	d01a      	beq.n	a45e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a428:	f100 036e 	add.w	r3, r0, #110	; 0x6e
    a42c:	785d      	ldrb	r5, [r3, #1]
    a42e:	428d      	cmp	r5, r1
    a430:	d106      	bne.n	a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a432:	7819      	ldrb	r1, [r3, #0]
    a434:	4291      	cmp	r1, r2
    a436:	d103      	bne.n	a440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a438:	2102      	movs	r1, #2
    a43a:	f880 11be 	strb.w	r1, [r0, #446]	; 0x1be
    a43e:	e00e      	b.n	a45e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a440:	f200 210e 	addw	r1, r0, #526	; 0x20e
    a444:	8802      	ldrh	r2, [r0, #0]
    a446:	f821 2902 	strh.w	r2, [r1], #-2
    a44a:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    a44e:	710a      	strb	r2, [r1, #4]
    a450:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a454:	7148      	strb	r0, [r1, #5]
    a456:	20ff      	movs	r0, #255	; 0xff
    a458:	7008      	strb	r0, [r1, #0]
    a45a:	f7fc fdcb 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a45e:	68a1      	ldr	r1, [r4, #8]
    a460:	2021      	movs	r0, #33	; 0x21
    a462:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a466:	f7fe feaf 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a46a:	2000      	movs	r0, #0
    a46c:	bd38      	pop	{r3, r4, r5, pc}
    a46e:	0000      	.short	0x0000
    a470:	2000014c 	.word	0x2000014c
    a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a478:	4c4c      	ldr	r4, [pc, #304]	; (a5ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>)
    a47a:	68a0      	ldr	r0, [r4, #8]
    a47c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a480:	2920      	cmp	r1, #32
    a482:	d009      	beq.n	a498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1520>
    a484:	f05f 0700 	movs.w	r7, #0
    a488:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a48c:	2922      	cmp	r1, #34	; 0x22
    a48e:	d005      	beq.n	a49c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    a490:	b36f      	cbz	r7, a4ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1576>
    a492:	f100 0585 	add.w	r5, r0, #133	; 0x85
    a496:	e003      	b.n	a4a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1528>
    a498:	2701      	movs	r7, #1
    a49a:	e7f5      	b.n	a488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a49c:	f100 0586 	add.w	r5, r0, #134	; 0x86
    a4a0:	2102      	movs	r1, #2
    a4a2:	30c4      	adds	r0, #196	; 0xc4
    a4a4:	f005 fa01 	bl	f8aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a4a8:	6920      	ldr	r0, [r4, #16]
    a4aa:	f7fc fc8f 	bl	6dcc <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a4ae:	2600      	movs	r6, #0
    a4b0:	b300      	cbz	r0, a4f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a4b2:	4639      	mov	r1, r7
    a4b4:	6920      	ldr	r0, [r4, #16]
    a4b6:	f7fe ff53 	bl	9360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    a4ba:	b1d8      	cbz	r0, a4f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a4bc:	466a      	mov	r2, sp
    a4be:	6921      	ldr	r1, [r4, #16]
    a4c0:	68a0      	ldr	r0, [r4, #8]
    a4c2:	f004 f824 	bl	e50e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a4c6:	b380      	cbz	r0, a52a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b2>
    a4c8:	6920      	ldr	r0, [r4, #16]
    a4ca:	f004 f979 	bl	e7c0 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a4ce:	68a1      	ldr	r1, [r4, #8]
    a4d0:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a4d4:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a4d8:	f005 fa56 	bl	f988 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a4dc:	b3d0      	cbz	r0, a554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15dc>
    a4de:	68a0      	ldr	r0, [r4, #8]
    a4e0:	2128      	movs	r1, #40	; 0x28
    a4e2:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a4e6:	307e      	adds	r0, #126	; 0x7e
    a4e8:	21ff      	movs	r1, #255	; 0xff
    a4ea:	7781      	strb	r1, [r0, #30]
    a4ec:	e052      	b.n	a594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a4ee:	2002      	movs	r0, #2
    a4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a4f4:	68a0      	ldr	r0, [r4, #8]
    a4f6:	f04f 0800 	mov.w	r8, #0
    a4fa:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a4fe:	2901      	cmp	r1, #1
    a500:	d014      	beq.n	a52c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    a502:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a506:	b1ef      	cbz	r7, a544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15cc>
    a508:	6920      	ldr	r0, [r4, #16]
    a50a:	68a1      	ldr	r1, [r4, #8]
    a50c:	2201      	movs	r2, #1
    a50e:	78c0      	ldrb	r0, [r0, #3]
    a510:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    a514:	4082      	lsls	r2, r0
    a516:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a51a:	b158      	cbz	r0, a534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    a51c:	200a      	movs	r0, #10
    a51e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a522:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
    a526:	b998      	cbnz	r0, a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d8>
    a528:	e007      	b.n	a53a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c2>
    a52a:	e014      	b.n	a556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    a52c:	201e      	movs	r0, #30
    a52e:	f7ff fcbf 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a532:	e7e8      	b.n	a506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    a534:	f240 31bf 	movw	r1, #959	; 0x3bf
    a538:	e001      	b.n	a53e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c6>
    a53a:	f240 31c7 	movw	r1, #967	; 0x3c7
    a53e:	2031      	movs	r0, #49	; 0x31
    a540:	f7fa fc22 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a544:	702e      	strb	r6, [r5, #0]
    a546:	f7fe fe4b 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a54a:	f7ff fe0b 	bl	a164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a54e:	4680      	mov	r8, r0
    a550:	4640      	mov	r0, r8
    a552:	e7cd      	b.n	a4f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a554:	e013      	b.n	a57e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1606>
    a556:	68a0      	ldr	r0, [r4, #8]
    a558:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a55c:	2901      	cmp	r1, #1
    a55e:	d009      	beq.n	a574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>
    a560:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a564:	68a0      	ldr	r0, [r4, #8]
    a566:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a56a:	428d      	cmp	r5, r1
    a56c:	d112      	bne.n	a594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a56e:	f880 6086 	strb.w	r6, [r0, #134]	; 0x86
    a572:	e00f      	b.n	a594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a574:	2000      	movs	r0, #0
    a576:	f7ff fc9b 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a57a:	702e      	strb	r6, [r5, #0]
    a57c:	e7f2      	b.n	a564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ec>
    a57e:	68a0      	ldr	r0, [r4, #8]
    a580:	f89d 1000 	ldrb.w	r1, [sp]
    a584:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    a588:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a58c:	f880 11a7 	strb.w	r1, [r0, #423]	; 0x1a7
    a590:	2024      	movs	r0, #36	; 0x24
    a592:	7028      	strb	r0, [r5, #0]
    a594:	68a0      	ldr	r0, [r4, #8]
    a596:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a59a:	428d      	cmp	r5, r1
    a59c:	d102      	bne.n	a5a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x162c>
    a59e:	f7fe fe1f 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a5a2:	e001      	b.n	a5a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    a5a4:	f880 60b6 	strb.w	r6, [r0, #182]	; 0xb6
    a5a8:	2000      	movs	r0, #0
    a5aa:	e7a1      	b.n	a4f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a5ac:	2000014c 	.word	0x2000014c
    a5b0:	b510      	push	{r4, lr}
    a5b2:	4c0a      	ldr	r4, [pc, #40]	; (a5dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a5b4:	2102      	movs	r1, #2
    a5b6:	68a0      	ldr	r0, [r4, #8]
    a5b8:	30c4      	adds	r0, #196	; 0xc4
    a5ba:	f005 f976 	bl	f8aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a5be:	6920      	ldr	r0, [r4, #16]
    a5c0:	f004 f92c 	bl	e81c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a5c4:	2816      	cmp	r0, #22
    a5c6:	d001      	beq.n	a5cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a5c8:	2000      	movs	r0, #0
    a5ca:	bd10      	pop	{r4, pc}
    a5cc:	6920      	ldr	r0, [r4, #16]
    a5ce:	f004 f927 	bl	e820 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5d6:	f7fe bdd5 	b.w	9184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a5da:	0000      	.short	0x0000
    a5dc:	2000014c 	.word	0x2000014c
    a5e0:	4802      	ldr	r0, [pc, #8]	; (a5ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1674>)
    a5e2:	6900      	ldr	r0, [r0, #16]
    a5e4:	7900      	ldrb	r0, [r0, #4]
    a5e6:	f7fe bdcd 	b.w	9184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a5ea:	0000      	.short	0x0000
    a5ec:	2000014c 	.word	0x2000014c
    a5f0:	b510      	push	{r4, lr}
    a5f2:	4c08      	ldr	r4, [pc, #32]	; (a614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>)
    a5f4:	68a0      	ldr	r0, [r4, #8]
    a5f6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a5fa:	2817      	cmp	r0, #23
    a5fc:	d001      	beq.n	a602 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    a5fe:	2002      	movs	r0, #2
    a600:	bd10      	pop	{r4, pc}
    a602:	f7fe fded 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a606:	68a1      	ldr	r1, [r4, #8]
    a608:	201b      	movs	r0, #27
    a60a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a60e:	2000      	movs	r0, #0
    a610:	bd10      	pop	{r4, pc}
    a612:	0000      	.short	0x0000
    a614:	2000014c 	.word	0x2000014c
    a618:	b510      	push	{r4, lr}
    a61a:	4c0b      	ldr	r4, [pc, #44]	; (a648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>)
    a61c:	2301      	movs	r3, #1
    a61e:	4619      	mov	r1, r3
    a620:	68a0      	ldr	r0, [r4, #8]
    a622:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a626:	3078      	adds	r0, #120	; 0x78
    a628:	f003 fe4d 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a62c:	b108      	cbz	r0, a632 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ba>
    a62e:	2000      	movs	r0, #0
    a630:	bd10      	pop	{r4, pc}
    a632:	6920      	ldr	r0, [r4, #16]
    a634:	f004 f8c8 	bl	e7c8 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a638:	68a1      	ldr	r1, [r4, #8]
    a63a:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a63e:	2007      	movs	r0, #7
    a640:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a644:	e7f3      	b.n	a62e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b6>
    a646:	0000      	.short	0x0000
    a648:	2000014c 	.word	0x2000014c
    a64c:	b570      	push	{r4, r5, r6, lr}
    a64e:	4d37      	ldr	r5, [pc, #220]	; (a72c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    a650:	2600      	movs	r6, #0
    a652:	4628      	mov	r0, r5
    a654:	68a9      	ldr	r1, [r5, #8]
    a656:	6900      	ldr	r0, [r0, #16]
    a658:	f891 3085 	ldrb.w	r3, [r1, #133]	; 0x85
    a65c:	7900      	ldrb	r0, [r0, #4]
    a65e:	2b0e      	cmp	r3, #14
    a660:	d101      	bne.n	a666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ee>
    a662:	2812      	cmp	r0, #18
    a664:	d006      	beq.n	a674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    a666:	4a31      	ldr	r2, [pc, #196]	; (a72c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    a668:	2400      	movs	r4, #0
    a66a:	6892      	ldr	r2, [r2, #8]
    a66c:	32c4      	adds	r2, #196	; 0xc4
    a66e:	2b1c      	cmp	r3, #28
    a670:	d004      	beq.n	a67c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1704>
    a672:	e005      	b.n	a680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1708>
    a674:	f7ff fe4c 	bl	a310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1398>
    a678:	4606      	mov	r6, r0
    a67a:	e054      	b.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a67c:	2814      	cmp	r0, #20
    a67e:	d002      	beq.n	a686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170e>
    a680:	2b04      	cmp	r3, #4
    a682:	d00b      	beq.n	a69c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    a684:	e00c      	b.n	a6a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    a686:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    a68a:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    a68e:	2105      	movs	r1, #5
    a690:	4610      	mov	r0, r2
    a692:	f005 f900 	bl	f896 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a696:	f7fe ff5d 	bl	9554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a69a:	e044      	b.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a69c:	280e      	cmp	r0, #14
    a69e:	d002      	beq.n	a6a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172e>
    a6a0:	2b20      	cmp	r3, #32
    a6a2:	d010      	beq.n	a6c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    a6a4:	e011      	b.n	a6ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1752>
    a6a6:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    a6aa:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    a6ae:	8808      	ldrh	r0, [r1, #0]
    a6b0:	f8a1 021e 	strh.w	r0, [r1, #542]	; 0x21e
    a6b4:	201a      	movs	r0, #26
    a6b6:	f881 021c 	strb.w	r0, [r1, #540]	; 0x21c
    a6ba:	20ff      	movs	r0, #255	; 0xff
    a6bc:	f881 021a 	strb.w	r0, [r1, #538]	; 0x21a
    a6c0:	f7fc fc98 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a6c4:	e02f      	b.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a6c6:	2816      	cmp	r0, #22
    a6c8:	d006      	beq.n	a6d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    a6ca:	2b26      	cmp	r3, #38	; 0x26
    a6cc:	d101      	bne.n	a6d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175a>
    a6ce:	2816      	cmp	r0, #22
    a6d0:	d002      	beq.n	a6d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    a6d2:	2817      	cmp	r0, #23
    a6d4:	d014      	beq.n	a700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1788>
    a6d6:	e026      	b.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a6d8:	f801 4f85 	strb.w	r4, [r1, #133]!
    a6dc:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a6e0:	7848      	ldrb	r0, [r1, #1]
    a6e2:	2821      	cmp	r0, #33	; 0x21
    a6e4:	d01f      	beq.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a6e6:	2108      	movs	r1, #8
    a6e8:	4610      	mov	r0, r2
    a6ea:	f005 f8d4 	bl	f896 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a6ee:	68a8      	ldr	r0, [r5, #8]
    a6f0:	210b      	movs	r1, #11
    a6f2:	30c4      	adds	r0, #196	; 0xc4
    a6f4:	f005 f8cf 	bl	f896 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a6f8:	201a      	movs	r0, #26
    a6fa:	f7ff fbd9 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a6fe:	e012      	b.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a700:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    a704:	2822      	cmp	r0, #34	; 0x22
    a706:	d10e      	bne.n	a726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a708:	f881 4086 	strb.w	r4, [r1, #134]	; 0x86
    a70c:	f7fe fd68 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a710:	68a8      	ldr	r0, [r5, #8]
    a712:	f890 01be 	ldrb.w	r0, [r0, #446]	; 0x1be
    a716:	2801      	cmp	r0, #1
    a718:	d102      	bne.n	a720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>
    a71a:	2000      	movs	r0, #0
    a71c:	f7ff fbc8 	bl	9eb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a720:	68a8      	ldr	r0, [r5, #8]
    a722:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a726:	4630      	mov	r0, r6
    a728:	bd70      	pop	{r4, r5, r6, pc}
    a72a:	0000      	.short	0x0000
    a72c:	2000014c 	.word	0x2000014c
    a730:	b570      	push	{r4, r5, r6, lr}
    a732:	4c2c      	ldr	r4, [pc, #176]	; (a7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186c>)
    a734:	68a0      	ldr	r0, [r4, #8]
    a736:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a73a:	0789      	lsls	r1, r1, #30
    a73c:	d507      	bpl.n	a74e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d6>
    a73e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a742:	2301      	movs	r3, #1
    a744:	2108      	movs	r1, #8
    a746:	3078      	adds	r0, #120	; 0x78
    a748:	f003 fdbd 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a74c:	b1e8      	cbz	r0, a78a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1812>
    a74e:	68a0      	ldr	r0, [r4, #8]
    a750:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a754:	0780      	lsls	r0, r0, #30
    a756:	d412      	bmi.n	a77e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1806>
    a758:	6920      	ldr	r0, [r4, #16]
    a75a:	f004 f837 	bl	e7cc <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a75e:	68a1      	ldr	r1, [r4, #8]
    a760:	f881 00bf 	strb.w	r0, [r1, #191]	; 0xbf
    a764:	6920      	ldr	r0, [r4, #16]
    a766:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a76a:	f8a1 20c0 	strh.w	r2, [r1, #192]	; 0xc0
    a76e:	8840      	ldrh	r0, [r0, #2]
    a770:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    a774:	f811 0fbe 	ldrb.w	r0, [r1, #190]!
    a778:	f040 0002 	orr.w	r0, r0, #2
    a77c:	7008      	strb	r0, [r1, #0]
    a77e:	68a0      	ldr	r0, [r4, #8]
    a780:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    a784:	07c9      	lsls	r1, r1, #31
    a786:	d002      	beq.n	a78e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1816>
    a788:	e010      	b.n	a7ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    a78a:	2001      	movs	r0, #1
    a78c:	bd70      	pop	{r4, r5, r6, pc}
    a78e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a792:	078a      	lsls	r2, r1, #30
    a794:	d504      	bpl.n	a7a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    a796:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    a79a:	2031      	movs	r0, #49	; 0x31
    a79c:	f7fa faf4 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7a0:	f041 0102 	orr.w	r1, r1, #2
    a7a4:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a7a8:	f7fe fd0e 	bl	91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a7ac:	68a0      	ldr	r0, [r4, #8]
    a7ae:	2500      	movs	r5, #0
    a7b0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a7b4:	2906      	cmp	r1, #6
    a7b6:	d105      	bne.n	a7c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    a7b8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a7bc:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    a7c0:	f7fc fc18 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7c4:	68a0      	ldr	r0, [r4, #8]
    a7c6:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a7ca:	b149      	cbz	r1, a7e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    a7cc:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a7d0:	f7fc fc10 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a7d4:	68a0      	ldr	r0, [r4, #8]
    a7d6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a7da:	b909      	cbnz	r1, a7e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    a7dc:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    a7e0:	2000      	movs	r0, #0
    a7e2:	bd70      	pop	{r4, r5, r6, pc}
    a7e4:	2000014c 	.word	0x2000014c
    a7e8:	b510      	push	{r4, lr}
    a7ea:	4c20      	ldr	r4, [pc, #128]	; (a86c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f4>)
    a7ec:	68a3      	ldr	r3, [r4, #8]
    a7ee:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    a7f2:	2808      	cmp	r0, #8
    a7f4:	d20f      	bcs.n	a816 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189e>
    a7f6:	f100 0208 	add.w	r2, r0, #8
    a7fa:	f1c0 0008 	rsb	r0, r0, #8
    a7fe:	b2c1      	uxtb	r1, r0
    a800:	1898      	adds	r0, r3, r2
    a802:	f500 7090 	add.w	r0, r0, #288	; 0x120
    a806:	f7fa fb4b 	bl	4ea0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a80a:	68a1      	ldr	r1, [r4, #8]
    a80c:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a810:	4410      	add	r0, r2
    a812:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a816:	68a3      	ldr	r3, [r4, #8]
    a818:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    a81c:	3808      	subs	r0, #8
    a81e:	2804      	cmp	r0, #4
    a820:	d20d      	bcs.n	a83e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c6>
    a822:	1d02      	adds	r2, r0, #4
    a824:	f1c0 0004 	rsb	r0, r0, #4
    a828:	b2c1      	uxtb	r1, r0
    a82a:	1898      	adds	r0, r3, r2
    a82c:	30f0      	adds	r0, #240	; 0xf0
    a82e:	f7fa fb37 	bl	4ea0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a832:	68a1      	ldr	r1, [r4, #8]
    a834:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a838:	4410      	add	r0, r2
    a83a:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a83e:	68a0      	ldr	r0, [r4, #8]
    a840:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    a844:	290c      	cmp	r1, #12
    a846:	d30f      	bcc.n	a868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    a848:	d005      	beq.n	a856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18de>
    a84a:	f240 71b6 	movw	r1, #1974	; 0x7b6
    a84e:	f04f 0031 	mov.w	r0, #49	; 0x31
    a852:	f7fa fa99 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a856:	2100      	movs	r1, #0
    a858:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    a85c:	2101      	movs	r1, #1
    a85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a862:	2004      	movs	r0, #4
    a864:	f7ff ba20 	b.w	9ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    a868:	bd10      	pop	{r4, pc}
    a86a:	0000      	.short	0x0000
    a86c:	2000014c 	.word	0x2000014c
    a870:	4804      	ldr	r0, [pc, #16]	; (a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190c>)
    a872:	2127      	movs	r1, #39	; 0x27
    a874:	6880      	ldr	r0, [r0, #8]
    a876:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a87a:	2100      	movs	r1, #0
    a87c:	f880 119c 	strb.w	r1, [r0, #412]	; 0x19c
    a880:	4770      	bx	lr
    a882:	0000      	.short	0x0000
    a884:	2000014c 	.word	0x2000014c
    a888:	4809      	ldr	r0, [pc, #36]	; (a8b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1938>)
    a88a:	b510      	push	{r4, lr}
    a88c:	6880      	ldr	r0, [r0, #8]
    a88e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a892:	2914      	cmp	r1, #20
    a894:	d004      	beq.n	a8a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    a896:	f240 6191 	movw	r1, #1681	; 0x691
    a89a:	2031      	movs	r0, #49	; 0x31
    a89c:	f7fa fa74 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a0:	2101      	movs	r1, #1
    a8a2:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    a8a6:	2115      	movs	r1, #21
    a8a8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a8ac:	bd10      	pop	{r4, pc}
    a8ae:	0000      	.short	0x0000
    a8b0:	2000014c 	.word	0x2000014c
    a8b4:	b510      	push	{r4, lr}
    a8b6:	4c0a      	ldr	r4, [pc, #40]	; (a8e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>)
    a8b8:	68a0      	ldr	r0, [r4, #8]
    a8ba:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a8be:	07c0      	lsls	r0, r0, #31
    a8c0:	d008      	beq.n	a8d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>
    a8c2:	f7fe fc8d 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a8c6:	68a0      	ldr	r0, [r4, #8]
    a8c8:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a8cc:	f021 0101 	bic.w	r1, r1, #1
    a8d0:	7001      	strb	r1, [r0, #0]
    a8d2:	bd10      	pop	{r4, pc}
    a8d4:	f240 617c 	movw	r1, #1660	; 0x67c
    a8d8:	2031      	movs	r0, #49	; 0x31
    a8da:	f7fa fa55 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8de:	0000      	.short	0x0000
    a8e0:	2000014c 	.word	0x2000014c
    a8e4:	b510      	push	{r4, lr}
    a8e6:	4c0a      	ldr	r4, [pc, #40]	; (a910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>)
    a8e8:	2301      	movs	r3, #1
    a8ea:	2100      	movs	r1, #0
    a8ec:	68a0      	ldr	r0, [r4, #8]
    a8ee:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a8f2:	3078      	adds	r0, #120	; 0x78
    a8f4:	f003 fce7 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8f8:	b120      	cbz	r0, a904 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    a8fa:	68a1      	ldr	r1, [r4, #8]
    a8fc:	201c      	movs	r0, #28
    a8fe:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a902:	bd10      	pop	{r4, pc}
    a904:	f240 61ff 	movw	r1, #1791	; 0x6ff
    a908:	2031      	movs	r0, #49	; 0x31
    a90a:	f7fa fa3d 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a90e:	0000      	.short	0x0000
    a910:	2000014c 	.word	0x2000014c
    a914:	480a      	ldr	r0, [pc, #40]	; (a940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c8>)
    a916:	b510      	push	{r4, lr}
    a918:	6880      	ldr	r0, [r0, #8]
    a91a:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a91e:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a922:	2a01      	cmp	r2, #1
    a924:	d004      	beq.n	a930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    a926:	f240 7106 	movw	r1, #1798	; 0x706
    a92a:	2031      	movs	r0, #49	; 0x31
    a92c:	f7fa fa2c 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a930:	f021 0110 	bic.w	r1, r1, #16
    a934:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a93c:	f7fe bc50 	b.w	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a940:	2000014c 	.word	0x2000014c
    a944:	b510      	push	{r4, lr}
    a946:	4c0a      	ldr	r4, [pc, #40]	; (a970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    a948:	2301      	movs	r3, #1
    a94a:	2100      	movs	r1, #0
    a94c:	68a0      	ldr	r0, [r4, #8]
    a94e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a952:	3078      	adds	r0, #120	; 0x78
    a954:	f003 fcb7 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a958:	b120      	cbz	r0, a964 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>
    a95a:	68a1      	ldr	r1, [r4, #8]
    a95c:	200e      	movs	r0, #14
    a95e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a962:	bd10      	pop	{r4, pc}
    a964:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a968:	2031      	movs	r0, #49	; 0x31
    a96a:	f7fa fa0d 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a96e:	0000      	.short	0x0000
    a970:	2000014c 	.word	0x2000014c
    a974:	4804      	ldr	r0, [pc, #16]	; (a988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    a976:	6880      	ldr	r0, [r0, #8]
    a978:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a97c:	f021 0104 	bic.w	r1, r1, #4
    a980:	7001      	strb	r1, [r0, #0]
    a982:	f7fe bc2d 	b.w	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a986:	0000      	.short	0x0000
    a988:	2000014c 	.word	0x2000014c
    a98c:	4809      	ldr	r0, [pc, #36]	; (a9b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    a98e:	b510      	push	{r4, lr}
    a990:	6880      	ldr	r0, [r0, #8]
    a992:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a996:	2910      	cmp	r1, #16
    a998:	d004      	beq.n	a9a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    a99a:	f240 6189 	movw	r1, #1673	; 0x689
    a99e:	2031      	movs	r0, #49	; 0x31
    a9a0:	f7fa f9f2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9a4:	2101      	movs	r1, #1
    a9a6:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    a9aa:	2111      	movs	r1, #17
    a9ac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a9b0:	bd10      	pop	{r4, pc}
    a9b2:	0000      	.short	0x0000
    a9b4:	2000014c 	.word	0x2000014c
    a9b8:	b510      	push	{r4, lr}
    a9ba:	4c0a      	ldr	r4, [pc, #40]	; (a9e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    a9bc:	2301      	movs	r3, #1
    a9be:	2100      	movs	r1, #0
    a9c0:	68a0      	ldr	r0, [r4, #8]
    a9c2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a9c6:	3078      	adds	r0, #120	; 0x78
    a9c8:	f003 fc7d 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9cc:	b120      	cbz	r0, a9d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    a9ce:	68a1      	ldr	r1, [r4, #8]
    a9d0:	201f      	movs	r0, #31
    a9d2:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a9d6:	bd10      	pop	{r4, pc}
    a9d8:	f240 7112 	movw	r1, #1810	; 0x712
    a9dc:	2031      	movs	r0, #49	; 0x31
    a9de:	f7fa f9d3 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9e2:	0000      	.short	0x0000
    a9e4:	2000014c 	.word	0x2000014c
    a9e8:	4808      	ldr	r0, [pc, #32]	; (aa0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a94>)
    a9ea:	b510      	push	{r4, lr}
    a9ec:	6880      	ldr	r0, [r0, #8]
    a9ee:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a9f2:	2921      	cmp	r1, #33	; 0x21
    a9f4:	d005      	beq.n	aa02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    a9f6:	b121      	cbz	r1, aa02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    a9f8:	f240 7119 	movw	r1, #1817	; 0x719
    a9fc:	2031      	movs	r0, #49	; 0x31
    a9fe:	f7fa f9c3 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa02:	2122      	movs	r1, #34	; 0x22
    aa04:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aa08:	bd10      	pop	{r4, pc}
    aa0a:	0000      	.short	0x0000
    aa0c:	2000014c 	.word	0x2000014c
    aa10:	4807      	ldr	r0, [pc, #28]	; (aa30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab8>)
    aa12:	b510      	push	{r4, lr}
    aa14:	6880      	ldr	r0, [r0, #8]
    aa16:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aa1a:	2915      	cmp	r1, #21
    aa1c:	d004      	beq.n	aa28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab0>
    aa1e:	f240 619e 	movw	r1, #1694	; 0x69e
    aa22:	2031      	movs	r0, #49	; 0x31
    aa24:	f7fa f9b0 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa28:	2119      	movs	r1, #25
    aa2a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aa2e:	bd10      	pop	{r4, pc}
    aa30:	2000014c 	.word	0x2000014c
    aa34:	b510      	push	{r4, lr}
    aa36:	4c0a      	ldr	r4, [pc, #40]	; (aa60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae8>)
    aa38:	2301      	movs	r3, #1
    aa3a:	2100      	movs	r1, #0
    aa3c:	68a0      	ldr	r0, [r4, #8]
    aa3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa42:	3078      	adds	r0, #120	; 0x78
    aa44:	f003 fc3f 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa48:	b120      	cbz	r0, aa54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1adc>
    aa4a:	68a1      	ldr	r1, [r4, #8]
    aa4c:	2004      	movs	r0, #4
    aa4e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aa52:	bd10      	pop	{r4, pc}
    aa54:	f240 6183 	movw	r1, #1667	; 0x683
    aa58:	2031      	movs	r0, #49	; 0x31
    aa5a:	f7fa f995 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa5e:	0000      	.short	0x0000
    aa60:	2000014c 	.word	0x2000014c
    aa64:	4807      	ldr	r0, [pc, #28]	; (aa84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    aa66:	b510      	push	{r4, lr}
    aa68:	6880      	ldr	r0, [r0, #8]
    aa6a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aa6e:	2915      	cmp	r1, #21
    aa70:	d004      	beq.n	aa7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    aa72:	f44f 61d3 	mov.w	r1, #1688	; 0x698
    aa76:	2031      	movs	r0, #49	; 0x31
    aa78:	f7fa f986 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa7c:	2117      	movs	r1, #23
    aa7e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aa82:	bd10      	pop	{r4, pc}
    aa84:	2000014c 	.word	0x2000014c
    aa88:	b570      	push	{r4, r5, r6, lr}
    aa8a:	4d1b      	ldr	r5, [pc, #108]	; (aaf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b80>)
    aa8c:	68a8      	ldr	r0, [r5, #8]
    aa8e:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aa92:	291b      	cmp	r1, #27
    aa94:	d002      	beq.n	aa9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b24>
    aa96:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    aa9a:	e007      	b.n	aaac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b34>
    aa9c:	2400      	movs	r4, #0
    aa9e:	f880 40bb 	strb.w	r4, [r0, #187]	; 0xbb
    aaa2:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    aaa6:	b121      	cbz	r1, aab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3a>
    aaa8:	f240 61bc 	movw	r1, #1724	; 0x6bc
    aaac:	2031      	movs	r0, #49	; 0x31
    aaae:	f7fa f96b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aab2:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    aab6:	b141      	cbz	r1, aaca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b52>
    aab8:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    aabc:	8801      	ldrh	r1, [r0, #0]
    aabe:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    aac2:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    aac6:	210c      	movs	r1, #12
    aac8:	e008      	b.n	aadc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    aaca:	8801      	ldrh	r1, [r0, #0]
    aacc:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    aad0:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    aad4:	2101      	movs	r1, #1
    aad6:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    aada:	210b      	movs	r1, #11
    aadc:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    aae0:	8800      	ldrh	r0, [r0, #0]
    aae2:	f7fa fd6b 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    aae6:	f003 f822 	bl	db2e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    aaea:	f7fc fa83 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aaee:	68a8      	ldr	r0, [r5, #8]
    aaf0:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    aaf4:	bd70      	pop	{r4, r5, r6, pc}
    aaf6:	0000      	.short	0x0000
    aaf8:	2000014c 	.word	0x2000014c
    aafc:	b510      	push	{r4, lr}
    aafe:	4c08      	ldr	r4, [pc, #32]	; (ab20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba8>)
    ab00:	2301      	movs	r3, #1
    ab02:	4619      	mov	r1, r3
    ab04:	68a0      	ldr	r0, [r4, #8]
    ab06:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ab0a:	3078      	adds	r0, #120	; 0x78
    ab0c:	f003 fbdb 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab10:	2800      	cmp	r0, #0
    ab12:	d103      	bne.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    ab14:	68a1      	ldr	r1, [r4, #8]
    ab16:	2008      	movs	r0, #8
    ab18:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    ab1c:	bd10      	pop	{r4, pc}
    ab1e:	0000      	.short	0x0000
    ab20:	2000014c 	.word	0x2000014c
    ab24:	4814      	ldr	r0, [pc, #80]	; (ab78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>)
    ab26:	b510      	push	{r4, lr}
    ab28:	68c1      	ldr	r1, [r0, #12]
    ab2a:	6880      	ldr	r0, [r0, #8]
    ab2c:	7909      	ldrb	r1, [r1, #4]
    ab2e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab32:	2a0a      	cmp	r2, #10
    ab34:	d109      	bne.n	ab4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    ab36:	f890 20fa 	ldrb.w	r2, [r0, #250]	; 0xfa
    ab3a:	428a      	cmp	r2, r1
    ab3c:	d105      	bne.n	ab4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    ab3e:	2100      	movs	r1, #0
    ab40:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ab44:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    ab48:	bd10      	pop	{r4, pc}
    ab4a:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ab4e:	0713      	lsls	r3, r2, #28
    ab50:	d507      	bpl.n	ab62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    ab52:	f022 0108 	bic.w	r1, r2, #8
    ab56:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    ab5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab5e:	f7fe bb3f 	b.w	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ab62:	29ff      	cmp	r1, #255	; 0xff
    ab64:	d004      	beq.n	ab70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf8>
    ab66:	f240 6176 	movw	r1, #1654	; 0x676
    ab6a:	2031      	movs	r0, #49	; 0x31
    ab6c:	f7fa f90c 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ab74:	f7ff be7c 	b.w	a870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    ab78:	2000014c 	.word	0x2000014c
    ab7c:	b510      	push	{r4, lr}
    ab7e:	4c15      	ldr	r4, [pc, #84]	; (abd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5c>)
    ab80:	68a0      	ldr	r0, [r4, #8]
    ab82:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ab86:	0789      	lsls	r1, r1, #30
    ab88:	d411      	bmi.n	abae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c36>
    ab8a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab8e:	2301      	movs	r3, #1
    ab90:	2100      	movs	r1, #0
    ab92:	3078      	adds	r0, #120	; 0x78
    ab94:	f003 fb97 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab98:	b120      	cbz	r0, aba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    ab9a:	68a1      	ldr	r1, [r4, #8]
    ab9c:	2006      	movs	r0, #6
    ab9e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aba2:	e009      	b.n	abb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c40>
    aba4:	f240 61de 	movw	r1, #1758	; 0x6de
    aba8:	2031      	movs	r0, #49	; 0x31
    abaa:	f7fa f8ed 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abae:	2100      	movs	r1, #0
    abb0:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    abb4:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    abb8:	68a0      	ldr	r0, [r4, #8]
    abba:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    abbe:	0780      	lsls	r0, r0, #30
    abc0:	d507      	bpl.n	abd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5a>
    abc2:	f7fe fb0d 	bl	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    abc6:	68a0      	ldr	r0, [r4, #8]
    abc8:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    abcc:	f021 0102 	bic.w	r1, r1, #2
    abd0:	7001      	strb	r1, [r0, #0]
    abd2:	bd10      	pop	{r4, pc}
    abd4:	2000014c 	.word	0x2000014c
    abd8:	4808      	ldr	r0, [pc, #32]	; (abfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c84>)
    abda:	b510      	push	{r4, lr}
    abdc:	6880      	ldr	r0, [r0, #8]
    abde:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    abe2:	b941      	cbnz	r1, abf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c7e>
    abe4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    abe8:	2301      	movs	r3, #1
    abea:	2106      	movs	r1, #6
    abec:	3078      	adds	r0, #120	; 0x78
    abee:	f003 fb6a 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abf2:	2800      	cmp	r0, #0
    abf4:	d000      	beq.n	abf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c80>
    abf6:	2001      	movs	r0, #1
    abf8:	bd10      	pop	{r4, pc}
    abfa:	0000      	.short	0x0000
    abfc:	2000014c 	.word	0x2000014c
    ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac02:	4c5a      	ldr	r4, [pc, #360]	; (ad6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df4>)
    ac04:	4606      	mov	r6, r0
    ac06:	4615      	mov	r5, r2
    ac08:	68a0      	ldr	r0, [r4, #8]
    ac0a:	2200      	movs	r2, #0
    ac0c:	b111      	cbz	r1, ac14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9c>
    ac0e:	f8a0 211e 	strh.w	r2, [r0, #286]	; 0x11e
    ac12:	e006      	b.n	ac22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1caa>
    ac14:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    ac18:	f8b0 210e 	ldrh.w	r2, [r0, #270]	; 0x10e
    ac1c:	4411      	add	r1, r2
    ac1e:	f8a0 111e 	strh.w	r1, [r0, #286]	; 0x11e
    ac22:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    ac26:	f88d 1000 	strb.w	r1, [sp]
    ac2a:	9900      	ldr	r1, [sp, #0]
    ac2c:	9100      	str	r1, [sp, #0]
    ac2e:	f89d 1000 	ldrb.w	r1, [sp]
    ac32:	b939      	cbnz	r1, ac44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    ac34:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ac38:	2301      	movs	r3, #1
    ac3a:	4619      	mov	r1, r3
    ac3c:	3078      	adds	r0, #120	; 0x78
    ac3e:	f003 fb42 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac42:	b130      	cbz	r0, ac52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cda>
    ac44:	68a0      	ldr	r0, [r4, #8]
    ac46:	f830 1fb0 	ldrh.w	r1, [r0, #176]!
    ac4a:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    ac4e:	4411      	add	r1, r2
    ac50:	8001      	strh	r1, [r0, #0]
    ac52:	68a0      	ldr	r0, [r4, #8]
    ac54:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
    ac58:	b132      	cbz	r2, ac68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cf0>
    ac5a:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    ac5e:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    ac62:	4419      	add	r1, r3
    ac64:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    ac68:	f990 70ba 	ldrsb.w	r7, [r0, #186]	; 0xba
    ac6c:	2f00      	cmp	r7, #0
    ac6e:	dd06      	ble.n	ac7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d06>
    ac70:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
    ac74:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    ac78:	4419      	add	r1, r3
    ac7a:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    ac7e:	233d      	movs	r3, #61	; 0x3d
    ac80:	21ff      	movs	r1, #255	; 0xff
    ac82:	b116      	cbz	r6, ac8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d12>
    ac84:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    ac88:	e012      	b.n	acb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    ac8a:	7824      	ldrb	r4, [r4, #0]
    ac8c:	2c02      	cmp	r4, #2
    ac8e:	d009      	beq.n	aca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d2c>
    ac90:	2c01      	cmp	r4, #1
    ac92:	d011      	beq.n	acb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    ac94:	b33d      	cbz	r5, ace6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d6e>
    ac96:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    ac9a:	7011      	strb	r1, [r2, #0]
    ac9c:	06e9      	lsls	r1, r5, #27
    ac9e:	d50e      	bpl.n	acbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d46>
    aca0:	211e      	movs	r1, #30
    aca2:	e018      	b.n	acd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    aca4:	f890 20fe 	ldrb.w	r2, [r0, #254]	; 0xfe
    aca8:	2a06      	cmp	r2, #6
    acaa:	d044      	beq.n	ad36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    acac:	2216      	movs	r2, #22
    acae:	e042      	b.n	ad36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    acb0:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    acb4:	7011      	strb	r1, [r2, #0]
    acb6:	e047      	b.n	ad48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    acb8:	f890 218a 	ldrb.w	r2, [r0, #394]	; 0x18a
    acbc:	e03b      	b.n	ad36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    acbe:	0729      	lsls	r1, r5, #28
    acc0:	d502      	bpl.n	acc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d50>
    acc2:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    acc6:	e03f      	b.n	ad48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    acc8:	06a9      	lsls	r1, r5, #26
    acca:	d501      	bpl.n	acd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    accc:	2123      	movs	r1, #35	; 0x23
    acce:	e002      	b.n	acd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    acd0:	07a9      	lsls	r1, r5, #30
    acd2:	d003      	beq.n	acdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d64>
    acd4:	212a      	movs	r1, #42	; 0x2a
    acd6:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    acda:	e035      	b.n	ad48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    acdc:	f640 41b1 	movw	r1, #3249	; 0xcb1
    ace0:	2031      	movs	r0, #49	; 0x31
    ace2:	f7fa f851 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ace6:	b12a      	cbz	r2, acf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7c>
    ace8:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    acec:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    acf0:	429a      	cmp	r2, r3
    acf2:	d216      	bcs.n	ad22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    acf4:	2f00      	cmp	r7, #0
    acf6:	dd05      	ble.n	ad04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8c>
    acf8:	f8b0 20b8 	ldrh.w	r2, [r0, #184]	; 0xb8
    acfc:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    ad00:	429a      	cmp	r2, r3
    ad02:	d20e      	bcs.n	ad22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    ad04:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
    ad08:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ad0c:	4293      	cmp	r3, r2
    ad0e:	d30a      	bcc.n	ad26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    ad10:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
    ad14:	f88d 3000 	strb.w	r3, [sp]
    ad18:	9b00      	ldr	r3, [sp, #0]
    ad1a:	9300      	str	r3, [sp, #0]
    ad1c:	f89d 3000 	ldrb.w	r3, [sp]
    ad20:	b10b      	cbz	r3, ad26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    ad22:	2222      	movs	r2, #34	; 0x22
    ad24:	e007      	b.n	ad36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    ad26:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    ad2a:	b13b      	cbz	r3, ad3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc4>
    ad2c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    ad30:	4293      	cmp	r3, r2
    ad32:	d309      	bcc.n	ad48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad34:	2208      	movs	r2, #8
    ad36:	f880 209d 	strb.w	r2, [r0, #157]	; 0x9d
    ad3a:	e7b9      	b.n	acb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    ad3c:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
    ad40:	2a06      	cmp	r2, #6
    ad42:	d301      	bcc.n	ad48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad44:	223e      	movs	r2, #62	; 0x3e
    ad46:	e7f6      	b.n	ad36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    ad48:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
    ad4c:	f88d 1000 	strb.w	r1, [sp]
    ad50:	9900      	ldr	r1, [sp, #0]
    ad52:	9100      	str	r1, [sp, #0]
    ad54:	f89d 1000 	ldrb.w	r1, [sp]
    ad58:	b119      	cbz	r1, ad62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dea>
    ad5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ad5e:	f004 bde3 	b.w	f928 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    ad62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ad66:	2100      	movs	r1, #0
    ad68:	f7fd bb1c 	b.w	83a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ad6c:	2000014c 	.word	0x2000014c
    ad70:	b570      	push	{r4, r5, r6, lr}
    ad72:	4d2d      	ldr	r5, [pc, #180]	; (ae28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb0>)
    ad74:	68a8      	ldr	r0, [r5, #8]
    ad76:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    ad7a:	b151      	cbz	r1, ad92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    ad7c:	2901      	cmp	r1, #1
    ad7e:	d008      	beq.n	ad92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    ad80:	2902      	cmp	r1, #2
    ad82:	d009      	beq.n	ad98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    ad84:	2903      	cmp	r1, #3
    ad86:	d007      	beq.n	ad98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    ad88:	f640 216d 	movw	r1, #2669	; 0xa6d
    ad8c:	2031      	movs	r0, #49	; 0x31
    ad8e:	f7f9 fffb 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad92:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    ad96:	e035      	b.n	ae04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e8c>
    ad98:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    ad9c:	2908      	cmp	r1, #8
    ad9e:	d034      	beq.n	ae0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    ada0:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ada4:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ada8:	2400      	movs	r4, #0
    adaa:	1c8b      	adds	r3, r1, #2
    adac:	429a      	cmp	r2, r3
    adae:	d306      	bcc.n	adbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    adb0:	1a51      	subs	r1, r2, r1
    adb2:	1e89      	subs	r1, r1, #2
    adb4:	040c      	lsls	r4, r1, #16
    adb6:	0c24      	lsrs	r4, r4, #16
    adb8:	d001      	beq.n	adbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    adba:	1e64      	subs	r4, r4, #1
    adbc:	b2a4      	uxth	r4, r4
    adbe:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    adc2:	b139      	cbz	r1, add4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e5c>
    adc4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adc8:	2301      	movs	r3, #1
    adca:	2109      	movs	r1, #9
    adcc:	3078      	adds	r0, #120	; 0x78
    adce:	f003 fa7a 	bl	e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    add2:	b330      	cbz	r0, ae22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eaa>
    add4:	f7ff ff00 	bl	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    add8:	b168      	cbz	r0, adf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    adda:	68a9      	ldr	r1, [r5, #8]
    addc:	2000      	movs	r0, #0
    adde:	31a0      	adds	r1, #160	; 0xa0
    ade0:	c906      	ldmia	r1, {r1, r2}
    ade2:	1c8b      	adds	r3, r1, #2
    ade4:	429a      	cmp	r2, r3
    ade6:	d303      	bcc.n	adf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    ade8:	1a50      	subs	r0, r2, r1
    adea:	1e80      	subs	r0, r0, #2
    adec:	d000      	beq.n	adf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    adee:	1e40      	subs	r0, r0, #1
    adf0:	42a0      	cmp	r0, r4
    adf2:	d200      	bcs.n	adf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    adf4:	b284      	uxth	r4, r0
    adf6:	b10c      	cbz	r4, adfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    adf8:	1e64      	subs	r4, r4, #1
    adfa:	b2a4      	uxth	r4, r4
    adfc:	68a8      	ldr	r0, [r5, #8]
    adfe:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    ae02:	4421      	add	r1, r4
    ae04:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    ae08:	bd70      	pop	{r4, r5, r6, pc}
    ae0a:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ae0e:	2903      	cmp	r1, #3
    ae10:	d3bf      	bcc.n	ad92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    ae12:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    ae16:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    ae18:	4411      	add	r1, r2
    ae1a:	1c49      	adds	r1, r1, #1
    ae1c:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    ae20:	bd70      	pop	{r4, r5, r6, pc}
    ae22:	2400      	movs	r4, #0
    ae24:	e7ea      	b.n	adfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    ae26:	0000      	.short	0x0000
    ae28:	2000014c 	.word	0x2000014c

0000ae2c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    ae2c:	4903      	ldr	r1, [pc, #12]	; (ae3c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    ae2e:	884a      	ldrh	r2, [r1, #2]
    ae30:	8002      	strh	r2, [r0, #0]
    ae32:	7809      	ldrb	r1, [r1, #0]
    ae34:	7081      	strb	r1, [r0, #2]
    ae36:	2000      	movs	r0, #0
    ae38:	4770      	bx	lr
    ae3a:	0000      	.short	0x0000
    ae3c:	20001114 	.word	0x20001114

0000ae40 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    ae40:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ae42:	460c      	mov	r4, r1
    ae44:	4605      	mov	r5, r0
    ae46:	8800      	ldrh	r0, [r0, #0]
    ae48:	4669      	mov	r1, sp
    ae4a:	f003 fa12 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ae4e:	2200      	movs	r2, #0
    ae50:	b128      	cbz	r0, ae5e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    ae52:	f8c4 2002 	str.w	r2, [r4, #2]
    ae56:	71a2      	strb	r2, [r4, #6]
    ae58:	8022      	strh	r2, [r4, #0]
    ae5a:	2002      	movs	r0, #2
    ae5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ae5e:	9901      	ldr	r1, [sp, #4]
    ae60:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    ae64:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
    ae68:	f8d1 0016 	ldr.w	r0, [r1, #22]
    ae6c:	f8c4 0002 	str.w	r0, [r4, #2]
    ae70:	7e88      	ldrb	r0, [r1, #26]
    ae72:	71a0      	strb	r0, [r4, #6]
    ae74:	8828      	ldrh	r0, [r5, #0]
    ae76:	8020      	strh	r0, [r4, #0]
    ae78:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
    ae7c:	f88d 0008 	strb.w	r0, [sp, #8]
    ae80:	9802      	ldr	r0, [sp, #8]
    ae82:	9002      	str	r0, [sp, #8]
    ae84:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ae88:	2800      	cmp	r0, #0
    ae8a:	d1eb      	bne.n	ae64 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    ae8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000ae90 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    ae90:	b510      	push	{r4, lr}
    ae92:	4604      	mov	r4, r0
    ae94:	f005 fc78 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ae98:	b130      	cbz	r0, aea8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    ae9a:	4804      	ldr	r0, [pc, #16]	; (aeac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    ae9c:	8881      	ldrh	r1, [r0, #4]
    ae9e:	8021      	strh	r1, [r4, #0]
    aea0:	88c0      	ldrh	r0, [r0, #6]
    aea2:	8060      	strh	r0, [r4, #2]
    aea4:	2000      	movs	r0, #0
    aea6:	bd10      	pop	{r4, pc}
    aea8:	2001      	movs	r0, #1
    aeaa:	bd10      	pop	{r4, pc}
    aeac:	20000234 	.word	0x20000234

0000aeb0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    aeb0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    aeb2:	4605      	mov	r5, r0
    aeb4:	f005 fc8a 	bl	107cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    aeb8:	b310      	cbz	r0, af00 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    aeba:	2400      	movs	r4, #0
    aebc:	a802      	add	r0, sp, #8
    aebe:	f88d 4004 	strb.w	r4, [sp, #4]
    aec2:	f88d 4008 	strb.w	r4, [sp, #8]
    aec6:	9000      	str	r0, [sp, #0]
    aec8:	78aa      	ldrb	r2, [r5, #2]
    aeca:	7869      	ldrb	r1, [r5, #1]
    aecc:	7828      	ldrb	r0, [r5, #0]
    aece:	ab01      	add	r3, sp, #4
    aed0:	f005 fd4d 	bl	1096e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
    aed4:	2800      	cmp	r0, #0
    aed6:	d112      	bne.n	aefe <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4e>
    aed8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    aedc:	f005 fbbc 	bl	10658 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    aee0:	b180      	cbz	r0, af04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    aee2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aee6:	f005 fbb7 	bl	10658 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    aeea:	b158      	cbz	r0, af04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    aeec:	4806      	ldr	r0, [pc, #24]	; (af08 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>)
    aeee:	f89d 1004 	ldrb.w	r1, [sp, #4]
    aef2:	7381      	strb	r1, [r0, #14]
    aef4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    aef8:	73c1      	strb	r1, [r0, #15]
    aefa:	8204      	strh	r4, [r0, #16]
    aefc:	2000      	movs	r0, #0
    aefe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af00:	2001      	movs	r0, #1
    af02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af04:	2011      	movs	r0, #17
    af06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af08:	20001114 	.word	0x20001114

0000af0c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    af0c:	7801      	ldrb	r1, [r0, #0]
    af0e:	b171      	cbz	r1, af2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af10:	7841      	ldrb	r1, [r0, #1]
    af12:	b161      	cbz	r1, af2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af14:	8841      	ldrh	r1, [r0, #2]
    af16:	291b      	cmp	r1, #27
    af18:	d309      	bcc.n	af2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af1a:	8881      	ldrh	r1, [r0, #4]
    af1c:	291b      	cmp	r1, #27
    af1e:	d306      	bcc.n	af2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af20:	4904      	ldr	r1, [pc, #16]	; (af34 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    af22:	6802      	ldr	r2, [r0, #0]
    af24:	600a      	str	r2, [r1, #0]
    af26:	8880      	ldrh	r0, [r0, #4]
    af28:	8088      	strh	r0, [r1, #4]
    af2a:	2000      	movs	r0, #0
    af2c:	4770      	bx	lr
    af2e:	2012      	movs	r0, #18
    af30:	4770      	bx	lr
    af32:	0000      	.short	0x0000
    af34:	20001114 	.word	0x20001114

0000af38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    af38:	6800      	ldr	r0, [r0, #0]
    af3a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    af3e:	4288      	cmp	r0, r1
    af40:	d303      	bcc.n	af4a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    af42:	4903      	ldr	r1, [pc, #12]	; (af50 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    af44:	6088      	str	r0, [r1, #8]
    af46:	2000      	movs	r0, #0
    af48:	4770      	bx	lr
    af4a:	2012      	movs	r0, #18
    af4c:	4770      	bx	lr
    af4e:	0000      	.short	0x0000
    af50:	20001114 	.word	0x20001114

0000af54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    af54:	4a03      	ldr	r2, [pc, #12]	; (af64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    af56:	e9d2 1200 	ldrd	r1, r2, [r2]
    af5a:	6001      	str	r1, [r0, #0]
    af5c:	6042      	str	r2, [r0, #4]
    af5e:	2000      	movs	r0, #0
    af60:	4770      	bx	lr
    af62:	0000      	.short	0x0000
    af64:	0000b290 	.word	0x0000b290

0000af68 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    af68:	b510      	push	{r4, lr}
    af6a:	2005      	movs	r0, #5
    af6c:	f000 fa14 	bl	b398 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    af70:	f7fd fe20 	bl	8bb4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    af74:	4902      	ldr	r1, [pc, #8]	; (af80 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    af76:	4801      	ldr	r0, [pc, #4]	; (af7c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    af78:	6008      	str	r0, [r1, #0]
    af7a:	bd10      	pop	{r4, pc}
    af7c:	0000afd9 	.word	0x0000afd9
    af80:	20000230 	.word	0x20000230

0000af84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    af84:	b510      	push	{r4, lr}
    af86:	f003 f8c8 	bl	e11a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    af8a:	f7fb fbbd 	bl	6708 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    af8e:	f000 fa25 	bl	b3dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    af92:	f003 fd75 	bl	ea80 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    af96:	480e      	ldr	r0, [pc, #56]	; (afd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    af98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    af9c:	4b0d      	ldr	r3, [pc, #52]	; (afd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    af9e:	8281      	strh	r1, [r0, #20]
    afa0:	2100      	movs	r1, #0
    afa2:	7581      	strb	r1, [r0, #22]
    afa4:	8301      	strh	r1, [r0, #24]
    afa6:	221b      	movs	r2, #27
    afa8:	801a      	strh	r2, [r3, #0]
    afaa:	f44f 74a4 	mov.w	r4, #328	; 0x148
    afae:	805c      	strh	r4, [r3, #2]
    afb0:	809a      	strh	r2, [r3, #4]
    afb2:	80dc      	strh	r4, [r3, #6]
    afb4:	7381      	strb	r1, [r0, #14]
    afb6:	73c1      	strb	r1, [r0, #15]
    afb8:	2303      	movs	r3, #3
    afba:	7003      	strb	r3, [r0, #0]
    afbc:	2302      	movs	r3, #2
    afbe:	7043      	strb	r3, [r0, #1]
    afc0:	8042      	strh	r2, [r0, #2]
    afc2:	8082      	strh	r2, [r0, #4]
    afc4:	f640 62a6 	movw	r2, #3750	; 0xea6
    afc8:	6082      	str	r2, [r0, #8]
    afca:	7481      	strb	r1, [r0, #18]
    afcc:	7301      	strb	r1, [r0, #12]
    afce:	bd10      	pop	{r4, pc}
    afd0:	20001114 	.word	0x20001114
    afd4:	20000234 	.word	0x20000234
    afd8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afdc:	4692      	mov	sl, r2
    afde:	460f      	mov	r7, r1
    afe0:	4681      	mov	r9, r0
    afe2:	f005 fbd1 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    afe6:	2800      	cmp	r0, #0
    afe8:	d063      	beq.n	b0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    afea:	4933      	ldr	r1, [pc, #204]	; (b0b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    afec:	f8b9 2058 	ldrh.w	r2, [r9, #88]	; 0x58
    aff0:	f8b9 6056 	ldrh.w	r6, [r9, #86]	; 0x56
    aff4:	8808      	ldrh	r0, [r1, #0]
    aff6:	4290      	cmp	r0, r2
    aff8:	d300      	bcc.n	affc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    affa:	4610      	mov	r0, r2
    affc:	4680      	mov	r8, r0
    affe:	8888      	ldrh	r0, [r1, #4]
    b000:	42b0      	cmp	r0, r6
    b002:	d200      	bcs.n	b006 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    b004:	4606      	mov	r6, r0
    b006:	884c      	ldrh	r4, [r1, #2]
    b008:	f640 0048 	movw	r0, #2120	; 0x848
    b00c:	4284      	cmp	r4, r0
    b00e:	d300      	bcc.n	b012 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    b010:	4604      	mov	r4, r0
    b012:	88cd      	ldrh	r5, [r1, #6]
    b014:	4285      	cmp	r5, r0
    b016:	d300      	bcc.n	b01a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b018:	4605      	mov	r5, r0
    b01a:	4284      	cmp	r4, r0
    b01c:	d300      	bcc.n	b020 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b01e:	4604      	mov	r4, r0
    b020:	f44f 71a4 	mov.w	r1, #328	; 0x148
    b024:	2e1b      	cmp	r6, #27
    b026:	d001      	beq.n	b02c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    b028:	428d      	cmp	r5, r1
    b02a:	d104      	bne.n	b036 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    b02c:	f1b8 0f1b 	cmp.w	r8, #27
    b030:	d03f      	beq.n	b0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b032:	428c      	cmp	r4, r1
    b034:	d03d      	beq.n	b0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b036:	466a      	mov	r2, sp
    b038:	4651      	mov	r1, sl
    b03a:	4648      	mov	r0, r9
    b03c:	f005 fb2f 	bl	1069e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b040:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b044:	4641      	mov	r1, r8
    b046:	4540      	cmp	r0, r8
    b048:	d900      	bls.n	b04c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    b04a:	4608      	mov	r0, r1
    b04c:	80f8      	strh	r0, [r7, #6]
    b04e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b052:	42a1      	cmp	r1, r4
    b054:	d800      	bhi.n	b058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    b056:	460c      	mov	r4, r1
    b058:	813c      	strh	r4, [r7, #8]
    b05a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b05e:	42b1      	cmp	r1, r6
    b060:	d800      	bhi.n	b064 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    b062:	460e      	mov	r6, r1
    b064:	807e      	strh	r6, [r7, #2]
    b066:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b06a:	42a9      	cmp	r1, r5
    b06c:	d900      	bls.n	b070 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    b06e:	4629      	mov	r1, r5
    b070:	80b9      	strh	r1, [r7, #4]
    b072:	22ff      	movs	r2, #255	; 0xff
    b074:	703a      	strb	r2, [r7, #0]
    b076:	381b      	subs	r0, #27
    b078:	28e0      	cmp	r0, #224	; 0xe0
    b07a:	d902      	bls.n	b082 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    b07c:	f44f 614e 	mov.w	r1, #3296	; 0xce0
    b080:	e014      	b.n	b0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b082:	3e1b      	subs	r6, #27
    b084:	2ee0      	cmp	r6, #224	; 0xe0
    b086:	d902      	bls.n	b08e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    b088:	f640 41e2 	movw	r1, #3298	; 0xce2
    b08c:	e00e      	b.n	b0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b08e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b092:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b096:	4284      	cmp	r4, r0
    b098:	d902      	bls.n	b0a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    b09a:	f640 41e4 	movw	r1, #3300	; 0xce4
    b09e:	e005      	b.n	b0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b0a0:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    b0a4:	4281      	cmp	r1, r0
    b0a6:	d904      	bls.n	b0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b0a8:	f640 41e6 	movw	r1, #3302	; 0xce6
    b0ac:	2039      	movs	r0, #57	; 0x39
    b0ae:	f7f9 fe6b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0b2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0b6:	0000      	.short	0x0000
    b0b8:	20000234 	.word	0x20000234

0000b0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0c0:	b088      	sub	sp, #32
    b0c2:	460c      	mov	r4, r1
    b0c4:	4606      	mov	r6, r0
    b0c6:	f003 ff01 	bl	eecc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b0ca:	b198      	cbz	r0, b0f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b0cc:	4630      	mov	r0, r6
    b0ce:	f003 fef0 	bl	eeb2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b0d2:	b130      	cbz	r0, b0e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b0d4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b0d8:	2012      	movs	r0, #18
    b0da:	2900      	cmp	r1, #0
    b0dc:	d00b      	beq.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b0de:	2980      	cmp	r1, #128	; 0x80
    b0e0:	d809      	bhi.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b0e2:	4630      	mov	r0, r6
    b0e4:	f003 fed4 	bl	ee90 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b0e8:	b140      	cbz	r0, b0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b0ea:	4630      	mov	r0, r6
    b0ec:	f003 fe4c 	bl	ed88 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b0f0:	b130      	cbz	r0, b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b0f2:	e009      	b.n	b108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b0f4:	2042      	movs	r0, #66	; 0x42
    b0f6:	b008      	add	sp, #32
    b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b0fc:	200c      	movs	r0, #12
    b0fe:	e7fa      	b.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b100:	4630      	mov	r0, r6
    b102:	f003 fed0 	bl	eea6 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b106:	b3a8      	cbz	r0, b174 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    b108:	4630      	mov	r0, r6
    b10a:	f004 f8b3 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b10e:	2800      	cmp	r0, #0
    b110:	d1f4      	bne.n	b0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b112:	4630      	mov	r0, r6
    b114:	f003 fe53 	bl	edbe <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b118:	2800      	cmp	r0, #0
    b11a:	d1ef      	bne.n	b0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b11c:	4630      	mov	r0, r6
    b11e:	f7fc f919 	bl	7354 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b122:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b126:	f242 7110 	movw	r1, #10000	; 0x2710
    b12a:	fb00 f801 	mul.w	r8, r0, r1
    b12e:	78e1      	ldrb	r1, [r4, #3]
    b130:	4630      	mov	r0, r6
    b132:	f003 fea4 	bl	ee7e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b136:	4630      	mov	r0, r6
    b138:	f003 feb7 	bl	eeaa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b13c:	b1e8      	cbz	r0, b17a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b13e:	2200      	movs	r2, #0
    b140:	4611      	mov	r1, r2
    b142:	a801      	add	r0, sp, #4
    b144:	f7fa f87e 	bl	5244 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b148:	0004      	movs	r4, r0
    b14a:	d06a      	beq.n	b222 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b14c:	2100      	movs	r1, #0
    b14e:	f7fb fd07 	bl	6b60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b152:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b156:	8020      	strh	r0, [r4, #0]
    b158:	4621      	mov	r1, r4
    b15a:	4630      	mov	r0, r6
    b15c:	f003 fec9 	bl	eef2 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b160:	f005 fb12 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b164:	4d3a      	ldr	r5, [pc, #232]	; (b250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    b166:	2800      	cmp	r0, #0
    b168:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b16c:	d00f      	beq.n	b18e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    b16e:	886a      	ldrh	r2, [r5, #2]
    b170:	88a9      	ldrh	r1, [r5, #4]
    b172:	e00e      	b.n	b192 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    b174:	e7ff      	b.n	b176 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    b176:	2012      	movs	r0, #18
    b178:	e7bd      	b.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b17a:	4642      	mov	r2, r8
    b17c:	2100      	movs	r1, #0
    b17e:	4630      	mov	r0, r6
    b180:	f7fd f832 	bl	81e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b184:	2800      	cmp	r0, #0
    b186:	d0b6      	beq.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b188:	f241 41ab 	movw	r1, #5291	; 0x14ab
    b18c:	e053      	b.n	b236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b18e:	221b      	movs	r2, #27
    b190:	4611      	mov	r1, r2
    b192:	84c2      	strh	r2, [r0, #38]	; 0x26
    b194:	8501      	strh	r1, [r0, #40]	; 0x28
    b196:	68a8      	ldr	r0, [r5, #8]
    b198:	6320      	str	r0, [r4, #48]	; 0x30
    b19a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b19e:	4630      	mov	r0, r6
    b1a0:	f003 fe8b 	bl	eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b1a4:	b910      	cbnz	r0, b1ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    b1a6:	4630      	mov	r0, r6
    b1a8:	f003 fea1 	bl	eeee <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b1ac:	6127      	str	r7, [r4, #16]
    b1ae:	8821      	ldrh	r1, [r4, #0]
    b1b0:	f8ad 1008 	strh.w	r1, [sp, #8]
    b1b4:	7ba9      	ldrb	r1, [r5, #14]
    b1b6:	f88d 100a 	strb.w	r1, [sp, #10]
    b1ba:	7be9      	ldrb	r1, [r5, #15]
    b1bc:	f88d 100b 	strb.w	r1, [sp, #11]
    b1c0:	8a29      	ldrh	r1, [r5, #16]
    b1c2:	f8ad 100c 	strh.w	r1, [sp, #12]
    b1c6:	a905      	add	r1, sp, #20
    b1c8:	9100      	str	r1, [sp, #0]
    b1ca:	2001      	movs	r0, #1
    b1cc:	ab04      	add	r3, sp, #16
    b1ce:	aa02      	add	r2, sp, #8
    b1d0:	4621      	mov	r1, r4
    b1d2:	f005 fa9a 	bl	1070a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    b1d6:	b140      	cbz	r0, b1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    b1d8:	2100      	movs	r1, #0
    b1da:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b1de:	f7fa f85b 	bl	5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b1e2:	b1f0      	cbz	r0, b222 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b1e4:	f241 41f7 	movw	r1, #5367	; 0x14f7
    b1e8:	e025      	b.n	b236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b1ea:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b1ee:	f88d 0018 	strb.w	r0, [sp, #24]
    b1f2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b1f6:	f88d 0019 	strb.w	r0, [sp, #25]
    b1fa:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b1fe:	f8ad 001a 	strh.w	r0, [sp, #26]
    b202:	a906      	add	r1, sp, #24
    b204:	4620      	mov	r0, r4
    b206:	f003 f8f3 	bl	e3f0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b20a:	7868      	ldrb	r0, [r5, #1]
    b20c:	9000      	str	r0, [sp, #0]
    b20e:	782b      	ldrb	r3, [r5, #0]
    b210:	88aa      	ldrh	r2, [r5, #4]
    b212:	8869      	ldrh	r1, [r5, #2]
    b214:	8820      	ldrh	r0, [r4, #0]
    b216:	f7fa f90b 	bl	5430 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b21a:	b120      	cbz	r0, b226 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    b21c:	f241 5102 	movw	r1, #5378	; 0x1502
    b220:	e009      	b.n	b236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b222:	2009      	movs	r0, #9
    b224:	e767      	b.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b226:	4642      	mov	r2, r8
    b228:	4621      	mov	r1, r4
    b22a:	4630      	mov	r0, r6
    b22c:	f7fc ffdc 	bl	81e8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b230:	b120      	cbz	r0, b23c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b232:	f241 5104 	movw	r1, #5380	; 0x1504
    b236:	2039      	movs	r0, #57	; 0x39
    b238:	f7f9 fda6 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b23c:	4805      	ldr	r0, [pc, #20]	; (b254 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    b23e:	6803      	ldr	r3, [r0, #0]
    b240:	b123      	cbz	r3, b24c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    b242:	2200      	movs	r2, #0
    b244:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    b248:	4620      	mov	r0, r4
    b24a:	4798      	blx	r3
    b24c:	2000      	movs	r0, #0
    b24e:	e752      	b.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b250:	20001114 	.word	0x20001114
    b254:	20000230 	.word	0x20000230
    b258:	b510      	push	{r4, lr}
    b25a:	4604      	mov	r4, r0
    b25c:	88c1      	ldrh	r1, [r0, #6]
    b25e:	8880      	ldrh	r0, [r0, #4]
    b260:	f005 fa0f 	bl	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b264:	2800      	cmp	r0, #0
    b266:	d10f      	bne.n	b288 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b268:	8861      	ldrh	r1, [r4, #2]
    b26a:	8820      	ldrh	r0, [r4, #0]
    b26c:	f005 fa09 	bl	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b270:	2800      	cmp	r0, #0
    b272:	d109      	bne.n	b288 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b274:	4805      	ldr	r0, [pc, #20]	; (b28c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>)
    b276:	88a1      	ldrh	r1, [r4, #4]
    b278:	8081      	strh	r1, [r0, #4]
    b27a:	8821      	ldrh	r1, [r4, #0]
    b27c:	8001      	strh	r1, [r0, #0]
    b27e:	88e1      	ldrh	r1, [r4, #6]
    b280:	80c1      	strh	r1, [r0, #6]
    b282:	8861      	ldrh	r1, [r4, #2]
    b284:	8041      	strh	r1, [r0, #2]
    b286:	2000      	movs	r0, #0
    b288:	bd10      	pop	{r4, pc}
    b28a:	0000      	.short	0x0000
    b28c:	20000234 	.word	0x20000234
    b290:	0c11360c 	.word	0x0c11360c
    b294:	11360059 	.word	0x11360059
    b298:	05060708 	.word	0x05060708
    b29c:	00020304 	.word	0x00020304
    b2a0:	f0f4f8fc 	.word	0xf0f4f8fc
    b2a4:	0304d8ec 	.word	0x0304d8ec
    b2a8:	f4f8fc00 	.word	0xf4f8fc00
    b2ac:	00d8ecf0 	.word	0x00d8ecf0

0000b2b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b2b0:	b510      	push	{r4, lr}
    b2b2:	f7fb fe99 	bl	6fe8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b2b6:	4804      	ldr	r0, [pc, #16]	; (b2c8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    b2b8:	6840      	ldr	r0, [r0, #4]
    b2ba:	f005 fbd0 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2c2:	f005 b877 	b.w	103b4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b2c6:	0000      	.short	0x0000
    b2c8:	2000023c 	.word	0x2000023c

0000b2cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b2cc:	b510      	push	{r4, lr}
    b2ce:	4c05      	ldr	r4, [pc, #20]	; (b2e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b2d0:	68a0      	ldr	r0, [r4, #8]
    b2d2:	f005 fbc4 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b2d6:	68e0      	ldr	r0, [r4, #12]
    b2d8:	f005 fbc1 	bl	10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2e0:	f7ff be50 	b.w	af84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b2e4:	2000023c 	.word	0x2000023c

0000b2e8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b2e8:	b510      	push	{r4, lr}
    b2ea:	4905      	ldr	r1, [pc, #20]	; (b300 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b2ec:	4805      	ldr	r0, [pc, #20]	; (b304 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b2ee:	f005 fba9 	bl	10a44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b2f2:	4804      	ldr	r0, [pc, #16]	; (b304 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2f8:	4903      	ldr	r1, [pc, #12]	; (b308 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b2fa:	1d00      	adds	r0, r0, #4
    b2fc:	f005 bba2 	b.w	10a44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b300:	2000024c 	.word	0x2000024c
    b304:	20000240 	.word	0x20000240
    b308:	20000254 	.word	0x20000254

0000b30c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b30c:	b510      	push	{r4, lr}
    b30e:	4908      	ldr	r1, [pc, #32]	; (b330 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b310:	4808      	ldr	r0, [pc, #32]	; (b334 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b312:	f005 fb97 	bl	10a44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b316:	4807      	ldr	r0, [pc, #28]	; (b334 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b318:	4907      	ldr	r1, [pc, #28]	; (b338 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b31a:	1d00      	adds	r0, r0, #4
    b31c:	f005 fb92 	bl	10a44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b320:	4804      	ldr	r0, [pc, #16]	; (b334 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b326:	4905      	ldr	r1, [pc, #20]	; (b33c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b328:	3008      	adds	r0, #8
    b32a:	f005 bb8b 	b.w	10a44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b32e:	0000      	.short	0x0000
    b330:	20000264 	.word	0x20000264
    b334:	20000240 	.word	0x20000240
    b338:	2000026c 	.word	0x2000026c
    b33c:	2000025c 	.word	0x2000025c

0000b340 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b340:	4801      	ldr	r0, [pc, #4]	; (b348 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b342:	7800      	ldrb	r0, [r0, #0]
    b344:	4770      	bx	lr
    b346:	0000      	.short	0x0000
    b348:	2000023c 	.word	0x2000023c
    b34c:	b510      	push	{r4, lr}
    b34e:	f7fc f973 	bl	7638 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b352:	f7fc ffd9 	bl	8308 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b356:	4803      	ldr	r0, [pc, #12]	; (b364 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b358:	f7fc f954 	bl	7604 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b360:	f7fb be4e 	b.w	7000 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b364:	2000159d 	.word	0x2000159d
    b368:	4909      	ldr	r1, [pc, #36]	; (b390 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b36a:	b510      	push	{r4, lr}
    b36c:	2001      	movs	r0, #1
    b36e:	7008      	strb	r0, [r1, #0]
    b370:	f7fc f992 	bl	7698 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b374:	f7fd fd74 	bl	8e60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b378:	f002 feaf 	bl	e0da <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b37c:	4805      	ldr	r0, [pc, #20]	; (b394 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b37e:	f7fa fc25 	bl	5bcc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b382:	2000      	movs	r0, #0
    b384:	f7f9 fece 	bl	5124 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b38c:	f7fb be40 	b.w	7010 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b390:	2000023c 	.word	0x2000023c
    b394:	2000159d 	.word	0x2000159d

0000b398 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b398:	4a04      	ldr	r2, [pc, #16]	; (b3ac <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b39a:	08c1      	lsrs	r1, r0, #3
    b39c:	f000 0307 	and.w	r3, r0, #7
    b3a0:	2001      	movs	r0, #1
    b3a2:	4098      	lsls	r0, r3
    b3a4:	5c53      	ldrb	r3, [r2, r1]
    b3a6:	4303      	orrs	r3, r0
    b3a8:	5453      	strb	r3, [r2, r1]
    b3aa:	4770      	bx	lr
    b3ac:	20000000 	.word	0x20000000

0000b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b3b0:	4901      	ldr	r1, [pc, #4]	; (b3b8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
    b3b6:	4770      	bx	lr
    b3b8:	20000000 	.word	0x20000000

0000b3bc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b3bc:	4806      	ldr	r0, [pc, #24]	; (b3d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b3be:	8801      	ldrh	r1, [r0, #0]
    b3c0:	7900      	ldrb	r0, [r0, #4]
    b3c2:	0602      	lsls	r2, r0, #24
    b3c4:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b3c8:	f000 0001 	and.w	r0, r0, #1
    b3cc:	1800      	adds	r0, r0, r0
    b3ce:	b2c0      	uxtb	r0, r0
    b3d0:	f040 0001 	orr.w	r0, r0, #1
    b3d4:	4770      	bx	lr
    b3d6:	0000      	.short	0x0000
    b3d8:	20000000 	.word	0x20000000

0000b3dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b3dc:	b510      	push	{r4, lr}
    b3de:	f7f9 f927 	bl	4630 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b3e2:	2200      	movs	r2, #0
    b3e4:	4b08      	ldr	r3, [pc, #32]	; (b408 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b3e6:	4611      	mov	r1, r2
    b3e8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b3ec:	4284      	cmp	r4, r0
    b3ee:	d303      	bcc.n	b3f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b3f0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b3f4:	7882      	ldrb	r2, [r0, #2]
    b3f6:	e003      	b.n	b400 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b3f8:	1c49      	adds	r1, r1, #1
    b3fa:	b2c9      	uxtb	r1, r1
    b3fc:	290c      	cmp	r1, #12
    b3fe:	d3f3      	bcc.n	b3e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b400:	4802      	ldr	r0, [pc, #8]	; (b40c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b402:	7002      	strb	r2, [r0, #0]
    b404:	bd10      	pop	{r4, pc}
    b406:	0000      	.short	0x0000
    b408:	00010ab0 	.word	0x00010ab0
    b40c:	200002bf 	.word	0x200002bf

0000b410 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b410:	b570      	push	{r4, r5, r6, lr}
    b412:	4605      	mov	r5, r0
    b414:	4616      	mov	r6, r2
    b416:	460c      	mov	r4, r1
    b418:	2002      	movs	r0, #2
    b41a:	f000 f9b7 	bl	b78c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b41e:	4906      	ldr	r1, [pc, #24]	; (b438 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b420:	2001      	movs	r0, #1
    b422:	1ef6      	subs	r6, r6, #3
    b424:	7008      	strb	r0, [r1, #0]
    b426:	4805      	ldr	r0, [pc, #20]	; (b43c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b428:	6006      	str	r6, [r0, #0]
    b42a:	4804      	ldr	r0, [pc, #16]	; (b43c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b42c:	3808      	subs	r0, #8
    b42e:	6005      	str	r5, [r0, #0]
    b430:	1f00      	subs	r0, r0, #4
    b432:	6004      	str	r4, [r0, #0]
    b434:	bd70      	pop	{r4, r5, r6, pc}
    b436:	0000      	.short	0x0000
    b438:	200002c0 	.word	0x200002c0
    b43c:	4000f510 	.word	0x4000f510

0000b440 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b440:	b510      	push	{r4, lr}
    b442:	4c0c      	ldr	r4, [pc, #48]	; (b474 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b444:	7820      	ldrb	r0, [r4, #0]
    b446:	b180      	cbz	r0, b46a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b448:	490b      	ldr	r1, [pc, #44]	; (b478 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b44a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b44e:	6008      	str	r0, [r1, #0]
    b450:	f000 f86a 	bl	b528 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b454:	2100      	movs	r1, #0
    b456:	b120      	cbz	r0, b462 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b458:	2001      	movs	r0, #1
    b45a:	7060      	strb	r0, [r4, #1]
    b45c:	4807      	ldr	r0, [pc, #28]	; (b47c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b45e:	6800      	ldr	r0, [r0, #0]
    b460:	e001      	b.n	b466 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b462:	7061      	strb	r1, [r4, #1]
    b464:	2010      	movs	r0, #16
    b466:	70a0      	strb	r0, [r4, #2]
    b468:	7021      	strb	r1, [r4, #0]
    b46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b46e:	2000      	movs	r0, #0
    b470:	f000 b98c 	b.w	b78c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b474:	200002c0 	.word	0x200002c0
    b478:	4001f508 	.word	0x4001f508
    b47c:	4000f400 	.word	0x4000f400

0000b480 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b480:	b510      	push	{r4, lr}
    b482:	2002      	movs	r0, #2
    b484:	f000 f982 	bl	b78c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b488:	4904      	ldr	r1, [pc, #16]	; (b49c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b48a:	2001      	movs	r0, #1
    b48c:	7008      	strb	r0, [r1, #0]
    b48e:	f000 f859 	bl	b544 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b492:	4903      	ldr	r1, [pc, #12]	; (b4a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b494:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b498:	6008      	str	r0, [r1, #0]
    b49a:	bd10      	pop	{r4, pc}
    b49c:	200002c0 	.word	0x200002c0
    b4a0:	4001f504 	.word	0x4001f504

0000b4a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b4a4:	4803      	ldr	r0, [pc, #12]	; (b4b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b4a6:	2100      	movs	r1, #0
    b4a8:	7001      	strb	r1, [r0, #0]
    b4aa:	7041      	strb	r1, [r0, #1]
    b4ac:	2110      	movs	r1, #16
    b4ae:	7081      	strb	r1, [r0, #2]
    b4b0:	4770      	bx	lr
    b4b2:	0000      	.short	0x0000
    b4b4:	200002c0 	.word	0x200002c0

0000b4b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b4b8:	4807      	ldr	r0, [pc, #28]	; (b4d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b4ba:	b510      	push	{r4, lr}
    b4bc:	7801      	ldrb	r1, [r0, #0]
    b4be:	b141      	cbz	r1, b4d2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b4c0:	f000 f832 	bl	b528 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b4c4:	b118      	cbz	r0, b4ce <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b4c6:	4805      	ldr	r0, [pc, #20]	; (b4dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b4c8:	6800      	ldr	r0, [r0, #0]
    b4ca:	b2c0      	uxtb	r0, r0
    b4cc:	bd10      	pop	{r4, pc}
    b4ce:	2010      	movs	r0, #16
    b4d0:	bd10      	pop	{r4, pc}
    b4d2:	7880      	ldrb	r0, [r0, #2]
    b4d4:	bd10      	pop	{r4, pc}
    b4d6:	0000      	.short	0x0000
    b4d8:	200002c0 	.word	0x200002c0
    b4dc:	4000f400 	.word	0x4000f400

0000b4e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b4e0:	4808      	ldr	r0, [pc, #32]	; (b504 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b4e2:	b510      	push	{r4, lr}
    b4e4:	7801      	ldrb	r1, [r0, #0]
    b4e6:	b159      	cbz	r1, b500 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b4e8:	4807      	ldr	r0, [pc, #28]	; (b508 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b4ea:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b4ee:	b128      	cbz	r0, b4fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b4f0:	f000 f80c 	bl	b50c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b4f4:	2800      	cmp	r0, #0
    b4f6:	d000      	beq.n	b4fa <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b4f8:	2001      	movs	r0, #1
    b4fa:	bd10      	pop	{r4, pc}
    b4fc:	2002      	movs	r0, #2
    b4fe:	bd10      	pop	{r4, pc}
    b500:	7840      	ldrb	r0, [r0, #1]
    b502:	bd10      	pop	{r4, pc}
    b504:	200002c0 	.word	0x200002c0
    b508:	4000f000 	.word	0x4000f000
    b50c:	4805      	ldr	r0, [pc, #20]	; (b524 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b50e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b512:	b111      	cbz	r1, b51a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b514:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b518:	b108      	cbz	r0, b51e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b51a:	2000      	movs	r0, #0
    b51c:	4770      	bx	lr
    b51e:	2001      	movs	r0, #1
    b520:	4770      	bx	lr
    b522:	0000      	.short	0x0000
    b524:	4000f000 	.word	0x4000f000
    b528:	4805      	ldr	r0, [pc, #20]	; (b540 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b52a:	b510      	push	{r4, lr}
    b52c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b530:	b120      	cbz	r0, b53c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b532:	f7ff ffeb 	bl	b50c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b536:	b108      	cbz	r0, b53c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b538:	2001      	movs	r0, #1
    b53a:	bd10      	pop	{r4, pc}
    b53c:	2000      	movs	r0, #0
    b53e:	bd10      	pop	{r4, pc}
    b540:	4000f000 	.word	0x4000f000
    b544:	4804      	ldr	r0, [pc, #16]	; (b558 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b546:	2100      	movs	r1, #0
    b548:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b54c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b550:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b554:	4770      	bx	lr
    b556:	0000      	.short	0x0000
    b558:	4000f000 	.word	0x4000f000

0000b55c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b560:	4604      	mov	r4, r0
    b562:	461e      	mov	r6, r3
    b564:	4690      	mov	r8, r2
    b566:	460f      	mov	r7, r1
    b568:	2001      	movs	r0, #1
    b56a:	f000 f90f 	bl	b78c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b56e:	4d1e      	ldr	r5, [pc, #120]	; (b5e8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b570:	481e      	ldr	r0, [pc, #120]	; (b5ec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b572:	f004 0103 	and.w	r1, r4, #3
    b576:	712e      	strb	r6, [r5, #4]
    b578:	6800      	ldr	r0, [r0, #0]
    b57a:	0432      	lsls	r2, r6, #16
    b57c:	f361 0007 	bfi	r0, r1, #0, #8
    b580:	f366 200f 	bfi	r0, r6, #8, #8
    b584:	0c00      	lsrs	r0, r0, #16
    b586:	4e1a      	ldr	r6, [pc, #104]	; (b5f0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b588:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b58c:	4308      	orrs	r0, r1
    b58e:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b592:	4818      	ldr	r0, [pc, #96]	; (b5f4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b594:	6007      	str	r7, [r0, #0]
    b596:	f001 fb6c 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b59a:	b938      	cbnz	r0, b5ac <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b59c:	4815      	ldr	r0, [pc, #84]	; (b5f4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b59e:	3010      	adds	r0, #16
    b5a0:	6801      	ldr	r1, [r0, #0]
    b5a2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b5a6:	ea41 0108 	orr.w	r1, r1, r8
    b5aa:	6001      	str	r1, [r0, #0]
    b5ac:	f000 f8e4 	bl	b778 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b5b0:	b10c      	cbz	r4, b5b6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b5b2:	2c04      	cmp	r4, #4
    b5b4:	d107      	bne.n	b5c6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b5b6:	4811      	ldr	r0, [pc, #68]	; (b5fc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b5b8:	490d      	ldr	r1, [pc, #52]	; (b5f0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b5ba:	4a0f      	ldr	r2, [pc, #60]	; (b5f8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b5bc:	1d09      	adds	r1, r1, #4
    b5be:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b5c2:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b5c6:	2001      	movs	r0, #1
    b5c8:	7068      	strb	r0, [r5, #1]
    b5ca:	70ec      	strb	r4, [r5, #3]
    b5cc:	b11c      	cbz	r4, b5d6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b5ce:	2c01      	cmp	r4, #1
    b5d0:	d001      	beq.n	b5d6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b5d2:	2c02      	cmp	r4, #2
    b5d4:	d106      	bne.n	b5e4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b5d6:	7028      	strb	r0, [r5, #0]
    b5d8:	2100      	movs	r1, #0
    b5da:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b5de:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b5e2:	6030      	str	r0, [r6, #0]
    b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5e8:	200002c3 	.word	0x200002c3
    b5ec:	0000b788 	.word	0x0000b788
    b5f0:	4000f000 	.word	0x4000f000
    b5f4:	4000f508 	.word	0x4000f508
    b5f8:	4000f100 	.word	0x4000f100
    b5fc:	4001f088 	.word	0x4001f088

0000b600 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b600:	b570      	push	{r4, r5, r6, lr}
    b602:	4a1c      	ldr	r2, [pc, #112]	; (b674 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b604:	7853      	ldrb	r3, [r2, #1]
    b606:	b1a3      	cbz	r3, b632 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b608:	4b1b      	ldr	r3, [pc, #108]	; (b678 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b60a:	6019      	str	r1, [r3, #0]
    b60c:	1d19      	adds	r1, r3, #4
    b60e:	6008      	str	r0, [r1, #0]
    b610:	2501      	movs	r5, #1
    b612:	7095      	strb	r5, [r2, #2]
    b614:	4610      	mov	r0, r2
    b616:	78d6      	ldrb	r6, [r2, #3]
    b618:	4b18      	ldr	r3, [pc, #96]	; (b67c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b61a:	7800      	ldrb	r0, [r0, #0]
    b61c:	4c18      	ldr	r4, [pc, #96]	; (b680 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    b61e:	2100      	movs	r1, #0
    b620:	b156      	cbz	r6, b638 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    b622:	2e04      	cmp	r6, #4
    b624:	d01b      	beq.n	b65e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    b626:	b308      	cbz	r0, b66c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    b628:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b62c:	0668      	lsls	r0, r5, #25
    b62e:	6018      	str	r0, [r3, #0]
    b630:	bd70      	pop	{r4, r5, r6, pc}
    b632:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b636:	e01a      	b.n	b66e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b638:	b178      	cbz	r0, b65a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    b63a:	4620      	mov	r0, r4
    b63c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b640:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    b644:	601e      	str	r6, [r3, #0]
    b646:	1271      	asrs	r1, r6, #9
    b648:	f005 fa67 	bl	10b1a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b64c:	2800      	cmp	r0, #0
    b64e:	d0ef      	beq.n	b630 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    b650:	6065      	str	r5, [r4, #4]
    b652:	480a      	ldr	r0, [pc, #40]	; (b67c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b654:	1d00      	adds	r0, r0, #4
    b656:	6006      	str	r6, [r0, #0]
    b658:	bd70      	pop	{r4, r5, r6, pc}
    b65a:	21b3      	movs	r1, #179	; 0xb3
    b65c:	e007      	b.n	b66e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b65e:	7015      	strb	r5, [r2, #0]
    b660:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b664:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    b668:	6025      	str	r5, [r4, #0]
    b66a:	bd70      	pop	{r4, r5, r6, pc}
    b66c:	21c6      	movs	r1, #198	; 0xc6
    b66e:	203c      	movs	r0, #60	; 0x3c
    b670:	f7f9 fb8a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b674:	200002c3 	.word	0x200002c3
    b678:	4000f50c 	.word	0x4000f50c
    b67c:	4001f504 	.word	0x4001f504
    b680:	4000f000 	.word	0x4000f000

0000b684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b684:	b570      	push	{r4, r5, r6, lr}
    b686:	4d05      	ldr	r5, [pc, #20]	; (b69c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    b688:	2400      	movs	r4, #0
    b68a:	7828      	ldrb	r0, [r5, #0]
    b68c:	b110      	cbz	r0, b694 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    b68e:	f000 f873 	bl	b778 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b692:	702c      	strb	r4, [r5, #0]
    b694:	706c      	strb	r4, [r5, #1]
    b696:	70ac      	strb	r4, [r5, #2]
    b698:	bd70      	pop	{r4, r5, r6, pc}
    b69a:	0000      	.short	0x0000
    b69c:	200002c3 	.word	0x200002c3

0000b6a0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b6a0:	4802      	ldr	r0, [pc, #8]	; (b6ac <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b6a2:	2100      	movs	r1, #0
    b6a4:	7001      	strb	r1, [r0, #0]
    b6a6:	7041      	strb	r1, [r0, #1]
    b6a8:	7081      	strb	r1, [r0, #2]
    b6aa:	4770      	bx	lr
    b6ac:	200002c3 	.word	0x200002c3

0000b6b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b6b0:	480b      	ldr	r0, [pc, #44]	; (b6e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    b6b2:	b510      	push	{r4, lr}
    b6b4:	7800      	ldrb	r0, [r0, #0]
    b6b6:	b158      	cbz	r0, b6d0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    b6b8:	f44f 7182 	mov.w	r1, #260	; 0x104
    b6bc:	4809      	ldr	r0, [pc, #36]	; (b6e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    b6be:	f005 fa2c 	bl	10b1a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b6c2:	b140      	cbz	r0, b6d6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    b6c4:	4808      	ldr	r0, [pc, #32]	; (b6e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    b6c6:	6800      	ldr	r0, [r0, #0]
    b6c8:	2800      	cmp	r0, #0
    b6ca:	d000      	beq.n	b6ce <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    b6cc:	2001      	movs	r0, #1
    b6ce:	bd10      	pop	{r4, pc}
    b6d0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    b6d4:	e001      	b.n	b6da <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    b6d6:	f240 11e5 	movw	r1, #485	; 0x1e5
    b6da:	203c      	movs	r0, #60	; 0x3c
    b6dc:	f7f9 fb54 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6e0:	200002c3 	.word	0x200002c3
    b6e4:	4000f000 	.word	0x4000f000
    b6e8:	4000f400 	.word	0x4000f400

0000b6ec <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b6ec:	4801      	ldr	r0, [pc, #4]	; (b6f4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b6ee:	2101      	movs	r1, #1
    b6f0:	6081      	str	r1, [r0, #8]
    b6f2:	4770      	bx	lr
    b6f4:	4000f000 	.word	0x4000f000

0000b6f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6fc:	481b      	ldr	r0, [pc, #108]	; (b76c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b6fe:	7800      	ldrb	r0, [r0, #0]
    b700:	b1d8      	cbz	r0, b73a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    b702:	f8df 806c 	ldr.w	r8, [pc, #108]	; b770 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b706:	f44f 7682 	mov.w	r6, #260	; 0x104
    b70a:	4631      	mov	r1, r6
    b70c:	4640      	mov	r0, r8
    b70e:	f005 fa04 	bl	10b1a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b712:	2800      	cmp	r0, #0
    b714:	d128      	bne.n	b768 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    b716:	2002      	movs	r0, #2
    b718:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    b71c:	4c15      	ldr	r4, [pc, #84]	; (b774 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    b71e:	6820      	ldr	r0, [r4, #0]
    b720:	43c0      	mvns	r0, r0
    b722:	f340 1500 	sbfx	r5, r0, #4, #1
    b726:	6820      	ldr	r0, [r4, #0]
    b728:	f040 0010 	orr.w	r0, r0, #16
    b72c:	6020      	str	r0, [r4, #0]
    b72e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b732:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b736:	1c6d      	adds	r5, r5, #1
    b738:	e008      	b.n	b74c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    b73a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    b73e:	203c      	movs	r0, #60	; 0x3c
    b740:	f7f9 fb22 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b744:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    b748:	f7f9 f990 	bl	4a6c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b74c:	4631      	mov	r1, r6
    b74e:	4640      	mov	r0, r8
    b750:	f005 f9e3 	bl	10b1a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b754:	2800      	cmp	r0, #0
    b756:	d0f5      	beq.n	b744 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b758:	b91d      	cbnz	r5, b762 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    b75a:	6820      	ldr	r0, [r4, #0]
    b75c:	f020 0010 	bic.w	r0, r0, #16
    b760:	6020      	str	r0, [r4, #0]
    b762:	2002      	movs	r0, #2
    b764:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    b768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b76c:	200002c3 	.word	0x200002c3
    b770:	4000f000 	.word	0x4000f000
    b774:	e000ed10 	.word	0xe000ed10
    b778:	4902      	ldr	r1, [pc, #8]	; (b784 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    b77a:	4801      	ldr	r0, [pc, #4]	; (b780 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    b77c:	6008      	str	r0, [r1, #0]
    b77e:	4770      	bx	lr
    b780:	02020000 	.word	0x02020000
    b784:	4001f508 	.word	0x4001f508
    b788:	00010000 	.word	0x00010000

0000b78c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b78c:	b510      	push	{r4, lr}
    b78e:	4604      	mov	r4, r0
    b790:	f000 f820 	bl	b7d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    b794:	2c00      	cmp	r4, #0
    b796:	d00e      	beq.n	b7b6 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    b798:	4a0b      	ldr	r2, [pc, #44]	; (b7c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b79a:	480b      	ldr	r0, [pc, #44]	; (b7c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b79c:	490b      	ldr	r1, [pc, #44]	; (b7cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b79e:	3214      	adds	r2, #20
    b7a0:	2c01      	cmp	r4, #1
    b7a2:	d005      	beq.n	b7b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    b7a4:	2c02      	cmp	r4, #2
    b7a6:	d007      	beq.n	b7b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    b7a8:	2181      	movs	r1, #129	; 0x81
    b7aa:	203d      	movs	r0, #61	; 0x3d
    b7ac:	f7f9 faec 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7b0:	2302      	movs	r3, #2
    b7b2:	6003      	str	r3, [r0, #0]
    b7b4:	6011      	str	r1, [r2, #0]
    b7b6:	bd10      	pop	{r4, pc}
    b7b8:	2303      	movs	r3, #3
    b7ba:	6003      	str	r3, [r0, #0]
    b7bc:	6011      	str	r1, [r2, #0]
    b7be:	4904      	ldr	r1, [pc, #16]	; (b7d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b7c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b7c4:	6008      	str	r0, [r1, #0]
    b7c6:	bd10      	pop	{r4, pc}
    b7c8:	4000f500 	.word	0x4000f500
    b7cc:	2000169f 	.word	0x2000169f
    b7d0:	4001f504 	.word	0x4001f504
    b7d4:	4805      	ldr	r0, [pc, #20]	; (b7ec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b7d6:	b510      	push	{r4, lr}
    b7d8:	2100      	movs	r1, #0
    b7da:	6001      	str	r1, [r0, #0]
    b7dc:	6001      	str	r1, [r0, #0]
    b7de:	f7ff ff51 	bl	b684 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    b7e2:	4903      	ldr	r1, [pc, #12]	; (b7f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b7e4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b7e8:	6008      	str	r0, [r1, #0]
    b7ea:	bd10      	pop	{r4, pc}
    b7ec:	4000f500 	.word	0x4000f500
    b7f0:	4001f508 	.word	0x4001f508

0000b7f4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b7f4:	4805      	ldr	r0, [pc, #20]	; (b80c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b7f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b7fa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b7fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b802:	2100      	movs	r1, #0
    b804:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b808:	4770      	bx	lr
    b80a:	0000      	.short	0x0000
    b80c:	40001000 	.word	0x40001000

0000b810 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b810:	4904      	ldr	r1, [pc, #16]	; (b824 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b812:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b816:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b81a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b81e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b822:	4770      	bx	lr
    b824:	40001000 	.word	0x40001000

0000b828 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b828:	4801      	ldr	r0, [pc, #4]	; (b830 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b82a:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b82e:	4770      	bx	lr
    b830:	20001158 	.word	0x20001158

0000b834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b836:	4c23      	ldr	r4, [pc, #140]	; (b8c4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b838:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b83c:	f010 0f10 	tst.w	r0, #16
    b840:	d001      	beq.n	b846 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b842:	2701      	movs	r7, #1
    b844:	e000      	b.n	b848 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b846:	2700      	movs	r7, #0
    b848:	2010      	movs	r0, #16
    b84a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b84e:	2002      	movs	r0, #2
    b850:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b854:	481c      	ldr	r0, [pc, #112]	; (b8c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b856:	2500      	movs	r5, #0
    b858:	491d      	ldr	r1, [pc, #116]	; (b8d0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b85a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b85e:	481b      	ldr	r0, [pc, #108]	; (b8cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b860:	6008      	str	r0, [r1, #0]
    b862:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b866:	f44f 7688 	mov.w	r6, #272	; 0x110
    b86a:	f010 0fff 	tst.w	r0, #255	; 0xff
    b86e:	d018      	beq.n	b8a2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b870:	20ff      	movs	r0, #255	; 0xff
    b872:	f88d 0000 	strb.w	r0, [sp]
    b876:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b87a:	2001      	movs	r0, #1
    b87c:	6120      	str	r0, [r4, #16]
    b87e:	e004      	b.n	b88a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b880:	f89d 0000 	ldrb.w	r0, [sp]
    b884:	1e40      	subs	r0, r0, #1
    b886:	f88d 0000 	strb.w	r0, [sp]
    b88a:	f89d 0000 	ldrb.w	r0, [sp]
    b88e:	b128      	cbz	r0, b89c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b890:	4631      	mov	r1, r6
    b892:	4620      	mov	r0, r4
    b894:	f005 f970 	bl	10b78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b898:	2800      	cmp	r0, #0
    b89a:	d0f1      	beq.n	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b89c:	f89d 0000 	ldrb.w	r0, [sp]
    b8a0:	b158      	cbz	r0, b8ba <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b8a2:	f000 fccd 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b8a6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b8aa:	f000 fe6f 	bl	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b8ae:	2f00      	cmp	r7, #0
    b8b0:	d002      	beq.n	b8b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b8b2:	2010      	movs	r0, #16
    b8b4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8ba:	f640 0171 	movw	r1, #2161	; 0x871
    b8be:	203e      	movs	r0, #62	; 0x3e
    b8c0:	f7f9 fa62 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8c4:	40001000 	.word	0x40001000
    b8c8:	20001158 	.word	0x20001158
    b8cc:	0c0e0000 	.word	0x0c0e0000
    b8d0:	4001f508 	.word	0x4001f508

0000b8d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8d8:	4d20      	ldr	r5, [pc, #128]	; (b95c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b8da:	4607      	mov	r7, r0
    b8dc:	4688      	mov	r8, r1
    b8de:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b8e2:	07c1      	lsls	r1, r0, #31
    b8e4:	d018      	beq.n	b918 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b8e6:	4a1e      	ldr	r2, [pc, #120]	; (b960 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b8e8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b8ec:	6011      	str	r1, [r2, #0]
    b8ee:	4c1d      	ldr	r4, [pc, #116]	; (b964 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b8f0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b8f4:	f041 0101 	orr.w	r1, r1, #1
    b8f8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b8fc:	f040 0002 	orr.w	r0, r0, #2
    b900:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b904:	4640      	mov	r0, r8
    b906:	f000 fa1b 	bl	bd40 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b90a:	f000 fc37 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b90e:	2601      	movs	r6, #1
    b910:	b13f      	cbz	r7, b922 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b912:	2f01      	cmp	r7, #1
    b914:	d00e      	beq.n	b934 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b916:	e016      	b.n	b946 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b918:	f240 7102 	movw	r1, #1794	; 0x702
    b91c:	203e      	movs	r0, #62	; 0x3e
    b91e:	f7f9 fa33 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b922:	4640      	mov	r0, r8
    b924:	f000 fc5a 	bl	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b928:	4640      	mov	r0, r8
    b92a:	f000 fc0b 	bl	c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b92e:	726e      	strb	r6, [r5, #9]
    b930:	6026      	str	r6, [r4, #0]
    b932:	e008      	b.n	b946 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b934:	f000 fc7a 	bl	c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b938:	f000 fdc4 	bl	c4c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    b93c:	2002      	movs	r0, #2
    b93e:	7268      	strb	r0, [r5, #9]
    b940:	f000 fcb0 	bl	c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    b944:	6066      	str	r6, [r4, #4]
    b946:	4808      	ldr	r0, [pc, #32]	; (b968 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b948:	64c6      	str	r6, [r0, #76]	; 0x4c
    b94a:	4807      	ldr	r0, [pc, #28]	; (b968 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b94c:	300c      	adds	r0, #12
    b94e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b952:	4638      	mov	r0, r7
    b954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b958:	f000 bdea 	b.w	c530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    b95c:	20001158 	.word	0x20001158
    b960:	4001f504 	.word	0x4001f504
    b964:	40001000 	.word	0x40001000
    b968:	40008000 	.word	0x40008000

0000b96c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b970:	4d32      	ldr	r5, [pc, #200]	; (ba3c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd0>)
    b972:	4606      	mov	r6, r0
    b974:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b978:	4689      	mov	r9, r1
    b97a:	6028      	str	r0, [r5, #0]
    b97c:	4c30      	ldr	r4, [pc, #192]	; (ba40 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd4>)
    b97e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b982:	f040 0002 	orr.w	r0, r0, #2
    b986:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b98a:	4608      	mov	r0, r1
    b98c:	f000 f9d8 	bl	bd40 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b990:	f000 fbf4 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b994:	f8df 80ac 	ldr.w	r8, [pc, #172]	; ba44 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    b998:	2700      	movs	r7, #0
    b99a:	b116      	cbz	r6, b9a2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b99c:	2e01      	cmp	r6, #1
    b99e:	d022      	beq.n	b9e6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x7a>
    b9a0:	e03a      	b.n	ba18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    b9a2:	4648      	mov	r0, r9
    b9a4:	f000 fc1a 	bl	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b9a8:	79e0      	ldrb	r0, [r4, #7]
    b9aa:	2801      	cmp	r0, #1
    b9ac:	d105      	bne.n	b9ba <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b9ae:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b9b2:	f041 0108 	orr.w	r1, r1, #8
    b9b6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b9ba:	4648      	mov	r0, r9
    b9bc:	f000 fbc2 	bl	c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b9c0:	2001      	movs	r0, #1
    b9c2:	7260      	strb	r0, [r4, #9]
    b9c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b9c6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b9ca:	62a0      	str	r0, [r4, #40]	; 0x28
    b9cc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b9d0:	6028      	str	r0, [r5, #0]
    b9d2:	491d      	ldr	r1, [pc, #116]	; (ba48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b9d4:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    b9d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b9dc:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    b9e0:	fbb0 f7f1 	udiv	r7, r0, r1
    b9e4:	e018      	b.n	ba18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    b9e6:	f000 fc21 	bl	c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b9ea:	f000 fd6b 	bl	c4c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    b9ee:	79e0      	ldrb	r0, [r4, #7]
    b9f0:	2801      	cmp	r0, #1
    b9f2:	d105      	bne.n	ba00 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x94>
    b9f4:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b9f8:	f041 0104 	orr.w	r1, r1, #4
    b9fc:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ba00:	2002      	movs	r0, #2
    ba02:	7260      	strb	r0, [r4, #9]
    ba04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ba06:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ba0a:	62a0      	str	r0, [r4, #40]	; 0x28
    ba0c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ba10:	6028      	str	r0, [r5, #0]
    ba12:	2729      	movs	r7, #41	; 0x29
    ba14:	f000 fc46 	bl	c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    ba18:	f000 fc90 	bl	c33c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    ba1c:	f001 f803 	bl	ca26 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ba20:	6800      	ldr	r0, [r0, #0]
    ba22:	2801      	cmp	r0, #1
    ba24:	d006      	beq.n	ba34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc8>
    ba26:	2100      	movs	r1, #0
    ba28:	4630      	mov	r0, r6
    ba2a:	f000 fd81 	bl	c530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    ba2e:	4638      	mov	r0, r7
    ba30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba34:	f7ff fefe 	bl	b834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ba38:	2000      	movs	r0, #0
    ba3a:	e7f9      	b.n	ba30 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    ba3c:	4001f504 	.word	0x4001f504
    ba40:	20001158 	.word	0x20001158
    ba44:	40001000 	.word	0x40001000
    ba48:	0000c60c 	.word	0x0000c60c

0000ba4c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ba4c:	4a02      	ldr	r2, [pc, #8]	; (ba58 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ba4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ba50:	6003      	str	r3, [r0, #0]
    ba52:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ba54:	6008      	str	r0, [r1, #0]
    ba56:	4770      	bx	lr
    ba58:	20001158 	.word	0x20001158

0000ba5c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ba5c:	b510      	push	{r4, lr}
    ba5e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ba60:	4901      	ldr	r1, [pc, #4]	; (ba68 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ba62:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    ba66:	bd10      	pop	{r4, pc}
    ba68:	20001148 	.word	0x20001148

0000ba6c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ba6c:	490f      	ldr	r1, [pc, #60]	; (baac <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ba6e:	b510      	push	{r4, lr}
    ba70:	69ca      	ldr	r2, [r1, #28]
    ba72:	4282      	cmp	r2, r0
    ba74:	d302      	bcc.n	ba7c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ba76:	f640 01f7 	movw	r1, #2295	; 0x8f7
    ba7a:	e00b      	b.n	ba94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    ba7c:	2201      	movs	r2, #1
    ba7e:	730a      	strb	r2, [r1, #12]
    ba80:	6108      	str	r0, [r1, #16]
    ba82:	490b      	ldr	r1, [pc, #44]	; (bab0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ba84:	644a      	str	r2, [r1, #68]	; 0x44
    ba86:	1d0a      	adds	r2, r1, #4
    ba88:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    ba8c:	4283      	cmp	r3, r0
    ba8e:	d304      	bcc.n	ba9a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    ba90:	f44f 6110 	mov.w	r1, #2304	; 0x900
    ba94:	203e      	movs	r0, #62	; 0x3e
    ba96:	f7f9 f977 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba9a:	2300      	movs	r3, #0
    ba9c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    baa0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    baa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    baa8:	f000 bd16 	b.w	c4d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    baac:	20001158 	.word	0x20001158
    bab0:	40008000 	.word	0x40008000

0000bab4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    bab4:	b570      	push	{r4, r5, r6, lr}
    bab6:	4c0f      	ldr	r4, [pc, #60]	; (baf4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    bab8:	4603      	mov	r3, r0
    baba:	2002      	movs	r0, #2
    babc:	7320      	strb	r0, [r4, #12]
    babe:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    bac2:	2096      	movs	r0, #150	; 0x96
    bac4:	f894 1020 	ldrb.w	r1, [r4, #32]
    bac8:	7d22      	ldrb	r2, [r4, #20]
    baca:	2d01      	cmp	r5, #1
    bacc:	d00e      	beq.n	baec <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    bace:	f000 fdc5 	bl	c65c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    bad2:	6120      	str	r0, [r4, #16]
    bad4:	4808      	ldr	r0, [pc, #32]	; (baf8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bad6:	2100      	movs	r1, #0
    bad8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    badc:	6921      	ldr	r1, [r4, #16]
    bade:	69e0      	ldr	r0, [r4, #28]
    bae0:	4408      	add	r0, r1
    bae2:	4905      	ldr	r1, [pc, #20]	; (baf8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bae4:	1d09      	adds	r1, r1, #4
    bae6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    baea:	bd70      	pop	{r4, r5, r6, pc}
    baec:	f000 fdd4 	bl	c698 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    baf0:	e7ef      	b.n	bad2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    baf2:	0000      	.short	0x0000
    baf4:	20001158 	.word	0x20001158
    baf8:	40008000 	.word	0x40008000

0000bafc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    bafc:	b510      	push	{r4, lr}
    bafe:	f001 f8d4 	bl	ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bb02:	2800      	cmp	r0, #0
    bb04:	d006      	beq.n	bb14 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    bb06:	4804      	ldr	r0, [pc, #16]	; (bb18 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    bb08:	6801      	ldr	r1, [r0, #0]
    bb0a:	f021 0101 	bic.w	r1, r1, #1
    bb0e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    bb12:	6001      	str	r1, [r0, #0]
    bb14:	bd10      	pop	{r4, pc}
    bb16:	0000      	.short	0x0000
    bb18:	40001774 	.word	0x40001774

0000bb1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb20:	2238      	movs	r2, #56	; 0x38
    bb22:	2100      	movs	r1, #0
    bb24:	4813      	ldr	r0, [pc, #76]	; (bb74 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bb26:	f001 f970 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb2a:	f000 fd2f 	bl	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bb2e:	f001 f875 	bl	cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bb32:	4d11      	ldr	r5, [pc, #68]	; (bb78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb34:	4e10      	ldr	r6, [pc, #64]	; (bb78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb36:	2400      	movs	r4, #0
    bb38:	4f0f      	ldr	r7, [pc, #60]	; (bb78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb3a:	3508      	adds	r5, #8
    bb3c:	3610      	adds	r6, #16
    bb3e:	b928      	cbnz	r0, bb4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb40:	f001 f883 	bl	cc4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bb44:	b910      	cbnz	r0, bb4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb46:	f001 f88a 	bl	cc5e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bb4a:	b108      	cbz	r0, bb50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bb4c:	2224      	movs	r2, #36	; 0x24
    bb4e:	e006      	b.n	bb5e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bb50:	f001 f8c5 	bl	ccde <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bb54:	b910      	cbnz	r0, bb5c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bb56:	f001 f8b8 	bl	ccca <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bb5a:	b140      	cbz	r0, bb6e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bb5c:	2240      	movs	r2, #64	; 0x40
    bb5e:	21ff      	movs	r1, #255	; 0xff
    bb60:	4638      	mov	r0, r7
    bb62:	f001 f952 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb66:	602c      	str	r4, [r5, #0]
    bb68:	6034      	str	r4, [r6, #0]
    bb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb6e:	2238      	movs	r2, #56	; 0x38
    bb70:	e7f5      	b.n	bb5e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bb72:	0000      	.short	0x0000
    bb74:	20001158 	.word	0x20001158
    bb78:	40000e00 	.word	0x40000e00

0000bb7c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bb7c:	4805      	ldr	r0, [pc, #20]	; (bb94 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    bb7e:	b510      	push	{r4, lr}
    bb80:	69c0      	ldr	r0, [r0, #28]
    bb82:	2800      	cmp	r0, #0
    bb84:	d104      	bne.n	bb90 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    bb86:	f240 2139 	movw	r1, #569	; 0x239
    bb8a:	203e      	movs	r0, #62	; 0x3e
    bb8c:	f7f9 f8fc 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb90:	bd10      	pop	{r4, pc}
    bb92:	0000      	.short	0x0000
    bb94:	20001158 	.word	0x20001158

0000bb98 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    bb98:	4805      	ldr	r0, [pc, #20]	; (bbb0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    bb9a:	b510      	push	{r4, lr}
    bb9c:	6980      	ldr	r0, [r0, #24]
    bb9e:	2800      	cmp	r0, #0
    bba0:	d104      	bne.n	bbac <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    bba2:	f240 2133 	movw	r1, #563	; 0x233
    bba6:	203e      	movs	r0, #62	; 0x3e
    bba8:	f7f9 f8ee 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbac:	bd10      	pop	{r4, pc}
    bbae:	0000      	.short	0x0000
    bbb0:	20001158 	.word	0x20001158

0000bbb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    bbb4:	b510      	push	{r4, lr}
    bbb6:	f000 fc9d 	bl	c4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    bbba:	f7ff fe3b 	bl	b834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bbbe:	f7f8 ffa9 	bl	4b14 <mpsl_fem_disable>
    bbc2:	b130      	cbz	r0, bbd2 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bbc4:	1c40      	adds	r0, r0, #1
    bbc6:	d004      	beq.n	bbd2 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bbc8:	f240 5102 	movw	r1, #1282	; 0x502
    bbcc:	203e      	movs	r0, #62	; 0x3e
    bbce:	f7f9 f8db 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbd2:	480f      	ldr	r0, [pc, #60]	; (bc10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    bbd4:	4a0f      	ldr	r2, [pc, #60]	; (bc14 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    bbd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bbd8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bbdc:	6011      	str	r1, [r2, #0]
    bbde:	2400      	movs	r4, #0
    bbe0:	6284      	str	r4, [r0, #40]	; 0x28
    bbe2:	7304      	strb	r4, [r0, #12]
    bbe4:	61c4      	str	r4, [r0, #28]
    bbe6:	6184      	str	r4, [r0, #24]
    bbe8:	f000 fc84 	bl	c4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    bbec:	480a      	ldr	r0, [pc, #40]	; (bc18 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    bbee:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bbf2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bbf6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bbfa:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    bbfe:	2001      	movs	r0, #1
    bc00:	f004 ffa9 	bl	10b56 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc08:	2001      	movs	r0, #1
    bc0a:	f004 bf97 	b.w	10b3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bc0e:	0000      	.short	0x0000
    bc10:	20001158 	.word	0x20001158
    bc14:	4001f508 	.word	0x4001f508
    bc18:	40008000 	.word	0x40008000

0000bc1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    bc1c:	b570      	push	{r4, r5, r6, lr}
    bc1e:	2001      	movs	r0, #1
    bc20:	f004 ff99 	bl	10b56 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc24:	4c37      	ldr	r4, [pc, #220]	; (bd04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    bc26:	2000      	movs	r0, #0
    bc28:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bc2c:	2001      	movs	r0, #1
    bc2e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bc32:	f001 f82a 	bl	cc8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc36:	4d34      	ldr	r5, [pc, #208]	; (bd08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc38:	b118      	cbz	r0, bc42 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    bc3a:	6828      	ldr	r0, [r5, #0]
    bc3c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bc40:	6028      	str	r0, [r5, #0]
    bc42:	f001 f816 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc46:	b128      	cbz	r0, bc54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    bc48:	6828      	ldr	r0, [r5, #0]
    bc4a:	4930      	ldr	r1, [pc, #192]	; (bd0c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bc4c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    bc50:	4308      	orrs	r0, r1
    bc52:	6028      	str	r0, [r5, #0]
    bc54:	f001 f829 	bl	ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc58:	b138      	cbz	r0, bc6a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    bc5a:	482b      	ldr	r0, [pc, #172]	; (bd08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc5c:	1d00      	adds	r0, r0, #4
    bc5e:	6801      	ldr	r1, [r0, #0]
    bc60:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    bc64:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    bc68:	6001      	str	r1, [r0, #0]
    bc6a:	4927      	ldr	r1, [pc, #156]	; (bd08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc6c:	4828      	ldr	r0, [pc, #160]	; (bd10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    bc6e:	313c      	adds	r1, #60	; 0x3c
    bc70:	6008      	str	r0, [r1, #0]
    bc72:	f7f8 ff73 	bl	4b5c <mpsl_fem_device_config_254_apply_get>
    bc76:	b140      	cbz	r0, bc8a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bc78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc7c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    bc80:	1c41      	adds	r1, r0, #1
    bc82:	d002      	beq.n	bc8a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bc84:	4920      	ldr	r1, [pc, #128]	; (bd08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc86:	3110      	adds	r1, #16
    bc88:	6008      	str	r0, [r1, #0]
    bc8a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    bc8e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    bc90:	1c41      	adds	r1, r0, #1
    bc92:	d004      	beq.n	bc9e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    bc94:	491f      	ldr	r1, [pc, #124]	; (bd14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    bc96:	680a      	ldr	r2, [r1, #0]
    bc98:	f360 4217 	bfi	r2, r0, #16, #8
    bc9c:	600a      	str	r2, [r1, #0]
    bc9e:	f240 1103 	movw	r1, #259	; 0x103
    bca2:	f240 605b 	movw	r0, #1627	; 0x65b
    bca6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    bcaa:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bcae:	2001      	movs	r0, #1
    bcb0:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    bcb4:	f000 f844 	bl	bd40 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bcb8:	f240 2001 	movw	r0, #513	; 0x201
    bcbc:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    bcc0:	2002      	movs	r0, #2
    bcc2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bcc6:	4915      	ldr	r1, [pc, #84]	; (bd1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    bcc8:	4813      	ldr	r0, [pc, #76]	; (bd18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bcca:	6008      	str	r0, [r1, #0]
    bccc:	4914      	ldr	r1, [pc, #80]	; (bd20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bcce:	2000      	movs	r0, #0
    bcd0:	4d14      	ldr	r5, [pc, #80]	; (bd24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    bcd2:	8608      	strh	r0, [r1, #48]	; 0x30
    bcd4:	3110      	adds	r1, #16
    bcd6:	61c8      	str	r0, [r1, #28]
    bcd8:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    bcdc:	7028      	strb	r0, [r5, #0]
    bcde:	2001      	movs	r0, #1
    bce0:	f004 ff2c 	bl	10b3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bce4:	2010      	movs	r0, #16
    bce6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bcea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bcee:	2002      	movs	r0, #2
    bcf0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bcf4:	6868      	ldr	r0, [r5, #4]
    bcf6:	2800      	cmp	r0, #0
    bcf8:	d002      	beq.n	bd00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    bcfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bcfe:	4700      	bx	r0
    bd00:	bd70      	pop	{r4, r5, r6, pc}
    bd02:	0000      	.short	0x0000
    bd04:	40001000 	.word	0x40001000
    bd08:	4000173c 	.word	0x4000173c
    bd0c:	80000096 	.word	0x80000096
    bd10:	8900002c 	.word	0x8900002c
    bd14:	4000158c 	.word	0x4000158c
    bd18:	0c0e0000 	.word	0x0c0e0000
    bd1c:	4001f508 	.word	0x4001f508
    bd20:	20001148 	.word	0x20001148
    bd24:	20000274 	.word	0x20000274

0000bd28 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bd28:	4901      	ldr	r1, [pc, #4]	; (bd30 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bd2a:	7548      	strb	r0, [r1, #21]
    bd2c:	4770      	bx	lr
    bd2e:	0000      	.short	0x0000
    bd30:	20001158 	.word	0x20001158

0000bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    bd34:	4901      	ldr	r1, [pc, #4]	; (bd3c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    bd36:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bd3a:	4770      	bx	lr
    bd3c:	0000c638 	.word	0x0000c638

0000bd40 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    bd40:	4908      	ldr	r1, [pc, #32]	; (bd64 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    bd42:	b510      	push	{r4, lr}
    bd44:	7508      	strb	r0, [r1, #20]
    bd46:	4908      	ldr	r1, [pc, #32]	; (bd68 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    bd48:	2801      	cmp	r0, #1
    bd4a:	d006      	beq.n	bd5a <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    bd4c:	2802      	cmp	r0, #2
    bd4e:	d006      	beq.n	bd5e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    bd50:	f640 41e8 	movw	r1, #3304	; 0xce8
    bd54:	203e      	movs	r0, #62	; 0x3e
    bd56:	f7f9 f817 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd5a:	2003      	movs	r0, #3
    bd5c:	e000      	b.n	bd60 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    bd5e:	2004      	movs	r0, #4
    bd60:	6008      	str	r0, [r1, #0]
    bd62:	bd10      	pop	{r4, pc}
    bd64:	20001158 	.word	0x20001158
    bd68:	40001510 	.word	0x40001510

0000bd6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bd6c:	4905      	ldr	r1, [pc, #20]	; (bd84 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bd6e:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bd72:	4805      	ldr	r0, [pc, #20]	; (bd88 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bd74:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bd78:	f041 0101 	orr.w	r1, r1, #1
    bd7c:	7001      	strb	r1, [r0, #0]
    bd7e:	f000 baa3 	b.w	c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    bd82:	0000      	.short	0x0000
    bd84:	40001000 	.word	0x40001000
    bd88:	20001158 	.word	0x20001158

0000bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    bd8c:	4901      	ldr	r1, [pc, #4]	; (bd94 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    bd8e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bd92:	4770      	bx	lr
    bd94:	0000c644 	.word	0x0000c644

0000bd98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd9c:	4e32      	ldr	r6, [pc, #200]	; (be68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    bd9e:	4607      	mov	r7, r0
    bda0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bda4:	4689      	mov	r9, r1
    bda6:	4614      	mov	r4, r2
    bda8:	6030      	str	r0, [r6, #0]
    bdaa:	4610      	mov	r0, r2
    bdac:	f7ff ffc8 	bl	bd40 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bdb0:	f000 f9e4 	bl	c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bdb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; be6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    bdb8:	4d2d      	ldr	r5, [pc, #180]	; (be70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    bdba:	f04f 0801 	mov.w	r8, #1
    bdbe:	b127      	cbz	r7, bdca <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    bdc0:	2f01      	cmp	r7, #1
    bdc2:	d015      	beq.n	bdf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    bdc4:	f240 71f1 	movw	r1, #2033	; 0x7f1
    bdc8:	e044      	b.n	be54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    bdca:	4620      	mov	r0, r4
    bdcc:	f000 fa06 	bl	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bdd0:	4620      	mov	r0, r4
    bdd2:	f000 f9b7 	bl	c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bdd6:	4827      	ldr	r0, [pc, #156]	; (be74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    bdd8:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    bddc:	4648      	mov	r0, r9
    bdde:	f000 fbdd 	bl	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    bde2:	4604      	mov	r4, r0
    bde4:	4650      	mov	r0, sl
    bde6:	f000 fb97 	bl	c518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    bdea:	f885 8009 	strb.w	r8, [r5, #9]
    bdee:	e011      	b.n	be14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
    bdf0:	f000 fa1c 	bl	c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bdf4:	f000 fb66 	bl	c4c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    bdf8:	f000 fa54 	bl	c2a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    bdfc:	f649 71ba 	movw	r1, #40890	; 0x9fba
    be00:	4648      	mov	r0, r9
    be02:	f000 fbcb 	bl	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    be06:	4604      	mov	r4, r0
    be08:	4818      	ldr	r0, [pc, #96]	; (be6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    be0a:	1d00      	adds	r0, r0, #4
    be0c:	f000 fb84 	bl	c518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    be10:	2002      	movs	r0, #2
    be12:	7268      	strb	r0, [r5, #9]
    be14:	f8df 9060 	ldr.w	r9, [pc, #96]	; be78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    be18:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    be1c:	4918      	ldr	r1, [pc, #96]	; (be80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    be1e:	4817      	ldr	r0, [pc, #92]	; (be7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    be20:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    be24:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    be26:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    be2a:	62a8      	str	r0, [r5, #40]	; 0x28
    be2c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    be30:	6030      	str	r0, [r6, #0]
    be32:	2010      	movs	r0, #16
    be34:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    be38:	03c0      	lsls	r0, r0, #15
    be3a:	6030      	str	r0, [r6, #0]
    be3c:	f000 fa7e 	bl	c33c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    be40:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    be44:	480c      	ldr	r0, [pc, #48]	; (be78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    be46:	300c      	adds	r0, #12
    be48:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    be4c:	42a0      	cmp	r0, r4
    be4e:	d304      	bcc.n	be5a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc2>
    be50:	f640 0118 	movw	r1, #2072	; 0x818
    be54:	203e      	movs	r0, #62	; 0x3e
    be56:	f7f8 ff97 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be5a:	4621      	mov	r1, r4
    be5c:	4638      	mov	r0, r7
    be5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be62:	f000 bb65 	b.w	c530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    be66:	0000      	.short	0x0000
    be68:	4001f504 	.word	0x4001f504
    be6c:	40001000 	.word	0x40001000
    be70:	20001158 	.word	0x20001158
    be74:	0000c60c 	.word	0x0000c60c
    be78:	40008000 	.word	0x40008000
    be7c:	40008140 	.word	0x40008140
    be80:	4001f098 	.word	0x4001f098

0000be84 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    be84:	4b0d      	ldr	r3, [pc, #52]	; (bebc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    be86:	b510      	push	{r4, lr}
    be88:	71d8      	strb	r0, [r3, #7]
    be8a:	729a      	strb	r2, [r3, #10]
    be8c:	b151      	cbz	r1, bea4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    be8e:	2002      	movs	r0, #2
    be90:	7218      	strb	r0, [r3, #8]
    be92:	2801      	cmp	r0, #1
    be94:	d008      	beq.n	bea8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    be96:	2802      	cmp	r0, #2
    be98:	d00f      	beq.n	beba <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    be9a:	f640 210d 	movw	r1, #2573	; 0xa0d
    be9e:	203e      	movs	r0, #62	; 0x3e
    bea0:	f7f8 ff72 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bea4:	2001      	movs	r0, #1
    bea6:	e7f3      	b.n	be90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bea8:	7a58      	ldrb	r0, [r3, #9]
    beaa:	2802      	cmp	r0, #2
    beac:	d105      	bne.n	beba <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    beae:	f000 f9bd 	bl	c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    beb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beb6:	f000 bb05 	b.w	c4c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    beba:	bd10      	pop	{r4, pc}
    bebc:	20001158 	.word	0x20001158

0000bec0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bec0:	4902      	ldr	r1, [pc, #8]	; (becc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bec2:	2000      	movs	r0, #0
    bec4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bec8:	4770      	bx	lr
    beca:	0000      	.short	0x0000
    becc:	40008000 	.word	0x40008000

0000bed0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bed0:	4904      	ldr	r1, [pc, #16]	; (bee4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    bed2:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    bed6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    beda:	4249      	negs	r1, r1
    bedc:	7001      	strb	r1, [r0, #0]
    bede:	2001      	movs	r0, #1
    bee0:	4770      	bx	lr
    bee2:	0000      	.short	0x0000
    bee4:	40001000 	.word	0x40001000

0000bee8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bee8:	4903      	ldr	r1, [pc, #12]	; (bef8 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    beea:	0e02      	lsrs	r2, r0, #24
    beec:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bef0:	0200      	lsls	r0, r0, #8
    bef2:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bef6:	4770      	bx	lr
    bef8:	40001000 	.word	0x40001000

0000befc <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    befc:	6800      	ldr	r0, [r0, #0]
    befe:	4903      	ldr	r1, [pc, #12]	; (bf0c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bf00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf04:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bf08:	4770      	bx	lr
    bf0a:	0000      	.short	0x0000
    bf0c:	40001000 	.word	0x40001000

0000bf10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    bf10:	b510      	push	{r4, lr}
    bf12:	2200      	movs	r2, #0
    bf14:	2901      	cmp	r1, #1
    bf16:	d006      	beq.n	bf26 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    bf18:	2902      	cmp	r1, #2
    bf1a:	d002      	beq.n	bf22 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    bf1c:	f240 219d 	movw	r1, #669	; 0x29d
    bf20:	e014      	b.n	bf4c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    bf22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    bf26:	490b      	ldr	r1, [pc, #44]	; (bf54 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    bf28:	430a      	orrs	r2, r1
    bf2a:	490b      	ldr	r1, [pc, #44]	; (bf58 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bf2c:	600a      	str	r2, [r1, #0]
    bf2e:	490b      	ldr	r1, [pc, #44]	; (bf5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    bf30:	4308      	orrs	r0, r1
    bf32:	4909      	ldr	r1, [pc, #36]	; (bf58 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bf34:	1d09      	adds	r1, r1, #4
    bf36:	6008      	str	r0, [r1, #0]
    bf38:	4809      	ldr	r0, [pc, #36]	; (bf60 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    bf3a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bf3e:	b2c0      	uxtb	r0, r0
    bf40:	2803      	cmp	r0, #3
    bf42:	d001      	beq.n	bf48 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    bf44:	280b      	cmp	r0, #11
    bf46:	d104      	bne.n	bf52 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    bf48:	f240 21b5 	movw	r1, #693	; 0x2b5
    bf4c:	203e      	movs	r0, #62	; 0x3e
    bf4e:	f7f8 ff1b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf52:	bd10      	pop	{r4, pc}
    bf54:	00100108 	.word	0x00100108
    bf58:	40001514 	.word	0x40001514
    bf5c:	02030000 	.word	0x02030000
    bf60:	40001000 	.word	0x40001000

0000bf64 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bf64:	4901      	ldr	r1, [pc, #4]	; (bf6c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bf66:	7588      	strb	r0, [r1, #22]
    bf68:	4770      	bx	lr
    bf6a:	0000      	.short	0x0000
    bf6c:	20001158 	.word	0x20001158

0000bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf74:	4853      	ldr	r0, [pc, #332]	; (c0c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bf76:	f04f 0a01 	mov.w	sl, #1
    bf7a:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bf7e:	4851      	ldr	r0, [pc, #324]	; (c0c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bf80:	300c      	adds	r0, #12
    bf82:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bf86:	f7f7 fd6b 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    bf8a:	4d4f      	ldr	r5, [pc, #316]	; (c0c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bf8c:	e9c5 070c 	strd	r0, r7, [r5, #48]	; 0x30
    bf90:	f000 f956 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bf94:	494d      	ldr	r1, [pc, #308]	; (c0cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bf96:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bf98:	6008      	str	r0, [r1, #0]
    bf9a:	f8df 9134 	ldr.w	r9, [pc, #308]	; c0d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    bf9e:	2600      	movs	r6, #0
    bfa0:	62ae      	str	r6, [r5, #40]	; 0x28
    bfa2:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bfa6:	f240 121d 	movw	r2, #285	; 0x11d
    bfaa:	4391      	bics	r1, r2
    bfac:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bfb0:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    bfb4:	f000 f9d6 	bl	c364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x22c>
    bfb8:	4604      	mov	r4, r0
    bfba:	4842      	ldr	r0, [pc, #264]	; (c0c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bfbc:	3008      	adds	r0, #8
    bfbe:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bfc2:	61e8      	str	r0, [r5, #28]
    bfc4:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
    bfc8:	7d28      	ldrb	r0, [r5, #20]
    bfca:	f885 0020 	strb.w	r0, [r5, #32]
    bfce:	7a68      	ldrb	r0, [r5, #9]
    bfd0:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    bfd4:	61ae      	str	r6, [r5, #24]
    bfd6:	4e3f      	ldr	r6, [pc, #252]	; (c0d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    bfd8:	07a0      	lsls	r0, r4, #30
    bfda:	d502      	bpl.n	bfe2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bfdc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bfe0:	61a8      	str	r0, [r5, #24]
    bfe2:	0720      	lsls	r0, r4, #28
    bfe4:	d502      	bpl.n	bfec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bfe6:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bfea:	61a8      	str	r0, [r5, #24]
    bfec:	f04f 0800 	mov.w	r8, #0
    bff0:	4639      	mov	r1, r7
    bff2:	4620      	mov	r0, r4
    bff4:	f000 fa2c 	bl	c450 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    bff8:	b918      	cbnz	r0, c002 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bffa:	f8c9 a010 	str.w	sl, [r9, #16]
    bffe:	f04f 0801 	mov.w	r8, #1
    c002:	4f31      	ldr	r7, [pc, #196]	; (c0c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c004:	07e0      	lsls	r0, r4, #31
    c006:	f1a7 0710 	sub.w	r7, r7, #16
    c00a:	d002      	beq.n	c012 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    c00c:	6838      	ldr	r0, [r7, #0]
    c00e:	4780      	blx	r0
    c010:	e032      	b.n	c078 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c012:	07a0      	lsls	r0, r4, #30
    c014:	d527      	bpl.n	c066 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c016:	0760      	lsls	r0, r4, #29
    c018:	d41f      	bmi.n	c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c01a:	f000 fe46 	bl	ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c01e:	b9e0      	cbnz	r0, c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c020:	f000 fe33 	bl	cc8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c024:	b9c8      	cbnz	r0, c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c026:	482c      	ldr	r0, [pc, #176]	; (c0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c028:	6800      	ldr	r0, [r0, #0]
    c02a:	f3c0 5342 	ubfx	r3, r0, #21, #3
    c02e:	f3c0 6200 	ubfx	r2, r0, #24, #1
    c032:	f000 010f 	and.w	r1, r0, #15
    c036:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    c03a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c03e:	b162      	cbz	r2, c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c040:	b119      	cbz	r1, c04a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c042:	f1bc 0f00 	cmp.w	ip, #0
    c046:	d000      	beq.n	c04a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c048:	b938      	cbnz	r0, c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c04a:	4823      	ldr	r0, [pc, #140]	; (c0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c04c:	1d00      	adds	r0, r0, #4
    c04e:	6800      	ldr	r0, [r0, #0]
    c050:	b118      	cbz	r0, c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c052:	2b03      	cmp	r3, #3
    c054:	d201      	bcs.n	c05a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c056:	f044 0404 	orr.w	r4, r4, #4
    c05a:	f344 0080 	sbfx	r0, r4, #2, #1
    c05e:	4641      	mov	r1, r8
    c060:	1c40      	adds	r0, r0, #1
    c062:	687a      	ldr	r2, [r7, #4]
    c064:	e007      	b.n	c076 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c066:	f014 0f28 	tst.w	r4, #40	; 0x28
    c06a:	d005      	beq.n	c078 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c06c:	f344 1140 	sbfx	r1, r4, #5, #1
    c070:	68ba      	ldr	r2, [r7, #8]
    c072:	4640      	mov	r0, r8
    c074:	1c49      	adds	r1, r1, #1
    c076:	4790      	blx	r2
    c078:	06e0      	lsls	r0, r4, #27
    c07a:	d501      	bpl.n	c080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    c07c:	68f8      	ldr	r0, [r7, #12]
    c07e:	4780      	blx	r0
    c080:	7a68      	ldrb	r0, [r5, #9]
    c082:	2802      	cmp	r0, #2
    c084:	d11c      	bne.n	c0c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c086:	7b28      	ldrb	r0, [r5, #12]
    c088:	2800      	cmp	r0, #0
    c08a:	d019      	beq.n	c0c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c08c:	2802      	cmp	r0, #2
    c08e:	d004      	beq.n	c09a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    c090:	2801      	cmp	r0, #1
    c092:	d006      	beq.n	c0a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    c094:	f640 31e3 	movw	r1, #3043	; 0xbe3
    c098:	e009      	b.n	c0ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    c09a:	6929      	ldr	r1, [r5, #16]
    c09c:	69e8      	ldr	r0, [r5, #28]
    c09e:	4408      	add	r0, r1
    c0a0:	e008      	b.n	c0b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c0a2:	69e9      	ldr	r1, [r5, #28]
    c0a4:	6928      	ldr	r0, [r5, #16]
    c0a6:	4288      	cmp	r0, r1
    c0a8:	d804      	bhi.n	c0b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c0aa:	f640 31e4 	movw	r1, #3044	; 0xbe4
    c0ae:	203e      	movs	r0, #62	; 0x3e
    c0b0:	f7f8 fe6a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0b4:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c0b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0bc:	f000 ba0c 	b.w	c4d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    c0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0c4:	40008000 	.word	0x40008000
    c0c8:	20001158 	.word	0x20001158
    c0cc:	4001f508 	.word	0x4001f508
    c0d0:	40001000 	.word	0x40001000
    c0d4:	40008004 	.word	0x40008004
    c0d8:	40001450 	.word	0x40001450

0000c0dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c0dc:	b570      	push	{r4, r5, r6, lr}
    c0de:	4b15      	ldr	r3, [pc, #84]	; (c134 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    c0e0:	888c      	ldrh	r4, [r1, #4]
    c0e2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c0e6:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c0ea:	780c      	ldrb	r4, [r1, #0]
    c0ec:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c0f0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c0f4:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c0f8:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    c0fc:	2101      	movs	r1, #1
    c0fe:	4081      	lsls	r1, r0
    c100:	430c      	orrs	r4, r1
    c102:	b2e4      	uxtb	r4, r4
    c104:	b132      	cbz	r2, c114 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    c106:	2a01      	cmp	r2, #1
    c108:	d00a      	beq.n	c120 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    c10a:	f240 5164 	movw	r1, #1380	; 0x564
    c10e:	203e      	movs	r0, #62	; 0x3e
    c110:	f7f8 fe3a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c114:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c118:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c11c:	4388      	bics	r0, r1
    c11e:	e004      	b.n	c12a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    c120:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c124:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    c128:	b2c0      	uxtb	r0, r0
    c12a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    c12e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c132:	bd70      	pop	{r4, r5, r6, pc}
    c134:	40001000 	.word	0x40001000

0000c138 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c138:	4901      	ldr	r1, [pc, #4]	; (c140 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c13a:	2001      	movs	r0, #1
    c13c:	7008      	strb	r0, [r1, #0]
    c13e:	4770      	bx	lr
    c140:	20000274 	.word	0x20000274
    c144:	b510      	push	{r4, lr}
    c146:	4604      	mov	r4, r0
    c148:	f000 fdaf 	bl	ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c14c:	2800      	cmp	r0, #0
    c14e:	d00e      	beq.n	c16e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c150:	4a09      	ldr	r2, [pc, #36]	; (c178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c152:	6811      	ldr	r1, [r2, #0]
    c154:	0650      	lsls	r0, r2, #25
    c156:	2c02      	cmp	r4, #2
    c158:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c15c:	d008      	beq.n	c170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c15e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c162:	bf00      	nop
    c164:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c168:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c16c:	6010      	str	r0, [r2, #0]
    c16e:	bd10      	pop	{r4, pc}
    c170:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c174:	e7f6      	b.n	c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c176:	0000      	.short	0x0000
    c178:	40001588 	.word	0x40001588
    c17c:	4815      	ldr	r0, [pc, #84]	; (c1d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    c17e:	7d81      	ldrb	r1, [r0, #22]
    c180:	2925      	cmp	r1, #37	; 0x25
    c182:	d00a      	beq.n	c19a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    c184:	2926      	cmp	r1, #38	; 0x26
    c186:	d00b      	beq.n	c1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c188:	2927      	cmp	r1, #39	; 0x27
    c18a:	d00c      	beq.n	c1a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    c18c:	7d80      	ldrb	r0, [r0, #22]
    c18e:	0040      	lsls	r0, r0, #1
    c190:	290a      	cmp	r1, #10
    c192:	d80b      	bhi.n	c1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    c194:	f600 1064 	addw	r0, r0, #2404	; 0x964
    c198:	e00a      	b.n	c1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    c19a:	f640 1062 	movw	r0, #2402	; 0x962
    c19e:	e00f      	b.n	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1a0:	f640 107a 	movw	r0, #2426	; 0x97a
    c1a4:	e00c      	b.n	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1a6:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    c1aa:	e009      	b.n	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1ac:	f600 1066 	addw	r0, r0, #2406	; 0x966
    c1b0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c1b4:	d204      	bcs.n	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1b6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c1ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c1be:	e001      	b.n	c1c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    c1c0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c1c4:	4a04      	ldr	r2, [pc, #16]	; (c1d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    c1c6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c1ca:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c1ce:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c1d2:	4770      	bx	lr
    c1d4:	20001158 	.word	0x20001158
    c1d8:	40001000 	.word	0x40001000
    c1dc:	4912      	ldr	r1, [pc, #72]	; (c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c1de:	b508      	push	{r3, lr}
    c1e0:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c1e4:	7d89      	ldrb	r1, [r1, #22]
    c1e6:	2801      	cmp	r0, #1
    c1e8:	d00a      	beq.n	c200 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    c1ea:	2802      	cmp	r0, #2
    c1ec:	d00a      	beq.n	c204 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c1ee:	2804      	cmp	r0, #4
    c1f0:	d00a      	beq.n	c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    c1f2:	2808      	cmp	r0, #8
    c1f4:	d00a      	beq.n	c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c1f6:	f240 31fe 	movw	r1, #1022	; 0x3fe
    c1fa:	2006      	movs	r0, #6
    c1fc:	f7f8 fdc4 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c200:	2000      	movs	r0, #0
    c202:	e004      	b.n	c20e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c204:	2001      	movs	r0, #1
    c206:	e002      	b.n	c20e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c208:	2003      	movs	r0, #3
    c20a:	e000      	b.n	c20e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c20c:	2002      	movs	r0, #2
    c20e:	466b      	mov	r3, sp
    c210:	f7f5 f95a 	bl	14c8 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c214:	b118      	cbz	r0, c21e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    c216:	f240 5196 	movw	r1, #1430	; 0x596
    c21a:	203e      	movs	r0, #62	; 0x3e
    c21c:	e7ee      	b.n	c1fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    c21e:	f99d 0000 	ldrsb.w	r0, [sp]
    c222:	f000 fa59 	bl	c6d8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c226:	bd08      	pop	{r3, pc}
    c228:	20001158 	.word	0x20001158
    c22c:	4803      	ldr	r0, [pc, #12]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    c22e:	7a01      	ldrb	r1, [r0, #8]
    c230:	2901      	cmp	r1, #1
    c232:	d102      	bne.n	c23a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    c234:	7a80      	ldrb	r0, [r0, #10]
    c236:	f7ff bfd1 	b.w	c1dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c23a:	4770      	bx	lr
    c23c:	20001158 	.word	0x20001158
    c240:	480d      	ldr	r0, [pc, #52]	; (c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x140>)
    c242:	b510      	push	{r4, lr}
    c244:	7a40      	ldrb	r0, [r0, #9]
    c246:	2801      	cmp	r0, #1
    c248:	d00c      	beq.n	c264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>
    c24a:	2802      	cmp	r0, #2
    c24c:	d113      	bne.n	c276 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c24e:	f7f8 fc67 	bl	4b20 <mpsl_fem_lna_configuration_clear>
    c252:	2800      	cmp	r0, #0
    c254:	d00f      	beq.n	c276 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c256:	1c40      	adds	r0, r0, #1
    c258:	d00d      	beq.n	c276 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c25a:	f640 0188 	movw	r1, #2184	; 0x888
    c25e:	203e      	movs	r0, #62	; 0x3e
    c260:	f7f8 fd92 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c264:	f7f8 fc68 	bl	4b38 <mpsl_fem_pa_configuration_clear>
    c268:	2800      	cmp	r0, #0
    c26a:	d004      	beq.n	c276 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c26c:	1c40      	adds	r0, r0, #1
    c26e:	d002      	beq.n	c276 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c270:	f640 0182 	movw	r1, #2178	; 0x882
    c274:	e7f3      	b.n	c25e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x126>
    c276:	bd10      	pop	{r4, pc}
    c278:	20001158 	.word	0x20001158
    c27c:	4808      	ldr	r0, [pc, #32]	; (c2a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>)
    c27e:	2100      	movs	r1, #0
    c280:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c284:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c288:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c28c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c290:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c294:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c298:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c29c:	4770      	bx	lr
    c29e:	0000      	.short	0x0000
    c2a0:	40001000 	.word	0x40001000
    c2a4:	b510      	push	{r4, lr}
    c2a6:	f000 fd00 	bl	ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c2aa:	2800      	cmp	r0, #0
    c2ac:	d108      	bne.n	c2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c2ae:	f000 fcec 	bl	cc8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c2b2:	2800      	cmp	r0, #0
    c2b4:	d104      	bne.n	c2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c2b6:	4803      	ldr	r0, [pc, #12]	; (c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c2b8:	6801      	ldr	r1, [r0, #0]
    c2ba:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c2be:	6001      	str	r1, [r0, #0]
    c2c0:	bd10      	pop	{r4, pc}
    c2c2:	0000      	.short	0x0000
    c2c4:	40001568 	.word	0x40001568
    c2c8:	4818      	ldr	r0, [pc, #96]	; (c32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f4>)
    c2ca:	b510      	push	{r4, lr}
    c2cc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c2d0:	07c1      	lsls	r1, r0, #31
    c2d2:	d029      	beq.n	c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c2d4:	0781      	lsls	r1, r0, #30
    c2d6:	d514      	bpl.n	c302 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ca>
    c2d8:	4815      	ldr	r0, [pc, #84]	; (c330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c2da:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c2de:	f041 0101 	orr.w	r1, r1, #1
    c2e2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c2e6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c2ea:	b2c0      	uxtb	r0, r0
    c2ec:	280b      	cmp	r0, #11
    c2ee:	d005      	beq.n	c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c2f0:	280a      	cmp	r0, #10
    c2f2:	d003      	beq.n	c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c2f4:	2803      	cmp	r0, #3
    c2f6:	d001      	beq.n	c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c2f8:	2802      	cmp	r0, #2
    c2fa:	d115      	bne.n	c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c2fc:	f240 51c7 	movw	r1, #1479	; 0x5c7
    c300:	e00f      	b.n	c322 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ea>
    c302:	0740      	lsls	r0, r0, #29
    c304:	d510      	bpl.n	c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c306:	480a      	ldr	r0, [pc, #40]	; (c330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c308:	490a      	ldr	r1, [pc, #40]	; (c334 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1fc>)
    c30a:	3008      	adds	r0, #8
    c30c:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c310:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c314:	4808      	ldr	r0, [pc, #32]	; (c338 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>)
    c316:	f004 fc34 	bl	10b82 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c31a:	2800      	cmp	r0, #0
    c31c:	d004      	beq.n	c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c31e:	f240 51cf 	movw	r1, #1487	; 0x5cf
    c322:	203e      	movs	r0, #62	; 0x3e
    c324:	f7f8 fd30 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c328:	bd10      	pop	{r4, pc}
    c32a:	0000      	.short	0x0000
    c32c:	20001158 	.word	0x20001158
    c330:	40001000 	.word	0x40001000
    c334:	4001f098 	.word	0x4001f098
    c338:	40008000 	.word	0x40008000
    c33c:	4808      	ldr	r0, [pc, #32]	; (c360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>)
    c33e:	4601      	mov	r1, r0
    c340:	79c2      	ldrb	r2, [r0, #7]
    c342:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c346:	b112      	cbz	r2, c34e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x216>
    c348:	2a01      	cmp	r2, #1
    c34a:	d003      	beq.n	c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x21c>
    c34c:	e006      	b.n	c35c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c34e:	f041 0102 	orr.w	r1, r1, #2
    c352:	e001      	b.n	c358 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x220>
    c354:	f041 0104 	orr.w	r1, r1, #4
    c358:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c35c:	f7ff bfb4 	b.w	c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c360:	20001158 	.word	0x20001158
    c364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c368:	4d35      	ldr	r5, [pc, #212]	; (c440 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c36a:	2400      	movs	r4, #0
    c36c:	7b28      	ldrb	r0, [r5, #12]
    c36e:	b138      	cbz	r0, c380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c370:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c374:	4833      	ldr	r0, [pc, #204]	; (c444 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c376:	f004 fc04 	bl	10b82 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c37a:	b108      	cbz	r0, c380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c37c:	2601      	movs	r6, #1
    c37e:	e000      	b.n	c382 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c380:	2600      	movs	r6, #0
    c382:	7a68      	ldrb	r0, [r5, #9]
    c384:	4f30      	ldr	r7, [pc, #192]	; (c448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>)
    c386:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c38a:	2801      	cmp	r0, #1
    c38c:	d002      	beq.n	c394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25c>
    c38e:	2802      	cmp	r0, #2
    c390:	d008      	beq.n	c3a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>
    c392:	e018      	b.n	c3c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c394:	4638      	mov	r0, r7
    c396:	f004 fbef 	bl	10b78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c39a:	b108      	cbz	r0, c3a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>
    c39c:	2408      	movs	r4, #8
    c39e:	e012      	b.n	c3c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c3a0:	2400      	movs	r4, #0
    c3a2:	e010      	b.n	c3c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c3a4:	4638      	mov	r0, r7
    c3a6:	f004 fbe7 	bl	10b78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c3aa:	b100      	cbz	r0, c3ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x276>
    c3ac:	2002      	movs	r0, #2
    c3ae:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c3b2:	43c9      	mvns	r1, r1
    c3b4:	f341 0100 	sbfx	r1, r1, #0, #1
    c3b8:	1c49      	adds	r1, r1, #1
    c3ba:	d001      	beq.n	c3c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    c3bc:	2400      	movs	r4, #0
    c3be:	e000      	b.n	c3c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28a>
    c3c0:	2404      	movs	r4, #4
    c3c2:	4304      	orrs	r4, r0
    c3c4:	4334      	orrs	r4, r6
    c3c6:	f014 0f0b 	tst.w	r4, #11
    c3ca:	d107      	bne.n	c3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c3cc:	f44f 7188 	mov.w	r1, #272	; 0x110
    c3d0:	4638      	mov	r0, r7
    c3d2:	f004 fbd1 	bl	10b78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c3d6:	b100      	cbz	r0, c3da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c3d8:	2010      	movs	r0, #16
    c3da:	4304      	orrs	r4, r0
    c3dc:	481b      	ldr	r0, [pc, #108]	; (c44c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    c3de:	7800      	ldrb	r0, [r0, #0]
    c3e0:	b1f8      	cbz	r0, c422 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ea>
    c3e2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c3e6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c3ea:	d007      	beq.n	c3fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c3ec:	f44f 718a 	mov.w	r1, #276	; 0x114
    c3f0:	4638      	mov	r0, r7
    c3f2:	f004 fbc1 	bl	10b78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c3f6:	b108      	cbz	r0, c3fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c3f8:	2001      	movs	r0, #1
    c3fa:	e000      	b.n	c3fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c3fc:	2000      	movs	r0, #0
    c3fe:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c402:	b13e      	cbz	r6, c414 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c404:	f44f 718c 	mov.w	r1, #280	; 0x118
    c408:	4638      	mov	r0, r7
    c40a:	f004 fbb5 	bl	10b78 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c40e:	b108      	cbz	r0, c414 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c410:	2001      	movs	r0, #1
    c412:	e000      	b.n	c416 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    c414:	2000      	movs	r0, #0
    c416:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c41a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c41e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c422:	f7ff ff2b 	bl	c27c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>
    c426:	06e0      	lsls	r0, r4, #27
    c428:	d506      	bpl.n	c438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c42a:	0720      	lsls	r0, r4, #28
    c42c:	d404      	bmi.n	c438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c42e:	7a68      	ldrb	r0, [r5, #9]
    c430:	2801      	cmp	r0, #1
    c432:	d101      	bne.n	c438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c434:	f044 0420 	orr.w	r4, r4, #32
    c438:	4620      	mov	r0, r4
    c43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c43e:	0000      	.short	0x0000
    c440:	20001158 	.word	0x20001158
    c444:	40008000 	.word	0x40008000
    c448:	40001000 	.word	0x40001000
    c44c:	20000274 	.word	0x20000274
    c450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c454:	4c19      	ldr	r4, [pc, #100]	; (c4bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x384>)
    c456:	460d      	mov	r5, r1
    c458:	7a21      	ldrb	r1, [r4, #8]
    c45a:	b129      	cbz	r1, c468 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>
    c45c:	f010 0f11 	tst.w	r0, #17
    c460:	d00b      	beq.n	c47a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c462:	f7ff f9e7 	bl	b834 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c466:	e027      	b.n	c4b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c468:	4915      	ldr	r1, [pc, #84]	; (c4c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>)
    c46a:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c46e:	6008      	str	r0, [r1, #0]
    c470:	f000 f88c 	bl	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c474:	2000      	movs	r0, #0
    c476:	7320      	strb	r0, [r4, #12]
    c478:	e01e      	b.n	c4b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c47a:	2901      	cmp	r1, #1
    c47c:	d001      	beq.n	c482 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c47e:	2601      	movs	r6, #1
    c480:	e000      	b.n	c484 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c482:	2600      	movs	r6, #0
    c484:	79e0      	ldrb	r0, [r4, #7]
    c486:	2801      	cmp	r0, #1
    c488:	d00e      	beq.n	c4a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>
    c48a:	2700      	movs	r7, #0
    c48c:	f000 f87e 	bl	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c490:	2196      	movs	r1, #150	; 0x96
    c492:	4630      	mov	r0, r6
    c494:	f000 f890 	bl	c5b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x480>
    c498:	4601      	mov	r1, r0
    c49a:	b14f      	cbz	r7, c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c49c:	353b      	adds	r5, #59	; 0x3b
    c49e:	428d      	cmp	r5, r1
    c4a0:	d904      	bls.n	c4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c4a2:	2000      	movs	r0, #0
    c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4a8:	2701      	movs	r7, #1
    c4aa:	e7ef      	b.n	c48c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c4ac:	2001      	movs	r0, #1
    c4ae:	71e0      	strb	r0, [r4, #7]
    c4b0:	7aa2      	ldrb	r2, [r4, #10]
    c4b2:	4630      	mov	r0, r6
    c4b4:	f7ff fc70 	bl	bd98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c4b8:	2001      	movs	r0, #1
    c4ba:	e7f3      	b.n	c4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>
    c4bc:	20001158 	.word	0x20001158
    c4c0:	4001f508 	.word	0x4001f508
    c4c4:	4803      	ldr	r0, [pc, #12]	; (c4d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>)
    c4c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c4ca:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c4ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c4d2:	4770      	bx	lr
    c4d4:	40001000 	.word	0x40001000
    c4d8:	4804      	ldr	r0, [pc, #16]	; (c4ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c4da:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c4dc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c4e0:	6281      	str	r1, [r0, #40]	; 0x28
    c4e2:	4903      	ldr	r1, [pc, #12]	; (c4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>)
    c4e4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c4e8:	6008      	str	r0, [r1, #0]
    c4ea:	4770      	bx	lr
    c4ec:	20001158 	.word	0x20001158
    c4f0:	4001f504 	.word	0x4001f504
    c4f4:	4a07      	ldr	r2, [pc, #28]	; (c514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c4f6:	2000      	movs	r0, #0
    c4f8:	3208      	adds	r2, #8
    c4fa:	4906      	ldr	r1, [pc, #24]	; (c514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c4fc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c500:	1d0a      	adds	r2, r1, #4
    c502:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c506:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c50a:	4902      	ldr	r1, [pc, #8]	; (c514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c50c:	310c      	adds	r1, #12
    c50e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c512:	4770      	bx	lr
    c514:	40008000 	.word	0x40008000
    c518:	4903      	ldr	r1, [pc, #12]	; (c528 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>)
    c51a:	79c9      	ldrb	r1, [r1, #7]
    c51c:	2900      	cmp	r1, #0
    c51e:	d102      	bne.n	c526 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ee>
    c520:	4902      	ldr	r1, [pc, #8]	; (c52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f4>)
    c522:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c526:	4770      	bx	lr
    c528:	20001158 	.word	0x20001158
    c52c:	4001f098 	.word	0x4001f098
    c530:	b510      	push	{r4, lr}
    c532:	4a14      	ldr	r2, [pc, #80]	; (c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c534:	b120      	cbz	r0, c540 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c536:	2801      	cmp	r0, #1
    c538:	d011      	beq.n	c55e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x426>
    c53a:	f240 61fc 	movw	r1, #1788	; 0x6fc
    c53e:	e01c      	b.n	c57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c540:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c544:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c548:	490f      	ldr	r1, [pc, #60]	; (c588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c54a:	480e      	ldr	r0, [pc, #56]	; (c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c54c:	f7f8 fafa 	bl	4b44 <mpsl_fem_pa_configuration_set>
    c550:	2800      	cmp	r0, #0
    c552:	d015      	beq.n	c580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c554:	1c40      	adds	r0, r0, #1
    c556:	d013      	beq.n	c580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c558:	f240 61eb 	movw	r1, #1771	; 0x6eb
    c55c:	e00d      	b.n	c57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c55e:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c562:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c566:	4908      	ldr	r1, [pc, #32]	; (c588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c568:	4806      	ldr	r0, [pc, #24]	; (c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c56a:	f7f8 fadf 	bl	4b2c <mpsl_fem_lna_configuration_set>
    c56e:	2800      	cmp	r0, #0
    c570:	d006      	beq.n	c580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c572:	1c40      	adds	r0, r0, #1
    c574:	d004      	beq.n	c580 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c576:	f44f 61df 	mov.w	r1, #1784	; 0x6f8
    c57a:	203e      	movs	r0, #62	; 0x3e
    c57c:	f7f8 fc04 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c580:	bd10      	pop	{r4, pc}
    c582:	0000      	.short	0x0000
    c584:	2000027c 	.word	0x2000027c
    c588:	0000c614 	.word	0x0000c614
    c58c:	4802      	ldr	r0, [pc, #8]	; (c598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>)
    c58e:	2100      	movs	r1, #0
    c590:	71c1      	strb	r1, [r0, #7]
    c592:	7201      	strb	r1, [r0, #8]
    c594:	7241      	strb	r1, [r0, #9]
    c596:	4770      	bx	lr
    c598:	20001158 	.word	0x20001158
    c59c:	4a05      	ldr	r2, [pc, #20]	; (c5b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>)
    c59e:	79d2      	ldrb	r2, [r2, #7]
    c5a0:	2a01      	cmp	r2, #1
    c5a2:	d006      	beq.n	c5b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c5a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c5a8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c5ac:	fbb1 f1f2 	udiv	r1, r1, r2
    c5b0:	1a40      	subs	r0, r0, r1
    c5b2:	4770      	bx	lr
    c5b4:	20001158 	.word	0x20001158
    c5b8:	b570      	push	{r4, r5, r6, lr}
    c5ba:	4c13      	ldr	r4, [pc, #76]	; (c608 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4d0>)
    c5bc:	4603      	mov	r3, r0
    c5be:	460d      	mov	r5, r1
    c5c0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c5c4:	2000      	movs	r0, #0
    c5c6:	b15a      	cbz	r2, c5e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>
    c5c8:	4621      	mov	r1, r4
    c5ca:	f891 1020 	ldrb.w	r1, [r1, #32]
    c5ce:	b163      	cbz	r3, c5ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b2>
    c5d0:	2b01      	cmp	r3, #1
    c5d2:	d111      	bne.n	c5f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>
    c5d4:	2a01      	cmp	r2, #1
    c5d6:	4628      	mov	r0, r5
    c5d8:	d012      	beq.n	c600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c8>
    c5da:	f004 fad7 	bl	10b8c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c5de:	e009      	b.n	c5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c5e0:	f640 0134 	movw	r1, #2100	; 0x834
    c5e4:	203e      	movs	r0, #62	; 0x3e
    c5e6:	f7f8 fbcf 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5ea:	2a01      	cmp	r2, #1
    c5ec:	4628      	mov	r0, r5
    c5ee:	d004      	beq.n	c5fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c2>
    c5f0:	f004 fada 	bl	10ba8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c5f4:	69e1      	ldr	r1, [r4, #28]
    c5f6:	4408      	add	r0, r1
    c5f8:	bd70      	pop	{r4, r5, r6, pc}
    c5fa:	f000 f881 	bl	c700 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c5fe:	e7f9      	b.n	c5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c600:	f000 f870 	bl	c6e4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c604:	e7f6      	b.n	c5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c606:	0000      	.short	0x0000
    c608:	20001158 	.word	0x20001158
    c60c:	a62c0000 	.word	0xa62c0000
    c610:	0000a1e0 	.word	0x0000a1e0
    c614:	00000001 	.word	0x00000001
    c618:	40001110 	.word	0x40001110
	...
    c630:	00001e14 	.word	0x00001e14
    c634:	00001130 	.word	0x00001130
    c638:	00000000 	.word	0x00000000
    c63c:	00000028 	.word	0x00000028
    c640:	00000018 	.word	0x00000018
    c644:	00000000 	.word	0x00000000
    c648:	00001e14 	.word	0x00001e14
    c64c:	00001130 	.word	0x00001130
    c650:	00000000 	.word	0x00000000
    c654:	00001770 	.word	0x00001770
    c658:	00000fa0 	.word	0x00000fa0

0000c65c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c65c:	b570      	push	{r4, r5, r6, lr}
    c65e:	4605      	mov	r5, r0
    c660:	4614      	mov	r4, r2
    c662:	4608      	mov	r0, r1
    c664:	f7ff fb92 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c668:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c66c:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c670:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c674:	4807      	ldr	r0, [pc, #28]	; (c694 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c676:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c67a:	4408      	add	r0, r1
    c67c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c680:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c684:	fbb0 f5f1 	udiv	r5, r0, r1
    c688:	4620      	mov	r0, r4
    c68a:	f7ff fb53 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c68e:	4428      	add	r0, r5
    c690:	1d40      	adds	r0, r0, #5
    c692:	bd70      	pop	{r4, r5, r6, pc}
    c694:	0000c724 	.word	0x0000c724

0000c698 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c698:	b570      	push	{r4, r5, r6, lr}
    c69a:	4d0e      	ldr	r5, [pc, #56]	; (c6d4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c69c:	461c      	mov	r4, r3
    c69e:	3d08      	subs	r5, #8
    c6a0:	4b0c      	ldr	r3, [pc, #48]	; (c6d4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c6a2:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    c6a6:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    c6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c6ae:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    c6b2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c6b6:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c6ba:	4418      	add	r0, r3
    c6bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c6c0:	fbb0 f5f1 	udiv	r5, r0, r1
    c6c4:	4610      	mov	r0, r2
    c6c6:	f7ff fb35 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c6ca:	4428      	add	r0, r5
    c6cc:	4420      	add	r0, r4
    c6ce:	1d40      	adds	r0, r0, #5
    c6d0:	bd70      	pop	{r4, r5, r6, pc}
    c6d2:	0000      	.short	0x0000
    c6d4:	0000c724 	.word	0x0000c724

0000c6d8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c6d8:	4901      	ldr	r1, [pc, #4]	; (c6e0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c6da:	b2c0      	uxtb	r0, r0
    c6dc:	6008      	str	r0, [r1, #0]
    c6de:	4770      	bx	lr
    c6e0:	4000150c 	.word	0x4000150c

0000c6e4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c6e4:	4a05      	ldr	r2, [pc, #20]	; (c6fc <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c6e6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c6ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c6ee:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c6f2:	fbb1 f1f2 	udiv	r1, r1, r2
    c6f6:	4408      	add	r0, r1
    c6f8:	1e80      	subs	r0, r0, #2
    c6fa:	4770      	bx	lr
    c6fc:	0000c71c 	.word	0x0000c71c

0000c700 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c700:	4a05      	ldr	r2, [pc, #20]	; (c718 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c702:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c70a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c70e:	fbb1 f1f2 	udiv	r1, r1, r2
    c712:	4408      	add	r0, r1
    c714:	4770      	bx	lr
    c716:	0000      	.short	0x0000
    c718:	0000c71c 	.word	0x0000c71c
    c71c:	05dc0000 	.word	0x05dc0000
    c720:	000003e8 	.word	0x000003e8
    c724:	00000000 	.word	0x00000000
    c728:	00001e14 	.word	0x00001e14
    c72c:	00001130 	.word	0x00001130

0000c730 <__udivmoddi4>:
    c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c734:	4607      	mov	r7, r0
    c736:	468c      	mov	ip, r1
    c738:	4608      	mov	r0, r1
    c73a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c73c:	4615      	mov	r5, r2
    c73e:	463c      	mov	r4, r7
    c740:	4619      	mov	r1, r3
    c742:	2b00      	cmp	r3, #0
    c744:	f040 80c6 	bne.w	c8d4 <__udivmoddi4+0x1a4>
    c748:	4282      	cmp	r2, r0
    c74a:	fab2 f782 	clz	r7, r2
    c74e:	d946      	bls.n	c7de <__udivmoddi4+0xae>
    c750:	b14f      	cbz	r7, c766 <__udivmoddi4+0x36>
    c752:	f1c7 0e20 	rsb	lr, r7, #32
    c756:	fa24 fe0e 	lsr.w	lr, r4, lr
    c75a:	fa00 f307 	lsl.w	r3, r0, r7
    c75e:	40bd      	lsls	r5, r7
    c760:	ea4e 0c03 	orr.w	ip, lr, r3
    c764:	40bc      	lsls	r4, r7
    c766:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c76a:	fa1f fe85 	uxth.w	lr, r5
    c76e:	fbbc f9f8 	udiv	r9, ip, r8
    c772:	0c22      	lsrs	r2, r4, #16
    c774:	fb08 c319 	mls	r3, r8, r9, ip
    c778:	fb09 fa0e 	mul.w	sl, r9, lr
    c77c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c780:	459a      	cmp	sl, r3
    c782:	d928      	bls.n	c7d6 <__udivmoddi4+0xa6>
    c784:	18eb      	adds	r3, r5, r3
    c786:	f109 30ff 	add.w	r0, r9, #4294967295
    c78a:	d204      	bcs.n	c796 <__udivmoddi4+0x66>
    c78c:	459a      	cmp	sl, r3
    c78e:	d902      	bls.n	c796 <__udivmoddi4+0x66>
    c790:	f1a9 0002 	sub.w	r0, r9, #2
    c794:	442b      	add	r3, r5
    c796:	eba3 030a 	sub.w	r3, r3, sl
    c79a:	b2a4      	uxth	r4, r4
    c79c:	fbb3 f2f8 	udiv	r2, r3, r8
    c7a0:	fb08 3312 	mls	r3, r8, r2, r3
    c7a4:	fb02 fe0e 	mul.w	lr, r2, lr
    c7a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7ac:	45a6      	cmp	lr, r4
    c7ae:	d914      	bls.n	c7da <__udivmoddi4+0xaa>
    c7b0:	192c      	adds	r4, r5, r4
    c7b2:	f102 33ff 	add.w	r3, r2, #4294967295
    c7b6:	d203      	bcs.n	c7c0 <__udivmoddi4+0x90>
    c7b8:	45a6      	cmp	lr, r4
    c7ba:	d901      	bls.n	c7c0 <__udivmoddi4+0x90>
    c7bc:	1e93      	subs	r3, r2, #2
    c7be:	442c      	add	r4, r5
    c7c0:	eba4 040e 	sub.w	r4, r4, lr
    c7c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c7c8:	b11e      	cbz	r6, c7d2 <__udivmoddi4+0xa2>
    c7ca:	40fc      	lsrs	r4, r7
    c7cc:	2300      	movs	r3, #0
    c7ce:	6034      	str	r4, [r6, #0]
    c7d0:	6073      	str	r3, [r6, #4]
    c7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7d6:	4648      	mov	r0, r9
    c7d8:	e7dd      	b.n	c796 <__udivmoddi4+0x66>
    c7da:	4613      	mov	r3, r2
    c7dc:	e7f0      	b.n	c7c0 <__udivmoddi4+0x90>
    c7de:	b902      	cbnz	r2, c7e2 <__udivmoddi4+0xb2>
    c7e0:	deff      	udf	#255	; 0xff
    c7e2:	bb87      	cbnz	r7, c846 <__udivmoddi4+0x116>
    c7e4:	1a83      	subs	r3, r0, r2
    c7e6:	2101      	movs	r1, #1
    c7e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ec:	b2aa      	uxth	r2, r5
    c7ee:	fbb3 fcfe 	udiv	ip, r3, lr
    c7f2:	0c20      	lsrs	r0, r4, #16
    c7f4:	fb0e 331c 	mls	r3, lr, ip, r3
    c7f8:	fb0c f802 	mul.w	r8, ip, r2
    c7fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c800:	4598      	cmp	r8, r3
    c802:	d963      	bls.n	c8cc <__udivmoddi4+0x19c>
    c804:	18eb      	adds	r3, r5, r3
    c806:	f10c 30ff 	add.w	r0, ip, #4294967295
    c80a:	d204      	bcs.n	c816 <__udivmoddi4+0xe6>
    c80c:	4598      	cmp	r8, r3
    c80e:	d902      	bls.n	c816 <__udivmoddi4+0xe6>
    c810:	f1ac 0002 	sub.w	r0, ip, #2
    c814:	442b      	add	r3, r5
    c816:	eba3 0308 	sub.w	r3, r3, r8
    c81a:	b2a4      	uxth	r4, r4
    c81c:	fbb3 fcfe 	udiv	ip, r3, lr
    c820:	fb0e 331c 	mls	r3, lr, ip, r3
    c824:	fb0c f202 	mul.w	r2, ip, r2
    c828:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c82c:	42a2      	cmp	r2, r4
    c82e:	d94f      	bls.n	c8d0 <__udivmoddi4+0x1a0>
    c830:	192c      	adds	r4, r5, r4
    c832:	f10c 33ff 	add.w	r3, ip, #4294967295
    c836:	d204      	bcs.n	c842 <__udivmoddi4+0x112>
    c838:	42a2      	cmp	r2, r4
    c83a:	d902      	bls.n	c842 <__udivmoddi4+0x112>
    c83c:	f1ac 0302 	sub.w	r3, ip, #2
    c840:	442c      	add	r4, r5
    c842:	1aa4      	subs	r4, r4, r2
    c844:	e7be      	b.n	c7c4 <__udivmoddi4+0x94>
    c846:	f1c7 0c20 	rsb	ip, r7, #32
    c84a:	fa20 f80c 	lsr.w	r8, r0, ip
    c84e:	fa00 f307 	lsl.w	r3, r0, r7
    c852:	fa24 fc0c 	lsr.w	ip, r4, ip
    c856:	40bd      	lsls	r5, r7
    c858:	ea4c 0203 	orr.w	r2, ip, r3
    c85c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c860:	b2ab      	uxth	r3, r5
    c862:	fbb8 fcfe 	udiv	ip, r8, lr
    c866:	0c11      	lsrs	r1, r2, #16
    c868:	fb0e 801c 	mls	r0, lr, ip, r8
    c86c:	fb0c f903 	mul.w	r9, ip, r3
    c870:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c874:	4581      	cmp	r9, r0
    c876:	fa04 f407 	lsl.w	r4, r4, r7
    c87a:	d923      	bls.n	c8c4 <__udivmoddi4+0x194>
    c87c:	1828      	adds	r0, r5, r0
    c87e:	f10c 31ff 	add.w	r1, ip, #4294967295
    c882:	d204      	bcs.n	c88e <__udivmoddi4+0x15e>
    c884:	4581      	cmp	r9, r0
    c886:	d902      	bls.n	c88e <__udivmoddi4+0x15e>
    c888:	f1ac 0102 	sub.w	r1, ip, #2
    c88c:	4428      	add	r0, r5
    c88e:	eba0 0009 	sub.w	r0, r0, r9
    c892:	b292      	uxth	r2, r2
    c894:	fbb0 fcfe 	udiv	ip, r0, lr
    c898:	fb0e 001c 	mls	r0, lr, ip, r0
    c89c:	fb0c f803 	mul.w	r8, ip, r3
    c8a0:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c8a4:	4598      	cmp	r8, r3
    c8a6:	d90f      	bls.n	c8c8 <__udivmoddi4+0x198>
    c8a8:	18eb      	adds	r3, r5, r3
    c8aa:	f10c 32ff 	add.w	r2, ip, #4294967295
    c8ae:	d204      	bcs.n	c8ba <__udivmoddi4+0x18a>
    c8b0:	4598      	cmp	r8, r3
    c8b2:	d902      	bls.n	c8ba <__udivmoddi4+0x18a>
    c8b4:	f1ac 0202 	sub.w	r2, ip, #2
    c8b8:	442b      	add	r3, r5
    c8ba:	eba3 0308 	sub.w	r3, r3, r8
    c8be:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c8c2:	e791      	b.n	c7e8 <__udivmoddi4+0xb8>
    c8c4:	4661      	mov	r1, ip
    c8c6:	e7e2      	b.n	c88e <__udivmoddi4+0x15e>
    c8c8:	4662      	mov	r2, ip
    c8ca:	e7f6      	b.n	c8ba <__udivmoddi4+0x18a>
    c8cc:	4660      	mov	r0, ip
    c8ce:	e7a2      	b.n	c816 <__udivmoddi4+0xe6>
    c8d0:	4663      	mov	r3, ip
    c8d2:	e7b6      	b.n	c842 <__udivmoddi4+0x112>
    c8d4:	4283      	cmp	r3, r0
    c8d6:	d905      	bls.n	c8e4 <__udivmoddi4+0x1b4>
    c8d8:	b10e      	cbz	r6, c8de <__udivmoddi4+0x1ae>
    c8da:	e9c6 7000 	strd	r7, r0, [r6]
    c8de:	2100      	movs	r1, #0
    c8e0:	4608      	mov	r0, r1
    c8e2:	e776      	b.n	c7d2 <__udivmoddi4+0xa2>
    c8e4:	fab3 f183 	clz	r1, r3
    c8e8:	b981      	cbnz	r1, c90c <__udivmoddi4+0x1dc>
    c8ea:	4283      	cmp	r3, r0
    c8ec:	d301      	bcc.n	c8f2 <__udivmoddi4+0x1c2>
    c8ee:	42ba      	cmp	r2, r7
    c8f0:	d80a      	bhi.n	c908 <__udivmoddi4+0x1d8>
    c8f2:	1abc      	subs	r4, r7, r2
    c8f4:	eb60 0303 	sbc.w	r3, r0, r3
    c8f8:	2001      	movs	r0, #1
    c8fa:	469c      	mov	ip, r3
    c8fc:	2e00      	cmp	r6, #0
    c8fe:	d068      	beq.n	c9d2 <__udivmoddi4+0x2a2>
    c900:	e9c6 4c00 	strd	r4, ip, [r6]
    c904:	2100      	movs	r1, #0
    c906:	e764      	b.n	c7d2 <__udivmoddi4+0xa2>
    c908:	4608      	mov	r0, r1
    c90a:	e7f7      	b.n	c8fc <__udivmoddi4+0x1cc>
    c90c:	f1c1 0c20 	rsb	ip, r1, #32
    c910:	408b      	lsls	r3, r1
    c912:	fa22 f40c 	lsr.w	r4, r2, ip
    c916:	431c      	orrs	r4, r3
    c918:	fa02 f501 	lsl.w	r5, r2, r1
    c91c:	fa00 f301 	lsl.w	r3, r0, r1
    c920:	fa27 f20c 	lsr.w	r2, r7, ip
    c924:	fa20 fb0c 	lsr.w	fp, r0, ip
    c928:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c92c:	4313      	orrs	r3, r2
    c92e:	fbbb f8f9 	udiv	r8, fp, r9
    c932:	fa1f fe84 	uxth.w	lr, r4
    c936:	fb09 bb18 	mls	fp, r9, r8, fp
    c93a:	0c1a      	lsrs	r2, r3, #16
    c93c:	fb08 fa0e 	mul.w	sl, r8, lr
    c940:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c944:	4592      	cmp	sl, r2
    c946:	fa07 f701 	lsl.w	r7, r7, r1
    c94a:	d93e      	bls.n	c9ca <__udivmoddi4+0x29a>
    c94c:	18a2      	adds	r2, r4, r2
    c94e:	f108 30ff 	add.w	r0, r8, #4294967295
    c952:	d204      	bcs.n	c95e <__udivmoddi4+0x22e>
    c954:	4592      	cmp	sl, r2
    c956:	d902      	bls.n	c95e <__udivmoddi4+0x22e>
    c958:	f1a8 0002 	sub.w	r0, r8, #2
    c95c:	4422      	add	r2, r4
    c95e:	eba2 020a 	sub.w	r2, r2, sl
    c962:	b29b      	uxth	r3, r3
    c964:	fbb2 f8f9 	udiv	r8, r2, r9
    c968:	fb09 2218 	mls	r2, r9, r8, r2
    c96c:	fb08 fe0e 	mul.w	lr, r8, lr
    c970:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c974:	4596      	cmp	lr, r2
    c976:	d92a      	bls.n	c9ce <__udivmoddi4+0x29e>
    c978:	18a2      	adds	r2, r4, r2
    c97a:	f108 33ff 	add.w	r3, r8, #4294967295
    c97e:	d204      	bcs.n	c98a <__udivmoddi4+0x25a>
    c980:	4596      	cmp	lr, r2
    c982:	d902      	bls.n	c98a <__udivmoddi4+0x25a>
    c984:	f1a8 0302 	sub.w	r3, r8, #2
    c988:	4422      	add	r2, r4
    c98a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c98e:	fba0 9305 	umull	r9, r3, r0, r5
    c992:	eba2 020e 	sub.w	r2, r2, lr
    c996:	429a      	cmp	r2, r3
    c998:	46ce      	mov	lr, r9
    c99a:	4698      	mov	r8, r3
    c99c:	d302      	bcc.n	c9a4 <__udivmoddi4+0x274>
    c99e:	d106      	bne.n	c9ae <__udivmoddi4+0x27e>
    c9a0:	454f      	cmp	r7, r9
    c9a2:	d204      	bcs.n	c9ae <__udivmoddi4+0x27e>
    c9a4:	ebb9 0e05 	subs.w	lr, r9, r5
    c9a8:	eb63 0804 	sbc.w	r8, r3, r4
    c9ac:	3801      	subs	r0, #1
    c9ae:	b186      	cbz	r6, c9d2 <__udivmoddi4+0x2a2>
    c9b0:	ebb7 030e 	subs.w	r3, r7, lr
    c9b4:	eb62 0708 	sbc.w	r7, r2, r8
    c9b8:	fa07 fc0c 	lsl.w	ip, r7, ip
    c9bc:	40cb      	lsrs	r3, r1
    c9be:	ea4c 0303 	orr.w	r3, ip, r3
    c9c2:	40cf      	lsrs	r7, r1
    c9c4:	e9c6 3700 	strd	r3, r7, [r6]
    c9c8:	e79c      	b.n	c904 <__udivmoddi4+0x1d4>
    c9ca:	4640      	mov	r0, r8
    c9cc:	e7c7      	b.n	c95e <__udivmoddi4+0x22e>
    c9ce:	4643      	mov	r3, r8
    c9d0:	e7db      	b.n	c98a <__udivmoddi4+0x25a>
    c9d2:	4631      	mov	r1, r6
    c9d4:	e6fd      	b.n	c7d2 <__udivmoddi4+0xa2>

0000c9d6 <strcmp>:
    c9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
    c9da:	f811 3b01 	ldrb.w	r3, [r1], #1
    c9de:	2a01      	cmp	r2, #1
    c9e0:	bf28      	it	cs
    c9e2:	429a      	cmpcs	r2, r3
    c9e4:	d0f7      	beq.n	c9d6 <strcmp>
    c9e6:	1ad0      	subs	r0, r2, r3
    c9e8:	4770      	bx	lr

0000c9ea <strlen>:
    c9ea:	4603      	mov	r3, r0
    c9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
    c9f0:	2a00      	cmp	r2, #0
    c9f2:	d1fb      	bne.n	c9ec <strlen+0x2>
    c9f4:	1a18      	subs	r0, r3, r0
    c9f6:	3801      	subs	r0, #1
    c9f8:	4770      	bx	lr

0000c9fa <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c9fa:	4770      	bx	lr
    c9fc:	2100      	movs	r1, #0
    c9fe:	7081      	strb	r1, [r0, #2]
    ca00:	7001      	strb	r1, [r0, #0]
    ca02:	7041      	strb	r1, [r0, #1]
    ca04:	4770      	bx	lr

0000ca06 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    ca06:	b570      	push	{r4, r5, r6, lr}
    ca08:	f7f4 fd78 	bl	14fc <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ca0c:	4605      	mov	r5, r0
    ca0e:	2400      	movs	r4, #0
    ca10:	e006      	b.n	ca20 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ca12:	4620      	mov	r0, r4
    ca14:	f7f4 fd78 	bl	1508 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ca18:	f7ff fff0 	bl	c9fc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    ca1c:	1c64      	adds	r4, r4, #1
    ca1e:	b2e4      	uxtb	r4, r4
    ca20:	42ac      	cmp	r4, r5
    ca22:	d3f6      	bcc.n	ca12 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ca24:	bd70      	pop	{r4, r5, r6, pc}

0000ca26 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ca26:	2000      	movs	r0, #0
    ca28:	f7f7 bb4a 	b.w	40c0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ca2c:	b510      	push	{r4, lr}
    ca2e:	f7f7 f817 	bl	3a60 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ca32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca36:	f000 b800 	b.w	ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000ca3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    ca3a:	0a41      	lsrs	r1, r0, #9
    ca3c:	f643 5209 	movw	r2, #15625	; 0x3d09
    ca40:	4351      	muls	r1, r2
    ca42:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ca46:	fb10 f002 	smulbb	r0, r0, r2
    ca4a:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ca4e:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ca52:	4770      	bx	lr

0000ca54 <MPSL_IRQ_RADIO_Handler>:
    ca54:	f7f5 bdf6 	b.w	2644 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    ca58:	2800      	cmp	r0, #0
    ca5a:	db09      	blt.n	ca70 <MPSL_IRQ_RADIO_Handler+0x1c>
    ca5c:	f000 021f 	and.w	r2, r0, #31
    ca60:	2101      	movs	r1, #1
    ca62:	4091      	lsls	r1, r2
    ca64:	0940      	lsrs	r0, r0, #5
    ca66:	0080      	lsls	r0, r0, #2
    ca68:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ca6c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    ca70:	4770      	bx	lr
    ca72:	2800      	cmp	r0, #0
    ca74:	db0d      	blt.n	ca92 <MPSL_IRQ_RADIO_Handler+0x3e>
    ca76:	f000 021f 	and.w	r2, r0, #31
    ca7a:	2101      	movs	r1, #1
    ca7c:	4091      	lsls	r1, r2
    ca7e:	0940      	lsrs	r0, r0, #5
    ca80:	0080      	lsls	r0, r0, #2
    ca82:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ca86:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    ca8a:	f3bf 8f4f 	dsb	sy
    ca8e:	f3bf 8f6f 	isb	sy
    ca92:	4770      	bx	lr

0000ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    ca94:	b570      	push	{r4, r5, r6, lr}
    ca96:	4602      	mov	r2, r0
    ca98:	2000      	movs	r0, #0
    ca9a:	2900      	cmp	r1, #0
    ca9c:	d01d      	beq.n	cada <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    ca9e:	fba2 0101 	umull	r0, r1, r2, r1
    caa2:	0a40      	lsrs	r0, r0, #9
    caa4:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    caa8:	0a49      	lsrs	r1, r1, #9
    caaa:	1c40      	adds	r0, r0, #1
    caac:	f141 0100 	adc.w	r1, r1, #0
    cab0:	f240 72a1 	movw	r2, #1953	; 0x7a1
    cab4:	1883      	adds	r3, r0, r2
    cab6:	f141 0100 	adc.w	r1, r1, #0
    caba:	1c5b      	adds	r3, r3, #1
    cabc:	f141 0400 	adc.w	r4, r1, #0
    cac0:	2100      	movs	r1, #0
    cac2:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    cac6:	41a1      	sbcs	r1, r4
    cac8:	d203      	bcs.n	cad2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    caca:	2171      	movs	r1, #113	; 0x71
    cacc:	206d      	movs	r0, #109	; 0x6d
    cace:	f7f7 fea7 	bl	4820 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cad2:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    cad6:	fbb0 f0f2 	udiv	r0, r0, r2
    cada:	bd70      	pop	{r4, r5, r6, pc}
    cadc:	5840      	ldr	r0, [r0, r1]
    cade:	2800      	cmp	r0, #0
    cae0:	d000      	beq.n	cae4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cae2:	2001      	movs	r0, #1
    cae4:	4770      	bx	lr
    cae6:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    caea:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    caee:	f002 0201 	and.w	r2, r2, #1
    caf2:	03c0      	lsls	r0, r0, #15
    caf4:	d503      	bpl.n	cafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    caf6:	428a      	cmp	r2, r1
    caf8:	d101      	bne.n	cafe <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cafa:	2001      	movs	r0, #1
    cafc:	4770      	bx	lr
    cafe:	2000      	movs	r0, #0
    cb00:	4770      	bx	lr

0000cb02 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    cb02:	b510      	push	{r4, lr}
    cb04:	2101      	movs	r1, #1
    cb06:	0788      	lsls	r0, r1, #30
    cb08:	f7f7 fe34 	bl	4774 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cb0c:	2800      	cmp	r0, #0
    cb0e:	d000      	beq.n	cb12 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    cb10:	2001      	movs	r0, #1
    cb12:	bd10      	pop	{r4, pc}

0000cb14 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    cb14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cb18:	2101      	movs	r1, #1
    cb1a:	6001      	str	r1, [r0, #0]
    cb1c:	4770      	bx	lr

0000cb1e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    cb1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cb22:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cb26:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cb2a:	f002 0203 	and.w	r2, r2, #3
    cb2e:	03c9      	lsls	r1, r1, #15
    cb30:	d503      	bpl.n	cb3a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cb32:	4282      	cmp	r2, r0
    cb34:	d101      	bne.n	cb3a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cb36:	2001      	movs	r0, #1
    cb38:	4770      	bx	lr
    cb3a:	2000      	movs	r0, #0
    cb3c:	4770      	bx	lr

0000cb3e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    cb3e:	b510      	push	{r4, lr}
    cb40:	2100      	movs	r1, #0
    cb42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cb46:	f7f7 fe15 	bl	4774 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d000      	beq.n	cb50 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cb4e:	2001      	movs	r0, #1
    cb50:	bd10      	pop	{r4, pc}
    cb52:	2800      	cmp	r0, #0
    cb54:	db09      	blt.n	cb6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cb56:	f000 021f 	and.w	r2, r0, #31
    cb5a:	2101      	movs	r1, #1
    cb5c:	4091      	lsls	r1, r2
    cb5e:	0940      	lsrs	r0, r0, #5
    cb60:	0080      	lsls	r0, r0, #2
    cb62:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cb66:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cb6a:	4770      	bx	lr
    cb6c:	2800      	cmp	r0, #0
    cb6e:	db0d      	blt.n	cb8c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cb70:	f000 021f 	and.w	r2, r0, #31
    cb74:	2101      	movs	r1, #1
    cb76:	4091      	lsls	r1, r2
    cb78:	0940      	lsrs	r0, r0, #5
    cb7a:	0080      	lsls	r0, r0, #2
    cb7c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cb80:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cb84:	f3bf 8f4f 	dsb	sy
    cb88:	f3bf 8f6f 	isb	sy
    cb8c:	4770      	bx	lr
    cb8e:	1000      	.short	0x1000
    cb90:	00fa0002 	.word	0x00fa0002
    cb94:	63d00000 	.word	0x63d00000
    cb98:	364ec2a6 	.word	0x364ec2a6
    cb9c:	cd2bf983 	.word	0xcd2bf983
    cba0:	3cbc91b0 	.word	0x3cbc91b0
    cba4:	b3088b82 	.word	0xb3088b82
    cba8:	9c3d      	.short	0x9c3d
    cbaa:	2800      	cmp	r0, #0
    cbac:	db09      	blt.n	cbc2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cbae:	f000 021f 	and.w	r2, r0, #31
    cbb2:	2101      	movs	r1, #1
    cbb4:	4091      	lsls	r1, r2
    cbb6:	0940      	lsrs	r0, r0, #5
    cbb8:	0080      	lsls	r0, r0, #2
    cbba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cbbe:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cbc2:	4770      	bx	lr

0000cbc4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    cbc4:	f3ef 8110 	mrs	r1, PRIMASK
    cbc8:	b672      	cpsid	i
    cbca:	7802      	ldrb	r2, [r0, #0]
    cbcc:	2a01      	cmp	r2, #1
    cbce:	d001      	beq.n	cbd4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cbd0:	2201      	movs	r2, #1
    cbd2:	e000      	b.n	cbd6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    cbd4:	2200      	movs	r2, #0
    cbd6:	2301      	movs	r3, #1
    cbd8:	7003      	strb	r3, [r0, #0]
    cbda:	b901      	cbnz	r1, cbde <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cbdc:	b662      	cpsie	i
    cbde:	b10a      	cbz	r2, cbe4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cbe0:	2000      	movs	r0, #0
    cbe2:	4770      	bx	lr
    cbe4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cbe8:	4770      	bx	lr

0000cbea <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cbea:	2100      	movs	r1, #0
    cbec:	7001      	strb	r1, [r0, #0]
    cbee:	4608      	mov	r0, r1
    cbf0:	4770      	bx	lr

0000cbf2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cbf2:	f3ef 8110 	mrs	r1, PRIMASK
    cbf6:	b672      	cpsid	i
    cbf8:	2200      	movs	r2, #0
    cbfa:	7002      	strb	r2, [r0, #0]
    cbfc:	b901      	cbnz	r1, cc00 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cbfe:	b662      	cpsie	i
    cc00:	2000      	movs	r0, #0
    cc02:	4770      	bx	lr

0000cc04 <mpsl_low_priority_process>:
    cc04:	f7f7 bef8 	b.w	49f8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cc08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cc08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc0c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc10:	280f      	cmp	r0, #15
    cc12:	d001      	beq.n	cc18 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cc14:	2000      	movs	r0, #0
    cc16:	4770      	bx	lr
    cc18:	2001      	movs	r0, #1
    cc1a:	4770      	bx	lr

0000cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    cc1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc20:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc24:	280a      	cmp	r0, #10
    cc26:	d001      	beq.n	cc2c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    cc28:	2000      	movs	r0, #0
    cc2a:	4770      	bx	lr
    cc2c:	2001      	movs	r0, #1
    cc2e:	4770      	bx	lr

0000cc30 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    cc30:	b500      	push	{lr}
    cc32:	f7ff fff3 	bl	cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    cc36:	b120      	cbz	r0, cc42 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    cc38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc3c:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cc40:	b108      	cbz	r0, cc46 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    cc42:	2000      	movs	r0, #0
    cc44:	bd00      	pop	{pc}
    cc46:	2001      	movs	r0, #1
    cc48:	bd00      	pop	{pc}

0000cc4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    cc4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc4e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc52:	280e      	cmp	r0, #14
    cc54:	d001      	beq.n	cc5a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    cc56:	2000      	movs	r0, #0
    cc58:	4770      	bx	lr
    cc5a:	2001      	movs	r0, #1
    cc5c:	4770      	bx	lr

0000cc5e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    cc5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc62:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc66:	2810      	cmp	r0, #16
    cc68:	d001      	beq.n	cc6e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    cc6a:	2000      	movs	r0, #0
    cc6c:	4770      	bx	lr
    cc6e:	2001      	movs	r0, #1
    cc70:	4770      	bx	lr

0000cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    cc72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc76:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc7a:	2806      	cmp	r0, #6
    cc7c:	d003      	beq.n	cc86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cc7e:	1c40      	adds	r0, r0, #1
    cc80:	d001      	beq.n	cc86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    cc82:	2000      	movs	r0, #0
    cc84:	4770      	bx	lr
    cc86:	2001      	movs	r0, #1
    cc88:	4770      	bx	lr

0000cc8a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    cc8a:	b500      	push	{lr}
    cc8c:	f7ff fff1 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cc90:	b148      	cbz	r0, cca6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cc92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc96:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cc9a:	2806      	cmp	r0, #6
    cc9c:	d303      	bcc.n	cca6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cc9e:	1c40      	adds	r0, r0, #1
    cca0:	d001      	beq.n	cca6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    cca2:	2001      	movs	r0, #1
    cca4:	bd00      	pop	{pc}
    cca6:	2000      	movs	r0, #0
    cca8:	bd00      	pop	{pc}

0000ccaa <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    ccaa:	b500      	push	{lr}
    ccac:	f7ff ffe1 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ccb0:	b138      	cbz	r0, ccc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    ccb2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccb6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    ccba:	2806      	cmp	r0, #6
    ccbc:	d303      	bcc.n	ccc6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ccbe:	1c40      	adds	r0, r0, #1
    ccc0:	d001      	beq.n	ccc6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    ccc2:	2000      	movs	r0, #0
    ccc4:	bd00      	pop	{pc}
    ccc6:	2001      	movs	r0, #1
    ccc8:	bd00      	pop	{pc}

0000ccca <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    ccca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccce:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ccd2:	280d      	cmp	r0, #13
    ccd4:	d001      	beq.n	ccda <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    ccd6:	2000      	movs	r0, #0
    ccd8:	4770      	bx	lr
    ccda:	2001      	movs	r0, #1
    ccdc:	4770      	bx	lr

0000ccde <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    ccde:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cce2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cce6:	2808      	cmp	r0, #8
    cce8:	d001      	beq.n	ccee <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    ccea:	2000      	movs	r0, #0
    ccec:	4770      	bx	lr
    ccee:	2001      	movs	r0, #1
    ccf0:	4770      	bx	lr

0000ccf2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    ccf2:	2a00      	cmp	r2, #0
    ccf4:	bf04      	itt	eq
    ccf6:	2000      	moveq	r0, #0
    ccf8:	4770      	bxeq	lr
    ccfa:	1e52      	subs	r2, r2, #1
    ccfc:	d007      	beq.n	cd0e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    ccfe:	7803      	ldrb	r3, [r0, #0]
    cd00:	f891 c000 	ldrb.w	ip, [r1]
    cd04:	4563      	cmp	r3, ip
    cd06:	bf04      	itt	eq
    cd08:	1c40      	addeq	r0, r0, #1
    cd0a:	1c49      	addeq	r1, r1, #1
    cd0c:	d0f5      	beq.n	ccfa <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    cd0e:	7800      	ldrb	r0, [r0, #0]
    cd10:	7809      	ldrb	r1, [r1, #0]
    cd12:	1a40      	subs	r0, r0, r1
    cd14:	4770      	bx	lr

0000cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cd16:	b4f0      	push	{r4, r5, r6, r7}
    cd18:	ea80 0c01 	eor.w	ip, r0, r1
    cd1c:	4603      	mov	r3, r0
    cd1e:	f01c 0f03 	tst.w	ip, #3
    cd22:	d13c      	bne.n	cd9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cd24:	f013 0f03 	tst.w	r3, #3
    cd28:	d00b      	beq.n	cd42 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    cd2a:	2a00      	cmp	r2, #0
    cd2c:	bf04      	itt	eq
    cd2e:	bcf0      	popeq	{r4, r5, r6, r7}
    cd30:	4770      	bxeq	lr
    cd32:	f811 cb01 	ldrb.w	ip, [r1], #1
    cd36:	f803 cb01 	strb.w	ip, [r3], #1
    cd3a:	1e52      	subs	r2, r2, #1
    cd3c:	f013 0f03 	tst.w	r3, #3
    cd40:	d1f3      	bne.n	cd2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cd42:	2a03      	cmp	r2, #3
    cd44:	d94f      	bls.n	cde6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cd46:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cd4a:	d24c      	bcs.n	cde6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cd4c:	f1c2 0c00 	rsb	ip, r2, #0
    cd50:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cd54:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cd58:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cd5c:	f1cc 0c00 	rsb	ip, ip, #0
    cd60:	f1bc 0f00 	cmp.w	ip, #0
    cd64:	dd1b      	ble.n	cd9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cd66:	1f0d      	subs	r5, r1, #4
    cd68:	1f1c      	subs	r4, r3, #4
    cd6a:	f01c 0f01 	tst.w	ip, #1
    cd6e:	d003      	beq.n	cd78 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cd70:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cd74:	f844 6f04 	str.w	r6, [r4, #4]!
    cd78:	ea5f 066c 	movs.w	r6, ip, asr #1
    cd7c:	d007      	beq.n	cd8e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cd7e:	686f      	ldr	r7, [r5, #4]
    cd80:	6067      	str	r7, [r4, #4]
    cd82:	f855 7f08 	ldr.w	r7, [r5, #8]!
    cd86:	f844 7f08 	str.w	r7, [r4, #8]!
    cd8a:	1e76      	subs	r6, r6, #1
    cd8c:	d1f7      	bne.n	cd7e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    cd8e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    cd92:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    cd96:	f1cc 0c00 	rsb	ip, ip, #0
    cd9a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    cd9e:	2a00      	cmp	r2, #0
    cda0:	bf04      	itt	eq
    cda2:	bcf0      	popeq	{r4, r5, r6, r7}
    cda4:	4770      	bxeq	lr
    cda6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cdaa:	d226      	bcs.n	cdfa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cdac:	2a00      	cmp	r2, #0
    cdae:	bfdc      	itt	le
    cdb0:	bcf0      	pople	{r4, r5, r6, r7}
    cdb2:	4770      	bxle	lr
    cdb4:	1e49      	subs	r1, r1, #1
    cdb6:	1e5b      	subs	r3, r3, #1
    cdb8:	f012 0f01 	tst.w	r2, #1
    cdbc:	d003      	beq.n	cdc6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    cdbe:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    cdc2:	f803 cf01 	strb.w	ip, [r3, #1]!
    cdc6:	1052      	asrs	r2, r2, #1
    cdc8:	bf04      	itt	eq
    cdca:	bcf0      	popeq	{r4, r5, r6, r7}
    cdcc:	4770      	bxeq	lr
    cdce:	f891 c001 	ldrb.w	ip, [r1, #1]
    cdd2:	f883 c001 	strb.w	ip, [r3, #1]
    cdd6:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    cdda:	f803 cf02 	strb.w	ip, [r3, #2]!
    cdde:	1e52      	subs	r2, r2, #1
    cde0:	d1f5      	bne.n	cdce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    cde2:	bcf0      	pop	{r4, r5, r6, r7}
    cde4:	4770      	bx	lr
    cde6:	2a04      	cmp	r2, #4
    cde8:	d3d9      	bcc.n	cd9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cdea:	f851 cb04 	ldr.w	ip, [r1], #4
    cdee:	1f12      	subs	r2, r2, #4
    cdf0:	f843 cb04 	str.w	ip, [r3], #4
    cdf4:	2a04      	cmp	r2, #4
    cdf6:	d2f8      	bcs.n	cdea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    cdf8:	e7d1      	b.n	cd9e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cdfa:	f811 cb01 	ldrb.w	ip, [r1], #1
    cdfe:	f803 cb01 	strb.w	ip, [r3], #1
    ce02:	1e52      	subs	r2, r2, #1
    ce04:	d1f9      	bne.n	cdfa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ce06:	bcf0      	pop	{r4, r5, r6, r7}
    ce08:	4770      	bx	lr

0000ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ce0a:	b470      	push	{r4, r5, r6}
    ce0c:	4603      	mov	r3, r0
    ce0e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ce12:	f010 0f03 	tst.w	r0, #3
    ce16:	d009      	beq.n	ce2c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ce18:	2a00      	cmp	r2, #0
    ce1a:	bf04      	itt	eq
    ce1c:	bc70      	popeq	{r4, r5, r6}
    ce1e:	4770      	bxeq	lr
    ce20:	f803 cb01 	strb.w	ip, [r3], #1
    ce24:	1e52      	subs	r2, r2, #1
    ce26:	f013 0f03 	tst.w	r3, #3
    ce2a:	d1f5      	bne.n	ce18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ce2c:	b2c9      	uxtb	r1, r1
    ce2e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ce32:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ce36:	2a03      	cmp	r2, #3
    ce38:	d939      	bls.n	ceae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ce3a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ce3e:	d236      	bcs.n	ceae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ce40:	4251      	negs	r1, r2
    ce42:	17cc      	asrs	r4, r1, #31
    ce44:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ce48:	1089      	asrs	r1, r1, #2
    ce4a:	424e      	negs	r6, r1
    ce4c:	2e00      	cmp	r6, #0
    ce4e:	dd11      	ble.n	ce74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ce50:	1f19      	subs	r1, r3, #4
    ce52:	f016 0f01 	tst.w	r6, #1
    ce56:	bf18      	it	ne
    ce58:	f841 5f04 	strne.w	r5, [r1, #4]!
    ce5c:	1074      	asrs	r4, r6, #1
    ce5e:	d004      	beq.n	ce6a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ce60:	604d      	str	r5, [r1, #4]
    ce62:	f841 5f08 	str.w	r5, [r1, #8]!
    ce66:	1e64      	subs	r4, r4, #1
    ce68:	d1fa      	bne.n	ce60 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    ce6a:	4271      	negs	r1, r6
    ce6c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    ce70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ce74:	2a00      	cmp	r2, #0
    ce76:	bf04      	itt	eq
    ce78:	bc70      	popeq	{r4, r5, r6}
    ce7a:	4770      	bxeq	lr
    ce7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ce80:	d21d      	bcs.n	cebe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    ce82:	2a00      	cmp	r2, #0
    ce84:	bfdc      	itt	le
    ce86:	bc70      	pople	{r4, r5, r6}
    ce88:	4770      	bxle	lr
    ce8a:	1e59      	subs	r1, r3, #1
    ce8c:	f012 0f01 	tst.w	r2, #1
    ce90:	bf18      	it	ne
    ce92:	f801 cf01 	strbne.w	ip, [r1, #1]!
    ce96:	1052      	asrs	r2, r2, #1
    ce98:	bf04      	itt	eq
    ce9a:	bc70      	popeq	{r4, r5, r6}
    ce9c:	4770      	bxeq	lr
    ce9e:	f881 c001 	strb.w	ip, [r1, #1]
    cea2:	f801 cf02 	strb.w	ip, [r1, #2]!
    cea6:	1e52      	subs	r2, r2, #1
    cea8:	d1f9      	bne.n	ce9e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    ceaa:	bc70      	pop	{r4, r5, r6}
    ceac:	4770      	bx	lr
    ceae:	2a04      	cmp	r2, #4
    ceb0:	d3e0      	bcc.n	ce74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ceb2:	1f12      	subs	r2, r2, #4
    ceb4:	f843 5b04 	str.w	r5, [r3], #4
    ceb8:	2a04      	cmp	r2, #4
    ceba:	d2fa      	bcs.n	ceb2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    cebc:	e7da      	b.n	ce74 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cebe:	f803 cb01 	strb.w	ip, [r3], #1
    cec2:	1e52      	subs	r2, r2, #1
    cec4:	d1fb      	bne.n	cebe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cec6:	bc70      	pop	{r4, r5, r6}
    cec8:	4770      	bx	lr
    ceca:	f04f 30ff 	mov.w	r0, #4294967295
    cece:	4770      	bx	lr
    ced0:	2000      	movs	r0, #0
    ced2:	4770      	bx	lr
    ced4:	2000      	movs	r0, #0
    ced6:	4770      	bx	lr
    ced8:	f04f 30ff 	mov.w	r0, #4294967295
    cedc:	4770      	bx	lr
    cede:	4770      	bx	lr
    cee0:	4770      	bx	lr
    cee2:	2000      	movs	r0, #0
    cee4:	4770      	bx	lr
    cee6:	f04f 30ff 	mov.w	r0, #4294967295
    ceea:	4770      	bx	lr
    ceec:	f04f 30ff 	mov.w	r0, #4294967295
    cef0:	4770      	bx	lr
    cef2:	2100      	movs	r1, #0
    cef4:	7001      	strb	r1, [r0, #0]
    cef6:	4770      	bx	lr
    cef8:	f04f 30ff 	mov.w	r0, #4294967295
    cefc:	4770      	bx	lr
    cefe:	f04f 30ff 	mov.w	r0, #4294967295
    cf02:	4770      	bx	lr
    cf04:	2800      	cmp	r0, #0
    cf06:	d001      	beq.n	cf0c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x102>
    cf08:	f06f 0015 	mvn.w	r0, #21
    cf0c:	4770      	bx	lr
    cf0e:	2000      	movs	r0, #0
    cf10:	4770      	bx	lr
    cf12:	2200      	movs	r2, #0
    cf14:	f000 b80a 	b.w	cf2c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000cf18 <mpsl_fem_lna_is_configured>:
    cf18:	b510      	push	{r4, lr}
    cf1a:	2100      	movs	r1, #0
    cf1c:	4608      	mov	r0, r1
    cf1e:	f7f7 fe05 	bl	4b2c <mpsl_fem_lna_configuration_set>
    cf22:	b108      	cbz	r0, cf28 <mpsl_fem_lna_is_configured+0x10>
    cf24:	2000      	movs	r0, #0
    cf26:	bd10      	pop	{r4, pc}
    cf28:	2001      	movs	r0, #1
    cf2a:	bd10      	pop	{r4, pc}

0000cf2c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    cf2c:	b530      	push	{r4, r5, lr}
    cf2e:	4603      	mov	r3, r0
    cf30:	2000      	movs	r0, #0
    cf32:	1a9b      	subs	r3, r3, r2
    cf34:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cf38:	f06f 0415 	mvn.w	r4, #21
    cf3c:	42ab      	cmp	r3, r5
    cf3e:	da02      	bge.n	cf46 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    cf40:	4620      	mov	r0, r4
    cf42:	462b      	mov	r3, r5
    cf44:	e003      	b.n	cf4e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    cf46:	2b7f      	cmp	r3, #127	; 0x7f
    cf48:	dd01      	ble.n	cf4e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    cf4a:	4620      	mov	r0, r4
    cf4c:	237f      	movs	r3, #127	; 0x7f
    cf4e:	700b      	strb	r3, [r1, #0]
    cf50:	704a      	strb	r2, [r1, #1]
    cf52:	bd30      	pop	{r4, r5, pc}
    cf54:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cf58:	4605      	mov	r5, r0
    cf5a:	f100 0003 	add.w	r0, r0, #3
    cf5e:	f020 0003 	bic.w	r0, r0, #3
    cf62:	460c      	mov	r4, r1
    cf64:	9000      	str	r0, [sp, #0]
    cf66:	7849      	ldrb	r1, [r1, #1]
    cf68:	f88d 1004 	strb.w	r1, [sp, #4]
    cf6c:	78a1      	ldrb	r1, [r4, #2]
    cf6e:	0016      	movs	r6, r2
    cf70:	f88d 1005 	strb.w	r1, [sp, #5]
    cf74:	d000      	beq.n	cf78 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x4c>
    cf76:	2000      	movs	r0, #0
    cf78:	a901      	add	r1, sp, #4
    cf7a:	f7f8 f8fd 	bl	5178 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cf7e:	9900      	ldr	r1, [sp, #0]
    cf80:	4408      	add	r0, r1
    cf82:	9000      	str	r0, [sp, #0]
    cf84:	78a1      	ldrb	r1, [r4, #2]
    cf86:	b141      	cbz	r1, cf9a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    cf88:	8a63      	ldrh	r3, [r4, #18]
    cf8a:	78e2      	ldrb	r2, [r4, #3]
    cf8c:	b106      	cbz	r6, cf90 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x64>
    cf8e:	2000      	movs	r0, #0
    cf90:	f7f8 fb82 	bl	5698 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cf94:	9900      	ldr	r1, [sp, #0]
    cf96:	4408      	add	r0, r1
    cf98:	9000      	str	r0, [sp, #0]
    cf9a:	4632      	mov	r2, r6
    cf9c:	4621      	mov	r1, r4
    cf9e:	4668      	mov	r0, sp
    cfa0:	f000 f808 	bl	cfb4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x88>
    cfa4:	9800      	ldr	r0, [sp, #0]
    cfa6:	1dc0      	adds	r0, r0, #7
    cfa8:	f020 0007 	bic.w	r0, r0, #7
    cfac:	9000      	str	r0, [sp, #0]
    cfae:	1b40      	subs	r0, r0, r5
    cfb0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    cfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cfb8:	4606      	mov	r6, r0
    cfba:	460c      	mov	r4, r1
    cfbc:	7808      	ldrb	r0, [r1, #0]
    cfbe:	7849      	ldrb	r1, [r1, #1]
    cfc0:	2700      	movs	r7, #0
    cfc2:	4408      	add	r0, r1
    cfc4:	4691      	mov	r9, r2
    cfc6:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cfca:	463d      	mov	r5, r7
    cfcc:	e00e      	b.n	cfec <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xc0>
    cfce:	7a23      	ldrb	r3, [r4, #8]
    cfd0:	2b02      	cmp	r3, #2
    cfd2:	d200      	bcs.n	cfd6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xaa>
    cfd4:	2302      	movs	r3, #2
    cfd6:	79e2      	ldrb	r2, [r4, #7]
    cfd8:	2a03      	cmp	r2, #3
    cfda:	d200      	bcs.n	cfde <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xb2>
    cfdc:	2203      	movs	r2, #3
    cfde:	79a1      	ldrb	r1, [r4, #6]
    cfe0:	7960      	ldrb	r0, [r4, #5]
    cfe2:	f000 fee3 	bl	ddac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cfe6:	1c6d      	adds	r5, r5, #1
    cfe8:	4407      	add	r7, r0
    cfea:	b2ed      	uxtb	r5, r5
    cfec:	4545      	cmp	r5, r8
    cfee:	d3ee      	bcc.n	cfce <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa2>
    cff0:	6830      	ldr	r0, [r6, #0]
    cff2:	1cc0      	adds	r0, r0, #3
    cff4:	f020 0003 	bic.w	r0, r0, #3
    cff8:	6030      	str	r0, [r6, #0]
    cffa:	f1b9 0f00 	cmp.w	r9, #0
    cffe:	d000      	beq.n	d002 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd6>
    d000:	2000      	movs	r0, #0
    d002:	463a      	mov	r2, r7
    d004:	4641      	mov	r1, r8
    d006:	f7f8 fa91 	bl	552c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d00a:	6831      	ldr	r1, [r6, #0]
    d00c:	4408      	add	r0, r1
    d00e:	6030      	str	r0, [r6, #0]
    d010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d014 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d014:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d016:	4604      	mov	r4, r0
    d018:	1d01      	adds	r1, r0, #4
    d01a:	4668      	mov	r0, sp
    d01c:	f7f9 ff06 	bl	6e2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d020:	2800      	cmp	r0, #0
    d022:	d004      	beq.n	d02e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d024:	4669      	mov	r1, sp
    d026:	4620      	mov	r0, r4
    d028:	f000 f848 	bl	d0bc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d02c:	2001      	movs	r0, #1
    d02e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d030 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d030:	b50e      	push	{r1, r2, r3, lr}
    d032:	4601      	mov	r1, r0
    d034:	4668      	mov	r0, sp
    d036:	f000 f827 	bl	d088 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d03a:	4668      	mov	r0, sp
    d03c:	f001 fcc2 	bl	e9c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d040:	bd0e      	pop	{r1, r2, r3, pc}

0000d042 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d042:	b510      	push	{r4, lr}
    d044:	4604      	mov	r4, r0
    d046:	4620      	mov	r0, r4
    d048:	f7f7 ff84 	bl	4f54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d04c:	2800      	cmp	r0, #0
    d04e:	d006      	beq.n	d05e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d050:	78a1      	ldrb	r1, [r4, #2]
    d052:	7820      	ldrb	r0, [r4, #0]
    d054:	f000 f804 	bl	d060 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d058:	2800      	cmp	r0, #0
    d05a:	d0f4      	beq.n	d046 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d05c:	2001      	movs	r0, #1
    d05e:	bd10      	pop	{r4, pc}
    d060:	b570      	push	{r4, r5, r6, lr}
    d062:	460c      	mov	r4, r1
    d064:	4605      	mov	r5, r0
    d066:	f7f7 ffe7 	bl	5038 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d06a:	2800      	cmp	r0, #0
    d06c:	d002      	beq.n	d074 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d06e:	2d3e      	cmp	r5, #62	; 0x3e
    d070:	d001      	beq.n	d076 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d072:	2001      	movs	r0, #1
    d074:	bd70      	pop	{r4, r5, r6, pc}
    d076:	2c12      	cmp	r4, #18
    d078:	d004      	beq.n	d084 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d07a:	4620      	mov	r0, r4
    d07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d080:	f7f7 bff6 	b.w	5070 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d084:	2000      	movs	r0, #0
    d086:	bd70      	pop	{r4, r5, r6, pc}

0000d088 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d088:	880a      	ldrh	r2, [r1, #0]
    d08a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d08e:	8002      	strh	r2, [r0, #0]
    d090:	884a      	ldrh	r2, [r1, #2]
    d092:	8042      	strh	r2, [r0, #2]
    d094:	784a      	ldrb	r2, [r1, #1]
    d096:	0993      	lsrs	r3, r2, #6
    d098:	2200      	movs	r2, #0
    d09a:	7142      	strb	r2, [r0, #5]
    d09c:	784b      	ldrb	r3, [r1, #1]
    d09e:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d0a2:	b11b      	cbz	r3, d0ac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d0a4:	2b01      	cmp	r3, #1
    d0a6:	d005      	beq.n	d0b4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d0a8:	2b02      	cmp	r3, #2
    d0aa:	d005      	beq.n	d0b8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d0ac:	7102      	strb	r2, [r0, #4]
    d0ae:	1d09      	adds	r1, r1, #4
    d0b0:	6081      	str	r1, [r0, #8]
    d0b2:	4770      	bx	lr
    d0b4:	2201      	movs	r2, #1
    d0b6:	e7f9      	b.n	d0ac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d0b8:	2202      	movs	r2, #2
    d0ba:	e7f7      	b.n	d0ac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d0bc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d0bc:	b510      	push	{r4, lr}
    d0be:	460c      	mov	r4, r1
    d0c0:	7809      	ldrb	r1, [r1, #0]
    d0c2:	7001      	strb	r1, [r0, #0]
    d0c4:	7841      	ldrb	r1, [r0, #1]
    d0c6:	f021 010f 	bic.w	r1, r1, #15
    d0ca:	7041      	strb	r1, [r0, #1]
    d0cc:	8822      	ldrh	r2, [r4, #0]
    d0ce:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d0d2:	4311      	orrs	r1, r2
    d0d4:	7041      	strb	r1, [r0, #1]
    d0d6:	78a2      	ldrb	r2, [r4, #2]
    d0d8:	7082      	strb	r2, [r0, #2]
    d0da:	8862      	ldrh	r2, [r4, #2]
    d0dc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d0e0:	0a12      	lsrs	r2, r2, #8
    d0e2:	70c2      	strb	r2, [r0, #3]
    d0e4:	7041      	strb	r1, [r0, #1]
    d0e6:	7922      	ldrb	r2, [r4, #4]
    d0e8:	f002 0203 	and.w	r2, r2, #3
    d0ec:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d0f0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d0f4:	7041      	strb	r1, [r0, #1]
    d0f6:	7962      	ldrb	r2, [r4, #5]
    d0f8:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d0fc:	7041      	strb	r1, [r0, #1]
    d0fe:	68a1      	ldr	r1, [r4, #8]
    d100:	1d02      	adds	r2, r0, #4
    d102:	4291      	cmp	r1, r2
    d104:	d006      	beq.n	d114 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d106:	8862      	ldrh	r2, [r4, #2]
    d108:	2afb      	cmp	r2, #251	; 0xfb
    d10a:	d300      	bcc.n	d10e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d10c:	22fb      	movs	r2, #251	; 0xfb
    d10e:	1d00      	adds	r0, r0, #4
    d110:	f7ff fe01 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d114:	78a0      	ldrb	r0, [r4, #2]
    d116:	1d00      	adds	r0, r0, #4
    d118:	b2c0      	uxtb	r0, r0
    d11a:	bd10      	pop	{r4, pc}

0000d11c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d120:	4604      	mov	r4, r0
    d122:	780f      	ldrb	r7, [r1, #0]
    d124:	2000      	movs	r0, #0
    d126:	250c      	movs	r5, #12
    d128:	2605      	movs	r6, #5
    d12a:	223e      	movs	r2, #62	; 0x3e
    d12c:	23ff      	movs	r3, #255	; 0xff
    d12e:	2f1b      	cmp	r7, #27
    d130:	d27d      	bcs.n	d22e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    d132:	e8df f007 	tbb	[pc, r7]
    d136:	0ee9      	.short	0x0ee9
    d138:	632d2725 	.word	0x632d2725
    d13c:	ae9b816d 	.word	0xae9b816d
    d140:	e1c6bbb0 	.word	0xe1c6bbb0
    d144:	31e9e9f3 	.word	0x31e9e9f3
    d148:	f0fcd4d1 	.word	0xf0fcd4d1
    d14c:	ecedeeef 	.word	0xecedeeef
    d150:	00eb      	.short	0x00eb
    d152:	7025      	strb	r5, [r4, #0]
    d154:	7908      	ldrb	r0, [r1, #4]
    d156:	70a0      	strb	r0, [r4, #2]
    d158:	7948      	ldrb	r0, [r1, #5]
    d15a:	70e0      	strb	r0, [r4, #3]
    d15c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d160:	0a00      	lsrs	r0, r0, #8
    d162:	7120      	strb	r0, [r4, #4]
    d164:	79c8      	ldrb	r0, [r1, #7]
    d166:	7160      	strb	r0, [r4, #5]
    d168:	7a08      	ldrb	r0, [r1, #8]
    d16a:	71a0      	strb	r0, [r4, #6]
    d16c:	8908      	ldrh	r0, [r1, #8]
    d16e:	0a00      	lsrs	r0, r0, #8
    d170:	71e0      	strb	r0, [r4, #7]
    d172:	7a88      	ldrb	r0, [r1, #10]
    d174:	7220      	strb	r0, [r4, #8]
    d176:	8948      	ldrh	r0, [r1, #10]
    d178:	0a00      	lsrs	r0, r0, #8
    d17a:	7260      	strb	r0, [r4, #9]
    d17c:	2008      	movs	r0, #8
    d17e:	e0c1      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d180:	2010      	movs	r0, #16
    d182:	e000      	b.n	d186 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    d184:	201a      	movs	r0, #26
    d186:	7020      	strb	r0, [r4, #0]
    d188:	7908      	ldrb	r0, [r1, #4]
    d18a:	70a0      	strb	r0, [r4, #2]
    d18c:	2001      	movs	r0, #1
    d18e:	e0b9      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d190:	4620      	mov	r0, r4
    d192:	f000 f948 	bl	d426 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d196:	e0b3      	b.n	d300 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e4>
    d198:	7022      	strb	r2, [r4, #0]
    d19a:	200a      	movs	r0, #10
    d19c:	70a0      	strb	r0, [r4, #2]
    d19e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d1a2:	70e0      	strb	r0, [r4, #3]
    d1a4:	7888      	ldrb	r0, [r1, #2]
    d1a6:	7120      	strb	r0, [r4, #4]
    d1a8:	8848      	ldrh	r0, [r1, #2]
    d1aa:	0a00      	lsrs	r0, r0, #8
    d1ac:	7160      	strb	r0, [r4, #5]
    d1ae:	7908      	ldrb	r0, [r1, #4]
    d1b0:	71a0      	strb	r0, [r4, #6]
    d1b2:	7948      	ldrb	r0, [r1, #5]
    d1b4:	71e0      	strb	r0, [r4, #7]
    d1b6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d1ba:	60a0      	str	r0, [r4, #8]
    d1bc:	8948      	ldrh	r0, [r1, #10]
    d1be:	81a0      	strh	r0, [r4, #12]
    d1c0:	68c8      	ldr	r0, [r1, #12]
    d1c2:	f8c4 000e 	str.w	r0, [r4, #14]
    d1c6:	8a08      	ldrh	r0, [r1, #16]
    d1c8:	8260      	strh	r0, [r4, #18]
    d1ca:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d1ce:	6160      	str	r0, [r4, #20]
    d1d0:	8ac8      	ldrh	r0, [r1, #22]
    d1d2:	8320      	strh	r0, [r4, #24]
    d1d4:	7e08      	ldrb	r0, [r1, #24]
    d1d6:	76a0      	strb	r0, [r4, #26]
    d1d8:	8b08      	ldrh	r0, [r1, #24]
    d1da:	0a00      	lsrs	r0, r0, #8
    d1dc:	76e0      	strb	r0, [r4, #27]
    d1de:	7e88      	ldrb	r0, [r1, #26]
    d1e0:	7720      	strb	r0, [r4, #28]
    d1e2:	8b48      	ldrh	r0, [r1, #26]
    d1e4:	0a00      	lsrs	r0, r0, #8
    d1e6:	7760      	strb	r0, [r4, #29]
    d1e8:	7f08      	ldrb	r0, [r1, #28]
    d1ea:	77a0      	strb	r0, [r4, #30]
    d1ec:	8b88      	ldrh	r0, [r1, #28]
    d1ee:	0a00      	lsrs	r0, r0, #8
    d1f0:	77e0      	strb	r0, [r4, #31]
    d1f2:	7f88      	ldrb	r0, [r1, #30]
    d1f4:	f884 0020 	strb.w	r0, [r4, #32]
    d1f8:	201f      	movs	r0, #31
    d1fa:	e083      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d1fc:	7022      	strb	r2, [r4, #0]
    d1fe:	2014      	movs	r0, #20
    d200:	70a0      	strb	r0, [r4, #2]
    d202:	7908      	ldrb	r0, [r1, #4]
    d204:	70e0      	strb	r0, [r4, #3]
    d206:	8888      	ldrh	r0, [r1, #4]
    d208:	0a00      	lsrs	r0, r0, #8
    d20a:	7120      	strb	r0, [r4, #4]
    d20c:	7988      	ldrb	r0, [r1, #6]
    d20e:	e0a6      	b.n	d35e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d210:	7022      	strb	r2, [r4, #0]
    d212:	2004      	movs	r0, #4
    d214:	70a0      	strb	r0, [r4, #2]
    d216:	7908      	ldrb	r0, [r1, #4]
    d218:	70e0      	strb	r0, [r4, #3]
    d21a:	7988      	ldrb	r0, [r1, #6]
    d21c:	7120      	strb	r0, [r4, #4]
    d21e:	88c8      	ldrh	r0, [r1, #6]
    d220:	0a00      	lsrs	r0, r0, #8
    d222:	7160      	strb	r0, [r4, #5]
    d224:	6888      	ldr	r0, [r1, #8]
    d226:	f8c4 0006 	str.w	r0, [r4, #6]
    d22a:	68c8      	ldr	r0, [r1, #12]
    d22c:	e000      	b.n	d230 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d22e:	e06b      	b.n	d308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d230:	f8c4 000a 	str.w	r0, [r4, #10]
    d234:	200c      	movs	r0, #12
    d236:	e065      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d238:	7022      	strb	r2, [r4, #0]
    d23a:	2003      	movs	r0, #3
    d23c:	70a0      	strb	r0, [r4, #2]
    d23e:	7908      	ldrb	r0, [r1, #4]
    d240:	70e0      	strb	r0, [r4, #3]
    d242:	7988      	ldrb	r0, [r1, #6]
    d244:	7120      	strb	r0, [r4, #4]
    d246:	88c8      	ldrh	r0, [r1, #6]
    d248:	0a00      	lsrs	r0, r0, #8
    d24a:	7160      	strb	r0, [r4, #5]
    d24c:	7a08      	ldrb	r0, [r1, #8]
    d24e:	71a0      	strb	r0, [r4, #6]
    d250:	8908      	ldrh	r0, [r1, #8]
    d252:	0a00      	lsrs	r0, r0, #8
    d254:	71e0      	strb	r0, [r4, #7]
    d256:	7a88      	ldrb	r0, [r1, #10]
    d258:	7220      	strb	r0, [r4, #8]
    d25a:	8948      	ldrh	r0, [r1, #10]
    d25c:	0a00      	lsrs	r0, r0, #8
    d25e:	7260      	strb	r0, [r4, #9]
    d260:	7b08      	ldrb	r0, [r1, #12]
    d262:	72a0      	strb	r0, [r4, #10]
    d264:	8988      	ldrh	r0, [r1, #12]
    d266:	0a00      	lsrs	r0, r0, #8
    d268:	72e0      	strb	r0, [r4, #11]
    d26a:	e0b5      	b.n	d3d8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    d26c:	7022      	strb	r2, [r4, #0]
    d26e:	70a6      	strb	r6, [r4, #2]
    d270:	7908      	ldrb	r0, [r1, #4]
    d272:	70e0      	strb	r0, [r4, #3]
    d274:	8888      	ldrh	r0, [r1, #4]
    d276:	0a00      	lsrs	r0, r0, #8
    d278:	7120      	strb	r0, [r4, #4]
    d27a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d27e:	f8c4 0005 	str.w	r0, [r4, #5]
    d282:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d286:	f8c4 0009 	str.w	r0, [r4, #9]
    d28a:	89c8      	ldrh	r0, [r1, #14]
    d28c:	f8a4 000d 	strh.w	r0, [r4, #13]
    d290:	e0c7      	b.n	d422 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    d292:	2011      	movs	r0, #17
    d294:	e043      	b.n	d31e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    d296:	7026      	strb	r6, [r4, #0]
    d298:	7908      	ldrb	r0, [r1, #4]
    d29a:	70a0      	strb	r0, [r4, #2]
    d29c:	7948      	ldrb	r0, [r1, #5]
    d29e:	70e0      	strb	r0, [r4, #3]
    d2a0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d2a4:	0a00      	lsrs	r0, r0, #8
    d2a6:	7120      	strb	r0, [r4, #4]
    d2a8:	79c8      	ldrb	r0, [r1, #7]
    d2aa:	e058      	b.n	d35e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d2ac:	2008      	movs	r0, #8
    d2ae:	7020      	strb	r0, [r4, #0]
    d2b0:	7908      	ldrb	r0, [r1, #4]
    d2b2:	70a0      	strb	r0, [r4, #2]
    d2b4:	7988      	ldrb	r0, [r1, #6]
    d2b6:	70e0      	strb	r0, [r4, #3]
    d2b8:	88c8      	ldrh	r0, [r1, #6]
    d2ba:	0a00      	lsrs	r0, r0, #8
    d2bc:	7120      	strb	r0, [r4, #4]
    d2be:	7a08      	ldrb	r0, [r1, #8]
    d2c0:	e04d      	b.n	d35e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d2c2:	2030      	movs	r0, #48	; 0x30
    d2c4:	7020      	strb	r0, [r4, #0]
    d2c6:	7908      	ldrb	r0, [r1, #4]
    d2c8:	70a0      	strb	r0, [r4, #2]
    d2ca:	7988      	ldrb	r0, [r1, #6]
    d2cc:	70e0      	strb	r0, [r4, #3]
    d2ce:	88c8      	ldrh	r0, [r1, #6]
    d2d0:	0a00      	lsrs	r0, r0, #8
    d2d2:	7120      	strb	r0, [r4, #4]
    d2d4:	2003      	movs	r0, #3
    d2d6:	e015      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d2d8:	7022      	strb	r2, [r4, #0]
    d2da:	2007      	movs	r0, #7
    d2dc:	e044      	b.n	d368 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    d2de:	7022      	strb	r2, [r4, #0]
    d2e0:	70a5      	strb	r5, [r4, #2]
    d2e2:	7908      	ldrb	r0, [r1, #4]
    d2e4:	70e0      	strb	r0, [r4, #3]
    d2e6:	7988      	ldrb	r0, [r1, #6]
    d2e8:	7120      	strb	r0, [r4, #4]
    d2ea:	88c8      	ldrh	r0, [r1, #6]
    d2ec:	0a00      	lsrs	r0, r0, #8
    d2ee:	7160      	strb	r0, [r4, #5]
    d2f0:	7a08      	ldrb	r0, [r1, #8]
    d2f2:	71a0      	strb	r0, [r4, #6]
    d2f4:	7a48      	ldrb	r0, [r1, #9]
    d2f6:	e027      	b.n	d348 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    d2f8:	4620      	mov	r0, r4
    d2fa:	1d09      	adds	r1, r1, #4
    d2fc:	f7f7 fe6e 	bl	4fdc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d300:	2800      	cmp	r0, #0
    d302:	d001      	beq.n	d308 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d304:	7060      	strb	r0, [r4, #1]
    d306:	1c80      	adds	r0, r0, #2
    d308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d30c:	e074      	b.n	d3f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    d30e:	e047      	b.n	d3a0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d310:	e028      	b.n	d364 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d312:	e053      	b.n	d3bc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    d314:	e062      	b.n	d3dc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    d316:	e01a      	b.n	d34e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    d318:	e009      	b.n	d32e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x212>
    d31a:	e7ff      	b.n	d31c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x200>
    d31c:	2057      	movs	r0, #87	; 0x57
    d31e:	7020      	strb	r0, [r4, #0]
    d320:	7908      	ldrb	r0, [r1, #4]
    d322:	70a0      	strb	r0, [r4, #2]
    d324:	8888      	ldrh	r0, [r1, #4]
    d326:	0a00      	lsrs	r0, r0, #8
    d328:	70e0      	strb	r0, [r4, #3]
    d32a:	2002      	movs	r0, #2
    d32c:	e7ea      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d32e:	7022      	strb	r2, [r4, #0]
    d330:	2012      	movs	r0, #18
    d332:	70a0      	strb	r0, [r4, #2]
    d334:	7908      	ldrb	r0, [r1, #4]
    d336:	70e0      	strb	r0, [r4, #3]
    d338:	7948      	ldrb	r0, [r1, #5]
    d33a:	7120      	strb	r0, [r4, #4]
    d33c:	7988      	ldrb	r0, [r1, #6]
    d33e:	7160      	strb	r0, [r4, #5]
    d340:	88c8      	ldrh	r0, [r1, #6]
    d342:	0a00      	lsrs	r0, r0, #8
    d344:	71a0      	strb	r0, [r4, #6]
    d346:	7a08      	ldrb	r0, [r1, #8]
    d348:	71e0      	strb	r0, [r4, #7]
    d34a:	2006      	movs	r0, #6
    d34c:	e7da      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d34e:	7023      	strb	r3, [r4, #0]
    d350:	20a1      	movs	r0, #161	; 0xa1
    d352:	70a0      	strb	r0, [r4, #2]
    d354:	7908      	ldrb	r0, [r1, #4]
    d356:	70e0      	strb	r0, [r4, #3]
    d358:	7948      	ldrb	r0, [r1, #5]
    d35a:	7120      	strb	r0, [r4, #4]
    d35c:	2000      	movs	r0, #0
    d35e:	7160      	strb	r0, [r4, #5]
    d360:	2004      	movs	r0, #4
    d362:	e7cf      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d364:	7023      	strb	r3, [r4, #0]
    d366:	20a2      	movs	r0, #162	; 0xa2
    d368:	70a0      	strb	r0, [r4, #2]
    d36a:	7908      	ldrb	r0, [r1, #4]
    d36c:	70e0      	strb	r0, [r4, #3]
    d36e:	8888      	ldrh	r0, [r1, #4]
    d370:	0a00      	lsrs	r0, r0, #8
    d372:	7120      	strb	r0, [r4, #4]
    d374:	7988      	ldrb	r0, [r1, #6]
    d376:	7160      	strb	r0, [r4, #5]
    d378:	88c8      	ldrh	r0, [r1, #6]
    d37a:	0a00      	lsrs	r0, r0, #8
    d37c:	71a0      	strb	r0, [r4, #6]
    d37e:	7a08      	ldrb	r0, [r1, #8]
    d380:	71e0      	strb	r0, [r4, #7]
    d382:	8908      	ldrh	r0, [r1, #8]
    d384:	0a00      	lsrs	r0, r0, #8
    d386:	7220      	strb	r0, [r4, #8]
    d388:	7a88      	ldrb	r0, [r1, #10]
    d38a:	7260      	strb	r0, [r4, #9]
    d38c:	8948      	ldrh	r0, [r1, #10]
    d38e:	0a00      	lsrs	r0, r0, #8
    d390:	72a0      	strb	r0, [r4, #10]
    d392:	7b08      	ldrb	r0, [r1, #12]
    d394:	72e0      	strb	r0, [r4, #11]
    d396:	8988      	ldrh	r0, [r1, #12]
    d398:	0a00      	lsrs	r0, r0, #8
    d39a:	7320      	strb	r0, [r4, #12]
    d39c:	200b      	movs	r0, #11
    d39e:	e7b1      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d3a0:	7023      	strb	r3, [r4, #0]
    d3a2:	20a3      	movs	r0, #163	; 0xa3
    d3a4:	70a0      	strb	r0, [r4, #2]
    d3a6:	7908      	ldrb	r0, [r1, #4]
    d3a8:	70e0      	strb	r0, [r4, #3]
    d3aa:	8888      	ldrh	r0, [r1, #4]
    d3ac:	0a00      	lsrs	r0, r0, #8
    d3ae:	7120      	strb	r0, [r4, #4]
    d3b0:	7988      	ldrb	r0, [r1, #6]
    d3b2:	7160      	strb	r0, [r4, #5]
    d3b4:	79c8      	ldrb	r0, [r1, #7]
    d3b6:	71a0      	strb	r0, [r4, #6]
    d3b8:	2005      	movs	r0, #5
    d3ba:	e7a3      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d3bc:	7022      	strb	r2, [r4, #0]
    d3be:	2013      	movs	r0, #19
    d3c0:	70a0      	strb	r0, [r4, #2]
    d3c2:	7908      	ldrb	r0, [r1, #4]
    d3c4:	70e0      	strb	r0, [r4, #3]
    d3c6:	7948      	ldrb	r0, [r1, #5]
    d3c8:	7120      	strb	r0, [r4, #4]
    d3ca:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d3ce:	f8c4 0005 	str.w	r0, [r4, #5]
    d3d2:	8948      	ldrh	r0, [r1, #10]
    d3d4:	f8a4 0009 	strh.w	r0, [r4, #9]
    d3d8:	200a      	movs	r0, #10
    d3da:	e793      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d3dc:	7023      	strb	r3, [r4, #0]
    d3de:	20a4      	movs	r0, #164	; 0xa4
    d3e0:	70a0      	strb	r0, [r4, #2]
    d3e2:	7908      	ldrb	r0, [r1, #4]
    d3e4:	70e0      	strb	r0, [r4, #3]
    d3e6:	8888      	ldrh	r0, [r1, #4]
    d3e8:	0a00      	lsrs	r0, r0, #8
    d3ea:	7120      	strb	r0, [r4, #4]
    d3ec:	7988      	ldrb	r0, [r1, #6]
    d3ee:	7160      	strb	r0, [r4, #5]
    d3f0:	79c8      	ldrb	r0, [r1, #7]
    d3f2:	71a0      	strb	r0, [r4, #6]
    d3f4:	2007      	movs	r0, #7
    d3f6:	e785      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d3f8:	7023      	strb	r3, [r4, #0]
    d3fa:	2080      	movs	r0, #128	; 0x80
    d3fc:	70a0      	strb	r0, [r4, #2]
    d3fe:	888a      	ldrh	r2, [r1, #4]
    d400:	f8a4 2003 	strh.w	r2, [r4, #3]
    d404:	88ca      	ldrh	r2, [r1, #6]
    d406:	f8a4 2005 	strh.w	r2, [r4, #5]
    d40a:	7a0a      	ldrb	r2, [r1, #8]
    d40c:	71e2      	strb	r2, [r4, #7]
    d40e:	894a      	ldrh	r2, [r1, #10]
    d410:	8122      	strh	r2, [r4, #8]
    d412:	898a      	ldrh	r2, [r1, #12]
    d414:	8162      	strh	r2, [r4, #10]
    d416:	89ca      	ldrh	r2, [r1, #14]
    d418:	81a2      	strh	r2, [r4, #12]
    d41a:	7c09      	ldrb	r1, [r1, #16]
    d41c:	f001 0101 	and.w	r1, r1, #1
    d420:	73a1      	strb	r1, [r4, #14]
    d422:	200d      	movs	r0, #13
    d424:	e76e      	b.n	d304 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>

0000d426 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d426:	223e      	movs	r2, #62	; 0x3e
    d428:	7002      	strb	r2, [r0, #0]
    d42a:	2201      	movs	r2, #1
    d42c:	7082      	strb	r2, [r0, #2]
    d42e:	790a      	ldrb	r2, [r1, #4]
    d430:	70c2      	strb	r2, [r0, #3]
    d432:	798a      	ldrb	r2, [r1, #6]
    d434:	7102      	strb	r2, [r0, #4]
    d436:	88ca      	ldrh	r2, [r1, #6]
    d438:	0a12      	lsrs	r2, r2, #8
    d43a:	7142      	strb	r2, [r0, #5]
    d43c:	7a0a      	ldrb	r2, [r1, #8]
    d43e:	7182      	strb	r2, [r0, #6]
    d440:	7a4a      	ldrb	r2, [r1, #9]
    d442:	71c2      	strb	r2, [r0, #7]
    d444:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d448:	6082      	str	r2, [r0, #8]
    d44a:	89ca      	ldrh	r2, [r1, #14]
    d44c:	8182      	strh	r2, [r0, #12]
    d44e:	7c0a      	ldrb	r2, [r1, #16]
    d450:	7382      	strb	r2, [r0, #14]
    d452:	8a0a      	ldrh	r2, [r1, #16]
    d454:	0a12      	lsrs	r2, r2, #8
    d456:	73c2      	strb	r2, [r0, #15]
    d458:	7c8a      	ldrb	r2, [r1, #18]
    d45a:	7402      	strb	r2, [r0, #16]
    d45c:	8a4a      	ldrh	r2, [r1, #18]
    d45e:	0a12      	lsrs	r2, r2, #8
    d460:	7442      	strb	r2, [r0, #17]
    d462:	7d0a      	ldrb	r2, [r1, #20]
    d464:	7482      	strb	r2, [r0, #18]
    d466:	8a8a      	ldrh	r2, [r1, #20]
    d468:	0a12      	lsrs	r2, r2, #8
    d46a:	74c2      	strb	r2, [r0, #19]
    d46c:	7d89      	ldrb	r1, [r1, #22]
    d46e:	7501      	strb	r1, [r0, #20]
    d470:	2013      	movs	r0, #19
    d472:	4770      	bx	lr

0000d474 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d474:	223e      	movs	r2, #62	; 0x3e
    d476:	7002      	strb	r2, [r0, #0]
    d478:	2201      	movs	r2, #1
    d47a:	7082      	strb	r2, [r0, #2]
    d47c:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d480:	70c2      	strb	r2, [r0, #3]
    d482:	788a      	ldrb	r2, [r1, #2]
    d484:	7102      	strb	r2, [r0, #4]
    d486:	884a      	ldrh	r2, [r1, #2]
    d488:	0a12      	lsrs	r2, r2, #8
    d48a:	7142      	strb	r2, [r0, #5]
    d48c:	790a      	ldrb	r2, [r1, #4]
    d48e:	7182      	strb	r2, [r0, #6]
    d490:	794a      	ldrb	r2, [r1, #5]
    d492:	71c2      	strb	r2, [r0, #7]
    d494:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d498:	6082      	str	r2, [r0, #8]
    d49a:	894a      	ldrh	r2, [r1, #10]
    d49c:	8182      	strh	r2, [r0, #12]
    d49e:	7e0a      	ldrb	r2, [r1, #24]
    d4a0:	7382      	strb	r2, [r0, #14]
    d4a2:	8b0a      	ldrh	r2, [r1, #24]
    d4a4:	0a12      	lsrs	r2, r2, #8
    d4a6:	73c2      	strb	r2, [r0, #15]
    d4a8:	7e8a      	ldrb	r2, [r1, #26]
    d4aa:	7402      	strb	r2, [r0, #16]
    d4ac:	8b4a      	ldrh	r2, [r1, #26]
    d4ae:	0a12      	lsrs	r2, r2, #8
    d4b0:	7442      	strb	r2, [r0, #17]
    d4b2:	7f0a      	ldrb	r2, [r1, #28]
    d4b4:	7482      	strb	r2, [r0, #18]
    d4b6:	8b8a      	ldrh	r2, [r1, #28]
    d4b8:	0a12      	lsrs	r2, r2, #8
    d4ba:	74c2      	strb	r2, [r0, #19]
    d4bc:	7f89      	ldrb	r1, [r1, #30]
    d4be:	7501      	strb	r1, [r0, #20]
    d4c0:	2113      	movs	r1, #19
    d4c2:	7041      	strb	r1, [r0, #1]
    d4c4:	4608      	mov	r0, r1
    d4c6:	4770      	bx	lr

0000d4c8 <sdc_hci_data_get>:
    d4c8:	b510      	push	{r4, lr}
    d4ca:	b120      	cbz	r0, d4d6 <sdc_hci_data_get+0xe>
    d4cc:	f7ff fda2 	bl	d014 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d4d0:	b120      	cbz	r0, d4dc <sdc_hci_data_get+0x14>
    d4d2:	2000      	movs	r0, #0
    d4d4:	bd10      	pop	{r4, pc}
    d4d6:	f06f 0015 	mvn.w	r0, #21
    d4da:	bd10      	pop	{r4, pc}
    d4dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d4e0:	bd10      	pop	{r4, pc}

0000d4e2 <sdc_hci_data_put>:
    d4e2:	b510      	push	{r4, lr}
    d4e4:	f06f 0415 	mvn.w	r4, #21
    d4e8:	b120      	cbz	r0, d4f4 <sdc_hci_data_put+0x12>
    d4ea:	f7ff fda1 	bl	d030 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d4ee:	b108      	cbz	r0, d4f4 <sdc_hci_data_put+0x12>
    d4f0:	2000      	movs	r0, #0
    d4f2:	bd10      	pop	{r4, pc}
    d4f4:	4620      	mov	r0, r4
    d4f6:	bd10      	pop	{r4, pc}

0000d4f8 <sdc_hci_evt_get>:
    d4f8:	b510      	push	{r4, lr}
    d4fa:	b120      	cbz	r0, d506 <sdc_hci_evt_get+0xe>
    d4fc:	f7ff fda1 	bl	d042 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d500:	b120      	cbz	r0, d50c <sdc_hci_evt_get+0x14>
    d502:	2000      	movs	r0, #0
    d504:	bd10      	pop	{r4, pc}
    d506:	f06f 0015 	mvn.w	r0, #21
    d50a:	bd10      	pop	{r4, pc}
    d50c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d510:	bd10      	pop	{r4, pc}

0000d512 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d512:	f002 becf 	b.w	102b4 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d516 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d516:	f002 bf11 	b.w	1033c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d51a <sdc_hci_cmd_cb_set_event_mask>:
    d51a:	b510      	push	{r4, lr}
    d51c:	f7f7 fdbc 	bl	5098 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d520:	2000      	movs	r0, #0
    d522:	bd10      	pop	{r4, pc}

0000d524 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d524:	b510      	push	{r4, lr}
    d526:	f7f7 fdc5 	bl	50b4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d52a:	2000      	movs	r0, #0
    d52c:	bd10      	pop	{r4, pc}

0000d52e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d52e:	f002 bf21 	b.w	10374 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d532 <sdc_hci_cmd_vs_conn_event_extend>:
    d532:	b508      	push	{r3, lr}
    d534:	7800      	ldrb	r0, [r0, #0]
    d536:	f88d 0000 	strb.w	r0, [sp]
    d53a:	4668      	mov	r0, sp
    d53c:	f002 fdd1 	bl	100e2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d540:	bd08      	pop	{r3, pc}

0000d542 <sdc_hci_cmd_vs_conn_update>:
    d542:	2001      	movs	r0, #1
    d544:	4770      	bx	lr

0000d546 <sdc_hci_cmd_vs_event_length_set>:
    d546:	f7fd bcf7 	b.w	af38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d54a <sdc_hci_cmd_vs_llpm_mode_set>:
    d54a:	2001      	movs	r0, #1
    d54c:	4770      	bx	lr

0000d54e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d54e:	7800      	ldrb	r0, [r0, #0]
    d550:	b100      	cbz	r0, d554 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d552:	2001      	movs	r0, #1
    d554:	f002 bd4a 	b.w	ffec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d558 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d558:	b570      	push	{r4, r5, r6, lr}
    d55a:	4605      	mov	r5, r0
    d55c:	2210      	movs	r2, #16
    d55e:	2100      	movs	r1, #0
    d560:	f7ff fc53 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d564:	2210      	movs	r2, #16
    d566:	2100      	movs	r1, #0
    d568:	f105 0010 	add.w	r0, r5, #16
    d56c:	f7ff fc4d 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d570:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d574:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d578:	1c40      	adds	r0, r0, #1
    d57a:	d10b      	bne.n	d594 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d57c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d580:	1c40      	adds	r0, r0, #1
    d582:	d107      	bne.n	d594 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d584:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d588:	1c40      	adds	r0, r0, #1
    d58a:	d103      	bne.n	d594 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d58c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d590:	1c40      	adds	r0, r0, #1
    d592:	d00b      	beq.n	d5ac <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d594:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d598:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d59c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d5a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d5a4:	612a      	str	r2, [r5, #16]
    d5a6:	6168      	str	r0, [r5, #20]
    d5a8:	61a9      	str	r1, [r5, #24]
    d5aa:	61eb      	str	r3, [r5, #28]
    d5ac:	2000      	movs	r0, #0
    d5ae:	f7f8 fabd 	bl	5b2c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d5b2:	b918      	cbnz	r0, d5bc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d5b4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d5b8:	07c0      	lsls	r0, r0, #31
    d5ba:	d118      	bne.n	d5ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d5bc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d5c0:	1c40      	adds	r0, r0, #1
    d5c2:	d10b      	bne.n	d5dc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d5c4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d5c8:	1c40      	adds	r0, r0, #1
    d5ca:	d107      	bne.n	d5dc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d5cc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d5d0:	1c40      	adds	r0, r0, #1
    d5d2:	d103      	bne.n	d5dc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d5d4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d5d8:	1c40      	adds	r0, r0, #1
    d5da:	d008      	beq.n	d5ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d5dc:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d5e0:	6861      	ldr	r1, [r4, #4]
    d5e2:	68a2      	ldr	r2, [r4, #8]
    d5e4:	68e3      	ldr	r3, [r4, #12]
    d5e6:	6028      	str	r0, [r5, #0]
    d5e8:	6069      	str	r1, [r5, #4]
    d5ea:	60aa      	str	r2, [r5, #8]
    d5ec:	60eb      	str	r3, [r5, #12]
    d5ee:	2000      	movs	r0, #0
    d5f0:	bd70      	pop	{r4, r5, r6, pc}

0000d5f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d5f2:	b538      	push	{r3, r4, r5, lr}
    d5f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d5f8:	4604      	mov	r4, r0
    d5fa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d5fe:	1c40      	adds	r0, r0, #1
    d600:	d105      	bne.n	d60e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d602:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d606:	43c0      	mvns	r0, r0
    d608:	0400      	lsls	r0, r0, #16
    d60a:	0c00      	lsrs	r0, r0, #16
    d60c:	d03e      	beq.n	d68c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d60e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d612:	07c0      	lsls	r0, r0, #31
    d614:	d03a      	beq.n	d68c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d616:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d61a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d61e:	f8ad 1000 	strh.w	r1, [sp]
    d622:	f8c4 0001 	str.w	r0, [r4, #1]
    d626:	f8bd 0000 	ldrh.w	r0, [sp]
    d62a:	f8a4 0005 	strh.w	r0, [r4, #5]
    d62e:	79a0      	ldrb	r0, [r4, #6]
    d630:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d634:	71a0      	strb	r0, [r4, #6]
    d636:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d63a:	1c40      	adds	r0, r0, #1
    d63c:	d00f      	beq.n	d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d63e:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d642:	1c40      	adds	r0, r0, #1
    d644:	d00b      	beq.n	d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d646:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d64a:	1c40      	adds	r0, r0, #1
    d64c:	d007      	beq.n	d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d64e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d652:	1c40      	adds	r0, r0, #1
    d654:	d003      	beq.n	d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d656:	2000      	movs	r0, #0
    d658:	f7f8 fa68 	bl	5b2c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d65c:	b140      	cbz	r0, d670 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d65e:	2210      	movs	r2, #16
    d660:	2100      	movs	r1, #0
    d662:	1de0      	adds	r0, r4, #7
    d664:	f7ff fbd1 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d668:	2001      	movs	r0, #1
    d66a:	7020      	strb	r0, [r4, #0]
    d66c:	2000      	movs	r0, #0
    d66e:	bd38      	pop	{r3, r4, r5, pc}
    d670:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d674:	6869      	ldr	r1, [r5, #4]
    d676:	68a8      	ldr	r0, [r5, #8]
    d678:	68eb      	ldr	r3, [r5, #12]
    d67a:	f8c4 2007 	str.w	r2, [r4, #7]
    d67e:	f8c4 100b 	str.w	r1, [r4, #11]
    d682:	f8c4 000f 	str.w	r0, [r4, #15]
    d686:	f8c4 3013 	str.w	r3, [r4, #19]
    d68a:	e7ed      	b.n	d668 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d68c:	2000      	movs	r0, #0
    d68e:	e7ec      	b.n	d66a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d690 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d690:	f002 bd19 	b.w	100c6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d694 <sdc_hci_cmd_ip_read_bd_addr>:
    d694:	f002 be1f 	b.w	102d6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d698 <sdc_hci_cmd_ip_read_local_version_information>:
    d698:	f7fd bc5c 	b.w	af54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d69c <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d69c:	f002 b9ff 	b.w	fa9e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d6a0 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d6a0:	f002 b9e2 	b.w	fa68 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d6a4 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d6a4:	f002 ba1f 	b.w	fae6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d6a8 <sdc_hci_cmd_le_clear_resolving_list>:
    d6a8:	f002 ba10 	b.w	facc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d6ac <sdc_hci_cmd_le_encrypt>:
    d6ac:	f002 ba25 	b.w	fafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d6b0 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d6b0:	8802      	ldrh	r2, [r0, #0]
    d6b2:	800a      	strh	r2, [r1, #0]
    d6b4:	f002 ba2a 	b.w	fb0c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d6b8 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d6b8:	8802      	ldrh	r2, [r0, #0]
    d6ba:	800a      	strh	r2, [r1, #0]
    d6bc:	f002 ba3f 	b.w	fb3e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d6c0 <sdc_hci_cmd_le_rand>:
    d6c0:	f002 ba67 	b.w	fb92 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d6c4 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d6c4:	f002 ba6b 	b.w	fb9e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d6c8 <sdc_hci_cmd_le_read_buffer_size>:
    d6c8:	f7fd bbb0 	b.w	ae2c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d6cc <sdc_hci_cmd_le_read_channel_map>:
    d6cc:	f7fd bbb8 	b.w	ae40 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d6d0 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d6d0:	f002 bad1 	b.w	fc76 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d6d4 <sdc_hci_cmd_le_read_max_data_length>:
    d6d4:	f002 ba6c 	b.w	fbb0 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d6d8 <sdc_hci_cmd_le_read_phy>:
    d6d8:	f002 ba7a 	b.w	fbd0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d6dc <sdc_hci_cmd_le_read_remote_features>:
    d6dc:	f002 baa1 	b.w	fc22 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d6e0 <sdc_hci_cmd_le_read_resolving_list_size>:
    d6e0:	f002 babc 	b.w	fc5c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d6e4 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d6e4:	f7fd bbd4 	b.w	ae90 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d6e8 <sdc_hci_cmd_le_read_transmit_power>:
    d6e8:	f002 babc 	b.w	fc64 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d6ec <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d6ec:	f002 bae0 	b.w	fcb0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d6f0 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d6f0:	f002 bac5 	b.w	fc7e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d6f4 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d6f4:	f002 baf1 	b.w	fcda <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d6f8 <sdc_hci_cmd_le_set_adv_data>:
    d6f8:	f002 bafd 	b.w	fcf6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d6fc <sdc_hci_cmd_le_set_adv_enable>:
    d6fc:	f002 bb10 	b.w	fd20 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d700 <sdc_hci_cmd_le_set_adv_params>:
    d700:	f002 bb41 	b.w	fd86 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d704 <sdc_hci_cmd_le_set_data_length>:
    d704:	f002 bbd4 	b.w	feb0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d708 <sdc_hci_cmd_le_set_default_phy>:
    d708:	f7fd bbd2 	b.w	aeb0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d70c <sdc_hci_cmd_le_set_event_mask>:
    d70c:	b510      	push	{r4, lr}
    d70e:	f7f7 fcbd 	bl	508c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d712:	2000      	movs	r0, #0
    d714:	bd10      	pop	{r4, pc}

0000d716 <sdc_hci_cmd_le_set_phy>:
    d716:	f002 bbf2 	b.w	fefe <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d71a <sdc_hci_cmd_le_set_privacy_mode>:
    d71a:	f002 bc0e 	b.w	ff3a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d71e <sdc_hci_cmd_le_set_random_address>:
    d71e:	f002 bc22 	b.w	ff66 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d722 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d722:	f002 bc2e 	b.w	ff82 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d726 <sdc_hci_cmd_le_set_scan_response_data>:
    d726:	f002 bc35 	b.w	ff94 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d72a <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d72a:	f002 bc48 	b.w	ffbe <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d72e <sdc_hci_cmd_lc_disconnect>:
    d72e:	f002 b947 	b.w	f9c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d732 <sdc_hci_cmd_lc_read_remote_version_information>:
    d732:	f002 bddc 	b.w	102ee <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d736:	b570      	push	{r4, r5, r6, lr}
    d738:	880b      	ldrh	r3, [r1, #0]
    d73a:	7f04      	ldrb	r4, [r0, #28]
    d73c:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d740:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d744:	8802      	ldrh	r2, [r0, #0]
    d746:	4435      	add	r5, r6
    d748:	1da4      	adds	r4, r4, #6
    d74a:	882d      	ldrh	r5, [r5, #0]
    d74c:	4422      	add	r2, r4
    d74e:	b292      	uxth	r2, r2
    d750:	4425      	add	r5, r4
    d752:	1e54      	subs	r4, r2, #1
    d754:	442c      	add	r4, r5
    d756:	fb94 f4f2 	sdiv	r4, r4, r2
    d75a:	fb02 6204 	mla	r2, r2, r4, r6
    d75e:	8840      	ldrh	r0, [r0, #2]
    d760:	b292      	uxth	r2, r2
    d762:	4290      	cmp	r0, r2
    d764:	d903      	bls.n	d76e <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d766:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d76a:	4310      	orrs	r0, r2
    d76c:	e002      	b.n	d774 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d76e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d772:	4398      	bics	r0, r3
    d774:	8008      	strh	r0, [r1, #0]
    d776:	bd70      	pop	{r4, r5, r6, pc}
    d778:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d77c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d780:	429a      	cmp	r2, r3
    d782:	d107      	bne.n	d794 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d784:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d788:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d78c:	4288      	cmp	r0, r1
    d78e:	d001      	beq.n	d794 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d790:	2001      	movs	r0, #1
    d792:	4770      	bx	lr
    d794:	2000      	movs	r0, #0
    d796:	4770      	bx	lr

0000d798 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d798:	b570      	push	{r4, r5, r6, lr}
    d79a:	7f00      	ldrb	r0, [r0, #28]
    d79c:	461c      	mov	r4, r3
    d79e:	1d80      	adds	r0, r0, #6
    d7a0:	4408      	add	r0, r1
    d7a2:	4613      	mov	r3, r2
    d7a4:	8809      	ldrh	r1, [r1, #0]
    d7a6:	9a04      	ldr	r2, [sp, #16]
    d7a8:	1cc9      	adds	r1, r1, #3
    d7aa:	b289      	uxth	r1, r1
    d7ac:	1915      	adds	r5, r2, r4
    d7ae:	1ec0      	subs	r0, r0, #3
    d7b0:	428d      	cmp	r5, r1
    d7b2:	d805      	bhi.n	d7c0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d7b4:	1881      	adds	r1, r0, r2
    d7b6:	4622      	mov	r2, r4
    d7b8:	4618      	mov	r0, r3
    d7ba:	f7ff faac 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7be:	e000      	b.n	d7c2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d7c0:	2400      	movs	r4, #0
    d7c2:	4620      	mov	r0, r4
    d7c4:	bd70      	pop	{r4, r5, r6, pc}

0000d7c6 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d7c6:	b570      	push	{r4, r5, r6, lr}
    d7c8:	7f00      	ldrb	r0, [r0, #28]
    d7ca:	461c      	mov	r4, r3
    d7cc:	1d80      	adds	r0, r0, #6
    d7ce:	4408      	add	r0, r1
    d7d0:	4613      	mov	r3, r2
    d7d2:	8809      	ldrh	r1, [r1, #0]
    d7d4:	9a04      	ldr	r2, [sp, #16]
    d7d6:	1cc9      	adds	r1, r1, #3
    d7d8:	b289      	uxth	r1, r1
    d7da:	1915      	adds	r5, r2, r4
    d7dc:	1ec0      	subs	r0, r0, #3
    d7de:	428d      	cmp	r5, r1
    d7e0:	d805      	bhi.n	d7ee <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d7e2:	4410      	add	r0, r2
    d7e4:	4622      	mov	r2, r4
    d7e6:	4619      	mov	r1, r3
    d7e8:	f7ff fa95 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7ec:	e000      	b.n	d7f0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d7ee:	2400      	movs	r4, #0
    d7f0:	4620      	mov	r0, r4
    d7f2:	bd70      	pop	{r4, r5, r6, pc}

0000d7f4 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d7f4:	8881      	ldrh	r1, [r0, #4]
    d7f6:	88c0      	ldrh	r0, [r0, #6]
    d7f8:	4288      	cmp	r0, r1
    d7fa:	d101      	bne.n	d800 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d7fc:	2001      	movs	r0, #1
    d7fe:	4770      	bx	lr
    d800:	2000      	movs	r0, #0
    d802:	4770      	bx	lr

0000d804 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d804:	8881      	ldrh	r1, [r0, #4]
    d806:	8900      	ldrh	r0, [r0, #8]
    d808:	4288      	cmp	r0, r1
    d80a:	d101      	bne.n	d810 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d80c:	2001      	movs	r0, #1
    d80e:	4770      	bx	lr
    d810:	2000      	movs	r0, #0
    d812:	4770      	bx	lr

0000d814 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d814:	b570      	push	{r4, r5, r6, lr}
    d816:	460d      	mov	r5, r1
    d818:	4604      	mov	r4, r0
    d81a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d81e:	8880      	ldrh	r0, [r0, #4]
    d820:	2600      	movs	r6, #0
    d822:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d826:	4401      	add	r1, r0
    d828:	702e      	strb	r6, [r5, #0]
    d82a:	8a20      	ldrh	r0, [r4, #16]
    d82c:	2800      	cmp	r0, #0
    d82e:	d01b      	beq.n	d868 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    d830:	89a2      	ldrh	r2, [r4, #12]
    d832:	4410      	add	r0, r2
    d834:	b280      	uxth	r0, r0
    d836:	81a0      	strh	r0, [r4, #12]
    d838:	880a      	ldrh	r2, [r1, #0]
    d83a:	4290      	cmp	r0, r2
    d83c:	d905      	bls.n	d84a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    d83e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d842:	f04f 0014 	mov.w	r0, #20
    d846:	f7f7 fa9f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d84a:	d10b      	bne.n	d864 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    d84c:	69a0      	ldr	r0, [r4, #24]
    d84e:	b108      	cbz	r0, d854 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    d850:	7f40      	ldrb	r0, [r0, #29]
    d852:	7088      	strb	r0, [r1, #2]
    d854:	f104 0104 	add.w	r1, r4, #4
    d858:	4620      	mov	r0, r4
    d85a:	f7ff ff6c 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d85e:	81a6      	strh	r6, [r4, #12]
    d860:	2001      	movs	r0, #1
    d862:	7028      	strb	r0, [r5, #0]
    d864:	8226      	strh	r6, [r4, #16]
    d866:	2001      	movs	r0, #1
    d868:	bd70      	pop	{r4, r5, r6, pc}

0000d86a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d86c:	4604      	mov	r4, r0
    d86e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d872:	88c0      	ldrh	r0, [r0, #6]
    d874:	460e      	mov	r6, r1
    d876:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d87a:	8a60      	ldrh	r0, [r4, #18]
    d87c:	19d9      	adds	r1, r3, r7
    d87e:	b108      	cbz	r0, d884 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d880:	42b0      	cmp	r0, r6
    d882:	d201      	bcs.n	d888 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d884:	2000      	movs	r0, #0
    d886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d888:	89e0      	ldrh	r0, [r4, #14]
    d88a:	2500      	movs	r5, #0
    d88c:	b140      	cbz	r0, d8a0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d88e:	f8b1 c000 	ldrh.w	ip, [r1]
    d892:	4560      	cmp	r0, ip
    d894:	d008      	beq.n	d8a8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d896:	f44f 7114 	mov.w	r1, #592	; 0x250
    d89a:	2014      	movs	r0, #20
    d89c:	f7f7 fa74 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8a0:	7f60      	ldrb	r0, [r4, #29]
    d8a2:	7088      	strb	r0, [r1, #2]
    d8a4:	800d      	strh	r5, [r1, #0]
    d8a6:	e00e      	b.n	d8c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d8a8:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d8ac:	4418      	add	r0, r3
    d8ae:	f10c 0c06 	add.w	ip, ip, #6
    d8b2:	44bc      	add	ip, r7
    d8b4:	4460      	add	r0, ip
    d8b6:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d8ba:	f820 cc03 	strh.w	ip, [r0, #-3]
    d8be:	f894 c020 	ldrb.w	ip, [r4, #32]
    d8c2:	f800 cc01 	strb.w	ip, [r0, #-1]
    d8c6:	89e0      	ldrh	r0, [r4, #14]
    d8c8:	4430      	add	r0, r6
    d8ca:	81e0      	strh	r0, [r4, #14]
    d8cc:	8808      	ldrh	r0, [r1, #0]
    d8ce:	4430      	add	r0, r6
    d8d0:	8008      	strh	r0, [r1, #0]
    d8d2:	b19a      	cbz	r2, d8fc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d8d4:	1da1      	adds	r1, r4, #6
    d8d6:	4620      	mov	r0, r4
    d8d8:	f7ff ff2d 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d8dc:	81e5      	strh	r5, [r4, #14]
    d8de:	7f60      	ldrb	r0, [r4, #29]
    d8e0:	1c40      	adds	r0, r0, #1
    d8e2:	7760      	strb	r0, [r4, #29]
    d8e4:	7da0      	ldrb	r0, [r4, #22]
    d8e6:	f88d 0000 	strb.w	r0, [sp]
    d8ea:	9800      	ldr	r0, [sp, #0]
    d8ec:	9000      	str	r0, [sp, #0]
    d8ee:	f89d 0000 	ldrb.w	r0, [sp]
    d8f2:	b178      	cbz	r0, d914 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d8f4:	88e0      	ldrh	r0, [r4, #6]
    d8f6:	82a0      	strh	r0, [r4, #20]
    d8f8:	75a5      	strb	r5, [r4, #22]
    d8fa:	e00b      	b.n	d914 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d8fc:	7f20      	ldrb	r0, [r4, #28]
    d8fe:	89e1      	ldrh	r1, [r4, #14]
    d900:	1d80      	adds	r0, r0, #6
    d902:	4438      	add	r0, r7
    d904:	4419      	add	r1, r3
    d906:	4408      	add	r0, r1
    d908:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d90c:	83e1      	strh	r1, [r4, #30]
    d90e:	7880      	ldrb	r0, [r0, #2]
    d910:	f884 0020 	strb.w	r0, [r4, #32]
    d914:	8265      	strh	r5, [r4, #18]
    d916:	2001      	movs	r0, #1
    d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d91a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d91a:	b510      	push	{r4, lr}
    d91c:	4604      	mov	r4, r0
    d91e:	88c0      	ldrh	r0, [r0, #6]
    d920:	88a1      	ldrh	r1, [r4, #4]
    d922:	4281      	cmp	r1, r0
    d924:	d007      	beq.n	d936 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d926:	89a0      	ldrh	r0, [r4, #12]
    d928:	b928      	cbnz	r0, d936 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d92a:	8a20      	ldrh	r0, [r4, #16]
    d92c:	b918      	cbnz	r0, d936 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d92e:	88a0      	ldrh	r0, [r4, #4]
    d930:	8aa1      	ldrh	r1, [r4, #20]
    d932:	4288      	cmp	r0, r1
    d934:	d101      	bne.n	d93a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d936:	2000      	movs	r0, #0
    d938:	bd10      	pop	{r4, pc}
    d93a:	1d21      	adds	r1, r4, #4
    d93c:	4620      	mov	r0, r4
    d93e:	f7ff fefa 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d942:	2000      	movs	r0, #0
    d944:	8220      	strh	r0, [r4, #16]
    d946:	2001      	movs	r0, #1
    d948:	bd10      	pop	{r4, pc}

0000d94a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d94a:	b510      	push	{r4, lr}
    d94c:	4604      	mov	r4, r0
    d94e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d952:	88c0      	ldrh	r0, [r0, #6]
    d954:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d958:	4402      	add	r2, r0
    d95a:	8820      	ldrh	r0, [r4, #0]
    d95c:	2845      	cmp	r0, #69	; 0x45
    d95e:	d200      	bcs.n	d962 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d960:	2045      	movs	r0, #69	; 0x45
    d962:	4288      	cmp	r0, r1
    d964:	d204      	bcs.n	d970 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d966:	f240 1119 	movw	r1, #281	; 0x119
    d96a:	2014      	movs	r0, #20
    d96c:	f7f7 fa0c 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d970:	7de0      	ldrb	r0, [r4, #23]
    d972:	2800      	cmp	r0, #0
    d974:	d003      	beq.n	d97e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d976:	8810      	ldrh	r0, [r2, #0]
    d978:	4288      	cmp	r0, r1
    d97a:	d201      	bcs.n	d980 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d97c:	2000      	movs	r0, #0
    d97e:	bd10      	pop	{r4, pc}
    d980:	8011      	strh	r1, [r2, #0]
    d982:	1da1      	adds	r1, r4, #6
    d984:	4620      	mov	r0, r4
    d986:	f7ff fed6 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d98a:	2000      	movs	r0, #0
    d98c:	75e0      	strb	r0, [r4, #23]
    d98e:	2001      	movs	r0, #1
    d990:	bd10      	pop	{r4, pc}

0000d992 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d996:	8941      	ldrh	r1, [r0, #10]
    d998:	8886      	ldrh	r6, [r0, #4]
    d99a:	4604      	mov	r4, r0
    d99c:	2500      	movs	r5, #0
    d99e:	f100 070a 	add.w	r7, r0, #10
    d9a2:	e006      	b.n	d9b2 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d9a4:	4639      	mov	r1, r7
    d9a6:	4620      	mov	r0, r4
    d9a8:	f7ff fec5 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d9ac:	1c6d      	adds	r5, r5, #1
    d9ae:	8961      	ldrh	r1, [r4, #10]
    d9b0:	b2ad      	uxth	r5, r5
    d9b2:	42b1      	cmp	r1, r6
    d9b4:	d1f6      	bne.n	d9a4 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d9b6:	4628      	mov	r0, r5
    d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d9bc:	b530      	push	{r4, r5, lr}
    d9be:	88c4      	ldrh	r4, [r0, #6]
    d9c0:	8881      	ldrh	r1, [r0, #4]
    d9c2:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d9c6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d9ca:	4413      	add	r3, r2
    d9cc:	8882      	ldrh	r2, [r0, #4]
    d9ce:	8a85      	ldrh	r5, [r0, #20]
    d9d0:	42aa      	cmp	r2, r5
    d9d2:	d012      	beq.n	d9fa <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d9d4:	42a1      	cmp	r1, r4
    d9d6:	d010      	beq.n	d9fa <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d9d8:	8981      	ldrh	r1, [r0, #12]
    d9da:	b971      	cbnz	r1, d9fa <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d9dc:	6982      	ldr	r2, [r0, #24]
    d9de:	b172      	cbz	r2, d9fe <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d9e0:	4610      	mov	r0, r2
    d9e2:	f7ff ff0f 	bl	d804 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d9e6:	b950      	cbnz	r0, d9fe <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d9e8:	8910      	ldrh	r0, [r2, #8]
    d9ea:	3224      	adds	r2, #36	; 0x24
    d9ec:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d9f0:	4410      	add	r0, r2
    d9f2:	7899      	ldrb	r1, [r3, #2]
    d9f4:	7880      	ldrb	r0, [r0, #2]
    d9f6:	4288      	cmp	r0, r1
    d9f8:	d101      	bne.n	d9fe <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d9fa:	2000      	movs	r0, #0
    d9fc:	bd30      	pop	{r4, r5, pc}
    d9fe:	4618      	mov	r0, r3
    da00:	bd30      	pop	{r4, r5, pc}

0000da02 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    da02:	7f00      	ldrb	r0, [r0, #28]
    da04:	1d80      	adds	r0, r0, #6
    da06:	4408      	add	r0, r1
    da08:	1ec0      	subs	r0, r0, #3
    da0a:	6010      	str	r0, [r2, #0]
    da0c:	8808      	ldrh	r0, [r1, #0]
    da0e:	4770      	bx	lr

0000da10 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da14:	460e      	mov	r6, r1
    da16:	88c1      	ldrh	r1, [r0, #6]
    da18:	8902      	ldrh	r2, [r0, #8]
    da1a:	4604      	mov	r4, r0
    da1c:	f100 0824 	add.w	r8, r0, #36	; 0x24
    da20:	8800      	ldrh	r0, [r0, #0]
    da22:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    da26:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    da2a:	2845      	cmp	r0, #69	; 0x45
    da2c:	d200      	bcs.n	da30 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    da2e:	2045      	movs	r0, #69	; 0x45
    da30:	42b0      	cmp	r0, r6
    da32:	d203      	bcs.n	da3c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    da34:	21db      	movs	r1, #219	; 0xdb
    da36:	2014      	movs	r0, #20
    da38:	f7f7 f9a6 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da3c:	4610      	mov	r0, r2
    da3e:	f7ff fe9b 	bl	d778 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    da42:	b110      	cbz	r0, da4a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    da44:	2000      	movs	r0, #0
    da46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da4a:	42af      	cmp	r7, r5
    da4c:	d908      	bls.n	da60 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da4e:	7f21      	ldrb	r1, [r4, #28]
    da50:	1b78      	subs	r0, r7, r5
    da52:	1a40      	subs	r0, r0, r1
    da54:	1f80      	subs	r0, r0, #6
    da56:	4286      	cmp	r6, r0
    da58:	dd02      	ble.n	da60 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da5a:	2000      	movs	r0, #0
    da5c:	75e0      	strb	r0, [r4, #23]
    da5e:	e7f1      	b.n	da44 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    da60:	eb08 0005 	add.w	r0, r8, r5
    da64:	2101      	movs	r1, #1
    da66:	8006      	strh	r6, [r0, #0]
    da68:	75e1      	strb	r1, [r4, #23]
    da6a:	e7ec      	b.n	da46 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000da6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    da6c:	b538      	push	{r3, r4, r5, lr}
    da6e:	88c4      	ldrh	r4, [r0, #6]
    da70:	8881      	ldrh	r1, [r0, #4]
    da72:	f100 0224 	add.w	r2, r0, #36	; 0x24
    da76:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    da7a:	441a      	add	r2, r3
    da7c:	42a1      	cmp	r1, r4
    da7e:	d010      	beq.n	daa2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da80:	8983      	ldrh	r3, [r0, #12]
    da82:	8a05      	ldrh	r5, [r0, #16]
    da84:	8812      	ldrh	r2, [r2, #0]
    da86:	442b      	add	r3, r5
    da88:	4293      	cmp	r3, r2
    da8a:	d308      	bcc.n	da9e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    da8c:	f8ad 1000 	strh.w	r1, [sp]
    da90:	4669      	mov	r1, sp
    da92:	f7ff fe50 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    da96:	f8bd 0000 	ldrh.w	r0, [sp]
    da9a:	42a0      	cmp	r0, r4
    da9c:	d001      	beq.n	daa2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da9e:	2001      	movs	r0, #1
    daa0:	bd38      	pop	{r3, r4, r5, pc}
    daa2:	2000      	movs	r0, #0
    daa4:	bd38      	pop	{r3, r4, r5, pc}

0000daa6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    daa6:	b570      	push	{r4, r5, r6, lr}
    daa8:	88c6      	ldrh	r6, [r0, #6]
    daaa:	8885      	ldrh	r5, [r0, #4]
    daac:	4603      	mov	r3, r0
    daae:	f100 0424 	add.w	r4, r0, #36	; 0x24
    dab2:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    dab6:	4420      	add	r0, r4
    dab8:	42b5      	cmp	r5, r6
    daba:	d102      	bne.n	dac2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    dabc:	2000      	movs	r0, #0
    dabe:	8218      	strh	r0, [r3, #16]
    dac0:	bd70      	pop	{r4, r5, r6, pc}
    dac2:	8804      	ldrh	r4, [r0, #0]
    dac4:	899d      	ldrh	r5, [r3, #12]
    dac6:	7f1e      	ldrb	r6, [r3, #28]
    dac8:	1b64      	subs	r4, r4, r5
    daca:	4435      	add	r5, r6
    dacc:	4428      	add	r0, r5
    dace:	880d      	ldrh	r5, [r1, #0]
    dad0:	b2a4      	uxth	r4, r4
    dad2:	1cc0      	adds	r0, r0, #3
    dad4:	42a5      	cmp	r5, r4
    dad6:	d900      	bls.n	dada <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    dad8:	800c      	strh	r4, [r1, #0]
    dada:	899c      	ldrh	r4, [r3, #12]
    dadc:	b124      	cbz	r4, dae8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    dade:	2400      	movs	r4, #0
    dae0:	7014      	strb	r4, [r2, #0]
    dae2:	8809      	ldrh	r1, [r1, #0]
    dae4:	8219      	strh	r1, [r3, #16]
    dae6:	bd70      	pop	{r4, r5, r6, pc}
    dae8:	2401      	movs	r4, #1
    daea:	e7f9      	b.n	dae0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000daec <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    daec:	b508      	push	{r3, lr}
    daee:	8a81      	ldrh	r1, [r0, #20]
    daf0:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    daf4:	3aff      	subs	r2, #255	; 0xff
    daf6:	d008      	beq.n	db0a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    daf8:	7d82      	ldrb	r2, [r0, #22]
    dafa:	f88d 2000 	strb.w	r2, [sp]
    dafe:	9a00      	ldr	r2, [sp, #0]
    db00:	9200      	str	r2, [sp, #0]
    db02:	f89d 2000 	ldrb.w	r2, [sp]
    db06:	b952      	cbnz	r2, db1e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    db08:	e004      	b.n	db14 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    db0a:	f240 318d 	movw	r1, #909	; 0x38d
    db0e:	2014      	movs	r0, #20
    db10:	f7f7 f93a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db14:	8880      	ldrh	r0, [r0, #4]
    db16:	4281      	cmp	r1, r0
    db18:	d101      	bne.n	db1e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    db1a:	2000      	movs	r0, #0
    db1c:	bd08      	pop	{r3, pc}
    db1e:	2001      	movs	r0, #1
    db20:	bd08      	pop	{r3, pc}

0000db22 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    db22:	f64f 71ff 	movw	r1, #65535	; 0xffff
    db26:	8281      	strh	r1, [r0, #20]
    db28:	2100      	movs	r1, #0
    db2a:	7581      	strb	r1, [r0, #22]
    db2c:	4770      	bx	lr

0000db2e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    db2e:	b510      	push	{r4, lr}
    db30:	8a81      	ldrh	r1, [r0, #20]
    db32:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    db36:	3aff      	subs	r2, #255	; 0xff
    db38:	d004      	beq.n	db44 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    db3a:	f240 3169 	movw	r1, #873	; 0x369
    db3e:	2014      	movs	r0, #20
    db40:	f7f7 f922 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db44:	88c1      	ldrh	r1, [r0, #6]
    db46:	8281      	strh	r1, [r0, #20]
    db48:	89c1      	ldrh	r1, [r0, #14]
    db4a:	b109      	cbz	r1, db50 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    db4c:	21ff      	movs	r1, #255	; 0xff
    db4e:	e000      	b.n	db52 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    db50:	2100      	movs	r1, #0
    db52:	7581      	strb	r1, [r0, #22]
    db54:	bd10      	pop	{r4, pc}

0000db56 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    db56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db5a:	461d      	mov	r5, r3
    db5c:	4616      	mov	r6, r2
    db5e:	9f06      	ldr	r7, [sp, #24]
    db60:	460b      	mov	r3, r1
    db62:	4604      	mov	r4, r0
    db64:	463a      	mov	r2, r7
    db66:	4629      	mov	r1, r5
    db68:	4630      	mov	r0, r6
    db6a:	f000 f84f 	bl	dc0c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    db6e:	4283      	cmp	r3, r0
    db70:	d201      	bcs.n	db76 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    db72:	21a8      	movs	r1, #168	; 0xa8
    db74:	e018      	b.n	dba8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    db76:	1ce0      	adds	r0, r4, #3
    db78:	f020 0103 	bic.w	r1, r0, #3
    db7c:	4620      	mov	r0, r4
    db7e:	42a1      	cmp	r1, r4
    db80:	d001      	beq.n	db86 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    db82:	21a9      	movs	r1, #169	; 0xa9
    db84:	e010      	b.n	dba8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    db86:	2224      	movs	r2, #36	; 0x24
    db88:	2100      	movs	r1, #0
    db8a:	f7ff f93e 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    db92:	82a0      	strh	r0, [r4, #20]
    db94:	19a8      	adds	r0, r5, r6
    db96:	1d80      	adds	r0, r0, #6
    db98:	4378      	muls	r0, r7
    db9a:	b280      	uxth	r0, r0
    db9c:	7725      	strb	r5, [r4, #28]
    db9e:	8060      	strh	r0, [r4, #2]
    dba0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    dba4:	d903      	bls.n	dbae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    dba6:	21af      	movs	r1, #175	; 0xaf
    dba8:	2014      	movs	r0, #20
    dbaa:	f7f7 f8ed 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbae:	8026      	strh	r6, [r4, #0]
    dbb0:	2000      	movs	r0, #0
    dbb2:	7760      	strb	r0, [r4, #29]
    dbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dbb8 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    dbb8:	6181      	str	r1, [r0, #24]
    dbba:	6188      	str	r0, [r1, #24]
    dbbc:	4770      	bx	lr

0000dbbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    dbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbc2:	460b      	mov	r3, r1
    dbc4:	4604      	mov	r4, r0
    dbc6:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dbca:	8905      	ldrh	r5, [r0, #8]
    dbcc:	8946      	ldrh	r6, [r0, #10]
    dbce:	8880      	ldrh	r0, [r0, #4]
    dbd0:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    dbd4:	4439      	add	r1, r7
    dbd6:	460f      	mov	r7, r1
    dbd8:	4285      	cmp	r5, r0
    dbda:	d102      	bne.n	dbe2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    dbdc:	2000      	movs	r0, #0
    dbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dbe2:	b10a      	cbz	r2, dbe8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    dbe4:	1cc8      	adds	r0, r1, #3
    dbe6:	6010      	str	r0, [r2, #0]
    dbe8:	b123      	cbz	r3, dbf4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    dbea:	7f22      	ldrb	r2, [r4, #28]
    dbec:	1cf9      	adds	r1, r7, #3
    dbee:	4618      	mov	r0, r3
    dbf0:	f7ff f891 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dbf4:	883f      	ldrh	r7, [r7, #0]
    dbf6:	f104 0108 	add.w	r1, r4, #8
    dbfa:	4620      	mov	r0, r4
    dbfc:	f7ff fd9b 	bl	d736 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc00:	42b5      	cmp	r5, r6
    dc02:	d101      	bne.n	dc08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    dc04:	8920      	ldrh	r0, [r4, #8]
    dc06:	8160      	strh	r0, [r4, #10]
    dc08:	4638      	mov	r0, r7
    dc0a:	e7e8      	b.n	dbde <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000dc0c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    dc0c:	4401      	add	r1, r0
    dc0e:	1d89      	adds	r1, r1, #6
    dc10:	4351      	muls	r1, r2
    dc12:	b28a      	uxth	r2, r1
    dc14:	2100      	movs	r1, #0
    dc16:	2845      	cmp	r0, #69	; 0x45
    dc18:	d201      	bcs.n	dc1e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    dc1a:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    dc1e:	3224      	adds	r2, #36	; 0x24
    dc20:	1850      	adds	r0, r2, r1
    dc22:	b280      	uxth	r0, r0
    dc24:	4770      	bx	lr

0000dc26 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    dc26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc2a:	4688      	mov	r8, r1
    dc2c:	88c1      	ldrh	r1, [r0, #6]
    dc2e:	4604      	mov	r4, r0
    dc30:	8900      	ldrh	r0, [r0, #8]
    dc32:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    dc36:	f104 0524 	add.w	r5, r4, #36	; 0x24
    dc3a:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    dc3e:	eb05 0906 	add.w	r9, r5, r6
    dc42:	f7ff fd99 	bl	d778 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dc46:	2200      	movs	r2, #0
    dc48:	b998      	cbnz	r0, dc72 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    dc4a:	8820      	ldrh	r0, [r4, #0]
    dc4c:	2845      	cmp	r0, #69	; 0x45
    dc4e:	d200      	bcs.n	dc52 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    dc50:	2045      	movs	r0, #69	; 0x45
    dc52:	42b7      	cmp	r7, r6
    dc54:	d906      	bls.n	dc64 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dc56:	7f23      	ldrb	r3, [r4, #28]
    dc58:	1bb9      	subs	r1, r7, r6
    dc5a:	1ac9      	subs	r1, r1, r3
    dc5c:	1f89      	subs	r1, r1, #6
    dc5e:	4281      	cmp	r1, r0
    dc60:	da00      	bge.n	dc64 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dc62:	4608      	mov	r0, r1
    dc64:	89e1      	ldrh	r1, [r4, #14]
    dc66:	b111      	cbz	r1, dc6e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    dc68:	f8b9 3000 	ldrh.w	r3, [r9]
    dc6c:	1ac0      	subs	r0, r0, r3
    dc6e:	4540      	cmp	r0, r8
    dc70:	da03      	bge.n	dc7a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    dc72:	8262      	strh	r2, [r4, #18]
    dc74:	2000      	movs	r0, #0
    dc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc7a:	7f20      	ldrb	r0, [r4, #28]
    dc7c:	4429      	add	r1, r5
    dc7e:	1d80      	adds	r0, r0, #6
    dc80:	4430      	add	r0, r6
    dc82:	4408      	add	r0, r1
    dc84:	f8a4 8012 	strh.w	r8, [r4, #18]
    dc88:	1ec0      	subs	r0, r0, #3
    dc8a:	e7f4      	b.n	dc76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000dc8c <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    dc8c:	2100      	movs	r1, #0
    dc8e:	81c1      	strh	r1, [r0, #14]
    dc90:	8241      	strh	r1, [r0, #18]
    dc92:	7581      	strb	r1, [r0, #22]
    dc94:	4770      	bx	lr

0000dc96 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    dc96:	b570      	push	{r4, r5, r6, lr}
    dc98:	2300      	movs	r3, #0
    dc9a:	2908      	cmp	r1, #8
    dc9c:	d204      	bcs.n	dca8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    dc9e:	f240 11cb 	movw	r1, #459	; 0x1cb
    dca2:	2015      	movs	r0, #21
    dca4:	f7f7 f870 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dca8:	6802      	ldr	r2, [r0, #0]
    dcaa:	b90a      	cbnz	r2, dcb0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    dcac:	e01e      	b.n	dcec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    dcae:	4610      	mov	r0, r2
    dcb0:	6802      	ldr	r2, [r0, #0]
    dcb2:	8893      	ldrh	r3, [r2, #4]
    dcb4:	428b      	cmp	r3, r1
    dcb6:	d002      	beq.n	dcbe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    dcb8:	6813      	ldr	r3, [r2, #0]
    dcba:	2b00      	cmp	r3, #0
    dcbc:	d1f7      	bne.n	dcae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    dcbe:	8894      	ldrh	r4, [r2, #4]
    dcc0:	4613      	mov	r3, r2
    dcc2:	428c      	cmp	r4, r1
    dcc4:	d101      	bne.n	dcca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    dcc6:	6811      	ldr	r1, [r2, #0]
    dcc8:	e00d      	b.n	dce6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    dcca:	f101 0508 	add.w	r5, r1, #8
    dcce:	b2ae      	uxth	r6, r5
    dcd0:	2500      	movs	r5, #0
    dcd2:	42b4      	cmp	r4, r6
    dcd4:	d309      	bcc.n	dcea <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    dcd6:	1a64      	subs	r4, r4, r1
    dcd8:	4411      	add	r1, r2
    dcda:	600d      	str	r5, [r1, #0]
    dcdc:	808c      	strh	r4, [r1, #4]
    dcde:	6802      	ldr	r2, [r0, #0]
    dce0:	6812      	ldr	r2, [r2, #0]
    dce2:	6002      	str	r2, [r0, #0]
    dce4:	600a      	str	r2, [r1, #0]
    dce6:	6001      	str	r1, [r0, #0]
    dce8:	e000      	b.n	dcec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    dcea:	2300      	movs	r3, #0
    dcec:	4618      	mov	r0, r3
    dcee:	bd70      	pop	{r4, r5, r6, pc}

0000dcf0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dcf0:	b510      	push	{r4, lr}
    dcf2:	000c      	movs	r4, r1
    dcf4:	d006      	beq.n	dd04 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    dcf6:	2c08      	cmp	r4, #8
    dcf8:	d209      	bcs.n	dd0e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    dcfa:	f240 1195 	movw	r1, #405	; 0x195
    dcfe:	2015      	movs	r0, #21
    dd00:	f7f7 f842 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd04:	b108      	cbz	r0, dd0a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dd06:	2100      	movs	r1, #0
    dd08:	6001      	str	r1, [r0, #0]
    dd0a:	2000      	movs	r0, #0
    dd0c:	bd10      	pop	{r4, pc}
    dd0e:	b118      	cbz	r0, dd18 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    dd10:	b2a1      	uxth	r1, r4
    dd12:	6800      	ldr	r0, [r0, #0]
    dd14:	f000 f814 	bl	dd40 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    dd18:	1d20      	adds	r0, r4, #4
    dd1a:	bd10      	pop	{r4, pc}

0000dd1c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dd1c:	2100      	movs	r1, #0
    dd1e:	6802      	ldr	r2, [r0, #0]
    dd20:	e003      	b.n	dd2a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dd22:	8893      	ldrh	r3, [r2, #4]
    dd24:	6812      	ldr	r2, [r2, #0]
    dd26:	4419      	add	r1, r3
    dd28:	b289      	uxth	r1, r1
    dd2a:	2a00      	cmp	r2, #0
    dd2c:	d1f9      	bne.n	dd22 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dd2e:	f000 b807 	b.w	dd40 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dd32 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dd32:	2300      	movs	r3, #0
    dd34:	600b      	str	r3, [r1, #0]
    dd36:	808a      	strh	r2, [r1, #4]
    dd38:	6802      	ldr	r2, [r0, #0]
    dd3a:	600a      	str	r2, [r1, #0]
    dd3c:	6001      	str	r1, [r0, #0]
    dd3e:	4770      	bx	lr
    dd40:	2300      	movs	r3, #0
    dd42:	6043      	str	r3, [r0, #4]
    dd44:	1d02      	adds	r2, r0, #4
    dd46:	8101      	strh	r1, [r0, #8]
    dd48:	6002      	str	r2, [r0, #0]
    dd4a:	4770      	bx	lr

0000dd4c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    dd4c:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    dd50:	3bff      	subs	r3, #255	; 0xff
    dd52:	d001      	beq.n	dd58 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    dd54:	2902      	cmp	r1, #2
    dd56:	d301      	bcc.n	dd5c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    dd58:	2000      	movs	r0, #0
    dd5a:	4770      	bx	lr
    dd5c:	f7f7 bace 	b.w	52fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    dd60:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    dd64:	3aff      	subs	r2, #255	; 0xff
    dd66:	d001      	beq.n	dd6c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    dd68:	2902      	cmp	r1, #2
    dd6a:	d301      	bcc.n	dd70 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    dd6c:	2000      	movs	r0, #0
    dd6e:	4770      	bx	lr
    dd70:	f7f7 bafe 	b.w	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    dd74:	b570      	push	{r4, r5, r6, lr}
    dd76:	4605      	mov	r5, r0
    dd78:	460c      	mov	r4, r1
    dd7a:	4608      	mov	r0, r1
    dd7c:	f000 f9a6 	bl	e0cc <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    dd80:	b108      	cbz	r0, dd86 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    dd82:	2010      	movs	r0, #16
    dd84:	bd70      	pop	{r4, r5, r6, pc}
    dd86:	2d02      	cmp	r5, #2
    dd88:	d301      	bcc.n	dd8e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    dd8a:	2007      	movs	r0, #7
    dd8c:	bd70      	pop	{r4, r5, r6, pc}
    dd8e:	7025      	strb	r5, [r4, #0]
    dd90:	2000      	movs	r0, #0
    dd92:	8060      	strh	r0, [r4, #2]
    dd94:	bd70      	pop	{r4, r5, r6, pc}
    dd96:	b510      	push	{r4, lr}
    dd98:	4604      	mov	r4, r0
    dd9a:	f7f7 fb35 	bl	5408 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    dd9e:	42a0      	cmp	r0, r4
    dda0:	d901      	bls.n	dda6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    dda2:	2001      	movs	r0, #1
    dda4:	bd10      	pop	{r4, pc}
    dda6:	2000      	movs	r0, #0
    dda8:	bd10      	pop	{r4, pc}
    ddaa:	4770      	bx	lr

0000ddac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    ddac:	b570      	push	{r4, r5, r6, lr}
    ddae:	460e      	mov	r6, r1
    ddb0:	461d      	mov	r5, r3
    ddb2:	4611      	mov	r1, r2
    ddb4:	f000 f811 	bl	ddda <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    ddb8:	4604      	mov	r4, r0
    ddba:	4629      	mov	r1, r5
    ddbc:	4630      	mov	r0, r6
    ddbe:	f000 f803 	bl	ddc8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    ddc2:	4420      	add	r0, r4
    ddc4:	1d00      	adds	r0, r0, #4
    ddc6:	bd70      	pop	{r4, r5, r6, pc}
    ddc8:	b510      	push	{r4, lr}
    ddca:	460a      	mov	r2, r1
    ddcc:	2101      	movs	r1, #1
    ddce:	f7ff ff1d 	bl	dc0c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    ddd2:	1cc0      	adds	r0, r0, #3
    ddd4:	f020 0003 	bic.w	r0, r0, #3
    ddd8:	bd10      	pop	{r4, pc}
    ddda:	b510      	push	{r4, lr}
    dddc:	460a      	mov	r2, r1
    ddde:	2101      	movs	r1, #1
    dde0:	f7ff ff14 	bl	dc0c <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dde4:	1cc0      	adds	r0, r0, #3
    dde6:	f020 0003 	bic.w	r0, r0, #3
    ddea:	bd10      	pop	{r4, pc}
    ddec:	b109      	cbz	r1, ddf2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    ddee:	2100      	movs	r1, #0
    ddf0:	e000      	b.n	ddf4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    ddf2:	2102      	movs	r1, #2
    ddf4:	1843      	adds	r3, r0, r1
    ddf6:	7d1a      	ldrb	r2, [r3, #20]
    ddf8:	2a02      	cmp	r2, #2
    ddfa:	d008      	beq.n	de0e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    ddfc:	7d5b      	ldrb	r3, [r3, #21]
    ddfe:	2b02      	cmp	r3, #2
    de00:	d009      	beq.n	de16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    de02:	2a03      	cmp	r2, #3
    de04:	d003      	beq.n	de0e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    de06:	2b03      	cmp	r3, #3
    de08:	d005      	beq.n	de16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    de0a:	2000      	movs	r0, #0
    de0c:	4770      	bx	lr
    de0e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    de12:	8b00      	ldrh	r0, [r0, #24]
    de14:	4770      	bx	lr
    de16:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    de1a:	8b40      	ldrh	r0, [r0, #26]
    de1c:	4770      	bx	lr
    de1e:	b109      	cbz	r1, de24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    de20:	2100      	movs	r1, #0
    de22:	e000      	b.n	de26 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    de24:	2102      	movs	r1, #2
    de26:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    de2a:	8b01      	ldrh	r1, [r0, #24]
    de2c:	b911      	cbnz	r1, de34 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    de2e:	8b40      	ldrh	r0, [r0, #26]
    de30:	2800      	cmp	r0, #0
    de32:	d000      	beq.n	de36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    de34:	2001      	movs	r0, #1
    de36:	4770      	bx	lr
    de38:	b538      	push	{r3, r4, r5, lr}
    de3a:	7883      	ldrb	r3, [r0, #2]
    de3c:	f88d 3000 	strb.w	r3, [sp]
    de40:	9b00      	ldr	r3, [sp, #0]
    de42:	9300      	str	r3, [sp, #0]
    de44:	f89d 3000 	ldrb.w	r3, [sp]
    de48:	b95b      	cbnz	r3, de62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb6>
    de4a:	2400      	movs	r4, #0
    de4c:	b10a      	cbz	r2, de52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    de4e:	2300      	movs	r3, #0
    de50:	e000      	b.n	de54 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa8>
    de52:	2302      	movs	r3, #2
    de54:	18c2      	adds	r2, r0, r3
    de56:	7d15      	ldrb	r5, [r2, #20]
    de58:	2d02      	cmp	r5, #2
    de5a:	d004      	beq.n	de66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    de5c:	7d52      	ldrb	r2, [r2, #21]
    de5e:	2a02      	cmp	r2, #2
    de60:	d004      	beq.n	de6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    de62:	2000      	movs	r0, #0
    de64:	bd38      	pop	{r3, r4, r5, pc}
    de66:	461a      	mov	r2, r3
    de68:	1c5b      	adds	r3, r3, #1
    de6a:	e000      	b.n	de6e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    de6c:	1c5a      	adds	r2, r3, #1
    de6e:	b179      	cbz	r1, de90 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    de70:	18c5      	adds	r5, r0, r3
    de72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    de76:	752c      	strb	r4, [r5, #20]
    de78:	831c      	strh	r4, [r3, #24]
    de7a:	2303      	movs	r3, #3
    de7c:	1884      	adds	r4, r0, r2
    de7e:	7523      	strb	r3, [r4, #20]
    de80:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    de84:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    de88:	685b      	ldr	r3, [r3, #4]
    de8a:	600b      	str	r3, [r1, #0]
    de8c:	8b00      	ldrh	r0, [r0, #24]
    de8e:	8088      	strh	r0, [r1, #4]
    de90:	2001      	movs	r0, #1
    de92:	bd38      	pop	{r3, r4, r5, pc}
    de94:	b510      	push	{r4, lr}
    de96:	b109      	cbz	r1, de9c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    de98:	2100      	movs	r1, #0
    de9a:	e000      	b.n	de9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    de9c:	2102      	movs	r1, #2
    de9e:	1843      	adds	r3, r0, r1
    dea0:	7d1c      	ldrb	r4, [r3, #20]
    dea2:	4294      	cmp	r4, r2
    dea4:	d103      	bne.n	deae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    dea6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    deaa:	8b00      	ldrh	r0, [r0, #24]
    deac:	bd10      	pop	{r4, pc}
    deae:	7d5b      	ldrb	r3, [r3, #21]
    deb0:	4293      	cmp	r3, r2
    deb2:	d103      	bne.n	debc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    deb4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    deb8:	8b40      	ldrh	r0, [r0, #26]
    deba:	bd10      	pop	{r4, pc}
    debc:	2000      	movs	r0, #0
    debe:	bd10      	pop	{r4, pc}
    dec0:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    dec4:	d201      	bcs.n	deca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    dec6:	0841      	lsrs	r1, r0, #1
    dec8:	e000      	b.n	decc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    deca:	21ff      	movs	r1, #255	; 0xff
    decc:	1a40      	subs	r0, r0, r1
    dece:	f240 6172 	movw	r1, #1650	; 0x672
    ded2:	4288      	cmp	r0, r1
    ded4:	db00      	blt.n	ded8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    ded6:	4608      	mov	r0, r1
    ded8:	b280      	uxth	r0, r0
    deda:	4770      	bx	lr

0000dedc <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    dedc:	2101      	movs	r1, #1
    dede:	f7ff bf85 	b.w	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    dee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dee6:	4606      	mov	r6, r0
    dee8:	f342 0780 	sbfx	r7, r2, #2, #1
    deec:	7848      	ldrb	r0, [r1, #1]
    deee:	460c      	mov	r4, r1
    def0:	f022 0504 	bic.w	r5, r2, #4
    def4:	1c7f      	adds	r7, r7, #1
    def6:	b100      	cbz	r0, defa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    def8:	b90d      	cbnz	r5, defe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    defa:	4328      	orrs	r0, r5
    defc:	d104      	bne.n	df08 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    defe:	b145      	cbz	r5, df12 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    df00:	2100      	movs	r1, #0
    df02:	4620      	mov	r0, r4
    df04:	f7f7 fb88 	bl	5618 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    df08:	20ff      	movs	r0, #255	; 0xff
    df0a:	70a0      	strb	r0, [r4, #2]
    df0c:	b11f      	cbz	r7, df16 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    df0e:	2000      	movs	r0, #0
    df10:	e002      	b.n	df18 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    df12:	2101      	movs	r1, #1
    df14:	e7f5      	b.n	df02 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    df16:	2002      	movs	r0, #2
    df18:	1821      	adds	r1, r4, r0
    df1a:	7d09      	ldrb	r1, [r1, #20]
    df1c:	2903      	cmp	r1, #3
    df1e:	d102      	bne.n	df26 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    df20:	2d02      	cmp	r5, #2
    df22:	d000      	beq.n	df26 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    df24:	1c40      	adds	r0, r0, #1
    df26:	1822      	adds	r2, r4, r0
    df28:	2101      	movs	r1, #1
    df2a:	7511      	strb	r1, [r2, #20]
    df2c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    df30:	2200      	movs	r2, #0
    df32:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    df36:	830a      	strh	r2, [r1, #24]
    df38:	6840      	ldr	r0, [r0, #4]
    df3a:	70a2      	strb	r2, [r4, #2]
    df3c:	4631      	mov	r1, r6
    df3e:	f362 010f 	bfi	r1, r2, #0, #16
    df42:	e9c6 0100 	strd	r0, r1, [r6]
    df46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000df4a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    df4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df4e:	461e      	mov	r6, r3
    df50:	4613      	mov	r3, r2
    df52:	4604      	mov	r4, r0
    df54:	b109      	cbz	r1, df5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    df56:	2000      	movs	r0, #0
    df58:	e000      	b.n	df5c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    df5a:	2002      	movs	r0, #2
    df5c:	21ff      	movs	r1, #255	; 0xff
    df5e:	70a1      	strb	r1, [r4, #2]
    df60:	1821      	adds	r1, r4, r0
    df62:	7d0a      	ldrb	r2, [r1, #20]
    df64:	2a01      	cmp	r2, #1
    df66:	d003      	beq.n	df70 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    df68:	7d49      	ldrb	r1, [r1, #21]
    df6a:	2901      	cmp	r1, #1
    df6c:	d10c      	bne.n	df88 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    df6e:	1c40      	adds	r0, r0, #1
    df70:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    df74:	2700      	movs	r7, #0
    df76:	8b29      	ldrh	r1, [r5, #24]
    df78:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    df7c:	198a      	adds	r2, r1, r6
    df7e:	4562      	cmp	r2, ip
    df80:	d905      	bls.n	df8e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    df82:	4420      	add	r0, r4
    df84:	832f      	strh	r7, [r5, #24]
    df86:	7507      	strb	r7, [r0, #20]
    df88:	2000      	movs	r0, #0
    df8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df8e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    df92:	4632      	mov	r2, r6
    df94:	6840      	ldr	r0, [r0, #4]
    df96:	4408      	add	r0, r1
    df98:	4619      	mov	r1, r3
    df9a:	f7fe febc 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    df9e:	8b28      	ldrh	r0, [r5, #24]
    dfa0:	4430      	add	r0, r6
    dfa2:	8328      	strh	r0, [r5, #24]
    dfa4:	70a7      	strb	r7, [r4, #2]
    dfa6:	2001      	movs	r0, #1
    dfa8:	e7ef      	b.n	df8a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000dfaa <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    dfaa:	2202      	movs	r2, #2
    dfac:	2100      	movs	r1, #0
    dfae:	f7ff bf71 	b.w	de94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000dfb2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    dfb2:	b510      	push	{r4, lr}
    dfb4:	2101      	movs	r1, #1
    dfb6:	f7ff ff32 	bl	de1e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    dfba:	2800      	cmp	r0, #0
    dfbc:	d000      	beq.n	dfc0 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    dfbe:	2001      	movs	r0, #1
    dfc0:	bd10      	pop	{r4, pc}

0000dfc2 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    dfc2:	2201      	movs	r2, #1
    dfc4:	f7ff bf38 	b.w	de38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000dfc8 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    dfc8:	2200      	movs	r2, #0
    dfca:	f7ff bf35 	b.w	de38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    dfce:	b570      	push	{r4, r5, r6, lr}
    dfd0:	b109      	cbz	r1, dfd6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    dfd2:	2300      	movs	r3, #0
    dfd4:	e000      	b.n	dfd8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    dfd6:	2302      	movs	r3, #2
    dfd8:	21ff      	movs	r1, #255	; 0xff
    dfda:	7081      	strb	r1, [r0, #2]
    dfdc:	18c1      	adds	r1, r0, r3
    dfde:	2402      	movs	r4, #2
    dfe0:	7d0d      	ldrb	r5, [r1, #20]
    dfe2:	2d01      	cmp	r5, #1
    dfe4:	d007      	beq.n	dff6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    dfe6:	7d4d      	ldrb	r5, [r1, #21]
    dfe8:	2d01      	cmp	r5, #1
    dfea:	d009      	beq.n	e000 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    dfec:	f44f 718b 	mov.w	r1, #278	; 0x116
    dff0:	2009      	movs	r0, #9
    dff2:	f7f6 fec9 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dff6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dffa:	831a      	strh	r2, [r3, #24]
    dffc:	750c      	strb	r4, [r1, #20]
    dffe:	e003      	b.n	e008 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e000:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e004:	835a      	strh	r2, [r3, #26]
    e006:	754c      	strb	r4, [r1, #21]
    e008:	2100      	movs	r1, #0
    e00a:	7081      	strb	r1, [r0, #2]
    e00c:	bd70      	pop	{r4, r5, r6, pc}

0000e00e <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e00e:	2101      	movs	r1, #1
    e010:	7001      	strb	r1, [r0, #0]
    e012:	4770      	bx	lr

0000e014 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e014:	2201      	movs	r2, #1
    e016:	4611      	mov	r1, r2
    e018:	f7ff bf3c 	b.w	de94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e01c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e01c:	2201      	movs	r2, #1
    e01e:	2100      	movs	r1, #0
    e020:	f7ff bf38 	b.w	de94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e024 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e024:	2100      	movs	r1, #0
    e026:	f7ff bee1 	b.w	ddec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    e02a:	2800      	cmp	r0, #0
    e02c:	db09      	blt.n	e042 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e02e:	f000 021f 	and.w	r2, r0, #31
    e032:	2101      	movs	r1, #1
    e034:	4091      	lsls	r1, r2
    e036:	0940      	lsrs	r0, r0, #5
    e038:	0080      	lsls	r0, r0, #2
    e03a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e03e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e042:	4770      	bx	lr
    e044:	2800      	cmp	r0, #0
    e046:	db0d      	blt.n	e064 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e048:	f000 021f 	and.w	r2, r0, #31
    e04c:	2101      	movs	r1, #1
    e04e:	4091      	lsls	r1, r2
    e050:	0940      	lsrs	r0, r0, #5
    e052:	0080      	lsls	r0, r0, #2
    e054:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e058:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e05c:	f3bf 8f4f 	dsb	sy
    e060:	f3bf 8f6f 	isb	sy
    e064:	4770      	bx	lr
    e066:	b510      	push	{r4, lr}
    e068:	200e      	movs	r0, #14
    e06a:	f7ff ffeb 	bl	e044 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e06e:	200e      	movs	r0, #14
    e070:	f7ff ffdb 	bl	e02a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e074:	200f      	movs	r0, #15
    e076:	f7ff ffe5 	bl	e044 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e07e:	200f      	movs	r0, #15
    e080:	f7ff bfd3 	b.w	e02a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e084:	2800      	cmp	r0, #0
    e086:	db09      	blt.n	e09c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e088:	f000 021f 	and.w	r2, r0, #31
    e08c:	2101      	movs	r1, #1
    e08e:	4091      	lsls	r1, r2
    e090:	0940      	lsrs	r0, r0, #5
    e092:	0080      	lsls	r0, r0, #2
    e094:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e098:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e09c:	4770      	bx	lr
    e09e:	5840      	ldr	r0, [r0, r1]
    e0a0:	2800      	cmp	r0, #0
    e0a2:	d000      	beq.n	e0a6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e0a4:	2001      	movs	r0, #1
    e0a6:	4770      	bx	lr

0000e0a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e0a8:	b510      	push	{r4, lr}
    e0aa:	4604      	mov	r4, r0
    e0ac:	4620      	mov	r0, r4
    e0ae:	f7f7 fbb1 	bl	5814 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e0b2:	2811      	cmp	r0, #17
    e0b4:	d0fa      	beq.n	e0ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e0b6:	bd10      	pop	{r4, pc}

0000e0b8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e0b8:	b510      	push	{r4, lr}
    e0ba:	f7ff fff5 	bl	e0a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e0be:	2800      	cmp	r0, #0
    e0c0:	d003      	beq.n	e0ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e0c2:	21a0      	movs	r1, #160	; 0xa0
    e0c4:	201d      	movs	r0, #29
    e0c6:	f7f6 fe5f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ca:	bd10      	pop	{r4, pc}

0000e0cc <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e0cc:	b108      	cbz	r0, e0d2 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e0ce:	2000      	movs	r0, #0
    e0d0:	4770      	bx	lr
    e0d2:	2001      	movs	r0, #1
    e0d4:	4770      	bx	lr

0000e0d6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e0d6:	f7f7 bcef 	b.w	5ab8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e0da <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e0da:	f7f7 bcdd 	b.w	5a98 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e0de <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e0de:	b510      	push	{r4, lr}
    e0e0:	4604      	mov	r4, r0
    e0e2:	4608      	mov	r0, r1
    e0e4:	4619      	mov	r1, r3
    e0e6:	4294      	cmp	r4, r2
    e0e8:	d103      	bne.n	e0f2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x14>
    e0ea:	2206      	movs	r2, #6
    e0ec:	f7fe fe01 	bl	ccf2 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e0f0:	b108      	cbz	r0, e0f6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x18>
    e0f2:	2000      	movs	r0, #0
    e0f4:	bd10      	pop	{r4, pc}
    e0f6:	2001      	movs	r0, #1
    e0f8:	bd10      	pop	{r4, pc}

0000e0fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e0fa:	b510      	push	{r4, lr}
    e0fc:	2900      	cmp	r1, #0
    e0fe:	4604      	mov	r4, r0
    e100:	f04f 0106 	mov.w	r1, #6
    e104:	d002      	beq.n	e10c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e106:	f7f6 fecb 	bl	4ea0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e10a:	e001      	b.n	e110 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e10c:	f7f6 fed6 	bl	4ebc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e110:	7960      	ldrb	r0, [r4, #5]
    e112:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e116:	7160      	strb	r0, [r4, #5]
    e118:	bd10      	pop	{r4, pc}

0000e11a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e11a:	4770      	bx	lr

0000e11c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e11c:	b530      	push	{r4, r5, lr}
    e11e:	460c      	mov	r4, r1
    e120:	4605      	mov	r5, r0
    e122:	b08d      	sub	sp, #52	; 0x34
    e124:	f04f 0103 	mov.w	r1, #3
    e128:	f104 0003 	add.w	r0, r4, #3
    e12c:	b112      	cbz	r2, e134 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e12e:	f7f6 feb7 	bl	4ea0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e132:	e001      	b.n	e138 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e134:	f7f6 fec2 	bl	4ebc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e138:	7960      	ldrb	r0, [r4, #5]
    e13a:	220d      	movs	r2, #13
    e13c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e140:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e144:	7160      	strb	r0, [r4, #5]
    e146:	2100      	movs	r1, #0
    e148:	a804      	add	r0, sp, #16
    e14a:	f7fe fe5e 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e14e:	78e0      	ldrb	r0, [r4, #3]
    e150:	f88d 001f 	strb.w	r0, [sp, #31]
    e154:	7920      	ldrb	r0, [r4, #4]
    e156:	f88d 001e 	strb.w	r0, [sp, #30]
    e15a:	7960      	ldrb	r0, [r4, #5]
    e15c:	f88d 001d 	strb.w	r0, [sp, #29]
    e160:	2210      	movs	r2, #16
    e162:	4629      	mov	r1, r5
    e164:	4668      	mov	r0, sp
    e166:	f7fe fdd6 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e16a:	4668      	mov	r0, sp
    e16c:	f7ff ffa4 	bl	e0b8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e170:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e174:	7020      	strb	r0, [r4, #0]
    e176:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e17a:	7060      	strb	r0, [r4, #1]
    e17c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e180:	70a0      	strb	r0, [r4, #2]
    e182:	b00d      	add	sp, #52	; 0x34
    e184:	bd30      	pop	{r4, r5, pc}

0000e186 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e186:	f7f8 b87b 	b.w	6280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    e18a:	07c1      	lsls	r1, r0, #31
    e18c:	d001      	beq.n	e192 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e18e:	2001      	movs	r0, #1
    e190:	4770      	bx	lr
    e192:	0780      	lsls	r0, r0, #30
    e194:	d501      	bpl.n	e19a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e196:	2002      	movs	r0, #2
    e198:	4770      	bx	lr
    e19a:	2000      	movs	r0, #0
    e19c:	4770      	bx	lr
    e19e:	b510      	push	{r4, lr}
    e1a0:	2801      	cmp	r0, #1
    e1a2:	d008      	beq.n	e1b6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e1a4:	2802      	cmp	r0, #2
    e1a6:	d004      	beq.n	e1b2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    e1a8:	f240 31be 	movw	r1, #958	; 0x3be
    e1ac:	2006      	movs	r0, #6
    e1ae:	f7f6 fdeb 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1b2:	2001      	movs	r0, #1
    e1b4:	bd10      	pop	{r4, pc}
    e1b6:	2000      	movs	r0, #0
    e1b8:	bd10      	pop	{r4, pc}
    e1ba:	2900      	cmp	r1, #0
    e1bc:	d004      	beq.n	e1c8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    e1be:	2801      	cmp	r0, #1
    e1c0:	d003      	beq.n	e1ca <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e1c2:	2901      	cmp	r1, #1
    e1c4:	d001      	beq.n	e1ca <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e1c6:	2002      	movs	r0, #2
    e1c8:	4770      	bx	lr
    e1ca:	2001      	movs	r0, #1
    e1cc:	4770      	bx	lr
    e1ce:	f7ff bc6a 	b.w	daa6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e1d2 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e1d2:	2101      	movs	r1, #1
    e1d4:	f7f8 bbe0 	b.w	6998 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e1d8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e1d8:	b510      	push	{r4, lr}
    e1da:	f002 fc8c 	bl	10af6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e1de:	b118      	cbz	r0, e1e8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1e4:	f7fd b968 	b.w	b4b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e1e8:	20ff      	movs	r0, #255	; 0xff
    e1ea:	bd10      	pop	{r4, pc}

0000e1ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e1ec:	b510      	push	{r4, lr}
    e1ee:	f7f8 fc1b 	bl	6a28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e1f2:	2810      	cmp	r0, #16
    e1f4:	d003      	beq.n	e1fe <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e1f6:	f7f8 fbe7 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e1fa:	2810      	cmp	r0, #16
    e1fc:	d100      	bne.n	e200 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e1fe:	2008      	movs	r0, #8
    e200:	bd10      	pop	{r4, pc}

0000e202 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e202:	b510      	push	{r4, lr}
    e204:	f7f8 fc10 	bl	6a28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e208:	2810      	cmp	r0, #16
    e20a:	d007      	beq.n	e21c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e20c:	f7f8 fbdc 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e210:	2810      	cmp	r0, #16
    e212:	d003      	beq.n	e21c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e214:	f7f8 fc4e 	bl	6ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    e218:	2001      	movs	r0, #1
    e21a:	bd10      	pop	{r4, pc}
    e21c:	2000      	movs	r0, #0
    e21e:	bd10      	pop	{r4, pc}

0000e220 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e220:	b510      	push	{r4, lr}
    e222:	f7f8 fc01 	bl	6a28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e226:	2810      	cmp	r0, #16
    e228:	d003      	beq.n	e232 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e22a:	f7f8 fc8b 	bl	6b44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    e22e:	2001      	movs	r0, #1
    e230:	bd10      	pop	{r4, pc}
    e232:	2000      	movs	r0, #0
    e234:	bd10      	pop	{r4, pc}

0000e236 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e236:	b570      	push	{r4, r5, r6, lr}
    e238:	460e      	mov	r6, r1
    e23a:	b08c      	sub	sp, #48	; 0x30
    e23c:	4614      	mov	r4, r2
    e23e:	4601      	mov	r1, r0
    e240:	461d      	mov	r5, r3
    e242:	2210      	movs	r2, #16
    e244:	4668      	mov	r0, sp
    e246:	f000 f91a 	bl	e47e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e24a:	2210      	movs	r2, #16
    e24c:	4631      	mov	r1, r6
    e24e:	a804      	add	r0, sp, #16
    e250:	f000 f915 	bl	e47e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e254:	4668      	mov	r0, sp
    e256:	f7ff ff2f 	bl	e0b8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e25a:	a908      	add	r1, sp, #32
    e25c:	f04f 0210 	mov.w	r2, #16
    e260:	4628      	mov	r0, r5
    e262:	b11c      	cbz	r4, e26c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e264:	f000 f90b 	bl	e47e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e268:	b00c      	add	sp, #48	; 0x30
    e26a:	bd70      	pop	{r4, r5, r6, pc}
    e26c:	f7fe fd53 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e270:	e7fa      	b.n	e268 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e272:	b510      	push	{r4, lr}
    e274:	460c      	mov	r4, r1
    e276:	2100      	movs	r1, #0
    e278:	f7ff fd72 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e27c:	6060      	str	r0, [r4, #4]
    e27e:	b118      	cbz	r0, e288 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e280:	2001      	movs	r0, #1
    e282:	7020      	strb	r0, [r4, #0]
    e284:	2000      	movs	r0, #0
    e286:	bd10      	pop	{r4, pc}
    e288:	2002      	movs	r0, #2
    e28a:	bd10      	pop	{r4, pc}

0000e28c <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e28c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e290:	4348      	muls	r0, r1
    e292:	4770      	bx	lr

0000e294 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e294:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e298:	fbb0 f0f1 	udiv	r0, r0, r1
    e29c:	b280      	uxth	r0, r0
    e29e:	4770      	bx	lr

0000e2a0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e2a0:	b570      	push	{r4, r5, r6, lr}
    e2a2:	4604      	mov	r4, r0
    e2a4:	4290      	cmp	r0, r2
    e2a6:	d20b      	bcs.n	e2c0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e2a8:	1b10      	subs	r0, r2, r4
    e2aa:	2865      	cmp	r0, #101	; 0x65
    e2ac:	d200      	bcs.n	e2b0 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e2ae:	2065      	movs	r0, #101	; 0x65
    e2b0:	1825      	adds	r5, r4, r0
    e2b2:	428d      	cmp	r5, r1
    e2b4:	d803      	bhi.n	e2be <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e2b6:	2103      	movs	r1, #3
    e2b8:	f7f4 f88a 	bl	23d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e2bc:	b108      	cbz	r0, e2c2 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e2be:	4620      	mov	r0, r4
    e2c0:	bd70      	pop	{r4, r5, r6, pc}
    e2c2:	4628      	mov	r0, r5
    e2c4:	bd70      	pop	{r4, r5, r6, pc}

0000e2c6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e2c6:	b510      	push	{r4, lr}
    e2c8:	f1a2 030f 	sub.w	r3, r2, #15
    e2cc:	290c      	cmp	r1, #12
    e2ce:	d244      	bcs.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e2d0:	e8df f001 	tbb	[pc, r1]
    e2d4:	120d0806 	.word	0x120d0806
    e2d8:	241c1815 	.word	0x241c1815
    e2dc:	312a4127 	.word	0x312a4127
    e2e0:	b3c2      	cbz	r2, e354 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    e2e2:	e03a      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e2e4:	2a07      	cmp	r2, #7
    e2e6:	d03a      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e2e8:	2a08      	cmp	r2, #8
    e2ea:	d038      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e2ec:	e035      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e2ee:	2a0c      	cmp	r2, #12
    e2f0:	d035      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e2f2:	2a0b      	cmp	r2, #11
    e2f4:	d033      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e2f6:	e030      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e2f8:	2a0d      	cmp	r2, #13
    e2fa:	d030      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e2fc:	e02d      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e2fe:	2b0c      	cmp	r3, #12
    e300:	d92d      	bls.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e302:	e02a      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e304:	3a10      	subs	r2, #16
    e306:	2a0b      	cmp	r2, #11
    e308:	d929      	bls.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e30a:	e026      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e30c:	2b03      	cmp	r3, #3
    e30e:	d926      	bls.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e310:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    e314:	b308      	cbz	r0, e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e316:	2a1b      	cmp	r2, #27
    e318:	d921      	bls.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e31a:	e01e      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e31c:	2a04      	cmp	r2, #4
    e31e:	d01e      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e320:	e01b      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e322:	2a06      	cmp	r2, #6
    e324:	d01b      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e326:	e018      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e328:	2a1c      	cmp	r2, #28
    e32a:	d018      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e32c:	2a1d      	cmp	r2, #29
    e32e:	d016      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e330:	2a1e      	cmp	r2, #30
    e332:	d014      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e334:	e011      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e336:	2a1f      	cmp	r2, #31
    e338:	d011      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e33a:	2a20      	cmp	r2, #32
    e33c:	d00f      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e33e:	2a21      	cmp	r2, #33	; 0x21
    e340:	d00d      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e342:	2a22      	cmp	r2, #34	; 0x22
    e344:	d00b      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e346:	2a23      	cmp	r2, #35	; 0x23
    e348:	d009      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e34a:	2a24      	cmp	r2, #36	; 0x24
    e34c:	d007      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e34e:	2a26      	cmp	r2, #38	; 0x26
    e350:	d005      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e352:	e002      	b.n	e35a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e354:	e003      	b.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e356:	2a0e      	cmp	r2, #14
    e358:	d001      	beq.n	e35e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e35a:	2000      	movs	r0, #0
    e35c:	bd10      	pop	{r4, pc}
    e35e:	2001      	movs	r0, #1
    e360:	bd10      	pop	{r4, pc}

0000e362 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e362:	280c      	cmp	r0, #12
    e364:	d013      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e366:	280b      	cmp	r0, #11
    e368:	d011      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e36a:	280d      	cmp	r0, #13
    e36c:	d00f      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e36e:	281f      	cmp	r0, #31
    e370:	d00d      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e372:	2820      	cmp	r0, #32
    e374:	d00b      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e376:	2821      	cmp	r0, #33	; 0x21
    e378:	d009      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e37a:	2822      	cmp	r0, #34	; 0x22
    e37c:	d007      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e37e:	2823      	cmp	r0, #35	; 0x23
    e380:	d005      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e382:	2824      	cmp	r0, #36	; 0x24
    e384:	d003      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e386:	2826      	cmp	r0, #38	; 0x26
    e388:	d001      	beq.n	e38e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e38a:	2000      	movs	r0, #0
    e38c:	4770      	bx	lr
    e38e:	2001      	movs	r0, #1
    e390:	4770      	bx	lr

0000e392 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e392:	f011 0f0c 	tst.w	r1, #12
    e396:	d016      	beq.n	e3c6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e398:	074a      	lsls	r2, r1, #29
    e39a:	f44f 7116 	mov.w	r1, #600	; 0x258
    e39e:	2a00      	cmp	r2, #0
    e3a0:	da02      	bge.n	e3a8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e3a2:	f04f 0210 	mov.w	r2, #16
    e3a6:	e001      	b.n	e3ac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e3a8:	f04f 0240 	mov.w	r2, #64	; 0x40
    e3ac:	da01      	bge.n	e3b2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e3ae:	f04f 0196 	mov.w	r1, #150	; 0x96
    e3b2:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e3b6:	eba0 0301 	sub.w	r3, r0, r1
    e3ba:	4288      	cmp	r0, r1
    e3bc:	d910      	bls.n	e3e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e3be:	fb93 f0f2 	sdiv	r0, r3, r2
    e3c2:	b280      	uxth	r0, r0
    e3c4:	4770      	bx	lr
    e3c6:	2902      	cmp	r1, #2
    e3c8:	d002      	beq.n	e3d0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    e3ca:	2870      	cmp	r0, #112	; 0x70
    e3cc:	d80a      	bhi.n	e3e4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    e3ce:	e007      	b.n	e3e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e3d0:	283c      	cmp	r0, #60	; 0x3c
    e3d2:	d905      	bls.n	e3e0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e3d4:	383c      	subs	r0, #60	; 0x3c
    e3d6:	17c1      	asrs	r1, r0, #31
    e3d8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e3dc:	1080      	asrs	r0, r0, #2
    e3de:	e7f0      	b.n	e3c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e3e0:	2000      	movs	r0, #0
    e3e2:	e7ee      	b.n	e3c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e3e4:	3870      	subs	r0, #112	; 0x70
    e3e6:	17c1      	asrs	r1, r0, #31
    e3e8:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e3ec:	10c0      	asrs	r0, r0, #3
    e3ee:	e7e8      	b.n	e3c2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000e3f0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e3f0:	6809      	ldr	r1, [r1, #0]
    e3f2:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e3f6:	4770      	bx	lr

0000e3f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    e3f8:	07c1      	lsls	r1, r0, #31
    e3fa:	d001      	beq.n	e400 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    e3fc:	2001      	movs	r0, #1
    e3fe:	4770      	bx	lr
    e400:	0781      	lsls	r1, r0, #30
    e402:	d501      	bpl.n	e408 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    e404:	2002      	movs	r0, #2
    e406:	4770      	bx	lr
    e408:	0740      	lsls	r0, r0, #29
    e40a:	d501      	bpl.n	e410 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    e40c:	2008      	movs	r0, #8
    e40e:	4770      	bx	lr
    e410:	2000      	movs	r0, #0
    e412:	4770      	bx	lr

0000e414 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e414:	b510      	push	{r4, lr}
    e416:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e41a:	2901      	cmp	r1, #1
    e41c:	d006      	beq.n	e42c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e41e:	2902      	cmp	r1, #2
    e420:	d005      	beq.n	e42e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e422:	f240 31a1 	movw	r1, #929	; 0x3a1
    e426:	2029      	movs	r0, #41	; 0x29
    e428:	f7f6 fcae 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e42c:	b108      	cbz	r0, e432 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e42e:	4610      	mov	r0, r2
    e430:	bd10      	pop	{r4, pc}
    e432:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e436:	bd10      	pop	{r4, pc}

0000e438 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e43c:	460c      	mov	r4, r1
    e43e:	4605      	mov	r5, r0
    e440:	68c6      	ldr	r6, [r0, #12]
    e442:	f7f4 fbdf 	bl	2c04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e446:	b198      	cbz	r0, e470 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    e448:	b1bc      	cbz	r4, e47a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e44a:	4630      	mov	r0, r6
    e44c:	68e9      	ldr	r1, [r5, #12]
    e44e:	f7f4 f8c9 	bl	25e4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e452:	2800      	cmp	r0, #0
    e454:	dd11      	ble.n	e47a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e456:	4420      	add	r0, r4
    e458:	1e40      	subs	r0, r0, #1
    e45a:	fbb0 f7f4 	udiv	r7, r0, r4
    e45e:	fb07 f104 	mul.w	r1, r7, r4
    e462:	4630      	mov	r0, r6
    e464:	f7f4 f88c 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e468:	60e8      	str	r0, [r5, #12]
    e46a:	4638      	mov	r0, r7
    e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e470:	f240 2126 	movw	r1, #550	; 0x226
    e474:	2029      	movs	r0, #41	; 0x29
    e476:	f7f6 fc87 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e47a:	2000      	movs	r0, #0
    e47c:	e7f6      	b.n	e46c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000e47e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e47e:	b530      	push	{r4, r5, lr}
    e480:	4613      	mov	r3, r2
    e482:	e006      	b.n	e492 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e484:	18cc      	adds	r4, r1, r3
    e486:	1ad5      	subs	r5, r2, r3
    e488:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e48c:	1e5b      	subs	r3, r3, #1
    e48e:	5544      	strb	r4, [r0, r5]
    e490:	b2db      	uxtb	r3, r3
    e492:	2b00      	cmp	r3, #0
    e494:	d1f6      	bne.n	e484 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e496:	bd30      	pop	{r4, r5, pc}

0000e498 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e498:	b538      	push	{r3, r4, r5, lr}
    e49a:	4605      	mov	r5, r0
    e49c:	460c      	mov	r4, r1
    e49e:	4668      	mov	r0, sp
    e4a0:	f7fd fd16 	bl	bed0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e4a4:	b310      	cbz	r0, e4ec <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e4a6:	f99d 0000 	ldrsb.w	r0, [sp]
    e4aa:	7260      	strb	r0, [r4, #9]
    e4ac:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e4b0:	72a1      	strb	r1, [r4, #10]
    e4b2:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e4b6:	2200      	movs	r2, #0
    e4b8:	1a41      	subs	r1, r0, r1
    e4ba:	d500      	bpl.n	e4be <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e4bc:	4249      	negs	r1, r1
    e4be:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e4c2:	428b      	cmp	r3, r1
    e4c4:	dc10      	bgt.n	e4e8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e4c6:	2bff      	cmp	r3, #255	; 0xff
    e4c8:	d00e      	beq.n	e4e8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e4ca:	7b21      	ldrb	r1, [r4, #12]
    e4cc:	1c49      	adds	r1, r1, #1
    e4ce:	b2c9      	uxtb	r1, r1
    e4d0:	7321      	strb	r1, [r4, #12]
    e4d2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e4d6:	4299      	cmp	r1, r3
    e4d8:	d802      	bhi.n	e4e0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e4da:	7ae1      	ldrb	r1, [r4, #11]
    e4dc:	297f      	cmp	r1, #127	; 0x7f
    e4de:	d103      	bne.n	e4e8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e4e0:	72e0      	strb	r0, [r4, #11]
    e4e2:	2000      	movs	r0, #0
    e4e4:	7320      	strb	r0, [r4, #12]
    e4e6:	2201      	movs	r2, #1
    e4e8:	4610      	mov	r0, r2
    e4ea:	bd38      	pop	{r3, r4, r5, pc}
    e4ec:	207f      	movs	r0, #127	; 0x7f
    e4ee:	7260      	strb	r0, [r4, #9]
    e4f0:	2000      	movs	r0, #0
    e4f2:	bd38      	pop	{r3, r4, r5, pc}

0000e4f4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e4f4:	2300      	movs	r3, #0
    e4f6:	6283      	str	r3, [r0, #40]	; 0x28
    e4f8:	8602      	strh	r2, [r0, #48]	; 0x30
    e4fa:	f240 2371 	movw	r3, #625	; 0x271
    e4fe:	435a      	muls	r2, r3
    e500:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e504:	1e52      	subs	r2, r2, #1
    e506:	fbb2 f1f1 	udiv	r1, r2, r1
    e50a:	62c1      	str	r1, [r0, #44]	; 0x2c
    e50c:	4770      	bx	lr

0000e50e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e50e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e512:	4607      	mov	r7, r0
    e514:	4690      	mov	r8, r2
    e516:	468b      	mov	fp, r1
    e518:	2601      	movs	r6, #1
    e51a:	4608      	mov	r0, r1
    e51c:	f000 f946 	bl	e7ac <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e520:	4682      	mov	sl, r0
    e522:	4658      	mov	r0, fp
    e524:	f000 f94e 	bl	e7c4 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e528:	4681      	mov	r9, r0
    e52a:	f7ff ff65 	bl	e3f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e52e:	4604      	mov	r4, r0
    e530:	4650      	mov	r0, sl
    e532:	f7ff ff61 	bl	e3f8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e536:	4605      	mov	r5, r0
    e538:	ea54 0005 	orrs.w	r0, r4, r5
    e53c:	d100      	bne.n	e540 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e53e:	2600      	movs	r6, #0
    e540:	f7fc ff3c 	bl	b3bc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e544:	ea10 0f09 	tst.w	r0, r9
    e548:	d100      	bne.n	e54c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e54a:	2400      	movs	r4, #0
    e54c:	f7fc ff36 	bl	b3bc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e550:	ea10 0f0a 	tst.w	r0, sl
    e554:	d100      	bne.n	e558 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e556:	2500      	movs	r5, #0
    e558:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    e55c:	42a0      	cmp	r0, r4
    e55e:	d100      	bne.n	e562 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e560:	2400      	movs	r4, #0
    e562:	f888 4000 	strb.w	r4, [r8]
    e566:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    e56a:	42a8      	cmp	r0, r5
    e56c:	d100      	bne.n	e570 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e56e:	2500      	movs	r5, #0
    e570:	f888 5001 	strb.w	r5, [r8, #1]
    e574:	b974      	cbnz	r4, e594 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e576:	b96d      	cbnz	r5, e594 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e578:	4658      	mov	r0, fp
    e57a:	f000 f921 	bl	e7c0 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e57e:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    e582:	1a40      	subs	r0, r0, r1
    e584:	b200      	sxth	r0, r0
    e586:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e58a:	4288      	cmp	r0, r1
    e58c:	dc01      	bgt.n	e592 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e58e:	2800      	cmp	r0, #0
    e590:	dc00      	bgt.n	e594 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e592:	2600      	movs	r6, #0
    e594:	4630      	mov	r0, r6
    e596:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e59a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e59a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e59e:	4348      	muls	r0, r1
    e5a0:	4770      	bx	lr

0000e5a2 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e5a2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e5a6:	fb10 f001 	smulbb	r0, r0, r1
    e5aa:	4770      	bx	lr

0000e5ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e5ac:	b510      	push	{r4, lr}
    e5ae:	2300      	movs	r3, #0
    e5b0:	461a      	mov	r2, r3
    e5b2:	e003      	b.n	e5bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e5b4:	5c84      	ldrb	r4, [r0, r2]
    e5b6:	4323      	orrs	r3, r4
    e5b8:	1c52      	adds	r2, r2, #1
    e5ba:	b2d2      	uxtb	r2, r2
    e5bc:	428a      	cmp	r2, r1
    e5be:	d3f9      	bcc.n	e5b4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e5c0:	b10b      	cbz	r3, e5c6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e5c2:	2000      	movs	r0, #0
    e5c4:	bd10      	pop	{r4, pc}
    e5c6:	2001      	movs	r0, #1
    e5c8:	bd10      	pop	{r4, pc}

0000e5ca <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e5ca:	b510      	push	{r4, lr}
    e5cc:	4604      	mov	r4, r0
    e5ce:	f890 0020 	ldrb.w	r0, [r0, #32]
    e5d2:	b108      	cbz	r0, e5d8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e5d4:	2825      	cmp	r0, #37	; 0x25
    e5d6:	d901      	bls.n	e5dc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e5d8:	2012      	movs	r0, #18
    e5da:	bd10      	pop	{r4, pc}
    e5dc:	b12a      	cbz	r2, e5ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e5de:	7d60      	ldrb	r0, [r4, #21]
    e5e0:	b128      	cbz	r0, e5ee <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e5e2:	2801      	cmp	r0, #1
    e5e4:	d009      	beq.n	e5fa <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e5e6:	201f      	movs	r0, #31
    e5e8:	bd10      	pop	{r4, pc}
    e5ea:	2000      	movs	r0, #0
    e5ec:	bd10      	pop	{r4, pc}
    e5ee:	4620      	mov	r0, r4
    e5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5f4:	4611      	mov	r1, r2
    e5f6:	f7f8 bb95 	b.w	6d24 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e5fa:	88a2      	ldrh	r2, [r4, #4]
    e5fc:	6949      	ldr	r1, [r1, #20]
    e5fe:	f104 0015 	add.w	r0, r4, #21
    e602:	f7f8 fb3b 	bl	6c7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e606:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e60a:	e7ee      	b.n	e5ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e60c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e60c:	b530      	push	{r4, r5, lr}
    e60e:	1c42      	adds	r2, r0, #1
    e610:	428a      	cmp	r2, r1
    e612:	d004      	beq.n	e61e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e614:	680a      	ldr	r2, [r1, #0]
    e616:	f8c0 2001 	str.w	r2, [r0, #1]
    e61a:	7909      	ldrb	r1, [r1, #4]
    e61c:	7141      	strb	r1, [r0, #5]
    e61e:	7941      	ldrb	r1, [r0, #5]
    e620:	f001 011f 	and.w	r1, r1, #31
    e624:	7141      	strb	r1, [r0, #5]
    e626:	2100      	movs	r1, #0
    e628:	72c1      	strb	r1, [r0, #11]
    e62a:	1843      	adds	r3, r0, r1
    e62c:	1c49      	adds	r1, r1, #1
    e62e:	785c      	ldrb	r4, [r3, #1]
    e630:	b2c9      	uxtb	r1, r1
    e632:	f004 0201 	and.w	r2, r4, #1
    e636:	0864      	lsrs	r4, r4, #1
    e638:	f004 0501 	and.w	r5, r4, #1
    e63c:	4415      	add	r5, r2
    e63e:	0862      	lsrs	r2, r4, #1
    e640:	f002 0401 	and.w	r4, r2, #1
    e644:	442c      	add	r4, r5
    e646:	0852      	lsrs	r2, r2, #1
    e648:	f002 0501 	and.w	r5, r2, #1
    e64c:	442c      	add	r4, r5
    e64e:	0852      	lsrs	r2, r2, #1
    e650:	f002 0501 	and.w	r5, r2, #1
    e654:	442c      	add	r4, r5
    e656:	0852      	lsrs	r2, r2, #1
    e658:	f002 0501 	and.w	r5, r2, #1
    e65c:	442c      	add	r4, r5
    e65e:	0852      	lsrs	r2, r2, #1
    e660:	f002 0501 	and.w	r5, r2, #1
    e664:	442c      	add	r4, r5
    e666:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e66a:	719a      	strb	r2, [r3, #6]
    e66c:	7ac3      	ldrb	r3, [r0, #11]
    e66e:	2905      	cmp	r1, #5
    e670:	441a      	add	r2, r3
    e672:	72c2      	strb	r2, [r0, #11]
    e674:	d3d9      	bcc.n	e62a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e676:	bd30      	pop	{r4, r5, pc}
    e678:	b570      	push	{r4, r5, r6, lr}
    e67a:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e67e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e682:	f012 0fff 	tst.w	r2, #255	; 0xff
    e686:	f023 031f 	bic.w	r3, r3, #31
    e68a:	d108      	bne.n	e69e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e68c:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e690:	b92c      	cbnz	r4, e69e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e692:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e696:	b914      	cbnz	r4, e69e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e698:	0e12      	lsrs	r2, r2, #24
    e69a:	d100      	bne.n	e69e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e69c:	b35b      	cbz	r3, e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e69e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e6a2:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e6a6:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e6aa:	7d83      	ldrb	r3, [r0, #22]
    e6ac:	b141      	cbz	r1, e6c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e6ae:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e6b2:	d905      	bls.n	e6c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e6b4:	f640 5107 	movw	r1, #3335	; 0xd07
    e6b8:	428a      	cmp	r2, r1
    e6ba:	d801      	bhi.n	e6c0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e6bc:	2101      	movs	r1, #1
    e6be:	e000      	b.n	e6c2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    e6c0:	2100      	movs	r1, #0
    e6c2:	7846      	ldrb	r6, [r0, #1]
    e6c4:	2e22      	cmp	r6, #34	; 0x22
    e6c6:	d116      	bne.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6c8:	b959      	cbnz	r1, e6e2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    e6ca:	1f91      	subs	r1, r2, #6
    e6cc:	f640 467a 	movw	r6, #3194	; 0xc7a
    e6d0:	42b1      	cmp	r1, r6
    e6d2:	d810      	bhi.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6d4:	b17b      	cbz	r3, e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6d6:	2b08      	cmp	r3, #8
    e6d8:	d80d      	bhi.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6da:	4293      	cmp	r3, r2
    e6dc:	d20b      	bcs.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6de:	4294      	cmp	r4, r2
    e6e0:	d809      	bhi.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6e2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e6e6:	d206      	bcs.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6e8:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e6ec:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e6f0:	d801      	bhi.n	e6f6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6f2:	2001      	movs	r0, #1
    e6f4:	bd70      	pop	{r4, r5, r6, pc}
    e6f6:	2000      	movs	r0, #0
    e6f8:	bd70      	pop	{r4, r5, r6, pc}

0000e6fa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e6fa:	b570      	push	{r4, r5, r6, lr}
    e6fc:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e700:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e704:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e708:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e70c:	88c0      	ldrh	r0, [r0, #6]
    e70e:	b131      	cbz	r1, e71e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e710:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e714:	d903      	bls.n	e71e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e716:	f640 5107 	movw	r1, #3335	; 0xd07
    e71a:	428a      	cmp	r2, r1
    e71c:	d90b      	bls.n	e736 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e71e:	1f91      	subs	r1, r2, #6
    e720:	f640 467a 	movw	r6, #3194	; 0xc7a
    e724:	42b1      	cmp	r1, r6
    e726:	d80e      	bhi.n	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e728:	b16b      	cbz	r3, e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e72a:	2b08      	cmp	r3, #8
    e72c:	d80b      	bhi.n	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e72e:	4293      	cmp	r3, r2
    e730:	d209      	bcs.n	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e732:	4294      	cmp	r4, r2
    e734:	d807      	bhi.n	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e736:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e73a:	d204      	bcs.n	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e73c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e740:	d801      	bhi.n	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e742:	2001      	movs	r0, #1
    e744:	bd70      	pop	{r4, r5, r6, pc}
    e746:	2000      	movs	r0, #0
    e748:	bd70      	pop	{r4, r5, r6, pc}

0000e74a <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e74a:	6842      	ldr	r2, [r0, #4]
    e74c:	600a      	str	r2, [r1, #0]
    e74e:	7a00      	ldrb	r0, [r0, #8]
    e750:	7108      	strb	r0, [r1, #4]
    e752:	4770      	bx	lr

0000e754 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e754:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e758:	4770      	bx	lr

0000e75a <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e75a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e75e:	4770      	bx	lr

0000e760 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e760:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e764:	4770      	bx	lr

0000e766 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e766:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e76a:	4770      	bx	lr

0000e76c <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e76c:	8980      	ldrh	r0, [r0, #12]
    e76e:	8008      	strh	r0, [r1, #0]
    e770:	4770      	bx	lr

0000e772 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e772:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e776:	6008      	str	r0, [r1, #0]
    e778:	4770      	bx	lr

0000e77a <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e77a:	6842      	ldr	r2, [r0, #4]
    e77c:	600a      	str	r2, [r1, #0]
    e77e:	6880      	ldr	r0, [r0, #8]
    e780:	6048      	str	r0, [r1, #4]
    e782:	4770      	bx	lr

0000e784 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e784:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e788:	600a      	str	r2, [r1, #0]
    e78a:	6840      	ldr	r0, [r0, #4]
    e78c:	6048      	str	r0, [r1, #4]
    e78e:	4770      	bx	lr

0000e790 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e790:	6842      	ldr	r2, [r0, #4]
    e792:	600a      	str	r2, [r1, #0]
    e794:	6880      	ldr	r0, [r0, #8]
    e796:	6048      	str	r0, [r1, #4]
    e798:	4770      	bx	lr

0000e79a <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    e79a:	6842      	ldr	r2, [r0, #4]
    e79c:	600a      	str	r2, [r1, #0]
    e79e:	6880      	ldr	r0, [r0, #8]
    e7a0:	6048      	str	r0, [r1, #4]
    e7a2:	4770      	bx	lr

0000e7a4 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e7a4:	7800      	ldrb	r0, [r0, #0]
    e7a6:	f000 0003 	and.w	r0, r0, #3
    e7aa:	4770      	bx	lr

0000e7ac <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e7ac:	7900      	ldrb	r0, [r0, #4]
    e7ae:	4770      	bx	lr

0000e7b0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e7b0:	8880      	ldrh	r0, [r0, #4]
    e7b2:	4770      	bx	lr

0000e7b4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e7b4:	88c0      	ldrh	r0, [r0, #6]
    e7b6:	4770      	bx	lr

0000e7b8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e7b8:	8900      	ldrh	r0, [r0, #8]
    e7ba:	4770      	bx	lr

0000e7bc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e7bc:	8940      	ldrh	r0, [r0, #10]
    e7be:	4770      	bx	lr

0000e7c0 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e7c0:	88c0      	ldrh	r0, [r0, #6]
    e7c2:	4770      	bx	lr

0000e7c4 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e7c4:	7940      	ldrb	r0, [r0, #5]
    e7c6:	4770      	bx	lr

0000e7c8 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e7c8:	7900      	ldrb	r0, [r0, #4]
    e7ca:	4770      	bx	lr

0000e7cc <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e7cc:	7900      	ldrb	r0, [r0, #4]
    e7ce:	4770      	bx	lr

0000e7d0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e7d0:	8901      	ldrh	r1, [r0, #8]
    e7d2:	291b      	cmp	r1, #27
    e7d4:	d30c      	bcc.n	e7f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e7d6:	8941      	ldrh	r1, [r0, #10]
    e7d8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e7dc:	4291      	cmp	r1, r2
    e7de:	d307      	bcc.n	e7f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e7e0:	8881      	ldrh	r1, [r0, #4]
    e7e2:	291b      	cmp	r1, #27
    e7e4:	d304      	bcc.n	e7f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e7e6:	88c0      	ldrh	r0, [r0, #6]
    e7e8:	4290      	cmp	r0, r2
    e7ea:	d301      	bcc.n	e7f0 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e7ec:	2001      	movs	r0, #1
    e7ee:	4770      	bx	lr
    e7f0:	2000      	movs	r0, #0
    e7f2:	4770      	bx	lr

0000e7f4 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e7f4:	b510      	push	{r4, lr}
    e7f6:	29fb      	cmp	r1, #251	; 0xfb
    e7f8:	d904      	bls.n	e804 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e7fa:	f240 5193 	movw	r1, #1427	; 0x593
    e7fe:	202a      	movs	r0, #42	; 0x2a
    e800:	f7f6 fac2 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e804:	7041      	strb	r1, [r0, #1]
    e806:	bd10      	pop	{r4, pc}

0000e808 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e808:	7901      	ldrb	r1, [r0, #4]
    e80a:	0749      	lsls	r1, r1, #29
    e80c:	d004      	beq.n	e818 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e80e:	7940      	ldrb	r0, [r0, #5]
    e810:	0740      	lsls	r0, r0, #29
    e812:	d001      	beq.n	e818 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e814:	2001      	movs	r0, #1
    e816:	4770      	bx	lr
    e818:	2000      	movs	r0, #0
    e81a:	4770      	bx	lr

0000e81c <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e81c:	7900      	ldrb	r0, [r0, #4]
    e81e:	4770      	bx	lr

0000e820 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e820:	7940      	ldrb	r0, [r0, #5]
    e822:	4770      	bx	lr

0000e824 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e824:	7101      	strb	r1, [r0, #4]
    e826:	4770      	bx	lr

0000e828 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e828:	7141      	strb	r1, [r0, #5]
    e82a:	4770      	bx	lr

0000e82c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    e82c:	b510      	push	{r4, lr}
    e82e:	2a1b      	cmp	r2, #27
    e830:	d904      	bls.n	e83c <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    e832:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
    e836:	202a      	movs	r0, #42	; 0x2a
    e838:	f7f6 faa6 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e83c:	7042      	strb	r2, [r0, #1]
    e83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e842:	1cc0      	adds	r0, r0, #3
    e844:	f7fe ba67 	b.w	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e848 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    e848:	6809      	ldr	r1, [r1, #0]
    e84a:	60c1      	str	r1, [r0, #12]
    e84c:	4770      	bx	lr

0000e84e <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    e84e:	680a      	ldr	r2, [r1, #0]
    e850:	6042      	str	r2, [r0, #4]
    e852:	6849      	ldr	r1, [r1, #4]
    e854:	6081      	str	r1, [r0, #8]
    e856:	4770      	bx	lr

0000e858 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e858:	680a      	ldr	r2, [r1, #0]
    e85a:	6042      	str	r2, [r0, #4]
    e85c:	6849      	ldr	r1, [r1, #4]
    e85e:	6081      	str	r1, [r0, #8]
    e860:	4770      	bx	lr

0000e862 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    e862:	680a      	ldr	r2, [r1, #0]
    e864:	6042      	str	r2, [r0, #4]
    e866:	6849      	ldr	r1, [r1, #4]
    e868:	6081      	str	r1, [r0, #8]
    e86a:	4770      	bx	lr

0000e86c <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e86c:	7802      	ldrb	r2, [r0, #0]
    e86e:	f001 0103 	and.w	r1, r1, #3
    e872:	f022 0203 	bic.w	r2, r2, #3
    e876:	430a      	orrs	r2, r1
    e878:	7002      	strb	r2, [r0, #0]
    e87a:	4770      	bx	lr

0000e87c <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e87c:	7101      	strb	r1, [r0, #4]
    e87e:	0a09      	lsrs	r1, r1, #8
    e880:	7141      	strb	r1, [r0, #5]
    e882:	4770      	bx	lr

0000e884 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e884:	7181      	strb	r1, [r0, #6]
    e886:	0a09      	lsrs	r1, r1, #8
    e888:	71c1      	strb	r1, [r0, #7]
    e88a:	4770      	bx	lr

0000e88c <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e88c:	7201      	strb	r1, [r0, #8]
    e88e:	0a09      	lsrs	r1, r1, #8
    e890:	7241      	strb	r1, [r0, #9]
    e892:	4770      	bx	lr

0000e894 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e894:	7281      	strb	r1, [r0, #10]
    e896:	0a09      	lsrs	r1, r1, #8
    e898:	72c1      	strb	r1, [r0, #11]
    e89a:	4770      	bx	lr

0000e89c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e89c:	7802      	ldrb	r2, [r0, #0]
    e89e:	f002 020f 	and.w	r2, r2, #15
    e8a2:	2a03      	cmp	r2, #3
    e8a4:	d003      	beq.n	e8ae <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    e8a6:	2a05      	cmp	r2, #5
    e8a8:	d104      	bne.n	e8b4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    e8aa:	f7ff bee5 	b.w	e678 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    e8ae:	7840      	ldrb	r0, [r0, #1]
    e8b0:	280c      	cmp	r0, #12
    e8b2:	d001      	beq.n	e8b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    e8b4:	2000      	movs	r0, #0
    e8b6:	4770      	bx	lr
    e8b8:	2001      	movs	r0, #1
    e8ba:	4770      	bx	lr

0000e8bc <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    e8bc:	b570      	push	{r4, r5, r6, lr}
    e8be:	4614      	mov	r4, r2
    e8c0:	4605      	mov	r5, r0
    e8c2:	2a1f      	cmp	r2, #31
    e8c4:	d903      	bls.n	e8ce <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    e8c6:	21b2      	movs	r1, #178	; 0xb2
    e8c8:	202a      	movs	r0, #42	; 0x2a
    e8ca:	f7f6 fa5d 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8ce:	f105 0009 	add.w	r0, r5, #9
    e8d2:	f7fe fa20 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e8d6:	1da4      	adds	r4, r4, #6
    e8d8:	706c      	strb	r4, [r5, #1]
    e8da:	bd70      	pop	{r4, r5, r6, pc}

0000e8dc <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e8dc:	b510      	push	{r4, lr}
    e8de:	7802      	ldrb	r2, [r0, #0]
    e8e0:	f001 030f 	and.w	r3, r1, #15
    e8e4:	f022 020f 	bic.w	r2, r2, #15
    e8e8:	431a      	orrs	r2, r3
    e8ea:	7002      	strb	r2, [r0, #0]
    e8ec:	2907      	cmp	r1, #7
    e8ee:	d20c      	bcs.n	e90a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e8f0:	e8df f001 	tbb	[pc, r1]
    e8f4:	06040604 	.word	0x06040604
    e8f8:	00040804 	.word	0x00040804
    e8fc:	2106      	movs	r1, #6
    e8fe:	e002      	b.n	e906 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e900:	210c      	movs	r1, #12
    e902:	e000      	b.n	e906 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e904:	2122      	movs	r1, #34	; 0x22
    e906:	7041      	strb	r1, [r0, #1]
    e908:	bd10      	pop	{r4, pc}
    e90a:	216e      	movs	r1, #110	; 0x6e
    e90c:	202a      	movs	r0, #42	; 0x2a
    e90e:	f7f6 fa3b 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e912 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e912:	680a      	ldr	r2, [r1, #0]
    e914:	f840 2f09 	str.w	r2, [r0, #9]!
    e918:	8889      	ldrh	r1, [r1, #4]
    e91a:	8081      	strh	r1, [r0, #4]
    e91c:	4770      	bx	lr

0000e91e <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e91e:	7802      	ldrb	r2, [r0, #0]
    e920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e924:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e928:	7002      	strb	r2, [r0, #0]
    e92a:	4770      	bx	lr

0000e92c <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e92c:	680a      	ldr	r2, [r1, #0]
    e92e:	f840 2f03 	str.w	r2, [r0, #3]!
    e932:	8889      	ldrh	r1, [r1, #4]
    e934:	8081      	strh	r1, [r0, #4]
    e936:	4770      	bx	lr

0000e938 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e938:	7802      	ldrb	r2, [r0, #0]
    e93a:	2340      	movs	r3, #64	; 0x40
    e93c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e940:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e944:	430a      	orrs	r2, r1
    e946:	7002      	strb	r2, [r0, #0]
    e948:	4770      	bx	lr

0000e94a <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    e94a:	b570      	push	{r4, r5, r6, lr}
    e94c:	4614      	mov	r4, r2
    e94e:	4605      	mov	r5, r0
    e950:	2a1f      	cmp	r2, #31
    e952:	d903      	bls.n	e95c <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    e954:	21d4      	movs	r1, #212	; 0xd4
    e956:	202a      	movs	r0, #42	; 0x2a
    e958:	f7f6 fa16 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e95c:	f105 0009 	add.w	r0, r5, #9
    e960:	f7fe f9d9 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e964:	1da4      	adds	r4, r4, #6
    e966:	706c      	strb	r4, [r5, #1]
    e968:	bd70      	pop	{r4, r5, r6, pc}

0000e96a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e96a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e96e:	4604      	mov	r4, r0
    e970:	2000      	movs	r0, #0
    e972:	f7f6 fbf3 	bl	515c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e976:	2600      	movs	r6, #0
    e978:	4605      	mov	r5, r0
    e97a:	4637      	mov	r7, r6
    e97c:	e00e      	b.n	e99c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e97e:	8820      	ldrh	r0, [r4, #0]
    e980:	1c40      	adds	r0, r0, #1
    e982:	b280      	uxth	r0, r0
    e984:	8020      	strh	r0, [r4, #0]
    e986:	42a8      	cmp	r0, r5
    e988:	d300      	bcc.n	e98c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e98a:	8027      	strh	r7, [r4, #0]
    e98c:	8820      	ldrh	r0, [r4, #0]
    e98e:	4669      	mov	r1, sp
    e990:	f7ff fc6f 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e994:	2800      	cmp	r0, #0
    e996:	d007      	beq.n	e9a8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e998:	1c76      	adds	r6, r6, #1
    e99a:	b2f6      	uxtb	r6, r6
    e99c:	42ae      	cmp	r6, r5
    e99e:	d3ee      	bcc.n	e97e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e9a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e9a4:	8020      	strh	r0, [r4, #0]
    e9a6:	2012      	movs	r0, #18
    e9a8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e9ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e9ac:	6841      	ldr	r1, [r0, #4]
    e9ae:	2200      	movs	r2, #0
    e9b0:	f891 3112 	ldrb.w	r3, [r1, #274]	; 0x112
    e9b4:	2b00      	cmp	r3, #0
    e9b6:	d004      	beq.n	e9c2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e9b8:	f881 2112 	strb.w	r2, [r1, #274]	; 0x112
    e9bc:	6840      	ldr	r0, [r0, #4]
    e9be:	f000 bc73 	b.w	f2a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e9c2:	4770      	bx	lr

0000e9c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e9c4:	b510      	push	{r4, lr}
    e9c6:	7901      	ldrb	r1, [r0, #4]
    e9c8:	b119      	cbz	r1, e9d2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e9ca:	2901      	cmp	r1, #1
    e9cc:	d006      	beq.n	e9dc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e9ce:	2000      	movs	r0, #0
    e9d0:	bd10      	pop	{r4, pc}
    e9d2:	8842      	ldrh	r2, [r0, #2]
    e9d4:	6883      	ldr	r3, [r0, #8]
    e9d6:	8800      	ldrh	r0, [r0, #0]
    e9d8:	2102      	movs	r1, #2
    e9da:	e003      	b.n	e9e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e9dc:	8842      	ldrh	r2, [r0, #2]
    e9de:	6883      	ldr	r3, [r0, #8]
    e9e0:	8800      	ldrh	r0, [r0, #0]
    e9e2:	2101      	movs	r1, #1
    e9e4:	f7f8 fa4c 	bl	6e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e9e8:	b908      	cbnz	r0, e9ee <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e9ea:	f7f8 fa9f 	bl	6f2c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e9ee:	2001      	movs	r0, #1
    e9f0:	bd10      	pop	{r4, pc}
    e9f2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e9f6:	460e      	mov	r6, r1
    e9f8:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e9fc:	4617      	mov	r7, r2
    e9fe:	39ff      	subs	r1, #255	; 0xff
    ea00:	d014      	beq.n	ea2c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ea02:	8030      	strh	r0, [r6, #0]
    ea04:	2100      	movs	r1, #0
    ea06:	7171      	strb	r1, [r6, #5]
    ea08:	f7f6 fdd8 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ea0c:	4604      	mov	r4, r0
    ea0e:	f7fe ffd5 	bl	d9bc <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ea12:	0005      	movs	r5, r0
    ea14:	d00a      	beq.n	ea2c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ea16:	4620      	mov	r0, r4
    ea18:	4629      	mov	r1, r5
    ea1a:	aa01      	add	r2, sp, #4
    ea1c:	f7fe fff1 	bl	da02 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ea20:	8070      	strh	r0, [r6, #2]
    ea22:	b130      	cbz	r0, ea32 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    ea24:	28fb      	cmp	r0, #251	; 0xfb
    ea26:	d906      	bls.n	ea36 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    ea28:	21ae      	movs	r1, #174	; 0xae
    ea2a:	e026      	b.n	ea7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea2c:	2000      	movs	r0, #0
    ea2e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ea32:	21ad      	movs	r1, #173	; 0xad
    ea34:	e021      	b.n	ea7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea36:	9801      	ldr	r0, [sp, #4]
    ea38:	f7ff feb4 	bl	e7a4 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    ea3c:	2801      	cmp	r0, #1
    ea3e:	d003      	beq.n	ea48 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ea40:	2802      	cmp	r0, #2
    ea42:	d001      	beq.n	ea48 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ea44:	21bd      	movs	r1, #189	; 0xbd
    ea46:	e018      	b.n	ea7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea48:	7130      	strb	r0, [r6, #4]
    ea4a:	4629      	mov	r1, r5
    ea4c:	8873      	ldrh	r3, [r6, #2]
    ea4e:	2503      	movs	r5, #3
    ea50:	4620      	mov	r0, r4
    ea52:	463a      	mov	r2, r7
    ea54:	9500      	str	r5, [sp, #0]
    ea56:	f7fe fe9f 	bl	d798 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    ea5a:	4620      	mov	r0, r4
    ea5c:	60b7      	str	r7, [r6, #8]
    ea5e:	f7fe ff5c 	bl	d91a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ea62:	b138      	cbz	r0, ea74 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    ea64:	2100      	movs	r1, #0
    ea66:	4620      	mov	r0, r4
    ea68:	460a      	mov	r2, r1
    ea6a:	f7ff f8a8 	bl	dbbe <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ea6e:	b118      	cbz	r0, ea78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    ea70:	2001      	movs	r0, #1
    ea72:	e7dc      	b.n	ea2e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    ea74:	21cd      	movs	r1, #205	; 0xcd
    ea76:	e000      	b.n	ea7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea78:	21d2      	movs	r1, #210	; 0xd2
    ea7a:	202b      	movs	r0, #43	; 0x2b
    ea7c:	f7f6 f984 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ea80 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    ea80:	f7f8 bc0c 	b.w	729c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    ea84:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ea88:	4604      	mov	r4, r0
    ea8a:	2000      	movs	r0, #0
    ea8c:	f7f6 fb66 	bl	515c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ea90:	4605      	mov	r5, r0
    ea92:	2001      	movs	r0, #1
    ea94:	f7f6 fb62 	bl	515c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    ea98:	4428      	add	r0, r5
    ea9a:	2600      	movs	r6, #0
    ea9c:	b2c7      	uxtb	r7, r0
    ea9e:	46b0      	mov	r8, r6
    eaa0:	e017      	b.n	ead2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    eaa2:	8820      	ldrh	r0, [r4, #0]
    eaa4:	1c40      	adds	r0, r0, #1
    eaa6:	b280      	uxth	r0, r0
    eaa8:	8020      	strh	r0, [r4, #0]
    eaaa:	42b8      	cmp	r0, r7
    eaac:	d302      	bcc.n	eab4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    eaae:	4640      	mov	r0, r8
    eab0:	f8a4 8000 	strh.w	r8, [r4]
    eab4:	b280      	uxth	r0, r0
    eab6:	42a8      	cmp	r0, r5
    eab8:	d304      	bcc.n	eac4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    eaba:	42b8      	cmp	r0, r7
    eabc:	d202      	bcs.n	eac4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    eabe:	2000      	movs	r0, #0
    eac0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    eac4:	4669      	mov	r1, sp
    eac6:	f7ff fbd4 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eaca:	2800      	cmp	r0, #0
    eacc:	d0f8      	beq.n	eac0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    eace:	1c76      	adds	r6, r6, #1
    ead0:	b2f6      	uxtb	r6, r6
    ead2:	42be      	cmp	r6, r7
    ead4:	d3e5      	bcc.n	eaa2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    ead6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    eada:	8020      	strh	r0, [r4, #0]
    eadc:	2012      	movs	r0, #18
    eade:	e7ef      	b.n	eac0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000eae0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    eae0:	b570      	push	{r4, r5, r6, lr}
    eae2:	8050      	strh	r0, [r2, #2]
    eae4:	890c      	ldrh	r4, [r1, #8]
    eae6:	8094      	strh	r4, [r2, #4]
    eae8:	898b      	ldrh	r3, [r1, #12]
    eaea:	80d3      	strh	r3, [r2, #6]
    eaec:	8948      	ldrh	r0, [r1, #10]
    eaee:	8110      	strh	r0, [r2, #8]
    eaf0:	89cd      	ldrh	r5, [r1, #14]
    eaf2:	8155      	strh	r5, [r2, #10]
    eaf4:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    eaf6:	42ae      	cmp	r6, r5
    eaf8:	d108      	bne.n	eb0c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    eafa:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    eafc:	4285      	cmp	r5, r0
    eafe:	d105      	bne.n	eb0c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    eb00:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    eb02:	429d      	cmp	r5, r3
    eb04:	d102      	bne.n	eb0c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    eb06:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    eb08:	42a3      	cmp	r3, r4
    eb0a:	d001      	beq.n	eb10 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    eb0c:	2301      	movs	r3, #1
    eb0e:	e000      	b.n	eb12 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    eb10:	2300      	movs	r3, #0
    eb12:	7313      	strb	r3, [r2, #12]
    eb14:	8548      	strh	r0, [r1, #42]	; 0x2a
    eb16:	8950      	ldrh	r0, [r2, #10]
    eb18:	85c8      	strh	r0, [r1, #46]	; 0x2e
    eb1a:	8890      	ldrh	r0, [r2, #4]
    eb1c:	8588      	strh	r0, [r1, #44]	; 0x2c
    eb1e:	88d0      	ldrh	r0, [r2, #6]
    eb20:	8608      	strh	r0, [r1, #48]	; 0x30
    eb22:	20ff      	movs	r0, #255	; 0xff
    eb24:	7010      	strb	r0, [r2, #0]
    eb26:	bd70      	pop	{r4, r5, r6, pc}

0000eb28 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    eb28:	b510      	push	{r4, lr}
    eb2a:	888c      	ldrh	r4, [r1, #4]
    eb2c:	890a      	ldrh	r2, [r1, #8]
    eb2e:	884b      	ldrh	r3, [r1, #2]
    eb30:	88c9      	ldrh	r1, [r1, #6]
    eb32:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    eb36:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    eb3a:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    eb3e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    eb42:	bd10      	pop	{r4, pc}

0000eb44 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    eb44:	b570      	push	{r4, r5, r6, lr}
    eb46:	4615      	mov	r5, r2
    eb48:	460c      	mov	r4, r1
    eb4a:	f000 f8c9 	bl	ece0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    eb4e:	3096      	adds	r0, #150	; 0x96
    eb50:	4428      	add	r0, r5
    eb52:	42a0      	cmp	r0, r4
    eb54:	d801      	bhi.n	eb5a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    eb56:	1a20      	subs	r0, r4, r0
    eb58:	bd70      	pop	{r4, r5, r6, pc}
    eb5a:	2000      	movs	r0, #0
    eb5c:	bd70      	pop	{r4, r5, r6, pc}

0000eb5e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    eb5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb62:	4604      	mov	r4, r0
    eb64:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    eb66:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    eb68:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    eb6c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    eb70:	4285      	cmp	r5, r0
    eb72:	d300      	bcc.n	eb76 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    eb74:	4605      	mov	r5, r0
    eb76:	4620      	mov	r0, r4
    eb78:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    eb7c:	f000 f8a0 	bl	ecc0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    eb80:	4601      	mov	r1, r0
    eb82:	8765      	strh	r5, [r4, #58]	; 0x3a
    eb84:	87e1      	strh	r1, [r4, #62]	; 0x3e
    eb86:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    eb8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    eb8e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    eb92:	4680      	mov	r8, r0
    eb94:	42aa      	cmp	r2, r5
    eb96:	d200      	bcs.n	eb9a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    eb98:	462a      	mov	r2, r5
    eb9a:	428b      	cmp	r3, r1
    eb9c:	d200      	bcs.n	eba0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    eb9e:	460b      	mov	r3, r1
    eba0:	8202      	strh	r2, [r0, #16]
    eba2:	f8a8 3012 	strh.w	r3, [r8, #18]
    eba6:	42bd      	cmp	r5, r7
    eba8:	d101      	bne.n	ebae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    ebaa:	42b1      	cmp	r1, r6
    ebac:	d001      	beq.n	ebb2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    ebae:	2001      	movs	r0, #1
    ebb0:	e000      	b.n	ebb4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    ebb2:	2000      	movs	r0, #0
    ebb4:	4681      	mov	r9, r0
    ebb6:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    ebba:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    ebbe:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    ebc0:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    ebc2:	4285      	cmp	r5, r0
    ebc4:	d300      	bcc.n	ebc8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    ebc6:	4605      	mov	r5, r0
    ebc8:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    ebcc:	4620      	mov	r0, r4
    ebce:	f000 f87f 	bl	ecd0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ebd2:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    ebd6:	2902      	cmp	r1, #2
    ebd8:	d108      	bne.n	ebec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    ebda:	42af      	cmp	r7, r5
    ebdc:	d200      	bcs.n	ebe0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    ebde:	463d      	mov	r5, r7
    ebe0:	4286      	cmp	r6, r0
    ebe2:	d200      	bcs.n	ebe6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    ebe4:	4630      	mov	r0, r6
    ebe6:	2100      	movs	r1, #0
    ebe8:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    ebec:	f8a8 5008 	strh.w	r5, [r8, #8]
    ebf0:	f8a8 000c 	strh.w	r0, [r8, #12]
    ebf4:	42bd      	cmp	r5, r7
    ebf6:	d101      	bne.n	ebfc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    ebf8:	42b0      	cmp	r0, r6
    ebfa:	d001      	beq.n	ec00 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    ebfc:	2001      	movs	r0, #1
    ebfe:	e000      	b.n	ec02 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    ec00:	2000      	movs	r0, #0
    ec02:	ea40 0009 	orr.w	r0, r0, r9
    ec06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ec0a <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    ec0a:	6840      	ldr	r0, [r0, #4]
    ec0c:	4770      	bx	lr

0000ec0e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    ec0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec12:	4616      	mov	r6, r2
    ec14:	460f      	mov	r7, r1
    ec16:	4604      	mov	r4, r0
    ec18:	f000 f862 	bl	ece0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    ec1c:	4605      	mov	r5, r0
    ec1e:	463a      	mov	r2, r7
    ec20:	6921      	ldr	r1, [r4, #16]
    ec22:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ec24:	f000 f847 	bl	ecb6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    ec28:	19a9      	adds	r1, r5, r6
    ec2a:	4281      	cmp	r1, r0
    ec2c:	d300      	bcc.n	ec30 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    ec2e:	4608      	mov	r0, r1
    ec30:	6360      	str	r0, [r4, #52]	; 0x34
    ec32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ec36 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    ec36:	221b      	movs	r2, #27
    ec38:	8402      	strh	r2, [r0, #32]
    ec3a:	8382      	strh	r2, [r0, #28]
    ec3c:	82c2      	strh	r2, [r0, #22]
    ec3e:	8282      	strh	r2, [r0, #20]
    ec40:	8142      	strh	r2, [r0, #10]
    ec42:	8202      	strh	r2, [r0, #16]
    ec44:	8102      	strh	r2, [r0, #8]
    ec46:	8542      	strh	r2, [r0, #42]	; 0x2a
    ec48:	8582      	strh	r2, [r0, #44]	; 0x2c
    ec4a:	8482      	strh	r2, [r0, #36]	; 0x24
    ec4c:	2900      	cmp	r1, #0
    ec4e:	d10a      	bne.n	ec66 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    ec50:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ec54:	8441      	strh	r1, [r0, #34]	; 0x22
    ec56:	83c1      	strh	r1, [r0, #30]
    ec58:	8341      	strh	r1, [r0, #26]
    ec5a:	8301      	strh	r1, [r0, #24]
    ec5c:	81c1      	strh	r1, [r0, #14]
    ec5e:	8241      	strh	r1, [r0, #18]
    ec60:	8181      	strh	r1, [r0, #12]
    ec62:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ec64:	8601      	strh	r1, [r0, #48]	; 0x30
    ec66:	4770      	bx	lr

0000ec68 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ec68:	6800      	ldr	r0, [r0, #0]
    ec6a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    ec6e:	4290      	cmp	r0, r2
    ec70:	d903      	bls.n	ec7a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    ec72:	1a40      	subs	r0, r0, r1
    ec74:	389c      	subs	r0, #156	; 0x9c
    ec76:	0840      	lsrs	r0, r0, #1
    ec78:	4770      	bx	lr
    ec7a:	2000      	movs	r0, #0
    ec7c:	4770      	bx	lr

0000ec7e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    ec7e:	b510      	push	{r4, lr}
    ec80:	9c02      	ldr	r4, [sp, #8]
    ec82:	8281      	strh	r1, [r0, #20]
    ec84:	82c2      	strh	r2, [r0, #22]
    ec86:	8303      	strh	r3, [r0, #24]
    ec88:	8344      	strh	r4, [r0, #26]
    ec8a:	bd10      	pop	{r4, pc}

0000ec8c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    ec8c:	8050      	strh	r0, [r2, #2]
    ec8e:	8a88      	ldrh	r0, [r1, #20]
    ec90:	8090      	strh	r0, [r2, #4]
    ec92:	8ac8      	ldrh	r0, [r1, #22]
    ec94:	80d0      	strh	r0, [r2, #6]
    ec96:	8b08      	ldrh	r0, [r1, #24]
    ec98:	8110      	strh	r0, [r2, #8]
    ec9a:	8b48      	ldrh	r0, [r1, #26]
    ec9c:	8150      	strh	r0, [r2, #10]
    ec9e:	20ff      	movs	r0, #255	; 0xff
    eca0:	7010      	strb	r0, [r2, #0]
    eca2:	4770      	bx	lr
    eca4:	2902      	cmp	r1, #2
    eca6:	d003      	beq.n	ecb0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    eca8:	00c0      	lsls	r0, r0, #3
    ecaa:	3070      	adds	r0, #112	; 0x70
    ecac:	b280      	uxth	r0, r0
    ecae:	4770      	bx	lr
    ecb0:	0080      	lsls	r0, r0, #2
    ecb2:	303c      	adds	r0, #60	; 0x3c
    ecb4:	e7fa      	b.n	ecac <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    ecb6:	4288      	cmp	r0, r1
    ecb8:	d300      	bcc.n	ecbc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    ecba:	4608      	mov	r0, r1
    ecbc:	1a80      	subs	r0, r0, r2
    ecbe:	4770      	bx	lr
    ecc0:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    ecc4:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    ecc8:	4281      	cmp	r1, r0
    ecca:	d200      	bcs.n	ecce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    eccc:	4608      	mov	r0, r1
    ecce:	4770      	bx	lr
    ecd0:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    ecd4:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    ecd8:	4281      	cmp	r1, r0
    ecda:	d200      	bcs.n	ecde <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    ecdc:	4608      	mov	r0, r1
    ecde:	4770      	bx	lr
    ece0:	2196      	movs	r1, #150	; 0x96
    ece2:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    ece6:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    ecea:	f000 b800 	b.w	ecee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    ecee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ecf2:	460d      	mov	r5, r1
    ecf4:	4606      	mov	r6, r0
    ecf6:	4698      	mov	r8, r3
    ecf8:	4617      	mov	r7, r2
    ecfa:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    ecfc:	4611      	mov	r1, r2
    ecfe:	f7ff ffd1 	bl	eca4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ed02:	4604      	mov	r4, r0
    ed04:	4639      	mov	r1, r7
    ed06:	4630      	mov	r0, r6
    ed08:	f7ff ffe2 	bl	ecd0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ed0c:	42a0      	cmp	r0, r4
    ed0e:	d200      	bcs.n	ed12 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    ed10:	4604      	mov	r4, r0
    ed12:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    ed16:	4641      	mov	r1, r8
    ed18:	f7ff ffc4 	bl	eca4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ed1c:	4607      	mov	r7, r0
    ed1e:	4641      	mov	r1, r8
    ed20:	4630      	mov	r0, r6
    ed22:	f7ff ffcd 	bl	ecc0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ed26:	42b8      	cmp	r0, r7
    ed28:	d300      	bcc.n	ed2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa0>
    ed2a:	4638      	mov	r0, r7
    ed2c:	4420      	add	r0, r4
    ed2e:	4428      	add	r0, r5
    ed30:	1d80      	adds	r0, r0, #6
    ed32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ed36 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    ed36:	b510      	push	{r4, lr}
    ed38:	4604      	mov	r4, r0
    ed3a:	2108      	movs	r1, #8
    ed3c:	4620      	mov	r0, r4
    ed3e:	f7f6 f8bd 	bl	4ebc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ed42:	6820      	ldr	r0, [r4, #0]
    ed44:	2800      	cmp	r0, #0
    ed46:	d102      	bne.n	ed4e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    ed48:	6860      	ldr	r0, [r4, #4]
    ed4a:	2800      	cmp	r0, #0
    ed4c:	d0f5      	beq.n	ed3a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    ed4e:	bd10      	pop	{r4, pc}
    ed50:	2801      	cmp	r0, #1
    ed52:	d102      	bne.n	ed5a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    ed54:	7948      	ldrb	r0, [r1, #5]
    ed56:	0980      	lsrs	r0, r0, #6
    ed58:	d001      	beq.n	ed5e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    ed5a:	2000      	movs	r0, #0
    ed5c:	4770      	bx	lr
    ed5e:	2001      	movs	r0, #1
    ed60:	4770      	bx	lr
    ed62:	2801      	cmp	r0, #1
    ed64:	d106      	bne.n	ed74 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ed66:	7948      	ldrb	r0, [r1, #5]
    ed68:	2101      	movs	r1, #1
    ed6a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ed6e:	d101      	bne.n	ed74 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ed70:	2001      	movs	r0, #1
    ed72:	4770      	bx	lr
    ed74:	2000      	movs	r0, #0
    ed76:	4770      	bx	lr
    ed78:	2802      	cmp	r0, #2
    ed7a:	d003      	beq.n	ed84 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    ed7c:	2803      	cmp	r0, #3
    ed7e:	d001      	beq.n	ed84 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    ed80:	2000      	movs	r0, #0
    ed82:	4770      	bx	lr
    ed84:	2001      	movs	r0, #1
    ed86:	4770      	bx	lr

0000ed88 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ed88:	b510      	push	{r4, lr}
    ed8a:	4604      	mov	r4, r0
    ed8c:	7c00      	ldrb	r0, [r0, #16]
    ed8e:	f7ff fff3 	bl	ed78 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    ed92:	b148      	cbz	r0, eda8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ed94:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    ed98:	f104 0150 	add.w	r1, r4, #80	; 0x50
    ed9c:	f7ff fa26 	bl	e1ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    eda0:	2808      	cmp	r0, #8
    eda2:	d001      	beq.n	eda8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eda4:	2001      	movs	r0, #1
    eda6:	bd10      	pop	{r4, pc}
    eda8:	7c20      	ldrb	r0, [r4, #16]
    edaa:	b118      	cbz	r0, edb4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    edac:	2802      	cmp	r0, #2
    edae:	d001      	beq.n	edb4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    edb0:	7de0      	ldrb	r0, [r4, #23]
    edb2:	bd10      	pop	{r4, pc}
    edb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edb8:	2000      	movs	r0, #0
    edba:	f7f6 beb7 	b.w	5b2c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000edbe <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    edbe:	b508      	push	{r3, lr}
    edc0:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    edc4:	f88d 1000 	strb.w	r1, [sp]
    edc8:	9900      	ldr	r1, [sp, #0]
    edca:	9100      	str	r1, [sp, #0]
    edcc:	f89d 1000 	ldrb.w	r1, [sp]
    edd0:	b109      	cbz	r1, edd6 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    edd2:	2001      	movs	r0, #1
    edd4:	bd08      	pop	{r3, pc}
    edd6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    edda:	f88d 0000 	strb.w	r0, [sp]
    edde:	9800      	ldr	r0, [sp, #0]
    ede0:	9000      	str	r0, [sp, #0]
    ede2:	f89d 0000 	ldrb.w	r0, [sp]
    ede6:	2000      	movs	r0, #0
    ede8:	bd08      	pop	{r3, pc}

0000edea <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    edea:	20ff      	movs	r0, #255	; 0xff
    edec:	7008      	strb	r0, [r1, #0]
    edee:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    edf0:	f7ff b90d 	b.w	e00e <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000edf4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    edf4:	b51c      	push	{r2, r3, r4, lr}
    edf6:	4604      	mov	r4, r0
    edf8:	22d4      	movs	r2, #212	; 0xd4
    edfa:	2100      	movs	r1, #0
    edfc:	f7fe f805 	bl	ce0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ee00:	20ff      	movs	r0, #255	; 0xff
    ee02:	7020      	strb	r0, [r4, #0]
    ee04:	207f      	movs	r0, #127	; 0x7f
    ee06:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ee0a:	2013      	movs	r0, #19
    ee0c:	8060      	strh	r0, [r4, #2]
    ee0e:	f7f6 fc95 	bl	573c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ee12:	4601      	mov	r1, r0
    ee14:	62e0      	str	r0, [r4, #44]	; 0x2c
    ee16:	2200      	movs	r2, #0
    ee18:	4668      	mov	r0, sp
    ee1a:	f7ff f862 	bl	dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ee1e:	2200      	movs	r2, #0
    ee20:	2101      	movs	r1, #1
    ee22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee24:	f7ff f8d3 	bl	dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ee28:	2204      	movs	r2, #4
    ee2a:	4668      	mov	r0, sp
    ee2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ee2e:	f7ff f858 	bl	dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ee32:	2200      	movs	r2, #0
    ee34:	4611      	mov	r1, r2
    ee36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee38:	f7ff f8c9 	bl	dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ee3c:	2000      	movs	r0, #0
    ee3e:	73a0      	strb	r0, [r4, #14]
    ee40:	f104 0020 	add.w	r0, r4, #32
    ee44:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    ee48:	f000 b96e 	b.w	f128 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000ee4c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ee4c:	7880      	ldrb	r0, [r0, #2]
    ee4e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ee52:	b108      	cbz	r0, ee58 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    ee54:	2000      	movs	r0, #0
    ee56:	4770      	bx	lr
    ee58:	201f      	movs	r0, #31
    ee5a:	4770      	bx	lr

0000ee5c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ee5c:	f7f8 bf9c 	b.w	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000ee60 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ee60:	6880      	ldr	r0, [r0, #8]
    ee62:	4770      	bx	lr

0000ee64 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ee64:	2001      	movs	r0, #1
    ee66:	4770      	bx	lr

0000ee68 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ee68:	b510      	push	{r4, lr}
    ee6a:	4604      	mov	r4, r0
    ee6c:	3020      	adds	r0, #32
    ee6e:	f000 f91b 	bl	f0a8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ee72:	8861      	ldrh	r1, [r4, #2]
    ee74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee78:	2228      	movs	r2, #40	; 0x28
    ee7a:	f7f9 b969 	b.w	8150 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ee7e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ee7e:	2200      	movs	r2, #0
    ee80:	6282      	str	r2, [r0, #40]	; 0x28
    ee82:	8843      	ldrh	r3, [r0, #2]
    ee84:	2b1d      	cmp	r3, #29
    ee86:	d001      	beq.n	ee8c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ee88:	7341      	strb	r1, [r0, #13]
    ee8a:	4770      	bx	lr
    ee8c:	7342      	strb	r2, [r0, #13]
    ee8e:	4770      	bx	lr

0000ee90 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    ee90:	b510      	push	{r4, lr}
    ee92:	2400      	movs	r4, #0
    ee94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ee96:	f7ff f888 	bl	dfaa <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    ee9a:	b100      	cbz	r0, ee9e <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    ee9c:	2001      	movs	r0, #1
    ee9e:	4384      	bics	r4, r0
    eea0:	f084 0001 	eor.w	r0, r4, #1
    eea4:	bd10      	pop	{r4, pc}

0000eea6 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    eea6:	2000      	movs	r0, #0
    eea8:	4770      	bx	lr

0000eeaa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    eeaa:	7880      	ldrb	r0, [r0, #2]
    eeac:	f000 0001 	and.w	r0, r0, #1
    eeb0:	4770      	bx	lr

0000eeb2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    eeb2:	7880      	ldrb	r0, [r0, #2]
    eeb4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    eeb8:	4770      	bx	lr

0000eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    eeba:	2001      	movs	r0, #1
    eebc:	4770      	bx	lr

0000eebe <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    eebe:	7880      	ldrb	r0, [r0, #2]
    eec0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    eec4:	4770      	bx	lr

0000eec6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    eec6:	f990 000e 	ldrsb.w	r0, [r0, #14]
    eeca:	4770      	bx	lr

0000eecc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    eecc:	7800      	ldrb	r0, [r0, #0]
    eece:	28ff      	cmp	r0, #255	; 0xff
    eed0:	d001      	beq.n	eed6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    eed2:	2001      	movs	r0, #1
    eed4:	4770      	bx	lr
    eed6:	2000      	movs	r0, #0
    eed8:	4770      	bx	lr

0000eeda <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    eeda:	680a      	ldr	r2, [r1, #0]
    eedc:	f840 2f11 	str.w	r2, [r0, #17]!
    eee0:	8889      	ldrh	r1, [r1, #4]
    eee2:	8081      	strh	r1, [r0, #4]
    eee4:	2101      	movs	r1, #1
    eee6:	7181      	strb	r1, [r0, #6]
    eee8:	4770      	bx	lr

0000eeea <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    eeea:	7b00      	ldrb	r0, [r0, #12]
    eeec:	4770      	bx	lr

0000eeee <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    eeee:	2001      	movs	r0, #1
    eef0:	4770      	bx	lr

0000eef2 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    eef2:	61c1      	str	r1, [r0, #28]
    eef4:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    eef8:	724a      	strb	r2, [r1, #9]
    eefa:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    eefe:	f8c1 200a 	str.w	r2, [r1, #10]
    ef02:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    ef06:	81c8      	strh	r0, [r1, #14]
    ef08:	4770      	bx	lr

0000ef0a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ef0a:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    ef0e:	4770      	bx	lr

0000ef10 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    ef10:	b510      	push	{r4, lr}
    ef12:	4604      	mov	r4, r0
    ef14:	7880      	ldrb	r0, [r0, #2]
    ef16:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ef1a:	b140      	cbz	r0, ef2e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    ef1c:	233c      	movs	r3, #60	; 0x3c
    ef1e:	22ff      	movs	r2, #255	; 0xff
    ef20:	4620      	mov	r0, r4
    ef22:	69e1      	ldr	r1, [r4, #28]
    ef24:	f7f8 ff64 	bl	7df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    ef28:	20ff      	movs	r0, #255	; 0xff
    ef2a:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    ef2e:	78a0      	ldrb	r0, [r4, #2]
    ef30:	07c0      	lsls	r0, r0, #31
    ef32:	f7f8 f85f 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ef36:	2001      	movs	r0, #1
    ef38:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    ef3c:	bd10      	pop	{r4, pc}

0000ef3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ef3e:	7bc0      	ldrb	r0, [r0, #15]
    ef40:	2800      	cmp	r0, #0
    ef42:	d000      	beq.n	ef46 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ef44:	2001      	movs	r0, #1
    ef46:	4770      	bx	lr
    ef48:	b510      	push	{r4, lr}
    ef4a:	f7ff f94f 	bl	e1ec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ef4e:	4604      	mov	r4, r0
    ef50:	f7f7 fc96 	bl	6880 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ef54:	b138      	cbz	r0, ef66 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    ef56:	4620      	mov	r0, r4
    ef58:	f7f7 fbca 	bl	66f0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    ef5c:	b118      	cbz	r0, ef66 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    ef5e:	2110      	movs	r1, #16
    ef60:	f7ff fb24 	bl	e5ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    ef64:	b108      	cbz	r0, ef6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    ef66:	2000      	movs	r0, #0
    ef68:	bd10      	pop	{r4, pc}
    ef6a:	2001      	movs	r0, #1
    ef6c:	bd10      	pop	{r4, pc}
    ef6e:	2101      	movs	r1, #1
    ef70:	f7f8 bb9a 	b.w	76a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    ef74:	2101      	movs	r1, #1
    ef76:	f7f8 bb97 	b.w	76a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    ef7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef7e:	4604      	mov	r4, r0
    ef80:	2700      	movs	r7, #0
    ef82:	704f      	strb	r7, [r1, #1]
    ef84:	2011      	movs	r0, #17
    ef86:	460d      	mov	r5, r1
    ef88:	7008      	strb	r0, [r1, #0]
    ef8a:	2220      	movs	r2, #32
    ef8c:	f104 0166 	add.w	r1, r4, #102	; 0x66
    ef90:	1d28      	adds	r0, r5, #4
    ef92:	f7fd fec0 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef96:	2601      	movs	r6, #1
    ef98:	722e      	strb	r6, [r5, #8]
    ef9a:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    ef9e:	7928      	ldrb	r0, [r5, #4]
    efa0:	2800      	cmp	r0, #0
    efa2:	d112      	bne.n	efca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    efa4:	88e8      	ldrh	r0, [r5, #6]
    efa6:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    efaa:	69e0      	ldr	r0, [r4, #28]
    efac:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    efb0:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    efb4:	21ff      	movs	r1, #255	; 0xff
    efb6:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
    efba:	8800      	ldrh	r0, [r0, #0]
    efbc:	f7f6 fafe 	bl	55bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    efc0:	f7fe fdaf 	bl	db22 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    efc4:	69e0      	ldr	r0, [r4, #28]
    efc6:	f880 6078 	strb.w	r6, [r0, #120]	; 0x78
    efca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    efce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efd2:	4604      	mov	r4, r0
    efd4:	460f      	mov	r7, r1
    efd6:	7e40      	ldrb	r0, [r0, #25]
    efd8:	f7f7 fb4a 	bl	6670 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    efdc:	4606      	mov	r6, r0
    efde:	7e20      	ldrb	r0, [r4, #24]
    efe0:	f104 0549 	add.w	r5, r4, #73	; 0x49
    efe4:	b120      	cbz	r0, eff0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    efe6:	b11e      	cbz	r6, eff0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    efe8:	7e60      	ldrb	r0, [r4, #25]
    efea:	f7f7 fb35 	bl	6658 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    efee:	b1a0      	cbz	r0, f01a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    eff0:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    eff4:	2800      	cmp	r0, #0
    eff6:	d024      	beq.n	f042 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    eff8:	7ea0      	ldrb	r0, [r4, #26]
    effa:	2800      	cmp	r0, #0
    effc:	d021      	beq.n	f042 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    effe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f002:	4629      	mov	r1, r5
    f004:	f7ff fead 	bl	ed62 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    f008:	b1a8      	cbz	r0, f036 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    f00a:	f7f7 fb21 	bl	6650 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f00e:	463a      	mov	r2, r7
    f010:	4629      	mov	r1, r5
    f012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f016:	f7ff b881 	b.w	e11c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f01a:	2001      	movs	r0, #1
    f01c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f020:	463a      	mov	r2, r7
    f022:	4629      	mov	r1, r5
    f024:	4630      	mov	r0, r6
    f026:	f7ff f879 	bl	e11c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f02a:	7e61      	ldrb	r1, [r4, #25]
    f02c:	4628      	mov	r0, r5
    f02e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f032:	f7f7 bb29 	b.w	6688 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f036:	4639      	mov	r1, r7
    f038:	4628      	mov	r0, r5
    f03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f03e:	f7ff b85c 	b.w	e0fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f046:	b510      	push	{r4, lr}
    f048:	4604      	mov	r4, r0
    f04a:	4608      	mov	r0, r1
    f04c:	f7fc ff8a 	bl	bf64 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f050:	7921      	ldrb	r1, [r4, #4]
    f052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f056:	2025      	movs	r0, #37	; 0x25
    f058:	f7fc bf5a 	b.w	bf10 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f05c:	b510      	push	{r4, lr}
    f05e:	4604      	mov	r4, r0
    f060:	3026      	adds	r0, #38	; 0x26
    f062:	f7fc ff35 	bl	bed0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f066:	2800      	cmp	r0, #0
    f068:	d102      	bne.n	f070 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    f06a:	207f      	movs	r0, #127	; 0x7f
    f06c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f070:	bd10      	pop	{r4, pc}
    f072:	7802      	ldrb	r2, [r0, #0]
    f074:	2320      	movs	r3, #32
    f076:	f022 0220 	bic.w	r2, r2, #32
    f07a:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f07e:	430a      	orrs	r2, r1
    f080:	7002      	strb	r2, [r0, #0]
    f082:	4770      	bx	lr

0000f084 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f084:	b570      	push	{r4, r5, r6, lr}
    f086:	7001      	strb	r1, [r0, #0]
    f088:	7042      	strb	r2, [r0, #1]
    f08a:	4614      	mov	r4, r2
    f08c:	460d      	mov	r5, r1
    f08e:	7880      	ldrb	r0, [r0, #2]
    f090:	f000 f87f 	bl	f192 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f094:	fb10 f005 	smulbb	r0, r0, r5
    f098:	4360      	muls	r0, r4
    f09a:	28ff      	cmp	r0, #255	; 0xff
    f09c:	d303      	bcc.n	f0a6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f09e:	215c      	movs	r1, #92	; 0x5c
    f0a0:	202e      	movs	r0, #46	; 0x2e
    f0a2:	f7f5 fe71 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a6:	bd70      	pop	{r4, r5, r6, pc}

0000f0a8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f0a8:	b510      	push	{r4, lr}
    f0aa:	4604      	mov	r4, r0
    f0ac:	7880      	ldrb	r0, [r0, #2]
    f0ae:	f000 f870 	bl	f192 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f0b2:	7861      	ldrb	r1, [r4, #1]
    f0b4:	7822      	ldrb	r2, [r4, #0]
    f0b6:	fb11 f102 	smulbb	r1, r1, r2
    f0ba:	4348      	muls	r0, r1
    f0bc:	b2c0      	uxtb	r0, r0
    f0be:	bd10      	pop	{r4, pc}

0000f0c0 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f0c0:	b510      	push	{r4, lr}
    f0c2:	4604      	mov	r4, r0
    f0c4:	f000 f84d 	bl	f162 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f0c8:	7961      	ldrb	r1, [r4, #5]
    f0ca:	1c49      	adds	r1, r1, #1
    f0cc:	b2c9      	uxtb	r1, r1
    f0ce:	7161      	strb	r1, [r4, #5]
    f0d0:	7862      	ldrb	r2, [r4, #1]
    f0d2:	4291      	cmp	r1, r2
    f0d4:	d10b      	bne.n	f0ee <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f0d6:	2200      	movs	r2, #0
    f0d8:	7162      	strb	r2, [r4, #5]
    f0da:	78e1      	ldrb	r1, [r4, #3]
    f0dc:	4301      	orrs	r1, r0
    f0de:	70e1      	strb	r1, [r4, #3]
    f0e0:	78a3      	ldrb	r3, [r4, #2]
    f0e2:	4299      	cmp	r1, r3
    f0e4:	d103      	bne.n	f0ee <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f0e6:	70e2      	strb	r2, [r4, #3]
    f0e8:	7921      	ldrb	r1, [r4, #4]
    f0ea:	1c49      	adds	r1, r1, #1
    f0ec:	7121      	strb	r1, [r4, #4]
    f0ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0f2:	f000 b825 	b.w	f140 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f0f6 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f0f6:	7081      	strb	r1, [r0, #2]
    f0f8:	4770      	bx	lr

0000f0fa <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f0fa:	b570      	push	{r4, r5, r6, lr}
    f0fc:	4604      	mov	r4, r0
    f0fe:	7880      	ldrb	r0, [r0, #2]
    f100:	f000 f847 	bl	f192 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f104:	7861      	ldrb	r1, [r4, #1]
    f106:	fb11 f500 	smulbb	r5, r1, r0
    f10a:	78e0      	ldrb	r0, [r4, #3]
    f10c:	f000 f841 	bl	f192 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f110:	7861      	ldrb	r1, [r4, #1]
    f112:	7962      	ldrb	r2, [r4, #5]
    f114:	fb10 2001 	smlabb	r0, r0, r1, r2
    f118:	7821      	ldrb	r1, [r4, #0]
    f11a:	7922      	ldrb	r2, [r4, #4]
    f11c:	1a89      	subs	r1, r1, r2
    f11e:	fb11 f105 	smulbb	r1, r1, r5
    f122:	1a08      	subs	r0, r1, r0
    f124:	b2c0      	uxtb	r0, r0
    f126:	bd70      	pop	{r4, r5, r6, pc}

0000f128 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f128:	2100      	movs	r1, #0
    f12a:	6001      	str	r1, [r0, #0]
    f12c:	8081      	strh	r1, [r0, #4]
    f12e:	2101      	movs	r1, #1
    f130:	7041      	strb	r1, [r0, #1]
    f132:	7001      	strb	r1, [r0, #0]
    f134:	4770      	bx	lr

0000f136 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f136:	2100      	movs	r1, #0
    f138:	70c1      	strb	r1, [r0, #3]
    f13a:	7141      	strb	r1, [r0, #5]
    f13c:	7101      	strb	r1, [r0, #4]
    f13e:	4770      	bx	lr
    f140:	b510      	push	{r4, lr}
    f142:	2801      	cmp	r0, #1
    f144:	d007      	beq.n	f156 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f146:	2802      	cmp	r0, #2
    f148:	d007      	beq.n	f15a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f14a:	2804      	cmp	r0, #4
    f14c:	d007      	beq.n	f15e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f14e:	2139      	movs	r1, #57	; 0x39
    f150:	202e      	movs	r0, #46	; 0x2e
    f152:	f7f5 fe19 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f156:	2025      	movs	r0, #37	; 0x25
    f158:	bd10      	pop	{r4, pc}
    f15a:	2026      	movs	r0, #38	; 0x26
    f15c:	bd10      	pop	{r4, pc}
    f15e:	2027      	movs	r0, #39	; 0x27
    f160:	bd10      	pop	{r4, pc}
    f162:	4601      	mov	r1, r0
    f164:	2000      	movs	r0, #0
    f166:	788a      	ldrb	r2, [r1, #2]
    f168:	07d3      	lsls	r3, r2, #31
    f16a:	d002      	beq.n	f172 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f16c:	78cb      	ldrb	r3, [r1, #3]
    f16e:	07db      	lsls	r3, r3, #31
    f170:	d006      	beq.n	f180 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f172:	0793      	lsls	r3, r2, #30
    f174:	d506      	bpl.n	f184 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f176:	78cb      	ldrb	r3, [r1, #3]
    f178:	079b      	lsls	r3, r3, #30
    f17a:	d403      	bmi.n	f184 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f17c:	2002      	movs	r0, #2
    f17e:	4770      	bx	lr
    f180:	2001      	movs	r0, #1
    f182:	4770      	bx	lr
    f184:	0752      	lsls	r2, r2, #29
    f186:	d5fc      	bpl.n	f182 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f188:	78c9      	ldrb	r1, [r1, #3]
    f18a:	0749      	lsls	r1, r1, #29
    f18c:	d4f9      	bmi.n	f182 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f18e:	2004      	movs	r0, #4
    f190:	4770      	bx	lr
    f192:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f196:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f19a:	4411      	add	r1, r2
    f19c:	f000 0001 	and.w	r0, r0, #1
    f1a0:	4408      	add	r0, r1
    f1a2:	4770      	bx	lr

0000f1a4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f1a4:	f240 315a 	movw	r1, #858	; 0x35a
    f1a8:	4348      	muls	r0, r1
    f1aa:	4770      	bx	lr

0000f1ac <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f1ac:	f240 20ef 	movw	r0, #751	; 0x2ef
    f1b0:	4770      	bx	lr
    f1b2:	020e      	.short	0x020e
    f1b4:	0630041c 	.word	0x0630041c
    f1b8:	035a0c60 	.word	0x035a0c60
    f1bc:	05c506b4 	.word	0x05c506b4
    f1c0:	12250bf5 	.word	0x12250bf5
    f1c4:	03b101a3 	.word	0x03b101a3
    f1c8:	02ef05bf 	.word	0x02ef05bf
    f1cc:	09a30649 	.word	0x09a30649

0000f1d0 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f1d0:	b510      	push	{r4, lr}
    f1d2:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    f1d6:	b109      	cbz	r1, f1dc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f1d8:	2000      	movs	r0, #0
    f1da:	bd10      	pop	{r4, pc}
    f1dc:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    f1e0:	b949      	cbnz	r1, f1f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f1e2:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    f1e6:	b131      	cbz	r1, f1f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f1e8:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    f1ec:	428a      	cmp	r2, r1
    f1ee:	d902      	bls.n	f1f6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f1f0:	f7ff fe8e 	bl	ef10 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f1f4:	e7f0      	b.n	f1d8 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f1f6:	2001      	movs	r0, #1
    f1f8:	bd10      	pop	{r4, pc}

0000f1fa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f1fa:	b510      	push	{r4, lr}
    f1fc:	b131      	cbz	r1, f20c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f1fe:	2901      	cmp	r1, #1
    f200:	d008      	beq.n	f214 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f202:	f240 7192 	movw	r1, #1938	; 0x792
    f206:	2030      	movs	r0, #48	; 0x30
    f208:	f7f5 fdbe 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f210:	f000 b9da 	b.w	f5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f214:	2100      	movs	r1, #0
    f216:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    f21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f21e:	f000 b93e 	b.w	f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>

0000f222 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f222:	b510      	push	{r4, lr}
    f224:	4604      	mov	r4, r0
    f226:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    f22a:	2800      	cmp	r0, #0
    f22c:	d019      	beq.n	f262 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f22e:	2001      	movs	r0, #1
    f230:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    f234:	4601      	mov	r1, r0
    f236:	4620      	mov	r0, r4
    f238:	f7ff fe67 	bl	ef0a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f23c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    f240:	b170      	cbz	r0, f260 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f242:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    f246:	f7f3 fe3b 	bl	2ec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f24a:	7820      	ldrb	r0, [r4, #0]
    f24c:	f7f3 ff8a 	bl	3164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f250:	f814 09a0 	ldrb.w	r0, [r4], #-160
    f254:	f7f3 ff64 	bl	3120 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f258:	b120      	cbz	r0, f264 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f25a:	2000      	movs	r0, #0
    f25c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    f260:	2000      	movs	r0, #0
    f262:	bd10      	pop	{r4, pc}
    f264:	f240 2107 	movw	r1, #519	; 0x207
    f268:	2030      	movs	r0, #48	; 0x30
    f26a:	f7f5 fd8d 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f26e <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f26e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f272:	4770      	bx	lr

0000f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f274:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    f278:	4770      	bx	lr

0000f27a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    f27a:	b50e      	push	{r1, r2, r3, lr}
    f27c:	4669      	mov	r1, sp
    f27e:	2001      	movs	r0, #1
    f280:	f7fe fd78 	bl	dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f284:	b138      	cbz	r0, f296 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    f286:	f44f 71a1 	mov.w	r1, #322	; 0x142
    f28a:	2030      	movs	r0, #48	; 0x30
    f28c:	f7f5 fd7c 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f290:	9802      	ldr	r0, [sp, #8]
    f292:	f7ff ffc6 	bl	f222 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f296:	4668      	mov	r0, sp
    f298:	f7f5 ffae 	bl	51f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f29c:	2800      	cmp	r0, #0
    f29e:	d0f7      	beq.n	f290 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    f2a0:	f7f9 f8e4 	bl	846c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    f2a4:	2000      	movs	r0, #0
    f2a6:	bd0e      	pop	{r1, r2, r3, pc}

0000f2a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f2a8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f2aa:	4604      	mov	r4, r0
    f2ac:	f890 0113 	ldrb.w	r0, [r0, #275]	; 0x113
    f2b0:	2800      	cmp	r0, #0
    f2b2:	d153      	bne.n	f35c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f2b4:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f2b8:	2803      	cmp	r0, #3
    f2ba:	d14f      	bne.n	f35c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f2bc:	f7fd fbb6 	bl	ca2c <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    f2c0:	4601      	mov	r1, r0
    f2c2:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    f2c6:	f7f3 f98d 	bl	25e4 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f2ca:	2800      	cmp	r0, #0
    f2cc:	dd46      	ble.n	f35c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f2ce:	6921      	ldr	r1, [r4, #16]
    f2d0:	b111      	cbz	r1, f2d8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    f2d2:	fbb0 f0f1 	udiv	r0, r0, r1
    f2d6:	e000      	b.n	f2da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    f2d8:	2000      	movs	r0, #0
    f2da:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f2de:	1c40      	adds	r0, r0, #1
    f2e0:	4408      	add	r0, r1
    f2e2:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f2e6:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f2ea:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    f2ee:	1a08      	subs	r0, r1, r0
    f2f0:	b200      	sxth	r0, r0
    f2f2:	2800      	cmp	r0, #0
    f2f4:	dd32      	ble.n	f35c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f2f6:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    f2fa:	f7f3 fde1 	bl	2ec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f2fe:	2800      	cmp	r0, #0
    f300:	d02c      	beq.n	f35c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f302:	20ff      	movs	r0, #255	; 0xff
    f304:	f884 0159 	strb.w	r0, [r4, #345]	; 0x159
    f308:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f30c:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    f310:	ae01      	add	r6, sp, #4
    f312:	1a40      	subs	r0, r0, r1
    f314:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f318:	1e40      	subs	r0, r0, #1
    f31a:	4408      	add	r0, r1
    f31c:	b285      	uxth	r5, r0
    f31e:	e017      	b.n	f350 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    f320:	9600      	str	r6, [sp, #0]
    f322:	f8b4 1154 	ldrh.w	r1, [r4, #340]	; 0x154
    f326:	2300      	movs	r3, #0
    f328:	2201      	movs	r2, #1
    f32a:	4620      	mov	r0, r4
    f32c:	f7f9 f96e 	bl	860c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f330:	2800      	cmp	r0, #0
    f332:	d013      	beq.n	f35c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f334:	2801      	cmp	r0, #1
    f336:	d004      	beq.n	f342 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    f338:	f240 6105 	movw	r1, #1541	; 0x605
    f33c:	2030      	movs	r0, #48	; 0x30
    f33e:	f7f5 fd23 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f342:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f346:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f34a:	4408      	add	r0, r1
    f34c:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f350:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f354:	1a28      	subs	r0, r5, r0
    f356:	b200      	sxth	r0, r0
    f358:	2800      	cmp	r0, #0
    f35a:	dae1      	bge.n	f320 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    f35c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f35e:	2000      	movs	r0, #0
    f360:	4770      	bx	lr
    f362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f366:	4604      	mov	r4, r0
    f368:	2501      	movs	r5, #1
    f36a:	f000 f90e 	bl	f58a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    f36e:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f372:	2000      	movs	r0, #0
    f374:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    f378:	2701      	movs	r7, #1
    f37a:	f884 70c3 	strb.w	r7, [r4, #195]	; 0xc3
    f37e:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    f382:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
    f386:	b160      	cbz	r0, f3a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xfa>
    f388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f38c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f390:	f7f3 f8f6 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f394:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    f398:	2100      	movs	r1, #0
    f39a:	4630      	mov	r0, r6
    f39c:	f7ff f84c 	bl	e438 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f3a0:	e00f      	b.n	f3c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f3a2:	4620      	mov	r0, r4
    f3a4:	f7ff fd5c 	bl	ee60 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f3a8:	4605      	mov	r5, r0
    f3aa:	4629      	mov	r1, r5
    f3ac:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f3b0:	f7f3 f8e6 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f3b4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    f3b8:	4629      	mov	r1, r5
    f3ba:	4630      	mov	r0, r6
    f3bc:	f7ff f83c 	bl	e438 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f3c0:	1c45      	adds	r5, r0, #1
    f3c2:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f3c6:	1c41      	adds	r1, r0, #1
    f3c8:	290a      	cmp	r1, #10
    f3ca:	d202      	bcs.n	f3d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x12a>
    f3cc:	4428      	add	r0, r5
    f3ce:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    f3d2:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    f3d6:	b138      	cbz	r0, f3e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f3d8:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f3dc:	1c40      	adds	r0, r0, #1
    f3de:	280a      	cmp	r0, #10
    f3e0:	d302      	bcc.n	f3e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f3e2:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    f3e6:	e002      	b.n	f3ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x146>
    f3e8:	2002      	movs	r0, #2
    f3ea:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    f3ee:	2100      	movs	r1, #0
    f3f0:	4620      	mov	r0, r4
    f3f2:	f000 f823 	bl	f43c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    f3f6:	b120      	cbz	r0, f402 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15a>
    f3f8:	4620      	mov	r0, r4
    f3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f3fe:	f000 b80e 	b.w	f41e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    f402:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f406:	4631      	mov	r1, r6
    f408:	f000 f8bd 	bl	f586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    f40c:	2800      	cmp	r0, #0
    f40e:	d104      	bne.n	f41a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x172>
    f410:	f240 61a6 	movw	r1, #1702	; 0x6a6
    f414:	2030      	movs	r0, #48	; 0x30
    f416:	f7f5 fcb7 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f41e:	b510      	push	{r4, lr}
    f420:	4604      	mov	r4, r0
    f422:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    f426:	f7f3 fe7b 	bl	3120 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f42a:	2000      	movs	r0, #0
    f42c:	7520      	strb	r0, [r4, #20]
    f42e:	bd10      	pop	{r4, pc}
    f430:	b510      	push	{r4, lr}
    f432:	f7ff fd19 	bl	ee68 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f436:	f200 100d 	addw	r0, r0, #269	; 0x10d
    f43a:	bd10      	pop	{r4, pc}
    f43c:	b570      	push	{r4, r5, r6, lr}
    f43e:	4604      	mov	r4, r0
    f440:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    f444:	460d      	mov	r5, r1
    f446:	b108      	cbz	r0, f44c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a4>
    f448:	2001      	movs	r0, #1
    f44a:	bd70      	pop	{r4, r5, r6, pc}
    f44c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f450:	b1a8      	cbz	r0, f47e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    f452:	4620      	mov	r0, r4
    f454:	f7ff fd04 	bl	ee60 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f458:	4405      	add	r5, r0
    f45a:	4620      	mov	r0, r4
    f45c:	f7ff ffe8 	bl	f430 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    f460:	1941      	adds	r1, r0, r5
    f462:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f466:	4288      	cmp	r0, r1
    f468:	d206      	bcs.n	f478 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    f46a:	2001      	movs	r0, #1
    f46c:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    f470:	4620      	mov	r0, r4
    f472:	f7ff fd4d 	bl	ef10 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f476:	e7e7      	b.n	f448 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a0>
    f478:	1b40      	subs	r0, r0, r5
    f47a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    f47e:	2000      	movs	r0, #0
    f480:	bd70      	pop	{r4, r5, r6, pc}
    f482:	b510      	push	{r4, lr}
    f484:	4604      	mov	r4, r0
    f486:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    f48a:	f000 f9eb 	bl	f864 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5bc>
    f48e:	4602      	mov	r2, r0
    f490:	4620      	mov	r0, r4
    f492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f496:	f240 111b 	movw	r1, #283	; 0x11b
    f49a:	f7ff bbb8 	b.w	ec0e <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f49e:	b510      	push	{r4, lr}
    f4a0:	f7fc fb88 	bl	bbb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4a8:	f7f3 bf92 	b.w	33d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4b0:	4604      	mov	r4, r0
    f4b2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    f4b6:	2800      	cmp	r0, #0
    f4b8:	d051      	beq.n	f55e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f4ba:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f4be:	2803      	cmp	r0, #3
    f4c0:	d14d      	bne.n	f55e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f4c2:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    f4c6:	f001 faf1 	bl	10aac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f4ca:	4605      	mov	r5, r0
    f4cc:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f4d0:	f7f8 ffbe 	bl	8450 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f4d4:	4428      	add	r0, r5
    f4d6:	b286      	uxth	r6, r0
    f4d8:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f4dc:	f7f8 ffb8 	bl	8450 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f4e0:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f4e4:	fa1f f880 	uxth.w	r8, r0
    f4e8:	4648      	mov	r0, r9
    f4ea:	f7fc fc23 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f4ee:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    f4f2:	1a0d      	subs	r5, r1, r0
    f4f4:	4648      	mov	r0, r9
    f4f6:	f7fc fc49 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f4fa:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f4fe:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f502:	fbb0 f0fa 	udiv	r0, r0, sl
    f506:	1a2d      	subs	r5, r5, r0
    f508:	4648      	mov	r0, r9
    f50a:	f7fc fc13 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f50e:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    f512:	1a0f      	subs	r7, r1, r0
    f514:	4648      	mov	r0, r9
    f516:	f7fc fc39 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f51a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f51e:	4401      	add	r1, r0
    f520:	fbb1 f0fa 	udiv	r0, r1, sl
    f524:	1a39      	subs	r1, r7, r0
    f526:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f52a:	4370      	muls	r0, r6
    f52c:	fbb0 f2f8 	udiv	r2, r0, r8
    f530:	2029      	movs	r0, #41	; 0x29
    f532:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f536:	3260      	adds	r2, #96	; 0x60
    f538:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f53c:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f540:	42a9      	cmp	r1, r5
    f542:	d801      	bhi.n	f548 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a0>
    f544:	4285      	cmp	r5, r0
    f546:	d901      	bls.n	f54c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a4>
    f548:	f7f5 f878 	bl	463c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f54c:	4631      	mov	r1, r6
    f54e:	6920      	ldr	r0, [r4, #16]
    f550:	f7fd faa0 	bl	ca94 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f554:	2100      	movs	r1, #0
    f556:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    f55a:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
    f55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f562:	b570      	push	{r4, r5, r6, lr}
    f564:	460c      	mov	r4, r1
    f566:	4605      	mov	r5, r0
    f568:	f7fc fc10 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f56c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f570:	4408      	add	r0, r1
    f572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f576:	fbb0 f6f1 	udiv	r6, r0, r1
    f57a:	4628      	mov	r0, r5
    f57c:	f7fc fbda 	bl	bd34 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f580:	4430      	add	r0, r6
    f582:	4420      	add	r0, r4
    f584:	bd70      	pop	{r4, r5, r6, pc}
    f586:	f7f3 b969 	b.w	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f58a:	b538      	push	{r3, r4, r5, lr}
    f58c:	4604      	mov	r4, r0
    f58e:	f7ff fc94 	bl	eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f592:	b1b8      	cbz	r0, f5c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31c>
    f594:	4620      	mov	r0, r4
    f596:	f7ff fc88 	bl	eeaa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f59a:	b918      	cbnz	r0, f5a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fc>
    f59c:	4620      	mov	r0, r4
    f59e:	f7ff fc8e 	bl	eebe <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f5a2:	b138      	cbz	r0, f5b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f5a4:	2449      	movs	r4, #73	; 0x49
    f5a6:	4668      	mov	r0, sp
    f5a8:	f7f5 fad2 	bl	4b50 <mpsl_fem_pa_is_configured>
    f5ac:	f89d 0000 	ldrb.w	r0, [sp]
    f5b0:	b928      	cbnz	r0, f5be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    f5b2:	e001      	b.n	f5b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    f5b4:	2442      	movs	r4, #66	; 0x42
    f5b6:	e7f6      	b.n	f5a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fe>
    f5b8:	f7fd fcae 	bl	cf18 <mpsl_fem_lna_is_configured>
    f5bc:	b100      	cbz	r0, f5c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x318>
    f5be:	1de4      	adds	r4, r4, #7
    f5c0:	4620      	mov	r0, r4
    f5c2:	bd38      	pop	{r3, r4, r5, pc}
    f5c4:	206b      	movs	r0, #107	; 0x6b
    f5c6:	bd38      	pop	{r3, r4, r5, pc}
    f5c8:	b570      	push	{r4, r5, r6, lr}
    f5ca:	4604      	mov	r4, r0
    f5cc:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    f5d0:	2500      	movs	r5, #0
    f5d2:	b118      	cbz	r0, f5dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x334>
    f5d4:	2001      	movs	r0, #1
    f5d6:	f000 f887 	bl	f6e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    f5da:	4605      	mov	r5, r0
    f5dc:	4620      	mov	r0, r4
    f5de:	f7ff fc3f 	bl	ee60 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f5e2:	1941      	adds	r1, r0, r5
    f5e4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f5e8:	34b8      	adds	r4, #184	; 0xb8
    f5ea:	f7f2 ffc9 	bl	2580 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f5ee:	2600      	movs	r6, #0
    f5f0:	60e0      	str	r0, [r4, #12]
    f5f2:	f804 6b0b 	strb.w	r6, [r4], #11
    f5f6:	2001      	movs	r0, #1
    f5f8:	f804 0901 	strb.w	r0, [r4], #-1
    f5fc:	2002      	movs	r0, #2
    f5fe:	f804 09c2 	strb.w	r0, [r4], #-194
    f602:	4620      	mov	r0, r4
    f604:	f7ff ffc1 	bl	f58a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    f608:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f60c:	4629      	mov	r1, r5
    f60e:	4620      	mov	r0, r4
    f610:	f7ff ff14 	bl	f43c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    f614:	b930      	cbnz	r0, f624 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    f616:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f61a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f61e:	f7ff ffb2 	bl	f586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    f622:	b128      	cbz	r0, f630 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x388>
    f624:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    f628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f62c:	f7ff bf37 	b.w	f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    f630:	f240 61ef 	movw	r1, #1775	; 0x6ef
    f634:	2030      	movs	r0, #48	; 0x30
    f636:	f7f5 fba7 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f63a:	b510      	push	{r4, lr}
    f63c:	4604      	mov	r4, r0
    f63e:	2000      	movs	r0, #0
    f640:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    f644:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    f648:	f7f3 fd6a 	bl	3120 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f64c:	2020      	movs	r0, #32
    f64e:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
    f652:	bd10      	pop	{r4, pc}
    f654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f658:	2500      	movs	r5, #0
    f65a:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    f65e:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    f662:	4688      	mov	r8, r1
    f664:	4604      	mov	r4, r0
    f666:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    f66a:	2701      	movs	r7, #1
    f66c:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    f670:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f674:	4639      	mov	r1, r7
    f676:	34a0      	adds	r4, #160	; 0xa0
    f678:	f7f7 fa72 	bl	6b60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f67c:	6860      	ldr	r0, [r4, #4]
    f67e:	f8c0 616c 	str.w	r6, [r0, #364]	; 0x16c
    f682:	6861      	ldr	r1, [r4, #4]
    f684:	7820      	ldrb	r0, [r4, #0]
    f686:	f881 0178 	strb.w	r0, [r1, #376]	; 0x178
    f68a:	6861      	ldr	r1, [r4, #4]
    f68c:	f8c1 817c 	str.w	r8, [r1, #380]	; 0x17c
    f690:	6860      	ldr	r0, [r4, #4]
    f692:	f8c0 6170 	str.w	r6, [r0, #368]	; 0x170
    f696:	6864      	ldr	r4, [r4, #4]
    f698:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f69c:	2300      	movs	r3, #0
    f69e:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    f6a2:	461a      	mov	r2, r3
    f6a4:	4619      	mov	r1, r3
    f6a6:	4620      	mov	r0, r4
    f6a8:	9500      	str	r5, [sp, #0]
    f6aa:	f7f8 ffaf 	bl	860c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f6ae:	b120      	cbz	r0, f6ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x412>
    f6b0:	f240 211b 	movw	r1, #539	; 0x21b
    f6b4:	2030      	movs	r0, #48	; 0x30
    f6b6:	f7f5 fb67 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ba:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f6be:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    f6c2:	f884 7144 	strb.w	r7, [r4, #324]	; 0x144
    f6c6:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
    f6ca:	f8a4 5154 	strh.w	r5, [r4, #340]	; 0x154
    f6ce:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    f6d2:	7665      	strb	r5, [r4, #25]
    f6d4:	f834 0cc4 	ldrh.w	r0, [r4, #-196]
    f6d8:	1e40      	subs	r0, r0, #1
    f6da:	f824 0cc4 	strh.w	r0, [r4, #-196]
    f6de:	86e5      	strh	r5, [r4, #54]	; 0x36
    f6e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f6e4:	f7ff bedb 	b.w	f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    f6e8:	b510      	push	{r4, lr}
    f6ea:	f7f9 f999 	bl	8a20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f6ee:	f242 7110 	movw	r1, #10000	; 0x2710
    f6f2:	fbb0 f2f1 	udiv	r2, r0, r1
    f6f6:	fb01 0012 	mls	r0, r1, r2, r0
    f6fa:	bd10      	pop	{r4, pc}
    f6fc:	b570      	push	{r4, r5, r6, lr}
    f6fe:	b140      	cbz	r0, f712 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    f700:	2909      	cmp	r1, #9
    f702:	d248      	bcs.n	f796 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    f704:	e8df f001 	tbb	[pc, r1]
    f708:	3b3b1507 	.word	0x3b3b1507
    f70c:	3f294737 	.word	0x3f294737
    f710:	0043      	.short	0x0043
    f712:	21cd      	movs	r1, #205	; 0xcd
    f714:	e03c      	b.n	f790 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f716:	4604      	mov	r4, r0
    f718:	f7f7 ff96 	bl	7648 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f71c:	b110      	cbz	r0, f724 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x47c>
    f71e:	f240 2179 	movw	r1, #633	; 0x279
    f722:	e035      	b.n	f790 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f724:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    f728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f72c:	38fc      	subs	r0, #252	; 0xfc
    f72e:	f7f3 bf2f 	b.w	3590 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f732:	4605      	mov	r5, r0
    f734:	f7ff fbbd 	bl	eeb2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f738:	b9a8      	cbnz	r0, f766 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4be>
    f73a:	4628      	mov	r0, r5
    f73c:	f7ff fe78 	bl	f430 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    f740:	4604      	mov	r4, r0
    f742:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    f746:	42a0      	cmp	r0, r4
    f748:	d20b      	bcs.n	f762 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    f74a:	1a20      	subs	r0, r4, r0
    f74c:	2103      	movs	r1, #3
    f74e:	f7f2 fe3f 	bl	23d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f752:	b130      	cbz	r0, f762 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    f754:	4628      	mov	r0, r5
    f756:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f75e:	f7ff bb7d 	b.w	ee5c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f762:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f766:	4628      	mov	r0, r5
    f768:	f7f7 ff8a 	bl	7680 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f76c:	2800      	cmp	r0, #0
    f76e:	d014      	beq.n	f79a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    f770:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    f774:	e00c      	b.n	f790 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f77a:	f7fc bbf9 	b.w	bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f77e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f782:	f7ff bdee 	b.w	f362 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    f786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f78a:	f7ff be48 	b.w	f41e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    f78e:	21ed      	movs	r1, #237	; 0xed
    f790:	2030      	movs	r0, #48	; 0x30
    f792:	f7f5 faf9 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f796:	21f1      	movs	r1, #241	; 0xf1
    f798:	e7fa      	b.n	f790 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f79a:	bd70      	pop	{r4, r5, r6, pc}
    f79c:	b510      	push	{r4, lr}
    f79e:	0004      	movs	r4, r0
    f7a0:	d008      	beq.n	f7b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    f7a2:	2909      	cmp	r1, #9
    f7a4:	d25c      	bcs.n	f860 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b8>
    f7a6:	e8df f001 	tbb	[pc, r1]
    f7aa:	3607      	.short	0x3607
    f7ac:	5b3a3e3e 	.word	0x5b3a3e3e
    f7b0:	00574a43 	.word	0x00574a43
    f7b4:	2196      	movs	r1, #150	; 0x96
    f7b6:	e050      	b.n	f85a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    f7b8:	2100      	movs	r1, #0
    f7ba:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
    f7be:	f894 1158 	ldrb.w	r1, [r4, #344]	; 0x158
    f7c2:	4620      	mov	r0, r4
    f7c4:	b189      	cbz	r1, f7ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x542>
    f7c6:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    f7ca:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    f7ce:	428a      	cmp	r2, r1
    f7d0:	d106      	bne.n	f7e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x538>
    f7d2:	f8b0 210c 	ldrh.w	r2, [r0, #268]	; 0x10c
    f7d6:	1a51      	subs	r1, r2, r1
    f7d8:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    f7dc:	4611      	mov	r1, r2
    f7de:	e00d      	b.n	f7fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x554>
    f7e0:	1a51      	subs	r1, r2, r1
    f7e2:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    f7e6:	b291      	uxth	r1, r2
    f7e8:	e008      	b.n	f7fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x554>
    f7ea:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
    f7ee:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    f7f2:	1a89      	subs	r1, r1, r2
    f7f4:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    f7f8:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
    f7fc:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    f800:	f8d0 1168 	ldr.w	r1, [r0, #360]	; 0x168
    f804:	f8c0 116c 	str.w	r1, [r0, #364]	; 0x16c
    f808:	f7f9 fbb6 	bl	8f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f80c:	4620      	mov	r0, r4
    f80e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f812:	f7f9 b90f 	b.w	8a34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>
    f816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f81a:	f000 b883 	b.w	f924 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f822:	f7fc bba5 	b.w	bf70 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f826:	4620      	mov	r0, r4
    f828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f82c:	f7f9 b938 	b.w	8aa0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>
    f830:	2001      	movs	r0, #1
    f832:	f7f2 fdbd 	bl	23b0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f83a:	f7fe bca4 	b.w	e186 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f83e:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f842:	2804      	cmp	r0, #4
    f844:	d001      	beq.n	f84a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a2>
    f846:	21b8      	movs	r1, #184	; 0xb8
    f848:	e007      	b.n	f85a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    f84a:	4620      	mov	r0, r4
    f84c:	f7ff fef5 	bl	f63a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    f850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f854:	f7f7 bbce 	b.w	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f858:	21c1      	movs	r1, #193	; 0xc1
    f85a:	2030      	movs	r0, #48	; 0x30
    f85c:	f7f5 fa94 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f860:	21c5      	movs	r1, #197	; 0xc5
    f862:	e7fa      	b.n	f85a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    f864:	b510      	push	{r4, lr}
    f866:	f7fc fa91 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f86a:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f86e:	4408      	add	r0, r1
    f870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f874:	fbb0 f0f1 	udiv	r0, r0, r1
    f878:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    f87c:	bd10      	pop	{r4, pc}
    f87e:	01f4      	.short	0x01f4
    f880:	009600fa 	.word	0x009600fa
    f884:	004b0064 	.word	0x004b0064
    f888:	001e0032 	.word	0x001e0032
    f88c:	000a0014 	.word	0x000a0014
    f890:	00020005 	.word	0x00020005
    f894:	0001      	.short	0x0001
    f896:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f89a:	f001 0307 	and.w	r3, r1, #7
    f89e:	7802      	ldrb	r2, [r0, #0]
    f8a0:	2101      	movs	r1, #1
    f8a2:	4099      	lsls	r1, r3
    f8a4:	438a      	bics	r2, r1
    f8a6:	7002      	strb	r2, [r0, #0]
    f8a8:	4770      	bx	lr
    f8aa:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    f8ae:	f001 0307 	and.w	r3, r1, #7
    f8b2:	7810      	ldrb	r0, [r2, #0]
    f8b4:	2101      	movs	r1, #1
    f8b6:	4099      	lsls	r1, r3
    f8b8:	4308      	orrs	r0, r1
    f8ba:	7010      	strb	r0, [r2, #0]
    f8bc:	4770      	bx	lr

0000f8be <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f8be:	b510      	push	{r4, lr}
    f8c0:	4604      	mov	r4, r0
    f8c2:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    f8c6:	6921      	ldr	r1, [r4, #16]
    f8c8:	4288      	cmp	r0, r1
    f8ca:	d109      	bne.n	f8e0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f8cc:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    f8d0:	8b22      	ldrh	r2, [r4, #24]
    f8d2:	4291      	cmp	r1, r2
    f8d4:	d104      	bne.n	f8e0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f8d6:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    f8da:	8b62      	ldrh	r2, [r4, #26]
    f8dc:	4291      	cmp	r1, r2
    f8de:	d013      	beq.n	f908 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    f8e0:	8821      	ldrh	r1, [r4, #0]
    f8e2:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    f8e6:	f7fe fcd5 	bl	e294 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f8ea:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    f8ee:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    f8f2:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    f8f6:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    f8fa:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    f8fe:	20ff      	movs	r0, #255	; 0xff
    f900:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    f904:	f7f7 fb76 	bl	6ff4 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f908:	2102      	movs	r1, #2
    f90a:	4620      	mov	r0, r4
    f90c:	f7f7 f928 	bl	6b60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f910:	2000      	movs	r0, #0
    f912:	f804 0f86 	strb.w	r0, [r4, #134]!
    f916:	2003      	movs	r0, #3
    f918:	70e0      	strb	r0, [r4, #3]
    f91a:	bd10      	pop	{r4, pc}

0000f91c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f91c:	f7f5 bdda 	b.w	54d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f920 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f920:	2000      	movs	r0, #0
    f922:	4770      	bx	lr

0000f924 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f924:	f7f6 bab4 	b.w	5e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f928 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f928:	2100      	movs	r1, #0
    f92a:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    f92e:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    f932:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    f936:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
    f93a:	b109      	cbz	r1, f940 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f93c:	2102      	movs	r1, #2
    f93e:	e000      	b.n	f942 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f940:	2103      	movs	r1, #3
    f942:	f7f8 bd2f 	b.w	83a4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f946:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f94a:	28fe      	cmp	r0, #254	; 0xfe
    f94c:	d001      	beq.n	f952 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f94e:	2001      	movs	r0, #1
    f950:	4770      	bx	lr
    f952:	2000      	movs	r0, #0
    f954:	4770      	bx	lr
    f956:	b510      	push	{r4, lr}
    f958:	2801      	cmp	r0, #1
    f95a:	d006      	beq.n	f96a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f95c:	2802      	cmp	r0, #2
    f95e:	d004      	beq.n	f96a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f960:	f44f 711d 	mov.w	r1, #628	; 0x274
    f964:	2006      	movs	r0, #6
    f966:	f7f5 fa0f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f96a:	bd10      	pop	{r4, pc}
    f96c:	2801      	cmp	r0, #1
    f96e:	d002      	beq.n	f976 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f970:	2802      	cmp	r0, #2
    f972:	d105      	bne.n	f980 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f974:	e002      	b.n	f97c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f976:	2901      	cmp	r1, #1
    f978:	d004      	beq.n	f984 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f97a:	e001      	b.n	f980 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f97c:	2902      	cmp	r1, #2
    f97e:	d001      	beq.n	f984 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f980:	2000      	movs	r0, #0
    f982:	4770      	bx	lr
    f984:	2001      	movs	r0, #1
    f986:	4770      	bx	lr
    f988:	1a40      	subs	r0, r0, r1
    f98a:	b200      	sxth	r0, r0
    f98c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f990:	4288      	cmp	r0, r1
    f992:	dc01      	bgt.n	f998 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f994:	2800      	cmp	r0, #0
    f996:	dc01      	bgt.n	f99c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f998:	2001      	movs	r0, #1
    f99a:	4770      	bx	lr
    f99c:	2000      	movs	r0, #0
    f99e:	4770      	bx	lr
    f9a0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f9a4:	f001 0107 	and.w	r1, r1, #7
    f9a8:	7800      	ldrb	r0, [r0, #0]
    f9aa:	40c8      	lsrs	r0, r1
    f9ac:	f000 0001 	and.w	r0, r0, #1
    f9b0:	4770      	bx	lr
    f9b2:	b118      	cbz	r0, f9bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
    f9b4:	2802      	cmp	r0, #2
    f9b6:	d001      	beq.n	f9bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
    f9b8:	2001      	movs	r0, #1
    f9ba:	4770      	bx	lr
    f9bc:	2000      	movs	r0, #0
    f9be:	4770      	bx	lr

0000f9c0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f9c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f9c2:	7881      	ldrb	r1, [r0, #2]
    f9c4:	4604      	mov	r4, r0
    f9c6:	291a      	cmp	r1, #26
    f9c8:	d025      	beq.n	fa16 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f9ca:	dc0e      	bgt.n	f9ea <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f9cc:	2916      	cmp	r1, #22
    f9ce:	d22c      	bcs.n	fa2a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9d0:	e8df f001 	tbb	[pc, r1]
    f9d4:	2b2b2b2b 	.word	0x2b2b2b2b
    f9d8:	2b2b212b 	.word	0x2b2b212b
    f9dc:	2b2b2b2b 	.word	0x2b2b2b2b
    f9e0:	2b2b2b2b 	.word	0x2b2b2b2b
    f9e4:	212b2b2b 	.word	0x212b2b2b
    f9e8:	2121      	.short	0x2121
    f9ea:	292a      	cmp	r1, #42	; 0x2a
    f9ec:	d01d      	beq.n	fa2a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9ee:	dc0b      	bgt.n	fa08 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f9f0:	f1a1 011e 	sub.w	r1, r1, #30
    f9f4:	290c      	cmp	r1, #12
    f9f6:	d218      	bcs.n	fa2a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9f8:	e8df f001 	tbb	[pc, r1]
    f9fc:	17171717 	.word	0x17171717
    fa00:	17171717 	.word	0x17171717
    fa04:	0d171717 	.word	0x0d171717
    fa08:	393a      	subs	r1, #58	; 0x3a
    fa0a:	2904      	cmp	r1, #4
    fa0c:	d20d      	bcs.n	fa2a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa0e:	e8df f001 	tbb	[pc, r1]
    fa12:	020c      	.short	0x020c
    fa14:	020c      	.short	0x020c
    fa16:	8820      	ldrh	r0, [r4, #0]
    fa18:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fa1c:	d205      	bcs.n	fa2a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa1e:	4669      	mov	r1, sp
    fa20:	f7fe fc27 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa24:	b118      	cbz	r0, fa2e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fa26:	2002      	movs	r0, #2
    fa28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa2a:	2012      	movs	r0, #18
    fa2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa2e:	9d01      	ldr	r5, [sp, #4]
    fa30:	4668      	mov	r0, sp
    fa32:	462e      	mov	r6, r5
    fa34:	f505 75c4 	add.w	r5, r5, #392	; 0x188
    fa38:	f206 1689 	addw	r6, r6, #393	; 0x189
    fa3c:	f000 fead 	bl	1079a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    fa40:	b138      	cbz	r0, fa52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x92>
    fa42:	7828      	ldrb	r0, [r5, #0]
    fa44:	f88d 0008 	strb.w	r0, [sp, #8]
    fa48:	9802      	ldr	r0, [sp, #8]
    fa4a:	9002      	str	r0, [sp, #8]
    fa4c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fa50:	b108      	cbz	r0, fa56 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x96>
    fa52:	200c      	movs	r0, #12
    fa54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa56:	20ff      	movs	r0, #255	; 0xff
    fa58:	7028      	strb	r0, [r5, #0]
    fa5a:	78a0      	ldrb	r0, [r4, #2]
    fa5c:	7030      	strb	r0, [r6, #0]
    fa5e:	4668      	mov	r0, sp
    fa60:	f7fe ffa4 	bl	e9ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fa64:	2000      	movs	r0, #0
    fa66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fa68 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fa68:	b510      	push	{r4, lr}
    fa6a:	4604      	mov	r4, r0
    fa6c:	7800      	ldrb	r0, [r0, #0]
    fa6e:	b118      	cbz	r0, fa78 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fa70:	2801      	cmp	r0, #1
    fa72:	d001      	beq.n	fa78 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fa74:	2012      	movs	r0, #18
    fa76:	bd10      	pop	{r4, pc}
    fa78:	f000 fec8 	bl	1080c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fa7c:	b120      	cbz	r0, fa88 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fa7e:	f7f6 fe63 	bl	6748 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa82:	b108      	cbz	r0, fa88 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fa84:	200c      	movs	r0, #12
    fa86:	bd10      	pop	{r4, pc}
    fa88:	7820      	ldrb	r0, [r4, #0]
    fa8a:	f7ff ff92 	bl	f9b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fa8e:	1de2      	adds	r2, r4, #7
    fa90:	f104 0317 	add.w	r3, r4, #23
    fa94:	1c61      	adds	r1, r4, #1
    fa96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa9a:	f7f6 be87 	b.w	67ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fa9e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fa9e:	b510      	push	{r4, lr}
    faa0:	4604      	mov	r4, r0
    faa2:	f000 ffa0 	bl	109e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    faa6:	b108      	cbz	r0, faac <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    faa8:	200c      	movs	r0, #12
    faaa:	bd10      	pop	{r4, pc}
    faac:	7820      	ldrb	r0, [r4, #0]
    faae:	b118      	cbz	r0, fab8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fab0:	2801      	cmp	r0, #1
    fab2:	d001      	beq.n	fab8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fab4:	2012      	movs	r0, #18
    fab6:	bd10      	pop	{r4, pc}
    fab8:	f7ff ff7b 	bl	f9b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fabc:	1c61      	adds	r1, r4, #1
    fabe:	f7f6 feed 	bl	689c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fac2:	b108      	cbz	r0, fac8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fac4:	2000      	movs	r0, #0
    fac6:	bd10      	pop	{r4, pc}
    fac8:	2007      	movs	r0, #7
    faca:	bd10      	pop	{r4, pc}

0000facc <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    facc:	b510      	push	{r4, lr}
    face:	f000 fe9d 	bl	1080c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fad2:	b120      	cbz	r0, fade <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fad4:	f7f6 fe38 	bl	6748 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fad8:	b108      	cbz	r0, fade <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fada:	200c      	movs	r0, #12
    fadc:	bd10      	pop	{r4, pc}
    fade:	f7f6 feab 	bl	6838 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fae2:	2000      	movs	r0, #0
    fae4:	bd10      	pop	{r4, pc}

0000fae6 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fae6:	b510      	push	{r4, lr}
    fae8:	f000 ff7d 	bl	109e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    faec:	b108      	cbz	r0, faf2 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    faee:	200c      	movs	r0, #12
    faf0:	bd10      	pop	{r4, pc}
    faf2:	f7f6 fefb 	bl	68ec <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    faf6:	2000      	movs	r0, #0
    faf8:	bd10      	pop	{r4, pc}

0000fafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fafa:	b510      	push	{r4, lr}
    fafc:	460b      	mov	r3, r1
    fafe:	2201      	movs	r2, #1
    fb00:	f100 0110 	add.w	r1, r0, #16
    fb04:	f7fe fb97 	bl	e236 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb08:	2000      	movs	r0, #0
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fb0c:	b510      	push	{r4, lr}
    fb0e:	8800      	ldrh	r0, [r0, #0]
    fb10:	2100      	movs	r1, #0
    fb12:	f7fe f925 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb16:	b118      	cbz	r0, fb20 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fb18:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    fb1c:	b111      	cbz	r1, fb24 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fb1e:	e007      	b.n	fb30 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fb20:	2002      	movs	r0, #2
    fb22:	bd10      	pop	{r4, pc}
    fb24:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    fb28:	2914      	cmp	r1, #20
    fb2a:	d003      	beq.n	fb34 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb2c:	2915      	cmp	r1, #21
    fb2e:	d001      	beq.n	fb34 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb30:	200c      	movs	r0, #12
    fb32:	bd10      	pop	{r4, pc}
    fb34:	2102      	movs	r1, #2
    fb36:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
    fb3a:	2000      	movs	r0, #0
    fb3c:	bd10      	pop	{r4, pc}

0000fb3e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb40:	4605      	mov	r5, r0
    fb42:	8800      	ldrh	r0, [r0, #0]
    fb44:	2100      	movs	r1, #0
    fb46:	f7fe f90b 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb4a:	0004      	movs	r4, r0
    fb4c:	d003      	beq.n	fb56 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fb4e:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
    fb52:	b110      	cbz	r0, fb5a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fb54:	e011      	b.n	fb7a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fb56:	2002      	movs	r0, #2
    fb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb5a:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    fb5e:	2814      	cmp	r0, #20
    fb60:	d001      	beq.n	fb66 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fb62:	2815      	cmp	r0, #21
    fb64:	d109      	bne.n	fb7a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fb66:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    fb6a:	f88d 0000 	strb.w	r0, [sp]
    fb6e:	9800      	ldr	r0, [sp, #0]
    fb70:	9000      	str	r0, [sp, #0]
    fb72:	f89d 0000 	ldrb.w	r0, [sp]
    fb76:	2601      	movs	r6, #1
    fb78:	b108      	cbz	r0, fb7e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fb7a:	200c      	movs	r0, #12
    fb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb7e:	2210      	movs	r2, #16
    fb80:	1ca9      	adds	r1, r5, #2
    fb82:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
    fb86:	f7fd f8c6 	bl	cd16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fb8a:	f884 618b 	strb.w	r6, [r4, #395]	; 0x18b
    fb8e:	2000      	movs	r0, #0
    fb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fb92 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fb92:	b510      	push	{r4, lr}
    fb94:	2108      	movs	r1, #8
    fb96:	f7f5 f991 	bl	4ebc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fb9a:	2000      	movs	r0, #0
    fb9c:	bd10      	pop	{r4, pc}

0000fb9e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fb9e:	b510      	push	{r4, lr}
    fba0:	4604      	mov	r4, r0
    fba2:	f000 fe1c 	bl	107de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fba6:	f7ff f98e 	bl	eec6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fbaa:	7020      	strb	r0, [r4, #0]
    fbac:	2000      	movs	r0, #0
    fbae:	bd10      	pop	{r4, pc}

0000fbb0 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fbb0:	b510      	push	{r4, lr}
    fbb2:	4604      	mov	r4, r0
    fbb4:	f000 fde8 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    fbb8:	b140      	cbz	r0, fbcc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fbba:	20fb      	movs	r0, #251	; 0xfb
    fbbc:	8020      	strh	r0, [r4, #0]
    fbbe:	f640 0148 	movw	r1, #2120	; 0x848
    fbc2:	8061      	strh	r1, [r4, #2]
    fbc4:	80a0      	strh	r0, [r4, #4]
    fbc6:	80e1      	strh	r1, [r4, #6]
    fbc8:	2000      	movs	r0, #0
    fbca:	bd10      	pop	{r4, pc}
    fbcc:	2001      	movs	r0, #1
    fbce:	bd10      	pop	{r4, pc}

0000fbd0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fbd0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fbd2:	460d      	mov	r5, r1
    fbd4:	4606      	mov	r6, r0
    fbd6:	f000 fdf9 	bl	107cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    fbda:	b300      	cbz	r0, fc1e <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4e>
    fbdc:	8830      	ldrh	r0, [r6, #0]
    fbde:	4669      	mov	r1, sp
    fbe0:	f7fe fb47 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fbe4:	2800      	cmp	r0, #0
    fbe6:	d119      	bne.n	fc1c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    fbe8:	9c01      	ldr	r4, [sp, #4]
    fbea:	2700      	movs	r7, #0
    fbec:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    fbf0:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    fbf4:	f000 fc64 	bl	104c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    fbf8:	70a8      	strb	r0, [r5, #2]
    fbfa:	7860      	ldrb	r0, [r4, #1]
    fbfc:	f000 fc60 	bl	104c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    fc00:	70e8      	strb	r0, [r5, #3]
    fc02:	78a0      	ldrb	r0, [r4, #2]
    fc04:	f88d 0008 	strb.w	r0, [sp, #8]
    fc08:	9802      	ldr	r0, [sp, #8]
    fc0a:	9002      	str	r0, [sp, #8]
    fc0c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fc10:	3c6e      	subs	r4, #110	; 0x6e
    fc12:	2800      	cmp	r0, #0
    fc14:	d1ea      	bne.n	fbec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x1c>
    fc16:	8830      	ldrh	r0, [r6, #0]
    fc18:	8028      	strh	r0, [r5, #0]
    fc1a:	2000      	movs	r0, #0
    fc1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fc1e:	2001      	movs	r0, #1
    fc20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fc22 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fc22:	b51c      	push	{r2, r3, r4, lr}
    fc24:	8800      	ldrh	r0, [r0, #0]
    fc26:	4669      	mov	r1, sp
    fc28:	f7fe fb23 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc2c:	2800      	cmp	r0, #0
    fc2e:	d10c      	bne.n	fc4a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    fc30:	f89d 0000 	ldrb.w	r0, [sp]
    fc34:	2801      	cmp	r0, #1
    fc36:	d10f      	bne.n	fc58 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x36>
    fc38:	9801      	ldr	r0, [sp, #4]
    fc3a:	f000 fdb1 	bl	107a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    fc3e:	b128      	cbz	r0, fc4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fc40:	9801      	ldr	r0, [sp, #4]
    fc42:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    fc46:	b118      	cbz	r0, fc50 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    fc48:	203a      	movs	r0, #58	; 0x3a
    fc4a:	bd1c      	pop	{r2, r3, r4, pc}
    fc4c:	2002      	movs	r0, #2
    fc4e:	bd1c      	pop	{r2, r3, r4, pc}
    fc50:	9901      	ldr	r1, [sp, #4]
    fc52:	2001      	movs	r0, #1
    fc54:	f881 01c5 	strb.w	r0, [r1, #453]	; 0x1c5
    fc58:	2000      	movs	r0, #0
    fc5a:	bd1c      	pop	{r2, r3, r4, pc}

0000fc5c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fc5c:	2108      	movs	r1, #8
    fc5e:	7001      	strb	r1, [r0, #0]
    fc60:	2000      	movs	r0, #0
    fc62:	4770      	bx	lr

0000fc64 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fc64:	b510      	push	{r4, lr}
    fc66:	4604      	mov	r4, r0
    fc68:	20d8      	movs	r0, #216	; 0xd8
    fc6a:	7020      	strb	r0, [r4, #0]
    fc6c:	f000 fd6d 	bl	1074a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    fc70:	7060      	strb	r0, [r4, #1]
    fc72:	2000      	movs	r0, #0
    fc74:	bd10      	pop	{r4, pc}

0000fc76 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fc76:	2108      	movs	r1, #8
    fc78:	7001      	strb	r1, [r0, #0]
    fc7a:	2000      	movs	r0, #0
    fc7c:	4770      	bx	lr

0000fc7e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fc7e:	b510      	push	{r4, lr}
    fc80:	4604      	mov	r4, r0
    fc82:	7800      	ldrb	r0, [r0, #0]
    fc84:	b108      	cbz	r0, fc8a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fc86:	2801      	cmp	r0, #1
    fc88:	d110      	bne.n	fcac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fc8a:	f000 fdbf 	bl	1080c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fc8e:	b120      	cbz	r0, fc9a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fc90:	f7f6 fd5a 	bl	6748 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fc94:	b108      	cbz	r0, fc9a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fc96:	200c      	movs	r0, #12
    fc98:	bd10      	pop	{r4, pc}
    fc9a:	7820      	ldrb	r0, [r4, #0]
    fc9c:	f7ff fe89 	bl	f9b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fca0:	1c61      	adds	r1, r4, #1
    fca2:	f7fe faae 	bl	e202 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fca6:	b108      	cbz	r0, fcac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fca8:	2000      	movs	r0, #0
    fcaa:	bd10      	pop	{r4, pc}
    fcac:	2012      	movs	r0, #18
    fcae:	bd10      	pop	{r4, pc}

0000fcb0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fcb0:	b510      	push	{r4, lr}
    fcb2:	4604      	mov	r4, r0
    fcb4:	f000 fe97 	bl	109e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    fcb8:	b108      	cbz	r0, fcbe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fcba:	200c      	movs	r0, #12
    fcbc:	bd10      	pop	{r4, pc}
    fcbe:	7820      	ldrb	r0, [r4, #0]
    fcc0:	b108      	cbz	r0, fcc6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fcc2:	2801      	cmp	r0, #1
    fcc4:	d107      	bne.n	fcd6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcc6:	f7ff fe74 	bl	f9b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fcca:	1c61      	adds	r1, r4, #1
    fccc:	f7fe faa8 	bl	e220 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fcd0:	b108      	cbz	r0, fcd6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcd2:	2000      	movs	r0, #0
    fcd4:	bd10      	pop	{r4, pc}
    fcd6:	2012      	movs	r0, #18
    fcd8:	bd10      	pop	{r4, pc}

0000fcda <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fcda:	b510      	push	{r4, lr}
    fcdc:	4604      	mov	r4, r0
    fcde:	f000 fd95 	bl	1080c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fce2:	b108      	cbz	r0, fce8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fce4:	200c      	movs	r0, #12
    fce6:	bd10      	pop	{r4, pc}
    fce8:	7820      	ldrb	r0, [r4, #0]
    fcea:	f000 0001 	and.w	r0, r0, #1
    fcee:	f7f6 fd25 	bl	673c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fcf2:	2000      	movs	r0, #0
    fcf4:	bd10      	pop	{r4, pc}

0000fcf6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fcf6:	b51c      	push	{r2, r3, r4, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	f000 fd70 	bl	107de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fcfe:	2000      	movs	r0, #0
    fd00:	f88d 0002 	strb.w	r0, [sp, #2]
    fd04:	2103      	movs	r1, #3
    fd06:	f88d 1001 	strb.w	r1, [sp, #1]
    fd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
    fd0e:	f88d 1003 	strb.w	r1, [sp, #3]
    fd12:	f88d 0000 	strb.w	r0, [sp]
    fd16:	4668      	mov	r0, sp
    fd18:	9401      	str	r4, [sp, #4]
    fd1a:	f000 f9f6 	bl	1010a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fd1e:	bd1c      	pop	{r2, r3, r4, pc}

0000fd20 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fd20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fd22:	4605      	mov	r5, r0
    fd24:	f000 fd5b 	bl	107de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fd28:	4606      	mov	r6, r0
    fd2a:	7828      	ldrb	r0, [r5, #0]
    fd2c:	2400      	movs	r4, #0
    fd2e:	b160      	cbz	r0, fd4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd30:	f88d 4000 	strb.w	r4, [sp]
    fd34:	2001      	movs	r0, #1
    fd36:	f10d 0101 	add.w	r1, sp, #1
    fd3a:	f7f5 fecb 	bl	5ad4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fd3e:	b120      	cbz	r0, fd4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd40:	4668      	mov	r0, sp
    fd42:	f000 f897 	bl	fe74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fd46:	2800      	cmp	r0, #0
    fd48:	d112      	bne.n	fd70 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd4a:	f88d 400c 	strb.w	r4, [sp, #12]
    fd4e:	4630      	mov	r0, r6
    fd50:	f7ff f8af 	bl	eeb2 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fd54:	b118      	cbz	r0, fd5e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fd56:	2080      	movs	r0, #128	; 0x80
    fd58:	f8ad 000d 	strh.w	r0, [sp, #13]
    fd5c:	e001      	b.n	fd62 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fd5e:	f8ad 400d 	strh.w	r4, [sp, #13]
    fd62:	f88d 400f 	strb.w	r4, [sp, #15]
    fd66:	7828      	ldrb	r0, [r5, #0]
    fd68:	2801      	cmp	r0, #1
    fd6a:	d003      	beq.n	fd74 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fd6c:	b138      	cbz	r0, fd7e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fd6e:	2012      	movs	r0, #18
    fd70:	b004      	add	sp, #16
    fd72:	bd70      	pop	{r4, r5, r6, pc}
    fd74:	a903      	add	r1, sp, #12
    fd76:	4630      	mov	r0, r6
    fd78:	f7fb f9a0 	bl	b0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fd7c:	e7f8      	b.n	fd70 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd7e:	4630      	mov	r0, r6
    fd80:	f000 fd4b 	bl	1081a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x392>
    fd84:	e7f4      	b.n	fd70 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fd86 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fd86:	b530      	push	{r4, r5, lr}
    fd88:	b08b      	sub	sp, #44	; 0x2c
    fd8a:	4604      	mov	r4, r0
    fd8c:	f000 fd27 	bl	107de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fd90:	4602      	mov	r2, r0
    fd92:	7920      	ldrb	r0, [r4, #4]
    fd94:	2804      	cmp	r0, #4
    fd96:	d803      	bhi.n	fda0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fd98:	8860      	ldrh	r0, [r4, #2]
    fd9a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fd9e:	d902      	bls.n	fda6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fda0:	2012      	movs	r0, #18
    fda2:	b00b      	add	sp, #44	; 0x2c
    fda4:	bd30      	pop	{r4, r5, pc}
    fda6:	2500      	movs	r5, #0
    fda8:	f88d 5004 	strb.w	r5, [sp, #4]
    fdac:	7921      	ldrb	r1, [r4, #4]
    fdae:	9500      	str	r5, [sp, #0]
    fdb0:	f89d 0000 	ldrb.w	r0, [sp]
    fdb4:	2905      	cmp	r1, #5
    fdb6:	f040 0010 	orr.w	r0, r0, #16
    fdba:	f88d 0000 	strb.w	r0, [sp]
    fdbe:	d254      	bcs.n	fe6a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fdc0:	e8df f001 	tbb	[pc, r1]
    fdc4:	11050803 	.word	0x11050803
    fdc8:	000b      	.short	0x000b
    fdca:	f040 0001 	orr.w	r0, r0, #1
    fdce:	f040 0002 	orr.w	r0, r0, #2
    fdd2:	e006      	b.n	fde2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fdd4:	f040 0009 	orr.w	r0, r0, #9
    fdd8:	e001      	b.n	fdde <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fdda:	f040 0001 	orr.w	r0, r0, #1
    fdde:	f040 0004 	orr.w	r0, r0, #4
    fde2:	f88d 0000 	strb.w	r0, [sp]
    fde6:	f8bd 0000 	ldrh.w	r0, [sp]
    fdea:	9000      	str	r0, [sp, #0]
    fdec:	f8bd 0000 	ldrh.w	r0, [sp]
    fdf0:	f8ad 0005 	strh.w	r0, [sp, #5]
    fdf4:	8821      	ldrh	r1, [r4, #0]
    fdf6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fdfa:	f361 201f 	bfi	r0, r1, #8, #24
    fdfe:	f8cd 0006 	str.w	r0, [sp, #6]
    fe02:	8861      	ldrh	r1, [r4, #2]
    fe04:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fe08:	f361 201f 	bfi	r0, r1, #8, #24
    fe0c:	f8cd 0009 	str.w	r0, [sp, #9]
    fe10:	7b60      	ldrb	r0, [r4, #13]
    fe12:	f88d 000d 	strb.w	r0, [sp, #13]
    fe16:	7960      	ldrb	r0, [r4, #5]
    fe18:	f88d 000e 	strb.w	r0, [sp, #14]
    fe1c:	79a0      	ldrb	r0, [r4, #6]
    fe1e:	f88d 000f 	strb.w	r0, [sp, #15]
    fe22:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fe26:	9004      	str	r0, [sp, #16]
    fe28:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fe2c:	f8ad 0014 	strh.w	r0, [sp, #20]
    fe30:	7ba0      	ldrb	r0, [r4, #14]
    fe32:	f88d 0016 	strb.w	r0, [sp, #22]
    fe36:	207f      	movs	r0, #127	; 0x7f
    fe38:	f88d 0017 	strb.w	r0, [sp, #23]
    fe3c:	2001      	movs	r0, #1
    fe3e:	f88d 0018 	strb.w	r0, [sp, #24]
    fe42:	f88d 5019 	strb.w	r5, [sp, #25]
    fe46:	f88d 001a 	strb.w	r0, [sp, #26]
    fe4a:	f88d 501b 	strb.w	r5, [sp, #27]
    fe4e:	4610      	mov	r0, r2
    fe50:	f7ff f84b 	bl	eeea <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fe54:	f88d 001c 	strb.w	r0, [sp, #28]
    fe58:	f88d 501d 	strb.w	r5, [sp, #29]
    fe5c:	f88d 501e 	strb.w	r5, [sp, #30]
    fe60:	a909      	add	r1, sp, #36	; 0x24
    fe62:	a801      	add	r0, sp, #4
    fe64:	f000 f8dc 	bl	10020 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fe68:	e79b      	b.n	fda2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fe6a:	f241 01ff 	movw	r1, #4351	; 0x10ff
    fe6e:	2039      	movs	r0, #57	; 0x39
    fe70:	f7f4 ff8a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fe74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fe74:	b570      	push	{r4, r5, r6, lr}
    fe76:	4604      	mov	r4, r0
    fe78:	7800      	ldrb	r0, [r0, #0]
    fe7a:	2101      	movs	r1, #1
    fe7c:	f7fd ff70 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe80:	0005      	movs	r5, r0
    fe82:	d007      	beq.n	fe94 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fe84:	f7ff f9f6 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe88:	b160      	cbz	r0, fea4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fe8a:	4628      	mov	r0, r5
    fe8c:	f7ff f817 	bl	eebe <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fe90:	b110      	cbz	r0, fe98 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fe92:	e005      	b.n	fea0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fe94:	2042      	movs	r0, #66	; 0x42
    fe96:	bd70      	pop	{r4, r5, r6, pc}
    fe98:	4628      	mov	r0, r5
    fe9a:	f7ff f806 	bl	eeaa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fe9e:	b108      	cbz	r0, fea4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fea0:	200c      	movs	r0, #12
    fea2:	bd70      	pop	{r4, r5, r6, pc}
    fea4:	1c61      	adds	r1, r4, #1
    fea6:	4628      	mov	r0, r5
    fea8:	f7ff f817 	bl	eeda <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    feac:	2000      	movs	r0, #0
    feae:	bd70      	pop	{r4, r5, r6, pc}

0000feb0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    feb0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    feb2:	460d      	mov	r5, r1
    feb4:	4604      	mov	r4, r0
    feb6:	f000 fc67 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    feba:	b130      	cbz	r0, feca <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    febc:	88a2      	ldrh	r2, [r4, #4]
    febe:	f244 2090 	movw	r0, #17040	; 0x4290
    fec2:	4282      	cmp	r2, r0
    fec4:	d903      	bls.n	fece <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    fec6:	2012      	movs	r0, #18
    fec8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    feca:	2001      	movs	r0, #1
    fecc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fece:	f640 0048 	movw	r0, #2120	; 0x848
    fed2:	4282      	cmp	r2, r0
    fed4:	d300      	bcc.n	fed8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    fed6:	4602      	mov	r2, r0
    fed8:	8820      	ldrh	r0, [r4, #0]
    feda:	f8ad 0000 	strh.w	r0, [sp]
    fede:	8860      	ldrh	r0, [r4, #2]
    fee0:	f8ad 0002 	strh.w	r0, [sp, #2]
    fee4:	f8ad 2004 	strh.w	r2, [sp, #4]
    fee8:	8860      	ldrh	r0, [r4, #2]
    feea:	f8ad 0006 	strh.w	r0, [sp, #6]
    feee:	f8ad 2008 	strh.w	r2, [sp, #8]
    fef2:	8820      	ldrh	r0, [r4, #0]
    fef4:	8028      	strh	r0, [r5, #0]
    fef6:	4668      	mov	r0, sp
    fef8:	f000 fcb5 	bl	10866 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    fefc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fefe <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fefe:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ff00:	4604      	mov	r4, r0
    ff02:	f000 fc63 	bl	107cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    ff06:	b1b0      	cbz	r0, ff36 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x38>
    ff08:	f10d 0007 	add.w	r0, sp, #7
    ff0c:	9000      	str	r0, [sp, #0]
    ff0e:	7922      	ldrb	r2, [r4, #4]
    ff10:	78e1      	ldrb	r1, [r4, #3]
    ff12:	78a0      	ldrb	r0, [r4, #2]
    ff14:	f10d 0306 	add.w	r3, sp, #6
    ff18:	f000 fd29 	bl	1096e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
    ff1c:	2800      	cmp	r0, #0
    ff1e:	d109      	bne.n	ff34 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x36>
    ff20:	8820      	ldrh	r0, [r4, #0]
    ff22:	f8ad 0004 	strh.w	r0, [sp, #4]
    ff26:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ff2a:	f8ad 0008 	strh.w	r0, [sp, #8]
    ff2e:	a801      	add	r0, sp, #4
    ff30:	f000 f9a6 	bl	10280 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ff34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff36:	2001      	movs	r0, #1
    ff38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ff3a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ff3a:	b510      	push	{r4, lr}
    ff3c:	4604      	mov	r4, r0
    ff3e:	f000 fc65 	bl	1080c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    ff42:	b120      	cbz	r0, ff4e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ff44:	f7f6 fc00 	bl	6748 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ff48:	b108      	cbz	r0, ff4e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ff4a:	200c      	movs	r0, #12
    ff4c:	bd10      	pop	{r4, pc}
    ff4e:	7820      	ldrb	r0, [r4, #0]
    ff50:	f7ff fd2f 	bl	f9b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    ff54:	79e2      	ldrb	r2, [r4, #7]
    ff56:	1c61      	adds	r1, r4, #1
    ff58:	f7f6 fba4 	bl	66a4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ff5c:	b108      	cbz	r0, ff62 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ff5e:	2000      	movs	r0, #0
    ff60:	bd10      	pop	{r4, pc}
    ff62:	2002      	movs	r0, #2
    ff64:	bd10      	pop	{r4, pc}

0000ff66 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ff66:	b510      	push	{r4, lr}
    ff68:	4604      	mov	r4, r0
    ff6a:	2001      	movs	r0, #1
    ff6c:	f000 facb 	bl	10506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ff70:	b128      	cbz	r0, ff7e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ff72:	4621      	mov	r1, r4
    ff74:	2001      	movs	r0, #1
    ff76:	f7f5 fdc5 	bl	5b04 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ff7a:	2000      	movs	r0, #0
    ff7c:	bd10      	pop	{r4, pc}
    ff7e:	200c      	movs	r0, #12
    ff80:	bd10      	pop	{r4, pc}

0000ff82 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ff82:	b510      	push	{r4, lr}
    ff84:	8800      	ldrh	r0, [r0, #0]
    ff86:	f7f6 fc6d 	bl	6864 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ff8a:	b108      	cbz	r0, ff90 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ff8c:	2000      	movs	r0, #0
    ff8e:	bd10      	pop	{r4, pc}
    ff90:	2030      	movs	r0, #48	; 0x30
    ff92:	bd10      	pop	{r4, pc}

0000ff94 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ff94:	b51c      	push	{r2, r3, r4, lr}
    ff96:	4604      	mov	r4, r0
    ff98:	f000 fc21 	bl	107de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    ff9c:	2000      	movs	r0, #0
    ff9e:	f88d 0000 	strb.w	r0, [sp]
    ffa2:	f88d 0002 	strb.w	r0, [sp, #2]
    ffa6:	2003      	movs	r0, #3
    ffa8:	f88d 0001 	strb.w	r0, [sp, #1]
    ffac:	f814 0b01 	ldrb.w	r0, [r4], #1
    ffb0:	f88d 0003 	strb.w	r0, [sp, #3]
    ffb4:	4668      	mov	r0, sp
    ffb6:	9401      	str	r4, [sp, #4]
    ffb8:	f000 f910 	bl	101dc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ffbc:	bd1c      	pop	{r2, r3, r4, pc}

0000ffbe <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ffbe:	b51c      	push	{r2, r3, r4, lr}
    ffc0:	4604      	mov	r4, r0
    ffc2:	f000 fbe1 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ffc6:	b178      	cbz	r0, ffe8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ffc8:	8820      	ldrh	r0, [r4, #0]
    ffca:	f8ad 0000 	strh.w	r0, [sp]
    ffce:	8860      	ldrh	r0, [r4, #2]
    ffd0:	f8ad 0002 	strh.w	r0, [sp, #2]
    ffd4:	8820      	ldrh	r0, [r4, #0]
    ffd6:	f8ad 0004 	strh.w	r0, [sp, #4]
    ffda:	8860      	ldrh	r0, [r4, #2]
    ffdc:	f8ad 0006 	strh.w	r0, [sp, #6]
    ffe0:	4668      	mov	r0, sp
    ffe2:	f7fb f939 	bl	b258 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ffe6:	bd1c      	pop	{r2, r3, r4, pc}
    ffe8:	2001      	movs	r0, #1
    ffea:	bd1c      	pop	{r2, r3, r4, pc}

0000ffec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ffec:	b510      	push	{r4, lr}
    ffee:	f7f5 fdad 	bl	5b4c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fff2:	2000      	movs	r0, #0
    fff4:	bd10      	pop	{r4, pc}

0000fff6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fff6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fff8:	460c      	mov	r4, r1
    fffa:	4605      	mov	r5, r0
    fffc:	f000 fbc4 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10000:	b160      	cbz	r0, 1001c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   10002:	4669      	mov	r1, sp
   10004:	4628      	mov	r0, r5
   10006:	f7fe f934 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1000a:	2800      	cmp	r0, #0
   1000c:	d105      	bne.n	1001a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   1000e:	2100      	movs	r1, #0
   10010:	4622      	mov	r2, r4
   10012:	9801      	ldr	r0, [sp, #4]
   10014:	f000 fb43 	bl	1069e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10018:	2000      	movs	r0, #0
   1001a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1001c:	2001      	movs	r0, #1
   1001e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010020 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   10020:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10024:	460f      	mov	r7, r1
   10026:	4605      	mov	r5, r0
   10028:	7806      	ldrb	r6, [r0, #0]
   1002a:	f000 fac8 	bl	105be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   1002e:	2800      	cmp	r0, #0
   10030:	d10a      	bne.n	10048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10032:	4628      	mov	r0, r5
   10034:	f000 fa9d 	bl	10572 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   10038:	2800      	cmp	r0, #0
   1003a:	d105      	bne.n	10048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1003c:	2001      	movs	r0, #1
   1003e:	f7f5 f88d 	bl	515c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   10042:	4286      	cmp	r6, r0
   10044:	d302      	bcc.n	1004c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   10046:	2007      	movs	r0, #7
   10048:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1004c:	2101      	movs	r1, #1
   1004e:	4630      	mov	r0, r6
   10050:	f7fd fe86 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10054:	0004      	movs	r4, r0
   10056:	d004      	beq.n	10062 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   10058:	f7ff f90c 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1005c:	b150      	cbz	r0, 10074 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   1005e:	200c      	movs	r0, #12
   10060:	e7f2      	b.n	10048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10062:	2200      	movs	r2, #0
   10064:	2101      	movs	r1, #1
   10066:	4630      	mov	r0, r6
   10068:	f7fd fe70 	bl	dd4c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   1006c:	0004      	movs	r4, r0
   1006e:	d00f      	beq.n	10090 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   10070:	f7fe fec0 	bl	edf4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   10074:	4620      	mov	r0, r4
   10076:	f7fe ff26 	bl	eec6 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   1007a:	7038      	strb	r0, [r7, #0]
   1007c:	74e8      	strb	r0, [r5, #19]
   1007e:	4629      	mov	r1, r5
   10080:	4620      	mov	r0, r4
   10082:	f7f7 fa19 	bl	74b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   10086:	4606      	mov	r6, r0
   10088:	7e68      	ldrb	r0, [r5, #25]
   1008a:	b1d0      	cbz	r0, 100c2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   1008c:	b12e      	cbz	r6, 1009a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   1008e:	e018      	b.n	100c2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   10090:	f241 218a 	movw	r1, #4746	; 0x128a
   10094:	2039      	movs	r0, #57	; 0x39
   10096:	f7f4 fe77 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1009a:	2200      	movs	r2, #0
   1009c:	4668      	mov	r0, sp
   1009e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   100a0:	f7fd ff1f 	bl	dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100a4:	2200      	movs	r2, #0
   100a6:	2101      	movs	r1, #1
   100a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   100aa:	f7fd ff90 	bl	dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   100ae:	2204      	movs	r2, #4
   100b0:	4668      	mov	r0, sp
   100b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   100b4:	f7fd ff15 	bl	dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100b8:	2200      	movs	r2, #0
   100ba:	4611      	mov	r1, r2
   100bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   100be:	f7fd ff86 	bl	dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   100c2:	4630      	mov	r0, r6
   100c4:	e7c0      	b.n	10048 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

000100c6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   100c6:	b510      	push	{r4, lr}
   100c8:	4604      	mov	r4, r0
   100ca:	2000      	movs	r0, #0
   100cc:	f000 fa1b 	bl	10506 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   100d0:	b128      	cbz	r0, 100de <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   100d2:	4621      	mov	r1, r4
   100d4:	2000      	movs	r0, #0
   100d6:	f7f5 fd15 	bl	5b04 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   100da:	2000      	movs	r0, #0
   100dc:	bd10      	pop	{r4, pc}
   100de:	200c      	movs	r0, #12
   100e0:	bd10      	pop	{r4, pc}

000100e2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   100e2:	b510      	push	{r4, lr}
   100e4:	7800      	ldrb	r0, [r0, #0]
   100e6:	f000 0001 	and.w	r0, r0, #1
   100ea:	f7f8 f921 	bl	8330 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   100ee:	2000      	movs	r0, #0
   100f0:	bd10      	pop	{r4, pc}

000100f2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   100f2:	b510      	push	{r4, lr}
   100f4:	4604      	mov	r4, r0
   100f6:	f000 fb47 	bl	10788 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   100fa:	b120      	cbz	r0, 10106 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   100fc:	4620      	mov	r0, r4
   100fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10102:	f000 bbb0 	b.w	10866 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   10106:	2001      	movs	r0, #1
   10108:	bd10      	pop	{r4, pc}

0001010a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   1010a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1010e:	4606      	mov	r6, r0
   10110:	7845      	ldrb	r5, [r0, #1]
   10112:	7800      	ldrb	r0, [r0, #0]
   10114:	2101      	movs	r1, #1
   10116:	f7fd fe23 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1011a:	0004      	movs	r4, r0
   1011c:	d01e      	beq.n	1015c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   1011e:	f7fe fe95 	bl	ee4c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   10122:	78f1      	ldrb	r1, [r6, #3]
   10124:	4281      	cmp	r1, r0
   10126:	d800      	bhi.n	1012a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10128:	4608      	mov	r0, r1
   1012a:	4607      	mov	r7, r0
   1012c:	2d04      	cmp	r5, #4
   1012e:	d018      	beq.n	10162 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10130:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10132:	f7fd ff6f 	bl	e014 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10136:	4438      	add	r0, r7
   10138:	b281      	uxth	r1, r0
   1013a:	4620      	mov	r0, r4
   1013c:	2201      	movs	r2, #1
   1013e:	f000 f9f4 	bl	1052a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10142:	2800      	cmp	r0, #0
   10144:	d10b      	bne.n	1015e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10146:	2d03      	cmp	r5, #3
   10148:	d000      	beq.n	1014c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   1014a:	b1df      	cbz	r7, 10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1014c:	4620      	mov	r0, r4
   1014e:	f7fe feb4 	bl	eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10152:	7871      	ldrb	r1, [r6, #1]
   10154:	2903      	cmp	r1, #3
   10156:	d010      	beq.n	1017a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10158:	b9a0      	cbnz	r0, 10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1015a:	e004      	b.n	10166 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   1015c:	2042      	movs	r0, #66	; 0x42
   1015e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10162:	b97f      	cbnz	r7, 10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10164:	e7f2      	b.n	1014c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10166:	2904      	cmp	r1, #4
   10168:	d107      	bne.n	1017a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   1016a:	4620      	mov	r0, r4
   1016c:	f7ff f882 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10170:	b140      	cbz	r0, 10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10172:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10174:	f7fd ff1d 	bl	dfb2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10178:	b120      	cbz	r0, 10184 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1017a:	2d01      	cmp	r5, #1
   1017c:	d004      	beq.n	10188 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1017e:	2d03      	cmp	r5, #3
   10180:	d002      	beq.n	10188 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10182:	e00e      	b.n	101a2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10184:	2012      	movs	r0, #18
   10186:	e7ea      	b.n	1015e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10188:	4620      	mov	r0, r4
   1018a:	f7fe fe96 	bl	eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1018e:	b108      	cbz	r0, 10194 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10190:	2200      	movs	r2, #0
   10192:	e002      	b.n	1019a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10194:	2d01      	cmp	r5, #1
   10196:	d013      	beq.n	101c0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10198:	2201      	movs	r2, #1
   1019a:	4668      	mov	r0, sp
   1019c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1019e:	f7fd fea0 	bl	dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   101a2:	2d04      	cmp	r5, #4
   101a4:	d018      	beq.n	101d8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101a6:	6872      	ldr	r2, [r6, #4]
   101a8:	463b      	mov	r3, r7
   101aa:	2101      	movs	r1, #1
   101ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   101ae:	f7fd fecc 	bl	df4a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   101b2:	b138      	cbz	r0, 101c4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   101b4:	7870      	ldrb	r0, [r6, #1]
   101b6:	2802      	cmp	r0, #2
   101b8:	d006      	beq.n	101c8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   101ba:	2803      	cmp	r0, #3
   101bc:	d004      	beq.n	101c8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   101be:	e00b      	b.n	101d8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101c0:	2202      	movs	r2, #2
   101c2:	e7ea      	b.n	1019a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   101c4:	2007      	movs	r0, #7
   101c6:	e7ca      	b.n	1015e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   101c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   101ca:	f7fd ff23 	bl	e014 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   101ce:	4602      	mov	r2, r0
   101d0:	2101      	movs	r1, #1
   101d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   101d4:	f7fd fefb 	bl	dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   101d8:	2000      	movs	r0, #0
   101da:	e7c0      	b.n	1015e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

000101dc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   101dc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   101e0:	4607      	mov	r7, r0
   101e2:	7845      	ldrb	r5, [r0, #1]
   101e4:	78c6      	ldrb	r6, [r0, #3]
   101e6:	7800      	ldrb	r0, [r0, #0]
   101e8:	2101      	movs	r1, #1
   101ea:	f7fd fdb9 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   101ee:	0004      	movs	r4, r0
   101f0:	d003      	beq.n	101fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   101f2:	f7fe fe64 	bl	eebe <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   101f6:	b118      	cbz	r0, 10200 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   101f8:	e003      	b.n	10202 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   101fa:	2042      	movs	r0, #66	; 0x42
   101fc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10200:	2600      	movs	r6, #0
   10202:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10204:	f7fd ff0a 	bl	e01c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10208:	4430      	add	r0, r6
   1020a:	b281      	uxth	r1, r0
   1020c:	4688      	mov	r8, r1
   1020e:	4620      	mov	r0, r4
   10210:	2201      	movs	r2, #1
   10212:	f000 f98a 	bl	1052a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10216:	2800      	cmp	r0, #0
   10218:	d1f0      	bne.n	101fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1021a:	2d04      	cmp	r5, #4
   1021c:	d008      	beq.n	10230 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1021e:	2d03      	cmp	r5, #3
   10220:	d00a      	beq.n	10238 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   10222:	b12e      	cbz	r6, 10230 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10224:	4620      	mov	r0, r4
   10226:	f7ff f825 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1022a:	b118      	cbz	r0, 10234 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   1022c:	200c      	movs	r0, #12
   1022e:	e7e5      	b.n	101fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10230:	2012      	movs	r0, #18
   10232:	e7e3      	b.n	101fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10234:	2d01      	cmp	r5, #1
   10236:	d10c      	bne.n	10252 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10238:	4620      	mov	r0, r4
   1023a:	f7fe fe3e 	bl	eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1023e:	b108      	cbz	r0, 10244 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10240:	2204      	movs	r2, #4
   10242:	e002      	b.n	1024a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10244:	2d01      	cmp	r5, #1
   10246:	d010      	beq.n	1026a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10248:	2205      	movs	r2, #5
   1024a:	4668      	mov	r0, sp
   1024c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1024e:	f7fd fe48 	bl	dee2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10252:	687a      	ldr	r2, [r7, #4]
   10254:	4633      	mov	r3, r6
   10256:	2100      	movs	r1, #0
   10258:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1025a:	f7fd fe76 	bl	df4a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1025e:	b130      	cbz	r0, 1026e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   10260:	2d02      	cmp	r5, #2
   10262:	d006      	beq.n	10272 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10264:	2d03      	cmp	r5, #3
   10266:	d004      	beq.n	10272 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10268:	e008      	b.n	1027c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   1026a:	2206      	movs	r2, #6
   1026c:	e7ed      	b.n	1024a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1026e:	2007      	movs	r0, #7
   10270:	e7c4      	b.n	101fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10272:	4642      	mov	r2, r8
   10274:	2100      	movs	r1, #0
   10276:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10278:	f7fd fea9 	bl	dfce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1027c:	2000      	movs	r0, #0
   1027e:	e7bd      	b.n	101fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010280 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10280:	b510      	push	{r4, lr}
   10282:	4604      	mov	r4, r0
   10284:	8880      	ldrh	r0, [r0, #4]
   10286:	b128      	cbz	r0, 10294 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10288:	2801      	cmp	r0, #1
   1028a:	d003      	beq.n	10294 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1028c:	2802      	cmp	r0, #2
   1028e:	d001      	beq.n	10294 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10290:	2012      	movs	r0, #18
   10292:	bd10      	pop	{r4, pc}
   10294:	78e0      	ldrb	r0, [r4, #3]
   10296:	f000 f9df 	bl	10658 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   1029a:	b148      	cbz	r0, 102b0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1029c:	78a0      	ldrb	r0, [r4, #2]
   1029e:	f000 f9db 	bl	10658 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   102a2:	b128      	cbz	r0, 102b0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102a4:	4620      	mov	r0, r4
   102a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102aa:	2101      	movs	r1, #1
   102ac:	f000 b884 	b.w	103b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   102b0:	2011      	movs	r0, #17
   102b2:	bd10      	pop	{r4, pc}

000102b4 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   102b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   102b6:	460c      	mov	r4, r1
   102b8:	4605      	mov	r5, r0
   102ba:	8800      	ldrh	r0, [r0, #0]
   102bc:	4669      	mov	r1, sp
   102be:	f7fd ffd8 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102c2:	2800      	cmp	r0, #0
   102c4:	d106      	bne.n	102d4 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   102c6:	9801      	ldr	r0, [sp, #4]
   102c8:	8829      	ldrh	r1, [r5, #0]
   102ca:	8021      	strh	r1, [r4, #0]
   102cc:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
   102d0:	8060      	strh	r0, [r4, #2]
   102d2:	2000      	movs	r0, #0
   102d4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000102d6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   102d6:	b510      	push	{r4, lr}
   102d8:	4604      	mov	r4, r0
   102da:	4601      	mov	r1, r0
   102dc:	2000      	movs	r0, #0
   102de:	f7f5 fbf9 	bl	5ad4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   102e2:	b910      	cbnz	r0, 102ea <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   102e4:	2000      	movs	r0, #0
   102e6:	6020      	str	r0, [r4, #0]
   102e8:	80a0      	strh	r0, [r4, #4]
   102ea:	2000      	movs	r0, #0
   102ec:	bd10      	pop	{r4, pc}

000102ee <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   102ee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   102f0:	8800      	ldrh	r0, [r0, #0]
   102f2:	4669      	mov	r1, sp
   102f4:	f7fd ffbd 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102f8:	b958      	cbnz	r0, 10312 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   102fa:	4668      	mov	r0, sp
   102fc:	f000 fa4d 	bl	1079a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   10300:	b138      	cbz	r0, 10312 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10302:	9c01      	ldr	r4, [sp, #4]
   10304:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   10308:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   1030c:	3478      	adds	r4, #120	; 0x78
   1030e:	b929      	cbnz	r1, 1031c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   10310:	e001      	b.n	10316 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   10312:	2002      	movs	r0, #2
   10314:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10316:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1031a:	b109      	cbz	r1, 10320 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   1031c:	203a      	movs	r0, #58	; 0x3a
   1031e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10320:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   10324:	f04f 0501 	mov.w	r5, #1
   10328:	0789      	lsls	r1, r1, #30
   1032a:	d103      	bne.n	10334 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   1032c:	7005      	strb	r5, [r0, #0]
   1032e:	4668      	mov	r0, sp
   10330:	f7fe fb3c 	bl	e9ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10334:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   10338:	2000      	movs	r0, #0
   1033a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001033c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1033c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1033e:	460c      	mov	r4, r1
   10340:	4605      	mov	r5, r0
   10342:	8800      	ldrh	r0, [r0, #0]
   10344:	4669      	mov	r1, sp
   10346:	f7fd ff94 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1034a:	b108      	cbz	r0, 10350 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1034c:	2002      	movs	r0, #2
   1034e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10350:	78a8      	ldrb	r0, [r5, #2]
   10352:	b130      	cbz	r0, 10362 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10354:	f000 f9f9 	bl	1074a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   10358:	70a0      	strb	r0, [r4, #2]
   1035a:	8828      	ldrh	r0, [r5, #0]
   1035c:	8020      	strh	r0, [r4, #0]
   1035e:	2000      	movs	r0, #0
   10360:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10362:	9801      	ldr	r0, [sp, #4]
   10364:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   10368:	e7f6      	b.n	10358 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001036a <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1036a:	b510      	push	{r4, lr}
   1036c:	f7fa ffae 	bl	b2cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10370:	2000      	movs	r0, #0
   10372:	bd10      	pop	{r4, pc}

00010374 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10374:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10378:	4604      	mov	r4, r0
   1037a:	8840      	ldrh	r0, [r0, #2]
   1037c:	460d      	mov	r5, r1
   1037e:	b1b8      	cbz	r0, 103b0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10380:	8820      	ldrh	r0, [r4, #0]
   10382:	4669      	mov	r1, sp
   10384:	f7fd ff75 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10388:	2800      	cmp	r0, #0
   1038a:	d10f      	bne.n	103ac <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1038c:	8820      	ldrh	r0, [r4, #0]
   1038e:	8028      	strh	r0, [r5, #0]
   10390:	9e01      	ldr	r6, [sp, #4]
   10392:	f106 0510 	add.w	r5, r6, #16
   10396:	3678      	adds	r6, #120	; 0x78
   10398:	682f      	ldr	r7, [r5, #0]
   1039a:	8862      	ldrh	r2, [r4, #2]
   1039c:	4639      	mov	r1, r7
   1039e:	4630      	mov	r0, r6
   103a0:	f7fe f8a8 	bl	e4f4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   103a4:	6828      	ldr	r0, [r5, #0]
   103a6:	42b8      	cmp	r0, r7
   103a8:	d1f6      	bne.n	10398 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   103aa:	2000      	movs	r0, #0
   103ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   103b0:	2012      	movs	r0, #18
   103b2:	e7fb      	b.n	103ac <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000103b4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   103b4:	f7fa bde6 	b.w	af84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000103b8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   103b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   103bc:	b086      	sub	sp, #24
   103be:	468a      	mov	sl, r1
   103c0:	4606      	mov	r6, r0
   103c2:	8800      	ldrh	r0, [r0, #0]
   103c4:	a901      	add	r1, sp, #4
   103c6:	f7fd ff54 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103ca:	2800      	cmp	r0, #0
   103cc:	d13b      	bne.n	10446 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   103ce:	9802      	ldr	r0, [sp, #8]
   103d0:	f04f 0800 	mov.w	r8, #0
   103d4:	4601      	mov	r1, r0
   103d6:	4689      	mov	r9, r1
   103d8:	f890 120c 	ldrb.w	r1, [r0, #524]	; 0x20c
   103dc:	f88d 1000 	strb.w	r1, [sp]
   103e0:	9900      	ldr	r1, [sp, #0]
   103e2:	9100      	str	r1, [sp, #0]
   103e4:	f89d 1000 	ldrb.w	r1, [sp]
   103e8:	3078      	adds	r0, #120	; 0x78
   103ea:	b109      	cbz	r1, 103f0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   103ec:	2501      	movs	r5, #1
   103ee:	e000      	b.n	103f2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   103f0:	2500      	movs	r5, #0
   103f2:	7b81      	ldrb	r1, [r0, #14]
   103f4:	2921      	cmp	r1, #33	; 0x21
   103f6:	d100      	bne.n	103fa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   103f8:	b13d      	cbz	r5, 1040a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   103fa:	2400      	movs	r4, #0
   103fc:	304c      	adds	r0, #76	; 0x4c
   103fe:	2108      	movs	r1, #8
   10400:	4607      	mov	r7, r0
   10402:	f7ff facd 	bl	f9a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10406:	b110      	cbz	r0, 1040e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10408:	e007      	b.n	1041a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   1040a:	2401      	movs	r4, #1
   1040c:	e7f6      	b.n	103fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1040e:	210b      	movs	r1, #11
   10410:	4638      	mov	r0, r7
   10412:	f7ff fac5 	bl	f9a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10416:	b900      	cbnz	r0, 1041a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10418:	b1a4      	cbz	r4, 10444 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   1041a:	a804      	add	r0, sp, #16
   1041c:	9000      	str	r0, [sp, #0]
   1041e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10422:	ab03      	add	r3, sp, #12
   10424:	4632      	mov	r2, r6
   10426:	4649      	mov	r1, r9
   10428:	f000 f96f 	bl	1070a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   1042c:	0007      	movs	r7, r0
   1042e:	d10a      	bne.n	10446 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10430:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10434:	9c02      	ldr	r4, [sp, #8]
   10436:	b148      	cbz	r0, 1044c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10438:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   1043c:	20ff      	movs	r0, #255	; 0xff
   1043e:	7060      	strb	r0, [r4, #1]
   10440:	b94d      	cbnz	r5, 10456 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   10442:	e006      	b.n	10452 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
   10444:	201a      	movs	r0, #26
   10446:	b006      	add	sp, #24
   10448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1044c:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   10450:	e7f4      	b.n	1043c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10452:	7820      	ldrb	r0, [r4, #0]
   10454:	b108      	cbz	r0, 1045a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa2>
   10456:	273a      	movs	r7, #58	; 0x3a
   10458:	e012      	b.n	10480 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc8>
   1045a:	f884 a000 	strb.w	sl, [r4]
   1045e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10462:	70a1      	strb	r1, [r4, #2]
   10464:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10468:	70e0      	strb	r0, [r4, #3]
   1046a:	f88d 1000 	strb.w	r1, [sp]
   1046e:	f88d 0001 	strb.w	r0, [sp, #1]
   10472:	88b0      	ldrh	r0, [r6, #4]
   10474:	f8ad 0002 	strh.w	r0, [sp, #2]
   10478:	4669      	mov	r1, sp
   1047a:	4648      	mov	r0, r9
   1047c:	f7fd ffb8 	bl	e3f0 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   10480:	f884 8001 	strb.w	r8, [r4, #1]
   10484:	4638      	mov	r0, r7
   10486:	e7de      	b.n	10446 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00010488 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10488:	b510      	push	{r4, lr}
   1048a:	2008      	movs	r0, #8
   1048c:	f7fa ff84 	bl	b398 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   10490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10494:	f7f8 bd58 	b.w	8f48 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10498:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1049c:	4288      	cmp	r0, r1
   1049e:	d303      	bcc.n	104a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   104a0:	f640 0148 	movw	r1, #2120	; 0x848
   104a4:	4288      	cmp	r0, r1
   104a6:	d300      	bcc.n	104aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   104a8:	4608      	mov	r0, r1
   104aa:	4770      	bx	lr
   104ac:	07c1      	lsls	r1, r0, #31
   104ae:	d001      	beq.n	104b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   104b0:	2001      	movs	r0, #1
   104b2:	4770      	bx	lr
   104b4:	0780      	lsls	r0, r0, #30
   104b6:	d501      	bpl.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   104b8:	2002      	movs	r0, #2
   104ba:	4770      	bx	lr
   104bc:	2000      	movs	r0, #0
   104be:	4770      	bx	lr
   104c0:	b510      	push	{r4, lr}
   104c2:	2801      	cmp	r0, #1
   104c4:	d006      	beq.n	104d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   104c6:	2802      	cmp	r0, #2
   104c8:	d004      	beq.n	104d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   104ca:	f44f 711d 	mov.w	r1, #628	; 0x274
   104ce:	2006      	movs	r0, #6
   104d0:	f7f4 fc5a 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104d4:	bd10      	pop	{r4, pc}
   104d6:	b50e      	push	{r1, r2, r3, lr}
   104d8:	4669      	mov	r1, sp
   104da:	2001      	movs	r0, #1
   104dc:	f7fd fc4a 	bl	dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   104e0:	b150      	cbz	r0, 104f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   104e2:	f240 1153 	movw	r1, #339	; 0x153
   104e6:	2039      	movs	r0, #57	; 0x39
   104e8:	f7f4 fc4e 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104ec:	9802      	ldr	r0, [sp, #8]
   104ee:	f7fe fec1 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104f2:	b108      	cbz	r0, 104f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   104f4:	2001      	movs	r0, #1
   104f6:	bd0e      	pop	{r1, r2, r3, pc}
   104f8:	4668      	mov	r0, sp
   104fa:	f7f4 fe7d 	bl	51f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   104fe:	2800      	cmp	r0, #0
   10500:	d0f4      	beq.n	104ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   10502:	2000      	movs	r0, #0
   10504:	bd0e      	pop	{r1, r2, r3, pc}
   10506:	b510      	push	{r4, lr}
   10508:	f7ff ffe5 	bl	104d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1050c:	b158      	cbz	r0, 10526 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1050e:	f000 f966 	bl	107de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   10512:	4604      	mov	r4, r0
   10514:	f7fe fcd3 	bl	eebe <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10518:	b918      	cbnz	r0, 10522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   1051a:	4620      	mov	r0, r4
   1051c:	f7fe fcc5 	bl	eeaa <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10520:	b108      	cbz	r0, 10526 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   10522:	2000      	movs	r0, #0
   10524:	bd10      	pop	{r4, pc}
   10526:	2001      	movs	r0, #1
   10528:	bd10      	pop	{r4, pc}
   1052a:	b570      	push	{r4, r5, r6, lr}
   1052c:	460c      	mov	r4, r1
   1052e:	4605      	mov	r5, r0
   10530:	b112      	cbz	r2, 10538 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   10532:	291f      	cmp	r1, #31
   10534:	d80c      	bhi.n	10550 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   10536:	e016      	b.n	10566 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   10538:	f7f5 f924 	bl	5784 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1053c:	42a0      	cmp	r0, r4
   1053e:	d201      	bcs.n	10544 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   10540:	2007      	movs	r0, #7
   10542:	bd70      	pop	{r4, r5, r6, pc}
   10544:	4628      	mov	r0, r5
   10546:	f7fe fcb8 	bl	eeba <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1054a:	b118      	cbz	r0, 10554 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1054c:	2c1f      	cmp	r4, #31
   1054e:	d901      	bls.n	10554 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10550:	2012      	movs	r0, #18
   10552:	bd70      	pop	{r4, r5, r6, pc}
   10554:	4628      	mov	r0, r5
   10556:	f7fe fcb9 	bl	eecc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1055a:	b130      	cbz	r0, 1056a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   1055c:	4621      	mov	r1, r4
   1055e:	4628      	mov	r0, r5
   10560:	f7fe fc80 	bl	ee64 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10564:	b118      	cbz	r0, 1056e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   10566:	2000      	movs	r0, #0
   10568:	bd70      	pop	{r4, r5, r6, pc}
   1056a:	2042      	movs	r0, #66	; 0x42
   1056c:	bd70      	pop	{r4, r5, r6, pc}
   1056e:	2045      	movs	r0, #69	; 0x45
   10570:	bd70      	pop	{r4, r5, r6, pc}
   10572:	b510      	push	{r4, lr}
   10574:	4604      	mov	r4, r0
   10576:	7840      	ldrb	r0, [r0, #1]
   10578:	06c1      	lsls	r1, r0, #27
   1057a:	d51c      	bpl.n	105b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1057c:	07c0      	lsls	r0, r0, #31
   1057e:	d00b      	beq.n	10598 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10580:	f7fa fede 	bl	b340 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10584:	b1b8      	cbz	r0, 105b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10586:	7860      	ldrb	r0, [r4, #1]
   10588:	06c1      	lsls	r1, r0, #27
   1058a:	d405      	bmi.n	10598 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1058c:	0700      	lsls	r0, r0, #28
   1058e:	d503      	bpl.n	10598 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10590:	7d20      	ldrb	r0, [r4, #20]
   10592:	2802      	cmp	r0, #2
   10594:	d10f      	bne.n	105b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10596:	e010      	b.n	105ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10598:	7d20      	ldrb	r0, [r4, #20]
   1059a:	2802      	cmp	r0, #2
   1059c:	d001      	beq.n	105a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   1059e:	7ea0      	ldrb	r0, [r4, #26]
   105a0:	b948      	cbnz	r0, 105b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   105a2:	7860      	ldrb	r0, [r4, #1]
   105a4:	0700      	lsls	r0, r0, #28
   105a6:	d408      	bmi.n	105ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   105a8:	f8d4 0005 	ldr.w	r0, [r4, #5]
   105ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   105b0:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   105b4:	d201      	bcs.n	105ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   105b6:	2011      	movs	r0, #17
   105b8:	bd10      	pop	{r4, pc}
   105ba:	2000      	movs	r0, #0
   105bc:	bd10      	pop	{r4, pc}
   105be:	b538      	push	{r3, r4, r5, lr}
   105c0:	4604      	mov	r4, r0
   105c2:	7800      	ldrb	r0, [r0, #0]
   105c4:	28ef      	cmp	r0, #239	; 0xef
   105c6:	d843      	bhi.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   105c8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   105cc:	f8ad 0000 	strh.w	r0, [sp]
   105d0:	9800      	ldr	r0, [sp, #0]
   105d2:	f000 f9e3 	bl	1099c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x514>
   105d6:	b3a0      	cbz	r0, 10642 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   105d8:	7861      	ldrb	r1, [r4, #1]
   105da:	0708      	lsls	r0, r1, #28
   105dc:	d40b      	bmi.n	105f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   105de:	f8d4 0002 	ldr.w	r0, [r4, #2]
   105e2:	f8d4 3005 	ldr.w	r3, [r4, #5]
   105e6:	0a02      	lsrs	r2, r0, #8
   105e8:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   105ec:	d830      	bhi.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   105ee:	2220      	movs	r2, #32
   105f0:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   105f4:	d82c      	bhi.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   105f6:	7a60      	ldrb	r0, [r4, #9]
   105f8:	b318      	cbz	r0, 10642 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   105fa:	2807      	cmp	r0, #7
   105fc:	d828      	bhi.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   105fe:	7aa0      	ldrb	r0, [r4, #10]
   10600:	b128      	cbz	r0, 1060e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10602:	2801      	cmp	r0, #1
   10604:	d003      	beq.n	1060e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10606:	2802      	cmp	r0, #2
   10608:	d001      	beq.n	1060e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1060a:	2803      	cmp	r0, #3
   1060c:	d120      	bne.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1060e:	074a      	lsls	r2, r1, #29
   10610:	d403      	bmi.n	1061a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10612:	2802      	cmp	r0, #2
   10614:	d001      	beq.n	1061a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10616:	2803      	cmp	r0, #3
   10618:	d105      	bne.n	10626 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   1061a:	7ae0      	ldrb	r0, [r4, #11]
   1061c:	b108      	cbz	r0, 10622 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1061e:	2801      	cmp	r0, #1
   10620:	d116      	bne.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10622:	0748      	lsls	r0, r1, #29
   10624:	d407      	bmi.n	10636 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10626:	7ca0      	ldrb	r0, [r4, #18]
   10628:	b128      	cbz	r0, 10636 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1062a:	2801      	cmp	r0, #1
   1062c:	d003      	beq.n	10636 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1062e:	2802      	cmp	r0, #2
   10630:	d001      	beq.n	10636 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10632:	2803      	cmp	r0, #3
   10634:	d10c      	bne.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10636:	06c8      	lsls	r0, r1, #27
   10638:	7d20      	ldrb	r0, [r4, #20]
   1063a:	d503      	bpl.n	10644 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   1063c:	2801      	cmp	r0, #1
   1063e:	d107      	bne.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10640:	e002      	b.n	10648 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   10642:	e005      	b.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10644:	2802      	cmp	r0, #2
   10646:	d003      	beq.n	10650 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10648:	7e20      	ldrb	r0, [r4, #24]
   1064a:	b118      	cbz	r0, 10654 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1064c:	2801      	cmp	r0, #1
   1064e:	d001      	beq.n	10654 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   10650:	2012      	movs	r0, #18
   10652:	bd38      	pop	{r3, r4, r5, pc}
   10654:	2000      	movs	r0, #0
   10656:	bd38      	pop	{r3, r4, r5, pc}
   10658:	b510      	push	{r4, lr}
   1065a:	0004      	movs	r4, r0
   1065c:	d005      	beq.n	1066a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1065e:	f7fa fead 	bl	b3bc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10662:	4384      	bics	r4, r0
   10664:	d001      	beq.n	1066a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10666:	2000      	movs	r0, #0
   10668:	bd10      	pop	{r4, pc}
   1066a:	2001      	movs	r0, #1
   1066c:	bd10      	pop	{r4, pc}
   1066e:	28fb      	cmp	r0, #251	; 0xfb
   10670:	d803      	bhi.n	1067a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   10672:	f640 0048 	movw	r0, #2120	; 0x848
   10676:	4281      	cmp	r1, r0
   10678:	d901      	bls.n	1067e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   1067a:	2011      	movs	r0, #17
   1067c:	4770      	bx	lr
   1067e:	2000      	movs	r0, #0
   10680:	4770      	bx	lr
   10682:	381b      	subs	r0, #27
   10684:	28e1      	cmp	r0, #225	; 0xe1
   10686:	d206      	bcs.n	10696 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10688:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1068c:	d303      	bcc.n	10696 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1068e:	f244 2090 	movw	r0, #17040	; 0x4290
   10692:	4281      	cmp	r1, r0
   10694:	d901      	bls.n	1069a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   10696:	2012      	movs	r0, #18
   10698:	4770      	bx	lr
   1069a:	2000      	movs	r0, #0
   1069c:	4770      	bx	lr
   1069e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106a2:	4606      	mov	r6, r0
   106a4:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   106a8:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   106ac:	4615      	mov	r5, r2
   106ae:	3030      	adds	r0, #48	; 0x30
   106b0:	f7f7 fe44 	bl	833c <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   106b4:	4680      	mov	r8, r0
   106b6:	2102      	movs	r1, #2
   106b8:	f7fd fe6b 	bl	e392 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   106bc:	4287      	cmp	r7, r0
   106be:	d200      	bcs.n	106c2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   106c0:	4638      	mov	r0, r7
   106c2:	4607      	mov	r7, r0
   106c4:	2102      	movs	r1, #2
   106c6:	4640      	mov	r0, r8
   106c8:	f7fd fe63 	bl	e392 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   106cc:	4284      	cmp	r4, r0
   106ce:	d200      	bcs.n	106d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   106d0:	4620      	mov	r0, r4
   106d2:	8831      	ldrh	r1, [r6, #0]
   106d4:	8029      	strh	r1, [r5, #0]
   106d6:	2f1b      	cmp	r7, #27
   106d8:	d913      	bls.n	10702 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   106da:	2ffb      	cmp	r7, #251	; 0xfb
   106dc:	d300      	bcc.n	106e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   106de:	27fb      	movs	r7, #251	; 0xfb
   106e0:	806f      	strh	r7, [r5, #2]
   106e2:	281b      	cmp	r0, #27
   106e4:	d90f      	bls.n	10706 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   106e6:	28fb      	cmp	r0, #251	; 0xfb
   106e8:	d300      	bcc.n	106ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   106ea:	20fb      	movs	r0, #251	; 0xfb
   106ec:	80e8      	strh	r0, [r5, #6]
   106ee:	4640      	mov	r0, r8
   106f0:	f7ff fed2 	bl	10498 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   106f4:	80a8      	strh	r0, [r5, #4]
   106f6:	4640      	mov	r0, r8
   106f8:	f7ff fece 	bl	10498 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   106fc:	8128      	strh	r0, [r5, #8]
   106fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10702:	271b      	movs	r7, #27
   10704:	e7ec      	b.n	106e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10706:	201b      	movs	r0, #27
   10708:	e7f0      	b.n	106ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   1070a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1070e:	7890      	ldrb	r0, [r2, #2]
   10710:	9e06      	ldr	r6, [sp, #24]
   10712:	461d      	mov	r5, r3
   10714:	4614      	mov	r4, r2
   10716:	b908      	cbnz	r0, 1071c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   10718:	f7fa fe50 	bl	b3bc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1071c:	78e4      	ldrb	r4, [r4, #3]
   1071e:	4607      	mov	r7, r0
   10720:	b914      	cbnz	r4, 10728 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   10722:	f7fa fe4b 	bl	b3bc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10726:	4604      	mov	r4, r0
   10728:	b16f      	cbz	r7, 10746 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1072a:	b164      	cbz	r4, 10746 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1072c:	4638      	mov	r0, r7
   1072e:	f7ff febd 	bl	104ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10732:	4620      	mov	r0, r4
   10734:	f7ff feba 	bl	104ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10738:	b12f      	cbz	r7, 10746 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1073a:	b124      	cbz	r4, 10746 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1073c:	702f      	strb	r7, [r5, #0]
   1073e:	7034      	strb	r4, [r6, #0]
   10740:	2000      	movs	r0, #0
   10742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10746:	2009      	movs	r0, #9
   10748:	e7fb      	b.n	10742 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   1074a:	b510      	push	{r4, lr}
   1074c:	f7fc fa87 	bl	cc5e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   10750:	b928      	cbnz	r0, 1075e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10752:	f7fc faba 	bl	ccca <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10756:	b910      	cbnz	r0, 1075e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10758:	f7fc fac1 	bl	ccde <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1075c:	b108      	cbz	r0, 10762 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   1075e:	2008      	movs	r0, #8
   10760:	bd10      	pop	{r4, pc}
   10762:	f7fc fa51 	bl	cc08 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10766:	b940      	cbnz	r0, 1077a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10768:	f7fc fa58 	bl	cc1c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1076c:	b928      	cbnz	r0, 1077a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1076e:	f7fc fa6c 	bl	cc4a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10772:	b910      	cbnz	r0, 1077a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10774:	f7fc fa7d 	bl	cc72 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10778:	b108      	cbz	r0, 1077e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   1077a:	2004      	movs	r0, #4
   1077c:	bd10      	pop	{r4, pc}
   1077e:	f240 51d6 	movw	r1, #1494	; 0x5d6
   10782:	2039      	movs	r0, #57	; 0x39
   10784:	f7f4 fb00 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10788:	b510      	push	{r4, lr}
   1078a:	f7fa fe11 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1078e:	0940      	lsrs	r0, r0, #5
   10790:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   10794:	f000 0001 	and.w	r0, r0, #1
   10798:	bd10      	pop	{r4, pc}
   1079a:	6840      	ldr	r0, [r0, #4]
   1079c:	f000 b800 	b.w	107a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
   107a0:	b508      	push	{r3, lr}
   107a2:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
   107a6:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   107aa:	f88d 0000 	strb.w	r0, [sp]
   107ae:	9800      	ldr	r0, [sp, #0]
   107b0:	9000      	str	r0, [sp, #0]
   107b2:	f89d 0000 	ldrb.w	r0, [sp]
   107b6:	b100      	cbz	r0, 107ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x332>
   107b8:	2001      	movs	r0, #1
   107ba:	1e40      	subs	r0, r0, #1
   107bc:	4208      	tst	r0, r1
   107be:	d003      	beq.n	107c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   107c0:	2904      	cmp	r1, #4
   107c2:	d001      	beq.n	107c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   107c4:	2001      	movs	r0, #1
   107c6:	bd08      	pop	{r3, pc}
   107c8:	2000      	movs	r0, #0
   107ca:	bd08      	pop	{r3, pc}
   107cc:	b510      	push	{r4, lr}
   107ce:	f7fa fdef 	bl	b3b0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   107d2:	0a00      	lsrs	r0, r0, #8
   107d4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   107d8:	f000 0001 	and.w	r0, r0, #1
   107dc:	bd10      	pop	{r4, pc}
   107de:	b510      	push	{r4, lr}
   107e0:	2101      	movs	r1, #1
   107e2:	2000      	movs	r0, #0
   107e4:	f7fd fabc 	bl	dd60 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   107e8:	0004      	movs	r4, r0
   107ea:	d108      	bne.n	107fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   107ec:	2200      	movs	r2, #0
   107ee:	2101      	movs	r1, #1
   107f0:	4610      	mov	r0, r2
   107f2:	f7fd faab 	bl	dd4c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   107f6:	0004      	movs	r4, r0
   107f8:	d003      	beq.n	10802 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37a>
   107fa:	f7fe fafb 	bl	edf4 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   107fe:	4620      	mov	r0, r4
   10800:	bd10      	pop	{r4, pc}
   10802:	f44f 7110 	mov.w	r1, #576	; 0x240
   10806:	2039      	movs	r0, #57	; 0x39
   10808:	f7f4 fabe 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1080c:	b510      	push	{r4, lr}
   1080e:	f7ff fe62 	bl	104d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   10812:	2800      	cmp	r0, #0
   10814:	d000      	beq.n	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
   10816:	2001      	movs	r0, #1
   10818:	bd10      	pop	{r4, pc}
   1081a:	b570      	push	{r4, r5, r6, lr}
   1081c:	4605      	mov	r5, r0
   1081e:	f7fe fb55 	bl	eecc <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10822:	b170      	cbz	r0, 10842 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ba>
   10824:	4628      	mov	r0, r5
   10826:	f7fe fd25 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1082a:	2800      	cmp	r0, #0
   1082c:	d008      	beq.n	10840 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
   1082e:	4628      	mov	r0, r5
   10830:	f7fe fd1d 	bl	f26e <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10834:	4604      	mov	r4, r0
   10836:	4628      	mov	r0, r5
   10838:	f7fe fcf3 	bl	f222 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1083c:	b118      	cbz	r0, 10846 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1083e:	200c      	movs	r0, #12
   10840:	bd70      	pop	{r4, r5, r6, pc}
   10842:	2042      	movs	r0, #66	; 0x42
   10844:	bd70      	pop	{r4, r5, r6, pc}
   10846:	b164      	cbz	r4, 10862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   10848:	8820      	ldrh	r0, [r4, #0]
   1084a:	f7fd fc44 	bl	e0d6 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1084e:	8820      	ldrh	r0, [r4, #0]
   10850:	2100      	movs	r1, #0
   10852:	f7f4 fd21 	bl	5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10856:	b120      	cbz	r0, 10862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   10858:	f241 5129 	movw	r1, #5417	; 0x1529
   1085c:	2039      	movs	r0, #57	; 0x39
   1085e:	f7f4 fa93 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10862:	2000      	movs	r0, #0
   10864:	bd70      	pop	{r4, r5, r6, pc}
   10866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1086a:	b088      	sub	sp, #32
   1086c:	4604      	mov	r4, r0
   1086e:	8800      	ldrh	r0, [r0, #0]
   10870:	a906      	add	r1, sp, #24
   10872:	f7fd fcfe 	bl	e272 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10876:	2800      	cmp	r0, #0
   10878:	d147      	bne.n	1090a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   1087a:	9807      	ldr	r0, [sp, #28]
   1087c:	2700      	movs	r7, #0
   1087e:	f890 11f8 	ldrb.w	r1, [r0, #504]	; 0x1f8
   10882:	f88d 1008 	strb.w	r1, [sp, #8]
   10886:	9902      	ldr	r1, [sp, #8]
   10888:	9102      	str	r1, [sp, #8]
   1088a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1088e:	3078      	adds	r0, #120	; 0x78
   10890:	b101      	cbz	r1, 10894 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40c>
   10892:	2101      	movs	r1, #1
   10894:	f88d 100c 	strb.w	r1, [sp, #12]
   10898:	7bc1      	ldrb	r1, [r0, #15]
   1089a:	0689      	lsls	r1, r1, #26
   1089c:	d502      	bpl.n	108a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
   1089e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   108a2:	b141      	cbz	r1, 108b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42e>
   108a4:	2100      	movs	r1, #0
   108a6:	f88d 1004 	strb.w	r1, [sp, #4]
   108aa:	2105      	movs	r1, #5
   108ac:	304c      	adds	r0, #76	; 0x4c
   108ae:	f7ff f877 	bl	f9a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   108b2:	b110      	cbz	r0, 108ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   108b4:	e004      	b.n	108c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x438>
   108b6:	2101      	movs	r1, #1
   108b8:	e7f5      	b.n	108a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41e>
   108ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
   108be:	b318      	cbz	r0, 10908 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x480>
   108c0:	8921      	ldrh	r1, [r4, #8]
   108c2:	88e0      	ldrh	r0, [r4, #6]
   108c4:	f7ff fedd 	bl	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   108c8:	2800      	cmp	r0, #0
   108ca:	d11e      	bne.n	1090a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   108cc:	88a1      	ldrh	r1, [r4, #4]
   108ce:	8860      	ldrh	r0, [r4, #2]
   108d0:	f7ff fed7 	bl	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   108d4:	2800      	cmp	r0, #0
   108d6:	d118      	bne.n	1090a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   108d8:	8921      	ldrh	r1, [r4, #8]
   108da:	88e0      	ldrh	r0, [r4, #6]
   108dc:	f7ff fec7 	bl	1066e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   108e0:	2800      	cmp	r0, #0
   108e2:	d112      	bne.n	1090a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   108e4:	88a1      	ldrh	r1, [r4, #4]
   108e6:	8860      	ldrh	r0, [r4, #2]
   108e8:	f7ff fec1 	bl	1066e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   108ec:	0006      	movs	r6, r0
   108ee:	d10c      	bne.n	1090a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   108f0:	9807      	ldr	r0, [sp, #28]
   108f2:	f500 75da 	add.w	r5, r0, #436	; 0x1b4
   108f6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   108fa:	f885 8001 	strb.w	r8, [r5, #1]
   108fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10902:	b129      	cbz	r1, 10910 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x488>
   10904:	263a      	movs	r6, #58	; 0x3a
   10906:	e02f      	b.n	10968 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e0>
   10908:	201a      	movs	r0, #26
   1090a:	b008      	add	sp, #32
   1090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10910:	4639      	mov	r1, r7
   10912:	aa03      	add	r2, sp, #12
   10914:	f7ff fec3 	bl	1069e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10918:	8861      	ldrh	r1, [r4, #2]
   1091a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1091e:	4281      	cmp	r1, r0
   10920:	d200      	bcs.n	10924 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x49c>
   10922:	4608      	mov	r0, r1
   10924:	80e8      	strh	r0, [r5, #6]
   10926:	88a1      	ldrh	r1, [r4, #4]
   10928:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1092c:	4281      	cmp	r1, r0
   1092e:	d200      	bcs.n	10932 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4aa>
   10930:	4608      	mov	r0, r1
   10932:	8128      	strh	r0, [r5, #8]
   10934:	88e2      	ldrh	r2, [r4, #6]
   10936:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1093a:	428a      	cmp	r2, r1
   1093c:	d200      	bcs.n	10940 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4b8>
   1093e:	4611      	mov	r1, r2
   10940:	8069      	strh	r1, [r5, #2]
   10942:	8922      	ldrh	r2, [r4, #8]
   10944:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   10948:	428a      	cmp	r2, r1
   1094a:	d200      	bcs.n	1094e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c6>
   1094c:	4611      	mov	r1, r2
   1094e:	f640 0248 	movw	r2, #2120	; 0x848
   10952:	80a9      	strh	r1, [r5, #4]
   10954:	4291      	cmp	r1, r2
   10956:	d300      	bcc.n	1095a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4d2>
   10958:	4611      	mov	r1, r2
   1095a:	80a9      	strh	r1, [r5, #4]
   1095c:	4290      	cmp	r0, r2
   1095e:	d200      	bcs.n	10962 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4da>
   10960:	4602      	mov	r2, r0
   10962:	812a      	strh	r2, [r5, #8]
   10964:	f885 8000 	strb.w	r8, [r5]
   10968:	706f      	strb	r7, [r5, #1]
   1096a:	4630      	mov	r0, r6
   1096c:	e7cd      	b.n	1090a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   1096e:	b530      	push	{r4, r5, lr}
   10970:	f340 0400 	sbfx	r4, r0, #0, #1
   10974:	f340 0040 	sbfx	r0, r0, #1, #1
   10978:	1c40      	adds	r0, r0, #1
   1097a:	9d03      	ldr	r5, [sp, #12]
   1097c:	1c64      	adds	r4, r4, #1
   1097e:	d000      	beq.n	10982 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fa>
   10980:	b119      	cbz	r1, 1098a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   10982:	b100      	cbz	r0, 10986 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fe>
   10984:	b10a      	cbz	r2, 1098a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   10986:	b91c      	cbnz	r4, 10990 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x508>
   10988:	e001      	b.n	1098e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x506>
   1098a:	2011      	movs	r0, #17
   1098c:	bd30      	pop	{r4, r5, pc}
   1098e:	2100      	movs	r1, #0
   10990:	7019      	strb	r1, [r3, #0]
   10992:	b900      	cbnz	r0, 10996 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x50e>
   10994:	2200      	movs	r2, #0
   10996:	702a      	strb	r2, [r5, #0]
   10998:	2000      	movs	r0, #0
   1099a:	bd30      	pop	{r4, r5, pc}
   1099c:	b2c0      	uxtb	r0, r0
   1099e:	06c1      	lsls	r1, r0, #27
   109a0:	d40c      	bmi.n	109bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x534>
   109a2:	0681      	lsls	r1, r0, #26
   109a4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   109a8:	d503      	bpl.n	109b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52a>
   109aa:	b9d1      	cbnz	r1, 109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109ac:	0781      	lsls	r1, r0, #30
   109ae:	d418      	bmi.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109b0:	e001      	b.n	109b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52e>
   109b2:	2900      	cmp	r1, #0
   109b4:	d1fa      	bne.n	109ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x524>
   109b6:	0700      	lsls	r0, r0, #28
   109b8:	d413      	bmi.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109ba:	e010      	b.n	109de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   109bc:	0641      	lsls	r1, r0, #25
   109be:	d410      	bmi.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109c0:	0681      	lsls	r1, r0, #26
   109c2:	d40e      	bmi.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109c4:	07c1      	lsls	r1, r0, #31
   109c6:	ea4f 7180 	mov.w	r1, r0, lsl #30
   109ca:	d004      	beq.n	109d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   109cc:	2900      	cmp	r1, #0
   109ce:	db02      	blt.n	109d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   109d0:	0740      	lsls	r0, r0, #29
   109d2:	d404      	bmi.n	109de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   109d4:	e005      	b.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109d6:	0701      	lsls	r1, r0, #28
   109d8:	d403      	bmi.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109da:	0740      	lsls	r0, r0, #29
   109dc:	d401      	bmi.n	109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109de:	2001      	movs	r0, #1
   109e0:	4770      	bx	lr
   109e2:	2000      	movs	r0, #0
   109e4:	4770      	bx	lr
   109e6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   109e8:	4669      	mov	r1, sp
   109ea:	2001      	movs	r0, #1
   109ec:	f7fd f9c2 	bl	dd74 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   109f0:	b178      	cbz	r0, 10a12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   109f2:	f240 1171 	movw	r1, #369	; 0x171
   109f6:	2039      	movs	r0, #57	; 0x39
   109f8:	f7f4 f9c6 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109fc:	9c02      	ldr	r4, [sp, #8]
   109fe:	4620      	mov	r0, r4
   10a00:	f7fe fc38 	bl	f274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10a04:	b128      	cbz	r0, 10a12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10a06:	4620      	mov	r0, r4
   10a08:	f7fe fa99 	bl	ef3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   10a0c:	b108      	cbz	r0, 10a12 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10a0e:	2001      	movs	r0, #1
   10a10:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10a12:	4668      	mov	r0, sp
   10a14:	f7f4 fbf0 	bl	51f8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10a18:	2800      	cmp	r0, #0
   10a1a:	d0ef      	beq.n	109fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x574>
   10a1c:	2000      	movs	r0, #0
   10a1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10a20:	b510      	push	{r4, lr}
   10a22:	f7fe fc2a 	bl	f27a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10a26:	b108      	cbz	r0, 10a2c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5a4>
   10a28:	21e7      	movs	r1, #231	; 0xe7
   10a2a:	e003      	b.n	10a34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ac>
   10a2c:	f7f6 fe14 	bl	7658 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10a30:	b118      	cbz	r0, 10a3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5b2>
   10a32:	21ec      	movs	r1, #236	; 0xec
   10a34:	2001      	movs	r0, #1
   10a36:	f7f4 f9a7 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a3e:	2001      	movs	r0, #1
   10a40:	f7f4 bb70 	b.w	5124 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10a44:	6802      	ldr	r2, [r0, #0]
   10a46:	b912      	cbnz	r2, 10a4e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c6>
   10a48:	6001      	str	r1, [r0, #0]
   10a4a:	4770      	bx	lr
   10a4c:	4602      	mov	r2, r0
   10a4e:	6850      	ldr	r0, [r2, #4]
   10a50:	b108      	cbz	r0, 10a56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ce>
   10a52:	428a      	cmp	r2, r1
   10a54:	d1fa      	bne.n	10a4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c4>
   10a56:	428a      	cmp	r2, r1
   10a58:	d0f7      	beq.n	10a4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c2>
   10a5a:	6051      	str	r1, [r2, #4]
   10a5c:	4770      	bx	lr
   10a5e:	b510      	push	{r4, lr}
   10a60:	4604      	mov	r4, r0
   10a62:	e002      	b.n	10a6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5e2>
   10a64:	6820      	ldr	r0, [r4, #0]
   10a66:	4780      	blx	r0
   10a68:	6864      	ldr	r4, [r4, #4]
   10a6a:	2c00      	cmp	r4, #0
   10a6c:	d1fa      	bne.n	10a64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5dc>
   10a6e:	bd10      	pop	{r4, pc}
   10a70:	b510      	push	{r4, lr}
   10a72:	2000      	movs	r0, #0
   10a74:	f7f4 fb56 	bl	5124 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10a78:	f7f4 fd8c 	bl	5594 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10a7c:	f7f5 f80c 	bl	5a98 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10a80:	f7f5 f9f8 	bl	5e74 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10a84:	2800      	cmp	r0, #0
   10a86:	d003      	beq.n	10a90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x608>
   10a88:	21c6      	movs	r1, #198	; 0xc6
   10a8a:	2001      	movs	r0, #1
   10a8c:	f7f4 f97c 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a90:	bd10      	pop	{r4, pc}
   10a92:	b510      	push	{r4, lr}
   10a94:	f7ff ffc4 	bl	10a20 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x598>
   10a98:	f7fe ff42 	bl	f920 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10a9c:	2800      	cmp	r0, #0
   10a9e:	d004      	beq.n	10aaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x622>
   10aa0:	f240 1103 	movw	r1, #259	; 0x103
   10aa4:	2001      	movs	r0, #1
   10aa6:	f7f4 f96f 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10aaa:	bd10      	pop	{r4, pc}

00010aac <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10aac:	f7f3 bdc0 	b.w	4630 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10ab0:	000b0001 	.word	0x000b0001
   10ab4:	000a0002 	.word	0x000a0002
   10ab8:	00090005 	.word	0x00090005
   10abc:	0008000a 	.word	0x0008000a
   10ac0:	00070014 	.word	0x00070014
   10ac4:	0006001e 	.word	0x0006001e
   10ac8:	00050032 	.word	0x00050032
   10acc:	0004004b 	.word	0x0004004b
   10ad0:	00030064 	.word	0x00030064
   10ad4:	00020096 	.word	0x00020096
   10ad8:	000100fa 	.word	0x000100fa
   10adc:	000001f4 	.word	0x000001f4

00010ae0 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10ae0:	b510      	push	{r4, lr}
   10ae2:	f7fb f81b 	bl	bb1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10ae6:	f000 f81d 	bl	10b24 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10aea:	f7fa fcdb 	bl	b4a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10af2:	f7fa bdd5 	b.w	b6a0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010af6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10af6:	b510      	push	{r4, lr}
   10af8:	24c8      	movs	r4, #200	; 0xc8
   10afa:	1e64      	subs	r4, r4, #1
   10afc:	b2e4      	uxtb	r4, r4
   10afe:	f7fa fcef 	bl	b4e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10b02:	2802      	cmp	r0, #2
   10b04:	d003      	beq.n	10b0e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10b06:	2801      	cmp	r0, #1
   10b08:	d000      	beq.n	10b0c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10b0a:	2000      	movs	r0, #0
   10b0c:	bd10      	pop	{r4, pc}
   10b0e:	2c00      	cmp	r4, #0
   10b10:	d1f3      	bne.n	10afa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10b12:	219e      	movs	r1, #158	; 0x9e
   10b14:	203b      	movs	r0, #59	; 0x3b
   10b16:	f7f4 f937 	bl	4d88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b1a:	5840      	ldr	r0, [r0, r1]
   10b1c:	2800      	cmp	r0, #0
   10b1e:	d000      	beq.n	10b22 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10b20:	2001      	movs	r0, #1
   10b22:	4770      	bx	lr

00010b24 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10b24:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10b2c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10b30:	f3bf 8f4f 	dsb	sy
   10b34:	f3bf 8f6f 	isb	sy
   10b38:	f7fa be4c 	b.w	b7d4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10b3c:	2800      	cmp	r0, #0
   10b3e:	db09      	blt.n	10b54 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10b40:	f000 021f 	and.w	r2, r0, #31
   10b44:	2101      	movs	r1, #1
   10b46:	4091      	lsls	r1, r2
   10b48:	0940      	lsrs	r0, r0, #5
   10b4a:	0080      	lsls	r0, r0, #2
   10b4c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b50:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b54:	4770      	bx	lr
   10b56:	2800      	cmp	r0, #0
   10b58:	db0d      	blt.n	10b76 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10b5a:	f000 021f 	and.w	r2, r0, #31
   10b5e:	2101      	movs	r1, #1
   10b60:	4091      	lsls	r1, r2
   10b62:	0940      	lsrs	r0, r0, #5
   10b64:	0080      	lsls	r0, r0, #2
   10b66:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b6a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10b6e:	f3bf 8f4f 	dsb	sy
   10b72:	f3bf 8f6f 	isb	sy
   10b76:	4770      	bx	lr
   10b78:	5840      	ldr	r0, [r0, r1]
   10b7a:	2800      	cmp	r0, #0
   10b7c:	d000      	beq.n	10b80 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10b7e:	2001      	movs	r0, #1
   10b80:	4770      	bx	lr
   10b82:	5840      	ldr	r0, [r0, r1]
   10b84:	2800      	cmp	r0, #0
   10b86:	d000      	beq.n	10b8a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10b88:	2001      	movs	r0, #1
   10b8a:	4770      	bx	lr

00010b8c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10b8c:	b510      	push	{r4, lr}
   10b8e:	4604      	mov	r4, r0
   10b90:	4608      	mov	r0, r1
   10b92:	f7fb f8fb 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10b96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10b9a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10b9e:	fbb0 f0f1 	udiv	r0, r0, r1
   10ba2:	1a20      	subs	r0, r4, r0
   10ba4:	1e80      	subs	r0, r0, #2
   10ba6:	bd10      	pop	{r4, pc}

00010ba8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10ba8:	b510      	push	{r4, lr}
   10baa:	4604      	mov	r4, r0
   10bac:	4608      	mov	r0, r1
   10bae:	f7fb f8ed 	bl	bd8c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10bb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10bb6:	fbb0 f0f1 	udiv	r0, r0, r1
   10bba:	1a20      	subs	r0, r4, r0
   10bbc:	bd10      	pop	{r4, pc}
   10bbe:	080c      	.short	0x080c
   10bc0:	010d1702 	.word	0x010d1702
   10bc4:	09090201 	.word	0x09090201
   10bc8:	02060101 	.word	0x02060101
   10bcc:	03181809 	.word	0x03181809
   10bd0:	09090101 	.word	0x09090101
   10bd4:	22050303 	.word	0x22050303

00010bd8 <sendDataIMU>:
static struct device *ICM;

static const struct gpio_dt_spec imuInt = GPIO_DT_SPEC_GET_OR(IMU_INT, gpios,{0});
static struct gpio_callback imuInt_cb_data;

static void sendDataIMU(){
   10bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
}

static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
    uint8_t ret;
    ret = i2c_write(ICM, &subAddress, 1, address);
   10bdc:	4c40      	ldr	r4, [pc, #256]	; (10ce0 <sendDataIMU+0x108>)
static void sendDataIMU(){
   10bde:	b088      	sub	sp, #32
static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
   10be0:	231d      	movs	r3, #29
    ret = i2c_write(ICM, &subAddress, 1, address);
   10be2:	6820      	ldr	r0, [r4, #0]
   10be4:	f88d 3003 	strb.w	r3, [sp, #3]
   10be8:	2201      	movs	r2, #1
   10bea:	2368      	movs	r3, #104	; 0x68
   10bec:	f10d 0103 	add.w	r1, sp, #3
   10bf0:	f00e f84a 	bl	1ec88 <i2c_write.isra.0>
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
   10bf4:	230e      	movs	r3, #14
    ret = i2c_read(ICM, dest, count, address);
   10bf6:	6820      	ldr	r0, [r4, #0]
   10bf8:	9302      	str	r3, [sp, #8]
	msg.buf = buf;
   10bfa:	ac04      	add	r4, sp, #16
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10bfc:	2303      	movs	r3, #3
	msg.buf = buf;
   10bfe:	9401      	str	r4, [sp, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10c00:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10c04:	6883      	ldr	r3, [r0, #8]
   10c06:	4f37      	ldr	r7, [pc, #220]	; (10ce4 <sendDataIMU+0x10c>)
   10c08:	689d      	ldr	r5, [r3, #8]
   10c0a:	4e37      	ldr	r6, [pc, #220]	; (10ce8 <sendDataIMU+0x110>)
   10c0c:	2368      	movs	r3, #104	; 0x68
   10c0e:	2201      	movs	r2, #1
   10c10:	a901      	add	r1, sp, #4
   10c12:	47a8      	blx	r5
static uint8_t readData()
{
    uint8_t rawData[14];  // x/y/z accel register data stored here
    uint8_t error=0;
    error = readBytes(ICM42605_ADDRESS, ICM42605_TEMP_DATA1, 14, &rawData[0]);  // Read the 14 raw data registers into data array
    if(error){
   10c14:	b2c0      	uxtb	r0, r0
   10c16:	4d35      	ldr	r5, [pc, #212]	; (10cec <sendDataIMU+0x114>)
   10c18:	bb08      	cbnz	r0, 10c5e <sendDataIMU+0x86>
    //Gyr y
    destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
    //Gyr z
    destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
    t= destination[0];
    ax = destination[1] *_aRes;
   10c1a:	4b35      	ldr	r3, [pc, #212]	; (10cf0 <sendDataIMU+0x118>)
   10c1c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   10c20:	f8d3 8000 	ldr.w	r8, [r3]
   10c24:	f8bd a014 	ldrh.w	sl, [sp, #20]
   10c28:	f8bd 9016 	ldrh.w	r9, [sp, #22]
   10c2c:	bac0      	revsh	r0, r0
   10c2e:	f7f0 f87b 	bl	d28 <__aeabi_i2f>
   10c32:	4641      	mov	r1, r8
   10c34:	f7ef fa64 	bl	100 <__aeabi_fmul>
   10c38:	fa9a faba 	revsh.w	sl, sl
   10c3c:	6038      	str	r0, [r7, #0]
    ay = destination[2] *_aRes;
   10c3e:	4650      	mov	r0, sl
   10c40:	f7f0 f872 	bl	d28 <__aeabi_i2f>
   10c44:	4641      	mov	r1, r8
   10c46:	f7ef fa5b 	bl	100 <__aeabi_fmul>
   10c4a:	fa99 f9b9 	revsh.w	r9, r9
   10c4e:	6030      	str	r0, [r6, #0]
    az = destination[3] *_aRes;
   10c50:	4648      	mov	r0, r9
   10c52:	f7f0 f869 	bl	d28 <__aeabi_i2f>
   10c56:	4641      	mov	r1, r8
   10c58:	f7ef fa52 	bl	100 <__aeabi_fmul>
   10c5c:	6028      	str	r0, [r5, #0]
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10c5e:	f012 f9bc 	bl	22fda <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   10c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c66:	fba0 0302 	umull	r0, r3, r0, r2
   10c6a:	fb02 3101 	mla	r1, r2, r1, r3
   10c6e:	0bc0      	lsrs	r0, r0, #15
  float timestamp = k_uptime_get() /1000.0;
   10c70:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   10c74:	0bc9      	lsrs	r1, r1, #15
   10c76:	f7ef fc85 	bl	584 <__aeabi_l2d>
   10c7a:	2200      	movs	r2, #0
   10c7c:	4b1d      	ldr	r3, [pc, #116]	; (10cf4 <sendDataIMU+0x11c>)
   10c7e:	f7ef fdd9 	bl	834 <__aeabi_ddiv>
   10c82:	f7ef ff47 	bl	b14 <__aeabi_d2f>
  imuData.timestamp = timestamp;
   10c86:	4b1c      	ldr	r3, [pc, #112]	; (10cf8 <sendDataIMU+0x120>)
  float myArray[4] = {ax,ay,az,timestamp};
   10c88:	9007      	str	r0, [sp, #28]
  imuData.timestamp = timestamp;
   10c8a:	6198      	str	r0, [r3, #24]
  float myArray[4] = {ax,ay,az,timestamp};
   10c8c:	683b      	ldr	r3, [r7, #0]
   10c8e:	9304      	str	r3, [sp, #16]
   10c90:	6833      	ldr	r3, [r6, #0]
   10c92:	9305      	str	r3, [sp, #20]
   10c94:	682b      	ldr	r3, [r5, #0]
   10c96:	9306      	str	r3, [sp, #24]
  float timestamp = k_uptime_get() /1000.0;
   10c98:	4680      	mov	r8, r0
  if(timestamp > oldTime +0.01){
   10c9a:	f7ef fc49 	bl	530 <__aeabi_f2d>
   10c9e:	4d17      	ldr	r5, [pc, #92]	; (10cfc <sendDataIMU+0x124>)
   10ca0:	4606      	mov	r6, r0
   10ca2:	6828      	ldr	r0, [r5, #0]
   10ca4:	460f      	mov	r7, r1
   10ca6:	f7ef fc43 	bl	530 <__aeabi_f2d>
   10caa:	a30b      	add	r3, pc, #44	; (adr r3, 10cd8 <sendDataIMU+0x100>)
   10cac:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cb0:	f7ef fae0 	bl	274 <__adddf3>
   10cb4:	4602      	mov	r2, r0
   10cb6:	460b      	mov	r3, r1
   10cb8:	4630      	mov	r0, r6
   10cba:	4639      	mov	r1, r7
   10cbc:	f7ef ff20 	bl	b00 <__aeabi_dcmpgt>
   10cc0:	b130      	cbz	r0, 10cd0 <sendDataIMU+0xf8>
    sendData(SENSOR_IMU_ACC_ID, &myArray, 4*4);
   10cc2:	2210      	movs	r2, #16
   10cc4:	4621      	mov	r1, r4
   10cc6:	2002      	movs	r0, #2
   10cc8:	f000 fa6a 	bl	111a0 <sendData>
    oldTime=timestamp;
   10ccc:	f8c5 8000 	str.w	r8, [r5]
}
   10cd0:	b008      	add	sp, #32
   10cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10cd6:	bf00      	nop
   10cd8:	47ae147b 	.word	0x47ae147b
   10cdc:	3f847ae1 	.word	0x3f847ae1
   10ce0:	20001e18 	.word	0x20001e18
   10ce4:	20001e24 	.word	0x20001e24
   10ce8:	20001e28 	.word	0x20001e28
   10cec:	20001e2c 	.word	0x20001e2c
   10cf0:	20001e1c 	.word	0x20001e1c
   10cf4:	408f4000 	.word	0x408f4000
   10cf8:	20001e80 	.word	0x20001e80
   10cfc:	20001e3c 	.word	0x20001e3c

00010d00 <setConfigIMU>:
  printk("config received \n");
   10d00:	4801      	ldr	r0, [pc, #4]	; (10d08 <setConfigIMU+0x8>)
   10d02:	f00e bc44 	b.w	1f58e <printk>
   10d06:	bf00      	nop
   10d08:	0002436c 	.word	0x0002436c

00010d0c <imuDataReady>:
	k_work_submit(&work_data);
   10d0c:	4801      	ldr	r0, [pc, #4]	; (10d14 <imuDataReady+0x8>)
   10d0e:	f00a b91d 	b.w	1af4c <k_work_submit>
   10d12:	bf00      	nop
   10d14:	20001e50 	.word	0x20001e50

00010d18 <writeByte.constprop.0.isra.0>:
static uint8_t writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data){
   10d18:	b507      	push	{r0, r1, r2, lr}
	  dataBuffer[0]=regAddr;
   10d1a:	f88d 0004 	strb.w	r0, [sp, #4]
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
   10d1e:	4806      	ldr	r0, [pc, #24]	; (10d38 <writeByte.constprop.0.isra.0+0x20>)
    dataBuffer[1]=data;
   10d20:	f88d 1005 	strb.w	r1, [sp, #5]
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
   10d24:	6800      	ldr	r0, [r0, #0]
   10d26:	2368      	movs	r3, #104	; 0x68
   10d28:	2202      	movs	r2, #2
   10d2a:	a901      	add	r1, sp, #4
   10d2c:	f00d ffac 	bl	1ec88 <i2c_write.isra.0>
}
   10d30:	b003      	add	sp, #12
   10d32:	f85d fb04 	ldr.w	pc, [sp], #4
   10d36:	bf00      	nop
   10d38:	20001e18 	.word	0x20001e18

00010d3c <readByte.constprop.0>:
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10d3c:	b510      	push	{r4, lr}
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10d3e:	4c0e      	ldr	r4, [pc, #56]	; (10d78 <readByte.constprop.0+0x3c>)
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10d40:	b086      	sub	sp, #24
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10d42:	2368      	movs	r3, #104	; 0x68
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10d44:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10d48:	2201      	movs	r2, #1
   10d4a:	6820      	ldr	r0, [r4, #0]
   10d4c:	f10d 0107 	add.w	r1, sp, #7
   10d50:	f00d ff9a 	bl	1ec88 <i2c_write.isra.0>
	msg.buf = buf;
   10d54:	f10d 030b 	add.w	r3, sp, #11
   10d58:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   10d5a:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10d5c:	2303      	movs	r3, #3
	ret = i2c_read(ICM, &read_data, 1, i2cAddress);
   10d5e:	6820      	ldr	r0, [r4, #0]
	msg.len = num_bytes;
   10d60:	9204      	str	r2, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10d62:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10d66:	6883      	ldr	r3, [r0, #8]
   10d68:	a903      	add	r1, sp, #12
   10d6a:	689c      	ldr	r4, [r3, #8]
   10d6c:	2368      	movs	r3, #104	; 0x68
   10d6e:	47a0      	blx	r4
}
   10d70:	b2c0      	uxtb	r0, r0
   10d72:	b006      	add	sp, #24
   10d74:	bd10      	pop	{r4, pc}
   10d76:	bf00      	nop
   10d78:	20001e18 	.word	0x20001e18

00010d7c <init_Interrupt_IMU>:
int8_t init_Interrupt_IMU(){
   10d7c:	b570      	push	{r4, r5, r6, lr}
	k_work_init(&work_data, sendDataIMU);
   10d7e:	4924      	ldr	r1, [pc, #144]	; (10e10 <init_Interrupt_IMU+0x94>)
   10d80:	4824      	ldr	r0, [pc, #144]	; (10e14 <init_Interrupt_IMU+0x98>)
   10d82:	f011 ff4c 	bl	22c1e <k_work_init>
	k_work_init(&work_config, setConfigIMU);
   10d86:	4924      	ldr	r1, [pc, #144]	; (10e18 <init_Interrupt_IMU+0x9c>)
   10d88:	4824      	ldr	r0, [pc, #144]	; (10e1c <init_Interrupt_IMU+0xa0>)
   10d8a:	f011 ff48 	bl	22c1e <k_work_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10d8e:	4d24      	ldr	r5, [pc, #144]	; (10e20 <init_Interrupt_IMU+0xa4>)
   10d90:	4628      	mov	r0, r5
   10d92:	f011 fd03 	bl	2279c <z_device_is_ready>
    if (!device_is_ready(imuInt.port)) {
   10d96:	b930      	cbnz	r0, 10da6 <init_Interrupt_IMU+0x2a>
		printk("Error: imu interrupt %s is not ready\n",
   10d98:	6829      	ldr	r1, [r5, #0]
   10d9a:	4822      	ldr	r0, [pc, #136]	; (10e24 <init_Interrupt_IMU+0xa8>)
   10d9c:	f00e fbf7 	bl	1f58e <printk>
		return 1;
   10da0:	2401      	movs	r4, #1
}
   10da2:	4620      	mov	r0, r4
   10da4:	bd70      	pop	{r4, r5, r6, pc}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   10da6:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   10da8:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10daa:	6813      	ldr	r3, [r2, #0]
   10dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   10db0:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   10db2:	2118      	movs	r1, #24
   10db4:	6833      	ldr	r3, [r6, #0]
   10db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   10dba:	4628      	mov	r0, r5
   10dbc:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&imuInt, GPIO_INPUT);
   10dbe:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10dc0:	b134      	cbz	r4, 10dd0 <init_Interrupt_IMU+0x54>
		printk("Error %d: failed to configure %s pin %d\n",
   10dc2:	682a      	ldr	r2, [r5, #0]
   10dc4:	4818      	ldr	r0, [pc, #96]	; (10e28 <init_Interrupt_IMU+0xac>)
   10dc6:	2318      	movs	r3, #24
   10dc8:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10dca:	f00e fbe0 	bl	1f58e <printk>
		return returnValue;
   10dce:	e7e8      	b.n	10da2 <init_Interrupt_IMU+0x26>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10dd0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10dd4:	69b4      	ldr	r4, [r6, #24]
   10dd6:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   10dda:	2118      	movs	r1, #24
   10ddc:	4628      	mov	r0, r5
   10dde:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&imuInt,GPIO_INT_EDGE_RISING);
   10de0:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   10de2:	b124      	cbz	r4, 10dee <init_Interrupt_IMU+0x72>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10de4:	682a      	ldr	r2, [r5, #0]
   10de6:	4811      	ldr	r0, [pc, #68]	; (10e2c <init_Interrupt_IMU+0xb0>)
   10de8:	2318      	movs	r3, #24
   10dea:	4621      	mov	r1, r4
   10dec:	e7ed      	b.n	10dca <init_Interrupt_IMU+0x4e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   10dee:	4910      	ldr	r1, [pc, #64]	; (10e30 <init_Interrupt_IMU+0xb4>)
   10df0:	4b10      	ldr	r3, [pc, #64]	; (10e34 <init_Interrupt_IMU+0xb8>)
   10df2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   10df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10df8:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   10dfa:	69f3      	ldr	r3, [r6, #28]
   10dfc:	b113      	cbz	r3, 10e04 <init_Interrupt_IMU+0x88>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10dfe:	2201      	movs	r2, #1
   10e00:	4628      	mov	r0, r5
   10e02:	4798      	blx	r3
	printk("Set up IMU at %s pin %d\n", imuInt.port->name, imuInt.pin);
   10e04:	6829      	ldr	r1, [r5, #0]
   10e06:	480c      	ldr	r0, [pc, #48]	; (10e38 <init_Interrupt_IMU+0xbc>)
   10e08:	2218      	movs	r2, #24
   10e0a:	f00e fbc0 	bl	1f58e <printk>
  return returnValue;
   10e0e:	e7c8      	b.n	10da2 <init_Interrupt_IMU+0x26>
   10e10:	00010bd9 	.word	0x00010bd9
   10e14:	20001e50 	.word	0x20001e50
   10e18:	00010d01 	.word	0x00010d01
   10e1c:	20001e40 	.word	0x20001e40
   10e20:	0002351c 	.word	0x0002351c
   10e24:	0002437e 	.word	0x0002437e
   10e28:	000243a4 	.word	0x000243a4
   10e2c:	000243cd 	.word	0x000243cd
   10e30:	20001e30 	.word	0x20001e30
   10e34:	00010d0d 	.word	0x00010d0d
   10e38:	00024403 	.word	0x00024403

00010e3c <initIMU>:
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   10e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e3e:	461c      	mov	r4, r3
    ICM = i2c_pointer;
   10e40:	4b76      	ldr	r3, [pc, #472]	; (1101c <initIMU+0x1e0>)
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   10e42:	f89d 7018 	ldrb.w	r7, [sp, #24]
    ICM = i2c_pointer;
   10e46:	6018      	str	r0, [r3, #0]
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   10e48:	460e      	mov	r6, r1
   10e4a:	4615      	mov	r5, r2
    init_Interrupt_IMU();
   10e4c:	f7ff ff96 	bl	10d7c <init_Interrupt_IMU>
  uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG);
   10e50:	2011      	movs	r0, #17
   10e52:	f7ff ff73 	bl	10d3c <readByte.constprop.0>
  writeByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG, temp | 0x01); // Set bit 0 to 1 to reset ICM42605
   10e56:	f040 0101 	orr.w	r1, r0, #1
   10e5a:	b2c9      	uxtb	r1, r1
   10e5c:	2011      	movs	r0, #17
   10e5e:	f7ff ff5b 	bl	10d18 <writeByte.constprop.0.isra.0>
	return z_impl_k_sleep(timeout);
   10e62:	2100      	movs	r1, #0
   10e64:	f44f 70a4 	mov.w	r0, #328	; 0x148
   10e68:	f00a fbea 	bl	1b640 <z_impl_k_sleep>
   10e6c:	2100      	movs	r1, #0
   10e6e:	f640 40cd 	movw	r0, #3277	; 0xccd
   10e72:	f00a fbe5 	bl	1b640 <z_impl_k_sleep>
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG);      
   10e76:	2013      	movs	r0, #19
   10e78:	f7ff ff60 	bl	10d3c <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 5);
   10e7c:	f000 01c9 	and.w	r1, r0, #201	; 0xc9
    writeByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG, temp);// set i2c slew rate to 20-60ns
   10e80:	f041 0109 	orr.w	r1, r1, #9
   10e84:	2013      	movs	r0, #19
   10e86:	f7ff ff47 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6);      
   10e8a:	207c      	movs	r0, #124	; 0x7c
   10e8c:	f7ff ff56 	bl	10d3c <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 1);
   10e90:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6, temp);// 
   10e94:	f041 0110 	orr.w	r1, r1, #16
   10e98:	207c      	movs	r0, #124	; 0x7c
   10e9a:	f7ff ff3d 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4);      
   10e9e:	207a      	movs	r0, #122	; 0x7a
   10ea0:	f7ff ff4c 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4, temp);// 
   10ea4:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   10ea8:	207a      	movs	r0, #122	; 0x7a
   10eaa:	f7ff ff35 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0);
   10eae:	204f      	movs	r0, #79	; 0x4f
   10eb0:	f7ff ff44 	bl	10d3c <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   10eb4:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0, temp | GODR | Gscale << 5); // gyro full scale and data rate
   10eb8:	4339      	orrs	r1, r7
   10eba:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
   10ebe:	b2c9      	uxtb	r1, r1
   10ec0:	204f      	movs	r0, #79	; 0x4f
   10ec2:	f7ff ff29 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0);
   10ec6:	2050      	movs	r0, #80	; 0x50
   10ec8:	f7ff ff38 	bl	10d3c <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   10ecc:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0, temp | AODR | Ascale << 5); // set accel full scale and data rate
   10ed0:	4321      	orrs	r1, r4
   10ed2:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
   10ed6:	b2c9      	uxtb	r1, r1
   10ed8:	2050      	movs	r0, #80	; 0x50
   10eda:	f7ff ff1d 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1);
   10ede:	2051      	movs	r0, #81	; 0x51
   10ee0:	f7ff ff2c 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1, temp | 0xD0); // set temperature sensor low pass filter to 5Hz, use first order gyro filter
   10ee4:	f060 012f 	orn	r1, r0, #47	; 0x2f
   10ee8:	b2c9      	uxtb	r1, r1
   10eea:	2051      	movs	r0, #81	; 0x51
   10eec:	f7ff ff14 	bl	10d18 <writeByte.constprop.0.isra.0>
   10ef0:	2100      	movs	r1, #0
   10ef2:	f640 40cd 	movw	r0, #3277	; 0xccd
   10ef6:	f00a fba3 	bl	1b640 <z_impl_k_sleep>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG);
   10efa:	2014      	movs	r0, #20
   10efc:	f7ff ff1e 	bl	10d3c <readByte.constprop.0>
    temp ^= (-activeHigh ^ temp) & (1UL << 0);  // bit 0
   10f00:	43c3      	mvns	r3, r0
   10f02:	f003 0301 	and.w	r3, r3, #1
   10f06:	4058      	eors	r0, r3
   10f08:	b2c0      	uxtb	r0, r0
    temp ^= (-pushPull ^ temp) & (1UL << 1);
   10f0a:	43c1      	mvns	r1, r0
   10f0c:	f001 0102 	and.w	r1, r1, #2
   10f10:	4041      	eors	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG, temp);
   10f12:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   10f16:	2014      	movs	r0, #20
   10f18:	f7ff fefe 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1);
   10f1c:	2064      	movs	r0, #100	; 0x64
   10f1e:	f7ff ff0d 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1, temp & ~(0x10) ); // set bit 4 to zero for proper function of INT1 and INT2
   10f22:	f000 01ef 	and.w	r1, r0, #239	; 0xef
   10f26:	2064      	movs	r0, #100	; 0x64
   10f28:	f7ff fef6 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0);
   10f2c:	2063      	movs	r0, #99	; 0x63
   10f2e:	f7ff ff05 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0, temp);
   10f32:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   10f36:	2063      	movs	r0, #99	; 0x63
   10f38:	f7ff feee 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0);
   10f3c:	2065      	movs	r0, #101	; 0x65
   10f3e:	f7ff fefd 	bl	10d3c <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 6);
   10f42:	f000 0188 	and.w	r1, r0, #136	; 0x88
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0, temp ); // route data ready interrupt to INT1
   10f46:	f041 0108 	orr.w	r1, r1, #8
   10f4a:	2065      	movs	r0, #101	; 0x65
   10f4c:	f7ff fee4 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3);
   10f50:	2068      	movs	r0, #104	; 0x68
   10f52:	f7ff fef3 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3, temp | 0x01 ); // route AGC interrupt interrupt to INT2
   10f56:	f040 0101 	orr.w	r1, r0, #1
   10f5a:	b2c9      	uxtb	r1, r1
   10f5c:	2068      	movs	r0, #104	; 0x68
   10f5e:	f7ff fedb 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   10f62:	2076      	movs	r0, #118	; 0x76
   10f64:	f7ff feea 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp | 0x04 ); // select Bank 4
   10f68:	f040 0104 	orr.w	r1, r0, #4
   10f6c:	b2c9      	uxtb	r1, r1
   10f6e:	2076      	movs	r0, #118	; 0x76
   10f70:	f7ff fed2 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5);
   10f74:	2044      	movs	r0, #68	; 0x44
   10f76:	f7ff fee1 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5, temp & ~(0x07) ); // select unitary mounting matrix
   10f7a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   10f7e:	2044      	movs	r0, #68	; 0x44
   10f80:	f7ff feca 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   10f84:	2076      	movs	r0, #118	; 0x76
   10f86:	f7ff fed9 	bl	10d3c <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp & ~(0x07) ); // select Bank 0
   10f8a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   10f8e:	2076      	movs	r0, #118	; 0x76
   10f90:	f7ff fec2 	bl	10d18 <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0); // make sure not to disturb reserved bit values
   10f94:	204e      	movs	r0, #78	; 0x4e
   10f96:	f7ff fed1 	bl	10d3c <readByte.constprop.0>
   10f9a:	4601      	mov	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp | 0x00);  // disable gyro and accel
   10f9c:	204e      	movs	r0, #78	; 0x4e
   10f9e:	f7ff febb 	bl	10d18 <writeByte.constprop.0.isra.0>
  switch (Ascale)
   10fa2:	2e03      	cmp	r6, #3
   10fa4:	d807      	bhi.n	10fb6 <initIMU+0x17a>
   10fa6:	e8df f006 	tbb	[pc, r6]
   10faa:	1216      	.short	0x1216
   10fac:	020e      	.short	0x020e
      _aRes = 2.0f / 32768.0f;
   10fae:	4b1c      	ldr	r3, [pc, #112]	; (11020 <initIMU+0x1e4>)
   10fb0:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      _aRes = 16.0f / 32768.0f;
   10fb4:	601a      	str	r2, [r3, #0]
  switch (Gscale)
   10fb6:	2d07      	cmp	r5, #7
   10fb8:	d814      	bhi.n	10fe4 <initIMU+0x1a8>
   10fba:	e8df f005 	tbb	[pc, r5]
   10fbe:	292c      	.short	0x292c
   10fc0:	1d202326 	.word	0x1d202326
   10fc4:	101a      	.short	0x101a
      _aRes = 4.0f / 32768.0f;
   10fc6:	4b16      	ldr	r3, [pc, #88]	; (11020 <initIMU+0x1e4>)
   10fc8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
   10fcc:	e7f2      	b.n	10fb4 <initIMU+0x178>
      _aRes = 8.0f / 32768.0f;
   10fce:	4b14      	ldr	r3, [pc, #80]	; (11020 <initIMU+0x1e4>)
   10fd0:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
   10fd4:	e7ee      	b.n	10fb4 <initIMU+0x178>
      _aRes = 16.0f / 32768.0f;
   10fd6:	4b12      	ldr	r3, [pc, #72]	; (11020 <initIMU+0x1e4>)
   10fd8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
   10fdc:	e7ea      	b.n	10fb4 <initIMU+0x178>
      _gRes = 15.125f / 32768.0f;
   10fde:	4b11      	ldr	r3, [pc, #68]	; (11024 <initIMU+0x1e8>)
   10fe0:	4a11      	ldr	r2, [pc, #68]	; (11028 <initIMU+0x1ec>)
      _gRes = 2000.0f / 32768.0f;
   10fe2:	601a      	str	r2, [r3, #0]
   10fe4:	f44f 70a4 	mov.w	r0, #328	; 0x148
}
   10fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10fec:	2100      	movs	r1, #0
   10fee:	f00a bb27 	b.w	1b640 <z_impl_k_sleep>
      _gRes = 31.25f / 32768.0f;
   10ff2:	4b0c      	ldr	r3, [pc, #48]	; (11024 <initIMU+0x1e8>)
   10ff4:	4a0d      	ldr	r2, [pc, #52]	; (1102c <initIMU+0x1f0>)
   10ff6:	e7f4      	b.n	10fe2 <initIMU+0x1a6>
      _gRes = 62.5f / 32768.0f;
   10ff8:	4b0a      	ldr	r3, [pc, #40]	; (11024 <initIMU+0x1e8>)
   10ffa:	4a0d      	ldr	r2, [pc, #52]	; (11030 <initIMU+0x1f4>)
   10ffc:	e7f1      	b.n	10fe2 <initIMU+0x1a6>
      _gRes = 125.0f / 32768.0f;
   10ffe:	4b09      	ldr	r3, [pc, #36]	; (11024 <initIMU+0x1e8>)
   11000:	4a0c      	ldr	r2, [pc, #48]	; (11034 <initIMU+0x1f8>)
   11002:	e7ee      	b.n	10fe2 <initIMU+0x1a6>
      _gRes = 250.0f / 32768.0f;
   11004:	4b07      	ldr	r3, [pc, #28]	; (11024 <initIMU+0x1e8>)
   11006:	4a0c      	ldr	r2, [pc, #48]	; (11038 <initIMU+0x1fc>)
   11008:	e7eb      	b.n	10fe2 <initIMU+0x1a6>
      _gRes = 500.0f / 32768.0f;
   1100a:	4b06      	ldr	r3, [pc, #24]	; (11024 <initIMU+0x1e8>)
   1100c:	4a0b      	ldr	r2, [pc, #44]	; (1103c <initIMU+0x200>)
   1100e:	e7e8      	b.n	10fe2 <initIMU+0x1a6>
      _gRes = 1000.0f / 32768.0f;
   11010:	4b04      	ldr	r3, [pc, #16]	; (11024 <initIMU+0x1e8>)
   11012:	4a0b      	ldr	r2, [pc, #44]	; (11040 <initIMU+0x204>)
   11014:	e7e5      	b.n	10fe2 <initIMU+0x1a6>
      _gRes = 2000.0f / 32768.0f;
   11016:	4b03      	ldr	r3, [pc, #12]	; (11024 <initIMU+0x1e8>)
   11018:	4a0a      	ldr	r2, [pc, #40]	; (11044 <initIMU+0x208>)
   1101a:	e7e2      	b.n	10fe2 <initIMU+0x1a6>
   1101c:	20001e18 	.word	0x20001e18
   11020:	20001e1c 	.word	0x20001e1c
   11024:	20001e20 	.word	0x20001e20
   11028:	39f20000 	.word	0x39f20000
   1102c:	3a7a0000 	.word	0x3a7a0000
   11030:	3afa0000 	.word	0x3afa0000
   11034:	3b7a0000 	.word	0x3b7a0000
   11038:	3bfa0000 	.word	0x3bfa0000
   1103c:	3c7a0000 	.word	0x3c7a0000
   11040:	3cfa0000 	.word	0x3cfa0000
   11044:	3d7a0000 	.word	0x3d7a0000

00011048 <imu_config_notification>:
{
	printk("config bmp set");
}
static void imu_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
	printk("config imu set");
   11048:	4801      	ldr	r0, [pc, #4]	; (11050 <imu_config_notification+0x8>)
   1104a:	f00e baa0 	b.w	1f58e <printk>
   1104e:	bf00      	nop
   11050:	0002441c 	.word	0x0002441c

00011054 <bmp_config_notification>:
	printk("config bmp set");
   11054:	4801      	ldr	r0, [pc, #4]	; (1105c <bmp_config_notification+0x8>)
   11056:	f00e ba9a 	b.w	1f58e <printk>
   1105a:	bf00      	nop
   1105c:	0002442b 	.word	0x0002442b

00011060 <read_u16>:
#include "ble.h"

static ssize_t read_u16(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, uint16_t len, uint16_t offset)
{
   11060:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11064:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   11068:	460c      	mov	r4, r1
   1106a:	4606      	mov	r6, r0
	// this function is only called on READ, which one is called if notification is set?!
    printk("len: %i\n",len);
   1106c:	4619      	mov	r1, r3
   1106e:	480b      	ldr	r0, [pc, #44]	; (1109c <read_u16+0x3c>)
{
   11070:	461d      	mov	r5, r3
   11072:	4617      	mov	r7, r2
    printk("len: %i\n",len);
   11074:	f00e fa8b 	bl	1f58e <printk>
	printk("offset: %i\n",offset);
   11078:	4641      	mov	r1, r8
   1107a:	4809      	ldr	r0, [pc, #36]	; (110a0 <read_u16+0x40>)
   1107c:	f00e fa87 	bl	1f58e <printk>
	//const uint16_t *u16 = attr->user_data;
	//uint16_t value = sys_cpu_to_le16(*u16);
	uint8_t *value = attr->user_data;

//	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(value));
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, 12);
   11080:	230c      	movs	r3, #12
   11082:	9302      	str	r3, [sp, #8]
   11084:	68e3      	ldr	r3, [r4, #12]
   11086:	463a      	mov	r2, r7
   11088:	e9cd 8300 	strd	r8, r3, [sp]
   1108c:	4621      	mov	r1, r4
   1108e:	462b      	mov	r3, r5
   11090:	4630      	mov	r0, r6
   11092:	f010 fdec 	bl	21c6e <bt_gatt_attr_read>
}
   11096:	b004      	add	sp, #16
   11098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1109c:	0002443a 	.word	0x0002443a
   110a0:	00024443 	.word	0x00024443

000110a4 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   110a4:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
   110a6:	4804      	ldr	r0, [pc, #16]	; (110b8 <disconnected+0x14>)
   110a8:	f00e fa71 	bl	1f58e <printk>
	sleepBMP(1);
}
   110ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sleepBMP(1);
   110b0:	2001      	movs	r0, #1
   110b2:	f000 bca9 	b.w	11a08 <sleepBMP>
   110b6:	bf00      	nop
   110b8:	0002444f 	.word	0x0002444f

000110bc <connected>:
{
   110bc:	b510      	push	{r4, lr}
   110be:	460c      	mov	r4, r1
	bt_conn_le_param_update(conn,&conn_paramter);
   110c0:	4907      	ldr	r1, [pc, #28]	; (110e0 <connected+0x24>)
   110c2:	f00f fd56 	bl	20b72 <bt_conn_le_param_update>
	if (err) {
   110c6:	b12c      	cbz	r4, 110d4 <connected+0x18>
		printk("Connection failed (err 0x%02x)\n", err);
   110c8:	4621      	mov	r1, r4
   110ca:	4806      	ldr	r0, [pc, #24]	; (110e4 <connected+0x28>)
}
   110cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err 0x%02x)\n", err);
   110d0:	f00e ba5d 	b.w	1f58e <printk>
}
   110d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connected\n");
   110d8:	4803      	ldr	r0, [pc, #12]	; (110e8 <connected+0x2c>)
   110da:	f00e ba58 	b.w	1f58e <printk>
   110de:	bf00      	nop
   110e0:	00024364 	.word	0x00024364
   110e4:	0002446d 	.word	0x0002446d
   110e8:	0002448d 	.word	0x0002448d

000110ec <dataWritten>:
{
   110ec:	b570      	push	{r4, r5, r6, lr}
   110ee:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   110f2:	460d      	mov	r5, r1
	if (offset + len > sizeof(config_data)) {
   110f4:	461c      	mov	r4, r3
   110f6:	18c3      	adds	r3, r0, r3
   110f8:	2b14      	cmp	r3, #20
	uint8_t *value = attr->user_data;
   110fa:	68ee      	ldr	r6, [r5, #12]
{
   110fc:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   110fe:	dc0b      	bgt.n	11118 <dataWritten+0x2c>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11100:	4622      	mov	r2, r4
   11102:	4430      	add	r0, r6
   11104:	f012 f923 	bl	2334e <memcpy>
	if(attr->uuid == &bmp_cnfg.uuid){
   11108:	682a      	ldr	r2, [r5, #0]
   1110a:	4b05      	ldr	r3, [pc, #20]	; (11120 <dataWritten+0x34>)
   1110c:	429a      	cmp	r2, r3
   1110e:	d101      	bne.n	11114 <dataWritten+0x28>
		submitConfigBMP();
   11110:	f000 fc74 	bl	119fc <submitConfigBMP>
}
   11114:	4620      	mov	r0, r4
   11116:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11118:	f06f 0406 	mvn.w	r4, #6
   1111c:	e7fa      	b.n	11114 <dataWritten+0x28>
   1111e:	bf00      	nop
   11120:	20000929 	.word	0x20000929

00011124 <bt_gatt_notify_uuid.constprop.0.isra.0>:
 *  @param data Pointer to Attribute data.
 *  @param len  Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify_uuid(struct bt_conn *conn,
   11124:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.uuid = uuid;
   11126:	9000      	str	r0, [sp, #0]
	params.attr = attr;
   11128:	4807      	ldr	r0, [pc, #28]	; (11148 <bt_gatt_notify_uuid.constprop.0.isra.0+0x24>)
	memset(&params, 0, sizeof(params));
   1112a:	2300      	movs	r3, #0
	params.data = data;
   1112c:	e9cd 0101 	strd	r0, r1, [sp, #4]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   11130:	4669      	mov	r1, sp
   11132:	4618      	mov	r0, r3
	memset(&params, 0, sizeof(params));
   11134:	e9cd 3303 	strd	r3, r3, [sp, #12]
   11138:	9305      	str	r3, [sp, #20]
	params.len = len;
   1113a:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   1113e:	f005 fded 	bl	16d1c <bt_gatt_notify_cb>
}
   11142:	b007      	add	sp, #28
   11144:	f85d fb04 	ldr.w	pc, [sp], #4
   11148:	00023894 	.word	0x00023894

0001114c <initBLE>:
		battery_level = 100U;
	}

	bt_bas_set_battery_level(battery_level);
}
extern void initBLE(){
   1114c:	b507      	push	{r0, r1, r2, lr}
     bt_enable(NULL);
   1114e:	2000      	movs	r0, #0
   11150:	f003 fbb6 	bl	148c0 <bt_enable>
	printk("Bluetooth initialized\n");
   11154:	480c      	ldr	r0, [pc, #48]	; (11188 <initBLE+0x3c>)
   11156:	f00e fa1a 	bl	1f58e <printk>
	err = bt_le_adv_start(&adv_param_normal, ad, ARRAY_SIZE(ad), NULL, 0);
   1115a:	2300      	movs	r3, #0
   1115c:	490b      	ldr	r1, [pc, #44]	; (1118c <initBLE+0x40>)
   1115e:	480c      	ldr	r0, [pc, #48]	; (11190 <initBLE+0x44>)
   11160:	9300      	str	r3, [sp, #0]
   11162:	2203      	movs	r2, #3
   11164:	f003 ff98 	bl	15098 <bt_le_adv_start>
	if (err) {
   11168:	4601      	mov	r1, r0
   1116a:	b140      	cbz	r0, 1117e <initBLE+0x32>
		printk("Advertising failed to start (err %d)\n", err);
   1116c:	4809      	ldr	r0, [pc, #36]	; (11194 <initBLE+0x48>)
   1116e:	f00e fa0e 	bl	1f58e <printk>
     bt_ready();
     bt_conn_cb_register(&conn_callbacks);
   11172:	4809      	ldr	r0, [pc, #36]	; (11198 <initBLE+0x4c>)
};
   11174:	b003      	add	sp, #12
   11176:	f85d eb04 	ldr.w	lr, [sp], #4
     bt_conn_cb_register(&conn_callbacks);
   1117a:	f004 bb07 	b.w	1578c <bt_conn_cb_register>
	printk("Advertising successfully started\n");
   1117e:	4807      	ldr	r0, [pc, #28]	; (1119c <initBLE+0x50>)
   11180:	f00e fa05 	bl	1f58e <printk>
   11184:	e7f5      	b.n	11172 <initBLE+0x26>
   11186:	bf00      	nop
   11188:	00024498 	.word	0x00024498
   1118c:	00023868 	.word	0x00023868
   11190:	00023880 	.word	0x00023880
   11194:	000244af 	.word	0x000244af
   11198:	200005b8 	.word	0x200005b8
   1119c:	000244d5 	.word	0x000244d5

000111a0 <sendData>:


extern void sendData(uint8_t ID, float* DATA,uint8_t LEN){
	if(ID == SENSOR_IMU_ACC_ID){
   111a0:	2802      	cmp	r0, #2
   111a2:	d102      	bne.n	111aa <sendData+0xa>
		bt_gatt_notify_uuid(NULL, &icm_uuid_acc.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   111a4:	4805      	ldr	r0, [pc, #20]	; (111bc <sendData+0x1c>)
	if(ID == SENSOR_IMU_GYR_ID){
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if(ID == SENSOR_BMP384_ID){
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   111a6:	f7ff bfbd 	b.w	11124 <bt_gatt_notify_uuid.constprop.0.isra.0>
	if(ID == SENSOR_IMU_GYR_ID){
   111aa:	2803      	cmp	r0, #3
   111ac:	d101      	bne.n	111b2 <sendData+0x12>
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   111ae:	4804      	ldr	r0, [pc, #16]	; (111c0 <sendData+0x20>)
   111b0:	e7f9      	b.n	111a6 <sendData+0x6>
	if(ID == SENSOR_BMP384_ID){
   111b2:	2801      	cmp	r0, #1
   111b4:	d101      	bne.n	111ba <sendData+0x1a>
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   111b6:	4803      	ldr	r0, [pc, #12]	; (111c4 <sendData+0x24>)
   111b8:	e7f5      	b.n	111a6 <sendData+0x6>
		return;
	}	
};
   111ba:	4770      	bx	lr
   111bc:	2000096d 	.word	0x2000096d
   111c0:	2000097e 	.word	0x2000097e
   111c4:	2000093a 	.word	0x2000093a

000111c8 <printMLX>:
{
	//printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
	k_work_submit(&work_mlx);

}
extern void printMLX(){
   111c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    float x,y,z;
    mlx_readMeasurement(&mlxData.x,&mlxData.y,&mlxData.z,mlxdev);
   111ca:	4c10      	ldr	r4, [pc, #64]	; (1120c <printMLX+0x44>)
   111cc:	4b10      	ldr	r3, [pc, #64]	; (11210 <printMLX+0x48>)
   111ce:	f1a4 0608 	sub.w	r6, r4, #8
   111d2:	4622      	mov	r2, r4
   111d4:	681b      	ldr	r3, [r3, #0]
   111d6:	1f21      	subs	r1, r4, #4
   111d8:	4630      	mov	r0, r6
   111da:	f000 fcf3 	bl	11bc4 <mlx_readMeasurement>
	if(1){
    	printk("MLX: x: %f y: %f z: %f \n",mlxData.x,mlxData.y,mlxData.z);
   111de:	f854 0c08 	ldr.w	r0, [r4, #-8]
   111e2:	f7ef f9a5 	bl	530 <__aeabi_f2d>
   111e6:	4604      	mov	r4, r0
   111e8:	68b0      	ldr	r0, [r6, #8]
   111ea:	460d      	mov	r5, r1
   111ec:	f7ef f9a0 	bl	530 <__aeabi_f2d>
   111f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   111f4:	6870      	ldr	r0, [r6, #4]
   111f6:	f7ef f99b 	bl	530 <__aeabi_f2d>
   111fa:	4622      	mov	r2, r4
   111fc:	e9cd 0100 	strd	r0, r1, [sp]
   11200:	462b      	mov	r3, r5
   11202:	4804      	ldr	r0, [pc, #16]	; (11214 <printMLX+0x4c>)
   11204:	f00e f9c3 	bl	1f58e <printk>
	}
}
   11208:	b004      	add	sp, #16
   1120a:	bd70      	pop	{r4, r5, r6, pc}
   1120c:	20001eb8 	.word	0x20001eb8
   11210:	20001ecc 	.word	0x20001ecc
   11214:	000244f7 	.word	0x000244f7

00011218 <mlx_int1_triggered>:
	k_work_submit(&work_mlx);
   11218:	4801      	ldr	r0, [pc, #4]	; (11220 <mlx_int1_triggered+0x8>)
   1121a:	f009 be97 	b.w	1af4c <k_work_submit>
   1121e:	bf00      	nop
   11220:	20001ed0 	.word	0x20001ed0

00011224 <initMLX>:
extern void initMLX(struct device *i2c_dev){
   11224:	b510      	push	{r4, lr}
   11226:	4604      	mov	r4, r0
    	mlx_init(i2c_dev);
   11228:	f00e f949 	bl	1f4be <mlx_init>
        mlxdev = i2c_dev;
   1122c:	4b01      	ldr	r3, [pc, #4]	; (11234 <initMLX+0x10>)
   1122e:	601c      	str	r4, [r3, #0]
}
   11230:	bd10      	pop	{r4, pc}
   11232:	bf00      	nop
   11234:	20001ecc 	.word	0x20001ecc

00011238 <init_Interrupt_MLX>:

int8_t init_Interrupt_MLX(){
   11238:	b570      	push	{r4, r5, r6, lr}
    int8_t returnValue;

	k_work_init(&work_mlx, printMLX);
   1123a:	4922      	ldr	r1, [pc, #136]	; (112c4 <init_Interrupt_MLX+0x8c>)
   1123c:	4822      	ldr	r0, [pc, #136]	; (112c8 <init_Interrupt_MLX+0x90>)
   1123e:	f011 fcee 	bl	22c1e <k_work_init>
   11242:	4d22      	ldr	r5, [pc, #136]	; (112cc <init_Interrupt_MLX+0x94>)
   11244:	4628      	mov	r0, r5
   11246:	f011 faa9 	bl	2279c <z_device_is_ready>

    if (!device_is_ready(mlx_int1.port)) {
   1124a:	b930      	cbnz	r0, 1125a <init_Interrupt_MLX+0x22>
		printk("Error: button device %s is not ready\n",
   1124c:	6829      	ldr	r1, [r5, #0]
   1124e:	4820      	ldr	r0, [pc, #128]	; (112d0 <init_Interrupt_MLX+0x98>)
   11250:	f00e f99d 	bl	1f58e <printk>
		       mlx_int1.port->name);
		return 1;
   11254:	2401      	movs	r4, #1
	gpio_init_callback(&mlx_int1_cb_data, mlx_int1_triggered, BIT(mlx_int1.pin));
	gpio_add_callback(mlx_int1.port, &mlx_int1_cb_data);
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);

    return returnValue;
}
   11256:	4620      	mov	r0, r4
   11258:	bd70      	pop	{r4, r5, r6, pc}
	struct gpio_driver_data *data =
   1125a:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   1125c:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1125e:	6813      	ldr	r3, [r2, #0]
   11260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   11264:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11266:	210f      	movs	r1, #15
   11268:	6833      	ldr	r3, [r6, #0]
   1126a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1126e:	4628      	mov	r0, r5
   11270:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&mlx_int1, GPIO_INPUT);
   11272:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11274:	b134      	cbz	r4, 11284 <init_Interrupt_MLX+0x4c>
		printk("Error %d: failed to configure %s pin %d\n",
   11276:	682a      	ldr	r2, [r5, #0]
   11278:	4816      	ldr	r0, [pc, #88]	; (112d4 <init_Interrupt_MLX+0x9c>)
   1127a:	230f      	movs	r3, #15
   1127c:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1127e:	f00e f986 	bl	1f58e <printk>
		return returnValue;
   11282:	e7e8      	b.n	11256 <init_Interrupt_MLX+0x1e>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11284:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11288:	69b4      	ldr	r4, [r6, #24]
   1128a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   1128e:	210f      	movs	r1, #15
   11290:	4628      	mov	r0, r5
   11292:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
   11294:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11296:	b124      	cbz	r4, 112a2 <init_Interrupt_MLX+0x6a>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   11298:	682a      	ldr	r2, [r5, #0]
   1129a:	480f      	ldr	r0, [pc, #60]	; (112d8 <init_Interrupt_MLX+0xa0>)
   1129c:	230f      	movs	r3, #15
   1129e:	4621      	mov	r1, r4
   112a0:	e7ed      	b.n	1127e <init_Interrupt_MLX+0x46>
	callback->handler = handler;
   112a2:	490e      	ldr	r1, [pc, #56]	; (112dc <init_Interrupt_MLX+0xa4>)
   112a4:	4b0e      	ldr	r3, [pc, #56]	; (112e0 <init_Interrupt_MLX+0xa8>)
   112a6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   112a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   112ac:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   112ae:	69f3      	ldr	r3, [r6, #28]
   112b0:	b113      	cbz	r3, 112b8 <init_Interrupt_MLX+0x80>
	return api->manage_callback(port, callback, true);
   112b2:	2201      	movs	r2, #1
   112b4:	4628      	mov	r0, r5
   112b6:	4798      	blx	r3
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);
   112b8:	6829      	ldr	r1, [r5, #0]
   112ba:	480a      	ldr	r0, [pc, #40]	; (112e4 <init_Interrupt_MLX+0xac>)
   112bc:	220f      	movs	r2, #15
   112be:	f00e f966 	bl	1f58e <printk>
    return returnValue;
   112c2:	e7c8      	b.n	11256 <init_Interrupt_MLX+0x1e>
   112c4:	000111c9 	.word	0x000111c9
   112c8:	20001ed0 	.word	0x20001ed0
   112cc:	0002351c 	.word	0x0002351c
   112d0:	00024510 	.word	0x00024510
   112d4:	000243a4 	.word	0x000243a4
   112d8:	000243cd 	.word	0x000243cd
   112dc:	20001ec0 	.word	0x20001ec0
   112e0:	00011219 	.word	0x00011219
   112e4:	00024536 	.word	0x00024536

000112e8 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
   112e8:	b570      	push	{r4, r5, r6, lr}
   112ea:	4605      	mov	r5, r0
   112ec:	b092      	sub	sp, #72	; 0x48
     * be considered in the sum. */
    uint32_t meas_t = 234;
    uint32_t meas_t_p = 0;

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
   112ee:	4921      	ldr	r1, [pc, #132]	; (11374 <validate_osr_and_odr_settings+0x8c>)
   112f0:	2248      	movs	r2, #72	; 0x48
   112f2:	4668      	mov	r0, sp
   112f4:	f012 f82b 	bl	2334e <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
   112f8:	f895 40b1 	ldrb.w	r4, [r5, #177]	; 0xb1
   112fc:	b16c      	cbz	r4, 1131a <validate_osr_and_odr_settings+0x32>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
   112fe:	f895 40b3 	ldrb.w	r4, [r5, #179]	; 0xb3
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
    float pow_output = 1;
   11302:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000

    while (power != 0)
   11306:	bb44      	cbnz	r4, 1135a <validate_osr_and_odr_settings+0x72>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   11308:	491b      	ldr	r1, [pc, #108]	; (11378 <validate_osr_and_odr_settings+0x90>)
   1130a:	f7ee fef9 	bl	100 <__aeabi_fmul>
   1130e:	491b      	ldr	r1, [pc, #108]	; (1137c <validate_osr_and_odr_settings+0x94>)
   11310:	f7ef fc56 	bl	bc0 <__addsf3>
   11314:	f7ef fd5c 	bl	dd0 <__aeabi_f2uiz>
   11318:	4604      	mov	r4, r0
    if (dev->settings.temp_en)
   1131a:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   1131e:	b16b      	cbz	r3, 1133c <validate_osr_and_odr_settings+0x54>
        meas_t_p += calculate_temp_meas_time(dev);
   11320:	f895 60b4 	ldrb.w	r6, [r5, #180]	; 0xb4
    float pow_output = 1;
   11324:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    while (power != 0)
   11328:	b9ee      	cbnz	r6, 11366 <validate_osr_and_odr_settings+0x7e>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   1132a:	4913      	ldr	r1, [pc, #76]	; (11378 <validate_osr_and_odr_settings+0x90>)
   1132c:	f7ee fee8 	bl	100 <__aeabi_fmul>
   11330:	4913      	ldr	r1, [pc, #76]	; (11380 <validate_osr_and_odr_settings+0x98>)
   11332:	f7ef fc45 	bl	bc0 <__addsf3>
   11336:	f7ef fd4b 	bl	dd0 <__aeabi_f2uiz>
        meas_t_p += calculate_temp_meas_time(dev);
   1133a:	4404      	add	r4, r0
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   1133c:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   11340:	aa12      	add	r2, sp, #72	; 0x48
   11342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    meas_t += meas_t_p;
   11346:	34ea      	adds	r4, #234	; 0xea
    if (meas_t < odr_duration)
   11348:	f853 3c48 	ldr.w	r3, [r3, #-72]
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   1134c:	42a3      	cmp	r3, r4
}
   1134e:	bf94      	ite	ls
   11350:	f06f 0002 	mvnls.w	r0, #2
   11354:	2000      	movhi	r0, #0
   11356:	b012      	add	sp, #72	; 0x48
   11358:	bd70      	pop	{r4, r5, r6, pc}
    {
        pow_output = (float) base * pow_output;
   1135a:	4601      	mov	r1, r0
        power--;
   1135c:	3c01      	subs	r4, #1
        pow_output = (float) base * pow_output;
   1135e:	f7ef fc2f 	bl	bc0 <__addsf3>
        power--;
   11362:	b2e4      	uxtb	r4, r4
   11364:	e7cf      	b.n	11306 <validate_osr_and_odr_settings+0x1e>
        pow_output = (float) base * pow_output;
   11366:	4601      	mov	r1, r0
        power--;
   11368:	3e01      	subs	r6, #1
        pow_output = (float) base * pow_output;
   1136a:	f7ef fc29 	bl	bc0 <__addsf3>
        power--;
   1136e:	b2f6      	uxtb	r6, r6
   11370:	e7da      	b.n	11328 <validate_osr_and_odr_settings+0x40>
   11372:	bf00      	nop
   11374:	000237c0 	.word	0x000237c0
   11378:	44fa0000 	.word	0x44fa0000
   1137c:	43c40000 	.word	0x43c40000
   11380:	439c8000 	.word	0x439c8000

00011384 <bmp3_set_sensor_settings>:
{
   11384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11386:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   11388:	4608      	mov	r0, r1
{
   1138a:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   1138c:	f00d fcc4 	bl	1ed18 <null_ptr_check>
    if (rslt == BMP3_OK)
   11390:	2800      	cmp	r0, #0
   11392:	f040 811e 	bne.w	115d2 <bmp3_set_sensor_settings+0x24e>
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
   11396:	f014 0f06 	tst.w	r4, #6
   1139a:	d029      	beq.n	113f0 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1139c:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1139e:	460b      	mov	r3, r1
   113a0:	2201      	movs	r2, #1
   113a2:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   113a4:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   113a8:	f00d fdaf 	bl	1ef0a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   113ac:	bb00      	cbnz	r0, 113f0 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   113ae:	07a7      	lsls	r7, r4, #30
   113b0:	d50a      	bpl.n	113c8 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   113b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   113b6:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
   113ba:	f023 0301 	bic.w	r3, r3, #1
   113be:	f002 0201 	and.w	r2, r2, #1
   113c2:	4313      	orrs	r3, r2
   113c4:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   113c8:	0766      	lsls	r6, r4, #29
   113ca:	d50b      	bpl.n	113e4 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   113cc:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   113d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   113d4:	005b      	lsls	r3, r3, #1
   113d6:	f003 0302 	and.w	r3, r3, #2
   113da:	f022 0202 	bic.w	r2, r2, #2
   113de:	4313      	orrs	r3, r2
   113e0:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   113e4:	462b      	mov	r3, r5
   113e6:	2201      	movs	r2, #1
   113e8:	a901      	add	r1, sp, #4
   113ea:	4668      	mov	r0, sp
   113ec:	f00d fdce 	bl	1ef8c <bmp3_set_regs>
    if (sub_settings & desired_settings)
   113f0:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   113f4:	d072      	beq.n	114dc <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   113f6:	2800      	cmp	r0, #0
   113f8:	d170      	bne.n	114dc <bmp3_set_sensor_settings+0x158>
    uint8_t reg_addr[3] = { 0 };
   113fa:	4b78      	ldr	r3, [pc, #480]	; (115dc <bmp3_set_sensor_settings+0x258>)
   113fc:	f88d 0002 	strb.w	r0, [sp, #2]
   11400:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   11404:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   11408:	2204      	movs	r2, #4
   1140a:	462b      	mov	r3, r5
   1140c:	eb0d 0102 	add.w	r1, sp, r2
   11410:	201c      	movs	r0, #28
   11412:	f00d fd7a 	bl	1ef0a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11416:	2800      	cmp	r0, #0
   11418:	d160      	bne.n	114dc <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
   1141a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1141e:	f000 80da 	beq.w	115d6 <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
   11422:	06e0      	lsls	r0, r4, #27
   11424:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
   11428:	d50a      	bpl.n	11440 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   1142a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1142e:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
   11432:	f023 0307 	bic.w	r3, r3, #7
   11436:	f001 0107 	and.w	r1, r1, #7
   1143a:	430b      	orrs	r3, r1
   1143c:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
   11440:	06a1      	lsls	r1, r4, #26
   11442:	d509      	bpl.n	11458 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   11444:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11448:	00d2      	lsls	r2, r2, #3
   1144a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   1144e:	f002 0238 	and.w	r2, r2, #56	; 0x38
   11452:	4313      	orrs	r3, r2
   11454:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
   11458:	231c      	movs	r3, #28
   1145a:	f88d 3000 	strb.w	r3, [sp]
}
   1145e:	2601      	movs	r6, #1
    if (sub_settings & desired_settings)
   11460:	0622      	lsls	r2, r4, #24
   11462:	d518      	bpl.n	11496 <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   11464:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   11468:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   1146a:	bf84      	itt	hi
   1146c:	2311      	movhi	r3, #17
   1146e:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   11472:	ab02      	add	r3, sp, #8
   11474:	1999      	adds	r1, r3, r6
   11476:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
   1147a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1147e:	f002 021f 	and.w	r2, r2, #31
   11482:	f023 031f 	bic.w	r3, r3, #31
   11486:	4313      	orrs	r3, r2
   11488:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   1148c:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
   1148e:	231d      	movs	r3, #29
   11490:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   11494:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
   11496:	0663      	lsls	r3, r4, #25
   11498:	d512      	bpl.n	114c0 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   1149a:	ab02      	add	r3, sp, #8
   1149c:	1999      	adds	r1, r3, r6
   1149e:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
   114a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   114a6:	005b      	lsls	r3, r3, #1
   114a8:	f003 030e 	and.w	r3, r3, #14
   114ac:	f022 020e 	bic.w	r2, r2, #14
   114b0:	4313      	orrs	r3, r2
   114b2:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   114b6:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
   114b8:	231f      	movs	r3, #31
   114ba:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   114be:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   114c0:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   114c4:	2b03      	cmp	r3, #3
   114c6:	d103      	bne.n	114d0 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
   114c8:	4628      	mov	r0, r5
   114ca:	f7ff ff0d 	bl	112e8 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
   114ce:	b928      	cbnz	r0, 114dc <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   114d0:	462b      	mov	r3, r5
   114d2:	4632      	mov	r2, r6
   114d4:	a901      	add	r1, sp, #4
   114d6:	4668      	mov	r0, sp
   114d8:	f00d fd58 	bl	1ef8c <bmp3_set_regs>
    if (sub_settings & desired_settings)
   114dc:	f414 6fe1 	tst.w	r4, #1800	; 0x708
   114e0:	d048      	beq.n	11574 <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   114e2:	2800      	cmp	r0, #0
   114e4:	d146      	bne.n	11574 <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
   114e6:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   114e8:	462b      	mov	r3, r5
   114ea:	2201      	movs	r2, #1
   114ec:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
   114ee:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   114f2:	f00d fd0a 	bl	1ef0a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   114f6:	2800      	cmp	r0, #0
   114f8:	d13c      	bne.n	11574 <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   114fa:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
   114fc:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
   11500:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   11504:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   11508:	d50a      	bpl.n	11520 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   1150a:	f89d 3000 	ldrb.w	r3, [sp]
   1150e:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
   11512:	f023 0301 	bic.w	r3, r3, #1
   11516:	f006 0601 	and.w	r6, r6, #1
   1151a:	4333      	orrs	r3, r6
   1151c:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
   11520:	05a6      	lsls	r6, r4, #22
   11522:	d509      	bpl.n	11538 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   11524:	f89d 3000 	ldrb.w	r3, [sp]
   11528:	0040      	lsls	r0, r0, #1
   1152a:	f023 0302 	bic.w	r3, r3, #2
   1152e:	f000 0002 	and.w	r0, r0, #2
   11532:	4303      	orrs	r3, r0
   11534:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
   11538:	0560      	lsls	r0, r4, #21
   1153a:	d509      	bpl.n	11550 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   1153c:	f89d 3000 	ldrb.w	r3, [sp]
   11540:	0089      	lsls	r1, r1, #2
   11542:	f023 0304 	bic.w	r3, r3, #4
   11546:	f001 0104 	and.w	r1, r1, #4
   1154a:	430b      	orrs	r3, r1
   1154c:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   11550:	0721      	lsls	r1, r4, #28
   11552:	d509      	bpl.n	11568 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   11554:	f89d 3000 	ldrb.w	r3, [sp]
   11558:	0192      	lsls	r2, r2, #6
   1155a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1155e:	f002 0240 	and.w	r2, r2, #64	; 0x40
   11562:	4313      	orrs	r3, r2
   11564:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   11568:	462b      	mov	r3, r5
   1156a:	2201      	movs	r2, #1
   1156c:	4669      	mov	r1, sp
   1156e:	a801      	add	r0, sp, #4
   11570:	f00d fd0c 	bl	1ef8c <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11574:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
   11578:	d02b      	beq.n	115d2 <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   1157a:	bb50      	cbnz	r0, 115d2 <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
   1157c:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1157e:	462b      	mov	r3, r5
   11580:	2201      	movs	r2, #1
   11582:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   11584:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
   11588:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
   1158c:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11590:	f00d fcbb 	bl	1ef0a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11594:	b9e8      	cbnz	r0, 115d2 <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   11596:	0522      	lsls	r2, r4, #20
   11598:	d509      	bpl.n	115ae <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   1159a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1159e:	007f      	lsls	r7, r7, #1
   115a0:	f023 0302 	bic.w	r3, r3, #2
   115a4:	f007 0702 	and.w	r7, r7, #2
   115a8:	433b      	orrs	r3, r7
   115aa:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   115ae:	04e3      	lsls	r3, r4, #19
   115b0:	d509      	bpl.n	115c6 <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   115b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   115b6:	00b6      	lsls	r6, r6, #2
   115b8:	f023 0304 	bic.w	r3, r3, #4
   115bc:	f006 0604 	and.w	r6, r6, #4
   115c0:	4333      	orrs	r3, r6
   115c2:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   115c6:	462b      	mov	r3, r5
   115c8:	2201      	movs	r2, #1
   115ca:	a901      	add	r1, sp, #4
   115cc:	4668      	mov	r0, sp
   115ce:	f00d fcdd 	bl	1ef8c <bmp3_set_regs>
}
   115d2:	b003      	add	sp, #12
   115d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
   115d6:	4606      	mov	r6, r0
   115d8:	e742      	b.n	11460 <bmp3_set_sensor_settings+0xdc>
   115da:	bf00      	nop
   115dc:	000237c0 	.word	0x000237c0

000115e0 <bmp3_init>:
{
   115e0:	b530      	push	{r4, r5, lr}
   115e2:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
   115e4:	2300      	movs	r3, #0
{
   115e6:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   115e8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   115ec:	f00d fb94 	bl	1ed18 <null_ptr_check>
    if (rslt == BMP3_OK)
   115f0:	4605      	mov	r5, r0
   115f2:	2800      	cmp	r0, #0
   115f4:	f040 80d8 	bne.w	117a8 <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
   115f8:	7a23      	ldrb	r3, [r4, #8]
   115fa:	3b01      	subs	r3, #1
   115fc:	bf18      	it	ne
   115fe:	2301      	movne	r3, #1
   11600:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   11602:	2201      	movs	r2, #1
   11604:	4623      	mov	r3, r4
   11606:	f10d 0107 	add.w	r1, sp, #7
   1160a:	f00d fc7e 	bl	1ef0a <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1160e:	4605      	mov	r5, r0
   11610:	2800      	cmp	r0, #0
   11612:	f040 80c9 	bne.w	117a8 <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   11616:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1161a:	2b50      	cmp	r3, #80	; 0x50
   1161c:	d002      	beq.n	11624 <bmp3_init+0x44>
   1161e:	2b60      	cmp	r3, #96	; 0x60
   11620:	f040 80c5 	bne.w	117ae <bmp3_init+0x1ce>
                dev->chip_id = chip_id;
   11624:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   11626:	4620      	mov	r0, r4
   11628:	f00d fd1a 	bl	1f060 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   1162c:	4605      	mov	r5, r0
   1162e:	2800      	cmp	r0, #0
   11630:	f040 80ba 	bne.w	117a8 <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   11634:	4601      	mov	r1, r0
   11636:	9002      	str	r0, [sp, #8]
   11638:	2211      	movs	r2, #17
   1163a:	a803      	add	r0, sp, #12
   1163c:	f011 fea8 	bl	23390 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   11640:	4623      	mov	r3, r4
   11642:	2215      	movs	r2, #21
   11644:	a902      	add	r1, sp, #8
   11646:	2031      	movs	r0, #49	; 0x31
   11648:	f00d fc5f 	bl	1ef0a <bmp3_get_regs>
   1164c:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   1164e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   11652:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   11656:	f7ee ff49 	bl	4ec <__aeabi_ui2d>
   1165a:	4b56      	ldr	r3, [pc, #344]	; (117b4 <bmp3_init+0x1d4>)
   1165c:	2200      	movs	r2, #0
   1165e:	f7ee ffbf 	bl	5e0 <__aeabi_dmul>
   11662:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   11666:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1166a:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   1166e:	f7ee ff3d 	bl	4ec <__aeabi_ui2d>
   11672:	4b51      	ldr	r3, [pc, #324]	; (117b8 <bmp3_init+0x1d8>)
   11674:	2200      	movs	r2, #0
   11676:	f7ee ffb3 	bl	5e0 <__aeabi_dmul>
   1167a:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   1167e:	f99d 000c 	ldrsb.w	r0, [sp, #12]
   11682:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   11686:	f7ee ff41 	bl	50c <__aeabi_i2d>
   1168a:	4b4c      	ldr	r3, [pc, #304]	; (117bc <bmp3_init+0x1dc>)
   1168c:	2200      	movs	r2, #0
   1168e:	f7ee ffa7 	bl	5e0 <__aeabi_dmul>
   11692:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   11696:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
   1169a:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   1169e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   116a2:	f7ee ff33 	bl	50c <__aeabi_i2d>
   116a6:	4b46      	ldr	r3, [pc, #280]	; (117c0 <bmp3_init+0x1e0>)
   116a8:	2200      	movs	r2, #0
   116aa:	f7ee ff99 	bl	5e0 <__aeabi_dmul>
   116ae:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   116b2:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
   116b6:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   116ba:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   116be:	f7ee ff25 	bl	50c <__aeabi_i2d>
   116c2:	4b40      	ldr	r3, [pc, #256]	; (117c4 <bmp3_init+0x1e4>)
   116c4:	2200      	movs	r2, #0
   116c6:	f7ee ff8b 	bl	5e0 <__aeabi_dmul>
   116ca:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   116ce:	f99d 0011 	ldrsb.w	r0, [sp, #17]
   116d2:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   116d6:	f7ee ff19 	bl	50c <__aeabi_i2d>
   116da:	4b3b      	ldr	r3, [pc, #236]	; (117c8 <bmp3_init+0x1e8>)
   116dc:	2200      	movs	r2, #0
   116de:	f7ee ff7f 	bl	5e0 <__aeabi_dmul>
   116e2:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   116e6:	f99d 0012 	ldrsb.w	r0, [sp, #18]
   116ea:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   116ee:	f7ee ff0d 	bl	50c <__aeabi_i2d>
   116f2:	4b36      	ldr	r3, [pc, #216]	; (117cc <bmp3_init+0x1ec>)
   116f4:	2200      	movs	r2, #0
   116f6:	f7ee ff73 	bl	5e0 <__aeabi_dmul>
   116fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   116fe:	f8bd 0013 	ldrh.w	r0, [sp, #19]
   11702:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   11706:	f7ee fef1 	bl	4ec <__aeabi_ui2d>
   1170a:	4b31      	ldr	r3, [pc, #196]	; (117d0 <bmp3_init+0x1f0>)
   1170c:	2200      	movs	r2, #0
   1170e:	f7ee ff67 	bl	5e0 <__aeabi_dmul>
   11712:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   11716:	f8bd 0015 	ldrh.w	r0, [sp, #21]
   1171a:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   1171e:	f7ee fee5 	bl	4ec <__aeabi_ui2d>
   11722:	4b2c      	ldr	r3, [pc, #176]	; (117d4 <bmp3_init+0x1f4>)
   11724:	2200      	movs	r2, #0
   11726:	f7ee ff5b 	bl	5e0 <__aeabi_dmul>
   1172a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   1172e:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   11732:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   11736:	f7ee fee9 	bl	50c <__aeabi_i2d>
   1173a:	4b27      	ldr	r3, [pc, #156]	; (117d8 <bmp3_init+0x1f8>)
   1173c:	2200      	movs	r2, #0
   1173e:	f7ee ff4f 	bl	5e0 <__aeabi_dmul>
   11742:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   11746:	f99d 0018 	ldrsb.w	r0, [sp, #24]
   1174a:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   1174e:	f7ee fedd 	bl	50c <__aeabi_i2d>
   11752:	2200      	movs	r2, #0
   11754:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   11758:	f7ee ff42 	bl	5e0 <__aeabi_dmul>
   1175c:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   11760:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
   11764:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   11768:	f7ee fed0 	bl	50c <__aeabi_i2d>
   1176c:	4b13      	ldr	r3, [pc, #76]	; (117bc <bmp3_init+0x1dc>)
   1176e:	2200      	movs	r2, #0
   11770:	f7ee ff36 	bl	5e0 <__aeabi_dmul>
   11774:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   11778:	f99d 001b 	ldrsb.w	r0, [sp, #27]
   1177c:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   11780:	f7ee fec4 	bl	50c <__aeabi_i2d>
   11784:	4b0d      	ldr	r3, [pc, #52]	; (117bc <bmp3_init+0x1dc>)
   11786:	2200      	movs	r2, #0
   11788:	f7ee ff2a 	bl	5e0 <__aeabi_dmul>
   1178c:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   11790:	f99d 001c 	ldrsb.w	r0, [sp, #28]
   11794:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   11798:	f7ee feb8 	bl	50c <__aeabi_i2d>
   1179c:	4b0f      	ldr	r3, [pc, #60]	; (117dc <bmp3_init+0x1fc>)
   1179e:	2200      	movs	r2, #0
   117a0:	f7ee ff1e 	bl	5e0 <__aeabi_dmul>
   117a4:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   117a8:	4628      	mov	r0, r5
   117aa:	b009      	add	sp, #36	; 0x24
   117ac:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
   117ae:	f06f 0501 	mvn.w	r5, #1
   117b2:	e7f9      	b.n	117a8 <bmp3_init+0x1c8>
   117b4:	40700000 	.word	0x40700000
   117b8:	3e100000 	.word	0x3e100000
   117bc:	3cf00000 	.word	0x3cf00000
   117c0:	3eb00000 	.word	0x3eb00000
   117c4:	3e200000 	.word	0x3e200000
   117c8:	3df00000 	.word	0x3df00000
   117cc:	3da00000 	.word	0x3da00000
   117d0:	40200000 	.word	0x40200000
   117d4:	3f900000 	.word	0x3f900000
   117d8:	3f700000 	.word	0x3f700000
   117dc:	3be00000 	.word	0x3be00000

000117e0 <sendDataBMP>:

static void app_us_delay(uint32_t period, void *intf_ptr) {
	return k_busy_wait(period);
}

extern void sendDataBMP(void){
   117e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   117e2:	4b1b      	ldr	r3, [pc, #108]	; (11850 <sendDataBMP+0x70>)
   117e4:	4e1b      	ldr	r6, [pc, #108]	; (11854 <sendDataBMP+0x74>)
   117e6:	4a1c      	ldr	r2, [pc, #112]	; (11858 <sendDataBMP+0x78>)
   117e8:	7818      	ldrb	r0, [r3, #0]
extern void sendDataBMP(void){
   117ea:	b085      	sub	sp, #20
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   117ec:	4631      	mov	r1, r6
   117ee:	f00d fcfe 	bl	1f1ee <bmp3_get_sensor_data>
   117f2:	4b1a      	ldr	r3, [pc, #104]	; (1185c <sendDataBMP+0x7c>)
   117f4:	7018      	strb	r0, [r3, #0]
	return z_impl_k_uptime_ticks();
   117f6:	f011 fbf0 	bl	22fda <z_impl_k_uptime_ticks>
   117fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   117fe:	fba0 0302 	umull	r0, r3, r0, r2
   11802:	fb02 3101 	mla	r1, r2, r1, r3
   11806:	0bc0      	lsrs	r0, r0, #15
	if(PRINT_SENSOR_DATA){
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
	}
	float timestamp = k_uptime_get() /1000.0;
   11808:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1180c:	0bc9      	lsrs	r1, r1, #15
   1180e:	f7ee feb9 	bl	584 <__aeabi_l2d>
   11812:	4b13      	ldr	r3, [pc, #76]	; (11860 <sendDataBMP+0x80>)
	bmpData.pressure = myData.pressure;
   11814:	4f13      	ldr	r7, [pc, #76]	; (11864 <sendDataBMP+0x84>)
	float timestamp = k_uptime_get() /1000.0;
   11816:	2200      	movs	r2, #0
   11818:	f7ef f80c 	bl	834 <__aeabi_ddiv>
   1181c:	f7ef f97a 	bl	b14 <__aeabi_d2f>
   11820:	4604      	mov	r4, r0
	bmpData.pressure = myData.pressure;
   11822:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   11826:	f7ef f975 	bl	b14 <__aeabi_d2f>
   1182a:	4605      	mov	r5, r0
   1182c:	6038      	str	r0, [r7, #0]
	bmpData.temperature = myData.temperature;
   1182e:	e9d6 0100 	ldrd	r0, r1, [r6]
   11832:	f7ef f96f 	bl	b14 <__aeabi_d2f>
	bmpData.timestamp=timestamp;
	
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   11836:	220c      	movs	r2, #12
	bmpData.temperature = myData.temperature;
   11838:	6078      	str	r0, [r7, #4]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   1183a:	9002      	str	r0, [sp, #8]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   1183c:	a901      	add	r1, sp, #4
   1183e:	2001      	movs	r0, #1
	bmpData.timestamp=timestamp;
   11840:	60bc      	str	r4, [r7, #8]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   11842:	9501      	str	r5, [sp, #4]
   11844:	9403      	str	r4, [sp, #12]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   11846:	f7ff fcab 	bl	111a0 <sendData>
}
   1184a:	b005      	add	sp, #20
   1184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1184e:	bf00      	nop
   11850:	2000098f 	.word	0x2000098f
   11854:	20001880 	.word	0x20001880
   11858:	200017b0 	.word	0x200017b0
   1185c:	20003328 	.word	0x20003328
   11860:	408f4000 	.word	0x408f4000
   11864:	20001e60 	.word	0x20001e60

00011868 <bmpDataReady>:
static const struct gpio_dt_spec bmpInt = GPIO_DT_SPEC_GET_OR(BMP_INT, gpios,{0});
static struct gpio_callback bmpInt_cb_data;

static void bmpDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
	k_work_submit(&work_data);
   11868:	4801      	ldr	r0, [pc, #4]	; (11870 <bmpDataReady+0x8>)
   1186a:	f009 bb6f 	b.w	1af4c <k_work_submit>
   1186e:	bf00      	nop
   11870:	20001efc 	.word	0x20001efc

00011874 <initBMP384>:
void initBMP384(struct device *i2c_dev){
   11874:	b570      	push	{r4, r5, r6, lr}
	bmp388_dev.intf = BMP3_I2C_INTF;
   11876:	4c29      	ldr	r4, [pc, #164]	; (1191c <initBMP384+0xa8>)
	bmp388_dev.intf_rslt = bmpResult;
   11878:	4d29      	ldr	r5, [pc, #164]	; (11920 <initBMP384+0xac>)
	bmp388_dev.intf_ptr = i2c_dev;
   1187a:	6060      	str	r0, [r4, #4]
	bmp388_dev.intf = BMP3_I2C_INTF;
   1187c:	2301      	movs	r3, #1
   1187e:	7223      	strb	r3, [r4, #8]
	bmp388_dev.intf_rslt = bmpResult;
   11880:	782b      	ldrb	r3, [r5, #0]
   11882:	7263      	strb	r3, [r4, #9]
	bmp388_dev.dummy_byte = dByte;
   11884:	2300      	movs	r3, #0
   11886:	72a3      	strb	r3, [r4, #10]
	bmp388_dev.read = app_i2c_read;
   11888:	4b26      	ldr	r3, [pc, #152]	; (11924 <initBMP384+0xb0>)
   1188a:	60e3      	str	r3, [r4, #12]
	bmp388_dev.write = app_i2c_write;
   1188c:	4b26      	ldr	r3, [pc, #152]	; (11928 <initBMP384+0xb4>)
   1188e:	6123      	str	r3, [r4, #16]
	bmpResult = bmp3_init(&bmp388_dev);
   11890:	4620      	mov	r0, r4
	bmp388_dev.delay_us = app_us_delay;
   11892:	4b26      	ldr	r3, [pc, #152]	; (1192c <initBMP384+0xb8>)
   11894:	6163      	str	r3, [r4, #20]
	bmpResult = bmp3_init(&bmp388_dev);
   11896:	f7ff fea3 	bl	115e0 <bmp3_init>
   1189a:	4601      	mov	r1, r0
   1189c:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   1189e:	b110      	cbz	r0, 118a6 <initBMP384+0x32>
		printk("init error: %i \n",bmpResult);
   118a0:	4823      	ldr	r0, [pc, #140]	; (11930 <initBMP384+0xbc>)
   118a2:	f00d fe74 	bl	1f58e <printk>
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   118a6:	2301      	movs	r3, #1
   118a8:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.int_settings.level = BMP3_INT_PIN_ACTIVE_HIGH;
   118ac:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   118b0:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   118b4:	f240 1301 	movw	r3, #257	; 0x101
   118b8:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   118bc:	f44f 7300 	mov.w	r3, #512	; 0x200
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   118c0:	4916      	ldr	r1, [pc, #88]	; (1191c <initBMP384+0xa8>)
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   118c2:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   118c6:	f240 20fe 	movw	r0, #766	; 0x2fe
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
   118ca:	2307      	movs	r3, #7
   118cc:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   118d0:	f7ff fd58 	bl	11384 <bmp3_set_sensor_settings>
   118d4:	4601      	mov	r1, r0
   118d6:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   118d8:	b978      	cbnz	r0, 118fa <initBMP384+0x86>
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   118da:	4810      	ldr	r0, [pc, #64]	; (1191c <initBMP384+0xa8>)
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   118dc:	2603      	movs	r6, #3
   118de:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   118e2:	f00d fc0f 	bl	1f104 <bmp3_set_op_mode>
   118e6:	7028      	strb	r0, [r5, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   118e8:	b178      	cbz	r0, 1190a <initBMP384+0x96>
extern void submitConfigBMP(){
	k_work_submit(&work_config);
};
extern uint8_t sleepBMP(bool SLEEP){
	if(SLEEP){
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   118ea:	2300      	movs	r3, #0
		return bmp3_set_op_mode(&bmp388_dev);
   118ec:	480b      	ldr	r0, [pc, #44]	; (1191c <initBMP384+0xa8>)
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   118ee:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   118f2:	f00d fc07 	bl	1f104 <bmp3_set_op_mode>
	bmpResult = sleepBMP(true);
   118f6:	7028      	strb	r0, [r5, #0]
}
   118f8:	bd70      	pop	{r4, r5, r6, pc}
		printk("set settings error: %i \n",bmpResult);
   118fa:	480e      	ldr	r0, [pc, #56]	; (11934 <initBMP384+0xc0>)
   118fc:	f00d fe47 	bl	1f58e <printk>
	if (bmpResult == BMP3_SENSOR_OK){
   11900:	f995 3000 	ldrsb.w	r3, [r5]
   11904:	2b00      	cmp	r3, #0
   11906:	d1f0      	bne.n	118ea <initBMP384+0x76>
   11908:	e7e7      	b.n	118da <initBMP384+0x66>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   1190a:	6963      	ldr	r3, [r4, #20]
   1190c:	6861      	ldr	r1, [r4, #4]
   1190e:	f649 4040 	movw	r0, #40000	; 0x9c40
   11912:	4798      	blx	r3
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   11914:	4b08      	ldr	r3, [pc, #32]	; (11938 <initBMP384+0xc4>)
   11916:	701e      	strb	r6, [r3, #0]
   11918:	e7e7      	b.n	118ea <initBMP384+0x76>
   1191a:	bf00      	nop
   1191c:	200017b0 	.word	0x200017b0
   11920:	20003328 	.word	0x20003328
   11924:	0001f2b1 	.word	0x0001f2b1
   11928:	0001f26f 	.word	0x0001f26f
   1192c:	0001f26b 	.word	0x0001f26b
   11930:	00024554 	.word	0x00024554
   11934:	00024565 	.word	0x00024565
   11938:	2000098f 	.word	0x2000098f

0001193c <init_Interrupt_BMP>:
int8_t init_Interrupt_BMP(){
   1193c:	b570      	push	{r4, r5, r6, lr}
	k_work_init(&work_data, sendDataBMP);
   1193e:	4924      	ldr	r1, [pc, #144]	; (119d0 <init_Interrupt_BMP+0x94>)
   11940:	4824      	ldr	r0, [pc, #144]	; (119d4 <init_Interrupt_BMP+0x98>)
   11942:	f011 f96c 	bl	22c1e <k_work_init>
	k_work_init(&work_config, setConfigBMP);
   11946:	4924      	ldr	r1, [pc, #144]	; (119d8 <init_Interrupt_BMP+0x9c>)
   11948:	4824      	ldr	r0, [pc, #144]	; (119dc <init_Interrupt_BMP+0xa0>)
   1194a:	f011 f968 	bl	22c1e <k_work_init>
   1194e:	4d24      	ldr	r5, [pc, #144]	; (119e0 <init_Interrupt_BMP+0xa4>)
   11950:	4628      	mov	r0, r5
   11952:	f010 ff23 	bl	2279c <z_device_is_ready>
    if (!device_is_ready(bmpInt.port)) {
   11956:	b930      	cbnz	r0, 11966 <init_Interrupt_BMP+0x2a>
		printk("Error: bmp interrupt %s is not ready\n",
   11958:	6829      	ldr	r1, [r5, #0]
   1195a:	4822      	ldr	r0, [pc, #136]	; (119e4 <init_Interrupt_BMP+0xa8>)
   1195c:	f00d fe17 	bl	1f58e <printk>
		return 1;
   11960:	2401      	movs	r4, #1
}
   11962:	4620      	mov	r0, r4
   11964:	bd70      	pop	{r4, r5, r6, pc}
	struct gpio_driver_data *data =
   11966:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   11968:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1196a:	6813      	ldr	r3, [r2, #0]
   1196c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11970:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11972:	2111      	movs	r1, #17
   11974:	6833      	ldr	r3, [r6, #0]
   11976:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1197a:	4628      	mov	r0, r5
   1197c:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&bmpInt, GPIO_INPUT);
   1197e:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11980:	b134      	cbz	r4, 11990 <init_Interrupt_BMP+0x54>
		printk("Error %d: failed to configure %s pin %d\n",
   11982:	682a      	ldr	r2, [r5, #0]
   11984:	4818      	ldr	r0, [pc, #96]	; (119e8 <init_Interrupt_BMP+0xac>)
   11986:	2311      	movs	r3, #17
   11988:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1198a:	f00d fe00 	bl	1f58e <printk>
		return returnValue;
   1198e:	e7e8      	b.n	11962 <init_Interrupt_BMP+0x26>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11990:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11994:	69b4      	ldr	r4, [r6, #24]
   11996:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   1199a:	2111      	movs	r1, #17
   1199c:	4628      	mov	r0, r5
   1199e:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&bmpInt,GPIO_INT_EDGE_RISING);
   119a0:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   119a2:	b124      	cbz	r4, 119ae <init_Interrupt_BMP+0x72>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   119a4:	682a      	ldr	r2, [r5, #0]
   119a6:	4811      	ldr	r0, [pc, #68]	; (119ec <init_Interrupt_BMP+0xb0>)
   119a8:	2311      	movs	r3, #17
   119aa:	4621      	mov	r1, r4
   119ac:	e7ed      	b.n	1198a <init_Interrupt_BMP+0x4e>
	callback->handler = handler;
   119ae:	4910      	ldr	r1, [pc, #64]	; (119f0 <init_Interrupt_BMP+0xb4>)
   119b0:	4b10      	ldr	r3, [pc, #64]	; (119f4 <init_Interrupt_BMP+0xb8>)
   119b2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   119b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   119b8:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   119ba:	69f3      	ldr	r3, [r6, #28]
   119bc:	b113      	cbz	r3, 119c4 <init_Interrupt_BMP+0x88>
	return api->manage_callback(port, callback, true);
   119be:	2201      	movs	r2, #1
   119c0:	4628      	mov	r0, r5
   119c2:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);
   119c4:	6829      	ldr	r1, [r5, #0]
   119c6:	480c      	ldr	r0, [pc, #48]	; (119f8 <init_Interrupt_BMP+0xbc>)
   119c8:	2211      	movs	r2, #17
   119ca:	f00d fde0 	bl	1f58e <printk>
    return returnValue;
   119ce:	e7c8      	b.n	11962 <init_Interrupt_BMP+0x26>
   119d0:	000117e1 	.word	0x000117e1
   119d4:	20001efc 	.word	0x20001efc
   119d8:	00011a29 	.word	0x00011a29
   119dc:	20001eec 	.word	0x20001eec
   119e0:	0002351c 	.word	0x0002351c
   119e4:	0002457e 	.word	0x0002457e
   119e8:	000243a4 	.word	0x000243a4
   119ec:	000243cd 	.word	0x000243cd
   119f0:	20001ee0 	.word	0x20001ee0
   119f4:	00011869 	.word	0x00011869
   119f8:	000245a4 	.word	0x000245a4

000119fc <submitConfigBMP>:
	k_work_submit(&work_config);
   119fc:	4801      	ldr	r0, [pc, #4]	; (11a04 <submitConfigBMP+0x8>)
   119fe:	f009 baa5 	b.w	1af4c <k_work_submit>
   11a02:	bf00      	nop
   11a04:	20001eec 	.word	0x20001eec

00011a08 <sleepBMP>:
extern uint8_t sleepBMP(bool SLEEP){
   11a08:	b508      	push	{r3, lr}
   11a0a:	4603      	mov	r3, r0
   11a0c:	4805      	ldr	r0, [pc, #20]	; (11a24 <sleepBMP+0x1c>)
	if(SLEEP){
   11a0e:	b133      	cbz	r3, 11a1e <sleepBMP+0x16>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   11a10:	2300      	movs	r3, #0
	}else{
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   11a12:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   11a16:	f00d fb75 	bl	1f104 <bmp3_set_op_mode>
   11a1a:	b2c0      	uxtb	r0, r0
	}
};
   11a1c:	bd08      	pop	{r3, pc}
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   11a1e:	2303      	movs	r3, #3
   11a20:	e7f7      	b.n	11a12 <sleepBMP+0xa>
   11a22:	bf00      	nop
   11a24:	200017b0 	.word	0x200017b0

00011a28 <setConfigBMP>:
static void setConfigBMP(){
   11a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t oversampling = bmpData.config[1];
   11a2a:	4d1c      	ldr	r5, [pc, #112]	; (11a9c <setConfigBMP+0x74>)
	uint8_t filter = bmpData.config[2];
	uint8_t rate = bmpData.config[3];
	uint16_t settings_sel;

    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11a2c:	4c1c      	ldr	r4, [pc, #112]	; (11aa0 <setConfigBMP+0x78>)
	uint8_t oversampling = bmpData.config[1];
   11a2e:	7b68      	ldrb	r0, [r5, #13]
	uint8_t filter = bmpData.config[2];
   11a30:	7ba9      	ldrb	r1, [r5, #14]
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.press_os = oversampling;
   11a32:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        bmp388_dev.settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
    }else {
        bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
    }
    
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11a36:	2000      	movs	r0, #0
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11a38:	2301      	movs	r3, #1
	uint8_t rate = bmpData.config[3];
   11a3a:	7bea      	ldrb	r2, [r5, #15]
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11a3c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.iir_filter = filter;
   11a40:	f884 10b5 	strb.w	r1, [r4, #181]	; 0xb5
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
	settings_sel = BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_IIR_FILTER;
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   11a44:	20f0      	movs	r0, #240	; 0xf0
   11a46:	4621      	mov	r1, r4
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11a48:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   11a4c:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   11a50:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
   11a54:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   11a58:	f7ff fc94 	bl	11384 <bmp3_set_sensor_settings>
   11a5c:	4f11      	ldr	r7, [pc, #68]	; (11aa4 <setConfigBMP+0x7c>)
   11a5e:	7038      	strb	r0, [r7, #0]
     if (bmpResult == BMP3_SENSOR_OK){
   11a60:	b970      	cbnz	r0, 11a80 <setConfigBMP+0x58>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   11a62:	2603      	movs	r6, #3
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   11a64:	4620      	mov	r0, r4
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   11a66:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   11a6a:	f00d fb4b 	bl	1f104 <bmp3_set_op_mode>
   11a6e:	7038      	strb	r0, [r7, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   11a70:	b930      	cbnz	r0, 11a80 <setConfigBMP+0x58>
        {
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   11a72:	6963      	ldr	r3, [r4, #20]
   11a74:	6861      	ldr	r1, [r4, #4]
   11a76:	f649 4040 	movw	r0, #40000	; 0x9c40
   11a7a:	4798      	blx	r3
            /* Sensor component selection */
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   11a7c:	4b0a      	ldr	r3, [pc, #40]	; (11aa8 <setConfigBMP+0x80>)
   11a7e:	701e      	strb	r6, [r3, #0]
	return z_impl_k_sleep(timeout);
   11a80:	f640 40cd 	movw	r0, #3277	; 0xccd
   11a84:	2100      	movs	r1, #0
   11a86:	f009 fddb 	bl	1b640 <z_impl_k_sleep>
            /* Temperature and Pressure data are read and stored in the bmp3_data instance */
        }
    }
	
	k_sleep(K_MSEC(100));
	sleepBMP(!bmpData.config[0]);
   11a8a:	7b28      	ldrb	r0, [r5, #12]
   11a8c:	fab0 f080 	clz	r0, r0
}
   11a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sleepBMP(!bmpData.config[0]);
   11a94:	0940      	lsrs	r0, r0, #5
   11a96:	f7ff bfb7 	b.w	11a08 <sleepBMP>
   11a9a:	bf00      	nop
   11a9c:	20001e60 	.word	0x20001e60
   11aa0:	200017b0 	.word	0x200017b0
   11aa4:	20003328 	.word	0x20003328
   11aa8:	2000098f 	.word	0x2000098f

00011aac <mlx_setGain>:
/**
 * Sets the sensor gain to the specified level.
 * @param gain  The gain level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   11aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _gain = gain;
   11aae:	4b0c      	ldr	r3, [pc, #48]	; (11ae0 <mlx_setGain+0x34>)
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   11ab0:	4605      	mov	r5, r0
   11ab2:	460c      	mov	r4, r1
  _gain = gain;
   11ab4:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF1, &data, mlx_device_t);
   11ab6:	460a      	mov	r2, r1
   11ab8:	2000      	movs	r0, #0
   11aba:	f10d 0106 	add.w	r1, sp, #6
   11abe:	f00d fc8c 	bl	1f3da <readRegister>

  // mask off gain bits
  data &= ~0x0070;
   11ac2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  // set gain bits
  data |= gain << MLX90393_GAIN_SHIFT;
   11aca:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   11ace:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11ad0:	4622      	mov	r2, r4
   11ad2:	2000      	movs	r0, #0
  data |= gain << MLX90393_GAIN_SHIFT;
   11ad4:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11ad8:	f00d fc65 	bl	1f3a6 <writeRegister>
}
   11adc:	b003      	add	sp, #12
   11ade:	bd30      	pop	{r4, r5, pc}
   11ae0:	2000332a 	.word	0x2000332a

00011ae4 <mlx_setResolution>:
 * @param axis  The axis to set.
 * @param resolution  The resolution level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setResolution(enum mlx90393_axis axis,
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11ae6:	4606      	mov	r6, r0
   11ae8:	460c      	mov	r4, r1

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11aea:	2002      	movs	r0, #2
   11aec:	f10d 0106 	add.w	r1, sp, #6
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11af0:	4615      	mov	r5, r2
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11af2:	f00d fc72 	bl	1f3da <readRegister>

  switch (axis) {
   11af6:	2e01      	cmp	r6, #1
   11af8:	d014      	beq.n	11b24 <mlx_setResolution+0x40>
   11afa:	2e02      	cmp	r6, #2
   11afc:	d01b      	beq.n	11b36 <mlx_setResolution+0x52>
   11afe:	b94e      	cbnz	r6, 11b14 <mlx_setResolution+0x30>
  case MLX90393_X:
    _res_x = resolution;
    data &= ~0x0060;
   11b00:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_x = resolution;
   11b04:	4b10      	ldr	r3, [pc, #64]	; (11b48 <mlx_setResolution+0x64>)
    data &= ~0x0060;
   11b06:	f021 0160 	bic.w	r1, r1, #96	; 0x60
    _res_x = resolution;
   11b0a:	701c      	strb	r4, [r3, #0]
    data |= resolution << 5;
   11b0c:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
    data |= resolution << 7;
    break;
  case MLX90393_Z:
    _res_z = resolution;
    data &= ~0x0600;
    data |= resolution << 9;
   11b10:	f8ad 4006 	strh.w	r4, [sp, #6]
    break;
  }

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b14:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11b18:	462a      	mov	r2, r5
   11b1a:	2002      	movs	r0, #2
   11b1c:	f00d fc43 	bl	1f3a6 <writeRegister>
}
   11b20:	b002      	add	sp, #8
   11b22:	bd70      	pop	{r4, r5, r6, pc}
    data &= ~0x0180;
   11b24:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_y = resolution;
   11b28:	4b08      	ldr	r3, [pc, #32]	; (11b4c <mlx_setResolution+0x68>)
    data &= ~0x0180;
   11b2a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
    _res_y = resolution;
   11b2e:	701c      	strb	r4, [r3, #0]
    data |= resolution << 7;
   11b30:	ea41 14c4 	orr.w	r4, r1, r4, lsl #7
   11b34:	e7ec      	b.n	11b10 <mlx_setResolution+0x2c>
    data &= ~0x0600;
   11b36:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_z = resolution;
   11b3a:	4b05      	ldr	r3, [pc, #20]	; (11b50 <mlx_setResolution+0x6c>)
    data &= ~0x0600;
   11b3c:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
    _res_z = resolution;
   11b40:	701c      	strb	r4, [r3, #0]
    data |= resolution << 9;
   11b42:	ea41 2444 	orr.w	r4, r1, r4, lsl #9
   11b46:	e7e3      	b.n	11b10 <mlx_setResolution+0x2c>
   11b48:	2000332c 	.word	0x2000332c
   11b4c:	2000332d 	.word	0x2000332d
   11b50:	2000332e 	.word	0x2000332e

00011b54 <mlx_setFilter>:
/**
 * Sets the digital filter.
 * @param filter The digital filter setting.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _dig_filt = filter;
   11b56:	4b0c      	ldr	r3, [pc, #48]	; (11b88 <mlx_setFilter+0x34>)
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11b58:	4605      	mov	r5, r0
   11b5a:	460c      	mov	r4, r1
  _dig_filt = filter;
   11b5c:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11b5e:	460a      	mov	r2, r1
   11b60:	2002      	movs	r0, #2
   11b62:	f10d 0106 	add.w	r1, sp, #6
   11b66:	f00d fc38 	bl	1f3da <readRegister>

  data &= ~0x1C;
   11b6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11b6e:	f023 031c 	bic.w	r3, r3, #28
  data |= filter << 2;
   11b72:	ea43 0085 	orr.w	r0, r3, r5, lsl #2
   11b76:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b78:	4622      	mov	r2, r4
   11b7a:	2002      	movs	r0, #2
  data |= filter << 2;
   11b7c:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11b80:	f00d fc11 	bl	1f3a6 <writeRegister>
}
   11b84:	b003      	add	sp, #12
   11b86:	bd30      	pop	{r4, r5, pc}
   11b88:	20003329 	.word	0x20003329

00011b8c <mlx_setOversampling>:
 * Sets the oversampling.
 * @param oversampling The oversampling value to use.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setOversampling(
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   11b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _osr = oversampling;
   11b8e:	4b0c      	ldr	r3, [pc, #48]	; (11bc0 <mlx_setOversampling+0x34>)
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   11b90:	4605      	mov	r5, r0
   11b92:	460c      	mov	r4, r1
  _osr = oversampling;
   11b94:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11b96:	460a      	mov	r2, r1
   11b98:	2002      	movs	r0, #2
   11b9a:	f10d 0106 	add.w	r1, sp, #6
   11b9e:	f00d fc1c 	bl	1f3da <readRegister>

  data &= ~0x03;
   11ba2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11ba6:	f023 0303 	bic.w	r3, r3, #3
  data |= oversampling;
   11baa:	ea43 0005 	orr.w	r0, r3, r5
   11bae:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11bb0:	4622      	mov	r2, r4
   11bb2:	2002      	movs	r0, #2
  data |= oversampling;
   11bb4:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11bb8:	f00d fbf5 	bl	1f3a6 <writeRegister>
}
   11bbc:	b003      	add	sp, #12
   11bbe:	bd30      	pop	{r4, r5, pc}
   11bc0:	2000332b 	.word	0x2000332b

00011bc4 <mlx_readMeasurement>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True on command success
 */
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc8:	b087      	sub	sp, #28
   11bca:	4690      	mov	r8, r2
  uint8_t tx[1] = {MLX90393_REG_RM | MLX90393_AXIS_ALL};
   11bcc:	224e      	movs	r2, #78	; 0x4e
   11bce:	f88d 200c 	strb.w	r2, [sp, #12]
  /* Convert data to uT and float. */
  xi = (rx[0] << 8) | rx[1];
  yi = (rx[2] << 8) | rx[3];
  zi = (rx[4] << 8) | rx[5];

  if (_res_x == MLX90393_RES_18)
   11bd2:	4e3c      	ldr	r6, [pc, #240]	; (11cc4 <mlx_readMeasurement+0x100>)
  uint8_t rx[6] = {0};
   11bd4:	2200      	movs	r2, #0
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11bd6:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t rx[6] = {0};
   11bda:	9204      	str	r2, [sp, #16]
   11bdc:	f8ad 2014 	strh.w	r2, [sp, #20]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11be0:	2306      	movs	r3, #6
   11be2:	aa04      	add	r2, sp, #16
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11be4:	4683      	mov	fp, r0
   11be6:	468a      	mov	sl, r1
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11be8:	a803      	add	r0, sp, #12
   11bea:	2101      	movs	r1, #1
   11bec:	f00d fb88 	bl	1f300 <transceive>
  xi = (rx[0] << 8) | rx[1];
   11bf0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   11bf4:	f8bd 5012 	ldrh.w	r5, [sp, #18]
   11bf8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  if (_res_x == MLX90393_RES_18)
   11bfc:	7837      	ldrb	r7, [r6, #0]
   11bfe:	ba42      	rev16	r2, r0
   11c00:	ba6b      	rev16	r3, r5
   11c02:	ba61      	rev16	r1, r4
   11c04:	2f02      	cmp	r7, #2
   11c06:	b290      	uxth	r0, r2
  yi = (rx[2] << 8) | rx[3];
   11c08:	b29d      	uxth	r5, r3
  zi = (rx[4] << 8) | rx[5];
   11c0a:	b28c      	uxth	r4, r1
  if (_res_x == MLX90393_RES_18)
   11c0c:	d103      	bne.n	11c16 <mlx_readMeasurement+0x52>
    xi -= 0x8000;
   11c0e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  if (_res_x == MLX90393_RES_19)
    xi -= 0x4000;
   11c12:	b200      	sxth	r0, r0
   11c14:	e002      	b.n	11c1c <mlx_readMeasurement+0x58>
  if (_res_x == MLX90393_RES_19)
   11c16:	2f03      	cmp	r7, #3
   11c18:	d008      	beq.n	11c2c <mlx_readMeasurement+0x68>
   11c1a:	b210      	sxth	r0, r2
  if (_res_y == MLX90393_RES_18)
   11c1c:	4a2a      	ldr	r2, [pc, #168]	; (11cc8 <mlx_readMeasurement+0x104>)
   11c1e:	7816      	ldrb	r6, [r2, #0]
   11c20:	2e02      	cmp	r6, #2
   11c22:	d106      	bne.n	11c32 <mlx_readMeasurement+0x6e>
    yi -= 0x8000;
   11c24:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  if (_res_y == MLX90393_RES_19)
    yi -= 0x4000;
   11c28:	b22d      	sxth	r5, r5
   11c2a:	e005      	b.n	11c38 <mlx_readMeasurement+0x74>
    xi -= 0x4000;
   11c2c:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   11c30:	e7ef      	b.n	11c12 <mlx_readMeasurement+0x4e>
  if (_res_y == MLX90393_RES_19)
   11c32:	2e03      	cmp	r6, #3
   11c34:	d008      	beq.n	11c48 <mlx_readMeasurement+0x84>
   11c36:	b21d      	sxth	r5, r3
  if (_res_z == MLX90393_RES_18)
   11c38:	4b24      	ldr	r3, [pc, #144]	; (11ccc <mlx_readMeasurement+0x108>)
   11c3a:	781e      	ldrb	r6, [r3, #0]
   11c3c:	2e02      	cmp	r6, #2
   11c3e:	d106      	bne.n	11c4e <mlx_readMeasurement+0x8a>
    zi -= 0x8000;
   11c40:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  if (_res_z == MLX90393_RES_19)
    zi -= 0x4000;
   11c44:	b224      	sxth	r4, r4
   11c46:	e005      	b.n	11c54 <mlx_readMeasurement+0x90>
    yi -= 0x4000;
   11c48:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   11c4c:	e7ec      	b.n	11c28 <mlx_readMeasurement+0x64>
  if (_res_z == MLX90393_RES_19)
   11c4e:	2e03      	cmp	r6, #3
   11c50:	d035      	beq.n	11cbe <mlx_readMeasurement+0xfa>
   11c52:	b20c      	sxth	r4, r1

  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   11c54:	f8df 9078 	ldr.w	r9, [pc, #120]	; 11cd0 <mlx_readMeasurement+0x10c>
   11c58:	4e1e      	ldr	r6, [pc, #120]	; (11cd4 <mlx_readMeasurement+0x110>)
   11c5a:	f899 1000 	ldrb.w	r1, [r9]
   11c5e:	eb07 0781 	add.w	r7, r7, r1, lsl #2
   11c62:	f7ef f861 	bl	d28 <__aeabi_i2f>
   11c66:	4601      	mov	r1, r0
   11c68:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
   11c6c:	f7ee fa48 	bl	100 <__aeabi_fmul>
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11c70:	4a15      	ldr	r2, [pc, #84]	; (11cc8 <mlx_readMeasurement+0x104>)
  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   11c72:	f8cb 0000 	str.w	r0, [fp]
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11c76:	7817      	ldrb	r7, [r2, #0]
   11c78:	f899 1000 	ldrb.w	r1, [r9]
   11c7c:	4628      	mov	r0, r5
   11c7e:	eb07 0781 	add.w	r7, r7, r1, lsl #2
   11c82:	f7ef f851 	bl	d28 <__aeabi_i2f>
   11c86:	4601      	mov	r1, r0
   11c88:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
   11c8c:	f7ee fa38 	bl	100 <__aeabi_fmul>
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   11c90:	4b0e      	ldr	r3, [pc, #56]	; (11ccc <mlx_readMeasurement+0x108>)
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11c92:	f8ca 0000 	str.w	r0, [sl]
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   11c96:	f899 2000 	ldrb.w	r2, [r9]
   11c9a:	781b      	ldrb	r3, [r3, #0]
   11c9c:	4620      	mov	r0, r4
   11c9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11ca2:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   11ca6:	f7ef f83f 	bl	d28 <__aeabi_i2f>
   11caa:	4601      	mov	r1, r0
   11cac:	6870      	ldr	r0, [r6, #4]
   11cae:	f7ee fa27 	bl	100 <__aeabi_fmul>
   11cb2:	f8c8 0000 	str.w	r0, [r8]

  return true;
}
   11cb6:	2001      	movs	r0, #1
   11cb8:	b007      	add	sp, #28
   11cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    zi -= 0x4000;
   11cbe:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   11cc2:	e7bf      	b.n	11c44 <mlx_readMeasurement+0x80>
   11cc4:	2000332c 	.word	0x2000332c
   11cc8:	2000332d 	.word	0x2000332d
   11ccc:	2000332e 	.word	0x2000332e
   11cd0:	2000332a 	.word	0x2000332a
   11cd4:	000239d4 	.word	0x000239d4

00011cd8 <main>:
        while(1){};
    }
}

void main(void)
{
   11cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	printk("Hello World %s\n", CONFIG_BOARD);
   11cda:	492b      	ldr	r1, [pc, #172]	; (11d88 <main+0xb0>)
   11cdc:	482b      	ldr	r0, [pc, #172]	; (11d8c <main+0xb4>)
   11cde:	f00d fc56 	bl	1f58e <printk>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11ce2:	482b      	ldr	r0, [pc, #172]	; (11d90 <main+0xb8>)
   11ce4:	f008 fcac 	bl	1a640 <z_impl_device_get_binding>
	//k_work_init(&some_work, btn1_handle);
	

	struct device *i2c_dev;
	i2c_dev = device_get_binding("myi2c");
	if (!i2c_dev) {
   11ce8:	4604      	mov	r4, r0
   11cea:	b928      	cbnz	r0, 11cf8 <main+0x20>
		printk("I2C: Device driver not found.\n");
   11cec:	4829      	ldr	r0, [pc, #164]	; (11d94 <main+0xbc>)
	enableMLX(i2c_dev);
	k_sleep(K_SECONDS(3));
	printk("disable mlx\n");
	disableMLX(i2c_dev);
	
}
   11cee:	b003      	add	sp, #12
   11cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("I2C: Device driver not found.\n");
   11cf4:	f00d bc4b 	b.w	1f58e <printk>
	error = init_Interrupt_BMP();
   11cf8:	f7ff fe20 	bl	1193c <init_Interrupt_BMP>
   11cfc:	4d26      	ldr	r5, [pc, #152]	; (11d98 <main+0xc0>)
   11cfe:	7028      	strb	r0, [r5, #0]
	error = initBMP384(i2c_dev);
   11d00:	4620      	mov	r0, r4
   11d02:	f7ff fdb7 	bl	11874 <initBMP384>
   11d06:	7028      	strb	r0, [r5, #0]
	initMLX(i2c_dev);
   11d08:	4620      	mov	r0, r4
   11d0a:	f7ff fa8b 	bl	11224 <initMLX>
	init_Interrupt_MLX();
   11d0e:	f7ff fa93 	bl	11238 <init_Interrupt_MLX>
	k_sleep(K_SECONDS(1));
   11d12:	2100      	movs	r1, #0
   11d14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11d18:	f00d fc08 	bl	1f52c <k_sleep.isra.0>
	initBLE();
   11d1c:	f7ff fa16 	bl	1114c <initBLE>
	printk("start imu\n");
   11d20:	481e      	ldr	r0, [pc, #120]	; (11d9c <main+0xc4>)
   11d22:	f00d fc34 	bl	1f58e <printk>
	initIMU(i2c_dev,AFS_2G, GFS_15_125DPS, AODR_25Hz, GODR_25Hz);
   11d26:	230a      	movs	r3, #10
   11d28:	9300      	str	r3, [sp, #0]
   11d2a:	2207      	movs	r2, #7
   11d2c:	4620      	mov	r0, r4
   11d2e:	2103      	movs	r1, #3
   11d30:	f7ff f884 	bl	10e3c <initIMU>
	setState(0,0); //disable 0,0 enable 1,1
   11d34:	2100      	movs	r1, #0
   11d36:	4608      	mov	r0, r1
   11d38:	f00c ffb3 	bl	1eca2 <setState>
	k_sleep(K_SECONDS(3));
   11d3c:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   11d40:	2100      	movs	r1, #0
   11d42:	f00d fbf3 	bl	1f52c <k_sleep.isra.0>
	k_sleep(K_SECONDS(1));
   11d46:	2100      	movs	r1, #0
   11d48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11d4c:	f00d fbee 	bl	1f52c <k_sleep.isra.0>
	disableMLX(i2c_dev);
   11d50:	4620      	mov	r0, r4
   11d52:	f00c ffdf 	bl	1ed14 <disableMLX>
	k_sleep(K_SECONDS(2));
   11d56:	2100      	movs	r1, #0
   11d58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   11d5c:	f00d fbe6 	bl	1f52c <k_sleep.isra.0>
	printk("enable mlx\n");
   11d60:	480f      	ldr	r0, [pc, #60]	; (11da0 <main+0xc8>)
   11d62:	f00d fc14 	bl	1f58e <printk>
	enableMLX(i2c_dev);
   11d66:	4620      	mov	r0, r4
   11d68:	f00c ffd2 	bl	1ed10 <enableMLX>
	k_sleep(K_SECONDS(3));
   11d6c:	2100      	movs	r1, #0
   11d6e:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   11d72:	f00d fbdb 	bl	1f52c <k_sleep.isra.0>
	printk("disable mlx\n");
   11d76:	480b      	ldr	r0, [pc, #44]	; (11da4 <main+0xcc>)
   11d78:	f00d fc09 	bl	1f58e <printk>
	disableMLX(i2c_dev);
   11d7c:	4620      	mov	r0, r4
}
   11d7e:	b003      	add	sp, #12
   11d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	disableMLX(i2c_dev);
   11d84:	f00c bfc6 	b.w	1ed14 <disableMLX>
   11d88:	000245c0 	.word	0x000245c0
   11d8c:	000245d2 	.word	0x000245d2
   11d90:	000245e2 	.word	0x000245e2
   11d94:	000245e8 	.word	0x000245e8
   11d98:	2000332f 	.word	0x2000332f
   11d9c:	00024607 	.word	0x00024607
   11da0:	00024612 	.word	0x00024612
   11da4:	0002461e 	.word	0x0002461e

00011da8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   11da8:	680b      	ldr	r3, [r1, #0]
   11daa:	3301      	adds	r3, #1
   11dac:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   11dae:	4b01      	ldr	r3, [pc, #4]	; (11db4 <char_out+0xc>)
   11db0:	681b      	ldr	r3, [r3, #0]
   11db2:	4718      	bx	r3
   11db4:	200005cc 	.word	0x200005cc

00011db8 <__printk_hook_install>:
	_char_out = fn;
   11db8:	4b01      	ldr	r3, [pc, #4]	; (11dc0 <__printk_hook_install+0x8>)
   11dba:	6018      	str	r0, [r3, #0]
}
   11dbc:	4770      	bx	lr
   11dbe:	bf00      	nop
   11dc0:	200005cc 	.word	0x200005cc

00011dc4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   11dc4:	b507      	push	{r0, r1, r2, lr}
   11dc6:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   11dc8:	2100      	movs	r1, #0
{
   11dca:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   11dcc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   11dce:	4803      	ldr	r0, [pc, #12]	; (11ddc <vprintk+0x18>)
   11dd0:	a901      	add	r1, sp, #4
   11dd2:	f000 f945 	bl	12060 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   11dd6:	b003      	add	sp, #12
   11dd8:	f85d fb04 	ldr.w	pc, [sp], #4
   11ddc:	00011da9 	.word	0x00011da9

00011de0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11de4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11de8:	f019 0808 	ands.w	r8, r9, #8
{
   11dec:	4604      	mov	r4, r0
   11dee:	4693      	mov	fp, r2
	if (processing) {
   11df0:	d00d      	beq.n	11e0e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   11df2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11df4:	bf0c      	ite	eq
   11df6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11dfa:	f049 0920 	orrne.w	r9, r9, #32
   11dfe:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11e02:	f38b 8811 	msr	BASEPRI, fp
   11e06:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e0e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   11e12:	2902      	cmp	r1, #2
   11e14:	d107      	bne.n	11e26 <process_event+0x46>
			evt = process_recheck(mgr);
   11e16:	4620      	mov	r0, r4
   11e18:	f00d fbc6 	bl	1f5a8 <process_recheck>
		if (evt == EVT_NOP) {
   11e1c:	2800      	cmp	r0, #0
   11e1e:	d0f0      	beq.n	11e02 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   11e20:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e22:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   11e24:	d14e      	bne.n	11ec4 <process_event+0xe4>
			res = mgr->last_res;
   11e26:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e28:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   11e2a:	2f00      	cmp	r7, #0
   11e2c:	da15      	bge.n	11e5a <process_event+0x7a>
		*clients = mgr->clients;
   11e2e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e30:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   11e34:	e9c4 8800 	strd	r8, r8, [r4]
   11e38:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e3c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   11e3e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11e40:	8b21      	ldrh	r1, [r4, #24]
   11e42:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11e46:	45ca      	cmp	sl, r9
   11e48:	d002      	beq.n	11e50 <process_event+0x70>
		if (do_monitors
   11e4a:	68a3      	ldr	r3, [r4, #8]
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d15a      	bne.n	11f06 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   11e50:	b90d      	cbnz	r5, 11e56 <process_event+0x76>
		    || (transit != NULL)) {
   11e52:	2e00      	cmp	r6, #0
   11e54:	d071      	beq.n	11f3a <process_event+0x15a>
   11e56:	2300      	movs	r3, #0
   11e58:	e056      	b.n	11f08 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11e5a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11e5e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11e60:	2a01      	cmp	r2, #1
   11e62:	d81e      	bhi.n	11ea2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e64:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11e68:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   11e6a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e6c:	b289      	uxth	r1, r1
   11e6e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11e72:	d10a      	bne.n	11e8a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11e74:	b13d      	cbz	r5, 11e86 <process_event+0xa6>
   11e76:	8b63      	ldrh	r3, [r4, #26]
   11e78:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   11e7a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   11e7c:	3301      	adds	r3, #1
   11e7e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11e80:	2a00      	cmp	r2, #0
   11e82:	d1fa      	bne.n	11e7a <process_event+0x9a>
   11e84:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e86:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e8a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11e8c:	4620      	mov	r0, r4
   11e8e:	f00d fb8b 	bl	1f5a8 <process_recheck>
   11e92:	4606      	mov	r6, r0
   11e94:	2800      	cmp	r0, #0
   11e96:	d0d3      	beq.n	11e40 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e98:	8b23      	ldrh	r3, [r4, #24]
   11e9a:	f043 0320 	orr.w	r3, r3, #32
   11e9e:	8323      	strh	r3, [r4, #24]
   11ea0:	e7cd      	b.n	11e3e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11ea2:	2b04      	cmp	r3, #4
   11ea4:	d10c      	bne.n	11ec0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ea6:	f021 0107 	bic.w	r1, r1, #7
   11eaa:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11eac:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11eae:	4620      	mov	r0, r4
   11eb0:	f00d fb7a 	bl	1f5a8 <process_recheck>
   11eb4:	4605      	mov	r5, r0
   11eb6:	2800      	cmp	r0, #0
   11eb8:	d0c1      	beq.n	11e3e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11eba:	f041 0120 	orr.w	r1, r1, #32
   11ebe:	8321      	strh	r1, [r4, #24]
   11ec0:	2500      	movs	r5, #0
   11ec2:	e7bc      	b.n	11e3e <process_event+0x5e>
		} else if (evt == EVT_START) {
   11ec4:	2803      	cmp	r0, #3
   11ec6:	d109      	bne.n	11edc <process_event+0xfc>
			transit = mgr->transitions->start;
   11ec8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11eca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   11ece:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ed0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   11ed4:	8323      	strh	r3, [r4, #24]
}
   11ed6:	2500      	movs	r5, #0
		res = 0;
   11ed8:	462f      	mov	r7, r5
   11eda:	e7b1      	b.n	11e40 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   11edc:	2804      	cmp	r0, #4
   11ede:	d106      	bne.n	11eee <process_event+0x10e>
			transit = mgr->transitions->stop;
   11ee0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ee2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   11ee6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ee8:	f043 0304 	orr.w	r3, r3, #4
   11eec:	e7f2      	b.n	11ed4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   11eee:	2805      	cmp	r0, #5
   11ef0:	d106      	bne.n	11f00 <process_event+0x120>
			transit = mgr->transitions->reset;
   11ef2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ef4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   11ef8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11efa:	f043 0305 	orr.w	r3, r3, #5
   11efe:	e7e9      	b.n	11ed4 <process_event+0xf4>
   11f00:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11f02:	462e      	mov	r6, r5
   11f04:	e7e8      	b.n	11ed8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   11f06:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11f08:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11f0c:	8321      	strh	r1, [r4, #24]
   11f0e:	f38b 8811 	msr	BASEPRI, fp
   11f12:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11f16:	b9fb      	cbnz	r3, 11f58 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   11f18:	bb85      	cbnz	r5, 11f7c <process_event+0x19c>
			if (transit != NULL) {
   11f1a:	b116      	cbz	r6, 11f22 <process_event+0x142>
				transit(mgr, transition_complete);
   11f1c:	491f      	ldr	r1, [pc, #124]	; (11f9c <process_event+0x1bc>)
   11f1e:	4620      	mov	r0, r4
   11f20:	47b0      	blx	r6
	__asm__ volatile(
   11f22:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f26:	f3ef 8b11 	mrs	fp, BASEPRI
   11f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   11f2e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11f32:	8b23      	ldrh	r3, [r4, #24]
   11f34:	f023 0308 	bic.w	r3, r3, #8
   11f38:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11f3a:	8b23      	ldrh	r3, [r4, #24]
   11f3c:	06da      	lsls	r2, r3, #27
   11f3e:	d525      	bpl.n	11f8c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11f40:	f023 0310 	bic.w	r3, r3, #16
   11f44:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   11f46:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11f48:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   11f4c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   11f50:	2900      	cmp	r1, #0
   11f52:	f47f af5e 	bne.w	11e12 <process_event+0x32>
out:
   11f56:	e754      	b.n	11e02 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11f58:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11f5a:	2900      	cmp	r1, #0
   11f5c:	d0dc      	beq.n	11f18 <process_event+0x138>
	return node->next;
   11f5e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   11f62:	f8d1 b004 	ldr.w	fp, [r1, #4]
   11f66:	463b      	mov	r3, r7
   11f68:	4652      	mov	r2, sl
   11f6a:	4620      	mov	r0, r4
   11f6c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11f6e:	f1b9 0f00 	cmp.w	r9, #0
   11f72:	d0d1      	beq.n	11f18 <process_event+0x138>
   11f74:	4649      	mov	r1, r9
   11f76:	f8d9 9000 	ldr.w	r9, [r9]
   11f7a:	e7f2      	b.n	11f62 <process_event+0x182>
   11f7c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   11f7e:	463b      	mov	r3, r7
   11f80:	4652      	mov	r2, sl
   11f82:	4620      	mov	r0, r4
   11f84:	682d      	ldr	r5, [r5, #0]
   11f86:	f00d fb2b 	bl	1f5e0 <notify_one>
   11f8a:	e7c5      	b.n	11f18 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11f8c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11f90:	bf1e      	ittt	ne
   11f92:	f023 0320 	bicne.w	r3, r3, #32
   11f96:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   11f98:	2102      	movne	r1, #2
   11f9a:	e7d5      	b.n	11f48 <process_event+0x168>
   11f9c:	0001f60d 	.word	0x0001f60d

00011fa0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   11fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   11fa2:	4e08      	ldr	r6, [pc, #32]	; (11fc4 <extract_decimal+0x24>)
   11fa4:	6802      	ldr	r2, [r0, #0]
{
   11fa6:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
   11fa8:	270a      	movs	r7, #10
	size_t val = 0;
   11faa:	2000      	movs	r0, #0
   11fac:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
   11fae:	3201      	adds	r2, #1
   11fb0:	780c      	ldrb	r4, [r1, #0]
   11fb2:	5da5      	ldrb	r5, [r4, r6]
   11fb4:	076d      	lsls	r5, r5, #29
   11fb6:	d401      	bmi.n	11fbc <extract_decimal+0x1c>
	}
	*str = sp;
   11fb8:	6019      	str	r1, [r3, #0]
	return val;
}
   11fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   11fbc:	fb07 4000 	mla	r0, r7, r0, r4
   11fc0:	3830      	subs	r0, #48	; 0x30
   11fc2:	e7f3      	b.n	11fac <extract_decimal+0xc>
   11fc4:	00024a0b 	.word	0x00024a0b

00011fc8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   11fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fcc:	4615      	mov	r5, r2
   11fce:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   11fd0:	78d3      	ldrb	r3, [r2, #3]
   11fd2:	4a22      	ldr	r2, [pc, #136]	; (1205c <encode_uint+0x94>)
   11fd4:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
   11fd8:	2b6f      	cmp	r3, #111	; 0x6f
{
   11fda:	4680      	mov	r8, r0
   11fdc:	460f      	mov	r7, r1
   11fde:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   11fe2:	d029      	beq.n	12038 <encode_uint+0x70>
   11fe4:	d824      	bhi.n	12030 <encode_uint+0x68>
		return 16;
   11fe6:	2b58      	cmp	r3, #88	; 0x58
   11fe8:	bf14      	ite	ne
   11fea:	260a      	movne	r6, #10
   11fec:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   11fee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   11ff2:	4632      	mov	r2, r6
   11ff4:	2300      	movs	r3, #0
   11ff6:	4640      	mov	r0, r8
   11ff8:	4639      	mov	r1, r7
   11ffa:	f7ee ff09 	bl	e10 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   11ffe:	2a09      	cmp	r2, #9
   12000:	b2d4      	uxtb	r4, r2
   12002:	d81e      	bhi.n	12042 <encode_uint+0x7a>
   12004:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   12006:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12008:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1200a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1200e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   12012:	d301      	bcc.n	12018 <encode_uint+0x50>
   12014:	45d1      	cmp	r9, sl
   12016:	d811      	bhi.n	1203c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12018:	782b      	ldrb	r3, [r5, #0]
   1201a:	069b      	lsls	r3, r3, #26
   1201c:	d505      	bpl.n	1202a <encode_uint+0x62>
		if (radix == 8) {
   1201e:	2e08      	cmp	r6, #8
   12020:	d115      	bne.n	1204e <encode_uint+0x86>
			conv->altform_0 = true;
   12022:	78ab      	ldrb	r3, [r5, #2]
   12024:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   12028:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   1202a:	4648      	mov	r0, r9
   1202c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   12030:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   12034:	2b70      	cmp	r3, #112	; 0x70
   12036:	e7d7      	b.n	11fe8 <encode_uint+0x20>
	switch (specifier) {
   12038:	2608      	movs	r6, #8
   1203a:	e7d8      	b.n	11fee <encode_uint+0x26>
		value /= radix;
   1203c:	4680      	mov	r8, r0
   1203e:	460f      	mov	r7, r1
   12040:	e7d7      	b.n	11ff2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12042:	f1bb 0f01 	cmp.w	fp, #1
   12046:	bf0c      	ite	eq
   12048:	3437      	addeq	r4, #55	; 0x37
   1204a:	3457      	addne	r4, #87	; 0x57
   1204c:	e7db      	b.n	12006 <encode_uint+0x3e>
		} else if (radix == 16) {
   1204e:	2e10      	cmp	r6, #16
   12050:	d1eb      	bne.n	1202a <encode_uint+0x62>
			conv->altform_0c = true;
   12052:	78ab      	ldrb	r3, [r5, #2]
   12054:	f043 0310 	orr.w	r3, r3, #16
   12058:	e7e6      	b.n	12028 <encode_uint+0x60>
   1205a:	bf00      	nop
   1205c:	00024a0b 	.word	0x00024a0b

00012060 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12064:	4681      	mov	r9, r0
   12066:	b09b      	sub	sp, #108	; 0x6c
   12068:	468a      	mov	sl, r1
   1206a:	4615      	mov	r5, r2
   1206c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1206e:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12070:	7828      	ldrb	r0, [r5, #0]
   12072:	b910      	cbnz	r0, 1207a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12074:	4630      	mov	r0, r6
   12076:	f000 bdc5 	b.w	12c04 <cbvprintf+0xba4>
			OUTC(*fp++);
   1207a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
   1207c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1207e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   12080:	d006      	beq.n	12090 <cbvprintf+0x30>
			OUTC(*fp++);
   12082:	4651      	mov	r1, sl
			OUTC('%');
   12084:	47c8      	blx	r9
   12086:	2800      	cmp	r0, #0
   12088:	f2c0 85bc 	blt.w	12c04 <cbvprintf+0xba4>
   1208c:	3601      	adds	r6, #1
		if (bps == NULL) {
   1208e:	e226      	b.n	124de <cbvprintf+0x47e>
		} state = {
   12090:	2218      	movs	r2, #24
   12092:	2100      	movs	r1, #0
   12094:	a80c      	add	r0, sp, #48	; 0x30
   12096:	f011 f97b 	bl	23390 <memset>
	if (*sp == '%') {
   1209a:	786b      	ldrb	r3, [r5, #1]
   1209c:	2b25      	cmp	r3, #37	; 0x25
   1209e:	d059      	beq.n	12154 <cbvprintf+0xf4>
   120a0:	1c6a      	adds	r2, r5, #1
   120a2:	4617      	mov	r7, r2
		switch (*sp) {
   120a4:	f812 3b01 	ldrb.w	r3, [r2], #1
   120a8:	2b2b      	cmp	r3, #43	; 0x2b
   120aa:	f000 808b 	beq.w	121c4 <cbvprintf+0x164>
   120ae:	d879      	bhi.n	121a4 <cbvprintf+0x144>
   120b0:	2b20      	cmp	r3, #32
   120b2:	f000 808c 	beq.w	121ce <cbvprintf+0x16e>
   120b6:	2b23      	cmp	r3, #35	; 0x23
   120b8:	f000 808e 	beq.w	121d8 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
   120bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   120c0:	f003 0244 	and.w	r2, r3, #68	; 0x44
   120c4:	2a44      	cmp	r2, #68	; 0x44
   120c6:	d103      	bne.n	120d0 <cbvprintf+0x70>
		conv->flag_zero = false;
   120c8:	f36f 1386 	bfc	r3, #6, #1
   120cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   120d0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   120d4:	970a      	str	r7, [sp, #40]	; 0x28
   120d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   120da:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   120de:	783b      	ldrb	r3, [r7, #0]
   120e0:	2b2a      	cmp	r3, #42	; 0x2a
   120e2:	d17e      	bne.n	121e2 <cbvprintf+0x182>
		conv->width_star = true;
   120e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   120e8:	f043 0301 	orr.w	r3, r3, #1
   120ec:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   120f0:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
   120f2:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   120f4:	781a      	ldrb	r2, [r3, #0]
   120f6:	2a2e      	cmp	r2, #46	; 0x2e
   120f8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   120fc:	bf0c      	ite	eq
   120fe:	2101      	moveq	r1, #1
   12100:	2100      	movne	r1, #0
   12102:	f361 0241 	bfi	r2, r1, #1, #1
   12106:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1210a:	d10b      	bne.n	12124 <cbvprintf+0xc4>
	++sp;
   1210c:	1c5a      	adds	r2, r3, #1
   1210e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   12110:	785a      	ldrb	r2, [r3, #1]
   12112:	2a2a      	cmp	r2, #42	; 0x2a
   12114:	d17b      	bne.n	1220e <cbvprintf+0x1ae>
		conv->prec_star = true;
   12116:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1211a:	f042 0204 	orr.w	r2, r2, #4
   1211e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   12122:	3302      	adds	r3, #2
	switch (*sp) {
   12124:	461a      	mov	r2, r3
   12126:	f812 0b01 	ldrb.w	r0, [r2], #1
   1212a:	286c      	cmp	r0, #108	; 0x6c
   1212c:	f000 80cf 	beq.w	122ce <cbvprintf+0x26e>
   12130:	d87d      	bhi.n	1222e <cbvprintf+0x1ce>
   12132:	2868      	cmp	r0, #104	; 0x68
   12134:	f000 8084 	beq.w	12240 <cbvprintf+0x1e0>
   12138:	286a      	cmp	r0, #106	; 0x6a
   1213a:	f000 80d2 	beq.w	122e2 <cbvprintf+0x282>
   1213e:	284c      	cmp	r0, #76	; 0x4c
   12140:	f000 80d6 	beq.w	122f0 <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
   12144:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12148:	f36f 02c6 	bfc	r2, #3, #4
   1214c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   12150:	461a      	mov	r2, r3
   12152:	e080      	b.n	12256 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
   12154:	1caa      	adds	r2, r5, #2
   12156:	9202      	str	r2, [sp, #8]
   12158:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1215c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12160:	07df      	lsls	r7, r3, #31
   12162:	f140 8170 	bpl.w	12446 <cbvprintf+0x3e6>
			width = va_arg(ap, int);
   12166:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
   1216a:	f1bb 0f00 	cmp.w	fp, #0
   1216e:	da07      	bge.n	12180 <cbvprintf+0x120>
				conv->flag_dash = true;
   12170:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   12174:	f042 0204 	orr.w	r2, r2, #4
   12178:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1217c:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
   12180:	0758      	lsls	r0, r3, #29
   12182:	f140 8169 	bpl.w	12458 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
   12186:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1218a:	f1b8 0f00 	cmp.w	r8, #0
   1218e:	f280 8168 	bge.w	12462 <cbvprintf+0x402>
				conv->prec_present = false;
   12192:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12196:	f36f 0341 	bfc	r3, #1, #1
   1219a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1219e:	f04f 38ff 	mov.w	r8, #4294967295
   121a2:	e15e      	b.n	12462 <cbvprintf+0x402>
		switch (*sp) {
   121a4:	2b2d      	cmp	r3, #45	; 0x2d
   121a6:	d006      	beq.n	121b6 <cbvprintf+0x156>
   121a8:	2b30      	cmp	r3, #48	; 0x30
   121aa:	d187      	bne.n	120bc <cbvprintf+0x5c>
			conv->flag_zero = true;
   121ac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   121b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   121b4:	e003      	b.n	121be <cbvprintf+0x15e>
			conv->flag_dash = true;
   121b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   121ba:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   121be:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   121c2:	e76e      	b.n	120a2 <cbvprintf+0x42>
			conv->flag_plus = true;
   121c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   121c8:	f043 0308 	orr.w	r3, r3, #8
   121cc:	e7f7      	b.n	121be <cbvprintf+0x15e>
			conv->flag_space = true;
   121ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   121d2:	f043 0310 	orr.w	r3, r3, #16
   121d6:	e7f2      	b.n	121be <cbvprintf+0x15e>
			conv->flag_hash = true;
   121d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   121dc:	f043 0320 	orr.w	r3, r3, #32
   121e0:	e7ed      	b.n	121be <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
   121e2:	a80a      	add	r0, sp, #40	; 0x28
   121e4:	f7ff fedc 	bl	11fa0 <extract_decimal>
	if (sp != wp) {
   121e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121ea:	42bb      	cmp	r3, r7
   121ec:	d081      	beq.n	120f2 <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
   121ee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   121f2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   121f4:	f3c1 0240 	ubfx	r2, r1, #1, #1
   121f8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   121fc:	0052      	lsls	r2, r2, #1
   121fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12202:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   12206:	430a      	orrs	r2, r1
   12208:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1220c:	e771      	b.n	120f2 <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
   1220e:	a80a      	add	r0, sp, #40	; 0x28
   12210:	f7ff fec6 	bl	11fa0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   12214:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   12218:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1221a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1221e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   12222:	f360 0341 	bfi	r3, r0, #1, #1
   12226:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1222a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1222c:	e77a      	b.n	12124 <cbvprintf+0xc4>
	switch (*sp) {
   1222e:	2874      	cmp	r0, #116	; 0x74
   12230:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   12234:	d059      	beq.n	122ea <cbvprintf+0x28a>
   12236:	287a      	cmp	r0, #122	; 0x7a
   12238:	d184      	bne.n	12144 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
   1223a:	460b      	mov	r3, r1
   1223c:	2106      	movs	r1, #6
   1223e:	e041      	b.n	122c4 <cbvprintf+0x264>
		if (*++sp == 'h') {
   12240:	7859      	ldrb	r1, [r3, #1]
   12242:	2968      	cmp	r1, #104	; 0x68
   12244:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   12248:	d13a      	bne.n	122c0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
   1224a:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
   1224c:	f362 01c6 	bfi	r1, r2, #3, #4
   12250:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
   12254:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
   12256:	4613      	mov	r3, r2
   12258:	f813 2b01 	ldrb.w	r2, [r3], #1
   1225c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   1225e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   12260:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   12264:	f200 80c5 	bhi.w	123f2 <cbvprintf+0x392>
   12268:	2a57      	cmp	r2, #87	; 0x57
   1226a:	d84e      	bhi.n	1230a <cbvprintf+0x2aa>
   1226c:	2a41      	cmp	r2, #65	; 0x41
   1226e:	d004      	beq.n	1227a <cbvprintf+0x21a>
   12270:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   12274:	2b02      	cmp	r3, #2
   12276:	f200 80bc 	bhi.w	123f2 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   1227a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   1227e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   12282:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   12284:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   12288:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   1228c:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
   12290:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
   12294:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   12298:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
   1229c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   122a0:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   122a2:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
   122a6:	b2cb      	uxtb	r3, r1
   122a8:	f100 80cb 	bmi.w	12442 <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
   122ac:	f003 0278 	and.w	r2, r3, #120	; 0x78
   122b0:	2a18      	cmp	r2, #24
   122b2:	f040 809b 	bne.w	123ec <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
   122b6:	f36f 03c6 	bfc	r3, #3, #4
   122ba:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   122be:	e082      	b.n	123c6 <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
   122c0:	460b      	mov	r3, r1
   122c2:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
   122c4:	f361 03c6 	bfi	r3, r1, #3, #4
   122c8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   122cc:	e7c3      	b.n	12256 <cbvprintf+0x1f6>
		if (*++sp == 'l') {
   122ce:	7859      	ldrb	r1, [r3, #1]
   122d0:	296c      	cmp	r1, #108	; 0x6c
   122d2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   122d6:	d101      	bne.n	122dc <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
   122d8:	2204      	movs	r2, #4
   122da:	e7b7      	b.n	1224c <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
   122dc:	460b      	mov	r3, r1
   122de:	2103      	movs	r1, #3
   122e0:	e7f0      	b.n	122c4 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
   122e2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   122e6:	2105      	movs	r1, #5
   122e8:	e7ec      	b.n	122c4 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
   122ea:	460b      	mov	r3, r1
   122ec:	2107      	movs	r1, #7
   122ee:	e7e9      	b.n	122c4 <cbvprintf+0x264>
		conv->unsupported = true;
   122f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   122f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   122f8:	f023 0302 	bic.w	r3, r3, #2
   122fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   12300:	f043 0302 	orr.w	r3, r3, #2
   12304:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   12308:	e7a5      	b.n	12256 <cbvprintf+0x1f6>
	switch (conv->specifier) {
   1230a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1230e:	2b20      	cmp	r3, #32
   12310:	d86f      	bhi.n	123f2 <cbvprintf+0x392>
   12312:	a101      	add	r1, pc, #4	; (adr r1, 12318 <cbvprintf+0x2b8>)
   12314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   12318:	000123cb 	.word	0x000123cb
   1231c:	000123f3 	.word	0x000123f3
   12320:	000123f3 	.word	0x000123f3
   12324:	000123f3 	.word	0x000123f3
   12328:	000123f3 	.word	0x000123f3
   1232c:	000123f3 	.word	0x000123f3
   12330:	000123f3 	.word	0x000123f3
   12334:	000123f3 	.word	0x000123f3
   12338:	000123f3 	.word	0x000123f3
   1233c:	0001227b 	.word	0x0001227b
   12340:	000123f3 	.word	0x000123f3
   12344:	000123cb 	.word	0x000123cb
   12348:	0001239d 	.word	0x0001239d
   1234c:	0001227b 	.word	0x0001227b
   12350:	0001227b 	.word	0x0001227b
   12354:	0001227b 	.word	0x0001227b
   12358:	000123f3 	.word	0x000123f3
   1235c:	0001239d 	.word	0x0001239d
   12360:	000123f3 	.word	0x000123f3
   12364:	000123f3 	.word	0x000123f3
   12368:	000123f3 	.word	0x000123f3
   1236c:	000123f3 	.word	0x000123f3
   12370:	00012401 	.word	0x00012401
   12374:	000123cb 	.word	0x000123cb
   12378:	00012425 	.word	0x00012425
   1237c:	000123f3 	.word	0x000123f3
   12380:	000123f3 	.word	0x000123f3
   12384:	00012425 	.word	0x00012425
   12388:	000123f3 	.word	0x000123f3
   1238c:	000123cb 	.word	0x000123cb
   12390:	000123f3 	.word	0x000123f3
   12394:	000123f3 	.word	0x000123f3
   12398:	000123cb 	.word	0x000123cb
		conv->specifier_cat = SPECIFIER_SINT;
   1239c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   123a0:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   123a2:	f361 0302 	bfi	r3, r1, #0, #3
   123a6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   123aa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   123ae:	f003 0378 	and.w	r3, r3, #120	; 0x78
   123b2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   123b4:	bf02      	ittt	eq
   123b6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   123ba:	f041 0101 	orreq.w	r1, r1, #1
   123be:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   123c2:	2a63      	cmp	r2, #99	; 0x63
   123c4:	d005      	beq.n	123d2 <cbvprintf+0x372>
	bool unsupported = false;
   123c6:	2300      	movs	r3, #0
   123c8:	e006      	b.n	123d8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
   123ca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   123ce:	2102      	movs	r1, #2
   123d0:	e7e7      	b.n	123a2 <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
   123d2:	3b00      	subs	r3, #0
   123d4:	bf18      	it	ne
   123d6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   123d8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   123dc:	f3c2 0140 	ubfx	r1, r2, #1, #1
   123e0:	430b      	orrs	r3, r1
   123e2:	f363 0241 	bfi	r2, r3, #1, #1
   123e6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   123ea:	e6b7      	b.n	1215c <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
   123ec:	f013 0f38 	tst.w	r3, #56	; 0x38
   123f0:	d0e9      	beq.n	123c6 <cbvprintf+0x366>
			conv->invalid = true;
   123f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   123f6:	f043 0301 	orr.w	r3, r3, #1
   123fa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   123fe:	e7e2      	b.n	123c6 <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
   12400:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12404:	2203      	movs	r2, #3
   12406:	f362 0302 	bfi	r3, r2, #0, #3
   1240a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1240e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12412:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12416:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1241a:	f1dc 0300 	rsbs	r3, ip, #0
   1241e:	eb43 030c 	adc.w	r3, r3, ip
   12422:	e7d9      	b.n	123d8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   12424:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12428:	2203      	movs	r2, #3
   1242a:	f362 0302 	bfi	r3, r2, #0, #3
   1242e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   12432:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12436:	f013 0f78 	tst.w	r3, #120	; 0x78
   1243a:	bf14      	ite	ne
   1243c:	2301      	movne	r3, #1
   1243e:	2300      	moveq	r3, #0
   12440:	e7ca      	b.n	123d8 <cbvprintf+0x378>
			unsupported = true;
   12442:	2301      	movs	r3, #1
   12444:	e7c8      	b.n	123d8 <cbvprintf+0x378>
		} else if (conv->width_present) {
   12446:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1244a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1244c:	bfb4      	ite	lt
   1244e:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
   12452:	f04f 3bff 	movge.w	fp, #4294967295
   12456:	e693      	b.n	12180 <cbvprintf+0x120>
		} else if (conv->prec_present) {
   12458:	0799      	lsls	r1, r3, #30
   1245a:	f57f aea0 	bpl.w	1219e <cbvprintf+0x13e>
			precision = conv->prec_value;
   1245e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   12462:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   12466:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12468:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
   1246c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   12470:	f003 0207 	and.w	r2, r3, #7
   12474:	2a04      	cmp	r2, #4
   12476:	d109      	bne.n	1248c <cbvprintf+0x42c>
		    && !conv->prec_present) {
   12478:	078a      	lsls	r2, r1, #30
   1247a:	d407      	bmi.n	1248c <cbvprintf+0x42c>
			if (conv->specifier_a) {
   1247c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
   12480:	2a00      	cmp	r2, #0
   12482:	bfb4      	ite	lt
   12484:	f04f 080d 	movlt.w	r8, #13
   12488:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
   1248c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12490:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12492:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12496:	d137      	bne.n	12508 <cbvprintf+0x4a8>
			switch (length_mod) {
   12498:	1ecb      	subs	r3, r1, #3
   1249a:	2b04      	cmp	r3, #4
   1249c:	d821      	bhi.n	124e2 <cbvprintf+0x482>
   1249e:	e8df f003 	tbb	[pc, r3]
   124a2:	0903      	.short	0x0903
   124a4:	2009      	.short	0x2009
   124a6:	20          	.byte	0x20
   124a7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   124a8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   124ac:	17da      	asrs	r2, r3, #31
   124ae:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   124b2:	e006      	b.n	124c2 <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
   124b4:	3407      	adds	r4, #7
   124b6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   124ba:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   124be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   124c2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   124c6:	07bb      	lsls	r3, r7, #30
   124c8:	d056      	beq.n	12578 <cbvprintf+0x518>
			OUTS(sp, fp);
   124ca:	9b02      	ldr	r3, [sp, #8]
   124cc:	462a      	mov	r2, r5
   124ce:	4651      	mov	r1, sl
   124d0:	4648      	mov	r0, r9
   124d2:	f00d fb13 	bl	1fafc <outs>
   124d6:	2800      	cmp	r0, #0
   124d8:	f2c0 8394 	blt.w	12c04 <cbvprintf+0xba4>
   124dc:	4406      	add	r6, r0
			while (pad_len-- > 0) {
   124de:	9d02      	ldr	r5, [sp, #8]
   124e0:	e5c6      	b.n	12070 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   124e2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   124e6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   124e8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   124ec:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   124f0:	d105      	bne.n	124fe <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
   124f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   124f6:	930c      	str	r3, [sp, #48]	; 0x30
   124f8:	2300      	movs	r3, #0
   124fa:	930d      	str	r3, [sp, #52]	; 0x34
   124fc:	e7e1      	b.n	124c2 <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
   124fe:	2902      	cmp	r1, #2
   12500:	d1df      	bne.n	124c2 <cbvprintf+0x462>
				value->sint = (short)value->sint;
   12502:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   12506:	e7d1      	b.n	124ac <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12508:	2b02      	cmp	r3, #2
   1250a:	d123      	bne.n	12554 <cbvprintf+0x4f4>
			switch (length_mod) {
   1250c:	1ecb      	subs	r3, r1, #3
   1250e:	2b04      	cmp	r3, #4
   12510:	d813      	bhi.n	1253a <cbvprintf+0x4da>
   12512:	e8df f003 	tbb	[pc, r3]
   12516:	0a03      	.short	0x0a03
   12518:	120a      	.short	0x120a
   1251a:	12          	.byte	0x12
   1251b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1251c:	6822      	ldr	r2, [r4, #0]
   1251e:	920c      	str	r2, [sp, #48]	; 0x30
   12520:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   12522:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   12524:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   12526:	4604      	mov	r4, r0
   12528:	e7cb      	b.n	124c2 <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
   1252a:	1de0      	adds	r0, r4, #7
   1252c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   12530:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   12534:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   12538:	e7f5      	b.n	12526 <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
   1253a:	f854 3b04 	ldr.w	r3, [r4], #4
   1253e:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   12540:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   12542:	f04f 0300 	mov.w	r3, #0
   12546:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   12548:	d0d3      	beq.n	124f2 <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
   1254a:	2902      	cmp	r1, #2
   1254c:	d1b9      	bne.n	124c2 <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
   1254e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12552:	e7d0      	b.n	124f6 <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
   12554:	2b04      	cmp	r3, #4
   12556:	d109      	bne.n	1256c <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
   12558:	1de3      	adds	r3, r4, #7
   1255a:	f023 0307 	bic.w	r3, r3, #7
   1255e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   12562:	e9d3 2300 	ldrd	r2, r3, [r3]
   12566:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1256a:	e7aa      	b.n	124c2 <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1256c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1256e:	bf04      	itt	eq
   12570:	f854 3b04 	ldreq.w	r3, [r4], #4
   12574:	930c      	streq	r3, [sp, #48]	; 0x30
   12576:	e7a4      	b.n	124c2 <cbvprintf+0x462>
		switch (conv->specifier) {
   12578:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1257c:	2a78      	cmp	r2, #120	; 0x78
   1257e:	d8ae      	bhi.n	124de <cbvprintf+0x47e>
   12580:	2a57      	cmp	r2, #87	; 0x57
   12582:	f200 808c 	bhi.w	1269e <cbvprintf+0x63e>
   12586:	2a25      	cmp	r2, #37	; 0x25
   12588:	f000 80d4 	beq.w	12734 <cbvprintf+0x6d4>
   1258c:	2a24      	cmp	r2, #36	; 0x24
   1258e:	d9a6      	bls.n	124de <cbvprintf+0x47e>
   12590:	2a41      	cmp	r2, #65	; 0x41
   12592:	d003      	beq.n	1259c <cbvprintf+0x53c>
   12594:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   12598:	2b02      	cmp	r3, #2
   1259a:	d8a0      	bhi.n	124de <cbvprintf+0x47e>
	} u = {
   1259c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
   125a0:	2b00      	cmp	r3, #0
   125a2:	f2c0 81b7 	blt.w	12914 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
   125a6:	0738      	lsls	r0, r7, #28
   125a8:	f100 81b6 	bmi.w	12918 <cbvprintf+0x8b8>
		*sign = ' ';
   125ac:	f017 0710 	ands.w	r7, r7, #16
   125b0:	bf18      	it	ne
   125b2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   125b4:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   125b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   125bc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   125c0:	2d00      	cmp	r5, #0
   125c2:	f040 81ab 	bne.w	1291c <cbvprintf+0x8bc>
   125c6:	ea51 0003 	orrs.w	r0, r1, r3
   125ca:	bf14      	ite	ne
   125cc:	2001      	movne	r0, #1
   125ce:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
   125d0:	02db      	lsls	r3, r3, #11
   125d2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   125d6:	02c9      	lsls	r1, r1, #11
		c = 'f';
   125d8:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
   125da:	ea45 0e01 	orr.w	lr, r5, r1
   125de:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
   125e2:	bf08      	it	eq
   125e4:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
   125e6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   125ea:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   125ee:	f000 8203 	beq.w	129f8 <cbvprintf+0x998>
		if (is_subnormal) {
   125f2:	2800      	cmp	r0, #0
   125f4:	f040 81cb 	bne.w	1298e <cbvprintf+0x92e>
		fract |= BIT_63;
   125f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   125fc:	f04f 0c00 	mov.w	ip, #0
   12600:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   12604:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
   12608:	9109      	str	r1, [sp, #36]	; 0x24
   1260a:	4663      	mov	r3, ip
		fract *= 5U;
   1260c:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
   12610:	f115 0f02 	cmn.w	r5, #2
   12614:	f2c0 81c2 	blt.w	1299c <cbvprintf+0x93c>
   12618:	f1bc 0f00 	cmp.w	ip, #0
   1261c:	d001      	beq.n	12622 <cbvprintf+0x5c2>
   1261e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
   12622:	2d00      	cmp	r5, #0
		fract += 2;
   12624:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
   12628:	f300 81cd 	bgt.w	129c6 <cbvprintf+0x966>
	fract >>= (4 - expo);
   1262c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1262e:	9908      	ldr	r1, [sp, #32]
   12630:	f1c5 0c04 	rsb	ip, r5, #4
   12634:	351c      	adds	r5, #28
   12636:	fa00 f505 	lsl.w	r5, r0, r5
   1263a:	f1ac 0e20 	sub.w	lr, ip, #32
   1263e:	fa21 f10c 	lsr.w	r1, r1, ip
   12642:	fa20 fe0e 	lsr.w	lr, r0, lr
   12646:	4329      	orrs	r1, r5
   12648:	ea41 010e 	orr.w	r1, r1, lr
   1264c:	fa20 f00c 	lsr.w	r0, r0, ip
   12650:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   12654:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   12658:	2947      	cmp	r1, #71	; 0x47
   1265a:	f040 81d4 	bne.w	12a06 <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
   1265e:	1cdd      	adds	r5, r3, #3
   12660:	db02      	blt.n	12668 <cbvprintf+0x608>
   12662:	4598      	cmp	r8, r3
   12664:	f280 81cb 	bge.w	129fe <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
   12668:	3a02      	subs	r2, #2
			if (precision > 0) {
   1266a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
   1266e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   12670:	dd01      	ble.n	12676 <cbvprintf+0x616>
				precision--;
   12672:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   12676:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1267a:	0688      	lsls	r0, r1, #26
   1267c:	f100 81c3 	bmi.w	12a06 <cbvprintf+0x9a6>
   12680:	f1b8 0f00 	cmp.w	r8, #0
   12684:	bfd4      	ite	le
   12686:	2100      	movle	r1, #0
   12688:	2101      	movgt	r1, #1
	if (c == 'f') {
   1268a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1268c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
   1268e:	f040 81bc 	bne.w	12a0a <cbvprintf+0x9aa>
		if (decimals < 0) {
   12692:	eb13 0508 	adds.w	r5, r3, r8
   12696:	f140 81ba 	bpl.w	12a0e <cbvprintf+0x9ae>
			decimals = 0;
   1269a:	2500      	movs	r5, #0
   1269c:	e1ba      	b.n	12a14 <cbvprintf+0x9b4>
		switch (conv->specifier) {
   1269e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   126a2:	2b20      	cmp	r3, #32
   126a4:	f63f af1b 	bhi.w	124de <cbvprintf+0x47e>
   126a8:	a001      	add	r0, pc, #4	; (adr r0, 126b0 <cbvprintf+0x650>)
   126aa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   126ae:	bf00      	nop
   126b0:	000128b7 	.word	0x000128b7
   126b4:	000124df 	.word	0x000124df
   126b8:	000124df 	.word	0x000124df
   126bc:	000124df 	.word	0x000124df
   126c0:	000124df 	.word	0x000124df
   126c4:	000124df 	.word	0x000124df
   126c8:	000124df 	.word	0x000124df
   126cc:	000124df 	.word	0x000124df
   126d0:	000124df 	.word	0x000124df
   126d4:	0001259d 	.word	0x0001259d
   126d8:	000124df 	.word	0x000124df
   126dc:	00012761 	.word	0x00012761
   126e0:	00012857 	.word	0x00012857
   126e4:	0001259d 	.word	0x0001259d
   126e8:	0001259d 	.word	0x0001259d
   126ec:	0001259d 	.word	0x0001259d
   126f0:	000124df 	.word	0x000124df
   126f4:	00012857 	.word	0x00012857
   126f8:	000124df 	.word	0x000124df
   126fc:	000124df 	.word	0x000124df
   12700:	000124df 	.word	0x000124df
   12704:	000124df 	.word	0x000124df
   12708:	000128ed 	.word	0x000128ed
   1270c:	000128b7 	.word	0x000128b7
   12710:	000128bb 	.word	0x000128bb
   12714:	000124df 	.word	0x000124df
   12718:	000124df 	.word	0x000124df
   1271c:	0001273b 	.word	0x0001273b
   12720:	000124df 	.word	0x000124df
   12724:	000128b7 	.word	0x000128b7
   12728:	000124df 	.word	0x000124df
   1272c:	000124df 	.word	0x000124df
   12730:	000128b7 	.word	0x000128b7
			OUTC('%');
   12734:	4651      	mov	r1, sl
   12736:	4610      	mov	r0, r2
   12738:	e4a4      	b.n	12084 <cbvprintf+0x24>
			if (precision >= 0) {
   1273a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1273e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
   12740:	db09      	blt.n	12756 <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
   12742:	4641      	mov	r1, r8
   12744:	4610      	mov	r0, r2
   12746:	9203      	str	r2, [sp, #12]
   12748:	f010 fe45 	bl	233d6 <strnlen>
				len = strlen(bps);
   1274c:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
   1274e:	2700      	movs	r7, #0
			bpe = bps + len;
   12750:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
   12752:	b962      	cbnz	r2, 1276e <cbvprintf+0x70e>
   12754:	e6c3      	b.n	124de <cbvprintf+0x47e>
				len = strlen(bps);
   12756:	4610      	mov	r0, r2
   12758:	9203      	str	r2, [sp, #12]
   1275a:	f7fa f946 	bl	c9ea <strlen>
   1275e:	e7f5      	b.n	1274c <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12762:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
   12766:	2700      	movs	r7, #0
			bpe = buf + 1;
   12768:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
   1276c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
   1276e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
   12770:	b107      	cbz	r7, 12774 <cbvprintf+0x714>
			nj_len += 1U;
   12772:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12774:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   12778:	06c1      	lsls	r1, r0, #27
   1277a:	f140 8237 	bpl.w	12bec <cbvprintf+0xb8c>
			nj_len += 2U;
   1277e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   12780:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
   12782:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   12784:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12786:	bf44      	itt	mi
   12788:	9910      	ldrmi	r1, [sp, #64]	; 0x40
   1278a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
   1278c:	f1bb 0f00 	cmp.w	fp, #0
   12790:	dd23      	ble.n	127da <cbvprintf+0x77a>
			width -= (int)nj_len;
   12792:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
   12796:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1279a:	0759      	lsls	r1, r3, #29
   1279c:	f3c3 0880 	ubfx	r8, r3, #2, #1
   127a0:	d41b      	bmi.n	127da <cbvprintf+0x77a>
				if (conv->flag_zero) {
   127a2:	0658      	lsls	r0, r3, #25
   127a4:	f140 8236 	bpl.w	12c14 <cbvprintf+0xbb4>
					if (sign != 0) {
   127a8:	2f00      	cmp	r7, #0
   127aa:	f000 8236 	beq.w	12c1a <cbvprintf+0xbba>
						OUTC(sign);
   127ae:	4651      	mov	r1, sl
   127b0:	4638      	mov	r0, r7
   127b2:	9203      	str	r2, [sp, #12]
   127b4:	47c8      	blx	r9
   127b6:	2800      	cmp	r0, #0
   127b8:	f2c0 8224 	blt.w	12c04 <cbvprintf+0xba4>
   127bc:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
   127be:	4647      	mov	r7, r8
						OUTC(sign);
   127c0:	3601      	adds	r6, #1
					pad = '0';
   127c2:	f04f 0830 	mov.w	r8, #48	; 0x30
   127c6:	445e      	add	r6, fp
   127c8:	465b      	mov	r3, fp
				while (width-- > 0) {
   127ca:	2b00      	cmp	r3, #0
   127cc:	eba6 000b 	sub.w	r0, r6, fp
   127d0:	f10b 3bff 	add.w	fp, fp, #4294967295
   127d4:	f300 820e 	bgt.w	12bf4 <cbvprintf+0xb94>
   127d8:	4606      	mov	r6, r0
		if (sign != 0) {
   127da:	b147      	cbz	r7, 127ee <cbvprintf+0x78e>
			OUTC(sign);
   127dc:	4651      	mov	r1, sl
   127de:	4638      	mov	r0, r7
   127e0:	9203      	str	r2, [sp, #12]
   127e2:	47c8      	blx	r9
   127e4:	2800      	cmp	r0, #0
   127e6:	f2c0 820d 	blt.w	12c04 <cbvprintf+0xba4>
   127ea:	9a03      	ldr	r2, [sp, #12]
   127ec:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   127ee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   127f2:	0659      	lsls	r1, r3, #25
   127f4:	f140 8265 	bpl.w	12cc2 <cbvprintf+0xc62>
			if (conv->specifier_a) {
   127f8:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
   127fc:	2b00      	cmp	r3, #0
   127fe:	eba6 0602 	sub.w	r6, r6, r2
   12802:	f280 8219 	bge.w	12c38 <cbvprintf+0xbd8>
   12806:	4617      	mov	r7, r2
   12808:	46b8      	mov	r8, r7
   1280a:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
   1280c:	f817 0b01 	ldrb.w	r0, [r7], #1
   12810:	2870      	cmp	r0, #112	; 0x70
   12812:	f040 8205 	bne.w	12c20 <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
   12816:	9f10      	ldr	r7, [sp, #64]	; 0x40
   12818:	461e      	mov	r6, r3
   1281a:	441f      	add	r7, r3
   1281c:	1bbb      	subs	r3, r7, r6
   1281e:	2b00      	cmp	r3, #0
   12820:	f300 8248 	bgt.w	12cb4 <cbvprintf+0xc54>
			OUTS(cp, bpe);
   12824:	462b      	mov	r3, r5
   12826:	4642      	mov	r2, r8
			OUTS(bps, bpe);
   12828:	4651      	mov	r1, sl
   1282a:	4648      	mov	r0, r9
   1282c:	f00d f966 	bl	1fafc <outs>
   12830:	2800      	cmp	r0, #0
   12832:	f2c0 81e7 	blt.w	12c04 <cbvprintf+0xba4>
   12836:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   12838:	4606      	mov	r6, r0
   1283a:	4483      	add	fp, r0
		while (width > 0) {
   1283c:	ebab 0306 	sub.w	r3, fp, r6
   12840:	2b00      	cmp	r3, #0
   12842:	f77f ae4c 	ble.w	124de <cbvprintf+0x47e>
			OUTC(' ');
   12846:	4651      	mov	r1, sl
   12848:	2020      	movs	r0, #32
   1284a:	47c8      	blx	r9
   1284c:	2800      	cmp	r0, #0
   1284e:	f2c0 81d9 	blt.w	12c04 <cbvprintf+0xba4>
   12852:	3601      	adds	r6, #1
			--width;
   12854:	e7f2      	b.n	1283c <cbvprintf+0x7dc>
			if (conv->flag_plus) {
   12856:	073d      	lsls	r5, r7, #28
   12858:	d42b      	bmi.n	128b2 <cbvprintf+0x852>
				sign = ' ';
   1285a:	f017 0710 	ands.w	r7, r7, #16
   1285e:	bf18      	it	ne
   12860:	2720      	movne	r7, #32
			sint = value->sint;
   12862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   12866:	2b00      	cmp	r3, #0
   12868:	da05      	bge.n	12876 <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
   1286a:	4252      	negs	r2, r2
   1286c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12870:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   12874:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   12876:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1287a:	9300      	str	r3, [sp, #0]
   1287c:	aa0e      	add	r2, sp, #56	; 0x38
   1287e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   12882:	ab13      	add	r3, sp, #76	; 0x4c
   12884:	f7ff fba0 	bl	11fc8 <encode_uint>
   12888:	4602      	mov	r2, r0
			if (precision >= 0) {
   1288a:	f1b8 0f00 	cmp.w	r8, #0
   1288e:	f10d 0565 	add.w	r5, sp, #101	; 0x65
   12892:	f6ff af5e 	blt.w	12752 <cbvprintf+0x6f2>
				conv->flag_zero = false;
   12896:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1289a:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
   1289c:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   128a0:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   128a2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   128a6:	f67f af54 	bls.w	12752 <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
   128aa:	eba8 0303 	sub.w	r3, r8, r3
   128ae:	930f      	str	r3, [sp, #60]	; 0x3c
   128b0:	e74f      	b.n	12752 <cbvprintf+0x6f2>
				sign = '+';
   128b2:	272b      	movs	r7, #43	; 0x2b
   128b4:	e7d5      	b.n	12862 <cbvprintf+0x802>
		switch (conv->specifier) {
   128b6:	2700      	movs	r7, #0
   128b8:	e7dd      	b.n	12876 <cbvprintf+0x816>
			if (value->ptr != NULL) {
   128ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   128bc:	2800      	cmp	r0, #0
   128be:	f000 8191 	beq.w	12be4 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   128c2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   128c6:	9300      	str	r3, [sp, #0]
   128c8:	aa0e      	add	r2, sp, #56	; 0x38
   128ca:	ab13      	add	r3, sp, #76	; 0x4c
   128cc:	2100      	movs	r1, #0
   128ce:	f7ff fb7b 	bl	11fc8 <encode_uint>
				conv->altform_0c = true;
   128d2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   128d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   128da:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   128de:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   128e2:	4602      	mov	r2, r0
				conv->altform_0c = true;
   128e4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   128e8:	2700      	movs	r7, #0
				goto prec_int_pad0;
   128ea:	e7ce      	b.n	1288a <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
   128ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   128ee:	2907      	cmp	r1, #7
   128f0:	f63f adf5 	bhi.w	124de <cbvprintf+0x47e>
   128f4:	e8df f001 	tbb	[pc, r1]
   128f8:	0c06040c 	.word	0x0c06040c
   128fc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12900:	701e      	strb	r6, [r3, #0]
		break;
   12902:	e5ec      	b.n	124de <cbvprintf+0x47e>
		*(short *)dp = (short)count;
   12904:	801e      	strh	r6, [r3, #0]
		break;
   12906:	e5ea      	b.n	124de <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
   12908:	17f2      	asrs	r2, r6, #31
   1290a:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   1290e:	e5e6      	b.n	124de <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12910:	601e      	str	r6, [r3, #0]
		break;
   12912:	e5e4      	b.n	124de <cbvprintf+0x47e>
		*sign = '-';
   12914:	272d      	movs	r7, #45	; 0x2d
   12916:	e64d      	b.n	125b4 <cbvprintf+0x554>
		*sign = '+';
   12918:	272b      	movs	r7, #43	; 0x2b
   1291a:	e64b      	b.n	125b4 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1291c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   12920:	4285      	cmp	r5, r0
   12922:	d131      	bne.n	12988 <cbvprintf+0x928>
			if (isupper((int)c)) {
   12924:	3201      	adds	r2, #1
   12926:	48b9      	ldr	r0, [pc, #740]	; (12c0c <cbvprintf+0xbac>)
   12928:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
   1292a:	430b      	orrs	r3, r1
   1292c:	5c12      	ldrb	r2, [r2, r0]
   1292e:	f002 0203 	and.w	r2, r2, #3
   12932:	d11b      	bne.n	1296c <cbvprintf+0x90c>
			if (isupper((int)c)) {
   12934:	2a01      	cmp	r2, #1
   12936:	d111      	bne.n	1295c <cbvprintf+0x8fc>
				*buf++ = 'I';
   12938:	2349      	movs	r3, #73	; 0x49
   1293a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
   1293e:	234e      	movs	r3, #78	; 0x4e
   12940:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
   12944:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   12946:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
   1294a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1294e:	f36f 1386 	bfc	r3, #6, #1
   12952:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
   12956:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
   1295a:	e707      	b.n	1276c <cbvprintf+0x70c>
				*buf++ = 'i';
   1295c:	2369      	movs	r3, #105	; 0x69
   1295e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   12962:	236e      	movs	r3, #110	; 0x6e
   12964:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
   12968:	2366      	movs	r3, #102	; 0x66
   1296a:	e7ec      	b.n	12946 <cbvprintf+0x8e6>
			if (isupper((int)c)) {
   1296c:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   1296e:	bf07      	ittee	eq
   12970:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   12972:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   12974:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   12976:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   12978:	bf0c      	ite	eq
   1297a:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1297e:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
   12982:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
   12986:	e7de      	b.n	12946 <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
   12988:	2000      	movs	r0, #0
   1298a:	e621      	b.n	125d0 <cbvprintf+0x570>
				expo--;
   1298c:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1298e:	1849      	adds	r1, r1, r1
   12990:	415b      	adcs	r3, r3
   12992:	2b00      	cmp	r3, #0
   12994:	dafa      	bge.n	1298c <cbvprintf+0x92c>
   12996:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1299a:	e62d      	b.n	125f8 <cbvprintf+0x598>
			fract >>= 1;
   1299c:	0840      	lsrs	r0, r0, #1
   1299e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   129a2:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   129a4:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
   129a8:	46ac      	mov	ip, r5
			expo++;
   129aa:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   129ae:	d2f5      	bcs.n	1299c <cbvprintf+0x93c>
		fract *= 5U;
   129b0:	fb0e f501 	mul.w	r5, lr, r1
   129b4:	fba0 010e 	umull	r0, r1, r0, lr
   129b8:	4429      	add	r1, r5
		decexp--;
   129ba:	3b01      	subs	r3, #1
		expo++;
   129bc:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
   129c0:	f04f 0c01 	mov.w	ip, #1
   129c4:	e624      	b.n	12610 <cbvprintf+0x5b0>
		fract += 2;
   129c6:	3102      	adds	r1, #2
   129c8:	f140 0000 	adc.w	r0, r0, #0
   129cc:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
   129d0:	a808      	add	r0, sp, #32
   129d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   129d6:	f00d f862 	bl	1fa9e <_ldiv5>
		decexp++;
   129da:	9b04      	ldr	r3, [sp, #16]
   129dc:	9a03      	ldr	r2, [sp, #12]
   129de:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
   129e2:	3d01      	subs	r5, #1
		decexp++;
   129e4:	3301      	adds	r3, #1
			fract <<= 1;
   129e6:	1849      	adds	r1, r1, r1
   129e8:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
   129ea:	2800      	cmp	r0, #0
			expo--;
   129ec:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
   129f0:	daf9      	bge.n	129e6 <cbvprintf+0x986>
   129f2:	e9cd 1008 	strd	r1, r0, [sp, #32]
   129f6:	e614      	b.n	12622 <cbvprintf+0x5c2>
   129f8:	2300      	movs	r3, #0
   129fa:	461d      	mov	r5, r3
   129fc:	e616      	b.n	1262c <cbvprintf+0x5cc>
			precision -= decexp;
   129fe:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
   12a02:	2266      	movs	r2, #102	; 0x66
   12a04:	e637      	b.n	12676 <cbvprintf+0x616>
	bool prune_zero = false;
   12a06:	2100      	movs	r1, #0
   12a08:	e63f      	b.n	1268a <cbvprintf+0x62a>
		decimals = precision + 1;
   12a0a:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
   12a0e:	2d10      	cmp	r5, #16
   12a10:	bfa8      	it	ge
   12a12:	2510      	movge	r5, #16
   12a14:	2110      	movs	r1, #16
   12a16:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
   12a18:	2000      	movs	r0, #0
   12a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   12a1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
   12a22:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
   12a26:	b9a5      	cbnz	r5, 12a52 <cbvprintf+0x9f2>
	fract += round;
   12a28:	9d08      	ldr	r5, [sp, #32]
   12a2a:	1949      	adds	r1, r1, r5
   12a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   12a2e:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
   12a32:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   12a36:	d21b      	bcs.n	12a70 <cbvprintf+0xa10>
	fract += round;
   12a38:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
   12a3c:	2a66      	cmp	r2, #102	; 0x66
   12a3e:	f040 8099 	bne.w	12b74 <cbvprintf+0xb14>
		if (decexp > 0) {
   12a42:	2b00      	cmp	r3, #0
   12a44:	dc23      	bgt.n	12a8e <cbvprintf+0xa2e>
			*buf++ = '0';
   12a46:	2130      	movs	r1, #48	; 0x30
   12a48:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
   12a4c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   12a50:	e02f      	b.n	12ab2 <cbvprintf+0xa52>
	*v >>= 1;
   12a52:	0849      	lsrs	r1, r1, #1
   12a54:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   12a58:	0840      	lsrs	r0, r0, #1
   12a5a:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
   12a5e:	a80a      	add	r0, sp, #40	; 0x28
   12a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12a64:	3d01      	subs	r5, #1
   12a66:	f00d f81a 	bl	1fa9e <_ldiv5>
   12a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
   12a6e:	e7d8      	b.n	12a22 <cbvprintf+0x9c2>
	*v >>= 1;
   12a70:	0849      	lsrs	r1, r1, #1
   12a72:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
   12a76:	a808      	add	r0, sp, #32
	*v >>= 1;
   12a78:	086d      	lsrs	r5, r5, #1
   12a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12a7e:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
   12a82:	f00d f80c 	bl	1fa9e <_ldiv5>
		decexp++;
   12a86:	9b05      	ldr	r3, [sp, #20]
   12a88:	9a04      	ldr	r2, [sp, #16]
   12a8a:	3301      	adds	r3, #1
   12a8c:	e7d6      	b.n	12a3c <cbvprintf+0x9dc>
	char *buf = bps;
   12a8e:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
   12a90:	9907      	ldr	r1, [sp, #28]
   12a92:	2900      	cmp	r1, #0
   12a94:	dd0b      	ble.n	12aae <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
   12a96:	a907      	add	r1, sp, #28
   12a98:	a808      	add	r0, sp, #32
   12a9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12a9e:	f00d f816 	bl	1face <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   12aa2:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
   12aa4:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
   12aa8:	3b01      	subs	r3, #1
   12aaa:	9a04      	ldr	r2, [sp, #16]
   12aac:	d1f0      	bne.n	12a90 <cbvprintf+0xa30>
			conv->pad0_value = decexp;
   12aae:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
   12ab0:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
   12ab2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   12ab6:	0689      	lsls	r1, r1, #26
   12ab8:	d402      	bmi.n	12ac0 <cbvprintf+0xa60>
   12aba:	f1b8 0f00 	cmp.w	r8, #0
   12abe:	dd1d      	ble.n	12afc <cbvprintf+0xa9c>
			*buf++ = '.';
   12ac0:	212e      	movs	r1, #46	; 0x2e
   12ac2:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
   12ac6:	b19b      	cbz	r3, 12af0 <cbvprintf+0xa90>
   12ac8:	f1b8 0f00 	cmp.w	r8, #0
   12acc:	dd16      	ble.n	12afc <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
   12ace:	4259      	negs	r1, r3
   12ad0:	4541      	cmp	r1, r8
   12ad2:	bfa8      	it	ge
   12ad4:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
   12ad6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
   12ada:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
   12adc:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
   12ade:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   12ae2:	bfd4      	ite	le
   12ae4:	2100      	movle	r1, #0
   12ae6:	2101      	movgt	r1, #1
   12ae8:	f361 1045 	bfi	r0, r1, #5, #1
   12aec:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
   12af0:	f1b8 0f00 	cmp.w	r8, #0
   12af4:	dd02      	ble.n	12afc <cbvprintf+0xa9c>
   12af6:	9907      	ldr	r1, [sp, #28]
   12af8:	2900      	cmp	r1, #0
   12afa:	dc56      	bgt.n	12baa <cbvprintf+0xb4a>
	if (prune_zero) {
   12afc:	9903      	ldr	r1, [sp, #12]
   12afe:	2900      	cmp	r1, #0
   12b00:	d163      	bne.n	12bca <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
   12b02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
   12b06:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   12b0a:	2945      	cmp	r1, #69	; 0x45
   12b0c:	d121      	bne.n	12b52 <cbvprintf+0xaf2>
		if (decexp < 0) {
   12b0e:	2b00      	cmp	r3, #0
		*buf++ = c;
   12b10:	4629      	mov	r1, r5
			decexp = -decexp;
   12b12:	bfb8      	it	lt
   12b14:	425b      	neglt	r3, r3
		*buf++ = c;
   12b16:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
   12b1a:	bfb4      	ite	lt
   12b1c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   12b1e:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
   12b20:	2b63      	cmp	r3, #99	; 0x63
   12b22:	706a      	strb	r2, [r5, #1]
   12b24:	dd09      	ble.n	12b3a <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
   12b26:	2064      	movs	r0, #100	; 0x64
   12b28:	fbb3 f2f0 	udiv	r2, r3, r0
   12b2c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
   12b30:	1ce9      	adds	r1, r5, #3
   12b32:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
   12b36:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   12b3a:	200a      	movs	r0, #10
   12b3c:	460d      	mov	r5, r1
   12b3e:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
   12b42:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   12b46:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   12b4a:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   12b4c:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
   12b50:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   12b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12b54:	2b00      	cmp	r3, #0
   12b56:	dc43      	bgt.n	12be0 <cbvprintf+0xb80>
   12b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	bfd4      	ite	le
   12b5e:	2300      	movle	r3, #0
   12b60:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   12b62:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   12b66:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   12b6a:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   12b6c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
   12b70:	702b      	strb	r3, [r5, #0]
	return bps;
   12b72:	e5fb      	b.n	1276c <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
   12b74:	a907      	add	r1, sp, #28
   12b76:	a808      	add	r0, sp, #32
   12b78:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12b7c:	f00c ffa7 	bl	1face <_get_digit>
		if (*buf++ != '0') {
   12b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
   12b84:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
   12b88:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
   12b8c:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   12b8e:	bf18      	it	ne
   12b90:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   12b94:	0688      	lsls	r0, r1, #26
   12b96:	d402      	bmi.n	12b9e <cbvprintf+0xb3e>
   12b98:	f1b8 0f00 	cmp.w	r8, #0
   12b9c:	dd12      	ble.n	12bc4 <cbvprintf+0xb64>
			*buf++ = '.';
   12b9e:	212e      	movs	r1, #46	; 0x2e
   12ba0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   12ba4:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
   12ba8:	e7a2      	b.n	12af0 <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
   12baa:	a907      	add	r1, sp, #28
   12bac:	a808      	add	r0, sp, #32
   12bae:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12bb2:	f00c ff8c 	bl	1face <_get_digit>
		precision--;
   12bb6:	f108 38ff 	add.w	r8, r8, #4294967295
   12bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
   12bbe:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
   12bc2:	e795      	b.n	12af0 <cbvprintf+0xa90>
		if (*buf++ != '0') {
   12bc4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   12bc8:	e798      	b.n	12afc <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
   12bca:	2100      	movs	r1, #0
   12bcc:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
   12bce:	4628      	mov	r0, r5
   12bd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   12bd4:	2930      	cmp	r1, #48	; 0x30
   12bd6:	d0fa      	beq.n	12bce <cbvprintf+0xb6e>
		if (*buf != '.') {
   12bd8:	292e      	cmp	r1, #46	; 0x2e
   12bda:	bf18      	it	ne
   12bdc:	4605      	movne	r5, r0
   12bde:	e792      	b.n	12b06 <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
   12be0:	2301      	movs	r3, #1
   12be2:	e7be      	b.n	12b62 <cbvprintf+0xb02>
			bpe = bps + 5;
   12be4:	4d0a      	ldr	r5, [pc, #40]	; (12c10 <cbvprintf+0xbb0>)
		char sign = 0;
   12be6:	4607      	mov	r7, r0
			bps = "(nil)";
   12be8:	1f6a      	subs	r2, r5, #5
   12bea:	e5c0      	b.n	1276e <cbvprintf+0x70e>
		} else if (conv->altform_0) {
   12bec:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
   12bee:	bf48      	it	mi
   12bf0:	3301      	addmi	r3, #1
   12bf2:	e5c5      	b.n	12780 <cbvprintf+0x720>
					OUTC(pad);
   12bf4:	4651      	mov	r1, sl
   12bf6:	4640      	mov	r0, r8
   12bf8:	9203      	str	r2, [sp, #12]
   12bfa:	47c8      	blx	r9
   12bfc:	2800      	cmp	r0, #0
   12bfe:	9a03      	ldr	r2, [sp, #12]
   12c00:	f6bf ade2 	bge.w	127c8 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
   12c04:	b01b      	add	sp, #108	; 0x6c
   12c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c0a:	bf00      	nop
   12c0c:	00024a0a 	.word	0x00024a0a
   12c10:	00024630 	.word	0x00024630
				char pad = ' ';
   12c14:	f04f 0820 	mov.w	r8, #32
   12c18:	e5d5      	b.n	127c6 <cbvprintf+0x766>
					pad = '0';
   12c1a:	f04f 0830 	mov.w	r8, #48	; 0x30
   12c1e:	e5d2      	b.n	127c6 <cbvprintf+0x766>
					OUTC(*cp++);
   12c20:	4651      	mov	r1, sl
   12c22:	47c8      	blx	r9
   12c24:	2800      	cmp	r0, #0
   12c26:	f6bf adef 	bge.w	12808 <cbvprintf+0x7a8>
   12c2a:	e7eb      	b.n	12c04 <cbvprintf+0xba4>
					OUTC(*cp++);
   12c2c:	4651      	mov	r1, sl
   12c2e:	9203      	str	r2, [sp, #12]
   12c30:	47c8      	blx	r9
   12c32:	2800      	cmp	r0, #0
   12c34:	9a03      	ldr	r2, [sp, #12]
   12c36:	dbe5      	blt.n	12c04 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
   12c38:	7810      	ldrb	r0, [r2, #0]
   12c3a:	4b37      	ldr	r3, [pc, #220]	; (12d18 <cbvprintf+0xcb8>)
   12c3c:	5cc3      	ldrb	r3, [r0, r3]
   12c3e:	075b      	lsls	r3, r3, #29
   12c40:	4617      	mov	r7, r2
   12c42:	eb06 0802 	add.w	r8, r6, r2
   12c46:	f102 0201 	add.w	r2, r2, #1
   12c4a:	d4ef      	bmi.n	12c2c <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
   12c4c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
   12c50:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
   12c52:	0699      	lsls	r1, r3, #26
   12c54:	d407      	bmi.n	12c66 <cbvprintf+0xc06>
   12c56:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
   12c58:	2e00      	cmp	r6, #0
   12c5a:	eba8 0206 	sub.w	r2, r8, r6
   12c5e:	f106 36ff 	add.w	r6, r6, #4294967295
   12c62:	dc0f      	bgt.n	12c84 <cbvprintf+0xc24>
   12c64:	4690      	mov	r8, r2
				if (*cp == '.') {
   12c66:	7838      	ldrb	r0, [r7, #0]
   12c68:	282e      	cmp	r0, #46	; 0x2e
   12c6a:	d108      	bne.n	12c7e <cbvprintf+0xc1e>
					OUTC(*cp++);
   12c6c:	4651      	mov	r1, sl
   12c6e:	47c8      	blx	r9
						OUTC('0');
   12c70:	2800      	cmp	r0, #0
   12c72:	dbc7      	blt.n	12c04 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
   12c74:	2e00      	cmp	r6, #0
						OUTC('0');
   12c76:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
   12c7a:	dc09      	bgt.n	12c90 <cbvprintf+0xc30>
					OUTC(*cp++);
   12c7c:	3701      	adds	r7, #1
   12c7e:	eba8 0607 	sub.w	r6, r8, r7
   12c82:	e00e      	b.n	12ca2 <cbvprintf+0xc42>
						OUTC('0');
   12c84:	4651      	mov	r1, sl
   12c86:	2030      	movs	r0, #48	; 0x30
   12c88:	47c8      	blx	r9
   12c8a:	2800      	cmp	r0, #0
   12c8c:	dae4      	bge.n	12c58 <cbvprintf+0xbf8>
   12c8e:	e7b9      	b.n	12c04 <cbvprintf+0xba4>
						OUTC('0');
   12c90:	4651      	mov	r1, sl
   12c92:	2030      	movs	r0, #48	; 0x30
   12c94:	47c8      	blx	r9
   12c96:	3e01      	subs	r6, #1
   12c98:	e7ea      	b.n	12c70 <cbvprintf+0xc10>
					OUTC(*cp++);
   12c9a:	4651      	mov	r1, sl
   12c9c:	47c8      	blx	r9
   12c9e:	2800      	cmp	r0, #0
   12ca0:	dbb0      	blt.n	12c04 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
   12ca2:	4a1d      	ldr	r2, [pc, #116]	; (12d18 <cbvprintf+0xcb8>)
   12ca4:	46b8      	mov	r8, r7
   12ca6:	19f3      	adds	r3, r6, r7
   12ca8:	f817 0b01 	ldrb.w	r0, [r7], #1
   12cac:	5c12      	ldrb	r2, [r2, r0]
   12cae:	0752      	lsls	r2, r2, #29
   12cb0:	d4f3      	bmi.n	12c9a <cbvprintf+0xc3a>
   12cb2:	e5b0      	b.n	12816 <cbvprintf+0x7b6>
				OUTC('0');
   12cb4:	4651      	mov	r1, sl
   12cb6:	2030      	movs	r0, #48	; 0x30
   12cb8:	47c8      	blx	r9
   12cba:	2800      	cmp	r0, #0
   12cbc:	dba2      	blt.n	12c04 <cbvprintf+0xba4>
   12cbe:	3601      	adds	r6, #1
   12cc0:	e5ac      	b.n	1281c <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
   12cc2:	06d8      	lsls	r0, r3, #27
   12cc4:	d401      	bmi.n	12cca <cbvprintf+0xc6a>
   12cc6:	0719      	lsls	r1, r3, #28
   12cc8:	d507      	bpl.n	12cda <cbvprintf+0xc7a>
				OUTC('0');
   12cca:	4651      	mov	r1, sl
   12ccc:	2030      	movs	r0, #48	; 0x30
   12cce:	9203      	str	r2, [sp, #12]
   12cd0:	47c8      	blx	r9
   12cd2:	2800      	cmp	r0, #0
   12cd4:	db96      	blt.n	12c04 <cbvprintf+0xba4>
   12cd6:	9a03      	ldr	r2, [sp, #12]
   12cd8:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   12cda:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12cde:	06db      	lsls	r3, r3, #27
   12ce0:	d508      	bpl.n	12cf4 <cbvprintf+0xc94>
				OUTC(conv->specifier);
   12ce2:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12ce6:	9203      	str	r2, [sp, #12]
   12ce8:	4651      	mov	r1, sl
   12cea:	47c8      	blx	r9
   12cec:	2800      	cmp	r0, #0
   12cee:	db89      	blt.n	12c04 <cbvprintf+0xba4>
   12cf0:	9a03      	ldr	r2, [sp, #12]
   12cf2:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   12cf4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   12cf6:	4437      	add	r7, r6
   12cf8:	1bbb      	subs	r3, r7, r6
   12cfa:	2b00      	cmp	r3, #0
   12cfc:	dc01      	bgt.n	12d02 <cbvprintf+0xca2>
			OUTS(bps, bpe);
   12cfe:	462b      	mov	r3, r5
   12d00:	e592      	b.n	12828 <cbvprintf+0x7c8>
				OUTC('0');
   12d02:	4651      	mov	r1, sl
   12d04:	2030      	movs	r0, #48	; 0x30
   12d06:	9203      	str	r2, [sp, #12]
   12d08:	47c8      	blx	r9
   12d0a:	2800      	cmp	r0, #0
   12d0c:	f6ff af7a 	blt.w	12c04 <cbvprintf+0xba4>
   12d10:	9a03      	ldr	r2, [sp, #12]
   12d12:	3601      	adds	r6, #1
   12d14:	e7f0      	b.n	12cf8 <cbvprintf+0xc98>
   12d16:	bf00      	nop
   12d18:	00024a0b 	.word	0x00024a0b

00012d1c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12d1c:	b508      	push	{r3, lr}
   12d1e:	f04f 0240 	mov.w	r2, #64	; 0x40
   12d22:	f3ef 8311 	mrs	r3, BASEPRI
   12d26:	f382 8812 	msr	BASEPRI_MAX, r2
   12d2a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12d2e:	f000 fea1 	bl	13a74 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12d32:	4803      	ldr	r0, [pc, #12]	; (12d40 <sys_reboot+0x24>)
   12d34:	f00c fc2b 	bl	1f58e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12d38:	f000 faa4 	bl	13284 <arch_cpu_idle>
   12d3c:	e7fc      	b.n	12d38 <sys_reboot+0x1c>
   12d3e:	bf00      	nop
   12d40:	00024631 	.word	0x00024631

00012d44 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   12d44:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   12d46:	4c08      	ldr	r4, [pc, #32]	; (12d68 <read_blvl+0x24>)
{
   12d48:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   12d4a:	7824      	ldrb	r4, [r4, #0]
   12d4c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   12d50:	2401      	movs	r4, #1
   12d52:	9402      	str	r4, [sp, #8]
   12d54:	f10d 0417 	add.w	r4, sp, #23
   12d58:	9401      	str	r4, [sp, #4]
   12d5a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   12d5e:	9400      	str	r4, [sp, #0]
   12d60:	f00e ff85 	bl	21c6e <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   12d64:	b006      	add	sp, #24
   12d66:	bd10      	pop	{r4, pc}
   12d68:	20000990 	.word	0x20000990

00012d6c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d70:	4605      	mov	r5, r0
   12d72:	f04f 0340 	mov.w	r3, #64	; 0x40
   12d76:	f3ef 8611 	mrs	r6, BASEPRI
   12d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   12d7e:	f3bf 8f6f 	isb	sy
	return list->head;
   12d82:	4b0e      	ldr	r3, [pc, #56]	; (12dbc <pm_state_notify+0x50>)
   12d84:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12d86:	b19c      	cbz	r4, 12db0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12d88:	4f0d      	ldr	r7, [pc, #52]	; (12dc0 <pm_state_notify+0x54>)
   12d8a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 12dc4 <pm_state_notify+0x58>
   12d8e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   12d92:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12d96:	2d00      	cmp	r5, #0
   12d98:	bf08      	it	eq
   12d9a:	4613      	moveq	r3, r2
		if (callback) {
   12d9c:	b12b      	cbz	r3, 12daa <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   12d9e:	f898 2014 	ldrb.w	r2, [r8, #20]
   12da2:	fb09 f202 	mul.w	r2, r9, r2
   12da6:	5cb8      	ldrb	r0, [r7, r2]
   12da8:	4798      	blx	r3
	return node->next;
   12daa:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12dac:	2c00      	cmp	r4, #0
   12dae:	d1f0      	bne.n	12d92 <pm_state_notify+0x26>
	__asm__ volatile(
   12db0:	f386 8811 	msr	BASEPRI, r6
   12db4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12dbc:	20001f0c 	.word	0x20001f0c
   12dc0:	20001f14 	.word	0x20001f14
   12dc4:	20002814 	.word	0x20002814

00012dc8 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12dc8:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   12dca:	2301      	movs	r3, #1
   12dcc:	f000 001f 	and.w	r0, r0, #31
   12dd0:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12dd4:	4b07      	ldr	r3, [pc, #28]	; (12df4 <atomic_clear_bit.constprop.0+0x2c>)
   12dd6:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12dda:	43c0      	mvns	r0, r0
   12ddc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12de0:	e853 2f00 	ldrex	r2, [r3]
   12de4:	4002      	ands	r2, r0
   12de6:	e843 2100 	strex	r1, r2, [r3]
   12dea:	2900      	cmp	r1, #0
   12dec:	d1f8      	bne.n	12de0 <atomic_clear_bit.constprop.0+0x18>
   12dee:	f3bf 8f5b 	dmb	ish
}
   12df2:	4770      	bx	lr
   12df4:	20001f20 	.word	0x20001f20

00012df8 <pm_system_resume>:

void pm_system_resume(void)
{
   12df8:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   12dfa:	4b1a      	ldr	r3, [pc, #104]	; (12e64 <pm_system_resume+0x6c>)
   12dfc:	7d1c      	ldrb	r4, [r3, #20]
   12dfe:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   12e02:	f004 031f 	and.w	r3, r4, #31
   12e06:	2201      	movs	r2, #1
   12e08:	409a      	lsls	r2, r3
   12e0a:	4b17      	ldr	r3, [pc, #92]	; (12e68 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12e0c:	0961      	lsrs	r1, r4, #5
   12e0e:	43d0      	mvns	r0, r2
   12e10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   12e14:	e853 1f00 	ldrex	r1, [r3]
   12e18:	ea01 0500 	and.w	r5, r1, r0
   12e1c:	e843 5c00 	strex	ip, r5, [r3]
   12e20:	f1bc 0f00 	cmp.w	ip, #0
   12e24:	d1f6      	bne.n	12e14 <pm_system_resume+0x1c>
   12e26:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12e2a:	4211      	tst	r1, r2
   12e2c:	d013      	beq.n	12e56 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   12e2e:	4b0f      	ldr	r3, [pc, #60]	; (12e6c <pm_system_resume+0x74>)
   12e30:	4d0f      	ldr	r5, [pc, #60]	; (12e70 <pm_system_resume+0x78>)
   12e32:	b18b      	cbz	r3, 12e58 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   12e34:	230c      	movs	r3, #12
   12e36:	4363      	muls	r3, r4
   12e38:	18ea      	adds	r2, r5, r3
   12e3a:	5ce8      	ldrb	r0, [r5, r3]
   12e3c:	7851      	ldrb	r1, [r2, #1]
   12e3e:	f00d f8ee 	bl	2001e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   12e42:	2000      	movs	r0, #0
   12e44:	f7ff ff92 	bl	12d6c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   12e48:	230c      	movs	r3, #12
   12e4a:	435c      	muls	r4, r3
   12e4c:	192a      	adds	r2, r5, r4
   12e4e:	2300      	movs	r3, #0
   12e50:	512b      	str	r3, [r5, r4]
   12e52:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   12e56:	bd38      	pop	{r3, r4, r5, pc}
   12e58:	f383 8811 	msr	BASEPRI, r3
   12e5c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12e60:	e7ef      	b.n	12e42 <pm_system_resume+0x4a>
   12e62:	bf00      	nop
   12e64:	20002814 	.word	0x20002814
   12e68:	20001f24 	.word	0x20001f24
   12e6c:	0002001f 	.word	0x0002001f
   12e70:	20001f14 	.word	0x20001f14

00012e74 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   12e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   12e78:	4b32      	ldr	r3, [pc, #200]	; (12f44 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e7a:	4a33      	ldr	r2, [pc, #204]	; (12f48 <pm_system_suspend+0xd4>)
   12e7c:	7d1c      	ldrb	r4, [r3, #20]
   12e7e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12e82:	0963      	lsrs	r3, r4, #5
   12e84:	ea4f 0983 	mov.w	r9, r3, lsl #2
   12e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e8c:	4e2f      	ldr	r6, [pc, #188]	; (12f4c <pm_system_suspend+0xd8>)
   12e8e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   12e92:	f004 081f 	and.w	r8, r4, #31
   12e96:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   12e9a:	f013 0f01 	tst.w	r3, #1
{
   12e9e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   12ea0:	d10a      	bne.n	12eb8 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   12ea2:	4601      	mov	r1, r0
   12ea4:	4620      	mov	r0, r4
   12ea6:	f000 f869 	bl	12f7c <pm_policy_next_state>
		if (info != NULL) {
   12eaa:	b128      	cbz	r0, 12eb8 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   12eac:	c807      	ldmia	r0, {r0, r1, r2}
   12eae:	230c      	movs	r3, #12
   12eb0:	fb03 6304 	mla	r3, r3, r4, r6
   12eb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   12eb8:	230c      	movs	r3, #12
   12eba:	4363      	muls	r3, r4
   12ebc:	18f2      	adds	r2, r6, r3
   12ebe:	5cf5      	ldrb	r5, [r6, r3]
   12ec0:	b92d      	cbnz	r5, 12ece <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   12ec2:	4620      	mov	r0, r4
   12ec4:	f7ff ff80 	bl	12dc8 <atomic_clear_bit.constprop.0>
		ret = false;
   12ec8:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   12eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   12ece:	1c7b      	adds	r3, r7, #1
   12ed0:	d00f      	beq.n	12ef2 <pm_system_suspend+0x7e>
			return (uint32_t)((t * to_hz + off) / from_hz);
   12ed2:	f8d2 c008 	ldr.w	ip, [r2, #8]
   12ed6:	481e      	ldr	r0, [pc, #120]	; (12f50 <pm_system_suspend+0xdc>)
   12ed8:	4a1e      	ldr	r2, [pc, #120]	; (12f54 <pm_system_suspend+0xe0>)
   12eda:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   12ede:	2100      	movs	r1, #0
   12ee0:	2300      	movs	r3, #0
   12ee2:	fbec 0105 	umlal	r0, r1, ip, r5
   12ee6:	f7ed ff93 	bl	e10 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   12eea:	2101      	movs	r1, #1
   12eec:	1a38      	subs	r0, r7, r0
   12eee:	f010 f856 	bl	22f9e <z_set_timeout_expiry>
	k_sched_lock();
   12ef2:	f008 f925 	bl	1b140 <k_sched_lock>
	pm_state_notify(true);
   12ef6:	2001      	movs	r0, #1
   12ef8:	f7ff ff38 	bl	12d6c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12efc:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   12f00:	2301      	movs	r3, #1
   12f02:	fa03 f808 	lsl.w	r8, r3, r8
   12f06:	4b14      	ldr	r3, [pc, #80]	; (12f58 <pm_system_suspend+0xe4>)
   12f08:	4499      	add	r9, r3
   12f0a:	e859 3f00 	ldrex	r3, [r9]
   12f0e:	ea43 0308 	orr.w	r3, r3, r8
   12f12:	e849 3200 	strex	r2, r3, [r9]
   12f16:	2a00      	cmp	r2, #0
   12f18:	d1f7      	bne.n	12f0a <pm_system_suspend+0x96>
   12f1a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   12f1e:	4b0f      	ldr	r3, [pc, #60]	; (12f5c <pm_system_suspend+0xe8>)
   12f20:	b133      	cbz	r3, 12f30 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
   12f22:	230c      	movs	r3, #12
   12f24:	4363      	muls	r3, r4
   12f26:	18f2      	adds	r2, r6, r3
   12f28:	5cf0      	ldrb	r0, [r6, r3]
   12f2a:	7851      	ldrb	r1, [r2, #1]
   12f2c:	f00d f86b 	bl	20006 <pm_state_set>
	pm_system_resume();
   12f30:	f7ff ff62 	bl	12df8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   12f34:	4620      	mov	r0, r4
   12f36:	f7ff ff47 	bl	12dc8 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   12f3a:	f008 fad1 	bl	1b4e0 <k_sched_unlock>
	bool ret = true;
   12f3e:	2001      	movs	r0, #1
   12f40:	e7c3      	b.n	12eca <pm_system_suspend+0x56>
   12f42:	bf00      	nop
   12f44:	20002814 	.word	0x20002814
   12f48:	20001f20 	.word	0x20001f20
   12f4c:	20001f14 	.word	0x20001f14
   12f50:	000f423f 	.word	0x000f423f
   12f54:	000f4240 	.word	0x000f4240
   12f58:	20001f24 	.word	0x20001f24
   12f5c:	00020007 	.word	0x00020007

00012f60 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12f60:	4b05      	ldr	r3, [pc, #20]	; (12f78 <pm_policy_state_lock_is_active+0x18>)
   12f62:	f3bf 8f5b 	dmb	ish
   12f66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12f6a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   12f6e:	3800      	subs	r0, #0
   12f70:	bf18      	it	ne
   12f72:	2001      	movne	r0, #1
   12f74:	4770      	bx	lr
   12f76:	bf00      	nop
   12f78:	20001f28 	.word	0x20001f28

00012f7c <pm_policy_next_state>:
{
   12f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f80:	b085      	sub	sp, #20
   12f82:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12f84:	a903      	add	r1, sp, #12
   12f86:	f000 f847 	bl	13018 <pm_state_cpu_get_all>
   12f8a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1300c <pm_policy_next_state+0x90>
   12f8e:	f8df a080 	ldr.w	sl, [pc, #128]	; 13010 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12f92:	1e44      	subs	r4, r0, #1
   12f94:	b224      	sxth	r4, r4
   12f96:	f04f 0b00 	mov.w	fp, #0
   12f9a:	1c63      	adds	r3, r4, #1
   12f9c:	d104      	bne.n	12fa8 <pm_policy_next_state+0x2c>
	return NULL;
   12f9e:	2600      	movs	r6, #0
}
   12fa0:	4630      	mov	r0, r6
   12fa2:	b005      	add	sp, #20
   12fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   12fa8:	9a03      	ldr	r2, [sp, #12]
   12faa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   12fae:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   12fb2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   12fb6:	f7ff ffd3 	bl	12f60 <pm_policy_state_lock_is_active>
   12fba:	4605      	mov	r5, r0
   12fbc:	bb10      	cbnz	r0, 13004 <pm_policy_next_state+0x88>
   12fbe:	6870      	ldr	r0, [r6, #4]
   12fc0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   12fc4:	46c4      	mov	ip, r8
   12fc6:	4629      	mov	r1, r5
   12fc8:	fbe0 c109 	umlal	ip, r1, r0, r9
   12fcc:	4652      	mov	r2, sl
   12fce:	465b      	mov	r3, fp
   12fd0:	4660      	mov	r0, ip
   12fd2:	f7ed ff1d 	bl	e10 <__aeabi_uldivmod>
   12fd6:	9001      	str	r0, [sp, #4]
   12fd8:	68b0      	ldr	r0, [r6, #8]
   12fda:	46c4      	mov	ip, r8
   12fdc:	4629      	mov	r1, r5
   12fde:	fbe0 c109 	umlal	ip, r1, r0, r9
   12fe2:	465b      	mov	r3, fp
   12fe4:	4652      	mov	r2, sl
   12fe6:	4660      	mov	r0, ip
   12fe8:	f7ed ff12 	bl	e10 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   12fec:	4b09      	ldr	r3, [pc, #36]	; (13014 <pm_policy_next_state+0x98>)
   12fee:	681b      	ldr	r3, [r3, #0]
   12ff0:	1c59      	adds	r1, r3, #1
   12ff2:	d001      	beq.n	12ff8 <pm_policy_next_state+0x7c>
   12ff4:	4283      	cmp	r3, r0
   12ff6:	d905      	bls.n	13004 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   12ff8:	1c7a      	adds	r2, r7, #1
   12ffa:	d0d1      	beq.n	12fa0 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   12ffc:	9b01      	ldr	r3, [sp, #4]
   12ffe:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   13000:	42b8      	cmp	r0, r7
   13002:	d9cd      	bls.n	12fa0 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13004:	3c01      	subs	r4, #1
   13006:	b224      	sxth	r4, r4
   13008:	e7c7      	b.n	12f9a <pm_policy_next_state+0x1e>
   1300a:	bf00      	nop
   1300c:	000f423f 	.word	0x000f423f
   13010:	000f4240 	.word	0x000f4240
   13014:	20000600 	.word	0x20000600

00013018 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   13018:	b908      	cbnz	r0, 1301e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1301a:	4b02      	ldr	r3, [pc, #8]	; (13024 <pm_state_cpu_get_all+0xc>)
   1301c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1301e:	2000      	movs	r0, #0
   13020:	4770      	bx	lr
   13022:	bf00      	nop
   13024:	00023c88 	.word	0x00023c88

00013028 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   13028:	4904      	ldr	r1, [pc, #16]	; (1303c <sub_bytes+0x14>)
   1302a:	1e43      	subs	r3, r0, #1
   1302c:	300f      	adds	r0, #15
   1302e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   13032:	5c8a      	ldrb	r2, [r1, r2]
   13034:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13036:	4283      	cmp	r3, r0
   13038:	d1f9      	bne.n	1302e <sub_bytes+0x6>
	}
}
   1303a:	4770      	bx	lr
   1303c:	00024675 	.word	0x00024675

00013040 <tc_aes128_set_encrypt_key>:
{
   13040:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13042:	4e26      	ldr	r6, [pc, #152]	; (130dc <tc_aes128_set_encrypt_key+0x9c>)
{
   13044:	4607      	mov	r7, r0
   13046:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13048:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1304a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1304c:	ad01      	add	r5, sp, #4
   1304e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13050:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13054:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13058:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1305c:	4638      	mov	r0, r7
   1305e:	2f00      	cmp	r7, #0
   13060:	d038      	beq.n	130d4 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   13062:	2c00      	cmp	r4, #0
   13064:	d038      	beq.n	130d8 <tc_aes128_set_encrypt_key+0x98>
   13066:	1f38      	subs	r0, r7, #4
   13068:	4621      	mov	r1, r4
   1306a:	4602      	mov	r2, r0
   1306c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1306e:	784b      	ldrb	r3, [r1, #1]
   13070:	780d      	ldrb	r5, [r1, #0]
   13072:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13074:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13078:	78cd      	ldrb	r5, [r1, #3]
   1307a:	432b      	orrs	r3, r5
   1307c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   1307e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13080:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13084:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13086:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1308a:	d1f0      	bne.n	1306e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1308c:	4c14      	ldr	r4, [pc, #80]	; (130e0 <tc_aes128_set_encrypt_key+0xa0>)
   1308e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13090:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13092:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13094:	d116      	bne.n	130c4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13096:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1309a:	5ca5      	ldrb	r5, [r4, r2]
   1309c:	0e1a      	lsrs	r2, r3, #24
   1309e:	5ca2      	ldrb	r2, [r4, r2]
   130a0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   130a4:	f3c3 2507 	ubfx	r5, r3, #8, #8
   130a8:	b2db      	uxtb	r3, r3
   130aa:	5d65      	ldrb	r5, [r4, r5]
   130ac:	5ce3      	ldrb	r3, [r4, r3]
   130ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   130b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   130b6:	ad0c      	add	r5, sp, #48	; 0x30
   130b8:	f021 0303 	bic.w	r3, r1, #3
   130bc:	442b      	add	r3, r5
   130be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   130c2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   130c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   130c8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   130ca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   130cc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   130ce:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   130d0:	d1de      	bne.n	13090 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   130d2:	2001      	movs	r0, #1
}
   130d4:	b00d      	add	sp, #52	; 0x34
   130d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   130d8:	4620      	mov	r0, r4
   130da:	e7fb      	b.n	130d4 <tc_aes128_set_encrypt_key+0x94>
   130dc:	0002380c 	.word	0x0002380c
   130e0:	00024675 	.word	0x00024675

000130e4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   130e4:	4801      	ldr	r0, [pc, #4]	; (130ec <nrf_cc3xx_platform_abort_init+0x8>)
   130e6:	f009 b97d 	b.w	1c3e4 <nrf_cc3xx_platform_set_abort>
   130ea:	bf00      	nop
   130ec:	00023c88 	.word	0x00023c88

000130f0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   130f0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   130f2:	4604      	mov	r4, r0
   130f4:	b918      	cbnz	r0, 130fe <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   130f6:	4b0d      	ldr	r3, [pc, #52]	; (1312c <mutex_free_platform+0x3c>)
   130f8:	480d      	ldr	r0, [pc, #52]	; (13130 <mutex_free_platform+0x40>)
   130fa:	685b      	ldr	r3, [r3, #4]
   130fc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   130fe:	6861      	ldr	r1, [r4, #4]
   13100:	2908      	cmp	r1, #8
   13102:	d00d      	beq.n	13120 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13104:	f031 0304 	bics.w	r3, r1, #4
   13108:	d00a      	beq.n	13120 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1310a:	f011 0102 	ands.w	r1, r1, #2
   1310e:	d008      	beq.n	13122 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13110:	4808      	ldr	r0, [pc, #32]	; (13134 <mutex_free_platform+0x44>)
   13112:	4621      	mov	r1, r4
   13114:	f00f fbec 	bl	228f0 <k_mem_slab_free>
        mutex->mutex = NULL;
   13118:	2300      	movs	r3, #0
   1311a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   1311c:	2300      	movs	r3, #0
   1311e:	6063      	str	r3, [r4, #4]
}
   13120:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   13122:	6820      	ldr	r0, [r4, #0]
   13124:	2214      	movs	r2, #20
   13126:	f010 f933 	bl	23390 <memset>
   1312a:	e7f7      	b.n	1311c <mutex_free_platform+0x2c>
   1312c:	200007e4 	.word	0x200007e4
   13130:	00024775 	.word	0x00024775
   13134:	20001f44 	.word	0x20001f44

00013138 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13138:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1313a:	b308      	cbz	r0, 13180 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   1313c:	6843      	ldr	r3, [r0, #4]
   1313e:	2b04      	cmp	r3, #4
   13140:	d110      	bne.n	13164 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13142:	2201      	movs	r2, #1
   13144:	6803      	ldr	r3, [r0, #0]
   13146:	f3bf 8f5b 	dmb	ish
   1314a:	e853 1f00 	ldrex	r1, [r3]
   1314e:	2900      	cmp	r1, #0
   13150:	d103      	bne.n	1315a <mutex_lock_platform+0x22>
   13152:	e843 2000 	strex	r0, r2, [r3]
   13156:	2800      	cmp	r0, #0
   13158:	d1f7      	bne.n	1314a <mutex_lock_platform+0x12>
   1315a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1315e:	d10b      	bne.n	13178 <mutex_lock_platform+0x40>
   13160:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   13162:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13164:	b153      	cbz	r3, 1317c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13166:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   13168:	f04f 32ff 	mov.w	r2, #4294967295
   1316c:	f04f 33ff 	mov.w	r3, #4294967295
   13170:	f007 fc92 	bl	1aa98 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13174:	2800      	cmp	r0, #0
   13176:	d0f3      	beq.n	13160 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13178:	4803      	ldr	r0, [pc, #12]	; (13188 <mutex_lock_platform+0x50>)
   1317a:	e7f2      	b.n	13162 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1317c:	4803      	ldr	r0, [pc, #12]	; (1318c <mutex_lock_platform+0x54>)
   1317e:	e7f0      	b.n	13162 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13180:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13184:	e7ed      	b.n	13162 <mutex_lock_platform+0x2a>
   13186:	bf00      	nop
   13188:	ffff8fe9 	.word	0xffff8fe9
   1318c:	ffff8fea 	.word	0xffff8fea

00013190 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13190:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13192:	b1d0      	cbz	r0, 131ca <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13194:	6843      	ldr	r3, [r0, #4]
   13196:	2b04      	cmp	r3, #4
   13198:	d111      	bne.n	131be <mutex_unlock_platform+0x2e>
   1319a:	2200      	movs	r2, #0
   1319c:	6803      	ldr	r3, [r0, #0]
   1319e:	f3bf 8f5b 	dmb	ish
   131a2:	e853 1f00 	ldrex	r1, [r3]
   131a6:	2901      	cmp	r1, #1
   131a8:	d103      	bne.n	131b2 <mutex_unlock_platform+0x22>
   131aa:	e843 2000 	strex	r0, r2, [r3]
   131ae:	2800      	cmp	r0, #0
   131b0:	d1f7      	bne.n	131a2 <mutex_unlock_platform+0x12>
   131b2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   131b6:	4807      	ldr	r0, [pc, #28]	; (131d4 <mutex_unlock_platform+0x44>)
   131b8:	bf08      	it	eq
   131ba:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   131bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   131be:	b13b      	cbz	r3, 131d0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   131c0:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   131c2:	f007 fce1 	bl	1ab88 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   131c6:	2000      	movs	r0, #0
   131c8:	e7f8      	b.n	131bc <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   131ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   131ce:	e7f5      	b.n	131bc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   131d0:	4801      	ldr	r0, [pc, #4]	; (131d8 <mutex_unlock_platform+0x48>)
   131d2:	e7f3      	b.n	131bc <mutex_unlock_platform+0x2c>
   131d4:	ffff8fe9 	.word	0xffff8fe9
   131d8:	ffff8fea 	.word	0xffff8fea

000131dc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   131dc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   131de:	4604      	mov	r4, r0
   131e0:	b918      	cbnz	r0, 131ea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   131e2:	4b16      	ldr	r3, [pc, #88]	; (1323c <mutex_init_platform+0x60>)
   131e4:	4816      	ldr	r0, [pc, #88]	; (13240 <mutex_init_platform+0x64>)
   131e6:	685b      	ldr	r3, [r3, #4]
   131e8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   131ea:	6863      	ldr	r3, [r4, #4]
   131ec:	2b04      	cmp	r3, #4
   131ee:	d023      	beq.n	13238 <mutex_init_platform+0x5c>
   131f0:	2b08      	cmp	r3, #8
   131f2:	d021      	beq.n	13238 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   131f4:	b9cb      	cbnz	r3, 1322a <mutex_init_platform+0x4e>
   131f6:	6823      	ldr	r3, [r4, #0]
   131f8:	b9bb      	cbnz	r3, 1322a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   131fa:	4812      	ldr	r0, [pc, #72]	; (13244 <mutex_init_platform+0x68>)
   131fc:	f04f 32ff 	mov.w	r2, #4294967295
   13200:	f04f 33ff 	mov.w	r3, #4294967295
   13204:	4621      	mov	r1, r4
   13206:	f007 fb43 	bl	1a890 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1320a:	b908      	cbnz	r0, 13210 <mutex_init_platform+0x34>
   1320c:	6823      	ldr	r3, [r4, #0]
   1320e:	b91b      	cbnz	r3, 13218 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   13210:	4b0a      	ldr	r3, [pc, #40]	; (1323c <mutex_init_platform+0x60>)
   13212:	480d      	ldr	r0, [pc, #52]	; (13248 <mutex_init_platform+0x6c>)
   13214:	685b      	ldr	r3, [r3, #4]
   13216:	4798      	blx	r3
   13218:	6820      	ldr	r0, [r4, #0]
   1321a:	2214      	movs	r2, #20
   1321c:	2100      	movs	r1, #0
   1321e:	f010 f8b7 	bl	23390 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13222:	6863      	ldr	r3, [r4, #4]
   13224:	f043 0302 	orr.w	r3, r3, #2
   13228:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   1322a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1322c:	f00f fba3 	bl	22976 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13230:	6863      	ldr	r3, [r4, #4]
   13232:	f043 0301 	orr.w	r3, r3, #1
   13236:	6063      	str	r3, [r4, #4]
}
   13238:	bd10      	pop	{r4, pc}
   1323a:	bf00      	nop
   1323c:	200007e4 	.word	0x200007e4
   13240:	00024775 	.word	0x00024775
   13244:	20001f44 	.word	0x20001f44
   13248:	0002479b 	.word	0x0002479b

0001324c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1324c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1324e:	4906      	ldr	r1, [pc, #24]	; (13268 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13250:	4806      	ldr	r0, [pc, #24]	; (1326c <nrf_cc3xx_platform_mutex_init+0x20>)
   13252:	2340      	movs	r3, #64	; 0x40
   13254:	2214      	movs	r2, #20
   13256:	f00f fb30 	bl	228ba <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1325a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1325e:	4904      	ldr	r1, [pc, #16]	; (13270 <nrf_cc3xx_platform_mutex_init+0x24>)
   13260:	4804      	ldr	r0, [pc, #16]	; (13274 <nrf_cc3xx_platform_mutex_init+0x28>)
   13262:	f009 b973 	b.w	1c54c <nrf_cc3xx_platform_set_mutexes>
   13266:	bf00      	nop
   13268:	20001f60 	.word	0x20001f60
   1326c:	20001f44 	.word	0x20001f44
   13270:	00023ca0 	.word	0x00023ca0
   13274:	00023c90 	.word	0x00023c90

00013278 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13278:	4901      	ldr	r1, [pc, #4]	; (13280 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1327a:	2210      	movs	r2, #16
	str	r2, [r1]
   1327c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1327e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13280:	e000ed10 	.word	0xe000ed10

00013284 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13284:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13286:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13288:	f380 8811 	msr	BASEPRI, r0
	isb
   1328c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13290:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13294:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13296:	b662      	cpsie	i
	isb
   13298:	f3bf 8f6f 	isb	sy

	bx	lr
   1329c:	4770      	bx	lr
   1329e:	bf00      	nop

000132a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   132a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   132a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   132a4:	f381 8811 	msr	BASEPRI, r1

	wfe
   132a8:	bf20      	wfe

	msr	BASEPRI, r0
   132aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   132ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   132b0:	4770      	bx	lr
   132b2:	bf00      	nop

000132b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   132b4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   132b6:	2b00      	cmp	r3, #0
   132b8:	db08      	blt.n	132cc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132ba:	2201      	movs	r2, #1
   132bc:	f000 001f 	and.w	r0, r0, #31
   132c0:	fa02 f000 	lsl.w	r0, r2, r0
   132c4:	095b      	lsrs	r3, r3, #5
   132c6:	4a02      	ldr	r2, [pc, #8]	; (132d0 <arch_irq_enable+0x1c>)
   132c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   132cc:	4770      	bx	lr
   132ce:	bf00      	nop
   132d0:	e000e100 	.word	0xe000e100

000132d4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   132d4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   132d6:	2b00      	cmp	r3, #0
   132d8:	db0d      	blt.n	132f6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   132da:	2201      	movs	r2, #1
   132dc:	095b      	lsrs	r3, r3, #5
   132de:	f000 001f 	and.w	r0, r0, #31
   132e2:	fa02 f000 	lsl.w	r0, r2, r0
   132e6:	3320      	adds	r3, #32
   132e8:	4a03      	ldr	r2, [pc, #12]	; (132f8 <arch_irq_disable+0x24>)
   132ea:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   132ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   132f2:	f3bf 8f6f 	isb	sy
}
   132f6:	4770      	bx	lr
   132f8:	e000e100 	.word	0xe000e100

000132fc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   132fc:	4b05      	ldr	r3, [pc, #20]	; (13314 <arch_irq_is_enabled+0x18>)
   132fe:	0942      	lsrs	r2, r0, #5
   13300:	f000 001f 	and.w	r0, r0, #31
   13304:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13308:	2301      	movs	r3, #1
   1330a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1330e:	4010      	ands	r0, r2
   13310:	4770      	bx	lr
   13312:	bf00      	nop
   13314:	e000e100 	.word	0xe000e100

00013318 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13318:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1331a:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   1331c:	bf54      	ite	pl
   1331e:	1c8b      	addpl	r3, r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13320:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13322:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13324:	bfac      	ite	ge
   13326:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1332a:	4a07      	ldrlt	r2, [pc, #28]	; (13348 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1332c:	ea4f 1343 	mov.w	r3, r3, lsl #5
   13330:	bfac      	ite	ge
   13332:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13336:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1333a:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1333c:	bfb4      	ite	lt
   1333e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13340:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13344:	4770      	bx	lr
   13346:	bf00      	nop
   13348:	e000ed14 	.word	0xe000ed14

0001334c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1334c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1334e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13350:	4b04      	ldr	r3, [pc, #16]	; (13364 <_arch_isr_direct_pm+0x18>)
   13352:	699a      	ldr	r2, [r3, #24]
   13354:	b11a      	cbz	r2, 1335e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13356:	2200      	movs	r2, #0
   13358:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1335a:	f00f fafd 	bl	22958 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1335e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13360:	bd08      	pop	{r3, pc}
   13362:	bf00      	nop
   13364:	20002814 	.word	0x20002814

00013368 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13368:	bf30      	wfi
    b z_SysNmiOnReset
   1336a:	f7ff bffd 	b.w	13368 <z_SysNmiOnReset>
   1336e:	bf00      	nop

00013370 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13370:	4a0b      	ldr	r2, [pc, #44]	; (133a0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   13372:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13374:	4b0b      	ldr	r3, [pc, #44]	; (133a4 <z_arm_prep_c+0x34>)
   13376:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1337a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1337c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13380:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13384:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13388:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1338c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13390:	f007 f99a 	bl	1a6c8 <z_bss_zero>
	z_data_copy();
   13394:	f008 f9d8 	bl	1b748 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13398:	f000 f9d6 	bl	13748 <z_arm_interrupt_init>
	z_cstart();
   1339c:	f007 f9d8 	bl	1a750 <z_cstart>
   133a0:	00000000 	.word	0x00000000
   133a4:	e000ed00 	.word	0xe000ed00

000133a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   133a8:	4a09      	ldr	r2, [pc, #36]	; (133d0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   133aa:	490a      	ldr	r1, [pc, #40]	; (133d4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   133ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   133ae:	6809      	ldr	r1, [r1, #0]
   133b0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   133b2:	4909      	ldr	r1, [pc, #36]	; (133d8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   133b4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   133b6:	684b      	ldr	r3, [r1, #4]
   133b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   133bc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   133be:	2300      	movs	r3, #0
   133c0:	f383 8811 	msr	BASEPRI, r3
   133c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   133c8:	6893      	ldr	r3, [r2, #8]
}
   133ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   133cc:	4770      	bx	lr
   133ce:	bf00      	nop
   133d0:	20002814 	.word	0x20002814
   133d4:	000240d8 	.word	0x000240d8
   133d8:	e000ed00 	.word	0xe000ed00

000133dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   133dc:	4912      	ldr	r1, [pc, #72]	; (13428 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   133de:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   133e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   133e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   133e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   133ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   133ee:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   133f0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   133f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   133f8:	4f0c      	ldr	r7, [pc, #48]	; (1342c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   133fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   133fe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13400:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13402:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13404:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   13406:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13408:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1340a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1340e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13410:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13412:	f000 fa35 	bl	13880 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13416:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1341a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1341e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13422:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13426:	4770      	bx	lr
    ldr r1, =_kernel
   13428:	20002814 	.word	0x20002814
    ldr v4, =_SCS_ICSR
   1342c:	e000ed04 	.word	0xe000ed04

00013430 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13430:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13434:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13436:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1343a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1343e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13440:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13444:	2902      	cmp	r1, #2
    beq _oops
   13446:	d0ff      	beq.n	13448 <_oops>

00013448 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13448:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1344a:	f00c fdc8 	bl	1ffde <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1344e:	bd01      	pop	{r0, pc}

00013450 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13450:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13454:	9b00      	ldr	r3, [sp, #0]
   13456:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1345a:	490a      	ldr	r1, [pc, #40]	; (13484 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1345c:	9b01      	ldr	r3, [sp, #4]
   1345e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13462:	9b02      	ldr	r3, [sp, #8]
   13464:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13468:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1346c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13470:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13474:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13478:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1347a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1347c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1347e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13480:	4770      	bx	lr
   13482:	bf00      	nop
   13484:	0001f6ff 	.word	0x0001f6ff

00013488 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13488:	4a09      	ldr	r2, [pc, #36]	; (134b0 <z_check_thread_stack_fail+0x28>)
{
   1348a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1348c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1348e:	b170      	cbz	r0, 134ae <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13490:	f113 0f16 	cmn.w	r3, #22
   13494:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13496:	d005      	beq.n	134a4 <z_check_thread_stack_fail+0x1c>
   13498:	f1a0 0220 	sub.w	r2, r0, #32
   1349c:	429a      	cmp	r2, r3
   1349e:	d805      	bhi.n	134ac <z_check_thread_stack_fail+0x24>
   134a0:	4283      	cmp	r3, r0
   134a2:	d203      	bcs.n	134ac <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   134a4:	4281      	cmp	r1, r0
   134a6:	bf28      	it	cs
   134a8:	2000      	movcs	r0, #0
   134aa:	4770      	bx	lr
   134ac:	2000      	movs	r0, #0
}
   134ae:	4770      	bx	lr
   134b0:	20002814 	.word	0x20002814

000134b4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   134b4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   134b6:	4b09      	ldr	r3, [pc, #36]	; (134dc <arch_switch_to_main_thread+0x28>)
   134b8:	6098      	str	r0, [r3, #8]
{
   134ba:	460d      	mov	r5, r1
   134bc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   134be:	f000 f9df 	bl	13880 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   134c2:	4620      	mov	r0, r4
   134c4:	f385 8809 	msr	PSP, r5
   134c8:	2100      	movs	r1, #0
   134ca:	b663      	cpsie	if
   134cc:	f381 8811 	msr	BASEPRI, r1
   134d0:	f3bf 8f6f 	isb	sy
   134d4:	2200      	movs	r2, #0
   134d6:	2300      	movs	r3, #0
   134d8:	f00c f911 	bl	1f6fe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   134dc:	20002814 	.word	0x20002814

000134e0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   134e0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   134e2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   134e4:	4a0b      	ldr	r2, [pc, #44]	; (13514 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   134e6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   134e8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   134ea:	bf1e      	ittt	ne
	movne	r1, #0
   134ec:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   134ee:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   134f0:	f00f fa32 	blne	22958 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   134f4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   134f6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   134fa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   134fe:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13502:	4905      	ldr	r1, [pc, #20]	; (13518 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13504:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13506:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13508:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1350a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1350e:	4903      	ldr	r1, [pc, #12]	; (1351c <_isr_wrapper+0x3c>)
	bx r1
   13510:	4708      	bx	r1
   13512:	0000      	.short	0x0000
	ldr r2, =_kernel
   13514:	20002814 	.word	0x20002814
	ldr r1, =_sw_isr_table
   13518:	000235c4 	.word	0x000235c4
	ldr r1, =z_arm_int_exit
   1351c:	00013521 	.word	0x00013521

00013520 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13520:	4b04      	ldr	r3, [pc, #16]	; (13534 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13522:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13524:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13526:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13528:	d003      	beq.n	13532 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1352a:	4903      	ldr	r1, [pc, #12]	; (13538 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1352c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13530:	600a      	str	r2, [r1, #0]

00013532 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13532:	4770      	bx	lr
	ldr r3, =_kernel
   13534:	20002814 	.word	0x20002814
	ldr r1, =_SCS_ICSR
   13538:	e000ed04 	.word	0xe000ed04

0001353c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1353c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1353e:	4b1c      	ldr	r3, [pc, #112]	; (135b0 <mem_manage_fault+0x74>)
{
   13540:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   13548:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1354a:	0790      	lsls	r0, r2, #30
   1354c:	d520      	bpl.n	13590 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1354e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13552:	0612      	lsls	r2, r2, #24
   13554:	d51c      	bpl.n	13590 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   13556:	b119      	cbz	r1, 13560 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1355a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1355e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13566:	06d2      	lsls	r2, r2, #27
   13568:	d415      	bmi.n	13596 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1356c:	079b      	lsls	r3, r3, #30
   1356e:	d412      	bmi.n	13596 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13570:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13572:	4b0f      	ldr	r3, [pc, #60]	; (135b0 <mem_manage_fault+0x74>)
   13574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13576:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   13578:	bf42      	ittt	mi
   1357a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1357c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   13580:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13584:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13588:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1358a:	2300      	movs	r3, #0
   1358c:	7023      	strb	r3, [r4, #0]

	return reason;
}
   1358e:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   13590:	f06f 0015 	mvn.w	r0, #21
   13594:	e7e4      	b.n	13560 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13596:	4b06      	ldr	r3, [pc, #24]	; (135b0 <mem_manage_fault+0x74>)
   13598:	685b      	ldr	r3, [r3, #4]
   1359a:	0519      	lsls	r1, r3, #20
   1359c:	d5e8      	bpl.n	13570 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1359e:	4629      	mov	r1, r5
   135a0:	f7ff ff72 	bl	13488 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   135a4:	2800      	cmp	r0, #0
   135a6:	d0e3      	beq.n	13570 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   135a8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   135ac:	2002      	movs	r0, #2
   135ae:	e7e0      	b.n	13572 <mem_manage_fault+0x36>
   135b0:	e000ed00 	.word	0xe000ed00

000135b4 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   135b4:	4b0d      	ldr	r3, [pc, #52]	; (135ec <bus_fault.constprop.0+0x38>)
   135b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   135b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   135ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135bc:	0592      	lsls	r2, r2, #22
   135be:	d508      	bpl.n	135d2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   135c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   135c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135c4:	0412      	lsls	r2, r2, #16
   135c6:	d504      	bpl.n	135d2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   135c8:	b118      	cbz	r0, 135d2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   135ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   135d0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   135d2:	4b06      	ldr	r3, [pc, #24]	; (135ec <bus_fault.constprop.0+0x38>)
   135d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   135d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135d8:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   135da:	bf58      	it	pl
   135dc:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135de:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   135e0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   135e2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   135e6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   135e8:	7008      	strb	r0, [r1, #0]

	return reason;
}
   135ea:	4770      	bx	lr
   135ec:	e000ed00 	.word	0xe000ed00

000135f0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   135f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   135f2:	4b4b      	ldr	r3, [pc, #300]	; (13720 <z_arm_fault+0x130>)
   135f4:	685b      	ldr	r3, [r3, #4]
{
   135f6:	b08b      	sub	sp, #44	; 0x2c
   135f8:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   135fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   135fe:	2500      	movs	r5, #0
   13600:	f385 8811 	msr	BASEPRI, r5
   13604:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13608:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   1360c:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   13610:	d111      	bne.n	13636 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13612:	f002 010c 	and.w	r1, r2, #12
   13616:	2908      	cmp	r1, #8
   13618:	d00d      	beq.n	13636 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1361a:	0716      	lsls	r6, r2, #28
   1361c:	d401      	bmi.n	13622 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   1361e:	4604      	mov	r4, r0
			*nested_exc = true;
   13620:	2501      	movs	r5, #1
	*recoverable = false;
   13622:	2200      	movs	r2, #0
	switch (fault) {
   13624:	3b03      	subs	r3, #3
	*recoverable = false;
   13626:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   1362a:	2b03      	cmp	r3, #3
   1362c:	d871      	bhi.n	13712 <z_arm_fault+0x122>
   1362e:	e8df f003 	tbb	[pc, r3]
   13632:	5b04      	.short	0x5b04
   13634:	635f      	.short	0x635f
		return NULL;
   13636:	462c      	mov	r4, r5
   13638:	e7f3      	b.n	13622 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1363a:	4a39      	ldr	r2, [pc, #228]	; (13720 <z_arm_fault+0x130>)
   1363c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1363e:	f013 0302 	ands.w	r3, r3, #2
   13642:	d166      	bne.n	13712 <z_arm_fault+0x122>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13644:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   13646:	2900      	cmp	r1, #0
   13648:	db15      	blt.n	13676 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1364a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   1364c:	0049      	lsls	r1, r1, #1
   1364e:	d512      	bpl.n	13676 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
   13650:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13652:	f831 0c02 	ldrh.w	r0, [r1, #-2]
   13656:	f64d 7102 	movw	r1, #57090	; 0xdf02
   1365a:	4288      	cmp	r0, r1
   1365c:	d00a      	beq.n	13674 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
   1365e:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   13662:	b339      	cbz	r1, 136b4 <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
   13664:	f10d 0207 	add.w	r2, sp, #7
   13668:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1366a:	4620      	mov	r0, r4
   1366c:	f7ff ff66 	bl	1353c <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   13670:	4603      	mov	r3, r0
		break;
   13672:	e000      	b.n	13676 <z_arm_fault+0x86>
			reason = esf->basic.r0;
   13674:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13676:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1367a:	b9ca      	cbnz	r2, 136b0 <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1367c:	ae02      	add	r6, sp, #8
   1367e:	f104 0720 	add.w	r7, r4, #32
   13682:	6820      	ldr	r0, [r4, #0]
   13684:	6861      	ldr	r1, [r4, #4]
   13686:	4632      	mov	r2, r6
   13688:	c203      	stmia	r2!, {r0, r1}
   1368a:	3408      	adds	r4, #8
   1368c:	42bc      	cmp	r4, r7
   1368e:	4616      	mov	r6, r2
   13690:	d1f7      	bne.n	13682 <z_arm_fault+0x92>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13692:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13694:	2d00      	cmp	r5, #0
   13696:	d03e      	beq.n	13716 <z_arm_fault+0x126>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13698:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1369c:	b921      	cbnz	r1, 136a8 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1369e:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   136a2:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   136a6:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   136a8:	a902      	add	r1, sp, #8
   136aa:	4618      	mov	r0, r3
   136ac:	f00c fc95 	bl	1ffda <z_arm_fatal_error>
}
   136b0:	b00b      	add	sp, #44	; 0x2c
   136b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   136b4:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
   136b8:	b129      	cbz	r1, 136c6 <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
   136ba:	f10d 0107 	add.w	r1, sp, #7
   136be:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   136c0:	f7ff ff78 	bl	135b4 <bus_fault.constprop.0>
   136c4:	e7d4      	b.n	13670 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
   136c6:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
   136c8:	b289      	uxth	r1, r1
   136ca:	2900      	cmp	r1, #0
   136cc:	d0d3      	beq.n	13676 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   136ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   136d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   136d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   136d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   136d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   136d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   136da:	6a91      	ldr	r1, [r2, #40]	; 0x28
   136dc:	ea6f 4101 	mvn.w	r1, r1, lsl #16
   136e0:	ea6f 4111 	mvn.w	r1, r1, lsr #16
   136e4:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
   136e6:	e7c6      	b.n	13676 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
   136e8:	f10d 0207 	add.w	r2, sp, #7
   136ec:	2100      	movs	r1, #0
   136ee:	e7bc      	b.n	1366a <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   136f0:	f10d 0107 	add.w	r1, sp, #7
   136f4:	2000      	movs	r0, #0
   136f6:	e7e3      	b.n	136c0 <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   136f8:	4b09      	ldr	r3, [pc, #36]	; (13720 <z_arm_fault+0x130>)
   136fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   136fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   136fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13708:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1370c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   13710:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13712:	2300      	movs	r3, #0
   13714:	e7af      	b.n	13676 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13716:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   1371a:	f022 0201 	bic.w	r2, r2, #1
   1371e:	e7c2      	b.n	136a6 <z_arm_fault+0xb6>
   13720:	e000ed00 	.word	0xe000ed00

00013724 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13724:	4a02      	ldr	r2, [pc, #8]	; (13730 <z_arm_fault_init+0xc>)
   13726:	6953      	ldr	r3, [r2, #20]
   13728:	f043 0310 	orr.w	r3, r3, #16
   1372c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1372e:	4770      	bx	lr
   13730:	e000ed00 	.word	0xe000ed00

00013734 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13734:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13738:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1373c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1373e:	4672      	mov	r2, lr
	bl z_arm_fault
   13740:	f7ff ff56 	bl	135f0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13744:	bd01      	pop	{r0, pc}
   13746:	bf00      	nop

00013748 <z_arm_interrupt_init>:
   13748:	4804      	ldr	r0, [pc, #16]	; (1375c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1374a:	2300      	movs	r3, #0
   1374c:	2140      	movs	r1, #64	; 0x40
   1374e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13750:	3301      	adds	r3, #1
   13752:	2b30      	cmp	r3, #48	; 0x30
   13754:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13758:	d1f9      	bne.n	1374e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1375a:	4770      	bx	lr
   1375c:	e000e100 	.word	0xe000e100

00013760 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13760:	2000      	movs	r0, #0
    msr CONTROL, r0
   13762:	f380 8814 	msr	CONTROL, r0
    isb
   13766:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1376a:	f00f fe6d 	bl	23448 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1376e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13770:	490d      	ldr	r1, [pc, #52]	; (137a8 <__start+0x48>)
    str r0, [r1]
   13772:	6008      	str	r0, [r1, #0]
    dsb
   13774:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13778:	480c      	ldr	r0, [pc, #48]	; (137ac <__start+0x4c>)
    msr msp, r0
   1377a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1377e:	f000 f82b 	bl	137d8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13782:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13784:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13788:	4809      	ldr	r0, [pc, #36]	; (137b0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1378a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1378e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13790:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13794:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13798:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1379a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1379c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   137a0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   137a4:	f7ff fde4 	bl	13370 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   137a8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   137ac:	20005800 	.word	0x20005800
    ldr r0, =z_interrupt_stacks
   137b0:	20005980 	.word	0x20005980

000137b4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   137b4:	4907      	ldr	r1, [pc, #28]	; (137d4 <z_arm_clear_arm_mpu_config+0x20>)
   137b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   137ba:	2300      	movs	r3, #0
	int num_regions =
   137bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   137c0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   137c2:	4293      	cmp	r3, r2
   137c4:	d100      	bne.n	137c8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   137c6:	4770      	bx	lr
  MPU->RNR = rnr;
   137c8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   137cc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   137d0:	3301      	adds	r3, #1
   137d2:	e7f6      	b.n	137c2 <z_arm_clear_arm_mpu_config+0xe>
   137d4:	e000ed00 	.word	0xe000ed00

000137d8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   137d8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   137da:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   137dc:	2300      	movs	r3, #0
   137de:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   137e2:	f7ff ffe7 	bl	137b4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   137e6:	4b14      	ldr	r3, [pc, #80]	; (13838 <z_arm_init_arch_hw_at_boot+0x60>)
   137e8:	f04f 32ff 	mov.w	r2, #4294967295
   137ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   137f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   137f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   137f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   137fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   13800:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   13804:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13808:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1380c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13810:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   13814:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13818:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   1381c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   13820:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   13824:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   13828:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   1382c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1382e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13832:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13836:	bd08      	pop	{r3, pc}
   13838:	e000e100 	.word	0xe000e100

0001383c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1383c:	4b08      	ldr	r3, [pc, #32]	; (13860 <z_impl_k_thread_abort+0x24>)
   1383e:	689b      	ldr	r3, [r3, #8]
   13840:	4283      	cmp	r3, r0
   13842:	d10b      	bne.n	1385c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13844:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13848:	b143      	cbz	r3, 1385c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1384a:	4b06      	ldr	r3, [pc, #24]	; (13864 <z_impl_k_thread_abort+0x28>)
   1384c:	685a      	ldr	r2, [r3, #4]
   1384e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13852:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1385a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1385c:	f007 bf10 	b.w	1b680 <z_thread_abort>
   13860:	20002814 	.word	0x20002814
   13864:	e000ed00 	.word	0xe000ed00

00013868 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13868:	4b02      	ldr	r3, [pc, #8]	; (13874 <z_arm_configure_static_mpu_regions+0xc>)
   1386a:	4a03      	ldr	r2, [pc, #12]	; (13878 <z_arm_configure_static_mpu_regions+0x10>)
   1386c:	4803      	ldr	r0, [pc, #12]	; (1387c <z_arm_configure_static_mpu_regions+0x14>)
   1386e:	2101      	movs	r1, #1
   13870:	f000 b86e 	b.w	13950 <arm_core_mpu_configure_static_mpu_regions>
   13874:	20040000 	.word	0x20040000
   13878:	20000000 	.word	0x20000000
   1387c:	00023cb4 	.word	0x00023cb4

00013880 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13880:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13882:	4b05      	ldr	r3, [pc, #20]	; (13898 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13884:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   13886:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13888:	4a04      	ldr	r2, [pc, #16]	; (1389c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1388a:	2120      	movs	r1, #32
   1388c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13890:	4618      	mov	r0, r3
   13892:	2101      	movs	r1, #1
   13894:	f000 b866 	b.w	13964 <arm_core_mpu_configure_dynamic_mpu_regions>
   13898:	20002460 	.word	0x20002460
   1389c:	150b0000 	.word	0x150b0000

000138a0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   138a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   138a2:	4f1f      	ldr	r7, [pc, #124]	; (13920 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   138a4:	2600      	movs	r6, #0
   138a6:	428e      	cmp	r6, r1
   138a8:	db01      	blt.n	138ae <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   138aa:	4610      	mov	r0, r2
   138ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   138ae:	6844      	ldr	r4, [r0, #4]
   138b0:	b39c      	cbz	r4, 1391a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   138b2:	b153      	cbz	r3, 138ca <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   138b4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   138b8:	ea14 0f0c 	tst.w	r4, ip
   138bc:	d118      	bne.n	138f0 <mpu_configure_regions+0x50>
		&&
   138be:	2c1f      	cmp	r4, #31
   138c0:	d916      	bls.n	138f0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   138c2:	6805      	ldr	r5, [r0, #0]
		&&
   138c4:	ea1c 0f05 	tst.w	ip, r5
   138c8:	d112      	bne.n	138f0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   138ca:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   138cc:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   138ce:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   138d2:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   138d4:	d90f      	bls.n	138f6 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   138d6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   138da:	d80e      	bhi.n	138fa <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   138dc:	3c01      	subs	r4, #1
   138de:	fab4 f484 	clz	r4, r4
   138e2:	f1c4 041f 	rsb	r4, r4, #31
   138e6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   138e8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   138ea:	ea4c 0404 	orr.w	r4, ip, r4
   138ee:	d906      	bls.n	138fe <mpu_configure_regions+0x5e>
			return -EINVAL;
   138f0:	f06f 0215 	mvn.w	r2, #21
   138f4:	e7d9      	b.n	138aa <mpu_configure_regions+0xa>
		return REGION_32B;
   138f6:	2408      	movs	r4, #8
   138f8:	e7f6      	b.n	138e8 <mpu_configure_regions+0x48>
		return REGION_4G;
   138fa:	243e      	movs	r4, #62	; 0x3e
   138fc:	e7f4      	b.n	138e8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   138fe:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   13902:	4315      	orrs	r5, r2
   13904:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13908:	f044 0401 	orr.w	r4, r4, #1
   1390c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13910:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   13914:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13916:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   1391a:	3601      	adds	r6, #1
   1391c:	300c      	adds	r0, #12
   1391e:	e7c2      	b.n	138a6 <mpu_configure_regions+0x6>
   13920:	e000ed00 	.word	0xe000ed00

00013924 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13924:	4b04      	ldr	r3, [pc, #16]	; (13938 <arm_core_mpu_enable+0x14>)
   13926:	2205      	movs	r2, #5
   13928:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1392c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13930:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13934:	4770      	bx	lr
   13936:	bf00      	nop
   13938:	e000ed00 	.word	0xe000ed00

0001393c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1393c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13940:	4b02      	ldr	r3, [pc, #8]	; (1394c <arm_core_mpu_disable+0x10>)
   13942:	2200      	movs	r2, #0
   13944:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13948:	4770      	bx	lr
   1394a:	bf00      	nop
   1394c:	e000ed00 	.word	0xe000ed00

00013950 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13950:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13952:	4c03      	ldr	r4, [pc, #12]	; (13960 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13954:	2301      	movs	r3, #1
   13956:	7822      	ldrb	r2, [r4, #0]
   13958:	f7ff ffa2 	bl	138a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1395c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1395e:	bd10      	pop	{r4, pc}
   13960:	20003330 	.word	0x20003330

00013964 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13964:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13966:	4a09      	ldr	r2, [pc, #36]	; (1398c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13968:	2300      	movs	r3, #0
   1396a:	7812      	ldrb	r2, [r2, #0]
   1396c:	f7ff ff98 	bl	138a0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13970:	f110 0f16 	cmn.w	r0, #22
   13974:	d002      	beq.n	1397c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   13976:	4a06      	ldr	r2, [pc, #24]	; (13990 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13978:	2807      	cmp	r0, #7
   1397a:	dd00      	ble.n	1397e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1397c:	bd08      	pop	{r3, pc}
   1397e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   13982:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   13986:	3001      	adds	r0, #1
   13988:	e7f6      	b.n	13978 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   1398a:	bf00      	nop
   1398c:	20003330 	.word	0x20003330
   13990:	e000ed00 	.word	0xe000ed00

00013994 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13994:	4914      	ldr	r1, [pc, #80]	; (139e8 <z_arm_mpu_init+0x54>)
   13996:	6808      	ldr	r0, [r1, #0]
   13998:	2808      	cmp	r0, #8
{
   1399a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   1399c:	d821      	bhi.n	139e2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1399e:	f7ff ffcd 	bl	1393c <arm_core_mpu_disable>
   139a2:	4c12      	ldr	r4, [pc, #72]	; (139ec <z_arm_mpu_init+0x58>)
   139a4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   139a6:	2200      	movs	r2, #0
   139a8:	4290      	cmp	r0, r2
   139aa:	f101 010c 	add.w	r1, r1, #12
   139ae:	d105      	bne.n	139bc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   139b0:	4b0f      	ldr	r3, [pc, #60]	; (139f0 <z_arm_mpu_init+0x5c>)
   139b2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   139b4:	f7ff ffb6 	bl	13924 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   139b8:	2000      	movs	r0, #0
}
   139ba:	bd10      	pop	{r4, pc}
   139bc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   139c0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   139c4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   139c8:	4313      	orrs	r3, r2
   139ca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   139ce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   139d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   139d6:	f043 0301 	orr.w	r3, r3, #1
   139da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   139de:	3201      	adds	r2, #1
   139e0:	e7e2      	b.n	139a8 <z_arm_mpu_init+0x14>
		return -1;
   139e2:	f04f 30ff 	mov.w	r0, #4294967295
   139e6:	e7e8      	b.n	139ba <z_arm_mpu_init+0x26>
   139e8:	00023cc0 	.word	0x00023cc0
   139ec:	e000ed00 	.word	0xe000ed00
   139f0:	20003330 	.word	0x20003330

000139f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   139f4:	4b01      	ldr	r3, [pc, #4]	; (139fc <__stdout_hook_install+0x8>)
   139f6:	6018      	str	r0, [r3, #0]
}
   139f8:	4770      	bx	lr
   139fa:	bf00      	nop
   139fc:	20000624 	.word	0x20000624

00013a00 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   13a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a02:	4f0a      	ldr	r7, [pc, #40]	; (13a2c <z_impl_zephyr_write_stdout+0x2c>)
   13a04:	460d      	mov	r5, r1
   13a06:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   13a08:	f1c0 0401 	rsb	r4, r0, #1
   13a0c:	19a3      	adds	r3, r4, r6
   13a0e:	429d      	cmp	r5, r3
   13a10:	dc01      	bgt.n	13a16 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   13a12:	4628      	mov	r0, r5
   13a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   13a16:	7873      	ldrb	r3, [r6, #1]
   13a18:	2b0a      	cmp	r3, #10
   13a1a:	d102      	bne.n	13a22 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   13a1c:	683b      	ldr	r3, [r7, #0]
   13a1e:	200d      	movs	r0, #13
   13a20:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   13a22:	683b      	ldr	r3, [r7, #0]
   13a24:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   13a28:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   13a2a:	e7ef      	b.n	13a0c <z_impl_zephyr_write_stdout+0xc>
   13a2c:	20000624 	.word	0x20000624

00013a30 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   13a30:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   13a32:	211d      	movs	r1, #29
   13a34:	4804      	ldr	r0, [pc, #16]	; (13a48 <__chk_fail+0x18>)
   13a36:	f7ff ffe3 	bl	13a00 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   13a3a:	4040      	eors	r0, r0
   13a3c:	f380 8811 	msr	BASEPRI, r0
   13a40:	f04f 0003 	mov.w	r0, #3
   13a44:	df02      	svc	2
	CODE_UNREACHABLE;
   13a46:	bf00      	nop
   13a48:	000247c8 	.word	0x000247c8

00013a4c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13a4c:	f04f 0240 	mov.w	r2, #64	; 0x40
   13a50:	f3ef 8311 	mrs	r3, BASEPRI
   13a54:	f382 8812 	msr	BASEPRI_MAX, r2
   13a58:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13a5c:	4a04      	ldr	r2, [pc, #16]	; (13a70 <nordicsemi_nrf52_init+0x24>)
   13a5e:	2101      	movs	r1, #1
   13a60:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13a64:	f383 8811 	msr	BASEPRI, r3
   13a68:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13a6c:	2000      	movs	r0, #0
   13a6e:	4770      	bx	lr
   13a70:	4001e000 	.word	0x4001e000

00013a74 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   13a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13a78:	b2c0      	uxtb	r0, r0
   13a7a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13a7e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13a82:	4905      	ldr	r1, [pc, #20]	; (13a98 <sys_arch_reboot+0x24>)
   13a84:	4b05      	ldr	r3, [pc, #20]	; (13a9c <sys_arch_reboot+0x28>)
   13a86:	68ca      	ldr	r2, [r1, #12]
   13a88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13a8c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13a8e:	60cb      	str	r3, [r1, #12]
   13a90:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13a94:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13a96:	e7fd      	b.n	13a94 <sys_arch_reboot+0x20>
   13a98:	e000ed00 	.word	0xe000ed00
   13a9c:	05fa0004 	.word	0x05fa0004

00013aa0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13aa0:	b120      	cbz	r0, 13aac <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13aa2:	4b03      	ldr	r3, [pc, #12]	; (13ab0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13aa4:	0180      	lsls	r0, r0, #6
   13aa6:	f043 0301 	orr.w	r3, r3, #1
   13aaa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13aac:	4770      	bx	lr
   13aae:	bf00      	nop
   13ab0:	00023860 	.word	0x00023860

00013ab4 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   13ab4:	7803      	ldrb	r3, [r0, #0]
   13ab6:	2b01      	cmp	r3, #1
{
   13ab8:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   13aba:	d013      	beq.n	13ae4 <uuid_to_uuid128+0x30>
   13abc:	2b02      	cmp	r3, #2
   13abe:	d027      	beq.n	13b10 <uuid_to_uuid128+0x5c>
   13ac0:	b97b      	cbnz	r3, 13ae2 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13ac2:	4b19      	ldr	r3, [pc, #100]	; (13b28 <uuid_to_uuid128+0x74>)
   13ac4:	460a      	mov	r2, r1
   13ac6:	f103 0410 	add.w	r4, r3, #16
   13aca:	f853 5b04 	ldr.w	r5, [r3], #4
   13ace:	f842 5b04 	str.w	r5, [r2], #4
   13ad2:	42a3      	cmp	r3, r4
   13ad4:	d1f9      	bne.n	13aca <uuid_to_uuid128+0x16>
   13ad6:	781b      	ldrb	r3, [r3, #0]
   13ad8:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13ada:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13adc:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   13ade:	0a1b      	lsrs	r3, r3, #8
   13ae0:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13ae2:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   13ae4:	4b10      	ldr	r3, [pc, #64]	; (13b28 <uuid_to_uuid128+0x74>)
   13ae6:	460a      	mov	r2, r1
   13ae8:	f103 0410 	add.w	r4, r3, #16
   13aec:	f853 5b04 	ldr.w	r5, [r3], #4
   13af0:	f842 5b04 	str.w	r5, [r2], #4
   13af4:	42a3      	cmp	r3, r4
   13af6:	d1f9      	bne.n	13aec <uuid_to_uuid128+0x38>
   13af8:	781b      	ldrb	r3, [r3, #0]
   13afa:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13afc:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   13afe:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   13b00:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13b04:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13b06:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   13b08:	0a1b      	lsrs	r3, r3, #8
   13b0a:	738a      	strb	r2, [r1, #14]
   13b0c:	740b      	strb	r3, [r1, #16]
}
   13b0e:	e7e8      	b.n	13ae2 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13b10:	f100 0310 	add.w	r3, r0, #16
   13b14:	f850 2b04 	ldr.w	r2, [r0], #4
   13b18:	f841 2b04 	str.w	r2, [r1], #4
   13b1c:	4298      	cmp	r0, r3
   13b1e:	d1f9      	bne.n	13b14 <uuid_to_uuid128+0x60>
   13b20:	7803      	ldrb	r3, [r0, #0]
   13b22:	700b      	strb	r3, [r1, #0]
   13b24:	e7dd      	b.n	13ae2 <uuid_to_uuid128+0x2e>
   13b26:	bf00      	nop
   13b28:	000247f5 	.word	0x000247f5

00013b2c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13b2c:	b538      	push	{r3, r4, r5, lr}
   13b2e:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13b30:	4805      	ldr	r0, [pc, #20]	; (13b48 <bt_buf_get_rx+0x1c>)
   13b32:	f00e f9d6 	bl	21ee2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13b36:	4604      	mov	r4, r0
   13b38:	b120      	cbz	r0, 13b44 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13b3a:	2100      	movs	r1, #0
   13b3c:	3008      	adds	r0, #8
   13b3e:	f00e f9ef 	bl	21f20 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13b42:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13b44:	4620      	mov	r0, r4
   13b46:	bd38      	pop	{r3, r4, r5, pc}
   13b48:	20000b34 	.word	0x20000b34

00013b4c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13b4c:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13b4e:	490b      	ldr	r1, [pc, #44]	; (13b7c <bt_buf_get_cmd_complete+0x30>)
{
   13b50:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   13b52:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   13b56:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   13b58:	b920      	cbnz	r0, 13b64 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13b5e:	2001      	movs	r0, #1
   13b60:	f7ff bfe4 	b.w	13b2c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13b64:	f00e fa36 	bl	21fd4 <net_buf_ref>
   13b68:	2301      	movs	r3, #1
		buf->len = 0U;
   13b6a:	2100      	movs	r1, #0
   13b6c:	7503      	strb	r3, [r0, #20]
   13b6e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13b70:	4604      	mov	r4, r0
   13b72:	3008      	adds	r0, #8
   13b74:	f00e f9d4 	bl	21f20 <net_buf_simple_reserve>
}
   13b78:	4620      	mov	r0, r4
   13b7a:	bd10      	pop	{r4, pc}
   13b7c:	200002c8 	.word	0x200002c8

00013b80 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13b80:	b570      	push	{r4, r5, r6, lr}
   13b82:	4604      	mov	r4, r0
	switch (evt) {
   13b84:	2c0f      	cmp	r4, #15
{
   13b86:	460d      	mov	r5, r1
   13b88:	4610      	mov	r0, r2
   13b8a:	4619      	mov	r1, r3
	switch (evt) {
   13b8c:	d805      	bhi.n	13b9a <bt_buf_get_evt+0x1a>
   13b8e:	2c0d      	cmp	r4, #13
   13b90:	d912      	bls.n	13bb8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13b96:	f7ff bfd9 	b.w	13b4c <bt_buf_get_cmd_complete>
	switch (evt) {
   13b9a:	2c13      	cmp	r4, #19
   13b9c:	d10c      	bne.n	13bb8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   13b9e:	480b      	ldr	r0, [pc, #44]	; (13bcc <bt_buf_get_evt+0x4c>)
   13ba0:	f00e f99f 	bl	21ee2 <net_buf_alloc_fixed>
			if (buf) {
   13ba4:	4604      	mov	r4, r0
   13ba6:	b128      	cbz	r0, 13bb4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   13ba8:	2100      	movs	r1, #0
   13baa:	3008      	adds	r0, #8
   13bac:	f00e f9b8 	bl	21f20 <net_buf_simple_reserve>
   13bb0:	2301      	movs	r3, #1
   13bb2:	7523      	strb	r3, [r4, #20]
}
   13bb4:	4620      	mov	r0, r4
   13bb6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13bb8:	4602      	mov	r2, r0
   13bba:	460b      	mov	r3, r1
		if (discardable) {
   13bbc:	b10d      	cbz	r5, 13bc2 <bt_buf_get_evt+0x42>
   13bbe:	4804      	ldr	r0, [pc, #16]	; (13bd0 <bt_buf_get_evt+0x50>)
   13bc0:	e7ee      	b.n	13ba0 <bt_buf_get_evt+0x20>
}
   13bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13bc6:	2001      	movs	r0, #1
   13bc8:	f7ff bfb0 	b.w	13b2c <bt_buf_get_rx>
   13bcc:	20000b60 	.word	0x20000b60
   13bd0:	20000ab0 	.word	0x20000ab0

00013bd4 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13bd4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13bd6:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   13bd8:	781a      	ldrb	r2, [r3, #0]
   13bda:	b972      	cbnz	r2, 13bfa <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13bdc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13be0:	4620      	mov	r0, r4
   13be2:	f001 fc77 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   13be6:	4605      	mov	r5, r0
   13be8:	b940      	cbnz	r0, 13bfc <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13bea:	4b08      	ldr	r3, [pc, #32]	; (13c0c <hci_disconn_complete_prio+0x38>)
   13bec:	881a      	ldrh	r2, [r3, #0]
   13bee:	b922      	cbnz	r2, 13bfa <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13bf0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13bf4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13bf8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   13bfa:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13bfc:	2101      	movs	r1, #1
   13bfe:	f001 fc71 	bl	154e4 <bt_conn_set_state>
	bt_conn_unref(conn);
   13c02:	4628      	mov	r0, r5
}
   13c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13c08:	f00c bf1c 	b.w	20a44 <bt_conn_unref>
   13c0c:	20003318 	.word	0x20003318

00013c10 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   13c10:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13c12:	2101      	movs	r1, #1
   13c14:	4604      	mov	r4, r0
   13c16:	3008      	adds	r0, #8
   13c18:	f00e fa29 	bl	2206e <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13c1c:	4621      	mov	r1, r4
   13c1e:	4a03      	ldr	r2, [pc, #12]	; (13c2c <hci_le_meta_event+0x1c>)
   13c20:	7800      	ldrb	r0, [r0, #0]
}
   13c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13c26:	2307      	movs	r3, #7
   13c28:	f00c ba6d 	b.w	20106 <handle_event>
   13c2c:	00023d10 	.word	0x00023d10

00013c30 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13c30:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13c32:	4c0c      	ldr	r4, [pc, #48]	; (13c64 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13c34:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13c36:	2205      	movs	r2, #5
   13c38:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   13c3c:	f001 fde8 	bl	15810 <bt_conn_lookup_state_le>
		if (!conn) {
   13c40:	b970      	cbnz	r0, 13c60 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13c42:	4b09      	ldr	r3, [pc, #36]	; (13c68 <find_pending_connect.part.0+0x38>)
   13c44:	6818      	ldr	r0, [r3, #0]
   13c46:	889a      	ldrh	r2, [r3, #4]
   13c48:	9000      	str	r0, [sp, #0]
   13c4a:	799b      	ldrb	r3, [r3, #6]
   13c4c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13c50:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   13c54:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13c58:	2204      	movs	r2, #4
   13c5a:	4669      	mov	r1, sp
   13c5c:	f001 fdd8 	bl	15810 <bt_conn_lookup_state_le>
}
   13c60:	b002      	add	sp, #8
   13c62:	bd10      	pop	{r4, pc}
   13c64:	200002c8 	.word	0x200002c8
   13c68:	0002384c 	.word	0x0002384c

00013c6c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   13c6c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13c6e:	483c      	ldr	r0, [pc, #240]	; (13d60 <rx_work_handler+0xf4>)
   13c70:	f00e f978 	bl	21f64 <net_buf_slist_get>
	if (!buf) {
   13c74:	4604      	mov	r4, r0
   13c76:	2800      	cmp	r0, #0
   13c78:	d071      	beq.n	13d5e <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13c7a:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   13c7c:	2b01      	cmp	r3, #1
   13c7e:	d03f      	beq.n	13d00 <rx_work_handler+0x94>
   13c80:	2b03      	cmp	r3, #3
   13c82:	d11f      	bne.n	13cc4 <rx_work_handler+0x58>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13c84:	8983      	ldrh	r3, [r0, #12]
   13c86:	2b03      	cmp	r3, #3
   13c88:	d80c      	bhi.n	13ca4 <rx_work_handler+0x38>
   13c8a:	4a36      	ldr	r2, [pc, #216]	; (13d64 <rx_work_handler+0xf8>)
   13c8c:	4936      	ldr	r1, [pc, #216]	; (13d68 <rx_work_handler+0xfc>)
   13c8e:	4837      	ldr	r0, [pc, #220]	; (13d6c <rx_work_handler+0x100>)
   13c90:	f240 13d9 	movw	r3, #473	; 0x1d9
   13c94:	f00b ff48 	bl	1fb28 <assert_print>
   13c98:	4040      	eors	r0, r0
   13c9a:	f380 8811 	msr	BASEPRI, r0
   13c9e:	f04f 0003 	mov.w	r0, #3
   13ca2:	df02      	svc	2
   13ca4:	2104      	movs	r1, #4
   13ca6:	f104 0008 	add.w	r0, r4, #8
   13caa:	f00e f9e0 	bl	2206e <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13cae:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13cb0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13cb2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13cb4:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   13cb6:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13cb8:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   13cbc:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   13cbe:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13cc0:	d003      	beq.n	13cca <rx_work_handler+0x5e>
	net_buf_unref(buf);
   13cc2:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   13cc4:	f003 fa7a 	bl	171bc <net_buf_unref>
		break;
   13cc8:	e00f      	b.n	13cea <rx_work_handler+0x7e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13cca:	f001 fc03 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   13cce:	4605      	mov	r5, r0
   13cd0:	2800      	cmp	r0, #0
   13cd2:	d0f6      	beq.n	13cc2 <rx_work_handler+0x56>
	acl(buf)->index = bt_conn_index(conn);
   13cd4:	f001 fcb6 	bl	15644 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13cd8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   13cda:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13cdc:	4621      	mov	r1, r4
   13cde:	4628      	mov	r0, r5
   13ce0:	f00c fe48 	bl	20974 <bt_conn_recv>
	bt_conn_unref(conn);
   13ce4:	4628      	mov	r0, r5
   13ce6:	f00c fead 	bl	20a44 <bt_conn_unref>
	return list->head;
   13cea:	4b21      	ldr	r3, [pc, #132]	; (13d70 <rx_work_handler+0x104>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   13cec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   13cf0:	2b00      	cmp	r3, #0
   13cf2:	d034      	beq.n	13d5e <rx_work_handler+0xf2>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   13cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13cf8:	491e      	ldr	r1, [pc, #120]	; (13d74 <rx_work_handler+0x108>)
   13cfa:	481f      	ldr	r0, [pc, #124]	; (13d78 <rx_work_handler+0x10c>)
   13cfc:	f00e bfa8 	b.w	22c50 <k_work_submit_to_queue>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13d00:	8983      	ldrh	r3, [r0, #12]
   13d02:	2b01      	cmp	r3, #1
   13d04:	d80c      	bhi.n	13d20 <rx_work_handler+0xb4>
   13d06:	4a17      	ldr	r2, [pc, #92]	; (13d64 <rx_work_handler+0xf8>)
   13d08:	4917      	ldr	r1, [pc, #92]	; (13d68 <rx_work_handler+0xfc>)
   13d0a:	4818      	ldr	r0, [pc, #96]	; (13d6c <rx_work_handler+0x100>)
   13d0c:	f640 1337 	movw	r3, #2359	; 0x937
   13d10:	f00b ff0a 	bl	1fb28 <assert_print>
   13d14:	4040      	eors	r0, r0
   13d16:	f380 8811 	msr	BASEPRI, r0
   13d1a:	f04f 0003 	mov.w	r0, #3
   13d1e:	df02      	svc	2
   13d20:	2102      	movs	r1, #2
   13d22:	f104 0008 	add.w	r0, r4, #8
   13d26:	f00e f9a2 	bl	2206e <net_buf_simple_pull_mem>
   13d2a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13d2c:	7800      	ldrb	r0, [r0, #0]
   13d2e:	f00c f9d8 	bl	200e2 <bt_hci_evt_get_flags>
   13d32:	0783      	lsls	r3, r0, #30
   13d34:	d40c      	bmi.n	13d50 <rx_work_handler+0xe4>
   13d36:	4a0b      	ldr	r2, [pc, #44]	; (13d64 <rx_work_handler+0xf8>)
   13d38:	4910      	ldr	r1, [pc, #64]	; (13d7c <rx_work_handler+0x110>)
   13d3a:	480c      	ldr	r0, [pc, #48]	; (13d6c <rx_work_handler+0x100>)
   13d3c:	f640 133b 	movw	r3, #2363	; 0x93b
   13d40:	f00b fef2 	bl	1fb28 <assert_print>
   13d44:	4040      	eors	r0, r0
   13d46:	f380 8811 	msr	BASEPRI, r0
   13d4a:	f04f 0003 	mov.w	r0, #3
   13d4e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   13d50:	4a0b      	ldr	r2, [pc, #44]	; (13d80 <rx_work_handler+0x114>)
   13d52:	7828      	ldrb	r0, [r5, #0]
   13d54:	2304      	movs	r3, #4
   13d56:	4621      	mov	r1, r4
   13d58:	f00c f9d5 	bl	20106 <handle_event>
   13d5c:	e7b1      	b.n	13cc2 <rx_work_handler+0x56>
}
   13d5e:	bd70      	pop	{r4, r5, r6, pc}
   13d60:	200003fc 	.word	0x200003fc
   13d64:	00024806 	.word	0x00024806
   13d68:	0002483a 	.word	0x0002483a
   13d6c:	00024853 	.word	0x00024853
   13d70:	200002c8 	.word	0x200002c8
   13d74:	20000664 	.word	0x20000664
   13d78:	20001890 	.word	0x20001890
   13d7c:	00024870 	.word	0x00024870
   13d80:	00023d58 	.word	0x00023d58

00013d84 <hci_cmd_done>:
{
   13d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13d86:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13d88:	7990      	ldrb	r0, [r2, #6]
{
   13d8a:	460e      	mov	r6, r1
   13d8c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13d8e:	f003 f951 	bl	17034 <net_buf_pool_get>
   13d92:	4b28      	ldr	r3, [pc, #160]	; (13e34 <hci_cmd_done+0xb0>)
   13d94:	4283      	cmp	r3, r0
   13d96:	d14b      	bne.n	13e30 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   13d98:	4620      	mov	r0, r4
   13d9a:	f003 f953 	bl	17044 <net_buf_id>
   13d9e:	4d26      	ldr	r5, [pc, #152]	; (13e38 <hci_cmd_done+0xb4>)
   13da0:	230c      	movs	r3, #12
   13da2:	fb03 5000 	mla	r0, r3, r0, r5
   13da6:	8843      	ldrh	r3, [r0, #2]
   13da8:	42bb      	cmp	r3, r7
   13daa:	d141      	bne.n	13e30 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   13dac:	4f23      	ldr	r7, [pc, #140]	; (13e3c <hci_cmd_done+0xb8>)
   13dae:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   13db2:	b120      	cbz	r0, 13dbe <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   13db4:	f003 fa02 	bl	171bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13db8:	2300      	movs	r3, #0
   13dba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   13dbe:	4620      	mov	r0, r4
   13dc0:	f003 f940 	bl	17044 <net_buf_id>
   13dc4:	270c      	movs	r7, #12
   13dc6:	fb07 5000 	mla	r0, r7, r0, r5
   13dca:	6843      	ldr	r3, [r0, #4]
   13dcc:	b19b      	cbz	r3, 13df6 <hci_cmd_done+0x72>
   13dce:	b996      	cbnz	r6, 13df6 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13dd0:	4620      	mov	r0, r4
   13dd2:	f003 f937 	bl	17044 <net_buf_id>
   13dd6:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13dda:	2101      	movs	r1, #1
   13ddc:	6842      	ldr	r2, [r0, #4]
   13dde:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   13de2:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13de4:	f003 071f 	and.w	r7, r3, #31
   13de8:	40b9      	lsls	r1, r7
	if (val) {
   13dea:	095b      	lsrs	r3, r3, #5
   13dec:	b1d2      	cbz	r2, 13e24 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13dee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13df2:	f00c f9c9 	bl	20188 <atomic_or>
	if (cmd(buf)->sync) {
   13df6:	4620      	mov	r0, r4
   13df8:	f003 f924 	bl	17044 <net_buf_id>
   13dfc:	270c      	movs	r7, #12
   13dfe:	fb07 5000 	mla	r0, r7, r0, r5
   13e02:	6883      	ldr	r3, [r0, #8]
   13e04:	b1a3      	cbz	r3, 13e30 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   13e06:	4620      	mov	r0, r4
   13e08:	f003 f91c 	bl	17044 <net_buf_id>
   13e0c:	4378      	muls	r0, r7
   13e0e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13e10:	4620      	mov	r0, r4
   13e12:	f003 f917 	bl	17044 <net_buf_id>
   13e16:	fb07 5500 	mla	r5, r7, r0, r5
   13e1a:	68a8      	ldr	r0, [r5, #8]
}
   13e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13e20:	f006 bf28 	b.w	1ac74 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13e24:	43c9      	mvns	r1, r1
   13e26:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13e2a:	f00c fa31 	bl	20290 <atomic_and.isra.0>
   13e2e:	e7e2      	b.n	13df6 <hci_cmd_done+0x72>
   13e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e32:	bf00      	nop
   13e34:	20000b08 	.word	0x20000b08
   13e38:	2000246c 	.word	0x2000246c
   13e3c:	200002c8 	.word	0x200002c8

00013e40 <hci_cmd_status>:
{
   13e40:	b538      	push	{r3, r4, r5, lr}
   13e42:	2104      	movs	r1, #4
   13e44:	4604      	mov	r4, r0
   13e46:	3008      	adds	r0, #8
   13e48:	f00e f911 	bl	2206e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13e4c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13e4e:	7801      	ldrb	r1, [r0, #0]
   13e50:	8840      	ldrh	r0, [r0, #2]
   13e52:	4622      	mov	r2, r4
   13e54:	f7ff ff96 	bl	13d84 <hci_cmd_done>
	if (ncmd) {
   13e58:	b125      	cbz	r5, 13e64 <hci_cmd_status+0x24>
   13e5a:	4803      	ldr	r0, [pc, #12]	; (13e68 <hci_cmd_status+0x28>)
}
   13e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13e60:	f006 bf08 	b.w	1ac74 <z_impl_k_sem_give>
   13e64:	bd38      	pop	{r3, r4, r5, pc}
   13e66:	bf00      	nop
   13e68:	200003e0 	.word	0x200003e0

00013e6c <hci_cmd_complete>:
{
   13e6c:	b538      	push	{r3, r4, r5, lr}
   13e6e:	2103      	movs	r1, #3
   13e70:	4604      	mov	r4, r0
   13e72:	3008      	adds	r0, #8
   13e74:	f00e f8fb 	bl	2206e <net_buf_simple_pull_mem>
	status = buf->data[0];
   13e78:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13e7a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13e7c:	7819      	ldrb	r1, [r3, #0]
   13e7e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13e82:	4622      	mov	r2, r4
   13e84:	f7ff ff7e 	bl	13d84 <hci_cmd_done>
	if (ncmd) {
   13e88:	b125      	cbz	r5, 13e94 <hci_cmd_complete+0x28>
   13e8a:	4803      	ldr	r0, [pc, #12]	; (13e98 <hci_cmd_complete+0x2c>)
}
   13e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13e90:	f006 bef0 	b.w	1ac74 <z_impl_k_sem_give>
   13e94:	bd38      	pop	{r3, r4, r5, pc}
   13e96:	bf00      	nop
   13e98:	200003e0 	.word	0x200003e0

00013e9c <bt_hci_cmd_state_set_init>:
{
   13e9c:	b510      	push	{r4, lr}
	state->bit = bit;
   13e9e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   13ea2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13ea6:	720b      	strb	r3, [r1, #8]
{
   13ea8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13eaa:	f003 f8cb 	bl	17044 <net_buf_id>
   13eae:	4b03      	ldr	r3, [pc, #12]	; (13ebc <bt_hci_cmd_state_set_init+0x20>)
   13eb0:	220c      	movs	r2, #12
   13eb2:	fb02 3300 	mla	r3, r2, r0, r3
   13eb6:	605c      	str	r4, [r3, #4]
}
   13eb8:	bd10      	pop	{r4, pc}
   13eba:	bf00      	nop
   13ebc:	2000246c 	.word	0x2000246c

00013ec0 <bt_hci_cmd_create>:
{
   13ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13ec4:	f04f 32ff 	mov.w	r2, #4294967295
   13ec8:	f04f 33ff 	mov.w	r3, #4294967295
   13ecc:	4606      	mov	r6, r0
   13ece:	4817      	ldr	r0, [pc, #92]	; (13f2c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   13ed0:	4d17      	ldr	r5, [pc, #92]	; (13f30 <bt_hci_cmd_create+0x70>)
{
   13ed2:	460f      	mov	r7, r1
   13ed4:	f00e f805 	bl	21ee2 <net_buf_alloc_fixed>
   13ed8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13eda:	f100 0a08 	add.w	sl, r0, #8
   13ede:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13ee0:	f04f 0800 	mov.w	r8, #0
   13ee4:	4650      	mov	r0, sl
   13ee6:	f00e f81b 	bl	21f20 <net_buf_simple_reserve>
   13eea:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   13eee:	4620      	mov	r0, r4
   13ef0:	f003 f8a8 	bl	17044 <net_buf_id>
   13ef4:	f04f 090c 	mov.w	r9, #12
   13ef8:	fb09 5000 	mla	r0, r9, r0, r5
   13efc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13efe:	4620      	mov	r0, r4
   13f00:	f003 f8a0 	bl	17044 <net_buf_id>
   13f04:	fb09 5000 	mla	r0, r9, r0, r5
   13f08:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13f0c:	4620      	mov	r0, r4
   13f0e:	f003 f899 	bl	17044 <net_buf_id>
   13f12:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   13f16:	2103      	movs	r1, #3
   13f18:	f8c5 8004 	str.w	r8, [r5, #4]
   13f1c:	4650      	mov	r0, sl
   13f1e:	f00e f87f 	bl	22020 <net_buf_simple_add>
	hdr->param_len = param_len;
   13f22:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   13f24:	8006      	strh	r6, [r0, #0]
}
   13f26:	4620      	mov	r0, r4
   13f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f2c:	20000b08 	.word	0x20000b08
   13f30:	2000246c 	.word	0x2000246c

00013f34 <bt_hci_cmd_send_sync>:
{
   13f34:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f36:	4615      	mov	r5, r2
   13f38:	b087      	sub	sp, #28
	if (!buf) {
   13f3a:	460c      	mov	r4, r1
   13f3c:	b921      	cbnz	r1, 13f48 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   13f3e:	f7ff ffbf 	bl	13ec0 <bt_hci_cmd_create>
		if (!buf) {
   13f42:	4604      	mov	r4, r0
   13f44:	2800      	cmp	r0, #0
   13f46:	d048      	beq.n	13fda <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13f48:	2201      	movs	r2, #1
   13f4a:	2100      	movs	r1, #0
   13f4c:	4668      	mov	r0, sp
   13f4e:	f00e fde6 	bl	22b1e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13f52:	4620      	mov	r0, r4
   13f54:	f003 f876 	bl	17044 <net_buf_id>
   13f58:	4f21      	ldr	r7, [pc, #132]	; (13fe0 <bt_hci_cmd_send_sync+0xac>)
   13f5a:	230c      	movs	r3, #12
   13f5c:	fb03 7000 	mla	r0, r3, r0, r7
   13f60:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13f64:	4620      	mov	r0, r4
   13f66:	f00e f835 	bl	21fd4 <net_buf_ref>
   13f6a:	4601      	mov	r1, r0
   13f6c:	481d      	ldr	r0, [pc, #116]	; (13fe4 <bt_hci_cmd_send_sync+0xb0>)
   13f6e:	f00e f824 	bl	21fba <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13f72:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13f76:	2300      	movs	r3, #0
   13f78:	4668      	mov	r0, sp
   13f7a:	f006 fea1 	bl	1acc0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13f7e:	4606      	mov	r6, r0
   13f80:	b180      	cbz	r0, 13fa4 <bt_hci_cmd_send_sync+0x70>
   13f82:	4a19      	ldr	r2, [pc, #100]	; (13fe8 <bt_hci_cmd_send_sync+0xb4>)
   13f84:	4919      	ldr	r1, [pc, #100]	; (13fec <bt_hci_cmd_send_sync+0xb8>)
   13f86:	481a      	ldr	r0, [pc, #104]	; (13ff0 <bt_hci_cmd_send_sync+0xbc>)
   13f88:	f240 1335 	movw	r3, #309	; 0x135
   13f8c:	f00b fdcc 	bl	1fb28 <assert_print>
   13f90:	4818      	ldr	r0, [pc, #96]	; (13ff4 <bt_hci_cmd_send_sync+0xc0>)
   13f92:	4631      	mov	r1, r6
   13f94:	f00b fdc8 	bl	1fb28 <assert_print>
   13f98:	4040      	eors	r0, r0
   13f9a:	f380 8811 	msr	BASEPRI, r0
   13f9e:	f04f 0003 	mov.w	r0, #3
   13fa2:	df02      	svc	2
	status = cmd(buf)->status;
   13fa4:	4620      	mov	r0, r4
   13fa6:	f003 f84d 	bl	17044 <net_buf_id>
   13faa:	230c      	movs	r3, #12
   13fac:	4358      	muls	r0, r3
   13fae:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   13fb0:	b156      	cbz	r6, 13fc8 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   13fb2:	4620      	mov	r0, r4
   13fb4:	f003 f902 	bl	171bc <net_buf_unref>
			return -EIO;
   13fb8:	2e09      	cmp	r6, #9
   13fba:	bf0c      	ite	eq
   13fbc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   13fc0:	f06f 0004 	mvnne.w	r0, #4
}
   13fc4:	b007      	add	sp, #28
   13fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   13fc8:	b115      	cbz	r5, 13fd0 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   13fca:	602c      	str	r4, [r5, #0]
	return 0;
   13fcc:	4630      	mov	r0, r6
   13fce:	e7f9      	b.n	13fc4 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   13fd0:	4620      	mov	r0, r4
   13fd2:	f003 f8f3 	bl	171bc <net_buf_unref>
	return 0;
   13fd6:	4628      	mov	r0, r5
   13fd8:	e7f4      	b.n	13fc4 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   13fda:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13fde:	e7f1      	b.n	13fc4 <bt_hci_cmd_send_sync+0x90>
   13fe0:	2000246c 	.word	0x2000246c
   13fe4:	20000404 	.word	0x20000404
   13fe8:	00024806 	.word	0x00024806
   13fec:	0002489e 	.word	0x0002489e
   13ff0:	00024853 	.word	0x00024853
   13ff4:	000248a7 	.word	0x000248a7

00013ff8 <bt_hci_le_enh_conn_complete>:
{
   13ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13ffc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14000:	4a7f      	ldr	r2, [pc, #508]	; (14200 <bt_hci_le_enh_conn_complete+0x208>)
	if (evt->status) {
   14002:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   14004:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   14006:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   1400a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1400e:	b29b      	uxth	r3, r3
   14010:	4299      	cmp	r1, r3
   14012:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   14016:	bf08      	it	eq
   14018:	8016      	strheq	r6, [r2, #0]
{
   1401a:	b089      	sub	sp, #36	; 0x24
   1401c:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1401e:	fa1f f887 	uxth.w	r8, r7
			return true;
   14022:	bf08      	it	eq
   14024:	2601      	moveq	r6, #1
	if (evt->status) {
   14026:	b1c4      	cbz	r4, 1405a <bt_hci_le_enh_conn_complete+0x62>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14028:	2c3c      	cmp	r4, #60	; 0x3c
   1402a:	d148      	bne.n	140be <bt_hci_le_enh_conn_complete+0xc6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1402c:	f000 ff10 	bl	14e50 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14030:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14034:	3010      	adds	r0, #16
   14036:	f00c f92b 	bl	20290 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1403a:	2000      	movs	r0, #0
   1403c:	f7ff fdf8 	bl	13c30 <find_pending_connect.part.0>
		if (!conn) {
   14040:	4605      	mov	r5, r0
   14042:	2800      	cmp	r0, #0
   14044:	d03b      	beq.n	140be <bt_hci_le_enh_conn_complete+0xc6>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14046:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14048:	2100      	movs	r1, #0
   1404a:	f001 fa4b 	bl	154e4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1404e:	4628      	mov	r0, r5
}
   14050:	b009      	add	sp, #36	; 0x24
   14052:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   14056:	f00c bcf5 	b.w	20a44 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1405a:	7903      	ldrb	r3, [r0, #4]
   1405c:	3b02      	subs	r3, #2
   1405e:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14060:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14064:	d82e      	bhi.n	140c4 <bt_hci_le_enh_conn_complete+0xcc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14066:	4649      	mov	r1, r9
   14068:	a806      	add	r0, sp, #24
   1406a:	f00c f8ed 	bl	20248 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1406e:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14072:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14076:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14078:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1407c:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14080:	f00c f8dd 	bl	2023e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14084:	2301      	movs	r3, #1
   14086:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1408a:	78eb      	ldrb	r3, [r5, #3]
   1408c:	2b01      	cmp	r3, #1
   1408e:	d112      	bne.n	140b6 <bt_hci_le_enh_conn_complete+0xbe>
   14090:	a806      	add	r0, sp, #24
   14092:	f7ff fdcd 	bl	13c30 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14096:	78eb      	ldrb	r3, [r5, #3]
   14098:	2b01      	cmp	r3, #1
   1409a:	4604      	mov	r4, r0
   1409c:	d10a      	bne.n	140b4 <bt_hci_le_enh_conn_complete+0xbc>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1409e:	f000 fed7 	bl	14e50 <bt_le_adv_lookup_legacy>
   140a2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   140a6:	4681      	mov	r9, r0
   140a8:	3010      	adds	r0, #16
   140aa:	f00c f8f1 	bl	20290 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   140ae:	4648      	mov	r0, r9
   140b0:	f00c fc0e 	bl	208d0 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   140b4:	b9cc      	cbnz	r4, 140ea <bt_hci_le_enh_conn_complete+0xf2>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   140b6:	211f      	movs	r1, #31
   140b8:	4640      	mov	r0, r8
   140ba:	f00c f96c 	bl	20396 <bt_hci_disconnect>
}
   140be:	b009      	add	sp, #36	; 0x24
   140c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   140c4:	78c3      	ldrb	r3, [r0, #3]
   140c6:	2b01      	cmp	r3, #1
   140c8:	bf04      	itt	eq
   140ca:	4b4e      	ldreq	r3, [pc, #312]	; (14204 <bt_hci_le_enh_conn_complete+0x20c>)
   140cc:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   140d0:	4649      	mov	r1, r9
   140d2:	4620      	mov	r0, r4
   140d4:	f00c fa97 	bl	20606 <bt_lookup_id_addr>
   140d8:	4601      	mov	r1, r0
   140da:	a806      	add	r0, sp, #24
   140dc:	f00c f8b4 	bl	20248 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   140e0:	4649      	mov	r1, r9
   140e2:	a804      	add	r0, sp, #16
   140e4:	f00c f8b0 	bl	20248 <bt_addr_le_copy>
   140e8:	e7cf      	b.n	1408a <bt_hci_le_enh_conn_complete+0x92>
	conn->handle = handle;
   140ea:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   140ec:	a906      	add	r1, sp, #24
	conn->handle = handle;
   140ee:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   140f2:	f00c f8a9 	bl	20248 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   140f6:	7e2a      	ldrb	r2, [r5, #24]
   140f8:	7deb      	ldrb	r3, [r5, #23]
   140fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   140fe:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14102:	7eaa      	ldrb	r2, [r5, #26]
   14104:	7e6b      	ldrb	r3, [r5, #25]
   14106:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1410a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1410e:	7f2a      	ldrb	r2, [r5, #28]
   14110:	7eeb      	ldrb	r3, [r5, #27]
   14112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14116:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1411a:	78eb      	ldrb	r3, [r5, #3]
   1411c:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   1411e:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14120:	2b01      	cmp	r3, #1
	conn->err = 0U;
   14122:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14124:	d115      	bne.n	14152 <bt_hci_le_enh_conn_complete+0x15a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   14126:	a904      	add	r1, sp, #16
   14128:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1412c:	f00c f88c 	bl	20248 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14130:	f000 fe8e 	bl	14e50 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   14134:	7a21      	ldrb	r1, [r4, #8]
   14136:	4a33      	ldr	r2, [pc, #204]	; (14204 <bt_hci_le_enh_conn_complete+0x20c>)
   14138:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   1413c:	4411      	add	r1, r2
   1413e:	f104 0096 	add.w	r0, r4, #150	; 0x96
   14142:	f00c f881 	bl	20248 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   14146:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1414a:	065d      	lsls	r5, r3, #25
   1414c:	d501      	bpl.n	14152 <bt_hci_le_enh_conn_complete+0x15a>
			bt_le_adv_resume();
   1414e:	f001 f825 	bl	1519c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14152:	2107      	movs	r1, #7
   14154:	4620      	mov	r0, r4
   14156:	f001 f9c5 	bl	154e4 <bt_conn_set_state>
	if (is_disconnected) {
   1415a:	b11e      	cbz	r6, 14164 <bt_hci_le_enh_conn_complete+0x16c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1415c:	2101      	movs	r1, #1
   1415e:	4620      	mov	r0, r4
   14160:	f001 f9c0 	bl	154e4 <bt_conn_set_state>
	bt_conn_connected(conn);
   14164:	4620      	mov	r0, r4
   14166:	f00c fca9 	bl	20abc <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1416a:	7aa3      	ldrb	r3, [r4, #10]
   1416c:	2b07      	cmp	r3, #7
   1416e:	d142      	bne.n	141f6 <bt_hci_le_enh_conn_complete+0x1fe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14170:	f3bf 8f5b 	dmb	ish
   14174:	6863      	ldr	r3, [r4, #4]
   14176:	4e23      	ldr	r6, [pc, #140]	; (14204 <bt_hci_le_enh_conn_complete+0x20c>)
   14178:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1417c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   14180:	d118      	bne.n	141b4 <bt_hci_le_enh_conn_complete+0x1bc>
   14182:	78e3      	ldrb	r3, [r4, #3]
   14184:	b11b      	cbz	r3, 1418e <bt_hci_le_enh_conn_complete+0x196>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14186:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1418a:	0718      	lsls	r0, r3, #28
   1418c:	d512      	bpl.n	141b4 <bt_hci_le_enh_conn_complete+0x1bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1418e:	2102      	movs	r1, #2
   14190:	f242 0016 	movw	r0, #8214	; 0x2016
   14194:	f7ff fe94 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   14198:	4605      	mov	r5, r0
   1419a:	b158      	cbz	r0, 141b4 <bt_hci_le_enh_conn_complete+0x1bc>
   1419c:	2102      	movs	r1, #2
   1419e:	3008      	adds	r0, #8
   141a0:	f00d ff3e 	bl	22020 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   141a4:	8823      	ldrh	r3, [r4, #0]
   141a6:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   141a8:	2200      	movs	r2, #0
   141aa:	4629      	mov	r1, r5
   141ac:	f242 0016 	movw	r0, #8214	; 0x2016
   141b0:	f7ff fec0 	bl	13f34 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   141b4:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   141b8:	07d9      	lsls	r1, r3, #31
   141ba:	d506      	bpl.n	141ca <bt_hci_le_enh_conn_complete+0x1d2>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   141bc:	2100      	movs	r1, #0
   141be:	2302      	movs	r3, #2
   141c0:	9100      	str	r1, [sp, #0]
   141c2:	461a      	mov	r2, r3
   141c4:	4620      	mov	r0, r4
   141c6:	f00c f91f 	bl	20408 <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   141ca:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   141ce:	069a      	lsls	r2, r3, #26
   141d0:	d511      	bpl.n	141f6 <bt_hci_le_enh_conn_complete+0x1fe>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   141d2:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   141d6:	689b      	ldr	r3, [r3, #8]
   141d8:	079b      	lsls	r3, r3, #30
   141da:	d50c      	bpl.n	141f6 <bt_hci_le_enh_conn_complete+0x1fe>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   141dc:	f10d 010e 	add.w	r1, sp, #14
   141e0:	a803      	add	r0, sp, #12
   141e2:	f00c f8c0 	bl	20366 <hci_le_read_max_data_len>
			if (!err) {
   141e6:	b930      	cbnz	r0, 141f6 <bt_hci_le_enh_conn_complete+0x1fe>
				err = bt_le_set_data_len(conn,
   141e8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   141ec:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   141f0:	4620      	mov	r0, r4
   141f2:	f00c f8eb 	bl	203cc <bt_le_set_data_len>
	bt_conn_unref(conn);
   141f6:	4620      	mov	r0, r4
   141f8:	f00c fc24 	bl	20a44 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   141fc:	e75f      	b.n	140be <bt_hci_le_enh_conn_complete+0xc6>
   141fe:	bf00      	nop
   14200:	20003318 	.word	0x20003318
   14204:	200002c8 	.word	0x200002c8

00014208 <bt_send>:
	return bt_dev.drv->send(buf);
   14208:	4b02      	ldr	r3, [pc, #8]	; (14214 <bt_send+0xc>)
   1420a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1420e:	695b      	ldr	r3, [r3, #20]
   14210:	4718      	bx	r3
   14212:	bf00      	nop
   14214:	200002c8 	.word	0x200002c8

00014218 <bt_hci_cmd_send>:
{
   14218:	b538      	push	{r3, r4, r5, lr}
   1421a:	4605      	mov	r5, r0
	if (!buf) {
   1421c:	460c      	mov	r4, r1
   1421e:	b919      	cbnz	r1, 14228 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   14220:	f7ff fe4e 	bl	13ec0 <bt_hci_cmd_create>
		if (!buf) {
   14224:	4604      	mov	r4, r0
   14226:	b198      	cbz	r0, 14250 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14228:	f640 4335 	movw	r3, #3125	; 0xc35
   1422c:	429d      	cmp	r5, r3
   1422e:	d109      	bne.n	14244 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   14230:	4620      	mov	r0, r4
   14232:	f7ff ffe9 	bl	14208 <bt_send>
		if (err) {
   14236:	4605      	mov	r5, r0
   14238:	b110      	cbz	r0, 14240 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   1423a:	4620      	mov	r0, r4
   1423c:	f002 ffbe 	bl	171bc <net_buf_unref>
}
   14240:	4628      	mov	r0, r5
   14242:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14244:	4804      	ldr	r0, [pc, #16]	; (14258 <bt_hci_cmd_send+0x40>)
   14246:	4621      	mov	r1, r4
   14248:	f00d feb7 	bl	21fba <net_buf_put>
	return 0;
   1424c:	2500      	movs	r5, #0
   1424e:	e7f7      	b.n	14240 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   14250:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14254:	e7f4      	b.n	14240 <bt_hci_cmd_send+0x28>
   14256:	bf00      	nop
   14258:	20000404 	.word	0x20000404

0001425c <hci_tx_thread>:
{
   1425c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14260:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1436c <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   14264:	f8df a108 	ldr.w	sl, [pc, #264]	; 14370 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   14268:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1426c:	4841      	ldr	r0, [pc, #260]	; (14374 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1426e:	f36f 3352 	bfc	r3, #13, #6
   14272:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14276:	f001 f8ef 	bl	15458 <bt_conn_prepare_events>
   1427a:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1427c:	483b      	ldr	r0, [pc, #236]	; (1436c <hci_tx_thread+0x110>)
   1427e:	f04f 32ff 	mov.w	r2, #4294967295
   14282:	f04f 33ff 	mov.w	r3, #4294967295
   14286:	4629      	mov	r1, r5
   14288:	f007 fc48 	bl	1bb1c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1428c:	b160      	cbz	r0, 142a8 <hci_tx_thread+0x4c>
   1428e:	493a      	ldr	r1, [pc, #232]	; (14378 <hci_tx_thread+0x11c>)
   14290:	483a      	ldr	r0, [pc, #232]	; (1437c <hci_tx_thread+0x120>)
   14292:	f640 13b3 	movw	r3, #2483	; 0x9b3
   14296:	4652      	mov	r2, sl
   14298:	f00b fc46 	bl	1fb28 <assert_print>
   1429c:	4040      	eors	r0, r0
   1429e:	f380 8811 	msr	BASEPRI, r0
   142a2:	f04f 0003 	mov.w	r0, #3
   142a6:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   142a8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14380 <hci_tx_thread+0x124>
{
   142ac:	4e2f      	ldr	r6, [pc, #188]	; (1436c <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   142ae:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   142b2:	f1a9 0b24 	sub.w	fp, r9, #36	; 0x24
	for (; count; ev++, count--) {
   142b6:	b915      	cbnz	r5, 142be <hci_tx_thread+0x62>
	z_impl_k_yield();
   142b8:	f007 f93a 	bl	1b530 <z_impl_k_yield>
	while (1) {
   142bc:	e7d4      	b.n	14268 <hci_tx_thread+0xc>
		switch (ev->state) {
   142be:	68f3      	ldr	r3, [r6, #12]
   142c0:	f3c3 3345 	ubfx	r3, r3, #13, #6
   142c4:	2b04      	cmp	r3, #4
   142c6:	d147      	bne.n	14358 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   142c8:	7b33      	ldrb	r3, [r6, #12]
   142ca:	2b00      	cmp	r3, #0
   142cc:	d147      	bne.n	1435e <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   142ce:	2200      	movs	r2, #0
   142d0:	2300      	movs	r3, #0
   142d2:	4648      	mov	r0, r9
   142d4:	f00d fe0a 	bl	21eec <net_buf_get>
	BT_ASSERT(buf);
   142d8:	4604      	mov	r4, r0
   142da:	b960      	cbnz	r0, 142f6 <hci_tx_thread+0x9a>
   142dc:	4929      	ldr	r1, [pc, #164]	; (14384 <hci_tx_thread+0x128>)
   142de:	4827      	ldr	r0, [pc, #156]	; (1437c <hci_tx_thread+0x120>)
   142e0:	f640 134a 	movw	r3, #2378	; 0x94a
   142e4:	4652      	mov	r2, sl
   142e6:	f00b fc1f 	bl	1fb28 <assert_print>
   142ea:	4040      	eors	r0, r0
   142ec:	f380 8811 	msr	BASEPRI, r0
   142f0:	f04f 0003 	mov.w	r0, #3
   142f4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   142f6:	f04f 32ff 	mov.w	r2, #4294967295
   142fa:	f04f 33ff 	mov.w	r3, #4294967295
   142fe:	4658      	mov	r0, fp
   14300:	f006 fcde 	bl	1acc0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14304:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14308:	b120      	cbz	r0, 14314 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   1430a:	f002 ff57 	bl	171bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1430e:	2300      	movs	r3, #0
   14310:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14314:	4620      	mov	r0, r4
   14316:	f00d fe5d 	bl	21fd4 <net_buf_ref>
   1431a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   1431e:	4620      	mov	r0, r4
   14320:	f7ff ff72 	bl	14208 <bt_send>
	if (err) {
   14324:	b1c0      	cbz	r0, 14358 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   14326:	4818      	ldr	r0, [pc, #96]	; (14388 <hci_tx_thread+0x12c>)
   14328:	f006 fca4 	bl	1ac74 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1432c:	4620      	mov	r0, r4
   1432e:	f002 fe89 	bl	17044 <net_buf_id>
   14332:	4b16      	ldr	r3, [pc, #88]	; (1438c <hci_tx_thread+0x130>)
   14334:	220c      	movs	r2, #12
   14336:	fb02 3000 	mla	r0, r2, r0, r3
   1433a:	211f      	movs	r1, #31
   1433c:	8840      	ldrh	r0, [r0, #2]
   1433e:	4622      	mov	r2, r4
   14340:	f7ff fd20 	bl	13d84 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   14344:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14348:	f002 ff38 	bl	171bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1434c:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1434e:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   14350:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   14354:	f002 ff32 	bl	171bc <net_buf_unref>
	for (; count; ev++, count--) {
   14358:	3614      	adds	r6, #20
   1435a:	3d01      	subs	r5, #1
   1435c:	e7ab      	b.n	142b6 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1435e:	2b01      	cmp	r3, #1
   14360:	d1fa      	bne.n	14358 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   14362:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   14364:	3838      	subs	r0, #56	; 0x38
   14366:	f001 fb53 	bl	15a10 <bt_conn_process_tx>
   1436a:	e7f5      	b.n	14358 <hci_tx_thread+0xfc>
   1436c:	20000628 	.word	0x20000628
   14370:	00024806 	.word	0x00024806
   14374:	2000063c 	.word	0x2000063c
   14378:	0002489e 	.word	0x0002489e
   1437c:	00024853 	.word	0x00024853
   14380:	20000404 	.word	0x20000404
   14384:	000248c7 	.word	0x000248c7
   14388:	200003e0 	.word	0x200003e0
   1438c:	2000246c 	.word	0x2000246c

00014390 <hci_event_prio>:
{
   14390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14394:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14396:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1439a:	4630      	mov	r0, r6
   1439c:	f00d fe77 	bl	2208e <net_buf_simple_headroom>
	state->len = buf->len;
   143a0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   143a4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   143a8:	4605      	mov	r5, r0
   143aa:	d80c      	bhi.n	143c6 <hci_event_prio+0x36>
   143ac:	4a1c      	ldr	r2, [pc, #112]	; (14420 <hci_event_prio+0x90>)
   143ae:	491d      	ldr	r1, [pc, #116]	; (14424 <hci_event_prio+0x94>)
   143b0:	481d      	ldr	r0, [pc, #116]	; (14428 <hci_event_prio+0x98>)
   143b2:	f640 534f 	movw	r3, #3407	; 0xd4f
   143b6:	f00b fbb7 	bl	1fb28 <assert_print>
   143ba:	4040      	eors	r0, r0
   143bc:	f380 8811 	msr	BASEPRI, r0
   143c0:	f04f 0003 	mov.w	r0, #3
   143c4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   143c6:	4630      	mov	r0, r6
   143c8:	2102      	movs	r1, #2
   143ca:	f00d fe50 	bl	2206e <net_buf_simple_pull_mem>
   143ce:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   143d0:	7800      	ldrb	r0, [r0, #0]
   143d2:	f00b fe86 	bl	200e2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   143d6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   143d8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   143da:	d40c      	bmi.n	143f6 <hci_event_prio+0x66>
   143dc:	4a10      	ldr	r2, [pc, #64]	; (14420 <hci_event_prio+0x90>)
   143de:	4913      	ldr	r1, [pc, #76]	; (1442c <hci_event_prio+0x9c>)
   143e0:	4811      	ldr	r0, [pc, #68]	; (14428 <hci_event_prio+0x98>)
   143e2:	f640 5353 	movw	r3, #3411	; 0xd53
   143e6:	f00b fb9f 	bl	1fb28 <assert_print>
   143ea:	4040      	eors	r0, r0
   143ec:	f380 8811 	msr	BASEPRI, r0
   143f0:	f04f 0003 	mov.w	r0, #3
   143f4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   143f6:	2305      	movs	r3, #5
   143f8:	4a0d      	ldr	r2, [pc, #52]	; (14430 <hci_event_prio+0xa0>)
   143fa:	7838      	ldrb	r0, [r7, #0]
   143fc:	4621      	mov	r1, r4
   143fe:	f00b fe82 	bl	20106 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   14402:	07b3      	lsls	r3, r6, #30
   14404:	d507      	bpl.n	14416 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   14406:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14408:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1440c:	fa10 f585 	uxtah	r5, r0, r5
   14410:	60a5      	str	r5, [r4, #8]
}
   14412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14416:	4620      	mov	r0, r4
}
   14418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1441c:	f002 bece 	b.w	171bc <net_buf_unref>
   14420:	00024806 	.word	0x00024806
   14424:	0002483a 	.word	0x0002483a
   14428:	00024853 	.word	0x00024853
   1442c:	000248cb 	.word	0x000248cb
   14430:	00023d78 	.word	0x00023d78

00014434 <bt_recv>:
{
   14434:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14436:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   14438:	2b01      	cmp	r3, #1
{
   1443a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1443c:	d00b      	beq.n	14456 <bt_recv+0x22>
   1443e:	2b03      	cmp	r3, #3
   14440:	d117      	bne.n	14472 <bt_recv+0x3e>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14442:	480e      	ldr	r0, [pc, #56]	; (1447c <bt_recv+0x48>)
   14444:	4629      	mov	r1, r5
   14446:	f00d fd6f 	bl	21f28 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1444a:	490d      	ldr	r1, [pc, #52]	; (14480 <bt_recv+0x4c>)
   1444c:	480d      	ldr	r0, [pc, #52]	; (14484 <bt_recv+0x50>)
   1444e:	f00e fbff 	bl	22c50 <k_work_submit_to_queue>
		return 0;
   14452:	2000      	movs	r0, #0
}
   14454:	e00c      	b.n	14470 <bt_recv+0x3c>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14456:	6883      	ldr	r3, [r0, #8]
   14458:	7818      	ldrb	r0, [r3, #0]
   1445a:	f00b fe42 	bl	200e2 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1445e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14460:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14462:	d502      	bpl.n	1446a <bt_recv+0x36>
			hci_event_prio(buf);
   14464:	4628      	mov	r0, r5
   14466:	f7ff ff93 	bl	14390 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1446a:	f014 0002 	ands.w	r0, r4, #2
   1446e:	d1e8      	bne.n	14442 <bt_recv+0xe>
}
   14470:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   14472:	f002 fea3 	bl	171bc <net_buf_unref>
		return -EINVAL;
   14476:	f06f 0015 	mvn.w	r0, #21
   1447a:	e7f9      	b.n	14470 <bt_recv+0x3c>
   1447c:	200003fc 	.word	0x200003fc
   14480:	20000664 	.word	0x20000664
   14484:	20001890 	.word	0x20001890

00014488 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14488:	4a08      	ldr	r2, [pc, #32]	; (144ac <bt_hci_driver_register+0x24>)
{
   1448a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1448c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   14490:	b930      	cbnz	r0, 144a0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14492:	68d9      	ldr	r1, [r3, #12]
   14494:	b139      	cbz	r1, 144a6 <bt_hci_driver_register+0x1e>
   14496:	6959      	ldr	r1, [r3, #20]
   14498:	b129      	cbz	r1, 144a6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1449a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   1449e:	4770      	bx	lr
		return -EALREADY;
   144a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   144a4:	4770      	bx	lr
		return -EINVAL;
   144a6:	f06f 0015 	mvn.w	r0, #21
}
   144aa:	4770      	bx	lr
   144ac:	200002c8 	.word	0x200002c8

000144b0 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   144b0:	4801      	ldr	r0, [pc, #4]	; (144b8 <bt_finalize_init+0x8>)
   144b2:	2104      	movs	r1, #4
   144b4:	f00b be68 	b.w	20188 <atomic_or>
   144b8:	20000394 	.word	0x20000394

000144bc <bt_init>:
{
   144bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   144be:	4d41      	ldr	r5, [pc, #260]	; (145c4 <bt_init+0x108>)
   144c0:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   144c4:	6899      	ldr	r1, [r3, #8]
   144c6:	f011 0101 	ands.w	r1, r1, #1
   144ca:	d121      	bne.n	14510 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   144cc:	aa01      	add	r2, sp, #4
   144ce:	f640 4003 	movw	r0, #3075	; 0xc03
   144d2:	f7ff fd2f 	bl	13f34 <bt_hci_cmd_send_sync>
		if (err) {
   144d6:	4604      	mov	r4, r0
   144d8:	2800      	cmp	r0, #0
   144da:	d16f      	bne.n	145bc <bt_init+0x100>
	uint8_t status = buf->data[0];
   144dc:	9b01      	ldr	r3, [sp, #4]
   144de:	689b      	ldr	r3, [r3, #8]
	if (status) {
   144e0:	781b      	ldrb	r3, [r3, #0]
   144e2:	b993      	cbnz	r3, 1450a <bt_init+0x4e>
   144e4:	f3bf 8f5b 	dmb	ish
   144e8:	462b      	mov	r3, r5
   144ea:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   144ee:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   144f2:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   144f6:	f3bf 8f5b 	dmb	ish
   144fa:	e853 1f00 	ldrex	r1, [r3]
   144fe:	e843 2000 	strex	r0, r2, [r3]
   14502:	2800      	cmp	r0, #0
   14504:	d1f9      	bne.n	144fa <bt_init+0x3e>
   14506:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1450a:	9801      	ldr	r0, [sp, #4]
   1450c:	f002 fe56 	bl	171bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14510:	aa01      	add	r2, sp, #4
   14512:	2100      	movs	r1, #0
   14514:	f241 0003 	movw	r0, #4099	; 0x1003
   14518:	f7ff fd0c 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   1451c:	4604      	mov	r4, r0
   1451e:	2800      	cmp	r0, #0
   14520:	d14c      	bne.n	145bc <bt_init+0x100>
	read_local_features_complete(rsp);
   14522:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   14524:	4e28      	ldr	r6, [pc, #160]	; (145c8 <bt_init+0x10c>)
   14526:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14528:	f8d2 0001 	ldr.w	r0, [r2, #1]
   1452c:	f8d2 1005 	ldr.w	r1, [r2, #5]
   14530:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   14532:	4618      	mov	r0, r3
   14534:	f002 fe42 	bl	171bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14538:	4621      	mov	r1, r4
   1453a:	aa01      	add	r2, sp, #4
   1453c:	f241 0001 	movw	r0, #4097	; 0x1001
   14540:	f7ff fcf8 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14544:	4604      	mov	r4, r0
   14546:	2800      	cmp	r0, #0
   14548:	d138      	bne.n	145bc <bt_init+0x100>
	read_local_ver_complete(rsp);
   1454a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1454c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1454e:	785a      	ldrb	r2, [r3, #1]
   14550:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14554:	78d9      	ldrb	r1, [r3, #3]
   14556:	789a      	ldrb	r2, [r3, #2]
   14558:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1455c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14560:	791a      	ldrb	r2, [r3, #4]
   14562:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   14566:	7a19      	ldrb	r1, [r3, #8]
   14568:	79da      	ldrb	r2, [r3, #7]
   1456a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1456e:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14572:	795a      	ldrb	r2, [r3, #5]
   14574:	799b      	ldrb	r3, [r3, #6]
   14576:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1457a:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1457e:	f002 fe1d 	bl	171bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14582:	4621      	mov	r1, r4
   14584:	aa01      	add	r2, sp, #4
   14586:	f241 0002 	movw	r0, #4098	; 0x1002
   1458a:	f7ff fcd3 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   1458e:	4604      	mov	r4, r0
   14590:	b9a0      	cbnz	r0, 145bc <bt_init+0x100>
	read_supported_commands_complete(rsp);
   14592:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14594:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   14596:	1c53      	adds	r3, r2, #1
   14598:	3241      	adds	r2, #65	; 0x41
   1459a:	6818      	ldr	r0, [r3, #0]
   1459c:	6859      	ldr	r1, [r3, #4]
   1459e:	4634      	mov	r4, r6
   145a0:	c403      	stmia	r4!, {r0, r1}
   145a2:	3308      	adds	r3, #8
   145a4:	4293      	cmp	r3, r2
   145a6:	4626      	mov	r6, r4
   145a8:	d1f7      	bne.n	1459a <bt_init+0xde>
	net_buf_unref(rsp);
   145aa:	4638      	mov	r0, r7
   145ac:	f002 fe06 	bl	171bc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   145b0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   145b4:	065e      	lsls	r6, r3, #25
   145b6:	d409      	bmi.n	145cc <bt_init+0x110>
		return -ENODEV;
   145b8:	f06f 0412 	mvn.w	r4, #18
}
   145bc:	4620      	mov	r0, r4
   145be:	b003      	add	sp, #12
   145c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   145c2:	bf00      	nop
   145c4:	200002c8 	.word	0x200002c8
   145c8:	20000338 	.word	0x20000338
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   145cc:	aa01      	add	r2, sp, #4
   145ce:	2100      	movs	r1, #0
   145d0:	f242 0003 	movw	r0, #8195	; 0x2003
   145d4:	f7ff fcae 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   145d8:	4604      	mov	r4, r0
   145da:	2800      	cmp	r0, #0
   145dc:	d1ee      	bne.n	145bc <bt_init+0x100>
	read_le_features_complete(rsp);
   145de:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   145e0:	4e9f      	ldr	r6, [pc, #636]	; (14860 <bt_init+0x3a4>)
   145e2:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   145e4:	f8d2 0001 	ldr.w	r0, [r2, #1]
   145e8:	f8d2 1005 	ldr.w	r1, [r2, #5]
   145ec:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   145ee:	4618      	mov	r0, r3
   145f0:	f002 fde4 	bl	171bc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   145f4:	4621      	mov	r1, r4
   145f6:	aa01      	add	r2, sp, #4
   145f8:	f242 0002 	movw	r0, #8194	; 0x2002
   145fc:	f7ff fc9a 	bl	13f34 <bt_hci_cmd_send_sync>
		if (err) {
   14600:	4604      	mov	r4, r0
   14602:	2800      	cmp	r0, #0
   14604:	d1da      	bne.n	145bc <bt_init+0x100>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   14606:	9b01      	ldr	r3, [sp, #4]
   14608:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1460a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1460e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   14612:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   14614:	b129      	cbz	r1, 14622 <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14616:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14618:	4611      	mov	r1, r2
   1461a:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1461e:	f00e fa7e 	bl	22b1e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   14622:	9801      	ldr	r0, [sp, #4]
   14624:	f002 fdca 	bl	171bc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14628:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1462c:	f016 0620 	ands.w	r6, r6, #32
   14630:	f000 80f4 	beq.w	1481c <bt_init+0x360>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14634:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   14638:	071c      	lsls	r4, r3, #28
   1463a:	d512      	bpl.n	14662 <bt_init+0x1a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1463c:	aa01      	add	r2, sp, #4
   1463e:	2100      	movs	r1, #0
   14640:	f242 001c 	movw	r0, #8220	; 0x201c
   14644:	f7ff fc76 	bl	13f34 <bt_hci_cmd_send_sync>
		if (err) {
   14648:	4604      	mov	r4, r0
   1464a:	2800      	cmp	r0, #0
   1464c:	d1b6      	bne.n	145bc <bt_init+0x100>
		le_read_supp_states_complete(rsp);
   1464e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14650:	6883      	ldr	r3, [r0, #8]
   14652:	f8d3 2001 	ldr.w	r2, [r3, #1]
   14656:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1465a:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1465e:	f002 fdad 	bl	171bc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14662:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   14666:	0698      	lsls	r0, r3, #26
   14668:	d523      	bpl.n	146b2 <bt_init+0x1f6>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1466a:	f10d 0102 	add.w	r1, sp, #2
   1466e:	4668      	mov	r0, sp
   14670:	f00b fe79 	bl	20366 <hci_le_read_max_data_len>
		if (err) {
   14674:	4604      	mov	r4, r0
   14676:	2800      	cmp	r0, #0
   14678:	d1a0      	bne.n	145bc <bt_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1467a:	2104      	movs	r1, #4
   1467c:	f242 0024 	movw	r0, #8228	; 0x2024
   14680:	f7ff fc1e 	bl	13ec0 <bt_hci_cmd_create>
		if (!buf) {
   14684:	4606      	mov	r6, r0
   14686:	2800      	cmp	r0, #0
   14688:	f000 80cf 	beq.w	1482a <bt_init+0x36e>
	return net_buf_simple_add(&buf->b, len);
   1468c:	2104      	movs	r1, #4
   1468e:	3008      	adds	r0, #8
   14690:	f00d fcc6 	bl	22020 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14694:	f8bd 3000 	ldrh.w	r3, [sp]
   14698:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1469a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1469e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   146a0:	4622      	mov	r2, r4
   146a2:	4631      	mov	r1, r6
   146a4:	f242 0024 	movw	r0, #8228	; 0x2024
   146a8:	f7ff fc44 	bl	13f34 <bt_hci_cmd_send_sync>
		if (err) {
   146ac:	4604      	mov	r4, r0
   146ae:	2800      	cmp	r0, #0
   146b0:	d184      	bne.n	145bc <bt_init+0x100>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   146b2:	2108      	movs	r1, #8
   146b4:	f242 0001 	movw	r0, #8193	; 0x2001
   146b8:	f7ff fc02 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   146bc:	4604      	mov	r4, r0
   146be:	2800      	cmp	r0, #0
   146c0:	f000 80b3 	beq.w	1482a <bt_init+0x36e>
   146c4:	2108      	movs	r1, #8
   146c6:	4408      	add	r0, r1
   146c8:	f00d fcaa 	bl	22020 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   146cc:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   146d0:	f012 0f02 	tst.w	r2, #2
   146d4:	bf14      	ite	ne
   146d6:	232f      	movne	r3, #47	; 0x2f
   146d8:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   146da:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   146dc:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   146e0:	bf48      	it	mi
   146e2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   146e6:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   146ea:	bf18      	it	ne
   146ec:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   146f0:	2200      	movs	r2, #0
   146f2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   146f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   146f8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   146fa:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   146fc:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   146fe:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14700:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14702:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14704:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14706:	4621      	mov	r1, r4
   14708:	f242 0001 	movw	r0, #8193	; 0x2001
   1470c:	f7ff fc12 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14710:	4604      	mov	r4, r0
   14712:	2800      	cmp	r0, #0
   14714:	f47f af52 	bne.w	145bc <bt_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14718:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   1471c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14720:	069a      	lsls	r2, r3, #26
   14722:	f100 8097 	bmi.w	14854 <bt_init+0x398>
	if (bt_dev.le.acl_mtu) {
   14726:	b9d9      	cbnz	r1, 14760 <bt_init+0x2a4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14728:	aa01      	add	r2, sp, #4
   1472a:	f241 0005 	movw	r0, #4101	; 0x1005
   1472e:	f7ff fc01 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14732:	4604      	mov	r4, r0
   14734:	2800      	cmp	r0, #0
   14736:	f47f af41 	bne.w	145bc <bt_init+0x100>
	if (bt_dev.le.acl_mtu) {
   1473a:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   1473e:	b963      	cbnz	r3, 1475a <bt_init+0x29e>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   14740:	9b01      	ldr	r3, [sp, #4]
   14742:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   14744:	785a      	ldrb	r2, [r3, #1]
   14746:	7899      	ldrb	r1, [r3, #2]
   14748:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1474c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   14750:	889a      	ldrh	r2, [r3, #4]
   14752:	4844      	ldr	r0, [pc, #272]	; (14864 <bt_init+0x3a8>)
   14754:	4611      	mov	r1, r2
   14756:	f00e f9e2 	bl	22b1e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1475a:	9801      	ldr	r0, [sp, #4]
   1475c:	f002 fd2e 	bl	171bc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14760:	2108      	movs	r1, #8
   14762:	f640 4001 	movw	r0, #3073	; 0xc01
   14766:	f7ff fbab 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   1476a:	4604      	mov	r4, r0
   1476c:	2800      	cmp	r0, #0
   1476e:	d05c      	beq.n	1482a <bt_init+0x36e>
   14770:	2108      	movs	r1, #8
   14772:	4408      	add	r0, r1
   14774:	f00d fc54 	bl	22020 <net_buf_simple_add>
	dst[0] = val;
   14778:	2310      	movs	r3, #16
   1477a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1477c:	2388      	movs	r3, #136	; 0x88
   1477e:	7043      	strb	r3, [r0, #1]
   14780:	2302      	movs	r3, #2
	dst[0] = val;
   14782:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   14784:	70c3      	strb	r3, [r0, #3]
   14786:	2320      	movs	r3, #32
	dst[0] = val;
   14788:	7082      	strb	r2, [r0, #2]
   1478a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1478c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1478e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14790:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14792:	4621      	mov	r1, r4
   14794:	f640 4001 	movw	r0, #3073	; 0xc01
   14798:	f7ff fbcc 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   1479c:	4604      	mov	r4, r0
   1479e:	2800      	cmp	r0, #0
   147a0:	f47f af0c 	bne.w	145bc <bt_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   147a4:	4601      	mov	r1, r0
   147a6:	aa01      	add	r2, sp, #4
   147a8:	f64f 4001 	movw	r0, #64513	; 0xfc01
   147ac:	f7ff fbc2 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   147b0:	4604      	mov	r4, r0
   147b2:	bb20      	cbnz	r0, 147fe <bt_init+0x342>
	net_buf_unref(rsp);
   147b4:	9801      	ldr	r0, [sp, #4]
   147b6:	f002 fd01 	bl	171bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   147ba:	4621      	mov	r1, r4
   147bc:	aa01      	add	r2, sp, #4
   147be:	f64f 4002 	movw	r0, #64514	; 0xfc02
   147c2:	f7ff fbb7 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   147c6:	4604      	mov	r4, r0
   147c8:	b9c8      	cbnz	r0, 147fe <bt_init+0x342>
	rp.cmds = (void *)rsp->data;
   147ca:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   147cc:	6883      	ldr	r3, [r0, #8]
   147ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   147d2:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   147d6:	f002 fcf1 	bl	171bc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   147da:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   147de:	075b      	lsls	r3, r3, #29
   147e0:	d50d      	bpl.n	147fe <bt_init+0x342>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   147e2:	aa01      	add	r2, sp, #4
   147e4:	4621      	mov	r1, r4
   147e6:	f64f 4003 	movw	r0, #64515	; 0xfc03
   147ea:	f7ff fba3 	bl	13f34 <bt_hci_cmd_send_sync>
		if (err) {
   147ee:	b930      	cbnz	r0, 147fe <bt_init+0x342>
		rp.feat = (void *)rsp->data;
   147f0:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   147f2:	6883      	ldr	r3, [r0, #8]
   147f4:	785b      	ldrb	r3, [r3, #1]
   147f6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   147fa:	f002 fcdf 	bl	171bc <net_buf_unref>
	err = bt_id_init();
   147fe:	f000 fa87 	bl	14d10 <bt_id_init>
	if (err) {
   14802:	4604      	mov	r4, r0
   14804:	2800      	cmp	r0, #0
   14806:	f47f aed9 	bne.w	145bc <bt_init+0x100>
		err = bt_conn_init();
   1480a:	f001 f967 	bl	15adc <bt_conn_init>
		if (err) {
   1480e:	4604      	mov	r4, r0
   14810:	2800      	cmp	r0, #0
   14812:	f47f aed3 	bne.w	145bc <bt_init+0x100>
	bt_finalize_init();
   14816:	f7ff fe4b 	bl	144b0 <bt_finalize_init>
	return 0;
   1481a:	e6cf      	b.n	145bc <bt_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1481c:	2102      	movs	r1, #2
   1481e:	f640 406d 	movw	r0, #3181	; 0xc6d
   14822:	f7ff fb4d 	bl	13ec0 <bt_hci_cmd_create>
		if (!buf) {
   14826:	4604      	mov	r4, r0
   14828:	b910      	cbnz	r0, 14830 <bt_init+0x374>
		return -ENOBUFS;
   1482a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1482e:	e6c5      	b.n	145bc <bt_init+0x100>
   14830:	2102      	movs	r1, #2
   14832:	3008      	adds	r0, #8
   14834:	f00d fbf4 	bl	22020 <net_buf_simple_add>
		cp_le->le = 0x01;
   14838:	2301      	movs	r3, #1
   1483a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1483c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1483e:	4621      	mov	r1, r4
   14840:	4632      	mov	r2, r6
   14842:	f640 406d 	movw	r0, #3181	; 0xc6d
   14846:	f7ff fb75 	bl	13f34 <bt_hci_cmd_send_sync>
		if (err) {
   1484a:	4604      	mov	r4, r0
   1484c:	2800      	cmp	r0, #0
   1484e:	f43f aef1 	beq.w	14634 <bt_init+0x178>
   14852:	e6b3      	b.n	145bc <bt_init+0x100>
	else if (!bt_dev.le.acl_mtu) {
   14854:	2900      	cmp	r1, #0
   14856:	d183      	bne.n	14760 <bt_init+0x2a4>
		return -EIO;
   14858:	f06f 0404 	mvn.w	r4, #4
   1485c:	e6ae      	b.n	145bc <bt_init+0x100>
   1485e:	bf00      	nop
   14860:	20000398 	.word	0x20000398
   14864:	200003c8 	.word	0x200003c8

00014868 <init_work>:
{
   14868:	b510      	push	{r4, lr}
	err = bt_init();
   1486a:	f7ff fe27 	bl	144bc <bt_init>
	if (ready_cb) {
   1486e:	4b03      	ldr	r3, [pc, #12]	; (1487c <init_work+0x14>)
   14870:	681b      	ldr	r3, [r3, #0]
   14872:	b113      	cbz	r3, 1487a <init_work+0x12>
}
   14874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14878:	4718      	bx	r3
}
   1487a:	bd10      	pop	{r4, pc}
   1487c:	20002484 	.word	0x20002484

00014880 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   14880:	b570      	push	{r4, r5, r6, lr}
   14882:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   14884:	f7f8 f8b1 	bl	c9ea <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   14888:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   1488a:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   1488c:	d812      	bhi.n	148b4 <bt_set_name+0x34>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   1488e:	4c0b      	ldr	r4, [pc, #44]	; (148bc <bt_set_name+0x3c>)
   14890:	4631      	mov	r1, r6
   14892:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   14896:	f7f8 f89e 	bl	c9d6 <strcmp>
   1489a:	b150      	cbz	r0, 148b2 <bt_set_name+0x32>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   1489c:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   148a0:	2348      	movs	r3, #72	; 0x48
   148a2:	462a      	mov	r2, r5
   148a4:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
   148a6:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
   148a8:	f00e fd82 	bl	233b0 <__strncpy_chk>
	bt_dev.name[len] = '\0';
   148ac:	2000      	movs	r0, #0
   148ae:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158

	return 0;
#else
	return -ENOMEM;
#endif
}
   148b2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   148b4:	f06f 000b 	mvn.w	r0, #11
   148b8:	e7fb      	b.n	148b2 <bt_set_name+0x32>
   148ba:	bf00      	nop
   148bc:	200002c8 	.word	0x200002c8

000148c0 <bt_enable>:
{
   148c0:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
   148c2:	4d2a      	ldr	r5, [pc, #168]	; (1496c <bt_enable+0xac>)
   148c4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   148c8:	b088      	sub	sp, #32
   148ca:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   148cc:	2b00      	cmp	r3, #0
   148ce:	d046      	beq.n	1495e <bt_enable+0x9e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   148d0:	f06f 0102 	mvn.w	r1, #2
   148d4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   148d8:	f00b fcda 	bl	20290 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   148dc:	2101      	movs	r1, #1
   148de:	f00b fc53 	bl	20188 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   148e2:	ea10 0401 	ands.w	r4, r0, r1
   148e6:	d13d      	bne.n	14964 <bt_enable+0xa4>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   148e8:	4821      	ldr	r0, [pc, #132]	; (14970 <bt_enable+0xb0>)
   148ea:	f7ff ffc9 	bl	14880 <bt_set_name>
	ready_cb = cb;
   148ee:	4b21      	ldr	r3, [pc, #132]	; (14974 <bt_enable+0xb4>)
   148f0:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   148f2:	2200      	movs	r2, #0
   148f4:	2300      	movs	r3, #0
   148f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   148fa:	f06f 0308 	mvn.w	r3, #8
   148fe:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14902:	e9cd 4400 	strd	r4, r4, [sp]
   14906:	4b1c      	ldr	r3, [pc, #112]	; (14978 <bt_enable+0xb8>)
   14908:	491c      	ldr	r1, [pc, #112]	; (1497c <bt_enable+0xbc>)
   1490a:	9404      	str	r4, [sp, #16]
   1490c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14910:	481b      	ldr	r0, [pc, #108]	; (14980 <bt_enable+0xc0>)
   14912:	f006 f81d 	bl	1a950 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14916:	491b      	ldr	r1, [pc, #108]	; (14984 <bt_enable+0xc4>)
   14918:	4819      	ldr	r0, [pc, #100]	; (14980 <bt_enable+0xc0>)
   1491a:	f00e f818 	bl	2294e <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1491e:	491a      	ldr	r1, [pc, #104]	; (14988 <bt_enable+0xc8>)
   14920:	481a      	ldr	r0, [pc, #104]	; (1498c <bt_enable+0xcc>)
   14922:	9400      	str	r4, [sp, #0]
   14924:	f06f 0307 	mvn.w	r3, #7
   14928:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1492c:	f006 fb14 	bl	1af58 <k_work_queue_start>
   14930:	4917      	ldr	r1, [pc, #92]	; (14990 <bt_enable+0xd0>)
   14932:	4816      	ldr	r0, [pc, #88]	; (1498c <bt_enable+0xcc>)
   14934:	f00e f80b 	bl	2294e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14938:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   1493c:	68db      	ldr	r3, [r3, #12]
   1493e:	4798      	blx	r3
	if (err) {
   14940:	4604      	mov	r4, r0
   14942:	b948      	cbnz	r0, 14958 <bt_enable+0x98>
	if (!cb) {
   14944:	b926      	cbnz	r6, 14950 <bt_enable+0x90>
}
   14946:	b008      	add	sp, #32
   14948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   1494c:	f7ff bdb6 	b.w	144bc <bt_init>
	k_work_submit(&bt_dev.init);
   14950:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14954:	f006 fafa 	bl	1af4c <k_work_submit>
}
   14958:	4620      	mov	r0, r4
   1495a:	b008      	add	sp, #32
   1495c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   1495e:	f06f 0412 	mvn.w	r4, #18
   14962:	e7f9      	b.n	14958 <bt_enable+0x98>
		return -EALREADY;
   14964:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14968:	e7f6      	b.n	14958 <bt_enable+0x98>
   1496a:	bf00      	nop
   1496c:	200002c8 	.word	0x200002c8
   14970:	000248e4 	.word	0x000248e4
   14974:	20002484 	.word	0x20002484
   14978:	0001425d 	.word	0x0001425d
   1497c:	20004200 	.word	0x20004200
   14980:	20001930 	.word	0x20001930
   14984:	000248ef 	.word	0x000248ef
   14988:	20003de0 	.word	0x20003de0
   1498c:	20001890 	.word	0x20001890
   14990:	000248f5 	.word	0x000248f5

00014994 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14994:	4800      	ldr	r0, [pc, #0]	; (14998 <bt_get_name+0x4>)
   14996:	4770      	bx	lr
   14998:	20000420 	.word	0x20000420

0001499c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1499e:	4f0b      	ldr	r7, [pc, #44]	; (149cc <id_find+0x30>)
{
   149a0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   149a2:	2500      	movs	r5, #0
   149a4:	79fb      	ldrb	r3, [r7, #7]
   149a6:	b2ec      	uxtb	r4, r5
   149a8:	42a3      	cmp	r3, r4
   149aa:	d802      	bhi.n	149b2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   149ac:	f06f 0401 	mvn.w	r4, #1
   149b0:	e009      	b.n	149c6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   149b2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
   149b6:	2207      	movs	r2, #7
   149b8:	4439      	add	r1, r7
   149ba:	4630      	mov	r0, r6
   149bc:	f00e fcb7 	bl	2332e <memcmp>
   149c0:	3501      	adds	r5, #1
   149c2:	2800      	cmp	r0, #0
   149c4:	d1ee      	bne.n	149a4 <id_find+0x8>
}
   149c6:	4620      	mov	r0, r4
   149c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149ca:	bf00      	nop
   149cc:	200002c8 	.word	0x200002c8

000149d0 <set_random_address>:
{
   149d0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   149d2:	2206      	movs	r2, #6
   149d4:	4912      	ldr	r1, [pc, #72]	; (14a20 <set_random_address+0x50>)
   149d6:	4605      	mov	r5, r0
   149d8:	f00e fca9 	bl	2332e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   149dc:	4602      	mov	r2, r0
   149de:	b1d0      	cbz	r0, 14a16 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   149e0:	2106      	movs	r1, #6
   149e2:	f242 0005 	movw	r0, #8197	; 0x2005
   149e6:	f7ff fa6b 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   149ea:	4604      	mov	r4, r0
   149ec:	b1a8      	cbz	r0, 14a1a <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   149ee:	2206      	movs	r2, #6
   149f0:	4629      	mov	r1, r5
   149f2:	3008      	adds	r0, #8
   149f4:	f00d fb1a 	bl	2202c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   149f8:	2200      	movs	r2, #0
   149fa:	4621      	mov	r1, r4
   149fc:	f242 0005 	movw	r0, #8197	; 0x2005
   14a00:	f7ff fa98 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14a04:	4602      	mov	r2, r0
   14a06:	b930      	cbnz	r0, 14a16 <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   14a08:	4805      	ldr	r0, [pc, #20]	; (14a20 <set_random_address+0x50>)
   14a0a:	4629      	mov	r1, r5
   14a0c:	f00b fdef 	bl	205ee <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14a10:	2301      	movs	r3, #1
   14a12:	f800 3c01 	strb.w	r3, [r0, #-1]
}
   14a16:	4610      	mov	r0, r2
   14a18:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14a1a:	f06f 0268 	mvn.w	r2, #104	; 0x68
   14a1e:	e7fa      	b.n	14a16 <set_random_address+0x46>
   14a20:	20000329 	.word	0x20000329

00014a24 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14a24:	b530      	push	{r4, r5, lr}
   14a26:	4604      	mov	r4, r0
   14a28:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14a2a:	460d      	mov	r5, r1
   14a2c:	b199      	cbz	r1, 14a56 <id_create.constprop.0+0x32>
   14a2e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14a30:	2207      	movs	r2, #7
   14a32:	a902      	add	r1, sp, #8
   14a34:	4628      	mov	r0, r5
   14a36:	9302      	str	r3, [sp, #8]
   14a38:	f8cd 300b 	str.w	r3, [sp, #11]
   14a3c:	f00e fc77 	bl	2332e <memcmp>
   14a40:	b148      	cbz	r0, 14a56 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14a42:	4810      	ldr	r0, [pc, #64]	; (14a84 <id_create.constprop.0+0x60>)
   14a44:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14a48:	4629      	mov	r1, r5
   14a4a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14a4c:	f00b fdd4 	bl	205f8 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14a50:	2000      	movs	r0, #0
}
   14a52:	b005      	add	sp, #20
   14a54:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   14a56:	4668      	mov	r0, sp
   14a58:	f00b fb35 	bl	200c6 <bt_addr_le_create_static>
			if (err) {
   14a5c:	2800      	cmp	r0, #0
   14a5e:	d1f8      	bne.n	14a52 <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   14a60:	4668      	mov	r0, sp
   14a62:	f7ff ff9b 	bl	1499c <id_find>
   14a66:	2800      	cmp	r0, #0
   14a68:	daf5      	bge.n	14a56 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14a6a:	4806      	ldr	r0, [pc, #24]	; (14a84 <id_create.constprop.0+0x60>)
   14a6c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14a70:	4420      	add	r0, r4
   14a72:	4669      	mov	r1, sp
   14a74:	f00b fdc0 	bl	205f8 <bt_addr_le_copy>
		if (addr) {
   14a78:	2d00      	cmp	r5, #0
   14a7a:	d0e9      	beq.n	14a50 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14a7c:	4601      	mov	r1, r0
   14a7e:	4628      	mov	r0, r5
   14a80:	e7e4      	b.n	14a4c <id_create.constprop.0+0x28>
   14a82:	bf00      	nop
   14a84:	200002c8 	.word	0x200002c8

00014a88 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14a88:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14a8a:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14a8c:	4605      	mov	r5, r0
   14a8e:	b918      	cbnz	r0, 14a98 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14a90:	b1ec      	cbz	r4, 14ace <bt_id_create+0x46>
		return -EINVAL;
   14a92:	f06f 0015 	mvn.w	r0, #21
   14a96:	e018      	b.n	14aca <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14a98:	2300      	movs	r3, #0
   14a9a:	2207      	movs	r2, #7
   14a9c:	4669      	mov	r1, sp
   14a9e:	9300      	str	r3, [sp, #0]
   14aa0:	f8cd 3003 	str.w	r3, [sp, #3]
   14aa4:	f00e fc43 	bl	2332e <memcmp>
   14aa8:	2800      	cmp	r0, #0
   14aaa:	d0f1      	beq.n	14a90 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14aac:	782b      	ldrb	r3, [r5, #0]
   14aae:	2b01      	cmp	r3, #1
   14ab0:	d1ef      	bne.n	14a92 <bt_id_create+0xa>
   14ab2:	79ab      	ldrb	r3, [r5, #6]
   14ab4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14ab8:	2bc0      	cmp	r3, #192	; 0xc0
   14aba:	d1ea      	bne.n	14a92 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14abc:	4628      	mov	r0, r5
   14abe:	f7ff ff6d 	bl	1499c <id_find>
   14ac2:	2800      	cmp	r0, #0
   14ac4:	dbe4      	blt.n	14a90 <bt_id_create+0x8>
			return -EALREADY;
   14ac6:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   14aca:	b002      	add	sp, #8
   14acc:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14ace:	4e13      	ldr	r6, [pc, #76]	; (14b1c <bt_id_create+0x94>)
   14ad0:	79f3      	ldrb	r3, [r6, #7]
   14ad2:	2b01      	cmp	r3, #1
   14ad4:	d01e      	beq.n	14b14 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14ad6:	f3bf 8f5b 	dmb	ish
   14ada:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
   14ade:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14ae2:	07db      	lsls	r3, r3, #31
   14ae4:	d40b      	bmi.n	14afe <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   14ae6:	2d00      	cmp	r5, #0
   14ae8:	d0d3      	beq.n	14a92 <bt_id_create+0xa>
   14aea:	2207      	movs	r2, #7
   14aec:	4669      	mov	r1, sp
   14aee:	4628      	mov	r0, r5
   14af0:	9400      	str	r4, [sp, #0]
   14af2:	f8cd 4003 	str.w	r4, [sp, #3]
   14af6:	f00e fc1a 	bl	2332e <memcmp>
   14afa:	2800      	cmp	r0, #0
   14afc:	d0c9      	beq.n	14a92 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   14afe:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   14b00:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   14b02:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   14b04:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   14b06:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   14b08:	f7ff ff8c 	bl	14a24 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   14b0c:	2800      	cmp	r0, #0
   14b0e:	bf08      	it	eq
   14b10:	4620      	moveq	r0, r4
   14b12:	e7da      	b.n	14aca <bt_id_create+0x42>
		return -ENOMEM;
   14b14:	f06f 000b 	mvn.w	r0, #11
   14b18:	e7d7      	b.n	14aca <bt_id_create+0x42>
   14b1a:	bf00      	nop
   14b1c:	200002c8 	.word	0x200002c8

00014b20 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14b20:	b570      	push	{r4, r5, r6, lr}
   14b22:	b086      	sub	sp, #24
   14b24:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14b26:	aa01      	add	r2, sp, #4
   14b28:	2100      	movs	r1, #0
   14b2a:	f241 0009 	movw	r0, #4105	; 0x1009
   14b2e:	f7ff fa01 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14b32:	4604      	mov	r4, r0
   14b34:	b970      	cbnz	r0, 14b54 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   14b36:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14b38:	9002      	str	r0, [sp, #8]
   14b3a:	689d      	ldr	r5, [r3, #8]
   14b3c:	f8ad 000c 	strh.w	r0, [sp, #12]
   14b40:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   14b42:	2206      	movs	r2, #6
   14b44:	a902      	add	r1, sp, #8
   14b46:	4628      	mov	r0, r5
   14b48:	f00e fbf1 	bl	2332e <memcmp>
   14b4c:	b920      	cbnz	r0, 14b58 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   14b4e:	9801      	ldr	r0, [sp, #4]
   14b50:	f002 fb34 	bl	171bc <net_buf_unref>
		return 0U;
   14b54:	2000      	movs	r0, #0
   14b56:	e015      	b.n	14b84 <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   14b58:	4b0b      	ldr	r3, [pc, #44]	; (14b88 <bt_id_read_public_addr+0x68>)
   14b5a:	6818      	ldr	r0, [r3, #0]
   14b5c:	9004      	str	r0, [sp, #16]
   14b5e:	889b      	ldrh	r3, [r3, #4]
   14b60:	f8ad 3014 	strh.w	r3, [sp, #20]
   14b64:	2206      	movs	r2, #6
   14b66:	a904      	add	r1, sp, #16
   14b68:	4628      	mov	r0, r5
   14b6a:	f00e fbe0 	bl	2332e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14b6e:	2800      	cmp	r0, #0
   14b70:	d0ed      	beq.n	14b4e <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   14b72:	4629      	mov	r1, r5
   14b74:	1c70      	adds	r0, r6, #1
   14b76:	f00b fd3a 	bl	205ee <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   14b7a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   14b7c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   14b7e:	f002 fb1d 	bl	171bc <net_buf_unref>
	return 1U;
   14b82:	2001      	movs	r0, #1
}
   14b84:	b006      	add	sp, #24
   14b86:	bd70      	pop	{r4, r5, r6, pc}
   14b88:	00023853 	.word	0x00023853

00014b8c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14b8c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14b8e:	4668      	mov	r0, sp
   14b90:	f7ff ffc6 	bl	14b20 <bt_id_read_public_addr>
   14b94:	4b04      	ldr	r3, [pc, #16]	; (14ba8 <bt_setup_public_id_addr+0x1c>)
   14b96:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14b98:	b118      	cbz	r0, 14ba2 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   14b9a:	4669      	mov	r1, sp
   14b9c:	2000      	movs	r0, #0
   14b9e:	f7ff ff41 	bl	14a24 <id_create.constprop.0>
}
   14ba2:	b003      	add	sp, #12
   14ba4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ba8:	200002c8 	.word	0x200002c8

00014bac <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14bae:	4b18      	ldr	r3, [pc, #96]	; (14c10 <bt_read_static_addr+0x64>)
   14bb0:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   14bb4:	f014 0401 	ands.w	r4, r4, #1
{
   14bb8:	4605      	mov	r5, r0
   14bba:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14bbc:	d015      	beq.n	14bea <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14bbe:	aa01      	add	r2, sp, #4
   14bc0:	2100      	movs	r1, #0
   14bc2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14bc6:	f7ff f9b5 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14bca:	4603      	mov	r3, r0
   14bcc:	b9e8      	cbnz	r0, 14c0a <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   14bce:	9801      	ldr	r0, [sp, #4]
   14bd0:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   14bd2:	7854      	ldrb	r4, [r2, #1]
   14bd4:	f04f 0c16 	mov.w	ip, #22
   14bd8:	42b4      	cmp	r4, r6
   14bda:	bf28      	it	cs
   14bdc:	4634      	movcs	r4, r6
   14bde:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   14be2:	42a3      	cmp	r3, r4
   14be4:	db04      	blt.n	14bf0 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   14be6:	f002 fae9 	bl	171bc <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   14bea:	4620      	mov	r0, r4
   14bec:	b003      	add	sp, #12
   14bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bf0:	1c96      	adds	r6, r2, #2
   14bf2:	fb0c 5103 	mla	r1, ip, r3, r5
   14bf6:	f856 eb04 	ldr.w	lr, [r6], #4
   14bfa:	f841 eb04 	str.w	lr, [r1], #4
   14bfe:	42be      	cmp	r6, r7
   14c00:	d1f9      	bne.n	14bf6 <bt_read_static_addr+0x4a>
   14c02:	883e      	ldrh	r6, [r7, #0]
   14c04:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   14c06:	3301      	adds	r3, #1
   14c08:	e7eb      	b.n	14be2 <bt_read_static_addr+0x36>
		return 0;
   14c0a:	2400      	movs	r4, #0
   14c0c:	e7ed      	b.n	14bea <bt_read_static_addr+0x3e>
   14c0e:	bf00      	nop
   14c10:	200002c8 	.word	0x200002c8

00014c14 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14c14:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14c16:	4d14      	ldr	r5, [pc, #80]	; (14c68 <bt_setup_random_id_addr+0x54>)
   14c18:	79ec      	ldrb	r4, [r5, #7]
{
   14c1a:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   14c1c:	b9ec      	cbnz	r4, 14c5a <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14c1e:	2101      	movs	r1, #1
   14c20:	a802      	add	r0, sp, #8
   14c22:	f7ff ffc3 	bl	14bac <bt_read_static_addr>
   14c26:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   14c28:	b1b8      	cbz	r0, 14c5a <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14c2a:	2616      	movs	r6, #22
   14c2c:	ab02      	add	r3, sp, #8
   14c2e:	b2e2      	uxtb	r2, r4
   14c30:	fb06 3102 	mla	r1, r6, r2, r3
   14c34:	f10d 0001 	add.w	r0, sp, #1
   14c38:	f00b fcd9 	bl	205ee <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   14c3c:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   14c3e:	4669      	mov	r1, sp
   14c40:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   14c42:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14c46:	f7ff feed 	bl	14a24 <id_create.constprop.0>
				if (err) {
   14c4a:	b920      	cbnz	r0, 14c56 <bt_setup_random_id_addr+0x42>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14c4c:	79ea      	ldrb	r2, [r5, #7]
   14c4e:	3401      	adds	r4, #1
   14c50:	b2e3      	uxtb	r3, r4
   14c52:	429a      	cmp	r2, r3
   14c54:	d8ea      	bhi.n	14c2c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   14c56:	b008      	add	sp, #32
   14c58:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   14c5a:	2100      	movs	r1, #0
   14c5c:	4608      	mov	r0, r1
}
   14c5e:	b008      	add	sp, #32
   14c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   14c64:	f7ff bf10 	b.w	14a88 <bt_id_create>
   14c68:	200002c8 	.word	0x200002c8

00014c6c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14c70:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   14c74:	7805      	ldrb	r5, [r0, #0]
{
   14c76:	460e      	mov	r6, r1
   14c78:	4690      	mov	r8, r2
   14c7a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14c7c:	d026      	beq.n	14ccc <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14c7e:	4c23      	ldr	r4, [pc, #140]	; (14d0c <bt_id_set_adv_own_addr+0xa0>)
   14c80:	b12a      	cbz	r2, 14c8e <bt_id_set_adv_own_addr+0x22>
   14c82:	0688      	lsls	r0, r1, #26
   14c84:	d503      	bpl.n	14c8e <bt_id_set_adv_own_addr+0x22>
   14c86:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14c8a:	0659      	lsls	r1, r3, #25
   14c8c:	d53a      	bpl.n	14d04 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14c8e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14c92:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   14c96:	5ce3      	ldrb	r3, [r4, r3]
   14c98:	2b01      	cmp	r3, #1
   14c9a:	d008      	beq.n	14cae <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14c9c:	eba9 0505 	sub.w	r5, r9, r5
   14ca0:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14ca2:	f1b8 0f00 	cmp.w	r8, #0
   14ca6:	d10c      	bne.n	14cc2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14ca8:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14caa:	2000      	movs	r0, #0
   14cac:	e007      	b.n	14cbe <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14cae:	2007      	movs	r0, #7
   14cb0:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14cb4:	4420      	add	r0, r4
   14cb6:	f7ff fe8b 	bl	149d0 <set_random_address>
				if (err) {
   14cba:	2800      	cmp	r0, #0
   14cbc:	d0ee      	beq.n	14c9c <bt_id_set_adv_own_addr+0x30>
}
   14cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14cc2:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14cc4:	bf48      	it	mi
   14cc6:	f043 0302 	orrmi.w	r3, r3, #2
   14cca:	e7ed      	b.n	14ca8 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14ccc:	074b      	lsls	r3, r1, #29
   14cce:	d515      	bpl.n	14cfc <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14cd0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14d0c <bt_id_set_adv_own_addr+0xa0>
   14cd4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14cd8:	00ee      	lsls	r6, r5, #3
   14cda:	f818 3003 	ldrb.w	r3, [r8, r3]
   14cde:	2b01      	cmp	r3, #1
   14ce0:	d10a      	bne.n	14cf8 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14ce2:	2007      	movs	r0, #7
   14ce4:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14ce8:	4440      	add	r0, r8
   14cea:	f7ff fe71 	bl	149d0 <set_random_address>
			*own_addr_type = id_addr->type;
   14cee:	1b75      	subs	r5, r6, r5
   14cf0:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14cf4:	703b      	strb	r3, [r7, #0]
		if (err) {
   14cf6:	e7e2      	b.n	14cbe <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   14cf8:	4620      	mov	r0, r4
   14cfa:	e7f8      	b.n	14cee <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   14cfc:	f00b fc85 	bl	2060a <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14d00:	2301      	movs	r3, #1
   14d02:	e7f7      	b.n	14cf4 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   14d04:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14d08:	e7d9      	b.n	14cbe <bt_id_set_adv_own_addr+0x52>
   14d0a:	bf00      	nop
   14d0c:	200002c8 	.word	0x200002c8

00014d10 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14d10:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14d12:	4c0a      	ldr	r4, [pc, #40]	; (14d3c <bt_id_init+0x2c>)
   14d14:	79e3      	ldrb	r3, [r4, #7]
   14d16:	b10b      	cbz	r3, 14d1c <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14d18:	2000      	movs	r0, #0
}
   14d1a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   14d1c:	f7ff ff36 	bl	14b8c <bt_setup_public_id_addr>
		if (err) {
   14d20:	2800      	cmp	r0, #0
   14d22:	d1fa      	bne.n	14d1a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14d24:	79e3      	ldrb	r3, [r4, #7]
   14d26:	2b00      	cmp	r3, #0
   14d28:	d1f6      	bne.n	14d18 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   14d2a:	f7ff ff73 	bl	14c14 <bt_setup_random_id_addr>
		if (err) {
   14d2e:	2800      	cmp	r0, #0
   14d30:	d1f3      	bne.n	14d1a <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14d32:	1c60      	adds	r0, r4, #1
}
   14d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   14d38:	f7ff be4a 	b.w	149d0 <set_random_address>
   14d3c:	200002c8 	.word	0x200002c8

00014d40 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14d40:	6843      	ldr	r3, [r0, #4]
{
   14d42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14d44:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   14d46:	0558      	lsls	r0, r3, #21
   14d48:	d502      	bpl.n	14d50 <valid_adv_param+0x10>
		return false;
   14d4a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   14d4c:	b003      	add	sp, #12
   14d4e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14d50:	6922      	ldr	r2, [r4, #16]
   14d52:	b10a      	cbz	r2, 14d58 <valid_adv_param+0x18>
   14d54:	07d9      	lsls	r1, r3, #31
   14d56:	d5f8      	bpl.n	14d4a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   14d58:	4d1a      	ldr	r5, [pc, #104]	; (14dc4 <valid_adv_param+0x84>)
   14d5a:	7820      	ldrb	r0, [r4, #0]
   14d5c:	79eb      	ldrb	r3, [r5, #7]
   14d5e:	4283      	cmp	r3, r0
   14d60:	d9f3      	bls.n	14d4a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   14d62:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   14d66:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14d68:	2207      	movs	r2, #7
   14d6a:	4669      	mov	r1, sp
   14d6c:	4428      	add	r0, r5
   14d6e:	9300      	str	r3, [sp, #0]
   14d70:	f8cd 3003 	str.w	r3, [sp, #3]
   14d74:	f00e fadb 	bl	2332e <memcmp>
	if (param->id >= bt_dev.id_count ||
   14d78:	2800      	cmp	r0, #0
   14d7a:	d0e6      	beq.n	14d4a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14d7c:	6860      	ldr	r0, [r4, #4]
   14d7e:	07c2      	lsls	r2, r0, #31
   14d80:	d406      	bmi.n	14d90 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   14d82:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   14d86:	2b08      	cmp	r3, #8
   14d88:	d802      	bhi.n	14d90 <valid_adv_param+0x50>
   14d8a:	68a3      	ldr	r3, [r4, #8]
   14d8c:	2b9f      	cmp	r3, #159	; 0x9f
   14d8e:	d9dc      	bls.n	14d4a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   14d90:	f010 0f30 	tst.w	r0, #48	; 0x30
   14d94:	d002      	beq.n	14d9c <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14d96:	6923      	ldr	r3, [r4, #16]
   14d98:	2b00      	cmp	r3, #0
   14d9a:	d0d6      	beq.n	14d4a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14d9c:	06c3      	lsls	r3, r0, #27
   14d9e:	d401      	bmi.n	14da4 <valid_adv_param+0x64>
   14da0:	6923      	ldr	r3, [r4, #16]
   14da2:	b943      	cbnz	r3, 14db6 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   14da4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14da8:	429a      	cmp	r2, r3
   14daa:	d8ce      	bhi.n	14d4a <valid_adv_param+0xa>
   14dac:	2a1f      	cmp	r2, #31
   14dae:	d9cc      	bls.n	14d4a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   14db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   14db4:	d8c9      	bhi.n	14d4a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14db6:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14dba:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14dbe:	bf18      	it	ne
   14dc0:	2001      	movne	r0, #1
   14dc2:	e7c3      	b.n	14d4c <valid_adv_param+0xc>
   14dc4:	200002c8 	.word	0x200002c8

00014dc8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   14dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   14dca:	4606      	mov	r6, r0
   14dcc:	4b1e      	ldr	r3, [pc, #120]	; (14e48 <le_adv_start_add_conn+0x80>)
   14dce:	f816 2b09 	ldrb.w	r2, [r6], #9
   14dd2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   14dd6:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14dd8:	2300      	movs	r3, #0
{
   14dda:	4605      	mov	r5, r0
   14ddc:	2207      	movs	r2, #7
   14dde:	460f      	mov	r7, r1
   14de0:	4630      	mov	r0, r6
   14de2:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14de4:	9300      	str	r3, [sp, #0]
   14de6:	f8cd 3003 	str.w	r3, [sp, #3]
   14dea:	f00e faa0 	bl	2332e <memcmp>
   14dee:	782a      	ldrb	r2, [r5, #0]
   14df0:	4604      	mov	r4, r0
   14df2:	b9a8      	cbnz	r0, 14e20 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   14df4:	4b15      	ldr	r3, [pc, #84]	; (14e4c <le_adv_start_add_conn+0x84>)
   14df6:	6818      	ldr	r0, [r3, #0]
   14df8:	8899      	ldrh	r1, [r3, #4]
   14dfa:	9002      	str	r0, [sp, #8]
   14dfc:	799b      	ldrb	r3, [r3, #6]
   14dfe:	f8ad 100c 	strh.w	r1, [sp, #12]
   14e02:	4610      	mov	r0, r2
   14e04:	a902      	add	r1, sp, #8
   14e06:	f88d 300e 	strb.w	r3, [sp, #14]
   14e0a:	f000 fcc7 	bl	1579c <bt_conn_add_le>
		if (!conn) {
   14e0e:	4605      	mov	r5, r0
   14e10:	b1b8      	cbz	r0, 14e42 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   14e12:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14e14:	f000 fb66 	bl	154e4 <bt_conn_set_state>
	*out_conn = conn;
   14e18:	603d      	str	r5, [r7, #0]
	return 0;
}
   14e1a:	4620      	mov	r0, r4
   14e1c:	b005      	add	sp, #20
   14e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   14e20:	4631      	mov	r1, r6
   14e22:	4610      	mov	r0, r2
   14e24:	f00b fe75 	bl	20b12 <bt_conn_exists_le>
   14e28:	4604      	mov	r4, r0
   14e2a:	b938      	cbnz	r0, 14e3c <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   14e2c:	7828      	ldrb	r0, [r5, #0]
   14e2e:	4631      	mov	r1, r6
   14e30:	f000 fcb4 	bl	1579c <bt_conn_add_le>
	if (!conn) {
   14e34:	4605      	mov	r5, r0
   14e36:	b120      	cbz	r0, 14e42 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   14e38:	2105      	movs	r1, #5
   14e3a:	e7eb      	b.n	14e14 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   14e3c:	f06f 0415 	mvn.w	r4, #21
   14e40:	e7eb      	b.n	14e1a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   14e42:	f06f 040b 	mvn.w	r4, #11
   14e46:	e7e8      	b.n	14e1a <le_adv_start_add_conn+0x52>
   14e48:	200002c8 	.word	0x200002c8
   14e4c:	00023859 	.word	0x00023859

00014e50 <bt_le_adv_lookup_legacy>:
}
   14e50:	4800      	ldr	r0, [pc, #0]	; (14e54 <bt_le_adv_lookup_legacy+0x4>)
   14e52:	4770      	bx	lr
   14e54:	200002e0 	.word	0x200002e0

00014e58 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   14e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14e5c:	690e      	ldr	r6, [r1, #16]
{
   14e5e:	b08f      	sub	sp, #60	; 0x3c
   14e60:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   14e62:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   14e64:	ebb6 0903 	subs.w	r9, r6, r3
{
   14e68:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14e6a:	4889      	ldr	r0, [pc, #548]	; (15090 <bt_le_adv_start_legacy+0x238>)
   14e6c:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   14e6e:	bf18      	it	ne
   14e70:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   14e74:	9307      	str	r3, [sp, #28]
   14e76:	f00b fbeb 	bl	20650 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14e7a:	0747      	lsls	r7, r0, #29
{
   14e7c:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14e7e:	f140 80fb 	bpl.w	15078 <bt_le_adv_start_legacy+0x220>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14e82:	4608      	mov	r0, r1
   14e84:	f7ff ff5c 	bl	14d40 <valid_adv_param>
   14e88:	b928      	cbnz	r0, 14e96 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   14e8a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14e8e:	4658      	mov	r0, fp
   14e90:	b00f      	add	sp, #60	; 0x3c
   14e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   14e96:	4620      	mov	r0, r4
   14e98:	f00b fbc9 	bl	2062e <bt_id_adv_random_addr_check>
   14e9c:	4680      	mov	r8, r0
   14e9e:	2800      	cmp	r0, #0
   14ea0:	d0f3      	beq.n	14e8a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14ea2:	f105 0710 	add.w	r7, r5, #16
   14ea6:	4638      	mov	r0, r7
   14ea8:	f00b fbd2 	bl	20650 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14eac:	f3c0 1380 	ubfx	r3, r0, #6, #1
   14eb0:	0640      	lsls	r0, r0, #25
   14eb2:	f100 80e4 	bmi.w	1507e <bt_le_adv_start_legacy+0x226>
	(void)memset(&set_param, 0, sizeof(set_param));
   14eb6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   14eba:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   14ebe:	68a3      	ldr	r3, [r4, #8]
   14ec0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   14ec4:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   14ec6:	68e3      	ldr	r3, [r4, #12]
   14ec8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   14ecc:	f00b fbb1 	bl	20632 <get_adv_channel_map>
	if (adv->id != param->id) {
   14ed0:	782a      	ldrb	r2, [r5, #0]
   14ed2:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   14ed4:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   14ed8:	429a      	cmp	r2, r3
   14eda:	d004      	beq.n	14ee6 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14edc:	486c      	ldr	r0, [pc, #432]	; (15090 <bt_le_adv_start_legacy+0x238>)
   14ede:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   14ee2:	f00b fbbb 	bl	2065c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   14ee6:	4a6b      	ldr	r2, [pc, #428]	; (15094 <bt_le_adv_start_legacy+0x23c>)
	adv->id = param->id;
   14ee8:	7823      	ldrb	r3, [r4, #0]
   14eea:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   14eec:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   14ef0:	6861      	ldr	r1, [r4, #4]
   14ef2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   14ef6:	464a      	mov	r2, r9
   14ef8:	4628      	mov	r0, r5
   14efa:	f7ff feb7 	bl	14c6c <bt_id_set_adv_own_addr>
	if (err) {
   14efe:	4683      	mov	fp, r0
   14f00:	2800      	cmp	r0, #0
   14f02:	d1c4      	bne.n	14e8e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14f04:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   14f08:	2e00      	cmp	r6, #0
   14f0a:	d046      	beq.n	14f9a <bt_le_adv_start_legacy+0x142>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14f0c:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14f0e:	f00b fbb4 	bl	2067a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   14f12:	4620      	mov	r0, r4
   14f14:	f00b fca7 	bl	20866 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f18:	6863      	ldr	r3, [r4, #4]
   14f1a:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   14f1c:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f1e:	d544      	bpl.n	14faa <bt_le_adv_start_legacy+0x152>
		if (dir_adv) {
   14f20:	2e00      	cmp	r6, #0
   14f22:	d03f      	beq.n	14fa4 <bt_le_adv_start_legacy+0x14c>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   14f24:	f013 0f10 	tst.w	r3, #16
   14f28:	bf14      	ite	ne
   14f2a:	2304      	movne	r3, #4
   14f2c:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   14f2e:	6921      	ldr	r1, [r4, #16]
   14f30:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14f34:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   14f38:	f00b fb9f 	bl	2067a <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   14f3c:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   14f40:	210f      	movs	r1, #15
   14f42:	f242 0006 	movw	r0, #8198	; 0x2006
   14f46:	f7fe ffbb 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   14f4a:	4683      	mov	fp, r0
   14f4c:	2800      	cmp	r0, #0
   14f4e:	f000 8099 	beq.w	15084 <bt_le_adv_start_legacy+0x22c>
   14f52:	220f      	movs	r2, #15
   14f54:	a90a      	add	r1, sp, #40	; 0x28
   14f56:	3008      	adds	r0, #8
   14f58:	f00d f868 	bl	2202c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   14f5c:	2200      	movs	r2, #0
   14f5e:	4659      	mov	r1, fp
   14f60:	f242 0006 	movw	r0, #8198	; 0x2006
   14f64:	f7fe ffe6 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   14f68:	2800      	cmp	r0, #0
   14f6a:	f040 808e 	bne.w	1508a <bt_le_adv_start_legacy+0x232>
	if (!dir_adv) {
   14f6e:	b366      	cbz	r6, 14fca <bt_le_adv_start_legacy+0x172>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14f70:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14f72:	07db      	lsls	r3, r3, #31
   14f74:	d437      	bmi.n	14fe6 <bt_le_adv_start_legacy+0x18e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14f76:	2101      	movs	r1, #1
   14f78:	4628      	mov	r0, r5
   14f7a:	f00b fc84 	bl	20886 <bt_le_adv_set_enable_legacy>
	if (err) {
   14f7e:	4683      	mov	fp, r0
   14f80:	9807      	ldr	r0, [sp, #28]
   14f82:	f1bb 0f00 	cmp.w	fp, #0
   14f86:	d071      	beq.n	1506c <bt_le_adv_start_legacy+0x214>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14f88:	2800      	cmp	r0, #0
   14f8a:	d080      	beq.n	14e8e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14f8c:	2100      	movs	r1, #0
   14f8e:	f000 faa9 	bl	154e4 <bt_conn_set_state>
			bt_conn_unref(conn);
   14f92:	9807      	ldr	r0, [sp, #28]
   14f94:	f00b fd56 	bl	20a44 <bt_conn_unref>
   14f98:	e779      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   14f9a:	9608      	str	r6, [sp, #32]
   14f9c:	a908      	add	r1, sp, #32
   14f9e:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   14fa2:	e7b4      	b.n	14f0e <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
   14fa4:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   14fa8:	e7ca      	b.n	14f40 <bt_le_adv_start_legacy+0xe8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   14faa:	059a      	lsls	r2, r3, #22
   14fac:	d403      	bmi.n	14fb6 <bt_le_adv_start_legacy+0x15e>
   14fae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14fb0:	b90b      	cbnz	r3, 14fb6 <bt_le_adv_start_legacy+0x15e>
   14fb2:	2802      	cmp	r0, #2
   14fb4:	d103      	bne.n	14fbe <bt_le_adv_start_legacy+0x166>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   14fb6:	2302      	movs	r3, #2
   14fb8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14fbc:	e7c0      	b.n	14f40 <bt_le_adv_start_legacy+0xe8>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14fbe:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   14fc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   14fc4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   14fc8:	e7ba      	b.n	14f40 <bt_le_adv_start_legacy+0xe8>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   14fca:	9b19      	ldr	r3, [sp, #100]	; 0x64
   14fcc:	9300      	str	r3, [sp, #0]
   14fce:	e9cd 8901 	strd	r8, r9, [sp, #4]
   14fd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   14fd4:	9905      	ldr	r1, [sp, #20]
   14fd6:	4652      	mov	r2, sl
   14fd8:	4628      	mov	r0, r5
   14fda:	f00b fbcd 	bl	20778 <le_adv_update.constprop.0>
		if (err) {
   14fde:	4683      	mov	fp, r0
   14fe0:	2800      	cmp	r0, #0
   14fe2:	d0c5      	beq.n	14f70 <bt_le_adv_start_legacy+0x118>
   14fe4:	e753      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   14fe6:	a907      	add	r1, sp, #28
   14fe8:	4628      	mov	r0, r5
   14fea:	f7ff feed 	bl	14dc8 <le_adv_start_add_conn>
		if (err) {
   14fee:	4683      	mov	fp, r0
   14ff0:	2800      	cmp	r0, #0
   14ff2:	d0c0      	beq.n	14f76 <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
   14ff4:	f110 0f0c 	cmn.w	r0, #12
   14ff8:	f47f af49 	bne.w	14e8e <bt_le_adv_start_legacy+0x36>
   14ffc:	2e00      	cmp	r6, #0
   14ffe:	f47f af46 	bne.w	14e8e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   15002:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15004:	0798      	lsls	r0, r3, #30
   15006:	f53f af42 	bmi.w	14e8e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1500a:	6862      	ldr	r2, [r4, #4]
   1500c:	f082 0202 	eor.w	r2, r2, #2
   15010:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   15014:	f00b 0201 	and.w	r2, fp, #1
   15018:	210d      	movs	r1, #13
   1501a:	4638      	mov	r0, r7
   1501c:	f00b fb95 	bl	2074a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   15020:	f109 33ff 	add.w	r3, r9, #4294967295
   15024:	425a      	negs	r2, r3
   15026:	415a      	adcs	r2, r3
   15028:	2107      	movs	r1, #7
   1502a:	4638      	mov	r0, r7
   1502c:	f00b fb8d 	bl	2074a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   15030:	f1a9 0102 	sub.w	r1, r9, #2
   15034:	424a      	negs	r2, r1
   15036:	414a      	adcs	r2, r1
   15038:	4638      	mov	r0, r7
   1503a:	2108      	movs	r1, #8
   1503c:	f00b fb85 	bl	2074a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   15040:	6862      	ldr	r2, [r4, #4]
   15042:	2109      	movs	r1, #9
   15044:	f002 0201 	and.w	r2, r2, #1
   15048:	4638      	mov	r0, r7
   1504a:	f00b fb7e 	bl	2074a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1504e:	4642      	mov	r2, r8
   15050:	210a      	movs	r1, #10
   15052:	4638      	mov	r0, r7
   15054:	f00b fb79 	bl	2074a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15058:	6862      	ldr	r2, [r4, #4]
   1505a:	210c      	movs	r1, #12
   1505c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15060:	4638      	mov	r0, r7
   15062:	f00b fb72 	bl	2074a <atomic_set_bit_to>
	return 0;
   15066:	f04f 0b00 	mov.w	fp, #0
   1506a:	e710      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1506c:	b108      	cbz	r0, 15072 <bt_le_adv_start_legacy+0x21a>
		bt_conn_unref(conn);
   1506e:	f00b fce9 	bl	20a44 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15072:	2e00      	cmp	r6, #0
   15074:	d1ce      	bne.n	15014 <bt_le_adv_start_legacy+0x1bc>
   15076:	e7c8      	b.n	1500a <bt_le_adv_start_legacy+0x1b2>
		return -EAGAIN;
   15078:	f06f 0b0a 	mvn.w	fp, #10
   1507c:	e707      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1507e:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15082:	e704      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   15084:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15088:	e701      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
   1508a:	4683      	mov	fp, r0
   1508c:	e6ff      	b.n	14e8e <bt_le_adv_start_legacy+0x36>
   1508e:	bf00      	nop
   15090:	20000394 	.word	0x20000394
   15094:	200002c8 	.word	0x200002c8

00015098 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15098:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1509a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1509c:	9a06      	ldr	r2, [sp, #24]
{
   1509e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   150a0:	e9cd 3200 	strd	r3, r2, [sp]
   150a4:	462b      	mov	r3, r5
   150a6:	460a      	mov	r2, r1
   150a8:	4601      	mov	r1, r0
   150aa:	4811      	ldr	r0, [pc, #68]	; (150f0 <bt_le_adv_start+0x58>)
   150ac:	f7ff fed4 	bl	14e58 <bt_le_adv_start_legacy>
   150b0:	4621      	mov	r1, r4
   150b2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   150b4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   150b6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   150ba:	429d      	cmp	r5, r3
   150bc:	d102      	bne.n	150c4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   150be:	4630      	mov	r0, r6
   150c0:	b002      	add	sp, #8
   150c2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   150c4:	880a      	ldrh	r2, [r1, #0]
   150c6:	4282      	cmp	r2, r0
   150c8:	d104      	bne.n	150d4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   150ca:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   150cc:	b112      	cbz	r2, 150d4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   150ce:	7812      	ldrb	r2, [r2, #0]
   150d0:	07d2      	lsls	r2, r2, #31
   150d2:	d402      	bmi.n	150da <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   150d4:	3301      	adds	r3, #1
   150d6:	3108      	adds	r1, #8
   150d8:	e7ef      	b.n	150ba <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   150da:	4906      	ldr	r1, [pc, #24]	; (150f4 <bt_le_adv_start+0x5c>)
   150dc:	4806      	ldr	r0, [pc, #24]	; (150f8 <bt_le_adv_start+0x60>)
   150de:	f00d fdd9 	bl	22c94 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   150e2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   150e6:	2300      	movs	r3, #0
   150e8:	4803      	ldr	r0, [pc, #12]	; (150f8 <bt_le_adv_start+0x60>)
   150ea:	f005 ffcb 	bl	1b084 <k_work_reschedule>
   150ee:	e7e6      	b.n	150be <bt_le_adv_start+0x26>
   150f0:	200002e0 	.word	0x200002e0
   150f4:	000208d7 	.word	0x000208d7
   150f8:	200002f8 	.word	0x200002f8

000150fc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   150fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   150fe:	4822      	ldr	r0, [pc, #136]	; (15188 <bt_le_adv_stop+0x8c>)
   15100:	f00b fbe6 	bl	208d0 <bt_le_lim_adv_cancel_timeout>
   15104:	4821      	ldr	r0, [pc, #132]	; (1518c <bt_le_adv_stop+0x90>)
   15106:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1510a:	f00b faa7 	bl	2065c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1510e:	481f      	ldr	r0, [pc, #124]	; (1518c <bt_le_adv_stop+0x90>)
   15110:	f00b fa9e 	bl	20650 <atomic_get>
   15114:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15116:	065a      	lsls	r2, r3, #25
   15118:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1511c:	d531      	bpl.n	15182 <bt_le_adv_stop+0x86>
   1511e:	481b      	ldr	r0, [pc, #108]	; (1518c <bt_le_adv_stop+0x90>)
   15120:	f00b fa96 	bl	20650 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15124:	0583      	lsls	r3, r0, #22
   15126:	d521      	bpl.n	1516c <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15128:	2300      	movs	r3, #0
   1512a:	4819      	ldr	r0, [pc, #100]	; (15190 <bt_le_adv_stop+0x94>)
   1512c:	9300      	str	r3, [sp, #0]
   1512e:	2207      	movs	r2, #7
   15130:	4669      	mov	r1, sp
   15132:	f8cd 3003 	str.w	r3, [sp, #3]
   15136:	f00e f8fa 	bl	2332e <memcmp>
   1513a:	4b16      	ldr	r3, [pc, #88]	; (15194 <bt_le_adv_stop+0x98>)
   1513c:	b9e8      	cbnz	r0, 1517a <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1513e:	4a16      	ldr	r2, [pc, #88]	; (15198 <bt_le_adv_stop+0x9c>)
   15140:	8891      	ldrh	r1, [r2, #4]
   15142:	6810      	ldr	r0, [r2, #0]
   15144:	7992      	ldrb	r2, [r2, #6]
   15146:	f8ad 100c 	strh.w	r1, [sp, #12]
   1514a:	f88d 200e 	strb.w	r2, [sp, #14]
   1514e:	9002      	str	r0, [sp, #8]
   15150:	2204      	movs	r2, #4
   15152:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15154:	7e18      	ldrb	r0, [r3, #24]
   15156:	f000 fb5b 	bl	15810 <bt_conn_lookup_state_le>
   1515a:	4604      	mov	r4, r0
	if (conn) {
   1515c:	b130      	cbz	r0, 1516c <bt_le_adv_stop+0x70>
		conn->err = status;
   1515e:	2100      	movs	r1, #0
   15160:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15162:	f000 f9bf 	bl	154e4 <bt_conn_set_state>
		bt_conn_unref(conn);
   15166:	4620      	mov	r0, r4
   15168:	f00b fc6c 	bl	20a44 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   1516c:	4806      	ldr	r0, [pc, #24]	; (15188 <bt_le_adv_stop+0x8c>)
   1516e:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   15170:	b004      	add	sp, #16
   15172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   15176:	f00b bb86 	b.w	20886 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1517a:	2205      	movs	r2, #5
   1517c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   15180:	e7e8      	b.n	15154 <bt_le_adv_stop+0x58>
}
   15182:	b004      	add	sp, #16
   15184:	bd10      	pop	{r4, pc}
   15186:	bf00      	nop
   15188:	200002e0 	.word	0x200002e0
   1518c:	200002f0 	.word	0x200002f0
   15190:	200002e9 	.word	0x200002e9
   15194:	200002c8 	.word	0x200002c8
   15198:	00023859 	.word	0x00023859

0001519c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   1519c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1519e:	481e      	ldr	r0, [pc, #120]	; (15218 <bt_le_adv_resume+0x7c>)
   151a0:	4c1d      	ldr	r4, [pc, #116]	; (15218 <bt_le_adv_resume+0x7c>)
   151a2:	f00b fa55 	bl	20650 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   151a6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   151aa:	d032      	beq.n	15212 <bt_le_adv_resume+0x76>
   151ac:	4620      	mov	r0, r4
   151ae:	f00b fa4f 	bl	20650 <atomic_get>
   151b2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   151b4:	f3c0 1580 	ubfx	r5, r0, #6, #1
   151b8:	d42b      	bmi.n	15212 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   151ba:	4620      	mov	r0, r4
   151bc:	f00b fa48 	bl	20650 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   151c0:	0583      	lsls	r3, r0, #22
   151c2:	d526      	bpl.n	15212 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   151c4:	a901      	add	r1, sp, #4
   151c6:	f1a4 0010 	sub.w	r0, r4, #16
   151ca:	f7ff fdfd 	bl	14dc8 <le_adv_start_add_conn>
	if (err) {
   151ce:	bb00      	cbnz	r0, 15212 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   151d0:	2101      	movs	r1, #1
   151d2:	f1a4 0010 	sub.w	r0, r4, #16
   151d6:	f00b fb56 	bl	20886 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   151da:	b150      	cbz	r0, 151f2 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   151dc:	4629      	mov	r1, r5
   151de:	9801      	ldr	r0, [sp, #4]
   151e0:	f000 f980 	bl	154e4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   151e4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   151e8:	4620      	mov	r0, r4
   151ea:	f00b fa37 	bl	2065c <atomic_and>
	return (old & mask) != 0;
   151ee:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   151f2:	9801      	ldr	r0, [sp, #4]
   151f4:	f00b fc26 	bl	20a44 <bt_conn_unref>
	if (persist_paused) {
   151f8:	b15d      	cbz	r5, 15212 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   151fa:	f3bf 8f5b 	dmb	ish
   151fe:	e854 3f00 	ldrex	r3, [r4]
   15202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   15206:	e844 3200 	strex	r2, r3, [r4]
   1520a:	2a00      	cmp	r2, #0
   1520c:	d1f7      	bne.n	151fe <bt_le_adv_resume+0x62>
   1520e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   15212:	b003      	add	sp, #12
   15214:	bd30      	pop	{r4, r5, pc}
   15216:	bf00      	nop
   15218:	200002f0 	.word	0x200002f0

0001521c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1521c:	4b0b      	ldr	r3, [pc, #44]	; (1524c <notify_connected+0x30>)
{
   1521e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   15220:	681d      	ldr	r5, [r3, #0]
{
   15222:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15224:	b925      	cbnz	r5, 15230 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15226:	4d0a      	ldr	r5, [pc, #40]	; (15250 <notify_connected+0x34>)
   15228:	4e0a      	ldr	r6, [pc, #40]	; (15254 <notify_connected+0x38>)
   1522a:	42b5      	cmp	r5, r6
   1522c:	d307      	bcc.n	1523e <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1522e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   15230:	682b      	ldr	r3, [r5, #0]
   15232:	b113      	cbz	r3, 1523a <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   15234:	7a61      	ldrb	r1, [r4, #9]
   15236:	4620      	mov	r0, r4
   15238:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1523a:	692d      	ldr	r5, [r5, #16]
   1523c:	e7f2      	b.n	15224 <notify_connected+0x8>
		if (cb->connected) {
   1523e:	682b      	ldr	r3, [r5, #0]
   15240:	b113      	cbz	r3, 15248 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   15242:	7a61      	ldrb	r1, [r4, #9]
   15244:	4620      	mov	r0, r4
   15246:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15248:	3514      	adds	r5, #20
   1524a:	e7ee      	b.n	1522a <notify_connected+0xe>
   1524c:	20002488 	.word	0x20002488
   15250:	00023768 	.word	0x00023768
   15254:	00023768 	.word	0x00023768

00015258 <tx_free>:
	tx->cb = NULL;
   15258:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1525a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1525e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   15260:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15262:	4801      	ldr	r0, [pc, #4]	; (15268 <tx_free+0x10>)
   15264:	f00d bc0a 	b.w	22a7c <k_queue_append>
   15268:	20000a6c 	.word	0x20000a6c

0001526c <send_frag>:
{
   1526c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15270:	694d      	ldr	r5, [r1, #20]
{
   15272:	4604      	mov	r4, r0
   15274:	460e      	mov	r6, r1
   15276:	4690      	mov	r8, r2
   15278:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1527a:	f04f 33ff 	mov.w	r3, #4294967295
   1527e:	483e      	ldr	r0, [pc, #248]	; (15378 <send_frag+0x10c>)
   15280:	f04f 32ff 	mov.w	r2, #4294967295
   15284:	f005 fd1c 	bl	1acc0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   15288:	7aa3      	ldrb	r3, [r4, #10]
   1528a:	2b07      	cmp	r3, #7
   1528c:	d146      	bne.n	1531c <send_frag+0xb0>
	__asm__ volatile(
   1528e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15292:	f3ef 8211 	mrs	r2, BASEPRI
   15296:	f383 8812 	msr	BASEPRI_MAX, r3
   1529a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1529e:	69a3      	ldr	r3, [r4, #24]
   152a0:	2d00      	cmp	r5, #0
   152a2:	d04d      	beq.n	15340 <send_frag+0xd4>
	parent->next = child;
   152a4:	2100      	movs	r1, #0
   152a6:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   152a8:	2b00      	cmp	r3, #0
   152aa:	d146      	bne.n	1533a <send_frag+0xce>
	list->head = node;
   152ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   152b0:	f382 8811 	msr	BASEPRI, r2
   152b4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   152b8:	2104      	movs	r1, #4
   152ba:	f106 0008 	add.w	r0, r6, #8
   152be:	f00c fec6 	bl	2204e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   152c2:	8823      	ldrh	r3, [r4, #0]
   152c4:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   152c8:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   152cc:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   152ce:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   152d2:	3b04      	subs	r3, #4
   152d4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   152d6:	2302      	movs	r3, #2
   152d8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   152da:	4630      	mov	r0, r6
   152dc:	f7fe ff94 	bl	14208 <bt_send>
	if (err) {
   152e0:	2800      	cmp	r0, #0
   152e2:	d047      	beq.n	15374 <send_frag+0x108>
	__asm__ volatile(
   152e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   152e8:	f3ef 8011 	mrs	r0, BASEPRI
   152ec:	f383 8812 	msr	BASEPRI_MAX, r3
   152f0:	f3bf 8f6f 	isb	sy
		if (tx) {
   152f4:	2d00      	cmp	r5, #0
   152f6:	d037      	beq.n	15368 <send_frag+0xfc>
	return list->head;
   152f8:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   152fa:	2200      	movs	r2, #0
   152fc:	b153      	cbz	r3, 15314 <send_frag+0xa8>
   152fe:	429d      	cmp	r5, r3
   15300:	d12f      	bne.n	15362 <send_frag+0xf6>
	return node->next;
   15302:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   15304:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   15306:	bb3a      	cbnz	r2, 15358 <send_frag+0xec>
   15308:	42a9      	cmp	r1, r5
	list->head = node;
   1530a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1530c:	d100      	bne.n	15310 <send_frag+0xa4>
	list->tail = node;
   1530e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   15310:	2300      	movs	r3, #0
   15312:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   15314:	f380 8811 	msr	BASEPRI, r0
   15318:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1531c:	4816      	ldr	r0, [pc, #88]	; (15378 <send_frag+0x10c>)
   1531e:	f005 fca9 	bl	1ac74 <z_impl_k_sem_give>
	if (tx) {
   15322:	b115      	cbz	r5, 1532a <send_frag+0xbe>
		tx_free(tx);
   15324:	4628      	mov	r0, r5
   15326:	f7ff ff97 	bl	15258 <tx_free>
	if (always_consume) {
   1532a:	b11f      	cbz	r7, 15334 <send_frag+0xc8>
		net_buf_unref(buf);
   1532c:	4630      	mov	r0, r6
   1532e:	f001 ff45 	bl	171bc <net_buf_unref>
	return false;
   15332:	2700      	movs	r7, #0
}
   15334:	4638      	mov	r0, r7
   15336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1533a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1533c:	61a5      	str	r5, [r4, #24]
}
   1533e:	e7b7      	b.n	152b0 <send_frag+0x44>
		if (tail_tx) {
   15340:	b133      	cbz	r3, 15350 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   15342:	f103 090c 	add.w	r9, r3, #12
   15346:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15348:	3301      	adds	r3, #1
   1534a:	f8c9 3000 	str.w	r3, [r9]
   1534e:	e7af      	b.n	152b0 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15350:	69e3      	ldr	r3, [r4, #28]
   15352:	f104 091c 	add.w	r9, r4, #28
   15356:	e7f7      	b.n	15348 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   15358:	42a9      	cmp	r1, r5
	parent->next = child;
   1535a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1535c:	bf08      	it	eq
   1535e:	61a2      	streq	r2, [r4, #24]
}
   15360:	e7d6      	b.n	15310 <send_frag+0xa4>
	return node->next;
   15362:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15364:	681b      	ldr	r3, [r3, #0]
   15366:	e7c9      	b.n	152fc <send_frag+0x90>
			(*pending_no_cb)--;
   15368:	f8d9 3000 	ldr.w	r3, [r9]
   1536c:	3b01      	subs	r3, #1
   1536e:	f8c9 3000 	str.w	r3, [r9]
   15372:	e7cf      	b.n	15314 <send_frag+0xa8>
	return true;
   15374:	2701      	movs	r7, #1
   15376:	e7dd      	b.n	15334 <send_frag+0xc8>
   15378:	200003c8 	.word	0x200003c8

0001537c <bt_conn_get_pkts>:
}
   1537c:	4800      	ldr	r0, [pc, #0]	; (15380 <bt_conn_get_pkts+0x4>)
   1537e:	4770      	bx	lr
   15380:	200003c8 	.word	0x200003c8

00015384 <bt_conn_new>:
{
   15384:	b538      	push	{r3, r4, r5, lr}
   15386:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   15388:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1538a:	2501      	movs	r5, #1
   1538c:	428b      	cmp	r3, r1
   1538e:	d102      	bne.n	15396 <bt_conn_new+0x12>
		return NULL;
   15390:	2400      	movs	r4, #0
}
   15392:	4620      	mov	r0, r4
   15394:	bd38      	pop	{r3, r4, r5, pc}
   15396:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1539a:	f3bf 8f5b 	dmb	ish
   1539e:	e852 0f00 	ldrex	r0, [r2]
   153a2:	2800      	cmp	r0, #0
   153a4:	d104      	bne.n	153b0 <bt_conn_new+0x2c>
   153a6:	e842 5c00 	strex	ip, r5, [r2]
   153aa:	f1bc 0f00 	cmp.w	ip, #0
   153ae:	d1f6      	bne.n	1539e <bt_conn_new+0x1a>
   153b0:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   153b4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   153b8:	d002      	beq.n	153c0 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   153ba:	3301      	adds	r3, #1
   153bc:	4604      	mov	r4, r0
   153be:	e7e5      	b.n	1538c <bt_conn_new+0x8>
	if (!conn) {
   153c0:	2c00      	cmp	r4, #0
   153c2:	d0e6      	beq.n	15392 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   153c4:	22b8      	movs	r2, #184	; 0xb8
   153c6:	2100      	movs	r1, #0
   153c8:	4620      	mov	r0, r4
   153ca:	f00d ffe1 	bl	23390 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   153ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
   153d2:	4904      	ldr	r1, [pc, #16]	; (153e4 <bt_conn_new+0x60>)
   153d4:	f00d fc5e 	bl	22c94 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   153d8:	4903      	ldr	r1, [pc, #12]	; (153e8 <bt_conn_new+0x64>)
   153da:	f104 0028 	add.w	r0, r4, #40	; 0x28
   153de:	f00d fc1e 	bl	22c1e <k_work_init>
	return conn;
   153e2:	e7d6      	b.n	15392 <bt_conn_new+0xe>
   153e4:	000158c1 	.word	0x000158c1
   153e8:	00020921 	.word	0x00020921

000153ec <bt_conn_send_cb>:
{
   153ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153ee:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   153f0:	7a83      	ldrb	r3, [r0, #10]
   153f2:	2b07      	cmp	r3, #7
{
   153f4:	4604      	mov	r4, r0
   153f6:	460d      	mov	r5, r1
   153f8:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   153fa:	d114      	bne.n	15426 <bt_conn_send_cb+0x3a>
	if (cb) {
   153fc:	b312      	cbz	r2, 15444 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   153fe:	f006 f939 	bl	1b674 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15402:	4b13      	ldr	r3, [pc, #76]	; (15450 <bt_conn_send_cb+0x64>)
   15404:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   15406:	4813      	ldr	r0, [pc, #76]	; (15454 <bt_conn_send_cb+0x68>)
   15408:	bf07      	ittee	eq
   1540a:	2200      	moveq	r2, #0
   1540c:	2300      	moveq	r3, #0
   1540e:	f04f 32ff 	movne.w	r2, #4294967295
   15412:	f04f 33ff 	movne.w	r3, #4294967295
   15416:	f005 fbf9 	bl	1ac0c <z_impl_k_queue_get>
		if (!tx) {
   1541a:	b1a8      	cbz	r0, 15448 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   1541c:	7aa3      	ldrb	r3, [r4, #10]
   1541e:	2b07      	cmp	r3, #7
   15420:	d004      	beq.n	1542c <bt_conn_send_cb+0x40>
			tx_free(tx);
   15422:	f7ff ff19 	bl	15258 <tx_free>
		return -ENOTCONN;
   15426:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1542a:	e00a      	b.n	15442 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   1542c:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1542e:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   15432:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   15434:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   15436:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1543a:	4629      	mov	r1, r5
   1543c:	f00c fdbd 	bl	21fba <net_buf_put>
	return 0;
   15440:	2000      	movs	r0, #0
}
   15442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   15444:	614a      	str	r2, [r1, #20]
   15446:	e7f6      	b.n	15436 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   15448:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1544c:	e7f9      	b.n	15442 <bt_conn_send_cb+0x56>
   1544e:	bf00      	nop
   15450:	20001d70 	.word	0x20001d70
   15454:	20000a6c 	.word	0x20000a6c

00015458 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
   15458:	4b1b      	ldr	r3, [pc, #108]	; (154c8 <bt_conn_prepare_events+0x70>)
{
   1545a:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
   1545c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1545e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   15460:	609a      	str	r2, [r3, #8]
{
   15462:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15464:	f00d ff36 	bl	232d4 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15468:	f3bf 8f5b 	dmb	ish
   1546c:	4b17      	ldr	r3, [pc, #92]	; (154cc <bt_conn_prepare_events+0x74>)
   1546e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   15472:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   15476:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   1547a:	b90a      	cbnz	r2, 15480 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   1547c:	2001      	movs	r0, #1
}
   1547e:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15480:	7a9a      	ldrb	r2, [r3, #10]
   15482:	b99a      	cbnz	r2, 154ac <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15484:	f3bf 8f5b 	dmb	ish
   15488:	1d1a      	adds	r2, r3, #4
   1548a:	e852 1f00 	ldrex	r1, [r2]
   1548e:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
   15492:	e842 ce00 	strex	lr, ip, [r2]
   15496:	f1be 0f00 	cmp.w	lr, #0
   1549a:	d1f6      	bne.n	1548a <bt_conn_prepare_events+0x32>
   1549c:	f3bf 8f5b 	dmb	ish
   154a0:	064a      	lsls	r2, r1, #25
   154a2:	d503      	bpl.n	154ac <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
   154a4:	4618      	mov	r0, r3
   154a6:	f00b fa47 	bl	20938 <conn_cleanup>
   154aa:	e7e7      	b.n	1547c <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   154ac:	7a9b      	ldrb	r3, [r3, #10]
   154ae:	2b07      	cmp	r3, #7
   154b0:	d1e4      	bne.n	1547c <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   154b2:	4b07      	ldr	r3, [pc, #28]	; (154d0 <bt_conn_prepare_events+0x78>)
   154b4:	2200      	movs	r2, #0
   154b6:	2104      	movs	r1, #4
   154b8:	f00d ff0c 	bl	232d4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   154bc:	2301      	movs	r3, #1
   154be:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   154c2:	2002      	movs	r0, #2
	return ev_count;
   154c4:	e7db      	b.n	1547e <bt_conn_prepare_events+0x26>
   154c6:	bf00      	nop
   154c8:	20000674 	.word	0x20000674
   154cc:	200019b0 	.word	0x200019b0
   154d0:	200019e8 	.word	0x200019e8

000154d4 <bt_conn_lookup_handle>:
{
   154d4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   154d6:	2101      	movs	r1, #1
   154d8:	4801      	ldr	r0, [pc, #4]	; (154e0 <bt_conn_lookup_handle+0xc>)
   154da:	f00b bacd 	b.w	20a78 <conn_lookup_handle>
   154de:	bf00      	nop
   154e0:	200019b0 	.word	0x200019b0

000154e4 <bt_conn_set_state>:
{
   154e4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   154e6:	7a85      	ldrb	r5, [r0, #10]
   154e8:	428d      	cmp	r5, r1
{
   154ea:	4604      	mov	r4, r0
	if (conn->state == state) {
   154ec:	f000 80a4 	beq.w	15638 <bt_conn_set_state+0x154>
	conn->state = state;
   154f0:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   154f2:	b925      	cbnz	r5, 154fe <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   154f4:	7883      	ldrb	r3, [r0, #2]
   154f6:	2b08      	cmp	r3, #8
   154f8:	d001      	beq.n	154fe <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   154fa:	f00b fa88 	bl	20a0e <bt_conn_ref>
	switch (conn->state) {
   154fe:	7aa3      	ldrb	r3, [r4, #10]
   15500:	2b01      	cmp	r3, #1
   15502:	d116      	bne.n	15532 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   15504:	4d4d      	ldr	r5, [pc, #308]	; (1563c <bt_conn_set_state+0x158>)
		tx->pending_no_cb = 0U;
   15506:	2600      	movs	r6, #0
	__asm__ volatile(
   15508:	f04f 0340 	mov.w	r3, #64	; 0x40
   1550c:	f3ef 8211 	mrs	r2, BASEPRI
   15510:	f383 8812 	msr	BASEPRI_MAX, r3
   15514:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15518:	69e3      	ldr	r3, [r4, #28]
   1551a:	2b00      	cmp	r3, #0
   1551c:	d06d      	beq.n	155fa <bt_conn_set_state+0x116>
			conn->pending_no_cb--;
   1551e:	3b01      	subs	r3, #1
   15520:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15522:	f382 8811 	msr	BASEPRI, r2
   15526:	f3bf 8f6f 	isb	sy
   1552a:	4628      	mov	r0, r5
   1552c:	f005 fba2 	bl	1ac74 <z_impl_k_sem_give>
}
   15530:	e7ea      	b.n	15508 <bt_conn_set_state+0x24>
	switch (conn->state) {
   15532:	2b07      	cmp	r3, #7
   15534:	d009      	beq.n	1554a <bt_conn_set_state+0x66>
   15536:	2b00      	cmp	r3, #0
   15538:	d17e      	bne.n	15638 <bt_conn_set_state+0x154>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1553a:	78a3      	ldrb	r3, [r4, #2]
   1553c:	2b04      	cmp	r3, #4
   1553e:	d11e      	bne.n	1557e <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   15540:	4620      	mov	r0, r4
}
   15542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   15546:	f00b ba7d 	b.w	20a44 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1554a:	78a3      	ldrb	r3, [r4, #2]
   1554c:	2b04      	cmp	r3, #4
   1554e:	d073      	beq.n	15638 <bt_conn_set_state+0x154>
	z_impl_k_queue_init(queue);
   15550:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15554:	f00d fa86 	bl	22a64 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15558:	4839      	ldr	r0, [pc, #228]	; (15640 <bt_conn_set_state+0x15c>)
   1555a:	2100      	movs	r1, #0
   1555c:	f006 fb3a 	bl	1bbd4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15560:	2300      	movs	r3, #0
	list->tail = NULL;
   15562:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15566:	78e3      	ldrb	r3, [r4, #3]
   15568:	2b01      	cmp	r3, #1
   1556a:	d165      	bne.n	15638 <bt_conn_set_state+0x154>
			k_work_schedule(&conn->deferred_work,
   1556c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15570:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   15574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15578:	2300      	movs	r3, #0
   1557a:	f005 bd4f 	b.w	1b01c <k_work_schedule>
		switch (old_state) {
   1557e:	3d01      	subs	r5, #1
   15580:	2d05      	cmp	r5, #5
   15582:	d859      	bhi.n	15638 <bt_conn_set_state+0x154>
   15584:	a301      	add	r3, pc, #4	; (adr r3, 1558c <bt_conn_set_state+0xa8>)
   15586:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1558a:	bf00      	nop
   1558c:	000155a5 	.word	0x000155a5
   15590:	000155ed 	.word	0x000155ed
   15594:	00015541 	.word	0x00015541
   15598:	00015541 	.word	0x00015541
   1559c:	000155ed 	.word	0x000155ed
   155a0:	000155ed 	.word	0x000155ed
			tx_notify(conn);
   155a4:	4620      	mov	r0, r4
   155a6:	f00b f998 	bl	208da <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   155aa:	78a3      	ldrb	r3, [r4, #2]
   155ac:	2b01      	cmp	r3, #1
   155ae:	d10a      	bne.n	155c6 <bt_conn_set_state+0xe2>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   155b0:	f104 0558 	add.w	r5, r4, #88	; 0x58
   155b4:	4628      	mov	r0, r5
   155b6:	f00d fb79 	bl	22cac <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   155ba:	f010 0f0c 	tst.w	r0, #12
   155be:	d002      	beq.n	155c6 <bt_conn_set_state+0xe2>
				k_work_cancel_delayable(&conn->deferred_work);
   155c0:	4628      	mov	r0, r5
   155c2:	f00d fb75 	bl	22cb0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155c6:	f3bf 8f5b 	dmb	ish
   155ca:	3404      	adds	r4, #4
   155cc:	e854 3f00 	ldrex	r3, [r4]
   155d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   155d4:	e844 3200 	strex	r2, r3, [r4]
   155d8:	2a00      	cmp	r2, #0
   155da:	d1f7      	bne.n	155cc <bt_conn_set_state+0xe8>
   155dc:	f3bf 8f5b 	dmb	ish
   155e0:	4817      	ldr	r0, [pc, #92]	; (15640 <bt_conn_set_state+0x15c>)
}
   155e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   155e6:	2100      	movs	r1, #0
   155e8:	f006 baf4 	b.w	1bbd4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   155ec:	7a63      	ldrb	r3, [r4, #9]
   155ee:	2b00      	cmp	r3, #0
   155f0:	d0a6      	beq.n	15540 <bt_conn_set_state+0x5c>
				notify_connected(conn);
   155f2:	4620      	mov	r0, r4
   155f4:	f7ff fe12 	bl	1521c <notify_connected>
   155f8:	e7a2      	b.n	15540 <bt_conn_set_state+0x5c>
	return list->head;
   155fa:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   155fc:	b128      	cbz	r0, 1560a <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   155fe:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15600:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   15602:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15604:	4288      	cmp	r0, r1
	list->tail = node;
   15606:	bf08      	it	eq
   15608:	61a3      	streq	r3, [r4, #24]
   1560a:	f382 8811 	msr	BASEPRI, r2
   1560e:	f3bf 8f6f 	isb	sy
		if (!node) {
   15612:	b188      	cbz	r0, 15638 <bt_conn_set_state+0x154>
	__asm__ volatile(
   15614:	f04f 0240 	mov.w	r2, #64	; 0x40
   15618:	f3ef 8311 	mrs	r3, BASEPRI
   1561c:	f382 8812 	msr	BASEPRI_MAX, r2
   15620:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15624:	68c2      	ldr	r2, [r0, #12]
   15626:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15628:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1562a:	f383 8811 	msr	BASEPRI, r3
   1562e:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   15632:	f7ff fe11 	bl	15258 <tx_free>
   15636:	e778      	b.n	1552a <bt_conn_set_state+0x46>
}
   15638:	bd70      	pop	{r4, r5, r6, pc}
   1563a:	bf00      	nop
   1563c:	200003c8 	.word	0x200003c8
   15640:	20000674 	.word	0x20000674

00015644 <bt_conn_index>:
		index = conn - acl_conns;
   15644:	4b03      	ldr	r3, [pc, #12]	; (15654 <bt_conn_index+0x10>)
   15646:	1ac0      	subs	r0, r0, r3
   15648:	4b03      	ldr	r3, [pc, #12]	; (15658 <bt_conn_index+0x14>)
   1564a:	1180      	asrs	r0, r0, #6
   1564c:	4358      	muls	r0, r3
}
   1564e:	b2c0      	uxtb	r0, r0
   15650:	4770      	bx	lr
   15652:	bf00      	nop
   15654:	200019b0 	.word	0x200019b0
   15658:	aaaaaaab 	.word	0xaaaaaaab

0001565c <bt_conn_create_pdu_timeout>:
{
   1565c:	b538      	push	{r3, r4, r5, lr}
   1565e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   15660:	4906      	ldr	r1, [pc, #24]	; (1567c <bt_conn_create_pdu_timeout+0x20>)
   15662:	2800      	cmp	r0, #0
   15664:	bf08      	it	eq
   15666:	4608      	moveq	r0, r1
   15668:	f00c fc3b 	bl	21ee2 <net_buf_alloc_fixed>
	if (!buf) {
   1566c:	4604      	mov	r4, r0
   1566e:	b118      	cbz	r0, 15678 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   15670:	1d29      	adds	r1, r5, #4
   15672:	3008      	adds	r0, #8
   15674:	f00c fc54 	bl	21f20 <net_buf_simple_reserve>
}
   15678:	4620      	mov	r0, r4
   1567a:	bd38      	pop	{r3, r4, r5, pc}
   1567c:	20000a84 	.word	0x20000a84

00015680 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15682:	f3bf 8f5b 	dmb	ish
   15686:	6842      	ldr	r2, [r0, #4]
   15688:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1568c:	05d2      	lsls	r2, r2, #23
{
   1568e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15690:	f100 0304 	add.w	r3, r0, #4
   15694:	d519      	bpl.n	156ca <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15696:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1569a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   1569e:	4291      	cmp	r1, r2
   156a0:	d813      	bhi.n	156ca <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   156a2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   156a6:	4291      	cmp	r1, r2
   156a8:	d30f      	bcc.n	156ca <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   156aa:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   156ae:	4291      	cmp	r1, r2
   156b0:	d10b      	bne.n	156ca <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156b2:	f3bf 8f5b 	dmb	ish
   156b6:	e853 2f00 	ldrex	r2, [r3]
   156ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   156be:	e843 2100 	strex	r1, r2, [r3]
   156c2:	2900      	cmp	r1, #0
   156c4:	d1f7      	bne.n	156b6 <notify_le_param_updated+0x36>
   156c6:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   156ca:	4b10      	ldr	r3, [pc, #64]	; (1570c <notify_le_param_updated+0x8c>)
   156cc:	681d      	ldr	r5, [r3, #0]
   156ce:	b925      	cbnz	r5, 156da <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   156d0:	4d0f      	ldr	r5, [pc, #60]	; (15710 <notify_le_param_updated+0x90>)
   156d2:	4f10      	ldr	r7, [pc, #64]	; (15714 <notify_le_param_updated+0x94>)
   156d4:	42bd      	cmp	r5, r7
   156d6:	d30c      	bcc.n	156f2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   156d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   156da:	68ee      	ldr	r6, [r5, #12]
   156dc:	b13e      	cbz	r6, 156ee <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   156de:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   156e2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   156e6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   156ea:	4620      	mov	r0, r4
   156ec:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   156ee:	692d      	ldr	r5, [r5, #16]
   156f0:	e7ed      	b.n	156ce <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   156f2:	68ee      	ldr	r6, [r5, #12]
   156f4:	b13e      	cbz	r6, 15706 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   156f6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   156fa:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   156fe:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15702:	4620      	mov	r0, r4
   15704:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15706:	3514      	adds	r5, #20
   15708:	e7e4      	b.n	156d4 <notify_le_param_updated+0x54>
   1570a:	bf00      	nop
   1570c:	20002488 	.word	0x20002488
   15710:	00023768 	.word	0x00023768
   15714:	00023768 	.word	0x00023768

00015718 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1571c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1571e:	4608      	mov	r0, r1
{
   15720:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   15722:	f00a fed0 	bl	204c6 <bt_le_conn_params_valid>
   15726:	4605      	mov	r5, r0
   15728:	b918      	cbnz	r0, 15732 <le_param_req+0x1a>
		return false;
   1572a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1572c:	4628      	mov	r0, r5
   1572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15732:	4b13      	ldr	r3, [pc, #76]	; (15780 <le_param_req+0x68>)
   15734:	681e      	ldr	r6, [r3, #0]
   15736:	b946      	cbnz	r6, 1574a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15738:	4e12      	ldr	r6, [pc, #72]	; (15784 <le_param_req+0x6c>)
   1573a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 15788 <le_param_req+0x70>
   1573e:	4546      	cmp	r6, r8
   15740:	d2f4      	bcs.n	1572c <le_param_req+0x14>
		if (!cb->le_param_req) {
   15742:	68b3      	ldr	r3, [r6, #8]
   15744:	b983      	cbnz	r3, 15768 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15746:	3614      	adds	r6, #20
   15748:	e7f9      	b.n	1573e <le_param_req+0x26>
		if (!cb->le_param_req) {
   1574a:	68b3      	ldr	r3, [r6, #8]
   1574c:	b90b      	cbnz	r3, 15752 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1574e:	6936      	ldr	r6, [r6, #16]
   15750:	e7f1      	b.n	15736 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15752:	4621      	mov	r1, r4
   15754:	4638      	mov	r0, r7
   15756:	4798      	blx	r3
   15758:	2800      	cmp	r0, #0
   1575a:	d0e6      	beq.n	1572a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1575c:	4620      	mov	r0, r4
   1575e:	f00a feb2 	bl	204c6 <bt_le_conn_params_valid>
   15762:	2800      	cmp	r0, #0
   15764:	d1f3      	bne.n	1574e <le_param_req+0x36>
   15766:	e7e0      	b.n	1572a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15768:	4621      	mov	r1, r4
   1576a:	4638      	mov	r0, r7
   1576c:	4798      	blx	r3
   1576e:	2800      	cmp	r0, #0
   15770:	d0db      	beq.n	1572a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15772:	4620      	mov	r0, r4
   15774:	f00a fea7 	bl	204c6 <bt_le_conn_params_valid>
   15778:	2800      	cmp	r0, #0
   1577a:	d1e4      	bne.n	15746 <le_param_req+0x2e>
   1577c:	e7d5      	b.n	1572a <le_param_req+0x12>
   1577e:	bf00      	nop
   15780:	20002488 	.word	0x20002488
   15784:	00023768 	.word	0x00023768
   15788:	00023768 	.word	0x00023768

0001578c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1578c:	4b02      	ldr	r3, [pc, #8]	; (15798 <bt_conn_cb_register+0xc>)
   1578e:	681a      	ldr	r2, [r3, #0]
   15790:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   15792:	6018      	str	r0, [r3, #0]
}
   15794:	4770      	bx	lr
   15796:	bf00      	nop
   15798:	20002488 	.word	0x20002488

0001579c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1579c:	b538      	push	{r3, r4, r5, lr}
   1579e:	4605      	mov	r5, r0
   157a0:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   157a2:	480a      	ldr	r0, [pc, #40]	; (157cc <bt_conn_add_le+0x30>)
   157a4:	2101      	movs	r1, #1
   157a6:	f7ff fded 	bl	15384 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   157aa:	b170      	cbz	r0, 157ca <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   157ac:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   157ae:	6823      	ldr	r3, [r4, #0]
   157b0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   157b4:	88a3      	ldrh	r3, [r4, #4]
   157b6:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   157ba:	79a3      	ldrb	r3, [r4, #6]
   157bc:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   157c0:	2301      	movs	r3, #1
   157c2:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   157c4:	4b02      	ldr	r3, [pc, #8]	; (157d0 <bt_conn_add_le+0x34>)
   157c6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   157ca:	bd38      	pop	{r3, r4, r5, pc}
   157cc:	200019b0 	.word	0x200019b0
   157d0:	00280018 	.word	0x00280018

000157d4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   157d4:	b570      	push	{r4, r5, r6, lr}
   157d6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   157d8:	480c      	ldr	r0, [pc, #48]	; (1580c <bt_conn_lookup_addr_le+0x38>)
{
   157da:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   157dc:	f00b f917 	bl	20a0e <bt_conn_ref>

		if (!conn) {
   157e0:	4604      	mov	r4, r0
   157e2:	b128      	cbz	r0, 157f0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   157e4:	7883      	ldrb	r3, [r0, #2]
   157e6:	2b01      	cmp	r3, #1
   157e8:	d004      	beq.n	157f4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   157ea:	f00b f92b 	bl	20a44 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   157ee:	2400      	movs	r4, #0
}
   157f0:	4620      	mov	r0, r4
   157f2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   157f4:	4629      	mov	r1, r5
   157f6:	4632      	mov	r2, r6
   157f8:	f00b f96b 	bl	20ad2 <bt_conn_is_peer_addr_le>
   157fc:	4605      	mov	r5, r0
   157fe:	2800      	cmp	r0, #0
   15800:	d1f6      	bne.n	157f0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15802:	4620      	mov	r0, r4
   15804:	f00b f91e 	bl	20a44 <bt_conn_unref>
	return NULL;
   15808:	462c      	mov	r4, r5
			continue;
   1580a:	e7f1      	b.n	157f0 <bt_conn_lookup_addr_le+0x1c>
   1580c:	200019b0 	.word	0x200019b0

00015810 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15812:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15814:	480e      	ldr	r0, [pc, #56]	; (15850 <bt_conn_lookup_state_le+0x40>)
{
   15816:	460e      	mov	r6, r1
   15818:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1581a:	f00b f8f8 	bl	20a0e <bt_conn_ref>

		if (!conn) {
   1581e:	4604      	mov	r4, r0
   15820:	b1a0      	cbz	r0, 1584c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15822:	7883      	ldrb	r3, [r0, #2]
   15824:	2b01      	cmp	r3, #1
   15826:	d003      	beq.n	15830 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15828:	f00b f90c 	bl	20a44 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1582c:	2400      	movs	r4, #0
			continue;
   1582e:	e00d      	b.n	1584c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15830:	b136      	cbz	r6, 15840 <bt_conn_lookup_state_le+0x30>
   15832:	4632      	mov	r2, r6
   15834:	4629      	mov	r1, r5
   15836:	f00b f94c 	bl	20ad2 <bt_conn_is_peer_addr_le>
   1583a:	b908      	cbnz	r0, 15840 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1583c:	4620      	mov	r0, r4
   1583e:	e7f3      	b.n	15828 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15840:	7aa3      	ldrb	r3, [r4, #10]
   15842:	42bb      	cmp	r3, r7
   15844:	d1fa      	bne.n	1583c <bt_conn_lookup_state_le+0x2c>
   15846:	7a23      	ldrb	r3, [r4, #8]
   15848:	42ab      	cmp	r3, r5
   1584a:	d1f7      	bne.n	1583c <bt_conn_lookup_state_le+0x2c>
}
   1584c:	4620      	mov	r0, r4
   1584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15850:	200019b0 	.word	0x200019b0

00015854 <send_conn_le_param_update>:
{
   15854:	b538      	push	{r3, r4, r5, lr}
   15856:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15858:	4608      	mov	r0, r1
{
   1585a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1585c:	f00a fe33 	bl	204c6 <bt_le_conn_params_valid>
   15860:	b348      	cbz	r0, 158b6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15862:	4b16      	ldr	r3, [pc, #88]	; (158bc <send_conn_le_param_update+0x68>)
   15864:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15868:	0799      	lsls	r1, r3, #30
   1586a:	d407      	bmi.n	1587c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1586c:	78e3      	ldrb	r3, [r4, #3]
   1586e:	b183      	cbz	r3, 15892 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15870:	4629      	mov	r1, r5
   15872:	4620      	mov	r0, r4
}
   15874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15878:	f000 b9ac 	b.w	15bd4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1587c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15880:	079a      	lsls	r2, r3, #30
   15882:	d5f3      	bpl.n	1586c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15884:	f3bf 8f5b 	dmb	ish
   15888:	6863      	ldr	r3, [r4, #4]
   1588a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1588e:	059b      	lsls	r3, r3, #22
   15890:	d4ec      	bmi.n	1586c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15892:	4629      	mov	r1, r5
   15894:	4620      	mov	r0, r4
   15896:	f00b f944 	bl	20b22 <bt_conn_le_conn_update>
		if (rc == 0) {
   1589a:	b958      	cbnz	r0, 158b4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   1589c:	882b      	ldrh	r3, [r5, #0]
   1589e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   158a2:	886b      	ldrh	r3, [r5, #2]
   158a4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   158a8:	88ab      	ldrh	r3, [r5, #4]
   158aa:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   158ae:	88eb      	ldrh	r3, [r5, #6]
   158b0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   158b4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   158b6:	f06f 0015 	mvn.w	r0, #21
   158ba:	e7fb      	b.n	158b4 <send_conn_le_param_update+0x60>
   158bc:	200002c8 	.word	0x200002c8

000158c0 <deferred_work>:
{
   158c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   158c2:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   158c6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   158c8:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   158cc:	b9fb      	cbnz	r3, 1590e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   158ce:	4628      	mov	r0, r5
   158d0:	f00b f9c7 	bl	20c62 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   158d4:	4b2c      	ldr	r3, [pc, #176]	; (15988 <deferred_work+0xc8>)
   158d6:	681e      	ldr	r6, [r3, #0]
   158d8:	b94e      	cbnz	r6, 158ee <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   158da:	4e2c      	ldr	r6, [pc, #176]	; (1598c <deferred_work+0xcc>)
   158dc:	4f2c      	ldr	r7, [pc, #176]	; (15990 <deferred_work+0xd0>)
   158de:	42be      	cmp	r6, r7
   158e0:	d30d      	bcc.n	158fe <deferred_work+0x3e>
		bt_conn_unref(conn);
   158e2:	4628      	mov	r0, r5
}
   158e4:	b003      	add	sp, #12
   158e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   158ea:	f00b b8ab 	b.w	20a44 <bt_conn_unref>
		if (cb->disconnected) {
   158ee:	6873      	ldr	r3, [r6, #4]
   158f0:	b11b      	cbz	r3, 158fa <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   158f2:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   158f6:	4628      	mov	r0, r5
   158f8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   158fa:	6936      	ldr	r6, [r6, #16]
   158fc:	e7ec      	b.n	158d8 <deferred_work+0x18>
		if (cb->disconnected) {
   158fe:	6873      	ldr	r3, [r6, #4]
   15900:	b11b      	cbz	r3, 1590a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   15902:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15906:	4628      	mov	r0, r5
   15908:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1590a:	3614      	adds	r6, #20
   1590c:	e7e7      	b.n	158de <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   1590e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15912:	2b01      	cmp	r3, #1
   15914:	d12f      	bne.n	15976 <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15916:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1591a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1591e:	e856 3f00 	ldrex	r3, [r6]
   15922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   15926:	e846 2100 	strex	r1, r2, [r6]
   1592a:	2900      	cmp	r1, #0
   1592c:	d1f7      	bne.n	1591e <deferred_work+0x5e>
   1592e:	f3bf 8f5b 	dmb	ish
   15932:	05db      	lsls	r3, r3, #23
   15934:	d521      	bpl.n	1597a <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15936:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1593a:	f8ad 3000 	strh.w	r3, [sp]
   1593e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   15942:	f8ad 3002 	strh.w	r3, [sp, #2]
   15946:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1594a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1594e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   15952:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   15956:	4669      	mov	r1, sp
   15958:	4628      	mov	r0, r5
   1595a:	f7ff ff7b 	bl	15854 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1595e:	f3bf 8f5b 	dmb	ish
   15962:	e856 3f00 	ldrex	r3, [r6]
   15966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1596a:	e846 3200 	strex	r2, r3, [r6]
   1596e:	2a00      	cmp	r2, #0
   15970:	d1f7      	bne.n	15962 <deferred_work+0xa2>
   15972:	f3bf 8f5b 	dmb	ish
}
   15976:	b003      	add	sp, #12
   15978:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   1597a:	4a06      	ldr	r2, [pc, #24]	; (15994 <deferred_work+0xd4>)
   1597c:	6810      	ldr	r0, [r2, #0]
   1597e:	6851      	ldr	r1, [r2, #4]
   15980:	466b      	mov	r3, sp
   15982:	c303      	stmia	r3!, {r0, r1}
   15984:	e7e7      	b.n	15956 <deferred_work+0x96>
   15986:	bf00      	nop
   15988:	20002488 	.word	0x20002488
   1598c:	00023768 	.word	0x00023768
   15990:	00023768 	.word	0x00023768
   15994:	00023844 	.word	0x00023844

00015998 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15998:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1599a:	4801      	ldr	r0, [pc, #4]	; (159a0 <bt_conn_create_frag_timeout+0x8>)
   1599c:	f7ff be5e 	b.w	1565c <bt_conn_create_pdu_timeout>
   159a0:	20000adc 	.word	0x20000adc

000159a4 <create_frag>:
{
   159a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159a8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   159aa:	f04f 33ff 	mov.w	r3, #4294967295
   159ae:	f04f 32ff 	mov.w	r2, #4294967295
   159b2:	2000      	movs	r0, #0
{
   159b4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   159b6:	f7ff ffef 	bl	15998 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   159ba:	7ab3      	ldrb	r3, [r6, #10]
   159bc:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   159be:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   159c0:	f04f 0600 	mov.w	r6, #0
   159c4:	d005      	beq.n	159d2 <create_frag+0x2e>
		net_buf_unref(frag);
   159c6:	f001 fbf9 	bl	171bc <net_buf_unref>
		return NULL;
   159ca:	4635      	mov	r5, r6
}
   159cc:	4628      	mov	r0, r5
   159ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   159d2:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   159d4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   159d8:	4e0c      	ldr	r6, [pc, #48]	; (15a0c <create_frag+0x68>)
   159da:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   159dc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   159e0:	f00c fb59 	bl	22096 <net_buf_simple_tailroom>
   159e4:	4580      	cmp	r8, r0
   159e6:	d20c      	bcs.n	15a02 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   159e8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   159ec:	f854 1f08 	ldr.w	r1, [r4, #8]!
   159f0:	4632      	mov	r2, r6
   159f2:	4638      	mov	r0, r7
   159f4:	f00c fb1a 	bl	2202c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   159f8:	4631      	mov	r1, r6
   159fa:	4620      	mov	r0, r4
   159fc:	f00c fb2f 	bl	2205e <net_buf_simple_pull>
   15a00:	e7e4      	b.n	159cc <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15a02:	4638      	mov	r0, r7
   15a04:	f00c fb47 	bl	22096 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15a08:	b286      	uxth	r6, r0
   15a0a:	e7ef      	b.n	159ec <create_frag+0x48>
   15a0c:	200002c8 	.word	0x200002c8

00015a10 <bt_conn_process_tx>:
{
   15a10:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15a12:	7a83      	ldrb	r3, [r0, #10]
{
   15a14:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15a16:	b993      	cbnz	r3, 15a3e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a18:	f3bf 8f5b 	dmb	ish
   15a1c:	1d03      	adds	r3, r0, #4
   15a1e:	e853 2f00 	ldrex	r2, [r3]
   15a22:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15a26:	e843 1500 	strex	r5, r1, [r3]
   15a2a:	2d00      	cmp	r5, #0
   15a2c:	d1f7      	bne.n	15a1e <bt_conn_process_tx+0xe>
   15a2e:	f3bf 8f5b 	dmb	ish
   15a32:	0653      	lsls	r3, r2, #25
   15a34:	d503      	bpl.n	15a3e <bt_conn_process_tx+0x2e>
}
   15a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15a3a:	f00a bf7d 	b.w	20938 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15a3e:	2200      	movs	r2, #0
   15a40:	2300      	movs	r3, #0
   15a42:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15a46:	f00c fa51 	bl	21eec <net_buf_get>
	BT_ASSERT(buf);
   15a4a:	4605      	mov	r5, r0
   15a4c:	b960      	cbnz	r0, 15a68 <bt_conn_process_tx+0x58>
   15a4e:	4a1f      	ldr	r2, [pc, #124]	; (15acc <bt_conn_process_tx+0xbc>)
   15a50:	491f      	ldr	r1, [pc, #124]	; (15ad0 <bt_conn_process_tx+0xc0>)
   15a52:	4820      	ldr	r0, [pc, #128]	; (15ad4 <bt_conn_process_tx+0xc4>)
   15a54:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   15a58:	f00a f866 	bl	1fb28 <assert_print>
   15a5c:	4040      	eors	r0, r0
   15a5e:	f380 8811 	msr	BASEPRI, r0
   15a62:	f04f 0003 	mov.w	r0, #3
   15a66:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15a68:	4e1b      	ldr	r6, [pc, #108]	; (15ad8 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   15a6a:	89aa      	ldrh	r2, [r5, #12]
   15a6c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15a70:	429a      	cmp	r2, r3
   15a72:	d807      	bhi.n	15a84 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15a74:	2300      	movs	r3, #0
   15a76:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15a78:	4629      	mov	r1, r5
   15a7a:	4620      	mov	r0, r4
   15a7c:	f7ff fbf6 	bl	1526c <send_frag>
	if (!send_buf(conn, buf)) {
   15a80:	b130      	cbz	r0, 15a90 <bt_conn_process_tx+0x80>
}
   15a82:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   15a84:	4629      	mov	r1, r5
   15a86:	4620      	mov	r0, r4
   15a88:	f7ff ff8c 	bl	159a4 <create_frag>
	if (!frag) {
   15a8c:	4601      	mov	r1, r0
   15a8e:	b920      	cbnz	r0, 15a9a <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
   15a90:	4628      	mov	r0, r5
}
   15a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   15a96:	f001 bb91 	b.w	171bc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15a9a:	2301      	movs	r3, #1
   15a9c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15a9e:	4620      	mov	r0, r4
   15aa0:	f7ff fbe4 	bl	1526c <send_frag>
   15aa4:	2800      	cmp	r0, #0
   15aa6:	d0f3      	beq.n	15a90 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   15aa8:	89aa      	ldrh	r2, [r5, #12]
   15aaa:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15aae:	429a      	cmp	r2, r3
   15ab0:	d802      	bhi.n	15ab8 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
   15ab2:	2300      	movs	r3, #0
   15ab4:	2203      	movs	r2, #3
   15ab6:	e7df      	b.n	15a78 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   15ab8:	4629      	mov	r1, r5
   15aba:	4620      	mov	r0, r4
   15abc:	f7ff ff72 	bl	159a4 <create_frag>
		if (!frag) {
   15ac0:	4601      	mov	r1, r0
   15ac2:	2800      	cmp	r0, #0
   15ac4:	d0e4      	beq.n	15a90 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15ac6:	2301      	movs	r3, #1
   15ac8:	461a      	mov	r2, r3
   15aca:	e7e8      	b.n	15a9e <bt_conn_process_tx+0x8e>
   15acc:	000248fb 	.word	0x000248fb
   15ad0:	000248c7 	.word	0x000248c7
   15ad4:	00024853 	.word	0x00024853
   15ad8:	200002c8 	.word	0x200002c8

00015adc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15adc:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15ade:	490b      	ldr	r1, [pc, #44]	; (15b0c <bt_conn_init+0x30>)
   15ae0:	480b      	ldr	r0, [pc, #44]	; (15b10 <bt_conn_init+0x34>)
   15ae2:	f00c ffcb 	bl	22a7c <k_queue_append>
   15ae6:	490b      	ldr	r1, [pc, #44]	; (15b14 <bt_conn_init+0x38>)
   15ae8:	4809      	ldr	r0, [pc, #36]	; (15b10 <bt_conn_init+0x34>)
   15aea:	f00c ffc7 	bl	22a7c <k_queue_append>
   15aee:	490a      	ldr	r1, [pc, #40]	; (15b18 <bt_conn_init+0x3c>)
   15af0:	4807      	ldr	r0, [pc, #28]	; (15b10 <bt_conn_init+0x34>)
   15af2:	f00c ffc3 	bl	22a7c <k_queue_append>
	}

	bt_att_init();
   15af6:	f00b fda8 	bl	2164a <bt_att_init>

	err = bt_smp_init();
   15afa:	f00c f9ef 	bl	21edc <bt_smp_init>
	if (err) {
   15afe:	4604      	mov	r4, r0
   15b00:	b908      	cbnz	r0, 15b06 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   15b02:	f00b f931 	bl	20d68 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15b06:	4620      	mov	r0, r4
   15b08:	bd10      	pop	{r4, pc}
   15b0a:	bf00      	nop
   15b0c:	2000248c 	.word	0x2000248c
   15b10:	20000a6c 	.word	0x20000a6c
   15b14:	2000249c 	.word	0x2000249c
   15b18:	200024ac 	.word	0x200024ac

00015b1c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15b1c:	4b04      	ldr	r3, [pc, #16]	; (15b30 <l2cap_accept+0x14>)
   15b1e:	6818      	ldr	r0, [r3, #0]
   15b20:	b918      	cbnz	r0, 15b2a <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   15b22:	4a04      	ldr	r2, [pc, #16]	; (15b34 <l2cap_accept+0x18>)
   15b24:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   15b26:	600b      	str	r3, [r1, #0]

		return 0;
   15b28:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   15b2a:	f06f 000b 	mvn.w	r0, #11
}
   15b2e:	4770      	bx	lr
   15b30:	200024bc 	.word	0x200024bc
   15b34:	00023dc0 	.word	0x00023dc0

00015b38 <bt_l2cap_connected>:
{
   15b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15b3a:	4d24      	ldr	r5, [pc, #144]	; (15bcc <bt_l2cap_connected+0x94>)
   15b3c:	4f24      	ldr	r7, [pc, #144]	; (15bd0 <bt_l2cap_connected+0x98>)
{
   15b3e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15b40:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15b42:	42bd      	cmp	r5, r7
   15b44:	d301      	bcc.n	15b4a <bt_l2cap_connected+0x12>
}
   15b46:	b003      	add	sp, #12
   15b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15b4a:	686b      	ldr	r3, [r5, #4]
   15b4c:	a901      	add	r1, sp, #4
   15b4e:	4620      	mov	r0, r4
   15b50:	4798      	blx	r3
   15b52:	2800      	cmp	r0, #0
   15b54:	db34      	blt.n	15bc0 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15b56:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15b58:	882a      	ldrh	r2, [r5, #0]
   15b5a:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   15b5c:	849a      	strh	r2, [r3, #36]	; 0x24
   15b5e:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15b62:	68a8      	ldr	r0, [r5, #8]
   15b64:	f3bf 8f5b 	dmb	ish
   15b68:	e852 1f00 	ldrex	r1, [r2]
   15b6c:	e842 6c00 	strex	ip, r6, [r2]
   15b70:	f1bc 0f00 	cmp.w	ip, #0
   15b74:	d1f8      	bne.n	15b68 <bt_l2cap_connected+0x30>
   15b76:	f3bf 8f5b 	dmb	ish
	return list->tail;
   15b7a:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   15b7c:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   15b7e:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15b82:	b9f9      	cbnz	r1, 15bc4 <bt_l2cap_connected+0x8c>
	list->head = node;
   15b84:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   15b88:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15b8a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15b8c:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   15b8e:	6843      	ldr	r3, [r0, #4]
   15b90:	681b      	ldr	r3, [r3, #0]
   15b92:	b103      	cbz	r3, 15b96 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   15b94:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15b96:	9b01      	ldr	r3, [sp, #4]
   15b98:	f3bf 8f5b 	dmb	ish
   15b9c:	3310      	adds	r3, #16
   15b9e:	e853 2f00 	ldrex	r2, [r3]
   15ba2:	f042 0201 	orr.w	r2, r2, #1
   15ba6:	e843 2100 	strex	r1, r2, [r3]
   15baa:	2900      	cmp	r1, #0
   15bac:	d1f7      	bne.n	15b9e <bt_l2cap_connected+0x66>
   15bae:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   15bb2:	9801      	ldr	r0, [sp, #4]
   15bb4:	6843      	ldr	r3, [r0, #4]
   15bb6:	699b      	ldr	r3, [r3, #24]
   15bb8:	b113      	cbz	r3, 15bc0 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   15bba:	f100 0110 	add.w	r1, r0, #16
   15bbe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15bc0:	350c      	adds	r5, #12
   15bc2:	e7be      	b.n	15b42 <bt_l2cap_connected+0xa>
	parent->next = child;
   15bc4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15bc6:	6562      	str	r2, [r4, #84]	; 0x54
}
   15bc8:	e7de      	b.n	15b88 <bt_l2cap_connected+0x50>
   15bca:	bf00      	nop
   15bcc:	00023744 	.word	0x00023744
   15bd0:	00023768 	.word	0x00023768

00015bd4 <bt_l2cap_update_conn_param>:
{
   15bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15bd6:	460d      	mov	r5, r1
	ident++;
   15bd8:	4916      	ldr	r1, [pc, #88]	; (15c34 <bt_l2cap_update_conn_param+0x60>)
   15bda:	780b      	ldrb	r3, [r1, #0]
   15bdc:	3301      	adds	r3, #1
	if (!ident) {
   15bde:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   15be2:	bf08      	it	eq
   15be4:	2301      	moveq	r3, #1
   15be6:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15be8:	7809      	ldrb	r1, [r1, #0]
{
   15bea:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15bec:	2208      	movs	r2, #8
   15bee:	2012      	movs	r0, #18
   15bf0:	f00b f80b 	bl	20c0a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15bf4:	4604      	mov	r4, r0
   15bf6:	b1d0      	cbz	r0, 15c2e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   15bf8:	2108      	movs	r1, #8
   15bfa:	4408      	add	r0, r1
   15bfc:	f00c fa10 	bl	22020 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15c00:	882b      	ldrh	r3, [r5, #0]
   15c02:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15c04:	886b      	ldrh	r3, [r5, #2]
   15c06:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15c08:	88ab      	ldrh	r3, [r5, #4]
   15c0a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15c0c:	88eb      	ldrh	r3, [r5, #6]
   15c0e:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15c10:	2300      	movs	r3, #0
   15c12:	9300      	str	r3, [sp, #0]
   15c14:	4622      	mov	r2, r4
   15c16:	2105      	movs	r1, #5
   15c18:	4630      	mov	r0, r6
   15c1a:	f00b f836 	bl	20c8a <bt_l2cap_send_cb>
	if (err) {
   15c1e:	4605      	mov	r5, r0
   15c20:	b110      	cbz	r0, 15c28 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   15c22:	4620      	mov	r0, r4
   15c24:	f001 faca 	bl	171bc <net_buf_unref>
}
   15c28:	4628      	mov	r0, r5
   15c2a:	b002      	add	sp, #8
   15c2c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15c2e:	f06f 050b 	mvn.w	r5, #11
   15c32:	e7f9      	b.n	15c28 <bt_l2cap_update_conn_param+0x54>
   15c34:	20003331 	.word	0x20003331

00015c38 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   15c38:	4b02      	ldr	r3, [pc, #8]	; (15c44 <att_cfm_sent+0xc>)
   15c3a:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15c3e:	f00b b8a6 	b.w	20d8e <att_sent>
   15c42:	bf00      	nop
   15c44:	000212e9 	.word	0x000212e9

00015c48 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   15c48:	4b02      	ldr	r3, [pc, #8]	; (15c54 <att_rsp_sent+0xc>)
   15c4a:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15c4e:	f00b b89e 	b.w	20d8e <att_sent>
   15c52:	bf00      	nop
   15c54:	00021449 	.word	0x00021449

00015c58 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   15c58:	4b02      	ldr	r3, [pc, #8]	; (15c64 <att_req_sent+0xc>)
   15c5a:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15c5e:	f00b b896 	b.w	20d8e <att_sent>
   15c62:	bf00      	nop
   15c64:	00021023 	.word	0x00021023

00015c68 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15c68:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15c6a:	3804      	subs	r0, #4
   15c6c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15c6e:	a901      	add	r1, sp, #4
   15c70:	4802      	ldr	r0, [pc, #8]	; (15c7c <bt_att_released+0x14>)
   15c72:	f00c fe3d 	bl	228f0 <k_mem_slab_free>
}
   15c76:	b003      	add	sp, #12
   15c78:	f85d fb04 	ldr.w	pc, [sp], #4
   15c7c:	200009d0 	.word	0x200009d0

00015c80 <read_group_cb>:
{
   15c80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15c84:	4605      	mov	r5, r0
   15c86:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15c88:	f04f 0800 	mov.w	r8, #0
   15c8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15c90:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   15c92:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15c94:	f88d 8008 	strb.w	r8, [sp, #8]
   15c98:	a902      	add	r1, sp, #8
{
   15c9a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15c9c:	f8ad 300a 	strh.w	r3, [sp, #10]
   15ca0:	f00a f9c3 	bl	2002a <bt_uuid_cmp>
   15ca4:	b1a0      	cbz	r0, 15cd0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15ca6:	f642 0301 	movw	r3, #10241	; 0x2801
   15caa:	6828      	ldr	r0, [r5, #0]
   15cac:	f88d 800c 	strb.w	r8, [sp, #12]
   15cb0:	a903      	add	r1, sp, #12
   15cb2:	f8ad 300e 	strh.w	r3, [sp, #14]
   15cb6:	f00a f9b8 	bl	2002a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15cba:	b148      	cbz	r0, 15cd0 <read_group_cb+0x50>
		if (data->group &&
   15cbc:	6923      	ldr	r3, [r4, #16]
   15cbe:	b11b      	cbz	r3, 15cc8 <read_group_cb+0x48>
   15cc0:	885a      	ldrh	r2, [r3, #2]
   15cc2:	42b2      	cmp	r2, r6
   15cc4:	d200      	bcs.n	15cc8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15cc6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15cc8:	2001      	movs	r0, #1
}
   15cca:	b004      	add	sp, #16
   15ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15cd0:	6861      	ldr	r1, [r4, #4]
   15cd2:	6828      	ldr	r0, [r5, #0]
   15cd4:	f00a f9a9 	bl	2002a <bt_uuid_cmp>
   15cd8:	b110      	cbz	r0, 15ce0 <read_group_cb+0x60>
		data->group = NULL;
   15cda:	2300      	movs	r3, #0
   15cdc:	6123      	str	r3, [r4, #16]
   15cde:	e7f3      	b.n	15cc8 <read_group_cb+0x48>
	if (data->rsp->len &&
   15ce0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15ce2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   15ce4:	781a      	ldrb	r2, [r3, #0]
   15ce6:	b132      	cbz	r2, 15cf6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15ce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   15cea:	8981      	ldrh	r1, [r0, #12]
   15cec:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15cee:	4293      	cmp	r3, r2
   15cf0:	da01      	bge.n	15cf6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   15cf2:	2000      	movs	r0, #0
   15cf4:	e7e9      	b.n	15cca <read_group_cb+0x4a>
   15cf6:	2104      	movs	r1, #4
   15cf8:	3008      	adds	r0, #8
   15cfa:	f00c f991 	bl	22020 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15cfe:	4b09      	ldr	r3, [pc, #36]	; (15d24 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15d00:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15d02:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15d04:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15d06:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15d08:	4629      	mov	r1, r5
   15d0a:	9300      	str	r3, [sp, #0]
   15d0c:	9401      	str	r4, [sp, #4]
   15d0e:	2300      	movs	r3, #0
   15d10:	4638      	mov	r0, r7
   15d12:	f00b fa11 	bl	21138 <att_chan_read>
	if (read < 0) {
   15d16:	2800      	cmp	r0, #0
   15d18:	dbeb      	blt.n	15cf2 <read_group_cb+0x72>
	if (!data->group) {
   15d1a:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15d1c:	3800      	subs	r0, #0
   15d1e:	bf18      	it	ne
   15d20:	2001      	movne	r0, #1
   15d22:	e7d2      	b.n	15cca <read_group_cb+0x4a>
   15d24:	00020fe7 	.word	0x00020fe7

00015d28 <chan_send>:
{
   15d28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   15d2c:	688b      	ldr	r3, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15d2e:	f3bf 8f5b 	dmb	ish
{
   15d32:	4617      	mov	r7, r2
   15d34:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   15d38:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15d3c:	0752      	lsls	r2, r2, #29
{
   15d3e:	4606      	mov	r6, r0
   15d40:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15d42:	d546      	bpl.n	15dd2 <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15d44:	781b      	ldrb	r3, [r3, #0]
   15d46:	2bd2      	cmp	r3, #210	; 0xd2
   15d48:	d10c      	bne.n	15d64 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
   15d4a:	6803      	ldr	r3, [r0, #0]
   15d4c:	6818      	ldr	r0, [r3, #0]
   15d4e:	f00c f8c2 	bl	21ed6 <bt_smp_sign>
		if (err) {
   15d52:	4605      	mov	r5, r0
   15d54:	b130      	cbz	r0, 15d64 <chan_send+0x3c>
			net_buf_unref(buf);
   15d56:	4620      	mov	r0, r4
   15d58:	f001 fa30 	bl	171bc <net_buf_unref>
}
   15d5c:	4628      	mov	r0, r5
   15d5e:	b003      	add	sp, #12
   15d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15d64:	f104 0008 	add.w	r0, r4, #8
   15d68:	f00c f991 	bl	2208e <net_buf_simple_headroom>
	state->len = buf->len;
   15d6c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   15d70:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   15d72:	b957      	cbnz	r7, 15d8a <chan_send+0x62>
	switch (att_op_get_type(buf->data[0])) {
   15d74:	68a3      	ldr	r3, [r4, #8]
   15d76:	7818      	ldrb	r0, [r3, #0]
   15d78:	f00b f821 	bl	20dbe <att_op_get_type>
   15d7c:	3801      	subs	r0, #1
   15d7e:	b2c0      	uxtb	r0, r0
   15d80:	2804      	cmp	r0, #4
   15d82:	bf9c      	itt	ls
   15d84:	4b14      	ldrls	r3, [pc, #80]	; (15dd8 <chan_send+0xb0>)
   15d86:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15d8a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   15d8c:	f8c6 70e0 	str.w	r7, [r6, #224]	; 0xe0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15d90:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   15d92:	4b12      	ldr	r3, [pc, #72]	; (15ddc <chan_send+0xb4>)
   15d94:	429f      	cmp	r7, r3
   15d96:	d018      	beq.n	15dca <chan_send+0xa2>
	} else if (cb == chan_cfm_sent) {
   15d98:	4b11      	ldr	r3, [pc, #68]	; (15de0 <chan_send+0xb8>)
   15d9a:	429f      	cmp	r7, r3
   15d9c:	d017      	beq.n	15dce <chan_send+0xa6>
		return att_sent;
   15d9e:	4911      	ldr	r1, [pc, #68]	; (15de4 <chan_send+0xbc>)
   15da0:	4b11      	ldr	r3, [pc, #68]	; (15de8 <chan_send+0xc0>)
   15da2:	4a12      	ldr	r2, [pc, #72]	; (15dec <chan_send+0xc4>)
   15da4:	428f      	cmp	r7, r1
   15da6:	bf18      	it	ne
   15da8:	4613      	movne	r3, r2
			       &chan->chan.chan);
   15daa:	3604      	adds	r6, #4
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15dac:	9600      	str	r6, [sp, #0]
   15dae:	4622      	mov	r2, r4
   15db0:	2104      	movs	r1, #4
   15db2:	f00a ff6a 	bl	20c8a <bt_l2cap_send_cb>
	if (err) {
   15db6:	4605      	mov	r5, r0
   15db8:	2800      	cmp	r0, #0
   15dba:	d0cf      	beq.n	15d5c <chan_send+0x34>
	buf->data = buf->__buf + state->offset;
   15dbc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   15dbe:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   15dc2:	fa10 f088 	uxtah	r0, r0, r8
   15dc6:	60a0      	str	r0, [r4, #8]
}
   15dc8:	e7c8      	b.n	15d5c <chan_send+0x34>
		return att_rsp_sent;
   15dca:	4b09      	ldr	r3, [pc, #36]	; (15df0 <chan_send+0xc8>)
   15dcc:	e7ed      	b.n	15daa <chan_send+0x82>
		return att_cfm_sent;
   15dce:	4b09      	ldr	r3, [pc, #36]	; (15df4 <chan_send+0xcc>)
   15dd0:	e7eb      	b.n	15daa <chan_send+0x82>
		return -EINVAL;
   15dd2:	f06f 0515 	mvn.w	r5, #21
   15dd6:	e7c1      	b.n	15d5c <chan_send+0x34>
   15dd8:	00023de4 	.word	0x00023de4
   15ddc:	00021449 	.word	0x00021449
   15de0:	000212e9 	.word	0x000212e9
   15de4:	00021023 	.word	0x00021023
   15de8:	00015c59 	.word	0x00015c59
   15dec:	00020d8f 	.word	0x00020d8f
   15df0:	00015c49 	.word	0x00015c49
   15df4:	00015c39 	.word	0x00015c39

00015df8 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15df8:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   15dfa:	4a07      	ldr	r2, [pc, #28]	; (15e18 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   15dfc:	4604      	mov	r4, r0
   15dfe:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   15e00:	f7ff ff92 	bl	15d28 <chan_send>
	if (err) {
   15e04:	b130      	cbz	r0, 15e14 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   15e06:	4629      	mov	r1, r5
   15e08:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   15e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   15e10:	f00c b8d3 	b.w	21fba <net_buf_put>
}
   15e14:	bd38      	pop	{r3, r4, r5, pc}
   15e16:	bf00      	nop
   15e18:	00021449 	.word	0x00021449

00015e1c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   15e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15e1e:	2300      	movs	r3, #0
{
   15e20:	4607      	mov	r7, r0
   15e22:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   15e24:	4829      	ldr	r0, [pc, #164]	; (15ecc <bt_att_accept+0xb0>)
   15e26:	2200      	movs	r2, #0
   15e28:	4669      	mov	r1, sp
   15e2a:	f004 fd31 	bl	1a890 <k_mem_slab_alloc>
   15e2e:	4605      	mov	r5, r0
   15e30:	b110      	cbz	r0, 15e38 <bt_att_accept+0x1c>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   15e32:	f06f 050b 	mvn.w	r5, #11
   15e36:	e045      	b.n	15ec4 <bt_att_accept+0xa8>
	return z_impl_z_current_get();
   15e38:	f005 fc1c 	bl	1b674 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   15e3c:	4b24      	ldr	r3, [pc, #144]	; (15ed0 <bt_att_accept+0xb4>)
__ssp_bos_icheck3(memset, void *, int)
   15e3e:	4629      	mov	r1, r5
   15e40:	6018      	str	r0, [r3, #0]
   15e42:	222c      	movs	r2, #44	; 0x2c
   15e44:	9800      	ldr	r0, [sp, #0]
   15e46:	f00d faa3 	bl	23390 <memset>
	att->conn = conn;
   15e4a:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15e4c:	4821      	ldr	r0, [pc, #132]	; (15ed4 <bt_att_accept+0xb8>)
	list->tail = NULL;
   15e4e:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   15e50:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   15e54:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   15e58:	2200      	movs	r2, #0
   15e5a:	2300      	movs	r3, #0
   15e5c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   15e5e:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   15e60:	f004 fd16 	bl	1a890 <k_mem_slab_alloc>
   15e64:	4605      	mov	r5, r0
   15e66:	2800      	cmp	r0, #0
   15e68:	d1e3      	bne.n	15e32 <bt_att_accept+0x16>
   15e6a:	4601      	mov	r1, r0
   15e6c:	22e8      	movs	r2, #232	; 0xe8
   15e6e:	9801      	ldr	r0, [sp, #4]
   15e70:	f00d fa8e 	bl	23390 <memset>
	chan->chan.chan.ops = &ops;
   15e74:	9801      	ldr	r0, [sp, #4]
   15e76:	4b18      	ldr	r3, [pc, #96]	; (15ed8 <bt_att_accept+0xbc>)
   15e78:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   15e7a:	3098      	adds	r0, #152	; 0x98
   15e7c:	f00c fdf2 	bl	22a64 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15e80:	9b01      	ldr	r3, [sp, #4]
   15e82:	f3bf 8f5b 	dmb	ish
   15e86:	3390      	adds	r3, #144	; 0x90
   15e88:	e853 2f00 	ldrex	r2, [r3]
   15e8c:	e843 5100 	strex	r1, r5, [r3]
   15e90:	2900      	cmp	r1, #0
   15e92:	d1f9      	bne.n	15e88 <bt_att_accept+0x6c>
   15e94:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   15e98:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   15e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	chan->att = att;
   15e9c:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   15e9e:	b91b      	cbnz	r3, 15ea8 <bt_att_accept+0x8c>
   15ea0:	f104 000c 	add.w	r0, r4, #12
   15ea4:	f00c fdde 	bl	22a64 <z_impl_k_queue_init>
	parent->next = child;
   15ea8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15eaa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
Z_GENLIST_PREPEND(slist, snode)
   15eae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   15eb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
	list->head = node;
   15eb4:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   15eb6:	b902      	cbnz	r2, 15eba <bt_att_accept+0x9e>
	list->tail = node;
   15eb8:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   15eba:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	d0b8      	beq.n	15e32 <bt_att_accept+0x16>
	}

	*ch = &chan->chan.chan;
   15ec0:	3304      	adds	r3, #4
   15ec2:	6033      	str	r3, [r6, #0]

	return 0;
}
   15ec4:	4628      	mov	r0, r5
   15ec6:	b003      	add	sp, #12
   15ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15eca:	bf00      	nop
   15ecc:	200009b4 	.word	0x200009b4
   15ed0:	20002548 	.word	0x20002548
   15ed4:	200009d0 	.word	0x200009d0
   15ed8:	20000684 	.word	0x20000684

00015edc <read_type_cb>:
{
   15edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   15ee0:	f8d2 8000 	ldr.w	r8, [r2]
{
   15ee4:	4606      	mov	r6, r0
   15ee6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15ee8:	6800      	ldr	r0, [r0, #0]
   15eea:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   15eec:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   15ef0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15ef2:	f00a f89a 	bl	2002a <bt_uuid_cmp>
   15ef6:	4607      	mov	r7, r0
   15ef8:	2800      	cmp	r0, #0
   15efa:	d13e      	bne.n	15f7a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   15efc:	4628      	mov	r0, r5
   15efe:	2215      	movs	r2, #21
   15f00:	4631      	mov	r1, r6
   15f02:	f00b ff1f 	bl	21d44 <bt_gatt_check_perm>
   15f06:	4605      	mov	r5, r0
   15f08:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   15f0a:	b148      	cbz	r0, 15f20 <read_type_cb+0x44>
		if (data->rsp->len) {
   15f0c:	68e3      	ldr	r3, [r4, #12]
   15f0e:	781b      	ldrb	r3, [r3, #0]
   15f10:	b923      	cbnz	r3, 15f1c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   15f12:	2500      	movs	r5, #0
}
   15f14:	4628      	mov	r0, r5
   15f16:	b003      	add	sp, #12
   15f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   15f1c:	7527      	strb	r7, [r4, #20]
   15f1e:	e7f8      	b.n	15f12 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15f20:	68a0      	ldr	r0, [r4, #8]
   15f22:	f00c f85b 	bl	21fdc <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   15f26:	2102      	movs	r1, #2
   15f28:	3008      	adds	r0, #8
   15f2a:	f00c f879 	bl	22020 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15f2e:	4b14      	ldr	r3, [pc, #80]	; (15f80 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   15f30:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15f32:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   15f34:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   15f38:	4631      	mov	r1, r6
   15f3a:	9300      	str	r3, [sp, #0]
   15f3c:	9401      	str	r4, [sp, #4]
   15f3e:	462b      	mov	r3, r5
   15f40:	4640      	mov	r0, r8
   15f42:	f00b f8f9 	bl	21138 <att_chan_read>
	if (read < 0) {
   15f46:	2800      	cmp	r0, #0
   15f48:	da07      	bge.n	15f5a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   15f4a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   15f4e:	bf26      	itte	cs
   15f50:	4240      	negcs	r0, r0
   15f52:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   15f54:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   15f56:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   15f58:	e7dc      	b.n	15f14 <read_type_cb+0x38>
	if (!data->item) {
   15f5a:	6923      	ldr	r3, [r4, #16]
   15f5c:	2b00      	cmp	r3, #0
   15f5e:	d0d8      	beq.n	15f12 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15f60:	68a0      	ldr	r0, [r4, #8]
   15f62:	f00a ff0c 	bl	20d7e <net_buf_frags_len>
   15f66:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15f6a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   15f6c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   15f6e:	7818      	ldrb	r0, [r3, #0]
   15f70:	4285      	cmp	r5, r0
   15f72:	bf94      	ite	ls
   15f74:	2500      	movls	r5, #0
   15f76:	2501      	movhi	r5, #1
   15f78:	e7cc      	b.n	15f14 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   15f7a:	2501      	movs	r5, #1
   15f7c:	e7ca      	b.n	15f14 <read_type_cb+0x38>
   15f7e:	bf00      	nop
   15f80:	00020d9b 	.word	0x00020d9b

00015f84 <bt_att_connected>:
{
   15f84:	b510      	push	{r4, lr}
   15f86:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   15f88:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15f8c:	3804      	subs	r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15f8e:	f3bf 8f5b 	dmb	ish
   15f92:	e853 2f00 	ldrex	r2, [r3]
   15f96:	f042 0204 	orr.w	r2, r2, #4
   15f9a:	e843 2100 	strex	r1, r2, [r3]
   15f9e:	2900      	cmp	r1, #0
   15fa0:	d1f7      	bne.n	15f92 <bt_att_connected+0xe>
   15fa2:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15fa6:	f3bf 8f5b 	dmb	ish
   15faa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   15fae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   15fb2:	071b      	lsls	r3, r3, #28
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fb4:	bf5e      	ittt	pl
   15fb6:	2317      	movpl	r3, #23
   15fb8:	84e3      	strhpl	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fba:	82e3      	strhpl	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15fbc:	f00a ffe3 	bl	20f86 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15fc0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   15fc4:	4903      	ldr	r1, [pc, #12]	; (15fd4 <bt_att_connected+0x50>)
   15fc6:	f00c fe65 	bl	22c94 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   15fca:	6820      	ldr	r0, [r4, #0]
}
   15fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15fd0:	f000 bfda 	b.w	16f88 <bt_gatt_connected>
   15fd4:	00021659 	.word	0x00021659

00015fd8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   15fd8:	898b      	ldrh	r3, [r1, #12]
{
   15fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15fde:	4606      	mov	r6, r0
   15fe0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   15fe2:	2b00      	cmp	r3, #0
   15fe4:	d047      	beq.n	16076 <bt_att_recv+0x9e>
	return net_buf_simple_pull_mem(&buf->b, len);
   15fe6:	2101      	movs	r1, #1
   15fe8:	f104 0008 	add.w	r0, r4, #8
   15fec:	f00c f83f 	bl	2206e <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   15ff0:	f856 3c04 	ldr.w	r3, [r6, #-4]
   15ff4:	4607      	mov	r7, r0
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	d03d      	beq.n	16076 <bt_att_recv+0x9e>
		if (hdr->code == handlers[i].op) {
   15ffa:	7801      	ldrb	r1, [r0, #0]
   15ffc:	4d22      	ldr	r5, [pc, #136]	; (16088 <bt_att_recv+0xb0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   15ffe:	f1a6 0804 	sub.w	r8, r6, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16002:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16004:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   16008:	428a      	cmp	r2, r1
   1600a:	d10d      	bne.n	16028 <bt_att_recv+0x50>
		if (handler->type == ATT_REQUEST &&
   1600c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   16010:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   16014:	f893 a002 	ldrb.w	sl, [r3, #2]
   16018:	f1ba 0f01 	cmp.w	sl, #1
   1601c:	d014      	beq.n	16048 <bt_att_recv+0x70>
		} else if (handler->type == ATT_INDICATION &&
   1601e:	f1ba 0f05 	cmp.w	sl, #5
   16022:	d117      	bne.n	16054 <bt_att_recv+0x7c>
			   atomic_test_and_set_bit(att_chan->flags,
   16024:	2101      	movs	r1, #1
   16026:	e010      	b.n	1604a <bt_att_recv+0x72>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16028:	3301      	adds	r3, #1
   1602a:	2b0d      	cmp	r3, #13
   1602c:	d1ea      	bne.n	16004 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1602e:	4608      	mov	r0, r1
   16030:	f00a fec5 	bl	20dbe <att_op_get_type>
   16034:	b1f8      	cbz	r0, 16076 <bt_att_recv+0x9e>
   16036:	2805      	cmp	r0, #5
   16038:	d01d      	beq.n	16076 <bt_att_recv+0x9e>
	if (!req) {
   1603a:	b1e1      	cbz	r1, 16076 <bt_att_recv+0x9e>
   1603c:	2306      	movs	r3, #6
   1603e:	2200      	movs	r2, #0
   16040:	4640      	mov	r0, r8
   16042:	f00b fa56 	bl	214f2 <send_err_rsp.part.0>
   16046:	e016      	b.n	16076 <bt_att_recv+0x9e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16048:	2100      	movs	r1, #0
   1604a:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1604e:	f00b f95b 	bl	21308 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   16052:	b980      	cbnz	r0, 16076 <bt_att_recv+0x9e>
	if (buf->len < handler->expect_len) {
   16054:	444d      	add	r5, r9
   16056:	89a2      	ldrh	r2, [r4, #12]
   16058:	786b      	ldrb	r3, [r5, #1]
   1605a:	429a      	cmp	r2, r3
   1605c:	d30e      	bcc.n	1607c <bt_att_recv+0xa4>
		err = handler->func(att_chan, buf);
   1605e:	686b      	ldr	r3, [r5, #4]
   16060:	4621      	mov	r1, r4
   16062:	4640      	mov	r0, r8
   16064:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16066:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   1606a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1606c:	d103      	bne.n	16076 <bt_att_recv+0x9e>
   1606e:	b110      	cbz	r0, 16076 <bt_att_recv+0x9e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16070:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   16072:	2900      	cmp	r1, #0
   16074:	d1e3      	bne.n	1603e <bt_att_recv+0x66>
}
   16076:	2000      	movs	r0, #0
   16078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (handler->type == ATT_REQUEST && err) {
   1607c:	f1ba 0f01 	cmp.w	sl, #1
   16080:	d1f9      	bne.n	16076 <bt_att_recv+0x9e>
		err = BT_ATT_ERR_INVALID_PDU;
   16082:	2304      	movs	r3, #4
   16084:	e7f4      	b.n	16070 <bt_att_recv+0x98>
   16086:	bf00      	nop
   16088:	00023df8 	.word	0x00023df8

0001608c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1608c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16090:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16092:	6803      	ldr	r3, [r0, #0]
   16094:	460e      	mov	r6, r1
   16096:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16098:	b087      	sub	sp, #28
   1609a:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1609c:	bf18      	it	ne
   1609e:	2101      	movne	r1, #1
   160a0:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   160a2:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   160a4:	f00b fea4 	bl	21df0 <bt_gatt_change_aware>
   160a8:	b958      	cbnz	r0, 160c2 <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   160aa:	2105      	movs	r1, #5
   160ac:	f104 0090 	add.w	r0, r4, #144	; 0x90
   160b0:	f00b f92a 	bl	21308 <atomic_test_and_set_bit>
   160b4:	2800      	cmp	r0, #0
   160b6:	d04a      	beq.n	1614e <att_write_rsp.constprop.0+0xc2>
			return 0;
   160b8:	2500      	movs	r5, #0
}
   160ba:	4628      	mov	r0, r5
   160bc:	b007      	add	sp, #28
   160be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   160c2:	2f00      	cmp	r7, #0
   160c4:	d045      	beq.n	16152 <att_write_rsp.constprop.0+0xc6>
	(void)memset(&data, 0, sizeof(data));
   160c6:	2218      	movs	r2, #24
   160c8:	2100      	movs	r1, #0
   160ca:	4668      	mov	r0, sp
   160cc:	f00d f960 	bl	23390 <memset>
	if (rsp) {
   160d0:	f1b8 0f00 	cmp.w	r8, #0
   160d4:	d12a      	bne.n	1612c <att_write_rsp.constprop.0+0xa0>
	data.conn = chan->att->conn;
   160d6:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   160d8:	4a1f      	ldr	r2, [pc, #124]	; (16158 <att_write_rsp.constprop.0+0xcc>)
	data.conn = chan->att->conn;
   160da:	681b      	ldr	r3, [r3, #0]
   160dc:	9300      	str	r3, [sp, #0]
	data.value = value;
   160de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   160e0:	9303      	str	r3, [sp, #12]
	data.len = len;
   160e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   160e6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   160ea:	2301      	movs	r3, #1
   160ec:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   160f0:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   160f4:	466b      	mov	r3, sp
   160f6:	4639      	mov	r1, r7
   160f8:	4638      	mov	r0, r7
	data.req = req;
   160fa:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   160fe:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16102:	f00a fea1 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
   16106:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1610a:	b1cd      	cbz	r5, 16140 <att_write_rsp.constprop.0+0xb4>
		if (rsp) {
   1610c:	f1b8 0f00 	cmp.w	r8, #0
   16110:	d0d2      	beq.n	160b8 <att_write_rsp.constprop.0+0x2c>
			net_buf_unref(data.buf);
   16112:	9801      	ldr	r0, [sp, #4]
   16114:	f001 f852 	bl	171bc <net_buf_unref>
	if (!req) {
   16118:	2e00      	cmp	r6, #0
   1611a:	d0cd      	beq.n	160b8 <att_write_rsp.constprop.0+0x2c>
   1611c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16120:	463a      	mov	r2, r7
   16122:	4631      	mov	r1, r6
   16124:	4620      	mov	r0, r4
   16126:	f00b f9e4 	bl	214f2 <send_err_rsp.part.0>
   1612a:	e7c5      	b.n	160b8 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1612c:	2200      	movs	r2, #0
   1612e:	4641      	mov	r1, r8
   16130:	4620      	mov	r0, r4
   16132:	f00b f9ba 	bl	214aa <bt_att_chan_create_pdu>
   16136:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   16138:	2800      	cmp	r0, #0
   1613a:	d1cc      	bne.n	160d6 <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   1613c:	250e      	movs	r5, #14
   1613e:	e7bc      	b.n	160ba <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   16140:	9901      	ldr	r1, [sp, #4]
   16142:	2900      	cmp	r1, #0
   16144:	d0b8      	beq.n	160b8 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16146:	4620      	mov	r0, r4
   16148:	f7ff fe56 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
   1614c:	e7b5      	b.n	160ba <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1614e:	2512      	movs	r5, #18
   16150:	e7b3      	b.n	160ba <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   16152:	2501      	movs	r5, #1
   16154:	e7b1      	b.n	160ba <att_write_rsp.constprop.0+0x2e>
   16156:	bf00      	nop
   16158:	00021037 	.word	0x00021037

0001615c <att_read_group_req>:
{
   1615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16160:	898c      	ldrh	r4, [r1, #12]
   16162:	3c04      	subs	r4, #4
   16164:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   16166:	2c02      	cmp	r4, #2
{
   16168:	4605      	mov	r5, r0
   1616a:	b08c      	sub	sp, #48	; 0x30
   1616c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1616e:	d001      	beq.n	16174 <att_read_group_req+0x18>
   16170:	2c10      	cmp	r4, #16
   16172:	d16e      	bne.n	16252 <att_read_group_req+0xf6>
   16174:	2104      	movs	r1, #4
   16176:	3008      	adds	r0, #8
   16178:	f00b ff79 	bl	2206e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1617c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16180:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16182:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16184:	1d01      	adds	r1, r0, #4
   16186:	4622      	mov	r2, r4
   16188:	4640      	mov	r0, r8
   1618a:	f009 ff7c 	bl	20086 <bt_uuid_create>
   1618e:	2800      	cmp	r0, #0
   16190:	d061      	beq.n	16256 <att_read_group_req+0xfa>
	if (!start || !end) {
   16192:	2e00      	cmp	r6, #0
   16194:	d03a      	beq.n	1620c <att_read_group_req+0xb0>
   16196:	2400      	movs	r4, #0
   16198:	2f00      	cmp	r7, #0
   1619a:	d036      	beq.n	1620a <att_read_group_req+0xae>
	if (start > end) {
   1619c:	42be      	cmp	r6, r7
   1619e:	d835      	bhi.n	1620c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   161a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   161a4:	a901      	add	r1, sp, #4
   161a6:	4640      	mov	r0, r8
   161a8:	f88d 4004 	strb.w	r4, [sp, #4]
   161ac:	f8ad 3006 	strh.w	r3, [sp, #6]
   161b0:	f009 ff3b 	bl	2002a <bt_uuid_cmp>
   161b4:	2800      	cmp	r0, #0
   161b6:	d134      	bne.n	16222 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   161b8:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   161ba:	2214      	movs	r2, #20
   161bc:	2100      	movs	r1, #0
   161be:	a807      	add	r0, sp, #28
   161c0:	f00d f8e6 	bl	23390 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   161c4:	2201      	movs	r2, #1
   161c6:	2111      	movs	r1, #17
   161c8:	4620      	mov	r0, r4
   161ca:	f00b f9d5 	bl	21578 <bt_att_create_pdu>
   161ce:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   161d0:	2800      	cmp	r0, #0
   161d2:	d040      	beq.n	16256 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   161d4:	2101      	movs	r1, #1
   161d6:	3008      	adds	r0, #8
	data.uuid = uuid;
   161d8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   161dc:	f00b ff20 	bl	22020 <net_buf_simple_add>
	data.rsp->len = 0U;
   161e0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   161e4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   161e6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   161e8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   161ec:	4a1b      	ldr	r2, [pc, #108]	; (1625c <att_read_group_req+0x100>)
	data.group = NULL;
   161ee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   161f2:	4639      	mov	r1, r7
   161f4:	4630      	mov	r0, r6
   161f6:	f00a fe27 	bl	20e48 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   161fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   161fc:	781c      	ldrb	r4, [r3, #0]
   161fe:	bb1c      	cbnz	r4, 16248 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   16200:	9809      	ldr	r0, [sp, #36]	; 0x24
   16202:	f000 ffdb 	bl	171bc <net_buf_unref>
	if (!req) {
   16206:	230a      	movs	r3, #10
   16208:	e018      	b.n	1623c <att_read_group_req+0xe0>
			*err = 0U;
   1620a:	463e      	mov	r6, r7
	if (!req) {
   1620c:	2301      	movs	r3, #1
   1620e:	4632      	mov	r2, r6
   16210:	2110      	movs	r1, #16
   16212:	4628      	mov	r0, r5
   16214:	f00b f96d 	bl	214f2 <send_err_rsp.part.0>
		return 0;
   16218:	2400      	movs	r4, #0
}
   1621a:	4620      	mov	r0, r4
   1621c:	b00c      	add	sp, #48	; 0x30
   1621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16222:	f642 0301 	movw	r3, #10241	; 0x2801
   16226:	a907      	add	r1, sp, #28
   16228:	4640      	mov	r0, r8
   1622a:	f88d 401c 	strb.w	r4, [sp, #28]
   1622e:	f8ad 301e 	strh.w	r3, [sp, #30]
   16232:	f009 fefa 	bl	2002a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16236:	2800      	cmp	r0, #0
   16238:	d0be      	beq.n	161b8 <att_read_group_req+0x5c>
	if (!req) {
   1623a:	2310      	movs	r3, #16
   1623c:	4632      	mov	r2, r6
   1623e:	2110      	movs	r1, #16
   16240:	4628      	mov	r0, r5
   16242:	f00b f956 	bl	214f2 <send_err_rsp.part.0>
		return 0;
   16246:	e7e8      	b.n	1621a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16248:	9909      	ldr	r1, [sp, #36]	; 0x24
   1624a:	4628      	mov	r0, r5
   1624c:	f7ff fdd4 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16250:	e7e2      	b.n	16218 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   16252:	2404      	movs	r4, #4
   16254:	e7e1      	b.n	1621a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   16256:	240e      	movs	r4, #14
   16258:	e7df      	b.n	1621a <att_read_group_req+0xbe>
   1625a:	bf00      	nop
   1625c:	00015c81 	.word	0x00015c81

00016260 <att_read_mult_req>:
{
   16260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16264:	6846      	ldr	r6, [r0, #4]
{
   16266:	b085      	sub	sp, #20
   16268:	4604      	mov	r4, r0
   1626a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1626c:	4630      	mov	r0, r6
   1626e:	2101      	movs	r1, #1
   16270:	f00b fdbe 	bl	21df0 <bt_gatt_change_aware>
   16274:	b958      	cbnz	r0, 1628e <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16276:	2105      	movs	r1, #5
   16278:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1627c:	f00b f844 	bl	21308 <atomic_test_and_set_bit>
			return 0;
   16280:	2800      	cmp	r0, #0
   16282:	bf0c      	ite	eq
   16284:	2012      	moveq	r0, #18
   16286:	2000      	movne	r0, #0
}
   16288:	b005      	add	sp, #20
   1628a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1628e:	2210      	movs	r2, #16
   16290:	2100      	movs	r1, #0
   16292:	4668      	mov	r0, sp
   16294:	f00d f87c 	bl	23390 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16298:	2200      	movs	r2, #0
   1629a:	210f      	movs	r1, #15
   1629c:	4630      	mov	r0, r6
   1629e:	f00b f96b 	bl	21578 <bt_att_create_pdu>
   162a2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   162a4:	b348      	cbz	r0, 162fa <att_read_mult_req+0x9a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   162a6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16300 <att_read_mult_req+0xa0>
	data.chan = chan;
   162aa:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   162ac:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   162b0:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   162b4:	89ab      	ldrh	r3, [r5, #12]
   162b6:	2b01      	cmp	r3, #1
   162b8:	d804      	bhi.n	162c4 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   162ba:	9902      	ldr	r1, [sp, #8]
   162bc:	4620      	mov	r0, r4
   162be:	f7ff fd9b 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
   162c2:	e018      	b.n	162f6 <att_read_mult_req+0x96>
   162c4:	4638      	mov	r0, r7
   162c6:	f00b feda 	bl	2207e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   162ca:	466b      	mov	r3, sp
   162cc:	464a      	mov	r2, r9
   162ce:	4601      	mov	r1, r0
   162d0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   162d2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   162d6:	f00a fdb7 	bl	20e48 <bt_gatt_foreach_attr>
		if (data.err) {
   162da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   162de:	2b00      	cmp	r3, #0
   162e0:	d0e8      	beq.n	162b4 <att_read_mult_req+0x54>
			net_buf_unref(data.buf);
   162e2:	9802      	ldr	r0, [sp, #8]
   162e4:	f000 ff6a 	bl	171bc <net_buf_unref>
	if (!req) {
   162e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   162ec:	4632      	mov	r2, r6
   162ee:	210e      	movs	r1, #14
   162f0:	4620      	mov	r0, r4
   162f2:	f00b f8fe 	bl	214f2 <send_err_rsp.part.0>
	return 0;
   162f6:	2000      	movs	r0, #0
   162f8:	e7c6      	b.n	16288 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   162fa:	200e      	movs	r0, #14
   162fc:	e7c4      	b.n	16288 <att_read_mult_req+0x28>
   162fe:	bf00      	nop
   16300:	00021333 	.word	0x00021333

00016304 <att_read_rsp>:
{
   16304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16308:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1630c:	4604      	mov	r4, r0
   1630e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16310:	4640      	mov	r0, r8
   16312:	2101      	movs	r1, #1
{
   16314:	4615      	mov	r5, r2
   16316:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16318:	f00b fd6a 	bl	21df0 <bt_gatt_change_aware>
   1631c:	b960      	cbnz	r0, 16338 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1631e:	2105      	movs	r1, #5
   16320:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16324:	f00a fff0 	bl	21308 <atomic_test_and_set_bit>
			return 0;
   16328:	2800      	cmp	r0, #0
   1632a:	bf0c      	ite	eq
   1632c:	2512      	moveq	r5, #18
   1632e:	2500      	movne	r5, #0
}
   16330:	4628      	mov	r0, r5
   16332:	b004      	add	sp, #16
   16334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   16338:	b36e      	cbz	r6, 16396 <att_read_rsp+0x92>
	(void)memset(&data, 0, sizeof(data));
   1633a:	2210      	movs	r2, #16
   1633c:	2100      	movs	r1, #0
   1633e:	4668      	mov	r0, sp
   16340:	f00d f826 	bl	23390 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16344:	2200      	movs	r2, #0
   16346:	4629      	mov	r1, r5
   16348:	4640      	mov	r0, r8
   1634a:	f00b f915 	bl	21578 <bt_att_create_pdu>
   1634e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16350:	b318      	cbz	r0, 1639a <att_read_rsp+0x96>
	data.offset = offset;
   16352:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16356:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1635a:	2301      	movs	r3, #1
   1635c:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16360:	4a0f      	ldr	r2, [pc, #60]	; (163a0 <att_read_rsp+0x9c>)
	data.chan = chan;
   16362:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16364:	466b      	mov	r3, sp
   16366:	4631      	mov	r1, r6
   16368:	4630      	mov	r0, r6
   1636a:	f00a fd6d 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
   1636e:	f89d 500c 	ldrb.w	r5, [sp, #12]
   16372:	b15d      	cbz	r5, 1638c <att_read_rsp+0x88>
		net_buf_unref(data.buf);
   16374:	9802      	ldr	r0, [sp, #8]
   16376:	f000 ff21 	bl	171bc <net_buf_unref>
	if (!req) {
   1637a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1637e:	4632      	mov	r2, r6
   16380:	4639      	mov	r1, r7
   16382:	4620      	mov	r0, r4
   16384:	f00b f8b5 	bl	214f2 <send_err_rsp.part.0>
		return 0;
   16388:	2500      	movs	r5, #0
   1638a:	e7d1      	b.n	16330 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1638c:	9902      	ldr	r1, [sp, #8]
   1638e:	4620      	mov	r0, r4
   16390:	f7ff fd32 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16394:	e7cc      	b.n	16330 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16396:	2501      	movs	r5, #1
   16398:	e7ca      	b.n	16330 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   1639a:	250e      	movs	r5, #14
   1639c:	e7c8      	b.n	16330 <att_read_rsp+0x2c>
   1639e:	bf00      	nop
   163a0:	00021333 	.word	0x00021333

000163a4 <att_read_type_req>:
{
   163a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   163a8:	898c      	ldrh	r4, [r1, #12]
   163aa:	3c04      	subs	r4, #4
   163ac:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   163ae:	2c02      	cmp	r4, #2
{
   163b0:	4605      	mov	r5, r0
   163b2:	b08c      	sub	sp, #48	; 0x30
   163b4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   163b6:	d001      	beq.n	163bc <att_read_type_req+0x18>
   163b8:	2c10      	cmp	r4, #16
   163ba:	d14f      	bne.n	1645c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   163bc:	2104      	movs	r1, #4
   163be:	3008      	adds	r0, #8
   163c0:	f00b fe55 	bl	2206e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   163c4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   163c8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   163ca:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   163cc:	1d01      	adds	r1, r0, #4
   163ce:	4622      	mov	r2, r4
   163d0:	4640      	mov	r0, r8
   163d2:	f009 fe58 	bl	20086 <bt_uuid_create>
   163d6:	b188      	cbz	r0, 163fc <att_read_type_req+0x58>
	if (!start || !end) {
   163d8:	b19e      	cbz	r6, 16402 <att_read_type_req+0x5e>
   163da:	b18f      	cbz	r7, 16400 <att_read_type_req+0x5c>
	if (start > end) {
   163dc:	42b7      	cmp	r7, r6
   163de:	d310      	bcc.n	16402 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   163e0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   163e2:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   163e4:	2100      	movs	r1, #0
   163e6:	eb0d 0002 	add.w	r0, sp, r2
   163ea:	f00c ffd1 	bl	23390 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   163ee:	2201      	movs	r2, #1
   163f0:	2109      	movs	r1, #9
   163f2:	4620      	mov	r0, r4
   163f4:	f00b f8c0 	bl	21578 <bt_att_create_pdu>
   163f8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   163fa:	b968      	cbnz	r0, 16418 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   163fc:	240e      	movs	r4, #14
   163fe:	e007      	b.n	16410 <att_read_type_req+0x6c>
			*err = 0U;
   16400:	463e      	mov	r6, r7
	if (!req) {
   16402:	2301      	movs	r3, #1
   16404:	4632      	mov	r2, r6
   16406:	2108      	movs	r1, #8
   16408:	4628      	mov	r0, r5
   1640a:	f00b f872 	bl	214f2 <send_err_rsp.part.0>
		return 0;
   1640e:	2400      	movs	r4, #0
}
   16410:	4620      	mov	r0, r4
   16412:	b00c      	add	sp, #48	; 0x30
   16414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16418:	2101      	movs	r1, #1
   1641a:	3008      	adds	r0, #8
	data.uuid = uuid;
   1641c:	e9cd 5806 	strd	r5, r8, [sp, #24]
   16420:	f00b fdfe 	bl	22020 <net_buf_simple_add>
	data.rsp->len = 0U;
   16424:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16428:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1642a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1642c:	4a0c      	ldr	r2, [pc, #48]	; (16460 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   1642e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16432:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16434:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16438:	4630      	mov	r0, r6
   1643a:	ab06      	add	r3, sp, #24
   1643c:	f00a fd04 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
   16440:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   16444:	b12c      	cbz	r4, 16452 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   16446:	9808      	ldr	r0, [sp, #32]
   16448:	f000 feb8 	bl	171bc <net_buf_unref>
	if (!req) {
   1644c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16450:	e7d8      	b.n	16404 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16452:	9908      	ldr	r1, [sp, #32]
   16454:	4628      	mov	r0, r5
   16456:	f7ff fccf 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1645a:	e7d9      	b.n	16410 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1645c:	2404      	movs	r4, #4
   1645e:	e7d7      	b.n	16410 <att_read_type_req+0x6c>
   16460:	00015edd 	.word	0x00015edd

00016464 <att_find_type_req>:
{
   16464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16468:	4688      	mov	r8, r1
   1646a:	b086      	sub	sp, #24
   1646c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1646e:	2106      	movs	r1, #6
   16470:	f108 0008 	add.w	r0, r8, #8
   16474:	f00b fdfb 	bl	2206e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16478:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1647a:	b317      	cbz	r7, 164c2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1647c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   16480:	f1b9 0f00 	cmp.w	r9, #0
   16484:	d01c      	beq.n	164c0 <att_find_type_req+0x5c>
	if (start > end) {
   16486:	454f      	cmp	r7, r9
   16488:	d81b      	bhi.n	164c2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1648a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1648c:	f8ad 3002 	strh.w	r3, [sp, #2]
   16490:	2400      	movs	r4, #0
   16492:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16496:	a901      	add	r1, sp, #4
   16498:	4668      	mov	r0, sp
	value = buf->data;
   1649a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1649e:	f88d 4000 	strb.w	r4, [sp]
   164a2:	f88d 4004 	strb.w	r4, [sp, #4]
   164a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   164aa:	f009 fdbe 	bl	2002a <bt_uuid_cmp>
   164ae:	4606      	mov	r6, r0
   164b0:	b190      	cbz	r0, 164d8 <att_find_type_req+0x74>
	if (!req) {
   164b2:	230a      	movs	r3, #10
   164b4:	463a      	mov	r2, r7
   164b6:	2106      	movs	r1, #6
   164b8:	4628      	mov	r0, r5
   164ba:	f00b f81a 	bl	214f2 <send_err_rsp.part.0>
		return 0;
   164be:	e007      	b.n	164d0 <att_find_type_req+0x6c>
			*err = 0U;
   164c0:	464f      	mov	r7, r9
	if (!req) {
   164c2:	2301      	movs	r3, #1
   164c4:	463a      	mov	r2, r7
   164c6:	2106      	movs	r1, #6
   164c8:	4628      	mov	r0, r5
   164ca:	f00b f812 	bl	214f2 <send_err_rsp.part.0>
		return 0;
   164ce:	2400      	movs	r4, #0
}
   164d0:	4620      	mov	r0, r4
   164d2:	b006      	add	sp, #24
   164d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   164d8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   164dc:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   164e0:	4601      	mov	r1, r0
   164e2:	2214      	movs	r2, #20
   164e4:	a801      	add	r0, sp, #4
   164e6:	f00c ff53 	bl	23390 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   164ea:	4632      	mov	r2, r6
   164ec:	2107      	movs	r1, #7
   164ee:	4640      	mov	r0, r8
   164f0:	f00b f842 	bl	21578 <bt_att_create_pdu>
   164f4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   164f6:	b1d8      	cbz	r0, 16530 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   164f8:	230a      	movs	r3, #10
   164fa:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   164fe:	4a0d      	ldr	r2, [pc, #52]	; (16534 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   16500:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16504:	ab01      	add	r3, sp, #4
   16506:	4649      	mov	r1, r9
   16508:	4638      	mov	r0, r7
	data.value = value;
   1650a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1650e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16510:	f00a fc9a 	bl	20e48 <bt_gatt_foreach_attr>
	if (data.err) {
   16514:	f89d 4015 	ldrb.w	r4, [sp, #21]
   16518:	b12c      	cbz	r4, 16526 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1651a:	9802      	ldr	r0, [sp, #8]
   1651c:	f000 fe4e 	bl	171bc <net_buf_unref>
	if (!req) {
   16520:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16524:	e7ce      	b.n	164c4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16526:	9902      	ldr	r1, [sp, #8]
   16528:	4628      	mov	r0, r5
   1652a:	f7ff fc65 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1652e:	e7cf      	b.n	164d0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   16530:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16532:	e7cd      	b.n	164d0 <att_find_type_req+0x6c>
   16534:	00020e5f 	.word	0x00020e5f

00016538 <att_find_info_req>:
{
   16538:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1653a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1653c:	881e      	ldrh	r6, [r3, #0]
{
   1653e:	b085      	sub	sp, #20
   16540:	4605      	mov	r5, r0
	if (!start || !end) {
   16542:	b19e      	cbz	r6, 1656c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16544:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   16546:	b184      	cbz	r4, 1656a <att_find_info_req+0x32>
	if (start > end) {
   16548:	42b4      	cmp	r4, r6
   1654a:	d30f      	bcc.n	1656c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1654c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1654e:	2210      	movs	r2, #16
   16550:	2100      	movs	r1, #0
   16552:	4668      	mov	r0, sp
   16554:	f00c ff1c 	bl	23390 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16558:	2200      	movs	r2, #0
   1655a:	2105      	movs	r1, #5
   1655c:	4638      	mov	r0, r7
   1655e:	f00b f80b 	bl	21578 <bt_att_create_pdu>
   16562:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16564:	b958      	cbnz	r0, 1657e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16566:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16568:	e007      	b.n	1657a <att_find_info_req+0x42>
			*err = 0U;
   1656a:	4626      	mov	r6, r4
	if (!req) {
   1656c:	2301      	movs	r3, #1
   1656e:	4632      	mov	r2, r6
   16570:	2104      	movs	r1, #4
   16572:	4628      	mov	r0, r5
   16574:	f00a ffbd 	bl	214f2 <send_err_rsp.part.0>
	return 0;
   16578:	2000      	movs	r0, #0
}
   1657a:	b005      	add	sp, #20
   1657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1657e:	4621      	mov	r1, r4
   16580:	4a08      	ldr	r2, [pc, #32]	; (165a4 <att_find_info_req+0x6c>)
	data.chan = chan;
   16582:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16584:	466b      	mov	r3, sp
   16586:	4630      	mov	r0, r6
   16588:	f00a fc5e 	bl	20e48 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1658c:	9c02      	ldr	r4, [sp, #8]
   1658e:	b924      	cbnz	r4, 1659a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   16590:	9801      	ldr	r0, [sp, #4]
   16592:	f000 fe13 	bl	171bc <net_buf_unref>
	if (!req) {
   16596:	230a      	movs	r3, #10
   16598:	e7e9      	b.n	1656e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1659a:	9901      	ldr	r1, [sp, #4]
   1659c:	4628      	mov	r0, r5
   1659e:	f7ff fc2b 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
   165a2:	e7e9      	b.n	16578 <att_find_info_req+0x40>
   165a4:	0002109b 	.word	0x0002109b

000165a8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   165a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   165aa:	2300      	movs	r3, #0
{
   165ac:	4605      	mov	r5, r0
   165ae:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   165b0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   165b2:	f005 f85f 	bl	1b674 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   165b6:	4b0b      	ldr	r3, [pc, #44]	; (165e4 <bt_att_req_alloc+0x3c>)
   165b8:	681b      	ldr	r3, [r3, #0]
   165ba:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   165bc:	bf04      	itt	eq
   165be:	2500      	moveq	r5, #0
   165c0:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   165c2:	a901      	add	r1, sp, #4
   165c4:	4808      	ldr	r0, [pc, #32]	; (165e8 <bt_att_req_alloc+0x40>)
   165c6:	462a      	mov	r2, r5
   165c8:	4623      	mov	r3, r4
   165ca:	f004 f961 	bl	1a890 <k_mem_slab_alloc>
   165ce:	4601      	mov	r1, r0
   165d0:	b930      	cbnz	r0, 165e0 <bt_att_req_alloc+0x38>
   165d2:	9801      	ldr	r0, [sp, #4]
   165d4:	2210      	movs	r2, #16
   165d6:	f00c fedb 	bl	23390 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   165da:	9801      	ldr	r0, [sp, #4]
}
   165dc:	b003      	add	sp, #12
   165de:	bd30      	pop	{r4, r5, pc}
		return NULL;
   165e0:	2000      	movs	r0, #0
   165e2:	e7fb      	b.n	165dc <bt_att_req_alloc+0x34>
   165e4:	20002548 	.word	0x20002548
   165e8:	200009ec 	.word	0x200009ec

000165ec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   165ec:	b507      	push	{r0, r1, r2, lr}
   165ee:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   165f0:	6880      	ldr	r0, [r0, #8]
   165f2:	b120      	cbz	r0, 165fe <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   165f4:	f000 fde2 	bl	171bc <net_buf_unref>
		req->buf = NULL;
   165f8:	9b01      	ldr	r3, [sp, #4]
   165fa:	2200      	movs	r2, #0
   165fc:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   165fe:	4803      	ldr	r0, [pc, #12]	; (1660c <bt_att_req_free+0x20>)
   16600:	a901      	add	r1, sp, #4
   16602:	f00c f975 	bl	228f0 <k_mem_slab_free>
}
   16606:	b003      	add	sp, #12
   16608:	f85d fb04 	ldr.w	pc, [sp], #4
   1660c:	200009ec 	.word	0x200009ec

00016610 <att_handle_rsp>:
{
   16610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16614:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   16616:	30b0      	adds	r0, #176	; 0xb0
{
   16618:	4688      	mov	r8, r1
   1661a:	4691      	mov	r9, r2
   1661c:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1661e:	f00c fb47 	bl	22cb0 <k_work_cancel_delayable>
	if (!chan->req) {
   16622:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   16626:	2600      	movs	r6, #0
   16628:	b1f0      	cbz	r0, 16668 <att_handle_rsp+0x58>
	if (chan->req == &cancel) {
   1662a:	4b10      	ldr	r3, [pc, #64]	; (1666c <att_handle_rsp+0x5c>)
   1662c:	4298      	cmp	r0, r3
   1662e:	d112      	bne.n	16656 <att_handle_rsp+0x46>
		chan->req = NULL;
   16630:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   16634:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   16636:	6820      	ldr	r0, [r4, #0]
   16638:	f00a fea5 	bl	21386 <att_req_send_process>
	if (func) {
   1663c:	b13d      	cbz	r5, 1664e <att_handle_rsp+0x3e>
		func(chan->att->conn, err, pdu, len, params);
   1663e:	6820      	ldr	r0, [r4, #0]
   16640:	f8cd a000 	str.w	sl, [sp]
   16644:	6800      	ldr	r0, [r0, #0]
   16646:	464b      	mov	r3, r9
   16648:	4642      	mov	r2, r8
   1664a:	4639      	mov	r1, r7
   1664c:	47a8      	blx	r5
}
   1664e:	2000      	movs	r0, #0
   16650:	b002      	add	sp, #8
   16652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   16656:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   16658:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   1665a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1665e:	f7ff ffc5 	bl	165ec <bt_att_req_free>
	chan->req = NULL;
   16662:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
   16666:	e7e6      	b.n	16636 <att_handle_rsp+0x26>
	bt_att_func_t func = NULL;
   16668:	4605      	mov	r5, r0
   1666a:	e7e4      	b.n	16636 <att_handle_rsp+0x26>
   1666c:	2000254c 	.word	0x2000254c

00016670 <bt_att_disconnected>:
{
   16670:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   16672:	f850 5c04 	ldr.w	r5, [r0, #-4]
{
   16676:	b085      	sub	sp, #20
   16678:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1667a:	2d00      	cmp	r5, #0
   1667c:	d04c      	beq.n	16718 <bt_att_disconnected+0xa8>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1667e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   16682:	f105 0024 	add.w	r0, r5, #36	; 0x24
   16686:	f00a fe17 	bl	212b8 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1668a:	1f26      	subs	r6, r4, #4
   1668c:	f104 0794 	add.w	r7, r4, #148	; 0x94
   16690:	2200      	movs	r2, #0
   16692:	2300      	movs	r3, #0
   16694:	4638      	mov	r0, r7
   16696:	f00b fc29 	bl	21eec <net_buf_get>
   1669a:	4602      	mov	r2, r0
   1669c:	bb18      	cbnz	r0, 166e6 <bt_att_disconnected+0x76>
	if (chan->req) {
   1669e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   166a2:	b123      	cbz	r3, 166ae <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   166a4:	4601      	mov	r1, r0
   166a6:	230e      	movs	r3, #14
   166a8:	4630      	mov	r0, r6
   166aa:	f7ff ffb1 	bl	16610 <att_handle_rsp>
	chan->att = NULL;
   166ae:	2300      	movs	r3, #0
   166b0:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   166b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   166b6:	2b00      	cmp	r3, #0
   166b8:	d12e      	bne.n	16718 <bt_att_disconnected+0xa8>
	att_reset(att);
   166ba:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   166bc:	9803      	ldr	r0, [sp, #12]
   166be:	2200      	movs	r2, #0
   166c0:	2300      	movs	r3, #0
   166c2:	300c      	adds	r0, #12
   166c4:	f00b fc12 	bl	21eec <net_buf_get>
   166c8:	b980      	cbnz	r0, 166ec <bt_att_disconnected+0x7c>
	while (!sys_slist_is_empty(&att->reqs)) {
   166ca:	9803      	ldr	r0, [sp, #12]
	return list->head;
   166cc:	6845      	ldr	r5, [r0, #4]
   166ce:	b985      	cbnz	r5, 166f2 <bt_att_disconnected+0x82>
	att->conn = NULL;
   166d0:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   166d2:	a903      	add	r1, sp, #12
   166d4:	4811      	ldr	r0, [pc, #68]	; (1671c <bt_att_disconnected+0xac>)
   166d6:	f00c f90b 	bl	228f0 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   166da:	6820      	ldr	r0, [r4, #0]
}
   166dc:	b005      	add	sp, #20
   166de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   166e2:	f000 bc75 	b.w	16fd0 <bt_gatt_disconnected>
		net_buf_unref(buf);
   166e6:	f000 fd69 	bl	171bc <net_buf_unref>
   166ea:	e7d1      	b.n	16690 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   166ec:	f000 fd66 	bl	171bc <net_buf_unref>
   166f0:	e7e4      	b.n	166bc <bt_att_disconnected+0x4c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   166f2:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   166f4:	686e      	ldr	r6, [r5, #4]
	return node->next;
   166f6:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   166f8:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   166fa:	4295      	cmp	r5, r2
	list->tail = node;
   166fc:	bf08      	it	eq
   166fe:	6083      	streq	r3, [r0, #8]
   16700:	b136      	cbz	r6, 16710 <bt_att_disconnected+0xa0>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16702:	68eb      	ldr	r3, [r5, #12]
   16704:	9300      	str	r3, [sp, #0]
   16706:	2300      	movs	r3, #0
   16708:	6800      	ldr	r0, [r0, #0]
   1670a:	461a      	mov	r2, r3
   1670c:	210e      	movs	r1, #14
   1670e:	47b0      	blx	r6
		bt_att_req_free(req);
   16710:	4628      	mov	r0, r5
   16712:	f7ff ff6b 	bl	165ec <bt_att_req_free>
   16716:	e7d8      	b.n	166ca <bt_att_disconnected+0x5a>
}
   16718:	b005      	add	sp, #20
   1671a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1671c:	200009b4 	.word	0x200009b4

00016720 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16720:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16722:	4d0d      	ldr	r5, [pc, #52]	; (16758 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16724:	4604      	mov	r4, r0
   16726:	b968      	cbnz	r0, 16744 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16728:	9000      	str	r0, [sp, #0]
   1672a:	2207      	movs	r2, #7
   1672c:	f8cd 0003 	str.w	r0, [sp, #3]
   16730:	4669      	mov	r1, sp
   16732:	1c68      	adds	r0, r5, #1
   16734:	f00c fdfb 	bl	2332e <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16738:	2800      	cmp	r0, #0
   1673a:	bf08      	it	eq
   1673c:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1673e:	4620      	mov	r0, r4
   16740:	b003      	add	sp, #12
   16742:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16744:	462a      	mov	r2, r5
   16746:	f812 1b01 	ldrb.w	r1, [r2], #1
   1674a:	f00a f9c2 	bl	20ad2 <bt_conn_is_peer_addr_le>
	return NULL;
   1674e:	2800      	cmp	r0, #0
   16750:	bf14      	ite	ne
   16752:	462c      	movne	r4, r5
   16754:	2400      	moveq	r4, #0
   16756:	e7f2      	b.n	1673e <find_cf_cfg+0x1e>
   16758:	20002564 	.word	0x20002564

0001675c <find_sc_cfg>:
{
   1675c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1675e:	4c06      	ldr	r4, [pc, #24]	; (16778 <find_sc_cfg+0x1c>)
   16760:	7823      	ldrb	r3, [r4, #0]
   16762:	4283      	cmp	r3, r0
   16764:	d104      	bne.n	16770 <find_sc_cfg+0x14>
   16766:	2207      	movs	r2, #7
   16768:	1c60      	adds	r0, r4, #1
   1676a:	f00c fde0 	bl	2332e <memcmp>
   1676e:	b108      	cbz	r0, 16774 <find_sc_cfg+0x18>
	return NULL;
   16770:	2000      	movs	r0, #0
}
   16772:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   16774:	4620      	mov	r0, r4
   16776:	e7fc      	b.n	16772 <find_sc_cfg+0x16>
   16778:	2000331c 	.word	0x2000331c

0001677c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1677c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16780:	4b23      	ldr	r3, [pc, #140]	; (16810 <disconnected_cb+0x94>)
{
   16782:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16784:	6882      	ldr	r2, [r0, #8]
   16786:	429a      	cmp	r2, r3
{
   16788:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1678a:	d102      	bne.n	16792 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1678c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1678e:	8963      	ldrh	r3, [r4, #10]
   16790:	bb03      	cbnz	r3, 167d4 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   16792:	2001      	movs	r0, #1
   16794:	b002      	add	sp, #8
   16796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1679a:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1679e:	7a28      	ldrb	r0, [r5, #8]
   167a0:	4641      	mov	r1, r8
   167a2:	f009 ff22 	bl	205ea <bt_addr_le_is_bonded>
   167a6:	b980      	cbnz	r0, 167ca <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   167a8:	4b1a      	ldr	r3, [pc, #104]	; (16814 <disconnected_cb+0x98>)
   167aa:	429c      	cmp	r4, r3
   167ac:	d102      	bne.n	167b4 <disconnected_cb+0x38>
					sc_clear(conn);
   167ae:	4628      	mov	r0, r5
   167b0:	f00b fa22 	bl	21bf8 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   167b4:	2200      	movs	r2, #0
   167b6:	4669      	mov	r1, sp
   167b8:	4630      	mov	r0, r6
   167ba:	9200      	str	r2, [sp, #0]
   167bc:	f8cd 2003 	str.w	r2, [sp, #3]
   167c0:	f00b f868 	bl	21894 <bt_addr_le_copy>
	cfg->id = 0U;
   167c4:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   167c6:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   167c8:	e019      	b.n	167fe <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   167ca:	4641      	mov	r1, r8
   167cc:	4630      	mov	r0, r6
   167ce:	f00b f861 	bl	21894 <bt_addr_le_copy>
	if (!value_used) {
   167d2:	e014      	b.n	167fe <disconnected_cb+0x82>
		if (!cfg->value) {
   167d4:	8923      	ldrh	r3, [r4, #8]
   167d6:	b193      	cbz	r3, 167fe <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   167d8:	4626      	mov	r6, r4
   167da:	4628      	mov	r0, r5
   167dc:	f816 1b01 	ldrb.w	r1, [r6], #1
   167e0:	4632      	mov	r2, r6
   167e2:	f00a f976 	bl	20ad2 <bt_conn_is_peer_addr_le>
   167e6:	2800      	cmp	r0, #0
   167e8:	d1d7      	bne.n	1679a <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   167ea:	7820      	ldrb	r0, [r4, #0]
   167ec:	4631      	mov	r1, r6
   167ee:	f7fe fff1 	bl	157d4 <bt_conn_lookup_addr_le>
			if (tmp) {
   167f2:	b120      	cbz	r0, 167fe <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   167f4:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   167f6:	f00a f925 	bl	20a44 <bt_conn_unref>
	if (!value_used) {
   167fa:	2d07      	cmp	r5, #7
   167fc:	d0c9      	beq.n	16792 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   167fe:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   16800:	2100      	movs	r1, #0
   16802:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   16804:	2b00      	cmp	r3, #0
   16806:	d0c4      	beq.n	16792 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   16808:	4638      	mov	r0, r7
   1680a:	4798      	blx	r3
   1680c:	e7c1      	b.n	16792 <disconnected_cb+0x16>
   1680e:	bf00      	nop
   16810:	00021ad1 	.word	0x00021ad1
   16814:	200006d8 	.word	0x200006d8

00016818 <sc_indicate_rsp>:
{
   16818:	b510      	push	{r4, lr}
   1681a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1681c:	4816      	ldr	r0, [pc, #88]	; (16878 <sc_indicate_rsp+0x60>)
   1681e:	f3bf 8f5b 	dmb	ish
   16822:	f100 0350 	add.w	r3, r0, #80	; 0x50
   16826:	e853 2f00 	ldrex	r2, [r3]
   1682a:	f022 0202 	bic.w	r2, r2, #2
   1682e:	e843 2100 	strex	r1, r2, [r3]
   16832:	2900      	cmp	r1, #0
   16834:	d1f7      	bne.n	16826 <sc_indicate_rsp+0xe>
   16836:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1683a:	f3bf 8f5b 	dmb	ish
   1683e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   16840:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16844:	07da      	lsls	r2, r3, #31
   16846:	d504      	bpl.n	16852 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   16848:	2200      	movs	r2, #0
   1684a:	2300      	movs	r3, #0
   1684c:	3020      	adds	r0, #32
   1684e:	f004 fc19 	bl	1b084 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   16852:	4620      	mov	r0, r4
   16854:	f00a ff5c 	bl	21710 <bt_att_fixed_chan_only>
   16858:	b160      	cbz	r0, 16874 <sc_indicate_rsp+0x5c>
		cfg = find_cf_cfg(conn);
   1685a:	4620      	mov	r0, r4
   1685c:	f7ff ff60 	bl	16720 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   16860:	b140      	cbz	r0, 16874 <sc_indicate_rsp+0x5c>
   16862:	7a03      	ldrb	r3, [r0, #8]
   16864:	07db      	lsls	r3, r3, #31
   16866:	d505      	bpl.n	16874 <sc_indicate_rsp+0x5c>
}
   16868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1686c:	2100      	movs	r1, #0
   1686e:	300c      	adds	r0, #12
   16870:	f00b b8c0 	b.w	219f4 <atomic_set_bit>
}
   16874:	bd10      	pop	{r4, pc}
   16876:	bf00      	nop
   16878:	20001ad8 	.word	0x20001ad8

0001687c <bt_gatt_init>:
{
   1687c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1687e:	4b20      	ldr	r3, [pc, #128]	; (16900 <bt_gatt_init+0x84>)
   16880:	f3bf 8f5b 	dmb	ish
   16884:	2201      	movs	r2, #1
   16886:	e853 1f00 	ldrex	r1, [r3]
   1688a:	2900      	cmp	r1, #0
   1688c:	d103      	bne.n	16896 <bt_gatt_init+0x1a>
   1688e:	e843 2000 	strex	r0, r2, [r3]
   16892:	2800      	cmp	r0, #0
   16894:	d1f7      	bne.n	16886 <bt_gatt_init+0xa>
   16896:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1689a:	d130      	bne.n	168fe <bt_gatt_init+0x82>
   1689c:	f3bf 8f5b 	dmb	ish
   168a0:	4b18      	ldr	r3, [pc, #96]	; (16904 <bt_gatt_init+0x88>)
   168a2:	e853 1f00 	ldrex	r1, [r3]
   168a6:	2900      	cmp	r1, #0
   168a8:	d103      	bne.n	168b2 <bt_gatt_init+0x36>
   168aa:	e843 2000 	strex	r0, r2, [r3]
   168ae:	2800      	cmp	r0, #0
   168b0:	d1f7      	bne.n	168a2 <bt_gatt_init+0x26>
   168b2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   168b6:	d108      	bne.n	168ca <bt_gatt_init+0x4e>
   168b8:	4913      	ldr	r1, [pc, #76]	; (16908 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   168ba:	4a14      	ldr	r2, [pc, #80]	; (1690c <bt_gatt_init+0x90>)
   168bc:	880b      	ldrh	r3, [r1, #0]
   168be:	4c14      	ldr	r4, [pc, #80]	; (16910 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   168c0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   168c2:	42a2      	cmp	r2, r4
   168c4:	d315      	bcc.n	168f2 <bt_gatt_init+0x76>
   168c6:	b100      	cbz	r0, 168ca <bt_gatt_init+0x4e>
   168c8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   168ca:	4b12      	ldr	r3, [pc, #72]	; (16914 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   168cc:	4912      	ldr	r1, [pc, #72]	; (16918 <bt_gatt_init+0x9c>)
   168ce:	4813      	ldr	r0, [pc, #76]	; (1691c <bt_gatt_init+0xa0>)
   168d0:	2200      	movs	r2, #0
	list->tail = NULL;
   168d2:	e9c3 2200 	strd	r2, r2, [r3]
   168d6:	f00c f9dd 	bl	22c94 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   168da:	4810      	ldr	r0, [pc, #64]	; (1691c <bt_gatt_init+0xa0>)
   168dc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   168e0:	2300      	movs	r3, #0
   168e2:	f004 fb9b 	bl	1b01c <k_work_schedule>
}
   168e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   168ea:	490d      	ldr	r1, [pc, #52]	; (16920 <bt_gatt_init+0xa4>)
   168ec:	480d      	ldr	r0, [pc, #52]	; (16924 <bt_gatt_init+0xa8>)
   168ee:	f00c b9d1 	b.w	22c94 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   168f2:	6850      	ldr	r0, [r2, #4]
   168f4:	4403      	add	r3, r0
   168f6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   168f8:	3208      	adds	r2, #8
   168fa:	2001      	movs	r0, #1
   168fc:	e7e1      	b.n	168c2 <bt_gatt_init+0x46>
}
   168fe:	bd10      	pop	{r4, pc}
   16900:	20002574 	.word	0x20002574
   16904:	20002590 	.word	0x20002590
   16908:	2000331a 	.word	0x2000331a
   1690c:	00023768 	.word	0x00023768
   16910:	00023790 	.word	0x00023790
   16914:	2000255c 	.word	0x2000255c
   16918:	00021d41 	.word	0x00021d41
   1691c:	20001a80 	.word	0x20001a80
   16920:	00016cad 	.word	0x00016cad
   16924:	20001af8 	.word	0x20001af8

00016928 <bt_gatt_attr_get_handle>:
{
   16928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1692c:	4603      	mov	r3, r0
   1692e:	b148      	cbz	r0, 16944 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16930:	8a00      	ldrh	r0, [r0, #16]
   16932:	b938      	cbnz	r0, 16944 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16934:	4912      	ldr	r1, [pc, #72]	; (16980 <bt_gatt_attr_get_handle+0x58>)
   16936:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16984 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1693a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1693c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16940:	4571      	cmp	r1, lr
   16942:	d301      	bcc.n	16948 <bt_gatt_attr_get_handle+0x20>
}
   16944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16948:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1694c:	42bb      	cmp	r3, r7
   1694e:	d304      	bcc.n	1695a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16950:	fb0c 7206 	mla	r2, ip, r6, r7
   16954:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16956:	4293      	cmp	r3, r2
   16958:	d90e      	bls.n	16978 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1695a:	19a2      	adds	r2, r4, r6
   1695c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1695e:	3108      	adds	r1, #8
   16960:	4614      	mov	r4, r2
   16962:	e7ed      	b.n	16940 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16964:	fb0c 7805 	mla	r8, ip, r5, r7
   16968:	4543      	cmp	r3, r8
   1696a:	d007      	beq.n	1697c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1696c:	3501      	adds	r5, #1
   1696e:	1962      	adds	r2, r4, r5
   16970:	42b5      	cmp	r5, r6
   16972:	b292      	uxth	r2, r2
   16974:	d1f6      	bne.n	16964 <bt_gatt_attr_get_handle+0x3c>
   16976:	e7f2      	b.n	1695e <bt_gatt_attr_get_handle+0x36>
   16978:	2500      	movs	r5, #0
   1697a:	e7f8      	b.n	1696e <bt_gatt_attr_get_handle+0x46>
   1697c:	4610      	mov	r0, r2
   1697e:	e7e1      	b.n	16944 <bt_gatt_attr_get_handle+0x1c>
   16980:	00023768 	.word	0x00023768
   16984:	00023790 	.word	0x00023790

00016988 <bt_gatt_foreach_attr_type>:
{
   16988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1698c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16990:	9100      	str	r1, [sp, #0]
   16992:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16994:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16998:	2d00      	cmp	r5, #0
   1699a:	bf08      	it	eq
   1699c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1699e:	4b24      	ldr	r3, [pc, #144]	; (16a30 <bt_gatt_foreach_attr_type+0xa8>)
   169a0:	881b      	ldrh	r3, [r3, #0]
   169a2:	4283      	cmp	r3, r0
{
   169a4:	4607      	mov	r7, r0
   169a6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   169a8:	d23c      	bcs.n	16a24 <bt_gatt_foreach_attr_type+0x9c>
}
   169aa:	b003      	add	sp, #12
   169ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   169b0:	6873      	ldr	r3, [r6, #4]
   169b2:	4423      	add	r3, r4
   169b4:	42bb      	cmp	r3, r7
   169b6:	d232      	bcs.n	16a1e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   169b8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   169ba:	3608      	adds	r6, #8
   169bc:	4b1d      	ldr	r3, [pc, #116]	; (16a34 <bt_gatt_foreach_attr_type+0xac>)
   169be:	429e      	cmp	r6, r3
   169c0:	d3f6      	bcc.n	169b0 <bt_gatt_foreach_attr_type+0x28>
   169c2:	e7f2      	b.n	169aa <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   169c4:	5889      	ldr	r1, [r1, r2]
   169c6:	9301      	str	r3, [sp, #4]
   169c8:	4640      	mov	r0, r8
   169ca:	f009 fb2e 	bl	2002a <bt_uuid_cmp>
   169ce:	9b01      	ldr	r3, [sp, #4]
   169d0:	b190      	cbz	r0, 169f8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   169d2:	3401      	adds	r4, #1
   169d4:	f10a 0a01 	add.w	sl, sl, #1
   169d8:	b2a4      	uxth	r4, r4
   169da:	6873      	ldr	r3, [r6, #4]
   169dc:	4553      	cmp	r3, sl
   169de:	d9ec      	bls.n	169ba <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   169e0:	9b00      	ldr	r3, [sp, #0]
   169e2:	429c      	cmp	r4, r3
   169e4:	d8e1      	bhi.n	169aa <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   169e6:	42bc      	cmp	r4, r7
   169e8:	d3f3      	bcc.n	169d2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   169ea:	6831      	ldr	r1, [r6, #0]
   169ec:	fb0b f20a 	mul.w	r2, fp, sl
   169f0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   169f2:	f1b8 0f00 	cmp.w	r8, #0
   169f6:	d1e5      	bne.n	169c4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   169f8:	f1b9 0f00 	cmp.w	r9, #0
   169fc:	d10b      	bne.n	16a16 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   169fe:	3d01      	subs	r5, #1
   16a00:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16a02:	4618      	mov	r0, r3
   16a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16a08:	4621      	mov	r1, r4
   16a0a:	4798      	blx	r3
	if (!*num_matches) {
   16a0c:	2d00      	cmp	r5, #0
   16a0e:	d0cc      	beq.n	169aa <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16a10:	2800      	cmp	r0, #0
   16a12:	d1de      	bne.n	169d2 <bt_gatt_foreach_attr_type+0x4a>
   16a14:	e7c9      	b.n	169aa <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16a16:	68da      	ldr	r2, [r3, #12]
   16a18:	4591      	cmp	r9, r2
   16a1a:	d1da      	bne.n	169d2 <bt_gatt_foreach_attr_type+0x4a>
   16a1c:	e7ef      	b.n	169fe <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16a1e:	f04f 0a00 	mov.w	sl, #0
   16a22:	e7da      	b.n	169da <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16a24:	4e04      	ldr	r6, [pc, #16]	; (16a38 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   16a26:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16a28:	f04f 0b14 	mov.w	fp, #20
   16a2c:	e7c6      	b.n	169bc <bt_gatt_foreach_attr_type+0x34>
   16a2e:	bf00      	nop
   16a30:	2000331a 	.word	0x2000331a
   16a34:	00023790 	.word	0x00023790
   16a38:	00023768 	.word	0x00023768

00016a3c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   16a3c:	b510      	push	{r4, lr}
   16a3e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   16a40:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16a42:	aa1c      	add	r2, sp, #112	; 0x70
   16a44:	4669      	mov	r1, sp
   16a46:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   16a48:	e9cd 3300 	strd	r3, r3, [sp]
   16a4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16a50:	f009 f9f4 	bl	1fe3c <tc_cmac_setup>
   16a54:	b320      	cbz	r0, 16aa0 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16a56:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16a5a:	2001      	movs	r0, #1
   16a5c:	4a11      	ldr	r2, [pc, #68]	; (16aa4 <db_hash_gen.constprop.0+0x68>)
   16a5e:	ab04      	add	r3, sp, #16
   16a60:	f00b f963 	bl	21d2a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16a64:	4810      	ldr	r0, [pc, #64]	; (16aa8 <db_hash_gen.constprop.0+0x6c>)
   16a66:	a904      	add	r1, sp, #16
   16a68:	f009 fa7e 	bl	1ff68 <tc_cmac_final>
   16a6c:	b1c0      	cbz	r0, 16aa0 <db_hash_gen.constprop.0+0x64>
   16a6e:	4b0e      	ldr	r3, [pc, #56]	; (16aa8 <db_hash_gen.constprop.0+0x6c>)
   16a70:	2208      	movs	r2, #8
   16a72:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   16a76:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16a78:	780c      	ldrb	r4, [r1, #0]
   16a7a:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16a7e:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16a80:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   16a84:	d1f7      	bne.n	16a76 <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16a86:	f3bf 8f5b 	dmb	ish
   16a8a:	4b08      	ldr	r3, [pc, #32]	; (16aac <db_hash_gen.constprop.0+0x70>)
   16a8c:	e853 2f00 	ldrex	r2, [r3]
   16a90:	f042 0204 	orr.w	r2, r2, #4
   16a94:	e843 2100 	strex	r1, r2, [r3]
   16a98:	2900      	cmp	r1, #0
   16a9a:	d1f7      	bne.n	16a8c <db_hash_gen.constprop.0+0x50>
   16a9c:	f3bf 8f5b 	dmb	ish
}
   16aa0:	b048      	add	sp, #288	; 0x120
   16aa2:	bd10      	pop	{r4, pc}
   16aa4:	000217eb 	.word	0x000217eb
   16aa8:	20001a70 	.word	0x20001a70
   16aac:	20001b28 	.word	0x20001b28

00016ab0 <db_hash_read>:
{
   16ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16ab4:	4918      	ldr	r1, [pc, #96]	; (16b18 <db_hash_read+0x68>)
{
   16ab6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   16aba:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16abc:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16ac0:	461e      	mov	r6, r3
   16ac2:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16ac4:	f00c f908 	bl	22cd8 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16ac8:	f3bf 8f5b 	dmb	ish
   16acc:	4b13      	ldr	r3, [pc, #76]	; (16b1c <db_hash_read+0x6c>)
   16ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16ad0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16ad4:	0759      	lsls	r1, r3, #29
   16ad6:	d401      	bmi.n	16adc <db_hash_read+0x2c>
		db_hash_gen(true);
   16ad8:	f7ff ffb0 	bl	16a3c <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   16adc:	4620      	mov	r0, r4
   16ade:	f7ff fe1f 	bl	16720 <find_cf_cfg>
	if (cfg &&
   16ae2:	4604      	mov	r4, r0
   16ae4:	b170      	cbz	r0, 16b04 <db_hash_read+0x54>
   16ae6:	7a03      	ldrb	r3, [r0, #8]
   16ae8:	07da      	lsls	r2, r3, #31
   16aea:	d50b      	bpl.n	16b04 <db_hash_read+0x54>
   16aec:	f3bf 8f5b 	dmb	ish
   16af0:	68e3      	ldr	r3, [r4, #12]
   16af2:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   16af6:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   16af8:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   16afc:	d402      	bmi.n	16b04 <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   16afe:	2101      	movs	r1, #1
   16b00:	f00a ff78 	bl	219f4 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16b04:	2310      	movs	r3, #16
   16b06:	9306      	str	r3, [sp, #24]
   16b08:	463a      	mov	r2, r7
   16b0a:	4631      	mov	r1, r6
   16b0c:	4628      	mov	r0, r5
   16b0e:	4b04      	ldr	r3, [pc, #16]	; (16b20 <db_hash_read+0x70>)
}
   16b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16b14:	f00a beca 	b.w	218ac <bt_gatt_attr_read.constprop.0>
   16b18:	20001ab0 	.word	0x20001ab0
   16b1c:	20001ad8 	.word	0x20001ad8
   16b20:	20001a70 	.word	0x20001a70

00016b24 <gatt_indicate>:
{
   16b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b28:	4615      	mov	r5, r2
   16b2a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16b2c:	2214      	movs	r2, #20
   16b2e:	6869      	ldr	r1, [r5, #4]
{
   16b30:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16b32:	f00b f907 	bl	21d44 <bt_gatt_check_perm>
   16b36:	2800      	cmp	r0, #0
   16b38:	d139      	bne.n	16bae <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16b3a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16b3e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16b40:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16b42:	f7ff fd31 	bl	165a8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16b46:	3602      	adds	r6, #2
	if (!req) {
   16b48:	4604      	mov	r4, r0
   16b4a:	b920      	cbnz	r0, 16b56 <gatt_indicate+0x32>
		return -ENOMEM;
   16b4c:	f06f 050b 	mvn.w	r5, #11
}
   16b50:	4628      	mov	r0, r5
   16b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   16b56:	4b17      	ldr	r3, [pc, #92]	; (16bb4 <gatt_indicate+0x90>)
   16b58:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16b5a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16b5c:	4632      	mov	r2, r6
   16b5e:	211d      	movs	r1, #29
   16b60:	4640      	mov	r0, r8
   16b62:	f00a fd09 	bl	21578 <bt_att_create_pdu>
	if (!buf) {
   16b66:	4606      	mov	r6, r0
   16b68:	b918      	cbnz	r0, 16b72 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   16b6a:	4620      	mov	r0, r4
   16b6c:	f7ff fd3e 	bl	165ec <bt_att_req_free>
   16b70:	e7ec      	b.n	16b4c <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   16b72:	f100 0a08 	add.w	sl, r0, #8
   16b76:	2102      	movs	r1, #2
   16b78:	4650      	mov	r0, sl
   16b7a:	f00b fa51 	bl	22020 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16b7e:	4607      	mov	r7, r0
   16b80:	8aa9      	ldrh	r1, [r5, #20]
   16b82:	f827 9b02 	strh.w	r9, [r7], #2
   16b86:	4650      	mov	r0, sl
   16b88:	f00b fa4a 	bl	22020 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16b8c:	8aaa      	ldrh	r2, [r5, #20]
   16b8e:	6929      	ldr	r1, [r5, #16]
   16b90:	4638      	mov	r0, r7
   16b92:	f00c fbdc 	bl	2334e <memcpy>
	req->buf = buf;
   16b96:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16b98:	4621      	mov	r1, r4
   16b9a:	4640      	mov	r0, r8
   16b9c:	f00a fda3 	bl	216e6 <bt_att_req_send>
	if (err) {
   16ba0:	4605      	mov	r5, r0
   16ba2:	2800      	cmp	r0, #0
   16ba4:	d0d4      	beq.n	16b50 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   16ba6:	4620      	mov	r0, r4
   16ba8:	f7ff fd20 	bl	165ec <bt_att_req_free>
   16bac:	e7d0      	b.n	16b50 <gatt_indicate+0x2c>
		return -EPERM;
   16bae:	f04f 35ff 	mov.w	r5, #4294967295
   16bb2:	e7cd      	b.n	16b50 <gatt_indicate+0x2c>
   16bb4:	00021777 	.word	0x00021777

00016bb8 <bt_gatt_indicate>:
{
   16bb8:	b530      	push	{r4, r5, lr}
   16bba:	4b39      	ldr	r3, [pc, #228]	; (16ca0 <bt_gatt_indicate+0xe8>)
   16bbc:	f3bf 8f5b 	dmb	ish
   16bc0:	681b      	ldr	r3, [r3, #0]
   16bc2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16bc6:	075a      	lsls	r2, r3, #29
{
   16bc8:	b08b      	sub	sp, #44	; 0x2c
   16bca:	4604      	mov	r4, r0
   16bcc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16bce:	d561      	bpl.n	16c94 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16bd0:	b110      	cbz	r0, 16bd8 <bt_gatt_indicate+0x20>
   16bd2:	7a83      	ldrb	r3, [r0, #10]
   16bd4:	2b07      	cmp	r3, #7
   16bd6:	d160      	bne.n	16c9a <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   16bd8:	6868      	ldr	r0, [r5, #4]
   16bda:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16bdc:	f7ff fea4 	bl	16928 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16be0:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16be2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16be6:	b33a      	cbz	r2, 16c38 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16be8:	a905      	add	r1, sp, #20
   16bea:	9102      	str	r1, [sp, #8]
   16bec:	492d      	ldr	r1, [pc, #180]	; (16ca4 <bt_gatt_indicate+0xec>)
   16bee:	9101      	str	r1, [sp, #4]
   16bf0:	2101      	movs	r1, #1
	found->attr = NULL;
   16bf2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16bf4:	9100      	str	r1, [sp, #0]
   16bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16bfa:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16bfc:	f7ff fec4 	bl	16988 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16c00:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16c02:	b91b      	cbnz	r3, 16c0c <bt_gatt_indicate+0x54>
			return -ENOENT;
   16c04:	f06f 0001 	mvn.w	r0, #1
}
   16c08:	b00b      	add	sp, #44	; 0x2c
   16c0a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16c0c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16c0e:	9b05      	ldr	r3, [sp, #20]
   16c10:	6818      	ldr	r0, [r3, #0]
   16c12:	2300      	movs	r3, #0
   16c14:	f88d 3010 	strb.w	r3, [sp, #16]
   16c18:	a904      	add	r1, sp, #16
   16c1a:	f642 0303 	movw	r3, #10243	; 0x2803
   16c1e:	f8ad 3012 	strh.w	r3, [sp, #18]
   16c22:	f009 fa02 	bl	2002a <bt_uuid_cmp>
   16c26:	b970      	cbnz	r0, 16c46 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16c28:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16c2a:	68c3      	ldr	r3, [r0, #12]
   16c2c:	799b      	ldrb	r3, [r3, #6]
   16c2e:	069b      	lsls	r3, r3, #26
   16c30:	d405      	bmi.n	16c3e <bt_gatt_indicate+0x86>
			return -EINVAL;
   16c32:	f06f 0015 	mvn.w	r0, #21
   16c36:	e7e7      	b.n	16c08 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   16c38:	2800      	cmp	r0, #0
   16c3a:	d1e8      	bne.n	16c0e <bt_gatt_indicate+0x56>
   16c3c:	e7e2      	b.n	16c04 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16c3e:	f00b f82d 	bl	21c9c <bt_gatt_attr_value_handle>
   16c42:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   16c46:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16c4a:	b13c      	cbz	r4, 16c5c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   16c4c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16c4e:	4601      	mov	r1, r0
		params->_ref = 1;
   16c50:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16c52:	462a      	mov	r2, r5
   16c54:	4620      	mov	r0, r4
   16c56:	f7ff ff65 	bl	16b24 <gatt_indicate>
   16c5a:	e7d5      	b.n	16c08 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   16c5c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16c60:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16c62:	2302      	movs	r3, #2
   16c64:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16c68:	f642 1302 	movw	r3, #10498	; 0x2902
   16c6c:	f8ad 3012 	strh.w	r3, [sp, #18]
   16c70:	ab05      	add	r3, sp, #20
   16c72:	9302      	str	r3, [sp, #8]
   16c74:	4b0c      	ldr	r3, [pc, #48]	; (16ca8 <bt_gatt_indicate+0xf0>)
   16c76:	9301      	str	r3, [sp, #4]
   16c78:	2301      	movs	r3, #1
   16c7a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   16c7c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16c7e:	4623      	mov	r3, r4
   16c80:	aa04      	add	r2, sp, #16
   16c82:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16c86:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16c88:	f88d 4010 	strb.w	r4, [sp, #16]
   16c8c:	f7ff fe7c 	bl	16988 <bt_gatt_foreach_attr_type>
	return data.err;
   16c90:	9807      	ldr	r0, [sp, #28]
   16c92:	e7b9      	b.n	16c08 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   16c94:	f06f 000a 	mvn.w	r0, #10
   16c98:	e7b6      	b.n	16c08 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   16c9a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16c9e:	e7b3      	b.n	16c08 <bt_gatt_indicate+0x50>
   16ca0:	20000394 	.word	0x20000394
   16ca4:	0002179d 	.word	0x0002179d
   16ca8:	00016e09 	.word	0x00016e09

00016cac <sc_process>:
{
   16cac:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16cae:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16cb2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   16cb6:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   16cba:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   16cbe:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16cc0:	f1a0 0120 	sub.w	r1, r0, #32
   16cc4:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16cc8:	f3bf 8f5b 	dmb	ish
   16ccc:	e854 2f00 	ldrex	r2, [r4]
   16cd0:	f022 0201 	bic.w	r2, r2, #1
   16cd4:	e844 2000 	strex	r0, r2, [r4]
   16cd8:	2800      	cmp	r0, #0
   16cda:	d1f7      	bne.n	16ccc <sc_process+0x20>
   16cdc:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16ce0:	4a0c      	ldr	r2, [pc, #48]	; (16d14 <sc_process+0x68>)
   16ce2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16ce6:	4a0c      	ldr	r2, [pc, #48]	; (16d18 <sc_process+0x6c>)
   16ce8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16cec:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16cee:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16cf0:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16cf4:	2204      	movs	r2, #4
	sc->start = 0U;
   16cf6:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16cfa:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16cfe:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16d02:	f7ff ff59 	bl	16bb8 <bt_gatt_indicate>
   16d06:	b918      	cbnz	r0, 16d10 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16d08:	2101      	movs	r1, #1
   16d0a:	4620      	mov	r0, r4
   16d0c:	f00a fe72 	bl	219f4 <atomic_set_bit>
}
   16d10:	b002      	add	sp, #8
   16d12:	bd10      	pop	{r4, pc}
   16d14:	00023e88 	.word	0x00023e88
   16d18:	00016819 	.word	0x00016819

00016d1c <bt_gatt_notify_cb>:
{
   16d1c:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d1e:	4b37      	ldr	r3, [pc, #220]	; (16dfc <bt_gatt_notify_cb+0xe0>)
   16d20:	f3bf 8f5b 	dmb	ish
   16d24:	681b      	ldr	r3, [r3, #0]
   16d26:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16d2a:	075a      	lsls	r2, r3, #29
{
   16d2c:	b08b      	sub	sp, #44	; 0x2c
   16d2e:	4604      	mov	r4, r0
   16d30:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16d32:	d55d      	bpl.n	16df0 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16d34:	b110      	cbz	r0, 16d3c <bt_gatt_notify_cb+0x20>
   16d36:	7a83      	ldrb	r3, [r0, #10]
   16d38:	2b07      	cmp	r3, #7
   16d3a:	d15c      	bne.n	16df6 <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   16d3c:	6868      	ldr	r0, [r5, #4]
   16d3e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16d40:	f7ff fdf2 	bl	16928 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16d44:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16d46:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16d4a:	b33a      	cbz	r2, 16d9c <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16d4c:	a905      	add	r1, sp, #20
   16d4e:	9102      	str	r1, [sp, #8]
   16d50:	492b      	ldr	r1, [pc, #172]	; (16e00 <bt_gatt_notify_cb+0xe4>)
   16d52:	9101      	str	r1, [sp, #4]
   16d54:	2101      	movs	r1, #1
	found->attr = NULL;
   16d56:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16d58:	9100      	str	r1, [sp, #0]
   16d5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16d5e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16d60:	f7ff fe12 	bl	16988 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16d64:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16d66:	b91b      	cbnz	r3, 16d70 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   16d68:	f06f 0001 	mvn.w	r0, #1
}
   16d6c:	b00b      	add	sp, #44	; 0x2c
   16d6e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16d70:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16d72:	9b05      	ldr	r3, [sp, #20]
   16d74:	6818      	ldr	r0, [r3, #0]
   16d76:	2300      	movs	r3, #0
   16d78:	f88d 3010 	strb.w	r3, [sp, #16]
   16d7c:	a904      	add	r1, sp, #16
   16d7e:	f642 0303 	movw	r3, #10243	; 0x2803
   16d82:	f8ad 3012 	strh.w	r3, [sp, #18]
   16d86:	f009 f950 	bl	2002a <bt_uuid_cmp>
   16d8a:	b970      	cbnz	r0, 16daa <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16d8c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   16d8e:	68c3      	ldr	r3, [r0, #12]
   16d90:	799b      	ldrb	r3, [r3, #6]
   16d92:	06db      	lsls	r3, r3, #27
   16d94:	d405      	bmi.n	16da2 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   16d96:	f06f 0015 	mvn.w	r0, #21
   16d9a:	e7e7      	b.n	16d6c <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   16d9c:	2800      	cmp	r0, #0
   16d9e:	d1e8      	bne.n	16d72 <bt_gatt_notify_cb+0x56>
   16da0:	e7e2      	b.n	16d68 <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16da2:	f00a ff7b 	bl	21c9c <bt_gatt_attr_value_handle>
   16da6:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   16daa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16dae:	b12c      	cbz	r4, 16dbc <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   16db0:	4601      	mov	r1, r0
   16db2:	462a      	mov	r2, r5
   16db4:	4620      	mov	r0, r4
   16db6:	f00a ffe8 	bl	21d8a <gatt_notify>
   16dba:	e7d7      	b.n	16d6c <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16dbc:	f642 1202 	movw	r2, #10498	; 0x2902
   16dc0:	f8ad 2012 	strh.w	r2, [sp, #18]
   16dc4:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   16dc6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16dca:	9202      	str	r2, [sp, #8]
   16dcc:	4a0d      	ldr	r2, [pc, #52]	; (16e04 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   16dce:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   16dd0:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16dd2:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   16dd6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16dda:	aa04      	add	r2, sp, #16
   16ddc:	4623      	mov	r3, r4
   16dde:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   16de2:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16de4:	f88d 4010 	strb.w	r4, [sp, #16]
   16de8:	f7ff fdce 	bl	16988 <bt_gatt_foreach_attr_type>
	return data.err;
   16dec:	9807      	ldr	r0, [sp, #28]
   16dee:	e7bd      	b.n	16d6c <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   16df0:	f06f 000a 	mvn.w	r0, #10
   16df4:	e7ba      	b.n	16d6c <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   16df6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16dfa:	e7b7      	b.n	16d6c <bt_gatt_notify_cb+0x50>
   16dfc:	20000394 	.word	0x20000394
   16e00:	0002179d 	.word	0x0002179d
   16e04:	00016e09 	.word	0x00016e09

00016e08 <notify_cb>:
{
   16e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e0a:	4b32      	ldr	r3, [pc, #200]	; (16ed4 <notify_cb+0xcc>)
{
   16e0c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e0e:	6882      	ldr	r2, [r0, #8]
   16e10:	429a      	cmp	r2, r3
{
   16e12:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16e14:	d12e      	bne.n	16e74 <notify_cb+0x6c>
	ccc = attr->user_data;
   16e16:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16e18:	4b2f      	ldr	r3, [pc, #188]	; (16ed8 <notify_cb+0xd0>)
   16e1a:	429f      	cmp	r7, r3
   16e1c:	d11a      	bne.n	16e54 <notify_cb+0x4c>
   16e1e:	4d2f      	ldr	r5, [pc, #188]	; (16edc <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   16e20:	2300      	movs	r3, #0
   16e22:	2207      	movs	r2, #7
   16e24:	4669      	mov	r1, sp
   16e26:	1c68      	adds	r0, r5, #1
   16e28:	9300      	str	r3, [sp, #0]
   16e2a:	f8cd 3003 	str.w	r3, [sp, #3]
   16e2e:	f00c fa7e 	bl	2332e <memcmp>
   16e32:	b178      	cbz	r0, 16e54 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   16e34:	4629      	mov	r1, r5
   16e36:	2207      	movs	r2, #7
   16e38:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e3c:	f7fe fce8 	bl	15810 <bt_conn_lookup_state_le>
			if (!conn) {
   16e40:	b9e0      	cbnz	r0, 16e7c <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   16e42:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   16e44:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   16e46:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   16e48:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e4c:	8853      	ldrh	r3, [r2, #2]
   16e4e:	8812      	ldrh	r2, [r2, #0]
   16e50:	f00a feab 	bl	21baa <sc_save>
		if (cfg->value != data->type) {
   16e54:	893a      	ldrh	r2, [r7, #8]
   16e56:	89a3      	ldrh	r3, [r4, #12]
   16e58:	429a      	cmp	r2, r3
   16e5a:	d10b      	bne.n	16e74 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16e5c:	4639      	mov	r1, r7
   16e5e:	f811 0b01 	ldrb.w	r0, [r1], #1
   16e62:	f7fe fcb7 	bl	157d4 <bt_conn_lookup_addr_le>
		if (!conn) {
   16e66:	4605      	mov	r5, r0
   16e68:	b120      	cbz	r0, 16e74 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   16e6a:	7a83      	ldrb	r3, [r0, #10]
   16e6c:	2b07      	cmp	r3, #7
   16e6e:	d008      	beq.n	16e82 <notify_cb+0x7a>
			bt_conn_unref(conn);
   16e70:	f009 fde8 	bl	20a44 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   16e74:	2701      	movs	r7, #1
}
   16e76:	4638      	mov	r0, r7
   16e78:	b003      	add	sp, #12
   16e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   16e7c:	f009 fde2 	bl	20a44 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e80:	e7e8      	b.n	16e54 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   16e82:	697b      	ldr	r3, [r7, #20]
   16e84:	b123      	cbz	r3, 16e90 <notify_cb+0x88>
   16e86:	4631      	mov	r1, r6
   16e88:	4798      	blx	r3
   16e8a:	b908      	cbnz	r0, 16e90 <notify_cb+0x88>
			bt_conn_unref(conn);
   16e8c:	4628      	mov	r0, r5
   16e8e:	e7ef      	b.n	16e70 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   16e90:	2214      	movs	r2, #20
   16e92:	4631      	mov	r1, r6
   16e94:	4628      	mov	r0, r5
   16e96:	f00a ff55 	bl	21d44 <bt_gatt_check_perm>
   16e9a:	4607      	mov	r7, r0
   16e9c:	2800      	cmp	r0, #0
   16e9e:	d1e9      	bne.n	16e74 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16ea0:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   16ea2:	88a1      	ldrh	r1, [r4, #4]
   16ea4:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   16ea6:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   16ea8:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   16eaa:	d10f      	bne.n	16ecc <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   16eac:	f7ff fe3a 	bl	16b24 <gatt_indicate>
			if (err == 0) {
   16eb0:	4606      	mov	r6, r0
   16eb2:	b918      	cbnz	r0, 16ebc <notify_cb+0xb4>
				data->ind_params->_ref++;
   16eb4:	6922      	ldr	r2, [r4, #16]
   16eb6:	7d93      	ldrb	r3, [r2, #22]
   16eb8:	3301      	adds	r3, #1
   16eba:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   16ebc:	4628      	mov	r0, r5
   16ebe:	f009 fdc1 	bl	20a44 <bt_conn_unref>
		if (err < 0) {
   16ec2:	2e00      	cmp	r6, #0
   16ec4:	dbd7      	blt.n	16e76 <notify_cb+0x6e>
		data->err = 0;
   16ec6:	2300      	movs	r3, #0
   16ec8:	60a3      	str	r3, [r4, #8]
   16eca:	e7d3      	b.n	16e74 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16ecc:	f00a ff5d 	bl	21d8a <gatt_notify>
   16ed0:	4606      	mov	r6, r0
   16ed2:	e7f3      	b.n	16ebc <notify_cb+0xb4>
   16ed4:	00021ad1 	.word	0x00021ad1
   16ed8:	200006d8 	.word	0x200006d8
   16edc:	2000331c 	.word	0x2000331c

00016ee0 <update_ccc>:
{
   16ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ee2:	4b24      	ldr	r3, [pc, #144]	; (16f74 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
   16ee4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   16ee6:	6882      	ldr	r2, [r0, #8]
   16ee8:	429a      	cmp	r2, r3
{
   16eea:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16eec:	d13f      	bne.n	16f6e <update_ccc+0x8e>
	ccc = attr->user_data;
   16eee:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   16ef0:	8933      	ldrh	r3, [r6, #8]
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	d03b      	beq.n	16f6e <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16ef6:	4632      	mov	r2, r6
   16ef8:	4620      	mov	r0, r4
   16efa:	f812 1b01 	ldrb.w	r1, [r2], #1
   16efe:	f009 fde8 	bl	20ad2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   16f02:	2800      	cmp	r0, #0
   16f04:	d033      	beq.n	16f6e <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   16f06:	222a      	movs	r2, #42	; 0x2a
   16f08:	4629      	mov	r1, r5
   16f0a:	4620      	mov	r0, r4
   16f0c:	f00a ff1a 	bl	21d44 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   16f10:	2803      	cmp	r0, #3
   16f12:	d02c      	beq.n	16f6e <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   16f14:	4631      	mov	r1, r6
   16f16:	4628      	mov	r0, r5
   16f18:	f00a fc23 	bl	21762 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   16f1c:	4b16      	ldr	r3, [pc, #88]	; (16f78 <update_ccc+0x98>)
   16f1e:	429e      	cmp	r6, r3
   16f20:	d125      	bne.n	16f6e <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16f22:	7a20      	ldrb	r0, [r4, #8]
   16f24:	f104 0188 	add.w	r1, r4, #136	; 0x88
   16f28:	f7ff fc18 	bl	1675c <find_sc_cfg>
	if (!cfg) {
   16f2c:	b1f8      	cbz	r0, 16f6e <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
   16f2e:	8902      	ldrh	r2, [r0, #8]
   16f30:	8943      	ldrh	r3, [r0, #10]
   16f32:	ea53 0102 	orrs.w	r1, r3, r2
   16f36:	d01a      	beq.n	16f6e <update_ccc+0x8e>
	index = bt_conn_index(conn);
   16f38:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   16f3a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   16f3e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   16f42:	f7fe fb7f 	bl	15644 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16f46:	490d      	ldr	r1, [pc, #52]	; (16f7c <update_ccc+0x9c>)
   16f48:	4a0d      	ldr	r2, [pc, #52]	; (16f80 <update_ccc+0xa0>)
   16f4a:	2318      	movs	r3, #24
   16f4c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f50:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16f52:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16f54:	4a0b      	ldr	r2, [pc, #44]	; (16f84 <update_ccc+0xa4>)
   16f56:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16f58:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   16f5e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   16f60:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f62:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   16f66:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   16f68:	4620      	mov	r0, r4
   16f6a:	f7ff fe25 	bl	16bb8 <bt_gatt_indicate>
}
   16f6e:	2001      	movs	r0, #1
   16f70:	b002      	add	sp, #8
   16f72:	bd70      	pop	{r4, r5, r6, pc}
   16f74:	00021ad1 	.word	0x00021ad1
   16f78:	200006d8 	.word	0x200006d8
   16f7c:	20002578 	.word	0x20002578
   16f80:	00023e88 	.word	0x00023e88
   16f84:	00021c3b 	.word	0x00021c3b

00016f88 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16f88:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f8a:	4a06      	ldr	r2, [pc, #24]	; (16fa4 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   16f8c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f8e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16f90:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f92:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   16f96:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16f9a:	f00a fec6 	bl	21d2a <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   16f9e:	b003      	add	sp, #12
   16fa0:	f85d fb04 	ldr.w	pc, [sp], #4
   16fa4:	00016ee1 	.word	0x00016ee1

00016fa8 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   16fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   16faa:	4b08      	ldr	r3, [pc, #32]	; (16fcc <bt_gatt_att_max_mtu_changed+0x24>)
   16fac:	681c      	ldr	r4, [r3, #0]
   16fae:	4605      	mov	r5, r0
   16fb0:	460e      	mov	r6, r1
   16fb2:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16fb4:	b14c      	cbz	r4, 16fca <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   16fb6:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16fba:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   16fbc:	b11b      	cbz	r3, 16fc6 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   16fbe:	463a      	mov	r2, r7
   16fc0:	4631      	mov	r1, r6
   16fc2:	4628      	mov	r0, r5
   16fc4:	4798      	blx	r3
	return node->next;
   16fc6:	6864      	ldr	r4, [r4, #4]
   16fc8:	e7f4      	b.n	16fb4 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   16fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fcc:	2000255c 	.word	0x2000255c

00016fd0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   16fd0:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16fd2:	4603      	mov	r3, r0
   16fd4:	4a0f      	ldr	r2, [pc, #60]	; (17014 <bt_gatt_disconnected+0x44>)
{
   16fd6:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   16fd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16fdc:	2001      	movs	r0, #1
   16fde:	f00a fea4 	bl	21d2a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   16fe2:	4620      	mov	r0, r4
   16fe4:	f7ff fb9c 	bl	16720 <find_cf_cfg>
	if (!cfg) {
   16fe8:	4605      	mov	r5, r0
   16fea:	b188      	cbz	r0, 17010 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16fec:	f104 0688 	add.w	r6, r4, #136	; 0x88
   16ff0:	7a20      	ldrb	r0, [r4, #8]
   16ff2:	4631      	mov	r1, r6
   16ff4:	f009 faf9 	bl	205ea <bt_addr_le_is_bonded>
   16ff8:	b920      	cbnz	r0, 17004 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   16ffa:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   16ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   17000:	f00a bcdf 	b.w	219c2 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17004:	4631      	mov	r1, r6
   17006:	1c68      	adds	r0, r5, #1
}
   17008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1700c:	f00a bc42 	b.w	21894 <bt_addr_le_copy>
}
   17010:	bd70      	pop	{r4, r5, r6, pc}
   17012:	bf00      	nop
   17014:	0001677d 	.word	0x0001677d

00017018 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   17018:	4b04      	ldr	r3, [pc, #16]	; (1702c <bt_smp_accept+0x14>)
   1701a:	6818      	ldr	r0, [r3, #0]
   1701c:	b918      	cbnz	r0, 17026 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   1701e:	4a04      	ldr	r2, [pc, #16]	; (17030 <bt_smp_accept+0x18>)
   17020:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   17022:	600b      	str	r3, [r1, #0]

		return 0;
   17024:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   17026:	f06f 000b 	mvn.w	r0, #11
}
   1702a:	4770      	bx	lr
   1702c:	20002594 	.word	0x20002594
   17030:	00023f8c 	.word	0x00023f8c

00017034 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   17034:	4b02      	ldr	r3, [pc, #8]	; (17040 <net_buf_pool_get+0xc>)
   17036:	222c      	movs	r2, #44	; 0x2c
   17038:	fb02 3000 	mla	r0, r2, r0, r3
   1703c:	4770      	bx	lr
   1703e:	bf00      	nop
   17040:	20000a84 	.word	0x20000a84

00017044 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17044:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   17046:	4b06      	ldr	r3, [pc, #24]	; (17060 <net_buf_id+0x1c>)
   17048:	212c      	movs	r1, #44	; 0x2c
   1704a:	fb01 3302 	mla	r3, r1, r2, r3
   1704e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17050:	7f1b      	ldrb	r3, [r3, #28]
   17052:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   17054:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17056:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1705a:	fbb0 f0f3 	udiv	r0, r0, r3
   1705e:	4770      	bx	lr
   17060:	20000a84 	.word	0x20000a84

00017064 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   17064:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17066:	4b0a      	ldr	r3, [pc, #40]	; (17090 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17068:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1706a:	242c      	movs	r4, #44	; 0x2c
   1706c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   17070:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17074:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   17076:	6823      	ldr	r3, [r4, #0]
   17078:	429a      	cmp	r2, r3
   1707a:	bf94      	ite	ls
   1707c:	600a      	strls	r2, [r1, #0]
   1707e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17080:	f7ff ffe0 	bl	17044 <net_buf_id>
   17084:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   17088:	fb02 3000 	mla	r0, r2, r0, r3
   1708c:	bd10      	pop	{r4, pc}
   1708e:	bf00      	nop
   17090:	20000a84 	.word	0x20000a84

00017094 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   17094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17098:	4605      	mov	r5, r0
   1709a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1709c:	4610      	mov	r0, r2
   1709e:	4619      	mov	r1, r3
{
   170a0:	4691      	mov	r9, r2
   170a2:	4698      	mov	r8, r3
   170a4:	4617      	mov	r7, r2
   170a6:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   170a8:	f00b ff9d 	bl	22fe6 <sys_clock_timeout_end_calc>
   170ac:	4682      	mov	sl, r0
   170ae:	468b      	mov	fp, r1
	__asm__ volatile(
   170b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   170b4:	f3ef 8111 	mrs	r1, BASEPRI
   170b8:	f383 8812 	msr	BASEPRI_MAX, r3
   170bc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   170c0:	8b6b      	ldrh	r3, [r5, #26]
   170c2:	2b00      	cmp	r3, #0
   170c4:	d05a      	beq.n	1717c <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   170c6:	8b2a      	ldrh	r2, [r5, #24]
   170c8:	429a      	cmp	r2, r3
   170ca:	d93e      	bls.n	1714a <net_buf_alloc_len+0xb6>
   170cc:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   170ce:	2200      	movs	r2, #0
   170d0:	2300      	movs	r3, #0
   170d2:	4628      	mov	r0, r5
   170d4:	f003 fd9a 	bl	1ac0c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   170d8:	9900      	ldr	r1, [sp, #0]
   170da:	4604      	mov	r4, r0
   170dc:	2800      	cmp	r0, #0
   170de:	d034      	beq.n	1714a <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   170e0:	f381 8811 	msr	BASEPRI, r1
   170e4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   170e8:	9b01      	ldr	r3, [sp, #4]
   170ea:	2b00      	cmp	r3, #0
   170ec:	d056      	beq.n	1719c <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   170ee:	ea58 0309 	orrs.w	r3, r8, r9
   170f2:	d00f      	beq.n	17114 <net_buf_alloc_len+0x80>
   170f4:	f1b8 3fff 	cmp.w	r8, #4294967295
   170f8:	bf08      	it	eq
   170fa:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   170fe:	d009      	beq.n	17114 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   17100:	f004 fc5c 	bl	1b9bc <sys_clock_tick_get>
   17104:	ebba 0700 	subs.w	r7, sl, r0
   17108:	eb6b 0601 	sbc.w	r6, fp, r1
   1710c:	2e00      	cmp	r6, #0
   1710e:	bfbc      	itt	lt
   17110:	2700      	movlt	r7, #0
   17112:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17114:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   17116:	f8df 809c 	ldr.w	r8, [pc, #156]	; 171b4 <net_buf_alloc_len+0x120>
   1711a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1711e:	fb09 8303 	mla	r3, r9, r3, r8
   17122:	463a      	mov	r2, r7
   17124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17126:	681b      	ldr	r3, [r3, #0]
   17128:	a901      	add	r1, sp, #4
   1712a:	681d      	ldr	r5, [r3, #0]
   1712c:	4620      	mov	r0, r4
   1712e:	4633      	mov	r3, r6
   17130:	47a8      	blx	r5
   17132:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   17134:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   17136:	2800      	cmp	r0, #0
   17138:	d131      	bne.n	1719e <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1713a:	79a0      	ldrb	r0, [r4, #6]
   1713c:	4621      	mov	r1, r4
   1713e:	fb00 8009 	mla	r0, r0, r9, r8
   17142:	f00b fca6 	bl	22a92 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17146:	462c      	mov	r4, r5
}
   17148:	e024      	b.n	17194 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1714a:	8b68      	ldrh	r0, [r5, #26]
   1714c:	1e43      	subs	r3, r0, #1
   1714e:	836b      	strh	r3, [r5, #26]
   17150:	f381 8811 	msr	BASEPRI, r1
   17154:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17158:	7f2a      	ldrb	r2, [r5, #28]
   1715a:	f102 0417 	add.w	r4, r2, #23
   1715e:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   17162:	8b2c      	ldrh	r4, [r5, #24]
   17164:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   17166:	6aac      	ldr	r4, [r5, #40]	; 0x28
   17168:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1716c:	4811      	ldr	r0, [pc, #68]	; (171b4 <net_buf_alloc_len+0x120>)
   1716e:	4b12      	ldr	r3, [pc, #72]	; (171b8 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   17170:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   17172:	1a2d      	subs	r5, r5, r0
   17174:	10ad      	asrs	r5, r5, #2
   17176:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   17178:	71a5      	strb	r5, [r4, #6]
		goto success;
   1717a:	e7b5      	b.n	170e8 <net_buf_alloc_len+0x54>
   1717c:	f381 8811 	msr	BASEPRI, r1
   17180:	f3bf 8f6f 	isb	sy
   17184:	464a      	mov	r2, r9
   17186:	4643      	mov	r3, r8
   17188:	4628      	mov	r0, r5
   1718a:	f003 fd3f 	bl	1ac0c <z_impl_k_queue_get>
	if (!buf) {
   1718e:	4604      	mov	r4, r0
   17190:	2800      	cmp	r0, #0
   17192:	d1a9      	bne.n	170e8 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17194:	4620      	mov	r0, r4
   17196:	b003      	add	sp, #12
   17198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1719c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1719e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   171a0:	2201      	movs	r2, #1
	buf->frags = NULL;
   171a2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   171a4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   171a6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   171a8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   171aa:	6923      	ldr	r3, [r4, #16]
   171ac:	81e2      	strh	r2, [r4, #14]
   171ae:	60a3      	str	r3, [r4, #8]
	return buf;
   171b0:	e7f0      	b.n	17194 <net_buf_alloc_len+0x100>
   171b2:	bf00      	nop
   171b4:	20000a84 	.word	0x20000a84
   171b8:	ba2e8ba3 	.word	0xba2e8ba3

000171bc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   171bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171c0:	4d16      	ldr	r5, [pc, #88]	; (1721c <net_buf_unref+0x60>)
   171c2:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   171c4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   171c6:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   171c8:	b90c      	cbnz	r4, 171ce <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   171ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   171ce:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   171d0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   171d4:	3b01      	subs	r3, #1
   171d6:	b2db      	uxtb	r3, r3
   171d8:	7123      	strb	r3, [r4, #4]
   171da:	2b00      	cmp	r3, #0
   171dc:	d1f5      	bne.n	171ca <net_buf_unref+0xe>
		if (buf->__buf) {
   171de:	6921      	ldr	r1, [r4, #16]
   171e0:	b159      	cbz	r1, 171fa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   171e2:	7963      	ldrb	r3, [r4, #5]
   171e4:	079b      	lsls	r3, r3, #30
   171e6:	d407      	bmi.n	171f8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   171e8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   171ea:	fb07 5303 	mla	r3, r7, r3, r5
   171ee:	4620      	mov	r0, r4
   171f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   171f2:	681b      	ldr	r3, [r3, #0]
   171f4:	689b      	ldr	r3, [r3, #8]
   171f6:	4798      	blx	r3
			buf->__buf = NULL;
   171f8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   171fa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   171fc:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   171fe:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   17202:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   17204:	6a1b      	ldr	r3, [r3, #32]
   17206:	b11b      	cbz	r3, 17210 <net_buf_unref+0x54>
			pool->destroy(buf);
   17208:	4620      	mov	r0, r4
   1720a:	4798      	blx	r3
{
   1720c:	4644      	mov	r4, r8
   1720e:	e7db      	b.n	171c8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   17210:	4621      	mov	r1, r4
   17212:	fb00 5007 	mla	r0, r0, r7, r5
   17216:	f00b fc3c 	bl	22a92 <k_queue_prepend>
}
   1721a:	e7f7      	b.n	1720c <net_buf_unref+0x50>
   1721c:	20000a84 	.word	0x20000a84

00017220 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   17220:	7908      	ldrb	r0, [r1, #4]
{
   17222:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   17224:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   17228:	2c07      	cmp	r4, #7
   1722a:	d81f      	bhi.n	1726c <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   1722c:	780b      	ldrb	r3, [r1, #0]
   1722e:	2b09      	cmp	r3, #9
   17230:	d81c      	bhi.n	1726c <adc_nrfx_channel_setup+0x4c>
   17232:	e8df f003 	tbb	[pc, r3]
   17236:	0606      	.short	0x0606
   17238:	1b060606 	.word	0x1b060606
   1723c:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   17240:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   17242:	784a      	ldrb	r2, [r1, #1]
   17244:	2a03      	cmp	r2, #3
   17246:	d018      	beq.n	1727a <adc_nrfx_channel_setup+0x5a>
   17248:	2a04      	cmp	r2, #4
   1724a:	d10f      	bne.n	1726c <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   1724c:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   1724e:	884a      	ldrh	r2, [r1, #2]
   17250:	f244 060a 	movw	r6, #16394	; 0x400a
   17254:	42b2      	cmp	r2, r6
   17256:	d044      	beq.n	172e2 <adc_nrfx_channel_setup+0xc2>
   17258:	d811      	bhi.n	1727e <adc_nrfx_channel_setup+0x5e>
   1725a:	f244 0603 	movw	r6, #16387	; 0x4003
   1725e:	42b2      	cmp	r2, r6
   17260:	d03b      	beq.n	172da <adc_nrfx_channel_setup+0xba>
   17262:	f244 0605 	movw	r6, #16389	; 0x4005
   17266:	42b2      	cmp	r2, r6
   17268:	d039      	beq.n	172de <adc_nrfx_channel_setup+0xbe>
   1726a:	b3d2      	cbz	r2, 172e2 <adc_nrfx_channel_setup+0xc2>
   1726c:	f06f 0015 	mvn.w	r0, #21
   17270:	e032      	b.n	172d8 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   17272:	2306      	movs	r3, #6
		break;
   17274:	e7e5      	b.n	17242 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   17276:	2307      	movs	r3, #7
		break;
   17278:	e7e3      	b.n	17242 <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   1727a:	2501      	movs	r5, #1
   1727c:	e7e7      	b.n	1724e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   1727e:	f244 0614 	movw	r6, #16404	; 0x4014
   17282:	42b2      	cmp	r2, r6
   17284:	d02f      	beq.n	172e6 <adc_nrfx_channel_setup+0xc6>
   17286:	f244 0628 	movw	r6, #16424	; 0x4028
   1728a:	42b2      	cmp	r2, r6
   1728c:	d02d      	beq.n	172ea <adc_nrfx_channel_setup+0xca>
   1728e:	f244 060f 	movw	r6, #16399	; 0x400f
   17292:	42b2      	cmp	r2, r6
   17294:	d1ea      	bne.n	1726c <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   17296:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   17298:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1729c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1729e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   172a2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   172a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   172aa:	0122      	lsls	r2, r4, #4
   172ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   172b0:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   172b4:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   172b6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   172ba:	0123      	lsls	r3, r4, #4
   172bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   172c0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   172c4:	798a      	ldrb	r2, [r1, #6]
   172c6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   172ca:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   172ce:	4b08      	ldr	r3, [pc, #32]	; (172f0 <adc_nrfx_channel_setup+0xd0>)
   172d0:	441c      	add	r4, r3
   172d2:	794b      	ldrb	r3, [r1, #5]
   172d4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8

	return 0;
}
   172d8:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   172da:	2200      	movs	r2, #0
   172dc:	e7dc      	b.n	17298 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   172de:	2201      	movs	r2, #1
   172e0:	e7da      	b.n	17298 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   172e2:	2202      	movs	r2, #2
   172e4:	e7d8      	b.n	17298 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   172e6:	2204      	movs	r2, #4
   172e8:	e7d6      	b.n	17298 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   172ea:	2205      	movs	r2, #5
   172ec:	e7d4      	b.n	17298 <adc_nrfx_channel_setup+0x78>
   172ee:	bf00      	nop
   172f0:	20000468 	.word	0x20000468

000172f4 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   172f4:	4b04      	ldr	r3, [pc, #16]	; (17308 <adc_context_start_sampling.isra.0+0x14>)
   172f6:	2201      	movs	r2, #1
   172f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   172fc:	b108      	cbz	r0, 17302 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   172fe:	60da      	str	r2, [r3, #12]
}
   17300:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17302:	601a      	str	r2, [r3, #0]
   17304:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   17306:	4770      	bx	lr
   17308:	40007000 	.word	0x40007000

0001730c <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
   1730c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1730e:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
   17310:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   17312:	b910      	cbnz	r0, 1731a <start_read.constprop.0+0xe>
	switch (sequence->resolution) {
   17314:	f06f 0015 	mvn.w	r0, #21
   17318:	e09d      	b.n	17456 <start_read.constprop.0+0x14a>
	if (!selected_channels ||
   1731a:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   1731e:	d1f9      	bne.n	17314 <start_read.constprop.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
   17320:	4c57      	ldr	r4, [pc, #348]	; (17480 <start_read.constprop.0+0x174>)
	do {
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
   17322:	4f58      	ldr	r7, [pc, #352]	; (17484 <start_read.constprop.0+0x178>)
	active_channels = 0U;
   17324:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   17326:	fa20 f103 	lsr.w	r1, r0, r3
   1732a:	f011 0101 	ands.w	r1, r1, #1
   1732e:	d033      	beq.n	17398 <start_read.constprop.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
   17330:	18f9      	adds	r1, r7, r3
   17332:	f891 c0a8 	ldrb.w	ip, [r1, #168]	; 0xa8
   17336:	f1bc 0f00 	cmp.w	ip, #0
   1733a:	d0eb      	beq.n	17314 <start_read.constprop.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1733c:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			 * event is not generated) after switching to a single
			 * channel sampling and back. Thus, when oversampling
			 * is not used (hence, the multiple channel sampling is
			 * possible), the burst mode have to be deactivated.
			 */
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   17340:	7c6e      	ldrb	r6, [r5, #17]
   17342:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   17346:	3e00      	subs	r6, #0
   17348:	bf18      	it	ne
   1734a:	2601      	movne	r6, #1
   1734c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   17350:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   17354:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   17358:	f103 0151 	add.w	r1, r3, #81	; 0x51
   1735c:	0109      	lsls	r1, r1, #4
					NRF_SAADC_BURST_DISABLED));
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				m_data.positive_inputs[channel_id]);
			++active_channels;
   1735e:	3201      	adds	r2, #1
   17360:	f844 c001 	str.w	ip, [r4, r1]
   17364:	b2d2      	uxtb	r2, r2
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
   17366:	3301      	adds	r3, #1
   17368:	2b08      	cmp	r3, #8
   1736a:	d1dc      	bne.n	17326 <start_read.constprop.0+0x1a>
	switch (sequence->resolution) {
   1736c:	7c2b      	ldrb	r3, [r5, #16]
   1736e:	3b08      	subs	r3, #8
   17370:	2b06      	cmp	r3, #6
   17372:	d8cf      	bhi.n	17314 <start_read.constprop.0+0x8>
   17374:	a101      	add	r1, pc, #4	; (adr r1, 1737c <start_read.constprop.0+0x70>)
   17376:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1737a:	bf00      	nop
   1737c:	00017463 	.word	0x00017463
   17380:	00017315 	.word	0x00017315
   17384:	000173a3 	.word	0x000173a3
   17388:	00017315 	.word	0x00017315
   1738c:	0001745b 	.word	0x0001745b
   17390:	00017315 	.word	0x00017315
   17394:	0001745f 	.word	0x0001745f
   17398:	f103 0651 	add.w	r6, r3, #81	; 0x51
   1739c:	0136      	lsls	r6, r6, #4
   1739e:	51a1      	str	r1, [r4, r6]
}
   173a0:	e7e1      	b.n	17366 <start_read.constprop.0+0x5a>
   173a2:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   173a4:	4936      	ldr	r1, [pc, #216]	; (17480 <start_read.constprop.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   173a6:	2a01      	cmp	r2, #1
   173a8:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_resolution(sequence);
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
   173ac:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   173ae:	d95a      	bls.n	17466 <start_read.constprop.0+0x15a>
   173b0:	2b00      	cmp	r3, #0
   173b2:	d1af      	bne.n	17314 <start_read.constprop.0+0x8>
    p_reg->OVERSAMPLE = oversample;
   173b4:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   173b8:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   173ba:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   173bc:	b111      	cbz	r1, 173c4 <start_read.constprop.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   173be:	8989      	ldrh	r1, [r1, #12]
   173c0:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   173c4:	68e9      	ldr	r1, [r5, #12]
   173c6:	4299      	cmp	r1, r3
   173c8:	d357      	bcc.n	1747a <start_read.constprop.0+0x16e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   173ca:	4b2d      	ldr	r3, [pc, #180]	; (17480 <start_read.constprop.0+0x174>)
   173cc:	68a9      	ldr	r1, [r5, #8]
   173ce:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   173d2:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   173d4:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   173d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   173da:	4c2a      	ldr	r4, [pc, #168]	; (17484 <start_read.constprop.0+0x178>)
   173dc:	f104 067c 	add.w	r6, r4, #124	; 0x7c
   173e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   173e2:	683b      	ldr	r3, [r7, #0]
   173e4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   173e6:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   173e8:	2600      	movs	r6, #0
   173ea:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   173ec:	4627      	mov	r7, r4
   173ee:	2b00      	cmp	r3, #0
   173f0:	d03c      	beq.n	1746c <start_read.constprop.0+0x160>
		ctx->options = *sequence->options;
   173f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   173f4:	f104 0590 	add.w	r5, r4, #144	; 0x90
   173f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   173fc:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
   173fe:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   17402:	b398      	cbz	r0, 1746c <start_read.constprop.0+0x160>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17404:	f3bf 8f5b 	dmb	ish
   17408:	e857 3f00 	ldrex	r3, [r7]
   1740c:	e847 6200 	strex	r2, r6, [r7]
   17410:	2a00      	cmp	r2, #0
   17412:	d1f9      	bne.n	17408 <start_read.constprop.0+0xfc>
   17414:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   17418:	481b      	ldr	r0, [pc, #108]	; (17488 <start_read.constprop.0+0x17c>)
   1741a:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   1741e:	4a1b      	ldr	r2, [pc, #108]	; (1748c <start_read.constprop.0+0x180>)
   17420:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   17424:	4631      	mov	r1, r6
   17426:	2300      	movs	r3, #0
   17428:	fbe7 0105 	umlal	r0, r1, r7, r5
   1742c:	f7e9 fcf0 	bl	e10 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   17430:	2200      	movs	r2, #0
   17432:	e9cd 0100 	strd	r0, r1, [sp]
   17436:	2300      	movs	r3, #0
   17438:	f104 0008 	add.w	r0, r4, #8
   1743c:	f004 fb1c 	bl	1ba78 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   17440:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17444:	b9bb      	cbnz	r3, 17476 <start_read.constprop.0+0x16a>
	return z_impl_k_sem_take(sem, timeout);
   17446:	4812      	ldr	r0, [pc, #72]	; (17490 <start_read.constprop.0+0x184>)
   17448:	f04f 32ff 	mov.w	r2, #4294967295
   1744c:	f04f 33ff 	mov.w	r3, #4294967295
   17450:	f003 fc36 	bl	1acc0 <z_impl_k_sem_take>
	return ctx->status;
   17454:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   17456:	b003      	add	sp, #12
   17458:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1745a:	2302      	movs	r3, #2
		break;
   1745c:	e7a2      	b.n	173a4 <start_read.constprop.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1745e:	2303      	movs	r3, #3
		break;
   17460:	e7a0      	b.n	173a4 <start_read.constprop.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   17462:	2300      	movs	r3, #0
   17464:	e79e      	b.n	173a4 <start_read.constprop.0+0x98>
	switch (sequence->oversampling) {
   17466:	2b08      	cmp	r3, #8
   17468:	d9a4      	bls.n	173b4 <start_read.constprop.0+0xa8>
   1746a:	e753      	b.n	17314 <start_read.constprop.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1746c:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
   17470:	f7ff ff40 	bl	172f4 <adc_context_start_sampling.isra.0>
   17474:	e7e4      	b.n	17440 <start_read.constprop.0+0x134>
		return 0;
   17476:	2000      	movs	r0, #0
	return error;
   17478:	e7ed      	b.n	17456 <start_read.constprop.0+0x14a>
		return -ENOMEM;
   1747a:	f06f 000b 	mvn.w	r0, #11
   1747e:	e7ea      	b.n	17456 <start_read.constprop.0+0x14a>
   17480:	40007000 	.word	0x40007000
   17484:	20000468 	.word	0x20000468
   17488:	000f423f 	.word	0x000f423f
   1748c:	000f4240 	.word	0x000f4240
   17490:	200004c0 	.word	0x200004c0

00017494 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   17494:	b570      	push	{r4, r5, r6, lr}
   17496:	460c      	mov	r4, r1
   17498:	4616      	mov	r6, r2
   1749a:	4d0d      	ldr	r5, [pc, #52]	; (174d0 <adc_nrfx_read_async+0x3c>)
   1749c:	f04f 32ff 	mov.w	r2, #4294967295
   174a0:	f04f 33ff 	mov.w	r3, #4294967295
   174a4:	f105 0040 	add.w	r0, r5, #64	; 0x40
   174a8:	f003 fc0a 	bl	1acc0 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   174ac:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   174ae:	4620      	mov	r0, r4
   174b0:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   174b4:	676e      	str	r6, [r5, #116]	; 0x74
   174b6:	f7ff ff29 	bl	1730c <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   174ba:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   174be:	4604      	mov	r4, r0
   174c0:	b103      	cbz	r3, 174c4 <adc_nrfx_read_async+0x30>
   174c2:	b110      	cbz	r0, 174ca <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
   174c4:	4803      	ldr	r0, [pc, #12]	; (174d4 <adc_nrfx_read_async+0x40>)
   174c6:	f003 fbd5 	bl	1ac74 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   174ca:	4620      	mov	r0, r4
   174cc:	bd70      	pop	{r4, r5, r6, pc}
   174ce:	bf00      	nop
   174d0:	20000468 	.word	0x20000468
   174d4:	200004a8 	.word	0x200004a8

000174d8 <adc_nrfx_read>:
{
   174d8:	b538      	push	{r3, r4, r5, lr}
   174da:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   174dc:	4d0c      	ldr	r5, [pc, #48]	; (17510 <adc_nrfx_read+0x38>)
   174de:	f04f 32ff 	mov.w	r2, #4294967295
   174e2:	f04f 33ff 	mov.w	r3, #4294967295
   174e6:	f105 0040 	add.w	r0, r5, #64	; 0x40
   174ea:	f003 fbe9 	bl	1acc0 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   174ee:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
   174f0:	4620      	mov	r0, r4
   174f2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   174f6:	676b      	str	r3, [r5, #116]	; 0x74
   174f8:	f7ff ff08 	bl	1730c <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   174fc:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   17500:	4604      	mov	r4, r0
   17502:	b103      	cbz	r3, 17506 <adc_nrfx_read+0x2e>
   17504:	b110      	cbz	r0, 1750c <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
   17506:	4803      	ldr	r0, [pc, #12]	; (17514 <adc_nrfx_read+0x3c>)
   17508:	f003 fbb4 	bl	1ac74 <z_impl_k_sem_give>
}
   1750c:	4620      	mov	r0, r4
   1750e:	bd38      	pop	{r3, r4, r5, pc}
   17510:	20000468 	.word	0x20000468
   17514:	200004a8 	.word	0x200004a8

00017518 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17518:	4b0e      	ldr	r3, [pc, #56]	; (17554 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1751a:	b510      	push	{r4, lr}
   1751c:	2400      	movs	r4, #0
   1751e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   17522:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   17526:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1752a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1752e:	2212      	movs	r2, #18
   17530:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   17534:	2007      	movs	r0, #7
   17536:	f7fb febd 	bl	132b4 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1753a:	4622      	mov	r2, r4
   1753c:	2101      	movs	r1, #1
   1753e:	2007      	movs	r0, #7
   17540:	f7fb feea 	bl	13318 <z_arm_irq_priority_set>
	return sem->count;
   17544:	4804      	ldr	r0, [pc, #16]	; (17558 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   17546:	6c83      	ldr	r3, [r0, #72]	; 0x48
   17548:	b913      	cbnz	r3, 17550 <init_saadc+0x38>
   1754a:	3040      	adds	r0, #64	; 0x40
   1754c:	f003 fb92 	bl	1ac74 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   17550:	2000      	movs	r0, #0
   17552:	bd10      	pop	{r4, pc}
   17554:	40007000 	.word	0x40007000
   17558:	20000468 	.word	0x20000468

0001755c <saadc_irq_handler>:
{
   1755c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1755e:	4b35      	ldr	r3, [pc, #212]	; (17634 <saadc_irq_handler+0xd8>)
   17560:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   17564:	2a00      	cmp	r2, #0
   17566:	d057      	beq.n	17618 <saadc_irq_handler+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17568:	2200      	movs	r2, #0
   1756a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1756e:	4c32      	ldr	r4, [pc, #200]	; (17638 <saadc_irq_handler+0xdc>)
   17570:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17574:	2101      	movs	r1, #1
   17576:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   17578:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1757c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1757e:	4625      	mov	r5, r4
   17580:	b3db      	cbz	r3, 175fa <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   17582:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   17586:	b143      	cbz	r3, 1759a <saadc_irq_handler+0x3e>
			action = callback(dev,
   17588:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1758c:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   17590:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   17592:	2801      	cmp	r0, #1
   17594:	d014      	beq.n	175c0 <saadc_irq_handler+0x64>
   17596:	2802      	cmp	r0, #2
   17598:	d029      	beq.n	175ee <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1759a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1759e:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
   175a2:	429a      	cmp	r2, r3
   175a4:	d923      	bls.n	175ee <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   175a6:	3301      	adds	r3, #1
   175a8:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   175ac:	4b21      	ldr	r3, [pc, #132]	; (17634 <saadc_irq_handler+0xd8>)
   175ae:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   175b2:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   175b6:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   175b8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   175bc:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   175c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   175c4:	b92b      	cbnz	r3, 175d2 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   175c6:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
   175ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   175ce:	f7ff be91 	b.w	172f4 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   175d2:	f3bf 8f5b 	dmb	ish
   175d6:	e855 3f00 	ldrex	r3, [r5]
   175da:	1e5a      	subs	r2, r3, #1
   175dc:	e845 2100 	strex	r1, r2, [r5]
   175e0:	2900      	cmp	r1, #0
   175e2:	d1f8      	bne.n	175d6 <saadc_irq_handler+0x7a>
   175e4:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   175e8:	2b01      	cmp	r3, #1
   175ea:	dcec      	bgt.n	175c6 <saadc_irq_handler+0x6a>
   175ec:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   175ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   175f2:	b113      	cbz	r3, 175fa <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   175f4:	4811      	ldr	r0, [pc, #68]	; (1763c <saadc_irq_handler+0xe0>)
   175f6:	f00b fd21 	bl	2303c <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   175fa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   175fe:	b14b      	cbz	r3, 17614 <saadc_irq_handler+0xb8>
		if (ctx->signal) {
   17600:	6f60      	ldr	r0, [r4, #116]	; 0x74
   17602:	b110      	cbz	r0, 1760a <saadc_irq_handler+0xae>
	return z_impl_k_poll_signal_raise(sig, result);
   17604:	2100      	movs	r1, #0
   17606:	f004 fae5 	bl	1bbd4 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   1760a:	480d      	ldr	r0, [pc, #52]	; (17640 <saadc_irq_handler+0xe4>)
   1760c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17610:	f003 bb30 	b.w	1ac74 <z_impl_k_sem_give>
   17614:	480b      	ldr	r0, [pc, #44]	; (17644 <saadc_irq_handler+0xe8>)
   17616:	e7f9      	b.n	1760c <saadc_irq_handler+0xb0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17618:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1761c:	2900      	cmp	r1, #0
   1761e:	d0e5      	beq.n	175ec <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17620:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   17624:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17628:	2201      	movs	r2, #1
   1762a:	609a      	str	r2, [r3, #8]
   1762c:	601a      	str	r2, [r3, #0]
   1762e:	605a      	str	r2, [r3, #4]
}
   17630:	e7dc      	b.n	175ec <saadc_irq_handler+0x90>
   17632:	bf00      	nop
   17634:	40007000 	.word	0x40007000
   17638:	20000468 	.word	0x20000468
   1763c:	20000470 	.word	0x20000470
   17640:	200004a8 	.word	0x200004a8
   17644:	200004c0 	.word	0x200004c0

00017648 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   17648:	4b08      	ldr	r3, [pc, #32]	; (1766c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1764a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1764c:	1ac3      	subs	r3, r0, r3
{
   1764e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17650:	4907      	ldr	r1, [pc, #28]	; (17670 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   17652:	109b      	asrs	r3, r3, #2
{
   17654:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17656:	4359      	muls	r1, r3
   17658:	4806      	ldr	r0, [pc, #24]	; (17674 <onoff_stop+0x2c>)
   1765a:	2240      	movs	r2, #64	; 0x40
   1765c:	f00a fd56 	bl	2210c <stop>
	notify(mgr, res);
   17660:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17662:	4601      	mov	r1, r0
	notify(mgr, res);
   17664:	4620      	mov	r0, r4
}
   17666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1766a:	4718      	bx	r3
   1766c:	20002630 	.word	0x20002630
   17670:	b6db6db7 	.word	0xb6db6db7
   17674:	00023504 	.word	0x00023504

00017678 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17678:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1767a:	4c0c      	ldr	r4, [pc, #48]	; (176ac <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1767c:	4a0c      	ldr	r2, [pc, #48]	; (176b0 <onoff_start+0x38>)
   1767e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   17680:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17682:	9300      	str	r3, [sp, #0]
{
   17684:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17686:	460b      	mov	r3, r1
   17688:	490a      	ldr	r1, [pc, #40]	; (176b4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1768a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1768c:	4361      	muls	r1, r4
{
   1768e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17690:	4809      	ldr	r0, [pc, #36]	; (176b8 <onoff_start+0x40>)
   17692:	f00a fd67 	bl	22164 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   17696:	1e01      	subs	r1, r0, #0
   17698:	da05      	bge.n	176a6 <onoff_start+0x2e>
		notify(mgr, err);
   1769a:	4630      	mov	r0, r6
   1769c:	462b      	mov	r3, r5
	}
}
   1769e:	b002      	add	sp, #8
   176a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   176a4:	4718      	bx	r3
}
   176a6:	b002      	add	sp, #8
   176a8:	bd70      	pop	{r4, r5, r6, pc}
   176aa:	bf00      	nop
   176ac:	20002630 	.word	0x20002630
   176b0:	000221d5 	.word	0x000221d5
   176b4:	b6db6db7 	.word	0xb6db6db7
   176b8:	00023504 	.word	0x00023504

000176bc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176bc:	2200      	movs	r2, #0
{
   176be:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176c0:	2101      	movs	r1, #1
{
   176c2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   176c4:	4610      	mov	r0, r2
   176c6:	f7fb fe27 	bl	13318 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   176ca:	480f      	ldr	r0, [pc, #60]	; (17708 <clk_init+0x4c>)
   176cc:	f001 fef4 	bl	194b8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   176d0:	4b0e      	ldr	r3, [pc, #56]	; (1770c <clk_init+0x50>)
   176d2:	4298      	cmp	r0, r3
   176d4:	d115      	bne.n	17702 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   176d6:	f00a ff58 	bl	2258a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   176da:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   176dc:	490c      	ldr	r1, [pc, #48]	; (17710 <clk_init+0x54>)
   176de:	4630      	mov	r0, r6
   176e0:	f007 ffb1 	bl	1f646 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   176e4:	2800      	cmp	r0, #0
   176e6:	db0b      	blt.n	17700 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   176e8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   176ea:	4909      	ldr	r1, [pc, #36]	; (17710 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   176ec:	2501      	movs	r5, #1
   176ee:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   176f0:	f104 001c 	add.w	r0, r4, #28
   176f4:	f007 ffa7 	bl	1f646 <onoff_manager_init>
		if (err < 0) {
   176f8:	2800      	cmp	r0, #0
   176fa:	db01      	blt.n	17700 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   176fc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   176fe:	2000      	movs	r0, #0
}
   17700:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   17702:	f06f 0004 	mvn.w	r0, #4
   17706:	e7fb      	b.n	17700 <clk_init+0x44>
   17708:	00017749 	.word	0x00017749
   1770c:	0bad0000 	.word	0x0bad0000
   17710:	00023ff4 	.word	0x00023ff4

00017714 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   17714:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   17716:	230c      	movs	r3, #12
   17718:	4809      	ldr	r0, [pc, #36]	; (17740 <clkstarted_handle.constprop.0+0x2c>)
   1771a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1771c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1771e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   17720:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   17724:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   17726:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   17728:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1772a:	4418      	add	r0, r3
   1772c:	f00a fcdb 	bl	220e6 <set_on_state>
	if (callback) {
   17730:	b12d      	cbz	r5, 1773e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   17732:	4632      	mov	r2, r6
   17734:	462b      	mov	r3, r5
   17736:	4803      	ldr	r0, [pc, #12]	; (17744 <clkstarted_handle.constprop.0+0x30>)
}
   17738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1773c:	4718      	bx	r3
}
   1773e:	bd70      	pop	{r4, r5, r6, pc}
   17740:	20002630 	.word	0x20002630
   17744:	00023504 	.word	0x00023504

00017748 <clock_event_handler>:
	switch (event) {
   17748:	b110      	cbz	r0, 17750 <clock_event_handler+0x8>
   1774a:	2801      	cmp	r0, #1
   1774c:	d004      	beq.n	17758 <clock_event_handler+0x10>
   1774e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   17750:	4b03      	ldr	r3, [pc, #12]	; (17760 <clock_event_handler+0x18>)
   17752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17754:	075b      	lsls	r3, r3, #29
   17756:	d101      	bne.n	1775c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   17758:	f7ff bfdc 	b.w	17714 <clkstarted_handle.constprop.0>
}
   1775c:	4770      	bx	lr
   1775e:	bf00      	nop
   17760:	20002630 	.word	0x20002630

00017764 <generic_hfclk_start>:
{
   17764:	b508      	push	{r3, lr}
	__asm__ volatile(
   17766:	f04f 0340 	mov.w	r3, #64	; 0x40
   1776a:	f3ef 8111 	mrs	r1, BASEPRI
   1776e:	f383 8812 	msr	BASEPRI_MAX, r3
   17772:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17776:	4a12      	ldr	r2, [pc, #72]	; (177c0 <generic_hfclk_start+0x5c>)
   17778:	6813      	ldr	r3, [r2, #0]
   1777a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1777e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   17782:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17784:	d00c      	beq.n	177a0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1778a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1778e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   17792:	f013 0301 	ands.w	r3, r3, #1
   17796:	d003      	beq.n	177a0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   17798:	480a      	ldr	r0, [pc, #40]	; (177c4 <generic_hfclk_start+0x60>)
   1779a:	f00a fca4 	bl	220e6 <set_on_state>
			already_started = true;
   1779e:	2301      	movs	r3, #1
	__asm__ volatile(
   177a0:	f381 8811 	msr	BASEPRI, r1
   177a4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   177a8:	b123      	cbz	r3, 177b4 <generic_hfclk_start+0x50>
}
   177aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   177ae:	2000      	movs	r0, #0
   177b0:	f7ff bfb0 	b.w	17714 <clkstarted_handle.constprop.0>
}
   177b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   177b8:	2001      	movs	r0, #1
   177ba:	f001 be6d 	b.w	19498 <nrfx_clock_start>
   177be:	bf00      	nop
   177c0:	20002680 	.word	0x20002680
   177c4:	20002670 	.word	0x20002670

000177c8 <api_blocking_start>:
{
   177c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   177ca:	2200      	movs	r2, #0
   177cc:	2301      	movs	r3, #1
   177ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
   177d2:	ab04      	add	r3, sp, #16
   177d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   177d8:	4a09      	ldr	r2, [pc, #36]	; (17800 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   177da:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   177de:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   177e0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   177e4:	f00a fcef 	bl	221c6 <api_start>
	if (err < 0) {
   177e8:	2800      	cmp	r0, #0
   177ea:	db05      	blt.n	177f8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   177ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   177f0:	2300      	movs	r3, #0
   177f2:	4668      	mov	r0, sp
   177f4:	f003 fa64 	bl	1acc0 <z_impl_k_sem_take>
}
   177f8:	b007      	add	sp, #28
   177fa:	f85d fb04 	ldr.w	pc, [sp], #4
   177fe:	bf00      	nop
   17800:	000221f3 	.word	0x000221f3

00017804 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17804:	4b09      	ldr	r3, [pc, #36]	; (1782c <generic_hfclk_stop+0x28>)
   17806:	f3bf 8f5b 	dmb	ish
   1780a:	e853 2f00 	ldrex	r2, [r3]
   1780e:	f022 0102 	bic.w	r1, r2, #2
   17812:	e843 1000 	strex	r0, r1, [r3]
   17816:	2800      	cmp	r0, #0
   17818:	d1f7      	bne.n	1780a <generic_hfclk_stop+0x6>
   1781a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1781e:	07d3      	lsls	r3, r2, #31
   17820:	d402      	bmi.n	17828 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17822:	2001      	movs	r0, #1
   17824:	f00a beac 	b.w	22580 <nrfx_clock_stop>
}
   17828:	4770      	bx	lr
   1782a:	bf00      	nop
   1782c:	20002680 	.word	0x20002680

00017830 <z_nrf_clock_control_lf_on>:
{
   17830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17832:	4928      	ldr	r1, [pc, #160]	; (178d4 <z_nrf_clock_control_lf_on+0xa4>)
   17834:	f3bf 8f5b 	dmb	ish
   17838:	4606      	mov	r6, r0
   1783a:	2201      	movs	r2, #1
   1783c:	e851 3f00 	ldrex	r3, [r1]
   17840:	e841 2000 	strex	r0, r2, [r1]
   17844:	2800      	cmp	r0, #0
   17846:	d1f9      	bne.n	1783c <z_nrf_clock_control_lf_on+0xc>
   17848:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1784c:	b933      	cbnz	r3, 1785c <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1784e:	4922      	ldr	r1, [pc, #136]	; (178d8 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   17850:	4822      	ldr	r0, [pc, #136]	; (178dc <z_nrf_clock_control_lf_on+0xac>)
   17852:	604b      	str	r3, [r1, #4]
   17854:	60cb      	str	r3, [r1, #12]
   17856:	608a      	str	r2, [r1, #8]
   17858:	f007 ff08 	bl	1f66c <onoff_request>
	switch (start_mode) {
   1785c:	1e73      	subs	r3, r6, #1
   1785e:	2b01      	cmp	r3, #1
   17860:	d820      	bhi.n	178a4 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17862:	f00b f86e 	bl	22942 <k_is_in_isr>
   17866:	4604      	mov	r4, r0
   17868:	b910      	cbnz	r0, 17870 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   1786a:	4b1d      	ldr	r3, [pc, #116]	; (178e0 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   1786c:	781b      	ldrb	r3, [r3, #0]
   1786e:	bb53      	cbnz	r3, 178c6 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   17870:	f04f 0340 	mov.w	r3, #64	; 0x40
   17874:	f3ef 8511 	mrs	r5, BASEPRI
   17878:	f383 8812 	msr	BASEPRI_MAX, r3
   1787c:	f3bf 8f6f 	isb	sy
   17880:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17882:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   17886:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1788a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   1788e:	03d2      	lsls	r2, r2, #15
   17890:	d509      	bpl.n	178a6 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   17892:	079b      	lsls	r3, r3, #30
   17894:	d001      	beq.n	1789a <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   17896:	2e01      	cmp	r6, #1
   17898:	d105      	bne.n	178a6 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   1789a:	b174      	cbz	r4, 178ba <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   1789c:	f385 8811 	msr	BASEPRI, r5
   178a0:	f3bf 8f6f 	isb	sy
}
   178a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   178a6:	b11c      	cbz	r4, 178b0 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   178a8:	4628      	mov	r0, r5
   178aa:	f7fb fcf9 	bl	132a0 <arch_cpu_atomic_idle>
}
   178ae:	e7ea      	b.n	17886 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   178b0:	2100      	movs	r1, #0
   178b2:	2021      	movs	r0, #33	; 0x21
   178b4:	f003 fec4 	bl	1b640 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   178b8:	e7e5      	b.n	17886 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   178ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   178be:	2202      	movs	r2, #2
   178c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   178c4:	e7ee      	b.n	178a4 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   178c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   178ca:	2202      	movs	r2, #2
   178cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   178d0:	4605      	mov	r5, r0
}
   178d2:	e7d6      	b.n	17882 <z_nrf_clock_control_lf_on+0x52>
   178d4:	20002684 	.word	0x20002684
   178d8:	20002620 	.word	0x20002620
   178dc:	2000264c 	.word	0x2000264c
   178e0:	20003dc0 	.word	0x20003dc0

000178e4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   178e4:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   178e6:	4c04      	ldr	r4, [pc, #16]	; (178f8 <rtt_console_init+0x14>)
   178e8:	4620      	mov	r0, r4
   178ea:	f7fa fa65 	bl	11db8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   178ee:	4620      	mov	r0, r4
   178f0:	f7fc f880 	bl	139f4 <__stdout_hook_install>

	return 0;
}
   178f4:	2000      	movs	r0, #0
   178f6:	bd10      	pop	{r4, pc}
   178f8:	000178fd 	.word	0x000178fd

000178fc <rtt_console_out>:
{
   178fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   178fe:	4e14      	ldr	r6, [pc, #80]	; (17950 <rtt_console_out+0x54>)
	char c = (char)character;
   17900:	f88d 0007 	strb.w	r0, [sp, #7]
{
   17904:	4604      	mov	r4, r0
	char c = (char)character;
   17906:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   17908:	f3ef 8711 	mrs	r7, BASEPRI
   1790c:	f04f 0120 	mov.w	r1, #32
   17910:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   17914:	2201      	movs	r2, #1
   17916:	f10d 0107 	add.w	r1, sp, #7
   1791a:	2000      	movs	r0, #0
   1791c:	f002 fe40 	bl	1a5a0 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   17920:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   17924:	b120      	cbz	r0, 17930 <rtt_console_out+0x34>
			host_present = true;
   17926:	2301      	movs	r3, #1
   17928:	7033      	strb	r3, [r6, #0]
}
   1792a:	4620      	mov	r0, r4
   1792c:	b003      	add	sp, #12
   1792e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   17930:	7833      	ldrb	r3, [r6, #0]
   17932:	2b00      	cmp	r3, #0
   17934:	d0f9      	beq.n	1792a <rtt_console_out+0x2e>
			if (max_cnt) {
   17936:	3d01      	subs	r5, #1
   17938:	d008      	beq.n	1794c <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1793a:	f00b f802 	bl	22942 <k_is_in_isr>
   1793e:	2800      	cmp	r0, #0
   17940:	d1e2      	bne.n	17908 <rtt_console_out+0xc>
   17942:	2100      	movs	r1, #0
   17944:	2042      	movs	r0, #66	; 0x42
   17946:	f003 fe7b 	bl	1b640 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1794a:	e7dd      	b.n	17908 <rtt_console_out+0xc>
				host_present = false;
   1794c:	7035      	strb	r5, [r6, #0]
   1794e:	e7ec      	b.n	1792a <rtt_console_out+0x2e>
   17950:	20003332 	.word	0x20003332

00017954 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   17954:	b530      	push	{r4, r5, lr}
	return port->config;
   17956:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17958:	7b04      	ldrb	r4, [r0, #12]
   1795a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1795e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17962:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   17966:	b085      	sub	sp, #20
   17968:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   1796c:	d104      	bne.n	17978 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   1796e:	4628      	mov	r0, r5
   17970:	f002 f934 	bl	19bdc <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   17974:	2000      	movs	r0, #0
   17976:	e032      	b.n	179de <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   17978:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1797c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   17980:	d12f      	bne.n	179e2 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   17982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   17986:	bf0c      	ite	eq
   17988:	2304      	moveq	r3, #4
   1798a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1798c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   17990:	6883      	ldr	r3, [r0, #8]
   17992:	fa23 f101 	lsr.w	r1, r3, r1
   17996:	07c9      	lsls	r1, r1, #31
   17998:	d42f      	bmi.n	179fa <gpio_nrfx_pin_interrupt_configure+0xa6>
   1799a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1799e:	d12c      	bne.n	179fa <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   179a0:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   179a2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   179a4:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   179a8:	4a1c      	ldr	r2, [pc, #112]	; (17a1c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   179aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   179ae:	bf18      	it	ne
   179b0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   179b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   179b8:	07db      	lsls	r3, r3, #31
   179ba:	d41e      	bmi.n	179fa <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   179bc:	f10d 0407 	add.w	r4, sp, #7
   179c0:	4621      	mov	r1, r4
   179c2:	4628      	mov	r0, r5
   179c4:	f002 f86e 	bl	19aa4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   179c8:	4b15      	ldr	r3, [pc, #84]	; (17a20 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   179ca:	4298      	cmp	r0, r3
   179cc:	d114      	bne.n	179f8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   179ce:	4620      	mov	r0, r4
   179d0:	f002 f8b6 	bl	19b40 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   179d4:	4b13      	ldr	r3, [pc, #76]	; (17a24 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   179d6:	4298      	cmp	r0, r3
   179d8:	d00e      	beq.n	179f8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   179da:	f06f 000b 	mvn.w	r0, #11
}
   179de:	b005      	add	sp, #20
   179e0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   179e2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   179e6:	d005      	beq.n	179f4 <gpio_nrfx_pin_interrupt_configure+0xa0>
   179e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   179ec:	bf0c      	ite	eq
   179ee:	2302      	moveq	r3, #2
   179f0:	2301      	movne	r3, #1
   179f2:	e7cb      	b.n	1798c <gpio_nrfx_pin_interrupt_configure+0x38>
   179f4:	2303      	movs	r3, #3
   179f6:	e7c9      	b.n	1798c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   179f8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   179fa:	2300      	movs	r3, #0
   179fc:	4619      	mov	r1, r3
   179fe:	aa02      	add	r2, sp, #8
   17a00:	4628      	mov	r0, r5
   17a02:	f001 ff29 	bl	19858 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17a06:	4b07      	ldr	r3, [pc, #28]	; (17a24 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17a08:	4298      	cmp	r0, r3
   17a0a:	d104      	bne.n	17a16 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   17a0c:	2101      	movs	r1, #1
   17a0e:	4628      	mov	r0, r5
   17a10:	f002 f89c 	bl	19b4c <nrfx_gpiote_trigger_enable>
   17a14:	e7ae      	b.n	17974 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   17a16:	f06f 0004 	mvn.w	r0, #4
   17a1a:	e7e0      	b.n	179de <gpio_nrfx_pin_interrupt_configure+0x8a>
   17a1c:	50000300 	.word	0x50000300
   17a20:	0bad0004 	.word	0x0bad0004
   17a24:	0bad0000 	.word	0x0bad0000

00017a28 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17a28:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   17a2a:	f002 f879 	bl	19b20 <nrfx_gpiote_is_init>
   17a2e:	4604      	mov	r4, r0
   17a30:	b968      	cbnz	r0, 17a4e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   17a32:	f002 f84d 	bl	19ad0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   17a36:	4b08      	ldr	r3, [pc, #32]	; (17a58 <gpio_nrfx_init+0x30>)
   17a38:	4298      	cmp	r0, r3
   17a3a:	d10a      	bne.n	17a52 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   17a3c:	4807      	ldr	r0, [pc, #28]	; (17a5c <gpio_nrfx_init+0x34>)
   17a3e:	4621      	mov	r1, r4
   17a40:	f002 f82a 	bl	19a98 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17a44:	4622      	mov	r2, r4
   17a46:	2105      	movs	r1, #5
   17a48:	2006      	movs	r0, #6
   17a4a:	f7fb fc65 	bl	13318 <z_arm_irq_priority_set>
		return 0;
   17a4e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   17a50:	bd10      	pop	{r4, pc}
		return -EIO;
   17a52:	f06f 0004 	mvn.w	r0, #4
   17a56:	e7fb      	b.n	17a50 <gpio_nrfx_init+0x28>
   17a58:	0bad0000 	.word	0x0bad0000
   17a5c:	00017a61 	.word	0x00017a61

00017a60 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17a60:	0942      	lsrs	r2, r0, #5
{
   17a62:	b570      	push	{r4, r5, r6, lr}
   17a64:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17a66:	d002      	beq.n	17a6e <nrfx_gpio_handler+0xe>
   17a68:	2a01      	cmp	r2, #1
   17a6a:	d015      	beq.n	17a98 <nrfx_gpio_handler+0x38>
}
   17a6c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17a6e:	4e0b      	ldr	r6, [pc, #44]	; (17a9c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   17a70:	6932      	ldr	r2, [r6, #16]
   17a72:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17a74:	2900      	cmp	r1, #0
   17a76:	d0f9      	beq.n	17a6c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   17a78:	f003 031f 	and.w	r3, r3, #31
   17a7c:	2501      	movs	r5, #1
   17a7e:	680c      	ldr	r4, [r1, #0]
   17a80:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   17a82:	688a      	ldr	r2, [r1, #8]
   17a84:	402a      	ands	r2, r5
   17a86:	d002      	beq.n	17a8e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17a88:	684b      	ldr	r3, [r1, #4]
   17a8a:	4630      	mov	r0, r6
   17a8c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17a8e:	2c00      	cmp	r4, #0
   17a90:	d0ec      	beq.n	17a6c <nrfx_gpio_handler+0xc>
   17a92:	4621      	mov	r1, r4
   17a94:	6824      	ldr	r4, [r4, #0]
   17a96:	e7f4      	b.n	17a82 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17a98:	4e01      	ldr	r6, [pc, #4]	; (17aa0 <nrfx_gpio_handler+0x40>)
   17a9a:	e7e9      	b.n	17a70 <nrfx_gpio_handler+0x10>
   17a9c:	0002351c 	.word	0x0002351c
   17aa0:	00023534 	.word	0x00023534

00017aa4 <gpio_nrfx_pin_configure>:
{
   17aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   17aa8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17aaa:	7b3b      	ldrb	r3, [r7, #12]
   17aac:	f001 051f 	and.w	r5, r1, #31
{
   17ab0:	b085      	sub	sp, #20
   17ab2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17ab4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   17ab8:	4614      	mov	r4, r2
   17aba:	b9ca      	cbnz	r2, 17af0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   17abc:	a902      	add	r1, sp, #8
   17abe:	4628      	mov	r0, r5
   17ac0:	f001 fff0 	bl	19aa4 <nrfx_gpiote_channel_get>
   17ac4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   17ac6:	4628      	mov	r0, r5
   17ac8:	f002 f8b0 	bl	19c2c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   17acc:	4b4a      	ldr	r3, [pc, #296]	; (17bf8 <gpio_nrfx_pin_configure+0x154>)
   17ace:	4298      	cmp	r0, r3
   17ad0:	d004      	beq.n	17adc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   17ad2:	f06f 0004 	mvn.w	r0, #4
}
   17ad6:	b005      	add	sp, #20
   17ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   17adc:	4284      	cmp	r4, r0
   17ade:	d105      	bne.n	17aec <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   17ae0:	f89d 0008 	ldrb.w	r0, [sp, #8]
   17ae4:	f002 f826 	bl	19b34 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17ae8:	42a0      	cmp	r0, r4
   17aea:	d1f2      	bne.n	17ad2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17aec:	2000      	movs	r0, #0
   17aee:	e7f2      	b.n	17ad6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   17af0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   17af4:	f10d 0103 	add.w	r1, sp, #3
   17af8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   17afa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   17afe:	f001 ffd1 	bl	19aa4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17b02:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   17b04:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17b06:	aa02      	add	r2, sp, #8
   17b08:	4649      	mov	r1, r9
   17b0a:	4628      	mov	r0, r5
   17b0c:	f001 fea4 	bl	19858 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17b10:	4b39      	ldr	r3, [pc, #228]	; (17bf8 <gpio_nrfx_pin_configure+0x154>)
   17b12:	4298      	cmp	r0, r3
   17b14:	d002      	beq.n	17b1c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17b16:	f06f 0015 	mvn.w	r0, #21
   17b1a:	e7dc      	b.n	17ad6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   17b1c:	4580      	cmp	r8, r0
   17b1e:	d103      	bne.n	17b28 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   17b20:	f89d 0003 	ldrb.w	r0, [sp, #3]
   17b24:	f002 f806 	bl	19b34 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   17b28:	03a3      	lsls	r3, r4, #14
   17b2a:	d551      	bpl.n	17bd0 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17b2c:	f240 6306 	movw	r3, #1542	; 0x606
   17b30:	4023      	ands	r3, r4
   17b32:	f240 2206 	movw	r2, #518	; 0x206
   17b36:	4293      	cmp	r3, r2
   17b38:	d03b      	beq.n	17bb2 <gpio_nrfx_pin_configure+0x10e>
   17b3a:	d80c      	bhi.n	17b56 <gpio_nrfx_pin_configure+0xb2>
   17b3c:	2b06      	cmp	r3, #6
   17b3e:	d015      	beq.n	17b6c <gpio_nrfx_pin_configure+0xc8>
   17b40:	d804      	bhi.n	17b4c <gpio_nrfx_pin_configure+0xa8>
   17b42:	b19b      	cbz	r3, 17b6c <gpio_nrfx_pin_configure+0xc8>
   17b44:	2b02      	cmp	r3, #2
   17b46:	d1e6      	bne.n	17b16 <gpio_nrfx_pin_configure+0x72>
   17b48:	2304      	movs	r3, #4
   17b4a:	e00f      	b.n	17b6c <gpio_nrfx_pin_configure+0xc8>
   17b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17b50:	d1e1      	bne.n	17b16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   17b52:	2301      	movs	r3, #1
   17b54:	e00a      	b.n	17b6c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17b56:	f240 4202 	movw	r2, #1026	; 0x402
   17b5a:	4293      	cmp	r3, r2
   17b5c:	d02b      	beq.n	17bb6 <gpio_nrfx_pin_configure+0x112>
   17b5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   17b62:	d02a      	beq.n	17bba <gpio_nrfx_pin_configure+0x116>
   17b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17b68:	d1d5      	bne.n	17b16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   17b6a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   17b6c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   17b70:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   17b74:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   17b78:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   17b7a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   17b7e:	bf54      	ite	pl
   17b80:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   17b84:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17b86:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   17b88:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17b8c:	d517      	bpl.n	17bbe <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   17b8e:	687b      	ldr	r3, [r7, #4]
   17b90:	2101      	movs	r1, #1
   17b92:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   17b96:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   17b9a:	2200      	movs	r2, #0
   17b9c:	a901      	add	r1, sp, #4
   17b9e:	4628      	mov	r0, r5
   17ba0:	f001 ff08 	bl	199b4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17ba4:	4b14      	ldr	r3, [pc, #80]	; (17bf8 <gpio_nrfx_pin_configure+0x154>)
   17ba6:	4298      	cmp	r0, r3
   17ba8:	bf14      	ite	ne
   17baa:	f06f 0015 	mvnne.w	r0, #21
   17bae:	2000      	moveq	r0, #0
   17bb0:	e791      	b.n	17ad6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   17bb2:	2307      	movs	r3, #7
   17bb4:	e7da      	b.n	17b6c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   17bb6:	2305      	movs	r3, #5
   17bb8:	e7d8      	b.n	17b6c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   17bba:	2303      	movs	r3, #3
   17bbc:	e7d6      	b.n	17b6c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   17bbe:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   17bc0:	bf41      	itttt	mi
   17bc2:	687b      	ldrmi	r3, [r7, #4]
   17bc4:	2101      	movmi	r1, #1
   17bc6:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   17bca:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   17bce:	e7e4      	b.n	17b9a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   17bd0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17bd2:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   17bd6:	bf54      	ite	pl
   17bd8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   17bdc:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17bde:	461a      	mov	r2, r3
   17be0:	a901      	add	r1, sp, #4
   17be2:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   17be4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17be8:	f001 fe36 	bl	19858 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17bec:	4b02      	ldr	r3, [pc, #8]	; (17bf8 <gpio_nrfx_pin_configure+0x154>)
   17bee:	4298      	cmp	r0, r3
   17bf0:	f43f af7c 	beq.w	17aec <gpio_nrfx_pin_configure+0x48>
   17bf4:	e78f      	b.n	17b16 <gpio_nrfx_pin_configure+0x72>
   17bf6:	bf00      	nop
   17bf8:	0bad0000 	.word	0x0bad0000

00017bfc <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   17bfc:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17bfe:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   17c00:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   17c04:	f002 fc32 	bl	1a46c <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   17c08:	4b03      	ldr	r3, [pc, #12]	; (17c18 <i2c_nrfx_twim_recover_bus+0x1c>)
   17c0a:	4298      	cmp	r0, r3
}
   17c0c:	bf14      	ite	ne
   17c0e:	f06f 000f 	mvnne.w	r0, #15
   17c12:	2000      	moveq	r0, #0
   17c14:	bd08      	pop	{r3, pc}
   17c16:	bf00      	nop
   17c18:	0bad0000 	.word	0x0bad0000

00017c1c <init_twim>:
{
   17c1c:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17c1e:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   17c20:	4a08      	ldr	r2, [pc, #32]	; (17c44 <init_twim+0x28>)
   17c22:	6840      	ldr	r0, [r0, #4]
   17c24:	4623      	mov	r3, r4
   17c26:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17c2a:	f002 f8ff 	bl	19e2c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   17c2e:	4b06      	ldr	r3, [pc, #24]	; (17c48 <init_twim+0x2c>)
   17c30:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
   17c32:	bf03      	ittte	eq
   17c34:	2301      	moveq	r3, #1
   17c36:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
	return 0;
   17c3a:	2000      	moveq	r0, #0
		return -EIO;
   17c3c:	f06f 0004 	mvnne.w	r0, #4
}
   17c40:	bd10      	pop	{r4, pc}
   17c42:	bf00      	nop
   17c44:	00017c4d 	.word	0x00017c4d
   17c48:	0bad0000 	.word	0x0bad0000

00017c4c <event_handler>:
	switch (p_event->type) {
   17c4c:	7803      	ldrb	r3, [r0, #0]
   17c4e:	2b01      	cmp	r3, #1
   17c50:	d008      	beq.n	17c64 <event_handler+0x18>
   17c52:	2b02      	cmp	r3, #2
   17c54:	d008      	beq.n	17c68 <event_handler+0x1c>
   17c56:	b94b      	cbnz	r3, 17c6c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   17c58:	4b05      	ldr	r3, [pc, #20]	; (17c70 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   17c5a:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   17c5c:	f101 0018 	add.w	r0, r1, #24
   17c60:	f003 b808 	b.w	1ac74 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   17c64:	4b03      	ldr	r3, [pc, #12]	; (17c74 <event_handler+0x28>)
   17c66:	e7f8      	b.n	17c5a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17c68:	4b03      	ldr	r3, [pc, #12]	; (17c78 <event_handler+0x2c>)
   17c6a:	e7f6      	b.n	17c5a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   17c6c:	4b03      	ldr	r3, [pc, #12]	; (17c7c <event_handler+0x30>)
   17c6e:	e7f4      	b.n	17c5a <event_handler+0xe>
   17c70:	0bad0000 	.word	0x0bad0000
   17c74:	0bae0001 	.word	0x0bae0001
   17c78:	0bae0002 	.word	0x0bae0002
   17c7c:	0bad0001 	.word	0x0bad0001

00017c80 <i2c_nrfx_twim_transfer>:
{
   17c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   17c84:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17c86:	6906      	ldr	r6, [r0, #16]
{
   17c88:	b089      	sub	sp, #36	; 0x24
   17c8a:	4698      	mov	r8, r3
   17c8c:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   17c8e:	893b      	ldrh	r3, [r7, #8]
   17c90:	9300      	str	r3, [sp, #0]
{
   17c92:	460c      	mov	r4, r1
   17c94:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   17c96:	2100      	movs	r1, #0
   17c98:	2214      	movs	r2, #20
   17c9a:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
   17c9c:	f8d6 9048 	ldr.w	r9, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   17ca0:	f00b fb76 	bl	23390 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17ca4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   17ca8:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17cac:	b1bb      	cbz	r3, 17cde <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   17cae:	f04f 32ff 	mov.w	r2, #4294967295
   17cb2:	f04f 33ff 	mov.w	r3, #4294967295
   17cb6:	4630      	mov	r0, r6
   17cb8:	f003 f802 	bl	1acc0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   17cbc:	f106 0a18 	add.w	sl, r6, #24
   17cc0:	2200      	movs	r2, #0
   17cc2:	2300      	movs	r3, #0
   17cc4:	4650      	mov	r0, sl
   17cc6:	f002 fffb 	bl	1acc0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   17cca:	4638      	mov	r0, r7
   17ccc:	f002 f910 	bl	19ef0 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   17cd0:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   17cd4:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   17cd6:	45d8      	cmp	r8, fp
   17cd8:	d309      	bcc.n	17cee <i2c_nrfx_twim_transfer+0x6e>
   17cda:	2400      	movs	r4, #0
   17cdc:	e051      	b.n	17d82 <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17cde:	4628      	mov	r0, r5
   17ce0:	f7ff ff9c 	bl	17c1c <init_twim>
   17ce4:	2800      	cmp	r0, #0
   17ce6:	dae2      	bge.n	17cae <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
   17ce8:	f06f 0404 	mvn.w	r4, #4
   17cec:	e04f      	b.n	17d8e <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   17cee:	7a21      	ldrb	r1, [r4, #8]
   17cf0:	070a      	lsls	r2, r1, #28
   17cf2:	f100 808f 	bmi.w	17e14 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
   17cf6:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   17cfa:	45d8      	cmp	r8, fp
   17cfc:	6862      	ldr	r2, [r4, #4]
   17cfe:	d20a      	bcs.n	17d16 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   17d00:	078b      	lsls	r3, r1, #30
   17d02:	d408      	bmi.n	17d16 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   17d04:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   17d06:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   17d0a:	f000 0001 	and.w	r0, r0, #1
   17d0e:	f003 0304 	and.w	r3, r3, #4
   17d12:	4303      	orrs	r3, r0
   17d14:	d016      	beq.n	17d44 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
   17d16:	b1bd      	cbz	r5, 17d48 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17d18:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   17d1a:	f8dd c000 	ldr.w	ip, [sp]
   17d1e:	18a8      	adds	r0, r5, r2
   17d20:	4560      	cmp	r0, ip
   17d22:	d87a      	bhi.n	17e1a <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   17d24:	07c8      	lsls	r0, r1, #31
   17d26:	d406      	bmi.n	17d36 <i2c_nrfx_twim_transfer+0xb6>
   17d28:	6821      	ldr	r1, [r4, #0]
   17d2a:	9301      	str	r3, [sp, #4]
   17d2c:	eb09 0005 	add.w	r0, r9, r5
   17d30:	f00b fb0d 	bl	2334e <memcpy>
   17d34:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   17d36:	6862      	ldr	r2, [r4, #4]
   17d38:	4415      	add	r5, r2
   17d3a:	b2ad      	uxth	r5, r5
		if (concat_next) {
   17d3c:	2b00      	cmp	r3, #0
   17d3e:	d037      	beq.n	17db0 <i2c_nrfx_twim_transfer+0x130>
   17d40:	340c      	adds	r4, #12
   17d42:	e7c8      	b.n	17cd6 <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17d44:	2301      	movs	r3, #1
   17d46:	e7e8      	b.n	17d1a <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   17d48:	07c9      	lsls	r1, r1, #31
   17d4a:	d524      	bpl.n	17d96 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   17d4c:	6823      	ldr	r3, [r4, #0]
   17d4e:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   17d50:	6863      	ldr	r3, [r4, #4]
   17d52:	9304      	str	r3, [sp, #16]
   17d54:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   17d56:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   17d58:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   17d5c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   17d60:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   17d64:	a903      	add	r1, sp, #12
   17d66:	bf0c      	ite	eq
   17d68:	2220      	moveq	r2, #32
   17d6a:	2200      	movne	r2, #0
   17d6c:	4638      	mov	r0, r7
   17d6e:	f002 f931 	bl	19fd4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   17d72:	4b2e      	ldr	r3, [pc, #184]	; (17e2c <i2c_nrfx_twim_transfer+0x1ac>)
   17d74:	4298      	cmp	r0, r3
   17d76:	d021      	beq.n	17dbc <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
   17d78:	330b      	adds	r3, #11
   17d7a:	4298      	cmp	r0, r3
   17d7c:	d053      	beq.n	17e26 <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
   17d7e:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   17d82:	4638      	mov	r0, r7
   17d84:	f002 f8c4 	bl	19f10 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   17d88:	4630      	mov	r0, r6
   17d8a:	f002 ff73 	bl	1ac74 <z_impl_k_sem_give>
}
   17d8e:	4620      	mov	r0, r4
   17d90:	b009      	add	sp, #36	; 0x24
   17d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   17d96:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   17d98:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   17d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   17da0:	d0d4      	beq.n	17d4c <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   17da2:	897b      	ldrh	r3, [r7, #10]
   17da4:	4293      	cmp	r3, r2
   17da6:	d33b      	bcc.n	17e20 <i2c_nrfx_twim_transfer+0x1a0>
   17da8:	4648      	mov	r0, r9
   17daa:	f00b fad0 	bl	2334e <memcpy>
			msg_buf_used = msgs[i].len;
   17dae:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   17db0:	2d00      	cmp	r5, #0
   17db2:	d0cb      	beq.n	17d4c <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
   17db4:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   17db8:	9504      	str	r5, [sp, #16]
   17dba:	e7cc      	b.n	17d56 <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
   17dbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17dc0:	2300      	movs	r3, #0
   17dc2:	4650      	mov	r0, sl
   17dc4:	f002 ff7c 	bl	1acc0 <z_impl_k_sem_take>
		if (ret != 0) {
   17dc8:	b138      	cbz	r0, 17dda <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
   17dca:	4638      	mov	r0, r7
   17dcc:	f002 f8a0 	bl	19f10 <nrfx_twim_disable>
   17dd0:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   17dd4:	f002 fb4a 	bl	1a46c <nrfx_twi_twim_bus_recover>
   17dd8:	e7d1      	b.n	17d7e <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
   17dda:	6c73      	ldr	r3, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   17ddc:	4a13      	ldr	r2, [pc, #76]	; (17e2c <i2c_nrfx_twim_transfer+0x1ac>)
   17dde:	4293      	cmp	r3, r2
   17de0:	d1cd      	bne.n	17d7e <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
   17de2:	7a23      	ldrb	r3, [r4, #8]
   17de4:	07db      	lsls	r3, r3, #31
   17de6:	d401      	bmi.n	17dec <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
   17de8:	2500      	movs	r5, #0
   17dea:	e7a9      	b.n	17d40 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
   17dec:	9b06      	ldr	r3, [sp, #24]
   17dee:	4599      	cmp	r9, r3
   17df0:	d1fa      	bne.n	17de8 <i2c_nrfx_twim_transfer+0x168>
   17df2:	4623      	mov	r3, r4
   17df4:	e008      	b.n	17e08 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
   17df6:	1aa9      	subs	r1, r5, r2
   17df8:	68d8      	ldr	r0, [r3, #12]
   17dfa:	9301      	str	r3, [sp, #4]
   17dfc:	b28d      	uxth	r5, r1
   17dfe:	fa19 f181 	uxtah	r1, r9, r1
   17e02:	f00b faa4 	bl	2334e <memcpy>
				j--;
   17e06:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   17e08:	685a      	ldr	r2, [r3, #4]
   17e0a:	4295      	cmp	r5, r2
   17e0c:	f1a3 030c 	sub.w	r3, r3, #12
   17e10:	d2f1      	bcs.n	17df6 <i2c_nrfx_twim_transfer+0x176>
   17e12:	e7e9      	b.n	17de8 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
   17e14:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17e18:	e7b3      	b.n	17d82 <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
   17e1a:	f06f 041b 	mvn.w	r4, #27
   17e1e:	e7b0      	b.n	17d82 <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
   17e20:	f06f 0415 	mvn.w	r4, #21
   17e24:	e7ad      	b.n	17d82 <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
   17e26:	f06f 040f 	mvn.w	r4, #15
   17e2a:	e7aa      	b.n	17d82 <i2c_nrfx_twim_transfer+0x102>
   17e2c:	0bad0000 	.word	0x0bad0000

00017e30 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   17e30:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   17e32:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   17e36:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   17e38:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   17e3a:	6002      	str	r2, [r0, #0]
}
   17e3c:	4802      	ldr	r0, [pc, #8]	; (17e48 <nrf_gpio_pin_port_decode+0x18>)
   17e3e:	bf18      	it	ne
   17e40:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   17e44:	4770      	bx	lr
   17e46:	bf00      	nop
   17e48:	50000300 	.word	0x50000300

00017e4c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   17e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   17e4e:	794b      	ldrb	r3, [r1, #5]
   17e50:	2b01      	cmp	r3, #1
   17e52:	d026      	beq.n	17ea2 <uarte_nrfx_configure+0x56>
   17e54:	2b03      	cmp	r3, #3
   17e56:	d121      	bne.n	17e9c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   17e58:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   17e5a:	798b      	ldrb	r3, [r1, #6]
   17e5c:	2b03      	cmp	r3, #3
   17e5e:	d11d      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   17e60:	79cc      	ldrb	r4, [r1, #7]
   17e62:	b10c      	cbz	r4, 17e68 <uarte_nrfx_configure+0x1c>
   17e64:	2c01      	cmp	r4, #1
   17e66:	d119      	bne.n	17e9c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   17e68:	790a      	ldrb	r2, [r1, #4]
   17e6a:	b112      	cbz	r2, 17e72 <uarte_nrfx_configure+0x26>
   17e6c:	2a02      	cmp	r2, #2
   17e6e:	d115      	bne.n	17e9c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   17e70:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   17e72:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   17e74:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   17e76:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   17e7a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   17e7c:	d065      	beq.n	17f4a <uarte_nrfx_configure+0xfe>
   17e7e:	d82d      	bhi.n	17edc <uarte_nrfx_configure+0x90>
   17e80:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   17e84:	d064      	beq.n	17f50 <uarte_nrfx_configure+0x104>
   17e86:	d816      	bhi.n	17eb6 <uarte_nrfx_configure+0x6a>
   17e88:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   17e8c:	d062      	beq.n	17f54 <uarte_nrfx_configure+0x108>
   17e8e:	d80a      	bhi.n	17ea6 <uarte_nrfx_configure+0x5a>
   17e90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   17e94:	d061      	beq.n	17f5a <uarte_nrfx_configure+0x10e>
   17e96:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   17e9a:	d061      	beq.n	17f60 <uarte_nrfx_configure+0x114>
   17e9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17ea0:	e052      	b.n	17f48 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   17ea2:	2600      	movs	r6, #0
   17ea4:	e7d9      	b.n	17e5a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   17ea6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   17eaa:	d05c      	beq.n	17f66 <uarte_nrfx_configure+0x11a>
   17eac:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   17eb0:	d1f4      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   17eb2:	4b37      	ldr	r3, [pc, #220]	; (17f90 <uarte_nrfx_configure+0x144>)
   17eb4:	e03c      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17eb6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   17eba:	d057      	beq.n	17f6c <uarte_nrfx_configure+0x120>
   17ebc:	d807      	bhi.n	17ece <uarte_nrfx_configure+0x82>
   17ebe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   17ec2:	d055      	beq.n	17f70 <uarte_nrfx_configure+0x124>
   17ec4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   17ec8:	d1e8      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   17eca:	4b32      	ldr	r3, [pc, #200]	; (17f94 <uarte_nrfx_configure+0x148>)
   17ecc:	e030      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17ece:	f647 2712 	movw	r7, #31250	; 0x7a12
   17ed2:	42bb      	cmp	r3, r7
   17ed4:	d1e2      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   17ed6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   17eda:	e029      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17edc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   17ee0:	d048      	beq.n	17f74 <uarte_nrfx_configure+0x128>
   17ee2:	d813      	bhi.n	17f0c <uarte_nrfx_configure+0xc0>
   17ee4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   17ee8:	d047      	beq.n	17f7a <uarte_nrfx_configure+0x12e>
   17eea:	d809      	bhi.n	17f00 <uarte_nrfx_configure+0xb4>
   17eec:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   17ef0:	42bb      	cmp	r3, r7
   17ef2:	d044      	beq.n	17f7e <uarte_nrfx_configure+0x132>
   17ef4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   17ef8:	d1d0      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   17efa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   17efe:	e017      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17f00:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   17f04:	d1ca      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   17f06:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   17f0a:	e011      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17f0c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   17f10:	d038      	beq.n	17f84 <uarte_nrfx_configure+0x138>
   17f12:	d808      	bhi.n	17f26 <uarte_nrfx_configure+0xda>
   17f14:	4f20      	ldr	r7, [pc, #128]	; (17f98 <uarte_nrfx_configure+0x14c>)
   17f16:	42bb      	cmp	r3, r7
   17f18:	d037      	beq.n	17f8a <uarte_nrfx_configure+0x13e>
   17f1a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   17f1e:	d1bd      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   17f20:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   17f24:	e004      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17f26:	4f1d      	ldr	r7, [pc, #116]	; (17f9c <uarte_nrfx_configure+0x150>)
   17f28:	42bb      	cmp	r3, r7
   17f2a:	d1b7      	bne.n	17e9c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   17f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   17f30:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   17f32:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   17f36:	1d03      	adds	r3, r0, #4
   17f38:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   17f3a:	4334      	orrs	r4, r6
   17f3c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   17f3e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   17f42:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   17f46:	2000      	movs	r0, #0
}
   17f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   17f4a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   17f4e:	e7ef      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   17f50:	4b13      	ldr	r3, [pc, #76]	; (17fa0 <uarte_nrfx_configure+0x154>)
   17f52:	e7ed      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   17f54:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   17f58:	e7ea      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   17f5a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   17f5e:	e7e7      	b.n	17f30 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   17f60:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   17f64:	e7e4      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   17f66:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   17f6a:	e7e1      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   17f6c:	4b0d      	ldr	r3, [pc, #52]	; (17fa4 <uarte_nrfx_configure+0x158>)
   17f6e:	e7df      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   17f70:	4b0d      	ldr	r3, [pc, #52]	; (17fa8 <uarte_nrfx_configure+0x15c>)
   17f72:	e7dd      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   17f74:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   17f78:	e7da      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   17f7a:	4b0c      	ldr	r3, [pc, #48]	; (17fac <uarte_nrfx_configure+0x160>)
   17f7c:	e7d8      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   17f7e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   17f82:	e7d5      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   17f84:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17f88:	e7d2      	b.n	17f30 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   17f8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17f8e:	e7cf      	b.n	17f30 <uarte_nrfx_configure+0xe4>
   17f90:	0013b000 	.word	0x0013b000
   17f94:	004ea000 	.word	0x004ea000
   17f98:	0003d090 	.word	0x0003d090
   17f9c:	000f4240 	.word	0x000f4240
   17fa0:	00275000 	.word	0x00275000
   17fa4:	0075c000 	.word	0x0075c000
   17fa8:	003af000 	.word	0x003af000
   17fac:	013a9000 	.word	0x013a9000

00017fb0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   17fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   17fb2:	6906      	ldr	r6, [r0, #16]
{
   17fb4:	4605      	mov	r5, r0
   17fb6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17fb8:	f00a fcc3 	bl	22942 <k_is_in_isr>
   17fbc:	b910      	cbnz	r0, 17fc4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   17fbe:	4b2c      	ldr	r3, [pc, #176]	; (18070 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   17fc0:	781b      	ldrb	r3, [r3, #0]
   17fc2:	b983      	cbnz	r3, 17fe6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   17fc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   17fc8:	f3ef 8411 	mrs	r4, BASEPRI
   17fcc:	f383 8812 	msr	BASEPRI_MAX, r3
   17fd0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   17fd4:	6868      	ldr	r0, [r5, #4]
   17fd6:	f00a f9c3 	bl	22360 <is_tx_ready.isra.0>
   17fda:	bb28      	cbnz	r0, 18028 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   17fdc:	f384 8811 	msr	BASEPRI, r4
   17fe0:	f3bf 8f6f 	isb	sy
}
   17fe4:	e7ee      	b.n	17fc4 <uarte_nrfx_poll_out+0x14>
{
   17fe6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   17fe8:	6868      	ldr	r0, [r5, #4]
   17fea:	f00a f9b9 	bl	22360 <is_tx_ready.isra.0>
   17fee:	b970      	cbnz	r0, 1800e <uarte_nrfx_poll_out+0x5e>
   17ff0:	2001      	movs	r0, #1
   17ff2:	f00a fae2 	bl	225ba <nrfx_busy_wait>
   17ff6:	3c01      	subs	r4, #1
   17ff8:	d1f6      	bne.n	17fe8 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   17ffa:	2100      	movs	r1, #0
   17ffc:	2021      	movs	r0, #33	; 0x21
   17ffe:	f003 fb1f 	bl	1b640 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18002:	e7f0      	b.n	17fe6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18004:	f384 8811 	msr	BASEPRI, r4
   18008:	f3bf 8f6f 	isb	sy
}
   1800c:	e7f5      	b.n	17ffa <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1800e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18012:	f3ef 8411 	mrs	r4, BASEPRI
   18016:	f383 8812 	msr	BASEPRI_MAX, r3
   1801a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1801e:	6868      	ldr	r0, [r5, #4]
   18020:	f00a f99e 	bl	22360 <is_tx_ready.isra.0>
   18024:	2800      	cmp	r0, #0
   18026:	d0ed      	beq.n	18004 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   18028:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   1802c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1802e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   18030:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   18032:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   18036:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1803a:	2200      	movs	r2, #0
   1803c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18040:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   18044:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   18048:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1804c:	684a      	ldr	r2, [r1, #4]
   1804e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18050:	bf41      	itttt	mi
   18052:	2208      	movmi	r2, #8
   18054:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   18058:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1805c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18060:	2201      	movs	r2, #1
   18062:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   18064:	f384 8811 	msr	BASEPRI, r4
   18068:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1806c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1806e:	bf00      	nop
   18070:	20003dc0 	.word	0x20003dc0

00018074 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18078:	2200      	movs	r2, #0
   1807a:	4607      	mov	r7, r0
   1807c:	2101      	movs	r1, #1
   1807e:	2002      	movs	r0, #2
   18080:	f7fb f94a 	bl	13318 <z_arm_irq_priority_set>
   18084:	2002      	movs	r0, #2
   18086:	f7fb f915 	bl	132b4 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1808a:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1808e:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   18090:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18094:	2300      	movs	r3, #0
   18096:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1809a:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   1809c:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1809e:	68eb      	ldr	r3, [r5, #12]
   180a0:	1c5a      	adds	r2, r3, #1
   180a2:	d013      	beq.n	180cc <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   180a4:	a801      	add	r0, sp, #4
   180a6:	9301      	str	r3, [sp, #4]
   180a8:	f7ff fec2 	bl	17e30 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   180ac:	9a01      	ldr	r2, [sp, #4]
   180ae:	2301      	movs	r3, #1
   180b0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   180b2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   180b6:	68eb      	ldr	r3, [r5, #12]
   180b8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   180ba:	a801      	add	r0, sp, #4
   180bc:	f7ff feb8 	bl	17e30 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   180c0:	9b01      	ldr	r3, [sp, #4]
   180c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   180c6:	2203      	movs	r2, #3
   180c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   180cc:	6928      	ldr	r0, [r5, #16]
   180ce:	1c43      	adds	r3, r0, #1
   180d0:	d006      	beq.n	180e0 <uarte_0_init+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
   180d2:	7f2b      	ldrb	r3, [r5, #28]
   180d4:	2b00      	cmp	r3, #0
   180d6:	bf14      	ite	ne
   180d8:	2103      	movne	r1, #3
   180da:	2100      	moveq	r1, #0
   180dc:	f00a f932 	bl	22344 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   180e0:	696b      	ldr	r3, [r5, #20]
   180e2:	1c5a      	adds	r2, r3, #1
   180e4:	d013      	beq.n	1810e <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   180e6:	a801      	add	r0, sp, #4
   180e8:	9301      	str	r3, [sp, #4]
   180ea:	f7ff fea1 	bl	17e30 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   180ee:	9a01      	ldr	r2, [sp, #4]
   180f0:	2301      	movs	r3, #1
   180f2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   180f4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   180f8:	696b      	ldr	r3, [r5, #20]
   180fa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   180fc:	a801      	add	r0, sp, #4
   180fe:	f7ff fe97 	bl	17e30 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   18102:	9b01      	ldr	r3, [sp, #4]
   18104:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18108:	2203      	movs	r2, #3
   1810a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1810e:	69a8      	ldr	r0, [r5, #24]
   18110:	1c43      	adds	r3, r0, #1
   18112:	d006      	beq.n	18122 <uarte_0_init+0xae>
			nrf_gpio_cfg_input(cfg->cts_pin,
   18114:	7f6b      	ldrb	r3, [r5, #29]
   18116:	2b00      	cmp	r3, #0
   18118:	bf14      	ite	ne
   1811a:	2103      	movne	r1, #3
   1811c:	2100      	moveq	r1, #0
   1811e:	f00a f911 	bl	22344 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   18122:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   18126:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   18128:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1812c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   18130:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   18134:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   18136:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1813a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1813e:	1d31      	adds	r1, r6, #4
   18140:	f7ff fe84 	bl	17e4c <uarte_nrfx_configure>
	if (err) {
   18144:	4605      	mov	r5, r0
   18146:	2800      	cmp	r0, #0
   18148:	d146      	bne.n	181d8 <uarte_0_init+0x164>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1814a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1814e:	0799      	lsls	r1, r3, #30
   18150:	d519      	bpl.n	18186 <uarte_0_init+0x112>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18152:	f106 0012 	add.w	r0, r6, #18
   18156:	f001 fe63 	bl	19e20 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1815a:	4b23      	ldr	r3, [pc, #140]	; (181e8 <uarte_0_init+0x174>)
   1815c:	4298      	cmp	r0, r3
   1815e:	d13f      	bne.n	181e0 <uarte_0_init+0x16c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18160:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18162:	00c3      	lsls	r3, r0, #3
   18164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18168:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1816c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18170:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18174:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18178:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1817c:	4a1b      	ldr	r2, [pc, #108]	; (181ec <uarte_0_init+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1817e:	2301      	movs	r3, #1
   18180:	4083      	lsls	r3, r0
   18182:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18186:	2308      	movs	r3, #8
   18188:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1818c:	f898 3008 	ldrb.w	r3, [r8, #8]
   18190:	b95b      	cbnz	r3, 181aa <uarte_0_init+0x136>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18192:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18196:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1819a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1819e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   181a2:	2301      	movs	r3, #1
   181a4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   181a8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   181aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   181ae:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   181b0:	bf5c      	itt	pl
   181b2:	f44f 7280 	movpl.w	r2, #256	; 0x100
   181b6:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   181ba:	06db      	lsls	r3, r3, #27
   181bc:	bf44      	itt	mi
   181be:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   181c2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   181c6:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   181c8:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   181ca:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   181ce:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   181d2:	2301      	movs	r3, #1
   181d4:	60a3      	str	r3, [r4, #8]
   181d6:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   181d8:	4628      	mov	r0, r5
   181da:	b002      	add	sp, #8
   181dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   181e0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   181e4:	e7f8      	b.n	181d8 <uarte_0_init+0x164>
   181e6:	bf00      	nop
   181e8:	0bad0000 	.word	0x0bad0000
   181ec:	4001f000 	.word	0x4001f000

000181f0 <random_byte_get>:
	__asm__ volatile(
   181f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   181f4:	f3ef 8211 	mrs	r2, BASEPRI
   181f8:	f383 8812 	msr	BASEPRI_MAX, r3
   181fc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18200:	4b09      	ldr	r3, [pc, #36]	; (18228 <random_byte_get+0x38>)
   18202:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18206:	b161      	cbz	r1, 18222 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18208:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1820a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1820e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   18212:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   18216:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18218:	f382 8811 	msr	BASEPRI, r2
   1821c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18220:	4770      	bx	lr
	int retval = -EAGAIN;
   18222:	f06f 000a 	mvn.w	r0, #10
   18226:	e7f7      	b.n	18218 <random_byte_get+0x28>
   18228:	4000d000 	.word	0x4000d000

0001822c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1822c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1822e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18230:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   18232:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18234:	f04f 0040 	mov.w	r0, #64	; 0x40
   18238:	f3ef 8e11 	mrs	lr, BASEPRI
   1823c:	f380 8812 	msr	BASEPRI_MAX, r0
   18240:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18244:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18246:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1824a:	1ba4      	subs	r4, r4, r6
   1824c:	403c      	ands	r4, r7
	if (available < len) {
   1824e:	42a2      	cmp	r2, r4
		len = available;
   18250:	bf88      	it	hi
   18252:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18254:	18b0      	adds	r0, r6, r2
   18256:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   18258:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1825a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1825c:	f38e 8811 	msr	BASEPRI, lr
   18260:	f3bf 8f6f 	isb	sy
   18264:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   18266:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   18268:	4290      	cmp	r0, r2
   1826a:	d119      	bne.n	182a0 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1826c:	4566      	cmp	r6, ip
   1826e:	d10d      	bne.n	1828c <rng_pool_get+0x60>
	__asm__ volatile(
   18270:	f04f 0540 	mov.w	r5, #64	; 0x40
   18274:	f3ef 8011 	mrs	r0, BASEPRI
   18278:	f385 8812 	msr	BASEPRI_MAX, r5
   1827c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18280:	781d      	ldrb	r5, [r3, #0]
   18282:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18284:	f380 8811 	msr	BASEPRI, r0
   18288:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1828c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1828e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18290:	b290      	uxth	r0, r2
	available = available - len;
   18292:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   18294:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18296:	bf22      	ittt	cs
   18298:	4b06      	ldrcs	r3, [pc, #24]	; (182b4 <rng_pool_get+0x88>)
   1829a:	2201      	movcs	r2, #1
   1829c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1829e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   182a0:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   182a4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   182a6:	f89e e005 	ldrb.w	lr, [lr, #5]
   182aa:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   182ae:	403d      	ands	r5, r7
   182b0:	e7da      	b.n	18268 <rng_pool_get+0x3c>
   182b2:	bf00      	nop
   182b4:	4000d000 	.word	0x4000d000

000182b8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   182b8:	43db      	mvns	r3, r3
{
   182ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   182be:	f013 0501 	ands.w	r5, r3, #1
{
   182c2:	460e      	mov	r6, r1
   182c4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   182c6:	d004      	beq.n	182d2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   182c8:	4821      	ldr	r0, [pc, #132]	; (18350 <entropy_nrf5_get_entropy_isr+0x98>)
   182ca:	f7ff ffaf 	bl	1822c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   182ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   182d2:	b3a2      	cbz	r2, 1833e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   182d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   182d8:	f3ef 8811 	mrs	r8, BASEPRI
   182dc:	f383 8812 	msr	BASEPRI_MAX, r3
   182e0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   182e4:	200d      	movs	r0, #13
   182e6:	f7fb f809 	bl	132fc <arch_irq_is_enabled>
   182ea:	4607      	mov	r7, r0
		irq_disable(IRQN);
   182ec:	200d      	movs	r0, #13
   182ee:	f7fa fff1 	bl	132d4 <arch_irq_disable>
	__asm__ volatile(
   182f2:	f388 8811 	msr	BASEPRI, r8
   182f6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   182fa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 18354 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   182fe:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18358 <entropy_nrf5_get_entropy_isr+0xa0>
   18302:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   18306:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1830a:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1830e:	2301      	movs	r3, #1
   18310:	f8c8 3000 	str.w	r3, [r8]
   18314:	4625      	mov	r5, r4
   18316:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1831a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1831e:	b183      	cbz	r3, 18342 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18320:	f7ff ff66 	bl	181f0 <random_byte_get>
			if (byte < 0) {
   18324:	1e03      	subs	r3, r0, #0
   18326:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1832a:	dbf6      	blt.n	1831a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1832c:	3d01      	subs	r5, #1
   1832e:	b2ad      	uxth	r5, r5
   18330:	5573      	strb	r3, [r6, r5]
		} while (len);
   18332:	2d00      	cmp	r5, #0
   18334:	d1f1      	bne.n	1831a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18336:	b117      	cbz	r7, 1833e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18338:	200d      	movs	r0, #13
   1833a:	f7fa ffbb 	bl	132b4 <arch_irq_enable>
	return cnt;
   1833e:	4620      	mov	r0, r4
   18340:	e7c5      	b.n	182ce <entropy_nrf5_get_entropy_isr+0x16>
   18342:	f3bf 8f4f 	dsb	sy
				__WFE();
   18346:	bf20      	wfe
				__SEV();
   18348:	bf40      	sev
				__WFE();
   1834a:	bf20      	wfe
   1834c:	e7e5      	b.n	1831a <entropy_nrf5_get_entropy_isr+0x62>
   1834e:	bf00      	nop
   18350:	200026d0 	.word	0x200026d0
   18354:	4000d000 	.word	0x4000d000
   18358:	e000e100 	.word	0xe000e100

0001835c <entropy_nrf5_get_entropy>:
{
   1835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   18360:	4f13      	ldr	r7, [pc, #76]	; (183b0 <entropy_nrf5_get_entropy+0x54>)
   18362:	460d      	mov	r5, r1
   18364:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18366:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1836a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1836e:	b914      	cbnz	r4, 18376 <entropy_nrf5_get_entropy+0x1a>
}
   18370:	4620      	mov	r0, r4
   18372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18376:	f04f 33ff 	mov.w	r3, #4294967295
   1837a:	f04f 32ff 	mov.w	r2, #4294967295
   1837e:	4638      	mov	r0, r7
   18380:	f002 fc9e 	bl	1acc0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18384:	4622      	mov	r2, r4
   18386:	4629      	mov	r1, r5
   18388:	4640      	mov	r0, r8
   1838a:	f7ff ff4f 	bl	1822c <rng_pool_get>
   1838e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   18390:	4638      	mov	r0, r7
   18392:	f002 fc6f 	bl	1ac74 <z_impl_k_sem_give>
		if (bytes == 0U) {
   18396:	b93e      	cbnz	r6, 183a8 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   18398:	f04f 32ff 	mov.w	r2, #4294967295
   1839c:	f04f 33ff 	mov.w	r3, #4294967295
   183a0:	4648      	mov	r0, r9
   183a2:	f002 fc8d 	bl	1acc0 <z_impl_k_sem_take>
			continue;
   183a6:	e7e2      	b.n	1836e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   183a8:	1ba4      	subs	r4, r4, r6
   183aa:	b2a4      	uxth	r4, r4
		buf += bytes;
   183ac:	4435      	add	r5, r6
   183ae:	e7de      	b.n	1836e <entropy_nrf5_get_entropy+0x12>
   183b0:	200026a0 	.word	0x200026a0

000183b4 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   183b4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   183b6:	4c19      	ldr	r4, [pc, #100]	; (1841c <entropy_nrf5_init+0x68>)
   183b8:	2201      	movs	r2, #1
   183ba:	4611      	mov	r1, r2
   183bc:	4620      	mov	r0, r4
   183be:	f00a fbae 	bl	22b1e <z_impl_k_sem_init>
   183c2:	2201      	movs	r2, #1
   183c4:	2100      	movs	r1, #0
   183c6:	f104 0018 	add.w	r0, r4, #24
   183ca:	f00a fba8 	bl	22b1e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   183ce:	f240 4307 	movw	r3, #1031	; 0x407
   183d2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   183d6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   183da:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   183dc:	230c      	movs	r3, #12
   183de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   183e2:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   183e4:	4b0e      	ldr	r3, [pc, #56]	; (18420 <entropy_nrf5_init+0x6c>)
   183e6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   183ea:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   183ee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   183f2:	f022 0201 	bic.w	r2, r2, #1
   183f6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   183fa:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   183fc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   18400:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   18404:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   18408:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1840a:	6019      	str	r1, [r3, #0]
   1840c:	200d      	movs	r0, #13
   1840e:	f7fa ff83 	bl	13318 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   18412:	200d      	movs	r0, #13
   18414:	f7fa ff4e 	bl	132b4 <arch_irq_enable>

	return 0;
}
   18418:	4628      	mov	r0, r5
   1841a:	bd38      	pop	{r3, r4, r5, pc}
   1841c:	200026a0 	.word	0x200026a0
   18420:	4000d000 	.word	0x4000d000

00018424 <isr>:
{
   18424:	b510      	push	{r4, lr}
	byte = random_byte_get();
   18426:	f7ff fee3 	bl	181f0 <random_byte_get>
	if (byte < 0) {
   1842a:	2800      	cmp	r0, #0
   1842c:	db20      	blt.n	18470 <isr+0x4c>
	uint8_t last  = rngp->last;
   1842e:	4b17      	ldr	r3, [pc, #92]	; (1848c <isr+0x68>)
   18430:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   18434:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   18438:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1843c:	1a51      	subs	r1, r2, r1
   1843e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18442:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18444:	d10d      	bne.n	18462 <isr+0x3e>
	uint8_t last  = rngp->last;
   18446:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1844a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1844e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18452:	1a51      	subs	r1, r2, r1
   18454:	ea34 0101 	bics.w	r1, r4, r1
   18458:	d10b      	bne.n	18472 <isr+0x4e>
   1845a:	4b0d      	ldr	r3, [pc, #52]	; (18490 <isr+0x6c>)
   1845c:	2201      	movs	r2, #1
   1845e:	605a      	str	r2, [r3, #4]
}
   18460:	e00e      	b.n	18480 <isr+0x5c>
	rngp->buffer[last] = byte;
   18462:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18464:	3201      	adds	r2, #1
   18466:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18468:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1846c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18470:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18472:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18474:	3201      	adds	r2, #1
   18476:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18478:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1847c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18480:	4804      	ldr	r0, [pc, #16]	; (18494 <isr+0x70>)
}
   18482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18486:	f002 bbf5 	b.w	1ac74 <z_impl_k_sem_give>
   1848a:	bf00      	nop
   1848c:	200026a0 	.word	0x200026a0
   18490:	4000d000 	.word	0x4000d000
   18494:	200026b8 	.word	0x200026b8

00018498 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   18498:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1849a:	2301      	movs	r3, #1
   1849c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1849e:	4a11      	ldr	r2, [pc, #68]	; (184e4 <compare_int_lock+0x4c>)
   184a0:	f3bf 8f5b 	dmb	ish
   184a4:	43dc      	mvns	r4, r3
   184a6:	e852 1f00 	ldrex	r1, [r2]
   184aa:	ea01 0c04 	and.w	ip, r1, r4
   184ae:	e842 ce00 	strex	lr, ip, [r2]
   184b2:	f1be 0f00 	cmp.w	lr, #0
   184b6:	d1f6      	bne.n	184a6 <compare_int_lock+0xe>
   184b8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   184bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   184c0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   184c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   184c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   184cc:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   184d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   184d4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   184d8:	420b      	tst	r3, r1
}
   184da:	bf14      	ite	ne
   184dc:	2001      	movne	r0, #1
   184de:	2000      	moveq	r0, #0
   184e0:	bd10      	pop	{r4, pc}
   184e2:	bf00      	nop
   184e4:	200026f8 	.word	0x200026f8

000184e8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   184e8:	4919      	ldr	r1, [pc, #100]	; (18550 <sys_clock_timeout_handler+0x68>)
{
   184ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184ec:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   184ee:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   184f2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   184f4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   184f8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   184fc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   184fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   18502:	d222      	bcs.n	1854a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   18504:	4b13      	ldr	r3, [pc, #76]	; (18554 <sys_clock_timeout_handler+0x6c>)
   18506:	681b      	ldr	r3, [r3, #0]
   18508:	0a1a      	lsrs	r2, r3, #8
   1850a:	061b      	lsls	r3, r3, #24
   1850c:	195e      	adds	r6, r3, r5
   1850e:	4b12      	ldr	r3, [pc, #72]	; (18558 <sys_clock_timeout_handler+0x70>)
   18510:	f142 0700 	adc.w	r7, r2, #0
   18514:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   18518:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1851a:	f003 f9f3 	bl	1b904 <sys_clock_announce>
    return p_reg->CC[ch];
   1851e:	00a3      	lsls	r3, r4, #2
   18520:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18524:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   18528:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1852c:	42aa      	cmp	r2, r5
   1852e:	d10b      	bne.n	18548 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   18530:	b91e      	cbnz	r6, 1853a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   18532:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18536:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1853a:	4b08      	ldr	r3, [pc, #32]	; (1855c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1853c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   18540:	fa00 f404 	lsl.w	r4, r0, r4
   18544:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   18548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1854a:	2600      	movs	r6, #0
   1854c:	e7e5      	b.n	1851a <sys_clock_timeout_handler+0x32>
   1854e:	bf00      	nop
   18550:	20001b48 	.word	0x20001b48
   18554:	200026fc 	.word	0x200026fc
   18558:	20001b30 	.word	0x20001b30
   1855c:	40011000 	.word	0x40011000

00018560 <compare_int_unlock>:
	if (key) {
   18560:	b319      	cbz	r1, 185aa <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18562:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   18566:	2301      	movs	r3, #1
   18568:	4a10      	ldr	r2, [pc, #64]	; (185ac <compare_int_unlock+0x4c>)
   1856a:	4083      	lsls	r3, r0
   1856c:	e852 1f00 	ldrex	r1, [r2]
   18570:	4319      	orrs	r1, r3
   18572:	e842 1c00 	strex	ip, r1, [r2]
   18576:	f1bc 0f00 	cmp.w	ip, #0
   1857a:	d1f7      	bne.n	1856c <compare_int_unlock+0xc>
   1857c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   18580:	4a0b      	ldr	r2, [pc, #44]	; (185b0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18586:	4083      	lsls	r3, r0
   18588:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1858c:	4b09      	ldr	r3, [pc, #36]	; (185b4 <compare_int_unlock+0x54>)
   1858e:	f3bf 8f5b 	dmb	ish
   18592:	681b      	ldr	r3, [r3, #0]
   18594:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18598:	fa23 f000 	lsr.w	r0, r3, r0
   1859c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1859e:	bf42      	ittt	mi
   185a0:	4b05      	ldrmi	r3, [pc, #20]	; (185b8 <compare_int_unlock+0x58>)
   185a2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   185a6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   185aa:	4770      	bx	lr
   185ac:	200026f8 	.word	0x200026f8
   185b0:	40011000 	.word	0x40011000
   185b4:	200026f4 	.word	0x200026f4
   185b8:	e000e100 	.word	0xe000e100

000185bc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   185bc:	4b0d      	ldr	r3, [pc, #52]	; (185f4 <z_nrf_rtc_timer_read+0x38>)
   185be:	6818      	ldr	r0, [r3, #0]
   185c0:	0a01      	lsrs	r1, r0, #8
   185c2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   185c4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   185c8:	4b0b      	ldr	r3, [pc, #44]	; (185f8 <z_nrf_rtc_timer_read+0x3c>)
   185ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   185ce:	1818      	adds	r0, r3, r0
   185d0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   185d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   185d8:	d20a      	bcs.n	185f0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   185da:	4b08      	ldr	r3, [pc, #32]	; (185fc <z_nrf_rtc_timer_read+0x40>)
   185dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   185e0:	4290      	cmp	r0, r2
   185e2:	eb71 0303 	sbcs.w	r3, r1, r3
   185e6:	d203      	bcs.n	185f0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   185e8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   185ec:	f141 0100 	adc.w	r1, r1, #0
}
   185f0:	4770      	bx	lr
   185f2:	bf00      	nop
   185f4:	200026fc 	.word	0x200026fc
   185f8:	40011000 	.word	0x40011000
   185fc:	20001b30 	.word	0x20001b30

00018600 <compare_set>:
{
   18600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18604:	b085      	sub	sp, #20
   18606:	4616      	mov	r6, r2
   18608:	4698      	mov	r8, r3
   1860a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1860c:	f7ff ff44 	bl	18498 <compare_int_lock>
   18610:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   18612:	f7ff ffd3 	bl	185bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   18616:	42b0      	cmp	r0, r6
   18618:	eb71 0308 	sbcs.w	r3, r1, r8
   1861c:	d278      	bcs.n	18710 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   1861e:	4b46      	ldr	r3, [pc, #280]	; (18738 <compare_set+0x138>)
   18620:	1a30      	subs	r0, r6, r0
   18622:	eb68 0101 	sbc.w	r1, r8, r1
   18626:	4298      	cmp	r0, r3
   18628:	f171 0300 	sbcs.w	r3, r1, #0
   1862c:	f080 8081 	bcs.w	18732 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   18630:	4b42      	ldr	r3, [pc, #264]	; (1873c <compare_set+0x13c>)
   18632:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   18636:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1863a:	45d8      	cmp	r8, fp
   1863c:	bf08      	it	eq
   1863e:	4556      	cmpeq	r6, sl
   18640:	d051      	beq.n	186e6 <compare_set+0xe6>
   18642:	ea4f 0985 	mov.w	r9, r5, lsl #2
   18646:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1864a:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1864e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   18652:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18654:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18658:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1865c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1865e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   18662:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18666:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   18668:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1866c:	4b34      	ldr	r3, [pc, #208]	; (18740 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1866e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   18672:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   18674:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18678:	1a40      	subs	r0, r0, r1
   1867a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1867e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   18682:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   18684:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   18688:	d107      	bne.n	1869a <compare_set+0x9a>
   1868a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1868e:	2013      	movs	r0, #19
   18690:	f00a fca5 	bl	22fde <z_impl_k_busy_wait>
   18694:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   18698:	4b29      	ldr	r3, [pc, #164]	; (18740 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1869a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1869e:	eba4 000c 	sub.w	r0, r4, ip
   186a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   186a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   186aa:	bf88      	it	hi
   186ac:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   186ae:	2000      	movs	r0, #0
   186b0:	6038      	str	r0, [r7, #0]
   186b2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   186b4:	9801      	ldr	r0, [sp, #4]
   186b6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   186ba:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   186be:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   186c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   186c6:	4281      	cmp	r1, r0
   186c8:	d006      	beq.n	186d8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   186ca:	1a20      	subs	r0, r4, r0
   186cc:	3802      	subs	r0, #2
   186ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   186d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   186d6:	d819      	bhi.n	1870c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   186d8:	1aa4      	subs	r4, r4, r2
   186da:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   186de:	eb14 0a06 	adds.w	sl, r4, r6
   186e2:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   186e6:	4915      	ldr	r1, [pc, #84]	; (1873c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   186e8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   186ea:	012b      	lsls	r3, r5, #4
   186ec:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   186f0:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   186f4:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   186f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   186f8:	6053      	str	r3, [r2, #4]
	return ret;
   186fa:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   186fc:	4628      	mov	r0, r5
   186fe:	9900      	ldr	r1, [sp, #0]
   18700:	f7ff ff2e 	bl	18560 <compare_int_unlock>
}
   18704:	4620      	mov	r0, r4
   18706:	b005      	add	sp, #20
   18708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1870c:	4620      	mov	r0, r4
   1870e:	e7b1      	b.n	18674 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   18710:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18712:	4a0c      	ldr	r2, [pc, #48]	; (18744 <compare_set+0x144>)
   18714:	f3bf 8f5b 	dmb	ish
   18718:	40ab      	lsls	r3, r5
   1871a:	e852 1f00 	ldrex	r1, [r2]
   1871e:	4319      	orrs	r1, r3
   18720:	e842 1000 	strex	r0, r1, [r2]
   18724:	2800      	cmp	r0, #0
   18726:	d1f8      	bne.n	1871a <compare_set+0x11a>
   18728:	f3bf 8f5b 	dmb	ish
   1872c:	46b2      	mov	sl, r6
   1872e:	46c3      	mov	fp, r8
   18730:	e7d9      	b.n	186e6 <compare_set+0xe6>
			return -EINVAL;
   18732:	f06f 0415 	mvn.w	r4, #21
   18736:	e7e1      	b.n	186fc <compare_set+0xfc>
   18738:	01000001 	.word	0x01000001
   1873c:	20001b38 	.word	0x20001b38
   18740:	40011000 	.word	0x40011000
   18744:	200026f4 	.word	0x200026f4

00018748 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18748:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1874a:	4b19      	ldr	r3, [pc, #100]	; (187b0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1874c:	4d19      	ldr	r5, [pc, #100]	; (187b4 <sys_clock_driver_init+0x6c>)
   1874e:	2400      	movs	r4, #0
   18750:	f04f 30ff 	mov.w	r0, #4294967295
   18754:	f04f 31ff 	mov.w	r1, #4294967295
   18758:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1875c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18764:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18768:	4b13      	ldr	r3, [pc, #76]	; (187b8 <sys_clock_driver_init+0x70>)
   1876a:	2602      	movs	r6, #2
   1876c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18770:	2101      	movs	r1, #1
   18772:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   18776:	2011      	movs	r0, #17
   18778:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1877c:	4622      	mov	r2, r4
   1877e:	f7fa fdcb 	bl	13318 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18782:	2011      	movs	r0, #17
   18784:	f7fa fd96 	bl	132b4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18788:	4a0c      	ldr	r2, [pc, #48]	; (187bc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1878a:	2301      	movs	r3, #1
   1878c:	60ab      	str	r3, [r5, #8]
   1878e:	602b      	str	r3, [r5, #0]
   18790:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   18792:	4b0b      	ldr	r3, [pc, #44]	; (187c0 <sys_clock_driver_init+0x78>)
   18794:	4a0b      	ldr	r2, [pc, #44]	; (187c4 <sys_clock_driver_init+0x7c>)
   18796:	9300      	str	r3, [sp, #0]
   18798:	9401      	str	r4, [sp, #4]
   1879a:	2300      	movs	r3, #0
   1879c:	4620      	mov	r0, r4
   1879e:	f7ff ff2f 	bl	18600 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   187a2:	4630      	mov	r0, r6
   187a4:	f7ff f844 	bl	17830 <z_nrf_clock_control_lf_on>

	return 0;
}
   187a8:	4620      	mov	r0, r4
   187aa:	b002      	add	sp, #8
   187ac:	bd70      	pop	{r4, r5, r6, pc}
   187ae:	bf00      	nop
   187b0:	20001b38 	.word	0x20001b38
   187b4:	40011000 	.word	0x40011000
   187b8:	e000e100 	.word	0xe000e100
   187bc:	200026f8 	.word	0x200026f8
   187c0:	000184e9 	.word	0x000184e9
   187c4:	007fffff 	.word	0x007fffff

000187c8 <rtc_nrf_isr>:
{
   187c8:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   187cc:	4c2c      	ldr	r4, [pc, #176]	; (18880 <rtc_nrf_isr+0xb8>)
   187ce:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   187d2:	0799      	lsls	r1, r3, #30
   187d4:	d50b      	bpl.n	187ee <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   187d6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   187da:	b143      	cbz	r3, 187ee <rtc_nrf_isr+0x26>
		overflow_cnt++;
   187dc:	4a29      	ldr	r2, [pc, #164]	; (18884 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   187de:	2300      	movs	r3, #0
   187e0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   187e4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   187e8:	6813      	ldr	r3, [r2, #0]
   187ea:	3301      	adds	r3, #1
   187ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   187ee:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   187f2:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   187f4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   187f8:	03d2      	lsls	r2, r2, #15
   187fa:	d52d      	bpl.n	18858 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   187fc:	f3bf 8f5b 	dmb	ish
   18800:	4a21      	ldr	r2, [pc, #132]	; (18888 <rtc_nrf_isr+0xc0>)
   18802:	e852 1f00 	ldrex	r1, [r2]
   18806:	f021 0001 	bic.w	r0, r1, #1
   1880a:	e842 0500 	strex	r5, r0, [r2]
   1880e:	2d00      	cmp	r5, #0
   18810:	d1f7      	bne.n	18802 <rtc_nrf_isr+0x3a>
   18812:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18816:	b911      	cbnz	r1, 1881e <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18818:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   1881c:	b1e2      	cbz	r2, 18858 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1881e:	2500      	movs	r5, #0
   18820:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   18824:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18828:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1882c:	f7ff fec6 	bl	185bc <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18830:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18834:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   18836:	4b15      	ldr	r3, [pc, #84]	; (1888c <rtc_nrf_isr+0xc4>)
   18838:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1883c:	42b0      	cmp	r0, r6
   1883e:	41b9      	sbcs	r1, r7
   18840:	d20f      	bcs.n	18862 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   18842:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18844:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   18848:	b141      	cbz	r1, 1885c <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   1884a:	f8cd 8000 	str.w	r8, [sp]
   1884e:	4632      	mov	r2, r6
   18850:	463b      	mov	r3, r7
   18852:	2000      	movs	r0, #0
   18854:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18856:	e001      	b.n	1885c <rtc_nrf_isr+0x94>
   18858:	f383 8810 	msr	PRIMASK, r3
}
   1885c:	b002      	add	sp, #8
   1885e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18862:	f04f 3aff 	mov.w	sl, #4294967295
   18866:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   1886a:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1886e:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   18872:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   18874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18878:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1887c:	e7e2      	b.n	18844 <rtc_nrf_isr+0x7c>
   1887e:	bf00      	nop
   18880:	40011000 	.word	0x40011000
   18884:	200026fc 	.word	0x200026fc
   18888:	200026f4 	.word	0x200026f4
   1888c:	20001b38 	.word	0x20001b38

00018890 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18890:	1c43      	adds	r3, r0, #1
{
   18892:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18894:	d021      	beq.n	188da <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18896:	2801      	cmp	r0, #1
   18898:	dd21      	ble.n	188de <sys_clock_set_timeout+0x4e>
   1889a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1889e:	da20      	bge.n	188e2 <sys_clock_set_timeout+0x52>
   188a0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   188a2:	f7ff fe8b 	bl	185bc <z_nrf_rtc_timer_read>
   188a6:	4b10      	ldr	r3, [pc, #64]	; (188e8 <sys_clock_set_timeout+0x58>)
   188a8:	e9d3 1300 	ldrd	r1, r3, [r3]
   188ac:	1a40      	subs	r0, r0, r1
		ticks = 0;
   188ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   188b2:	bf28      	it	cs
   188b4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   188b6:	3001      	adds	r0, #1
   188b8:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   188ba:	480c      	ldr	r0, [pc, #48]	; (188ec <sys_clock_set_timeout+0x5c>)
   188bc:	4282      	cmp	r2, r0
   188be:	bf28      	it	cs
   188c0:	4602      	movcs	r2, r0
   188c2:	1852      	adds	r2, r2, r1
   188c4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   188c8:	4909      	ldr	r1, [pc, #36]	; (188f0 <sys_clock_set_timeout+0x60>)
   188ca:	9001      	str	r0, [sp, #4]
   188cc:	9100      	str	r1, [sp, #0]
   188ce:	f143 0300 	adc.w	r3, r3, #0
   188d2:	f7ff fe95 	bl	18600 <compare_set>
}
   188d6:	b002      	add	sp, #8
   188d8:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   188da:	4804      	ldr	r0, [pc, #16]	; (188ec <sys_clock_set_timeout+0x5c>)
   188dc:	e7e0      	b.n	188a0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   188de:	2400      	movs	r4, #0
   188e0:	e7df      	b.n	188a2 <sys_clock_set_timeout+0x12>
   188e2:	4c02      	ldr	r4, [pc, #8]	; (188ec <sys_clock_set_timeout+0x5c>)
   188e4:	e7dd      	b.n	188a2 <sys_clock_set_timeout+0x12>
   188e6:	bf00      	nop
   188e8:	20001b48 	.word	0x20001b48
   188ec:	007fffff 	.word	0x007fffff
   188f0:	000184e9 	.word	0x000184e9

000188f4 <sys_clock_elapsed>:
{
   188f4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   188f6:	f7ff fe61 	bl	185bc <z_nrf_rtc_timer_read>
   188fa:	4b02      	ldr	r3, [pc, #8]	; (18904 <sys_clock_elapsed+0x10>)
   188fc:	681b      	ldr	r3, [r3, #0]
}
   188fe:	1ac0      	subs	r0, r0, r3
   18900:	bd08      	pop	{r3, pc}
   18902:	bf00      	nop
   18904:	20001b48 	.word	0x20001b48

00018908 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   18908:	4602      	mov	r2, r0
   1890a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1890c:	4801      	ldr	r0, [pc, #4]	; (18914 <multithreading_lock_acquire+0xc>)
   1890e:	f002 b8c3 	b.w	1aa98 <z_impl_k_mutex_lock>
   18912:	bf00      	nop
   18914:	20000a1c 	.word	0x20000a1c

00018918 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   18918:	4801      	ldr	r0, [pc, #4]	; (18920 <multithreading_lock_release+0x8>)
   1891a:	f002 b935 	b.w	1ab88 <z_impl_k_mutex_unlock>
   1891e:	bf00      	nop
   18920:	20000a1c 	.word	0x20000a1c

00018924 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18924:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18926:	4804      	ldr	r0, [pc, #16]	; (18938 <hci_driver_init+0x14>)
   18928:	f7fb fdae 	bl	14488 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1892c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   18930:	4802      	ldr	r0, [pc, #8]	; (1893c <hci_driver_init+0x18>)
   18932:	f7ec b9df 	b.w	4cf4 <sdc_init>
   18936:	bf00      	nop
   18938:	000240ac 	.word	0x000240ac
   1893c:	00022457 	.word	0x00022457

00018940 <hci_driver_open>:
{
   18940:	b570      	push	{r4, r5, r6, lr}
   18942:	b088      	sub	sp, #32
		hci_ecdh_init();
   18944:	f000 fcd6 	bl	192f4 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   18948:	a803      	add	r0, sp, #12
   1894a:	f7ec f941 	bl	4bd0 <sdc_build_revision_get>
			err = sdc_support_adv();
   1894e:	f7ec fa4f 	bl	4df0 <sdc_support_adv>
			if (err) {
   18952:	b118      	cbz	r0, 1895c <hci_driver_open+0x1c>
				return -ENOTSUP;
   18954:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   18958:	b008      	add	sp, #32
   1895a:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_peripheral();
   1895c:	f7ec fa78 	bl	4e50 <sdc_support_peripheral>
		if (err) {
   18960:	2800      	cmp	r0, #0
   18962:	d1f7      	bne.n	18954 <hci_driver_open+0x14>
		err = sdc_support_dle();
   18964:	f7ec fa54 	bl	4e10 <sdc_support_dle>
		if (err) {
   18968:	2800      	cmp	r0, #0
   1896a:	d1f3      	bne.n	18954 <hci_driver_open+0x14>
		err = sdc_support_le_2m_phy();
   1896c:	f7ec fa60 	bl	4e30 <sdc_support_le_2m_phy>
		if (err) {
   18970:	4605      	mov	r5, r0
   18972:	2800      	cmp	r0, #0
   18974:	d1ee      	bne.n	18954 <hci_driver_open+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18976:	466c      	mov	r4, sp
   18978:	4622      	mov	r2, r4
   1897a:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1897c:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18980:	f7ec f934 	bl	4bec <sdc_cfg_set>
	if (required_memory < 0) {
   18984:	2800      	cmp	r0, #0
   18986:	dbe7      	blt.n	18958 <hci_driver_open+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   18988:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1898a:	4622      	mov	r2, r4
   1898c:	2102      	movs	r1, #2
   1898e:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   18990:	f88d 6000 	strb.w	r6, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18994:	f7ec f92a 	bl	4bec <sdc_cfg_set>
	if (required_memory < 0) {
   18998:	2800      	cmp	r0, #0
   1899a:	dbdd      	blt.n	18958 <hci_driver_open+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1899c:	4b2d      	ldr	r3, [pc, #180]	; (18a54 <hci_driver_open+0x114>)
   1899e:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189a0:	4622      	mov	r2, r4
   189a2:	2103      	movs	r1, #3
   189a4:	4628      	mov	r0, r5
   189a6:	f7ec f921 	bl	4bec <sdc_cfg_set>
	if (required_memory < 0) {
   189aa:	2800      	cmp	r0, #0
   189ac:	dbd4      	blt.n	18958 <hci_driver_open+0x18>
	cfg.event_length.event_length_us =
   189ae:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189b2:	4622      	mov	r2, r4
   189b4:	2104      	movs	r1, #4
   189b6:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   189b8:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189ba:	f7ec f917 	bl	4bec <sdc_cfg_set>
	if (required_memory < 0) {
   189be:	2800      	cmp	r0, #0
   189c0:	dbca      	blt.n	18958 <hci_driver_open+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189c2:	4622      	mov	r2, r4
   189c4:	2105      	movs	r1, #5
   189c6:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   189c8:	f88d 6000 	strb.w	r6, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189cc:	f7ec f90e 	bl	4bec <sdc_cfg_set>
	if (required_memory < 0) {
   189d0:	2800      	cmp	r0, #0
   189d2:	dbc1      	blt.n	18958 <hci_driver_open+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   189d4:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189d6:	4622      	mov	r2, r4
   189d8:	2107      	movs	r1, #7
   189da:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   189dc:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   189e0:	f7ec f904 	bl	4bec <sdc_cfg_set>
		if (required_memory < 0) {
   189e4:	2800      	cmp	r0, #0
   189e6:	dbb7      	blt.n	18958 <hci_driver_open+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   189e8:	f5b0 6fb0 	cmp.w	r0, #1408	; 0x580
   189ec:	dd08      	ble.n	18a00 <hci_driver_open+0xc0>
		k_panic();
   189ee:	4040      	eors	r0, r0
   189f0:	f380 8811 	msr	BASEPRI, r0
   189f4:	f04f 0004 	mov.w	r0, #4
   189f8:	df02      	svc	2
		return -ENOMEM;
   189fa:	f06f 000b 	mvn.w	r0, #11
   189fe:	e7ab      	b.n	18958 <hci_driver_open+0x18>
   18a00:	4815      	ldr	r0, [pc, #84]	; (18a58 <hci_driver_open+0x118>)
   18a02:	f009 fecb 	bl	2279c <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   18a06:	b308      	cbz	r0, 18a4c <hci_driver_open+0x10c>
	sdc_rand_source_t rand_functions = {
   18a08:	4b14      	ldr	r3, [pc, #80]	; (18a5c <hci_driver_open+0x11c>)
   18a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   18a12:	4620      	mov	r0, r4
   18a14:	f7ec fa6e 	bl	4ef4 <sdc_rand_source_register>
	if (err) {
   18a18:	b9a8      	cbnz	r0, 18a46 <hci_driver_open+0x106>
	k_work_init(&receive_work, receive_work_handler);
   18a1a:	4911      	ldr	r1, [pc, #68]	; (18a60 <hci_driver_open+0x120>)
   18a1c:	4811      	ldr	r0, [pc, #68]	; (18a64 <hci_driver_open+0x124>)
   18a1e:	f00a f8fe 	bl	22c1e <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   18a22:	f04f 30ff 	mov.w	r0, #4294967295
   18a26:	f04f 31ff 	mov.w	r1, #4294967295
   18a2a:	f7ff ff6d 	bl	18908 <multithreading_lock_acquire>
	if (!err) {
   18a2e:	4604      	mov	r4, r0
   18a30:	b930      	cbnz	r0, 18a40 <hci_driver_open+0x100>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   18a32:	490d      	ldr	r1, [pc, #52]	; (18a68 <hci_driver_open+0x128>)
   18a34:	480d      	ldr	r0, [pc, #52]	; (18a6c <hci_driver_open+0x12c>)
   18a36:	f7ec f935 	bl	4ca4 <sdc_enable>
   18a3a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18a3c:	f7ff ff6c 	bl	18918 <multithreading_lock_release>
	if (err < 0) {
   18a40:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   18a44:	e788      	b.n	18958 <hci_driver_open+0x18>
		return -EINVAL;
   18a46:	f06f 0015 	mvn.w	r0, #21
   18a4a:	e785      	b.n	18958 <hci_driver_open+0x18>
		return -ENODEV;
   18a4c:	f06f 0012 	mvn.w	r0, #18
   18a50:	e782      	b.n	18958 <hci_driver_open+0x18>
   18a52:	bf00      	nop
   18a54:	02031b1b 	.word	0x02031b1b
   18a58:	0002354c 	.word	0x0002354c
   18a5c:	00023838 	.word	0x00023838
   18a60:	000224d5 	.word	0x000224d5
   18a64:	20002700 	.word	0x20002700
   18a68:	20003389 	.word	0x20003389
   18a6c:	00018ac1 	.word	0x00018ac1

00018a70 <rand_prio_low_vector_get>:
{
   18a70:	b538      	push	{r3, r4, r5, lr}
   18a72:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   18a74:	4807      	ldr	r0, [pc, #28]	; (18a94 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   18a76:	6883      	ldr	r3, [r0, #8]
   18a78:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18a7a:	460a      	mov	r2, r1
   18a7c:	b135      	cbz	r5, 18a8c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   18a7e:	2300      	movs	r3, #0
   18a80:	4621      	mov	r1, r4
   18a82:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   18a84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   18a88:	b2c0      	uxtb	r0, r0
   18a8a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18a8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18a90:	e7f8      	b.n	18a84 <rand_prio_low_vector_get+0x14>
   18a92:	bf00      	nop
   18a94:	0002354c 	.word	0x0002354c

00018a98 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   18a98:	4901      	ldr	r1, [pc, #4]	; (18aa0 <receive_signal_raise+0x8>)
   18a9a:	4802      	ldr	r0, [pc, #8]	; (18aa4 <receive_signal_raise+0xc>)
   18a9c:	f00a b8d8 	b.w	22c50 <k_work_submit_to_queue>
   18aa0:	20002700 	.word	0x20002700
   18aa4:	20001bd0 	.word	0x20001bd0

00018aa8 <rand_prio_low_vector_get_blocking>:
{
   18aa8:	b410      	push	{r4}
   18aaa:	4603      	mov	r3, r0
   18aac:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   18aae:	4803      	ldr	r0, [pc, #12]	; (18abc <rand_prio_low_vector_get_blocking+0x14>)
   18ab0:	6881      	ldr	r1, [r0, #8]
   18ab2:	680c      	ldr	r4, [r1, #0]
   18ab4:	4619      	mov	r1, r3
   18ab6:	4623      	mov	r3, r4
}
   18ab8:	bc10      	pop	{r4}
   18aba:	4718      	bx	r3
   18abc:	0002354c 	.word	0x0002354c

00018ac0 <hci_driver_receive_process>:
{
   18ac0:	b570      	push	{r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18ac2:	f04f 30ff 	mov.w	r0, #4294967295
   18ac6:	f04f 31ff 	mov.w	r1, #4294967295
   18aca:	f7ff ff1d 	bl	18908 <multithreading_lock_acquire>
	if (!errcode) {
   18ace:	b338      	cbz	r0, 18b20 <hci_driver_receive_process+0x60>
		return false;
   18ad0:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18ad2:	f04f 30ff 	mov.w	r0, #4294967295
   18ad6:	f04f 31ff 	mov.w	r1, #4294967295
   18ada:	f7ff ff15 	bl	18908 <multithreading_lock_acquire>
	if (!errcode) {
   18ade:	2800      	cmp	r0, #0
   18ae0:	d14a      	bne.n	18b78 <hci_driver_receive_process+0xb8>
		errcode = sdc_hci_data_get(p_hci_buffer);
   18ae2:	4d27      	ldr	r5, [pc, #156]	; (18b80 <hci_driver_receive_process+0xc0>)
   18ae4:	4628      	mov	r0, r5
   18ae6:	f7f4 fcef 	bl	d4c8 <sdc_hci_data_get>
   18aea:	4606      	mov	r6, r0
		MULTITHREADING_LOCK_RELEASE();
   18aec:	f7ff ff14 	bl	18918 <multithreading_lock_release>
	if (errcode) {
   18af0:	2e00      	cmp	r6, #0
   18af2:	d141      	bne.n	18b78 <hci_driver_receive_process+0xb8>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18af4:	f04f 32ff 	mov.w	r2, #4294967295
   18af8:	f04f 33ff 	mov.w	r3, #4294967295
   18afc:	2003      	movs	r0, #3
   18afe:	f7fb f815 	bl	13b2c <bt_buf_get_rx>
	if (!data_buf) {
   18b02:	4604      	mov	r4, r0
   18b04:	b140      	cbz	r0, 18b18 <hci_driver_receive_process+0x58>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   18b06:	886a      	ldrh	r2, [r5, #2]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18b08:	4629      	mov	r1, r5
   18b0a:	3204      	adds	r2, #4
   18b0c:	3008      	adds	r0, #8
   18b0e:	f009 fa8d 	bl	2202c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   18b12:	4620      	mov	r0, r4
   18b14:	f7fb fc8e 	bl	14434 <bt_recv>
}
   18b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   18b1c:	f7ff bfbc 	b.w	18a98 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   18b20:	4d17      	ldr	r5, [pc, #92]	; (18b80 <hci_driver_receive_process+0xc0>)
   18b22:	4628      	mov	r0, r5
   18b24:	f000 faea 	bl	190fc <hci_internal_evt_get>
   18b28:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18b2a:	f7ff fef5 	bl	18918 <multithreading_lock_release>
	if (errcode) {
   18b2e:	2c00      	cmp	r4, #0
   18b30:	d1ce      	bne.n	18ad0 <hci_driver_receive_process+0x10>
	switch (hdr->evt) {
   18b32:	7828      	ldrb	r0, [r5, #0]
   18b34:	283e      	cmp	r0, #62	; 0x3e
   18b36:	d015      	beq.n	18b64 <hci_driver_receive_process+0xa4>
   18b38:	28ff      	cmp	r0, #255	; 0xff
   18b3a:	d01a      	beq.n	18b72 <hci_driver_receive_process+0xb2>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18b3c:	f04f 32ff 	mov.w	r2, #4294967295
   18b40:	f04f 33ff 	mov.w	r3, #4294967295
   18b44:	4621      	mov	r1, r4
   18b46:	f7fb f81b 	bl	13b80 <bt_buf_get_evt>
	if (!evt_buf) {
   18b4a:	4604      	mov	r4, r0
   18b4c:	b140      	cbz	r0, 18b60 <hci_driver_receive_process+0xa0>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   18b4e:	786a      	ldrb	r2, [r5, #1]
   18b50:	490b      	ldr	r1, [pc, #44]	; (18b80 <hci_driver_receive_process+0xc0>)
   18b52:	3202      	adds	r2, #2
   18b54:	3008      	adds	r0, #8
   18b56:	f009 fa69 	bl	2202c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   18b5a:	4620      	mov	r0, r4
   18b5c:	f7fb fc6a 	bl	14434 <bt_recv>
	return true;
   18b60:	2401      	movs	r4, #1
   18b62:	e7b6      	b.n	18ad2 <hci_driver_receive_process+0x12>
		switch (me->subevent) {
   18b64:	78ab      	ldrb	r3, [r5, #2]
   18b66:	2b02      	cmp	r3, #2
		switch (subevent) {
   18b68:	d1e8      	bne.n	18b3c <hci_driver_receive_process+0x7c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18b6a:	2200      	movs	r2, #0
   18b6c:	2300      	movs	r3, #0
		switch (subevent) {
   18b6e:	2401      	movs	r4, #1
   18b70:	e7e8      	b.n	18b44 <hci_driver_receive_process+0x84>
   18b72:	78ab      	ldrb	r3, [r5, #2]
   18b74:	2b80      	cmp	r3, #128	; 0x80
   18b76:	e7f7      	b.n	18b68 <hci_driver_receive_process+0xa8>
	if (received_evt || received_data) {
   18b78:	2c00      	cmp	r4, #0
   18b7a:	d1cd      	bne.n	18b18 <hci_driver_receive_process+0x58>
}
   18b7c:	bd70      	pop	{r4, r5, r6, pc}
   18b7e:	bf00      	nop
   18b80:	20003343 	.word	0x20003343

00018b84 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   18b84:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   18b86:	4cd6      	ldr	r4, [pc, #856]	; (18ee0 <hci_internal_cmd_put+0x35c>)
   18b88:	7823      	ldrb	r3, [r4, #0]
   18b8a:	2b00      	cmp	r3, #0
   18b8c:	f040 82b1 	bne.w	190f2 <hci_internal_cmd_put+0x56e>
	return ((uint16_t)src[1] << 8) | src[0];
   18b90:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   18b92:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   18b96:	b22b      	sxth	r3, r5
   18b98:	ea4f 2295 	mov.w	r2, r5, lsr #10
   18b9c:	d209      	bcs.n	18bb2 <hci_internal_cmd_put+0x2e>
   18b9e:	b15a      	cbz	r2, 18bb8 <hci_internal_cmd_put+0x34>
   18ba0:	3a01      	subs	r2, #1
   18ba2:	2a07      	cmp	r2, #7
   18ba4:	d808      	bhi.n	18bb8 <hci_internal_cmd_put+0x34>
   18ba6:	e8df f002 	tbb	[pc, r2]
   18baa:	0709      	.short	0x0709
   18bac:	07075925 	.word	0x07075925
   18bb0:	d107      	.short	0xd107
   18bb2:	2a3f      	cmp	r2, #63	; 0x3f
   18bb4:	f000 822b 	beq.w	1900e <hci_internal_cmd_put+0x48a>
	switch (opcode)	{
   18bb8:	2001      	movs	r0, #1
   18bba:	e00e      	b.n	18bda <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   18bbc:	f240 4206 	movw	r2, #1030	; 0x406
   18bc0:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18bc2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18bc6:	d006      	beq.n	18bd6 <hci_internal_cmd_put+0x52>
   18bc8:	f240 421d 	movw	r2, #1053	; 0x41d
   18bcc:	4293      	cmp	r3, r2
   18bce:	d1f3      	bne.n	18bb8 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   18bd0:	f7f4 fdaf 	bl	d732 <sdc_hci_cmd_lc_read_remote_version_information>
   18bd4:	e001      	b.n	18bda <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   18bd6:	f7f4 fdaa 	bl	d72e <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   18bda:	230f      	movs	r3, #15
   18bdc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   18bde:	2304      	movs	r3, #4
   18be0:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18be2:	2301      	movs	r3, #1
	evt_data->status = status_code;
   18be4:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   18be6:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   18be8:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   18bec:	2301      	movs	r3, #1
   18bee:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18bf0:	2000      	movs	r0, #0
}
   18bf2:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   18bf4:	f640 4263 	movw	r2, #3171	; 0xc63
   18bf8:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18bfa:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18bfe:	d025      	beq.n	18c4c <hci_internal_cmd_put+0xc8>
   18c00:	dc0f      	bgt.n	18c22 <hci_internal_cmd_put+0x9e>
   18c02:	f640 4203 	movw	r2, #3075	; 0xc03
   18c06:	4293      	cmp	r3, r2
   18c08:	d018      	beq.n	18c3c <hci_internal_cmd_put+0xb8>
   18c0a:	f640 422d 	movw	r2, #3117	; 0xc2d
   18c0e:	4293      	cmp	r3, r2
   18c10:	d017      	beq.n	18c42 <hci_internal_cmd_put+0xbe>
   18c12:	f640 4201 	movw	r2, #3073	; 0xc01
   18c16:	4293      	cmp	r3, r2
   18c18:	d1ce      	bne.n	18bb8 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   18c1a:	f7f4 fc7e 	bl	d51a <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   18c1e:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18c20:	e091      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   18c22:	f640 427b 	movw	r2, #3195	; 0xc7b
   18c26:	4293      	cmp	r3, r2
   18c28:	d013      	beq.n	18c52 <hci_internal_cmd_put+0xce>
   18c2a:	f640 427c 	movw	r2, #3196	; 0xc7c
   18c2e:	4293      	cmp	r3, r2
   18c30:	d1c2      	bne.n	18bb8 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   18c32:	49ac      	ldr	r1, [pc, #688]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18c34:	f7f4 fc7b 	bl	d52e <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   18c38:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   18c3a:	e084      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_reset();
   18c3c:	f7ec fa4e 	bl	50dc <sdc_hci_cmd_cb_reset>
   18c40:	e7ed      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   18c42:	49a8      	ldr	r1, [pc, #672]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18c44:	f7f4 fc67 	bl	d516 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   18c48:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   18c4a:	e07c      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   18c4c:	f7f4 fc6a 	bl	d524 <sdc_hci_cmd_cb_set_event_mask_page_2>
   18c50:	e7e5      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   18c52:	49a4      	ldr	r1, [pc, #656]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18c54:	f7f4 fc5d 	bl	d512 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   18c58:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   18c5a:	e074      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   18c5c:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   18c60:	3b01      	subs	r3, #1
   18c62:	2b08      	cmp	r3, #8
   18c64:	d8a8      	bhi.n	18bb8 <hci_internal_cmd_put+0x34>
   18c66:	a201      	add	r2, pc, #4	; (adr r2, 18c6c <hci_internal_cmd_put+0xe8>)
   18c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18c6c:	00018c91 	.word	0x00018c91
   18c70:	00018c9b 	.word	0x00018c9b
   18c74:	00018d17 	.word	0x00018d17
   18c78:	00018bb9 	.word	0x00018bb9
   18c7c:	00018bb9 	.word	0x00018bb9
   18c80:	00018bb9 	.word	0x00018bb9
   18c84:	00018bb9 	.word	0x00018bb9
   18c88:	00018bb9 	.word	0x00018bb9
   18c8c:	00018d3f 	.word	0x00018d3f
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   18c90:	4894      	ldr	r0, [pc, #592]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18c92:	f7f4 fd01 	bl	d698 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   18c96:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18c98:	e055      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   18c9a:	4892      	ldr	r0, [pc, #584]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18c9c:	222f      	movs	r2, #47	; 0x2f
   18c9e:	2100      	movs	r1, #0
   18ca0:	f00a fb76 	bl	23390 <memset>
	cmds->hci_disconnect = 1;
   18ca4:	2320      	movs	r3, #32
   18ca6:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   18ca8:	2380      	movs	r3, #128	; 0x80
   18caa:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   18cac:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18cb0:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   18cb2:	2304      	movs	r3, #4
   18cb4:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   18cb6:	2328      	movs	r3, #40	; 0x28
   18cb8:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   18cba:	2302      	movs	r3, #2
   18cbc:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   18cbe:	2304      	movs	r3, #4
   18cc0:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   18cc2:	f06f 0308 	mvn.w	r3, #8
   18cc6:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   18cca:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   18cce:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   18cd2:	f06f 030c 	mvn.w	r3, #12
   18cd6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   18cda:	237e      	movs	r3, #126	; 0x7e
   18cdc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   18ce0:	2330      	movs	r3, #48	; 0x30
   18ce2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   18ce6:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18cea:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   18cee:	237f      	movs	r3, #127	; 0x7f
   18cf0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   18cf4:	f06f 0301 	mvn.w	r3, #1
   18cf8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   18cfc:	2301      	movs	r3, #1
   18cfe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   18d02:	2380      	movs	r3, #128	; 0x80
   18d04:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   18d08:	2304      	movs	r3, #4
   18d0a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   18d0e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   18d12:	2344      	movs	r3, #68	; 0x44
   18d14:	e13d      	b.n	18f92 <hci_internal_cmd_put+0x40e>
	memset(features, 0, sizeof(*features));
   18d16:	4b73      	ldr	r3, [pc, #460]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18d18:	2000      	movs	r0, #0
   18d1a:	f8c4 0007 	str.w	r0, [r4, #7]
   18d1e:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   18d20:	7ae3      	ldrb	r3, [r4, #11]
   18d22:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   18d26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   18d2a:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   18d2c:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18d2e:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   18d30:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18d32:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18d34:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   18d36:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   18d38:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   18d3a:	71a0      	strb	r0, [r4, #6]
}
   18d3c:	e756      	b.n	18bec <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   18d3e:	4869      	ldr	r0, [pc, #420]	; (18ee4 <hci_internal_cmd_put+0x360>)
   18d40:	f7f4 fca8 	bl	d694 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   18d44:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   18d46:	2801      	cmp	r0, #1
   18d48:	d1f1      	bne.n	18d2e <hci_internal_cmd_put+0x1aa>
   18d4a:	e746      	b.n	18bda <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   18d4c:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   18d50:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18d52:	3003      	adds	r0, #3
	switch (opcode)	{
   18d54:	2b5d      	cmp	r3, #93	; 0x5d
   18d56:	f63f af2f 	bhi.w	18bb8 <hci_internal_cmd_put+0x34>
   18d5a:	a201      	add	r2, pc, #4	; (adr r2, 18d60 <hci_internal_cmd_put+0x1dc>)
   18d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18d60:	00018ed9 	.word	0x00018ed9
   18d64:	00018ee9 	.word	0x00018ee9
   18d68:	00018ef1 	.word	0x00018ef1
   18d6c:	00018bb9 	.word	0x00018bb9
   18d70:	00018f15 	.word	0x00018f15
   18d74:	00018f1b 	.word	0x00018f1b
   18d78:	00018f21 	.word	0x00018f21
   18d7c:	00018f2b 	.word	0x00018f2b
   18d80:	00018f31 	.word	0x00018f31
   18d84:	00018f37 	.word	0x00018f37
   18d88:	00018bb9 	.word	0x00018bb9
   18d8c:	00018bb9 	.word	0x00018bb9
   18d90:	00018bb9 	.word	0x00018bb9
   18d94:	00018bb9 	.word	0x00018bb9
   18d98:	00018f3d 	.word	0x00018f3d
   18d9c:	00018f45 	.word	0x00018f45
   18da0:	00018f4b 	.word	0x00018f4b
   18da4:	00018f51 	.word	0x00018f51
   18da8:	00018bb9 	.word	0x00018bb9
   18dac:	00018bb9 	.word	0x00018bb9
   18db0:	00018f57 	.word	0x00018f57
   18db4:	00018f61 	.word	0x00018f61
   18db8:	00018f67 	.word	0x00018f67
   18dbc:	00018f71 	.word	0x00018f71
   18dc0:	00018bb9 	.word	0x00018bb9
   18dc4:	00018f79 	.word	0x00018f79
   18dc8:	00018f81 	.word	0x00018f81
   18dcc:	00018f89 	.word	0x00018f89
   18dd0:	00018bb9 	.word	0x00018bb9
   18dd4:	00018bb9 	.word	0x00018bb9
   18dd8:	00018bb9 	.word	0x00018bb9
   18ddc:	00018bb9 	.word	0x00018bb9
   18de0:	00018bb9 	.word	0x00018bb9
   18de4:	00018f97 	.word	0x00018f97
   18de8:	00018f9f 	.word	0x00018f9f
   18dec:	00018fa7 	.word	0x00018fa7
   18df0:	00018fad 	.word	0x00018fad
   18df4:	00018fb3 	.word	0x00018fb3
   18df8:	00018fbf 	.word	0x00018fbf
   18dfc:	00018fc5 	.word	0x00018fc5
   18e00:	00018fcb 	.word	0x00018fcb
   18e04:	00018fd1 	.word	0x00018fd1
   18e08:	00018bb9 	.word	0x00018bb9
   18e0c:	00018bb9 	.word	0x00018bb9
   18e10:	00018fd9 	.word	0x00018fd9
   18e14:	00018fdf 	.word	0x00018fdf
   18e18:	00018fe5 	.word	0x00018fe5
   18e1c:	00018fed 	.word	0x00018fed
   18e20:	00018ff5 	.word	0x00018ff5
   18e24:	00018ffb 	.word	0x00018ffb
   18e28:	00018bb9 	.word	0x00018bb9
   18e2c:	00018bb9 	.word	0x00018bb9
   18e30:	00018bb9 	.word	0x00018bb9
   18e34:	00018bb9 	.word	0x00018bb9
   18e38:	00018bb9 	.word	0x00018bb9
   18e3c:	00018bb9 	.word	0x00018bb9
   18e40:	00018bb9 	.word	0x00018bb9
   18e44:	00018bb9 	.word	0x00018bb9
   18e48:	00018bb9 	.word	0x00018bb9
   18e4c:	00018bb9 	.word	0x00018bb9
   18e50:	00018bb9 	.word	0x00018bb9
   18e54:	00018bb9 	.word	0x00018bb9
   18e58:	00018bb9 	.word	0x00018bb9
   18e5c:	00018bb9 	.word	0x00018bb9
   18e60:	00018bb9 	.word	0x00018bb9
   18e64:	00018bb9 	.word	0x00018bb9
   18e68:	00018bb9 	.word	0x00018bb9
   18e6c:	00018bb9 	.word	0x00018bb9
   18e70:	00018bb9 	.word	0x00018bb9
   18e74:	00018bb9 	.word	0x00018bb9
   18e78:	00018bb9 	.word	0x00018bb9
   18e7c:	00018bb9 	.word	0x00018bb9
   18e80:	00018bb9 	.word	0x00018bb9
   18e84:	00018bb9 	.word	0x00018bb9
   18e88:	00019001 	.word	0x00019001
   18e8c:	00018bb9 	.word	0x00018bb9
   18e90:	00018bb9 	.word	0x00018bb9
   18e94:	00019009 	.word	0x00019009
   18e98:	00018bb9 	.word	0x00018bb9
   18e9c:	00018bb9 	.word	0x00018bb9
   18ea0:	00018bb9 	.word	0x00018bb9
   18ea4:	00018bb9 	.word	0x00018bb9
   18ea8:	00018bb9 	.word	0x00018bb9
   18eac:	00018bb9 	.word	0x00018bb9
   18eb0:	00018bb9 	.word	0x00018bb9
   18eb4:	00018bb9 	.word	0x00018bb9
   18eb8:	00018bb9 	.word	0x00018bb9
   18ebc:	00018bb9 	.word	0x00018bb9
   18ec0:	00018bb9 	.word	0x00018bb9
   18ec4:	00018bb9 	.word	0x00018bb9
   18ec8:	00018bb9 	.word	0x00018bb9
   18ecc:	00018bb9 	.word	0x00018bb9
   18ed0:	00018bb9 	.word	0x00018bb9
   18ed4:	00018fb9 	.word	0x00018fb9
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   18ed8:	f7f4 fc18 	bl	d70c <sdc_hci_cmd_le_set_event_mask>
   18edc:	e69f      	b.n	18c1e <hci_internal_cmd_put+0x9a>
   18ede:	bf00      	nop
   18ee0:	20003909 	.word	0x20003909
   18ee4:	20003910 	.word	0x20003910
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   18ee8:	4883      	ldr	r0, [pc, #524]	; (190f8 <hci_internal_cmd_put+0x574>)
   18eea:	f7f4 fbed 	bl	d6c8 <sdc_hci_cmd_le_read_buffer_size>
   18eee:	e6ab      	b.n	18c48 <hci_internal_cmd_put+0xc4>
	memset(features, 0, sizeof(*features));
   18ef0:	4b81      	ldr	r3, [pc, #516]	; (190f8 <hci_internal_cmd_put+0x574>)
   18ef2:	2000      	movs	r0, #0
   18ef4:	f8c4 0007 	str.w	r0, [r4, #7]
   18ef8:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   18efa:	79e3      	ldrb	r3, [r4, #7]
   18efc:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   18f00:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   18f04:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   18f06:	7a23      	ldrb	r3, [r4, #8]
   18f08:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   18f0c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   18f10:	7223      	strb	r3, [r4, #8]
   18f12:	e70b      	b.n	18d2c <hci_internal_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   18f14:	f7f4 fc03 	bl	d71e <sdc_hci_cmd_le_set_random_address>
   18f18:	e681      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   18f1a:	f7f4 fbf1 	bl	d700 <sdc_hci_cmd_le_set_adv_params>
   18f1e:	e67e      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   18f20:	4875      	ldr	r0, [pc, #468]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f22:	f7f4 fbcf 	bl	d6c4 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   18f26:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   18f28:	e70d      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   18f2a:	f7f4 fbe5 	bl	d6f8 <sdc_hci_cmd_le_set_adv_data>
   18f2e:	e676      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   18f30:	f7f4 fbf9 	bl	d726 <sdc_hci_cmd_le_set_scan_response_data>
   18f34:	e673      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   18f36:	f7f4 fbe1 	bl	d6fc <sdc_hci_cmd_le_set_adv_enable>
   18f3a:	e670      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   18f3c:	486e      	ldr	r0, [pc, #440]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f3e:	f7f4 fbc7 	bl	d6d0 <sdc_hci_cmd_le_read_filter_accept_list_size>
   18f42:	e7f0      	b.n	18f26 <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   18f44:	f7f4 fbae 	bl	d6a4 <sdc_hci_cmd_le_clear_filter_accept_list>
   18f48:	e669      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   18f4a:	f7f4 fba7 	bl	d69c <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   18f4e:	e666      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   18f50:	f7f4 fbcc 	bl	d6ec <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   18f54:	e663      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   18f56:	4968      	ldr	r1, [pc, #416]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f58:	f7f4 fbb8 	bl	d6cc <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   18f5c:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   18f5e:	e6f2      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   18f60:	f7f4 fbbc 	bl	d6dc <sdc_hci_cmd_le_read_remote_features>
   18f64:	e639      	b.n	18bda <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   18f66:	4964      	ldr	r1, [pc, #400]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f68:	f7f4 fba0 	bl	d6ac <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   18f6c:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   18f6e:	e6ea      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   18f70:	4861      	ldr	r0, [pc, #388]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f72:	f7f4 fba5 	bl	d6c0 <sdc_hci_cmd_le_rand>
   18f76:	e68e      	b.n	18c96 <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   18f78:	495f      	ldr	r1, [pc, #380]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f7a:	f7f4 fb9d 	bl	d6b8 <sdc_hci_cmd_le_long_term_key_request_reply>
   18f7e:	e65b      	b.n	18c38 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   18f80:	495d      	ldr	r1, [pc, #372]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f82:	f7f4 fb95 	bl	d6b0 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   18f86:	e657      	b.n	18c38 <hci_internal_cmd_put+0xb4>
	*buf = states1;
   18f88:	238f      	movs	r3, #143	; 0x8f
   18f8a:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   18f8c:	23c0      	movs	r3, #192	; 0xc0
   18f8e:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   18f90:	230c      	movs	r3, #12
		return 0;
   18f92:	2000      	movs	r0, #0
   18f94:	e6cb      	b.n	18d2e <hci_internal_cmd_put+0x1aa>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   18f96:	4958      	ldr	r1, [pc, #352]	; (190f8 <hci_internal_cmd_put+0x574>)
   18f98:	f7f4 fbb4 	bl	d704 <sdc_hci_cmd_le_set_data_length>
   18f9c:	e64c      	b.n	18c38 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   18f9e:	4856      	ldr	r0, [pc, #344]	; (190f8 <hci_internal_cmd_put+0x574>)
   18fa0:	f7f4 fba0 	bl	d6e4 <sdc_hci_cmd_le_read_suggested_default_data_length>
   18fa4:	e658      	b.n	18c58 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   18fa6:	f7f4 fbc0 	bl	d72a <sdc_hci_cmd_le_write_suggested_default_data_length>
   18faa:	e638      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return hci_cmd_le_read_local_p256_public_key();
   18fac:	f000 f9cc 	bl	19348 <hci_cmd_le_read_local_p256_public_key>
   18fb0:	e613      	b.n	18bda <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   18fb2:	f009 fa9b 	bl	224ec <hci_cmd_le_generate_dhkey>
   18fb6:	e610      	b.n	18bda <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   18fb8:	f009 fa9b 	bl	224f2 <hci_cmd_le_generate_dhkey_v2>
   18fbc:	e62f      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   18fbe:	f7f4 fb6f 	bl	d6a0 <sdc_hci_cmd_le_add_device_to_resolving_list>
   18fc2:	e62c      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   18fc4:	f7f4 fb94 	bl	d6f0 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   18fc8:	e629      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_clear_resolving_list();
   18fca:	f7f4 fb6d 	bl	d6a8 <sdc_hci_cmd_le_clear_resolving_list>
   18fce:	e626      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   18fd0:	4849      	ldr	r0, [pc, #292]	; (190f8 <hci_internal_cmd_put+0x574>)
   18fd2:	f7f4 fb85 	bl	d6e0 <sdc_hci_cmd_le_read_resolving_list_size>
   18fd6:	e7a6      	b.n	18f26 <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   18fd8:	f7f4 fb8c 	bl	d6f4 <sdc_hci_cmd_le_set_address_resolution_enable>
   18fdc:	e61f      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   18fde:	f7f4 fba0 	bl	d722 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   18fe2:	e61c      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18fe4:	4844      	ldr	r0, [pc, #272]	; (190f8 <hci_internal_cmd_put+0x574>)
   18fe6:	f7f4 fb75 	bl	d6d4 <sdc_hci_cmd_le_read_max_data_length>
   18fea:	e654      	b.n	18c96 <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   18fec:	4942      	ldr	r1, [pc, #264]	; (190f8 <hci_internal_cmd_put+0x574>)
   18fee:	f7f4 fb73 	bl	d6d8 <sdc_hci_cmd_le_read_phy>
   18ff2:	e631      	b.n	18c58 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   18ff4:	f7f4 fb88 	bl	d708 <sdc_hci_cmd_le_set_default_phy>
   18ff8:	e611      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   18ffa:	f7f4 fb8c 	bl	d716 <sdc_hci_cmd_le_set_phy>
   18ffe:	e5ec      	b.n	18bda <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   19000:	483d      	ldr	r0, [pc, #244]	; (190f8 <hci_internal_cmd_put+0x574>)
   19002:	f7f4 fb71 	bl	d6e8 <sdc_hci_cmd_le_read_transmit_power>
   19006:	e617      	b.n	18c38 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   19008:	f7f4 fb87 	bl	d71a <sdc_hci_cmd_le_set_privacy_mode>
   1900c:	e607      	b.n	18c1e <hci_internal_cmd_put+0x9a>
	switch (opcode)	{
   1900e:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   19012:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19014:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   19018:	d820      	bhi.n	1905c <hci_internal_cmd_put+0x4d8>
   1901a:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1901e:	f43f adcb 	beq.w	18bb8 <hci_internal_cmd_put+0x34>
   19022:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   19026:	3b01      	subs	r3, #1
   19028:	2b09      	cmp	r3, #9
   1902a:	f63f adc5 	bhi.w	18bb8 <hci_internal_cmd_put+0x34>
   1902e:	a201      	add	r2, pc, #4	; (adr r2, 19034 <hci_internal_cmd_put+0x4b0>)
   19030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19034:	0001907d 	.word	0x0001907d
   19038:	00019087 	.word	0x00019087
   1903c:	00018bb9 	.word	0x00018bb9
   19040:	00018bb9 	.word	0x00018bb9
   19044:	00018bb9 	.word	0x00018bb9
   19048:	000190bb 	.word	0x000190bb
   1904c:	00018bb9 	.word	0x00018bb9
   19050:	00018bb9 	.word	0x00018bb9
   19054:	000190a7 	.word	0x000190a7
   19058:	000190b1 	.word	0x000190b1
   1905c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   19060:	b29b      	uxth	r3, r3
   19062:	2b05      	cmp	r3, #5
   19064:	f63f ada8 	bhi.w	18bb8 <hci_internal_cmd_put+0x34>
   19068:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1906c:	2b05      	cmp	r3, #5
   1906e:	f63f ada3 	bhi.w	18bb8 <hci_internal_cmd_put+0x34>
   19072:	e8df f003 	tbb	[pc, r3]
   19076:	2f25      	.short	0x2f25
   19078:	3b383532 	.word	0x3b383532
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1907c:	481e      	ldr	r0, [pc, #120]	; (190f8 <hci_internal_cmd_put+0x574>)
   1907e:	f7ec f841 	bl	5104 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   19082:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   19084:	e65f      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   19086:	2300      	movs	r3, #0
   19088:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_version_info = 1;
   1908c:	79e3      	ldrb	r3, [r4, #7]
   1908e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   19092:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   19096:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   19098:	7a23      	ldrb	r3, [r4, #8]
   1909a:	f023 0307 	bic.w	r3, r3, #7
   1909e:	f043 0307 	orr.w	r3, r3, #7
   190a2:	7223      	strb	r3, [r4, #8]
}
   190a4:	e635      	b.n	18d12 <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   190a6:	4814      	ldr	r0, [pc, #80]	; (190f8 <hci_internal_cmd_put+0x574>)
   190a8:	f7f4 faa3 	bl	d5f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   190ac:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   190ae:	e64a      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   190b0:	4811      	ldr	r0, [pc, #68]	; (190f8 <hci_internal_cmd_put+0x574>)
   190b2:	f7f4 fa51 	bl	d558 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   190b6:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   190b8:	e645      	b.n	18d46 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   190ba:	f7f4 fae9 	bl	d690 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   190be:	e5ae      	b.n	18c1e <hci_internal_cmd_put+0x9a>
	memset(cmds, 0, sizeof(*cmds));
   190c0:	2300      	movs	r3, #0
   190c2:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_supported_vs_commands = 1;
   190c6:	79e3      	ldrb	r3, [r4, #7]
   190c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   190cc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   190d0:	71e3      	strb	r3, [r4, #7]
}
   190d2:	e61e      	b.n	18d12 <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   190d4:	f7f4 fa39 	bl	d54a <sdc_hci_cmd_vs_llpm_mode_set>
   190d8:	e5a1      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   190da:	f7f4 fa32 	bl	d542 <sdc_hci_cmd_vs_conn_update>
   190de:	e59e      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   190e0:	f7f4 fa27 	bl	d532 <sdc_hci_cmd_vs_conn_event_extend>
   190e4:	e59b      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   190e6:	f7f4 fa32 	bl	d54e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   190ea:	e598      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   190ec:	f7f4 fa2b 	bl	d546 <sdc_hci_cmd_vs_event_length_set>
   190f0:	e595      	b.n	18c1e <hci_internal_cmd_put+0x9a>
		return -NRF_EPERM;
   190f2:	f04f 30ff 	mov.w	r0, #4294967295
   190f6:	e57c      	b.n	18bf2 <hci_internal_cmd_put+0x6e>
   190f8:	20003910 	.word	0x20003910

000190fc <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   190fc:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   190fe:	4c07      	ldr	r4, [pc, #28]	; (1911c <hci_internal_evt_get+0x20>)
   19100:	7823      	ldrb	r3, [r4, #0]
   19102:	b91b      	cbnz	r3, 1910c <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   19104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   19108:	f7f4 b9f6 	b.w	d4f8 <sdc_hci_evt_get>
		memcpy(evt_out,
   1910c:	78a2      	ldrb	r2, [r4, #2]
   1910e:	1c61      	adds	r1, r4, #1
   19110:	3202      	adds	r2, #2
   19112:	f00a f91c 	bl	2334e <memcpy>
		cmd_complete_or_status.occurred = false;
   19116:	2000      	movs	r0, #0
   19118:	7020      	strb	r0, [r4, #0]
}
   1911a:	bd10      	pop	{r4, pc}
   1911c:	20003909 	.word	0x20003909

00019120 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   19120:	b570      	push	{r4, r5, r6, lr}
   19122:	4605      	mov	r5, r0
   19124:	460e      	mov	r6, r1
   19126:	4c08      	ldr	r4, [pc, #32]	; (19148 <bt_rand+0x28>)
   19128:	4620      	mov	r0, r4
   1912a:	f009 fb37 	bl	2279c <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1912e:	b138      	cbz	r0, 19140 <bt_rand+0x20>
   19130:	68a3      	ldr	r3, [r4, #8]
   19132:	b2b2      	uxth	r2, r6
   19134:	4629      	mov	r1, r5
   19136:	4620      	mov	r0, r4
   19138:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1913a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1913e:	4718      	bx	r3
   19140:	f06f 0012 	mvn.w	r0, #18
   19144:	bd70      	pop	{r4, r5, r6, pc}
   19146:	bf00      	nop
   19148:	0002354c 	.word	0x0002354c

0001914c <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1914e:	4d1c      	ldr	r5, [pc, #112]	; (191c0 <ecdh_p256_common_secret+0x74>)
   19150:	491c      	ldr	r1, [pc, #112]	; (191c4 <ecdh_p256_common_secret+0x78>)
   19152:	f105 0220 	add.w	r2, r5, #32
   19156:	2800      	cmp	r0, #0
   19158:	bf08      	it	eq
   1915a:	4629      	moveq	r1, r5
   1915c:	4610      	mov	r0, r2
   1915e:	f002 fda1 	bl	1bca4 <ocrypto_ecdh_p256_common_secret>
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19162:	f04f 32ff 	mov.w	r2, #4294967295
		return BT_HCI_ERR_INVALID_PARAM;
   19166:	2800      	cmp	r0, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19168:	f04f 33ff 	mov.w	r3, #4294967295
   1916c:	f04f 0001 	mov.w	r0, #1
		return BT_HCI_ERR_INVALID_PARAM;
   19170:	bf0c      	ite	eq
   19172:	2700      	moveq	r7, #0
   19174:	2712      	movne	r7, #18
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19176:	f7fa fcd9 	bl	13b2c <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1917a:	f100 0608 	add.w	r6, r0, #8
   1917e:	2102      	movs	r1, #2
   19180:	4604      	mov	r4, r0
   19182:	4630      	mov	r0, r6
   19184:	f008 ff4c 	bl	22020 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   19188:	233e      	movs	r3, #62	; 0x3e
   1918a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1918c:	2322      	movs	r3, #34	; 0x22
   1918e:	7043      	strb	r3, [r0, #1]
   19190:	2101      	movs	r1, #1
   19192:	4630      	mov	r0, r6
   19194:	f008 ff44 	bl	22020 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   19198:	2309      	movs	r3, #9
   1919a:	7003      	strb	r3, [r0, #0]
   1919c:	2121      	movs	r1, #33	; 0x21
   1919e:	4630      	mov	r0, r6
   191a0:	f008 ff3e 	bl	22020 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   191a4:	f800 7b01 	strb.w	r7, [r0], #1

	if (status) {
   191a8:	b12f      	cbz	r7, 191b6 <ecdh_p256_common_secret+0x6a>
__ssp_bos_icheck3(memset, void *, int)
   191aa:	2220      	movs	r2, #32
   191ac:	21ff      	movs	r1, #255	; 0xff
   191ae:	f00a f8ef 	bl	23390 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   191b2:	4620      	mov	r0, r4
   191b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   191b6:	f105 0120 	add.w	r1, r5, #32
   191ba:	f009 f98d 	bl	224d8 <sys_memcpy_swap.constprop.0>
   191be:	e7f8      	b.n	191b2 <ecdh_p256_common_secret+0x66>
   191c0:	20003950 	.word	0x20003950
   191c4:	0002497e 	.word	0x0002497e

000191c8 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   191c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   191ca:	4e36      	ldr	r6, [pc, #216]	; (192a4 <ecdh_cmd_process+0xdc>)
   191cc:	f3bf 8f5b 	dmb	ish
   191d0:	6833      	ldr	r3, [r6, #0]
   191d2:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   191d6:	2b02      	cmp	r3, #2
   191d8:	d059      	beq.n	1928e <ecdh_cmd_process+0xc6>
   191da:	2b04      	cmp	r3, #4
   191dc:	d05c      	beq.n	19298 <ecdh_cmd_process+0xd0>
   191de:	2b01      	cmp	r3, #1
   191e0:	d15c      	bne.n	1929c <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   191e2:	4c31      	ldr	r4, [pc, #196]	; (192a8 <ecdh_cmd_process+0xe0>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   191e4:	4f31      	ldr	r7, [pc, #196]	; (192ac <ecdh_cmd_process+0xe4>)
		err = bt_rand(ecdh.private_key_be, 32);
   191e6:	2120      	movs	r1, #32
   191e8:	4620      	mov	r0, r4
   191ea:	f7ff ff99 	bl	19120 <bt_rand>
		if (err) {
   191ee:	2800      	cmp	r0, #0
   191f0:	d142      	bne.n	19278 <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   191f2:	2220      	movs	r2, #32
   191f4:	4639      	mov	r1, r7
   191f6:	4620      	mov	r0, r4
   191f8:	f00a f899 	bl	2332e <memcmp>
   191fc:	2800      	cmp	r0, #0
   191fe:	d0f2      	beq.n	191e6 <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   19200:	482b      	ldr	r0, [pc, #172]	; (192b0 <ecdh_cmd_process+0xe8>)
   19202:	4621      	mov	r1, r4
   19204:	f002 fd3a 	bl	1bc7c <ocrypto_ecdh_p256_public_key>
	} while (err);
   19208:	4605      	mov	r5, r0
   1920a:	2800      	cmp	r0, #0
   1920c:	d1eb      	bne.n	191e6 <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1920e:	f04f 32ff 	mov.w	r2, #4294967295
   19212:	f04f 33ff 	mov.w	r3, #4294967295
   19216:	2001      	movs	r0, #1
   19218:	f7fa fc88 	bl	13b2c <bt_buf_get_rx>
   1921c:	f100 0708 	add.w	r7, r0, #8
   19220:	2102      	movs	r1, #2
   19222:	4604      	mov	r4, r0
   19224:	4638      	mov	r0, r7
   19226:	f008 fefb 	bl	22020 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1922a:	233e      	movs	r3, #62	; 0x3e
   1922c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1922e:	2342      	movs	r3, #66	; 0x42
   19230:	7043      	strb	r3, [r0, #1]
   19232:	2101      	movs	r1, #1
   19234:	4638      	mov	r0, r7
   19236:	f008 fef3 	bl	22020 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1923a:	2308      	movs	r3, #8
   1923c:	7003      	strb	r3, [r0, #0]
   1923e:	2141      	movs	r1, #65	; 0x41
   19240:	4638      	mov	r0, r7
   19242:	f008 feed 	bl	22020 <net_buf_simple_add>
   19246:	4607      	mov	r7, r0
	evt->status = status;
   19248:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1924c:	b1b5      	cbz	r5, 1927c <ecdh_cmd_process+0xb4>
   1924e:	2240      	movs	r2, #64	; 0x40
   19250:	2100      	movs	r1, #0
   19252:	f00a f89d 	bl	23390 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19256:	f3bf 8f5b 	dmb	ish
   1925a:	2300      	movs	r3, #0
   1925c:	e856 2f00 	ldrex	r2, [r6]
   19260:	e846 3100 	strex	r1, r3, [r6]
   19264:	2900      	cmp	r1, #0
   19266:	d1f9      	bne.n	1925c <ecdh_cmd_process+0x94>
   19268:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1926c:	b1c4      	cbz	r4, 192a0 <ecdh_cmd_process+0xd8>
		bt_recv(buf);
   1926e:	4620      	mov	r0, r4
	}
}
   19270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   19274:	f7fb b8de 	b.w	14434 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   19278:	251f      	movs	r5, #31
   1927a:	e7c8      	b.n	1920e <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1927c:	490c      	ldr	r1, [pc, #48]	; (192b0 <ecdh_cmd_process+0xe8>)
   1927e:	f009 f92b 	bl	224d8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   19282:	3120      	adds	r1, #32
   19284:	f107 0021 	add.w	r0, r7, #33	; 0x21
   19288:	f009 f926 	bl	224d8 <sys_memcpy_swap.constprop.0>
		break;
   1928c:	e7e3      	b.n	19256 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   1928e:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   19290:	f7ff ff5c 	bl	1914c <ecdh_p256_common_secret>
   19294:	4604      	mov	r4, r0
		break;
   19296:	e7de      	b.n	19256 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   19298:	2001      	movs	r0, #1
   1929a:	e7f9      	b.n	19290 <ecdh_cmd_process+0xc8>
	switch (atomic_get(&cmd)) {
   1929c:	2400      	movs	r4, #0
   1929e:	e7da      	b.n	19256 <ecdh_cmd_process+0x8e>
}
   192a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192a2:	bf00      	nop
   192a4:	20002710 	.word	0x20002710
   192a8:	20003950 	.word	0x20003950
   192ac:	0002497e 	.word	0x0002497e
   192b0:	20003970 	.word	0x20003970

000192b4 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   192b4:	b510      	push	{r4, lr}
   192b6:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   192b8:	2210      	movs	r2, #16
   192ba:	2100      	movs	r1, #0
   192bc:	a801      	add	r0, sp, #4
   192be:	f00a f867 	bl	23390 <memset>
   192c2:	4c0b      	ldr	r4, [pc, #44]	; (192f0 <ecdh_thread+0x3c>)
   192c4:	9405      	str	r4, [sp, #20]
   192c6:	2301      	movs	r3, #1
   192c8:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   192cc:	f04f 32ff 	mov.w	r2, #4294967295
   192d0:	f04f 33ff 	mov.w	r3, #4294967295
   192d4:	2101      	movs	r1, #1
   192d6:	a801      	add	r0, sp, #4
   192d8:	f002 fc20 	bl	1bb1c <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   192dc:	4620      	mov	r0, r4
   192de:	f00a f81b 	bl	23318 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   192e2:	9b04      	ldr	r3, [sp, #16]
   192e4:	f36f 3352 	bfc	r3, #13, #6
   192e8:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   192ea:	f7ff ff6d 	bl	191c8 <ecdh_cmd_process>
	while (true) {
   192ee:	e7ed      	b.n	192cc <ecdh_thread+0x18>
   192f0:	20002714 	.word	0x20002714

000192f4 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   192f4:	b510      	push	{r4, lr}
   192f6:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   192f8:	480e      	ldr	r0, [pc, #56]	; (19334 <hci_ecdh_init+0x40>)
   192fa:	f00a f808 	bl	2330e <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   192fe:	4c0e      	ldr	r4, [pc, #56]	; (19338 <hci_ecdh_init+0x44>)
   19300:	490e      	ldr	r1, [pc, #56]	; (1933c <hci_ecdh_init+0x48>)
   19302:	2200      	movs	r2, #0
   19304:	2300      	movs	r3, #0
   19306:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1930a:	2300      	movs	r3, #0
   1930c:	220a      	movs	r2, #10
   1930e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   19312:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19316:	9300      	str	r3, [sp, #0]
   19318:	f44f 7262 	mov.w	r2, #904	; 0x388
   1931c:	4b08      	ldr	r3, [pc, #32]	; (19340 <hci_ecdh_init+0x4c>)
   1931e:	4620      	mov	r0, r4
   19320:	f001 fb16 	bl	1a950 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19324:	4907      	ldr	r1, [pc, #28]	; (19344 <hci_ecdh_init+0x50>)
   19326:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   19328:	b008      	add	sp, #32
   1932a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1932e:	f009 bb0e 	b.w	2294e <z_impl_k_thread_name_set>
   19332:	bf00      	nop
   19334:	20002714 	.word	0x20002714
   19338:	20001b50 	.word	0x20001b50
   1933c:	20004820 	.word	0x20004820
   19340:	000192b5 	.word	0x000192b5
   19344:	00024971 	.word	0x00024971

00019348 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   19348:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1934a:	4b0b      	ldr	r3, [pc, #44]	; (19378 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1934c:	f3bf 8f5b 	dmb	ish
   19350:	2201      	movs	r2, #1
   19352:	e853 1f00 	ldrex	r1, [r3]
   19356:	2900      	cmp	r1, #0
   19358:	d103      	bne.n	19362 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1935a:	e843 2000 	strex	r0, r2, [r3]
   1935e:	2800      	cmp	r0, #0
   19360:	d1f7      	bne.n	19352 <hci_cmd_le_read_local_p256_public_key+0xa>
   19362:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   19366:	d105      	bne.n	19374 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   19368:	4804      	ldr	r0, [pc, #16]	; (1937c <hci_cmd_le_read_local_p256_public_key+0x34>)
   1936a:	2100      	movs	r1, #0
   1936c:	f002 fc32 	bl	1bbd4 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   19370:	2000      	movs	r0, #0
}
   19372:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19374:	200c      	movs	r0, #12
   19376:	e7fc      	b.n	19372 <hci_cmd_le_read_local_p256_public_key+0x2a>
   19378:	20002710 	.word	0x20002710
   1937c:	20002714 	.word	0x20002714

00019380 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   19380:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   19382:	2900      	cmp	r1, #0
   19384:	4b11      	ldr	r3, [pc, #68]	; (193cc <cmd_le_generate_dhkey+0x4c>)
   19386:	f3bf 8f5b 	dmb	ish
{
   1938a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1938c:	bf14      	ite	ne
   1938e:	2204      	movne	r2, #4
   19390:	2202      	moveq	r2, #2
   19392:	e853 1f00 	ldrex	r1, [r3]
   19396:	2900      	cmp	r1, #0
   19398:	d103      	bne.n	193a2 <cmd_le_generate_dhkey+0x22>
   1939a:	e843 2000 	strex	r0, r2, [r3]
   1939e:	2800      	cmp	r0, #0
   193a0:	d1f7      	bne.n	19392 <cmd_le_generate_dhkey+0x12>
   193a2:	f3bf 8f5b 	dmb	ish
   193a6:	d10e      	bne.n	193c6 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   193a8:	4621      	mov	r1, r4
   193aa:	4809      	ldr	r0, [pc, #36]	; (193d0 <cmd_le_generate_dhkey+0x50>)
   193ac:	f009 f894 	bl	224d8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   193b0:	4808      	ldr	r0, [pc, #32]	; (193d4 <cmd_le_generate_dhkey+0x54>)
   193b2:	f104 0120 	add.w	r1, r4, #32
   193b6:	f009 f88f 	bl	224d8 <sys_memcpy_swap.constprop.0>
   193ba:	4807      	ldr	r0, [pc, #28]	; (193d8 <cmd_le_generate_dhkey+0x58>)
   193bc:	2100      	movs	r1, #0
   193be:	f002 fc09 	bl	1bbd4 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   193c2:	2000      	movs	r0, #0
}
   193c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   193c6:	200c      	movs	r0, #12
   193c8:	e7fc      	b.n	193c4 <cmd_le_generate_dhkey+0x44>
   193ca:	bf00      	nop
   193cc:	20002710 	.word	0x20002710
   193d0:	20003970 	.word	0x20003970
   193d4:	20003990 	.word	0x20003990
   193d8:	20002714 	.word	0x20002714

000193dc <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   193dc:	4901      	ldr	r1, [pc, #4]	; (193e4 <mpsl_low_prio_irq_handler+0x8>)
   193de:	4802      	ldr	r0, [pc, #8]	; (193e8 <mpsl_low_prio_irq_handler+0xc>)
   193e0:	f009 bc36 	b.w	22c50 <k_work_submit_to_queue>
   193e4:	20002724 	.word	0x20002724
   193e8:	20001bd0 	.word	0x20001bd0

000193ec <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   193ec:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   193ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   193f2:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   193f6:	2300      	movs	r3, #0
   193f8:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   193fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19400:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19404:	4a0d      	ldr	r2, [pc, #52]	; (1943c <mpsl_lib_init+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   19406:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19408:	2119      	movs	r1, #25
   1940a:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   1940c:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19410:	f7eb fa2a 	bl	4868 <mpsl_init>
	if (err) {
   19414:	4604      	mov	r4, r0
   19416:	b970      	cbnz	r0, 19436 <mpsl_lib_init+0x4a>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19418:	4601      	mov	r1, r0
   1941a:	2201      	movs	r2, #1
   1941c:	2008      	movs	r0, #8
   1941e:	f7f9 ff7b 	bl	13318 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19422:	2201      	movs	r2, #1
   19424:	4621      	mov	r1, r4
   19426:	200b      	movs	r0, #11
   19428:	f7f9 ff76 	bl	13318 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1942c:	2201      	movs	r2, #1
   1942e:	4621      	mov	r1, r4
   19430:	4610      	mov	r0, r2
   19432:	f7f9 ff71 	bl	13318 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   19436:	4620      	mov	r0, r4
   19438:	b002      	add	sp, #8
   1943a:	bd10      	pop	{r4, pc}
   1943c:	00022503 	.word	0x00022503

00019440 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   19440:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   19442:	4d0d      	ldr	r5, [pc, #52]	; (19478 <mpsl_low_prio_init+0x38>)
   19444:	490d      	ldr	r1, [pc, #52]	; (1947c <mpsl_low_prio_init+0x3c>)
   19446:	2400      	movs	r4, #0
   19448:	9400      	str	r4, [sp, #0]
   1944a:	f06f 0309 	mvn.w	r3, #9
   1944e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19452:	4628      	mov	r0, r5
   19454:	f001 fd80 	bl	1af58 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   19458:	4909      	ldr	r1, [pc, #36]	; (19480 <mpsl_low_prio_init+0x40>)
   1945a:	4628      	mov	r0, r5
   1945c:	f009 fa77 	bl	2294e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   19460:	4908      	ldr	r1, [pc, #32]	; (19484 <mpsl_low_prio_init+0x44>)
   19462:	4809      	ldr	r0, [pc, #36]	; (19488 <mpsl_low_prio_init+0x48>)
   19464:	f009 fbdb 	bl	22c1e <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19468:	4622      	mov	r2, r4
   1946a:	2104      	movs	r1, #4
   1946c:	2019      	movs	r0, #25
   1946e:	f7f9 ff53 	bl	13318 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   19472:	4620      	mov	r0, r4
   19474:	b003      	add	sp, #12
   19476:	bd30      	pop	{r4, r5, pc}
   19478:	20001bd0 	.word	0x20001bd0
   1947c:	20004be0 	.word	0x20004be0
   19480:	0002499e 	.word	0x0002499e
   19484:	0002252f 	.word	0x0002252f
   19488:	20002724 	.word	0x20002724

0001948c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1948c:	4b01      	ldr	r3, [pc, #4]	; (19494 <mpsl_hfclk_callback+0x8>)
   1948e:	2000      	movs	r0, #0
   19490:	681b      	ldr	r3, [r3, #0]
   19492:	4718      	bx	r3
   19494:	20002734 	.word	0x20002734

00019498 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   19498:	b120      	cbz	r0, 194a4 <nrfx_clock_start+0xc>
   1949a:	2801      	cmp	r0, #1
   1949c:	d106      	bne.n	194ac <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1949e:	4804      	ldr	r0, [pc, #16]	; (194b0 <nrfx_clock_start+0x18>)
   194a0:	f7eb b85a 	b.w	4558 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   194a4:	4b03      	ldr	r3, [pc, #12]	; (194b4 <nrfx_clock_start+0x1c>)
   194a6:	2001      	movs	r0, #1
   194a8:	681b      	ldr	r3, [r3, #0]
   194aa:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   194ac:	4770      	bx	lr
   194ae:	bf00      	nop
   194b0:	0001948d 	.word	0x0001948d
   194b4:	20002734 	.word	0x20002734

000194b8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   194b8:	4b01      	ldr	r3, [pc, #4]	; (194c0 <nrfx_clock_init+0x8>)
   194ba:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   194bc:	4801      	ldr	r0, [pc, #4]	; (194c4 <nrfx_clock_init+0xc>)
   194be:	4770      	bx	lr
   194c0:	20002734 	.word	0x20002734
   194c4:	0bad0000 	.word	0x0bad0000

000194c8 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   194c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   194cc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   194d0:	2a08      	cmp	r2, #8
   194d2:	d106      	bne.n	194e2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   194d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   194d8:	2b05      	cmp	r3, #5
   194da:	d802      	bhi.n	194e2 <nrf52_errata_103+0x1a>
   194dc:	4a02      	ldr	r2, [pc, #8]	; (194e8 <nrf52_errata_103+0x20>)
   194de:	5cd0      	ldrb	r0, [r2, r3]
   194e0:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   194e2:	2000      	movs	r0, #0
    #endif
}
   194e4:	4770      	bx	lr
   194e6:	bf00      	nop
   194e8:	000249ae 	.word	0x000249ae

000194ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   194ec:	4a02      	ldr	r2, [pc, #8]	; (194f8 <nvmc_wait+0xc>)
   194ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   194f2:	2b00      	cmp	r3, #0
   194f4:	d0fb      	beq.n	194ee <nvmc_wait+0x2>
}
   194f6:	4770      	bx	lr
   194f8:	4001e000 	.word	0x4001e000

000194fc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   194fc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   194fe:	f009 f852 	bl	225a6 <nrf52_errata_136>
   19502:	b140      	cbz	r0, 19516 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19508:	2200      	movs	r2, #0
   1950a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1950e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19512:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19516:	f009 f846 	bl	225a6 <nrf52_errata_136>
   1951a:	2800      	cmp	r0, #0
   1951c:	d046      	beq.n	195ac <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19522:	4b60      	ldr	r3, [pc, #384]	; (196a4 <SystemInit+0x1a8>)
   19524:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19528:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1952c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19530:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19534:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19538:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1953c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19540:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19544:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19548:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1954c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19550:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19554:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19558:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1955c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19560:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19564:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19568:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1956c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19570:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19574:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19578:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1957c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19580:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19584:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19588:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1958c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19590:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19594:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19598:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1959c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   195a0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   195a4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   195a8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   195ac:	f7ff ff8c 	bl	194c8 <nrf52_errata_103>
   195b0:	b118      	cbz	r0, 195ba <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   195b2:	4b3d      	ldr	r3, [pc, #244]	; (196a8 <SystemInit+0x1ac>)
   195b4:	4a3d      	ldr	r2, [pc, #244]	; (196ac <SystemInit+0x1b0>)
   195b6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   195ba:	f7ff ff85 	bl	194c8 <nrf52_errata_103>
   195be:	b118      	cbz	r0, 195c8 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   195c0:	4b3b      	ldr	r3, [pc, #236]	; (196b0 <SystemInit+0x1b4>)
   195c2:	22fb      	movs	r2, #251	; 0xfb
   195c4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   195c8:	f7ff ff7e 	bl	194c8 <nrf52_errata_103>
   195cc:	b170      	cbz	r0, 195ec <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   195ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   195d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   195d6:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   195da:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   195de:	f022 020f 	bic.w	r2, r2, #15
   195e2:	f003 030f 	and.w	r3, r3, #15
   195e6:	4313      	orrs	r3, r2
   195e8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   195ec:	f7ff ff6c 	bl	194c8 <nrf52_errata_103>
   195f0:	b120      	cbz	r0, 195fc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   195f2:	4b30      	ldr	r3, [pc, #192]	; (196b4 <SystemInit+0x1b8>)
   195f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   195f8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   195fc:	f008 ffd3 	bl	225a6 <nrf52_errata_136>
   19600:	b148      	cbz	r0, 19616 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19606:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1960a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1960c:	bf44      	itt	mi
   1960e:	f06f 0201 	mvnmi.w	r2, #1
   19612:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19616:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1961a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1961e:	2a08      	cmp	r2, #8
   19620:	d10e      	bne.n	19640 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19622:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   19626:	2b05      	cmp	r3, #5
   19628:	d802      	bhi.n	19630 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1962a:	4a23      	ldr	r2, [pc, #140]	; (196b8 <SystemInit+0x1bc>)
   1962c:	5cd3      	ldrb	r3, [r2, r3]
   1962e:	b13b      	cbz	r3, 19640 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19630:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19634:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   19638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1963c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19640:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19644:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19648:	2a00      	cmp	r2, #0
   1964a:	db03      	blt.n	19654 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1964c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19650:	2b00      	cmp	r3, #0
   19652:	da22      	bge.n	1969a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19654:	4919      	ldr	r1, [pc, #100]	; (196bc <SystemInit+0x1c0>)
   19656:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19658:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1965c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19660:	2412      	movs	r4, #18
    nvmc_wait();
   19662:	f7ff ff43 	bl	194ec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19666:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1966a:	f7ff ff3f 	bl	194ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1966e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19672:	f7ff ff3b 	bl	194ec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19676:	2300      	movs	r3, #0
   19678:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1967c:	f7ff ff36 	bl	194ec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   19680:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19684:	490e      	ldr	r1, [pc, #56]	; (196c0 <SystemInit+0x1c4>)
   19686:	4b0f      	ldr	r3, [pc, #60]	; (196c4 <SystemInit+0x1c8>)
   19688:	68ca      	ldr	r2, [r1, #12]
   1968a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1968e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19690:	60cb      	str	r3, [r1, #12]
   19692:	f3bf 8f4f 	dsb	sy
    __NOP();
   19696:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19698:	e7fd      	b.n	19696 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1969a:	4b0b      	ldr	r3, [pc, #44]	; (196c8 <SystemInit+0x1cc>)
   1969c:	4a0b      	ldr	r2, [pc, #44]	; (196cc <SystemInit+0x1d0>)
   1969e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   196a0:	bd10      	pop	{r4, pc}
   196a2:	bf00      	nop
   196a4:	4000c000 	.word	0x4000c000
   196a8:	40005000 	.word	0x40005000
   196ac:	00038148 	.word	0x00038148
   196b0:	4000f000 	.word	0x4000f000
   196b4:	40029000 	.word	0x40029000
   196b8:	000249a8 	.word	0x000249a8
   196bc:	4001e000 	.word	0x4001e000
   196c0:	e000ed00 	.word	0xe000ed00
   196c4:	05fa0004 	.word	0x05fa0004
   196c8:	20000750 	.word	0x20000750
   196cc:	03d09000 	.word	0x03d09000

000196d0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   196d0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   196d2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   196d4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   196d6:	fab2 f382 	clz	r3, r2
   196da:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   196de:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   196e0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   196e2:	d014      	beq.n	1970e <nrfx_flag32_alloc+0x3e>
   196e4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   196e8:	fa05 f303 	lsl.w	r3, r5, r3
   196ec:	ea22 0303 	bic.w	r3, r2, r3
   196f0:	e850 6f00 	ldrex	r6, [r0]
   196f4:	4296      	cmp	r6, r2
   196f6:	d104      	bne.n	19702 <nrfx_flag32_alloc+0x32>
   196f8:	e840 3c00 	strex	ip, r3, [r0]
   196fc:	f1bc 0f00 	cmp.w	ip, #0
   19700:	d1f6      	bne.n	196f0 <nrfx_flag32_alloc+0x20>
   19702:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19706:	d1e5      	bne.n	196d4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   19708:	4802      	ldr	r0, [pc, #8]	; (19714 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   1970a:	700c      	strb	r4, [r1, #0]
}
   1970c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   1970e:	4802      	ldr	r0, [pc, #8]	; (19718 <nrfx_flag32_alloc+0x48>)
   19710:	e7fc      	b.n	1970c <nrfx_flag32_alloc+0x3c>
   19712:	bf00      	nop
   19714:	0bad0000 	.word	0x0bad0000
   19718:	0bad0002 	.word	0x0bad0002

0001971c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1971c:	6803      	ldr	r3, [r0, #0]
   1971e:	40cb      	lsrs	r3, r1
   19720:	07db      	lsls	r3, r3, #31
{
   19722:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   19724:	d415      	bmi.n	19752 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   19726:	2301      	movs	r3, #1
   19728:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   1972c:	6803      	ldr	r3, [r0, #0]
   1972e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   19732:	ea41 0203 	orr.w	r2, r1, r3
   19736:	e850 4f00 	ldrex	r4, [r0]
   1973a:	429c      	cmp	r4, r3
   1973c:	d104      	bne.n	19748 <nrfx_flag32_free+0x2c>
   1973e:	e840 2c00 	strex	ip, r2, [r0]
   19742:	f1bc 0f00 	cmp.w	ip, #0
   19746:	d1f6      	bne.n	19736 <nrfx_flag32_free+0x1a>
   19748:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1974c:	d1ee      	bne.n	1972c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1974e:	4802      	ldr	r0, [pc, #8]	; (19758 <nrfx_flag32_free+0x3c>)
}
   19750:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19752:	4802      	ldr	r0, [pc, #8]	; (1975c <nrfx_flag32_free+0x40>)
   19754:	e7fc      	b.n	19750 <nrfx_flag32_free+0x34>
   19756:	bf00      	nop
   19758:	0bad0000 	.word	0x0bad0000
   1975c:	0bad0004 	.word	0x0bad0004

00019760 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   19760:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   19762:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19766:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   19768:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1976a:	6002      	str	r2, [r0, #0]
}
   1976c:	4802      	ldr	r0, [pc, #8]	; (19778 <nrf_gpio_pin_port_decode+0x18>)
   1976e:	bf18      	it	ne
   19770:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   19774:	4770      	bx	lr
   19776:	bf00      	nop
   19778:	50000300 	.word	0x50000300

0001977c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1977c:	4b03      	ldr	r3, [pc, #12]	; (1978c <pin_in_use_by_te+0x10>)
   1977e:	3008      	adds	r0, #8
   19780:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19784:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19788:	4770      	bx	lr
   1978a:	bf00      	nop
   1978c:	20000754 	.word	0x20000754

00019790 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19790:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19792:	f100 0308 	add.w	r3, r0, #8
   19796:	4c0c      	ldr	r4, [pc, #48]	; (197c8 <call_handler+0x38>)
   19798:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1979c:	05da      	lsls	r2, r3, #23
{
   1979e:	4605      	mov	r5, r0
   197a0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   197a2:	d507      	bpl.n	197b4 <call_handler+0x24>
   197a4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   197a8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   197ac:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   197b0:	6852      	ldr	r2, [r2, #4]
   197b2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   197b4:	68a3      	ldr	r3, [r4, #8]
   197b6:	b12b      	cbz	r3, 197c4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   197b8:	68e2      	ldr	r2, [r4, #12]
   197ba:	4631      	mov	r1, r6
   197bc:	4628      	mov	r0, r5
    }
}
   197be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   197c2:	4718      	bx	r3
}
   197c4:	bd70      	pop	{r4, r5, r6, pc}
   197c6:	bf00      	nop
   197c8:	20000754 	.word	0x20000754

000197cc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   197cc:	4a12      	ldr	r2, [pc, #72]	; (19818 <release_handler+0x4c>)
   197ce:	3008      	adds	r0, #8
{
   197d0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   197d2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   197d6:	05d9      	lsls	r1, r3, #23
   197d8:	d51b      	bpl.n	19812 <release_handler+0x46>
   197da:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   197de:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   197e2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   197e6:	f102 0410 	add.w	r4, r2, #16
   197ea:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   197ec:	f834 3b02 	ldrh.w	r3, [r4], #2
   197f0:	f413 7f80 	tst.w	r3, #256	; 0x100
   197f4:	d003      	beq.n	197fe <release_handler+0x32>
   197f6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   197fa:	4299      	cmp	r1, r3
   197fc:	d009      	beq.n	19812 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   197fe:	3001      	adds	r0, #1
   19800:	2830      	cmp	r0, #48	; 0x30
   19802:	d1f3      	bne.n	197ec <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   19804:	2300      	movs	r3, #0
   19806:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1980a:	4804      	ldr	r0, [pc, #16]	; (1981c <release_handler+0x50>)
}
   1980c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1980e:	f7ff bf85 	b.w	1971c <nrfx_flag32_free>
}
   19812:	bc10      	pop	{r4}
   19814:	4770      	bx	lr
   19816:	bf00      	nop
   19818:	20000754 	.word	0x20000754
   1981c:	200007c8 	.word	0x200007c8

00019820 <pin_handler_trigger_uninit>:
{
   19820:	b538      	push	{r3, r4, r5, lr}
   19822:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19824:	f7ff ffaa 	bl	1977c <pin_in_use_by_te>
   19828:	4c09      	ldr	r4, [pc, #36]	; (19850 <pin_handler_trigger_uninit+0x30>)
   1982a:	f102 0508 	add.w	r5, r2, #8
   1982e:	b140      	cbz	r0, 19842 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19830:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   19834:	4907      	ldr	r1, [pc, #28]	; (19854 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   19836:	0b5b      	lsrs	r3, r3, #13
   19838:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1983c:	2000      	movs	r0, #0
   1983e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   19842:	4610      	mov	r0, r2
   19844:	f7ff ffc2 	bl	197cc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   19848:	2300      	movs	r3, #0
   1984a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1984e:	bd38      	pop	{r3, r4, r5, pc}
   19850:	20000754 	.word	0x20000754
   19854:	40006000 	.word	0x40006000

00019858 <nrfx_gpiote_input_configure>:
{
   19858:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1985c:	4604      	mov	r4, r0
   1985e:	4617      	mov	r7, r2
   19860:	461d      	mov	r5, r3
    if (p_input_config)
   19862:	b321      	cbz	r1, 198ae <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19864:	4e4e      	ldr	r6, [pc, #312]	; (199a0 <nrfx_gpiote_input_configure+0x148>)
   19866:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1986a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   1986e:	079b      	lsls	r3, r3, #30
   19870:	d506      	bpl.n	19880 <nrfx_gpiote_input_configure+0x28>
   19872:	f7ff ff83 	bl	1977c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   19876:	b118      	cbz	r0, 19880 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   19878:	484a      	ldr	r0, [pc, #296]	; (199a4 <nrfx_gpiote_input_configure+0x14c>)
}
   1987a:	b004      	add	sp, #16
   1987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19880:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19882:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19886:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1988a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1988e:	f10d 020f 	add.w	r2, sp, #15
   19892:	460b      	mov	r3, r1
   19894:	4620      	mov	r0, r4
   19896:	f10d 010e 	add.w	r1, sp, #14
   1989a:	f008 fe90 	bl	225be <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1989e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   198a2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   198a6:	f043 0301 	orr.w	r3, r3, #1
   198aa:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   198ae:	b197      	cbz	r7, 198d6 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   198b0:	4b3b      	ldr	r3, [pc, #236]	; (199a0 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   198b2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   198b4:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   198b6:	f104 0008 	add.w	r0, r4, #8
   198ba:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   198be:	078f      	lsls	r7, r1, #30
   198c0:	d50c      	bpl.n	198dc <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   198c2:	2a00      	cmp	r2, #0
   198c4:	d1d8      	bne.n	19878 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   198c6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   198ca:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   198ce:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   198d2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   198d6:	bbcd      	cbnz	r5, 1994c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   198d8:	4833      	ldr	r0, [pc, #204]	; (199a8 <nrfx_gpiote_input_configure+0x150>)
   198da:	e7ce      	b.n	1987a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   198dc:	f021 0120 	bic.w	r1, r1, #32
   198e0:	04c9      	lsls	r1, r1, #19
   198e2:	0cc9      	lsrs	r1, r1, #19
   198e4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   198e8:	2a00      	cmp	r2, #0
   198ea:	d0ec      	beq.n	198c6 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   198ec:	2e03      	cmp	r6, #3
   198ee:	d8c3      	bhi.n	19878 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   198f0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   198f2:	b92e      	cbnz	r6, 19900 <nrfx_gpiote_input_configure+0xa8>
   198f4:	4a2d      	ldr	r2, [pc, #180]	; (199ac <nrfx_gpiote_input_configure+0x154>)
   198f6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   198fa:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   198fe:	e7e2      	b.n	198c6 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19900:	00ba      	lsls	r2, r7, #2
   19902:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19906:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1990a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1990e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19912:	f02c 0c03 	bic.w	ip, ip, #3
   19916:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1991a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   1991e:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   19922:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   19926:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1992a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1992e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   19932:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   19936:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   1993a:	ea4c 0c0e 	orr.w	ip, ip, lr
   1993e:	f041 0120 	orr.w	r1, r1, #32
   19942:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   19946:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1994a:	e7bc      	b.n	198c6 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1994c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   19950:	4620      	mov	r0, r4
   19952:	f7ff ff3b 	bl	197cc <release_handler>
    if (!handler)
   19956:	2e00      	cmp	r6, #0
   19958:	d0be      	beq.n	198d8 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1995a:	4d11      	ldr	r5, [pc, #68]	; (199a0 <nrfx_gpiote_input_configure+0x148>)
   1995c:	682b      	ldr	r3, [r5, #0]
   1995e:	429e      	cmp	r6, r3
   19960:	d104      	bne.n	1996c <nrfx_gpiote_input_configure+0x114>
   19962:	686b      	ldr	r3, [r5, #4]
   19964:	429f      	cmp	r7, r3
   19966:	d101      	bne.n	1996c <nrfx_gpiote_input_configure+0x114>
   19968:	2200      	movs	r2, #0
   1996a:	e00a      	b.n	19982 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1996c:	4810      	ldr	r0, [pc, #64]	; (199b0 <nrfx_gpiote_input_configure+0x158>)
   1996e:	f10d 010f 	add.w	r1, sp, #15
   19972:	f7ff fead 	bl	196d0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   19976:	4b0c      	ldr	r3, [pc, #48]	; (199a8 <nrfx_gpiote_input_configure+0x150>)
   19978:	4298      	cmp	r0, r3
   1997a:	f47f af7e 	bne.w	1987a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   1997e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   19982:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   19986:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1998a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1998c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1998e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   19992:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   19996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1999a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1999e:	e79b      	b.n	198d8 <nrfx_gpiote_input_configure+0x80>
   199a0:	20000754 	.word	0x20000754
   199a4:	0bad0004 	.word	0x0bad0004
   199a8:	0bad0000 	.word	0x0bad0000
   199ac:	40006000 	.word	0x40006000
   199b0:	200007c8 	.word	0x200007c8

000199b4 <nrfx_gpiote_output_configure>:
{
   199b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   199b6:	4604      	mov	r4, r0
   199b8:	b085      	sub	sp, #20
   199ba:	4615      	mov	r5, r2
    if (p_config)
   199bc:	b319      	cbz	r1, 19a06 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   199be:	4e33      	ldr	r6, [pc, #204]	; (19a8c <nrfx_gpiote_output_configure+0xd8>)
   199c0:	f100 0708 	add.w	r7, r0, #8
   199c4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   199c8:	0793      	lsls	r3, r2, #30
   199ca:	d403      	bmi.n	199d4 <nrfx_gpiote_output_configure+0x20>
   199cc:	f7ff fed6 	bl	1977c <pin_in_use_by_te>
   199d0:	2800      	cmp	r0, #0
   199d2:	d158      	bne.n	19a86 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   199d4:	f012 0f1c 	tst.w	r2, #28
   199d8:	d002      	beq.n	199e0 <nrfx_gpiote_output_configure+0x2c>
   199da:	784b      	ldrb	r3, [r1, #1]
   199dc:	2b01      	cmp	r3, #1
   199de:	d052      	beq.n	19a86 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   199e0:	2301      	movs	r3, #1
   199e2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   199e6:	2300      	movs	r3, #0
   199e8:	e9cd 1300 	strd	r1, r3, [sp]
   199ec:	1c4a      	adds	r2, r1, #1
   199ee:	1c8b      	adds	r3, r1, #2
   199f0:	4620      	mov	r0, r4
   199f2:	f10d 010f 	add.w	r1, sp, #15
   199f6:	f008 fde2 	bl	225be <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   199fa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   199fe:	f043 0303 	orr.w	r3, r3, #3
   19a02:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   19a06:	b915      	cbnz	r5, 19a0e <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   19a08:	4821      	ldr	r0, [pc, #132]	; (19a90 <nrfx_gpiote_output_configure+0xdc>)
}
   19a0a:	b005      	add	sp, #20
   19a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19a0e:	4e1f      	ldr	r6, [pc, #124]	; (19a8c <nrfx_gpiote_output_configure+0xd8>)
   19a10:	f104 0708 	add.w	r7, r4, #8
   19a14:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   19a18:	0783      	lsls	r3, r0, #30
   19a1a:	d534      	bpl.n	19a86 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   19a1c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   19a20:	4661      	mov	r1, ip
   19a22:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   19a24:	f020 0020 	bic.w	r0, r0, #32
   19a28:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19a2c:	04c0      	lsls	r0, r0, #19
   19a2e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   19a32:	0cc0      	lsrs	r0, r0, #19
   19a34:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19a38:	2300      	movs	r3, #0
   19a3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19a3e:	786a      	ldrb	r2, [r5, #1]
   19a40:	2a00      	cmp	r2, #0
   19a42:	d0e1      	beq.n	19a08 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   19a44:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   19a48:	78ad      	ldrb	r5, [r5, #2]
   19a4a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   19a4e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19a52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19a56:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   19a5a:	0223      	lsls	r3, r4, #8
   19a5c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19a60:	0412      	lsls	r2, r2, #16
   19a62:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19a66:	ea43 030e 	orr.w	r3, r3, lr
   19a6a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   19a6c:	052a      	lsls	r2, r5, #20
   19a6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19a72:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19a76:	4313      	orrs	r3, r2
   19a78:	f040 0020 	orr.w	r0, r0, #32
   19a7c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19a80:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19a84:	e7c0      	b.n	19a08 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   19a86:	4803      	ldr	r0, [pc, #12]	; (19a94 <nrfx_gpiote_output_configure+0xe0>)
   19a88:	e7bf      	b.n	19a0a <nrfx_gpiote_output_configure+0x56>
   19a8a:	bf00      	nop
   19a8c:	20000754 	.word	0x20000754
   19a90:	0bad0000 	.word	0x0bad0000
   19a94:	0bad0004 	.word	0x0bad0004

00019a98 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   19a98:	4b01      	ldr	r3, [pc, #4]	; (19aa0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   19a9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   19a9e:	4770      	bx	lr
   19aa0:	20000754 	.word	0x20000754

00019aa4 <nrfx_gpiote_channel_get>:
{
   19aa4:	b508      	push	{r3, lr}
   19aa6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19aa8:	f7ff fe68 	bl	1977c <pin_in_use_by_te>
   19aac:	b138      	cbz	r0, 19abe <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19aae:	4b05      	ldr	r3, [pc, #20]	; (19ac4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   19ab0:	4805      	ldr	r0, [pc, #20]	; (19ac8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19ab2:	3208      	adds	r2, #8
   19ab4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19ab8:	0b5b      	lsrs	r3, r3, #13
   19aba:	700b      	strb	r3, [r1, #0]
}
   19abc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19abe:	4803      	ldr	r0, [pc, #12]	; (19acc <nrfx_gpiote_channel_get+0x28>)
   19ac0:	e7fc      	b.n	19abc <nrfx_gpiote_channel_get+0x18>
   19ac2:	bf00      	nop
   19ac4:	20000754 	.word	0x20000754
   19ac8:	0bad0000 	.word	0x0bad0000
   19acc:	0bad0004 	.word	0x0bad0004

00019ad0 <nrfx_gpiote_init>:
{
   19ad0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19ad2:	4c0f      	ldr	r4, [pc, #60]	; (19b10 <nrfx_gpiote_init+0x40>)
   19ad4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   19ad8:	b9bd      	cbnz	r5, 19b0a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   19ada:	2260      	movs	r2, #96	; 0x60
   19adc:	4629      	mov	r1, r5
   19ade:	f104 0010 	add.w	r0, r4, #16
   19ae2:	f009 fc55 	bl	23390 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   19ae6:	2006      	movs	r0, #6
   19ae8:	f7f9 fbe4 	bl	132b4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19aec:	4b09      	ldr	r3, [pc, #36]	; (19b14 <nrfx_gpiote_init+0x44>)
    return err_code;
   19aee:	480a      	ldr	r0, [pc, #40]	; (19b18 <nrfx_gpiote_init+0x48>)
   19af0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   19af4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   19af8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19afc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19b00:	2301      	movs	r3, #1
   19b02:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   19b06:	6763      	str	r3, [r4, #116]	; 0x74
}
   19b08:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   19b0a:	4804      	ldr	r0, [pc, #16]	; (19b1c <nrfx_gpiote_init+0x4c>)
   19b0c:	e7fc      	b.n	19b08 <nrfx_gpiote_init+0x38>
   19b0e:	bf00      	nop
   19b10:	20000754 	.word	0x20000754
   19b14:	40006000 	.word	0x40006000
   19b18:	0bad0000 	.word	0x0bad0000
   19b1c:	0bad0005 	.word	0x0bad0005

00019b20 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   19b20:	4b03      	ldr	r3, [pc, #12]	; (19b30 <nrfx_gpiote_is_init+0x10>)
   19b22:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   19b26:	3800      	subs	r0, #0
   19b28:	bf18      	it	ne
   19b2a:	2001      	movne	r0, #1
   19b2c:	4770      	bx	lr
   19b2e:	bf00      	nop
   19b30:	20000754 	.word	0x20000754

00019b34 <nrfx_gpiote_channel_free>:
{
   19b34:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   19b36:	4801      	ldr	r0, [pc, #4]	; (19b3c <nrfx_gpiote_channel_free+0x8>)
   19b38:	f7ff bdf0 	b.w	1971c <nrfx_flag32_free>
   19b3c:	200007c4 	.word	0x200007c4

00019b40 <nrfx_gpiote_channel_alloc>:
{
   19b40:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   19b42:	4801      	ldr	r0, [pc, #4]	; (19b48 <nrfx_gpiote_channel_alloc+0x8>)
   19b44:	f7ff bdc4 	b.w	196d0 <nrfx_flag32_alloc>
   19b48:	200007c4 	.word	0x200007c4

00019b4c <nrfx_gpiote_trigger_enable>:
{
   19b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19b4e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19b50:	f7ff fe14 	bl	1977c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19b54:	f104 0208 	add.w	r2, r4, #8
   19b58:	4b1e      	ldr	r3, [pc, #120]	; (19bd4 <nrfx_gpiote_trigger_enable+0x88>)
   19b5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19b5e:	b1e8      	cbz	r0, 19b9c <nrfx_gpiote_trigger_enable+0x50>
   19b60:	f013 0502 	ands.w	r5, r3, #2
   19b64:	d11a      	bne.n	19b9c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19b66:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   19b68:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   19b6a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   19b6e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   19b72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19b76:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19b7a:	6005      	str	r5, [r0, #0]
   19b7c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19b7e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   19b82:	f040 0001 	orr.w	r0, r0, #1
   19b86:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   19b8a:	b129      	cbz	r1, 19b98 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19b8c:	2201      	movs	r2, #1
   19b8e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   19b92:	4a11      	ldr	r2, [pc, #68]	; (19bd8 <nrfx_gpiote_trigger_enable+0x8c>)
   19b94:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19b98:	b003      	add	sp, #12
   19b9a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19b9c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   19ba0:	2b04      	cmp	r3, #4
   19ba2:	d012      	beq.n	19bca <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19ba4:	2b05      	cmp	r3, #5
   19ba6:	d012      	beq.n	19bce <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19ba8:	a801      	add	r0, sp, #4
   19baa:	9401      	str	r4, [sp, #4]
   19bac:	f7ff fdd8 	bl	19760 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19bb0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   19bb2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19bb6:	40d9      	lsrs	r1, r3
   19bb8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19bbc:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   19bbe:	4620      	mov	r0, r4
}
   19bc0:	b003      	add	sp, #12
   19bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   19bc6:	f008 bd41 	b.w	2264c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   19bca:	2103      	movs	r1, #3
   19bcc:	e7f7      	b.n	19bbe <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   19bce:	2102      	movs	r1, #2
   19bd0:	e7f5      	b.n	19bbe <nrfx_gpiote_trigger_enable+0x72>
   19bd2:	bf00      	nop
   19bd4:	20000754 	.word	0x20000754
   19bd8:	40006000 	.word	0x40006000

00019bdc <nrfx_gpiote_trigger_disable>:
{
   19bdc:	b508      	push	{r3, lr}
   19bde:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19be0:	f7ff fdcc 	bl	1977c <pin_in_use_by_te>
   19be4:	b1c0      	cbz	r0, 19c18 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19be6:	f102 0108 	add.w	r1, r2, #8
   19bea:	4b0e      	ldr	r3, [pc, #56]	; (19c24 <nrfx_gpiote_trigger_disable+0x48>)
   19bec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19bf0:	0799      	lsls	r1, r3, #30
   19bf2:	d411      	bmi.n	19c18 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19bf4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   19bf6:	2201      	movs	r2, #1
   19bf8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   19bfa:	009b      	lsls	r3, r3, #2
   19bfc:	490a      	ldr	r1, [pc, #40]	; (19c28 <nrfx_gpiote_trigger_disable+0x4c>)
   19bfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19c02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19c06:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19c0a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   19c0e:	f022 0203 	bic.w	r2, r2, #3
   19c12:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   19c16:	bd08      	pop	{r3, pc}
   19c18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   19c1c:	2100      	movs	r1, #0
   19c1e:	4610      	mov	r0, r2
   19c20:	f008 bd14 	b.w	2264c <nrf_gpio_cfg_sense_set>
   19c24:	20000754 	.word	0x20000754
   19c28:	40006000 	.word	0x40006000

00019c2c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19c2c:	4b0e      	ldr	r3, [pc, #56]	; (19c68 <nrfx_gpiote_pin_uninit+0x3c>)
   19c2e:	f100 0208 	add.w	r2, r0, #8
{
   19c32:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19c34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   19c38:	07db      	lsls	r3, r3, #31
{
   19c3a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   19c3c:	d511      	bpl.n	19c62 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   19c3e:	f7ff ffcd 	bl	19bdc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   19c42:	4620      	mov	r0, r4
   19c44:	f7ff fdec 	bl	19820 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19c48:	a801      	add	r0, sp, #4
   19c4a:	9401      	str	r4, [sp, #4]
   19c4c:	f7ff fd88 	bl	19760 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19c50:	9b01      	ldr	r3, [sp, #4]
   19c52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19c56:	2202      	movs	r2, #2
   19c58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   19c5c:	4803      	ldr	r0, [pc, #12]	; (19c6c <nrfx_gpiote_pin_uninit+0x40>)
}
   19c5e:	b002      	add	sp, #8
   19c60:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19c62:	4803      	ldr	r0, [pc, #12]	; (19c70 <nrfx_gpiote_pin_uninit+0x44>)
   19c64:	e7fb      	b.n	19c5e <nrfx_gpiote_pin_uninit+0x32>
   19c66:	bf00      	nop
   19c68:	20000754 	.word	0x20000754
   19c6c:	0bad0000 	.word	0x0bad0000
   19c70:	0bad0004 	.word	0x0bad0004

00019c74 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   19c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c78:	4b64      	ldr	r3, [pc, #400]	; (19e0c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   19c7a:	4865      	ldr	r0, [pc, #404]	; (19e10 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19c7c:	4965      	ldr	r1, [pc, #404]	; (19e14 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   19c7e:	2600      	movs	r6, #0
{
   19c80:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19c82:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19c84:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19c86:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   19c88:	b135      	cbz	r5, 19c98 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   19c8a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   19c8e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19c90:	bf1e      	ittt	ne
   19c92:	601c      	strne	r4, [r3, #0]
   19c94:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   19c96:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19c98:	3304      	adds	r3, #4
   19c9a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   19c9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19ca0:	d1f1      	bne.n	19c86 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ca2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 19e10 <nrfx_gpiote_irq_handler+0x19c>
   19ca6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   19caa:	2b00      	cmp	r3, #0
   19cac:	f000 8091 	beq.w	19dd2 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   19cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cb4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   19cb8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   19cba:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   19cbe:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   19cc2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   19cc4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   19cc8:	2700      	movs	r7, #0
            while (latch[i])
   19cca:	f10d 0910 	add.w	r9, sp, #16
   19cce:	017b      	lsls	r3, r7, #5
   19cd0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   19cd2:	f04f 0a01 	mov.w	sl, #1
   19cd6:	e049      	b.n	19d6c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   19cd8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19cda:	4a4f      	ldr	r2, [pc, #316]	; (19e18 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   19cdc:	fa94 f4a4 	rbit	r4, r4
   19ce0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   19ce4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19ce6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   19cea:	08e0      	lsrs	r0, r4, #3
   19cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   19cf0:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   19cf2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   19cf6:	fa0a fc02 	lsl.w	ip, sl, r2
   19cfa:	f819 2000 	ldrb.w	r2, [r9, r0]
   19cfe:	ea22 020c 	bic.w	r2, r2, ip
   19d02:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19d06:	a803      	add	r0, sp, #12
   19d08:	f3c3 0582 	ubfx	r5, r3, #2, #3
   19d0c:	0899      	lsrs	r1, r3, #2
   19d0e:	f7ff fd27 	bl	19760 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19d12:	9a03      	ldr	r2, [sp, #12]
   19d14:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   19d18:	074b      	lsls	r3, r1, #29
   19d1a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19d1e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19d20:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   19d24:	d529      	bpl.n	19d7a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   19d26:	4620      	mov	r0, r4
   19d28:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19d2a:	b2d5      	uxtb	r5, r2
   19d2c:	f7ff fd30 	bl	19790 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19d30:	a803      	add	r0, sp, #12
   19d32:	9403      	str	r4, [sp, #12]
   19d34:	f7ff fd14 	bl	19760 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19d38:	9b03      	ldr	r3, [sp, #12]
   19d3a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19d3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   19d42:	f3c3 4301 	ubfx	r3, r3, #16, #2
   19d46:	429d      	cmp	r5, r3
   19d48:	d107      	bne.n	19d5a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   19d4a:	2100      	movs	r1, #0
   19d4c:	4620      	mov	r0, r4
   19d4e:	f008 fc7d 	bl	2264c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   19d52:	4629      	mov	r1, r5
   19d54:	4620      	mov	r0, r4
   19d56:	f008 fc79 	bl	2264c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19d5a:	a803      	add	r0, sp, #12
   19d5c:	9403      	str	r4, [sp, #12]
   19d5e:	f7ff fcff 	bl	19760 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   19d62:	9b03      	ldr	r3, [sp, #12]
   19d64:	fa0a f303 	lsl.w	r3, sl, r3
   19d68:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   19d6c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   19d70:	2c00      	cmp	r4, #0
   19d72:	d1b1      	bne.n	19cd8 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   19d74:	b9cf      	cbnz	r7, 19daa <nrfx_gpiote_irq_handler+0x136>
   19d76:	2701      	movs	r7, #1
   19d78:	e7a9      	b.n	19cce <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19d7a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   19d7c:	bf0c      	ite	eq
   19d7e:	2103      	moveq	r1, #3
   19d80:	2102      	movne	r1, #2
   19d82:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19d84:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   19d86:	f008 fc61 	bl	2264c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   19d8a:	2d03      	cmp	r5, #3
   19d8c:	d004      	beq.n	19d98 <nrfx_gpiote_irq_handler+0x124>
   19d8e:	9a01      	ldr	r2, [sp, #4]
   19d90:	2a02      	cmp	r2, #2
   19d92:	d106      	bne.n	19da2 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   19d94:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   19d96:	d1e0      	bne.n	19d5a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   19d98:	4659      	mov	r1, fp
   19d9a:	4620      	mov	r0, r4
   19d9c:	f7ff fcf8 	bl	19790 <call_handler>
   19da0:	e7db      	b.n	19d5a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   19da2:	2a03      	cmp	r2, #3
   19da4:	d1d9      	bne.n	19d5a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   19da6:	2d02      	cmp	r5, #2
   19da8:	e7f5      	b.n	19d96 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19daa:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   19dae:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   19db2:	491a      	ldr	r1, [pc, #104]	; (19e1c <nrfx_gpiote_irq_handler+0x1a8>)
   19db4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19db8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   19dbc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   19dbe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   19dc2:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   19dc6:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   19dc8:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   19dcc:	4313      	orrs	r3, r2
   19dce:	f47f af7b 	bne.w	19cc8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   19dd2:	2401      	movs	r4, #1
    while (mask)
   19dd4:	b916      	cbnz	r6, 19ddc <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   19dd6:	b007      	add	sp, #28
   19dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   19ddc:	fa96 f3a6 	rbit	r3, r6
   19de0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   19de4:	fa04 f203 	lsl.w	r2, r4, r3
   19de8:	009b      	lsls	r3, r3, #2
   19dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19dee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19df2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19df6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   19dfa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   19dfe:	f3c0 2005 	ubfx	r0, r0, #8, #6
   19e02:	f3c1 4101 	ubfx	r1, r1, #16, #2
   19e06:	f7ff fcc3 	bl	19790 <call_handler>
   19e0a:	e7e3      	b.n	19dd4 <nrfx_gpiote_irq_handler+0x160>
   19e0c:	40006100 	.word	0x40006100
   19e10:	40006000 	.word	0x40006000
   19e14:	40006120 	.word	0x40006120
   19e18:	20000754 	.word	0x20000754
   19e1c:	50000300 	.word	0x50000300

00019e20 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   19e20:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   19e22:	4801      	ldr	r0, [pc, #4]	; (19e28 <nrfx_ppi_channel_alloc+0x8>)
   19e24:	f7ff bc54 	b.w	196d0 <nrfx_flag32_alloc>
   19e28:	200007d0 	.word	0x200007d0

00019e2c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   19e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19e30:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   19e32:	4d2b      	ldr	r5, [pc, #172]	; (19ee0 <nrfx_twim_init+0xb4>)
   19e34:	f04f 0c34 	mov.w	ip, #52	; 0x34
   19e38:	fb0c fc06 	mul.w	ip, ip, r6
   19e3c:	eb05 040c 	add.w	r4, r5, ip
   19e40:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   19e44:	2f00      	cmp	r7, #0
   19e46:	d149      	bne.n	19edc <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   19e48:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
   19e4a:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   19e4c:	7b4b      	ldrb	r3, [r1, #13]
   19e4e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   19e52:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
   19e54:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
   19e58:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   19e5a:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
   19e5e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   19e62:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   19e66:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   19e6a:	b1cb      	cbz	r3, 19ea0 <nrfx_twim_init+0x74>
   19e6c:	f1bc 0f00 	cmp.w	ip, #0
   19e70:	d105      	bne.n	19e7e <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   19e72:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   19e76:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   19e7a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   19e7e:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   19e80:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   19e84:	b11a      	cbz	r2, 19e8e <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   19e86:	f340 3007 	sbfx	r0, r0, #12, #8
   19e8a:	f7f9 fa13 	bl	132b4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19e8e:	2334      	movs	r3, #52	; 0x34
   19e90:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   19e94:	4813      	ldr	r0, [pc, #76]	; (19ee4 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19e96:	2301      	movs	r3, #1
   19e98:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   19e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   19ea0:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   19ea2:	4b11      	ldr	r3, [pc, #68]	; (19ee8 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
   19ea4:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   19ea8:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   19eaa:	2c01      	cmp	r4, #1
   19eac:	bf18      	it	ne
   19eae:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19eb2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
   19eb6:	bf08      	it	eq
   19eb8:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   19eba:	f240 6e0c 	movw	lr, #1548	; 0x60c
   19ebe:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   19ec2:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   19ec4:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   19ec8:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   19eca:	2c01      	cmp	r4, #1
   19ecc:	bf18      	it	ne
   19ece:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19ed2:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
   19ed6:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   19eda:	e7c7      	b.n	19e6c <nrfx_twim_init+0x40>
        return err_code;
   19edc:	4803      	ldr	r0, [pc, #12]	; (19eec <nrfx_twim_init+0xc0>)
   19ede:	e7dd      	b.n	19e9c <nrfx_twim_init+0x70>
   19ee0:	20002738 	.word	0x20002738
   19ee4:	0bad0000 	.word	0x0bad0000
   19ee8:	50000300 	.word	0x50000300
   19eec:	0bad0005 	.word	0x0bad0005

00019ef0 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   19ef0:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19ef2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   19ef4:	2106      	movs	r1, #6
   19ef6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   19efa:	4b04      	ldr	r3, [pc, #16]	; (19f0c <nrfx_twim_enable+0x1c>)
   19efc:	2134      	movs	r1, #52	; 0x34
   19efe:	fb01 3302 	mla	r3, r1, r2, r3
   19f02:	2202      	movs	r2, #2
   19f04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   19f08:	4770      	bx	lr
   19f0a:	bf00      	nop
   19f0c:	20002738 	.word	0x20002738

00019f10 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19f10:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   19f12:	4b0c      	ldr	r3, [pc, #48]	; (19f44 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   19f14:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   19f16:	2034      	movs	r0, #52	; 0x34
   19f18:	fb00 3301 	mla	r3, r0, r1, r3
   19f1c:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   19f1e:	480a      	ldr	r0, [pc, #40]	; (19f48 <nrfx_twim_disable+0x38>)
   19f20:	6099      	str	r1, [r3, #8]
   19f22:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   19f26:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   19f2a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   19f2e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   19f32:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19f36:	2201      	movs	r2, #1
   19f38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   19f3c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   19f40:	4770      	bx	lr
   19f42:	bf00      	nop
   19f44:	20002738 	.word	0x20002738
   19f48:	019c0202 	.word	0x019c0202

00019f4c <nrfx_twim_uninit>:
{
   19f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19f4e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   19f50:	4d1e      	ldr	r5, [pc, #120]	; (19fcc <nrfx_twim_uninit+0x80>)
   19f52:	2334      	movs	r3, #52	; 0x34
   19f54:	4373      	muls	r3, r6
{
   19f56:	4604      	mov	r4, r0
    if (p_cb->handler)
   19f58:	58eb      	ldr	r3, [r5, r3]
   19f5a:	b123      	cbz	r3, 19f66 <nrfx_twim_uninit+0x1a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   19f5c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   19f5e:	f340 3007 	sbfx	r0, r0, #12, #8
   19f62:	f7f9 f9b7 	bl	132d4 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   19f66:	4620      	mov	r0, r4
   19f68:	f7ff ffd2 	bl	19f10 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   19f6c:	2334      	movs	r3, #52	; 0x34
   19f6e:	fb03 5306 	mla	r3, r3, r6, r5
   19f72:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   19f76:	bb0a      	cbnz	r2, 19fbc <nrfx_twim_uninit+0x70>
   19f78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   19f7c:	b9f3      	cbnz	r3, 19fbc <nrfx_twim_uninit+0x70>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   19f7e:	6824      	ldr	r4, [r4, #0]
        case 1: return NRF_P1;
   19f80:	4b13      	ldr	r3, [pc, #76]	; (19fd0 <nrfx_twim_uninit+0x84>)
    return p_reg->PSEL.SCL;
   19f82:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   19f86:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19f8a:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   19f8c:	2a01      	cmp	r2, #1
   19f8e:	bf18      	it	ne
   19f90:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19f94:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   19f98:	bf08      	it	eq
   19f9a:	461f      	moveq	r7, r3
    reg->PIN_CNF[pin_number] = cnf;
   19f9c:	2002      	movs	r0, #2
   19f9e:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
    return p_reg->PSEL.SDA;
   19fa2:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   19fa6:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   19faa:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   19fac:	2a01      	cmp	r2, #1
   19fae:	bf18      	it	ne
   19fb0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19fb4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   19fb8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   19fbc:	2334      	movs	r3, #52	; 0x34
   19fbe:	fb03 5506 	mla	r5, r3, r6, r5
   19fc2:	2300      	movs	r3, #0
   19fc4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   19fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fca:	bf00      	nop
   19fcc:	20002738 	.word	0x20002738
   19fd0:	50000300 	.word	0x50000300

00019fd4 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   19fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   19fd8:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 1a2ac <nrfx_twim_xfer+0x2d8>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19fdc:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   19fe0:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   19fe2:	2334      	movs	r3, #52	; 0x34
   19fe4:	fb03 c30e 	mla	r3, r3, lr, ip
{
   19fe8:	4617      	mov	r7, r2
    p_cb->error = false;
   19fea:	2200      	movs	r2, #0
   19fec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19ff0:	684b      	ldr	r3, [r1, #4]
{
   19ff2:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19ff4:	b14b      	cbz	r3, 1a00a <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   19ff6:	68cb      	ldr	r3, [r1, #12]
   19ff8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   19ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a000:	d003      	beq.n	1a00a <nrfx_twim_xfer+0x36>
        return err_code;
   1a002:	4eab      	ldr	r6, [pc, #684]	; (1a2b0 <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a004:	4630      	mov	r0, r6
   1a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1a00a:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   1a00c:	4ba9      	ldr	r3, [pc, #676]	; (1a2b4 <nrfx_twim_xfer+0x2e0>)
   1a00e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1a012:	fb06 c60e 	mla	r6, r6, lr, ip
   1a016:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1a01a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1a01e:	b123      	cbz	r3, 1a02a <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a020:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1a022:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1a026:	4ea4      	ldr	r6, [pc, #656]	; (1a2b8 <nrfx_twim_xfer+0x2e4>)
   1a028:	e7ec      	b.n	1a004 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1a02a:	f017 0f14 	tst.w	r7, #20
   1a02e:	bf0c      	ite	eq
   1a030:	2301      	moveq	r3, #1
   1a032:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1a034:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1a038:	46a9      	mov	r9, r5
   1a03a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1a03e:	f106 080c 	add.w	r8, r6, #12
   1a042:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1a046:	f8d9 3000 	ldr.w	r3, [r9]
   1a04a:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1a04e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1a052:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1a056:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   1a058:	786b      	ldrb	r3, [r5, #1]
   1a05a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a05e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1a062:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a066:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1a06a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a06e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1a072:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1a076:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1a07a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1a07e:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1a082:	bf18      	it	ne
   1a084:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1a086:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1a08a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1a08e:	bf18      	it	ne
   1a090:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1a092:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   1a096:	782a      	ldrb	r2, [r5, #0]
   1a098:	2a03      	cmp	r2, #3
   1a09a:	f200 80b5 	bhi.w	1a208 <nrfx_twim_xfer+0x234>
   1a09e:	e8df f002 	tbb	[pc, r2]
   1a0a2:	a084      	.short	0xa084
   1a0a4:	0269      	.short	0x0269
   1a0a6:	692b      	ldr	r3, [r5, #16]
   1a0a8:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a0ac:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1a0b0:	d1a7      	bne.n	1a002 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   1a0b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a0b6:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a0ba:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a0bc:	6869      	ldr	r1, [r5, #4]
   1a0be:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a0c2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a0c6:	2100      	movs	r1, #0
   1a0c8:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1a0cc:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a0d0:	2001      	movs	r0, #1
   1a0d2:	6220      	str	r0, [r4, #32]
   1a0d4:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a0d6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1a0da:	2800      	cmp	r0, #0
   1a0dc:	d0fb      	beq.n	1a0d6 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a0de:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1a0e2:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a0e6:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a0e8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a0ec:	2334      	movs	r3, #52	; 0x34
   1a0ee:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   1a0f2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   1a0f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1a0fa:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1a0fc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a0fe:	4e6f      	ldr	r6, [pc, #444]	; (1a2bc <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1a100:	0739      	lsls	r1, r7, #28
   1a102:	d406      	bmi.n	1a112 <nrfx_twim_xfer+0x13e>
   1a104:	2a03      	cmp	r2, #3
   1a106:	d004      	beq.n	1a112 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a108:	2201      	movs	r2, #1
   1a10a:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   1a10c:	686b      	ldr	r3, [r5, #4]
   1a10e:	b903      	cbnz	r3, 1a112 <nrfx_twim_xfer+0x13e>
   1a110:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1a112:	2334      	movs	r3, #52	; 0x34
   1a114:	fb03 f30e 	mul.w	r3, r3, lr
   1a118:	eb0c 0103 	add.w	r1, ip, r3
   1a11c:	f85c 2003 	ldr.w	r2, [ip, r3]
   1a120:	2a00      	cmp	r2, #0
   1a122:	d174      	bne.n	1a20e <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   1a124:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a126:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a12a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a12e:	2800      	cmp	r0, #0
   1a130:	f040 8088 	bne.w	1a244 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1a134:	3b00      	subs	r3, #0
   1a136:	bf18      	it	ne
   1a138:	2301      	movne	r3, #1
   1a13a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a13e:	2800      	cmp	r0, #0
   1a140:	f000 8086 	beq.w	1a250 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a144:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a148:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a14c:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1a150:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1a154:	b115      	cbz	r5, 1a15c <nrfx_twim_xfer+0x188>
   1a156:	f410 7f00 	tst.w	r0, #512	; 0x200
   1a15a:	d104      	bne.n	1a166 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a15c:	6221      	str	r1, [r4, #32]
   1a15e:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a160:	2d00      	cmp	r5, #0
   1a162:	d0e0      	beq.n	1a126 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   1a164:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a166:	05c0      	lsls	r0, r0, #23
   1a168:	d572      	bpl.n	1a250 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a16a:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1a16e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   1a172:	e7d8      	b.n	1a126 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a174:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a176:	68e9      	ldr	r1, [r5, #12]
   1a178:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a17c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1a180:	692b      	ldr	r3, [r5, #16]
   1a182:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a186:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1a18a:	f47f af3a 	bne.w	1a002 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a18e:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a190:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   1a194:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   1a198:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a19c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a1a0:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a1a2:	fb03 c30e 	mla	r3, r3, lr, ip
   1a1a6:	2102      	movs	r1, #2
   1a1a8:	e012      	b.n	1a1d0 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a1aa:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a1ac:	68e9      	ldr	r1, [r5, #12]
   1a1ae:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1a1b2:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   1a1b6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1a1ba:	f04f 0334 	mov.w	r3, #52	; 0x34
   1a1be:	d00b      	beq.n	1a1d8 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   1a1c0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a1c4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a1c8:	fb03 c30e 	mla	r3, r3, lr, ip
   1a1cc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a1d0:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a1d2:	2301      	movs	r3, #1
   1a1d4:	6223      	str	r3, [r4, #32]
   1a1d6:	e791      	b.n	1a0fc <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   1a1d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a1dc:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   1a1e0:	e7df      	b.n	1a1a2 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a1e2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a1e4:	68e9      	ldr	r1, [r5, #12]
   1a1e6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a1ea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a1ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a1f2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a1f6:	2334      	movs	r3, #52	; 0x34
   1a1f8:	fb03 c30e 	mla	r3, r3, lr, ip
   1a1fc:	2102      	movs	r1, #2
   1a1fe:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a200:	2301      	movs	r3, #1
   1a202:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   1a204:	2300      	movs	r3, #0
   1a206:	e77a      	b.n	1a0fe <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   1a208:	4e2d      	ldr	r6, [pc, #180]	; (1a2c0 <nrfx_twim_xfer+0x2ec>)
   1a20a:	2308      	movs	r3, #8
   1a20c:	e778      	b.n	1a100 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1a20e:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   1a210:	bf44      	itt	mi
   1a212:	2300      	movmi	r3, #0
   1a214:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1a216:	067b      	lsls	r3, r7, #25
   1a218:	d406      	bmi.n	1a228 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1a21a:	2334      	movs	r3, #52	; 0x34
   1a21c:	fb03 c30e 	mla	r3, r3, lr, ip
   1a220:	689a      	ldr	r2, [r3, #8]
   1a222:	f042 0202 	orr.w	r2, r2, #2
   1a226:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1a228:	2334      	movs	r3, #52	; 0x34
   1a22a:	fb03 cc0e 	mla	ip, r3, lr, ip
   1a22e:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1a232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a236:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a23a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   1a23e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1a242:	e6df      	b.n	1a004 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a244:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a248:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   1a24c:	2301      	movs	r3, #1
   1a24e:	e774      	b.n	1a13a <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   1a250:	2b00      	cmp	r3, #0
   1a252:	f43f af68 	beq.w	1a126 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   1a256:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1a258:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a25c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1a260:	fb01 c20e 	mla	r2, r1, lr, ip
   1a264:	2000      	movs	r0, #0
   1a266:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1a26a:	b18b      	cbz	r3, 1a290 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1a26c:	4a15      	ldr	r2, [pc, #84]	; (1a2c4 <nrfx_twim_xfer+0x2f0>)
   1a26e:	4e16      	ldr	r6, [pc, #88]	; (1a2c8 <nrfx_twim_xfer+0x2f4>)
   1a270:	f013 0f01 	tst.w	r3, #1
   1a274:	bf18      	it	ne
   1a276:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1a278:	f013 0f02 	tst.w	r3, #2
   1a27c:	f102 0201 	add.w	r2, r2, #1
   1a280:	bf18      	it	ne
   1a282:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1a284:	f013 0f04 	tst.w	r3, #4
   1a288:	4b10      	ldr	r3, [pc, #64]	; (1a2cc <nrfx_twim_xfer+0x2f8>)
   1a28a:	bf18      	it	ne
   1a28c:	461e      	movne	r6, r3
   1a28e:	e6b9      	b.n	1a004 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1a290:	067b      	lsls	r3, r7, #25
   1a292:	f53f aeb7 	bmi.w	1a004 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   1a296:	fb0e c101 	mla	r1, lr, r1, ip
   1a29a:	4620      	mov	r0, r4
   1a29c:	f008 f9e5 	bl	2266a <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   1a2a0:	4b09      	ldr	r3, [pc, #36]	; (1a2c8 <nrfx_twim_xfer+0x2f4>)
   1a2a2:	2800      	cmp	r0, #0
   1a2a4:	bf08      	it	eq
   1a2a6:	461e      	moveq	r6, r3
   1a2a8:	e6ac      	b.n	1a004 <nrfx_twim_xfer+0x30>
   1a2aa:	bf00      	nop
   1a2ac:	20002738 	.word	0x20002738
   1a2b0:	0bad000a 	.word	0x0bad000a
   1a2b4:	019c0202 	.word	0x019c0202
   1a2b8:	0bad000b 	.word	0x0bad000b
   1a2bc:	0bad0000 	.word	0x0bad0000
   1a2c0:	0bad0004 	.word	0x0bad0004
   1a2c4:	0bae0000 	.word	0x0bae0000
   1a2c8:	0bad0001 	.word	0x0bad0001
   1a2cc:	0bae0002 	.word	0x0bae0002

0001a2d0 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   1a2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a2d2:	4d5a      	ldr	r5, [pc, #360]	; (1a43c <nrfx_twim_0_irq_handler+0x16c>)
   1a2d4:	4c5a      	ldr	r4, [pc, #360]	; (1a440 <nrfx_twim_0_irq_handler+0x170>)
   1a2d6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a2da:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a2dc:	b1fb      	cbz	r3, 1a31e <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a2de:	2300      	movs	r3, #0
   1a2e0:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a2e4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a2e8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a2ec:	b9bb      	cbnz	r3, 1a31e <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1a2ee:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a2f0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a2f4:	2302      	movs	r3, #2
   1a2f6:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a2f8:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1a2fa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a2fe:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1a302:	b11b      	cbz	r3, 1a30c <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
   1a304:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   1a308:	059e      	lsls	r6, r3, #22
   1a30a:	d403      	bmi.n	1a314 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a30c:	4b4b      	ldr	r3, [pc, #300]	; (1a43c <nrfx_twim_0_irq_handler+0x16c>)
   1a30e:	2201      	movs	r2, #1
   1a310:	621a      	str	r2, [r3, #32]
   1a312:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   1a314:	2301      	movs	r3, #1
   1a316:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   1a31a:	b007      	add	sp, #28
   1a31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a31e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a322:	2b00      	cmp	r3, #0
   1a324:	d053      	beq.n	1a3ce <nrfx_twim_0_irq_handler+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a326:	2300      	movs	r3, #0
   1a328:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1a32c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1a330:	6a23      	ldr	r3, [r4, #32]
   1a332:	065d      	lsls	r5, r3, #25
   1a334:	d40a      	bmi.n	1a34c <nrfx_twim_0_irq_handler+0x7c>
   1a336:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a33a:	b93b      	cbnz	r3, 1a34c <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1a33c:	4940      	ldr	r1, [pc, #256]	; (1a440 <nrfx_twim_0_irq_handler+0x170>)
   1a33e:	483f      	ldr	r0, [pc, #252]	; (1a43c <nrfx_twim_0_irq_handler+0x16c>)
   1a340:	f008 f993 	bl	2266a <xfer_completeness_check>
   1a344:	f080 0001 	eor.w	r0, r0, #1
   1a348:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1a34c:	6a23      	ldr	r3, [r4, #32]
   1a34e:	f013 0704 	ands.w	r7, r3, #4
   1a352:	d121      	bne.n	1a398 <nrfx_twim_0_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   1a354:	4e3b      	ldr	r6, [pc, #236]	; (1a444 <nrfx_twim_0_irq_handler+0x174>)
            if (!p_cb->repeated || p_cb->error)
   1a356:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   1a35a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a35c:	ad01      	add	r5, sp, #4
   1a35e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a360:	6833      	ldr	r3, [r6, #0]
   1a362:	602b      	str	r3, [r5, #0]
   1a364:	4b35      	ldr	r3, [pc, #212]	; (1a43c <nrfx_twim_0_irq_handler+0x16c>)
   1a366:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   1a36a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   1a36e:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   1a372:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   1a376:	f1bc 0f00 	cmp.w	ip, #0
   1a37a:	d002      	beq.n	1a382 <nrfx_twim_0_irq_handler+0xb2>
   1a37c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   1a380:	b152      	cbz	r2, 1a398 <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   1a382:	2200      	movs	r2, #0
   1a384:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   1a388:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1a38a:	4a2f      	ldr	r2, [pc, #188]	; (1a448 <nrfx_twim_0_irq_handler+0x178>)
   1a38c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a390:	4b2e      	ldr	r3, [pc, #184]	; (1a44c <nrfx_twim_0_irq_handler+0x17c>)
   1a392:	2208      	movs	r2, #8
   1a394:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   1a398:	4a28      	ldr	r2, [pc, #160]	; (1a43c <nrfx_twim_0_irq_handler+0x16c>)
   1a39a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a39e:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1a3a2:	0798      	lsls	r0, r3, #30
   1a3a4:	d53c      	bpl.n	1a420 <nrfx_twim_0_irq_handler+0x150>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1a3a6:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   1a3a8:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1a3ac:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a3b0:	b90b      	cbnz	r3, 1a3b6 <nrfx_twim_0_irq_handler+0xe6>
        p_cb->busy = false;
   1a3b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   1a3b6:	6a23      	ldr	r3, [r4, #32]
   1a3b8:	075b      	lsls	r3, r3, #29
   1a3ba:	d503      	bpl.n	1a3c4 <nrfx_twim_0_irq_handler+0xf4>
   1a3bc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	d0aa      	beq.n	1a31a <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   1a3c4:	e9d4 3100 	ldrd	r3, r1, [r4]
   1a3c8:	4668      	mov	r0, sp
   1a3ca:	4798      	blx	r3
}
   1a3cc:	e7a5      	b.n	1a31a <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a3ce:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   1a3d2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1a3d6:	7b23      	ldrb	r3, [r4, #12]
   1a3d8:	b983      	cbnz	r3, 1a3fc <nrfx_twim_0_irq_handler+0x12c>
            event.xfer_desc = p_cb->xfer_desc;
   1a3da:	4f1a      	ldr	r7, [pc, #104]	; (1a444 <nrfx_twim_0_irq_handler+0x174>)
   1a3dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a3de:	ae01      	add	r6, sp, #4
   1a3e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a3e2:	683b      	ldr	r3, [r7, #0]
   1a3e4:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1a3e6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a3ea:	2b00      	cmp	r3, #0
   1a3ec:	d1d4      	bne.n	1a398 <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   1a3ee:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   1a3f2:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a3f4:	4b14      	ldr	r3, [pc, #80]	; (1a448 <nrfx_twim_0_irq_handler+0x178>)
   1a3f6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a3fa:	e7c9      	b.n	1a390 <nrfx_twim_0_irq_handler+0xc0>
    p_reg->SHORTS = mask;
   1a3fc:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a400:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1a404:	f240 2302 	movw	r3, #514	; 0x202
   1a408:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a40a:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1a40e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a412:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1a414:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a418:	2301      	movs	r3, #1
   1a41a:	60ab      	str	r3, [r5, #8]
   1a41c:	622b      	str	r3, [r5, #32]
            return;
   1a41e:	e77c      	b.n	1a31a <nrfx_twim_0_irq_handler+0x4a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1a420:	0759      	lsls	r1, r3, #29
   1a422:	d501      	bpl.n	1a428 <nrfx_twim_0_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1a424:	2302      	movs	r3, #2
   1a426:	e7bf      	b.n	1a3a8 <nrfx_twim_0_irq_handler+0xd8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1a428:	07da      	lsls	r2, r3, #31
   1a42a:	d501      	bpl.n	1a430 <nrfx_twim_0_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1a42c:	2303      	movs	r3, #3
   1a42e:	e7bb      	b.n	1a3a8 <nrfx_twim_0_irq_handler+0xd8>
    else if (p_cb->error)
   1a430:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a434:	2b00      	cmp	r3, #0
   1a436:	d0b7      	beq.n	1a3a8 <nrfx_twim_0_irq_handler+0xd8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1a438:	2304      	movs	r3, #4
   1a43a:	e7b5      	b.n	1a3a8 <nrfx_twim_0_irq_handler+0xd8>
   1a43c:	40003000 	.word	0x40003000
   1a440:	20002738 	.word	0x20002738
   1a444:	20002744 	.word	0x20002744
   1a448:	019c0202 	.word	0x019c0202
   1a44c:	e000e100 	.word	0xe000e100

0001a450 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1a450:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1a452:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a456:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a458:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1a45a:	6002      	str	r2, [r0, #0]
}
   1a45c:	4802      	ldr	r0, [pc, #8]	; (1a468 <nrf_gpio_pin_port_decode+0x18>)
   1a45e:	bf18      	it	ne
   1a460:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1a464:	4770      	bx	lr
   1a466:	bf00      	nop
   1a468:	50000300 	.word	0x50000300

0001a46c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1a46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a46e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1a470:	f008 f92b 	bl	226ca <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1a474:	4608      	mov	r0, r1
   1a476:	f008 f928 	bl	226ca <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a47a:	a801      	add	r0, sp, #4
   1a47c:	9601      	str	r6, [sp, #4]
   1a47e:	f7ff ffe7 	bl	1a450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a482:	9b01      	ldr	r3, [sp, #4]
   1a484:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   1a488:	460c      	mov	r4, r1
   1a48a:	f240 610d 	movw	r1, #1549	; 0x60d
   1a48e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a492:	a801      	add	r0, sp, #4
   1a494:	9401      	str	r4, [sp, #4]
   1a496:	f7ff ffdb 	bl	1a450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a49a:	9b01      	ldr	r3, [sp, #4]
   1a49c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1a4a0:	2509      	movs	r5, #9
   1a4a2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1a4a6:	2004      	movs	r0, #4
   1a4a8:	f008 f887 	bl	225ba <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a4ac:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a4ae:	a801      	add	r0, sp, #4
   1a4b0:	9401      	str	r4, [sp, #4]
   1a4b2:	f7ff ffcd 	bl	1a450 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a4b6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1a4b8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a4bc:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1a4be:	07db      	lsls	r3, r3, #31
   1a4c0:	d415      	bmi.n	1a4ee <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a4c2:	a801      	add	r0, sp, #4
   1a4c4:	9601      	str	r6, [sp, #4]
   1a4c6:	f7ff ffc3 	bl	1a450 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a4ca:	9b01      	ldr	r3, [sp, #4]
   1a4cc:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1a4d0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1a4d4:	2004      	movs	r0, #4
   1a4d6:	f008 f870 	bl	225ba <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1a4da:	4630      	mov	r0, r6
   1a4dc:	f008 f8f5 	bl	226ca <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1a4e0:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1a4e2:	2004      	movs	r0, #4
   1a4e4:	f008 f869 	bl	225ba <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1a4e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1a4ec:	d1df      	bne.n	1a4ae <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a4ee:	a801      	add	r0, sp, #4
   1a4f0:	9401      	str	r4, [sp, #4]
   1a4f2:	f7ff ffad 	bl	1a450 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a4f6:	9a01      	ldr	r2, [sp, #4]
   1a4f8:	2301      	movs	r3, #1
   1a4fa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1a4fc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1a500:	2004      	movs	r0, #4
   1a502:	f008 f85a 	bl	225ba <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1a506:	4620      	mov	r0, r4
   1a508:	f008 f8df 	bl	226ca <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1a50c:	2004      	movs	r0, #4
   1a50e:	f008 f854 	bl	225ba <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a512:	a801      	add	r0, sp, #4
   1a514:	9401      	str	r4, [sp, #4]
   1a516:	f7ff ff9b 	bl	1a450 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a51a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1a51c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1a520:	4803      	ldr	r0, [pc, #12]	; (1a530 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a522:	40d3      	lsrs	r3, r2
   1a524:	f003 0301 	and.w	r3, r3, #1
   1a528:	1ac0      	subs	r0, r0, r3
   1a52a:	b003      	add	sp, #12
   1a52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a52e:	bf00      	nop
   1a530:	0bad0001 	.word	0x0bad0001

0001a534 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1a534:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a536:	4c14      	ldr	r4, [pc, #80]	; (1a588 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a538:	4a14      	ldr	r2, [pc, #80]	; (1a58c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a53a:	4915      	ldr	r1, [pc, #84]	; (1a590 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a53c:	2303      	movs	r3, #3
   1a53e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a540:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a542:	4b14      	ldr	r3, [pc, #80]	; (1a594 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1a544:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a546:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a548:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a54c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1a54e:	2300      	movs	r3, #0
   1a550:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a552:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a554:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1a556:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a558:	4a0f      	ldr	r2, [pc, #60]	; (1a598 <_DoInit+0x64>)
   1a55a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1a55c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a55e:	2210      	movs	r2, #16
   1a560:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a562:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a564:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a566:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1a568:	f008 ff1a 	bl	233a0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a56c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a570:	490a      	ldr	r1, [pc, #40]	; (1a59c <_DoInit+0x68>)
   1a572:	4620      	mov	r0, r4
   1a574:	f008 ff14 	bl	233a0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a578:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1a57c:	2320      	movs	r3, #32
   1a57e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a580:	f3bf 8f5f 	dmb	sy
}
   1a584:	bd10      	pop	{r4, pc}
   1a586:	bf00      	nop
   1a588:	2000276c 	.word	0x2000276c
   1a58c:	000249b4 	.word	0x000249b4
   1a590:	000249bd 	.word	0x000249bd
   1a594:	200039c0 	.word	0x200039c0
   1a598:	200039b0 	.word	0x200039b0
   1a59c:	000249c1 	.word	0x000249c1

0001a5a0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a5a0:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1a5a2:	4b16      	ldr	r3, [pc, #88]	; (1a5fc <SEGGER_RTT_WriteNoLock+0x5c>)
   1a5a4:	2418      	movs	r4, #24
   1a5a6:	fb00 4504 	mla	r5, r0, r4, r4
   1a5aa:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1a5ac:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a5b0:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1a5b2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1a5b4:	2c01      	cmp	r4, #1
   1a5b6:	d00e      	beq.n	1a5d6 <SEGGER_RTT_WriteNoLock+0x36>
   1a5b8:	2c02      	cmp	r4, #2
   1a5ba:	d018      	beq.n	1a5ee <SEGGER_RTT_WriteNoLock+0x4e>
   1a5bc:	b9e4      	cbnz	r4, 1a5f8 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1a5be:	4628      	mov	r0, r5
   1a5c0:	f008 f890 	bl	226e4 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1a5c4:	4286      	cmp	r6, r0
   1a5c6:	d804      	bhi.n	1a5d2 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1a5c8:	4632      	mov	r2, r6
   1a5ca:	4628      	mov	r0, r5
   1a5cc:	f008 f893 	bl	226f6 <_WriteNoCheck>
   1a5d0:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1a5d2:	4620      	mov	r0, r4
   1a5d4:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1a5d6:	4628      	mov	r0, r5
   1a5d8:	f008 f884 	bl	226e4 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a5dc:	4286      	cmp	r6, r0
   1a5de:	4634      	mov	r4, r6
   1a5e0:	bf28      	it	cs
   1a5e2:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1a5e4:	4622      	mov	r2, r4
   1a5e6:	4628      	mov	r0, r5
   1a5e8:	f008 f885 	bl	226f6 <_WriteNoCheck>
    break;
   1a5ec:	e7f1      	b.n	1a5d2 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1a5ee:	4628      	mov	r0, r5
}
   1a5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1a5f4:	f008 b89e 	b.w	22734 <_WriteBlocking>
  switch (pRing->Flags) {
   1a5f8:	2400      	movs	r4, #0
  return Status;
   1a5fa:	e7ea      	b.n	1a5d2 <SEGGER_RTT_WriteNoLock+0x32>
   1a5fc:	2000276c 	.word	0x2000276c

0001a600 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a600:	4b0e      	ldr	r3, [pc, #56]	; (1a63c <z_sys_init_run_level+0x3c>)
{
   1a602:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a604:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a608:	3001      	adds	r0, #1
   1a60a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a60e:	42a6      	cmp	r6, r4
   1a610:	d800      	bhi.n	1a614 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1a612:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1a614:	e9d4 3500 	ldrd	r3, r5, [r4]
   1a618:	4628      	mov	r0, r5
   1a61a:	4798      	blx	r3
		if (dev != NULL) {
   1a61c:	b165      	cbz	r5, 1a638 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1a61e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1a620:	b130      	cbz	r0, 1a630 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1a622:	2800      	cmp	r0, #0
   1a624:	bfb8      	it	lt
   1a626:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1a628:	28ff      	cmp	r0, #255	; 0xff
   1a62a:	bfa8      	it	ge
   1a62c:	20ff      	movge	r0, #255	; 0xff
   1a62e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1a630:	785a      	ldrb	r2, [r3, #1]
   1a632:	f042 0201 	orr.w	r2, r2, #1
   1a636:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a638:	3408      	adds	r4, #8
   1a63a:	e7e8      	b.n	1a60e <z_sys_init_run_level+0xe>
   1a63c:	000240c4 	.word	0x000240c4

0001a640 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1a640:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1a642:	4605      	mov	r5, r0
   1a644:	b910      	cbnz	r0, 1a64c <z_impl_device_get_binding+0xc>
		return NULL;
   1a646:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1a648:	4620      	mov	r0, r4
   1a64a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1a64c:	7803      	ldrb	r3, [r0, #0]
   1a64e:	2b00      	cmp	r3, #0
   1a650:	d0f9      	beq.n	1a646 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a652:	4c0e      	ldr	r4, [pc, #56]	; (1a68c <z_impl_device_get_binding+0x4c>)
   1a654:	4e0e      	ldr	r6, [pc, #56]	; (1a690 <z_impl_device_get_binding+0x50>)
   1a656:	42b4      	cmp	r4, r6
   1a658:	d108      	bne.n	1a66c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a65a:	4c0c      	ldr	r4, [pc, #48]	; (1a68c <z_impl_device_get_binding+0x4c>)
   1a65c:	42b4      	cmp	r4, r6
   1a65e:	d0f2      	beq.n	1a646 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a660:	4620      	mov	r0, r4
   1a662:	f008 f89b 	bl	2279c <z_device_is_ready>
   1a666:	b950      	cbnz	r0, 1a67e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a668:	3418      	adds	r4, #24
   1a66a:	e7f7      	b.n	1a65c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1a66c:	4620      	mov	r0, r4
   1a66e:	f008 f895 	bl	2279c <z_device_is_ready>
   1a672:	b110      	cbz	r0, 1a67a <z_impl_device_get_binding+0x3a>
   1a674:	6823      	ldr	r3, [r4, #0]
   1a676:	42ab      	cmp	r3, r5
   1a678:	d0e6      	beq.n	1a648 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a67a:	3418      	adds	r4, #24
   1a67c:	e7eb      	b.n	1a656 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a67e:	6821      	ldr	r1, [r4, #0]
   1a680:	4628      	mov	r0, r5
   1a682:	f7f2 f9a8 	bl	c9d6 <strcmp>
   1a686:	2800      	cmp	r0, #0
   1a688:	d1ee      	bne.n	1a668 <z_impl_device_get_binding+0x28>
   1a68a:	e7dd      	b.n	1a648 <z_impl_device_get_binding+0x8>
   1a68c:	00023504 	.word	0x00023504
   1a690:	000235c4 	.word	0x000235c4

0001a694 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1a694:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1a696:	4b0a      	ldr	r3, [pc, #40]	; (1a6c0 <bg_thread_main+0x2c>)
   1a698:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a69a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1a69c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a69e:	f7ff ffaf 	bl	1a600 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1a6a2:	f001 fadf 	bl	1bc64 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a6a6:	2003      	movs	r0, #3
   1a6a8:	f7ff ffaa 	bl	1a600 <z_sys_init_run_level>

	z_init_static_threads();
   1a6ac:	f000 f97c 	bl	1a9a8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1a6b0:	f7f7 fb12 	bl	11cd8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a6b4:	4a03      	ldr	r2, [pc, #12]	; (1a6c4 <bg_thread_main+0x30>)
   1a6b6:	7b13      	ldrb	r3, [r2, #12]
   1a6b8:	f023 0301 	bic.w	r3, r3, #1
   1a6bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a6be:	bd08      	pop	{r3, pc}
   1a6c0:	20003dc0 	.word	0x20003dc0
   1a6c4:	20001cf0 	.word	0x20001cf0

0001a6c8 <z_bss_zero>:
{
   1a6c8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1a6ca:	4803      	ldr	r0, [pc, #12]	; (1a6d8 <z_bss_zero+0x10>)
   1a6cc:	4a03      	ldr	r2, [pc, #12]	; (1a6dc <z_bss_zero+0x14>)
   1a6ce:	2100      	movs	r1, #0
   1a6d0:	1a12      	subs	r2, r2, r0
   1a6d2:	f008 f888 	bl	227e6 <z_early_memset>
}
   1a6d6:	bd08      	pop	{r3, pc}
   1a6d8:	20000b90 	.word	0x20000b90
   1a6dc:	20003dc4 	.word	0x20003dc4

0001a6e0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1a6e0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1a6e2:	2300      	movs	r3, #0
{
   1a6e4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1a6e6:	2201      	movs	r2, #1
   1a6e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1a6ec:	4e13      	ldr	r6, [pc, #76]	; (1a73c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a6ee:	4d14      	ldr	r5, [pc, #80]	; (1a740 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1a6f0:	9301      	str	r3, [sp, #4]
   1a6f2:	220f      	movs	r2, #15
   1a6f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1a6f8:	4912      	ldr	r1, [pc, #72]	; (1a744 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a6fa:	2318      	movs	r3, #24
   1a6fc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1a700:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1a704:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1a706:	f44f 70b0 	mov.w	r0, #352	; 0x160
   1a70a:	fb00 1104 	mla	r1, r0, r4, r1
   1a70e:	4b0e      	ldr	r3, [pc, #56]	; (1a748 <z_init_cpu+0x68>)
   1a710:	9500      	str	r5, [sp, #0]
   1a712:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a716:	4630      	mov	r0, r6
   1a718:	f000 f8e8 	bl	1a8ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a71c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1a71e:	480b      	ldr	r0, [pc, #44]	; (1a74c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1a720:	752c      	strb	r4, [r5, #20]
   1a722:	f023 0304 	bic.w	r3, r3, #4
   1a726:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1a728:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1a72c:	fb03 0404 	mla	r4, r3, r4, r0
   1a730:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1a732:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1a734:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1a736:	b006      	add	sp, #24
   1a738:	bd70      	pop	{r4, r5, r6, pc}
   1a73a:	bf00      	nop
   1a73c:	20001c70 	.word	0x20001c70
   1a740:	20002814 	.word	0x20002814
   1a744:	20005820 	.word	0x20005820
   1a748:	0001aa61 	.word	0x0001aa61
   1a74c:	20005980 	.word	0x20005980

0001a750 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1a750:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1a752:	4b2e      	ldr	r3, [pc, #184]	; (1a80c <z_cstart+0xbc>)
   1a754:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a756:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1a75a:	4d2d      	ldr	r5, [pc, #180]	; (1a810 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1a75c:	4e2d      	ldr	r6, [pc, #180]	; (1a814 <z_cstart+0xc4>)
   1a75e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a760:	4f2d      	ldr	r7, [pc, #180]	; (1a818 <z_cstart+0xc8>)
   1a762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a766:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a768:	23e0      	movs	r3, #224	; 0xe0
   1a76a:	2400      	movs	r4, #0
   1a76c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1a770:	2320      	movs	r3, #32
   1a772:	77eb      	strb	r3, [r5, #31]
   1a774:	762c      	strb	r4, [r5, #24]
   1a776:	766c      	strb	r4, [r5, #25]
   1a778:	76ac      	strb	r4, [r5, #26]
   1a77a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a77e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a780:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a784:	626b      	str	r3, [r5, #36]	; 0x24
   1a786:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a78a:	f7f8 ffcb 	bl	13724 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a78e:	f7f8 fd73 	bl	13278 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a792:	f04f 33ff 	mov.w	r3, #4294967295
   1a796:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a798:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1a79a:	f7f9 f8fb 	bl	13994 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1a79e:	f7f9 f863 	bl	13868 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a7a2:	f240 1301 	movw	r3, #257	; 0x101
   1a7a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1a7aa:	ab06      	add	r3, sp, #24
   1a7ac:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1a7ae:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1a7b2:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1a7b4:	f007 fff1 	bl	2279a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1a7b8:	4620      	mov	r0, r4
   1a7ba:	f7ff ff21 	bl	1a600 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a7be:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1a7c0:	4d16      	ldr	r5, [pc, #88]	; (1a81c <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a7c2:	f7ff ff1d 	bl	1a600 <z_sys_init_run_level>
	z_sched_init();
   1a7c6:	f000 fea7 	bl	1b518 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a7ca:	4b15      	ldr	r3, [pc, #84]	; (1a820 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   1a7cc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a7ce:	9305      	str	r3, [sp, #20]
   1a7d0:	2301      	movs	r3, #1
   1a7d2:	4914      	ldr	r1, [pc, #80]	; (1a824 <z_cstart+0xd4>)
   1a7d4:	9400      	str	r4, [sp, #0]
   1a7d6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1a7da:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a7de:	463b      	mov	r3, r7
   1a7e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a7e4:	4628      	mov	r0, r5
   1a7e6:	f000 f881 	bl	1a8ec <z_setup_new_thread>
   1a7ea:	7b6a      	ldrb	r2, [r5, #13]
   1a7ec:	4606      	mov	r6, r0
   1a7ee:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1a7f2:	4628      	mov	r0, r5
   1a7f4:	736a      	strb	r2, [r5, #13]
   1a7f6:	f008 faf6 	bl	22de6 <z_ready_thread>
	z_init_cpu(0);
   1a7fa:	4620      	mov	r0, r4
   1a7fc:	f7ff ff70 	bl	1a6e0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a800:	463a      	mov	r2, r7
   1a802:	4631      	mov	r1, r6
   1a804:	4628      	mov	r0, r5
   1a806:	f7f8 fe55 	bl	134b4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a80a:	bf00      	nop
   1a80c:	200061a0 	.word	0x200061a0
   1a810:	e000ed00 	.word	0xe000ed00
   1a814:	20002814 	.word	0x20002814
   1a818:	0001a695 	.word	0x0001a695
   1a81c:	20001cf0 	.word	0x20001cf0
   1a820:	000249c8 	.word	0x000249c8
   1a824:	20005000 	.word	0x20005000

0001a828 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1a828:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1a82a:	4c06      	ldr	r4, [pc, #24]	; (1a844 <statics_init+0x1c>)
   1a82c:	4d06      	ldr	r5, [pc, #24]	; (1a848 <statics_init+0x20>)
   1a82e:	42ac      	cmp	r4, r5
   1a830:	d301      	bcc.n	1a836 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1a832:	2000      	movs	r0, #0
   1a834:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a836:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a83a:	4620      	mov	r0, r4
   1a83c:	f007 ffd7 	bl	227ee <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1a840:	3414      	adds	r4, #20
   1a842:	e7f4      	b.n	1a82e <statics_init+0x6>
   1a844:	20000a08 	.word	0x20000a08
   1a848:	20000a08 	.word	0x20000a08

0001a84c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a84c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a84e:	4b0e      	ldr	r3, [pc, #56]	; (1a888 <init_mem_slab_module+0x3c>)
   1a850:	4c0e      	ldr	r4, [pc, #56]	; (1a88c <init_mem_slab_module+0x40>)
   1a852:	42a3      	cmp	r3, r4
   1a854:	d301      	bcc.n	1a85a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1a856:	2000      	movs	r0, #0
	return rc;
}
   1a858:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a85a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1a85e:	ea41 0200 	orr.w	r2, r1, r0
   1a862:	f012 0203 	ands.w	r2, r2, #3
   1a866:	d10b      	bne.n	1a880 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1a868:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1a86a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a86c:	42aa      	cmp	r2, r5
   1a86e:	d101      	bne.n	1a874 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a870:	331c      	adds	r3, #28
   1a872:	e7ee      	b.n	1a852 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1a874:	695e      	ldr	r6, [r3, #20]
   1a876:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a878:	3201      	adds	r2, #1
		slab->free_list = p;
   1a87a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1a87c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1a87e:	e7f5      	b.n	1a86c <init_mem_slab_module+0x20>
	return rc;
   1a880:	f06f 0015 	mvn.w	r0, #21
   1a884:	e7e8      	b.n	1a858 <init_mem_slab_module+0xc>
   1a886:	bf00      	nop
   1a888:	200009b4 	.word	0x200009b4
   1a88c:	20000a08 	.word	0x20000a08

0001a890 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a890:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a892:	460c      	mov	r4, r1
	__asm__ volatile(
   1a894:	f04f 0540 	mov.w	r5, #64	; 0x40
   1a898:	f3ef 8111 	mrs	r1, BASEPRI
   1a89c:	f385 8812 	msr	BASEPRI_MAX, r5
   1a8a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1a8a4:	6945      	ldr	r5, [r0, #20]
   1a8a6:	b15d      	cbz	r5, 1a8c0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1a8a8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1a8aa:	682b      	ldr	r3, [r5, #0]
   1a8ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1a8ae:	6983      	ldr	r3, [r0, #24]
   1a8b0:	3301      	adds	r3, #1
   1a8b2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1a8b4:	2000      	movs	r0, #0
	__asm__ volatile(
   1a8b6:	f381 8811 	msr	BASEPRI, r1
   1a8ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1a8be:	e011      	b.n	1a8e4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1a8c0:	ea52 0c03 	orrs.w	ip, r2, r3
   1a8c4:	d103      	bne.n	1a8ce <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1a8c6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1a8c8:	f06f 000b 	mvn.w	r0, #11
   1a8cc:	e7f3      	b.n	1a8b6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1a8ce:	e9cd 2300 	strd	r2, r3, [sp]
   1a8d2:	4602      	mov	r2, r0
   1a8d4:	3008      	adds	r0, #8
   1a8d6:	f000 fd75 	bl	1b3c4 <z_pend_curr>
		if (result == 0) {
   1a8da:	b918      	cbnz	r0, 1a8e4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1a8dc:	4b02      	ldr	r3, [pc, #8]	; (1a8e8 <k_mem_slab_alloc+0x58>)
   1a8de:	689b      	ldr	r3, [r3, #8]
   1a8e0:	695b      	ldr	r3, [r3, #20]
   1a8e2:	6023      	str	r3, [r4, #0]
}
   1a8e4:	b003      	add	sp, #12
   1a8e6:	bd30      	pop	{r4, r5, pc}
   1a8e8:	20002814 	.word	0x20002814

0001a8ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1a8ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1a8f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1a8f2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1a8f4:	2604      	movs	r6, #4
   1a8f6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1a8f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1a8fa:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1a8fc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1a900:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a902:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1a904:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1a90a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a90c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1a910:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1a912:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1a916:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1a91a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1a91c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1a91e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a920:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a924:	9202      	str	r2, [sp, #8]
   1a926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a928:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1a92a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a92e:	9200      	str	r2, [sp, #0]
   1a930:	4642      	mov	r2, r8
{
   1a932:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a934:	f7f8 fd8c 	bl	13450 <arch_new_thread>
	if (!_current) {
   1a938:	4b04      	ldr	r3, [pc, #16]	; (1a94c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1a93a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1a93c:	689b      	ldr	r3, [r3, #8]
   1a93e:	b103      	cbz	r3, 1a942 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1a940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1a942:	6763      	str	r3, [r4, #116]	; 0x74
}
   1a944:	4640      	mov	r0, r8
   1a946:	b004      	add	sp, #16
   1a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a94c:	20002814 	.word	0x20002814

0001a950 <z_impl_k_thread_create>:
{
   1a950:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a952:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a954:	2700      	movs	r7, #0
   1a956:	9705      	str	r7, [sp, #20]
   1a958:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1a95a:	9704      	str	r7, [sp, #16]
   1a95c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1a95e:	9703      	str	r7, [sp, #12]
   1a960:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1a962:	9702      	str	r7, [sp, #8]
{
   1a964:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a968:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1a96a:	9701      	str	r7, [sp, #4]
   1a96c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1a96e:	9700      	str	r7, [sp, #0]
{
   1a970:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a972:	f7ff ffbb 	bl	1a8ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a976:	f1b5 3fff 	cmp.w	r5, #4294967295
   1a97a:	bf08      	it	eq
   1a97c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a980:	d005      	beq.n	1a98e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a982:	ea55 0306 	orrs.w	r3, r5, r6
   1a986:	d105      	bne.n	1a994 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1a988:	4620      	mov	r0, r4
   1a98a:	f000 fcbf 	bl	1b30c <z_sched_start>
}
   1a98e:	4620      	mov	r0, r4
   1a990:	b007      	add	sp, #28
   1a992:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a994:	4903      	ldr	r1, [pc, #12]	; (1a9a4 <z_impl_k_thread_create+0x54>)
   1a996:	4632      	mov	r2, r6
   1a998:	462b      	mov	r3, r5
   1a99a:	f104 0018 	add.w	r0, r4, #24
   1a99e:	f000 ff37 	bl	1b810 <z_add_timeout>
   1a9a2:	e7f4      	b.n	1a98e <z_impl_k_thread_create+0x3e>
   1a9a4:	00022e07 	.word	0x00022e07

0001a9a8 <z_init_static_threads>:
{
   1a9a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9ac:	4c29      	ldr	r4, [pc, #164]	; (1aa54 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1a9ae:	4d2a      	ldr	r5, [pc, #168]	; (1aa58 <z_init_static_threads+0xb0>)
{
   1a9b0:	b087      	sub	sp, #28
   1a9b2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1a9b4:	42ae      	cmp	r6, r5
   1a9b6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1a9ba:	d30f      	bcc.n	1a9dc <z_init_static_threads+0x34>
	k_sched_lock();
   1a9bc:	f000 fbc0 	bl	1b140 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a9c0:	4c24      	ldr	r4, [pc, #144]	; (1aa54 <z_init_static_threads+0xac>)
   1a9c2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1aa5c <z_init_static_threads+0xb4>
   1a9c6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a9ca:	f240 37e7 	movw	r7, #999	; 0x3e7
   1a9ce:	42ac      	cmp	r4, r5
   1a9d0:	d320      	bcc.n	1aa14 <z_init_static_threads+0x6c>
}
   1a9d2:	b007      	add	sp, #28
   1a9d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1a9d8:	f000 bd82 	b.w	1b4e0 <k_sched_unlock>
		z_setup_new_thread(
   1a9dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a9e0:	9305      	str	r3, [sp, #20]
   1a9e2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a9e6:	9304      	str	r3, [sp, #16]
   1a9e8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a9ec:	9303      	str	r3, [sp, #12]
   1a9ee:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a9f2:	9302      	str	r3, [sp, #8]
   1a9f4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a9f8:	9301      	str	r3, [sp, #4]
   1a9fa:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a9fe:	9300      	str	r3, [sp, #0]
   1aa00:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1aa04:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1aa08:	f7ff ff70 	bl	1a8ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1aa0c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1aa10:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1aa12:	e7ce      	b.n	1a9b2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1aa14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1aa16:	1c5a      	adds	r2, r3, #1
   1aa18:	d00d      	beq.n	1aa36 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1aa1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1aa1e:	2100      	movs	r1, #0
   1aa20:	4638      	mov	r0, r7
   1aa22:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aa26:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1aa2a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aa2e:	d104      	bne.n	1aa3a <z_init_static_threads+0x92>
	z_sched_start(thread);
   1aa30:	4640      	mov	r0, r8
   1aa32:	f000 fc6b 	bl	1b30c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1aa36:	3430      	adds	r4, #48	; 0x30
   1aa38:	e7c9      	b.n	1a9ce <z_init_static_threads+0x26>
   1aa3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aa3e:	2300      	movs	r3, #0
   1aa40:	f7e6 f9e6 	bl	e10 <__aeabi_uldivmod>
   1aa44:	4602      	mov	r2, r0
   1aa46:	460b      	mov	r3, r1
   1aa48:	f108 0018 	add.w	r0, r8, #24
   1aa4c:	4649      	mov	r1, r9
   1aa4e:	f000 fedf 	bl	1b810 <z_add_timeout>
   1aa52:	e7f0      	b.n	1aa36 <z_init_static_threads+0x8e>
   1aa54:	200009b4 	.word	0x200009b4
   1aa58:	200009b4 	.word	0x200009b4
   1aa5c:	00022e07 	.word	0x00022e07

0001aa60 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1aa60:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1aa62:	4c0b      	ldr	r4, [pc, #44]	; (1aa90 <idle+0x30>)
	return !z_sys_post_kernel;
   1aa64:	4d0b      	ldr	r5, [pc, #44]	; (1aa94 <idle+0x34>)
	__asm__ volatile(
   1aa66:	f04f 0240 	mov.w	r2, #64	; 0x40
   1aa6a:	f3ef 8311 	mrs	r3, BASEPRI
   1aa6e:	f382 8812 	msr	BASEPRI_MAX, r2
   1aa72:	f3bf 8f6f 	isb	sy
   1aa76:	f008 fa82 	bl	22f7e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1aa7a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1aa7c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1aa7e:	b913      	cbnz	r3, 1aa86 <idle+0x26>
	arch_cpu_idle();
   1aa80:	f7f8 fc00 	bl	13284 <arch_cpu_idle>
}
   1aa84:	e7ef      	b.n	1aa66 <idle+0x6>
   1aa86:	f7f8 f9f5 	bl	12e74 <pm_system_suspend>
   1aa8a:	2800      	cmp	r0, #0
   1aa8c:	d1eb      	bne.n	1aa66 <idle+0x6>
   1aa8e:	e7f7      	b.n	1aa80 <idle+0x20>
   1aa90:	20002814 	.word	0x20002814
   1aa94:	20003dc0 	.word	0x20003dc0

0001aa98 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1aa98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aa9c:	4604      	mov	r4, r0
   1aa9e:	4617      	mov	r7, r2
   1aaa0:	461e      	mov	r6, r3
   1aaa2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aaa6:	f3ef 8811 	mrs	r8, BASEPRI
   1aaaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1aaae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1aab2:	68c3      	ldr	r3, [r0, #12]
   1aab4:	4a32      	ldr	r2, [pc, #200]	; (1ab80 <z_impl_k_mutex_lock+0xe8>)
   1aab6:	b16b      	cbz	r3, 1aad4 <z_impl_k_mutex_lock+0x3c>
   1aab8:	6880      	ldr	r0, [r0, #8]
   1aaba:	6891      	ldr	r1, [r2, #8]
   1aabc:	4288      	cmp	r0, r1
   1aabe:	d019      	beq.n	1aaf4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1aac0:	ea57 0306 	orrs.w	r3, r7, r6
   1aac4:	d118      	bne.n	1aaf8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1aac6:	f388 8811 	msr	BASEPRI, r8
   1aaca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1aace:	f06f 000f 	mvn.w	r0, #15
   1aad2:	e00c      	b.n	1aaee <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1aad4:	6891      	ldr	r1, [r2, #8]
   1aad6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1aada:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1aadc:	3301      	adds	r3, #1
   1aade:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1aae0:	6893      	ldr	r3, [r2, #8]
   1aae2:	60a3      	str	r3, [r4, #8]
   1aae4:	f388 8811 	msr	BASEPRI, r8
   1aae8:	f3bf 8f6f 	isb	sy
		return 0;
   1aaec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1aaee:	b002      	add	sp, #8
   1aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1aaf4:	6921      	ldr	r1, [r4, #16]
   1aaf6:	e7f0      	b.n	1aada <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1aaf8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1aafc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1ab00:	4299      	cmp	r1, r3
   1ab02:	bfa8      	it	ge
   1ab04:	4619      	movge	r1, r3
   1ab06:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1ab0a:	4291      	cmp	r1, r2
   1ab0c:	bfb8      	it	lt
   1ab0e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1ab10:	428b      	cmp	r3, r1
   1ab12:	dd2e      	ble.n	1ab72 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1ab14:	f007 ff27 	bl	22966 <adjust_owner_prio.isra.0>
   1ab18:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1ab1a:	e9cd 7600 	strd	r7, r6, [sp]
   1ab1e:	4819      	ldr	r0, [pc, #100]	; (1ab84 <z_impl_k_mutex_lock+0xec>)
   1ab20:	4622      	mov	r2, r4
   1ab22:	4641      	mov	r1, r8
   1ab24:	f000 fc4e 	bl	1b3c4 <z_pend_curr>
	if (got_mutex == 0) {
   1ab28:	2800      	cmp	r0, #0
   1ab2a:	d0e0      	beq.n	1aaee <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1ab2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab30:	f3ef 8611 	mrs	r6, BASEPRI
   1ab34:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab38:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1ab3c:	6823      	ldr	r3, [r4, #0]
   1ab3e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab40:	429c      	cmp	r4, r3
   1ab42:	d00a      	beq.n	1ab5a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ab44:	b14b      	cbz	r3, 1ab5a <z_impl_k_mutex_lock+0xc2>
   1ab46:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ab4a:	4299      	cmp	r1, r3
   1ab4c:	bfa8      	it	ge
   1ab4e:	4619      	movge	r1, r3
   1ab50:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1ab54:	4299      	cmp	r1, r3
   1ab56:	bfb8      	it	lt
   1ab58:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ab5a:	68a0      	ldr	r0, [r4, #8]
   1ab5c:	f007 ff03 	bl	22966 <adjust_owner_prio.isra.0>
   1ab60:	b900      	cbnz	r0, 1ab64 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1ab62:	b145      	cbz	r5, 1ab76 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1ab64:	4807      	ldr	r0, [pc, #28]	; (1ab84 <z_impl_k_mutex_lock+0xec>)
   1ab66:	4631      	mov	r1, r6
   1ab68:	f000 fad8 	bl	1b11c <z_reschedule>
	return -EAGAIN;
   1ab6c:	f06f 000a 	mvn.w	r0, #10
   1ab70:	e7bd      	b.n	1aaee <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1ab72:	2500      	movs	r5, #0
   1ab74:	e7d1      	b.n	1ab1a <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1ab76:	f386 8811 	msr	BASEPRI, r6
   1ab7a:	f3bf 8f6f 	isb	sy
   1ab7e:	e7f5      	b.n	1ab6c <z_impl_k_mutex_lock+0xd4>
   1ab80:	20002814 	.word	0x20002814
   1ab84:	20003dc1 	.word	0x20003dc1

0001ab88 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ab88:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1ab8a:	6883      	ldr	r3, [r0, #8]
{
   1ab8c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ab8e:	2b00      	cmp	r3, #0
   1ab90:	d032      	beq.n	1abf8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ab92:	4a1c      	ldr	r2, [pc, #112]	; (1ac04 <z_impl_k_mutex_unlock+0x7c>)
   1ab94:	6892      	ldr	r2, [r2, #8]
   1ab96:	4293      	cmp	r3, r2
   1ab98:	d131      	bne.n	1abfe <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1ab9a:	7bda      	ldrb	r2, [r3, #15]
   1ab9c:	3a01      	subs	r2, #1
   1ab9e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1aba0:	68c3      	ldr	r3, [r0, #12]
   1aba2:	2b01      	cmp	r3, #1
   1aba4:	d905      	bls.n	1abb2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1aba6:	3b01      	subs	r3, #1
   1aba8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1abaa:	f000 fc99 	bl	1b4e0 <k_sched_unlock>

	return 0;
   1abae:	2000      	movs	r0, #0
}
   1abb0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1abb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1abb6:	f3ef 8511 	mrs	r5, BASEPRI
   1abba:	f383 8812 	msr	BASEPRI_MAX, r3
   1abbe:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1abc2:	6901      	ldr	r1, [r0, #16]
   1abc4:	6880      	ldr	r0, [r0, #8]
   1abc6:	f007 fece 	bl	22966 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1abca:	4620      	mov	r0, r4
   1abcc:	f008 f97c 	bl	22ec8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1abd0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1abd2:	b158      	cbz	r0, 1abec <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1abd4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1abd8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1abda:	2200      	movs	r2, #0
   1abdc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1abde:	f008 f902 	bl	22de6 <z_ready_thread>
		z_reschedule(&lock, key);
   1abe2:	4809      	ldr	r0, [pc, #36]	; (1ac08 <z_impl_k_mutex_unlock+0x80>)
   1abe4:	4629      	mov	r1, r5
   1abe6:	f000 fa99 	bl	1b11c <z_reschedule>
   1abea:	e7de      	b.n	1abaa <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1abec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1abee:	f385 8811 	msr	BASEPRI, r5
   1abf2:	f3bf 8f6f 	isb	sy
   1abf6:	e7d8      	b.n	1abaa <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1abf8:	f06f 0015 	mvn.w	r0, #21
   1abfc:	e7d8      	b.n	1abb0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1abfe:	f04f 30ff 	mov.w	r0, #4294967295
   1ac02:	e7d5      	b.n	1abb0 <z_impl_k_mutex_unlock+0x28>
   1ac04:	20002814 	.word	0x20002814
   1ac08:	20003dc1 	.word	0x20003dc1

0001ac0c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1ac0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ac0e:	4611      	mov	r1, r2
	__asm__ volatile(
   1ac10:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ac14:	f3ef 8511 	mrs	r5, BASEPRI
   1ac18:	f382 8812 	msr	BASEPRI_MAX, r2
   1ac1c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1ac20:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1ac22:	b19c      	cbz	r4, 1ac4c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ac24:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ac26:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ac28:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1ac2c:	4294      	cmp	r4, r2
	list->head = node;
   1ac2e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1ac30:	bf08      	it	eq
   1ac32:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1ac34:	2101      	movs	r1, #1
   1ac36:	4620      	mov	r0, r4
   1ac38:	f007 ff08 	bl	22a4c <z_queue_node_peek>
   1ac3c:	4604      	mov	r4, r0
	__asm__ volatile(
   1ac3e:	f385 8811 	msr	BASEPRI, r5
   1ac42:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1ac46:	4620      	mov	r0, r4
   1ac48:	b003      	add	sp, #12
   1ac4a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ac4c:	ea51 0203 	orrs.w	r2, r1, r3
   1ac50:	d0f5      	beq.n	1ac3e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ac52:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1ac56:	e9cd 1300 	strd	r1, r3, [sp]
   1ac5a:	4610      	mov	r0, r2
   1ac5c:	4629      	mov	r1, r5
   1ac5e:	f000 fbb1 	bl	1b3c4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1ac62:	2800      	cmp	r0, #0
   1ac64:	d1ef      	bne.n	1ac46 <z_impl_k_queue_get+0x3a>
   1ac66:	4b02      	ldr	r3, [pc, #8]	; (1ac70 <z_impl_k_queue_get+0x64>)
   1ac68:	689b      	ldr	r3, [r3, #8]
   1ac6a:	695c      	ldr	r4, [r3, #20]
   1ac6c:	e7eb      	b.n	1ac46 <z_impl_k_queue_get+0x3a>
   1ac6e:	bf00      	nop
   1ac70:	20002814 	.word	0x20002814

0001ac74 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ac74:	b538      	push	{r3, r4, r5, lr}
   1ac76:	4604      	mov	r4, r0
	__asm__ volatile(
   1ac78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac7c:	f3ef 8511 	mrs	r5, BASEPRI
   1ac80:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1ac88:	f008 f91e 	bl	22ec8 <z_unpend_first_thread>

	if (thread != NULL) {
   1ac8c:	b148      	cbz	r0, 1aca2 <z_impl_k_sem_give+0x2e>
   1ac8e:	2200      	movs	r2, #0
   1ac90:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ac92:	f008 f8a8 	bl	22de6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1ac96:	4629      	mov	r1, r5
   1ac98:	4808      	ldr	r0, [pc, #32]	; (1acbc <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1ac9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ac9e:	f000 ba3d 	b.w	1b11c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1aca2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1aca6:	429a      	cmp	r2, r3
   1aca8:	bf18      	it	ne
   1acaa:	3301      	addne	r3, #1
   1acac:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1acae:	2102      	movs	r1, #2
   1acb0:	f104 0010 	add.w	r0, r4, #16
   1acb4:	f008 fb1d 	bl	232f2 <z_handle_obj_poll_events>
}
   1acb8:	e7ed      	b.n	1ac96 <z_impl_k_sem_give+0x22>
   1acba:	bf00      	nop
   1acbc:	20003dc1 	.word	0x20003dc1

0001acc0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1acc0:	b513      	push	{r0, r1, r4, lr}
   1acc2:	f04f 0440 	mov.w	r4, #64	; 0x40
   1acc6:	f3ef 8111 	mrs	r1, BASEPRI
   1acca:	f384 8812 	msr	BASEPRI_MAX, r4
   1acce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1acd2:	6884      	ldr	r4, [r0, #8]
   1acd4:	b144      	cbz	r4, 1ace8 <z_impl_k_sem_take+0x28>
		sem->count--;
   1acd6:	3c01      	subs	r4, #1
   1acd8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1acda:	f381 8811 	msr	BASEPRI, r1
   1acde:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1ace2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1ace4:	b002      	add	sp, #8
   1ace6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ace8:	ea52 0403 	orrs.w	r4, r2, r3
   1acec:	d106      	bne.n	1acfc <z_impl_k_sem_take+0x3c>
   1acee:	f381 8811 	msr	BASEPRI, r1
   1acf2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1acf6:	f06f 000f 	mvn.w	r0, #15
   1acfa:	e7f3      	b.n	1ace4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1acfc:	e9cd 2300 	strd	r2, r3, [sp]
   1ad00:	4602      	mov	r2, r0
   1ad02:	4802      	ldr	r0, [pc, #8]	; (1ad0c <z_impl_k_sem_take+0x4c>)
   1ad04:	f000 fb5e 	bl	1b3c4 <z_pend_curr>
	return ret;
   1ad08:	e7ec      	b.n	1ace4 <z_impl_k_sem_take+0x24>
   1ad0a:	bf00      	nop
   1ad0c:	20003dc1 	.word	0x20003dc1

0001ad10 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1ad10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1ad12:	4b09      	ldr	r3, [pc, #36]	; (1ad38 <k_sys_work_q_init+0x28>)
   1ad14:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1ad16:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1ad18:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1ad1a:	9300      	str	r3, [sp, #0]
   1ad1c:	4907      	ldr	r1, [pc, #28]	; (1ad3c <k_sys_work_q_init+0x2c>)
   1ad1e:	4808      	ldr	r0, [pc, #32]	; (1ad40 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1ad20:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1ad24:	f04f 33ff 	mov.w	r3, #4294967295
   1ad28:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ad2c:	f000 f914 	bl	1af58 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1ad30:	4620      	mov	r0, r4
   1ad32:	b004      	add	sp, #16
   1ad34:	bd10      	pop	{r4, pc}
   1ad36:	bf00      	nop
   1ad38:	000249cd 	.word	0x000249cd
   1ad3c:	200061a0 	.word	0x200061a0
   1ad40:	20001d70 	.word	0x20001d70

0001ad44 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1ad48:	4e47      	ldr	r6, [pc, #284]	; (1ae68 <work_queue_main+0x124>)
   1ad4a:	b085      	sub	sp, #20
   1ad4c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1ad4e:	f04f 38ff 	mov.w	r8, #4294967295
   1ad52:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1ad56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad5a:	f3ef 8711 	mrs	r7, BASEPRI
   1ad5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad62:	f3bf 8f6f 	isb	sy
   1ad66:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1ad6a:	b98d      	cbnz	r5, 1ad90 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1ad6c:	2102      	movs	r1, #2
   1ad6e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1ad72:	f007 fee4 	bl	22b3e <flag_test_and_clear>
   1ad76:	2800      	cmp	r0, #0
   1ad78:	d135      	bne.n	1ade6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	e9cd 8900 	strd	r8, r9, [sp]
   1ad80:	9302      	str	r3, [sp, #8]
   1ad82:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1ad86:	4639      	mov	r1, r7
   1ad88:	4838      	ldr	r0, [pc, #224]	; (1ae6c <work_queue_main+0x128>)
   1ad8a:	f000 fccb 	bl	1b724 <z_sched_wait>
			continue;
   1ad8e:	e7e2      	b.n	1ad56 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad90:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1ad94:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ad96:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ad9a:	4295      	cmp	r5, r2
   1ad9c:	d101      	bne.n	1ada2 <work_queue_main+0x5e>
	list->tail = node;
   1ad9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1ada2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1ada6:	f043 0302 	orr.w	r3, r3, #2
   1adaa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1adae:	68eb      	ldr	r3, [r5, #12]
   1adb0:	f023 0304 	bic.w	r3, r3, #4
   1adb4:	f043 0301 	orr.w	r3, r3, #1
   1adb8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1adba:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1adbc:	f387 8811 	msr	BASEPRI, r7
   1adc0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1adc4:	4628      	mov	r0, r5
   1adc6:	4798      	blx	r3
	__asm__ volatile(
   1adc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1adcc:	f3ef 8b11 	mrs	fp, BASEPRI
   1add0:	f383 8812 	msr	BASEPRI_MAX, r3
   1add4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1add8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1adda:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1addc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1ade0:	d40b      	bmi.n	1adfa <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1ade2:	60ea      	str	r2, [r5, #12]
   1ade4:	e00e      	b.n	1ae04 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1ade6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1adea:	2200      	movs	r2, #0
   1adec:	2101      	movs	r1, #1
   1adee:	4628      	mov	r0, r5
   1adf0:	f008 f892 	bl	22f18 <z_sched_wake>
   1adf4:	2800      	cmp	r0, #0
   1adf6:	d1f8      	bne.n	1adea <work_queue_main+0xa6>
   1adf8:	e7bf      	b.n	1ad7a <work_queue_main+0x36>
	return list->head;
   1adfa:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1adfc:	f023 0303 	bic.w	r3, r3, #3
   1ae00:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ae02:	b970      	cbnz	r0, 1ae22 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1ae04:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1ae08:	f023 0302 	bic.w	r3, r3, #2
   1ae0c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1ae10:	f38b 8811 	msr	BASEPRI, fp
   1ae14:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1ae18:	05d8      	lsls	r0, r3, #23
   1ae1a:	d49c      	bmi.n	1ad56 <work_queue_main+0x12>
	z_impl_k_yield();
   1ae1c:	f000 fb88 	bl	1b530 <z_impl_k_yield>
}
   1ae20:	e799      	b.n	1ad56 <work_queue_main+0x12>
	return node->next;
   1ae22:	2700      	movs	r7, #0
   1ae24:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1ae28:	463b      	mov	r3, r7
		if (wc->work == work) {
   1ae2a:	6842      	ldr	r2, [r0, #4]
   1ae2c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1ae2e:	4601      	mov	r1, r0
		if (wc->work == work) {
   1ae30:	d10c      	bne.n	1ae4c <work_queue_main+0x108>
	return node->next;
   1ae32:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae34:	b997      	cbnz	r7, 1ae5c <work_queue_main+0x118>
   1ae36:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1ae38:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae3a:	4282      	cmp	r2, r0
   1ae3c:	d100      	bne.n	1ae40 <work_queue_main+0xfc>
	list->tail = node;
   1ae3e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1ae40:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1ae44:	f7ff ff16 	bl	1ac74 <z_impl_k_sem_give>
}
   1ae48:	4639      	mov	r1, r7
   1ae4a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1ae4c:	f1ba 0f00 	cmp.w	sl, #0
   1ae50:	d0d8      	beq.n	1ae04 <work_queue_main+0xc0>
	return node->next;
   1ae52:	4650      	mov	r0, sl
   1ae54:	460f      	mov	r7, r1
   1ae56:	f8da a000 	ldr.w	sl, [sl]
   1ae5a:	e7e6      	b.n	1ae2a <work_queue_main+0xe6>
	return list->tail;
   1ae5c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1ae5e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ae60:	4290      	cmp	r0, r2
	list->tail = node;
   1ae62:	bf08      	it	eq
   1ae64:	6077      	streq	r7, [r6, #4]
}
   1ae66:	e7eb      	b.n	1ae40 <work_queue_main+0xfc>
   1ae68:	2000283c 	.word	0x2000283c
   1ae6c:	20003dc1 	.word	0x20003dc1

0001ae70 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1ae70:	68c3      	ldr	r3, [r0, #12]
{
   1ae72:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1ae74:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1ae78:	079b      	lsls	r3, r3, #30
{
   1ae7a:	4605      	mov	r5, r0
   1ae7c:	460c      	mov	r4, r1
	if (ret) {
   1ae7e:	d50d      	bpl.n	1ae9c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ae80:	2201      	movs	r2, #1
   1ae82:	2100      	movs	r1, #0
   1ae84:	f104 0008 	add.w	r0, r4, #8
   1ae88:	f007 fe49 	bl	22b1e <z_impl_k_sem_init>
	parent->next = child;
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ae90:	4b05      	ldr	r3, [pc, #20]	; (1aea8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1ae92:	6065      	str	r5, [r4, #4]
   1ae94:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1ae96:	b91a      	cbnz	r2, 1aea0 <cancel_sync_locked+0x30>
	list->head = node;
   1ae98:	e9c3 4400 	strd	r4, r4, [r3]
}
   1ae9c:	4630      	mov	r0, r6
   1ae9e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1aea0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1aea2:	605c      	str	r4, [r3, #4]
}
   1aea4:	e7fa      	b.n	1ae9c <cancel_sync_locked+0x2c>
   1aea6:	bf00      	nop
   1aea8:	2000283c 	.word	0x2000283c

0001aeac <submit_to_queue_locked>:
{
   1aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1aeae:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1aeb0:	079a      	lsls	r2, r3, #30
{
   1aeb2:	4604      	mov	r4, r0
   1aeb4:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1aeb6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1aeba:	d41f      	bmi.n	1aefc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1aebc:	075f      	lsls	r7, r3, #29
   1aebe:	d41f      	bmi.n	1af00 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1aec0:	680a      	ldr	r2, [r1, #0]
   1aec2:	b90a      	cbnz	r2, 1aec8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1aec4:	6882      	ldr	r2, [r0, #8]
   1aec6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1aec8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1aeca:	bf44      	itt	mi
   1aecc:	68a3      	ldrmi	r3, [r4, #8]
   1aece:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1aed0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1aed2:	bf4c      	ite	mi
   1aed4:	2502      	movmi	r5, #2
		ret = 1;
   1aed6:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1aed8:	b37f      	cbz	r7, 1af3a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1aeda:	4b1b      	ldr	r3, [pc, #108]	; (1af48 <submit_to_queue_locked+0x9c>)
   1aedc:	689b      	ldr	r3, [r3, #8]
   1aede:	42bb      	cmp	r3, r7
   1aee0:	d111      	bne.n	1af06 <submit_to_queue_locked+0x5a>
   1aee2:	f007 fd2e 	bl	22942 <k_is_in_isr>
   1aee6:	f080 0001 	eor.w	r0, r0, #1
   1aeea:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1aeec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1aef0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1aef2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1aef6:	d523      	bpl.n	1af40 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1aef8:	b13a      	cbz	r2, 1af0a <submit_to_queue_locked+0x5e>
   1aefa:	b940      	cbnz	r0, 1af0e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1aefc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1af00:	2300      	movs	r3, #0
   1af02:	6033      	str	r3, [r6, #0]
	return ret;
   1af04:	e013      	b.n	1af2e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1af06:	2000      	movs	r0, #0
   1af08:	e7f0      	b.n	1aeec <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1af0a:	071b      	lsls	r3, r3, #28
   1af0c:	d4f6      	bmi.n	1aefc <submit_to_queue_locked+0x50>
	parent->next = child;
   1af0e:	2300      	movs	r3, #0
   1af10:	6023      	str	r3, [r4, #0]
	return list->tail;
   1af12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1af16:	b963      	cbnz	r3, 1af32 <submit_to_queue_locked+0x86>
	list->head = node;
   1af18:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1af1c:	4638      	mov	r0, r7
   1af1e:	f007 fe27 	bl	22b70 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1af22:	68e3      	ldr	r3, [r4, #12]
   1af24:	f043 0304 	orr.w	r3, r3, #4
   1af28:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1af2a:	6833      	ldr	r3, [r6, #0]
   1af2c:	60a3      	str	r3, [r4, #8]
}
   1af2e:	4628      	mov	r0, r5
   1af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1af32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1af34:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1af38:	e7f0      	b.n	1af1c <submit_to_queue_locked+0x70>
		return -EINVAL;
   1af3a:	f06f 0515 	mvn.w	r5, #21
   1af3e:	e7df      	b.n	1af00 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1af40:	f06f 0512 	mvn.w	r5, #18
   1af44:	e7dc      	b.n	1af00 <submit_to_queue_locked+0x54>
   1af46:	bf00      	nop
   1af48:	20002814 	.word	0x20002814

0001af4c <k_work_submit>:
{
   1af4c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1af4e:	4801      	ldr	r0, [pc, #4]	; (1af54 <k_work_submit+0x8>)
   1af50:	f007 be7e 	b.w	22c50 <k_work_submit_to_queue>
   1af54:	20001d70 	.word	0x20001d70

0001af58 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1af58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af5a:	b089      	sub	sp, #36	; 0x24
   1af5c:	4604      	mov	r4, r0
	list->head = NULL;
   1af5e:	2000      	movs	r0, #0
	list->tail = NULL;
   1af60:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1af64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1af66:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1af6a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1af6e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1af72:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1af76:	b31d      	cbz	r5, 1afc0 <k_work_queue_start+0x68>
   1af78:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1af7a:	2800      	cmp	r0, #0
   1af7c:	f240 1001 	movw	r0, #257	; 0x101
   1af80:	bf08      	it	eq
   1af82:	2001      	moveq	r0, #1
	*flagp = flags;
   1af84:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1af88:	2000      	movs	r0, #0
   1af8a:	f04f 36ff 	mov.w	r6, #4294967295
   1af8e:	f04f 37ff 	mov.w	r7, #4294967295
   1af92:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1af96:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1af9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1af9e:	4b09      	ldr	r3, [pc, #36]	; (1afc4 <k_work_queue_start+0x6c>)
   1afa0:	9400      	str	r4, [sp, #0]
   1afa2:	4620      	mov	r0, r4
   1afa4:	f7ff fcd4 	bl	1a950 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1afa8:	b125      	cbz	r5, 1afb4 <k_work_queue_start+0x5c>
   1afaa:	6829      	ldr	r1, [r5, #0]
   1afac:	b111      	cbz	r1, 1afb4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1afae:	4620      	mov	r0, r4
   1afb0:	f007 fccd 	bl	2294e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1afb4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1afb6:	b009      	add	sp, #36	; 0x24
   1afb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1afbc:	f007 bcca 	b.w	22954 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1afc0:	2001      	movs	r0, #1
   1afc2:	e7df      	b.n	1af84 <k_work_queue_start+0x2c>
   1afc4:	0001ad45 	.word	0x0001ad45

0001afc8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1afc8:	b513      	push	{r0, r1, r4, lr}
   1afca:	9001      	str	r0, [sp, #4]
   1afcc:	4608      	mov	r0, r1
	__asm__ volatile(
   1afce:	f04f 0140 	mov.w	r1, #64	; 0x40
   1afd2:	f3ef 8411 	mrs	r4, BASEPRI
   1afd6:	f381 8812 	msr	BASEPRI_MAX, r1
   1afda:	f3bf 8f6f 	isb	sy
	return *flagp;
   1afde:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1afe0:	f011 0f0e 	tst.w	r1, #14
   1afe4:	d116      	bne.n	1b014 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1afe6:	ea53 0c02 	orrs.w	ip, r3, r2
   1afea:	d108      	bne.n	1affe <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1afec:	a901      	add	r1, sp, #4
   1afee:	f7ff ff5d 	bl	1aeac <submit_to_queue_locked>
	__asm__ volatile(
   1aff2:	f384 8811 	msr	BASEPRI, r4
   1aff6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1affa:	b002      	add	sp, #8
   1affc:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1affe:	f041 0108 	orr.w	r1, r1, #8
   1b002:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1b004:	9901      	ldr	r1, [sp, #4]
   1b006:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b008:	3010      	adds	r0, #16
   1b00a:	4903      	ldr	r1, [pc, #12]	; (1b018 <k_work_schedule_for_queue+0x50>)
   1b00c:	f000 fc00 	bl	1b810 <z_add_timeout>
	return ret;
   1b010:	2001      	movs	r0, #1
   1b012:	e7ee      	b.n	1aff2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1b014:	2000      	movs	r0, #0
   1b016:	e7ec      	b.n	1aff2 <k_work_schedule_for_queue+0x2a>
   1b018:	00022be1 	.word	0x00022be1

0001b01c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b01c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b01e:	4801      	ldr	r0, [pc, #4]	; (1b024 <k_work_schedule+0x8>)
   1b020:	f7ff bfd2 	b.w	1afc8 <k_work_schedule_for_queue>
   1b024:	20001d70 	.word	0x20001d70

0001b028 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b02a:	460c      	mov	r4, r1
   1b02c:	9001      	str	r0, [sp, #4]
   1b02e:	4616      	mov	r6, r2
   1b030:	461d      	mov	r5, r3
	__asm__ volatile(
   1b032:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b036:	f3ef 8711 	mrs	r7, BASEPRI
   1b03a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b03e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b042:	4608      	mov	r0, r1
   1b044:	f007 fd86 	bl	22b54 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b048:	ea55 0306 	orrs.w	r3, r5, r6
   1b04c:	d109      	bne.n	1b062 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b04e:	a901      	add	r1, sp, #4
   1b050:	4620      	mov	r0, r4
   1b052:	f7ff ff2b 	bl	1aeac <submit_to_queue_locked>
	__asm__ volatile(
   1b056:	f387 8811 	msr	BASEPRI, r7
   1b05a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b05e:	b003      	add	sp, #12
   1b060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b062:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b064:	4906      	ldr	r1, [pc, #24]	; (1b080 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b066:	f043 0308 	orr.w	r3, r3, #8
   1b06a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b06c:	9b01      	ldr	r3, [sp, #4]
   1b06e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b070:	f104 0010 	add.w	r0, r4, #16
   1b074:	4632      	mov	r2, r6
   1b076:	462b      	mov	r3, r5
   1b078:	f000 fbca 	bl	1b810 <z_add_timeout>
	return ret;
   1b07c:	2001      	movs	r0, #1
   1b07e:	e7ea      	b.n	1b056 <k_work_reschedule_for_queue+0x2e>
   1b080:	00022be1 	.word	0x00022be1

0001b084 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b084:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b086:	4801      	ldr	r0, [pc, #4]	; (1b08c <k_work_reschedule+0x8>)
   1b088:	f7ff bfce 	b.w	1b028 <k_work_reschedule_for_queue>
   1b08c:	20001d70 	.word	0x20001d70

0001b090 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1b090:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1b092:	4d07      	ldr	r5, [pc, #28]	; (1b0b0 <z_reset_time_slice+0x20>)
   1b094:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1b096:	b154      	cbz	r4, 1b0ae <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1b098:	f7fd fc2c 	bl	188f4 <sys_clock_elapsed>
   1b09c:	4b05      	ldr	r3, [pc, #20]	; (1b0b4 <z_reset_time_slice+0x24>)
   1b09e:	4404      	add	r4, r0
   1b0a0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1b0a2:	6828      	ldr	r0, [r5, #0]
   1b0a4:	2100      	movs	r1, #0
	}
}
   1b0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1b0aa:	f007 bf78 	b.w	22f9e <z_set_timeout_expiry>
}
   1b0ae:	bd38      	pop	{r3, r4, r5, pc}
   1b0b0:	2000284c 	.word	0x2000284c
   1b0b4:	20002814 	.word	0x20002814

0001b0b8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0ba:	4604      	mov	r4, r0
   1b0bc:	460d      	mov	r5, r1
	__asm__ volatile(
   1b0be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0c2:	f3ef 8711 	mrs	r7, BASEPRI
   1b0c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b0ce:	4e10      	ldr	r6, [pc, #64]	; (1b110 <k_sched_time_slice_set+0x58>)
   1b0d0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b0d2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1b0d6:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b0da:	6131      	str	r1, [r6, #16]
   1b0dc:	2300      	movs	r3, #0
   1b0de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0e2:	fbe4 010c 	umlal	r0, r1, r4, ip
   1b0e6:	f7e5 fe93 	bl	e10 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b0ea:	2c00      	cmp	r4, #0
   1b0ec:	4b09      	ldr	r3, [pc, #36]	; (1b114 <k_sched_time_slice_set+0x5c>)
   1b0ee:	dc0a      	bgt.n	1b106 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   1b0f0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b0f2:	4b09      	ldr	r3, [pc, #36]	; (1b118 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1b0f4:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   1b0f6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   1b0f8:	f7ff ffca 	bl	1b090 <z_reset_time_slice>
	__asm__ volatile(
   1b0fc:	f387 8811 	msr	BASEPRI, r7
   1b100:	f3bf 8f6f 	isb	sy
	}
}
   1b104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   1b106:	2802      	cmp	r0, #2
   1b108:	bfb8      	it	lt
   1b10a:	2002      	movlt	r0, #2
   1b10c:	e7f0      	b.n	1b0f0 <k_sched_time_slice_set+0x38>
   1b10e:	bf00      	nop
   1b110:	20002814 	.word	0x20002814
   1b114:	2000284c 	.word	0x2000284c
   1b118:	20002848 	.word	0x20002848

0001b11c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b11c:	b949      	cbnz	r1, 1b132 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b11e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b122:	b930      	cbnz	r0, 1b132 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1b124:	4b05      	ldr	r3, [pc, #20]	; (1b13c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1b126:	69da      	ldr	r2, [r3, #28]
   1b128:	689b      	ldr	r3, [r3, #8]
   1b12a:	429a      	cmp	r2, r3
   1b12c:	d001      	beq.n	1b132 <z_reschedule+0x16>
	ret = arch_swap(key);
   1b12e:	f7f8 b93b 	b.w	133a8 <arch_swap>
   1b132:	f381 8811 	msr	BASEPRI, r1
   1b136:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b13a:	4770      	bx	lr
   1b13c:	20002814 	.word	0x20002814

0001b140 <k_sched_lock>:
	__asm__ volatile(
   1b140:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b144:	f3ef 8111 	mrs	r1, BASEPRI
   1b148:	f383 8812 	msr	BASEPRI_MAX, r3
   1b14c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b150:	4b04      	ldr	r3, [pc, #16]	; (1b164 <k_sched_lock+0x24>)
   1b152:	689a      	ldr	r2, [r3, #8]
   1b154:	7bd3      	ldrb	r3, [r2, #15]
   1b156:	3b01      	subs	r3, #1
   1b158:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b15a:	f381 8811 	msr	BASEPRI, r1
   1b15e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b162:	4770      	bx	lr
   1b164:	20002814 	.word	0x20002814

0001b168 <update_cache>:
{
   1b168:	b538      	push	{r3, r4, r5, lr}
   1b16a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1b16c:	480c      	ldr	r0, [pc, #48]	; (1b1a0 <update_cache+0x38>)
   1b16e:	4d0d      	ldr	r5, [pc, #52]	; (1b1a4 <update_cache+0x3c>)
   1b170:	f007 fe33 	bl	22dda <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b174:	4604      	mov	r4, r0
   1b176:	b900      	cbnz	r0, 1b17a <update_cache+0x12>
   1b178:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1b17a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1b17c:	b94a      	cbnz	r2, 1b192 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1b17e:	7b5a      	ldrb	r2, [r3, #13]
   1b180:	06d2      	lsls	r2, r2, #27
   1b182:	d106      	bne.n	1b192 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b184:	69a2      	ldr	r2, [r4, #24]
   1b186:	b922      	cbnz	r2, 1b192 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b188:	89da      	ldrh	r2, [r3, #14]
   1b18a:	2a7f      	cmp	r2, #127	; 0x7f
   1b18c:	d901      	bls.n	1b192 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1b18e:	61eb      	str	r3, [r5, #28]
}
   1b190:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b192:	429c      	cmp	r4, r3
   1b194:	d002      	beq.n	1b19c <update_cache+0x34>
			z_reset_time_slice(thread);
   1b196:	4620      	mov	r0, r4
   1b198:	f7ff ff7a 	bl	1b090 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b19c:	61ec      	str	r4, [r5, #28]
}
   1b19e:	e7f7      	b.n	1b190 <update_cache+0x28>
   1b1a0:	20002834 	.word	0x20002834
   1b1a4:	20002814 	.word	0x20002814

0001b1a8 <move_thread_to_end_of_prio_q>:
{
   1b1a8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b1aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b1ae:	7b43      	ldrb	r3, [r0, #13]
   1b1b0:	2a00      	cmp	r2, #0
{
   1b1b2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b1b4:	da04      	bge.n	1b1c0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b1ba:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1b1bc:	f007 fdb8 	bl	22d30 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b1c0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1b1c2:	4a15      	ldr	r2, [pc, #84]	; (1b218 <move_thread_to_end_of_prio_q+0x70>)
   1b1c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b1c8:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1b1ca:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b1ce:	f102 0520 	add.w	r5, r2, #32
   1b1d2:	42ab      	cmp	r3, r5
   1b1d4:	d01b      	beq.n	1b20e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b1d6:	b1d3      	cbz	r3, 1b20e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1b1d8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1b1dc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b1e0:	4286      	cmp	r6, r0
   1b1e2:	d00f      	beq.n	1b204 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1b1e4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b1e6:	2800      	cmp	r0, #0
   1b1e8:	dd0c      	ble.n	1b204 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b1ea:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1b1ec:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1b1f0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b1f2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1b1f4:	6890      	ldr	r0, [r2, #8]
   1b1f6:	1a43      	subs	r3, r0, r1
   1b1f8:	4258      	negs	r0, r3
}
   1b1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b1fe:	4158      	adcs	r0, r3
   1b200:	f7ff bfb2 	b.w	1b168 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b204:	42a3      	cmp	r3, r4
   1b206:	d002      	beq.n	1b20e <move_thread_to_end_of_prio_q+0x66>
   1b208:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b20a:	2b00      	cmp	r3, #0
   1b20c:	d1e6      	bne.n	1b1dc <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1b20e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1b212:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1b214:	6251      	str	r1, [r2, #36]	; 0x24
}
   1b216:	e7ed      	b.n	1b1f4 <move_thread_to_end_of_prio_q+0x4c>
   1b218:	20002814 	.word	0x20002814

0001b21c <z_time_slice>:
{
   1b21c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b21e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b222:	f3ef 8511 	mrs	r5, BASEPRI
   1b226:	f383 8812 	msr	BASEPRI_MAX, r3
   1b22a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b22e:	4b17      	ldr	r3, [pc, #92]	; (1b28c <z_time_slice+0x70>)
   1b230:	4a17      	ldr	r2, [pc, #92]	; (1b290 <z_time_slice+0x74>)
   1b232:	689c      	ldr	r4, [r3, #8]
   1b234:	6811      	ldr	r1, [r2, #0]
   1b236:	428c      	cmp	r4, r1
   1b238:	d107      	bne.n	1b24a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1b23a:	4620      	mov	r0, r4
   1b23c:	f7ff ff28 	bl	1b090 <z_reset_time_slice>
	__asm__ volatile(
   1b240:	f385 8811 	msr	BASEPRI, r5
   1b244:	f3bf 8f6f 	isb	sy
}
   1b248:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1b24a:	2100      	movs	r1, #0
   1b24c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1b24e:	4a11      	ldr	r2, [pc, #68]	; (1b294 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1b250:	6812      	ldr	r2, [r2, #0]
   1b252:	b1c2      	cbz	r2, 1b286 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b254:	89e2      	ldrh	r2, [r4, #14]
   1b256:	2a7f      	cmp	r2, #127	; 0x7f
   1b258:	d815      	bhi.n	1b286 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1b25a:	7b62      	ldrb	r2, [r4, #13]
   1b25c:	06d2      	lsls	r2, r2, #27
   1b25e:	d112      	bne.n	1b286 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b260:	4a0d      	ldr	r2, [pc, #52]	; (1b298 <z_time_slice+0x7c>)
   1b262:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1b266:	6812      	ldr	r2, [r2, #0]
   1b268:	4291      	cmp	r1, r2
   1b26a:	db0c      	blt.n	1b286 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   1b26c:	4a0b      	ldr	r2, [pc, #44]	; (1b29c <z_time_slice+0x80>)
   1b26e:	4294      	cmp	r4, r2
   1b270:	d009      	beq.n	1b286 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1b272:	691a      	ldr	r2, [r3, #16]
   1b274:	4282      	cmp	r2, r0
   1b276:	dc03      	bgt.n	1b280 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1b278:	4620      	mov	r0, r4
   1b27a:	f7ff ff95 	bl	1b1a8 <move_thread_to_end_of_prio_q>
   1b27e:	e7dc      	b.n	1b23a <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1b280:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1b282:	611a      	str	r2, [r3, #16]
   1b284:	e7dc      	b.n	1b240 <z_time_slice+0x24>
   1b286:	2200      	movs	r2, #0
   1b288:	e7fb      	b.n	1b282 <z_time_slice+0x66>
   1b28a:	bf00      	nop
   1b28c:	20002814 	.word	0x20002814
   1b290:	20002844 	.word	0x20002844
   1b294:	2000284c 	.word	0x2000284c
   1b298:	20002848 	.word	0x20002848
   1b29c:	20001c70 	.word	0x20001c70

0001b2a0 <ready_thread>:
{
   1b2a0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b2a2:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b2a6:	7b43      	ldrb	r3, [r0, #13]
   1b2a8:	2a00      	cmp	r2, #0
   1b2aa:	db2a      	blt.n	1b302 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b2ac:	06da      	lsls	r2, r3, #27
   1b2ae:	d128      	bne.n	1b302 <ready_thread+0x62>
   1b2b0:	6982      	ldr	r2, [r0, #24]
   1b2b2:	bb32      	cbnz	r2, 1b302 <ready_thread+0x62>
	return list->head == list;
   1b2b4:	4a14      	ldr	r2, [pc, #80]	; (1b308 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1b2b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b2ba:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1b2bc:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b2c0:	f102 0520 	add.w	r5, r2, #32
   1b2c4:	42ab      	cmp	r3, r5
   1b2c6:	d017      	beq.n	1b2f8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b2c8:	b1b3      	cbz	r3, 1b2f8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1b2ca:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1b2ce:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1b2d2:	428e      	cmp	r6, r1
   1b2d4:	d00b      	beq.n	1b2ee <ready_thread+0x4e>
		return b2 - b1;
   1b2d6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b2d8:	2900      	cmp	r1, #0
   1b2da:	dd08      	ble.n	1b2ee <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1b2dc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b2de:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1b2e2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b2e4:	6058      	str	r0, [r3, #4]
}
   1b2e6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b2e8:	2000      	movs	r0, #0
   1b2ea:	f7ff bf3d 	b.w	1b168 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b2ee:	42a3      	cmp	r3, r4
   1b2f0:	d002      	beq.n	1b2f8 <ready_thread+0x58>
   1b2f2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b2f4:	2b00      	cmp	r3, #0
   1b2f6:	d1ea      	bne.n	1b2ce <ready_thread+0x2e>
	node->prev = tail;
   1b2f8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1b2fc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1b2fe:	6250      	str	r0, [r2, #36]	; 0x24
}
   1b300:	e7f1      	b.n	1b2e6 <ready_thread+0x46>
}
   1b302:	bc70      	pop	{r4, r5, r6}
   1b304:	4770      	bx	lr
   1b306:	bf00      	nop
   1b308:	20002814 	.word	0x20002814

0001b30c <z_sched_start>:
{
   1b30c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b30e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b312:	f3ef 8411 	mrs	r4, BASEPRI
   1b316:	f382 8812 	msr	BASEPRI_MAX, r2
   1b31a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b31e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b320:	0751      	lsls	r1, r2, #29
   1b322:	d404      	bmi.n	1b32e <z_sched_start+0x22>
	__asm__ volatile(
   1b324:	f384 8811 	msr	BASEPRI, r4
   1b328:	f3bf 8f6f 	isb	sy
}
   1b32c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b32e:	f022 0204 	bic.w	r2, r2, #4
   1b332:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b334:	f7ff ffb4 	bl	1b2a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b338:	4621      	mov	r1, r4
   1b33a:	4802      	ldr	r0, [pc, #8]	; (1b344 <z_sched_start+0x38>)
}
   1b33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b340:	f7ff beec 	b.w	1b11c <z_reschedule>
   1b344:	20003dc1 	.word	0x20003dc1

0001b348 <unready_thread>:
{
   1b348:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b34a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b34e:	7b43      	ldrb	r3, [r0, #13]
   1b350:	2a00      	cmp	r2, #0
{
   1b352:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b354:	da04      	bge.n	1b360 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b35a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b35c:	f007 fce8 	bl	22d30 <sys_dlist_remove>
	update_cache(thread == _current);
   1b360:	4b04      	ldr	r3, [pc, #16]	; (1b374 <unready_thread+0x2c>)
   1b362:	6898      	ldr	r0, [r3, #8]
   1b364:	1a43      	subs	r3, r0, r1
   1b366:	4258      	negs	r0, r3
   1b368:	4158      	adcs	r0, r3
}
   1b36a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b36e:	f7ff befb 	b.w	1b168 <update_cache>
   1b372:	bf00      	nop
   1b374:	20002814 	.word	0x20002814

0001b378 <pend>:
{
   1b378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b37c:	4606      	mov	r6, r0
   1b37e:	4615      	mov	r5, r2
   1b380:	461c      	mov	r4, r3
	__asm__ volatile(
   1b382:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b386:	f3ef 8711 	mrs	r7, BASEPRI
   1b38a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b38e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b392:	f007 fd5a 	bl	22e4a <add_to_waitq_locked>
	__asm__ volatile(
   1b396:	f387 8811 	msr	BASEPRI, r7
   1b39a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b39e:	f1b4 3fff 	cmp.w	r4, #4294967295
   1b3a2:	bf08      	it	eq
   1b3a4:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b3a8:	d008      	beq.n	1b3bc <pend+0x44>
   1b3aa:	462a      	mov	r2, r5
   1b3ac:	4623      	mov	r3, r4
   1b3ae:	f106 0018 	add.w	r0, r6, #24
   1b3b2:	4903      	ldr	r1, [pc, #12]	; (1b3c0 <pend+0x48>)
}
   1b3b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b3b8:	f000 ba2a 	b.w	1b810 <z_add_timeout>
   1b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b3c0:	00022e07 	.word	0x00022e07

0001b3c4 <z_pend_curr>:
{
   1b3c4:	b510      	push	{r4, lr}
	pending_current = _current;
   1b3c6:	4b07      	ldr	r3, [pc, #28]	; (1b3e4 <z_pend_curr+0x20>)
   1b3c8:	6898      	ldr	r0, [r3, #8]
   1b3ca:	4b07      	ldr	r3, [pc, #28]	; (1b3e8 <z_pend_curr+0x24>)
{
   1b3cc:	460c      	mov	r4, r1
	pending_current = _current;
   1b3ce:	6018      	str	r0, [r3, #0]
{
   1b3d0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b3d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b3d6:	f7ff ffcf 	bl	1b378 <pend>
   1b3da:	4620      	mov	r0, r4
}
   1b3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b3e0:	f7f7 bfe2 	b.w	133a8 <arch_swap>
   1b3e4:	20002814 	.word	0x20002814
   1b3e8:	20002844 	.word	0x20002844

0001b3ec <z_set_prio>:
{
   1b3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3ee:	4604      	mov	r4, r0
	__asm__ volatile(
   1b3f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b3f4:	f3ef 8611 	mrs	r6, BASEPRI
   1b3f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b3fc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1b400:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b402:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1b404:	b249      	sxtb	r1, r1
   1b406:	d133      	bne.n	1b470 <z_set_prio+0x84>
		if (need_sched) {
   1b408:	6982      	ldr	r2, [r0, #24]
   1b40a:	bb8a      	cbnz	r2, 1b470 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b40c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b410:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b412:	f007 fc8d 	bl	22d30 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b416:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1b418:	4a17      	ldr	r2, [pc, #92]	; (1b478 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1b41a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b41c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b420:	7343      	strb	r3, [r0, #13]
   1b422:	4610      	mov	r0, r2
   1b424:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b428:	4283      	cmp	r3, r0
   1b42a:	d01b      	beq.n	1b464 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b42c:	b1d3      	cbz	r3, 1b464 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1b42e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   1b430:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1b434:	42a9      	cmp	r1, r5
   1b436:	d010      	beq.n	1b45a <z_set_prio+0x6e>
		return b2 - b1;
   1b438:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b43a:	2d00      	cmp	r5, #0
   1b43c:	dd0d      	ble.n	1b45a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1b43e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b440:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b444:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b446:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b448:	2001      	movs	r0, #1
   1b44a:	f7ff fe8d 	bl	1b168 <update_cache>
   1b44e:	2001      	movs	r0, #1
	__asm__ volatile(
   1b450:	f386 8811 	msr	BASEPRI, r6
   1b454:	f3bf 8f6f 	isb	sy
}
   1b458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b45a:	42bb      	cmp	r3, r7
   1b45c:	d002      	beq.n	1b464 <z_set_prio+0x78>
   1b45e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b460:	2b00      	cmp	r3, #0
   1b462:	d1e5      	bne.n	1b430 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1b464:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   1b466:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1b46a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b46c:	6254      	str	r4, [r2, #36]	; 0x24
}
   1b46e:	e7eb      	b.n	1b448 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1b470:	73a1      	strb	r1, [r4, #14]
   1b472:	2000      	movs	r0, #0
   1b474:	e7ec      	b.n	1b450 <z_set_prio+0x64>
   1b476:	bf00      	nop
   1b478:	20002814 	.word	0x20002814

0001b47c <z_impl_k_thread_suspend>:
{
   1b47c:	b570      	push	{r4, r5, r6, lr}
   1b47e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b480:	3018      	adds	r0, #24
   1b482:	f007 fd66 	bl	22f52 <z_abort_timeout>
	__asm__ volatile(
   1b486:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b48a:	f3ef 8611 	mrs	r6, BASEPRI
   1b48e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b492:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b496:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1b49a:	7b63      	ldrb	r3, [r4, #13]
   1b49c:	2a00      	cmp	r2, #0
   1b49e:	da05      	bge.n	1b4ac <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b4a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b4a4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b4a6:	4620      	mov	r0, r4
   1b4a8:	f007 fc42 	bl	22d30 <sys_dlist_remove>
		update_cache(thread == _current);
   1b4ac:	4d0b      	ldr	r5, [pc, #44]	; (1b4dc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b4ae:	7b63      	ldrb	r3, [r4, #13]
   1b4b0:	68a8      	ldr	r0, [r5, #8]
   1b4b2:	f043 0310 	orr.w	r3, r3, #16
   1b4b6:	7363      	strb	r3, [r4, #13]
   1b4b8:	1b03      	subs	r3, r0, r4
   1b4ba:	4258      	negs	r0, r3
   1b4bc:	4158      	adcs	r0, r3
   1b4be:	f7ff fe53 	bl	1b168 <update_cache>
	__asm__ volatile(
   1b4c2:	f386 8811 	msr	BASEPRI, r6
   1b4c6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b4ca:	68ab      	ldr	r3, [r5, #8]
   1b4cc:	42a3      	cmp	r3, r4
   1b4ce:	d103      	bne.n	1b4d8 <z_impl_k_thread_suspend+0x5c>
}
   1b4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b4d4:	f007 bc77 	b.w	22dc6 <z_reschedule_unlocked>
}
   1b4d8:	bd70      	pop	{r4, r5, r6, pc}
   1b4da:	bf00      	nop
   1b4dc:	20002814 	.word	0x20002814

0001b4e0 <k_sched_unlock>:
{
   1b4e0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b4e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4e6:	f3ef 8411 	mrs	r4, BASEPRI
   1b4ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4ee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b4f2:	4b08      	ldr	r3, [pc, #32]	; (1b514 <k_sched_unlock+0x34>)
   1b4f4:	689a      	ldr	r2, [r3, #8]
   1b4f6:	7bd3      	ldrb	r3, [r2, #15]
   1b4f8:	3301      	adds	r3, #1
   1b4fa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b4fc:	2000      	movs	r0, #0
   1b4fe:	f7ff fe33 	bl	1b168 <update_cache>
	__asm__ volatile(
   1b502:	f384 8811 	msr	BASEPRI, r4
   1b506:	f3bf 8f6f 	isb	sy
}
   1b50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b50e:	f007 bc5a 	b.w	22dc6 <z_reschedule_unlocked>
   1b512:	bf00      	nop
   1b514:	20002814 	.word	0x20002814

0001b518 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b518:	4b04      	ldr	r3, [pc, #16]	; (1b52c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b51a:	2100      	movs	r1, #0
   1b51c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b520:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b524:	4608      	mov	r0, r1
   1b526:	f7ff bdc7 	b.w	1b0b8 <k_sched_time_slice_set>
   1b52a:	bf00      	nop
   1b52c:	20002814 	.word	0x20002814

0001b530 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b532:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b536:	f3ef 8511 	mrs	r5, BASEPRI
   1b53a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b53e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1b542:	491a      	ldr	r1, [pc, #104]	; (1b5ac <z_impl_k_yield+0x7c>)
   1b544:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b546:	7b43      	ldrb	r3, [r0, #13]
   1b548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b54c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b54e:	f007 fbef 	bl	22d30 <sys_dlist_remove>
	}
	queue_thread(_current);
   1b552:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b554:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1b556:	4608      	mov	r0, r1
   1b558:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b55c:	735a      	strb	r2, [r3, #13]
   1b55e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b562:	4282      	cmp	r2, r0
   1b564:	d01c      	beq.n	1b5a0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b566:	b1da      	cbz	r2, 1b5a0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1b568:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1b56a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1b56e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1b572:	42a6      	cmp	r6, r4
   1b574:	d00f      	beq.n	1b596 <z_impl_k_yield+0x66>
		return b2 - b1;
   1b576:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b578:	2c00      	cmp	r4, #0
   1b57a:	dd0c      	ble.n	1b596 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1b57c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b57e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1b582:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b584:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1b586:	2001      	movs	r0, #1
   1b588:	f7ff fdee 	bl	1b168 <update_cache>
   1b58c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1b58e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b592:	f7f7 bf09 	b.w	133a8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b596:	42ba      	cmp	r2, r7
   1b598:	d002      	beq.n	1b5a0 <z_impl_k_yield+0x70>
   1b59a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b59c:	2a00      	cmp	r2, #0
   1b59e:	d1e6      	bne.n	1b56e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1b5a0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1b5a2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1b5a6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b5a8:	624b      	str	r3, [r1, #36]	; 0x24
}
   1b5aa:	e7ec      	b.n	1b586 <z_impl_k_yield+0x56>
   1b5ac:	20002814 	.word	0x20002814

0001b5b0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b5b0:	ea50 0301 	orrs.w	r3, r0, r1
{
   1b5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5b8:	4605      	mov	r5, r0
   1b5ba:	460e      	mov	r6, r1
	if (ticks == 0) {
   1b5bc:	d103      	bne.n	1b5c6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1b5be:	f7ff ffb7 	bl	1b530 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1b5c2:	2000      	movs	r0, #0
   1b5c4:	e033      	b.n	1b62e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1b5c6:	f06f 0401 	mvn.w	r4, #1
   1b5ca:	1a24      	subs	r4, r4, r0
   1b5cc:	f04f 33ff 	mov.w	r3, #4294967295
   1b5d0:	eb63 0301 	sbc.w	r3, r3, r1
   1b5d4:	2c01      	cmp	r4, #1
   1b5d6:	f173 0300 	sbcs.w	r3, r3, #0
   1b5da:	da02      	bge.n	1b5e2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b5dc:	f007 fcf9 	bl	22fd2 <sys_clock_tick_get_32>
   1b5e0:	1944      	adds	r4, r0, r5
   1b5e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b5e6:	f3ef 8811 	mrs	r8, BASEPRI
   1b5ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5ee:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1b5f2:	4f10      	ldr	r7, [pc, #64]	; (1b634 <z_tick_sleep+0x84>)
   1b5f4:	4b10      	ldr	r3, [pc, #64]	; (1b638 <z_tick_sleep+0x88>)
   1b5f6:	68b8      	ldr	r0, [r7, #8]
   1b5f8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b5fa:	f7ff fea5 	bl	1b348 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b5fe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b600:	490e      	ldr	r1, [pc, #56]	; (1b63c <z_tick_sleep+0x8c>)
   1b602:	462a      	mov	r2, r5
   1b604:	4633      	mov	r3, r6
   1b606:	3018      	adds	r0, #24
   1b608:	f000 f902 	bl	1b810 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b60c:	68ba      	ldr	r2, [r7, #8]
   1b60e:	7b53      	ldrb	r3, [r2, #13]
   1b610:	f043 0310 	orr.w	r3, r3, #16
   1b614:	7353      	strb	r3, [r2, #13]
   1b616:	4640      	mov	r0, r8
   1b618:	f7f7 fec6 	bl	133a8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b61c:	f007 fcd9 	bl	22fd2 <sys_clock_tick_get_32>
   1b620:	1a20      	subs	r0, r4, r0
   1b622:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1b626:	2801      	cmp	r0, #1
   1b628:	f173 0300 	sbcs.w	r3, r3, #0
   1b62c:	dbc9      	blt.n	1b5c2 <z_tick_sleep+0x12>
}
   1b62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b632:	bf00      	nop
   1b634:	20002814 	.word	0x20002814
   1b638:	20002844 	.word	0x20002844
   1b63c:	00022e07 	.word	0x00022e07

0001b640 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b640:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b644:	bf08      	it	eq
   1b646:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b64a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b64c:	d106      	bne.n	1b65c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b64e:	4b08      	ldr	r3, [pc, #32]	; (1b670 <z_impl_k_sleep+0x30>)
   1b650:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b652:	f7ff ff13 	bl	1b47c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b656:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b65a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1b65c:	f7ff ffa8 	bl	1b5b0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1b660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b664:	fb80 0303 	smull	r0, r3, r0, r3
   1b668:	0bc0      	lsrs	r0, r0, #15
   1b66a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b66e:	e7f4      	b.n	1b65a <z_impl_k_sleep+0x1a>
   1b670:	20002814 	.word	0x20002814

0001b674 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b674:	4b01      	ldr	r3, [pc, #4]	; (1b67c <z_impl_z_current_get+0x8>)
   1b676:	6898      	ldr	r0, [r3, #8]
   1b678:	4770      	bx	lr
   1b67a:	bf00      	nop
   1b67c:	20002814 	.word	0x20002814

0001b680 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b684:	4604      	mov	r4, r0
   1b686:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b68a:	f3ef 8611 	mrs	r6, BASEPRI
   1b68e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b692:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b696:	7b43      	ldrb	r3, [r0, #13]
   1b698:	071a      	lsls	r2, r3, #28
   1b69a:	d505      	bpl.n	1b6a8 <z_thread_abort+0x28>
	__asm__ volatile(
   1b69c:	f386 8811 	msr	BASEPRI, r6
   1b6a0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b6a8:	f023 0220 	bic.w	r2, r3, #32
   1b6ac:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b6b0:	09d2      	lsrs	r2, r2, #7
   1b6b2:	d120      	bne.n	1b6f6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b6b4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1b6b6:	68a3      	ldr	r3, [r4, #8]
   1b6b8:	b113      	cbz	r3, 1b6c0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1b6ba:	4620      	mov	r0, r4
   1b6bc:	f007 fb40 	bl	22d40 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b6c0:	f104 0018 	add.w	r0, r4, #24
   1b6c4:	f007 fc45 	bl	22f52 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b6c8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1b6cc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1b6d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b6d2:	42bd      	cmp	r5, r7
   1b6d4:	d000      	beq.n	1b6d8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b6d6:	b9b5      	cbnz	r5, 1b706 <z_thread_abort+0x86>
		update_cache(1);
   1b6d8:	2001      	movs	r0, #1
   1b6da:	f7ff fd45 	bl	1b168 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b6de:	4b10      	ldr	r3, [pc, #64]	; (1b720 <z_thread_abort+0xa0>)
   1b6e0:	689b      	ldr	r3, [r3, #8]
   1b6e2:	42a3      	cmp	r3, r4
   1b6e4:	d1da      	bne.n	1b69c <z_thread_abort+0x1c>
   1b6e6:	f3ef 8305 	mrs	r3, IPSR
   1b6ea:	2b00      	cmp	r3, #0
   1b6ec:	d1d6      	bne.n	1b69c <z_thread_abort+0x1c>
   1b6ee:	4630      	mov	r0, r6
   1b6f0:	f7f7 fe5a 	bl	133a8 <arch_swap>
	return ret;
   1b6f4:	e7d2      	b.n	1b69c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b6f6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b6fa:	f043 0308 	orr.w	r3, r3, #8
   1b6fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b700:	f007 fb16 	bl	22d30 <sys_dlist_remove>
}
   1b704:	e7d7      	b.n	1b6b6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1b706:	4628      	mov	r0, r5
   1b708:	f007 fb1a 	bl	22d40 <unpend_thread_no_timeout>
   1b70c:	f105 0018 	add.w	r0, r5, #24
   1b710:	f007 fc1f 	bl	22f52 <z_abort_timeout>
   1b714:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1b718:	4628      	mov	r0, r5
   1b71a:	f7ff fdc1 	bl	1b2a0 <ready_thread>
   1b71e:	e7d7      	b.n	1b6d0 <z_thread_abort+0x50>
   1b720:	20002814 	.word	0x20002814

0001b724 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b724:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b726:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b72a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b72c:	e9cd 6700 	strd	r6, r7, [sp]
   1b730:	f7ff fe48 	bl	1b3c4 <z_pend_curr>

	if (data != NULL) {
   1b734:	b11c      	cbz	r4, 1b73e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b736:	4b03      	ldr	r3, [pc, #12]	; (1b744 <z_sched_wait+0x20>)
   1b738:	689b      	ldr	r3, [r3, #8]
   1b73a:	695b      	ldr	r3, [r3, #20]
   1b73c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b73e:	b002      	add	sp, #8
   1b740:	bdd0      	pop	{r4, r6, r7, pc}
   1b742:	bf00      	nop
   1b744:	20002814 	.word	0x20002814

0001b748 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1b748:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1b74a:	4806      	ldr	r0, [pc, #24]	; (1b764 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1b74c:	4a06      	ldr	r2, [pc, #24]	; (1b768 <z_data_copy+0x20>)
   1b74e:	4907      	ldr	r1, [pc, #28]	; (1b76c <z_data_copy+0x24>)
   1b750:	1a12      	subs	r2, r2, r0
   1b752:	f007 f84a 	bl	227ea <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1b75a:	4a05      	ldr	r2, [pc, #20]	; (1b770 <z_data_copy+0x28>)
   1b75c:	4905      	ldr	r1, [pc, #20]	; (1b774 <z_data_copy+0x2c>)
   1b75e:	4806      	ldr	r0, [pc, #24]	; (1b778 <z_data_copy+0x30>)
   1b760:	f007 b843 	b.w	227ea <z_early_memcpy>
   1b764:	20000000 	.word	0x20000000
   1b768:	20000b8c 	.word	0x20000b8c
   1b76c:	00024b0c 	.word	0x00024b0c
   1b770:	00000000 	.word	0x00000000
   1b774:	00024b0c 	.word	0x00024b0c
   1b778:	20000000 	.word	0x20000000

0001b77c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1b77c:	4b03      	ldr	r3, [pc, #12]	; (1b78c <elapsed+0x10>)
   1b77e:	681b      	ldr	r3, [r3, #0]
   1b780:	b90b      	cbnz	r3, 1b786 <elapsed+0xa>
   1b782:	f7fd b8b7 	b.w	188f4 <sys_clock_elapsed>
}
   1b786:	2000      	movs	r0, #0
   1b788:	4770      	bx	lr
   1b78a:	bf00      	nop
   1b78c:	20002850 	.word	0x20002850

0001b790 <next_timeout>:
	return list->head == list;
   1b790:	4b10      	ldr	r3, [pc, #64]	; (1b7d4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1b792:	b510      	push	{r4, lr}
   1b794:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b796:	429c      	cmp	r4, r3
   1b798:	bf08      	it	eq
   1b79a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1b79c:	f7ff ffee 	bl	1b77c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1b7a0:	b1a4      	cbz	r4, 1b7cc <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1b7a2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1b7a6:	1a1b      	subs	r3, r3, r0
   1b7a8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1b7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1b7b0:	f170 0200 	sbcs.w	r2, r0, #0
   1b7b4:	da0a      	bge.n	1b7cc <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1b7b6:	2800      	cmp	r0, #0
   1b7b8:	bfac      	ite	ge
   1b7ba:	4618      	movge	r0, r3
   1b7bc:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b7be:	4b06      	ldr	r3, [pc, #24]	; (1b7d8 <next_timeout+0x48>)
   1b7c0:	691b      	ldr	r3, [r3, #16]
   1b7c2:	b113      	cbz	r3, 1b7ca <next_timeout+0x3a>
   1b7c4:	4298      	cmp	r0, r3
   1b7c6:	bfa8      	it	ge
   1b7c8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b7ca:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1b7cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b7d0:	e7f5      	b.n	1b7be <next_timeout+0x2e>
   1b7d2:	bf00      	nop
   1b7d4:	200007d4 	.word	0x200007d4
   1b7d8:	20002814 	.word	0x20002814

0001b7dc <remove_timeout>:
{
   1b7dc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1b7de:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b7e0:	b168      	cbz	r0, 1b7fe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1b7e2:	4a0a      	ldr	r2, [pc, #40]	; (1b80c <remove_timeout+0x30>)
   1b7e4:	6852      	ldr	r2, [r2, #4]
   1b7e6:	4290      	cmp	r0, r2
   1b7e8:	d009      	beq.n	1b7fe <remove_timeout+0x22>
	if (next(t) != NULL) {
   1b7ea:	b143      	cbz	r3, 1b7fe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1b7ec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1b7f0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b7f4:	1912      	adds	r2, r2, r4
   1b7f6:	eb41 0105 	adc.w	r1, r1, r5
   1b7fa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1b7fe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1b800:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b802:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b804:	2300      	movs	r3, #0
	node->prev = NULL;
   1b806:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b80a:	bd30      	pop	{r4, r5, pc}
   1b80c:	200007d4 	.word	0x200007d4

0001b810 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b810:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b814:	bf08      	it	eq
   1b816:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1b81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b81c:	4604      	mov	r4, r0
   1b81e:	461f      	mov	r7, r3
   1b820:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b822:	d067      	beq.n	1b8f4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1b824:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1b826:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b82a:	f3ef 8611 	mrs	r6, BASEPRI
   1b82e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b832:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1b836:	f06f 0201 	mvn.w	r2, #1
   1b83a:	1b53      	subs	r3, r2, r5
   1b83c:	f04f 3cff 	mov.w	ip, #4294967295
   1b840:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1b844:	2b00      	cmp	r3, #0
   1b846:	db1b      	blt.n	1b880 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1b848:	4b2b      	ldr	r3, [pc, #172]	; (1b8f8 <z_add_timeout+0xe8>)
   1b84a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1b84e:	1a52      	subs	r2, r2, r1
   1b850:	eb6c 0303 	sbc.w	r3, ip, r3
   1b854:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1b856:	eb63 0307 	sbc.w	r3, r3, r7
   1b85a:	2d01      	cmp	r5, #1
   1b85c:	f173 0200 	sbcs.w	r2, r3, #0
   1b860:	bfbc      	itt	lt
   1b862:	2501      	movlt	r5, #1
   1b864:	2300      	movlt	r3, #0
   1b866:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1b86a:	4824      	ldr	r0, [pc, #144]	; (1b8fc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1b86c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b870:	4283      	cmp	r3, r0
   1b872:	d118      	bne.n	1b8a6 <z_add_timeout+0x96>
	node->prev = tail;
   1b874:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1b878:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1b87c:	6044      	str	r4, [r0, #4]
}
   1b87e:	e026      	b.n	1b8ce <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1b880:	f7ff ff7c 	bl	1b77c <elapsed>
   1b884:	3501      	adds	r5, #1
   1b886:	f147 0700 	adc.w	r7, r7, #0
   1b88a:	182d      	adds	r5, r5, r0
   1b88c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1b890:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1b894:	e7e9      	b.n	1b86a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1b896:	1a52      	subs	r2, r2, r1
   1b898:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1b89c:	459c      	cmp	ip, r3
   1b89e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1b8a2:	d0e7      	beq.n	1b874 <z_add_timeout+0x64>
   1b8a4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1b8a6:	2b00      	cmp	r3, #0
   1b8a8:	d0e4      	beq.n	1b874 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1b8aa:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1b8ae:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1b8b2:	428a      	cmp	r2, r1
   1b8b4:	eb75 0e07 	sbcs.w	lr, r5, r7
   1b8b8:	daed      	bge.n	1b896 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1b8ba:	1a8a      	subs	r2, r1, r2
   1b8bc:	eb67 0505 	sbc.w	r5, r7, r5
   1b8c0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1b8c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b8c6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b8ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b8cc:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1b8ce:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8d0:	4283      	cmp	r3, r0
   1b8d2:	d00b      	beq.n	1b8ec <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1b8d4:	429c      	cmp	r4, r3
   1b8d6:	d109      	bne.n	1b8ec <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1b8d8:	f7ff ff5a 	bl	1b790 <next_timeout>

			if (next_time == 0 ||
   1b8dc:	b118      	cbz	r0, 1b8e6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1b8de:	4b08      	ldr	r3, [pc, #32]	; (1b900 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1b8e0:	691b      	ldr	r3, [r3, #16]
   1b8e2:	4283      	cmp	r3, r0
   1b8e4:	d002      	beq.n	1b8ec <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1b8e6:	2100      	movs	r1, #0
   1b8e8:	f7fc ffd2 	bl	18890 <sys_clock_set_timeout>
	__asm__ volatile(
   1b8ec:	f386 8811 	msr	BASEPRI, r6
   1b8f0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1b8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8f6:	bf00      	nop
   1b8f8:	20001e10 	.word	0x20001e10
   1b8fc:	200007d4 	.word	0x200007d4
   1b900:	20002814 	.word	0x20002814

0001b904 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1b904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b908:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1b90a:	f7ff fc87 	bl	1b21c <z_time_slice>
	__asm__ volatile(
   1b90e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b912:	f3ef 8411 	mrs	r4, BASEPRI
   1b916:	f383 8812 	msr	BASEPRI_MAX, r3
   1b91a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1b91e:	4e24      	ldr	r6, [pc, #144]	; (1b9b0 <sys_clock_announce+0xac>)
	return list->head == list;
   1b920:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1b9b4 <sys_clock_announce+0xb0>
   1b924:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1b926:	4d24      	ldr	r5, [pc, #144]	; (1b9b8 <sys_clock_announce+0xb4>)
   1b928:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b92c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b92e:	4540      	cmp	r0, r8
		curr_tick += dt;
   1b930:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1b934:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1b938:	d00b      	beq.n	1b952 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b93a:	b150      	cbz	r0, 1b952 <sys_clock_announce+0x4e>
   1b93c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1b940:	429a      	cmp	r2, r3
   1b942:	eb77 090c 	sbcs.w	r9, r7, ip
   1b946:	da16      	bge.n	1b976 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1b948:	1a9b      	subs	r3, r3, r2
   1b94a:	eb6c 0c07 	sbc.w	ip, ip, r7
   1b94e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1b952:	1852      	adds	r2, r2, r1
   1b954:	eb4e 0707 	adc.w	r7, lr, r7
   1b958:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1b95c:	2500      	movs	r5, #0
   1b95e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1b960:	f7ff ff16 	bl	1b790 <next_timeout>
   1b964:	4629      	mov	r1, r5
   1b966:	f7fc ff93 	bl	18890 <sys_clock_set_timeout>
	__asm__ volatile(
   1b96a:	f384 8811 	msr	BASEPRI, r4
   1b96e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1b972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1b976:	1859      	adds	r1, r3, r1
   1b978:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1b97c:	1ad3      	subs	r3, r2, r3
   1b97e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1b980:	2200      	movs	r2, #0
   1b982:	2300      	movs	r3, #0
   1b984:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1b988:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1b98c:	f7ff ff26 	bl	1b7dc <remove_timeout>
   1b990:	f384 8811 	msr	BASEPRI, r4
   1b994:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1b998:	6883      	ldr	r3, [r0, #8]
   1b99a:	4798      	blx	r3
	__asm__ volatile(
   1b99c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9a0:	f3ef 8411 	mrs	r4, BASEPRI
   1b9a4:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9a8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b9ac:	e7bc      	b.n	1b928 <sys_clock_announce+0x24>
   1b9ae:	bf00      	nop
   1b9b0:	20002850 	.word	0x20002850
   1b9b4:	200007d4 	.word	0x200007d4
   1b9b8:	20001e10 	.word	0x20001e10

0001b9bc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1b9bc:	b510      	push	{r4, lr}
   1b9be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9c2:	f3ef 8411 	mrs	r4, BASEPRI
   1b9c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9ca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1b9ce:	f7fc ff91 	bl	188f4 <sys_clock_elapsed>
   1b9d2:	4a05      	ldr	r2, [pc, #20]	; (1b9e8 <sys_clock_tick_get+0x2c>)
   1b9d4:	e9d2 3100 	ldrd	r3, r1, [r2]
   1b9d8:	18c0      	adds	r0, r0, r3
   1b9da:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1b9de:	f384 8811 	msr	BASEPRI, r4
   1b9e2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1b9e6:	bd10      	pop	{r4, pc}
   1b9e8:	20001e10 	.word	0x20001e10

0001b9ec <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1b9ec:	b570      	push	{r4, r5, r6, lr}
   1b9ee:	4604      	mov	r4, r0
	__asm__ volatile(
   1b9f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9f4:	f3ef 8511 	mrs	r5, BASEPRI
   1b9f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9fc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ba00:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1ba04:	3301      	adds	r3, #1
   1ba06:	f142 0200 	adc.w	r2, r2, #0
   1ba0a:	2b02      	cmp	r3, #2
   1ba0c:	f172 0300 	sbcs.w	r3, r2, #0
   1ba10:	d304      	bcc.n	1ba1c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1ba12:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1ba16:	4917      	ldr	r1, [pc, #92]	; (1ba74 <z_timer_expiration_handler+0x88>)
   1ba18:	f7ff fefa 	bl	1b810 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1ba1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ba1e:	3301      	adds	r3, #1
   1ba20:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1ba22:	6a23      	ldr	r3, [r4, #32]
   1ba24:	b173      	cbz	r3, 1ba44 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   1ba26:	f385 8811 	msr	BASEPRI, r5
   1ba2a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1ba2e:	6a23      	ldr	r3, [r4, #32]
   1ba30:	4620      	mov	r0, r4
   1ba32:	4798      	blx	r3
	__asm__ volatile(
   1ba34:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba38:	f3ef 8511 	mrs	r5, BASEPRI
   1ba3c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba40:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1ba44:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba48:	42a6      	cmp	r6, r4
   1ba4a:	d000      	beq.n	1ba4e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1ba4c:	b926      	cbnz	r6, 1ba58 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   1ba4e:	f385 8811 	msr	BASEPRI, r5
   1ba52:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1ba56:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1ba58:	4630      	mov	r0, r6
   1ba5a:	f007 f984 	bl	22d66 <z_unpend_thread_no_timeout>
   1ba5e:	2300      	movs	r3, #0
   1ba60:	67f3      	str	r3, [r6, #124]	; 0x7c
   1ba62:	f385 8811 	msr	BASEPRI, r5
   1ba66:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1ba6a:	4630      	mov	r0, r6
}
   1ba6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1ba70:	f007 b9b9 	b.w	22de6 <z_ready_thread>
   1ba74:	0001b9ed 	.word	0x0001b9ed

0001ba78 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba7c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ba82:	bf08      	it	eq
   1ba84:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   1ba88:	4606      	mov	r6, r0
   1ba8a:	461c      	mov	r4, r3
   1ba8c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   1ba90:	4689      	mov	r9, r1
   1ba92:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1ba94:	d03e      	beq.n	1bb14 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1ba96:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ba9a:	bf08      	it	eq
   1ba9c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1baa0:	4615      	mov	r5, r2
   1baa2:	4607      	mov	r7, r0
   1baa4:	d014      	beq.n	1bad0 <z_impl_k_timer_start+0x58>
   1baa6:	ea50 0302 	orrs.w	r3, r0, r2
   1baaa:	d011      	beq.n	1bad0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   1baac:	f06f 0301 	mvn.w	r3, #1
   1bab0:	1a9b      	subs	r3, r3, r2
   1bab2:	f04f 33ff 	mov.w	r3, #4294967295
   1bab6:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1baba:	2b00      	cmp	r3, #0
   1babc:	da08      	bge.n	1bad0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   1babe:	2a02      	cmp	r2, #2
   1bac0:	f170 0300 	sbcs.w	r3, r0, #0
   1bac4:	bfbc      	itt	lt
   1bac6:	2502      	movlt	r5, #2
   1bac8:	2700      	movlt	r7, #0
   1baca:	3d01      	subs	r5, #1
   1bacc:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bad0:	f06f 0301 	mvn.w	r3, #1
   1bad4:	1a5b      	subs	r3, r3, r1
   1bad6:	f04f 33ff 	mov.w	r3, #4294967295
   1bada:	eb63 0304 	sbc.w	r3, r3, r4
   1bade:	2b00      	cmp	r3, #0
   1bae0:	da09      	bge.n	1baf6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bae2:	2901      	cmp	r1, #1
   1bae4:	f174 0300 	sbcs.w	r3, r4, #0
   1bae8:	bfbc      	itt	lt
   1baea:	2101      	movlt	r1, #1
   1baec:	2400      	movlt	r4, #0
   1baee:	f111 39ff 	adds.w	r9, r1, #4294967295
   1baf2:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1baf6:	4630      	mov	r0, r6
   1baf8:	f007 fa2b 	bl	22f52 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bafc:	2300      	movs	r3, #0
   1bafe:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   1bb00:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bb04:	464a      	mov	r2, r9
   1bb06:	4643      	mov	r3, r8
   1bb08:	4630      	mov	r0, r6
   1bb0a:	4903      	ldr	r1, [pc, #12]	; (1bb18 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   1bb0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bb10:	f7ff be7e 	b.w	1b810 <z_add_timeout>
}
   1bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bb18:	0001b9ed 	.word	0x0001b9ed

0001bb1c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1bb1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1bb20:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1bb22:	4b29      	ldr	r3, [pc, #164]	; (1bbc8 <z_impl_k_poll+0xac>)
   1bb24:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1bb26:	2301      	movs	r3, #1
   1bb28:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1bb2c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1bb30:	ea52 0305 	orrs.w	r3, r2, r5
{
   1bb34:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1bb36:	bf0c      	ite	eq
   1bb38:	2301      	moveq	r3, #1
   1bb3a:	2300      	movne	r3, #0
   1bb3c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1bb40:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1bb42:	f007 fac7 	bl	230d4 <register_events>
   1bb46:	4681      	mov	r9, r0
	__asm__ volatile(
   1bb48:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb4c:	f3ef 8a11 	mrs	sl, BASEPRI
   1bb50:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb54:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1bb58:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1bb5c:	b964      	cbnz	r4, 1bb78 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1bb5e:	4601      	mov	r1, r0
   1bb60:	4652      	mov	r2, sl
   1bb62:	4640      	mov	r0, r8
   1bb64:	f007 fb87 	bl	23276 <clear_event_registrations>
	__asm__ volatile(
   1bb68:	f38a 8811 	msr	BASEPRI, sl
   1bb6c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1bb70:	4620      	mov	r0, r4
   1bb72:	b002      	add	sp, #8
   1bb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1bb78:	2300      	movs	r3, #0
   1bb7a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bb7e:	ea56 0305 	orrs.w	r3, r6, r5
   1bb82:	d106      	bne.n	1bb92 <z_impl_k_poll+0x76>
   1bb84:	f38a 8811 	msr	BASEPRI, sl
   1bb88:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1bb8c:	f06f 040a 	mvn.w	r4, #10
   1bb90:	e7ee      	b.n	1bb70 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1bb92:	e9cd 6500 	strd	r6, r5, [sp]
   1bb96:	4a0d      	ldr	r2, [pc, #52]	; (1bbcc <z_impl_k_poll+0xb0>)
   1bb98:	480d      	ldr	r0, [pc, #52]	; (1bbd0 <z_impl_k_poll+0xb4>)
   1bb9a:	4651      	mov	r1, sl
   1bb9c:	f7ff fc12 	bl	1b3c4 <z_pend_curr>
   1bba0:	4604      	mov	r4, r0
	__asm__ volatile(
   1bba2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bba6:	f3ef 8511 	mrs	r5, BASEPRI
   1bbaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbae:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1bbb2:	462a      	mov	r2, r5
   1bbb4:	4649      	mov	r1, r9
   1bbb6:	4640      	mov	r0, r8
   1bbb8:	f007 fb5d 	bl	23276 <clear_event_registrations>
	__asm__ volatile(
   1bbbc:	f385 8811 	msr	BASEPRI, r5
   1bbc0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1bbc4:	e7d4      	b.n	1bb70 <z_impl_k_poll+0x54>
   1bbc6:	bf00      	nop
   1bbc8:	20002814 	.word	0x20002814
   1bbcc:	200007dc 	.word	0x200007dc
   1bbd0:	20003dc1 	.word	0x20003dc1

0001bbd4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1bbd4:	b538      	push	{r3, r4, r5, lr}
   1bbd6:	4603      	mov	r3, r0
	__asm__ volatile(
   1bbd8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bbdc:	f3ef 8511 	mrs	r5, BASEPRI
   1bbe0:	f382 8812 	msr	BASEPRI_MAX, r2
   1bbe4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1bbe8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1bbea:	2101      	movs	r1, #1
   1bbec:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1bbee:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1bbf0:	4283      	cmp	r3, r0
   1bbf2:	d106      	bne.n	1bc02 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1bbf4:	f385 8811 	msr	BASEPRI, r5
   1bbf8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1bbfc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1bbfe:	4620      	mov	r0, r4
   1bc00:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1bc02:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1bc06:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bc08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bc0a:	2300      	movs	r3, #0
	node->prev = NULL;
   1bc0c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bc10:	f007 fad7 	bl	231c2 <signal_poll_event>
	z_reschedule(&lock, key);
   1bc14:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bc16:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1bc18:	4801      	ldr	r0, [pc, #4]	; (1bc20 <z_impl_k_poll_signal_raise+0x4c>)
   1bc1a:	f7ff fa7f 	bl	1b11c <z_reschedule>
	return rc;
   1bc1e:	e7ee      	b.n	1bbfe <z_impl_k_poll_signal_raise+0x2a>
   1bc20:	20003dc1 	.word	0x20003dc1

0001bc24 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1bc24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bc26:	4606      	mov	r6, r0
   1bc28:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1bc2a:	f006 fe8a 	bl	22942 <k_is_in_isr>
   1bc2e:	b978      	cbnz	r0, 1bc50 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1bc30:	4b0b      	ldr	r3, [pc, #44]	; (1bc60 <z_thread_aligned_alloc+0x3c>)
   1bc32:	689b      	ldr	r3, [r3, #8]
   1bc34:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1bc36:	b17c      	cbz	r4, 1bc58 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1bc38:	1d2a      	adds	r2, r5, #4
   1bc3a:	d209      	bcs.n	1bc50 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1bc3c:	2000      	movs	r0, #0
   1bc3e:	2100      	movs	r1, #0
   1bc40:	e9cd 0100 	strd	r0, r1, [sp]
   1bc44:	f046 0104 	orr.w	r1, r6, #4
   1bc48:	4620      	mov	r0, r4
   1bc4a:	f006 fdd8 	bl	227fe <k_heap_aligned_alloc>
	if (mem == NULL) {
   1bc4e:	b908      	cbnz	r0, 1bc54 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1bc50:	2400      	movs	r4, #0
	}

	return ret;
   1bc52:	e001      	b.n	1bc58 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1bc54:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1bc56:	1d04      	adds	r4, r0, #4
}
   1bc58:	4620      	mov	r0, r4
   1bc5a:	b002      	add	sp, #8
   1bc5c:	bd70      	pop	{r4, r5, r6, pc}
   1bc5e:	bf00      	nop
   1bc60:	20002814 	.word	0x20002814

0001bc64 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1bc64:	4a02      	ldr	r2, [pc, #8]	; (1bc70 <boot_banner+0xc>)
   1bc66:	4903      	ldr	r1, [pc, #12]	; (1bc74 <boot_banner+0x10>)
   1bc68:	4803      	ldr	r0, [pc, #12]	; (1bc78 <boot_banner+0x14>)
   1bc6a:	f003 bc90 	b.w	1f58e <printk>
   1bc6e:	bf00      	nop
   1bc70:	0002437d 	.word	0x0002437d
   1bc74:	000249d6 	.word	0x000249d6
   1bc78:	000249e3 	.word	0x000249e3

0001bc7c <ocrypto_ecdh_p256_public_key>:
   1bc7c:	b530      	push	{r4, r5, lr}
   1bc7e:	b099      	sub	sp, #100	; 0x64
   1bc80:	4605      	mov	r5, r0
   1bc82:	4668      	mov	r0, sp
   1bc84:	f000 f828 	bl	1bcd8 <ocrypto_sc_p256_from32bytes>
   1bc88:	4669      	mov	r1, sp
   1bc8a:	4604      	mov	r4, r0
   1bc8c:	a808      	add	r0, sp, #32
   1bc8e:	f000 fa53 	bl	1c138 <ocrypto_curve_p256_scalarmult_base>
   1bc92:	a908      	add	r1, sp, #32
   1bc94:	4304      	orrs	r4, r0
   1bc96:	4628      	mov	r0, r5
   1bc98:	f000 f98a 	bl	1bfb0 <ocrypto_curve_p256_to64bytes>
   1bc9c:	4620      	mov	r0, r4
   1bc9e:	b019      	add	sp, #100	; 0x64
   1bca0:	bd30      	pop	{r4, r5, pc}
   1bca2:	bf00      	nop

0001bca4 <ocrypto_ecdh_p256_common_secret>:
   1bca4:	b570      	push	{r4, r5, r6, lr}
   1bca6:	b098      	sub	sp, #96	; 0x60
   1bca8:	4605      	mov	r5, r0
   1bcaa:	4668      	mov	r0, sp
   1bcac:	4616      	mov	r6, r2
   1bcae:	f000 f813 	bl	1bcd8 <ocrypto_sc_p256_from32bytes>
   1bcb2:	4631      	mov	r1, r6
   1bcb4:	4604      	mov	r4, r0
   1bcb6:	a808      	add	r0, sp, #32
   1bcb8:	f000 f946 	bl	1bf48 <ocrypto_curve_p256_from64bytes>
   1bcbc:	a908      	add	r1, sp, #32
   1bcbe:	466a      	mov	r2, sp
   1bcc0:	4304      	orrs	r4, r0
   1bcc2:	4608      	mov	r0, r1
   1bcc4:	f000 f982 	bl	1bfcc <ocrypto_curve_p256_scalarmult>
   1bcc8:	a908      	add	r1, sp, #32
   1bcca:	4304      	orrs	r4, r0
   1bccc:	4628      	mov	r0, r5
   1bcce:	f000 f96d 	bl	1bfac <ocrypto_curve_p256_to32bytes>
   1bcd2:	4620      	mov	r0, r4
   1bcd4:	b018      	add	sp, #96	; 0x60
   1bcd6:	bd70      	pop	{r4, r5, r6, pc}

0001bcd8 <ocrypto_sc_p256_from32bytes>:
   1bcd8:	b570      	push	{r4, r5, r6, lr}
   1bcda:	680b      	ldr	r3, [r1, #0]
   1bcdc:	4e12      	ldr	r6, [pc, #72]	; (1bd28 <ocrypto_sc_p256_from32bytes+0x50>)
   1bcde:	ba1b      	rev	r3, r3
   1bce0:	61c3      	str	r3, [r0, #28]
   1bce2:	684b      	ldr	r3, [r1, #4]
   1bce4:	ba1b      	rev	r3, r3
   1bce6:	6183      	str	r3, [r0, #24]
   1bce8:	688b      	ldr	r3, [r1, #8]
   1bcea:	ba1b      	rev	r3, r3
   1bcec:	6143      	str	r3, [r0, #20]
   1bcee:	68cb      	ldr	r3, [r1, #12]
   1bcf0:	ba1b      	rev	r3, r3
   1bcf2:	6103      	str	r3, [r0, #16]
   1bcf4:	690b      	ldr	r3, [r1, #16]
   1bcf6:	ba1b      	rev	r3, r3
   1bcf8:	60c3      	str	r3, [r0, #12]
   1bcfa:	694b      	ldr	r3, [r1, #20]
   1bcfc:	ba1b      	rev	r3, r3
   1bcfe:	6083      	str	r3, [r0, #8]
   1bd00:	698b      	ldr	r3, [r1, #24]
   1bd02:	ba1b      	rev	r3, r3
   1bd04:	6043      	str	r3, [r0, #4]
   1bd06:	69cb      	ldr	r3, [r1, #28]
   1bd08:	ba1b      	rev	r3, r3
   1bd0a:	4632      	mov	r2, r6
   1bd0c:	6003      	str	r3, [r0, #0]
   1bd0e:	4601      	mov	r1, r0
   1bd10:	4604      	mov	r4, r0
   1bd12:	f7e5 f8b7 	bl	e84 <ocrypto_bigint_sub256>
   1bd16:	4631      	mov	r1, r6
   1bd18:	4605      	mov	r5, r0
   1bd1a:	4602      	mov	r2, r0
   1bd1c:	4620      	mov	r0, r4
   1bd1e:	f7e5 f8d1 	bl	ec4 <ocrypto_bigint_cadd256>
   1bd22:	1e68      	subs	r0, r5, #1
   1bd24:	bd70      	pop	{r4, r5, r6, pc}
   1bd26:	bf00      	nop
   1bd28:	000240dc 	.word	0x000240dc

0001bd2c <p256_zdblu>:
   1bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd30:	b088      	sub	sp, #32
   1bd32:	460c      	mov	r4, r1
   1bd34:	4606      	mov	r6, r0
   1bd36:	f102 0120 	add.w	r1, r2, #32
   1bd3a:	4668      	mov	r0, sp
   1bd3c:	f106 0720 	add.w	r7, r6, #32
   1bd40:	4690      	mov	r8, r2
   1bd42:	f7e5 fba9 	bl	1498 <ocrypto_mod_p256_sqr>
   1bd46:	466a      	mov	r2, sp
   1bd48:	4669      	mov	r1, sp
   1bd4a:	4668      	mov	r0, sp
   1bd4c:	f7e5 fab6 	bl	12bc <ocrypto_mod_p256_add>
   1bd50:	4669      	mov	r1, sp
   1bd52:	4638      	mov	r0, r7
   1bd54:	f7e5 fba0 	bl	1498 <ocrypto_mod_p256_sqr>
   1bd58:	463a      	mov	r2, r7
   1bd5a:	4639      	mov	r1, r7
   1bd5c:	4638      	mov	r0, r7
   1bd5e:	f104 0520 	add.w	r5, r4, #32
   1bd62:	f7e5 faab 	bl	12bc <ocrypto_mod_p256_add>
   1bd66:	466a      	mov	r2, sp
   1bd68:	4669      	mov	r1, sp
   1bd6a:	4668      	mov	r0, sp
   1bd6c:	f7e5 faa6 	bl	12bc <ocrypto_mod_p256_add>
   1bd70:	4641      	mov	r1, r8
   1bd72:	4628      	mov	r0, r5
   1bd74:	f7e5 fb90 	bl	1498 <ocrypto_mod_p256_sqr>
   1bd78:	466a      	mov	r2, sp
   1bd7a:	4641      	mov	r1, r8
   1bd7c:	4630      	mov	r0, r6
   1bd7e:	f7e5 fb73 	bl	1468 <ocrypto_mod_p256_mul>
   1bd82:	462a      	mov	r2, r5
   1bd84:	4629      	mov	r1, r5
   1bd86:	4668      	mov	r0, sp
   1bd88:	f7e5 fa98 	bl	12bc <ocrypto_mod_p256_add>
   1bd8c:	462a      	mov	r2, r5
   1bd8e:	4669      	mov	r1, sp
   1bd90:	4668      	mov	r0, sp
   1bd92:	f7e5 fa93 	bl	12bc <ocrypto_mod_p256_add>
   1bd96:	4a12      	ldr	r2, [pc, #72]	; (1bde0 <p256_zdblu+0xb4>)
   1bd98:	4669      	mov	r1, sp
   1bd9a:	4668      	mov	r0, sp
   1bd9c:	f7e5 fa8e 	bl	12bc <ocrypto_mod_p256_add>
   1bda0:	4669      	mov	r1, sp
   1bda2:	4620      	mov	r0, r4
   1bda4:	f7e5 fb78 	bl	1498 <ocrypto_mod_p256_sqr>
   1bda8:	4632      	mov	r2, r6
   1bdaa:	4621      	mov	r1, r4
   1bdac:	4620      	mov	r0, r4
   1bdae:	f7e5 fac3 	bl	1338 <ocrypto_mod_p256_sub>
   1bdb2:	4632      	mov	r2, r6
   1bdb4:	4621      	mov	r1, r4
   1bdb6:	4620      	mov	r0, r4
   1bdb8:	f7e5 fabe 	bl	1338 <ocrypto_mod_p256_sub>
   1bdbc:	4622      	mov	r2, r4
   1bdbe:	4631      	mov	r1, r6
   1bdc0:	4628      	mov	r0, r5
   1bdc2:	f7e5 fab9 	bl	1338 <ocrypto_mod_p256_sub>
   1bdc6:	466a      	mov	r2, sp
   1bdc8:	4629      	mov	r1, r5
   1bdca:	4628      	mov	r0, r5
   1bdcc:	f7e5 fb4c 	bl	1468 <ocrypto_mod_p256_mul>
   1bdd0:	463a      	mov	r2, r7
   1bdd2:	4629      	mov	r1, r5
   1bdd4:	4628      	mov	r0, r5
   1bdd6:	f7e5 faaf 	bl	1338 <ocrypto_mod_p256_sub>
   1bdda:	b008      	add	sp, #32
   1bddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bde0:	0002417c 	.word	0x0002417c

0001bde4 <p256_zaddc>:
   1bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bde6:	b099      	sub	sp, #100	; 0x64
   1bde8:	4604      	mov	r4, r0
   1bdea:	460d      	mov	r5, r1
   1bdec:	460a      	mov	r2, r1
   1bdee:	4601      	mov	r1, r0
   1bdf0:	4668      	mov	r0, sp
   1bdf2:	f7e5 faa1 	bl	1338 <ocrypto_mod_p256_sub>
   1bdf6:	4669      	mov	r1, sp
   1bdf8:	4668      	mov	r0, sp
   1bdfa:	f7e5 fb4d 	bl	1498 <ocrypto_mod_p256_sqr>
   1bdfe:	466a      	mov	r2, sp
   1be00:	4621      	mov	r1, r4
   1be02:	a808      	add	r0, sp, #32
   1be04:	f105 0620 	add.w	r6, r5, #32
   1be08:	f104 0720 	add.w	r7, r4, #32
   1be0c:	f7e5 fb2c 	bl	1468 <ocrypto_mod_p256_mul>
   1be10:	466a      	mov	r2, sp
   1be12:	4629      	mov	r1, r5
   1be14:	4668      	mov	r0, sp
   1be16:	f7e5 fb27 	bl	1468 <ocrypto_mod_p256_mul>
   1be1a:	4632      	mov	r2, r6
   1be1c:	4639      	mov	r1, r7
   1be1e:	a810      	add	r0, sp, #64	; 0x40
   1be20:	f7e5 fa4c 	bl	12bc <ocrypto_mod_p256_add>
   1be24:	4632      	mov	r2, r6
   1be26:	4639      	mov	r1, r7
   1be28:	4630      	mov	r0, r6
   1be2a:	f7e5 fa85 	bl	1338 <ocrypto_mod_p256_sub>
   1be2e:	4631      	mov	r1, r6
   1be30:	4628      	mov	r0, r5
   1be32:	f7e5 fb31 	bl	1498 <ocrypto_mod_p256_sqr>
   1be36:	466a      	mov	r2, sp
   1be38:	a908      	add	r1, sp, #32
   1be3a:	4620      	mov	r0, r4
   1be3c:	f7e5 fa3e 	bl	12bc <ocrypto_mod_p256_add>
   1be40:	4622      	mov	r2, r4
   1be42:	4629      	mov	r1, r5
   1be44:	4628      	mov	r0, r5
   1be46:	f7e5 fa77 	bl	1338 <ocrypto_mod_p256_sub>
   1be4a:	466a      	mov	r2, sp
   1be4c:	a908      	add	r1, sp, #32
   1be4e:	4668      	mov	r0, sp
   1be50:	f7e5 fa72 	bl	1338 <ocrypto_mod_p256_sub>
   1be54:	466a      	mov	r2, sp
   1be56:	4639      	mov	r1, r7
   1be58:	4638      	mov	r0, r7
   1be5a:	f7e5 fb05 	bl	1468 <ocrypto_mod_p256_mul>
   1be5e:	462a      	mov	r2, r5
   1be60:	a908      	add	r1, sp, #32
   1be62:	4668      	mov	r0, sp
   1be64:	f7e5 fa68 	bl	1338 <ocrypto_mod_p256_sub>
   1be68:	466a      	mov	r2, sp
   1be6a:	4631      	mov	r1, r6
   1be6c:	4630      	mov	r0, r6
   1be6e:	f7e5 fafb 	bl	1468 <ocrypto_mod_p256_mul>
   1be72:	463a      	mov	r2, r7
   1be74:	4631      	mov	r1, r6
   1be76:	4630      	mov	r0, r6
   1be78:	f7e5 fa5e 	bl	1338 <ocrypto_mod_p256_sub>
   1be7c:	a910      	add	r1, sp, #64	; 0x40
   1be7e:	4668      	mov	r0, sp
   1be80:	f7e5 fb0a 	bl	1498 <ocrypto_mod_p256_sqr>
   1be84:	4622      	mov	r2, r4
   1be86:	4669      	mov	r1, sp
   1be88:	4620      	mov	r0, r4
   1be8a:	f7e5 fa55 	bl	1338 <ocrypto_mod_p256_sub>
   1be8e:	a908      	add	r1, sp, #32
   1be90:	4622      	mov	r2, r4
   1be92:	4608      	mov	r0, r1
   1be94:	f7e5 fa50 	bl	1338 <ocrypto_mod_p256_sub>
   1be98:	a910      	add	r1, sp, #64	; 0x40
   1be9a:	aa08      	add	r2, sp, #32
   1be9c:	4608      	mov	r0, r1
   1be9e:	f7e5 fae3 	bl	1468 <ocrypto_mod_p256_mul>
   1bea2:	463a      	mov	r2, r7
   1bea4:	a910      	add	r1, sp, #64	; 0x40
   1bea6:	4638      	mov	r0, r7
   1bea8:	f7e5 fa46 	bl	1338 <ocrypto_mod_p256_sub>
   1beac:	b019      	add	sp, #100	; 0x64
   1beae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001beb0 <p256_zaddu>:
   1beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1beb4:	b088      	sub	sp, #32
   1beb6:	460c      	mov	r4, r1
   1beb8:	4605      	mov	r5, r0
   1beba:	4690      	mov	r8, r2
   1bebc:	460a      	mov	r2, r1
   1bebe:	4601      	mov	r1, r0
   1bec0:	4668      	mov	r0, sp
   1bec2:	f7e5 fa39 	bl	1338 <ocrypto_mod_p256_sub>
   1bec6:	4669      	mov	r1, sp
   1bec8:	4668      	mov	r0, sp
   1beca:	f7e5 fae5 	bl	1498 <ocrypto_mod_p256_sqr>
   1bece:	466a      	mov	r2, sp
   1bed0:	4629      	mov	r1, r5
   1bed2:	4628      	mov	r0, r5
   1bed4:	f104 0620 	add.w	r6, r4, #32
   1bed8:	f7e5 fac6 	bl	1468 <ocrypto_mod_p256_mul>
   1bedc:	f105 0720 	add.w	r7, r5, #32
   1bee0:	466a      	mov	r2, sp
   1bee2:	4621      	mov	r1, r4
   1bee4:	4668      	mov	r0, sp
   1bee6:	f7e5 fabf 	bl	1468 <ocrypto_mod_p256_mul>
   1beea:	4632      	mov	r2, r6
   1beec:	4639      	mov	r1, r7
   1beee:	4630      	mov	r0, r6
   1bef0:	f7e5 fa22 	bl	1338 <ocrypto_mod_p256_sub>
   1bef4:	4631      	mov	r1, r6
   1bef6:	4620      	mov	r0, r4
   1bef8:	f7e5 face 	bl	1498 <ocrypto_mod_p256_sqr>
   1befc:	462a      	mov	r2, r5
   1befe:	4621      	mov	r1, r4
   1bf00:	4620      	mov	r0, r4
   1bf02:	f7e5 fa19 	bl	1338 <ocrypto_mod_p256_sub>
   1bf06:	466a      	mov	r2, sp
   1bf08:	4621      	mov	r1, r4
   1bf0a:	4620      	mov	r0, r4
   1bf0c:	f7e5 fa14 	bl	1338 <ocrypto_mod_p256_sub>
   1bf10:	466a      	mov	r2, sp
   1bf12:	4629      	mov	r1, r5
   1bf14:	4640      	mov	r0, r8
   1bf16:	f7e5 fa0f 	bl	1338 <ocrypto_mod_p256_sub>
   1bf1a:	4642      	mov	r2, r8
   1bf1c:	4639      	mov	r1, r7
   1bf1e:	4638      	mov	r0, r7
   1bf20:	f7e5 faa2 	bl	1468 <ocrypto_mod_p256_mul>
   1bf24:	4622      	mov	r2, r4
   1bf26:	4629      	mov	r1, r5
   1bf28:	4668      	mov	r0, sp
   1bf2a:	f7e5 fa05 	bl	1338 <ocrypto_mod_p256_sub>
   1bf2e:	466a      	mov	r2, sp
   1bf30:	4631      	mov	r1, r6
   1bf32:	4630      	mov	r0, r6
   1bf34:	f7e5 fa98 	bl	1468 <ocrypto_mod_p256_mul>
   1bf38:	463a      	mov	r2, r7
   1bf3a:	4631      	mov	r1, r6
   1bf3c:	4630      	mov	r0, r6
   1bf3e:	f7e5 f9fb 	bl	1338 <ocrypto_mod_p256_sub>
   1bf42:	b008      	add	sp, #32
   1bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bf48 <ocrypto_curve_p256_from64bytes>:
   1bf48:	b570      	push	{r4, r5, r6, lr}
   1bf4a:	f100 0620 	add.w	r6, r0, #32
   1bf4e:	b090      	sub	sp, #64	; 0x40
   1bf50:	460d      	mov	r5, r1
   1bf52:	4604      	mov	r4, r0
   1bf54:	f000 f914 	bl	1c180 <ocrypto_mod_p256_from_bytes>
   1bf58:	f105 0120 	add.w	r1, r5, #32
   1bf5c:	4630      	mov	r0, r6
   1bf5e:	f000 f90f 	bl	1c180 <ocrypto_mod_p256_from_bytes>
   1bf62:	4621      	mov	r1, r4
   1bf64:	a808      	add	r0, sp, #32
   1bf66:	f7e5 fa97 	bl	1498 <ocrypto_mod_p256_sqr>
   1bf6a:	a908      	add	r1, sp, #32
   1bf6c:	4608      	mov	r0, r1
   1bf6e:	4a0d      	ldr	r2, [pc, #52]	; (1bfa4 <ocrypto_curve_p256_from64bytes+0x5c>)
   1bf70:	f7e5 f9a4 	bl	12bc <ocrypto_mod_p256_add>
   1bf74:	a908      	add	r1, sp, #32
   1bf76:	4622      	mov	r2, r4
   1bf78:	4608      	mov	r0, r1
   1bf7a:	f7e5 fa75 	bl	1468 <ocrypto_mod_p256_mul>
   1bf7e:	a908      	add	r1, sp, #32
   1bf80:	4a09      	ldr	r2, [pc, #36]	; (1bfa8 <ocrypto_curve_p256_from64bytes+0x60>)
   1bf82:	4608      	mov	r0, r1
   1bf84:	f7e5 f99a 	bl	12bc <ocrypto_mod_p256_add>
   1bf88:	4631      	mov	r1, r6
   1bf8a:	4668      	mov	r0, sp
   1bf8c:	f7e5 fa84 	bl	1498 <ocrypto_mod_p256_sqr>
   1bf90:	2220      	movs	r2, #32
   1bf92:	4669      	mov	r1, sp
   1bf94:	eb0d 0002 	add.w	r0, sp, r2
   1bf98:	f7e5 f962 	bl	1260 <ocrypto_constant_time_equal>
   1bf9c:	3801      	subs	r0, #1
   1bf9e:	b010      	add	sp, #64	; 0x40
   1bfa0:	bd70      	pop	{r4, r5, r6, pc}
   1bfa2:	bf00      	nop
   1bfa4:	0002417c 	.word	0x0002417c
   1bfa8:	0002419c 	.word	0x0002419c

0001bfac <ocrypto_curve_p256_to32bytes>:
   1bfac:	f000 b902 	b.w	1c1b4 <ocrypto_mod_p256_to_bytes>

0001bfb0 <ocrypto_curve_p256_to64bytes>:
   1bfb0:	b538      	push	{r3, r4, r5, lr}
   1bfb2:	4604      	mov	r4, r0
   1bfb4:	460d      	mov	r5, r1
   1bfb6:	f000 f8fd 	bl	1c1b4 <ocrypto_mod_p256_to_bytes>
   1bfba:	f105 0120 	add.w	r1, r5, #32
   1bfbe:	f104 0020 	add.w	r0, r4, #32
   1bfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1bfc6:	f000 b8f5 	b.w	1c1b4 <ocrypto_mod_p256_to_bytes>
   1bfca:	bf00      	nop

0001bfcc <ocrypto_curve_p256_scalarmult>:
   1bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bfd0:	4613      	mov	r3, r2
   1bfd2:	b0b8      	sub	sp, #224	; 0xe0
   1bfd4:	4a54      	ldr	r2, [pc, #336]	; (1c128 <ocrypto_curve_p256_scalarmult+0x15c>)
   1bfd6:	4689      	mov	r9, r1
   1bfd8:	4680      	mov	r8, r0
   1bfda:	4619      	mov	r1, r3
   1bfdc:	a810      	add	r0, sp, #64	; 0x40
   1bfde:	f7e4 ff51 	bl	e84 <ocrypto_bigint_sub256>
   1bfe2:	4952      	ldr	r1, [pc, #328]	; (1c12c <ocrypto_curve_p256_scalarmult+0x160>)
   1bfe4:	4602      	mov	r2, r0
   1bfe6:	a810      	add	r0, sp, #64	; 0x40
   1bfe8:	f7e4 ff6c 	bl	ec4 <ocrypto_bigint_cadd256>
   1bfec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1bfee:	494e      	ldr	r1, [pc, #312]	; (1c128 <ocrypto_curve_p256_scalarmult+0x15c>)
   1bff0:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1bff4:	4607      	mov	r7, r0
   1bff6:	f1c6 0201 	rsb	r2, r6, #1
   1bffa:	a810      	add	r0, sp, #64	; 0x40
   1bffc:	f7e4 ff62 	bl	ec4 <ocrypto_bigint_cadd256>
   1c000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c002:	464a      	mov	r2, r9
   1c004:	ea6f 0a03 	mvn.w	sl, r3
   1c008:	a928      	add	r1, sp, #160	; 0xa0
   1c00a:	a818      	add	r0, sp, #96	; 0x60
   1c00c:	f7ff fe8e 	bl	1bd2c <p256_zdblu>
   1c010:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1c014:	a920      	add	r1, sp, #128	; 0x80
   1c016:	f1ca 0201 	rsb	r2, sl, #1
   1c01a:	4608      	mov	r0, r1
   1c01c:	f000 f892 	bl	1c144 <ocrypto_mod_p256_cneg>
   1c020:	f1c7 0701 	rsb	r7, r7, #1
   1c024:	24fe      	movs	r4, #254	; 0xfe
   1c026:	466a      	mov	r2, sp
   1c028:	a918      	add	r1, sp, #96	; 0x60
   1c02a:	a828      	add	r0, sp, #160	; 0xa0
   1c02c:	f7ff ff40 	bl	1beb0 <p256_zaddu>
   1c030:	1162      	asrs	r2, r4, #5
   1c032:	ab38      	add	r3, sp, #224	; 0xe0
   1c034:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c038:	f004 011f 	and.w	r1, r4, #31
   1c03c:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1c040:	40cb      	lsrs	r3, r1
   1c042:	4655      	mov	r5, sl
   1c044:	f003 0a01 	and.w	sl, r3, #1
   1c048:	ea8a 0505 	eor.w	r5, sl, r5
   1c04c:	462a      	mov	r2, r5
   1c04e:	a928      	add	r1, sp, #160	; 0xa0
   1c050:	a818      	add	r0, sp, #96	; 0x60
   1c052:	f7e4 ff93 	bl	f7c <ocrypto_bigint_cswap256>
   1c056:	462a      	mov	r2, r5
   1c058:	a930      	add	r1, sp, #192	; 0xc0
   1c05a:	a820      	add	r0, sp, #128	; 0x80
   1c05c:	f7e4 ff8e 	bl	f7c <ocrypto_bigint_cswap256>
   1c060:	3c01      	subs	r4, #1
   1c062:	a928      	add	r1, sp, #160	; 0xa0
   1c064:	a818      	add	r0, sp, #96	; 0x60
   1c066:	f7ff febd 	bl	1bde4 <p256_zaddc>
   1c06a:	1c63      	adds	r3, r4, #1
   1c06c:	d1db      	bne.n	1c026 <ocrypto_curve_p256_scalarmult+0x5a>
   1c06e:	f1ca 0201 	rsb	r2, sl, #1
   1c072:	a920      	add	r1, sp, #128	; 0x80
   1c074:	a808      	add	r0, sp, #32
   1c076:	f000 f865 	bl	1c144 <ocrypto_mod_p256_cneg>
   1c07a:	ea86 060a 	eor.w	r6, r6, sl
   1c07e:	466a      	mov	r2, sp
   1c080:	a918      	add	r1, sp, #96	; 0x60
   1c082:	a828      	add	r0, sp, #160	; 0xa0
   1c084:	f7ff ff14 	bl	1beb0 <p256_zaddu>
   1c088:	a928      	add	r1, sp, #160	; 0xa0
   1c08a:	4632      	mov	r2, r6
   1c08c:	a818      	add	r0, sp, #96	; 0x60
   1c08e:	f7e4 ff75 	bl	f7c <ocrypto_bigint_cswap256>
   1c092:	4632      	mov	r2, r6
   1c094:	a930      	add	r1, sp, #192	; 0xc0
   1c096:	a820      	add	r0, sp, #128	; 0x80
   1c098:	f7e4 ff70 	bl	f7c <ocrypto_bigint_cswap256>
   1c09c:	a908      	add	r1, sp, #32
   1c09e:	466a      	mov	r2, sp
   1c0a0:	4608      	mov	r0, r1
   1c0a2:	f7e5 f9e1 	bl	1468 <ocrypto_mod_p256_mul>
   1c0a6:	a908      	add	r1, sp, #32
   1c0a8:	4608      	mov	r0, r1
   1c0aa:	f000 f89d 	bl	1c1e8 <ocrypto_mod_p256_inv>
   1c0ae:	a908      	add	r1, sp, #32
   1c0b0:	f108 0420 	add.w	r4, r8, #32
   1c0b4:	f109 0220 	add.w	r2, r9, #32
   1c0b8:	4608      	mov	r0, r1
   1c0ba:	f7e5 f9d5 	bl	1468 <ocrypto_mod_p256_mul>
   1c0be:	a920      	add	r1, sp, #128	; 0x80
   1c0c0:	aa08      	add	r2, sp, #32
   1c0c2:	4620      	mov	r0, r4
   1c0c4:	f7e5 f9d0 	bl	1468 <ocrypto_mod_p256_mul>
   1c0c8:	aa08      	add	r2, sp, #32
   1c0ca:	a918      	add	r1, sp, #96	; 0x60
   1c0cc:	4668      	mov	r0, sp
   1c0ce:	f7e5 f9cb 	bl	1468 <ocrypto_mod_p256_mul>
   1c0d2:	4669      	mov	r1, sp
   1c0d4:	4668      	mov	r0, sp
   1c0d6:	f7e5 f9df 	bl	1498 <ocrypto_mod_p256_sqr>
   1c0da:	aa18      	add	r2, sp, #96	; 0x60
   1c0dc:	4669      	mov	r1, sp
   1c0de:	a808      	add	r0, sp, #32
   1c0e0:	f7e5 f9c2 	bl	1468 <ocrypto_mod_p256_mul>
   1c0e4:	4621      	mov	r1, r4
   1c0e6:	4668      	mov	r0, sp
   1c0e8:	f7e5 f9d6 	bl	1498 <ocrypto_mod_p256_sqr>
   1c0ec:	aa08      	add	r2, sp, #32
   1c0ee:	4669      	mov	r1, sp
   1c0f0:	4610      	mov	r0, r2
   1c0f2:	f7e5 f921 	bl	1338 <ocrypto_mod_p256_sub>
   1c0f6:	4a0e      	ldr	r2, [pc, #56]	; (1c130 <ocrypto_curve_p256_scalarmult+0x164>)
   1c0f8:	a908      	add	r1, sp, #32
   1c0fa:	4668      	mov	r0, sp
   1c0fc:	f7e5 f91c 	bl	1338 <ocrypto_mod_p256_sub>
   1c100:	4620      	mov	r0, r4
   1c102:	2120      	movs	r1, #32
   1c104:	f7e5 f8c0 	bl	1288 <ocrypto_constant_time_is_zero>
   1c108:	a908      	add	r1, sp, #32
   1c10a:	4243      	negs	r3, r0
   1c10c:	4602      	mov	r2, r0
   1c10e:	4668      	mov	r0, sp
   1c110:	431f      	orrs	r7, r3
   1c112:	f7e4 ff33 	bl	f7c <ocrypto_bigint_cswap256>
   1c116:	4640      	mov	r0, r8
   1c118:	4a06      	ldr	r2, [pc, #24]	; (1c134 <ocrypto_curve_p256_scalarmult+0x168>)
   1c11a:	4669      	mov	r1, sp
   1c11c:	f7e5 f9a4 	bl	1468 <ocrypto_mod_p256_mul>
   1c120:	4638      	mov	r0, r7
   1c122:	b038      	add	sp, #224	; 0xe0
   1c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c128:	000241bc 	.word	0x000241bc
   1c12c:	0002413c 	.word	0x0002413c
   1c130:	0002419c 	.word	0x0002419c
   1c134:	0002415c 	.word	0x0002415c

0001c138 <ocrypto_curve_p256_scalarmult_base>:
   1c138:	460a      	mov	r2, r1
   1c13a:	4901      	ldr	r1, [pc, #4]	; (1c140 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1c13c:	f7ff bf46 	b.w	1bfcc <ocrypto_curve_p256_scalarmult>
   1c140:	000240fc 	.word	0x000240fc

0001c144 <ocrypto_mod_p256_cneg>:
   1c144:	b570      	push	{r4, r5, r6, lr}
   1c146:	b088      	sub	sp, #32
   1c148:	4604      	mov	r4, r0
   1c14a:	460d      	mov	r5, r1
   1c14c:	4616      	mov	r6, r2
   1c14e:	2100      	movs	r1, #0
   1c150:	2220      	movs	r2, #32
   1c152:	4668      	mov	r0, sp
   1c154:	f007 f91c 	bl	23390 <memset>
   1c158:	2300      	movs	r3, #0
   1c15a:	4629      	mov	r1, r5
   1c15c:	2220      	movs	r2, #32
   1c15e:	4620      	mov	r0, r4
   1c160:	9300      	str	r3, [sp, #0]
   1c162:	f007 f8f4 	bl	2334e <memcpy>
   1c166:	462a      	mov	r2, r5
   1c168:	4669      	mov	r1, sp
   1c16a:	4668      	mov	r0, sp
   1c16c:	f7e5 f8e4 	bl	1338 <ocrypto_mod_p256_sub>
   1c170:	4632      	mov	r2, r6
   1c172:	4669      	mov	r1, sp
   1c174:	4620      	mov	r0, r4
   1c176:	f7e4 ff01 	bl	f7c <ocrypto_bigint_cswap256>
   1c17a:	b008      	add	sp, #32
   1c17c:	bd70      	pop	{r4, r5, r6, pc}
   1c17e:	bf00      	nop

0001c180 <ocrypto_mod_p256_from_bytes>:
   1c180:	680b      	ldr	r3, [r1, #0]
   1c182:	ba1b      	rev	r3, r3
   1c184:	61c3      	str	r3, [r0, #28]
   1c186:	684b      	ldr	r3, [r1, #4]
   1c188:	ba1b      	rev	r3, r3
   1c18a:	6183      	str	r3, [r0, #24]
   1c18c:	688b      	ldr	r3, [r1, #8]
   1c18e:	ba1b      	rev	r3, r3
   1c190:	6143      	str	r3, [r0, #20]
   1c192:	68cb      	ldr	r3, [r1, #12]
   1c194:	ba1b      	rev	r3, r3
   1c196:	6103      	str	r3, [r0, #16]
   1c198:	690b      	ldr	r3, [r1, #16]
   1c19a:	ba1b      	rev	r3, r3
   1c19c:	60c3      	str	r3, [r0, #12]
   1c19e:	694b      	ldr	r3, [r1, #20]
   1c1a0:	ba1b      	rev	r3, r3
   1c1a2:	6083      	str	r3, [r0, #8]
   1c1a4:	698b      	ldr	r3, [r1, #24]
   1c1a6:	ba1b      	rev	r3, r3
   1c1a8:	6043      	str	r3, [r0, #4]
   1c1aa:	69cb      	ldr	r3, [r1, #28]
   1c1ac:	ba1b      	rev	r3, r3
   1c1ae:	6003      	str	r3, [r0, #0]
   1c1b0:	4770      	bx	lr
   1c1b2:	bf00      	nop

0001c1b4 <ocrypto_mod_p256_to_bytes>:
   1c1b4:	69cb      	ldr	r3, [r1, #28]
   1c1b6:	ba1b      	rev	r3, r3
   1c1b8:	6003      	str	r3, [r0, #0]
   1c1ba:	698b      	ldr	r3, [r1, #24]
   1c1bc:	ba1b      	rev	r3, r3
   1c1be:	6043      	str	r3, [r0, #4]
   1c1c0:	694b      	ldr	r3, [r1, #20]
   1c1c2:	ba1b      	rev	r3, r3
   1c1c4:	6083      	str	r3, [r0, #8]
   1c1c6:	690b      	ldr	r3, [r1, #16]
   1c1c8:	ba1b      	rev	r3, r3
   1c1ca:	60c3      	str	r3, [r0, #12]
   1c1cc:	68cb      	ldr	r3, [r1, #12]
   1c1ce:	ba1b      	rev	r3, r3
   1c1d0:	6103      	str	r3, [r0, #16]
   1c1d2:	688b      	ldr	r3, [r1, #8]
   1c1d4:	ba1b      	rev	r3, r3
   1c1d6:	6143      	str	r3, [r0, #20]
   1c1d8:	684b      	ldr	r3, [r1, #4]
   1c1da:	ba1b      	rev	r3, r3
   1c1dc:	6183      	str	r3, [r0, #24]
   1c1de:	680b      	ldr	r3, [r1, #0]
   1c1e0:	ba1b      	rev	r3, r3
   1c1e2:	61c3      	str	r3, [r0, #28]
   1c1e4:	4770      	bx	lr
   1c1e6:	bf00      	nop

0001c1e8 <ocrypto_mod_p256_inv>:
   1c1e8:	b570      	push	{r4, r5, r6, lr}
   1c1ea:	b098      	sub	sp, #96	; 0x60
   1c1ec:	460d      	mov	r5, r1
   1c1ee:	4606      	mov	r6, r0
   1c1f0:	a810      	add	r0, sp, #64	; 0x40
   1c1f2:	f7e5 f951 	bl	1498 <ocrypto_mod_p256_sqr>
   1c1f6:	462a      	mov	r2, r5
   1c1f8:	a910      	add	r1, sp, #64	; 0x40
   1c1fa:	4668      	mov	r0, sp
   1c1fc:	f7e5 f934 	bl	1468 <ocrypto_mod_p256_mul>
   1c200:	4669      	mov	r1, sp
   1c202:	a810      	add	r0, sp, #64	; 0x40
   1c204:	f7e5 f948 	bl	1498 <ocrypto_mod_p256_sqr>
   1c208:	a910      	add	r1, sp, #64	; 0x40
   1c20a:	4608      	mov	r0, r1
   1c20c:	f7e5 f944 	bl	1498 <ocrypto_mod_p256_sqr>
   1c210:	466a      	mov	r2, sp
   1c212:	a910      	add	r1, sp, #64	; 0x40
   1c214:	a808      	add	r0, sp, #32
   1c216:	f7e5 f927 	bl	1468 <ocrypto_mod_p256_mul>
   1c21a:	a908      	add	r1, sp, #32
   1c21c:	a810      	add	r0, sp, #64	; 0x40
   1c21e:	f7e5 f93b 	bl	1498 <ocrypto_mod_p256_sqr>
   1c222:	a910      	add	r1, sp, #64	; 0x40
   1c224:	4608      	mov	r0, r1
   1c226:	f7e5 f937 	bl	1498 <ocrypto_mod_p256_sqr>
   1c22a:	a910      	add	r1, sp, #64	; 0x40
   1c22c:	4608      	mov	r0, r1
   1c22e:	f7e5 f933 	bl	1498 <ocrypto_mod_p256_sqr>
   1c232:	a910      	add	r1, sp, #64	; 0x40
   1c234:	4608      	mov	r0, r1
   1c236:	f7e5 f92f 	bl	1498 <ocrypto_mod_p256_sqr>
   1c23a:	a910      	add	r1, sp, #64	; 0x40
   1c23c:	aa08      	add	r2, sp, #32
   1c23e:	4608      	mov	r0, r1
   1c240:	f7e5 f912 	bl	1468 <ocrypto_mod_p256_mul>
   1c244:	a910      	add	r1, sp, #64	; 0x40
   1c246:	4608      	mov	r0, r1
   1c248:	f7e5 f926 	bl	1498 <ocrypto_mod_p256_sqr>
   1c24c:	a910      	add	r1, sp, #64	; 0x40
   1c24e:	4608      	mov	r0, r1
   1c250:	f7e5 f922 	bl	1498 <ocrypto_mod_p256_sqr>
   1c254:	a910      	add	r1, sp, #64	; 0x40
   1c256:	466a      	mov	r2, sp
   1c258:	a808      	add	r0, sp, #32
   1c25a:	f7e5 f905 	bl	1468 <ocrypto_mod_p256_mul>
   1c25e:	2405      	movs	r4, #5
   1c260:	a908      	add	r1, sp, #32
   1c262:	a810      	add	r0, sp, #64	; 0x40
   1c264:	f7e5 f918 	bl	1498 <ocrypto_mod_p256_sqr>
   1c268:	a910      	add	r1, sp, #64	; 0x40
   1c26a:	4608      	mov	r0, r1
   1c26c:	f7e5 f914 	bl	1498 <ocrypto_mod_p256_sqr>
   1c270:	3c01      	subs	r4, #1
   1c272:	a910      	add	r1, sp, #64	; 0x40
   1c274:	d1f5      	bne.n	1c262 <ocrypto_mod_p256_inv+0x7a>
   1c276:	aa08      	add	r2, sp, #32
   1c278:	4608      	mov	r0, r1
   1c27a:	f7e5 f8f5 	bl	1468 <ocrypto_mod_p256_mul>
   1c27e:	2405      	movs	r4, #5
   1c280:	a910      	add	r1, sp, #64	; 0x40
   1c282:	4608      	mov	r0, r1
   1c284:	f7e5 f908 	bl	1498 <ocrypto_mod_p256_sqr>
   1c288:	a910      	add	r1, sp, #64	; 0x40
   1c28a:	4608      	mov	r0, r1
   1c28c:	f7e5 f904 	bl	1498 <ocrypto_mod_p256_sqr>
   1c290:	3c01      	subs	r4, #1
   1c292:	d1f5      	bne.n	1c280 <ocrypto_mod_p256_inv+0x98>
   1c294:	a910      	add	r1, sp, #64	; 0x40
   1c296:	aa08      	add	r2, sp, #32
   1c298:	4608      	mov	r0, r1
   1c29a:	f7e5 f8e5 	bl	1468 <ocrypto_mod_p256_mul>
   1c29e:	a910      	add	r1, sp, #64	; 0x40
   1c2a0:	a808      	add	r0, sp, #32
   1c2a2:	f7e5 f8f9 	bl	1498 <ocrypto_mod_p256_sqr>
   1c2a6:	a908      	add	r1, sp, #32
   1c2a8:	4608      	mov	r0, r1
   1c2aa:	f7e5 f8f5 	bl	1498 <ocrypto_mod_p256_sqr>
   1c2ae:	a908      	add	r1, sp, #32
   1c2b0:	466a      	mov	r2, sp
   1c2b2:	4668      	mov	r0, sp
   1c2b4:	f7e5 f8d8 	bl	1468 <ocrypto_mod_p256_mul>
   1c2b8:	2410      	movs	r4, #16
   1c2ba:	4669      	mov	r1, sp
   1c2bc:	a810      	add	r0, sp, #64	; 0x40
   1c2be:	f7e5 f8eb 	bl	1498 <ocrypto_mod_p256_sqr>
   1c2c2:	a910      	add	r1, sp, #64	; 0x40
   1c2c4:	4608      	mov	r0, r1
   1c2c6:	f7e5 f8e7 	bl	1498 <ocrypto_mod_p256_sqr>
   1c2ca:	3c01      	subs	r4, #1
   1c2cc:	a910      	add	r1, sp, #64	; 0x40
   1c2ce:	d1f5      	bne.n	1c2bc <ocrypto_mod_p256_inv+0xd4>
   1c2d0:	462a      	mov	r2, r5
   1c2d2:	4608      	mov	r0, r1
   1c2d4:	f7e5 f8c8 	bl	1468 <ocrypto_mod_p256_mul>
   1c2d8:	2440      	movs	r4, #64	; 0x40
   1c2da:	a910      	add	r1, sp, #64	; 0x40
   1c2dc:	4608      	mov	r0, r1
   1c2de:	f7e5 f8db 	bl	1498 <ocrypto_mod_p256_sqr>
   1c2e2:	a910      	add	r1, sp, #64	; 0x40
   1c2e4:	4608      	mov	r0, r1
   1c2e6:	f7e5 f8d7 	bl	1498 <ocrypto_mod_p256_sqr>
   1c2ea:	3c01      	subs	r4, #1
   1c2ec:	d1f5      	bne.n	1c2da <ocrypto_mod_p256_inv+0xf2>
   1c2ee:	a910      	add	r1, sp, #64	; 0x40
   1c2f0:	466a      	mov	r2, sp
   1c2f2:	4608      	mov	r0, r1
   1c2f4:	f7e5 f8b8 	bl	1468 <ocrypto_mod_p256_mul>
   1c2f8:	2410      	movs	r4, #16
   1c2fa:	a910      	add	r1, sp, #64	; 0x40
   1c2fc:	4608      	mov	r0, r1
   1c2fe:	f7e5 f8cb 	bl	1498 <ocrypto_mod_p256_sqr>
   1c302:	a910      	add	r1, sp, #64	; 0x40
   1c304:	4608      	mov	r0, r1
   1c306:	f7e5 f8c7 	bl	1498 <ocrypto_mod_p256_sqr>
   1c30a:	3c01      	subs	r4, #1
   1c30c:	d1f5      	bne.n	1c2fa <ocrypto_mod_p256_inv+0x112>
   1c30e:	a910      	add	r1, sp, #64	; 0x40
   1c310:	466a      	mov	r2, sp
   1c312:	4608      	mov	r0, r1
   1c314:	f7e5 f8a8 	bl	1468 <ocrypto_mod_p256_mul>
   1c318:	2410      	movs	r4, #16
   1c31a:	a910      	add	r1, sp, #64	; 0x40
   1c31c:	4608      	mov	r0, r1
   1c31e:	f7e5 f8bb 	bl	1498 <ocrypto_mod_p256_sqr>
   1c322:	a910      	add	r1, sp, #64	; 0x40
   1c324:	4608      	mov	r0, r1
   1c326:	f7e5 f8b7 	bl	1498 <ocrypto_mod_p256_sqr>
   1c32a:	3c01      	subs	r4, #1
   1c32c:	d1f5      	bne.n	1c31a <ocrypto_mod_p256_inv+0x132>
   1c32e:	a910      	add	r1, sp, #64	; 0x40
   1c330:	aa08      	add	r2, sp, #32
   1c332:	4608      	mov	r0, r1
   1c334:	f7e5 f898 	bl	1468 <ocrypto_mod_p256_mul>
   1c338:	462a      	mov	r2, r5
   1c33a:	a910      	add	r1, sp, #64	; 0x40
   1c33c:	4630      	mov	r0, r6
   1c33e:	f7e5 f893 	bl	1468 <ocrypto_mod_p256_mul>
   1c342:	b018      	add	sp, #96	; 0x60
   1c344:	bd70      	pop	{r4, r5, r6, pc}
   1c346:	bf00      	nop

0001c348 <nrf_cc3xx_platform_init>:
   1c348:	b510      	push	{r4, lr}
   1c34a:	4c0c      	ldr	r4, [pc, #48]	; (1c37c <nrf_cc3xx_platform_init+0x34>)
   1c34c:	6823      	ldr	r3, [r4, #0]
   1c34e:	b113      	cbz	r3, 1c356 <nrf_cc3xx_platform_init+0xe>
   1c350:	4b0b      	ldr	r3, [pc, #44]	; (1c380 <nrf_cc3xx_platform_init+0x38>)
   1c352:	681b      	ldr	r3, [r3, #0]
   1c354:	b92b      	cbnz	r3, 1c362 <nrf_cc3xx_platform_init+0x1a>
   1c356:	f000 fe7d 	bl	1d054 <CC_LibInit>
   1c35a:	b930      	cbnz	r0, 1c36a <nrf_cc3xx_platform_init+0x22>
   1c35c:	4b08      	ldr	r3, [pc, #32]	; (1c380 <nrf_cc3xx_platform_init+0x38>)
   1c35e:	2201      	movs	r2, #1
   1c360:	601a      	str	r2, [r3, #0]
   1c362:	2301      	movs	r3, #1
   1c364:	6023      	str	r3, [r4, #0]
   1c366:	2000      	movs	r0, #0
   1c368:	bd10      	pop	{r4, pc}
   1c36a:	3801      	subs	r0, #1
   1c36c:	2806      	cmp	r0, #6
   1c36e:	d901      	bls.n	1c374 <nrf_cc3xx_platform_init+0x2c>
   1c370:	4804      	ldr	r0, [pc, #16]	; (1c384 <nrf_cc3xx_platform_init+0x3c>)
   1c372:	bd10      	pop	{r4, pc}
   1c374:	4b04      	ldr	r3, [pc, #16]	; (1c388 <nrf_cc3xx_platform_init+0x40>)
   1c376:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c37a:	bd10      	pop	{r4, pc}
   1c37c:	20002854 	.word	0x20002854
   1c380:	20002858 	.word	0x20002858
   1c384:	ffff8ffe 	.word	0xffff8ffe
   1c388:	000241dc 	.word	0x000241dc

0001c38c <nrf_cc3xx_platform_abort>:
   1c38c:	f3bf 8f4f 	dsb	sy
   1c390:	4905      	ldr	r1, [pc, #20]	; (1c3a8 <nrf_cc3xx_platform_abort+0x1c>)
   1c392:	4b06      	ldr	r3, [pc, #24]	; (1c3ac <nrf_cc3xx_platform_abort+0x20>)
   1c394:	68ca      	ldr	r2, [r1, #12]
   1c396:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c39a:	4313      	orrs	r3, r2
   1c39c:	60cb      	str	r3, [r1, #12]
   1c39e:	f3bf 8f4f 	dsb	sy
   1c3a2:	bf00      	nop
   1c3a4:	e7fd      	b.n	1c3a2 <nrf_cc3xx_platform_abort+0x16>
   1c3a6:	bf00      	nop
   1c3a8:	e000ed00 	.word	0xe000ed00
   1c3ac:	05fa0004 	.word	0x05fa0004

0001c3b0 <CC_PalAbort>:
   1c3b0:	b410      	push	{r4}
   1c3b2:	4b09      	ldr	r3, [pc, #36]	; (1c3d8 <CC_PalAbort+0x28>)
   1c3b4:	4909      	ldr	r1, [pc, #36]	; (1c3dc <CC_PalAbort+0x2c>)
   1c3b6:	4c0a      	ldr	r4, [pc, #40]	; (1c3e0 <CC_PalAbort+0x30>)
   1c3b8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1c3bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1c3c0:	6849      	ldr	r1, [r1, #4]
   1c3c2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1c3c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1c3ca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1c3d4:	bc10      	pop	{r4}
   1c3d6:	4708      	bx	r1
   1c3d8:	5002b000 	.word	0x5002b000
   1c3dc:	200007e4 	.word	0x200007e4
   1c3e0:	5002a000 	.word	0x5002a000

0001c3e4 <nrf_cc3xx_platform_set_abort>:
   1c3e4:	e9d0 1200 	ldrd	r1, r2, [r0]
   1c3e8:	4b01      	ldr	r3, [pc, #4]	; (1c3f0 <nrf_cc3xx_platform_set_abort+0xc>)
   1c3ea:	e9c3 1200 	strd	r1, r2, [r3]
   1c3ee:	4770      	bx	lr
   1c3f0:	200007e4 	.word	0x200007e4

0001c3f4 <nrf_cc3xx_platform_ctr_drbg_init>:
   1c3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c3f8:	4c14      	ldr	r4, [pc, #80]	; (1c44c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1c3fa:	4e15      	ldr	r6, [pc, #84]	; (1c450 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1c3fc:	2800      	cmp	r0, #0
   1c3fe:	bf18      	it	ne
   1c400:	4604      	movne	r4, r0
   1c402:	b083      	sub	sp, #12
   1c404:	6823      	ldr	r3, [r4, #0]
   1c406:	42b3      	cmp	r3, r6
   1c408:	d01c      	beq.n	1c444 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   1c40a:	460d      	mov	r5, r1
   1c40c:	4620      	mov	r0, r4
   1c40e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1c412:	f104 0904 	add.w	r9, r4, #4
   1c416:	4617      	mov	r7, r2
   1c418:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1c41c:	f000 f8d0 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c420:	4648      	mov	r0, r9
   1c422:	f000 fd05 	bl	1ce30 <cc_mbedtls_entropy_init>
   1c426:	4640      	mov	r0, r8
   1c428:	f000 fb32 	bl	1ca90 <cc_mbedtls_ctr_drbg_init>
   1c42c:	4909      	ldr	r1, [pc, #36]	; (1c454 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1c42e:	9700      	str	r7, [sp, #0]
   1c430:	462b      	mov	r3, r5
   1c432:	464a      	mov	r2, r9
   1c434:	4640      	mov	r0, r8
   1c436:	f000 fb41 	bl	1cabc <cc_mbedtls_ctr_drbg_seed>
   1c43a:	b900      	cbnz	r0, 1c43e <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   1c43c:	6026      	str	r6, [r4, #0]
   1c43e:	b003      	add	sp, #12
   1c440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c444:	2000      	movs	r0, #0
   1c446:	b003      	add	sp, #12
   1c448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c44c:	2000285c 	.word	0x2000285c
   1c450:	5ac9bca5 	.word	0x5ac9bca5
   1c454:	0001ceb1 	.word	0x0001ceb1

0001c458 <nrf_cc3xx_platform_ctr_drbg_get>:
   1c458:	b570      	push	{r4, r5, r6, lr}
   1c45a:	4d0d      	ldr	r5, [pc, #52]	; (1c490 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1c45c:	2800      	cmp	r0, #0
   1c45e:	bf18      	it	ne
   1c460:	4605      	movne	r5, r0
   1c462:	461e      	mov	r6, r3
   1c464:	6828      	ldr	r0, [r5, #0]
   1c466:	4b0b      	ldr	r3, [pc, #44]	; (1c494 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1c468:	4298      	cmp	r0, r3
   1c46a:	b082      	sub	sp, #8
   1c46c:	d10d      	bne.n	1c48a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1c46e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   1c472:	2500      	movs	r5, #0
   1c474:	9500      	str	r5, [sp, #0]
   1c476:	462b      	mov	r3, r5
   1c478:	4614      	mov	r4, r2
   1c47a:	f000 fb6d 	bl	1cb58 <cc_mbedtls_ctr_drbg_random_with_add>
   1c47e:	2800      	cmp	r0, #0
   1c480:	bf18      	it	ne
   1c482:	462c      	movne	r4, r5
   1c484:	6034      	str	r4, [r6, #0]
   1c486:	b002      	add	sp, #8
   1c488:	bd70      	pop	{r4, r5, r6, pc}
   1c48a:	4803      	ldr	r0, [pc, #12]	; (1c498 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1c48c:	e7fb      	b.n	1c486 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1c48e:	bf00      	nop
   1c490:	2000285c 	.word	0x2000285c
   1c494:	5ac9bca5 	.word	0x5ac9bca5
   1c498:	ffff8fe8 	.word	0xffff8fe8

0001c49c <mutex_free>:
   1c49c:	b510      	push	{r4, lr}
   1c49e:	4604      	mov	r4, r0
   1c4a0:	b130      	cbz	r0, 1c4b0 <mutex_free+0x14>
   1c4a2:	6863      	ldr	r3, [r4, #4]
   1c4a4:	06db      	lsls	r3, r3, #27
   1c4a6:	d502      	bpl.n	1c4ae <mutex_free+0x12>
   1c4a8:	2300      	movs	r3, #0
   1c4aa:	6023      	str	r3, [r4, #0]
   1c4ac:	6063      	str	r3, [r4, #4]
   1c4ae:	bd10      	pop	{r4, pc}
   1c4b0:	4b02      	ldr	r3, [pc, #8]	; (1c4bc <mutex_free+0x20>)
   1c4b2:	4803      	ldr	r0, [pc, #12]	; (1c4c0 <mutex_free+0x24>)
   1c4b4:	685b      	ldr	r3, [r3, #4]
   1c4b6:	4798      	blx	r3
   1c4b8:	e7f3      	b.n	1c4a2 <mutex_free+0x6>
   1c4ba:	bf00      	nop
   1c4bc:	200007e4 	.word	0x200007e4
   1c4c0:	000241f8 	.word	0x000241f8

0001c4c4 <mutex_lock>:
   1c4c4:	b1b0      	cbz	r0, 1c4f4 <mutex_lock+0x30>
   1c4c6:	6843      	ldr	r3, [r0, #4]
   1c4c8:	b193      	cbz	r3, 1c4f0 <mutex_lock+0x2c>
   1c4ca:	06db      	lsls	r3, r3, #27
   1c4cc:	d50e      	bpl.n	1c4ec <mutex_lock+0x28>
   1c4ce:	2301      	movs	r3, #1
   1c4d0:	e850 2f00 	ldrex	r2, [r0]
   1c4d4:	4619      	mov	r1, r3
   1c4d6:	e840 1c00 	strex	ip, r1, [r0]
   1c4da:	f09c 0f00 	teq	ip, #0
   1c4de:	d1f7      	bne.n	1c4d0 <mutex_lock+0xc>
   1c4e0:	2a01      	cmp	r2, #1
   1c4e2:	d0f5      	beq.n	1c4d0 <mutex_lock+0xc>
   1c4e4:	f3bf 8f5f 	dmb	sy
   1c4e8:	2000      	movs	r0, #0
   1c4ea:	4770      	bx	lr
   1c4ec:	4803      	ldr	r0, [pc, #12]	; (1c4fc <mutex_lock+0x38>)
   1c4ee:	4770      	bx	lr
   1c4f0:	4803      	ldr	r0, [pc, #12]	; (1c500 <mutex_lock+0x3c>)
   1c4f2:	4770      	bx	lr
   1c4f4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c4f8:	4770      	bx	lr
   1c4fa:	bf00      	nop
   1c4fc:	ffff8fe9 	.word	0xffff8fe9
   1c500:	ffff8fea 	.word	0xffff8fea

0001c504 <mutex_unlock>:
   1c504:	b168      	cbz	r0, 1c522 <mutex_unlock+0x1e>
   1c506:	6843      	ldr	r3, [r0, #4]
   1c508:	b13b      	cbz	r3, 1c51a <mutex_unlock+0x16>
   1c50a:	06db      	lsls	r3, r3, #27
   1c50c:	d507      	bpl.n	1c51e <mutex_unlock+0x1a>
   1c50e:	f3bf 8f5f 	dmb	sy
   1c512:	2300      	movs	r3, #0
   1c514:	6003      	str	r3, [r0, #0]
   1c516:	4618      	mov	r0, r3
   1c518:	4770      	bx	lr
   1c51a:	4803      	ldr	r0, [pc, #12]	; (1c528 <mutex_unlock+0x24>)
   1c51c:	4770      	bx	lr
   1c51e:	4803      	ldr	r0, [pc, #12]	; (1c52c <mutex_unlock+0x28>)
   1c520:	4770      	bx	lr
   1c522:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c526:	4770      	bx	lr
   1c528:	ffff8fea 	.word	0xffff8fea
   1c52c:	ffff8fe9 	.word	0xffff8fe9

0001c530 <mutex_init>:
   1c530:	b510      	push	{r4, lr}
   1c532:	4604      	mov	r4, r0
   1c534:	b120      	cbz	r0, 1c540 <mutex_init+0x10>
   1c536:	2200      	movs	r2, #0
   1c538:	2311      	movs	r3, #17
   1c53a:	6022      	str	r2, [r4, #0]
   1c53c:	6063      	str	r3, [r4, #4]
   1c53e:	bd10      	pop	{r4, pc}
   1c540:	4801      	ldr	r0, [pc, #4]	; (1c548 <mutex_init+0x18>)
   1c542:	f7ff ff35 	bl	1c3b0 <CC_PalAbort>
   1c546:	e7f6      	b.n	1c536 <mutex_init+0x6>
   1c548:	00024220 	.word	0x00024220

0001c54c <nrf_cc3xx_platform_set_mutexes>:
   1c54c:	b570      	push	{r4, r5, r6, lr}
   1c54e:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c552:	4c13      	ldr	r4, [pc, #76]	; (1c5a0 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1c554:	4d13      	ldr	r5, [pc, #76]	; (1c5a4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1c556:	6063      	str	r3, [r4, #4]
   1c558:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   1c55c:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1c560:	6022      	str	r2, [r4, #0]
   1c562:	4b11      	ldr	r3, [pc, #68]	; (1c5a8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1c564:	6808      	ldr	r0, [r1, #0]
   1c566:	6018      	str	r0, [r3, #0]
   1c568:	6848      	ldr	r0, [r1, #4]
   1c56a:	6058      	str	r0, [r3, #4]
   1c56c:	6888      	ldr	r0, [r1, #8]
   1c56e:	6098      	str	r0, [r3, #8]
   1c570:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   1c574:	60d8      	str	r0, [r3, #12]
   1c576:	6119      	str	r1, [r3, #16]
   1c578:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1c57c:	06db      	lsls	r3, r3, #27
   1c57e:	d50d      	bpl.n	1c59c <nrf_cc3xx_platform_set_mutexes+0x50>
   1c580:	2300      	movs	r3, #0
   1c582:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   1c586:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   1c58a:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1c58e:	4790      	blx	r2
   1c590:	6823      	ldr	r3, [r4, #0]
   1c592:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1c596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c59a:	4718      	bx	r3
   1c59c:	bd70      	pop	{r4, r5, r6, pc}
   1c59e:	bf00      	nop
   1c5a0:	200007f4 	.word	0x200007f4
   1c5a4:	2000285c 	.word	0x2000285c
   1c5a8:	20000804 	.word	0x20000804

0001c5ac <mbedtls_zeroize_internal>:
   1c5ac:	b138      	cbz	r0, 1c5be <mbedtls_zeroize_internal+0x12>
   1c5ae:	b131      	cbz	r1, 1c5be <mbedtls_zeroize_internal+0x12>
   1c5b0:	4401      	add	r1, r0
   1c5b2:	2200      	movs	r2, #0
   1c5b4:	4603      	mov	r3, r0
   1c5b6:	3001      	adds	r0, #1
   1c5b8:	4281      	cmp	r1, r0
   1c5ba:	701a      	strb	r2, [r3, #0]
   1c5bc:	d1fa      	bne.n	1c5b4 <mbedtls_zeroize_internal+0x8>
   1c5be:	4770      	bx	lr

0001c5c0 <mbedtls_platform_zeroize>:
   1c5c0:	b138      	cbz	r0, 1c5d2 <mbedtls_platform_zeroize+0x12>
   1c5c2:	b131      	cbz	r1, 1c5d2 <mbedtls_platform_zeroize+0x12>
   1c5c4:	4401      	add	r1, r0
   1c5c6:	2200      	movs	r2, #0
   1c5c8:	4603      	mov	r3, r0
   1c5ca:	3001      	adds	r0, #1
   1c5cc:	4288      	cmp	r0, r1
   1c5ce:	701a      	strb	r2, [r3, #0]
   1c5d0:	d1fa      	bne.n	1c5c8 <mbedtls_platform_zeroize+0x8>
   1c5d2:	4770      	bx	lr

0001c5d4 <block_cipher_df>:
   1c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5d8:	b0b7      	sub	sp, #220	; 0xdc
   1c5da:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1c5de:	9005      	str	r0, [sp, #20]
   1c5e0:	f200 8147 	bhi.w	1c872 <block_cipher_df+0x29e>
   1c5e4:	4614      	mov	r4, r2
   1c5e6:	460d      	mov	r5, r1
   1c5e8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1c5ec:	2100      	movs	r1, #0
   1c5ee:	48a2      	ldr	r0, [pc, #648]	; (1c878 <block_cipher_df+0x2a4>)
   1c5f0:	f006 fece 	bl	23390 <memset>
   1c5f4:	a819      	add	r0, sp, #100	; 0x64
   1c5f6:	f001 f9c1 	bl	1d97c <cc_mbedtls_aes_init>
   1c5fa:	489f      	ldr	r0, [pc, #636]	; (1c878 <block_cipher_df+0x2a4>)
   1c5fc:	2300      	movs	r3, #0
   1c5fe:	8203      	strh	r3, [r0, #16]
   1c600:	ba63      	rev16	r3, r4
   1c602:	8243      	strh	r3, [r0, #18]
   1c604:	2320      	movs	r3, #32
   1c606:	4629      	mov	r1, r5
   1c608:	75c3      	strb	r3, [r0, #23]
   1c60a:	4605      	mov	r5, r0
   1c60c:	4622      	mov	r2, r4
   1c60e:	3018      	adds	r0, #24
   1c610:	f006 fe9d 	bl	2334e <memcpy>
   1c614:	462b      	mov	r3, r5
   1c616:	4423      	add	r3, r4
   1c618:	2280      	movs	r2, #128	; 0x80
   1c61a:	761a      	strb	r2, [r3, #24]
   1c61c:	4b97      	ldr	r3, [pc, #604]	; (1c87c <block_cipher_df+0x2a8>)
   1c61e:	930d      	str	r3, [sp, #52]	; 0x34
   1c620:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1c624:	930e      	str	r3, [sp, #56]	; 0x38
   1c626:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1c62a:	930f      	str	r3, [sp, #60]	; 0x3c
   1c62c:	a90d      	add	r1, sp, #52	; 0x34
   1c62e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1c632:	a819      	add	r0, sp, #100	; 0x64
   1c634:	9310      	str	r3, [sp, #64]	; 0x40
   1c636:	f001 f9b7 	bl	1d9a8 <cc_mbedtls_aes_setkey_enc>
   1c63a:	4605      	mov	r5, r0
   1c63c:	2800      	cmp	r0, #0
   1c63e:	f040 80f4 	bne.w	1c82a <block_cipher_df+0x256>
   1c642:	f104 0319 	add.w	r3, r4, #25
   1c646:	9306      	str	r3, [sp, #24]
   1c648:	f10d 0820 	add.w	r8, sp, #32
   1c64c:	ab11      	add	r3, sp, #68	; 0x44
   1c64e:	9304      	str	r3, [sp, #16]
   1c650:	9307      	str	r3, [sp, #28]
   1c652:	46c1      	mov	r9, r8
   1c654:	2210      	movs	r2, #16
   1c656:	2100      	movs	r1, #0
   1c658:	4648      	mov	r0, r9
   1c65a:	f006 fe99 	bl	23390 <memset>
   1c65e:	f8df a220 	ldr.w	sl, [pc, #544]	; 1c880 <block_cipher_df+0x2ac>
   1c662:	9b06      	ldr	r3, [sp, #24]
   1c664:	9300      	str	r3, [sp, #0]
   1c666:	f8cd 900c 	str.w	r9, [sp, #12]
   1c66a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   1c66e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   1c672:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   1c676:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1c67a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   1c67e:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   1c682:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   1c686:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   1c68a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1c68e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   1c692:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   1c696:	406a      	eors	r2, r5
   1c698:	ea8e 0e00 	eor.w	lr, lr, r0
   1c69c:	9d00      	ldr	r5, [sp, #0]
   1c69e:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   1c6a2:	9202      	str	r2, [sp, #8]
   1c6a4:	ea8c 0c03 	eor.w	ip, ip, r3
   1c6a8:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   1c6ac:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   1c6b0:	2d10      	cmp	r5, #16
   1c6b2:	ea80 0003 	eor.w	r0, r0, r3
   1c6b6:	462b      	mov	r3, r5
   1c6b8:	bf8c      	ite	hi
   1c6ba:	3b10      	subhi	r3, #16
   1c6bc:	1b6b      	subls	r3, r5, r5
   1c6be:	9300      	str	r3, [sp, #0]
   1c6c0:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   1c6c4:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   1c6c8:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   1c6cc:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   1c6d0:	4061      	eors	r1, r4
   1c6d2:	405f      	eors	r7, r3
   1c6d4:	2400      	movs	r4, #0
   1c6d6:	406a      	eors	r2, r5
   1c6d8:	ea8b 0b06 	eor.w	fp, fp, r6
   1c6dc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   1c6e0:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   1c6e4:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   1c6e8:	9601      	str	r6, [sp, #4]
   1c6ea:	4626      	mov	r6, r4
   1c6ec:	406b      	eors	r3, r5
   1c6ee:	f36b 0607 	bfi	r6, fp, #0, #8
   1c6f2:	4625      	mov	r5, r4
   1c6f4:	f367 260f 	bfi	r6, r7, #8, #8
   1c6f8:	462f      	mov	r7, r5
   1c6fa:	f361 0707 	bfi	r7, r1, #0, #8
   1c6fe:	9902      	ldr	r1, [sp, #8]
   1c700:	f361 0507 	bfi	r5, r1, #0, #8
   1c704:	f362 250f 	bfi	r5, r2, #8, #8
   1c708:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1c70c:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   1c710:	f363 270f 	bfi	r7, r3, #8, #8
   1c714:	ea82 0909 	eor.w	r9, r2, r9
   1c718:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1c71c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1c720:	ea83 0808 	eor.w	r8, r3, r8
   1c724:	404a      	eors	r2, r1
   1c726:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1c72a:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   1c72e:	f36e 0407 	bfi	r4, lr, #0, #8
   1c732:	404b      	eors	r3, r1
   1c734:	f368 4717 	bfi	r7, r8, #16, #8
   1c738:	f36c 240f 	bfi	r4, ip, #8, #8
   1c73c:	f363 671f 	bfi	r7, r3, #24, #8
   1c740:	9b03      	ldr	r3, [sp, #12]
   1c742:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   1c746:	f8dd e004 	ldr.w	lr, [sp, #4]
   1c74a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   1c74e:	ea8c 0c0e 	eor.w	ip, ip, lr
   1c752:	f36c 4617 	bfi	r6, ip, #16, #8
   1c756:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   1c75a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   1c75e:	ea8c 0c08 	eor.w	ip, ip, r8
   1c762:	f36c 661f 	bfi	r6, ip, #24, #8
   1c766:	f369 4517 	bfi	r5, r9, #16, #8
   1c76a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   1c76e:	960b      	str	r6, [sp, #44]	; 0x2c
   1c770:	f362 651f 	bfi	r5, r2, #24, #8
   1c774:	f360 4417 	bfi	r4, r0, #16, #8
   1c778:	9508      	str	r5, [sp, #32]
   1c77a:	ea8c 050e 	eor.w	r5, ip, lr
   1c77e:	f365 641f 	bfi	r4, r5, #24, #8
   1c782:	461a      	mov	r2, r3
   1c784:	2101      	movs	r1, #1
   1c786:	a819      	add	r0, sp, #100	; 0x64
   1c788:	f10a 0a10 	add.w	sl, sl, #16
   1c78c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   1c790:	f001 f924 	bl	1d9dc <cc_mbedtls_aes_crypt_ecb>
   1c794:	2800      	cmp	r0, #0
   1c796:	d168      	bne.n	1c86a <block_cipher_df+0x296>
   1c798:	9b00      	ldr	r3, [sp, #0]
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	f47f af65 	bne.w	1c66a <block_cipher_df+0x96>
   1c7a0:	9c07      	ldr	r4, [sp, #28]
   1c7a2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1c7a6:	4620      	mov	r0, r4
   1c7a8:	2210      	movs	r2, #16
   1c7aa:	3410      	adds	r4, #16
   1c7ac:	4649      	mov	r1, r9
   1c7ae:	9407      	str	r4, [sp, #28]
   1c7b0:	f006 fdcd 	bl	2334e <memcpy>
   1c7b4:	4a30      	ldr	r2, [pc, #192]	; (1c878 <block_cipher_df+0x2a4>)
   1c7b6:	78d3      	ldrb	r3, [r2, #3]
   1c7b8:	3301      	adds	r3, #1
   1c7ba:	70d3      	strb	r3, [r2, #3]
   1c7bc:	ab19      	add	r3, sp, #100	; 0x64
   1c7be:	429c      	cmp	r4, r3
   1c7c0:	f47f af48 	bne.w	1c654 <block_cipher_df+0x80>
   1c7c4:	9904      	ldr	r1, [sp, #16]
   1c7c6:	2280      	movs	r2, #128	; 0x80
   1c7c8:	4618      	mov	r0, r3
   1c7ca:	f001 f8ed 	bl	1d9a8 <cc_mbedtls_aes_setkey_enc>
   1c7ce:	46c8      	mov	r8, r9
   1c7d0:	4605      	mov	r5, r0
   1c7d2:	bb70      	cbnz	r0, 1c832 <block_cipher_df+0x25e>
   1c7d4:	9c05      	ldr	r4, [sp, #20]
   1c7d6:	f104 0620 	add.w	r6, r4, #32
   1c7da:	ab15      	add	r3, sp, #84	; 0x54
   1c7dc:	461a      	mov	r2, r3
   1c7de:	2101      	movs	r1, #1
   1c7e0:	a819      	add	r0, sp, #100	; 0x64
   1c7e2:	f001 f8fb 	bl	1d9dc <cc_mbedtls_aes_crypt_ecb>
   1c7e6:	2210      	movs	r2, #16
   1c7e8:	4605      	mov	r5, r0
   1c7ea:	bb10      	cbnz	r0, 1c832 <block_cipher_df+0x25e>
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	a915      	add	r1, sp, #84	; 0x54
   1c7f0:	3410      	adds	r4, #16
   1c7f2:	f006 fdac 	bl	2334e <memcpy>
   1c7f6:	42b4      	cmp	r4, r6
   1c7f8:	d1ef      	bne.n	1c7da <block_cipher_df+0x206>
   1c7fa:	a819      	add	r0, sp, #100	; 0x64
   1c7fc:	f001 f8ce 	bl	1d99c <cc_mbedtls_aes_free>
   1c800:	481d      	ldr	r0, [pc, #116]	; (1c878 <block_cipher_df+0x2a4>)
   1c802:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1c806:	f7ff fedb 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c80a:	9804      	ldr	r0, [sp, #16]
   1c80c:	2120      	movs	r1, #32
   1c80e:	f7ff fed7 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c812:	a80d      	add	r0, sp, #52	; 0x34
   1c814:	2110      	movs	r1, #16
   1c816:	f7ff fed3 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c81a:	4640      	mov	r0, r8
   1c81c:	2110      	movs	r1, #16
   1c81e:	f7ff fecf 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c822:	4628      	mov	r0, r5
   1c824:	b037      	add	sp, #220	; 0xdc
   1c826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c82a:	ab11      	add	r3, sp, #68	; 0x44
   1c82c:	9304      	str	r3, [sp, #16]
   1c82e:	f10d 0820 	add.w	r8, sp, #32
   1c832:	a819      	add	r0, sp, #100	; 0x64
   1c834:	f001 f8b2 	bl	1d99c <cc_mbedtls_aes_free>
   1c838:	480f      	ldr	r0, [pc, #60]	; (1c878 <block_cipher_df+0x2a4>)
   1c83a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1c83e:	f7ff febf 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c842:	9804      	ldr	r0, [sp, #16]
   1c844:	2120      	movs	r1, #32
   1c846:	f7ff febb 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c84a:	a80d      	add	r0, sp, #52	; 0x34
   1c84c:	2110      	movs	r1, #16
   1c84e:	f7ff feb7 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c852:	4640      	mov	r0, r8
   1c854:	2110      	movs	r1, #16
   1c856:	f7ff feb3 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c85a:	9805      	ldr	r0, [sp, #20]
   1c85c:	2120      	movs	r1, #32
   1c85e:	f7ff feaf 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c862:	4628      	mov	r0, r5
   1c864:	b037      	add	sp, #220	; 0xdc
   1c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c86a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1c86e:	4605      	mov	r5, r0
   1c870:	e7df      	b.n	1c832 <block_cipher_df+0x25e>
   1c872:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1c876:	e7f4      	b.n	1c862 <block_cipher_df+0x28e>
   1c878:	20002a2c 	.word	0x20002a2c
   1c87c:	03020100 	.word	0x03020100
   1c880:	20002a3c 	.word	0x20002a3c

0001c884 <ctr_drbg_update_internal>:
   1c884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c888:	b088      	sub	sp, #32
   1c88a:	4604      	mov	r4, r0
   1c88c:	460d      	mov	r5, r1
   1c88e:	2220      	movs	r2, #32
   1c890:	2100      	movs	r1, #0
   1c892:	4668      	mov	r0, sp
   1c894:	f006 fd7c 	bl	23390 <memset>
   1c898:	f104 0620 	add.w	r6, r4, #32
   1c89c:	466f      	mov	r7, sp
   1c89e:	7be2      	ldrb	r2, [r4, #15]
   1c8a0:	3201      	adds	r2, #1
   1c8a2:	b2d2      	uxtb	r2, r2
   1c8a4:	73e2      	strb	r2, [r4, #15]
   1c8a6:	2a00      	cmp	r2, #0
   1c8a8:	d14d      	bne.n	1c946 <ctr_drbg_update_internal+0xc2>
   1c8aa:	7ba2      	ldrb	r2, [r4, #14]
   1c8ac:	3201      	adds	r2, #1
   1c8ae:	b2d2      	uxtb	r2, r2
   1c8b0:	73a2      	strb	r2, [r4, #14]
   1c8b2:	2a00      	cmp	r2, #0
   1c8b4:	d147      	bne.n	1c946 <ctr_drbg_update_internal+0xc2>
   1c8b6:	7b63      	ldrb	r3, [r4, #13]
   1c8b8:	3301      	adds	r3, #1
   1c8ba:	b2db      	uxtb	r3, r3
   1c8bc:	7363      	strb	r3, [r4, #13]
   1c8be:	2b00      	cmp	r3, #0
   1c8c0:	d141      	bne.n	1c946 <ctr_drbg_update_internal+0xc2>
   1c8c2:	7b23      	ldrb	r3, [r4, #12]
   1c8c4:	3301      	adds	r3, #1
   1c8c6:	b2db      	uxtb	r3, r3
   1c8c8:	7323      	strb	r3, [r4, #12]
   1c8ca:	2b00      	cmp	r3, #0
   1c8cc:	d13b      	bne.n	1c946 <ctr_drbg_update_internal+0xc2>
   1c8ce:	7ae3      	ldrb	r3, [r4, #11]
   1c8d0:	3301      	adds	r3, #1
   1c8d2:	b2db      	uxtb	r3, r3
   1c8d4:	72e3      	strb	r3, [r4, #11]
   1c8d6:	2b00      	cmp	r3, #0
   1c8d8:	d135      	bne.n	1c946 <ctr_drbg_update_internal+0xc2>
   1c8da:	7aa3      	ldrb	r3, [r4, #10]
   1c8dc:	3301      	adds	r3, #1
   1c8de:	b2db      	uxtb	r3, r3
   1c8e0:	72a3      	strb	r3, [r4, #10]
   1c8e2:	2b00      	cmp	r3, #0
   1c8e4:	d12f      	bne.n	1c946 <ctr_drbg_update_internal+0xc2>
   1c8e6:	7a63      	ldrb	r3, [r4, #9]
   1c8e8:	3301      	adds	r3, #1
   1c8ea:	b2db      	uxtb	r3, r3
   1c8ec:	7263      	strb	r3, [r4, #9]
   1c8ee:	bb53      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c8f0:	7a23      	ldrb	r3, [r4, #8]
   1c8f2:	3301      	adds	r3, #1
   1c8f4:	b2db      	uxtb	r3, r3
   1c8f6:	7223      	strb	r3, [r4, #8]
   1c8f8:	bb2b      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c8fa:	79e3      	ldrb	r3, [r4, #7]
   1c8fc:	3301      	adds	r3, #1
   1c8fe:	b2db      	uxtb	r3, r3
   1c900:	71e3      	strb	r3, [r4, #7]
   1c902:	bb03      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c904:	79a3      	ldrb	r3, [r4, #6]
   1c906:	3301      	adds	r3, #1
   1c908:	b2db      	uxtb	r3, r3
   1c90a:	71a3      	strb	r3, [r4, #6]
   1c90c:	b9db      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c90e:	7963      	ldrb	r3, [r4, #5]
   1c910:	3301      	adds	r3, #1
   1c912:	b2db      	uxtb	r3, r3
   1c914:	7163      	strb	r3, [r4, #5]
   1c916:	b9b3      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c918:	7923      	ldrb	r3, [r4, #4]
   1c91a:	3301      	adds	r3, #1
   1c91c:	b2db      	uxtb	r3, r3
   1c91e:	7123      	strb	r3, [r4, #4]
   1c920:	b98b      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c922:	78e3      	ldrb	r3, [r4, #3]
   1c924:	3301      	adds	r3, #1
   1c926:	b2db      	uxtb	r3, r3
   1c928:	70e3      	strb	r3, [r4, #3]
   1c92a:	b963      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c92c:	78a3      	ldrb	r3, [r4, #2]
   1c92e:	3301      	adds	r3, #1
   1c930:	b2db      	uxtb	r3, r3
   1c932:	70a3      	strb	r3, [r4, #2]
   1c934:	b93b      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c936:	7863      	ldrb	r3, [r4, #1]
   1c938:	3301      	adds	r3, #1
   1c93a:	b2db      	uxtb	r3, r3
   1c93c:	7063      	strb	r3, [r4, #1]
   1c93e:	b913      	cbnz	r3, 1c946 <ctr_drbg_update_internal+0xc2>
   1c940:	7823      	ldrb	r3, [r4, #0]
   1c942:	3301      	adds	r3, #1
   1c944:	7023      	strb	r3, [r4, #0]
   1c946:	463b      	mov	r3, r7
   1c948:	4622      	mov	r2, r4
   1c94a:	2101      	movs	r1, #1
   1c94c:	4630      	mov	r0, r6
   1c94e:	f001 f845 	bl	1d9dc <cc_mbedtls_aes_crypt_ecb>
   1c952:	4680      	mov	r8, r0
   1c954:	bb50      	cbnz	r0, 1c9ac <ctr_drbg_update_internal+0x128>
   1c956:	3710      	adds	r7, #16
   1c958:	ab08      	add	r3, sp, #32
   1c95a:	429f      	cmp	r7, r3
   1c95c:	d19f      	bne.n	1c89e <ctr_drbg_update_internal+0x1a>
   1c95e:	9a00      	ldr	r2, [sp, #0]
   1c960:	682b      	ldr	r3, [r5, #0]
   1c962:	9906      	ldr	r1, [sp, #24]
   1c964:	4053      	eors	r3, r2
   1c966:	9300      	str	r3, [sp, #0]
   1c968:	9a01      	ldr	r2, [sp, #4]
   1c96a:	686b      	ldr	r3, [r5, #4]
   1c96c:	4053      	eors	r3, r2
   1c96e:	9301      	str	r3, [sp, #4]
   1c970:	9a02      	ldr	r2, [sp, #8]
   1c972:	68ab      	ldr	r3, [r5, #8]
   1c974:	4053      	eors	r3, r2
   1c976:	9302      	str	r3, [sp, #8]
   1c978:	9a03      	ldr	r2, [sp, #12]
   1c97a:	68eb      	ldr	r3, [r5, #12]
   1c97c:	4053      	eors	r3, r2
   1c97e:	9303      	str	r3, [sp, #12]
   1c980:	9a04      	ldr	r2, [sp, #16]
   1c982:	692b      	ldr	r3, [r5, #16]
   1c984:	4053      	eors	r3, r2
   1c986:	9304      	str	r3, [sp, #16]
   1c988:	9a05      	ldr	r2, [sp, #20]
   1c98a:	696b      	ldr	r3, [r5, #20]
   1c98c:	4053      	eors	r3, r2
   1c98e:	69aa      	ldr	r2, [r5, #24]
   1c990:	9305      	str	r3, [sp, #20]
   1c992:	404a      	eors	r2, r1
   1c994:	69eb      	ldr	r3, [r5, #28]
   1c996:	9206      	str	r2, [sp, #24]
   1c998:	9a07      	ldr	r2, [sp, #28]
   1c99a:	4630      	mov	r0, r6
   1c99c:	4053      	eors	r3, r2
   1c99e:	4669      	mov	r1, sp
   1c9a0:	2280      	movs	r2, #128	; 0x80
   1c9a2:	9307      	str	r3, [sp, #28]
   1c9a4:	f001 f800 	bl	1d9a8 <cc_mbedtls_aes_setkey_enc>
   1c9a8:	4680      	mov	r8, r0
   1c9aa:	b138      	cbz	r0, 1c9bc <ctr_drbg_update_internal+0x138>
   1c9ac:	4668      	mov	r0, sp
   1c9ae:	2120      	movs	r1, #32
   1c9b0:	f7ff fe06 	bl	1c5c0 <mbedtls_platform_zeroize>
   1c9b4:	4640      	mov	r0, r8
   1c9b6:	b008      	add	sp, #32
   1c9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c9bc:	2210      	movs	r2, #16
   1c9be:	eb0d 0102 	add.w	r1, sp, r2
   1c9c2:	4620      	mov	r0, r4
   1c9c4:	f006 fcc3 	bl	2334e <memcpy>
   1c9c8:	e7f0      	b.n	1c9ac <ctr_drbg_update_internal+0x128>
   1c9ca:	bf00      	nop

0001c9cc <mbedtls_ctr_drbg_reseed_internal>:
   1c9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c9d0:	4604      	mov	r4, r0
   1c9d2:	6980      	ldr	r0, [r0, #24]
   1c9d4:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1c9d8:	d852      	bhi.n	1ca80 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c9da:	461d      	mov	r5, r3
   1c9dc:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1c9e0:	42ab      	cmp	r3, r5
   1c9e2:	d34d      	bcc.n	1ca80 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c9e4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1c9e8:	1a18      	subs	r0, r3, r0
   1c9ea:	4290      	cmp	r0, r2
   1c9ec:	4616      	mov	r6, r2
   1c9ee:	d347      	bcc.n	1ca80 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1c9f0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1ca8c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1c9f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1c9f8:	460f      	mov	r7, r1
   1c9fa:	4648      	mov	r0, r9
   1c9fc:	2100      	movs	r1, #0
   1c9fe:	f006 fcc7 	bl	23390 <memset>
   1ca02:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ca06:	69a2      	ldr	r2, [r4, #24]
   1ca08:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ca0c:	4649      	mov	r1, r9
   1ca0e:	4798      	blx	r3
   1ca10:	2800      	cmp	r0, #0
   1ca12:	d138      	bne.n	1ca86 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ca14:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1ca18:	b13d      	cbz	r5, 1ca2a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1ca1a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1ca1e:	462a      	mov	r2, r5
   1ca20:	eb09 0108 	add.w	r1, r9, r8
   1ca24:	4798      	blx	r3
   1ca26:	bb70      	cbnz	r0, 1ca86 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ca28:	44a8      	add	r8, r5
   1ca2a:	b107      	cbz	r7, 1ca2e <mbedtls_ctr_drbg_reseed_internal+0x62>
   1ca2c:	b9c6      	cbnz	r6, 1ca60 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1ca2e:	4917      	ldr	r1, [pc, #92]	; (1ca8c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ca30:	4642      	mov	r2, r8
   1ca32:	4608      	mov	r0, r1
   1ca34:	f7ff fdce 	bl	1c5d4 <block_cipher_df>
   1ca38:	4605      	mov	r5, r0
   1ca3a:	b138      	cbz	r0, 1ca4c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1ca3c:	4813      	ldr	r0, [pc, #76]	; (1ca8c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ca3e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1ca42:	f7ff fdbd 	bl	1c5c0 <mbedtls_platform_zeroize>
   1ca46:	4628      	mov	r0, r5
   1ca48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ca4c:	490f      	ldr	r1, [pc, #60]	; (1ca8c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ca4e:	4620      	mov	r0, r4
   1ca50:	f7ff ff18 	bl	1c884 <ctr_drbg_update_internal>
   1ca54:	4605      	mov	r5, r0
   1ca56:	2800      	cmp	r0, #0
   1ca58:	d1f0      	bne.n	1ca3c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ca5a:	2301      	movs	r3, #1
   1ca5c:	6123      	str	r3, [r4, #16]
   1ca5e:	e7ed      	b.n	1ca3c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ca60:	eb09 0008 	add.w	r0, r9, r8
   1ca64:	4639      	mov	r1, r7
   1ca66:	4632      	mov	r2, r6
   1ca68:	f006 fc71 	bl	2334e <memcpy>
   1ca6c:	4907      	ldr	r1, [pc, #28]	; (1ca8c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ca6e:	44b0      	add	r8, r6
   1ca70:	4642      	mov	r2, r8
   1ca72:	4608      	mov	r0, r1
   1ca74:	f7ff fdae 	bl	1c5d4 <block_cipher_df>
   1ca78:	4605      	mov	r5, r0
   1ca7a:	2800      	cmp	r0, #0
   1ca7c:	d1de      	bne.n	1ca3c <mbedtls_ctr_drbg_reseed_internal+0x70>
   1ca7e:	e7e5      	b.n	1ca4c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1ca80:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1ca84:	e7df      	b.n	1ca46 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1ca86:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1ca8a:	e7dc      	b.n	1ca46 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1ca8c:	20002bcc 	.word	0x20002bcc

0001ca90 <cc_mbedtls_ctr_drbg_init>:
   1ca90:	b510      	push	{r4, lr}
   1ca92:	22a4      	movs	r2, #164	; 0xa4
   1ca94:	4604      	mov	r4, r0
   1ca96:	2100      	movs	r1, #0
   1ca98:	f006 fc7a 	bl	23390 <memset>
   1ca9c:	4b06      	ldr	r3, [pc, #24]	; (1cab8 <cc_mbedtls_ctr_drbg_init+0x28>)
   1ca9e:	f04f 31ff 	mov.w	r1, #4294967295
   1caa2:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1caa6:	6121      	str	r1, [r4, #16]
   1caa8:	61e2      	str	r2, [r4, #28]
   1caaa:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1caae:	681b      	ldr	r3, [r3, #0]
   1cab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cab4:	4718      	bx	r3
   1cab6:	bf00      	nop
   1cab8:	20000848 	.word	0x20000848

0001cabc <cc_mbedtls_ctr_drbg_seed>:
   1cabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cac0:	b085      	sub	sp, #20
   1cac2:	4605      	mov	r5, r0
   1cac4:	460f      	mov	r7, r1
   1cac6:	4616      	mov	r6, r2
   1cac8:	2100      	movs	r1, #0
   1caca:	2210      	movs	r2, #16
   1cacc:	4668      	mov	r0, sp
   1cace:	4699      	mov	r9, r3
   1cad0:	f006 fc5e 	bl	23390 <memset>
   1cad4:	4b1e      	ldr	r3, [pc, #120]	; (1cb50 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1cad6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1cada:	681b      	ldr	r3, [r3, #0]
   1cadc:	4640      	mov	r0, r8
   1cade:	4798      	blx	r3
   1cae0:	b120      	cbz	r0, 1caec <cc_mbedtls_ctr_drbg_seed+0x30>
   1cae2:	4604      	mov	r4, r0
   1cae4:	4620      	mov	r0, r4
   1cae6:	b005      	add	sp, #20
   1cae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1caec:	f105 0420 	add.w	r4, r5, #32
   1caf0:	4620      	mov	r0, r4
   1caf2:	f000 ff43 	bl	1d97c <cc_mbedtls_aes_init>
   1caf6:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1cafa:	69ae      	ldr	r6, [r5, #24]
   1cafc:	692b      	ldr	r3, [r5, #16]
   1cafe:	b9ee      	cbnz	r6, 1cb3c <cc_mbedtls_ctr_drbg_seed+0x80>
   1cb00:	2220      	movs	r2, #32
   1cb02:	2b00      	cmp	r3, #0
   1cb04:	61aa      	str	r2, [r5, #24]
   1cb06:	db20      	blt.n	1cb4a <cc_mbedtls_ctr_drbg_seed+0x8e>
   1cb08:	461e      	mov	r6, r3
   1cb0a:	4620      	mov	r0, r4
   1cb0c:	4669      	mov	r1, sp
   1cb0e:	2280      	movs	r2, #128	; 0x80
   1cb10:	f000 ff4a 	bl	1d9a8 <cc_mbedtls_aes_setkey_enc>
   1cb14:	4604      	mov	r4, r0
   1cb16:	b930      	cbnz	r0, 1cb26 <cc_mbedtls_ctr_drbg_seed+0x6a>
   1cb18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cb1a:	4633      	mov	r3, r6
   1cb1c:	4649      	mov	r1, r9
   1cb1e:	4628      	mov	r0, r5
   1cb20:	f7ff ff54 	bl	1c9cc <mbedtls_ctr_drbg_reseed_internal>
   1cb24:	4604      	mov	r4, r0
   1cb26:	4b0b      	ldr	r3, [pc, #44]	; (1cb54 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1cb28:	4640      	mov	r0, r8
   1cb2a:	681b      	ldr	r3, [r3, #0]
   1cb2c:	4798      	blx	r3
   1cb2e:	2800      	cmp	r0, #0
   1cb30:	bf18      	it	ne
   1cb32:	4604      	movne	r4, r0
   1cb34:	4620      	mov	r0, r4
   1cb36:	b005      	add	sp, #20
   1cb38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cb3c:	2b00      	cmp	r3, #0
   1cb3e:	dae3      	bge.n	1cb08 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1cb40:	2e17      	cmp	r6, #23
   1cb42:	d802      	bhi.n	1cb4a <cc_mbedtls_ctr_drbg_seed+0x8e>
   1cb44:	3601      	adds	r6, #1
   1cb46:	0876      	lsrs	r6, r6, #1
   1cb48:	e7df      	b.n	1cb0a <cc_mbedtls_ctr_drbg_seed+0x4e>
   1cb4a:	2600      	movs	r6, #0
   1cb4c:	e7dd      	b.n	1cb0a <cc_mbedtls_ctr_drbg_seed+0x4e>
   1cb4e:	bf00      	nop
   1cb50:	2000084c 	.word	0x2000084c
   1cb54:	20000850 	.word	0x20000850

0001cb58 <cc_mbedtls_ctr_drbg_random_with_add>:
   1cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb5c:	b08d      	sub	sp, #52	; 0x34
   1cb5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1cb62:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1cb64:	f200 80e3 	bhi.w	1cd2e <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1cb68:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1cb6c:	f200 80dc 	bhi.w	1cd28 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1cb70:	4604      	mov	r4, r0
   1cb72:	4615      	mov	r5, r2
   1cb74:	460e      	mov	r6, r1
   1cb76:	2220      	movs	r2, #32
   1cb78:	2100      	movs	r1, #0
   1cb7a:	a804      	add	r0, sp, #16
   1cb7c:	4698      	mov	r8, r3
   1cb7e:	f006 fc07 	bl	23390 <memset>
   1cb82:	4b6c      	ldr	r3, [pc, #432]	; (1cd34 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1cb84:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1cb88:	681b      	ldr	r3, [r3, #0]
   1cb8a:	4648      	mov	r0, r9
   1cb8c:	4798      	blx	r3
   1cb8e:	4683      	mov	fp, r0
   1cb90:	2800      	cmp	r0, #0
   1cb92:	f040 8092 	bne.w	1ccba <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cb96:	6922      	ldr	r2, [r4, #16]
   1cb98:	69e3      	ldr	r3, [r4, #28]
   1cb9a:	429a      	cmp	r2, r3
   1cb9c:	f300 8091 	bgt.w	1ccc2 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1cba0:	6963      	ldr	r3, [r4, #20]
   1cba2:	2b00      	cmp	r3, #0
   1cba4:	f040 808d 	bne.w	1ccc2 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1cba8:	2f00      	cmp	r7, #0
   1cbaa:	f040 80a9 	bne.w	1cd00 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1cbae:	f8df a188 	ldr.w	sl, [pc, #392]	; 1cd38 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1cbb2:	466f      	mov	r7, sp
   1cbb4:	2d00      	cmp	r5, #0
   1cbb6:	f000 8098 	beq.w	1ccea <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1cbba:	f104 0820 	add.w	r8, r4, #32
   1cbbe:	466f      	mov	r7, sp
   1cbc0:	e00e      	b.n	1cbe0 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1cbc2:	2d10      	cmp	r5, #16
   1cbc4:	46ab      	mov	fp, r5
   1cbc6:	bf28      	it	cs
   1cbc8:	f04f 0b10 	movcs.w	fp, #16
   1cbcc:	4630      	mov	r0, r6
   1cbce:	465a      	mov	r2, fp
   1cbd0:	4639      	mov	r1, r7
   1cbd2:	f006 fbbc 	bl	2334e <memcpy>
   1cbd6:	ebb5 050b 	subs.w	r5, r5, fp
   1cbda:	445e      	add	r6, fp
   1cbdc:	f000 8085 	beq.w	1ccea <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1cbe0:	7be3      	ldrb	r3, [r4, #15]
   1cbe2:	3301      	adds	r3, #1
   1cbe4:	b2db      	uxtb	r3, r3
   1cbe6:	73e3      	strb	r3, [r4, #15]
   1cbe8:	2b00      	cmp	r3, #0
   1cbea:	d14d      	bne.n	1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cbec:	7ba3      	ldrb	r3, [r4, #14]
   1cbee:	3301      	adds	r3, #1
   1cbf0:	b2db      	uxtb	r3, r3
   1cbf2:	73a3      	strb	r3, [r4, #14]
   1cbf4:	2b00      	cmp	r3, #0
   1cbf6:	d147      	bne.n	1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cbf8:	7b63      	ldrb	r3, [r4, #13]
   1cbfa:	3301      	adds	r3, #1
   1cbfc:	b2db      	uxtb	r3, r3
   1cbfe:	7363      	strb	r3, [r4, #13]
   1cc00:	2b00      	cmp	r3, #0
   1cc02:	d141      	bne.n	1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc04:	7b23      	ldrb	r3, [r4, #12]
   1cc06:	3301      	adds	r3, #1
   1cc08:	b2db      	uxtb	r3, r3
   1cc0a:	7323      	strb	r3, [r4, #12]
   1cc0c:	2b00      	cmp	r3, #0
   1cc0e:	d13b      	bne.n	1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc10:	7ae3      	ldrb	r3, [r4, #11]
   1cc12:	3301      	adds	r3, #1
   1cc14:	b2db      	uxtb	r3, r3
   1cc16:	72e3      	strb	r3, [r4, #11]
   1cc18:	2b00      	cmp	r3, #0
   1cc1a:	d135      	bne.n	1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc1c:	7aa3      	ldrb	r3, [r4, #10]
   1cc1e:	3301      	adds	r3, #1
   1cc20:	b2db      	uxtb	r3, r3
   1cc22:	72a3      	strb	r3, [r4, #10]
   1cc24:	2b00      	cmp	r3, #0
   1cc26:	d12f      	bne.n	1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc28:	7a63      	ldrb	r3, [r4, #9]
   1cc2a:	3301      	adds	r3, #1
   1cc2c:	b2db      	uxtb	r3, r3
   1cc2e:	7263      	strb	r3, [r4, #9]
   1cc30:	bb53      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc32:	7a23      	ldrb	r3, [r4, #8]
   1cc34:	3301      	adds	r3, #1
   1cc36:	b2db      	uxtb	r3, r3
   1cc38:	7223      	strb	r3, [r4, #8]
   1cc3a:	bb2b      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc3c:	79e3      	ldrb	r3, [r4, #7]
   1cc3e:	3301      	adds	r3, #1
   1cc40:	b2db      	uxtb	r3, r3
   1cc42:	71e3      	strb	r3, [r4, #7]
   1cc44:	bb03      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc46:	79a3      	ldrb	r3, [r4, #6]
   1cc48:	3301      	adds	r3, #1
   1cc4a:	b2db      	uxtb	r3, r3
   1cc4c:	71a3      	strb	r3, [r4, #6]
   1cc4e:	b9db      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc50:	7963      	ldrb	r3, [r4, #5]
   1cc52:	3301      	adds	r3, #1
   1cc54:	b2db      	uxtb	r3, r3
   1cc56:	7163      	strb	r3, [r4, #5]
   1cc58:	b9b3      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc5a:	7923      	ldrb	r3, [r4, #4]
   1cc5c:	3301      	adds	r3, #1
   1cc5e:	b2db      	uxtb	r3, r3
   1cc60:	7123      	strb	r3, [r4, #4]
   1cc62:	b98b      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc64:	78e3      	ldrb	r3, [r4, #3]
   1cc66:	3301      	adds	r3, #1
   1cc68:	b2db      	uxtb	r3, r3
   1cc6a:	70e3      	strb	r3, [r4, #3]
   1cc6c:	b963      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc6e:	78a3      	ldrb	r3, [r4, #2]
   1cc70:	3301      	adds	r3, #1
   1cc72:	b2db      	uxtb	r3, r3
   1cc74:	70a3      	strb	r3, [r4, #2]
   1cc76:	b93b      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc78:	7863      	ldrb	r3, [r4, #1]
   1cc7a:	3301      	adds	r3, #1
   1cc7c:	b2db      	uxtb	r3, r3
   1cc7e:	7063      	strb	r3, [r4, #1]
   1cc80:	b913      	cbnz	r3, 1cc88 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cc82:	7823      	ldrb	r3, [r4, #0]
   1cc84:	3301      	adds	r3, #1
   1cc86:	7023      	strb	r3, [r4, #0]
   1cc88:	463b      	mov	r3, r7
   1cc8a:	4622      	mov	r2, r4
   1cc8c:	2101      	movs	r1, #1
   1cc8e:	4640      	mov	r0, r8
   1cc90:	f000 fea4 	bl	1d9dc <cc_mbedtls_aes_crypt_ecb>
   1cc94:	4683      	mov	fp, r0
   1cc96:	2800      	cmp	r0, #0
   1cc98:	d093      	beq.n	1cbc2 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1cc9a:	f8da 3000 	ldr.w	r3, [sl]
   1cc9e:	4648      	mov	r0, r9
   1cca0:	4798      	blx	r3
   1cca2:	2120      	movs	r1, #32
   1cca4:	4603      	mov	r3, r0
   1cca6:	a804      	add	r0, sp, #16
   1cca8:	2b00      	cmp	r3, #0
   1ccaa:	bf18      	it	ne
   1ccac:	469b      	movne	fp, r3
   1ccae:	f7ff fc87 	bl	1c5c0 <mbedtls_platform_zeroize>
   1ccb2:	2110      	movs	r1, #16
   1ccb4:	4638      	mov	r0, r7
   1ccb6:	f7ff fc83 	bl	1c5c0 <mbedtls_platform_zeroize>
   1ccba:	4658      	mov	r0, fp
   1ccbc:	b00d      	add	sp, #52	; 0x34
   1ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ccc2:	463a      	mov	r2, r7
   1ccc4:	4641      	mov	r1, r8
   1ccc6:	2300      	movs	r3, #0
   1ccc8:	4620      	mov	r0, r4
   1ccca:	f7ff fe7f 	bl	1c9cc <mbedtls_ctr_drbg_reseed_internal>
   1ccce:	f8df a068 	ldr.w	sl, [pc, #104]	; 1cd38 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1ccd2:	2800      	cmp	r0, #0
   1ccd4:	f43f af6d 	beq.w	1cbb2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1ccd8:	f8da 3000 	ldr.w	r3, [sl]
   1ccdc:	4648      	mov	r0, r9
   1ccde:	4798      	blx	r3
   1cce0:	4683      	mov	fp, r0
   1cce2:	2800      	cmp	r0, #0
   1cce4:	f43f af65 	beq.w	1cbb2 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1cce8:	e7e7      	b.n	1ccba <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1ccea:	a904      	add	r1, sp, #16
   1ccec:	4620      	mov	r0, r4
   1ccee:	f7ff fdc9 	bl	1c884 <ctr_drbg_update_internal>
   1ccf2:	4683      	mov	fp, r0
   1ccf4:	2800      	cmp	r0, #0
   1ccf6:	d1d0      	bne.n	1cc9a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1ccf8:	6923      	ldr	r3, [r4, #16]
   1ccfa:	3301      	adds	r3, #1
   1ccfc:	6123      	str	r3, [r4, #16]
   1ccfe:	e7cc      	b.n	1cc9a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1cd00:	463a      	mov	r2, r7
   1cd02:	4641      	mov	r1, r8
   1cd04:	a804      	add	r0, sp, #16
   1cd06:	f7ff fc65 	bl	1c5d4 <block_cipher_df>
   1cd0a:	4683      	mov	fp, r0
   1cd0c:	b118      	cbz	r0, 1cd16 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1cd0e:	f8df a028 	ldr.w	sl, [pc, #40]	; 1cd38 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1cd12:	466f      	mov	r7, sp
   1cd14:	e7c1      	b.n	1cc9a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1cd16:	a904      	add	r1, sp, #16
   1cd18:	4620      	mov	r0, r4
   1cd1a:	f7ff fdb3 	bl	1c884 <ctr_drbg_update_internal>
   1cd1e:	4683      	mov	fp, r0
   1cd20:	2800      	cmp	r0, #0
   1cd22:	f43f af44 	beq.w	1cbae <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1cd26:	e7f2      	b.n	1cd0e <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1cd28:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1cd2c:	e7c5      	b.n	1ccba <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cd2e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1cd32:	e7c2      	b.n	1ccba <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cd34:	2000084c 	.word	0x2000084c
   1cd38:	20000850 	.word	0x20000850

0001cd3c <entropy_update>:
   1cd3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd40:	2b20      	cmp	r3, #32
   1cd42:	b08b      	sub	sp, #44	; 0x2c
   1cd44:	461d      	mov	r5, r3
   1cd46:	4606      	mov	r6, r0
   1cd48:	4688      	mov	r8, r1
   1cd4a:	4691      	mov	r9, r2
   1cd4c:	d826      	bhi.n	1cd9c <entropy_update+0x60>
   1cd4e:	b2db      	uxtb	r3, r3
   1cd50:	af02      	add	r7, sp, #8
   1cd52:	6831      	ldr	r1, [r6, #0]
   1cd54:	f88d 8004 	strb.w	r8, [sp, #4]
   1cd58:	f88d 3005 	strb.w	r3, [sp, #5]
   1cd5c:	f106 0804 	add.w	r8, r6, #4
   1cd60:	b921      	cbnz	r1, 1cd6c <entropy_update+0x30>
   1cd62:	4640      	mov	r0, r8
   1cd64:	f000 fe7e 	bl	1da64 <cc_mbedtls_sha256_starts>
   1cd68:	4604      	mov	r4, r0
   1cd6a:	b940      	cbnz	r0, 1cd7e <entropy_update+0x42>
   1cd6c:	2301      	movs	r3, #1
   1cd6e:	6033      	str	r3, [r6, #0]
   1cd70:	2202      	movs	r2, #2
   1cd72:	a901      	add	r1, sp, #4
   1cd74:	4640      	mov	r0, r8
   1cd76:	f000 fe89 	bl	1da8c <cc_mbedtls_sha256_update>
   1cd7a:	4604      	mov	r4, r0
   1cd7c:	b138      	cbz	r0, 1cd8e <entropy_update+0x52>
   1cd7e:	4638      	mov	r0, r7
   1cd80:	2120      	movs	r1, #32
   1cd82:	f7ff fc1d 	bl	1c5c0 <mbedtls_platform_zeroize>
   1cd86:	4620      	mov	r0, r4
   1cd88:	b00b      	add	sp, #44	; 0x2c
   1cd8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cd8e:	462a      	mov	r2, r5
   1cd90:	4649      	mov	r1, r9
   1cd92:	4640      	mov	r0, r8
   1cd94:	f000 fe7a 	bl	1da8c <cc_mbedtls_sha256_update>
   1cd98:	4604      	mov	r4, r0
   1cd9a:	e7f0      	b.n	1cd7e <entropy_update+0x42>
   1cd9c:	af02      	add	r7, sp, #8
   1cd9e:	4619      	mov	r1, r3
   1cda0:	4610      	mov	r0, r2
   1cda2:	2300      	movs	r3, #0
   1cda4:	463a      	mov	r2, r7
   1cda6:	f000 fffd 	bl	1dda4 <cc_mbedtls_sha256>
   1cdaa:	4604      	mov	r4, r0
   1cdac:	2800      	cmp	r0, #0
   1cdae:	d1e6      	bne.n	1cd7e <entropy_update+0x42>
   1cdb0:	2320      	movs	r3, #32
   1cdb2:	46b9      	mov	r9, r7
   1cdb4:	461d      	mov	r5, r3
   1cdb6:	e7cc      	b.n	1cd52 <entropy_update+0x16>

0001cdb8 <entropy_gather_internal.part.0>:
   1cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdba:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1cdbe:	b0a7      	sub	sp, #156	; 0x9c
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	bfd8      	it	le
   1cdc4:	ae02      	addle	r6, sp, #8
   1cdc6:	dd2c      	ble.n	1ce22 <entropy_gather_internal.part.0+0x6a>
   1cdc8:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1cdcc:	4605      	mov	r5, r0
   1cdce:	2300      	movs	r3, #0
   1cdd0:	ae02      	add	r6, sp, #8
   1cdd2:	9301      	str	r3, [sp, #4]
   1cdd4:	f1a4 0701 	sub.w	r7, r4, #1
   1cdd8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1cddc:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1cde0:	ab01      	add	r3, sp, #4
   1cde2:	2290      	movs	r2, #144	; 0x90
   1cde4:	4631      	mov	r1, r6
   1cde6:	47a0      	blx	r4
   1cde8:	fab7 f787 	clz	r7, r7
   1cdec:	097f      	lsrs	r7, r7, #5
   1cdee:	4604      	mov	r4, r0
   1cdf0:	b910      	cbnz	r0, 1cdf8 <entropy_gather_internal.part.0+0x40>
   1cdf2:	9b01      	ldr	r3, [sp, #4]
   1cdf4:	b93b      	cbnz	r3, 1ce06 <entropy_gather_internal.part.0+0x4e>
   1cdf6:	b1a7      	cbz	r7, 1ce22 <entropy_gather_internal.part.0+0x6a>
   1cdf8:	4630      	mov	r0, r6
   1cdfa:	2190      	movs	r1, #144	; 0x90
   1cdfc:	f7ff fbe0 	bl	1c5c0 <mbedtls_platform_zeroize>
   1ce00:	4620      	mov	r0, r4
   1ce02:	b027      	add	sp, #156	; 0x9c
   1ce04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce06:	4601      	mov	r1, r0
   1ce08:	4632      	mov	r2, r6
   1ce0a:	4628      	mov	r0, r5
   1ce0c:	f7ff ff96 	bl	1cd3c <entropy_update>
   1ce10:	b950      	cbnz	r0, 1ce28 <entropy_gather_internal.part.0+0x70>
   1ce12:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1ce16:	9a01      	ldr	r2, [sp, #4]
   1ce18:	4413      	add	r3, r2
   1ce1a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1ce1e:	2f00      	cmp	r7, #0
   1ce20:	d1ea      	bne.n	1cdf8 <entropy_gather_internal.part.0+0x40>
   1ce22:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1ce26:	e7e7      	b.n	1cdf8 <entropy_gather_internal.part.0+0x40>
   1ce28:	4604      	mov	r4, r0
   1ce2a:	4620      	mov	r0, r4
   1ce2c:	b027      	add	sp, #156	; 0x9c
   1ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ce30 <cc_mbedtls_entropy_init>:
   1ce30:	b570      	push	{r4, r5, r6, lr}
   1ce32:	2500      	movs	r5, #0
   1ce34:	4604      	mov	r4, r0
   1ce36:	2214      	movs	r2, #20
   1ce38:	4629      	mov	r1, r5
   1ce3a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1ce3e:	30fc      	adds	r0, #252	; 0xfc
   1ce40:	f006 faa6 	bl	23390 <memset>
   1ce44:	4b16      	ldr	r3, [pc, #88]	; (1cea0 <cc_mbedtls_entropy_init+0x70>)
   1ce46:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1ce4a:	681b      	ldr	r3, [r3, #0]
   1ce4c:	4630      	mov	r0, r6
   1ce4e:	4798      	blx	r3
   1ce50:	4620      	mov	r0, r4
   1ce52:	f840 5b04 	str.w	r5, [r0], #4
   1ce56:	f000 fdeb 	bl	1da30 <cc_mbedtls_sha256_init>
   1ce5a:	4b12      	ldr	r3, [pc, #72]	; (1cea4 <cc_mbedtls_entropy_init+0x74>)
   1ce5c:	4630      	mov	r0, r6
   1ce5e:	681b      	ldr	r3, [r3, #0]
   1ce60:	4798      	blx	r3
   1ce62:	b9d8      	cbnz	r0, 1ce9c <cc_mbedtls_entropy_init+0x6c>
   1ce64:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1ce68:	42ab      	cmp	r3, r5
   1ce6a:	dc11      	bgt.n	1ce90 <cc_mbedtls_entropy_init+0x60>
   1ce6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1ce70:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1ce74:	2120      	movs	r1, #32
   1ce76:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1ce7a:	2101      	movs	r1, #1
   1ce7c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1ce80:	3301      	adds	r3, #1
   1ce82:	4909      	ldr	r1, [pc, #36]	; (1cea8 <cc_mbedtls_entropy_init+0x78>)
   1ce84:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1ce88:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1ce8c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1ce90:	4b06      	ldr	r3, [pc, #24]	; (1ceac <cc_mbedtls_entropy_init+0x7c>)
   1ce92:	4630      	mov	r0, r6
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ce9a:	4718      	bx	r3
   1ce9c:	bd70      	pop	{r4, r5, r6, pc}
   1ce9e:	bf00      	nop
   1cea0:	20000848 	.word	0x20000848
   1cea4:	2000084c 	.word	0x2000084c
   1cea8:	0001d881 	.word	0x0001d881
   1ceac:	20000850 	.word	0x20000850

0001ceb0 <cc_mbedtls_entropy_func>:
   1ceb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ceb4:	2a20      	cmp	r2, #32
   1ceb6:	b088      	sub	sp, #32
   1ceb8:	d876      	bhi.n	1cfa8 <cc_mbedtls_entropy_func+0xf8>
   1ceba:	4b3d      	ldr	r3, [pc, #244]	; (1cfb0 <cc_mbedtls_entropy_func+0x100>)
   1cebc:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1cec0:	681b      	ldr	r3, [r3, #0]
   1cec2:	4604      	mov	r4, r0
   1cec4:	4648      	mov	r0, r9
   1cec6:	4617      	mov	r7, r2
   1cec8:	4688      	mov	r8, r1
   1ceca:	4798      	blx	r3
   1cecc:	4605      	mov	r5, r0
   1cece:	bba0      	cbnz	r0, 1cf3a <cc_mbedtls_entropy_func+0x8a>
   1ced0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1ced4:	f240 1601 	movw	r6, #257	; 0x101
   1ced8:	e001      	b.n	1cede <cc_mbedtls_entropy_func+0x2e>
   1ceda:	3e01      	subs	r6, #1
   1cedc:	d060      	beq.n	1cfa0 <cc_mbedtls_entropy_func+0xf0>
   1cede:	4620      	mov	r0, r4
   1cee0:	b37b      	cbz	r3, 1cf42 <cc_mbedtls_entropy_func+0x92>
   1cee2:	f7ff ff69 	bl	1cdb8 <entropy_gather_internal.part.0>
   1cee6:	4605      	mov	r5, r0
   1cee8:	bb68      	cbnz	r0, 1cf46 <cc_mbedtls_entropy_func+0x96>
   1ceea:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1ceee:	2b00      	cmp	r3, #0
   1cef0:	ddf3      	ble.n	1ceda <cc_mbedtls_entropy_func+0x2a>
   1cef2:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1cef6:	4290      	cmp	r0, r2
   1cef8:	d3ef      	bcc.n	1ceda <cc_mbedtls_entropy_func+0x2a>
   1cefa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cefe:	2a01      	cmp	r2, #1
   1cf00:	d1eb      	bne.n	1ceda <cc_mbedtls_entropy_func+0x2a>
   1cf02:	281f      	cmp	r0, #31
   1cf04:	d9e9      	bls.n	1ceda <cc_mbedtls_entropy_func+0x2a>
   1cf06:	466e      	mov	r6, sp
   1cf08:	4629      	mov	r1, r5
   1cf0a:	2220      	movs	r2, #32
   1cf0c:	4630      	mov	r0, r6
   1cf0e:	f104 0a04 	add.w	sl, r4, #4
   1cf12:	f006 fa3d 	bl	23390 <memset>
   1cf16:	4631      	mov	r1, r6
   1cf18:	4650      	mov	r0, sl
   1cf1a:	f000 fde1 	bl	1dae0 <cc_mbedtls_sha256_finish>
   1cf1e:	4605      	mov	r5, r0
   1cf20:	b198      	cbz	r0, 1cf4a <cc_mbedtls_entropy_func+0x9a>
   1cf22:	2120      	movs	r1, #32
   1cf24:	4630      	mov	r0, r6
   1cf26:	f7ff fb4b 	bl	1c5c0 <mbedtls_platform_zeroize>
   1cf2a:	4b22      	ldr	r3, [pc, #136]	; (1cfb4 <cc_mbedtls_entropy_func+0x104>)
   1cf2c:	4648      	mov	r0, r9
   1cf2e:	681b      	ldr	r3, [r3, #0]
   1cf30:	4798      	blx	r3
   1cf32:	2800      	cmp	r0, #0
   1cf34:	bf18      	it	ne
   1cf36:	f06f 051d 	mvnne.w	r5, #29
   1cf3a:	4628      	mov	r0, r5
   1cf3c:	b008      	add	sp, #32
   1cf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cf42:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1cf46:	466e      	mov	r6, sp
   1cf48:	e7eb      	b.n	1cf22 <cc_mbedtls_entropy_func+0x72>
   1cf4a:	4650      	mov	r0, sl
   1cf4c:	f000 fd84 	bl	1da58 <cc_mbedtls_sha256_free>
   1cf50:	4650      	mov	r0, sl
   1cf52:	f000 fd6d 	bl	1da30 <cc_mbedtls_sha256_init>
   1cf56:	4629      	mov	r1, r5
   1cf58:	4650      	mov	r0, sl
   1cf5a:	f000 fd83 	bl	1da64 <cc_mbedtls_sha256_starts>
   1cf5e:	4605      	mov	r5, r0
   1cf60:	2800      	cmp	r0, #0
   1cf62:	d1de      	bne.n	1cf22 <cc_mbedtls_entropy_func+0x72>
   1cf64:	4650      	mov	r0, sl
   1cf66:	2220      	movs	r2, #32
   1cf68:	4631      	mov	r1, r6
   1cf6a:	f000 fd8f 	bl	1da8c <cc_mbedtls_sha256_update>
   1cf6e:	4605      	mov	r5, r0
   1cf70:	2800      	cmp	r0, #0
   1cf72:	d1d6      	bne.n	1cf22 <cc_mbedtls_entropy_func+0x72>
   1cf74:	4603      	mov	r3, r0
   1cf76:	4632      	mov	r2, r6
   1cf78:	2120      	movs	r1, #32
   1cf7a:	4630      	mov	r0, r6
   1cf7c:	f000 ff12 	bl	1dda4 <cc_mbedtls_sha256>
   1cf80:	4605      	mov	r5, r0
   1cf82:	2800      	cmp	r0, #0
   1cf84:	d1cd      	bne.n	1cf22 <cc_mbedtls_entropy_func+0x72>
   1cf86:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1cf8a:	2b00      	cmp	r3, #0
   1cf8c:	bfc4      	itt	gt
   1cf8e:	2300      	movgt	r3, #0
   1cf90:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1cf94:	463a      	mov	r2, r7
   1cf96:	4640      	mov	r0, r8
   1cf98:	4631      	mov	r1, r6
   1cf9a:	f006 f9d8 	bl	2334e <memcpy>
   1cf9e:	e7c0      	b.n	1cf22 <cc_mbedtls_entropy_func+0x72>
   1cfa0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1cfa4:	466e      	mov	r6, sp
   1cfa6:	e7bc      	b.n	1cf22 <cc_mbedtls_entropy_func+0x72>
   1cfa8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1cfac:	e7c5      	b.n	1cf3a <cc_mbedtls_entropy_func+0x8a>
   1cfae:	bf00      	nop
   1cfb0:	2000084c 	.word	0x2000084c
   1cfb4:	20000850 	.word	0x20000850

0001cfb8 <RndStartupTest.constprop.0>:
   1cfb8:	b530      	push	{r4, r5, lr}
   1cfba:	b08d      	sub	sp, #52	; 0x34
   1cfbc:	2100      	movs	r1, #0
   1cfbe:	2228      	movs	r2, #40	; 0x28
   1cfc0:	a802      	add	r0, sp, #8
   1cfc2:	9101      	str	r1, [sp, #4]
   1cfc4:	f006 f9e4 	bl	23390 <memset>
   1cfc8:	a802      	add	r0, sp, #8
   1cfca:	f000 ff13 	bl	1ddf4 <RNG_PLAT_SetUserRngParameters>
   1cfce:	4604      	mov	r4, r0
   1cfd0:	b110      	cbz	r0, 1cfd8 <RndStartupTest.constprop.0+0x20>
   1cfd2:	4620      	mov	r0, r4
   1cfd4:	b00d      	add	sp, #52	; 0x34
   1cfd6:	bd30      	pop	{r4, r5, pc}
   1cfd8:	4d18      	ldr	r5, [pc, #96]	; (1d03c <RndStartupTest.constprop.0+0x84>)
   1cfda:	f04f 31ff 	mov.w	r1, #4294967295
   1cfde:	6828      	ldr	r0, [r5, #0]
   1cfe0:	f000 f93a 	bl	1d258 <CC_PalMutexLock>
   1cfe4:	4604      	mov	r4, r0
   1cfe6:	b9c0      	cbnz	r0, 1d01a <RndStartupTest.constprop.0+0x62>
   1cfe8:	2000      	movs	r0, #0
   1cfea:	f000 f965 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1cfee:	bb00      	cbnz	r0, 1d032 <RndStartupTest.constprop.0+0x7a>
   1cff0:	4a13      	ldr	r2, [pc, #76]	; (1d040 <RndStartupTest.constprop.0+0x88>)
   1cff2:	a902      	add	r1, sp, #8
   1cff4:	a801      	add	r0, sp, #4
   1cff6:	f000 fc35 	bl	1d864 <LLF_RND_RunTrngStartupTest>
   1cffa:	4604      	mov	r4, r0
   1cffc:	2001      	movs	r0, #1
   1cffe:	f000 f95b 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1d002:	b990      	cbnz	r0, 1d02a <RndStartupTest.constprop.0+0x72>
   1d004:	6828      	ldr	r0, [r5, #0]
   1d006:	f000 f92f 	bl	1d268 <CC_PalMutexUnlock>
   1d00a:	2800      	cmp	r0, #0
   1d00c:	d0e1      	beq.n	1cfd2 <RndStartupTest.constprop.0+0x1a>
   1d00e:	480d      	ldr	r0, [pc, #52]	; (1d044 <RndStartupTest.constprop.0+0x8c>)
   1d010:	f7ff f9ce 	bl	1c3b0 <CC_PalAbort>
   1d014:	4620      	mov	r0, r4
   1d016:	b00d      	add	sp, #52	; 0x34
   1d018:	bd30      	pop	{r4, r5, pc}
   1d01a:	480b      	ldr	r0, [pc, #44]	; (1d048 <RndStartupTest.constprop.0+0x90>)
   1d01c:	f7ff f9c8 	bl	1c3b0 <CC_PalAbort>
   1d020:	2c01      	cmp	r4, #1
   1d022:	bf08      	it	eq
   1d024:	2405      	moveq	r4, #5
   1d026:	d0ed      	beq.n	1d004 <RndStartupTest.constprop.0+0x4c>
   1d028:	e7de      	b.n	1cfe8 <RndStartupTest.constprop.0+0x30>
   1d02a:	4808      	ldr	r0, [pc, #32]	; (1d04c <RndStartupTest.constprop.0+0x94>)
   1d02c:	f7ff f9c0 	bl	1c3b0 <CC_PalAbort>
   1d030:	e7e8      	b.n	1d004 <RndStartupTest.constprop.0+0x4c>
   1d032:	4807      	ldr	r0, [pc, #28]	; (1d050 <RndStartupTest.constprop.0+0x98>)
   1d034:	f7ff f9bc 	bl	1c3b0 <CC_PalAbort>
   1d038:	e7da      	b.n	1cff0 <RndStartupTest.constprop.0+0x38>
   1d03a:	bf00      	nop
   1d03c:	20000844 	.word	0x20000844
   1d040:	20002db4 	.word	0x20002db4
   1d044:	0002429c 	.word	0x0002429c
   1d048:	00024244 	.word	0x00024244
   1d04c:	0002427c 	.word	0x0002427c
   1d050:	0002425c 	.word	0x0002425c

0001d054 <CC_LibInit>:
   1d054:	b510      	push	{r4, lr}
   1d056:	b082      	sub	sp, #8
   1d058:	f000 f850 	bl	1d0fc <CC_HalInit>
   1d05c:	b128      	cbz	r0, 1d06a <CC_LibInit+0x16>
   1d05e:	f000 f89f 	bl	1d1a0 <CC_PalTerminate>
   1d062:	2403      	movs	r4, #3
   1d064:	4620      	mov	r0, r4
   1d066:	b002      	add	sp, #8
   1d068:	bd10      	pop	{r4, pc}
   1d06a:	f000 f86b 	bl	1d144 <CC_PalInit>
   1d06e:	b9d8      	cbnz	r0, 1d0a8 <CC_LibInit+0x54>
   1d070:	f000 f922 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1d074:	b9e0      	cbnz	r0, 1d0b0 <CC_LibInit+0x5c>
   1d076:	4c1e      	ldr	r4, [pc, #120]	; (1d0f0 <CC_LibInit+0x9c>)
   1d078:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1d07c:	0e1b      	lsrs	r3, r3, #24
   1d07e:	2bf0      	cmp	r3, #240	; 0xf0
   1d080:	d10a      	bne.n	1d098 <CC_LibInit+0x44>
   1d082:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1d086:	4b1b      	ldr	r3, [pc, #108]	; (1d0f4 <CC_LibInit+0xa0>)
   1d088:	429a      	cmp	r2, r3
   1d08a:	d029      	beq.n	1d0e0 <CC_LibInit+0x8c>
   1d08c:	f000 f838 	bl	1d100 <CC_HalTerminate>
   1d090:	2407      	movs	r4, #7
   1d092:	f000 f885 	bl	1d1a0 <CC_PalTerminate>
   1d096:	e7e5      	b.n	1d064 <CC_LibInit+0x10>
   1d098:	f000 f832 	bl	1d100 <CC_HalTerminate>
   1d09c:	f000 f880 	bl	1d1a0 <CC_PalTerminate>
   1d0a0:	2406      	movs	r4, #6
   1d0a2:	4620      	mov	r0, r4
   1d0a4:	b002      	add	sp, #8
   1d0a6:	bd10      	pop	{r4, pc}
   1d0a8:	2404      	movs	r4, #4
   1d0aa:	4620      	mov	r0, r4
   1d0ac:	b002      	add	sp, #8
   1d0ae:	bd10      	pop	{r4, pc}
   1d0b0:	f000 f826 	bl	1d100 <CC_HalTerminate>
   1d0b4:	f000 f874 	bl	1d1a0 <CC_PalTerminate>
   1d0b8:	f7ff ff7e 	bl	1cfb8 <RndStartupTest.constprop.0>
   1d0bc:	4604      	mov	r4, r0
   1d0be:	b958      	cbnz	r0, 1d0d8 <CC_LibInit+0x84>
   1d0c0:	4602      	mov	r2, r0
   1d0c2:	4601      	mov	r1, r0
   1d0c4:	f7ff f996 	bl	1c3f4 <nrf_cc3xx_platform_ctr_drbg_init>
   1d0c8:	b930      	cbnz	r0, 1d0d8 <CC_LibInit+0x84>
   1d0ca:	490b      	ldr	r1, [pc, #44]	; (1d0f8 <CC_LibInit+0xa4>)
   1d0cc:	ab01      	add	r3, sp, #4
   1d0ce:	2268      	movs	r2, #104	; 0x68
   1d0d0:	f7ff f9c2 	bl	1c458 <nrf_cc3xx_platform_ctr_drbg_get>
   1d0d4:	2800      	cmp	r0, #0
   1d0d6:	d0c5      	beq.n	1d064 <CC_LibInit+0x10>
   1d0d8:	2405      	movs	r4, #5
   1d0da:	4620      	mov	r0, r4
   1d0dc:	b002      	add	sp, #8
   1d0de:	bd10      	pop	{r4, pc}
   1d0e0:	2001      	movs	r0, #1
   1d0e2:	f000 f8e9 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1d0e6:	2800      	cmp	r0, #0
   1d0e8:	d1e2      	bne.n	1d0b0 <CC_LibInit+0x5c>
   1d0ea:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1d0ee:	e7e3      	b.n	1d0b8 <CC_LibInit+0x64>
   1d0f0:	5002b000 	.word	0x5002b000
   1d0f4:	20e00000 	.word	0x20e00000
   1d0f8:	20002d4c 	.word	0x20002d4c

0001d0fc <CC_HalInit>:
   1d0fc:	2000      	movs	r0, #0
   1d0fe:	4770      	bx	lr

0001d100 <CC_HalTerminate>:
   1d100:	2000      	movs	r0, #0
   1d102:	4770      	bx	lr

0001d104 <CC_HalClearInterruptBit>:
   1d104:	0543      	lsls	r3, r0, #21
   1d106:	d504      	bpl.n	1d112 <CC_HalClearInterruptBit+0xe>
   1d108:	4b04      	ldr	r3, [pc, #16]	; (1d11c <CC_HalClearInterruptBit+0x18>)
   1d10a:	f04f 32ff 	mov.w	r2, #4294967295
   1d10e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d112:	4b02      	ldr	r3, [pc, #8]	; (1d11c <CC_HalClearInterruptBit+0x18>)
   1d114:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1d118:	4770      	bx	lr
   1d11a:	bf00      	nop
   1d11c:	5002b000 	.word	0x5002b000

0001d120 <CC_HalMaskInterrupt>:
   1d120:	4b01      	ldr	r3, [pc, #4]	; (1d128 <CC_HalMaskInterrupt+0x8>)
   1d122:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1d126:	4770      	bx	lr
   1d128:	5002b000 	.word	0x5002b000

0001d12c <CC_HalWaitInterrupt>:
   1d12c:	b108      	cbz	r0, 1d132 <CC_HalWaitInterrupt+0x6>
   1d12e:	f000 b86b 	b.w	1d208 <CC_PalWaitInterrupt>
   1d132:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d136:	4770      	bx	lr

0001d138 <CC_HalWaitInterruptRND>:
   1d138:	b108      	cbz	r0, 1d13e <CC_HalWaitInterruptRND+0x6>
   1d13a:	f000 b84f 	b.w	1d1dc <CC_PalWaitInterruptRND>
   1d13e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d142:	4770      	bx	lr

0001d144 <CC_PalInit>:
   1d144:	b510      	push	{r4, lr}
   1d146:	4811      	ldr	r0, [pc, #68]	; (1d18c <CC_PalInit+0x48>)
   1d148:	f000 f872 	bl	1d230 <CC_PalMutexCreate>
   1d14c:	b100      	cbz	r0, 1d150 <CC_PalInit+0xc>
   1d14e:	bd10      	pop	{r4, pc}
   1d150:	480f      	ldr	r0, [pc, #60]	; (1d190 <CC_PalInit+0x4c>)
   1d152:	f000 f86d 	bl	1d230 <CC_PalMutexCreate>
   1d156:	2800      	cmp	r0, #0
   1d158:	d1f9      	bne.n	1d14e <CC_PalInit+0xa>
   1d15a:	4c0e      	ldr	r4, [pc, #56]	; (1d194 <CC_PalInit+0x50>)
   1d15c:	4620      	mov	r0, r4
   1d15e:	f000 f867 	bl	1d230 <CC_PalMutexCreate>
   1d162:	2800      	cmp	r0, #0
   1d164:	d1f3      	bne.n	1d14e <CC_PalInit+0xa>
   1d166:	4b0c      	ldr	r3, [pc, #48]	; (1d198 <CC_PalInit+0x54>)
   1d168:	480c      	ldr	r0, [pc, #48]	; (1d19c <CC_PalInit+0x58>)
   1d16a:	601c      	str	r4, [r3, #0]
   1d16c:	f000 f860 	bl	1d230 <CC_PalMutexCreate>
   1d170:	4601      	mov	r1, r0
   1d172:	2800      	cmp	r0, #0
   1d174:	d1eb      	bne.n	1d14e <CC_PalInit+0xa>
   1d176:	f000 f82d 	bl	1d1d4 <CC_PalDmaInit>
   1d17a:	4604      	mov	r4, r0
   1d17c:	b108      	cbz	r0, 1d182 <CC_PalInit+0x3e>
   1d17e:	4620      	mov	r0, r4
   1d180:	bd10      	pop	{r4, pc}
   1d182:	f000 f87b 	bl	1d27c <CC_PalPowerSaveModeInit>
   1d186:	4620      	mov	r0, r4
   1d188:	e7fa      	b.n	1d180 <CC_PalInit+0x3c>
   1d18a:	bf00      	nop
   1d18c:	20000840 	.word	0x20000840
   1d190:	20000834 	.word	0x20000834
   1d194:	2000083c 	.word	0x2000083c
   1d198:	20000844 	.word	0x20000844
   1d19c:	20000838 	.word	0x20000838

0001d1a0 <CC_PalTerminate>:
   1d1a0:	b508      	push	{r3, lr}
   1d1a2:	4808      	ldr	r0, [pc, #32]	; (1d1c4 <CC_PalTerminate+0x24>)
   1d1a4:	f000 f84e 	bl	1d244 <CC_PalMutexDestroy>
   1d1a8:	4807      	ldr	r0, [pc, #28]	; (1d1c8 <CC_PalTerminate+0x28>)
   1d1aa:	f000 f84b 	bl	1d244 <CC_PalMutexDestroy>
   1d1ae:	4807      	ldr	r0, [pc, #28]	; (1d1cc <CC_PalTerminate+0x2c>)
   1d1b0:	f000 f848 	bl	1d244 <CC_PalMutexDestroy>
   1d1b4:	4806      	ldr	r0, [pc, #24]	; (1d1d0 <CC_PalTerminate+0x30>)
   1d1b6:	f000 f845 	bl	1d244 <CC_PalMutexDestroy>
   1d1ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d1be:	f000 b80b 	b.w	1d1d8 <CC_PalDmaTerminate>
   1d1c2:	bf00      	nop
   1d1c4:	20000840 	.word	0x20000840
   1d1c8:	20000834 	.word	0x20000834
   1d1cc:	2000083c 	.word	0x2000083c
   1d1d0:	20000838 	.word	0x20000838

0001d1d4 <CC_PalDmaInit>:
   1d1d4:	2000      	movs	r0, #0
   1d1d6:	4770      	bx	lr

0001d1d8 <CC_PalDmaTerminate>:
   1d1d8:	4770      	bx	lr
   1d1da:	bf00      	nop

0001d1dc <CC_PalWaitInterruptRND>:
   1d1dc:	b410      	push	{r4}
   1d1de:	4c09      	ldr	r4, [pc, #36]	; (1d204 <CC_PalWaitInterruptRND+0x28>)
   1d1e0:	4602      	mov	r2, r0
   1d1e2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1d1e6:	4213      	tst	r3, r2
   1d1e8:	d0fb      	beq.n	1d1e2 <CC_PalWaitInterruptRND+0x6>
   1d1ea:	b121      	cbz	r1, 1d1f6 <CC_PalWaitInterruptRND+0x1a>
   1d1ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d1f0:	600b      	str	r3, [r1, #0]
   1d1f2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1d1f6:	4b03      	ldr	r3, [pc, #12]	; (1d204 <CC_PalWaitInterruptRND+0x28>)
   1d1f8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1d1fc:	2000      	movs	r0, #0
   1d1fe:	bc10      	pop	{r4}
   1d200:	4770      	bx	lr
   1d202:	bf00      	nop
   1d204:	5002b000 	.word	0x5002b000

0001d208 <CC_PalWaitInterrupt>:
   1d208:	4a04      	ldr	r2, [pc, #16]	; (1d21c <CC_PalWaitInterrupt+0x14>)
   1d20a:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1d20e:	4218      	tst	r0, r3
   1d210:	d0fb      	beq.n	1d20a <CC_PalWaitInterrupt+0x2>
   1d212:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1d216:	2000      	movs	r0, #0
   1d218:	4770      	bx	lr
   1d21a:	bf00      	nop
   1d21c:	5002b000 	.word	0x5002b000

0001d220 <CC_PalMemCopyPlat>:
   1d220:	f006 b8f8 	b.w	23414 <memmove>

0001d224 <CC_PalMemSetPlat>:
   1d224:	f006 b8b4 	b.w	23390 <memset>

0001d228 <CC_PalMemSetZeroPlat>:
   1d228:	460a      	mov	r2, r1
   1d22a:	2100      	movs	r1, #0
   1d22c:	f006 b8b0 	b.w	23390 <memset>

0001d230 <CC_PalMutexCreate>:
   1d230:	b508      	push	{r3, lr}
   1d232:	4b03      	ldr	r3, [pc, #12]	; (1d240 <CC_PalMutexCreate+0x10>)
   1d234:	6802      	ldr	r2, [r0, #0]
   1d236:	681b      	ldr	r3, [r3, #0]
   1d238:	6810      	ldr	r0, [r2, #0]
   1d23a:	4798      	blx	r3
   1d23c:	2000      	movs	r0, #0
   1d23e:	bd08      	pop	{r3, pc}
   1d240:	200007f4 	.word	0x200007f4

0001d244 <CC_PalMutexDestroy>:
   1d244:	b508      	push	{r3, lr}
   1d246:	4b03      	ldr	r3, [pc, #12]	; (1d254 <CC_PalMutexDestroy+0x10>)
   1d248:	6802      	ldr	r2, [r0, #0]
   1d24a:	685b      	ldr	r3, [r3, #4]
   1d24c:	6810      	ldr	r0, [r2, #0]
   1d24e:	4798      	blx	r3
   1d250:	2000      	movs	r0, #0
   1d252:	bd08      	pop	{r3, pc}
   1d254:	200007f4 	.word	0x200007f4

0001d258 <CC_PalMutexLock>:
   1d258:	4b02      	ldr	r3, [pc, #8]	; (1d264 <CC_PalMutexLock+0xc>)
   1d25a:	6802      	ldr	r2, [r0, #0]
   1d25c:	689b      	ldr	r3, [r3, #8]
   1d25e:	6810      	ldr	r0, [r2, #0]
   1d260:	4718      	bx	r3
   1d262:	bf00      	nop
   1d264:	200007f4 	.word	0x200007f4

0001d268 <CC_PalMutexUnlock>:
   1d268:	b508      	push	{r3, lr}
   1d26a:	4b03      	ldr	r3, [pc, #12]	; (1d278 <CC_PalMutexUnlock+0x10>)
   1d26c:	6802      	ldr	r2, [r0, #0]
   1d26e:	68db      	ldr	r3, [r3, #12]
   1d270:	6810      	ldr	r0, [r2, #0]
   1d272:	4798      	blx	r3
   1d274:	2000      	movs	r0, #0
   1d276:	bd08      	pop	{r3, pc}
   1d278:	200007f4 	.word	0x200007f4

0001d27c <CC_PalPowerSaveModeInit>:
   1d27c:	b570      	push	{r4, r5, r6, lr}
   1d27e:	4c09      	ldr	r4, [pc, #36]	; (1d2a4 <CC_PalPowerSaveModeInit+0x28>)
   1d280:	4d09      	ldr	r5, [pc, #36]	; (1d2a8 <CC_PalPowerSaveModeInit+0x2c>)
   1d282:	6920      	ldr	r0, [r4, #16]
   1d284:	68ab      	ldr	r3, [r5, #8]
   1d286:	4798      	blx	r3
   1d288:	b118      	cbz	r0, 1d292 <CC_PalPowerSaveModeInit+0x16>
   1d28a:	4b08      	ldr	r3, [pc, #32]	; (1d2ac <CC_PalPowerSaveModeInit+0x30>)
   1d28c:	4808      	ldr	r0, [pc, #32]	; (1d2b0 <CC_PalPowerSaveModeInit+0x34>)
   1d28e:	685b      	ldr	r3, [r3, #4]
   1d290:	4798      	blx	r3
   1d292:	4a08      	ldr	r2, [pc, #32]	; (1d2b4 <CC_PalPowerSaveModeInit+0x38>)
   1d294:	68eb      	ldr	r3, [r5, #12]
   1d296:	6920      	ldr	r0, [r4, #16]
   1d298:	2100      	movs	r1, #0
   1d29a:	6011      	str	r1, [r2, #0]
   1d29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d2a0:	4718      	bx	r3
   1d2a2:	bf00      	nop
   1d2a4:	20000804 	.word	0x20000804
   1d2a8:	200007f4 	.word	0x200007f4
   1d2ac:	200007e4 	.word	0x200007e4
   1d2b0:	000242b4 	.word	0x000242b4
   1d2b4:	20002fd4 	.word	0x20002fd4

0001d2b8 <CC_PalPowerSaveModeSelect>:
   1d2b8:	b570      	push	{r4, r5, r6, lr}
   1d2ba:	4d1b      	ldr	r5, [pc, #108]	; (1d328 <CC_PalPowerSaveModeSelect+0x70>)
   1d2bc:	4e1b      	ldr	r6, [pc, #108]	; (1d32c <CC_PalPowerSaveModeSelect+0x74>)
   1d2be:	4604      	mov	r4, r0
   1d2c0:	68b2      	ldr	r2, [r6, #8]
   1d2c2:	6928      	ldr	r0, [r5, #16]
   1d2c4:	4790      	blx	r2
   1d2c6:	b9f8      	cbnz	r0, 1d308 <CC_PalPowerSaveModeSelect+0x50>
   1d2c8:	b15c      	cbz	r4, 1d2e2 <CC_PalPowerSaveModeSelect+0x2a>
   1d2ca:	4c19      	ldr	r4, [pc, #100]	; (1d330 <CC_PalPowerSaveModeSelect+0x78>)
   1d2cc:	6823      	ldr	r3, [r4, #0]
   1d2ce:	b1b3      	cbz	r3, 1d2fe <CC_PalPowerSaveModeSelect+0x46>
   1d2d0:	2b01      	cmp	r3, #1
   1d2d2:	d01b      	beq.n	1d30c <CC_PalPowerSaveModeSelect+0x54>
   1d2d4:	3b01      	subs	r3, #1
   1d2d6:	6023      	str	r3, [r4, #0]
   1d2d8:	6928      	ldr	r0, [r5, #16]
   1d2da:	68f3      	ldr	r3, [r6, #12]
   1d2dc:	4798      	blx	r3
   1d2de:	2000      	movs	r0, #0
   1d2e0:	bd70      	pop	{r4, r5, r6, pc}
   1d2e2:	4c13      	ldr	r4, [pc, #76]	; (1d330 <CC_PalPowerSaveModeSelect+0x78>)
   1d2e4:	6821      	ldr	r1, [r4, #0]
   1d2e6:	b941      	cbnz	r1, 1d2fa <CC_PalPowerSaveModeSelect+0x42>
   1d2e8:	4b12      	ldr	r3, [pc, #72]	; (1d334 <CC_PalPowerSaveModeSelect+0x7c>)
   1d2ea:	2201      	movs	r2, #1
   1d2ec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1d2f0:	4a11      	ldr	r2, [pc, #68]	; (1d338 <CC_PalPowerSaveModeSelect+0x80>)
   1d2f2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d2f6:	2b00      	cmp	r3, #0
   1d2f8:	d1fb      	bne.n	1d2f2 <CC_PalPowerSaveModeSelect+0x3a>
   1d2fa:	3101      	adds	r1, #1
   1d2fc:	6021      	str	r1, [r4, #0]
   1d2fe:	68f3      	ldr	r3, [r6, #12]
   1d300:	6928      	ldr	r0, [r5, #16]
   1d302:	4798      	blx	r3
   1d304:	2000      	movs	r0, #0
   1d306:	bd70      	pop	{r4, r5, r6, pc}
   1d308:	480c      	ldr	r0, [pc, #48]	; (1d33c <CC_PalPowerSaveModeSelect+0x84>)
   1d30a:	bd70      	pop	{r4, r5, r6, pc}
   1d30c:	4a0a      	ldr	r2, [pc, #40]	; (1d338 <CC_PalPowerSaveModeSelect+0x80>)
   1d30e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d312:	2b00      	cmp	r3, #0
   1d314:	d1fb      	bne.n	1d30e <CC_PalPowerSaveModeSelect+0x56>
   1d316:	4a07      	ldr	r2, [pc, #28]	; (1d334 <CC_PalPowerSaveModeSelect+0x7c>)
   1d318:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d31c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d320:	f7ff fefe 	bl	1d120 <CC_HalMaskInterrupt>
   1d324:	6823      	ldr	r3, [r4, #0]
   1d326:	e7d5      	b.n	1d2d4 <CC_PalPowerSaveModeSelect+0x1c>
   1d328:	20000804 	.word	0x20000804
   1d32c:	200007f4 	.word	0x200007f4
   1d330:	20002fd4 	.word	0x20002fd4
   1d334:	5002a000 	.word	0x5002a000
   1d338:	5002b000 	.word	0x5002b000
   1d33c:	ffff8fe9 	.word	0xffff8fe9

0001d340 <mutex_init>:
   1d340:	4b01      	ldr	r3, [pc, #4]	; (1d348 <mutex_init+0x8>)
   1d342:	681b      	ldr	r3, [r3, #0]
   1d344:	4718      	bx	r3
   1d346:	bf00      	nop
   1d348:	200007f4 	.word	0x200007f4

0001d34c <mutex_lock>:
   1d34c:	4b01      	ldr	r3, [pc, #4]	; (1d354 <mutex_lock+0x8>)
   1d34e:	689b      	ldr	r3, [r3, #8]
   1d350:	4718      	bx	r3
   1d352:	bf00      	nop
   1d354:	200007f4 	.word	0x200007f4

0001d358 <mutex_unlock>:
   1d358:	4b01      	ldr	r3, [pc, #4]	; (1d360 <mutex_unlock+0x8>)
   1d35a:	68db      	ldr	r3, [r3, #12]
   1d35c:	4718      	bx	r3
   1d35e:	bf00      	nop
   1d360:	200007f4 	.word	0x200007f4

0001d364 <startTrngHW>:
   1d364:	2800      	cmp	r0, #0
   1d366:	f000 8084 	beq.w	1d472 <startTrngHW+0x10e>
   1d36a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d36e:	460c      	mov	r4, r1
   1d370:	b083      	sub	sp, #12
   1d372:	2900      	cmp	r1, #0
   1d374:	d078      	beq.n	1d468 <startTrngHW+0x104>
   1d376:	461d      	mov	r5, r3
   1d378:	2b00      	cmp	r3, #0
   1d37a:	d075      	beq.n	1d468 <startTrngHW+0x104>
   1d37c:	4607      	mov	r7, r0
   1d37e:	b11a      	cbz	r2, 1d388 <startTrngHW+0x24>
   1d380:	2201      	movs	r2, #1
   1d382:	2300      	movs	r3, #0
   1d384:	602a      	str	r2, [r5, #0]
   1d386:	6003      	str	r3, [r0, #0]
   1d388:	682b      	ldr	r3, [r5, #0]
   1d38a:	2b00      	cmp	r3, #0
   1d38c:	d067      	beq.n	1d45e <startTrngHW+0xfa>
   1d38e:	4629      	mov	r1, r5
   1d390:	4620      	mov	r0, r4
   1d392:	f000 fded 	bl	1df70 <LLF_RND_GetFastestRosc>
   1d396:	4603      	mov	r3, r0
   1d398:	2800      	cmp	r0, #0
   1d39a:	d161      	bne.n	1d460 <startTrngHW+0xfc>
   1d39c:	6828      	ldr	r0, [r5, #0]
   1d39e:	4621      	mov	r1, r4
   1d3a0:	f000 fdc8 	bl	1df34 <LLF_RND_GetRoscSampleCnt>
   1d3a4:	4603      	mov	r3, r0
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	d15a      	bne.n	1d460 <startTrngHW+0xfc>
   1d3aa:	682a      	ldr	r2, [r5, #0]
   1d3ac:	2a08      	cmp	r2, #8
   1d3ae:	d072      	beq.n	1d496 <startTrngHW+0x132>
   1d3b0:	2a04      	cmp	r2, #4
   1d3b2:	d073      	beq.n	1d49c <startTrngHW+0x138>
   1d3b4:	f1a2 0802 	sub.w	r8, r2, #2
   1d3b8:	fab8 f888 	clz	r8, r8
   1d3bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1d3c0:	4e38      	ldr	r6, [pc, #224]	; (1d4a4 <startTrngHW+0x140>)
   1d3c2:	2001      	movs	r0, #1
   1d3c4:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1d3c8:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   1d3cc:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1d3d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d3d2:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   1d3d6:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   1d3da:	428a      	cmp	r2, r1
   1d3dc:	d1f6      	bne.n	1d3cc <startTrngHW+0x68>
   1d3de:	f04f 0900 	mov.w	r9, #0
   1d3e2:	9301      	str	r3, [sp, #4]
   1d3e4:	f04f 30ff 	mov.w	r0, #4294967295
   1d3e8:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   1d3ec:	f7ff fe8a 	bl	1d104 <CC_HalClearInterruptBit>
   1d3f0:	f06f 021b 	mvn.w	r2, #27
   1d3f4:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   1d3f8:	4648      	mov	r0, r9
   1d3fa:	f7ff fe91 	bl	1d120 <CC_HalMaskInterrupt>
   1d3fe:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   1d402:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1d406:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d40a:	f7ff fe89 	bl	1d120 <CC_HalMaskInterrupt>
   1d40e:	220a      	movs	r2, #10
   1d410:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   1d414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d416:	2b01      	cmp	r3, #1
   1d418:	9b01      	ldr	r3, [sp, #4]
   1d41a:	d02d      	beq.n	1d478 <startTrngHW+0x114>
   1d41c:	6922      	ldr	r2, [r4, #16]
   1d41e:	4922      	ldr	r1, [pc, #136]	; (1d4a8 <startTrngHW+0x144>)
   1d420:	fba1 1202 	umull	r1, r2, r1, r2
   1d424:	0912      	lsrs	r2, r2, #4
   1d426:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d428:	fb01 f202 	mul.w	r2, r1, r2
   1d42c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1d430:	491c      	ldr	r1, [pc, #112]	; (1d4a4 <startTrngHW+0x140>)
   1d432:	03d2      	lsls	r2, r2, #15
   1d434:	0992      	lsrs	r2, r2, #6
   1d436:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   1d43a:	2201      	movs	r2, #1
   1d43c:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   1d440:	683a      	ldr	r2, [r7, #0]
   1d442:	6829      	ldr	r1, [r5, #0]
   1d444:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d448:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1d44c:	603a      	str	r2, [r7, #0]
   1d44e:	6829      	ldr	r1, [r5, #0]
   1d450:	4618      	mov	r0, r3
   1d452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d456:	603a      	str	r2, [r7, #0]
   1d458:	b003      	add	sp, #12
   1d45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d45e:	4b13      	ldr	r3, [pc, #76]	; (1d4ac <startTrngHW+0x148>)
   1d460:	4618      	mov	r0, r3
   1d462:	b003      	add	sp, #12
   1d464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d468:	4b11      	ldr	r3, [pc, #68]	; (1d4b0 <startTrngHW+0x14c>)
   1d46a:	4618      	mov	r0, r3
   1d46c:	b003      	add	sp, #12
   1d46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d472:	4b0f      	ldr	r3, [pc, #60]	; (1d4b0 <startTrngHW+0x14c>)
   1d474:	4618      	mov	r0, r3
   1d476:	4770      	bx	lr
   1d478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d47c:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   1d480:	3101      	adds	r1, #1
   1d482:	d006      	beq.n	1d492 <startTrngHW+0x12e>
   1d484:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   1d488:	4907      	ldr	r1, [pc, #28]	; (1d4a8 <startTrngHW+0x144>)
   1d48a:	fba1 1202 	umull	r1, r2, r1, r2
   1d48e:	0912      	lsrs	r2, r2, #4
   1d490:	e7c9      	b.n	1d426 <startTrngHW+0xc2>
   1d492:	2216      	movs	r2, #22
   1d494:	e7c7      	b.n	1d426 <startTrngHW+0xc2>
   1d496:	f04f 0803 	mov.w	r8, #3
   1d49a:	e791      	b.n	1d3c0 <startTrngHW+0x5c>
   1d49c:	f04f 0802 	mov.w	r8, #2
   1d4a0:	e78e      	b.n	1d3c0 <startTrngHW+0x5c>
   1d4a2:	bf00      	nop
   1d4a4:	5002b000 	.word	0x5002b000
   1d4a8:	aaaaaaab 	.word	0xaaaaaaab
   1d4ac:	00f10c31 	.word	0x00f10c31
   1d4b0:	00f10c35 	.word	0x00f10c35

0001d4b4 <LLF_RND_RepetitionCounterTest.part.0>:
   1d4b4:	b570      	push	{r4, r5, r6, lr}
   1d4b6:	00c9      	lsls	r1, r1, #3
   1d4b8:	2400      	movs	r4, #0
   1d4ba:	1e4e      	subs	r6, r1, #1
   1d4bc:	f04f 0c01 	mov.w	ip, #1
   1d4c0:	4625      	mov	r5, r4
   1d4c2:	46a6      	mov	lr, r4
   1d4c4:	e008      	b.n	1d4d8 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   1d4c6:	459e      	cmp	lr, r3
   1d4c8:	d015      	beq.n	1d4f6 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   1d4ca:	2501      	movs	r5, #1
   1d4cc:	45b4      	cmp	ip, r6
   1d4ce:	d817      	bhi.n	1d500 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1d4d0:	3401      	adds	r4, #1
   1d4d2:	f10c 0c01 	add.w	ip, ip, #1
   1d4d6:	469e      	mov	lr, r3
   1d4d8:	0963      	lsrs	r3, r4, #5
   1d4da:	f004 011f 	and.w	r1, r4, #31
   1d4de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d4e2:	291f      	cmp	r1, #31
   1d4e4:	fa23 f301 	lsr.w	r3, r3, r1
   1d4e8:	bf18      	it	ne
   1d4ea:	f003 0301 	andne.w	r3, r3, #1
   1d4ee:	2c00      	cmp	r4, #0
   1d4f0:	d1e9      	bne.n	1d4c6 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1d4f2:	2501      	movs	r5, #1
   1d4f4:	e7ec      	b.n	1d4d0 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1d4f6:	3501      	adds	r5, #1
   1d4f8:	4295      	cmp	r5, r2
   1d4fa:	d1e7      	bne.n	1d4cc <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1d4fc:	4801      	ldr	r0, [pc, #4]	; (1d504 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   1d4fe:	bd70      	pop	{r4, r5, r6, pc}
   1d500:	2000      	movs	r0, #0
   1d502:	bd70      	pop	{r4, r5, r6, pc}
   1d504:	00f10c36 	.word	0x00f10c36

0001d508 <LLF_RND_AdaptiveProportionTest>:
   1d508:	2800      	cmp	r0, #0
   1d50a:	d03f      	beq.n	1d58c <LLF_RND_AdaptiveProportionTest+0x84>
   1d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d510:	1e4c      	subs	r4, r1, #1
   1d512:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1d516:	d228      	bcs.n	1d56a <LLF_RND_AdaptiveProportionTest+0x62>
   1d518:	b33b      	cbz	r3, 1d56a <LLF_RND_AdaptiveProportionTest+0x62>
   1d51a:	b332      	cbz	r2, 1d56a <LLF_RND_AdaptiveProportionTest+0x62>
   1d51c:	f04f 0e00 	mov.w	lr, #0
   1d520:	00cf      	lsls	r7, r1, #3
   1d522:	4676      	mov	r6, lr
   1d524:	4675      	mov	r5, lr
   1d526:	4674      	mov	r4, lr
   1d528:	f103 38ff 	add.w	r8, r3, #4294967295
   1d52c:	0961      	lsrs	r1, r4, #5
   1d52e:	f004 0c1f 	and.w	ip, r4, #31
   1d532:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1d536:	f1bc 0f1f 	cmp.w	ip, #31
   1d53a:	fa21 f10c 	lsr.w	r1, r1, ip
   1d53e:	bf18      	it	ne
   1d540:	f001 0101 	andne.w	r1, r1, #1
   1d544:	b1a4      	cbz	r4, 1d570 <LLF_RND_AdaptiveProportionTest+0x68>
   1d546:	42ab      	cmp	r3, r5
   1d548:	d018      	beq.n	1d57c <LLF_RND_AdaptiveProportionTest+0x74>
   1d54a:	428e      	cmp	r6, r1
   1d54c:	bf08      	it	eq
   1d54e:	f10e 0e01 	addeq.w	lr, lr, #1
   1d552:	45a8      	cmp	r8, r5
   1d554:	d015      	beq.n	1d582 <LLF_RND_AdaptiveProportionTest+0x7a>
   1d556:	3501      	adds	r5, #1
   1d558:	4631      	mov	r1, r6
   1d55a:	3401      	adds	r4, #1
   1d55c:	42bc      	cmp	r4, r7
   1d55e:	d001      	beq.n	1d564 <LLF_RND_AdaptiveProportionTest+0x5c>
   1d560:	460e      	mov	r6, r1
   1d562:	e7e3      	b.n	1d52c <LLF_RND_AdaptiveProportionTest+0x24>
   1d564:	2000      	movs	r0, #0
   1d566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d56a:	4809      	ldr	r0, [pc, #36]	; (1d590 <LLF_RND_AdaptiveProportionTest+0x88>)
   1d56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d570:	f04f 0e01 	mov.w	lr, #1
   1d574:	4674      	mov	r4, lr
   1d576:	4675      	mov	r5, lr
   1d578:	460e      	mov	r6, r1
   1d57a:	e7d7      	b.n	1d52c <LLF_RND_AdaptiveProportionTest+0x24>
   1d57c:	2501      	movs	r5, #1
   1d57e:	46ae      	mov	lr, r5
   1d580:	e7eb      	b.n	1d55a <LLF_RND_AdaptiveProportionTest+0x52>
   1d582:	4572      	cmp	r2, lr
   1d584:	d3f1      	bcc.n	1d56a <LLF_RND_AdaptiveProportionTest+0x62>
   1d586:	4631      	mov	r1, r6
   1d588:	461d      	mov	r5, r3
   1d58a:	e7e6      	b.n	1d55a <LLF_RND_AdaptiveProportionTest+0x52>
   1d58c:	4800      	ldr	r0, [pc, #0]	; (1d590 <LLF_RND_AdaptiveProportionTest+0x88>)
   1d58e:	4770      	bx	lr
   1d590:	00f10c37 	.word	0x00f10c37

0001d594 <getTrngSource>:
   1d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d598:	b091      	sub	sp, #68	; 0x44
   1d59a:	460d      	mov	r5, r1
   1d59c:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1d5a0:	4681      	mov	r9, r0
   1d5a2:	2900      	cmp	r1, #0
   1d5a4:	d14c      	bne.n	1d640 <getTrngSource+0xac>
   1d5a6:	6928      	ldr	r0, [r5, #16]
   1d5a8:	9006      	str	r0, [sp, #24]
   1d5aa:	981a      	ldr	r0, [sp, #104]	; 0x68
   1d5ac:	601c      	str	r4, [r3, #0]
   1d5ae:	2300      	movs	r3, #0
   1d5b0:	6003      	str	r3, [r0, #0]
   1d5b2:	2a00      	cmp	r2, #0
   1d5b4:	f000 8124 	beq.w	1d800 <getTrngSource+0x26c>
   1d5b8:	4b9d      	ldr	r3, [pc, #628]	; (1d830 <getTrngSource+0x29c>)
   1d5ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1d5bc:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1d5c0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1d5c4:	429a      	cmp	r2, r3
   1d5c6:	d147      	bne.n	1d658 <getTrngSource+0xc4>
   1d5c8:	290a      	cmp	r1, #10
   1d5ca:	d145      	bne.n	1d658 <getTrngSource+0xc4>
   1d5cc:	f899 3003 	ldrb.w	r3, [r9, #3]
   1d5d0:	9308      	str	r3, [sp, #32]
   1d5d2:	f104 0308 	add.w	r3, r4, #8
   1d5d6:	9a06      	ldr	r2, [sp, #24]
   1d5d8:	9307      	str	r3, [sp, #28]
   1d5da:	4b96      	ldr	r3, [pc, #600]	; (1d834 <getTrngSource+0x2a0>)
   1d5dc:	4c94      	ldr	r4, [pc, #592]	; (1d830 <getTrngSource+0x29c>)
   1d5de:	fba3 1302 	umull	r1, r3, r3, r2
   1d5e2:	089b      	lsrs	r3, r3, #2
   1d5e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d5e8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   1d5ec:	9303      	str	r3, [sp, #12]
   1d5ee:	2304      	movs	r3, #4
   1d5f0:	9305      	str	r3, [sp, #20]
   1d5f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1d5f4:	9e06      	ldr	r6, [sp, #24]
   1d5f6:	601e      	str	r6, [r3, #0]
   1d5f8:	2e00      	cmp	r6, #0
   1d5fa:	d033      	beq.n	1d664 <getTrngSource+0xd0>
   1d5fc:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1d600:	2700      	movs	r7, #0
   1d602:	f04f 0a01 	mov.w	sl, #1
   1d606:	f000 fcc3 	bl	1df90 <LLF_RND_TurnOffTrng>
   1d60a:	2300      	movs	r3, #0
   1d60c:	9309      	str	r3, [sp, #36]	; 0x24
   1d60e:	f1b9 0f00 	cmp.w	r9, #0
   1d612:	f000 80df 	beq.w	1d7d4 <getTrngSource+0x240>
   1d616:	2d00      	cmp	r5, #0
   1d618:	f000 80dc 	beq.w	1d7d4 <getTrngSource+0x240>
   1d61c:	9b08      	ldr	r3, [sp, #32]
   1d61e:	b1eb      	cbz	r3, 1d65c <getTrngSource+0xc8>
   1d620:	a908      	add	r1, sp, #32
   1d622:	4628      	mov	r0, r5
   1d624:	f000 fca4 	bl	1df70 <LLF_RND_GetFastestRosc>
   1d628:	2800      	cmp	r0, #0
   1d62a:	d03e      	beq.n	1d6aa <getTrngSource+0x116>
   1d62c:	4b82      	ldr	r3, [pc, #520]	; (1d838 <getTrngSource+0x2a4>)
   1d62e:	4298      	cmp	r0, r3
   1d630:	d118      	bne.n	1d664 <getTrngSource+0xd0>
   1d632:	9003      	str	r0, [sp, #12]
   1d634:	f000 fcac 	bl	1df90 <LLF_RND_TurnOffTrng>
   1d638:	9803      	ldr	r0, [sp, #12]
   1d63a:	b011      	add	sp, #68	; 0x44
   1d63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d640:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1d644:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   1d648:	3601      	adds	r6, #1
   1d64a:	bf14      	ite	ne
   1d64c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   1d650:	f44f 7004 	moveq.w	r0, #528	; 0x210
   1d654:	9006      	str	r0, [sp, #24]
   1d656:	e7a8      	b.n	1d5aa <getTrngSource+0x16>
   1d658:	4878      	ldr	r0, [pc, #480]	; (1d83c <getTrngSource+0x2a8>)
   1d65a:	e7ea      	b.n	1d632 <getTrngSource+0x9e>
   1d65c:	4878      	ldr	r0, [pc, #480]	; (1d840 <getTrngSource+0x2ac>)
   1d65e:	4b76      	ldr	r3, [pc, #472]	; (1d838 <getTrngSource+0x2a4>)
   1d660:	4298      	cmp	r0, r3
   1d662:	d0e6      	beq.n	1d632 <getTrngSource+0x9e>
   1d664:	9b08      	ldr	r3, [sp, #32]
   1d666:	2b08      	cmp	r3, #8
   1d668:	f000 80c8 	beq.w	1d7fc <getTrngSource+0x268>
   1d66c:	005b      	lsls	r3, r3, #1
   1d66e:	2200      	movs	r2, #0
   1d670:	9308      	str	r3, [sp, #32]
   1d672:	9200      	str	r2, [sp, #0]
   1d674:	ab08      	add	r3, sp, #32
   1d676:	4629      	mov	r1, r5
   1d678:	4648      	mov	r0, r9
   1d67a:	f7ff fe73 	bl	1d364 <startTrngHW>
   1d67e:	4b70      	ldr	r3, [pc, #448]	; (1d840 <getTrngSource+0x2ac>)
   1d680:	4298      	cmp	r0, r3
   1d682:	f000 80b7 	beq.w	1d7f4 <getTrngSource+0x260>
   1d686:	2800      	cmp	r0, #0
   1d688:	d1d3      	bne.n	1d632 <getTrngSource+0x9e>
   1d68a:	f8d9 2000 	ldr.w	r2, [r9]
   1d68e:	0a13      	lsrs	r3, r2, #8
   1d690:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1d694:	4313      	orrs	r3, r2
   1d696:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d69a:	f8c9 3000 	str.w	r3, [r9]
   1d69e:	9b05      	ldr	r3, [sp, #20]
   1d6a0:	3b01      	subs	r3, #1
   1d6a2:	9305      	str	r3, [sp, #20]
   1d6a4:	d1a5      	bne.n	1d5f2 <getTrngSource+0x5e>
   1d6a6:	2000      	movs	r0, #0
   1d6a8:	e7c3      	b.n	1d632 <getTrngSource+0x9e>
   1d6aa:	9808      	ldr	r0, [sp, #32]
   1d6ac:	4629      	mov	r1, r5
   1d6ae:	f000 fc41 	bl	1df34 <LLF_RND_GetRoscSampleCnt>
   1d6b2:	2800      	cmp	r0, #0
   1d6b4:	d1ba      	bne.n	1d62c <getTrngSource+0x98>
   1d6b6:	9b08      	ldr	r3, [sp, #32]
   1d6b8:	2b08      	cmp	r3, #8
   1d6ba:	f000 8095 	beq.w	1d7e8 <getTrngSource+0x254>
   1d6be:	2b04      	cmp	r3, #4
   1d6c0:	f000 8095 	beq.w	1d7ee <getTrngSource+0x25a>
   1d6c4:	f1a3 0302 	sub.w	r3, r3, #2
   1d6c8:	fab3 f383 	clz	r3, r3
   1d6cc:	095b      	lsrs	r3, r3, #5
   1d6ce:	9304      	str	r3, [sp, #16]
   1d6d0:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1d6d4:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   1d6d8:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1d6dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1d6de:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1d6e2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1d6e6:	4293      	cmp	r3, r2
   1d6e8:	d1f6      	bne.n	1d6d8 <getTrngSource+0x144>
   1d6ea:	f04f 0b00 	mov.w	fp, #0
   1d6ee:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1d6f2:	f04f 30ff 	mov.w	r0, #4294967295
   1d6f6:	f7ff fd05 	bl	1d104 <CC_HalClearInterruptBit>
   1d6fa:	f06f 031b 	mvn.w	r3, #27
   1d6fe:	4658      	mov	r0, fp
   1d700:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d704:	f7ff fd0c 	bl	1d120 <CC_HalMaskInterrupt>
   1d708:	9b04      	ldr	r3, [sp, #16]
   1d70a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1d70e:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1d712:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d716:	f7ff fd03 	bl	1d120 <CC_HalMaskInterrupt>
   1d71a:	230a      	movs	r3, #10
   1d71c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1d720:	692b      	ldr	r3, [r5, #16]
   1d722:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1d726:	fbab 2303 	umull	r2, r3, fp, r3
   1d72a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1d72c:	091b      	lsrs	r3, r3, #4
   1d72e:	fb02 f303 	mul.w	r3, r2, r3
   1d732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d736:	03db      	lsls	r3, r3, #15
   1d738:	099b      	lsrs	r3, r3, #6
   1d73a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1d73e:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   1d742:	9908      	ldr	r1, [sp, #32]
   1d744:	f8d9 2000 	ldr.w	r2, [r9]
   1d748:	020b      	lsls	r3, r1, #8
   1d74a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d74e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1d752:	4313      	orrs	r3, r2
   1d754:	f8c9 3000 	str.w	r3, [r9]
   1d758:	a809      	add	r0, sp, #36	; 0x24
   1d75a:	f000 fbdb 	bl	1df14 <LLF_RND_WaitRngInterrupt>
   1d75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d760:	f003 031a 	and.w	r3, r3, #26
   1d764:	4303      	orrs	r3, r0
   1d766:	f47f af7d 	bne.w	1d664 <getTrngSource+0xd0>
   1d76a:	fbab 3b06 	umull	r3, fp, fp, r6
   1d76e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1d772:	930a      	str	r3, [sp, #40]	; 0x28
   1d774:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1d778:	930b      	str	r3, [sp, #44]	; 0x2c
   1d77a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1d77e:	930c      	str	r3, [sp, #48]	; 0x30
   1d780:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1d784:	930d      	str	r3, [sp, #52]	; 0x34
   1d786:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d78a:	930e      	str	r3, [sp, #56]	; 0x38
   1d78c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d790:	930f      	str	r3, [sp, #60]	; 0x3c
   1d792:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   1d796:	d101      	bne.n	1d79c <getTrngSource+0x208>
   1d798:	9b03      	ldr	r3, [sp, #12]
   1d79a:	b9eb      	cbnz	r3, 1d7d8 <getTrngSource+0x244>
   1d79c:	4640      	mov	r0, r8
   1d79e:	2218      	movs	r2, #24
   1d7a0:	a90a      	add	r1, sp, #40	; 0x28
   1d7a2:	3e18      	subs	r6, #24
   1d7a4:	f108 0818 	add.w	r8, r8, #24
   1d7a8:	f7ff fd3a 	bl	1d220 <CC_PalMemCopyPlat>
   1d7ac:	3701      	adds	r7, #1
   1d7ae:	2e00      	cmp	r6, #0
   1d7b0:	f47f af29 	bne.w	1d606 <getTrngSource+0x72>
   1d7b4:	9b06      	ldr	r3, [sp, #24]
   1d7b6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1d7ba:	d836      	bhi.n	1d82a <getTrngSource+0x296>
   1d7bc:	9e07      	ldr	r6, [sp, #28]
   1d7be:	696a      	ldr	r2, [r5, #20]
   1d7c0:	4619      	mov	r1, r3
   1d7c2:	4630      	mov	r0, r6
   1d7c4:	461f      	mov	r7, r3
   1d7c6:	f7ff fe75 	bl	1d4b4 <LLF_RND_RepetitionCounterTest.part.0>
   1d7ca:	b320      	cbz	r0, 1d816 <getTrngSource+0x282>
   1d7cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1d7ce:	2300      	movs	r3, #0
   1d7d0:	6013      	str	r3, [r2, #0]
   1d7d2:	e72b      	b.n	1d62c <getTrngSource+0x98>
   1d7d4:	481b      	ldr	r0, [pc, #108]	; (1d844 <getTrngSource+0x2b0>)
   1d7d6:	e729      	b.n	1d62c <getTrngSource+0x98>
   1d7d8:	4640      	mov	r0, r8
   1d7da:	461a      	mov	r2, r3
   1d7dc:	a90a      	add	r1, sp, #40	; 0x28
   1d7de:	1af6      	subs	r6, r6, r3
   1d7e0:	4498      	add	r8, r3
   1d7e2:	f7ff fd1d 	bl	1d220 <CC_PalMemCopyPlat>
   1d7e6:	e7e1      	b.n	1d7ac <getTrngSource+0x218>
   1d7e8:	2303      	movs	r3, #3
   1d7ea:	9304      	str	r3, [sp, #16]
   1d7ec:	e770      	b.n	1d6d0 <getTrngSource+0x13c>
   1d7ee:	2302      	movs	r3, #2
   1d7f0:	9304      	str	r3, [sp, #16]
   1d7f2:	e76d      	b.n	1d6d0 <getTrngSource+0x13c>
   1d7f4:	6a2b      	ldr	r3, [r5, #32]
   1d7f6:	2b00      	cmp	r3, #0
   1d7f8:	f43f af1b 	beq.w	1d632 <getTrngSource+0x9e>
   1d7fc:	4812      	ldr	r0, [pc, #72]	; (1d848 <getTrngSource+0x2b4>)
   1d7fe:	e718      	b.n	1d632 <getTrngSource+0x9e>
   1d800:	9100      	str	r1, [sp, #0]
   1d802:	ab08      	add	r3, sp, #32
   1d804:	2201      	movs	r2, #1
   1d806:	4629      	mov	r1, r5
   1d808:	4648      	mov	r0, r9
   1d80a:	f7ff fdab 	bl	1d364 <startTrngHW>
   1d80e:	2800      	cmp	r0, #0
   1d810:	f43f aedf 	beq.w	1d5d2 <getTrngSource+0x3e>
   1d814:	e70d      	b.n	1d632 <getTrngSource+0x9e>
   1d816:	69aa      	ldr	r2, [r5, #24]
   1d818:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1d81c:	4639      	mov	r1, r7
   1d81e:	4630      	mov	r0, r6
   1d820:	f7ff fe72 	bl	1d508 <LLF_RND_AdaptiveProportionTest>
   1d824:	2800      	cmp	r0, #0
   1d826:	d1d1      	bne.n	1d7cc <getTrngSource+0x238>
   1d828:	e73d      	b.n	1d6a6 <getTrngSource+0x112>
   1d82a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1d82c:	601e      	str	r6, [r3, #0]
   1d82e:	e719      	b.n	1d664 <getTrngSource+0xd0>
   1d830:	5002b000 	.word	0x5002b000
   1d834:	aaaaaaab 	.word	0xaaaaaaab
   1d838:	00f10c02 	.word	0x00f10c02
   1d83c:	00f10c30 	.word	0x00f10c30
   1d840:	00f10c31 	.word	0x00f10c31
   1d844:	00f10c35 	.word	0x00f10c35
   1d848:	00f10c32 	.word	0x00f10c32

0001d84c <LLF_RND_GetTrngSource>:
   1d84c:	b410      	push	{r4}
   1d84e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1d852:	9401      	str	r4, [sp, #4]
   1d854:	9c03      	ldr	r4, [sp, #12]
   1d856:	9402      	str	r4, [sp, #8]
   1d858:	2400      	movs	r4, #0
   1d85a:	9403      	str	r4, [sp, #12]
   1d85c:	bc10      	pop	{r4}
   1d85e:	f7ff be99 	b.w	1d594 <getTrngSource>
   1d862:	bf00      	nop

0001d864 <LLF_RND_RunTrngStartupTest>:
   1d864:	b510      	push	{r4, lr}
   1d866:	b086      	sub	sp, #24
   1d868:	ab05      	add	r3, sp, #20
   1d86a:	2401      	movs	r4, #1
   1d86c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1d870:	9300      	str	r3, [sp, #0]
   1d872:	2200      	movs	r2, #0
   1d874:	ab04      	add	r3, sp, #16
   1d876:	f7ff fe8d 	bl	1d594 <getTrngSource>
   1d87a:	b006      	add	sp, #24
   1d87c:	bd10      	pop	{r4, pc}
   1d87e:	bf00      	nop

0001d880 <mbedtls_hardware_poll>:
   1d880:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d882:	b089      	sub	sp, #36	; 0x24
   1d884:	9205      	str	r2, [sp, #20]
   1d886:	2900      	cmp	r1, #0
   1d888:	d064      	beq.n	1d954 <mbedtls_hardware_poll+0xd4>
   1d88a:	461c      	mov	r4, r3
   1d88c:	2b00      	cmp	r3, #0
   1d88e:	d061      	beq.n	1d954 <mbedtls_hardware_poll+0xd4>
   1d890:	4615      	mov	r5, r2
   1d892:	2a00      	cmp	r2, #0
   1d894:	d05e      	beq.n	1d954 <mbedtls_hardware_poll+0xd4>
   1d896:	4f31      	ldr	r7, [pc, #196]	; (1d95c <mbedtls_hardware_poll+0xdc>)
   1d898:	460e      	mov	r6, r1
   1d89a:	6838      	ldr	r0, [r7, #0]
   1d89c:	f04f 31ff 	mov.w	r1, #4294967295
   1d8a0:	f7ff fcda 	bl	1d258 <CC_PalMutexLock>
   1d8a4:	2800      	cmp	r0, #0
   1d8a6:	d14b      	bne.n	1d940 <mbedtls_hardware_poll+0xc0>
   1d8a8:	2000      	movs	r0, #0
   1d8aa:	f7ff fd05 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1d8ae:	2800      	cmp	r0, #0
   1d8b0:	d142      	bne.n	1d938 <mbedtls_hardware_poll+0xb8>
   1d8b2:	482b      	ldr	r0, [pc, #172]	; (1d960 <mbedtls_hardware_poll+0xe0>)
   1d8b4:	f000 fa9e 	bl	1ddf4 <RNG_PLAT_SetUserRngParameters>
   1d8b8:	b1d8      	cbz	r0, 1d8f2 <mbedtls_hardware_poll+0x72>
   1d8ba:	2001      	movs	r0, #1
   1d8bc:	f04f 36ff 	mov.w	r6, #4294967295
   1d8c0:	f7ff fcfa 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1d8c4:	2800      	cmp	r0, #0
   1d8c6:	d133      	bne.n	1d930 <mbedtls_hardware_poll+0xb0>
   1d8c8:	4826      	ldr	r0, [pc, #152]	; (1d964 <mbedtls_hardware_poll+0xe4>)
   1d8ca:	f44f 7108 	mov.w	r1, #544	; 0x220
   1d8ce:	f7fe fe6d 	bl	1c5ac <mbedtls_zeroize_internal>
   1d8d2:	4825      	ldr	r0, [pc, #148]	; (1d968 <mbedtls_hardware_poll+0xe8>)
   1d8d4:	2104      	movs	r1, #4
   1d8d6:	f7fe fe69 	bl	1c5ac <mbedtls_zeroize_internal>
   1d8da:	4821      	ldr	r0, [pc, #132]	; (1d960 <mbedtls_hardware_poll+0xe0>)
   1d8dc:	2128      	movs	r1, #40	; 0x28
   1d8de:	f7fe fe65 	bl	1c5ac <mbedtls_zeroize_internal>
   1d8e2:	6838      	ldr	r0, [r7, #0]
   1d8e4:	f7ff fcc0 	bl	1d268 <CC_PalMutexUnlock>
   1d8e8:	2800      	cmp	r0, #0
   1d8ea:	d12d      	bne.n	1d948 <mbedtls_hardware_poll+0xc8>
   1d8ec:	4630      	mov	r0, r6
   1d8ee:	b009      	add	sp, #36	; 0x24
   1d8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d8f2:	4b1c      	ldr	r3, [pc, #112]	; (1d964 <mbedtls_hardware_poll+0xe4>)
   1d8f4:	9302      	str	r3, [sp, #8]
   1d8f6:	ab07      	add	r3, sp, #28
   1d8f8:	9003      	str	r0, [sp, #12]
   1d8fa:	4602      	mov	r2, r0
   1d8fc:	9300      	str	r3, [sp, #0]
   1d8fe:	4918      	ldr	r1, [pc, #96]	; (1d960 <mbedtls_hardware_poll+0xe0>)
   1d900:	4819      	ldr	r0, [pc, #100]	; (1d968 <mbedtls_hardware_poll+0xe8>)
   1d902:	9401      	str	r4, [sp, #4]
   1d904:	ab05      	add	r3, sp, #20
   1d906:	f7ff ffa1 	bl	1d84c <LLF_RND_GetTrngSource>
   1d90a:	4603      	mov	r3, r0
   1d90c:	2800      	cmp	r0, #0
   1d90e:	d1d4      	bne.n	1d8ba <mbedtls_hardware_poll+0x3a>
   1d910:	6822      	ldr	r2, [r4, #0]
   1d912:	42aa      	cmp	r2, r5
   1d914:	d3d1      	bcc.n	1d8ba <mbedtls_hardware_poll+0x3a>
   1d916:	9907      	ldr	r1, [sp, #28]
   1d918:	4630      	mov	r0, r6
   1d91a:	3108      	adds	r1, #8
   1d91c:	462a      	mov	r2, r5
   1d91e:	461e      	mov	r6, r3
   1d920:	f7ff fc7e 	bl	1d220 <CC_PalMemCopyPlat>
   1d924:	6025      	str	r5, [r4, #0]
   1d926:	2001      	movs	r0, #1
   1d928:	f7ff fcc6 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1d92c:	2800      	cmp	r0, #0
   1d92e:	d0cb      	beq.n	1d8c8 <mbedtls_hardware_poll+0x48>
   1d930:	480e      	ldr	r0, [pc, #56]	; (1d96c <mbedtls_hardware_poll+0xec>)
   1d932:	f7fe fd3d 	bl	1c3b0 <CC_PalAbort>
   1d936:	e7c7      	b.n	1d8c8 <mbedtls_hardware_poll+0x48>
   1d938:	480d      	ldr	r0, [pc, #52]	; (1d970 <mbedtls_hardware_poll+0xf0>)
   1d93a:	f7fe fd39 	bl	1c3b0 <CC_PalAbort>
   1d93e:	e7b8      	b.n	1d8b2 <mbedtls_hardware_poll+0x32>
   1d940:	480c      	ldr	r0, [pc, #48]	; (1d974 <mbedtls_hardware_poll+0xf4>)
   1d942:	f7fe fd35 	bl	1c3b0 <CC_PalAbort>
   1d946:	e7af      	b.n	1d8a8 <mbedtls_hardware_poll+0x28>
   1d948:	480b      	ldr	r0, [pc, #44]	; (1d978 <mbedtls_hardware_poll+0xf8>)
   1d94a:	f7fe fd31 	bl	1c3b0 <CC_PalAbort>
   1d94e:	4630      	mov	r0, r6
   1d950:	b009      	add	sp, #36	; 0x24
   1d952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d954:	f04f 36ff 	mov.w	r6, #4294967295
   1d958:	e7c8      	b.n	1d8ec <mbedtls_hardware_poll+0x6c>
   1d95a:	bf00      	nop
   1d95c:	20000844 	.word	0x20000844
   1d960:	200031fc 	.word	0x200031fc
   1d964:	20002fdc 	.word	0x20002fdc
   1d968:	20002fd8 	.word	0x20002fd8
   1d96c:	0002427c 	.word	0x0002427c
   1d970:	0002425c 	.word	0x0002425c
   1d974:	00024244 	.word	0x00024244
   1d978:	000242d4 	.word	0x000242d4

0001d97c <cc_mbedtls_aes_init>:
   1d97c:	b510      	push	{r4, lr}
   1d97e:	4604      	mov	r4, r0
   1d980:	b130      	cbz	r0, 1d990 <cc_mbedtls_aes_init+0x14>
   1d982:	2200      	movs	r2, #0
   1d984:	2301      	movs	r3, #1
   1d986:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1d98a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1d98e:	bd10      	pop	{r4, pc}
   1d990:	4801      	ldr	r0, [pc, #4]	; (1d998 <cc_mbedtls_aes_init+0x1c>)
   1d992:	f7fe fd0d 	bl	1c3b0 <CC_PalAbort>
   1d996:	e7f4      	b.n	1d982 <cc_mbedtls_aes_init+0x6>
   1d998:	000242ec 	.word	0x000242ec

0001d99c <cc_mbedtls_aes_free>:
   1d99c:	b118      	cbz	r0, 1d9a6 <cc_mbedtls_aes_free+0xa>
   1d99e:	2274      	movs	r2, #116	; 0x74
   1d9a0:	2100      	movs	r1, #0
   1d9a2:	f7ff bc3f 	b.w	1d224 <CC_PalMemSetPlat>
   1d9a6:	4770      	bx	lr

0001d9a8 <cc_mbedtls_aes_setkey_enc>:
   1d9a8:	b190      	cbz	r0, 1d9d0 <cc_mbedtls_aes_setkey_enc+0x28>
   1d9aa:	b1a1      	cbz	r1, 1d9d6 <cc_mbedtls_aes_setkey_enc+0x2e>
   1d9ac:	b510      	push	{r4, lr}
   1d9ae:	2a80      	cmp	r2, #128	; 0x80
   1d9b0:	f04f 0400 	mov.w	r4, #0
   1d9b4:	6384      	str	r4, [r0, #56]	; 0x38
   1d9b6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1d9ba:	d106      	bne.n	1d9ca <cc_mbedtls_aes_setkey_enc+0x22>
   1d9bc:	2210      	movs	r2, #16
   1d9be:	6304      	str	r4, [r0, #48]	; 0x30
   1d9c0:	4410      	add	r0, r2
   1d9c2:	f7ff fc2d 	bl	1d220 <CC_PalMemCopyPlat>
   1d9c6:	4620      	mov	r0, r4
   1d9c8:	bd10      	pop	{r4, pc}
   1d9ca:	f06f 001f 	mvn.w	r0, #31
   1d9ce:	bd10      	pop	{r4, pc}
   1d9d0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1d9d4:	4770      	bx	lr
   1d9d6:	f06f 001f 	mvn.w	r0, #31
   1d9da:	4770      	bx	lr

0001d9dc <cc_mbedtls_aes_crypt_ecb>:
   1d9dc:	b328      	cbz	r0, 1da2a <cc_mbedtls_aes_crypt_ecb+0x4e>
   1d9de:	b322      	cbz	r2, 1da2a <cc_mbedtls_aes_crypt_ecb+0x4e>
   1d9e0:	b31b      	cbz	r3, 1da2a <cc_mbedtls_aes_crypt_ecb+0x4e>
   1d9e2:	2901      	cmp	r1, #1
   1d9e4:	d821      	bhi.n	1da2a <cc_mbedtls_aes_crypt_ecb+0x4e>
   1d9e6:	b570      	push	{r4, r5, r6, lr}
   1d9e8:	4604      	mov	r4, r0
   1d9ea:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1d9ec:	b086      	sub	sp, #24
   1d9ee:	d017      	beq.n	1da20 <cc_mbedtls_aes_crypt_ecb+0x44>
   1d9f0:	2901      	cmp	r1, #1
   1d9f2:	d117      	bne.n	1da24 <cc_mbedtls_aes_crypt_ecb+0x48>
   1d9f4:	2510      	movs	r5, #16
   1d9f6:	2100      	movs	r1, #0
   1d9f8:	eb0d 0605 	add.w	r6, sp, r5
   1d9fc:	6361      	str	r1, [r4, #52]	; 0x34
   1d9fe:	4610      	mov	r0, r2
   1da00:	9500      	str	r5, [sp, #0]
   1da02:	9601      	str	r6, [sp, #4]
   1da04:	aa02      	add	r2, sp, #8
   1da06:	4629      	mov	r1, r5
   1da08:	f000 face 	bl	1dfa8 <SetDataBuffersInfo>
   1da0c:	b950      	cbnz	r0, 1da24 <cc_mbedtls_aes_crypt_ecb+0x48>
   1da0e:	462b      	mov	r3, r5
   1da10:	4632      	mov	r2, r6
   1da12:	a902      	add	r1, sp, #8
   1da14:	4620      	mov	r0, r4
   1da16:	f000 fd37 	bl	1e488 <ProcessAesDrv>
   1da1a:	b918      	cbnz	r0, 1da24 <cc_mbedtls_aes_crypt_ecb+0x48>
   1da1c:	b006      	add	sp, #24
   1da1e:	bd70      	pop	{r4, r5, r6, pc}
   1da20:	2900      	cmp	r1, #0
   1da22:	d0e7      	beq.n	1d9f4 <cc_mbedtls_aes_crypt_ecb+0x18>
   1da24:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1da28:	e7f8      	b.n	1da1c <cc_mbedtls_aes_crypt_ecb+0x40>
   1da2a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1da2e:	4770      	bx	lr

0001da30 <cc_mbedtls_sha256_init>:
   1da30:	b510      	push	{r4, lr}
   1da32:	4604      	mov	r4, r0
   1da34:	b128      	cbz	r0, 1da42 <cc_mbedtls_sha256_init+0x12>
   1da36:	4620      	mov	r0, r4
   1da38:	21f4      	movs	r1, #244	; 0xf4
   1da3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1da3e:	f7ff bbf3 	b.w	1d228 <CC_PalMemSetZeroPlat>
   1da42:	4804      	ldr	r0, [pc, #16]	; (1da54 <cc_mbedtls_sha256_init+0x24>)
   1da44:	f7fe fcb4 	bl	1c3b0 <CC_PalAbort>
   1da48:	4620      	mov	r0, r4
   1da4a:	21f4      	movs	r1, #244	; 0xf4
   1da4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1da50:	f7ff bbea 	b.w	1d228 <CC_PalMemSetZeroPlat>
   1da54:	00024300 	.word	0x00024300

0001da58 <cc_mbedtls_sha256_free>:
   1da58:	b110      	cbz	r0, 1da60 <cc_mbedtls_sha256_free+0x8>
   1da5a:	21f4      	movs	r1, #244	; 0xf4
   1da5c:	f7fe bda6 	b.w	1c5ac <mbedtls_zeroize_internal>
   1da60:	4770      	bx	lr
   1da62:	bf00      	nop

0001da64 <cc_mbedtls_sha256_starts>:
   1da64:	b508      	push	{r3, lr}
   1da66:	b161      	cbz	r1, 1da82 <cc_mbedtls_sha256_starts+0x1e>
   1da68:	2901      	cmp	r1, #1
   1da6a:	d107      	bne.n	1da7c <cc_mbedtls_sha256_starts+0x18>
   1da6c:	2102      	movs	r1, #2
   1da6e:	f000 f85b 	bl	1db28 <mbedtls_sha_starts_internal>
   1da72:	2800      	cmp	r0, #0
   1da74:	bf18      	it	ne
   1da76:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1da7a:	bd08      	pop	{r3, pc}
   1da7c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1da80:	bd08      	pop	{r3, pc}
   1da82:	2101      	movs	r1, #1
   1da84:	f000 f850 	bl	1db28 <mbedtls_sha_starts_internal>
   1da88:	e7f3      	b.n	1da72 <cc_mbedtls_sha256_starts+0xe>
   1da8a:	bf00      	nop

0001da8c <cc_mbedtls_sha256_update>:
   1da8c:	b530      	push	{r4, r5, lr}
   1da8e:	4605      	mov	r5, r0
   1da90:	1888      	adds	r0, r1, r2
   1da92:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1da96:	b0a1      	sub	sp, #132	; 0x84
   1da98:	460b      	mov	r3, r1
   1da9a:	4614      	mov	r4, r2
   1da9c:	d801      	bhi.n	1daa2 <cc_mbedtls_sha256_update+0x16>
   1da9e:	2a80      	cmp	r2, #128	; 0x80
   1daa0:	d90c      	bls.n	1dabc <cc_mbedtls_sha256_update+0x30>
   1daa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1daa6:	d917      	bls.n	1dad8 <cc_mbedtls_sha256_update+0x4c>
   1daa8:	4622      	mov	r2, r4
   1daaa:	4619      	mov	r1, r3
   1daac:	4628      	mov	r0, r5
   1daae:	f000 f87d 	bl	1dbac <mbedtls_sha_update_internal>
   1dab2:	4604      	mov	r4, r0
   1dab4:	b984      	cbnz	r4, 1dad8 <cc_mbedtls_sha256_update+0x4c>
   1dab6:	4620      	mov	r0, r4
   1dab8:	b021      	add	sp, #132	; 0x84
   1daba:	bd30      	pop	{r4, r5, pc}
   1dabc:	4668      	mov	r0, sp
   1dabe:	f7ff fbaf 	bl	1d220 <CC_PalMemCopyPlat>
   1dac2:	4622      	mov	r2, r4
   1dac4:	4669      	mov	r1, sp
   1dac6:	4628      	mov	r0, r5
   1dac8:	f000 f870 	bl	1dbac <mbedtls_sha_update_internal>
   1dacc:	2180      	movs	r1, #128	; 0x80
   1dace:	4604      	mov	r4, r0
   1dad0:	4668      	mov	r0, sp
   1dad2:	f7ff fba9 	bl	1d228 <CC_PalMemSetZeroPlat>
   1dad6:	e7ed      	b.n	1dab4 <cc_mbedtls_sha256_update+0x28>
   1dad8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1dadc:	e7eb      	b.n	1dab6 <cc_mbedtls_sha256_update+0x2a>
   1dade:	bf00      	nop

0001dae0 <cc_mbedtls_sha256_finish>:
   1dae0:	b570      	push	{r4, r5, r6, lr}
   1dae2:	b1e8      	cbz	r0, 1db20 <cc_mbedtls_sha256_finish+0x40>
   1dae4:	460e      	mov	r6, r1
   1dae6:	b1d9      	cbz	r1, 1db20 <cc_mbedtls_sha256_finish+0x40>
   1dae8:	4604      	mov	r4, r0
   1daea:	f000 f831 	bl	1db50 <mbedtls_sha_finish_internal>
   1daee:	4605      	mov	r5, r0
   1daf0:	b9b0      	cbnz	r0, 1db20 <cc_mbedtls_sha256_finish+0x40>
   1daf2:	6823      	ldr	r3, [r4, #0]
   1daf4:	2b01      	cmp	r3, #1
   1daf6:	d00b      	beq.n	1db10 <cc_mbedtls_sha256_finish+0x30>
   1daf8:	2b02      	cmp	r3, #2
   1dafa:	d001      	beq.n	1db00 <cc_mbedtls_sha256_finish+0x20>
   1dafc:	4628      	mov	r0, r5
   1dafe:	bd70      	pop	{r4, r5, r6, pc}
   1db00:	221c      	movs	r2, #28
   1db02:	f104 0108 	add.w	r1, r4, #8
   1db06:	4630      	mov	r0, r6
   1db08:	f7ff fb8a 	bl	1d220 <CC_PalMemCopyPlat>
   1db0c:	4628      	mov	r0, r5
   1db0e:	bd70      	pop	{r4, r5, r6, pc}
   1db10:	2220      	movs	r2, #32
   1db12:	f104 0108 	add.w	r1, r4, #8
   1db16:	4630      	mov	r0, r6
   1db18:	f7ff fb82 	bl	1d220 <CC_PalMemCopyPlat>
   1db1c:	4628      	mov	r0, r5
   1db1e:	bd70      	pop	{r4, r5, r6, pc}
   1db20:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1db24:	e7ea      	b.n	1dafc <cc_mbedtls_sha256_finish+0x1c>
   1db26:	bf00      	nop

0001db28 <mbedtls_sha_starts_internal>:
   1db28:	b178      	cbz	r0, 1db4a <mbedtls_sha_starts_internal+0x22>
   1db2a:	b538      	push	{r3, r4, r5, lr}
   1db2c:	4604      	mov	r4, r0
   1db2e:	460d      	mov	r5, r1
   1db30:	21f0      	movs	r1, #240	; 0xf0
   1db32:	f7ff fb79 	bl	1d228 <CC_PalMemSetZeroPlat>
   1db36:	2340      	movs	r3, #64	; 0x40
   1db38:	6025      	str	r5, [r4, #0]
   1db3a:	65e3      	str	r3, [r4, #92]	; 0x5c
   1db3c:	4620      	mov	r0, r4
   1db3e:	f000 fa67 	bl	1e010 <InitHashDrv>
   1db42:	3800      	subs	r0, #0
   1db44:	bf18      	it	ne
   1db46:	2001      	movne	r0, #1
   1db48:	bd38      	pop	{r3, r4, r5, pc}
   1db4a:	2001      	movs	r0, #1
   1db4c:	4770      	bx	lr
   1db4e:	bf00      	nop

0001db50 <mbedtls_sha_finish_internal>:
   1db50:	b570      	push	{r4, r5, r6, lr}
   1db52:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1db54:	b0a4      	sub	sp, #144	; 0x90
   1db56:	4604      	mov	r4, r0
   1db58:	ae04      	add	r6, sp, #16
   1db5a:	b9e5      	cbnz	r5, 1db96 <mbedtls_sha_finish_internal+0x46>
   1db5c:	2201      	movs	r2, #1
   1db5e:	2300      	movs	r3, #0
   1db60:	6062      	str	r2, [r4, #4]
   1db62:	4630      	mov	r0, r6
   1db64:	e9cd 3300 	strd	r3, r3, [sp]
   1db68:	aa02      	add	r2, sp, #8
   1db6a:	4629      	mov	r1, r5
   1db6c:	f000 fa1c 	bl	1dfa8 <SetDataBuffersInfo>
   1db70:	b110      	cbz	r0, 1db78 <mbedtls_sha_finish_internal+0x28>
   1db72:	2001      	movs	r0, #1
   1db74:	b024      	add	sp, #144	; 0x90
   1db76:	bd70      	pop	{r4, r5, r6, pc}
   1db78:	462a      	mov	r2, r5
   1db7a:	a902      	add	r1, sp, #8
   1db7c:	4620      	mov	r0, r4
   1db7e:	f000 fa71 	bl	1e064 <ProcessHashDrv>
   1db82:	2800      	cmp	r0, #0
   1db84:	d1f5      	bne.n	1db72 <mbedtls_sha_finish_internal+0x22>
   1db86:	4620      	mov	r0, r4
   1db88:	f000 fb82 	bl	1e290 <FinishHashDrv>
   1db8c:	2800      	cmp	r0, #0
   1db8e:	d1f0      	bne.n	1db72 <mbedtls_sha_finish_internal+0x22>
   1db90:	6620      	str	r0, [r4, #96]	; 0x60
   1db92:	b024      	add	sp, #144	; 0x90
   1db94:	bd70      	pop	{r4, r5, r6, pc}
   1db96:	2d80      	cmp	r5, #128	; 0x80
   1db98:	462a      	mov	r2, r5
   1db9a:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1db9e:	bf28      	it	cs
   1dba0:	2280      	movcs	r2, #128	; 0x80
   1dba2:	4630      	mov	r0, r6
   1dba4:	f7ff fb3c 	bl	1d220 <CC_PalMemCopyPlat>
   1dba8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1dbaa:	e7d7      	b.n	1db5c <mbedtls_sha_finish_internal+0xc>

0001dbac <mbedtls_sha_update_internal>:
   1dbac:	2800      	cmp	r0, #0
   1dbae:	f000 80d9 	beq.w	1dd64 <mbedtls_sha_update_internal+0x1b8>
   1dbb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb6:	4617      	mov	r7, r2
   1dbb8:	b0a5      	sub	sp, #148	; 0x94
   1dbba:	2a00      	cmp	r2, #0
   1dbbc:	f000 80a8 	beq.w	1dd10 <mbedtls_sha_update_internal+0x164>
   1dbc0:	460c      	mov	r4, r1
   1dbc2:	2900      	cmp	r1, #0
   1dbc4:	d050      	beq.n	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dbc6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1dbca:	4605      	mov	r5, r0
   1dbcc:	d32c      	bcc.n	1dc28 <mbedtls_sha_update_internal+0x7c>
   1dbce:	f64f 7aff 	movw	sl, #65535	; 0xffff
   1dbd2:	f5a2 477f 	sub.w	r7, r2, #65280	; 0xff00
   1dbd6:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1dbd8:	eb01 090a 	add.w	r9, r1, sl
   1dbdc:	3fff      	subs	r7, #255	; 0xff
   1dbde:	f105 0b64 	add.w	fp, r5, #100	; 0x64
   1dbe2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dbe4:	1a14      	subs	r4, r2, r0
   1dbe6:	f5a9 467f 	sub.w	r6, r9, #65280	; 0xff00
   1dbea:	fbb4 f3f2 	udiv	r3, r4, r2
   1dbee:	fb02 4413 	mls	r4, r2, r3, r4
   1dbf2:	3eff      	subs	r6, #255	; 0xff
   1dbf4:	2c00      	cmp	r4, #0
   1dbf6:	d15f      	bne.n	1dcb8 <mbedtls_sha_update_internal+0x10c>
   1dbf8:	4282      	cmp	r2, r0
   1dbfa:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1dbfe:	d06c      	beq.n	1dcda <mbedtls_sha_update_internal+0x12e>
   1dc00:	fbb4 f8f2 	udiv	r8, r4, r2
   1dc04:	fb02 f808 	mul.w	r8, r2, r8
   1dc08:	f1b8 0f00 	cmp.w	r8, #0
   1dc0c:	d130      	bne.n	1dc70 <mbedtls_sha_update_internal+0xc4>
   1dc0e:	2c00      	cmp	r4, #0
   1dc10:	d145      	bne.n	1dc9e <mbedtls_sha_update_internal+0xf2>
   1dc12:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   1dc16:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1dc1a:	464c      	mov	r4, r9
   1dc1c:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
   1dc20:	44d1      	add	r9, sl
   1dc22:	d302      	bcc.n	1dc2a <mbedtls_sha_update_internal+0x7e>
   1dc24:	461f      	mov	r7, r3
   1dc26:	e7dc      	b.n	1dbe2 <mbedtls_sha_update_internal+0x36>
   1dc28:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1dc2a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dc2c:	1a16      	subs	r6, r2, r0
   1dc2e:	fbb6 f3f2 	udiv	r3, r6, r2
   1dc32:	fb02 6613 	mls	r6, r2, r3, r6
   1dc36:	42be      	cmp	r6, r7
   1dc38:	bf28      	it	cs
   1dc3a:	463e      	movcs	r6, r7
   1dc3c:	2e00      	cmp	r6, #0
   1dc3e:	f040 8083 	bne.w	1dd48 <mbedtls_sha_update_internal+0x19c>
   1dc42:	4290      	cmp	r0, r2
   1dc44:	f000 8090 	beq.w	1dd68 <mbedtls_sha_update_internal+0x1bc>
   1dc48:	fbb7 f6f2 	udiv	r6, r7, r2
   1dc4c:	fb02 f606 	mul.w	r6, r2, r6
   1dc50:	2e00      	cmp	r6, #0
   1dc52:	d06a      	beq.n	1dd2a <mbedtls_sha_update_internal+0x17e>
   1dc54:	2300      	movs	r3, #0
   1dc56:	e9cd 3300 	strd	r3, r3, [sp]
   1dc5a:	aa02      	add	r2, sp, #8
   1dc5c:	4631      	mov	r1, r6
   1dc5e:	4620      	mov	r0, r4
   1dc60:	f000 f9a2 	bl	1dfa8 <SetDataBuffersInfo>
   1dc64:	2800      	cmp	r0, #0
   1dc66:	d057      	beq.n	1dd18 <mbedtls_sha_update_internal+0x16c>
   1dc68:	2001      	movs	r0, #1
   1dc6a:	b025      	add	sp, #148	; 0x94
   1dc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc70:	2300      	movs	r3, #0
   1dc72:	e9cd 3300 	strd	r3, r3, [sp]
   1dc76:	aa02      	add	r2, sp, #8
   1dc78:	4641      	mov	r1, r8
   1dc7a:	4630      	mov	r0, r6
   1dc7c:	f000 f994 	bl	1dfa8 <SetDataBuffersInfo>
   1dc80:	2800      	cmp	r0, #0
   1dc82:	d1f1      	bne.n	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dc84:	a902      	add	r1, sp, #8
   1dc86:	4642      	mov	r2, r8
   1dc88:	4628      	mov	r0, r5
   1dc8a:	f000 f9eb 	bl	1e064 <ProcessHashDrv>
   1dc8e:	2800      	cmp	r0, #0
   1dc90:	d1ea      	bne.n	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dc92:	eba4 0408 	sub.w	r4, r4, r8
   1dc96:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1dc98:	4446      	add	r6, r8
   1dc9a:	2c00      	cmp	r4, #0
   1dc9c:	d0b9      	beq.n	1dc12 <mbedtls_sha_update_internal+0x66>
   1dc9e:	3019      	adds	r0, #25
   1dca0:	4631      	mov	r1, r6
   1dca2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1dca6:	4622      	mov	r2, r4
   1dca8:	f7ff faba 	bl	1d220 <CC_PalMemCopyPlat>
   1dcac:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1dcae:	4420      	add	r0, r4
   1dcb0:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   1dcb4:	6628      	str	r0, [r5, #96]	; 0x60
   1dcb6:	e7ae      	b.n	1dc16 <mbedtls_sha_update_internal+0x6a>
   1dcb8:	4554      	cmp	r4, sl
   1dcba:	bf28      	it	cs
   1dcbc:	4654      	movcs	r4, sl
   1dcbe:	4622      	mov	r2, r4
   1dcc0:	4631      	mov	r1, r6
   1dcc2:	4458      	add	r0, fp
   1dcc4:	f7ff faac 	bl	1d220 <CC_PalMemCopyPlat>
   1dcc8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1dcca:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dccc:	4420      	add	r0, r4
   1dcce:	4282      	cmp	r2, r0
   1dcd0:	4426      	add	r6, r4
   1dcd2:	6628      	str	r0, [r5, #96]	; 0x60
   1dcd4:	ebaa 0404 	sub.w	r4, sl, r4
   1dcd8:	d192      	bne.n	1dc00 <mbedtls_sha_update_internal+0x54>
   1dcda:	2a80      	cmp	r2, #128	; 0x80
   1dcdc:	bf28      	it	cs
   1dcde:	2280      	movcs	r2, #128	; 0x80
   1dce0:	4659      	mov	r1, fp
   1dce2:	a804      	add	r0, sp, #16
   1dce4:	f7ff fa9c 	bl	1d220 <CC_PalMemCopyPlat>
   1dce8:	2300      	movs	r3, #0
   1dcea:	e9cd 3300 	strd	r3, r3, [sp]
   1dcee:	aa02      	add	r2, sp, #8
   1dcf0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1dcf2:	a804      	add	r0, sp, #16
   1dcf4:	f000 f958 	bl	1dfa8 <SetDataBuffersInfo>
   1dcf8:	2800      	cmp	r0, #0
   1dcfa:	d1b5      	bne.n	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dcfc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dcfe:	a902      	add	r1, sp, #8
   1dd00:	4628      	mov	r0, r5
   1dd02:	f000 f9af 	bl	1e064 <ProcessHashDrv>
   1dd06:	2800      	cmp	r0, #0
   1dd08:	d1ae      	bne.n	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dd0a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dd0c:	6628      	str	r0, [r5, #96]	; 0x60
   1dd0e:	e777      	b.n	1dc00 <mbedtls_sha_update_internal+0x54>
   1dd10:	4638      	mov	r0, r7
   1dd12:	b025      	add	sp, #148	; 0x94
   1dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd18:	a902      	add	r1, sp, #8
   1dd1a:	4632      	mov	r2, r6
   1dd1c:	4628      	mov	r0, r5
   1dd1e:	f000 f9a1 	bl	1e064 <ProcessHashDrv>
   1dd22:	2800      	cmp	r0, #0
   1dd24:	d1a0      	bne.n	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dd26:	4434      	add	r4, r6
   1dd28:	1bbf      	subs	r7, r7, r6
   1dd2a:	2f00      	cmp	r7, #0
   1dd2c:	d0f0      	beq.n	1dd10 <mbedtls_sha_update_internal+0x164>
   1dd2e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1dd30:	3319      	adds	r3, #25
   1dd32:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   1dd36:	463a      	mov	r2, r7
   1dd38:	4621      	mov	r1, r4
   1dd3a:	f7ff fa71 	bl	1d220 <CC_PalMemCopyPlat>
   1dd3e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1dd40:	443b      	add	r3, r7
   1dd42:	2000      	movs	r0, #0
   1dd44:	662b      	str	r3, [r5, #96]	; 0x60
   1dd46:	e790      	b.n	1dc6a <mbedtls_sha_update_internal+0xbe>
   1dd48:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1dd4c:	4621      	mov	r1, r4
   1dd4e:	4632      	mov	r2, r6
   1dd50:	4418      	add	r0, r3
   1dd52:	f7ff fa65 	bl	1d220 <CC_PalMemCopyPlat>
   1dd56:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1dd58:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dd5a:	4430      	add	r0, r6
   1dd5c:	1bbf      	subs	r7, r7, r6
   1dd5e:	4434      	add	r4, r6
   1dd60:	6628      	str	r0, [r5, #96]	; 0x60
   1dd62:	e76e      	b.n	1dc42 <mbedtls_sha_update_internal+0x96>
   1dd64:	2001      	movs	r0, #1
   1dd66:	4770      	bx	lr
   1dd68:	2a80      	cmp	r2, #128	; 0x80
   1dd6a:	bf28      	it	cs
   1dd6c:	2280      	movcs	r2, #128	; 0x80
   1dd6e:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1dd72:	a804      	add	r0, sp, #16
   1dd74:	f7ff fa54 	bl	1d220 <CC_PalMemCopyPlat>
   1dd78:	2300      	movs	r3, #0
   1dd7a:	e9cd 3300 	strd	r3, r3, [sp]
   1dd7e:	a804      	add	r0, sp, #16
   1dd80:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1dd82:	aa02      	add	r2, sp, #8
   1dd84:	f000 f910 	bl	1dfa8 <SetDataBuffersInfo>
   1dd88:	2800      	cmp	r0, #0
   1dd8a:	f47f af6d 	bne.w	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dd8e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dd90:	a902      	add	r1, sp, #8
   1dd92:	4628      	mov	r0, r5
   1dd94:	f000 f966 	bl	1e064 <ProcessHashDrv>
   1dd98:	2800      	cmp	r0, #0
   1dd9a:	f47f af65 	bne.w	1dc68 <mbedtls_sha_update_internal+0xbc>
   1dd9e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dda0:	6628      	str	r0, [r5, #96]	; 0x60
   1dda2:	e751      	b.n	1dc48 <mbedtls_sha_update_internal+0x9c>

0001dda4 <cc_mbedtls_sha256>:
   1dda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dda6:	461c      	mov	r4, r3
   1dda8:	4605      	mov	r5, r0
   1ddaa:	4811      	ldr	r0, [pc, #68]	; (1ddf0 <cc_mbedtls_sha256+0x4c>)
   1ddac:	460e      	mov	r6, r1
   1ddae:	4617      	mov	r7, r2
   1ddb0:	f7ff fe3e 	bl	1da30 <cc_mbedtls_sha256_init>
   1ddb4:	4621      	mov	r1, r4
   1ddb6:	480e      	ldr	r0, [pc, #56]	; (1ddf0 <cc_mbedtls_sha256+0x4c>)
   1ddb8:	f7ff fe54 	bl	1da64 <cc_mbedtls_sha256_starts>
   1ddbc:	4604      	mov	r4, r0
   1ddbe:	b120      	cbz	r0, 1ddca <cc_mbedtls_sha256+0x26>
   1ddc0:	480b      	ldr	r0, [pc, #44]	; (1ddf0 <cc_mbedtls_sha256+0x4c>)
   1ddc2:	f7ff fe49 	bl	1da58 <cc_mbedtls_sha256_free>
   1ddc6:	4620      	mov	r0, r4
   1ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ddca:	4809      	ldr	r0, [pc, #36]	; (1ddf0 <cc_mbedtls_sha256+0x4c>)
   1ddcc:	4632      	mov	r2, r6
   1ddce:	4629      	mov	r1, r5
   1ddd0:	f7ff fe5c 	bl	1da8c <cc_mbedtls_sha256_update>
   1ddd4:	4604      	mov	r4, r0
   1ddd6:	2800      	cmp	r0, #0
   1ddd8:	d1f2      	bne.n	1ddc0 <cc_mbedtls_sha256+0x1c>
   1ddda:	4639      	mov	r1, r7
   1dddc:	4804      	ldr	r0, [pc, #16]	; (1ddf0 <cc_mbedtls_sha256+0x4c>)
   1ddde:	f7ff fe7f 	bl	1dae0 <cc_mbedtls_sha256_finish>
   1dde2:	4604      	mov	r4, r0
   1dde4:	4802      	ldr	r0, [pc, #8]	; (1ddf0 <cc_mbedtls_sha256+0x4c>)
   1dde6:	f7ff fe37 	bl	1da58 <cc_mbedtls_sha256_free>
   1ddea:	4620      	mov	r0, r4
   1ddec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ddee:	bf00      	nop
   1ddf0:	20003224 	.word	0x20003224

0001ddf4 <RNG_PLAT_SetUserRngParameters>:
   1ddf4:	b530      	push	{r4, r5, lr}
   1ddf6:	b083      	sub	sp, #12
   1ddf8:	231c      	movs	r3, #28
   1ddfa:	a901      	add	r1, sp, #4
   1ddfc:	4604      	mov	r4, r0
   1ddfe:	9301      	str	r3, [sp, #4]
   1de00:	f000 f834 	bl	1de6c <CC_PalTrngParamGet>
   1de04:	4605      	mov	r5, r0
   1de06:	b938      	cbnz	r0, 1de18 <RNG_PLAT_SetUserRngParameters+0x24>
   1de08:	9b01      	ldr	r3, [sp, #4]
   1de0a:	2b1c      	cmp	r3, #28
   1de0c:	d007      	beq.n	1de1e <RNG_PLAT_SetUserRngParameters+0x2a>
   1de0e:	4d15      	ldr	r5, [pc, #84]	; (1de64 <RNG_PLAT_SetUserRngParameters+0x70>)
   1de10:	211c      	movs	r1, #28
   1de12:	4620      	mov	r0, r4
   1de14:	f7ff fa08 	bl	1d228 <CC_PalMemSetZeroPlat>
   1de18:	4628      	mov	r0, r5
   1de1a:	b003      	add	sp, #12
   1de1c:	bd30      	pop	{r4, r5, pc}
   1de1e:	e9d4 3200 	ldrd	r3, r2, [r4]
   1de22:	2101      	movs	r1, #1
   1de24:	3b00      	subs	r3, #0
   1de26:	61e1      	str	r1, [r4, #28]
   1de28:	bf18      	it	ne
   1de2a:	2301      	movne	r3, #1
   1de2c:	b10a      	cbz	r2, 1de32 <RNG_PLAT_SetUserRngParameters+0x3e>
   1de2e:	f043 0302 	orr.w	r3, r3, #2
   1de32:	68a2      	ldr	r2, [r4, #8]
   1de34:	b932      	cbnz	r2, 1de44 <RNG_PLAT_SetUserRngParameters+0x50>
   1de36:	68e2      	ldr	r2, [r4, #12]
   1de38:	b942      	cbnz	r2, 1de4c <RNG_PLAT_SetUserRngParameters+0x58>
   1de3a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1de3e:	b97b      	cbnz	r3, 1de60 <RNG_PLAT_SetUserRngParameters+0x6c>
   1de40:	4d09      	ldr	r5, [pc, #36]	; (1de68 <RNG_PLAT_SetUserRngParameters+0x74>)
   1de42:	e7e5      	b.n	1de10 <RNG_PLAT_SetUserRngParameters+0x1c>
   1de44:	68e2      	ldr	r2, [r4, #12]
   1de46:	f043 0304 	orr.w	r3, r3, #4
   1de4a:	b13a      	cbz	r2, 1de5c <RNG_PLAT_SetUserRngParameters+0x68>
   1de4c:	f043 0308 	orr.w	r3, r3, #8
   1de50:	2200      	movs	r2, #0
   1de52:	4628      	mov	r0, r5
   1de54:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1de58:	b003      	add	sp, #12
   1de5a:	bd30      	pop	{r4, r5, pc}
   1de5c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1de60:	4615      	mov	r5, r2
   1de62:	e7d9      	b.n	1de18 <RNG_PLAT_SetUserRngParameters+0x24>
   1de64:	00f00c37 	.word	0x00f00c37
   1de68:	00f00c0e 	.word	0x00f00c0e

0001de6c <CC_PalTrngParamGet>:
   1de6c:	b118      	cbz	r0, 1de76 <CC_PalTrngParamGet+0xa>
   1de6e:	b111      	cbz	r1, 1de76 <CC_PalTrngParamGet+0xa>
   1de70:	680b      	ldr	r3, [r1, #0]
   1de72:	2b1c      	cmp	r3, #28
   1de74:	d001      	beq.n	1de7a <CC_PalTrngParamGet+0xe>
   1de76:	2001      	movs	r0, #1
   1de78:	4770      	bx	lr
   1de7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1de7e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1de82:	3201      	adds	r2, #1
   1de84:	bf14      	ite	ne
   1de86:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1de8a:	f241 225c 	movweq	r2, #4700	; 0x125c
   1de8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1de92:	6002      	str	r2, [r0, #0]
   1de94:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1de98:	3201      	adds	r2, #1
   1de9a:	bf14      	ite	ne
   1de9c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1dea0:	f641 1264 	movweq	r2, #6500	; 0x1964
   1dea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dea8:	6042      	str	r2, [r0, #4]
   1deaa:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1deae:	3201      	adds	r2, #1
   1deb0:	bf14      	ite	ne
   1deb2:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1deb6:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1deba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1debe:	6082      	str	r2, [r0, #8]
   1dec0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1dec4:	3201      	adds	r2, #1
   1dec6:	bf14      	ite	ne
   1dec8:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1decc:	f241 3288 	movweq	r2, #5000	; 0x1388
   1ded0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ded4:	60c2      	str	r2, [r0, #12]
   1ded6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1deda:	3201      	adds	r2, #1
   1dedc:	bf14      	ite	ne
   1dede:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1dee2:	2290      	moveq	r2, #144	; 0x90
   1dee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1dee8:	6102      	str	r2, [r0, #16]
   1deea:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1deee:	3201      	adds	r2, #1
   1def0:	bf14      	ite	ne
   1def2:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1def6:	2251      	moveq	r2, #81	; 0x51
   1def8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1defc:	6142      	str	r2, [r0, #20]
   1defe:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1df02:	3201      	adds	r2, #1
   1df04:	bf14      	ite	ne
   1df06:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1df0a:	f240 3337 	movweq	r3, #823	; 0x337
   1df0e:	6183      	str	r3, [r0, #24]
   1df10:	2000      	movs	r0, #0
   1df12:	4770      	bx	lr

0001df14 <LLF_RND_WaitRngInterrupt>:
   1df14:	b508      	push	{r3, lr}
   1df16:	4601      	mov	r1, r0
   1df18:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1df1c:	f7ff f90c 	bl	1d138 <CC_HalWaitInterruptRND>
   1df20:	4b03      	ldr	r3, [pc, #12]	; (1df30 <LLF_RND_WaitRngInterrupt+0x1c>)
   1df22:	2200      	movs	r2, #0
   1df24:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1df28:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1df2c:	bd08      	pop	{r3, pc}
   1df2e:	bf00      	nop
   1df30:	5002b000 	.word	0x5002b000

0001df34 <LLF_RND_GetRoscSampleCnt>:
   1df34:	3801      	subs	r0, #1
   1df36:	2807      	cmp	r0, #7
   1df38:	d805      	bhi.n	1df46 <LLF_RND_GetRoscSampleCnt+0x12>
   1df3a:	e8df f000 	tbb	[pc, r0]
   1df3e:	0e12      	.short	0x0e12
   1df40:	04040a04 	.word	0x04040a04
   1df44:	0604      	.short	0x0604
   1df46:	4809      	ldr	r0, [pc, #36]	; (1df6c <LLF_RND_GetRoscSampleCnt+0x38>)
   1df48:	4770      	bx	lr
   1df4a:	68cb      	ldr	r3, [r1, #12]
   1df4c:	624b      	str	r3, [r1, #36]	; 0x24
   1df4e:	2000      	movs	r0, #0
   1df50:	4770      	bx	lr
   1df52:	688b      	ldr	r3, [r1, #8]
   1df54:	624b      	str	r3, [r1, #36]	; 0x24
   1df56:	2000      	movs	r0, #0
   1df58:	4770      	bx	lr
   1df5a:	684b      	ldr	r3, [r1, #4]
   1df5c:	624b      	str	r3, [r1, #36]	; 0x24
   1df5e:	2000      	movs	r0, #0
   1df60:	4770      	bx	lr
   1df62:	680b      	ldr	r3, [r1, #0]
   1df64:	624b      	str	r3, [r1, #36]	; 0x24
   1df66:	2000      	movs	r0, #0
   1df68:	4770      	bx	lr
   1df6a:	bf00      	nop
   1df6c:	00f10c31 	.word	0x00f10c31

0001df70 <LLF_RND_GetFastestRosc>:
   1df70:	680b      	ldr	r3, [r1, #0]
   1df72:	e002      	b.n	1df7a <LLF_RND_GetFastestRosc+0xa>
   1df74:	2b08      	cmp	r3, #8
   1df76:	600b      	str	r3, [r1, #0]
   1df78:	d806      	bhi.n	1df88 <LLF_RND_GetFastestRosc+0x18>
   1df7a:	6a02      	ldr	r2, [r0, #32]
   1df7c:	4213      	tst	r3, r2
   1df7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1df82:	d0f7      	beq.n	1df74 <LLF_RND_GetFastestRosc+0x4>
   1df84:	2000      	movs	r0, #0
   1df86:	4770      	bx	lr
   1df88:	4800      	ldr	r0, [pc, #0]	; (1df8c <LLF_RND_GetFastestRosc+0x1c>)
   1df8a:	4770      	bx	lr
   1df8c:	00f10c31 	.word	0x00f10c31

0001df90 <LLF_RND_TurnOffTrng>:
   1df90:	4b04      	ldr	r3, [pc, #16]	; (1dfa4 <LLF_RND_TurnOffTrng+0x14>)
   1df92:	2200      	movs	r2, #0
   1df94:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1df98:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1df9c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1dfa0:	f7ff b8b0 	b.w	1d104 <CC_HalClearInterruptBit>
   1dfa4:	5002b000 	.word	0x5002b000

0001dfa8 <SetDataBuffersInfo>:
   1dfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfaa:	b083      	sub	sp, #12
   1dfac:	461d      	mov	r5, r3
   1dfae:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1dfb2:	f04f 0300 	mov.w	r3, #0
   1dfb6:	f88d 3007 	strb.w	r3, [sp, #7]
   1dfba:	d324      	bcc.n	1e006 <SetDataBuffersInfo+0x5e>
   1dfbc:	468c      	mov	ip, r1
   1dfbe:	4484      	add	ip, r0
   1dfc0:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   1dfc4:	4604      	mov	r4, r0
   1dfc6:	d81e      	bhi.n	1e006 <SetDataBuffersInfo+0x5e>
   1dfc8:	4617      	mov	r7, r2
   1dfca:	f10d 0307 	add.w	r3, sp, #7
   1dfce:	2201      	movs	r2, #1
   1dfd0:	f000 fe56 	bl	1ec80 <CC_PalDataBufferAttrGet>
   1dfd4:	4606      	mov	r6, r0
   1dfd6:	b9b0      	cbnz	r0, 1e006 <SetDataBuffersInfo+0x5e>
   1dfd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dfda:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dfde:	603c      	str	r4, [r7, #0]
   1dfe0:	713b      	strb	r3, [r7, #4]
   1dfe2:	b192      	cbz	r2, 1e00a <SetDataBuffersInfo+0x62>
   1dfe4:	b14d      	cbz	r5, 1dffa <SetDataBuffersInfo+0x52>
   1dfe6:	4602      	mov	r2, r0
   1dfe8:	9908      	ldr	r1, [sp, #32]
   1dfea:	f10d 0307 	add.w	r3, sp, #7
   1dfee:	4628      	mov	r0, r5
   1dff0:	f000 fe46 	bl	1ec80 <CC_PalDataBufferAttrGet>
   1dff4:	b938      	cbnz	r0, 1e006 <SetDataBuffersInfo+0x5e>
   1dff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dffc:	4630      	mov	r0, r6
   1dffe:	6015      	str	r5, [r2, #0]
   1e000:	7113      	strb	r3, [r2, #4]
   1e002:	b003      	add	sp, #12
   1e004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e006:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1e00a:	4630      	mov	r0, r6
   1e00c:	b003      	add	sp, #12
   1e00e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e010 <InitHashDrv>:
   1e010:	b1e8      	cbz	r0, 1e04e <InitHashDrv+0x3e>
   1e012:	b510      	push	{r4, lr}
   1e014:	6804      	ldr	r4, [r0, #0]
   1e016:	2c01      	cmp	r4, #1
   1e018:	d004      	beq.n	1e024 <InitHashDrv+0x14>
   1e01a:	2c02      	cmp	r4, #2
   1e01c:	d010      	beq.n	1e040 <InitHashDrv+0x30>
   1e01e:	b144      	cbz	r4, 1e032 <InitHashDrv+0x22>
   1e020:	480c      	ldr	r0, [pc, #48]	; (1e054 <InitHashDrv+0x44>)
   1e022:	bd10      	pop	{r4, pc}
   1e024:	490c      	ldr	r1, [pc, #48]	; (1e058 <InitHashDrv+0x48>)
   1e026:	2220      	movs	r2, #32
   1e028:	3008      	adds	r0, #8
   1e02a:	f7ff f8f9 	bl	1d220 <CC_PalMemCopyPlat>
   1e02e:	2000      	movs	r0, #0
   1e030:	bd10      	pop	{r4, pc}
   1e032:	490a      	ldr	r1, [pc, #40]	; (1e05c <InitHashDrv+0x4c>)
   1e034:	2214      	movs	r2, #20
   1e036:	3008      	adds	r0, #8
   1e038:	f7ff f8f2 	bl	1d220 <CC_PalMemCopyPlat>
   1e03c:	4620      	mov	r0, r4
   1e03e:	bd10      	pop	{r4, pc}
   1e040:	4907      	ldr	r1, [pc, #28]	; (1e060 <InitHashDrv+0x50>)
   1e042:	2220      	movs	r2, #32
   1e044:	3008      	adds	r0, #8
   1e046:	f7ff f8eb 	bl	1d220 <CC_PalMemCopyPlat>
   1e04a:	2000      	movs	r0, #0
   1e04c:	bd10      	pop	{r4, pc}
   1e04e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e052:	4770      	bx	lr
   1e054:	00f30001 	.word	0x00f30001
   1e058:	00024344 	.word	0x00024344
   1e05c:	00024310 	.word	0x00024310
   1e060:	00024324 	.word	0x00024324

0001e064 <ProcessHashDrv>:
   1e064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e068:	2900      	cmp	r1, #0
   1e06a:	f000 80f9 	beq.w	1e260 <ProcessHashDrv+0x1fc>
   1e06e:	4604      	mov	r4, r0
   1e070:	2800      	cmp	r0, #0
   1e072:	f000 80f9 	beq.w	1e268 <ProcessHashDrv+0x204>
   1e076:	6803      	ldr	r3, [r0, #0]
   1e078:	4690      	mov	r8, r2
   1e07a:	460f      	mov	r7, r1
   1e07c:	2b00      	cmp	r3, #0
   1e07e:	f000 80c3 	beq.w	1e208 <ProcessHashDrv+0x1a4>
   1e082:	3b01      	subs	r3, #1
   1e084:	2b01      	cmp	r3, #1
   1e086:	f200 80d7 	bhi.w	1e238 <ProcessHashDrv+0x1d4>
   1e08a:	4879      	ldr	r0, [pc, #484]	; (1e270 <ProcessHashDrv+0x20c>)
   1e08c:	f04f 31ff 	mov.w	r1, #4294967295
   1e090:	f04f 0902 	mov.w	r9, #2
   1e094:	f7ff f8e0 	bl	1d258 <CC_PalMutexLock>
   1e098:	2800      	cmp	r0, #0
   1e09a:	f040 80bf 	bne.w	1e21c <ProcessHashDrv+0x1b8>
   1e09e:	2000      	movs	r0, #0
   1e0a0:	f7ff f90a 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e0a4:	4606      	mov	r6, r0
   1e0a6:	2800      	cmp	r0, #0
   1e0a8:	f040 80c2 	bne.w	1e230 <ProcessHashDrv+0x1cc>
   1e0ac:	4a71      	ldr	r2, [pc, #452]	; (1e274 <ProcessHashDrv+0x210>)
   1e0ae:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1e0b2:	2b00      	cmp	r3, #0
   1e0b4:	d1fb      	bne.n	1e0ae <ProcessHashDrv+0x4a>
   1e0b6:	4d6f      	ldr	r5, [pc, #444]	; (1e274 <ProcessHashDrv+0x210>)
   1e0b8:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   1e0bc:	2b00      	cmp	r3, #0
   1e0be:	d1fb      	bne.n	1e0b8 <ProcessHashDrv+0x54>
   1e0c0:	f04f 30ff 	mov.w	r0, #4294967295
   1e0c4:	f7ff f81e 	bl	1d104 <CC_HalClearInterruptBit>
   1e0c8:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e0cc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e0d0:	f7ff f826 	bl	1d120 <CC_HalMaskInterrupt>
   1e0d4:	2301      	movs	r3, #1
   1e0d6:	2207      	movs	r2, #7
   1e0d8:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1e0dc:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1e0e0:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1e0e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e0e6:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1e0ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e0ec:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1e0f0:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1e0f4:	6823      	ldr	r3, [r4, #0]
   1e0f6:	b15b      	cbz	r3, 1e110 <ProcessHashDrv+0xac>
   1e0f8:	3b01      	subs	r3, #1
   1e0fa:	2b01      	cmp	r3, #1
   1e0fc:	d818      	bhi.n	1e130 <ProcessHashDrv+0xcc>
   1e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e100:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1e104:	6a23      	ldr	r3, [r4, #32]
   1e106:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1e10a:	69e3      	ldr	r3, [r4, #28]
   1e10c:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1e110:	4b58      	ldr	r3, [pc, #352]	; (1e274 <ProcessHashDrv+0x210>)
   1e112:	69a2      	ldr	r2, [r4, #24]
   1e114:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1e118:	6962      	ldr	r2, [r4, #20]
   1e11a:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1e11e:	6922      	ldr	r2, [r4, #16]
   1e120:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1e124:	68e2      	ldr	r2, [r4, #12]
   1e126:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1e12a:	68a2      	ldr	r2, [r4, #8]
   1e12c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1e130:	4a50      	ldr	r2, [pc, #320]	; (1e274 <ProcessHashDrv+0x210>)
   1e132:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e136:	2b00      	cmp	r3, #0
   1e138:	d1fb      	bne.n	1e132 <ProcessHashDrv+0xce>
   1e13a:	f1b8 0f00 	cmp.w	r8, #0
   1e13e:	d05f      	beq.n	1e200 <ProcessHashDrv+0x19c>
   1e140:	6863      	ldr	r3, [r4, #4]
   1e142:	2b01      	cmp	r3, #1
   1e144:	bf08      	it	eq
   1e146:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1e14a:	4b4a      	ldr	r3, [pc, #296]	; (1e274 <ProcessHashDrv+0x210>)
   1e14c:	683a      	ldr	r2, [r7, #0]
   1e14e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1e152:	2040      	movs	r0, #64	; 0x40
   1e154:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1e158:	f7fe ffe8 	bl	1d12c <CC_HalWaitInterrupt>
   1e15c:	4606      	mov	r6, r0
   1e15e:	4a45      	ldr	r2, [pc, #276]	; (1e274 <ProcessHashDrv+0x210>)
   1e160:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e164:	2b00      	cmp	r3, #0
   1e166:	d1fb      	bne.n	1e160 <ProcessHashDrv+0xfc>
   1e168:	4a42      	ldr	r2, [pc, #264]	; (1e274 <ProcessHashDrv+0x210>)
   1e16a:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e16e:	2b00      	cmp	r3, #0
   1e170:	d1fb      	bne.n	1e16a <ProcessHashDrv+0x106>
   1e172:	6823      	ldr	r3, [r4, #0]
   1e174:	b15b      	cbz	r3, 1e18e <ProcessHashDrv+0x12a>
   1e176:	3b01      	subs	r3, #1
   1e178:	2b01      	cmp	r3, #1
   1e17a:	d818      	bhi.n	1e1ae <ProcessHashDrv+0x14a>
   1e17c:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   1e180:	6263      	str	r3, [r4, #36]	; 0x24
   1e182:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1e186:	6223      	str	r3, [r4, #32]
   1e188:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   1e18c:	61e3      	str	r3, [r4, #28]
   1e18e:	4b39      	ldr	r3, [pc, #228]	; (1e274 <ProcessHashDrv+0x210>)
   1e190:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e194:	61a2      	str	r2, [r4, #24]
   1e196:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1e19a:	6162      	str	r2, [r4, #20]
   1e19c:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1e1a0:	6122      	str	r2, [r4, #16]
   1e1a2:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1e1a6:	60e2      	str	r2, [r4, #12]
   1e1a8:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1e1ac:	60a3      	str	r3, [r4, #8]
   1e1ae:	4a31      	ldr	r2, [pc, #196]	; (1e274 <ProcessHashDrv+0x210>)
   1e1b0:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1e1b4:	64a1      	str	r1, [r4, #72]	; 0x48
   1e1b6:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1e1ba:	64e1      	str	r1, [r4, #76]	; 0x4c
   1e1bc:	2300      	movs	r3, #0
   1e1be:	2101      	movs	r1, #1
   1e1c0:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1e1c4:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1e1c8:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e1cc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e1d0:	2b00      	cmp	r3, #0
   1e1d2:	d1fb      	bne.n	1e1cc <ProcessHashDrv+0x168>
   1e1d4:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   1e1d8:	2e00      	cmp	r6, #0
   1e1da:	d13b      	bne.n	1e254 <ProcessHashDrv+0x1f0>
   1e1dc:	4b25      	ldr	r3, [pc, #148]	; (1e274 <ProcessHashDrv+0x210>)
   1e1de:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e1e2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e1e6:	f7fe ff9b 	bl	1d120 <CC_HalMaskInterrupt>
   1e1ea:	2001      	movs	r0, #1
   1e1ec:	f7ff f864 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e1f0:	bb60      	cbnz	r0, 1e24c <ProcessHashDrv+0x1e8>
   1e1f2:	481f      	ldr	r0, [pc, #124]	; (1e270 <ProcessHashDrv+0x20c>)
   1e1f4:	f7ff f838 	bl	1d268 <CC_PalMutexUnlock>
   1e1f8:	bb10      	cbnz	r0, 1e240 <ProcessHashDrv+0x1dc>
   1e1fa:	4630      	mov	r0, r6
   1e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e200:	2304      	movs	r3, #4
   1e202:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e206:	e7aa      	b.n	1e15e <ProcessHashDrv+0xfa>
   1e208:	4819      	ldr	r0, [pc, #100]	; (1e270 <ProcessHashDrv+0x20c>)
   1e20a:	f04f 31ff 	mov.w	r1, #4294967295
   1e20e:	f04f 0901 	mov.w	r9, #1
   1e212:	f7ff f821 	bl	1d258 <CC_PalMutexLock>
   1e216:	2800      	cmp	r0, #0
   1e218:	f43f af41 	beq.w	1e09e <ProcessHashDrv+0x3a>
   1e21c:	4816      	ldr	r0, [pc, #88]	; (1e278 <ProcessHashDrv+0x214>)
   1e21e:	f7fe f8c7 	bl	1c3b0 <CC_PalAbort>
   1e222:	2000      	movs	r0, #0
   1e224:	f7ff f848 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e228:	4606      	mov	r6, r0
   1e22a:	2800      	cmp	r0, #0
   1e22c:	f43f af3e 	beq.w	1e0ac <ProcessHashDrv+0x48>
   1e230:	4812      	ldr	r0, [pc, #72]	; (1e27c <ProcessHashDrv+0x218>)
   1e232:	f7fe f8bd 	bl	1c3b0 <CC_PalAbort>
   1e236:	e739      	b.n	1e0ac <ProcessHashDrv+0x48>
   1e238:	4e11      	ldr	r6, [pc, #68]	; (1e280 <ProcessHashDrv+0x21c>)
   1e23a:	4630      	mov	r0, r6
   1e23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e240:	4810      	ldr	r0, [pc, #64]	; (1e284 <ProcessHashDrv+0x220>)
   1e242:	f7fe f8b5 	bl	1c3b0 <CC_PalAbort>
   1e246:	4630      	mov	r0, r6
   1e248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e24c:	480e      	ldr	r0, [pc, #56]	; (1e288 <ProcessHashDrv+0x224>)
   1e24e:	f7fe f8af 	bl	1c3b0 <CC_PalAbort>
   1e252:	e7ce      	b.n	1e1f2 <ProcessHashDrv+0x18e>
   1e254:	2110      	movs	r1, #16
   1e256:	f104 0008 	add.w	r0, r4, #8
   1e25a:	f7fe ffe5 	bl	1d228 <CC_PalMemSetZeroPlat>
   1e25e:	e7bd      	b.n	1e1dc <ProcessHashDrv+0x178>
   1e260:	4e0a      	ldr	r6, [pc, #40]	; (1e28c <ProcessHashDrv+0x228>)
   1e262:	4630      	mov	r0, r6
   1e264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e268:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   1e26c:	e7c5      	b.n	1e1fa <ProcessHashDrv+0x196>
   1e26e:	bf00      	nop
   1e270:	20000840 	.word	0x20000840
   1e274:	5002b000 	.word	0x5002b000
   1e278:	00024244 	.word	0x00024244
   1e27c:	0002425c 	.word	0x0002425c
   1e280:	00f30001 	.word	0x00f30001
   1e284:	0002429c 	.word	0x0002429c
   1e288:	0002427c 	.word	0x0002427c
   1e28c:	00f30003 	.word	0x00f30003

0001e290 <FinishHashDrv>:
   1e290:	b398      	cbz	r0, 1e2fa <FinishHashDrv+0x6a>
   1e292:	b470      	push	{r4, r5, r6}
   1e294:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1e298:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1e29c:	ba26      	rev	r6, r4
   1e29e:	ba0d      	rev	r5, r1
   1e2a0:	ba14      	rev	r4, r2
   1e2a2:	ba19      	rev	r1, r3
   1e2a4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1e2a8:	ba12      	rev	r2, r2
   1e2aa:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1e2ae:	6182      	str	r2, [r0, #24]
   1e2b0:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1e2b4:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1e2b8:	ba1b      	rev	r3, r3
   1e2ba:	ba25      	rev	r5, r4
   1e2bc:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1e2c0:	ba14      	rev	r4, r2
   1e2c2:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1e2c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1e2c8:	ba12      	rev	r2, r2
   1e2ca:	ba09      	rev	r1, r1
   1e2cc:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1e2d0:	62c2      	str	r2, [r0, #44]	; 0x2c
   1e2d2:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1e2d6:	ba1b      	rev	r3, r3
   1e2d8:	ba25      	rev	r5, r4
   1e2da:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1e2de:	ba14      	rev	r4, r2
   1e2e0:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1e2e4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1e2e6:	ba12      	rev	r2, r2
   1e2e8:	ba09      	rev	r1, r1
   1e2ea:	ba1b      	rev	r3, r3
   1e2ec:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e2f0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e2f4:	2000      	movs	r0, #0
   1e2f6:	bc70      	pop	{r4, r5, r6}
   1e2f8:	4770      	bx	lr
   1e2fa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e2fe:	4770      	bx	lr

0001e300 <LoadAesKey>:
   1e300:	2800      	cmp	r0, #0
   1e302:	d046      	beq.n	1e392 <LoadAesKey+0x92>
   1e304:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e308:	2b00      	cmp	r3, #0
   1e30a:	d033      	beq.n	1e374 <LoadAesKey+0x74>
   1e30c:	2b03      	cmp	r3, #3
   1e30e:	b510      	push	{r4, lr}
   1e310:	d013      	beq.n	1e33a <LoadAesKey+0x3a>
   1e312:	4821      	ldr	r0, [pc, #132]	; (1e398 <LoadAesKey+0x98>)
   1e314:	4c21      	ldr	r4, [pc, #132]	; (1e39c <LoadAesKey+0x9c>)
   1e316:	6822      	ldr	r2, [r4, #0]
   1e318:	4b21      	ldr	r3, [pc, #132]	; (1e3a0 <LoadAesKey+0xa0>)
   1e31a:	6812      	ldr	r2, [r2, #0]
   1e31c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e320:	6822      	ldr	r2, [r4, #0]
   1e322:	6852      	ldr	r2, [r2, #4]
   1e324:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e328:	6822      	ldr	r2, [r4, #0]
   1e32a:	6892      	ldr	r2, [r2, #8]
   1e32c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e330:	6822      	ldr	r2, [r4, #0]
   1e332:	68d2      	ldr	r2, [r2, #12]
   1e334:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e338:	bd10      	pop	{r4, pc}
   1e33a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e33c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e33e:	4c17      	ldr	r4, [pc, #92]	; (1e39c <LoadAesKey+0x9c>)
   1e340:	f000 fb98 	bl	1ea74 <kmu_validate_kdr_slot_and_size>
   1e344:	2800      	cmp	r0, #0
   1e346:	d1e6      	bne.n	1e316 <LoadAesKey+0x16>
   1e348:	6822      	ldr	r2, [r4, #0]
   1e34a:	4b15      	ldr	r3, [pc, #84]	; (1e3a0 <LoadAesKey+0xa0>)
   1e34c:	6812      	ldr	r2, [r2, #0]
   1e34e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e352:	6822      	ldr	r2, [r4, #0]
   1e354:	6852      	ldr	r2, [r2, #4]
   1e356:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e35a:	6822      	ldr	r2, [r4, #0]
   1e35c:	6892      	ldr	r2, [r2, #8]
   1e35e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e362:	6822      	ldr	r2, [r4, #0]
   1e364:	68d2      	ldr	r2, [r2, #12]
   1e366:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e36a:	f000 fb8f 	bl	1ea8c <kmu_use_kdr_key>
   1e36e:	2800      	cmp	r0, #0
   1e370:	d1d1      	bne.n	1e316 <LoadAesKey+0x16>
   1e372:	bd10      	pop	{r4, pc}
   1e374:	4a0a      	ldr	r2, [pc, #40]	; (1e3a0 <LoadAesKey+0xa0>)
   1e376:	6901      	ldr	r1, [r0, #16]
   1e378:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   1e37c:	6941      	ldr	r1, [r0, #20]
   1e37e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   1e382:	6981      	ldr	r1, [r0, #24]
   1e384:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   1e388:	69c1      	ldr	r1, [r0, #28]
   1e38a:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   1e38e:	4618      	mov	r0, r3
   1e390:	4770      	bx	lr
   1e392:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1e396:	4770      	bx	lr
   1e398:	00f10009 	.word	0x00f10009
   1e39c:	20000830 	.word	0x20000830
   1e3a0:	5002b000 	.word	0x5002b000

0001e3a4 <InitAes.part.0>:
   1e3a4:	4a37      	ldr	r2, [pc, #220]	; (1e484 <InitAes.part.0+0xe0>)
   1e3a6:	b538      	push	{r3, r4, r5, lr}
   1e3a8:	4604      	mov	r4, r0
   1e3aa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e3ae:	2b00      	cmp	r3, #0
   1e3b0:	d1fb      	bne.n	1e3aa <InitAes.part.0+0x6>
   1e3b2:	4a34      	ldr	r2, [pc, #208]	; (1e484 <InitAes.part.0+0xe0>)
   1e3b4:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e3b8:	2b00      	cmp	r3, #0
   1e3ba:	d1fb      	bne.n	1e3b4 <InitAes.part.0+0x10>
   1e3bc:	4a31      	ldr	r2, [pc, #196]	; (1e484 <InitAes.part.0+0xe0>)
   1e3be:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1e3c2:	2b00      	cmp	r3, #0
   1e3c4:	d1fb      	bne.n	1e3be <InitAes.part.0+0x1a>
   1e3c6:	4a2f      	ldr	r2, [pc, #188]	; (1e484 <InitAes.part.0+0xe0>)
   1e3c8:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e3cc:	2b00      	cmp	r3, #0
   1e3ce:	d1fb      	bne.n	1e3c8 <InitAes.part.0+0x24>
   1e3d0:	4a2c      	ldr	r2, [pc, #176]	; (1e484 <InitAes.part.0+0xe0>)
   1e3d2:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1e3d6:	2b00      	cmp	r3, #0
   1e3d8:	d1fb      	bne.n	1e3d2 <InitAes.part.0+0x2e>
   1e3da:	4d2a      	ldr	r5, [pc, #168]	; (1e484 <InitAes.part.0+0xe0>)
   1e3dc:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1e3e0:	2b00      	cmp	r3, #0
   1e3e2:	d1fb      	bne.n	1e3dc <InitAes.part.0+0x38>
   1e3e4:	f04f 30ff 	mov.w	r0, #4294967295
   1e3e8:	f7fe fe8c 	bl	1d104 <CC_HalClearInterruptBit>
   1e3ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e3ee:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e3f2:	f023 0304 	bic.w	r3, r3, #4
   1e3f6:	2b03      	cmp	r3, #3
   1e3f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e3fa:	d039      	beq.n	1e470 <InitAes.part.0+0xcc>
   1e3fc:	2b01      	cmp	r3, #1
   1e3fe:	bf0c      	ite	eq
   1e400:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1e404:	f020 0020 	bicne.w	r0, r0, #32
   1e408:	f7fe fe8a 	bl	1d120 <CC_HalMaskInterrupt>
   1e40c:	4a1d      	ldr	r2, [pc, #116]	; (1e484 <InitAes.part.0+0xe0>)
   1e40e:	2301      	movs	r3, #1
   1e410:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   1e414:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e418:	2b00      	cmp	r3, #0
   1e41a:	d1fb      	bne.n	1e414 <InitAes.part.0+0x70>
   1e41c:	4a19      	ldr	r2, [pc, #100]	; (1e484 <InitAes.part.0+0xe0>)
   1e41e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e422:	2b00      	cmp	r3, #0
   1e424:	d1fb      	bne.n	1e41e <InitAes.part.0+0x7a>
   1e426:	4917      	ldr	r1, [pc, #92]	; (1e484 <InitAes.part.0+0xe0>)
   1e428:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1e42c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1e430:	2b00      	cmp	r3, #0
   1e432:	d1fb      	bne.n	1e42c <InitAes.part.0+0x88>
   1e434:	4a13      	ldr	r2, [pc, #76]	; (1e484 <InitAes.part.0+0xe0>)
   1e436:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e43a:	2b00      	cmp	r3, #0
   1e43c:	d1fb      	bne.n	1e436 <InitAes.part.0+0x92>
   1e43e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e440:	f022 0104 	bic.w	r1, r2, #4
   1e444:	2903      	cmp	r1, #3
   1e446:	bf18      	it	ne
   1e448:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1e44a:	490e      	ldr	r1, [pc, #56]	; (1e484 <InitAes.part.0+0xe0>)
   1e44c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1e450:	bf18      	it	ne
   1e452:	f003 0301 	andne.w	r3, r3, #1
   1e456:	f002 021c 	and.w	r2, r2, #28
   1e45a:	4313      	orrs	r3, r2
   1e45c:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   1e460:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e462:	2b07      	cmp	r3, #7
   1e464:	bf04      	itt	eq
   1e466:	2301      	moveq	r3, #1
   1e468:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1e46c:	2000      	movs	r0, #0
   1e46e:	bd38      	pop	{r3, r4, r5, pc}
   1e470:	2b01      	cmp	r3, #1
   1e472:	bf0c      	ite	eq
   1e474:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1e478:	f020 0010 	bicne.w	r0, r0, #16
   1e47c:	f7fe fe50 	bl	1d120 <CC_HalMaskInterrupt>
   1e480:	e7c4      	b.n	1e40c <InitAes.part.0+0x68>
   1e482:	bf00      	nop
   1e484:	5002b000 	.word	0x5002b000

0001e488 <ProcessAesDrv>:
   1e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e48c:	b085      	sub	sp, #20
   1e48e:	2900      	cmp	r1, #0
   1e490:	f000 80a6 	beq.w	1e5e0 <ProcessAesDrv+0x158>
   1e494:	4690      	mov	r8, r2
   1e496:	2a00      	cmp	r2, #0
   1e498:	f000 80a2 	beq.w	1e5e0 <ProcessAesDrv+0x158>
   1e49c:	4605      	mov	r5, r0
   1e49e:	2800      	cmp	r0, #0
   1e4a0:	f000 813f 	beq.w	1e722 <ProcessAesDrv+0x29a>
   1e4a4:	4699      	mov	r9, r3
   1e4a6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e4a8:	460e      	mov	r6, r1
   1e4aa:	2b00      	cmp	r3, #0
   1e4ac:	d151      	bne.n	1e552 <ProcessAesDrv+0xca>
   1e4ae:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1e4b2:	d253      	bcs.n	1e55c <ProcessAesDrv+0xd4>
   1e4b4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1e4b8:	2b04      	cmp	r3, #4
   1e4ba:	f000 8115 	beq.w	1e6e8 <ProcessAesDrv+0x260>
   1e4be:	2700      	movs	r7, #0
   1e4c0:	48a8      	ldr	r0, [pc, #672]	; (1e764 <ProcessAesDrv+0x2dc>)
   1e4c2:	f04f 31ff 	mov.w	r1, #4294967295
   1e4c6:	f7fe fec7 	bl	1d258 <CC_PalMutexLock>
   1e4ca:	2800      	cmp	r0, #0
   1e4cc:	f040 80eb 	bne.w	1e6a6 <ProcessAesDrv+0x21e>
   1e4d0:	2000      	movs	r0, #0
   1e4d2:	f7fe fef1 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e4d6:	2800      	cmp	r0, #0
   1e4d8:	f040 80ee 	bne.w	1e6b8 <ProcessAesDrv+0x230>
   1e4dc:	48a2      	ldr	r0, [pc, #648]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e4de:	2301      	movs	r3, #1
   1e4e0:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   1e4e4:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   1e4e8:	2c00      	cmp	r4, #0
   1e4ea:	d1fb      	bne.n	1e4e4 <ProcessAesDrv+0x5c>
   1e4ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e4ee:	2b03      	cmp	r3, #3
   1e4f0:	dc39      	bgt.n	1e566 <ProcessAesDrv+0xde>
   1e4f2:	2b00      	cmp	r3, #0
   1e4f4:	da3a      	bge.n	1e56c <ProcessAesDrv+0xe4>
   1e4f6:	4c9d      	ldr	r4, [pc, #628]	; (1e76c <ProcessAesDrv+0x2e4>)
   1e4f8:	4a9b      	ldr	r2, [pc, #620]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e4fa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e4fe:	2b00      	cmp	r3, #0
   1e500:	d1fb      	bne.n	1e4fa <ProcessAesDrv+0x72>
   1e502:	2f00      	cmp	r7, #0
   1e504:	f040 80e7 	bne.w	1e6d6 <ProcessAesDrv+0x24e>
   1e508:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e50a:	f023 0304 	bic.w	r3, r3, #4
   1e50e:	2b03      	cmp	r3, #3
   1e510:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e512:	d059      	beq.n	1e5c8 <ProcessAesDrv+0x140>
   1e514:	2b01      	cmp	r3, #1
   1e516:	4b94      	ldr	r3, [pc, #592]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e518:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e51c:	bf0c      	ite	eq
   1e51e:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1e522:	f040 0020 	orrne.w	r0, r0, #32
   1e526:	f7fe fdfb 	bl	1d120 <CC_HalMaskInterrupt>
   1e52a:	4b8f      	ldr	r3, [pc, #572]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e52c:	2200      	movs	r2, #0
   1e52e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1e532:	2001      	movs	r0, #1
   1e534:	f7fe fec0 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e538:	2800      	cmp	r0, #0
   1e53a:	f040 80c8 	bne.w	1e6ce <ProcessAesDrv+0x246>
   1e53e:	4889      	ldr	r0, [pc, #548]	; (1e764 <ProcessAesDrv+0x2dc>)
   1e540:	f7fe fe92 	bl	1d268 <CC_PalMutexUnlock>
   1e544:	2800      	cmp	r0, #0
   1e546:	f040 80bb 	bne.w	1e6c0 <ProcessAesDrv+0x238>
   1e54a:	4620      	mov	r0, r4
   1e54c:	b005      	add	sp, #20
   1e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e552:	2b01      	cmp	r3, #1
   1e554:	d1ae      	bne.n	1e4b4 <ProcessAesDrv+0x2c>
   1e556:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1e55a:	d3ab      	bcc.n	1e4b4 <ProcessAesDrv+0x2c>
   1e55c:	4c84      	ldr	r4, [pc, #528]	; (1e770 <ProcessAesDrv+0x2e8>)
   1e55e:	4620      	mov	r0, r4
   1e560:	b005      	add	sp, #20
   1e562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e566:	3b06      	subs	r3, #6
   1e568:	2b01      	cmp	r3, #1
   1e56a:	d8c4      	bhi.n	1e4f6 <ProcessAesDrv+0x6e>
   1e56c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e56e:	2b01      	cmp	r3, #1
   1e570:	f200 80d5 	bhi.w	1e71e <ProcessAesDrv+0x296>
   1e574:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e576:	2b01      	cmp	r3, #1
   1e578:	d837      	bhi.n	1e5ea <ProcessAesDrv+0x162>
   1e57a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e57c:	2b01      	cmp	r3, #1
   1e57e:	f200 8126 	bhi.w	1e7ce <ProcessAesDrv+0x346>
   1e582:	4628      	mov	r0, r5
   1e584:	f7ff ff0e 	bl	1e3a4 <InitAes.part.0>
   1e588:	4604      	mov	r4, r0
   1e58a:	2800      	cmp	r0, #0
   1e58c:	d1b4      	bne.n	1e4f8 <ProcessAesDrv+0x70>
   1e58e:	4628      	mov	r0, r5
   1e590:	f7ff feb6 	bl	1e300 <LoadAesKey>
   1e594:	4604      	mov	r4, r0
   1e596:	2800      	cmp	r0, #0
   1e598:	d1ae      	bne.n	1e4f8 <ProcessAesDrv+0x70>
   1e59a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e59c:	2b07      	cmp	r3, #7
   1e59e:	d8aa      	bhi.n	1e4f6 <ProcessAesDrv+0x6e>
   1e5a0:	a201      	add	r2, pc, #4	; (adr r2, 1e5a8 <ProcessAesDrv+0x120>)
   1e5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e5a6:	bf00      	nop
   1e5a8:	0001e60b 	.word	0x0001e60b
   1e5ac:	0001e5ef 	.word	0x0001e5ef
   1e5b0:	0001e795 	.word	0x0001e795
   1e5b4:	0001e5ef 	.word	0x0001e5ef
   1e5b8:	0001e4f7 	.word	0x0001e4f7
   1e5bc:	0001e4f7 	.word	0x0001e4f7
   1e5c0:	0001e795 	.word	0x0001e795
   1e5c4:	0001e5ef 	.word	0x0001e5ef
   1e5c8:	2b01      	cmp	r3, #1
   1e5ca:	4b67      	ldr	r3, [pc, #412]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e5cc:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e5d0:	bf0c      	ite	eq
   1e5d2:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1e5d6:	f040 0010 	orrne.w	r0, r0, #16
   1e5da:	f7fe fda1 	bl	1d120 <CC_HalMaskInterrupt>
   1e5de:	e7a4      	b.n	1e52a <ProcessAesDrv+0xa2>
   1e5e0:	4c64      	ldr	r4, [pc, #400]	; (1e774 <ProcessAesDrv+0x2ec>)
   1e5e2:	4620      	mov	r0, r4
   1e5e4:	b005      	add	sp, #20
   1e5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5ea:	4c63      	ldr	r4, [pc, #396]	; (1e778 <ProcessAesDrv+0x2f0>)
   1e5ec:	e784      	b.n	1e4f8 <ProcessAesDrv+0x70>
   1e5ee:	4b5e      	ldr	r3, [pc, #376]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e5f0:	682a      	ldr	r2, [r5, #0]
   1e5f2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1e5f6:	686a      	ldr	r2, [r5, #4]
   1e5f8:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1e5fc:	68aa      	ldr	r2, [r5, #8]
   1e5fe:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1e602:	68ea      	ldr	r2, [r5, #12]
   1e604:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1e608:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e60a:	6832      	ldr	r2, [r6, #0]
   1e60c:	f023 0304 	bic.w	r3, r3, #4
   1e610:	2b03      	cmp	r3, #3
   1e612:	d00d      	beq.n	1e630 <ProcessAesDrv+0x1a8>
   1e614:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e616:	f8d8 1000 	ldr.w	r1, [r8]
   1e61a:	2b01      	cmp	r3, #1
   1e61c:	4b52      	ldr	r3, [pc, #328]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e61e:	bf0b      	itete	eq
   1e620:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   1e624:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   1e628:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1e62c:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   1e630:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e632:	2b01      	cmp	r3, #1
   1e634:	4b4c      	ldr	r3, [pc, #304]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e636:	bf0b      	itete	eq
   1e638:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1e63c:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   1e640:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   1e644:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   1e648:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e64a:	f023 0304 	bic.w	r3, r3, #4
   1e64e:	2b03      	cmp	r3, #3
   1e650:	d06a      	beq.n	1e728 <ProcessAesDrv+0x2a0>
   1e652:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e654:	2b01      	cmp	r3, #1
   1e656:	bf0c      	ite	eq
   1e658:	2080      	moveq	r0, #128	; 0x80
   1e65a:	2020      	movne	r0, #32
   1e65c:	f7fe fd66 	bl	1d12c <CC_HalWaitInterrupt>
   1e660:	4604      	mov	r4, r0
   1e662:	2800      	cmp	r0, #0
   1e664:	f47f af48 	bne.w	1e4f8 <ProcessAesDrv+0x70>
   1e668:	4b3f      	ldr	r3, [pc, #252]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e66a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1e66e:	2c00      	cmp	r4, #0
   1e670:	d1fb      	bne.n	1e66a <ProcessAesDrv+0x1e2>
   1e672:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e674:	3b01      	subs	r3, #1
   1e676:	2b06      	cmp	r3, #6
   1e678:	d812      	bhi.n	1e6a0 <ProcessAesDrv+0x218>
   1e67a:	e8df f003 	tbb	[pc, r3]
   1e67e:	9a04      	.short	0x9a04
   1e680:	9a111104 	.word	0x9a111104
   1e684:	04          	.byte	0x04
   1e685:	00          	.byte	0x00
   1e686:	4b38      	ldr	r3, [pc, #224]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e688:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1e68c:	602a      	str	r2, [r5, #0]
   1e68e:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1e692:	606a      	str	r2, [r5, #4]
   1e694:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1e698:	60aa      	str	r2, [r5, #8]
   1e69a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1e69e:	60eb      	str	r3, [r5, #12]
   1e6a0:	2301      	movs	r3, #1
   1e6a2:	65ab      	str	r3, [r5, #88]	; 0x58
   1e6a4:	e728      	b.n	1e4f8 <ProcessAesDrv+0x70>
   1e6a6:	4835      	ldr	r0, [pc, #212]	; (1e77c <ProcessAesDrv+0x2f4>)
   1e6a8:	f7fd fe82 	bl	1c3b0 <CC_PalAbort>
   1e6ac:	2000      	movs	r0, #0
   1e6ae:	f7fe fe03 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e6b2:	2800      	cmp	r0, #0
   1e6b4:	f43f af12 	beq.w	1e4dc <ProcessAesDrv+0x54>
   1e6b8:	4831      	ldr	r0, [pc, #196]	; (1e780 <ProcessAesDrv+0x2f8>)
   1e6ba:	f7fd fe79 	bl	1c3b0 <CC_PalAbort>
   1e6be:	e70d      	b.n	1e4dc <ProcessAesDrv+0x54>
   1e6c0:	4830      	ldr	r0, [pc, #192]	; (1e784 <ProcessAesDrv+0x2fc>)
   1e6c2:	f7fd fe75 	bl	1c3b0 <CC_PalAbort>
   1e6c6:	4620      	mov	r0, r4
   1e6c8:	b005      	add	sp, #20
   1e6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6ce:	482e      	ldr	r0, [pc, #184]	; (1e788 <ProcessAesDrv+0x300>)
   1e6d0:	f7fd fe6e 	bl	1c3b0 <CC_PalAbort>
   1e6d4:	e733      	b.n	1e53e <ProcessAesDrv+0xb6>
   1e6d6:	2304      	movs	r3, #4
   1e6d8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1e6dc:	2120      	movs	r1, #32
   1e6de:	f105 0010 	add.w	r0, r5, #16
   1e6e2:	f7fe fda1 	bl	1d228 <CC_PalMemSetZeroPlat>
   1e6e6:	e70f      	b.n	1e508 <ProcessAesDrv+0x80>
   1e6e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1e6ea:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1e6ec:	f000 f9b6 	bl	1ea5c <kmu_validate_slot_and_size>
   1e6f0:	b998      	cbnz	r0, 1e71a <ProcessAesDrv+0x292>
   1e6f2:	4f26      	ldr	r7, [pc, #152]	; (1e78c <ProcessAesDrv+0x304>)
   1e6f4:	4c1c      	ldr	r4, [pc, #112]	; (1e768 <ProcessAesDrv+0x2e0>)
   1e6f6:	683b      	ldr	r3, [r7, #0]
   1e6f8:	681b      	ldr	r3, [r3, #0]
   1e6fa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1e6fe:	683b      	ldr	r3, [r7, #0]
   1e700:	685b      	ldr	r3, [r3, #4]
   1e702:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1e706:	683b      	ldr	r3, [r7, #0]
   1e708:	689b      	ldr	r3, [r3, #8]
   1e70a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1e70e:	683b      	ldr	r3, [r7, #0]
   1e710:	68db      	ldr	r3, [r3, #12]
   1e712:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1e716:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1e718:	b161      	cbz	r1, 1e734 <ProcessAesDrv+0x2ac>
   1e71a:	2701      	movs	r7, #1
   1e71c:	e6d0      	b.n	1e4c0 <ProcessAesDrv+0x38>
   1e71e:	4c1c      	ldr	r4, [pc, #112]	; (1e790 <ProcessAesDrv+0x308>)
   1e720:	e6ea      	b.n	1e4f8 <ProcessAesDrv+0x70>
   1e722:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1e726:	e710      	b.n	1e54a <ProcessAesDrv+0xc2>
   1e728:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e72a:	2b01      	cmp	r3, #1
   1e72c:	bf0c      	ite	eq
   1e72e:	2040      	moveq	r0, #64	; 0x40
   1e730:	2010      	movne	r0, #16
   1e732:	e793      	b.n	1e65c <ProcessAesDrv+0x1d4>
   1e734:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1e736:	9301      	str	r3, [sp, #4]
   1e738:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1e73a:	9300      	str	r3, [sp, #0]
   1e73c:	f105 0a10 	add.w	sl, r5, #16
   1e740:	f04f 0b10 	mov.w	fp, #16
   1e744:	f8cd a008 	str.w	sl, [sp, #8]
   1e748:	f8cd b00c 	str.w	fp, [sp, #12]
   1e74c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1e750:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1e752:	f000 f9a5 	bl	1eaa0 <kmu_derive_cmac>
   1e756:	2800      	cmp	r0, #0
   1e758:	d13b      	bne.n	1e7d2 <ProcessAesDrv+0x34a>
   1e75a:	2300      	movs	r3, #0
   1e75c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1e760:	e7db      	b.n	1e71a <ProcessAesDrv+0x292>
   1e762:	bf00      	nop
   1e764:	20000840 	.word	0x20000840
   1e768:	5002b000 	.word	0x5002b000
   1e76c:	00f10001 	.word	0x00f10001
   1e770:	00f10005 	.word	0x00f10005
   1e774:	00f1000b 	.word	0x00f1000b
   1e778:	00f10003 	.word	0x00f10003
   1e77c:	00024244 	.word	0x00024244
   1e780:	0002425c 	.word	0x0002425c
   1e784:	0002429c 	.word	0x0002429c
   1e788:	0002427c 	.word	0x0002427c
   1e78c:	20000830 	.word	0x20000830
   1e790:	00f10002 	.word	0x00f10002
   1e794:	4b19      	ldr	r3, [pc, #100]	; (1e7fc <ProcessAesDrv+0x374>)
   1e796:	682a      	ldr	r2, [r5, #0]
   1e798:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1e79c:	686a      	ldr	r2, [r5, #4]
   1e79e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1e7a2:	68aa      	ldr	r2, [r5, #8]
   1e7a4:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1e7a8:	68ea      	ldr	r2, [r5, #12]
   1e7aa:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1e7ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e7b0:	e72b      	b.n	1e60a <ProcessAesDrv+0x182>
   1e7b2:	4b12      	ldr	r3, [pc, #72]	; (1e7fc <ProcessAesDrv+0x374>)
   1e7b4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1e7b8:	602a      	str	r2, [r5, #0]
   1e7ba:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1e7be:	606a      	str	r2, [r5, #4]
   1e7c0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1e7c4:	60aa      	str	r2, [r5, #8]
   1e7c6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1e7ca:	60eb      	str	r3, [r5, #12]
   1e7cc:	e768      	b.n	1e6a0 <ProcessAesDrv+0x218>
   1e7ce:	4c0c      	ldr	r4, [pc, #48]	; (1e800 <ProcessAesDrv+0x378>)
   1e7d0:	e692      	b.n	1e4f8 <ProcessAesDrv+0x70>
   1e7d2:	683b      	ldr	r3, [r7, #0]
   1e7d4:	681b      	ldr	r3, [r3, #0]
   1e7d6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1e7da:	683b      	ldr	r3, [r7, #0]
   1e7dc:	685b      	ldr	r3, [r3, #4]
   1e7de:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1e7e2:	683b      	ldr	r3, [r7, #0]
   1e7e4:	689b      	ldr	r3, [r3, #8]
   1e7e6:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1e7ea:	683b      	ldr	r3, [r7, #0]
   1e7ec:	68db      	ldr	r3, [r3, #12]
   1e7ee:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1e7f2:	4659      	mov	r1, fp
   1e7f4:	4650      	mov	r0, sl
   1e7f6:	f7fe fd17 	bl	1d228 <CC_PalMemSetZeroPlat>
   1e7fa:	e7ae      	b.n	1e75a <ProcessAesDrv+0x2d2>
   1e7fc:	5002b000 	.word	0x5002b000
   1e800:	00f10004 	.word	0x00f10004

0001e804 <FinishAesDrv>:
   1e804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e808:	b301      	cbz	r1, 1e84c <FinishAesDrv+0x48>
   1e80a:	b1fa      	cbz	r2, 1e84c <FinishAesDrv+0x48>
   1e80c:	4604      	mov	r4, r0
   1e80e:	2800      	cmp	r0, #0
   1e810:	d07c      	beq.n	1e90c <FinishAesDrv+0x108>
   1e812:	461d      	mov	r5, r3
   1e814:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1e816:	2b07      	cmp	r3, #7
   1e818:	460e      	mov	r6, r1
   1e81a:	d01b      	beq.n	1e854 <FinishAesDrv+0x50>
   1e81c:	b95d      	cbnz	r5, 1e836 <FinishAesDrv+0x32>
   1e81e:	2b03      	cmp	r3, #3
   1e820:	d110      	bne.n	1e844 <FinishAesDrv+0x40>
   1e822:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1e824:	b973      	cbnz	r3, 1e844 <FinishAesDrv+0x40>
   1e826:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1e82a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1e82e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1e832:	600b      	str	r3, [r1, #0]
   1e834:	2510      	movs	r5, #16
   1e836:	462b      	mov	r3, r5
   1e838:	4631      	mov	r1, r6
   1e83a:	4620      	mov	r0, r4
   1e83c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1e840:	f7ff be22 	b.w	1e488 <ProcessAesDrv>
   1e844:	462f      	mov	r7, r5
   1e846:	4638      	mov	r0, r7
   1e848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e84c:	4f77      	ldr	r7, [pc, #476]	; (1ea2c <FinishAesDrv+0x228>)
   1e84e:	4638      	mov	r0, r7
   1e850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e854:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e856:	2b00      	cmp	r3, #0
   1e858:	d15b      	bne.n	1e912 <FinishAesDrv+0x10e>
   1e85a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1e85e:	d25d      	bcs.n	1e91c <FinishAesDrv+0x118>
   1e860:	b915      	cbnz	r5, 1e868 <FinishAesDrv+0x64>
   1e862:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1e864:	2b00      	cmp	r3, #0
   1e866:	d159      	bne.n	1e91c <FinishAesDrv+0x118>
   1e868:	4871      	ldr	r0, [pc, #452]	; (1ea30 <FinishAesDrv+0x22c>)
   1e86a:	f04f 31ff 	mov.w	r1, #4294967295
   1e86e:	f7fe fcf3 	bl	1d258 <CC_PalMutexLock>
   1e872:	2800      	cmp	r0, #0
   1e874:	f040 80b8 	bne.w	1e9e8 <FinishAesDrv+0x1e4>
   1e878:	2000      	movs	r0, #0
   1e87a:	f7fe fd1d 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e87e:	2800      	cmp	r0, #0
   1e880:	f040 80ae 	bne.w	1e9e0 <FinishAesDrv+0x1dc>
   1e884:	4a6b      	ldr	r2, [pc, #428]	; (1ea34 <FinishAesDrv+0x230>)
   1e886:	2301      	movs	r3, #1
   1e888:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1e88c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e890:	2b00      	cmp	r3, #0
   1e892:	d1fb      	bne.n	1e88c <FinishAesDrv+0x88>
   1e894:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e896:	2b03      	cmp	r3, #3
   1e898:	dd20      	ble.n	1e8dc <FinishAesDrv+0xd8>
   1e89a:	3b06      	subs	r3, #6
   1e89c:	2b01      	cmp	r3, #1
   1e89e:	d81f      	bhi.n	1e8e0 <FinishAesDrv+0xdc>
   1e8a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e8a2:	2b01      	cmp	r3, #1
   1e8a4:	d83c      	bhi.n	1e920 <FinishAesDrv+0x11c>
   1e8a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e8a8:	2b01      	cmp	r3, #1
   1e8aa:	f200 80a5 	bhi.w	1e9f8 <FinishAesDrv+0x1f4>
   1e8ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1e8b0:	2b01      	cmp	r3, #1
   1e8b2:	f200 80a3 	bhi.w	1e9fc <FinishAesDrv+0x1f8>
   1e8b6:	4620      	mov	r0, r4
   1e8b8:	f7ff fd74 	bl	1e3a4 <InitAes.part.0>
   1e8bc:	4607      	mov	r7, r0
   1e8be:	b980      	cbnz	r0, 1e8e2 <FinishAesDrv+0xde>
   1e8c0:	4620      	mov	r0, r4
   1e8c2:	f7ff fd1d 	bl	1e300 <LoadAesKey>
   1e8c6:	4607      	mov	r7, r0
   1e8c8:	b958      	cbnz	r0, 1e8e2 <FinishAesDrv+0xde>
   1e8ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e8cc:	2b07      	cmp	r3, #7
   1e8ce:	d807      	bhi.n	1e8e0 <FinishAesDrv+0xdc>
   1e8d0:	e8df f003 	tbb	[pc, r3]
   1e8d4:	285c2835 	.word	0x285c2835
   1e8d8:	285c0606 	.word	0x285c0606
   1e8dc:	2b00      	cmp	r3, #0
   1e8de:	dadf      	bge.n	1e8a0 <FinishAesDrv+0x9c>
   1e8e0:	4f55      	ldr	r7, [pc, #340]	; (1ea38 <FinishAesDrv+0x234>)
   1e8e2:	4a54      	ldr	r2, [pc, #336]	; (1ea34 <FinishAesDrv+0x230>)
   1e8e4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e8e8:	2b00      	cmp	r3, #0
   1e8ea:	d1fb      	bne.n	1e8e4 <FinishAesDrv+0xe0>
   1e8ec:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1e8f0:	2001      	movs	r0, #1
   1e8f2:	f7fe fce1 	bl	1d2b8 <CC_PalPowerSaveModeSelect>
   1e8f6:	2800      	cmp	r0, #0
   1e8f8:	d17a      	bne.n	1e9f0 <FinishAesDrv+0x1ec>
   1e8fa:	484d      	ldr	r0, [pc, #308]	; (1ea30 <FinishAesDrv+0x22c>)
   1e8fc:	f7fe fcb4 	bl	1d268 <CC_PalMutexUnlock>
   1e900:	2800      	cmp	r0, #0
   1e902:	d0a0      	beq.n	1e846 <FinishAesDrv+0x42>
   1e904:	484d      	ldr	r0, [pc, #308]	; (1ea3c <FinishAesDrv+0x238>)
   1e906:	f7fd fd53 	bl	1c3b0 <CC_PalAbort>
   1e90a:	e79c      	b.n	1e846 <FinishAesDrv+0x42>
   1e90c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1e910:	e799      	b.n	1e846 <FinishAesDrv+0x42>
   1e912:	2b01      	cmp	r3, #1
   1e914:	d1a4      	bne.n	1e860 <FinishAesDrv+0x5c>
   1e916:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1e91a:	d3a1      	bcc.n	1e860 <FinishAesDrv+0x5c>
   1e91c:	4f48      	ldr	r7, [pc, #288]	; (1ea40 <FinishAesDrv+0x23c>)
   1e91e:	e792      	b.n	1e846 <FinishAesDrv+0x42>
   1e920:	4f48      	ldr	r7, [pc, #288]	; (1ea44 <FinishAesDrv+0x240>)
   1e922:	e7de      	b.n	1e8e2 <FinishAesDrv+0xde>
   1e924:	4b43      	ldr	r3, [pc, #268]	; (1ea34 <FinishAesDrv+0x230>)
   1e926:	6822      	ldr	r2, [r4, #0]
   1e928:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1e92c:	6862      	ldr	r2, [r4, #4]
   1e92e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1e932:	68a2      	ldr	r2, [r4, #8]
   1e934:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1e938:	68e2      	ldr	r2, [r4, #12]
   1e93a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1e93e:	4b3d      	ldr	r3, [pc, #244]	; (1ea34 <FinishAesDrv+0x230>)
   1e940:	2201      	movs	r2, #1
   1e942:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1e946:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1e94a:	2d00      	cmp	r5, #0
   1e94c:	d158      	bne.n	1ea00 <FinishAesDrv+0x1fc>
   1e94e:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1e950:	b909      	cbnz	r1, 1e956 <FinishAesDrv+0x152>
   1e952:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1e956:	4b37      	ldr	r3, [pc, #220]	; (1ea34 <FinishAesDrv+0x230>)
   1e958:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1e95c:	2f00      	cmp	r7, #0
   1e95e:	d1fb      	bne.n	1e958 <FinishAesDrv+0x154>
   1e960:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e962:	3b01      	subs	r3, #1
   1e964:	2b06      	cmp	r3, #6
   1e966:	d8bc      	bhi.n	1e8e2 <FinishAesDrv+0xde>
   1e968:	a201      	add	r2, pc, #4	; (adr r2, 1e970 <FinishAesDrv+0x16c>)
   1e96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e96e:	bf00      	nop
   1e970:	0001e9a9 	.word	0x0001e9a9
   1e974:	0001e9c5 	.word	0x0001e9c5
   1e978:	0001e9a9 	.word	0x0001e9a9
   1e97c:	0001e8e3 	.word	0x0001e8e3
   1e980:	0001e8e3 	.word	0x0001e8e3
   1e984:	0001e9c5 	.word	0x0001e9c5
   1e988:	0001e9a9 	.word	0x0001e9a9
   1e98c:	4b29      	ldr	r3, [pc, #164]	; (1ea34 <FinishAesDrv+0x230>)
   1e98e:	6822      	ldr	r2, [r4, #0]
   1e990:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1e994:	6862      	ldr	r2, [r4, #4]
   1e996:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1e99a:	68a2      	ldr	r2, [r4, #8]
   1e99c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1e9a0:	68e2      	ldr	r2, [r4, #12]
   1e9a2:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1e9a6:	e7ca      	b.n	1e93e <FinishAesDrv+0x13a>
   1e9a8:	4b22      	ldr	r3, [pc, #136]	; (1ea34 <FinishAesDrv+0x230>)
   1e9aa:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1e9ae:	6022      	str	r2, [r4, #0]
   1e9b0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1e9b4:	6062      	str	r2, [r4, #4]
   1e9b6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1e9ba:	60a2      	str	r2, [r4, #8]
   1e9bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1e9c0:	60e3      	str	r3, [r4, #12]
   1e9c2:	e78e      	b.n	1e8e2 <FinishAesDrv+0xde>
   1e9c4:	4b1b      	ldr	r3, [pc, #108]	; (1ea34 <FinishAesDrv+0x230>)
   1e9c6:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1e9ca:	6022      	str	r2, [r4, #0]
   1e9cc:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1e9d0:	6062      	str	r2, [r4, #4]
   1e9d2:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1e9d6:	60a2      	str	r2, [r4, #8]
   1e9d8:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1e9dc:	60e3      	str	r3, [r4, #12]
   1e9de:	e780      	b.n	1e8e2 <FinishAesDrv+0xde>
   1e9e0:	4819      	ldr	r0, [pc, #100]	; (1ea48 <FinishAesDrv+0x244>)
   1e9e2:	f7fd fce5 	bl	1c3b0 <CC_PalAbort>
   1e9e6:	e74d      	b.n	1e884 <FinishAesDrv+0x80>
   1e9e8:	4818      	ldr	r0, [pc, #96]	; (1ea4c <FinishAesDrv+0x248>)
   1e9ea:	f7fd fce1 	bl	1c3b0 <CC_PalAbort>
   1e9ee:	e743      	b.n	1e878 <FinishAesDrv+0x74>
   1e9f0:	4817      	ldr	r0, [pc, #92]	; (1ea50 <FinishAesDrv+0x24c>)
   1e9f2:	f7fd fcdd 	bl	1c3b0 <CC_PalAbort>
   1e9f6:	e780      	b.n	1e8fa <FinishAesDrv+0xf6>
   1e9f8:	4f16      	ldr	r7, [pc, #88]	; (1ea54 <FinishAesDrv+0x250>)
   1e9fa:	e772      	b.n	1e8e2 <FinishAesDrv+0xde>
   1e9fc:	4f16      	ldr	r7, [pc, #88]	; (1ea58 <FinishAesDrv+0x254>)
   1e9fe:	e770      	b.n	1e8e2 <FinishAesDrv+0xde>
   1ea00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1ea02:	6832      	ldr	r2, [r6, #0]
   1ea04:	2901      	cmp	r1, #1
   1ea06:	d00a      	beq.n	1ea1e <FinishAesDrv+0x21a>
   1ea08:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   1ea0c:	2010      	movs	r0, #16
   1ea0e:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1ea12:	f7fe fb8b 	bl	1d12c <CC_HalWaitInterrupt>
   1ea16:	4607      	mov	r7, r0
   1ea18:	2800      	cmp	r0, #0
   1ea1a:	d09c      	beq.n	1e956 <FinishAesDrv+0x152>
   1ea1c:	e761      	b.n	1e8e2 <FinishAesDrv+0xde>
   1ea1e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1ea22:	2040      	movs	r0, #64	; 0x40
   1ea24:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1ea28:	e7f3      	b.n	1ea12 <FinishAesDrv+0x20e>
   1ea2a:	bf00      	nop
   1ea2c:	00f1000b 	.word	0x00f1000b
   1ea30:	20000840 	.word	0x20000840
   1ea34:	5002b000 	.word	0x5002b000
   1ea38:	00f10001 	.word	0x00f10001
   1ea3c:	0002429c 	.word	0x0002429c
   1ea40:	00f10005 	.word	0x00f10005
   1ea44:	00f10002 	.word	0x00f10002
   1ea48:	0002425c 	.word	0x0002425c
   1ea4c:	00024244 	.word	0x00024244
   1ea50:	0002427c 	.word	0x0002427c
   1ea54:	00f10003 	.word	0x00f10003
   1ea58:	00f10004 	.word	0x00f10004

0001ea5c <kmu_validate_slot_and_size>:
   1ea5c:	b921      	cbnz	r1, 1ea68 <kmu_validate_slot_and_size+0xc>
   1ea5e:	4b03      	ldr	r3, [pc, #12]	; (1ea6c <kmu_validate_slot_and_size+0x10>)
   1ea60:	2800      	cmp	r0, #0
   1ea62:	bf18      	it	ne
   1ea64:	4618      	movne	r0, r3
   1ea66:	4770      	bx	lr
   1ea68:	4801      	ldr	r0, [pc, #4]	; (1ea70 <kmu_validate_slot_and_size+0x14>)
   1ea6a:	4770      	bx	lr
   1ea6c:	00f70001 	.word	0x00f70001
   1ea70:	00f70003 	.word	0x00f70003

0001ea74 <kmu_validate_kdr_slot_and_size>:
   1ea74:	b921      	cbnz	r1, 1ea80 <kmu_validate_kdr_slot_and_size+0xc>
   1ea76:	4b03      	ldr	r3, [pc, #12]	; (1ea84 <kmu_validate_kdr_slot_and_size+0x10>)
   1ea78:	2800      	cmp	r0, #0
   1ea7a:	bf18      	it	ne
   1ea7c:	4618      	movne	r0, r3
   1ea7e:	4770      	bx	lr
   1ea80:	4801      	ldr	r0, [pc, #4]	; (1ea88 <kmu_validate_kdr_slot_and_size+0x14>)
   1ea82:	4770      	bx	lr
   1ea84:	00f70001 	.word	0x00f70001
   1ea88:	00f70003 	.word	0x00f70003

0001ea8c <kmu_use_kdr_key>:
   1ea8c:	4b03      	ldr	r3, [pc, #12]	; (1ea9c <kmu_use_kdr_key+0x10>)
   1ea8e:	2000      	movs	r0, #0
   1ea90:	2201      	movs	r2, #1
   1ea92:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1ea96:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1ea9a:	4770      	bx	lr
   1ea9c:	5002b000 	.word	0x5002b000

0001eaa0 <kmu_derive_cmac>:
   1eaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eaa4:	b0cc      	sub	sp, #304	; 0x130
   1eaa6:	2400      	movs	r4, #0
   1eaa8:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1eaaa:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1eaae:	4681      	mov	r9, r0
   1eab0:	460f      	mov	r7, r1
   1eab2:	4616      	mov	r6, r2
   1eab4:	4621      	mov	r1, r4
   1eab6:	2274      	movs	r2, #116	; 0x74
   1eab8:	a80e      	add	r0, sp, #56	; 0x38
   1eaba:	469a      	mov	sl, r3
   1eabc:	f004 fc68 	bl	23390 <memset>
   1eac0:	2280      	movs	r2, #128	; 0x80
   1eac2:	4621      	mov	r1, r4
   1eac4:	a82c      	add	r0, sp, #176	; 0xb0
   1eac6:	942b      	str	r4, [sp, #172]	; 0xac
   1eac8:	f004 fc62 	bl	23390 <memset>
   1eacc:	2384      	movs	r3, #132	; 0x84
   1eace:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1ead2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1ead6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1eada:	9305      	str	r3, [sp, #20]
   1eadc:	d85e      	bhi.n	1eb9c <kmu_derive_cmac+0xfc>
   1eade:	ab05      	add	r3, sp, #20
   1eae0:	4630      	mov	r0, r6
   1eae2:	ae2b      	add	r6, sp, #172	; 0xac
   1eae4:	9301      	str	r3, [sp, #4]
   1eae6:	9502      	str	r5, [sp, #8]
   1eae8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1eaec:	4651      	mov	r1, sl
   1eaee:	9600      	str	r6, [sp, #0]
   1eaf0:	f000 f864 	bl	1ebbc <UtilCmacBuildDataForDerivation>
   1eaf4:	2800      	cmp	r0, #0
   1eaf6:	d14c      	bne.n	1eb92 <kmu_derive_cmac+0xf2>
   1eaf8:	2303      	movs	r3, #3
   1eafa:	f88d 3013 	strb.w	r3, [sp, #19]
   1eafe:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1eb02:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1eb06:	2307      	movs	r3, #7
   1eb08:	2200      	movs	r2, #0
   1eb0a:	901c      	str	r0, [sp, #112]	; 0x70
   1eb0c:	2110      	movs	r1, #16
   1eb0e:	a80e      	add	r0, sp, #56	; 0x38
   1eb10:	931b      	str	r3, [sp, #108]	; 0x6c
   1eb12:	2401      	movs	r4, #1
   1eb14:	2301      	movs	r3, #1
   1eb16:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1eb1a:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1eb1e:	971a      	str	r7, [sp, #104]	; 0x68
   1eb20:	9426      	str	r4, [sp, #152]	; 0x98
   1eb22:	f10d 0920 	add.w	r9, sp, #32
   1eb26:	f7fe fb7f 	bl	1d228 <CC_PalMemSetZeroPlat>
   1eb2a:	2210      	movs	r2, #16
   1eb2c:	9200      	str	r2, [sp, #0]
   1eb2e:	9905      	ldr	r1, [sp, #20]
   1eb30:	f8cd 9004 	str.w	r9, [sp, #4]
   1eb34:	ab0a      	add	r3, sp, #40	; 0x28
   1eb36:	4630      	mov	r0, r6
   1eb38:	aa06      	add	r2, sp, #24
   1eb3a:	f7ff fa35 	bl	1dfa8 <SetDataBuffersInfo>
   1eb3e:	4607      	mov	r7, r0
   1eb40:	b170      	cbz	r0, 1eb60 <kmu_derive_cmac+0xc0>
   1eb42:	e01d      	b.n	1eb80 <kmu_derive_cmac+0xe0>
   1eb44:	a90e      	add	r1, sp, #56	; 0x38
   1eb46:	eb08 0007 	add.w	r0, r8, r7
   1eb4a:	f7fe fb69 	bl	1d220 <CC_PalMemCopyPlat>
   1eb4e:	2110      	movs	r1, #16
   1eb50:	a80e      	add	r0, sp, #56	; 0x38
   1eb52:	f7fe fb69 	bl	1d228 <CC_PalMemSetZeroPlat>
   1eb56:	3401      	adds	r4, #1
   1eb58:	1bad      	subs	r5, r5, r6
   1eb5a:	4437      	add	r7, r6
   1eb5c:	b2e4      	uxtb	r4, r4
   1eb5e:	d022      	beq.n	1eba6 <kmu_derive_cmac+0x106>
   1eb60:	2d10      	cmp	r5, #16
   1eb62:	464a      	mov	r2, r9
   1eb64:	9b05      	ldr	r3, [sp, #20]
   1eb66:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1eb6a:	a906      	add	r1, sp, #24
   1eb6c:	a80e      	add	r0, sp, #56	; 0x38
   1eb6e:	462e      	mov	r6, r5
   1eb70:	bf28      	it	cs
   1eb72:	2610      	movcs	r6, #16
   1eb74:	f7ff fe46 	bl	1e804 <FinishAesDrv>
   1eb78:	4632      	mov	r2, r6
   1eb7a:	2800      	cmp	r0, #0
   1eb7c:	d0e2      	beq.n	1eb44 <kmu_derive_cmac+0xa4>
   1eb7e:	4607      	mov	r7, r0
   1eb80:	2274      	movs	r2, #116	; 0x74
   1eb82:	2100      	movs	r1, #0
   1eb84:	a80e      	add	r0, sp, #56	; 0x38
   1eb86:	f7fe fb4d 	bl	1d224 <CC_PalMemSetPlat>
   1eb8a:	4638      	mov	r0, r7
   1eb8c:	b04c      	add	sp, #304	; 0x130
   1eb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb92:	4f08      	ldr	r7, [pc, #32]	; (1ebb4 <kmu_derive_cmac+0x114>)
   1eb94:	4638      	mov	r0, r7
   1eb96:	b04c      	add	sp, #304	; 0x130
   1eb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb9c:	4f06      	ldr	r7, [pc, #24]	; (1ebb8 <kmu_derive_cmac+0x118>)
   1eb9e:	4638      	mov	r0, r7
   1eba0:	b04c      	add	sp, #304	; 0x130
   1eba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eba6:	2274      	movs	r2, #116	; 0x74
   1eba8:	2100      	movs	r1, #0
   1ebaa:	a80e      	add	r0, sp, #56	; 0x38
   1ebac:	462f      	mov	r7, r5
   1ebae:	f7fe fb39 	bl	1d224 <CC_PalMemSetPlat>
   1ebb2:	e7ea      	b.n	1eb8a <kmu_derive_cmac+0xea>
   1ebb4:	00f1000e 	.word	0x00f1000e
   1ebb8:	00f1000f 	.word	0x00f1000f

0001ebbc <UtilCmacBuildDataForDerivation>:
   1ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebc0:	b082      	sub	sp, #8
   1ebc2:	461e      	mov	r6, r3
   1ebc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ebc6:	2300      	movs	r3, #0
   1ebc8:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   1ebcc:	9301      	str	r3, [sp, #4]
   1ebce:	d83e      	bhi.n	1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebd0:	00e4      	lsls	r4, r4, #3
   1ebd2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1ebd6:	4617      	mov	r7, r2
   1ebd8:	f101 32ff 	add.w	r2, r1, #4294967295
   1ebdc:	bf34      	ite	cc
   1ebde:	2303      	movcc	r3, #3
   1ebe0:	2304      	movcs	r3, #4
   1ebe2:	2a3f      	cmp	r2, #63	; 0x3f
   1ebe4:	460d      	mov	r5, r1
   1ebe6:	9300      	str	r3, [sp, #0]
   1ebe8:	d831      	bhi.n	1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebea:	b380      	cbz	r0, 1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebec:	b116      	cbz	r6, 1ebf4 <UtilCmacBuildDataForDerivation+0x38>
   1ebee:	b377      	cbz	r7, 1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebf0:	2e40      	cmp	r6, #64	; 0x40
   1ebf2:	d82c      	bhi.n	1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebf4:	9a08      	ldr	r2, [sp, #32]
   1ebf6:	b352      	cbz	r2, 1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ebfa:	6811      	ldr	r1, [r2, #0]
   1ebfc:	b339      	cbz	r1, 1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ebfe:	19aa      	adds	r2, r5, r6
   1ec00:	4413      	add	r3, r2
   1ec02:	4299      	cmp	r1, r3
   1ec04:	d323      	bcc.n	1ec4e <UtilCmacBuildDataForDerivation+0x92>
   1ec06:	9b08      	ldr	r3, [sp, #32]
   1ec08:	4601      	mov	r1, r0
   1ec0a:	462a      	mov	r2, r5
   1ec0c:	1c58      	adds	r0, r3, #1
   1ec0e:	f7fe fb07 	bl	1d220 <CC_PalMemCopyPlat>
   1ec12:	9b08      	ldr	r3, [sp, #32]
   1ec14:	f105 0802 	add.w	r8, r5, #2
   1ec18:	441d      	add	r5, r3
   1ec1a:	2300      	movs	r3, #0
   1ec1c:	706b      	strb	r3, [r5, #1]
   1ec1e:	bb26      	cbnz	r6, 1ec6a <UtilCmacBuildDataForDerivation+0xae>
   1ec20:	2cff      	cmp	r4, #255	; 0xff
   1ec22:	9400      	str	r4, [sp, #0]
   1ec24:	d917      	bls.n	1ec56 <UtilCmacBuildDataForDerivation+0x9a>
   1ec26:	0223      	lsls	r3, r4, #8
   1ec28:	b29b      	uxth	r3, r3
   1ec2a:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   1ec2e:	9b08      	ldr	r3, [sp, #32]
   1ec30:	9401      	str	r4, [sp, #4]
   1ec32:	eb03 0008 	add.w	r0, r3, r8
   1ec36:	2202      	movs	r2, #2
   1ec38:	a901      	add	r1, sp, #4
   1ec3a:	f7fe faf1 	bl	1d220 <CC_PalMemCopyPlat>
   1ec3e:	f108 0302 	add.w	r3, r8, #2
   1ec42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ec44:	2000      	movs	r0, #0
   1ec46:	6013      	str	r3, [r2, #0]
   1ec48:	b002      	add	sp, #8
   1ec4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec4e:	480b      	ldr	r0, [pc, #44]	; (1ec7c <UtilCmacBuildDataForDerivation+0xc0>)
   1ec50:	b002      	add	sp, #8
   1ec52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec56:	9b08      	ldr	r3, [sp, #32]
   1ec58:	2201      	movs	r2, #1
   1ec5a:	eb03 0008 	add.w	r0, r3, r8
   1ec5e:	4669      	mov	r1, sp
   1ec60:	f7fe fade 	bl	1d220 <CC_PalMemCopyPlat>
   1ec64:	f108 0301 	add.w	r3, r8, #1
   1ec68:	e7eb      	b.n	1ec42 <UtilCmacBuildDataForDerivation+0x86>
   1ec6a:	9b08      	ldr	r3, [sp, #32]
   1ec6c:	4632      	mov	r2, r6
   1ec6e:	eb03 0008 	add.w	r0, r3, r8
   1ec72:	4639      	mov	r1, r7
   1ec74:	f7fe fad4 	bl	1d220 <CC_PalMemCopyPlat>
   1ec78:	44b0      	add	r8, r6
   1ec7a:	e7d1      	b.n	1ec20 <UtilCmacBuildDataForDerivation+0x64>
   1ec7c:	80000006 	.word	0x80000006

0001ec80 <CC_PalDataBufferAttrGet>:
   1ec80:	2000      	movs	r0, #0
   1ec82:	7018      	strb	r0, [r3, #0]
   1ec84:	4770      	bx	lr
   1ec86:	bf00      	nop

0001ec88 <i2c_write.isra.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   1ec88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1ec8a:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1ec8e:	2202      	movs	r2, #2
   1ec90:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1ec94:	6882      	ldr	r2, [r0, #8]
   1ec96:	a901      	add	r1, sp, #4
   1ec98:	6894      	ldr	r4, [r2, #8]
   1ec9a:	2201      	movs	r2, #1
   1ec9c:	47a0      	blx	r4
}
   1ec9e:	b004      	add	sp, #16
   1eca0:	bd10      	pop	{r4, pc}

0001eca2 <setState>:
extern uint8_t setState(bool acc, bool gyr){
   1eca2:	b538      	push	{r3, r4, r5, lr}
   1eca4:	4604      	mov	r4, r0
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0);
   1eca6:	204e      	movs	r0, #78	; 0x4e
extern uint8_t setState(bool acc, bool gyr){
   1eca8:	460d      	mov	r5, r1
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0);
   1ecaa:	f7f2 f847 	bl	10d3c <readByte.constprop.0>
    temp ^= (-acc ^ temp) & (1UL << 0);
   1ecae:	4262      	negs	r2, r4
   1ecb0:	b252      	sxtb	r2, r2
   1ecb2:	ea82 0300 	eor.w	r3, r2, r0
   1ecb6:	f003 0301 	and.w	r3, r3, #1
   1ecba:	4043      	eors	r3, r0
   1ecbc:	b2d9      	uxtb	r1, r3
    temp ^= (-acc ^ temp) & (1UL << 1);
   1ecbe:	ea82 0301 	eor.w	r3, r2, r1
   1ecc2:	f003 0302 	and.w	r3, r3, #2
    temp ^= (-gyr ^ temp) & (1UL << 2);
   1ecc6:	426a      	negs	r2, r5
    temp ^= (-acc ^ temp) & (1UL << 1);
   1ecc8:	404b      	eors	r3, r1
    temp ^= (-gyr ^ temp) & (1UL << 2);
   1ecca:	b252      	sxtb	r2, r2
   1eccc:	ea82 0103 	eor.w	r1, r2, r3
   1ecd0:	f001 0104 	and.w	r1, r1, #4
   1ecd4:	4059      	eors	r1, r3
    temp ^= (-gyr ^ temp) & (1UL << 3);
   1ecd6:	404a      	eors	r2, r1
   1ecd8:	f002 0208 	and.w	r2, r2, #8
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp);
   1ecdc:	4051      	eors	r1, r2
   1ecde:	204e      	movs	r0, #78	; 0x4e
   1ece0:	f7f2 f81a 	bl	10d18 <writeByte.constprop.0.isra.0>
}
   1ece4:	2000      	movs	r0, #0
   1ece6:	bd38      	pop	{r3, r4, r5, pc}

0001ece8 <ccc_cfg_changed>:
}
   1ece8:	4770      	bx	lr

0001ecea <write_u16>:
{
   1ecea:	b538      	push	{r3, r4, r5, lr}
   1ecec:	460c      	mov	r4, r1
   1ecee:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   1ecf2:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(config_data)) {
   1ecf4:	461c      	mov	r4, r3
   1ecf6:	18c3      	adds	r3, r0, r3
   1ecf8:	2b14      	cmp	r3, #20
{
   1ecfa:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   1ecfc:	dc05      	bgt.n	1ed0a <write_u16+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ecfe:	4622      	mov	r2, r4
   1ed00:	4428      	add	r0, r5
   1ed02:	f004 fb24 	bl	2334e <memcpy>
}
   1ed06:	4620      	mov	r0, r4
   1ed08:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ed0a:	f06f 0406 	mvn.w	r4, #6
   1ed0e:	e7fa      	b.n	1ed06 <write_u16+0x1c>

0001ed10 <enableMLX>:
    startBurstMode(i2c_dev);
   1ed10:	f000 bbc1 	b.w	1f496 <startBurstMode>

0001ed14 <disableMLX>:
    mlx_exitMode(i2c_dev);
   1ed14:	f000 bb7d 	b.w	1f412 <mlx_exitMode>

0001ed18 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1ed18:	b158      	cbz	r0, 1ed32 <null_ptr_check+0x1a>
   1ed1a:	68c3      	ldr	r3, [r0, #12]
   1ed1c:	b14b      	cbz	r3, 1ed32 <null_ptr_check+0x1a>
   1ed1e:	6903      	ldr	r3, [r0, #16]
   1ed20:	b13b      	cbz	r3, 1ed32 <null_ptr_check+0x1a>
   1ed22:	6943      	ldr	r3, [r0, #20]
   1ed24:	b12b      	cbz	r3, 1ed32 <null_ptr_check+0x1a>
   1ed26:	6840      	ldr	r0, [r0, #4]
   1ed28:	fab0 f080 	clz	r0, r0
   1ed2c:	0940      	lsrs	r0, r0, #5
   1ed2e:	4240      	negs	r0, r0
   1ed30:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
   1ed32:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
   1ed36:	4770      	bx	lr

0001ed38 <compensate_data>:
{
   1ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed3c:	4682      	mov	sl, r0
   1ed3e:	b087      	sub	sp, #28
   1ed40:	460d      	mov	r5, r1
   1ed42:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1ed44:	4693      	mov	fp, r2
   1ed46:	2a00      	cmp	r2, #0
   1ed48:	f000 80dc 	beq.w	1ef04 <compensate_data+0x1cc>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   1ed4c:	f010 0f03 	tst.w	r0, #3
   1ed50:	d022      	beq.n	1ed98 <compensate_data+0x60>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1ed52:	6848      	ldr	r0, [r1, #4]
   1ed54:	f7e1 fbca 	bl	4ec <__aeabi_ui2d>
   1ed58:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ed5c:	f7e1 fa88 	bl	270 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1ed60:	4602      	mov	r2, r0
   1ed62:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1ed64:	4606      	mov	r6, r0
   1ed66:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1ed68:	f7e1 fc3a 	bl	5e0 <__aeabi_dmul>
   1ed6c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ed70:	f7e1 fc36 	bl	5e0 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1ed74:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1ed78:	4680      	mov	r8, r0
   1ed7a:	4689      	mov	r9, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1ed7c:	4630      	mov	r0, r6
   1ed7e:	4639      	mov	r1, r7
   1ed80:	f7e1 fc2e 	bl	5e0 <__aeabi_dmul>
   1ed84:	4602      	mov	r2, r0
   1ed86:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1ed88:	4640      	mov	r0, r8
   1ed8a:	4649      	mov	r1, r9
   1ed8c:	f7e1 fa72 	bl	274 <__adddf3>
   1ed90:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   1ed94:	e9cb 0100 	strd	r0, r1, [fp]
        if (sensor_comp & BMP3_PRESS)
   1ed98:	f01a 0001 	ands.w	r0, sl, #1
   1ed9c:	f000 80af 	beq.w	1eefe <compensate_data+0x1c6>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1eda0:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
   1eda4:	4619      	mov	r1, r3
   1eda6:	4610      	mov	r0, r2
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1eda8:	e9cd 2300 	strd	r2, r3, [sp]
        pow_output = (float) base * pow_output;
   1edac:	f7e1 feb2 	bl	b14 <__aeabi_d2f>
   1edb0:	4601      	mov	r1, r0
   1edb2:	4606      	mov	r6, r0
   1edb4:	f7e1 f9a4 	bl	100 <__aeabi_fmul>
   1edb8:	4607      	mov	r7, r0
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1edba:	f7e1 fbb9 	bl	530 <__aeabi_f2d>
   1edbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
        pow_output = (float) base * pow_output;
   1edc2:	4639      	mov	r1, r7
   1edc4:	4630      	mov	r0, r6
   1edc6:	f7e1 f99b 	bl	100 <__aeabi_fmul>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1edca:	f7e1 fbb1 	bl	530 <__aeabi_f2d>
   1edce:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_out2 = uncomp_data->pressure *
   1edd2:	6828      	ldr	r0, [r5, #0]
   1edd4:	f7e1 fb8a 	bl	4ec <__aeabi_ui2d>
   1edd8:	4689      	mov	r9, r1
   1edda:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
   1eddc:	f7e1 fe9a 	bl	b14 <__aeabi_d2f>
   1ede0:	4601      	mov	r1, r0
   1ede2:	4682      	mov	sl, r0
   1ede4:	f7e1 f98c 	bl	100 <__aeabi_fmul>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1ede8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
   1edec:	4605      	mov	r5, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1edee:	e9dd 0100 	ldrd	r0, r1, [sp]
   1edf2:	f7e1 fbf5 	bl	5e0 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1edf6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1edfa:	f7e1 fa3b 	bl	274 <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1edfe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1ee02:	4606      	mov	r6, r0
   1ee04:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1ee06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ee0a:	f7e1 fbe9 	bl	5e0 <__aeabi_dmul>
   1ee0e:	4602      	mov	r2, r0
   1ee10:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1ee12:	4630      	mov	r0, r6
   1ee14:	4639      	mov	r1, r7
   1ee16:	f7e1 fa2d 	bl	274 <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1ee1a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1ee1e:	4606      	mov	r6, r0
   1ee20:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1ee22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ee26:	f7e1 fbdb 	bl	5e0 <__aeabi_dmul>
   1ee2a:	4602      	mov	r2, r0
   1ee2c:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1ee2e:	4630      	mov	r0, r6
   1ee30:	4639      	mov	r1, r7
   1ee32:	f7e1 fa1f 	bl	274 <__adddf3>
    partial_out2 = uncomp_data->pressure *
   1ee36:	4642      	mov	r2, r8
   1ee38:	464b      	mov	r3, r9
   1ee3a:	f7e1 fbd1 	bl	5e0 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1ee3e:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
   1ee42:	4680      	mov	r8, r0
   1ee44:	4689      	mov	r9, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1ee46:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ee4a:	f7e1 fbc9 	bl	5e0 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1ee4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   1ee52:	f7e1 fa0f 	bl	274 <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1ee56:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1ee5a:	4606      	mov	r6, r0
   1ee5c:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1ee5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ee62:	f7e1 fbbd 	bl	5e0 <__aeabi_dmul>
   1ee66:	4602      	mov	r2, r0
   1ee68:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1ee6a:	4630      	mov	r0, r6
   1ee6c:	4639      	mov	r1, r7
   1ee6e:	f7e1 fa01 	bl	274 <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1ee72:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1ee76:	4606      	mov	r6, r0
   1ee78:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1ee7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ee7e:	f7e1 fbaf 	bl	5e0 <__aeabi_dmul>
   1ee82:	4602      	mov	r2, r0
   1ee84:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1ee86:	4630      	mov	r0, r6
   1ee88:	4639      	mov	r1, r7
   1ee8a:	f7e1 f9f3 	bl	274 <__adddf3>
   1ee8e:	4602      	mov	r2, r0
   1ee90:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1ee92:	4640      	mov	r0, r8
   1ee94:	4649      	mov	r1, r9
   1ee96:	f7e1 f9ed 	bl	274 <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1ee9a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1ee9e:	4606      	mov	r6, r0
   1eea0:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1eea2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1eea6:	f7e1 fb9b 	bl	5e0 <__aeabi_dmul>
   1eeaa:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   1eeae:	f7e1 f9e1 	bl	274 <__adddf3>
   1eeb2:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1eeb4:	4628      	mov	r0, r5
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1eeb6:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1eeb8:	f7e1 fb3a 	bl	530 <__aeabi_f2d>
   1eebc:	4602      	mov	r2, r0
   1eebe:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   1eec0:	4640      	mov	r0, r8
   1eec2:	4649      	mov	r1, r9
   1eec4:	f7e1 fb8c 	bl	5e0 <__aeabi_dmul>
   1eec8:	4680      	mov	r8, r0
   1eeca:	4689      	mov	r9, r1
        pow_output = (float) base * pow_output;
   1eecc:	4650      	mov	r0, sl
   1eece:	4629      	mov	r1, r5
   1eed0:	f7e1 f916 	bl	100 <__aeabi_fmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   1eed4:	f7e1 fb2c 	bl	530 <__aeabi_f2d>
   1eed8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1eedc:	f7e1 fb80 	bl	5e0 <__aeabi_dmul>
   1eee0:	4602      	mov	r2, r0
   1eee2:	460b      	mov	r3, r1
   1eee4:	4640      	mov	r0, r8
   1eee6:	4649      	mov	r1, r9
   1eee8:	f7e1 f9c4 	bl	274 <__adddf3>
   1eeec:	4602      	mov	r2, r0
   1eeee:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1eef0:	4630      	mov	r0, r6
   1eef2:	4639      	mov	r1, r7
   1eef4:	f7e1 f9be 	bl	274 <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   1eef8:	e9cb 0102 	strd	r0, r1, [fp, #8]
    int8_t rslt = BMP3_OK;
   1eefc:	2000      	movs	r0, #0
}
   1eefe:	b007      	add	sp, #28
   1ef00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
   1ef04:	f04f 30ff 	mov.w	r0, #4294967295
   1ef08:	e7f9      	b.n	1eefe <compensate_data+0x1c6>

0001ef0a <bmp3_get_regs>:
{
   1ef0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef0e:	4606      	mov	r6, r0
   1ef10:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
   1ef12:	4618      	mov	r0, r3
{
   1ef14:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   1ef16:	f7ff feff 	bl	1ed18 <null_ptr_check>
{
   1ef1a:	4689      	mov	r9, r1
   1ef1c:	4690      	mov	r8, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   1ef1e:	4605      	mov	r5, r0
   1ef20:	bb88      	cbnz	r0, 1ef86 <bmp3_get_regs+0x7c>
   1ef22:	b381      	cbz	r1, 1ef86 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
   1ef24:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
   1ef26:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
   1ef2a:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
   1ef2c:	1dc3      	adds	r3, r0, #7
   1ef2e:	f023 0307 	bic.w	r3, r3, #7
    {
   1ef32:	46eb      	mov	fp, sp
        uint8_t temp_buff[len + dev->dummy_byte];
   1ef34:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1ef38:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
   1ef3a:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1ef3e:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
   1ef40:	46ea      	mov	sl, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1ef42:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
   1ef44:	d01a      	beq.n	1ef7c <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1ef46:	4602      	mov	r2, r0
   1ef48:	4669      	mov	r1, sp
   1ef4a:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   1ef4e:	4676      	mov	r6, lr
   1ef50:	47b0      	blx	r6
   1ef52:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   1ef54:	4545      	cmp	r5, r8
   1ef56:	d109      	bne.n	1ef6c <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1ef58:	f994 0009 	ldrsb.w	r0, [r4, #9]
            rslt = BMP3_E_COMM_FAIL;
   1ef5c:	2800      	cmp	r0, #0
   1ef5e:	bf18      	it	ne
   1ef60:	f06f 0006 	mvnne.w	r0, #6
   1ef64:	46dd      	mov	sp, fp
}
   1ef66:	46bd      	mov	sp, r7
   1ef68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   1ef6c:	7aa3      	ldrb	r3, [r4, #10]
   1ef6e:	eb0a 0205 	add.w	r2, sl, r5
   1ef72:	5cd3      	ldrb	r3, [r2, r3]
   1ef74:	f809 3005 	strb.w	r3, [r9, r5]
            for (idx = 0; idx < len; idx++)
   1ef78:	3501      	adds	r5, #1
   1ef7a:	e7eb      	b.n	1ef54 <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   1ef7c:	4630      	mov	r0, r6
   1ef7e:	4675      	mov	r5, lr
   1ef80:	47a8      	blx	r5
   1ef82:	7260      	strb	r0, [r4, #9]
   1ef84:	e7e8      	b.n	1ef58 <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
   1ef86:	f04f 30ff 	mov.w	r0, #4294967295
   1ef8a:	e7ec      	b.n	1ef66 <bmp3_get_regs+0x5c>

0001ef8c <bmp3_set_regs>:
{
   1ef8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t temp_buff[len * 2];
   1ef90:	ea4f 0842 	mov.w	r8, r2, lsl #1
{
   1ef94:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
   1ef96:	f108 0307 	add.w	r3, r8, #7
   1ef9a:	f023 0307 	bic.w	r3, r3, #7
{
   1ef9e:	af00      	add	r7, sp, #0
   1efa0:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
   1efa2:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   1efa6:	4620      	mov	r0, r4
{
   1efa8:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
   1efaa:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
   1efac:	f7ff feb4 	bl	1ed18 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   1efb0:	bb70      	cbnz	r0, 1f010 <bmp3_set_regs+0x84>
   1efb2:	b36e      	cbz	r6, 1f010 <bmp3_set_regs+0x84>
   1efb4:	b365      	cbz	r5, 1f010 <bmp3_set_regs+0x84>
        if (len != 0)
   1efb6:	b372      	cbz	r2, 1f016 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
   1efb8:	782b      	ldrb	r3, [r5, #0]
   1efba:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
   1efbe:	7a23      	ldrb	r3, [r4, #8]
   1efc0:	b303      	cbz	r3, 1f004 <bmp3_set_regs+0x78>
            if (len > 1)
   1efc2:	2a01      	cmp	r2, #1
   1efc4:	d00c      	beq.n	1efe0 <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
   1efc6:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
   1efc8:	f101 3cff 	add.w	ip, r1, #4294967295
   1efcc:	5cf0      	ldrb	r0, [r6, r3]
   1efce:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
   1efd2:	5ce8      	ldrb	r0, [r5, r3]
   1efd4:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
   1efd8:	3301      	adds	r3, #1
   1efda:	429a      	cmp	r2, r3
   1efdc:	d8f6      	bhi.n	1efcc <bmp3_set_regs+0x40>
                temp_len = len * 2;
   1efde:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1efe0:	6925      	ldr	r5, [r4, #16]
   1efe2:	6863      	ldr	r3, [r4, #4]
   1efe4:	7830      	ldrb	r0, [r6, #0]
   1efe6:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
   1efe8:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1efea:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
   1efec:	bf18      	it	ne
   1efee:	f06f 0006 	mvnne.w	r0, #6
}
   1eff2:	46bd      	mov	sp, r7
   1eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   1eff8:	f816 c000 	ldrb.w	ip, [r6, r0]
   1effc:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1f000:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   1f004:	b2d8      	uxtb	r0, r3
   1f006:	4282      	cmp	r2, r0
   1f008:	f103 0301 	add.w	r3, r3, #1
   1f00c:	d8f4      	bhi.n	1eff8 <bmp3_set_regs+0x6c>
   1f00e:	e7d8      	b.n	1efc2 <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
   1f010:	f04f 30ff 	mov.w	r0, #4294967295
   1f014:	e7ed      	b.n	1eff2 <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
   1f016:	f06f 0005 	mvn.w	r0, #5
   1f01a:	e7ea      	b.n	1eff2 <bmp3_set_regs+0x66>

0001f01c <write_power_mode>:
{
   1f01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f01e:	4604      	mov	r4, r0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f020:	4623      	mov	r3, r4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f022:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f024:	2201      	movs	r2, #1
   1f026:	f10d 0107 	add.w	r1, sp, #7
    uint8_t op_mode = dev->settings.op_mode;
   1f02a:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f02e:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f032:	f7ff ff6a 	bl	1ef0a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f036:	b988      	cbnz	r0, 1f05c <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   1f038:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f03c:	012d      	lsls	r5, r5, #4
   1f03e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f042:	f005 0530 	and.w	r5, r5, #48	; 0x30
   1f046:	432b      	orrs	r3, r5
   1f048:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f04c:	2201      	movs	r2, #1
   1f04e:	4623      	mov	r3, r4
   1f050:	f10d 0107 	add.w	r1, sp, #7
   1f054:	f10d 0006 	add.w	r0, sp, #6
   1f058:	f7ff ff98 	bl	1ef8c <bmp3_set_regs>
}
   1f05c:	b003      	add	sp, #12
   1f05e:	bd30      	pop	{r4, r5, pc}

0001f060 <bmp3_soft_reset>:
{
   1f060:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
   1f062:	237e      	movs	r3, #126	; 0x7e
   1f064:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f068:	23b6      	movs	r3, #182	; 0xb6
{
   1f06a:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f06c:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
   1f070:	f7ff fe52 	bl	1ed18 <null_ptr_check>
    if (rslt == BMP3_OK)
   1f074:	4604      	mov	r4, r0
   1f076:	b960      	cbnz	r0, 1f092 <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   1f078:	462b      	mov	r3, r5
   1f07a:	2201      	movs	r2, #1
   1f07c:	f10d 0106 	add.w	r1, sp, #6
   1f080:	2003      	movs	r0, #3
   1f082:	f7ff ff42 	bl	1ef0a <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f086:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f08a:	06db      	lsls	r3, r3, #27
   1f08c:	d404      	bmi.n	1f098 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
   1f08e:	f06f 0403 	mvn.w	r4, #3
}
   1f092:	4620      	mov	r0, r4
   1f094:	b003      	add	sp, #12
   1f096:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f098:	2800      	cmp	r0, #0
   1f09a:	d1f8      	bne.n	1f08e <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   1f09c:	462b      	mov	r3, r5
   1f09e:	2201      	movs	r2, #1
   1f0a0:	f10d 0105 	add.w	r1, sp, #5
   1f0a4:	a801      	add	r0, sp, #4
   1f0a6:	f7ff ff71 	bl	1ef8c <bmp3_set_regs>
            if (rslt == BMP3_OK)
   1f0aa:	4604      	mov	r4, r0
   1f0ac:	2800      	cmp	r0, #0
   1f0ae:	d1f0      	bne.n	1f092 <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
   1f0b0:	696b      	ldr	r3, [r5, #20]
   1f0b2:	6869      	ldr	r1, [r5, #4]
   1f0b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1f0b8:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   1f0ba:	462b      	mov	r3, r5
   1f0bc:	2201      	movs	r2, #1
   1f0be:	f10d 0107 	add.w	r1, sp, #7
   1f0c2:	2002      	movs	r0, #2
   1f0c4:	f7ff ff21 	bl	1ef0a <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   1f0c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f0cc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   1f0d0:	4303      	orrs	r3, r0
   1f0d2:	b2db      	uxtb	r3, r3
   1f0d4:	2b00      	cmp	r3, #0
   1f0d6:	d0dc      	beq.n	1f092 <bmp3_soft_reset+0x32>
   1f0d8:	e7d9      	b.n	1f08e <bmp3_soft_reset+0x2e>

0001f0da <bmp3_get_op_mode>:
{
   1f0da:	b510      	push	{r4, lr}
   1f0dc:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1f0de:	4608      	mov	r0, r1
   1f0e0:	f7ff fe1a 	bl	1ed18 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   1f0e4:	b958      	cbnz	r0, 1f0fe <bmp3_get_op_mode+0x24>
   1f0e6:	b154      	cbz	r4, 1f0fe <bmp3_get_op_mode+0x24>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   1f0e8:	460b      	mov	r3, r1
   1f0ea:	2201      	movs	r2, #1
   1f0ec:	4621      	mov	r1, r4
   1f0ee:	201b      	movs	r0, #27
   1f0f0:	f7ff ff0b 	bl	1ef0a <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   1f0f4:	7823      	ldrb	r3, [r4, #0]
   1f0f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1f0fa:	7023      	strb	r3, [r4, #0]
}
   1f0fc:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
   1f0fe:	f04f 30ff 	mov.w	r0, #4294967295
   1f102:	e7fb      	b.n	1f0fc <bmp3_get_op_mode+0x22>

0001f104 <bmp3_set_op_mode>:
{
   1f104:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f106:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
   1f108:	f7ff fe06 	bl	1ed18 <null_ptr_check>
    if (rslt == BMP3_OK)
   1f10c:	4604      	mov	r4, r0
   1f10e:	2800      	cmp	r0, #0
   1f110:	d163      	bne.n	1f1da <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f112:	4629      	mov	r1, r5
   1f114:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
   1f118:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f11c:	f7ff ffdd 	bl	1f0da <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f120:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f124:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f126:	b1e3      	cbz	r3, 1f162 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f128:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f12a:	462b      	mov	r3, r5
   1f12c:	2201      	movs	r2, #1
   1f12e:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f130:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f134:	f7ff fee9 	bl	1ef0a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f138:	4604      	mov	r4, r0
   1f13a:	b968      	cbnz	r0, 1f158 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   1f13c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f140:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f144:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f148:	2201      	movs	r2, #1
   1f14a:	462b      	mov	r3, r5
   1f14c:	a901      	add	r1, sp, #4
   1f14e:	f10d 0003 	add.w	r0, sp, #3
   1f152:	f7ff ff1b 	bl	1ef8c <bmp3_set_regs>
   1f156:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
   1f158:	696b      	ldr	r3, [r5, #20]
   1f15a:	6869      	ldr	r1, [r5, #4]
   1f15c:	f241 3088 	movw	r0, #5000	; 0x1388
   1f160:	4798      	blx	r3
        if (rslt == BMP3_OK)
   1f162:	bbd4      	cbnz	r4, 1f1da <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
   1f164:	2e03      	cmp	r6, #3
   1f166:	d13b      	bne.n	1f1e0 <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1f168:	2204      	movs	r2, #4
   1f16a:	462b      	mov	r3, r5
   1f16c:	eb0d 0102 	add.w	r1, sp, r2
   1f170:	201c      	movs	r0, #28
   1f172:	f7ff feca 	bl	1ef0a <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1f176:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f17a:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   1f17e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1f182:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1f186:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1f18a:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1f18e:	f003 031f 	and.w	r3, r3, #31
   1f192:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   1f196:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f19a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1f19e:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
   1f1a2:	4604      	mov	r4, r0
   1f1a4:	b9c8      	cbnz	r0, 1f1da <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
   1f1a6:	4628      	mov	r0, r5
   1f1a8:	f7f2 f89e 	bl	112e8 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
   1f1ac:	4604      	mov	r4, r0
   1f1ae:	b9a0      	cbnz	r0, 1f1da <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
   1f1b0:	4628      	mov	r0, r5
   1f1b2:	f7ff ff33 	bl	1f01c <write_power_mode>
        if (rslt == BMP3_OK)
   1f1b6:	4604      	mov	r4, r0
   1f1b8:	b978      	cbnz	r0, 1f1da <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   1f1ba:	462b      	mov	r3, r5
   1f1bc:	2201      	movs	r2, #1
   1f1be:	a901      	add	r1, sp, #4
   1f1c0:	2002      	movs	r0, #2
   1f1c2:	f7ff fea2 	bl	1ef0a <bmp3_get_regs>
            if (rslt == BMP3_OK)
   1f1c6:	4604      	mov	r4, r0
   1f1c8:	b938      	cbnz	r0, 1f1da <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
   1f1ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
   1f1ce:	f013 0f04 	tst.w	r3, #4
   1f1d2:	bf0c      	ite	eq
   1f1d4:	4604      	moveq	r4, r0
   1f1d6:	f06f 0404 	mvnne.w	r4, #4
}
   1f1da:	4620      	mov	r0, r4
   1f1dc:	b002      	add	sp, #8
   1f1de:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
   1f1e0:	2e01      	cmp	r6, #1
   1f1e2:	d1fa      	bne.n	1f1da <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
   1f1e4:	4628      	mov	r0, r5
   1f1e6:	f7ff ff19 	bl	1f01c <write_power_mode>
   1f1ea:	4604      	mov	r4, r0
   1f1ec:	e7f5      	b.n	1f1da <bmp3_set_op_mode+0xd6>

0001f1ee <bmp3_get_sensor_data>:
{
   1f1ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f1f0:	b085      	sub	sp, #20
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f1f2:	2300      	movs	r3, #0
{
   1f1f4:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
   1f1f6:	4610      	mov	r0, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
   1f1f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
   1f1fc:	460d      	mov	r5, r1
   1f1fe:	4617      	mov	r7, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f200:	9300      	str	r3, [sp, #0]
   1f202:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   1f206:	f7ff fd87 	bl	1ed18 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   1f20a:	bb58      	cbnz	r0, 1f264 <bmp3_get_sensor_data+0x76>
   1f20c:	b351      	cbz	r1, 1f264 <bmp3_get_sensor_data+0x76>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   1f20e:	4613      	mov	r3, r2
   1f210:	4669      	mov	r1, sp
   1f212:	2206      	movs	r2, #6
   1f214:	2004      	movs	r0, #4
   1f216:	f7ff fe78 	bl	1ef0a <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1f21a:	4604      	mov	r4, r0
   1f21c:	b9f8      	cbnz	r0, 1f25e <bmp3_get_sensor_data+0x70>
    data_msb = (uint32_t)reg_data[2] << 16;
   1f21e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
   1f222:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[5] << 16;
   1f226:	f89d 4005 	ldrb.w	r4, [sp, #5]
    data_msb = (uint32_t)reg_data[2] << 16;
   1f22a:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1f22c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
   1f230:	f89d 2000 	ldrb.w	r2, [sp]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1f234:	4313      	orrs	r3, r2
   1f236:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
   1f238:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   1f23c:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f23e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
   1f242:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f246:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f248:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f24a:	a902      	add	r1, sp, #8
   1f24c:	f107 0318 	add.w	r3, r7, #24
   1f250:	4630      	mov	r0, r6
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f252:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f254:	f7ff fd70 	bl	1ed38 <compensate_data>
   1f258:	4604      	mov	r4, r0
            printk();
   1f25a:	f000 f998 	bl	1f58e <printk>
}
   1f25e:	4620      	mov	r0, r4
   1f260:	b005      	add	sp, #20
   1f262:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
   1f264:	f04f 34ff 	mov.w	r4, #4294967295
   1f268:	e7f9      	b.n	1f25e <bmp3_get_sensor_data+0x70>

0001f26a <app_us_delay>:
	z_impl_k_busy_wait(usec_to_wait);
   1f26a:	f003 beb8 	b.w	22fde <z_impl_k_busy_wait>

0001f26e <app_i2c_write>:
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f26e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f270:	4614      	mov	r4, r2
	uint8_t dataBuffer[len+1];
   1f272:	3408      	adds	r4, #8
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f274:	b085      	sub	sp, #20
	uint8_t dataBuffer[len+1];
   1f276:	f024 0407 	bic.w	r4, r4, #7
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f27a:	af00      	add	r7, sp, #0
	uint8_t dataBuffer[len+1];
   1f27c:	ebad 0d04 	sub.w	sp, sp, r4
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f280:	461d      	mov	r5, r3
	dataBuffer[0]=reg_addr;
   1f282:	466b      	mov	r3, sp
	uint8_t dataBuffer[len+1];
   1f284:	1c56      	adds	r6, r2, #1
	dataBuffer[0]=reg_addr;
   1f286:	f803 0b01 	strb.w	r0, [r3], #1
   1f28a:	4618      	mov	r0, r3
   1f28c:	f004 f85f 	bl	2334e <memcpy>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f290:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
   1f292:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   1f296:	60be      	str	r6, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f298:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f29a:	68ab      	ldr	r3, [r5, #8]
   1f29c:	1d39      	adds	r1, r7, #4
   1f29e:	689c      	ldr	r4, [r3, #8]
   1f2a0:	2201      	movs	r2, #1
   1f2a2:	2376      	movs	r3, #118	; 0x76
   1f2a4:	4628      	mov	r0, r5
   1f2a6:	47a0      	blx	r4
}
   1f2a8:	3714      	adds	r7, #20
   1f2aa:	b240      	sxtb	r0, r0
   1f2ac:	46bd      	mov	sp, r7
   1f2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f2b0 <app_i2c_read>:
static BMP3_INTF_RET_TYPE app_i2c_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr) {
   1f2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2b4:	b086      	sub	sp, #24
   1f2b6:	461c      	mov	r4, r3
	msg.buf = (uint8_t *)buf;
   1f2b8:	f10d 0307 	add.w	r3, sp, #7
   1f2bc:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1f2be:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f2c0:	2302      	movs	r3, #2
   1f2c2:	460f      	mov	r7, r1
   1f2c4:	4616      	mov	r6, r2
   1f2c6:	f88d 0007 	strb.w	r0, [sp, #7]
	msg.len = num_bytes;
   1f2ca:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f2cc:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f2d0:	68a3      	ldr	r3, [r4, #8]
   1f2d2:	462a      	mov	r2, r5
   1f2d4:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f2d8:	a903      	add	r1, sp, #12
   1f2da:	2376      	movs	r3, #118	; 0x76
   1f2dc:	4620      	mov	r0, r4
   1f2de:	47c0      	blx	r8
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f2e0:	2303      	movs	r3, #3
	msg.len = num_bytes;
   1f2e2:	e9cd 7603 	strd	r7, r6, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f2e6:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f2ea:	68a3      	ldr	r3, [r4, #8]
   1f2ec:	462a      	mov	r2, r5
   1f2ee:	689e      	ldr	r6, [r3, #8]
   1f2f0:	a903      	add	r1, sp, #12
   1f2f2:	2376      	movs	r3, #118	; 0x76
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	47b0      	blx	r6
}
   1f2f8:	b240      	sxtb	r0, r0
   1f2fa:	b006      	add	sp, #24
   1f2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f300 <transceive>:
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f304:	b085      	sub	sp, #20
   1f306:	af00      	add	r7, sp, #0
   1f308:	461d      	mov	r5, r3
   1f30a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
  uint8_t rxbuf2[rxlen + 2];
   1f30c:	3309      	adds	r3, #9
   1f30e:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f312:	4681      	mov	r9, r0
   1f314:	4688      	mov	r8, r1
   1f316:	4614      	mov	r4, r2
  uint8_t rxbuf2[rxlen + 2];
   1f318:	ebad 0d03 	sub.w	sp, sp, r3
  if (mlx_device_t == NULL) {
   1f31c:	b926      	cbnz	r6, 1f328 <transceive+0x28>
    return false;
   1f31e:	2000      	movs	r0, #0
}
   1f320:	3714      	adds	r7, #20
   1f322:	46bd      	mov	sp, r7
   1f324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f328:	4630      	mov	r0, r6
   1f32a:	f003 fa37 	bl	2279c <z_device_is_ready>
  if (!device_is_ready(mlx_device_t)) {
   1f32e:	2800      	cmp	r0, #0
   1f330:	d0f5      	beq.n	1f31e <transceive+0x1e>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f332:	2302      	movs	r3, #2
  if (i2c_write(mlx_device_t,txbuf, txlen, MLX90393_DEFAULT_ADDR)) {
   1f334:	e9c7 9801 	strd	r9, r8, [r7, #4]
   1f338:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f33a:	68b3      	ldr	r3, [r6, #8]
   1f33c:	2201      	movs	r2, #1
   1f33e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f342:	1d39      	adds	r1, r7, #4
   1f344:	230c      	movs	r3, #12
   1f346:	4630      	mov	r0, r6
   1f348:	47c0      	blx	r8
   1f34a:	b108      	cbz	r0, 1f350 <transceive+0x50>
    return MLX90393_STATUS_ERROR;
   1f34c:	20ff      	movs	r0, #255	; 0xff
   1f34e:	e7e7      	b.n	1f320 <transceive+0x20>
   1f350:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
   1f354:	03c0      	lsls	r0, r0, #15
   1f356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f35a:	2300      	movs	r3, #0
   1f35c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1f360:	2100      	movs	r1, #0
   1f362:	f7e1 fd55 	bl	e10 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1f366:	f7fc f96b 	bl	1b640 <z_impl_k_sleep>
  uint8_t rxbuf2[rxlen + 2];
   1f36a:	1c6b      	adds	r3, r5, #1
	msg.len = num_bytes;
   1f36c:	60bb      	str	r3, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f36e:	2303      	movs	r3, #3
	msg.buf = buf;
   1f370:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f374:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f376:	68b3      	ldr	r3, [r6, #8]
   1f378:	2201      	movs	r2, #1
   1f37a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f37e:	1d39      	adds	r1, r7, #4
   1f380:	230c      	movs	r3, #12
   1f382:	4630      	mov	r0, r6
   1f384:	47c0      	blx	r8
  if (i2c_read(mlx_device_t,rxbuf2, rxlen + 1,MLX90393_DEFAULT_ADDR)) {
   1f386:	2800      	cmp	r0, #0
   1f388:	d1e0      	bne.n	1f34c <transceive+0x4c>
  status = rxbuf2[0];
   1f38a:	466b      	mov	r3, sp
   1f38c:	4622      	mov	r2, r4
   1f38e:	f813 0b01 	ldrb.w	r0, [r3], #1
  for (i = 0; i < rxlen; i++) {
   1f392:	4425      	add	r5, r4
   1f394:	4295      	cmp	r5, r2
   1f396:	d101      	bne.n	1f39c <transceive+0x9c>
  return (status >> 2);
   1f398:	0880      	lsrs	r0, r0, #2
   1f39a:	e7c1      	b.n	1f320 <transceive+0x20>
    rxbuf[i] = rxbuf2[i + 1];
   1f39c:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f3a0:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < rxlen; i++) {
   1f3a4:	e7f6      	b.n	1f394 <transceive+0x94>

0001f3a6 <writeRegister>:
bool writeRegister(uint8_t reg, uint16_t data, struct device *mlx_device_t) {
   1f3a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f3a8:	2360      	movs	r3, #96	; 0x60
   1f3aa:	f88d 300c 	strb.w	r3, [sp, #12]
   1f3ae:	0a0b      	lsrs	r3, r1, #8
   1f3b0:	f88d 300d 	strb.w	r3, [sp, #13]
                   reg << 2};   // the register itself, shift up by 2 bits!
   1f3b4:	0080      	lsls	r0, r0, #2
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f3b6:	2300      	movs	r3, #0
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f3b8:	f88d 100e 	strb.w	r1, [sp, #14]
   1f3bc:	f88d 000f 	strb.w	r0, [sp, #15]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f3c0:	9201      	str	r2, [sp, #4]
   1f3c2:	9300      	str	r3, [sp, #0]
   1f3c4:	461a      	mov	r2, r3
   1f3c6:	2104      	movs	r1, #4
   1f3c8:	a803      	add	r0, sp, #12
   1f3ca:	f7ff ff99 	bl	1f300 <transceive>
}
   1f3ce:	fab0 f080 	clz	r0, r0
   1f3d2:	0940      	lsrs	r0, r0, #5
   1f3d4:	b005      	add	sp, #20
   1f3d6:	f85d fb04 	ldr.w	pc, [sp], #4

0001f3da <readRegister>:
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1f3da:	b530      	push	{r4, r5, lr}
   1f3dc:	b085      	sub	sp, #20
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1f3de:	2350      	movs	r3, #80	; 0x50
   1f3e0:	0080      	lsls	r0, r0, #2
   1f3e2:	f88d 3008 	strb.w	r3, [sp, #8]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1f3e6:	2400      	movs	r4, #0
   1f3e8:	2302      	movs	r3, #2
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1f3ea:	460d      	mov	r5, r1
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1f3ec:	f88d 0009 	strb.w	r0, [sp, #9]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1f3f0:	9201      	str	r2, [sp, #4]
   1f3f2:	9400      	str	r4, [sp, #0]
   1f3f4:	aa03      	add	r2, sp, #12
   1f3f6:	4619      	mov	r1, r3
   1f3f8:	a802      	add	r0, sp, #8
   1f3fa:	f7ff ff81 	bl	1f300 <transceive>
   1f3fe:	b930      	cbnz	r0, 1f40e <readRegister+0x34>
  *data = ((uint16_t)rx[0] << 8) | rx[1];
   1f400:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f404:	ba5b      	rev16	r3, r3
   1f406:	802b      	strh	r3, [r5, #0]
  return true;
   1f408:	2001      	movs	r0, #1
}
   1f40a:	b005      	add	sp, #20
   1f40c:	bd30      	pop	{r4, r5, pc}
    return false;
   1f40e:	4620      	mov	r0, r4
   1f410:	e7fb      	b.n	1f40a <readRegister+0x30>

0001f412 <mlx_exitMode>:
bool mlx_exitMode(struct device *mlx_device_t) {
   1f412:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_EX};
   1f414:	2380      	movs	r3, #128	; 0x80
   1f416:	f88d 300c 	strb.w	r3, [sp, #12]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f41a:	2300      	movs	r3, #0
   1f41c:	9001      	str	r0, [sp, #4]
   1f41e:	9300      	str	r3, [sp, #0]
   1f420:	461a      	mov	r2, r3
   1f422:	2101      	movs	r1, #1
   1f424:	a803      	add	r0, sp, #12
   1f426:	f7ff ff6b 	bl	1f300 <transceive>
}
   1f42a:	fab0 f080 	clz	r0, r0
   1f42e:	0940      	lsrs	r0, r0, #5
   1f430:	b005      	add	sp, #20
   1f432:	f85d fb04 	ldr.w	pc, [sp], #4

0001f436 <mlx_reset>:
bool mlx_reset(struct device *mlx_device_t) {
   1f436:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_RT};
   1f438:	23f0      	movs	r3, #240	; 0xf0
   1f43a:	f88d 300c 	strb.w	r3, [sp, #12]
  if (transceive(tx, sizeof(tx), NULL, 0, 5, mlx_device_t) != MLX90393_STATUS_RESET) {
   1f43e:	2305      	movs	r3, #5
   1f440:	9300      	str	r3, [sp, #0]
   1f442:	2300      	movs	r3, #0
   1f444:	9001      	str	r0, [sp, #4]
   1f446:	461a      	mov	r2, r3
   1f448:	2101      	movs	r1, #1
   1f44a:	a803      	add	r0, sp, #12
   1f44c:	f7ff ff58 	bl	1f300 <transceive>
}
   1f450:	1e43      	subs	r3, r0, #1
   1f452:	4258      	negs	r0, r3
   1f454:	4158      	adcs	r0, r3
   1f456:	b005      	add	sp, #20
   1f458:	f85d fb04 	ldr.w	pc, [sp], #4

0001f45c <mlx_setTrigInt>:
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1f45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1f45e:	460a      	mov	r2, r1
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1f460:	4605      	mov	r5, r0
   1f462:	460c      	mov	r4, r1
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1f464:	2001      	movs	r0, #1
   1f466:	f10d 0106 	add.w	r1, sp, #6
   1f46a:	f7ff ffb6 	bl	1f3da <readRegister>
  data &= ~0x8000;
   1f46e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f472:	f3c3 030e 	ubfx	r3, r3, #0, #15
  if (state) {
   1f476:	b94d      	cbnz	r5, 1f48c <mlx_setTrigInt+0x30>
    data |= 0x8000;
   1f478:	f8ad 3006 	strh.w	r3, [sp, #6]
  return writeRegister(MLX90393_CONF2, data, mlx_device_t);
   1f47c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1f480:	4622      	mov	r2, r4
   1f482:	2001      	movs	r0, #1
   1f484:	f7ff ff8f 	bl	1f3a6 <writeRegister>
}
   1f488:	b003      	add	sp, #12
   1f48a:	bd30      	pop	{r4, r5, pc}
    data |= 0x8000;
   1f48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1f490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1f494:	e7f0      	b.n	1f478 <mlx_setTrigInt+0x1c>

0001f496 <startBurstMode>:
uint8_t startBurstMode(struct device *mlx_device_t){
   1f496:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx[1] = {MLX90393_REG_SB | MLX90393_AXIS_ALL};  
   1f498:	231e      	movs	r3, #30
   1f49a:	f88d 300c 	strb.w	r3, [sp, #12]
    uint8_t stat = transceive(tx, sizeof(tx), NULL, 0, 0,mlx_device_t);
   1f49e:	2300      	movs	r3, #0
   1f4a0:	9001      	str	r0, [sp, #4]
   1f4a2:	9300      	str	r3, [sp, #0]
   1f4a4:	461a      	mov	r2, r3
   1f4a6:	2101      	movs	r1, #1
   1f4a8:	a803      	add	r0, sp, #12
   1f4aa:	f7ff ff29 	bl	1f300 <transceive>
    if ((stat == MLX90393_STATUS_OK) || (stat == MLX90393_STATUS_SMMODE)) {
   1f4ae:	f010 0ff7 	tst.w	r0, #247	; 0xf7
}
   1f4b2:	bf0c      	ite	eq
   1f4b4:	2001      	moveq	r0, #1
   1f4b6:	2000      	movne	r0, #0
   1f4b8:	b005      	add	sp, #20
   1f4ba:	f85d fb04 	ldr.w	pc, [sp], #4

0001f4be <mlx_init>:

  return mlx_readMeasurement(x, y, z, mlx_device_t);
  return 0;
}

bool mlx_init(struct device *mlx_device) {
   1f4be:	b510      	push	{r4, lr}

	//const struct device *mlx_device = device_get_binding("I2C_1");
  

  if (mlx_device == NULL) {
   1f4c0:	4604      	mov	r4, r0
   1f4c2:	b388      	cbz	r0, 1f528 <mlx_init+0x6a>
   1f4c4:	f003 f96a 	bl	2279c <z_device_is_ready>
    return false;
  }

  if (!device_is_ready(mlx_device)) {
   1f4c8:	b370      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_exitMode(mlx_device)){
   1f4ca:	4620      	mov	r0, r4
   1f4cc:	f7ff ffa1 	bl	1f412 <mlx_exitMode>
   1f4d0:	b350      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_reset(mlx_device)) {
   1f4d2:	4620      	mov	r0, r4
   1f4d4:	f7ff ffaf 	bl	1f436 <mlx_reset>
   1f4d8:	b330      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  /* Set gain and sensor config. */
  if (!mlx_setGain(MLX90393_GAIN_1X, mlx_device)) {
   1f4da:	4621      	mov	r1, r4
   1f4dc:	2007      	movs	r0, #7
   1f4de:	f7f2 fae5 	bl	11aac <mlx_setGain>
   1f4e2:	b308      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  /* Set resolution. */
  if (!mlx_setResolution(MLX90393_X, MLX90393_RES_16, mlx_device)){
   1f4e4:	2100      	movs	r1, #0
   1f4e6:	4622      	mov	r2, r4
   1f4e8:	4608      	mov	r0, r1
   1f4ea:	f7f2 fafb 	bl	11ae4 <mlx_setResolution>
   1f4ee:	b1d8      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Y, MLX90393_RES_16, mlx_device)){
   1f4f0:	4622      	mov	r2, r4
   1f4f2:	2100      	movs	r1, #0
   1f4f4:	2001      	movs	r0, #1
   1f4f6:	f7f2 faf5 	bl	11ae4 <mlx_setResolution>
   1f4fa:	b1a8      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Z, MLX90393_RES_16, mlx_device)){
   1f4fc:	4622      	mov	r2, r4
   1f4fe:	2100      	movs	r1, #0
   1f500:	2002      	movs	r0, #2
   1f502:	f7f2 faef 	bl	11ae4 <mlx_setResolution>
   1f506:	b178      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  /* Set oversampling. */
  if (!mlx_setOversampling(MLX90393_OSR_3, mlx_device)) {
   1f508:	4621      	mov	r1, r4
   1f50a:	2003      	movs	r0, #3
   1f50c:	f7f2 fb3e 	bl	11b8c <mlx_setOversampling>
   1f510:	b150      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  /* Set digital filtering. */
  if (!mlx_setFilter(MLX90393_FILTER_7, mlx_device)) {
   1f512:	4621      	mov	r1, r4
   1f514:	2007      	movs	r0, #7
   1f516:	f7f2 fb1d 	bl	11b54 <mlx_setFilter>
   1f51a:	b128      	cbz	r0, 1f528 <mlx_init+0x6a>
    return false;
  }

  /* set INT pin to output interrupt */
  if (!mlx_setTrigInt(true, mlx_device)) {
   1f51c:	4621      	mov	r1, r4
   1f51e:	2001      	movs	r0, #1
    return false;
  }

  return true;
   1f520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!mlx_setTrigInt(true, mlx_device)) {
   1f524:	f7ff bf9a 	b.w	1f45c <mlx_setTrigInt>
   1f528:	2000      	movs	r0, #0
   1f52a:	bd10      	pop	{r4, pc}

0001f52c <k_sleep.isra.0>:
   1f52c:	f7fc b888 	b.w	1b640 <z_impl_k_sleep>

0001f530 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f530:	4603      	mov	r3, r0
   1f532:	b140      	cbz	r0, 1f546 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f534:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f536:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f53a:	2a02      	cmp	r2, #2
   1f53c:	d006      	beq.n	1f54c <sys_notify_validate+0x1c>
   1f53e:	2a03      	cmp	r2, #3
   1f540:	d004      	beq.n	1f54c <sys_notify_validate+0x1c>
   1f542:	2a01      	cmp	r2, #1
   1f544:	d005      	beq.n	1f552 <sys_notify_validate+0x22>
		return -EINVAL;
   1f546:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f54a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f54c:	681a      	ldr	r2, [r3, #0]
   1f54e:	2a00      	cmp	r2, #0
   1f550:	d0f9      	beq.n	1f546 <sys_notify_validate+0x16>
		notify->result = 0;
   1f552:	2000      	movs	r0, #0
   1f554:	6098      	str	r0, [r3, #8]
   1f556:	4770      	bx	lr

0001f558 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f558:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f55a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f55e:	2a02      	cmp	r2, #2
{
   1f560:	b510      	push	{r4, lr}
   1f562:	4603      	mov	r3, r0
	notify->result = res;
   1f564:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f566:	d00a      	beq.n	1f57e <sys_notify_finalize+0x26>
   1f568:	2a03      	cmp	r2, #3
   1f56a:	d10b      	bne.n	1f584 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f56c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f56e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f570:	2200      	movs	r2, #0
   1f572:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f574:	b108      	cbz	r0, 1f57a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1f576:	f7fc fb2d 	bl	1bbd4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f57a:	4620      	mov	r0, r4
   1f57c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f57e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f580:	2400      	movs	r4, #0
		break;
   1f582:	e7f5      	b.n	1f570 <sys_notify_finalize+0x18>
	switch (method) {
   1f584:	2400      	movs	r4, #0
   1f586:	4620      	mov	r0, r4
   1f588:	e7f2      	b.n	1f570 <sys_notify_finalize+0x18>

0001f58a <arch_printk_char_out>:
}
   1f58a:	2000      	movs	r0, #0
   1f58c:	4770      	bx	lr

0001f58e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1f58e:	b40f      	push	{r0, r1, r2, r3}
   1f590:	b507      	push	{r0, r1, r2, lr}
   1f592:	a904      	add	r1, sp, #16
   1f594:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1f598:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1f59a:	f7f2 fc13 	bl	11dc4 <vprintk>

	va_end(ap);
}
   1f59e:	b003      	add	sp, #12
   1f5a0:	f85d eb04 	ldr.w	lr, [sp], #4
   1f5a4:	b004      	add	sp, #16
   1f5a6:	4770      	bx	lr

0001f5a8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f5a8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f5aa:	f013 0307 	ands.w	r3, r3, #7
   1f5ae:	d105      	bne.n	1f5bc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1f5b0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1f5b2:	2b00      	cmp	r3, #0
   1f5b4:	bf0c      	ite	eq
   1f5b6:	2000      	moveq	r0, #0
   1f5b8:	2003      	movne	r0, #3
   1f5ba:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1f5bc:	2b02      	cmp	r3, #2
   1f5be:	d105      	bne.n	1f5cc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1f5c0:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1f5c2:	2b00      	cmp	r3, #0
   1f5c4:	bf14      	ite	ne
   1f5c6:	2000      	movne	r0, #0
   1f5c8:	2004      	moveq	r0, #4
   1f5ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1f5cc:	2b01      	cmp	r3, #1
   1f5ce:	d105      	bne.n	1f5dc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1f5d0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1f5d2:	2b00      	cmp	r3, #0
   1f5d4:	bf0c      	ite	eq
   1f5d6:	2000      	moveq	r0, #0
   1f5d8:	2005      	movne	r0, #5
   1f5da:	4770      	bx	lr
	int evt = EVT_NOP;
   1f5dc:	2000      	movs	r0, #0
}
   1f5de:	4770      	bx	lr

0001f5e0 <notify_one>:
{
   1f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5e4:	460d      	mov	r5, r1
   1f5e6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f5e8:	4619      	mov	r1, r3
   1f5ea:	1d28      	adds	r0, r5, #4
{
   1f5ec:	4690      	mov	r8, r2
   1f5ee:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1f5f0:	f7ff ffb2 	bl	1f558 <sys_notify_finalize>
	if (cb) {
   1f5f4:	4604      	mov	r4, r0
   1f5f6:	b138      	cbz	r0, 1f608 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1f5f8:	4633      	mov	r3, r6
   1f5fa:	4642      	mov	r2, r8
   1f5fc:	4629      	mov	r1, r5
   1f5fe:	4638      	mov	r0, r7
   1f600:	46a4      	mov	ip, r4
}
   1f602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1f606:	4760      	bx	ip
}
   1f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f60c <transition_complete>:
{
   1f60c:	b410      	push	{r4}
	__asm__ volatile(
   1f60e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f612:	f3ef 8211 	mrs	r2, BASEPRI
   1f616:	f384 8812 	msr	BASEPRI_MAX, r4
   1f61a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1f61e:	6141      	str	r1, [r0, #20]
}
   1f620:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1f622:	2101      	movs	r1, #1
   1f624:	f7f2 bbdc 	b.w	11de0 <process_event>

0001f628 <validate_args>:
{
   1f628:	b510      	push	{r4, lr}
   1f62a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1f62c:	b140      	cbz	r0, 1f640 <validate_args+0x18>
   1f62e:	b139      	cbz	r1, 1f640 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1f630:	1d08      	adds	r0, r1, #4
   1f632:	f7ff ff7d 	bl	1f530 <sys_notify_validate>
	if ((rv == 0)
   1f636:	b928      	cbnz	r0, 1f644 <validate_args+0x1c>
	    && ((cli->notify.flags
   1f638:	68a3      	ldr	r3, [r4, #8]
   1f63a:	f033 0303 	bics.w	r3, r3, #3
   1f63e:	d001      	beq.n	1f644 <validate_args+0x1c>
		rv = -EINVAL;
   1f640:	f06f 0015 	mvn.w	r0, #21
}
   1f644:	bd10      	pop	{r4, pc}

0001f646 <onoff_manager_init>:
{
   1f646:	b538      	push	{r3, r4, r5, lr}
   1f648:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1f64a:	4605      	mov	r5, r0
   1f64c:	b158      	cbz	r0, 1f666 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1f64e:	b151      	cbz	r1, 1f666 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1f650:	680b      	ldr	r3, [r1, #0]
   1f652:	b143      	cbz	r3, 1f666 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1f654:	684b      	ldr	r3, [r1, #4]
   1f656:	b133      	cbz	r3, 1f666 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1f658:	221c      	movs	r2, #28
   1f65a:	2100      	movs	r1, #0
   1f65c:	f003 fe98 	bl	23390 <memset>
   1f660:	612c      	str	r4, [r5, #16]
	return 0;
   1f662:	2000      	movs	r0, #0
}
   1f664:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1f666:	f06f 0015 	mvn.w	r0, #21
   1f66a:	e7fb      	b.n	1f664 <onoff_manager_init+0x1e>

0001f66c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1f66c:	b570      	push	{r4, r5, r6, lr}
   1f66e:	4604      	mov	r4, r0
   1f670:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1f672:	f7ff ffd9 	bl	1f628 <validate_args>

	if (rv < 0) {
   1f676:	1e05      	subs	r5, r0, #0
   1f678:	db31      	blt.n	1f6de <onoff_request+0x72>
   1f67a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f67e:	f3ef 8111 	mrs	r1, BASEPRI
   1f682:	f383 8812 	msr	BASEPRI_MAX, r3
   1f686:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f68a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f68c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1f68e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1f692:	42ab      	cmp	r3, r5
   1f694:	f000 0207 	and.w	r2, r0, #7
   1f698:	d02e      	beq.n	1f6f8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1f69a:	2a02      	cmp	r2, #2
   1f69c:	d10e      	bne.n	1f6bc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1f69e:	3301      	adds	r3, #1
   1f6a0:	8363      	strh	r3, [r4, #26]
	rv = state;
   1f6a2:	4615      	mov	r5, r2
		notify = true;
   1f6a4:	2301      	movs	r3, #1
	__asm__ volatile(
   1f6a6:	f381 8811 	msr	BASEPRI, r1
   1f6aa:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1f6ae:	b1b3      	cbz	r3, 1f6de <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1f6b0:	2300      	movs	r3, #0
   1f6b2:	4631      	mov	r1, r6
   1f6b4:	4620      	mov	r0, r4
   1f6b6:	f7ff ff93 	bl	1f5e0 <notify_one>
   1f6ba:	e010      	b.n	1f6de <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1f6bc:	0783      	lsls	r3, r0, #30
   1f6be:	d001      	beq.n	1f6c4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1f6c0:	2a06      	cmp	r2, #6
   1f6c2:	d10e      	bne.n	1f6e2 <onoff_request+0x76>
	parent->next = child;
   1f6c4:	2300      	movs	r3, #0
   1f6c6:	6033      	str	r3, [r6, #0]
	return list->tail;
   1f6c8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1f6ca:	b993      	cbnz	r3, 1f6f2 <onoff_request+0x86>
	list->head = node;
   1f6cc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1f6d0:	4615      	mov	r5, r2
   1f6d2:	b962      	cbnz	r2, 1f6ee <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1f6d4:	460a      	mov	r2, r1
   1f6d6:	4620      	mov	r0, r4
   1f6d8:	2102      	movs	r1, #2
   1f6da:	f7f2 fb81 	bl	11de0 <process_event>
		}
	}

	return rv;
}
   1f6de:	4628      	mov	r0, r5
   1f6e0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1f6e2:	2a05      	cmp	r2, #5
   1f6e4:	bf0c      	ite	eq
   1f6e6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1f6ea:	f06f 0504 	mvnne.w	r5, #4
   1f6ee:	2300      	movs	r3, #0
   1f6f0:	e7d9      	b.n	1f6a6 <onoff_request+0x3a>
	parent->next = child;
   1f6f2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1f6f4:	6066      	str	r6, [r4, #4]
}
   1f6f6:	e7eb      	b.n	1f6d0 <onoff_request+0x64>
		rv = -EAGAIN;
   1f6f8:	f06f 050a 	mvn.w	r5, #10
   1f6fc:	e7f7      	b.n	1f6ee <onoff_request+0x82>

0001f6fe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1f6fe:	4604      	mov	r4, r0
   1f700:	b508      	push	{r3, lr}
   1f702:	4608      	mov	r0, r1
   1f704:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1f706:	461a      	mov	r2, r3
   1f708:	47a0      	blx	r4
	return z_impl_z_current_get();
   1f70a:	f7fb ffb3 	bl	1b674 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1f70e:	f7f4 f895 	bl	1383c <z_impl_k_thread_abort>

0001f712 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1f712:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1f716:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1f718:	0840      	lsrs	r0, r0, #1
   1f71a:	4770      	bx	lr

0001f71c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1f71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f71e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f720:	f7ff fff7 	bl	1f712 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1f724:	fab0 f080 	clz	r0, r0
   1f728:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1f72c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1f730:	00ca      	lsls	r2, r1, #3
   1f732:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1f736:	1d17      	adds	r7, r2, #4
{
   1f738:	460c      	mov	r4, r1
   1f73a:	3206      	adds	r2, #6
   1f73c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1f73e:	b956      	cbnz	r6, 1f756 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1f740:	2101      	movs	r1, #1
   1f742:	fa01 f000 	lsl.w	r0, r1, r0
   1f746:	68d9      	ldr	r1, [r3, #12]
   1f748:	4301      	orrs	r1, r0
   1f74a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1f74c:	f8cc 4010 	str.w	r4, [ip, #16]
   1f750:	53dd      	strh	r5, [r3, r7]
   1f752:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1f754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1f756:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1f758:	3104      	adds	r1, #4
   1f75a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1f75c:	53d8      	strh	r0, [r3, r7]
   1f75e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f762:	529e      	strh	r6, [r3, r2]
   1f764:	80c5      	strh	r5, [r0, #6]
   1f766:	525d      	strh	r5, [r3, r1]
   1f768:	e7f4      	b.n	1f754 <free_list_add+0x38>

0001f76a <free_list_remove_bidx>:
{
   1f76a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1f76c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1f770:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1f772:	4299      	cmp	r1, r3
   1f774:	f102 0104 	add.w	r1, r2, #4
   1f778:	d10a      	bne.n	1f790 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1f77a:	2301      	movs	r3, #1
   1f77c:	fa03 f202 	lsl.w	r2, r3, r2
   1f780:	68c3      	ldr	r3, [r0, #12]
   1f782:	ea23 0302 	bic.w	r3, r3, r2
   1f786:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1f788:	2300      	movs	r3, #0
   1f78a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1f78e:	bd10      	pop	{r4, pc}
   1f790:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1f792:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1f796:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1f79a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1f79e:	80cb      	strh	r3, [r1, #6]
   1f7a0:	8082      	strh	r2, [r0, #4]
}
   1f7a2:	e7f4      	b.n	1f78e <free_list_remove_bidx+0x24>

0001f7a4 <free_list_remove>:
{
   1f7a4:	b508      	push	{r3, lr}
   1f7a6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1f7a8:	f7ff ffb3 	bl	1f712 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1f7ac:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1f7b0:	f1c2 021f 	rsb	r2, r2, #31
   1f7b4:	4618      	mov	r0, r3
}
   1f7b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1f7ba:	f7ff bfd6 	b.w	1f76a <free_list_remove_bidx>

0001f7be <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1f7be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f7c2:	fab1 f581 	clz	r5, r1
   1f7c6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1f7ca:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1f7ce:	4603      	mov	r3, r0
	if (b->next) {
   1f7d0:	693a      	ldr	r2, [r7, #16]
{
   1f7d2:	460e      	mov	r6, r1
	if (b->next) {
   1f7d4:	b1c2      	cbz	r2, 1f808 <alloc_chunk+0x4a>
   1f7d6:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1f7da:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1f7dc:	4618      	mov	r0, r3
   1f7de:	4621      	mov	r1, r4
   1f7e0:	f7ff ff97 	bl	1f712 <chunk_size>
   1f7e4:	42b0      	cmp	r0, r6
   1f7e6:	d306      	bcc.n	1f7f6 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1f7e8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1f7ea:	4618      	mov	r0, r3
   1f7ec:	f7ff ffbd 	bl	1f76a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1f7f0:	4620      	mov	r0, r4
   1f7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1f7f6:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1f7fa:	f1b8 0801 	subs.w	r8, r8, #1
   1f7fe:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1f800:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1f802:	d001      	beq.n	1f808 <alloc_chunk+0x4a>
   1f804:	4282      	cmp	r2, r0
   1f806:	d1e8      	bne.n	1f7da <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1f808:	f1c5 0220 	rsb	r2, r5, #32
   1f80c:	f04f 34ff 	mov.w	r4, #4294967295
   1f810:	4094      	lsls	r4, r2
   1f812:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1f814:	4014      	ands	r4, r2
   1f816:	d0eb      	beq.n	1f7f0 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1f818:	fa94 f2a4 	rbit	r2, r4
   1f81c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1f820:	1d11      	adds	r1, r2, #4
   1f822:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1f826:	4621      	mov	r1, r4
   1f828:	e7df      	b.n	1f7ea <alloc_chunk+0x2c>

0001f82a <merge_chunks>:
{
   1f82a:	b538      	push	{r3, r4, r5, lr}
   1f82c:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f82e:	f7ff ff70 	bl	1f712 <chunk_size>
{
   1f832:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1f834:	4604      	mov	r4, r0
   1f836:	4611      	mov	r1, r2
   1f838:	4618      	mov	r0, r3
   1f83a:	f7ff ff6a 	bl	1f712 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1f83e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1f842:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f844:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1f846:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1f848:	4618      	mov	r0, r3
   1f84a:	f7ff ff62 	bl	1f712 <chunk_size>
	void *cmem = &buf[c];
   1f84e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1f850:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1f854:	bd38      	pop	{r3, r4, r5, pc}

0001f856 <split_chunks>:
{
   1f856:	b538      	push	{r3, r4, r5, lr}
   1f858:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1f85a:	f7ff ff5a 	bl	1f712 <chunk_size>
{
   1f85e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1f860:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1f862:	1a51      	subs	r1, r2, r1
   1f864:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1f868:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f86a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1f86c:	8060      	strh	r0, [r4, #2]
   1f86e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1f872:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1f874:	8044      	strh	r4, [r0, #2]
   1f876:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1f87a:	4618      	mov	r0, r3
   1f87c:	4611      	mov	r1, r2
   1f87e:	f7ff ff48 	bl	1f712 <chunk_size>
	void *cmem = &buf[c];
   1f882:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1f884:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1f888:	bd38      	pop	{r3, r4, r5, pc}

0001f88a <free_chunk>:
{
   1f88a:	b538      	push	{r3, r4, r5, lr}
   1f88c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1f88e:	f7ff ff40 	bl	1f712 <chunk_size>
   1f892:	460c      	mov	r4, r1
   1f894:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1f896:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f89a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1f89c:	07da      	lsls	r2, r3, #31
   1f89e:	d40a      	bmi.n	1f8b6 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1f8a0:	4628      	mov	r0, r5
   1f8a2:	f7ff ff7f 	bl	1f7a4 <free_list_remove>
	return c + chunk_size(h, c);
   1f8a6:	4621      	mov	r1, r4
   1f8a8:	4628      	mov	r0, r5
   1f8aa:	f7ff ff32 	bl	1f712 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1f8ae:	1822      	adds	r2, r4, r0
   1f8b0:	4628      	mov	r0, r5
   1f8b2:	f7ff ffba 	bl	1f82a <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1f8b6:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f8ba:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1f8bc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1f8c0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1f8c2:	07db      	lsls	r3, r3, #31
   1f8c4:	d40c      	bmi.n	1f8e0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1f8c6:	4628      	mov	r0, r5
   1f8c8:	f7ff ff6c 	bl	1f7a4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1f8cc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1f8d0:	4622      	mov	r2, r4
   1f8d2:	1a61      	subs	r1, r4, r1
   1f8d4:	4628      	mov	r0, r5
   1f8d6:	f7ff ffa8 	bl	1f82a <merge_chunks>
   1f8da:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1f8de:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1f8e0:	4621      	mov	r1, r4
   1f8e2:	4628      	mov	r0, r5
}
   1f8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1f8e8:	f7ff bf18 	b.w	1f71c <free_list_add>

0001f8ec <sys_heap_free>:
	if (mem == NULL) {
   1f8ec:	b161      	cbz	r1, 1f908 <sys_heap_free+0x1c>
   1f8ee:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f8f0:	3904      	subs	r1, #4
   1f8f2:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1f8f4:	f021 0307 	bic.w	r3, r1, #7
   1f8f8:	4403      	add	r3, r0
	free_chunk(h, c);
   1f8fa:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1f8fc:	885a      	ldrh	r2, [r3, #2]
   1f8fe:	f022 0201 	bic.w	r2, r2, #1
   1f902:	805a      	strh	r2, [r3, #2]
   1f904:	f7ff bfc1 	b.w	1f88a <free_chunk>
}
   1f908:	4770      	bx	lr

0001f90a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1f90a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1f90c:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1f90e:	b909      	cbnz	r1, 1f914 <sys_heap_alloc+0xa>
		return NULL;
   1f910:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1f912:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1f914:	68ab      	ldr	r3, [r5, #8]
   1f916:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1f91a:	d9f9      	bls.n	1f910 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f91c:	310b      	adds	r1, #11
   1f91e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1f920:	4621      	mov	r1, r4
   1f922:	4628      	mov	r0, r5
   1f924:	f7ff ff4b 	bl	1f7be <alloc_chunk>
	if (c == 0U) {
   1f928:	4606      	mov	r6, r0
   1f92a:	2800      	cmp	r0, #0
   1f92c:	d0f0      	beq.n	1f910 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1f92e:	4601      	mov	r1, r0
   1f930:	4628      	mov	r0, r5
   1f932:	f7ff feee 	bl	1f712 <chunk_size>
   1f936:	42a0      	cmp	r0, r4
   1f938:	d907      	bls.n	1f94a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1f93a:	1932      	adds	r2, r6, r4
   1f93c:	4628      	mov	r0, r5
   1f93e:	f7ff ff8a 	bl	1f856 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1f942:	4611      	mov	r1, r2
   1f944:	4628      	mov	r0, r5
   1f946:	f7ff fee9 	bl	1f71c <free_list_add>
	void *cmem = &buf[c];
   1f94a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1f94e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1f950:	8853      	ldrh	r3, [r2, #2]
   1f952:	f043 0301 	orr.w	r3, r3, #1
   1f956:	8053      	strh	r3, [r2, #2]
   1f958:	3004      	adds	r0, #4
	return mem;
   1f95a:	e7da      	b.n	1f912 <sys_heap_alloc+0x8>

0001f95c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1f95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f960:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1f962:	424a      	negs	r2, r1
   1f964:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1f968:	ea31 0202 	bics.w	r2, r1, r2
{
   1f96c:	4603      	mov	r3, r0
	if (align != rew) {
   1f96e:	d00a      	beq.n	1f986 <sys_heap_aligned_alloc+0x2a>
		return false;
   1f970:	2f04      	cmp	r7, #4
   1f972:	463a      	mov	r2, r7
   1f974:	46b9      	mov	r9, r7
   1f976:	bf28      	it	cs
   1f978:	2204      	movcs	r2, #4
		align -= rew;
   1f97a:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1f97c:	b974      	cbnz	r4, 1f99c <sys_heap_aligned_alloc+0x40>
		return NULL;
   1f97e:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1f980:	4628      	mov	r0, r5
   1f982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1f986:	2904      	cmp	r1, #4
   1f988:	d804      	bhi.n	1f994 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1f98a:	4621      	mov	r1, r4
}
   1f98c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1f990:	f7ff bfbb 	b.w	1f90a <sys_heap_alloc>
		rew = 0;
   1f994:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1f998:	2204      	movs	r2, #4
   1f99a:	e7ef      	b.n	1f97c <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1f99c:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1f99e:	68b3      	ldr	r3, [r6, #8]
   1f9a0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1f9a4:	d9eb      	bls.n	1f97e <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1f9a6:	f104 010b 	add.w	r1, r4, #11
   1f9aa:	4439      	add	r1, r7
   1f9ac:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1f9ae:	08c9      	lsrs	r1, r1, #3
   1f9b0:	4630      	mov	r0, r6
   1f9b2:	f7ff ff04 	bl	1f7be <alloc_chunk>
	if (c0 == 0) {
   1f9b6:	4680      	mov	r8, r0
   1f9b8:	2800      	cmp	r0, #0
   1f9ba:	d0e0      	beq.n	1f97e <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1f9bc:	f109 0504 	add.w	r5, r9, #4
   1f9c0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1f9c4:	1e7b      	subs	r3, r7, #1
   1f9c6:	4435      	add	r5, r6
   1f9c8:	441d      	add	r5, r3
   1f9ca:	427f      	negs	r7, r7
   1f9cc:	403d      	ands	r5, r7
   1f9ce:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f9d2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f9d4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f9d6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f9d8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1f9da:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1f9de:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1f9e0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1f9e4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1f9e8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1f9ec:	d208      	bcs.n	1fa00 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1f9ee:	4601      	mov	r1, r0
   1f9f0:	463a      	mov	r2, r7
   1f9f2:	4630      	mov	r0, r6
   1f9f4:	f7ff ff2f 	bl	1f856 <split_chunks>
		free_list_add(h, c0);
   1f9f8:	4641      	mov	r1, r8
   1f9fa:	4630      	mov	r0, r6
   1f9fc:	f7ff fe8e 	bl	1f71c <free_list_add>
	return c + chunk_size(h, c);
   1fa00:	4639      	mov	r1, r7
   1fa02:	4630      	mov	r0, r6
   1fa04:	f7ff fe85 	bl	1f712 <chunk_size>
   1fa08:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fa0a:	4284      	cmp	r4, r0
   1fa0c:	d207      	bcs.n	1fa1e <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1fa0e:	4630      	mov	r0, r6
   1fa10:	4622      	mov	r2, r4
   1fa12:	f7ff ff20 	bl	1f856 <split_chunks>
		free_list_add(h, c_end);
   1fa16:	4621      	mov	r1, r4
   1fa18:	4630      	mov	r0, r6
   1fa1a:	f7ff fe7f 	bl	1f71c <free_list_add>
	void *cmem = &buf[c];
   1fa1e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fa22:	8873      	ldrh	r3, [r6, #2]
   1fa24:	f043 0301 	orr.w	r3, r3, #1
   1fa28:	8073      	strh	r3, [r6, #2]
   1fa2a:	e7a9      	b.n	1f980 <sys_heap_aligned_alloc+0x24>

0001fa2c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fa2c:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fa2e:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fa30:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fa32:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fa36:	f021 0107 	bic.w	r1, r1, #7
{
   1fa3a:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fa3c:	1acd      	subs	r5, r1, r3
   1fa3e:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1fa40:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1fa42:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fa46:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1fa4a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fa4c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1fa4e:	2600      	movs	r6, #0
   1fa50:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1fa52:	f1c0 0020 	rsb	r0, r0, #32
   1fa56:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1fa5a:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1fa5c:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1fa5e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1fa62:	4284      	cmp	r4, r0
   1fa64:	d118      	bne.n	1fa98 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fa66:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fa68:	f040 0001 	orr.w	r0, r0, #1
   1fa6c:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1fa6e:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1fa72:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fa74:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1fa76:	801e      	strh	r6, [r3, #0]
   1fa78:	8067      	strh	r7, [r4, #2]
   1fa7a:	195c      	adds	r4, r3, r5
   1fa7c:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1fa80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fa84:	8066      	strh	r6, [r4, #2]
   1fa86:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fa88:	8850      	ldrh	r0, [r2, #2]
   1fa8a:	f040 0001 	orr.w	r0, r0, #1
   1fa8e:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1fa90:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1fa92:	4618      	mov	r0, r3
   1fa94:	f7ff be42 	b.w	1f71c <free_list_add>
		h->buckets[i].next = 0;
   1fa98:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fa9c:	e7e1      	b.n	1fa62 <sys_heap_init+0x36>

0001fa9e <_ldiv5>:
	uint32_t v_lo = *v;
   1fa9e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1faa2:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1faa4:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1faa8:	fba2 2403 	umull	r2, r4, r2, r3
   1faac:	18d5      	adds	r5, r2, r3
   1faae:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1fab2:	fba1 1303 	umull	r1, r3, r1, r3
   1fab6:	1852      	adds	r2, r2, r1
   1fab8:	eb44 0403 	adc.w	r4, r4, r3
   1fabc:	1952      	adds	r2, r2, r5
   1fabe:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1fac2:	1889      	adds	r1, r1, r2
   1fac4:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1fac8:	e9c0 1300 	strd	r1, r3, [r0]
}
   1facc:	bd30      	pop	{r4, r5, pc}

0001face <_get_digit>:
	if (*digit_count > 0) {
   1face:	680a      	ldr	r2, [r1, #0]
   1fad0:	2a00      	cmp	r2, #0
{
   1fad2:	b510      	push	{r4, lr}
   1fad4:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1fad6:	dd0f      	ble.n	1faf8 <_get_digit+0x2a>
		--*digit_count;
   1fad8:	3a01      	subs	r2, #1
   1fada:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1fadc:	681a      	ldr	r2, [r3, #0]
   1fade:	6844      	ldr	r4, [r0, #4]
   1fae0:	200a      	movs	r0, #10
   1fae2:	fba2 1200 	umull	r1, r2, r2, r0
   1fae6:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1faea:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1faec:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1faf0:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1faf4:	3030      	adds	r0, #48	; 0x30
}
   1faf6:	bd10      	pop	{r4, pc}
		rval = '0';
   1faf8:	2030      	movs	r0, #48	; 0x30
   1fafa:	e7fc      	b.n	1faf6 <_get_digit+0x28>

0001fafc <outs>:
{
   1fafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb00:	4607      	mov	r7, r0
   1fb02:	4688      	mov	r8, r1
   1fb04:	4615      	mov	r5, r2
   1fb06:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1fb08:	4614      	mov	r4, r2
   1fb0a:	42b4      	cmp	r4, r6
   1fb0c:	eba4 0005 	sub.w	r0, r4, r5
   1fb10:	d302      	bcc.n	1fb18 <outs+0x1c>
   1fb12:	b93e      	cbnz	r6, 1fb24 <outs+0x28>
   1fb14:	7823      	ldrb	r3, [r4, #0]
   1fb16:	b12b      	cbz	r3, 1fb24 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1fb18:	f814 0b01 	ldrb.w	r0, [r4], #1
   1fb1c:	4641      	mov	r1, r8
   1fb1e:	47b8      	blx	r7
		if (rc < 0) {
   1fb20:	2800      	cmp	r0, #0
   1fb22:	daf2      	bge.n	1fb0a <outs+0xe>
}
   1fb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fb28 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1fb28:	b40f      	push	{r0, r1, r2, r3}
   1fb2a:	b507      	push	{r0, r1, r2, lr}
   1fb2c:	a904      	add	r1, sp, #16
   1fb2e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1fb32:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1fb34:	f7f2 f946 	bl	11dc4 <vprintk>

	va_end(ap);
}
   1fb38:	b003      	add	sp, #12
   1fb3a:	f85d eb04 	ldr.w	lr, [sp], #4
   1fb3e:	b004      	add	sp, #16
   1fb40:	4770      	bx	lr

0001fb42 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1fb42:	4770      	bx	lr

0001fb44 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1fb44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1fb48:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1fb4c:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1fb4e:	4640      	mov	r0, r8
{
   1fb50:	461f      	mov	r7, r3
   1fb52:	460c      	mov	r4, r1
   1fb54:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1fb56:	f7ec ff48 	bl	c9ea <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1fb5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1fb5e:	9300      	str	r3, [sp, #0]
   1fb60:	b280      	uxth	r0, r0
   1fb62:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1fb66:	463b      	mov	r3, r7
   1fb68:	4632      	mov	r2, r6
   1fb6a:	4621      	mov	r1, r4
   1fb6c:	4628      	mov	r0, r5
   1fb6e:	f002 f87e 	bl	21c6e <bt_gatt_attr_read>
}
   1fb72:	b004      	add	sp, #16
   1fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fb78 <blvl_ccc_cfg_changed>:
}
   1fb78:	4770      	bx	lr

0001fb7a <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1fb7a:	2000      	movs	r0, #0
   1fb7c:	4770      	bx	lr

0001fb7e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1fb7e:	b538      	push	{r3, r4, r5, lr}
   1fb80:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1fb82:	42ab      	cmp	r3, r5
{
   1fb84:	4611      	mov	r1, r2
   1fb86:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1fb88:	d804      	bhi.n	1fb94 <_copy+0x16>
   1fb8a:	461a      	mov	r2, r3
   1fb8c:	f003 fbdf 	bl	2334e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1fb90:	4620      	mov	r0, r4
   1fb92:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1fb94:	2400      	movs	r4, #0
   1fb96:	e7fb      	b.n	1fb90 <_copy+0x12>

0001fb98 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1fb98:	f003 bbfa 	b.w	23390 <memset>

0001fb9c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1fb9c:	09c3      	lsrs	r3, r0, #7
   1fb9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fba2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1fba6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1fbaa:	b2c0      	uxtb	r0, r0
   1fbac:	4770      	bx	lr

0001fbae <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1fbae:	78cb      	ldrb	r3, [r1, #3]
   1fbb0:	7802      	ldrb	r2, [r0, #0]
   1fbb2:	4053      	eors	r3, r2
   1fbb4:	7003      	strb	r3, [r0, #0]
   1fbb6:	884b      	ldrh	r3, [r1, #2]
   1fbb8:	7842      	ldrb	r2, [r0, #1]
   1fbba:	4053      	eors	r3, r2
   1fbbc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1fbbe:	680a      	ldr	r2, [r1, #0]
   1fbc0:	7883      	ldrb	r3, [r0, #2]
   1fbc2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fbc6:	7083      	strb	r3, [r0, #2]
   1fbc8:	680a      	ldr	r2, [r1, #0]
   1fbca:	78c3      	ldrb	r3, [r0, #3]
   1fbcc:	4053      	eors	r3, r2
   1fbce:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1fbd0:	79cb      	ldrb	r3, [r1, #7]
   1fbd2:	7902      	ldrb	r2, [r0, #4]
   1fbd4:	4053      	eors	r3, r2
   1fbd6:	7103      	strb	r3, [r0, #4]
   1fbd8:	88cb      	ldrh	r3, [r1, #6]
   1fbda:	7942      	ldrb	r2, [r0, #5]
   1fbdc:	4053      	eors	r3, r2
   1fbde:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1fbe0:	684a      	ldr	r2, [r1, #4]
   1fbe2:	7983      	ldrb	r3, [r0, #6]
   1fbe4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fbe8:	7183      	strb	r3, [r0, #6]
   1fbea:	684a      	ldr	r2, [r1, #4]
   1fbec:	79c3      	ldrb	r3, [r0, #7]
   1fbee:	4053      	eors	r3, r2
   1fbf0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1fbf2:	7acb      	ldrb	r3, [r1, #11]
   1fbf4:	7a02      	ldrb	r2, [r0, #8]
   1fbf6:	4053      	eors	r3, r2
   1fbf8:	7203      	strb	r3, [r0, #8]
   1fbfa:	7a42      	ldrb	r2, [r0, #9]
   1fbfc:	894b      	ldrh	r3, [r1, #10]
   1fbfe:	4053      	eors	r3, r2
   1fc00:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1fc02:	688a      	ldr	r2, [r1, #8]
   1fc04:	7a83      	ldrb	r3, [r0, #10]
   1fc06:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fc0a:	7283      	strb	r3, [r0, #10]
   1fc0c:	688a      	ldr	r2, [r1, #8]
   1fc0e:	7ac3      	ldrb	r3, [r0, #11]
   1fc10:	4053      	eors	r3, r2
   1fc12:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1fc14:	7bcb      	ldrb	r3, [r1, #15]
   1fc16:	7b02      	ldrb	r2, [r0, #12]
   1fc18:	4053      	eors	r3, r2
   1fc1a:	7303      	strb	r3, [r0, #12]
   1fc1c:	89cb      	ldrh	r3, [r1, #14]
   1fc1e:	7b42      	ldrb	r2, [r0, #13]
   1fc20:	4053      	eors	r3, r2
   1fc22:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1fc24:	68ca      	ldr	r2, [r1, #12]
   1fc26:	7b83      	ldrb	r3, [r0, #14]
   1fc28:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1fc2c:	7383      	strb	r3, [r0, #14]
   1fc2e:	68ca      	ldr	r2, [r1, #12]
   1fc30:	7bc3      	ldrb	r3, [r0, #15]
   1fc32:	4053      	eors	r3, r2
   1fc34:	73c3      	strb	r3, [r0, #15]
}
   1fc36:	4770      	bx	lr

0001fc38 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1fc38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1fc3a:	7802      	ldrb	r2, [r0, #0]
   1fc3c:	f88d 2000 	strb.w	r2, [sp]
   1fc40:	7942      	ldrb	r2, [r0, #5]
   1fc42:	f88d 2001 	strb.w	r2, [sp, #1]
   1fc46:	7a82      	ldrb	r2, [r0, #10]
   1fc48:	f88d 2002 	strb.w	r2, [sp, #2]
   1fc4c:	7bc2      	ldrb	r2, [r0, #15]
   1fc4e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1fc52:	7902      	ldrb	r2, [r0, #4]
   1fc54:	f88d 2004 	strb.w	r2, [sp, #4]
   1fc58:	7a42      	ldrb	r2, [r0, #9]
   1fc5a:	f88d 2005 	strb.w	r2, [sp, #5]
   1fc5e:	7b82      	ldrb	r2, [r0, #14]
   1fc60:	f88d 2006 	strb.w	r2, [sp, #6]
   1fc64:	78c2      	ldrb	r2, [r0, #3]
   1fc66:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1fc6a:	7a02      	ldrb	r2, [r0, #8]
   1fc6c:	f88d 2008 	strb.w	r2, [sp, #8]
   1fc70:	7b42      	ldrb	r2, [r0, #13]
   1fc72:	f88d 2009 	strb.w	r2, [sp, #9]
   1fc76:	7882      	ldrb	r2, [r0, #2]
   1fc78:	f88d 200a 	strb.w	r2, [sp, #10]
   1fc7c:	79c2      	ldrb	r2, [r0, #7]
   1fc7e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1fc82:	7b02      	ldrb	r2, [r0, #12]
   1fc84:	f88d 200c 	strb.w	r2, [sp, #12]
   1fc88:	7842      	ldrb	r2, [r0, #1]
   1fc8a:	7ac3      	ldrb	r3, [r0, #11]
   1fc8c:	f88d 200d 	strb.w	r2, [sp, #13]
   1fc90:	7982      	ldrb	r2, [r0, #6]
   1fc92:	f88d 200e 	strb.w	r2, [sp, #14]
   1fc96:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fc9a:	2310      	movs	r3, #16
   1fc9c:	466a      	mov	r2, sp
   1fc9e:	4619      	mov	r1, r3
   1fca0:	f7ff ff6d 	bl	1fb7e <_copy>
}
   1fca4:	b005      	add	sp, #20
   1fca6:	f85d fb04 	ldr.w	pc, [sp], #4

0001fcaa <mult_row_column>:
{
   1fcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fcac:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fcae:	7808      	ldrb	r0, [r1, #0]
{
   1fcb0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1fcb2:	f7ff ff73 	bl	1fb9c <_double_byte>
   1fcb6:	4605      	mov	r5, r0
   1fcb8:	7860      	ldrb	r0, [r4, #1]
   1fcba:	f7ff ff6f 	bl	1fb9c <_double_byte>
   1fcbe:	78a2      	ldrb	r2, [r4, #2]
   1fcc0:	7863      	ldrb	r3, [r4, #1]
   1fcc2:	4053      	eors	r3, r2
   1fcc4:	78e2      	ldrb	r2, [r4, #3]
   1fcc6:	4053      	eors	r3, r2
   1fcc8:	405d      	eors	r5, r3
   1fcca:	4045      	eors	r5, r0
   1fccc:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1fcce:	7860      	ldrb	r0, [r4, #1]
   1fcd0:	7827      	ldrb	r7, [r4, #0]
   1fcd2:	f7ff ff63 	bl	1fb9c <_double_byte>
   1fcd6:	4605      	mov	r5, r0
   1fcd8:	78a0      	ldrb	r0, [r4, #2]
   1fcda:	f7ff ff5f 	bl	1fb9c <_double_byte>
   1fcde:	78a3      	ldrb	r3, [r4, #2]
   1fce0:	405f      	eors	r7, r3
   1fce2:	78e3      	ldrb	r3, [r4, #3]
   1fce4:	405f      	eors	r7, r3
   1fce6:	407d      	eors	r5, r7
   1fce8:	4045      	eors	r5, r0
   1fcea:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1fcec:	78a0      	ldrb	r0, [r4, #2]
   1fcee:	7865      	ldrb	r5, [r4, #1]
   1fcf0:	7827      	ldrb	r7, [r4, #0]
   1fcf2:	f7ff ff53 	bl	1fb9c <_double_byte>
   1fcf6:	406f      	eors	r7, r5
   1fcf8:	4605      	mov	r5, r0
   1fcfa:	78e0      	ldrb	r0, [r4, #3]
   1fcfc:	f7ff ff4e 	bl	1fb9c <_double_byte>
   1fd00:	78e3      	ldrb	r3, [r4, #3]
   1fd02:	405f      	eors	r7, r3
   1fd04:	407d      	eors	r5, r7
   1fd06:	4045      	eors	r5, r0
   1fd08:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1fd0a:	7820      	ldrb	r0, [r4, #0]
   1fd0c:	f7ff ff46 	bl	1fb9c <_double_byte>
   1fd10:	7863      	ldrb	r3, [r4, #1]
   1fd12:	7825      	ldrb	r5, [r4, #0]
   1fd14:	405d      	eors	r5, r3
   1fd16:	78a3      	ldrb	r3, [r4, #2]
   1fd18:	405d      	eors	r5, r3
   1fd1a:	4045      	eors	r5, r0
   1fd1c:	78e0      	ldrb	r0, [r4, #3]
   1fd1e:	f7ff ff3d 	bl	1fb9c <_double_byte>
   1fd22:	b2ed      	uxtb	r5, r5
   1fd24:	4045      	eors	r5, r0
   1fd26:	70f5      	strb	r5, [r6, #3]
}
   1fd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fd2a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1fd2a:	b570      	push	{r4, r5, r6, lr}
   1fd2c:	4614      	mov	r4, r2
   1fd2e:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1fd30:	4605      	mov	r5, r0
   1fd32:	2800      	cmp	r0, #0
   1fd34:	d049      	beq.n	1fdca <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1fd36:	2900      	cmp	r1, #0
   1fd38:	d049      	beq.n	1fdce <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1fd3a:	2a00      	cmp	r2, #0
   1fd3c:	d049      	beq.n	1fdd2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1fd3e:	2310      	movs	r3, #16
   1fd40:	460a      	mov	r2, r1
   1fd42:	4668      	mov	r0, sp
   1fd44:	4619      	mov	r1, r3
   1fd46:	f7ff ff1a 	bl	1fb7e <_copy>
	add_round_key(state, s->words);
   1fd4a:	4621      	mov	r1, r4
   1fd4c:	4668      	mov	r0, sp
   1fd4e:	f7ff ff2e 	bl	1fbae <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1fd52:	3410      	adds	r4, #16
   1fd54:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1fd58:	4668      	mov	r0, sp
   1fd5a:	f7f3 f965 	bl	13028 <sub_bytes>
		shift_rows(state);
   1fd5e:	4668      	mov	r0, sp
   1fd60:	f7ff ff6a 	bl	1fc38 <shift_rows>
	mult_row_column(t, s);
   1fd64:	4669      	mov	r1, sp
   1fd66:	a804      	add	r0, sp, #16
   1fd68:	f7ff ff9f 	bl	1fcaa <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1fd6c:	a901      	add	r1, sp, #4
   1fd6e:	a805      	add	r0, sp, #20
   1fd70:	f7ff ff9b 	bl	1fcaa <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1fd74:	a902      	add	r1, sp, #8
   1fd76:	a806      	add	r0, sp, #24
   1fd78:	f7ff ff97 	bl	1fcaa <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1fd7c:	a903      	add	r1, sp, #12
   1fd7e:	a807      	add	r0, sp, #28
   1fd80:	f7ff ff93 	bl	1fcaa <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1fd84:	2310      	movs	r3, #16
   1fd86:	4619      	mov	r1, r3
   1fd88:	eb0d 0203 	add.w	r2, sp, r3
   1fd8c:	4668      	mov	r0, sp
   1fd8e:	f7ff fef6 	bl	1fb7e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1fd92:	4621      	mov	r1, r4
   1fd94:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1fd96:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1fd98:	f7ff ff09 	bl	1fbae <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1fd9c:	42a6      	cmp	r6, r4
   1fd9e:	d1db      	bne.n	1fd58 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1fda0:	f7f3 f942 	bl	13028 <sub_bytes>
	shift_rows(state);
   1fda4:	4668      	mov	r0, sp
   1fda6:	f7ff ff47 	bl	1fc38 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1fdaa:	4631      	mov	r1, r6
   1fdac:	4668      	mov	r0, sp
   1fdae:	f7ff fefe 	bl	1fbae <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1fdb2:	2310      	movs	r3, #16
   1fdb4:	4619      	mov	r1, r3
   1fdb6:	466a      	mov	r2, sp
   1fdb8:	4628      	mov	r0, r5
   1fdba:	f7ff fee0 	bl	1fb7e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1fdbe:	4668      	mov	r0, sp
   1fdc0:	2210      	movs	r2, #16
   1fdc2:	2100      	movs	r1, #0
   1fdc4:	f7ff fee8 	bl	1fb98 <_set>

	return TC_CRYPTO_SUCCESS;
   1fdc8:	2001      	movs	r0, #1
}
   1fdca:	b008      	add	sp, #32
   1fdcc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1fdce:	4608      	mov	r0, r1
   1fdd0:	e7fb      	b.n	1fdca <tc_aes_encrypt+0xa0>
   1fdd2:	4610      	mov	r0, r2
   1fdd4:	e7f9      	b.n	1fdca <tc_aes_encrypt+0xa0>

0001fdd6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1fdd6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fdd8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1fdda:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1fddc:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1fde0:	2b00      	cmp	r3, #0
   1fde2:	bfb4      	ite	lt
   1fde4:	2387      	movlt	r3, #135	; 0x87
   1fde6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1fde8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1fdec:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1fdf0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1fdf2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1fdf6:	d002      	beq.n	1fdfe <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1fdf8:	7813      	ldrb	r3, [r2, #0]
   1fdfa:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1fdfc:	e7f4      	b.n	1fde8 <gf_double+0x12>
	}
}
   1fdfe:	bd10      	pop	{r4, pc}

0001fe00 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1fe00:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1fe02:	b120      	cbz	r0, 1fe0e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1fe04:	2258      	movs	r2, #88	; 0x58
   1fe06:	2100      	movs	r1, #0
   1fe08:	f7ff fec6 	bl	1fb98 <_set>
   1fe0c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fe0e:	bd08      	pop	{r3, pc}

0001fe10 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1fe10:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fe12:	4604      	mov	r4, r0
   1fe14:	b188      	cbz	r0, 1fe3a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fe16:	2210      	movs	r2, #16
   1fe18:	2100      	movs	r1, #0
   1fe1a:	f7ff febd 	bl	1fb98 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1fe1e:	2210      	movs	r2, #16
   1fe20:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1fe24:	2100      	movs	r1, #0
   1fe26:	f7ff feb7 	bl	1fb98 <_set>
	s->leftover_offset = 0;
   1fe2a:	2300      	movs	r3, #0
   1fe2c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1fe2e:	2200      	movs	r2, #0
   1fe30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fe34:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1fe38:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1fe3a:	bd10      	pop	{r4, pc}

0001fe3c <tc_cmac_setup>:
{
   1fe3c:	b570      	push	{r4, r5, r6, lr}
   1fe3e:	460d      	mov	r5, r1
   1fe40:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1fe42:	4604      	mov	r4, r0
   1fe44:	b310      	cbz	r0, 1fe8c <tc_cmac_setup+0x50>
   1fe46:	b311      	cbz	r1, 1fe8e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1fe48:	2258      	movs	r2, #88	; 0x58
   1fe4a:	2100      	movs	r1, #0
   1fe4c:	f7ff fea4 	bl	1fb98 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1fe50:	4629      	mov	r1, r5
	s->sched = sched;
   1fe52:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1fe54:	4630      	mov	r0, r6
   1fe56:	f7f3 f8f3 	bl	13040 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1fe5a:	2210      	movs	r2, #16
   1fe5c:	2100      	movs	r1, #0
   1fe5e:	4620      	mov	r0, r4
   1fe60:	f7ff fe9a 	bl	1fb98 <_set>
	gf_double (s->K1, s->iv);
   1fe64:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1fe68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1fe6a:	4621      	mov	r1, r4
   1fe6c:	4620      	mov	r0, r4
   1fe6e:	f7ff ff5c 	bl	1fd2a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1fe72:	4621      	mov	r1, r4
   1fe74:	4628      	mov	r0, r5
   1fe76:	f7ff ffae 	bl	1fdd6 <gf_double>
	gf_double (s->K2, s->K1);
   1fe7a:	4629      	mov	r1, r5
   1fe7c:	f104 0020 	add.w	r0, r4, #32
   1fe80:	f7ff ffa9 	bl	1fdd6 <gf_double>
	tc_cmac_init(s);
   1fe84:	4620      	mov	r0, r4
   1fe86:	f7ff ffc3 	bl	1fe10 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1fe8a:	2001      	movs	r0, #1
}
   1fe8c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1fe8e:	4608      	mov	r0, r1
   1fe90:	e7fc      	b.n	1fe8c <tc_cmac_setup+0x50>

0001fe92 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1fe92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe96:	460d      	mov	r5, r1
   1fe98:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1fe9a:	4604      	mov	r4, r0
   1fe9c:	2800      	cmp	r0, #0
   1fe9e:	d061      	beq.n	1ff64 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1fea0:	b912      	cbnz	r2, 1fea8 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1fea2:	2001      	movs	r0, #1
}
   1fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1fea8:	2900      	cmp	r1, #0
   1feaa:	d05b      	beq.n	1ff64 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1feac:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1feb0:	ea53 0102 	orrs.w	r1, r3, r2
   1feb4:	d056      	beq.n	1ff64 <tc_cmac_update+0xd2>
	s->countdown--;
   1feb6:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1feb8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1febc:	f142 32ff 	adc.w	r2, r2, #4294967295
   1fec0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1fec4:	f1b8 0f00 	cmp.w	r8, #0
   1fec8:	d02a      	beq.n	1ff20 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1feca:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fece:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1fed2:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fed4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1fed6:	d208      	bcs.n	1feea <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1fed8:	462a      	mov	r2, r5
   1feda:	4633      	mov	r3, r6
   1fedc:	4631      	mov	r1, r6
   1fede:	f7ff fe4e 	bl	1fb7e <_copy>
			s->leftover_offset += data_length;
   1fee2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1fee4:	4432      	add	r2, r6
   1fee6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1fee8:	e7db      	b.n	1fea2 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1feea:	463b      	mov	r3, r7
   1feec:	462a      	mov	r2, r5
   1feee:	4639      	mov	r1, r7
   1fef0:	f7ff fe45 	bl	1fb7e <_copy>
		data_length -= remaining_space;
   1fef4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1fef6:	2300      	movs	r3, #0
   1fef8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1fefa:	4446      	add	r6, r8
		data += remaining_space;
   1fefc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1fefe:	1e63      	subs	r3, r4, #1
   1ff00:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1ff04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ff08:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff0c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1ff0e:	ea82 0200 	eor.w	r2, r2, r0
   1ff12:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff14:	d1f6      	bne.n	1ff04 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ff16:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ff18:	4621      	mov	r1, r4
   1ff1a:	4620      	mov	r0, r4
   1ff1c:	f7ff ff05 	bl	1fd2a <tc_aes_encrypt>
   1ff20:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1ff24:	2e10      	cmp	r6, #16
   1ff26:	d80a      	bhi.n	1ff3e <tc_cmac_update+0xac>
	if (data_length > 0) {
   1ff28:	2e00      	cmp	r6, #0
   1ff2a:	d0ba      	beq.n	1fea2 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1ff2c:	4633      	mov	r3, r6
   1ff2e:	462a      	mov	r2, r5
   1ff30:	4631      	mov	r1, r6
   1ff32:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ff36:	f7ff fe22 	bl	1fb7e <_copy>
		s->leftover_offset = data_length;
   1ff3a:	6466      	str	r6, [r4, #68]	; 0x44
   1ff3c:	e7b1      	b.n	1fea2 <tc_cmac_update+0x10>
   1ff3e:	1e63      	subs	r3, r4, #1
   1ff40:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1ff42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ff46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff4a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1ff4c:	ea82 0200 	eor.w	r2, r2, r0
   1ff50:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff52:	d1f6      	bne.n	1ff42 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ff54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ff56:	4621      	mov	r1, r4
   1ff58:	4620      	mov	r0, r4
   1ff5a:	f7ff fee6 	bl	1fd2a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1ff5e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1ff60:	3e10      	subs	r6, #16
   1ff62:	e7df      	b.n	1ff24 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1ff64:	2000      	movs	r0, #0
   1ff66:	e79d      	b.n	1fea4 <tc_cmac_update+0x12>

0001ff68 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1ff68:	b570      	push	{r4, r5, r6, lr}
   1ff6a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1ff6c:	4605      	mov	r5, r0
   1ff6e:	b1e8      	cbz	r0, 1ffac <tc_cmac_final+0x44>
   1ff70:	b369      	cbz	r1, 1ffce <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1ff72:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1ff74:	2a10      	cmp	r2, #16
   1ff76:	d11a      	bne.n	1ffae <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1ff78:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff7a:	1e63      	subs	r3, r4, #1
   1ff7c:	3901      	subs	r1, #1
   1ff7e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1ff82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ff86:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1ff8a:	4072      	eors	r2, r6
   1ff8c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff90:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1ff92:	ea82 0206 	eor.w	r2, r2, r6
   1ff96:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ff98:	d1f3      	bne.n	1ff82 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1ff9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ff9c:	4621      	mov	r1, r4
   1ff9e:	4628      	mov	r0, r5
   1ffa0:	f7ff fec3 	bl	1fd2a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1ffa4:	4620      	mov	r0, r4
   1ffa6:	f7ff ff2b 	bl	1fe00 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1ffaa:	2001      	movs	r0, #1
}
   1ffac:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1ffae:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1ffb2:	2100      	movs	r1, #0
   1ffb4:	f1c2 0210 	rsb	r2, r2, #16
   1ffb8:	4420      	add	r0, r4
   1ffba:	f7ff fded 	bl	1fb98 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1ffbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ffc0:	4423      	add	r3, r4
   1ffc2:	2280      	movs	r2, #128	; 0x80
   1ffc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1ffc8:	f104 0120 	add.w	r1, r4, #32
   1ffcc:	e7d5      	b.n	1ff7a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1ffce:	4608      	mov	r0, r1
   1ffd0:	e7ec      	b.n	1ffac <tc_cmac_final+0x44>

0001ffd2 <abort_function>:
{
   1ffd2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1ffd4:	2000      	movs	r0, #0
   1ffd6:	f7f2 fea1 	bl	12d1c <sys_reboot>

0001ffda <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1ffda:	f002 bbe9 	b.w	227b0 <z_fatal_error>

0001ffde <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ffde:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1ffe0:	6800      	ldr	r0, [r0, #0]
   1ffe2:	f002 bbe5 	b.w	227b0 <z_fatal_error>

0001ffe6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ffe6:	2100      	movs	r1, #0
   1ffe8:	2001      	movs	r0, #1
   1ffea:	f7ff bff6 	b.w	1ffda <z_arm_fatal_error>

0001ffee <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1ffee:	b508      	push	{r3, lr}
	handler();
   1fff0:	f7f3 f9ba 	bl	13368 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1fff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1fff8:	f7f3 ba92 	b.w	13520 <z_arm_exc_exit>

0001fffc <malloc_prepare>:
}
   1fffc:	2000      	movs	r0, #0
   1fffe:	4770      	bx	lr

00020000 <_stdout_hook_default>:
}
   20000:	f04f 30ff 	mov.w	r0, #4294967295
   20004:	4770      	bx	lr

00020006 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   20006:	2806      	cmp	r0, #6
   20008:	d108      	bne.n	2001c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2000a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2000e:	2201      	movs	r2, #1
   20010:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20014:	f3bf 8f4f 	dsb	sy
        __WFE();
   20018:	bf20      	wfe
    while (true)
   2001a:	e7fd      	b.n	20018 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2001c:	4770      	bx	lr

0002001e <pm_state_exit_post_ops>:
   2001e:	2300      	movs	r3, #0
   20020:	f383 8811 	msr	BASEPRI, r3
   20024:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   20028:	4770      	bx	lr

0002002a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2002a:	b510      	push	{r4, lr}
   2002c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2002e:	7801      	ldrb	r1, [r0, #0]
   20030:	7822      	ldrb	r2, [r4, #0]
   20032:	428a      	cmp	r2, r1
{
   20034:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   20036:	d00f      	beq.n	20058 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   20038:	4669      	mov	r1, sp
   2003a:	f7f3 fd3b 	bl	13ab4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2003e:	a905      	add	r1, sp, #20
   20040:	4620      	mov	r0, r4
   20042:	f7f3 fd37 	bl	13ab4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   20046:	2210      	movs	r2, #16
   20048:	f10d 0115 	add.w	r1, sp, #21
   2004c:	f10d 0001 	add.w	r0, sp, #1
   20050:	f003 f96d 	bl	2332e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   20054:	b00a      	add	sp, #40	; 0x28
   20056:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   20058:	2a01      	cmp	r2, #1
   2005a:	d006      	beq.n	2006a <bt_uuid_cmp+0x40>
   2005c:	2a02      	cmp	r2, #2
   2005e:	d007      	beq.n	20070 <bt_uuid_cmp+0x46>
   20060:	b972      	cbnz	r2, 20080 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   20062:	8840      	ldrh	r0, [r0, #2]
   20064:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   20066:	1ac0      	subs	r0, r0, r3
   20068:	e7f4      	b.n	20054 <bt_uuid_cmp+0x2a>
   2006a:	6840      	ldr	r0, [r0, #4]
   2006c:	6863      	ldr	r3, [r4, #4]
   2006e:	e7fa      	b.n	20066 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   20070:	2210      	movs	r2, #16
   20072:	1c61      	adds	r1, r4, #1
   20074:	3001      	adds	r0, #1
}
   20076:	b00a      	add	sp, #40	; 0x28
   20078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2007c:	f003 b957 	b.w	2332e <memcmp>
	switch (u1->type) {
   20080:	f06f 0015 	mvn.w	r0, #21
   20084:	e7e6      	b.n	20054 <bt_uuid_cmp+0x2a>

00020086 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   20086:	2a04      	cmp	r2, #4
   20088:	d00a      	beq.n	200a0 <bt_uuid_create+0x1a>
   2008a:	2a10      	cmp	r2, #16
   2008c:	d00d      	beq.n	200aa <bt_uuid_create+0x24>
   2008e:	2a02      	cmp	r2, #2
   20090:	f04f 0300 	mov.w	r3, #0
   20094:	d115      	bne.n	200c2 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   20096:	7003      	strb	r3, [r0, #0]
   20098:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2009a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2009c:	2001      	movs	r0, #1
		break;
   2009e:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   200a0:	2301      	movs	r3, #1
   200a2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   200a4:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   200a6:	6042      	str	r2, [r0, #4]
		break;
   200a8:	e7f8      	b.n	2009c <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   200aa:	2302      	movs	r3, #2
   200ac:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   200b0:	f101 0310 	add.w	r3, r1, #16
   200b4:	f851 2b04 	ldr.w	r2, [r1], #4
   200b8:	f840 2b04 	str.w	r2, [r0], #4
   200bc:	4299      	cmp	r1, r3
   200be:	d1f9      	bne.n	200b4 <bt_uuid_create+0x2e>
   200c0:	e7ec      	b.n	2009c <bt_uuid_create+0x16>
	switch (data_len) {
   200c2:	4618      	mov	r0, r3
}
   200c4:	4770      	bx	lr

000200c6 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   200c6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   200c8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   200ca:	2106      	movs	r1, #6
{
   200cc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   200ce:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   200d2:	f7f9 f825 	bl	19120 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   200d6:	b918      	cbnz	r0, 200e0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   200d8:	79a3      	ldrb	r3, [r4, #6]
   200da:	f063 033f 	orn	r3, r3, #63	; 0x3f
   200de:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   200e0:	bd10      	pop	{r4, pc}

000200e2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   200e2:	280f      	cmp	r0, #15
   200e4:	d806      	bhi.n	200f4 <bt_hci_evt_get_flags+0x12>
   200e6:	280d      	cmp	r0, #13
   200e8:	d80b      	bhi.n	20102 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   200ea:	2805      	cmp	r0, #5
   200ec:	bf14      	ite	ne
   200ee:	2002      	movne	r0, #2
   200f0:	2003      	moveq	r0, #3
   200f2:	4770      	bx	lr
	switch (evt) {
   200f4:	2813      	cmp	r0, #19
   200f6:	d004      	beq.n	20102 <bt_hci_evt_get_flags+0x20>
   200f8:	281a      	cmp	r0, #26
   200fa:	bf14      	ite	ne
   200fc:	2002      	movne	r0, #2
   200fe:	2001      	moveq	r0, #1
   20100:	4770      	bx	lr
   20102:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20104:	4770      	bx	lr

00020106 <handle_event>:
{
   20106:	b410      	push	{r4}
   20108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2010c:	4604      	mov	r4, r0
   2010e:	4608      	mov	r0, r1
		if (handler->event != event) {
   20110:	7811      	ldrb	r1, [r2, #0]
   20112:	42a1      	cmp	r1, r4
   20114:	d004      	beq.n	20120 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   20116:	3208      	adds	r2, #8
   20118:	429a      	cmp	r2, r3
   2011a:	d1f9      	bne.n	20110 <handle_event+0xa>
}
   2011c:	bc10      	pop	{r4}
   2011e:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   20120:	8981      	ldrh	r1, [r0, #12]
   20122:	7853      	ldrb	r3, [r2, #1]
   20124:	4299      	cmp	r1, r3
   20126:	d3f9      	bcc.n	2011c <handle_event+0x16>
		handler->handler(buf);
   20128:	6853      	ldr	r3, [r2, #4]
}
   2012a:	bc10      	pop	{r4}
		handler->handler(buf);
   2012c:	4718      	bx	r3

0002012e <hci_data_buf_overflow>:
}
   2012e:	4770      	bx	lr

00020130 <hci_disconn_complete>:
{
   20130:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   20132:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   20134:	782e      	ldrb	r6, [r5, #0]
   20136:	b97e      	cbnz	r6, 20158 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   20138:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2013c:	f7f5 f9ca 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   20140:	4604      	mov	r4, r0
   20142:	b148      	cbz	r0, 20158 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   20144:	78eb      	ldrb	r3, [r5, #3]
   20146:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   20148:	4631      	mov	r1, r6
   2014a:	f7f5 f9cb 	bl	154e4 <bt_conn_set_state>
		bt_conn_unref(conn);
   2014e:	4620      	mov	r0, r4
}
   20150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   20154:	f000 bc76 	b.w	20a44 <bt_conn_unref>
}
   20158:	bd70      	pop	{r4, r5, r6, pc}

0002015a <le_phy_update_complete>:
{
   2015a:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2015c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2015e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   20162:	f7f5 f9b7 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   20166:	b118      	cbz	r0, 20170 <le_phy_update_complete+0x16>
}
   20168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   2016c:	f000 bc6a 	b.w	20a44 <bt_conn_unref>
}
   20170:	bd08      	pop	{r3, pc}

00020172 <le_data_len_change>:
{
   20172:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   20174:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20176:	8818      	ldrh	r0, [r3, #0]
   20178:	f7f5 f9ac 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   2017c:	b118      	cbz	r0, 20186 <le_data_len_change+0x14>
}
   2017e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   20182:	f000 bc5f 	b.w	20a44 <bt_conn_unref>
}
   20186:	bd08      	pop	{r3, pc}

00020188 <atomic_or>:
{
   20188:	4603      	mov	r3, r0
}
   2018a:	f3bf 8f5b 	dmb	ish
   2018e:	e853 0f00 	ldrex	r0, [r3]
   20192:	ea40 0201 	orr.w	r2, r0, r1
   20196:	e843 2c00 	strex	ip, r2, [r3]
   2019a:	f1bc 0f00 	cmp.w	ip, #0
   2019e:	d1f6      	bne.n	2018e <atomic_or+0x6>
   201a0:	f3bf 8f5b 	dmb	ish
   201a4:	4770      	bx	lr

000201a6 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   201a6:	2101      	movs	r1, #1
   201a8:	3008      	adds	r0, #8
   201aa:	f001 bf60 	b.w	2206e <net_buf_simple_pull_mem>

000201ae <le_conn_update_complete>:
{
   201ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   201b0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   201b2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   201b6:	f7f5 f98d 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   201ba:	4604      	mov	r4, r0
   201bc:	2800      	cmp	r0, #0
   201be:	d03c      	beq.n	2023a <le_conn_update_complete+0x8c>
	if (!evt->status) {
   201c0:	782b      	ldrb	r3, [r5, #0]
   201c2:	b9cb      	cbnz	r3, 201f8 <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   201c4:	792a      	ldrb	r2, [r5, #4]
   201c6:	78eb      	ldrb	r3, [r5, #3]
   201c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   201cc:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   201d0:	79aa      	ldrb	r2, [r5, #6]
   201d2:	796b      	ldrb	r3, [r5, #5]
   201d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   201d8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   201dc:	79eb      	ldrb	r3, [r5, #7]
   201de:	7a2a      	ldrb	r2, [r5, #8]
   201e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   201e4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   201e8:	f7f5 fa4a 	bl	15680 <notify_le_param_updated>
	bt_conn_unref(conn);
   201ec:	4620      	mov	r0, r4
}
   201ee:	b003      	add	sp, #12
   201f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   201f4:	f000 bc26 	b.w	20a44 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   201f8:	2b1a      	cmp	r3, #26
   201fa:	d1f7      	bne.n	201ec <le_conn_update_complete+0x3e>
   201fc:	78c3      	ldrb	r3, [r0, #3]
   201fe:	2b01      	cmp	r3, #1
   20200:	d1f4      	bne.n	201ec <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20202:	f44f 7100 	mov.w	r1, #512	; 0x200
   20206:	3004      	adds	r0, #4
   20208:	f7ff ffbe 	bl	20188 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   2020c:	0583      	lsls	r3, r0, #22
   2020e:	d4ed      	bmi.n	201ec <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   20210:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   20214:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   20218:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   2021c:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   20220:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   20224:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   20228:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   2022a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   2022e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   20232:	4620      	mov	r0, r4
   20234:	f7f5 fcce 	bl	15bd4 <bt_l2cap_update_conn_param>
   20238:	e7d8      	b.n	201ec <le_conn_update_complete+0x3e>
}
   2023a:	b003      	add	sp, #12
   2023c:	bd30      	pop	{r4, r5, pc}

0002023e <bt_addr_copy>:
   2023e:	680b      	ldr	r3, [r1, #0]
   20240:	6003      	str	r3, [r0, #0]
   20242:	888b      	ldrh	r3, [r1, #4]
   20244:	8083      	strh	r3, [r0, #4]
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   20246:	4770      	bx	lr

00020248 <bt_addr_le_copy>:
   20248:	680b      	ldr	r3, [r1, #0]
   2024a:	6003      	str	r3, [r0, #0]
   2024c:	888b      	ldrh	r3, [r1, #4]
   2024e:	8083      	strh	r3, [r0, #4]
   20250:	798b      	ldrb	r3, [r1, #6]
   20252:	7183      	strb	r3, [r0, #6]
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   20254:	4770      	bx	lr

00020256 <le_remote_feat_complete>:
{
   20256:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   20258:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2025a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2025e:	f7f5 f939 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   20262:	4604      	mov	r4, r0
   20264:	b198      	cbz	r0, 2028e <le_remote_feat_complete+0x38>
	if (!evt->status) {
   20266:	782b      	ldrb	r3, [r5, #0]
   20268:	b93b      	cbnz	r3, 2027a <le_remote_feat_complete+0x24>
   2026a:	f8d5 3003 	ldr.w	r3, [r5, #3]
   2026e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   20272:	f8d5 3007 	ldr.w	r3, [r5, #7]
   20276:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2027a:	1d20      	adds	r0, r4, #4
   2027c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   20280:	f7ff ff82 	bl	20188 <atomic_or>
	bt_conn_unref(conn);
   20284:	4620      	mov	r0, r4
}
   20286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2028a:	f000 bbdb 	b.w	20a44 <bt_conn_unref>
}
   2028e:	bd38      	pop	{r3, r4, r5, pc}

00020290 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20290:	f3bf 8f5b 	dmb	ish
   20294:	e850 3f00 	ldrex	r3, [r0]
   20298:	400b      	ands	r3, r1
   2029a:	e840 3200 	strex	r2, r3, [r0]
   2029e:	2a00      	cmp	r2, #0
   202a0:	d1f8      	bne.n	20294 <atomic_and.isra.0+0x4>
   202a2:	f3bf 8f5b 	dmb	ish
}
   202a6:	4770      	bx	lr

000202a8 <hci_vendor_event>:
   202a8:	4770      	bx	lr

000202aa <hci_num_completed_packets>:
{
   202aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   202ae:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   202b0:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   202b2:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   202b4:	783b      	ldrb	r3, [r7, #0]
   202b6:	429d      	cmp	r5, r3
   202b8:	db01      	blt.n	202be <hci_num_completed_packets+0x14>
}
   202ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   202be:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   202c2:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   202c6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   202ca:	f7f5 f903 	bl	154d4 <bt_conn_lookup_handle>
		if (!conn) {
   202ce:	4604      	mov	r4, r0
   202d0:	b350      	cbz	r0, 20328 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   202d2:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   202d6:	b326      	cbz	r6, 20322 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   202d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   202dc:	f3ef 8211 	mrs	r2, BASEPRI
   202e0:	f383 8812 	msr	BASEPRI_MAX, r3
   202e4:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   202e8:	69e3      	ldr	r3, [r4, #28]
   202ea:	b16b      	cbz	r3, 20308 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   202ec:	3b01      	subs	r3, #1
   202ee:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   202f0:	f382 8811 	msr	BASEPRI, r2
   202f4:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   202f8:	4620      	mov	r0, r4
   202fa:	f7f5 f83f 	bl	1537c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   202fe:	3e01      	subs	r6, #1
   20300:	f7fa fcb8 	bl	1ac74 <z_impl_k_sem_give>
   20304:	b2b6      	uxth	r6, r6
   20306:	e7e6      	b.n	202d6 <hci_num_completed_packets+0x2c>
	return list->head;
   20308:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2030a:	b12b      	cbz	r3, 20318 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2030c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2030e:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   20310:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20312:	428b      	cmp	r3, r1
	list->tail = node;
   20314:	bf08      	it	eq
   20316:	61a0      	streq	r0, [r4, #24]
   20318:	f382 8811 	msr	BASEPRI, r2
   2031c:	f3bf 8f6f 	isb	sy
			if (!node) {
   20320:	b923      	cbnz	r3, 2032c <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   20322:	4620      	mov	r0, r4
   20324:	f000 fb8e 	bl	20a44 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   20328:	3501      	adds	r5, #1
   2032a:	e7c3      	b.n	202b4 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   2032c:	f04f 0240 	mov.w	r2, #64	; 0x40
   20330:	f3ef 8111 	mrs	r1, BASEPRI
   20334:	f382 8812 	msr	BASEPRI_MAX, r2
   20338:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   2033c:	68da      	ldr	r2, [r3, #12]
   2033e:	61e2      	str	r2, [r4, #28]
	return list->tail;
   20340:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   20342:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   20346:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   2034a:	b94a      	cbnz	r2, 20360 <hci_num_completed_packets+0xb6>
	list->head = node;
   2034c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   20350:	f381 8811 	msr	BASEPRI, r1
   20354:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   20358:	4648      	mov	r0, r9
   2035a:	f7fa fdf7 	bl	1af4c <k_work_submit>
   2035e:	e7cb      	b.n	202f8 <hci_num_completed_packets+0x4e>
	parent->next = child;
   20360:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20362:	6263      	str	r3, [r4, #36]	; 0x24
}
   20364:	e7f4      	b.n	20350 <hci_num_completed_packets+0xa6>

00020366 <hci_le_read_max_data_len>:
{
   20366:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20368:	4606      	mov	r6, r0
   2036a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   2036c:	aa01      	add	r2, sp, #4
   2036e:	2100      	movs	r1, #0
   20370:	f242 002f 	movw	r0, #8239	; 0x202f
   20374:	f7f3 fdde 	bl	13f34 <bt_hci_cmd_send_sync>
	if (err) {
   20378:	4604      	mov	r4, r0
   2037a:	b948      	cbnz	r0, 20390 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   2037c:	9801      	ldr	r0, [sp, #4]
   2037e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   20380:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   20384:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   20386:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   2038a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   2038c:	f7f6 ff16 	bl	171bc <net_buf_unref>
}
   20390:	4620      	mov	r0, r4
   20392:	b002      	add	sp, #8
   20394:	bd70      	pop	{r4, r5, r6, pc}

00020396 <bt_hci_disconnect>:
{
   20396:	b570      	push	{r4, r5, r6, lr}
   20398:	4606      	mov	r6, r0
   2039a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2039c:	f240 4006 	movw	r0, #1030	; 0x406
   203a0:	2103      	movs	r1, #3
   203a2:	f7f3 fd8d 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   203a6:	4604      	mov	r4, r0
   203a8:	b168      	cbz	r0, 203c6 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   203aa:	2103      	movs	r1, #3
   203ac:	3008      	adds	r0, #8
   203ae:	f001 fe37 	bl	22020 <net_buf_simple_add>
	disconn->reason = reason;
   203b2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   203b4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   203b6:	4621      	mov	r1, r4
   203b8:	2200      	movs	r2, #0
}
   203ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   203be:	f240 4006 	movw	r0, #1030	; 0x406
   203c2:	f7f3 bdb7 	b.w	13f34 <bt_hci_cmd_send_sync>
}
   203c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   203ca:	bd70      	pop	{r4, r5, r6, pc}

000203cc <bt_le_set_data_len>:
{
   203cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203ce:	4607      	mov	r7, r0
   203d0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   203d2:	f242 0022 	movw	r0, #8226	; 0x2022
   203d6:	2106      	movs	r1, #6
{
   203d8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   203da:	f7f3 fd71 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   203de:	4604      	mov	r4, r0
   203e0:	b178      	cbz	r0, 20402 <bt_le_set_data_len+0x36>
   203e2:	2106      	movs	r1, #6
   203e4:	3008      	adds	r0, #8
   203e6:	f001 fe1b 	bl	22020 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   203ea:	883b      	ldrh	r3, [r7, #0]
   203ec:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   203ee:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   203f0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   203f2:	4621      	mov	r1, r4
   203f4:	2200      	movs	r2, #0
}
   203f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   203fa:	f242 0022 	movw	r0, #8226	; 0x2022
   203fe:	f7f3 bd99 	b.w	13f34 <bt_hci_cmd_send_sync>
}
   20402:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020408 <bt_le_set_phy>:
{
   20408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2040c:	4680      	mov	r8, r0
   2040e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20410:	f242 0032 	movw	r0, #8242	; 0x2032
   20414:	2107      	movs	r1, #7
{
   20416:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2041a:	4616      	mov	r6, r2
   2041c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2041e:	f7f3 fd4f 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   20422:	4604      	mov	r4, r0
   20424:	b198      	cbz	r0, 2044e <bt_le_set_phy+0x46>
   20426:	2107      	movs	r1, #7
   20428:	3008      	adds	r0, #8
   2042a:	f001 fdf9 	bl	22020 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2042e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20432:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20434:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   20436:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   20438:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2043a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2043e:	4621      	mov	r1, r4
   20440:	2200      	movs	r2, #0
}
   20442:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   20446:	f242 0032 	movw	r0, #8242	; 0x2032
   2044a:	f7f3 bd73 	b.w	13f34 <bt_hci_cmd_send_sync>
}
   2044e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020456 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   20456:	6880      	ldr	r0, [r0, #8]
   20458:	f7f3 bdce 	b.w	13ff8 <bt_hci_le_enh_conn_complete>

0002045c <le_legacy_conn_complete>:
{
   2045c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2045e:	6881      	ldr	r1, [r0, #8]
{
   20460:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   20462:	780b      	ldrb	r3, [r1, #0]
   20464:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   20468:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2046c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   20470:	78cb      	ldrb	r3, [r1, #3]
   20472:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   20476:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2047a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2047e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   20482:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   20486:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2048a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2048e:	7c4b      	ldrb	r3, [r1, #17]
   20490:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   20494:	a803      	add	r0, sp, #12
   20496:	3104      	adds	r1, #4
   20498:	f7ff fed6 	bl	20248 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2049c:	4669      	mov	r1, sp
   2049e:	2200      	movs	r2, #0
   204a0:	f10d 0013 	add.w	r0, sp, #19
   204a4:	9200      	str	r2, [sp, #0]
   204a6:	f8ad 2004 	strh.w	r2, [sp, #4]
   204aa:	f7ff fec8 	bl	2023e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   204ae:	9200      	str	r2, [sp, #0]
   204b0:	f10d 0019 	add.w	r0, sp, #25
   204b4:	808a      	strh	r2, [r1, #4]
   204b6:	f7ff fec2 	bl	2023e <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   204ba:	a802      	add	r0, sp, #8
   204bc:	f7f3 fd9c 	bl	13ff8 <bt_hci_le_enh_conn_complete>
}
   204c0:	b00b      	add	sp, #44	; 0x2c
   204c2:	f85d fb04 	ldr.w	pc, [sp], #4

000204c6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   204c6:	8803      	ldrh	r3, [r0, #0]
   204c8:	8842      	ldrh	r2, [r0, #2]
   204ca:	4293      	cmp	r3, r2
{
   204cc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   204ce:	d819      	bhi.n	20504 <bt_le_conn_params_valid+0x3e>
   204d0:	2b05      	cmp	r3, #5
   204d2:	d917      	bls.n	20504 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   204d4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   204d8:	d814      	bhi.n	20504 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   204da:	8883      	ldrh	r3, [r0, #4]
   204dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   204e0:	d210      	bcs.n	20504 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   204e2:	88c0      	ldrh	r0, [r0, #6]
   204e4:	f1a0 010a 	sub.w	r1, r0, #10
   204e8:	b289      	uxth	r1, r1
   204ea:	f640 4476 	movw	r4, #3190	; 0xc76
   204ee:	42a1      	cmp	r1, r4
   204f0:	d808      	bhi.n	20504 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   204f2:	3301      	adds	r3, #1
   204f4:	b29b      	uxth	r3, r3
   204f6:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   204f8:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   204fc:	bf34      	ite	cc
   204fe:	2001      	movcc	r0, #1
   20500:	2000      	movcs	r0, #0
}
   20502:	bd10      	pop	{r4, pc}
		return false;
   20504:	2000      	movs	r0, #0
   20506:	e7fc      	b.n	20502 <bt_le_conn_params_valid+0x3c>

00020508 <le_conn_param_neg_reply>:
{
   20508:	b570      	push	{r4, r5, r6, lr}
   2050a:	4606      	mov	r6, r0
   2050c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2050e:	f242 0021 	movw	r0, #8225	; 0x2021
   20512:	2103      	movs	r1, #3
   20514:	f7f3 fcd4 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   20518:	4604      	mov	r4, r0
   2051a:	b160      	cbz	r0, 20536 <le_conn_param_neg_reply+0x2e>
   2051c:	2103      	movs	r1, #3
   2051e:	3008      	adds	r0, #8
   20520:	f001 fd7e 	bl	22020 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   20524:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   20526:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20528:	4621      	mov	r1, r4
   2052a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2052e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20532:	f7f3 be71 	b.w	14218 <bt_hci_cmd_send>
}
   20536:	bd70      	pop	{r4, r5, r6, pc}

00020538 <le_conn_param_req>:
{
   20538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2053a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2053c:	78d9      	ldrb	r1, [r3, #3]
   2053e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   20540:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20542:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20546:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   2054a:	7959      	ldrb	r1, [r3, #5]
   2054c:	791a      	ldrb	r2, [r3, #4]
   2054e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20552:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   20556:	799a      	ldrb	r2, [r3, #6]
   20558:	79d9      	ldrb	r1, [r3, #7]
   2055a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2055e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20562:	7a1a      	ldrb	r2, [r3, #8]
   20564:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   20566:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   20568:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   2056c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2056e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   20572:	f7f4 ffaf 	bl	154d4 <bt_conn_lookup_handle>
	if (!conn) {
   20576:	4606      	mov	r6, r0
   20578:	b928      	cbnz	r0, 20586 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   2057a:	2102      	movs	r1, #2
   2057c:	4620      	mov	r0, r4
   2057e:	f7ff ffc3 	bl	20508 <le_conn_param_neg_reply>
}
   20582:	b003      	add	sp, #12
   20584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   20586:	4669      	mov	r1, sp
   20588:	f7f5 f8c6 	bl	15718 <le_param_req>
   2058c:	b938      	cbnz	r0, 2059e <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   2058e:	211e      	movs	r1, #30
   20590:	4620      	mov	r0, r4
   20592:	f7ff ffb9 	bl	20508 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   20596:	4630      	mov	r0, r6
   20598:	f000 fa54 	bl	20a44 <bt_conn_unref>
   2059c:	e7f1      	b.n	20582 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2059e:	210e      	movs	r1, #14
   205a0:	f242 0020 	movw	r0, #8224	; 0x2020
   205a4:	f7f3 fc8c 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   205a8:	4605      	mov	r5, r0
   205aa:	2800      	cmp	r0, #0
   205ac:	d0f3      	beq.n	20596 <le_conn_param_req+0x5e>
   205ae:	210e      	movs	r1, #14
   205b0:	3008      	adds	r0, #8
   205b2:	f001 fd35 	bl	22020 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   205b6:	220e      	movs	r2, #14
   205b8:	4604      	mov	r4, r0
   205ba:	2100      	movs	r1, #0
   205bc:	f002 fee8 	bl	23390 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   205c0:	f8bd 3000 	ldrh.w	r3, [sp]
   205c4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   205c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   205ca:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   205cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   205d0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   205d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   205d6:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   205d8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   205da:	4629      	mov	r1, r5
   205dc:	f242 0020 	movw	r0, #8224	; 0x2020
   205e0:	f7f3 fe1a 	bl	14218 <bt_hci_cmd_send>
   205e4:	e7d7      	b.n	20596 <le_conn_param_req+0x5e>

000205e6 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   205e6:	2000      	movs	r0, #0
   205e8:	4770      	bx	lr

000205ea <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   205ea:	2000      	movs	r0, #0
   205ec:	4770      	bx	lr

000205ee <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   205ee:	680b      	ldr	r3, [r1, #0]
   205f0:	6003      	str	r3, [r0, #0]
   205f2:	888b      	ldrh	r3, [r1, #4]
   205f4:	8083      	strh	r3, [r0, #4]
}
   205f6:	4770      	bx	lr

000205f8 <bt_addr_le_copy>:
   205f8:	680b      	ldr	r3, [r1, #0]
   205fa:	6003      	str	r3, [r0, #0]
   205fc:	888b      	ldrh	r3, [r1, #4]
   205fe:	8083      	strh	r3, [r0, #4]
   20600:	798b      	ldrb	r3, [r1, #6]
   20602:	7183      	strb	r3, [r0, #6]
}
   20604:	4770      	bx	lr

00020606 <bt_lookup_id_addr>:
}
   20606:	4608      	mov	r0, r1
   20608:	4770      	bx	lr

0002060a <bt_id_set_adv_private_addr>:
{
   2060a:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2060c:	2106      	movs	r1, #6
   2060e:	4668      	mov	r0, sp
   20610:	f7f8 fd86 	bl	19120 <bt_rand>
	if (err) {
   20614:	b940      	cbnz	r0, 20628 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20616:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   2061a:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2061c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20620:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   20624:	f7f4 f9d4 	bl	149d0 <set_random_address>
}
   20628:	b003      	add	sp, #12
   2062a:	f85d fb04 	ldr.w	pc, [sp], #4

0002062e <bt_id_adv_random_addr_check>:
}
   2062e:	2001      	movs	r0, #1
   20630:	4770      	bx	lr

00020632 <get_adv_channel_map>:
{
   20632:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   20634:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20638:	bf0c      	ite	eq
   2063a:	2007      	moveq	r0, #7
   2063c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2063e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   20640:	bf48      	it	mi
   20642:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20646:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20648:	bf48      	it	mi
   2064a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2064e:	4770      	bx	lr

00020650 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20650:	f3bf 8f5b 	dmb	ish
   20654:	6800      	ldr	r0, [r0, #0]
   20656:	f3bf 8f5b 	dmb	ish
}
   2065a:	4770      	bx	lr

0002065c <atomic_and>:
{
   2065c:	4603      	mov	r3, r0
}
   2065e:	f3bf 8f5b 	dmb	ish
   20662:	e853 0f00 	ldrex	r0, [r3]
   20666:	ea00 0201 	and.w	r2, r0, r1
   2066a:	e843 2c00 	strex	ip, r2, [r3]
   2066e:	f1bc 0f00 	cmp.w	ip, #0
   20672:	d1f6      	bne.n	20662 <atomic_and+0x6>
   20674:	f3bf 8f5b 	dmb	ish
   20678:	4770      	bx	lr

0002067a <bt_addr_le_copy>:
   2067a:	680b      	ldr	r3, [r1, #0]
   2067c:	6003      	str	r3, [r0, #0]
   2067e:	888b      	ldrh	r3, [r1, #4]
   20680:	8083      	strh	r3, [r0, #4]
   20682:	798b      	ldrb	r3, [r1, #6]
   20684:	7183      	strb	r3, [r0, #6]
   20686:	4770      	bx	lr

00020688 <hci_set_ad>:
{
   20688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2068c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2068e:	2120      	movs	r1, #32
{
   20690:	4682      	mov	sl, r0
   20692:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20694:	f7f3 fc14 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   20698:	4605      	mov	r5, r0
   2069a:	2800      	cmp	r0, #0
   2069c:	d04a      	beq.n	20734 <hci_set_ad+0xac>
   2069e:	2120      	movs	r1, #32
   206a0:	3008      	adds	r0, #8
   206a2:	f001 fcbd 	bl	22020 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   206a6:	2220      	movs	r2, #32
   206a8:	2100      	movs	r1, #0
   206aa:	4681      	mov	r9, r0
   206ac:	f002 fe70 	bl	23390 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   206b0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   206b4:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   206b8:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   206ba:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   206bc:	f8d4 8000 	ldr.w	r8, [r4]
   206c0:	2300      	movs	r3, #0
   206c2:	6862      	ldr	r2, [r4, #4]
   206c4:	4293      	cmp	r3, r2
   206c6:	d30d      	bcc.n	206e4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   206c8:	9b00      	ldr	r3, [sp, #0]
   206ca:	3408      	adds	r4, #8
   206cc:	42a3      	cmp	r3, r4
   206ce:	d1f5      	bne.n	206bc <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   206d0:	2200      	movs	r2, #0
   206d2:	4629      	mov	r1, r5
   206d4:	4650      	mov	r0, sl
	*data_len = set_data_len;
   206d6:	f889 6000 	strb.w	r6, [r9]
}
   206da:	b003      	add	sp, #12
   206dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   206e0:	f7f3 bc28 	b.w	13f34 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   206e4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   206e8:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   206ec:	1cb0      	adds	r0, r6, #2
   206ee:	1881      	adds	r1, r0, r2
   206f0:	291f      	cmp	r1, #31
   206f2:	d908      	bls.n	20706 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   206f4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   206f8:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   206fc:	d11f      	bne.n	2073e <hci_set_ad+0xb6>
   206fe:	2a00      	cmp	r2, #0
   20700:	dd1d      	ble.n	2073e <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   20702:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   20706:	b2d7      	uxtb	r7, r2
   20708:	1c79      	adds	r1, r7, #1
   2070a:	f80b 1006 	strb.w	r1, [fp, r6]
   2070e:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   20710:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20712:	fa5b f080 	uxtab	r0, fp, r0
   20716:	f80b c001 	strb.w	ip, [fp, r1]
   2071a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   2071e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   20720:	3702      	adds	r7, #2
   20722:	f002 fe14 	bl	2334e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   20726:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   20728:	443e      	add	r6, r7
   2072a:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   2072c:	3301      	adds	r3, #1
   2072e:	f108 0808 	add.w	r8, r8, #8
   20732:	e7c6      	b.n	206c2 <hci_set_ad+0x3a>
		return -ENOBUFS;
   20734:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   20738:	b003      	add	sp, #12
   2073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   2073e:	4628      	mov	r0, r5
   20740:	f7f6 fd3c 	bl	171bc <net_buf_unref>
		return err;
   20744:	f06f 0015 	mvn.w	r0, #21
   20748:	e7f6      	b.n	20738 <hci_set_ad+0xb0>

0002074a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2074a:	2301      	movs	r3, #1
{
   2074c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2074e:	fa03 f101 	lsl.w	r1, r3, r1
{
   20752:	4604      	mov	r4, r0
	if (val) {
   20754:	b162      	cbz	r2, 20770 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20756:	f3bf 8f5b 	dmb	ish
   2075a:	e854 3f00 	ldrex	r3, [r4]
   2075e:	430b      	orrs	r3, r1
   20760:	e844 3200 	strex	r2, r3, [r4]
   20764:	2a00      	cmp	r2, #0
   20766:	d1f8      	bne.n	2075a <atomic_set_bit_to+0x10>
   20768:	f3bf 8f5b 	dmb	ish
	}
}
   2076c:	bc10      	pop	{r4}
   2076e:	4770      	bx	lr
   20770:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20772:	43c9      	mvns	r1, r1
   20774:	f7ff bf72 	b.w	2065c <atomic_and>

00020778 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   20778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2077c:	b087      	sub	sp, #28
   2077e:	4605      	mov	r5, r0
   20780:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   20784:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   20788:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2078c:	460c      	mov	r4, r1
   2078e:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   20790:	2100      	movs	r1, #0
   20792:	2210      	movs	r2, #16
   20794:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   20796:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   20798:	f002 fdfa 	bl	23390 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2079c:	b186      	cbz	r6, 207c0 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2079e:	f7f4 f8f9 	bl	14994 <bt_get_name>
   207a2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   207a4:	2c00      	cmp	r4, #0
   207a6:	d139      	bne.n	2081c <le_adv_update.constprop.0+0xa4>
   207a8:	2f00      	cmp	r7, #0
   207aa:	d142      	bne.n	20832 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   207ac:	4658      	mov	r0, fp
   207ae:	f7ec f91c 	bl	c9ea <strlen>
   207b2:	2309      	movs	r3, #9
   207b4:	f88d 3000 	strb.w	r3, [sp]
   207b8:	f88d 0001 	strb.w	r0, [sp, #1]
   207bc:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   207c0:	2e01      	cmp	r6, #1
			d_len = 2;
   207c2:	bf0c      	ite	eq
   207c4:	2202      	moveq	r2, #2
		d_len = 1;
   207c6:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   207c8:	a902      	add	r1, sp, #8
   207ca:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   207ce:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   207d2:	bf04      	itt	eq
   207d4:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   207d8:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   207da:	f7ff ff55 	bl	20688 <hci_set_ad>
		if (err) {
   207de:	4604      	mov	r4, r0
   207e0:	b978      	cbnz	r0, 20802 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   207e2:	f1ba 0f00 	cmp.w	sl, #0
   207e6:	d126      	bne.n	20836 <le_adv_update.constprop.0+0xbe>
   207e8:	3510      	adds	r5, #16
   207ea:	f3bf 8f5b 	dmb	ish
   207ee:	e855 3f00 	ldrex	r3, [r5]
   207f2:	f043 0304 	orr.w	r3, r3, #4
   207f6:	e845 3200 	strex	r2, r3, [r5]
   207fa:	2a00      	cmp	r2, #0
   207fc:	d1f7      	bne.n	207ee <le_adv_update.constprop.0+0x76>
   207fe:	f3bf 8f5b 	dmb	ish
}
   20802:	4620      	mov	r0, r4
   20804:	b007      	add	sp, #28
   20806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2080a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2080e:	3a08      	subs	r2, #8
   20810:	2a01      	cmp	r2, #1
   20812:	d925      	bls.n	20860 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20814:	3301      	adds	r3, #1
   20816:	4598      	cmp	r8, r3
   20818:	d1f7      	bne.n	2080a <le_adv_update.constprop.0+0x92>
   2081a:	e7c5      	b.n	207a8 <le_adv_update.constprop.0+0x30>
   2081c:	2300      	movs	r3, #0
   2081e:	e7fa      	b.n	20816 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20820:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   20824:	3a08      	subs	r2, #8
   20826:	2a01      	cmp	r2, #1
   20828:	d91a      	bls.n	20860 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2082a:	3301      	adds	r3, #1
   2082c:	4599      	cmp	r9, r3
   2082e:	d1f7      	bne.n	20820 <le_adv_update.constprop.0+0xa8>
   20830:	e7bc      	b.n	207ac <le_adv_update.constprop.0+0x34>
   20832:	2300      	movs	r3, #0
   20834:	e7fa      	b.n	2082c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   20836:	2e02      	cmp	r6, #2
   20838:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2083c:	bf08      	it	eq
   2083e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20840:	a902      	add	r1, sp, #8
			d_len = 2;
   20842:	bf08      	it	eq
   20844:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20846:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2084a:	bf08      	it	eq
   2084c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   20850:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20854:	f7ff ff18 	bl	20688 <hci_set_ad>
		if (err) {
   20858:	2800      	cmp	r0, #0
   2085a:	d0c5      	beq.n	207e8 <le_adv_update.constprop.0+0x70>
   2085c:	4604      	mov	r4, r0
   2085e:	e7d0      	b.n	20802 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   20860:	f06f 0415 	mvn.w	r4, #21
   20864:	e7cd      	b.n	20802 <le_adv_update.constprop.0+0x8a>

00020866 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   20866:	6843      	ldr	r3, [r0, #4]
   20868:	f013 0008 	ands.w	r0, r3, #8
   2086c:	d00a      	beq.n	20884 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2086e:	035a      	lsls	r2, r3, #13
   20870:	d407      	bmi.n	20882 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   20872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   20876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2087a:	bf0c      	ite	eq
   2087c:	2001      	moveq	r0, #1
   2087e:	2002      	movne	r0, #2
   20880:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   20882:	2001      	movs	r0, #1
}
   20884:	4770      	bx	lr

00020886 <bt_le_adv_set_enable_legacy>:
{
   20886:	b570      	push	{r4, r5, r6, lr}
   20888:	4606      	mov	r6, r0
   2088a:	b086      	sub	sp, #24
   2088c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2088e:	f242 000a 	movw	r0, #8202	; 0x200a
   20892:	2101      	movs	r1, #1
   20894:	f7f3 fb14 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   20898:	4604      	mov	r4, r0
   2089a:	b1b0      	cbz	r0, 208ca <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   2089c:	3008      	adds	r0, #8
	if (enable) {
   2089e:	b195      	cbz	r5, 208c6 <bt_le_adv_set_enable_legacy+0x40>
   208a0:	2101      	movs	r1, #1
   208a2:	f001 fbcc 	bl	2203e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   208a6:	f106 0210 	add.w	r2, r6, #16
   208aa:	a903      	add	r1, sp, #12
   208ac:	4620      	mov	r0, r4
   208ae:	9500      	str	r5, [sp, #0]
   208b0:	2306      	movs	r3, #6
   208b2:	f7f3 faf3 	bl	13e9c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   208b6:	2200      	movs	r2, #0
   208b8:	4621      	mov	r1, r4
   208ba:	f242 000a 	movw	r0, #8202	; 0x200a
   208be:	f7f3 fb39 	bl	13f34 <bt_hci_cmd_send_sync>
}
   208c2:	b006      	add	sp, #24
   208c4:	bd70      	pop	{r4, r5, r6, pc}
   208c6:	4629      	mov	r1, r5
   208c8:	e7eb      	b.n	208a2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   208ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   208ce:	e7f8      	b.n	208c2 <bt_le_adv_set_enable_legacy+0x3c>

000208d0 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   208d0:	3018      	adds	r0, #24
   208d2:	f002 b9ed 	b.w	22cb0 <k_work_cancel_delayable>

000208d6 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   208d6:	f7f4 bc11 	b.w	150fc <bt_le_adv_stop>

000208da <tx_notify>:
{
   208da:	b570      	push	{r4, r5, r6, lr}
   208dc:	4604      	mov	r4, r0
	__asm__ volatile(
   208de:	f04f 0240 	mov.w	r2, #64	; 0x40
   208e2:	f3ef 8311 	mrs	r3, BASEPRI
   208e6:	f382 8812 	msr	BASEPRI_MAX, r2
   208ea:	f3bf 8f6f 	isb	sy
	return list->head;
   208ee:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   208f0:	b920      	cbnz	r0, 208fc <tx_notify+0x22>
	__asm__ volatile(
   208f2:	f383 8811 	msr	BASEPRI, r3
   208f6:	f3bf 8f6f 	isb	sy
}
   208fa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   208fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   208fe:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20900:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20902:	4288      	cmp	r0, r1
	list->tail = node;
   20904:	bf08      	it	eq
   20906:	6262      	streq	r2, [r4, #36]	; 0x24
   20908:	f383 8811 	msr	BASEPRI, r3
   2090c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20910:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   20914:	f7f4 fca0 	bl	15258 <tx_free>
		cb(conn, user_data);
   20918:	4631      	mov	r1, r6
   2091a:	4620      	mov	r0, r4
   2091c:	47a8      	blx	r5
	while (1) {
   2091e:	e7de      	b.n	208de <tx_notify+0x4>

00020920 <tx_complete_work>:
	tx_notify(conn);
   20920:	3828      	subs	r0, #40	; 0x28
   20922:	f7ff bfda 	b.w	208da <tx_notify>

00020926 <bt_conn_reset_rx_state>:
{
   20926:	b510      	push	{r4, lr}
   20928:	4604      	mov	r4, r0
	if (!conn->rx) {
   2092a:	6900      	ldr	r0, [r0, #16]
   2092c:	b118      	cbz	r0, 20936 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2092e:	f7f6 fc45 	bl	171bc <net_buf_unref>
	conn->rx = NULL;
   20932:	2300      	movs	r3, #0
   20934:	6123      	str	r3, [r4, #16]
}
   20936:	bd10      	pop	{r4, pc}

00020938 <conn_cleanup>:
{
   20938:	b570      	push	{r4, r5, r6, lr}
   2093a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2093c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   20940:	2200      	movs	r2, #0
   20942:	2300      	movs	r3, #0
   20944:	4630      	mov	r0, r6
   20946:	f001 fad1 	bl	21eec <net_buf_get>
   2094a:	4605      	mov	r5, r0
   2094c:	b950      	cbnz	r0, 20964 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2094e:	4620      	mov	r0, r4
   20950:	f7ff ffe9 	bl	20926 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20954:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20958:	2200      	movs	r2, #0
}
   2095a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2095e:	2300      	movs	r3, #0
   20960:	f7fa bb90 	b.w	1b084 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   20964:	6968      	ldr	r0, [r5, #20]
   20966:	b108      	cbz	r0, 2096c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   20968:	f7f4 fc76 	bl	15258 <tx_free>
		net_buf_unref(buf);
   2096c:	4628      	mov	r0, r5
   2096e:	f7f6 fc25 	bl	171bc <net_buf_unref>
   20972:	e7e5      	b.n	20940 <conn_cleanup+0x8>

00020974 <bt_conn_recv>:
{
   20974:	b570      	push	{r4, r5, r6, lr}
   20976:	4616      	mov	r6, r2
   20978:	4604      	mov	r4, r0
   2097a:	460d      	mov	r5, r1
	tx_notify(conn);
   2097c:	f7ff ffad 	bl	208da <tx_notify>
	switch (flags) {
   20980:	2e01      	cmp	r6, #1
   20982:	d017      	beq.n	209b4 <bt_conn_recv+0x40>
   20984:	2e02      	cmp	r6, #2
   20986:	d117      	bne.n	209b8 <bt_conn_recv+0x44>
		if (conn->rx) {
   20988:	6923      	ldr	r3, [r4, #16]
   2098a:	b113      	cbz	r3, 20992 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   2098c:	4620      	mov	r0, r4
   2098e:	f7ff ffca 	bl	20926 <bt_conn_reset_rx_state>
		conn->rx = buf;
   20992:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   20994:	6921      	ldr	r1, [r4, #16]
   20996:	898a      	ldrh	r2, [r1, #12]
   20998:	2a01      	cmp	r2, #1
   2099a:	d937      	bls.n	20a0c <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   2099c:	688b      	ldr	r3, [r1, #8]
   2099e:	881b      	ldrh	r3, [r3, #0]
   209a0:	3304      	adds	r3, #4
   209a2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   209a4:	429a      	cmp	r2, r3
   209a6:	d331      	bcc.n	20a0c <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   209a8:	d928      	bls.n	209fc <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   209aa:	4620      	mov	r0, r4
}
   209ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   209b0:	f7ff bfb9 	b.w	20926 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   209b4:	6920      	ldr	r0, [r4, #16]
   209b6:	b918      	cbnz	r0, 209c0 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   209b8:	4620      	mov	r0, r4
   209ba:	f7ff ffb4 	bl	20926 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   209be:	e001      	b.n	209c4 <bt_conn_recv+0x50>
		if (!buf->len) {
   209c0:	89ae      	ldrh	r6, [r5, #12]
   209c2:	b926      	cbnz	r6, 209ce <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   209c4:	4628      	mov	r0, r5
}
   209c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   209ca:	f7f6 bbf7 	b.w	171bc <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   209ce:	3008      	adds	r0, #8
   209d0:	f001 fb61 	bl	22096 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   209d4:	4286      	cmp	r6, r0
   209d6:	d907      	bls.n	209e8 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   209d8:	6921      	ldr	r1, [r4, #16]
   209da:	2200      	movs	r2, #0
   209dc:	4620      	mov	r0, r4
   209de:	f000 f9a8 	bl	20d32 <bt_l2cap_recv>
			conn->rx = NULL;
   209e2:	2300      	movs	r3, #0
   209e4:	6123      	str	r3, [r4, #16]
   209e6:	e7ed      	b.n	209c4 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   209e8:	6920      	ldr	r0, [r4, #16]
   209ea:	89aa      	ldrh	r2, [r5, #12]
   209ec:	68a9      	ldr	r1, [r5, #8]
   209ee:	3008      	adds	r0, #8
   209f0:	f001 fb1c 	bl	2202c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   209f4:	4628      	mov	r0, r5
   209f6:	f7f6 fbe1 	bl	171bc <net_buf_unref>
		break;
   209fa:	e7cb      	b.n	20994 <bt_conn_recv+0x20>
	conn->rx = NULL;
   209fc:	2300      	movs	r3, #0
   209fe:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   20a00:	4620      	mov	r0, r4
   20a02:	2201      	movs	r2, #1
}
   20a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   20a08:	f000 b993 	b.w	20d32 <bt_l2cap_recv>
}
   20a0c:	bd70      	pop	{r4, r5, r6, pc}

00020a0e <bt_conn_ref>:
{
   20a0e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20a10:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20a14:	f3bf 8f5b 	dmb	ish
   20a18:	6813      	ldr	r3, [r2, #0]
   20a1a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20a1e:	b17b      	cbz	r3, 20a40 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20a20:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20a24:	1c59      	adds	r1, r3, #1
   20a26:	e852 4f00 	ldrex	r4, [r2]
   20a2a:	429c      	cmp	r4, r3
   20a2c:	d104      	bne.n	20a38 <bt_conn_ref+0x2a>
   20a2e:	e842 1c00 	strex	ip, r1, [r2]
   20a32:	f1bc 0f00 	cmp.w	ip, #0
   20a36:	d1f6      	bne.n	20a26 <bt_conn_ref+0x18>
   20a38:	f3bf 8f5b 	dmb	ish
   20a3c:	d1ea      	bne.n	20a14 <bt_conn_ref+0x6>
}
   20a3e:	bd10      	pop	{r4, pc}
			return NULL;
   20a40:	4618      	mov	r0, r3
   20a42:	e7fc      	b.n	20a3e <bt_conn_ref+0x30>

00020a44 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   20a44:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20a48:	f3bf 8f5b 	dmb	ish
   20a4c:	e853 2f00 	ldrex	r2, [r3]
   20a50:	3a01      	subs	r2, #1
   20a52:	e843 2100 	strex	r1, r2, [r3]
   20a56:	2900      	cmp	r1, #0
   20a58:	d1f8      	bne.n	20a4c <bt_conn_unref+0x8>
   20a5a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   20a5e:	7883      	ldrb	r3, [r0, #2]
   20a60:	2b01      	cmp	r3, #1
   20a62:	d108      	bne.n	20a76 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20a64:	f3bf 8f5b 	dmb	ish
   20a68:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   20a6c:	f3bf 8f5b 	dmb	ish
   20a70:	b90b      	cbnz	r3, 20a76 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   20a72:	f7f4 bb93 	b.w	1519c <bt_le_adv_resume>
}
   20a76:	4770      	bx	lr

00020a78 <conn_lookup_handle>:
{
   20a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a7c:	4607      	mov	r7, r0
   20a7e:	460e      	mov	r6, r1
   20a80:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20a82:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20a84:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20a88:	42b4      	cmp	r4, r6
   20a8a:	d103      	bne.n	20a94 <conn_lookup_handle+0x1c>
	return NULL;
   20a8c:	2300      	movs	r3, #0
}
   20a8e:	4618      	mov	r0, r3
   20a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20a94:	fb09 7004 	mla	r0, r9, r4, r7
   20a98:	f7ff ffb9 	bl	20a0e <bt_conn_ref>
   20a9c:	4603      	mov	r3, r0
		if (!conn) {
   20a9e:	b158      	cbz	r0, 20ab8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20aa0:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20aa2:	2d01      	cmp	r5, #1
   20aa4:	d002      	beq.n	20aac <conn_lookup_handle+0x34>
   20aa6:	3d07      	subs	r5, #7
   20aa8:	2d01      	cmp	r5, #1
   20aaa:	d803      	bhi.n	20ab4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20aac:	881a      	ldrh	r2, [r3, #0]
   20aae:	4542      	cmp	r2, r8
   20ab0:	d0ed      	beq.n	20a8e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20ab2:	4618      	mov	r0, r3
   20ab4:	f7ff ffc6 	bl	20a44 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20ab8:	3401      	adds	r4, #1
   20aba:	e7e5      	b.n	20a88 <conn_lookup_handle+0x10>

00020abc <bt_conn_connected>:
{
   20abc:	b510      	push	{r4, lr}
   20abe:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   20ac0:	f7f5 f83a 	bl	15b38 <bt_l2cap_connected>
	notify_connected(conn);
   20ac4:	4620      	mov	r0, r4
}
   20ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   20aca:	f7f4 bba7 	b.w	1521c <notify_connected>

00020ace <bt_conn_get_security>:
}
   20ace:	2001      	movs	r0, #1
   20ad0:	4770      	bx	lr

00020ad2 <bt_conn_is_peer_addr_le>:
{
   20ad2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20ad4:	7a03      	ldrb	r3, [r0, #8]
   20ad6:	428b      	cmp	r3, r1
{
   20ad8:	4604      	mov	r4, r0
   20ada:	4615      	mov	r5, r2
	if (id != conn->id) {
   20adc:	d115      	bne.n	20b0a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20ade:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20ae2:	2207      	movs	r2, #7
   20ae4:	4628      	mov	r0, r5
   20ae6:	f002 fc22 	bl	2332e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   20aea:	b180      	cbz	r0, 20b0e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20aec:	78e3      	ldrb	r3, [r4, #3]
   20aee:	2207      	movs	r2, #7
   20af0:	b943      	cbnz	r3, 20b04 <bt_conn_is_peer_addr_le+0x32>
   20af2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20af6:	4628      	mov	r0, r5
   20af8:	f002 fc19 	bl	2332e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   20afc:	fab0 f080 	clz	r0, r0
   20b00:	0940      	lsrs	r0, r0, #5
}
   20b02:	bd38      	pop	{r3, r4, r5, pc}
   20b04:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20b08:	e7f5      	b.n	20af6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   20b0a:	2000      	movs	r0, #0
   20b0c:	e7f9      	b.n	20b02 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20b0e:	2001      	movs	r0, #1
   20b10:	e7f7      	b.n	20b02 <bt_conn_is_peer_addr_le+0x30>

00020b12 <bt_conn_exists_le>:
{
   20b12:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   20b14:	f7f4 fe5e 	bl	157d4 <bt_conn_lookup_addr_le>
	if (conn) {
   20b18:	b110      	cbz	r0, 20b20 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   20b1a:	f7ff ff93 	bl	20a44 <bt_conn_unref>
		return true;
   20b1e:	2001      	movs	r0, #1
}
   20b20:	bd08      	pop	{r3, pc}

00020b22 <bt_conn_le_conn_update>:
{
   20b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b24:	4607      	mov	r7, r0
   20b26:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20b28:	f242 0013 	movw	r0, #8211	; 0x2013
   20b2c:	210e      	movs	r1, #14
   20b2e:	f7f3 f9c7 	bl	13ec0 <bt_hci_cmd_create>
	if (!buf) {
   20b32:	4606      	mov	r6, r0
   20b34:	b1d0      	cbz	r0, 20b6c <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   20b36:	210e      	movs	r1, #14
   20b38:	3008      	adds	r0, #8
   20b3a:	f001 fa71 	bl	22020 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   20b3e:	220e      	movs	r2, #14
   20b40:	4604      	mov	r4, r0
   20b42:	2100      	movs	r1, #0
   20b44:	f002 fc24 	bl	23390 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20b48:	883b      	ldrh	r3, [r7, #0]
   20b4a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20b4c:	882b      	ldrh	r3, [r5, #0]
   20b4e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20b50:	886b      	ldrh	r3, [r5, #2]
   20b52:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20b54:	88ab      	ldrh	r3, [r5, #4]
   20b56:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20b58:	88eb      	ldrh	r3, [r5, #6]
   20b5a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20b5c:	4631      	mov	r1, r6
   20b5e:	2200      	movs	r2, #0
}
   20b60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20b64:	f242 0013 	movw	r0, #8211	; 0x2013
   20b68:	f7f3 b9e4 	b.w	13f34 <bt_hci_cmd_send_sync>
}
   20b6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020b72 <bt_conn_le_param_update>:
{
   20b72:	b410      	push	{r4}
	if (conn->le.interval >= param->interval_min &&
   20b74:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   20b78:	880c      	ldrh	r4, [r1, #0]
   20b7a:	429c      	cmp	r4, r3
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
   20b7c:	f100 0204 	add.w	r2, r0, #4
	if (conn->le.interval >= param->interval_min &&
   20b80:	d81c      	bhi.n	20bbc <bt_conn_le_param_update+0x4a>
   20b82:	884c      	ldrh	r4, [r1, #2]
   20b84:	429c      	cmp	r4, r3
   20b86:	d319      	bcc.n	20bbc <bt_conn_le_param_update+0x4a>
	    conn->le.interval <= param->interval_max &&
   20b88:	f8b0 40a4 	ldrh.w	r4, [r0, #164]	; 0xa4
   20b8c:	888b      	ldrh	r3, [r1, #4]
   20b8e:	429c      	cmp	r4, r3
   20b90:	d114      	bne.n	20bbc <bt_conn_le_param_update+0x4a>
	    conn->le.latency == param->latency &&
   20b92:	f8b0 40a6 	ldrh.w	r4, [r0, #166]	; 0xa6
   20b96:	88cb      	ldrh	r3, [r1, #6]
   20b98:	429c      	cmp	r4, r3
   20b9a:	d10f      	bne.n	20bbc <bt_conn_le_param_update+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20b9c:	f3bf 8f5b 	dmb	ish
   20ba0:	e852 3f00 	ldrex	r3, [r2]
   20ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   20ba8:	e842 3100 	strex	r1, r3, [r2]
   20bac:	2900      	cmp	r1, #0
   20bae:	d1f7      	bne.n	20ba0 <bt_conn_le_param_update+0x2e>
   20bb0:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   20bb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   20bb8:	bc10      	pop	{r4}
   20bba:	4770      	bx	lr
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20bbc:	f3bf 8f5b 	dmb	ish
   20bc0:	6844      	ldr	r4, [r0, #4]
   20bc2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   20bc6:	f3c4 13c0 	ubfx	r3, r4, #7, #1
   20bca:	0624      	lsls	r4, r4, #24
   20bcc:	d502      	bpl.n	20bd4 <bt_conn_le_param_update+0x62>
}
   20bce:	bc10      	pop	{r4}
			return send_conn_le_param_update(conn, param);
   20bd0:	f7f4 be40 	b.w	15854 <send_conn_le_param_update>
		conn->le.interval_min = param->interval_min;
   20bd4:	880c      	ldrh	r4, [r1, #0]
   20bd6:	f8a0 40a0 	strh.w	r4, [r0, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   20bda:	884c      	ldrh	r4, [r1, #2]
   20bdc:	f8a0 40a2 	strh.w	r4, [r0, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   20be0:	888c      	ldrh	r4, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   20be2:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   20be4:	f8a0 40a8 	strh.w	r4, [r0, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   20be8:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20bec:	f3bf 8f5b 	dmb	ish
   20bf0:	e852 1f00 	ldrex	r1, [r2]
   20bf4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   20bf8:	e842 1000 	strex	r0, r1, [r2]
   20bfc:	2800      	cmp	r0, #0
   20bfe:	d1f7      	bne.n	20bf0 <bt_conn_le_param_update+0x7e>
   20c00:	f3bf 8f5b 	dmb	ish
	return 0;
   20c04:	4618      	mov	r0, r3
   20c06:	e7d7      	b.n	20bb8 <bt_conn_le_param_update+0x46>

00020c08 <l2cap_connected>:
}
   20c08:	4770      	bx	lr

00020c0a <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   20c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c0c:	4607      	mov	r7, r0
   20c0e:	460e      	mov	r6, r1
   20c10:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   20c12:	2300      	movs	r3, #0
   20c14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20c18:	2104      	movs	r1, #4
   20c1a:	2000      	movs	r0, #0
   20c1c:	f7f4 fd1e 	bl	1565c <bt_conn_create_pdu_timeout>
	if (!buf) {
   20c20:	4604      	mov	r4, r0
   20c22:	b130      	cbz	r0, 20c32 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   20c24:	2104      	movs	r1, #4
   20c26:	3008      	adds	r0, #8
   20c28:	f001 f9fa 	bl	22020 <net_buf_simple_add>
	hdr->code = code;
   20c2c:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   20c2e:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   20c30:	8045      	strh	r5, [r0, #2]
}
   20c32:	4620      	mov	r0, r4
   20c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020c36 <l2cap_disconnected>:
   20c36:	4770      	bx	lr

00020c38 <bt_l2cap_chan_del>:
{
   20c38:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   20c3a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   20c3e:	4604      	mov	r4, r0
	if (!chan->conn) {
   20c40:	b123      	cbz	r3, 20c4c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   20c42:	686b      	ldr	r3, [r5, #4]
   20c44:	b103      	cbz	r3, 20c48 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   20c46:	4798      	blx	r3
	chan->conn = NULL;
   20c48:	2300      	movs	r3, #0
   20c4a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   20c4c:	68e3      	ldr	r3, [r4, #12]
   20c4e:	b10b      	cbz	r3, 20c54 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   20c50:	4620      	mov	r0, r4
   20c52:	4798      	blx	r3
	if (ops->released) {
   20c54:	69eb      	ldr	r3, [r5, #28]
   20c56:	b11b      	cbz	r3, 20c60 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   20c58:	4620      	mov	r0, r4
}
   20c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   20c5e:	4718      	bx	r3
}
   20c60:	bd70      	pop	{r4, r5, r6, pc}

00020c62 <bt_l2cap_disconnected>:
	return list->head;
   20c62:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   20c64:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20c66:	b160      	cbz	r0, 20c82 <bt_l2cap_disconnected+0x20>
	return node->next;
   20c68:	f850 4908 	ldr.w	r4, [r0], #-8
   20c6c:	b104      	cbz	r4, 20c70 <bt_l2cap_disconnected+0xe>
   20c6e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   20c70:	f7ff ffe2 	bl	20c38 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   20c74:	b12c      	cbz	r4, 20c82 <bt_l2cap_disconnected+0x20>
   20c76:	68a3      	ldr	r3, [r4, #8]
   20c78:	b103      	cbz	r3, 20c7c <bt_l2cap_disconnected+0x1a>
   20c7a:	3b08      	subs	r3, #8
{
   20c7c:	4620      	mov	r0, r4
   20c7e:	461c      	mov	r4, r3
   20c80:	e7f6      	b.n	20c70 <bt_l2cap_disconnected+0xe>
}
   20c82:	bd10      	pop	{r4, pc}

00020c84 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   20c84:	3104      	adds	r1, #4
   20c86:	f7f4 bce9 	b.w	1565c <bt_conn_create_pdu_timeout>

00020c8a <bt_l2cap_send_cb>:
{
   20c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c8e:	4614      	mov	r4, r2
   20c90:	4605      	mov	r5, r0
   20c92:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   20c94:	f102 0008 	add.w	r0, r2, #8
   20c98:	2104      	movs	r1, #4
   20c9a:	461e      	mov	r6, r3
   20c9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   20ca0:	f001 f9d5 	bl	2204e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20ca4:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   20ca6:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   20ca8:	3a04      	subs	r2, #4
   20caa:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20cac:	4643      	mov	r3, r8
   20cae:	4632      	mov	r2, r6
   20cb0:	4621      	mov	r1, r4
   20cb2:	4628      	mov	r0, r5
}
   20cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   20cb8:	f7f4 bb98 	b.w	153ec <bt_conn_send_cb>

00020cbc <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   20cbc:	898b      	ldrh	r3, [r1, #12]
   20cbe:	2b03      	cmp	r3, #3
{
   20cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20cc2:	4605      	mov	r5, r0
   20cc4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   20cc6:	d927      	bls.n	20d18 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   20cc8:	2104      	movs	r1, #4
   20cca:	f104 0008 	add.w	r0, r4, #8
   20cce:	f001 f9ce 	bl	2206e <net_buf_simple_pull_mem>
	if (buf->len != len) {
   20cd2:	89a3      	ldrh	r3, [r4, #12]
   20cd4:	8842      	ldrh	r2, [r0, #2]
   20cd6:	429a      	cmp	r2, r3
   20cd8:	d11e      	bne.n	20d18 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   20cda:	7841      	ldrb	r1, [r0, #1]
   20cdc:	b1e1      	cbz	r1, 20d18 <l2cap_recv+0x5c>
	switch (hdr->code) {
   20cde:	7803      	ldrb	r3, [r0, #0]
   20ce0:	2b01      	cmp	r3, #1
   20ce2:	d019      	beq.n	20d18 <l2cap_recv+0x5c>
   20ce4:	2b13      	cmp	r3, #19
   20ce6:	d017      	beq.n	20d18 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20ce8:	2202      	movs	r2, #2
   20cea:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   20cec:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   20cee:	f7ff ff8c 	bl	20c0a <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   20cf2:	4604      	mov	r4, r0
   20cf4:	b180      	cbz	r0, 20d18 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   20cf6:	2102      	movs	r1, #2
   20cf8:	3008      	adds	r0, #8
   20cfa:	f001 f991 	bl	22020 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   20cfe:	2300      	movs	r3, #0
   20d00:	7003      	strb	r3, [r0, #0]
   20d02:	7043      	strb	r3, [r0, #1]
   20d04:	4622      	mov	r2, r4
   20d06:	9300      	str	r3, [sp, #0]
   20d08:	2105      	movs	r1, #5
   20d0a:	4628      	mov	r0, r5
   20d0c:	f7ff ffbd 	bl	20c8a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   20d10:	b110      	cbz	r0, 20d18 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   20d12:	4620      	mov	r0, r4
   20d14:	f7f6 fa52 	bl	171bc <net_buf_unref>
}
   20d18:	2000      	movs	r0, #0
   20d1a:	b003      	add	sp, #12
   20d1c:	bd30      	pop	{r4, r5, pc}

00020d1e <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   20d1e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20d20:	b130      	cbz	r0, 20d30 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20d22:	8983      	ldrh	r3, [r0, #12]
   20d24:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   20d26:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   20d2a:	d001      	beq.n	20d30 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   20d2c:	6880      	ldr	r0, [r0, #8]
   20d2e:	e7f7      	b.n	20d20 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   20d30:	4770      	bx	lr

00020d32 <bt_l2cap_recv>:
{
   20d32:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   20d34:	898b      	ldrh	r3, [r1, #12]
   20d36:	2b03      	cmp	r3, #3
{
   20d38:	4605      	mov	r5, r0
   20d3a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   20d3c:	d804      	bhi.n	20d48 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   20d3e:	4620      	mov	r0, r4
}
   20d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   20d44:	f7f6 ba3a 	b.w	171bc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   20d48:	2104      	movs	r1, #4
   20d4a:	f104 0008 	add.w	r0, r4, #8
   20d4e:	f001 f98e 	bl	2206e <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   20d52:	8841      	ldrh	r1, [r0, #2]
   20d54:	4628      	mov	r0, r5
   20d56:	f7ff ffe2 	bl	20d1e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   20d5a:	2800      	cmp	r0, #0
   20d5c:	d0ef      	beq.n	20d3e <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   20d5e:	6843      	ldr	r3, [r0, #4]
   20d60:	4621      	mov	r1, r4
   20d62:	691b      	ldr	r3, [r3, #16]
   20d64:	4798      	blx	r3
   20d66:	e7ea      	b.n	20d3e <bt_l2cap_recv+0xc>

00020d68 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   20d68:	4770      	bx	lr

00020d6a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   20d6a:	4603      	mov	r3, r0
	return list->head;
   20d6c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   20d6e:	b128      	cbz	r0, 20d7c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d70:	6859      	ldr	r1, [r3, #4]
	return node->next;
   20d72:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20d74:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d76:	4288      	cmp	r0, r1
	list->tail = node;
   20d78:	bf08      	it	eq
   20d7a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   20d7c:	4770      	bx	lr

00020d7e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   20d7e:	4603      	mov	r3, r0
	size_t bytes = 0;
   20d80:	2000      	movs	r0, #0

	while (buf) {
   20d82:	b903      	cbnz	r3, 20d86 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   20d84:	4770      	bx	lr
		bytes += buf->len;
   20d86:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   20d88:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   20d8a:	4410      	add	r0, r2
		buf = buf->frags;
   20d8c:	e7f9      	b.n	20d82 <net_buf_frags_len+0x4>

00020d8e <att_sent>:
	if (chan->ops->sent) {
   20d8e:	684b      	ldr	r3, [r1, #4]
   20d90:	695b      	ldr	r3, [r3, #20]
{
   20d92:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   20d94:	b103      	cbz	r3, 20d98 <att_sent+0xa>
		chan->ops->sent(chan);
   20d96:	4718      	bx	r3
}
   20d98:	4770      	bx	lr

00020d9a <attr_read_type_cb>:
{
   20d9a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   20d9c:	68d4      	ldr	r4, [r2, #12]
   20d9e:	7823      	ldrb	r3, [r4, #0]
   20da0:	3102      	adds	r1, #2
   20da2:	b913      	cbnz	r3, 20daa <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   20da4:	7021      	strb	r1, [r4, #0]
	return true;
   20da6:	2001      	movs	r0, #1
   20da8:	e006      	b.n	20db8 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   20daa:	428b      	cmp	r3, r1
   20dac:	d0fb      	beq.n	20da6 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   20dae:	8983      	ldrh	r3, [r0, #12]
   20db0:	3b02      	subs	r3, #2
   20db2:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   20db4:	2000      	movs	r0, #0
   20db6:	6110      	str	r0, [r2, #16]
}
   20db8:	bd10      	pop	{r4, pc}

00020dba <att_prepare_write_req>:
}
   20dba:	2006      	movs	r0, #6
   20dbc:	4770      	bx	lr

00020dbe <att_op_get_type>:
	switch (op) {
   20dbe:	2852      	cmp	r0, #82	; 0x52
   20dc0:	d830      	bhi.n	20e24 <att_op_get_type+0x66>
   20dc2:	b388      	cbz	r0, 20e28 <att_op_get_type+0x6a>
   20dc4:	1e43      	subs	r3, r0, #1
   20dc6:	2b51      	cmp	r3, #81	; 0x51
   20dc8:	d82e      	bhi.n	20e28 <att_op_get_type+0x6a>
   20dca:	e8df f003 	tbb	[pc, r3]
   20dce:	3933      	.short	0x3933
   20dd0:	39333933 	.word	0x39333933
   20dd4:	39333933 	.word	0x39333933
   20dd8:	39333933 	.word	0x39333933
   20ddc:	39333933 	.word	0x39333933
   20de0:	392d2d33 	.word	0x392d2d33
   20de4:	2d333933 	.word	0x2d333933
   20de8:	29372d35 	.word	0x29372d35
   20dec:	2d33392d 	.word	0x2d33392d
   20df0:	2d2d2d35 	.word	0x2d2d2d35
   20df4:	2d2d2d2d 	.word	0x2d2d2d2d
   20df8:	2d2d2d2d 	.word	0x2d2d2d2d
   20dfc:	2d2d2d2d 	.word	0x2d2d2d2d
   20e00:	2d2d2d2d 	.word	0x2d2d2d2d
   20e04:	2d2d2d2d 	.word	0x2d2d2d2d
   20e08:	2d2d2d2d 	.word	0x2d2d2d2d
   20e0c:	2d2d2d2d 	.word	0x2d2d2d2d
   20e10:	2d2d2d2d 	.word	0x2d2d2d2d
   20e14:	2d2d2d2d 	.word	0x2d2d2d2d
   20e18:	2d2d2d2d 	.word	0x2d2d2d2d
   20e1c:	3b2d2d2d 	.word	0x3b2d2d2d
   20e20:	2004      	movs	r0, #4
   20e22:	4770      	bx	lr
   20e24:	28d2      	cmp	r0, #210	; 0xd2
   20e26:	d00d      	beq.n	20e44 <att_op_get_type+0x86>
		return ATT_COMMAND;
   20e28:	f010 0f40 	tst.w	r0, #64	; 0x40
   20e2c:	bf0c      	ite	eq
   20e2e:	2006      	moveq	r0, #6
   20e30:	2000      	movne	r0, #0
   20e32:	4770      	bx	lr
		return ATT_RESPONSE;
   20e34:	2002      	movs	r0, #2
   20e36:	4770      	bx	lr
		return ATT_NOTIFICATION;
   20e38:	2003      	movs	r0, #3
   20e3a:	4770      	bx	lr
		return ATT_INDICATION;
   20e3c:	2005      	movs	r0, #5
   20e3e:	4770      	bx	lr
		return ATT_REQUEST;
   20e40:	2001      	movs	r0, #1
   20e42:	4770      	bx	lr
		return ATT_COMMAND;
   20e44:	2000      	movs	r0, #0
}
   20e46:	4770      	bx	lr

00020e48 <bt_gatt_foreach_attr>:
{
   20e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20e4a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   20e4e:	2300      	movs	r3, #0
   20e50:	9300      	str	r3, [sp, #0]
   20e52:	461a      	mov	r2, r3
   20e54:	f7f5 fd98 	bl	16988 <bt_gatt_foreach_attr_type>
}
   20e58:	b005      	add	sp, #20
   20e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00020e5e <find_type_cb>:
{
   20e5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   20e62:	f8d2 9000 	ldr.w	r9, [r2]
{
   20e66:	b091      	sub	sp, #68	; 0x44
   20e68:	4607      	mov	r7, r0
   20e6a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   20e6c:	2500      	movs	r5, #0
   20e6e:	f642 0301 	movw	r3, #10241	; 0x2801
   20e72:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   20e74:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   20e78:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   20e7c:	a90b      	add	r1, sp, #44	; 0x2c
{
   20e7e:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   20e80:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   20e84:	f7ff f8d1 	bl	2002a <bt_uuid_cmp>
   20e88:	2800      	cmp	r0, #0
   20e8a:	d079      	beq.n	20f80 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   20e8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   20e90:	6838      	ldr	r0, [r7, #0]
   20e92:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   20e96:	a90b      	add	r1, sp, #44	; 0x2c
   20e98:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   20e9c:	f7ff f8c5 	bl	2002a <bt_uuid_cmp>
   20ea0:	b138      	cbz	r0, 20eb2 <find_type_cb+0x54>
		if (data->group &&
   20ea2:	68a3      	ldr	r3, [r4, #8]
   20ea4:	b11b      	cbz	r3, 20eae <find_type_cb+0x50>
   20ea6:	885a      	ldrh	r2, [r3, #2]
   20ea8:	42b2      	cmp	r2, r6
   20eaa:	d200      	bcs.n	20eae <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   20eac:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   20eae:	2001      	movs	r0, #1
   20eb0:	e009      	b.n	20ec6 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   20eb2:	6861      	ldr	r1, [r4, #4]
   20eb4:	4608      	mov	r0, r1
   20eb6:	f7ff ff62 	bl	20d7e <net_buf_frags_len>
   20eba:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   20ebe:	1a1b      	subs	r3, r3, r0
   20ec0:	2b03      	cmp	r3, #3
   20ec2:	d803      	bhi.n	20ecc <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   20ec4:	2000      	movs	r0, #0
}
   20ec6:	b011      	add	sp, #68	; 0x44
   20ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   20ecc:	4608      	mov	r0, r1
   20ece:	f001 f885 	bl	21fdc <net_buf_frag_last>
   20ed2:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   20ed4:	6860      	ldr	r0, [r4, #4]
   20ed6:	f7ff ff52 	bl	20d7e <net_buf_frags_len>
   20eda:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   20ede:	f105 0b08 	add.w	fp, r5, #8
   20ee2:	ebaa 0a00 	sub.w	sl, sl, r0
   20ee6:	4658      	mov	r0, fp
   20ee8:	f001 f8d5 	bl	22096 <net_buf_simple_tailroom>
   20eec:	4582      	cmp	sl, r0
   20eee:	d23f      	bcs.n	20f70 <find_type_cb+0x112>
   20ef0:	6860      	ldr	r0, [r4, #4]
   20ef2:	f7ff ff44 	bl	20d7e <net_buf_frags_len>
   20ef6:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   20efa:	1a18      	subs	r0, r3, r0
	if (!len) {
   20efc:	b970      	cbnz	r0, 20f1c <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   20efe:	6863      	ldr	r3, [r4, #4]
   20f00:	7998      	ldrb	r0, [r3, #6]
   20f02:	f7f6 f897 	bl	17034 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   20f06:	2200      	movs	r2, #0
   20f08:	2300      	movs	r3, #0
   20f0a:	f000 ffea 	bl	21ee2 <net_buf_alloc_fixed>
		if (!frag) {
   20f0e:	4605      	mov	r5, r0
   20f10:	2800      	cmp	r0, #0
   20f12:	d0d7      	beq.n	20ec4 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   20f14:	4601      	mov	r1, r0
   20f16:	6860      	ldr	r0, [r4, #4]
   20f18:	f001 f871 	bl	21ffe <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   20f1c:	2300      	movs	r3, #0
   20f1e:	9300      	str	r3, [sp, #0]
   20f20:	f8d7 9004 	ldr.w	r9, [r7, #4]
   20f24:	4639      	mov	r1, r7
   20f26:	2310      	movs	r3, #16
   20f28:	aa02      	add	r2, sp, #8
   20f2a:	4640      	mov	r0, r8
   20f2c:	47c8      	blx	r9
	if (read < 0) {
   20f2e:	1e07      	subs	r7, r0, #0
   20f30:	db26      	blt.n	20f80 <find_type_cb+0x122>
	if (read != data->value_len) {
   20f32:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   20f34:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   20f36:	42ba      	cmp	r2, r7
   20f38:	d01e      	beq.n	20f78 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   20f3a:	4601      	mov	r1, r0
   20f3c:	a80b      	add	r0, sp, #44	; 0x2c
   20f3e:	f7ff f8a2 	bl	20086 <bt_uuid_create>
   20f42:	b1e8      	cbz	r0, 20f80 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   20f44:	b2fa      	uxtb	r2, r7
   20f46:	a902      	add	r1, sp, #8
   20f48:	a806      	add	r0, sp, #24
   20f4a:	f7ff f89c 	bl	20086 <bt_uuid_create>
   20f4e:	b1b8      	cbz	r0, 20f80 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   20f50:	a906      	add	r1, sp, #24
   20f52:	a80b      	add	r0, sp, #44	; 0x2c
   20f54:	f7ff f869 	bl	2002a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   20f58:	b990      	cbnz	r0, 20f80 <find_type_cb+0x122>
	data->err = 0x00;
   20f5a:	2300      	movs	r3, #0
   20f5c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   20f5e:	2104      	movs	r1, #4
   20f60:	f105 0008 	add.w	r0, r5, #8
   20f64:	f001 f85c 	bl	22020 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   20f68:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   20f6a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   20f6c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   20f6e:	e79e      	b.n	20eae <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   20f70:	4658      	mov	r0, fp
   20f72:	f001 f890 	bl	22096 <net_buf_simple_tailroom>
   20f76:	e7c1      	b.n	20efc <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   20f78:	a902      	add	r1, sp, #8
   20f7a:	f002 f9d8 	bl	2332e <memcmp>
   20f7e:	e7eb      	b.n	20f58 <find_type_cb+0xfa>
	data->group = NULL;
   20f80:	2300      	movs	r3, #0
   20f82:	60a3      	str	r3, [r4, #8]
   20f84:	e793      	b.n	20eae <find_type_cb+0x50>

00020f86 <att_chan_mtu_updated>:
{
   20f86:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   20f88:	6806      	ldr	r6, [r0, #0]
	return list->head;
   20f8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20f8c:	b1c3      	cbz	r3, 20fc0 <att_chan_mtu_updated+0x3a>
   20f8e:	461a      	mov	r2, r3
	return node->next;
   20f90:	f852 49e4 	ldr.w	r4, [r2], #-228
   20f94:	b104      	cbz	r4, 20f98 <att_chan_mtu_updated+0x12>
   20f96:	3ce4      	subs	r4, #228	; 0xe4
{
   20f98:	2300      	movs	r3, #0
   20f9a:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   20f9c:	4290      	cmp	r0, r2
   20f9e:	d007      	beq.n	20fb0 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   20fa0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   20fa2:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   20fa4:	42a9      	cmp	r1, r5
   20fa6:	bf38      	it	cc
   20fa8:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   20faa:	4293      	cmp	r3, r2
   20fac:	bf38      	it	cc
   20fae:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   20fb0:	b13c      	cbz	r4, 20fc2 <att_chan_mtu_updated+0x3c>
   20fb2:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
   20fb6:	b105      	cbz	r5, 20fba <att_chan_mtu_updated+0x34>
   20fb8:	3de4      	subs	r5, #228	; 0xe4
{
   20fba:	4622      	mov	r2, r4
   20fbc:	462c      	mov	r4, r5
   20fbe:	e7ed      	b.n	20f9c <att_chan_mtu_updated+0x16>
   20fc0:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   20fc2:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   20fc4:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   20fc6:	428c      	cmp	r4, r1
   20fc8:	d801      	bhi.n	20fce <att_chan_mtu_updated+0x48>
   20fca:	429a      	cmp	r2, r3
   20fcc:	d909      	bls.n	20fe2 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   20fce:	429a      	cmp	r2, r3
   20fd0:	bf38      	it	cc
   20fd2:	461a      	movcc	r2, r3
   20fd4:	42a1      	cmp	r1, r4
   20fd6:	6830      	ldr	r0, [r6, #0]
   20fd8:	bf38      	it	cc
   20fda:	4621      	movcc	r1, r4
}
   20fdc:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   20fde:	f7f5 bfe3 	b.w	16fa8 <bt_gatt_att_max_mtu_changed>
}
   20fe2:	bc70      	pop	{r4, r5, r6}
   20fe4:	4770      	bx	lr

00020fe6 <attr_read_group_cb>:
	if (!data->rsp->len) {
   20fe6:	68d0      	ldr	r0, [r2, #12]
   20fe8:	7803      	ldrb	r3, [r0, #0]
   20fea:	3104      	adds	r1, #4
   20fec:	b913      	cbnz	r3, 20ff4 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   20fee:	7001      	strb	r1, [r0, #0]
	return true;
   20ff0:	2001      	movs	r0, #1
}
   20ff2:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   20ff4:	428b      	cmp	r3, r1
   20ff6:	d0fb      	beq.n	20ff0 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   20ff8:	6891      	ldr	r1, [r2, #8]
   20ffa:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   20ffc:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   20ffe:	3b04      	subs	r3, #4
   21000:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21002:	6110      	str	r0, [r2, #16]
		return false;
   21004:	4770      	bx	lr

00021006 <att_get>:
{
   21006:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   21008:	7a83      	ldrb	r3, [r0, #10]
   2100a:	2b07      	cmp	r3, #7
   2100c:	d001      	beq.n	21012 <att_get+0xc>
		return NULL;
   2100e:	2000      	movs	r0, #0
}
   21010:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21012:	2104      	movs	r1, #4
   21014:	f7ff fe83 	bl	20d1e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21018:	2800      	cmp	r0, #0
   2101a:	d0f8      	beq.n	2100e <att_get+0x8>
	return att_chan->att;
   2101c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   21020:	e7f6      	b.n	21010 <att_get+0xa>

00021022 <chan_req_sent>:
	if (chan->req) {
   21022:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   21026:	b12b      	cbz	r3, 21034 <chan_req_sent+0x12>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   21028:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2102c:	2300      	movs	r3, #0
   2102e:	30b0      	adds	r0, #176	; 0xb0
   21030:	f7fa b828 	b.w	1b084 <k_work_reschedule>
}
   21034:	4770      	bx	lr

00021036 <write_cb>:
{
   21036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21038:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2103a:	4601      	mov	r1, r0
{
   2103c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2103e:	222a      	movs	r2, #42	; 0x2a
   21040:	6820      	ldr	r0, [r4, #0]
   21042:	f000 fe7f 	bl	21d44 <bt_gatt_check_perm>
   21046:	4605      	mov	r5, r0
   21048:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2104a:	bb20      	cbnz	r0, 21096 <write_cb+0x60>
	if (!data->req) {
   2104c:	7a23      	ldrb	r3, [r4, #8]
   2104e:	b1ab      	cbz	r3, 2107c <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   21050:	2b18      	cmp	r3, #24
   21052:	bf14      	ite	ne
   21054:	2300      	movne	r3, #0
   21056:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   21058:	9301      	str	r3, [sp, #4]
   2105a:	8a63      	ldrh	r3, [r4, #18]
   2105c:	9300      	str	r3, [sp, #0]
   2105e:	68b7      	ldr	r7, [r6, #8]
   21060:	8a23      	ldrh	r3, [r4, #16]
   21062:	68e2      	ldr	r2, [r4, #12]
   21064:	6820      	ldr	r0, [r4, #0]
   21066:	4631      	mov	r1, r6
   21068:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2106a:	1e03      	subs	r3, r0, #0
   2106c:	db08      	blt.n	21080 <write_cb+0x4a>
   2106e:	8a22      	ldrh	r2, [r4, #16]
   21070:	4293      	cmp	r3, r2
   21072:	d10e      	bne.n	21092 <write_cb+0x5c>
	data->err = 0U;
   21074:	2300      	movs	r3, #0
   21076:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   21078:	2501      	movs	r5, #1
   2107a:	e007      	b.n	2108c <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2107c:	2302      	movs	r3, #2
   2107e:	e7eb      	b.n	21058 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   21080:	f113 0fff 	cmn.w	r3, #255	; 0xff
   21084:	d305      	bcc.n	21092 <write_cb+0x5c>
		return -err;
   21086:	425b      	negs	r3, r3
   21088:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2108a:	7523      	strb	r3, [r4, #20]
}
   2108c:	4628      	mov	r0, r5
   2108e:	b003      	add	sp, #12
   21090:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   21092:	230e      	movs	r3, #14
   21094:	e7f9      	b.n	2108a <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   21096:	2500      	movs	r5, #0
   21098:	e7f8      	b.n	2108c <write_cb+0x56>

0002109a <find_info_cb>:
{
   2109a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2109c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2109e:	6816      	ldr	r6, [r2, #0]
{
   210a0:	4605      	mov	r5, r0
   210a2:	460f      	mov	r7, r1
   210a4:	4614      	mov	r4, r2
	if (!data->rsp) {
   210a6:	b963      	cbnz	r3, 210c2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   210a8:	6850      	ldr	r0, [r2, #4]
   210aa:	2101      	movs	r1, #1
   210ac:	3008      	adds	r0, #8
   210ae:	f000 ffb7 	bl	22020 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   210b2:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   210b4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   210b6:	781b      	ldrb	r3, [r3, #0]
   210b8:	2b00      	cmp	r3, #0
   210ba:	bf0c      	ite	eq
   210bc:	2301      	moveq	r3, #1
   210be:	2302      	movne	r3, #2
   210c0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   210c2:	68a3      	ldr	r3, [r4, #8]
   210c4:	781b      	ldrb	r3, [r3, #0]
   210c6:	2b01      	cmp	r3, #1
   210c8:	d003      	beq.n	210d2 <find_info_cb+0x38>
   210ca:	2b02      	cmp	r3, #2
   210cc:	d018      	beq.n	21100 <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   210ce:	2000      	movs	r0, #0
   210d0:	e015      	b.n	210fe <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   210d2:	682b      	ldr	r3, [r5, #0]
   210d4:	781b      	ldrb	r3, [r3, #0]
   210d6:	2b00      	cmp	r3, #0
   210d8:	d1f9      	bne.n	210ce <find_info_cb+0x34>
   210da:	6860      	ldr	r0, [r4, #4]
   210dc:	2104      	movs	r1, #4
   210de:	3008      	adds	r0, #8
   210e0:	f000 ff9e 	bl	22020 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   210e4:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   210e6:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   210e8:	885b      	ldrh	r3, [r3, #2]
   210ea:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   210ec:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   210ee:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   210f0:	899b      	ldrh	r3, [r3, #12]
   210f2:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   210f4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   210f6:	2804      	cmp	r0, #4
   210f8:	bf94      	ite	ls
   210fa:	2000      	movls	r0, #0
   210fc:	2001      	movhi	r0, #1
}
   210fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21100:	682b      	ldr	r3, [r5, #0]
   21102:	781b      	ldrb	r3, [r3, #0]
   21104:	2b02      	cmp	r3, #2
   21106:	d1e2      	bne.n	210ce <find_info_cb+0x34>
   21108:	6860      	ldr	r0, [r4, #4]
   2110a:	2112      	movs	r1, #18
   2110c:	3008      	adds	r0, #8
   2110e:	f000 ff87 	bl	22020 <net_buf_simple_add>
   21112:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21114:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   21116:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   21118:	f823 7b02 	strh.w	r7, [r3], #2
   2111c:	1c51      	adds	r1, r2, #1
   2111e:	3211      	adds	r2, #17
   21120:	f851 0b04 	ldr.w	r0, [r1], #4
   21124:	f843 0b04 	str.w	r0, [r3], #4
   21128:	4291      	cmp	r1, r2
   2112a:	d1f9      	bne.n	21120 <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   2112c:	6863      	ldr	r3, [r4, #4]
   2112e:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   21130:	899b      	ldrh	r3, [r3, #12]
   21132:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21134:	2812      	cmp	r0, #18
   21136:	e7df      	b.n	210f8 <find_info_cb+0x5e>

00021138 <att_chan_read>:
{
   21138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2113c:	4680      	mov	r8, r0
   2113e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21140:	4610      	mov	r0, r2
{
   21142:	4699      	mov	r9, r3
   21144:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21146:	f7ff fe1a 	bl	20d7e <net_buf_frags_len>
   2114a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2114e:	4283      	cmp	r3, r0
{
   21150:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21152:	d97a      	bls.n	2124a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   21154:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21158:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2115a:	4630      	mov	r0, r6
   2115c:	f000 ff3e 	bl	21fdc <net_buf_frag_last>
	size_t len, total = 0;
   21160:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   21164:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   21166:	4630      	mov	r0, r6
   21168:	f7ff fe09 	bl	20d7e <net_buf_frags_len>
   2116c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   21170:	f105 0708 	add.w	r7, r5, #8
   21174:	1a24      	subs	r4, r4, r0
   21176:	4638      	mov	r0, r7
   21178:	f000 ff8d 	bl	22096 <net_buf_simple_tailroom>
   2117c:	4284      	cmp	r4, r0
   2117e:	d211      	bcs.n	211a4 <att_chan_read+0x6c>
   21180:	4630      	mov	r0, r6
   21182:	f7ff fdfc 	bl	20d7e <net_buf_frags_len>
   21186:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2118a:	1a24      	subs	r4, r4, r0
		if (!len) {
   2118c:	bb34      	cbnz	r4, 211dc <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2118e:	79b0      	ldrb	r0, [r6, #6]
   21190:	f7f5 ff50 	bl	17034 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21194:	2200      	movs	r2, #0
   21196:	2300      	movs	r3, #0
   21198:	f000 fea3 	bl	21ee2 <net_buf_alloc_fixed>
			if (!frag) {
   2119c:	4605      	mov	r5, r0
   2119e:	b930      	cbnz	r0, 211ae <att_chan_read+0x76>
	return total;
   211a0:	4657      	mov	r7, sl
   211a2:	e02c      	b.n	211fe <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   211a4:	4638      	mov	r0, r7
   211a6:	f000 ff76 	bl	22096 <net_buf_simple_tailroom>
   211aa:	4604      	mov	r4, r0
   211ac:	e7ee      	b.n	2118c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   211ae:	4601      	mov	r1, r0
   211b0:	4630      	mov	r0, r6
   211b2:	f000 ff24 	bl	21ffe <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   211b6:	4630      	mov	r0, r6
   211b8:	f7ff fde1 	bl	20d7e <net_buf_frags_len>
   211bc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   211c0:	f105 0708 	add.w	r7, r5, #8
   211c4:	1a24      	subs	r4, r4, r0
   211c6:	4638      	mov	r0, r7
   211c8:	f000 ff65 	bl	22096 <net_buf_simple_tailroom>
   211cc:	4284      	cmp	r4, r0
   211ce:	d21a      	bcs.n	21206 <att_chan_read+0xce>
   211d0:	4630      	mov	r0, r6
   211d2:	f7ff fdd4 	bl	20d7e <net_buf_frags_len>
   211d6:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   211da:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   211dc:	68a9      	ldr	r1, [r5, #8]
   211de:	89aa      	ldrh	r2, [r5, #12]
   211e0:	f8db 7004 	ldr.w	r7, [fp, #4]
   211e4:	9803      	ldr	r0, [sp, #12]
   211e6:	f8cd 9000 	str.w	r9, [sp]
   211ea:	440a      	add	r2, r1
   211ec:	b2a3      	uxth	r3, r4
   211ee:	4659      	mov	r1, fp
   211f0:	47b8      	blx	r7
		if (read < 0) {
   211f2:	1e07      	subs	r7, r0, #0
   211f4:	da0c      	bge.n	21210 <att_chan_read+0xd8>
				return total;
   211f6:	f1ba 0f00 	cmp.w	sl, #0
   211fa:	bf18      	it	ne
   211fc:	4657      	movne	r7, sl
}
   211fe:	4638      	mov	r0, r7
   21200:	b005      	add	sp, #20
   21202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21206:	4638      	mov	r0, r7
   21208:	f000 ff45 	bl	22096 <net_buf_simple_tailroom>
   2120c:	4604      	mov	r4, r0
   2120e:	e7e5      	b.n	211dc <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21212:	b993      	cbnz	r3, 2123a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   21214:	4639      	mov	r1, r7
   21216:	f105 0008 	add.w	r0, r5, #8
   2121a:	f000 ff01 	bl	22020 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2121e:	4630      	mov	r0, r6
   21220:	f7ff fdad 	bl	20d7e <net_buf_frags_len>
   21224:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   21228:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2122a:	4283      	cmp	r3, r0
		total += read;
   2122c:	44ba      	add	sl, r7
		offset += read;
   2122e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21232:	d9b5      	bls.n	211a0 <att_chan_read+0x68>
   21234:	42a7      	cmp	r7, r4
   21236:	d096      	beq.n	21166 <att_chan_read+0x2e>
   21238:	e7b2      	b.n	211a0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2123a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2123c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2123e:	4639      	mov	r1, r7
   21240:	4628      	mov	r0, r5
   21242:	4798      	blx	r3
   21244:	2800      	cmp	r0, #0
   21246:	d1e5      	bne.n	21214 <att_chan_read+0xdc>
   21248:	e7aa      	b.n	211a0 <att_chan_read+0x68>
		return 0;
   2124a:	2700      	movs	r7, #0
   2124c:	e7d7      	b.n	211fe <att_chan_read+0xc6>

0002124e <chan_req_send>:
{
   2124e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21250:	688f      	ldr	r7, [r1, #8]
{
   21252:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21254:	4638      	mov	r0, r7
   21256:	f7ff fd92 	bl	20d7e <net_buf_frags_len>
   2125a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   2125c:	4283      	cmp	r3, r0
{
   2125e:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   21260:	d30d      	bcc.n	2127e <chan_req_send+0x30>
	req->buf = NULL;
   21262:	2600      	movs	r6, #0
	chan->req = req;
   21264:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	err = chan_send(chan, buf, NULL);
   21268:	4632      	mov	r2, r6
	req->buf = NULL;
   2126a:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2126c:	4620      	mov	r0, r4
   2126e:	4639      	mov	r1, r7
   21270:	f7f4 fd5a 	bl	15d28 <chan_send>
	if (err) {
   21274:	b110      	cbz	r0, 2127c <chan_req_send+0x2e>
		req->buf = buf;
   21276:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   21278:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
}
   2127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2127e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21282:	e7fb      	b.n	2127c <chan_req_send+0x2e>

00021284 <process_queue>:
{
   21284:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   21286:	2200      	movs	r2, #0
{
   21288:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2128a:	2300      	movs	r3, #0
   2128c:	4608      	mov	r0, r1
{
   2128e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   21290:	f000 fe2c 	bl	21eec <net_buf_get>
	if (buf) {
   21294:	4605      	mov	r5, r0
   21296:	b160      	cbz	r0, 212b2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   21298:	4601      	mov	r1, r0
   2129a:	2200      	movs	r2, #0
   2129c:	4620      	mov	r0, r4
   2129e:	f7f4 fd43 	bl	15d28 <chan_send>
		if (err) {
   212a2:	4604      	mov	r4, r0
   212a4:	b118      	cbz	r0, 212ae <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   212a6:	4629      	mov	r1, r5
   212a8:	4630      	mov	r0, r6
   212aa:	f001 fbf2 	bl	22a92 <k_queue_prepend>
}
   212ae:	4620      	mov	r0, r4
   212b0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   212b2:	f06f 0401 	mvn.w	r4, #1
   212b6:	e7fa      	b.n	212ae <process_queue+0x2a>

000212b8 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   212b8:	b510      	push	{r4, lr}
	return list->head;
   212ba:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   212bc:	2200      	movs	r2, #0
   212be:	b153      	cbz	r3, 212d6 <sys_slist_find_and_remove.isra.0+0x1e>
   212c0:	428b      	cmp	r3, r1
   212c2:	d10e      	bne.n	212e2 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   212c4:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   212c6:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   212c8:	b932      	cbnz	r2, 212d8 <sys_slist_find_and_remove.isra.0+0x20>
   212ca:	42a1      	cmp	r1, r4
	list->head = node;
   212cc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   212ce:	d100      	bne.n	212d2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   212d0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   212d2:	2300      	movs	r3, #0
   212d4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   212d6:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   212d8:	42a1      	cmp	r1, r4
	parent->next = child;
   212da:	6013      	str	r3, [r2, #0]
	list->tail = node;
   212dc:	bf08      	it	eq
   212de:	6042      	streq	r2, [r0, #4]
}
   212e0:	e7f7      	b.n	212d2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   212e2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   212e4:	681b      	ldr	r3, [r3, #0]
   212e6:	e7ea      	b.n	212be <sys_slist_find_and_remove.isra.0+0x6>

000212e8 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   212e8:	3090      	adds	r0, #144	; 0x90
   212ea:	f3bf 8f5b 	dmb	ish
   212ee:	e850 3f00 	ldrex	r3, [r0]
   212f2:	f023 0302 	bic.w	r3, r3, #2
   212f6:	e840 3200 	strex	r2, r3, [r0]
   212fa:	2a00      	cmp	r2, #0
   212fc:	d1f7      	bne.n	212ee <chan_cfm_sent+0x6>
   212fe:	f3bf 8f5b 	dmb	ish
}
   21302:	4770      	bx	lr

00021304 <att_exec_write_req>:
   21304:	2006      	movs	r0, #6
   21306:	4770      	bx	lr

00021308 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21308:	2301      	movs	r3, #1
   2130a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2130e:	f3bf 8f5b 	dmb	ish
   21312:	e850 3f00 	ldrex	r3, [r0]
   21316:	ea43 0201 	orr.w	r2, r3, r1
   2131a:	e840 2c00 	strex	ip, r2, [r0]
   2131e:	f1bc 0f00 	cmp.w	ip, #0
   21322:	d1f6      	bne.n	21312 <atomic_test_and_set_bit+0xa>
   21324:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21328:	4219      	tst	r1, r3
}
   2132a:	bf14      	ite	ne
   2132c:	2001      	movne	r0, #1
   2132e:	2000      	moveq	r0, #0
   21330:	4770      	bx	lr

00021332 <read_cb>:
{
   21332:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   21336:	f8d2 8000 	ldr.w	r8, [r2]
{
   2133a:	4606      	mov	r6, r0
	data->err = 0x00;
   2133c:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2133e:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   21342:	7317      	strb	r7, [r2, #12]
{
   21344:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21346:	4631      	mov	r1, r6
   21348:	2215      	movs	r2, #21
   2134a:	f000 fcfb 	bl	21d44 <bt_gatt_check_perm>
   2134e:	4604      	mov	r4, r0
   21350:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   21352:	b9a0      	cbnz	r0, 2137e <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   21354:	e9cd 0000 	strd	r0, r0, [sp]
   21358:	88ab      	ldrh	r3, [r5, #4]
   2135a:	68aa      	ldr	r2, [r5, #8]
   2135c:	4631      	mov	r1, r6
   2135e:	4640      	mov	r0, r8
   21360:	f7ff feea 	bl	21138 <att_chan_read>
	if (ret < 0) {
   21364:	1e03      	subs	r3, r0, #0
   21366:	da0c      	bge.n	21382 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   21368:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2136c:	bf26      	itte	cs
   2136e:	425b      	negcs	r3, r3
   21370:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   21372:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   21374:	732b      	strb	r3, [r5, #12]
}
   21376:	4620      	mov	r0, r4
   21378:	b002      	add	sp, #8
   2137a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2137e:	463c      	mov	r4, r7
   21380:	e7f9      	b.n	21376 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   21382:	2401      	movs	r4, #1
   21384:	e7f7      	b.n	21376 <read_cb+0x44>

00021386 <att_req_send_process>:
{
   21386:	b570      	push	{r4, r5, r6, lr}
   21388:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   2138a:	3004      	adds	r0, #4
   2138c:	f7ff fced 	bl	20d6a <sys_slist_get>
	if (!node) {
   21390:	4605      	mov	r5, r0
   21392:	b1a8      	cbz	r0, 213c0 <att_req_send_process+0x3a>
	return list->head;
   21394:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21396:	b138      	cbz	r0, 213a8 <att_req_send_process+0x22>
	return node->next;
   21398:	f850 69e4 	ldr.w	r6, [r0], #-228
   2139c:	b106      	cbz	r6, 213a0 <att_req_send_process+0x1a>
   2139e:	3ee4      	subs	r6, #228	; 0xe4
		if (!chan->req) {
   213a0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   213a4:	b13b      	cbz	r3, 213b6 <att_req_send_process+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   213a6:	b966      	cbnz	r6, 213c2 <att_req_send_process+0x3c>
	parent->next = child;
   213a8:	6863      	ldr	r3, [r4, #4]
   213aa:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   213ac:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   213ae:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   213b0:	b933      	cbnz	r3, 213c0 <att_req_send_process+0x3a>
	list->tail = node;
   213b2:	60a5      	str	r5, [r4, #8]
}
   213b4:	e004      	b.n	213c0 <att_req_send_process+0x3a>
	return chan_req_send(chan, req);
   213b6:	4629      	mov	r1, r5
   213b8:	f7ff ff49 	bl	2124e <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   213bc:	2800      	cmp	r0, #0
   213be:	dbf2      	blt.n	213a6 <att_req_send_process+0x20>
}
   213c0:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   213c2:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   213c6:	b103      	cbz	r3, 213ca <att_req_send_process+0x44>
   213c8:	3be4      	subs	r3, #228	; 0xe4
{
   213ca:	4630      	mov	r0, r6
   213cc:	461e      	mov	r6, r3
   213ce:	e7e7      	b.n	213a0 <att_req_send_process+0x1a>

000213d0 <bt_att_sent>:
{
   213d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   213d2:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	struct bt_att *att = chan->att;
   213d6:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   213da:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   213dc:	1f07      	subs	r7, r0, #4
	if (chan->sent) {
   213de:	b10b      	cbz	r3, 213e4 <bt_att_sent+0x14>
		chan->sent(chan);
   213e0:	4638      	mov	r0, r7
   213e2:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   213e4:	f3bf 8f5b 	dmb	ish
   213e8:	f105 038c 	add.w	r3, r5, #140	; 0x8c
   213ec:	e853 2f00 	ldrex	r2, [r3]
   213f0:	f022 0210 	bic.w	r2, r2, #16
   213f4:	e843 2100 	strex	r1, r2, [r3]
   213f8:	2900      	cmp	r1, #0
   213fa:	d1f7      	bne.n	213ec <bt_att_sent+0x1c>
   213fc:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21400:	b30c      	cbz	r4, 21446 <bt_att_sent+0x76>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21402:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   21406:	b98b      	cbnz	r3, 2142c <bt_att_sent+0x5c>
   21408:	6863      	ldr	r3, [r4, #4]
   2140a:	b17b      	cbz	r3, 2142c <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2140c:	1d20      	adds	r0, r4, #4
   2140e:	f7ff fcac 	bl	20d6a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21412:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21414:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21416:	4638      	mov	r0, r7
   21418:	f7ff ff19 	bl	2124e <chan_req_send>
   2141c:	2800      	cmp	r0, #0
   2141e:	da12      	bge.n	21446 <bt_att_sent+0x76>
	parent->next = child;
   21420:	6863      	ldr	r3, [r4, #4]
   21422:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21424:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   21426:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21428:	b903      	cbnz	r3, 2142c <bt_att_sent+0x5c>
	list->tail = node;
   2142a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2142c:	f105 0194 	add.w	r1, r5, #148	; 0x94
   21430:	4638      	mov	r0, r7
   21432:	f7ff ff27 	bl	21284 <process_queue>
	if (!err) {
   21436:	b130      	cbz	r0, 21446 <bt_att_sent+0x76>
	(void)process_queue(chan, &att->tx_queue);
   21438:	f104 010c 	add.w	r1, r4, #12
   2143c:	4638      	mov	r0, r7
}
   2143e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   21442:	f7ff bf1f 	b.w	21284 <process_queue>
}
   21446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021448 <chan_rsp_sent>:
   21448:	3090      	adds	r0, #144	; 0x90
   2144a:	f3bf 8f5b 	dmb	ish
   2144e:	e850 3f00 	ldrex	r3, [r0]
   21452:	f023 0301 	bic.w	r3, r3, #1
   21456:	e840 3200 	strex	r2, r3, [r0]
   2145a:	2a00      	cmp	r2, #0
   2145c:	d1f7      	bne.n	2144e <chan_rsp_sent+0x6>
   2145e:	f3bf 8f5b 	dmb	ish
}
   21462:	4770      	bx	lr

00021464 <bt_att_status>:
{
   21464:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21466:	f3bf 8f5b 	dmb	ish
   2146a:	680b      	ldr	r3, [r1, #0]
   2146c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21470:	07db      	lsls	r3, r3, #31
{
   21472:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   21474:	d518      	bpl.n	214a8 <bt_att_status+0x44>
	if (!chan->att) {
   21476:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2147a:	b1a8      	cbz	r0, 214a8 <bt_att_status+0x44>
	if (chan->req) {
   2147c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   21480:	b993      	cbnz	r3, 214a8 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   21482:	3004      	adds	r0, #4
   21484:	f7ff fc71 	bl	20d6a <sys_slist_get>
	if (!node) {
   21488:	4604      	mov	r4, r0
   2148a:	b168      	cbz	r0, 214a8 <bt_att_status+0x44>
	return chan_req_send(chan, req);
   2148c:	4601      	mov	r1, r0
   2148e:	1f28      	subs	r0, r5, #4
   21490:	f7ff fedd 	bl	2124e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21494:	2800      	cmp	r0, #0
   21496:	da07      	bge.n	214a8 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   21498:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   2149c:	685a      	ldr	r2, [r3, #4]
   2149e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   214a0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   214a2:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   214a4:	b902      	cbnz	r2, 214a8 <bt_att_status+0x44>
	list->tail = node;
   214a6:	609c      	str	r4, [r3, #8]
}
   214a8:	bd38      	pop	{r3, r4, r5, pc}

000214aa <bt_att_chan_create_pdu>:
{
   214aa:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   214ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   214ae:	3201      	adds	r2, #1
   214b0:	429a      	cmp	r2, r3
{
   214b2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   214b4:	d81b      	bhi.n	214ee <bt_att_chan_create_pdu+0x44>
	switch (att_op_get_type(op)) {
   214b6:	4608      	mov	r0, r1
   214b8:	f7ff fc81 	bl	20dbe <att_op_get_type>
   214bc:	2802      	cmp	r0, #2
   214be:	d001      	beq.n	214c4 <bt_att_chan_create_pdu+0x1a>
   214c0:	2804      	cmp	r0, #4
   214c2:	d10f      	bne.n	214e4 <bt_att_chan_create_pdu+0x3a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   214c4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   214c8:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   214ca:	2100      	movs	r1, #0
   214cc:	4608      	mov	r0, r1
   214ce:	f7ff fbd9 	bl	20c84 <bt_l2cap_create_pdu_timeout>
   214d2:	4604      	mov	r4, r0
	if (!buf) {
   214d4:	b120      	cbz	r0, 214e0 <bt_att_chan_create_pdu+0x36>
   214d6:	2101      	movs	r1, #1
   214d8:	3008      	adds	r0, #8
   214da:	f000 fda1 	bl	22020 <net_buf_simple_add>
	hdr->code = op;
   214de:	7005      	strb	r5, [r0, #0]
}
   214e0:	4620      	mov	r0, r4
   214e2:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   214e4:	f04f 32ff 	mov.w	r2, #4294967295
   214e8:	f04f 33ff 	mov.w	r3, #4294967295
   214ec:	e7ed      	b.n	214ca <bt_att_chan_create_pdu+0x20>
		return NULL;
   214ee:	2400      	movs	r4, #0
   214f0:	e7f6      	b.n	214e0 <bt_att_chan_create_pdu+0x36>

000214f2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   214f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214f6:	4688      	mov	r8, r1
   214f8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   214fa:	2101      	movs	r1, #1
   214fc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   214fe:	4605      	mov	r5, r0
   21500:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21502:	f7ff ffd2 	bl	214aa <bt_att_chan_create_pdu>
	if (!buf) {
   21506:	4604      	mov	r4, r0
   21508:	b170      	cbz	r0, 21528 <send_err_rsp.part.0+0x36>
   2150a:	2104      	movs	r1, #4
   2150c:	3008      	adds	r0, #8
   2150e:	f000 fd87 	bl	22020 <net_buf_simple_add>
	rsp->request = req;
   21512:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   21516:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   21518:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2151c:	4621      	mov	r1, r4
   2151e:	4628      	mov	r0, r5
}
   21520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21524:	f7f4 bc68 	b.w	15df8 <bt_att_chan_send_rsp.constprop.0>
}
   21528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002152c <att_write_req>:
{
   2152c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2152e:	460c      	mov	r4, r1
   21530:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   21532:	f101 0008 	add.w	r0, r1, #8
   21536:	f000 fda2 	bl	2207e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2153a:	89a2      	ldrh	r2, [r4, #12]
   2153c:	9201      	str	r2, [sp, #4]
   2153e:	68a2      	ldr	r2, [r4, #8]
   21540:	9200      	str	r2, [sp, #0]
   21542:	4603      	mov	r3, r0
   21544:	2213      	movs	r2, #19
   21546:	2112      	movs	r1, #18
   21548:	4628      	mov	r0, r5
   2154a:	f7f4 fd9f 	bl	1608c <att_write_rsp.constprop.0>
}
   2154e:	b003      	add	sp, #12
   21550:	bd30      	pop	{r4, r5, pc}

00021552 <att_write_cmd>:
{
   21552:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21554:	460c      	mov	r4, r1
   21556:	4605      	mov	r5, r0
   21558:	f101 0008 	add.w	r0, r1, #8
   2155c:	f000 fd8f 	bl	2207e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   21560:	89a2      	ldrh	r2, [r4, #12]
   21562:	9201      	str	r2, [sp, #4]
   21564:	68a2      	ldr	r2, [r4, #8]
   21566:	9200      	str	r2, [sp, #0]
   21568:	2200      	movs	r2, #0
   2156a:	4603      	mov	r3, r0
   2156c:	4611      	mov	r1, r2
   2156e:	4628      	mov	r0, r5
   21570:	f7f4 fd8c 	bl	1608c <att_write_rsp.constprop.0>
}
   21574:	b003      	add	sp, #12
   21576:	bd30      	pop	{r4, r5, pc}

00021578 <bt_att_create_pdu>:
{
   21578:	b570      	push	{r4, r5, r6, lr}
   2157a:	460e      	mov	r6, r1
   2157c:	4615      	mov	r5, r2
	att = att_get(conn);
   2157e:	f7ff fd42 	bl	21006 <att_get>
	if (!att) {
   21582:	b158      	cbz	r0, 2159c <bt_att_create_pdu+0x24>
	return list->head;
   21584:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21586:	b14b      	cbz	r3, 2159c <bt_att_create_pdu+0x24>
   21588:	4618      	mov	r0, r3
	return node->next;
   2158a:	f850 39e4 	ldr.w	r3, [r0], #-228
   2158e:	b103      	cbz	r3, 21592 <bt_att_create_pdu+0x1a>
   21590:	3be4      	subs	r3, #228	; 0xe4
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   21592:	1c6a      	adds	r2, r5, #1
   21594:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   21596:	428a      	cmp	r2, r1
   21598:	d902      	bls.n	215a0 <bt_att_create_pdu+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2159a:	b93b      	cbnz	r3, 215ac <bt_att_create_pdu+0x34>
}
   2159c:	2000      	movs	r0, #0
   2159e:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   215a0:	462a      	mov	r2, r5
   215a2:	4631      	mov	r1, r6
}
   215a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   215a8:	f7ff bf7f 	b.w	214aa <bt_att_chan_create_pdu>
   215ac:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   215b0:	b104      	cbz	r4, 215b4 <bt_att_create_pdu+0x3c>
   215b2:	3ce4      	subs	r4, #228	; 0xe4
{
   215b4:	4618      	mov	r0, r3
   215b6:	4623      	mov	r3, r4
   215b8:	e7ec      	b.n	21594 <bt_att_create_pdu+0x1c>

000215ba <att_read_blob_req>:
{
   215ba:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   215bc:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   215be:	8813      	ldrh	r3, [r2, #0]
   215c0:	8852      	ldrh	r2, [r2, #2]
   215c2:	9200      	str	r2, [sp, #0]
   215c4:	210c      	movs	r1, #12
   215c6:	220d      	movs	r2, #13
   215c8:	f7f4 fe9c 	bl	16304 <att_read_rsp>
}
   215cc:	b003      	add	sp, #12
   215ce:	f85d fb04 	ldr.w	pc, [sp], #4

000215d2 <att_read_req>:
{
   215d2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   215d4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   215d6:	2200      	movs	r2, #0
   215d8:	881b      	ldrh	r3, [r3, #0]
   215da:	9200      	str	r2, [sp, #0]
   215dc:	210a      	movs	r1, #10
   215de:	220b      	movs	r2, #11
   215e0:	f7f4 fe90 	bl	16304 <att_read_rsp>
}
   215e4:	b003      	add	sp, #12
   215e6:	f85d fb04 	ldr.w	pc, [sp], #4

000215ea <att_mtu_req>:
{
   215ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   215ec:	6803      	ldr	r3, [r0, #0]
{
   215ee:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   215f0:	6818      	ldr	r0, [r3, #0]
   215f2:	f3bf 8f5b 	dmb	ish
   215f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   215fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   215fe:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   21602:	071b      	lsls	r3, r3, #28
   21604:	d41b      	bmi.n	2163e <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21606:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21608:	881b      	ldrh	r3, [r3, #0]
   2160a:	2b16      	cmp	r3, #22
   2160c:	d919      	bls.n	21642 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2160e:	2202      	movs	r2, #2
   21610:	2103      	movs	r1, #3
   21612:	f7ff ffb1 	bl	21578 <bt_att_create_pdu>
	if (!pdu) {
   21616:	4606      	mov	r6, r0
   21618:	b1a8      	cbz	r0, 21646 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2161a:	2102      	movs	r1, #2
   2161c:	3008      	adds	r0, #8
   2161e:	f000 fcff 	bl	22020 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21622:	2717      	movs	r7, #23
   21624:	7007      	strb	r7, [r0, #0]
   21626:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21628:	4631      	mov	r1, r6
   2162a:	4620      	mov	r0, r4
   2162c:	f7f4 fbe4 	bl	15df8 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   21630:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21632:	8367      	strh	r7, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21634:	8567      	strh	r7, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   21636:	f7ff fca6 	bl	20f86 <att_chan_mtu_updated>
	return 0;
   2163a:	4628      	mov	r0, r5
}
   2163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2163e:	2006      	movs	r0, #6
   21640:	e7fc      	b.n	2163c <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   21642:	2004      	movs	r0, #4
   21644:	e7fa      	b.n	2163c <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   21646:	200e      	movs	r0, #14
   21648:	e7f8      	b.n	2163c <att_mtu_req+0x52>

0002164a <bt_att_init>:
	bt_gatt_init();
   2164a:	f7f5 b917 	b.w	1687c <bt_gatt_init>

0002164e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2164e:	898a      	ldrh	r2, [r1, #12]
   21650:	6889      	ldr	r1, [r1, #8]
   21652:	2300      	movs	r3, #0
   21654:	f7f4 bfdc 	b.w	16610 <att_handle_rsp>

00021658 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   21658:	38ac      	subs	r0, #172	; 0xac
   2165a:	f7f5 b809 	b.w	16670 <bt_att_disconnected>

0002165e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2165e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21662:	4607      	mov	r7, r0
   21664:	460d      	mov	r5, r1
   21666:	4616      	mov	r6, r2
   21668:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2166a:	f7ff fccc 	bl	21006 <att_get>
	if (!att) {
   2166e:	4604      	mov	r4, r0
   21670:	b938      	cbnz	r0, 21682 <bt_att_send+0x24>
		net_buf_unref(buf);
   21672:	4628      	mov	r0, r5
   21674:	f7f5 fda2 	bl	171bc <net_buf_unref>
		return -ENOTCONN;
   21678:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2167c:	b002      	add	sp, #8
   2167e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21682:	b146      	cbz	r6, 21696 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21684:	f8cd 8000 	str.w	r8, [sp]
   21688:	4633      	mov	r3, r6
   2168a:	462a      	mov	r2, r5
   2168c:	2104      	movs	r1, #4
   2168e:	4638      	mov	r0, r7
   21690:	f7ff fafb 	bl	20c8a <bt_l2cap_send_cb>
   21694:	e7f2      	b.n	2167c <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21696:	f100 060c 	add.w	r6, r0, #12
   2169a:	4629      	mov	r1, r5
   2169c:	4630      	mov	r0, r6
   2169e:	f000 fc8c 	bl	21fba <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   216a2:	2200      	movs	r2, #0
   216a4:	2300      	movs	r3, #0
   216a6:	4630      	mov	r0, r6
   216a8:	f000 fc20 	bl	21eec <net_buf_get>
	if (!buf) {
   216ac:	4605      	mov	r5, r0
   216ae:	b908      	cbnz	r0, 216b4 <bt_att_send+0x56>
	return 0;
   216b0:	2000      	movs	r0, #0
   216b2:	e7e3      	b.n	2167c <bt_att_send+0x1e>
	return list->head;
   216b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   216b6:	b188      	cbz	r0, 216dc <bt_att_send+0x7e>
	return node->next;
   216b8:	f850 49e4 	ldr.w	r4, [r0], #-228
   216bc:	b104      	cbz	r4, 216c0 <bt_att_send+0x62>
   216be:	3ce4      	subs	r4, #228	; 0xe4
	return chan_send(chan, buf, cb);
   216c0:	2200      	movs	r2, #0
   216c2:	4629      	mov	r1, r5
   216c4:	f7f4 fb30 	bl	15d28 <chan_send>
		if (err >= 0) {
   216c8:	2800      	cmp	r0, #0
   216ca:	daf1      	bge.n	216b0 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   216cc:	b134      	cbz	r4, 216dc <bt_att_send+0x7e>
   216ce:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   216d2:	b103      	cbz	r3, 216d6 <bt_att_send+0x78>
   216d4:	3be4      	subs	r3, #228	; 0xe4
{
   216d6:	4620      	mov	r0, r4
   216d8:	461c      	mov	r4, r3
   216da:	e7f1      	b.n	216c0 <bt_att_send+0x62>
		k_queue_prepend(&att->tx_queue._queue, buf);
   216dc:	4629      	mov	r1, r5
   216de:	4630      	mov	r0, r6
   216e0:	f001 f9d7 	bl	22a92 <k_queue_prepend>
   216e4:	e7e4      	b.n	216b0 <bt_att_send+0x52>

000216e6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   216e6:	b510      	push	{r4, lr}
   216e8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   216ea:	f7ff fc8c 	bl	21006 <att_get>
	if (!att) {
   216ee:	b160      	cbz	r0, 2170a <bt_att_req_send+0x24>
	parent->next = child;
   216f0:	2300      	movs	r3, #0
   216f2:	6023      	str	r3, [r4, #0]
	return list->tail;
   216f4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   216f6:	b92b      	cbnz	r3, 21704 <bt_att_req_send+0x1e>
	list->head = node;
   216f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   216fc:	f7ff fe43 	bl	21386 <att_req_send_process>

	return 0;
   21700:	2000      	movs	r0, #0
}
   21702:	bd10      	pop	{r4, pc}
	parent->next = child;
   21704:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21706:	6084      	str	r4, [r0, #8]
}
   21708:	e7f8      	b.n	216fc <bt_att_req_send+0x16>
		return -ENOTCONN;
   2170a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2170e:	e7f8      	b.n	21702 <bt_att_req_send+0x1c>

00021710 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   21710:	2001      	movs	r0, #1
   21712:	4770      	bx	lr

00021714 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   21714:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   21716:	f7ff fc76 	bl	21006 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2171a:	b198      	cbz	r0, 21744 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   2171c:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2171e:	b18b      	cbz	r3, 21744 <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21720:	f3bf 8f5b 	dmb	ish
   21724:	3be4      	subs	r3, #228	; 0xe4
   21726:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2172a:	e852 1f00 	ldrex	r1, [r2]
   2172e:	f021 0120 	bic.w	r1, r1, #32
   21732:	e842 1000 	strex	r0, r1, [r2]
   21736:	2800      	cmp	r0, #0
   21738:	d1f7      	bne.n	2172a <bt_att_clear_out_of_sync_sent+0x16>
   2173a:	f3bf 8f5b 	dmb	ish
	return node->next;
   2173e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   21742:	e7ec      	b.n	2171e <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   21744:	bd08      	pop	{r3, pc}

00021746 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   21746:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21748:	2104      	movs	r1, #4
   2174a:	f7ff fae8 	bl	20d1e <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2174e:	b138      	cbz	r0, 21760 <bt_att_out_of_sync_sent_on_fixed+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21750:	f3bf 8f5b 	dmb	ish
   21754:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   21758:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2175c:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   21760:	bd08      	pop	{r3, pc}

00021762 <gatt_ccc_changed>:
{
   21762:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21764:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21766:	895a      	ldrh	r2, [r3, #10]
   21768:	428a      	cmp	r2, r1
   2176a:	d003      	beq.n	21774 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2176c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2176e:	68db      	ldr	r3, [r3, #12]
   21770:	b103      	cbz	r3, 21774 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21772:	4718      	bx	r3
}
   21774:	4770      	bx	lr

00021776 <gatt_indicate_rsp>:
{
   21776:	b510      	push	{r4, lr}
   21778:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2177a:	68a3      	ldr	r3, [r4, #8]
{
   2177c:	460a      	mov	r2, r1
	if (params->func) {
   2177e:	b10b      	cbz	r3, 21784 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21780:	4621      	mov	r1, r4
   21782:	4798      	blx	r3
	params->_ref--;
   21784:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21786:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21788:	3b01      	subs	r3, #1
   2178a:	b2db      	uxtb	r3, r3
   2178c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2178e:	b122      	cbz	r2, 2179a <gatt_indicate_rsp+0x24>
   21790:	b91b      	cbnz	r3, 2179a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21792:	4620      	mov	r0, r4
}
   21794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21798:	4710      	bx	r2
}
   2179a:	bd10      	pop	{r4, pc}

0002179c <match_uuid>:
	data->attr = attr;
   2179c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2179e:	8091      	strh	r1, [r2, #4]
}
   217a0:	2000      	movs	r0, #0
   217a2:	4770      	bx	lr

000217a4 <write_name>:
{
   217a4:	b570      	push	{r4, r5, r6, lr}
   217a6:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   217a8:	2100      	movs	r1, #0
{
   217aa:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   217ae:	9101      	str	r1, [sp, #4]
{
   217b0:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   217b2:	a802      	add	r0, sp, #8
   217b4:	223d      	movs	r2, #61	; 0x3d
{
   217b6:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   217b8:	f001 fdea 	bl	23390 <memset>
	if (offset >= sizeof(value)) {
   217bc:	2d40      	cmp	r5, #64	; 0x40
   217be:	d80e      	bhi.n	217de <write_name+0x3a>
	if (offset + len >= sizeof(value)) {
   217c0:	4425      	add	r5, r4
   217c2:	2d40      	cmp	r5, #64	; 0x40
   217c4:	dc0e      	bgt.n	217e4 <write_name+0x40>
	memcpy(value, buf, len);
   217c6:	2341      	movs	r3, #65	; 0x41
   217c8:	4622      	mov	r2, r4
   217ca:	4631      	mov	r1, r6
   217cc:	a801      	add	r0, sp, #4
   217ce:	f001 fdcc 	bl	2336a <__memcpy_chk>
	bt_set_name(value);
   217d2:	a801      	add	r0, sp, #4
   217d4:	f7f3 f854 	bl	14880 <bt_set_name>
}
   217d8:	4620      	mov	r0, r4
   217da:	b012      	add	sp, #72	; 0x48
   217dc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   217de:	f06f 0406 	mvn.w	r4, #6
   217e2:	e7f9      	b.n	217d8 <write_name+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   217e4:	f06f 040c 	mvn.w	r4, #12
   217e8:	e7f6      	b.n	217d8 <write_name+0x34>

000217ea <gen_hash_m>:
{
   217ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   217ec:	6807      	ldr	r7, [r0, #0]
   217ee:	783d      	ldrb	r5, [r7, #0]
{
   217f0:	b089      	sub	sp, #36	; 0x24
   217f2:	4606      	mov	r6, r0
   217f4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   217f6:	b10d      	cbz	r5, 217fc <gen_hash_m+0x12>
	switch (u16->val) {
   217f8:	2501      	movs	r5, #1
   217fa:	e014      	b.n	21826 <gen_hash_m+0x3c>
   217fc:	887b      	ldrh	r3, [r7, #2]
   217fe:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21802:	d004      	beq.n	2180e <gen_hash_m+0x24>
   21804:	d812      	bhi.n	2182c <gen_hash_m+0x42>
   21806:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2180a:	2b03      	cmp	r3, #3
   2180c:	d8f4      	bhi.n	217f8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2180e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21812:	2202      	movs	r2, #2
   21814:	f10d 010a 	add.w	r1, sp, #10
   21818:	4620      	mov	r0, r4
   2181a:	f7fe fb3a 	bl	1fe92 <tc_cmac_update>
   2181e:	b9e0      	cbnz	r0, 2185a <gen_hash_m+0x70>
			state->err = -EINVAL;
   21820:	f06f 0315 	mvn.w	r3, #21
   21824:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21826:	4628      	mov	r0, r5
   21828:	b009      	add	sp, #36	; 0x24
   2182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2182c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21830:	33ff      	adds	r3, #255	; 0xff
   21832:	b29b      	uxth	r3, r3
   21834:	2b04      	cmp	r3, #4
   21836:	d8df      	bhi.n	217f8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21838:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2183c:	2202      	movs	r2, #2
   2183e:	f10d 010a 	add.w	r1, sp, #10
   21842:	4620      	mov	r0, r4
   21844:	f7fe fb25 	bl	1fe92 <tc_cmac_update>
   21848:	2800      	cmp	r0, #0
   2184a:	d0e9      	beq.n	21820 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2184c:	887b      	ldrh	r3, [r7, #2]
   2184e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21852:	2202      	movs	r2, #2
   21854:	f10d 010a 	add.w	r1, sp, #10
   21858:	e016      	b.n	21888 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2185a:	887b      	ldrh	r3, [r7, #2]
   2185c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21860:	2202      	movs	r2, #2
   21862:	f10d 010a 	add.w	r1, sp, #10
   21866:	4620      	mov	r0, r4
   21868:	f7fe fb13 	bl	1fe92 <tc_cmac_update>
   2186c:	2800      	cmp	r0, #0
   2186e:	d0d7      	beq.n	21820 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21870:	2000      	movs	r0, #0
   21872:	aa03      	add	r2, sp, #12
   21874:	6877      	ldr	r7, [r6, #4]
   21876:	9000      	str	r0, [sp, #0]
   21878:	2313      	movs	r3, #19
   2187a:	4631      	mov	r1, r6
   2187c:	47b8      	blx	r7
		if (len < 0) {
   2187e:	1e02      	subs	r2, r0, #0
   21880:	da01      	bge.n	21886 <gen_hash_m+0x9c>
			state->err = len;
   21882:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21884:	e7cf      	b.n	21826 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21886:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21888:	4620      	mov	r0, r4
   2188a:	f7fe fb02 	bl	1fe92 <tc_cmac_update>
   2188e:	2800      	cmp	r0, #0
   21890:	d1b2      	bne.n	217f8 <gen_hash_m+0xe>
   21892:	e7c5      	b.n	21820 <gen_hash_m+0x36>

00021894 <bt_addr_le_copy>:
   21894:	680b      	ldr	r3, [r1, #0]
   21896:	6003      	str	r3, [r0, #0]
   21898:	888b      	ldrh	r3, [r1, #4]
   2189a:	8083      	strh	r3, [r0, #4]
   2189c:	798b      	ldrb	r3, [r1, #6]
   2189e:	7183      	strb	r3, [r0, #6]
}
   218a0:	4770      	bx	lr

000218a2 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   218a2:	2300      	movs	r3, #0
   218a4:	6003      	str	r3, [r0, #0]
   218a6:	6043      	str	r3, [r0, #4]
   218a8:	6083      	str	r3, [r0, #8]
}
   218aa:	4770      	bx	lr

000218ac <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   218ac:	b538      	push	{r3, r4, r5, lr}
   218ae:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   218b2:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   218b4:	460c      	mov	r4, r1
   218b6:	4611      	mov	r1, r2
	if (offset > value_len) {
   218b8:	d30a      	bcc.n	218d0 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   218ba:	1aad      	subs	r5, r5, r2
   218bc:	42a5      	cmp	r5, r4
   218be:	bfa8      	it	ge
   218c0:	4625      	movge	r5, r4
   218c2:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   218c4:	462a      	mov	r2, r5
   218c6:	4419      	add	r1, r3
   218c8:	f001 fd41 	bl	2334e <memcpy>
}
   218cc:	4628      	mov	r0, r5
   218ce:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   218d0:	f06f 0506 	mvn.w	r5, #6
   218d4:	e7fa      	b.n	218cc <bt_gatt_attr_read.constprop.0+0x20>

000218d6 <bt_gatt_attr_read_service>:
{
   218d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   218d8:	460c      	mov	r4, r1
   218da:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   218dc:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   218de:	781c      	ldrb	r4, [r3, #0]
{
   218e0:	4610      	mov	r0, r2
   218e2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   218e6:	b13c      	cbz	r4, 218f8 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   218e8:	2410      	movs	r4, #16
   218ea:	3301      	adds	r3, #1
   218ec:	9406      	str	r4, [sp, #24]
}
   218ee:	b004      	add	sp, #16
   218f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   218f4:	f7ff bfda 	b.w	218ac <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   218f8:	885b      	ldrh	r3, [r3, #2]
   218fa:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   218fe:	2302      	movs	r3, #2
   21900:	9300      	str	r3, [sp, #0]
   21902:	f10d 030e 	add.w	r3, sp, #14
   21906:	f7ff ffd1 	bl	218ac <bt_gatt_attr_read.constprop.0>
}
   2190a:	b004      	add	sp, #16
   2190c:	bd10      	pop	{r4, pc}

0002190e <cf_read>:
{
   2190e:	b530      	push	{r4, r5, lr}
   21910:	b085      	sub	sp, #20
   21912:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   21914:	2300      	movs	r3, #0
{
   21916:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   21918:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2191c:	f7f4 ff00 	bl	16720 <find_cf_cfg>
	if (cfg) {
   21920:	b110      	cbz	r0, 21928 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   21922:	7a03      	ldrb	r3, [r0, #8]
   21924:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21928:	2301      	movs	r3, #1
   2192a:	9300      	str	r3, [sp, #0]
   2192c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21930:	ab03      	add	r3, sp, #12
   21932:	4629      	mov	r1, r5
   21934:	4620      	mov	r0, r4
   21936:	f7ff ffb9 	bl	218ac <bt_gatt_attr_read.constprop.0>
}
   2193a:	b005      	add	sp, #20
   2193c:	bd30      	pop	{r4, r5, pc}

0002193e <read_name>:
{
   2193e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21942:	4614      	mov	r4, r2
   21944:	461d      	mov	r5, r3
   21946:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2194a:	f7f3 f823 	bl	14994 <bt_get_name>
   2194e:	4606      	mov	r6, r0
				 strlen(name));
   21950:	f7eb f84b 	bl	c9ea <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21954:	b280      	uxth	r0, r0
   21956:	9006      	str	r0, [sp, #24]
   21958:	4633      	mov	r3, r6
   2195a:	463a      	mov	r2, r7
   2195c:	4629      	mov	r1, r5
   2195e:	4620      	mov	r0, r4
}
   21960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21964:	f7ff bfa2 	b.w	218ac <bt_gatt_attr_read.constprop.0>

00021968 <read_appearance>:
{
   21968:	b530      	push	{r4, r5, lr}
   2196a:	b085      	sub	sp, #20
   2196c:	4614      	mov	r4, r2
   2196e:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21970:	f7fe fe39 	bl	205e6 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21974:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21976:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2197a:	9300      	str	r3, [sp, #0]
   2197c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21980:	f10d 030e 	add.w	r3, sp, #14
   21984:	4629      	mov	r1, r5
   21986:	4620      	mov	r0, r4
   21988:	f7ff ff90 	bl	218ac <bt_gatt_attr_read.constprop.0>
}
   2198c:	b005      	add	sp, #20
   2198e:	bd30      	pop	{r4, r5, pc}

00021990 <read_ppcp>:
{
   21990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21992:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   21994:	2318      	movs	r3, #24
   21996:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2199a:	2328      	movs	r3, #40	; 0x28
   2199c:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   219a0:	2300      	movs	r3, #0
   219a2:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   219a6:	232a      	movs	r3, #42	; 0x2a
   219a8:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   219ac:	2308      	movs	r3, #8
   219ae:	9300      	str	r3, [sp, #0]
{
   219b0:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   219b2:	446b      	add	r3, sp
   219b4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   219b8:	f7ff ff78 	bl	218ac <bt_gatt_attr_read.constprop.0>
}
   219bc:	b005      	add	sp, #20
   219be:	f85d fb04 	ldr.w	pc, [sp], #4

000219c2 <clear_cf_cfg>:
{
   219c2:	b513      	push	{r0, r1, r4, lr}
   219c4:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   219c6:	2400      	movs	r4, #0
   219c8:	4669      	mov	r1, sp
   219ca:	3001      	adds	r0, #1
   219cc:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   219ce:	320c      	adds	r2, #12
   219d0:	f8cd 4003 	str.w	r4, [sp, #3]
   219d4:	f7ff ff5e 	bl	21894 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   219d8:	f802 4c04 	strb.w	r4, [r2, #-4]
   219dc:	f3bf 8f5b 	dmb	ish
   219e0:	e852 3f00 	ldrex	r3, [r2]
   219e4:	e842 4100 	strex	r1, r4, [r2]
   219e8:	2900      	cmp	r1, #0
   219ea:	d1f9      	bne.n	219e0 <clear_cf_cfg+0x1e>
   219ec:	f3bf 8f5b 	dmb	ish
}
   219f0:	b002      	add	sp, #8
   219f2:	bd10      	pop	{r4, pc}

000219f4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   219f4:	2301      	movs	r3, #1
   219f6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   219f8:	f3bf 8f5b 	dmb	ish
   219fc:	e850 2f00 	ldrex	r2, [r0]
   21a00:	431a      	orrs	r2, r3
   21a02:	e840 2100 	strex	r1, r2, [r0]
   21a06:	2900      	cmp	r1, #0
   21a08:	d1f8      	bne.n	219fc <atomic_set_bit+0x8>
   21a0a:	f3bf 8f5b 	dmb	ish
}
   21a0e:	4770      	bx	lr

00021a10 <cf_write>:
{
   21a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a14:	4698      	mov	r8, r3
   21a16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   21a1a:	2b01      	cmp	r3, #1
{
   21a1c:	4606      	mov	r6, r0
   21a1e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   21a20:	d830      	bhi.n	21a84 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   21a22:	4443      	add	r3, r8
   21a24:	2b01      	cmp	r3, #1
   21a26:	4645      	mov	r5, r8
   21a28:	dc2f      	bgt.n	21a8a <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   21a2a:	f7f4 fe79 	bl	16720 <find_cf_cfg>
	if (!cfg) {
   21a2e:	4604      	mov	r4, r0
   21a30:	b918      	cbnz	r0, 21a3a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   21a32:	f7f4 fe75 	bl	16720 <find_cf_cfg>
	if (!cfg) {
   21a36:	4604      	mov	r4, r0
   21a38:	b350      	cbz	r0, 21a90 <cf_write+0x80>
{
   21a3a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21a3c:	f1b8 0f00 	cmp.w	r8, #0
   21a40:	d10e      	bne.n	21a60 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   21a42:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21a46:	1c60      	adds	r0, r4, #1
   21a48:	f7ff ff24 	bl	21894 <bt_addr_le_copy>
	cfg->id = conn->id;
   21a4c:	4620      	mov	r0, r4
   21a4e:	7a33      	ldrb	r3, [r6, #8]
   21a50:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21a54:	2100      	movs	r1, #0
   21a56:	f7ff ffcd 	bl	219f4 <atomic_set_bit>
}
   21a5a:	4628      	mov	r0, r5
   21a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21a60:	7a20      	ldrb	r0, [r4, #8]
   21a62:	fa20 f301 	lsr.w	r3, r0, r1
   21a66:	07da      	lsls	r2, r3, #31
   21a68:	d503      	bpl.n	21a72 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   21a6a:	783b      	ldrb	r3, [r7, #0]
   21a6c:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21a6e:	07db      	lsls	r3, r3, #31
   21a70:	d511      	bpl.n	21a96 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21a72:	3101      	adds	r1, #1
   21a74:	2903      	cmp	r1, #3
   21a76:	d1e1      	bne.n	21a3c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   21a78:	783b      	ldrb	r3, [r7, #0]
   21a7a:	f003 0307 	and.w	r3, r3, #7
   21a7e:	4318      	orrs	r0, r3
   21a80:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   21a82:	e7de      	b.n	21a42 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21a84:	f06f 0506 	mvn.w	r5, #6
   21a88:	e7e7      	b.n	21a5a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21a8a:	f06f 050c 	mvn.w	r5, #12
   21a8e:	e7e4      	b.n	21a5a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21a90:	f06f 0510 	mvn.w	r5, #16
   21a94:	e7e1      	b.n	21a5a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   21a96:	f06f 0512 	mvn.w	r5, #18
   21a9a:	e7de      	b.n	21a5a <cf_write+0x4a>

00021a9c <find_ccc_cfg>:
{
   21a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21a9e:	460c      	mov	r4, r1
						    &cfg->peer)) {
   21aa0:	1c4d      	adds	r5, r1, #1
		if (conn) {
   21aa2:	b148      	cbz	r0, 21ab8 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21aa4:	7809      	ldrb	r1, [r1, #0]
   21aa6:	462a      	mov	r2, r5
   21aa8:	f7ff f813 	bl	20ad2 <bt_conn_is_peer_addr_le>
	return NULL;
   21aac:	2800      	cmp	r0, #0
   21aae:	bf08      	it	eq
   21ab0:	2400      	moveq	r4, #0
}
   21ab2:	4620      	mov	r0, r4
   21ab4:	b003      	add	sp, #12
   21ab6:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21ab8:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   21aba:	2207      	movs	r2, #7
   21abc:	f8cd 0003 	str.w	r0, [sp, #3]
   21ac0:	4669      	mov	r1, sp
   21ac2:	4628      	mov	r0, r5
   21ac4:	f001 fc33 	bl	2332e <memcmp>
	return NULL;
   21ac8:	2800      	cmp	r0, #0
   21aca:	bf18      	it	ne
   21acc:	2400      	movne	r4, #0
   21ace:	e7f0      	b.n	21ab2 <find_ccc_cfg+0x16>

00021ad0 <bt_gatt_attr_write_ccc>:
{
   21ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21ad4:	461f      	mov	r7, r3
   21ad6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   21ada:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   21ade:	4606      	mov	r6, r0
   21ae0:	4688      	mov	r8, r1
	if (offset) {
   21ae2:	2b00      	cmp	r3, #0
   21ae4:	d141      	bne.n	21b6a <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   21ae6:	1e7b      	subs	r3, r7, #1
   21ae8:	2b01      	cmp	r3, #1
   21aea:	d841      	bhi.n	21b70 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   21aec:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   21aee:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   21af0:	4649      	mov	r1, r9
   21af2:	bf14      	ite	ne
   21af4:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   21af6:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   21af8:	f7ff ffd0 	bl	21a9c <find_ccc_cfg>
	if (!cfg) {
   21afc:	4604      	mov	r4, r0
   21afe:	b980      	cbnz	r0, 21b22 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   21b00:	b91d      	cbnz	r5, 21b0a <bt_gatt_attr_write_ccc+0x3a>
			return len;
   21b02:	4638      	mov	r0, r7
}
   21b04:	b003      	add	sp, #12
   21b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   21b0a:	4649      	mov	r1, r9
   21b0c:	f7ff ffc6 	bl	21a9c <find_ccc_cfg>
		if (!cfg) {
   21b10:	4604      	mov	r4, r0
   21b12:	b380      	cbz	r0, 21b76 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   21b14:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21b18:	3001      	adds	r0, #1
   21b1a:	f7ff febb 	bl	21894 <bt_addr_le_copy>
		cfg->id = conn->id;
   21b1e:	7a33      	ldrb	r3, [r6, #8]
   21b20:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   21b22:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21b26:	b9a3      	cbnz	r3, 21b52 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   21b28:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   21b2c:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   21b2e:	42ab      	cmp	r3, r5
   21b30:	d003      	beq.n	21b3a <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   21b32:	4649      	mov	r1, r9
   21b34:	4640      	mov	r0, r8
   21b36:	f7ff fe14 	bl	21762 <gatt_ccc_changed>
	if (!value) {
   21b3a:	2d00      	cmp	r5, #0
   21b3c:	d1e1      	bne.n	21b02 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21b3e:	4669      	mov	r1, sp
   21b40:	1c60      	adds	r0, r4, #1
   21b42:	9500      	str	r5, [sp, #0]
   21b44:	f8cd 5003 	str.w	r5, [sp, #3]
   21b48:	f7ff fea4 	bl	21894 <bt_addr_le_copy>
	cfg->id = 0U;
   21b4c:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   21b4e:	8125      	strh	r5, [r4, #8]
}
   21b50:	e7d7      	b.n	21b02 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   21b52:	462a      	mov	r2, r5
   21b54:	4641      	mov	r1, r8
   21b56:	4630      	mov	r0, r6
   21b58:	4798      	blx	r3
		if (write < 0) {
   21b5a:	2800      	cmp	r0, #0
   21b5c:	dbd2      	blt.n	21b04 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   21b5e:	3801      	subs	r0, #1
   21b60:	2801      	cmp	r0, #1
   21b62:	d9e1      	bls.n	21b28 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   21b64:	f06f 000d 	mvn.w	r0, #13
   21b68:	e7cc      	b.n	21b04 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21b6a:	f06f 0006 	mvn.w	r0, #6
   21b6e:	e7c9      	b.n	21b04 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21b70:	f06f 000c 	mvn.w	r0, #12
   21b74:	e7c6      	b.n	21b04 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21b76:	f06f 0010 	mvn.w	r0, #16
   21b7a:	e7c3      	b.n	21b04 <bt_gatt_attr_write_ccc+0x34>

00021b7c <bt_gatt_attr_read_ccc>:
{
   21b7c:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21b7e:	68c9      	ldr	r1, [r1, #12]
{
   21b80:	b085      	sub	sp, #20
   21b82:	4614      	mov	r4, r2
   21b84:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   21b86:	f7ff ff89 	bl	21a9c <find_ccc_cfg>
	if (cfg) {
   21b8a:	b100      	cbz	r0, 21b8e <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   21b8c:	8900      	ldrh	r0, [r0, #8]
   21b8e:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21b92:	2302      	movs	r3, #2
   21b94:	9300      	str	r3, [sp, #0]
   21b96:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21b9a:	f10d 030e 	add.w	r3, sp, #14
   21b9e:	4629      	mov	r1, r5
   21ba0:	4620      	mov	r0, r4
   21ba2:	f7ff fe83 	bl	218ac <bt_gatt_attr_read.constprop.0>
}
   21ba6:	b005      	add	sp, #20
   21ba8:	bd30      	pop	{r4, r5, pc}

00021baa <sc_save>:
{
   21baa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21bae:	4680      	mov	r8, r0
   21bb0:	460f      	mov	r7, r1
   21bb2:	4616      	mov	r6, r2
   21bb4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   21bb6:	f7f4 fdd1 	bl	1675c <find_sc_cfg>
	if (!cfg) {
   21bba:	4604      	mov	r4, r0
   21bbc:	b960      	cbnz	r0, 21bd8 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   21bbe:	4669      	mov	r1, sp
   21bc0:	9000      	str	r0, [sp, #0]
   21bc2:	f8cd 0003 	str.w	r0, [sp, #3]
   21bc6:	f7f4 fdc9 	bl	1675c <find_sc_cfg>
		if (!cfg) {
   21bca:	4604      	mov	r4, r0
   21bcc:	b178      	cbz	r0, 21bee <sc_save+0x44>
		cfg->id = id;
   21bce:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   21bd2:	4639      	mov	r1, r7
   21bd4:	f7ff fe5e 	bl	21894 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   21bd8:	8922      	ldrh	r2, [r4, #8]
   21bda:	8963      	ldrh	r3, [r4, #10]
   21bdc:	b91a      	cbnz	r2, 21be6 <sc_save+0x3c>
   21bde:	b923      	cbnz	r3, 21bea <sc_save+0x40>
		cfg->data.start = start;
   21be0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   21be2:	8165      	strh	r5, [r4, #10]
   21be4:	e003      	b.n	21bee <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   21be6:	4296      	cmp	r6, r2
   21be8:	d304      	bcc.n	21bf4 <sc_save+0x4a>
   21bea:	429d      	cmp	r5, r3
   21bec:	d8f9      	bhi.n	21be2 <sc_save+0x38>
}
   21bee:	b002      	add	sp, #8
   21bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   21bf4:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   21bf6:	e7f8      	b.n	21bea <sc_save+0x40>

00021bf8 <sc_clear>:
{
   21bf8:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21bfa:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   21bfe:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   21c00:	4629      	mov	r1, r5
   21c02:	7a00      	ldrb	r0, [r0, #8]
   21c04:	f7fe fcf1 	bl	205ea <bt_addr_le_is_bonded>
   21c08:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   21c0a:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   21c0c:	f7f4 fda6 	bl	1675c <find_sc_cfg>
		if (cfg) {
   21c10:	b118      	cbz	r0, 21c1a <sc_clear+0x22>
}
   21c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   21c16:	f7ff be44 	b.w	218a2 <clear_sc_cfg>
}
   21c1a:	bd38      	pop	{r3, r4, r5, pc}

00021c1c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   21c1c:	2a02      	cmp	r2, #2
{
   21c1e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   21c20:	d108      	bne.n	21c34 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   21c22:	2300      	movs	r3, #0
   21c24:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21c28:	461a      	mov	r2, r3
   21c2a:	7a00      	ldrb	r0, [r0, #8]
   21c2c:	f7ff ffbd 	bl	21baa <sc_save>
}
   21c30:	2002      	movs	r0, #2
   21c32:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   21c34:	f7ff ffe0 	bl	21bf8 <sc_clear>
   21c38:	e7fa      	b.n	21c30 <sc_ccc_cfg_write+0x14>

00021c3a <sc_restore_rsp>:
{
   21c3a:	b538      	push	{r3, r4, r5, lr}
   21c3c:	4604      	mov	r4, r0
   21c3e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   21c40:	f7ff fd66 	bl	21710 <bt_att_fixed_chan_only>
   21c44:	b150      	cbz	r0, 21c5c <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   21c46:	4620      	mov	r0, r4
   21c48:	f7f4 fd6a 	bl	16720 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   21c4c:	b130      	cbz	r0, 21c5c <sc_restore_rsp+0x22>
   21c4e:	7a03      	ldrb	r3, [r0, #8]
   21c50:	07db      	lsls	r3, r3, #31
   21c52:	d503      	bpl.n	21c5c <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21c54:	2100      	movs	r1, #0
   21c56:	300c      	adds	r0, #12
   21c58:	f7ff fecc 	bl	219f4 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   21c5c:	b935      	cbnz	r5, 21c6c <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   21c5e:	7a20      	ldrb	r0, [r4, #8]
   21c60:	f104 0188 	add.w	r1, r4, #136	; 0x88
   21c64:	f7f4 fd7a 	bl	1675c <find_sc_cfg>
		if (sc_cfg) {
   21c68:	b100      	cbz	r0, 21c6c <sc_restore_rsp+0x32>
   21c6a:	6085      	str	r5, [r0, #8]
}
   21c6c:	bd38      	pop	{r3, r4, r5, pc}

00021c6e <bt_gatt_attr_read>:
{
   21c6e:	b538      	push	{r3, r4, r5, lr}
   21c70:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   21c74:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   21c78:	428d      	cmp	r5, r1
{
   21c7a:	4610      	mov	r0, r2
	if (offset > value_len) {
   21c7c:	d30b      	bcc.n	21c96 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   21c7e:	1a6d      	subs	r5, r5, r1
   21c80:	429d      	cmp	r5, r3
   21c82:	bfa8      	it	ge
   21c84:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21c86:	9b05      	ldr	r3, [sp, #20]
   21c88:	b2ad      	uxth	r5, r5
   21c8a:	462a      	mov	r2, r5
   21c8c:	4419      	add	r1, r3
   21c8e:	f001 fb5e 	bl	2334e <memcpy>
}
   21c92:	4628      	mov	r0, r5
   21c94:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21c96:	f06f 0506 	mvn.w	r5, #6
   21c9a:	e7fa      	b.n	21c92 <bt_gatt_attr_read+0x24>

00021c9c <bt_gatt_attr_value_handle>:
{
   21c9c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21c9e:	4604      	mov	r4, r0
   21ca0:	b910      	cbnz	r0, 21ca8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   21ca2:	2000      	movs	r0, #0
}
   21ca4:	b002      	add	sp, #8
   21ca6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   21ca8:	2300      	movs	r3, #0
   21caa:	f88d 3004 	strb.w	r3, [sp, #4]
   21cae:	6800      	ldr	r0, [r0, #0]
   21cb0:	f642 0303 	movw	r3, #10243	; 0x2803
   21cb4:	a901      	add	r1, sp, #4
   21cb6:	f8ad 3006 	strh.w	r3, [sp, #6]
   21cba:	f7fe f9b6 	bl	2002a <bt_uuid_cmp>
   21cbe:	2800      	cmp	r0, #0
   21cc0:	d1ef      	bne.n	21ca2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   21cc2:	68e3      	ldr	r3, [r4, #12]
   21cc4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   21cc6:	2800      	cmp	r0, #0
   21cc8:	d1ec      	bne.n	21ca4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   21cca:	4620      	mov	r0, r4
   21ccc:	f7f4 fe2c 	bl	16928 <bt_gatt_attr_get_handle>
   21cd0:	3001      	adds	r0, #1
   21cd2:	b280      	uxth	r0, r0
	return handle;
   21cd4:	e7e6      	b.n	21ca4 <bt_gatt_attr_value_handle+0x8>

00021cd6 <bt_gatt_attr_read_chrc>:
{
   21cd6:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   21cd8:	68cc      	ldr	r4, [r1, #12]
{
   21cda:	b088      	sub	sp, #32
   21cdc:	4608      	mov	r0, r1
   21cde:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   21ce0:	79a3      	ldrb	r3, [r4, #6]
   21ce2:	f88d 300c 	strb.w	r3, [sp, #12]
{
   21ce6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   21ce8:	f7ff ffd8 	bl	21c9c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   21cec:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   21cee:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   21cf2:	7823      	ldrb	r3, [r4, #0]
   21cf4:	b96b      	cbnz	r3, 21d12 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   21cf6:	8863      	ldrh	r3, [r4, #2]
   21cf8:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   21cfc:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   21cfe:	9300      	str	r3, [sp, #0]
   21d00:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   21d04:	ab03      	add	r3, sp, #12
   21d06:	4631      	mov	r1, r6
   21d08:	4628      	mov	r0, r5
   21d0a:	f7ff fdcf 	bl	218ac <bt_gatt_attr_read.constprop.0>
}
   21d0e:	b008      	add	sp, #32
   21d10:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   21d12:	1c63      	adds	r3, r4, #1
   21d14:	f10d 020f 	add.w	r2, sp, #15
   21d18:	3411      	adds	r4, #17
   21d1a:	f853 1b04 	ldr.w	r1, [r3], #4
   21d1e:	f842 1b04 	str.w	r1, [r2], #4
   21d22:	42a3      	cmp	r3, r4
   21d24:	d1f9      	bne.n	21d1a <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   21d26:	2313      	movs	r3, #19
   21d28:	e7e9      	b.n	21cfe <bt_gatt_attr_read_chrc+0x28>

00021d2a <bt_gatt_foreach_attr>:
{
   21d2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   21d2c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   21d30:	2300      	movs	r3, #0
   21d32:	9300      	str	r3, [sp, #0]
   21d34:	461a      	mov	r2, r3
   21d36:	f7f4 fe27 	bl	16988 <bt_gatt_foreach_attr_type>
}
   21d3a:	b005      	add	sp, #20
   21d3c:	f85d fb04 	ldr.w	pc, [sp], #4

00021d40 <db_hash_process>:
	db_hash_gen(true);
   21d40:	f7f4 be7c 	b.w	16a3c <db_hash_gen.constprop.0>

00021d44 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   21d44:	07d3      	lsls	r3, r2, #31
{
   21d46:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21d48:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   21d4a:	d504      	bpl.n	21d56 <bt_gatt_check_perm+0x12>
   21d4c:	f014 0f15 	tst.w	r4, #21
   21d50:	d017      	beq.n	21d82 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   21d52:	684b      	ldr	r3, [r1, #4]
   21d54:	b1ab      	cbz	r3, 21d82 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   21d56:	0793      	lsls	r3, r2, #30
   21d58:	d504      	bpl.n	21d64 <bt_gatt_check_perm+0x20>
   21d5a:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   21d5e:	d012      	beq.n	21d86 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   21d60:	688b      	ldr	r3, [r1, #8]
   21d62:	b183      	cbz	r3, 21d86 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   21d64:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   21d66:	f014 0f30 	tst.w	r4, #48	; 0x30
   21d6a:	d104      	bne.n	21d76 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   21d6c:	f014 000c 	ands.w	r0, r4, #12
   21d70:	bf18      	it	ne
   21d72:	200f      	movne	r0, #15
}
   21d74:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   21d76:	f7fe feaa 	bl	20ace <bt_conn_get_security>
   21d7a:	2802      	cmp	r0, #2
   21d7c:	d8f6      	bhi.n	21d6c <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   21d7e:	2005      	movs	r0, #5
   21d80:	e7f8      	b.n	21d74 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   21d82:	2002      	movs	r0, #2
   21d84:	e7f6      	b.n	21d74 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   21d86:	2003      	movs	r0, #3
   21d88:	e7f4      	b.n	21d74 <bt_gatt_check_perm+0x30>

00021d8a <gatt_notify>:
{
   21d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21d8e:	4614      	mov	r4, r2
   21d90:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   21d92:	2214      	movs	r2, #20
   21d94:	6861      	ldr	r1, [r4, #4]
{
   21d96:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   21d98:	f7ff ffd4 	bl	21d44 <bt_gatt_check_perm>
   21d9c:	bb08      	cbnz	r0, 21de2 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   21d9e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   21da0:	211b      	movs	r1, #27
   21da2:	3202      	adds	r2, #2
   21da4:	4638      	mov	r0, r7
   21da6:	f7ff fbe7 	bl	21578 <bt_att_create_pdu>
	if (!buf) {
   21daa:	4605      	mov	r5, r0
   21dac:	b1e8      	cbz	r0, 21dea <gatt_notify+0x60>
   21dae:	f100 0908 	add.w	r9, r0, #8
   21db2:	2102      	movs	r1, #2
   21db4:	4648      	mov	r0, r9
   21db6:	f000 f933 	bl	22020 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   21dba:	4606      	mov	r6, r0
   21dbc:	89a1      	ldrh	r1, [r4, #12]
   21dbe:	f826 8b02 	strh.w	r8, [r6], #2
   21dc2:	4648      	mov	r0, r9
   21dc4:	f000 f92c 	bl	22020 <net_buf_simple_add>
   21dc8:	89a2      	ldrh	r2, [r4, #12]
   21dca:	68a1      	ldr	r1, [r4, #8]
   21dcc:	4630      	mov	r0, r6
   21dce:	f001 fabe 	bl	2334e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   21dd2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   21dd6:	4629      	mov	r1, r5
   21dd8:	4638      	mov	r0, r7
}
   21dda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   21dde:	f7ff bc3e 	b.w	2165e <bt_att_send>
		return -EPERM;
   21de2:	f04f 30ff 	mov.w	r0, #4294967295
}
   21de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   21dea:	f06f 000b 	mvn.w	r0, #11
   21dee:	e7fa      	b.n	21de6 <gatt_notify+0x5c>

00021df0 <bt_gatt_change_aware>:
{
   21df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21df4:	4606      	mov	r6, r0
   21df6:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   21df8:	f7f4 fc92 	bl	16720 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21dfc:	b918      	cbnz	r0, 21e06 <bt_gatt_change_aware+0x16>
		return true;
   21dfe:	2401      	movs	r4, #1
}
   21e00:	4620      	mov	r0, r4
   21e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   21e06:	7a03      	ldrb	r3, [r0, #8]
   21e08:	07db      	lsls	r3, r3, #31
   21e0a:	d5f8      	bpl.n	21dfe <bt_gatt_change_aware+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21e0c:	f3bf 8f5b 	dmb	ish
   21e10:	68c1      	ldr	r1, [r0, #12]
   21e12:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   21e16:	f011 0801 	ands.w	r8, r1, #1
   21e1a:	f100 050c 	add.w	r5, r0, #12
   21e1e:	d1ee      	bne.n	21dfe <bt_gatt_change_aware+0xe>
	if (!req) {
   21e20:	b90c      	cbnz	r4, 21e26 <bt_gatt_change_aware+0x36>
		return false;
   21e22:	2400      	movs	r4, #0
   21e24:	e7ec      	b.n	21e00 <bt_gatt_change_aware+0x10>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21e26:	f3bf 8f5b 	dmb	ish
   21e2a:	e855 3f00 	ldrex	r3, [r5]
   21e2e:	f023 0202 	bic.w	r2, r3, #2
   21e32:	e845 2100 	strex	r1, r2, [r5]
   21e36:	2900      	cmp	r1, #0
   21e38:	d1f7      	bne.n	21e2a <bt_gatt_change_aware+0x3a>
   21e3a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   21e3e:	f013 0702 	ands.w	r7, r3, #2
		bt_att_clear_out_of_sync_sent(conn);
   21e42:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   21e44:	d006      	beq.n	21e54 <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   21e46:	f7ff fc65 	bl	21714 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21e4a:	4641      	mov	r1, r8
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21e4c:	4628      	mov	r0, r5
   21e4e:	f7ff fdd1 	bl	219f4 <atomic_set_bit>
		return true;
   21e52:	e7d5      	b.n	21e00 <bt_gatt_change_aware+0x10>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   21e54:	f7ff fc5c 	bl	21710 <bt_att_fixed_chan_only>
   21e58:	2800      	cmp	r0, #0
   21e5a:	d0e2      	beq.n	21e22 <bt_gatt_change_aware+0x32>
   21e5c:	4630      	mov	r0, r6
   21e5e:	f7ff fc72 	bl	21746 <bt_att_out_of_sync_sent_on_fixed>
   21e62:	4604      	mov	r4, r0
   21e64:	2800      	cmp	r0, #0
   21e66:	d0dc      	beq.n	21e22 <bt_gatt_change_aware+0x32>
   21e68:	f3bf 8f5b 	dmb	ish
   21e6c:	e855 3f00 	ldrex	r3, [r5]
   21e70:	f023 0302 	bic.w	r3, r3, #2
   21e74:	e845 3200 	strex	r2, r3, [r5]
   21e78:	2a00      	cmp	r2, #0
   21e7a:	d1f7      	bne.n	21e6c <bt_gatt_change_aware+0x7c>
   21e7c:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   21e80:	4630      	mov	r0, r6
   21e82:	f7ff fc47 	bl	21714 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21e86:	4639      	mov	r1, r7
   21e88:	e7e0      	b.n	21e4c <bt_gatt_change_aware+0x5c>

00021e8a <bt_smp_recv>:
{
   21e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   21e8c:	2100      	movs	r1, #0
   21e8e:	f04f 32ff 	mov.w	r2, #4294967295
   21e92:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   21e96:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   21e98:	4608      	mov	r0, r1
   21e9a:	f7fe fef3 	bl	20c84 <bt_l2cap_create_pdu_timeout>
   21e9e:	f100 0608 	add.w	r6, r0, #8
   21ea2:	4604      	mov	r4, r0
   21ea4:	2101      	movs	r1, #1
   21ea6:	4630      	mov	r0, r6
   21ea8:	f000 f8ba 	bl	22020 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   21eac:	2505      	movs	r5, #5
   21eae:	7005      	strb	r5, [r0, #0]
   21eb0:	2101      	movs	r1, #1
   21eb2:	4630      	mov	r0, r6
   21eb4:	f000 f8b4 	bl	22020 <net_buf_simple_add>
   21eb8:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   21eba:	7005      	strb	r5, [r0, #0]
   21ebc:	4622      	mov	r2, r4
   21ebe:	9300      	str	r3, [sp, #0]
   21ec0:	2106      	movs	r1, #6
   21ec2:	4638      	mov	r0, r7
   21ec4:	f7fe fee1 	bl	20c8a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   21ec8:	b110      	cbz	r0, 21ed0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   21eca:	4620      	mov	r0, r4
   21ecc:	f7f5 f976 	bl	171bc <net_buf_unref>
}
   21ed0:	2000      	movs	r0, #0
   21ed2:	b003      	add	sp, #12
   21ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021ed6 <bt_smp_sign>:
   21ed6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21eda:	4770      	bx	lr

00021edc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   21edc:	2000      	movs	r0, #0
   21ede:	4770      	bx	lr

00021ee0 <fixed_data_unref>:
}
   21ee0:	4770      	bx	lr

00021ee2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   21ee2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   21ee4:	6849      	ldr	r1, [r1, #4]
   21ee6:	6809      	ldr	r1, [r1, #0]
   21ee8:	f7f5 b8d4 	b.w	17094 <net_buf_alloc_len>

00021eec <net_buf_get>:
{
   21eec:	b570      	push	{r4, r5, r6, lr}
   21eee:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   21ef0:	f7f8 fe8c 	bl	1ac0c <z_impl_k_queue_get>
	if (!buf) {
   21ef4:	4605      	mov	r5, r0
   21ef6:	b128      	cbz	r0, 21f04 <net_buf_get+0x18>
   21ef8:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   21efa:	7963      	ldrb	r3, [r4, #5]
   21efc:	f013 0301 	ands.w	r3, r3, #1
   21f00:	d102      	bne.n	21f08 <net_buf_get+0x1c>
	frag->frags = NULL;
   21f02:	6023      	str	r3, [r4, #0]
}
   21f04:	4628      	mov	r0, r5
   21f06:	bd70      	pop	{r4, r5, r6, pc}
   21f08:	2300      	movs	r3, #0
   21f0a:	2200      	movs	r2, #0
   21f0c:	4630      	mov	r0, r6
   21f0e:	f7f8 fe7d 	bl	1ac0c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   21f12:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   21f14:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   21f16:	f023 0301 	bic.w	r3, r3, #1
   21f1a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   21f1c:	4604      	mov	r4, r0
   21f1e:	e7ec      	b.n	21efa <net_buf_get+0xe>

00021f20 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   21f20:	6883      	ldr	r3, [r0, #8]
   21f22:	440b      	add	r3, r1
   21f24:	6003      	str	r3, [r0, #0]
}
   21f26:	4770      	bx	lr

00021f28 <net_buf_slist_put>:
{
   21f28:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   21f2a:	460b      	mov	r3, r1
   21f2c:	681c      	ldr	r4, [r3, #0]
   21f2e:	b98c      	cbnz	r4, 21f54 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   21f30:	f04f 0240 	mov.w	r2, #64	; 0x40
   21f34:	f3ef 8411 	mrs	r4, BASEPRI
   21f38:	f382 8812 	msr	BASEPRI_MAX, r2
   21f3c:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   21f40:	b119      	cbz	r1, 21f4a <net_buf_slist_put+0x22>
	return list->tail;
   21f42:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   21f44:	b962      	cbnz	r2, 21f60 <net_buf_slist_put+0x38>
	list->head = node;
   21f46:	6001      	str	r1, [r0, #0]
	list->tail = node;
   21f48:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   21f4a:	f384 8811 	msr	BASEPRI, r4
   21f4e:	f3bf 8f6f 	isb	sy
}
   21f52:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   21f54:	795a      	ldrb	r2, [r3, #5]
   21f56:	f042 0201 	orr.w	r2, r2, #1
   21f5a:	715a      	strb	r2, [r3, #5]
   21f5c:	4623      	mov	r3, r4
   21f5e:	e7e5      	b.n	21f2c <net_buf_slist_put+0x4>
	parent->next = child;
   21f60:	6011      	str	r1, [r2, #0]
}
   21f62:	e7f1      	b.n	21f48 <net_buf_slist_put+0x20>

00021f64 <net_buf_slist_get>:
{
   21f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   21f66:	4603      	mov	r3, r0
	__asm__ volatile(
   21f68:	f04f 0240 	mov.w	r2, #64	; 0x40
   21f6c:	f3ef 8611 	mrs	r6, BASEPRI
   21f70:	f382 8812 	msr	BASEPRI_MAX, r2
   21f74:	f3bf 8f6f 	isb	sy
	return list->head;
   21f78:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   21f7a:	b158      	cbz	r0, 21f94 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21f7c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   21f7e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21f80:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21f82:	4288      	cmp	r0, r1
	list->tail = node;
   21f84:	bf08      	it	eq
   21f86:	605a      	streq	r2, [r3, #4]
   21f88:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   21f8a:	7951      	ldrb	r1, [r2, #5]
   21f8c:	f011 0401 	ands.w	r4, r1, #1
   21f90:	d105      	bne.n	21f9e <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   21f92:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   21f94:	f386 8811 	msr	BASEPRI, r6
   21f98:	f3bf 8f6f 	isb	sy
}
   21f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   21f9e:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   21fa0:	b12c      	cbz	r4, 21fae <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21fa2:	685f      	ldr	r7, [r3, #4]
	return node->next;
   21fa4:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   21fa6:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21fa8:	42bc      	cmp	r4, r7
	list->tail = node;
   21faa:	bf08      	it	eq
   21fac:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   21fae:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   21fb2:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   21fb4:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   21fb6:	4622      	mov	r2, r4
   21fb8:	e7e7      	b.n	21f8a <net_buf_slist_get+0x26>

00021fba <net_buf_put>:
{
   21fba:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   21fbc:	460a      	mov	r2, r1
   21fbe:	6814      	ldr	r4, [r2, #0]
   21fc0:	b914      	cbnz	r4, 21fc8 <net_buf_put+0xe>
}
   21fc2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   21fc4:	f000 bd6f 	b.w	22aa6 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   21fc8:	7953      	ldrb	r3, [r2, #5]
   21fca:	f043 0301 	orr.w	r3, r3, #1
   21fce:	7153      	strb	r3, [r2, #5]
   21fd0:	4622      	mov	r2, r4
   21fd2:	e7f4      	b.n	21fbe <net_buf_put+0x4>

00021fd4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   21fd4:	7902      	ldrb	r2, [r0, #4]
   21fd6:	3201      	adds	r2, #1
   21fd8:	7102      	strb	r2, [r0, #4]
	return buf;
}
   21fda:	4770      	bx	lr

00021fdc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   21fdc:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   21fde:	4618      	mov	r0, r3
   21fe0:	681b      	ldr	r3, [r3, #0]
   21fe2:	2b00      	cmp	r3, #0
   21fe4:	d1fb      	bne.n	21fde <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   21fe6:	4770      	bx	lr

00021fe8 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   21fe8:	6802      	ldr	r2, [r0, #0]
{
   21fea:	b510      	push	{r4, lr}
	if (parent->frags) {
   21fec:	b12a      	cbz	r2, 21ffa <net_buf_frag_insert+0x12>
   21fee:	460b      	mov	r3, r1
	while (buf->frags) {
   21ff0:	461c      	mov	r4, r3
   21ff2:	681b      	ldr	r3, [r3, #0]
   21ff4:	2b00      	cmp	r3, #0
   21ff6:	d1fb      	bne.n	21ff0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   21ff8:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   21ffa:	6001      	str	r1, [r0, #0]
}
   21ffc:	bd10      	pop	{r4, pc}

00021ffe <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   21ffe:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22000:	4604      	mov	r4, r0
   22002:	b920      	cbnz	r0, 2200e <net_buf_frag_add+0x10>
	buf->ref++;
   22004:	790b      	ldrb	r3, [r1, #4]
   22006:	3301      	adds	r3, #1
   22008:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2200a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2200c:	bd10      	pop	{r4, pc}
   2200e:	4603      	mov	r3, r0
	while (buf->frags) {
   22010:	4618      	mov	r0, r3
   22012:	681b      	ldr	r3, [r3, #0]
   22014:	2b00      	cmp	r3, #0
   22016:	d1fb      	bne.n	22010 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   22018:	f7ff ffe6 	bl	21fe8 <net_buf_frag_insert>
   2201c:	4620      	mov	r0, r4
   2201e:	e7f5      	b.n	2200c <net_buf_frag_add+0xe>

00022020 <net_buf_simple_add>:
	return buf->data + buf->len;
   22020:	8883      	ldrh	r3, [r0, #4]
   22022:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22024:	4419      	add	r1, r3
   22026:	8081      	strh	r1, [r0, #4]
	return tail;
}
   22028:	18d0      	adds	r0, r2, r3
   2202a:	4770      	bx	lr

0002202c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2202c:	b430      	push	{r4, r5}
   2202e:	8884      	ldrh	r4, [r0, #4]
   22030:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   22032:	18a3      	adds	r3, r4, r2
   22034:	8083      	strh	r3, [r0, #4]
   22036:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   22038:	bc30      	pop	{r4, r5}
   2203a:	f001 b988 	b.w	2334e <memcpy>

0002203e <net_buf_simple_add_u8>:
   2203e:	8883      	ldrh	r3, [r0, #4]
   22040:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   22042:	b510      	push	{r4, lr}
	buf->len += len;
   22044:	1c5c      	adds	r4, r3, #1
   22046:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   22048:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2204a:	18d0      	adds	r0, r2, r3
   2204c:	bd10      	pop	{r4, pc}

0002204e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2204e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   22050:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   22052:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   22054:	1a40      	subs	r0, r0, r1
	buf->len += len;
   22056:	4411      	add	r1, r2
	buf->data -= len;
   22058:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2205a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2205c:	4770      	bx	lr

0002205e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2205e:	8882      	ldrh	r2, [r0, #4]
   22060:	1a52      	subs	r2, r2, r1
{
   22062:	4603      	mov	r3, r0
	buf->len -= len;
   22064:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   22066:	6800      	ldr	r0, [r0, #0]
   22068:	4408      	add	r0, r1
   2206a:	6018      	str	r0, [r3, #0]
}
   2206c:	4770      	bx	lr

0002206e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2206e:	4603      	mov	r3, r0
	void *data = buf->data;
   22070:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   22072:	889a      	ldrh	r2, [r3, #4]
   22074:	1a52      	subs	r2, r2, r1
	buf->data += len;
   22076:	4401      	add	r1, r0
	buf->len -= len;
   22078:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2207a:	6019      	str	r1, [r3, #0]

	return data;
}
   2207c:	4770      	bx	lr

0002207e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2207e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   22080:	6803      	ldr	r3, [r0, #0]
   22082:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   22084:	2102      	movs	r1, #2
   22086:	f7ff ffea 	bl	2205e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2208a:	4620      	mov	r0, r4
   2208c:	bd10      	pop	{r4, pc}

0002208e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2208e:	6802      	ldr	r2, [r0, #0]
   22090:	6880      	ldr	r0, [r0, #8]
}
   22092:	1a10      	subs	r0, r2, r0
   22094:	4770      	bx	lr

00022096 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   22096:	8883      	ldrh	r3, [r0, #4]
   22098:	88c2      	ldrh	r2, [r0, #6]
   2209a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2209c:	6803      	ldr	r3, [r0, #0]
   2209e:	6880      	ldr	r0, [r0, #8]
   220a0:	1a18      	subs	r0, r3, r0
}
   220a2:	1a10      	subs	r0, r2, r0
   220a4:	4770      	bx	lr

000220a6 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   220a6:	f1a0 0308 	sub.w	r3, r0, #8
   220aa:	f3bf 8f5b 	dmb	ish
   220ae:	e853 2f00 	ldrex	r2, [r3]
   220b2:	1c51      	adds	r1, r2, #1
   220b4:	e843 1c00 	strex	ip, r1, [r3]
   220b8:	f1bc 0f00 	cmp.w	ip, #0
   220bc:	d1f7      	bne.n	220ae <adc_context_on_timer_expired+0x8>
   220be:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   220c2:	b91a      	cbnz	r2, 220cc <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   220c4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   220c8:	f7f5 b914 	b.w	172f4 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   220cc:	f06f 030f 	mvn.w	r3, #15
   220d0:	6683      	str	r3, [r0, #104]	; 0x68
}
   220d2:	4770      	bx	lr

000220d4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   220d4:	6903      	ldr	r3, [r0, #16]
   220d6:	b2c9      	uxtb	r1, r1
   220d8:	220c      	movs	r2, #12
   220da:	fb01 3302 	mla	r3, r1, r2, r3
   220de:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   220e0:	f000 0007 	and.w	r0, r0, #7
   220e4:	4770      	bx	lr

000220e6 <set_on_state>:
	__asm__ volatile(
   220e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   220ea:	f3ef 8211 	mrs	r2, BASEPRI
   220ee:	f383 8812 	msr	BASEPRI_MAX, r3
   220f2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   220f6:	6803      	ldr	r3, [r0, #0]
   220f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   220fc:	f043 0302 	orr.w	r3, r3, #2
   22100:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22102:	f382 8811 	msr	BASEPRI, r2
   22106:	f3bf 8f6f 	isb	sy
}
   2210a:	4770      	bx	lr

0002210c <stop>:
{
   2210c:	4603      	mov	r3, r0
   2210e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   22110:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   22112:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22114:	f04f 0440 	mov.w	r4, #64	; 0x40
   22118:	f3ef 8611 	mrs	r6, BASEPRI
   2211c:	f384 8812 	msr	BASEPRI_MAX, r4
   22120:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22124:	250c      	movs	r5, #12
   22126:	fb05 0401 	mla	r4, r5, r1, r0
   2212a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2212c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   22130:	d001      	beq.n	22136 <stop+0x2a>
   22132:	42a2      	cmp	r2, r4
   22134:	d110      	bne.n	22158 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22136:	fb05 0001 	mla	r0, r5, r1, r0
   2213a:	2201      	movs	r2, #1
   2213c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2213e:	2000      	movs	r0, #0
	__asm__ volatile(
   22140:	f386 8811 	msr	BASEPRI, r6
   22144:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   22148:	b928      	cbnz	r0, 22156 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   2214a:	685b      	ldr	r3, [r3, #4]
   2214c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   22150:	684b      	ldr	r3, [r1, #4]
   22152:	4798      	blx	r3
	return 0;
   22154:	2000      	movs	r0, #0
}
   22156:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   22158:	f04f 30ff 	mov.w	r0, #4294967295
   2215c:	e7f0      	b.n	22140 <stop+0x34>

0002215e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2215e:	2280      	movs	r2, #128	; 0x80
   22160:	f7ff bfd4 	b.w	2210c <stop>

00022164 <async_start>:
{
   22164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22166:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   22168:	6904      	ldr	r4, [r0, #16]
{
   2216a:	4605      	mov	r5, r0
   2216c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2216e:	f04f 0040 	mov.w	r0, #64	; 0x40
   22172:	f3ef 8c11 	mrs	ip, BASEPRI
   22176:	f380 8812 	msr	BASEPRI_MAX, r0
   2217a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2217e:	260c      	movs	r6, #12
   22180:	fb06 4601 	mla	r6, r6, r1, r4
   22184:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22186:	f000 0e07 	and.w	lr, r0, #7
   2218a:	f1be 0f01 	cmp.w	lr, #1
   2218e:	d111      	bne.n	221b4 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22190:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   22192:	2600      	movs	r6, #0
	__asm__ volatile(
   22194:	f38c 8811 	msr	BASEPRI, ip
   22198:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2219c:	b946      	cbnz	r6, 221b0 <async_start+0x4c>
	subdata->cb = cb;
   2219e:	200c      	movs	r0, #12
   221a0:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   221a4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   221a8:	686b      	ldr	r3, [r5, #4]
   221aa:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   221ae:	4798      	blx	r3
}
   221b0:	4630      	mov	r0, r6
   221b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   221b4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   221b8:	4287      	cmp	r7, r0
   221ba:	bf14      	ite	ne
   221bc:	f04f 36ff 	movne.w	r6, #4294967295
   221c0:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   221c4:	e7e6      	b.n	22194 <async_start+0x30>

000221c6 <api_start>:
{
   221c6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   221c8:	2480      	movs	r4, #128	; 0x80
   221ca:	9400      	str	r4, [sp, #0]
   221cc:	f7ff ffca 	bl	22164 <async_start>
}
   221d0:	b002      	add	sp, #8
   221d2:	bd10      	pop	{r4, pc}

000221d4 <onoff_started_callback>:
	return &data->mgr[type];
   221d4:	6900      	ldr	r0, [r0, #16]
{
   221d6:	b410      	push	{r4}
	return &data->mgr[type];
   221d8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   221da:	241c      	movs	r4, #28
   221dc:	fb03 0004 	mla	r0, r3, r4, r0
   221e0:	2100      	movs	r1, #0
}
   221e2:	bc10      	pop	{r4}
	notify(mgr, 0);
   221e4:	4710      	bx	r2

000221e6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   221e6:	2000      	movs	r0, #0
   221e8:	f7f7 b956 	b.w	19498 <nrfx_clock_start>

000221ec <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   221ec:	2000      	movs	r0, #0
   221ee:	f000 b9c7 	b.w	22580 <nrfx_clock_stop>

000221f2 <blocking_start_callback>:
{
   221f2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   221f4:	f7f8 bd3e 	b.w	1ac74 <z_impl_k_sem_give>

000221f8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   221f8:	6843      	ldr	r3, [r0, #4]
   221fa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   221fc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22200:	600b      	str	r3, [r1, #0]
}
   22202:	2000      	movs	r0, #0
   22204:	4770      	bx	lr

00022206 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22206:	6843      	ldr	r3, [r0, #4]
   22208:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2220a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2220e:	4042      	eors	r2, r0
   22210:	400a      	ands	r2, r1
   22212:	4042      	eors	r2, r0
    p_reg->OUT = value;
   22214:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   22218:	2000      	movs	r0, #0
   2221a:	4770      	bx	lr

0002221c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2221c:	6843      	ldr	r3, [r0, #4]
   2221e:	685b      	ldr	r3, [r3, #4]
}
   22220:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22222:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   22226:	4770      	bx	lr

00022228 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22228:	6843      	ldr	r3, [r0, #4]
   2222a:	685b      	ldr	r3, [r3, #4]
}
   2222c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2222e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22232:	4770      	bx	lr

00022234 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22234:	6843      	ldr	r3, [r0, #4]
   22236:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   22238:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2223c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2223e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22242:	2000      	movs	r0, #0
   22244:	4770      	bx	lr

00022246 <gpio_nrfx_manage_callback>:
	return port->data;
   22246:	6903      	ldr	r3, [r0, #16]
	return list->head;
   22248:	6858      	ldr	r0, [r3, #4]
{
   2224a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2224c:	b158      	cbz	r0, 22266 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2224e:	2400      	movs	r4, #0
   22250:	4281      	cmp	r1, r0
   22252:	d112      	bne.n	2227a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   22254:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   22256:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   22258:	b954      	cbnz	r4, 22270 <gpio_nrfx_manage_callback+0x2a>
   2225a:	428d      	cmp	r5, r1
	list->head = node;
   2225c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2225e:	d100      	bne.n	22262 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   22260:	6098      	str	r0, [r3, #8]
	parent->next = child;
   22262:	2000      	movs	r0, #0
   22264:	6008      	str	r0, [r1, #0]
	if (set) {
   22266:	b96a      	cbnz	r2, 22284 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   22268:	2000      	movs	r0, #0
}
   2226a:	bd30      	pop	{r4, r5, pc}
   2226c:	4628      	mov	r0, r5
   2226e:	e7ef      	b.n	22250 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   22270:	428d      	cmp	r5, r1
	parent->next = child;
   22272:	6020      	str	r0, [r4, #0]
	list->tail = node;
   22274:	bf08      	it	eq
   22276:	609c      	streq	r4, [r3, #8]
}
   22278:	e7f3      	b.n	22262 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2227a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2227c:	4604      	mov	r4, r0
   2227e:	2d00      	cmp	r5, #0
   22280:	d1f4      	bne.n	2226c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   22282:	b13a      	cbz	r2, 22294 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   22284:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   22286:	685a      	ldr	r2, [r3, #4]
   22288:	600a      	str	r2, [r1, #0]
	list->head = node;
   2228a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2228c:	2800      	cmp	r0, #0
   2228e:	d1eb      	bne.n	22268 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   22290:	6099      	str	r1, [r3, #8]
}
   22292:	e7ea      	b.n	2226a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   22294:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22298:	e7e7      	b.n	2226a <gpio_nrfx_manage_callback+0x24>

0002229a <i2c_nrfx_twim_configure>:
{
   2229a:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   2229c:	07cb      	lsls	r3, r1, #31
{
   2229e:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   222a0:	d41d      	bmi.n	222de <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
   222a2:	f3c1 0142 	ubfx	r1, r1, #1, #3
   222a6:	2901      	cmp	r1, #1
   222a8:	d016      	beq.n	222d8 <i2c_nrfx_twim_configure+0x3e>
   222aa:	2902      	cmp	r1, #2
   222ac:	d117      	bne.n	222de <i2c_nrfx_twim_configure+0x44>
   222ae:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   222b2:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   222b4:	6baa      	ldr	r2, [r5, #56]	; 0x38
   222b6:	4293      	cmp	r3, r2
   222b8:	d014      	beq.n	222e4 <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
   222ba:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   222bc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   222c0:	b12b      	cbz	r3, 222ce <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
   222c2:	6860      	ldr	r0, [r4, #4]
   222c4:	f7f7 fe42 	bl	19f4c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   222c8:	2300      	movs	r3, #0
   222ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   222ce:	4620      	mov	r0, r4
}
   222d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   222d4:	f7f5 bca2 	b.w	17c1c <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
   222d8:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   222dc:	e7e9      	b.n	222b2 <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
   222de:	f06f 0015 	mvn.w	r0, #21
}
   222e2:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   222e4:	2000      	movs	r0, #0
   222e6:	e7fc      	b.n	222e2 <i2c_nrfx_twim_configure+0x48>

000222e8 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   222e8:	b510      	push	{r4, lr}
   222ea:	2200      	movs	r2, #0
   222ec:	4604      	mov	r4, r0
   222ee:	2101      	movs	r1, #1
   222f0:	2003      	movs	r0, #3
   222f2:	f7f1 f811 	bl	13318 <z_arm_irq_priority_set>
   222f6:	4620      	mov	r0, r4
   222f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   222fc:	f7f5 bc8e 	b.w	17c1c <init_twim>

00022300 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   22300:	6902      	ldr	r2, [r0, #16]
{
   22302:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   22304:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   22308:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2230c:	2000      	movs	r0, #0
   2230e:	4770      	bx	lr

00022310 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22310:	6843      	ldr	r3, [r0, #4]
   22312:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22314:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22318:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2231c:	4770      	bx	lr

0002231e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2231e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   22320:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   22322:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22324:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   22328:	b148      	cbz	r0, 2233e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2232a:	7c52      	ldrb	r2, [r2, #17]
   2232c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2232e:	2000      	movs	r0, #0
   22330:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   22334:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22338:	2201      	movs	r2, #1
   2233a:	601a      	str	r2, [r3, #0]
	return 0;
   2233c:	4770      	bx	lr
		return -1;
   2233e:	f04f 30ff 	mov.w	r0, #4294967295
}
   22342:	4770      	bx	lr

00022344 <nrf_gpio_cfg_input>:
{
   22344:	b507      	push	{r0, r1, r2, lr}
   22346:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22348:	a801      	add	r0, sp, #4
   2234a:	f7f5 fd71 	bl	17e30 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2234e:	9b01      	ldr	r3, [sp, #4]
   22350:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22354:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   22356:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   2235a:	b003      	add	sp, #12
   2235c:	f85d fb04 	ldr.w	pc, [sp], #4

00022360 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   22360:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   22362:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22364:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   22368:	b940      	cbnz	r0, 2237c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2236a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2236c:	079b      	lsls	r3, r3, #30
   2236e:	d406      	bmi.n	2237e <is_tx_ready.isra.0+0x1e>
   22370:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   22374:	3800      	subs	r0, #0
   22376:	bf18      	it	ne
   22378:	2001      	movne	r0, #1
   2237a:	4770      	bx	lr
   2237c:	2001      	movs	r0, #1
}
   2237e:	4770      	bx	lr

00022380 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   22380:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   22382:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   22384:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   22388:	05c9      	lsls	r1, r1, #23
   2238a:	d518      	bpl.n	223be <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2238c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   22390:	b1a9      	cbz	r1, 223be <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   22392:	f04f 0040 	mov.w	r0, #64	; 0x40
   22396:	f3ef 8111 	mrs	r1, BASEPRI
   2239a:	f380 8812 	msr	BASEPRI_MAX, r0
   2239e:	f3bf 8f6f 	isb	sy
   223a2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   223a6:	b130      	cbz	r0, 223b6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   223a8:	2000      	movs	r0, #0
   223aa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   223ae:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   223b2:	2001      	movs	r0, #1
   223b4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   223b6:	f381 8811 	msr	BASEPRI, r1
   223ba:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   223be:	6852      	ldr	r2, [r2, #4]
   223c0:	06d2      	lsls	r2, r2, #27
   223c2:	d515      	bpl.n	223f0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   223c4:	f04f 0140 	mov.w	r1, #64	; 0x40
   223c8:	f3ef 8211 	mrs	r2, BASEPRI
   223cc:	f381 8812 	msr	BASEPRI_MAX, r1
   223d0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   223d4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   223d8:	b111      	cbz	r1, 223e0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   223da:	2100      	movs	r1, #0
   223dc:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   223e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   223e4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   223e8:	f382 8811 	msr	BASEPRI, r2
   223ec:	f3bf 8f6f 	isb	sy
}
   223f0:	4770      	bx	lr

000223f2 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   223f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   223f4:	460f      	mov	r7, r1
   223f6:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   223f8:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   223fc:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   223fe:	42a6      	cmp	r6, r4
   22400:	d803      	bhi.n	2240a <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   22402:	d116      	bne.n	22432 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   22404:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   22406:	b003      	add	sp, #12
   22408:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2240a:	1b33      	subs	r3, r6, r4
   2240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22410:	bf38      	it	cc
   22412:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   22414:	462a      	mov	r2, r5
   22416:	ab01      	add	r3, sp, #4
   22418:	1939      	adds	r1, r7, r4
   2241a:	2000      	movs	r0, #0
   2241c:	f7fa f81c 	bl	1c458 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   22420:	b920      	cbnz	r0, 2242c <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   22422:	9b01      	ldr	r3, [sp, #4]
   22424:	42ab      	cmp	r3, r5
   22426:	d101      	bne.n	2242c <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   22428:	442c      	add	r4, r5
   2242a:	e7e8      	b.n	223fe <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   2242c:	f06f 0015 	mvn.w	r0, #21
   22430:	e7e9      	b.n	22406 <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   22432:	2016      	movs	r0, #22
   22434:	e7e7      	b.n	22406 <entropy_cc3xx_rng_get_entropy+0x14>

00022436 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   22436:	2200      	movs	r2, #0
{
   22438:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2243a:	4611      	mov	r1, r2
   2243c:	4610      	mov	r0, r2
   2243e:	f7f9 ffd9 	bl	1c3f4 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   22442:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   22444:	bf18      	it	ne
   22446:	f06f 0015 	mvnne.w	r0, #21
   2244a:	bd08      	pop	{r3, pc}

0002244c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2244c:	4770      	bx	lr

0002244e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2244e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   22450:	2000      	movs	r0, #0
   22452:	f7f1 fb0f 	bl	13a74 <sys_arch_reboot>

00022456 <sdc_assertion_handler>:
	k_oops();
   22456:	4040      	eors	r0, r0
   22458:	f380 8811 	msr	BASEPRI, r0
   2245c:	f04f 0003 	mov.w	r0, #3
   22460:	df02      	svc	2
}
   22462:	4770      	bx	lr

00022464 <rand_prio_high_vector_get>:
   22464:	f7f6 bb04 	b.w	18a70 <rand_prio_low_vector_get>

00022468 <hci_driver_send>:
{
   22468:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2246a:	8983      	ldrh	r3, [r0, #12]
{
   2246c:	4605      	mov	r5, r0
	if (!buf->len) {
   2246e:	b373      	cbz	r3, 224ce <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   22470:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   22472:	b1a3      	cbz	r3, 2249e <hci_driver_send+0x36>
   22474:	2b02      	cmp	r3, #2
   22476:	d12a      	bne.n	224ce <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22478:	f04f 30ff 	mov.w	r0, #4294967295
   2247c:	f04f 31ff 	mov.w	r1, #4294967295
   22480:	f7f6 fa42 	bl	18908 <multithreading_lock_acquire>
	if (!errcode) {
   22484:	4604      	mov	r4, r0
   22486:	b940      	cbnz	r0, 2249a <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   22488:	68a8      	ldr	r0, [r5, #8]
   2248a:	f7eb f82a 	bl	d4e2 <sdc_hci_data_put>
   2248e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22490:	f7f6 fa42 	bl	18918 <multithreading_lock_release>
		if (errcode) {
   22494:	b1b4      	cbz	r4, 224c4 <hci_driver_send+0x5c>
			receive_signal_raise();
   22496:	f7f6 faff 	bl	18a98 <receive_signal_raise>
}
   2249a:	4620      	mov	r0, r4
   2249c:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2249e:	f04f 30ff 	mov.w	r0, #4294967295
   224a2:	f04f 31ff 	mov.w	r1, #4294967295
   224a6:	f7f6 fa2f 	bl	18908 <multithreading_lock_acquire>
	if (!errcode) {
   224aa:	4604      	mov	r4, r0
   224ac:	2800      	cmp	r0, #0
   224ae:	d1f4      	bne.n	2249a <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   224b0:	68a8      	ldr	r0, [r5, #8]
   224b2:	f7f6 fb67 	bl	18b84 <hci_internal_cmd_put>
   224b6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   224b8:	f7f6 fa2e 	bl	18918 <multithreading_lock_release>
	if (errcode) {
   224bc:	2c00      	cmp	r4, #0
   224be:	d1ec      	bne.n	2249a <hci_driver_send+0x32>
	receive_signal_raise();
   224c0:	f7f6 faea 	bl	18a98 <receive_signal_raise>
		net_buf_unref(buf);
   224c4:	4628      	mov	r0, r5
   224c6:	f7f4 fe79 	bl	171bc <net_buf_unref>
   224ca:	2400      	movs	r4, #0
   224cc:	e7e5      	b.n	2249a <hci_driver_send+0x32>
	switch (type) {
   224ce:	f06f 0415 	mvn.w	r4, #21
   224d2:	e7e2      	b.n	2249a <hci_driver_send+0x32>

000224d4 <receive_work_handler>:
	hci_driver_receive_process();
   224d4:	f7f6 baf4 	b.w	18ac0 <hci_driver_receive_process>

000224d8 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   224d8:	f101 0320 	add.w	r3, r1, #32
   224dc:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   224de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   224e2:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   224e6:	428b      	cmp	r3, r1
   224e8:	d1f9      	bne.n	224de <sys_memcpy_swap.constprop.0+0x6>
}
   224ea:	4770      	bx	lr

000224ec <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   224ec:	2100      	movs	r1, #0
   224ee:	f7f6 bf47 	b.w	19380 <cmd_le_generate_dhkey>

000224f2 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   224f2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   224f6:	2901      	cmp	r1, #1
   224f8:	d801      	bhi.n	224fe <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   224fa:	f7f6 bf41 	b.w	19380 <cmd_le_generate_dhkey>
}
   224fe:	2012      	movs	r0, #18
   22500:	4770      	bx	lr

00022502 <m_assert_handler>:
	k_oops();
   22502:	4040      	eors	r0, r0
   22504:	f380 8811 	msr	BASEPRI, r0
   22508:	f04f 0003 	mov.w	r0, #3
   2250c:	df02      	svc	2
}
   2250e:	4770      	bx	lr

00022510 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22510:	4668      	mov	r0, sp
   22512:	f020 0107 	bic.w	r1, r0, #7
   22516:	468d      	mov	sp, r1
   22518:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2251a:	f7e1 f9ef 	bl	38fc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2251e:	f7f0 ff15 	bl	1334c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   22522:	f7f0 fffd 	bl	13520 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22526:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2252a:	4685      	mov	sp, r0
   2252c:	4770      	bx	lr

0002252e <mpsl_low_prio_work_handler>:
{
   2252e:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22530:	f04f 31ff 	mov.w	r1, #4294967295
   22534:	f04f 30ff 	mov.w	r0, #4294967295
   22538:	f7f6 f9e6 	bl	18908 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   2253c:	f7ea fb62 	bl	cc04 <mpsl_low_priority_process>
}
   22540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   22544:	f7f6 b9e8 	b.w	18918 <multithreading_lock_release>

00022548 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   22548:	4668      	mov	r0, sp
   2254a:	f020 0107 	bic.w	r1, r0, #7
   2254e:	468d      	mov	sp, r1
   22550:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   22552:	f7e1 f951 	bl	37f8 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   22556:	f7f0 fef9 	bl	1334c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2255a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2255e:	4685      	mov	sp, r0
   22560:	4770      	bx	lr

00022562 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22562:	4668      	mov	r0, sp
   22564:	f020 0107 	bic.w	r1, r0, #7
   22568:	468d      	mov	sp, r1
   2256a:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2256c:	f7ea fa72 	bl	ca54 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   22570:	f7f0 feec 	bl	1334c <_arch_isr_direct_pm>
   22574:	f7f0 ffd4 	bl	13520 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   22578:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2257c:	4685      	mov	sp, r0
   2257e:	4770      	bx	lr

00022580 <nrfx_clock_stop>:
	switch (domain) {
   22580:	2801      	cmp	r0, #1
   22582:	d101      	bne.n	22588 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   22584:	f7e1 bfda 	b.w	453c <mpsl_clock_hfclk_release>
}
   22588:	4770      	bx	lr

0002258a <nrfx_clock_enable>:
}
   2258a:	4770      	bx	lr

0002258c <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2258c:	f7e1 bdf0 	b.w	4170 <MPSL_IRQ_CLOCK_Handler>

00022590 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   22590:	f7f9 beda 	b.w	1c348 <nrf_cc3xx_platform_init>

00022594 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   22594:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   22596:	f7f0 fda5 	bl	130e4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2259a:	f7f0 fe57 	bl	1324c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2259e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   225a2:	f7f9 bed1 	b.w	1c348 <nrf_cc3xx_platform_init>

000225a6 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   225a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   225aa:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   225ae:	f1a0 0308 	sub.w	r3, r0, #8
   225b2:	4258      	negs	r0, r3
   225b4:	4158      	adcs	r0, r3
   225b6:	4770      	bx	lr

000225b8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   225b8:	4700      	bx	r0

000225ba <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   225ba:	f000 bd10 	b.w	22fde <z_impl_k_busy_wait>

000225be <nrf_gpio_reconfigure>:
{
   225be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   225c0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   225c2:	a801      	add	r0, sp, #4
{
   225c4:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   225c8:	4617      	mov	r7, r2
   225ca:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   225cc:	f7f7 f8c8 	bl	19760 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   225d0:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   225d2:	2f00      	cmp	r7, #0
   225d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   225d8:	bf14      	ite	ne
   225da:	2302      	movne	r3, #2
   225dc:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   225de:	2900      	cmp	r1, #0
   225e0:	bf18      	it	ne
   225e2:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   225e6:	2d00      	cmp	r5, #0
   225e8:	bf14      	ite	ne
   225ea:	f04f 0c0c 	movne.w	ip, #12
   225ee:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   225f2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   225f4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   225f8:	bf14      	ite	ne
   225fa:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   225fe:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   22602:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   22604:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22608:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2260c:	bf14      	ite	ne
   2260e:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   22612:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   22616:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   2261a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2261e:	b101      	cbz	r1, 22622 <nrf_gpio_reconfigure+0x64>
   22620:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   22622:	b10f      	cbz	r7, 22628 <nrf_gpio_reconfigure+0x6a>
   22624:	783f      	ldrb	r7, [r7, #0]
   22626:	007f      	lsls	r7, r7, #1
   22628:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2262a:	b10d      	cbz	r5, 22630 <nrf_gpio_reconfigure+0x72>
   2262c:	782d      	ldrb	r5, [r5, #0]
   2262e:	00ad      	lsls	r5, r5, #2
   22630:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   22632:	b10c      	cbz	r4, 22638 <nrf_gpio_reconfigure+0x7a>
   22634:	7822      	ldrb	r2, [r4, #0]
   22636:	0214      	lsls	r4, r2, #8
   22638:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2263a:	b10e      	cbz	r6, 22640 <nrf_gpio_reconfigure+0x82>
   2263c:	7836      	ldrb	r6, [r6, #0]
   2263e:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22640:	432c      	orrs	r4, r5
   22642:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   22644:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   22648:	b003      	add	sp, #12
   2264a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002264c <nrf_gpio_cfg_sense_set>:
{
   2264c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2264e:	f10d 030f 	add.w	r3, sp, #15
   22652:	9301      	str	r3, [sp, #4]
   22654:	2300      	movs	r3, #0
{
   22656:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2265a:	9300      	str	r3, [sp, #0]
   2265c:	461a      	mov	r2, r3
   2265e:	4619      	mov	r1, r3
   22660:	f7ff ffad 	bl	225be <nrf_gpio_reconfigure>
}
   22664:	b005      	add	sp, #20
   22666:	f85d fb04 	ldr.w	pc, [sp], #4

0002266a <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2266a:	7b0a      	ldrb	r2, [r1, #12]
{
   2266c:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   2266e:	2a03      	cmp	r2, #3
   22670:	d829      	bhi.n	226c6 <xfer_completeness_check+0x5c>
   22672:	e8df f002 	tbb	[pc, r2]
   22676:	2521      	.short	0x2521
   22678:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2267a:	688a      	ldr	r2, [r1, #8]
   2267c:	0350      	lsls	r0, r2, #13
   2267e:	d504      	bpl.n	2268a <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   22680:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   22684:	6908      	ldr	r0, [r1, #16]
   22686:	4290      	cmp	r0, r2
   22688:	d107      	bne.n	2269a <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2268a:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2268c:	0352      	lsls	r2, r2, #13
   2268e:	d41a      	bmi.n	226c6 <xfer_completeness_check+0x5c>
   22690:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22694:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   22696:	4291      	cmp	r1, r2
   22698:	d015      	beq.n	226c6 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2269a:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2269c:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2269e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   226a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   226a6:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   226a8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   226ac:	6908      	ldr	r0, [r1, #16]
   226ae:	4290      	cmp	r0, r2
   226b0:	d1f3      	bne.n	2269a <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   226b2:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   226b6:	e7ed      	b.n	22694 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   226b8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   226bc:	6909      	ldr	r1, [r1, #16]
   226be:	e7ea      	b.n	22696 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   226c0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   226c4:	e7fa      	b.n	226bc <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   226c6:	2001      	movs	r0, #1
}
   226c8:	4770      	bx	lr

000226ca <nrf_gpio_pin_set>:
{
   226ca:	b507      	push	{r0, r1, r2, lr}
   226cc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   226ce:	a801      	add	r0, sp, #4
   226d0:	f7f7 febe 	bl	1a450 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   226d4:	9a01      	ldr	r2, [sp, #4]
   226d6:	2301      	movs	r3, #1
   226d8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   226da:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   226de:	b003      	add	sp, #12
   226e0:	f85d fb04 	ldr.w	pc, [sp], #4

000226e4 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   226e4:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   226e6:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   226e8:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   226ea:	bf9c      	itt	ls
   226ec:	6880      	ldrls	r0, [r0, #8]
   226ee:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   226f0:	3b01      	subs	r3, #1
   226f2:	1a98      	subs	r0, r3, r2
}
   226f4:	4770      	bx	lr

000226f6 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   226f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226fa:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   226fc:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22700:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   22704:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   22708:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   2270a:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2270e:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22710:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   22712:	d906      	bls.n	22722 <_WriteNoCheck+0x2c>
   22714:	f000 fe1b 	bl	2334e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   22718:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   2271c:	60e5      	str	r5, [r4, #12]
}
   2271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22722:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   22724:	eba5 0508 	sub.w	r5, r5, r8
   22728:	f000 fe11 	bl	2334e <memcpy>
   2272c:	6860      	ldr	r0, [r4, #4]
   2272e:	462a      	mov	r2, r5
   22730:	19b9      	adds	r1, r7, r6
   22732:	e7ef      	b.n	22714 <_WriteNoCheck+0x1e>

00022734 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   22734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   22738:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2273a:	4606      	mov	r6, r0
   2273c:	4689      	mov	r9, r1
   2273e:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   22740:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   22744:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   22746:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22748:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2274a:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2274c:	bf28      	it	cs
   2274e:	18e4      	addcs	r4, r4, r3
   22750:	3c01      	subs	r4, #1
   22752:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   22754:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   22756:	42bc      	cmp	r4, r7
   22758:	bf28      	it	cs
   2275a:	463c      	movcs	r4, r7
   2275c:	4294      	cmp	r4, r2
   2275e:	bf28      	it	cs
   22760:	4614      	movcs	r4, r2
   22762:	4649      	mov	r1, r9
   22764:	4622      	mov	r2, r4
   22766:	4428      	add	r0, r5
   22768:	f000 fdf1 	bl	2334e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2276c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2276e:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   22770:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   22772:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   22774:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   22776:	42ab      	cmp	r3, r5
   22778:	bf08      	it	eq
   2277a:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   2277c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   22780:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   22782:	2f00      	cmp	r7, #0
   22784:	d1de      	bne.n	22744 <_WriteBlocking+0x10>
}
   22786:	4640      	mov	r0, r8
   22788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002278c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2278c:	f7f7 bed2 	b.w	1a534 <_DoInit>

00022790 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   22790:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   22792:	f7ff fffb 	bl	2278c <SEGGER_RTT_Init>

	return 0;
}
   22796:	2000      	movs	r0, #0
   22798:	bd08      	pop	{r3, pc}

0002279a <z_device_state_init>:
}
   2279a:	4770      	bx	lr

0002279c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2279c:	b138      	cbz	r0, 227ae <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2279e:	68c3      	ldr	r3, [r0, #12]
   227a0:	8818      	ldrh	r0, [r3, #0]
   227a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   227a6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   227aa:	4258      	negs	r0, r3
   227ac:	4158      	adcs	r0, r3
}
   227ae:	4770      	bx	lr

000227b0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   227b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   227b2:	4605      	mov	r5, r0
   227b4:	460e      	mov	r6, r1
	__asm__ volatile(
   227b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   227ba:	f3ef 8711 	mrs	r7, BASEPRI
   227be:	f383 8812 	msr	BASEPRI_MAX, r3
   227c2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   227c6:	f7f8 ff55 	bl	1b674 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   227ca:	4631      	mov	r1, r6
   227cc:	4604      	mov	r4, r0
   227ce:	4628      	mov	r0, r5
   227d0:	f7ff fe3d 	bl	2244e <k_sys_fatal_error_handler>
	__asm__ volatile(
   227d4:	f387 8811 	msr	BASEPRI, r7
   227d8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   227dc:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   227de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   227e2:	f7f1 b82b 	b.w	1383c <z_impl_k_thread_abort>

000227e6 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   227e6:	f000 bdd3 	b.w	23390 <memset>

000227ea <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   227ea:	f000 bdb0 	b.w	2334e <memcpy>

000227ee <k_heap_init>:
{
   227ee:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   227f0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   227f4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   227f8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   227fa:	f7fd b917 	b.w	1fa2c <sys_heap_init>

000227fe <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   227fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22802:	b085      	sub	sp, #20
   22804:	4606      	mov	r6, r0
   22806:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22808:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2280c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2280e:	f000 fbea 	bl	22fe6 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22812:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22816:	4605      	mov	r5, r0
   22818:	460f      	mov	r7, r1
	__asm__ volatile(
   2281a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2281e:	f3ef 8411 	mrs	r4, BASEPRI
   22822:	f383 8812 	msr	BASEPRI_MAX, r3
   22826:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2282a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2282e:	464a      	mov	r2, r9
   22830:	4641      	mov	r1, r8
   22832:	4630      	mov	r0, r6
   22834:	f7fd f892 	bl	1f95c <sys_heap_aligned_alloc>
   22838:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2283a:	f7f9 f8bf 	bl	1b9bc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2283e:	9b03      	ldr	r3, [sp, #12]
   22840:	b13b      	cbz	r3, 22852 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   22842:	f384 8811 	msr	BASEPRI, r4
   22846:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2284a:	4618      	mov	r0, r3
   2284c:	b005      	add	sp, #20
   2284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   22852:	1a28      	subs	r0, r5, r0
   22854:	eb67 0101 	sbc.w	r1, r7, r1
   22858:	2801      	cmp	r0, #1
   2285a:	f171 0200 	sbcs.w	r2, r1, #0
   2285e:	dbf0      	blt.n	22842 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22860:	e9cd 0100 	strd	r0, r1, [sp]
   22864:	465a      	mov	r2, fp
   22866:	4621      	mov	r1, r4
   22868:	4650      	mov	r0, sl
   2286a:	f7f8 fdab 	bl	1b3c4 <z_pend_curr>
	__asm__ volatile(
   2286e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22872:	f3ef 8411 	mrs	r4, BASEPRI
   22876:	f383 8812 	msr	BASEPRI_MAX, r3
   2287a:	f3bf 8f6f 	isb	sy
   2287e:	e7d6      	b.n	2282e <k_heap_aligned_alloc+0x30>

00022880 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   22880:	b538      	push	{r3, r4, r5, lr}
   22882:	4604      	mov	r4, r0
   22884:	f04f 0340 	mov.w	r3, #64	; 0x40
   22888:	f3ef 8511 	mrs	r5, BASEPRI
   2288c:	f383 8812 	msr	BASEPRI_MAX, r3
   22890:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22894:	f7fd f82a 	bl	1f8ec <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   22898:	f104 000c 	add.w	r0, r4, #12
   2289c:	f000 fb2c 	bl	22ef8 <z_unpend_all>
   228a0:	b130      	cbz	r0, 228b0 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   228a2:	4629      	mov	r1, r5
   228a4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   228a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   228ac:	f7f8 bc36 	b.w	1b11c <z_reschedule>
	__asm__ volatile(
   228b0:	f385 8811 	msr	BASEPRI, r5
   228b4:	f3bf 8f6f 	isb	sy
}
   228b8:	bd38      	pop	{r3, r4, r5, pc}

000228ba <k_mem_slab_init>:
{
   228ba:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   228bc:	2400      	movs	r4, #0
   228be:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   228c0:	ea41 0402 	orr.w	r4, r1, r2
   228c4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   228c8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   228cc:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   228ce:	d10c      	bne.n	228ea <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   228d0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   228d2:	42a3      	cmp	r3, r4
   228d4:	d103      	bne.n	228de <k_mem_slab_init+0x24>
   228d6:	e9c0 0000 	strd	r0, r0, [r0]
}
   228da:	2000      	movs	r0, #0
}
   228dc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   228de:	6945      	ldr	r5, [r0, #20]
   228e0:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   228e2:	3401      	adds	r4, #1
		slab->free_list = p;
   228e4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   228e6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   228e8:	e7f3      	b.n	228d2 <k_mem_slab_init+0x18>
		return -EINVAL;
   228ea:	f06f 0015 	mvn.w	r0, #21
	return rc;
   228ee:	e7f5      	b.n	228dc <k_mem_slab_init+0x22>

000228f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   228f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228f2:	4604      	mov	r4, r0
   228f4:	460d      	mov	r5, r1
	__asm__ volatile(
   228f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   228fa:	f3ef 8611 	mrs	r6, BASEPRI
   228fe:	f383 8812 	msr	BASEPRI_MAX, r3
   22902:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   22906:	6947      	ldr	r7, [r0, #20]
   22908:	b977      	cbnz	r7, 22928 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2290a:	f000 fadd 	bl	22ec8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2290e:	b158      	cbz	r0, 22928 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22910:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22912:	6142      	str	r2, [r0, #20]
   22914:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22916:	f000 fa66 	bl	22de6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2291a:	4631      	mov	r1, r6
   2291c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   22920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   22924:	f7f8 bbfa 	b.w	1b11c <z_reschedule>
	**(char ***) mem = slab->free_list;
   22928:	682b      	ldr	r3, [r5, #0]
   2292a:	6962      	ldr	r2, [r4, #20]
   2292c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2292e:	682b      	ldr	r3, [r5, #0]
   22930:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   22932:	69a3      	ldr	r3, [r4, #24]
   22934:	3b01      	subs	r3, #1
   22936:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   22938:	f386 8811 	msr	BASEPRI, r6
   2293c:	f3bf 8f6f 	isb	sy
}
   22940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022942 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22942:	f3ef 8005 	mrs	r0, IPSR
}
   22946:	3800      	subs	r0, #0
   22948:	bf18      	it	ne
   2294a:	2001      	movne	r0, #1
   2294c:	4770      	bx	lr

0002294e <z_impl_k_thread_name_set>:
}
   2294e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   22952:	4770      	bx	lr

00022954 <z_impl_k_thread_start>:
	z_sched_start(thread);
   22954:	f7f8 bcda 	b.w	1b30c <z_sched_start>

00022958 <z_pm_save_idle_exit>:
{
   22958:	b508      	push	{r3, lr}
	pm_system_resume();
   2295a:	f7f0 fa4d 	bl	12df8 <pm_system_resume>
}
   2295e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   22962:	f7ff bd73 	b.w	2244c <sys_clock_idle_exit>

00022966 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   22966:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2296a:	428b      	cmp	r3, r1
   2296c:	d001      	beq.n	22972 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2296e:	f7f8 bd3d 	b.w	1b3ec <z_set_prio>
}
   22972:	2000      	movs	r0, #0
   22974:	4770      	bx	lr

00022976 <z_impl_k_mutex_init>:
{
   22976:	4603      	mov	r3, r0
	mutex->owner = NULL;
   22978:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2297a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2297e:	e9c3 3300 	strd	r3, r3, [r3]
}
   22982:	4770      	bx	lr

00022984 <queue_insert>:
{
   22984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22988:	4699      	mov	r9, r3
   2298a:	4604      	mov	r4, r0
   2298c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   22990:	460d      	mov	r5, r1
   22992:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22994:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22998:	f04f 0240 	mov.w	r2, #64	; 0x40
   2299c:	f3ef 8711 	mrs	r7, BASEPRI
   229a0:	f382 8812 	msr	BASEPRI_MAX, r2
   229a4:	f3bf 8f6f 	isb	sy
	if (is_append) {
   229a8:	b103      	cbz	r3, 229ac <queue_insert+0x28>
	return list->tail;
   229aa:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   229ac:	4630      	mov	r0, r6
   229ae:	f000 fa8b 	bl	22ec8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   229b2:	b158      	cbz	r0, 229cc <queue_insert+0x48>
   229b4:	2400      	movs	r4, #0
   229b6:	67c4      	str	r4, [r0, #124]	; 0x7c
   229b8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   229bc:	f000 fa13 	bl	22de6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   229c0:	4630      	mov	r0, r6
   229c2:	4639      	mov	r1, r7
   229c4:	f7f8 fbaa 	bl	1b11c <z_reschedule>
	return 0;
   229c8:	2000      	movs	r0, #0
   229ca:	e00c      	b.n	229e6 <queue_insert+0x62>
	if (alloc) {
   229cc:	f1b9 0f00 	cmp.w	r9, #0
   229d0:	d01b      	beq.n	22a0a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   229d2:	2108      	movs	r1, #8
   229d4:	f7f9 f926 	bl	1bc24 <z_thread_aligned_alloc>
		if (anode == NULL) {
   229d8:	b938      	cbnz	r0, 229ea <queue_insert+0x66>
	__asm__ volatile(
   229da:	f387 8811 	msr	BASEPRI, r7
   229de:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   229e2:	f06f 000b 	mvn.w	r0, #11
}
   229e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   229ea:	2301      	movs	r3, #1
		anode->data = data;
   229ec:	f8c0 8004 	str.w	r8, [r0, #4]
   229f0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   229f2:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   229f4:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   229f8:	b95d      	cbnz	r5, 22a12 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   229fa:	6823      	ldr	r3, [r4, #0]
   229fc:	4313      	orrs	r3, r2
   229fe:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22a00:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22a02:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22a04:	b973      	cbnz	r3, 22a24 <queue_insert+0xa0>
	list->tail = node;
   22a06:	6060      	str	r0, [r4, #4]
}
   22a08:	e00c      	b.n	22a24 <queue_insert+0xa0>
	node->next_and_flags = flags;
   22a0a:	f8c8 9000 	str.w	r9, [r8]
}
   22a0e:	4640      	mov	r0, r8
   22a10:	e7ef      	b.n	229f2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22a12:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22a14:	f033 0303 	bics.w	r3, r3, #3
   22a18:	d110      	bne.n	22a3c <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22a1a:	6002      	str	r2, [r0, #0]
	return list->tail;
   22a1c:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   22a1e:	b93a      	cbnz	r2, 22a30 <queue_insert+0xac>
	list->head = node;
   22a20:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22a24:	2104      	movs	r1, #4
   22a26:	f104 0010 	add.w	r0, r4, #16
   22a2a:	f000 fc62 	bl	232f2 <z_handle_obj_poll_events>
   22a2e:	e7c7      	b.n	229c0 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22a30:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22a32:	f003 0303 	and.w	r3, r3, #3
   22a36:	4303      	orrs	r3, r0
   22a38:	6013      	str	r3, [r2, #0]
   22a3a:	e7e4      	b.n	22a06 <queue_insert+0x82>
   22a3c:	4313      	orrs	r3, r2
   22a3e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22a40:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22a42:	f003 0303 	and.w	r3, r3, #3
   22a46:	4303      	orrs	r3, r0
   22a48:	602b      	str	r3, [r5, #0]
}
   22a4a:	e7eb      	b.n	22a24 <queue_insert+0xa0>

00022a4c <z_queue_node_peek>:
{
   22a4c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   22a4e:	4604      	mov	r4, r0
   22a50:	b130      	cbz	r0, 22a60 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22a52:	6802      	ldr	r2, [r0, #0]
   22a54:	0793      	lsls	r3, r2, #30
   22a56:	d003      	beq.n	22a60 <z_queue_node_peek+0x14>
		ret = anode->data;
   22a58:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22a5a:	b109      	cbz	r1, 22a60 <z_queue_node_peek+0x14>
			k_free(anode);
   22a5c:	f000 fc5f 	bl	2331e <k_free>
}
   22a60:	4620      	mov	r0, r4
   22a62:	bd10      	pop	{r4, pc}

00022a64 <z_impl_k_queue_init>:
	list->head = NULL;
   22a64:	2300      	movs	r3, #0
	list->tail = NULL;
   22a66:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22a6a:	f100 0308 	add.w	r3, r0, #8
   22a6e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22a72:	f100 0310 	add.w	r3, r0, #16
   22a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22a7a:	4770      	bx	lr

00022a7c <k_queue_append>:
{
   22a7c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   22a7e:	2301      	movs	r3, #1
   22a80:	9300      	str	r3, [sp, #0]
   22a82:	2300      	movs	r3, #0
{
   22a84:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22a86:	4619      	mov	r1, r3
   22a88:	f7ff ff7c 	bl	22984 <queue_insert>
}
   22a8c:	b003      	add	sp, #12
   22a8e:	f85d fb04 	ldr.w	pc, [sp], #4

00022a92 <k_queue_prepend>:
{
   22a92:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   22a94:	2300      	movs	r3, #0
{
   22a96:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22a98:	9300      	str	r3, [sp, #0]
   22a9a:	4619      	mov	r1, r3
   22a9c:	f7ff ff72 	bl	22984 <queue_insert>
}
   22aa0:	b003      	add	sp, #12
   22aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00022aa6 <k_queue_append_list>:
{
   22aa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22aaa:	4605      	mov	r5, r0
   22aac:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22aae:	460c      	mov	r4, r1
   22ab0:	b391      	cbz	r1, 22b18 <k_queue_append_list+0x72>
   22ab2:	b38a      	cbz	r2, 22b18 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22ab4:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22ab8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22abc:	f3ef 8811 	mrs	r8, BASEPRI
   22ac0:	f383 8812 	msr	BASEPRI_MAX, r3
   22ac4:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22ac8:	4638      	mov	r0, r7
   22aca:	f000 f9fd 	bl	22ec8 <z_unpend_first_thread>
   22ace:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22ad2:	b920      	cbnz	r0, 22ade <k_queue_append_list+0x38>
	return list->tail;
   22ad4:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22ad6:	b9ca      	cbnz	r2, 22b0c <k_queue_append_list+0x66>
	list->head = node;
   22ad8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22ada:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22adc:	e00a      	b.n	22af4 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   22ade:	6144      	str	r4, [r0, #20]
   22ae0:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   22ae4:	f000 f97f 	bl	22de6 <z_ready_thread>
		head = *(void **)head;
   22ae8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22aea:	4638      	mov	r0, r7
   22aec:	f000 f9ec 	bl	22ec8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22af0:	2c00      	cmp	r4, #0
   22af2:	d1ee      	bne.n	22ad2 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22af4:	2104      	movs	r1, #4
   22af6:	f105 0010 	add.w	r0, r5, #16
   22afa:	f000 fbfa 	bl	232f2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22afe:	4638      	mov	r0, r7
   22b00:	4641      	mov	r1, r8
   22b02:	f7f8 fb0b 	bl	1b11c <z_reschedule>
	return 0;
   22b06:	2000      	movs	r0, #0
}
   22b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22b0c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22b0e:	f003 0303 	and.w	r3, r3, #3
   22b12:	431c      	orrs	r4, r3
   22b14:	6014      	str	r4, [r2, #0]
}
   22b16:	e7e0      	b.n	22ada <k_queue_append_list+0x34>
		return -EINVAL;
   22b18:	f06f 0015 	mvn.w	r0, #21
   22b1c:	e7f4      	b.n	22b08 <k_queue_append_list+0x62>

00022b1e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   22b1e:	b15a      	cbz	r2, 22b38 <z_impl_k_sem_init+0x1a>
   22b20:	428a      	cmp	r2, r1
   22b22:	d309      	bcc.n	22b38 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22b24:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22b28:	e9c0 1202 	strd	r1, r2, [r0, #8]
   22b2c:	e9c0 0000 	strd	r0, r0, [r0]
   22b30:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22b34:	2000      	movs	r0, #0
   22b36:	4770      	bx	lr
		return -EINVAL;
   22b38:	f06f 0015 	mvn.w	r0, #21
}
   22b3c:	4770      	bx	lr

00022b3e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   22b3e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   22b40:	2301      	movs	r3, #1
   22b42:	408b      	lsls	r3, r1
   22b44:	ea22 0303 	bic.w	r3, r2, r3
   22b48:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   22b4a:	fa22 f001 	lsr.w	r0, r2, r1
}
   22b4e:	f000 0001 	and.w	r0, r0, #1
   22b52:	4770      	bx	lr

00022b54 <unschedule_locked>:
{
   22b54:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22b56:	2103      	movs	r1, #3
{
   22b58:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22b5a:	300c      	adds	r0, #12
   22b5c:	f7ff ffef 	bl	22b3e <flag_test_and_clear>
   22b60:	4604      	mov	r4, r0
   22b62:	b118      	cbz	r0, 22b6c <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   22b64:	f105 0010 	add.w	r0, r5, #16
   22b68:	f000 f9f3 	bl	22f52 <z_abort_timeout>
}
   22b6c:	4620      	mov	r0, r4
   22b6e:	bd38      	pop	{r3, r4, r5, pc}

00022b70 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   22b70:	b120      	cbz	r0, 22b7c <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   22b72:	2200      	movs	r2, #0
   22b74:	4611      	mov	r1, r2
   22b76:	3088      	adds	r0, #136	; 0x88
   22b78:	f000 b9ce 	b.w	22f18 <z_sched_wake>
}
   22b7c:	4770      	bx	lr

00022b7e <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   22b7e:	68c3      	ldr	r3, [r0, #12]
{
   22b80:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22b82:	f3c3 0540 	ubfx	r5, r3, #1, #1
   22b86:	079b      	lsls	r3, r3, #30
{
   22b88:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22b8a:	d416      	bmi.n	22bba <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   22b8c:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22b8e:	2102      	movs	r1, #2
   22b90:	300c      	adds	r0, #12
   22b92:	f7ff ffd4 	bl	22b3e <flag_test_and_clear>
   22b96:	b180      	cbz	r0, 22bba <cancel_async_locked+0x3c>
	return list->head;
   22b98:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22b9c:	b16a      	cbz	r2, 22bba <cancel_async_locked+0x3c>
   22b9e:	4294      	cmp	r4, r2
   22ba0:	d11b      	bne.n	22bda <cancel_async_locked+0x5c>
	return node->next;
   22ba2:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   22ba4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   22ba8:	b98d      	cbnz	r5, 22bce <cancel_async_locked+0x50>
   22baa:	428c      	cmp	r4, r1
	list->head = node;
   22bac:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   22bb0:	d101      	bne.n	22bb6 <cancel_async_locked+0x38>
	list->tail = node;
   22bb2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   22bb6:	2300      	movs	r3, #0
   22bb8:	6023      	str	r3, [r4, #0]
	return *flagp;
   22bba:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   22bbc:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   22bc0:	bf1e      	ittt	ne
   22bc2:	f043 0302 	orrne.w	r3, r3, #2
   22bc6:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   22bc8:	f003 000f 	andne.w	r0, r3, #15
}
   22bcc:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   22bce:	428c      	cmp	r4, r1
	parent->next = child;
   22bd0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   22bd2:	bf08      	it	eq
   22bd4:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   22bd8:	e7ed      	b.n	22bb6 <cancel_async_locked+0x38>
	return node->next;
   22bda:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22bdc:	6812      	ldr	r2, [r2, #0]
   22bde:	e7dd      	b.n	22b9c <cancel_async_locked+0x1e>

00022be0 <work_timeout>:
{
   22be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22be2:	4604      	mov	r4, r0
   22be4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22be8:	f3ef 8511 	mrs	r5, BASEPRI
   22bec:	f383 8812 	msr	BASEPRI_MAX, r3
   22bf0:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   22bf4:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22bf6:	f1a0 0610 	sub.w	r6, r0, #16
   22bfa:	2103      	movs	r1, #3
   22bfc:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   22bfe:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   22c00:	f7ff ff9d 	bl	22b3e <flag_test_and_clear>
   22c04:	b128      	cbz	r0, 22c12 <work_timeout+0x32>
		queue = dw->queue;
   22c06:	69a3      	ldr	r3, [r4, #24]
   22c08:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   22c0a:	a901      	add	r1, sp, #4
   22c0c:	4630      	mov	r0, r6
   22c0e:	f7f8 f94d 	bl	1aeac <submit_to_queue_locked>
	__asm__ volatile(
   22c12:	f385 8811 	msr	BASEPRI, r5
   22c16:	f3bf 8f6f 	isb	sy
}
   22c1a:	b002      	add	sp, #8
   22c1c:	bd70      	pop	{r4, r5, r6, pc}

00022c1e <k_work_init>:
{
   22c1e:	b538      	push	{r3, r4, r5, lr}
   22c20:	4604      	mov	r4, r0
   22c22:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22c24:	2210      	movs	r2, #16
   22c26:	2100      	movs	r1, #0
   22c28:	f000 fbb2 	bl	23390 <memset>
   22c2c:	6065      	str	r5, [r4, #4]
}
   22c2e:	bd38      	pop	{r3, r4, r5, pc}

00022c30 <k_work_busy_get>:
	__asm__ volatile(
   22c30:	f04f 0240 	mov.w	r2, #64	; 0x40
   22c34:	f3ef 8311 	mrs	r3, BASEPRI
   22c38:	f382 8812 	msr	BASEPRI_MAX, r2
   22c3c:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   22c40:	68c0      	ldr	r0, [r0, #12]
   22c42:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   22c46:	f383 8811 	msr	BASEPRI, r3
   22c4a:	f3bf 8f6f 	isb	sy
}
   22c4e:	4770      	bx	lr

00022c50 <k_work_submit_to_queue>:
{
   22c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22c52:	9001      	str	r0, [sp, #4]
   22c54:	4608      	mov	r0, r1
	__asm__ volatile(
   22c56:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c5a:	f3ef 8511 	mrs	r5, BASEPRI
   22c5e:	f383 8812 	msr	BASEPRI_MAX, r3
   22c62:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   22c66:	a901      	add	r1, sp, #4
   22c68:	f7f8 f920 	bl	1aeac <submit_to_queue_locked>
   22c6c:	4604      	mov	r4, r0
	__asm__ volatile(
   22c6e:	f385 8811 	msr	BASEPRI, r5
   22c72:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   22c76:	2800      	cmp	r0, #0
   22c78:	dd09      	ble.n	22c8e <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
   22c7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c7e:	f3ef 8011 	mrs	r0, BASEPRI
   22c82:	f383 8812 	msr	BASEPRI_MAX, r3
   22c86:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22c8a:	f000 f890 	bl	22dae <z_reschedule_irqlock>
}
   22c8e:	4620      	mov	r0, r4
   22c90:	b003      	add	sp, #12
   22c92:	bd30      	pop	{r4, r5, pc}

00022c94 <k_work_init_delayable>:
{
   22c94:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   22c96:	2230      	movs	r2, #48	; 0x30
{
   22c98:	4604      	mov	r4, r0
   22c9a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   22c9c:	2100      	movs	r1, #0
   22c9e:	f000 fb77 	bl	23390 <memset>
   22ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
   22ca6:	6065      	str	r5, [r4, #4]
   22ca8:	60e3      	str	r3, [r4, #12]
}
   22caa:	bd38      	pop	{r3, r4, r5, pc}

00022cac <k_work_delayable_busy_get>:
   22cac:	f7ff bfc0 	b.w	22c30 <k_work_busy_get>

00022cb0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   22cb0:	b538      	push	{r3, r4, r5, lr}
   22cb2:	4604      	mov	r4, r0
   22cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cb8:	f3ef 8511 	mrs	r5, BASEPRI
   22cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   22cc0:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   22cc4:	f7ff ff46 	bl	22b54 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22cc8:	4620      	mov	r0, r4
   22cca:	f7ff ff58 	bl	22b7e <cancel_async_locked>
	__asm__ volatile(
   22cce:	f385 8811 	msr	BASEPRI, r5
   22cd2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   22cd6:	bd38      	pop	{r3, r4, r5, pc}

00022cd8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   22cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cda:	4604      	mov	r4, r0
   22cdc:	460d      	mov	r5, r1
	__asm__ volatile(
   22cde:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ce2:	f3ef 8711 	mrs	r7, BASEPRI
   22ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   22cea:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   22cee:	68c3      	ldr	r3, [r0, #12]
   22cf0:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   22cf4:	2b00      	cmp	r3, #0
   22cf6:	bf14      	ite	ne
   22cf8:	2601      	movne	r6, #1
   22cfa:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   22cfc:	d009      	beq.n	22d12 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   22cfe:	f7ff ff29 	bl	22b54 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   22d02:	4620      	mov	r0, r4
   22d04:	f7ff ff3b 	bl	22b7e <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   22d08:	4629      	mov	r1, r5
   22d0a:	4620      	mov	r0, r4
   22d0c:	f7f8 f8b0 	bl	1ae70 <cancel_sync_locked>
   22d10:	4603      	mov	r3, r0
	__asm__ volatile(
   22d12:	f387 8811 	msr	BASEPRI, r7
   22d16:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   22d1a:	b13b      	cbz	r3, 22d2c <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   22d1c:	f04f 32ff 	mov.w	r2, #4294967295
   22d20:	f04f 33ff 	mov.w	r3, #4294967295
   22d24:	f105 0008 	add.w	r0, r5, #8
   22d28:	f7f7 ffca 	bl	1acc0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   22d2c:	4630      	mov	r0, r6
   22d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022d30 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   22d30:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22d34:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22d36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22d38:	2300      	movs	r3, #0
	node->prev = NULL;
   22d3a:	e9c0 3300 	strd	r3, r3, [r0]
}
   22d3e:	4770      	bx	lr

00022d40 <unpend_thread_no_timeout>:
{
   22d40:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   22d42:	f7ff fff5 	bl	22d30 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22d46:	7b43      	ldrb	r3, [r0, #13]
   22d48:	f023 0302 	bic.w	r3, r3, #2
   22d4c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   22d4e:	2300      	movs	r3, #0
   22d50:	6083      	str	r3, [r0, #8]
}
   22d52:	bd08      	pop	{r3, pc}

00022d54 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   22d54:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22d58:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   22d5c:	4283      	cmp	r3, r0
		return b2 - b1;
   22d5e:	bf14      	ite	ne
   22d60:	1ac0      	subne	r0, r0, r3
	return 0;
   22d62:	2000      	moveq	r0, #0
}
   22d64:	4770      	bx	lr

00022d66 <z_unpend_thread_no_timeout>:
{
   22d66:	b508      	push	{r3, lr}
	__asm__ volatile(
   22d68:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d6c:	f3ef 8111 	mrs	r1, BASEPRI
   22d70:	f383 8812 	msr	BASEPRI_MAX, r3
   22d74:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22d78:	f7ff ffe2 	bl	22d40 <unpend_thread_no_timeout>
	__asm__ volatile(
   22d7c:	f381 8811 	msr	BASEPRI, r1
   22d80:	f3bf 8f6f 	isb	sy
}
   22d84:	bd08      	pop	{r3, pc}

00022d86 <z_unpend_thread>:
{
   22d86:	b510      	push	{r4, lr}
	__asm__ volatile(
   22d88:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d8c:	f3ef 8411 	mrs	r4, BASEPRI
   22d90:	f383 8812 	msr	BASEPRI_MAX, r3
   22d94:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   22d98:	f7ff ffd2 	bl	22d40 <unpend_thread_no_timeout>
	__asm__ volatile(
   22d9c:	f384 8811 	msr	BASEPRI, r4
   22da0:	f3bf 8f6f 	isb	sy
}
   22da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22da8:	3018      	adds	r0, #24
   22daa:	f000 b8d2 	b.w	22f52 <z_abort_timeout>

00022dae <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22dae:	4603      	mov	r3, r0
   22db0:	b920      	cbnz	r0, 22dbc <z_reschedule_irqlock+0xe>
   22db2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   22db6:	b90a      	cbnz	r2, 22dbc <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   22db8:	f7f0 baf6 	b.w	133a8 <arch_swap>
   22dbc:	f383 8811 	msr	BASEPRI, r3
   22dc0:	f3bf 8f6f 	isb	sy
}
   22dc4:	4770      	bx	lr

00022dc6 <z_reschedule_unlocked>:
	__asm__ volatile(
   22dc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   22dca:	f3ef 8011 	mrs	r0, BASEPRI
   22dce:	f383 8812 	msr	BASEPRI_MAX, r3
   22dd2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   22dd6:	f7ff bfea 	b.w	22dae <z_reschedule_irqlock>

00022dda <z_priq_dumb_best>:
{
   22dda:	4603      	mov	r3, r0
	return list->head == list;
   22ddc:	6800      	ldr	r0, [r0, #0]
}
   22dde:	4283      	cmp	r3, r0
   22de0:	bf08      	it	eq
   22de2:	2000      	moveq	r0, #0
   22de4:	4770      	bx	lr

00022de6 <z_ready_thread>:
{
   22de6:	b510      	push	{r4, lr}
   22de8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22dec:	f3ef 8411 	mrs	r4, BASEPRI
   22df0:	f383 8812 	msr	BASEPRI_MAX, r3
   22df4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   22df8:	f7f8 fa52 	bl	1b2a0 <ready_thread>
	__asm__ volatile(
   22dfc:	f384 8811 	msr	BASEPRI, r4
   22e00:	f3bf 8f6f 	isb	sy
}
   22e04:	bd10      	pop	{r4, pc}

00022e06 <z_thread_timeout>:
{
   22e06:	b510      	push	{r4, lr}
   22e08:	4601      	mov	r1, r0
	__asm__ volatile(
   22e0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e0e:	f3ef 8411 	mrs	r4, BASEPRI
   22e12:	f383 8812 	msr	BASEPRI_MAX, r3
   22e16:	f3bf 8f6f 	isb	sy
		if (!killed) {
   22e1a:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   22e1e:	f013 0f28 	tst.w	r3, #40	; 0x28
   22e22:	d10d      	bne.n	22e40 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   22e24:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   22e28:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   22e2a:	b10b      	cbz	r3, 22e30 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   22e2c:	f7ff ff88 	bl	22d40 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22e30:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   22e34:	f023 0314 	bic.w	r3, r3, #20
   22e38:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   22e3c:	f7f8 fa30 	bl	1b2a0 <ready_thread>
	__asm__ volatile(
   22e40:	f384 8811 	msr	BASEPRI, r4
   22e44:	f3bf 8f6f 	isb	sy
}
   22e48:	bd10      	pop	{r4, pc}

00022e4a <add_to_waitq_locked>:
{
   22e4a:	b538      	push	{r3, r4, r5, lr}
   22e4c:	4604      	mov	r4, r0
   22e4e:	460d      	mov	r5, r1
	unready_thread(thread);
   22e50:	f7f8 fa7a 	bl	1b348 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22e54:	7b63      	ldrb	r3, [r4, #13]
   22e56:	f043 0302 	orr.w	r3, r3, #2
   22e5a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22e5c:	b195      	cbz	r5, 22e84 <add_to_waitq_locked+0x3a>
   22e5e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   22e60:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e62:	429d      	cmp	r5, r3
   22e64:	d015      	beq.n	22e92 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22e66:	b1a3      	cbz	r3, 22e92 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   22e68:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   22e6c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   22e70:	4291      	cmp	r1, r2
   22e72:	d008      	beq.n	22e86 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   22e74:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22e76:	2a00      	cmp	r2, #0
   22e78:	dd05      	ble.n	22e86 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   22e7a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22e7c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22e80:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22e82:	605c      	str	r4, [r3, #4]
}
   22e84:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22e86:	686a      	ldr	r2, [r5, #4]
   22e88:	4293      	cmp	r3, r2
   22e8a:	d002      	beq.n	22e92 <add_to_waitq_locked+0x48>
   22e8c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22e8e:	2b00      	cmp	r3, #0
   22e90:	d1ec      	bne.n	22e6c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   22e92:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22e94:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   22e98:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22e9a:	606c      	str	r4, [r5, #4]
}
   22e9c:	e7f2      	b.n	22e84 <add_to_waitq_locked+0x3a>

00022e9e <z_unpend1_no_timeout>:
{
   22e9e:	b510      	push	{r4, lr}
	__asm__ volatile(
   22ea0:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ea4:	f3ef 8411 	mrs	r4, BASEPRI
   22ea8:	f383 8812 	msr	BASEPRI_MAX, r3
   22eac:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22eb0:	f7ff ff93 	bl	22dda <z_priq_dumb_best>
		if (thread != NULL) {
   22eb4:	4601      	mov	r1, r0
   22eb6:	b108      	cbz	r0, 22ebc <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   22eb8:	f7ff ff42 	bl	22d40 <unpend_thread_no_timeout>
	__asm__ volatile(
   22ebc:	f384 8811 	msr	BASEPRI, r4
   22ec0:	f3bf 8f6f 	isb	sy
}
   22ec4:	4608      	mov	r0, r1
   22ec6:	bd10      	pop	{r4, pc}

00022ec8 <z_unpend_first_thread>:
{
   22ec8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22eca:	f04f 0340 	mov.w	r3, #64	; 0x40
   22ece:	f3ef 8511 	mrs	r5, BASEPRI
   22ed2:	f383 8812 	msr	BASEPRI_MAX, r3
   22ed6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22eda:	f7ff ff7e 	bl	22dda <z_priq_dumb_best>
		if (thread != NULL) {
   22ede:	4604      	mov	r4, r0
   22ee0:	b120      	cbz	r0, 22eec <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   22ee2:	f7ff ff2d 	bl	22d40 <unpend_thread_no_timeout>
   22ee6:	3018      	adds	r0, #24
   22ee8:	f000 f833 	bl	22f52 <z_abort_timeout>
	__asm__ volatile(
   22eec:	f385 8811 	msr	BASEPRI, r5
   22ef0:	f3bf 8f6f 	isb	sy
}
   22ef4:	4620      	mov	r0, r4
   22ef6:	bd38      	pop	{r3, r4, r5, pc}

00022ef8 <z_unpend_all>:
{
   22ef8:	b538      	push	{r3, r4, r5, lr}
   22efa:	4605      	mov	r5, r0
	int need_sched = 0;
   22efc:	2000      	movs	r0, #0
	return list->head == list;
   22efe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f00:	42a5      	cmp	r5, r4
   22f02:	d000      	beq.n	22f06 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22f04:	b904      	cbnz	r4, 22f08 <z_unpend_all+0x10>
}
   22f06:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   22f08:	4620      	mov	r0, r4
   22f0a:	f7ff ff3c 	bl	22d86 <z_unpend_thread>
		z_ready_thread(thread);
   22f0e:	4620      	mov	r0, r4
   22f10:	f7ff ff69 	bl	22de6 <z_ready_thread>
		need_sched = 1;
   22f14:	2001      	movs	r0, #1
   22f16:	e7f2      	b.n	22efe <z_unpend_all+0x6>

00022f18 <z_sched_wake>:
{
   22f18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22f1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f1e:	f3ef 8511 	mrs	r5, BASEPRI
   22f22:	f383 8812 	msr	BASEPRI_MAX, r3
   22f26:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   22f2a:	f7ff ff56 	bl	22dda <z_priq_dumb_best>
		if (thread != NULL) {
   22f2e:	4604      	mov	r4, r0
   22f30:	b150      	cbz	r0, 22f48 <z_sched_wake+0x30>
   22f32:	67c1      	str	r1, [r0, #124]	; 0x7c
   22f34:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   22f36:	f7ff ff03 	bl	22d40 <unpend_thread_no_timeout>
   22f3a:	3018      	adds	r0, #24
   22f3c:	f000 f809 	bl	22f52 <z_abort_timeout>
			ready_thread(thread);
   22f40:	4620      	mov	r0, r4
   22f42:	f7f8 f9ad 	bl	1b2a0 <ready_thread>
			ret = true;
   22f46:	2001      	movs	r0, #1
	__asm__ volatile(
   22f48:	f385 8811 	msr	BASEPRI, r5
   22f4c:	f3bf 8f6f 	isb	sy
}
   22f50:	bd38      	pop	{r3, r4, r5, pc}

00022f52 <z_abort_timeout>:
{
   22f52:	b510      	push	{r4, lr}
	__asm__ volatile(
   22f54:	f04f 0240 	mov.w	r2, #64	; 0x40
   22f58:	f3ef 8411 	mrs	r4, BASEPRI
   22f5c:	f382 8812 	msr	BASEPRI_MAX, r2
   22f60:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22f64:	6803      	ldr	r3, [r0, #0]
   22f66:	b13b      	cbz	r3, 22f78 <z_abort_timeout+0x26>
			remove_timeout(to);
   22f68:	f7f8 fc38 	bl	1b7dc <remove_timeout>
			ret = 0;
   22f6c:	2000      	movs	r0, #0
	__asm__ volatile(
   22f6e:	f384 8811 	msr	BASEPRI, r4
   22f72:	f3bf 8f6f 	isb	sy
}
   22f76:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   22f78:	f06f 0015 	mvn.w	r0, #21
   22f7c:	e7f7      	b.n	22f6e <z_abort_timeout+0x1c>

00022f7e <z_get_next_timeout_expiry>:
{
   22f7e:	b510      	push	{r4, lr}
	__asm__ volatile(
   22f80:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f84:	f3ef 8411 	mrs	r4, BASEPRI
   22f88:	f383 8812 	msr	BASEPRI_MAX, r3
   22f8c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   22f90:	f7f8 fbfe 	bl	1b790 <next_timeout>
	__asm__ volatile(
   22f94:	f384 8811 	msr	BASEPRI, r4
   22f98:	f3bf 8f6f 	isb	sy
}
   22f9c:	bd10      	pop	{r4, pc}

00022f9e <z_set_timeout_expiry>:
{
   22f9e:	b570      	push	{r4, r5, r6, lr}
   22fa0:	4604      	mov	r4, r0
   22fa2:	460d      	mov	r5, r1
	__asm__ volatile(
   22fa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fa8:	f3ef 8611 	mrs	r6, BASEPRI
   22fac:	f383 8812 	msr	BASEPRI_MAX, r3
   22fb0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   22fb4:	f7f8 fbec 	bl	1b790 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22fb8:	2801      	cmp	r0, #1
   22fba:	dd05      	ble.n	22fc8 <z_set_timeout_expiry+0x2a>
   22fbc:	42a0      	cmp	r0, r4
   22fbe:	db03      	blt.n	22fc8 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   22fc0:	4629      	mov	r1, r5
   22fc2:	4620      	mov	r0, r4
   22fc4:	f7f5 fc64 	bl	18890 <sys_clock_set_timeout>
	__asm__ volatile(
   22fc8:	f386 8811 	msr	BASEPRI, r6
   22fcc:	f3bf 8f6f 	isb	sy
}
   22fd0:	bd70      	pop	{r4, r5, r6, pc}

00022fd2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   22fd2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22fd4:	f7f8 fcf2 	bl	1b9bc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22fd8:	bd08      	pop	{r3, pc}

00022fda <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   22fda:	f7f8 bcef 	b.w	1b9bc <sys_clock_tick_get>

00022fde <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   22fde:	b108      	cbz	r0, 22fe4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   22fe0:	f7f0 bd5e 	b.w	13aa0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   22fe4:	4770      	bx	lr

00022fe6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22fe6:	f1b1 3fff 	cmp.w	r1, #4294967295
   22fea:	bf08      	it	eq
   22fec:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   22ff0:	b538      	push	{r3, r4, r5, lr}
   22ff2:	4605      	mov	r5, r0
   22ff4:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22ff6:	d01d      	beq.n	23034 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22ff8:	ea51 0300 	orrs.w	r3, r1, r0
   22ffc:	d103      	bne.n	23006 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   22ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   23002:	f7f8 bcdb 	b.w	1b9bc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   23006:	f06f 0301 	mvn.w	r3, #1
   2300a:	1a18      	subs	r0, r3, r0
   2300c:	f04f 33ff 	mov.w	r3, #4294967295
   23010:	eb63 0101 	sbc.w	r1, r3, r1
   23014:	2900      	cmp	r1, #0
   23016:	da0c      	bge.n	23032 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   23018:	f7f8 fcd0 	bl	1b9bc <sys_clock_tick_get>
   2301c:	2d01      	cmp	r5, #1
   2301e:	4622      	mov	r2, r4
   23020:	f174 0400 	sbcs.w	r4, r4, #0
   23024:	462b      	mov	r3, r5
   23026:	bfbc      	itt	lt
   23028:	2301      	movlt	r3, #1
   2302a:	2200      	movlt	r2, #0
   2302c:	1818      	adds	r0, r3, r0
   2302e:	eb41 0102 	adc.w	r1, r1, r2
}
   23032:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   23034:	f04f 30ff 	mov.w	r0, #4294967295
   23038:	4601      	mov	r1, r0
   2303a:	e7fa      	b.n	23032 <sys_clock_timeout_end_calc+0x4c>

0002303c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2303c:	b510      	push	{r4, lr}
   2303e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23040:	f7ff ff87 	bl	22f52 <z_abort_timeout>

	if (inactive) {
   23044:	b9b0      	cbnz	r0, 23074 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   23046:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23048:	b10b      	cbz	r3, 2304e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2304a:	4620      	mov	r0, r4
   2304c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2304e:	f104 0018 	add.w	r0, r4, #24
   23052:	f7ff ff24 	bl	22e9e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   23056:	b168      	cbz	r0, 23074 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   23058:	f7ff fec5 	bl	22de6 <z_ready_thread>
	__asm__ volatile(
   2305c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23060:	f3ef 8011 	mrs	r0, BASEPRI
   23064:	f383 8812 	msr	BASEPRI_MAX, r3
   23068:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   23070:	f7ff be9d 	b.w	22dae <z_reschedule_irqlock>
   23074:	bd10      	pop	{r4, pc}

00023076 <add_event>:
{
   23076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23078:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2307a:	e9d0 1300 	ldrd	r1, r3, [r0]
   2307e:	4288      	cmp	r0, r1
   23080:	4604      	mov	r4, r0
   23082:	d00d      	beq.n	230a0 <add_event+0x2a>
	if ((pending == NULL) ||
   23084:	b163      	cbz	r3, 230a0 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23086:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23088:	b100      	cbz	r0, 2308c <add_event+0x16>
   2308a:	3860      	subs	r0, #96	; 0x60
   2308c:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23090:	4639      	mov	r1, r7
   23092:	f7ff fe5f 	bl	22d54 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   23096:	2800      	cmp	r0, #0
   23098:	dc02      	bgt.n	230a0 <add_event+0x2a>
	return list->head == list;
   2309a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2309c:	42b4      	cmp	r4, r6
   2309e:	d109      	bne.n	230b4 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   230a0:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   230a2:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   230a6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   230a8:	6065      	str	r5, [r4, #4]
}
   230aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   230ac:	6863      	ldr	r3, [r4, #4]
   230ae:	42b3      	cmp	r3, r6
   230b0:	d0f6      	beq.n	230a0 <add_event+0x2a>
   230b2:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   230b4:	2e00      	cmp	r6, #0
   230b6:	d0f3      	beq.n	230a0 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   230b8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   230ba:	b101      	cbz	r1, 230be <add_event+0x48>
   230bc:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   230be:	4638      	mov	r0, r7
   230c0:	f7ff fe48 	bl	22d54 <z_sched_prio_cmp>
   230c4:	2800      	cmp	r0, #0
   230c6:	ddf1      	ble.n	230ac <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   230c8:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   230ca:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   230ce:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   230d0:	6075      	str	r5, [r6, #4]
			return;
   230d2:	e7ea      	b.n	230aa <add_event+0x34>

000230d4 <register_events>:
{
   230d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   230d8:	2500      	movs	r5, #0
{
   230da:	468b      	mov	fp, r1
   230dc:	4614      	mov	r4, r2
   230de:	461f      	mov	r7, r3
   230e0:	4682      	mov	sl, r0
	int events_registered = 0;
   230e2:	462e      	mov	r6, r5
	event->poller = NULL;
   230e4:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   230e6:	455d      	cmp	r5, fp
   230e8:	db02      	blt.n	230f0 <register_events+0x1c>
}
   230ea:	4630      	mov	r0, r6
   230ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   230f4:	f3ef 8911 	mrs	r9, BASEPRI
   230f8:	f383 8812 	msr	BASEPRI_MAX, r3
   230fc:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   23100:	f89a 300d 	ldrb.w	r3, [sl, #13]
   23104:	f003 031f 	and.w	r3, r3, #31
   23108:	3b01      	subs	r3, #1
   2310a:	2b07      	cmp	r3, #7
   2310c:	d80f      	bhi.n	2312e <register_events+0x5a>
   2310e:	e8df f003 	tbb	[pc, r3]
   23112:	041e      	.short	0x041e
   23114:	0e0e0a0e 	.word	0x0e0e0a0e
   23118:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2311a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2311e:	689b      	ldr	r3, [r3, #8]
   23120:	b12b      	cbz	r3, 2312e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23122:	2302      	movs	r3, #2
   23124:	e020      	b.n	23168 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   23126:	f8da 3010 	ldr.w	r3, [sl, #16]
   2312a:	681b      	ldr	r3, [r3, #0]
   2312c:	bb8b      	cbnz	r3, 23192 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2312e:	bb47      	cbnz	r7, 23182 <register_events+0xae>
   23130:	7823      	ldrb	r3, [r4, #0]
   23132:	b333      	cbz	r3, 23182 <register_events+0xae>
	switch (event->type) {
   23134:	f89a 300d 	ldrb.w	r3, [sl, #13]
   23138:	f003 031f 	and.w	r3, r3, #31
   2313c:	3b01      	subs	r3, #1
   2313e:	2b07      	cmp	r3, #7
   23140:	d830      	bhi.n	231a4 <register_events+0xd0>
   23142:	e8df f003 	tbb	[pc, r3]
   23146:	2833      	.short	0x2833
   23148:	2f2f282f 	.word	0x2f2f282f
   2314c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2314e:	f8da 3010 	ldr.w	r3, [sl, #16]
   23152:	689b      	ldr	r3, [r3, #8]
   23154:	2b00      	cmp	r3, #0
   23156:	d0ea      	beq.n	2312e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   23158:	2301      	movs	r3, #1
   2315a:	e005      	b.n	23168 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2315c:	f8da 3010 	ldr.w	r3, [sl, #16]
   23160:	6a1b      	ldr	r3, [r3, #32]
   23162:	2b00      	cmp	r3, #0
   23164:	d0e3      	beq.n	2312e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   23166:	2310      	movs	r3, #16
	event->state |= state;
   23168:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2316c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   23170:	f3c2 3145 	ubfx	r1, r2, #13, #6
   23174:	430b      	orrs	r3, r1
   23176:	f363 3252 	bfi	r2, r3, #13, #6
   2317a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2317e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23182:	f389 8811 	msr	BASEPRI, r9
   23186:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2318a:	3501      	adds	r5, #1
   2318c:	f10a 0a14 	add.w	sl, sl, #20
   23190:	e7a9      	b.n	230e6 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23192:	2304      	movs	r3, #4
   23194:	e7e8      	b.n	23168 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   23196:	f8da 0010 	ldr.w	r0, [sl, #16]
   2319a:	4622      	mov	r2, r4
   2319c:	4651      	mov	r1, sl
   2319e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   231a0:	f7ff ff69 	bl	23076 <add_event>
	event->poller = poller;
   231a4:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   231a8:	3601      	adds	r6, #1
   231aa:	e7ea      	b.n	23182 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   231ac:	f8da 0010 	ldr.w	r0, [sl, #16]
   231b0:	4622      	mov	r2, r4
   231b2:	4651      	mov	r1, sl
   231b4:	e7f4      	b.n	231a0 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   231b6:	f8da 0010 	ldr.w	r0, [sl, #16]
   231ba:	4622      	mov	r2, r4
   231bc:	4651      	mov	r1, sl
   231be:	3024      	adds	r0, #36	; 0x24
   231c0:	e7ee      	b.n	231a0 <register_events+0xcc>

000231c2 <signal_poll_event>:
{
   231c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   231c6:	6884      	ldr	r4, [r0, #8]
{
   231c8:	4605      	mov	r5, r0
   231ca:	460e      	mov	r6, r1
	if (poller != NULL) {
   231cc:	b144      	cbz	r4, 231e0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   231ce:	7863      	ldrb	r3, [r4, #1]
   231d0:	2b01      	cmp	r3, #1
   231d2:	d136      	bne.n	23242 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   231d4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   231d8:	f013 0302 	ands.w	r3, r3, #2
   231dc:	d10a      	bne.n	231f4 <signal_poll_event+0x32>
		poller->is_polling = false;
   231de:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   231e0:	68eb      	ldr	r3, [r5, #12]
   231e2:	f3c3 3145 	ubfx	r1, r3, #13, #6
   231e6:	430e      	orrs	r6, r1
	event->poller = NULL;
   231e8:	2000      	movs	r0, #0
	event->state |= state;
   231ea:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   231ee:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   231f0:	60eb      	str	r3, [r5, #12]
	return retcode;
   231f2:	e00b      	b.n	2320c <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   231f4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   231f8:	f1b3 3fff 	cmp.w	r3, #4294967295
   231fc:	bf08      	it	eq
   231fe:	f112 0f02 	cmneq.w	r2, #2
   23202:	d105      	bne.n	23210 <signal_poll_event+0x4e>
		poller->is_polling = false;
   23204:	2300      	movs	r3, #0
   23206:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   23208:	f06f 000a 	mvn.w	r0, #10
}
   2320c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23210:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   23214:	4640      	mov	r0, r8
   23216:	f7ff fdb6 	bl	22d86 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2321a:	2e08      	cmp	r6, #8
   2321c:	bf0c      	ite	eq
   2321e:	f06f 0303 	mvneq.w	r3, #3
   23222:	2300      	movne	r3, #0
   23224:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23226:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2322a:	06db      	lsls	r3, r3, #27
   2322c:	d102      	bne.n	23234 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2322e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   23232:	b10f      	cbz	r7, 23238 <signal_poll_event+0x76>
		poller->is_polling = false;
   23234:	2300      	movs	r3, #0
   23236:	e7d2      	b.n	231de <signal_poll_event+0x1c>
	z_ready_thread(thread);
   23238:	4640      	mov	r0, r8
   2323a:	f7ff fdd4 	bl	22de6 <z_ready_thread>
		poller->is_polling = false;
   2323e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23240:	e7ce      	b.n	231e0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23242:	2b02      	cmp	r3, #2
   23244:	d1f6      	bne.n	23234 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   23246:	7823      	ldrb	r3, [r4, #0]
   23248:	2b00      	cmp	r3, #0
   2324a:	d0c9      	beq.n	231e0 <signal_poll_event+0x1e>
   2324c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   23250:	2f00      	cmp	r7, #0
   23252:	d0f4      	beq.n	2323e <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   23254:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   23258:	f1a4 0914 	sub.w	r9, r4, #20
   2325c:	f104 0014 	add.w	r0, r4, #20
   23260:	f7ff fe77 	bl	22f52 <z_abort_timeout>
		twork->poll_result = 0;
   23264:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   23268:	4649      	mov	r1, r9
   2326a:	4638      	mov	r0, r7
   2326c:	f7ff fcf0 	bl	22c50 <k_work_submit_to_queue>
		poller->is_polling = false;
   23270:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   23274:	e7b4      	b.n	231e0 <signal_poll_event+0x1e>

00023276 <clear_event_registrations>:
	while (num_events--) {
   23276:	2314      	movs	r3, #20
{
   23278:	b5f0      	push	{r4, r5, r6, r7, lr}
   2327a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2327e:	2400      	movs	r4, #0
   23280:	2601      	movs	r6, #1
	while (num_events--) {
   23282:	b901      	cbnz	r1, 23286 <clear_event_registrations+0x10>
}
   23284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   23286:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2328a:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2328e:	f003 031f 	and.w	r3, r3, #31
   23292:	2b08      	cmp	r3, #8
   23294:	f1a0 0714 	sub.w	r7, r0, #20
   23298:	d80d      	bhi.n	232b6 <clear_event_registrations+0x40>
   2329a:	fa06 f303 	lsl.w	r3, r6, r3
   2329e:	f413 7f8b 	tst.w	r3, #278	; 0x116
   232a2:	d008      	beq.n	232b6 <clear_event_registrations+0x40>
	return node->next != NULL;
   232a4:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   232a8:	b12b      	cbz	r3, 232b6 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   232aa:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   232ae:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   232b0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   232b2:	e940 4405 	strd	r4, r4, [r0, #-20]
   232b6:	f382 8811 	msr	BASEPRI, r2
   232ba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   232be:	f04f 0340 	mov.w	r3, #64	; 0x40
   232c2:	f3ef 8211 	mrs	r2, BASEPRI
   232c6:	f383 8812 	msr	BASEPRI_MAX, r3
   232ca:	f3bf 8f6f 	isb	sy
   232ce:	3901      	subs	r1, #1
   232d0:	4638      	mov	r0, r7
   232d2:	e7d6      	b.n	23282 <clear_event_registrations+0xc>

000232d4 <k_poll_event_init>:
{
   232d4:	b510      	push	{r4, lr}
	event->type = type;
   232d6:	04d2      	lsls	r2, r2, #19
   232d8:	0209      	lsls	r1, r1, #8
   232da:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   232de:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   232e2:	430a      	orrs	r2, r1
   232e4:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   232e6:	2400      	movs	r4, #0
	event->type = type;
   232e8:	430a      	orrs	r2, r1
	event->obj = obj;
   232ea:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   232ee:	6084      	str	r4, [r0, #8]
}
   232f0:	bd10      	pop	{r4, pc}

000232f2 <z_handle_obj_poll_events>:
{
   232f2:	4603      	mov	r3, r0
	return list->head == list;
   232f4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   232f6:	4283      	cmp	r3, r0
   232f8:	d008      	beq.n	2330c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   232fa:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   232fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23300:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23302:	2300      	movs	r3, #0
	node->prev = NULL;
   23304:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23308:	f7ff bf5b 	b.w	231c2 <signal_poll_event>
}
   2330c:	4770      	bx	lr

0002330e <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2330e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   23310:	e9c0 0000 	strd	r0, r0, [r0]
   23314:	6083      	str	r3, [r0, #8]
}
   23316:	4770      	bx	lr

00023318 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   23318:	2300      	movs	r3, #0
   2331a:	6083      	str	r3, [r0, #8]
}
   2331c:	4770      	bx	lr

0002331e <k_free>:
	if (ptr != NULL) {
   2331e:	b120      	cbz	r0, 2332a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   23320:	1f01      	subs	r1, r0, #4
   23322:	f850 0c04 	ldr.w	r0, [r0, #-4]
   23326:	f7ff baab 	b.w	22880 <k_heap_free>
}
   2332a:	4770      	bx	lr

0002332c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2332c:	4770      	bx	lr

0002332e <memcmp>:
   2332e:	b510      	push	{r4, lr}
   23330:	3901      	subs	r1, #1
   23332:	4402      	add	r2, r0
   23334:	4290      	cmp	r0, r2
   23336:	d101      	bne.n	2333c <memcmp+0xe>
   23338:	2000      	movs	r0, #0
   2333a:	e005      	b.n	23348 <memcmp+0x1a>
   2333c:	7803      	ldrb	r3, [r0, #0]
   2333e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23342:	42a3      	cmp	r3, r4
   23344:	d001      	beq.n	2334a <memcmp+0x1c>
   23346:	1b18      	subs	r0, r3, r4
   23348:	bd10      	pop	{r4, pc}
   2334a:	3001      	adds	r0, #1
   2334c:	e7f2      	b.n	23334 <memcmp+0x6>

0002334e <memcpy>:
   2334e:	440a      	add	r2, r1
   23350:	4291      	cmp	r1, r2
   23352:	f100 33ff 	add.w	r3, r0, #4294967295
   23356:	d100      	bne.n	2335a <memcpy+0xc>
   23358:	4770      	bx	lr
   2335a:	b510      	push	{r4, lr}
   2335c:	f811 4b01 	ldrb.w	r4, [r1], #1
   23360:	f803 4f01 	strb.w	r4, [r3, #1]!
   23364:	4291      	cmp	r1, r2
   23366:	d1f9      	bne.n	2335c <memcpy+0xe>
   23368:	bd10      	pop	{r4, pc}

0002336a <__memcpy_chk>:
   2336a:	429a      	cmp	r2, r3
   2336c:	b508      	push	{r3, lr}
   2336e:	d901      	bls.n	23374 <__memcpy_chk+0xa>
   23370:	f7f0 fb5e 	bl	13a30 <__chk_fail>
   23374:	4281      	cmp	r1, r0
   23376:	d804      	bhi.n	23382 <__memcpy_chk+0x18>
   23378:	188b      	adds	r3, r1, r2
   2337a:	4298      	cmp	r0, r3
   2337c:	d3f8      	bcc.n	23370 <__memcpy_chk+0x6>
   2337e:	4281      	cmp	r1, r0
   23380:	d102      	bne.n	23388 <__memcpy_chk+0x1e>
   23382:	1883      	adds	r3, r0, r2
   23384:	4299      	cmp	r1, r3
   23386:	d3f3      	bcc.n	23370 <__memcpy_chk+0x6>
   23388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2338c:	f7ff bfdf 	b.w	2334e <memcpy>

00023390 <memset>:
   23390:	4402      	add	r2, r0
   23392:	4603      	mov	r3, r0
   23394:	4293      	cmp	r3, r2
   23396:	d100      	bne.n	2339a <memset+0xa>
   23398:	4770      	bx	lr
   2339a:	f803 1b01 	strb.w	r1, [r3], #1
   2339e:	e7f9      	b.n	23394 <memset+0x4>

000233a0 <strcpy>:
   233a0:	4603      	mov	r3, r0
   233a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   233a6:	f803 2b01 	strb.w	r2, [r3], #1
   233aa:	2a00      	cmp	r2, #0
   233ac:	d1f9      	bne.n	233a2 <strcpy+0x2>
   233ae:	4770      	bx	lr

000233b0 <__strncpy_chk>:
   233b0:	429a      	cmp	r2, r3
   233b2:	b508      	push	{r3, lr}
   233b4:	d901      	bls.n	233ba <__strncpy_chk+0xa>
   233b6:	f7f0 fb3b 	bl	13a30 <__chk_fail>
   233ba:	4281      	cmp	r1, r0
   233bc:	d804      	bhi.n	233c8 <__strncpy_chk+0x18>
   233be:	188b      	adds	r3, r1, r2
   233c0:	4298      	cmp	r0, r3
   233c2:	d3f8      	bcc.n	233b6 <__strncpy_chk+0x6>
   233c4:	4281      	cmp	r1, r0
   233c6:	d102      	bne.n	233ce <__strncpy_chk+0x1e>
   233c8:	1883      	adds	r3, r0, r2
   233ca:	4299      	cmp	r1, r3
   233cc:	d3f3      	bcc.n	233b6 <__strncpy_chk+0x6>
   233ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   233d2:	f000 b80c 	b.w	233ee <strncpy>

000233d6 <strnlen>:
   233d6:	b510      	push	{r4, lr}
   233d8:	4602      	mov	r2, r0
   233da:	4401      	add	r1, r0
   233dc:	428a      	cmp	r2, r1
   233de:	4613      	mov	r3, r2
   233e0:	d003      	beq.n	233ea <strnlen+0x14>
   233e2:	781c      	ldrb	r4, [r3, #0]
   233e4:	3201      	adds	r2, #1
   233e6:	2c00      	cmp	r4, #0
   233e8:	d1f8      	bne.n	233dc <strnlen+0x6>
   233ea:	1a18      	subs	r0, r3, r0
   233ec:	bd10      	pop	{r4, pc}

000233ee <strncpy>:
   233ee:	b510      	push	{r4, lr}
   233f0:	3901      	subs	r1, #1
   233f2:	4603      	mov	r3, r0
   233f4:	b132      	cbz	r2, 23404 <strncpy+0x16>
   233f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   233fa:	f803 4b01 	strb.w	r4, [r3], #1
   233fe:	3a01      	subs	r2, #1
   23400:	2c00      	cmp	r4, #0
   23402:	d1f7      	bne.n	233f4 <strncpy+0x6>
   23404:	441a      	add	r2, r3
   23406:	2100      	movs	r1, #0
   23408:	4293      	cmp	r3, r2
   2340a:	d100      	bne.n	2340e <strncpy+0x20>
   2340c:	bd10      	pop	{r4, pc}
   2340e:	f803 1b01 	strb.w	r1, [r3], #1
   23412:	e7f9      	b.n	23408 <strncpy+0x1a>

00023414 <memmove>:
   23414:	4288      	cmp	r0, r1
   23416:	b510      	push	{r4, lr}
   23418:	eb01 0402 	add.w	r4, r1, r2
   2341c:	d902      	bls.n	23424 <memmove+0x10>
   2341e:	4284      	cmp	r4, r0
   23420:	4623      	mov	r3, r4
   23422:	d807      	bhi.n	23434 <memmove+0x20>
   23424:	1e43      	subs	r3, r0, #1
   23426:	42a1      	cmp	r1, r4
   23428:	d008      	beq.n	2343c <memmove+0x28>
   2342a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2342e:	f803 2f01 	strb.w	r2, [r3, #1]!
   23432:	e7f8      	b.n	23426 <memmove+0x12>
   23434:	4402      	add	r2, r0
   23436:	4601      	mov	r1, r0
   23438:	428a      	cmp	r2, r1
   2343a:	d100      	bne.n	2343e <memmove+0x2a>
   2343c:	bd10      	pop	{r4, pc}
   2343e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   23442:	f802 4d01 	strb.w	r4, [r2, #-1]!
   23446:	e7f7      	b.n	23438 <memmove+0x24>

00023448 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   23448:	f7f6 b858 	b.w	194fc <SystemInit>
