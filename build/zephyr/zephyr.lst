
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 58 00 20 21 3a 01 00 43 04 02 00 f5 39 01 00     .X. !:..C....9..
  10:	f5 39 01 00 f5 39 01 00 f5 39 01 00 00 00 00 00     .9...9...9......
	...
  2c:	f1 36 01 00 f5 39 01 00 00 00 00 00 9d 36 01 00     .6...9.......6..
  3c:	f5 39 01 00                                         .9..

00000040 <_irq_vector_table>:
  40:	a1 37 01 00 b7 29 02 00 a1 37 01 00 a1 37 01 00     .7...)...7...7..
  50:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  60:	65 29 02 00 a1 37 01 00 a1 37 01 00 9d 29 02 00     e)...7...7...)..
  70:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  80:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  90:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  a0:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  b0:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  c0:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  d0:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  e0:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..
  f0:	a1 37 01 00 a1 37 01 00 a1 37 01 00 a1 37 01 00     .7...7...7...7..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x5c>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2a>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4a>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x58>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6a>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_drsub>:
     268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__adddf3>
     26e:	bf00      	nop

00000270 <__aeabi_dsub>:
     270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000274 <__adddf3>:
     274:	b530      	push	{r4, r5, lr}
     276:	ea4f 0441 	mov.w	r4, r1, lsl #1
     27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     27e:	ea94 0f05 	teq	r4, r5
     282:	bf08      	it	eq
     284:	ea90 0f02 	teqeq	r0, r2
     288:	bf1f      	itttt	ne
     28a:	ea54 0c00 	orrsne.w	ip, r4, r0
     28e:	ea55 0c02 	orrsne.w	ip, r5, r2
     292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     29a:	f000 80e2 	beq.w	462 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x62>
     29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     2a6:	bfb8      	it	lt
     2a8:	426d      	neglt	r5, r5
     2aa:	dd0c      	ble.n	2c6 <__adddf3+0x52>
     2ac:	442c      	add	r4, r5
     2ae:	ea80 0202 	eor.w	r2, r0, r2
     2b2:	ea81 0303 	eor.w	r3, r1, r3
     2b6:	ea82 0000 	eor.w	r0, r2, r0
     2ba:	ea83 0101 	eor.w	r1, r3, r1
     2be:	ea80 0202 	eor.w	r2, r0, r2
     2c2:	ea81 0303 	eor.w	r3, r1, r3
     2c6:	2d36      	cmp	r5, #54	; 0x36
     2c8:	bf88      	it	hi
     2ca:	bd30      	pophi	{r4, r5, pc}
     2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     2dc:	d002      	beq.n	2e4 <__adddf3+0x70>
     2de:	4240      	negs	r0, r0
     2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2f0:	d002      	beq.n	2f8 <__adddf3+0x84>
     2f2:	4252      	negs	r2, r2
     2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2f8:	ea94 0f05 	teq	r4, r5
     2fc:	f000 80a7 	beq.w	44e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4e>
     300:	f1a4 0401 	sub.w	r4, r4, #1
     304:	f1d5 0e20 	rsbs	lr, r5, #32
     308:	db0d      	blt.n	326 <__adddf3+0xb2>
     30a:	fa02 fc0e 	lsl.w	ip, r2, lr
     30e:	fa22 f205 	lsr.w	r2, r2, r5
     312:	1880      	adds	r0, r0, r2
     314:	f141 0100 	adc.w	r1, r1, #0
     318:	fa03 f20e 	lsl.w	r2, r3, lr
     31c:	1880      	adds	r0, r0, r2
     31e:	fa43 f305 	asr.w	r3, r3, r5
     322:	4159      	adcs	r1, r3
     324:	e00e      	b.n	344 <__adddf3+0xd0>
     326:	f1a5 0520 	sub.w	r5, r5, #32
     32a:	f10e 0e20 	add.w	lr, lr, #32
     32e:	2a01      	cmp	r2, #1
     330:	fa03 fc0e 	lsl.w	ip, r3, lr
     334:	bf28      	it	cs
     336:	f04c 0c02 	orrcs.w	ip, ip, #2
     33a:	fa43 f305 	asr.w	r3, r3, r5
     33e:	18c0      	adds	r0, r0, r3
     340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     348:	d507      	bpl.n	35a <__adddf3+0xe6>
     34a:	f04f 0e00 	mov.w	lr, #0
     34e:	f1dc 0c00 	rsbs	ip, ip, #0
     352:	eb7e 0000 	sbcs.w	r0, lr, r0
     356:	eb6e 0101 	sbc.w	r1, lr, r1
     35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     35e:	d31b      	bcc.n	398 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x14>
     360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     364:	d30c      	bcc.n	380 <__adddf3+0x10c>
     366:	0849      	lsrs	r1, r1, #1
     368:	ea5f 0030 	movs.w	r0, r0, rrx
     36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     370:	f104 0401 	add.w	r4, r4, #1
     374:	ea4f 5244 	mov.w	r2, r4, lsl #21
     378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     37c:	f080 809a 	bcs.w	4b4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x40>
     380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     384:	bf08      	it	eq
     386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     38a:	f150 0000 	adcs.w	r0, r0, #0
     38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     392:	ea41 0105 	orr.w	r1, r1, r5
     396:	bd30      	pop	{r4, r5, pc}
     398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     39c:	4140      	adcs	r0, r0
     39e:	eb41 0101 	adc.w	r1, r1, r1
     3a2:	3c01      	subs	r4, #1
     3a4:	bf28      	it	cs
     3a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     3aa:	d2e9      	bcs.n	380 <__adddf3+0x10c>
     3ac:	f091 0f00 	teq	r1, #0
     3b0:	bf04      	itt	eq
     3b2:	4601      	moveq	r1, r0
     3b4:	2000      	moveq	r0, #0
     3b6:	fab1 f381 	clz	r3, r1
     3ba:	bf08      	it	eq
     3bc:	3320      	addeq	r3, #32
     3be:	f1a3 030b 	sub.w	r3, r3, #11
     3c2:	f1b3 0220 	subs.w	r2, r3, #32
     3c6:	da0c      	bge.n	3e2 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5e>
     3c8:	320c      	adds	r2, #12
     3ca:	dd08      	ble.n	3de <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x5a>
     3cc:	f102 0c14 	add.w	ip, r2, #20
     3d0:	f1c2 020c 	rsb	r2, r2, #12
     3d4:	fa01 f00c 	lsl.w	r0, r1, ip
     3d8:	fa21 f102 	lsr.w	r1, r1, r2
     3dc:	e00c      	b.n	3f8 <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x74>
     3de:	f102 0214 	add.w	r2, r2, #20
     3e2:	bfd8      	it	le
     3e4:	f1c2 0c20 	rsble	ip, r2, #32
     3e8:	fa01 f102 	lsl.w	r1, r1, r2
     3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
     3f0:	bfdc      	itt	le
     3f2:	ea41 010c 	orrle.w	r1, r1, ip
     3f6:	4090      	lslle	r0, r2
     3f8:	1ae4      	subs	r4, r4, r3
     3fa:	bfa2      	ittt	ge
     3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     400:	4329      	orrge	r1, r5
     402:	bd30      	popge	{r4, r5, pc}
     404:	ea6f 0404 	mvn.w	r4, r4
     408:	3c1f      	subs	r4, #31
     40a:	da1c      	bge.n	446 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x46>
     40c:	340c      	adds	r4, #12
     40e:	dc0e      	bgt.n	42e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x2e>
     410:	f104 0414 	add.w	r4, r4, #20
     414:	f1c4 0220 	rsb	r2, r4, #32
     418:	fa20 f004 	lsr.w	r0, r0, r4
     41c:	fa01 f302 	lsl.w	r3, r1, r2
     420:	ea40 0003 	orr.w	r0, r0, r3
     424:	fa21 f304 	lsr.w	r3, r1, r4
     428:	ea45 0103 	orr.w	r1, r5, r3
     42c:	bd30      	pop	{r4, r5, pc}
     42e:	f1c4 040c 	rsb	r4, r4, #12
     432:	f1c4 0220 	rsb	r2, r4, #32
     436:	fa20 f002 	lsr.w	r0, r0, r2
     43a:	fa01 f304 	lsl.w	r3, r1, r4
     43e:	ea40 0003 	orr.w	r0, r0, r3
     442:	4629      	mov	r1, r5
     444:	bd30      	pop	{r4, r5, pc}
     446:	fa21 f004 	lsr.w	r0, r1, r4
     44a:	4629      	mov	r1, r5
     44c:	bd30      	pop	{r4, r5, pc}
     44e:	f094 0f00 	teq	r4, #0
     452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     456:	bf06      	itte	eq
     458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     45c:	3401      	addeq	r4, #1
     45e:	3d01      	subne	r5, #1
     460:	e74e      	b.n	300 <__adddf3+0x8c>
     462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     466:	bf18      	it	ne
     468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     46c:	d029      	beq.n	4c2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4e>
     46e:	ea94 0f05 	teq	r4, r5
     472:	bf08      	it	eq
     474:	ea90 0f02 	teqeq	r0, r2
     478:	d005      	beq.n	486 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x12>
     47a:	ea54 0c00 	orrs.w	ip, r4, r0
     47e:	bf04      	itt	eq
     480:	4619      	moveq	r1, r3
     482:	4610      	moveq	r0, r2
     484:	bd30      	pop	{r4, r5, pc}
     486:	ea91 0f03 	teq	r1, r3
     48a:	bf1e      	ittt	ne
     48c:	2100      	movne	r1, #0
     48e:	2000      	movne	r0, #0
     490:	bd30      	popne	{r4, r5, pc}
     492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     496:	d105      	bne.n	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     498:	0040      	lsls	r0, r0, #1
     49a:	4149      	adcs	r1, r1
     49c:	bf28      	it	cs
     49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     4a2:	bd30      	pop	{r4, r5, pc}
     4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     4a8:	bf3c      	itt	cc
     4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     4ae:	bd30      	popcc	{r4, r5, pc}
     4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	bd30      	pop	{r4, r5, pc}
     4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     4c6:	bf1a      	itte	ne
     4c8:	4619      	movne	r1, r3
     4ca:	4610      	movne	r0, r2
     4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     4d0:	bf1c      	itt	ne
     4d2:	460b      	movne	r3, r1
     4d4:	4602      	movne	r2, r0
     4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     4da:	bf06      	itte	eq
     4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     4e0:	ea91 0f03 	teqeq	r1, r3
     4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4e8:	bd30      	pop	{r4, r5, pc}
     4ea:	bf00      	nop

000004ec <__aeabi_ui2d>:
     4ec:	f090 0f00 	teq	r0, #0
     4f0:	bf04      	itt	eq
     4f2:	2100      	moveq	r1, #0
     4f4:	4770      	bxeq	lr
     4f6:	b530      	push	{r4, r5, lr}
     4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     500:	f04f 0500 	mov.w	r5, #0
     504:	f04f 0100 	mov.w	r1, #0
     508:	e750      	b.n	3ac <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x28>
     50a:	bf00      	nop

0000050c <__aeabi_i2d>:
     50c:	f090 0f00 	teq	r0, #0
     510:	bf04      	itt	eq
     512:	2100      	moveq	r1, #0
     514:	4770      	bxeq	lr
     516:	b530      	push	{r4, r5, lr}
     518:	f44f 6480 	mov.w	r4, #1024	; 0x400
     51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     524:	bf48      	it	mi
     526:	4240      	negmi	r0, r0
     528:	f04f 0100 	mov.w	r1, #0
     52c:	e73e      	b.n	3ac <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x28>
     52e:	bf00      	nop

00000530 <__aeabi_f2d>:
     530:	0042      	lsls	r2, r0, #1
     532:	ea4f 01e2 	mov.w	r1, r2, asr #3
     536:	ea4f 0131 	mov.w	r1, r1, rrx
     53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     53e:	bf1f      	itttt	ne
     540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     54c:	4770      	bxne	lr
     54e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     552:	bf08      	it	eq
     554:	4770      	bxeq	lr
     556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     55a:	bf04      	itt	eq
     55c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     560:	4770      	bxeq	lr
     562:	b530      	push	{r4, r5, lr}
     564:	f44f 7460 	mov.w	r4, #896	; 0x380
     568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	e71c      	b.n	3ac <CONFIG_BT_CTLR_ECDH_STACK_SIZE+0x28>
     572:	bf00      	nop

00000574 <__aeabi_ul2d>:
     574:	ea50 0201 	orrs.w	r2, r0, r1
     578:	bf08      	it	eq
     57a:	4770      	bxeq	lr
     57c:	b530      	push	{r4, r5, lr}
     57e:	f04f 0500 	mov.w	r5, #0
     582:	e00a      	b.n	59a <__aeabi_l2d+0x16>

00000584 <__aeabi_l2d>:
     584:	ea50 0201 	orrs.w	r2, r0, r1
     588:	bf08      	it	eq
     58a:	4770      	bxeq	lr
     58c:	b530      	push	{r4, r5, lr}
     58e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     592:	d502      	bpl.n	59a <__aeabi_l2d+0x16>
     594:	4240      	negs	r0, r0
     596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     59a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     59e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     5a6:	f43f aed8 	beq.w	35a <__adddf3+0xe6>
     5aa:	f04f 0203 	mov.w	r2, #3
     5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5b2:	bf18      	it	ne
     5b4:	3203      	addne	r2, #3
     5b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5ba:	bf18      	it	ne
     5bc:	3203      	addne	r2, #3
     5be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     5c2:	f1c2 0320 	rsb	r3, r2, #32
     5c6:	fa00 fc03 	lsl.w	ip, r0, r3
     5ca:	fa20 f002 	lsr.w	r0, r0, r2
     5ce:	fa01 fe03 	lsl.w	lr, r1, r3
     5d2:	ea40 000e 	orr.w	r0, r0, lr
     5d6:	fa21 f102 	lsr.w	r1, r1, r2
     5da:	4414      	add	r4, r2
     5dc:	e6bd      	b.n	35a <__adddf3+0xe6>
     5de:	bf00      	nop

000005e0 <__aeabi_dmul>:
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     5e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     5ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     5ee:	bf1d      	ittte	ne
     5f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     5f4:	ea94 0f0c 	teqne	r4, ip
     5f8:	ea95 0f0c 	teqne	r5, ip
     5fc:	f000 f8de 	bleq	7bc <CONFIG_BT_HCI_TX_STACK_SIZE+0x1bc>
     600:	442c      	add	r4, r5
     602:	ea81 0603 	eor.w	r6, r1, r3
     606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     60a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     60e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     612:	bf18      	it	ne
     614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     620:	d038      	beq.n	694 <CONFIG_BT_HCI_TX_STACK_SIZE+0x94>
     622:	fba0 ce02 	umull	ip, lr, r0, r2
     626:	f04f 0500 	mov.w	r5, #0
     62a:	fbe1 e502 	umlal	lr, r5, r1, r2
     62e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     632:	fbe0 e503 	umlal	lr, r5, r0, r3
     636:	f04f 0600 	mov.w	r6, #0
     63a:	fbe1 5603 	umlal	r5, r6, r1, r3
     63e:	f09c 0f00 	teq	ip, #0
     642:	bf18      	it	ne
     644:	f04e 0e01 	orrne.w	lr, lr, #1
     648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     64c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     654:	d204      	bcs.n	660 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     65a:	416d      	adcs	r5, r5
     65c:	eb46 0606 	adc.w	r6, r6, r6
     660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     66c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     678:	bf88      	it	hi
     67a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     67e:	d81e      	bhi.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     684:	bf08      	it	eq
     686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     68a:	f150 0000 	adcs.w	r0, r0, #0
     68e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     698:	ea46 0101 	orr.w	r1, r6, r1
     69c:	ea40 0002 	orr.w	r0, r0, r2
     6a0:	ea81 0103 	eor.w	r1, r1, r3
     6a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     6a8:	bfc2      	ittt	gt
     6aa:	ebd4 050c 	rsbsgt	r5, r4, ip
     6ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     6b2:	bd70      	popgt	{r4, r5, r6, pc}
     6b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     6b8:	f04f 0e00 	mov.w	lr, #0
     6bc:	3c01      	subs	r4, #1
     6be:	f300 80ab 	bgt.w	818 <CONFIG_ISR_STACK_SIZE+0x18>
     6c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     6c6:	bfde      	ittt	le
     6c8:	2000      	movle	r0, #0
     6ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     6ce:	bd70      	pople	{r4, r5, r6, pc}
     6d0:	f1c4 0400 	rsb	r4, r4, #0
     6d4:	3c20      	subs	r4, #32
     6d6:	da35      	bge.n	744 <CONFIG_BT_HCI_TX_STACK_SIZE+0x144>
     6d8:	340c      	adds	r4, #12
     6da:	dc1b      	bgt.n	714 <CONFIG_BT_HCI_TX_STACK_SIZE+0x114>
     6dc:	f104 0414 	add.w	r4, r4, #20
     6e0:	f1c4 0520 	rsb	r5, r4, #32
     6e4:	fa00 f305 	lsl.w	r3, r0, r5
     6e8:	fa20 f004 	lsr.w	r0, r0, r4
     6ec:	fa01 f205 	lsl.w	r2, r1, r5
     6f0:	ea40 0002 	orr.w	r0, r0, r2
     6f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     6f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     6fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     700:	fa21 f604 	lsr.w	r6, r1, r4
     704:	eb42 0106 	adc.w	r1, r2, r6
     708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     70c:	bf08      	it	eq
     70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     712:	bd70      	pop	{r4, r5, r6, pc}
     714:	f1c4 040c 	rsb	r4, r4, #12
     718:	f1c4 0520 	rsb	r5, r4, #32
     71c:	fa00 f304 	lsl.w	r3, r0, r4
     720:	fa20 f005 	lsr.w	r0, r0, r5
     724:	fa01 f204 	lsl.w	r2, r1, r4
     728:	ea40 0002 	orr.w	r0, r0, r2
     72c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     734:	f141 0100 	adc.w	r1, r1, #0
     738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     73c:	bf08      	it	eq
     73e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	f1c4 0520 	rsb	r5, r4, #32
     748:	fa00 f205 	lsl.w	r2, r0, r5
     74c:	ea4e 0e02 	orr.w	lr, lr, r2
     750:	fa20 f304 	lsr.w	r3, r0, r4
     754:	fa01 f205 	lsl.w	r2, r1, r5
     758:	ea43 0302 	orr.w	r3, r3, r2
     75c:	fa21 f004 	lsr.w	r0, r1, r4
     760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     764:	fa21 f204 	lsr.w	r2, r1, r4
     768:	ea20 0002 	bic.w	r0, r0, r2
     76c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     774:	bf08      	it	eq
     776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	f094 0f00 	teq	r4, #0
     780:	d10f      	bne.n	7a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a2>
     782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     786:	0040      	lsls	r0, r0, #1
     788:	eb41 0101 	adc.w	r1, r1, r1
     78c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     790:	bf08      	it	eq
     792:	3c01      	subeq	r4, #1
     794:	d0f7      	beq.n	786 <CONFIG_BT_HCI_TX_STACK_SIZE+0x186>
     796:	ea41 0106 	orr.w	r1, r1, r6
     79a:	f095 0f00 	teq	r5, #0
     79e:	bf18      	it	ne
     7a0:	4770      	bxne	lr
     7a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     7a6:	0052      	lsls	r2, r2, #1
     7a8:	eb43 0303 	adc.w	r3, r3, r3
     7ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     7b0:	bf08      	it	eq
     7b2:	3d01      	subeq	r5, #1
     7b4:	d0f7      	beq.n	7a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a6>
     7b6:	ea43 0306 	orr.w	r3, r3, r6
     7ba:	4770      	bx	lr
     7bc:	ea94 0f0c 	teq	r4, ip
     7c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7c4:	bf18      	it	ne
     7c6:	ea95 0f0c 	teqne	r5, ip
     7ca:	d00c      	beq.n	7e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e6>
     7cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7d0:	bf18      	it	ne
     7d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7d6:	d1d1      	bne.n	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     7d8:	ea81 0103 	eor.w	r1, r1, r3
     7dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7e0:	f04f 0000 	mov.w	r0, #0
     7e4:	bd70      	pop	{r4, r5, r6, pc}
     7e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7ea:	bf06      	itte	eq
     7ec:	4610      	moveq	r0, r2
     7ee:	4619      	moveq	r1, r3
     7f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7f4:	d019      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	d102      	bne.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     7fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     800:	d113      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     802:	ea95 0f0c 	teq	r5, ip
     806:	d105      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     80c:	bf1c      	itt	ne
     80e:	4610      	movne	r0, r2
     810:	4619      	movne	r1, r3
     812:	d10a      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     814:	ea81 0103 	eor.w	r1, r1, r3
     818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     81c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     824:	f04f 0000 	mov.w	r0, #0
     828:	bd70      	pop	{r4, r5, r6, pc}
     82a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     82e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     832:	bd70      	pop	{r4, r5, r6, pc}

00000834 <__aeabi_ddiv>:
     834:	b570      	push	{r4, r5, r6, lr}
     836:	f04f 0cff 	mov.w	ip, #255	; 0xff
     83a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     83e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     842:	bf1d      	ittte	ne
     844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     848:	ea94 0f0c 	teqne	r4, ip
     84c:	ea95 0f0c 	teqne	r5, ip
     850:	f000 f8a7 	bleq	9a2 <__data_size+0x11>
     854:	eba4 0405 	sub.w	r4, r4, r5
     858:	ea81 0e03 	eor.w	lr, r1, r3
     85c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     860:	ea4f 3101 	mov.w	r1, r1, lsl #12
     864:	f000 8088 	beq.w	978 <__aeabi_ddiv+0x144>
     868:	ea4f 3303 	mov.w	r3, r3, lsl #12
     86c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     878:	ea4f 2202 	mov.w	r2, r2, lsl #8
     87c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     884:	ea4f 2600 	mov.w	r6, r0, lsl #8
     888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     88c:	429d      	cmp	r5, r3
     88e:	bf08      	it	eq
     890:	4296      	cmpeq	r6, r2
     892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     896:	f504 7440 	add.w	r4, r4, #768	; 0x300
     89a:	d202      	bcs.n	8a2 <__aeabi_ddiv+0x6e>
     89c:	085b      	lsrs	r3, r3, #1
     89e:	ea4f 0232 	mov.w	r2, r2, rrx
     8a2:	1ab6      	subs	r6, r6, r2
     8a4:	eb65 0503 	sbc.w	r5, r5, r3
     8a8:	085b      	lsrs	r3, r3, #1
     8aa:	ea4f 0232 	mov.w	r2, r2, rrx
     8ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     8b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     8b6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     8be:	bf22      	ittt	cs
     8c0:	1ab6      	subcs	r6, r6, r2
     8c2:	4675      	movcs	r5, lr
     8c4:	ea40 000c 	orrcs.w	r0, r0, ip
     8c8:	085b      	lsrs	r3, r3, #1
     8ca:	ea4f 0232 	mov.w	r2, r2, rrx
     8ce:	ebb6 0e02 	subs.w	lr, r6, r2
     8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     8d6:	bf22      	ittt	cs
     8d8:	1ab6      	subcs	r6, r6, r2
     8da:	4675      	movcs	r5, lr
     8dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     8e0:	085b      	lsrs	r3, r3, #1
     8e2:	ea4f 0232 	mov.w	r2, r2, rrx
     8e6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     8ee:	bf22      	ittt	cs
     8f0:	1ab6      	subcs	r6, r6, r2
     8f2:	4675      	movcs	r5, lr
     8f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     8f8:	085b      	lsrs	r3, r3, #1
     8fa:	ea4f 0232 	mov.w	r2, r2, rrx
     8fe:	ebb6 0e02 	subs.w	lr, r6, r2
     902:	eb75 0e03 	sbcs.w	lr, r5, r3
     906:	bf22      	ittt	cs
     908:	1ab6      	subcs	r6, r6, r2
     90a:	4675      	movcs	r5, lr
     90c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     910:	ea55 0e06 	orrs.w	lr, r5, r6
     914:	d018      	beq.n	948 <__aeabi_ddiv+0x114>
     916:	ea4f 1505 	mov.w	r5, r5, lsl #4
     91a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     91e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     92a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     92e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     932:	d1c0      	bne.n	8b6 <__aeabi_ddiv+0x82>
     934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     938:	d10b      	bne.n	952 <__aeabi_ddiv+0x11e>
     93a:	ea41 0100 	orr.w	r1, r1, r0
     93e:	f04f 0000 	mov.w	r0, #0
     942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     946:	e7b6      	b.n	8b6 <__aeabi_ddiv+0x82>
     948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     94c:	bf04      	itt	eq
     94e:	4301      	orreq	r1, r0
     950:	2000      	moveq	r0, #0
     952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     956:	bf88      	it	hi
     958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     95c:	f63f aeaf 	bhi.w	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     960:	ebb5 0c03 	subs.w	ip, r5, r3
     964:	bf04      	itt	eq
     966:	ebb6 0c02 	subseq.w	ip, r6, r2
     96a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     96e:	f150 0000 	adcs.w	r0, r0, #0
     972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     976:	bd70      	pop	{r4, r5, r6, pc}
     978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     97c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     984:	bfc2      	ittt	gt
     986:	ebd4 050c 	rsbsgt	r5, r4, ip
     98a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     98e:	bd70      	popgt	{r4, r5, r6, pc}
     990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     994:	f04f 0e00 	mov.w	lr, #0
     998:	3c01      	subs	r4, #1
     99a:	e690      	b.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     99c:	ea45 0e06 	orr.w	lr, r5, r6
     9a0:	e68d      	b.n	6be <CONFIG_BT_HCI_TX_STACK_SIZE+0xbe>
     9a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     9a6:	ea94 0f0c 	teq	r4, ip
     9aa:	bf08      	it	eq
     9ac:	ea95 0f0c 	teqeq	r5, ip
     9b0:	f43f af3b 	beq.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9b4:	ea94 0f0c 	teq	r4, ip
     9b8:	d10a      	bne.n	9d0 <__data_size+0x3f>
     9ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     9be:	f47f af34 	bne.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9c2:	ea95 0f0c 	teq	r5, ip
     9c6:	f47f af25 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9ca:	4610      	mov	r0, r2
     9cc:	4619      	mov	r1, r3
     9ce:	e72c      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9d0:	ea95 0f0c 	teq	r5, ip
     9d4:	d106      	bne.n	9e4 <__data_size+0x53>
     9d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     9da:	f43f aefd 	beq.w	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     9de:	4610      	mov	r0, r2
     9e0:	4619      	mov	r1, r3
     9e2:	e722      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     9e8:	bf18      	it	ne
     9ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     9ee:	f47f aec5 	bne.w	77c <CONFIG_BT_HCI_TX_STACK_SIZE+0x17c>
     9f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     9f6:	f47f af0d 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     9fe:	f47f aeeb 	bne.w	7d8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1d8>
     a02:	e712      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>

00000a04 <__gedf2>:
     a04:	f04f 3cff 	mov.w	ip, #4294967295
     a08:	e006      	b.n	a18 <__cmpdf2+0x4>
     a0a:	bf00      	nop

00000a0c <__ledf2>:
     a0c:	f04f 0c01 	mov.w	ip, #1
     a10:	e002      	b.n	a18 <__cmpdf2+0x4>
     a12:	bf00      	nop

00000a14 <__cmpdf2>:
     a14:	f04f 0c01 	mov.w	ip, #1
     a18:	f84d cd04 	str.w	ip, [sp, #-4]!
     a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a28:	bf18      	it	ne
     a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a2e:	d01b      	beq.n	a68 <__cmpdf2+0x54>
     a30:	b001      	add	sp, #4
     a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a36:	bf0c      	ite	eq
     a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a3c:	ea91 0f03 	teqne	r1, r3
     a40:	bf02      	ittt	eq
     a42:	ea90 0f02 	teqeq	r0, r2
     a46:	2000      	moveq	r0, #0
     a48:	4770      	bxeq	lr
     a4a:	f110 0f00 	cmn.w	r0, #0
     a4e:	ea91 0f03 	teq	r1, r3
     a52:	bf58      	it	pl
     a54:	4299      	cmppl	r1, r3
     a56:	bf08      	it	eq
     a58:	4290      	cmpeq	r0, r2
     a5a:	bf2c      	ite	cs
     a5c:	17d8      	asrcs	r0, r3, #31
     a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a62:	f040 0001 	orr.w	r0, r0, #1
     a66:	4770      	bx	lr
     a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a70:	d102      	bne.n	a78 <__cmpdf2+0x64>
     a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a76:	d107      	bne.n	a88 <__cmpdf2+0x74>
     a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a80:	d1d6      	bne.n	a30 <__cmpdf2+0x1c>
     a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a86:	d0d3      	beq.n	a30 <__cmpdf2+0x1c>
     a88:	f85d 0b04 	ldr.w	r0, [sp], #4
     a8c:	4770      	bx	lr
     a8e:	bf00      	nop

00000a90 <__aeabi_cdrcmple>:
     a90:	4684      	mov	ip, r0
     a92:	4610      	mov	r0, r2
     a94:	4662      	mov	r2, ip
     a96:	468c      	mov	ip, r1
     a98:	4619      	mov	r1, r3
     a9a:	4663      	mov	r3, ip
     a9c:	e000      	b.n	aa0 <__aeabi_cdcmpeq>
     a9e:	bf00      	nop

00000aa0 <__aeabi_cdcmpeq>:
     aa0:	b501      	push	{r0, lr}
     aa2:	f7ff ffb7 	bl	a14 <__cmpdf2>
     aa6:	2800      	cmp	r0, #0
     aa8:	bf48      	it	mi
     aaa:	f110 0f00 	cmnmi.w	r0, #0
     aae:	bd01      	pop	{r0, pc}

00000ab0 <__aeabi_dcmpeq>:
     ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ab4:	f7ff fff4 	bl	aa0 <__aeabi_cdcmpeq>
     ab8:	bf0c      	ite	eq
     aba:	2001      	moveq	r0, #1
     abc:	2000      	movne	r0, #0
     abe:	f85d fb08 	ldr.w	pc, [sp], #8
     ac2:	bf00      	nop

00000ac4 <__aeabi_dcmplt>:
     ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac8:	f7ff ffea 	bl	aa0 <__aeabi_cdcmpeq>
     acc:	bf34      	ite	cc
     ace:	2001      	movcc	r0, #1
     ad0:	2000      	movcs	r0, #0
     ad2:	f85d fb08 	ldr.w	pc, [sp], #8
     ad6:	bf00      	nop

00000ad8 <__aeabi_dcmple>:
     ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
     adc:	f7ff ffe0 	bl	aa0 <__aeabi_cdcmpeq>
     ae0:	bf94      	ite	ls
     ae2:	2001      	movls	r0, #1
     ae4:	2000      	movhi	r0, #0
     ae6:	f85d fb08 	ldr.w	pc, [sp], #8
     aea:	bf00      	nop

00000aec <__aeabi_dcmpge>:
     aec:	f84d ed08 	str.w	lr, [sp, #-8]!
     af0:	f7ff ffce 	bl	a90 <__aeabi_cdrcmple>
     af4:	bf94      	ite	ls
     af6:	2001      	movls	r0, #1
     af8:	2000      	movhi	r0, #0
     afa:	f85d fb08 	ldr.w	pc, [sp], #8
     afe:	bf00      	nop

00000b00 <__aeabi_dcmpgt>:
     b00:	f84d ed08 	str.w	lr, [sp, #-8]!
     b04:	f7ff ffc4 	bl	a90 <__aeabi_cdrcmple>
     b08:	bf34      	ite	cc
     b0a:	2001      	movcc	r0, #1
     b0c:	2000      	movcs	r0, #0
     b0e:	f85d fb08 	ldr.w	pc, [sp], #8
     b12:	bf00      	nop

00000b14 <__aeabi_d2f>:
     b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     b1c:	bf24      	itt	cs
     b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     b26:	d90d      	bls.n	b44 <__aeabi_d2f+0x30>
     b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     b3c:	bf08      	it	eq
     b3e:	f020 0001 	biceq.w	r0, r0, #1
     b42:	4770      	bx	lr
     b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     b48:	d121      	bne.n	b8e <__aeabi_d2f+0x7a>
     b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     b4e:	bfbc      	itt	lt
     b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     b54:	4770      	bxlt	lr
     b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
     b5e:	f1c2 0218 	rsb	r2, r2, #24
     b62:	f1c2 0c20 	rsb	ip, r2, #32
     b66:	fa10 f30c 	lsls.w	r3, r0, ip
     b6a:	fa20 f002 	lsr.w	r0, r0, r2
     b6e:	bf18      	it	ne
     b70:	f040 0001 	orrne.w	r0, r0, #1
     b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
     b80:	ea40 000c 	orr.w	r0, r0, ip
     b84:	fa23 f302 	lsr.w	r3, r3, r2
     b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b8c:	e7cc      	b.n	b28 <__aeabi_d2f+0x14>
     b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
     b92:	d107      	bne.n	ba4 <__aeabi_d2f+0x90>
     b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     b98:	bf1e      	ittt	ne
     b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     ba2:	4770      	bxne	lr
     ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop

00000bb4 <__aeabi_frsub>:
     bb4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     bb8:	e002      	b.n	bc0 <__addsf3>
     bba:	bf00      	nop

00000bbc <__aeabi_fsub>:
     bbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000bc0 <__addsf3>:
     bc0:	0042      	lsls	r2, r0, #1
     bc2:	bf1f      	itttt	ne
     bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     bc8:	ea92 0f03 	teqne	r2, r3
     bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     bd4:	d06a      	beq.n	cac <__addsf3+0xec>
     bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
     bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     bde:	bfc1      	itttt	gt
     be0:	18d2      	addgt	r2, r2, r3
     be2:	4041      	eorgt	r1, r0
     be4:	4048      	eorgt	r0, r1
     be6:	4041      	eorgt	r1, r0
     be8:	bfb8      	it	lt
     bea:	425b      	neglt	r3, r3
     bec:	2b19      	cmp	r3, #25
     bee:	bf88      	it	hi
     bf0:	4770      	bxhi	lr
     bf2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     bf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     bfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bfe:	bf18      	it	ne
     c00:	4240      	negne	r0, r0
     c02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     c06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     c0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     c0e:	bf18      	it	ne
     c10:	4249      	negne	r1, r1
     c12:	ea92 0f03 	teq	r2, r3
     c16:	d03f      	beq.n	c98 <__addsf3+0xd8>
     c18:	f1a2 0201 	sub.w	r2, r2, #1
     c1c:	fa41 fc03 	asr.w	ip, r1, r3
     c20:	eb10 000c 	adds.w	r0, r0, ip
     c24:	f1c3 0320 	rsb	r3, r3, #32
     c28:	fa01 f103 	lsl.w	r1, r1, r3
     c2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c30:	d502      	bpl.n	c38 <__addsf3+0x78>
     c32:	4249      	negs	r1, r1
     c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     c38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     c3c:	d313      	bcc.n	c66 <__addsf3+0xa6>
     c3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     c42:	d306      	bcc.n	c52 <__addsf3+0x92>
     c44:	0840      	lsrs	r0, r0, #1
     c46:	ea4f 0131 	mov.w	r1, r1, rrx
     c4a:	f102 0201 	add.w	r2, r2, #1
     c4e:	2afe      	cmp	r2, #254	; 0xfe
     c50:	d251      	bcs.n	cf6 <__addsf3+0x136>
     c52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c5a:	bf08      	it	eq
     c5c:	f020 0001 	biceq.w	r0, r0, #1
     c60:	ea40 0003 	orr.w	r0, r0, r3
     c64:	4770      	bx	lr
     c66:	0049      	lsls	r1, r1, #1
     c68:	eb40 0000 	adc.w	r0, r0, r0
     c6c:	3a01      	subs	r2, #1
     c6e:	bf28      	it	cs
     c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     c74:	d2ed      	bcs.n	c52 <__addsf3+0x92>
     c76:	fab0 fc80 	clz	ip, r0
     c7a:	f1ac 0c08 	sub.w	ip, ip, #8
     c7e:	ebb2 020c 	subs.w	r2, r2, ip
     c82:	fa00 f00c 	lsl.w	r0, r0, ip
     c86:	bfaa      	itet	ge
     c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     c8c:	4252      	neglt	r2, r2
     c8e:	4318      	orrge	r0, r3
     c90:	bfbc      	itt	lt
     c92:	40d0      	lsrlt	r0, r2
     c94:	4318      	orrlt	r0, r3
     c96:	4770      	bx	lr
     c98:	f092 0f00 	teq	r2, #0
     c9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     ca0:	bf06      	itte	eq
     ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     ca6:	3201      	addeq	r2, #1
     ca8:	3b01      	subne	r3, #1
     caa:	e7b5      	b.n	c18 <__addsf3+0x58>
     cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
     cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     cb4:	bf18      	it	ne
     cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     cba:	d021      	beq.n	d00 <__addsf3+0x140>
     cbc:	ea92 0f03 	teq	r2, r3
     cc0:	d004      	beq.n	ccc <__addsf3+0x10c>
     cc2:	f092 0f00 	teq	r2, #0
     cc6:	bf08      	it	eq
     cc8:	4608      	moveq	r0, r1
     cca:	4770      	bx	lr
     ccc:	ea90 0f01 	teq	r0, r1
     cd0:	bf1c      	itt	ne
     cd2:	2000      	movne	r0, #0
     cd4:	4770      	bxne	lr
     cd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     cda:	d104      	bne.n	ce6 <__addsf3+0x126>
     cdc:	0040      	lsls	r0, r0, #1
     cde:	bf28      	it	cs
     ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     ce4:	4770      	bx	lr
     ce6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     cea:	bf3c      	itt	cc
     cec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     cf0:	4770      	bxcc	lr
     cf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cfe:	4770      	bx	lr
     d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
     d04:	bf16      	itet	ne
     d06:	4608      	movne	r0, r1
     d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     d0c:	4601      	movne	r1, r0
     d0e:	0242      	lsls	r2, r0, #9
     d10:	bf06      	itte	eq
     d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     d16:	ea90 0f01 	teqeq	r0, r1
     d1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     d1e:	4770      	bx	lr

00000d20 <__aeabi_ui2f>:
     d20:	f04f 0300 	mov.w	r3, #0
     d24:	e004      	b.n	d30 <__aeabi_i2f+0x8>
     d26:	bf00      	nop

00000d28 <__aeabi_i2f>:
     d28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     d2c:	bf48      	it	mi
     d2e:	4240      	negmi	r0, r0
     d30:	ea5f 0c00 	movs.w	ip, r0
     d34:	bf08      	it	eq
     d36:	4770      	bxeq	lr
     d38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     d3c:	4601      	mov	r1, r0
     d3e:	f04f 0000 	mov.w	r0, #0
     d42:	e01c      	b.n	d7e <__aeabi_l2f+0x2a>

00000d44 <__aeabi_ul2f>:
     d44:	ea50 0201 	orrs.w	r2, r0, r1
     d48:	bf08      	it	eq
     d4a:	4770      	bxeq	lr
     d4c:	f04f 0300 	mov.w	r3, #0
     d50:	e00a      	b.n	d68 <__aeabi_l2f+0x14>
     d52:	bf00      	nop

00000d54 <__aeabi_l2f>:
     d54:	ea50 0201 	orrs.w	r2, r0, r1
     d58:	bf08      	it	eq
     d5a:	4770      	bxeq	lr
     d5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     d60:	d502      	bpl.n	d68 <__aeabi_l2f+0x14>
     d62:	4240      	negs	r0, r0
     d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     d68:	ea5f 0c01 	movs.w	ip, r1
     d6c:	bf02      	ittt	eq
     d6e:	4684      	moveq	ip, r0
     d70:	4601      	moveq	r1, r0
     d72:	2000      	moveq	r0, #0
     d74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     d78:	bf08      	it	eq
     d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     d82:	fabc f28c 	clz	r2, ip
     d86:	3a08      	subs	r2, #8
     d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     d8c:	db10      	blt.n	db0 <__aeabi_l2f+0x5c>
     d8e:	fa01 fc02 	lsl.w	ip, r1, r2
     d92:	4463      	add	r3, ip
     d94:	fa00 fc02 	lsl.w	ip, r0, r2
     d98:	f1c2 0220 	rsb	r2, r2, #32
     d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     da0:	fa20 f202 	lsr.w	r2, r0, r2
     da4:	eb43 0002 	adc.w	r0, r3, r2
     da8:	bf08      	it	eq
     daa:	f020 0001 	biceq.w	r0, r0, #1
     dae:	4770      	bx	lr
     db0:	f102 0220 	add.w	r2, r2, #32
     db4:	fa01 fc02 	lsl.w	ip, r1, r2
     db8:	f1c2 0220 	rsb	r2, r2, #32
     dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     dc0:	fa21 f202 	lsr.w	r2, r1, r2
     dc4:	eb43 0002 	adc.w	r0, r3, r2
     dc8:	bf08      	it	eq
     dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dce:	4770      	bx	lr

00000dd0 <__aeabi_f2iz>:
     dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
     dd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     dd8:	d30f      	bcc.n	dfa <__aeabi_f2iz+0x2a>
     dda:	f04f 039e 	mov.w	r3, #158	; 0x9e
     dde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     de2:	d90d      	bls.n	e00 <__aeabi_f2iz+0x30>
     de4:	ea4f 2300 	mov.w	r3, r0, lsl #8
     de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     dec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     df0:	fa23 f002 	lsr.w	r0, r3, r2
     df4:	bf18      	it	ne
     df6:	4240      	negne	r0, r0
     df8:	4770      	bx	lr
     dfa:	f04f 0000 	mov.w	r0, #0
     dfe:	4770      	bx	lr
     e00:	f112 0f61 	cmn.w	r2, #97	; 0x61
     e04:	d101      	bne.n	e0a <__aeabi_f2iz+0x3a>
     e06:	0242      	lsls	r2, r0, #9
     e08:	d105      	bne.n	e16 <__aeabi_f2iz+0x46>
     e0a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     e0e:	bf08      	it	eq
     e10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     e14:	4770      	bx	lr
     e16:	f04f 0000 	mov.w	r0, #0
     e1a:	4770      	bx	lr

00000e1c <__aeabi_f2uiz>:
     e1c:	0042      	lsls	r2, r0, #1
     e1e:	d20e      	bcs.n	e3e <__aeabi_f2uiz+0x22>
     e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     e24:	d30b      	bcc.n	e3e <__aeabi_f2uiz+0x22>
     e26:	f04f 039e 	mov.w	r3, #158	; 0x9e
     e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     e2e:	d409      	bmi.n	e44 <__aeabi_f2uiz+0x28>
     e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
     e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     e38:	fa23 f002 	lsr.w	r0, r3, r2
     e3c:	4770      	bx	lr
     e3e:	f04f 0000 	mov.w	r0, #0
     e42:	4770      	bx	lr
     e44:	f112 0f61 	cmn.w	r2, #97	; 0x61
     e48:	d101      	bne.n	e4e <__aeabi_f2uiz+0x32>
     e4a:	0242      	lsls	r2, r0, #9
     e4c:	d102      	bne.n	e54 <__aeabi_f2uiz+0x38>
     e4e:	f04f 30ff 	mov.w	r0, #4294967295
     e52:	4770      	bx	lr
     e54:	f04f 0000 	mov.w	r0, #0
     e58:	4770      	bx	lr
     e5a:	bf00      	nop

00000e5c <__aeabi_uldivmod>:
     e5c:	b953      	cbnz	r3, e74 <__aeabi_uldivmod+0x18>
     e5e:	b94a      	cbnz	r2, e74 <__aeabi_uldivmod+0x18>
     e60:	2900      	cmp	r1, #0
     e62:	bf08      	it	eq
     e64:	2800      	cmpeq	r0, #0
     e66:	bf1c      	itt	ne
     e68:	f04f 31ff 	movne.w	r1, #4294967295
     e6c:	f04f 30ff 	movne.w	r0, #4294967295
     e70:	f000 b80c 	b.w	e8c <__aeabi_idiv0>
     e74:	f1ad 0c08 	sub.w	ip, sp, #8
     e78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e7c:	f00b fc7e 	bl	c77c <__udivmoddi4>
     e80:	f8dd e004 	ldr.w	lr, [sp, #4]
     e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e88:	b004      	add	sp, #16
     e8a:	4770      	bx	lr

00000e8c <__aeabi_idiv0>:
     e8c:	4770      	bx	lr
     e8e:	bf00      	nop

00000e90 <ocrypto_bigint_add256>:
     e90:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e94:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     e98:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e9c:	185b      	adds	r3, r3, r1
     e9e:	eb54 040c 	adcs.w	r4, r4, ip
     ea2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ea6:	414d      	adcs	r5, r1
     ea8:	eb56 060c 	adcs.w	r6, r6, ip
     eac:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     eb0:	414f      	adcs	r7, r1
     eb2:	eb58 080c 	adcs.w	r8, r8, ip
     eb6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     eba:	eb59 0901 	adcs.w	r9, r9, r1
     ebe:	eb5a 0a0c 	adcs.w	sl, sl, ip
     ec2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     ec6:	4180      	sbcs	r0, r0
     ec8:	3001      	adds	r0, #1
     eca:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ece:	4770      	bx	lr

00000ed0 <ocrypto_bigint_sub256>:
     ed0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     ed4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     ed8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     edc:	1a5b      	subs	r3, r3, r1
     ede:	eb74 040c 	sbcs.w	r4, r4, ip
     ee2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ee6:	418d      	sbcs	r5, r1
     ee8:	eb76 060c 	sbcs.w	r6, r6, ip
     eec:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ef0:	418f      	sbcs	r7, r1
     ef2:	eb78 080c 	sbcs.w	r8, r8, ip
     ef6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     efa:	eb79 0901 	sbcs.w	r9, r9, r1
     efe:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     f02:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     f06:	4180      	sbcs	r0, r0
     f08:	4240      	negs	r0, r0
     f0a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f0e:	4770      	bx	lr

00000f10 <ocrypto_bigint_cadd256>:
     f10:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f14:	4252      	negs	r2, r2
     f16:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     f1a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     f1e:	4017      	ands	r7, r2
     f20:	19db      	adds	r3, r3, r7
     f22:	ea18 0802 	ands.w	r8, r8, r2
     f26:	eb54 0408 	adcs.w	r4, r4, r8
     f2a:	ea19 0902 	ands.w	r9, r9, r2
     f2e:	eb55 0509 	adcs.w	r5, r5, r9
     f32:	ea1a 0a02 	ands.w	sl, sl, r2
     f36:	eb56 060a 	adcs.w	r6, r6, sl
     f3a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     f3c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     f40:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     f44:	4017      	ands	r7, r2
     f46:	417b      	adcs	r3, r7
     f48:	ea18 0802 	ands.w	r8, r8, r2
     f4c:	eb54 0408 	adcs.w	r4, r4, r8
     f50:	ea19 0902 	ands.w	r9, r9, r2
     f54:	eb55 0509 	adcs.w	r5, r5, r9
     f58:	ea1a 0a02 	ands.w	sl, sl, r2
     f5c:	eb56 060a 	adcs.w	r6, r6, sl
     f60:	c078      	stmia	r0!, {r3, r4, r5, r6}
     f62:	4180      	sbcs	r0, r0
     f64:	3001      	adds	r0, #1
     f66:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f6a:	4770      	bx	lr

00000f6c <ocrypto_bigint_csub256>:
     f6c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     f70:	4252      	negs	r2, r2
     f72:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     f76:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     f7a:	4017      	ands	r7, r2
     f7c:	1bdb      	subs	r3, r3, r7
     f7e:	ea18 0802 	ands.w	r8, r8, r2
     f82:	eb74 0408 	sbcs.w	r4, r4, r8
     f86:	ea19 0902 	ands.w	r9, r9, r2
     f8a:	eb75 0509 	sbcs.w	r5, r5, r9
     f8e:	ea1a 0a02 	ands.w	sl, sl, r2
     f92:	eb76 060a 	sbcs.w	r6, r6, sl
     f96:	c078      	stmia	r0!, {r3, r4, r5, r6}
     f98:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     f9c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     fa0:	4017      	ands	r7, r2
     fa2:	41bb      	sbcs	r3, r7
     fa4:	ea18 0802 	ands.w	r8, r8, r2
     fa8:	eb74 0408 	sbcs.w	r4, r4, r8
     fac:	ea19 0902 	ands.w	r9, r9, r2
     fb0:	eb75 0509 	sbcs.w	r5, r5, r9
     fb4:	ea1a 0a02 	ands.w	sl, sl, r2
     fb8:	eb76 060a 	sbcs.w	r6, r6, sl
     fbc:	c078      	stmia	r0!, {r3, r4, r5, r6}
     fbe:	4180      	sbcs	r0, r0
     fc0:	4240      	negs	r0, r0
     fc2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     fc6:	4770      	bx	lr

00000fc8 <ocrypto_bigint_cswap256>:
     fc8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     fcc:	4252      	negs	r2, r2
     fce:	f04f 0804 	mov.w	r8, #4

00000fd2 <cswap256_loop>:
     fd2:	e890 0030 	ldmia.w	r0, {r4, r5}
     fd6:	e891 00c0 	ldmia.w	r1, {r6, r7}
     fda:	1ba3      	subs	r3, r4, r6
     fdc:	4013      	ands	r3, r2
     fde:	1ae4      	subs	r4, r4, r3
     fe0:	18f6      	adds	r6, r6, r3
     fe2:	1beb      	subs	r3, r5, r7
     fe4:	4013      	ands	r3, r2
     fe6:	1aed      	subs	r5, r5, r3
     fe8:	18ff      	adds	r7, r7, r3
     fea:	c030      	stmia	r0!, {r4, r5}
     fec:	c1c0      	stmia	r1!, {r6, r7}
     fee:	f1b8 0801 	subs.w	r8, r8, #1
     ff2:	d1ee      	bne.n	fd2 <cswap256_loop>
     ff4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <ocrypto_mul256_noframe>:
     ffc:	b500      	push	{lr}
     ffe:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
    1002:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
    1006:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
    100a:	b402      	push	{r1}
    100c:	fba7 5102 	umull	r5, r1, r7, r2
    1010:	950a      	str	r5, [sp, #40]	; 0x28
    1012:	fba8 0b02 	umull	r0, fp, r8, r2
    1016:	fbe7 1063 	umaal	r1, r0, r7, r3
    101a:	fbe9 b062 	umaal	fp, r0, r9, r2
    101e:	910b      	str	r1, [sp, #44]	; 0x2c
    1020:	fba8 5103 	umull	r5, r1, r8, r3
    1024:	fbea 0162 	umaal	r0, r1, sl, r2
    1028:	fbe7 b564 	umaal	fp, r5, r7, r4
    102c:	fbe7 0566 	umaal	r0, r5, r7, r6
    1030:	fbe8 1566 	umaal	r1, r5, r8, r6
    1034:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    1038:	fba9 b603 	umull	fp, r6, r9, r3
    103c:	fbea 1663 	umaal	r1, r6, sl, r3
    1040:	fbec 5663 	umaal	r5, r6, ip, r3
    1044:	fbe8 0b64 	umaal	r0, fp, r8, r4
    1048:	fbe9 1b64 	umaal	r1, fp, r9, r4
    104c:	fbea 5b64 	umaal	r5, fp, sl, r4
    1050:	fbec 6b64 	umaal	r6, fp, ip, r4
    1054:	900d      	str	r0, [sp, #52]	; 0x34
    1056:	fbac 3002 	umull	r3, r0, ip, r2
    105a:	9c05      	ldr	r4, [sp, #20]
    105c:	fbee 5062 	umaal	r5, r0, lr, r2
    1060:	fbe9 6064 	umaal	r6, r0, r9, r4
    1064:	fbea b064 	umaal	fp, r0, sl, r4
    1068:	fbe7 3164 	umaal	r3, r1, r7, r4
    106c:	fbe8 5164 	umaal	r5, r1, r8, r4
    1070:	9c06      	ldr	r4, [sp, #24]
    1072:	fbe8 6164 	umaal	r6, r1, r8, r4
    1076:	fbe9 b164 	umaal	fp, r1, r9, r4
    107a:	fbea 0164 	umaal	r0, r1, sl, r4
    107e:	930e      	str	r3, [sp, #56]	; 0x38
    1080:	fba7 3204 	umull	r3, r2, r7, r4
    1084:	9c07      	ldr	r4, [sp, #28]
    1086:	fbe7 6264 	umaal	r6, r2, r7, r4
    108a:	fbe8 b264 	umaal	fp, r2, r8, r4
    108e:	fbe9 0264 	umaal	r0, r2, r9, r4
    1092:	fbea 1264 	umaal	r1, r2, sl, r4
    1096:	9c04      	ldr	r4, [sp, #16]
    1098:	fbe9 5364 	umaal	r5, r3, r9, r4
    109c:	fbea 6364 	umaal	r6, r3, sl, r4
    10a0:	9c08      	ldr	r4, [sp, #32]
    10a2:	fbe7 b364 	umaal	fp, r3, r7, r4
    10a6:	fbe8 0364 	umaal	r0, r3, r8, r4
    10aa:	fbe9 1364 	umaal	r1, r3, r9, r4
    10ae:	fbea 2364 	umaal	r2, r3, sl, r4
    10b2:	950f      	str	r5, [sp, #60]	; 0x3c
    10b4:	f85d 9b04 	ldr.w	r9, [sp], #4
    10b8:	e899 0600 	ldmia.w	r9, {r9, sl}
    10bc:	f8dd 8000 	ldr.w	r8, [sp]
    10c0:	fba9 5408 	umull	r5, r4, r9, r8
    10c4:	fbea b468 	umaal	fp, r4, sl, r8
    10c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
    10cc:	fbec 0468 	umaal	r0, r4, ip, r8
    10d0:	fbee 1468 	umaal	r1, r4, lr, r8
    10d4:	fbe9 2468 	umaal	r2, r4, r9, r8
    10d8:	fbea 3468 	umaal	r3, r4, sl, r8
    10dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
    10e0:	fbee 6568 	umaal	r6, r5, lr, r8
    10e4:	fbe9 b568 	umaal	fp, r5, r9, r8
    10e8:	fbea 0568 	umaal	r0, r5, sl, r8
    10ec:	f8dd 8014 	ldr.w	r8, [sp, #20]
    10f0:	fbec 1568 	umaal	r1, r5, ip, r8
    10f4:	fbee 2568 	umaal	r2, r5, lr, r8
    10f8:	fbe9 3568 	umaal	r3, r5, r9, r8
    10fc:	fbea 4568 	umaal	r4, r5, sl, r8
    1100:	960f      	str	r6, [sp, #60]	; 0x3c
    1102:	f8dd 8008 	ldr.w	r8, [sp, #8]
    1106:	fbae 7608 	umull	r7, r6, lr, r8
    110a:	fbe9 0668 	umaal	r0, r6, r9, r8
    110e:	fbea 1668 	umaal	r1, r6, sl, r8
    1112:	f8dd 8018 	ldr.w	r8, [sp, #24]
    1116:	fbec 2668 	umaal	r2, r6, ip, r8
    111a:	fbee 3668 	umaal	r3, r6, lr, r8
    111e:	fbe9 4668 	umaal	r4, r6, r9, r8
    1122:	fbea 5668 	umaal	r5, r6, sl, r8
    1126:	f8dd 800c 	ldr.w	r8, [sp, #12]
    112a:	fbec b768 	umaal	fp, r7, ip, r8
    112e:	fbee 0768 	umaal	r0, r7, lr, r8
    1132:	fbe9 1768 	umaal	r1, r7, r9, r8
    1136:	fbea 2768 	umaal	r2, r7, sl, r8
    113a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    113e:	fbec 3768 	umaal	r3, r7, ip, r8
    1142:	fbee 4768 	umaal	r4, r7, lr, r8
    1146:	fbe9 5768 	umaal	r5, r7, r9, r8
    114a:	fbea 6768 	umaal	r6, r7, sl, r8
    114e:	b008      	add	sp, #32
    1150:	bd00      	pop	{pc}
    1152:	bf00      	nop

00001154 <ocrypto_bigint_mul256>:
    1154:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1158:	b087      	sub	sp, #28
    115a:	f7ff ff4f 	bl	ffc <ocrypto_mul256_noframe>
    115e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    1162:	f108 0820 	add.w	r8, r8, #32
    1166:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    116a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    116c:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    1170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001174 <ocrypto_sqr256_noframe>:
    1174:	b500      	push	{lr}
    1176:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
    117a:	fba3 5203 	umull	r5, r2, r3, r3
    117e:	9501      	str	r5, [sp, #4]
    1180:	fba3 0104 	umull	r0, r1, r3, r4
    1184:	fbe3 2064 	umaal	r2, r0, r3, r4
    1188:	fbe3 1067 	umaal	r1, r0, r3, r7
    118c:	9202      	str	r2, [sp, #8]
    118e:	fba3 5207 	umull	r5, r2, r3, r7
    1192:	fbe3 0268 	umaal	r0, r2, r3, r8
    1196:	fbe4 1564 	umaal	r1, r5, r4, r4
    119a:	fbe3 0568 	umaal	r0, r5, r3, r8
    119e:	fbe3 2569 	umaal	r2, r5, r3, r9
    11a2:	9103      	str	r1, [sp, #12]
    11a4:	fba4 b607 	umull	fp, r6, r4, r7
    11a8:	fbe3 2669 	umaal	r2, r6, r3, r9
    11ac:	fbe3 566a 	umaal	r5, r6, r3, sl
    11b0:	fbe4 0b67 	umaal	r0, fp, r4, r7
    11b4:	fbe4 2b68 	umaal	r2, fp, r4, r8
    11b8:	fbe3 5b6a 	umaal	r5, fp, r3, sl
    11bc:	fbe3 6b6c 	umaal	r6, fp, r3, ip
    11c0:	9004      	str	r0, [sp, #16]
    11c2:	fba4 1008 	umull	r1, r0, r4, r8
    11c6:	fbe4 5069 	umaal	r5, r0, r4, r9
    11ca:	fbe3 606c 	umaal	r6, r0, r3, ip
    11ce:	fbe3 b06e 	umaal	fp, r0, r3, lr
    11d2:	fbe7 2167 	umaal	r2, r1, r7, r7
    11d6:	fbe4 5169 	umaal	r5, r1, r4, r9
    11da:	fbe4 616a 	umaal	r6, r1, r4, sl
    11de:	fbe3 b16e 	umaal	fp, r1, r3, lr
    11e2:	fbe4 016e 	umaal	r0, r1, r4, lr
    11e6:	9205      	str	r2, [sp, #20]
    11e8:	fba7 3208 	umull	r3, r2, r7, r8
    11ec:	fbe4 626a 	umaal	r6, r2, r4, sl
    11f0:	fbe4 b26c 	umaal	fp, r2, r4, ip
    11f4:	fbe4 026e 	umaal	r0, r2, r4, lr
    11f8:	fbe7 126e 	umaal	r1, r2, r7, lr
    11fc:	fbe7 5368 	umaal	r5, r3, r7, r8
    1200:	fbe7 6369 	umaal	r6, r3, r7, r9
    1204:	fbe4 b36c 	umaal	fp, r3, r4, ip
    1208:	fbe7 036c 	umaal	r0, r3, r7, ip
    120c:	fbe7 136e 	umaal	r1, r3, r7, lr
    1210:	fbe8 236e 	umaal	r2, r3, r8, lr
    1214:	9506      	str	r5, [sp, #24]
    1216:	fba7 5409 	umull	r5, r4, r7, r9
    121a:	fbe7 b46a 	umaal	fp, r4, r7, sl
    121e:	fbe7 046c 	umaal	r0, r4, r7, ip
    1222:	fbe8 146c 	umaal	r1, r4, r8, ip
    1226:	fbe8 246e 	umaal	r2, r4, r8, lr
    122a:	fbe9 346e 	umaal	r3, r4, r9, lr
    122e:	fbe8 6568 	umaal	r6, r5, r8, r8
    1232:	fbe7 b56a 	umaal	fp, r5, r7, sl
    1236:	fbe8 056a 	umaal	r0, r5, r8, sl
    123a:	fbe8 156c 	umaal	r1, r5, r8, ip
    123e:	fbe9 256c 	umaal	r2, r5, r9, ip
    1242:	fbe9 356e 	umaal	r3, r5, r9, lr
    1246:	fbea 456e 	umaal	r4, r5, sl, lr
    124a:	9607      	str	r6, [sp, #28]
    124c:	fba8 7609 	umull	r7, r6, r8, r9
    1250:	fbe8 066a 	umaal	r0, r6, r8, sl
    1254:	fbe9 166a 	umaal	r1, r6, r9, sl
    1258:	fbe9 266c 	umaal	r2, r6, r9, ip
    125c:	fbea 366c 	umaal	r3, r6, sl, ip
    1260:	fbea 466e 	umaal	r4, r6, sl, lr
    1264:	fbec 566e 	umaal	r5, r6, ip, lr
    1268:	fbe8 b769 	umaal	fp, r7, r8, r9
    126c:	fbe9 0769 	umaal	r0, r7, r9, r9
    1270:	fbe9 176a 	umaal	r1, r7, r9, sl
    1274:	fbea 276a 	umaal	r2, r7, sl, sl
    1278:	fbea 376c 	umaal	r3, r7, sl, ip
    127c:	fbec 476c 	umaal	r4, r7, ip, ip
    1280:	fbec 576e 	umaal	r5, r7, ip, lr
    1284:	fbee 676e 	umaal	r6, r7, lr, lr
    1288:	bd00      	pop	{pc}
    128a:	bf00      	nop

0000128c <ocrypto_bigint_sqr256>:
    128c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1290:	b087      	sub	sp, #28
    1292:	f7ff ff6f 	bl	1174 <ocrypto_sqr256_noframe>
    1296:	f8dd 801c 	ldr.w	r8, [sp, #28]
    129a:	f108 0820 	add.w	r8, r8, #32
    129e:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    12a2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    12a4:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
    12a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000012ac <ocrypto_constant_time_equal>:
    12ac:	b430      	push	{r4, r5}
    12ae:	f04f 0300 	mov.w	r3, #0

000012b2 <constant_time_equal_loop>:
    12b2:	f810 4b01 	ldrb.w	r4, [r0], #1
    12b6:	f811 5b01 	ldrb.w	r5, [r1], #1
    12ba:	3a01      	subs	r2, #1
    12bc:	ea84 0405 	eor.w	r4, r4, r5
    12c0:	ea43 0304 	orr.w	r3, r3, r4
    12c4:	d1f5      	bne.n	12b2 <constant_time_equal_loop>
    12c6:	f1a3 0301 	sub.w	r3, r3, #1
    12ca:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    12ce:	bc30      	pop	{r4, r5}
    12d0:	4770      	bx	lr
    12d2:	bf00      	nop

000012d4 <ocrypto_constant_time_is_zero>:
    12d4:	f04f 0300 	mov.w	r3, #0

000012d8 <constant_time_is_zero_loop>:
    12d8:	f810 2b01 	ldrb.w	r2, [r0], #1
    12dc:	3901      	subs	r1, #1
    12de:	ea43 0302 	orr.w	r3, r3, r2
    12e2:	d1f9      	bne.n	12d8 <constant_time_is_zero_loop>
    12e4:	f1a3 0301 	sub.w	r3, r3, #1
    12e8:	ea4f 70d3 	mov.w	r0, r3, lsr #31
    12ec:	4770      	bx	lr
    12ee:	bf00      	nop

000012f0 <ocrypto_constant_time_xor>:
    12f0:	b430      	push	{r4, r5}

000012f2 <constant_time_xor_loop>:
    12f2:	f811 4b01 	ldrb.w	r4, [r1], #1
    12f6:	f812 5b01 	ldrb.w	r5, [r2], #1
    12fa:	406c      	eors	r4, r5
    12fc:	f800 4b01 	strb.w	r4, [r0], #1
    1300:	3b01      	subs	r3, #1
    1302:	d1f6      	bne.n	12f2 <constant_time_xor_loop>
    1304:	bc30      	pop	{r4, r5}
    1306:	4770      	bx	lr

00001308 <ocrypto_mod_p256_add>:
    1308:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    130c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1310:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1314:	185b      	adds	r3, r3, r1
    1316:	eb54 040c 	adcs.w	r4, r4, ip
    131a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    131e:	414d      	adcs	r5, r1
    1320:	eb56 060c 	adcs.w	r6, r6, ip
    1324:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1328:	414f      	adcs	r7, r1
    132a:	eb58 080c 	adcs.w	r8, r8, ip
    132e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1332:	eb59 0901 	adcs.w	r9, r9, r1
    1336:	eb5a 0a0c 	adcs.w	sl, sl, ip
    133a:	4189      	sbcs	r1, r1
    133c:	f1b3 33ff 	subs.w	r3, r3, #4294967295
    1340:	f174 34ff 	sbcs.w	r4, r4, #4294967295
    1344:	f175 35ff 	sbcs.w	r5, r5, #4294967295
    1348:	f176 0600 	sbcs.w	r6, r6, #0
    134c:	f177 0700 	sbcs.w	r7, r7, #0
    1350:	f178 0800 	sbcs.w	r8, r8, #0
    1354:	f179 0901 	sbcs.w	r9, r9, #1
    1358:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
    135c:	f151 0100 	adcs.w	r1, r1, #0
    1360:	185b      	adds	r3, r3, r1
    1362:	414c      	adcs	r4, r1
    1364:	414d      	adcs	r5, r1
    1366:	f156 0600 	adcs.w	r6, r6, #0
    136a:	f157 0700 	adcs.w	r7, r7, #0
    136e:	f158 0800 	adcs.w	r8, r8, #0
    1372:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1376:	eb5a 0a01 	adcs.w	sl, sl, r1
    137a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    137e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1382:	4770      	bx	lr

00001384 <ocrypto_mod_p256_sub>:
    1384:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1388:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    138c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1390:	1a5b      	subs	r3, r3, r1
    1392:	eb74 040c 	sbcs.w	r4, r4, ip
    1396:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    139a:	418d      	sbcs	r5, r1
    139c:	eb76 060c 	sbcs.w	r6, r6, ip
    13a0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    13a4:	418f      	sbcs	r7, r1
    13a6:	eb78 080c 	sbcs.w	r8, r8, ip
    13aa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    13ae:	eb79 0901 	sbcs.w	r9, r9, r1
    13b2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    13b6:	4189      	sbcs	r1, r1
    13b8:	185b      	adds	r3, r3, r1
    13ba:	414c      	adcs	r4, r1
    13bc:	414d      	adcs	r5, r1
    13be:	f156 0600 	adcs.w	r6, r6, #0
    13c2:	f157 0700 	adcs.w	r7, r7, #0
    13c6:	f158 0800 	adcs.w	r8, r8, #0
    13ca:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    13ce:	eb5a 0a01 	adcs.w	sl, sl, r1
    13d2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    13d6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    13da:	4770      	bx	lr

000013dc <mul_reduce>:
    13dc:	eb18 0804 	adds.w	r8, r8, r4
    13e0:	eb59 0905 	adcs.w	r9, r9, r5
    13e4:	eb5a 0a06 	adcs.w	sl, sl, r6
    13e8:	eb5b 0b07 	adcs.w	fp, fp, r7
    13ec:	f05f 0c00 	movs.w	ip, #0
    13f0:	f14c 0c00 	adc.w	ip, ip, #0
    13f4:	eb18 0805 	adds.w	r8, r8, r5
    13f8:	eb59 0906 	adcs.w	r9, r9, r6
    13fc:	eb5a 0a07 	adcs.w	sl, sl, r7
    1400:	eb5b 0b07 	adcs.w	fp, fp, r7
    1404:	eb50 000c 	adcs.w	r0, r0, ip
    1408:	f05f 0c00 	movs.w	ip, #0
    140c:	eb51 010c 	adcs.w	r1, r1, ip
    1410:	eb52 020c 	adcs.w	r2, r2, ip
    1414:	4163      	adcs	r3, r4
    1416:	f14c 0c00 	adc.w	ip, ip, #0
    141a:	ebb8 0807 	subs.w	r8, r8, r7
    141e:	f179 0900 	sbcs.w	r9, r9, #0
    1422:	f17a 0a00 	sbcs.w	sl, sl, #0
    1426:	eb7b 0b04 	sbcs.w	fp, fp, r4
    142a:	41a8      	sbcs	r0, r5
    142c:	41b1      	sbcs	r1, r6
    142e:	41a2      	sbcs	r2, r4
    1430:	41b3      	sbcs	r3, r6
    1432:	f16c 0c00 	sbc.w	ip, ip, #0
    1436:	ebbb 0b05 	subs.w	fp, fp, r5
    143a:	41b0      	sbcs	r0, r6
    143c:	41b9      	sbcs	r1, r7
    143e:	41aa      	sbcs	r2, r5
    1440:	41bb      	sbcs	r3, r7
    1442:	f16c 0c00 	sbc.w	ip, ip, #0
    1446:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    144a:	ebb8 0804 	subs.w	r8, r8, r4
    144e:	eb79 0904 	sbcs.w	r9, r9, r4
    1452:	eb7a 0a04 	sbcs.w	sl, sl, r4
    1456:	f17b 0b00 	sbcs.w	fp, fp, #0
    145a:	f170 0000 	sbcs.w	r0, r0, #0
    145e:	f171 0100 	sbcs.w	r1, r1, #0
    1462:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    1466:	41a3      	sbcs	r3, r4
    1468:	f16c 0c00 	sbc.w	ip, ip, #0
    146c:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1470:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    1474:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    1478:	f15b 0b00 	adcs.w	fp, fp, #0
    147c:	f150 0400 	adcs.w	r4, r0, #0
    1480:	f151 0500 	adcs.w	r5, r1, #0
    1484:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    1488:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    148c:	f14c 0c00 	adc.w	ip, ip, #0
    1490:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    1494:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    1498:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    149c:	f15b 0300 	adcs.w	r3, fp, #0
    14a0:	f154 0400 	adcs.w	r4, r4, #0
    14a4:	f155 0500 	adcs.w	r5, r5, #0
    14a8:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    14ac:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    14b0:	4770      	bx	lr
    14b2:	bf00      	nop

000014b4 <ocrypto_mod_p256_mul>:
    14b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b8:	b087      	sub	sp, #28
    14ba:	f7ff fd9f 	bl	ffc <ocrypto_mul256_noframe>
    14be:	f8dd 8010 	ldr.w	r8, [sp, #16]
    14c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
    14c6:	f8dd a018 	ldr.w	sl, [sp, #24]
    14ca:	f7ff ff87 	bl	13dc <mul_reduce>
    14ce:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    14d2:	f7ff ff83 	bl	13dc <mul_reduce>
    14d6:	b003      	add	sp, #12
    14d8:	f85d 8b04 	ldr.w	r8, [sp], #4
    14dc:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    14e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000014e4 <ocrypto_mod_p256_sqr>:
    14e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14e8:	b087      	sub	sp, #28
    14ea:	f7ff fe43 	bl	1174 <ocrypto_sqr256_noframe>
    14ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
    14f2:	f8dd 9014 	ldr.w	r9, [sp, #20]
    14f6:	f8dd a018 	ldr.w	sl, [sp, #24]
    14fa:	f7ff ff6f 	bl	13dc <mul_reduce>
    14fe:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    1502:	f7ff ff6b 	bl	13dc <mul_reduce>
    1506:	b003      	add	sp, #12
    1508:	f85d 8b04 	ldr.w	r8, [sp], #4
    150c:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001514 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1516:	4615      	mov	r5, r2
    1518:	4a0a      	ldr	r2, [pc, #40]	; (1544 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    151a:	461c      	mov	r4, r3
    151c:	6856      	ldr	r6, [r2, #4]
    151e:	b12e      	cbz	r6, 152c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1520:	b001      	add	sp, #4
    1522:	462a      	mov	r2, r5
    1524:	46b4      	mov	ip, r6
    1526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    152a:	4760      	bx	ip
    152c:	2000      	movs	r0, #0
    152e:	f88d 0000 	strb.w	r0, [sp]
    1532:	4668      	mov	r0, sp
    1534:	f00b fa87 	bl	ca46 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1538:	f89d 0000 	ldrb.w	r0, [sp]
    153c:	1a28      	subs	r0, r5, r0
    153e:	7020      	strb	r0, [r4, #0]
    1540:	2000      	movs	r0, #0
    1542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1544:	20000008 	.word	0x20000008

00001548 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1548:	4801      	ldr	r0, [pc, #4]	; (1550 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    154a:	7800      	ldrb	r0, [r0, #0]
    154c:	4770      	bx	lr
    154e:	0000      	.short	0x0000
    1550:	20000010 	.word	0x20000010

00001554 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1554:	4905      	ldr	r1, [pc, #20]	; (156c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1556:	780a      	ldrb	r2, [r1, #0]
    1558:	4290      	cmp	r0, r2
    155a:	d301      	bcc.n	1560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    155c:	2000      	movs	r0, #0
    155e:	4770      	bx	lr
    1560:	6849      	ldr	r1, [r1, #4]
    1562:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1566:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    156a:	4770      	bx	lr
    156c:	20000010 	.word	0x20000010
    1570:	b570      	push	{r4, r5, r6, lr}
    1572:	4605      	mov	r5, r0
    1574:	2a20      	cmp	r2, #32
    1576:	d027      	beq.n	15c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1578:	4819      	ldr	r0, [pc, #100]	; (15e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    157a:	4c1a      	ldr	r4, [pc, #104]	; (15e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    157c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1580:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1588:	2920      	cmp	r1, #32
    158a:	d022      	beq.n	15d2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    158c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1590:	7840      	ldrb	r0, [r0, #1]
    1592:	784c      	ldrb	r4, [r1, #1]
    1594:	7048      	strb	r0, [r1, #1]
    1596:	4620      	mov	r0, r4
    1598:	4601      	mov	r1, r0
    159a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    159e:	4291      	cmp	r1, r2
    15a0:	7005      	strb	r5, [r0, #0]
    15a2:	7840      	ldrb	r0, [r0, #1]
    15a4:	d1f8      	bne.n	1598 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    15a6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    15aa:	2a20      	cmp	r2, #32
    15ac:	bf1a      	itte	ne
    15ae:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    15b2:	7054      	strbne	r4, [r2, #1]
    15b4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    15b8:	2220      	movs	r2, #32
    15ba:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    15be:	f88c 2001 	strb.w	r2, [ip, #1]
    15c2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    15c6:	bd70      	pop	{r4, r5, r6, pc}
    15c8:	f240 218a 	movw	r1, #650	; 0x28a
    15cc:	2070      	movs	r0, #112	; 0x70
    15ce:	f003 f94d 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d2:	f893 4020 	ldrb.w	r4, [r3, #32]
    15d6:	7840      	ldrb	r0, [r0, #1]
    15d8:	f883 0020 	strb.w	r0, [r3, #32]
    15dc:	e7db      	b.n	1596 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    15de:	0000      	.short	0x0000
    15e0:	20001000 	.word	0x20001000
    15e4:	20001080 	.word	0x20001080
    15e8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15ec:	b085      	sub	sp, #20
    15ee:	4615      	mov	r5, r2
    15f0:	460c      	mov	r4, r1
    15f2:	f002 f8dd 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15f6:	4428      	add	r0, r5
    15f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15fc:	9002      	str	r0, [sp, #8]
    15fe:	6821      	ldr	r1, [r4, #0]
    1600:	1a08      	subs	r0, r1, r0
    1602:	0200      	lsls	r0, r0, #8
    1604:	17c1      	asrs	r1, r0, #31
    1606:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    160a:	1200      	asrs	r0, r0, #8
    160c:	2800      	cmp	r0, #0
    160e:	f300 80d5 	bgt.w	17bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    1612:	48ac      	ldr	r0, [pc, #688]	; (18c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    1614:	9f08      	ldr	r7, [sp, #32]
    1616:	4eac      	ldr	r6, [pc, #688]	; (18c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    1618:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    161c:	9003      	str	r0, [sp, #12]
    161e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1622:	2020      	movs	r0, #32
    1624:	46e9      	mov	r9, sp
    1626:	f10d 0804 	add.w	r8, sp, #4
    162a:	f88d 0000 	strb.w	r0, [sp]
    162e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1632:	2d20      	cmp	r5, #32
    1634:	bf18      	it	ne
    1636:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    163a:	d025      	beq.n	1688 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    163c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1640:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1644:	6822      	ldr	r2, [r4, #0]
    1646:	68c1      	ldr	r1, [r0, #12]
    1648:	1a51      	subs	r1, r2, r1
    164a:	0209      	lsls	r1, r1, #8
    164c:	17ca      	asrs	r2, r1, #31
    164e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1652:	3008      	adds	r0, #8
    1654:	1209      	asrs	r1, r1, #8
    1656:	d417      	bmi.n	1688 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1658:	8961      	ldrh	r1, [r4, #10]
    165a:	b171      	cbz	r1, 167a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    165c:	8941      	ldrh	r1, [r0, #10]
    165e:	b961      	cbnz	r1, 167a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1660:	f000 fda6 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    1664:	f002 f8a4 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1668:	6821      	ldr	r1, [r4, #0]
    166a:	1a08      	subs	r0, r1, r0
    166c:	0200      	lsls	r0, r0, #8
    166e:	17c1      	asrs	r1, r0, #31
    1670:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1674:	1200      	asrs	r0, r0, #8
    1676:	2833      	cmp	r0, #51	; 0x33
    1678:	db06      	blt.n	1688 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    167a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    167e:	f889 5000 	strb.w	r5, [r9]
    1682:	7845      	ldrb	r5, [r0, #1]
    1684:	2d20      	cmp	r5, #32
    1686:	d1d9      	bne.n	163c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1688:	f899 0000 	ldrb.w	r0, [r9]
    168c:	f888 0000 	strb.w	r0, [r8]
    1690:	46a1      	mov	r9, r4
    1692:	2d20      	cmp	r5, #32
    1694:	bf1c      	itt	ne
    1696:	488d      	ldrne	r0, [pc, #564]	; (18cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1698:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    169c:	f000 810e 	beq.w	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16a0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    16a4:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    16a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    16ac:	f8da 1008 	ldr.w	r1, [sl, #8]
    16b0:	4648      	mov	r0, r9
    16b2:	1a89      	subs	r1, r1, r2
    16b4:	0209      	lsls	r1, r1, #8
    16b6:	17ca      	asrs	r2, r1, #31
    16b8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16bc:	f10a 0708 	add.w	r7, sl, #8
    16c0:	1209      	asrs	r1, r1, #8
    16c2:	d415      	bmi.n	16f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    16c4:	8979      	ldrh	r1, [r7, #10]
    16c6:	2900      	cmp	r1, #0
    16c8:	f000 80f8 	beq.w	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16cc:	8941      	ldrh	r1, [r0, #10]
    16ce:	2900      	cmp	r1, #0
    16d0:	f040 80f4 	bne.w	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16d4:	f000 fd6c 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    16d8:	f002 f86a 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16dc:	6839      	ldr	r1, [r7, #0]
    16de:	1a08      	subs	r0, r1, r0
    16e0:	0200      	lsls	r0, r0, #8
    16e2:	17c1      	asrs	r1, r0, #31
    16e4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    16e8:	1200      	asrs	r0, r0, #8
    16ea:	2833      	cmp	r0, #51	; 0x33
    16ec:	f280 80e6 	bge.w	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16f0:	f888 5000 	strb.w	r5, [r8]
    16f4:	f89a 1014 	ldrb.w	r1, [sl, #20]
    16f8:	f899 000c 	ldrb.w	r0, [r9, #12]
    16fc:	4281      	cmp	r1, r0
    16fe:	d906      	bls.n	170e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1700:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1704:	7845      	ldrb	r5, [r0, #1]
    1706:	2d20      	cmp	r5, #32
    1708:	d1ca      	bne.n	16a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    170a:	f000 b8d7 	b.w	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    170e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1712:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1716:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    171a:	8a68      	ldrh	r0, [r5, #18]
    171c:	68ef      	ldr	r7, [r5, #12]
    171e:	2800      	cmp	r0, #0
    1720:	d143      	bne.n	17aa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1722:	8960      	ldrh	r0, [r4, #10]
    1724:	b3e8      	cbz	r0, 17a2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1726:	68a8      	ldr	r0, [r5, #8]
    1728:	f00b f9ad 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    172c:	8a69      	ldrh	r1, [r5, #18]
    172e:	7c2a      	ldrb	r2, [r5, #16]
    1730:	4b67      	ldr	r3, [pc, #412]	; (18d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1732:	4411      	add	r1, r2
    1734:	1c49      	adds	r1, r1, #1
    1736:	1842      	adds	r2, r0, r1
    1738:	4298      	cmp	r0, r3
    173a:	d904      	bls.n	1746 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    173c:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1740:	2070      	movs	r0, #112	; 0x70
    1742:	f003 f893 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1746:	4863      	ldr	r0, [pc, #396]	; (18d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1748:	4281      	cmp	r1, r0
    174a:	dd04      	ble.n	1756 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    174c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1750:	2070      	movs	r0, #112	; 0x70
    1752:	f003 f88b 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1756:	4860      	ldr	r0, [pc, #384]	; (18d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1758:	4281      	cmp	r1, r0
    175a:	da04      	bge.n	1766 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    175c:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1760:	2070      	movs	r0, #112	; 0x70
    1762:	f003 f883 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1766:	485d      	ldr	r0, [pc, #372]	; (18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1768:	4290      	cmp	r0, r2
    176a:	bfdc      	itt	le
    176c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1770:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1774:	dd05      	ble.n	1782 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1776:	2a00      	cmp	r2, #0
    1778:	bfbc      	itt	lt
    177a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    177e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1782:	4610      	mov	r0, r2
    1784:	f002 f814 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1788:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    178c:	1a78      	subs	r0, r7, r1
    178e:	0200      	lsls	r0, r0, #8
    1790:	17c2      	asrs	r2, r0, #31
    1792:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1796:	1200      	asrs	r0, r0, #8
    1798:	2833      	cmp	r0, #51	; 0x33
    179a:	bfb8      	it	lt
    179c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    17a0:	e000      	b.n	17a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    17a2:	e002      	b.n	17aa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    17a4:	bfb8      	it	lt
    17a6:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    17aa:	9802      	ldr	r0, [sp, #8]
    17ac:	1a38      	subs	r0, r7, r0
    17ae:	0200      	lsls	r0, r0, #8
    17b0:	17c1      	asrs	r1, r0, #31
    17b2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    17b6:	1200      	asrs	r0, r0, #8
    17b8:	2800      	cmp	r0, #0
    17ba:	dd03      	ble.n	17c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    17bc:	b009      	add	sp, #36	; 0x24
    17be:	2000      	movs	r0, #0
    17c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17c4:	e9d4 1000 	ldrd	r1, r0, [r4]
    17c8:	1a40      	subs	r0, r0, r1
    17ca:	4438      	add	r0, r7
    17cc:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    17d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17d4:	e9c4 1000 	strd	r1, r0, [r4]
    17d8:	9803      	ldr	r0, [sp, #12]
    17da:	f8dd 8020 	ldr.w	r8, [sp, #32]
    17de:	466f      	mov	r7, sp
    17e0:	f890 5020 	ldrb.w	r5, [r0, #32]
    17e4:	2020      	movs	r0, #32
    17e6:	f10d 0a04 	add.w	sl, sp, #4
    17ea:	f88d 0000 	strb.w	r0, [sp]
    17ee:	2d20      	cmp	r5, #32
    17f0:	bf1c      	itt	ne
    17f2:	4836      	ldrne	r0, [pc, #216]	; (18cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    17f4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    17f8:	d025      	beq.n	1846 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    17fa:	bf00      	nop
    17fc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1800:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1804:	6822      	ldr	r2, [r4, #0]
    1806:	68c1      	ldr	r1, [r0, #12]
    1808:	1a51      	subs	r1, r2, r1
    180a:	0209      	lsls	r1, r1, #8
    180c:	17ca      	asrs	r2, r1, #31
    180e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1812:	3008      	adds	r0, #8
    1814:	1209      	asrs	r1, r1, #8
    1816:	d416      	bmi.n	1846 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1818:	8961      	ldrh	r1, [r4, #10]
    181a:	b171      	cbz	r1, 183a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    181c:	8941      	ldrh	r1, [r0, #10]
    181e:	b961      	cbnz	r1, 183a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1820:	f000 fcc6 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    1824:	f001 ffc4 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1828:	6821      	ldr	r1, [r4, #0]
    182a:	1a08      	subs	r0, r1, r0
    182c:	0200      	lsls	r0, r0, #8
    182e:	17c1      	asrs	r1, r0, #31
    1830:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1834:	1200      	asrs	r0, r0, #8
    1836:	2833      	cmp	r0, #51	; 0x33
    1838:	db05      	blt.n	1846 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    183a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    183e:	703d      	strb	r5, [r7, #0]
    1840:	7845      	ldrb	r5, [r0, #1]
    1842:	2d20      	cmp	r5, #32
    1844:	d1da      	bne.n	17fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1846:	7838      	ldrb	r0, [r7, #0]
    1848:	f88a 0000 	strb.w	r0, [sl]
    184c:	4627      	mov	r7, r4
    184e:	2d20      	cmp	r5, #32
    1850:	bf1c      	itt	ne
    1852:	481e      	ldrne	r0, [pc, #120]	; (18cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1854:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1858:	d030      	beq.n	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    185a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    185e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1862:	6879      	ldr	r1, [r7, #4]
    1864:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1868:	4638      	mov	r0, r7
    186a:	1a51      	subs	r1, r2, r1
    186c:	0209      	lsls	r1, r1, #8
    186e:	17ca      	asrs	r2, r1, #31
    1870:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1874:	f109 0808 	add.w	r8, r9, #8
    1878:	1209      	asrs	r1, r1, #8
    187a:	d412      	bmi.n	18a2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    187c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1880:	b1e1      	cbz	r1, 18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1882:	8941      	ldrh	r1, [r0, #10]
    1884:	b9d1      	cbnz	r1, 18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1886:	f000 fc93 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    188a:	f001 ff91 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    188e:	f8d8 1000 	ldr.w	r1, [r8]
    1892:	1a08      	subs	r0, r1, r0
    1894:	0200      	lsls	r0, r0, #8
    1896:	17c1      	asrs	r1, r0, #31
    1898:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    189c:	1200      	asrs	r0, r0, #8
    189e:	2833      	cmp	r0, #51	; 0x33
    18a0:	da0c      	bge.n	18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    18a2:	f88a 5000 	strb.w	r5, [sl]
    18a6:	f899 0014 	ldrb.w	r0, [r9, #20]
    18aa:	7b39      	ldrb	r1, [r7, #12]
    18ac:	4288      	cmp	r0, r1
    18ae:	f67f af2e 	bls.w	170e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    18b2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    18b6:	7845      	ldrb	r5, [r0, #1]
    18b8:	2d20      	cmp	r5, #32
    18ba:	d1ce      	bne.n	185a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    18bc:	b009      	add	sp, #36	; 0x24
    18be:	2001      	movs	r0, #1
    18c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18c4:	20001080 	.word	0x20001080
    18c8:	20000d00 	.word	0x20000d00
    18cc:	20001000 	.word	0x20001000
    18d0:	1e847fff 	.word	0x1e847fff
    18d4:	0f424000 	.word	0x0f424000
    18d8:	f0bdc000 	.word	0xf0bdc000
    18dc:	1e848000 	.word	0x1e848000
    18e0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    18e4:	4604      	mov	r4, r0
    18e6:	483c      	ldr	r0, [pc, #240]	; (19d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    18e8:	460e      	mov	r6, r1
    18ea:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    18ee:	4f3b      	ldr	r7, [pc, #236]	; (19dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    18f0:	f890 5020 	ldrb.w	r5, [r0, #32]
    18f4:	2020      	movs	r0, #32
    18f6:	4698      	mov	r8, r3
    18f8:	4692      	mov	sl, r2
    18fa:	7010      	strb	r0, [r2, #0]
    18fc:	f507 7940 	add.w	r9, r7, #768	; 0x300
    1900:	2d20      	cmp	r5, #32
    1902:	bf18      	it	ne
    1904:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1908:	d028      	beq.n	195c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    190a:	bf00      	nop
    190c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1910:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1914:	f100 0108 	add.w	r1, r0, #8
    1918:	68c0      	ldr	r0, [r0, #12]
    191a:	6822      	ldr	r2, [r4, #0]
    191c:	1a10      	subs	r0, r2, r0
    191e:	0200      	lsls	r0, r0, #8
    1920:	17c2      	asrs	r2, r0, #31
    1922:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1926:	1200      	asrs	r0, r0, #8
    1928:	d418      	bmi.n	195c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    192a:	8960      	ldrh	r0, [r4, #10]
    192c:	b178      	cbz	r0, 194e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    192e:	8948      	ldrh	r0, [r1, #10]
    1930:	b968      	cbnz	r0, 194e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1932:	4608      	mov	r0, r1
    1934:	f000 fc3c 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    1938:	f001 ff3a 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    193c:	6821      	ldr	r1, [r4, #0]
    193e:	1a08      	subs	r0, r1, r0
    1940:	0200      	lsls	r0, r0, #8
    1942:	17c1      	asrs	r1, r0, #31
    1944:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1948:	1200      	asrs	r0, r0, #8
    194a:	2833      	cmp	r0, #51	; 0x33
    194c:	db06      	blt.n	195c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    194e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1952:	f88a 5000 	strb.w	r5, [sl]
    1956:	7845      	ldrb	r5, [r0, #1]
    1958:	2d20      	cmp	r5, #32
    195a:	d1d7      	bne.n	190c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    195c:	f89a 0000 	ldrb.w	r0, [sl]
    1960:	f888 0000 	strb.w	r0, [r8]
    1964:	2d20      	cmp	r5, #32
    1966:	bf18      	it	ne
    1968:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    196c:	d030      	beq.n	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    196e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1972:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1976:	6861      	ldr	r1, [r4, #4]
    1978:	f8d9 2008 	ldr.w	r2, [r9, #8]
    197c:	4620      	mov	r0, r4
    197e:	1a51      	subs	r1, r2, r1
    1980:	0209      	lsls	r1, r1, #8
    1982:	17ca      	asrs	r2, r1, #31
    1984:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1988:	f109 0608 	add.w	r6, r9, #8
    198c:	1209      	asrs	r1, r1, #8
    198e:	d410      	bmi.n	19b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1990:	8971      	ldrh	r1, [r6, #10]
    1992:	b1e9      	cbz	r1, 19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1994:	8941      	ldrh	r1, [r0, #10]
    1996:	b9d9      	cbnz	r1, 19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1998:	f000 fc0a 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    199c:	f001 ff08 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    19a0:	6831      	ldr	r1, [r6, #0]
    19a2:	1a08      	subs	r0, r1, r0
    19a4:	0200      	lsls	r0, r0, #8
    19a6:	17c1      	asrs	r1, r0, #31
    19a8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19ac:	1200      	asrs	r0, r0, #8
    19ae:	2833      	cmp	r0, #51	; 0x33
    19b0:	da0e      	bge.n	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    19b2:	f888 5000 	strb.w	r5, [r8]
    19b6:	f899 0014 	ldrb.w	r0, [r9, #20]
    19ba:	7b21      	ldrb	r1, [r4, #12]
    19bc:	4288      	cmp	r0, r1
    19be:	d802      	bhi.n	19c6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    19c0:	2000      	movs	r0, #0
    19c2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19c6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    19ca:	7845      	ldrb	r5, [r0, #1]
    19cc:	2d20      	cmp	r5, #32
    19ce:	d1ce      	bne.n	196e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    19d0:	2001      	movs	r0, #1
    19d2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19d6:	0000      	.short	0x0000
    19d8:	20001080 	.word	0x20001080
    19dc:	20000d00 	.word	0x20000d00
    19e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19e4:	b096      	sub	sp, #88	; 0x58
    19e6:	4615      	mov	r5, r2
    19e8:	468a      	mov	sl, r1
    19ea:	2600      	movs	r6, #0
    19ec:	f002 f968 	bl	3cc0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    19f0:	4604      	mov	r4, r0
    19f2:	f1ba 0f01 	cmp.w	sl, #1
    19f6:	bf18      	it	ne
    19f8:	f1ba 0f02 	cmpne.w	sl, #2
    19fc:	d005      	beq.n	1a0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    19fe:	f640 1163 	movw	r1, #2403	; 0x963
    1a02:	f04f 0070 	mov.w	r0, #112	; 0x70
    1a06:	f002 ff31 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a0a:	49ff      	ldr	r1, [pc, #1020]	; (1e08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>)
    1a0c:	2001      	movs	r0, #1
    1a0e:	6008      	str	r0, [r1, #0]
    1a10:	49fe      	ldr	r1, [pc, #1016]	; (1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>)
    1a12:	68c9      	ldr	r1, [r1, #12]
    1a14:	6008      	str	r0, [r1, #0]
    1a16:	f04f 0b00 	mov.w	fp, #0
    1a1a:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
    1a1e:	1e80      	subs	r0, r0, #2
    1a20:	900c      	str	r0, [sp, #48]	; 0x30
    1a22:	49fb      	ldr	r1, [pc, #1004]	; (1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>)
    1a24:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1a28:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1a2c:	3308      	adds	r3, #8
    1a2e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    1a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1a34:	af0d      	add	r7, sp, #52	; 0x34
    1a36:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1a3a:	a80d      	add	r0, sp, #52	; 0x34
    1a3c:	f000 fbb8 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    1a40:	900b      	str	r0, [sp, #44]	; 0x2c
    1a42:	48f3      	ldr	r0, [pc, #972]	; (1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>)
    1a44:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    1a48:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1a4c:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    1a50:	f1b8 0f00 	cmp.w	r8, #0
    1a54:	bf14      	ite	ne
    1a56:	f04f 0901 	movne.w	r9, #1
    1a5a:	f04f 0900 	moveq.w	r9, #0
    1a5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    1a60:	9014      	str	r0, [sp, #80]	; 0x50
    1a62:	f1b9 0f00 	cmp.w	r9, #0
    1a66:	d009      	beq.n	1a7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1a68:	48ea      	ldr	r0, [pc, #936]	; (1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>)
    1a6a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1a6e:	b928      	cbnz	r0, 1a7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1a70:	f002 fe84 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1a74:	2800      	cmp	r0, #0
    1a76:	bf08      	it	eq
    1a78:	2701      	moveq	r7, #1
    1a7a:	d000      	beq.n	1a7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x52a>
    1a7c:	2700      	movs	r7, #0
    1a7e:	48e6      	ldr	r0, [pc, #920]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1a80:	2100      	movs	r1, #0
    1a82:	460d      	mov	r5, r1
    1a84:	7800      	ldrb	r0, [r0, #0]
    1a86:	2801      	cmp	r0, #1
    1a88:	bf18      	it	ne
    1a8a:	2803      	cmpne	r0, #3
    1a8c:	d13b      	bne.n	1b06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b2>
    1a8e:	48e2      	ldr	r0, [pc, #904]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1a90:	8846      	ldrh	r6, [r0, #2]
    1a92:	4546      	cmp	r6, r8
    1a94:	d937      	bls.n	1b06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b2>
    1a96:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a98:	43f3      	mvns	r3, r6
    1a9a:	f8df e380 	ldr.w	lr, [pc, #896]	; 1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1a9e:	18c8      	adds	r0, r1, r3
    1aa0:	f10d 0c0c 	add.w	ip, sp, #12
    1aa4:	aa15      	add	r2, sp, #84	; 0x54
    1aa6:	4571      	cmp	r1, lr
    1aa8:	d904      	bls.n	1ab4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x560>
    1aaa:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1aae:	2070      	movs	r0, #112	; 0x70
    1ab0:	f002 fedc 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ab4:	49da      	ldr	r1, [pc, #872]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1ab6:	428b      	cmp	r3, r1
    1ab8:	dd04      	ble.n	1ac4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x570>
    1aba:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1abe:	2070      	movs	r0, #112	; 0x70
    1ac0:	f002 fed4 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ac4:	49d7      	ldr	r1, [pc, #860]	; (1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>)
    1ac6:	428b      	cmp	r3, r1
    1ac8:	da04      	bge.n	1ad4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x580>
    1aca:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1ace:	2070      	movs	r0, #112	; 0x70
    1ad0:	f002 fecc 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ad4:	49d4      	ldr	r1, [pc, #848]	; (1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>)
    1ad6:	4281      	cmp	r1, r0
    1ad8:	bfdc      	itt	le
    1ada:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1ade:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1ae2:	dd05      	ble.n	1af0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x59c>
    1ae4:	2800      	cmp	r0, #0
    1ae6:	bfbc      	itt	lt
    1ae8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1aec:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1af0:	4661      	mov	r1, ip
    1af2:	f001 fe79 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1af6:	9803      	ldr	r0, [sp, #12]
    1af8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1afc:	9003      	str	r0, [sp, #12]
    1afe:	990d      	ldr	r1, [sp, #52]	; 0x34
    1b00:	1a08      	subs	r0, r1, r0
    1b02:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1b06:	2f00      	cmp	r7, #0
    1b08:	bf18      	it	ne
    1b0a:	2532      	movne	r5, #50	; 0x32
    1b0c:	d104      	bne.n	1b18 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5c4>
    1b0e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1b12:	2800      	cmp	r0, #0
    1b14:	bf18      	it	ne
    1b16:	2502      	movne	r5, #2
    1b18:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b1c:	d008      	beq.n	1b30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5dc>
    1b1e:	980d      	ldr	r0, [sp, #52]	; 0x34
    1b20:	1b00      	subs	r0, r0, r4
    1b22:	0200      	lsls	r0, r0, #8
    1b24:	17c2      	asrs	r2, r0, #31
    1b26:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1b2a:	1200      	asrs	r0, r0, #8
    1b2c:	2801      	cmp	r0, #1
    1b2e:	da02      	bge.n	1b36 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e2>
    1b30:	2203      	movs	r2, #3
    1b32:	9816      	ldr	r0, [sp, #88]	; 0x58
    1b34:	e00b      	b.n	1b4e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1b36:	b147      	cbz	r7, 1b4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5f6>
    1b38:	48b6      	ldr	r0, [pc, #728]	; (1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>)
    1b3a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1b3e:	b120      	cbz	r0, 1b4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5f6>
    1b40:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1b44:	1c05      	adds	r5, r0, #0
    1b46:	bf18      	it	ne
    1b48:	2502      	movne	r5, #2
    1b4a:	4620      	mov	r0, r4
    1b4c:	2200      	movs	r2, #0
    1b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b50:	442a      	add	r2, r5
    1b52:	1a5b      	subs	r3, r3, r1
    1b54:	f023 4c7f 	bic.w	ip, r3, #4278190080	; 0xff000000
    1b58:	f1ac 0301 	sub.w	r3, ip, #1
    1b5c:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
    1b60:	1a2b      	subs	r3, r5, r0
    1b62:	021b      	lsls	r3, r3, #8
    1b64:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    1b68:	eb03 631e 	add.w	r3, r3, lr, lsr #24
    1b6c:	121b      	asrs	r3, r3, #8
    1b6e:	4293      	cmp	r3, r2
    1b70:	db04      	blt.n	1b7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    1b72:	2900      	cmp	r1, #0
    1b74:	bf18      	it	ne
    1b76:	f8cd c034 	strne.w	ip, [sp, #52]	; 0x34
    1b7a:	e027      	b.n	1bcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x678>
    1b7c:	b189      	cbz	r1, 1ba2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x64e>
    1b7e:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    1b82:	b91b      	cbnz	r3, 1b8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x638>
    1b84:	4ba4      	ldr	r3, [pc, #656]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1b86:	781b      	ldrb	r3, [r3, #0]
    1b88:	2b03      	cmp	r3, #3
    1b8a:	d00a      	beq.n	1ba2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x64e>
    1b8c:	b927      	cbnz	r7, 1b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x644>
    1b8e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
    1b92:	2900      	cmp	r1, #0
    1b94:	bf18      	it	ne
    1b96:	1e92      	subne	r2, r2, #2
    1b98:	2100      	movs	r1, #0
    1b9a:	f88d b044 	strb.w	fp, [sp, #68]	; 0x44
    1b9e:	460e      	mov	r6, r1
    1ba0:	e007      	b.n	1bb2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x65e>
    1ba2:	b937      	cbnz	r7, 1bb2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x65e>
    1ba4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    1ba8:	2b00      	cmp	r3, #0
    1baa:	bf1c      	itt	ne
    1bac:	f88d b044 	strbne.w	fp, [sp, #68]	; 0x44
    1bb0:	1e92      	subne	r2, r2, #2
    1bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bb4:	1a59      	subs	r1, r3, r1
    1bb6:	1e49      	subs	r1, r1, #1
    1bb8:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    1bbc:	1a28      	subs	r0, r5, r0
    1bbe:	0200      	lsls	r0, r0, #8
    1bc0:	17c1      	asrs	r1, r0, #31
    1bc2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bc6:	1200      	asrs	r0, r0, #8
    1bc8:	4290      	cmp	r0, r2
    1bca:	db7c      	blt.n	1cc6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x772>
    1bcc:	9709      	str	r7, [sp, #36]	; 0x24
    1bce:	465f      	mov	r7, fp
    1bd0:	f001 ff6c 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1bd4:	1a28      	subs	r0, r5, r0
    1bd6:	0200      	lsls	r0, r0, #8
    1bd8:	17c1      	asrs	r1, r0, #31
    1bda:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bde:	1200      	asrs	r0, r0, #8
    1be0:	283d      	cmp	r0, #61	; 0x3d
    1be2:	da20      	bge.n	1c26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d2>
    1be4:	f1ba 0f01 	cmp.w	sl, #1
    1be8:	d002      	beq.n	1bf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x69c>
    1bea:	9809      	ldr	r0, [sp, #36]	; 0x24
    1bec:	b140      	cbz	r0, 1c00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ac>
    1bee:	e012      	b.n	1c16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6c2>
    1bf0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1bf4:	d11c      	bne.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1bf6:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
    1bfa:	2070      	movs	r0, #112	; 0x70
    1bfc:	f002 fe36 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c00:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1c04:	d007      	beq.n	1c16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6c2>
    1c06:	1b60      	subs	r0, r4, r5
    1c08:	0200      	lsls	r0, r0, #8
    1c0a:	17c1      	asrs	r1, r0, #31
    1c0c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1c10:	1200      	asrs	r0, r0, #8
    1c12:	2804      	cmp	r0, #4
    1c14:	dd04      	ble.n	1c20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6cc>
    1c16:	462c      	mov	r4, r5
    1c18:	4620      	mov	r0, r4
    1c1a:	f001 ff4d 	bl	3ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1c1e:	e007      	b.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1c20:	2800      	cmp	r0, #0
    1c22:	dc6d      	bgt.n	1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1c24:	e004      	b.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1c26:	462c      	mov	r4, r5
    1c28:	4620      	mov	r0, r4
    1c2a:	f001 ff45 	bl	3ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1c2e:	464f      	mov	r7, r9
    1c30:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1c34:	d05f      	beq.n	1cf6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7a2>
    1c36:	980d      	ldr	r0, [sp, #52]	; 0x34
    1c38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c3a:	1b00      	subs	r0, r0, r4
    1c3c:	1b12      	subs	r2, r2, r4
    1c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1c46:	2801      	cmp	r0, #1
    1c48:	d35a      	bcc.n	1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1c4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1c4e:	bf98      	it	ls
    1c50:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    1c54:	d854      	bhi.n	1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1c56:	4620      	mov	r0, r4
    1c58:	f00a ff15 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c5e:	4b70      	ldr	r3, [pc, #448]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1c60:	1a0d      	subs	r5, r1, r0
    1c62:	1aeb      	subs	r3, r5, r3
    1c64:	465a      	mov	r2, fp
    1c66:	f17b 0300 	sbcs.w	r3, fp, #0
    1c6a:	d319      	bcc.n	1ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1c6c:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1c70:	1a43      	subs	r3, r0, r1
    1c72:	ebb3 0c0c 	subs.w	ip, r3, ip
    1c76:	f172 0c00 	sbcs.w	ip, r2, #0
    1c7a:	d311      	bcc.n	1ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1c7c:	f8df c19c 	ldr.w	ip, [pc, #412]	; 1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1c80:	45ac      	cmp	ip, r5
    1c82:	bf3e      	ittt	cc
    1c84:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    1c88:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    1c8c:	1845      	addcc	r5, r0, r1
    1c8e:	d307      	bcc.n	1ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1c90:	459c      	cmp	ip, r3
    1c92:	d239      	bcs.n	1d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    1c94:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    1c98:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    1c9c:	4408      	add	r0, r1
    1c9e:	4245      	negs	r5, r0
    1ca0:	f8df b170 	ldr.w	fp, [pc, #368]	; 1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>
    1ca4:	f89b 001e 	ldrb.w	r0, [fp, #30]
    1ca8:	b398      	cbz	r0, 1d12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7be>
    1caa:	4650      	mov	r0, sl
    1cac:	f04f 0a00 	mov.w	sl, #0
    1cb0:	2801      	cmp	r0, #1
    1cb2:	d005      	beq.n	1cc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x76c>
    1cb4:	2002      	movs	r0, #2
    1cb6:	f002 f95b 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1cba:	2001      	movs	r0, #1
    1cbc:	f002 f958 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1cc0:	45b0      	cmp	r8, r6
    1cc2:	d232      	bcs.n	1d2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d6>
    1cc4:	e000      	b.n	1cc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x774>
    1cc6:	e01b      	b.n	1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1cc8:	eba5 0106 	sub.w	r1, r5, r6
    1ccc:	f04f 0301 	mov.w	r3, #1
    1cd0:	f04f 0203 	mov.w	r2, #3
    1cd4:	f04f 0002 	mov.w	r0, #2
    1cd8:	f002 f876 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cdc:	2800      	cmp	r0, #0
    1cde:	bf08      	it	eq
    1ce0:	f04f 0a01 	moveq.w	sl, #1
    1ce4:	f1b8 0f00 	cmp.w	r8, #0
    1ce8:	d039      	beq.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1cea:	2301      	movs	r3, #1
    1cec:	eba5 0108 	sub.w	r1, r5, r8
    1cf0:	2203      	movs	r2, #3
    1cf2:	4618      	mov	r0, r3
    1cf4:	e027      	b.n	1d46 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f2>
    1cf6:	f640 11fd 	movw	r1, #2557	; 0x9fd
    1cfa:	2070      	movs	r0, #112	; 0x70
    1cfc:	f002 fdb6 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d00:	b019      	add	sp, #100	; 0x64
    1d02:	2000      	movs	r0, #0
    1d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d08:	f640 21dd 	movw	r1, #2781	; 0xadd
    1d0c:	2070      	movs	r0, #112	; 0x70
    1d0e:	f002 fdad 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d12:	45b0      	cmp	r8, r6
    1d14:	bf34      	ite	cc
    1d16:	4630      	movcc	r0, r6
    1d18:	4640      	movcs	r0, r8
    1d1a:	301e      	adds	r0, #30
    1d1c:	42a8      	cmp	r0, r5
    1d1e:	dbc4      	blt.n	1caa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x756>
    1d20:	f44f 6121 	mov.w	r1, #2576	; 0xa10
    1d24:	2070      	movs	r0, #112	; 0x70
    1d26:	f002 fda1 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d2a:	d910      	bls.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d2c:	2301      	movs	r3, #1
    1d2e:	eba5 0108 	sub.w	r1, r5, r8
    1d32:	2203      	movs	r2, #3
    1d34:	4618      	mov	r0, r3
    1d36:	f002 f847 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d3a:	b3e0      	cbz	r0, 1db6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a>
    1d3c:	b17e      	cbz	r6, 1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d3e:	1ba9      	subs	r1, r5, r6
    1d40:	2301      	movs	r3, #1
    1d42:	2203      	movs	r2, #3
    1d44:	2002      	movs	r0, #2
    1d46:	f002 f83f 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d4a:	b3a0      	cbz	r0, 1db6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a>
    1d4c:	e007      	b.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d4e:	ea56 0008 	orrs.w	r0, r6, r8
    1d52:	d004      	beq.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d54:	f640 1147 	movw	r1, #2375	; 0x947
    1d58:	2070      	movs	r0, #112	; 0x70
    1d5a:	f002 fd87 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d5e:	2301      	movs	r3, #1
    1d60:	2203      	movs	r2, #3
    1d62:	4629      	mov	r1, r5
    1d64:	2000      	movs	r0, #0
    1d66:	f002 f82f 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d6a:	b320      	cbz	r0, 1db6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a>
    1d6c:	2601      	movs	r6, #1
    1d6e:	f1ba 0f00 	cmp.w	sl, #0
    1d72:	d004      	beq.n	1d7e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32>
    1d74:	9814      	ldr	r0, [sp, #80]	; 0x50
    1d76:	900d      	str	r0, [sp, #52]	; 0x34
    1d78:	2000      	movs	r0, #0
    1d7a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    1d7e:	f1b9 0f00 	cmp.w	r9, #0
    1d82:	bf04      	itt	eq
    1d84:	f89b 002d 	ldrbeq.w	r0, [fp, #45]	; 0x2d
    1d88:	2800      	cmpeq	r0, #0
    1d8a:	d000      	beq.n	1d8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42>
    1d8c:	b32f      	cbz	r7, 1dda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8e>
    1d8e:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    1d92:	b120      	cbz	r0, 1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1d94:	f002 fbc8 	bl	4528 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1d98:	2000      	movs	r0, #0
    1d9a:	f88b 002c 	strb.w	r0, [fp, #44]	; 0x2c
    1d9e:	b1ff      	cbz	r7, 1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1da0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1da4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1da8:	2301      	movs	r3, #1
    1daa:	2203      	movs	r2, #3
    1dac:	2005      	movs	r0, #5
    1dae:	f002 f80b 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1db2:	b340      	cbz	r0, 1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1db4:	e000      	b.n	1db8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>
    1db6:	e006      	b.n	1dc6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1db8:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    1dbc:	2800      	cmp	r0, #0
    1dbe:	bf08      	it	eq
    1dc0:	f88b 602d 	strbeq.w	r6, [fp, #45]	; 0x2d
    1dc4:	e015      	b.n	1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1dc6:	2002      	movs	r0, #2
    1dc8:	f002 f8d2 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1dcc:	2001      	movs	r0, #1
    1dce:	f002 f8cf 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1dd2:	b019      	add	sp, #100	; 0x64
    1dd4:	2000      	movs	r0, #0
    1dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dda:	f89b 002c 	ldrb.w	r0, [fp, #44]	; 0x2c
    1dde:	b328      	cbz	r0, 1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1de0:	f89b 002d 	ldrb.w	r0, [fp, #45]	; 0x2d
    1de4:	b128      	cbz	r0, 1df2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa6>
    1de6:	2005      	movs	r0, #5
    1de8:	f002 f8c2 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1dec:	2000      	movs	r0, #0
    1dee:	f88b 002d 	strb.w	r0, [fp, #45]	; 0x2d
    1df2:	eba5 0008 	sub.w	r0, r5, r8
    1df6:	f1a0 0119 	sub.w	r1, r0, #25
    1dfa:	2900      	cmp	r1, #0
    1dfc:	dc23      	bgt.n	1e46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1dfe:	f640 2142 	movw	r1, #2626	; 0xa42
    1e02:	2070      	movs	r0, #112	; 0x70
    1e04:	e013      	b.n	1e2e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe2>
    1e06:	e019      	b.n	1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1e08:	40000508 	.word	0x40000508
    1e0c:	20000018 	.word	0x20000018
    1e10:	20000d00 	.word	0x20000d00
    1e14:	20001080 	.word	0x20001080
    1e18:	20000020 	.word	0x20000020
    1e1c:	1e847fff 	.word	0x1e847fff
    1e20:	0f424000 	.word	0x0f424000
    1e24:	f0bdc000 	.word	0xf0bdc000
    1e28:	1e848000 	.word	0x1e848000
    1e2c:	e001      	b.n	1e32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe6>
    1e2e:	f002 fd1d 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e32:	f002 fb95 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1e36:	f88b 602c 	strb.w	r6, [fp, #44]	; 0x2c
    1e3a:	e7b0      	b.n	1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1e3c:	f240 3112 	movw	r1, #786	; 0x312
    1e40:	2070      	movs	r0, #112	; 0x70
    1e42:	f002 fd13 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e46:	2203      	movs	r2, #3
    1e48:	2301      	movs	r3, #1
    1e4a:	4610      	mov	r0, r2
    1e4c:	f001 ffbc 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1e50:	b300      	cbz	r0, 1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e52:	4913      	ldr	r1, [pc, #76]	; (1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>)
    1e54:	2000      	movs	r0, #0
    1e56:	68c9      	ldr	r1, [r1, #12]
    1e58:	6008      	str	r0, [r1, #0]
    1e5a:	4912      	ldr	r1, [pc, #72]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e5c:	6008      	str	r0, [r1, #0]
    1e5e:	ac0a      	add	r4, sp, #40	; 0x28
    1e60:	4811      	ldr	r0, [pc, #68]	; (1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>)
    1e62:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1e66:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1e6a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1e6e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1e72:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1e76:	ac0e      	add	r4, sp, #56	; 0x38
    1e78:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1e7c:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1e80:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1e84:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1e88:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1e8c:	b019      	add	sp, #100	; 0x64
    1e8e:	2001      	movs	r0, #1
    1e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e94:	f640 214a 	movw	r1, #2634	; 0xa4a
    1e98:	2070      	movs	r0, #112	; 0x70
    1e9a:	f002 fce7 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e9e:	0000      	.short	0x0000
    1ea0:	20000018 	.word	0x20000018
    1ea4:	40000508 	.word	0x40000508
    1ea8:	20000d00 	.word	0x20000d00
    1eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1eb0:	4606      	mov	r6, r0
    1eb2:	b083      	sub	sp, #12
    1eb4:	7808      	ldrb	r0, [r1, #0]
    1eb6:	7390      	strb	r0, [r2, #14]
    1eb8:	7acf      	ldrb	r7, [r1, #11]
    1eba:	7357      	strb	r7, [r2, #13]
    1ebc:	7a88      	ldrb	r0, [r1, #10]
    1ebe:	7310      	strb	r0, [r2, #12]
    1ec0:	8908      	ldrh	r0, [r1, #8]
    1ec2:	4614      	mov	r4, r2
    1ec4:	8150      	strh	r0, [r2, #10]
    1ec6:	460d      	mov	r5, r1
    1ec8:	780a      	ldrb	r2, [r1, #0]
    1eca:	495f      	ldr	r1, [pc, #380]	; (2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>)
    1ecc:	4699      	mov	r9, r3
    1ece:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1ed2:	424b      	negs	r3, r1
    1ed4:	f1ac 0801 	sub.w	r8, ip, #1
    1ed8:	b15a      	cbz	r2, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1eda:	43c0      	mvns	r0, r0
    1edc:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1ee0:	f104 0208 	add.w	r2, r4, #8
    1ee4:	4288      	cmp	r0, r1
    1ee6:	dd3d      	ble.n	1f64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>
    1ee8:	f240 51d7 	movw	r1, #1495	; 0x5d7
    1eec:	2070      	movs	r0, #112	; 0x70
    1eee:	f002 fcbd 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ef2:	68ee      	ldr	r6, [r5, #12]
    1ef4:	686d      	ldr	r5, [r5, #4]
    1ef6:	ea6f 0900 	mvn.w	r9, r0
    1efa:	f104 0208 	add.w	r2, r4, #8
    1efe:	eb06 0009 	add.w	r0, r6, r9
    1f02:	4546      	cmp	r6, r8
    1f04:	d904      	bls.n	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1f06:	f240 51d6 	movw	r1, #1494	; 0x5d6
    1f0a:	2070      	movs	r0, #112	; 0x70
    1f0c:	f002 fcae 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f10:	4589      	cmp	r9, r1
    1f12:	dce9      	bgt.n	1ee8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x19c>
    1f14:	4599      	cmp	r9, r3
    1f16:	db28      	blt.n	1f6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21e>
    1f18:	4584      	cmp	ip, r0
    1f1a:	bfdc      	itt	le
    1f1c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1f20:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1f24:	dd05      	ble.n	1f32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e6>
    1f26:	2800      	cmp	r0, #0
    1f28:	bfbc      	itt	lt
    1f2a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1f2e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1f32:	4621      	mov	r1, r4
    1f34:	f001 fc58 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f38:	6820      	ldr	r0, [r4, #0]
    1f3a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1f3e:	1970      	adds	r0, r6, r5
    1f40:	1c40      	adds	r0, r0, #1
    1f42:	6021      	str	r1, [r4, #0]
    1f44:	2f00      	cmp	r7, #0
    1f46:	bf08      	it	eq
    1f48:	307a      	addeq	r0, #122	; 0x7a
    1f4a:	d003      	beq.n	1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f4c:	2f01      	cmp	r7, #1
    1f4e:	bf08      	it	eq
    1f50:	3048      	addeq	r0, #72	; 0x48
    1f52:	d12d      	bne.n	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    1f54:	f001 fc2c 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1f58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f5c:	6060      	str	r0, [r4, #4]
    1f5e:	b003      	add	sp, #12
    1f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f64:	4601      	mov	r1, r0
    1f66:	4298      	cmp	r0, r3
    1f68:	da04      	bge.n	1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>
    1f6a:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    1f6e:	2070      	movs	r0, #112	; 0x70
    1f70:	f002 fc7c 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f74:	4584      	cmp	ip, r0
    1f76:	bfdc      	itt	le
    1f78:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1f7c:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1f80:	dd05      	ble.n	1f8e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x242>
    1f82:	2800      	cmp	r0, #0
    1f84:	bfbc      	itt	lt
    1f86:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1f8a:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1f8e:	4621      	mov	r1, r4
    1f90:	f001 fc2a 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f94:	6820      	ldr	r0, [r4, #0]
    1f96:	2f00      	cmp	r7, #0
    1f98:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1f9c:	f108 0001 	add.w	r0, r8, #1
    1fa0:	6021      	str	r1, [r4, #0]
    1fa2:	bf08      	it	eq
    1fa4:	307a      	addeq	r0, #122	; 0x7a
    1fa6:	d008      	beq.n	1fba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26e>
    1fa8:	2f01      	cmp	r7, #1
    1faa:	bf08      	it	eq
    1fac:	3048      	addeq	r0, #72	; 0x48
    1fae:	d004      	beq.n	1fba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26e>
    1fb0:	f240 617e 	movw	r1, #1662	; 0x67e
    1fb4:	2070      	movs	r0, #112	; 0x70
    1fb6:	f002 fc59 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fba:	f001 fbf9 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1fbe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1fc2:	6061      	str	r1, [r4, #4]
    1fc4:	8960      	ldrh	r0, [r4, #10]
    1fc6:	aa01      	add	r2, sp, #4
    1fc8:	4669      	mov	r1, sp
    1fca:	f001 fc0d 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1fce:	481f      	ldr	r0, [pc, #124]	; (204c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x300>)
    1fd0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1fd4:	2920      	cmp	r1, #32
    1fd6:	d023      	beq.n	2020 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d4>
    1fd8:	6900      	ldr	r0, [r0, #16]
    1fda:	1d40      	adds	r0, r0, #5
    1fdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fe0:	e9d4 2100 	ldrd	r2, r1, [r4]
    1fe4:	1a89      	subs	r1, r1, r2
    1fe6:	6020      	str	r0, [r4, #0]
    1fe8:	4408      	add	r0, r1
    1fea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fee:	6060      	str	r0, [r4, #4]
    1ff0:	464b      	mov	r3, r9
    1ff2:	4632      	mov	r2, r6
    1ff4:	4621      	mov	r1, r4
    1ff6:	68e8      	ldr	r0, [r5, #12]
    1ff8:	f7ff faf6 	bl	15e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1ffc:	2800      	cmp	r0, #0
    1ffe:	bf1c      	itt	ne
    2000:	b003      	addne	sp, #12
    2002:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2006:	e9d4 1000 	ldrd	r1, r0, [r4]
    200a:	1a40      	subs	r0, r0, r1
    200c:	4430      	add	r0, r6
    200e:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    2012:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2016:	e9c4 1000 	strd	r1, r0, [r4]
    201a:	b003      	add	sp, #12
    201c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2020:	8960      	ldrh	r0, [r4, #10]
    2022:	f106 0709 	add.w	r7, r6, #9
    2026:	b120      	cbz	r0, 2032 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e6>
    2028:	f002 fba8 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    202c:	2800      	cmp	r0, #0
    202e:	bf08      	it	eq
    2030:	3732      	addeq	r7, #50	; 0x32
    2032:	4807      	ldr	r0, [pc, #28]	; (2050 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x304>)
    2034:	7841      	ldrb	r1, [r0, #1]
    2036:	9800      	ldr	r0, [sp, #0]
    2038:	4281      	cmp	r1, r0
    203a:	bf84      	itt	hi
    203c:	1a08      	subhi	r0, r1, r0
    203e:	4407      	addhi	r7, r0
    2040:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    2044:	e7cc      	b.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    2046:	0000      	.short	0x0000
    2048:	0f424000 	.word	0x0f424000
    204c:	20001080 	.word	0x20001080
    2050:	20000020 	.word	0x20000020
    2054:	b570      	push	{r4, r5, r6, lr}
    2056:	4d1e      	ldr	r5, [pc, #120]	; (20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>)
    2058:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    205c:	2820      	cmp	r0, #32
    205e:	bf18      	it	ne
    2060:	bd70      	popne	{r4, r5, r6, pc}
    2062:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2066:	eb05 0082 	add.w	r0, r5, r2, lsl #2
    206a:	f890 4020 	ldrb.w	r4, [r0, #32]
    206e:	2c20      	cmp	r4, #32
    2070:	d029      	beq.n	20c6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x37a>
    2072:	4b18      	ldr	r3, [pc, #96]	; (20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>)
    2074:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    2078:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    207c:	7849      	ldrb	r1, [r1, #1]
    207e:	f880 1020 	strb.w	r1, [r0, #32]
    2082:	21ff      	movs	r1, #255	; 0xff
    2084:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    2088:	f885 102b 	strb.w	r1, [r5, #43]	; 0x2b
    208c:	f885 402f 	strb.w	r4, [r5, #47]	; 0x2f
    2090:	4621      	mov	r1, r4
    2092:	2002      	movs	r0, #2
    2094:	f000 f8c6 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    2098:	2000      	movs	r0, #0
    209a:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
    209e:	77a8      	strb	r0, [r5, #30]
    20a0:	490d      	ldr	r1, [pc, #52]	; (20d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38c>)
    20a2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    20a6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    20aa:	7d00      	ldrb	r0, [r0, #20]
    20ac:	2800      	cmp	r0, #0
    20ae:	bf08      	it	eq
    20b0:	f002 fd32 	bleq	4b18 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    20b4:	4809      	ldr	r0, [pc, #36]	; (20dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x390>)
    20b6:	6841      	ldr	r1, [r0, #4]
    20b8:	2900      	cmp	r1, #0
    20ba:	bf08      	it	eq
    20bc:	bd70      	popeq	{r4, r5, r6, pc}
    20be:	2000      	movs	r0, #0
    20c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    20c4:	4708      	bx	r1
    20c6:	f240 3152 	movw	r1, #850	; 0x352
    20ca:	2070      	movs	r0, #112	; 0x70
    20cc:	f002 fbce 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20d0:	20001080 	.word	0x20001080
    20d4:	20001000 	.word	0x20001000
    20d8:	20000d00 	.word	0x20000d00
    20dc:	20000018 	.word	0x20000018
    20e0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    20e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 21a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x454>
    20e8:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    20ec:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    20f0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    20f4:	2c20      	cmp	r4, #32
    20f6:	bf08      	it	eq
    20f8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    20fc:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 21a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x458>
    2100:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 21a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x45c>
    2104:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2108:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    210c:	2607      	movs	r6, #7
    210e:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    2112:	2801      	cmp	r0, #1
    2114:	d00e      	beq.n	2134 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e8>
    2116:	2804      	cmp	r0, #4
    2118:	bf08      	it	eq
    211a:	2602      	moveq	r6, #2
    211c:	d00a      	beq.n	2134 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e8>
    211e:	2805      	cmp	r0, #5
    2120:	bf0c      	ite	eq
    2122:	2603      	moveq	r6, #3
    2124:	2806      	cmpne	r0, #6
    2126:	d005      	beq.n	2134 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e8>
    2128:	f640 01aa 	movw	r1, #2218	; 0x8aa
    212c:	f04f 0070 	mov.w	r0, #112	; 0x70
    2130:	f002 fb9c 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2134:	f1bb 0f00 	cmp.w	fp, #0
    2138:	bf18      	it	ne
    213a:	f3af 8000 	nopne.w
    213e:	f3ef 8010 	mrs	r0, PRIMASK
    2142:	b672      	cpsid	i
    2144:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2148:	784a      	ldrb	r2, [r1, #1]
    214a:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    214e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    2152:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    2156:	42a2      	cmp	r2, r4
    2158:	bf04      	itt	eq
    215a:	2220      	moveq	r2, #32
    215c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2160:	b1b8      	cbz	r0, 2192 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x446>
    2162:	462a      	mov	r2, r5
    2164:	4621      	mov	r1, r4
    2166:	2001      	movs	r0, #1
    2168:	f000 f85c 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    216c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2170:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    2174:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2178:	6840      	ldr	r0, [r0, #4]
    217a:	4631      	mov	r1, r6
    217c:	4790      	blx	r2
    217e:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    2182:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    2186:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    218a:	2c20      	cmp	r4, #32
    218c:	d1bc      	bne.n	2108 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3bc>
    218e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2192:	4806      	ldr	r0, [pc, #24]	; (21ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x460>)
    2194:	2800      	cmp	r0, #0
    2196:	bf18      	it	ne
    2198:	f3af 8000 	nopne.w
    219c:	b662      	cpsie	i
    219e:	e7e0      	b.n	2162 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x416>
    21a0:	20001080 	.word	0x20001080
    21a4:	00000000 	.word	0x00000000
    21a8:	20001000 	.word	0x20001000
    21ac:	00000000 	.word	0x00000000
    21b0:	b510      	push	{r4, lr}
    21b2:	4604      	mov	r4, r0
    21b4:	6800      	ldr	r0, [r0, #0]
    21b6:	f00a fc66 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    21ba:	4602      	mov	r2, r0
    21bc:	8960      	ldrh	r0, [r4, #10]
    21be:	7a21      	ldrb	r1, [r4, #8]
    21c0:	4b14      	ldr	r3, [pc, #80]	; (2214 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c8>)
    21c2:	4408      	add	r0, r1
    21c4:	1c41      	adds	r1, r0, #1
    21c6:	1850      	adds	r0, r2, r1
    21c8:	429a      	cmp	r2, r3
    21ca:	d904      	bls.n	21d6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48a>
    21cc:	f240 51d6 	movw	r1, #1494	; 0x5d6
    21d0:	2070      	movs	r0, #112	; 0x70
    21d2:	f002 fb4b 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21d6:	4a10      	ldr	r2, [pc, #64]	; (2218 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4cc>)
    21d8:	4291      	cmp	r1, r2
    21da:	dd04      	ble.n	21e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x49a>
    21dc:	f240 51d7 	movw	r1, #1495	; 0x5d7
    21e0:	2070      	movs	r0, #112	; 0x70
    21e2:	f002 fb43 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21e6:	4a0d      	ldr	r2, [pc, #52]	; (221c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d0>)
    21e8:	4291      	cmp	r1, r2
    21ea:	da04      	bge.n	21f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4aa>
    21ec:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    21f0:	2070      	movs	r0, #112	; 0x70
    21f2:	f002 fb3b 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21f6:	490a      	ldr	r1, [pc, #40]	; (2220 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d4>)
    21f8:	4281      	cmp	r1, r0
    21fa:	bfde      	ittt	le
    21fc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2200:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2204:	bd10      	pople	{r4, pc}
    2206:	2800      	cmp	r0, #0
    2208:	bfbc      	itt	lt
    220a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    220e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2212:	bd10      	pop	{r4, pc}
    2214:	1e847fff 	.word	0x1e847fff
    2218:	0f424000 	.word	0x0f424000
    221c:	f0bdc000 	.word	0xf0bdc000
    2220:	1e848000 	.word	0x1e848000
    2224:	f8df c054 	ldr.w	ip, [pc, #84]	; 227c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x530>
    2228:	b510      	push	{r4, lr}
    222a:	2300      	movs	r3, #0
    222c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2230:	2807      	cmp	r0, #7
    2232:	d21e      	bcs.n	2272 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x526>
    2234:	e8df f000 	tbb	[pc, r0]
    2238:	05050505 	.word	0x05050505
    223c:	00040404 	.word	0x00040404
    2240:	2301      	movs	r3, #1
    2242:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    2246:	2b00      	cmp	r3, #0
    2248:	bf08      	it	eq
    224a:	bd10      	popeq	{r4, pc}
    224c:	480c      	ldr	r0, [pc, #48]	; (2280 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x534>)
    224e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2252:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2256:	2820      	cmp	r0, #32
    2258:	bf0e      	itee	eq
    225a:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    225e:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    2262:	7041      	strbne	r1, [r0, #1]
    2264:	2020      	movs	r0, #32
    2266:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    226a:	7058      	strb	r0, [r3, #1]
    226c:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2270:	bd10      	pop	{r4, pc}
    2272:	f44f 7118 	mov.w	r1, #608	; 0x260
    2276:	2070      	movs	r0, #112	; 0x70
    2278:	f002 faf8 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    227c:	20001000 	.word	0x20001000
    2280:	20001080 	.word	0x20001080
    2284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2288:	4681      	mov	r9, r0
    228a:	4856      	ldr	r0, [pc, #344]	; (23e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x698>)
    228c:	4688      	mov	r8, r1
    228e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    2292:	9000      	str	r0, [sp, #0]
    2294:	f890 4020 	ldrb.w	r4, [r0, #32]
    2298:	f1b9 0f01 	cmp.w	r9, #1
    229c:	4625      	mov	r5, r4
    229e:	bf18      	it	ne
    22a0:	f1b9 0f02 	cmpne.w	r9, #2
    22a4:	d005      	beq.n	22b2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x566>
    22a6:	f640 2181 	movw	r1, #2689	; 0xa81
    22aa:	f04f 0070 	mov.w	r0, #112	; 0x70
    22ae:	f002 fadd 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22b2:	2700      	movs	r7, #0
    22b4:	2d20      	cmp	r5, #32
    22b6:	d044      	beq.n	2342 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5f6>
    22b8:	484a      	ldr	r0, [pc, #296]	; (23e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x698>)
    22ba:	2600      	movs	r6, #0
    22bc:	7f80      	ldrb	r0, [r0, #30]
    22be:	2800      	cmp	r0, #0
    22c0:	bf08      	it	eq
    22c2:	2602      	moveq	r6, #2
    22c4:	f001 fbf2 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    22c8:	f8df a11c 	ldr.w	sl, [pc, #284]	; 23e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x69c>
    22cc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    22d0:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    22d4:	688a      	ldr	r2, [r1, #8]
    22d6:	68c9      	ldr	r1, [r1, #12]
    22d8:	1a12      	subs	r2, r2, r0
    22da:	1a09      	subs	r1, r1, r0
    22dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    22e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    22e4:	4296      	cmp	r6, r2
    22e6:	bf99      	ittee	ls
    22e8:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    22ec:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    22f0:	4a3e      	ldrhi	r2, [pc, #248]	; (23ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a0>)
    22f2:	eb02 1b88 	addhi.w	fp, r2, r8, lsl #6
    22f6:	d922      	bls.n	233e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5f2>
    22f8:	4622      	mov	r2, r4
    22fa:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    22fe:	784c      	ldrb	r4, [r1, #1]
    2300:	2c20      	cmp	r4, #32
    2302:	d014      	beq.n	232e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e2>
    2304:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2308:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    230c:	f8d1 c008 	ldr.w	ip, [r1, #8]
    2310:	68c9      	ldr	r1, [r1, #12]
    2312:	ebac 0c00 	sub.w	ip, ip, r0
    2316:	1a09      	subs	r1, r1, r0
    2318:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    231c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2320:	4566      	cmp	r6, ip
    2322:	bf9c      	itt	ls
    2324:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    2328:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    232c:	d8e4      	bhi.n	22f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5ac>
    232e:	2a20      	cmp	r2, #32
    2330:	d005      	beq.n	233e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5f2>
    2332:	4643      	mov	r3, r8
    2334:	2120      	movs	r1, #32
    2336:	2004      	movs	r0, #4
    2338:	f7ff f91a 	bl	1570 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    233c:	4604      	mov	r4, r0
    233e:	42ac      	cmp	r4, r5
    2340:	d116      	bne.n	2370 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x624>
    2342:	482b      	ldr	r0, [pc, #172]	; (23f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a4>)
    2344:	2800      	cmp	r0, #0
    2346:	bf18      	it	ne
    2348:	f3af 8000 	nopne.w
    234c:	f001 fbae 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2350:	4c24      	ldr	r4, [pc, #144]	; (23e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x698>)
    2352:	4603      	mov	r3, r0
    2354:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    2358:	2820      	cmp	r0, #32
    235a:	d00c      	beq.n	2376 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62a>
    235c:	68e0      	ldr	r0, [r4, #12]
    235e:	1c99      	adds	r1, r3, #2
    2360:	1a08      	subs	r0, r1, r0
    2362:	0200      	lsls	r0, r0, #8
    2364:	17c1      	asrs	r1, r0, #31
    2366:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    236a:	1200      	asrs	r0, r0, #8
    236c:	2800      	cmp	r0, #0
    236e:	dd02      	ble.n	2376 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62a>
    2370:	2000      	movs	r0, #0
    2372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2376:	2d20      	cmp	r5, #32
    2378:	d00d      	beq.n	2396 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64a>
    237a:	462a      	mov	r2, r5
    237c:	4649      	mov	r1, r9
    237e:	4618      	mov	r0, r3
    2380:	f7ff fb2e 	bl	19e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2384:	b320      	cbz	r0, 23d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x684>
    2386:	9800      	ldr	r0, [sp, #0]
    2388:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    238c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2390:	2001      	movs	r0, #1
    2392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2396:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    239a:	b118      	cbz	r0, 23a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x658>
    239c:	f002 f8c4 	bl	4528 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    23a0:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    23a4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23a8:	b120      	cbz	r0, 23b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x668>
    23aa:	2005      	movs	r0, #5
    23ac:	f001 fde0 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23b0:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    23b4:	2004      	movs	r0, #4
    23b6:	f001 fddb 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23ba:	f001 fe49 	bl	4050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    23be:	2020      	movs	r0, #32
    23c0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    23c4:	480b      	ldr	r0, [pc, #44]	; (23f4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6a8>)
    23c6:	68c0      	ldr	r0, [r0, #12]
    23c8:	6007      	str	r7, [r0, #0]
    23ca:	480b      	ldr	r0, [pc, #44]	; (23f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6ac>)
    23cc:	6007      	str	r7, [r0, #0]
    23ce:	e7df      	b.n	2390 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x644>
    23d0:	4643      	mov	r3, r8
    23d2:	462a      	mov	r2, r5
    23d4:	2120      	movs	r1, #32
    23d6:	2004      	movs	r0, #4
    23d8:	f7ff f8ca 	bl	1570 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    23dc:	2000      	movs	r0, #0
    23de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23e2:	0000      	.short	0x0000
    23e4:	20001080 	.word	0x20001080
    23e8:	20000d00 	.word	0x20000d00
    23ec:	20001000 	.word	0x20001000
    23f0:	00000000 	.word	0x00000000
    23f4:	20000018 	.word	0x20000018
    23f8:	40000508 	.word	0x40000508

000023fc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    23fc:	4906      	ldr	r1, [pc, #24]	; (2418 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    23fe:	b510      	push	{r4, lr}
    2400:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    2404:	2a20      	cmp	r2, #32
    2406:	bf1c      	itt	ne
    2408:	7788      	strbne	r0, [r1, #30]
    240a:	bd10      	popne	{r4, pc}
    240c:	f240 31b1 	movw	r1, #945	; 0x3b1
    2410:	2070      	movs	r0, #112	; 0x70
    2412:	f002 fa2b 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2416:	0000      	.short	0x0000
    2418:	20001080 	.word	0x20001080

0000241c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2420:	4e5e      	ldr	r6, [pc, #376]	; (259c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    2422:	4607      	mov	r7, r0
    2424:	b085      	sub	sp, #20
    2426:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    242a:	4688      	mov	r8, r1
    242c:	2820      	cmp	r0, #32
    242e:	d051      	beq.n	24d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb8>
    2430:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2434:	f106 040c 	add.w	r4, r6, #12
    2438:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    243c:	f5a6 7960 	sub.w	r9, r6, #896	; 0x380
    2440:	eb09 0ac0 	add.w	sl, r9, r0, lsl #3
    2444:	2020      	movs	r0, #32
    2446:	f88d 0000 	strb.w	r0, [sp]
    244a:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    244e:	aa03      	add	r2, sp, #12
    2450:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2454:	a901      	add	r1, sp, #4
    2456:	f890 5020 	ldrb.w	r5, [r0, #32]
    245a:	6930      	ldr	r0, [r6, #16]
    245c:	9002      	str	r0, [sp, #8]
    245e:	6830      	ldr	r0, [r6, #0]
    2460:	4438      	add	r0, r7
    2462:	f001 f9c1 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2466:	f8da 000c 	ldr.w	r0, [sl, #12]
    246a:	9901      	ldr	r1, [sp, #4]
    246c:	2f65      	cmp	r7, #101	; 0x65
    246e:	4408      	add	r0, r1
    2470:	d335      	bcc.n	24de <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2472:	4b4b      	ldr	r3, [pc, #300]	; (25a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x184>)
    2474:	2100      	movs	r1, #0
    2476:	1bdb      	subs	r3, r3, r7
    2478:	4189      	sbcs	r1, r1
    247a:	d330      	bcc.n	24de <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    247c:	6821      	ldr	r1, [r4, #0]
    247e:	1a41      	subs	r1, r0, r1
    2480:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2484:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2488:	d829      	bhi.n	24de <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    248a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    248e:	6060      	str	r0, [r4, #4]
    2490:	4630      	mov	r0, r6
    2492:	f884 800c 	strb.w	r8, [r4, #12]
    2496:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    249a:	46ea      	mov	sl, sp
    249c:	2d20      	cmp	r5, #32
    249e:	bf1c      	itt	ne
    24a0:	4940      	ldrne	r1, [pc, #256]	; (25a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    24a2:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    24a6:	d03e      	beq.n	2526 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    24a8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    24ac:	eb09 08c0 	add.w	r8, r9, r0, lsl #3
    24b0:	6860      	ldr	r0, [r4, #4]
    24b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
    24b6:	4621      	mov	r1, r4
    24b8:	1a10      	subs	r0, r2, r0
    24ba:	0200      	lsls	r0, r0, #8
    24bc:	17c2      	asrs	r2, r0, #31
    24be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    24c2:	f108 0608 	add.w	r6, r8, #8
    24c6:	1200      	asrs	r0, r0, #8
    24c8:	d41b      	bmi.n	2502 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe6>
    24ca:	8970      	ldrh	r0, [r6, #10]
    24cc:	b358      	cbz	r0, 2526 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    24ce:	8948      	ldrh	r0, [r1, #10]
    24d0:	b148      	cbz	r0, 24e6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    24d2:	e028      	b.n	2526 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    24d4:	f640 314c 	movw	r1, #2892	; 0xb4c
    24d8:	2070      	movs	r0, #112	; 0x70
    24da:	f002 f9c7 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24de:	b005      	add	sp, #20
    24e0:	2001      	movs	r0, #1
    24e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24e6:	4620      	mov	r0, r4
    24e8:	f7ff fe62 	bl	21b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x464>
    24ec:	f001 f960 	bl	37b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    24f0:	6831      	ldr	r1, [r6, #0]
    24f2:	1a08      	subs	r0, r1, r0
    24f4:	0200      	lsls	r0, r0, #8
    24f6:	17c1      	asrs	r1, r0, #31
    24f8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    24fc:	1200      	asrs	r0, r0, #8
    24fe:	2833      	cmp	r0, #51	; 0x33
    2500:	da11      	bge.n	2526 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x10a>
    2502:	f88a 5000 	strb.w	r5, [sl]
    2506:	f898 1014 	ldrb.w	r1, [r8, #20]
    250a:	7b20      	ldrb	r0, [r4, #12]
    250c:	4281      	cmp	r1, r0
    250e:	d805      	bhi.n	251c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2510:	9802      	ldr	r0, [sp, #8]
    2512:	6060      	str	r0, [r4, #4]
    2514:	b005      	add	sp, #20
    2516:	2002      	movs	r0, #2
    2518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    251c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2520:	7845      	ldrb	r5, [r0, #1]
    2522:	2d20      	cmp	r5, #32
    2524:	d1c0      	bne.n	24a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x8c>
    2526:	2005      	movs	r0, #5
    2528:	f001 fd22 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    252c:	4c1b      	ldr	r4, [pc, #108]	; (259c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    252e:	f04f 30ff 	mov.w	r0, #4294967295
    2532:	60a0      	str	r0, [r4, #8]
    2534:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2538:	f89d 2000 	ldrb.w	r2, [sp]
    253c:	2120      	movs	r1, #32
    253e:	2a20      	cmp	r2, #32
    2540:	bf13      	iteet	ne
    2542:	2005      	movne	r0, #5
    2544:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2548:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    254c:	f7ff f810 	blne	1570 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2550:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2554:	4913      	ldr	r1, [pc, #76]	; (25a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x188>)
    2556:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    255a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    255e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2562:	7048      	strb	r0, [r1, #1]
    2564:	6820      	ldr	r0, [r4, #0]
    2566:	4438      	add	r0, r7
    2568:	6020      	str	r0, [r4, #0]
    256a:	20ff      	movs	r0, #255	; 0xff
    256c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2570:	7e60      	ldrb	r0, [r4, #25]
    2572:	2801      	cmp	r0, #1
    2574:	d105      	bne.n	2582 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x166>
    2576:	6920      	ldr	r0, [r4, #16]
    2578:	1e40      	subs	r0, r0, #1
    257a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    257e:	f001 fb3d 	bl	3bfc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2582:	f89d 0000 	ldrb.w	r0, [sp]
    2586:	2820      	cmp	r0, #32
    2588:	d003      	beq.n	2592 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x176>
    258a:	4807      	ldr	r0, [pc, #28]	; (25a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x18c>)
    258c:	7840      	ldrb	r0, [r0, #1]
    258e:	f002 fa3d 	bl	4a0c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2592:	b005      	add	sp, #20
    2594:	2000      	movs	r0, #0
    2596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    259a:	0000      	.short	0x0000
    259c:	20001080 	.word	0x20001080
    25a0:	0f424000 	.word	0x0f424000
    25a4:	20001000 	.word	0x20001000
    25a8:	20000018 	.word	0x20000018

000025ac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    25ac:	4806      	ldr	r0, [pc, #24]	; (25c8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    25ae:	b510      	push	{r4, lr}
    25b0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    25b4:	2920      	cmp	r1, #32
    25b6:	bf1c      	itt	ne
    25b8:	7e00      	ldrbne	r0, [r0, #24]
    25ba:	bd10      	popne	{r4, pc}
    25bc:	f640 3145 	movw	r1, #2885	; 0xb45
    25c0:	2070      	movs	r0, #112	; 0x70
    25c2:	f002 f953 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25c6:	0000      	.short	0x0000
    25c8:	20001080 	.word	0x20001080

000025cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    25cc:	4602      	mov	r2, r0
    25ce:	4b14      	ldr	r3, [pc, #80]	; (2620 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    25d0:	b510      	push	{r4, lr}
    25d2:	4408      	add	r0, r1
    25d4:	429a      	cmp	r2, r3
    25d6:	d904      	bls.n	25e2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    25d8:	f240 51d6 	movw	r1, #1494	; 0x5d6
    25dc:	2070      	movs	r0, #112	; 0x70
    25de:	f002 f945 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25e2:	4a10      	ldr	r2, [pc, #64]	; (2624 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    25e4:	4291      	cmp	r1, r2
    25e6:	dd04      	ble.n	25f2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    25e8:	f240 51d7 	movw	r1, #1495	; 0x5d7
    25ec:	2070      	movs	r0, #112	; 0x70
    25ee:	f002 f93d 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25f2:	4a0d      	ldr	r2, [pc, #52]	; (2628 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    25f4:	4291      	cmp	r1, r2
    25f6:	da04      	bge.n	2602 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    25f8:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    25fc:	2070      	movs	r0, #112	; 0x70
    25fe:	f002 f935 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2602:	490a      	ldr	r1, [pc, #40]	; (262c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    2604:	4281      	cmp	r1, r0
    2606:	bfde      	ittt	le
    2608:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    260c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2610:	bd10      	pople	{r4, pc}
    2612:	2800      	cmp	r0, #0
    2614:	bfbc      	itt	lt
    2616:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    261a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    261e:	bd10      	pop	{r4, pc}
    2620:	1e847fff 	.word	0x1e847fff
    2624:	0f424000 	.word	0x0f424000
    2628:	f0bdc000 	.word	0xf0bdc000
    262c:	1e848000 	.word	0x1e848000

00002630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2630:	4b15      	ldr	r3, [pc, #84]	; (2688 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    2632:	1a0a      	subs	r2, r1, r0
    2634:	f04f 0c00 	mov.w	ip, #0
    2638:	1ad3      	subs	r3, r2, r3
    263a:	f17c 0300 	sbcs.w	r3, ip, #0
    263e:	bf3c      	itt	cc
    2640:	4610      	movcc	r0, r2
    2642:	4770      	bxcc	lr
    2644:	b510      	push	{r4, lr}
    2646:	1a43      	subs	r3, r0, r1
    2648:	4c0f      	ldr	r4, [pc, #60]	; (2688 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x58>)
    264a:	1b1c      	subs	r4, r3, r4
    264c:	f17c 0c00 	sbcs.w	ip, ip, #0
    2650:	bf3c      	itt	cc
    2652:	4610      	movcc	r0, r2
    2654:	bd10      	popcc	{r4, pc}
    2656:	f8df c034 	ldr.w	ip, [pc, #52]	; 268c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x5c>
    265a:	4594      	cmp	ip, r2
    265c:	bf3f      	itttt	cc
    265e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    2662:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    2666:	4408      	addcc	r0, r1
    2668:	bd10      	popcc	{r4, pc}
    266a:	459c      	cmp	ip, r3
    266c:	d206      	bcs.n	267c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x4c>
    266e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    2672:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    2676:	4408      	add	r0, r1
    2678:	4240      	negs	r0, r0
    267a:	bd10      	pop	{r4, pc}
    267c:	f640 21dd 	movw	r1, #2781	; 0xadd
    2680:	2070      	movs	r0, #112	; 0x70
    2682:	f002 f8f3 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2686:	0000      	.short	0x0000
    2688:	0f424000 	.word	0x0f424000
    268c:	1e847fff 	.word	0x1e847fff

00002690 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2690:	490e      	ldr	r1, [pc, #56]	; (26cc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2692:	b510      	push	{r4, lr}
    2694:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2698:	2820      	cmp	r0, #32
    269a:	d012      	beq.n	26c2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    269c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    26a0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    26a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    26a8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    26ac:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    26b0:	6840      	ldr	r0, [r0, #4]
    26b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    26b6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    26ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    26be:	2104      	movs	r1, #4
    26c0:	4710      	bx	r2
    26c2:	f640 018d 	movw	r1, #2189	; 0x88d
    26c6:	2070      	movs	r0, #112	; 0x70
    26c8:	f002 f8d0 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26cc:	20001080 	.word	0x20001080

000026d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    26d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26d2:	4d6c      	ldr	r5, [pc, #432]	; (2884 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    26d4:	4a6c      	ldr	r2, [pc, #432]	; (2888 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    26d6:	f505 7460 	add.w	r4, r5, #896	; 0x380
    26da:	2601      	movs	r6, #1
    26dc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    26e0:	2808      	cmp	r0, #8
    26e2:	d26e      	bcs.n	27c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf2>
    26e4:	e8df f000 	tbb	[pc, r0]
    26e8:	ab997304 	.word	0xab997304
    26ec:	b5b043c9 	.word	0xb5b043c9
    26f0:	b919      	cbnz	r1, 26fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    26f2:	f001 ff35 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26f6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    26fa:	8ae0      	ldrh	r0, [r4, #22]
    26fc:	b110      	cbz	r0, 2704 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    26fe:	f002 f83d 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2702:	b190      	cbz	r0, 272a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    2704:	f7ff fca6 	bl	2054 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x308>
    2708:	20ff      	movs	r0, #255	; 0xff
    270a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    270e:	68a1      	ldr	r1, [r4, #8]
    2710:	f1b1 3fff 	cmp.w	r1, #4294967295
    2714:	d005      	beq.n	2722 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    2716:	2301      	movs	r3, #1
    2718:	2203      	movs	r2, #3
    271a:	2005      	movs	r0, #5
    271c:	f001 fb54 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2720:	b140      	cbz	r0, 2734 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    2722:	7e60      	ldrb	r0, [r4, #25]
    2724:	2801      	cmp	r0, #1
    2726:	d110      	bne.n	274a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    2728:	e009      	b.n	273e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    272a:	f640 013d 	movw	r1, #2109	; 0x83d
    272e:	2070      	movs	r0, #112	; 0x70
    2730:	f002 f89c 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2734:	f640 0142 	movw	r1, #2114	; 0x842
    2738:	2070      	movs	r0, #112	; 0x70
    273a:	f002 f897 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    273e:	6920      	ldr	r0, [r4, #16]
    2740:	1e40      	subs	r0, r0, #1
    2742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2746:	f001 fa59 	bl	3bfc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    274a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    274e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2756:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    275a:	6840      	ldr	r0, [r0, #4]
    275c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2760:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2764:	b001      	add	sp, #4
    2766:	2101      	movs	r1, #1
    2768:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    276c:	4710      	bx	r2
    276e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2772:	b140      	cbz	r0, 2786 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb6>
    2774:	b919      	cbnz	r1, 277e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xae>
    2776:	f001 fef3 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    277a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    277e:	2000      	movs	r0, #0
    2780:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2786:	f7ff fc65 	bl	2054 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x308>
    278a:	f04f 30ff 	mov.w	r0, #4294967295
    278e:	60a0      	str	r0, [r4, #8]
    2790:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2794:	f88d 0000 	strb.w	r0, [sp]
    2798:	f89d 0000 	ldrb.w	r0, [sp]
    279c:	b190      	cbz	r0, 27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf4>
    279e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    27a2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    27a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    27aa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    27ae:	6840      	ldr	r0, [r0, #4]
    27b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    27b4:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    27b8:	b001      	add	sp, #4
    27ba:	2106      	movs	r1, #6
    27bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    27c0:	4710      	bx	r2
    27c2:	e05a      	b.n	287a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1aa>
    27c4:	f640 015a 	movw	r1, #2138	; 0x85a
    27c8:	2070      	movs	r0, #112	; 0x70
    27ca:	f002 f84f 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27ce:	f7ff fc41 	bl	2054 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x308>
    27d2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    27d6:	f001 ffd1 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27da:	b118      	cbz	r0, 27e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x114>
    27dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    27e0:	b128      	cbz	r0, 27ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11e>
    27e2:	e008      	b.n	27f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    27e4:	f640 0168 	movw	r1, #2152	; 0x868
    27e8:	2070      	movs	r0, #112	; 0x70
    27ea:	f002 f83f 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27ee:	f001 feb7 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    27f2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    27f6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    27fa:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    27fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2802:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2806:	6840      	ldr	r0, [r0, #4]
    2808:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    280c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2810:	b001      	add	sp, #4
    2812:	2100      	movs	r1, #0
    2814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2818:	4710      	bx	r2
    281a:	f001 fc63 	bl	40e4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    281e:	8ae0      	ldrh	r0, [r4, #22]
    2820:	b110      	cbz	r0, 2828 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x158>
    2822:	f001 ffab 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2826:	b128      	cbz	r0, 2834 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x164>
    2828:	4818      	ldr	r0, [pc, #96]	; (288c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    282a:	7800      	ldrb	r0, [r0, #0]
    282c:	2803      	cmp	r0, #3
    282e:	bf08      	it	eq
    2830:	7766      	strbeq	r6, [r4, #29]
    2832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2834:	f640 0172 	movw	r1, #2162	; 0x872
    2838:	2070      	movs	r0, #112	; 0x70
    283a:	f002 f817 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    283e:	4814      	ldr	r0, [pc, #80]	; (2890 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    2840:	6006      	str	r6, [r0, #0]
    2842:	68d0      	ldr	r0, [r2, #12]
    2844:	6006      	str	r6, [r0, #0]
    2846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2848:	7810      	ldrb	r0, [r2, #0]
    284a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    284e:	f002 b8dd 	b.w	4a0c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2852:	f7ff fbff 	bl	2054 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x308>
    2856:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    285a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    285e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2862:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2866:	6840      	ldr	r0, [r0, #4]
    2868:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    286c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2870:	b001      	add	sp, #4
    2872:	2105      	movs	r1, #5
    2874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2878:	4710      	bx	r2
    287a:	f640 0185 	movw	r1, #2181	; 0x885
    287e:	2070      	movs	r0, #112	; 0x70
    2880:	f001 fff4 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2884:	20000d00 	.word	0x20000d00
    2888:	20000018 	.word	0x20000018
    288c:	20000020 	.word	0x20000020
    2890:	40000508 	.word	0x40000508

00002894 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    2894:	4803      	ldr	r0, [pc, #12]	; (28a4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    2896:	b510      	push	{r4, lr}
    2898:	7840      	ldrb	r0, [r0, #1]
    289a:	f00a f8f4 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    289e:	b280      	uxth	r0, r0
    28a0:	bd10      	pop	{r4, pc}
    28a2:	0000      	.short	0x0000
    28a4:	20000020 	.word	0x20000020

000028a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    28a8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ac:	4682      	mov	sl, r0
    28ae:	48e0      	ldr	r0, [pc, #896]	; (2c30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    28b0:	b08b      	sub	sp, #44	; 0x2c
    28b2:	6800      	ldr	r0, [r0, #0]
    28b4:	4ddf      	ldr	r5, [pc, #892]	; (2c34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    28b6:	05c0      	lsls	r0, r0, #23
    28b8:	0dc0      	lsrs	r0, r0, #23
    28ba:	d00e      	beq.n	28da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    28bc:	3810      	subs	r0, #16
    28be:	b240      	sxtb	r0, r0
    28c0:	2800      	cmp	r0, #0
    28c2:	bfb8      	it	lt
    28c4:	f000 000f 	andlt.w	r0, r0, #15
    28c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    28cc:	bfac      	ite	ge
    28ce:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    28d2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    28d6:	0940      	lsrs	r0, r0, #5
    28d8:	d00d      	beq.n	28f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    28da:	980c      	ldr	r0, [sp, #48]	; 0x30
    28dc:	f04f 0b00 	mov.w	fp, #0
    28e0:	7800      	ldrb	r0, [r0, #0]
    28e2:	2800      	cmp	r0, #0
    28e4:	bf18      	it	ne
    28e6:	2801      	cmpne	r0, #1
    28e8:	d018      	beq.n	291c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    28ea:	f240 711c 	movw	r1, #1820	; 0x71c
    28ee:	f04f 0070 	mov.w	r0, #112	; 0x70
    28f2:	f001 ffbb 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    28fa:	f04f 0b01 	mov.w	fp, #1
    28fe:	2820      	cmp	r0, #32
    2900:	d007      	beq.n	2912 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    2902:	980c      	ldr	r0, [sp, #48]	; 0x30
    2904:	7800      	ldrb	r0, [r0, #0]
    2906:	b148      	cbz	r0, 291c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2908:	f44f 61e3 	mov.w	r1, #1816	; 0x718
    290c:	2070      	movs	r0, #112	; 0x70
    290e:	f001 ffad 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2912:	f240 7115 	movw	r1, #1813	; 0x715
    2916:	2070      	movs	r0, #112	; 0x70
    2918:	f001 ffa8 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    291c:	4cc6      	ldr	r4, [pc, #792]	; (2c38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    291e:	b124      	cbz	r4, 292a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2920:	2100      	movs	r1, #0
    2922:	f240 701f 	movw	r0, #1823	; 0x71f
    2926:	f3af 8000 	nop.w
    292a:	49c4      	ldr	r1, [pc, #784]	; (2c3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    292c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    2930:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2934:	f04f 0801 	mov.w	r8, #1
    2938:	9000      	str	r0, [sp, #0]
    293a:	b124      	cbz	r4, 2946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    293c:	2100      	movs	r1, #0
    293e:	f240 7027 	movw	r0, #1831	; 0x727
    2942:	f3af 8000 	nop.w
    2946:	f1b8 0f00 	cmp.w	r8, #0
    294a:	d009      	beq.n	2960 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    294c:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2950:	f04f 0900 	mov.w	r9, #0
    2954:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2958:	f1bb 0f00 	cmp.w	fp, #0
    295c:	d007      	beq.n	296e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    295e:	e032      	b.n	29c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2960:	48b7      	ldr	r0, [pc, #732]	; (2c40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2962:	2800      	cmp	r0, #0
    2964:	bf18      	it	ne
    2966:	f3af 8000 	nopne.w
    296a:	b662      	cpsie	i
    296c:	e7ee      	b.n	294c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    296e:	4637      	mov	r7, r6
    2970:	2001      	movs	r0, #1
    2972:	ea20 0607 	bic.w	r6, r0, r7
    2976:	48b3      	ldr	r0, [pc, #716]	; (2c44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    2978:	2240      	movs	r2, #64	; 0x40
    297a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    297e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2982:	f00a f9ee 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2986:	b124      	cbz	r4, 2992 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2988:	2100      	movs	r1, #0
    298a:	f240 509a 	movw	r0, #1434	; 0x59a
    298e:	f3af 8000 	nop.w
    2992:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2996:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    299a:	6a09      	ldr	r1, [r1, #32]
    299c:	6201      	str	r1, [r0, #32]
    299e:	b124      	cbz	r4, 29aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    29a0:	2100      	movs	r1, #0
    29a2:	f240 509e 	movw	r0, #1438	; 0x59e
    29a6:	f3af 8000 	nop.w
    29aa:	b124      	cbz	r4, 29b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    29ac:	2100      	movs	r1, #0
    29ae:	f240 7031 	movw	r0, #1841	; 0x731
    29b2:	f3af 8000 	nop.w
    29b6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    29ba:	f88d 0004 	strb.w	r0, [sp, #4]
    29be:	f89d 0004 	ldrb.w	r0, [sp, #4]
    29c2:	2800      	cmp	r0, #0
    29c4:	d1b9      	bne.n	293a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    29c6:	b124      	cbz	r4, 29d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    29c8:	2100      	movs	r1, #0
    29ca:	f240 703b 	movw	r0, #1851	; 0x73b
    29ce:	f3af 8000 	nop.w
    29d2:	f001 f86b 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    29d6:	4680      	mov	r8, r0
    29d8:	4633      	mov	r3, r6
    29da:	aa06      	add	r2, sp, #24
    29dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    29de:	f7ff fa65 	bl	1eac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    29e2:	b124      	cbz	r4, 29ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    29e4:	2100      	movs	r1, #0
    29e6:	f240 7042 	movw	r0, #1858	; 0x742
    29ea:	f3af 8000 	nop.w
    29ee:	4995      	ldr	r1, [pc, #596]	; (2c44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>)
    29f0:	a806      	add	r0, sp, #24
    29f2:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    29f6:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    29fa:	2901      	cmp	r1, #1
    29fc:	bf18      	it	ne
    29fe:	2902      	cmpne	r1, #2
    2a00:	d136      	bne.n	2a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2a02:	9906      	ldr	r1, [sp, #24]
    2a04:	9a07      	ldr	r2, [sp, #28]
    2a06:	eba1 0108 	sub.w	r1, r1, r8
    2a0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2a0e:	eba2 0208 	sub.w	r2, r2, r8
    2a12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2a16:	2902      	cmp	r1, #2
    2a18:	d370      	bcc.n	2afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2a1a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2a1e:	bf98      	it	ls
    2a20:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    2a24:	d86a      	bhi.n	2afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2a26:	f04f 0901 	mov.w	r9, #1
    2a2a:	ab01      	add	r3, sp, #4
    2a2c:	aa05      	add	r2, sp, #20
    2a2e:	4631      	mov	r1, r6
    2a30:	f7fe ff56 	bl	18e0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    2a34:	2800      	cmp	r0, #0
    2a36:	d069      	beq.n	2b0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x264>
    2a38:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2a3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2a40:	4633      	mov	r3, r6
    2a42:	428a      	cmp	r2, r1
    2a44:	d066      	beq.n	2b14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    2a46:	2005      	movs	r0, #5
    2a48:	f7fe fd92 	bl	1570 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2a4c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2a50:	7048      	strb	r0, [r1, #1]
    2a52:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a56:	2820      	cmp	r0, #32
    2a58:	bf1c      	itt	ne
    2a5a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2a5e:	f880 a001 	strbne.w	sl, [r0, #1]
    2a62:	d061      	beq.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x280>
    2a64:	4632      	mov	r2, r6
    2a66:	4651      	mov	r1, sl
    2a68:	f05f 0003 	movs.w	r0, #3
    2a6c:	f7ff fbda 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    2a70:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2a74:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2a78:	f88d 0004 	strb.w	r0, [sp, #4]
    2a7c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2a80:	2800      	cmp	r0, #0
    2a82:	bf14      	ite	ne
    2a84:	2701      	movne	r7, #1
    2a86:	2700      	moveq	r7, #0
    2a88:	b124      	cbz	r4, 2a94 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    2a8a:	2100      	movs	r1, #0
    2a8c:	f240 7049 	movw	r0, #1865	; 0x749
    2a90:	f3af 8000 	nop.w
    2a94:	486c      	ldr	r0, [pc, #432]	; (2c48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>)
    2a96:	2800      	cmp	r0, #0
    2a98:	bf18      	it	ne
    2a9a:	f3af 8000 	nopne.w
    2a9e:	f3ef 8810 	mrs	r8, PRIMASK
    2aa2:	b672      	cpsid	i
    2aa4:	b124      	cbz	r4, 2ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x208>
    2aa6:	2100      	movs	r1, #0
    2aa8:	f240 704f 	movw	r0, #1871	; 0x74f
    2aac:	f3af 8000 	nop.w
    2ab0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2ab4:	f88d 0004 	strb.w	r0, [sp, #4]
    2ab8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2abc:	2800      	cmp	r0, #0
    2abe:	f47f af3c 	bne.w	293a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2ac2:	b124      	cbz	r4, 2ace <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x226>
    2ac4:	2100      	movs	r1, #0
    2ac6:	f240 7057 	movw	r0, #1879	; 0x757
    2aca:	f3af 8000 	nop.w
    2ace:	f10d 0e18 	add.w	lr, sp, #24
    2ad2:	9800      	ldr	r0, [sp, #0]
    2ad4:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2ad8:	f100 0008 	add.w	r0, r0, #8
    2adc:	f1b9 0f00 	cmp.w	r9, #0
    2ae0:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2ae4:	d04c      	beq.n	2b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2ae6:	b124      	cbz	r4, 2af2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24a>
    2ae8:	2100      	movs	r1, #0
    2aea:	f240 7064 	movw	r0, #1892	; 0x764
    2aee:	f3af 8000 	nop.w
    2af2:	f1bb 0f00 	cmp.w	fp, #0
    2af6:	d134      	bne.n	2b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2af8:	e01e      	b.n	2b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    2afa:	e7ff      	b.n	2afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x254>
    2afc:	4632      	mov	r2, r6
    2afe:	4651      	mov	r1, sl
    2b00:	2004      	movs	r0, #4
    2b02:	f7ff fb8f 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    2b06:	f04f 0901 	mov.w	r9, #1
    2b0a:	e7b1      	b.n	2a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    2b0c:	4632      	mov	r2, r6
    2b0e:	4651      	mov	r1, sl
    2b10:	2004      	movs	r0, #4
    2b12:	e7ab      	b.n	2a6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c4>
    2b14:	2920      	cmp	r1, #32
    2b16:	bf19      	ittee	ne
    2b18:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2b1c:	7840      	ldrbne	r0, [r0, #1]
    2b1e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2b22:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2b26:	e791      	b.n	2a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2b28:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2b2c:	f880 a020 	strb.w	sl, [r0, #32]
    2b30:	21ff      	movs	r1, #255	; 0xff
    2b32:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    2b36:	e795      	b.n	2a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1bc>
    2b38:	b19f      	cbz	r7, 2b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b3a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2b3e:	2820      	cmp	r0, #32
    2b40:	d10f      	bne.n	2b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b42:	b124      	cbz	r4, 2b4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a6>
    2b44:	2100      	movs	r1, #0
    2b46:	f240 7069 	movw	r0, #1897	; 0x769
    2b4a:	f3af 8000 	nop.w
    2b4e:	4631      	mov	r1, r6
    2b50:	2002      	movs	r0, #2
    2b52:	f7ff fb97 	bl	2284 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x538>
    2b56:	b920      	cbnz	r0, 2b62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b58:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b5a:	7800      	ldrb	r0, [r0, #0]
    2b5c:	b3f0      	cbz	r0, 2bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    2b5e:	2801      	cmp	r0, #1
    2b60:	d04c      	beq.n	2bfc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    2b62:	b124      	cbz	r4, 2b6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    2b64:	2100      	movs	r1, #0
    2b66:	f240 7086 	movw	r0, #1926	; 0x786
    2b6a:	f3af 8000 	nop.w
    2b6e:	f1bb 0f00 	cmp.w	fp, #0
    2b72:	bf1c      	itt	ne
    2b74:	20ff      	movne	r0, #255	; 0xff
    2b76:	f885 002b 	strbne.w	r0, [r5, #43]	; 0x2b
    2b7a:	d048      	beq.n	2c0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    2b7c:	f04f 0901 	mov.w	r9, #1
    2b80:	b124      	cbz	r4, 2b8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    2b82:	2100      	movs	r1, #0
    2b84:	f240 7097 	movw	r0, #1943	; 0x797
    2b88:	f3af 8000 	nop.w
    2b8c:	f1b8 0f00 	cmp.w	r8, #0
    2b90:	d047      	beq.n	2c22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37a>
    2b92:	b124      	cbz	r4, 2b9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f6>
    2b94:	2100      	movs	r1, #0
    2b96:	f240 709b 	movw	r0, #1947	; 0x79b
    2b9a:	f3af 8000 	nop.w
    2b9e:	f1b9 0f00 	cmp.w	r9, #0
    2ba2:	d011      	beq.n	2bc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2ba4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ba8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2bac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2bb0:	2820      	cmp	r0, #32
    2bb2:	d009      	beq.n	2bc8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2bb4:	b124      	cbz	r4, 2bc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x318>
    2bb6:	2100      	movs	r1, #0
    2bb8:	f240 70a2 	movw	r0, #1954	; 0x7a2
    2bbc:	f3af 8000 	nop.w
    2bc0:	4822      	ldr	r0, [pc, #136]	; (2c4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a4>)
    2bc2:	7840      	ldrb	r0, [r0, #1]
    2bc4:	f001 ff22 	bl	4a0c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2bc8:	b124      	cbz	r4, 2bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    2bca:	2100      	movs	r1, #0
    2bcc:	f240 70a7 	movw	r0, #1959	; 0x7a7
    2bd0:	f3af 8000 	nop.w
    2bd4:	b00d      	add	sp, #52	; 0x34
    2bd6:	4648      	mov	r0, r9
    2bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bdc:	e7ff      	b.n	2bde <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2bde:	b124      	cbz	r4, 2bea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x342>
    2be0:	2100      	movs	r1, #0
    2be2:	f240 7071 	movw	r0, #1905	; 0x771
    2be6:	f3af 8000 	nop.w
    2bea:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2bee:	4651      	mov	r1, sl
    2bf0:	2004      	movs	r0, #4
    2bf2:	f7ff fb17 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    2bf6:	f04f 0901 	mov.w	r9, #1
    2bfa:	e7c1      	b.n	2b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2bfc:	2c00      	cmp	r4, #0
    2bfe:	f43f ae9c 	beq.w	293a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2c02:	2100      	movs	r1, #0
    2c04:	f240 707c 	movw	r0, #1916	; 0x77c
    2c08:	f3af 8000 	nop.w
    2c0c:	e695      	b.n	293a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2c0e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2c12:	2001      	movs	r0, #1
    2c14:	4388      	bics	r0, r1
    2c16:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2c1a:	20ff      	movs	r0, #255	; 0xff
    2c1c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2c20:	e7ac      	b.n	2b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d4>
    2c22:	4807      	ldr	r0, [pc, #28]	; (2c40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2c24:	2800      	cmp	r0, #0
    2c26:	bf18      	it	ne
    2c28:	f3af 8000 	nopne.w
    2c2c:	b662      	cpsie	i
    2c2e:	e7b0      	b.n	2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2c30:	e000ed04 	.word	0xe000ed04
    2c34:	20001080 	.word	0x20001080
    2c38:	00000000 	.word	0x00000000
    2c3c:	20000d00 	.word	0x20000d00
    2c40:	00000000 	.word	0x00000000
    2c44:	20001000 	.word	0x20001000
    2c48:	00000000 	.word	0x00000000
    2c4c:	20000018 	.word	0x20000018

00002c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2c50:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c54:	48a4      	ldr	r0, [pc, #656]	; (2ee8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x298>)
    2c56:	b086      	sub	sp, #24
    2c58:	6800      	ldr	r0, [r0, #0]
    2c5a:	05c0      	lsls	r0, r0, #23
    2c5c:	0dc0      	lsrs	r0, r0, #23
    2c5e:	d011      	beq.n	2c84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2c60:	3810      	subs	r0, #16
    2c62:	b240      	sxtb	r0, r0
    2c64:	2800      	cmp	r0, #0
    2c66:	bfb8      	it	lt
    2c68:	f000 000f 	andlt.w	r0, r0, #15
    2c6c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2c70:	bfac      	ite	ge
    2c72:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2c76:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2c7a:	0940      	lsrs	r0, r0, #5
    2c7c:	bf08      	it	eq
    2c7e:	f04f 0901 	moveq.w	r9, #1
    2c82:	d001      	beq.n	2c88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2c84:	f04f 0900 	mov.w	r9, #0
    2c88:	9806      	ldr	r0, [sp, #24]
    2c8a:	7800      	ldrb	r0, [r0, #0]
    2c8c:	2800      	cmp	r0, #0
    2c8e:	bf1e      	ittt	ne
    2c90:	2000      	movne	r0, #0
    2c92:	b007      	addne	sp, #28
    2c94:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c98:	f04f 0b00 	mov.w	fp, #0
    2c9c:	4d93      	ldr	r5, [pc, #588]	; (2eec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2c9e:	4c94      	ldr	r4, [pc, #592]	; (2ef0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>)
    2ca0:	46da      	mov	sl, fp
    2ca2:	b125      	cbz	r5, 2cae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x5e>
    2ca4:	2100      	movs	r1, #0
    2ca6:	f240 6025 	movw	r0, #1573	; 0x625
    2caa:	f3af 8000 	nop.w
    2cae:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2cb2:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    2cb6:	f04f 0800 	mov.w	r8, #0
    2cba:	b125      	cbz	r5, 2cc6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x76>
    2cbc:	2100      	movs	r1, #0
    2cbe:	f240 602a 	movw	r0, #1578	; 0x62a
    2cc2:	f3af 8000 	nop.w
    2cc6:	f1b9 0f00 	cmp.w	r9, #0
    2cca:	d11d      	bne.n	2d08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    2ccc:	4637      	mov	r7, r6
    2cce:	2001      	movs	r0, #1
    2cd0:	ea20 0607 	bic.w	r6, r0, r7
    2cd4:	4887      	ldr	r0, [pc, #540]	; (2ef4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2cd6:	2240      	movs	r2, #64	; 0x40
    2cd8:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2cdc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2ce0:	f00a f83f 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2ce4:	b125      	cbz	r5, 2cf0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa0>
    2ce6:	2100      	movs	r1, #0
    2ce8:	f240 509a 	movw	r0, #1434	; 0x59a
    2cec:	f3af 8000 	nop.w
    2cf0:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2cf4:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2cf8:	6a09      	ldr	r1, [r1, #32]
    2cfa:	6201      	str	r1, [r0, #32]
    2cfc:	b125      	cbz	r5, 2d08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xb8>
    2cfe:	2100      	movs	r1, #0
    2d00:	f240 509e 	movw	r0, #1438	; 0x59e
    2d04:	f3af 8000 	nop.w
    2d08:	b125      	cbz	r5, 2d14 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    2d0a:	2100      	movs	r1, #0
    2d0c:	f240 6032 	movw	r0, #1586	; 0x632
    2d10:	f3af 8000 	nop.w
    2d14:	f000 feca 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2d18:	4607      	mov	r7, r0
    2d1a:	4633      	mov	r3, r6
    2d1c:	466a      	mov	r2, sp
    2d1e:	9906      	ldr	r1, [sp, #24]
    2d20:	f7ff f8c4 	bl	1eac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x160>
    2d24:	b125      	cbz	r5, 2d30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    2d26:	2100      	movs	r1, #0
    2d28:	f44f 60c7 	mov.w	r0, #1592	; 0x638
    2d2c:	f3af 8000 	nop.w
    2d30:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2d34:	2820      	cmp	r0, #32
    2d36:	d014      	beq.n	2d62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    2d38:	6920      	ldr	r0, [r4, #16]
    2d3a:	9900      	ldr	r1, [sp, #0]
    2d3c:	1a09      	subs	r1, r1, r0
    2d3e:	0209      	lsls	r1, r1, #8
    2d40:	17ca      	asrs	r2, r1, #31
    2d42:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2d46:	1209      	asrs	r1, r1, #8
    2d48:	d50b      	bpl.n	2d62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x112>
    2d4a:	e9dd 1200 	ldrd	r1, r2, [sp]
    2d4e:	1a51      	subs	r1, r2, r1
    2d50:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2d54:	4408      	add	r0, r1
    2d56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d5a:	e9cd 2000 	strd	r2, r0, [sp]
    2d5e:	f04f 0801 	mov.w	r8, #1
    2d62:	b14d      	cbz	r5, 2d78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x128>
    2d64:	2100      	movs	r1, #0
    2d66:	f240 6042 	movw	r0, #1602	; 0x642
    2d6a:	f3af 8000 	nop.w
    2d6e:	2100      	movs	r1, #0
    2d70:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    2d74:	f3af 8000 	nop.w
    2d78:	9800      	ldr	r0, [sp, #0]
    2d7a:	9901      	ldr	r1, [sp, #4]
    2d7c:	1bc0      	subs	r0, r0, r7
    2d7e:	1bc9      	subs	r1, r1, r7
    2d80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d84:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d88:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2d8c:	bf98      	it	ls
    2d8e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    2d92:	d803      	bhi.n	2d9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14c>
    2d94:	f1b9 0f00 	cmp.w	r9, #0
    2d98:	d10c      	bne.n	2db4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x164>
    2d9a:	e003      	b.n	2da4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x154>
    2d9c:	f1b9 0f00 	cmp.w	r9, #0
    2da0:	d038      	beq.n	2e14 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c4>
    2da2:	e094      	b.n	2ece <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2da4:	4633      	mov	r3, r6
    2da6:	463a      	mov	r2, r7
    2da8:	4669      	mov	r1, sp
    2daa:	4853      	ldr	r0, [pc, #332]	; (2ef8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2dac:	f7fe fc1c 	bl	15e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2db0:	ea48 0800 	orr.w	r8, r8, r0
    2db4:	f1b8 0f00 	cmp.w	r8, #0
    2db8:	d022      	beq.n	2e00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2dba:	9800      	ldr	r0, [sp, #0]
    2dbc:	f009 fe63 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2dc0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2dc4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2dc8:	4b4c      	ldr	r3, [pc, #304]	; (2efc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2dca:	4411      	add	r1, r2
    2dcc:	1c49      	adds	r1, r1, #1
    2dce:	1842      	adds	r2, r0, r1
    2dd0:	4298      	cmp	r0, r3
    2dd2:	d841      	bhi.n	2e58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x208>
    2dd4:	4848      	ldr	r0, [pc, #288]	; (2ef8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2dd6:	4281      	cmp	r1, r0
    2dd8:	dc5a      	bgt.n	2e90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x240>
    2dda:	4240      	negs	r0, r0
    2ddc:	4281      	cmp	r1, r0
    2dde:	db5f      	blt.n	2ea0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>
    2de0:	1c58      	adds	r0, r3, #1
    2de2:	4290      	cmp	r0, r2
    2de4:	bfdc      	itt	le
    2de6:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2dea:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2dee:	dd05      	ble.n	2dfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ac>
    2df0:	2a00      	cmp	r2, #0
    2df2:	bfbc      	itt	lt
    2df4:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2df8:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2dfc:	9806      	ldr	r0, [sp, #24]
    2dfe:	60c2      	str	r2, [r0, #12]
    2e00:	f04f 0b01 	mov.w	fp, #1
    2e04:	2d00      	cmp	r5, #0
    2e06:	d062      	beq.n	2ece <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2e08:	2100      	movs	r1, #0
    2e0a:	f240 605b 	movw	r0, #1627	; 0x65b
    2e0e:	f3af 8000 	nop.w
    2e12:	e05c      	b.n	2ece <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27e>
    2e14:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2e18:	aa05      	add	r2, sp, #20
    2e1a:	a904      	add	r1, sp, #16
    2e1c:	f000 fce4 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2e20:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2e24:	2820      	cmp	r0, #32
    2e26:	d01c      	beq.n	2e62 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x212>
    2e28:	6920      	ldr	r0, [r4, #16]
    2e2a:	1d40      	adds	r0, r0, #5
    2e2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e30:	e9dd 2100 	ldrd	r2, r1, [sp]
    2e34:	1a89      	subs	r1, r1, r2
    2e36:	4401      	add	r1, r0
    2e38:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2e3c:	e9cd 0100 	strd	r0, r1, [sp]
    2e40:	f009 fe21 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2e44:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2e48:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2e4c:	4b2b      	ldr	r3, [pc, #172]	; (2efc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2e4e:	4411      	add	r1, r2
    2e50:	1c4a      	adds	r2, r1, #1
    2e52:	1881      	adds	r1, r0, r2
    2e54:	4298      	cmp	r0, r3
    2e56:	d918      	bls.n	2e8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23a>
    2e58:	f240 51d6 	movw	r1, #1494	; 0x5d6
    2e5c:	2070      	movs	r0, #112	; 0x70
    2e5e:	f001 fd05 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e62:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2e66:	f107 0609 	add.w	r6, r7, #9
    2e6a:	b120      	cbz	r0, 2e76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x226>
    2e6c:	f001 fc86 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e70:	2800      	cmp	r0, #0
    2e72:	bf08      	it	eq
    2e74:	3632      	addeq	r6, #50	; 0x32
    2e76:	4822      	ldr	r0, [pc, #136]	; (2f00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2e78:	9904      	ldr	r1, [sp, #16]
    2e7a:	7840      	ldrb	r0, [r0, #1]
    2e7c:	4288      	cmp	r0, r1
    2e7e:	bf84      	itt	hi
    2e80:	1a40      	subhi	r0, r0, r1
    2e82:	4406      	addhi	r6, r0
    2e84:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2e88:	e7d2      	b.n	2e30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e0>
    2e8a:	481b      	ldr	r0, [pc, #108]	; (2ef8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2e8c:	4282      	cmp	r2, r0
    2e8e:	dd04      	ble.n	2e9a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24a>
    2e90:	f240 51d7 	movw	r1, #1495	; 0x5d7
    2e94:	2070      	movs	r0, #112	; 0x70
    2e96:	f001 fce9 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e9a:	481a      	ldr	r0, [pc, #104]	; (2f04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2e9c:	4282      	cmp	r2, r0
    2e9e:	da04      	bge.n	2eaa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25a>
    2ea0:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    2ea4:	2070      	movs	r0, #112	; 0x70
    2ea6:	f001 fce1 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2eaa:	4817      	ldr	r0, [pc, #92]	; (2f08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2eac:	4288      	cmp	r0, r1
    2eae:	bfdc      	itt	le
    2eb0:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2eb4:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2eb8:	dd05      	ble.n	2ec6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x276>
    2eba:	2900      	cmp	r1, #0
    2ebc:	bfbc      	itt	lt
    2ebe:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2ec2:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2ec6:	9806      	ldr	r0, [sp, #24]
    2ec8:	f04f 0b01 	mov.w	fp, #1
    2ecc:	60c1      	str	r1, [r0, #12]
    2ece:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2ed2:	f88d 0010 	strb.w	r0, [sp, #16]
    2ed6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2eda:	2800      	cmp	r0, #0
    2edc:	f47f aee1 	bne.w	2ca2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    2ee0:	b007      	add	sp, #28
    2ee2:	4658      	mov	r0, fp
    2ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ee8:	e000ed04 	.word	0xe000ed04
    2eec:	00000000 	.word	0x00000000
    2ef0:	20001080 	.word	0x20001080
    2ef4:	20001000 	.word	0x20001000
    2ef8:	0f424000 	.word	0x0f424000
    2efc:	1e847fff 	.word	0x1e847fff
    2f00:	20000020 	.word	0x20000020
    2f04:	f0bdc000 	.word	0xf0bdc000
    2f08:	1e848000 	.word	0x1e848000

00002f0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2f0c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f10:	4d8a      	ldr	r5, [pc, #552]	; (313c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2f12:	b08c      	sub	sp, #48	; 0x30
    2f14:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2f18:	2000      	movs	r0, #0
    2f1a:	4c89      	ldr	r4, [pc, #548]	; (3140 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2f1c:	2701      	movs	r7, #1
    2f1e:	4681      	mov	r9, r0
    2f20:	f1a5 0880 	sub.w	r8, r5, #128	; 0x80
    2f24:	9008      	str	r0, [sp, #32]
    2f26:	b124      	cbz	r4, 2f32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26>
    2f28:	2100      	movs	r1, #0
    2f2a:	f240 70b6 	movw	r0, #1974	; 0x7b6
    2f2e:	f3af 8000 	nop.w
    2f32:	2f00      	cmp	r7, #0
    2f34:	d039      	beq.n	2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9e>
    2f36:	bf00      	nop
    2f38:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2f3c:	b124      	cbz	r4, 2f48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x3c>
    2f3e:	2100      	movs	r1, #0
    2f40:	f240 70bb 	movw	r0, #1979	; 0x7bb
    2f44:	f3af 8000 	nop.w
    2f48:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2f4c:	2001      	movs	r0, #1
    2f4e:	ea20 060a 	bic.w	r6, r0, sl
    2f52:	eb08 1086 	add.w	r0, r8, r6, lsl #6
    2f56:	eb08 118a 	add.w	r1, r8, sl, lsl #6
    2f5a:	4683      	mov	fp, r0
    2f5c:	2240      	movs	r2, #64	; 0x40
    2f5e:	f009 ff00 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f62:	b124      	cbz	r4, 2f6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x62>
    2f64:	2100      	movs	r1, #0
    2f66:	f240 509a 	movw	r0, #1434	; 0x59a
    2f6a:	f3af 8000 	nop.w
    2f6e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2f72:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2f76:	9000      	str	r0, [sp, #0]
    2f78:	6a09      	ldr	r1, [r1, #32]
    2f7a:	6201      	str	r1, [r0, #32]
    2f7c:	b124      	cbz	r4, 2f88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7c>
    2f7e:	2100      	movs	r1, #0
    2f80:	f240 509e 	movw	r0, #1438	; 0x59e
    2f84:	f3af 8000 	nop.w
    2f88:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f8c:	f88d 0008 	strb.w	r0, [sp, #8]
    2f90:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f94:	b180      	cbz	r0, 2fb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xac>
    2f96:	2c00      	cmp	r4, #0
    2f98:	bf1c      	itt	ne
    2f9a:	2100      	movne	r1, #0
    2f9c:	f240 70c1 	movwne	r0, #1985	; 0x7c1
    2fa0:	d0c1      	beq.n	2f26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    2fa2:	bf00      	nop
    2fa4:	f3af 8000 	nop.w
    2fa8:	e7bd      	b.n	2f26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    2faa:	4866      	ldr	r0, [pc, #408]	; (3144 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    2fac:	2800      	cmp	r0, #0
    2fae:	bf18      	it	ne
    2fb0:	f3af 8000 	nopne.w
    2fb4:	b662      	cpsie	i
    2fb6:	e7bf      	b.n	2f38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2fb8:	b124      	cbz	r4, 2fc4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb8>
    2fba:	2100      	movs	r1, #0
    2fbc:	f240 70c5 	movw	r0, #1989	; 0x7c5
    2fc0:	f3af 8000 	nop.w
    2fc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2fc6:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2fca:	2803      	cmp	r0, #3
    2fcc:	d178      	bne.n	30c0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b4>
    2fce:	f8dd a000 	ldr.w	sl, [sp]
    2fd2:	f8cd a014 	str.w	sl, [sp, #20]
    2fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
    2fd8:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2fdc:	4288      	cmp	r0, r1
    2fde:	bf14      	ite	ne
    2fe0:	f04f 0b00 	movne.w	fp, #0
    2fe4:	f04f 0b01 	moveq.w	fp, #1
    2fe8:	f10a 0c20 	add.w	ip, sl, #32
    2fec:	4686      	mov	lr, r0
    2fee:	2220      	movs	r2, #32
    2ff0:	eb08 1386 	add.w	r3, r8, r6, lsl #6
    2ff4:	e003      	b.n	2ffe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf2>
    2ff6:	4602      	mov	r2, r0
    2ff8:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2ffc:	7840      	ldrb	r0, [r0, #1]
    2ffe:	4288      	cmp	r0, r1
    3000:	d002      	beq.n	3008 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    3002:	2820      	cmp	r0, #32
    3004:	d00a      	beq.n	301c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    3006:	e7f6      	b.n	2ff6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xea>
    3008:	2820      	cmp	r0, #32
    300a:	d007      	beq.n	301c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x110>
    300c:	4586      	cmp	lr, r0
    300e:	d107      	bne.n	3020 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    3010:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    3014:	7840      	ldrb	r0, [r0, #1]
    3016:	f88c 0000 	strb.w	r0, [ip]
    301a:	e007      	b.n	302c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x120>
    301c:	4648      	mov	r0, r9
    301e:	e00c      	b.n	303a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12e>
    3020:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    3024:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    3028:	7840      	ldrb	r0, [r0, #1]
    302a:	7048      	strb	r0, [r1, #1]
    302c:	b124      	cbz	r4, 3038 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12c>
    302e:	2100      	movs	r1, #0
    3030:	f240 5004 	movw	r0, #1284	; 0x504
    3034:	f3af 8000 	nop.w
    3038:	2001      	movs	r0, #1
    303a:	ea10 0f0b 	tst.w	r0, fp
    303e:	bf1c      	itt	ne
    3040:	21ff      	movne	r1, #255	; 0xff
    3042:	f88a 1023 	strbne.w	r1, [sl, #35]	; 0x23
    3046:	2800      	cmp	r0, #0
    3048:	d058      	beq.n	30fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    304a:	b124      	cbz	r4, 3056 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14a>
    304c:	2100      	movs	r1, #0
    304e:	f240 70ca 	movw	r0, #1994	; 0x7ca
    3052:	f3af 8000 	nop.w
    3056:	4632      	mov	r2, r6
    3058:	2001      	movs	r0, #1
    305a:	990c      	ldr	r1, [sp, #48]	; 0x30
    305c:	f7ff f8e2 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    3060:	9805      	ldr	r0, [sp, #20]
    3062:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    3066:	f88d 0008 	strb.w	r0, [sp, #8]
    306a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    306e:	2800      	cmp	r0, #0
    3070:	bf14      	ite	ne
    3072:	f04f 0a01 	movne.w	sl, #1
    3076:	f04f 0a00 	moveq.w	sl, #0
    307a:	b124      	cbz	r4, 3086 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    307c:	2100      	movs	r1, #0
    307e:	f240 70d5 	movw	r0, #2005	; 0x7d5
    3082:	f3af 8000 	nop.w
    3086:	4830      	ldr	r0, [pc, #192]	; (3148 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x23c>)
    3088:	2800      	cmp	r0, #0
    308a:	bf18      	it	ne
    308c:	f3af 8000 	nopne.w
    3090:	f3ef 8710 	mrs	r7, PRIMASK
    3094:	b672      	cpsid	i
    3096:	b124      	cbz	r4, 30a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x196>
    3098:	2100      	movs	r1, #0
    309a:	f240 70da 	movw	r0, #2010	; 0x7da
    309e:	f3af 8000 	nop.w
    30a2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    30a6:	f88d 0008 	strb.w	r0, [sp, #8]
    30aa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    30ae:	b140      	cbz	r0, 30c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b6>
    30b0:	2c00      	cmp	r4, #0
    30b2:	bf1c      	itt	ne
    30b4:	2100      	movne	r1, #0
    30b6:	f240 70de 	movwne	r0, #2014	; 0x7de
    30ba:	f43f af34 	beq.w	2f26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a>
    30be:	e771      	b.n	2fa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    30c0:	e01c      	b.n	30fc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    30c2:	f1ba 0f00 	cmp.w	sl, #0
    30c6:	d008      	beq.n	30da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    30c8:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    30cc:	2820      	cmp	r0, #32
    30ce:	d104      	bne.n	30da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ce>
    30d0:	4631      	mov	r1, r6
    30d2:	2002      	movs	r0, #2
    30d4:	f7ff f8d6 	bl	2284 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x538>
    30d8:	b308      	cbz	r0, 311e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x212>
    30da:	b124      	cbz	r4, 30e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1da>
    30dc:	2100      	movs	r1, #0
    30de:	f240 70f2 	movw	r0, #2034	; 0x7f2
    30e2:	f3af 8000 	nop.w
    30e6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    30ea:	2001      	movs	r0, #1
    30ec:	4388      	bics	r0, r1
    30ee:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    30f2:	20ff      	movs	r0, #255	; 0xff
    30f4:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    30f8:	2001      	movs	r0, #1
    30fa:	9008      	str	r0, [sp, #32]
    30fc:	b124      	cbz	r4, 3108 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    30fe:	2100      	movs	r1, #0
    3100:	f240 70fb 	movw	r0, #2043	; 0x7fb
    3104:	f3af 8000 	nop.w
    3108:	b18f      	cbz	r7, 312e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x222>
    310a:	b124      	cbz	r4, 3116 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    310c:	2100      	movs	r1, #0
    310e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3112:	f3af 8000 	nop.w
    3116:	9808      	ldr	r0, [sp, #32]
    3118:	b00d      	add	sp, #52	; 0x34
    311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    311e:	2c00      	cmp	r4, #0
    3120:	d0f2      	beq.n	3108 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fc>
    3122:	2100      	movs	r1, #0
    3124:	f240 70ed 	movw	r0, #2029	; 0x7ed
    3128:	f3af 8000 	nop.w
    312c:	e7e7      	b.n	30fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    312e:	4805      	ldr	r0, [pc, #20]	; (3144 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>)
    3130:	2800      	cmp	r0, #0
    3132:	bf18      	it	ne
    3134:	f3af 8000 	nopne.w
    3138:	b662      	cpsie	i
    313a:	e7e6      	b.n	310a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    313c:	20001080 	.word	0x20001080
	...

0000314c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    314c:	2820      	cmp	r0, #32
    314e:	bf24      	itt	cs
    3150:	2000      	movcs	r0, #0
    3152:	4770      	bxcs	lr
    3154:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3158:	4b03      	ldr	r3, [pc, #12]	; (3168 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    315a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    315e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3162:	6042      	str	r2, [r0, #4]
    3164:	2001      	movs	r0, #1
    3166:	4770      	bx	lr
    3168:	20000d00 	.word	0x20000d00

0000316c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    316c:	b510      	push	{r4, lr}
    316e:	2820      	cmp	r0, #32
    3170:	d211      	bcs.n	3196 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3172:	490e      	ldr	r1, [pc, #56]	; (31ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3174:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3178:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    317c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3180:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3184:	b13b      	cbz	r3, 3196 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3186:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    318a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    318e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    3192:	2a01      	cmp	r2, #1
    3194:	d001      	beq.n	319a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3196:	2000      	movs	r0, #0
    3198:	bd10      	pop	{r4, pc}
    319a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    319e:	4601      	mov	r1, r0
    31a0:	2000      	movs	r0, #0
    31a2:	f7ff f83f 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    31a6:	2001      	movs	r0, #1
    31a8:	bd10      	pop	{r4, pc}
    31aa:	0000      	.short	0x0000
    31ac:	20001080 	.word	0x20001080

000031b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    31b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31b4:	4e81      	ldr	r6, [pc, #516]	; (33bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    31b6:	4680      	mov	r8, r0
    31b8:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    31bc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    31c0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    31c4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    31c8:	2800      	cmp	r0, #0
    31ca:	d068      	beq.n	329e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    31cc:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    31d0:	4d7b      	ldr	r5, [pc, #492]	; (33c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    31d2:	b125      	cbz	r5, 31de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    31d4:	2100      	movs	r1, #0
    31d6:	f640 3092 	movw	r0, #2962	; 0xb92
    31da:	f3af 8000 	nop.w
    31de:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    31e2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    31e6:	2801      	cmp	r0, #1
    31e8:	d018      	beq.n	321c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    31ea:	b2c0      	uxtb	r0, r0
    31ec:	2804      	cmp	r0, #4
    31ee:	bf1c      	itt	ne
    31f0:	2805      	cmpne	r0, #5
    31f2:	2806      	cmpne	r0, #6
    31f4:	d058      	beq.n	32a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    31f6:	b12d      	cbz	r5, 3204 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    31f8:	f04f 0100 	mov.w	r1, #0
    31fc:	f640 309e 	movw	r0, #2974	; 0xb9e
    3200:	f3af 8000 	nop.w
    3204:	f001 fc58 	bl	4ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3208:	b125      	cbz	r5, 3214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    320a:	2100      	movs	r1, #0
    320c:	f640 30a2 	movw	r0, #2978	; 0xba2
    3210:	f3af 8000 	nop.w
    3214:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3218:	2801      	cmp	r0, #1
    321a:	d1e6      	bne.n	31ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    321c:	2401      	movs	r4, #1
    321e:	b125      	cbz	r5, 322a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3220:	2100      	movs	r1, #0
    3222:	f640 30a9 	movw	r0, #2985	; 0xba9
    3226:	f3af 8000 	nop.w
    322a:	2c00      	cmp	r4, #0
    322c:	d042      	beq.n	32b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    322e:	2000      	movs	r0, #0
    3230:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3234:	b125      	cbz	r5, 3240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    3236:	2100      	movs	r1, #0
    3238:	f640 30ae 	movw	r0, #2990	; 0xbae
    323c:	f3af 8000 	nop.w
    3240:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    3244:	2001      	movs	r0, #1
    3246:	ea20 090b 	bic.w	r9, r0, fp
    324a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    324e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3252:	2240      	movs	r2, #64	; 0x40
    3254:	f009 fd85 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3258:	b125      	cbz	r5, 3264 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    325a:	2100      	movs	r1, #0
    325c:	f240 509a 	movw	r0, #1434	; 0x59a
    3260:	f3af 8000 	nop.w
    3264:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    3268:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    326c:	6a00      	ldr	r0, [r0, #32]
    326e:	f8ca 0020 	str.w	r0, [sl, #32]
    3272:	b125      	cbz	r5, 327e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    3274:	2100      	movs	r1, #0
    3276:	f240 509e 	movw	r0, #1438	; 0x59e
    327a:	f3af 8000 	nop.w
    327e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3282:	f88d 0000 	strb.w	r0, [sp]
    3286:	f89d 0000 	ldrb.w	r0, [sp]
    328a:	b1d0      	cbz	r0, 32c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    328c:	2d00      	cmp	r5, #0
    328e:	bf1c      	itt	ne
    3290:	2100      	movne	r1, #0
    3292:	f640 30b4 	movwne	r0, #2996	; 0xbb4
    3296:	d0c2      	beq.n	321e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3298:	f3af 8000 	nop.w
    329c:	e7bf      	b.n	321e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    329e:	f640 3189 	movw	r1, #2953	; 0xb89
    32a2:	2070      	movs	r0, #112	; 0x70
    32a4:	f001 fae2 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    32a8:	464a      	mov	r2, r9
    32aa:	4641      	mov	r1, r8
    32ac:	2001      	movs	r0, #1
    32ae:	f7fe ffb9 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    32b2:	e7a9      	b.n	3208 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    32b4:	4843      	ldr	r0, [pc, #268]	; (33c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    32b6:	2800      	cmp	r0, #0
    32b8:	bf18      	it	ne
    32ba:	f3af 8000 	nopne.w
    32be:	b662      	cpsie	i
    32c0:	e7b5      	b.n	322e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    32c2:	b125      	cbz	r5, 32ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    32c4:	2100      	movs	r1, #0
    32c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
    32ca:	f3af 8000 	nop.w
    32ce:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    32d2:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    32d6:	4640      	mov	r0, r8
    32d8:	461c      	mov	r4, r3
    32da:	f04f 0b20 	mov.w	fp, #32
    32de:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    32e2:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    32e6:	e004      	b.n	32f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x142>
    32e8:	46a3      	mov	fp, r4
    32ea:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    32ee:	f89c 4001 	ldrb.w	r4, [ip, #1]
    32f2:	4284      	cmp	r4, r0
    32f4:	d002      	beq.n	32fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14c>
    32f6:	2c20      	cmp	r4, #32
    32f8:	d02b      	beq.n	3352 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    32fa:	e7f5      	b.n	32e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x138>
    32fc:	2c20      	cmp	r4, #32
    32fe:	d028      	beq.n	3352 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    3300:	42a3      	cmp	r3, r4
    3302:	d104      	bne.n	330e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    3304:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    3308:	7840      	ldrb	r0, [r0, #1]
    330a:	7008      	strb	r0, [r1, #0]
    330c:	e005      	b.n	331a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x16a>
    330e:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    3312:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    3316:	7840      	ldrb	r0, [r0, #1]
    3318:	7048      	strb	r0, [r1, #1]
    331a:	f1ba 0f00 	cmp.w	sl, #0
    331e:	d011      	beq.n	3344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    3320:	b125      	cbz	r5, 332c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    3322:	2100      	movs	r1, #0
    3324:	f240 40fc 	movw	r0, #1276	; 0x4fc
    3328:	f3af 8000 	nop.w
    332c:	f89a 0000 	ldrb.w	r0, [sl]
    3330:	42a0      	cmp	r0, r4
    3332:	d107      	bne.n	3344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x194>
    3334:	b125      	cbz	r5, 3340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    3336:	2100      	movs	r1, #0
    3338:	f240 40ff 	movw	r0, #1279	; 0x4ff
    333c:	f3af 8000 	nop.w
    3340:	f88a b000 	strb.w	fp, [sl]
    3344:	b15d      	cbz	r5, 335e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    3346:	2100      	movs	r1, #0
    3348:	f240 5004 	movw	r0, #1284	; 0x504
    334c:	f3af 8000 	nop.w
    3350:	e000      	b.n	3354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a4>
    3352:	b125      	cbz	r5, 335e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ae>
    3354:	2100      	movs	r1, #0
    3356:	f640 30bc 	movw	r0, #3004	; 0xbbc
    335a:	f3af 8000 	nop.w
    335e:	481a      	ldr	r0, [pc, #104]	; (33c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x218>)
    3360:	2800      	cmp	r0, #0
    3362:	bf18      	it	ne
    3364:	f3af 8000 	nopne.w
    3368:	f3ef 8410 	mrs	r4, PRIMASK
    336c:	b672      	cpsid	i
    336e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3372:	f88d 0000 	strb.w	r0, [sp]
    3376:	f89d 0000 	ldrb.w	r0, [sp]
    337a:	b138      	cbz	r0, 338c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1dc>
    337c:	2d00      	cmp	r5, #0
    337e:	bf1c      	itt	ne
    3380:	2100      	movne	r1, #0
    3382:	f640 30c2 	movwne	r0, #3010	; 0xbc2
    3386:	f43f af4a 	beq.w	321e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    338a:	e785      	b.n	3298 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    338c:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3390:	20ff      	movs	r0, #255	; 0xff
    3392:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3396:	b154      	cbz	r4, 33ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fe>
    3398:	2d00      	cmp	r5, #0
    339a:	bf08      	it	eq
    339c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33a0:	2100      	movs	r1, #0
    33a2:	f640 30cf 	movw	r0, #3023	; 0xbcf
    33a6:	f3af 8000 	nop.w
    33aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33ae:	4805      	ldr	r0, [pc, #20]	; (33c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    33b0:	2800      	cmp	r0, #0
    33b2:	bf18      	it	ne
    33b4:	f3af 8000 	nopne.w
    33b8:	b662      	cpsie	i
    33ba:	e7ed      	b.n	3398 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e8>
    33bc:	20001080 	.word	0x20001080
	...

000033cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    33cc:	b570      	push	{r4, r5, r6, lr}
    33ce:	460d      	mov	r5, r1
    33d0:	4606      	mov	r6, r0
    33d2:	f001 f9c1 	bl	4758 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    33d6:	480f      	ldr	r0, [pc, #60]	; (3414 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    33d8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    33dc:	2400      	movs	r4, #0
    33de:	3880      	subs	r0, #128	; 0x80
    33e0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    33e4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    33e8:	b129      	cbz	r1, 33f6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    33ea:	1c61      	adds	r1, r4, #1
    33ec:	b2cc      	uxtb	r4, r1
    33ee:	2c20      	cmp	r4, #32
    33f0:	d3f8      	bcc.n	33e4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    33f2:	2020      	movs	r0, #32
    33f4:	bd70      	pop	{r4, r5, r6, pc}
    33f6:	4808      	ldr	r0, [pc, #32]	; (3418 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    33f8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    33fc:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3400:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3404:	4621      	mov	r1, r4
    3406:	6045      	str	r5, [r0, #4]
    3408:	2001      	movs	r0, #1
    340a:	f7fe ff0b 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    340e:	4620      	mov	r0, r4
    3410:	bd70      	pop	{r4, r5, r6, pc}
    3412:	0000      	.short	0x0000
    3414:	20001080 	.word	0x20001080
    3418:	20000d00 	.word	0x20000d00

0000341c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3420:	b082      	sub	sp, #8
    3422:	f000 fb43 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3426:	4605      	mov	r5, r0
    3428:	f000 fe12 	bl	4050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    342c:	4c66      	ldr	r4, [pc, #408]	; (35c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    342e:	68a0      	ldr	r0, [r4, #8]
    3430:	f1b0 3fff 	cmp.w	r0, #4294967295
    3434:	bf1c      	itt	ne
    3436:	f04f 30ff 	movne.w	r0, #4294967295
    343a:	60a0      	strne	r0, [r4, #8]
    343c:	7fa0      	ldrb	r0, [r4, #30]
    343e:	4f63      	ldr	r7, [pc, #396]	; (35cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    3440:	b990      	cbnz	r0, 3468 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4c>
    3442:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
    3446:	1a40      	subs	r0, r0, r1
    3448:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    344c:	f44f 710c 	mov.w	r1, #560	; 0x230
    3450:	f009 fb46 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3454:	6921      	ldr	r1, [r4, #16]
    3456:	4408      	add	r0, r1
    3458:	1a28      	subs	r0, r5, r0
    345a:	0200      	lsls	r0, r0, #8
    345c:	17c1      	asrs	r1, r0, #31
    345e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3462:	1200      	asrs	r0, r0, #8
    3464:	0fc0      	lsrs	r0, r0, #31
    3466:	d013      	beq.n	3490 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    3468:	7e60      	ldrb	r0, [r4, #25]
    346a:	b328      	cbz	r0, 34b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    346c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3470:	f88d 0000 	strb.w	r0, [sp]
    3474:	f89d 0000 	ldrb.w	r0, [sp]
    3478:	b1f0      	cbz	r0, 34b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    347a:	f000 fc27 	bl	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    347e:	bf00      	nop
    3480:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3484:	b1f0      	cbz	r0, 34c4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    3486:	f240 4111 	movw	r1, #1041	; 0x411
    348a:	2070      	movs	r0, #112	; 0x70
    348c:	f001 f9ee 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3490:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3494:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3498:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    349c:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    34a0:	6840      	ldr	r0, [r0, #4]
    34a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    34a6:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
    34aa:	2108      	movs	r1, #8
    34ac:	4790      	blx	r2
    34ae:	f240 31f9 	movw	r1, #1017	; 0x3f9
    34b2:	2070      	movs	r0, #112	; 0x70
    34b4:	f001 f9da 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34b8:	1ce8      	adds	r0, r5, #3
    34ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34be:	f000 fafb 	bl	3ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    34c2:	e7dd      	b.n	3480 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    34c4:	2001      	movs	r0, #1
    34c6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    34ca:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    34ce:	2820      	cmp	r0, #32
    34d0:	d024      	beq.n	351c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x100>
    34d2:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    34d6:	2020      	movs	r0, #32
    34d8:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    34dc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    34e0:	2600      	movs	r6, #0
    34e2:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    34e6:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    34ea:	4839      	ldr	r0, [pc, #228]	; (35d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>)
    34ec:	6026      	str	r6, [r4, #0]
    34ee:	7800      	ldrb	r0, [r0, #0]
    34f0:	2802      	cmp	r0, #2
    34f2:	bf16      	itet	ne
    34f4:	2803      	cmpne	r0, #3
    34f6:	2001      	moveq	r0, #1
    34f8:	2000      	movne	r0, #0
    34fa:	7720      	strb	r0, [r4, #28]
    34fc:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
    3500:	eb04 0a89 	add.w	sl, r4, r9, lsl #2
    3504:	f89a 0020 	ldrb.w	r0, [sl, #32]
    3508:	2820      	cmp	r0, #32
    350a:	d02f      	beq.n	356c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    350c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3510:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    3514:	7d81      	ldrb	r1, [r0, #22]
    3516:	2901      	cmp	r1, #1
    3518:	d005      	beq.n	3526 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    351a:	e027      	b.n	356c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    351c:	f240 4114 	movw	r1, #1044	; 0x414
    3520:	2070      	movs	r0, #112	; 0x70
    3522:	f001 f9a3 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3526:	462f      	mov	r7, r5
    3528:	f100 0508 	add.w	r5, r0, #8
    352c:	8a40      	ldrh	r0, [r0, #18]
    352e:	aa01      	add	r2, sp, #4
    3530:	4669      	mov	r1, sp
    3532:	f000 f959 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3536:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    353a:	2820      	cmp	r0, #32
    353c:	d004      	beq.n	3548 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    353e:	6920      	ldr	r0, [r4, #16]
    3540:	1d40      	adds	r0, r0, #5
    3542:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3546:	e009      	b.n	355c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x140>
    3548:	8968      	ldrh	r0, [r5, #10]
    354a:	3709      	adds	r7, #9
    354c:	b120      	cbz	r0, 3558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13c>
    354e:	f001 f915 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3552:	2800      	cmp	r0, #0
    3554:	bf08      	it	eq
    3556:	3732      	addeq	r7, #50	; 0x32
    3558:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    355c:	e9d5 2100 	ldrd	r2, r1, [r5]
    3560:	1a89      	subs	r1, r1, r2
    3562:	6028      	str	r0, [r5, #0]
    3564:	4408      	add	r0, r1
    3566:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    356a:	6068      	str	r0, [r5, #4]
    356c:	4649      	mov	r1, r9
    356e:	2001      	movs	r0, #1
    3570:	f7fe fe88 	bl	2284 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x538>
    3574:	2800      	cmp	r0, #0
    3576:	d0f9      	beq.n	356c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x150>
    3578:	4816      	ldr	r0, [pc, #88]	; (35d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    357a:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    357e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3582:	2802      	cmp	r0, #2
    3584:	d104      	bne.n	3590 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x174>
    3586:	464a      	mov	r2, r9
    3588:	4641      	mov	r1, r8
    358a:	2006      	movs	r0, #6
    358c:	f7fe fe4a 	bl	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    3590:	20ff      	movs	r0, #255	; 0xff
    3592:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    3596:	f89a 0021 	ldrb.w	r0, [sl, #33]	; 0x21
    359a:	4d0f      	ldr	r5, [pc, #60]	; (35d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    359c:	2820      	cmp	r0, #32
    359e:	bf1c      	itt	ne
    35a0:	7868      	ldrbne	r0, [r5, #1]
    35a2:	f001 fa33 	blne	4a0c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    35a6:	7f20      	ldrb	r0, [r4, #28]
    35a8:	b118      	cbz	r0, 35b2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    35aa:	f000 fd9b 	bl	40e4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    35ae:	7726      	strb	r6, [r4, #28]
    35b0:	7766      	strb	r6, [r4, #29]
    35b2:	6869      	ldr	r1, [r5, #4]
    35b4:	2900      	cmp	r1, #0
    35b6:	bf04      	itt	eq
    35b8:	b002      	addeq	sp, #8
    35ba:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    35be:	2064      	movs	r0, #100	; 0x64
    35c0:	b002      	add	sp, #8
    35c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35c6:	4708      	bx	r1
    35c8:	20001080 	.word	0x20001080
    35cc:	20000d00 	.word	0x20000d00
    35d0:	20000020 	.word	0x20000020
    35d4:	20001000 	.word	0x20001000
    35d8:	20000018 	.word	0x20000018

000035dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    35dc:	b510      	push	{r4, lr}
    35de:	4c32      	ldr	r4, [pc, #200]	; (36a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    35e0:	b082      	sub	sp, #8
    35e2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    35e6:	2920      	cmp	r1, #32
    35e8:	d008      	beq.n	35fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    35ea:	68a1      	ldr	r1, [r4, #8]
    35ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    35f0:	d009      	beq.n	3606 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    35f2:	f640 21ba 	movw	r1, #2746	; 0xaba
    35f6:	2070      	movs	r0, #112	; 0x70
    35f8:	f001 f938 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35fc:	f640 21b9 	movw	r1, #2745	; 0xab9
    3600:	2070      	movs	r0, #112	; 0x70
    3602:	f001 f933 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3606:	6862      	ldr	r2, [r4, #4]
    3608:	4601      	mov	r1, r0
    360a:	4b28      	ldr	r3, [pc, #160]	; (36ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    360c:	1850      	adds	r0, r2, r1
    360e:	429a      	cmp	r2, r3
    3610:	d904      	bls.n	361c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    3612:	f240 51d6 	movw	r1, #1494	; 0x5d6
    3616:	2070      	movs	r0, #112	; 0x70
    3618:	f001 f928 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    361c:	4a24      	ldr	r2, [pc, #144]	; (36b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    361e:	4291      	cmp	r1, r2
    3620:	dd04      	ble.n	362c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    3622:	f240 51d7 	movw	r1, #1495	; 0x5d7
    3626:	2070      	movs	r0, #112	; 0x70
    3628:	f001 f920 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    362c:	4a21      	ldr	r2, [pc, #132]	; (36b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    362e:	4291      	cmp	r1, r2
    3630:	da04      	bge.n	363c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    3632:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
    3636:	2070      	movs	r0, #112	; 0x70
    3638:	f001 f918 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    363c:	491e      	ldr	r1, [pc, #120]	; (36b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    363e:	4281      	cmp	r1, r0
    3640:	bfdc      	itt	le
    3642:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3646:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    364a:	dd05      	ble.n	3658 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    364c:	2800      	cmp	r0, #0
    364e:	bfbc      	itt	lt
    3650:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3654:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3658:	aa01      	add	r2, sp, #4
    365a:	4669      	mov	r1, sp
    365c:	f000 f8c4 	bl	37e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3660:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3664:	280f      	cmp	r0, #15
    3666:	bf8c      	ite	hi
    3668:	2001      	movhi	r0, #1
    366a:	2000      	movls	r0, #0
    366c:	9900      	ldr	r1, [sp, #0]
    366e:	4408      	add	r0, r1
    3670:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3674:	60a1      	str	r1, [r4, #8]
    3676:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    367a:	f88d 0000 	strb.w	r0, [sp]
    367e:	f89d 0000 	ldrb.w	r0, [sp]
    3682:	2800      	cmp	r0, #0
    3684:	bf04      	itt	eq
    3686:	b002      	addeq	sp, #8
    3688:	bd10      	popeq	{r4, pc}
    368a:	2301      	movs	r3, #1
    368c:	2203      	movs	r2, #3
    368e:	2005      	movs	r0, #5
    3690:	f000 fb9a 	bl	3dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3694:	2800      	cmp	r0, #0
    3696:	bf1c      	itt	ne
    3698:	b002      	addne	sp, #8
    369a:	bd10      	popne	{r4, pc}
    369c:	f640 21c2 	movw	r1, #2754	; 0xac2
    36a0:	2070      	movs	r0, #112	; 0x70
    36a2:	f001 f8e3 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36a6:	0000      	.short	0x0000
    36a8:	20001080 	.word	0x20001080
    36ac:	1e847fff 	.word	0x1e847fff
    36b0:	0f424000 	.word	0x0f424000
    36b4:	f0bdc000 	.word	0xf0bdc000
    36b8:	1e848000 	.word	0x1e848000

000036bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    36bc:	b570      	push	{r4, r5, r6, lr}
    36be:	4c1e      	ldr	r4, [pc, #120]	; (3738 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    36c0:	2120      	movs	r1, #32
    36c2:	f884 1020 	strb.w	r1, [r4, #32]
    36c6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    36ca:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    36ce:	2000      	movs	r0, #0
    36d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    36d4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    36d8:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    36dc:	1e42      	subs	r2, r0, #1
    36de:	60a2      	str	r2, [r4, #8]
    36e0:	6020      	str	r0, [r4, #0]
    36e2:	77a0      	strb	r0, [r4, #30]
    36e4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    36e8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    36ec:	7720      	strb	r0, [r4, #28]
    36ee:	7760      	strb	r0, [r4, #29]
    36f0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    36f4:	4911      	ldr	r1, [pc, #68]	; (373c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    36f6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    36fa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    36fe:	7008      	strb	r0, [r1, #0]
    3700:	7048      	strb	r0, [r1, #1]
    3702:	8048      	strh	r0, [r1, #2]
    3704:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3708:	2210      	movs	r2, #16
    370a:	7088      	strb	r0, [r1, #2]
    370c:	f801 0f04 	strb.w	r0, [r1, #4]!
    3710:	1e52      	subs	r2, r2, #1
    3712:	d1fa      	bne.n	370a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    3714:	4d0a      	ldr	r5, [pc, #40]	; (3740 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    3716:	2601      	movs	r6, #1
    3718:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    371c:	20ff      	movs	r0, #255	; 0xff
    371e:	7028      	strb	r0, [r5, #0]
    3720:	4808      	ldr	r0, [pc, #32]	; (3744 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    3722:	f001 f955 	bl	49d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3726:	7068      	strb	r0, [r5, #1]
    3728:	f001 f9b0 	bl	4a8c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    372c:	60e8      	str	r0, [r5, #12]
    372e:	f000 fd07 	bl	4140 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3732:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    3736:	bd70      	pop	{r4, r5, r6, pc}
    3738:	20001080 	.word	0x20001080
    373c:	20000020 	.word	0x20000020
    3740:	20000018 	.word	0x20000018
    3744:	000020e1 	.word	0x000020e1

00003748 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3748:	b570      	push	{r4, r5, r6, lr}
    374a:	4604      	mov	r4, r0
    374c:	4615      	mov	r5, r2
    374e:	4608      	mov	r0, r1
    3750:	f009 f999 	bl	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3754:	4b14      	ldr	r3, [pc, #80]	; (37a8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>)
    3756:	1b01      	subs	r1, r0, r4
    3758:	2200      	movs	r2, #0
    375a:	1acb      	subs	r3, r1, r3
    375c:	f172 0300 	sbcs.w	r3, r2, #0
    3760:	d318      	bcc.n	3794 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3762:	f8df c044 	ldr.w	ip, [pc, #68]	; 37a8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x60>
    3766:	1a23      	subs	r3, r4, r0
    3768:	ebb3 0c0c 	subs.w	ip, r3, ip
    376c:	f172 0200 	sbcs.w	r2, r2, #0
    3770:	d310      	bcc.n	3794 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3772:	4a0e      	ldr	r2, [pc, #56]	; (37ac <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>)
    3774:	428a      	cmp	r2, r1
    3776:	bf3e      	ittt	cc
    3778:	f5c4 2190 	rsbcc	r1, r4, #294912	; 0x48000
    377c:	f101 51f4 	addcc.w	r1, r1, #511705088	; 0x1e800000
    3780:	4401      	addcc	r1, r0
    3782:	d307      	bcc.n	3794 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>
    3784:	429a      	cmp	r2, r3
    3786:	d209      	bcs.n	379c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x54>
    3788:	f5c0 2090 	rsb	r0, r0, #294912	; 0x48000
    378c:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    3790:	4420      	add	r0, r4
    3792:	4241      	negs	r1, r0
    3794:	f101 000f 	add.w	r0, r1, #15
    3798:	1a28      	subs	r0, r5, r0
    379a:	bd70      	pop	{r4, r5, r6, pc}
    379c:	f640 21dd 	movw	r1, #2781	; 0xadd
    37a0:	2070      	movs	r0, #112	; 0x70
    37a2:	f001 f863 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    37a6:	0000      	.short	0x0000
    37a8:	0f424000 	.word	0x0f424000
    37ac:	1e847fff 	.word	0x1e847fff

000037b0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    37b0:	0b41      	lsrs	r1, r0, #13
    37b2:	f248 6237 	movw	r2, #34359	; 0x8637
    37b6:	4351      	muls	r1, r2
    37b8:	0c0a      	lsrs	r2, r1, #16
    37ba:	4b09      	ldr	r3, [pc, #36]	; (37e0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    37bc:	0251      	lsls	r1, r2, #9
    37be:	fb02 0203 	mla	r2, r2, r3, r0
    37c2:	4808      	ldr	r0, [pc, #32]	; (37e4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    37c4:	4350      	muls	r0, r2
    37c6:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    37ca:	306e      	adds	r0, #110	; 0x6e
    37cc:	0d40      	lsrs	r0, r0, #21
    37ce:	425b      	negs	r3, r3
    37d0:	fb10 f303 	smulbb	r3, r0, r3
    37d4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    37d8:	bf88      	it	hi
    37da:	1c49      	addhi	r1, r1, #1
    37dc:	4408      	add	r0, r1
    37de:	4770      	bx	lr
    37e0:	ffffc2f7 	.word	0xffffc2f7
    37e4:	00010c6f 	.word	0x00010c6f

000037e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    37e8:	0b43      	lsrs	r3, r0, #13
    37ea:	f248 6c37 	movw	ip, #34359	; 0x8637
    37ee:	fb03 f30c 	mul.w	r3, r3, ip
    37f2:	b430      	push	{r4, r5}
    37f4:	0c1b      	lsrs	r3, r3, #16
    37f6:	f8df c044 	ldr.w	ip, [pc, #68]	; 383c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    37fa:	025c      	lsls	r4, r3, #9
    37fc:	fb03 030c 	mla	r3, r3, ip, r0
    3800:	480f      	ldr	r0, [pc, #60]	; (3840 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3802:	4358      	muls	r0, r3
    3804:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3808:	eb04 000c 	add.w	r0, r4, ip
    380c:	f643 5409 	movw	r4, #15625	; 0x3d09
    3810:	fb1c f404 	smulbb	r4, ip, r4
    3814:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3818:	f643 5508 	movw	r5, #15624	; 0x3d08
    381c:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3820:	442c      	add	r4, r5
    3822:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3826:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    382a:	bf84      	itt	hi
    382c:	f04f 0c00 	movhi.w	ip, #0
    3830:	1c40      	addhi	r0, r0, #1
    3832:	6008      	str	r0, [r1, #0]
    3834:	f882 c000 	strb.w	ip, [r2]
    3838:	bc30      	pop	{r4, r5}
    383a:	4770      	bx	lr
    383c:	ffffc2f7 	.word	0xffffc2f7
    3840:	00010c6f 	.word	0x00010c6f

00003844 <MPSL_IRQ_RTC0_Handler>:
    3844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3848:	4c38      	ldr	r4, [pc, #224]	; (392c <MPSL_IRQ_RTC0_Handler+0xe8>)
    384a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    384e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 3930 <MPSL_IRQ_RTC0_Handler+0xec>
    3852:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3856:	f44f 6600 	mov.w	r6, #2048	; 0x800
    385a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    385e:	f04f 0500 	mov.w	r5, #0
    3862:	d019      	beq.n	3898 <MPSL_IRQ_RTC0_Handler+0x54>
    3864:	4833      	ldr	r0, [pc, #204]	; (3934 <MPSL_IRQ_RTC0_Handler+0xf0>)
    3866:	6800      	ldr	r0, [r0, #0]
    3868:	b1b0      	cbz	r0, 3898 <MPSL_IRQ_RTC0_Handler+0x54>
    386a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    386e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3872:	f8d4 0540 	ldr.w	r0, [r4, #1344]	; 0x540
    3876:	f8d8 1000 	ldr.w	r1, [r8]
    387a:	1a40      	subs	r0, r0, r1
    387c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3880:	2802      	cmp	r0, #2
    3882:	d302      	bcc.n	388a <MPSL_IRQ_RTC0_Handler+0x46>
    3884:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3888:	d906      	bls.n	3898 <MPSL_IRQ_RTC0_Handler+0x54>
    388a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    388e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3892:	2004      	movs	r0, #4
    3894:	f7fe ff1c 	bl	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3898:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    389c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    38a0:	d01a      	beq.n	38d8 <MPSL_IRQ_RTC0_Handler+0x94>
    38a2:	4825      	ldr	r0, [pc, #148]	; (3938 <MPSL_IRQ_RTC0_Handler+0xf4>)
    38a4:	6800      	ldr	r0, [r0, #0]
    38a6:	b1b8      	cbz	r0, 38d8 <MPSL_IRQ_RTC0_Handler+0x94>
    38a8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    38ac:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38b0:	4822      	ldr	r0, [pc, #136]	; (393c <MPSL_IRQ_RTC0_Handler+0xf8>)
    38b2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    38b6:	f8d8 1000 	ldr.w	r1, [r8]
    38ba:	1a40      	subs	r0, r0, r1
    38bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    38c0:	2802      	cmp	r0, #2
    38c2:	d302      	bcc.n	38ca <MPSL_IRQ_RTC0_Handler+0x86>
    38c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    38c8:	d906      	bls.n	38d8 <MPSL_IRQ_RTC0_Handler+0x94>
    38ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    38ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    38d2:	2005      	movs	r0, #5
    38d4:	f7fe fefc 	bl	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38d8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38dc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    38e0:	bf08      	it	eq
    38e2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    38e6:	4816      	ldr	r0, [pc, #88]	; (3940 <MPSL_IRQ_RTC0_Handler+0xfc>)
    38e8:	6800      	ldr	r0, [r0, #0]
    38ea:	2800      	cmp	r0, #0
    38ec:	bf08      	it	eq
    38ee:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    38f2:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    38f6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38fa:	4812      	ldr	r0, [pc, #72]	; (3944 <MPSL_IRQ_RTC0_Handler+0x100>)
    38fc:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3900:	f8d8 1000 	ldr.w	r1, [r8]
    3904:	1a40      	subs	r0, r0, r1
    3906:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    390a:	2802      	cmp	r0, #2
    390c:	d304      	bcc.n	3918 <MPSL_IRQ_RTC0_Handler+0xd4>
    390e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3912:	bf98      	it	ls
    3914:	e8bd 81f0 	ldmials.w	sp!, {r4, r5, r6, r7, r8, pc}
    3918:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    391c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3924:	2006      	movs	r0, #6
    3926:	f7fe bed3 	b.w	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    392a:	0000      	.short	0x0000
    392c:	4000b000 	.word	0x4000b000
    3930:	4000b504 	.word	0x4000b504
    3934:	4000b140 	.word	0x4000b140
    3938:	4000b144 	.word	0x4000b144
    393c:	4000b004 	.word	0x4000b004
    3940:	4000b148 	.word	0x4000b148
    3944:	4000b008 	.word	0x4000b008

00003948 <MPSL_IRQ_TIMER0_Handler>:
    3948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    394c:	4d38      	ldr	r5, [pc, #224]	; (3a30 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    394e:	7828      	ldrb	r0, [r5, #0]
    3950:	2804      	cmp	r0, #4
    3952:	d068      	beq.n	3a26 <MPSL_IRQ_TIMER0_Handler+0xde>
    3954:	1ce8      	adds	r0, r5, #3
    3956:	2201      	movs	r2, #1
    3958:	7801      	ldrb	r1, [r0, #0]
    395a:	b159      	cbz	r1, 3974 <MPSL_IRQ_TIMER0_Handler+0x2c>
    395c:	2901      	cmp	r1, #1
    395e:	bf08      	it	eq
    3960:	706a      	strbeq	r2, [r5, #1]
    3962:	d002      	beq.n	396a <MPSL_IRQ_TIMER0_Handler+0x22>
    3964:	7869      	ldrb	r1, [r5, #1]
    3966:	2900      	cmp	r1, #0
    3968:	d058      	beq.n	3a1c <MPSL_IRQ_TIMER0_Handler+0xd4>
    396a:	2102      	movs	r1, #2
    396c:	7001      	strb	r1, [r0, #0]
    396e:	7840      	ldrb	r0, [r0, #1]
    3970:	f000 fafe 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3974:	4c2f      	ldr	r4, [pc, #188]	; (3a34 <MPSL_IRQ_TIMER0_Handler+0xec>)
    3976:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    397a:	f04f 0800 	mov.w	r8, #0
    397e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3982:	f44f 7780 	mov.w	r7, #256	; 0x100
    3986:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    398a:	d00a      	beq.n	39a2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    398c:	482a      	ldr	r0, [pc, #168]	; (3a38 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    398e:	6800      	ldr	r0, [r0, #0]
    3990:	b138      	cbz	r0, 39a2 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3992:	2003      	movs	r0, #3
    3994:	f000 faec 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3998:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    399c:	2003      	movs	r0, #3
    399e:	f7fe fe97 	bl	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    39a2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    39a6:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    39aa:	d00a      	beq.n	39c2 <MPSL_IRQ_TIMER0_Handler+0x7a>
    39ac:	4823      	ldr	r0, [pc, #140]	; (3a3c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    39ae:	6800      	ldr	r0, [r0, #0]
    39b0:	b138      	cbz	r0, 39c2 <MPSL_IRQ_TIMER0_Handler+0x7a>
    39b2:	2002      	movs	r0, #2
    39b4:	f000 fadc 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    39b8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    39bc:	2002      	movs	r0, #2
    39be:	f7fe fe87 	bl	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    39c2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    39c6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    39ca:	d00a      	beq.n	39e2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    39cc:	481c      	ldr	r0, [pc, #112]	; (3a40 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    39ce:	6800      	ldr	r0, [r0, #0]
    39d0:	b138      	cbz	r0, 39e2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    39d2:	2001      	movs	r0, #1
    39d4:	f000 facc 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    39d8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    39dc:	2001      	movs	r0, #1
    39de:	f7fe fe77 	bl	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    39e2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    39e6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    39ea:	bf08      	it	eq
    39ec:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    39f0:	4814      	ldr	r0, [pc, #80]	; (3a44 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    39f2:	6800      	ldr	r0, [r0, #0]
    39f4:	2800      	cmp	r0, #0
    39f6:	bf08      	it	eq
    39f8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    39fc:	2000      	movs	r0, #0
    39fe:	f000 fab7 	bl	3f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3a02:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3a06:	2004      	movs	r0, #4
    3a08:	7028      	strb	r0, [r5, #0]
    3a0a:	f8c5 8008 	str.w	r8, [r5, #8]
    3a0e:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a16:	2000      	movs	r0, #0
    3a18:	f7fe be5a 	b.w	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3a1c:	f240 412b 	movw	r1, #1067	; 0x42b
    3a20:	206c      	movs	r0, #108	; 0x6c
    3a22:	f000 ff23 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a2a:	2007      	movs	r0, #7
    3a2c:	f7fe be50 	b.w	26d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3a30:	20000028 	.word	0x20000028
    3a34:	40008000 	.word	0x40008000
    3a38:	4000814c 	.word	0x4000814c
    3a3c:	40008148 	.word	0x40008148
    3a40:	40008144 	.word	0x40008144
    3a44:	40008140 	.word	0x40008140
    3a48:	2201      	movs	r2, #1
    3a4a:	0211      	lsls	r1, r2, #8
    3a4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a50:	2000      	movs	r0, #0
    3a52:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3a56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3a5a:	f3bf 8f4f 	dsb	sy
    3a5e:	f3bf 8f6f 	isb	sy
    3a62:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3a66:	490e      	ldr	r1, [pc, #56]	; (3aa0 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3a68:	f841 2f04 	str.w	r2, [r1, #4]!
    3a6c:	1e43      	subs	r3, r0, #1
    3a6e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3a72:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3a76:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3a7a:	4b0a      	ldr	r3, [pc, #40]	; (3aa4 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3a7c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a80:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3a84:	1d1b      	adds	r3, r3, #4
    3a86:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a8a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3a8e:	1d1b      	adds	r3, r3, #4
    3a90:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3a94:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3a98:	60ca      	str	r2, [r1, #12]
    3a9a:	4903      	ldr	r1, [pc, #12]	; (3aa8 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3a9c:	7048      	strb	r0, [r1, #1]
    3a9e:	4770      	bx	lr
    3aa0:	40008000 	.word	0x40008000
    3aa4:	40008004 	.word	0x40008004
    3aa8:	20000028 	.word	0x20000028

00003aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3aac:	4801      	ldr	r0, [pc, #4]	; (3ab4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3aae:	6800      	ldr	r0, [r0, #0]
    3ab0:	4770      	bx	lr
    3ab2:	0000      	.short	0x0000
    3ab4:	4000b504 	.word	0x4000b504

00003ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3abc:	4e48      	ldr	r6, [pc, #288]	; (3be0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3abe:	4605      	mov	r5, r0
    3ac0:	1ef7      	subs	r7, r6, #3
    3ac2:	7833      	ldrb	r3, [r6, #0]
    3ac4:	68f9      	ldr	r1, [r7, #12]
    3ac6:	2b01      	cmp	r3, #1
    3ac8:	bf04      	itt	eq
    3aca:	42a9      	cmpeq	r1, r5
    3acc:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ad0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3ad4:	4a43      	ldr	r2, [pc, #268]	; (3be4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3ad6:	6010      	str	r0, [r2, #0]
    3ad8:	4a43      	ldr	r2, [pc, #268]	; (3be8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3ada:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3ade:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3ae2:	f102 0004 	add.w	r0, r2, #4
    3ae6:	f04f 0400 	mov.w	r4, #0
    3aea:	2b00      	cmp	r3, #0
    3aec:	d063      	beq.n	3bb6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3aee:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3af2:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3af6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3afa:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3afe:	483b      	ldr	r0, [pc, #236]	; (3bec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3b00:	6800      	ldr	r0, [r0, #0]
    3b02:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3b06:	f04f 0801 	mov.w	r8, #1
    3b0a:	2800      	cmp	r0, #0
    3b0c:	bf04      	itt	eq
    3b0e:	f44f 6000 	moveq.w	r0, #2048	; 0x800
    3b12:	f8c9 0280 	streq.w	r0, [r9, #640]	; 0x280
    3b16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3b1a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    3b1e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    3b22:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3b26:	4832      	ldr	r0, [pc, #200]	; (3bf0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3b28:	f8d0 c000 	ldr.w	ip, [r0]
    3b2c:	eba5 0c0c 	sub.w	ip, r5, ip
    3b30:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3b34:	f1bc 0f02 	cmp.w	ip, #2
    3b38:	d34a      	bcc.n	3bd0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3b3a:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    3b3e:	d847      	bhi.n	3bd0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>
    3b40:	f8c2 5540 	str.w	r5, [r2, #1344]	; 0x540
    3b44:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    3b48:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
    3b4c:	b12b      	cbz	r3, 3b5a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa2>
    3b4e:	6802      	ldr	r2, [r0, #0]
    3b50:	1a8a      	subs	r2, r1, r2
    3b52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3b56:	2a02      	cmp	r2, #2
    3b58:	d3f9      	bcc.n	3b4e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x96>
    3b5a:	f8c7 8008 	str.w	r8, [r7, #8]
    3b5e:	703c      	strb	r4, [r7, #0]
    3b60:	f7ff ff72 	bl	3a48 <MPSL_IRQ_TIMER0_Handler+0x100>
    3b64:	4823      	ldr	r0, [pc, #140]	; (3bf4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    3b66:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3b6a:	f364 0101 	bfi	r1, r4, #0, #2
    3b6e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3b72:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3b76:	2102      	movs	r1, #2
    3b78:	f361 0201 	bfi	r2, r1, #0, #2
    3b7c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3b80:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3b84:	2104      	movs	r1, #4
    3b86:	f361 0203 	bfi	r2, r1, #0, #4
    3b8a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    3b8e:	f8c0 800c 	str.w	r8, [r0, #12]
    3b92:	68b9      	ldr	r1, [r7, #8]
    3b94:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3b98:	1580      	asrs	r0, r0, #22
    3b9a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3b9e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3ba2:	4915      	ldr	r1, [pc, #84]	; (3bf8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    3ba4:	05c0      	lsls	r0, r0, #23
    3ba6:	6008      	str	r0, [r1, #0]
    3ba8:	2004      	movs	r0, #4
    3baa:	60fd      	str	r5, [r7, #12]
    3bac:	7070      	strb	r0, [r6, #1]
    3bae:	f886 8000 	strb.w	r8, [r6]
    3bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bb6:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3bba:	f8c2 c348 	str.w	ip, [r2, #840]	; 0x348
    3bbe:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    3bc2:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3bc6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3bca:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    3bce:	e796      	b.n	3afe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3bd0:	2000      	movs	r0, #0
    3bd2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3bd6:	f240 2169 	movw	r1, #617	; 0x269
    3bda:	206c      	movs	r0, #108	; 0x6c
    3bdc:	f000 fe46 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be0:	2000002b 	.word	0x2000002b
    3be4:	4001f508 	.word	0x4001f508
    3be8:	4000b000 	.word	0x4000b000
    3bec:	4000b148 	.word	0x4000b148
    3bf0:	4000b504 	.word	0x4000b504
    3bf4:	40008000 	.word	0x40008000
    3bf8:	4001f504 	.word	0x4001f504

00003bfc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3bfc:	b570      	push	{r4, r5, r6, lr}
    3bfe:	4c2a      	ldr	r4, [pc, #168]	; (3ca8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    3c00:	68e1      	ldr	r1, [r4, #12]
    3c02:	4281      	cmp	r1, r0
    3c04:	bf14      	ite	ne
    3c06:	2201      	movne	r2, #1
    3c08:	2200      	moveq	r2, #0
    3c0a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 3cac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    3c0e:	f89c 5000 	ldrb.w	r5, [ip]
    3c12:	2d02      	cmp	r5, #2
    3c14:	d002      	beq.n	3c1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3c16:	2a00      	cmp	r2, #0
    3c18:	d034      	beq.n	3c84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    3c1a:	e002      	b.n	3c22 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3c1c:	2a00      	cmp	r2, #0
    3c1e:	bf08      	it	eq
    3c20:	bd70      	popeq	{r4, r5, r6, pc}
    3c22:	7862      	ldrb	r2, [r4, #1]
    3c24:	b39a      	cbz	r2, 3c8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3c26:	4b22      	ldr	r3, [pc, #136]	; (3cb0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3c2c:	601a      	str	r2, [r3, #0]
    3c2e:	4b21      	ldr	r3, [pc, #132]	; (3cb4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    3c30:	1392      	asrs	r2, r2, #14
    3c32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    3c36:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    3c3a:	2200      	movs	r2, #0
    3c3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    3c40:	4a1d      	ldr	r2, [pc, #116]	; (3cb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3c42:	6816      	ldr	r6, [r2, #0]
    3c44:	1b86      	subs	r6, r0, r6
    3c46:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    3c4a:	2e02      	cmp	r6, #2
    3c4c:	d324      	bcc.n	3c98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3c4e:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    3c52:	d821      	bhi.n	3c98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3c54:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3c58:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    3c5c:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    3c60:	b12d      	cbz	r5, 3c6e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    3c62:	6813      	ldr	r3, [r2, #0]
    3c64:	1acb      	subs	r3, r1, r3
    3c66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3c6a:	2b02      	cmp	r3, #2
    3c6c:	d3f9      	bcc.n	3c62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    3c6e:	4b13      	ldr	r3, [pc, #76]	; (3cbc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3c70:	2102      	movs	r1, #2
    3c72:	074a      	lsls	r2, r1, #29
    3c74:	601a      	str	r2, [r3, #0]
    3c76:	60e0      	str	r0, [r4, #12]
    3c78:	2004      	movs	r0, #4
    3c7a:	f88c 0001 	strb.w	r0, [ip, #1]
    3c7e:	f88c 1000 	strb.w	r1, [ip]
    3c82:	bd70      	pop	{r4, r5, r6, pc}
    3c84:	f240 2177 	movw	r1, #631	; 0x277
    3c88:	206c      	movs	r0, #108	; 0x6c
    3c8a:	f000 fdef 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c8e:	f240 217b 	movw	r1, #635	; 0x27b
    3c92:	206c      	movs	r0, #108	; 0x6c
    3c94:	f000 fdea 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c98:	2000      	movs	r0, #0
    3c9a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3c9e:	f240 2187 	movw	r1, #647	; 0x287
    3ca2:	206c      	movs	r0, #108	; 0x6c
    3ca4:	f000 fde2 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ca8:	20000028 	.word	0x20000028
    3cac:	2000002b 	.word	0x2000002b
    3cb0:	4001f508 	.word	0x4001f508
    3cb4:	4000b000 	.word	0x4000b000
    3cb8:	4000b504 	.word	0x4000b504
    3cbc:	4001f504 	.word	0x4001f504

00003cc0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3cc0:	4801      	ldr	r0, [pc, #4]	; (3cc8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3cc2:	68c0      	ldr	r0, [r0, #12]
    3cc4:	4770      	bx	lr
    3cc6:	0000      	.short	0x0000
    3cc8:	20000028 	.word	0x20000028

00003ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cd0:	4836      	ldr	r0, [pc, #216]	; (3dac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3cd2:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
    3cd6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3cda:	4a35      	ldr	r2, [pc, #212]	; (3db0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3cdc:	f100 0c04 	add.w	ip, r0, #4
    3ce0:	2100      	movs	r1, #0
    3ce2:	7813      	ldrb	r3, [r2, #0]
    3ce4:	b16b      	cbz	r3, 3d02 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3ce6:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3cea:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3cee:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    3cf2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3cf6:	482f      	ldr	r0, [pc, #188]	; (3db4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3cf8:	6800      	ldr	r0, [r0, #0]
    3cfa:	f04f 0c01 	mov.w	ip, #1
    3cfe:	b998      	cbnz	r0, 3d28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5c>
    3d00:	e00c      	b.n	3d1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    3d02:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3d06:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3d0a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3d0e:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3d12:	f8cc 1540 	str.w	r1, [ip, #1344]	; 0x540
    3d16:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3d1a:	e7ec      	b.n	3cf6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2a>
    3d1c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3d20:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3d24:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3d28:	2b02      	cmp	r3, #2
    3d2a:	d004      	beq.n	3d36 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6a>
    3d2c:	f240 2193 	movw	r1, #659	; 0x293
    3d30:	206c      	movs	r0, #108	; 0x6c
    3d32:	f000 fd9b 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d36:	4e20      	ldr	r6, [pc, #128]	; (3db8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3d38:	6830      	ldr	r0, [r6, #0]
    3d3a:	4c20      	ldr	r4, [pc, #128]	; (3dbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3d3c:	1cc0      	adds	r0, r0, #3
    3d3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d42:	68e3      	ldr	r3, [r4, #12]
    3d44:	4d1e      	ldr	r5, [pc, #120]	; (3dc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3d46:	4298      	cmp	r0, r3
    3d48:	d00b      	beq.n	3d62 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3d4a:	6837      	ldr	r7, [r6, #0]
    3d4c:	1bdf      	subs	r7, r3, r7
    3d4e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3d52:	2f04      	cmp	r7, #4
    3d54:	d305      	bcc.n	3d62 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3d56:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    3d5a:	d802      	bhi.n	3d62 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3d5c:	f7ff feac 	bl	3ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3d60:	e01e      	b.n	3da0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    3d62:	6830      	ldr	r0, [r6, #0]
    3d64:	1a18      	subs	r0, r3, r0
    3d66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d6a:	2802      	cmp	r0, #2
    3d6c:	d315      	bcc.n	3d9a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    3d6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3d72:	d812      	bhi.n	3d9a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xce>
    3d74:	4b13      	ldr	r3, [pc, #76]	; (3dc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    3d76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3d7a:	6018      	str	r0, [r3, #0]
    3d7c:	f8c4 c008 	str.w	ip, [r4, #8]
    3d80:	7021      	strb	r1, [r4, #0]
    3d82:	f8c5 c004 	str.w	ip, [r5, #4]
    3d86:	f8c5 c00c 	str.w	ip, [r5, #12]
    3d8a:	0040      	lsls	r0, r0, #1
    3d8c:	1f19      	subs	r1, r3, #4
    3d8e:	6008      	str	r0, [r1, #0]
    3d90:	2004      	movs	r0, #4
    3d92:	7050      	strb	r0, [r2, #1]
    3d94:	f882 c000 	strb.w	ip, [r2]
    3d98:	e002      	b.n	3da0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>
    3d9a:	f8c4 c008 	str.w	ip, [r4, #8]
    3d9e:	7021      	strb	r1, [r4, #0]
    3da0:	68a0      	ldr	r0, [r4, #8]
    3da2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3daa:	0000      	.short	0x0000
    3dac:	4000b000 	.word	0x4000b000
    3db0:	2000002b 	.word	0x2000002b
    3db4:	4000b148 	.word	0x4000b148
    3db8:	4000b504 	.word	0x4000b504
    3dbc:	20000028 	.word	0x20000028
    3dc0:	40008000 	.word	0x40008000
    3dc4:	4001f508 	.word	0x4001f508

00003dc8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3dcc:	4c63      	ldr	r4, [pc, #396]	; (3f5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x194>)
    3dce:	2700      	movs	r7, #0
    3dd0:	2601      	movs	r6, #1
    3dd2:	f894 c000 	ldrb.w	ip, [r4]
    3dd6:	7865      	ldrb	r5, [r4, #1]
    3dd8:	f44f 74a0 	mov.w	r4, #320	; 0x140
    3ddc:	2807      	cmp	r0, #7
    3dde:	d27b      	bcs.n	3ed8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x110>
    3de0:	e8df f000 	tbb	[pc, r0]
    3de4:	04040404 	.word	0x04040404
    3de8:	006a6a6a 	.word	0x006a6a6a
    3dec:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3f60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    3df0:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3df4:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3df8:	bf04      	itt	eq
    3dfa:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    3dfe:	f1b8 0f00 	cmpeq.w	r8, #0
    3e02:	d003      	beq.n	3e0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x44>
    3e04:	f1bc 0f02 	cmp.w	ip, #2
    3e08:	d005      	beq.n	3e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4e>
    3e0a:	e02c      	b.n	3e66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9e>
    3e0c:	f240 21d6 	movw	r1, #726	; 0x2d6
    3e10:	206c      	movs	r0, #108	; 0x6c
    3e12:	f000 fd2b 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e16:	f1a5 0804 	sub.w	r8, r5, #4
    3e1a:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3e1e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    3e22:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
    3e26:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3e2a:	2400      	movs	r4, #0
    3e2c:	f1bc 0f01 	cmp.w	ip, #1
    3e30:	d003      	beq.n	3e3a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x72>
    3e32:	f1bc 0f02 	cmp.w	ip, #2
    3e36:	d00a      	beq.n	3e4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3e38:	e012      	b.n	3e60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    3e3a:	2d04      	cmp	r5, #4
    3e3c:	bf24      	itt	cs
    3e3e:	f8d8 9000 	ldrcs.w	r9, [r8]
    3e42:	f1b9 0f00 	cmpcs.w	r9, #0
    3e46:	bf08      	it	eq
    3e48:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    3e4c:	e008      	b.n	3e60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x98>
    3e4e:	2d04      	cmp	r5, #4
    3e50:	bf24      	itt	cs
    3e52:	f8d8 9000 	ldrcs.w	r9, [r8]
    3e56:	f1b9 0f00 	cmpcs.w	r9, #0
    3e5a:	bf08      	it	eq
    3e5c:	f044 4480 	orreq.w	r4, r4, #1073741824	; 0x40000000
    3e60:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3e64:	d1e1      	bne.n	3e2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3e66:	4c3f      	ldr	r4, [pc, #252]	; (3f64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>)
    3e68:	f100 0c10 	add.w	ip, r0, #16
    3e6c:	fa06 fc0c 	lsl.w	ip, r6, ip
    3e70:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3e74:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3e78:	b1aa      	cbz	r2, 3ea6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xde>
    3e7a:	f04f 0840 	mov.w	r8, #64	; 0x40
    3e7e:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    3e82:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3e86:	44a0      	add	r8, r4
    3e88:	f8c8 6000 	str.w	r6, [r8]
    3e8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3e90:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3e94:	eba1 0000 	sub.w	r0, r1, r0
    3e98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3e9c:	4290      	cmp	r0, r2
    3e9e:	bf38      	it	cc
    3ea0:	f8c5 7540 	strcc.w	r7, [r5, #1344]	; 0x540
    3ea4:	d351      	bcc.n	3f4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    3ea6:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    3eaa:	2b01      	cmp	r3, #1
    3eac:	bf08      	it	eq
    3eae:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3eb2:	2001      	movs	r0, #1
    3eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3eb8:	f1bc 0f00 	cmp.w	ip, #0
    3ebc:	d006      	beq.n	3ecc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    3ebe:	4285      	cmp	r5, r0
    3ec0:	d104      	bne.n	3ecc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x104>
    3ec2:	f240 21f9 	movw	r1, #761	; 0x2f9
    3ec6:	206c      	movs	r0, #108	; 0x6c
    3ec8:	f000 fcd0 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ecc:	f1a0 0c04 	sub.w	ip, r0, #4
    3ed0:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3ed4:	2b01      	cmp	r3, #1
    3ed6:	e000      	b.n	3eda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x112>
    3ed8:	e03a      	b.n	3f50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3eda:	bf0c      	ite	eq
    3edc:	2501      	moveq	r5, #1
    3ede:	2500      	movne	r5, #0
    3ee0:	f1bc 0f03 	cmp.w	ip, #3
    3ee4:	d304      	bcc.n	3ef0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x128>
    3ee6:	f240 11bd 	movw	r1, #445	; 0x1bd
    3eea:	206c      	movs	r0, #108	; 0x6c
    3eec:	f000 fcbe 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ef0:	f10c 0310 	add.w	r3, ip, #16
    3ef4:	fa06 f303 	lsl.w	r3, r6, r3
    3ef8:	4e1b      	ldr	r6, [pc, #108]	; (3f68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3efa:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    3efe:	f8c6 3348 	str.w	r3, [r6, #840]	; 0x348
    3f02:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    3f06:	f846 700c 	str.w	r7, [r6, ip]
    3f0a:	1f00      	subs	r0, r0, #4
    3f0c:	b2c0      	uxtb	r0, r0
    3f0e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    3f12:	b17a      	cbz	r2, 3f34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>
    3f14:	f8df c054 	ldr.w	ip, [pc, #84]	; 3f6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3f18:	f8dc c000 	ldr.w	ip, [ip]
    3f1c:	eba1 0c0c 	sub.w	ip, r1, ip
    3f20:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    3f24:	4562      	cmp	r2, ip
    3f26:	bf92      	itee	ls
    3f28:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    3f2c:	2100      	movhi	r1, #0
    3f2e:	f8c0 1540 	strhi.w	r1, [r0, #1344]	; 0x540
    3f32:	d80a      	bhi.n	3f4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x182>
    3f34:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3f38:	2d00      	cmp	r5, #0
    3f3a:	bf18      	it	ne
    3f3c:	f8c6 3304 	strne.w	r3, [r6, #772]	; 0x304
    3f40:	f8c6 3344 	str.w	r3, [r6, #836]	; 0x344
    3f44:	2001      	movs	r0, #1
    3f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f4a:	2000      	movs	r0, #0
    3f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f50:	f240 21fe 	movw	r1, #766	; 0x2fe
    3f54:	206c      	movs	r0, #108	; 0x6c
    3f56:	f000 fc89 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f5a:	0000      	.short	0x0000
    3f5c:	2000002b 	.word	0x2000002b
    3f60:	20000028 	.word	0x20000028
    3f64:	40008000 	.word	0x40008000
    3f68:	4000b000 	.word	0x4000b000
    3f6c:	4000b504 	.word	0x4000b504

00003f70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3f74:	2601      	movs	r6, #1
    3f76:	2700      	movs	r7, #0
    3f78:	f44f 78a0 	mov.w	r8, #320	; 0x140
    3f7c:	2807      	cmp	r0, #7
    3f7e:	d251      	bcs.n	4024 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    3f80:	e8df f000 	tbb	[pc, r0]
    3f84:	04040404 	.word	0x04040404
    3f88:	00191919 	.word	0x00191919
    3f8c:	f100 0110 	add.w	r1, r0, #16
    3f90:	fa06 f201 	lsl.w	r2, r6, r1
    3f94:	4926      	ldr	r1, [pc, #152]	; (4030 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3f96:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3f9a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3f9e:	2200      	movs	r2, #0
    3fa0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3fa4:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    3fa8:	508f      	str	r7, [r1, r2]
    3faa:	4922      	ldr	r1, [pc, #136]	; (4034 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3fac:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3fb0:	9000      	str	r0, [sp, #0]
    3fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3fb6:	4d20      	ldr	r5, [pc, #128]	; (4038 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3fb8:	1f01      	subs	r1, r0, #4
    3fba:	b2cc      	uxtb	r4, r1
    3fbc:	7829      	ldrb	r1, [r5, #0]
    3fbe:	b179      	cbz	r1, 3fe0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3fc0:	786a      	ldrb	r2, [r5, #1]
    3fc2:	4282      	cmp	r2, r0
    3fc4:	d10c      	bne.n	3fe0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    3fc6:	4a1d      	ldr	r2, [pc, #116]	; (403c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3fc8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3fcc:	6010      	str	r0, [r2, #0]
    3fce:	2901      	cmp	r1, #1
    3fd0:	bf08      	it	eq
    3fd2:	f7ff fd39 	bleq	3a48 <MPSL_IRQ_TIMER0_Handler+0x100>
    3fd6:	702f      	strb	r7, [r5, #0]
    3fd8:	4919      	ldr	r1, [pc, #100]	; (4040 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3fda:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3fde:	60c8      	str	r0, [r1, #12]
    3fe0:	4918      	ldr	r1, [pc, #96]	; (4044 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3fe2:	f104 0010 	add.w	r0, r4, #16
    3fe6:	fa06 f000 	lsl.w	r0, r6, r0
    3fea:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3fee:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    3ff2:	00a0      	lsls	r0, r4, #2
    3ff4:	4408      	add	r0, r1
    3ff6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3ffa:	4a13      	ldr	r2, [pc, #76]	; (4048 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3ffc:	6812      	ldr	r2, [r2, #0]
    3ffe:	1a80      	subs	r0, r0, r2
    4000:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4004:	2802      	cmp	r0, #2
    4006:	d307      	bcc.n	4018 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    4008:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    400c:	2000      	movs	r0, #0
    400e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4012:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    4016:	500f      	str	r7, [r1, r0]
    4018:	480c      	ldr	r0, [pc, #48]	; (404c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    401a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    401e:	9000      	str	r0, [sp, #0]
    4020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4024:	f240 317f 	movw	r1, #895	; 0x37f
    4028:	206c      	movs	r0, #108	; 0x6c
    402a:	f000 fc1f 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    402e:	0000      	.short	0x0000
    4030:	40008000 	.word	0x40008000
    4034:	40008140 	.word	0x40008140
    4038:	2000002b 	.word	0x2000002b
    403c:	4001f508 	.word	0x4001f508
    4040:	20000028 	.word	0x20000028
    4044:	4000b000 	.word	0x4000b000
    4048:	4000b504 	.word	0x4000b504
    404c:	4000b140 	.word	0x4000b140

00004050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    4050:	4920      	ldr	r1, [pc, #128]	; (40d4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    4052:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    4056:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    405a:	481f      	ldr	r0, [pc, #124]	; (40d8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    405c:	1d0a      	adds	r2, r1, #4
    405e:	7803      	ldrb	r3, [r0, #0]
    4060:	2000      	movs	r0, #0
    4062:	b15b      	cbz	r3, 407c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    4064:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    4068:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    406c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4070:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4074:	4919      	ldr	r1, [pc, #100]	; (40dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    4076:	6809      	ldr	r1, [r1, #0]
    4078:	b999      	cbnz	r1, 40a2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    407a:	e00c      	b.n	4096 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    407c:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    4080:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    4084:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4088:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    408c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4090:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4094:	e7ee      	b.n	4074 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    4096:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    409a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    409e:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    40a2:	490f      	ldr	r1, [pc, #60]	; (40e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    40a4:	f04f 32ff 	mov.w	r2, #4294967295
    40a8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    40ac:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    40b0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    40b4:	1d0a      	adds	r2, r1, #4
    40b6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    40ba:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    40be:	1d12      	adds	r2, r2, #4
    40c0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    40c4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    40c8:	1d12      	adds	r2, r2, #4
    40ca:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    40ce:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    40d2:	4770      	bx	lr
    40d4:	4000b000 	.word	0x4000b000
    40d8:	2000002b 	.word	0x2000002b
    40dc:	4000b148 	.word	0x4000b148
    40e0:	40008000 	.word	0x40008000

000040e4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    40e4:	4808      	ldr	r0, [pc, #32]	; (4108 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    40e6:	f990 0002 	ldrsb.w	r0, [r0, #2]
    40ea:	2800      	cmp	r0, #0
    40ec:	bfb8      	it	lt
    40ee:	4770      	bxlt	lr
    40f0:	f000 011f 	and.w	r1, r0, #31
    40f4:	2201      	movs	r2, #1
    40f6:	fa02 f101 	lsl.w	r1, r2, r1
    40fa:	0940      	lsrs	r0, r0, #5
    40fc:	0080      	lsls	r0, r0, #2
    40fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4102:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4106:	4770      	bx	lr
    4108:	20000028 	.word	0x20000028

0000410c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    410c:	b510      	push	{r4, lr}
    410e:	2807      	cmp	r0, #7
    4110:	d20d      	bcs.n	412e <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    4112:	e8df f000 	tbb	[pc, r0]
    4116:	0404      	.short	0x0404
    4118:	06060404 	.word	0x06060404
    411c:	0006      	.short	0x0006
    411e:	4906      	ldr	r1, [pc, #24]	; (4138 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    4120:	e002      	b.n	4128 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    4122:	1f00      	subs	r0, r0, #4
    4124:	4905      	ldr	r1, [pc, #20]	; (413c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    4126:	b2c0      	uxtb	r0, r0
    4128:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    412c:	bd10      	pop	{r4, pc}
    412e:	f240 3122 	movw	r1, #802	; 0x322
    4132:	206c      	movs	r0, #108	; 0x6c
    4134:	f000 fb9a 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4138:	40008140 	.word	0x40008140
    413c:	4000b140 	.word	0x4000b140

00004140 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	481a      	ldr	r0, [pc, #104]	; (41ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    4144:	2400      	movs	r4, #0
    4146:	2104      	movs	r1, #4
    4148:	7004      	strb	r4, [r0, #0]
    414a:	1ec0      	subs	r0, r0, #3
    414c:	7001      	strb	r1, [r0, #0]
    414e:	0589      	lsls	r1, r1, #22
    4150:	60c1      	str	r1, [r0, #12]
    4152:	f7ff fc79 	bl	3a48 <MPSL_IRQ_TIMER0_Handler+0x100>
    4156:	2301      	movs	r3, #1
    4158:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    415c:	02dd      	lsls	r5, r3, #11
    415e:	f8cc 5180 	str.w	r5, [ip, #384]	; 0x180
    4162:	f3bf 8f4f 	dsb	sy
    4166:	f3bf 8f6f 	isb	sy
    416a:	f8cc 5280 	str.w	r5, [ip, #640]	; 0x280
    416e:	4a10      	ldr	r2, [pc, #64]	; (41b0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    4170:	6053      	str	r3, [r2, #4]
    4172:	6093      	str	r3, [r2, #8]
    4174:	480f      	ldr	r0, [pc, #60]	; (41b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    4176:	6801      	ldr	r1, [r0, #0]
    4178:	2900      	cmp	r1, #0
    417a:	d1fc      	bne.n	4176 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    417c:	1e48      	subs	r0, r1, #1
    417e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    4182:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    4186:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
    418a:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    418e:	480a      	ldr	r0, [pc, #40]	; (41b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    4190:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    4194:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    4198:	1d00      	adds	r0, r0, #4
    419a:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    419e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    41a2:	f8cc 5100 	str.w	r5, [ip, #256]	; 0x100
    41a6:	6013      	str	r3, [r2, #0]
    41a8:	bd70      	pop	{r4, r5, r6, pc}
    41aa:	0000      	.short	0x0000
    41ac:	2000002b 	.word	0x2000002b
    41b0:	4000b000 	.word	0x4000b000
    41b4:	4000b504 	.word	0x4000b504
    41b8:	4000b004 	.word	0x4000b004

000041bc <MPSL_IRQ_CLOCK_Handler>:
    41bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41c0:	4c16      	ldr	r4, [pc, #88]	; (421c <MPSL_IRQ_CLOCK_Handler+0x60>)
    41c2:	7a60      	ldrb	r0, [r4, #9]
    41c4:	2800      	cmp	r0, #0
    41c6:	d027      	beq.n	4218 <MPSL_IRQ_CLOCK_Handler+0x5c>
    41c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    41cc:	058d      	lsls	r5, r1, #22
    41ce:	4628      	mov	r0, r5
    41d0:	f008 fcaa 	bl	cb28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41d4:	4680      	mov	r8, r0
    41d6:	f44f 7182 	mov.w	r1, #260	; 0x104
    41da:	4628      	mov	r0, r5
    41dc:	f008 fca4 	bl	cb28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41e0:	2600      	movs	r6, #0
    41e2:	4607      	mov	r7, r0
    41e4:	f1b8 0f00 	cmp.w	r8, #0
    41e8:	d009      	beq.n	41fe <MPSL_IRQ_CLOCK_Handler+0x42>
    41ea:	2001      	movs	r0, #1
    41ec:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    41f0:	7920      	ldrb	r0, [r4, #4]
    41f2:	b120      	cbz	r0, 41fe <MPSL_IRQ_CLOCK_Handler+0x42>
    41f4:	7126      	strb	r6, [r4, #4]
    41f6:	69e0      	ldr	r0, [r4, #28]
    41f8:	b108      	cbz	r0, 41fe <MPSL_IRQ_CLOCK_Handler+0x42>
    41fa:	4780      	blx	r0
    41fc:	61e6      	str	r6, [r4, #28]
    41fe:	b137      	cbz	r7, 420e <MPSL_IRQ_CLOCK_Handler+0x52>
    4200:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    4204:	2002      	movs	r0, #2
    4206:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    420a:	f000 fa63 	bl	46d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    420e:	4640      	mov	r0, r8
    4210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4214:	f000 b858 	b.w	42c8 <MPSL_IRQ_CLOCK_Handler+0x10c>
    4218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    421c:	20000038 	.word	0x20000038
    4220:	b510      	push	{r4, lr}
    4222:	f008 fd2b 	bl	cc7c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4226:	b930      	cbnz	r0, 4236 <MPSL_IRQ_CLOCK_Handler+0x7a>
    4228:	f008 fd49 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    422c:	b918      	cbnz	r0, 4236 <MPSL_IRQ_CLOCK_Handler+0x7a>
    422e:	f008 fd7c 	bl	cd2a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4232:	2800      	cmp	r0, #0
    4234:	d002      	beq.n	423c <MPSL_IRQ_CLOCK_Handler+0x80>
    4236:	4902      	ldr	r1, [pc, #8]	; (4240 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4238:	2002      	movs	r0, #2
    423a:	6008      	str	r0, [r1, #0]
    423c:	bd10      	pop	{r4, pc}
    423e:	0000      	.short	0x0000
    4240:	40000c34 	.word	0x40000c34
    4244:	b570      	push	{r4, r5, r6, lr}
    4246:	f000 f98b 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    424a:	f000 fa97 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    424e:	4c09      	ldr	r4, [pc, #36]	; (4274 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4250:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4254:	b130      	cbz	r0, 4264 <MPSL_IRQ_CLOCK_Handler+0xa8>
    4256:	f7ff ffe3 	bl	4220 <MPSL_IRQ_CLOCK_Handler+0x64>
    425a:	2001      	movs	r0, #1
    425c:	6128      	str	r0, [r5, #16]
    425e:	2004      	movs	r0, #4
    4260:	72a0      	strb	r0, [r4, #10]
    4262:	e004      	b.n	426e <MPSL_IRQ_CLOCK_Handler+0xb2>
    4264:	2003      	movs	r0, #3
    4266:	72a0      	strb	r0, [r4, #10]
    4268:	2001      	movs	r0, #1
    426a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    426e:	2000      	movs	r0, #0
    4270:	71e0      	strb	r0, [r4, #7]
    4272:	bd70      	pop	{r4, r5, r6, pc}
    4274:	20000038 	.word	0x20000038
    4278:	b570      	push	{r4, r5, r6, lr}
    427a:	4c12      	ldr	r4, [pc, #72]	; (42c4 <MPSL_IRQ_CLOCK_Handler+0x108>)
    427c:	79a0      	ldrb	r0, [r4, #6]
    427e:	b1e0      	cbz	r0, 42ba <MPSL_IRQ_CLOCK_Handler+0xfe>
    4280:	79e1      	ldrb	r1, [r4, #7]
    4282:	1e40      	subs	r0, r0, #1
    4284:	4281      	cmp	r1, r0
    4286:	da18      	bge.n	42ba <MPSL_IRQ_CLOCK_Handler+0xfe>
    4288:	f000 fa78 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    428c:	4605      	mov	r5, r0
    428e:	f000 fb5d 	bl	494c <mpsl_temperature_get>
    4292:	79a1      	ldrb	r1, [r4, #6]
    4294:	2901      	cmp	r1, #1
    4296:	d902      	bls.n	429e <MPSL_IRQ_CLOCK_Handler+0xe2>
    4298:	79e1      	ldrb	r1, [r4, #7]
    429a:	1c49      	adds	r1, r1, #1
    429c:	71e1      	strb	r1, [r4, #7]
    429e:	b10d      	cbz	r5, 42a4 <MPSL_IRQ_CLOCK_Handler+0xe8>
    42a0:	6961      	ldr	r1, [r4, #20]
    42a2:	e000      	b.n	42a6 <MPSL_IRQ_CLOCK_Handler+0xea>
    42a4:	6921      	ldr	r1, [r4, #16]
    42a6:	1a41      	subs	r1, r0, r1
    42a8:	2902      	cmp	r1, #2
    42aa:	da02      	bge.n	42b2 <MPSL_IRQ_CLOCK_Handler+0xf6>
    42ac:	f111 0f02 	cmn.w	r1, #2
    42b0:	dc07      	bgt.n	42c2 <MPSL_IRQ_CLOCK_Handler+0x106>
    42b2:	b10d      	cbz	r5, 42b8 <MPSL_IRQ_CLOCK_Handler+0xfc>
    42b4:	6160      	str	r0, [r4, #20]
    42b6:	e000      	b.n	42ba <MPSL_IRQ_CLOCK_Handler+0xfe>
    42b8:	6120      	str	r0, [r4, #16]
    42ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    42be:	f7ff bfc1 	b.w	4244 <MPSL_IRQ_CLOCK_Handler+0x88>
    42c2:	bd70      	pop	{r4, r5, r6, pc}
    42c4:	20000038 	.word	0x20000038
    42c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42cc:	4606      	mov	r6, r0
    42ce:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    42d2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    42d6:	4628      	mov	r0, r5
    42d8:	f008 fc26 	bl	cb28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    42dc:	4680      	mov	r8, r0
    42de:	f44f 7188 	mov.w	r1, #272	; 0x110
    42e2:	4628      	mov	r0, r5
    42e4:	f008 fc20 	bl	cb28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    42e8:	4c27      	ldr	r4, [pc, #156]	; (4388 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    42ea:	4682      	mov	sl, r0
    42ec:	7827      	ldrb	r7, [r4, #0]
    42ee:	f104 0008 	add.w	r0, r4, #8
    42f2:	f008 fc8d 	bl	cc10 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    42f6:	b110      	cbz	r0, 42fe <MPSL_IRQ_CLOCK_Handler+0x142>
    42f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    42fc:	e016      	b.n	432c <MPSL_IRQ_CLOCK_Handler+0x170>
    42fe:	f04f 0901 	mov.w	r9, #1
    4302:	b146      	cbz	r6, 4316 <MPSL_IRQ_CLOCK_Handler+0x15a>
    4304:	7aa0      	ldrb	r0, [r4, #10]
    4306:	2803      	cmp	r0, #3
    4308:	d105      	bne.n	4316 <MPSL_IRQ_CLOCK_Handler+0x15a>
    430a:	2004      	movs	r0, #4
    430c:	72a0      	strb	r0, [r4, #10]
    430e:	f7ff ff87 	bl	4220 <MPSL_IRQ_CLOCK_Handler+0x64>
    4312:	f8c5 9010 	str.w	r9, [r5, #16]
    4316:	2600      	movs	r6, #0
    4318:	f1b8 0f00 	cmp.w	r8, #0
    431c:	d018      	beq.n	4350 <MPSL_IRQ_CLOCK_Handler+0x194>
    431e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    4322:	7aa0      	ldrb	r0, [r4, #10]
    4324:	2804      	cmp	r0, #4
    4326:	d004      	beq.n	4332 <MPSL_IRQ_CLOCK_Handler+0x176>
    4328:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    432c:	206d      	movs	r0, #109	; 0x6d
    432e:	f000 fa9d 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4332:	f008 fca3 	bl	cc7c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4336:	b928      	cbnz	r0, 4344 <MPSL_IRQ_CLOCK_Handler+0x188>
    4338:	f008 fcc1 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    433c:	b910      	cbnz	r0, 4344 <MPSL_IRQ_CLOCK_Handler+0x188>
    433e:	f008 fcf4 	bl	cd2a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    4342:	b108      	cbz	r0, 4348 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4344:	4811      	ldr	r0, [pc, #68]	; (438c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4346:	6006      	str	r6, [r0, #0]
    4348:	2002      	movs	r0, #2
    434a:	72a0      	strb	r0, [r4, #10]
    434c:	f000 f8ec 	bl	4528 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4350:	f1ba 0f00 	cmp.w	sl, #0
    4354:	d008      	beq.n	4368 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    4356:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    435a:	7aa0      	ldrb	r0, [r4, #10]
    435c:	2802      	cmp	r0, #2
    435e:	d101      	bne.n	4364 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    4360:	f7ff ff8a 	bl	4278 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4364:	f8c5 9014 	str.w	r9, [r5, #20]
    4368:	b13f      	cbz	r7, 437a <MPSL_IRQ_CLOCK_Handler+0x1be>
    436a:	7026      	strb	r6, [r4, #0]
    436c:	7aa0      	ldrb	r0, [r4, #10]
    436e:	2802      	cmp	r0, #2
    4370:	d101      	bne.n	4376 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    4372:	f7ff ff67 	bl	4244 <MPSL_IRQ_CLOCK_Handler+0x88>
    4376:	f000 f8d7 	bl	4528 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    437a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    437e:	4802      	ldr	r0, [pc, #8]	; (4388 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    4380:	3008      	adds	r0, #8
    4382:	f008 bc5c 	b.w	cc3e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4386:	0000      	.short	0x0000
    4388:	20000038 	.word	0x20000038
    438c:	40000c34 	.word	0x40000c34
    4390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4394:	4c5f      	ldr	r4, [pc, #380]	; (4514 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4396:	2700      	movs	r7, #0
    4398:	4606      	mov	r6, r0
    439a:	61a7      	str	r7, [r4, #24]
    439c:	7842      	ldrb	r2, [r0, #1]
    439e:	7881      	ldrb	r1, [r0, #2]
    43a0:	7800      	ldrb	r0, [r0, #0]
    43a2:	72e0      	strb	r0, [r4, #11]
    43a4:	7162      	strb	r2, [r4, #5]
    43a6:	71a1      	strb	r1, [r4, #6]
    43a8:	71e7      	strb	r7, [r4, #7]
    43aa:	f04f 0801 	mov.w	r8, #1
    43ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    43b2:	2805      	cmp	r0, #5
    43b4:	d225      	bcs.n	4402 <MPSL_IRQ_CLOCK_Handler+0x246>
    43b6:	e8df f000 	tbb	[pc, r0]
    43ba:	0310      	.short	0x0310
    43bc:	00222006 	.word	0x00222006
    43c0:	f8c4 8018 	str.w	r8, [r4, #24]
    43c4:	e009      	b.n	43da <MPSL_IRQ_CLOCK_Handler+0x21e>
    43c6:	f000 f8cb 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    43ca:	2101      	movs	r1, #1
    43cc:	4628      	mov	r0, r5
    43ce:	f008 fbb0 	bl	cb32 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    43d2:	2800      	cmp	r0, #0
    43d4:	d0f9      	beq.n	43ca <MPSL_IRQ_CLOCK_Handler+0x20e>
    43d6:	2002      	movs	r0, #2
    43d8:	61a0      	str	r0, [r4, #24]
    43da:	f008 fbd6 	bl	cb8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    43de:	b1b0      	cbz	r0, 440e <MPSL_IRQ_CLOCK_Handler+0x252>
    43e0:	f000 f9e6 	bl	47b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    43e4:	7e21      	ldrb	r1, [r4, #24]
    43e6:	f001 0103 	and.w	r1, r1, #3
    43ea:	4288      	cmp	r0, r1
    43ec:	d10f      	bne.n	440e <MPSL_IRQ_CLOCK_Handler+0x252>
    43ee:	79b0      	ldrb	r0, [r6, #6]
    43f0:	b150      	cbz	r0, 4408 <MPSL_IRQ_CLOCK_Handler+0x24c>
    43f2:	2002      	movs	r0, #2
    43f4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    43f8:	e070      	b.n	44dc <MPSL_IRQ_CLOCK_Handler+0x320>
    43fa:	4847      	ldr	r0, [pc, #284]	; (4518 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    43fc:	e7ec      	b.n	43d8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    43fe:	4847      	ldr	r0, [pc, #284]	; (451c <MPSL_IRQ_CLOCK_Handler+0x360>)
    4400:	e7ea      	b.n	43d8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    4402:	f240 312b 	movw	r1, #811	; 0x32b
    4406:	e04d      	b.n	44a4 <MPSL_IRQ_CLOCK_Handler+0x2e8>
    4408:	f000 f9a6 	bl	4758 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    440c:	e066      	b.n	44dc <MPSL_IRQ_CLOCK_Handler+0x320>
    440e:	f8c5 800c 	str.w	r8, [r5, #12]
    4412:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4416:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    441a:	69a0      	ldr	r0, [r4, #24]
    441c:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    4420:	f008 fc18 	bl	cc54 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4424:	b940      	cbnz	r0, 4438 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4426:	f008 fc1f 	bl	cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    442a:	b928      	cbnz	r0, 4438 <MPSL_IRQ_CLOCK_Handler+0x27c>
    442c:	f008 fc33 	bl	cc96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4430:	b910      	cbnz	r0, 4438 <MPSL_IRQ_CLOCK_Handler+0x27c>
    4432:	f008 fc44 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4436:	b138      	cbz	r0, 4448 <MPSL_IRQ_CLOCK_Handler+0x28c>
    4438:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    443c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    4440:	4937      	ldr	r1, [pc, #220]	; (4520 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4442:	f3c0 3042 	ubfx	r0, r0, #13, #3
    4446:	6008      	str	r0, [r1, #0]
    4448:	f008 fc04 	bl	cc54 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    444c:	b940      	cbnz	r0, 4460 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    444e:	f008 fc0b 	bl	cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4452:	b928      	cbnz	r0, 4460 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    4454:	f008 fc1f 	bl	cc96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4458:	b910      	cbnz	r0, 4460 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    445a:	f008 fc30 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    445e:	b118      	cbz	r0, 4468 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    4460:	492f      	ldr	r1, [pc, #188]	; (4520 <MPSL_IRQ_CLOCK_Handler+0x364>)
    4462:	3110      	adds	r1, #16
    4464:	f8c1 8000 	str.w	r8, [r1]
    4468:	f8c5 8008 	str.w	r8, [r5, #8]
    446c:	2002      	movs	r0, #2
    446e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4472:	79b0      	ldrb	r0, [r6, #6]
    4474:	bb90      	cbnz	r0, 44dc <MPSL_IRQ_CLOCK_Handler+0x320>
    4476:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    447a:	f010 0f02 	tst.w	r0, #2
    447e:	d00f      	beq.n	44a0 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4480:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4524 <MPSL_IRQ_CLOCK_Handler+0x368>
    4484:	f8d9 1000 	ldr.w	r1, [r9]
    4488:	43c9      	mvns	r1, r1
    448a:	f341 1100 	sbfx	r1, r1, #4, #1
    448e:	f101 0801 	add.w	r8, r1, #1
    4492:	f8d9 1000 	ldr.w	r1, [r9]
    4496:	f041 0110 	orr.w	r1, r1, #16
    449a:	f8c9 1000 	str.w	r1, [r9]
    449e:	e007      	b.n	44b0 <MPSL_IRQ_CLOCK_Handler+0x2f4>
    44a0:	f44f 713b 	mov.w	r1, #748	; 0x2ec
    44a4:	206d      	movs	r0, #109	; 0x6d
    44a6:	f000 f9e1 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44aa:	bf00      	nop
    44ac:	f000 fb04 	bl	4ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    44b0:	4651      	mov	r1, sl
    44b2:	4628      	mov	r0, r5
    44b4:	f008 fb38 	bl	cb28 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    44b8:	2800      	cmp	r0, #0
    44ba:	d0f7      	beq.n	44ac <MPSL_IRQ_CLOCK_Handler+0x2f0>
    44bc:	f000 f94c 	bl	4758 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    44c0:	f1b8 0f00 	cmp.w	r8, #0
    44c4:	d105      	bne.n	44d2 <MPSL_IRQ_CLOCK_Handler+0x316>
    44c6:	f8d9 1000 	ldr.w	r1, [r9]
    44ca:	f021 0110 	bic.w	r1, r1, #16
    44ce:	f8c9 1000 	str.w	r1, [r9]
    44d2:	2002      	movs	r0, #2
    44d4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    44d8:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    44dc:	79a0      	ldrb	r0, [r4, #6]
    44de:	b170      	cbz	r0, 44fe <MPSL_IRQ_CLOCK_Handler+0x342>
    44e0:	7830      	ldrb	r0, [r6, #0]
    44e2:	b960      	cbnz	r0, 44fe <MPSL_IRQ_CLOCK_Handler+0x342>
    44e4:	f000 f94a 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    44e8:	4606      	mov	r6, r0
    44ea:	f000 fa2f 	bl	494c <mpsl_temperature_get>
    44ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    44f2:	b116      	cbz	r6, 44fa <MPSL_IRQ_CLOCK_Handler+0x33e>
    44f4:	e9c4 1004 	strd	r1, r0, [r4, #16]
    44f8:	e001      	b.n	44fe <MPSL_IRQ_CLOCK_Handler+0x342>
    44fa:	e9c4 0104 	strd	r0, r1, [r4, #16]
    44fe:	2101      	movs	r1, #1
    4500:	4628      	mov	r0, r5
    4502:	f008 fb16 	bl	cb32 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4506:	b108      	cbz	r0, 450c <MPSL_IRQ_CLOCK_Handler+0x350>
    4508:	f000 f932 	bl	4770 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    450c:	72a7      	strb	r7, [r4, #10]
    450e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4512:	0000      	.short	0x0000
    4514:	20000038 	.word	0x20000038
    4518:	00020001 	.word	0x00020001
    451c:	00030001 	.word	0x00030001
    4520:	4000053c 	.word	0x4000053c
    4524:	e000ed10 	.word	0xe000ed10

00004528 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4528:	b510      	push	{r4, lr}
    452a:	f3ef 8410 	mrs	r4, PRIMASK
    452e:	b672      	cpsid	i
    4530:	480a      	ldr	r0, [pc, #40]	; (455c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4532:	7841      	ldrb	r1, [r0, #1]
    4534:	b129      	cbz	r1, 4542 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4536:	7841      	ldrb	r1, [r0, #1]
    4538:	1e49      	subs	r1, r1, #1
    453a:	7041      	strb	r1, [r0, #1]
    453c:	7841      	ldrb	r1, [r0, #1]
    453e:	b129      	cbz	r1, 454c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4540:	e008      	b.n	4554 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4542:	f240 110d 	movw	r1, #269	; 0x10d
    4546:	206d      	movs	r0, #109	; 0x6d
    4548:	f000 f990 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    454c:	7880      	ldrb	r0, [r0, #2]
    454e:	b908      	cbnz	r0, 4554 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4550:	f000 f922 	bl	4798 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4554:	2c00      	cmp	r4, #0
    4556:	d100      	bne.n	455a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4558:	b662      	cpsie	i
    455a:	bd10      	pop	{r4, pc}
    455c:	20000038 	.word	0x20000038

00004560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4560:	b510      	push	{r4, lr}
    4562:	f3ef 8410 	mrs	r4, PRIMASK
    4566:	b672      	cpsid	i
    4568:	4806      	ldr	r0, [pc, #24]	; (4584 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    456a:	7841      	ldrb	r1, [r0, #1]
    456c:	1c49      	adds	r1, r1, #1
    456e:	7041      	strb	r1, [r0, #1]
    4570:	7840      	ldrb	r0, [r0, #1]
    4572:	2801      	cmp	r0, #1
    4574:	d101      	bne.n	457a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4576:	f008 faf3 	bl	cb60 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    457a:	2c00      	cmp	r4, #0
    457c:	d100      	bne.n	4580 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    457e:	b662      	cpsie	i
    4580:	bd10      	pop	{r4, pc}
    4582:	0000      	.short	0x0000
    4584:	20000038 	.word	0x20000038

00004588 <mpsl_clock_hfclk_release>:
    4588:	4805      	ldr	r0, [pc, #20]	; (45a0 <mpsl_clock_hfclk_release+0x18>)
    458a:	b510      	push	{r4, lr}
    458c:	78c1      	ldrb	r1, [r0, #3]
    458e:	b121      	cbz	r1, 459a <mpsl_clock_hfclk_release+0x12>
    4590:	2100      	movs	r1, #0
    4592:	7101      	strb	r1, [r0, #4]
    4594:	70c1      	strb	r1, [r0, #3]
    4596:	f7ff ffc7 	bl	4528 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    459a:	2000      	movs	r0, #0
    459c:	bd10      	pop	{r4, pc}
    459e:	0000      	.short	0x0000
    45a0:	20000038 	.word	0x20000038

000045a4 <mpsl_clock_hfclk_request>:
    45a4:	b570      	push	{r4, r5, r6, lr}
    45a6:	4c0c      	ldr	r4, [pc, #48]	; (45d8 <mpsl_clock_hfclk_request+0x34>)
    45a8:	78e1      	ldrb	r1, [r4, #3]
    45aa:	b961      	cbnz	r1, 45c6 <mpsl_clock_hfclk_request+0x22>
    45ac:	2501      	movs	r5, #1
    45ae:	70e5      	strb	r5, [r4, #3]
    45b0:	61e0      	str	r0, [r4, #28]
    45b2:	f7ff ffd5 	bl	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    45b6:	f000 f8e1 	bl	477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    45ba:	b130      	cbz	r0, 45ca <mpsl_clock_hfclk_request+0x26>
    45bc:	69e0      	ldr	r0, [r4, #28]
    45be:	b110      	cbz	r0, 45c6 <mpsl_clock_hfclk_request+0x22>
    45c0:	4780      	blx	r0
    45c2:	2000      	movs	r0, #0
    45c4:	61e0      	str	r0, [r4, #28]
    45c6:	2000      	movs	r0, #0
    45c8:	bd70      	pop	{r4, r5, r6, pc}
    45ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    45ce:	7125      	strb	r5, [r4, #4]
    45d0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    45d4:	e7f7      	b.n	45c6 <mpsl_clock_hfclk_request+0x22>
    45d6:	0000      	.short	0x0000
    45d8:	20000038 	.word	0x20000038

000045dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    45dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45e0:	0004      	movs	r4, r0
    45e2:	f06f 0015 	mvn.w	r0, #21
    45e6:	d03c      	beq.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45e8:	7821      	ldrb	r1, [r4, #0]
    45ea:	2904      	cmp	r1, #4
    45ec:	d839      	bhi.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45ee:	2900      	cmp	r1, #0
    45f0:	7861      	ldrb	r1, [r4, #1]
    45f2:	d038      	beq.n	4666 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    45f4:	2900      	cmp	r1, #0
    45f6:	d134      	bne.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45f8:	78a1      	ldrb	r1, [r4, #2]
    45fa:	2900      	cmp	r1, #0
    45fc:	d131      	bne.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45fe:	2000      	movs	r0, #0
    4600:	f008 fa5d 	bl	cabe <MPSL_IRQ_RADIO_Handler+0x1e>
    4604:	2000      	movs	r0, #0
    4606:	f008 fa4d 	bl	caa4 <MPSL_IRQ_RADIO_Handler+0x4>
    460a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    460e:	f04f 31ff 	mov.w	r1, #4294967295
    4612:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    4616:	2500      	movs	r5, #0
    4618:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
    461c:	f8c8 5104 	str.w	r5, [r8, #260]	; 0x104
    4620:	f8c8 510c 	str.w	r5, [r8, #268]	; 0x10c
    4624:	f8c8 5110 	str.w	r5, [r8, #272]	; 0x110
    4628:	4e13      	ldr	r6, [pc, #76]	; (4678 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    462a:	7075      	strb	r5, [r6, #1]
    462c:	88a0      	ldrh	r0, [r4, #4]
    462e:	81b0      	strh	r0, [r6, #12]
    4630:	f008 fa8d 	bl	cb4e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4634:	2701      	movs	r7, #1
    4636:	b108      	cbz	r0, 463c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4638:	70f7      	strb	r7, [r6, #3]
    463a:	7077      	strb	r7, [r6, #1]
    463c:	2101      	movs	r1, #1
    463e:	4640      	mov	r0, r8
    4640:	f008 fa77 	bl	cb32 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4644:	b108      	cbz	r0, 464a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4646:	f000 f893 	bl	4770 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    464a:	4620      	mov	r0, r4
    464c:	f7ff fea0 	bl	4390 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    4650:	7277      	strb	r7, [r6, #9]
    4652:	2000      	movs	r0, #0
    4654:	f008 fa26 	bl	caa4 <MPSL_IRQ_RADIO_Handler+0x4>
    4658:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    465c:	4628      	mov	r0, r5
    465e:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    4662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4666:	2900      	cmp	r1, #0
    4668:	d0fb      	beq.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    466a:	2920      	cmp	r1, #32
    466c:	d8f9      	bhi.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    466e:	78a1      	ldrb	r1, [r4, #2]
    4670:	2921      	cmp	r1, #33	; 0x21
    4672:	d9c4      	bls.n	45fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4674:	e7f5      	b.n	4662 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4676:	0000      	.short	0x0000
    4678:	20000038 	.word	0x20000038

0000467c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    467c:	4801      	ldr	r0, [pc, #4]	; (4684 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    467e:	8980      	ldrh	r0, [r0, #12]
    4680:	4770      	bx	lr
    4682:	0000      	.short	0x0000
    4684:	20000038 	.word	0x20000038

00004688 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4688:	b510      	push	{r4, lr}
    468a:	480d      	ldr	r0, [pc, #52]	; (46c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    468c:	f008 fac0 	bl	cc10 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4690:	490b      	ldr	r1, [pc, #44]	; (46c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4692:	3908      	subs	r1, #8
    4694:	b148      	cbz	r0, 46aa <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4696:	2001      	movs	r0, #1
    4698:	7008      	strb	r0, [r1, #0]
    469a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    469e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    46a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46a6:	f7ff bf5b 	b.w	4560 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    46aa:	7a88      	ldrb	r0, [r1, #10]
    46ac:	2802      	cmp	r0, #2
    46ae:	d101      	bne.n	46b4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    46b0:	f7ff fdc8 	bl	4244 <MPSL_IRQ_CLOCK_Handler+0x88>
    46b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46b8:	4801      	ldr	r0, [pc, #4]	; (46c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    46ba:	f008 bac0 	b.w	cc3e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    46be:	0000      	.short	0x0000
    46c0:	20000040 	.word	0x20000040

000046c4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    46c4:	4802      	ldr	r0, [pc, #8]	; (46d0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    46c6:	7a80      	ldrb	r0, [r0, #10]
    46c8:	2800      	cmp	r0, #0
    46ca:	d000      	beq.n	46ce <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    46cc:	2001      	movs	r0, #1
    46ce:	4770      	bx	lr
    46d0:	20000038 	.word	0x20000038

000046d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    46d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46d6:	4d1f      	ldr	r5, [pc, #124]	; (4754 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    46d8:	7ae8      	ldrb	r0, [r5, #11]
    46da:	2800      	cmp	r0, #0
    46dc:	d10f      	bne.n	46fe <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    46de:	7e28      	ldrb	r0, [r5, #24]
    46e0:	f000 0003 	and.w	r0, r0, #3
    46e4:	f008 fa41 	bl	cb6a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    46e8:	2800      	cmp	r0, #0
    46ea:	d008      	beq.n	46fe <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    46ec:	f3ef 8110 	mrs	r1, PRIMASK
    46f0:	b672      	cpsid	i
    46f2:	f7ff ffe7 	bl	46c4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    46f6:	b118      	cbz	r0, 4700 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    46f8:	2900      	cmp	r1, #0
    46fa:	d100      	bne.n	46fe <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    46fc:	b662      	cpsie	i
    46fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4700:	2601      	movs	r6, #1
    4702:	72ae      	strb	r6, [r5, #10]
    4704:	b901      	cbnz	r1, 4708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4706:	b662      	cpsie	i
    4708:	2018      	movs	r0, #24
    470a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    470e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4712:	61a6      	str	r6, [r4, #24]
    4714:	f44f 7020 	mov.w	r0, #640	; 0x280
    4718:	f8ad 0000 	strh.w	r0, [sp]
    471c:	f8bd 0000 	ldrh.w	r0, [sp]
    4720:	1e41      	subs	r1, r0, #1
    4722:	f8ad 1000 	strh.w	r1, [sp]
    4726:	d2f9      	bcs.n	471c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4728:	2700      	movs	r7, #0
    472a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    472e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4732:	4808      	ldr	r0, [pc, #32]	; (4754 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4734:	3008      	adds	r0, #8
    4736:	f008 fa7e 	bl	cc36 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    473a:	702f      	strb	r7, [r5, #0]
    473c:	f7ff fd82 	bl	4244 <MPSL_IRQ_CLOCK_Handler+0x88>
    4740:	6166      	str	r6, [r4, #20]
    4742:	7968      	ldrb	r0, [r5, #5]
    4744:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4748:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    474c:	2018      	movs	r0, #24
    474e:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4754:	20000038 	.word	0x20000038

00004758 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4758:	b510      	push	{r4, lr}
    475a:	4c04      	ldr	r4, [pc, #16]	; (476c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    475c:	7e20      	ldrb	r0, [r4, #24]
    475e:	f000 0003 	and.w	r0, r0, #3
    4762:	f008 fa02 	bl	cb6a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4766:	2800      	cmp	r0, #0
    4768:	d0f8      	beq.n	475c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    476a:	bd10      	pop	{r4, pc}
    476c:	20000038 	.word	0x20000038

00004770 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4770:	4901      	ldr	r1, [pc, #4]	; (4778 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4772:	2001      	movs	r0, #1
    4774:	7008      	strb	r0, [r1, #0]
    4776:	4770      	bx	lr
    4778:	200002ac 	.word	0x200002ac

0000477c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    477c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4780:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4784:	b918      	cbnz	r0, 478e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4786:	4803      	ldr	r0, [pc, #12]	; (4794 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4788:	7800      	ldrb	r0, [r0, #0]
    478a:	2800      	cmp	r0, #0
    478c:	d000      	beq.n	4790 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    478e:	2001      	movs	r0, #1
    4790:	4770      	bx	lr
    4792:	0000      	.short	0x0000
    4794:	200002ac 	.word	0x200002ac

00004798 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4798:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    479c:	2101      	movs	r1, #1
    479e:	6041      	str	r1, [r0, #4]
    47a0:	2100      	movs	r1, #0
    47a2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    47a6:	4801      	ldr	r0, [pc, #4]	; (47ac <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    47a8:	7001      	strb	r1, [r0, #0]
    47aa:	4770      	bx	lr
    47ac:	200002ac 	.word	0x200002ac

000047b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    47b0:	4802      	ldr	r0, [pc, #8]	; (47bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    47b2:	6800      	ldr	r0, [r0, #0]
    47b4:	f000 0003 	and.w	r0, r0, #3
    47b8:	4770      	bx	lr
    47ba:	0000      	.short	0x0000
    47bc:	4000041c 	.word	0x4000041c
    47c0:	b510      	push	{r4, lr}
    47c2:	b131      	cbz	r1, 47d2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    47c4:	2901      	cmp	r1, #1
    47c6:	d007      	beq.n	47d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    47c8:	f240 3102 	movw	r1, #770	; 0x302
    47cc:	a005      	add	r0, pc, #20	; (adr r0, 47e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    47ce:	f000 f821 	bl	4814 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    47d2:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    47d6:	e001      	b.n	47dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    47d8:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    47dc:	f000 0001 	and.w	r0, r0, #1
    47e0:	bd10      	pop	{r4, pc}
    47e2:	0000      	.short	0x0000
    47e4:	5f66726e 	.word	0x5f66726e
    47e8:	636f6c63 	.word	0x636f6c63
    47ec:	00682e6b 	.word	0x00682e6b
    47f0:	f3bf 8f4f 	dsb	sy
    47f4:	4805      	ldr	r0, [pc, #20]	; (480c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    47f6:	6801      	ldr	r1, [r0, #0]
    47f8:	4a05      	ldr	r2, [pc, #20]	; (4810 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    47fa:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    47fe:	4311      	orrs	r1, r2
    4800:	6001      	str	r1, [r0, #0]
    4802:	f3bf 8f4f 	dsb	sy
    4806:	bf00      	nop
    4808:	e7fd      	b.n	4806 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    480a:	0000      	.short	0x0000
    480c:	e000ed0c 	.word	0xe000ed0c
    4810:	05fa0004 	.word	0x05fa0004

00004814 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    4814:	b672      	cpsid	i
    4816:	4a03      	ldr	r2, [pc, #12]	; (4824 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    4818:	6852      	ldr	r2, [r2, #4]
    481a:	b102      	cbz	r2, 481e <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    481c:	4790      	blx	r2
    481e:	f7ff ffe7 	bl	47f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4822:	0000      	.short	0x0000
    4824:	20000058 	.word	0x20000058
    4828:	4806      	ldr	r0, [pc, #24]	; (4844 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    482a:	b510      	push	{r4, lr}
    482c:	2100      	movs	r1, #0
    482e:	6001      	str	r1, [r0, #0]
    4830:	2101      	movs	r1, #1
    4832:	6001      	str	r1, [r0, #0]
    4834:	4608      	mov	r0, r1
    4836:	f008 f9bf 	bl	cbb8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    483e:	2001      	movs	r0, #1
    4840:	f008 b9ad 	b.w	cb9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4844:	40001ffc 	.word	0x40001ffc
    4848:	4807      	ldr	r0, [pc, #28]	; (4868 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    484a:	b510      	push	{r4, lr}
    484c:	2101      	movs	r1, #1
    484e:	6041      	str	r1, [r0, #4]
    4850:	1e89      	subs	r1, r1, #2
    4852:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4856:	200c      	movs	r0, #12
    4858:	f008 f9ae 	bl	cbb8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4860:	200c      	movs	r0, #12
    4862:	f008 b99c 	b.w	cb9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4866:	0000      	.short	0x0000
    4868:	4000c000 	.word	0x4000c000

0000486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    486c:	b50e      	push	{r1, r2, r3, lr}
    486e:	b672      	cpsid	i
    4870:	4a0f      	ldr	r2, [pc, #60]	; (48b0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4872:	6855      	ldr	r5, [r2, #4]
    4874:	b1d5      	cbz	r5, 48ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4876:	2200      	movs	r2, #0
    4878:	4603      	mov	r3, r0
    487a:	466e      	mov	r6, sp
    487c:	240a      	movs	r4, #10
    487e:	e003      	b.n	4888 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4880:	fbb0 f0f4 	udiv	r0, r0, r4
    4884:	1c52      	adds	r2, r2, #1
    4886:	b2d2      	uxtb	r2, r2
    4888:	2800      	cmp	r0, #0
    488a:	d1f9      	bne.n	4880 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    488c:	54b0      	strb	r0, [r6, r2]
    488e:	e009      	b.n	48a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4890:	fbb3 f0f4 	udiv	r0, r3, r4
    4894:	fb04 3010 	mls	r0, r4, r0, r3
    4898:	fbb3 f3f4 	udiv	r3, r3, r4
    489c:	1e52      	subs	r2, r2, #1
    489e:	b2d2      	uxtb	r2, r2
    48a0:	3030      	adds	r0, #48	; 0x30
    48a2:	54b0      	strb	r0, [r6, r2]
    48a4:	2a00      	cmp	r2, #0
    48a6:	d1f3      	bne.n	4890 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    48a8:	4630      	mov	r0, r6
    48aa:	47a8      	blx	r5
    48ac:	f7ff ffa0 	bl	47f0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    48b0:	20000058 	.word	0x20000058

000048b4 <mpsl_init>:
    48b4:	b570      	push	{r4, r5, r6, lr}
    48b6:	4c17      	ldr	r4, [pc, #92]	; (4914 <mpsl_init+0x60>)
    48b8:	4606      	mov	r6, r0
    48ba:	460d      	mov	r5, r1
    48bc:	7860      	ldrb	r0, [r4, #1]
    48be:	b110      	cbz	r0, 48c6 <mpsl_init+0x12>
    48c0:	f04f 30ff 	mov.w	r0, #4294967295
    48c4:	bd70      	pop	{r4, r5, r6, pc}
    48c6:	b906      	cbnz	r6, 48ca <mpsl_init+0x16>
    48c8:	4e13      	ldr	r6, [pc, #76]	; (4918 <mpsl_init+0x64>)
    48ca:	6062      	str	r2, [r4, #4]
    48cc:	7025      	strb	r5, [r4, #0]
    48ce:	f7ff ffab 	bl	4828 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    48d2:	f7ff ffb9 	bl	4848 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    48d6:	4630      	mov	r0, r6
    48d8:	f7ff fe80 	bl	45dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    48dc:	0006      	movs	r6, r0
    48de:	d1f1      	bne.n	48c4 <mpsl_init+0x10>
    48e0:	f7fe feec 	bl	36bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    48e4:	f7ff fef6 	bl	46d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    48e8:	f008 f8b3 	bl	ca52 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    48ec:	4628      	mov	r0, r5
    48ee:	f008 f956 	bl	cb9e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    48f2:	2001      	movs	r0, #1
    48f4:	2d00      	cmp	r5, #0
    48f6:	db09      	blt.n	490c <mpsl_init+0x58>
    48f8:	f005 011f 	and.w	r1, r5, #31
    48fc:	fa00 f101 	lsl.w	r1, r0, r1
    4900:	096a      	lsrs	r2, r5, #5
    4902:	0092      	lsls	r2, r2, #2
    4904:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4908:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    490c:	7060      	strb	r0, [r4, #1]
    490e:	4630      	mov	r0, r6
    4910:	bd70      	pop	{r4, r5, r6, pc}
    4912:	0000      	.short	0x0000
    4914:	20000058 	.word	0x20000058
    4918:	0000cbda 	.word	0x0000cbda

0000491c <mpsl_is_initialized>:
    491c:	4801      	ldr	r0, [pc, #4]	; (4924 <mpsl_is_initialized+0x8>)
    491e:	7840      	ldrb	r0, [r0, #1]
    4920:	4770      	bx	lr
    4922:	0000      	.short	0x0000
    4924:	20000058 	.word	0x20000058

00004928 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    4928:	4807      	ldr	r0, [pc, #28]	; (4948 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    492a:	f990 0000 	ldrsb.w	r0, [r0]
    492e:	2800      	cmp	r0, #0
    4930:	db09      	blt.n	4946 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4932:	f000 021f 	and.w	r2, r0, #31
    4936:	2101      	movs	r1, #1
    4938:	4091      	lsls	r1, r2
    493a:	0940      	lsrs	r0, r0, #5
    493c:	0080      	lsls	r0, r0, #2
    493e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4942:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4946:	4770      	bx	lr
    4948:	20000058 	.word	0x20000058

0000494c <mpsl_temperature_get>:
    494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4950:	2601      	movs	r6, #1
    4952:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4956:	0331      	lsls	r1, r6, #12
    4958:	f04f 0800 	mov.w	r8, #0
    495c:	4640      	mov	r0, r8
    495e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4962:	f3bf 8f4f 	dsb	sy
    4966:	f3bf 8f6f 	isb	sy
    496a:	4c16      	ldr	r4, [pc, #88]	; (49c4 <mpsl_temperature_get+0x78>)
    496c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4970:	200c      	movs	r0, #12
    4972:	f008 f940 	bl	cbf6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4976:	4d14      	ldr	r5, [pc, #80]	; (49c8 <mpsl_temperature_get+0x7c>)
    4978:	6828      	ldr	r0, [r5, #0]
    497a:	43c0      	mvns	r0, r0
    497c:	f340 1700 	sbfx	r7, r0, #4, #1
    4980:	6828      	ldr	r0, [r5, #0]
    4982:	f040 0010 	orr.w	r0, r0, #16
    4986:	6028      	str	r0, [r5, #0]
    4988:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    498c:	6026      	str	r6, [r4, #0]
    498e:	1c7f      	adds	r7, r7, #1
    4990:	e002      	b.n	4998 <mpsl_temperature_get+0x4c>
    4992:	bf00      	nop
    4994:	f000 f890 	bl	4ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4998:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    499c:	2800      	cmp	r0, #0
    499e:	d0f9      	beq.n	4994 <mpsl_temperature_get+0x48>
    49a0:	b91f      	cbnz	r7, 49aa <mpsl_temperature_get+0x5e>
    49a2:	6828      	ldr	r0, [r5, #0]
    49a4:	f020 0010 	bic.w	r0, r0, #16
    49a8:	6028      	str	r0, [r5, #0]
    49aa:	4808      	ldr	r0, [pc, #32]	; (49cc <mpsl_temperature_get+0x80>)
    49ac:	6805      	ldr	r5, [r0, #0]
    49ae:	6066      	str	r6, [r4, #4]
    49b0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    49b4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    49b8:	200c      	movs	r0, #12
    49ba:	f008 f91c 	bl	cbf6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    49be:	4628      	mov	r0, r5
    49c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49c4:	4000c000 	.word	0x4000c000
    49c8:	e000ed10 	.word	0xe000ed10
    49cc:	4000c508 	.word	0x4000c508

000049d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    49d0:	b510      	push	{r4, lr}
    49d2:	4602      	mov	r2, r0
    49d4:	2005      	movs	r0, #5
    49d6:	490c      	ldr	r1, [pc, #48]	; (4a08 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    49d8:	e004      	b.n	49e4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    49da:	bf00      	nop
    49dc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    49e0:	791b      	ldrb	r3, [r3, #4]
    49e2:	b133      	cbz	r3, 49f2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    49e4:	1e40      	subs	r0, r0, #1
    49e6:	b2c0      	uxtb	r0, r0
    49e8:	d2f8      	bcs.n	49dc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    49ea:	2148      	movs	r1, #72	; 0x48
    49ec:	2069      	movs	r0, #105	; 0x69
    49ee:	f7ff ff3d 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49f2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    49f6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    49fa:	2200      	movs	r2, #0
    49fc:	714a      	strb	r2, [r1, #5]
    49fe:	718a      	strb	r2, [r1, #6]
    4a00:	2201      	movs	r2, #1
    4a02:	710a      	strb	r2, [r1, #4]
    4a04:	bd10      	pop	{r4, pc}
    4a06:	0000      	.short	0x0000
    4a08:	200010b4 	.word	0x200010b4

00004a0c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4a0c:	b510      	push	{r4, lr}
    4a0e:	2805      	cmp	r0, #5
    4a10:	d301      	bcc.n	4a16 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4a12:	2158      	movs	r1, #88	; 0x58
    4a14:	e006      	b.n	4a24 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4a16:	490a      	ldr	r1, [pc, #40]	; (4a40 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4a18:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4a1c:	7901      	ldrb	r1, [r0, #4]
    4a1e:	2901      	cmp	r1, #1
    4a20:	d003      	beq.n	4a2a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4a22:	2159      	movs	r1, #89	; 0x59
    4a24:	2069      	movs	r0, #105	; 0x69
    4a26:	f7ff ff21 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a2a:	7941      	ldrb	r1, [r0, #5]
    4a2c:	7982      	ldrb	r2, [r0, #6]
    4a2e:	1c49      	adds	r1, r1, #1
    4a30:	b2c9      	uxtb	r1, r1
    4a32:	428a      	cmp	r2, r1
    4a34:	d000      	beq.n	4a38 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4a36:	7141      	strb	r1, [r0, #5]
    4a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a3c:	f7ff bf74 	b.w	4928 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4a40:	200010b4 	.word	0x200010b4

00004a44 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4a44:	b570      	push	{r4, r5, r6, lr}
    4a46:	2505      	movs	r5, #5
    4a48:	4e0e      	ldr	r6, [pc, #56]	; (4a84 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4a4a:	4c0f      	ldr	r4, [pc, #60]	; (4a88 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4a4c:	e016      	b.n	4a7c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4a4e:	7821      	ldrb	r1, [r4, #0]
    4a50:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4a54:	7902      	ldrb	r2, [r0, #4]
    4a56:	2a01      	cmp	r2, #1
    4a58:	d108      	bne.n	4a6c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4a5a:	7942      	ldrb	r2, [r0, #5]
    4a5c:	7983      	ldrb	r3, [r0, #6]
    4a5e:	429a      	cmp	r2, r3
    4a60:	d004      	beq.n	4a6c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4a62:	7942      	ldrb	r2, [r0, #5]
    4a64:	7182      	strb	r2, [r0, #6]
    4a66:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4a6a:	4780      	blx	r0
    4a6c:	7820      	ldrb	r0, [r4, #0]
    4a6e:	1c40      	adds	r0, r0, #1
    4a70:	b2c0      	uxtb	r0, r0
    4a72:	7020      	strb	r0, [r4, #0]
    4a74:	2805      	cmp	r0, #5
    4a76:	d301      	bcc.n	4a7c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4a78:	2000      	movs	r0, #0
    4a7a:	7020      	strb	r0, [r4, #0]
    4a7c:	1e6d      	subs	r5, r5, #1
    4a7e:	b2ed      	uxtb	r5, r5
    4a80:	d2e5      	bcs.n	4a4e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4a82:	bd70      	pop	{r4, r5, r6, pc}
    4a84:	200010b4 	.word	0x200010b4
    4a88:	200002ad 	.word	0x200002ad

00004a8c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4a8c:	b500      	push	{lr}
    4a8e:	f008 f8e1 	bl	cc54 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4a92:	b940      	cbnz	r0, 4aa6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4a94:	f008 f8e8 	bl	cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4a98:	b928      	cbnz	r0, 4aa6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4a9a:	f008 f8fc 	bl	cc96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4a9e:	b910      	cbnz	r0, 4aa6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4aa0:	f008 f90d 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4aa4:	b108      	cbz	r0, 4aaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4aa6:	4802      	ldr	r0, [pc, #8]	; (4ab0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4aa8:	bd00      	pop	{pc}
    4aaa:	4802      	ldr	r0, [pc, #8]	; (4ab4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4aac:	bd00      	pop	{pc}
    4aae:	0000      	.short	0x0000
    4ab0:	4000050c 	.word	0x4000050c
    4ab4:	4001e700 	.word	0x4001e700

00004ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4ab8:	b510      	push	{r4, lr}
    4aba:	f008 f900 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4abe:	b330      	cbz	r0, 4b0e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4ac0:	f3ef 8010 	mrs	r0, PRIMASK
    4ac4:	b1c8      	cbz	r0, 4afa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4ac6:	2100      	movs	r1, #0
    4ac8:	b672      	cpsid	i
    4aca:	4812      	ldr	r0, [pc, #72]	; (4b14 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4acc:	6802      	ldr	r2, [r0, #0]
    4ace:	6803      	ldr	r3, [r0, #0]
    4ad0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4ad4:	f043 0310 	orr.w	r3, r3, #16
    4ad8:	6003      	str	r3, [r0, #0]
    4ada:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4ade:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4ae2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4ae6:	431c      	orrs	r4, r3
    4ae8:	d000      	beq.n	4aec <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4aea:	bf40      	sev
    4aec:	bf20      	wfe
    4aee:	bf00      	nop
    4af0:	bf00      	nop
    4af2:	bf00      	nop
    4af4:	bf00      	nop
    4af6:	b112      	cbz	r2, 4afe <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4af8:	e005      	b.n	4b06 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4afa:	2101      	movs	r1, #1
    4afc:	e7e4      	b.n	4ac8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4afe:	6802      	ldr	r2, [r0, #0]
    4b00:	f022 0210 	bic.w	r2, r2, #16
    4b04:	6002      	str	r2, [r0, #0]
    4b06:	2900      	cmp	r1, #0
    4b08:	d000      	beq.n	4b0c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4b0a:	b662      	cpsie	i
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	bf20      	wfe
    4b10:	bd10      	pop	{r4, pc}
    4b12:	0000      	.short	0x0000
    4b14:	e000ed10 	.word	0xe000ed10

00004b18 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    4b18:	4901      	ldr	r1, [pc, #4]	; (4b20 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    4b1a:	2001      	movs	r0, #1
    4b1c:	7088      	strb	r0, [r1, #2]
    4b1e:	4770      	bx	lr
    4b20:	20000060 	.word	0x20000060

00004b24 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4b24:	0000cf2f 0000cf5f 0000cf4b 0000cf39     /..._...K...9...
    4b34:	0000cf45 0000cf33 0000cf2d 0000cf2b     E...3...-...+...
    4b44:	0000cf5b 0000cf51 0000cf3f 0000cf25     [...Q...?...%...
    4b54:	0000cf1d 0000cf21 0000cf17              ....!.......

00004b60 <mpsl_fem_disable>:
    4b60:	4801      	ldr	r0, [pc, #4]	; (4b68 <mpsl_fem_disable+0x8>)
    4b62:	6800      	ldr	r0, [r0, #0]
    4b64:	6800      	ldr	r0, [r0, #0]
    4b66:	4700      	bx	r0
    4b68:	20000074 	.word	0x20000074

00004b6c <mpsl_fem_lna_configuration_clear>:
    4b6c:	4801      	ldr	r0, [pc, #4]	; (4b74 <mpsl_fem_lna_configuration_clear+0x8>)
    4b6e:	6800      	ldr	r0, [r0, #0]
    4b70:	6940      	ldr	r0, [r0, #20]
    4b72:	4700      	bx	r0
    4b74:	20000074 	.word	0x20000074

00004b78 <mpsl_fem_lna_configuration_set>:
    4b78:	4a01      	ldr	r2, [pc, #4]	; (4b80 <mpsl_fem_lna_configuration_set+0x8>)
    4b7a:	6812      	ldr	r2, [r2, #0]
    4b7c:	68d2      	ldr	r2, [r2, #12]
    4b7e:	4710      	bx	r2
    4b80:	20000074 	.word	0x20000074

00004b84 <mpsl_fem_pa_configuration_clear>:
    4b84:	4801      	ldr	r0, [pc, #4]	; (4b8c <mpsl_fem_pa_configuration_clear+0x8>)
    4b86:	6800      	ldr	r0, [r0, #0]
    4b88:	6900      	ldr	r0, [r0, #16]
    4b8a:	4700      	bx	r0
    4b8c:	20000074 	.word	0x20000074

00004b90 <mpsl_fem_pa_configuration_set>:
    4b90:	4a01      	ldr	r2, [pc, #4]	; (4b98 <mpsl_fem_pa_configuration_set+0x8>)
    4b92:	6812      	ldr	r2, [r2, #0]
    4b94:	6892      	ldr	r2, [r2, #8]
    4b96:	4710      	bx	r2
    4b98:	20000074 	.word	0x20000074

00004b9c <mpsl_fem_pa_is_configured>:
    4b9c:	4901      	ldr	r1, [pc, #4]	; (4ba4 <mpsl_fem_pa_is_configured+0x8>)
    4b9e:	6809      	ldr	r1, [r1, #0]
    4ba0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    4ba2:	4708      	bx	r1
    4ba4:	20000074 	.word	0x20000074

00004ba8 <mpsl_fem_device_config_254_apply_get>:
    4ba8:	4801      	ldr	r0, [pc, #4]	; (4bb0 <mpsl_fem_device_config_254_apply_get+0x8>)
    4baa:	7800      	ldrb	r0, [r0, #0]
    4bac:	4770      	bx	lr
    4bae:	0000      	.short	0x0000
    4bb0:	200002ae 	.word	0x200002ae
    4bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4bb6:	4c17      	ldr	r4, [pc, #92]	; (4c14 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4bb8:	7a20      	ldrb	r0, [r4, #8]
    4bba:	2802      	cmp	r0, #2
    4bbc:	d200      	bcs.n	4bc0 <mpsl_fem_device_config_254_apply_get+0x18>
    4bbe:	2002      	movs	r0, #2
    4bc0:	f88d 0001 	strb.w	r0, [sp, #1]
    4bc4:	79e0      	ldrb	r0, [r4, #7]
    4bc6:	2803      	cmp	r0, #3
    4bc8:	d200      	bcs.n	4bcc <mpsl_fem_device_config_254_apply_get+0x24>
    4bca:	2003      	movs	r0, #3
    4bcc:	f88d 0000 	strb.w	r0, [sp]
    4bd0:	79a0      	ldrb	r0, [r4, #6]
    4bd2:	f8ad 0004 	strh.w	r0, [sp, #4]
    4bd6:	7960      	ldrb	r0, [r4, #5]
    4bd8:	f8ad 0002 	strh.w	r0, [sp, #2]
    4bdc:	4668      	mov	r0, sp
    4bde:	f006 f9bb 	bl	af58 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4be2:	b108      	cbz	r0, 4be8 <mpsl_fem_device_config_254_apply_get+0x40>
    4be4:	2183      	movs	r1, #131	; 0x83
    4be6:	e010      	b.n	4c0a <mpsl_fem_device_config_254_apply_get+0x62>
    4be8:	68e0      	ldr	r0, [r4, #12]
    4bea:	9002      	str	r0, [sp, #8]
    4bec:	a802      	add	r0, sp, #8
    4bee:	f006 f9c9 	bl	af84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4bf2:	b108      	cbz	r0, 4bf8 <mpsl_fem_device_config_254_apply_get+0x50>
    4bf4:	2187      	movs	r1, #135	; 0x87
    4bf6:	e008      	b.n	4c0a <mpsl_fem_device_config_254_apply_get+0x62>
    4bf8:	4807      	ldr	r0, [pc, #28]	; (4c18 <mpsl_fem_device_config_254_apply_get+0x70>)
    4bfa:	6800      	ldr	r0, [r0, #0]
    4bfc:	9003      	str	r0, [sp, #12]
    4bfe:	a803      	add	r0, sp, #12
    4c00:	f00b fa95 	bl	1012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4c04:	2800      	cmp	r0, #0
    4c06:	d003      	beq.n	4c10 <mpsl_fem_device_config_254_apply_get+0x68>
    4c08:	218b      	movs	r1, #139	; 0x8b
    4c0a:	2003      	movs	r0, #3
    4c0c:	f000 f8e2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c10:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4c12:	0000      	.short	0x0000
    4c14:	200010dc 	.word	0x200010dc
    4c18:	00004ebc 	.word	0x00004ebc

00004c1c <sdc_build_revision_get>:
    4c1c:	b510      	push	{r4, lr}
    4c1e:	b128      	cbz	r0, 4c2c <sdc_build_revision_get+0x10>
    4c20:	2214      	movs	r2, #20
    4c22:	4904      	ldr	r1, [pc, #16]	; (4c34 <sdc_build_revision_get+0x18>)
    4c24:	f008 f89d 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c28:	2000      	movs	r0, #0
    4c2a:	bd10      	pop	{r4, pc}
    4c2c:	f06f 0015 	mvn.w	r0, #21
    4c30:	bd10      	pop	{r4, pc}
    4c32:	0000      	.short	0x0000
    4c34:	00004ed8 	.word	0x00004ed8

00004c38 <sdc_cfg_set>:
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	0003      	movs	r3, r0
    4c3c:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4c40:	d103      	bne.n	4c4a <sdc_cfg_set+0x12>
    4c42:	4c29      	ldr	r4, [pc, #164]	; (4ce8 <sdc_cfg_set+0xb0>)
    4c44:	7863      	ldrb	r3, [r4, #1]
    4c46:	b10b      	cbz	r3, 4c4c <sdc_cfg_set+0x14>
    4c48:	1180      	asrs	r0, r0, #6
    4c4a:	bd70      	pop	{r4, r5, r6, pc}
    4c4c:	b309      	cbz	r1, 4c92 <sdc_cfg_set+0x5a>
    4c4e:	f06f 0515 	mvn.w	r5, #21
    4c52:	b37a      	cbz	r2, 4cb4 <sdc_cfg_set+0x7c>
    4c54:	4b25      	ldr	r3, [pc, #148]	; (4cec <sdc_cfg_set+0xb4>)
    4c56:	290c      	cmp	r1, #12
    4c58:	d241      	bcs.n	4cde <sdc_cfg_set+0xa6>
    4c5a:	e8df f001 	tbb	[pc, r1]
    4c5e:	0640      	.short	0x0640
    4c60:	13100c09 	.word	0x13100c09
    4c64:	2616231b 	.word	0x2616231b
    4c68:	312c      	.short	0x312c
    4c6a:	7810      	ldrb	r0, [r2, #0]
    4c6c:	7018      	strb	r0, [r3, #0]
    4c6e:	e02b      	b.n	4cc8 <sdc_cfg_set+0x90>
    4c70:	7810      	ldrb	r0, [r2, #0]
    4c72:	7058      	strb	r0, [r3, #1]
    4c74:	e028      	b.n	4cc8 <sdc_cfg_set+0x90>
    4c76:	6810      	ldr	r0, [r2, #0]
    4c78:	f8c3 0005 	str.w	r0, [r3, #5]
    4c7c:	e024      	b.n	4cc8 <sdc_cfg_set+0x90>
    4c7e:	6810      	ldr	r0, [r2, #0]
    4c80:	60d8      	str	r0, [r3, #12]
    4c82:	e021      	b.n	4cc8 <sdc_cfg_set+0x90>
    4c84:	7810      	ldrb	r0, [r2, #0]
    4c86:	7098      	strb	r0, [r3, #2]
    4c88:	e01e      	b.n	4cc8 <sdc_cfg_set+0x90>
    4c8a:	7811      	ldrb	r1, [r2, #0]
    4c8c:	2900      	cmp	r1, #0
    4c8e:	d1dc      	bne.n	4c4a <sdc_cfg_set+0x12>
    4c90:	70d9      	strb	r1, [r3, #3]
    4c92:	e019      	b.n	4cc8 <sdc_cfg_set+0x90>
    4c94:	78e0      	ldrb	r0, [r4, #3]
    4c96:	b110      	cbz	r0, 4c9e <sdc_cfg_set+0x66>
    4c98:	7810      	ldrb	r0, [r2, #0]
    4c9a:	2802      	cmp	r0, #2
    4c9c:	d31f      	bcc.n	4cde <sdc_cfg_set+0xa6>
    4c9e:	7810      	ldrb	r0, [r2, #0]
    4ca0:	7418      	strb	r0, [r3, #16]
    4ca2:	e011      	b.n	4cc8 <sdc_cfg_set+0x90>
    4ca4:	8810      	ldrh	r0, [r2, #0]
    4ca6:	8258      	strh	r0, [r3, #18]
    4ca8:	e00e      	b.n	4cc8 <sdc_cfg_set+0x90>
    4caa:	7811      	ldrb	r1, [r2, #0]
    4cac:	2900      	cmp	r1, #0
    4cae:	d1cc      	bne.n	4c4a <sdc_cfg_set+0x12>
    4cb0:	7119      	strb	r1, [r3, #4]
    4cb2:	e009      	b.n	4cc8 <sdc_cfg_set+0x90>
    4cb4:	e013      	b.n	4cde <sdc_cfg_set+0xa6>
    4cb6:	7810      	ldrb	r0, [r2, #0]
    4cb8:	2802      	cmp	r0, #2
    4cba:	d310      	bcc.n	4cde <sdc_cfg_set+0xa6>
    4cbc:	7518      	strb	r0, [r3, #20]
    4cbe:	e003      	b.n	4cc8 <sdc_cfg_set+0x90>
    4cc0:	7811      	ldrb	r1, [r2, #0]
    4cc2:	2900      	cmp	r1, #0
    4cc4:	d1c1      	bne.n	4c4a <sdc_cfg_set+0x12>
    4cc6:	7559      	strb	r1, [r3, #21]
    4cc8:	2201      	movs	r2, #1
    4cca:	4908      	ldr	r1, [pc, #32]	; (4cec <sdc_cfg_set+0xb4>)
    4ccc:	2000      	movs	r0, #0
    4cce:	f008 f967 	bl	cfa0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    4cd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4cd6:	db04      	blt.n	4ce2 <sdc_cfg_set+0xaa>
    4cd8:	f06f 000b 	mvn.w	r0, #11
    4cdc:	bd70      	pop	{r4, r5, r6, pc}
    4cde:	4628      	mov	r0, r5
    4ce0:	bd70      	pop	{r4, r5, r6, pc}
    4ce2:	2101      	movs	r1, #1
    4ce4:	70a1      	strb	r1, [r4, #2]
    4ce6:	bd70      	pop	{r4, r5, r6, pc}
    4ce8:	20000078 	.word	0x20000078
    4cec:	200010dc 	.word	0x200010dc

00004cf0 <sdc_enable>:
    4cf0:	b570      	push	{r4, r5, r6, lr}
    4cf2:	460c      	mov	r4, r1
    4cf4:	0005      	movs	r5, r0
    4cf6:	d019      	beq.n	4d2c <sdc_enable+0x3c>
    4cf8:	b1c4      	cbz	r4, 4d2c <sdc_enable+0x3c>
    4cfa:	f000 f913 	bl	4f24 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4cfe:	b1c0      	cbz	r0, 4d32 <sdc_enable+0x42>
    4d00:	4628      	mov	r0, r5
    4d02:	f7ff fe65 	bl	49d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4d06:	4d0c      	ldr	r5, [pc, #48]	; (4d38 <sdc_enable+0x48>)
    4d08:	2200      	movs	r2, #0
    4d0a:	490c      	ldr	r1, [pc, #48]	; (4d3c <sdc_enable+0x4c>)
    4d0c:	7028      	strb	r0, [r5, #0]
    4d0e:	4620      	mov	r0, r4
    4d10:	f008 f946 	bl	cfa0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x28>
    4d14:	f00b ff0a 	bl	10b2c <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4d18:	2100      	movs	r1, #0
    4d1a:	7828      	ldrb	r0, [r5, #0]
    4d1c:	f006 faee 	bl	b2fc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4d20:	f7ff ff48 	bl	4bb4 <mpsl_fem_device_config_254_apply_get+0xc>
    4d24:	2001      	movs	r0, #1
    4d26:	7068      	strb	r0, [r5, #1]
    4d28:	2000      	movs	r0, #0
    4d2a:	bd70      	pop	{r4, r5, r6, pc}
    4d2c:	f06f 0015 	mvn.w	r0, #21
    4d30:	bd70      	pop	{r4, r5, r6, pc}
    4d32:	f04f 30ff 	mov.w	r0, #4294967295
    4d36:	bd70      	pop	{r4, r5, r6, pc}
    4d38:	20000078 	.word	0x20000078
    4d3c:	200010dc 	.word	0x200010dc

00004d40 <sdc_init>:
    4d40:	b530      	push	{r4, r5, lr}
    4d42:	b087      	sub	sp, #28
    4d44:	0005      	movs	r5, r0
    4d46:	d00c      	beq.n	4d62 <sdc_init+0x22>
    4d48:	f7ff fde8 	bl	491c <mpsl_is_initialized>
    4d4c:	f04f 34ff 	mov.w	r4, #4294967295
    4d50:	b120      	cbz	r0, 4d5c <sdc_init+0x1c>
    4d52:	f7ff fc93 	bl	467c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4d56:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4d5a:	d905      	bls.n	4d68 <sdc_init+0x28>
    4d5c:	4620      	mov	r0, r4
    4d5e:	b007      	add	sp, #28
    4d60:	bd30      	pop	{r4, r5, pc}
    4d62:	f06f 0015 	mvn.w	r0, #21
    4d66:	e7fa      	b.n	4d5e <sdc_init+0x1e>
    4d68:	4c15      	ldr	r4, [pc, #84]	; (4dc0 <sdc_init+0x80>)
    4d6a:	4816      	ldr	r0, [pc, #88]	; (4dc4 <sdc_init+0x84>)
    4d6c:	6065      	str	r5, [r4, #4]
    4d6e:	f000 f9e9 	bl	5144 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4d72:	2000      	movs	r0, #0
    4d74:	7060      	strb	r0, [r4, #1]
    4d76:	70a0      	strb	r0, [r4, #2]
    4d78:	70e0      	strb	r0, [r4, #3]
    4d7a:	4601      	mov	r1, r0
    4d7c:	2218      	movs	r2, #24
    4d7e:	4668      	mov	r0, sp
    4d80:	f008 f869 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4d84:	2218      	movs	r2, #24
    4d86:	4910      	ldr	r1, [pc, #64]	; (4dc8 <sdc_init+0x88>)
    4d88:	4668      	mov	r0, sp
    4d8a:	f007 ffea 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d8e:	2218      	movs	r2, #24
    4d90:	4669      	mov	r1, sp
    4d92:	480e      	ldr	r0, [pc, #56]	; (4dcc <sdc_init+0x8c>)
    4d94:	f007 ffe5 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d98:	f3ef 8410 	mrs	r4, PRIMASK
    4d9c:	b672      	cpsid	i
    4d9e:	f06f 000c 	mvn.w	r0, #12
    4da2:	f000 fd47 	bl	5834 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4da6:	480a      	ldr	r0, [pc, #40]	; (4dd0 <sdc_init+0x90>)
    4da8:	f000 fe12 	bl	59d0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4dac:	b118      	cbz	r0, 4db6 <sdc_init+0x76>
    4dae:	2198      	movs	r1, #152	; 0x98
    4db0:	2003      	movs	r0, #3
    4db2:	f000 f80f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4db6:	b904      	cbnz	r4, 4dba <sdc_init+0x7a>
    4db8:	b662      	cpsie	i
    4dba:	2000      	movs	r0, #0
    4dbc:	e7cf      	b.n	4d5e <sdc_init+0x1e>
    4dbe:	0000      	.short	0x0000
    4dc0:	20000078 	.word	0x20000078
    4dc4:	00004bb5 	.word	0x00004bb5
    4dc8:	00004ec0 	.word	0x00004ec0
    4dcc:	200010dc 	.word	0x200010dc
    4dd0:	00004f51 	.word	0x00004f51

00004dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4dd4:	b50e      	push	{r1, r2, r3, lr}
    4dd6:	b672      	cpsid	i
    4dd8:	4a15      	ldr	r2, [pc, #84]	; (4e30 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4dda:	6855      	ldr	r5, [r2, #4]
    4ddc:	b1d5      	cbz	r5, 4e14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4dde:	2200      	movs	r2, #0
    4de0:	4603      	mov	r3, r0
    4de2:	466e      	mov	r6, sp
    4de4:	240a      	movs	r4, #10
    4de6:	e003      	b.n	4df0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4de8:	fbb0 f0f4 	udiv	r0, r0, r4
    4dec:	1c52      	adds	r2, r2, #1
    4dee:	b2d2      	uxtb	r2, r2
    4df0:	2800      	cmp	r0, #0
    4df2:	d1f9      	bne.n	4de8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4df4:	54b0      	strb	r0, [r6, r2]
    4df6:	e009      	b.n	4e0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4df8:	fbb3 f0f4 	udiv	r0, r3, r4
    4dfc:	fb04 3010 	mls	r0, r4, r0, r3
    4e00:	fbb3 f3f4 	udiv	r3, r3, r4
    4e04:	1e52      	subs	r2, r2, #1
    4e06:	b2d2      	uxtb	r2, r2
    4e08:	3030      	adds	r0, #48	; 0x30
    4e0a:	54b0      	strb	r0, [r6, r2]
    4e0c:	2a00      	cmp	r2, #0
    4e0e:	d1f3      	bne.n	4df8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4e10:	4630      	mov	r0, r6
    4e12:	47a8      	blx	r5
    4e14:	f3bf 8f4f 	dsb	sy
    4e18:	4806      	ldr	r0, [pc, #24]	; (4e34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4e1a:	6801      	ldr	r1, [r0, #0]
    4e1c:	4a06      	ldr	r2, [pc, #24]	; (4e38 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4e1e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4e22:	4311      	orrs	r1, r2
    4e24:	6001      	str	r1, [r0, #0]
    4e26:	f3bf 8f4f 	dsb	sy
    4e2a:	bf00      	nop
    4e2c:	e7fd      	b.n	4e2a <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4e2e:	0000      	.short	0x0000
    4e30:	20000078 	.word	0x20000078
    4e34:	e000ed0c 	.word	0xe000ed0c
    4e38:	05fa0004 	.word	0x05fa0004

00004e3c <sdc_support_adv>:
    4e3c:	4806      	ldr	r0, [pc, #24]	; (4e58 <sdc_support_adv+0x1c>)
    4e3e:	b510      	push	{r4, lr}
    4e40:	7881      	ldrb	r1, [r0, #2]
    4e42:	7840      	ldrb	r0, [r0, #1]
    4e44:	4301      	orrs	r1, r0
    4e46:	d002      	beq.n	4e4e <sdc_support_adv+0x12>
    4e48:	f04f 30ff 	mov.w	r0, #4294967295
    4e4c:	bd10      	pop	{r4, pc}
    4e4e:	f006 fa71 	bl	b334 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4e52:	2000      	movs	r0, #0
    4e54:	bd10      	pop	{r4, pc}
    4e56:	0000      	.short	0x0000
    4e58:	20000078 	.word	0x20000078

00004e5c <sdc_support_dle>:
    4e5c:	4806      	ldr	r0, [pc, #24]	; (4e78 <sdc_support_dle+0x1c>)
    4e5e:	b510      	push	{r4, lr}
    4e60:	7881      	ldrb	r1, [r0, #2]
    4e62:	7840      	ldrb	r0, [r0, #1]
    4e64:	4301      	orrs	r1, r0
    4e66:	d002      	beq.n	4e6e <sdc_support_dle+0x12>
    4e68:	f04f 30ff 	mov.w	r0, #4294967295
    4e6c:	bd10      	pop	{r4, pc}
    4e6e:	f006 f8a1 	bl	afb4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4e72:	2000      	movs	r0, #0
    4e74:	bd10      	pop	{r4, pc}
    4e76:	0000      	.short	0x0000
    4e78:	20000078 	.word	0x20000078

00004e7c <sdc_support_le_2m_phy>:
    4e7c:	4806      	ldr	r0, [pc, #24]	; (4e98 <sdc_support_le_2m_phy+0x1c>)
    4e7e:	b510      	push	{r4, lr}
    4e80:	7881      	ldrb	r1, [r0, #2]
    4e82:	7840      	ldrb	r0, [r0, #1]
    4e84:	4301      	orrs	r1, r0
    4e86:	d002      	beq.n	4e8e <sdc_support_le_2m_phy+0x12>
    4e88:	f04f 30ff 	mov.w	r0, #4294967295
    4e8c:	bd10      	pop	{r4, pc}
    4e8e:	f00b fb21 	bl	104d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4e92:	2000      	movs	r0, #0
    4e94:	bd10      	pop	{r4, pc}
    4e96:	0000      	.short	0x0000
    4e98:	20000078 	.word	0x20000078

00004e9c <sdc_support_peripheral>:
    4e9c:	4806      	ldr	r0, [pc, #24]	; (4eb8 <sdc_support_peripheral+0x1c>)
    4e9e:	b510      	push	{r4, lr}
    4ea0:	7881      	ldrb	r1, [r0, #2]
    4ea2:	7840      	ldrb	r0, [r0, #1]
    4ea4:	4301      	orrs	r1, r0
    4ea6:	d002      	beq.n	4eae <sdc_support_peripheral+0x12>
    4ea8:	f04f 30ff 	mov.w	r0, #4294967295
    4eac:	bd10      	pop	{r4, pc}
    4eae:	f006 fa53 	bl	b358 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4eb2:	2000      	movs	r0, #0
    4eb4:	bd10      	pop	{r4, pc}
    4eb6:	0000      	.short	0x0000
    4eb8:	20000078 	.word	0x20000078
    4ebc:	00000001 	.word	0x00000001
    4ec0:	00010101 	.word	0x00010101
    4ec4:	031b1b00 	.word	0x031b1b00
    4ec8:	00000002 	.word	0x00000002
    4ecc:	00001d4c 	.word	0x00001d4c
    4ed0:	001f0003 	.word	0x001f0003
    4ed4:	00000000 	.word	0x00000000
    4ed8:	182a7833 	.word	0x182a7833
    4edc:	6161f520 	.word	0x6161f520
    4ee0:	60778ba6 	.word	0x60778ba6
    4ee4:	2a398362 	.word	0x2a398362
    4ee8:	e414f17c 	.word	0xe414f17c

00004eec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4eec:	4a05      	ldr	r2, [pc, #20]	; (4f04 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4eee:	b510      	push	{r4, lr}
    4ef0:	6852      	ldr	r2, [r2, #4]
    4ef2:	b112      	cbz	r2, 4efa <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ef8:	4710      	bx	r2
    4efa:	2192      	movs	r1, #146	; 0x92
    4efc:	2004      	movs	r0, #4
    4efe:	f7ff ff69 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f02:	0000      	.short	0x0000
    4f04:	200010f4 	.word	0x200010f4

00004f08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4f08:	4a05      	ldr	r2, [pc, #20]	; (4f20 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4f0a:	b510      	push	{r4, lr}
    4f0c:	6892      	ldr	r2, [r2, #8]
    4f0e:	b112      	cbz	r2, 4f16 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4f14:	4710      	bx	r2
    4f16:	2198      	movs	r1, #152	; 0x98
    4f18:	2004      	movs	r0, #4
    4f1a:	f7ff ff5b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f1e:	0000      	.short	0x0000
    4f20:	200010f4 	.word	0x200010f4

00004f24 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4f24:	4805      	ldr	r0, [pc, #20]	; (4f3c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4f26:	6801      	ldr	r1, [r0, #0]
    4f28:	b129      	cbz	r1, 4f36 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4f2a:	6841      	ldr	r1, [r0, #4]
    4f2c:	b119      	cbz	r1, 4f36 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4f2e:	6880      	ldr	r0, [r0, #8]
    4f30:	b108      	cbz	r0, 4f36 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4f32:	2001      	movs	r0, #1
    4f34:	4770      	bx	lr
    4f36:	2000      	movs	r0, #0
    4f38:	4770      	bx	lr
    4f3a:	0000      	.short	0x0000
    4f3c:	200010f4 	.word	0x200010f4

00004f40 <sdc_rand_source_register>:
    4f40:	4902      	ldr	r1, [pc, #8]	; (4f4c <sdc_rand_source_register+0xc>)
    4f42:	c80d      	ldmia	r0, {r0, r2, r3}
    4f44:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4f48:	2000      	movs	r0, #0
    4f4a:	4770      	bx	lr
    4f4c:	200010f4 	.word	0x200010f4

00004f50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f52:	4c12      	ldr	r4, [pc, #72]	; (4f9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4f54:	2600      	movs	r6, #0
    4f56:	6825      	ldr	r5, [r4, #0]
    4f58:	e011      	b.n	4f7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4f5a:	9800      	ldr	r0, [sp, #0]
    4f5c:	2802      	cmp	r0, #2
    4f5e:	d002      	beq.n	4f66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4f60:	2803      	cmp	r0, #3
    4f62:	d10c      	bne.n	4f7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4f64:	e006      	b.n	4f74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4f66:	6820      	ldr	r0, [r4, #0]
    4f68:	b110      	cbz	r0, 4f70 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4f6a:	2000      	movs	r0, #0
    4f6c:	6026      	str	r6, [r4, #0]
    4f6e:	e005      	b.n	4f7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4f70:	2128      	movs	r1, #40	; 0x28
    4f72:	e00c      	b.n	4f8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4f74:	6820      	ldr	r0, [r4, #0]
    4f76:	b168      	cbz	r0, 4f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4f78:	2001      	movs	r0, #1
    4f7a:	6026      	str	r6, [r4, #0]
    4f7c:	47a8      	blx	r5
    4f7e:	4668      	mov	r0, sp
    4f80:	f000 fcf8 	bl	5974 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4f84:	2800      	cmp	r0, #0
    4f86:	d0e8      	beq.n	4f5a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4f88:	2805      	cmp	r0, #5
    4f8a:	d005      	beq.n	4f98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4f8c:	2135      	movs	r1, #53	; 0x35
    4f8e:	2004      	movs	r0, #4
    4f90:	f7ff ff20 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f94:	212d      	movs	r1, #45	; 0x2d
    4f96:	e7fa      	b.n	4f8e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f9a:	0000      	.short	0x0000
    4f9c:	20000080 	.word	0x20000080
    4fa0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4fa2:	4c1f      	ldr	r4, [pc, #124]	; (5020 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4fa4:	4605      	mov	r5, r0
    4fa6:	7820      	ldrb	r0, [r4, #0]
    4fa8:	b140      	cbz	r0, 4fbc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4faa:	78a2      	ldrb	r2, [r4, #2]
    4fac:	1c61      	adds	r1, r4, #1
    4fae:	4628      	mov	r0, r5
    4fb0:	1c92      	adds	r2, r2, #2
    4fb2:	f007 fed6 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4fb6:	2000      	movs	r0, #0
    4fb8:	7020      	strb	r0, [r4, #0]
    4fba:	e021      	b.n	5000 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4fbc:	4819      	ldr	r0, [pc, #100]	; (5024 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4fbe:	f001 ffe1 	bl	6f84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4fc2:	2800      	cmp	r0, #0
    4fc4:	d01d      	beq.n	5002 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4fc6:	4c17      	ldr	r4, [pc, #92]	; (5024 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4fc8:	7820      	ldrb	r0, [r4, #0]
    4fca:	2811      	cmp	r0, #17
    4fcc:	d104      	bne.n	4fd8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4fce:	210a      	movs	r1, #10
    4fd0:	203e      	movs	r0, #62	; 0x3e
    4fd2:	f008 f86b 	bl	d0ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4fd6:	b118      	cbz	r0, 4fe0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4fd8:	7820      	ldrb	r0, [r4, #0]
    4fda:	2808      	cmp	r0, #8
    4fdc:	d005      	beq.n	4fea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4fde:	e009      	b.n	4ff4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4fe0:	4910      	ldr	r1, [pc, #64]	; (5024 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4fe2:	4628      	mov	r0, r5
    4fe4:	f008 fa6c 	bl	d4c0 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4fe8:	e00a      	b.n	5000 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4fea:	2105      	movs	r1, #5
    4fec:	203e      	movs	r0, #62	; 0x3e
    4fee:	f008 f85d 	bl	d0ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4ff2:	b138      	cbz	r0, 5004 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4ff4:	490b      	ldr	r1, [pc, #44]	; (5024 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4ff6:	4628      	mov	r0, r5
    4ff8:	f008 f8b6 	bl	d168 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4ffc:	2800      	cmp	r0, #0
    4ffe:	d000      	beq.n	5002 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5000:	2001      	movs	r0, #1
    5002:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5004:	88a0      	ldrh	r0, [r4, #4]
    5006:	f8ad 0000 	strh.w	r0, [sp]
    500a:	a901      	add	r1, sp, #4
    500c:	4668      	mov	r0, sp
    500e:	f008 fb75 	bl	d6fc <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    5012:	2800      	cmp	r0, #0
    5014:	d0f5      	beq.n	5002 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    5016:	219c      	movs	r1, #156	; 0x9c
    5018:	2008      	movs	r0, #8
    501a:	f7ff fedb 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    501e:	0000      	.short	0x0000
    5020:	20001292 	.word	0x20001292
    5024:	20001190 	.word	0x20001190
    5028:	b570      	push	{r4, r5, r6, lr}
    502a:	780a      	ldrb	r2, [r1, #0]
    502c:	7082      	strb	r2, [r0, #2]
    502e:	b33a      	cbz	r2, 5080 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5030:	2a01      	cmp	r2, #1
    5032:	d825      	bhi.n	5080 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    5034:	2313      	movs	r3, #19
    5036:	7003      	strb	r3, [r0, #0]
    5038:	2300      	movs	r3, #0
    503a:	e00a      	b.n	5052 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    503c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    5040:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    5044:	78a6      	ldrb	r6, [r4, #2]
    5046:	70ee      	strb	r6, [r5, #3]
    5048:	8864      	ldrh	r4, [r4, #2]
    504a:	0a24      	lsrs	r4, r4, #8
    504c:	1c5b      	adds	r3, r3, #1
    504e:	712c      	strb	r4, [r5, #4]
    5050:	b2db      	uxtb	r3, r3
    5052:	4293      	cmp	r3, r2
    5054:	d3f2      	bcc.n	503c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    5056:	2300      	movs	r3, #0
    5058:	e00b      	b.n	5072 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    505a:	bf00      	nop
    505c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5060:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5064:	792e      	ldrb	r6, [r5, #4]
    5066:	7166      	strb	r6, [r4, #5]
    5068:	88ad      	ldrh	r5, [r5, #4]
    506a:	0a2d      	lsrs	r5, r5, #8
    506c:	1c5b      	adds	r3, r3, #1
    506e:	71a5      	strb	r5, [r4, #6]
    5070:	b2db      	uxtb	r3, r3
    5072:	4293      	cmp	r3, r2
    5074:	d3f2      	bcc.n	505c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    5076:	2101      	movs	r1, #1
    5078:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    507c:	b2c0      	uxtb	r0, r0
    507e:	bd70      	pop	{r4, r5, r6, pc}
    5080:	2000      	movs	r0, #0
    5082:	bd70      	pop	{r4, r5, r6, pc}

00005084 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5084:	2101      	movs	r1, #1
    5086:	4a0c      	ldr	r2, [pc, #48]	; (50b8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    5088:	2840      	cmp	r0, #64	; 0x40
    508a:	d20c      	bcs.n	50a6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    508c:	2820      	cmp	r0, #32
    508e:	d803      	bhi.n	5098 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    5090:	1e40      	subs	r0, r0, #1
    5092:	4081      	lsls	r1, r0
    5094:	6810      	ldr	r0, [r2, #0]
    5096:	e002      	b.n	509e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    5098:	3821      	subs	r0, #33	; 0x21
    509a:	4081      	lsls	r1, r0
    509c:	6850      	ldr	r0, [r2, #4]
    509e:	4201      	tst	r1, r0
    50a0:	d107      	bne.n	50b2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    50a2:	2000      	movs	r0, #0
    50a4:	4770      	bx	lr
    50a6:	28ff      	cmp	r0, #255	; 0xff
    50a8:	d003      	beq.n	50b2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    50aa:	3840      	subs	r0, #64	; 0x40
    50ac:	4081      	lsls	r1, r0
    50ae:	6890      	ldr	r0, [r2, #8]
    50b0:	e7f5      	b.n	509e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    50b2:	2001      	movs	r0, #1
    50b4:	4770      	bx	lr
    50b6:	0000      	.short	0x0000
    50b8:	20000084 	.word	0x20000084

000050bc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    50bc:	2101      	movs	r1, #1
    50be:	1e40      	subs	r0, r0, #1
    50c0:	4081      	lsls	r1, r0
    50c2:	4804      	ldr	r0, [pc, #16]	; (50d4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    50c4:	68c0      	ldr	r0, [r0, #12]
    50c6:	4201      	tst	r1, r0
    50c8:	d001      	beq.n	50ce <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    50ca:	2001      	movs	r0, #1
    50cc:	4770      	bx	lr
    50ce:	2000      	movs	r0, #0
    50d0:	4770      	bx	lr
    50d2:	0000      	.short	0x0000
    50d4:	20000084 	.word	0x20000084

000050d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    50d8:	4901      	ldr	r1, [pc, #4]	; (50e0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    50da:	6800      	ldr	r0, [r0, #0]
    50dc:	60c8      	str	r0, [r1, #12]
    50de:	4770      	bx	lr
    50e0:	20000084 	.word	0x20000084

000050e4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    50e4:	4904      	ldr	r1, [pc, #16]	; (50f8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    50e6:	6802      	ldr	r2, [r0, #0]
    50e8:	6840      	ldr	r0, [r0, #4]
    50ea:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    50ee:	600a      	str	r2, [r1, #0]
    50f0:	4a02      	ldr	r2, [pc, #8]	; (50fc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    50f2:	4310      	orrs	r0, r2
    50f4:	6048      	str	r0, [r1, #4]
    50f6:	4770      	bx	lr
    50f8:	20000084 	.word	0x20000084
    50fc:	024007f8 	.word	0x024007f8

00005100 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5100:	4901      	ldr	r1, [pc, #4]	; (5108 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    5102:	6800      	ldr	r0, [r0, #0]
    5104:	6088      	str	r0, [r1, #8]
    5106:	4770      	bx	lr
    5108:	20000084 	.word	0x20000084

0000510c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    510c:	4805      	ldr	r0, [pc, #20]	; (5124 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    510e:	f04f 31ff 	mov.w	r1, #4294967295
    5112:	6001      	str	r1, [r0, #0]
    5114:	0cc9      	lsrs	r1, r1, #19
    5116:	6041      	str	r1, [r0, #4]
    5118:	2100      	movs	r1, #0
    511a:	6081      	str	r1, [r0, #8]
    511c:	211f      	movs	r1, #31
    511e:	60c1      	str	r1, [r0, #12]
    5120:	4770      	bx	lr
    5122:	0000      	.short	0x0000
    5124:	20000084 	.word	0x20000084

00005128 <sdc_hci_cmd_cb_reset>:
    5128:	b510      	push	{r4, lr}
    512a:	f7ff ffef 	bl	510c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    512e:	f00b f942 	bl	103b6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    5132:	4604      	mov	r4, r0
    5134:	4802      	ldr	r0, [pc, #8]	; (5140 <sdc_hci_cmd_cb_reset+0x18>)
    5136:	6800      	ldr	r0, [r0, #0]
    5138:	b100      	cbz	r0, 513c <sdc_hci_cmd_cb_reset+0x14>
    513a:	4780      	blx	r0
    513c:	4620      	mov	r0, r4
    513e:	bd10      	pop	{r4, pc}
    5140:	20000094 	.word	0x20000094

00005144 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5144:	4901      	ldr	r1, [pc, #4]	; (514c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    5146:	6008      	str	r0, [r1, #0]
    5148:	4770      	bx	lr
    514a:	0000      	.short	0x0000
    514c:	20000094 	.word	0x20000094

00005150 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5150:	2102      	movs	r1, #2
    5152:	8001      	strh	r1, [r0, #0]
    5154:	8041      	strh	r1, [r0, #2]
    5156:	2100      	movs	r1, #0
    5158:	7101      	strb	r1, [r0, #4]
    515a:	2133      	movs	r1, #51	; 0x33
    515c:	7141      	strb	r1, [r0, #5]
    515e:	f642 2178 	movw	r1, #10872	; 0x2a78
    5162:	80c1      	strh	r1, [r0, #6]
    5164:	4901      	ldr	r1, [pc, #4]	; (516c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    5166:	6081      	str	r1, [r0, #8]
    5168:	2000      	movs	r0, #0
    516a:	4770      	bx	lr
    516c:	61f52018 	.word	0x61f52018

00005170 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5170:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5172:	4604      	mov	r4, r0
    5174:	4669      	mov	r1, sp
    5176:	f008 fe23 	bl	ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    517a:	b170      	cbz	r0, 519a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    517c:	f240 215a 	movw	r1, #602	; 0x25a
    5180:	e008      	b.n	5194 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5182:	bf00      	nop
    5184:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5188:	4621      	mov	r1, r4
    518a:	f000 f8ab 	bl	52e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    518e:	b120      	cbz	r0, 519a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5190:	f240 215f 	movw	r1, #607	; 0x25f
    5194:	2017      	movs	r0, #23
    5196:	f7ff fe1d 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    519a:	4668      	mov	r0, sp
    519c:	f000 f852 	bl	5244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    51a0:	2800      	cmp	r0, #0
    51a2:	d0ef      	beq.n	5184 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    51a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000051a8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    51a8:	b510      	push	{r4, lr}
    51aa:	2802      	cmp	r0, #2
    51ac:	d304      	bcc.n	51b8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    51ae:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    51b2:	2017      	movs	r0, #23
    51b4:	f7ff fe0e 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51b8:	4901      	ldr	r1, [pc, #4]	; (51c0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    51ba:	5c08      	ldrb	r0, [r1, r0]
    51bc:	bd10      	pop	{r4, pc}
    51be:	0000      	.short	0x0000
    51c0:	20001100 	.word	0x20001100

000051c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    51c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51c6:	0005      	movs	r5, r0
    51c8:	9500      	str	r5, [sp, #0]
    51ca:	d010      	beq.n	51ee <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    51cc:	2600      	movs	r6, #0
    51ce:	7808      	ldrb	r0, [r1, #0]
    51d0:	7849      	ldrb	r1, [r1, #1]
    51d2:	4604      	mov	r4, r0
    51d4:	42a1      	cmp	r1, r4
    51d6:	d900      	bls.n	51da <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    51d8:	460c      	mov	r4, r1
    51da:	1cea      	adds	r2, r5, #3
    51dc:	f022 0203 	bic.w	r2, r2, #3
    51e0:	42aa      	cmp	r2, r5
    51e2:	d006      	beq.n	51f2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    51e4:	f240 1179 	movw	r1, #377	; 0x179
    51e8:	2017      	movs	r0, #23
    51ea:	f7ff fdf3 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ee:	2601      	movs	r6, #1
    51f0:	e7ed      	b.n	51ce <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    51f2:	4f13      	ldr	r7, [pc, #76]	; (5240 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    51f4:	7038      	strb	r0, [r7, #0]
    51f6:	7079      	strb	r1, [r7, #1]
    51f8:	4631      	mov	r1, r6
    51fa:	4668      	mov	r0, sp
    51fc:	f000 f8ee 	bl	53dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    5200:	2100      	movs	r1, #0
    5202:	460b      	mov	r3, r1
    5204:	9800      	ldr	r0, [sp, #0]
    5206:	1cc0      	adds	r0, r0, #3
    5208:	f020 0003 	bic.w	r0, r0, #3
    520c:	9000      	str	r0, [sp, #0]
    520e:	b96e      	cbnz	r6, 522c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5210:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    5214:	60d0      	str	r0, [r2, #12]
    5216:	2000      	movs	r0, #0
    5218:	e006      	b.n	5228 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    521a:	bf00      	nop
    521c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    5220:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    5224:	1c40      	adds	r0, r0, #1
    5226:	b2c0      	uxtb	r0, r0
    5228:	42a0      	cmp	r0, r4
    522a:	d3f7      	bcc.n	521c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    522c:	9800      	ldr	r0, [sp, #0]
    522e:	1c49      	adds	r1, r1, #1
    5230:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5234:	b2c9      	uxtb	r1, r1
    5236:	9000      	str	r0, [sp, #0]
    5238:	2902      	cmp	r1, #2
    523a:	d3e3      	bcc.n	5204 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    523c:	1b40      	subs	r0, r0, r5
    523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5240:	20001100 	.word	0x20001100

00005244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5244:	b570      	push	{r4, r5, r6, lr}
    5246:	4604      	mov	r4, r0
    5248:	f008 ff66 	bl	e118 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    524c:	b108      	cbz	r0, 5252 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    524e:	2010      	movs	r0, #16
    5250:	bd70      	pop	{r4, r5, r6, pc}
    5252:	7825      	ldrb	r5, [r4, #0]
    5254:	f000 f8fe 	bl	5454 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    5258:	4602      	mov	r2, r0
    525a:	480c      	ldr	r0, [pc, #48]	; (528c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    525c:	8861      	ldrh	r1, [r4, #2]
    525e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5262:	e00e      	b.n	5282 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5264:	68c3      	ldr	r3, [r0, #12]
    5266:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    526a:	b143      	cbz	r3, 527e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    526c:	1c4a      	adds	r2, r1, #1
    526e:	8062      	strh	r2, [r4, #2]
    5270:	80a1      	strh	r1, [r4, #4]
    5272:	68c0      	ldr	r0, [r0, #12]
    5274:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5278:	60a0      	str	r0, [r4, #8]
    527a:	2000      	movs	r0, #0
    527c:	bd70      	pop	{r4, r5, r6, pc}
    527e:	1c49      	adds	r1, r1, #1
    5280:	b289      	uxth	r1, r1
    5282:	4291      	cmp	r1, r2
    5284:	d3ee      	bcc.n	5264 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5286:	8061      	strh	r1, [r4, #2]
    5288:	2005      	movs	r0, #5
    528a:	bd70      	pop	{r4, r5, r6, pc}
    528c:	20001100 	.word	0x20001100

00005290 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5294:	b121      	cbz	r1, 52a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5296:	2901      	cmp	r1, #1
    5298:	d002      	beq.n	52a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    529a:	2000      	movs	r0, #0
    529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52a0:	4c0f      	ldr	r4, [pc, #60]	; (52e0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    52a2:	2700      	movs	r7, #0
    52a4:	463b      	mov	r3, r7
    52a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52aa:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    52ae:	f814 c001 	ldrb.w	ip, [r4, r1]
    52b2:	e00a      	b.n	52ca <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    52b4:	19dc      	adds	r4, r3, r7
    52b6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    52ba:	b2a4      	uxth	r4, r4
    52bc:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    52c0:	f1be 0f00 	cmp.w	lr, #0
    52c4:	d004      	beq.n	52d0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    52c6:	1c5b      	adds	r3, r3, #1
    52c8:	b29b      	uxth	r3, r3
    52ca:	459c      	cmp	ip, r3
    52cc:	d8f2      	bhi.n	52b4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    52ce:	4634      	mov	r4, r6
    52d0:	8004      	strh	r4, [r0, #0]
    52d2:	4620      	mov	r0, r4
    52d4:	42b4      	cmp	r4, r6
    52d6:	d0e0      	beq.n	529a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    52d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52dc:	f000 b834 	b.w	5348 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    52e0:	20001100 	.word	0x20001100

000052e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    52e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52e8:	4606      	mov	r6, r0
    52ea:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    52ee:	460c      	mov	r4, r1
    52f0:	f243 0702 	movw	r7, #12290	; 0x3002
    52f4:	38ff      	subs	r0, #255	; 0xff
    52f6:	d020      	beq.n	533a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    52f8:	2c02      	cmp	r4, #2
    52fa:	d302      	bcc.n	5302 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    52fc:	2007      	movs	r0, #7
    52fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5302:	4630      	mov	r0, r6
    5304:	f000 f85a 	bl	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    5308:	0005      	movs	r5, r0
    530a:	d016      	beq.n	533a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    530c:	480c      	ldr	r0, [pc, #48]	; (5340 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    530e:	4629      	mov	r1, r5
    5310:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    5314:	4630      	mov	r0, r6
    5316:	4790      	blx	r2
    5318:	480a      	ldr	r0, [pc, #40]	; (5344 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    531a:	2100      	movs	r1, #0
    531c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    5320:	68f8      	ldr	r0, [r7, #12]
    5322:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    5326:	4620      	mov	r0, r4
    5328:	f000 f88a 	bl	5440 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    532c:	4602      	mov	r2, r0
    532e:	4629      	mov	r1, r5
    5330:	6878      	ldr	r0, [r7, #4]
    5332:	f008 fd24 	bl	dd7e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5336:	2000      	movs	r0, #0
    5338:	e7e1      	b.n	52fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    533a:	4638      	mov	r0, r7
    533c:	e7df      	b.n	52fe <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    533e:	0000      	.short	0x0000
    5340:	00005474 	.word	0x00005474
    5344:	20001100 	.word	0x20001100
    5348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    534c:	4690      	mov	r8, r2
    534e:	460d      	mov	r5, r1
    5350:	4607      	mov	r7, r0
    5352:	f008 fd46 	bl	dde2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5356:	b148      	cbz	r0, 536c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5358:	4816      	ldr	r0, [pc, #88]	; (53b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    535a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    535e:	68f0      	ldr	r0, [r6, #12]
    5360:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5364:	b128      	cbz	r0, 5372 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5366:	f44f 719d 	mov.w	r1, #314	; 0x13a
    536a:	e015      	b.n	5398 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    536c:	f240 1139 	movw	r1, #313	; 0x139
    5370:	e012      	b.n	5398 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5372:	6870      	ldr	r0, [r6, #4]
    5374:	2800      	cmp	r0, #0
    5376:	d01a      	beq.n	53ae <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5378:	4628      	mov	r0, r5
    537a:	f000 f861 	bl	5440 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    537e:	4601      	mov	r1, r0
    5380:	6870      	ldr	r0, [r6, #4]
    5382:	f008 fcae 	bl	dce2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5386:	0004      	movs	r4, r0
    5388:	d010      	beq.n	53ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    538a:	68f0      	ldr	r0, [r6, #12]
    538c:	2d02      	cmp	r5, #2
    538e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5392:	d304      	bcc.n	539e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5394:	f240 1145 	movw	r1, #325	; 0x145
    5398:	2017      	movs	r0, #23
    539a:	f7ff fd1b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    539e:	4806      	ldr	r0, [pc, #24]	; (53b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    53a0:	4642      	mov	r2, r8
    53a2:	4621      	mov	r1, r4
    53a4:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    53a8:	4638      	mov	r0, r7
    53aa:	4798      	blx	r3
    53ac:	4620      	mov	r0, r4
    53ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53b2:	0000      	.short	0x0000
    53b4:	20001100 	.word	0x20001100
    53b8:	0000546c 	.word	0x0000546c
    53bc:	b570      	push	{r4, r5, r6, lr}
    53be:	460c      	mov	r4, r1
    53c0:	4605      	mov	r5, r0
    53c2:	f008 fd0e 	bl	dde2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    53c6:	2800      	cmp	r0, #0
    53c8:	d005      	beq.n	53d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    53ca:	4803      	ldr	r0, [pc, #12]	; (53d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    53cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    53d0:	68c0      	ldr	r0, [r0, #12]
    53d2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    53d6:	bd70      	pop	{r4, r5, r6, pc}
    53d8:	20001100 	.word	0x20001100
    53dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    53e0:	4e16      	ldr	r6, [pc, #88]	; (543c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    53e2:	4688      	mov	r8, r1
    53e4:	4605      	mov	r5, r0
    53e6:	2400      	movs	r4, #0
    53e8:	6828      	ldr	r0, [r5, #0]
    53ea:	1cc0      	adds	r0, r0, #3
    53ec:	f020 0003 	bic.w	r0, r0, #3
    53f0:	6028      	str	r0, [r5, #0]
    53f2:	4620      	mov	r0, r4
    53f4:	f000 f824 	bl	5440 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    53f8:	5d31      	ldrb	r1, [r6, r4]
    53fa:	4348      	muls	r0, r1
    53fc:	f1b8 0f00 	cmp.w	r8, #0
    5400:	d001      	beq.n	5406 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    5402:	2200      	movs	r2, #0
    5404:	e000      	b.n	5408 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    5406:	682a      	ldr	r2, [r5, #0]
    5408:	4601      	mov	r1, r0
    540a:	9200      	str	r2, [sp, #0]
    540c:	b132      	cbz	r2, 541c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    540e:	2700      	movs	r7, #0
    5410:	ea4f 000d 	mov.w	r0, sp
    5414:	f008 fc92 	bl	dd3c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5418:	b11f      	cbz	r7, 5422 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    541a:	e006      	b.n	542a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    541c:	2701      	movs	r7, #1
    541e:	2000      	movs	r0, #0
    5420:	e7f8      	b.n	5414 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    5422:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5426:	9a00      	ldr	r2, [sp, #0]
    5428:	604a      	str	r2, [r1, #4]
    542a:	6829      	ldr	r1, [r5, #0]
    542c:	1c64      	adds	r4, r4, #1
    542e:	4408      	add	r0, r1
    5430:	b2e4      	uxtb	r4, r4
    5432:	6028      	str	r0, [r5, #0]
    5434:	2c02      	cmp	r4, #2
    5436:	d3d7      	bcc.n	53e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    5438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    543c:	20001100 	.word	0x20001100
    5440:	4903      	ldr	r1, [pc, #12]	; (5450 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5442:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5446:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    544a:	1cc0      	adds	r0, r0, #3
    544c:	4008      	ands	r0, r1
    544e:	4770      	bx	lr
    5450:	00005468 	.word	0x00005468
    5454:	4903      	ldr	r1, [pc, #12]	; (5464 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5456:	7808      	ldrb	r0, [r1, #0]
    5458:	7849      	ldrb	r1, [r1, #1]
    545a:	4288      	cmp	r0, r1
    545c:	d200      	bcs.n	5460 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    545e:	4608      	mov	r0, r1
    5460:	4770      	bx	lr
    5462:	0000      	.short	0x0000
    5464:	20001100 	.word	0x20001100
    5468:	00d40228 	.word	0x00d40228
    546c:	0000ddf7 	.word	0x0000ddf7
    5470:	0000ddf7 	.word	0x0000ddf7
    5474:	0000f969 	.word	0x0000f969
    5478:	0000ee37 	.word	0x0000ee37

0000547c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    547c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5480:	4c26      	ldr	r4, [pc, #152]	; (551c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    5482:	4680      	mov	r8, r0
    5484:	b081      	sub	sp, #4
    5486:	6820      	ldr	r0, [r4, #0]
    5488:	469a      	mov	sl, r3
    548a:	4693      	mov	fp, r2
    548c:	b158      	cbz	r0, 54a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    548e:	7a02      	ldrb	r2, [r0, #8]
    5490:	4542      	cmp	r2, r8
    5492:	d903      	bls.n	549c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5494:	6841      	ldr	r1, [r0, #4]
    5496:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    549a:	b140      	cbz	r0, 54ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    549c:	f243 0002 	movw	r0, #12290	; 0x3002
    54a0:	b005      	add	sp, #20
    54a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    54a6:	21a5      	movs	r1, #165	; 0xa5
    54a8:	2018      	movs	r0, #24
    54aa:	f7ff fc93 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ae:	4619      	mov	r1, r3
    54b0:	9802      	ldr	r0, [sp, #8]
    54b2:	f008 fcb8 	bl	de26 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    54b6:	b286      	uxth	r6, r0
    54b8:	4658      	mov	r0, fp
    54ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    54bc:	f008 fcaa 	bl	de14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    54c0:	b285      	uxth	r5, r0
    54c2:	1970      	adds	r0, r6, r5
    54c4:	1d00      	adds	r0, r0, #4
    54c6:	b287      	uxth	r7, r0
    54c8:	6820      	ldr	r0, [r4, #0]
    54ca:	46a1      	mov	r9, r4
    54cc:	4639      	mov	r1, r7
    54ce:	6800      	ldr	r0, [r0, #0]
    54d0:	f008 fc07 	bl	dce2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    54d4:	0004      	movs	r4, r0
    54d6:	d01f      	beq.n	5518 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    54d8:	8067      	strh	r7, [r4, #2]
    54da:	8025      	strh	r5, [r4, #0]
    54dc:	4629      	mov	r1, r5
    54de:	1d20      	adds	r0, r4, #4
    54e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    54e2:	4607      	mov	r7, r0
    54e4:	465a      	mov	r2, fp
    54e6:	2301      	movs	r3, #1
    54e8:	9500      	str	r5, [sp, #0]
    54ea:	f008 fb5a 	bl	dba2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    54ee:	8820      	ldrh	r0, [r4, #0]
    54f0:	4631      	mov	r1, r6
    54f2:	4438      	add	r0, r7
    54f4:	2301      	movs	r3, #1
    54f6:	9a02      	ldr	r2, [sp, #8]
    54f8:	f8cd a000 	str.w	sl, [sp]
    54fc:	f008 fb51 	bl	dba2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5500:	8820      	ldrh	r0, [r4, #0]
    5502:	19c1      	adds	r1, r0, r7
    5504:	4638      	mov	r0, r7
    5506:	f008 fb7d 	bl	dc04 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    550a:	f8d9 0000 	ldr.w	r0, [r9]
    550e:	6841      	ldr	r1, [r0, #4]
    5510:	2000      	movs	r0, #0
    5512:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5516:	e7c3      	b.n	54a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5518:	2004      	movs	r0, #4
    551a:	e7c1      	b.n	54a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    551c:	20000098 	.word	0x20000098

00005520 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    5520:	b570      	push	{r4, r5, r6, lr}
    5522:	4c14      	ldr	r4, [pc, #80]	; (5574 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5524:	6823      	ldr	r3, [r4, #0]
    5526:	b18b      	cbz	r3, 554c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5528:	7a19      	ldrb	r1, [r3, #8]
    552a:	4281      	cmp	r1, r0
    552c:	d912      	bls.n	5554 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    552e:	685a      	ldr	r2, [r3, #4]
    5530:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5534:	b171      	cbz	r1, 5554 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5536:	2500      	movs	r5, #0
    5538:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    553c:	884a      	ldrh	r2, [r1, #2]
    553e:	6818      	ldr	r0, [r3, #0]
    5540:	f008 fc1d 	bl	dd7e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5544:	6821      	ldr	r1, [r4, #0]
    5546:	2000      	movs	r0, #0
    5548:	7a0a      	ldrb	r2, [r1, #8]
    554a:	e00c      	b.n	5566 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    554c:	21c8      	movs	r1, #200	; 0xc8
    554e:	2018      	movs	r0, #24
    5550:	f7ff fc40 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5554:	f243 0002 	movw	r0, #12290	; 0x3002
    5558:	bd70      	pop	{r4, r5, r6, pc}
    555a:	684b      	ldr	r3, [r1, #4]
    555c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5560:	b933      	cbnz	r3, 5570 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5562:	1c40      	adds	r0, r0, #1
    5564:	b2c0      	uxtb	r0, r0
    5566:	4282      	cmp	r2, r0
    5568:	d8f7      	bhi.n	555a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    556a:	6808      	ldr	r0, [r1, #0]
    556c:	f008 fbfc 	bl	dd68 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5570:	2000      	movs	r0, #0
    5572:	bd70      	pop	{r4, r5, r6, pc}
    5574:	20000098 	.word	0x20000098

00005578 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    557c:	460d      	mov	r5, r1
    557e:	0004      	movs	r4, r0
    5580:	4690      	mov	r8, r2
    5582:	f04f 0600 	mov.w	r6, #0
    5586:	d009      	beq.n	559c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5588:	2700      	movs	r7, #0
    558a:	1ce0      	adds	r0, r4, #3
    558c:	f020 0003 	bic.w	r0, r0, #3
    5590:	42a0      	cmp	r0, r4
    5592:	d005      	beq.n	55a0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5594:	2186      	movs	r1, #134	; 0x86
    5596:	2018      	movs	r0, #24
    5598:	f7ff fc1c 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    559c:	2701      	movs	r7, #1
    559e:	e7f4      	b.n	558a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    55a0:	b1cd      	cbz	r5, 55d6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    55a2:	4611      	mov	r1, r2
    55a4:	2000      	movs	r0, #0
    55a6:	f008 fbc9 	bl	dd3c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    55aa:	300c      	adds	r0, #12
    55ac:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    55b0:	b98f      	cbnz	r7, 55d6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    55b2:	4f0a      	ldr	r7, [pc, #40]	; (55dc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    55b4:	f104 000c 	add.w	r0, r4, #12
    55b8:	00aa      	lsls	r2, r5, #2
    55ba:	603c      	str	r4, [r7, #0]
    55bc:	7225      	strb	r5, [r4, #8]
    55be:	6060      	str	r0, [r4, #4]
    55c0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    55c4:	6020      	str	r0, [r4, #0]
    55c6:	2100      	movs	r1, #0
    55c8:	6860      	ldr	r0, [r4, #4]
    55ca:	f007 fc44 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    55ce:	4641      	mov	r1, r8
    55d0:	6838      	ldr	r0, [r7, #0]
    55d2:	f008 fbb3 	bl	dd3c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    55d6:	4630      	mov	r0, r6
    55d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55dc:	20000098 	.word	0x20000098

000055e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    55e0:	b570      	push	{r4, r5, r6, lr}
    55e2:	4d08      	ldr	r5, [pc, #32]	; (5604 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    55e4:	6828      	ldr	r0, [r5, #0]
    55e6:	2800      	cmp	r0, #0
    55e8:	d00a      	beq.n	5600 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    55ea:	2400      	movs	r4, #0
    55ec:	e004      	b.n	55f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    55ee:	4620      	mov	r0, r4
    55f0:	f7ff ff96 	bl	5520 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    55f4:	1c64      	adds	r4, r4, #1
    55f6:	b2e4      	uxtb	r4, r4
    55f8:	6828      	ldr	r0, [r5, #0]
    55fa:	7a00      	ldrb	r0, [r0, #8]
    55fc:	42a0      	cmp	r0, r4
    55fe:	d8f6      	bhi.n	55ee <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    5600:	bd70      	pop	{r4, r5, r6, pc}
    5602:	0000      	.short	0x0000
    5604:	20000098 	.word	0x20000098

00005608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5608:	4909      	ldr	r1, [pc, #36]	; (5630 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    560a:	b510      	push	{r4, lr}
    560c:	4602      	mov	r2, r0
    560e:	6809      	ldr	r1, [r1, #0]
    5610:	2000      	movs	r0, #0
    5612:	b149      	cbz	r1, 5628 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5614:	7a0b      	ldrb	r3, [r1, #8]
    5616:	4293      	cmp	r3, r2
    5618:	d905      	bls.n	5626 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    561a:	6849      	ldr	r1, [r1, #4]
    561c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5620:	2900      	cmp	r1, #0
    5622:	d000      	beq.n	5626 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5624:	1d08      	adds	r0, r1, #4
    5626:	bd10      	pop	{r4, pc}
    5628:	21ee      	movs	r1, #238	; 0xee
    562a:	2018      	movs	r0, #24
    562c:	f7ff fbd2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5630:	20000098 	.word	0x20000098

00005634 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5634:	490a      	ldr	r1, [pc, #40]	; (5660 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5636:	b510      	push	{r4, lr}
    5638:	4602      	mov	r2, r0
    563a:	6809      	ldr	r1, [r1, #0]
    563c:	2000      	movs	r0, #0
    563e:	b159      	cbz	r1, 5658 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5640:	7a0b      	ldrb	r3, [r1, #8]
    5642:	4293      	cmp	r3, r2
    5644:	d907      	bls.n	5656 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5646:	6849      	ldr	r1, [r1, #4]
    5648:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    564c:	2900      	cmp	r1, #0
    564e:	d002      	beq.n	5656 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5650:	f831 0b04 	ldrh.w	r0, [r1], #4
    5654:	4408      	add	r0, r1
    5656:	bd10      	pop	{r4, pc}
    5658:	21fc      	movs	r1, #252	; 0xfc
    565a:	2018      	movs	r0, #24
    565c:	f7ff fbba 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5660:	20000098 	.word	0x20000098
    5664:	b570      	push	{r4, r5, r6, lr}
    5666:	4b1e      	ldr	r3, [pc, #120]	; (56e0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5668:	6845      	ldr	r5, [r0, #4]
    566a:	4604      	mov	r4, r0
    566c:	2200      	movs	r2, #0
    566e:	b1a1      	cbz	r1, 569a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5670:	2001      	movs	r0, #1
    5672:	7060      	strb	r0, [r4, #1]
    5674:	8858      	ldrh	r0, [r3, #2]
    5676:	0881      	lsrs	r1, r0, #2
    5678:	f05f 0000 	movs.w	r0, #0
    567c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5680:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5684:	831a      	strh	r2, [r3, #24]
    5686:	8419      	strh	r1, [r3, #32]
    5688:	fb00 5301 	mla	r3, r0, r1, r5
    568c:	6073      	str	r3, [r6, #4]
    568e:	1823      	adds	r3, r4, r0
    5690:	1c40      	adds	r0, r0, #1
    5692:	751a      	strb	r2, [r3, #20]
    5694:	2804      	cmp	r0, #4
    5696:	d3f1      	bcc.n	567c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5698:	bd70      	pop	{r4, r5, r6, pc}
    569a:	7062      	strb	r2, [r4, #1]
    569c:	f05f 0000 	movs.w	r0, #0
    56a0:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    56a4:	830a      	strh	r2, [r1, #24]
    56a6:	840a      	strh	r2, [r1, #32]
    56a8:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    56ac:	604a      	str	r2, [r1, #4]
    56ae:	1821      	adds	r1, r4, r0
    56b0:	1c40      	adds	r0, r0, #1
    56b2:	750a      	strb	r2, [r1, #20]
    56b4:	2804      	cmp	r0, #4
    56b6:	d3f3      	bcc.n	56a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    56b8:	8858      	ldrh	r0, [r3, #2]
    56ba:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    56be:	d201      	bcs.n	56c4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    56c0:	0846      	lsrs	r6, r0, #1
    56c2:	e000      	b.n	56c6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    56c4:	26ff      	movs	r6, #255	; 0xff
    56c6:	f008 fc21 	bl	df0c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    56ca:	6065      	str	r5, [r4, #4]
    56cc:	8420      	strh	r0, [r4, #32]
    56ce:	1829      	adds	r1, r5, r0
    56d0:	60a1      	str	r1, [r4, #8]
    56d2:	8466      	strh	r6, [r4, #34]	; 0x22
    56d4:	60e5      	str	r5, [r4, #12]
    56d6:	84a0      	strh	r0, [r4, #36]	; 0x24
    56d8:	6121      	str	r1, [r4, #16]
    56da:	84e6      	strh	r6, [r4, #38]	; 0x26
    56dc:	bd70      	pop	{r4, r5, r6, pc}
    56de:	0000      	.short	0x0000
    56e0:	2000009c 	.word	0x2000009c

000056e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    56e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56e8:	b170      	cbz	r0, 5708 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    56ea:	2500      	movs	r5, #0
    56ec:	4411      	add	r1, r2
    56ee:	b2cc      	uxtb	r4, r1
    56f0:	4e24      	ldr	r6, [pc, #144]	; (5784 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    56f2:	1cc1      	adds	r1, r0, #3
    56f4:	2700      	movs	r7, #0
    56f6:	f021 0103 	bic.w	r1, r1, #3
    56fa:	7034      	strb	r4, [r6, #0]
    56fc:	4281      	cmp	r1, r0
    56fe:	d005      	beq.n	570c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    5700:	214e      	movs	r1, #78	; 0x4e
    5702:	2009      	movs	r0, #9
    5704:	f7ff fb66 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5708:	2501      	movs	r5, #1
    570a:	e7ef      	b.n	56ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    570c:	2b1f      	cmp	r3, #31
    570e:	d804      	bhi.n	571a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    5710:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5714:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    5718:	e009      	b.n	572e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    571a:	0059      	lsls	r1, r3, #1
    571c:	2bff      	cmp	r3, #255	; 0xff
    571e:	d90b      	bls.n	5738 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    5720:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    5724:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    5728:	d200      	bcs.n	572c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    572a:	4611      	mov	r1, r2
    572c:	b289      	uxth	r1, r1
    572e:	1cc9      	adds	r1, r1, #3
    5730:	f021 0303 	bic.w	r3, r1, #3
    5734:	b135      	cbz	r5, 5744 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    5736:	e007      	b.n	5748 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    5738:	227c      	movs	r2, #124	; 0x7c
    573a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    573e:	d3f5      	bcc.n	572c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5740:	217c      	movs	r1, #124	; 0x7c
    5742:	e7f3      	b.n	572c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5744:	6070      	str	r0, [r6, #4]
    5746:	8073      	strh	r3, [r6, #2]
    5748:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    574c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    5750:	2100      	movs	r1, #0
    5752:	6876      	ldr	r6, [r6, #4]
    5754:	f04f 0c01 	mov.w	ip, #1
    5758:	e00d      	b.n	5776 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    575a:	b94d      	cbnz	r5, 5770 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    575c:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    5760:	eb00 0e02 	add.w	lr, r0, r2
    5764:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5768:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    576c:	f8c7 e004 	str.w	lr, [r7, #4]
    5770:	1c49      	adds	r1, r1, #1
    5772:	441a      	add	r2, r3
    5774:	b2c9      	uxtb	r1, r1
    5776:	42a1      	cmp	r1, r4
    5778:	d3ef      	bcc.n	575a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    577a:	1dd2      	adds	r2, r2, #7
    577c:	f022 0007 	bic.w	r0, r2, #7
    5780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5784:	2000009c 	.word	0x2000009c

00005788 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5788:	b570      	push	{r4, r5, r6, lr}
    578a:	4a10      	ldr	r2, [pc, #64]	; (57cc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    578c:	2000      	movs	r0, #0
    578e:	6851      	ldr	r1, [r2, #4]
    5790:	7812      	ldrb	r2, [r2, #0]
    5792:	e014      	b.n	57be <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5794:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5798:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    579c:	b16b      	cbz	r3, 57ba <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    579e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    57a2:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    57a6:	d00c      	beq.n	57c2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    57a8:	2500      	movs	r5, #0
    57aa:	70a5      	strb	r5, [r4, #2]
    57ac:	2101      	movs	r1, #1
    57ae:	4620      	mov	r0, r4
    57b0:	f7ff ff58 	bl	5664 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    57b4:	7025      	strb	r5, [r4, #0]
    57b6:	4620      	mov	r0, r4
    57b8:	bd70      	pop	{r4, r5, r6, pc}
    57ba:	1c40      	adds	r0, r0, #1
    57bc:	b2c0      	uxtb	r0, r0
    57be:	4290      	cmp	r0, r2
    57c0:	d3e8      	bcc.n	5794 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    57c2:	21a9      	movs	r1, #169	; 0xa9
    57c4:	2009      	movs	r0, #9
    57c6:	f7ff fb05 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57ca:	0000      	.short	0x0000
    57cc:	2000009c 	.word	0x2000009c

000057d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    57d0:	4804      	ldr	r0, [pc, #16]	; (57e4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    57d2:	b510      	push	{r4, lr}
    57d4:	8840      	ldrh	r0, [r0, #2]
    57d6:	0884      	lsrs	r4, r0, #2
    57d8:	f008 fb98 	bl	df0c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    57dc:	4284      	cmp	r4, r0
    57de:	d300      	bcc.n	57e2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    57e0:	4620      	mov	r0, r4
    57e2:	bd10      	pop	{r4, pc}
    57e4:	2000009c 	.word	0x2000009c
    57e8:	b530      	push	{r4, r5, lr}
    57ea:	490d      	ldr	r1, [pc, #52]	; (5820 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    57ec:	2001      	movs	r0, #1
    57ee:	6048      	str	r0, [r1, #4]
    57f0:	1e82      	subs	r2, r0, #2
    57f2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    57f6:	490b      	ldr	r1, [pc, #44]	; (5824 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    57f8:	6088      	str	r0, [r1, #8]
    57fa:	2300      	movs	r3, #0
    57fc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    5800:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5804:	4c08      	ldr	r4, [pc, #32]	; (5828 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    5806:	6023      	str	r3, [r4, #0]
    5808:	1d25      	adds	r5, r4, #4
    580a:	6028      	str	r0, [r5, #0]
    580c:	6088      	str	r0, [r1, #8]
    580e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    5812:	6023      	str	r3, [r4, #0]
    5814:	6028      	str	r0, [r5, #0]
    5816:	4906      	ldr	r1, [pc, #24]	; (5830 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    5818:	4804      	ldr	r0, [pc, #16]	; (582c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    581a:	6008      	str	r0, [r1, #0]
    581c:	bd30      	pop	{r4, r5, pc}
    581e:	0000      	.short	0x0000
    5820:	4000e000 	.word	0x4000e000
    5824:	4000f000 	.word	0x4000f000
    5828:	4000f500 	.word	0x4000f500
    582c:	3ff60000 	.word	0x3ff60000
    5830:	4001f508 	.word	0x4001f508

00005834 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5834:	b510      	push	{r4, lr}
    5836:	4604      	mov	r4, r0
    5838:	f7ff ffd6 	bl	57e8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    583c:	f008 fc39 	bl	e0b2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    5840:	f000 f888 	bl	5954 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    5844:	4905      	ldr	r1, [pc, #20]	; (585c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>)
    5846:	4804      	ldr	r0, [pc, #16]	; (5858 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    5848:	6008      	str	r0, [r1, #0]
    584a:	4620      	mov	r0, r4
    584c:	f000 f8b8 	bl	59c0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5854:	f000 b8d0 	b.w	59f8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    5858:	3ff60000 	.word	0x3ff60000
    585c:	4001f508 	.word	0x4001f508
    5860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5864:	4682      	mov	sl, r0
    5866:	4838      	ldr	r0, [pc, #224]	; (5948 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5868:	f007 f9d2 	bl	cc10 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    586c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 5948 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>
    5870:	b128      	cbz	r0, 587e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4a>
    5872:	2601      	movs	r6, #1
    5874:	f10b 0001 	add.w	r0, fp, #1
    5878:	21ff      	movs	r1, #255	; 0xff
    587a:	7001      	strb	r1, [r0, #0]
    587c:	e000      	b.n	5880 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x4c>
    587e:	2600      	movs	r6, #0
    5880:	f44f 7580 	mov.w	r5, #256	; 0x100
    5884:	4c31      	ldr	r4, [pc, #196]	; (594c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>)
    5886:	f04f 0800 	mov.w	r8, #0
    588a:	1d2f      	adds	r7, r5, #4
    588c:	2101      	movs	r1, #1
    588e:	6061      	str	r1, [r4, #4]
    5890:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5894:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5898:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    589c:	6021      	str	r1, [r4, #0]
    589e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5950 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x11c>
    58a2:	e01c      	b.n	58de <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    58a4:	f8d9 0000 	ldr.w	r0, [r9]
    58a8:	06c0      	lsls	r0, r0, #27
    58aa:	d518      	bpl.n	58de <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    58ac:	200e      	movs	r0, #14
    58ae:	f008 fc0f 	bl	e0d0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    58b2:	f3ef 8010 	mrs	r0, PRIMASK
    58b6:	9000      	str	r0, [sp, #0]
    58b8:	b672      	cpsid	i
    58ba:	2103      	movs	r1, #3
    58bc:	4620      	mov	r0, r4
    58be:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    58c2:	4629      	mov	r1, r5
    58c4:	f008 fc11 	bl	e0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58c8:	b930      	cbnz	r0, 58d8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    58ca:	4639      	mov	r1, r7
    58cc:	4620      	mov	r0, r4
    58ce:	f008 fc0c 	bl	e0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58d2:	b908      	cbnz	r0, 58d8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa4>
    58d4:	f7ff f8f0 	bl	4ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    58d8:	9800      	ldr	r0, [sp, #0]
    58da:	b900      	cbnz	r0, 58de <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xaa>
    58dc:	b662      	cpsie	i
    58de:	4629      	mov	r1, r5
    58e0:	4620      	mov	r0, r4
    58e2:	f008 fc02 	bl	e0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58e6:	b928      	cbnz	r0, 58f4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xc0>
    58e8:	4639      	mov	r1, r7
    58ea:	4620      	mov	r0, r4
    58ec:	f008 fbfd 	bl	e0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58f0:	2800      	cmp	r0, #0
    58f2:	d0d7      	beq.n	58a4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x70>
    58f4:	4639      	mov	r1, r7
    58f6:	4620      	mov	r0, r4
    58f8:	f008 fbf7 	bl	e0ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    58fc:	2800      	cmp	r0, #0
    58fe:	d1c5      	bne.n	588c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x58>
    5900:	bb06      	cbnz	r6, 5944 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    5902:	f89b 1001 	ldrb.w	r1, [fp, #1]
    5906:	f88d 1000 	strb.w	r1, [sp]
    590a:	9900      	ldr	r1, [sp, #0]
    590c:	9100      	str	r1, [sp, #0]
    590e:	f89d 1000 	ldrb.w	r1, [sp]
    5912:	b109      	cbz	r1, 5918 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe4>
    5914:	2501      	movs	r5, #1
    5916:	e000      	b.n	591a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe6>
    5918:	2500      	movs	r5, #0
    591a:	f10b 0001 	add.w	r0, fp, #1
    591e:	f880 8000 	strb.w	r8, [r0]
    5922:	2003      	movs	r0, #3
    5924:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5928:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    592c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5930:	200e      	movs	r0, #14
    5932:	f008 fbcd 	bl	e0d0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    5936:	4804      	ldr	r0, [pc, #16]	; (5948 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    5938:	f007 f981 	bl	cc3e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    593c:	b115      	cbz	r5, 5944 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    593e:	2011      	movs	r0, #17
    5940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5944:	2000      	movs	r0, #0
    5946:	e7fb      	b.n	5940 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    5948:	200002af 	.word	0x200002af
    594c:	4000e000 	.word	0x4000e000
    5950:	e000ed10 	.word	0xe000ed10

00005954 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5954:	b510      	push	{r4, lr}
    5956:	4806      	ldr	r0, [pc, #24]	; (5970 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5958:	f007 f96d 	bl	cc36 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    595c:	b118      	cbz	r0, 5966 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    595e:	2127      	movs	r1, #39	; 0x27
    5960:	201d      	movs	r0, #29
    5962:	f7ff fa37 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5966:	4802      	ldr	r0, [pc, #8]	; (5970 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    5968:	2100      	movs	r1, #0
    596a:	7041      	strb	r1, [r0, #1]
    596c:	bd10      	pop	{r4, pc}
    596e:	0000      	.short	0x0000
    5970:	200002af 	.word	0x200002af

00005974 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    5974:	b570      	push	{r4, r5, r6, lr}
    5976:	4911      	ldr	r1, [pc, #68]	; (59bc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    5978:	680a      	ldr	r2, [r1, #0]
    597a:	b1ea      	cbz	r2, 59b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    597c:	2300      	movs	r3, #0
    597e:	461d      	mov	r5, r3
    5980:	2401      	movs	r4, #1
    5982:	684a      	ldr	r2, [r1, #4]
    5984:	1c52      	adds	r2, r2, #1
    5986:	604a      	str	r2, [r1, #4]
    5988:	2a09      	cmp	r2, #9
    598a:	d300      	bcc.n	598e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    598c:	604d      	str	r5, [r1, #4]
    598e:	790e      	ldrb	r6, [r1, #4]
    5990:	fa04 f206 	lsl.w	r2, r4, r6
    5994:	680e      	ldr	r6, [r1, #0]
    5996:	4216      	tst	r6, r2
    5998:	d00b      	beq.n	59b2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    599a:	f3ef 8310 	mrs	r3, PRIMASK
    599e:	b672      	cpsid	i
    59a0:	680c      	ldr	r4, [r1, #0]
    59a2:	4394      	bics	r4, r2
    59a4:	600c      	str	r4, [r1, #0]
    59a6:	b903      	cbnz	r3, 59aa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    59a8:	b662      	cpsie	i
    59aa:	6849      	ldr	r1, [r1, #4]
    59ac:	6001      	str	r1, [r0, #0]
    59ae:	2000      	movs	r0, #0
    59b0:	bd70      	pop	{r4, r5, r6, pc}
    59b2:	1c5b      	adds	r3, r3, #1
    59b4:	2b09      	cmp	r3, #9
    59b6:	d3e4      	bcc.n	5982 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    59b8:	2005      	movs	r0, #5
    59ba:	bd70      	pop	{r4, r5, r6, pc}
    59bc:	200000a4 	.word	0x200000a4

000059c0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    59c0:	4802      	ldr	r0, [pc, #8]	; (59cc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    59c2:	2100      	movs	r1, #0
    59c4:	6001      	str	r1, [r0, #0]
    59c6:	6041      	str	r1, [r0, #4]
    59c8:	4770      	bx	lr
    59ca:	0000      	.short	0x0000
    59cc:	200000a4 	.word	0x200000a4

000059d0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    59d0:	b510      	push	{r4, lr}
    59d2:	4c08      	ldr	r4, [pc, #32]	; (59f4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    59d4:	7861      	ldrb	r1, [r4, #1]
    59d6:	b109      	cbz	r1, 59dc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    59d8:	200f      	movs	r0, #15
    59da:	bd10      	pop	{r4, pc}
    59dc:	f7fe fff8 	bl	49d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    59e0:	7020      	strb	r0, [r4, #0]
    59e2:	28ff      	cmp	r0, #255	; 0xff
    59e4:	d001      	beq.n	59ea <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    59e6:	2000      	movs	r0, #0
    59e8:	bd10      	pop	{r4, pc}
    59ea:	2178      	movs	r1, #120	; 0x78
    59ec:	201f      	movs	r0, #31
    59ee:	f7ff f9f1 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59f2:	0000      	.short	0x0000
    59f4:	200000ac 	.word	0x200000ac

000059f8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    59f8:	4901      	ldr	r1, [pc, #4]	; (5a00 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    59fa:	2000      	movs	r0, #0
    59fc:	7048      	strb	r0, [r1, #1]
    59fe:	4770      	bx	lr
    5a00:	200000ac 	.word	0x200000ac

00005a04 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5a04:	4806      	ldr	r0, [pc, #24]	; (5a20 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    5a06:	4a07      	ldr	r2, [pc, #28]	; (5a24 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5a08:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5a0a:	8852      	ldrh	r2, [r2, #2]
    5a0c:	4291      	cmp	r1, r2
    5a0e:	d104      	bne.n	5a1a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5a10:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5a14:	b108      	cbz	r0, 5a1a <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5a16:	2000      	movs	r0, #0
    5a18:	4770      	bx	lr
    5a1a:	2001      	movs	r0, #1
    5a1c:	4770      	bx	lr
    5a1e:	0000      	.short	0x0000
    5a20:	20001394 	.word	0x20001394
    5a24:	20000294 	.word	0x20000294

00005a28 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5a28:	4901      	ldr	r1, [pc, #4]	; (5a30 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5a2a:	8048      	strh	r0, [r1, #2]
    5a2c:	4770      	bx	lr
    5a2e:	0000      	.short	0x0000
    5a30:	20000294 	.word	0x20000294

00005a34 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5a34:	4808      	ldr	r0, [pc, #32]	; (5a58 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    5a36:	4a09      	ldr	r2, [pc, #36]	; (5a5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5a38:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5a3a:	8852      	ldrh	r2, [r2, #2]
    5a3c:	4291      	cmp	r1, r2
    5a3e:	d109      	bne.n	5a54 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a40:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a44:	8481      	strh	r1, [r0, #36]	; 0x24
    5a46:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5a4a:	b119      	cbz	r1, 5a54 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a4c:	2100      	movs	r1, #0
    5a4e:	7001      	strb	r1, [r0, #0]
    5a50:	2001      	movs	r0, #1
    5a52:	4770      	bx	lr
    5a54:	2000      	movs	r0, #0
    5a56:	4770      	bx	lr
    5a58:	20001394 	.word	0x20001394
    5a5c:	20000294 	.word	0x20000294

00005a60 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5a60:	4807      	ldr	r0, [pc, #28]	; (5a80 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5a62:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5a66:	2901      	cmp	r1, #1
    5a68:	d007      	beq.n	5a7a <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5a6a:	2101      	movs	r1, #1
    5a6c:	7001      	strb	r1, [r0, #0]
    5a6e:	4805      	ldr	r0, [pc, #20]	; (5a84 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5a70:	4903      	ldr	r1, [pc, #12]	; (5a80 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5a72:	8800      	ldrh	r0, [r0, #0]
    5a74:	8488      	strh	r0, [r1, #36]	; 0x24
    5a76:	2001      	movs	r0, #1
    5a78:	4770      	bx	lr
    5a7a:	2000      	movs	r0, #0
    5a7c:	4770      	bx	lr
    5a7e:	0000      	.short	0x0000
    5a80:	20001394 	.word	0x20001394
    5a84:	20000294 	.word	0x20000294

00005a88 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5a88:	4906      	ldr	r1, [pc, #24]	; (5aa4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5a8a:	4b07      	ldr	r3, [pc, #28]	; (5aa8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5a8c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a8e:	885b      	ldrh	r3, [r3, #2]
    5a90:	429a      	cmp	r2, r3
    5a92:	d105      	bne.n	5aa0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5a94:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a98:	b112      	cbz	r2, 5aa0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5a9a:	6001      	str	r1, [r0, #0]
    5a9c:	2001      	movs	r0, #1
    5a9e:	4770      	bx	lr
    5aa0:	2000      	movs	r0, #0
    5aa2:	4770      	bx	lr
    5aa4:	20001394 	.word	0x20001394
    5aa8:	20000294 	.word	0x20000294

00005aac <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5aac:	4909      	ldr	r1, [pc, #36]	; (5ad4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5aae:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5ab0:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5ab4:	3bff      	subs	r3, #255	; 0xff
    5ab6:	d002      	beq.n	5abe <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5ab8:	2100      	movs	r1, #0
    5aba:	6001      	str	r1, [r0, #0]
    5abc:	e007      	b.n	5ace <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5abe:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5ac2:	4904      	ldr	r1, [pc, #16]	; (5ad4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5ac4:	2a01      	cmp	r2, #1
    5ac6:	d002      	beq.n	5ace <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5ac8:	6001      	str	r1, [r0, #0]
    5aca:	2001      	movs	r0, #1
    5acc:	4770      	bx	lr
    5ace:	2000      	movs	r0, #0
    5ad0:	4770      	bx	lr
    5ad2:	0000      	.short	0x0000
    5ad4:	20001394 	.word	0x20001394

00005ad8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5ad8:	4901      	ldr	r1, [pc, #4]	; (5ae0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5ada:	8008      	strh	r0, [r1, #0]
    5adc:	4770      	bx	lr
    5ade:	0000      	.short	0x0000
    5ae0:	20000294 	.word	0x20000294

00005ae4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5ae4:	4905      	ldr	r1, [pc, #20]	; (5afc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5ae6:	2000      	movs	r0, #0
    5ae8:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5aec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5af0:	8488      	strh	r0, [r1, #36]	; 0x24
    5af2:	4903      	ldr	r1, [pc, #12]	; (5b00 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5af4:	8008      	strh	r0, [r1, #0]
    5af6:	8048      	strh	r0, [r1, #2]
    5af8:	4770      	bx	lr
    5afa:	0000      	.short	0x0000
    5afc:	20001394 	.word	0x20001394
    5b00:	20000294 	.word	0x20000294
    5b04:	4905      	ldr	r1, [pc, #20]	; (5b1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5b06:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5b08:	4282      	cmp	r2, r0
    5b0a:	d105      	bne.n	5b18 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5b0c:	2000      	movs	r0, #0
    5b0e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5b12:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5b16:	8488      	strh	r0, [r1, #36]	; 0x24
    5b18:	4770      	bx	lr
    5b1a:	0000      	.short	0x0000
    5b1c:	20001394 	.word	0x20001394

00005b20 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5b20:	4a0a      	ldr	r2, [pc, #40]	; (5b4c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5b22:	b110      	cbz	r0, 5b2a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5b24:	2801      	cmp	r0, #1
    5b26:	d007      	beq.n	5b38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5b28:	e00e      	b.n	5b48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5b2a:	7850      	ldrb	r0, [r2, #1]
    5b2c:	b160      	cbz	r0, 5b48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5b2e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5b32:	6008      	str	r0, [r1, #0]
    5b34:	88d0      	ldrh	r0, [r2, #6]
    5b36:	e004      	b.n	5b42 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5b38:	7810      	ldrb	r0, [r2, #0]
    5b3a:	b128      	cbz	r0, 5b48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5b3c:	6890      	ldr	r0, [r2, #8]
    5b3e:	6008      	str	r0, [r1, #0]
    5b40:	8990      	ldrh	r0, [r2, #12]
    5b42:	8088      	strh	r0, [r1, #4]
    5b44:	2001      	movs	r0, #1
    5b46:	4770      	bx	lr
    5b48:	2000      	movs	r0, #0
    5b4a:	4770      	bx	lr
    5b4c:	200002b1 	.word	0x200002b1

00005b50 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5b50:	4a08      	ldr	r2, [pc, #32]	; (5b74 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5b52:	2301      	movs	r3, #1
    5b54:	b138      	cbz	r0, 5b66 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5b56:	2801      	cmp	r0, #1
    5b58:	d104      	bne.n	5b64 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5b5a:	7013      	strb	r3, [r2, #0]
    5b5c:	6808      	ldr	r0, [r1, #0]
    5b5e:	6090      	str	r0, [r2, #8]
    5b60:	8888      	ldrh	r0, [r1, #4]
    5b62:	8190      	strh	r0, [r2, #12]
    5b64:	4770      	bx	lr
    5b66:	7053      	strb	r3, [r2, #1]
    5b68:	6808      	ldr	r0, [r1, #0]
    5b6a:	f8c2 0002 	str.w	r0, [r2, #2]
    5b6e:	8888      	ldrh	r0, [r1, #4]
    5b70:	80d0      	strh	r0, [r2, #6]
    5b72:	4770      	bx	lr
    5b74:	200002b1 	.word	0x200002b1

00005b78 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5b78:	4906      	ldr	r1, [pc, #24]	; (5b94 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5b7a:	b110      	cbz	r0, 5b82 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5b7c:	2801      	cmp	r0, #1
    5b7e:	d002      	beq.n	5b86 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5b80:	e005      	b.n	5b8e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5b82:	7848      	ldrb	r0, [r1, #1]
    5b84:	e000      	b.n	5b88 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5b86:	7808      	ldrb	r0, [r1, #0]
    5b88:	b108      	cbz	r0, 5b8e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5b8a:	2001      	movs	r0, #1
    5b8c:	4770      	bx	lr
    5b8e:	2000      	movs	r0, #0
    5b90:	4770      	bx	lr
    5b92:	0000      	.short	0x0000
    5b94:	200002b1 	.word	0x200002b1

00005b98 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5b98:	4901      	ldr	r1, [pc, #4]	; (5ba0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5b9a:	7748      	strb	r0, [r1, #29]
    5b9c:	4770      	bx	lr
    5b9e:	0000      	.short	0x0000
    5ba0:	20000ce2 	.word	0x20000ce2

00005ba4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5ba4:	4801      	ldr	r0, [pc, #4]	; (5bac <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5ba6:	78c0      	ldrb	r0, [r0, #3]
    5ba8:	4770      	bx	lr
    5baa:	0000      	.short	0x0000
    5bac:	200000c8 	.word	0x200000c8

00005bb0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5bb0:	4801      	ldr	r0, [pc, #4]	; (5bb8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5bb2:	7900      	ldrb	r0, [r0, #4]
    5bb4:	4770      	bx	lr
    5bb6:	0000      	.short	0x0000
    5bb8:	200000c8 	.word	0x200000c8

00005bbc <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bc0:	4c14      	ldr	r4, [pc, #80]	; (5c14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x58>)
    5bc2:	4606      	mov	r6, r0
    5bc4:	7f60      	ldrb	r0, [r4, #29]
    5bc6:	b318      	cbz	r0, 5c10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5bc8:	7f20      	ldrb	r0, [r4, #28]
    5bca:	f88d 0000 	strb.w	r0, [sp]
    5bce:	9800      	ldr	r0, [sp, #0]
    5bd0:	9000      	str	r0, [sp, #0]
    5bd2:	f89d 0000 	ldrb.w	r0, [sp]
    5bd6:	2700      	movs	r7, #0
    5bd8:	b1d0      	cbz	r0, 5c10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x54>
    5bda:	f104 051c 	add.w	r5, r4, #28
    5bde:	f04f 081a 	mov.w	r8, #26
    5be2:	f104 090e 	add.w	r9, r4, #14
    5be6:	7f20      	ldrb	r0, [r4, #28]
    5be8:	f88d 0000 	strb.w	r0, [sp]
    5bec:	9800      	ldr	r0, [sp, #0]
    5bee:	9000      	str	r0, [sp, #0]
    5bf0:	f89d 0000 	ldrb.w	r0, [sp]
    5bf4:	b148      	cbz	r0, 5c0a <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4e>
    5bf6:	702f      	strb	r7, [r5, #0]
    5bf8:	7077      	strb	r7, [r6, #1]
    5bfa:	f886 8000 	strb.w	r8, [r6]
    5bfe:	220e      	movs	r2, #14
    5c00:	4649      	mov	r1, r9
    5c02:	1d30      	adds	r0, r6, #4
    5c04:	f007 f8ad 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c08:	e7ed      	b.n	5be6 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x2a>
    5c0a:	2001      	movs	r0, #1
    5c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c10:	2000      	movs	r0, #0
    5c12:	e7fb      	b.n	5c0c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>
    5c14:	20000ce2 	.word	0x20000ce2

00005c18 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5c18:	b510      	push	{r4, lr}
    5c1a:	4604      	mov	r4, r0
    5c1c:	f000 f950 	bl	5ec0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5c20:	b118      	cbz	r0, 5c2a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5c22:	21be      	movs	r1, #190	; 0xbe
    5c24:	2027      	movs	r0, #39	; 0x27
    5c26:	f7ff f8d5 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c2a:	4803      	ldr	r0, [pc, #12]	; (5c38 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5c2c:	2101      	movs	r1, #1
    5c2e:	f008 fe43 	bl	e8b8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5c32:	4802      	ldr	r0, [pc, #8]	; (5c3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5c34:	62c4      	str	r4, [r0, #44]	; 0x2c
    5c36:	bd10      	pop	{r4, pc}
    5c38:	20000cc0 	.word	0x20000cc0
    5c3c:	200000c8 	.word	0x200000c8

00005c40 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5c40:	4901      	ldr	r1, [pc, #4]	; (5c48 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5c42:	2001      	movs	r0, #1
    5c44:	7188      	strb	r0, [r1, #6]
    5c46:	4770      	bx	lr
    5c48:	200000c8 	.word	0x200000c8

00005c4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c50:	4c5d      	ldr	r4, [pc, #372]	; (5dc8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    5c52:	9d06      	ldr	r5, [sp, #24]
    5c54:	7826      	ldrb	r6, [r4, #0]
    5c56:	2e00      	cmp	r6, #0
    5c58:	d16a      	bne.n	5d30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c5a:	2a00      	cmp	r2, #0
    5c5c:	d068      	beq.n	5d30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d066      	beq.n	5d30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c62:	2d00      	cmp	r5, #0
    5c64:	d064      	beq.n	5d30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe4>
    5c66:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    5c6a:	f104 0614 	add.w	r6, r4, #20
    5c6e:	2000      	movs	r0, #0
    5c70:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    5c74:	71a0      	strb	r0, [r4, #6]
    5c76:	7160      	strb	r0, [r4, #5]
    5c78:	70e0      	strb	r0, [r4, #3]
    5c7a:	70a0      	strb	r0, [r4, #2]
    5c7c:	7120      	strb	r0, [r4, #4]
    5c7e:	81a0      	strh	r0, [r4, #12]
    5c80:	81e0      	strh	r0, [r4, #14]
    5c82:	f000 f955 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5c86:	4606      	mov	r6, r0
    5c88:	f000 f94c 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5c8c:	4605      	mov	r5, r0
    5c8e:	f005 ffeb 	bl	bc68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5c92:	f005 fd1d 	bl	b6d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5c96:	f995 0072 	ldrsb.w	r0, [r5, #114]	; 0x72
    5c9a:	f006 f86b 	bl	bd74 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5c9e:	f105 001c 	add.w	r0, r5, #28
    5ca2:	f006 f951 	bl	bf48 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5ca6:	6968      	ldr	r0, [r5, #20]
    5ca8:	f006 f944 	bl	bf34 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5cac:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5cb0:	f006 f97e 	bl	bfb0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5cb4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5cb8:	6840      	ldr	r0, [r0, #4]
    5cba:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    5cbe:	b108      	cbz	r0, 5cc4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5cc0:	f005 ff42 	bl	bb48 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5cc4:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5cc8:	2001      	movs	r0, #1
    5cca:	f005 fe75 	bl	b9b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5cce:	2800      	cmp	r0, #0
    5cd0:	d073      	beq.n	5dba <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    5cd2:	483e      	ldr	r0, [pc, #248]	; (5dcc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    5cd4:	f005 fee8 	bl	baa8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5cd8:	8828      	ldrh	r0, [r5, #0]
    5cda:	f7ff fcab 	bl	5634 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5cde:	6320      	str	r0, [r4, #48]	; 0x30
    5ce0:	8828      	ldrh	r0, [r5, #0]
    5ce2:	f7ff fc91 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5ce6:	6360      	str	r0, [r4, #52]	; 0x34
    5ce8:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5cec:	4838      	ldr	r0, [pc, #224]	; (5dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5cee:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    5cf0:	f100 0808 	add.w	r8, r0, #8
    5cf4:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    5cf8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5cfa:	f8c0 1021 	str.w	r1, [r0, #33]	; 0x21
    5cfe:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5d00:	f8c0 1025 	str.w	r1, [r0, #37]	; 0x25
    5d04:	f000 f99a 	bl	603c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x160>
    5d08:	4601      	mov	r1, r0
    5d0a:	8fa8      	ldrh	r0, [r5, #60]	; 0x3c
    5d0c:	f008 fb67 	bl	e3de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5d10:	8f29      	ldrh	r1, [r5, #56]	; 0x38
    5d12:	4281      	cmp	r1, r0
    5d14:	d200      	bcs.n	5d18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xcc>
    5d16:	4608      	mov	r0, r1
    5d18:	7220      	strb	r0, [r4, #8]
    5d1a:	46a0      	mov	r8, r4
    5d1c:	f895 106f 	ldrb.w	r1, [r5, #111]	; 0x6f
    5d20:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
    5d24:	7cf7      	ldrb	r7, [r6, #19]
    5d26:	f8b5 4040 	ldrh.w	r4, [r5, #64]	; 0x40
    5d2a:	2908      	cmp	r1, #8
    5d2c:	d104      	bne.n	5d38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5d2e:	e002      	b.n	5d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xea>
    5d30:	f240 1115 	movw	r1, #277	; 0x115
    5d34:	e045      	b.n	5dc2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5d36:	2104      	movs	r1, #4
    5d38:	f008 fb51 	bl	e3de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5d3c:	b90f      	cbnz	r7, 5d42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf6>
    5d3e:	1d00      	adds	r0, r0, #4
    5d40:	b280      	uxth	r0, r0
    5d42:	4284      	cmp	r4, r0
    5d44:	d200      	bcs.n	5d48 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5d46:	4620      	mov	r0, r4
    5d48:	b2c4      	uxtb	r4, r0
    5d4a:	f888 4009 	strb.w	r4, [r8, #9]
    5d4e:	7cf1      	ldrb	r1, [r6, #19]
    5d50:	2900      	cmp	r1, #0
    5d52:	d001      	beq.n	5d58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    5d54:	f04f 0104 	mov.w	r1, #4
    5d58:	4421      	add	r1, r4
    5d5a:	f888 1007 	strb.w	r1, [r8, #7]
    5d5e:	d014      	beq.n	5d8a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x13e>
    5d60:	481b      	ldr	r0, [pc, #108]	; (5dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d62:	f04f 0701 	mov.w	r7, #1
    5d66:	f100 0008 	add.w	r0, r0, #8
    5d6a:	7607      	strb	r7, [r0, #24]
    5d6c:	e9d6 1218 	ldrd	r1, r2, [r6, #96]	; 0x60
    5d70:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5d74:	f895 006f 	ldrb.w	r0, [r5, #111]	; 0x6f
    5d78:	f008 fa37 	bl	e1ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5d7c:	4914      	ldr	r1, [pc, #80]	; (5dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d7e:	4603      	mov	r3, r0
    5d80:	4622      	mov	r2, r4
    5d82:	3108      	adds	r1, #8
    5d84:	4638      	mov	r0, r7
    5d86:	f005 fc0f 	bl	b5a8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    5d8a:	2001      	movs	r0, #1
    5d8c:	f000 fb7e 	bl	648c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    5d90:	4810      	ldr	r0, [pc, #64]	; (5dd4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5d92:	6800      	ldr	r0, [r0, #0]
    5d94:	2803      	cmp	r0, #3
    5d96:	d012      	beq.n	5dbe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5d98:	280b      	cmp	r0, #11
    5d9a:	d010      	beq.n	5dbe <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5d9c:	480c      	ldr	r0, [pc, #48]	; (5dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5d9e:	220e      	movs	r2, #14
    5da0:	2100      	movs	r1, #0
    5da2:	3052      	adds	r0, #82	; 0x52
    5da4:	f007 f857 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5da8:	4809      	ldr	r0, [pc, #36]	; (5dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5daa:	88b1      	ldrh	r1, [r6, #4]
    5dac:	3052      	adds	r0, #82	; 0x52
    5dae:	8041      	strh	r1, [r0, #2]
    5db0:	8829      	ldrh	r1, [r5, #0]
    5db2:	8001      	strh	r1, [r0, #0]
    5db4:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5db8:	7101      	strb	r1, [r0, #4]
    5dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dbe:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    5dc2:	2027      	movs	r0, #39	; 0x27
    5dc4:	f7ff f806 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dc8:	200000c8 	.word	0x200000c8
    5dcc:	0000668c 	.word	0x0000668c
    5dd0:	20000c90 	.word	0x20000c90
    5dd4:	40001550 	.word	0x40001550

00005dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ddc:	4605      	mov	r5, r0
    5dde:	f000 f8a7 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5de2:	4e32      	ldr	r6, [pc, #200]	; (5eac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd4>)
    5de4:	4604      	mov	r4, r0
    5de6:	f04f 0800 	mov.w	r8, #0
    5dea:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5dec:	7847      	ldrb	r7, [r0, #1]
    5dee:	b10d      	cbz	r5, 5df4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x1c>
    5df0:	2d01      	cmp	r5, #1
    5df2:	d101      	bne.n	5df8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5df4:	f886 8001 	strb.w	r8, [r6, #1]
    5df8:	7870      	ldrb	r0, [r6, #1]
    5dfa:	f04f 0901 	mov.w	r9, #1
    5dfe:	b150      	cbz	r0, 5e16 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x3e>
    5e00:	2801      	cmp	r0, #1
    5e02:	d01a      	beq.n	5e3a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x62>
    5e04:	2802      	cmp	r0, #2
    5e06:	d034      	beq.n	5e72 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9a>
    5e08:	2803      	cmp	r0, #3
    5e0a:	d048      	beq.n	5e9e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc6>
    5e0c:	f240 4114 	movw	r1, #1044	; 0x414
    5e10:	2027      	movs	r0, #39	; 0x27
    5e12:	f7fe ffdf 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e16:	2d01      	cmp	r5, #1
    5e18:	d032      	beq.n	5e80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5e1a:	f000 f8fb 	bl	6014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5e1e:	4639      	mov	r1, r7
    5e20:	2201      	movs	r2, #1
    5e22:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e24:	f007 fd47 	bl	d8b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5e28:	e028      	b.n	5e7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa4>
    5e2a:	bf00      	nop
    5e2c:	f884 8008 	strb.w	r8, [r4, #8]
    5e30:	e031      	b.n	5e96 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5e32:	bf00      	nop
    5e34:	f884 9008 	strb.w	r9, [r4, #8]
    5e38:	e02d      	b.n	5e96 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5e3a:	2d01      	cmp	r5, #1
    5e3c:	d008      	beq.n	5e50 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>
    5e3e:	f000 f8e9 	bl	6014 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5e42:	4639      	mov	r1, r7
    5e44:	2200      	movs	r2, #0
    5e46:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e48:	f007 fd35 	bl	d8b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5e4c:	2d02      	cmp	r5, #2
    5e4e:	d00b      	beq.n	5e68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e50:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5e54:	1c40      	adds	r0, r0, #1
    5e56:	f141 0100 	adc.w	r1, r1, #0
    5e5a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5e5e:	7a20      	ldrb	r0, [r4, #8]
    5e60:	2801      	cmp	r0, #1
    5e62:	d003      	beq.n	5e6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5e64:	f884 9008 	strb.w	r9, [r4, #8]
    5e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e6c:	f884 8008 	strb.w	r8, [r4, #8]
    5e70:	e7fa      	b.n	5e68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e72:	2d01      	cmp	r5, #1
    5e74:	d004      	beq.n	5e80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5e76:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e78:	f007 ff2e 	bl	dcd8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5e7c:	2d02      	cmp	r5, #2
    5e7e:	d0f3      	beq.n	5e68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5e80:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5e84:	1c40      	adds	r0, r0, #1
    5e86:	f141 0100 	adc.w	r1, r1, #0
    5e8a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5e8e:	7a20      	ldrb	r0, [r4, #8]
    5e90:	2801      	cmp	r0, #1
    5e92:	d1cf      	bne.n	5e34 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x5c>
    5e94:	e7ca      	b.n	5e2c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x54>
    5e96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e9a:	f001 b8d1 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e9e:	2d01      	cmp	r5, #1
    5ea0:	d0e2      	beq.n	5e68 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x90>
    5ea2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ea4:	f007 ff18 	bl	dcd8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ea8:	e7f5      	b.n	5e96 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xbe>
    5eaa:	0000      	.short	0x0000
    5eac:	200000c8 	.word	0x200000c8

00005eb0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5eb0:	4802      	ldr	r0, [pc, #8]	; (5ebc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5eb2:	89c0      	ldrh	r0, [r0, #14]
    5eb4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5eb8:	4770      	bx	lr
    5eba:	0000      	.short	0x0000
    5ebc:	200000c8 	.word	0x200000c8

00005ec0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5ec0:	4804      	ldr	r0, [pc, #16]	; (5ed4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5ec2:	7800      	ldrb	r0, [r0, #0]
    5ec4:	b108      	cbz	r0, 5eca <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5ec6:	200c      	movs	r0, #12
    5ec8:	4770      	bx	lr
    5eca:	4903      	ldr	r1, [pc, #12]	; (5ed8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5ecc:	2000      	movs	r0, #0
    5ece:	7748      	strb	r0, [r1, #29]
    5ed0:	4770      	bx	lr
    5ed2:	0000      	.short	0x0000
    5ed4:	200000c8 	.word	0x200000c8
    5ed8:	20000ce2 	.word	0x20000ce2

00005edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5edc:	480c      	ldr	r0, [pc, #48]	; (5f10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5ede:	b510      	push	{r4, lr}
    5ee0:	7801      	ldrb	r1, [r0, #0]
    5ee2:	b149      	cbz	r1, 5ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5ee4:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5ee8:	7800      	ldrb	r0, [r0, #0]
    5eea:	2802      	cmp	r0, #2
    5eec:	d008      	beq.n	5f00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5eee:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    5ef2:	2027      	movs	r0, #39	; 0x27
    5ef4:	f7fe ff6e 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5efc:	f000 b9e6 	b.w	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    5f00:	6848      	ldr	r0, [r1, #4]
    5f02:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    5f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f0a:	f005 bdd5 	b.w	bab8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5f0e:	0000      	.short	0x0000
    5f10:	200000c8 	.word	0x200000c8
    5f14:	4a02      	ldr	r2, [pc, #8]	; (5f20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5f16:	8993      	ldrh	r3, [r2, #12]
    5f18:	4303      	orrs	r3, r0
    5f1a:	8193      	strh	r3, [r2, #12]
    5f1c:	6952      	ldr	r2, [r2, #20]
    5f1e:	4710      	bx	r2
    5f20:	200000c8 	.word	0x200000c8
    5f24:	4801      	ldr	r0, [pc, #4]	; (5f2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5f26:	6840      	ldr	r0, [r0, #4]
    5f28:	4770      	bx	lr
    5f2a:	0000      	.short	0x0000
    5f2c:	20000100 	.word	0x20000100
    5f30:	4801      	ldr	r0, [pc, #4]	; (5f38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5f32:	6840      	ldr	r0, [r0, #4]
    5f34:	3078      	adds	r0, #120	; 0x78
    5f36:	4770      	bx	lr
    5f38:	20000100 	.word	0x20000100
    5f3c:	4a01      	ldr	r2, [pc, #4]	; (5f44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5f3e:	2100      	movs	r1, #0
    5f40:	6952      	ldr	r2, [r2, #20]
    5f42:	4710      	bx	r2
    5f44:	200000c8 	.word	0x200000c8
    5f48:	b570      	push	{r4, r5, r6, lr}
    5f4a:	f7ff fff1 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f4e:	4604      	mov	r4, r0
    5f50:	f7ff ffe8 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f54:	4605      	mov	r5, r0
    5f56:	4621      	mov	r1, r4
    5f58:	f008 fac4 	bl	e4e4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5f5c:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
    5f60:	2901      	cmp	r1, #1
    5f62:	d114      	bne.n	5f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5f64:	2800      	cmp	r0, #0
    5f66:	d012      	beq.n	5f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5f68:	4809      	ldr	r0, [pc, #36]	; (5f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5f6a:	6842      	ldr	r2, [r0, #4]
    5f6c:	8828      	ldrh	r0, [r5, #0]
    5f6e:	f8a2 0206 	strh.w	r0, [r2, #518]	; 0x206
    5f72:	7a60      	ldrb	r0, [r4, #9]
    5f74:	f882 0208 	strb.w	r0, [r2, #520]	; 0x208
    5f78:	7aa0      	ldrb	r0, [r4, #10]
    5f7a:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    5f7e:	f502 7201 	add.w	r2, r2, #516	; 0x204
    5f82:	20ff      	movs	r0, #255	; 0xff
    5f84:	7010      	strb	r0, [r2, #0]
    5f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f8a:	f001 b859 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5f8e:	bd70      	pop	{r4, r5, r6, pc}
    5f90:	20000100 	.word	0x20000100
    5f94:	b570      	push	{r4, r5, r6, lr}
    5f96:	4605      	mov	r5, r0
    5f98:	2901      	cmp	r1, #1
    5f9a:	d818      	bhi.n	5fce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f9c:	4c12      	ldr	r4, [pc, #72]	; (5fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5f9e:	69a1      	ldr	r1, [r4, #24]
    5fa0:	4788      	blx	r1
    5fa2:	b1a0      	cbz	r0, 5fce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5fa4:	7960      	ldrb	r0, [r4, #5]
    5fa6:	b990      	cbnz	r0, 5fce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5fa8:	b9e5      	cbnz	r5, 5fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5faa:	f104 0010 	add.w	r0, r4, #16
    5fae:	7801      	ldrb	r1, [r0, #0]
    5fb0:	06c8      	lsls	r0, r1, #27
    5fb2:	d405      	bmi.n	5fc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5fb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5fb6:	7800      	ldrb	r0, [r0, #0]
    5fb8:	06c0      	lsls	r0, r0, #27
    5fba:	d401      	bmi.n	5fc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5fbc:	2001      	movs	r0, #1
    5fbe:	e000      	b.n	5fc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5fc0:	2000      	movs	r0, #0
    5fc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5fc4:	b92a      	cbnz	r2, 5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5fc6:	8962      	ldrh	r2, [r4, #10]
    5fc8:	b11a      	cbz	r2, 5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5fca:	06c9      	lsls	r1, r1, #27
    5fcc:	d401      	bmi.n	5fd2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5fce:	2001      	movs	r0, #1
    5fd0:	bd70      	pop	{r4, r5, r6, pc}
    5fd2:	89a1      	ldrh	r1, [r4, #12]
    5fd4:	078a      	lsls	r2, r1, #30
    5fd6:	d503      	bpl.n	5fe0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5fd8:	6a22      	ldr	r2, [r4, #32]
    5fda:	78d2      	ldrb	r2, [r2, #3]
    5fdc:	2a02      	cmp	r2, #2
    5fde:	d001      	beq.n	5fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5fe0:	4308      	orrs	r0, r1
    5fe2:	d1f4      	bne.n	5fce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5fe4:	2000      	movs	r0, #0
    5fe6:	bd70      	pop	{r4, r5, r6, pc}
    5fe8:	200000c8 	.word	0x200000c8
    5fec:	b530      	push	{r4, r5, lr}
    5fee:	4b08      	ldr	r3, [pc, #32]	; (6010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5ff0:	88dd      	ldrh	r5, [r3, #6]
    5ff2:	891c      	ldrh	r4, [r3, #8]
    5ff4:	b12a      	cbz	r2, 6002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    5ff6:	b908      	cbnz	r0, 5ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5ff8:	b905      	cbnz	r5, 5ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5ffa:	b114      	cbz	r4, 6002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x126>
    5ffc:	8958      	ldrh	r0, [r3, #10]
    5ffe:	1c40      	adds	r0, r0, #1
    6000:	8158      	strh	r0, [r3, #10]
    6002:	b111      	cbz	r1, 600a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    6004:	1c6d      	adds	r5, r5, #1
    6006:	80dd      	strh	r5, [r3, #6]
    6008:	bd30      	pop	{r4, r5, pc}
    600a:	1c64      	adds	r4, r4, #1
    600c:	811c      	strh	r4, [r3, #8]
    600e:	bd30      	pop	{r4, r5, pc}
    6010:	20000ce2 	.word	0x20000ce2
    6014:	b510      	push	{r4, lr}
    6016:	4c08      	ldr	r4, [pc, #32]	; (6038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x15c>)
    6018:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    601a:	b138      	cbz	r0, 602c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    601c:	8962      	ldrh	r2, [r4, #10]
    601e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6020:	1cd2      	adds	r2, r2, #3
    6022:	f006 fe9e 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6026:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6028:	6260      	str	r0, [r4, #36]	; 0x24
    602a:	bd10      	pop	{r4, pc}
    602c:	f240 415a 	movw	r1, #1114	; 0x45a
    6030:	2027      	movs	r0, #39	; 0x27
    6032:	f7fe fecf 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6036:	0000      	.short	0x0000
    6038:	200000c8 	.word	0x200000c8
    603c:	b510      	push	{r4, lr}
    603e:	f7ff ff71 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6042:	4604      	mov	r4, r0
    6044:	f7ff ff74 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6048:	4601      	mov	r1, r0
    604a:	7b42      	ldrb	r2, [r0, #13]
    604c:	4815      	ldr	r0, [pc, #84]	; (60a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c8>)
    604e:	2a24      	cmp	r2, #36	; 0x24
    6050:	d00e      	beq.n	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    6052:	7b89      	ldrb	r1, [r1, #14]
    6054:	2924      	cmp	r1, #36	; 0x24
    6056:	d00b      	beq.n	6070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    6058:	2a1f      	cmp	r2, #31
    605a:	d00d      	beq.n	6078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    605c:	2a20      	cmp	r2, #32
    605e:	d00b      	beq.n	6078 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x19c>
    6060:	2922      	cmp	r1, #34	; 0x22
    6062:	d00f      	beq.n	6084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    6064:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    6068:	2804      	cmp	r0, #4
    606a:	d100      	bne.n	606e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    606c:	2008      	movs	r0, #8
    606e:	bd10      	pop	{r4, pc}
    6070:	6840      	ldr	r0, [r0, #4]
    6072:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    6076:	e00e      	b.n	6096 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ba>
    6078:	2922      	cmp	r1, #34	; 0x22
    607a:	d003      	beq.n	6084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    607c:	6840      	ldr	r0, [r0, #4]
    607e:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
    6082:	e005      	b.n	6090 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1b4>
    6084:	6841      	ldr	r1, [r0, #4]
    6086:	f891 01c0 	ldrb.w	r0, [r1, #448]	; 0x1c0
    608a:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    608e:	4008      	ands	r0, r1
    6090:	f008 f8a1 	bl	e1d6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    6094:	4601      	mov	r1, r0
    6096:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
    609a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    609e:	f008 b8b2 	b.w	e206 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    60a2:	0000      	.short	0x0000
    60a4:	20000100 	.word	0x20000100
    60a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60ac:	4689      	mov	r9, r1
    60ae:	4607      	mov	r7, r0
    60b0:	f7ff ff3e 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    60b4:	4c55      	ldr	r4, [pc, #340]	; (620c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x330>)
    60b6:	f04f 0800 	mov.w	r8, #0
    60ba:	4605      	mov	r5, r0
    60bc:	f88d 8000 	strb.w	r8, [sp]
    60c0:	7820      	ldrb	r0, [r4, #0]
    60c2:	4646      	mov	r6, r8
    60c4:	2802      	cmp	r0, #2
    60c6:	d004      	beq.n	60d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f6>
    60c8:	f240 41de 	movw	r1, #1246	; 0x4de
    60cc:	2027      	movs	r0, #39	; 0x27
    60ce:	f7fe fe81 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60d2:	7ba0      	ldrb	r0, [r4, #14]
    60d4:	0640      	lsls	r0, r0, #25
    60d6:	d406      	bmi.n	60e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x20a>
    60d8:	2040      	movs	r0, #64	; 0x40
    60da:	f7ff ff2f 	bl	5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    60de:	89e0      	ldrh	r0, [r4, #14]
    60e0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    60e4:	81e0      	strh	r0, [r4, #14]
    60e6:	7ce8      	ldrb	r0, [r5, #19]
    60e8:	b3d7      	cbz	r7, 6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    60ea:	b180      	cbz	r0, 610e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60ec:	f005 fb2a 	bl	b744 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    60f0:	f005 fb04 	bl	b6fc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    60f4:	b958      	cbnz	r0, 610e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    60f8:	7841      	ldrb	r1, [r0, #1]
    60fa:	b141      	cbz	r1, 610e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    60fc:	7800      	ldrb	r0, [r0, #0]
    60fe:	7a29      	ldrb	r1, [r5, #8]
    6100:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6104:	4288      	cmp	r0, r1
    6106:	d102      	bne.n	610e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x232>
    6108:	2001      	movs	r0, #1
    610a:	70a0      	strb	r0, [r4, #2]
    610c:	e060      	b.n	61d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    610e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6110:	7841      	ldrb	r1, [r0, #1]
    6112:	8161      	strh	r1, [r4, #10]
    6114:	b121      	cbz	r1, 6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x244>
    6116:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6118:	f007 fdab 	bl	dc72 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    611c:	62a0      	str	r0, [r4, #40]	; 0x28
    611e:	e000      	b.n	6122 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x246>
    6120:	62a6      	str	r6, [r4, #40]	; 0x28
    6122:	89e0      	ldrh	r0, [r4, #14]
    6124:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6128:	81e0      	strh	r0, [r4, #14]
    612a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    612c:	79e9      	ldrb	r1, [r5, #7]
    612e:	7800      	ldrb	r0, [r0, #0]
    6130:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6134:	4288      	cmp	r0, r1
    6136:	d006      	beq.n	6146 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6138:	f000 f95a 	bl	63f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x514>
    613c:	89e0      	ldrh	r0, [r4, #14]
    613e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6142:	81e0      	strh	r0, [r4, #14]
    6144:	e001      	b.n	614a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    6146:	f04f 0801 	mov.w	r8, #1
    614a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    614c:	7a29      	ldrb	r1, [r5, #8]
    614e:	7800      	ldrb	r0, [r0, #0]
    6150:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6154:	4288      	cmp	r0, r1
    6156:	d10e      	bne.n	6176 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    6158:	4668      	mov	r0, sp
    615a:	f000 f90b 	bl	6374 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    615e:	e00a      	b.n	6176 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29a>
    6160:	e7ff      	b.n	6162 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x286>
    6162:	b108      	cbz	r0, 6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    6164:	f005 fae8 	bl	b738 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    6168:	78e0      	ldrb	r0, [r4, #3]
    616a:	1c40      	adds	r0, r0, #1
    616c:	70e0      	strb	r0, [r4, #3]
    616e:	89e0      	ldrh	r0, [r4, #14]
    6170:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6174:	81e0      	strh	r0, [r4, #14]
    6176:	7ca8      	ldrb	r0, [r5, #18]
    6178:	b188      	cbz	r0, 619e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c2>
    617a:	f7ff fed3 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    617e:	4924      	ldr	r1, [pc, #144]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    6180:	760e      	strb	r6, [r1, #24]
    6182:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    6186:	e9c1 2304 	strd	r2, r3, [r1, #16]
    618a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    618e:	f008 f82c 	bl	e1ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6192:	4603      	mov	r3, r0
    6194:	22fb      	movs	r2, #251	; 0xfb
    6196:	491e      	ldr	r1, [pc, #120]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x334>)
    6198:	4630      	mov	r0, r6
    619a:	f005 fa05 	bl	b5a8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    619e:	f1b9 0f00 	cmp.w	r9, #0
    61a2:	d104      	bne.n	61ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    61a4:	78e1      	ldrb	r1, [r4, #3]
    61a6:	2001      	movs	r0, #1
    61a8:	f7ff fef4 	bl	5f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    61ac:	b1a0      	cbz	r0, 61d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2fc>
    61ae:	f005 fead 	bl	bf0c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    61b2:	f89d 0000 	ldrb.w	r0, [sp]
    61b6:	b110      	cbz	r0, 61be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e2>
    61b8:	2000      	movs	r0, #0
    61ba:	f7ff fe0d 	bl	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61be:	88a8      	ldrh	r0, [r5, #4]
    61c0:	4642      	mov	r2, r8
    61c2:	4639      	mov	r1, r7
    61c4:	f7ff ff12 	bl	5fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    61c8:	b117      	cbz	r7, 61d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>
    61ca:	70e6      	strb	r6, [r4, #3]
    61cc:	f7ff febc 	bl	5f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    61d0:	f000 f87c 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    61d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    61d8:	f89d 0000 	ldrb.w	r0, [sp]
    61dc:	b110      	cbz	r0, 61e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x308>
    61de:	2001      	movs	r0, #1
    61e0:	f7ff fdfa 	bl	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61e4:	2000      	movs	r0, #0
    61e6:	f000 f98d 	bl	6504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x628>
    61ea:	f89d 0000 	ldrb.w	r0, [sp]
    61ee:	b110      	cbz	r0, 61f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31a>
    61f0:	2002      	movs	r0, #2
    61f2:	f7ff fdf1 	bl	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61f6:	88a8      	ldrh	r0, [r5, #4]
    61f8:	4642      	mov	r2, r8
    61fa:	4639      	mov	r1, r7
    61fc:	f7ff fef6 	bl	5fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    6200:	2f00      	cmp	r7, #0
    6202:	d0e7      	beq.n	61d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    6204:	70e6      	strb	r6, [r4, #3]
    6206:	f7ff fe9f 	bl	5f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    620a:	e7e3      	b.n	61d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>
    620c:	200000c8 	.word	0x200000c8
    6210:	20000c98 	.word	0x20000c98
    6214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6218:	460f      	mov	r7, r1
    621a:	4680      	mov	r8, r0
    621c:	f7ff fe88 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6220:	4d28      	ldr	r5, [pc, #160]	; (62c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e8>)
    6222:	4604      	mov	r4, r0
    6224:	7828      	ldrb	r0, [r5, #0]
    6226:	2801      	cmp	r0, #1
    6228:	d004      	beq.n	6234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    622a:	f240 4169 	movw	r1, #1129	; 0x469
    622e:	2027      	movs	r0, #39	; 0x27
    6230:	f7fe fdd0 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6234:	7861      	ldrb	r1, [r4, #1]
    6236:	2000      	movs	r0, #0
    6238:	2601      	movs	r6, #1
    623a:	b129      	cbz	r1, 6248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>
    623c:	7060      	strb	r0, [r4, #1]
    623e:	2100      	movs	r1, #0
    6240:	2004      	movs	r0, #4
    6242:	f7ff fe67 	bl	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6246:	70e6      	strb	r6, [r4, #3]
    6248:	6a29      	ldr	r1, [r5, #32]
    624a:	7808      	ldrb	r0, [r1, #0]
    624c:	43c0      	mvns	r0, r0
    624e:	0780      	lsls	r0, r0, #30
    6250:	d109      	bne.n	6266 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38a>
    6252:	79a0      	ldrb	r0, [r4, #6]
    6254:	bb78      	cbnz	r0, 62b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    6256:	2002      	movs	r0, #2
    6258:	f7ff fe5c 	bl	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    625c:	6a28      	ldr	r0, [r5, #32]
    625e:	7800      	ldrb	r0, [r0, #0]
    6260:	43c0      	mvns	r0, r0
    6262:	0780      	lsls	r0, r0, #30
    6264:	d027      	beq.n	62b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3da>
    6266:	6a28      	ldr	r0, [r5, #32]
    6268:	7840      	ldrb	r0, [r0, #1]
    626a:	b110      	cbz	r0, 6272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x396>
    626c:	2002      	movs	r0, #2
    626e:	71a0      	strb	r0, [r4, #6]
    6270:	e000      	b.n	6274 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    6272:	71a6      	strb	r6, [r4, #6]
    6274:	7ce0      	ldrb	r0, [r4, #19]
    6276:	b190      	cbz	r0, 629e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6278:	f7ff fe54 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    627c:	4912      	ldr	r1, [pc, #72]	; (62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    627e:	7a6d      	ldrb	r5, [r5, #9]
    6280:	760e      	strb	r6, [r1, #24]
    6282:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    6286:	e9c1 2304 	strd	r2, r3, [r1, #16]
    628a:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    628e:	f007 ffac 	bl	e1ea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    6292:	4603      	mov	r3, r0
    6294:	462a      	mov	r2, r5
    6296:	490c      	ldr	r1, [pc, #48]	; (62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ec>)
    6298:	4630      	mov	r0, r6
    629a:	f005 f985 	bl	b5a8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    629e:	ea37 0708 	bics.w	r7, r7, r8
    62a2:	d004      	beq.n	62ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d2>
    62a4:	2100      	movs	r1, #0
    62a6:	4608      	mov	r0, r1
    62a8:	f7ff fe74 	bl	5f94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    62ac:	b128      	cbz	r0, 62ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3de>
    62ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62b2:	f000 b80b 	b.w	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    62b6:	2003      	movs	r0, #3
    62b8:	e7d9      	b.n	626e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x392>
    62ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62be:	2000      	movs	r0, #0
    62c0:	f000 b8e4 	b.w	648c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    62c4:	200000c8 	.word	0x200000c8
    62c8:	20000c98 	.word	0x20000c98
    62cc:	b510      	push	{r4, lr}
    62ce:	f005 fad7 	bl	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    62d2:	f005 f9fd 	bl	b6d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    62d6:	4c0c      	ldr	r4, [pc, #48]	; (6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>)
    62d8:	89e0      	ldrh	r0, [r4, #14]
    62da:	f7ff fe2f 	bl	5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    62de:	69e2      	ldr	r2, [r4, #28]
    62e0:	7961      	ldrb	r1, [r4, #5]
    62e2:	78a0      	ldrb	r0, [r4, #2]
    62e4:	4790      	blx	r2
    62e6:	4809      	ldr	r0, [pc, #36]	; (630c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    62e8:	7f40      	ldrb	r0, [r0, #29]
    62ea:	b150      	cbz	r0, 6302 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x426>
    62ec:	4907      	ldr	r1, [pc, #28]	; (630c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    62ee:	220e      	movs	r2, #14
    62f0:	f101 000e 	add.w	r0, r1, #14
    62f4:	f006 fd35 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62f8:	4804      	ldr	r0, [pc, #16]	; (630c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>)
    62fa:	21ff      	movs	r1, #255	; 0xff
    62fc:	7701      	strb	r1, [r0, #28]
    62fe:	f000 fe9f 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6302:	2000      	movs	r0, #0
    6304:	7020      	strb	r0, [r4, #0]
    6306:	bd10      	pop	{r4, pc}
    6308:	200000c8 	.word	0x200000c8
    630c:	20000ce2 	.word	0x20000ce2
    6310:	4808      	ldr	r0, [pc, #32]	; (6334 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x458>)
    6312:	b510      	push	{r4, lr}
    6314:	7800      	ldrb	r0, [r0, #0]
    6316:	2802      	cmp	r0, #2
    6318:	d004      	beq.n	6324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    631a:	f44f 7108 	mov.w	r1, #544	; 0x220
    631e:	2027      	movs	r0, #39	; 0x27
    6320:	f7fe fd58 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6324:	4904      	ldr	r1, [pc, #16]	; (6338 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>)
    6326:	2001      	movs	r0, #1
    6328:	7308      	strb	r0, [r1, #12]
    632a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    632e:	f7ff bfcd 	b.w	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6332:	0000      	.short	0x0000
    6334:	200000c8 	.word	0x200000c8
    6338:	20000ce2 	.word	0x20000ce2
    633c:	4b0c      	ldr	r3, [pc, #48]	; (6370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>)
    633e:	b430      	push	{r4, r5}
    6340:	79db      	ldrb	r3, [r3, #7]
    6342:	b93a      	cbnz	r2, 6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    6344:	2bff      	cmp	r3, #255	; 0xff
    6346:	d105      	bne.n	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    6348:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    634c:	f890 406e 	ldrb.w	r4, [r0, #110]	; 0x6e
    6350:	42a2      	cmp	r2, r4
    6352:	d00a      	beq.n	636a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    6354:	b129      	cbz	r1, 6362 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x486>
    6356:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
    635a:	bc30      	pop	{r4, r5}
    635c:	4618      	mov	r0, r3
    635e:	f005 bdfd 	b.w	bf5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    6362:	23ff      	movs	r3, #255	; 0xff
    6364:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
    6368:	e7f7      	b.n	635a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47e>
    636a:	bc30      	pop	{r4, r5}
    636c:	4770      	bx	lr
    636e:	0000      	.short	0x0000
    6370:	200000c8 	.word	0x200000c8
    6374:	b570      	push	{r4, r5, r6, lr}
    6376:	4606      	mov	r6, r0
    6378:	f7ff fdda 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    637c:	4a1b      	ldr	r2, [pc, #108]	; (63ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>)
    637e:	4604      	mov	r4, r0
    6380:	2501      	movs	r5, #1
    6382:	6a51      	ldr	r1, [r2, #36]	; 0x24
    6384:	7808      	ldrb	r0, [r1, #0]
    6386:	f000 0003 	and.w	r0, r0, #3
    638a:	2801      	cmp	r0, #1
    638c:	d00c      	beq.n	63a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    638e:	2802      	cmp	r0, #2
    6390:	d00a      	beq.n	63a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4cc>
    6392:	2803      	cmp	r0, #3
    6394:	d121      	bne.n	63da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    6396:	7065      	strb	r5, [r4, #1]
    6398:	89d0      	ldrh	r0, [r2, #14]
    639a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    639e:	81d0      	strh	r0, [r2, #14]
    63a0:	2001      	movs	r0, #1
    63a2:	f7ff fdb7 	bl	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    63a6:	e018      	b.n	63da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    63a8:	7848      	ldrb	r0, [r1, #1]
    63aa:	b1b0      	cbz	r0, 63da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fe>
    63ac:	89d1      	ldrh	r1, [r2, #14]
    63ae:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    63b2:	81d1      	strh	r1, [r2, #14]
    63b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    63b6:	2900      	cmp	r1, #0
    63b8:	d009      	beq.n	63ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f2>
    63ba:	28fb      	cmp	r0, #251	; 0xfb
    63bc:	d808      	bhi.n	63d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f4>
    63be:	7990      	ldrb	r0, [r2, #6]
    63c0:	b120      	cbz	r0, 63cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    63c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63c6:	2020      	movs	r0, #32
    63c8:	f7ff bdb8 	b.w	5f3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    63cc:	7035      	strb	r5, [r6, #0]
    63ce:	bd70      	pop	{r4, r5, r6, pc}
    63d0:	7950      	ldrb	r0, [r2, #5]
    63d2:	f040 0010 	orr.w	r0, r0, #16
    63d6:	7150      	strb	r0, [r2, #5]
    63d8:	bd70      	pop	{r4, r5, r6, pc}
    63da:	7a20      	ldrb	r0, [r4, #8]
    63dc:	2801      	cmp	r0, #1
    63de:	d001      	beq.n	63e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x508>
    63e0:	7225      	strb	r5, [r4, #8]
    63e2:	bd70      	pop	{r4, r5, r6, pc}
    63e4:	2000      	movs	r0, #0
    63e6:	7220      	strb	r0, [r4, #8]
    63e8:	bd70      	pop	{r4, r5, r6, pc}
    63ea:	0000      	.short	0x0000
    63ec:	200000c8 	.word	0x200000c8
    63f0:	b538      	push	{r3, r4, r5, lr}
    63f2:	f7ff fd9d 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63f6:	4604      	mov	r4, r0
    63f8:	7980      	ldrb	r0, [r0, #6]
    63fa:	2800      	cmp	r0, #0
    63fc:	d02f      	beq.n	645e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x582>
    63fe:	2802      	cmp	r0, #2
    6400:	d10e      	bne.n	6420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x544>
    6402:	481c      	ldr	r0, [pc, #112]	; (6474 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>)
    6404:	4669      	mov	r1, sp
    6406:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6408:	f007 fa2a 	bl	d860 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    640c:	b340      	cbz	r0, 6460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x584>
    640e:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6412:	1c40      	adds	r0, r0, #1
    6414:	f141 0100 	adc.w	r1, r1, #0
    6418:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    641c:	f000 fe10 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6420:	2500      	movs	r5, #0
    6422:	71a5      	strb	r5, [r4, #6]
    6424:	78e0      	ldrb	r0, [r4, #3]
    6426:	b120      	cbz	r0, 6432 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x556>
    6428:	70e5      	strb	r5, [r4, #3]
    642a:	2100      	movs	r1, #0
    642c:	2010      	movs	r0, #16
    642e:	f7ff fd71 	bl	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6432:	78a0      	ldrb	r0, [r4, #2]
    6434:	b170      	cbz	r0, 6454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x578>
    6436:	70a5      	strb	r5, [r4, #2]
    6438:	f7ff fafc 	bl	5a34 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    643c:	b198      	cbz	r0, 6466 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    643e:	2100      	movs	r1, #0
    6440:	2008      	movs	r0, #8
    6442:	f7ff fd67 	bl	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6446:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    644a:	1c40      	adds	r0, r0, #1
    644c:	f141 0100 	adc.w	r1, r1, #0
    6450:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6454:	79e0      	ldrb	r0, [r4, #7]
    6456:	2801      	cmp	r0, #1
    6458:	d00a      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    645a:	2001      	movs	r0, #1
    645c:	71e0      	strb	r0, [r4, #7]
    645e:	bd38      	pop	{r3, r4, r5, pc}
    6460:	f240 31af 	movw	r1, #943	; 0x3af
    6464:	e001      	b.n	646a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58e>
    6466:	f240 31c7 	movw	r1, #967	; 0x3c7
    646a:	2027      	movs	r0, #39	; 0x27
    646c:	f7fe fcb2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6470:	71e5      	strb	r5, [r4, #7]
    6472:	bd38      	pop	{r3, r4, r5, pc}
    6474:	200000c8 	.word	0x200000c8
    6478:	4803      	ldr	r0, [pc, #12]	; (6488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ac>)
    647a:	7800      	ldrb	r0, [r0, #0]
    647c:	2800      	cmp	r0, #0
    647e:	d001      	beq.n	6484 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a8>
    6480:	f7ff bf24 	b.w	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6484:	4770      	bx	lr
    6486:	0000      	.short	0x0000
    6488:	200000c8 	.word	0x200000c8
    648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6490:	4606      	mov	r6, r0
    6492:	f7ff fd47 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6496:	4680      	mov	r8, r0
    6498:	f7ff fd4a 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    649c:	4c16      	ldr	r4, [pc, #88]	; (64f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x61c>)
    649e:	4605      	mov	r5, r0
    64a0:	4632      	mov	r2, r6
    64a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    64a4:	6260      	str	r0, [r4, #36]	; 0x24
    64a6:	2101      	movs	r1, #1
    64a8:	4640      	mov	r0, r8
    64aa:	f7ff ff47 	bl	633c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    64ae:	7ce8      	ldrb	r0, [r5, #19]
    64b0:	2700      	movs	r7, #0
    64b2:	b170      	cbz	r0, 64d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f6>
    64b4:	4811      	ldr	r0, [pc, #68]	; (64fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    64b6:	f005 fc7f 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64ba:	4811      	ldr	r0, [pc, #68]	; (6500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x624>)
    64bc:	2101      	movs	r1, #1
    64be:	7601      	strb	r1, [r0, #24]
    64c0:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    64c4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    64c8:	490c      	ldr	r1, [pc, #48]	; (64fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x620>)
    64ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64cc:	f005 f8be 	bl	b64c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    64d0:	e004      	b.n	64dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x600>
    64d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64d4:	f005 fc70 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64d8:	f005 f8fa 	bl	b6d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64dc:	b916      	cbnz	r6, 64e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>
    64de:	4638      	mov	r0, r7
    64e0:	f005 fb0e 	bl	bb00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    64e4:	2100      	movs	r1, #0
    64e6:	f898 206e 	ldrb.w	r2, [r8, #110]	; 0x6e
    64ea:	4608      	mov	r0, r1
    64ec:	f005 fcf0 	bl	bed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64f0:	2002      	movs	r0, #2
    64f2:	7020      	strb	r0, [r4, #0]
    64f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64f8:	200000c8 	.word	0x200000c8
    64fc:	20000b90 	.word	0x20000b90
    6500:	20000c98 	.word	0x20000c98
    6504:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6508:	4604      	mov	r4, r0
    650a:	f7ff fd11 	bl	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    650e:	4605      	mov	r5, r0
    6510:	f7ff fd08 	bl	5f24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6514:	2700      	movs	r7, #0
    6516:	4606      	mov	r6, r0
    6518:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a4>
    651c:	f88d 7000 	strb.w	r7, [sp]
    6520:	4622      	mov	r2, r4
    6522:	4639      	mov	r1, r7
    6524:	f7ff ff0a 	bl	633c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6528:	79a8      	ldrb	r0, [r5, #6]
    652a:	f04f 0801 	mov.w	r8, #1
    652e:	f1a9 0420 	sub.w	r4, r9, #32
    6532:	b140      	cbz	r0, 6546 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    6534:	2801      	cmp	r0, #1
    6536:	d020      	beq.n	657a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6538:	2802      	cmp	r0, #2
    653a:	d02f      	beq.n	659c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    653c:	2803      	cmp	r0, #3
    653e:	d03b      	beq.n	65b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    6540:	f240 21cb 	movw	r1, #715	; 0x2cb
    6544:	e057      	b.n	65f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    6546:	7a20      	ldrb	r0, [r4, #8]
    6548:	2154      	movs	r1, #84	; 0x54
    654a:	f8ad 0004 	strh.w	r0, [sp, #4]
    654e:	5388      	strh	r0, [r1, r6]
    6550:	4648      	mov	r0, r9
    6552:	f7ff fa99 	bl	5a88 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6556:	b130      	cbz	r0, 6566 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    6558:	2080      	movs	r0, #128	; 0x80
    655a:	6a21      	ldr	r1, [r4, #32]
    655c:	f7ff fcda 	bl	5f14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6560:	f885 8002 	strb.w	r8, [r5, #2]
    6564:	e02c      	b.n	65c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6566:	466a      	mov	r2, sp
    6568:	a901      	add	r1, sp, #4
    656a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    656c:	f007 fe55 	bl	e21a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6570:	6220      	str	r0, [r4, #32]
    6572:	b110      	cbz	r0, 657a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    6574:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    6578:	b111      	cbz	r1, 6580 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a4>
    657a:	4842      	ldr	r0, [pc, #264]	; (6684 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    657c:	6220      	str	r0, [r4, #32]
    657e:	e01f      	b.n	65c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6580:	f89d 1000 	ldrb.w	r1, [sp]
    6584:	b921      	cbnz	r1, 6590 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    6586:	8007      	strh	r7, [r0, #0]
    6588:	7087      	strb	r7, [r0, #2]
    658a:	2101      	movs	r1, #1
    658c:	f008 f994 	bl	e8b8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6590:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6594:	6a20      	ldr	r0, [r4, #32]
    6596:	f008 f953 	bl	e840 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    659a:	e011      	b.n	65c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    659c:	f8b6 0054 	ldrh.w	r0, [r6, #84]	; 0x54
    65a0:	f8ad 0004 	strh.w	r0, [sp, #4]
    65a4:	466a      	mov	r2, sp
    65a6:	a901      	add	r1, sp, #4
    65a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    65aa:	f007 fe36 	bl	e21a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    65ae:	6220      	str	r0, [r4, #32]
    65b0:	b930      	cbnz	r0, 65c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    65b2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
    65b6:	e01e      	b.n	65f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71a>
    65b8:	4648      	mov	r0, r9
    65ba:	f7ff fa65 	bl	5a88 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    65be:	b1c0      	cbz	r0, 65f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x716>
    65c0:	6a20      	ldr	r0, [r4, #32]
    65c2:	2308      	movs	r3, #8
    65c4:	7801      	ldrb	r1, [r0, #0]
    65c6:	f021 0108 	bic.w	r1, r1, #8
    65ca:	7001      	strb	r1, [r0, #0]
    65cc:	79ea      	ldrb	r2, [r5, #7]
    65ce:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    65d2:	4311      	orrs	r1, r2
    65d4:	f021 0104 	bic.w	r1, r1, #4
    65d8:	7001      	strb	r1, [r0, #0]
    65da:	7a2a      	ldrb	r2, [r5, #8]
    65dc:	2304      	movs	r3, #4
    65de:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    65e2:	4311      	orrs	r1, r2
    65e4:	f021 0110 	bic.w	r1, r1, #16
    65e8:	7001      	strb	r1, [r0, #0]
    65ea:	43c9      	mvns	r1, r1
    65ec:	0789      	lsls	r1, r1, #30
    65ee:	d005      	beq.n	65fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x720>
    65f0:	e007      	b.n	6602 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    65f2:	f240 21c5 	movw	r1, #709	; 0x2c5
    65f6:	2027      	movs	r0, #39	; 0x27
    65f8:	f7fe fbec 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65fc:	78c0      	ldrb	r0, [r0, #3]
    65fe:	2802      	cmp	r0, #2
    6600:	d00f      	beq.n	6622 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    6602:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6604:	f007 fa58 	bl	dab8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6608:	b108      	cbz	r0, 660e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    660a:	2101      	movs	r1, #1
    660c:	e00a      	b.n	6624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    660e:	6a20      	ldr	r0, [r4, #32]
    6610:	7800      	ldrb	r0, [r0, #0]
    6612:	43c0      	mvns	r0, r0
    6614:	0780      	lsls	r0, r0, #30
    6616:	d004      	beq.n	6622 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x746>
    6618:	f7ff f9f4 	bl	5a04 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    661c:	f080 0101 	eor.w	r1, r0, #1
    6620:	e000      	b.n	6624 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x748>
    6622:	2100      	movs	r1, #0
    6624:	6a20      	ldr	r0, [r4, #32]
    6626:	7802      	ldrb	r2, [r0, #0]
    6628:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    662c:	7001      	strb	r1, [r0, #0]
    662e:	7ca9      	ldrb	r1, [r5, #18]
    6630:	b181      	cbz	r1, 6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    6632:	7841      	ldrb	r1, [r0, #1]
    6634:	b171      	cbz	r1, 6654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x778>
    6636:	4814      	ldr	r0, [pc, #80]	; (6688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    6638:	f005 fbbe 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    663c:	4811      	ldr	r0, [pc, #68]	; (6684 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7a8>)
    663e:	3828      	subs	r0, #40	; 0x28
    6640:	7607      	strb	r7, [r0, #24]
    6642:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6646:	e9c0 1204 	strd	r1, r2, [r0, #16]
    664a:	480f      	ldr	r0, [pc, #60]	; (6688 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7ac>)
    664c:	6a21      	ldr	r1, [r4, #32]
    664e:	f004 fffd 	bl	b64c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    6652:	e003      	b.n	665c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x780>
    6654:	f005 fbb0 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6658:	f005 f83a 	bl	b6d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    665c:	f896 206f 	ldrb.w	r2, [r6, #111]	; 0x6f
    6660:	2101      	movs	r1, #1
    6662:	2000      	movs	r0, #0
    6664:	f005 fc34 	bl	bed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6668:	f884 8004 	strb.w	r8, [r4, #4]
    666c:	6a21      	ldr	r1, [r4, #32]
    666e:	880a      	ldrh	r2, [r1, #0]
    6670:	8222      	strh	r2, [r4, #16]
    6672:	7889      	ldrb	r1, [r1, #2]
    6674:	74a1      	strb	r1, [r4, #18]
    6676:	f884 8000 	strb.w	r8, [r4]
    667a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    667e:	0000      	.short	0x0000
    6680:	200000e8 	.word	0x200000e8
    6684:	20000cc0 	.word	0x20000cc0
    6688:	20000b90 	.word	0x20000b90
    668c:	00006311 	.word	0x00006311
    6690:	000060a9 	.word	0x000060a9
    6694:	00006215 	.word	0x00006215
    6698:	00006479 	.word	0x00006479

0000669c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    669c:	4800      	ldr	r0, [pc, #0]	; (66a0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    669e:	4770      	bx	lr
    66a0:	2000158d 	.word	0x2000158d

000066a4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    66a4:	4904      	ldr	r1, [pc, #16]	; (66b8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    66a6:	788a      	ldrb	r2, [r1, #2]
    66a8:	4282      	cmp	r2, r0
    66aa:	d903      	bls.n	66b4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    66ac:	4408      	add	r0, r1
    66ae:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    66b2:	4770      	bx	lr
    66b4:	2000      	movs	r0, #0
    66b6:	4770      	bx	lr
    66b8:	200013ba 	.word	0x200013ba

000066bc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    66bc:	4904      	ldr	r1, [pc, #16]	; (66d0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    66be:	788a      	ldrb	r2, [r1, #2]
    66c0:	4282      	cmp	r2, r0
    66c2:	d903      	bls.n	66cc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    66c4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    66c8:	3083      	adds	r0, #131	; 0x83
    66ca:	4770      	bx	lr
    66cc:	2000      	movs	r0, #0
    66ce:	4770      	bx	lr
    66d0:	200013ba 	.word	0x200013ba

000066d4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    66d4:	4a05      	ldr	r2, [pc, #20]	; (66ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    66d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    66da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    66de:	6802      	ldr	r2, [r0, #0]
    66e0:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    66e4:	8880      	ldrh	r0, [r0, #4]
    66e6:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    66ea:	4770      	bx	lr
    66ec:	200013ba 	.word	0x200013ba

000066f0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66f4:	460e      	mov	r6, r1
    66f6:	4607      	mov	r7, r0
    66f8:	4615      	mov	r5, r2
    66fa:	2106      	movs	r1, #6
    66fc:	4630      	mov	r0, r6
    66fe:	f007 ff7b 	bl	e5f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6702:	4c0d      	ldr	r4, [pc, #52]	; (6738 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6704:	b160      	cbz	r0, 6720 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    6706:	2000      	movs	r0, #0
    6708:	e004      	b.n	6714 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    670a:	1821      	adds	r1, r4, r0
    670c:	1c40      	adds	r0, r0, #1
    670e:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6712:	b2c0      	uxtb	r0, r0
    6714:	78a1      	ldrb	r1, [r4, #2]
    6716:	4281      	cmp	r1, r0
    6718:	d8f7      	bhi.n	670a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    671a:	2001      	movs	r0, #1
    671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6720:	4631      	mov	r1, r6
    6722:	4638      	mov	r0, r7
    6724:	f007 fd88 	bl	e238 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6728:	2808      	cmp	r0, #8
    672a:	d003      	beq.n	6734 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    672c:	4420      	add	r0, r4
    672e:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6732:	e7f2      	b.n	671a <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6734:	2000      	movs	r0, #0
    6736:	e7f1      	b.n	671c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6738:	200013ba 	.word	0x200013ba

0000673c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    673c:	4904      	ldr	r1, [pc, #16]	; (6750 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    673e:	788a      	ldrb	r2, [r1, #2]
    6740:	4282      	cmp	r2, r0
    6742:	d903      	bls.n	674c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6744:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6748:	1cc0      	adds	r0, r0, #3
    674a:	4770      	bx	lr
    674c:	2000      	movs	r0, #0
    674e:	4770      	bx	lr
    6750:	200013ba 	.word	0x200013ba

00006754 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6754:	b510      	push	{r4, lr}
    6756:	f240 12d3 	movw	r2, #467	; 0x1d3
    675a:	2100      	movs	r1, #0
    675c:	4808      	ldr	r0, [pc, #32]	; (6780 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    675e:	f006 fb7a 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6762:	2208      	movs	r2, #8
    6764:	21ff      	movs	r1, #255	; 0xff
    6766:	4807      	ldr	r0, [pc, #28]	; (6784 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6768:	f006 fb75 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    676c:	4805      	ldr	r0, [pc, #20]	; (6784 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    676e:	2100      	movs	r1, #0
    6770:	1f00      	subs	r0, r0, #4
    6772:	7001      	strb	r1, [r0, #0]
    6774:	7041      	strb	r1, [r0, #1]
    6776:	f44f 7161 	mov.w	r1, #900	; 0x384
    677a:	8041      	strh	r1, [r0, #2]
    677c:	bd10      	pop	{r4, pc}
    677e:	0000      	.short	0x0000
    6780:	200013ba 	.word	0x200013ba
    6784:	2000029c 	.word	0x2000029c

00006788 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6788:	4901      	ldr	r1, [pc, #4]	; (6790 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    678a:	7008      	strb	r0, [r1, #0]
    678c:	4770      	bx	lr
    678e:	0000      	.short	0x0000
    6790:	20000298 	.word	0x20000298

00006794 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6794:	4801      	ldr	r0, [pc, #4]	; (679c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6796:	7800      	ldrb	r0, [r0, #0]
    6798:	4770      	bx	lr
    679a:	0000      	.short	0x0000
    679c:	20000298 	.word	0x20000298

000067a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    67a0:	4b0b      	ldr	r3, [pc, #44]	; (67d0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    67a2:	b510      	push	{r4, lr}
    67a4:	789c      	ldrb	r4, [r3, #2]
    67a6:	4284      	cmp	r4, r0
    67a8:	d90f      	bls.n	67ca <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    67aa:	4418      	add	r0, r3
    67ac:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    67b0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    67b4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    67b8:	700b      	strb	r3, [r1, #0]
    67ba:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    67be:	6011      	str	r1, [r2, #0]
    67c0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    67c4:	8090      	strh	r0, [r2, #4]
    67c6:	2001      	movs	r0, #1
    67c8:	bd10      	pop	{r4, pc}
    67ca:	2000      	movs	r0, #0
    67cc:	bd10      	pop	{r4, pc}
    67ce:	0000      	.short	0x0000
    67d0:	200013ba 	.word	0x200013ba

000067d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    67d4:	4907      	ldr	r1, [pc, #28]	; (67f4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    67d6:	788a      	ldrb	r2, [r1, #2]
    67d8:	4282      	cmp	r2, r0
    67da:	d909      	bls.n	67f0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    67dc:	4408      	add	r0, r1
    67de:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    67e2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    67e6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    67ea:	f000 0001 	and.w	r0, r0, #1
    67ee:	4770      	bx	lr
    67f0:	2000      	movs	r0, #0
    67f2:	4770      	bx	lr
    67f4:	200013ba 	.word	0x200013ba

000067f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    67f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67fc:	4698      	mov	r8, r3
    67fe:	4691      	mov	r9, r2
    6800:	460c      	mov	r4, r1
    6802:	4605      	mov	r5, r0
    6804:	f000 f936 	bl	6a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6808:	4606      	mov	r6, r0
    680a:	2810      	cmp	r0, #16
    680c:	d006      	beq.n	681c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    680e:	f000 f901 	bl	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6812:	2810      	cmp	r0, #16
    6814:	d002      	beq.n	681c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6816:	2012      	movs	r0, #18
    6818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    681c:	4f18      	ldr	r7, [pc, #96]	; (6880 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    681e:	78b8      	ldrb	r0, [r7, #2]
    6820:	2808      	cmp	r0, #8
    6822:	d22a      	bcs.n	687a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6824:	2e10      	cmp	r6, #16
    6826:	d105      	bne.n	6834 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6828:	2200      	movs	r2, #0
    682a:	4621      	mov	r1, r4
    682c:	4628      	mov	r0, r5
    682e:	f000 f905 	bl	6a3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6832:	4606      	mov	r6, r0
    6834:	78bc      	ldrb	r4, [r7, #2]
    6836:	2210      	movs	r2, #16
    6838:	1c60      	adds	r0, r4, #1
    683a:	70b8      	strb	r0, [r7, #2]
    683c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6840:	1ce8      	adds	r0, r5, #3
    6842:	4649      	mov	r1, r9
    6844:	f007 fe41 	bl	e4ca <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6848:	f105 0083 	add.w	r0, r5, #131	; 0x83
    684c:	2210      	movs	r2, #16
    684e:	4641      	mov	r1, r8
    6850:	f007 fe3b 	bl	e4ca <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6854:	2110      	movs	r1, #16
    6856:	4640      	mov	r0, r8
    6858:	f007 fece 	bl	e5f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    685c:	443c      	add	r4, r7
    685e:	2110      	movs	r1, #16
    6860:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6864:	4648      	mov	r0, r9
    6866:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    686a:	f007 fec5 	bl	e5f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    686e:	77e0      	strb	r0, [r4, #31]
    6870:	f804 6c29 	strb.w	r6, [r4, #-41]
    6874:	2000      	movs	r0, #0
    6876:	73e0      	strb	r0, [r4, #15]
    6878:	e7ce      	b.n	6818 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    687a:	2007      	movs	r0, #7
    687c:	e7cc      	b.n	6818 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    687e:	0000      	.short	0x0000
    6880:	200013ba 	.word	0x200013ba

00006884 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6884:	4806      	ldr	r0, [pc, #24]	; (68a0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6886:	b510      	push	{r4, lr}
    6888:	7880      	ldrb	r0, [r0, #2]
    688a:	1e40      	subs	r0, r0, #1
    688c:	b244      	sxtb	r4, r0
    688e:	e004      	b.n	689a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    6890:	b2e0      	uxtb	r0, r4
    6892:	f000 f935 	bl	6b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    6896:	1e64      	subs	r4, r4, #1
    6898:	b264      	sxtb	r4, r4
    689a:	2c00      	cmp	r4, #0
    689c:	daf8      	bge.n	6890 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    689e:	bd10      	pop	{r4, pc}
    68a0:	200013ba 	.word	0x200013ba

000068a4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    68a4:	4801      	ldr	r0, [pc, #4]	; (68ac <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    68a6:	8840      	ldrh	r0, [r0, #2]
    68a8:	4770      	bx	lr
    68aa:	0000      	.short	0x0000
    68ac:	20000298 	.word	0x20000298

000068b0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    68b0:	b138      	cbz	r0, 68c2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    68b2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    68b6:	4288      	cmp	r0, r1
    68b8:	d803      	bhi.n	68c2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    68ba:	4903      	ldr	r1, [pc, #12]	; (68c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    68bc:	8048      	strh	r0, [r1, #2]
    68be:	2001      	movs	r0, #1
    68c0:	4770      	bx	lr
    68c2:	2000      	movs	r0, #0
    68c4:	4770      	bx	lr
    68c6:	0000      	.short	0x0000
    68c8:	20000298 	.word	0x20000298

000068cc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    68cc:	4905      	ldr	r1, [pc, #20]	; (68e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    68ce:	788a      	ldrb	r2, [r1, #2]
    68d0:	4282      	cmp	r2, r0
    68d2:	d903      	bls.n	68dc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    68d4:	4408      	add	r0, r1
    68d6:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    68da:	b108      	cbz	r0, 68e0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    68dc:	2000      	movs	r0, #0
    68de:	4770      	bx	lr
    68e0:	2001      	movs	r0, #1
    68e2:	4770      	bx	lr
    68e4:	200013ba 	.word	0x200013ba

000068e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    68e8:	b570      	push	{r4, r5, r6, lr}
    68ea:	460d      	mov	r5, r1
    68ec:	4606      	mov	r6, r0
    68ee:	f000 f8c1 	bl	6a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    68f2:	4c10      	ldr	r4, [pc, #64]	; (6934 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    68f4:	2810      	cmp	r0, #16
    68f6:	d007      	beq.n	6908 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    68f8:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    68fc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6900:	07c9      	lsls	r1, r1, #31
    6902:	d001      	beq.n	6908 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6904:	2001      	movs	r0, #1
    6906:	bd70      	pop	{r4, r5, r6, pc}
    6908:	7861      	ldrb	r1, [r4, #1]
    690a:	2908      	cmp	r1, #8
    690c:	d210      	bcs.n	6930 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    690e:	2810      	cmp	r0, #16
    6910:	d008      	beq.n	6924 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6912:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6916:	2101      	movs	r1, #1
    6918:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    691c:	7860      	ldrb	r0, [r4, #1]
    691e:	1c40      	adds	r0, r0, #1
    6920:	7060      	strb	r0, [r4, #1]
    6922:	e7ef      	b.n	6904 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6924:	2201      	movs	r2, #1
    6926:	4629      	mov	r1, r5
    6928:	4630      	mov	r0, r6
    692a:	f000 f887 	bl	6a3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    692e:	e7f5      	b.n	691c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6930:	2000      	movs	r0, #0
    6932:	bd70      	pop	{r4, r5, r6, pc}
    6934:	200013ba 	.word	0x200013ba

00006938 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6938:	b570      	push	{r4, r5, r6, lr}
    693a:	4d0b      	ldr	r5, [pc, #44]	; (6968 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    693c:	7828      	ldrb	r0, [r5, #0]
    693e:	1e40      	subs	r0, r0, #1
    6940:	b244      	sxtb	r4, r0
    6942:	e00a      	b.n	695a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6944:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6948:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    694c:	07c0      	lsls	r0, r0, #31
    694e:	d002      	beq.n	6956 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6950:	b2e0      	uxtb	r0, r4
    6952:	f000 f91d 	bl	6b90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    6956:	1e64      	subs	r4, r4, #1
    6958:	b264      	sxtb	r4, r4
    695a:	2c00      	cmp	r4, #0
    695c:	daf2      	bge.n	6944 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    695e:	4903      	ldr	r1, [pc, #12]	; (696c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6960:	2000      	movs	r0, #0
    6962:	7048      	strb	r0, [r1, #1]
    6964:	bd70      	pop	{r4, r5, r6, pc}
    6966:	0000      	.short	0x0000
    6968:	200013ba 	.word	0x200013ba
    696c:	20000298 	.word	0x20000298

00006970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6974:	2400      	movs	r4, #0
    6976:	4625      	mov	r5, r4
    6978:	4e18      	ldr	r6, [pc, #96]	; (69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    697a:	e029      	b.n	69d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    697c:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6980:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6984:	07c0      	lsls	r0, r0, #31
    6986:	d021      	beq.n	69cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6988:	4628      	mov	r0, r5
    698a:	f000 f843 	bl	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    698e:	4603      	mov	r3, r0
    6990:	f7ff fed4 	bl	673c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6994:	4601      	mov	r1, r0
    6996:	2000      	movs	r0, #0
    6998:	2b10      	cmp	r3, #16
    699a:	d009      	beq.n	69b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    699c:	18f2      	adds	r2, r6, r3
    699e:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    69a2:	f1bc 0f01 	cmp.w	ip, #1
    69a6:	d002      	beq.n	69ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    69a8:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    69ac:	b102      	cbz	r2, 69b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    69ae:	2001      	movs	r0, #1
    69b0:	1e40      	subs	r0, r0, #1
    69b2:	4201      	tst	r1, r0
    69b4:	d10a      	bne.n	69cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    69b6:	480a      	ldr	r0, [pc, #40]	; (69e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    69b8:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    69bc:	5503      	strb	r3, [r0, r4]
    69be:	4620      	mov	r0, r4
    69c0:	1c64      	adds	r4, r4, #1
    69c2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    69c6:	b2e4      	uxtb	r4, r4
    69c8:	f005 fbae 	bl	c128 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    69cc:	1c6d      	adds	r5, r5, #1
    69ce:	b2ed      	uxtb	r5, r5
    69d0:	7830      	ldrb	r0, [r6, #0]
    69d2:	42a8      	cmp	r0, r5
    69d4:	d8d2      	bhi.n	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    69d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69da:	0000      	.short	0x0000
    69dc:	200013ba 	.word	0x200013ba
    69e0:	2000029c 	.word	0x2000029c
    69e4:	4602      	mov	r2, r0
    69e6:	4809      	ldr	r0, [pc, #36]	; (6a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    69e8:	b510      	push	{r4, lr}
    69ea:	7800      	ldrb	r0, [r0, #0]
    69ec:	460b      	mov	r3, r1
    69ee:	b158      	cbz	r0, 6a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    69f0:	4807      	ldr	r0, [pc, #28]	; (6a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    69f2:	7881      	ldrb	r1, [r0, #2]
    69f4:	b141      	cbz	r1, 6a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    69f6:	b10b      	cbz	r3, 69fc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    69f8:	1cc0      	adds	r0, r0, #3
    69fa:	e001      	b.n	6a00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    69fc:	4804      	ldr	r0, [pc, #16]	; (6a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    69fe:	3083      	adds	r0, #131	; 0x83
    6a00:	f004 fd2c 	bl	b45c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6a04:	2001      	movs	r0, #1
    6a06:	bd10      	pop	{r4, pc}
    6a08:	2000      	movs	r0, #0
    6a0a:	bd10      	pop	{r4, pc}
    6a0c:	20000298 	.word	0x20000298
    6a10:	200013ba 	.word	0x200013ba
    6a14:	4908      	ldr	r1, [pc, #32]	; (6a38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6a16:	b510      	push	{r4, lr}
    6a18:	4603      	mov	r3, r0
    6a1a:	2000      	movs	r0, #0
    6a1c:	788a      	ldrb	r2, [r1, #2]
    6a1e:	e006      	b.n	6a2e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6a20:	180c      	adds	r4, r1, r0
    6a22:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6a26:	429c      	cmp	r4, r3
    6a28:	d004      	beq.n	6a34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6a2a:	1c40      	adds	r0, r0, #1
    6a2c:	b2c0      	uxtb	r0, r0
    6a2e:	4282      	cmp	r2, r0
    6a30:	d8f6      	bhi.n	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6a32:	2010      	movs	r0, #16
    6a34:	bd10      	pop	{r4, pc}
    6a36:	0000      	.short	0x0000
    6a38:	200013ba 	.word	0x200013ba
    6a3c:	b570      	push	{r4, r5, r6, lr}
    6a3e:	4b0c      	ldr	r3, [pc, #48]	; (6a70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6a40:	4604      	mov	r4, r0
    6a42:	7818      	ldrb	r0, [r3, #0]
    6a44:	1c45      	adds	r5, r0, #1
    6a46:	701d      	strb	r5, [r3, #0]
    6a48:	2810      	cmp	r0, #16
    6a4a:	d303      	bcc.n	6a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6a4c:	2146      	movs	r1, #70	; 0x46
    6a4e:	2028      	movs	r0, #40	; 0x28
    6a50:	f7fe f9c0 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a54:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6a58:	680d      	ldr	r5, [r1, #0]
    6a5a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6a5e:	8889      	ldrh	r1, [r1, #4]
    6a60:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6a64:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6a68:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6a6c:	bd70      	pop	{r4, r5, r6, pc}
    6a6e:	0000      	.short	0x0000
    6a70:	200013ba 	.word	0x200013ba
    6a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a78:	460e      	mov	r6, r1
    6a7a:	4607      	mov	r7, r0
    6a7c:	2400      	movs	r4, #0
    6a7e:	4d0c      	ldr	r5, [pc, #48]	; (6ab0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x140>)
    6a80:	e00e      	b.n	6aa0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x130>
    6a82:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
    6a86:	4630      	mov	r0, r6
    6a88:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    6a8c:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6a90:	4297      	cmp	r7, r2
    6a92:	d103      	bne.n	6a9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12c>
    6a94:	2206      	movs	r2, #6
    6a96:	f006 f952 	bl	cd3e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6a9a:	b138      	cbz	r0, 6aac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13c>
    6a9c:	1c64      	adds	r4, r4, #1
    6a9e:	b2e4      	uxtb	r4, r4
    6aa0:	7828      	ldrb	r0, [r5, #0]
    6aa2:	42a0      	cmp	r0, r4
    6aa4:	d8ed      	bhi.n	6a82 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x112>
    6aa6:	2010      	movs	r0, #16
    6aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6aac:	4620      	mov	r0, r4
    6aae:	e7fb      	b.n	6aa8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x138>
    6ab0:	200013ba 	.word	0x200013ba
    6ab4:	b570      	push	{r4, r5, r6, lr}
    6ab6:	4605      	mov	r5, r0
    6ab8:	f7ff ffac 	bl	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6abc:	2810      	cmp	r0, #16
    6abe:	d11c      	bne.n	6afa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6ac0:	4c0e      	ldr	r4, [pc, #56]	; (6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18c>)
    6ac2:	7820      	ldrb	r0, [r4, #0]
    6ac4:	1e40      	subs	r0, r0, #1
    6ac6:	b2c0      	uxtb	r0, r0
    6ac8:	7020      	strb	r0, [r4, #0]
    6aca:	42a8      	cmp	r0, r5
    6acc:	d015      	beq.n	6afa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6ace:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6ad2:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6ad6:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6ada:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6ade:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6ae2:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6ae6:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6aea:	7820      	ldrb	r0, [r4, #0]
    6aec:	f7ff ff92 	bl	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6af0:	2810      	cmp	r0, #16
    6af2:	d002      	beq.n	6afa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18a>
    6af4:	4420      	add	r0, r4
    6af6:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6afa:	bd70      	pop	{r4, r5, r6, pc}
    6afc:	200013ba 	.word	0x200013ba
    6b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b04:	4c21      	ldr	r4, [pc, #132]	; (6b8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21c>)
    6b06:	4606      	mov	r6, r0
    6b08:	19a7      	adds	r7, r4, r6
    6b0a:	78a0      	ldrb	r0, [r4, #2]
    6b0c:	1e40      	subs	r0, r0, #1
    6b0e:	b2c5      	uxtb	r5, r0
    6b10:	70a5      	strb	r5, [r4, #2]
    6b12:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6b16:	42ae      	cmp	r6, r5
    6b18:	d02a      	beq.n	6b70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x200>
    6b1a:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6b1e:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6b22:	f10a 0103 	add.w	r1, sl, #3
    6b26:	f109 0003 	add.w	r0, r9, #3
    6b2a:	2210      	movs	r2, #16
    6b2c:	f006 f919 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b30:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6b34:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6b38:	2210      	movs	r2, #16
    6b3a:	f006 f912 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6b3e:	1960      	adds	r0, r4, r5
    6b40:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6b44:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6b48:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6b4c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6b50:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6b54:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6b58:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6b5c:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6b60:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6b64:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6b68:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6b6c:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6b70:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6b74:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6b78:	07c0      	lsls	r0, r0, #31
    6b7a:	d104      	bne.n	6b86 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x216>
    6b7c:	4640      	mov	r0, r8
    6b7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b82:	f7ff bf97 	b.w	6ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b8a:	0000      	.short	0x0000
    6b8c:	200013ba 	.word	0x200013ba
    6b90:	4905      	ldr	r1, [pc, #20]	; (6ba8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x238>)
    6b92:	784a      	ldrb	r2, [r1, #1]
    6b94:	1e52      	subs	r2, r2, #1
    6b96:	704a      	strb	r2, [r1, #1]
    6b98:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6b9c:	2200      	movs	r2, #0
    6b9e:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6ba2:	f7ff bf87 	b.w	6ab4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>
    6ba6:	0000      	.short	0x0000
    6ba8:	200013ba 	.word	0x200013ba

00006bac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bb0:	4604      	mov	r4, r0
    6bb2:	f04f 0801 	mov.w	r8, #1
    6bb6:	2500      	movs	r5, #0
    6bb8:	b181      	cbz	r1, 6bdc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x30>
    6bba:	f104 078e 	add.w	r7, r4, #142	; 0x8e
    6bbe:	1e7e      	subs	r6, r7, #1
    6bc0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6bc4:	2901      	cmp	r1, #1
    6bc6:	d020      	beq.n	6c0a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    6bc8:	2902      	cmp	r1, #2
    6bca:	d042      	beq.n	6c52 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6bcc:	2903      	cmp	r1, #3
    6bce:	d11a      	bne.n	6c06 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6bd0:	4639      	mov	r1, r7
    6bd2:	4630      	mov	r0, r6
    6bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6bd8:	f007 bd3e 	b.w	e658 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6bdc:	f44f 720a 	mov.w	r2, #552	; 0x228
    6be0:	2100      	movs	r1, #0
    6be2:	f006 f938 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6be6:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
    6bea:	3484      	adds	r4, #132	; 0x84
    6bec:	f004 fc06 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6bf0:	f644 112b 	movw	r1, #18731	; 0x492b
    6bf4:	4008      	ands	r0, r1
    6bf6:	6420      	str	r0, [r4, #64]	; 0x40
    6bf8:	6465      	str	r5, [r4, #68]	; 0x44
    6bfa:	20fe      	movs	r0, #254	; 0xfe
    6bfc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6c00:	207f      	movs	r0, #127	; 0x7f
    6c02:	f804 0c03 	strb.w	r0, [r4, #-3]
    6c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c0a:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
    6c0e:	f884 5113 	strb.w	r5, [r4, #275]	; 0x113
    6c12:	4a14      	ldr	r2, [pc, #80]	; (6c64 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb8>)
    6c14:	6921      	ldr	r1, [r4, #16]
    6c16:	440a      	add	r2, r1
    6c18:	fbb2 f2f1 	udiv	r2, r2, r1
    6c1c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
    6c20:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6c24:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
    6c28:	8b63      	ldrh	r3, [r4, #26]
    6c2a:	460a      	mov	r2, r1
    6c2c:	f000 f81c 	bl	6c68 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    6c30:	4639      	mov	r1, r7
    6c32:	4630      	mov	r0, r6
    6c34:	f007 fd10 	bl	e658 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6c38:	f006 f85d 	bl	ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6c3c:	b118      	cbz	r0, 6c46 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x9a>
    6c3e:	6960      	ldr	r0, [r4, #20]
    6c40:	f000 fb5e 	bl	7300 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6c44:	b110      	cbz	r0, 6c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6c46:	f884 5184 	strb.w	r5, [r4, #388]	; 0x184
    6c4a:	e7dc      	b.n	6c06 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6c4c:	f884 8184 	strb.w	r8, [r4, #388]	; 0x184
    6c50:	e7d9      	b.n	6c06 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6c52:	f8b4 31b2 	ldrh.w	r3, [r4, #434]	; 0x1b2
    6c56:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
    6c5a:	6921      	ldr	r1, [r4, #16]
    6c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6c60:	f000 b802 	b.w	6c68 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    6c64:	01c9c37f 	.word	0x01c9c37f
    6c68:	b530      	push	{r4, r5, lr}
    6c6a:	2400      	movs	r4, #0
    6c6c:	8684      	strh	r4, [r0, #52]	; 0x34
    6c6e:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6c70:	4d13      	ldr	r5, [pc, #76]	; (6cc0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x114>)
    6c72:	434c      	muls	r4, r1
    6c74:	fbb4 f4f2 	udiv	r4, r4, r2
    6c78:	8704      	strh	r4, [r0, #56]	; 0x38
    6c7a:	f242 7410 	movw	r4, #10000	; 0x2710
    6c7e:	4363      	muls	r3, r4
    6c80:	fbb3 f3f2 	udiv	r3, r3, r2
    6c84:	1c5b      	adds	r3, r3, #1
    6c86:	b29b      	uxth	r3, r3
    6c88:	fb03 f402 	mul.w	r4, r3, r2
    6c8c:	86c3      	strh	r3, [r0, #54]	; 0x36
    6c8e:	42ac      	cmp	r4, r5
    6c90:	d901      	bls.n	6c96 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xea>
    6c92:	1e5b      	subs	r3, r3, #1
    6c94:	86c3      	strh	r3, [r0, #54]	; 0x36
    6c96:	4b0b      	ldr	r3, [pc, #44]	; (6cc4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x118>)
    6c98:	f240 2471 	movw	r4, #625	; 0x271
    6c9c:	fbb3 f3f2 	udiv	r3, r3, r2
    6ca0:	1c5b      	adds	r3, r3, #1
    6ca2:	8783      	strh	r3, [r0, #60]	; 0x3c
    6ca4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6ca6:	4363      	muls	r3, r4
    6ca8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6cac:	1e5b      	subs	r3, r3, #1
    6cae:	fbb3 f3f2 	udiv	r3, r3, r2
    6cb2:	62c3      	str	r3, [r0, #44]	; 0x2c
    6cb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6cb6:	434b      	muls	r3, r1
    6cb8:	fbb3 f1f2 	udiv	r1, r3, r2
    6cbc:	6281      	str	r1, [r0, #40]	; 0x28
    6cbe:	bd30      	pop	{r4, r5, pc}
    6cc0:	01e84800 	.word	0x01e84800
    6cc4:	02625a00 	.word	0x02625a00

00006cc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6cc8:	b570      	push	{r4, r5, r6, lr}
    6cca:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6cce:	b28b      	uxth	r3, r1
    6cd0:	7ac5      	ldrb	r5, [r0, #11]
    6cd2:	ea83 0102 	eor.w	r1, r3, r2
    6cd6:	2200      	movs	r2, #0
    6cd8:	b2cc      	uxtb	r4, r1
    6cda:	0a09      	lsrs	r1, r1, #8
    6cdc:	fa94 f4a4 	rbit	r4, r4
    6ce0:	fa91 f1a1 	rbit	r1, r1
    6ce4:	0e24      	lsrs	r4, r4, #24
    6ce6:	0e09      	lsrs	r1, r1, #24
    6ce8:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6cec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6cf0:	1c52      	adds	r2, r2, #1
    6cf2:	4419      	add	r1, r3
    6cf4:	b2d2      	uxtb	r2, r2
    6cf6:	b289      	uxth	r1, r1
    6cf8:	2a03      	cmp	r2, #3
    6cfa:	d3ed      	bcc.n	6cd8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6cfc:	4059      	eors	r1, r3
    6cfe:	2225      	movs	r2, #37	; 0x25
    6d00:	fbb1 f3f2 	udiv	r3, r1, r2
    6d04:	fb02 1213 	mls	r2, r2, r3, r1
    6d08:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6d0c:	f002 0607 	and.w	r6, r2, #7
    6d10:	785b      	ldrb	r3, [r3, #1]
    6d12:	2401      	movs	r4, #1
    6d14:	fa04 f606 	lsl.w	r6, r4, r6
    6d18:	4233      	tst	r3, r6
    6d1a:	d001      	beq.n	6d20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6d1c:	4610      	mov	r0, r2
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	434d      	muls	r5, r1
    6d22:	0c29      	lsrs	r1, r5, #16
    6d24:	1c49      	adds	r1, r1, #1
    6d26:	b2c9      	uxtb	r1, r1
    6d28:	2200      	movs	r2, #0
    6d2a:	1885      	adds	r5, r0, r2
    6d2c:	79ab      	ldrb	r3, [r5, #6]
    6d2e:	428b      	cmp	r3, r1
    6d30:	d312      	bcc.n	6d58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6d32:	f895 5001 	ldrb.w	r5, [r5, #1]
    6d36:	2300      	movs	r3, #0
    6d38:	fa04 f603 	lsl.w	r6, r4, r3
    6d3c:	4235      	tst	r5, r6
    6d3e:	d001      	beq.n	6d44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6d40:	1e49      	subs	r1, r1, #1
    6d42:	b2c9      	uxtb	r1, r1
    6d44:	b121      	cbz	r1, 6d50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6d46:	1c5b      	adds	r3, r3, #1
    6d48:	b2db      	uxtb	r3, r3
    6d4a:	2b08      	cmp	r3, #8
    6d4c:	d3f4      	bcc.n	6d38 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6d4e:	e005      	b.n	6d5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6d50:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6d54:	b2c0      	uxtb	r0, r0
    6d56:	bd70      	pop	{r4, r5, r6, pc}
    6d58:	1ac9      	subs	r1, r1, r3
    6d5a:	b2c9      	uxtb	r1, r1
    6d5c:	1c52      	adds	r2, r2, #1
    6d5e:	b2d2      	uxtb	r2, r2
    6d60:	2a05      	cmp	r2, #5
    6d62:	d3e2      	bcc.n	6d2a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6d64:	f240 110d 	movw	r1, #269	; 0x10d
    6d68:	2046      	movs	r0, #70	; 0x46
    6d6a:	f7fe f833 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d6e:	0000      	movs	r0, r0
    6d70:	b570      	push	{r4, r5, r6, lr}
    6d72:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6d76:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6d7a:	2401      	movs	r4, #1
    6d7c:	fb03 2101 	mla	r1, r3, r1, r2
    6d80:	2225      	movs	r2, #37	; 0x25
    6d82:	fbb1 f3f2 	udiv	r3, r1, r2
    6d86:	fb02 1113 	mls	r1, r2, r3, r1
    6d8a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6d8e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6d92:	f001 0307 	and.w	r3, r1, #7
    6d96:	7d92      	ldrb	r2, [r2, #22]
    6d98:	fa04 f303 	lsl.w	r3, r4, r3
    6d9c:	421a      	tst	r2, r3
    6d9e:	d003      	beq.n	6da8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6da0:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6da4:	2000      	movs	r0, #0
    6da6:	bd70      	pop	{r4, r5, r6, pc}
    6da8:	f890 2020 	ldrb.w	r2, [r0, #32]
    6dac:	fbb1 f3f2 	udiv	r3, r1, r2
    6db0:	fb02 1113 	mls	r1, r2, r3, r1
    6db4:	1c49      	adds	r1, r1, #1
    6db6:	b2c9      	uxtb	r1, r1
    6db8:	2300      	movs	r3, #0
    6dba:	18c5      	adds	r5, r0, r3
    6dbc:	7eea      	ldrb	r2, [r5, #27]
    6dbe:	428a      	cmp	r2, r1
    6dc0:	d311      	bcc.n	6de6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6dc2:	f895 5016 	ldrb.w	r5, [r5, #22]
    6dc6:	2200      	movs	r2, #0
    6dc8:	fa04 f602 	lsl.w	r6, r4, r2
    6dcc:	4235      	tst	r5, r6
    6dce:	d001      	beq.n	6dd4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6dd0:	1e49      	subs	r1, r1, #1
    6dd2:	b2c9      	uxtb	r1, r1
    6dd4:	b121      	cbz	r1, 6de0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6dd6:	1c52      	adds	r2, r2, #1
    6dd8:	b2d2      	uxtb	r2, r2
    6dda:	2a08      	cmp	r2, #8
    6ddc:	d3f4      	bcc.n	6dc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6dde:	e004      	b.n	6dea <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6de0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6de4:	e7dc      	b.n	6da0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6de6:	1a89      	subs	r1, r1, r2
    6de8:	b2c9      	uxtb	r1, r1
    6dea:	1c5b      	adds	r3, r3, #1
    6dec:	b2db      	uxtb	r3, r3
    6dee:	2b05      	cmp	r3, #5
    6df0:	d3e3      	bcc.n	6dba <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6df2:	201f      	movs	r0, #31
    6df4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006df8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6df8:	7841      	ldrb	r1, [r0, #1]
    6dfa:	b141      	cbz	r1, 6e0e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6dfc:	78c0      	ldrb	r0, [r0, #3]
    6dfe:	281a      	cmp	r0, #26
    6e00:	d203      	bcs.n	6e0a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6e02:	4a04      	ldr	r2, [pc, #16]	; (6e14 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6e04:	5c10      	ldrb	r0, [r2, r0]
    6e06:	4288      	cmp	r0, r1
    6e08:	d101      	bne.n	6e0e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6e0a:	2001      	movs	r0, #1
    6e0c:	4770      	bx	lr
    6e0e:	2000      	movs	r0, #0
    6e10:	4770      	bx	lr
    6e12:	0000      	.short	0x0000
    6e14:	00010c0a 	.word	0x00010c0a

00006e18 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6e18:	b50c      	push	{r2, r3, lr}
    6e1a:	a20b      	add	r2, pc, #44	; (adr r2, 6e48 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    6e1c:	e9d2 1200 	ldrd	r1, r2, [r2]
    6e20:	e9cd 1200 	strd	r1, r2, [sp]
    6e24:	7901      	ldrb	r1, [r0, #4]
    6e26:	7940      	ldrb	r0, [r0, #5]
    6e28:	f001 0207 	and.w	r2, r1, #7
    6e2c:	4669      	mov	r1, sp
    6e2e:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6e32:	2a01      	cmp	r2, #1
    6e34:	d804      	bhi.n	6e40 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    6e36:	f000 0007 	and.w	r0, r0, #7
    6e3a:	5c08      	ldrb	r0, [r1, r0]
    6e3c:	2801      	cmp	r0, #1
    6e3e:	d901      	bls.n	6e44 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6e40:	2000      	movs	r0, #0
    6e42:	bd0c      	pop	{r2, r3, pc}
    6e44:	2001      	movs	r0, #1
    6e46:	bd0c      	pop	{r2, r3, pc}
    6e48:	02010100 	.word	0x02010100
    6e4c:	03020201 	.word	0x03020201

00006e50 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6e50:	b510      	push	{r4, lr}
    6e52:	2201      	movs	r2, #1
    6e54:	70c1      	strb	r1, [r0, #3]
    6e56:	291a      	cmp	r1, #26
    6e58:	d202      	bcs.n	6e60 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6e5a:	4a06      	ldr	r2, [pc, #24]	; (6e74 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6e5c:	5c52      	ldrb	r2, [r2, r1]
    6e5e:	e006      	b.n	6e6e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6e60:	29ff      	cmp	r1, #255	; 0xff
    6e62:	d004      	beq.n	6e6e <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6e64:	f240 31e2 	movw	r1, #994	; 0x3e2
    6e68:	202a      	movs	r0, #42	; 0x2a
    6e6a:	f7fd ffb3 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e6e:	7042      	strb	r2, [r0, #1]
    6e70:	bd10      	pop	{r4, pc}
    6e72:	0000      	.short	0x0000
    6e74:	00010c0a 	.word	0x00010c0a

00006e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e7c:	4c12      	ldr	r4, [pc, #72]	; (6ec8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6e7e:	4607      	mov	r7, r0
    6e80:	460e      	mov	r6, r1
    6e82:	7da0      	ldrb	r0, [r4, #22]
    6e84:	b110      	cbz	r0, 6e8c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6e86:	8b20      	ldrh	r0, [r4, #24]
    6e88:	2800      	cmp	r0, #0
    6e8a:	d012      	beq.n	6eb2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6e8c:	480e      	ldr	r0, [pc, #56]	; (6ec8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6e8e:	3014      	adds	r0, #20
    6e90:	4680      	mov	r8, r0
    6e92:	f007 fd90 	bl	e9b6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6e96:	b9a8      	cbnz	r0, 6ec4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6e98:	8aa5      	ldrh	r5, [r4, #20]
    6e9a:	8aa0      	ldrh	r0, [r4, #20]
    6e9c:	4632      	mov	r2, r6
    6e9e:	4639      	mov	r1, r7
    6ea0:	f007 fdcd 	bl	ea3e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6ea4:	b138      	cbz	r0, 6eb6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6ea6:	7da0      	ldrb	r0, [r4, #22]
    6ea8:	b110      	cbz	r0, 6eb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6eaa:	8b20      	ldrh	r0, [r4, #24]
    6eac:	1e40      	subs	r0, r0, #1
    6eae:	8320      	strh	r0, [r4, #24]
    6eb0:	2001      	movs	r0, #1
    6eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eb6:	4640      	mov	r0, r8
    6eb8:	f007 fd7d 	bl	e9b6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6ebc:	b910      	cbnz	r0, 6ec4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6ebe:	8aa0      	ldrh	r0, [r4, #20]
    6ec0:	42a8      	cmp	r0, r5
    6ec2:	d1ea      	bne.n	6e9a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6ec4:	2000      	movs	r0, #0
    6ec6:	e7f4      	b.n	6eb2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6ec8:	20001114 	.word	0x20001114
    6ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6ed0:	468a      	mov	sl, r1
    6ed2:	4699      	mov	r9, r3
    6ed4:	4615      	mov	r5, r2
    6ed6:	4604      	mov	r4, r0
    6ed8:	a901      	add	r1, sp, #4
    6eda:	f007 f9f0 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6ede:	bbe0      	cbnz	r0, 6f5a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6ee0:	9f02      	ldr	r7, [sp, #8]
    6ee2:	f04f 0800 	mov.w	r8, #0
    6ee6:	3778      	adds	r7, #120	; 0x78
    6ee8:	b18d      	cbz	r5, 6f0e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6eea:	4620      	mov	r0, r4
    6eec:	f7fe fba2 	bl	5634 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6ef0:	0004      	movs	r4, r0
    6ef2:	d00f      	beq.n	6f14 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6ef4:	4629      	mov	r1, r5
    6ef6:	f006 fdb1 	bl	da5c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6efa:	0006      	movs	r6, r0
    6efc:	d003      	beq.n	6f06 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6efe:	481d      	ldr	r0, [pc, #116]	; (6f74 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6f00:	8840      	ldrh	r0, [r0, #2]
    6f02:	42a8      	cmp	r0, r5
    6f04:	d208      	bcs.n	6f18 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6f06:	2000      	movs	r0, #0
    6f08:	b004      	add	sp, #16
    6f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6f0e:	2001      	movs	r0, #1
    6f10:	7538      	strb	r0, [r7, #20]
    6f12:	e029      	b.n	6f68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6f14:	216e      	movs	r1, #110	; 0x6e
    6f16:	e02a      	b.n	6f6e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6f18:	4620      	mov	r0, r4
    6f1a:	4631      	mov	r1, r6
    6f1c:	aa03      	add	r2, sp, #12
    6f1e:	f006 fd96 	bl	da4e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6f22:	9803      	ldr	r0, [sp, #12]
    6f24:	f8a0 8000 	strh.w	r8, [r0]
    6f28:	f880 8002 	strb.w	r8, [r0, #2]
    6f2c:	7d39      	ldrb	r1, [r7, #20]
    6f2e:	b109      	cbz	r1, 6f34 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6f30:	f04f 0a02 	mov.w	sl, #2
    6f34:	4651      	mov	r1, sl
    6f36:	f007 fcbf 	bl	e8b8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6f3a:	4631      	mov	r1, r6
    6f3c:	2603      	movs	r6, #3
    6f3e:	4620      	mov	r0, r4
    6f40:	464a      	mov	r2, r9
    6f42:	462b      	mov	r3, r5
    6f44:	9600      	str	r6, [sp, #0]
    6f46:	f006 fc64 	bl	d812 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6f4a:	4620      	mov	r0, r4
    6f4c:	4629      	mov	r1, r5
    6f4e:	f006 fd22 	bl	d996 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6f52:	b158      	cbz	r0, 6f6c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6f54:	4644      	mov	r4, r8
    6f56:	a801      	add	r0, sp, #4
    6f58:	e000      	b.n	6f5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6f5a:	e005      	b.n	6f68 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6f5c:	f007 fd4c 	bl	e9f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6f60:	9802      	ldr	r0, [sp, #8]
    6f62:	f8a0 410a 	strh.w	r4, [r0, #266]	; 0x10a
    6f66:	753c      	strb	r4, [r7, #20]
    6f68:	2001      	movs	r0, #1
    6f6a:	e7cd      	b.n	6f08 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6f6c:	2184      	movs	r1, #132	; 0x84
    6f6e:	202b      	movs	r0, #43	; 0x2b
    6f70:	f7fd ff30 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f74:	20001114 	.word	0x20001114

00006f78 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6f78:	4901      	ldr	r1, [pc, #4]	; (6f80 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6f7a:	2001      	movs	r0, #1
    6f7c:	7008      	strb	r0, [r1, #0]
    6f7e:	4770      	bx	lr
    6f80:	200002a5 	.word	0x200002a5

00006f84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f88:	0006      	movs	r6, r0
    6f8a:	d00a      	beq.n	6fa2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6f8c:	4825      	ldr	r0, [pc, #148]	; (7024 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6f8e:	7801      	ldrb	r1, [r0, #0]
    6f90:	b151      	cbz	r1, 6fa8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6f92:	2100      	movs	r1, #0
    6f94:	7071      	strb	r1, [r6, #1]
    6f96:	2203      	movs	r2, #3
    6f98:	7032      	strb	r2, [r6, #0]
    6f9a:	2201      	movs	r2, #1
    6f9c:	7132      	strb	r2, [r6, #4]
    6f9e:	7001      	strb	r1, [r0, #0]
    6fa0:	e03a      	b.n	7018 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6fa2:	f240 21c7 	movw	r1, #711	; 0x2c7
    6fa6:	e009      	b.n	6fbc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6fa8:	4c1e      	ldr	r4, [pc, #120]	; (7024 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6faa:	1ce4      	adds	r4, r4, #3
    6fac:	7820      	ldrb	r0, [r4, #0]
    6fae:	b940      	cbnz	r0, 6fc2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6fb0:	1ca0      	adds	r0, r4, #2
    6fb2:	f007 fd8d 	bl	ead0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6fb6:	b120      	cbz	r0, 6fc2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6fb8:	f240 21d6 	movw	r1, #726	; 0x2d6
    6fbc:	2010      	movs	r0, #16
    6fbe:	f7fd ff09 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fc2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6fc6:	2000      	movs	r0, #0
    6fc8:	f7fe f8ee 	bl	51a8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6fcc:	4f16      	ldr	r7, [pc, #88]	; (7028 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6fce:	4605      	mov	r5, r0
    6fd0:	6838      	ldr	r0, [r7, #0]
    6fd2:	b160      	cbz	r0, 6fee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6fd4:	8860      	ldrh	r0, [r4, #2]
    6fd6:	42a8      	cmp	r0, r5
    6fd8:	d309      	bcc.n	6fee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6fda:	1b40      	subs	r0, r0, r5
    6fdc:	b2c0      	uxtb	r0, r0
    6fde:	2101      	movs	r1, #1
    6fe0:	f006 fee4 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6fe4:	b158      	cbz	r0, 6ffe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6fe6:	4631      	mov	r1, r6
    6fe8:	f000 f84e 	bl	7088 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6fec:	e006      	b.n	6ffc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    6fee:	480f      	ldr	r0, [pc, #60]	; (702c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6ff0:	6800      	ldr	r0, [r0, #0]
    6ff2:	b120      	cbz	r0, 6ffe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6ff4:	8860      	ldrh	r0, [r4, #2]
    6ff6:	4631      	mov	r1, r6
    6ff8:	f000 f8de 	bl	71b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6ffc:	b960      	cbnz	r0, 7018 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6ffe:	1ca0      	adds	r0, r4, #2
    7000:	f007 fd66 	bl	ead0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    7004:	b910      	cbnz	r0, 700c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    7006:	8861      	ldrh	r1, [r4, #2]
    7008:	4541      	cmp	r1, r8
    700a:	d1e1      	bne.n	6fd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    700c:	4808      	ldr	r0, [pc, #32]	; (7030 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    700e:	6801      	ldr	r1, [r0, #0]
    7010:	b129      	cbz	r1, 701e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    7012:	4630      	mov	r0, r6
    7014:	4788      	blx	r1
    7016:	b110      	cbz	r0, 701e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    7018:	2001      	movs	r0, #1
    701a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    701e:	2000      	movs	r0, #0
    7020:	e7fb      	b.n	701a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    7022:	0000      	.short	0x0000
    7024:	200002a5 	.word	0x200002a5
    7028:	20000108 	.word	0x20000108
    702c:	2000010c 	.word	0x2000010c
    7030:	20000110 	.word	0x20000110

00007034 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    7034:	4901      	ldr	r1, [pc, #4]	; (703c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    7036:	7008      	strb	r0, [r1, #0]
    7038:	f000 b956 	b.w	72e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    703c:	200002a4 	.word	0x200002a4

00007040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7040:	4801      	ldr	r0, [pc, #4]	; (7048 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    7042:	7800      	ldrb	r0, [r0, #0]
    7044:	f7fd bce2 	b.w	4a0c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7048:	200002a4 	.word	0x200002a4

0000704c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    704c:	4902      	ldr	r1, [pc, #8]	; (7058 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    704e:	4801      	ldr	r0, [pc, #4]	; (7054 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    7050:	6008      	str	r0, [r1, #0]
    7052:	4770      	bx	lr
    7054:	00007455 	.word	0x00007455
    7058:	20000108 	.word	0x20000108

0000705c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    705c:	4905      	ldr	r1, [pc, #20]	; (7074 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    705e:	4804      	ldr	r0, [pc, #16]	; (7070 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    7060:	6008      	str	r0, [r1, #0]
    7062:	4906      	ldr	r1, [pc, #24]	; (707c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    7064:	4804      	ldr	r0, [pc, #16]	; (7078 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    7066:	6008      	str	r0, [r1, #0]
    7068:	4906      	ldr	r1, [pc, #24]	; (7084 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    706a:	4805      	ldr	r0, [pc, #20]	; (7080 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    706c:	6008      	str	r0, [r1, #0]
    706e:	4770      	bx	lr
    7070:	00007455 	.word	0x00007455
    7074:	20000108 	.word	0x20000108
    7078:	00008c31 	.word	0x00008c31
    707c:	2000010c 	.word	0x2000010c
    7080:	00005bbd 	.word	0x00005bbd
    7084:	20000110 	.word	0x20000110
    7088:	b570      	push	{r4, r5, r6, lr}
    708a:	0005      	movs	r5, r0
    708c:	460c      	mov	r4, r1
    708e:	d02e      	beq.n	70ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7090:	4818      	ldr	r0, [pc, #96]	; (70f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    7092:	6802      	ldr	r2, [r0, #0]
    7094:	b35a      	cbz	r2, 70ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    7096:	4628      	mov	r0, r5
    7098:	4790      	blx	r2
    709a:	b340      	cbz	r0, 70ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    709c:	7820      	ldrb	r0, [r4, #0]
    709e:	2811      	cmp	r0, #17
    70a0:	d002      	beq.n	70a8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    70a2:	2814      	cmp	r0, #20
    70a4:	d003      	beq.n	70ae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    70a6:	e020      	b.n	70ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    70a8:	7920      	ldrb	r0, [r4, #4]
    70aa:	b1f0      	cbz	r0, 70ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    70ac:	e00a      	b.n	70c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    70ae:	7920      	ldrb	r0, [r4, #4]
    70b0:	b120      	cbz	r0, 70bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    70b2:	4628      	mov	r0, r5
    70b4:	f007 ff23 	bl	eefe <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    70b8:	b120      	cbz	r0, 70c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    70ba:	e016      	b.n	70ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    70bc:	490e      	ldr	r1, [pc, #56]	; (70f8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    70be:	2000      	movs	r0, #0
    70c0:	7008      	strb	r0, [r1, #0]
    70c2:	e012      	b.n	70ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    70c4:	88e4      	ldrh	r4, [r4, #6]
    70c6:	2100      	movs	r1, #0
    70c8:	4620      	mov	r0, r4
    70ca:	f006 fe6f 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    70ce:	b160      	cbz	r0, 70ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    70d0:	8800      	ldrh	r0, [r0, #0]
    70d2:	f007 f826 	bl	e122 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    70d6:	2100      	movs	r1, #0
    70d8:	4620      	mov	r0, r4
    70da:	f7fe f903 	bl	52e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    70de:	b120      	cbz	r0, 70ea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    70e0:	f240 1171 	movw	r1, #369	; 0x171
    70e4:	2010      	movs	r0, #16
    70e6:	f7fd fe75 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70ea:	2001      	movs	r0, #1
    70ec:	bd70      	pop	{r4, r5, r6, pc}
    70ee:	2000      	movs	r0, #0
    70f0:	bd70      	pop	{r4, r5, r6, pc}
    70f2:	0000      	.short	0x0000
    70f4:	20000108 	.word	0x20000108
    70f8:	200002a8 	.word	0x200002a8
    70fc:	b510      	push	{r4, lr}
    70fe:	492d      	ldr	r1, [pc, #180]	; (71b4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    7100:	b086      	sub	sp, #24
    7102:	7c8a      	ldrb	r2, [r1, #18]
    7104:	7801      	ldrb	r1, [r0, #0]
    7106:	07d3      	lsls	r3, r2, #31
    7108:	d101      	bne.n	710e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    710a:	2919      	cmp	r1, #25
    710c:	d004      	beq.n	7118 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    710e:	2918      	cmp	r1, #24
    7110:	d01f      	beq.n	7152 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    7112:	2912      	cmp	r1, #18
    7114:	d046      	beq.n	71a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    7116:	e04a      	b.n	71ae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7118:	8880      	ldrh	r0, [r0, #4]
    711a:	f8ad 0000 	strh.w	r0, [sp]
    711e:	a902      	add	r1, sp, #8
    7120:	f007 f8cd 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7124:	b110      	cbz	r0, 712c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    7126:	f44f 71c4 	mov.w	r1, #392	; 0x188
    712a:	e035      	b.n	7198 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    712c:	9803      	ldr	r0, [sp, #12]
    712e:	f810 1f6a 	ldrb.w	r1, [r0, #106]!
    7132:	f88d 1002 	strb.w	r1, [sp, #2]
    7136:	7841      	ldrb	r1, [r0, #1]
    7138:	f88d 1003 	strb.w	r1, [sp, #3]
    713c:	8840      	ldrh	r0, [r0, #2]
    713e:	f8ad 0004 	strh.w	r0, [sp, #4]
    7142:	2102      	movs	r1, #2
    7144:	4668      	mov	r0, sp
    7146:	f009 f95d 	bl	10404 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    714a:	b340      	cbz	r0, 719e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    714c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    7150:	e022      	b.n	7198 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7152:	0791      	lsls	r1, r2, #30
    7154:	d42b      	bmi.n	71ae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    7156:	8884      	ldrh	r4, [r0, #4]
    7158:	a903      	add	r1, sp, #12
    715a:	4620      	mov	r0, r4
    715c:	f008 ff71 	bl	10042 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    7160:	b110      	cbz	r0, 7168 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    7162:	f240 11a5 	movw	r1, #421	; 0x1a5
    7166:	e017      	b.n	7198 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    7168:	f8ad 4000 	strh.w	r4, [sp]
    716c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7170:	f8ad 0002 	strh.w	r0, [sp, #2]
    7174:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7178:	f8ad 0004 	strh.w	r0, [sp, #4]
    717c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    7180:	f8ad 0006 	strh.w	r0, [sp, #6]
    7184:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    7188:	f8ad 0008 	strh.w	r0, [sp, #8]
    718c:	4668      	mov	r0, sp
    718e:	f008 ffd6 	bl	1013e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    7192:	b120      	cbz	r0, 719e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    7194:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    7198:	2010      	movs	r0, #16
    719a:	f7fd fe1b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    719e:	2001      	movs	r0, #1
    71a0:	b006      	add	sp, #24
    71a2:	bd10      	pop	{r4, pc}
    71a4:	0751      	lsls	r1, r2, #29
    71a6:	d402      	bmi.n	71ae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    71a8:	7b80      	ldrb	r0, [r0, #14]
    71aa:	07c0      	lsls	r0, r0, #31
    71ac:	d0f7      	beq.n	719e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    71ae:	2000      	movs	r0, #0
    71b0:	e7f6      	b.n	71a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    71b2:	0000      	.short	0x0000
    71b4:	20001114 	.word	0x20001114
    71b8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71bc:	460c      	mov	r4, r1
    71be:	4680      	mov	r8, r0
    71c0:	4669      	mov	r1, sp
    71c2:	f007 f87c 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71c6:	2800      	cmp	r0, #0
    71c8:	d17d      	bne.n	72c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    71ca:	4d46      	ldr	r5, [pc, #280]	; (72e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>)
    71cc:	4681      	mov	r9, r0
    71ce:	9801      	ldr	r0, [sp, #4]
    71d0:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    71d4:	2800      	cmp	r0, #0
    71d6:	d059      	beq.n	728c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    71d8:	682a      	ldr	r2, [r5, #0]
    71da:	b14a      	cbz	r2, 71f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    71dc:	4621      	mov	r1, r4
    71de:	4640      	mov	r0, r8
    71e0:	4790      	blx	r2
    71e2:	b128      	cbz	r0, 71f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x194>
    71e4:	4620      	mov	r0, r4
    71e6:	f7ff ff89 	bl	70fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    71ea:	2800      	cmp	r0, #0
    71ec:	d1ef      	bne.n	71ce <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x172>
    71ee:	e04c      	b.n	728a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    71f0:	9d01      	ldr	r5, [sp, #4]
    71f2:	f895 0144 	ldrb.w	r0, [r5, #324]	; 0x144
    71f6:	f04f 0b01 	mov.w	fp, #1
    71fa:	3578      	adds	r5, #120	; 0x78
    71fc:	b950      	cbnz	r0, 7214 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    71fe:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    7202:	f88d 0008 	strb.w	r0, [sp, #8]
    7206:	9802      	ldr	r0, [sp, #8]
    7208:	9002      	str	r0, [sp, #8]
    720a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    720e:	b108      	cbz	r0, 7214 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1b8>
    7210:	2001      	movs	r0, #1
    7212:	e000      	b.n	7216 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1ba>
    7214:	2000      	movs	r0, #0
    7216:	4682      	mov	sl, r0
    7218:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    721c:	b1b8      	cbz	r0, 724e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    721e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    7222:	0780      	lsls	r0, r0, #30
    7224:	d513      	bpl.n	724e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1f2>
    7226:	f884 9001 	strb.w	r9, [r4, #1]
    722a:	f884 b000 	strb.w	fp, [r4]
    722e:	f884 9004 	strb.w	r9, [r4, #4]
    7232:	f8a4 8005 	strh.w	r8, [r4, #5]
    7236:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    723a:	71e1      	strb	r1, [r4, #7]
    723c:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    7240:	8121      	strh	r1, [r4, #8]
    7242:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    7246:	8161      	strh	r1, [r4, #10]
    7248:	f885 9045 	strb.w	r9, [r5, #69]	; 0x45
    724c:	e01d      	b.n	728a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    724e:	4640      	mov	r0, r8
    7250:	f7fe f9f0 	bl	5634 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7254:	0007      	movs	r7, r0
    7256:	d00d      	beq.n	7274 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x218>
    7258:	f006 fbc1 	bl	d9de <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    725c:	0006      	movs	r6, r0
    725e:	d017      	beq.n	7290 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x234>
    7260:	f884 9001 	strb.w	r9, [r4, #1]
    7264:	200d      	movs	r0, #13
    7266:	7020      	strb	r0, [r4, #0]
    7268:	f8a4 8006 	strh.w	r8, [r4, #6]
    726c:	8126      	strh	r6, [r4, #8]
    726e:	f884 b004 	strb.w	fp, [r4, #4]
    7272:	e007      	b.n	7284 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x228>
    7274:	f240 212d 	movw	r1, #557	; 0x22d
    7278:	e02e      	b.n	72d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x27c>
    727a:	2100      	movs	r1, #0
    727c:	4638      	mov	r0, r7
    727e:	460a      	mov	r2, r1
    7280:	f006 fcc3 	bl	dc0a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    7284:	1e76      	subs	r6, r6, #1
    7286:	b2b6      	uxth	r6, r6
    7288:	d2f7      	bcs.n	727a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x21e>
    728a:	2001      	movs	r0, #1
    728c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7290:	4640      	mov	r0, r8
    7292:	f7fe f9b9 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7296:	b1e8      	cbz	r0, 72d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x278>
    7298:	f1ba 0f00 	cmp.w	sl, #0
    729c:	d01f      	beq.n	72de <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    729e:	f006 facf 	bl	d840 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    72a2:	b180      	cbz	r0, 72c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26a>
    72a4:	4640      	mov	r0, r8
    72a6:	f006 ff3c 	bl	e122 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    72aa:	2100      	movs	r1, #0
    72ac:	4640      	mov	r0, r8
    72ae:	f7fe f819 	bl	52e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    72b2:	f884 9001 	strb.w	r9, [r4, #1]
    72b6:	210a      	movs	r1, #10
    72b8:	7021      	strb	r1, [r4, #0]
    72ba:	f884 9004 	strb.w	r9, [r4, #4]
    72be:	4648      	mov	r0, r9
    72c0:	f8a4 8005 	strh.w	r8, [r4, #5]
    72c4:	e000      	b.n	72c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    72c6:	e00a      	b.n	72de <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x282>
    72c8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    72cc:	71e1      	strb	r1, [r4, #7]
    72ce:	3524      	adds	r5, #36	; 0x24
    72d0:	7028      	strb	r0, [r5, #0]
    72d2:	e7da      	b.n	728a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22e>
    72d4:	f44f 7111 	mov.w	r1, #580	; 0x244
    72d8:	2010      	movs	r0, #16
    72da:	f7fd fd7b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72de:	2000      	movs	r0, #0
    72e0:	e7d4      	b.n	728c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x230>
    72e2:	0000      	.short	0x0000
    72e4:	2000010c 	.word	0x2000010c
    72e8:	4804      	ldr	r0, [pc, #16]	; (72fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2a0>)
    72ea:	2100      	movs	r1, #0
    72ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    72f0:	7001      	strb	r1, [r0, #0]
    72f2:	8042      	strh	r2, [r0, #2]
    72f4:	1f00      	subs	r0, r0, #4
    72f6:	f8a0 1001 	strh.w	r1, [r0, #1]
    72fa:	4770      	bx	lr
    72fc:	200002a8 	.word	0x200002a8

00007300 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7300:	b5f0      	push	{r4, r5, r6, r7, lr}
    7302:	f06f 021f 	mvn.w	r2, #31
    7306:	0c01      	lsrs	r1, r0, #16
    7308:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    730c:	251f      	movs	r5, #31
    730e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7312:	3854      	subs	r0, #84	; 0x54
    7314:	d00d      	beq.n	7332 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7316:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    731a:	3855      	subs	r0, #85	; 0x55
    731c:	d009      	beq.n	7332 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    731e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7322:	38aa      	subs	r0, #170	; 0xaa
    7324:	d005      	beq.n	7332 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7326:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    732a:	38aa      	subs	r0, #170	; 0xaa
    732c:	d001      	beq.n	7332 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    732e:	2001      	movs	r0, #1
    7330:	e000      	b.n	7334 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7332:	2000      	movs	r0, #0
    7334:	2200      	movs	r2, #0
    7336:	4613      	mov	r3, r2
    7338:	ea4f 0402 	mov.w	r4, r2
    733c:	ea82 0701 	eor.w	r7, r2, r1
    7340:	43ff      	mvns	r7, r7
    7342:	431f      	orrs	r7, r3
    7344:	1c7f      	adds	r7, r7, #1
    7346:	d00f      	beq.n	7368 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7348:	f006 0701 	and.w	r7, r6, #1
    734c:	0852      	lsrs	r2, r2, #1
    734e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7352:	f005 0701 	and.w	r7, r5, #1
    7356:	085b      	lsrs	r3, r3, #1
    7358:	0876      	lsrs	r6, r6, #1
    735a:	086d      	lsrs	r5, r5, #1
    735c:	1c64      	adds	r4, r4, #1
    735e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7362:	2c16      	cmp	r4, #22
    7364:	d3ea      	bcc.n	733c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7368:	2000      	movs	r0, #0
    736a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000736c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    736c:	b510      	push	{r4, lr}
    736e:	e9d0 2100 	ldrd	r2, r1, [r0]
    7372:	4b09      	ldr	r3, [pc, #36]	; (7398 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    7374:	4c09      	ldr	r4, [pc, #36]	; (739c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    7376:	4353      	muls	r3, r2
    7378:	4354      	muls	r4, r2
    737a:	4051      	eors	r1, r2
    737c:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    7380:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    7384:	ea4f 41f1 	mov.w	r1, r1, ror #19
    7388:	e9c0 2100 	strd	r2, r1, [r0]
    738c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7390:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7394:	4618      	mov	r0, r3
    7396:	bd10      	pop	{r4, pc}
    7398:	c6ef3760 	.word	0xc6ef3760
    739c:	9e3779bb 	.word	0x9e3779bb

000073a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    73a0:	b570      	push	{r4, r5, r6, lr}
    73a2:	4604      	mov	r4, r0
    73a4:	7c00      	ldrb	r0, [r0, #16]
    73a6:	b300      	cbz	r0, 73ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    73a8:	2802      	cmp	r0, #2
    73aa:	d01e      	beq.n	73ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    73ac:	f05f 0001 	movs.w	r0, #1
    73b0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    73b4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    73b8:	460d      	mov	r5, r1
    73ba:	b1c0      	cbz	r0, 73ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    73bc:	7de0      	ldrb	r0, [r4, #23]
    73be:	b1f0      	cbz	r0, 73fe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    73c0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    73c4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    73c8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    73cc:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    73d0:	7c20      	ldrb	r0, [r4, #16]
    73d2:	f007 fcf7 	bl	edc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    73d6:	7620      	strb	r0, [r4, #24]
    73d8:	2008      	movs	r0, #8
    73da:	7660      	strb	r0, [r4, #25]
    73dc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    73e0:	4629      	mov	r1, r5
    73e2:	f007 fcdb 	bl	ed9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    73e6:	b9a8      	cbnz	r0, 7414 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    73e8:	e00e      	b.n	7408 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    73ea:	2000      	movs	r0, #0
    73ec:	e7e0      	b.n	73b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    73ee:	2000      	movs	r0, #0
    73f0:	f7fe fb96 	bl	5b20 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    73f4:	2800      	cmp	r0, #0
    73f6:	d1eb      	bne.n	73d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    73f8:	f240 41ad 	movw	r1, #1197	; 0x4ad
    73fc:	e001      	b.n	7402 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    73fe:	f240 41b1 	movw	r1, #1201	; 0x4b1
    7402:	202d      	movs	r0, #45	; 0x2d
    7404:	f7fd fce6 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7408:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    740c:	4629      	mov	r1, r5
    740e:	f007 fcce 	bl	edae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7412:	b100      	cbz	r0, 7416 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7414:	2001      	movs	r0, #1
    7416:	76a0      	strb	r0, [r4, #26]
    7418:	7e20      	ldrb	r0, [r4, #24]
    741a:	b130      	cbz	r0, 742a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    741c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7420:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7424:	f006 ff08 	bl	e238 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7428:	7660      	strb	r0, [r4, #25]
    742a:	2500      	movs	r5, #0
    742c:	6425      	str	r5, [r4, #64]	; 0x40
    742e:	f005 fb23 	bl	ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7432:	6460      	str	r0, [r4, #68]	; 0x44
    7434:	2100      	movs	r1, #0
    7436:	4620      	mov	r0, r4
    7438:	f007 fdef 	bl	f01a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    743c:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    7440:	78a0      	ldrb	r0, [r4, #2]
    7442:	0740      	lsls	r0, r0, #29
    7444:	d505      	bpl.n	7452 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    7446:	4620      	mov	r0, r4
    7448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    744c:	2100      	movs	r1, #0
    744e:	f000 bdff 	b.w	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    7452:	bd70      	pop	{r4, r5, r6, pc}

00007454 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7454:	b508      	push	{r3, lr}
    7456:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    745a:	f88d 2000 	strb.w	r2, [sp]
    745e:	9a00      	ldr	r2, [sp, #0]
    7460:	9200      	str	r2, [sp, #0]
    7462:	f89d 3000 	ldrb.w	r3, [sp]
    7466:	2200      	movs	r2, #0
    7468:	b163      	cbz	r3, 7484 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    746a:	704a      	strb	r2, [r1, #1]
    746c:	2317      	movs	r3, #23
    746e:	700b      	strb	r3, [r1, #0]
    7470:	f850 3f95 	ldr.w	r3, [r0, #149]!
    7474:	604b      	str	r3, [r1, #4]
    7476:	6843      	ldr	r3, [r0, #4]
    7478:	608b      	str	r3, [r1, #8]
    747a:	7a03      	ldrb	r3, [r0, #8]
    747c:	730b      	strb	r3, [r1, #12]
    747e:	f800 2c01 	strb.w	r2, [r0, #-1]
    7482:	e03b      	b.n	74fc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7484:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    7488:	f88d 3000 	strb.w	r3, [sp]
    748c:	9b00      	ldr	r3, [sp, #0]
    748e:	9300      	str	r3, [sp, #0]
    7490:	f89d 3000 	ldrb.w	r3, [sp]
    7494:	b143      	cbz	r3, 74a8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    7496:	704a      	strb	r2, [r1, #1]
    7498:	2305      	movs	r3, #5
    749a:	700b      	strb	r3, [r1, #0]
    749c:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    74a0:	604b      	str	r3, [r1, #4]
    74a2:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    74a6:	e029      	b.n	74fc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    74a8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    74ac:	f88d 3000 	strb.w	r3, [sp]
    74b0:	9b00      	ldr	r3, [sp, #0]
    74b2:	9300      	str	r3, [sp, #0]
    74b4:	f89d 3000 	ldrb.w	r3, [sp]
    74b8:	b11b      	cbz	r3, 74c2 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    74ba:	bf00      	nop
    74bc:	f007 fd83 	bl	efc6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    74c0:	e01c      	b.n	74fc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    74c2:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    74c6:	f88d 3000 	strb.w	r3, [sp]
    74ca:	9b00      	ldr	r3, [sp, #0]
    74cc:	9300      	str	r3, [sp, #0]
    74ce:	f89d 3000 	ldrb.w	r3, [sp]
    74d2:	b1ab      	cbz	r3, 7500 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    74d4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    74d8:	f88d 3000 	strb.w	r3, [sp]
    74dc:	9b00      	ldr	r3, [sp, #0]
    74de:	9300      	str	r3, [sp, #0]
    74e0:	f89d 3000 	ldrb.w	r3, [sp]
    74e4:	2b00      	cmp	r3, #0
    74e6:	d1e9      	bne.n	74bc <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    74e8:	704a      	strb	r2, [r1, #1]
    74ea:	2314      	movs	r3, #20
    74ec:	700b      	strb	r3, [r1, #0]
    74ee:	f850 3f88 	ldr.w	r3, [r0, #136]!
    74f2:	604b      	str	r3, [r1, #4]
    74f4:	8883      	ldrh	r3, [r0, #4]
    74f6:	810b      	strh	r3, [r1, #8]
    74f8:	f800 2c02 	strb.w	r2, [r0, #-2]
    74fc:	2001      	movs	r0, #1
    74fe:	bd08      	pop	{r3, pc}
    7500:	2000      	movs	r0, #0
    7502:	bd08      	pop	{r3, pc}

00007504 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7504:	b530      	push	{r4, r5, lr}
    7506:	460c      	mov	r4, r1
    7508:	b08d      	sub	sp, #52	; 0x34
    750a:	4605      	mov	r5, r0
    750c:	4601      	mov	r1, r0
    750e:	2220      	movs	r2, #32
    7510:	a802      	add	r0, sp, #8
    7512:	f005 fc26 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7516:	a80a      	add	r0, sp, #40	; 0x28
    7518:	f007 fe2c 	bl	f174 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    751c:	7aa0      	ldrb	r0, [r4, #10]
    751e:	f88d 0018 	strb.w	r0, [sp, #24]
    7522:	7820      	ldrb	r0, [r4, #0]
    7524:	f88d 0008 	strb.w	r0, [sp, #8]
    7528:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    752c:	f8ad 0000 	strh.w	r0, [sp]
    7530:	f89d 0000 	ldrb.w	r0, [sp]
    7534:	f000 0101 	and.w	r1, r0, #1
    7538:	f3c0 0240 	ubfx	r2, r0, #1, #1
    753c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    7540:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7544:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7548:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    754c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    7550:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7554:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7558:	f3c0 1240 	ubfx	r2, r0, #5, #1
    755c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    7560:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7564:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7568:	f8ad 000a 	strh.w	r0, [sp, #10]
    756c:	7d20      	ldrb	r0, [r4, #20]
    756e:	2801      	cmp	r0, #1
    7570:	d006      	beq.n	7580 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7572:	2802      	cmp	r0, #2
    7574:	d004      	beq.n	7580 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7576:	f240 2186 	movw	r1, #646	; 0x286
    757a:	2006      	movs	r0, #6
    757c:	f7fd fc2a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7580:	f88d 000c 	strb.w	r0, [sp, #12]
    7584:	7a61      	ldrb	r1, [r4, #9]
    7586:	a80a      	add	r0, sp, #40	; 0x28
    7588:	f007 fddb 	bl	f142 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    758c:	7d20      	ldrb	r0, [r4, #20]
    758e:	2101      	movs	r1, #1
    7590:	2802      	cmp	r0, #2
    7592:	d102      	bne.n	759a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7594:	7d60      	ldrb	r0, [r4, #21]
    7596:	1c40      	adds	r0, r0, #1
    7598:	b2c1      	uxtb	r1, r0
    759a:	7ea0      	ldrb	r0, [r4, #26]
    759c:	1c40      	adds	r0, r0, #1
    759e:	b2c2      	uxtb	r2, r0
    75a0:	a80a      	add	r0, sp, #40	; 0x28
    75a2:	f007 fd95 	bl	f0d0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    75a6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    75aa:	0700      	lsls	r0, r0, #28
    75ac:	d501      	bpl.n	75b2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    75ae:	2000      	movs	r0, #0
    75b0:	e020      	b.n	75f4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    75b2:	a80a      	add	r0, sp, #40	; 0x28
    75b4:	f007 fd9e 	bl	f0f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    75b8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    75bc:	2228      	movs	r2, #40	; 0x28
    75be:	f000 fded 	bl	819c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    75c2:	f240 2171 	movw	r1, #625	; 0x271
    75c6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    75ca:	fbb0 f0f1 	udiv	r0, r0, r1
    75ce:	4348      	muls	r0, r1
    75d0:	f8d4 1002 	ldr.w	r1, [r4, #2]
    75d4:	f240 2371 	movw	r3, #625	; 0x271
    75d8:	0a0a      	lsrs	r2, r1, #8
    75da:	f240 2171 	movw	r1, #625	; 0x271
    75de:	434a      	muls	r2, r1
    75e0:	f8d4 1005 	ldr.w	r1, [r4, #5]
    75e4:	0a09      	lsrs	r1, r1, #8
    75e6:	4359      	muls	r1, r3
    75e8:	4290      	cmp	r0, r2
    75ea:	d801      	bhi.n	75f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    75ec:	9204      	str	r2, [sp, #16]
    75ee:	e004      	b.n	75fa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    75f0:	4288      	cmp	r0, r1
    75f2:	d801      	bhi.n	75f8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    75f4:	9004      	str	r0, [sp, #16]
    75f6:	e000      	b.n	75fa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    75f8:	9104      	str	r1, [sp, #16]
    75fa:	7ca0      	ldrb	r0, [r4, #18]
    75fc:	f88d 0017 	strb.w	r0, [sp, #23]
    7600:	7e20      	ldrb	r0, [r4, #24]
    7602:	2801      	cmp	r0, #1
    7604:	d000      	beq.n	7608 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    7606:	2000      	movs	r0, #0
    7608:	f88d 0014 	strb.w	r0, [sp, #20]
    760c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    760e:	f006 fc8b 	bl	df28 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7612:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7614:	f006 fd2c 	bl	e070 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7618:	2220      	movs	r2, #32
    761a:	a902      	add	r1, sp, #8
    761c:	4628      	mov	r0, r5
    761e:	f005 fba0 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7622:	980a      	ldr	r0, [sp, #40]	; 0x28
    7624:	6228      	str	r0, [r5, #32]
    7626:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    762a:	84a8      	strh	r0, [r5, #36]	; 0x24
    762c:	7ae0      	ldrb	r0, [r4, #11]
    762e:	b168      	cbz	r0, 764c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7630:	2802      	cmp	r0, #2
    7632:	d00b      	beq.n	764c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7634:	f05f 0001 	movs.w	r0, #1
    7638:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    763c:	68e0      	ldr	r0, [r4, #12]
    763e:	6528      	str	r0, [r5, #80]	; 0x50
    7640:	8a20      	ldrh	r0, [r4, #16]
    7642:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7646:	b00d      	add	sp, #52	; 0x34
    7648:	2000      	movs	r0, #0
    764a:	bd30      	pop	{r4, r5, pc}
    764c:	2000      	movs	r0, #0
    764e:	e7f3      	b.n	7638 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00007650 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    7650:	4a0a      	ldr	r2, [pc, #40]	; (767c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    7652:	b510      	push	{r4, lr}
    7654:	2100      	movs	r1, #0
    7656:	7011      	strb	r1, [r2, #0]
    7658:	4c09      	ldr	r4, [pc, #36]	; (7680 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    765a:	6060      	str	r0, [r4, #4]
    765c:	f000 f822 	bl	76a4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    7660:	b110      	cbz	r0, 7668 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    7662:	f240 312d 	movw	r1, #813	; 0x32d
    7666:	e004      	b.n	7672 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7668:	68a0      	ldr	r0, [r4, #8]
    766a:	2800      	cmp	r0, #0
    766c:	d104      	bne.n	7678 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    766e:	f44f 714c 	mov.w	r1, #816	; 0x330
    7672:	202d      	movs	r0, #45	; 0x2d
    7674:	f7fd fbae 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7678:	bd10      	pop	{r4, pc}
    767a:	0000      	.short	0x0000
    767c:	20001130 	.word	0x20001130
    7680:	20000114 	.word	0x20000114

00007684 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7684:	4902      	ldr	r1, [pc, #8]	; (7690 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7686:	4801      	ldr	r0, [pc, #4]	; (768c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7688:	6088      	str	r0, [r1, #8]
    768a:	4770      	bx	lr
    768c:	00008184 	.word	0x00008184
    7690:	20000114 	.word	0x20000114

00007694 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7694:	4902      	ldr	r1, [pc, #8]	; (76a0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7696:	6008      	str	r0, [r1, #0]
    7698:	6889      	ldr	r1, [r1, #8]
    769a:	6809      	ldr	r1, [r1, #0]
    769c:	4708      	bx	r1
    769e:	0000      	.short	0x0000
    76a0:	20000114 	.word	0x20000114

000076a4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    76a4:	4808      	ldr	r0, [pc, #32]	; (76c8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    76a6:	b510      	push	{r4, lr}
    76a8:	7800      	ldrb	r0, [r0, #0]
    76aa:	b110      	cbz	r0, 76b2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    76ac:	240c      	movs	r4, #12
    76ae:	4620      	mov	r0, r4
    76b0:	bd10      	pop	{r4, pc}
    76b2:	2400      	movs	r4, #0
    76b4:	2218      	movs	r2, #24
    76b6:	4621      	mov	r1, r4
    76b8:	4803      	ldr	r0, [pc, #12]	; (76c8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    76ba:	f005 fbcc 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    76be:	f004 f8bf 	bl	b840 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    76c2:	f003 fee3 	bl	b48c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    76c6:	e7f2      	b.n	76ae <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    76c8:	20001130 	.word	0x20001130

000076cc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    76cc:	4904      	ldr	r1, [pc, #16]	; (76e0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    76ce:	b510      	push	{r4, lr}
    76d0:	7809      	ldrb	r1, [r1, #0]
    76d2:	2901      	cmp	r1, #1
    76d4:	d101      	bne.n	76da <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    76d6:	f000 fb85 	bl	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    76da:	2000      	movs	r0, #0
    76dc:	bd10      	pop	{r4, pc}
    76de:	0000      	.short	0x0000
    76e0:	20001130 	.word	0x20001130

000076e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    76e4:	4902      	ldr	r1, [pc, #8]	; (76f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    76e6:	4801      	ldr	r0, [pc, #4]	; (76ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    76e8:	6008      	str	r0, [r1, #0]
    76ea:	4770      	bx	lr
    76ec:	00007f31 	.word	0x00007f31
    76f0:	20000120 	.word	0x20000120
    76f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76f8:	000f      	movs	r7, r1
    76fa:	4604      	mov	r4, r0
    76fc:	d023      	beq.n	7746 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    76fe:	f104 0020 	add.w	r0, r4, #32
    7702:	4605      	mov	r5, r0
    7704:	f007 fd1f 	bl	f146 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7708:	b9b0      	cbnz	r0, 7738 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    770a:	78a0      	ldrb	r0, [r4, #2]
    770c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7710:	b350      	cbz	r0, 7768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7712:	4628      	mov	r0, r5
    7714:	f007 fcee 	bl	f0f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7718:	4606      	mov	r6, r0
    771a:	4628      	mov	r0, r5
    771c:	f007 fd13 	bl	f146 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7720:	1a30      	subs	r0, r6, r0
    7722:	b2c0      	uxtb	r0, r0
    7724:	f007 fd64 	bl	f1f0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7728:	4601      	mov	r1, r0
    772a:	4835      	ldr	r0, [pc, #212]	; (7800 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    772c:	6842      	ldr	r2, [r0, #4]
    772e:	4411      	add	r1, r2
    7730:	6041      	str	r1, [r0, #4]
    7732:	4628      	mov	r0, r5
    7734:	f007 fd25 	bl	f182 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7738:	4628      	mov	r0, r5
    773a:	f007 fce7 	bl	f10c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    773e:	4601      	mov	r1, r0
    7740:	4620      	mov	r0, r4
    7742:	f007 fca6 	bl	f092 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    7746:	4d2f      	ldr	r5, [pc, #188]	; (7804 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7748:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    774c:	2100      	movs	r1, #0
    774e:	6868      	ldr	r0, [r5, #4]
    7750:	8001      	strh	r1, [r0, #0]
    7752:	f007 fcb4 	bl	f0be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    7756:	8860      	ldrh	r0, [r4, #2]
    7758:	2813      	cmp	r0, #19
    775a:	d013      	beq.n	7784 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    775c:	dc09      	bgt.n	7772 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    775e:	2810      	cmp	r0, #16
    7760:	d036      	beq.n	77d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    7762:	2812      	cmp	r0, #18
    7764:	d109      	bne.n	777a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7766:	e031      	b.n	77cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7768:	4620      	mov	r0, r4
    776a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    776e:	f000 bb39 	b.w	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7772:	2815      	cmp	r0, #21
    7774:	d00f      	beq.n	7796 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7776:	281d      	cmp	r0, #29
    7778:	d00d      	beq.n	7796 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    777a:	f240 616f 	movw	r1, #1647	; 0x66f
    777e:	202d      	movs	r0, #45	; 0x2d
    7780:	f7fd fb28 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7784:	2100      	movs	r1, #0
    7786:	6868      	ldr	r0, [r5, #4]
    7788:	f007 f8ce 	bl	e928 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    778c:	2101      	movs	r1, #1
    778e:	6868      	ldr	r0, [r5, #4]
    7790:	f007 fc95 	bl	f0be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    7794:	e020      	b.n	77d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7796:	2101      	movs	r1, #1
    7798:	6868      	ldr	r0, [r5, #4]
    779a:	f007 f8c5 	bl	e928 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    779e:	2101      	movs	r1, #1
    77a0:	6868      	ldr	r0, [r5, #4]
    77a2:	f007 fc8c 	bl	f0be <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x134>
    77a6:	b136      	cbz	r6, 77b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    77a8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    77ac:	6868      	ldr	r0, [r5, #4]
    77ae:	f007 f8d6 	bl	e95e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    77b2:	2101      	movs	r1, #1
    77b4:	e006      	b.n	77c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    77b6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    77ba:	6868      	ldr	r0, [r5, #4]
    77bc:	f007 f8cf 	bl	e95e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    77c0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    77c4:	6868      	ldr	r0, [r5, #4]
    77c6:	f007 f8d0 	bl	e96a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    77ca:	e005      	b.n	77d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    77cc:	2106      	movs	r1, #6
    77ce:	e000      	b.n	77d2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    77d0:	2102      	movs	r1, #2
    77d2:	6868      	ldr	r0, [r5, #4]
    77d4:	f007 f8a8 	bl	e928 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    77d8:	4620      	mov	r0, r4
    77da:	f000 fcaf 	bl	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    77de:	8860      	ldrh	r0, [r4, #2]
    77e0:	281d      	cmp	r0, #29
    77e2:	d006      	beq.n	77f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    77e4:	2815      	cmp	r0, #21
    77e6:	d004      	beq.n	77f2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    77e8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    77ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
    77ec:	6868      	ldr	r0, [r5, #4]
    77ee:	f007 f88b 	bl	e908 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    77f2:	4639      	mov	r1, r7
    77f4:	4620      	mov	r0, r4
    77f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77fa:	f000 b9f1 	b.w	7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    77fe:	0000      	.short	0x0000
    7800:	20001130 	.word	0x20001130
    7804:	20000114 	.word	0x20000114
    7808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    780c:	4d2e      	ldr	r5, [pc, #184]	; (78c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    780e:	4607      	mov	r7, r0
    7810:	7828      	ldrb	r0, [r5, #0]
    7812:	2802      	cmp	r0, #2
    7814:	d005      	beq.n	7822 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7816:	7828      	ldrb	r0, [r5, #0]
    7818:	2803      	cmp	r0, #3
    781a:	d002      	beq.n	7822 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    781c:	f640 41e5 	movw	r1, #3301	; 0xce5
    7820:	e028      	b.n	7874 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x190>
    7822:	4c2a      	ldr	r4, [pc, #168]	; (78cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7824:	6820      	ldr	r0, [r4, #0]
    7826:	7b01      	ldrb	r1, [r0, #12]
    7828:	b109      	cbz	r1, 782e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    782a:	f007 fc3d 	bl	f0a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    782e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    7832:	f04f 0800 	mov.w	r8, #0
    7836:	f89c 0000 	ldrb.w	r0, [ip]
    783a:	f000 060f 	and.w	r6, r0, #15
    783e:	b33f      	cbz	r7, 7890 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7840:	6821      	ldr	r1, [r4, #0]
    7842:	09c0      	lsrs	r0, r0, #7
    7844:	f101 0349 	add.w	r3, r1, #73	; 0x49
    7848:	f891 2048 	ldrb.w	r2, [r1, #72]	; 0x48
    784c:	f10c 0109 	add.w	r1, ip, #9
    7850:	f006 fc6b 	bl	e12a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7854:	b1e0      	cbz	r0, 7890 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7856:	4641      	mov	r1, r8
    7858:	6860      	ldr	r0, [r4, #4]
    785a:	f007 f845 	bl	e8e8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    785e:	b1b8      	cbz	r0, 7890 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ac>
    7860:	782a      	ldrb	r2, [r5, #0]
    7862:	6820      	ldr	r0, [r4, #0]
    7864:	4631      	mov	r1, r6
    7866:	2a02      	cmp	r2, #2
    7868:	d007      	beq.n	787a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    786a:	782a      	ldrb	r2, [r5, #0]
    786c:	2a03      	cmp	r2, #3
    786e:	d004      	beq.n	787a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x196>
    7870:	f640 41be 	movw	r1, #3262	; 0xcbe
    7874:	202d      	movs	r0, #45	; 0x2d
    7876:	f7fd faad 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    787a:	68a2      	ldr	r2, [r4, #8]
    787c:	782b      	ldrb	r3, [r5, #0]
    787e:	6952      	ldr	r2, [r2, #20]
    7880:	f06f 0607 	mvn.w	r6, #7
    7884:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7888:	58d2      	ldr	r2, [r2, r3]
    788a:	4790      	blx	r2
    788c:	4606      	mov	r6, r0
    788e:	e000      	b.n	7892 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7890:	2601      	movs	r6, #1
    7892:	7ba8      	ldrb	r0, [r5, #14]
    7894:	b118      	cbz	r0, 789e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ba>
    7896:	f003 ffd3 	bl	b840 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    789a:	f003 fdf7 	bl	b48c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    789e:	2e00      	cmp	r6, #0
    78a0:	d00f      	beq.n	78c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1de>
    78a2:	6820      	ldr	r0, [r4, #0]
    78a4:	f007 fcba 	bl	f21c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    78a8:	b130      	cbz	r0, 78b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d4>
    78aa:	f003 ffe9 	bl	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    78ae:	68a0      	ldr	r0, [r4, #8]
    78b0:	6880      	ldr	r0, [r0, #8]
    78b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    78b6:	4700      	bx	r0
    78b8:	6820      	ldr	r0, [r4, #0]
    78ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    78be:	f000 ba91 	b.w	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    78c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78c6:	0000      	.short	0x0000
    78c8:	20001130 	.word	0x20001130
    78cc:	20000114 	.word	0x20000114
    78d0:	b510      	push	{r4, lr}
    78d2:	2903      	cmp	r1, #3
    78d4:	d002      	beq.n	78dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    78d6:	2905      	cmp	r1, #5
    78d8:	d10a      	bne.n	78f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    78da:	e002      	b.n	78e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    78dc:	f000 fb7c 	bl	7fd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    78e0:	e003      	b.n	78ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    78e2:	4904      	ldr	r1, [pc, #16]	; (78f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    78e4:	6809      	ldr	r1, [r1, #0]
    78e6:	b109      	cbz	r1, 78ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    78e8:	4788      	blx	r1
    78ea:	b108      	cbz	r0, 78f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    78ec:	2000      	movs	r0, #0
    78ee:	bd10      	pop	{r4, pc}
    78f0:	2001      	movs	r0, #1
    78f2:	bd10      	pop	{r4, pc}
    78f4:	20000120 	.word	0x20000120
    78f8:	4a09      	ldr	r2, [pc, #36]	; (7920 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    78fa:	0003      	movs	r3, r0
    78fc:	6810      	ldr	r0, [r2, #0]
    78fe:	d001      	beq.n	7904 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7900:	f000 ba70 	b.w	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7904:	2900      	cmp	r1, #0
    7906:	d009      	beq.n	791c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    7908:	6891      	ldr	r1, [r2, #8]
    790a:	4a06      	ldr	r2, [pc, #24]	; (7924 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    790c:	6909      	ldr	r1, [r1, #16]
    790e:	7812      	ldrb	r2, [r2, #0]
    7910:	f06f 030f 	mvn.w	r3, #15
    7914:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7918:	5889      	ldr	r1, [r1, r2]
    791a:	4708      	bx	r1
    791c:	4770      	bx	lr
    791e:	0000      	.short	0x0000
    7920:	20000114 	.word	0x20000114
    7924:	20001130 	.word	0x20001130
    7928:	b570      	push	{r4, r5, r6, lr}
    792a:	4604      	mov	r4, r0
    792c:	8840      	ldrh	r0, [r0, #2]
    792e:	2810      	cmp	r0, #16
    7930:	d019      	beq.n	7966 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    7932:	4d10      	ldr	r5, [pc, #64]	; (7974 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7934:	7ba8      	ldrb	r0, [r5, #14]
    7936:	b120      	cbz	r0, 7942 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7938:	f003 fdc8 	bl	b4cc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    793c:	2040      	movs	r0, #64	; 0x40
    793e:	f003 ff8d 	bl	b85c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    7942:	480d      	ldr	r0, [pc, #52]	; (7978 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7944:	6840      	ldr	r0, [r0, #4]
    7946:	f004 fa37 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    794a:	78a0      	ldrb	r0, [r4, #2]
    794c:	0740      	lsls	r0, r0, #29
    794e:	d404      	bmi.n	795a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    7950:	2100      	movs	r1, #0
    7952:	7922      	ldrb	r2, [r4, #4]
    7954:	4608      	mov	r0, r1
    7956:	f004 fabb 	bl	bed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    795a:	2000      	movs	r0, #0
    795c:	f004 f8d0 	bl	bb00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7960:	2002      	movs	r0, #2
    7962:	7028      	strb	r0, [r5, #0]
    7964:	bd70      	pop	{r4, r5, r6, pc}
    7966:	4620      	mov	r0, r4
    7968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    796c:	2101      	movs	r1, #1
    796e:	f7ff bec1 	b.w	76f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7972:	0000      	.short	0x0000
    7974:	20001130 	.word	0x20001130
    7978:	20000114 	.word	0x20000114
    797c:	b510      	push	{r4, lr}
    797e:	4c12      	ldr	r4, [pc, #72]	; (79c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    7980:	6820      	ldr	r0, [r4, #0]
    7982:	f000 f825 	bl	79d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7986:	6820      	ldr	r0, [r4, #0]
    7988:	f007 fc48 	bl	f21c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    798c:	2800      	cmp	r0, #0
    798e:	6820      	ldr	r0, [r4, #0]
    7990:	d00b      	beq.n	79aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7992:	490e      	ldr	r1, [pc, #56]	; (79cc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7994:	780a      	ldrb	r2, [r1, #0]
    7996:	2a02      	cmp	r2, #2
    7998:	d00b      	beq.n	79b2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    799a:	780a      	ldrb	r2, [r1, #0]
    799c:	2a03      	cmp	r2, #3
    799e:	d008      	beq.n	79b2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    79a0:	f44f 613f 	mov.w	r1, #3056	; 0xbf0
    79a4:	202d      	movs	r0, #45	; 0x2d
    79a6:	f7fd fa15 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79ae:	f000 ba19 	b.w	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    79b2:	68a2      	ldr	r2, [r4, #8]
    79b4:	7809      	ldrb	r1, [r1, #0]
    79b6:	68d2      	ldr	r2, [r2, #12]
    79b8:	f06f 0307 	mvn.w	r3, #7
    79bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    79c0:	5851      	ldr	r1, [r2, r1]
    79c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79c6:	4708      	bx	r1
    79c8:	20000114 	.word	0x20000114
    79cc:	20001130 	.word	0x20001130
    79d0:	b510      	push	{r4, lr}
    79d2:	7b01      	ldrb	r1, [r0, #12]
    79d4:	b109      	cbz	r1, 79da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    79d6:	f007 fb67 	bl	f0a8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    79da:	4805      	ldr	r0, [pc, #20]	; (79f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    79dc:	7b80      	ldrb	r0, [r0, #14]
    79de:	2800      	cmp	r0, #0
    79e0:	d005      	beq.n	79ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    79e2:	f003 ff2d 	bl	b840 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    79e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79ea:	f003 bd4f 	b.w	b48c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79ee:	bd10      	pop	{r4, pc}
    79f0:	20001130 	.word	0x20001130

000079f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    79f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    79f8:	4d5e      	ldr	r5, [pc, #376]	; (7b74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    79fa:	4604      	mov	r4, r0
    79fc:	b08a      	sub	sp, #40	; 0x28
    79fe:	7828      	ldrb	r0, [r5, #0]
    7a00:	bbf0      	cbnz	r0, 7a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    7a02:	7820      	ldrb	r0, [r4, #0]
    7a04:	28ff      	cmp	r0, #255	; 0xff
    7a06:	d03e      	beq.n	7a86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7a08:	2600      	movs	r6, #0
    7a0a:	81ae      	strh	r6, [r5, #12]
    7a0c:	606e      	str	r6, [r5, #4]
    7a0e:	706e      	strb	r6, [r5, #1]
    7a10:	70ae      	strb	r6, [r5, #2]
    7a12:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    7a16:	4b58      	ldr	r3, [pc, #352]	; (7b78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7a18:	af06      	add	r7, sp, #24
    7a1a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 7b7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>
    7a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7a20:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    7a24:	f8d9 0008 	ldr.w	r0, [r9, #8]
    7a28:	6840      	ldr	r0, [r0, #4]
    7a2a:	9009      	str	r0, [sp, #36]	; 0x24
    7a2c:	a806      	add	r0, sp, #24
    7a2e:	f004 f83b 	bl	baa8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7a32:	f004 f919 	bl	bc68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7a36:	f004 fba5 	bl	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7a3a:	f003 ff01 	bl	b840 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7a3e:	f003 fd25 	bl	b48c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7a42:	484f      	ldr	r0, [pc, #316]	; (7b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    7a44:	f004 fa76 	bl	bf34 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7a48:	484b      	ldr	r0, [pc, #300]	; (7b78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    7a4a:	1f00      	subs	r0, r0, #4
    7a4c:	f004 fa7c 	bl	bf48 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7a50:	f104 0020 	add.w	r0, r4, #32
    7a54:	4607      	mov	r7, r0
    7a56:	f007 fb94 	bl	f182 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7a5a:	4638      	mov	r0, r7
    7a5c:	f007 fb56 	bl	f10c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    7a60:	4601      	mov	r1, r0
    7a62:	4620      	mov	r0, r4
    7a64:	f007 fb15 	bl	f092 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    7a68:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7a6c:	f004 f982 	bl	bd74 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7a70:	7921      	ldrb	r1, [r4, #4]
    7a72:	2000      	movs	r0, #0
    7a74:	f003 ffa0 	bl	b9b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7a78:	60a8      	str	r0, [r5, #8]
    7a7a:	b140      	cbz	r0, 7a8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9a>
    7a7c:	7ea0      	ldrb	r0, [r4, #26]
    7a7e:	e000      	b.n	7a82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    7a80:	e001      	b.n	7a86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x92>
    7a82:	b960      	cbnz	r0, 7a9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7a84:	e006      	b.n	7a94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa0>
    7a86:	200c      	movs	r0, #12
    7a88:	b00a      	add	sp, #40	; 0x28
    7a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a8e:	2001      	movs	r0, #1
    7a90:	7028      	strb	r0, [r5, #0]
    7a92:	e06c      	b.n	7b6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7a94:	7e20      	ldrb	r0, [r4, #24]
    7a96:	b910      	cbnz	r0, 7a9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xaa>
    7a98:	78a0      	ldrb	r0, [r4, #2]
    7a9a:	0740      	lsls	r0, r0, #29
    7a9c:	d529      	bpl.n	7af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7a9e:	f004 ffeb 	bl	ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7aa2:	4682      	mov	sl, r0
    7aa4:	4651      	mov	r1, sl
    7aa6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7aa8:	f7fa fdc2 	bl	2630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7aac:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 7b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>
    7ab0:	4607      	mov	r7, r0
    7ab2:	fb90 f1f8 	sdiv	r1, r0, r8
    7ab6:	fb08 7011 	mls	r0, r8, r1, r7
    7aba:	4241      	negs	r1, r0
    7abc:	4650      	mov	r0, sl
    7abe:	f7fa fd85 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ac2:	6460      	str	r0, [r4, #68]	; 0x44
    7ac4:	fb97 f0f8 	sdiv	r0, r7, r8
    7ac8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7aca:	4408      	add	r0, r1
    7acc:	6420      	str	r0, [r4, #64]	; 0x40
    7ace:	f7fe fee9 	bl	68a4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7ad2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7ad4:	4288      	cmp	r0, r1
    7ad6:	d80c      	bhi.n	7af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7ad8:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7adc:	2101      	movs	r1, #1
    7ade:	4620      	mov	r0, r4
    7ae0:	f007 fa9b 	bl	f01a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    7ae4:	78a0      	ldrb	r0, [r4, #2]
    7ae6:	0740      	lsls	r0, r0, #29
    7ae8:	d503      	bpl.n	7af2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7aea:	2101      	movs	r1, #1
    7aec:	4620      	mov	r0, r4
    7aee:	f000 faaf 	bl	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    7af2:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7af6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7af8:	f006 fa89 	bl	e00e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7afc:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7b00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7b02:	f006 fa87 	bl	e014 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7b06:	f7fe ff33 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7b0a:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7b0e:	1cc0      	adds	r0, r0, #3
    7b10:	f006 fb85 	bl	e21e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7b14:	73a8      	strb	r0, [r5, #14]
    7b16:	78a0      	ldrb	r0, [r4, #2]
    7b18:	07c0      	lsls	r0, r0, #31
    7b1a:	d028      	beq.n	7b6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7b1c:	a903      	add	r1, sp, #12
    7b1e:	2000      	movs	r0, #0
    7b20:	f006 f94e 	bl	ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7b24:	b120      	cbz	r0, 7b30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    7b26:	f640 11b9 	movw	r1, #2489	; 0x9b9
    7b2a:	202d      	movs	r0, #45	; 0x2d
    7b2c:	f7fd f952 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b30:	20ff      	movs	r0, #255	; 0xff
    7b32:	73e8      	strb	r0, [r5, #15]
    7b34:	69e6      	ldr	r6, [r4, #28]
    7b36:	f106 070a 	add.w	r7, r6, #10
    7b3a:	e013      	b.n	7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7b3c:	9c05      	ldr	r4, [sp, #20]
    7b3e:	42b4      	cmp	r4, r6
    7b40:	d010      	beq.n	7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7b42:	7a72      	ldrb	r2, [r6, #9]
    7b44:	7a60      	ldrb	r0, [r4, #9]
    7b46:	463b      	mov	r3, r7
    7b48:	f104 010a 	add.w	r1, r4, #10
    7b4c:	f006 faed 	bl	e12a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7b50:	b140      	cbz	r0, 7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7b52:	78a0      	ldrb	r0, [r4, #2]
    7b54:	73e8      	strb	r0, [r5, #15]
    7b56:	f8d4 0003 	ldr.w	r0, [r4, #3]
    7b5a:	6128      	str	r0, [r5, #16]
    7b5c:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    7b60:	82a8      	strh	r0, [r5, #20]
    7b62:	e004      	b.n	7b6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17a>
    7b64:	a803      	add	r0, sp, #12
    7b66:	f7fd fb6d 	bl	5244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7b6a:	2800      	cmp	r0, #0
    7b6c:	d0e6      	beq.n	7b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x148>
    7b6e:	2000      	movs	r0, #0
    7b70:	e78a      	b.n	7a88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x94>
    7b72:	0000      	.short	0x0000
    7b74:	20001130 	.word	0x20001130
    7b78:	00008164 	.word	0x00008164
    7b7c:	20000114 	.word	0x20000114
    7b80:	8e89bed6 	.word	0x8e89bed6
    7b84:	000f4240 	.word	0x000f4240
    7b88:	b510      	push	{r4, lr}
    7b8a:	4604      	mov	r4, r0
    7b8c:	f7ff ff32 	bl	79f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7b90:	2800      	cmp	r0, #0
    7b92:	d108      	bne.n	7ba6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    7b94:	4804      	ldr	r0, [pc, #16]	; (7ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    7b96:	7800      	ldrb	r0, [r0, #0]
    7b98:	2801      	cmp	r0, #1
    7b9a:	d003      	beq.n	7ba4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    7b9c:	2100      	movs	r1, #0
    7b9e:	4620      	mov	r0, r4
    7ba0:	f7ff fda8 	bl	76f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7ba4:	2000      	movs	r0, #0
    7ba6:	bd10      	pop	{r4, pc}
    7ba8:	20001130 	.word	0x20001130
    7bac:	480a      	ldr	r0, [pc, #40]	; (7bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    7bae:	b510      	push	{r4, lr}
    7bb0:	490a      	ldr	r1, [pc, #40]	; (7bdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    7bb2:	6804      	ldr	r4, [r0, #0]
    7bb4:	7808      	ldrb	r0, [r1, #0]
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d00d      	beq.n	7bd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    7bba:	7808      	ldrb	r0, [r1, #0]
    7bbc:	2802      	cmp	r0, #2
    7bbe:	d002      	beq.n	7bc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    7bc0:	7808      	ldrb	r0, [r1, #0]
    7bc2:	2803      	cmp	r0, #3
    7bc4:	d102      	bne.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    7bc6:	4620      	mov	r0, r4
    7bc8:	f7ff ff02 	bl	79d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7bcc:	4620      	mov	r0, r4
    7bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bd2:	f000 b907 	b.w	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    7bd6:	bd10      	pop	{r4, pc}
    7bd8:	20000114 	.word	0x20000114
    7bdc:	20001130 	.word	0x20001130
    7be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7be4:	4604      	mov	r4, r0
    7be6:	4827      	ldr	r0, [pc, #156]	; (7c84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x290>)
    7be8:	460d      	mov	r5, r1
    7bea:	6840      	ldr	r0, [r0, #4]
    7bec:	f004 f8e4 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7bf0:	4e25      	ldr	r6, [pc, #148]	; (7c88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    7bf2:	2004      	movs	r0, #4
    7bf4:	7030      	strb	r0, [r6, #0]
    7bf6:	b325      	cbz	r5, 7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7bf8:	8860      	ldrh	r0, [r4, #2]
    7bfa:	2810      	cmp	r0, #16
    7bfc:	d02a      	beq.n	7c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x260>
    7bfe:	f104 0020 	add.w	r0, r4, #32
    7c02:	4680      	mov	r8, r0
    7c04:	68b5      	ldr	r5, [r6, #8]
    7c06:	f007 fa75 	bl	f0f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7c0a:	4607      	mov	r7, r0
    7c0c:	4640      	mov	r0, r8
    7c0e:	f007 fa9a 	bl	f146 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7c12:	1a38      	subs	r0, r7, r0
    7c14:	1e40      	subs	r0, r0, #1
    7c16:	b2c0      	uxtb	r0, r0
    7c18:	8861      	ldrh	r1, [r4, #2]
    7c1a:	2228      	movs	r2, #40	; 0x28
    7c1c:	f000 fade 	bl	81dc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7c20:	4405      	add	r5, r0
    7c22:	78a0      	ldrb	r0, [r4, #2]
    7c24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7c28:	b130      	cbz	r0, 7c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    7c2a:	6870      	ldr	r0, [r6, #4]
    7c2c:	4405      	add	r5, r0
    7c2e:	f007 fae3 	bl	f1f8 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7c32:	4428      	add	r0, r5
    7c34:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7c38:	7922      	ldrb	r2, [r4, #4]
    7c3a:	4629      	mov	r1, r5
    7c3c:	2000      	movs	r0, #0
    7c3e:	f004 f8d1 	bl	bde4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7c42:	8860      	ldrh	r0, [r4, #2]
    7c44:	2813      	cmp	r0, #19
    7c46:	d013      	beq.n	7c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c48:	dc09      	bgt.n	7c5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26a>
    7c4a:	2810      	cmp	r0, #16
    7c4c:	d017      	beq.n	7c7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28a>
    7c4e:	2812      	cmp	r0, #18
    7c50:	d109      	bne.n	7c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7c52:	e00d      	b.n	7c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c54:	7921      	ldrb	r1, [r4, #4]
    7c56:	2000      	movs	r0, #0
    7c58:	f003 fe62 	bl	b920 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7c5c:	e7f1      	b.n	7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    7c5e:	2815      	cmp	r0, #21
    7c60:	d006      	beq.n	7c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c62:	281d      	cmp	r0, #29
    7c64:	d004      	beq.n	7c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>
    7c66:	f640 5173 	movw	r1, #3443	; 0xd73
    7c6a:	202d      	movs	r0, #45	; 0x2d
    7c6c:	f7fd f8b2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c70:	7922      	ldrb	r2, [r4, #4]
    7c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7c76:	2101      	movs	r1, #1
    7c78:	2000      	movs	r0, #0
    7c7a:	f004 b929 	b.w	bed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c82:	0000      	.short	0x0000
    7c84:	20000114 	.word	0x20000114
    7c88:	20001130 	.word	0x20001130
    7c8c:	b510      	push	{r4, lr}
    7c8e:	4604      	mov	r4, r0
    7c90:	7800      	ldrb	r0, [r0, #0]
    7c92:	460b      	mov	r3, r1
    7c94:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    7c98:	29ff      	cmp	r1, #255	; 0xff
    7c9a:	d010      	beq.n	7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ca>
    7c9c:	f104 0297 	add.w	r2, r4, #151	; 0x97
    7ca0:	1e51      	subs	r1, r2, #1
    7ca2:	4618      	mov	r0, r3
    7ca4:	f7fe fd7c 	bl	67a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7ca8:	b130      	cbz	r0, 7cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2c4>
    7caa:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7cae:	f040 0002 	orr.w	r0, r0, #2
    7cb2:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    7cb6:	e011      	b.n	7cdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e8>
    7cb8:	f640 71af 	movw	r1, #4015	; 0xfaf
    7cbc:	e020      	b.n	7d00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    7cbe:	4812      	ldr	r0, [pc, #72]	; (7d08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x314>)
    7cc0:	6840      	ldr	r0, [r0, #4]
    7cc2:	7801      	ldrb	r1, [r0, #0]
    7cc4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7cc8:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7ccc:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7cd0:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    7cd4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7cd8:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    7cdc:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7ce0:	287f      	cmp	r0, #127	; 0x7f
    7ce2:	d00b      	beq.n	7cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x308>
    7ce4:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7ce8:	207f      	movs	r0, #127	; 0x7f
    7cea:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7cee:	347e      	adds	r4, #126	; 0x7e
    7cf0:	20ff      	movs	r0, #255	; 0xff
    7cf2:	75a0      	strb	r0, [r4, #22]
    7cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cf8:	f7ff b9a2 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7cfc:	f640 6125 	movw	r1, #3621	; 0xe25
    7d00:	202d      	movs	r0, #45	; 0x2d
    7d02:	f7fd f867 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d06:	0000      	.short	0x0000
    7d08:	20000114 	.word	0x20000114
    7d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d10:	4690      	mov	r8, r2
    7d12:	460e      	mov	r6, r1
    7d14:	4604      	mov	r4, r0
    7d16:	2903      	cmp	r1, #3
    7d18:	d004      	beq.n	7d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7d1a:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7d1e:	b108      	cbz	r0, 7d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    7d20:	2001      	movs	r0, #1
    7d22:	e000      	b.n	7d26 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7d24:	2000      	movs	r0, #0
    7d26:	4681      	mov	r9, r0
    7d28:	f003 fda4 	bl	b874 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7d2c:	4605      	mov	r5, r0
    7d2e:	2e03      	cmp	r6, #3
    7d30:	d003      	beq.n	7d3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    7d32:	2701      	movs	r7, #1
    7d34:	2e05      	cmp	r6, #5
    7d36:	d005      	beq.n	7d44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    7d38:	e008      	b.n	7d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x358>
    7d3a:	78a0      	ldrb	r0, [r4, #2]
    7d3c:	2702      	movs	r7, #2
    7d3e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7d42:	e001      	b.n	7d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    7d44:	78a0      	ldrb	r0, [r4, #2]
    7d46:	07c0      	lsls	r0, r0, #31
    7d48:	2800      	cmp	r0, #0
    7d4a:	d042      	beq.n	7dd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7d4c:	f1b9 0f00 	cmp.w	r9, #0
    7d50:	d13e      	bne.n	7dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7d52:	4822      	ldr	r0, [pc, #136]	; (7ddc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    7d54:	7b80      	ldrb	r0, [r0, #14]
    7d56:	b140      	cbz	r0, 7d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7d58:	f006 fa64 	bl	e224 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7d5c:	f888 0000 	strb.w	r0, [r8]
    7d60:	28ff      	cmp	r0, #255	; 0xff
    7d62:	d002      	beq.n	7d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x376>
    7d64:	f7fe fd36 	bl	67d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7d68:	4305      	orrs	r5, r0
    7d6a:	4e1d      	ldr	r6, [pc, #116]	; (7de0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>)
    7d6c:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7d70:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7d74:	6871      	ldr	r1, [r6, #4]
    7d76:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d7a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d7e:	f006 f9d4 	bl	e12a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7d82:	f898 1000 	ldrb.w	r1, [r8]
    7d86:	29ff      	cmp	r1, #255	; 0xff
    7d88:	d004      	beq.n	7d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    7d8a:	b990      	cbnz	r0, 7db2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7d8c:	7e60      	ldrb	r0, [r4, #25]
    7d8e:	4288      	cmp	r0, r1
    7d90:	d00f      	beq.n	7db2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7d92:	e008      	b.n	7da6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7d94:	b138      	cbz	r0, 7da6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    7d96:	6871      	ldr	r1, [r6, #4]
    7d98:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d9c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7da0:	f007 f8f8 	bl	ef94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7da4:	b128      	cbz	r0, 7db2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7da6:	2000      	movs	r0, #0
    7da8:	78a1      	ldrb	r1, [r4, #2]
    7daa:	0749      	lsls	r1, r1, #29
    7dac:	d503      	bpl.n	7db6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c2>
    7dae:	b990      	cbnz	r0, 7dd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7db0:	e00e      	b.n	7dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7db2:	2001      	movs	r0, #1
    7db4:	e7f8      	b.n	7da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b4>
    7db6:	b975      	cbnz	r5, 7dd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7db8:	7be0      	ldrb	r0, [r4, #15]
    7dba:	b108      	cbz	r0, 7dc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    7dbc:	42b8      	cmp	r0, r7
    7dbe:	d107      	bne.n	7dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3dc>
    7dc0:	6871      	ldr	r1, [r6, #4]
    7dc2:	f811 0b03 	ldrb.w	r0, [r1], #3
    7dc6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7dca:	f007 f8e3 	bl	ef94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7dce:	b110      	cbz	r0, 7dd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    7dd0:	2000      	movs	r0, #0
    7dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dd6:	2001      	movs	r0, #1
    7dd8:	e7fb      	b.n	7dd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7dda:	0000      	.short	0x0000
    7ddc:	20001130 	.word	0x20001130
    7de0:	20000114 	.word	0x20000114
    7de4:	b570      	push	{r4, r5, r6, lr}
    7de6:	4604      	mov	r4, r0
    7de8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7dea:	4d13      	ldr	r5, [pc, #76]	; (7e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>)
    7dec:	1c40      	adds	r0, r0, #1
    7dee:	62a0      	str	r0, [r4, #40]	; 0x28
    7df0:	7ba8      	ldrb	r0, [r5, #14]
    7df2:	2600      	movs	r6, #0
    7df4:	b120      	cbz	r0, 7e00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>
    7df6:	f003 fd23 	bl	b840 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7dfa:	f003 fb47 	bl	b48c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7dfe:	73ae      	strb	r6, [r5, #14]
    7e00:	702e      	strb	r6, [r5, #0]
    7e02:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7e06:	b108      	cbz	r0, 7e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x418>
    7e08:	2101      	movs	r1, #1
    7e0a:	e00f      	b.n	7e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    7e0c:	7b60      	ldrb	r0, [r4, #13]
    7e0e:	b160      	cbz	r0, 7e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    7e10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7e12:	4288      	cmp	r0, r1
    7e14:	d809      	bhi.n	7e2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    7e16:	2101      	movs	r1, #1
    7e18:	4620      	mov	r0, r4
    7e1a:	f007 fa14 	bl	f246 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7e1e:	78a0      	ldrb	r0, [r4, #2]
    7e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e24:	07c0      	lsls	r0, r0, #31
    7e26:	f7ff b90b 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7e2a:	2100      	movs	r1, #0
    7e2c:	4620      	mov	r0, r4
    7e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e32:	f007 ba08 	b.w	f246 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7e36:	0000      	.short	0x0000
    7e38:	20001130 	.word	0x20001130
    7e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e40:	4604      	mov	r4, r0
    7e42:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7e46:	4617      	mov	r7, r2
    7e48:	460d      	mov	r5, r1
    7e4a:	f88d 0000 	strb.w	r0, [sp]
    7e4e:	9800      	ldr	r0, [sp, #0]
    7e50:	9000      	str	r0, [sp, #0]
    7e52:	f89d 0000 	ldrb.w	r0, [sp]
    7e56:	b110      	cbz	r0, 7e5e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x46a>
    7e58:	f640 4124 	movw	r1, #3108	; 0xc24
    7e5c:	e054      	b.n	7f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    7e5e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7e62:	2600      	movs	r6, #0
    7e64:	8828      	ldrh	r0, [r5, #0]
    7e66:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d15c      	bne.n	7f28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>
    7e6e:	6928      	ldr	r0, [r5, #16]
    7e70:	f006 fa36 	bl	e2e0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7e74:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7e78:	8b28      	ldrh	r0, [r5, #24]
    7e7a:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    7e7e:	8b68      	ldrh	r0, [r5, #26]
    7e80:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    7e84:	f895 0185 	ldrb.w	r0, [r5, #389]	; 0x185
    7e88:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    7e8c:	7e21      	ldrb	r1, [r4, #24]
    7e8e:	f104 0849 	add.w	r8, r4, #73	; 0x49
    7e92:	b129      	cbz	r1, 7ea0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ac>
    7e94:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7e98:	4641      	mov	r1, r8
    7e9a:	f006 ff88 	bl	edae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7e9e:	b940      	cbnz	r0, 7eb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4be>
    7ea0:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7ea4:	b170      	cbz	r0, 7ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    7ea6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7eaa:	4641      	mov	r1, r8
    7eac:	f006 ff76 	bl	ed9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7eb0:	b140      	cbz	r0, 7ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    7eb2:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7eb6:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    7eba:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7ebe:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    7ec2:	e003      	b.n	7ecc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d8>
    7ec4:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    7ec8:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    7ecc:	4817      	ldr	r0, [pc, #92]	; (7f2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x538>)
    7ece:	2fff      	cmp	r7, #255	; 0xff
    7ed0:	6840      	ldr	r0, [r0, #4]
    7ed2:	7801      	ldrb	r1, [r0, #0]
    7ed4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7ed8:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7edc:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7ee0:	d015      	beq.n	7f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51a>
    7ee2:	67a1      	str	r1, [r4, #120]	; 0x78
    7ee4:	8880      	ldrh	r0, [r0, #4]
    7ee6:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7eea:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7eee:	1e51      	subs	r1, r2, #1
    7ef0:	4638      	mov	r0, r7
    7ef2:	f7fe fc55 	bl	67a0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7ef6:	b128      	cbz	r0, 7f04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
    7ef8:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7efc:	f040 0002 	orr.w	r0, r0, #2
    7f00:	7020      	strb	r0, [r4, #0]
    7f02:	e00a      	b.n	7f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    7f04:	f640 4145 	movw	r1, #3141	; 0xc45
    7f08:	202d      	movs	r0, #45	; 0x2d
    7f0a:	f7fc ff63 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f0e:	f844 1f6c 	str.w	r1, [r4, #108]!
    7f12:	8880      	ldrh	r0, [r0, #4]
    7f14:	80a0      	strh	r0, [r4, #4]
    7f16:	60e6      	str	r6, [r4, #12]
    7f18:	8226      	strh	r6, [r4, #16]
    7f1a:	8828      	ldrh	r0, [r5, #0]
    7f1c:	f7fd fb74 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7f20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f24:	f005 be29 	b.w	db7a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f2c:	20000114 	.word	0x20000114
    7f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f34:	27ff      	movs	r7, #255	; 0xff
    7f36:	4604      	mov	r4, r0
    7f38:	2601      	movs	r6, #1
    7f3a:	f88d 7000 	strb.w	r7, [sp]
    7f3e:	466a      	mov	r2, sp
    7f40:	2105      	movs	r1, #5
    7f42:	f7ff fee3 	bl	7d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7f46:	b170      	cbz	r0, 7f66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x572>
    7f48:	4d22      	ldr	r5, [pc, #136]	; (7fd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7f4a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7fd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>
    7f4e:	6869      	ldr	r1, [r5, #4]
    7f50:	f898 200f 	ldrb.w	r2, [r8, #15]
    7f54:	f108 0310 	add.w	r3, r8, #16
    7f58:	f811 0b03 	ldrb.w	r0, [r1], #3
    7f5c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f60:	f006 f8e3 	bl	e12a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    7f64:	b118      	cbz	r0, 7f6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57a>
    7f66:	2600      	movs	r6, #0
    7f68:	4630      	mov	r0, r6
    7f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f6e:	686a      	ldr	r2, [r5, #4]
    7f70:	69e0      	ldr	r0, [r4, #28]
    7f72:	7812      	ldrb	r2, [r2, #0]
    7f74:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7f78:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7f7c:	4011      	ands	r1, r2
    7f7e:	7001      	strb	r1, [r0, #0]
    7f80:	2201      	movs	r2, #1
    7f82:	4620      	mov	r0, r4
    7f84:	69e1      	ldr	r1, [r4, #28]
    7f86:	f000 f891 	bl	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    7f8a:	2300      	movs	r3, #0
    7f8c:	f89d 2000 	ldrb.w	r2, [sp]
    7f90:	4620      	mov	r0, r4
    7f92:	69e1      	ldr	r1, [r4, #28]
    7f94:	f7ff ff52 	bl	7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    7f98:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    7f9c:	f7ff f850 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7fa0:	2100      	movs	r1, #0
    7fa2:	f888 1000 	strb.w	r1, [r8]
    7fa6:	460a      	mov	r2, r1
    7fa8:	4621      	mov	r1, r4
    7faa:	69e0      	ldr	r0, [r4, #28]
    7fac:	f000 fa58 	bl	8460 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7fb0:	6868      	ldr	r0, [r5, #4]
    7fb2:	69e1      	ldr	r1, [r4, #28]
    7fb4:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7fb8:	f841 2f03 	str.w	r2, [r1, #3]!
    7fbc:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7fc0:	808a      	strh	r2, [r1, #4]
    7fc2:	7800      	ldrb	r0, [r0, #0]
    7fc4:	69e1      	ldr	r1, [r4, #28]
    7fc6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7fca:	7088      	strb	r0, [r1, #2]
    7fcc:	e7cc      	b.n	7f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    7fce:	0000      	.short	0x0000
    7fd0:	20001130 	.word	0x20001130
    7fd4:	20000114 	.word	0x20000114
    7fd8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7fdc:	4604      	mov	r4, r0
    7fde:	20ff      	movs	r0, #255	; 0xff
    7fe0:	f88d 0000 	strb.w	r0, [sp]
    7fe4:	2501      	movs	r5, #1
    7fe6:	466a      	mov	r2, sp
    7fe8:	2103      	movs	r1, #3
    7fea:	4620      	mov	r0, r4
    7fec:	f7ff fe8e 	bl	7d0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7ff0:	b328      	cbz	r0, 803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
    7ff2:	7b20      	ldrb	r0, [r4, #12]
    7ff4:	2700      	movs	r7, #0
    7ff6:	b168      	cbz	r0, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    7ff8:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7ffc:	f88d 0004 	strb.w	r0, [sp, #4]
    8000:	9801      	ldr	r0, [sp, #4]
    8002:	9001      	str	r0, [sp, #4]
    8004:	f89d 0004 	ldrb.w	r0, [sp, #4]
    8008:	b920      	cbnz	r0, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    800a:	f89d 1000 	ldrb.w	r1, [sp]
    800e:	4620      	mov	r0, r4
    8010:	f7ff fe3c 	bl	7c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>
    8014:	4e0c      	ldr	r6, [pc, #48]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    8016:	2104      	movs	r1, #4
    8018:	6870      	ldr	r0, [r6, #4]
    801a:	8007      	strh	r7, [r0, #0]
    801c:	f006 fc84 	bl	e928 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    8020:	4620      	mov	r0, r4
    8022:	f000 f88b 	bl	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    8026:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    8028:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    802a:	6870      	ldr	r0, [r6, #4]
    802c:	f006 fcb3 	bl	e996 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    8030:	4906      	ldr	r1, [pc, #24]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    8032:	2005      	movs	r0, #5
    8034:	7008      	strb	r0, [r1, #0]
    8036:	6870      	ldr	r0, [r6, #4]
    8038:	f003 febe 	bl	bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    803c:	e000      	b.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    803e:	2500      	movs	r5, #0
    8040:	4628      	mov	r0, r5
    8042:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    8046:	0000      	.short	0x0000
    8048:	20000114 	.word	0x20000114
    804c:	20001130 	.word	0x20001130
    8050:	b570      	push	{r4, r5, r6, lr}
    8052:	4604      	mov	r4, r0
    8054:	460e      	mov	r6, r1
    8056:	7e40      	ldrb	r0, [r0, #25]
    8058:	f7fe fb70 	bl	673c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    805c:	0005      	movs	r5, r0
    805e:	d019      	beq.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    8060:	2110      	movs	r1, #16
    8062:	f006 fac9 	bl	e5f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    8066:	2800      	cmp	r0, #0
    8068:	d114      	bne.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    806a:	2001      	movs	r0, #1
    806c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    8070:	f104 0157 	add.w	r1, r4, #87	; 0x57
    8074:	4632      	mov	r2, r6
    8076:	460c      	mov	r4, r1
    8078:	4628      	mov	r0, r5
    807a:	f006 f875 	bl	e168 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    807e:	4621      	mov	r1, r4
    8080:	4c05      	ldr	r4, [pc, #20]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    8082:	6860      	ldr	r0, [r4, #4]
    8084:	f006 fc6b 	bl	e95e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    8088:	6860      	ldr	r0, [r4, #4]
    808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    808e:	2101      	movs	r1, #1
    8090:	f006 bc6b 	b.w	e96a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8094:	bd70      	pop	{r4, r5, r6, pc}
    8096:	0000      	.short	0x0000
    8098:	20000114 	.word	0x20000114
    809c:	4802      	ldr	r0, [pc, #8]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    809e:	2101      	movs	r1, #1
    80a0:	6800      	ldr	r0, [r0, #0]
    80a2:	f7ff bb27 	b.w	76f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    80a6:	0000      	.short	0x0000
    80a8:	20000114 	.word	0x20000114
    80ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80b0:	4e21      	ldr	r6, [pc, #132]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    80b2:	4680      	mov	r8, r0
    80b4:	460c      	mov	r4, r1
    80b6:	6870      	ldr	r0, [r6, #4]
    80b8:	4615      	mov	r5, r2
    80ba:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    80be:	6161      	str	r1, [r4, #20]
    80c0:	8881      	ldrh	r1, [r0, #4]
    80c2:	83a1      	strh	r1, [r4, #28]
    80c4:	7981      	ldrb	r1, [r0, #6]
    80c6:	77a1      	strb	r1, [r4, #30]
    80c8:	8940      	ldrh	r0, [r0, #10]
    80ca:	f006 f905 	bl	e2d8 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    80ce:	4607      	mov	r7, r0
    80d0:	6120      	str	r0, [r4, #16]
    80d2:	6870      	ldr	r0, [r6, #4]
    80d4:	4639      	mov	r1, r7
    80d6:	7d80      	ldrb	r0, [r0, #22]
    80d8:	f006 fa89 	bl	e5ee <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    80dc:	8420      	strh	r0, [r4, #32]
    80de:	6870      	ldr	r0, [r6, #4]
    80e0:	4639      	mov	r1, r7
    80e2:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    80e6:	f006 fa7e 	bl	e5e6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    80ea:	6260      	str	r0, [r4, #36]	; 0x24
    80ec:	6870      	ldr	r0, [r6, #4]
    80ee:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    80f2:	8321      	strh	r1, [r4, #24]
    80f4:	8841      	ldrh	r1, [r0, #2]
    80f6:	8361      	strh	r1, [r4, #26]
    80f8:	6841      	ldr	r1, [r0, #4]
    80fa:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    80fe:	7a01      	ldrb	r1, [r0, #8]
    8100:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    8104:	7a41      	ldrb	r1, [r0, #9]
    8106:	f001 011f 	and.w	r1, r1, #31
    810a:	f884 1099 	strb.w	r1, [r4, #153]	; 0x99
    810e:	7a40      	ldrb	r0, [r0, #9]
    8110:	0940      	lsrs	r0, r0, #5
    8112:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
    8116:	f104 0066 	add.w	r0, r4, #102	; 0x66
    811a:	7205      	strb	r5, [r0, #8]
    811c:	7245      	strb	r5, [r0, #9]
    811e:	21ff      	movs	r1, #255	; 0xff
    8120:	7281      	strb	r1, [r0, #10]
    8122:	2100      	movs	r1, #0
    8124:	3836      	subs	r0, #54	; 0x36
    8126:	f006 fdac 	bl	ec82 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    812a:	f898 000e 	ldrb.w	r0, [r8, #14]
    812e:	f884 0072 	strb.w	r0, [r4, #114]	; 0x72
    8132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8136:	0000      	.short	0x0000
    8138:	20000114 	.word	0x20000114
    813c:	b570      	push	{r4, r5, r6, lr}
    813e:	4d07      	ldr	r5, [pc, #28]	; (815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>)
    8140:	4604      	mov	r4, r0
    8142:	f100 0149 	add.w	r1, r0, #73	; 0x49
    8146:	6868      	ldr	r0, [r5, #4]
    8148:	f006 fc16 	bl	e978 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    814c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    8150:	6868      	ldr	r0, [r5, #4]
    8152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8156:	f006 bc15 	b.w	e984 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    815a:	0000      	.short	0x0000
    815c:	20000114 	.word	0x20000114
    8160:	00555555 	.word	0x00555555
    8164:	0000797d 	.word	0x0000797d
    8168:	00007809 	.word	0x00007809
    816c:	000078f9 	.word	0x000078f9
    8170:	00000000 	.word	0x00000000
    8174:	000078d1 	.word	0x000078d1
    8178:	00007929 	.word	0x00007929
    817c:	0000efbb 	.word	0x0000efbb
    8180:	0000efc1 	.word	0x0000efc1
    8184:	00007b89 	.word	0x00007b89
    8188:	00007bad 	.word	0x00007bad
    818c:	0000809d 	.word	0x0000809d
    8190:	00008180 	.word	0x00008180
    8194:	00008178 	.word	0x00008178
    8198:	00008174 	.word	0x00008174

0000819c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    819c:	b510      	push	{r4, lr}
    819e:	1e42      	subs	r2, r0, #1
    81a0:	2a02      	cmp	r2, #2
    81a2:	d901      	bls.n	81a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    81a4:	21ca      	movs	r1, #202	; 0xca
    81a6:	e009      	b.n	81bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    81a8:	1e40      	subs	r0, r0, #1
    81aa:	2910      	cmp	r1, #16
    81ac:	d009      	beq.n	81c2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    81ae:	2912      	cmp	r1, #18
    81b0:	d00c      	beq.n	81cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    81b2:	2913      	cmp	r1, #19
    81b4:	d00a      	beq.n	81cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    81b6:	2915      	cmp	r1, #21
    81b8:	d005      	beq.n	81c6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    81ba:	21d8      	movs	r1, #216	; 0xd8
    81bc:	202f      	movs	r0, #47	; 0x2f
    81be:	f7fc fe09 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81c2:	4905      	ldr	r1, [pc, #20]	; (81d8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    81c4:	e004      	b.n	81d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    81c6:	4904      	ldr	r1, [pc, #16]	; (81d8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    81c8:	1d89      	adds	r1, r1, #6
    81ca:	e001      	b.n	81d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    81cc:	4902      	ldr	r1, [pc, #8]	; (81d8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    81ce:	1f89      	subs	r1, r1, #6
    81d0:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    81d4:	bd10      	pop	{r4, pc}
    81d6:	0000      	.short	0x0000
    81d8:	0000f210 	.word	0x0000f210

000081dc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    81dc:	1e42      	subs	r2, r0, #1
    81de:	b510      	push	{r4, lr}
    81e0:	b2d2      	uxtb	r2, r2
    81e2:	2a01      	cmp	r2, #1
    81e4:	d903      	bls.n	81ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    81e6:	291d      	cmp	r1, #29
    81e8:	d001      	beq.n	81ee <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    81ea:	21ee      	movs	r1, #238	; 0xee
    81ec:	e00d      	b.n	820a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    81ee:	2913      	cmp	r1, #19
    81f0:	d013      	beq.n	821a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    81f2:	dc04      	bgt.n	81fe <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    81f4:	2910      	cmp	r1, #16
    81f6:	d00b      	beq.n	8210 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    81f8:	2912      	cmp	r1, #18
    81fa:	d104      	bne.n	8206 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    81fc:	e00d      	b.n	821a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    81fe:	2915      	cmp	r1, #21
    8200:	d008      	beq.n	8214 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    8202:	291d      	cmp	r1, #29
    8204:	d00e      	beq.n	8224 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    8206:	f44f 7181 	mov.w	r1, #258	; 0x102
    820a:	202f      	movs	r0, #47	; 0x2f
    820c:	f7fc fde2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8210:	4807      	ldr	r0, [pc, #28]	; (8230 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8212:	e004      	b.n	821e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8214:	4806      	ldr	r0, [pc, #24]	; (8230 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8216:	3008      	adds	r0, #8
    8218:	e001      	b.n	821e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    821a:	4805      	ldr	r0, [pc, #20]	; (8230 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    821c:	1d00      	adds	r0, r0, #4
    821e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8222:	bd10      	pop	{r4, pc}
    8224:	f240 315a 	movw	r1, #858	; 0x35a
    8228:	fb10 f001 	smulbb	r0, r0, r1
    822c:	bd10      	pop	{r4, pc}
    822e:	0000      	.short	0x0000
    8230:	0000f1fe 	.word	0x0000f1fe

00008234 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    8234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8238:	4604      	mov	r4, r0
    823a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    823e:	4615      	mov	r5, r2
    8240:	460f      	mov	r7, r1
    8242:	2800      	cmp	r0, #0
    8244:	d157      	bne.n	82f6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    8246:	4621      	mov	r1, r4
    8248:	4841      	ldr	r0, [pc, #260]	; (8350 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    824a:	f7fb f8bf 	bl	33cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    824e:	4606      	mov	r6, r0
    8250:	2820      	cmp	r0, #32
    8252:	d050      	beq.n	82f6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    8254:	2234      	movs	r2, #52	; 0x34
    8256:	2100      	movs	r1, #0
    8258:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    825c:	f004 fdfb 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8260:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    8264:	2601      	movs	r6, #1
    8266:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    826a:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    826e:	b13f      	cbz	r7, 8280 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    8270:	2000      	movs	r0, #0
    8272:	f000 fbfb 	bl	8a6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    8276:	f000 0007 	and.w	r0, r0, #7
    827a:	1c40      	adds	r0, r0, #1
    827c:	f887 0134 	strb.w	r0, [r7, #308]	; 0x134
    8280:	4620      	mov	r0, r4
    8282:	f007 f9a8 	bl	f5d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    8286:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    828a:	2002      	movs	r0, #2
    828c:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    8290:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    8294:	2700      	movs	r7, #0
    8296:	f804 7fb8 	strb.w	r7, [r4, #184]!
    829a:	f7fa fafb 	bl	2894 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    829e:	8921      	ldrh	r1, [r4, #8]
    82a0:	3cb8      	subs	r4, #184	; 0xb8
    82a2:	4288      	cmp	r0, r1
    82a4:	d800      	bhi.n	82a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    82a6:	4608      	mov	r0, r1
    82a8:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    82ac:	fa1f f880 	uxth.w	r8, r0
    82b0:	4620      	mov	r0, r4
    82b2:	f006 fe24 	bl	eefe <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    82b6:	b308      	cbz	r0, 82fc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    82b8:	f008 fc1e 	bl	10af8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    82bc:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    82c0:	b281      	uxth	r1, r0
    82c2:	4628      	mov	r0, r5
    82c4:	f004 fc0c 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    82c8:	4428      	add	r0, r5
    82ca:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    82ce:	34a4      	adds	r4, #164	; 0xa4
    82d0:	f004 fbd2 	bl	ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    82d4:	4641      	mov	r1, r8
    82d6:	f7fa f979 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    82da:	6220      	str	r0, [r4, #32]
    82dc:	f804 7c03 	strb.w	r7, [r4, #-3]
    82e0:	7126      	strb	r6, [r4, #4]
    82e2:	2001      	movs	r0, #1
    82e4:	f006 ff84 	bl	f1f0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    82e8:	f200 100d 	addw	r0, r0, #269	; 0x10d
    82ec:	1a28      	subs	r0, r5, r0
    82ee:	62a7      	str	r7, [r4, #40]	; 0x28
    82f0:	60a0      	str	r0, [r4, #8]
    82f2:	3ca4      	subs	r4, #164	; 0xa4
    82f4:	e017      	b.n	8326 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    82f6:	200c      	movs	r0, #12
    82f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82fc:	4620      	mov	r0, r4
    82fe:	f007 f8bd 	bl	f47c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    8302:	f844 0fbc 	str.w	r0, [r4, #188]!
    8306:	f804 6c1b 	strb.w	r6, [r4, #-27]
    830a:	f004 fbb5 	bl	ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    830e:	4606      	mov	r6, r0
    8310:	2000      	movs	r0, #0
    8312:	f007 fa0f 	bl	f734 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    8316:	eb00 0108 	add.w	r1, r0, r8
    831a:	4630      	mov	r0, r6
    831c:	f7fa f956 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8320:	6125      	str	r5, [r4, #16]
    8322:	60a0      	str	r0, [r4, #8]
    8324:	3cbc      	subs	r4, #188	; 0xbc
    8326:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    832a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    832e:	f007 f950 	bl	f5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    8332:	b138      	cbz	r0, 8344 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    8334:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    8338:	2100      	movs	r1, #0
    833a:	4620      	mov	r0, r4
    833c:	f006 fe0b 	bl	ef56 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8340:	2000      	movs	r0, #0
    8342:	e7d9      	b.n	82f8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    8344:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    8348:	2030      	movs	r0, #48	; 0x30
    834a:	f7fc fd43 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    834e:	0000      	.short	0x0000
    8350:	0000f749 	.word	0x0000f749

00008354 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    8354:	4808      	ldr	r0, [pc, #32]	; (8378 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    8356:	b510      	push	{r4, lr}
    8358:	2100      	movs	r1, #0
    835a:	7001      	strb	r1, [r0, #0]
    835c:	2201      	movs	r2, #1
    835e:	7082      	strb	r2, [r0, #2]
    8360:	7041      	strb	r1, [r0, #1]
    8362:	3018      	adds	r0, #24
    8364:	f006 fd0d 	bl	ed82 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8368:	4803      	ldr	r0, [pc, #12]	; (8378 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    836a:	3020      	adds	r0, #32
    836c:	f006 fd09 	bl	ed82 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    8370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8374:	f006 bfa7 	b.w	f2c6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    8378:	20000124 	.word	0x20000124

0000837c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    837c:	4901      	ldr	r1, [pc, #4]	; (8384 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    837e:	7008      	strb	r0, [r1, #0]
    8380:	4770      	bx	lr
    8382:	0000      	.short	0x0000
    8384:	20000124 	.word	0x20000124

00008388 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    8388:	4905      	ldr	r1, [pc, #20]	; (83a0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    838a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    838e:	fbb1 f1f2 	udiv	r1, r1, r2
    8392:	b510      	push	{r4, lr}
    8394:	f201 2191 	addw	r1, r1, #657	; 0x291
    8398:	f006 fc8c 	bl	ecb4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    839c:	b280      	uxth	r0, r0
    839e:	bd10      	pop	{r4, pc}
    83a0:	0001527d 	.word	0x0001527d

000083a4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    83a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83a8:	4c10      	ldr	r4, [pc, #64]	; (83ec <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    83aa:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    83ae:	f003 fc0b 	bl	bbc8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    83b2:	4606      	mov	r6, r0
    83b4:	7820      	ldrb	r0, [r4, #0]
    83b6:	b128      	cbz	r0, 83c4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    83b8:	4632      	mov	r2, r6
    83ba:	4639      	mov	r1, r7
    83bc:	4628      	mov	r0, r5
    83be:	f005 ff95 	bl	e2ec <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    83c2:	4605      	mov	r5, r0
    83c4:	6860      	ldr	r0, [r4, #4]
    83c6:	4285      	cmp	r5, r0
    83c8:	d005      	beq.n	83d6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    83ca:	68e1      	ldr	r1, [r4, #12]
    83cc:	1a28      	subs	r0, r5, r0
    83ce:	4408      	add	r0, r1
    83d0:	60e0      	str	r0, [r4, #12]
    83d2:	f7fb f903 	bl	35dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    83d6:	6065      	str	r5, [r4, #4]
    83d8:	42ae      	cmp	r6, r5
    83da:	d801      	bhi.n	83e0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    83dc:	7860      	ldrb	r0, [r4, #1]
    83de:	b110      	cbz	r0, 83e6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    83e0:	2000      	movs	r0, #0
    83e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83e6:	2001      	movs	r0, #1
    83e8:	e7fb      	b.n	83e2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    83ea:	0000      	.short	0x0000
    83ec:	20000124 	.word	0x20000124

000083f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    83f0:	b510      	push	{r4, lr}
    83f2:	4604      	mov	r4, r0
    83f4:	2906      	cmp	r1, #6
    83f6:	d22c      	bcs.n	8452 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62>
    83f8:	e8df f001 	tbb	[pc, r1]
    83fc:	0e030b05 	.word	0x0e030b05
    8400:	260f      	.short	0x260f
    8402:	2100      	movs	r1, #0
    8404:	e000      	b.n	8408 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    8406:	2101      	movs	r1, #1
    8408:	4620      	mov	r0, r4
    840a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    840e:	f000 b8f9 	b.w	8604 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8412:	2003      	movs	r0, #3
    8414:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8418:	bd10      	pop	{r4, pc}
    841a:	f003 fbe3 	bl	bbe4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    841e:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
    8422:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8426:	f003 fcab 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    842a:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    842e:	1a09      	subs	r1, r1, r0
    8430:	480a      	ldr	r0, [pc, #40]	; (845c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6c>)
    8432:	6842      	ldr	r2, [r0, #4]
    8434:	440a      	add	r2, r1
    8436:	6042      	str	r2, [r0, #4]
    8438:	6882      	ldr	r2, [r0, #8]
    843a:	4411      	add	r1, r2
    843c:	6081      	str	r1, [r0, #8]
    843e:	4620      	mov	r0, r4
    8440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8444:	f007 b858 	b.w	f4f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x204>
    8448:	4620      	mov	r0, r4
    844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    844e:	f007 b83e 	b.w	f4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    8452:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8456:	2030      	movs	r0, #48	; 0x30
    8458:	f7fc fcbc 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    845c:	20000124 	.word	0x20000124

00008460 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    8460:	b570      	push	{r4, r5, r6, lr}
    8462:	460c      	mov	r4, r1
    8464:	4605      	mov	r5, r0
    8466:	b112      	cbz	r2, 846e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    8468:	f240 7182 	movw	r1, #1922	; 0x782
    846c:	e010      	b.n	8490 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    846e:	f003 fbab 	bl	bbc8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8472:	4601      	mov	r1, r0
    8474:	2200      	movs	r2, #0
    8476:	4620      	mov	r0, r4
    8478:	f007 f912 	bl	f6a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3ac>
    847c:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    8480:	462a      	mov	r2, r5
    8482:	4905      	ldr	r1, [pc, #20]	; (8498 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    8484:	f7fa fe62 	bl	314c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8488:	2800      	cmp	r0, #0
    848a:	d104      	bne.n	8496 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    848c:	f240 716b 	movw	r1, #1899	; 0x76b
    8490:	2030      	movs	r0, #48	; 0x30
    8492:	f7fc fc9f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8496:	bd70      	pop	{r4, r5, r6, pc}
    8498:	0000f7e9 	.word	0x0000f7e9
    849c:	b510      	push	{r4, lr}
    849e:	280c      	cmp	r0, #12
    84a0:	d304      	bcc.n	84ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    84a2:	f240 3127 	movw	r1, #807	; 0x327
    84a6:	2006      	movs	r0, #6
    84a8:	f7fc fc94 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ac:	4901      	ldr	r1, [pc, #4]	; (84b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    84ae:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    84b2:	bd10      	pop	{r4, pc}
    84b4:	0000f8ca 	.word	0x0000f8ca
    84b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    84ba:	4c18      	ldr	r4, [pc, #96]	; (851c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    84bc:	2001      	movs	r0, #1
    84be:	7060      	strb	r0, [r4, #1]
    84c0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    84c4:	e00b      	b.n	84de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    84c6:	2100      	movs	r1, #0
    84c8:	f005 fc70 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    84cc:	0006      	movs	r6, r0
    84ce:	d010      	beq.n	84f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    84d0:	f896 0178 	ldrb.w	r0, [r6, #376]	; 0x178
    84d4:	f7fa fe6c 	bl	31b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    84d8:	4630      	mov	r0, r6
    84da:	f007 f8d4 	bl	f686 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    84de:	4669      	mov	r1, sp
    84e0:	2000      	movs	r0, #0
    84e2:	f005 fc6d 	bl	ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    84e6:	b180      	cbz	r0, 850a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    84e8:	f44f 7187 	mov.w	r1, #270	; 0x10e
    84ec:	2030      	movs	r0, #48	; 0x30
    84ee:	f7fc fc71 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84f2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    84f6:	e7f9      	b.n	84ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    84f8:	9802      	ldr	r0, [sp, #8]
    84fa:	b130      	cbz	r0, 850a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    84fc:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    8500:	b119      	cbz	r1, 850a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8502:	8800      	ldrh	r0, [r0, #0]
    8504:	42a8      	cmp	r0, r5
    8506:	d1de      	bne.n	84c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8508:	e004      	b.n	8514 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    850a:	4668      	mov	r0, sp
    850c:	f7fc fe9a 	bl	5244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8510:	2800      	cmp	r0, #0
    8512:	d0f1      	beq.n	84f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8514:	2000      	movs	r0, #0
    8516:	7060      	strb	r0, [r4, #1]
    8518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    851a:	0000      	.short	0x0000
    851c:	20000124 	.word	0x20000124
    8520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8524:	4604      	mov	r4, r0
    8526:	4836      	ldr	r0, [pc, #216]	; (8600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    8528:	461e      	mov	r6, r3
    852a:	4690      	mov	r8, r2
    852c:	7880      	ldrb	r0, [r0, #2]
    852e:	4689      	mov	r9, r1
    8530:	2500      	movs	r5, #0
    8532:	b368      	cbz	r0, 8590 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8534:	f7fc f8c6 	bl	46c4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8538:	b350      	cbz	r0, 8590 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    853a:	f8b4 0130 	ldrh.w	r0, [r4, #304]	; 0x130
    853e:	2802      	cmp	r0, #2
    8540:	d326      	bcc.n	8590 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8542:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8546:	2802      	cmp	r0, #2
    8548:	d022      	beq.n	8590 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    854a:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    854e:	b9f8      	cbnz	r0, 8590 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    8550:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    8554:	f7ff ffa2 	bl	849c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    8558:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    855c:	b281      	uxth	r1, r0
    855e:	8031      	strh	r1, [r6, #0]
    8560:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8564:	2700      	movs	r7, #0
    8566:	2801      	cmp	r0, #1
    8568:	d015      	beq.n	8596 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    856a:	6920      	ldr	r0, [r4, #16]
    856c:	f004 fab8 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8570:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    8574:	b280      	uxth	r0, r0
    8576:	4442      	add	r2, r8
    8578:	eba2 0109 	sub.w	r1, r2, r9
    857c:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    8580:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8584:	1a82      	subs	r2, r0, r2
    8586:	fb01 7502 	mla	r5, r1, r2, r7
    858a:	2001      	movs	r0, #1
    858c:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    8590:	4628      	mov	r0, r5
    8592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8596:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    859a:	2803      	cmp	r0, #3
    859c:	d02c      	beq.n	85f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    859e:	2101      	movs	r1, #1
    85a0:	2000      	movs	r0, #0
    85a2:	f005 ff5d 	bl	e460 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    85a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85a8:	1847      	adds	r7, r0, r1
    85aa:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    85ae:	8831      	ldrh	r1, [r6, #0]
    85b0:	34e0      	adds	r4, #224	; 0xe0
    85b2:	f004 fa95 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    85b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    85b8:	6e21      	ldr	r1, [r4, #96]	; 0x60
    85ba:	1a82      	subs	r2, r0, r2
    85bc:	fb01 5502 	mla	r5, r1, r2, r5
    85c0:	65a0      	str	r0, [r4, #88]	; 0x58
    85c2:	8831      	ldrh	r1, [r6, #0]
    85c4:	4638      	mov	r0, r7
    85c6:	f004 fa8b 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    85ca:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    85cc:	66a0      	str	r0, [r4, #104]	; 0x68
    85ce:	1a41      	subs	r1, r0, r1
    85d0:	440d      	add	r5, r1
    85d2:	8831      	ldrh	r1, [r6, #0]
    85d4:	f854 0cd0 	ldr.w	r0, [r4, #-208]
    85d8:	f004 fa82 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    85dc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    85de:	4442      	add	r2, r8
    85e0:	eba2 0109 	sub.w	r1, r2, r9
    85e4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    85e6:	1a89      	subs	r1, r1, r2
    85e8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    85ea:	1e49      	subs	r1, r1, #1
    85ec:	1a82      	subs	r2, r0, r2
    85ee:	fb01 5502 	mla	r5, r1, r2, r5
    85f2:	66e0      	str	r0, [r4, #108]	; 0x6c
    85f4:	3ce0      	subs	r4, #224	; 0xe0
    85f6:	e7c8      	b.n	858a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    85f8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    85fc:	e7d3      	b.n	85a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    85fe:	0000      	.short	0x0000
    8600:	20000124 	.word	0x20000124
    8604:	b538      	push	{r3, r4, r5, lr}
    8606:	2500      	movs	r5, #0
    8608:	4604      	mov	r4, r0
    860a:	2901      	cmp	r1, #1
    860c:	d102      	bne.n	8614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    860e:	4811      	ldr	r0, [pc, #68]	; (8654 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    8610:	7840      	ldrb	r0, [r0, #1]
    8612:	b178      	cbz	r0, 8634 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    8614:	2004      	movs	r0, #4
    8616:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    861a:	bf00      	nop
    861c:	f006 ff65 	bl	f4ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    8620:	f8a4 5176 	strh.w	r5, [r4, #374]	; 0x176
    8624:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8628:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    862c:	f504 749d 	add.w	r4, r4, #314	; 0x13a
    8630:	77e5      	strb	r5, [r4, #31]
    8632:	bd38      	pop	{r3, r4, r5, pc}
    8634:	9500      	str	r5, [sp, #0]
    8636:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    863a:	2301      	movs	r3, #1
    863c:	2200      	movs	r2, #0
    863e:	4620      	mov	r0, r4
    8640:	f000 f80a 	bl	8658 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8644:	2800      	cmp	r0, #0
    8646:	d0e9      	beq.n	861c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    8648:	f240 61cd 	movw	r1, #1741	; 0x6cd
    864c:	2030      	movs	r0, #48	; 0x30
    864e:	f7fc fbc1 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8652:	0000      	.short	0x0000
    8654:	20000124 	.word	0x20000124
    8658:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    865c:	4604      	mov	r4, r0
    865e:	b085      	sub	sp, #20
    8660:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    8664:	4699      	mov	r9, r3
    8666:	e9cd 3000 	strd	r3, r0, [sp]
    866a:	460f      	mov	r7, r1
    866c:	f008 fa44 	bl	10af8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8670:	4605      	mov	r5, r0
    8672:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    8676:	f7ff ff11 	bl	849c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    867a:	4428      	add	r0, r5
    867c:	f8ad 0008 	strh.w	r0, [sp, #8]
    8680:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8684:	280d      	cmp	r0, #13
    8686:	d004      	beq.n	8692 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    8688:	2000      	movs	r0, #0
    868a:	9003      	str	r0, [sp, #12]
    868c:	9807      	ldr	r0, [sp, #28]
    868e:	b110      	cbz	r0, 8696 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    8690:	e02e      	b.n	86f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8692:	2001      	movs	r0, #1
    8694:	e7f9      	b.n	868a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    8696:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    869a:	2803      	cmp	r0, #3
    869c:	d128      	bne.n	86f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    869e:	9803      	ldr	r0, [sp, #12]
    86a0:	b330      	cbz	r0, 86f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    86a2:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    86a6:	42b8      	cmp	r0, r7
    86a8:	d122      	bne.n	86f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    86aa:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    86ae:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    86b2:	6920      	ldr	r0, [r4, #16]
    86b4:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    86b8:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    86bc:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    86c0:	4408      	add	r0, r1
    86c2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
    86c6:	4620      	mov	r0, r4
    86c8:	f007 f91f 	bl	f90a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    86cc:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
    86d0:	6260      	str	r0, [r4, #36]	; 0x24
    86d2:	f8b4 01a6 	ldrh.w	r0, [r4, #422]	; 0x1a6
    86d6:	8420      	strh	r0, [r4, #32]
    86d8:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    86dc:	6120      	str	r0, [r4, #16]
    86de:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    86e2:	8320      	strh	r0, [r4, #24]
    86e4:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    86e8:	8360      	strh	r0, [r4, #26]
    86ea:	2002      	movs	r0, #2
    86ec:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    86f0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    86f4:	f504 75ae 	add.w	r5, r4, #348	; 0x15c
    86f8:	1a38      	subs	r0, r7, r0
    86fa:	fa0f fa80 	sxth.w	sl, r0
    86fe:	f8b4 0174 	ldrh.w	r0, [r4, #372]	; 0x174
    8702:	1a38      	subs	r0, r7, r0
    8704:	fa0f f880 	sxth.w	r8, r0
    8708:	f1b8 0f00 	cmp.w	r8, #0
    870c:	da06      	bge.n	871c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    870e:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    8712:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8716:	2001      	movs	r0, #1
    8718:	46d0      	mov	r8, sl
    871a:	9000      	str	r0, [sp, #0]
    871c:	ab02      	add	r3, sp, #8
    871e:	4652      	mov	r2, sl
    8720:	4641      	mov	r1, r8
    8722:	4620      	mov	r0, r4
    8724:	f7ff fefc 	bl	8520 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8728:	9004      	str	r0, [sp, #16]
    872a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    872e:	f8df b338 	ldr.w	fp, [pc, #824]	; 8a68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    8732:	b140      	cbz	r0, 8746 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    8734:	2801      	cmp	r0, #1
    8736:	d07d      	beq.n	8834 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    8738:	2802      	cmp	r0, #2
    873a:	d052      	beq.n	87e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    873c:	2803      	cmp	r0, #3
    873e:	d07a      	beq.n	8836 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    8740:	f240 5151 	movw	r1, #1361	; 0x551
    8744:	e18c      	b.n	8a60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8746:	2101      	movs	r1, #1
    8748:	2000      	movs	r0, #0
    874a:	f005 fe89 	bl	e460 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    874e:	4606      	mov	r6, r0
    8750:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8752:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8756:	4430      	add	r0, r6
    8758:	f004 f9c2 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    875c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    8760:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8764:	6920      	ldr	r0, [r4, #16]
    8766:	f004 f9bb 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    876a:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    876e:	a901      	add	r1, sp, #4
    8770:	4668      	mov	r0, sp
    8772:	f003 f991 	bl	ba98 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    8776:	e9dd 1200 	ldrd	r1, r2, [sp]
    877a:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    877e:	f7fa ffe3 	bl	3748 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    8782:	4682      	mov	sl, r0
    8784:	4620      	mov	r0, r4
    8786:	f006 fea2 	bl	f4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    878a:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    878e:	f8d4 817c 	ldr.w	r8, [r4, #380]	; 0x17c
    8792:	f003 fb21 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8796:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    879a:	4401      	add	r1, r0
    879c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87a0:	fbb1 f0f0 	udiv	r0, r1, r0
    87a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    87a6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    87aa:	4431      	add	r1, r6
    87ac:	1a08      	subs	r0, r1, r0
    87ae:	1a81      	subs	r1, r0, r2
    87b0:	4441      	add	r1, r8
    87b2:	3920      	subs	r1, #32
    87b4:	eba1 060a 	sub.w	r6, r1, sl
    87b8:	0050      	lsls	r0, r2, #1
    87ba:	8c21      	ldrh	r1, [r4, #32]
    87bc:	3060      	adds	r0, #96	; 0x60
    87be:	4401      	add	r1, r0
    87c0:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    87c4:	f006 fef3 	bl	f5ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    87c8:	3022      	adds	r0, #34	; 0x22
    87ca:	f8cb 0010 	str.w	r0, [fp, #16]
    87ce:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
    87d2:	4659      	mov	r1, fp
    87d4:	1a30      	subs	r0, r6, r0
    87d6:	f5b0 7fdc 	cmp.w	r0, #440	; 0x1b8
    87da:	d859      	bhi.n	8890 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    87dc:	f240 41ea 	movw	r1, #1258	; 0x4ea
    87e0:	e13e      	b.n	8a60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    87e2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    87e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    87e8:	4408      	add	r0, r1
    87ea:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    87ee:	f004 f977 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    87f2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    87f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    87fa:	6920      	ldr	r0, [r4, #16]
    87fc:	f004 f970 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8800:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    8804:	4620      	mov	r0, r4
    8806:	f006 fe62 	bl	f4ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1da>
    880a:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    880e:	bb10      	cbnz	r0, 8856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8810:	f1b9 0f00 	cmp.w	r9, #0
    8814:	d01f      	beq.n	8856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8816:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
    881a:	4640      	mov	r0, r8
    881c:	f003 fadc 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8820:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8824:	4401      	add	r1, r0
    8826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    882a:	fbb1 f0f0 	udiv	r0, r1, r0
    882e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8832:	e001      	b.n	8838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    8834:	e02d      	b.n	8892 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    8836:	e049      	b.n	88cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    8838:	4408      	add	r0, r1
    883a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    883c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8840:	4411      	add	r1, r2
    8842:	1a0e      	subs	r6, r1, r0
    8844:	4640      	mov	r0, r8
    8846:	f003 fa9b 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    884a:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    884e:	1a08      	subs	r0, r1, r0
    8850:	4406      	add	r6, r0
    8852:	3e20      	subs	r6, #32
    8854:	e006      	b.n	8864 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    8856:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8858:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    885c:	4408      	add	r0, r1
    885e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    8862:	1a46      	subs	r6, r0, r1
    8864:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    8868:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    886c:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    8870:	fb01 0002 	mla	r0, r1, r2, r0
    8874:	0040      	lsls	r0, r0, #1
    8876:	8c21      	ldrh	r1, [r4, #32]
    8878:	3060      	adds	r0, #96	; 0x60
    887a:	4401      	add	r1, r0
    887c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8880:	f006 fe95 	bl	f5ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8884:	f8cb 0010 	str.w	r0, [fp, #16]
    8888:	2001      	movs	r0, #1
    888a:	4659      	mov	r1, fp
    888c:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    8890:	e062      	b.n	8958 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    8892:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8896:	6920      	ldr	r0, [r4, #16]
    8898:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
    889c:	1a46      	subs	r6, r0, r1
    889e:	eb02 000a 	add.w	r0, r2, sl
    88a2:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    88a6:	f8d4 c138 	ldr.w	ip, [r4, #312]	; 0x138
    88aa:	1a80      	subs	r0, r0, r2
    88ac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    88b0:	1e40      	subs	r0, r0, #1
    88b2:	fb0c 3202 	mla	r2, ip, r2, r3
    88b6:	fb00 2001 	mla	r0, r0, r1, r2
    88ba:	0040      	lsls	r0, r0, #1
    88bc:	8c21      	ldrh	r1, [r4, #32]
    88be:	3060      	adds	r0, #96	; 0x60
    88c0:	4401      	add	r1, r0
    88c2:	fb06 f608 	mul.w	r6, r6, r8
    88c6:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    88ca:	e040      	b.n	894e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    88cc:	6920      	ldr	r0, [r4, #16]
    88ce:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    88d2:	fb00 f008 	mul.w	r0, r0, r8
    88d6:	fb08 0611 	mls	r6, r8, r1, r0
    88da:	f894 0085 	ldrb.w	r0, [r4, #133]	; 0x85
    88de:	2824      	cmp	r0, #36	; 0x24
    88e0:	d003      	beq.n	88ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    88e2:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    88e6:	2824      	cmp	r0, #36	; 0x24
    88e8:	d109      	bne.n	88fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    88ea:	f8b4 01a4 	ldrh.w	r0, [r4, #420]	; 0x1a4
    88ee:	1a38      	subs	r0, r7, r0
    88f0:	b200      	sxth	r0, r0
    88f2:	2800      	cmp	r0, #0
    88f4:	db03      	blt.n	88fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    88f6:	f894 01a7 	ldrb.w	r0, [r4, #423]	; 0x1a7
    88fa:	b100      	cbz	r0, 88fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    88fc:	9001      	str	r0, [sp, #4]
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	b1d8      	cbz	r0, 893a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8902:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
    8906:	b9c0      	cbnz	r0, 893a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8908:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
    890c:	2800      	cmp	r0, #0
    890e:	d07d      	beq.n	8a0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    8910:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8914:	f003 fa60 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8918:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    891c:	4401      	add	r1, r0
    891e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8922:	fbb1 f0f0 	udiv	r0, r1, r0
    8926:	1a36      	subs	r6, r6, r0
    8928:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    892c:	f003 fa28 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8930:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    8934:	1a08      	subs	r0, r1, r0
    8936:	4406      	add	r6, r0
    8938:	3e20      	subs	r6, #32
    893a:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
    893e:	eb01 000a 	add.w	r0, r1, sl
    8942:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8946:	4348      	muls	r0, r1
    8948:	0041      	lsls	r1, r0, #1
    894a:	3160      	adds	r1, #96	; 0x60
    894c:	9801      	ldr	r0, [sp, #4]
    894e:	f006 fe2e 	bl	f5ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    8952:	4659      	mov	r1, fp
    8954:	f8cb 0010 	str.w	r0, [fp, #16]
    8958:	9804      	ldr	r0, [sp, #16]
    895a:	6909      	ldr	r1, [r1, #16]
    895c:	1a32      	subs	r2, r6, r0
    895e:	f8d4 614c 	ldr.w	r6, [r4, #332]	; 0x14c
    8962:	6920      	ldr	r0, [r4, #16]
    8964:	1b80      	subs	r0, r0, r6
    8966:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    896a:	f8cb 0014 	str.w	r0, [fp, #20]
    896e:	4281      	cmp	r1, r0
    8970:	d800      	bhi.n	8974 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    8972:	4608      	mov	r0, r1
    8974:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
    8978:	2600      	movs	r6, #0
    897a:	702e      	strb	r6, [r5, #0]
    897c:	2064      	movs	r0, #100	; 0x64
    897e:	8128      	strh	r0, [r5, #8]
    8980:	4611      	mov	r1, r2
    8982:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8986:	f7f9 fe21 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    898a:	60e8      	str	r0, [r5, #12]
    898c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8990:	f006 f961 	bl	ec56 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8994:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    8998:	4408      	add	r0, r1
    899a:	6068      	str	r0, [r5, #4]
    899c:	68e8      	ldr	r0, [r5, #12]
    899e:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    89a2:	f8a4 7174 	strh.w	r7, [r4, #372]	; 0x174
    89a6:	72ae      	strb	r6, [r5, #10]
    89a8:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    89ac:	1bc0      	subs	r0, r0, r7
    89ae:	b200      	sxth	r0, r0
    89b0:	2800      	cmp	r0, #0
    89b2:	dd01      	ble.n	89b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x558>
    89b4:	2002      	movs	r0, #2
    89b6:	72a8      	strb	r0, [r5, #10]
    89b8:	9803      	ldr	r0, [sp, #12]
    89ba:	b340      	cbz	r0, 8a0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    89bc:	f1b9 0f00 	cmp.w	r9, #0
    89c0:	d01e      	beq.n	8a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    89c2:	bf00      	nop
    89c4:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    89c8:	b379      	cbz	r1, 8a2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ca>
    89ca:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    89ce:	bf00      	nop
    89d0:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    89d4:	f894 2134 	ldrb.w	r2, [r4, #308]	; 0x134
    89d8:	1c40      	adds	r0, r0, #1
    89da:	4342      	muls	r2, r0
    89dc:	428a      	cmp	r2, r1
    89de:	d20f      	bcs.n	8a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    89e0:	7aa8      	ldrb	r0, [r5, #10]
    89e2:	b168      	cbz	r0, 8a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    89e4:	72ae      	strb	r6, [r5, #10]
    89e6:	f8b4 0132 	ldrh.w	r0, [r4, #306]	; 0x132
    89ea:	1c40      	adds	r0, r0, #1
    89ec:	f8a4 0132 	strh.w	r0, [r4, #306]	; 0x132
    89f0:	2001      	movs	r0, #1
    89f2:	f000 f83b 	bl	8a6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    89f6:	f000 0007 	and.w	r0, r0, #7
    89fa:	1c40      	adds	r0, r0, #1
    89fc:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8a00:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    8a04:	4629      	mov	r1, r5
    8a06:	f006 fde4 	bl	f5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    8a0a:	e001      	b.n	8a10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    8a0c:	e00a      	b.n	8a24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    8a0e:	e00d      	b.n	8a2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5cc>
    8a10:	b320      	cbz	r0, 8a5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    8a12:	9807      	ldr	r0, [sp, #28]
    8a14:	f080 0001 	eor.w	r0, r0, #1
    8a18:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158
    8a1c:	2000      	movs	r0, #0
    8a1e:	b009      	add	sp, #36	; 0x24
    8a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a24:	f240 513c 	movw	r1, #1340	; 0x53c
    8a28:	e01a      	b.n	8a60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8a2a:	e015      	b.n	8a58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    8a2c:	f1b9 0f00 	cmp.w	r9, #0
    8a30:	d1c8      	bne.n	89c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    8a32:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    8a36:	2800      	cmp	r0, #0
    8a38:	d0e2      	beq.n	8a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8a3a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8a3e:	6920      	ldr	r0, [r4, #16]
    8a40:	1a41      	subs	r1, r0, r1
    8a42:	4628      	mov	r0, r5
    8a44:	f005 fd1e 	bl	e484 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8a48:	0400      	lsls	r0, r0, #16
    8a4a:	0c00      	lsrs	r0, r0, #16
    8a4c:	d0d8      	beq.n	8a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a0>
    8a4e:	9912      	ldr	r1, [sp, #72]	; 0x48
    8a50:	b101      	cbz	r1, 8a54 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    8a52:	8008      	strh	r0, [r1, #0]
    8a54:	2001      	movs	r0, #1
    8a56:	e7e2      	b.n	8a1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5be>
    8a58:	2000      	movs	r0, #0
    8a5a:	e7b9      	b.n	89d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    8a5c:	f240 519b 	movw	r1, #1435	; 0x59b
    8a60:	2030      	movs	r0, #48	; 0x30
    8a62:	f7fc f9b7 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a66:	0000      	.short	0x0000
    8a68:	20000124 	.word	0x20000124
    8a6c:	b108      	cbz	r0, 8a72 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x612>
    8a6e:	4803      	ldr	r0, [pc, #12]	; (8a7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8a70:	e001      	b.n	8a76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    8a72:	4802      	ldr	r0, [pc, #8]	; (8a7c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>)
    8a74:	3008      	adds	r0, #8
    8a76:	f7fe bc79 	b.w	736c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    8a7a:	0000      	.short	0x0000
    8a7c:	2000013c 	.word	0x2000013c
    8a80:	b570      	push	{r4, r5, r6, lr}
    8a82:	4604      	mov	r4, r0
    8a84:	f7f9 ff06 	bl	2894 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8a88:	2864      	cmp	r0, #100	; 0x64
    8a8a:	d901      	bls.n	8a90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x630>
    8a8c:	4605      	mov	r5, r0
    8a8e:	e000      	b.n	8a92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x632>
    8a90:	2564      	movs	r5, #100	; 0x64
    8a92:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8a96:	2128      	movs	r1, #40	; 0x28
    8a98:	f006 fc87 	bl	f3aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8a9c:	4428      	add	r0, r5
    8a9e:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8aa2:	f200 203d 	addw	r0, r0, #573	; 0x23d
    8aa6:	180e      	adds	r6, r1, r0
    8aa8:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
    8aac:	2128      	movs	r1, #40	; 0x28
    8aae:	f006 fc7c 	bl	f3aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8ab2:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    8ab6:	4620      	mov	r0, r4
    8ab8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8aba:	f006 f869 	bl	eb90 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8abe:	4605      	mov	r5, r0
    8ac0:	4632      	mov	r2, r6
    8ac2:	4620      	mov	r0, r4
    8ac4:	6921      	ldr	r1, [r4, #16]
    8ac6:	f006 f863 	bl	eb90 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8aca:	4907      	ldr	r1, [pc, #28]	; (8ae8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x688>)
    8acc:	4285      	cmp	r5, r0
    8ace:	6088      	str	r0, [r1, #8]
    8ad0:	d200      	bcs.n	8ad4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x674>
    8ad2:	4628      	mov	r0, r5
    8ad4:	6048      	str	r0, [r1, #4]
    8ad6:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8ada:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    8ade:	60c8      	str	r0, [r1, #12]
    8ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ae4:	f7fa bd7a 	b.w	35dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8ae8:	20000124 	.word	0x20000124
    8aec:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8aee:	4604      	mov	r4, r0
    8af0:	f003 ffc2 	bl	ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8af4:	4601      	mov	r1, r0
    8af6:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    8afa:	f7f9 fd99 	bl	2630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8afe:	4601      	mov	r1, r0
    8b00:	6922      	ldr	r2, [r4, #16]
    8b02:	2000      	movs	r0, #0
    8b04:	b10a      	cbz	r2, 8b0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6aa>
    8b06:	fbb1 f0f2 	udiv	r0, r1, r2
    8b0a:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8b0e:	290d      	cmp	r1, #13
    8b10:	d00c      	beq.n	8b2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6cc>
    8b12:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8b16:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8b1a:	1813      	adds	r3, r2, r0
    8b1c:	1acb      	subs	r3, r1, r3
    8b1e:	b21b      	sxth	r3, r3
    8b20:	2b00      	cmp	r3, #0
    8b22:	db06      	blt.n	8b32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6d2>
    8b24:	1c49      	adds	r1, r1, #1
    8b26:	f8a4 1156 	strh.w	r1, [r4, #342]	; 0x156
    8b2a:	e006      	b.n	8b3a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6da>
    8b2c:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8b30:	e012      	b.n	8b58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    8b32:	1c40      	adds	r0, r0, #1
    8b34:	4410      	add	r0, r2
    8b36:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8b3a:	f894 0159 	ldrb.w	r0, [r4, #345]	; 0x159
    8b3e:	f88d 0000 	strb.w	r0, [sp]
    8b42:	9800      	ldr	r0, [sp, #0]
    8b44:	9000      	str	r0, [sp, #0]
    8b46:	f89d 0000 	ldrb.w	r0, [sp]
    8b4a:	b940      	cbnz	r0, 8b5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8b4c:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8b50:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    8b54:	4288      	cmp	r0, r1
    8b56:	d102      	bne.n	8b5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fe>
    8b58:	1c40      	adds	r0, r0, #1
    8b5a:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8b5e:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
    8b62:	1c40      	adds	r0, r0, #1
    8b64:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
    8b68:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    8b6c:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    8b70:	1a40      	subs	r0, r0, r1
    8b72:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    8b76:	1e40      	subs	r0, r0, #1
    8b78:	4408      	add	r0, r1
    8b7a:	b285      	uxth	r5, r0
    8b7c:	e023      	b.n	8bc6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x766>
    8b7e:	a801      	add	r0, sp, #4
    8b80:	2300      	movs	r3, #0
    8b82:	9000      	str	r0, [sp, #0]
    8b84:	461a      	mov	r2, r3
    8b86:	4620      	mov	r0, r4
    8b88:	f7ff fd66 	bl	8658 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    8b8c:	2800      	cmp	r0, #0
    8b8e:	d036      	beq.n	8bfe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79e>
    8b90:	2801      	cmp	r0, #1
    8b92:	d004      	beq.n	8b9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x73e>
    8b94:	f240 6152 	movw	r1, #1618	; 0x652
    8b98:	2030      	movs	r0, #48	; 0x30
    8b9a:	f7fc f91b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b9e:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8ba2:	f8b4 0108 	ldrh.w	r0, [r4, #264]	; 0x108
    8ba6:	1a0a      	subs	r2, r1, r0
    8ba8:	b212      	sxth	r2, r2
    8baa:	2a00      	cmp	r2, #0
    8bac:	da06      	bge.n	8bbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x75c>
    8bae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8bb2:	440a      	add	r2, r1
    8bb4:	1aaa      	subs	r2, r5, r2
    8bb6:	b212      	sxth	r2, r2
    8bb8:	2a00      	cmp	r2, #0
    8bba:	db02      	blt.n	8bc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x762>
    8bbc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8bc0:	4408      	add	r0, r1
    8bc2:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    8bc6:	f8b4 1156 	ldrh.w	r1, [r4, #342]	; 0x156
    8bca:	1a68      	subs	r0, r5, r1
    8bcc:	b200      	sxth	r0, r0
    8bce:	2800      	cmp	r0, #0
    8bd0:	dad5      	bge.n	8b7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x71e>
    8bd2:	f894 0089 	ldrb.w	r0, [r4, #137]	; 0x89
    8bd6:	b180      	cbz	r0, 8bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x79a>
    8bd8:	f05f 0008 	movs.w	r0, #8
    8bdc:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    8be0:	20ff      	movs	r0, #255	; 0xff
    8be2:	f884 009c 	strb.w	r0, [r4, #156]	; 0x9c
    8be6:	4620      	mov	r0, r4
    8be8:	f006 fec4 	bl	f974 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    8bec:	4620      	mov	r0, r4
    8bee:	f006 fd4a 	bl	f686 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    8bf2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    8bf6:	f7fe ba23 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bfa:	203e      	movs	r0, #62	; 0x3e
    8bfc:	e7ee      	b.n	8bdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x77c>
    8bfe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00008c00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8c00:	4806      	ldr	r0, [pc, #24]	; (8c1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8c02:	4905      	ldr	r1, [pc, #20]	; (8c18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8c04:	6501      	str	r1, [r0, #80]	; 0x50
    8c06:	4906      	ldr	r1, [pc, #24]	; (8c20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8c08:	6541      	str	r1, [r0, #84]	; 0x54
    8c0a:	4807      	ldr	r0, [pc, #28]	; (8c28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8c0c:	4905      	ldr	r1, [pc, #20]	; (8c24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8c0e:	6501      	str	r1, [r0, #80]	; 0x50
    8c10:	4906      	ldr	r1, [pc, #24]	; (8c2c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8c12:	6541      	str	r1, [r0, #84]	; 0x54
    8c14:	4770      	bx	lr
    8c16:	0000      	.short	0x0000
    8c18:	0000a1e1 	.word	0x0000a1e1
    8c1c:	20000160 	.word	0x20000160
    8c20:	0000a2c1 	.word	0x0000a2c1
    8c24:	0000a931 	.word	0x0000a931
    8c28:	200001c8 	.word	0x200001c8
    8c2c:	0000a961 	.word	0x0000a961

00008c30 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c32:	460d      	mov	r5, r1
    8c34:	4607      	mov	r7, r0
    8c36:	2100      	movs	r1, #0
    8c38:	f005 f8b8 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8c3c:	1e04      	subs	r4, r0, #0
    8c3e:	d050      	beq.n	8ce2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8c40:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    8c44:	2800      	cmp	r0, #0
    8c46:	d04c      	beq.n	8ce2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8c48:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8c4c:	f88d 0000 	strb.w	r0, [sp]
    8c50:	9800      	ldr	r0, [sp, #0]
    8c52:	9000      	str	r0, [sp, #0]
    8c54:	f89d 0000 	ldrb.w	r0, [sp]
    8c58:	2600      	movs	r6, #0
    8c5a:	b118      	cbz	r0, 8c64 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    8c5c:	706e      	strb	r6, [r5, #1]
    8c5e:	2007      	movs	r0, #7
    8c60:	7028      	strb	r0, [r5, #0]
    8c62:	e00d      	b.n	8c80 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    8c64:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    8c68:	b390      	cbz	r0, 8cd0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    8c6a:	f894 01d4 	ldrb.w	r0, [r4, #468]	; 0x1d4
    8c6e:	280b      	cmp	r0, #11
    8c70:	d02f      	beq.n	8cd2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa2>
    8c72:	280c      	cmp	r0, #12
    8c74:	d01c      	beq.n	8cb0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8c76:	f640 21dc 	movw	r1, #2780	; 0xadc
    8c7a:	2031      	movs	r0, #49	; 0x31
    8c7c:	f7fc f8aa 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c80:	f894 01c8 	ldrb.w	r0, [r4, #456]	; 0x1c8
    8c84:	f88d 0000 	strb.w	r0, [sp]
    8c88:	9800      	ldr	r0, [sp, #0]
    8c8a:	9000      	str	r0, [sp, #0]
    8c8c:	f89d 0000 	ldrb.w	r0, [sp]
    8c90:	b160      	cbz	r0, 8cac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x7c>
    8c92:	f884 61c8 	strb.w	r6, [r4, #456]	; 0x1c8
    8c96:	8526      	strh	r6, [r4, #40]	; 0x28
    8c98:	f8d4 01ca 	ldr.w	r0, [r4, #458]	; 0x1ca
    8c9c:	6068      	str	r0, [r5, #4]
    8c9e:	f8d4 01ce 	ldr.w	r0, [r4, #462]	; 0x1ce
    8ca2:	60a8      	str	r0, [r5, #8]
    8ca4:	f8b4 01d2 	ldrh.w	r0, [r4, #466]	; 0x1d2
    8ca8:	81a8      	strh	r0, [r5, #12]
    8caa:	e7e9      	b.n	8c80 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x50>
    8cac:	712e      	strb	r6, [r5, #4]
    8cae:	e0fa      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8cb0:	8820      	ldrh	r0, [r4, #0]
    8cb2:	f7fc fca9 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8cb6:	4607      	mov	r7, r0
    8cb8:	f004 ff3e 	bl	db38 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8cbc:	b980      	cbnz	r0, 8ce0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8cbe:	706e      	strb	r6, [r5, #1]
    8cc0:	200c      	movs	r0, #12
    8cc2:	7028      	strb	r0, [r5, #0]
    8cc4:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    8cc8:	7128      	strb	r0, [r5, #4]
    8cca:	8820      	ldrh	r0, [r4, #0]
    8ccc:	80e8      	strh	r0, [r5, #6]
    8cce:	e014      	b.n	8cfa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xca>
    8cd0:	e019      	b.n	8d06 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    8cd2:	8820      	ldrh	r0, [r4, #0]
    8cd4:	f7fc fc98 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8cd8:	4607      	mov	r7, r0
    8cda:	f004 ff2d 	bl	db38 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8cde:	b108      	cbz	r0, 8ce4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb4>
    8ce0:	2000      	movs	r0, #0
    8ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ce4:	706e      	strb	r6, [r5, #1]
    8ce6:	200b      	movs	r0, #11
    8ce8:	7028      	strb	r0, [r5, #0]
    8cea:	f894 01d6 	ldrb.w	r0, [r4, #470]	; 0x1d6
    8cee:	7128      	strb	r0, [r5, #4]
    8cf0:	8820      	ldrh	r0, [r4, #0]
    8cf2:	80e8      	strh	r0, [r5, #6]
    8cf4:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8cf8:	7228      	strb	r0, [r5, #8]
    8cfa:	f884 61d4 	strb.w	r6, [r4, #468]	; 0x1d4
    8cfe:	4638      	mov	r0, r7
    8d00:	f004 ff35 	bl	db6e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8d04:	e0cf      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8d06:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    8d0a:	f88d 0000 	strb.w	r0, [sp]
    8d0e:	9800      	ldr	r0, [sp, #0]
    8d10:	9000      	str	r0, [sp, #0]
    8d12:	f89d 0000 	ldrb.w	r0, [sp]
    8d16:	b130      	cbz	r0, 8d26 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8d18:	706e      	strb	r6, [r5, #1]
    8d1a:	200e      	movs	r0, #14
    8d1c:	7028      	strb	r0, [r5, #0]
    8d1e:	80af      	strh	r7, [r5, #4]
    8d20:	f884 620a 	strb.w	r6, [r4, #522]	; 0x20a
    8d24:	e0bf      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8d26:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    8d2a:	f88d 0000 	strb.w	r0, [sp]
    8d2e:	9800      	ldr	r0, [sp, #0]
    8d30:	9000      	str	r0, [sp, #0]
    8d32:	f89d 0000 	ldrb.w	r0, [sp]
    8d36:	b198      	cbz	r0, 8d60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8d38:	706e      	strb	r6, [r5, #1]
    8d3a:	2008      	movs	r0, #8
    8d3c:	7028      	strb	r0, [r5, #0]
    8d3e:	8820      	ldrh	r0, [r4, #0]
    8d40:	80a8      	strh	r0, [r5, #4]
    8d42:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
    8d46:	f8c5 1006 	str.w	r1, [r5, #6]
    8d4a:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
    8d4e:	f8c5 100a 	str.w	r1, [r5, #10]
    8d52:	f8b4 01e8 	ldrh.w	r0, [r4, #488]	; 0x1e8
    8d56:	81e8      	strh	r0, [r5, #14]
    8d58:	f504 74ee 	add.w	r4, r4, #476	; 0x1dc
    8d5c:	7026      	strb	r6, [r4, #0]
    8d5e:	e0a2      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8d60:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8d64:	f88d 0000 	strb.w	r0, [sp]
    8d68:	9800      	ldr	r0, [sp, #0]
    8d6a:	9000      	str	r0, [sp, #0]
    8d6c:	f89d 0000 	ldrb.w	r0, [sp]
    8d70:	b118      	cbz	r0, 8d7a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14a>
    8d72:	706e      	strb	r6, [r5, #1]
    8d74:	2016      	movs	r0, #22
    8d76:	7028      	strb	r0, [r5, #0]
    8d78:	e017      	b.n	8daa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    8d7a:	f894 021a 	ldrb.w	r0, [r4, #538]	; 0x21a
    8d7e:	f88d 0000 	strb.w	r0, [sp]
    8d82:	9800      	ldr	r0, [sp, #0]
    8d84:	9000      	str	r0, [sp, #0]
    8d86:	f89d 0000 	ldrb.w	r0, [sp]
    8d8a:	b1e8      	cbz	r0, 8dc8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x198>
    8d8c:	706e      	strb	r6, [r5, #1]
    8d8e:	2006      	movs	r0, #6
    8d90:	7028      	strb	r0, [r5, #0]
    8d92:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
    8d96:	6068      	str	r0, [r5, #4]
    8d98:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
    8d9c:	60a8      	str	r0, [r5, #8]
    8d9e:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8da2:	60e8      	str	r0, [r5, #12]
    8da4:	f504 7407 	add.w	r4, r4, #540	; 0x21c
    8da8:	e032      	b.n	8e10 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e0>
    8daa:	f894 0204 	ldrb.w	r0, [r4, #516]	; 0x204
    8dae:	f88d 0000 	strb.w	r0, [sp]
    8db2:	9800      	ldr	r0, [sp, #0]
    8db4:	9000      	str	r0, [sp, #0]
    8db6:	f89d 0000 	ldrb.w	r0, [sp]
    8dba:	b358      	cbz	r0, 8e14 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    8dbc:	f884 6204 	strb.w	r6, [r4, #516]	; 0x204
    8dc0:	f8d4 0206 	ldr.w	r0, [r4, #518]	; 0x206
    8dc4:	6068      	str	r0, [r5, #4]
    8dc6:	e7f0      	b.n	8daa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x17a>
    8dc8:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    8dcc:	f88d 0000 	strb.w	r0, [sp]
    8dd0:	9800      	ldr	r0, [sp, #0]
    8dd2:	9000      	str	r0, [sp, #0]
    8dd4:	f89d 0000 	ldrb.w	r0, [sp]
    8dd8:	b118      	cbz	r0, 8de2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b2>
    8dda:	706e      	strb	r6, [r5, #1]
    8ddc:	2012      	movs	r0, #18
    8dde:	7028      	strb	r0, [r5, #0]
    8de0:	e019      	b.n	8e16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    8de2:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
    8de6:	f88d 0000 	strb.w	r0, [sp]
    8dea:	9800      	ldr	r0, [sp, #0]
    8dec:	9000      	str	r0, [sp, #0]
    8dee:	f89d 0000 	ldrb.w	r0, [sp]
    8df2:	b328      	cbz	r0, 8e40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x210>
    8df4:	706e      	strb	r6, [r5, #1]
    8df6:	2018      	movs	r0, #24
    8df8:	7028      	strb	r0, [r5, #0]
    8dfa:	f8d4 01fa 	ldr.w	r0, [r4, #506]	; 0x1fa
    8dfe:	6068      	str	r0, [r5, #4]
    8e00:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    8e04:	60a8      	str	r0, [r5, #8]
    8e06:	f8b4 0202 	ldrh.w	r0, [r4, #514]	; 0x202
    8e0a:	81a8      	strh	r0, [r5, #12]
    8e0c:	f504 74fd 	add.w	r4, r4, #506	; 0x1fa
    8e10:	f804 6c02 	strb.w	r6, [r4, #-2]
    8e14:	e047      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8e16:	f894 01ea 	ldrb.w	r0, [r4, #490]	; 0x1ea
    8e1a:	f88d 0000 	strb.w	r0, [sp]
    8e1e:	9800      	ldr	r0, [sp, #0]
    8e20:	9000      	str	r0, [sp, #0]
    8e22:	f89d 0000 	ldrb.w	r0, [sp]
    8e26:	b3e8      	cbz	r0, 8ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    8e28:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
    8e2c:	f8d4 01ec 	ldr.w	r0, [r4, #492]	; 0x1ec
    8e30:	6068      	str	r0, [r5, #4]
    8e32:	f8d4 01f0 	ldr.w	r0, [r4, #496]	; 0x1f0
    8e36:	60a8      	str	r0, [r5, #8]
    8e38:	f8d4 01f4 	ldr.w	r0, [r4, #500]	; 0x1f4
    8e3c:	60e8      	str	r0, [r5, #12]
    8e3e:	e7ea      	b.n	8e16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e6>
    8e40:	f894 020c 	ldrb.w	r0, [r4, #524]	; 0x20c
    8e44:	f88d 0000 	strb.w	r0, [sp]
    8e48:	9800      	ldr	r0, [sp, #0]
    8e4a:	9000      	str	r0, [sp, #0]
    8e4c:	f89d 0000 	ldrb.w	r0, [sp]
    8e50:	b138      	cbz	r0, 8e62 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x232>
    8e52:	2019      	movs	r0, #25
    8e54:	7028      	strb	r0, [r5, #0]
    8e56:	f8d4 020e 	ldr.w	r0, [r4, #526]	; 0x20e
    8e5a:	6068      	str	r0, [r5, #4]
    8e5c:	f884 620c 	strb.w	r6, [r4, #524]	; 0x20c
    8e60:	e021      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8e62:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    8e66:	f88d 0000 	strb.w	r0, [sp]
    8e6a:	9800      	ldr	r0, [sp, #0]
    8e6c:	9000      	str	r0, [sp, #0]
    8e6e:	f89d 0000 	ldrb.w	r0, [sp]
    8e72:	2800      	cmp	r0, #0
    8e74:	f43f af35 	beq.w	8ce2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8e78:	706e      	strb	r6, [r5, #1]
    8e7a:	2013      	movs	r0, #19
    8e7c:	f885 0000 	strb.w	r0, [r5]
    8e80:	f894 0212 	ldrb.w	r0, [r4, #530]	; 0x212
    8e84:	f88d 0000 	strb.w	r0, [sp]
    8e88:	9800      	ldr	r0, [sp, #0]
    8e8a:	9000      	str	r0, [sp, #0]
    8e8c:	f89d 0000 	ldrb.w	r0, [sp]
    8e90:	b140      	cbz	r0, 8ea4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x274>
    8e92:	f884 6212 	strb.w	r6, [r4, #530]	; 0x212
    8e96:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    8e9a:	6068      	str	r0, [r5, #4]
    8e9c:	f8b4 0218 	ldrh.w	r0, [r4, #536]	; 0x218
    8ea0:	8128      	strh	r0, [r5, #8]
    8ea2:	e7ed      	b.n	8e80 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x250>
    8ea4:	e7ff      	b.n	8ea6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x276>
    8ea6:	2001      	movs	r0, #1
    8ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008eac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8eac:	481d      	ldr	r0, [pc, #116]	; (8f24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8eae:	491c      	ldr	r1, [pc, #112]	; (8f20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8eb0:	6081      	str	r1, [r0, #8]
    8eb2:	491d      	ldr	r1, [pc, #116]	; (8f28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8eb4:	6041      	str	r1, [r0, #4]
    8eb6:	491d      	ldr	r1, [pc, #116]	; (8f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8eb8:	6001      	str	r1, [r0, #0]
    8eba:	491d      	ldr	r1, [pc, #116]	; (8f30 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8ebc:	6281      	str	r1, [r0, #40]	; 0x28
    8ebe:	491d      	ldr	r1, [pc, #116]	; (8f34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8ec0:	62c1      	str	r1, [r0, #44]	; 0x2c
    8ec2:	491d      	ldr	r1, [pc, #116]	; (8f38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8ec4:	60c1      	str	r1, [r0, #12]
    8ec6:	491d      	ldr	r1, [pc, #116]	; (8f3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8ec8:	6181      	str	r1, [r0, #24]
    8eca:	491d      	ldr	r1, [pc, #116]	; (8f40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8ecc:	6301      	str	r1, [r0, #48]	; 0x30
    8ece:	491d      	ldr	r1, [pc, #116]	; (8f44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8ed0:	6201      	str	r1, [r0, #32]
    8ed2:	491d      	ldr	r1, [pc, #116]	; (8f48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8ed4:	64c1      	str	r1, [r0, #76]	; 0x4c
    8ed6:	491d      	ldr	r1, [pc, #116]	; (8f4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8ed8:	6481      	str	r1, [r0, #72]	; 0x48
    8eda:	491d      	ldr	r1, [pc, #116]	; (8f50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8edc:	6441      	str	r1, [r0, #68]	; 0x44
    8ede:	491d      	ldr	r1, [pc, #116]	; (8f54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8ee0:	6341      	str	r1, [r0, #52]	; 0x34
    8ee2:	491d      	ldr	r1, [pc, #116]	; (8f58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8ee4:	61c1      	str	r1, [r0, #28]
    8ee6:	491d      	ldr	r1, [pc, #116]	; (8f5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8ee8:	6241      	str	r1, [r0, #36]	; 0x24
    8eea:	481e      	ldr	r0, [pc, #120]	; (8f64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8eec:	491c      	ldr	r1, [pc, #112]	; (8f60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8eee:	6081      	str	r1, [r0, #8]
    8ef0:	491d      	ldr	r1, [pc, #116]	; (8f68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8ef2:	61c1      	str	r1, [r0, #28]
    8ef4:	491d      	ldr	r1, [pc, #116]	; (8f6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8ef6:	6241      	str	r1, [r0, #36]	; 0x24
    8ef8:	491d      	ldr	r1, [pc, #116]	; (8f70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8efa:	62c1      	str	r1, [r0, #44]	; 0x2c
    8efc:	491d      	ldr	r1, [pc, #116]	; (8f74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8efe:	6101      	str	r1, [r0, #16]
    8f00:	491d      	ldr	r1, [pc, #116]	; (8f78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8f02:	6141      	str	r1, [r0, #20]
    8f04:	491d      	ldr	r1, [pc, #116]	; (8f7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8f06:	6441      	str	r1, [r0, #68]	; 0x44
    8f08:	6341      	str	r1, [r0, #52]	; 0x34
    8f0a:	491d      	ldr	r1, [pc, #116]	; (8f80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8f0c:	6181      	str	r1, [r0, #24]
    8f0e:	491d      	ldr	r1, [pc, #116]	; (8f84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    8f10:	6301      	str	r1, [r0, #48]	; 0x30
    8f12:	491d      	ldr	r1, [pc, #116]	; (8f88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    8f14:	6481      	str	r1, [r0, #72]	; 0x48
    8f16:	491d      	ldr	r1, [pc, #116]	; (8f8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    8f18:	64c1      	str	r1, [r0, #76]	; 0x4c
    8f1a:	491d      	ldr	r1, [pc, #116]	; (8f90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    8f1c:	6381      	str	r1, [r0, #56]	; 0x38
    8f1e:	4770      	bx	lr
    8f20:	0000a665 	.word	0x0000a665
    8f24:	20000160 	.word	0x20000160
    8f28:	00009f45 	.word	0x00009f45
    8f2c:	00009fa1 	.word	0x00009fa1
    8f30:	0000a389 	.word	0x0000a389
    8f34:	0000a3cd 	.word	0x0000a3cd
    8f38:	0000a04d 	.word	0x0000a04d
    8f3c:	0000a63d 	.word	0x0000a63d
    8f40:	0000a77d 	.word	0x0000a77d
    8f44:	0000a0f9 	.word	0x0000a0f9
    8f48:	0000a35d 	.word	0x0000a35d
    8f4c:	0000a331 	.word	0x0000a331
    8f50:	0000a5fd 	.word	0x0000a5fd
    8f54:	0000a62d 	.word	0x0000a62d
    8f58:	0000a699 	.word	0x0000a699
    8f5c:	0000a145 	.word	0x0000a145
    8f60:	0000ab49 	.word	0x0000ab49
    8f64:	200001c8 	.word	0x200001c8
    8f68:	0000ab71 	.word	0x0000ab71
    8f6c:	0000a901 	.word	0x0000a901
    8f70:	0000a9d9 	.word	0x0000a9d9
    8f74:	0000a8d5 	.word	0x0000a8d5
    8f78:	0000aab1 	.word	0x0000aab1
    8f7c:	0000aa5d 	.word	0x0000aa5d
    8f80:	0000aad5 	.word	0x0000aad5
    8f84:	0000abc9 	.word	0x0000abc9
    8f88:	0000a991 	.word	0x0000a991
    8f8c:	0000a9c1 	.word	0x0000a9c1
    8f90:	0000aa81 	.word	0x0000aa81

00008f94 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8f94:	4806      	ldr	r0, [pc, #24]	; (8fb0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8f96:	4905      	ldr	r1, [pc, #20]	; (8fac <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8f98:	6581      	str	r1, [r0, #88]	; 0x58
    8f9a:	4906      	ldr	r1, [pc, #24]	; (8fb4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8f9c:	6601      	str	r1, [r0, #96]	; 0x60
    8f9e:	4807      	ldr	r0, [pc, #28]	; (8fbc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8fa0:	4905      	ldr	r1, [pc, #20]	; (8fb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8fa2:	6581      	str	r1, [r0, #88]	; 0x58
    8fa4:	4906      	ldr	r1, [pc, #24]	; (8fc0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8fa6:	65c1      	str	r1, [r0, #92]	; 0x5c
    8fa8:	4770      	bx	lr
    8faa:	0000      	.short	0x0000
    8fac:	0000a3ed 	.word	0x0000a3ed
    8fb0:	20000160 	.word	0x20000160
    8fb4:	0000a4c1 	.word	0x0000a4c1
    8fb8:	0000aa05 	.word	0x0000aa05
    8fbc:	200001c8 	.word	0x200001c8
    8fc0:	0000aa35 	.word	0x0000aa35

00008fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8fc8:	2101      	movs	r1, #1
    8fca:	4c7d      	ldr	r4, [pc, #500]	; (91c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8fcc:	2500      	movs	r5, #0
    8fce:	f361 0207 	bfi	r2, r1, #0, #8
    8fd2:	8065      	strh	r5, [r4, #2]
    8fd4:	7065      	strb	r5, [r4, #1]
    8fd6:	7025      	strb	r5, [r4, #0]
    8fd8:	60a0      	str	r0, [r4, #8]
    8fda:	4690      	mov	r8, r2
    8fdc:	4606      	mov	r6, r0
    8fde:	f880 1113 	strb.w	r1, [r0, #275]	; 0x113
    8fe2:	8800      	ldrh	r0, [r0, #0]
    8fe4:	f7fc fb26 	bl	5634 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8fe8:	b180      	cbz	r0, 900c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8fea:	68a0      	ldr	r0, [r4, #8]
    8fec:	8800      	ldrh	r0, [r0, #0]
    8fee:	f7fc fd73 	bl	5ad8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8ff2:	68a0      	ldr	r0, [r4, #8]
    8ff4:	8800      	ldrh	r0, [r0, #0]
    8ff6:	f7fc fd17 	bl	5a28 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8ffa:	68a0      	ldr	r0, [r4, #8]
    8ffc:	f8b0 110a 	ldrh.w	r1, [r0, #266]	; 0x10a
    9000:	b1c9      	cbz	r1, 9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    9002:	3078      	adds	r0, #120	; 0x78
    9004:	f006 fcc5 	bl	f992 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9008:	b118      	cbz	r0, 9012 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    900a:	e014      	b.n	9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    900c:	f640 31b9 	movw	r1, #3001	; 0xbb9
    9010:	e06c      	b.n	90ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128>
    9012:	68a0      	ldr	r0, [r4, #8]
    9014:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    9018:	f88d 1000 	strb.w	r1, [sp]
    901c:	9900      	ldr	r1, [sp, #0]
    901e:	9100      	str	r1, [sp, #0]
    9020:	f89d 1000 	ldrb.w	r1, [sp]
    9024:	b139      	cbz	r1, 9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    9026:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    902a:	2301      	movs	r3, #1
    902c:	4619      	mov	r1, r3
    902e:	3078      	adds	r0, #120	; 0x78
    9030:	f005 f96f 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9034:	b180      	cbz	r0, 9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    9036:	68a0      	ldr	r0, [r4, #8]
    9038:	3078      	adds	r0, #120	; 0x78
    903a:	f006 fcaa 	bl	f992 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    903e:	b128      	cbz	r0, 904c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    9040:	68a0      	ldr	r0, [r4, #8]
    9042:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    9046:	bf00      	nop
    9048:	f000 fbb4 	bl	97b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7f0>
    904c:	68a0      	ldr	r0, [r4, #8]
    904e:	f890 1115 	ldrb.w	r1, [r0, #277]	; 0x115
    9052:	b189      	cbz	r1, 9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    9054:	80a5      	strh	r5, [r4, #4]
    9056:	e01e      	b.n	9096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    9058:	68a0      	ldr	r0, [r4, #8]
    905a:	f8a0 50b0 	strh.w	r5, [r0, #176]	; 0xb0
    905e:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    9062:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    9066:	2100      	movs	r1, #0
    9068:	2002      	movs	r0, #2
    906a:	f000 fe43 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    906e:	68a0      	ldr	r0, [r4, #8]
    9070:	f880 5112 	strb.w	r5, [r0, #274]	; 0x112
    9074:	2002      	movs	r0, #2
    9076:	e7e7      	b.n	9048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    9078:	f890 11c8 	ldrb.w	r1, [r0, #456]	; 0x1c8
    907c:	f88d 1000 	strb.w	r1, [sp]
    9080:	9900      	ldr	r1, [sp, #0]
    9082:	9100      	str	r1, [sp, #0]
    9084:	f89d 1000 	ldrb.w	r1, [sp]
    9088:	b919      	cbnz	r1, 9092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    908a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    908c:	8b02      	ldrh	r2, [r0, #24]
    908e:	4291      	cmp	r1, r2
    9090:	d800      	bhi.n	9094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    9092:	8b01      	ldrh	r1, [r0, #24]
    9094:	80a1      	strh	r1, [r4, #4]
    9096:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    909a:	1e49      	subs	r1, r1, #1
    909c:	b28f      	uxth	r7, r1
    909e:	f8b0 1110 	ldrh.w	r1, [r0, #272]	; 0x110
    90a2:	4439      	add	r1, r7
    90a4:	f8a0 1110 	strh.w	r1, [r0, #272]	; 0x110
    90a8:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    90ac:	4439      	add	r1, r7
    90ae:	8001      	strh	r1, [r0, #0]
    90b0:	f001 fdb8 	bl	ac24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    90b4:	b120      	cbz	r0, 90c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc>
    90b6:	68a0      	ldr	r0, [r4, #8]
    90b8:	f850 1fa0 	ldr.w	r1, [r0, #160]!
    90bc:	4439      	add	r1, r7
    90be:	6001      	str	r1, [r0, #0]
    90c0:	68a1      	ldr	r1, [r4, #8]
    90c2:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    90c6:	2801      	cmp	r0, #1
    90c8:	d802      	bhi.n	90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c>
    90ca:	1c40      	adds	r0, r0, #1
    90cc:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
    90d0:	b10f      	cbz	r7, 90d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x112>
    90d2:	f881 511c 	strb.w	r5, [r1, #284]	; 0x11c
    90d6:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    90da:	f8b1 210e 	ldrh.w	r2, [r1, #270]	; 0x10e
    90de:	f101 0078 	add.w	r0, r1, #120	; 0x78
    90e2:	f005 fa98 	bl	e616 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    90e6:	b120      	cbz	r0, 90f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e>
    90e8:	f640 31fd 	movw	r1, #3069	; 0xbfd
    90ec:	2031      	movs	r0, #49	; 0x31
    90ee:	f7fb fe71 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90f2:	68a0      	ldr	r0, [r4, #8]
    90f4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    90f8:	290b      	cmp	r1, #11
    90fa:	d001      	beq.n	9100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c>
    90fc:	290c      	cmp	r1, #12
    90fe:	d119      	bne.n	9134 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    9100:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    9104:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
    9108:	1ad2      	subs	r2, r2, r3
    910a:	b212      	sxth	r2, r2
    910c:	2a00      	cmp	r2, #0
    910e:	db11      	blt.n	9134 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170>
    9110:	f8d0 11a6 	ldr.w	r1, [r0, #422]	; 0x1a6
    9114:	f8c0 108e 	str.w	r1, [r0, #142]	; 0x8e
    9118:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    911c:	f880 1092 	strb.w	r1, [r0, #146]	; 0x92
    9120:	2103      	movs	r1, #3
    9122:	f7fd fd43 	bl	6bac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9126:	68a0      	ldr	r0, [r4, #8]
    9128:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    912c:	21ff      	movs	r1, #255	; 0xff
    912e:	f880 10cc 	strb.w	r1, [r0, #204]	; 0xcc
    9132:	e026      	b.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    9134:	2924      	cmp	r1, #36	; 0x24
    9136:	d111      	bne.n	915c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    9138:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    913c:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    9140:	1a89      	subs	r1, r1, r2
    9142:	b209      	sxth	r1, r1
    9144:	2900      	cmp	r1, #0
    9146:	db09      	blt.n	915c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198>
    9148:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    914c:	f000 fe84 	bl	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    9150:	2800      	cmp	r0, #0
    9152:	68a0      	ldr	r0, [r4, #8]
    9154:	f880 51be 	strb.w	r5, [r0, #446]	; 0x1be
    9158:	d029      	beq.n	91ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    915a:	e012      	b.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    915c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9160:	2924      	cmp	r1, #36	; 0x24
    9162:	d001      	beq.n	9168 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4>
    9164:	2925      	cmp	r1, #37	; 0x25
    9166:	d10c      	bne.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    9168:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    916c:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
    9170:	1a89      	subs	r1, r1, r2
    9172:	b209      	sxth	r1, r1
    9174:	2900      	cmp	r1, #0
    9176:	db04      	blt.n	9182 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be>
    9178:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    917c:	f000 fe6c 	bl	9e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe94>
    9180:	b1a8      	cbz	r0, 91ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ea>
    9182:	4810      	ldr	r0, [pc, #64]	; (91c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    9184:	9000      	str	r0, [sp, #0]
    9186:	4b10      	ldr	r3, [pc, #64]	; (91c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    9188:	4a10      	ldr	r2, [pc, #64]	; (91cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>)
    918a:	4631      	mov	r1, r6
    918c:	4640      	mov	r0, r8
    918e:	f7fc fd5d 	bl	5c4c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9192:	68a0      	ldr	r0, [r4, #8]
    9194:	2301      	movs	r3, #1
    9196:	2105      	movs	r1, #5
    9198:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    919c:	3078      	adds	r0, #120	; 0x78
    919e:	f005 f8b8 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91a2:	2800      	cmp	r0, #0
    91a4:	d009      	beq.n	91ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f6>
    91a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91aa:	f7fc bd49 	b.w	5c40 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    91ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91b2:	2100      	movs	r1, #0
    91b4:	4608      	mov	r0, r1
    91b6:	f000 bbd3 	b.w	9960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    91ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    91be:	0000      	.short	0x0000
    91c0:	2000014c 	.word	0x2000014c
    91c4:	00009961 	.word	0x00009961
    91c8:	0000946d 	.word	0x0000946d
    91cc:	00009da5 	.word	0x00009da5
    91d0:	b570      	push	{r4, r5, r6, lr}
    91d2:	4c0f      	ldr	r4, [pc, #60]	; (9210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>)
    91d4:	68a5      	ldr	r5, [r4, #8]
    91d6:	f895 1085 	ldrb.w	r1, [r5, #133]	; 0x85
    91da:	2920      	cmp	r1, #32
    91dc:	d002      	beq.n	91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    91de:	2926      	cmp	r1, #38	; 0x26
    91e0:	d003      	beq.n	91ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x226>
    91e2:	e011      	b.n	9208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    91e4:	f000 fe8a 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    91e8:	e008      	b.n	91fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x238>
    91ea:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
    91ee:	2301      	movs	r3, #1
    91f0:	210b      	movs	r1, #11
    91f2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    91f6:	f005 f88c 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91fa:	b138      	cbz	r0, 920c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>
    91fc:	68a1      	ldr	r1, [r4, #8]
    91fe:	2000      	movs	r0, #0
    9200:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9204:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    9208:	2000      	movs	r0, #0
    920a:	bd70      	pop	{r4, r5, r6, pc}
    920c:	202a      	movs	r0, #42	; 0x2a
    920e:	e7e9      	b.n	91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    9210:	2000014c 	.word	0x2000014c
    9214:	4804      	ldr	r0, [pc, #16]	; (9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>)
    9216:	2100      	movs	r1, #0
    9218:	6880      	ldr	r0, [r0, #8]
    921a:	f820 1fb8 	strh.w	r1, [r0, #184]!
    921e:	7881      	ldrb	r1, [r0, #2]
    9220:	1c49      	adds	r1, r1, #1
    9222:	7081      	strb	r1, [r0, #2]
    9224:	4770      	bx	lr
    9226:	0000      	.short	0x0000
    9228:	2000014c 	.word	0x2000014c
    922c:	4807      	ldr	r0, [pc, #28]	; (924c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>)
    922e:	b510      	push	{r4, lr}
    9230:	6881      	ldr	r1, [r0, #8]
    9232:	f811 0fba 	ldrb.w	r0, [r1, #186]!
    9236:	1e40      	subs	r0, r0, #1
    9238:	b240      	sxtb	r0, r0
    923a:	7008      	strb	r0, [r1, #0]
    923c:	2800      	cmp	r0, #0
    923e:	da04      	bge.n	924a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x286>
    9240:	f44f 71c7 	mov.w	r1, #398	; 0x18e
    9244:	2031      	movs	r0, #49	; 0x31
    9246:	f7fb fdc5 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    924a:	bd10      	pop	{r4, pc}
    924c:	2000014c 	.word	0x2000014c
    9250:	491a      	ldr	r1, [pc, #104]	; (92bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>)
    9252:	b508      	push	{r3, lr}
    9254:	6889      	ldr	r1, [r1, #8]
    9256:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    925a:	b1b8      	cbz	r0, 928c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c8>
    925c:	2a10      	cmp	r2, #16
    925e:	d006      	beq.n	926e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2aa>
    9260:	2a14      	cmp	r2, #20
    9262:	d007      	beq.n	9274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b0>
    9264:	2a15      	cmp	r2, #21
    9266:	d008      	beq.n	927a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b6>
    9268:	2a1b      	cmp	r2, #27
    926a:	d122      	bne.n	92b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    926c:	e008      	b.n	9280 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    926e:	2101      	movs	r1, #1
    9270:	200b      	movs	r0, #11
    9272:	e007      	b.n	9284 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    9274:	f001 fade 	bl	a834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    9278:	e006      	b.n	9288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    927a:	f000 fd59 	bl	9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    927e:	e003      	b.n	9288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    9280:	2101      	movs	r1, #1
    9282:	2006      	movs	r0, #6
    9284:	f000 fd36 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9288:	2001      	movs	r0, #1
    928a:	bd08      	pop	{r3, pc}
    928c:	2a21      	cmp	r2, #33	; 0x21
    928e:	d110      	bne.n	92b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    9290:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9294:	2802      	cmp	r0, #2
    9296:	d00e      	beq.n	92b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    9298:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    929c:	2801      	cmp	r0, #1
    929e:	d108      	bne.n	92b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    92a0:	f891 01bf 	ldrb.w	r0, [r1, #447]	; 0x1bf
    92a4:	f88d 0000 	strb.w	r0, [sp]
    92a8:	9800      	ldr	r0, [sp, #0]
    92aa:	9000      	str	r0, [sp, #0]
    92ac:	f89d 0000 	ldrb.w	r0, [sp]
    92b0:	b108      	cbz	r0, 92b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f2>
    92b2:	2000      	movs	r0, #0
    92b4:	bd08      	pop	{r3, pc}
    92b6:	2101      	movs	r1, #1
    92b8:	2017      	movs	r0, #23
    92ba:	e7e3      	b.n	9284 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    92bc:	2000014c 	.word	0x2000014c
    92c0:	b538      	push	{r3, r4, r5, lr}
    92c2:	2800      	cmp	r0, #0
    92c4:	d16d      	bne.n	93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    92c6:	4c38      	ldr	r4, [pc, #224]	; (93a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e4>)
    92c8:	68a0      	ldr	r0, [r4, #8]
    92ca:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    92ce:	07ca      	lsls	r2, r1, #31
    92d0:	d002      	beq.n	92d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x314>
    92d2:	2101      	movs	r1, #1
    92d4:	2009      	movs	r0, #9
    92d6:	e05d      	b.n	9394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    92d8:	078a      	lsls	r2, r1, #30
    92da:	d50a      	bpl.n	92f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32e>
    92dc:	2101      	movs	r1, #1
    92de:	200c      	movs	r0, #12
    92e0:	f000 fd08 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    92e4:	68a0      	ldr	r0, [r4, #8]
    92e6:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    92ea:	f041 0101 	orr.w	r1, r1, #1
    92ee:	7001      	strb	r1, [r0, #0]
    92f0:	e052      	b.n	9398 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d4>
    92f2:	074a      	lsls	r2, r1, #29
    92f4:	d502      	bpl.n	92fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x338>
    92f6:	2101      	movs	r1, #1
    92f8:	2013      	movs	r0, #19
    92fa:	e04b      	b.n	9394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    92fc:	070a      	lsls	r2, r1, #28
    92fe:	d505      	bpl.n	930c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    9300:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    9304:	7141      	strb	r1, [r0, #5]
    9306:	2101      	movs	r1, #1
    9308:	2007      	movs	r0, #7
    930a:	e043      	b.n	9394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    930c:	f011 0f30 	tst.w	r1, #48	; 0x30
    9310:	d047      	beq.n	93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    9312:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9316:	f88d 1000 	strb.w	r1, [sp]
    931a:	9900      	ldr	r1, [sp, #0]
    931c:	9100      	str	r1, [sp, #0]
    931e:	f89d 1000 	ldrb.w	r1, [sp]
    9322:	bbd9      	cbnz	r1, 939c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d8>
    9324:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9328:	2500      	movs	r5, #0
    932a:	f88d 1000 	strb.w	r1, [sp]
    932e:	9900      	ldr	r1, [sp, #0]
    9330:	9100      	str	r1, [sp, #0]
    9332:	f89d 1000 	ldrb.w	r1, [sp]
    9336:	b1c9      	cbz	r1, 936c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    9338:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    933c:	2924      	cmp	r1, #36	; 0x24
    933e:	d02e      	beq.n	939e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    9340:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9344:	2924      	cmp	r1, #36	; 0x24
    9346:	d02a      	beq.n	939e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3da>
    9348:	f05f 0300 	movs.w	r3, #0
    934c:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9350:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9354:	f005 fc0e 	bl	eb74 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9358:	68a0      	ldr	r0, [r4, #8]
    935a:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    935e:	f021 0120 	bic.w	r1, r1, #32
    9362:	f041 0110 	orr.w	r1, r1, #16
    9366:	7001      	strb	r1, [r0, #0]
    9368:	f880 512d 	strb.w	r5, [r0, #301]	; 0x12d
    936c:	68a0      	ldr	r0, [r4, #8]
    936e:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    9372:	06c9      	lsls	r1, r1, #27
    9374:	d515      	bpl.n	93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    9376:	f005 fc18 	bl	ebaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    937a:	f000 f911 	bl	95a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    937e:	68a0      	ldr	r0, [r4, #8]
    9380:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9384:	4602      	mov	r2, r0
    9386:	8bc8      	ldrh	r0, [r1, #30]
    9388:	f822 0ffe 	strh.w	r0, [r2, #254]!
    938c:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    938e:	8050      	strh	r0, [r2, #2]
    9390:	2101      	movs	r1, #1
    9392:	2015      	movs	r0, #21
    9394:	f000 fcae 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9398:	2001      	movs	r0, #1
    939a:	bd38      	pop	{r3, r4, r5, pc}
    939c:	e001      	b.n	93a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3de>
    939e:	2301      	movs	r3, #1
    93a0:	e7d4      	b.n	934c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x388>
    93a2:	2000      	movs	r0, #0
    93a4:	e7f9      	b.n	939a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    93a6:	0000      	.short	0x0000
    93a8:	2000014c 	.word	0x2000014c
    93ac:	b570      	push	{r4, r5, r6, lr}
    93ae:	460d      	mov	r5, r1
    93b0:	4606      	mov	r6, r0
    93b2:	f005 fa21 	bl	e7f8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    93b6:	4604      	mov	r4, r0
    93b8:	4630      	mov	r0, r6
    93ba:	f005 fa29 	bl	e810 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    93be:	4629      	mov	r1, r5
    93c0:	f000 f81e 	bl	9400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43c>
    93c4:	b1b8      	cbz	r0, 93f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    93c6:	4620      	mov	r0, r4
    93c8:	f005 f83c 	bl	e444 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    93cc:	0001      	movs	r1, r0
    93ce:	d00d      	beq.n	93ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    93d0:	480a      	ldr	r0, [pc, #40]	; (93fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>)
    93d2:	6880      	ldr	r0, [r0, #8]
    93d4:	f890 206f 	ldrb.w	r2, [r0, #111]	; 0x6f
    93d8:	428a      	cmp	r2, r1
    93da:	d007      	beq.n	93ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x428>
    93dc:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    93e0:	2901      	cmp	r1, #1
    93e2:	d005      	beq.n	93f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42c>
    93e4:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    93e8:	4220      	tst	r0, r4
    93ea:	d004      	beq.n	93f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x432>
    93ec:	2001      	movs	r0, #1
    93ee:	bd70      	pop	{r4, r5, r6, pc}
    93f0:	f890 01c1 	ldrb.w	r0, [r0, #449]	; 0x1c1
    93f4:	e7f8      	b.n	93e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    93f6:	2000      	movs	r0, #0
    93f8:	bd70      	pop	{r4, r5, r6, pc}
    93fa:	0000      	.short	0x0000
    93fc:	2000014c 	.word	0x2000014c
    9400:	b570      	push	{r4, r5, r6, lr}
    9402:	460d      	mov	r5, r1
    9404:	4604      	mov	r4, r0
    9406:	f005 f81d 	bl	e444 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    940a:	b350      	cbz	r0, 9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    940c:	4916      	ldr	r1, [pc, #88]	; (9468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>)
    940e:	6889      	ldr	r1, [r1, #8]
    9410:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
    9414:	4282      	cmp	r2, r0
    9416:	d024      	beq.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9418:	f891 31be 	ldrb.w	r3, [r1, #446]	; 0x1be
    941c:	2b01      	cmp	r3, #1
    941e:	d005      	beq.n	942c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x468>
    9420:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
    9424:	4223      	tst	r3, r4
    9426:	d013      	beq.n	9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    9428:	b11d      	cbz	r5, 9432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    942a:	e01a      	b.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    942c:	f891 31c0 	ldrb.w	r3, [r1, #448]	; 0x1c0
    9430:	e7f8      	b.n	9424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    9432:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    9436:	4221      	tst	r1, r4
    9438:	d113      	bne.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    943a:	b15a      	cbz	r2, 9454 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x490>
    943c:	2a04      	cmp	r2, #4
    943e:	d00e      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    9440:	2804      	cmp	r0, #4
    9442:	d00c      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    9444:	2a08      	cmp	r2, #8
    9446:	d00a      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    9448:	2808      	cmp	r0, #8
    944a:	d008      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49a>
    944c:	4282      	cmp	r2, r0
    944e:	d908      	bls.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    9450:	2000      	movs	r0, #0
    9452:	bd70      	pop	{r4, r5, r6, pc}
    9454:	f240 1155 	movw	r1, #341	; 0x155
    9458:	2006      	movs	r0, #6
    945a:	f7fb fcbb 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    945e:	4282      	cmp	r2, r0
    9460:	d3f6      	bcc.n	9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48c>
    9462:	2001      	movs	r0, #1
    9464:	bd70      	pop	{r4, r5, r6, pc}
    9466:	0000      	.short	0x0000
    9468:	2000014c 	.word	0x2000014c
    946c:	490c      	ldr	r1, [pc, #48]	; (94a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4dc>)
    946e:	4602      	mov	r2, r0
    9470:	7848      	ldrb	r0, [r1, #1]
    9472:	b998      	cbnz	r0, 949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9474:	4608      	mov	r0, r1
    9476:	6880      	ldr	r0, [r0, #8]
    9478:	b142      	cbz	r2, 948c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c8>
    947a:	7889      	ldrb	r1, [r1, #2]
    947c:	0709      	lsls	r1, r1, #28
    947e:	d503      	bpl.n	9488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c4>
    9480:	f890 0088 	ldrb.w	r0, [r0, #136]	; 0x88
    9484:	2808      	cmp	r0, #8
    9486:	d009      	beq.n	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9488:	2001      	movs	r0, #1
    948a:	4770      	bx	lr
    948c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    9490:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9492:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    9494:	428a      	cmp	r2, r1
    9496:	d801      	bhi.n	949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    9498:	f7fe bf84 	b.w	83a4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    949c:	2000      	movs	r0, #0
    949e:	4770      	bx	lr
    94a0:	2000014c 	.word	0x2000014c
    94a4:	b538      	push	{r3, r4, r5, lr}
    94a6:	4c3d      	ldr	r4, [pc, #244]	; (959c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d8>)
    94a8:	4605      	mov	r5, r0
    94aa:	68a0      	ldr	r0, [r4, #8]
    94ac:	3078      	adds	r0, #120	; 0x78
    94ae:	f006 fa70 	bl	f992 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    94b2:	2800      	cmp	r0, #0
    94b4:	d170      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    94b6:	2d00      	cmp	r5, #0
    94b8:	d16e      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    94ba:	68a0      	ldr	r0, [r4, #8]
    94bc:	2301      	movs	r3, #1
    94be:	4619      	mov	r1, r3
    94c0:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    94c4:	3078      	adds	r0, #120	; 0x78
    94c6:	f004 ff24 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94ca:	2800      	cmp	r0, #0
    94cc:	d164      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    94ce:	68a0      	ldr	r0, [r4, #8]
    94d0:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    94d4:	f88d 1000 	strb.w	r1, [sp]
    94d8:	9900      	ldr	r1, [sp, #0]
    94da:	9100      	str	r1, [sp, #0]
    94dc:	f89d 2000 	ldrb.w	r2, [sp]
    94e0:	2100      	movs	r1, #0
    94e2:	b142      	cbz	r2, 94f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x532>
    94e4:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    94e8:	f890 1189 	ldrb.w	r1, [r0, #393]	; 0x189
    94ec:	f880 10fe 	strb.w	r1, [r0, #254]	; 0xfe
    94f0:	2100      	movs	r1, #0
    94f2:	2002      	movs	r0, #2
    94f4:	e045      	b.n	9582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    94f6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    94fa:	2301      	movs	r3, #1
    94fc:	2104      	movs	r1, #4
    94fe:	3078      	adds	r0, #120	; 0x78
    9500:	f004 ff07 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9504:	4605      	mov	r5, r0
    9506:	f7ff fedb 	bl	92c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2fc>
    950a:	2800      	cmp	r0, #0
    950c:	d144      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    950e:	4628      	mov	r0, r5
    9510:	f7ff fe9e 	bl	9250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    9514:	2800      	cmp	r0, #0
    9516:	d13f      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9518:	68a0      	ldr	r0, [r4, #8]
    951a:	2301      	movs	r3, #1
    951c:	2100      	movs	r1, #0
    951e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9522:	3078      	adds	r0, #120	; 0x78
    9524:	f004 fef5 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9528:	b178      	cbz	r0, 954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    952a:	68a0      	ldr	r0, [r4, #8]
    952c:	2301      	movs	r3, #1
    952e:	2104      	movs	r1, #4
    9530:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9534:	3078      	adds	r0, #120	; 0x78
    9536:	f004 feec 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    953a:	b930      	cbnz	r0, 954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    953c:	68a0      	ldr	r0, [r4, #8]
    953e:	f890 00aa 	ldrb.w	r0, [r0, #170]	; 0xaa
    9542:	b110      	cbz	r0, 954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    9544:	2100      	movs	r1, #0
    9546:	2012      	movs	r0, #18
    9548:	e01b      	b.n	9582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    954a:	68a0      	ldr	r0, [r4, #8]
    954c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9550:	290a      	cmp	r1, #10
    9552:	d01a      	beq.n	958a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    9554:	2d00      	cmp	r5, #0
    9556:	d11f      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9558:	f000 fb18 	bl	9b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc8>
    955c:	2800      	cmp	r0, #0
    955e:	d11b      	bne.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9560:	68a0      	ldr	r0, [r4, #8]
    9562:	2301      	movs	r3, #1
    9564:	2100      	movs	r1, #0
    9566:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    956a:	3078      	adds	r0, #120	; 0x78
    956c:	f004 fed1 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9570:	2800      	cmp	r0, #0
    9572:	d011      	beq.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9574:	68a0      	ldr	r0, [r4, #8]
    9576:	f890 019c 	ldrb.w	r0, [r0, #412]	; 0x19c
    957a:	2800      	cmp	r0, #0
    957c:	d00c      	beq.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    957e:	2100      	movs	r1, #0
    9580:	20ff      	movs	r0, #255	; 0xff
    9582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9586:	f000 bbb5 	b.w	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    958a:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    958e:	7101      	strb	r1, [r0, #4]
    9590:	2100      	movs	r1, #0
    9592:	2007      	movs	r0, #7
    9594:	e7f5      	b.n	9582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    9596:	e7ff      	b.n	9598 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    9598:	bd38      	pop	{r3, r4, r5, pc}
    959a:	0000      	.short	0x0000
    959c:	2000014c 	.word	0x2000014c
    95a0:	480a      	ldr	r0, [pc, #40]	; (95cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x608>)
    95a2:	b510      	push	{r4, lr}
    95a4:	6881      	ldr	r1, [r0, #8]
    95a6:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    95aa:	2801      	cmp	r0, #1
    95ac:	d009      	beq.n	95c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5fe>
    95ae:	8808      	ldrh	r0, [r1, #0]
    95b0:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    95b4:	3130      	adds	r1, #48	; 0x30
    95b6:	f005 fab9 	bl	eb2c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    95ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95be:	f7fd bd3f 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95c2:	2002      	movs	r0, #2
    95c4:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    95c8:	bd10      	pop	{r4, pc}
    95ca:	0000      	.short	0x0000
    95cc:	2000014c 	.word	0x2000014c
    95d0:	b570      	push	{r4, r5, r6, lr}
    95d2:	4c25      	ldr	r4, [pc, #148]	; (9668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    95d4:	0005      	movs	r5, r0
    95d6:	d12f      	bne.n	9638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    95d8:	f000 f8a4 	bl	9724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x760>
    95dc:	f000 f848 	bl	9670 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    95e0:	0005      	movs	r5, r0
    95e2:	d129      	bne.n	9638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    95e4:	8860      	ldrh	r0, [r4, #2]
    95e6:	0741      	lsls	r1, r0, #29
    95e8:	d506      	bpl.n	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    95ea:	68a1      	ldr	r1, [r4, #8]
    95ec:	f891 1088 	ldrb.w	r1, [r1, #136]	; 0x88
    95f0:	2907      	cmp	r1, #7
    95f2:	d101      	bne.n	95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x634>
    95f4:	2101      	movs	r1, #1
    95f6:	7021      	strb	r1, [r4, #0]
    95f8:	0780      	lsls	r0, r0, #30
    95fa:	d512      	bpl.n	9622 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    95fc:	68e0      	ldr	r0, [r4, #12]
    95fe:	78c0      	ldrb	r0, [r0, #3]
    9600:	281a      	cmp	r0, #26
    9602:	d205      	bcs.n	9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    9604:	4919      	ldr	r1, [pc, #100]	; (966c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    9606:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    960a:	b109      	cbz	r1, 9610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64c>
    960c:	4788      	blx	r1
    960e:	e008      	b.n	9622 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65e>
    9610:	28ff      	cmp	r0, #255	; 0xff
    9612:	d004      	beq.n	961e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x65a>
    9614:	f240 7144 	movw	r1, #1860	; 0x744
    9618:	2031      	movs	r0, #49	; 0x31
    961a:	f7fb fbdb 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    961e:	f001 f94d 	bl	a8bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    9622:	78a0      	ldrb	r0, [r4, #2]
    9624:	06c0      	lsls	r0, r0, #27
    9626:	d507      	bpl.n	9638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9628:	68a0      	ldr	r0, [r4, #8]
    962a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    962e:	290b      	cmp	r1, #11
    9630:	d102      	bne.n	9638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x674>
    9632:	210c      	movs	r1, #12
    9634:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9638:	7860      	ldrb	r0, [r4, #1]
    963a:	0700      	lsls	r0, r0, #28
    963c:	d511      	bpl.n	9662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    963e:	68a0      	ldr	r0, [r4, #8]
    9640:	2301      	movs	r3, #1
    9642:	2105      	movs	r1, #5
    9644:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9648:	3078      	adds	r0, #120	; 0x78
    964a:	f004 fe62 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    964e:	b128      	cbz	r0, 965c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    9650:	68a1      	ldr	r1, [r4, #8]
    9652:	2508      	movs	r5, #8
    9654:	2000      	movs	r0, #0
    9656:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    965a:	e002      	b.n	9662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69e>
    965c:	2000      	movs	r0, #0
    965e:	f7fc fbbb 	bl	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9662:	4628      	mov	r0, r5
    9664:	bd70      	pop	{r4, r5, r6, pc}
    9666:	0000      	.short	0x0000
    9668:	2000014c 	.word	0x2000014c
    966c:	200001c8 	.word	0x200001c8
    9670:	b570      	push	{r4, r5, r6, lr}
    9672:	4c2a      	ldr	r4, [pc, #168]	; (971c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>)
    9674:	2000      	movs	r0, #0
    9676:	78a1      	ldrb	r1, [r4, #2]
    9678:	07c9      	lsls	r1, r1, #31
    967a:	d015      	beq.n	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e4>
    967c:	6920      	ldr	r0, [r4, #16]
    967e:	2301      	movs	r3, #1
    9680:	2105      	movs	r1, #5
    9682:	78c5      	ldrb	r5, [r0, #3]
    9684:	68a0      	ldr	r0, [r4, #8]
    9686:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    968a:	3078      	adds	r0, #120	; 0x78
    968c:	f004 fe41 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9690:	b158      	cbz	r0, 96aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    9692:	1ead      	subs	r5, r5, #2
    9694:	2d0a      	cmp	r5, #10
    9696:	d206      	bcs.n	96a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e2>
    9698:	e8df f005 	tbb	[pc, r5]
    969c:	05050707 	.word	0x05050707
    96a0:	05050707 	.word	0x05050707
    96a4:	0707      	.short	0x0707
    96a6:	2008      	movs	r0, #8
    96a8:	bd70      	pop	{r4, r5, r6, pc}
    96aa:	6920      	ldr	r0, [r4, #16]
    96ac:	f7fd fba4 	bl	6df8 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    96b0:	b138      	cbz	r0, 96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    96b2:	6920      	ldr	r0, [r4, #16]
    96b4:	78c5      	ldrb	r5, [r0, #3]
    96b6:	b145      	cbz	r5, 96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    96b8:	2d01      	cmp	r5, #1
    96ba:	d006      	beq.n	96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    96bc:	2d16      	cmp	r5, #22
    96be:	d118      	bne.n	96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    96c0:	e003      	b.n	96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x706>
    96c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96c6:	f000 bd73 	b.w	a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    96ca:	68a0      	ldr	r0, [r4, #8]
    96cc:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    96d0:	f004 fe6d 	bl	e3ae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    96d4:	b168      	cbz	r0, 96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    96d6:	68a1      	ldr	r1, [r4, #8]
    96d8:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    96dc:	281f      	cmp	r0, #31
    96de:	d008      	beq.n	96f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72e>
    96e0:	2820      	cmp	r0, #32
    96e2:	d003      	beq.n	96ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    96e4:	2d16      	cmp	r5, #22
    96e6:	d00c      	beq.n	9702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    96e8:	2002      	movs	r0, #2
    96ea:	bd70      	pop	{r4, r5, r6, pc}
    96ec:	2026      	movs	r0, #38	; 0x26
    96ee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    96f2:	2d1a      	cmp	r5, #26
    96f4:	d207      	bcs.n	9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    96f6:	480a      	ldr	r0, [pc, #40]	; (9720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>)
    96f8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    96fc:	b118      	cbz	r0, 9706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    96fe:	4780      	blx	r0
    9700:	e003      	b.n	970a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x746>
    9702:	2020      	movs	r0, #32
    9704:	bd70      	pop	{r4, r5, r6, pc}
    9706:	f000 fd53 	bl	a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    970a:	68a2      	ldr	r2, [r4, #8]
    970c:	e9f2 1336 	ldrd	r1, r3, [r2, #216]!	; 0xd8
    9710:	1c49      	adds	r1, r1, #1
    9712:	f143 0300 	adc.w	r3, r3, #0
    9716:	e9c2 1300 	strd	r1, r3, [r2]
    971a:	bd70      	pop	{r4, r5, r6, pc}
    971c:	2000014c 	.word	0x2000014c
    9720:	20000160 	.word	0x20000160
    9724:	b570      	push	{r4, r5, r6, lr}
    9726:	4c22      	ldr	r4, [pc, #136]	; (97b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>)
    9728:	78a0      	ldrb	r0, [r4, #2]
    972a:	0700      	lsls	r0, r0, #28
    972c:	d53e      	bpl.n	97ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    972e:	68a0      	ldr	r0, [r4, #8]
    9730:	3078      	adds	r0, #120	; 0x78
    9732:	f006 f92e 	bl	f992 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9736:	b148      	cbz	r0, 974c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>
    9738:	68a0      	ldr	r0, [r4, #8]
    973a:	21fe      	movs	r1, #254	; 0xfe
    973c:	2500      	movs	r5, #0
    973e:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9742:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9746:	2919      	cmp	r1, #25
    9748:	d10c      	bne.n	9764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a0>
    974a:	e004      	b.n	9756 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x792>
    974c:	f240 714e 	movw	r1, #1870	; 0x74e
    9750:	2031      	movs	r0, #49	; 0x31
    9752:	f7fb fb3f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9756:	f880 50bb 	strb.w	r5, [r0, #187]	; 0xbb
    975a:	f7ff fd67 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    975e:	68a0      	ldr	r0, [r4, #8]
    9760:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9764:	68a0      	ldr	r0, [r4, #8]
    9766:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    976a:	291f      	cmp	r1, #31
    976c:	d002      	beq.n	9774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b0>
    976e:	2927      	cmp	r1, #39	; 0x27
    9770:	d113      	bne.n	979a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    9772:	e00b      	b.n	978c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c8>
    9774:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9778:	f004 fe19 	bl	e3ae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    977c:	b108      	cbz	r0, 9782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7be>
    977e:	2026      	movs	r0, #38	; 0x26
    9780:	e000      	b.n	9784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    9782:	2020      	movs	r0, #32
    9784:	68a1      	ldr	r1, [r4, #8]
    9786:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    978a:	e006      	b.n	979a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d6>
    978c:	2101      	movs	r1, #1
    978e:	f880 119d 	strb.w	r1, [r0, #413]	; 0x19d
    9792:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9796:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    979a:	68a0      	ldr	r0, [r4, #8]
    979c:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    97a0:	2908      	cmp	r1, #8
    97a2:	d103      	bne.n	97ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    97a4:	2102      	movs	r1, #2
    97a6:	7021      	strb	r1, [r4, #0]
    97a8:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    97ac:	bd70      	pop	{r4, r5, r6, pc}
    97ae:	0000      	.short	0x0000
    97b0:	2000014c 	.word	0x2000014c
    97b4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    97b6:	4606      	mov	r6, r0
    97b8:	4668      	mov	r0, sp
    97ba:	f7fc f977 	bl	5aac <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    97be:	b318      	cbz	r0, 9808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x844>
    97c0:	2222      	movs	r2, #34	; 0x22
    97c2:	2100      	movs	r1, #0
    97c4:	9800      	ldr	r0, [sp, #0]
    97c6:	f003 fb46 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    97ca:	2103      	movs	r1, #3
    97cc:	9800      	ldr	r0, [sp, #0]
    97ce:	f005 f873 	bl	e8b8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    97d2:	9800      	ldr	r0, [sp, #0]
    97d4:	7801      	ldrb	r1, [r0, #0]
    97d6:	f021 0110 	bic.w	r1, r1, #16
    97da:	7001      	strb	r1, [r0, #0]
    97dc:	4631      	mov	r1, r6
    97de:	f7fd fb37 	bl	6e50 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    97e2:	2500      	movs	r5, #0
    97e4:	4c5d      	ldr	r4, [pc, #372]	; (995c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    97e6:	f644 172f 	movw	r7, #18735	; 0x492f
    97ea:	2e0e      	cmp	r6, #14
    97ec:	d07e      	beq.n	98ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    97ee:	dc0e      	bgt.n	980e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84a>
    97f0:	f1a6 0602 	sub.w	r6, r6, #2
    97f4:	2e0c      	cmp	r6, #12
    97f6:	d21c      	bcs.n	9832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    97f8:	e8df f006 	tbb	[pc, r6]
    97fc:	a5491b1e 	.word	0xa5491b1e
    9800:	551b1ea5 	.word	0x551b1ea5
    9804:	3034a51b 	.word	0x3034a51b
    9808:	f640 1178 	movw	r1, #2424	; 0x978
    980c:	e0a1      	b.n	9952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    980e:	2e15      	cmp	r6, #21
    9810:	d05b      	beq.n	98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    9812:	dc08      	bgt.n	9826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x862>
    9814:	2e11      	cmp	r6, #17
    9816:	d014      	beq.n	9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87e>
    9818:	2e12      	cmp	r6, #18
    981a:	d01e      	beq.n	985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    981c:	2e13      	cmp	r6, #19
    981e:	d01c      	beq.n	985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x896>
    9820:	2e14      	cmp	r6, #20
    9822:	d106      	bne.n	9832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86e>
    9824:	e051      	b.n	98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x906>
    9826:	2e16      	cmp	r6, #22
    9828:	d027      	beq.n	987a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b6>
    982a:	2e17      	cmp	r6, #23
    982c:	d068      	beq.n	9900 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x93c>
    982e:	2eff      	cmp	r6, #255	; 0xff
    9830:	d071      	beq.n	9916 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x952>
    9832:	f640 11eb 	movw	r1, #2539	; 0x9eb
    9836:	e08c      	b.n	9952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x98e>
    9838:	68a1      	ldr	r1, [r4, #8]
    983a:	9800      	ldr	r0, [sp, #0]
    983c:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    9840:	e00e      	b.n	9860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x89c>
    9842:	68a0      	ldr	r0, [r4, #8]
    9844:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    9848:	9800      	ldr	r0, [sp, #0]
    984a:	f005 f811 	bl	e870 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    984e:	68a0      	ldr	r0, [r4, #8]
    9850:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9854:	9800      	ldr	r0, [sp, #0]
    9856:	f005 f80d 	bl	e874 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    985a:	e074      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    985c:	9800      	ldr	r0, [sp, #0]
    985e:	2106      	movs	r1, #6
    9860:	7101      	strb	r1, [r0, #4]
    9862:	e070      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9864:	9800      	ldr	r0, [sp, #0]
    9866:	210c      	movs	r1, #12
    9868:	7101      	strb	r1, [r0, #4]
    986a:	2159      	movs	r1, #89	; 0x59
    986c:	7141      	strb	r1, [r0, #5]
    986e:	7185      	strb	r5, [r0, #6]
    9870:	2136      	movs	r1, #54	; 0x36
    9872:	71c1      	strb	r1, [r0, #7]
    9874:	2111      	movs	r1, #17
    9876:	7201      	strb	r1, [r0, #8]
    9878:	e065      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    987a:	9800      	ldr	r0, [sp, #0]
    987c:	f8d4 1008 	ldr.w	r1, [r4, #8]
    9880:	f891 21c0 	ldrb.w	r2, [r1, #448]	; 0x1c0
    9884:	7102      	strb	r2, [r0, #4]
    9886:	f891 11c1 	ldrb.w	r1, [r1, #449]	; 0x1c1
    988a:	7141      	strb	r1, [r0, #5]
    988c:	e05b      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    988e:	68a1      	ldr	r1, [r4, #8]
    9890:	9800      	ldr	r0, [sp, #0]
    9892:	f501 7194 	add.w	r1, r1, #296	; 0x128
    9896:	f005 f800 	bl	e89a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    989a:	68a1      	ldr	r1, [r4, #8]
    989c:	9800      	ldr	r0, [sp, #0]
    989e:	31f4      	adds	r1, #244	; 0xf4
    98a0:	f004 fff8 	bl	e894 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    98a4:	e04f      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    98a6:	f001 fda9 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    98aa:	4038      	ands	r0, r7
    98ac:	e9cd 0501 	strd	r0, r5, [sp, #4]
    98b0:	68a1      	ldr	r1, [r4, #8]
    98b2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    98b6:	f891 10c4 	ldrb.w	r1, [r1, #196]	; 0xc4
    98ba:	4008      	ands	r0, r1
    98bc:	f88d 0004 	strb.w	r0, [sp, #4]
    98c0:	a901      	add	r1, sp, #4
    98c2:	9800      	ldr	r0, [sp, #0]
    98c4:	f004 fff3 	bl	e8ae <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    98c8:	e03d      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    98ca:	68a0      	ldr	r0, [r4, #8]
    98cc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
    98d0:	9800      	ldr	r0, [sp, #0]
    98d2:	f004 fff9 	bl	e8c8 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    98d6:	68a0      	ldr	r0, [r4, #8]
    98d8:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    98dc:	9800      	ldr	r0, [sp, #0]
    98de:	f004 fff7 	bl	e8d0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    98e2:	68a0      	ldr	r0, [r4, #8]
    98e4:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    98e8:	9800      	ldr	r0, [sp, #0]
    98ea:	e000      	b.n	98ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92a>
    98ec:	e014      	b.n	9918 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x954>
    98ee:	f004 fff3 	bl	e8d8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    98f2:	68a0      	ldr	r0, [r4, #8]
    98f4:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    98f8:	9800      	ldr	r0, [sp, #0]
    98fa:	f004 fff1 	bl	e8e0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    98fe:	e022      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9900:	68a1      	ldr	r1, [r4, #8]
    9902:	f891 01be 	ldrb.w	r0, [r1, #446]	; 0x1be
    9906:	2801      	cmp	r0, #1
    9908:	9800      	ldr	r0, [sp, #0]
    990a:	d0b9      	beq.n	9880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8bc>
    990c:	f811 2f6a 	ldrb.w	r2, [r1, #106]!
    9910:	7102      	strb	r2, [r0, #4]
    9912:	7849      	ldrb	r1, [r1, #1]
    9914:	e7b9      	b.n	988a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c6>
    9916:	e00e      	b.n	9936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    9918:	9501      	str	r5, [sp, #4]
    991a:	9502      	str	r5, [sp, #8]
    991c:	f001 fd6e 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9920:	4038      	ands	r0, r7
    9922:	f88d 0004 	strb.w	r0, [sp, #4]
    9926:	0a00      	lsrs	r0, r0, #8
    9928:	f88d 0005 	strb.w	r0, [sp, #5]
    992c:	a901      	add	r1, sp, #4
    992e:	9800      	ldr	r0, [sp, #0]
    9930:	f004 ffb8 	bl	e8a4 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9934:	e007      	b.n	9946 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x982>
    9936:	68a0      	ldr	r0, [r4, #8]
    9938:	f890 219f 	ldrb.w	r2, [r0, #415]	; 0x19f
    993c:	f8d0 11a0 	ldr.w	r1, [r0, #416]	; 0x1a0
    9940:	9800      	ldr	r0, [sp, #0]
    9942:	f004 ff99 	bl	e878 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9946:	f7fc f88b 	bl	5a60 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    994a:	2800      	cmp	r0, #0
    994c:	d104      	bne.n	9958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x994>
    994e:	f640 11ef 	movw	r1, #2543	; 0x9ef
    9952:	2031      	movs	r0, #49	; 0x31
    9954:	f7fb fa3e 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9958:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    995a:	0000      	.short	0x0000
    995c:	2000014c 	.word	0x2000014c
    9960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9964:	4c88      	ldr	r4, [pc, #544]	; (9b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>)
    9966:	4682      	mov	sl, r0
    9968:	4689      	mov	r9, r1
    996a:	68a0      	ldr	r0, [r4, #8]
    996c:	8800      	ldrh	r0, [r0, #0]
    996e:	f7fb fe61 	bl	5634 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    9972:	0006      	movs	r6, r0
    9974:	d00a      	beq.n	998c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    9976:	8860      	ldrh	r0, [r4, #2]
    9978:	f04f 0500 	mov.w	r5, #0
    997c:	05c0      	lsls	r0, r0, #23
    997e:	68a0      	ldr	r0, [r4, #8]
    9980:	d509      	bpl.n	9996 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    9982:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
    9986:	f880 511c 	strb.w	r5, [r0, #284]	; 0x11c
    998a:	e008      	b.n	999e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    998c:	f640 5197 	movw	r1, #3479	; 0xd97
    9990:	2031      	movs	r0, #49	; 0x31
    9992:	f7fb fa1f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9996:	f830 1fac 	ldrh.w	r1, [r0, #172]!
    999a:	1c49      	adds	r1, r1, #1
    999c:	8001      	strh	r1, [r0, #0]
    999e:	f001 f941 	bl	ac24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    99a2:	f04f 0801 	mov.w	r8, #1
    99a6:	b328      	cbz	r0, 99f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    99a8:	8860      	ldrh	r0, [r4, #2]
    99aa:	0500      	lsls	r0, r0, #20
    99ac:	d506      	bpl.n	99bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    99ae:	68a0      	ldr	r0, [r4, #8]
    99b0:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    99b4:	b111      	cbz	r1, 99bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    99b6:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    99ba:	e01b      	b.n	99f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    99bc:	68a0      	ldr	r0, [r4, #8]
    99be:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    99c2:	1c49      	adds	r1, r1, #1
    99c4:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    99c8:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    99cc:	428a      	cmp	r2, r1
    99ce:	d301      	bcc.n	99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    99d0:	1a53      	subs	r3, r2, r1
    99d2:	e000      	b.n	99d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    99d4:	2300      	movs	r3, #0
    99d6:	88a7      	ldrh	r7, [r4, #4]
    99d8:	1d7f      	adds	r7, r7, #5
    99da:	42bb      	cmp	r3, r7
    99dc:	d801      	bhi.n	99e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    99de:	f880 80aa 	strb.w	r8, [r0, #170]	; 0xaa
    99e2:	4291      	cmp	r1, r2
    99e4:	d306      	bcc.n	99f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa30>
    99e6:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    99ea:	21ff      	movs	r1, #255	; 0xff
    99ec:	f880 120a 	strb.w	r1, [r0, #522]	; 0x20a
    99f0:	f7fd fb26 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    99f4:	8860      	ldrh	r0, [r4, #2]
    99f6:	f04f 0702 	mov.w	r7, #2
    99fa:	f410 7f40 	tst.w	r0, #768	; 0x300
    99fe:	d00e      	beq.n	9a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    9a00:	68a0      	ldr	r0, [r4, #8]
    9a02:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9a06:	b111      	cbz	r1, 9a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4a>
    9a08:	2903      	cmp	r1, #3
    9a0a:	d108      	bne.n	9a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    9a0c:	e002      	b.n	9a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa50>
    9a0e:	f880 8089 	strb.w	r8, [r0, #137]	; 0x89
    9a12:	e001      	b.n	9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa54>
    9a14:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9a18:	2101      	movs	r1, #1
    9a1a:	f7fe fce9 	bl	83f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9a1e:	68a0      	ldr	r0, [r4, #8]
    9a20:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9a24:	2901      	cmp	r1, #1
    9a26:	d104      	bne.n	9a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9a28:	8861      	ldrh	r1, [r4, #2]
    9a2a:	0549      	lsls	r1, r1, #21
    9a2c:	d501      	bpl.n	9a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6e>
    9a2e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    9a32:	f1ba 0f00 	cmp.w	sl, #0
    9a36:	d176      	bne.n	9b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9a38:	78a1      	ldrb	r1, [r4, #2]
    9a3a:	0649      	lsls	r1, r1, #25
    9a3c:	d502      	bpl.n	9a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa80>
    9a3e:	f8a0 5130 	strh.w	r5, [r0, #304]	; 0x130
    9a42:	e004      	b.n	9a4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa8a>
    9a44:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    9a48:	1c49      	adds	r1, r1, #1
    9a4a:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9a4e:	4648      	mov	r0, r9
    9a50:	f7ff fdbe 	bl	95d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x60c>
    9a54:	ea40 0009 	orr.w	r0, r0, r9
    9a58:	4681      	mov	r9, r0
    9a5a:	f7ff fd23 	bl	94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e0>
    9a5e:	68a7      	ldr	r7, [r4, #8]
    9a60:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
    9a64:	1c40      	adds	r0, r0, #1
    9a66:	f8a7 0110 	strh.w	r0, [r7, #272]	; 0x110
    9a6a:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
    9a6e:	b128      	cbz	r0, 9a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    9a70:	f7fc fa1e 	bl	5eb0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    9a74:	b1b0      	cbz	r0, 9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a76:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9a7a:	e013      	b.n	9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a7c:	f7fc f898 	bl	5bb0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    9a80:	b108      	cbz	r0, 9a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac2>
    9a82:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9a86:	f7fc f88d 	bl	5ba4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    9a8a:	b158      	cbz	r0, 9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a8c:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    9a90:	1c40      	adds	r0, r0, #1
    9a92:	b2c0      	uxtb	r0, r0
    9a94:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    9a98:	2802      	cmp	r0, #2
    9a9a:	d903      	bls.n	9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xae0>
    9a9c:	f8a7 5110 	strh.w	r5, [r7, #272]	; 0x110
    9aa0:	f887 511c 	strb.w	r5, [r7, #284]	; 0x11c
    9aa4:	68a0      	ldr	r0, [r4, #8]
    9aa6:	2301      	movs	r3, #1
    9aa8:	2100      	movs	r1, #0
    9aaa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9aae:	3078      	adds	r0, #120	; 0x78
    9ab0:	f004 fc2f 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ab4:	b920      	cbnz	r0, 9ac0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafc>
    9ab6:	68a0      	ldr	r0, [r4, #8]
    9ab8:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9abc:	280c      	cmp	r0, #12
    9abe:	d15f      	bne.n	9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9ac0:	68a0      	ldr	r0, [r4, #8]
    9ac2:	2301      	movs	r3, #1
    9ac4:	2100      	movs	r1, #0
    9ac6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9aca:	3078      	adds	r0, #120	; 0x78
    9acc:	f004 fc21 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ad0:	b350      	cbz	r0, 9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9ad2:	68a0      	ldr	r0, [r4, #8]
    9ad4:	2301      	movs	r3, #1
    9ad6:	2100      	movs	r1, #0
    9ad8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9adc:	3078      	adds	r0, #120	; 0x78
    9ade:	f004 fc18 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ae2:	b308      	cbz	r0, 9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9ae4:	68a0      	ldr	r0, [r4, #8]
    9ae6:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    9aea:	2902      	cmp	r1, #2
    9aec:	d148      	bne.n	9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9aee:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
    9af2:	b9c8      	cbnz	r0, 9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9af4:	4630      	mov	r0, r6
    9af6:	f003 fea3 	bl	d840 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9afa:	b1a8      	cbz	r0, 9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9afc:	68a0      	ldr	r0, [r4, #8]
    9afe:	3078      	adds	r0, #120	; 0x78
    9b00:	f005 ff47 	bl	f992 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9b04:	b980      	cbnz	r0, 9b28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9b06:	68a1      	ldr	r1, [r4, #8]
    9b08:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
    9b0c:	2801      	cmp	r0, #1
    9b0e:	d937      	bls.n	9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9b10:	f881 8112 	strb.w	r8, [r1, #274]	; 0x112
    9b14:	f8b1 20ae 	ldrh.w	r2, [r1, #174]	; 0xae
    9b18:	f8b1 00ac 	ldrh.w	r0, [r1, #172]	; 0xac
    9b1c:	1e93      	subs	r3, r2, #2
    9b1e:	4298      	cmp	r0, r3
    9b20:	db03      	blt.n	9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    9b22:	2001      	movs	r0, #1
    9b24:	e004      	b.n	9b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>
    9b26:	e01d      	b.n	9b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba0>
    9b28:	e02a      	b.n	9b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>
    9b2a:	1a10      	subs	r0, r2, r0
    9b2c:	1e40      	subs	r0, r0, #1
    9b2e:	b280      	uxth	r0, r0
    9b30:	f8b1 2110 	ldrh.w	r2, [r1, #272]	; 0x110
    9b34:	88a3      	ldrh	r3, [r4, #4]
    9b36:	429a      	cmp	r2, r3
    9b38:	d301      	bcc.n	9b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    9b3a:	2201      	movs	r2, #1
    9b3c:	e002      	b.n	9b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    9b3e:	1a9a      	subs	r2, r3, r2
    9b40:	1c52      	adds	r2, r2, #1
    9b42:	b292      	uxth	r2, r2
    9b44:	4290      	cmp	r0, r2
    9b46:	d900      	bls.n	9b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb86>
    9b48:	4610      	mov	r0, r2
    9b4a:	2801      	cmp	r0, #1
    9b4c:	d102      	bne.n	9b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb90>
    9b4e:	bf00      	nop
    9b50:	f881 5112 	strb.w	r5, [r1, #274]	; 0x112
    9b54:	68a1      	ldr	r1, [r4, #8]
    9b56:	f8b1 207c 	ldrh.w	r2, [r1, #124]	; 0x7c
    9b5a:	4410      	add	r0, r2
    9b5c:	f8a1 010c 	strh.w	r0, [r1, #268]	; 0x10c
    9b60:	f001 f92c 	bl	adbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df8>
    9b64:	78a0      	ldrb	r0, [r4, #2]
    9b66:	464a      	mov	r2, r9
    9b68:	f3c0 1180 	ubfx	r1, r0, #6, #1
    9b6c:	4650      	mov	r0, sl
    9b6e:	f001 f86d 	bl	ac4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c88>
    9b72:	68a0      	ldr	r0, [r4, #8]
    9b74:	f880 5113 	strb.w	r5, [r0, #275]	; 0x113
    9b78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b7c:	f7fb bf5a 	b.w	5a34 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    9b80:	2001      	movs	r0, #1
    9b82:	68a1      	ldr	r1, [r4, #8]
    9b84:	e7e4      	b.n	9b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9b86:	0000      	.short	0x0000
    9b88:	2000014c 	.word	0x2000014c
    9b8c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9b8e:	4c58      	ldr	r4, [pc, #352]	; (9cf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>)
    9b90:	2301      	movs	r3, #1
    9b92:	2100      	movs	r1, #0
    9b94:	68a0      	ldr	r0, [r4, #8]
    9b96:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9b9a:	3078      	adds	r0, #120	; 0x78
    9b9c:	f004 fbb9 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ba0:	2800      	cmp	r0, #0
    9ba2:	d07d      	beq.n	9ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcdc>
    9ba4:	68a0      	ldr	r0, [r4, #8]
    9ba6:	f890 11c5 	ldrb.w	r1, [r0, #453]	; 0x1c5
    9baa:	2500      	movs	r5, #0
    9bac:	b139      	cbz	r1, 9bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbfa>
    9bae:	2100      	movs	r1, #0
    9bb0:	200e      	movs	r0, #14
    9bb2:	f000 f89f 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9bb6:	68a0      	ldr	r0, [r4, #8]
    9bb8:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
    9bbc:	e095      	b.n	9cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9bbe:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    9bc2:	b119      	cbz	r1, 9bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc08>
    9bc4:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9bc8:	0789      	lsls	r1, r1, #30
    9bca:	d016      	beq.n	9bfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc36>
    9bcc:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9bd0:	f88d 1004 	strb.w	r1, [sp, #4]
    9bd4:	9901      	ldr	r1, [sp, #4]
    9bd6:	9101      	str	r1, [sp, #4]
    9bd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9bdc:	b141      	cbz	r1, 9bf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc2c>
    9bde:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    9be2:	f88d 1000 	strb.w	r1, [sp]
    9be6:	9900      	ldr	r1, [sp, #0]
    9be8:	9100      	str	r1, [sp, #0]
    9bea:	f89d 1000 	ldrb.w	r1, [sp]
    9bee:	b189      	cbz	r1, 9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc50>
    9bf0:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    9bf4:	2901      	cmp	r1, #1
    9bf6:	d02f      	beq.n	9c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc94>
    9bf8:	e071      	b.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9bfa:	2100      	movs	r1, #0
    9bfc:	200c      	movs	r0, #12
    9bfe:	f000 f879 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9c02:	68a0      	ldr	r0, [r4, #8]
    9c04:	f810 1fbe 	ldrb.w	r1, [r0, #190]!
    9c08:	f041 0101 	orr.w	r1, r1, #1
    9c0c:	7001      	strb	r1, [r0, #0]
    9c0e:	f880 5106 	strb.w	r5, [r0, #262]	; 0x106
    9c12:	e06a      	b.n	9cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9c14:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9c18:	2924      	cmp	r1, #36	; 0x24
    9c1a:	d01b      	beq.n	9c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9c1c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9c20:	2924      	cmp	r1, #36	; 0x24
    9c22:	d017      	beq.n	9c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9c24:	f05f 0300 	movs.w	r3, #0
    9c28:	f500 72d3 	add.w	r2, r0, #422	; 0x1a6
    9c2c:	f500 71da 	add.w	r1, r0, #436	; 0x1b4
    9c30:	f004 ffa0 	bl	eb74 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9c34:	68a0      	ldr	r0, [r4, #8]
    9c36:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    9c3a:	2100      	movs	r1, #0
    9c3c:	2014      	movs	r0, #20
    9c3e:	f000 f859 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9c42:	68a1      	ldr	r1, [r4, #8]
    9c44:	f101 0030 	add.w	r0, r1, #48	; 0x30
    9c48:	8bc2      	ldrh	r2, [r0, #30]
    9c4a:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9c4e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9c50:	8048      	strh	r0, [r1, #2]
    9c52:	e04a      	b.n	9cea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd26>
    9c54:	2301      	movs	r3, #1
    9c56:	e7e7      	b.n	9c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc64>
    9c58:	f890 11bf 	ldrb.w	r1, [r0, #447]	; 0x1bf
    9c5c:	f88d 1000 	strb.w	r1, [sp]
    9c60:	9900      	ldr	r1, [sp, #0]
    9c62:	9100      	str	r1, [sp, #0]
    9c64:	f89d 1000 	ldrb.w	r1, [sp]
    9c68:	bb31      	cbnz	r1, 9cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    9c6a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c6e:	2301      	movs	r3, #1
    9c70:	210b      	movs	r1, #11
    9c72:	3078      	adds	r0, #120	; 0x78
    9c74:	f004 fb4d 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c78:	b9f0      	cbnz	r0, 9cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf4>
    9c7a:	68a0      	ldr	r0, [r4, #8]
    9c7c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    9c80:	f005 fe8f 	bl	f9a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9c84:	4605      	mov	r5, r0
    9c86:	68a0      	ldr	r0, [r4, #8]
    9c88:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    9c8c:	f005 fe89 	bl	f9a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9c90:	4606      	mov	r6, r0
    9c92:	68a0      	ldr	r0, [r4, #8]
    9c94:	f890 11c0 	ldrb.w	r1, [r0, #448]	; 0x1c0
    9c98:	4628      	mov	r0, r5
    9c9a:	f005 fe8d 	bl	f9b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9c9e:	e000      	b.n	9ca2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcde>
    9ca0:	e01e      	b.n	9ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1c>
    9ca2:	b150      	cbz	r0, 9cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9ca4:	68a0      	ldr	r0, [r4, #8]
    9ca6:	f890 11c1 	ldrb.w	r1, [r0, #449]	; 0x1c1
    9caa:	4630      	mov	r0, r6
    9cac:	f005 fe84 	bl	f9b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9cb0:	b118      	cbz	r0, 9cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf6>
    9cb2:	2000      	movs	r0, #0
    9cb4:	f000 f922 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9cb8:	e011      	b.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9cba:	68a0      	ldr	r0, [r4, #8]
    9cbc:	2301      	movs	r3, #1
    9cbe:	2103      	movs	r1, #3
    9cc0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9cc4:	3078      	adds	r0, #120	; 0x78
    9cc6:	f004 fb24 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cca:	b940      	cbnz	r0, 9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9ccc:	68a0      	ldr	r0, [r4, #8]
    9cce:	2301      	movs	r3, #1
    9cd0:	2102      	movs	r1, #2
    9cd2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9cd6:	3078      	adds	r0, #120	; 0x78
    9cd8:	f004 fb1b 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9cdc:	b108      	cbz	r0, 9ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1e>
    9cde:	2000      	movs	r0, #0
    9ce0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9ce2:	2100      	movs	r1, #0
    9ce4:	2016      	movs	r0, #22
    9ce6:	f000 f805 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9cea:	2001      	movs	r0, #1
    9cec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9cee:	0000      	.short	0x0000
    9cf0:	2000014c 	.word	0x2000014c
    9cf4:	b570      	push	{r4, r5, r6, lr}
    9cf6:	4c0d      	ldr	r4, [pc, #52]	; (9d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    9cf8:	4606      	mov	r6, r0
    9cfa:	460d      	mov	r5, r1
    9cfc:	68a0      	ldr	r0, [r4, #8]
    9cfe:	3078      	adds	r0, #120	; 0x78
    9d00:	f005 fe47 	bl	f992 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9d04:	b120      	cbz	r0, 9d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4c>
    9d06:	f640 2102 	movw	r1, #2562	; 0xa02
    9d0a:	2031      	movs	r0, #49	; 0x31
    9d0c:	f7fb f862 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d10:	68a2      	ldr	r2, [r4, #8]
    9d12:	2000      	movs	r0, #0
    9d14:	f882 60fc 	strb.w	r6, [r2, #252]	; 0xfc
    9d18:	b115      	cbz	r5, 9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd5c>
    9d1a:	f8a2 00b8 	strh.w	r0, [r2, #184]	; 0xb8
    9d1e:	bd70      	pop	{r4, r5, r6, pc}
    9d20:	f822 0fb2 	strh.w	r0, [r2, #178]!
    9d24:	2001      	movs	r0, #1
    9d26:	7110      	strb	r0, [r2, #4]
    9d28:	bd70      	pop	{r4, r5, r6, pc}
    9d2a:	0000      	.short	0x0000
    9d2c:	2000014c 	.word	0x2000014c
    9d30:	b570      	push	{r4, r5, r6, lr}
    9d32:	4c1b      	ldr	r4, [pc, #108]	; (9da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xddc>)
    9d34:	2500      	movs	r5, #0
    9d36:	68a0      	ldr	r0, [r4, #8]
    9d38:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    9d3c:	2901      	cmp	r1, #1
    9d3e:	d00a      	beq.n	9d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd92>
    9d40:	2902      	cmp	r1, #2
    9d42:	d12c      	bne.n	9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9d44:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    9d48:	2206      	movs	r2, #6
    9d4a:	b1a1      	cbz	r1, 9d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdb2>
    9d4c:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9d50:	2101      	movs	r1, #1
    9d52:	2002      	movs	r0, #2
    9d54:	e01e      	b.n	9d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9d56:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    9d5a:	2900      	cmp	r1, #0
    9d5c:	d11f      	bne.n	9d9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdda>
    9d5e:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9d62:	f500 7190 	add.w	r1, r0, #288	; 0x120
    9d66:	2200      	movs	r2, #0
    9d68:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
    9d6c:	f004 fa89 	bl	e282 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9d70:	2101      	movs	r1, #1
    9d72:	2005      	movs	r0, #5
    9d74:	e00e      	b.n	9d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9d76:	21c4      	movs	r1, #196	; 0xc4
    9d78:	5c09      	ldrb	r1, [r1, r0]
    9d7a:	0889      	lsrs	r1, r1, #2
    9d7c:	f011 0f01 	tst.w	r1, #1
    9d80:	d005      	beq.n	9d8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdca>
    9d82:	2311      	movs	r3, #17
    9d84:	2103      	movs	r1, #3
    9d86:	f800 1ffe 	strb.w	r1, [r0, #254]!
    9d8a:	7042      	strb	r2, [r0, #1]
    9d8c:	e000      	b.n	9d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdcc>
    9d8e:	230d      	movs	r3, #13
    9d90:	2101      	movs	r1, #1
    9d92:	4618      	mov	r0, r3
    9d94:	f7ff ffae 	bl	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    9d98:	68a0      	ldr	r0, [r4, #8]
    9d9a:	f880 518b 	strb.w	r5, [r0, #395]	; 0x18b
    9d9e:	bd70      	pop	{r4, r5, r6, pc}
    9da0:	2000014c 	.word	0x2000014c
    9da4:	b570      	push	{r4, r5, r6, lr}
    9da6:	4a2b      	ldr	r2, [pc, #172]	; (9e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>)
    9da8:	4603      	mov	r3, r0
    9daa:	8850      	ldrh	r0, [r2, #2]
    9dac:	4318      	orrs	r0, r3
    9dae:	8050      	strh	r0, [r2, #2]
    9db0:	4610      	mov	r0, r2
    9db2:	2b40      	cmp	r3, #64	; 0x40
    9db4:	6880      	ldr	r0, [r0, #8]
    9db6:	d00d      	beq.n	9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe10>
    9db8:	079e      	lsls	r6, r3, #30
    9dba:	f04f 0500 	mov.w	r5, #0
    9dbe:	f04f 0401 	mov.w	r4, #1
    9dc2:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9dc6:	d50c      	bpl.n	9de2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1e>
    9dc8:	b14e      	cbz	r6, 9dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    9dca:	f640 5104 	movw	r1, #3332	; 0xd04
    9dce:	2031      	movs	r0, #49	; 0x31
    9dd0:	f7fb f800 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9dd8:	2104      	movs	r1, #4
    9dda:	f7fe bb09 	b.w	83f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9dde:	60d1      	str	r1, [r2, #12]
    9de0:	e01c      	b.n	9e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe58>
    9de2:	b1c6      	cbz	r6, 9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9de4:	6111      	str	r1, [r2, #16]
    9de6:	78c9      	ldrb	r1, [r1, #3]
    9de8:	2906      	cmp	r1, #6
    9dea:	d002      	beq.n	9df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe2e>
    9dec:	290b      	cmp	r1, #11
    9dee:	d112      	bne.n	9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9df0:	e009      	b.n	9e06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe42>
    9df2:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9df6:	2917      	cmp	r1, #23
    9df8:	d10d      	bne.n	9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9dfa:	2100      	movs	r1, #0
    9dfc:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9e00:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
    9e04:	e007      	b.n	9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9e06:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9e0a:	2911      	cmp	r1, #17
    9e0c:	d103      	bne.n	9e16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    9e0e:	f880 508a 	strb.w	r5, [r0, #138]	; 0x8a
    9e12:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    9e16:	0799      	lsls	r1, r3, #30
    9e18:	d516      	bpl.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9e1a:	68d1      	ldr	r1, [r2, #12]
    9e1c:	78c9      	ldrb	r1, [r1, #3]
    9e1e:	2905      	cmp	r1, #5
    9e20:	d002      	beq.n	9e28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe64>
    9e22:	290b      	cmp	r1, #11
    9e24:	d110      	bne.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9e26:	e009      	b.n	9e3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe78>
    9e28:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9e2c:	2915      	cmp	r1, #21
    9e2e:	d10b      	bne.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9e30:	2100      	movs	r1, #0
    9e32:	e9e0 1136 	strd	r1, r1, [r0, #216]!	; 0xd8
    9e36:	f800 4c4d 	strb.w	r4, [r0, #-77]
    9e3a:	e005      	b.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9e3c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9e40:	2910      	cmp	r1, #16
    9e42:	d101      	bne.n	9e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9e44:	f880 508b 	strb.w	r5, [r0, #139]	; 0x8b
    9e48:	0698      	lsls	r0, r3, #26
    9e4a:	d501      	bpl.n	9e50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    9e4c:	2008      	movs	r0, #8
    9e4e:	7050      	strb	r0, [r2, #1]
    9e50:	bd70      	pop	{r4, r5, r6, pc}
    9e52:	0000      	.short	0x0000
    9e54:	2000014c 	.word	0x2000014c
    9e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e5c:	4c26      	ldr	r4, [pc, #152]	; (9ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf34>)
    9e5e:	2501      	movs	r5, #1
    9e60:	68a2      	ldr	r2, [r4, #8]
    9e62:	f892 01a6 	ldrb.w	r0, [r2, #422]	; 0x1a6
    9e66:	b108      	cbz	r0, 9e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea8>
    9e68:	2601      	movs	r6, #1
    9e6a:	e000      	b.n	9e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeaa>
    9e6c:	2600      	movs	r6, #0
    9e6e:	f892 11a7 	ldrb.w	r1, [r2, #423]	; 0x1a7
    9e72:	b109      	cbz	r1, 9e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    9e74:	2701      	movs	r7, #1
    9e76:	e000      	b.n	9e7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb6>
    9e78:	2700      	movs	r7, #0
    9e7a:	b90e      	cbnz	r6, 9e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xebc>
    9e7c:	f892 006e 	ldrb.w	r0, [r2, #110]	; 0x6e
    9e80:	b90f      	cbnz	r7, 9e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec2>
    9e82:	f892 106f 	ldrb.w	r1, [r2, #111]	; 0x6f
    9e86:	f102 0366 	add.w	r3, r2, #102	; 0x66
    9e8a:	7218      	strb	r0, [r3, #8]
    9e8c:	7259      	strb	r1, [r3, #9]
    9e8e:	20ff      	movs	r0, #255	; 0xff
    9e90:	7298      	strb	r0, [r3, #10]
    9e92:	f892 01be 	ldrb.w	r0, [r2, #446]	; 0x1be
    9e96:	2801      	cmp	r0, #1
    9e98:	d001      	beq.n	9e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    9e9a:	b906      	cbnz	r6, 9e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    9e9c:	b117      	cbz	r7, 9ea4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    9e9e:	2000      	movs	r0, #0
    9ea0:	f000 f82c 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    9ea4:	68a0      	ldr	r0, [r4, #8]
    9ea6:	3030      	adds	r0, #48	; 0x30
    9ea8:	f004 fed5 	bl	ec56 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9eac:	4606      	mov	r6, r0
    9eae:	2105      	movs	r1, #5
    9eb0:	68a0      	ldr	r0, [r4, #8]
    9eb2:	f7fe fa9d 	bl	83f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9eb6:	68a0      	ldr	r0, [r4, #8]
    9eb8:	3030      	adds	r0, #48	; 0x30
    9eba:	f004 fecc 	bl	ec56 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9ebe:	4607      	mov	r7, r0
    9ec0:	42be      	cmp	r6, r7
    9ec2:	d20a      	bcs.n	9eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    9ec4:	f7f8 fb72 	bl	25ac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9ec8:	4601      	mov	r1, r0
    9eca:	1bb8      	subs	r0, r7, r6
    9ecc:	2865      	cmp	r0, #101	; 0x65
    9ece:	d200      	bcs.n	9ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    9ed0:	2065      	movs	r0, #101	; 0x65
    9ed2:	f7f8 faa3 	bl	241c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9ed6:	b100      	cbz	r0, 9eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf16>
    9ed8:	2500      	movs	r5, #0
    9eda:	68a0      	ldr	r0, [r4, #8]
    9edc:	f004 fe65 	bl	ebaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ee0:	b130      	cbz	r0, 9ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2c>
    9ee2:	68a1      	ldr	r1, [r4, #8]
    9ee4:	f501 72f5 	add.w	r2, r1, #490	; 0x1ea
    9ee8:	8808      	ldrh	r0, [r1, #0]
    9eea:	3130      	adds	r1, #48	; 0x30
    9eec:	f004 fe1e 	bl	eb2c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9ef0:	4628      	mov	r0, r5
    9ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ef6:	0000      	.short	0x0000
    9ef8:	2000014c 	.word	0x2000014c
    9efc:	b510      	push	{r4, lr}
    9efe:	4c10      	ldr	r4, [pc, #64]	; (9f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>)
    9f00:	68a1      	ldr	r1, [r4, #8]
    9f02:	880a      	ldrh	r2, [r1, #0]
    9f04:	f8a1 2216 	strh.w	r2, [r1, #534]	; 0x216
    9f08:	f881 0214 	strb.w	r0, [r1, #532]	; 0x214
    9f0c:	f891 006e 	ldrb.w	r0, [r1, #110]	; 0x6e
    9f10:	f005 fd47 	bl	f9a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f14:	68a1      	ldr	r1, [r4, #8]
    9f16:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    9f1a:	f891 006f 	ldrb.w	r0, [r1, #111]	; 0x6f
    9f1e:	f005 fd40 	bl	f9a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9f22:	68a2      	ldr	r2, [r4, #8]
    9f24:	f202 2112 	addw	r1, r2, #530	; 0x212
    9f28:	f882 0219 	strb.w	r0, [r2, #537]	; 0x219
    9f2c:	20ff      	movs	r0, #255	; 0xff
    9f2e:	7008      	strb	r0, [r1, #0]
    9f30:	2000      	movs	r0, #0
    9f32:	f882 01be 	strb.w	r0, [r2, #446]	; 0x1be
    9f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f3a:	f7fd b881 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f3e:	0000      	.short	0x0000
    9f40:	2000014c 	.word	0x2000014c
    9f44:	b510      	push	{r4, lr}
    9f46:	4c15      	ldr	r4, [pc, #84]	; (9f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    9f48:	2301      	movs	r3, #1
    9f4a:	2100      	movs	r1, #0
    9f4c:	68a0      	ldr	r0, [r4, #8]
    9f4e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9f52:	3078      	adds	r0, #120	; 0x78
    9f54:	f004 f9dd 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f58:	b190      	cbz	r0, 9f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfbc>
    9f5a:	6920      	ldr	r0, [r4, #16]
    9f5c:	f004 fc20 	bl	e7a0 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9f60:	68a1      	ldr	r1, [r4, #8]
    9f62:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    9f66:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9f6a:	f005 fd33 	bl	f9d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9f6e:	b148      	cbz	r0, 9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc0>
    9f70:	68a0      	ldr	r0, [r4, #8]
    9f72:	2128      	movs	r1, #40	; 0x28
    9f74:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    9f78:	307e      	adds	r0, #126	; 0x7e
    9f7a:	21ff      	movs	r1, #255	; 0xff
    9f7c:	7781      	strb	r1, [r0, #30]
    9f7e:	e00b      	b.n	9f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>
    9f80:	2001      	movs	r0, #1
    9f82:	bd10      	pop	{r4, pc}
    9f84:	68a1      	ldr	r1, [r4, #8]
    9f86:	6920      	ldr	r0, [r4, #16]
    9f88:	f501 71d3 	add.w	r1, r1, #422	; 0x1a6
    9f8c:	f004 fc03 	bl	e796 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9f90:	68a1      	ldr	r1, [r4, #8]
    9f92:	200b      	movs	r0, #11
    9f94:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9f98:	2000      	movs	r0, #0
    9f9a:	bd10      	pop	{r4, pc}
    9f9c:	2000014c 	.word	0x2000014c
    9fa0:	b570      	push	{r4, r5, r6, lr}
    9fa2:	4c29      	ldr	r4, [pc, #164]	; (a048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    9fa4:	2301      	movs	r3, #1
    9fa6:	2100      	movs	r1, #0
    9fa8:	68a0      	ldr	r0, [r4, #8]
    9faa:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9fae:	3078      	adds	r0, #120	; 0x78
    9fb0:	f004 f9af 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fb4:	b1b8      	cbz	r0, 9fe6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1022>
    9fb6:	2100      	movs	r1, #0
    9fb8:	6920      	ldr	r0, [r4, #16]
    9fba:	f004 fbc4 	bl	e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9fbe:	b1a0      	cbz	r0, 9fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1026>
    9fc0:	6920      	ldr	r0, [r4, #16]
    9fc2:	68a1      	ldr	r1, [r4, #8]
    9fc4:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9fc8:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    9fcc:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    9fd0:	f005 fd00 	bl	f9d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9fd4:	b168      	cbz	r0, 9ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102e>
    9fd6:	68a0      	ldr	r0, [r4, #8]
    9fd8:	2128      	movs	r1, #40	; 0x28
    9fda:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    9fde:	307e      	adds	r0, #126	; 0x7e
    9fe0:	21ff      	movs	r1, #255	; 0xff
    9fe2:	7781      	strb	r1, [r0, #30]
    9fe4:	e02e      	b.n	a044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1080>
    9fe6:	2001      	movs	r0, #1
    9fe8:	bd70      	pop	{r4, r5, r6, pc}
    9fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9fee:	f000 b8df 	b.w	a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    9ff2:	6920      	ldr	r0, [r4, #16]
    9ff4:	f004 fbd7 	bl	e7a6 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9ff8:	f004 f96e 	bl	e2d8 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9ffc:	4605      	mov	r5, r0
    9ffe:	68a0      	ldr	r0, [r4, #8]
    a000:	4629      	mov	r1, r5
    a002:	f8c0 51ac 	str.w	r5, [r0, #428]	; 0x1ac
    a006:	6920      	ldr	r0, [r4, #16]
    a008:	7900      	ldrb	r0, [r0, #4]
    a00a:	f004 faf0 	bl	e5ee <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    a00e:	68a1      	ldr	r1, [r4, #8]
    a010:	f8a1 01a6 	strh.w	r0, [r1, #422]	; 0x1a6
    a014:	6920      	ldr	r0, [r4, #16]
    a016:	4629      	mov	r1, r5
    a018:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    a01c:	f004 fae3 	bl	e5e6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    a020:	68a1      	ldr	r1, [r4, #8]
    a022:	f8c1 01a8 	str.w	r0, [r1, #424]	; 0x1a8
    a026:	6920      	ldr	r0, [r4, #16]
    a028:	f004 fbc0 	bl	e7ac <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    a02c:	68a1      	ldr	r1, [r4, #8]
    a02e:	f8a1 01b0 	strh.w	r0, [r1, #432]	; 0x1b0
    a032:	6920      	ldr	r0, [r4, #16]
    a034:	f004 fbbd 	bl	e7b2 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    a038:	68a1      	ldr	r1, [r4, #8]
    a03a:	f8a1 01b2 	strh.w	r0, [r1, #434]	; 0x1b2
    a03e:	200d      	movs	r0, #13
    a040:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a044:	2000      	movs	r0, #0
    a046:	bd70      	pop	{r4, r5, r6, pc}
    a048:	2000014c 	.word	0x2000014c
    a04c:	b538      	push	{r3, r4, r5, lr}
    a04e:	4c29      	ldr	r4, [pc, #164]	; (a0f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1130>)
    a050:	2301      	movs	r3, #1
    a052:	2100      	movs	r1, #0
    a054:	68a0      	ldr	r0, [r4, #8]
    a056:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a05a:	3078      	adds	r0, #120	; 0x78
    a05c:	f004 f959 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a060:	b970      	cbnz	r0, a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a062:	68a0      	ldr	r0, [r4, #8]
    a064:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a068:	2a12      	cmp	r2, #18
    a06a:	d009      	beq.n	a080 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10bc>
    a06c:	2301      	movs	r3, #1
    a06e:	2105      	movs	r1, #5
    a070:	3078      	adds	r0, #120	; 0x78
    a072:	f004 f94e 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a076:	b108      	cbz	r0, a07c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    a078:	2008      	movs	r0, #8
    a07a:	bd38      	pop	{r3, r4, r5, pc}
    a07c:	2001      	movs	r0, #1
    a07e:	bd38      	pop	{r3, r4, r5, pc}
    a080:	68a0      	ldr	r0, [r4, #8]
    a082:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    a086:	b908      	cbnz	r0, a08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10c8>
    a088:	f7ff f8c4 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a08c:	68a1      	ldr	r1, [r4, #8]
    a08e:	6920      	ldr	r0, [r4, #16]
    a090:	f501 7190 	add.w	r1, r1, #288	; 0x120
    a094:	f004 fb9c 	bl	e7d0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    a098:	68a1      	ldr	r1, [r4, #8]
    a09a:	6920      	ldr	r0, [r4, #16]
    a09c:	31f0      	adds	r1, #240	; 0xf0
    a09e:	f004 fb8e 	bl	e7be <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    a0a2:	68a1      	ldr	r1, [r4, #8]
    a0a4:	f891 01dc 	ldrb.w	r0, [r1, #476]	; 0x1dc
    a0a8:	f88d 0000 	strb.w	r0, [sp]
    a0ac:	9800      	ldr	r0, [sp, #0]
    a0ae:	9000      	str	r0, [sp, #0]
    a0b0:	f89d 0000 	ldrb.w	r0, [sp]
    a0b4:	b120      	cbz	r0, a0c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fc>
    a0b6:	f44f 7127 	mov.w	r1, #668	; 0x29c
    a0ba:	2031      	movs	r0, #49	; 0x31
    a0bc:	f7fa fe8a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0c0:	8808      	ldrh	r0, [r1, #0]
    a0c2:	f8a1 01de 	strh.w	r0, [r1, #478]	; 0x1de
    a0c6:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
    a0ca:	6920      	ldr	r0, [r4, #16]
    a0cc:	f004 fb7b 	bl	e7c6 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    a0d0:	68a1      	ldr	r1, [r4, #8]
    a0d2:	6920      	ldr	r0, [r4, #16]
    a0d4:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
    a0d8:	f004 fb6e 	bl	e7b8 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    a0dc:	68a0      	ldr	r0, [r4, #8]
    a0de:	4601      	mov	r1, r0
    a0e0:	22ff      	movs	r2, #255	; 0xff
    a0e2:	f880 21dc 	strb.w	r2, [r0, #476]	; 0x1dc
    a0e6:	2014      	movs	r0, #20
    a0e8:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a0ec:	f7fc ffa8 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a0f0:	2000      	movs	r0, #0
    a0f2:	bd38      	pop	{r3, r4, r5, pc}
    a0f4:	2000014c 	.word	0x2000014c
    a0f8:	b51c      	push	{r2, r3, r4, lr}
    a0fa:	4c11      	ldr	r4, [pc, #68]	; (a140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>)
    a0fc:	68a0      	ldr	r0, [r4, #8]
    a0fe:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a102:	07c0      	lsls	r0, r0, #31
    a104:	d001      	beq.n	a10a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1146>
    a106:	2001      	movs	r0, #1
    a108:	bd1c      	pop	{r2, r3, r4, pc}
    a10a:	4669      	mov	r1, sp
    a10c:	6920      	ldr	r0, [r4, #16]
    a10e:	f004 fb65 	bl	e7dc <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    a112:	f001 f973 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a116:	f644 112f 	movw	r1, #18735	; 0x492f
    a11a:	4008      	ands	r0, r1
    a11c:	68a2      	ldr	r2, [r4, #8]
    a11e:	9900      	ldr	r1, [sp, #0]
    a120:	2300      	movs	r3, #0
    a122:	4001      	ands	r1, r0
    a124:	f842 1fc4 	str.w	r1, [r2, #196]!
    a128:	6053      	str	r3, [r2, #4]
    a12a:	f7ff f873 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a12e:	68a0      	ldr	r0, [r4, #8]
    a130:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a134:	f041 0101 	orr.w	r1, r1, #1
    a138:	7001      	strb	r1, [r0, #0]
    a13a:	2000      	movs	r0, #0
    a13c:	bd1c      	pop	{r2, r3, r4, pc}
    a13e:	0000      	.short	0x0000
    a140:	2000014c 	.word	0x2000014c
    a144:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a146:	4c19      	ldr	r4, [pc, #100]	; (a1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e8>)
    a148:	2301      	movs	r3, #1
    a14a:	2107      	movs	r1, #7
    a14c:	68a0      	ldr	r0, [r4, #8]
    a14e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a152:	3078      	adds	r0, #120	; 0x78
    a154:	f004 f8dd 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a158:	b330      	cbz	r0, a1a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>
    a15a:	4669      	mov	r1, sp
    a15c:	6920      	ldr	r0, [r4, #16]
    a15e:	f004 fb42 	bl	e7e6 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a162:	68a6      	ldr	r6, [r4, #8]
    a164:	9d00      	ldr	r5, [sp, #0]
    a166:	36c4      	adds	r6, #196	; 0xc4
    a168:	f001 f948 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a16c:	4005      	ands	r5, r0
    a16e:	f644 102f 	movw	r0, #18735	; 0x492f
    a172:	4005      	ands	r5, r0
    a174:	2100      	movs	r1, #0
    a176:	6035      	str	r5, [r6, #0]
    a178:	6071      	str	r1, [r6, #4]
    a17a:	68a0      	ldr	r0, [r4, #8]
    a17c:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    a180:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a184:	8802      	ldrh	r2, [r0, #0]
    a186:	f8a0 221e 	strh.w	r2, [r0, #542]	; 0x21e
    a18a:	f880 121c 	strb.w	r1, [r0, #540]	; 0x21c
    a18e:	9a00      	ldr	r2, [sp, #0]
    a190:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
    a194:	9a01      	ldr	r2, [sp, #4]
    a196:	f8c0 2224 	str.w	r2, [r0, #548]	; 0x224
    a19a:	21ff      	movs	r1, #255	; 0xff
    a19c:	f880 121a 	strb.w	r1, [r0, #538]	; 0x21a
    a1a0:	f7fc ff4e 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a1a4:	2000      	movs	r0, #0
    a1a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a1a8:	2001      	movs	r0, #1
    a1aa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a1ac:	2000014c 	.word	0x2000014c
    a1b0:	4a0a      	ldr	r2, [pc, #40]	; (a1dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>)
    a1b2:	b510      	push	{r4, lr}
    a1b4:	6890      	ldr	r0, [r2, #8]
    a1b6:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a1ba:	070b      	lsls	r3, r1, #28
    a1bc:	d501      	bpl.n	a1c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fe>
    a1be:	2001      	movs	r0, #1
    a1c0:	bd10      	pop	{r4, pc}
    a1c2:	f041 0108 	orr.w	r1, r1, #8
    a1c6:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a1ca:	6911      	ldr	r1, [r2, #16]
    a1cc:	78c9      	ldrb	r1, [r1, #3]
    a1ce:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a1d2:	f7ff f81f 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a1d6:	2000      	movs	r0, #0
    a1d8:	bd10      	pop	{r4, pc}
    a1da:	0000      	.short	0x0000
    a1dc:	2000014c 	.word	0x2000014c
    a1e0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a1e4:	4c35      	ldr	r4, [pc, #212]	; (a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f8>)
    a1e6:	68a0      	ldr	r0, [r4, #8]
    a1e8:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a1ec:	f010 0f30 	tst.w	r0, #48	; 0x30
    a1f0:	d002      	beq.n	a1f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1234>
    a1f2:	2001      	movs	r0, #1
    a1f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a1f8:	6920      	ldr	r0, [r4, #16]
    a1fa:	f004 fb0f 	bl	e81c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a1fe:	b328      	cbz	r0, a24c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1288>
    a200:	6920      	ldr	r0, [r4, #16]
    a202:	f004 fafd 	bl	e800 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a206:	4607      	mov	r7, r0
    a208:	6920      	ldr	r0, [r4, #16]
    a20a:	f004 fafd 	bl	e808 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a20e:	4606      	mov	r6, r0
    a210:	6920      	ldr	r0, [r4, #16]
    a212:	f004 faf3 	bl	e7fc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a216:	4605      	mov	r5, r0
    a218:	6920      	ldr	r0, [r4, #16]
    a21a:	f004 faf3 	bl	e804 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a21e:	4601      	mov	r1, r0
    a220:	9700      	str	r7, [sp, #0]
    a222:	68a0      	ldr	r0, [r4, #8]
    a224:	4633      	mov	r3, r6
    a226:	462a      	mov	r2, r5
    a228:	3030      	adds	r0, #48	; 0x30
    a22a:	f004 fd4e 	bl	ecca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a22e:	78a0      	ldrb	r0, [r4, #2]
    a230:	0781      	lsls	r1, r0, #30
    a232:	f04f 0001 	mov.w	r0, #1
    a236:	d503      	bpl.n	a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x127c>
    a238:	68e1      	ldr	r1, [r4, #12]
    a23a:	78c9      	ldrb	r1, [r1, #3]
    a23c:	2914      	cmp	r1, #20
    a23e:	d009      	beq.n	a254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a240:	68a1      	ldr	r1, [r4, #8]
    a242:	f891 1085 	ldrb.w	r1, [r1, #133]	; 0x85
    a246:	291c      	cmp	r1, #28
    a248:	d004      	beq.n	a254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1290>
    a24a:	e006      	b.n	a25a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1296>
    a24c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a250:	f7ff bfae 	b.w	a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a254:	68a1      	ldr	r1, [r4, #8]
    a256:	f881 0064 	strb.w	r0, [r1, #100]	; 0x64
    a25a:	68a1      	ldr	r1, [r4, #8]
    a25c:	f891 0064 	ldrb.w	r0, [r1, #100]	; 0x64
    a260:	2801      	cmp	r0, #1
    a262:	d011      	beq.n	a288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a264:	f891 01b5 	ldrb.w	r0, [r1, #437]	; 0x1b5
    a268:	f88d 0004 	strb.w	r0, [sp, #4]
    a26c:	9801      	ldr	r0, [sp, #4]
    a26e:	9001      	str	r0, [sp, #4]
    a270:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a274:	b940      	cbnz	r0, a288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c4>
    a276:	f891 01b4 	ldrb.w	r0, [r1, #436]	; 0x1b4
    a27a:	f88d 0000 	strb.w	r0, [sp]
    a27e:	9800      	ldr	r0, [sp, #0]
    a280:	9000      	str	r0, [sp, #0]
    a282:	f89d 0000 	ldrb.w	r0, [sp]
    a286:	b148      	cbz	r0, a29c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d8>
    a288:	f811 0f87 	ldrb.w	r0, [r1, #135]!
    a28c:	f040 0010 	orr.w	r0, r0, #16
    a290:	f881 0000 	strb.w	r0, [r1]
    a294:	f7fe ffbe 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a298:	2000      	movs	r0, #0
    a29a:	e7ab      	b.n	a1f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1230>
    a29c:	f891 0087 	ldrb.w	r0, [r1, #135]	; 0x87
    a2a0:	f501 72fc 	add.w	r2, r1, #504	; 0x1f8
    a2a4:	f040 0020 	orr.w	r0, r0, #32
    a2a8:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
    a2ac:	f831 0b30 	ldrh.w	r0, [r1], #48
    a2b0:	f004 fd12 	bl	ecd8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a2b4:	f7fc fec4 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a2b8:	e7ec      	b.n	a294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    a2ba:	0000      	.short	0x0000
    a2bc:	2000014c 	.word	0x2000014c
    a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2c2:	4c1a      	ldr	r4, [pc, #104]	; (a32c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1368>)
    a2c4:	2301      	movs	r3, #1
    a2c6:	210a      	movs	r1, #10
    a2c8:	68a0      	ldr	r0, [r4, #8]
    a2ca:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2ce:	3078      	adds	r0, #120	; 0x78
    a2d0:	f004 f81f 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2d4:	b338      	cbz	r0, a326 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1362>
    a2d6:	6920      	ldr	r0, [r4, #16]
    a2d8:	f004 faa0 	bl	e81c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a2dc:	b1c8      	cbz	r0, a312 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x134e>
    a2de:	6920      	ldr	r0, [r4, #16]
    a2e0:	f004 fa8e 	bl	e800 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a2e4:	4607      	mov	r7, r0
    a2e6:	6920      	ldr	r0, [r4, #16]
    a2e8:	f004 fa8e 	bl	e808 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a2ec:	4606      	mov	r6, r0
    a2ee:	6920      	ldr	r0, [r4, #16]
    a2f0:	f004 fa84 	bl	e7fc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a2f4:	4605      	mov	r5, r0
    a2f6:	6920      	ldr	r0, [r4, #16]
    a2f8:	f004 fa84 	bl	e804 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a2fc:	4601      	mov	r1, r0
    a2fe:	9700      	str	r7, [sp, #0]
    a300:	68a0      	ldr	r0, [r4, #8]
    a302:	4633      	mov	r3, r6
    a304:	462a      	mov	r2, r5
    a306:	3030      	adds	r0, #48	; 0x30
    a308:	f004 fcdf 	bl	ecca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a30c:	68a0      	ldr	r0, [r4, #8]
    a30e:	f004 fc4c 	bl	ebaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a312:	68a1      	ldr	r1, [r4, #8]
    a314:	2000      	movs	r0, #0
    a316:	f881 00b6 	strb.w	r0, [r1, #182]	; 0xb6
    a31a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a31e:	f7ff f93f 	bl	95a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a322:	2000      	movs	r0, #0
    a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a326:	2001      	movs	r0, #1
    a328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a32a:	0000      	.short	0x0000
    a32c:	2000014c 	.word	0x2000014c
    a330:	b510      	push	{r4, lr}
    a332:	4c09      	ldr	r4, [pc, #36]	; (a358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1394>)
    a334:	68a0      	ldr	r0, [r4, #8]
    a336:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a33a:	0740      	lsls	r0, r0, #29
    a33c:	d501      	bpl.n	a342 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x137e>
    a33e:	2001      	movs	r0, #1
    a340:	bd10      	pop	{r4, pc}
    a342:	f7fe ff67 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a346:	68a0      	ldr	r0, [r4, #8]
    a348:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a34c:	f041 0104 	orr.w	r1, r1, #4
    a350:	7001      	strb	r1, [r0, #0]
    a352:	2000      	movs	r0, #0
    a354:	bd10      	pop	{r4, pc}
    a356:	0000      	.short	0x0000
    a358:	2000014c 	.word	0x2000014c
    a35c:	b510      	push	{r4, lr}
    a35e:	4c09      	ldr	r4, [pc, #36]	; (a384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c0>)
    a360:	2301      	movs	r3, #1
    a362:	2109      	movs	r1, #9
    a364:	68a0      	ldr	r0, [r4, #8]
    a366:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a36a:	3078      	adds	r0, #120	; 0x78
    a36c:	f003 ffd1 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a370:	2800      	cmp	r0, #0
    a372:	d006      	beq.n	a382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13be>
    a374:	68a1      	ldr	r1, [r4, #8]
    a376:	2000      	movs	r0, #0
    a378:	f801 0faa 	strb.w	r0, [r1, #170]!
    a37c:	7308      	strb	r0, [r1, #12]
    a37e:	f801 0c25 	strb.w	r0, [r1, #-37]
    a382:	bd10      	pop	{r4, pc}
    a384:	2000014c 	.word	0x2000014c
    a388:	b510      	push	{r4, lr}
    a38a:	4c0f      	ldr	r4, [pc, #60]	; (a3c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>)
    a38c:	2301      	movs	r3, #1
    a38e:	2100      	movs	r1, #0
    a390:	68a0      	ldr	r0, [r4, #8]
    a392:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a396:	3078      	adds	r0, #120	; 0x78
    a398:	f003 ffbb 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a39c:	b138      	cbz	r0, a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ea>
    a39e:	f7fe ff39 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a3a2:	68a1      	ldr	r1, [r4, #8]
    a3a4:	2010      	movs	r0, #16
    a3a6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a3aa:	2000      	movs	r0, #0
    a3ac:	bd10      	pop	{r4, pc}
    a3ae:	68a0      	ldr	r0, [r4, #8]
    a3b0:	2301      	movs	r3, #1
    a3b2:	2105      	movs	r1, #5
    a3b4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3b8:	3078      	adds	r0, #120	; 0x78
    a3ba:	f003 ffaa 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3be:	b108      	cbz	r0, a3c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    a3c0:	2008      	movs	r0, #8
    a3c2:	bd10      	pop	{r4, pc}
    a3c4:	2001      	movs	r0, #1
    a3c6:	bd10      	pop	{r4, pc}
    a3c8:	2000014c 	.word	0x2000014c
    a3cc:	4806      	ldr	r0, [pc, #24]	; (a3e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>)
    a3ce:	6880      	ldr	r0, [r0, #8]
    a3d0:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a3d4:	2911      	cmp	r1, #17
    a3d6:	d001      	beq.n	a3dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1418>
    a3d8:	2002      	movs	r0, #2
    a3da:	4770      	bx	lr
    a3dc:	2112      	movs	r1, #18
    a3de:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a3e2:	2000      	movs	r0, #0
    a3e4:	4770      	bx	lr
    a3e6:	0000      	.short	0x0000
    a3e8:	2000014c 	.word	0x2000014c
    a3ec:	b538      	push	{r3, r4, r5, lr}
    a3ee:	4c33      	ldr	r4, [pc, #204]	; (a4bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14f8>)
    a3f0:	2301      	movs	r3, #1
    a3f2:	210b      	movs	r1, #11
    a3f4:	68a0      	ldr	r0, [r4, #8]
    a3f6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a3fa:	3078      	adds	r0, #120	; 0x78
    a3fc:	f003 ff89 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a400:	bb70      	cbnz	r0, a460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a402:	68a0      	ldr	r0, [r4, #8]
    a404:	2301      	movs	r3, #1
    a406:	2100      	movs	r1, #0
    a408:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a40c:	3078      	adds	r0, #120	; 0x78
    a40e:	f003 ff80 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a412:	b318      	cbz	r0, a45c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    a414:	68a0      	ldr	r0, [r4, #8]
    a416:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    a41a:	2824      	cmp	r0, #36	; 0x24
    a41c:	d020      	beq.n	a460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a41e:	6920      	ldr	r0, [r4, #16]
    a420:	f004 fa18 	bl	e854 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a424:	b1f0      	cbz	r0, a464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    a426:	68a0      	ldr	r0, [r4, #8]
    a428:	2102      	movs	r1, #2
    a42a:	30c4      	adds	r0, #196	; 0xc4
    a42c:	f005 fa63 	bl	f8f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a430:	6921      	ldr	r1, [r4, #16]
    a432:	7948      	ldrb	r0, [r1, #5]
    a434:	f000 0207 	and.w	r2, r0, #7
    a438:	68a0      	ldr	r0, [r4, #8]
    a43a:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    a43e:	7909      	ldrb	r1, [r1, #4]
    a440:	f001 0107 	and.w	r1, r1, #7
    a444:	f880 1066 	strb.w	r1, [r0, #102]	; 0x66
    a448:	f890 31bf 	ldrb.w	r3, [r0, #447]	; 0x1bf
    a44c:	f88d 3000 	strb.w	r3, [sp]
    a450:	9b00      	ldr	r3, [sp, #0]
    a452:	9300      	str	r3, [sp, #0]
    a454:	f89d 3000 	ldrb.w	r3, [sp]
    a458:	bb3b      	cbnz	r3, a4aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a45a:	e007      	b.n	a46c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a8>
    a45c:	2001      	movs	r0, #1
    a45e:	bd38      	pop	{r3, r4, r5, pc}
    a460:	2020      	movs	r0, #32
    a462:	bd38      	pop	{r3, r4, r5, pc}
    a464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a468:	f7ff bea2 	b.w	a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a46c:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
    a470:	2b01      	cmp	r3, #1
    a472:	d01a      	beq.n	a4aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a474:	f100 036e 	add.w	r3, r0, #110	; 0x6e
    a478:	785d      	ldrb	r5, [r3, #1]
    a47a:	428d      	cmp	r5, r1
    a47c:	d106      	bne.n	a48c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a47e:	7819      	ldrb	r1, [r3, #0]
    a480:	4291      	cmp	r1, r2
    a482:	d103      	bne.n	a48c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    a484:	2102      	movs	r1, #2
    a486:	f880 11be 	strb.w	r1, [r0, #446]	; 0x1be
    a48a:	e00e      	b.n	a4aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e6>
    a48c:	f200 210e 	addw	r1, r0, #526	; 0x20e
    a490:	8802      	ldrh	r2, [r0, #0]
    a492:	f821 2902 	strh.w	r2, [r1], #-2
    a496:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    a49a:	710a      	strb	r2, [r1, #4]
    a49c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    a4a0:	7148      	strb	r0, [r1, #5]
    a4a2:	20ff      	movs	r0, #255	; 0xff
    a4a4:	7008      	strb	r0, [r1, #0]
    a4a6:	f7fc fdcb 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a4aa:	68a1      	ldr	r1, [r4, #8]
    a4ac:	2021      	movs	r0, #33	; 0x21
    a4ae:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a4b2:	f7fe feaf 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a4b6:	2000      	movs	r0, #0
    a4b8:	bd38      	pop	{r3, r4, r5, pc}
    a4ba:	0000      	.short	0x0000
    a4bc:	2000014c 	.word	0x2000014c
    a4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4c4:	4c4c      	ldr	r4, [pc, #304]	; (a5f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>)
    a4c6:	68a0      	ldr	r0, [r4, #8]
    a4c8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a4cc:	2920      	cmp	r1, #32
    a4ce:	d009      	beq.n	a4e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1520>
    a4d0:	f05f 0700 	movs.w	r7, #0
    a4d4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a4d8:	2922      	cmp	r1, #34	; 0x22
    a4da:	d005      	beq.n	a4e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    a4dc:	b36f      	cbz	r7, a53a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1576>
    a4de:	f100 0585 	add.w	r5, r0, #133	; 0x85
    a4e2:	e003      	b.n	a4ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1528>
    a4e4:	2701      	movs	r7, #1
    a4e6:	e7f5      	b.n	a4d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a4e8:	f100 0586 	add.w	r5, r0, #134	; 0x86
    a4ec:	2102      	movs	r1, #2
    a4ee:	30c4      	adds	r0, #196	; 0xc4
    a4f0:	f005 fa01 	bl	f8f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a4f4:	6920      	ldr	r0, [r4, #16]
    a4f6:	f7fc fc8f 	bl	6e18 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a4fa:	2600      	movs	r6, #0
    a4fc:	b300      	cbz	r0, a540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a4fe:	4639      	mov	r1, r7
    a500:	6920      	ldr	r0, [r4, #16]
    a502:	f7fe ff53 	bl	93ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e8>
    a506:	b1d8      	cbz	r0, a540 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157c>
    a508:	466a      	mov	r2, sp
    a50a:	6921      	ldr	r1, [r4, #16]
    a50c:	68a0      	ldr	r0, [r4, #8]
    a50e:	f004 f824 	bl	e55a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a512:	b380      	cbz	r0, a576 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b2>
    a514:	6920      	ldr	r0, [r4, #16]
    a516:	f004 f979 	bl	e80c <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a51a:	68a1      	ldr	r1, [r4, #8]
    a51c:	f8a1 01a4 	strh.w	r0, [r1, #420]	; 0x1a4
    a520:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
    a524:	f005 fa56 	bl	f9d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a528:	b3d0      	cbz	r0, a5a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15dc>
    a52a:	68a0      	ldr	r0, [r4, #8]
    a52c:	2128      	movs	r1, #40	; 0x28
    a52e:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    a532:	307e      	adds	r0, #126	; 0x7e
    a534:	21ff      	movs	r1, #255	; 0xff
    a536:	7781      	strb	r1, [r0, #30]
    a538:	e052      	b.n	a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a53a:	2002      	movs	r0, #2
    a53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a540:	68a0      	ldr	r0, [r4, #8]
    a542:	f04f 0800 	mov.w	r8, #0
    a546:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a54a:	2901      	cmp	r1, #1
    a54c:	d014      	beq.n	a578 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    a54e:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a552:	b1ef      	cbz	r7, a590 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15cc>
    a554:	6920      	ldr	r0, [r4, #16]
    a556:	68a1      	ldr	r1, [r4, #8]
    a558:	2201      	movs	r2, #1
    a55a:	78c0      	ldrb	r0, [r0, #3]
    a55c:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
    a560:	4082      	lsls	r2, r0
    a562:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a566:	b158      	cbz	r0, a580 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    a568:	200a      	movs	r0, #10
    a56a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a56e:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
    a572:	b998      	cbnz	r0, a59c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15d8>
    a574:	e007      	b.n	a586 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c2>
    a576:	e014      	b.n	a5a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    a578:	201e      	movs	r0, #30
    a57a:	f7ff fcbf 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a57e:	e7e8      	b.n	a552 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158e>
    a580:	f240 31bf 	movw	r1, #959	; 0x3bf
    a584:	e001      	b.n	a58a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c6>
    a586:	f240 31c7 	movw	r1, #967	; 0x3c7
    a58a:	2031      	movs	r0, #49	; 0x31
    a58c:	f7fa fc22 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a590:	702e      	strb	r6, [r5, #0]
    a592:	f7fe fe4b 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a596:	f7ff fe0b 	bl	a1b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11ec>
    a59a:	4680      	mov	r8, r0
    a59c:	4640      	mov	r0, r8
    a59e:	e7cd      	b.n	a53c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a5a0:	e013      	b.n	a5ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1606>
    a5a2:	68a0      	ldr	r0, [r4, #8]
    a5a4:	f890 11be 	ldrb.w	r1, [r0, #446]	; 0x1be
    a5a8:	2901      	cmp	r1, #1
    a5aa:	d009      	beq.n	a5c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>
    a5ac:	f880 61be 	strb.w	r6, [r0, #446]	; 0x1be
    a5b0:	68a0      	ldr	r0, [r4, #8]
    a5b2:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a5b6:	428d      	cmp	r5, r1
    a5b8:	d112      	bne.n	a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a5ba:	f880 6086 	strb.w	r6, [r0, #134]	; 0x86
    a5be:	e00f      	b.n	a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161c>
    a5c0:	2000      	movs	r0, #0
    a5c2:	f7ff fc9b 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a5c6:	702e      	strb	r6, [r5, #0]
    a5c8:	e7f2      	b.n	a5b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ec>
    a5ca:	68a0      	ldr	r0, [r4, #8]
    a5cc:	f89d 1000 	ldrb.w	r1, [sp]
    a5d0:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    a5d4:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a5d8:	f880 11a7 	strb.w	r1, [r0, #423]	; 0x1a7
    a5dc:	2024      	movs	r0, #36	; 0x24
    a5de:	7028      	strb	r0, [r5, #0]
    a5e0:	68a0      	ldr	r0, [r4, #8]
    a5e2:	f100 0186 	add.w	r1, r0, #134	; 0x86
    a5e6:	428d      	cmp	r5, r1
    a5e8:	d102      	bne.n	a5f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x162c>
    a5ea:	f7fe fe1f 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a5ee:	e001      	b.n	a5f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    a5f0:	f880 60b6 	strb.w	r6, [r0, #182]	; 0xb6
    a5f4:	2000      	movs	r0, #0
    a5f6:	e7a1      	b.n	a53c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1578>
    a5f8:	2000014c 	.word	0x2000014c
    a5fc:	b510      	push	{r4, lr}
    a5fe:	4c0a      	ldr	r4, [pc, #40]	; (a628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a600:	2102      	movs	r1, #2
    a602:	68a0      	ldr	r0, [r4, #8]
    a604:	30c4      	adds	r0, #196	; 0xc4
    a606:	f005 f976 	bl	f8f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x602>
    a60a:	6920      	ldr	r0, [r4, #16]
    a60c:	f004 f92c 	bl	e868 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a610:	2816      	cmp	r0, #22
    a612:	d001      	beq.n	a618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1654>
    a614:	2000      	movs	r0, #0
    a616:	bd10      	pop	{r4, pc}
    a618:	6920      	ldr	r0, [r4, #16]
    a61a:	f004 f927 	bl	e86c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a622:	f7fe bdd5 	b.w	91d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a626:	0000      	.short	0x0000
    a628:	2000014c 	.word	0x2000014c
    a62c:	4802      	ldr	r0, [pc, #8]	; (a638 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1674>)
    a62e:	6900      	ldr	r0, [r0, #16]
    a630:	7900      	ldrb	r0, [r0, #4]
    a632:	f7fe bdcd 	b.w	91d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x20c>
    a636:	0000      	.short	0x0000
    a638:	2000014c 	.word	0x2000014c
    a63c:	b510      	push	{r4, lr}
    a63e:	4c08      	ldr	r4, [pc, #32]	; (a660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>)
    a640:	68a0      	ldr	r0, [r4, #8]
    a642:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a646:	2817      	cmp	r0, #23
    a648:	d001      	beq.n	a64e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x168a>
    a64a:	2002      	movs	r0, #2
    a64c:	bd10      	pop	{r4, pc}
    a64e:	f7fe fded 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a652:	68a1      	ldr	r1, [r4, #8]
    a654:	201b      	movs	r0, #27
    a656:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a65a:	2000      	movs	r0, #0
    a65c:	bd10      	pop	{r4, pc}
    a65e:	0000      	.short	0x0000
    a660:	2000014c 	.word	0x2000014c
    a664:	b510      	push	{r4, lr}
    a666:	4c0b      	ldr	r4, [pc, #44]	; (a694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>)
    a668:	2301      	movs	r3, #1
    a66a:	4619      	mov	r1, r3
    a66c:	68a0      	ldr	r0, [r4, #8]
    a66e:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a672:	3078      	adds	r0, #120	; 0x78
    a674:	f003 fe4d 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a678:	b108      	cbz	r0, a67e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ba>
    a67a:	2000      	movs	r0, #0
    a67c:	bd10      	pop	{r4, pc}
    a67e:	6920      	ldr	r0, [r4, #16]
    a680:	f004 f8c8 	bl	e814 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a684:	68a1      	ldr	r1, [r4, #8]
    a686:	f881 018a 	strb.w	r0, [r1, #394]	; 0x18a
    a68a:	2007      	movs	r0, #7
    a68c:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    a690:	e7f3      	b.n	a67a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b6>
    a692:	0000      	.short	0x0000
    a694:	2000014c 	.word	0x2000014c
    a698:	b570      	push	{r4, r5, r6, lr}
    a69a:	4d37      	ldr	r5, [pc, #220]	; (a778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    a69c:	2600      	movs	r6, #0
    a69e:	4628      	mov	r0, r5
    a6a0:	68a9      	ldr	r1, [r5, #8]
    a6a2:	6900      	ldr	r0, [r0, #16]
    a6a4:	f891 3085 	ldrb.w	r3, [r1, #133]	; 0x85
    a6a8:	7900      	ldrb	r0, [r0, #4]
    a6aa:	2b0e      	cmp	r3, #14
    a6ac:	d101      	bne.n	a6b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ee>
    a6ae:	2812      	cmp	r0, #18
    a6b0:	d006      	beq.n	a6c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    a6b2:	4a31      	ldr	r2, [pc, #196]	; (a778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b4>)
    a6b4:	2400      	movs	r4, #0
    a6b6:	6892      	ldr	r2, [r2, #8]
    a6b8:	32c4      	adds	r2, #196	; 0xc4
    a6ba:	2b1c      	cmp	r3, #28
    a6bc:	d004      	beq.n	a6c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1704>
    a6be:	e005      	b.n	a6cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1708>
    a6c0:	f7ff fe4c 	bl	a35c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1398>
    a6c4:	4606      	mov	r6, r0
    a6c6:	e054      	b.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a6c8:	2814      	cmp	r0, #20
    a6ca:	d002      	beq.n	a6d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170e>
    a6cc:	2b04      	cmp	r3, #4
    a6ce:	d00b      	beq.n	a6e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    a6d0:	e00c      	b.n	a6ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1728>
    a6d2:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    a6d6:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    a6da:	2105      	movs	r1, #5
    a6dc:	4610      	mov	r0, r2
    a6de:	f005 f900 	bl	f8e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a6e2:	f7fe ff5d 	bl	95a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5dc>
    a6e6:	e044      	b.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a6e8:	280e      	cmp	r0, #14
    a6ea:	d002      	beq.n	a6f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x172e>
    a6ec:	2b20      	cmp	r3, #32
    a6ee:	d010      	beq.n	a712 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174e>
    a6f0:	e011      	b.n	a716 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1752>
    a6f2:	f881 4085 	strb.w	r4, [r1, #133]	; 0x85
    a6f6:	f881 40b6 	strb.w	r4, [r1, #182]	; 0xb6
    a6fa:	8808      	ldrh	r0, [r1, #0]
    a6fc:	f8a1 021e 	strh.w	r0, [r1, #542]	; 0x21e
    a700:	201a      	movs	r0, #26
    a702:	f881 021c 	strb.w	r0, [r1, #540]	; 0x21c
    a706:	20ff      	movs	r0, #255	; 0xff
    a708:	f881 021a 	strb.w	r0, [r1, #538]	; 0x21a
    a70c:	f7fc fc98 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a710:	e02f      	b.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a712:	2816      	cmp	r0, #22
    a714:	d006      	beq.n	a724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    a716:	2b26      	cmp	r3, #38	; 0x26
    a718:	d101      	bne.n	a71e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175a>
    a71a:	2816      	cmp	r0, #22
    a71c:	d002      	beq.n	a724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1760>
    a71e:	2817      	cmp	r0, #23
    a720:	d014      	beq.n	a74c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1788>
    a722:	e026      	b.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a724:	f801 4f85 	strb.w	r4, [r1, #133]!
    a728:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a72c:	7848      	ldrb	r0, [r1, #1]
    a72e:	2821      	cmp	r0, #33	; 0x21
    a730:	d01f      	beq.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a732:	2108      	movs	r1, #8
    a734:	4610      	mov	r0, r2
    a736:	f005 f8d4 	bl	f8e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a73a:	68a8      	ldr	r0, [r5, #8]
    a73c:	210b      	movs	r1, #11
    a73e:	30c4      	adds	r0, #196	; 0xc4
    a740:	f005 f8cf 	bl	f8e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ee>
    a744:	201a      	movs	r0, #26
    a746:	f7ff fbd9 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a74a:	e012      	b.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a74c:	f891 0086 	ldrb.w	r0, [r1, #134]	; 0x86
    a750:	2822      	cmp	r0, #34	; 0x22
    a752:	d10e      	bne.n	a772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a754:	f881 4086 	strb.w	r4, [r1, #134]	; 0x86
    a758:	f7fe fd68 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a75c:	68a8      	ldr	r0, [r5, #8]
    a75e:	f890 01be 	ldrb.w	r0, [r0, #446]	; 0x1be
    a762:	2801      	cmp	r0, #1
    a764:	d102      	bne.n	a76c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a8>
    a766:	2000      	movs	r0, #0
    a768:	f7ff fbc8 	bl	9efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    a76c:	68a8      	ldr	r0, [r5, #8]
    a76e:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    a772:	4630      	mov	r0, r6
    a774:	bd70      	pop	{r4, r5, r6, pc}
    a776:	0000      	.short	0x0000
    a778:	2000014c 	.word	0x2000014c
    a77c:	b570      	push	{r4, r5, r6, lr}
    a77e:	4c2c      	ldr	r4, [pc, #176]	; (a830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186c>)
    a780:	68a0      	ldr	r0, [r4, #8]
    a782:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a786:	0789      	lsls	r1, r1, #30
    a788:	d507      	bpl.n	a79a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17d6>
    a78a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a78e:	2301      	movs	r3, #1
    a790:	2108      	movs	r1, #8
    a792:	3078      	adds	r0, #120	; 0x78
    a794:	f003 fdbd 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a798:	b1e8      	cbz	r0, a7d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1812>
    a79a:	68a0      	ldr	r0, [r4, #8]
    a79c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a7a0:	0780      	lsls	r0, r0, #30
    a7a2:	d412      	bmi.n	a7ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1806>
    a7a4:	6920      	ldr	r0, [r4, #16]
    a7a6:	f004 f837 	bl	e818 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a7aa:	68a1      	ldr	r1, [r4, #8]
    a7ac:	f881 00bf 	strb.w	r0, [r1, #191]	; 0xbf
    a7b0:	6920      	ldr	r0, [r4, #16]
    a7b2:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a7b6:	f8a1 20c0 	strh.w	r2, [r1, #192]	; 0xc0
    a7ba:	8840      	ldrh	r0, [r0, #2]
    a7bc:	f8a1 00c2 	strh.w	r0, [r1, #194]	; 0xc2
    a7c0:	f811 0fbe 	ldrb.w	r0, [r1, #190]!
    a7c4:	f040 0002 	orr.w	r0, r0, #2
    a7c8:	7008      	strb	r0, [r1, #0]
    a7ca:	68a0      	ldr	r0, [r4, #8]
    a7cc:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    a7d0:	07c9      	lsls	r1, r1, #31
    a7d2:	d002      	beq.n	a7da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1816>
    a7d4:	e010      	b.n	a7f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    a7d6:	2001      	movs	r0, #1
    a7d8:	bd70      	pop	{r4, r5, r6, pc}
    a7da:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a7de:	078a      	lsls	r2, r1, #30
    a7e0:	d504      	bpl.n	a7ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>
    a7e2:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    a7e6:	2031      	movs	r0, #49	; 0x31
    a7e8:	f7fa faf4 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7ec:	f041 0102 	orr.w	r1, r1, #2
    a7f0:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a7f4:	f7fe fd0e 	bl	9214 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    a7f8:	68a0      	ldr	r0, [r4, #8]
    a7fa:	2500      	movs	r5, #0
    a7fc:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a800:	2906      	cmp	r1, #6
    a802:	d105      	bne.n	a810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    a804:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a808:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    a80c:	f7fc fc18 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a810:	68a0      	ldr	r0, [r4, #8]
    a812:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a816:	b149      	cbz	r1, a82c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    a818:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
    a81c:	f7fc fc10 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a820:	68a0      	ldr	r0, [r4, #8]
    a822:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a826:	b909      	cbnz	r1, a82c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    a828:	f880 50b6 	strb.w	r5, [r0, #182]	; 0xb6
    a82c:	2000      	movs	r0, #0
    a82e:	bd70      	pop	{r4, r5, r6, pc}
    a830:	2000014c 	.word	0x2000014c
    a834:	b510      	push	{r4, lr}
    a836:	4c20      	ldr	r4, [pc, #128]	; (a8b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f4>)
    a838:	68a3      	ldr	r3, [r4, #8]
    a83a:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    a83e:	2808      	cmp	r0, #8
    a840:	d20f      	bcs.n	a862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189e>
    a842:	f100 0208 	add.w	r2, r0, #8
    a846:	f1c0 0008 	rsb	r0, r0, #8
    a84a:	b2c1      	uxtb	r1, r0
    a84c:	1898      	adds	r0, r3, r2
    a84e:	f500 7090 	add.w	r0, r0, #288	; 0x120
    a852:	f7fa fb4b 	bl	4eec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a856:	68a1      	ldr	r1, [r4, #8]
    a858:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a85c:	4410      	add	r0, r2
    a85e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a862:	68a3      	ldr	r3, [r4, #8]
    a864:	f893 0102 	ldrb.w	r0, [r3, #258]	; 0x102
    a868:	3808      	subs	r0, #8
    a86a:	2804      	cmp	r0, #4
    a86c:	d20d      	bcs.n	a88a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18c6>
    a86e:	1d02      	adds	r2, r0, #4
    a870:	f1c0 0004 	rsb	r0, r0, #4
    a874:	b2c1      	uxtb	r1, r0
    a876:	1898      	adds	r0, r3, r2
    a878:	30f0      	adds	r0, #240	; 0xf0
    a87a:	f7fa fb37 	bl	4eec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a87e:	68a1      	ldr	r1, [r4, #8]
    a880:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a884:	4410      	add	r0, r2
    a886:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a88a:	68a0      	ldr	r0, [r4, #8]
    a88c:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    a890:	290c      	cmp	r1, #12
    a892:	d30f      	bcc.n	a8b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    a894:	d005      	beq.n	a8a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18de>
    a896:	f240 71b6 	movw	r1, #1974	; 0x7b6
    a89a:	f04f 0031 	mov.w	r0, #49	; 0x31
    a89e:	f7fa fa99 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a2:	2100      	movs	r1, #0
    a8a4:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    a8a8:	2101      	movs	r1, #1
    a8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a8ae:	2004      	movs	r0, #4
    a8b0:	f7ff ba20 	b.w	9cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd30>
    a8b4:	bd10      	pop	{r4, pc}
    a8b6:	0000      	.short	0x0000
    a8b8:	2000014c 	.word	0x2000014c
    a8bc:	4804      	ldr	r0, [pc, #16]	; (a8d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190c>)
    a8be:	2127      	movs	r1, #39	; 0x27
    a8c0:	6880      	ldr	r0, [r0, #8]
    a8c2:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a8c6:	2100      	movs	r1, #0
    a8c8:	f880 119c 	strb.w	r1, [r0, #412]	; 0x19c
    a8cc:	4770      	bx	lr
    a8ce:	0000      	.short	0x0000
    a8d0:	2000014c 	.word	0x2000014c
    a8d4:	4809      	ldr	r0, [pc, #36]	; (a8fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1938>)
    a8d6:	b510      	push	{r4, lr}
    a8d8:	6880      	ldr	r0, [r0, #8]
    a8da:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a8de:	2914      	cmp	r1, #20
    a8e0:	d004      	beq.n	a8ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    a8e2:	f240 6191 	movw	r1, #1681	; 0x691
    a8e6:	2031      	movs	r0, #49	; 0x31
    a8e8:	f7fa fa74 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8ec:	2101      	movs	r1, #1
    a8ee:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    a8f2:	2115      	movs	r1, #21
    a8f4:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a8f8:	bd10      	pop	{r4, pc}
    a8fa:	0000      	.short	0x0000
    a8fc:	2000014c 	.word	0x2000014c
    a900:	b510      	push	{r4, lr}
    a902:	4c0a      	ldr	r4, [pc, #40]	; (a92c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>)
    a904:	68a0      	ldr	r0, [r4, #8]
    a906:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    a90a:	07c0      	lsls	r0, r0, #31
    a90c:	d008      	beq.n	a920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>
    a90e:	f7fe fc8d 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a912:	68a0      	ldr	r0, [r4, #8]
    a914:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a918:	f021 0101 	bic.w	r1, r1, #1
    a91c:	7001      	strb	r1, [r0, #0]
    a91e:	bd10      	pop	{r4, pc}
    a920:	f240 617c 	movw	r1, #1660	; 0x67c
    a924:	2031      	movs	r0, #49	; 0x31
    a926:	f7fa fa55 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a92a:	0000      	.short	0x0000
    a92c:	2000014c 	.word	0x2000014c
    a930:	b510      	push	{r4, lr}
    a932:	4c0a      	ldr	r4, [pc, #40]	; (a95c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>)
    a934:	2301      	movs	r3, #1
    a936:	2100      	movs	r1, #0
    a938:	68a0      	ldr	r0, [r4, #8]
    a93a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a93e:	3078      	adds	r0, #120	; 0x78
    a940:	f003 fce7 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a944:	b120      	cbz	r0, a950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    a946:	68a1      	ldr	r1, [r4, #8]
    a948:	201c      	movs	r0, #28
    a94a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a94e:	bd10      	pop	{r4, pc}
    a950:	f240 61ff 	movw	r1, #1791	; 0x6ff
    a954:	2031      	movs	r0, #49	; 0x31
    a956:	f7fa fa3d 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a95a:	0000      	.short	0x0000
    a95c:	2000014c 	.word	0x2000014c
    a960:	480a      	ldr	r0, [pc, #40]	; (a98c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c8>)
    a962:	b510      	push	{r4, lr}
    a964:	6880      	ldr	r0, [r0, #8]
    a966:	f890 1087 	ldrb.w	r1, [r0, #135]	; 0x87
    a96a:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a96e:	2a01      	cmp	r2, #1
    a970:	d004      	beq.n	a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b8>
    a972:	f240 7106 	movw	r1, #1798	; 0x706
    a976:	2031      	movs	r0, #49	; 0x31
    a978:	f7fa fa2c 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a97c:	f021 0110 	bic.w	r1, r1, #16
    a980:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    a984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a988:	f7fe bc50 	b.w	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a98c:	2000014c 	.word	0x2000014c
    a990:	b510      	push	{r4, lr}
    a992:	4c0a      	ldr	r4, [pc, #40]	; (a9bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f8>)
    a994:	2301      	movs	r3, #1
    a996:	2100      	movs	r1, #0
    a998:	68a0      	ldr	r0, [r4, #8]
    a99a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a99e:	3078      	adds	r0, #120	; 0x78
    a9a0:	f003 fcb7 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9a4:	b120      	cbz	r0, a9b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ec>
    a9a6:	68a1      	ldr	r1, [r4, #8]
    a9a8:	200e      	movs	r0, #14
    a9aa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a9ae:	bd10      	pop	{r4, pc}
    a9b0:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a9b4:	2031      	movs	r0, #49	; 0x31
    a9b6:	f7fa fa0d 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9ba:	0000      	.short	0x0000
    a9bc:	2000014c 	.word	0x2000014c
    a9c0:	4804      	ldr	r0, [pc, #16]	; (a9d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>)
    a9c2:	6880      	ldr	r0, [r0, #8]
    a9c4:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    a9c8:	f021 0104 	bic.w	r1, r1, #4
    a9cc:	7001      	strb	r1, [r0, #0]
    a9ce:	f7fe bc2d 	b.w	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    a9d2:	0000      	.short	0x0000
    a9d4:	2000014c 	.word	0x2000014c
    a9d8:	4809      	ldr	r0, [pc, #36]	; (aa00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a3c>)
    a9da:	b510      	push	{r4, lr}
    a9dc:	6880      	ldr	r0, [r0, #8]
    a9de:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a9e2:	2910      	cmp	r1, #16
    a9e4:	d004      	beq.n	a9f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    a9e6:	f240 6189 	movw	r1, #1673	; 0x689
    a9ea:	2031      	movs	r0, #49	; 0x31
    a9ec:	f7fa f9f2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9f0:	2101      	movs	r1, #1
    a9f2:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
    a9f6:	2111      	movs	r1, #17
    a9f8:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a9fc:	bd10      	pop	{r4, pc}
    a9fe:	0000      	.short	0x0000
    aa00:	2000014c 	.word	0x2000014c
    aa04:	b510      	push	{r4, lr}
    aa06:	4c0a      	ldr	r4, [pc, #40]	; (aa30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>)
    aa08:	2301      	movs	r3, #1
    aa0a:	2100      	movs	r1, #0
    aa0c:	68a0      	ldr	r0, [r4, #8]
    aa0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa12:	3078      	adds	r0, #120	; 0x78
    aa14:	f003 fc7d 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa18:	b120      	cbz	r0, aa24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    aa1a:	68a1      	ldr	r1, [r4, #8]
    aa1c:	201f      	movs	r0, #31
    aa1e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aa22:	bd10      	pop	{r4, pc}
    aa24:	f240 7112 	movw	r1, #1810	; 0x712
    aa28:	2031      	movs	r0, #49	; 0x31
    aa2a:	f7fa f9d3 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa2e:	0000      	.short	0x0000
    aa30:	2000014c 	.word	0x2000014c
    aa34:	4808      	ldr	r0, [pc, #32]	; (aa58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a94>)
    aa36:	b510      	push	{r4, lr}
    aa38:	6880      	ldr	r0, [r0, #8]
    aa3a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aa3e:	2921      	cmp	r1, #33	; 0x21
    aa40:	d005      	beq.n	aa4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    aa42:	b121      	cbz	r1, aa4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a8a>
    aa44:	f240 7119 	movw	r1, #1817	; 0x719
    aa48:	2031      	movs	r0, #49	; 0x31
    aa4a:	f7fa f9c3 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa4e:	2122      	movs	r1, #34	; 0x22
    aa50:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aa54:	bd10      	pop	{r4, pc}
    aa56:	0000      	.short	0x0000
    aa58:	2000014c 	.word	0x2000014c
    aa5c:	4807      	ldr	r0, [pc, #28]	; (aa7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab8>)
    aa5e:	b510      	push	{r4, lr}
    aa60:	6880      	ldr	r0, [r0, #8]
    aa62:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aa66:	2915      	cmp	r1, #21
    aa68:	d004      	beq.n	aa74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab0>
    aa6a:	f240 619e 	movw	r1, #1694	; 0x69e
    aa6e:	2031      	movs	r0, #49	; 0x31
    aa70:	f7fa f9b0 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa74:	2119      	movs	r1, #25
    aa76:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aa7a:	bd10      	pop	{r4, pc}
    aa7c:	2000014c 	.word	0x2000014c
    aa80:	b510      	push	{r4, lr}
    aa82:	4c0a      	ldr	r4, [pc, #40]	; (aaac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae8>)
    aa84:	2301      	movs	r3, #1
    aa86:	2100      	movs	r1, #0
    aa88:	68a0      	ldr	r0, [r4, #8]
    aa8a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa8e:	3078      	adds	r0, #120	; 0x78
    aa90:	f003 fc3f 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa94:	b120      	cbz	r0, aaa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1adc>
    aa96:	68a1      	ldr	r1, [r4, #8]
    aa98:	2004      	movs	r0, #4
    aa9a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aa9e:	bd10      	pop	{r4, pc}
    aaa0:	f240 6183 	movw	r1, #1667	; 0x683
    aaa4:	2031      	movs	r0, #49	; 0x31
    aaa6:	f7fa f995 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaaa:	0000      	.short	0x0000
    aaac:	2000014c 	.word	0x2000014c
    aab0:	4807      	ldr	r0, [pc, #28]	; (aad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    aab2:	b510      	push	{r4, lr}
    aab4:	6880      	ldr	r0, [r0, #8]
    aab6:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aaba:	2915      	cmp	r1, #21
    aabc:	d004      	beq.n	aac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b04>
    aabe:	f44f 61d3 	mov.w	r1, #1688	; 0x698
    aac2:	2031      	movs	r0, #49	; 0x31
    aac4:	f7fa f986 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aac8:	2117      	movs	r1, #23
    aaca:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    aace:	bd10      	pop	{r4, pc}
    aad0:	2000014c 	.word	0x2000014c
    aad4:	b570      	push	{r4, r5, r6, lr}
    aad6:	4d1b      	ldr	r5, [pc, #108]	; (ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b80>)
    aad8:	68a8      	ldr	r0, [r5, #8]
    aada:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    aade:	291b      	cmp	r1, #27
    aae0:	d002      	beq.n	aae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b24>
    aae2:	f44f 61d7 	mov.w	r1, #1720	; 0x6b8
    aae6:	e007      	b.n	aaf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b34>
    aae8:	2400      	movs	r4, #0
    aaea:	f880 40bb 	strb.w	r4, [r0, #187]	; 0xbb
    aaee:	f890 11d4 	ldrb.w	r1, [r0, #468]	; 0x1d4
    aaf2:	b121      	cbz	r1, aafe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3a>
    aaf4:	f240 61bc 	movw	r1, #1724	; 0x6bc
    aaf8:	2031      	movs	r0, #49	; 0x31
    aafa:	f7fa f96b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aafe:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    ab02:	b141      	cbz	r1, ab16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b52>
    ab04:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    ab08:	8801      	ldrh	r1, [r0, #0]
    ab0a:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    ab0e:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    ab12:	210c      	movs	r1, #12
    ab14:	e008      	b.n	ab28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>
    ab16:	8801      	ldrh	r1, [r0, #0]
    ab18:	f8a0 11d8 	strh.w	r1, [r0, #472]	; 0x1d8
    ab1c:	f880 41d6 	strb.w	r4, [r0, #470]	; 0x1d6
    ab20:	2101      	movs	r1, #1
    ab22:	f880 11da 	strb.w	r1, [r0, #474]	; 0x1da
    ab26:	210b      	movs	r1, #11
    ab28:	f880 11d4 	strb.w	r1, [r0, #468]	; 0x1d4
    ab2c:	8800      	ldrh	r0, [r0, #0]
    ab2e:	f7fa fd6b 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ab32:	f003 f822 	bl	db7a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    ab36:	f7fc fa83 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ab3a:	68a8      	ldr	r0, [r5, #8]
    ab3c:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
    ab40:	bd70      	pop	{r4, r5, r6, pc}
    ab42:	0000      	.short	0x0000
    ab44:	2000014c 	.word	0x2000014c
    ab48:	b510      	push	{r4, lr}
    ab4a:	4c08      	ldr	r4, [pc, #32]	; (ab6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba8>)
    ab4c:	2301      	movs	r3, #1
    ab4e:	4619      	mov	r1, r3
    ab50:	68a0      	ldr	r0, [r4, #8]
    ab52:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ab56:	3078      	adds	r0, #120	; 0x78
    ab58:	f003 fbdb 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab5c:	2800      	cmp	r0, #0
    ab5e:	d103      	bne.n	ab68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    ab60:	68a1      	ldr	r1, [r4, #8]
    ab62:	2008      	movs	r0, #8
    ab64:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    ab68:	bd10      	pop	{r4, pc}
    ab6a:	0000      	.short	0x0000
    ab6c:	2000014c 	.word	0x2000014c
    ab70:	4814      	ldr	r0, [pc, #80]	; (abc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c00>)
    ab72:	b510      	push	{r4, lr}
    ab74:	68c1      	ldr	r1, [r0, #12]
    ab76:	6880      	ldr	r0, [r0, #8]
    ab78:	7909      	ldrb	r1, [r1, #4]
    ab7a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ab7e:	2a0a      	cmp	r2, #10
    ab80:	d109      	bne.n	ab96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    ab82:	f890 20fa 	ldrb.w	r2, [r0, #250]	; 0xfa
    ab86:	428a      	cmp	r2, r1
    ab88:	d105      	bne.n	ab96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bd2>
    ab8a:	2100      	movs	r1, #0
    ab8c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ab90:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    ab94:	bd10      	pop	{r4, pc}
    ab96:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
    ab9a:	0713      	lsls	r3, r2, #28
    ab9c:	d507      	bpl.n	abae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bea>
    ab9e:	f022 0108 	bic.w	r1, r2, #8
    aba2:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
    aba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abaa:	f7fe bb3f 	b.w	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    abae:	29ff      	cmp	r1, #255	; 0xff
    abb0:	d004      	beq.n	abbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bf8>
    abb2:	f240 6176 	movw	r1, #1654	; 0x676
    abb6:	2031      	movs	r0, #49	; 0x31
    abb8:	f7fa f90c 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abc0:	f7ff be7c 	b.w	a8bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f8>
    abc4:	2000014c 	.word	0x2000014c
    abc8:	b510      	push	{r4, lr}
    abca:	4c15      	ldr	r4, [pc, #84]	; (ac20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5c>)
    abcc:	68a0      	ldr	r0, [r4, #8]
    abce:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    abd2:	0789      	lsls	r1, r1, #30
    abd4:	d411      	bmi.n	abfa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c36>
    abd6:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abda:	2301      	movs	r3, #1
    abdc:	2100      	movs	r1, #0
    abde:	3078      	adds	r0, #120	; 0x78
    abe0:	f003 fb97 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abe4:	b120      	cbz	r0, abf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    abe6:	68a1      	ldr	r1, [r4, #8]
    abe8:	2006      	movs	r0, #6
    abea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    abee:	e009      	b.n	ac04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c40>
    abf0:	f240 61de 	movw	r1, #1758	; 0x6de
    abf4:	2031      	movs	r0, #49	; 0x31
    abf6:	f7fa f8ed 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    abfa:	2100      	movs	r1, #0
    abfc:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
    ac00:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    ac04:	68a0      	ldr	r0, [r4, #8]
    ac06:	f890 0087 	ldrb.w	r0, [r0, #135]	; 0x87
    ac0a:	0780      	lsls	r0, r0, #30
    ac0c:	d507      	bpl.n	ac1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c5a>
    ac0e:	f7fe fb0d 	bl	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x268>
    ac12:	68a0      	ldr	r0, [r4, #8]
    ac14:	f810 1f87 	ldrb.w	r1, [r0, #135]!
    ac18:	f021 0102 	bic.w	r1, r1, #2
    ac1c:	7001      	strb	r1, [r0, #0]
    ac1e:	bd10      	pop	{r4, pc}
    ac20:	2000014c 	.word	0x2000014c
    ac24:	4808      	ldr	r0, [pc, #32]	; (ac48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c84>)
    ac26:	b510      	push	{r4, lr}
    ac28:	6880      	ldr	r0, [r0, #8]
    ac2a:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    ac2e:	b941      	cbnz	r1, ac42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c7e>
    ac30:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ac34:	2301      	movs	r3, #1
    ac36:	2106      	movs	r1, #6
    ac38:	3078      	adds	r0, #120	; 0x78
    ac3a:	f003 fb6a 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac3e:	2800      	cmp	r0, #0
    ac40:	d000      	beq.n	ac44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c80>
    ac42:	2001      	movs	r0, #1
    ac44:	bd10      	pop	{r4, pc}
    ac46:	0000      	.short	0x0000
    ac48:	2000014c 	.word	0x2000014c
    ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac4e:	4c5a      	ldr	r4, [pc, #360]	; (adb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df4>)
    ac50:	4606      	mov	r6, r0
    ac52:	4615      	mov	r5, r2
    ac54:	68a0      	ldr	r0, [r4, #8]
    ac56:	2200      	movs	r2, #0
    ac58:	b111      	cbz	r1, ac60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9c>
    ac5a:	f8a0 211e 	strh.w	r2, [r0, #286]	; 0x11e
    ac5e:	e006      	b.n	ac6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1caa>
    ac60:	f8b0 111e 	ldrh.w	r1, [r0, #286]	; 0x11e
    ac64:	f8b0 210e 	ldrh.w	r2, [r0, #270]	; 0x10e
    ac68:	4411      	add	r1, r2
    ac6a:	f8a0 111e 	strh.w	r1, [r0, #286]	; 0x11e
    ac6e:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    ac72:	f88d 1000 	strb.w	r1, [sp]
    ac76:	9900      	ldr	r1, [sp, #0]
    ac78:	9100      	str	r1, [sp, #0]
    ac7a:	f89d 1000 	ldrb.w	r1, [sp]
    ac7e:	b939      	cbnz	r1, ac90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    ac80:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ac84:	2301      	movs	r3, #1
    ac86:	4619      	mov	r1, r3
    ac88:	3078      	adds	r0, #120	; 0x78
    ac8a:	f003 fb42 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac8e:	b130      	cbz	r0, ac9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cda>
    ac90:	68a0      	ldr	r0, [r4, #8]
    ac92:	f830 1fb0 	ldrh.w	r1, [r0, #176]!
    ac96:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    ac9a:	4411      	add	r1, r2
    ac9c:	8001      	strh	r1, [r0, #0]
    ac9e:	68a0      	ldr	r0, [r4, #8]
    aca0:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
    aca4:	b132      	cbz	r2, acb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cf0>
    aca6:	f8b0 10b2 	ldrh.w	r1, [r0, #178]	; 0xb2
    acaa:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    acae:	4419      	add	r1, r3
    acb0:	f8a0 10b2 	strh.w	r1, [r0, #178]	; 0xb2
    acb4:	f990 70ba 	ldrsb.w	r7, [r0, #186]	; 0xba
    acb8:	2f00      	cmp	r7, #0
    acba:	dd06      	ble.n	acca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d06>
    acbc:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
    acc0:	f8b0 310e 	ldrh.w	r3, [r0, #270]	; 0x10e
    acc4:	4419      	add	r1, r3
    acc6:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8
    acca:	233d      	movs	r3, #61	; 0x3d
    accc:	21ff      	movs	r1, #255	; 0xff
    acce:	b116      	cbz	r6, acd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d12>
    acd0:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    acd4:	e012      	b.n	acfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    acd6:	7824      	ldrb	r4, [r4, #0]
    acd8:	2c02      	cmp	r4, #2
    acda:	d009      	beq.n	acf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d2c>
    acdc:	2c01      	cmp	r4, #1
    acde:	d011      	beq.n	ad04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d40>
    ace0:	b33d      	cbz	r5, ad32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d6e>
    ace2:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    ace6:	7011      	strb	r1, [r2, #0]
    ace8:	06e9      	lsls	r1, r5, #27
    acea:	d50e      	bpl.n	ad0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d46>
    acec:	211e      	movs	r1, #30
    acee:	e018      	b.n	ad22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    acf0:	f890 20fe 	ldrb.w	r2, [r0, #254]	; 0xfe
    acf4:	2a06      	cmp	r2, #6
    acf6:	d044      	beq.n	ad82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    acf8:	2216      	movs	r2, #22
    acfa:	e042      	b.n	ad82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    acfc:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    ad00:	7011      	strb	r1, [r2, #0]
    ad02:	e047      	b.n	ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad04:	f890 218a 	ldrb.w	r2, [r0, #394]	; 0x18a
    ad08:	e03b      	b.n	ad82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    ad0a:	0729      	lsls	r1, r5, #28
    ad0c:	d502      	bpl.n	ad14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d50>
    ad0e:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
    ad12:	e03f      	b.n	ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad14:	06a9      	lsls	r1, r5, #26
    ad16:	d501      	bpl.n	ad1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    ad18:	2123      	movs	r1, #35	; 0x23
    ad1a:	e002      	b.n	ad22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5e>
    ad1c:	07a9      	lsls	r1, r5, #30
    ad1e:	d003      	beq.n	ad28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d64>
    ad20:	212a      	movs	r1, #42	; 0x2a
    ad22:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    ad26:	e035      	b.n	ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad28:	f640 41b1 	movw	r1, #3249	; 0xcb1
    ad2c:	2031      	movs	r0, #49	; 0x31
    ad2e:	f7fa f851 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad32:	b12a      	cbz	r2, ad40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7c>
    ad34:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    ad38:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    ad3c:	429a      	cmp	r2, r3
    ad3e:	d216      	bcs.n	ad6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    ad40:	2f00      	cmp	r7, #0
    ad42:	dd05      	ble.n	ad50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8c>
    ad44:	f8b0 20b8 	ldrh.w	r2, [r0, #184]	; 0xb8
    ad48:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
    ad4c:	429a      	cmp	r2, r3
    ad4e:	d20e      	bcs.n	ad6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1daa>
    ad50:	f8b0 30b0 	ldrh.w	r3, [r0, #176]	; 0xb0
    ad54:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    ad58:	4293      	cmp	r3, r2
    ad5a:	d30a      	bcc.n	ad72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    ad5c:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
    ad60:	f88d 3000 	strb.w	r3, [sp]
    ad64:	9b00      	ldr	r3, [sp, #0]
    ad66:	9300      	str	r3, [sp, #0]
    ad68:	f89d 3000 	ldrb.w	r3, [sp]
    ad6c:	b10b      	cbz	r3, ad72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dae>
    ad6e:	2222      	movs	r2, #34	; 0x22
    ad70:	e007      	b.n	ad82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    ad72:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    ad76:	b13b      	cbz	r3, ad88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc4>
    ad78:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    ad7c:	4293      	cmp	r3, r2
    ad7e:	d309      	bcc.n	ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad80:	2208      	movs	r2, #8
    ad82:	f880 209d 	strb.w	r2, [r0, #157]	; 0x9d
    ad86:	e7b9      	b.n	acfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    ad88:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
    ad8c:	2a06      	cmp	r2, #6
    ad8e:	d301      	bcc.n	ad94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd0>
    ad90:	223e      	movs	r2, #62	; 0x3e
    ad92:	e7f6      	b.n	ad82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    ad94:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
    ad98:	f88d 1000 	strb.w	r1, [sp]
    ad9c:	9900      	ldr	r1, [sp, #0]
    ad9e:	9100      	str	r1, [sp, #0]
    ada0:	f89d 1000 	ldrb.w	r1, [sp]
    ada4:	b119      	cbz	r1, adae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dea>
    ada6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    adaa:	f004 bde3 	b.w	f974 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    adae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    adb2:	2100      	movs	r1, #0
    adb4:	f7fd bb1c 	b.w	83f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    adb8:	2000014c 	.word	0x2000014c
    adbc:	b570      	push	{r4, r5, r6, lr}
    adbe:	4d2d      	ldr	r5, [pc, #180]	; (ae74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eb0>)
    adc0:	68a8      	ldr	r0, [r5, #8]
    adc2:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    adc6:	b151      	cbz	r1, adde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    adc8:	2901      	cmp	r1, #1
    adca:	d008      	beq.n	adde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    adcc:	2902      	cmp	r1, #2
    adce:	d009      	beq.n	ade4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    add0:	2903      	cmp	r1, #3
    add2:	d007      	beq.n	ade4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e20>
    add4:	f640 216d 	movw	r1, #2669	; 0xa6d
    add8:	2031      	movs	r0, #49	; 0x31
    adda:	f7f9 fffb 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    adde:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    ade2:	e035      	b.n	ae50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e8c>
    ade4:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    ade8:	2908      	cmp	r1, #8
    adea:	d034      	beq.n	ae56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e92>
    adec:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    adf0:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
    adf4:	2400      	movs	r4, #0
    adf6:	1c8b      	adds	r3, r1, #2
    adf8:	429a      	cmp	r2, r3
    adfa:	d306      	bcc.n	ae0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    adfc:	1a51      	subs	r1, r2, r1
    adfe:	1e89      	subs	r1, r1, #2
    ae00:	040c      	lsls	r4, r1, #16
    ae02:	0c24      	lsrs	r4, r4, #16
    ae04:	d001      	beq.n	ae0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e46>
    ae06:	1e64      	subs	r4, r4, #1
    ae08:	b2a4      	uxth	r4, r4
    ae0a:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    ae0e:	b139      	cbz	r1, ae20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e5c>
    ae10:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae14:	2301      	movs	r3, #1
    ae16:	2109      	movs	r1, #9
    ae18:	3078      	adds	r0, #120	; 0x78
    ae1a:	f003 fa7a 	bl	e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae1e:	b330      	cbz	r0, ae6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1eaa>
    ae20:	f7ff ff00 	bl	ac24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c60>
    ae24:	b168      	cbz	r0, ae42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    ae26:	68a9      	ldr	r1, [r5, #8]
    ae28:	2000      	movs	r0, #0
    ae2a:	31a0      	adds	r1, #160	; 0xa0
    ae2c:	c906      	ldmia	r1, {r1, r2}
    ae2e:	1c8b      	adds	r3, r1, #2
    ae30:	429a      	cmp	r2, r3
    ae32:	d303      	bcc.n	ae3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    ae34:	1a50      	subs	r0, r2, r1
    ae36:	1e80      	subs	r0, r0, #2
    ae38:	d000      	beq.n	ae3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e78>
    ae3a:	1e40      	subs	r0, r0, #1
    ae3c:	42a0      	cmp	r0, r4
    ae3e:	d200      	bcs.n	ae42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e7e>
    ae40:	b284      	uxth	r4, r0
    ae42:	b10c      	cbz	r4, ae48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    ae44:	1e64      	subs	r4, r4, #1
    ae46:	b2a4      	uxth	r4, r4
    ae48:	68a8      	ldr	r0, [r5, #8]
    ae4a:	f8b0 110c 	ldrh.w	r1, [r0, #268]	; 0x10c
    ae4e:	4421      	add	r1, r4
    ae50:	f8a0 1108 	strh.w	r1, [r0, #264]	; 0x108
    ae54:	bd70      	pop	{r4, r5, r6, pc}
    ae56:	f8b0 10ac 	ldrh.w	r1, [r0, #172]	; 0xac
    ae5a:	2903      	cmp	r1, #3
    ae5c:	d3bf      	bcc.n	adde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e1a>
    ae5e:	f830 1f7c 	ldrh.w	r1, [r0, #124]!
    ae62:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    ae64:	4411      	add	r1, r2
    ae66:	1c49      	adds	r1, r1, #1
    ae68:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
    ae6c:	bd70      	pop	{r4, r5, r6, pc}
    ae6e:	2400      	movs	r4, #0
    ae70:	e7ea      	b.n	ae48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e84>
    ae72:	0000      	.short	0x0000
    ae74:	2000014c 	.word	0x2000014c

0000ae78 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    ae78:	4903      	ldr	r1, [pc, #12]	; (ae88 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    ae7a:	884a      	ldrh	r2, [r1, #2]
    ae7c:	8002      	strh	r2, [r0, #0]
    ae7e:	7809      	ldrb	r1, [r1, #0]
    ae80:	7081      	strb	r1, [r0, #2]
    ae82:	2000      	movs	r0, #0
    ae84:	4770      	bx	lr
    ae86:	0000      	.short	0x0000
    ae88:	20001114 	.word	0x20001114

0000ae8c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    ae8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ae8e:	460c      	mov	r4, r1
    ae90:	4605      	mov	r5, r0
    ae92:	8800      	ldrh	r0, [r0, #0]
    ae94:	4669      	mov	r1, sp
    ae96:	f003 fa12 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ae9a:	2200      	movs	r2, #0
    ae9c:	b128      	cbz	r0, aeaa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    ae9e:	f8c4 2002 	str.w	r2, [r4, #2]
    aea2:	71a2      	strb	r2, [r4, #6]
    aea4:	8022      	strh	r2, [r4, #0]
    aea6:	2002      	movs	r0, #2
    aea8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    aeaa:	9901      	ldr	r1, [sp, #4]
    aeac:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    aeb0:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
    aeb4:	f8d1 0016 	ldr.w	r0, [r1, #22]
    aeb8:	f8c4 0002 	str.w	r0, [r4, #2]
    aebc:	7e88      	ldrb	r0, [r1, #26]
    aebe:	71a0      	strb	r0, [r4, #6]
    aec0:	8828      	ldrh	r0, [r5, #0]
    aec2:	8020      	strh	r0, [r4, #0]
    aec4:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
    aec8:	f88d 0008 	strb.w	r0, [sp, #8]
    aecc:	9802      	ldr	r0, [sp, #8]
    aece:	9002      	str	r0, [sp, #8]
    aed0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aed4:	2800      	cmp	r0, #0
    aed6:	d1eb      	bne.n	aeb0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    aed8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

0000aedc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    aedc:	b510      	push	{r4, lr}
    aede:	4604      	mov	r4, r0
    aee0:	f005 fc78 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    aee4:	b130      	cbz	r0, aef4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    aee6:	4804      	ldr	r0, [pc, #16]	; (aef8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    aee8:	8881      	ldrh	r1, [r0, #4]
    aeea:	8021      	strh	r1, [r4, #0]
    aeec:	88c0      	ldrh	r0, [r0, #6]
    aeee:	8060      	strh	r0, [r4, #2]
    aef0:	2000      	movs	r0, #0
    aef2:	bd10      	pop	{r4, pc}
    aef4:	2001      	movs	r0, #1
    aef6:	bd10      	pop	{r4, pc}
    aef8:	20000234 	.word	0x20000234

0000aefc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    aefc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    aefe:	4605      	mov	r5, r0
    af00:	f005 fc8a 	bl	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    af04:	b310      	cbz	r0, af4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x50>
    af06:	2400      	movs	r4, #0
    af08:	a802      	add	r0, sp, #8
    af0a:	f88d 4004 	strb.w	r4, [sp, #4]
    af0e:	f88d 4008 	strb.w	r4, [sp, #8]
    af12:	9000      	str	r0, [sp, #0]
    af14:	78aa      	ldrb	r2, [r5, #2]
    af16:	7869      	ldrb	r1, [r5, #1]
    af18:	7828      	ldrb	r0, [r5, #0]
    af1a:	ab01      	add	r3, sp, #4
    af1c:	f005 fd4d 	bl	109ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
    af20:	2800      	cmp	r0, #0
    af22:	d112      	bne.n	af4a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4e>
    af24:	f89d 0004 	ldrb.w	r0, [sp, #4]
    af28:	f005 fbbc 	bl	106a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    af2c:	b180      	cbz	r0, af50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    af2e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    af32:	f005 fbb7 	bl	106a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    af36:	b158      	cbz	r0, af50 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    af38:	4806      	ldr	r0, [pc, #24]	; (af54 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>)
    af3a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    af3e:	7381      	strb	r1, [r0, #14]
    af40:	f89d 1008 	ldrb.w	r1, [sp, #8]
    af44:	73c1      	strb	r1, [r0, #15]
    af46:	8204      	strh	r4, [r0, #16]
    af48:	2000      	movs	r0, #0
    af4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af4c:	2001      	movs	r0, #1
    af4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af50:	2011      	movs	r0, #17
    af52:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    af54:	20001114 	.word	0x20001114

0000af58 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    af58:	7801      	ldrb	r1, [r0, #0]
    af5a:	b171      	cbz	r1, af7a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af5c:	7841      	ldrb	r1, [r0, #1]
    af5e:	b161      	cbz	r1, af7a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af60:	8841      	ldrh	r1, [r0, #2]
    af62:	291b      	cmp	r1, #27
    af64:	d309      	bcc.n	af7a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af66:	8881      	ldrh	r1, [r0, #4]
    af68:	291b      	cmp	r1, #27
    af6a:	d306      	bcc.n	af7a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    af6c:	4904      	ldr	r1, [pc, #16]	; (af80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    af6e:	6802      	ldr	r2, [r0, #0]
    af70:	600a      	str	r2, [r1, #0]
    af72:	8880      	ldrh	r0, [r0, #4]
    af74:	8088      	strh	r0, [r1, #4]
    af76:	2000      	movs	r0, #0
    af78:	4770      	bx	lr
    af7a:	2012      	movs	r0, #18
    af7c:	4770      	bx	lr
    af7e:	0000      	.short	0x0000
    af80:	20001114 	.word	0x20001114

0000af84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    af84:	6800      	ldr	r0, [r0, #0]
    af86:	f240 41e2 	movw	r1, #1250	; 0x4e2
    af8a:	4288      	cmp	r0, r1
    af8c:	d303      	bcc.n	af96 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    af8e:	4903      	ldr	r1, [pc, #12]	; (af9c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    af90:	6088      	str	r0, [r1, #8]
    af92:	2000      	movs	r0, #0
    af94:	4770      	bx	lr
    af96:	2012      	movs	r0, #18
    af98:	4770      	bx	lr
    af9a:	0000      	.short	0x0000
    af9c:	20001114 	.word	0x20001114

0000afa0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    afa0:	4a03      	ldr	r2, [pc, #12]	; (afb0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    afa2:	e9d2 1200 	ldrd	r1, r2, [r2]
    afa6:	6001      	str	r1, [r0, #0]
    afa8:	6042      	str	r2, [r0, #4]
    afaa:	2000      	movs	r0, #0
    afac:	4770      	bx	lr
    afae:	0000      	.short	0x0000
    afb0:	0000b2dc 	.word	0x0000b2dc

0000afb4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    afb4:	b510      	push	{r4, lr}
    afb6:	2005      	movs	r0, #5
    afb8:	f000 fa14 	bl	b3e4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    afbc:	f7fd fe20 	bl	8c00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    afc0:	4902      	ldr	r1, [pc, #8]	; (afcc <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    afc2:	4801      	ldr	r0, [pc, #4]	; (afc8 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    afc4:	6008      	str	r0, [r1, #0]
    afc6:	bd10      	pop	{r4, pc}
    afc8:	0000b025 	.word	0x0000b025
    afcc:	20000230 	.word	0x20000230

0000afd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    afd0:	b510      	push	{r4, lr}
    afd2:	f003 f8c8 	bl	e166 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    afd6:	f7fb fbbd 	bl	6754 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    afda:	f000 fa25 	bl	b428 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    afde:	f003 fd75 	bl	eacc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    afe2:	480e      	ldr	r0, [pc, #56]	; (b01c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    afe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    afe8:	4b0d      	ldr	r3, [pc, #52]	; (b020 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    afea:	8281      	strh	r1, [r0, #20]
    afec:	2100      	movs	r1, #0
    afee:	7581      	strb	r1, [r0, #22]
    aff0:	8301      	strh	r1, [r0, #24]
    aff2:	221b      	movs	r2, #27
    aff4:	801a      	strh	r2, [r3, #0]
    aff6:	f44f 74a4 	mov.w	r4, #328	; 0x148
    affa:	805c      	strh	r4, [r3, #2]
    affc:	809a      	strh	r2, [r3, #4]
    affe:	80dc      	strh	r4, [r3, #6]
    b000:	7381      	strb	r1, [r0, #14]
    b002:	73c1      	strb	r1, [r0, #15]
    b004:	2303      	movs	r3, #3
    b006:	7003      	strb	r3, [r0, #0]
    b008:	2302      	movs	r3, #2
    b00a:	7043      	strb	r3, [r0, #1]
    b00c:	8042      	strh	r2, [r0, #2]
    b00e:	8082      	strh	r2, [r0, #4]
    b010:	f640 62a6 	movw	r2, #3750	; 0xea6
    b014:	6082      	str	r2, [r0, #8]
    b016:	7481      	strb	r1, [r0, #18]
    b018:	7301      	strb	r1, [r0, #12]
    b01a:	bd10      	pop	{r4, pc}
    b01c:	20001114 	.word	0x20001114
    b020:	20000234 	.word	0x20000234
    b024:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b028:	4692      	mov	sl, r2
    b02a:	460f      	mov	r7, r1
    b02c:	4681      	mov	r9, r0
    b02e:	f005 fbd1 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b032:	2800      	cmp	r0, #0
    b034:	d063      	beq.n	b0fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b036:	4933      	ldr	r1, [pc, #204]	; (b104 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    b038:	f8b9 2058 	ldrh.w	r2, [r9, #88]	; 0x58
    b03c:	f8b9 6056 	ldrh.w	r6, [r9, #86]	; 0x56
    b040:	8808      	ldrh	r0, [r1, #0]
    b042:	4290      	cmp	r0, r2
    b044:	d300      	bcc.n	b048 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    b046:	4610      	mov	r0, r2
    b048:	4680      	mov	r8, r0
    b04a:	8888      	ldrh	r0, [r1, #4]
    b04c:	42b0      	cmp	r0, r6
    b04e:	d200      	bcs.n	b052 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    b050:	4606      	mov	r6, r0
    b052:	884c      	ldrh	r4, [r1, #2]
    b054:	f640 0048 	movw	r0, #2120	; 0x848
    b058:	4284      	cmp	r4, r0
    b05a:	d300      	bcc.n	b05e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    b05c:	4604      	mov	r4, r0
    b05e:	88cd      	ldrh	r5, [r1, #6]
    b060:	4285      	cmp	r5, r0
    b062:	d300      	bcc.n	b066 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    b064:	4605      	mov	r5, r0
    b066:	4284      	cmp	r4, r0
    b068:	d300      	bcc.n	b06c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    b06a:	4604      	mov	r4, r0
    b06c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    b070:	2e1b      	cmp	r6, #27
    b072:	d001      	beq.n	b078 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    b074:	428d      	cmp	r5, r1
    b076:	d104      	bne.n	b082 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    b078:	f1b8 0f1b 	cmp.w	r8, #27
    b07c:	d03f      	beq.n	b0fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b07e:	428c      	cmp	r4, r1
    b080:	d03d      	beq.n	b0fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b082:	466a      	mov	r2, sp
    b084:	4651      	mov	r1, sl
    b086:	4648      	mov	r0, r9
    b088:	f005 fb2f 	bl	106ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b08c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    b090:	4641      	mov	r1, r8
    b092:	4540      	cmp	r0, r8
    b094:	d900      	bls.n	b098 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    b096:	4608      	mov	r0, r1
    b098:	80f8      	strh	r0, [r7, #6]
    b09a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    b09e:	42a1      	cmp	r1, r4
    b0a0:	d800      	bhi.n	b0a4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    b0a2:	460c      	mov	r4, r1
    b0a4:	813c      	strh	r4, [r7, #8]
    b0a6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b0aa:	42b1      	cmp	r1, r6
    b0ac:	d800      	bhi.n	b0b0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    b0ae:	460e      	mov	r6, r1
    b0b0:	807e      	strh	r6, [r7, #2]
    b0b2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b0b6:	42a9      	cmp	r1, r5
    b0b8:	d900      	bls.n	b0bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    b0ba:	4629      	mov	r1, r5
    b0bc:	80b9      	strh	r1, [r7, #4]
    b0be:	22ff      	movs	r2, #255	; 0xff
    b0c0:	703a      	strb	r2, [r7, #0]
    b0c2:	381b      	subs	r0, #27
    b0c4:	28e0      	cmp	r0, #224	; 0xe0
    b0c6:	d902      	bls.n	b0ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    b0c8:	f44f 614e 	mov.w	r1, #3296	; 0xce0
    b0cc:	e014      	b.n	b0f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b0ce:	3e1b      	subs	r6, #27
    b0d0:	2ee0      	cmp	r6, #224	; 0xe0
    b0d2:	d902      	bls.n	b0da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    b0d4:	f640 41e2 	movw	r1, #3298	; 0xce2
    b0d8:	e00e      	b.n	b0f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b0da:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    b0de:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    b0e2:	4284      	cmp	r4, r0
    b0e4:	d902      	bls.n	b0ec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    b0e6:	f640 41e4 	movw	r1, #3300	; 0xce4
    b0ea:	e005      	b.n	b0f8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    b0ec:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    b0f0:	4281      	cmp	r1, r0
    b0f2:	d904      	bls.n	b0fe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    b0f4:	f640 41e6 	movw	r1, #3302	; 0xce6
    b0f8:	2039      	movs	r0, #57	; 0x39
    b0fa:	f7f9 fe6b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0fe:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b102:	0000      	.short	0x0000
    b104:	20000234 	.word	0x20000234

0000b108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    b108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b10c:	b088      	sub	sp, #32
    b10e:	460c      	mov	r4, r1
    b110:	4606      	mov	r6, r0
    b112:	f003 ff01 	bl	ef18 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    b116:	b198      	cbz	r0, b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    b118:	4630      	mov	r0, r6
    b11a:	f003 fef0 	bl	eefe <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    b11e:	b130      	cbz	r0, b12e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    b120:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    b124:	2012      	movs	r0, #18
    b126:	2900      	cmp	r1, #0
    b128:	d00b      	beq.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b12a:	2980      	cmp	r1, #128	; 0x80
    b12c:	d809      	bhi.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b12e:	4630      	mov	r0, r6
    b130:	f003 fed4 	bl	eedc <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    b134:	b140      	cbz	r0, b148 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b136:	4630      	mov	r0, r6
    b138:	f003 fe4c 	bl	edd4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    b13c:	b130      	cbz	r0, b14c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    b13e:	e009      	b.n	b154 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    b140:	2042      	movs	r0, #66	; 0x42
    b142:	b008      	add	sp, #32
    b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b148:	200c      	movs	r0, #12
    b14a:	e7fa      	b.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b14c:	4630      	mov	r0, r6
    b14e:	f003 fed0 	bl	eef2 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    b152:	b3a8      	cbz	r0, b1c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    b154:	4630      	mov	r0, r6
    b156:	f004 f8b3 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    b15a:	2800      	cmp	r0, #0
    b15c:	d1f4      	bne.n	b148 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b15e:	4630      	mov	r0, r6
    b160:	f003 fe53 	bl	ee0a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    b164:	2800      	cmp	r0, #0
    b166:	d1ef      	bne.n	b148 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    b168:	4630      	mov	r0, r6
    b16a:	f7fc f919 	bl	73a0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    b16e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    b172:	f242 7110 	movw	r1, #10000	; 0x2710
    b176:	fb00 f801 	mul.w	r8, r0, r1
    b17a:	78e1      	ldrb	r1, [r4, #3]
    b17c:	4630      	mov	r0, r6
    b17e:	f003 fea4 	bl	eeca <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    b182:	4630      	mov	r0, r6
    b184:	f003 feb7 	bl	eef6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    b188:	b1e8      	cbz	r0, b1c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    b18a:	2200      	movs	r2, #0
    b18c:	4611      	mov	r1, r2
    b18e:	a801      	add	r0, sp, #4
    b190:	f7fa f87e 	bl	5290 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b194:	0004      	movs	r4, r0
    b196:	d06a      	beq.n	b26e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b198:	2100      	movs	r1, #0
    b19a:	f7fb fd07 	bl	6bac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    b19e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b1a2:	8020      	strh	r0, [r4, #0]
    b1a4:	4621      	mov	r1, r4
    b1a6:	4630      	mov	r0, r6
    b1a8:	f003 fec9 	bl	ef3e <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    b1ac:	f005 fb12 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    b1b0:	4d3a      	ldr	r5, [pc, #232]	; (b29c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    b1b2:	2800      	cmp	r0, #0
    b1b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    b1b8:	d00f      	beq.n	b1da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    b1ba:	886a      	ldrh	r2, [r5, #2]
    b1bc:	88a9      	ldrh	r1, [r5, #4]
    b1be:	e00e      	b.n	b1de <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    b1c0:	e7ff      	b.n	b1c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    b1c2:	2012      	movs	r0, #18
    b1c4:	e7bd      	b.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b1c6:	4642      	mov	r2, r8
    b1c8:	2100      	movs	r1, #0
    b1ca:	4630      	mov	r0, r6
    b1cc:	f7fd f832 	bl	8234 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b1d0:	2800      	cmp	r0, #0
    b1d2:	d0b6      	beq.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b1d4:	f241 41ab 	movw	r1, #5291	; 0x14ab
    b1d8:	e053      	b.n	b282 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b1da:	221b      	movs	r2, #27
    b1dc:	4611      	mov	r1, r2
    b1de:	84c2      	strh	r2, [r0, #38]	; 0x26
    b1e0:	8501      	strh	r1, [r0, #40]	; 0x28
    b1e2:	68a8      	ldr	r0, [r5, #8]
    b1e4:	6320      	str	r0, [r4, #48]	; 0x30
    b1e6:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b1ea:	4630      	mov	r0, r6
    b1ec:	f003 fe8b 	bl	ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b1f0:	b910      	cbnz	r0, b1f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    b1f2:	4630      	mov	r0, r6
    b1f4:	f003 fea1 	bl	ef3a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b1f8:	6127      	str	r7, [r4, #16]
    b1fa:	8821      	ldrh	r1, [r4, #0]
    b1fc:	f8ad 1008 	strh.w	r1, [sp, #8]
    b200:	7ba9      	ldrb	r1, [r5, #14]
    b202:	f88d 100a 	strb.w	r1, [sp, #10]
    b206:	7be9      	ldrb	r1, [r5, #15]
    b208:	f88d 100b 	strb.w	r1, [sp, #11]
    b20c:	8a29      	ldrh	r1, [r5, #16]
    b20e:	f8ad 100c 	strh.w	r1, [sp, #12]
    b212:	a905      	add	r1, sp, #20
    b214:	9100      	str	r1, [sp, #0]
    b216:	2001      	movs	r0, #1
    b218:	ab04      	add	r3, sp, #16
    b21a:	aa02      	add	r2, sp, #8
    b21c:	4621      	mov	r1, r4
    b21e:	f005 fa9a 	bl	10756 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    b222:	b140      	cbz	r0, b236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    b224:	2100      	movs	r1, #0
    b226:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b22a:	f7fa f85b 	bl	52e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b22e:	b1f0      	cbz	r0, b26e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b230:	f241 41f7 	movw	r1, #5367	; 0x14f7
    b234:	e025      	b.n	b282 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b236:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b23a:	f88d 0018 	strb.w	r0, [sp, #24]
    b23e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b242:	f88d 0019 	strb.w	r0, [sp, #25]
    b246:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b24a:	f8ad 001a 	strh.w	r0, [sp, #26]
    b24e:	a906      	add	r1, sp, #24
    b250:	4620      	mov	r0, r4
    b252:	f003 f8f3 	bl	e43c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b256:	7868      	ldrb	r0, [r5, #1]
    b258:	9000      	str	r0, [sp, #0]
    b25a:	782b      	ldrb	r3, [r5, #0]
    b25c:	88aa      	ldrh	r2, [r5, #4]
    b25e:	8869      	ldrh	r1, [r5, #2]
    b260:	8820      	ldrh	r0, [r4, #0]
    b262:	f7fa f90b 	bl	547c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b266:	b120      	cbz	r0, b272 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    b268:	f241 5102 	movw	r1, #5378	; 0x1502
    b26c:	e009      	b.n	b282 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b26e:	2009      	movs	r0, #9
    b270:	e767      	b.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b272:	4642      	mov	r2, r8
    b274:	4621      	mov	r1, r4
    b276:	4630      	mov	r0, r6
    b278:	f7fc ffdc 	bl	8234 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b27c:	b120      	cbz	r0, b288 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b27e:	f241 5104 	movw	r1, #5380	; 0x1504
    b282:	2039      	movs	r0, #57	; 0x39
    b284:	f7f9 fda6 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b288:	4805      	ldr	r0, [pc, #20]	; (b2a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    b28a:	6803      	ldr	r3, [r0, #0]
    b28c:	b123      	cbz	r3, b298 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    b28e:	2200      	movs	r2, #0
    b290:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
    b294:	4620      	mov	r0, r4
    b296:	4798      	blx	r3
    b298:	2000      	movs	r0, #0
    b29a:	e752      	b.n	b142 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b29c:	20001114 	.word	0x20001114
    b2a0:	20000230 	.word	0x20000230
    b2a4:	b510      	push	{r4, lr}
    b2a6:	4604      	mov	r4, r0
    b2a8:	88c1      	ldrh	r1, [r0, #6]
    b2aa:	8880      	ldrh	r0, [r0, #4]
    b2ac:	f005 fa0f 	bl	106ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b2b0:	2800      	cmp	r0, #0
    b2b2:	d10f      	bne.n	b2d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b2b4:	8861      	ldrh	r1, [r4, #2]
    b2b6:	8820      	ldrh	r0, [r4, #0]
    b2b8:	f005 fa09 	bl	106ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b2bc:	2800      	cmp	r0, #0
    b2be:	d109      	bne.n	b2d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1cc>
    b2c0:	4805      	ldr	r0, [pc, #20]	; (b2d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>)
    b2c2:	88a1      	ldrh	r1, [r4, #4]
    b2c4:	8081      	strh	r1, [r0, #4]
    b2c6:	8821      	ldrh	r1, [r4, #0]
    b2c8:	8001      	strh	r1, [r0, #0]
    b2ca:	88e1      	ldrh	r1, [r4, #6]
    b2cc:	80c1      	strh	r1, [r0, #6]
    b2ce:	8861      	ldrh	r1, [r4, #2]
    b2d0:	8041      	strh	r1, [r0, #2]
    b2d2:	2000      	movs	r0, #0
    b2d4:	bd10      	pop	{r4, pc}
    b2d6:	0000      	.short	0x0000
    b2d8:	20000234 	.word	0x20000234
    b2dc:	0c11360c 	.word	0x0c11360c
    b2e0:	11360059 	.word	0x11360059
    b2e4:	05060708 	.word	0x05060708
    b2e8:	00020304 	.word	0x00020304
    b2ec:	f0f4f8fc 	.word	0xf0f4f8fc
    b2f0:	0304d8ec 	.word	0x0304d8ec
    b2f4:	f4f8fc00 	.word	0xf4f8fc00
    b2f8:	00d8ecf0 	.word	0x00d8ecf0

0000b2fc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b2fc:	b510      	push	{r4, lr}
    b2fe:	f7fb fe99 	bl	7034 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b302:	4804      	ldr	r0, [pc, #16]	; (b314 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    b304:	6840      	ldr	r0, [r0, #4]
    b306:	f005 fbd0 	bl	10aaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b30e:	f005 b877 	b.w	10400 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b312:	0000      	.short	0x0000
    b314:	2000023c 	.word	0x2000023c

0000b318 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b318:	b510      	push	{r4, lr}
    b31a:	4c05      	ldr	r4, [pc, #20]	; (b330 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x18>)
    b31c:	68a0      	ldr	r0, [r4, #8]
    b31e:	f005 fbc4 	bl	10aaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b322:	68e0      	ldr	r0, [r4, #12]
    b324:	f005 fbc1 	bl	10aaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5d6>
    b328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b32c:	f7ff be50 	b.w	afd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b330:	2000023c 	.word	0x2000023c

0000b334 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b334:	b510      	push	{r4, lr}
    b336:	4905      	ldr	r1, [pc, #20]	; (b34c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b338:	4805      	ldr	r0, [pc, #20]	; (b350 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b33a:	f005 fba9 	bl	10a90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b33e:	4804      	ldr	r0, [pc, #16]	; (b350 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b344:	4903      	ldr	r1, [pc, #12]	; (b354 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b346:	1d00      	adds	r0, r0, #4
    b348:	f005 bba2 	b.w	10a90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b34c:	2000024c 	.word	0x2000024c
    b350:	20000240 	.word	0x20000240
    b354:	20000254 	.word	0x20000254

0000b358 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b358:	b510      	push	{r4, lr}
    b35a:	4908      	ldr	r1, [pc, #32]	; (b37c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b35c:	4808      	ldr	r0, [pc, #32]	; (b380 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b35e:	f005 fb97 	bl	10a90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b362:	4807      	ldr	r0, [pc, #28]	; (b380 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b364:	4907      	ldr	r1, [pc, #28]	; (b384 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b366:	1d00      	adds	r0, r0, #4
    b368:	f005 fb92 	bl	10a90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b36c:	4804      	ldr	r0, [pc, #16]	; (b380 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b372:	4905      	ldr	r1, [pc, #20]	; (b388 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b374:	3008      	adds	r0, #8
    b376:	f005 bb8b 	b.w	10a90 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5bc>
    b37a:	0000      	.short	0x0000
    b37c:	20000264 	.word	0x20000264
    b380:	20000240 	.word	0x20000240
    b384:	2000026c 	.word	0x2000026c
    b388:	2000025c 	.word	0x2000025c

0000b38c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b38c:	4801      	ldr	r0, [pc, #4]	; (b394 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b38e:	7800      	ldrb	r0, [r0, #0]
    b390:	4770      	bx	lr
    b392:	0000      	.short	0x0000
    b394:	2000023c 	.word	0x2000023c
    b398:	b510      	push	{r4, lr}
    b39a:	f7fc f973 	bl	7684 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b39e:	f7fc ffd9 	bl	8354 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b3a2:	4803      	ldr	r0, [pc, #12]	; (b3b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b3a4:	f7fc f954 	bl	7650 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3ac:	f7fb be4e 	b.w	704c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b3b0:	2000159d 	.word	0x2000159d
    b3b4:	4909      	ldr	r1, [pc, #36]	; (b3dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b3b6:	b510      	push	{r4, lr}
    b3b8:	2001      	movs	r0, #1
    b3ba:	7008      	strb	r0, [r1, #0]
    b3bc:	f7fc f992 	bl	76e4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b3c0:	f7fd fd74 	bl	8eac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b3c4:	f002 feaf 	bl	e126 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b3c8:	4805      	ldr	r0, [pc, #20]	; (b3e0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b3ca:	f7fa fc25 	bl	5c18 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b3ce:	2000      	movs	r0, #0
    b3d0:	f7f9 fece 	bl	5170 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3d8:	f7fb be40 	b.w	705c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b3dc:	2000023c 	.word	0x2000023c
    b3e0:	2000159d 	.word	0x2000159d

0000b3e4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b3e4:	4a04      	ldr	r2, [pc, #16]	; (b3f8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    b3e6:	08c1      	lsrs	r1, r0, #3
    b3e8:	f000 0307 	and.w	r3, r0, #7
    b3ec:	2001      	movs	r0, #1
    b3ee:	4098      	lsls	r0, r3
    b3f0:	5c53      	ldrb	r3, [r2, r1]
    b3f2:	4303      	orrs	r3, r0
    b3f4:	5453      	strb	r3, [r2, r1]
    b3f6:	4770      	bx	lr
    b3f8:	20000000 	.word	0x20000000

0000b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b3fc:	4901      	ldr	r1, [pc, #4]	; (b404 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
    b402:	4770      	bx	lr
    b404:	20000000 	.word	0x20000000

0000b408 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b408:	4806      	ldr	r0, [pc, #24]	; (b424 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    b40a:	8801      	ldrh	r1, [r0, #0]
    b40c:	7900      	ldrb	r0, [r0, #4]
    b40e:	0602      	lsls	r2, r0, #24
    b410:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    b414:	f000 0001 	and.w	r0, r0, #1
    b418:	1800      	adds	r0, r0, r0
    b41a:	b2c0      	uxtb	r0, r0
    b41c:	f040 0001 	orr.w	r0, r0, #1
    b420:	4770      	bx	lr
    b422:	0000      	.short	0x0000
    b424:	20000000 	.word	0x20000000

0000b428 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b428:	b510      	push	{r4, lr}
    b42a:	f7f9 f927 	bl	467c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b42e:	2200      	movs	r2, #0
    b430:	4b08      	ldr	r3, [pc, #32]	; (b454 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b432:	4611      	mov	r1, r2
    b434:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b438:	4284      	cmp	r4, r0
    b43a:	d303      	bcc.n	b444 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b43c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b440:	7882      	ldrb	r2, [r0, #2]
    b442:	e003      	b.n	b44c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b444:	1c49      	adds	r1, r1, #1
    b446:	b2c9      	uxtb	r1, r1
    b448:	290c      	cmp	r1, #12
    b44a:	d3f3      	bcc.n	b434 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b44c:	4802      	ldr	r0, [pc, #8]	; (b458 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b44e:	7002      	strb	r2, [r0, #0]
    b450:	bd10      	pop	{r4, pc}
    b452:	0000      	.short	0x0000
    b454:	00010afc 	.word	0x00010afc
    b458:	200002bf 	.word	0x200002bf

0000b45c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b45c:	b570      	push	{r4, r5, r6, lr}
    b45e:	4605      	mov	r5, r0
    b460:	4616      	mov	r6, r2
    b462:	460c      	mov	r4, r1
    b464:	2002      	movs	r0, #2
    b466:	f000 f9b7 	bl	b7d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b46a:	4906      	ldr	r1, [pc, #24]	; (b484 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b46c:	2001      	movs	r0, #1
    b46e:	1ef6      	subs	r6, r6, #3
    b470:	7008      	strb	r0, [r1, #0]
    b472:	4805      	ldr	r0, [pc, #20]	; (b488 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b474:	6006      	str	r6, [r0, #0]
    b476:	4804      	ldr	r0, [pc, #16]	; (b488 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b478:	3808      	subs	r0, #8
    b47a:	6005      	str	r5, [r0, #0]
    b47c:	1f00      	subs	r0, r0, #4
    b47e:	6004      	str	r4, [r0, #0]
    b480:	bd70      	pop	{r4, r5, r6, pc}
    b482:	0000      	.short	0x0000
    b484:	200002c0 	.word	0x200002c0
    b488:	4000f510 	.word	0x4000f510

0000b48c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b48c:	b510      	push	{r4, lr}
    b48e:	4c0c      	ldr	r4, [pc, #48]	; (b4c0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b490:	7820      	ldrb	r0, [r4, #0]
    b492:	b180      	cbz	r0, b4b6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b494:	490b      	ldr	r1, [pc, #44]	; (b4c4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b496:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b49a:	6008      	str	r0, [r1, #0]
    b49c:	f000 f86a 	bl	b574 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b4a0:	2100      	movs	r1, #0
    b4a2:	b120      	cbz	r0, b4ae <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b4a4:	2001      	movs	r0, #1
    b4a6:	7060      	strb	r0, [r4, #1]
    b4a8:	4807      	ldr	r0, [pc, #28]	; (b4c8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b4aa:	6800      	ldr	r0, [r0, #0]
    b4ac:	e001      	b.n	b4b2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b4ae:	7061      	strb	r1, [r4, #1]
    b4b0:	2010      	movs	r0, #16
    b4b2:	70a0      	strb	r0, [r4, #2]
    b4b4:	7021      	strb	r1, [r4, #0]
    b4b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4ba:	2000      	movs	r0, #0
    b4bc:	f000 b98c 	b.w	b7d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b4c0:	200002c0 	.word	0x200002c0
    b4c4:	4001f508 	.word	0x4001f508
    b4c8:	4000f400 	.word	0x4000f400

0000b4cc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b4cc:	b510      	push	{r4, lr}
    b4ce:	2002      	movs	r0, #2
    b4d0:	f000 f982 	bl	b7d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b4d4:	4904      	ldr	r1, [pc, #16]	; (b4e8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b4d6:	2001      	movs	r0, #1
    b4d8:	7008      	strb	r0, [r1, #0]
    b4da:	f000 f859 	bl	b590 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b4de:	4903      	ldr	r1, [pc, #12]	; (b4ec <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b4e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b4e4:	6008      	str	r0, [r1, #0]
    b4e6:	bd10      	pop	{r4, pc}
    b4e8:	200002c0 	.word	0x200002c0
    b4ec:	4001f504 	.word	0x4001f504

0000b4f0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b4f0:	4803      	ldr	r0, [pc, #12]	; (b500 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b4f2:	2100      	movs	r1, #0
    b4f4:	7001      	strb	r1, [r0, #0]
    b4f6:	7041      	strb	r1, [r0, #1]
    b4f8:	2110      	movs	r1, #16
    b4fa:	7081      	strb	r1, [r0, #2]
    b4fc:	4770      	bx	lr
    b4fe:	0000      	.short	0x0000
    b500:	200002c0 	.word	0x200002c0

0000b504 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b504:	4807      	ldr	r0, [pc, #28]	; (b524 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b506:	b510      	push	{r4, lr}
    b508:	7801      	ldrb	r1, [r0, #0]
    b50a:	b141      	cbz	r1, b51e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b50c:	f000 f832 	bl	b574 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b510:	b118      	cbz	r0, b51a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b512:	4805      	ldr	r0, [pc, #20]	; (b528 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b514:	6800      	ldr	r0, [r0, #0]
    b516:	b2c0      	uxtb	r0, r0
    b518:	bd10      	pop	{r4, pc}
    b51a:	2010      	movs	r0, #16
    b51c:	bd10      	pop	{r4, pc}
    b51e:	7880      	ldrb	r0, [r0, #2]
    b520:	bd10      	pop	{r4, pc}
    b522:	0000      	.short	0x0000
    b524:	200002c0 	.word	0x200002c0
    b528:	4000f400 	.word	0x4000f400

0000b52c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b52c:	4808      	ldr	r0, [pc, #32]	; (b550 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b52e:	b510      	push	{r4, lr}
    b530:	7801      	ldrb	r1, [r0, #0]
    b532:	b159      	cbz	r1, b54c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b534:	4807      	ldr	r0, [pc, #28]	; (b554 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b536:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b53a:	b128      	cbz	r0, b548 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b53c:	f000 f80c 	bl	b558 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b540:	2800      	cmp	r0, #0
    b542:	d000      	beq.n	b546 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b544:	2001      	movs	r0, #1
    b546:	bd10      	pop	{r4, pc}
    b548:	2002      	movs	r0, #2
    b54a:	bd10      	pop	{r4, pc}
    b54c:	7840      	ldrb	r0, [r0, #1]
    b54e:	bd10      	pop	{r4, pc}
    b550:	200002c0 	.word	0x200002c0
    b554:	4000f000 	.word	0x4000f000
    b558:	4805      	ldr	r0, [pc, #20]	; (b570 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b55a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b55e:	b111      	cbz	r1, b566 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b560:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b564:	b108      	cbz	r0, b56a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b566:	2000      	movs	r0, #0
    b568:	4770      	bx	lr
    b56a:	2001      	movs	r0, #1
    b56c:	4770      	bx	lr
    b56e:	0000      	.short	0x0000
    b570:	4000f000 	.word	0x4000f000
    b574:	4805      	ldr	r0, [pc, #20]	; (b58c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b576:	b510      	push	{r4, lr}
    b578:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b57c:	b120      	cbz	r0, b588 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b57e:	f7ff ffeb 	bl	b558 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b582:	b108      	cbz	r0, b588 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b584:	2001      	movs	r0, #1
    b586:	bd10      	pop	{r4, pc}
    b588:	2000      	movs	r0, #0
    b58a:	bd10      	pop	{r4, pc}
    b58c:	4000f000 	.word	0x4000f000
    b590:	4804      	ldr	r0, [pc, #16]	; (b5a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b592:	2100      	movs	r1, #0
    b594:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b598:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b59c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b5a0:	4770      	bx	lr
    b5a2:	0000      	.short	0x0000
    b5a4:	4000f000 	.word	0x4000f000

0000b5a8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5ac:	4604      	mov	r4, r0
    b5ae:	461e      	mov	r6, r3
    b5b0:	4690      	mov	r8, r2
    b5b2:	460f      	mov	r7, r1
    b5b4:	2001      	movs	r0, #1
    b5b6:	f000 f90f 	bl	b7d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b5ba:	4d1e      	ldr	r5, [pc, #120]	; (b634 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    b5bc:	481e      	ldr	r0, [pc, #120]	; (b638 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    b5be:	f004 0103 	and.w	r1, r4, #3
    b5c2:	712e      	strb	r6, [r5, #4]
    b5c4:	6800      	ldr	r0, [r0, #0]
    b5c6:	0432      	lsls	r2, r6, #16
    b5c8:	f361 0007 	bfi	r0, r1, #0, #8
    b5cc:	f366 200f 	bfi	r0, r6, #8, #8
    b5d0:	0c00      	lsrs	r0, r0, #16
    b5d2:	4e1a      	ldr	r6, [pc, #104]	; (b63c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b5d4:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    b5d8:	4308      	orrs	r0, r1
    b5da:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    b5de:	4818      	ldr	r0, [pc, #96]	; (b640 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b5e0:	6007      	str	r7, [r0, #0]
    b5e2:	f001 fb6c 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b5e6:	b938      	cbnz	r0, b5f8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    b5e8:	4815      	ldr	r0, [pc, #84]	; (b640 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    b5ea:	3010      	adds	r0, #16
    b5ec:	6801      	ldr	r1, [r0, #0]
    b5ee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b5f2:	ea41 0108 	orr.w	r1, r1, r8
    b5f6:	6001      	str	r1, [r0, #0]
    b5f8:	f000 f8e4 	bl	b7c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b5fc:	b10c      	cbz	r4, b602 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    b5fe:	2c04      	cmp	r4, #4
    b600:	d107      	bne.n	b612 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    b602:	4811      	ldr	r0, [pc, #68]	; (b648 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    b604:	490d      	ldr	r1, [pc, #52]	; (b63c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    b606:	4a0f      	ldr	r2, [pc, #60]	; (b644 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    b608:	1d09      	adds	r1, r1, #4
    b60a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    b60e:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    b612:	2001      	movs	r0, #1
    b614:	7068      	strb	r0, [r5, #1]
    b616:	70ec      	strb	r4, [r5, #3]
    b618:	b11c      	cbz	r4, b622 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b61a:	2c01      	cmp	r4, #1
    b61c:	d001      	beq.n	b622 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    b61e:	2c02      	cmp	r4, #2
    b620:	d106      	bne.n	b630 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    b622:	7028      	strb	r0, [r5, #0]
    b624:	2100      	movs	r1, #0
    b626:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    b62a:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    b62e:	6030      	str	r0, [r6, #0]
    b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b634:	200002c3 	.word	0x200002c3
    b638:	0000b7d4 	.word	0x0000b7d4
    b63c:	4000f000 	.word	0x4000f000
    b640:	4000f508 	.word	0x4000f508
    b644:	4000f100 	.word	0x4000f100
    b648:	4001f088 	.word	0x4001f088

0000b64c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    b64c:	b570      	push	{r4, r5, r6, lr}
    b64e:	4a1c      	ldr	r2, [pc, #112]	; (b6c0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    b650:	7853      	ldrb	r3, [r2, #1]
    b652:	b1a3      	cbz	r3, b67e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    b654:	4b1b      	ldr	r3, [pc, #108]	; (b6c4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    b656:	6019      	str	r1, [r3, #0]
    b658:	1d19      	adds	r1, r3, #4
    b65a:	6008      	str	r0, [r1, #0]
    b65c:	2501      	movs	r5, #1
    b65e:	7095      	strb	r5, [r2, #2]
    b660:	4610      	mov	r0, r2
    b662:	78d6      	ldrb	r6, [r2, #3]
    b664:	4b18      	ldr	r3, [pc, #96]	; (b6c8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b666:	7800      	ldrb	r0, [r0, #0]
    b668:	4c18      	ldr	r4, [pc, #96]	; (b6cc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    b66a:	2100      	movs	r1, #0
    b66c:	b156      	cbz	r6, b684 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    b66e:	2e04      	cmp	r6, #4
    b670:	d01b      	beq.n	b6aa <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    b672:	b308      	cbz	r0, b6b8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    b674:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b678:	0668      	lsls	r0, r5, #25
    b67a:	6018      	str	r0, [r3, #0]
    b67c:	bd70      	pop	{r4, r5, r6, pc}
    b67e:	f44f 71c2 	mov.w	r1, #388	; 0x184
    b682:	e01a      	b.n	b6ba <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b684:	b178      	cbz	r0, b6a6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    b686:	4620      	mov	r0, r4
    b688:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b68c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    b690:	601e      	str	r6, [r3, #0]
    b692:	1271      	asrs	r1, r6, #9
    b694:	f005 fa67 	bl	10b66 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b698:	2800      	cmp	r0, #0
    b69a:	d0ef      	beq.n	b67c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    b69c:	6065      	str	r5, [r4, #4]
    b69e:	480a      	ldr	r0, [pc, #40]	; (b6c8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    b6a0:	1d00      	adds	r0, r0, #4
    b6a2:	6006      	str	r6, [r0, #0]
    b6a4:	bd70      	pop	{r4, r5, r6, pc}
    b6a6:	21b3      	movs	r1, #179	; 0xb3
    b6a8:	e007      	b.n	b6ba <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    b6aa:	7015      	strb	r5, [r2, #0]
    b6ac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    b6b0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    b6b4:	6025      	str	r5, [r4, #0]
    b6b6:	bd70      	pop	{r4, r5, r6, pc}
    b6b8:	21c6      	movs	r1, #198	; 0xc6
    b6ba:	203c      	movs	r0, #60	; 0x3c
    b6bc:	f7f9 fb8a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6c0:	200002c3 	.word	0x200002c3
    b6c4:	4000f50c 	.word	0x4000f50c
    b6c8:	4001f504 	.word	0x4001f504
    b6cc:	4000f000 	.word	0x4000f000

0000b6d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b6d0:	b570      	push	{r4, r5, r6, lr}
    b6d2:	4d05      	ldr	r5, [pc, #20]	; (b6e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    b6d4:	2400      	movs	r4, #0
    b6d6:	7828      	ldrb	r0, [r5, #0]
    b6d8:	b110      	cbz	r0, b6e0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    b6da:	f000 f873 	bl	b7c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    b6de:	702c      	strb	r4, [r5, #0]
    b6e0:	706c      	strb	r4, [r5, #1]
    b6e2:	70ac      	strb	r4, [r5, #2]
    b6e4:	bd70      	pop	{r4, r5, r6, pc}
    b6e6:	0000      	.short	0x0000
    b6e8:	200002c3 	.word	0x200002c3

0000b6ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b6ec:	4802      	ldr	r0, [pc, #8]	; (b6f8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    b6ee:	2100      	movs	r1, #0
    b6f0:	7001      	strb	r1, [r0, #0]
    b6f2:	7041      	strb	r1, [r0, #1]
    b6f4:	7081      	strb	r1, [r0, #2]
    b6f6:	4770      	bx	lr
    b6f8:	200002c3 	.word	0x200002c3

0000b6fc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b6fc:	480b      	ldr	r0, [pc, #44]	; (b72c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    b6fe:	b510      	push	{r4, lr}
    b700:	7800      	ldrb	r0, [r0, #0]
    b702:	b158      	cbz	r0, b71c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    b704:	f44f 7182 	mov.w	r1, #260	; 0x104
    b708:	4809      	ldr	r0, [pc, #36]	; (b730 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    b70a:	f005 fa2c 	bl	10b66 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b70e:	b140      	cbz	r0, b722 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    b710:	4808      	ldr	r0, [pc, #32]	; (b734 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    b712:	6800      	ldr	r0, [r0, #0]
    b714:	2800      	cmp	r0, #0
    b716:	d000      	beq.n	b71a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    b718:	2001      	movs	r0, #1
    b71a:	bd10      	pop	{r4, pc}
    b71c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    b720:	e001      	b.n	b726 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    b722:	f240 11e5 	movw	r1, #485	; 0x1e5
    b726:	203c      	movs	r0, #60	; 0x3c
    b728:	f7f9 fb54 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b72c:	200002c3 	.word	0x200002c3
    b730:	4000f000 	.word	0x4000f000
    b734:	4000f400 	.word	0x4000f400

0000b738 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b738:	4801      	ldr	r0, [pc, #4]	; (b740 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b73a:	2101      	movs	r1, #1
    b73c:	6081      	str	r1, [r0, #8]
    b73e:	4770      	bx	lr
    b740:	4000f000 	.word	0x4000f000

0000b744 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b748:	481b      	ldr	r0, [pc, #108]	; (b7b8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b74a:	7800      	ldrb	r0, [r0, #0]
    b74c:	b1d8      	cbz	r0, b786 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    b74e:	f8df 806c 	ldr.w	r8, [pc, #108]	; b7bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b752:	f44f 7682 	mov.w	r6, #260	; 0x104
    b756:	4631      	mov	r1, r6
    b758:	4640      	mov	r0, r8
    b75a:	f005 fa04 	bl	10b66 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b75e:	2800      	cmp	r0, #0
    b760:	d128      	bne.n	b7b4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    b762:	2002      	movs	r0, #2
    b764:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    b768:	4c15      	ldr	r4, [pc, #84]	; (b7c0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    b76a:	6820      	ldr	r0, [r4, #0]
    b76c:	43c0      	mvns	r0, r0
    b76e:	f340 1500 	sbfx	r5, r0, #4, #1
    b772:	6820      	ldr	r0, [r4, #0]
    b774:	f040 0010 	orr.w	r0, r0, #16
    b778:	6020      	str	r0, [r4, #0]
    b77a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b77e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b782:	1c6d      	adds	r5, r5, #1
    b784:	e008      	b.n	b798 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    b786:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    b78a:	203c      	movs	r0, #60	; 0x3c
    b78c:	f7f9 fb22 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b790:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    b794:	f7f9 f990 	bl	4ab8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b798:	4631      	mov	r1, r6
    b79a:	4640      	mov	r0, r8
    b79c:	f005 f9e3 	bl	10b66 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    b7a0:	2800      	cmp	r0, #0
    b7a2:	d0f5      	beq.n	b790 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    b7a4:	b91d      	cbnz	r5, b7ae <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    b7a6:	6820      	ldr	r0, [r4, #0]
    b7a8:	f020 0010 	bic.w	r0, r0, #16
    b7ac:	6020      	str	r0, [r4, #0]
    b7ae:	2002      	movs	r0, #2
    b7b0:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b7b8:	200002c3 	.word	0x200002c3
    b7bc:	4000f000 	.word	0x4000f000
    b7c0:	e000ed10 	.word	0xe000ed10
    b7c4:	4902      	ldr	r1, [pc, #8]	; (b7d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    b7c6:	4801      	ldr	r0, [pc, #4]	; (b7cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    b7c8:	6008      	str	r0, [r1, #0]
    b7ca:	4770      	bx	lr
    b7cc:	02020000 	.word	0x02020000
    b7d0:	4001f508 	.word	0x4001f508
    b7d4:	00010000 	.word	0x00010000

0000b7d8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b7d8:	b510      	push	{r4, lr}
    b7da:	4604      	mov	r4, r0
    b7dc:	f000 f820 	bl	b820 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    b7e0:	2c00      	cmp	r4, #0
    b7e2:	d00e      	beq.n	b802 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    b7e4:	4a0b      	ldr	r2, [pc, #44]	; (b814 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b7e6:	480b      	ldr	r0, [pc, #44]	; (b814 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    b7e8:	490b      	ldr	r1, [pc, #44]	; (b818 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b7ea:	3214      	adds	r2, #20
    b7ec:	2c01      	cmp	r4, #1
    b7ee:	d005      	beq.n	b7fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    b7f0:	2c02      	cmp	r4, #2
    b7f2:	d007      	beq.n	b804 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    b7f4:	2181      	movs	r1, #129	; 0x81
    b7f6:	203d      	movs	r0, #61	; 0x3d
    b7f8:	f7f9 faec 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7fc:	2302      	movs	r3, #2
    b7fe:	6003      	str	r3, [r0, #0]
    b800:	6011      	str	r1, [r2, #0]
    b802:	bd10      	pop	{r4, pc}
    b804:	2303      	movs	r3, #3
    b806:	6003      	str	r3, [r0, #0]
    b808:	6011      	str	r1, [r2, #0]
    b80a:	4904      	ldr	r1, [pc, #16]	; (b81c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b80c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b810:	6008      	str	r0, [r1, #0]
    b812:	bd10      	pop	{r4, pc}
    b814:	4000f500 	.word	0x4000f500
    b818:	2000169f 	.word	0x2000169f
    b81c:	4001f504 	.word	0x4001f504
    b820:	4805      	ldr	r0, [pc, #20]	; (b838 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b822:	b510      	push	{r4, lr}
    b824:	2100      	movs	r1, #0
    b826:	6001      	str	r1, [r0, #0]
    b828:	6001      	str	r1, [r0, #0]
    b82a:	f7ff ff51 	bl	b6d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    b82e:	4903      	ldr	r1, [pc, #12]	; (b83c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b830:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b834:	6008      	str	r0, [r1, #0]
    b836:	bd10      	pop	{r4, pc}
    b838:	4000f500 	.word	0x4000f500
    b83c:	4001f508 	.word	0x4001f508

0000b840 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b840:	4805      	ldr	r0, [pc, #20]	; (b858 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b842:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b846:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b84a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b84e:	2100      	movs	r1, #0
    b850:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b854:	4770      	bx	lr
    b856:	0000      	.short	0x0000
    b858:	40001000 	.word	0x40001000

0000b85c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b85c:	4904      	ldr	r1, [pc, #16]	; (b870 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b85e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b862:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b866:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b86a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b86e:	4770      	bx	lr
    b870:	40001000 	.word	0x40001000

0000b874 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b874:	4801      	ldr	r0, [pc, #4]	; (b87c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b876:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b87a:	4770      	bx	lr
    b87c:	20001158 	.word	0x20001158

0000b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b882:	4c23      	ldr	r4, [pc, #140]	; (b910 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b884:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b888:	f010 0f10 	tst.w	r0, #16
    b88c:	d001      	beq.n	b892 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b88e:	2701      	movs	r7, #1
    b890:	e000      	b.n	b894 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b892:	2700      	movs	r7, #0
    b894:	2010      	movs	r0, #16
    b896:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b89a:	2002      	movs	r0, #2
    b89c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b8a0:	481c      	ldr	r0, [pc, #112]	; (b914 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b8a2:	2500      	movs	r5, #0
    b8a4:	491d      	ldr	r1, [pc, #116]	; (b91c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b8a6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b8aa:	481b      	ldr	r0, [pc, #108]	; (b918 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b8ac:	6008      	str	r0, [r1, #0]
    b8ae:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b8b2:	f44f 7688 	mov.w	r6, #272	; 0x110
    b8b6:	f010 0fff 	tst.w	r0, #255	; 0xff
    b8ba:	d018      	beq.n	b8ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b8bc:	20ff      	movs	r0, #255	; 0xff
    b8be:	f88d 0000 	strb.w	r0, [sp]
    b8c2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b8c6:	2001      	movs	r0, #1
    b8c8:	6120      	str	r0, [r4, #16]
    b8ca:	e004      	b.n	b8d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b8cc:	f89d 0000 	ldrb.w	r0, [sp]
    b8d0:	1e40      	subs	r0, r0, #1
    b8d2:	f88d 0000 	strb.w	r0, [sp]
    b8d6:	f89d 0000 	ldrb.w	r0, [sp]
    b8da:	b128      	cbz	r0, b8e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b8dc:	4631      	mov	r1, r6
    b8de:	4620      	mov	r0, r4
    b8e0:	f005 f970 	bl	10bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    b8e4:	2800      	cmp	r0, #0
    b8e6:	d0f1      	beq.n	b8cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b8e8:	f89d 0000 	ldrb.w	r0, [sp]
    b8ec:	b158      	cbz	r0, b906 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b8ee:	f000 fccd 	bl	c28c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b8f2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b8f6:	f000 fe6f 	bl	c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b8fa:	2f00      	cmp	r7, #0
    b8fc:	d002      	beq.n	b904 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b8fe:	2010      	movs	r0, #16
    b900:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b906:	f640 0171 	movw	r1, #2161	; 0x871
    b90a:	203e      	movs	r0, #62	; 0x3e
    b90c:	f7f9 fa62 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b910:	40001000 	.word	0x40001000
    b914:	20001158 	.word	0x20001158
    b918:	0c0e0000 	.word	0x0c0e0000
    b91c:	4001f508 	.word	0x4001f508

0000b920 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b924:	4d20      	ldr	r5, [pc, #128]	; (b9a8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b926:	4607      	mov	r7, r0
    b928:	4688      	mov	r8, r1
    b92a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b92e:	07c1      	lsls	r1, r0, #31
    b930:	d018      	beq.n	b964 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b932:	4a1e      	ldr	r2, [pc, #120]	; (b9ac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b934:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b938:	6011      	str	r1, [r2, #0]
    b93a:	4c1d      	ldr	r4, [pc, #116]	; (b9b0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b93c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b940:	f041 0101 	orr.w	r1, r1, #1
    b944:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b948:	f040 0002 	orr.w	r0, r0, #2
    b94c:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b950:	4640      	mov	r0, r8
    b952:	f000 fa1b 	bl	bd8c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b956:	f000 fc37 	bl	c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b95a:	2601      	movs	r6, #1
    b95c:	b13f      	cbz	r7, b96e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b95e:	2f01      	cmp	r7, #1
    b960:	d00e      	beq.n	b980 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b962:	e016      	b.n	b992 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b964:	f240 7102 	movw	r1, #1794	; 0x702
    b968:	203e      	movs	r0, #62	; 0x3e
    b96a:	f7f9 fa33 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b96e:	4640      	mov	r0, r8
    b970:	f000 fc5a 	bl	c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b974:	4640      	mov	r0, r8
    b976:	f000 fc0b 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b97a:	726e      	strb	r6, [r5, #9]
    b97c:	6026      	str	r6, [r4, #0]
    b97e:	e008      	b.n	b992 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b980:	f000 fc7a 	bl	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b984:	f000 fdc4 	bl	c510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    b988:	2002      	movs	r0, #2
    b98a:	7268      	strb	r0, [r5, #9]
    b98c:	f000 fcb0 	bl	c2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    b990:	6066      	str	r6, [r4, #4]
    b992:	4808      	ldr	r0, [pc, #32]	; (b9b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b994:	64c6      	str	r6, [r0, #76]	; 0x4c
    b996:	4807      	ldr	r0, [pc, #28]	; (b9b4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b998:	300c      	adds	r0, #12
    b99a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b99e:	4638      	mov	r0, r7
    b9a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b9a4:	f000 bdea 	b.w	c57c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    b9a8:	20001158 	.word	0x20001158
    b9ac:	4001f504 	.word	0x4001f504
    b9b0:	40001000 	.word	0x40001000
    b9b4:	40008000 	.word	0x40008000

0000b9b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9bc:	4d32      	ldr	r5, [pc, #200]	; (ba88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd0>)
    b9be:	4606      	mov	r6, r0
    b9c0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b9c4:	4689      	mov	r9, r1
    b9c6:	6028      	str	r0, [r5, #0]
    b9c8:	4c30      	ldr	r4, [pc, #192]	; (ba8c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd4>)
    b9ca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b9ce:	f040 0002 	orr.w	r0, r0, #2
    b9d2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b9d6:	4608      	mov	r0, r1
    b9d8:	f000 f9d8 	bl	bd8c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    b9dc:	f000 fbf4 	bl	c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b9e0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; ba90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd8>
    b9e4:	2700      	movs	r7, #0
    b9e6:	b116      	cbz	r6, b9ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b9e8:	2e01      	cmp	r6, #1
    b9ea:	d022      	beq.n	ba32 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x7a>
    b9ec:	e03a      	b.n	ba64 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    b9ee:	4648      	mov	r0, r9
    b9f0:	f000 fc1a 	bl	c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b9f4:	79e0      	ldrb	r0, [r4, #7]
    b9f6:	2801      	cmp	r0, #1
    b9f8:	d105      	bne.n	ba06 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b9fa:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b9fe:	f041 0108 	orr.w	r1, r1, #8
    ba02:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ba06:	4648      	mov	r0, r9
    ba08:	f000 fbc2 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ba0c:	2001      	movs	r0, #1
    ba0e:	7260      	strb	r0, [r4, #9]
    ba10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ba12:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ba16:	62a0      	str	r0, [r4, #40]	; 0x28
    ba18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ba1c:	6028      	str	r0, [r5, #0]
    ba1e:	491d      	ldr	r1, [pc, #116]	; (ba94 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    ba20:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    ba24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ba28:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    ba2c:	fbb0 f7f1 	udiv	r7, r0, r1
    ba30:	e018      	b.n	ba64 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xac>
    ba32:	f000 fc21 	bl	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ba36:	f000 fd6b 	bl	c510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    ba3a:	79e0      	ldrb	r0, [r4, #7]
    ba3c:	2801      	cmp	r0, #1
    ba3e:	d105      	bne.n	ba4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x94>
    ba40:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ba44:	f041 0104 	orr.w	r1, r1, #4
    ba48:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ba4c:	2002      	movs	r0, #2
    ba4e:	7260      	strb	r0, [r4, #9]
    ba50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ba52:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ba56:	62a0      	str	r0, [r4, #40]	; 0x28
    ba58:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ba5c:	6028      	str	r0, [r5, #0]
    ba5e:	2729      	movs	r7, #41	; 0x29
    ba60:	f000 fc46 	bl	c2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    ba64:	f000 fc90 	bl	c388 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    ba68:	f001 f803 	bl	ca72 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ba6c:	6800      	ldr	r0, [r0, #0]
    ba6e:	2801      	cmp	r0, #1
    ba70:	d006      	beq.n	ba80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc8>
    ba72:	2100      	movs	r1, #0
    ba74:	4630      	mov	r0, r6
    ba76:	f000 fd81 	bl	c57c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    ba7a:	4638      	mov	r0, r7
    ba7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba80:	f7ff fefe 	bl	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ba84:	2000      	movs	r0, #0
    ba86:	e7f9      	b.n	ba7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>
    ba88:	4001f504 	.word	0x4001f504
    ba8c:	20001158 	.word	0x20001158
    ba90:	40001000 	.word	0x40001000
    ba94:	0000c658 	.word	0x0000c658

0000ba98 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ba98:	4a02      	ldr	r2, [pc, #8]	; (baa4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ba9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ba9c:	6003      	str	r3, [r0, #0]
    ba9e:	6b50      	ldr	r0, [r2, #52]	; 0x34
    baa0:	6008      	str	r0, [r1, #0]
    baa2:	4770      	bx	lr
    baa4:	20001158 	.word	0x20001158

0000baa8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    baa8:	b510      	push	{r4, lr}
    baaa:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    baac:	4901      	ldr	r1, [pc, #4]	; (bab4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    baae:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    bab2:	bd10      	pop	{r4, pc}
    bab4:	20001148 	.word	0x20001148

0000bab8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    bab8:	490f      	ldr	r1, [pc, #60]	; (baf8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    baba:	b510      	push	{r4, lr}
    babc:	69ca      	ldr	r2, [r1, #28]
    babe:	4282      	cmp	r2, r0
    bac0:	d302      	bcc.n	bac8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    bac2:	f640 01f7 	movw	r1, #2295	; 0x8f7
    bac6:	e00b      	b.n	bae0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    bac8:	2201      	movs	r2, #1
    baca:	730a      	strb	r2, [r1, #12]
    bacc:	6108      	str	r0, [r1, #16]
    bace:	490b      	ldr	r1, [pc, #44]	; (bafc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    bad0:	644a      	str	r2, [r1, #68]	; 0x44
    bad2:	1d0a      	adds	r2, r1, #4
    bad4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    bad8:	4283      	cmp	r3, r0
    bada:	d304      	bcc.n	bae6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    badc:	f44f 6110 	mov.w	r1, #2304	; 0x900
    bae0:	203e      	movs	r0, #62	; 0x3e
    bae2:	f7f9 f977 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bae6:	2300      	movs	r3, #0
    bae8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    baec:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    baf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    baf4:	f000 bd16 	b.w	c524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    baf8:	20001158 	.word	0x20001158
    bafc:	40008000 	.word	0x40008000

0000bb00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    bb00:	b570      	push	{r4, r5, r6, lr}
    bb02:	4c0f      	ldr	r4, [pc, #60]	; (bb40 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    bb04:	4603      	mov	r3, r0
    bb06:	2002      	movs	r0, #2
    bb08:	7320      	strb	r0, [r4, #12]
    bb0a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    bb0e:	2096      	movs	r0, #150	; 0x96
    bb10:	f894 1020 	ldrb.w	r1, [r4, #32]
    bb14:	7d22      	ldrb	r2, [r4, #20]
    bb16:	2d01      	cmp	r5, #1
    bb18:	d00e      	beq.n	bb38 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    bb1a:	f000 fdc5 	bl	c6a8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    bb1e:	6120      	str	r0, [r4, #16]
    bb20:	4808      	ldr	r0, [pc, #32]	; (bb44 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bb22:	2100      	movs	r1, #0
    bb24:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb28:	6921      	ldr	r1, [r4, #16]
    bb2a:	69e0      	ldr	r0, [r4, #28]
    bb2c:	4408      	add	r0, r1
    bb2e:	4905      	ldr	r1, [pc, #20]	; (bb44 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bb30:	1d09      	adds	r1, r1, #4
    bb32:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bb36:	bd70      	pop	{r4, r5, r6, pc}
    bb38:	f000 fdd4 	bl	c6e4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    bb3c:	e7ef      	b.n	bb1e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    bb3e:	0000      	.short	0x0000
    bb40:	20001158 	.word	0x20001158
    bb44:	40008000 	.word	0x40008000

0000bb48 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    bb48:	b510      	push	{r4, lr}
    bb4a:	f001 f8d4 	bl	ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bb4e:	2800      	cmp	r0, #0
    bb50:	d006      	beq.n	bb60 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    bb52:	4804      	ldr	r0, [pc, #16]	; (bb64 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    bb54:	6801      	ldr	r1, [r0, #0]
    bb56:	f021 0101 	bic.w	r1, r1, #1
    bb5a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    bb5e:	6001      	str	r1, [r0, #0]
    bb60:	bd10      	pop	{r4, pc}
    bb62:	0000      	.short	0x0000
    bb64:	40001774 	.word	0x40001774

0000bb68 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb6c:	2238      	movs	r2, #56	; 0x38
    bb6e:	2100      	movs	r1, #0
    bb70:	4813      	ldr	r0, [pc, #76]	; (bbc0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bb72:	f001 f970 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb76:	f000 fd2f 	bl	c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    bb7a:	f001 f875 	bl	cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bb7e:	4d11      	ldr	r5, [pc, #68]	; (bbc4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb80:	4e10      	ldr	r6, [pc, #64]	; (bbc4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb82:	2400      	movs	r4, #0
    bb84:	4f0f      	ldr	r7, [pc, #60]	; (bbc4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb86:	3508      	adds	r5, #8
    bb88:	3610      	adds	r6, #16
    bb8a:	b928      	cbnz	r0, bb98 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb8c:	f001 f883 	bl	cc96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bb90:	b910      	cbnz	r0, bb98 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb92:	f001 f88a 	bl	ccaa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bb96:	b108      	cbz	r0, bb9c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bb98:	2224      	movs	r2, #36	; 0x24
    bb9a:	e006      	b.n	bbaa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bb9c:	f001 f8c5 	bl	cd2a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bba0:	b910      	cbnz	r0, bba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bba2:	f001 f8b8 	bl	cd16 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bba6:	b140      	cbz	r0, bbba <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bba8:	2240      	movs	r2, #64	; 0x40
    bbaa:	21ff      	movs	r1, #255	; 0xff
    bbac:	4638      	mov	r0, r7
    bbae:	f001 f952 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bbb2:	602c      	str	r4, [r5, #0]
    bbb4:	6034      	str	r4, [r6, #0]
    bbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbba:	2238      	movs	r2, #56	; 0x38
    bbbc:	e7f5      	b.n	bbaa <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bbbe:	0000      	.short	0x0000
    bbc0:	20001158 	.word	0x20001158
    bbc4:	40000e00 	.word	0x40000e00

0000bbc8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bbc8:	4805      	ldr	r0, [pc, #20]	; (bbe0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    bbca:	b510      	push	{r4, lr}
    bbcc:	69c0      	ldr	r0, [r0, #28]
    bbce:	2800      	cmp	r0, #0
    bbd0:	d104      	bne.n	bbdc <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    bbd2:	f240 2139 	movw	r1, #569	; 0x239
    bbd6:	203e      	movs	r0, #62	; 0x3e
    bbd8:	f7f9 f8fc 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbdc:	bd10      	pop	{r4, pc}
    bbde:	0000      	.short	0x0000
    bbe0:	20001158 	.word	0x20001158

0000bbe4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    bbe4:	4805      	ldr	r0, [pc, #20]	; (bbfc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    bbe6:	b510      	push	{r4, lr}
    bbe8:	6980      	ldr	r0, [r0, #24]
    bbea:	2800      	cmp	r0, #0
    bbec:	d104      	bne.n	bbf8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    bbee:	f240 2133 	movw	r1, #563	; 0x233
    bbf2:	203e      	movs	r0, #62	; 0x3e
    bbf4:	f7f9 f8ee 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbf8:	bd10      	pop	{r4, pc}
    bbfa:	0000      	.short	0x0000
    bbfc:	20001158 	.word	0x20001158

0000bc00 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    bc00:	b510      	push	{r4, lr}
    bc02:	f000 fc9d 	bl	c540 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    bc06:	f7ff fe3b 	bl	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bc0a:	f7f8 ffa9 	bl	4b60 <mpsl_fem_disable>
    bc0e:	b130      	cbz	r0, bc1e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bc10:	1c40      	adds	r0, r0, #1
    bc12:	d004      	beq.n	bc1e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    bc14:	f240 5102 	movw	r1, #1282	; 0x502
    bc18:	203e      	movs	r0, #62	; 0x3e
    bc1a:	f7f9 f8db 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc1e:	480f      	ldr	r0, [pc, #60]	; (bc5c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    bc20:	4a0f      	ldr	r2, [pc, #60]	; (bc60 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    bc22:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bc24:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bc28:	6011      	str	r1, [r2, #0]
    bc2a:	2400      	movs	r4, #0
    bc2c:	6284      	str	r4, [r0, #40]	; 0x28
    bc2e:	7304      	strb	r4, [r0, #12]
    bc30:	61c4      	str	r4, [r0, #28]
    bc32:	6184      	str	r4, [r0, #24]
    bc34:	f000 fc84 	bl	c540 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3bc>
    bc38:	480a      	ldr	r0, [pc, #40]	; (bc64 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    bc3a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc3e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bc42:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bc46:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    bc4a:	2001      	movs	r0, #1
    bc4c:	f004 ffa9 	bl	10ba2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc54:	2001      	movs	r0, #1
    bc56:	f004 bf97 	b.w	10b88 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bc5a:	0000      	.short	0x0000
    bc5c:	20001158 	.word	0x20001158
    bc60:	4001f508 	.word	0x4001f508
    bc64:	40008000 	.word	0x40008000

0000bc68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    bc68:	b570      	push	{r4, r5, r6, lr}
    bc6a:	2001      	movs	r0, #1
    bc6c:	f004 ff99 	bl	10ba2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc70:	4c37      	ldr	r4, [pc, #220]	; (bd50 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    bc72:	2000      	movs	r0, #0
    bc74:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bc78:	2001      	movs	r0, #1
    bc7a:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bc7e:	f001 f82a 	bl	ccd6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc82:	4d34      	ldr	r5, [pc, #208]	; (bd54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc84:	b118      	cbz	r0, bc8e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    bc86:	6828      	ldr	r0, [r5, #0]
    bc88:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bc8c:	6028      	str	r0, [r5, #0]
    bc8e:	f001 f816 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc92:	b128      	cbz	r0, bca0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    bc94:	6828      	ldr	r0, [r5, #0]
    bc96:	4930      	ldr	r1, [pc, #192]	; (bd58 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bc98:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    bc9c:	4308      	orrs	r0, r1
    bc9e:	6028      	str	r0, [r5, #0]
    bca0:	f001 f829 	bl	ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bca4:	b138      	cbz	r0, bcb6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    bca6:	482b      	ldr	r0, [pc, #172]	; (bd54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bca8:	1d00      	adds	r0, r0, #4
    bcaa:	6801      	ldr	r1, [r0, #0]
    bcac:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    bcb0:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    bcb4:	6001      	str	r1, [r0, #0]
    bcb6:	4927      	ldr	r1, [pc, #156]	; (bd54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bcb8:	4828      	ldr	r0, [pc, #160]	; (bd5c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    bcba:	313c      	adds	r1, #60	; 0x3c
    bcbc:	6008      	str	r0, [r1, #0]
    bcbe:	f7f8 ff73 	bl	4ba8 <mpsl_fem_device_config_254_apply_get>
    bcc2:	b140      	cbz	r0, bcd6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bcc4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bcc8:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    bccc:	1c41      	adds	r1, r0, #1
    bcce:	d002      	beq.n	bcd6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bcd0:	4920      	ldr	r1, [pc, #128]	; (bd54 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bcd2:	3110      	adds	r1, #16
    bcd4:	6008      	str	r0, [r1, #0]
    bcd6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    bcda:	6e00      	ldr	r0, [r0, #96]	; 0x60
    bcdc:	1c41      	adds	r1, r0, #1
    bcde:	d004      	beq.n	bcea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    bce0:	491f      	ldr	r1, [pc, #124]	; (bd60 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    bce2:	680a      	ldr	r2, [r1, #0]
    bce4:	f360 4217 	bfi	r2, r0, #16, #8
    bce8:	600a      	str	r2, [r1, #0]
    bcea:	f240 1103 	movw	r1, #259	; 0x103
    bcee:	f240 605b 	movw	r0, #1627	; 0x65b
    bcf2:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    bcf6:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bcfa:	2001      	movs	r0, #1
    bcfc:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    bd00:	f000 f844 	bl	bd8c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bd04:	f240 2001 	movw	r0, #513	; 0x201
    bd08:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    bd0c:	2002      	movs	r0, #2
    bd0e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bd12:	4915      	ldr	r1, [pc, #84]	; (bd68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    bd14:	4813      	ldr	r0, [pc, #76]	; (bd64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bd16:	6008      	str	r0, [r1, #0]
    bd18:	4914      	ldr	r1, [pc, #80]	; (bd6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bd1a:	2000      	movs	r0, #0
    bd1c:	4d14      	ldr	r5, [pc, #80]	; (bd70 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    bd1e:	8608      	strh	r0, [r1, #48]	; 0x30
    bd20:	3110      	adds	r1, #16
    bd22:	61c8      	str	r0, [r1, #28]
    bd24:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    bd28:	7028      	strb	r0, [r5, #0]
    bd2a:	2001      	movs	r0, #1
    bd2c:	f004 ff2c 	bl	10b88 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bd30:	2010      	movs	r0, #16
    bd32:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bd36:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd3a:	2002      	movs	r0, #2
    bd3c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bd40:	6868      	ldr	r0, [r5, #4]
    bd42:	2800      	cmp	r0, #0
    bd44:	d002      	beq.n	bd4c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    bd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd4a:	4700      	bx	r0
    bd4c:	bd70      	pop	{r4, r5, r6, pc}
    bd4e:	0000      	.short	0x0000
    bd50:	40001000 	.word	0x40001000
    bd54:	4000173c 	.word	0x4000173c
    bd58:	80000096 	.word	0x80000096
    bd5c:	8900002c 	.word	0x8900002c
    bd60:	4000158c 	.word	0x4000158c
    bd64:	0c0e0000 	.word	0x0c0e0000
    bd68:	4001f508 	.word	0x4001f508
    bd6c:	20001148 	.word	0x20001148
    bd70:	20000274 	.word	0x20000274

0000bd74 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bd74:	4901      	ldr	r1, [pc, #4]	; (bd7c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bd76:	7548      	strb	r0, [r1, #21]
    bd78:	4770      	bx	lr
    bd7a:	0000      	.short	0x0000
    bd7c:	20001158 	.word	0x20001158

0000bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    bd80:	4901      	ldr	r1, [pc, #4]	; (bd88 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    bd82:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bd86:	4770      	bx	lr
    bd88:	0000c684 	.word	0x0000c684

0000bd8c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    bd8c:	4908      	ldr	r1, [pc, #32]	; (bdb0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    bd8e:	b510      	push	{r4, lr}
    bd90:	7508      	strb	r0, [r1, #20]
    bd92:	4908      	ldr	r1, [pc, #32]	; (bdb4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    bd94:	2801      	cmp	r0, #1
    bd96:	d006      	beq.n	bda6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    bd98:	2802      	cmp	r0, #2
    bd9a:	d006      	beq.n	bdaa <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    bd9c:	f640 41e8 	movw	r1, #3304	; 0xce8
    bda0:	203e      	movs	r0, #62	; 0x3e
    bda2:	f7f9 f817 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bda6:	2003      	movs	r0, #3
    bda8:	e000      	b.n	bdac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    bdaa:	2004      	movs	r0, #4
    bdac:	6008      	str	r0, [r1, #0]
    bdae:	bd10      	pop	{r4, pc}
    bdb0:	20001158 	.word	0x20001158
    bdb4:	40001510 	.word	0x40001510

0000bdb8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bdb8:	4905      	ldr	r1, [pc, #20]	; (bdd0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bdba:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bdbe:	4805      	ldr	r0, [pc, #20]	; (bdd4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bdc0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bdc4:	f041 0101 	orr.w	r1, r1, #1
    bdc8:	7001      	strb	r1, [r0, #0]
    bdca:	f000 baa3 	b.w	c314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    bdce:	0000      	.short	0x0000
    bdd0:	40001000 	.word	0x40001000
    bdd4:	20001158 	.word	0x20001158

0000bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    bdd8:	4901      	ldr	r1, [pc, #4]	; (bde0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    bdda:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bdde:	4770      	bx	lr
    bde0:	0000c690 	.word	0x0000c690

0000bde4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bde8:	4e32      	ldr	r6, [pc, #200]	; (beb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    bdea:	4607      	mov	r7, r0
    bdec:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bdf0:	4689      	mov	r9, r1
    bdf2:	4614      	mov	r4, r2
    bdf4:	6030      	str	r0, [r6, #0]
    bdf6:	4610      	mov	r0, r2
    bdf8:	f7ff ffc8 	bl	bd8c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    bdfc:	f000 f9e4 	bl	c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    be00:	f8df a0b4 	ldr.w	sl, [pc, #180]	; beb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    be04:	4d2d      	ldr	r5, [pc, #180]	; (bebc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    be06:	f04f 0801 	mov.w	r8, #1
    be0a:	b127      	cbz	r7, be16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    be0c:	2f01      	cmp	r7, #1
    be0e:	d015      	beq.n	be3c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    be10:	f240 71f1 	movw	r1, #2033	; 0x7f1
    be14:	e044      	b.n	bea0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    be16:	4620      	mov	r0, r4
    be18:	f000 fa06 	bl	c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    be1c:	4620      	mov	r0, r4
    be1e:	f000 f9b7 	bl	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    be22:	4827      	ldr	r0, [pc, #156]	; (bec0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    be24:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
    be28:	4648      	mov	r0, r9
    be2a:	f000 fbdd 	bl	c5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    be2e:	4604      	mov	r4, r0
    be30:	4650      	mov	r0, sl
    be32:	f000 fb97 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    be36:	f885 8009 	strb.w	r8, [r5, #9]
    be3a:	e011      	b.n	be60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x7c>
    be3c:	f000 fa1c 	bl	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    be40:	f000 fb66 	bl	c510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    be44:	f000 fa54 	bl	c2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    be48:	f649 71ba 	movw	r1, #40890	; 0x9fba
    be4c:	4648      	mov	r0, r9
    be4e:	f000 fbcb 	bl	c5e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>
    be52:	4604      	mov	r4, r0
    be54:	4818      	ldr	r0, [pc, #96]	; (beb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    be56:	1d00      	adds	r0, r0, #4
    be58:	f000 fb84 	bl	c564 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    be5c:	2002      	movs	r0, #2
    be5e:	7268      	strb	r0, [r5, #9]
    be60:	f8df 9060 	ldr.w	r9, [pc, #96]	; bec4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    be64:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    be68:	4918      	ldr	r1, [pc, #96]	; (becc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    be6a:	4817      	ldr	r0, [pc, #92]	; (bec8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    be6c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    be70:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    be72:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    be76:	62a8      	str	r0, [r5, #40]	; 0x28
    be78:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    be7c:	6030      	str	r0, [r6, #0]
    be7e:	2010      	movs	r0, #16
    be80:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    be84:	03c0      	lsls	r0, r0, #15
    be86:	6030      	str	r0, [r6, #0]
    be88:	f000 fa7e 	bl	c388 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    be8c:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    be90:	480c      	ldr	r0, [pc, #48]	; (bec4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    be92:	300c      	adds	r0, #12
    be94:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    be98:	42a0      	cmp	r0, r4
    be9a:	d304      	bcc.n	bea6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc2>
    be9c:	f640 0118 	movw	r1, #2072	; 0x818
    bea0:	203e      	movs	r0, #62	; 0x3e
    bea2:	f7f8 ff97 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bea6:	4621      	mov	r1, r4
    bea8:	4638      	mov	r0, r7
    beaa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    beae:	f000 bb65 	b.w	c57c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f8>
    beb2:	0000      	.short	0x0000
    beb4:	4001f504 	.word	0x4001f504
    beb8:	40001000 	.word	0x40001000
    bebc:	20001158 	.word	0x20001158
    bec0:	0000c658 	.word	0x0000c658
    bec4:	40008000 	.word	0x40008000
    bec8:	40008140 	.word	0x40008140
    becc:	4001f098 	.word	0x4001f098

0000bed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bed0:	4b0d      	ldr	r3, [pc, #52]	; (bf08 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bed2:	b510      	push	{r4, lr}
    bed4:	71d8      	strb	r0, [r3, #7]
    bed6:	729a      	strb	r2, [r3, #10]
    bed8:	b151      	cbz	r1, bef0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    beda:	2002      	movs	r0, #2
    bedc:	7218      	strb	r0, [r3, #8]
    bede:	2801      	cmp	r0, #1
    bee0:	d008      	beq.n	bef4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bee2:	2802      	cmp	r0, #2
    bee4:	d00f      	beq.n	bf06 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bee6:	f640 210d 	movw	r1, #2573	; 0xa0d
    beea:	203e      	movs	r0, #62	; 0x3e
    beec:	f7f8 ff72 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bef0:	2001      	movs	r0, #1
    bef2:	e7f3      	b.n	bedc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bef4:	7a58      	ldrb	r0, [r3, #9]
    bef6:	2802      	cmp	r0, #2
    bef8:	d105      	bne.n	bf06 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    befa:	f000 f9bd 	bl	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    befe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf02:	f000 bb05 	b.w	c510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>
    bf06:	bd10      	pop	{r4, pc}
    bf08:	20001158 	.word	0x20001158

0000bf0c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bf0c:	4902      	ldr	r1, [pc, #8]	; (bf18 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bf0e:	2000      	movs	r0, #0
    bf10:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bf14:	4770      	bx	lr
    bf16:	0000      	.short	0x0000
    bf18:	40008000 	.word	0x40008000

0000bf1c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bf1c:	4904      	ldr	r1, [pc, #16]	; (bf30 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    bf1e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    bf22:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    bf26:	4249      	negs	r1, r1
    bf28:	7001      	strb	r1, [r0, #0]
    bf2a:	2001      	movs	r0, #1
    bf2c:	4770      	bx	lr
    bf2e:	0000      	.short	0x0000
    bf30:	40001000 	.word	0x40001000

0000bf34 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bf34:	4903      	ldr	r1, [pc, #12]	; (bf44 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bf36:	0e02      	lsrs	r2, r0, #24
    bf38:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bf3c:	0200      	lsls	r0, r0, #8
    bf3e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bf42:	4770      	bx	lr
    bf44:	40001000 	.word	0x40001000

0000bf48 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bf48:	6800      	ldr	r0, [r0, #0]
    bf4a:	4903      	ldr	r1, [pc, #12]	; (bf58 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bf4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf50:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bf54:	4770      	bx	lr
    bf56:	0000      	.short	0x0000
    bf58:	40001000 	.word	0x40001000

0000bf5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    bf5c:	b510      	push	{r4, lr}
    bf5e:	2200      	movs	r2, #0
    bf60:	2901      	cmp	r1, #1
    bf62:	d006      	beq.n	bf72 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    bf64:	2902      	cmp	r1, #2
    bf66:	d002      	beq.n	bf6e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    bf68:	f240 219d 	movw	r1, #669	; 0x29d
    bf6c:	e014      	b.n	bf98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    bf6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    bf72:	490b      	ldr	r1, [pc, #44]	; (bfa0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    bf74:	430a      	orrs	r2, r1
    bf76:	490b      	ldr	r1, [pc, #44]	; (bfa4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bf78:	600a      	str	r2, [r1, #0]
    bf7a:	490b      	ldr	r1, [pc, #44]	; (bfa8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    bf7c:	4308      	orrs	r0, r1
    bf7e:	4909      	ldr	r1, [pc, #36]	; (bfa4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    bf80:	1d09      	adds	r1, r1, #4
    bf82:	6008      	str	r0, [r1, #0]
    bf84:	4809      	ldr	r0, [pc, #36]	; (bfac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    bf86:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bf8a:	b2c0      	uxtb	r0, r0
    bf8c:	2803      	cmp	r0, #3
    bf8e:	d001      	beq.n	bf94 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    bf90:	280b      	cmp	r0, #11
    bf92:	d104      	bne.n	bf9e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    bf94:	f240 21b5 	movw	r1, #693	; 0x2b5
    bf98:	203e      	movs	r0, #62	; 0x3e
    bf9a:	f7f8 ff1b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf9e:	bd10      	pop	{r4, pc}
    bfa0:	00100108 	.word	0x00100108
    bfa4:	40001514 	.word	0x40001514
    bfa8:	02030000 	.word	0x02030000
    bfac:	40001000 	.word	0x40001000

0000bfb0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bfb0:	4901      	ldr	r1, [pc, #4]	; (bfb8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bfb2:	7588      	strb	r0, [r1, #22]
    bfb4:	4770      	bx	lr
    bfb6:	0000      	.short	0x0000
    bfb8:	20001158 	.word	0x20001158

0000bfbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfc0:	4853      	ldr	r0, [pc, #332]	; (c110 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bfc2:	f04f 0a01 	mov.w	sl, #1
    bfc6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bfca:	4851      	ldr	r0, [pc, #324]	; (c110 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bfcc:	300c      	adds	r0, #12
    bfce:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bfd2:	f7f7 fd6b 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    bfd6:	4d4f      	ldr	r5, [pc, #316]	; (c114 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bfd8:	e9c5 070c 	strd	r0, r7, [r5, #48]	; 0x30
    bfdc:	f000 f956 	bl	c28c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bfe0:	494d      	ldr	r1, [pc, #308]	; (c118 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bfe2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bfe4:	6008      	str	r0, [r1, #0]
    bfe6:	f8df 9134 	ldr.w	r9, [pc, #308]	; c11c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    bfea:	2600      	movs	r6, #0
    bfec:	62ae      	str	r6, [r5, #40]	; 0x28
    bfee:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bff2:	f240 121d 	movw	r2, #285	; 0x11d
    bff6:	4391      	bics	r1, r2
    bff8:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bffc:	f885 602c 	strb.w	r6, [r5, #44]	; 0x2c
    c000:	f000 f9d6 	bl	c3b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x22c>
    c004:	4604      	mov	r4, r0
    c006:	4842      	ldr	r0, [pc, #264]	; (c110 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    c008:	3008      	adds	r0, #8
    c00a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c00e:	61e8      	str	r0, [r5, #28]
    c010:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
    c014:	7d28      	ldrb	r0, [r5, #20]
    c016:	f885 0020 	strb.w	r0, [r5, #32]
    c01a:	7a68      	ldrb	r0, [r5, #9]
    c01c:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    c020:	61ae      	str	r6, [r5, #24]
    c022:	4e3f      	ldr	r6, [pc, #252]	; (c120 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    c024:	07a0      	lsls	r0, r4, #30
    c026:	d502      	bpl.n	c02e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    c028:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c02c:	61a8      	str	r0, [r5, #24]
    c02e:	0720      	lsls	r0, r4, #28
    c030:	d502      	bpl.n	c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    c032:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    c036:	61a8      	str	r0, [r5, #24]
    c038:	f04f 0800 	mov.w	r8, #0
    c03c:	4639      	mov	r1, r7
    c03e:	4620      	mov	r0, r4
    c040:	f000 fa2c 	bl	c49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c044:	b918      	cbnz	r0, c04e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    c046:	f8c9 a010 	str.w	sl, [r9, #16]
    c04a:	f04f 0801 	mov.w	r8, #1
    c04e:	4f31      	ldr	r7, [pc, #196]	; (c114 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c050:	07e0      	lsls	r0, r4, #31
    c052:	f1a7 0710 	sub.w	r7, r7, #16
    c056:	d002      	beq.n	c05e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    c058:	6838      	ldr	r0, [r7, #0]
    c05a:	4780      	blx	r0
    c05c:	e032      	b.n	c0c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c05e:	07a0      	lsls	r0, r4, #30
    c060:	d527      	bpl.n	c0b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf6>
    c062:	0760      	lsls	r0, r4, #29
    c064:	d41f      	bmi.n	c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c066:	f000 fe46 	bl	ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c06a:	b9e0      	cbnz	r0, c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c06c:	f000 fe33 	bl	ccd6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c070:	b9c8      	cbnz	r0, c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c072:	482c      	ldr	r0, [pc, #176]	; (c124 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c074:	6800      	ldr	r0, [r0, #0]
    c076:	f3c0 5342 	ubfx	r3, r0, #21, #3
    c07a:	f3c0 6200 	ubfx	r2, r0, #24, #1
    c07e:	f000 010f 	and.w	r1, r0, #15
    c082:	f3c0 1c03 	ubfx	ip, r0, #4, #4
    c086:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c08a:	b162      	cbz	r2, c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c08c:	b119      	cbz	r1, c096 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c08e:	f1bc 0f00 	cmp.w	ip, #0
    c092:	d000      	beq.n	c096 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xda>
    c094:	b938      	cbnz	r0, c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c096:	4823      	ldr	r0, [pc, #140]	; (c124 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c098:	1d00      	adds	r0, r0, #4
    c09a:	6800      	ldr	r0, [r0, #0]
    c09c:	b118      	cbz	r0, c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c09e:	2b03      	cmp	r3, #3
    c0a0:	d201      	bcs.n	c0a6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    c0a2:	f044 0404 	orr.w	r4, r4, #4
    c0a6:	f344 0080 	sbfx	r0, r4, #2, #1
    c0aa:	4641      	mov	r1, r8
    c0ac:	1c40      	adds	r0, r0, #1
    c0ae:	687a      	ldr	r2, [r7, #4]
    c0b0:	e007      	b.n	c0c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c0b2:	f014 0f28 	tst.w	r4, #40	; 0x28
    c0b6:	d005      	beq.n	c0c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c0b8:	f344 1140 	sbfx	r1, r4, #5, #1
    c0bc:	68ba      	ldr	r2, [r7, #8]
    c0be:	4640      	mov	r0, r8
    c0c0:	1c49      	adds	r1, r1, #1
    c0c2:	4790      	blx	r2
    c0c4:	06e0      	lsls	r0, r4, #27
    c0c6:	d501      	bpl.n	c0cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    c0c8:	68f8      	ldr	r0, [r7, #12]
    c0ca:	4780      	blx	r0
    c0cc:	7a68      	ldrb	r0, [r5, #9]
    c0ce:	2802      	cmp	r0, #2
    c0d0:	d11c      	bne.n	c10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c0d2:	7b28      	ldrb	r0, [r5, #12]
    c0d4:	2800      	cmp	r0, #0
    c0d6:	d019      	beq.n	c10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    c0d8:	2802      	cmp	r0, #2
    c0da:	d004      	beq.n	c0e6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    c0dc:	2801      	cmp	r0, #1
    c0de:	d006      	beq.n	c0ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x132>
    c0e0:	f640 31e3 	movw	r1, #3043	; 0xbe3
    c0e4:	e009      	b.n	c0fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    c0e6:	6929      	ldr	r1, [r5, #16]
    c0e8:	69e8      	ldr	r0, [r5, #28]
    c0ea:	4408      	add	r0, r1
    c0ec:	e008      	b.n	c100 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c0ee:	69e9      	ldr	r1, [r5, #28]
    c0f0:	6928      	ldr	r0, [r5, #16]
    c0f2:	4288      	cmp	r0, r1
    c0f4:	d804      	bhi.n	c100 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    c0f6:	f640 31e4 	movw	r1, #3044	; 0xbe4
    c0fa:	203e      	movs	r0, #62	; 0x3e
    c0fc:	f7f8 fe6a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c100:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c108:	f000 ba0c 	b.w	c524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a0>
    c10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c110:	40008000 	.word	0x40008000
    c114:	20001158 	.word	0x20001158
    c118:	4001f508 	.word	0x4001f508
    c11c:	40001000 	.word	0x40001000
    c120:	40008004 	.word	0x40008004
    c124:	40001450 	.word	0x40001450

0000c128 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c128:	b570      	push	{r4, r5, r6, lr}
    c12a:	4b15      	ldr	r3, [pc, #84]	; (c180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    c12c:	888c      	ldrh	r4, [r1, #4]
    c12e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c132:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c136:	780c      	ldrb	r4, [r1, #0]
    c138:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c13c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c140:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c144:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    c148:	2101      	movs	r1, #1
    c14a:	4081      	lsls	r1, r0
    c14c:	430c      	orrs	r4, r1
    c14e:	b2e4      	uxtb	r4, r4
    c150:	b132      	cbz	r2, c160 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    c152:	2a01      	cmp	r2, #1
    c154:	d00a      	beq.n	c16c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    c156:	f240 5164 	movw	r1, #1380	; 0x564
    c15a:	203e      	movs	r0, #62	; 0x3e
    c15c:	f7f8 fe3a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c160:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c164:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c168:	4388      	bics	r0, r1
    c16a:	e004      	b.n	c176 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    c16c:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c170:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    c174:	b2c0      	uxtb	r0, r0
    c176:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    c17a:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c17e:	bd70      	pop	{r4, r5, r6, pc}
    c180:	40001000 	.word	0x40001000

0000c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c184:	4901      	ldr	r1, [pc, #4]	; (c18c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c186:	2001      	movs	r0, #1
    c188:	7008      	strb	r0, [r1, #0]
    c18a:	4770      	bx	lr
    c18c:	20000274 	.word	0x20000274
    c190:	b510      	push	{r4, lr}
    c192:	4604      	mov	r4, r0
    c194:	f000 fdaf 	bl	ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c198:	2800      	cmp	r0, #0
    c19a:	d00e      	beq.n	c1ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c19c:	4a09      	ldr	r2, [pc, #36]	; (c1c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c19e:	6811      	ldr	r1, [r2, #0]
    c1a0:	0650      	lsls	r0, r2, #25
    c1a2:	2c02      	cmp	r4, #2
    c1a4:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c1a8:	d008      	beq.n	c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c1aa:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c1ae:	bf00      	nop
    c1b0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c1b4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c1b8:	6010      	str	r0, [r2, #0]
    c1ba:	bd10      	pop	{r4, pc}
    c1bc:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c1c0:	e7f6      	b.n	c1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c1c2:	0000      	.short	0x0000
    c1c4:	40001588 	.word	0x40001588
    c1c8:	4815      	ldr	r0, [pc, #84]	; (c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    c1ca:	7d81      	ldrb	r1, [r0, #22]
    c1cc:	2925      	cmp	r1, #37	; 0x25
    c1ce:	d00a      	beq.n	c1e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    c1d0:	2926      	cmp	r1, #38	; 0x26
    c1d2:	d00b      	beq.n	c1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c1d4:	2927      	cmp	r1, #39	; 0x27
    c1d6:	d00c      	beq.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    c1d8:	7d80      	ldrb	r0, [r0, #22]
    c1da:	0040      	lsls	r0, r0, #1
    c1dc:	290a      	cmp	r1, #10
    c1de:	d80b      	bhi.n	c1f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    c1e0:	f600 1064 	addw	r0, r0, #2404	; 0x964
    c1e4:	e00a      	b.n	c1fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    c1e6:	f640 1062 	movw	r0, #2402	; 0x962
    c1ea:	e00f      	b.n	c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1ec:	f640 107a 	movw	r0, #2426	; 0x97a
    c1f0:	e00c      	b.n	c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1f2:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    c1f6:	e009      	b.n	c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c1f8:	f600 1066 	addw	r0, r0, #2406	; 0x966
    c1fc:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c200:	d204      	bcs.n	c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c202:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c206:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c20a:	e001      	b.n	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    c20c:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c210:	4a04      	ldr	r2, [pc, #16]	; (c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    c212:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c216:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c21a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c21e:	4770      	bx	lr
    c220:	20001158 	.word	0x20001158
    c224:	40001000 	.word	0x40001000
    c228:	4912      	ldr	r1, [pc, #72]	; (c274 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c22a:	b508      	push	{r3, lr}
    c22c:	f991 2015 	ldrsb.w	r2, [r1, #21]
    c230:	7d89      	ldrb	r1, [r1, #22]
    c232:	2801      	cmp	r0, #1
    c234:	d00a      	beq.n	c24c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    c236:	2802      	cmp	r0, #2
    c238:	d00a      	beq.n	c250 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c23a:	2804      	cmp	r0, #4
    c23c:	d00a      	beq.n	c254 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    c23e:	2808      	cmp	r0, #8
    c240:	d00a      	beq.n	c258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c242:	f240 31fe 	movw	r1, #1022	; 0x3fe
    c246:	2006      	movs	r0, #6
    c248:	f7f8 fdc4 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c24c:	2000      	movs	r0, #0
    c24e:	e004      	b.n	c25a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c250:	2001      	movs	r0, #1
    c252:	e002      	b.n	c25a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c254:	2003      	movs	r0, #3
    c256:	e000      	b.n	c25a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c258:	2002      	movs	r0, #2
    c25a:	466b      	mov	r3, sp
    c25c:	f7f5 f95a 	bl	1514 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c260:	b118      	cbz	r0, c26a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    c262:	f240 5196 	movw	r1, #1430	; 0x596
    c266:	203e      	movs	r0, #62	; 0x3e
    c268:	e7ee      	b.n	c248 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    c26a:	f99d 0000 	ldrsb.w	r0, [sp]
    c26e:	f000 fa59 	bl	c724 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c272:	bd08      	pop	{r3, pc}
    c274:	20001158 	.word	0x20001158
    c278:	4803      	ldr	r0, [pc, #12]	; (c288 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    c27a:	7a01      	ldrb	r1, [r0, #8]
    c27c:	2901      	cmp	r1, #1
    c27e:	d102      	bne.n	c286 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    c280:	7a80      	ldrb	r0, [r0, #10]
    c282:	f7ff bfd1 	b.w	c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c286:	4770      	bx	lr
    c288:	20001158 	.word	0x20001158
    c28c:	480d      	ldr	r0, [pc, #52]	; (c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x140>)
    c28e:	b510      	push	{r4, lr}
    c290:	7a40      	ldrb	r0, [r0, #9]
    c292:	2801      	cmp	r0, #1
    c294:	d00c      	beq.n	c2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>
    c296:	2802      	cmp	r0, #2
    c298:	d113      	bne.n	c2c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c29a:	f7f8 fc67 	bl	4b6c <mpsl_fem_lna_configuration_clear>
    c29e:	2800      	cmp	r0, #0
    c2a0:	d00f      	beq.n	c2c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c2a2:	1c40      	adds	r0, r0, #1
    c2a4:	d00d      	beq.n	c2c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c2a6:	f640 0188 	movw	r1, #2184	; 0x888
    c2aa:	203e      	movs	r0, #62	; 0x3e
    c2ac:	f7f8 fd92 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2b0:	f7f8 fc68 	bl	4b84 <mpsl_fem_pa_configuration_clear>
    c2b4:	2800      	cmp	r0, #0
    c2b6:	d004      	beq.n	c2c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c2b8:	1c40      	adds	r0, r0, #1
    c2ba:	d002      	beq.n	c2c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x13e>
    c2bc:	f640 0182 	movw	r1, #2178	; 0x882
    c2c0:	e7f3      	b.n	c2aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x126>
    c2c2:	bd10      	pop	{r4, pc}
    c2c4:	20001158 	.word	0x20001158
    c2c8:	4808      	ldr	r0, [pc, #32]	; (c2ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>)
    c2ca:	2100      	movs	r1, #0
    c2cc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c2d0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c2d4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c2d8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c2dc:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c2e0:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c2e4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c2e8:	4770      	bx	lr
    c2ea:	0000      	.short	0x0000
    c2ec:	40001000 	.word	0x40001000
    c2f0:	b510      	push	{r4, lr}
    c2f2:	f000 fd00 	bl	ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c2f6:	2800      	cmp	r0, #0
    c2f8:	d108      	bne.n	c30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c2fa:	f000 fcec 	bl	ccd6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c2fe:	2800      	cmp	r0, #0
    c300:	d104      	bne.n	c30c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c302:	4803      	ldr	r0, [pc, #12]	; (c310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    c304:	6801      	ldr	r1, [r0, #0]
    c306:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c30a:	6001      	str	r1, [r0, #0]
    c30c:	bd10      	pop	{r4, pc}
    c30e:	0000      	.short	0x0000
    c310:	40001568 	.word	0x40001568
    c314:	4818      	ldr	r0, [pc, #96]	; (c378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f4>)
    c316:	b510      	push	{r4, lr}
    c318:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c31c:	07c1      	lsls	r1, r0, #31
    c31e:	d029      	beq.n	c374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c320:	0781      	lsls	r1, r0, #30
    c322:	d514      	bpl.n	c34e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ca>
    c324:	4815      	ldr	r0, [pc, #84]	; (c37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c326:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c32a:	f041 0101 	orr.w	r1, r1, #1
    c32e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c332:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c336:	b2c0      	uxtb	r0, r0
    c338:	280b      	cmp	r0, #11
    c33a:	d005      	beq.n	c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c33c:	280a      	cmp	r0, #10
    c33e:	d003      	beq.n	c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c340:	2803      	cmp	r0, #3
    c342:	d001      	beq.n	c348 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c344:	2802      	cmp	r0, #2
    c346:	d115      	bne.n	c374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c348:	f240 51c7 	movw	r1, #1479	; 0x5c7
    c34c:	e00f      	b.n	c36e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ea>
    c34e:	0740      	lsls	r0, r0, #29
    c350:	d510      	bpl.n	c374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c352:	480a      	ldr	r0, [pc, #40]	; (c37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f8>)
    c354:	490a      	ldr	r1, [pc, #40]	; (c380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1fc>)
    c356:	3008      	adds	r0, #8
    c358:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c35c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c360:	4808      	ldr	r0, [pc, #32]	; (c384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>)
    c362:	f004 fc34 	bl	10bce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c366:	2800      	cmp	r0, #0
    c368:	d004      	beq.n	c374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    c36a:	f240 51cf 	movw	r1, #1487	; 0x5cf
    c36e:	203e      	movs	r0, #62	; 0x3e
    c370:	f7f8 fd30 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c374:	bd10      	pop	{r4, pc}
    c376:	0000      	.short	0x0000
    c378:	20001158 	.word	0x20001158
    c37c:	40001000 	.word	0x40001000
    c380:	4001f098 	.word	0x4001f098
    c384:	40008000 	.word	0x40008000
    c388:	4808      	ldr	r0, [pc, #32]	; (c3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>)
    c38a:	4601      	mov	r1, r0
    c38c:	79c2      	ldrb	r2, [r0, #7]
    c38e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c392:	b112      	cbz	r2, c39a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x216>
    c394:	2a01      	cmp	r2, #1
    c396:	d003      	beq.n	c3a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x21c>
    c398:	e006      	b.n	c3a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c39a:	f041 0102 	orr.w	r1, r1, #2
    c39e:	e001      	b.n	c3a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x220>
    c3a0:	f041 0104 	orr.w	r1, r1, #4
    c3a4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c3a8:	f7ff bfb4 	b.w	c314 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    c3ac:	20001158 	.word	0x20001158
    c3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3b4:	4d35      	ldr	r5, [pc, #212]	; (c48c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x308>)
    c3b6:	2400      	movs	r4, #0
    c3b8:	7b28      	ldrb	r0, [r5, #12]
    c3ba:	b138      	cbz	r0, c3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c3bc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c3c0:	4833      	ldr	r0, [pc, #204]	; (c490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x30c>)
    c3c2:	f004 fc04 	bl	10bce <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    c3c6:	b108      	cbz	r0, c3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c3c8:	2601      	movs	r6, #1
    c3ca:	e000      	b.n	c3ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    c3cc:	2600      	movs	r6, #0
    c3ce:	7a68      	ldrb	r0, [r5, #9]
    c3d0:	4f30      	ldr	r7, [pc, #192]	; (c494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x310>)
    c3d2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c3d6:	2801      	cmp	r0, #1
    c3d8:	d002      	beq.n	c3e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25c>
    c3da:	2802      	cmp	r0, #2
    c3dc:	d008      	beq.n	c3f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>
    c3de:	e018      	b.n	c412 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c3e0:	4638      	mov	r0, r7
    c3e2:	f004 fbef 	bl	10bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c3e6:	b108      	cbz	r0, c3ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>
    c3e8:	2408      	movs	r4, #8
    c3ea:	e012      	b.n	c412 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c3ec:	2400      	movs	r4, #0
    c3ee:	e010      	b.n	c412 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28e>
    c3f0:	4638      	mov	r0, r7
    c3f2:	f004 fbe7 	bl	10bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c3f6:	b100      	cbz	r0, c3fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x276>
    c3f8:	2002      	movs	r0, #2
    c3fa:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c3fe:	43c9      	mvns	r1, r1
    c400:	f341 0100 	sbfx	r1, r1, #0, #1
    c404:	1c49      	adds	r1, r1, #1
    c406:	d001      	beq.n	c40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    c408:	2400      	movs	r4, #0
    c40a:	e000      	b.n	c40e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28a>
    c40c:	2404      	movs	r4, #4
    c40e:	4304      	orrs	r4, r0
    c410:	4334      	orrs	r4, r6
    c412:	f014 0f0b 	tst.w	r4, #11
    c416:	d107      	bne.n	c428 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    c418:	f44f 7188 	mov.w	r1, #272	; 0x110
    c41c:	4638      	mov	r0, r7
    c41e:	f004 fbd1 	bl	10bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c422:	b100      	cbz	r0, c426 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c424:	2010      	movs	r0, #16
    c426:	4304      	orrs	r4, r0
    c428:	481b      	ldr	r0, [pc, #108]	; (c498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    c42a:	7800      	ldrb	r0, [r0, #0]
    c42c:	b1f8      	cbz	r0, c46e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ea>
    c42e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c432:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c436:	d007      	beq.n	c448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c438:	f44f 718a 	mov.w	r1, #276	; 0x114
    c43c:	4638      	mov	r0, r7
    c43e:	f004 fbc1 	bl	10bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c442:	b108      	cbz	r0, c448 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    c444:	2001      	movs	r0, #1
    c446:	e000      	b.n	c44a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c448:	2000      	movs	r0, #0
    c44a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c44e:	b13e      	cbz	r6, c460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c450:	f44f 718c 	mov.w	r1, #280	; 0x118
    c454:	4638      	mov	r0, r7
    c456:	f004 fbb5 	bl	10bc4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    c45a:	b108      	cbz	r0, c460 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c45c:	2001      	movs	r0, #1
    c45e:	e000      	b.n	c462 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    c460:	2000      	movs	r0, #0
    c462:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c466:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c46a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c46e:	f7ff ff2b 	bl	c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>
    c472:	06e0      	lsls	r0, r4, #27
    c474:	d506      	bpl.n	c484 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c476:	0720      	lsls	r0, r4, #28
    c478:	d404      	bmi.n	c484 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c47a:	7a68      	ldrb	r0, [r5, #9]
    c47c:	2801      	cmp	r0, #1
    c47e:	d101      	bne.n	c484 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c480:	f044 0420 	orr.w	r4, r4, #32
    c484:	4620      	mov	r0, r4
    c486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c48a:	0000      	.short	0x0000
    c48c:	20001158 	.word	0x20001158
    c490:	40008000 	.word	0x40008000
    c494:	40001000 	.word	0x40001000
    c498:	20000274 	.word	0x20000274
    c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a0:	4c19      	ldr	r4, [pc, #100]	; (c508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x384>)
    c4a2:	460d      	mov	r5, r1
    c4a4:	7a21      	ldrb	r1, [r4, #8]
    c4a6:	b129      	cbz	r1, c4b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x330>
    c4a8:	f010 0f11 	tst.w	r0, #17
    c4ac:	d00b      	beq.n	c4c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x342>
    c4ae:	f7ff f9e7 	bl	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c4b2:	e027      	b.n	c504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c4b4:	4915      	ldr	r1, [pc, #84]	; (c50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>)
    c4b6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c4ba:	6008      	str	r0, [r1, #0]
    c4bc:	f000 f88c 	bl	c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c4c0:	2000      	movs	r0, #0
    c4c2:	7320      	strb	r0, [r4, #12]
    c4c4:	e01e      	b.n	c504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c4c6:	2901      	cmp	r1, #1
    c4c8:	d001      	beq.n	c4ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c4ca:	2601      	movs	r6, #1
    c4cc:	e000      	b.n	c4d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34c>
    c4ce:	2600      	movs	r6, #0
    c4d0:	79e0      	ldrb	r0, [r4, #7]
    c4d2:	2801      	cmp	r0, #1
    c4d4:	d00e      	beq.n	c4f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>
    c4d6:	2700      	movs	r7, #0
    c4d8:	f000 f87e 	bl	c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c4dc:	2196      	movs	r1, #150	; 0x96
    c4de:	4630      	mov	r0, r6
    c4e0:	f000 f890 	bl	c604 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x480>
    c4e4:	4601      	mov	r1, r0
    c4e6:	b14f      	cbz	r7, c4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c4e8:	353b      	adds	r5, #59	; 0x3b
    c4ea:	428d      	cmp	r5, r1
    c4ec:	d904      	bls.n	c4f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c4ee:	2000      	movs	r0, #0
    c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4f4:	2701      	movs	r7, #1
    c4f6:	e7ef      	b.n	c4d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c4f8:	2001      	movs	r0, #1
    c4fa:	71e0      	strb	r0, [r4, #7]
    c4fc:	7aa2      	ldrb	r2, [r4, #10]
    c4fe:	4630      	mov	r0, r6
    c500:	f7ff fc70 	bl	bde4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c504:	2001      	movs	r0, #1
    c506:	e7f3      	b.n	c4f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>
    c508:	20001158 	.word	0x20001158
    c50c:	4001f508 	.word	0x4001f508
    c510:	4803      	ldr	r0, [pc, #12]	; (c520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x39c>)
    c512:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c516:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c51a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c51e:	4770      	bx	lr
    c520:	40001000 	.word	0x40001000
    c524:	4804      	ldr	r0, [pc, #16]	; (c538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>)
    c526:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c528:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c52c:	6281      	str	r1, [r0, #40]	; 0x28
    c52e:	4903      	ldr	r1, [pc, #12]	; (c53c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b8>)
    c530:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c534:	6008      	str	r0, [r1, #0]
    c536:	4770      	bx	lr
    c538:	20001158 	.word	0x20001158
    c53c:	4001f504 	.word	0x4001f504
    c540:	4a07      	ldr	r2, [pc, #28]	; (c560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c542:	2000      	movs	r0, #0
    c544:	3208      	adds	r2, #8
    c546:	4906      	ldr	r1, [pc, #24]	; (c560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c548:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c54c:	1d0a      	adds	r2, r1, #4
    c54e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c552:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c556:	4902      	ldr	r1, [pc, #8]	; (c560 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c558:	310c      	adds	r1, #12
    c55a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c55e:	4770      	bx	lr
    c560:	40008000 	.word	0x40008000
    c564:	4903      	ldr	r1, [pc, #12]	; (c574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>)
    c566:	79c9      	ldrb	r1, [r1, #7]
    c568:	2900      	cmp	r1, #0
    c56a:	d102      	bne.n	c572 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ee>
    c56c:	4902      	ldr	r1, [pc, #8]	; (c578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f4>)
    c56e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c572:	4770      	bx	lr
    c574:	20001158 	.word	0x20001158
    c578:	4001f098 	.word	0x4001f098
    c57c:	b510      	push	{r4, lr}
    c57e:	4a14      	ldr	r2, [pc, #80]	; (c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c580:	b120      	cbz	r0, c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c582:	2801      	cmp	r0, #1
    c584:	d011      	beq.n	c5aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x426>
    c586:	f240 61fc 	movw	r1, #1788	; 0x6fc
    c58a:	e01c      	b.n	c5c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c58c:	f101 0028 	add.w	r0, r1, #40	; 0x28
    c590:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c594:	490f      	ldr	r1, [pc, #60]	; (c5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c596:	480e      	ldr	r0, [pc, #56]	; (c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c598:	f7f8 fafa 	bl	4b90 <mpsl_fem_pa_configuration_set>
    c59c:	2800      	cmp	r0, #0
    c59e:	d015      	beq.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c5a0:	1c40      	adds	r0, r0, #1
    c5a2:	d013      	beq.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c5a4:	f240 61eb 	movw	r1, #1771	; 0x6eb
    c5a8:	e00d      	b.n	c5c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x442>
    c5aa:	f101 0029 	add.w	r0, r1, #41	; 0x29
    c5ae:	e9c2 1002 	strd	r1, r0, [r2, #8]
    c5b2:	4908      	ldr	r1, [pc, #32]	; (c5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x450>)
    c5b4:	4806      	ldr	r0, [pc, #24]	; (c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>)
    c5b6:	f7f8 fadf 	bl	4b78 <mpsl_fem_lna_configuration_set>
    c5ba:	2800      	cmp	r0, #0
    c5bc:	d006      	beq.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c5be:	1c40      	adds	r0, r0, #1
    c5c0:	d004      	beq.n	c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c5c2:	f44f 61df 	mov.w	r1, #1784	; 0x6f8
    c5c6:	203e      	movs	r0, #62	; 0x3e
    c5c8:	f7f8 fc04 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5cc:	bd10      	pop	{r4, pc}
    c5ce:	0000      	.short	0x0000
    c5d0:	2000027c 	.word	0x2000027c
    c5d4:	0000c660 	.word	0x0000c660
    c5d8:	4802      	ldr	r0, [pc, #8]	; (c5e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>)
    c5da:	2100      	movs	r1, #0
    c5dc:	71c1      	strb	r1, [r0, #7]
    c5de:	7201      	strb	r1, [r0, #8]
    c5e0:	7241      	strb	r1, [r0, #9]
    c5e2:	4770      	bx	lr
    c5e4:	20001158 	.word	0x20001158
    c5e8:	4a05      	ldr	r2, [pc, #20]	; (c600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>)
    c5ea:	79d2      	ldrb	r2, [r2, #7]
    c5ec:	2a01      	cmp	r2, #1
    c5ee:	d006      	beq.n	c5fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c5f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c5f4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c5f8:	fbb1 f1f2 	udiv	r1, r1, r2
    c5fc:	1a40      	subs	r0, r0, r1
    c5fe:	4770      	bx	lr
    c600:	20001158 	.word	0x20001158
    c604:	b570      	push	{r4, r5, r6, lr}
    c606:	4c13      	ldr	r4, [pc, #76]	; (c654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4d0>)
    c608:	4603      	mov	r3, r0
    c60a:	460d      	mov	r5, r1
    c60c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c610:	2000      	movs	r0, #0
    c612:	b15a      	cbz	r2, c62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>
    c614:	4621      	mov	r1, r4
    c616:	f891 1020 	ldrb.w	r1, [r1, #32]
    c61a:	b163      	cbz	r3, c636 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b2>
    c61c:	2b01      	cmp	r3, #1
    c61e:	d111      	bne.n	c644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>
    c620:	2a01      	cmp	r2, #1
    c622:	4628      	mov	r0, r5
    c624:	d012      	beq.n	c64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c8>
    c626:	f004 fad7 	bl	10bd8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c62a:	e009      	b.n	c640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c62c:	f640 0134 	movw	r1, #2100	; 0x834
    c630:	203e      	movs	r0, #62	; 0x3e
    c632:	f7f8 fbcf 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c636:	2a01      	cmp	r2, #1
    c638:	4628      	mov	r0, r5
    c63a:	d004      	beq.n	c646 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c2>
    c63c:	f004 fada 	bl	10bf4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c640:	69e1      	ldr	r1, [r4, #28]
    c642:	4408      	add	r0, r1
    c644:	bd70      	pop	{r4, r5, r6, pc}
    c646:	f000 f881 	bl	c74c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c64a:	e7f9      	b.n	c640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c64c:	f000 f870 	bl	c730 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c650:	e7f6      	b.n	c640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>
    c652:	0000      	.short	0x0000
    c654:	20001158 	.word	0x20001158
    c658:	a62c0000 	.word	0xa62c0000
    c65c:	0000a1e0 	.word	0x0000a1e0
    c660:	00000001 	.word	0x00000001
    c664:	40001110 	.word	0x40001110
	...
    c67c:	00001e14 	.word	0x00001e14
    c680:	00001130 	.word	0x00001130
    c684:	00000000 	.word	0x00000000
    c688:	00000028 	.word	0x00000028
    c68c:	00000018 	.word	0x00000018
    c690:	00000000 	.word	0x00000000
    c694:	00001e14 	.word	0x00001e14
    c698:	00001130 	.word	0x00001130
    c69c:	00000000 	.word	0x00000000
    c6a0:	00001770 	.word	0x00001770
    c6a4:	00000fa0 	.word	0x00000fa0

0000c6a8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    c6a8:	b570      	push	{r4, r5, r6, lr}
    c6aa:	4605      	mov	r5, r0
    c6ac:	4614      	mov	r4, r2
    c6ae:	4608      	mov	r0, r1
    c6b0:	f7ff fb92 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    c6b4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    c6b8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    c6bc:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    c6c0:	4807      	ldr	r0, [pc, #28]	; (c6e0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    c6c2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c6c6:	4408      	add	r0, r1
    c6c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c6cc:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    c6d0:	fbb0 f5f1 	udiv	r5, r0, r1
    c6d4:	4620      	mov	r0, r4
    c6d6:	f7ff fb53 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c6da:	4428      	add	r0, r5
    c6dc:	1d40      	adds	r0, r0, #5
    c6de:	bd70      	pop	{r4, r5, r6, pc}
    c6e0:	0000c770 	.word	0x0000c770

0000c6e4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    c6e4:	b570      	push	{r4, r5, r6, lr}
    c6e6:	4d0e      	ldr	r5, [pc, #56]	; (c720 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c6e8:	461c      	mov	r4, r3
    c6ea:	3d08      	subs	r5, #8
    c6ec:	4b0c      	ldr	r3, [pc, #48]	; (c720 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    c6ee:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    c6f2:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    c6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c6fa:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    c6fe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c702:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    c706:	4418      	add	r0, r3
    c708:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c70c:	fbb0 f5f1 	udiv	r5, r0, r1
    c710:	4610      	mov	r0, r2
    c712:	f7ff fb35 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    c716:	4428      	add	r0, r5
    c718:	4420      	add	r0, r4
    c71a:	1d40      	adds	r0, r0, #5
    c71c:	bd70      	pop	{r4, r5, r6, pc}
    c71e:	0000      	.short	0x0000
    c720:	0000c770 	.word	0x0000c770

0000c724 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c724:	4901      	ldr	r1, [pc, #4]	; (c72c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c726:	b2c0      	uxtb	r0, r0
    c728:	6008      	str	r0, [r1, #0]
    c72a:	4770      	bx	lr
    c72c:	4000150c 	.word	0x4000150c

0000c730 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    c730:	4a05      	ldr	r2, [pc, #20]	; (c748 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    c732:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c73a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    c73e:	fbb1 f1f2 	udiv	r1, r1, r2
    c742:	4408      	add	r0, r1
    c744:	1e80      	subs	r0, r0, #2
    c746:	4770      	bx	lr
    c748:	0000c768 	.word	0x0000c768

0000c74c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    c74c:	4a05      	ldr	r2, [pc, #20]	; (c764 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    c74e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    c752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c756:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    c75a:	fbb1 f1f2 	udiv	r1, r1, r2
    c75e:	4408      	add	r0, r1
    c760:	4770      	bx	lr
    c762:	0000      	.short	0x0000
    c764:	0000c768 	.word	0x0000c768
    c768:	05dc0000 	.word	0x05dc0000
    c76c:	000003e8 	.word	0x000003e8
    c770:	00000000 	.word	0x00000000
    c774:	00001e14 	.word	0x00001e14
    c778:	00001130 	.word	0x00001130

0000c77c <__udivmoddi4>:
    c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c780:	4607      	mov	r7, r0
    c782:	468c      	mov	ip, r1
    c784:	4608      	mov	r0, r1
    c786:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c788:	4615      	mov	r5, r2
    c78a:	463c      	mov	r4, r7
    c78c:	4619      	mov	r1, r3
    c78e:	2b00      	cmp	r3, #0
    c790:	f040 80c6 	bne.w	c920 <__udivmoddi4+0x1a4>
    c794:	4282      	cmp	r2, r0
    c796:	fab2 f782 	clz	r7, r2
    c79a:	d946      	bls.n	c82a <__udivmoddi4+0xae>
    c79c:	b14f      	cbz	r7, c7b2 <__udivmoddi4+0x36>
    c79e:	f1c7 0e20 	rsb	lr, r7, #32
    c7a2:	fa24 fe0e 	lsr.w	lr, r4, lr
    c7a6:	fa00 f307 	lsl.w	r3, r0, r7
    c7aa:	40bd      	lsls	r5, r7
    c7ac:	ea4e 0c03 	orr.w	ip, lr, r3
    c7b0:	40bc      	lsls	r4, r7
    c7b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
    c7b6:	fa1f fe85 	uxth.w	lr, r5
    c7ba:	fbbc f9f8 	udiv	r9, ip, r8
    c7be:	0c22      	lsrs	r2, r4, #16
    c7c0:	fb08 c319 	mls	r3, r8, r9, ip
    c7c4:	fb09 fa0e 	mul.w	sl, r9, lr
    c7c8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    c7cc:	459a      	cmp	sl, r3
    c7ce:	d928      	bls.n	c822 <__udivmoddi4+0xa6>
    c7d0:	18eb      	adds	r3, r5, r3
    c7d2:	f109 30ff 	add.w	r0, r9, #4294967295
    c7d6:	d204      	bcs.n	c7e2 <__udivmoddi4+0x66>
    c7d8:	459a      	cmp	sl, r3
    c7da:	d902      	bls.n	c7e2 <__udivmoddi4+0x66>
    c7dc:	f1a9 0002 	sub.w	r0, r9, #2
    c7e0:	442b      	add	r3, r5
    c7e2:	eba3 030a 	sub.w	r3, r3, sl
    c7e6:	b2a4      	uxth	r4, r4
    c7e8:	fbb3 f2f8 	udiv	r2, r3, r8
    c7ec:	fb08 3312 	mls	r3, r8, r2, r3
    c7f0:	fb02 fe0e 	mul.w	lr, r2, lr
    c7f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7f8:	45a6      	cmp	lr, r4
    c7fa:	d914      	bls.n	c826 <__udivmoddi4+0xaa>
    c7fc:	192c      	adds	r4, r5, r4
    c7fe:	f102 33ff 	add.w	r3, r2, #4294967295
    c802:	d203      	bcs.n	c80c <__udivmoddi4+0x90>
    c804:	45a6      	cmp	lr, r4
    c806:	d901      	bls.n	c80c <__udivmoddi4+0x90>
    c808:	1e93      	subs	r3, r2, #2
    c80a:	442c      	add	r4, r5
    c80c:	eba4 040e 	sub.w	r4, r4, lr
    c810:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c814:	b11e      	cbz	r6, c81e <__udivmoddi4+0xa2>
    c816:	40fc      	lsrs	r4, r7
    c818:	2300      	movs	r3, #0
    c81a:	6034      	str	r4, [r6, #0]
    c81c:	6073      	str	r3, [r6, #4]
    c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c822:	4648      	mov	r0, r9
    c824:	e7dd      	b.n	c7e2 <__udivmoddi4+0x66>
    c826:	4613      	mov	r3, r2
    c828:	e7f0      	b.n	c80c <__udivmoddi4+0x90>
    c82a:	b902      	cbnz	r2, c82e <__udivmoddi4+0xb2>
    c82c:	deff      	udf	#255	; 0xff
    c82e:	bb87      	cbnz	r7, c892 <__udivmoddi4+0x116>
    c830:	1a83      	subs	r3, r0, r2
    c832:	2101      	movs	r1, #1
    c834:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c838:	b2aa      	uxth	r2, r5
    c83a:	fbb3 fcfe 	udiv	ip, r3, lr
    c83e:	0c20      	lsrs	r0, r4, #16
    c840:	fb0e 331c 	mls	r3, lr, ip, r3
    c844:	fb0c f802 	mul.w	r8, ip, r2
    c848:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c84c:	4598      	cmp	r8, r3
    c84e:	d963      	bls.n	c918 <__udivmoddi4+0x19c>
    c850:	18eb      	adds	r3, r5, r3
    c852:	f10c 30ff 	add.w	r0, ip, #4294967295
    c856:	d204      	bcs.n	c862 <__udivmoddi4+0xe6>
    c858:	4598      	cmp	r8, r3
    c85a:	d902      	bls.n	c862 <__udivmoddi4+0xe6>
    c85c:	f1ac 0002 	sub.w	r0, ip, #2
    c860:	442b      	add	r3, r5
    c862:	eba3 0308 	sub.w	r3, r3, r8
    c866:	b2a4      	uxth	r4, r4
    c868:	fbb3 fcfe 	udiv	ip, r3, lr
    c86c:	fb0e 331c 	mls	r3, lr, ip, r3
    c870:	fb0c f202 	mul.w	r2, ip, r2
    c874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c878:	42a2      	cmp	r2, r4
    c87a:	d94f      	bls.n	c91c <__udivmoddi4+0x1a0>
    c87c:	192c      	adds	r4, r5, r4
    c87e:	f10c 33ff 	add.w	r3, ip, #4294967295
    c882:	d204      	bcs.n	c88e <__udivmoddi4+0x112>
    c884:	42a2      	cmp	r2, r4
    c886:	d902      	bls.n	c88e <__udivmoddi4+0x112>
    c888:	f1ac 0302 	sub.w	r3, ip, #2
    c88c:	442c      	add	r4, r5
    c88e:	1aa4      	subs	r4, r4, r2
    c890:	e7be      	b.n	c810 <__udivmoddi4+0x94>
    c892:	f1c7 0c20 	rsb	ip, r7, #32
    c896:	fa20 f80c 	lsr.w	r8, r0, ip
    c89a:	fa00 f307 	lsl.w	r3, r0, r7
    c89e:	fa24 fc0c 	lsr.w	ip, r4, ip
    c8a2:	40bd      	lsls	r5, r7
    c8a4:	ea4c 0203 	orr.w	r2, ip, r3
    c8a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c8ac:	b2ab      	uxth	r3, r5
    c8ae:	fbb8 fcfe 	udiv	ip, r8, lr
    c8b2:	0c11      	lsrs	r1, r2, #16
    c8b4:	fb0e 801c 	mls	r0, lr, ip, r8
    c8b8:	fb0c f903 	mul.w	r9, ip, r3
    c8bc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    c8c0:	4581      	cmp	r9, r0
    c8c2:	fa04 f407 	lsl.w	r4, r4, r7
    c8c6:	d923      	bls.n	c910 <__udivmoddi4+0x194>
    c8c8:	1828      	adds	r0, r5, r0
    c8ca:	f10c 31ff 	add.w	r1, ip, #4294967295
    c8ce:	d204      	bcs.n	c8da <__udivmoddi4+0x15e>
    c8d0:	4581      	cmp	r9, r0
    c8d2:	d902      	bls.n	c8da <__udivmoddi4+0x15e>
    c8d4:	f1ac 0102 	sub.w	r1, ip, #2
    c8d8:	4428      	add	r0, r5
    c8da:	eba0 0009 	sub.w	r0, r0, r9
    c8de:	b292      	uxth	r2, r2
    c8e0:	fbb0 fcfe 	udiv	ip, r0, lr
    c8e4:	fb0e 001c 	mls	r0, lr, ip, r0
    c8e8:	fb0c f803 	mul.w	r8, ip, r3
    c8ec:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    c8f0:	4598      	cmp	r8, r3
    c8f2:	d90f      	bls.n	c914 <__udivmoddi4+0x198>
    c8f4:	18eb      	adds	r3, r5, r3
    c8f6:	f10c 32ff 	add.w	r2, ip, #4294967295
    c8fa:	d204      	bcs.n	c906 <__udivmoddi4+0x18a>
    c8fc:	4598      	cmp	r8, r3
    c8fe:	d902      	bls.n	c906 <__udivmoddi4+0x18a>
    c900:	f1ac 0202 	sub.w	r2, ip, #2
    c904:	442b      	add	r3, r5
    c906:	eba3 0308 	sub.w	r3, r3, r8
    c90a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    c90e:	e791      	b.n	c834 <__udivmoddi4+0xb8>
    c910:	4661      	mov	r1, ip
    c912:	e7e2      	b.n	c8da <__udivmoddi4+0x15e>
    c914:	4662      	mov	r2, ip
    c916:	e7f6      	b.n	c906 <__udivmoddi4+0x18a>
    c918:	4660      	mov	r0, ip
    c91a:	e7a2      	b.n	c862 <__udivmoddi4+0xe6>
    c91c:	4663      	mov	r3, ip
    c91e:	e7b6      	b.n	c88e <__udivmoddi4+0x112>
    c920:	4283      	cmp	r3, r0
    c922:	d905      	bls.n	c930 <__udivmoddi4+0x1b4>
    c924:	b10e      	cbz	r6, c92a <__udivmoddi4+0x1ae>
    c926:	e9c6 7000 	strd	r7, r0, [r6]
    c92a:	2100      	movs	r1, #0
    c92c:	4608      	mov	r0, r1
    c92e:	e776      	b.n	c81e <__udivmoddi4+0xa2>
    c930:	fab3 f183 	clz	r1, r3
    c934:	b981      	cbnz	r1, c958 <__udivmoddi4+0x1dc>
    c936:	4283      	cmp	r3, r0
    c938:	d301      	bcc.n	c93e <__udivmoddi4+0x1c2>
    c93a:	42ba      	cmp	r2, r7
    c93c:	d80a      	bhi.n	c954 <__udivmoddi4+0x1d8>
    c93e:	1abc      	subs	r4, r7, r2
    c940:	eb60 0303 	sbc.w	r3, r0, r3
    c944:	2001      	movs	r0, #1
    c946:	469c      	mov	ip, r3
    c948:	2e00      	cmp	r6, #0
    c94a:	d068      	beq.n	ca1e <__udivmoddi4+0x2a2>
    c94c:	e9c6 4c00 	strd	r4, ip, [r6]
    c950:	2100      	movs	r1, #0
    c952:	e764      	b.n	c81e <__udivmoddi4+0xa2>
    c954:	4608      	mov	r0, r1
    c956:	e7f7      	b.n	c948 <__udivmoddi4+0x1cc>
    c958:	f1c1 0c20 	rsb	ip, r1, #32
    c95c:	408b      	lsls	r3, r1
    c95e:	fa22 f40c 	lsr.w	r4, r2, ip
    c962:	431c      	orrs	r4, r3
    c964:	fa02 f501 	lsl.w	r5, r2, r1
    c968:	fa00 f301 	lsl.w	r3, r0, r1
    c96c:	fa27 f20c 	lsr.w	r2, r7, ip
    c970:	fa20 fb0c 	lsr.w	fp, r0, ip
    c974:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c978:	4313      	orrs	r3, r2
    c97a:	fbbb f8f9 	udiv	r8, fp, r9
    c97e:	fa1f fe84 	uxth.w	lr, r4
    c982:	fb09 bb18 	mls	fp, r9, r8, fp
    c986:	0c1a      	lsrs	r2, r3, #16
    c988:	fb08 fa0e 	mul.w	sl, r8, lr
    c98c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    c990:	4592      	cmp	sl, r2
    c992:	fa07 f701 	lsl.w	r7, r7, r1
    c996:	d93e      	bls.n	ca16 <__udivmoddi4+0x29a>
    c998:	18a2      	adds	r2, r4, r2
    c99a:	f108 30ff 	add.w	r0, r8, #4294967295
    c99e:	d204      	bcs.n	c9aa <__udivmoddi4+0x22e>
    c9a0:	4592      	cmp	sl, r2
    c9a2:	d902      	bls.n	c9aa <__udivmoddi4+0x22e>
    c9a4:	f1a8 0002 	sub.w	r0, r8, #2
    c9a8:	4422      	add	r2, r4
    c9aa:	eba2 020a 	sub.w	r2, r2, sl
    c9ae:	b29b      	uxth	r3, r3
    c9b0:	fbb2 f8f9 	udiv	r8, r2, r9
    c9b4:	fb09 2218 	mls	r2, r9, r8, r2
    c9b8:	fb08 fe0e 	mul.w	lr, r8, lr
    c9bc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    c9c0:	4596      	cmp	lr, r2
    c9c2:	d92a      	bls.n	ca1a <__udivmoddi4+0x29e>
    c9c4:	18a2      	adds	r2, r4, r2
    c9c6:	f108 33ff 	add.w	r3, r8, #4294967295
    c9ca:	d204      	bcs.n	c9d6 <__udivmoddi4+0x25a>
    c9cc:	4596      	cmp	lr, r2
    c9ce:	d902      	bls.n	c9d6 <__udivmoddi4+0x25a>
    c9d0:	f1a8 0302 	sub.w	r3, r8, #2
    c9d4:	4422      	add	r2, r4
    c9d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c9da:	fba0 9305 	umull	r9, r3, r0, r5
    c9de:	eba2 020e 	sub.w	r2, r2, lr
    c9e2:	429a      	cmp	r2, r3
    c9e4:	46ce      	mov	lr, r9
    c9e6:	4698      	mov	r8, r3
    c9e8:	d302      	bcc.n	c9f0 <__udivmoddi4+0x274>
    c9ea:	d106      	bne.n	c9fa <__udivmoddi4+0x27e>
    c9ec:	454f      	cmp	r7, r9
    c9ee:	d204      	bcs.n	c9fa <__udivmoddi4+0x27e>
    c9f0:	ebb9 0e05 	subs.w	lr, r9, r5
    c9f4:	eb63 0804 	sbc.w	r8, r3, r4
    c9f8:	3801      	subs	r0, #1
    c9fa:	b186      	cbz	r6, ca1e <__udivmoddi4+0x2a2>
    c9fc:	ebb7 030e 	subs.w	r3, r7, lr
    ca00:	eb62 0708 	sbc.w	r7, r2, r8
    ca04:	fa07 fc0c 	lsl.w	ip, r7, ip
    ca08:	40cb      	lsrs	r3, r1
    ca0a:	ea4c 0303 	orr.w	r3, ip, r3
    ca0e:	40cf      	lsrs	r7, r1
    ca10:	e9c6 3700 	strd	r3, r7, [r6]
    ca14:	e79c      	b.n	c950 <__udivmoddi4+0x1d4>
    ca16:	4640      	mov	r0, r8
    ca18:	e7c7      	b.n	c9aa <__udivmoddi4+0x22e>
    ca1a:	4643      	mov	r3, r8
    ca1c:	e7db      	b.n	c9d6 <__udivmoddi4+0x25a>
    ca1e:	4631      	mov	r1, r6
    ca20:	e6fd      	b.n	c81e <__udivmoddi4+0xa2>

0000ca22 <strcmp>:
    ca22:	f810 2b01 	ldrb.w	r2, [r0], #1
    ca26:	f811 3b01 	ldrb.w	r3, [r1], #1
    ca2a:	2a01      	cmp	r2, #1
    ca2c:	bf28      	it	cs
    ca2e:	429a      	cmpcs	r2, r3
    ca30:	d0f7      	beq.n	ca22 <strcmp>
    ca32:	1ad0      	subs	r0, r2, r3
    ca34:	4770      	bx	lr

0000ca36 <strlen>:
    ca36:	4603      	mov	r3, r0
    ca38:	f813 2b01 	ldrb.w	r2, [r3], #1
    ca3c:	2a00      	cmp	r2, #0
    ca3e:	d1fb      	bne.n	ca38 <strlen+0x2>
    ca40:	1a18      	subs	r0, r3, r0
    ca42:	3801      	subs	r0, #1
    ca44:	4770      	bx	lr

0000ca46 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    ca46:	4770      	bx	lr
    ca48:	2100      	movs	r1, #0
    ca4a:	7081      	strb	r1, [r0, #2]
    ca4c:	7001      	strb	r1, [r0, #0]
    ca4e:	7041      	strb	r1, [r0, #1]
    ca50:	4770      	bx	lr

0000ca52 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    ca52:	b570      	push	{r4, r5, r6, lr}
    ca54:	f7f4 fd78 	bl	1548 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    ca58:	4605      	mov	r5, r0
    ca5a:	2400      	movs	r4, #0
    ca5c:	e006      	b.n	ca6c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    ca5e:	4620      	mov	r0, r4
    ca60:	f7f4 fd78 	bl	1554 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    ca64:	f7ff fff0 	bl	ca48 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    ca68:	1c64      	adds	r4, r4, #1
    ca6a:	b2e4      	uxtb	r4, r4
    ca6c:	42ac      	cmp	r4, r5
    ca6e:	d3f6      	bcc.n	ca5e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    ca70:	bd70      	pop	{r4, r5, r6, pc}

0000ca72 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    ca72:	2000      	movs	r0, #0
    ca74:	f7f7 bb4a 	b.w	410c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    ca78:	b510      	push	{r4, lr}
    ca7a:	f7f7 f817 	bl	3aac <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ca7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca82:	f000 b800 	b.w	ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000ca86 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    ca86:	0a41      	lsrs	r1, r0, #9
    ca88:	f643 5209 	movw	r2, #15625	; 0x3d09
    ca8c:	4351      	muls	r1, r2
    ca8e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ca92:	fb10 f002 	smulbb	r0, r0, r2
    ca96:	f500 7080 	add.w	r0, r0, #256	; 0x100
    ca9a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    ca9e:	4770      	bx	lr

0000caa0 <MPSL_IRQ_RADIO_Handler>:
    caa0:	f7f5 bdf6 	b.w	2690 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    caa4:	2800      	cmp	r0, #0
    caa6:	db09      	blt.n	cabc <MPSL_IRQ_RADIO_Handler+0x1c>
    caa8:	f000 021f 	and.w	r2, r0, #31
    caac:	2101      	movs	r1, #1
    caae:	4091      	lsls	r1, r2
    cab0:	0940      	lsrs	r0, r0, #5
    cab2:	0080      	lsls	r0, r0, #2
    cab4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cab8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cabc:	4770      	bx	lr
    cabe:	2800      	cmp	r0, #0
    cac0:	db0d      	blt.n	cade <MPSL_IRQ_RADIO_Handler+0x3e>
    cac2:	f000 021f 	and.w	r2, r0, #31
    cac6:	2101      	movs	r1, #1
    cac8:	4091      	lsls	r1, r2
    caca:	0940      	lsrs	r0, r0, #5
    cacc:	0080      	lsls	r0, r0, #2
    cace:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cad2:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cad6:	f3bf 8f4f 	dsb	sy
    cada:	f3bf 8f6f 	isb	sy
    cade:	4770      	bx	lr

0000cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    cae0:	b570      	push	{r4, r5, r6, lr}
    cae2:	4602      	mov	r2, r0
    cae4:	2000      	movs	r0, #0
    cae6:	2900      	cmp	r1, #0
    cae8:	d01d      	beq.n	cb26 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    caea:	fba2 0101 	umull	r0, r1, r2, r1
    caee:	0a40      	lsrs	r0, r0, #9
    caf0:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    caf4:	0a49      	lsrs	r1, r1, #9
    caf6:	1c40      	adds	r0, r0, #1
    caf8:	f141 0100 	adc.w	r1, r1, #0
    cafc:	f240 72a1 	movw	r2, #1953	; 0x7a1
    cb00:	1883      	adds	r3, r0, r2
    cb02:	f141 0100 	adc.w	r1, r1, #0
    cb06:	1c5b      	adds	r3, r3, #1
    cb08:	f141 0400 	adc.w	r4, r1, #0
    cb0c:	2100      	movs	r1, #0
    cb0e:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    cb12:	41a1      	sbcs	r1, r4
    cb14:	d203      	bcs.n	cb1e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    cb16:	2171      	movs	r1, #113	; 0x71
    cb18:	206d      	movs	r0, #109	; 0x6d
    cb1a:	f7f7 fea7 	bl	486c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    cb1e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    cb22:	fbb0 f0f2 	udiv	r0, r0, r2
    cb26:	bd70      	pop	{r4, r5, r6, pc}
    cb28:	5840      	ldr	r0, [r0, r1]
    cb2a:	2800      	cmp	r0, #0
    cb2c:	d000      	beq.n	cb30 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    cb2e:	2001      	movs	r0, #1
    cb30:	4770      	bx	lr
    cb32:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    cb36:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    cb3a:	f002 0201 	and.w	r2, r2, #1
    cb3e:	03c0      	lsls	r0, r0, #15
    cb40:	d503      	bpl.n	cb4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cb42:	428a      	cmp	r2, r1
    cb44:	d101      	bne.n	cb4a <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    cb46:	2001      	movs	r0, #1
    cb48:	4770      	bx	lr
    cb4a:	2000      	movs	r0, #0
    cb4c:	4770      	bx	lr

0000cb4e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    cb4e:	b510      	push	{r4, lr}
    cb50:	2101      	movs	r1, #1
    cb52:	0788      	lsls	r0, r1, #30
    cb54:	f7f7 fe34 	bl	47c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cb58:	2800      	cmp	r0, #0
    cb5a:	d000      	beq.n	cb5e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    cb5c:	2001      	movs	r0, #1
    cb5e:	bd10      	pop	{r4, pc}

0000cb60 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    cb60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cb64:	2101      	movs	r1, #1
    cb66:	6001      	str	r1, [r0, #0]
    cb68:	4770      	bx	lr

0000cb6a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    cb6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cb6e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    cb72:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    cb76:	f002 0203 	and.w	r2, r2, #3
    cb7a:	03c9      	lsls	r1, r1, #15
    cb7c:	d503      	bpl.n	cb86 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cb7e:	4282      	cmp	r2, r0
    cb80:	d101      	bne.n	cb86 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    cb82:	2001      	movs	r0, #1
    cb84:	4770      	bx	lr
    cb86:	2000      	movs	r0, #0
    cb88:	4770      	bx	lr

0000cb8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    cb8a:	b510      	push	{r4, lr}
    cb8c:	2100      	movs	r1, #0
    cb8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    cb92:	f7f7 fe15 	bl	47c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    cb96:	2800      	cmp	r0, #0
    cb98:	d000      	beq.n	cb9c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    cb9a:	2001      	movs	r0, #1
    cb9c:	bd10      	pop	{r4, pc}
    cb9e:	2800      	cmp	r0, #0
    cba0:	db09      	blt.n	cbb6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    cba2:	f000 021f 	and.w	r2, r0, #31
    cba6:	2101      	movs	r1, #1
    cba8:	4091      	lsls	r1, r2
    cbaa:	0940      	lsrs	r0, r0, #5
    cbac:	0080      	lsls	r0, r0, #2
    cbae:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cbb2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cbb6:	4770      	bx	lr
    cbb8:	2800      	cmp	r0, #0
    cbba:	db0d      	blt.n	cbd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    cbbc:	f000 021f 	and.w	r2, r0, #31
    cbc0:	2101      	movs	r1, #1
    cbc2:	4091      	lsls	r1, r2
    cbc4:	0940      	lsrs	r0, r0, #5
    cbc6:	0080      	lsls	r0, r0, #2
    cbc8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cbcc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    cbd0:	f3bf 8f4f 	dsb	sy
    cbd4:	f3bf 8f6f 	isb	sy
    cbd8:	4770      	bx	lr
    cbda:	1000      	.short	0x1000
    cbdc:	00fa0002 	.word	0x00fa0002
    cbe0:	63d00000 	.word	0x63d00000
    cbe4:	364ec2a6 	.word	0x364ec2a6
    cbe8:	cd2bf983 	.word	0xcd2bf983
    cbec:	3cbc91b0 	.word	0x3cbc91b0
    cbf0:	b3088b82 	.word	0xb3088b82
    cbf4:	9c3d      	.short	0x9c3d
    cbf6:	2800      	cmp	r0, #0
    cbf8:	db09      	blt.n	cc0e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    cbfa:	f000 021f 	and.w	r2, r0, #31
    cbfe:	2101      	movs	r1, #1
    cc00:	4091      	lsls	r1, r2
    cc02:	0940      	lsrs	r0, r0, #5
    cc04:	0080      	lsls	r0, r0, #2
    cc06:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cc0a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cc0e:	4770      	bx	lr

0000cc10 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    cc10:	f3ef 8110 	mrs	r1, PRIMASK
    cc14:	b672      	cpsid	i
    cc16:	7802      	ldrb	r2, [r0, #0]
    cc18:	2a01      	cmp	r2, #1
    cc1a:	d001      	beq.n	cc20 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    cc1c:	2201      	movs	r2, #1
    cc1e:	e000      	b.n	cc22 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    cc20:	2200      	movs	r2, #0
    cc22:	2301      	movs	r3, #1
    cc24:	7003      	strb	r3, [r0, #0]
    cc26:	b901      	cbnz	r1, cc2a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    cc28:	b662      	cpsie	i
    cc2a:	b10a      	cbz	r2, cc30 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    cc2c:	2000      	movs	r0, #0
    cc2e:	4770      	bx	lr
    cc30:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cc34:	4770      	bx	lr

0000cc36 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    cc36:	2100      	movs	r1, #0
    cc38:	7001      	strb	r1, [r0, #0]
    cc3a:	4608      	mov	r0, r1
    cc3c:	4770      	bx	lr

0000cc3e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    cc3e:	f3ef 8110 	mrs	r1, PRIMASK
    cc42:	b672      	cpsid	i
    cc44:	2200      	movs	r2, #0
    cc46:	7002      	strb	r2, [r0, #0]
    cc48:	b901      	cbnz	r1, cc4c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    cc4a:	b662      	cpsie	i
    cc4c:	2000      	movs	r0, #0
    cc4e:	4770      	bx	lr

0000cc50 <mpsl_low_priority_process>:
    cc50:	f7f7 bef8 	b.w	4a44 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000cc54 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    cc54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc58:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc5c:	280f      	cmp	r0, #15
    cc5e:	d001      	beq.n	cc64 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    cc60:	2000      	movs	r0, #0
    cc62:	4770      	bx	lr
    cc64:	2001      	movs	r0, #1
    cc66:	4770      	bx	lr

0000cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    cc68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc6c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc70:	280a      	cmp	r0, #10
    cc72:	d001      	beq.n	cc78 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    cc74:	2000      	movs	r0, #0
    cc76:	4770      	bx	lr
    cc78:	2001      	movs	r0, #1
    cc7a:	4770      	bx	lr

0000cc7c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    cc7c:	b500      	push	{lr}
    cc7e:	f7ff fff3 	bl	cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    cc82:	b120      	cbz	r0, cc8e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    cc84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc88:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cc8c:	b108      	cbz	r0, cc92 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    cc8e:	2000      	movs	r0, #0
    cc90:	bd00      	pop	{pc}
    cc92:	2001      	movs	r0, #1
    cc94:	bd00      	pop	{pc}

0000cc96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    cc96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cc9a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cc9e:	280e      	cmp	r0, #14
    cca0:	d001      	beq.n	cca6 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    cca2:	2000      	movs	r0, #0
    cca4:	4770      	bx	lr
    cca6:	2001      	movs	r0, #1
    cca8:	4770      	bx	lr

0000ccaa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    ccaa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ccb2:	2810      	cmp	r0, #16
    ccb4:	d001      	beq.n	ccba <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    ccb6:	2000      	movs	r0, #0
    ccb8:	4770      	bx	lr
    ccba:	2001      	movs	r0, #1
    ccbc:	4770      	bx	lr

0000ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    ccbe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ccc2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    ccc6:	2806      	cmp	r0, #6
    ccc8:	d003      	beq.n	ccd2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ccca:	1c40      	adds	r0, r0, #1
    cccc:	d001      	beq.n	ccd2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    ccce:	2000      	movs	r0, #0
    ccd0:	4770      	bx	lr
    ccd2:	2001      	movs	r0, #1
    ccd4:	4770      	bx	lr

0000ccd6 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    ccd6:	b500      	push	{lr}
    ccd8:	f7ff fff1 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ccdc:	b148      	cbz	r0, ccf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ccde:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cce2:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cce6:	2806      	cmp	r0, #6
    cce8:	d303      	bcc.n	ccf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ccea:	1c40      	adds	r0, r0, #1
    ccec:	d001      	beq.n	ccf2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    ccee:	2001      	movs	r0, #1
    ccf0:	bd00      	pop	{pc}
    ccf2:	2000      	movs	r0, #0
    ccf4:	bd00      	pop	{pc}

0000ccf6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    ccf6:	b500      	push	{lr}
    ccf8:	f7ff ffe1 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ccfc:	b138      	cbz	r0, cd0e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    ccfe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd02:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    cd06:	2806      	cmp	r0, #6
    cd08:	d303      	bcc.n	cd12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cd0a:	1c40      	adds	r0, r0, #1
    cd0c:	d001      	beq.n	cd12 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    cd0e:	2000      	movs	r0, #0
    cd10:	bd00      	pop	{pc}
    cd12:	2001      	movs	r0, #1
    cd14:	bd00      	pop	{pc}

0000cd16 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    cd16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd1a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cd1e:	280d      	cmp	r0, #13
    cd20:	d001      	beq.n	cd26 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    cd22:	2000      	movs	r0, #0
    cd24:	4770      	bx	lr
    cd26:	2001      	movs	r0, #1
    cd28:	4770      	bx	lr

0000cd2a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    cd2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    cd2e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    cd32:	2808      	cmp	r0, #8
    cd34:	d001      	beq.n	cd3a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    cd36:	2000      	movs	r0, #0
    cd38:	4770      	bx	lr
    cd3a:	2001      	movs	r0, #1
    cd3c:	4770      	bx	lr

0000cd3e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    cd3e:	2a00      	cmp	r2, #0
    cd40:	bf04      	itt	eq
    cd42:	2000      	moveq	r0, #0
    cd44:	4770      	bxeq	lr
    cd46:	1e52      	subs	r2, r2, #1
    cd48:	d007      	beq.n	cd5a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    cd4a:	7803      	ldrb	r3, [r0, #0]
    cd4c:	f891 c000 	ldrb.w	ip, [r1]
    cd50:	4563      	cmp	r3, ip
    cd52:	bf04      	itt	eq
    cd54:	1c40      	addeq	r0, r0, #1
    cd56:	1c49      	addeq	r1, r1, #1
    cd58:	d0f5      	beq.n	cd46 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    cd5a:	7800      	ldrb	r0, [r0, #0]
    cd5c:	7809      	ldrb	r1, [r1, #0]
    cd5e:	1a40      	subs	r0, r0, r1
    cd60:	4770      	bx	lr

0000cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    cd62:	b4f0      	push	{r4, r5, r6, r7}
    cd64:	ea80 0c01 	eor.w	ip, r0, r1
    cd68:	4603      	mov	r3, r0
    cd6a:	f01c 0f03 	tst.w	ip, #3
    cd6e:	d13c      	bne.n	cdea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cd70:	f013 0f03 	tst.w	r3, #3
    cd74:	d00b      	beq.n	cd8e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    cd76:	2a00      	cmp	r2, #0
    cd78:	bf04      	itt	eq
    cd7a:	bcf0      	popeq	{r4, r5, r6, r7}
    cd7c:	4770      	bxeq	lr
    cd7e:	f811 cb01 	ldrb.w	ip, [r1], #1
    cd82:	f803 cb01 	strb.w	ip, [r3], #1
    cd86:	1e52      	subs	r2, r2, #1
    cd88:	f013 0f03 	tst.w	r3, #3
    cd8c:	d1f3      	bne.n	cd76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    cd8e:	2a03      	cmp	r2, #3
    cd90:	d94f      	bls.n	ce32 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cd92:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cd96:	d24c      	bcs.n	ce32 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    cd98:	f1c2 0c00 	rsb	ip, r2, #0
    cd9c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    cda0:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    cda4:	ea4f 0cac 	mov.w	ip, ip, asr #2
    cda8:	f1cc 0c00 	rsb	ip, ip, #0
    cdac:	f1bc 0f00 	cmp.w	ip, #0
    cdb0:	dd1b      	ble.n	cdea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    cdb2:	1f0d      	subs	r5, r1, #4
    cdb4:	1f1c      	subs	r4, r3, #4
    cdb6:	f01c 0f01 	tst.w	ip, #1
    cdba:	d003      	beq.n	cdc4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    cdbc:	f855 6f04 	ldr.w	r6, [r5, #4]!
    cdc0:	f844 6f04 	str.w	r6, [r4, #4]!
    cdc4:	ea5f 066c 	movs.w	r6, ip, asr #1
    cdc8:	d007      	beq.n	cdda <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    cdca:	686f      	ldr	r7, [r5, #4]
    cdcc:	6067      	str	r7, [r4, #4]
    cdce:	f855 7f08 	ldr.w	r7, [r5, #8]!
    cdd2:	f844 7f08 	str.w	r7, [r4, #8]!
    cdd6:	1e76      	subs	r6, r6, #1
    cdd8:	d1f7      	bne.n	cdca <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    cdda:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    cdde:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    cde2:	f1cc 0c00 	rsb	ip, ip, #0
    cde6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    cdea:	2a00      	cmp	r2, #0
    cdec:	bf04      	itt	eq
    cdee:	bcf0      	popeq	{r4, r5, r6, r7}
    cdf0:	4770      	bxeq	lr
    cdf2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cdf6:	d226      	bcs.n	ce46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    cdf8:	2a00      	cmp	r2, #0
    cdfa:	bfdc      	itt	le
    cdfc:	bcf0      	pople	{r4, r5, r6, r7}
    cdfe:	4770      	bxle	lr
    ce00:	1e49      	subs	r1, r1, #1
    ce02:	1e5b      	subs	r3, r3, #1
    ce04:	f012 0f01 	tst.w	r2, #1
    ce08:	d003      	beq.n	ce12 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    ce0a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    ce0e:	f803 cf01 	strb.w	ip, [r3, #1]!
    ce12:	1052      	asrs	r2, r2, #1
    ce14:	bf04      	itt	eq
    ce16:	bcf0      	popeq	{r4, r5, r6, r7}
    ce18:	4770      	bxeq	lr
    ce1a:	f891 c001 	ldrb.w	ip, [r1, #1]
    ce1e:	f883 c001 	strb.w	ip, [r3, #1]
    ce22:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    ce26:	f803 cf02 	strb.w	ip, [r3, #2]!
    ce2a:	1e52      	subs	r2, r2, #1
    ce2c:	d1f5      	bne.n	ce1a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    ce2e:	bcf0      	pop	{r4, r5, r6, r7}
    ce30:	4770      	bx	lr
    ce32:	2a04      	cmp	r2, #4
    ce34:	d3d9      	bcc.n	cdea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ce36:	f851 cb04 	ldr.w	ip, [r1], #4
    ce3a:	1f12      	subs	r2, r2, #4
    ce3c:	f843 cb04 	str.w	ip, [r3], #4
    ce40:	2a04      	cmp	r2, #4
    ce42:	d2f8      	bcs.n	ce36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ce44:	e7d1      	b.n	cdea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ce46:	f811 cb01 	ldrb.w	ip, [r1], #1
    ce4a:	f803 cb01 	strb.w	ip, [r3], #1
    ce4e:	1e52      	subs	r2, r2, #1
    ce50:	d1f9      	bne.n	ce46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ce52:	bcf0      	pop	{r4, r5, r6, r7}
    ce54:	4770      	bx	lr

0000ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ce56:	b470      	push	{r4, r5, r6}
    ce58:	4603      	mov	r3, r0
    ce5a:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ce5e:	f010 0f03 	tst.w	r0, #3
    ce62:	d009      	beq.n	ce78 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ce64:	2a00      	cmp	r2, #0
    ce66:	bf04      	itt	eq
    ce68:	bc70      	popeq	{r4, r5, r6}
    ce6a:	4770      	bxeq	lr
    ce6c:	f803 cb01 	strb.w	ip, [r3], #1
    ce70:	1e52      	subs	r2, r2, #1
    ce72:	f013 0f03 	tst.w	r3, #3
    ce76:	d1f5      	bne.n	ce64 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ce78:	b2c9      	uxtb	r1, r1
    ce7a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ce7e:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ce82:	2a03      	cmp	r2, #3
    ce84:	d939      	bls.n	cefa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ce86:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ce8a:	d236      	bcs.n	cefa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ce8c:	4251      	negs	r1, r2
    ce8e:	17cc      	asrs	r4, r1, #31
    ce90:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ce94:	1089      	asrs	r1, r1, #2
    ce96:	424e      	negs	r6, r1
    ce98:	2e00      	cmp	r6, #0
    ce9a:	dd11      	ble.n	cec0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ce9c:	1f19      	subs	r1, r3, #4
    ce9e:	f016 0f01 	tst.w	r6, #1
    cea2:	bf18      	it	ne
    cea4:	f841 5f04 	strne.w	r5, [r1, #4]!
    cea8:	1074      	asrs	r4, r6, #1
    ceaa:	d004      	beq.n	ceb6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ceac:	604d      	str	r5, [r1, #4]
    ceae:	f841 5f08 	str.w	r5, [r1, #8]!
    ceb2:	1e64      	subs	r4, r4, #1
    ceb4:	d1fa      	bne.n	ceac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    ceb6:	4271      	negs	r1, r6
    ceb8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    cebc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    cec0:	2a00      	cmp	r2, #0
    cec2:	bf04      	itt	eq
    cec4:	bc70      	popeq	{r4, r5, r6}
    cec6:	4770      	bxeq	lr
    cec8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cecc:	d21d      	bcs.n	cf0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cece:	2a00      	cmp	r2, #0
    ced0:	bfdc      	itt	le
    ced2:	bc70      	pople	{r4, r5, r6}
    ced4:	4770      	bxle	lr
    ced6:	1e59      	subs	r1, r3, #1
    ced8:	f012 0f01 	tst.w	r2, #1
    cedc:	bf18      	it	ne
    cede:	f801 cf01 	strbne.w	ip, [r1, #1]!
    cee2:	1052      	asrs	r2, r2, #1
    cee4:	bf04      	itt	eq
    cee6:	bc70      	popeq	{r4, r5, r6}
    cee8:	4770      	bxeq	lr
    ceea:	f881 c001 	strb.w	ip, [r1, #1]
    ceee:	f801 cf02 	strb.w	ip, [r1, #2]!
    cef2:	1e52      	subs	r2, r2, #1
    cef4:	d1f9      	bne.n	ceea <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    cef6:	bc70      	pop	{r4, r5, r6}
    cef8:	4770      	bx	lr
    cefa:	2a04      	cmp	r2, #4
    cefc:	d3e0      	bcc.n	cec0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cefe:	1f12      	subs	r2, r2, #4
    cf00:	f843 5b04 	str.w	r5, [r3], #4
    cf04:	2a04      	cmp	r2, #4
    cf06:	d2fa      	bcs.n	cefe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    cf08:	e7da      	b.n	cec0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cf0a:	f803 cb01 	strb.w	ip, [r3], #1
    cf0e:	1e52      	subs	r2, r2, #1
    cf10:	d1fb      	bne.n	cf0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cf12:	bc70      	pop	{r4, r5, r6}
    cf14:	4770      	bx	lr
    cf16:	f04f 30ff 	mov.w	r0, #4294967295
    cf1a:	4770      	bx	lr
    cf1c:	2000      	movs	r0, #0
    cf1e:	4770      	bx	lr
    cf20:	2000      	movs	r0, #0
    cf22:	4770      	bx	lr
    cf24:	f04f 30ff 	mov.w	r0, #4294967295
    cf28:	4770      	bx	lr
    cf2a:	4770      	bx	lr
    cf2c:	4770      	bx	lr
    cf2e:	2000      	movs	r0, #0
    cf30:	4770      	bx	lr
    cf32:	f04f 30ff 	mov.w	r0, #4294967295
    cf36:	4770      	bx	lr
    cf38:	f04f 30ff 	mov.w	r0, #4294967295
    cf3c:	4770      	bx	lr
    cf3e:	2100      	movs	r1, #0
    cf40:	7001      	strb	r1, [r0, #0]
    cf42:	4770      	bx	lr
    cf44:	f04f 30ff 	mov.w	r0, #4294967295
    cf48:	4770      	bx	lr
    cf4a:	f04f 30ff 	mov.w	r0, #4294967295
    cf4e:	4770      	bx	lr
    cf50:	2800      	cmp	r0, #0
    cf52:	d001      	beq.n	cf58 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x102>
    cf54:	f06f 0015 	mvn.w	r0, #21
    cf58:	4770      	bx	lr
    cf5a:	2000      	movs	r0, #0
    cf5c:	4770      	bx	lr
    cf5e:	2200      	movs	r2, #0
    cf60:	f000 b80a 	b.w	cf78 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000cf64 <mpsl_fem_lna_is_configured>:
    cf64:	b510      	push	{r4, lr}
    cf66:	2100      	movs	r1, #0
    cf68:	4608      	mov	r0, r1
    cf6a:	f7f7 fe05 	bl	4b78 <mpsl_fem_lna_configuration_set>
    cf6e:	b108      	cbz	r0, cf74 <mpsl_fem_lna_is_configured+0x10>
    cf70:	2000      	movs	r0, #0
    cf72:	bd10      	pop	{r4, pc}
    cf74:	2001      	movs	r0, #1
    cf76:	bd10      	pop	{r4, pc}

0000cf78 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    cf78:	b530      	push	{r4, r5, lr}
    cf7a:	4603      	mov	r3, r0
    cf7c:	2000      	movs	r0, #0
    cf7e:	1a9b      	subs	r3, r3, r2
    cf80:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cf84:	f06f 0415 	mvn.w	r4, #21
    cf88:	42ab      	cmp	r3, r5
    cf8a:	da02      	bge.n	cf92 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    cf8c:	4620      	mov	r0, r4
    cf8e:	462b      	mov	r3, r5
    cf90:	e003      	b.n	cf9a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    cf92:	2b7f      	cmp	r3, #127	; 0x7f
    cf94:	dd01      	ble.n	cf9a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x22>
    cf96:	4620      	mov	r0, r4
    cf98:	237f      	movs	r3, #127	; 0x7f
    cf9a:	700b      	strb	r3, [r1, #0]
    cf9c:	704a      	strb	r2, [r1, #1]
    cf9e:	bd30      	pop	{r4, r5, pc}
    cfa0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cfa4:	4605      	mov	r5, r0
    cfa6:	f100 0003 	add.w	r0, r0, #3
    cfaa:	f020 0003 	bic.w	r0, r0, #3
    cfae:	460c      	mov	r4, r1
    cfb0:	9000      	str	r0, [sp, #0]
    cfb2:	7849      	ldrb	r1, [r1, #1]
    cfb4:	f88d 1004 	strb.w	r1, [sp, #4]
    cfb8:	78a1      	ldrb	r1, [r4, #2]
    cfba:	0016      	movs	r6, r2
    cfbc:	f88d 1005 	strb.w	r1, [sp, #5]
    cfc0:	d000      	beq.n	cfc4 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x4c>
    cfc2:	2000      	movs	r0, #0
    cfc4:	a901      	add	r1, sp, #4
    cfc6:	f7f8 f8fd 	bl	51c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cfca:	9900      	ldr	r1, [sp, #0]
    cfcc:	4408      	add	r0, r1
    cfce:	9000      	str	r0, [sp, #0]
    cfd0:	78a1      	ldrb	r1, [r4, #2]
    cfd2:	b141      	cbz	r1, cfe6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x6e>
    cfd4:	8a63      	ldrh	r3, [r4, #18]
    cfd6:	78e2      	ldrb	r2, [r4, #3]
    cfd8:	b106      	cbz	r6, cfdc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x64>
    cfda:	2000      	movs	r0, #0
    cfdc:	f7f8 fb82 	bl	56e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cfe0:	9900      	ldr	r1, [sp, #0]
    cfe2:	4408      	add	r0, r1
    cfe4:	9000      	str	r0, [sp, #0]
    cfe6:	4632      	mov	r2, r6
    cfe8:	4621      	mov	r1, r4
    cfea:	4668      	mov	r0, sp
    cfec:	f000 f808 	bl	d000 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x88>
    cff0:	9800      	ldr	r0, [sp, #0]
    cff2:	1dc0      	adds	r0, r0, #7
    cff4:	f020 0007 	bic.w	r0, r0, #7
    cff8:	9000      	str	r0, [sp, #0]
    cffa:	1b40      	subs	r0, r0, r5
    cffc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d004:	4606      	mov	r6, r0
    d006:	460c      	mov	r4, r1
    d008:	7808      	ldrb	r0, [r1, #0]
    d00a:	7849      	ldrb	r1, [r1, #1]
    d00c:	2700      	movs	r7, #0
    d00e:	4408      	add	r0, r1
    d010:	4691      	mov	r9, r2
    d012:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d016:	463d      	mov	r5, r7
    d018:	e00e      	b.n	d038 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xc0>
    d01a:	7a23      	ldrb	r3, [r4, #8]
    d01c:	2b02      	cmp	r3, #2
    d01e:	d200      	bcs.n	d022 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xaa>
    d020:	2302      	movs	r3, #2
    d022:	79e2      	ldrb	r2, [r4, #7]
    d024:	2a03      	cmp	r2, #3
    d026:	d200      	bcs.n	d02a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xb2>
    d028:	2203      	movs	r2, #3
    d02a:	79a1      	ldrb	r1, [r4, #6]
    d02c:	7960      	ldrb	r0, [r4, #5]
    d02e:	f000 fee3 	bl	ddf8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d032:	1c6d      	adds	r5, r5, #1
    d034:	4407      	add	r7, r0
    d036:	b2ed      	uxtb	r5, r5
    d038:	4545      	cmp	r5, r8
    d03a:	d3ee      	bcc.n	d01a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xa2>
    d03c:	6830      	ldr	r0, [r6, #0]
    d03e:	1cc0      	adds	r0, r0, #3
    d040:	f020 0003 	bic.w	r0, r0, #3
    d044:	6030      	str	r0, [r6, #0]
    d046:	f1b9 0f00 	cmp.w	r9, #0
    d04a:	d000      	beq.n	d04e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0xd6>
    d04c:	2000      	movs	r0, #0
    d04e:	463a      	mov	r2, r7
    d050:	4641      	mov	r1, r8
    d052:	f7f8 fa91 	bl	5578 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d056:	6831      	ldr	r1, [r6, #0]
    d058:	4408      	add	r0, r1
    d05a:	6030      	str	r0, [r6, #0]
    d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d060 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d060:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d062:	4604      	mov	r4, r0
    d064:	1d01      	adds	r1, r0, #4
    d066:	4668      	mov	r0, sp
    d068:	f7f9 ff06 	bl	6e78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d06c:	2800      	cmp	r0, #0
    d06e:	d004      	beq.n	d07a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d070:	4669      	mov	r1, sp
    d072:	4620      	mov	r0, r4
    d074:	f000 f848 	bl	d108 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d078:	2001      	movs	r0, #1
    d07a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d07c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d07c:	b50e      	push	{r1, r2, r3, lr}
    d07e:	4601      	mov	r1, r0
    d080:	4668      	mov	r0, sp
    d082:	f000 f827 	bl	d0d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d086:	4668      	mov	r0, sp
    d088:	f001 fcc2 	bl	ea10 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d08c:	bd0e      	pop	{r1, r2, r3, pc}

0000d08e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d08e:	b510      	push	{r4, lr}
    d090:	4604      	mov	r4, r0
    d092:	4620      	mov	r0, r4
    d094:	f7f7 ff84 	bl	4fa0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d098:	2800      	cmp	r0, #0
    d09a:	d006      	beq.n	d0aa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d09c:	78a1      	ldrb	r1, [r4, #2]
    d09e:	7820      	ldrb	r0, [r4, #0]
    d0a0:	f000 f804 	bl	d0ac <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d0a4:	2800      	cmp	r0, #0
    d0a6:	d0f4      	beq.n	d092 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d0a8:	2001      	movs	r0, #1
    d0aa:	bd10      	pop	{r4, pc}
    d0ac:	b570      	push	{r4, r5, r6, lr}
    d0ae:	460c      	mov	r4, r1
    d0b0:	4605      	mov	r5, r0
    d0b2:	f7f7 ffe7 	bl	5084 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d002      	beq.n	d0c0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d0ba:	2d3e      	cmp	r5, #62	; 0x3e
    d0bc:	d001      	beq.n	d0c2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d0be:	2001      	movs	r0, #1
    d0c0:	bd70      	pop	{r4, r5, r6, pc}
    d0c2:	2c12      	cmp	r4, #18
    d0c4:	d004      	beq.n	d0d0 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d0c6:	4620      	mov	r0, r4
    d0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d0cc:	f7f7 bff6 	b.w	50bc <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d0d0:	2000      	movs	r0, #0
    d0d2:	bd70      	pop	{r4, r5, r6, pc}

0000d0d4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d0d4:	880a      	ldrh	r2, [r1, #0]
    d0d6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d0da:	8002      	strh	r2, [r0, #0]
    d0dc:	884a      	ldrh	r2, [r1, #2]
    d0de:	8042      	strh	r2, [r0, #2]
    d0e0:	784a      	ldrb	r2, [r1, #1]
    d0e2:	0993      	lsrs	r3, r2, #6
    d0e4:	2200      	movs	r2, #0
    d0e6:	7142      	strb	r2, [r0, #5]
    d0e8:	784b      	ldrb	r3, [r1, #1]
    d0ea:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d0ee:	b11b      	cbz	r3, d0f8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d0f0:	2b01      	cmp	r3, #1
    d0f2:	d005      	beq.n	d100 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d0f4:	2b02      	cmp	r3, #2
    d0f6:	d005      	beq.n	d104 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d0f8:	7102      	strb	r2, [r0, #4]
    d0fa:	1d09      	adds	r1, r1, #4
    d0fc:	6081      	str	r1, [r0, #8]
    d0fe:	4770      	bx	lr
    d100:	2201      	movs	r2, #1
    d102:	e7f9      	b.n	d0f8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d104:	2202      	movs	r2, #2
    d106:	e7f7      	b.n	d0f8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d108 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d108:	b510      	push	{r4, lr}
    d10a:	460c      	mov	r4, r1
    d10c:	7809      	ldrb	r1, [r1, #0]
    d10e:	7001      	strb	r1, [r0, #0]
    d110:	7841      	ldrb	r1, [r0, #1]
    d112:	f021 010f 	bic.w	r1, r1, #15
    d116:	7041      	strb	r1, [r0, #1]
    d118:	8822      	ldrh	r2, [r4, #0]
    d11a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d11e:	4311      	orrs	r1, r2
    d120:	7041      	strb	r1, [r0, #1]
    d122:	78a2      	ldrb	r2, [r4, #2]
    d124:	7082      	strb	r2, [r0, #2]
    d126:	8862      	ldrh	r2, [r4, #2]
    d128:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d12c:	0a12      	lsrs	r2, r2, #8
    d12e:	70c2      	strb	r2, [r0, #3]
    d130:	7041      	strb	r1, [r0, #1]
    d132:	7922      	ldrb	r2, [r4, #4]
    d134:	f002 0203 	and.w	r2, r2, #3
    d138:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d13c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d140:	7041      	strb	r1, [r0, #1]
    d142:	7962      	ldrb	r2, [r4, #5]
    d144:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d148:	7041      	strb	r1, [r0, #1]
    d14a:	68a1      	ldr	r1, [r4, #8]
    d14c:	1d02      	adds	r2, r0, #4
    d14e:	4291      	cmp	r1, r2
    d150:	d006      	beq.n	d160 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d152:	8862      	ldrh	r2, [r4, #2]
    d154:	2afb      	cmp	r2, #251	; 0xfb
    d156:	d300      	bcc.n	d15a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d158:	22fb      	movs	r2, #251	; 0xfb
    d15a:	1d00      	adds	r0, r0, #4
    d15c:	f7ff fe01 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d160:	78a0      	ldrb	r0, [r4, #2]
    d162:	1d00      	adds	r0, r0, #4
    d164:	b2c0      	uxtb	r0, r0
    d166:	bd10      	pop	{r4, pc}

0000d168 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d16c:	4604      	mov	r4, r0
    d16e:	780f      	ldrb	r7, [r1, #0]
    d170:	2000      	movs	r0, #0
    d172:	250c      	movs	r5, #12
    d174:	2605      	movs	r6, #5
    d176:	223e      	movs	r2, #62	; 0x3e
    d178:	23ff      	movs	r3, #255	; 0xff
    d17a:	2f1b      	cmp	r7, #27
    d17c:	d27d      	bcs.n	d27a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    d17e:	e8df f007 	tbb	[pc, r7]
    d182:	0ee9      	.short	0x0ee9
    d184:	632d2725 	.word	0x632d2725
    d188:	ae9b816d 	.word	0xae9b816d
    d18c:	e1c6bbb0 	.word	0xe1c6bbb0
    d190:	31e9e9f3 	.word	0x31e9e9f3
    d194:	f0fcd4d1 	.word	0xf0fcd4d1
    d198:	ecedeeef 	.word	0xecedeeef
    d19c:	00eb      	.short	0x00eb
    d19e:	7025      	strb	r5, [r4, #0]
    d1a0:	7908      	ldrb	r0, [r1, #4]
    d1a2:	70a0      	strb	r0, [r4, #2]
    d1a4:	7948      	ldrb	r0, [r1, #5]
    d1a6:	70e0      	strb	r0, [r4, #3]
    d1a8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d1ac:	0a00      	lsrs	r0, r0, #8
    d1ae:	7120      	strb	r0, [r4, #4]
    d1b0:	79c8      	ldrb	r0, [r1, #7]
    d1b2:	7160      	strb	r0, [r4, #5]
    d1b4:	7a08      	ldrb	r0, [r1, #8]
    d1b6:	71a0      	strb	r0, [r4, #6]
    d1b8:	8908      	ldrh	r0, [r1, #8]
    d1ba:	0a00      	lsrs	r0, r0, #8
    d1bc:	71e0      	strb	r0, [r4, #7]
    d1be:	7a88      	ldrb	r0, [r1, #10]
    d1c0:	7220      	strb	r0, [r4, #8]
    d1c2:	8948      	ldrh	r0, [r1, #10]
    d1c4:	0a00      	lsrs	r0, r0, #8
    d1c6:	7260      	strb	r0, [r4, #9]
    d1c8:	2008      	movs	r0, #8
    d1ca:	e0c1      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d1cc:	2010      	movs	r0, #16
    d1ce:	e000      	b.n	d1d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    d1d0:	201a      	movs	r0, #26
    d1d2:	7020      	strb	r0, [r4, #0]
    d1d4:	7908      	ldrb	r0, [r1, #4]
    d1d6:	70a0      	strb	r0, [r4, #2]
    d1d8:	2001      	movs	r0, #1
    d1da:	e0b9      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d1dc:	4620      	mov	r0, r4
    d1de:	f000 f948 	bl	d472 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d1e2:	e0b3      	b.n	d34c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e4>
    d1e4:	7022      	strb	r2, [r4, #0]
    d1e6:	200a      	movs	r0, #10
    d1e8:	70a0      	strb	r0, [r4, #2]
    d1ea:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d1ee:	70e0      	strb	r0, [r4, #3]
    d1f0:	7888      	ldrb	r0, [r1, #2]
    d1f2:	7120      	strb	r0, [r4, #4]
    d1f4:	8848      	ldrh	r0, [r1, #2]
    d1f6:	0a00      	lsrs	r0, r0, #8
    d1f8:	7160      	strb	r0, [r4, #5]
    d1fa:	7908      	ldrb	r0, [r1, #4]
    d1fc:	71a0      	strb	r0, [r4, #6]
    d1fe:	7948      	ldrb	r0, [r1, #5]
    d200:	71e0      	strb	r0, [r4, #7]
    d202:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d206:	60a0      	str	r0, [r4, #8]
    d208:	8948      	ldrh	r0, [r1, #10]
    d20a:	81a0      	strh	r0, [r4, #12]
    d20c:	68c8      	ldr	r0, [r1, #12]
    d20e:	f8c4 000e 	str.w	r0, [r4, #14]
    d212:	8a08      	ldrh	r0, [r1, #16]
    d214:	8260      	strh	r0, [r4, #18]
    d216:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d21a:	6160      	str	r0, [r4, #20]
    d21c:	8ac8      	ldrh	r0, [r1, #22]
    d21e:	8320      	strh	r0, [r4, #24]
    d220:	7e08      	ldrb	r0, [r1, #24]
    d222:	76a0      	strb	r0, [r4, #26]
    d224:	8b08      	ldrh	r0, [r1, #24]
    d226:	0a00      	lsrs	r0, r0, #8
    d228:	76e0      	strb	r0, [r4, #27]
    d22a:	7e88      	ldrb	r0, [r1, #26]
    d22c:	7720      	strb	r0, [r4, #28]
    d22e:	8b48      	ldrh	r0, [r1, #26]
    d230:	0a00      	lsrs	r0, r0, #8
    d232:	7760      	strb	r0, [r4, #29]
    d234:	7f08      	ldrb	r0, [r1, #28]
    d236:	77a0      	strb	r0, [r4, #30]
    d238:	8b88      	ldrh	r0, [r1, #28]
    d23a:	0a00      	lsrs	r0, r0, #8
    d23c:	77e0      	strb	r0, [r4, #31]
    d23e:	7f88      	ldrb	r0, [r1, #30]
    d240:	f884 0020 	strb.w	r0, [r4, #32]
    d244:	201f      	movs	r0, #31
    d246:	e083      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d248:	7022      	strb	r2, [r4, #0]
    d24a:	2014      	movs	r0, #20
    d24c:	70a0      	strb	r0, [r4, #2]
    d24e:	7908      	ldrb	r0, [r1, #4]
    d250:	70e0      	strb	r0, [r4, #3]
    d252:	8888      	ldrh	r0, [r1, #4]
    d254:	0a00      	lsrs	r0, r0, #8
    d256:	7120      	strb	r0, [r4, #4]
    d258:	7988      	ldrb	r0, [r1, #6]
    d25a:	e0a6      	b.n	d3aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d25c:	7022      	strb	r2, [r4, #0]
    d25e:	2004      	movs	r0, #4
    d260:	70a0      	strb	r0, [r4, #2]
    d262:	7908      	ldrb	r0, [r1, #4]
    d264:	70e0      	strb	r0, [r4, #3]
    d266:	7988      	ldrb	r0, [r1, #6]
    d268:	7120      	strb	r0, [r4, #4]
    d26a:	88c8      	ldrh	r0, [r1, #6]
    d26c:	0a00      	lsrs	r0, r0, #8
    d26e:	7160      	strb	r0, [r4, #5]
    d270:	6888      	ldr	r0, [r1, #8]
    d272:	f8c4 0006 	str.w	r0, [r4, #6]
    d276:	68c8      	ldr	r0, [r1, #12]
    d278:	e000      	b.n	d27c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d27a:	e06b      	b.n	d354 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d27c:	f8c4 000a 	str.w	r0, [r4, #10]
    d280:	200c      	movs	r0, #12
    d282:	e065      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d284:	7022      	strb	r2, [r4, #0]
    d286:	2003      	movs	r0, #3
    d288:	70a0      	strb	r0, [r4, #2]
    d28a:	7908      	ldrb	r0, [r1, #4]
    d28c:	70e0      	strb	r0, [r4, #3]
    d28e:	7988      	ldrb	r0, [r1, #6]
    d290:	7120      	strb	r0, [r4, #4]
    d292:	88c8      	ldrh	r0, [r1, #6]
    d294:	0a00      	lsrs	r0, r0, #8
    d296:	7160      	strb	r0, [r4, #5]
    d298:	7a08      	ldrb	r0, [r1, #8]
    d29a:	71a0      	strb	r0, [r4, #6]
    d29c:	8908      	ldrh	r0, [r1, #8]
    d29e:	0a00      	lsrs	r0, r0, #8
    d2a0:	71e0      	strb	r0, [r4, #7]
    d2a2:	7a88      	ldrb	r0, [r1, #10]
    d2a4:	7220      	strb	r0, [r4, #8]
    d2a6:	8948      	ldrh	r0, [r1, #10]
    d2a8:	0a00      	lsrs	r0, r0, #8
    d2aa:	7260      	strb	r0, [r4, #9]
    d2ac:	7b08      	ldrb	r0, [r1, #12]
    d2ae:	72a0      	strb	r0, [r4, #10]
    d2b0:	8988      	ldrh	r0, [r1, #12]
    d2b2:	0a00      	lsrs	r0, r0, #8
    d2b4:	72e0      	strb	r0, [r4, #11]
    d2b6:	e0b5      	b.n	d424 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    d2b8:	7022      	strb	r2, [r4, #0]
    d2ba:	70a6      	strb	r6, [r4, #2]
    d2bc:	7908      	ldrb	r0, [r1, #4]
    d2be:	70e0      	strb	r0, [r4, #3]
    d2c0:	8888      	ldrh	r0, [r1, #4]
    d2c2:	0a00      	lsrs	r0, r0, #8
    d2c4:	7120      	strb	r0, [r4, #4]
    d2c6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d2ca:	f8c4 0005 	str.w	r0, [r4, #5]
    d2ce:	f8d1 000a 	ldr.w	r0, [r1, #10]
    d2d2:	f8c4 0009 	str.w	r0, [r4, #9]
    d2d6:	89c8      	ldrh	r0, [r1, #14]
    d2d8:	f8a4 000d 	strh.w	r0, [r4, #13]
    d2dc:	e0c7      	b.n	d46e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    d2de:	2011      	movs	r0, #17
    d2e0:	e043      	b.n	d36a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    d2e2:	7026      	strb	r6, [r4, #0]
    d2e4:	7908      	ldrb	r0, [r1, #4]
    d2e6:	70a0      	strb	r0, [r4, #2]
    d2e8:	7948      	ldrb	r0, [r1, #5]
    d2ea:	70e0      	strb	r0, [r4, #3]
    d2ec:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d2f0:	0a00      	lsrs	r0, r0, #8
    d2f2:	7120      	strb	r0, [r4, #4]
    d2f4:	79c8      	ldrb	r0, [r1, #7]
    d2f6:	e058      	b.n	d3aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d2f8:	2008      	movs	r0, #8
    d2fa:	7020      	strb	r0, [r4, #0]
    d2fc:	7908      	ldrb	r0, [r1, #4]
    d2fe:	70a0      	strb	r0, [r4, #2]
    d300:	7988      	ldrb	r0, [r1, #6]
    d302:	70e0      	strb	r0, [r4, #3]
    d304:	88c8      	ldrh	r0, [r1, #6]
    d306:	0a00      	lsrs	r0, r0, #8
    d308:	7120      	strb	r0, [r4, #4]
    d30a:	7a08      	ldrb	r0, [r1, #8]
    d30c:	e04d      	b.n	d3aa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    d30e:	2030      	movs	r0, #48	; 0x30
    d310:	7020      	strb	r0, [r4, #0]
    d312:	7908      	ldrb	r0, [r1, #4]
    d314:	70a0      	strb	r0, [r4, #2]
    d316:	7988      	ldrb	r0, [r1, #6]
    d318:	70e0      	strb	r0, [r4, #3]
    d31a:	88c8      	ldrh	r0, [r1, #6]
    d31c:	0a00      	lsrs	r0, r0, #8
    d31e:	7120      	strb	r0, [r4, #4]
    d320:	2003      	movs	r0, #3
    d322:	e015      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d324:	7022      	strb	r2, [r4, #0]
    d326:	2007      	movs	r0, #7
    d328:	e044      	b.n	d3b4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    d32a:	7022      	strb	r2, [r4, #0]
    d32c:	70a5      	strb	r5, [r4, #2]
    d32e:	7908      	ldrb	r0, [r1, #4]
    d330:	70e0      	strb	r0, [r4, #3]
    d332:	7988      	ldrb	r0, [r1, #6]
    d334:	7120      	strb	r0, [r4, #4]
    d336:	88c8      	ldrh	r0, [r1, #6]
    d338:	0a00      	lsrs	r0, r0, #8
    d33a:	7160      	strb	r0, [r4, #5]
    d33c:	7a08      	ldrb	r0, [r1, #8]
    d33e:	71a0      	strb	r0, [r4, #6]
    d340:	7a48      	ldrb	r0, [r1, #9]
    d342:	e027      	b.n	d394 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    d344:	4620      	mov	r0, r4
    d346:	1d09      	adds	r1, r1, #4
    d348:	f7f7 fe6e 	bl	5028 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    d34c:	2800      	cmp	r0, #0
    d34e:	d001      	beq.n	d354 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d350:	7060      	strb	r0, [r4, #1]
    d352:	1c80      	adds	r0, r0, #2
    d354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d358:	e074      	b.n	d444 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    d35a:	e047      	b.n	d3ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d35c:	e028      	b.n	d3b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d35e:	e053      	b.n	d408 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    d360:	e062      	b.n	d428 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    d362:	e01a      	b.n	d39a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    d364:	e009      	b.n	d37a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x212>
    d366:	e7ff      	b.n	d368 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x200>
    d368:	2057      	movs	r0, #87	; 0x57
    d36a:	7020      	strb	r0, [r4, #0]
    d36c:	7908      	ldrb	r0, [r1, #4]
    d36e:	70a0      	strb	r0, [r4, #2]
    d370:	8888      	ldrh	r0, [r1, #4]
    d372:	0a00      	lsrs	r0, r0, #8
    d374:	70e0      	strb	r0, [r4, #3]
    d376:	2002      	movs	r0, #2
    d378:	e7ea      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d37a:	7022      	strb	r2, [r4, #0]
    d37c:	2012      	movs	r0, #18
    d37e:	70a0      	strb	r0, [r4, #2]
    d380:	7908      	ldrb	r0, [r1, #4]
    d382:	70e0      	strb	r0, [r4, #3]
    d384:	7948      	ldrb	r0, [r1, #5]
    d386:	7120      	strb	r0, [r4, #4]
    d388:	7988      	ldrb	r0, [r1, #6]
    d38a:	7160      	strb	r0, [r4, #5]
    d38c:	88c8      	ldrh	r0, [r1, #6]
    d38e:	0a00      	lsrs	r0, r0, #8
    d390:	71a0      	strb	r0, [r4, #6]
    d392:	7a08      	ldrb	r0, [r1, #8]
    d394:	71e0      	strb	r0, [r4, #7]
    d396:	2006      	movs	r0, #6
    d398:	e7da      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d39a:	7023      	strb	r3, [r4, #0]
    d39c:	20a1      	movs	r0, #161	; 0xa1
    d39e:	70a0      	strb	r0, [r4, #2]
    d3a0:	7908      	ldrb	r0, [r1, #4]
    d3a2:	70e0      	strb	r0, [r4, #3]
    d3a4:	7948      	ldrb	r0, [r1, #5]
    d3a6:	7120      	strb	r0, [r4, #4]
    d3a8:	2000      	movs	r0, #0
    d3aa:	7160      	strb	r0, [r4, #5]
    d3ac:	2004      	movs	r0, #4
    d3ae:	e7cf      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d3b0:	7023      	strb	r3, [r4, #0]
    d3b2:	20a2      	movs	r0, #162	; 0xa2
    d3b4:	70a0      	strb	r0, [r4, #2]
    d3b6:	7908      	ldrb	r0, [r1, #4]
    d3b8:	70e0      	strb	r0, [r4, #3]
    d3ba:	8888      	ldrh	r0, [r1, #4]
    d3bc:	0a00      	lsrs	r0, r0, #8
    d3be:	7120      	strb	r0, [r4, #4]
    d3c0:	7988      	ldrb	r0, [r1, #6]
    d3c2:	7160      	strb	r0, [r4, #5]
    d3c4:	88c8      	ldrh	r0, [r1, #6]
    d3c6:	0a00      	lsrs	r0, r0, #8
    d3c8:	71a0      	strb	r0, [r4, #6]
    d3ca:	7a08      	ldrb	r0, [r1, #8]
    d3cc:	71e0      	strb	r0, [r4, #7]
    d3ce:	8908      	ldrh	r0, [r1, #8]
    d3d0:	0a00      	lsrs	r0, r0, #8
    d3d2:	7220      	strb	r0, [r4, #8]
    d3d4:	7a88      	ldrb	r0, [r1, #10]
    d3d6:	7260      	strb	r0, [r4, #9]
    d3d8:	8948      	ldrh	r0, [r1, #10]
    d3da:	0a00      	lsrs	r0, r0, #8
    d3dc:	72a0      	strb	r0, [r4, #10]
    d3de:	7b08      	ldrb	r0, [r1, #12]
    d3e0:	72e0      	strb	r0, [r4, #11]
    d3e2:	8988      	ldrh	r0, [r1, #12]
    d3e4:	0a00      	lsrs	r0, r0, #8
    d3e6:	7320      	strb	r0, [r4, #12]
    d3e8:	200b      	movs	r0, #11
    d3ea:	e7b1      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d3ec:	7023      	strb	r3, [r4, #0]
    d3ee:	20a3      	movs	r0, #163	; 0xa3
    d3f0:	70a0      	strb	r0, [r4, #2]
    d3f2:	7908      	ldrb	r0, [r1, #4]
    d3f4:	70e0      	strb	r0, [r4, #3]
    d3f6:	8888      	ldrh	r0, [r1, #4]
    d3f8:	0a00      	lsrs	r0, r0, #8
    d3fa:	7120      	strb	r0, [r4, #4]
    d3fc:	7988      	ldrb	r0, [r1, #6]
    d3fe:	7160      	strb	r0, [r4, #5]
    d400:	79c8      	ldrb	r0, [r1, #7]
    d402:	71a0      	strb	r0, [r4, #6]
    d404:	2005      	movs	r0, #5
    d406:	e7a3      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d408:	7022      	strb	r2, [r4, #0]
    d40a:	2013      	movs	r0, #19
    d40c:	70a0      	strb	r0, [r4, #2]
    d40e:	7908      	ldrb	r0, [r1, #4]
    d410:	70e0      	strb	r0, [r4, #3]
    d412:	7948      	ldrb	r0, [r1, #5]
    d414:	7120      	strb	r0, [r4, #4]
    d416:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d41a:	f8c4 0005 	str.w	r0, [r4, #5]
    d41e:	8948      	ldrh	r0, [r1, #10]
    d420:	f8a4 0009 	strh.w	r0, [r4, #9]
    d424:	200a      	movs	r0, #10
    d426:	e793      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d428:	7023      	strb	r3, [r4, #0]
    d42a:	20a4      	movs	r0, #164	; 0xa4
    d42c:	70a0      	strb	r0, [r4, #2]
    d42e:	7908      	ldrb	r0, [r1, #4]
    d430:	70e0      	strb	r0, [r4, #3]
    d432:	8888      	ldrh	r0, [r1, #4]
    d434:	0a00      	lsrs	r0, r0, #8
    d436:	7120      	strb	r0, [r4, #4]
    d438:	7988      	ldrb	r0, [r1, #6]
    d43a:	7160      	strb	r0, [r4, #5]
    d43c:	79c8      	ldrb	r0, [r1, #7]
    d43e:	71a0      	strb	r0, [r4, #6]
    d440:	2007      	movs	r0, #7
    d442:	e785      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    d444:	7023      	strb	r3, [r4, #0]
    d446:	2080      	movs	r0, #128	; 0x80
    d448:	70a0      	strb	r0, [r4, #2]
    d44a:	888a      	ldrh	r2, [r1, #4]
    d44c:	f8a4 2003 	strh.w	r2, [r4, #3]
    d450:	88ca      	ldrh	r2, [r1, #6]
    d452:	f8a4 2005 	strh.w	r2, [r4, #5]
    d456:	7a0a      	ldrb	r2, [r1, #8]
    d458:	71e2      	strb	r2, [r4, #7]
    d45a:	894a      	ldrh	r2, [r1, #10]
    d45c:	8122      	strh	r2, [r4, #8]
    d45e:	898a      	ldrh	r2, [r1, #12]
    d460:	8162      	strh	r2, [r4, #10]
    d462:	89ca      	ldrh	r2, [r1, #14]
    d464:	81a2      	strh	r2, [r4, #12]
    d466:	7c09      	ldrb	r1, [r1, #16]
    d468:	f001 0101 	and.w	r1, r1, #1
    d46c:	73a1      	strb	r1, [r4, #14]
    d46e:	200d      	movs	r0, #13
    d470:	e76e      	b.n	d350 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>

0000d472 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d472:	223e      	movs	r2, #62	; 0x3e
    d474:	7002      	strb	r2, [r0, #0]
    d476:	2201      	movs	r2, #1
    d478:	7082      	strb	r2, [r0, #2]
    d47a:	790a      	ldrb	r2, [r1, #4]
    d47c:	70c2      	strb	r2, [r0, #3]
    d47e:	798a      	ldrb	r2, [r1, #6]
    d480:	7102      	strb	r2, [r0, #4]
    d482:	88ca      	ldrh	r2, [r1, #6]
    d484:	0a12      	lsrs	r2, r2, #8
    d486:	7142      	strb	r2, [r0, #5]
    d488:	7a0a      	ldrb	r2, [r1, #8]
    d48a:	7182      	strb	r2, [r0, #6]
    d48c:	7a4a      	ldrb	r2, [r1, #9]
    d48e:	71c2      	strb	r2, [r0, #7]
    d490:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d494:	6082      	str	r2, [r0, #8]
    d496:	89ca      	ldrh	r2, [r1, #14]
    d498:	8182      	strh	r2, [r0, #12]
    d49a:	7c0a      	ldrb	r2, [r1, #16]
    d49c:	7382      	strb	r2, [r0, #14]
    d49e:	8a0a      	ldrh	r2, [r1, #16]
    d4a0:	0a12      	lsrs	r2, r2, #8
    d4a2:	73c2      	strb	r2, [r0, #15]
    d4a4:	7c8a      	ldrb	r2, [r1, #18]
    d4a6:	7402      	strb	r2, [r0, #16]
    d4a8:	8a4a      	ldrh	r2, [r1, #18]
    d4aa:	0a12      	lsrs	r2, r2, #8
    d4ac:	7442      	strb	r2, [r0, #17]
    d4ae:	7d0a      	ldrb	r2, [r1, #20]
    d4b0:	7482      	strb	r2, [r0, #18]
    d4b2:	8a8a      	ldrh	r2, [r1, #20]
    d4b4:	0a12      	lsrs	r2, r2, #8
    d4b6:	74c2      	strb	r2, [r0, #19]
    d4b8:	7d89      	ldrb	r1, [r1, #22]
    d4ba:	7501      	strb	r1, [r0, #20]
    d4bc:	2013      	movs	r0, #19
    d4be:	4770      	bx	lr

0000d4c0 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d4c0:	223e      	movs	r2, #62	; 0x3e
    d4c2:	7002      	strb	r2, [r0, #0]
    d4c4:	2201      	movs	r2, #1
    d4c6:	7082      	strb	r2, [r0, #2]
    d4c8:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d4cc:	70c2      	strb	r2, [r0, #3]
    d4ce:	788a      	ldrb	r2, [r1, #2]
    d4d0:	7102      	strb	r2, [r0, #4]
    d4d2:	884a      	ldrh	r2, [r1, #2]
    d4d4:	0a12      	lsrs	r2, r2, #8
    d4d6:	7142      	strb	r2, [r0, #5]
    d4d8:	790a      	ldrb	r2, [r1, #4]
    d4da:	7182      	strb	r2, [r0, #6]
    d4dc:	794a      	ldrb	r2, [r1, #5]
    d4de:	71c2      	strb	r2, [r0, #7]
    d4e0:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d4e4:	6082      	str	r2, [r0, #8]
    d4e6:	894a      	ldrh	r2, [r1, #10]
    d4e8:	8182      	strh	r2, [r0, #12]
    d4ea:	7e0a      	ldrb	r2, [r1, #24]
    d4ec:	7382      	strb	r2, [r0, #14]
    d4ee:	8b0a      	ldrh	r2, [r1, #24]
    d4f0:	0a12      	lsrs	r2, r2, #8
    d4f2:	73c2      	strb	r2, [r0, #15]
    d4f4:	7e8a      	ldrb	r2, [r1, #26]
    d4f6:	7402      	strb	r2, [r0, #16]
    d4f8:	8b4a      	ldrh	r2, [r1, #26]
    d4fa:	0a12      	lsrs	r2, r2, #8
    d4fc:	7442      	strb	r2, [r0, #17]
    d4fe:	7f0a      	ldrb	r2, [r1, #28]
    d500:	7482      	strb	r2, [r0, #18]
    d502:	8b8a      	ldrh	r2, [r1, #28]
    d504:	0a12      	lsrs	r2, r2, #8
    d506:	74c2      	strb	r2, [r0, #19]
    d508:	7f89      	ldrb	r1, [r1, #30]
    d50a:	7501      	strb	r1, [r0, #20]
    d50c:	2113      	movs	r1, #19
    d50e:	7041      	strb	r1, [r0, #1]
    d510:	4608      	mov	r0, r1
    d512:	4770      	bx	lr

0000d514 <sdc_hci_data_get>:
    d514:	b510      	push	{r4, lr}
    d516:	b120      	cbz	r0, d522 <sdc_hci_data_get+0xe>
    d518:	f7ff fda2 	bl	d060 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d51c:	b120      	cbz	r0, d528 <sdc_hci_data_get+0x14>
    d51e:	2000      	movs	r0, #0
    d520:	bd10      	pop	{r4, pc}
    d522:	f06f 0015 	mvn.w	r0, #21
    d526:	bd10      	pop	{r4, pc}
    d528:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d52c:	bd10      	pop	{r4, pc}

0000d52e <sdc_hci_data_put>:
    d52e:	b510      	push	{r4, lr}
    d530:	f06f 0415 	mvn.w	r4, #21
    d534:	b120      	cbz	r0, d540 <sdc_hci_data_put+0x12>
    d536:	f7ff fda1 	bl	d07c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d53a:	b108      	cbz	r0, d540 <sdc_hci_data_put+0x12>
    d53c:	2000      	movs	r0, #0
    d53e:	bd10      	pop	{r4, pc}
    d540:	4620      	mov	r0, r4
    d542:	bd10      	pop	{r4, pc}

0000d544 <sdc_hci_evt_get>:
    d544:	b510      	push	{r4, lr}
    d546:	b120      	cbz	r0, d552 <sdc_hci_evt_get+0xe>
    d548:	f7ff fda1 	bl	d08e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d54c:	b120      	cbz	r0, d558 <sdc_hci_evt_get+0x14>
    d54e:	2000      	movs	r0, #0
    d550:	bd10      	pop	{r4, pc}
    d552:	f06f 0015 	mvn.w	r0, #21
    d556:	bd10      	pop	{r4, pc}
    d558:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d55c:	bd10      	pop	{r4, pc}

0000d55e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d55e:	f002 becf 	b.w	10300 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d562 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d562:	f002 bf11 	b.w	10388 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d566 <sdc_hci_cmd_cb_set_event_mask>:
    d566:	b510      	push	{r4, lr}
    d568:	f7f7 fdbc 	bl	50e4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d56c:	2000      	movs	r0, #0
    d56e:	bd10      	pop	{r4, pc}

0000d570 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d570:	b510      	push	{r4, lr}
    d572:	f7f7 fdc5 	bl	5100 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d576:	2000      	movs	r0, #0
    d578:	bd10      	pop	{r4, pc}

0000d57a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d57a:	f002 bf21 	b.w	103c0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d57e <sdc_hci_cmd_vs_conn_event_extend>:
    d57e:	b508      	push	{r3, lr}
    d580:	7800      	ldrb	r0, [r0, #0]
    d582:	f88d 0000 	strb.w	r0, [sp]
    d586:	4668      	mov	r0, sp
    d588:	f002 fdd1 	bl	1012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d58c:	bd08      	pop	{r3, pc}

0000d58e <sdc_hci_cmd_vs_conn_update>:
    d58e:	2001      	movs	r0, #1
    d590:	4770      	bx	lr

0000d592 <sdc_hci_cmd_vs_event_length_set>:
    d592:	f7fd bcf7 	b.w	af84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d596 <sdc_hci_cmd_vs_llpm_mode_set>:
    d596:	2001      	movs	r0, #1
    d598:	4770      	bx	lr

0000d59a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d59a:	7800      	ldrb	r0, [r0, #0]
    d59c:	b100      	cbz	r0, d5a0 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d59e:	2001      	movs	r0, #1
    d5a0:	f002 bd4a 	b.w	10038 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d5a4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d5a4:	b570      	push	{r4, r5, r6, lr}
    d5a6:	4605      	mov	r5, r0
    d5a8:	2210      	movs	r2, #16
    d5aa:	2100      	movs	r1, #0
    d5ac:	f7ff fc53 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5b0:	2210      	movs	r2, #16
    d5b2:	2100      	movs	r1, #0
    d5b4:	f105 0010 	add.w	r0, r5, #16
    d5b8:	f7ff fc4d 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5bc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d5c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d5c4:	1c40      	adds	r0, r0, #1
    d5c6:	d10b      	bne.n	d5e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d5cc:	1c40      	adds	r0, r0, #1
    d5ce:	d107      	bne.n	d5e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d5d4:	1c40      	adds	r0, r0, #1
    d5d6:	d103      	bne.n	d5e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5d8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d5dc:	1c40      	adds	r0, r0, #1
    d5de:	d00b      	beq.n	d5f8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d5e0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d5e4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d5e8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d5ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d5f0:	612a      	str	r2, [r5, #16]
    d5f2:	6168      	str	r0, [r5, #20]
    d5f4:	61a9      	str	r1, [r5, #24]
    d5f6:	61eb      	str	r3, [r5, #28]
    d5f8:	2000      	movs	r0, #0
    d5fa:	f7f8 fabd 	bl	5b78 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d5fe:	b918      	cbnz	r0, d608 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d600:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d604:	07c0      	lsls	r0, r0, #31
    d606:	d118      	bne.n	d63a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d608:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d60c:	1c40      	adds	r0, r0, #1
    d60e:	d10b      	bne.n	d628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d610:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d614:	1c40      	adds	r0, r0, #1
    d616:	d107      	bne.n	d628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d618:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d61c:	1c40      	adds	r0, r0, #1
    d61e:	d103      	bne.n	d628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d620:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d624:	1c40      	adds	r0, r0, #1
    d626:	d008      	beq.n	d63a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d628:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d62c:	6861      	ldr	r1, [r4, #4]
    d62e:	68a2      	ldr	r2, [r4, #8]
    d630:	68e3      	ldr	r3, [r4, #12]
    d632:	6028      	str	r0, [r5, #0]
    d634:	6069      	str	r1, [r5, #4]
    d636:	60aa      	str	r2, [r5, #8]
    d638:	60eb      	str	r3, [r5, #12]
    d63a:	2000      	movs	r0, #0
    d63c:	bd70      	pop	{r4, r5, r6, pc}

0000d63e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d63e:	b538      	push	{r3, r4, r5, lr}
    d640:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d644:	4604      	mov	r4, r0
    d646:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d64a:	1c40      	adds	r0, r0, #1
    d64c:	d105      	bne.n	d65a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d64e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d652:	43c0      	mvns	r0, r0
    d654:	0400      	lsls	r0, r0, #16
    d656:	0c00      	lsrs	r0, r0, #16
    d658:	d03e      	beq.n	d6d8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d65a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d65e:	07c0      	lsls	r0, r0, #31
    d660:	d03a      	beq.n	d6d8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d662:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d666:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d66a:	f8ad 1000 	strh.w	r1, [sp]
    d66e:	f8c4 0001 	str.w	r0, [r4, #1]
    d672:	f8bd 0000 	ldrh.w	r0, [sp]
    d676:	f8a4 0005 	strh.w	r0, [r4, #5]
    d67a:	79a0      	ldrb	r0, [r4, #6]
    d67c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d680:	71a0      	strb	r0, [r4, #6]
    d682:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d686:	1c40      	adds	r0, r0, #1
    d688:	d00f      	beq.n	d6aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d68a:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d68e:	1c40      	adds	r0, r0, #1
    d690:	d00b      	beq.n	d6aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d692:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d696:	1c40      	adds	r0, r0, #1
    d698:	d007      	beq.n	d6aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d69a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d69e:	1c40      	adds	r0, r0, #1
    d6a0:	d003      	beq.n	d6aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6a2:	2000      	movs	r0, #0
    d6a4:	f7f8 fa68 	bl	5b78 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d6a8:	b140      	cbz	r0, d6bc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d6aa:	2210      	movs	r2, #16
    d6ac:	2100      	movs	r1, #0
    d6ae:	1de0      	adds	r0, r4, #7
    d6b0:	f7ff fbd1 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d6b4:	2001      	movs	r0, #1
    d6b6:	7020      	strb	r0, [r4, #0]
    d6b8:	2000      	movs	r0, #0
    d6ba:	bd38      	pop	{r3, r4, r5, pc}
    d6bc:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d6c0:	6869      	ldr	r1, [r5, #4]
    d6c2:	68a8      	ldr	r0, [r5, #8]
    d6c4:	68eb      	ldr	r3, [r5, #12]
    d6c6:	f8c4 2007 	str.w	r2, [r4, #7]
    d6ca:	f8c4 100b 	str.w	r1, [r4, #11]
    d6ce:	f8c4 000f 	str.w	r0, [r4, #15]
    d6d2:	f8c4 3013 	str.w	r3, [r4, #19]
    d6d6:	e7ed      	b.n	d6b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d6d8:	2000      	movs	r0, #0
    d6da:	e7ec      	b.n	d6b6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d6dc <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d6dc:	f002 bd19 	b.w	10112 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d6e0 <sdc_hci_cmd_ip_read_bd_addr>:
    d6e0:	f002 be1f 	b.w	10322 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d6e4 <sdc_hci_cmd_ip_read_local_version_information>:
    d6e4:	f7fd bc5c 	b.w	afa0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d6e8 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d6e8:	f002 b9ff 	b.w	faea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d6ec <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d6ec:	f002 b9e2 	b.w	fab4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d6f0 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d6f0:	f002 ba1f 	b.w	fb32 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d6f4 <sdc_hci_cmd_le_clear_resolving_list>:
    d6f4:	f002 ba10 	b.w	fb18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d6f8 <sdc_hci_cmd_le_encrypt>:
    d6f8:	f002 ba25 	b.w	fb46 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d6fc <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d6fc:	8802      	ldrh	r2, [r0, #0]
    d6fe:	800a      	strh	r2, [r1, #0]
    d700:	f002 ba2a 	b.w	fb58 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d704 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d704:	8802      	ldrh	r2, [r0, #0]
    d706:	800a      	strh	r2, [r1, #0]
    d708:	f002 ba3f 	b.w	fb8a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d70c <sdc_hci_cmd_le_rand>:
    d70c:	f002 ba67 	b.w	fbde <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d710 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d710:	f002 ba6b 	b.w	fbea <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d714 <sdc_hci_cmd_le_read_buffer_size>:
    d714:	f7fd bbb0 	b.w	ae78 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d718 <sdc_hci_cmd_le_read_channel_map>:
    d718:	f7fd bbb8 	b.w	ae8c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d71c <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d71c:	f002 bad1 	b.w	fcc2 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d720 <sdc_hci_cmd_le_read_max_data_length>:
    d720:	f002 ba6c 	b.w	fbfc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d724 <sdc_hci_cmd_le_read_phy>:
    d724:	f002 ba7a 	b.w	fc1c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d728 <sdc_hci_cmd_le_read_remote_features>:
    d728:	f002 baa1 	b.w	fc6e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d72c <sdc_hci_cmd_le_read_resolving_list_size>:
    d72c:	f002 babc 	b.w	fca8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d730 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d730:	f7fd bbd4 	b.w	aedc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d734 <sdc_hci_cmd_le_read_transmit_power>:
    d734:	f002 babc 	b.w	fcb0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d738 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d738:	f002 bae0 	b.w	fcfc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d73c <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d73c:	f002 bac5 	b.w	fcca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d740 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d740:	f002 baf1 	b.w	fd26 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d744 <sdc_hci_cmd_le_set_adv_data>:
    d744:	f002 bafd 	b.w	fd42 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d748 <sdc_hci_cmd_le_set_adv_enable>:
    d748:	f002 bb10 	b.w	fd6c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d74c <sdc_hci_cmd_le_set_adv_params>:
    d74c:	f002 bb41 	b.w	fdd2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d750 <sdc_hci_cmd_le_set_data_length>:
    d750:	f002 bbd4 	b.w	fefc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d754 <sdc_hci_cmd_le_set_default_phy>:
    d754:	f7fd bbd2 	b.w	aefc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d758 <sdc_hci_cmd_le_set_event_mask>:
    d758:	b510      	push	{r4, lr}
    d75a:	f7f7 fcbd 	bl	50d8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d75e:	2000      	movs	r0, #0
    d760:	bd10      	pop	{r4, pc}

0000d762 <sdc_hci_cmd_le_set_phy>:
    d762:	f002 bbf2 	b.w	ff4a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d766 <sdc_hci_cmd_le_set_privacy_mode>:
    d766:	f002 bc0e 	b.w	ff86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d76a <sdc_hci_cmd_le_set_random_address>:
    d76a:	f002 bc22 	b.w	ffb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d76e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d76e:	f002 bc2e 	b.w	ffce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d772 <sdc_hci_cmd_le_set_scan_response_data>:
    d772:	f002 bc35 	b.w	ffe0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d776 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d776:	f002 bc48 	b.w	1000a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d77a <sdc_hci_cmd_lc_disconnect>:
    d77a:	f002 b947 	b.w	fa0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d77e <sdc_hci_cmd_lc_read_remote_version_information>:
    d77e:	f002 bddc 	b.w	1033a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d782:	b570      	push	{r4, r5, r6, lr}
    d784:	880b      	ldrh	r3, [r1, #0]
    d786:	7f04      	ldrb	r4, [r0, #28]
    d788:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d78c:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d790:	8802      	ldrh	r2, [r0, #0]
    d792:	4435      	add	r5, r6
    d794:	1da4      	adds	r4, r4, #6
    d796:	882d      	ldrh	r5, [r5, #0]
    d798:	4422      	add	r2, r4
    d79a:	b292      	uxth	r2, r2
    d79c:	4425      	add	r5, r4
    d79e:	1e54      	subs	r4, r2, #1
    d7a0:	442c      	add	r4, r5
    d7a2:	fb94 f4f2 	sdiv	r4, r4, r2
    d7a6:	fb02 6204 	mla	r2, r2, r4, r6
    d7aa:	8840      	ldrh	r0, [r0, #2]
    d7ac:	b292      	uxth	r2, r2
    d7ae:	4290      	cmp	r0, r2
    d7b0:	d903      	bls.n	d7ba <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d7b2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d7b6:	4310      	orrs	r0, r2
    d7b8:	e002      	b.n	d7c0 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d7ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d7be:	4398      	bics	r0, r3
    d7c0:	8008      	strh	r0, [r1, #0]
    d7c2:	bd70      	pop	{r4, r5, r6, pc}
    d7c4:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d7c8:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d7cc:	429a      	cmp	r2, r3
    d7ce:	d107      	bne.n	d7e0 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d7d0:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d7d4:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d7d8:	4288      	cmp	r0, r1
    d7da:	d001      	beq.n	d7e0 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d7dc:	2001      	movs	r0, #1
    d7de:	4770      	bx	lr
    d7e0:	2000      	movs	r0, #0
    d7e2:	4770      	bx	lr

0000d7e4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d7e4:	b570      	push	{r4, r5, r6, lr}
    d7e6:	7f00      	ldrb	r0, [r0, #28]
    d7e8:	461c      	mov	r4, r3
    d7ea:	1d80      	adds	r0, r0, #6
    d7ec:	4408      	add	r0, r1
    d7ee:	4613      	mov	r3, r2
    d7f0:	8809      	ldrh	r1, [r1, #0]
    d7f2:	9a04      	ldr	r2, [sp, #16]
    d7f4:	1cc9      	adds	r1, r1, #3
    d7f6:	b289      	uxth	r1, r1
    d7f8:	1915      	adds	r5, r2, r4
    d7fa:	1ec0      	subs	r0, r0, #3
    d7fc:	428d      	cmp	r5, r1
    d7fe:	d805      	bhi.n	d80c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d800:	1881      	adds	r1, r0, r2
    d802:	4622      	mov	r2, r4
    d804:	4618      	mov	r0, r3
    d806:	f7ff faac 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d80a:	e000      	b.n	d80e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d80c:	2400      	movs	r4, #0
    d80e:	4620      	mov	r0, r4
    d810:	bd70      	pop	{r4, r5, r6, pc}

0000d812 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d812:	b570      	push	{r4, r5, r6, lr}
    d814:	7f00      	ldrb	r0, [r0, #28]
    d816:	461c      	mov	r4, r3
    d818:	1d80      	adds	r0, r0, #6
    d81a:	4408      	add	r0, r1
    d81c:	4613      	mov	r3, r2
    d81e:	8809      	ldrh	r1, [r1, #0]
    d820:	9a04      	ldr	r2, [sp, #16]
    d822:	1cc9      	adds	r1, r1, #3
    d824:	b289      	uxth	r1, r1
    d826:	1915      	adds	r5, r2, r4
    d828:	1ec0      	subs	r0, r0, #3
    d82a:	428d      	cmp	r5, r1
    d82c:	d805      	bhi.n	d83a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d82e:	4410      	add	r0, r2
    d830:	4622      	mov	r2, r4
    d832:	4619      	mov	r1, r3
    d834:	f7ff fa95 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d838:	e000      	b.n	d83c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d83a:	2400      	movs	r4, #0
    d83c:	4620      	mov	r0, r4
    d83e:	bd70      	pop	{r4, r5, r6, pc}

0000d840 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d840:	8881      	ldrh	r1, [r0, #4]
    d842:	88c0      	ldrh	r0, [r0, #6]
    d844:	4288      	cmp	r0, r1
    d846:	d101      	bne.n	d84c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d848:	2001      	movs	r0, #1
    d84a:	4770      	bx	lr
    d84c:	2000      	movs	r0, #0
    d84e:	4770      	bx	lr

0000d850 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d850:	8881      	ldrh	r1, [r0, #4]
    d852:	8900      	ldrh	r0, [r0, #8]
    d854:	4288      	cmp	r0, r1
    d856:	d101      	bne.n	d85c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d858:	2001      	movs	r0, #1
    d85a:	4770      	bx	lr
    d85c:	2000      	movs	r0, #0
    d85e:	4770      	bx	lr

0000d860 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d860:	b570      	push	{r4, r5, r6, lr}
    d862:	460d      	mov	r5, r1
    d864:	4604      	mov	r4, r0
    d866:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d86a:	8880      	ldrh	r0, [r0, #4]
    d86c:	2600      	movs	r6, #0
    d86e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d872:	4401      	add	r1, r0
    d874:	702e      	strb	r6, [r5, #0]
    d876:	8a20      	ldrh	r0, [r4, #16]
    d878:	2800      	cmp	r0, #0
    d87a:	d01b      	beq.n	d8b4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x54>
    d87c:	89a2      	ldrh	r2, [r4, #12]
    d87e:	4410      	add	r0, r2
    d880:	b280      	uxth	r0, r0
    d882:	81a0      	strh	r0, [r4, #12]
    d884:	880a      	ldrh	r2, [r1, #0]
    d886:	4290      	cmp	r0, r2
    d888:	d905      	bls.n	d896 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x36>
    d88a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d88e:	f04f 0014 	mov.w	r0, #20
    d892:	f7f7 fa9f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d896:	d10b      	bne.n	d8b0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x50>
    d898:	69a0      	ldr	r0, [r4, #24]
    d89a:	b108      	cbz	r0, d8a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x40>
    d89c:	7f40      	ldrb	r0, [r0, #29]
    d89e:	7088      	strb	r0, [r1, #2]
    d8a0:	f104 0104 	add.w	r1, r4, #4
    d8a4:	4620      	mov	r0, r4
    d8a6:	f7ff ff6c 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d8aa:	81a6      	strh	r6, [r4, #12]
    d8ac:	2001      	movs	r0, #1
    d8ae:	7028      	strb	r0, [r5, #0]
    d8b0:	8226      	strh	r6, [r4, #16]
    d8b2:	2001      	movs	r0, #1
    d8b4:	bd70      	pop	{r4, r5, r6, pc}

0000d8b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8b8:	4604      	mov	r4, r0
    d8ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d8be:	88c0      	ldrh	r0, [r0, #6]
    d8c0:	460e      	mov	r6, r1
    d8c2:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d8c6:	8a60      	ldrh	r0, [r4, #18]
    d8c8:	19d9      	adds	r1, r3, r7
    d8ca:	b108      	cbz	r0, d8d0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d8cc:	42b0      	cmp	r0, r6
    d8ce:	d201      	bcs.n	d8d4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d8d0:	2000      	movs	r0, #0
    d8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d8d4:	89e0      	ldrh	r0, [r4, #14]
    d8d6:	2500      	movs	r5, #0
    d8d8:	b140      	cbz	r0, d8ec <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d8da:	f8b1 c000 	ldrh.w	ip, [r1]
    d8de:	4560      	cmp	r0, ip
    d8e0:	d008      	beq.n	d8f4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d8e2:	f44f 7114 	mov.w	r1, #592	; 0x250
    d8e6:	2014      	movs	r0, #20
    d8e8:	f7f7 fa74 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8ec:	7f60      	ldrb	r0, [r4, #29]
    d8ee:	7088      	strb	r0, [r1, #2]
    d8f0:	800d      	strh	r5, [r1, #0]
    d8f2:	e00e      	b.n	d912 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d8f4:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d8f8:	4418      	add	r0, r3
    d8fa:	f10c 0c06 	add.w	ip, ip, #6
    d8fe:	44bc      	add	ip, r7
    d900:	4460      	add	r0, ip
    d902:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d906:	f820 cc03 	strh.w	ip, [r0, #-3]
    d90a:	f894 c020 	ldrb.w	ip, [r4, #32]
    d90e:	f800 cc01 	strb.w	ip, [r0, #-1]
    d912:	89e0      	ldrh	r0, [r4, #14]
    d914:	4430      	add	r0, r6
    d916:	81e0      	strh	r0, [r4, #14]
    d918:	8808      	ldrh	r0, [r1, #0]
    d91a:	4430      	add	r0, r6
    d91c:	8008      	strh	r0, [r1, #0]
    d91e:	b19a      	cbz	r2, d948 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d920:	1da1      	adds	r1, r4, #6
    d922:	4620      	mov	r0, r4
    d924:	f7ff ff2d 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d928:	81e5      	strh	r5, [r4, #14]
    d92a:	7f60      	ldrb	r0, [r4, #29]
    d92c:	1c40      	adds	r0, r0, #1
    d92e:	7760      	strb	r0, [r4, #29]
    d930:	7da0      	ldrb	r0, [r4, #22]
    d932:	f88d 0000 	strb.w	r0, [sp]
    d936:	9800      	ldr	r0, [sp, #0]
    d938:	9000      	str	r0, [sp, #0]
    d93a:	f89d 0000 	ldrb.w	r0, [sp]
    d93e:	b178      	cbz	r0, d960 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d940:	88e0      	ldrh	r0, [r4, #6]
    d942:	82a0      	strh	r0, [r4, #20]
    d944:	75a5      	strb	r5, [r4, #22]
    d946:	e00b      	b.n	d960 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d948:	7f20      	ldrb	r0, [r4, #28]
    d94a:	89e1      	ldrh	r1, [r4, #14]
    d94c:	1d80      	adds	r0, r0, #6
    d94e:	4438      	add	r0, r7
    d950:	4419      	add	r1, r3
    d952:	4408      	add	r0, r1
    d954:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d958:	83e1      	strh	r1, [r4, #30]
    d95a:	7880      	ldrb	r0, [r0, #2]
    d95c:	f884 0020 	strb.w	r0, [r4, #32]
    d960:	8265      	strh	r5, [r4, #18]
    d962:	2001      	movs	r0, #1
    d964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d966 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d966:	b510      	push	{r4, lr}
    d968:	4604      	mov	r4, r0
    d96a:	88c0      	ldrh	r0, [r0, #6]
    d96c:	88a1      	ldrh	r1, [r4, #4]
    d96e:	4281      	cmp	r1, r0
    d970:	d007      	beq.n	d982 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d972:	89a0      	ldrh	r0, [r4, #12]
    d974:	b928      	cbnz	r0, d982 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d976:	8a20      	ldrh	r0, [r4, #16]
    d978:	b918      	cbnz	r0, d982 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d97a:	88a0      	ldrh	r0, [r4, #4]
    d97c:	8aa1      	ldrh	r1, [r4, #20]
    d97e:	4288      	cmp	r0, r1
    d980:	d101      	bne.n	d986 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d982:	2000      	movs	r0, #0
    d984:	bd10      	pop	{r4, pc}
    d986:	1d21      	adds	r1, r4, #4
    d988:	4620      	mov	r0, r4
    d98a:	f7ff fefa 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d98e:	2000      	movs	r0, #0
    d990:	8220      	strh	r0, [r4, #16]
    d992:	2001      	movs	r0, #1
    d994:	bd10      	pop	{r4, pc}

0000d996 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d996:	b510      	push	{r4, lr}
    d998:	4604      	mov	r4, r0
    d99a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d99e:	88c0      	ldrh	r0, [r0, #6]
    d9a0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d9a4:	4402      	add	r2, r0
    d9a6:	8820      	ldrh	r0, [r4, #0]
    d9a8:	2845      	cmp	r0, #69	; 0x45
    d9aa:	d200      	bcs.n	d9ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d9ac:	2045      	movs	r0, #69	; 0x45
    d9ae:	4288      	cmp	r0, r1
    d9b0:	d204      	bcs.n	d9bc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d9b2:	f240 1119 	movw	r1, #281	; 0x119
    d9b6:	2014      	movs	r0, #20
    d9b8:	f7f7 fa0c 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9bc:	7de0      	ldrb	r0, [r4, #23]
    d9be:	2800      	cmp	r0, #0
    d9c0:	d003      	beq.n	d9ca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d9c2:	8810      	ldrh	r0, [r2, #0]
    d9c4:	4288      	cmp	r0, r1
    d9c6:	d201      	bcs.n	d9cc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d9c8:	2000      	movs	r0, #0
    d9ca:	bd10      	pop	{r4, pc}
    d9cc:	8011      	strh	r1, [r2, #0]
    d9ce:	1da1      	adds	r1, r4, #6
    d9d0:	4620      	mov	r0, r4
    d9d2:	f7ff fed6 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d9d6:	2000      	movs	r0, #0
    d9d8:	75e0      	strb	r0, [r4, #23]
    d9da:	2001      	movs	r0, #1
    d9dc:	bd10      	pop	{r4, pc}

0000d9de <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9e2:	8941      	ldrh	r1, [r0, #10]
    d9e4:	8886      	ldrh	r6, [r0, #4]
    d9e6:	4604      	mov	r4, r0
    d9e8:	2500      	movs	r5, #0
    d9ea:	f100 070a 	add.w	r7, r0, #10
    d9ee:	e006      	b.n	d9fe <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d9f0:	4639      	mov	r1, r7
    d9f2:	4620      	mov	r0, r4
    d9f4:	f7ff fec5 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d9f8:	1c6d      	adds	r5, r5, #1
    d9fa:	8961      	ldrh	r1, [r4, #10]
    d9fc:	b2ad      	uxth	r5, r5
    d9fe:	42b1      	cmp	r1, r6
    da00:	d1f6      	bne.n	d9f0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    da02:	4628      	mov	r0, r5
    da04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000da08 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    da08:	b530      	push	{r4, r5, lr}
    da0a:	88c4      	ldrh	r4, [r0, #6]
    da0c:	8881      	ldrh	r1, [r0, #4]
    da0e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    da12:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    da16:	4413      	add	r3, r2
    da18:	8882      	ldrh	r2, [r0, #4]
    da1a:	8a85      	ldrh	r5, [r0, #20]
    da1c:	42aa      	cmp	r2, r5
    da1e:	d012      	beq.n	da46 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    da20:	42a1      	cmp	r1, r4
    da22:	d010      	beq.n	da46 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    da24:	8981      	ldrh	r1, [r0, #12]
    da26:	b971      	cbnz	r1, da46 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    da28:	6982      	ldr	r2, [r0, #24]
    da2a:	b172      	cbz	r2, da4a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    da2c:	4610      	mov	r0, r2
    da2e:	f7ff ff0f 	bl	d850 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    da32:	b950      	cbnz	r0, da4a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    da34:	8910      	ldrh	r0, [r2, #8]
    da36:	3224      	adds	r2, #36	; 0x24
    da38:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    da3c:	4410      	add	r0, r2
    da3e:	7899      	ldrb	r1, [r3, #2]
    da40:	7880      	ldrb	r0, [r0, #2]
    da42:	4288      	cmp	r0, r1
    da44:	d101      	bne.n	da4a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    da46:	2000      	movs	r0, #0
    da48:	bd30      	pop	{r4, r5, pc}
    da4a:	4618      	mov	r0, r3
    da4c:	bd30      	pop	{r4, r5, pc}

0000da4e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    da4e:	7f00      	ldrb	r0, [r0, #28]
    da50:	1d80      	adds	r0, r0, #6
    da52:	4408      	add	r0, r1
    da54:	1ec0      	subs	r0, r0, #3
    da56:	6010      	str	r0, [r2, #0]
    da58:	8808      	ldrh	r0, [r1, #0]
    da5a:	4770      	bx	lr

0000da5c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    da5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da60:	460e      	mov	r6, r1
    da62:	88c1      	ldrh	r1, [r0, #6]
    da64:	8902      	ldrh	r2, [r0, #8]
    da66:	4604      	mov	r4, r0
    da68:	f100 0824 	add.w	r8, r0, #36	; 0x24
    da6c:	8800      	ldrh	r0, [r0, #0]
    da6e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    da72:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    da76:	2845      	cmp	r0, #69	; 0x45
    da78:	d200      	bcs.n	da7c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    da7a:	2045      	movs	r0, #69	; 0x45
    da7c:	42b0      	cmp	r0, r6
    da7e:	d203      	bcs.n	da88 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    da80:	21db      	movs	r1, #219	; 0xdb
    da82:	2014      	movs	r0, #20
    da84:	f7f7 f9a6 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da88:	4610      	mov	r0, r2
    da8a:	f7ff fe9b 	bl	d7c4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    da8e:	b110      	cbz	r0, da96 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    da90:	2000      	movs	r0, #0
    da92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da96:	42af      	cmp	r7, r5
    da98:	d908      	bls.n	daac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da9a:	7f21      	ldrb	r1, [r4, #28]
    da9c:	1b78      	subs	r0, r7, r5
    da9e:	1a40      	subs	r0, r0, r1
    daa0:	1f80      	subs	r0, r0, #6
    daa2:	4286      	cmp	r6, r0
    daa4:	dd02      	ble.n	daac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    daa6:	2000      	movs	r0, #0
    daa8:	75e0      	strb	r0, [r4, #23]
    daaa:	e7f1      	b.n	da90 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    daac:	eb08 0005 	add.w	r0, r8, r5
    dab0:	2101      	movs	r1, #1
    dab2:	8006      	strh	r6, [r0, #0]
    dab4:	75e1      	strb	r1, [r4, #23]
    dab6:	e7ec      	b.n	da92 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000dab8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    dab8:	b538      	push	{r3, r4, r5, lr}
    daba:	88c4      	ldrh	r4, [r0, #6]
    dabc:	8881      	ldrh	r1, [r0, #4]
    dabe:	f100 0224 	add.w	r2, r0, #36	; 0x24
    dac2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    dac6:	441a      	add	r2, r3
    dac8:	42a1      	cmp	r1, r4
    daca:	d010      	beq.n	daee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    dacc:	8983      	ldrh	r3, [r0, #12]
    dace:	8a05      	ldrh	r5, [r0, #16]
    dad0:	8812      	ldrh	r2, [r2, #0]
    dad2:	442b      	add	r3, r5
    dad4:	4293      	cmp	r3, r2
    dad6:	d308      	bcc.n	daea <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    dad8:	f8ad 1000 	strh.w	r1, [sp]
    dadc:	4669      	mov	r1, sp
    dade:	f7ff fe50 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dae2:	f8bd 0000 	ldrh.w	r0, [sp]
    dae6:	42a0      	cmp	r0, r4
    dae8:	d001      	beq.n	daee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    daea:	2001      	movs	r0, #1
    daec:	bd38      	pop	{r3, r4, r5, pc}
    daee:	2000      	movs	r0, #0
    daf0:	bd38      	pop	{r3, r4, r5, pc}

0000daf2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    daf2:	b570      	push	{r4, r5, r6, lr}
    daf4:	88c6      	ldrh	r6, [r0, #6]
    daf6:	8885      	ldrh	r5, [r0, #4]
    daf8:	4603      	mov	r3, r0
    dafa:	f100 0424 	add.w	r4, r0, #36	; 0x24
    dafe:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    db02:	4420      	add	r0, r4
    db04:	42b5      	cmp	r5, r6
    db06:	d102      	bne.n	db0e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    db08:	2000      	movs	r0, #0
    db0a:	8218      	strh	r0, [r3, #16]
    db0c:	bd70      	pop	{r4, r5, r6, pc}
    db0e:	8804      	ldrh	r4, [r0, #0]
    db10:	899d      	ldrh	r5, [r3, #12]
    db12:	7f1e      	ldrb	r6, [r3, #28]
    db14:	1b64      	subs	r4, r4, r5
    db16:	4435      	add	r5, r6
    db18:	4428      	add	r0, r5
    db1a:	880d      	ldrh	r5, [r1, #0]
    db1c:	b2a4      	uxth	r4, r4
    db1e:	1cc0      	adds	r0, r0, #3
    db20:	42a5      	cmp	r5, r4
    db22:	d900      	bls.n	db26 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    db24:	800c      	strh	r4, [r1, #0]
    db26:	899c      	ldrh	r4, [r3, #12]
    db28:	b124      	cbz	r4, db34 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    db2a:	2400      	movs	r4, #0
    db2c:	7014      	strb	r4, [r2, #0]
    db2e:	8809      	ldrh	r1, [r1, #0]
    db30:	8219      	strh	r1, [r3, #16]
    db32:	bd70      	pop	{r4, r5, r6, pc}
    db34:	2401      	movs	r4, #1
    db36:	e7f9      	b.n	db2c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000db38 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    db38:	b508      	push	{r3, lr}
    db3a:	8a81      	ldrh	r1, [r0, #20]
    db3c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    db40:	3aff      	subs	r2, #255	; 0xff
    db42:	d008      	beq.n	db56 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    db44:	7d82      	ldrb	r2, [r0, #22]
    db46:	f88d 2000 	strb.w	r2, [sp]
    db4a:	9a00      	ldr	r2, [sp, #0]
    db4c:	9200      	str	r2, [sp, #0]
    db4e:	f89d 2000 	ldrb.w	r2, [sp]
    db52:	b952      	cbnz	r2, db6a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    db54:	e004      	b.n	db60 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    db56:	f240 318d 	movw	r1, #909	; 0x38d
    db5a:	2014      	movs	r0, #20
    db5c:	f7f7 f93a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db60:	8880      	ldrh	r0, [r0, #4]
    db62:	4281      	cmp	r1, r0
    db64:	d101      	bne.n	db6a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    db66:	2000      	movs	r0, #0
    db68:	bd08      	pop	{r3, pc}
    db6a:	2001      	movs	r0, #1
    db6c:	bd08      	pop	{r3, pc}

0000db6e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    db6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    db72:	8281      	strh	r1, [r0, #20]
    db74:	2100      	movs	r1, #0
    db76:	7581      	strb	r1, [r0, #22]
    db78:	4770      	bx	lr

0000db7a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    db7a:	b510      	push	{r4, lr}
    db7c:	8a81      	ldrh	r1, [r0, #20]
    db7e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    db82:	3aff      	subs	r2, #255	; 0xff
    db84:	d004      	beq.n	db90 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    db86:	f240 3169 	movw	r1, #873	; 0x369
    db8a:	2014      	movs	r0, #20
    db8c:	f7f7 f922 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db90:	88c1      	ldrh	r1, [r0, #6]
    db92:	8281      	strh	r1, [r0, #20]
    db94:	89c1      	ldrh	r1, [r0, #14]
    db96:	b109      	cbz	r1, db9c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    db98:	21ff      	movs	r1, #255	; 0xff
    db9a:	e000      	b.n	db9e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    db9c:	2100      	movs	r1, #0
    db9e:	7581      	strb	r1, [r0, #22]
    dba0:	bd10      	pop	{r4, pc}

0000dba2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    dba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dba6:	461d      	mov	r5, r3
    dba8:	4616      	mov	r6, r2
    dbaa:	9f06      	ldr	r7, [sp, #24]
    dbac:	460b      	mov	r3, r1
    dbae:	4604      	mov	r4, r0
    dbb0:	463a      	mov	r2, r7
    dbb2:	4629      	mov	r1, r5
    dbb4:	4630      	mov	r0, r6
    dbb6:	f000 f84f 	bl	dc58 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dbba:	4283      	cmp	r3, r0
    dbbc:	d201      	bcs.n	dbc2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    dbbe:	21a8      	movs	r1, #168	; 0xa8
    dbc0:	e018      	b.n	dbf4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    dbc2:	1ce0      	adds	r0, r4, #3
    dbc4:	f020 0103 	bic.w	r1, r0, #3
    dbc8:	4620      	mov	r0, r4
    dbca:	42a1      	cmp	r1, r4
    dbcc:	d001      	beq.n	dbd2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    dbce:	21a9      	movs	r1, #169	; 0xa9
    dbd0:	e010      	b.n	dbf4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    dbd2:	2224      	movs	r2, #36	; 0x24
    dbd4:	2100      	movs	r1, #0
    dbd6:	f7ff f93e 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dbda:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dbde:	82a0      	strh	r0, [r4, #20]
    dbe0:	19a8      	adds	r0, r5, r6
    dbe2:	1d80      	adds	r0, r0, #6
    dbe4:	4378      	muls	r0, r7
    dbe6:	b280      	uxth	r0, r0
    dbe8:	7725      	strb	r5, [r4, #28]
    dbea:	8060      	strh	r0, [r4, #2]
    dbec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    dbf0:	d903      	bls.n	dbfa <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    dbf2:	21af      	movs	r1, #175	; 0xaf
    dbf4:	2014      	movs	r0, #20
    dbf6:	f7f7 f8ed 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbfa:	8026      	strh	r6, [r4, #0]
    dbfc:	2000      	movs	r0, #0
    dbfe:	7760      	strb	r0, [r4, #29]
    dc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dc04 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    dc04:	6181      	str	r1, [r0, #24]
    dc06:	6188      	str	r0, [r1, #24]
    dc08:	4770      	bx	lr

0000dc0a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    dc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc0e:	460b      	mov	r3, r1
    dc10:	4604      	mov	r4, r0
    dc12:	f100 0124 	add.w	r1, r0, #36	; 0x24
    dc16:	8905      	ldrh	r5, [r0, #8]
    dc18:	8946      	ldrh	r6, [r0, #10]
    dc1a:	8880      	ldrh	r0, [r0, #4]
    dc1c:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    dc20:	4439      	add	r1, r7
    dc22:	460f      	mov	r7, r1
    dc24:	4285      	cmp	r5, r0
    dc26:	d102      	bne.n	dc2e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    dc28:	2000      	movs	r0, #0
    dc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc2e:	b10a      	cbz	r2, dc34 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    dc30:	1cc8      	adds	r0, r1, #3
    dc32:	6010      	str	r0, [r2, #0]
    dc34:	b123      	cbz	r3, dc40 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    dc36:	7f22      	ldrb	r2, [r4, #28]
    dc38:	1cf9      	adds	r1, r7, #3
    dc3a:	4618      	mov	r0, r3
    dc3c:	f7ff f891 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc40:	883f      	ldrh	r7, [r7, #0]
    dc42:	f104 0108 	add.w	r1, r4, #8
    dc46:	4620      	mov	r0, r4
    dc48:	f7ff fd9b 	bl	d782 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    dc4c:	42b5      	cmp	r5, r6
    dc4e:	d101      	bne.n	dc54 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    dc50:	8920      	ldrh	r0, [r4, #8]
    dc52:	8160      	strh	r0, [r4, #10]
    dc54:	4638      	mov	r0, r7
    dc56:	e7e8      	b.n	dc2a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000dc58 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    dc58:	4401      	add	r1, r0
    dc5a:	1d89      	adds	r1, r1, #6
    dc5c:	4351      	muls	r1, r2
    dc5e:	b28a      	uxth	r2, r1
    dc60:	2100      	movs	r1, #0
    dc62:	2845      	cmp	r0, #69	; 0x45
    dc64:	d201      	bcs.n	dc6a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    dc66:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    dc6a:	3224      	adds	r2, #36	; 0x24
    dc6c:	1850      	adds	r0, r2, r1
    dc6e:	b280      	uxth	r0, r0
    dc70:	4770      	bx	lr

0000dc72 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    dc72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc76:	4688      	mov	r8, r1
    dc78:	88c1      	ldrh	r1, [r0, #6]
    dc7a:	4604      	mov	r4, r0
    dc7c:	8900      	ldrh	r0, [r0, #8]
    dc7e:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    dc82:	f104 0524 	add.w	r5, r4, #36	; 0x24
    dc86:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    dc8a:	eb05 0906 	add.w	r9, r5, r6
    dc8e:	f7ff fd99 	bl	d7c4 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    dc92:	2200      	movs	r2, #0
    dc94:	b998      	cbnz	r0, dcbe <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    dc96:	8820      	ldrh	r0, [r4, #0]
    dc98:	2845      	cmp	r0, #69	; 0x45
    dc9a:	d200      	bcs.n	dc9e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    dc9c:	2045      	movs	r0, #69	; 0x45
    dc9e:	42b7      	cmp	r7, r6
    dca0:	d906      	bls.n	dcb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dca2:	7f23      	ldrb	r3, [r4, #28]
    dca4:	1bb9      	subs	r1, r7, r6
    dca6:	1ac9      	subs	r1, r1, r3
    dca8:	1f89      	subs	r1, r1, #6
    dcaa:	4281      	cmp	r1, r0
    dcac:	da00      	bge.n	dcb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    dcae:	4608      	mov	r0, r1
    dcb0:	89e1      	ldrh	r1, [r4, #14]
    dcb2:	b111      	cbz	r1, dcba <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    dcb4:	f8b9 3000 	ldrh.w	r3, [r9]
    dcb8:	1ac0      	subs	r0, r0, r3
    dcba:	4540      	cmp	r0, r8
    dcbc:	da03      	bge.n	dcc6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    dcbe:	8262      	strh	r2, [r4, #18]
    dcc0:	2000      	movs	r0, #0
    dcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcc6:	7f20      	ldrb	r0, [r4, #28]
    dcc8:	4429      	add	r1, r5
    dcca:	1d80      	adds	r0, r0, #6
    dccc:	4430      	add	r0, r6
    dcce:	4408      	add	r0, r1
    dcd0:	f8a4 8012 	strh.w	r8, [r4, #18]
    dcd4:	1ec0      	subs	r0, r0, #3
    dcd6:	e7f4      	b.n	dcc2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000dcd8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    dcd8:	2100      	movs	r1, #0
    dcda:	81c1      	strh	r1, [r0, #14]
    dcdc:	8241      	strh	r1, [r0, #18]
    dcde:	7581      	strb	r1, [r0, #22]
    dce0:	4770      	bx	lr

0000dce2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    dce2:	b570      	push	{r4, r5, r6, lr}
    dce4:	2300      	movs	r3, #0
    dce6:	2908      	cmp	r1, #8
    dce8:	d204      	bcs.n	dcf4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    dcea:	f240 11cb 	movw	r1, #459	; 0x1cb
    dcee:	2015      	movs	r0, #21
    dcf0:	f7f7 f870 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcf4:	6802      	ldr	r2, [r0, #0]
    dcf6:	b90a      	cbnz	r2, dcfc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    dcf8:	e01e      	b.n	dd38 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    dcfa:	4610      	mov	r0, r2
    dcfc:	6802      	ldr	r2, [r0, #0]
    dcfe:	8893      	ldrh	r3, [r2, #4]
    dd00:	428b      	cmp	r3, r1
    dd02:	d002      	beq.n	dd0a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    dd04:	6813      	ldr	r3, [r2, #0]
    dd06:	2b00      	cmp	r3, #0
    dd08:	d1f7      	bne.n	dcfa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    dd0a:	8894      	ldrh	r4, [r2, #4]
    dd0c:	4613      	mov	r3, r2
    dd0e:	428c      	cmp	r4, r1
    dd10:	d101      	bne.n	dd16 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    dd12:	6811      	ldr	r1, [r2, #0]
    dd14:	e00d      	b.n	dd32 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    dd16:	f101 0508 	add.w	r5, r1, #8
    dd1a:	b2ae      	uxth	r6, r5
    dd1c:	2500      	movs	r5, #0
    dd1e:	42b4      	cmp	r4, r6
    dd20:	d309      	bcc.n	dd36 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    dd22:	1a64      	subs	r4, r4, r1
    dd24:	4411      	add	r1, r2
    dd26:	600d      	str	r5, [r1, #0]
    dd28:	808c      	strh	r4, [r1, #4]
    dd2a:	6802      	ldr	r2, [r0, #0]
    dd2c:	6812      	ldr	r2, [r2, #0]
    dd2e:	6002      	str	r2, [r0, #0]
    dd30:	600a      	str	r2, [r1, #0]
    dd32:	6001      	str	r1, [r0, #0]
    dd34:	e000      	b.n	dd38 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    dd36:	2300      	movs	r3, #0
    dd38:	4618      	mov	r0, r3
    dd3a:	bd70      	pop	{r4, r5, r6, pc}

0000dd3c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dd3c:	b510      	push	{r4, lr}
    dd3e:	000c      	movs	r4, r1
    dd40:	d006      	beq.n	dd50 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    dd42:	2c08      	cmp	r4, #8
    dd44:	d209      	bcs.n	dd5a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    dd46:	f240 1195 	movw	r1, #405	; 0x195
    dd4a:	2015      	movs	r0, #21
    dd4c:	f7f7 f842 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd50:	b108      	cbz	r0, dd56 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dd52:	2100      	movs	r1, #0
    dd54:	6001      	str	r1, [r0, #0]
    dd56:	2000      	movs	r0, #0
    dd58:	bd10      	pop	{r4, pc}
    dd5a:	b118      	cbz	r0, dd64 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    dd5c:	b2a1      	uxth	r1, r4
    dd5e:	6800      	ldr	r0, [r0, #0]
    dd60:	f000 f814 	bl	dd8c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    dd64:	1d20      	adds	r0, r4, #4
    dd66:	bd10      	pop	{r4, pc}

0000dd68 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dd68:	2100      	movs	r1, #0
    dd6a:	6802      	ldr	r2, [r0, #0]
    dd6c:	e003      	b.n	dd76 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dd6e:	8893      	ldrh	r3, [r2, #4]
    dd70:	6812      	ldr	r2, [r2, #0]
    dd72:	4419      	add	r1, r3
    dd74:	b289      	uxth	r1, r1
    dd76:	2a00      	cmp	r2, #0
    dd78:	d1f9      	bne.n	dd6e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dd7a:	f000 b807 	b.w	dd8c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dd7e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dd7e:	2300      	movs	r3, #0
    dd80:	600b      	str	r3, [r1, #0]
    dd82:	808a      	strh	r2, [r1, #4]
    dd84:	6802      	ldr	r2, [r0, #0]
    dd86:	600a      	str	r2, [r1, #0]
    dd88:	6001      	str	r1, [r0, #0]
    dd8a:	4770      	bx	lr
    dd8c:	2300      	movs	r3, #0
    dd8e:	6043      	str	r3, [r0, #4]
    dd90:	1d02      	adds	r2, r0, #4
    dd92:	8101      	strh	r1, [r0, #8]
    dd94:	6002      	str	r2, [r0, #0]
    dd96:	4770      	bx	lr

0000dd98 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    dd98:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    dd9c:	3bff      	subs	r3, #255	; 0xff
    dd9e:	d001      	beq.n	dda4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    dda0:	2902      	cmp	r1, #2
    dda2:	d301      	bcc.n	dda8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    dda4:	2000      	movs	r0, #0
    dda6:	4770      	bx	lr
    dda8:	f7f7 bace 	b.w	5348 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    ddac:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    ddb0:	3aff      	subs	r2, #255	; 0xff
    ddb2:	d001      	beq.n	ddb8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    ddb4:	2902      	cmp	r1, #2
    ddb6:	d301      	bcc.n	ddbc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    ddb8:	2000      	movs	r0, #0
    ddba:	4770      	bx	lr
    ddbc:	f7f7 bafe 	b.w	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    ddc0:	b570      	push	{r4, r5, r6, lr}
    ddc2:	4605      	mov	r5, r0
    ddc4:	460c      	mov	r4, r1
    ddc6:	4608      	mov	r0, r1
    ddc8:	f000 f9a6 	bl	e118 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    ddcc:	b108      	cbz	r0, ddd2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    ddce:	2010      	movs	r0, #16
    ddd0:	bd70      	pop	{r4, r5, r6, pc}
    ddd2:	2d02      	cmp	r5, #2
    ddd4:	d301      	bcc.n	ddda <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    ddd6:	2007      	movs	r0, #7
    ddd8:	bd70      	pop	{r4, r5, r6, pc}
    ddda:	7025      	strb	r5, [r4, #0]
    dddc:	2000      	movs	r0, #0
    ddde:	8060      	strh	r0, [r4, #2]
    dde0:	bd70      	pop	{r4, r5, r6, pc}
    dde2:	b510      	push	{r4, lr}
    dde4:	4604      	mov	r4, r0
    dde6:	f7f7 fb35 	bl	5454 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    ddea:	42a0      	cmp	r0, r4
    ddec:	d901      	bls.n	ddf2 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    ddee:	2001      	movs	r0, #1
    ddf0:	bd10      	pop	{r4, pc}
    ddf2:	2000      	movs	r0, #0
    ddf4:	bd10      	pop	{r4, pc}
    ddf6:	4770      	bx	lr

0000ddf8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    ddf8:	b570      	push	{r4, r5, r6, lr}
    ddfa:	460e      	mov	r6, r1
    ddfc:	461d      	mov	r5, r3
    ddfe:	4611      	mov	r1, r2
    de00:	f000 f811 	bl	de26 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    de04:	4604      	mov	r4, r0
    de06:	4629      	mov	r1, r5
    de08:	4630      	mov	r0, r6
    de0a:	f000 f803 	bl	de14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    de0e:	4420      	add	r0, r4
    de10:	1d00      	adds	r0, r0, #4
    de12:	bd70      	pop	{r4, r5, r6, pc}
    de14:	b510      	push	{r4, lr}
    de16:	460a      	mov	r2, r1
    de18:	2101      	movs	r1, #1
    de1a:	f7ff ff1d 	bl	dc58 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    de1e:	1cc0      	adds	r0, r0, #3
    de20:	f020 0003 	bic.w	r0, r0, #3
    de24:	bd10      	pop	{r4, pc}
    de26:	b510      	push	{r4, lr}
    de28:	460a      	mov	r2, r1
    de2a:	2101      	movs	r1, #1
    de2c:	f7ff ff14 	bl	dc58 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    de30:	1cc0      	adds	r0, r0, #3
    de32:	f020 0003 	bic.w	r0, r0, #3
    de36:	bd10      	pop	{r4, pc}
    de38:	b109      	cbz	r1, de3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    de3a:	2100      	movs	r1, #0
    de3c:	e000      	b.n	de40 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    de3e:	2102      	movs	r1, #2
    de40:	1843      	adds	r3, r0, r1
    de42:	7d1a      	ldrb	r2, [r3, #20]
    de44:	2a02      	cmp	r2, #2
    de46:	d008      	beq.n	de5a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    de48:	7d5b      	ldrb	r3, [r3, #21]
    de4a:	2b02      	cmp	r3, #2
    de4c:	d009      	beq.n	de62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    de4e:	2a03      	cmp	r2, #3
    de50:	d003      	beq.n	de5a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    de52:	2b03      	cmp	r3, #3
    de54:	d005      	beq.n	de62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    de56:	2000      	movs	r0, #0
    de58:	4770      	bx	lr
    de5a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    de5e:	8b00      	ldrh	r0, [r0, #24]
    de60:	4770      	bx	lr
    de62:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    de66:	8b40      	ldrh	r0, [r0, #26]
    de68:	4770      	bx	lr
    de6a:	b109      	cbz	r1, de70 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    de6c:	2100      	movs	r1, #0
    de6e:	e000      	b.n	de72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    de70:	2102      	movs	r1, #2
    de72:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    de76:	8b01      	ldrh	r1, [r0, #24]
    de78:	b911      	cbnz	r1, de80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    de7a:	8b40      	ldrh	r0, [r0, #26]
    de7c:	2800      	cmp	r0, #0
    de7e:	d000      	beq.n	de82 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    de80:	2001      	movs	r0, #1
    de82:	4770      	bx	lr
    de84:	b538      	push	{r3, r4, r5, lr}
    de86:	7883      	ldrb	r3, [r0, #2]
    de88:	f88d 3000 	strb.w	r3, [sp]
    de8c:	9b00      	ldr	r3, [sp, #0]
    de8e:	9300      	str	r3, [sp, #0]
    de90:	f89d 3000 	ldrb.w	r3, [sp]
    de94:	b95b      	cbnz	r3, deae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb6>
    de96:	2400      	movs	r4, #0
    de98:	b10a      	cbz	r2, de9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    de9a:	2300      	movs	r3, #0
    de9c:	e000      	b.n	dea0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa8>
    de9e:	2302      	movs	r3, #2
    dea0:	18c2      	adds	r2, r0, r3
    dea2:	7d15      	ldrb	r5, [r2, #20]
    dea4:	2d02      	cmp	r5, #2
    dea6:	d004      	beq.n	deb2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    dea8:	7d52      	ldrb	r2, [r2, #21]
    deaa:	2a02      	cmp	r2, #2
    deac:	d004      	beq.n	deb8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    deae:	2000      	movs	r0, #0
    deb0:	bd38      	pop	{r3, r4, r5, pc}
    deb2:	461a      	mov	r2, r3
    deb4:	1c5b      	adds	r3, r3, #1
    deb6:	e000      	b.n	deba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    deb8:	1c5a      	adds	r2, r3, #1
    deba:	b179      	cbz	r1, dedc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    debc:	18c5      	adds	r5, r0, r3
    debe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dec2:	752c      	strb	r4, [r5, #20]
    dec4:	831c      	strh	r4, [r3, #24]
    dec6:	2303      	movs	r3, #3
    dec8:	1884      	adds	r4, r0, r2
    deca:	7523      	strb	r3, [r4, #20]
    decc:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    ded0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    ded4:	685b      	ldr	r3, [r3, #4]
    ded6:	600b      	str	r3, [r1, #0]
    ded8:	8b00      	ldrh	r0, [r0, #24]
    deda:	8088      	strh	r0, [r1, #4]
    dedc:	2001      	movs	r0, #1
    dede:	bd38      	pop	{r3, r4, r5, pc}
    dee0:	b510      	push	{r4, lr}
    dee2:	b109      	cbz	r1, dee8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    dee4:	2100      	movs	r1, #0
    dee6:	e000      	b.n	deea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    dee8:	2102      	movs	r1, #2
    deea:	1843      	adds	r3, r0, r1
    deec:	7d1c      	ldrb	r4, [r3, #20]
    deee:	4294      	cmp	r4, r2
    def0:	d103      	bne.n	defa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    def2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    def6:	8b00      	ldrh	r0, [r0, #24]
    def8:	bd10      	pop	{r4, pc}
    defa:	7d5b      	ldrb	r3, [r3, #21]
    defc:	4293      	cmp	r3, r2
    defe:	d103      	bne.n	df08 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    df00:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    df04:	8b40      	ldrh	r0, [r0, #26]
    df06:	bd10      	pop	{r4, pc}
    df08:	2000      	movs	r0, #0
    df0a:	bd10      	pop	{r4, pc}
    df0c:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    df10:	d201      	bcs.n	df16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    df12:	0841      	lsrs	r1, r0, #1
    df14:	e000      	b.n	df18 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    df16:	21ff      	movs	r1, #255	; 0xff
    df18:	1a40      	subs	r0, r0, r1
    df1a:	f240 6172 	movw	r1, #1650	; 0x672
    df1e:	4288      	cmp	r0, r1
    df20:	db00      	blt.n	df24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    df22:	4608      	mov	r0, r1
    df24:	b280      	uxth	r0, r0
    df26:	4770      	bx	lr

0000df28 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    df28:	2101      	movs	r1, #1
    df2a:	f7ff bf85 	b.w	de38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    df2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df32:	4606      	mov	r6, r0
    df34:	f342 0780 	sbfx	r7, r2, #2, #1
    df38:	7848      	ldrb	r0, [r1, #1]
    df3a:	460c      	mov	r4, r1
    df3c:	f022 0504 	bic.w	r5, r2, #4
    df40:	1c7f      	adds	r7, r7, #1
    df42:	b100      	cbz	r0, df46 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    df44:	b90d      	cbnz	r5, df4a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    df46:	4328      	orrs	r0, r5
    df48:	d104      	bne.n	df54 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    df4a:	b145      	cbz	r5, df5e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    df4c:	2100      	movs	r1, #0
    df4e:	4620      	mov	r0, r4
    df50:	f7f7 fb88 	bl	5664 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    df54:	20ff      	movs	r0, #255	; 0xff
    df56:	70a0      	strb	r0, [r4, #2]
    df58:	b11f      	cbz	r7, df62 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    df5a:	2000      	movs	r0, #0
    df5c:	e002      	b.n	df64 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    df5e:	2101      	movs	r1, #1
    df60:	e7f5      	b.n	df4e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    df62:	2002      	movs	r0, #2
    df64:	1821      	adds	r1, r4, r0
    df66:	7d09      	ldrb	r1, [r1, #20]
    df68:	2903      	cmp	r1, #3
    df6a:	d102      	bne.n	df72 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    df6c:	2d02      	cmp	r5, #2
    df6e:	d000      	beq.n	df72 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    df70:	1c40      	adds	r0, r0, #1
    df72:	1822      	adds	r2, r4, r0
    df74:	2101      	movs	r1, #1
    df76:	7511      	strb	r1, [r2, #20]
    df78:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    df7c:	2200      	movs	r2, #0
    df7e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    df82:	830a      	strh	r2, [r1, #24]
    df84:	6840      	ldr	r0, [r0, #4]
    df86:	70a2      	strb	r2, [r4, #2]
    df88:	4631      	mov	r1, r6
    df8a:	f362 010f 	bfi	r1, r2, #0, #16
    df8e:	e9c6 0100 	strd	r0, r1, [r6]
    df92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000df96 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    df96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df9a:	461e      	mov	r6, r3
    df9c:	4613      	mov	r3, r2
    df9e:	4604      	mov	r4, r0
    dfa0:	b109      	cbz	r1, dfa6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    dfa2:	2000      	movs	r0, #0
    dfa4:	e000      	b.n	dfa8 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    dfa6:	2002      	movs	r0, #2
    dfa8:	21ff      	movs	r1, #255	; 0xff
    dfaa:	70a1      	strb	r1, [r4, #2]
    dfac:	1821      	adds	r1, r4, r0
    dfae:	7d0a      	ldrb	r2, [r1, #20]
    dfb0:	2a01      	cmp	r2, #1
    dfb2:	d003      	beq.n	dfbc <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    dfb4:	7d49      	ldrb	r1, [r1, #21]
    dfb6:	2901      	cmp	r1, #1
    dfb8:	d10c      	bne.n	dfd4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    dfba:	1c40      	adds	r0, r0, #1
    dfbc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    dfc0:	2700      	movs	r7, #0
    dfc2:	8b29      	ldrh	r1, [r5, #24]
    dfc4:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    dfc8:	198a      	adds	r2, r1, r6
    dfca:	4562      	cmp	r2, ip
    dfcc:	d905      	bls.n	dfda <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    dfce:	4420      	add	r0, r4
    dfd0:	832f      	strh	r7, [r5, #24]
    dfd2:	7507      	strb	r7, [r0, #20]
    dfd4:	2000      	movs	r0, #0
    dfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfda:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    dfde:	4632      	mov	r2, r6
    dfe0:	6840      	ldr	r0, [r0, #4]
    dfe2:	4408      	add	r0, r1
    dfe4:	4619      	mov	r1, r3
    dfe6:	f7fe febc 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dfea:	8b28      	ldrh	r0, [r5, #24]
    dfec:	4430      	add	r0, r6
    dfee:	8328      	strh	r0, [r5, #24]
    dff0:	70a7      	strb	r7, [r4, #2]
    dff2:	2001      	movs	r0, #1
    dff4:	e7ef      	b.n	dfd6 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000dff6 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    dff6:	2202      	movs	r2, #2
    dff8:	2100      	movs	r1, #0
    dffa:	f7ff bf71 	b.w	dee0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000dffe <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    dffe:	b510      	push	{r4, lr}
    e000:	2101      	movs	r1, #1
    e002:	f7ff ff32 	bl	de6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    e006:	2800      	cmp	r0, #0
    e008:	d000      	beq.n	e00c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    e00a:	2001      	movs	r0, #1
    e00c:	bd10      	pop	{r4, pc}

0000e00e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    e00e:	2201      	movs	r2, #1
    e010:	f7ff bf38 	b.w	de84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000e014 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    e014:	2200      	movs	r2, #0
    e016:	f7ff bf35 	b.w	de84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    e01a:	b570      	push	{r4, r5, r6, lr}
    e01c:	b109      	cbz	r1, e022 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    e01e:	2300      	movs	r3, #0
    e020:	e000      	b.n	e024 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    e022:	2302      	movs	r3, #2
    e024:	21ff      	movs	r1, #255	; 0xff
    e026:	7081      	strb	r1, [r0, #2]
    e028:	18c1      	adds	r1, r0, r3
    e02a:	2402      	movs	r4, #2
    e02c:	7d0d      	ldrb	r5, [r1, #20]
    e02e:	2d01      	cmp	r5, #1
    e030:	d007      	beq.n	e042 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    e032:	7d4d      	ldrb	r5, [r1, #21]
    e034:	2d01      	cmp	r5, #1
    e036:	d009      	beq.n	e04c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    e038:	f44f 718b 	mov.w	r1, #278	; 0x116
    e03c:	2009      	movs	r0, #9
    e03e:	f7f6 fec9 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e042:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e046:	831a      	strh	r2, [r3, #24]
    e048:	750c      	strb	r4, [r1, #20]
    e04a:	e003      	b.n	e054 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    e04c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    e050:	835a      	strh	r2, [r3, #26]
    e052:	754c      	strb	r4, [r1, #21]
    e054:	2100      	movs	r1, #0
    e056:	7081      	strb	r1, [r0, #2]
    e058:	bd70      	pop	{r4, r5, r6, pc}

0000e05a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    e05a:	2101      	movs	r1, #1
    e05c:	7001      	strb	r1, [r0, #0]
    e05e:	4770      	bx	lr

0000e060 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    e060:	2201      	movs	r2, #1
    e062:	4611      	mov	r1, r2
    e064:	f7ff bf3c 	b.w	dee0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e068 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    e068:	2201      	movs	r2, #1
    e06a:	2100      	movs	r1, #0
    e06c:	f7ff bf38 	b.w	dee0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000e070 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    e070:	2100      	movs	r1, #0
    e072:	f7ff bee1 	b.w	de38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    e076:	2800      	cmp	r0, #0
    e078:	db09      	blt.n	e08e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    e07a:	f000 021f 	and.w	r2, r0, #31
    e07e:	2101      	movs	r1, #1
    e080:	4091      	lsls	r1, r2
    e082:	0940      	lsrs	r0, r0, #5
    e084:	0080      	lsls	r0, r0, #2
    e086:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e08a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e08e:	4770      	bx	lr
    e090:	2800      	cmp	r0, #0
    e092:	db0d      	blt.n	e0b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    e094:	f000 021f 	and.w	r2, r0, #31
    e098:	2101      	movs	r1, #1
    e09a:	4091      	lsls	r1, r2
    e09c:	0940      	lsrs	r0, r0, #5
    e09e:	0080      	lsls	r0, r0, #2
    e0a0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e0a4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    e0a8:	f3bf 8f4f 	dsb	sy
    e0ac:	f3bf 8f6f 	isb	sy
    e0b0:	4770      	bx	lr
    e0b2:	b510      	push	{r4, lr}
    e0b4:	200e      	movs	r0, #14
    e0b6:	f7ff ffeb 	bl	e090 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e0ba:	200e      	movs	r0, #14
    e0bc:	f7ff ffdb 	bl	e076 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e0c0:	200f      	movs	r0, #15
    e0c2:	f7ff ffe5 	bl	e090 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    e0c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e0ca:	200f      	movs	r0, #15
    e0cc:	f7ff bfd3 	b.w	e076 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    e0d0:	2800      	cmp	r0, #0
    e0d2:	db09      	blt.n	e0e8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    e0d4:	f000 021f 	and.w	r2, r0, #31
    e0d8:	2101      	movs	r1, #1
    e0da:	4091      	lsls	r1, r2
    e0dc:	0940      	lsrs	r0, r0, #5
    e0de:	0080      	lsls	r0, r0, #2
    e0e0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e0e4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e0e8:	4770      	bx	lr
    e0ea:	5840      	ldr	r0, [r0, r1]
    e0ec:	2800      	cmp	r0, #0
    e0ee:	d000      	beq.n	e0f2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    e0f0:	2001      	movs	r0, #1
    e0f2:	4770      	bx	lr

0000e0f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    e0f4:	b510      	push	{r4, lr}
    e0f6:	4604      	mov	r4, r0
    e0f8:	4620      	mov	r0, r4
    e0fa:	f7f7 fbb1 	bl	5860 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>
    e0fe:	2811      	cmp	r0, #17
    e100:	d0fa      	beq.n	e0f8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    e102:	bd10      	pop	{r4, pc}

0000e104 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e104:	b510      	push	{r4, lr}
    e106:	f7ff fff5 	bl	e0f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    e10a:	2800      	cmp	r0, #0
    e10c:	d003      	beq.n	e116 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    e10e:	21a0      	movs	r1, #160	; 0xa0
    e110:	201d      	movs	r0, #29
    e112:	f7f6 fe5f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e116:	bd10      	pop	{r4, pc}

0000e118 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e118:	b108      	cbz	r0, e11e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e11a:	2000      	movs	r0, #0
    e11c:	4770      	bx	lr
    e11e:	2001      	movs	r0, #1
    e120:	4770      	bx	lr

0000e122 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e122:	f7f7 bcef 	b.w	5b04 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e126 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e126:	f7f7 bcdd 	b.w	5ae4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e12a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    e12a:	b510      	push	{r4, lr}
    e12c:	4604      	mov	r4, r0
    e12e:	4608      	mov	r0, r1
    e130:	4619      	mov	r1, r3
    e132:	4294      	cmp	r4, r2
    e134:	d103      	bne.n	e13e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x14>
    e136:	2206      	movs	r2, #6
    e138:	f7fe fe01 	bl	cd3e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    e13c:	b108      	cbz	r0, e142 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x18>
    e13e:	2000      	movs	r0, #0
    e140:	bd10      	pop	{r4, pc}
    e142:	2001      	movs	r0, #1
    e144:	bd10      	pop	{r4, pc}

0000e146 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e146:	b510      	push	{r4, lr}
    e148:	2900      	cmp	r1, #0
    e14a:	4604      	mov	r4, r0
    e14c:	f04f 0106 	mov.w	r1, #6
    e150:	d002      	beq.n	e158 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e152:	f7f6 fecb 	bl	4eec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e156:	e001      	b.n	e15c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e158:	f7f6 fed6 	bl	4f08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e15c:	7960      	ldrb	r0, [r4, #5]
    e15e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e162:	7160      	strb	r0, [r4, #5]
    e164:	bd10      	pop	{r4, pc}

0000e166 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e166:	4770      	bx	lr

0000e168 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e168:	b530      	push	{r4, r5, lr}
    e16a:	460c      	mov	r4, r1
    e16c:	4605      	mov	r5, r0
    e16e:	b08d      	sub	sp, #52	; 0x34
    e170:	f04f 0103 	mov.w	r1, #3
    e174:	f104 0003 	add.w	r0, r4, #3
    e178:	b112      	cbz	r2, e180 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e17a:	f7f6 feb7 	bl	4eec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e17e:	e001      	b.n	e184 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e180:	f7f6 fec2 	bl	4f08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e184:	7960      	ldrb	r0, [r4, #5]
    e186:	220d      	movs	r2, #13
    e188:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e18c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e190:	7160      	strb	r0, [r4, #5]
    e192:	2100      	movs	r1, #0
    e194:	a804      	add	r0, sp, #16
    e196:	f7fe fe5e 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e19a:	78e0      	ldrb	r0, [r4, #3]
    e19c:	f88d 001f 	strb.w	r0, [sp, #31]
    e1a0:	7920      	ldrb	r0, [r4, #4]
    e1a2:	f88d 001e 	strb.w	r0, [sp, #30]
    e1a6:	7960      	ldrb	r0, [r4, #5]
    e1a8:	f88d 001d 	strb.w	r0, [sp, #29]
    e1ac:	2210      	movs	r2, #16
    e1ae:	4629      	mov	r1, r5
    e1b0:	4668      	mov	r0, sp
    e1b2:	f7fe fdd6 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e1b6:	4668      	mov	r0, sp
    e1b8:	f7ff ffa4 	bl	e104 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e1bc:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e1c0:	7020      	strb	r0, [r4, #0]
    e1c2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e1c6:	7060      	strb	r0, [r4, #1]
    e1c8:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e1cc:	70a0      	strb	r0, [r4, #2]
    e1ce:	b00d      	add	sp, #52	; 0x34
    e1d0:	bd30      	pop	{r4, r5, pc}

0000e1d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e1d2:	f7f8 b87b 	b.w	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    e1d6:	07c1      	lsls	r1, r0, #31
    e1d8:	d001      	beq.n	e1de <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    e1da:	2001      	movs	r0, #1
    e1dc:	4770      	bx	lr
    e1de:	0780      	lsls	r0, r0, #30
    e1e0:	d501      	bpl.n	e1e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    e1e2:	2002      	movs	r0, #2
    e1e4:	4770      	bx	lr
    e1e6:	2000      	movs	r0, #0
    e1e8:	4770      	bx	lr
    e1ea:	b510      	push	{r4, lr}
    e1ec:	2801      	cmp	r0, #1
    e1ee:	d008      	beq.n	e202 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e1f0:	2802      	cmp	r0, #2
    e1f2:	d004      	beq.n	e1fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    e1f4:	f240 31be 	movw	r1, #958	; 0x3be
    e1f8:	2006      	movs	r0, #6
    e1fa:	f7f6 fdeb 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1fe:	2001      	movs	r0, #1
    e200:	bd10      	pop	{r4, pc}
    e202:	2000      	movs	r0, #0
    e204:	bd10      	pop	{r4, pc}
    e206:	2900      	cmp	r1, #0
    e208:	d004      	beq.n	e214 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    e20a:	2801      	cmp	r0, #1
    e20c:	d003      	beq.n	e216 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e20e:	2901      	cmp	r1, #1
    e210:	d001      	beq.n	e216 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    e212:	2002      	movs	r0, #2
    e214:	4770      	bx	lr
    e216:	2001      	movs	r0, #1
    e218:	4770      	bx	lr
    e21a:	f7ff bc6a 	b.w	daf2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e21e <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e21e:	2101      	movs	r1, #1
    e220:	f7f8 bbe0 	b.w	69e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e224 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e224:	b510      	push	{r4, lr}
    e226:	f002 fc8c 	bl	10b42 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e22a:	b118      	cbz	r0, e234 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e230:	f7fd b968 	b.w	b504 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e234:	20ff      	movs	r0, #255	; 0xff
    e236:	bd10      	pop	{r4, pc}

0000e238 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e238:	b510      	push	{r4, lr}
    e23a:	f7f8 fc1b 	bl	6a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e23e:	2810      	cmp	r0, #16
    e240:	d003      	beq.n	e24a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e242:	f7f8 fbe7 	bl	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e246:	2810      	cmp	r0, #16
    e248:	d100      	bne.n	e24c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e24a:	2008      	movs	r0, #8
    e24c:	bd10      	pop	{r4, pc}

0000e24e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e24e:	b510      	push	{r4, lr}
    e250:	f7f8 fc10 	bl	6a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e254:	2810      	cmp	r0, #16
    e256:	d007      	beq.n	e268 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e258:	f7f8 fbdc 	bl	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e25c:	2810      	cmp	r0, #16
    e25e:	d003      	beq.n	e268 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e260:	f7f8 fc4e 	bl	6b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>
    e264:	2001      	movs	r0, #1
    e266:	bd10      	pop	{r4, pc}
    e268:	2000      	movs	r0, #0
    e26a:	bd10      	pop	{r4, pc}

0000e26c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e26c:	b510      	push	{r4, lr}
    e26e:	f7f8 fc01 	bl	6a74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e272:	2810      	cmp	r0, #16
    e274:	d003      	beq.n	e27e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e276:	f7f8 fc8b 	bl	6b90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>
    e27a:	2001      	movs	r0, #1
    e27c:	bd10      	pop	{r4, pc}
    e27e:	2000      	movs	r0, #0
    e280:	bd10      	pop	{r4, pc}

0000e282 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e282:	b570      	push	{r4, r5, r6, lr}
    e284:	460e      	mov	r6, r1
    e286:	b08c      	sub	sp, #48	; 0x30
    e288:	4614      	mov	r4, r2
    e28a:	4601      	mov	r1, r0
    e28c:	461d      	mov	r5, r3
    e28e:	2210      	movs	r2, #16
    e290:	4668      	mov	r0, sp
    e292:	f000 f91a 	bl	e4ca <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e296:	2210      	movs	r2, #16
    e298:	4631      	mov	r1, r6
    e29a:	a804      	add	r0, sp, #16
    e29c:	f000 f915 	bl	e4ca <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e2a0:	4668      	mov	r0, sp
    e2a2:	f7ff ff2f 	bl	e104 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e2a6:	a908      	add	r1, sp, #32
    e2a8:	f04f 0210 	mov.w	r2, #16
    e2ac:	4628      	mov	r0, r5
    e2ae:	b11c      	cbz	r4, e2b8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e2b0:	f000 f90b 	bl	e4ca <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e2b4:	b00c      	add	sp, #48	; 0x30
    e2b6:	bd70      	pop	{r4, r5, r6, pc}
    e2b8:	f7fe fd53 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2bc:	e7fa      	b.n	e2b4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e2be:	b510      	push	{r4, lr}
    e2c0:	460c      	mov	r4, r1
    e2c2:	2100      	movs	r1, #0
    e2c4:	f7ff fd72 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e2c8:	6060      	str	r0, [r4, #4]
    e2ca:	b118      	cbz	r0, e2d4 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    e2cc:	2001      	movs	r0, #1
    e2ce:	7020      	strb	r0, [r4, #0]
    e2d0:	2000      	movs	r0, #0
    e2d2:	bd10      	pop	{r4, pc}
    e2d4:	2002      	movs	r0, #2
    e2d6:	bd10      	pop	{r4, pc}

0000e2d8 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e2d8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e2dc:	4348      	muls	r0, r1
    e2de:	4770      	bx	lr

0000e2e0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e2e0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e2e4:	fbb0 f0f1 	udiv	r0, r0, r1
    e2e8:	b280      	uxth	r0, r0
    e2ea:	4770      	bx	lr

0000e2ec <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e2ec:	b570      	push	{r4, r5, r6, lr}
    e2ee:	4604      	mov	r4, r0
    e2f0:	4290      	cmp	r0, r2
    e2f2:	d20b      	bcs.n	e30c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e2f4:	1b10      	subs	r0, r2, r4
    e2f6:	2865      	cmp	r0, #101	; 0x65
    e2f8:	d200      	bcs.n	e2fc <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e2fa:	2065      	movs	r0, #101	; 0x65
    e2fc:	1825      	adds	r5, r4, r0
    e2fe:	428d      	cmp	r5, r1
    e300:	d803      	bhi.n	e30a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e302:	2103      	movs	r1, #3
    e304:	f7f4 f88a 	bl	241c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e308:	b108      	cbz	r0, e30e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e30a:	4620      	mov	r0, r4
    e30c:	bd70      	pop	{r4, r5, r6, pc}
    e30e:	4628      	mov	r0, r5
    e310:	bd70      	pop	{r4, r5, r6, pc}

0000e312 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e312:	b510      	push	{r4, lr}
    e314:	f1a2 030f 	sub.w	r3, r2, #15
    e318:	290c      	cmp	r1, #12
    e31a:	d244      	bcs.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e31c:	e8df f001 	tbb	[pc, r1]
    e320:	120d0806 	.word	0x120d0806
    e324:	241c1815 	.word	0x241c1815
    e328:	312a4127 	.word	0x312a4127
    e32c:	b3c2      	cbz	r2, e3a0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    e32e:	e03a      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e330:	2a07      	cmp	r2, #7
    e332:	d03a      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e334:	2a08      	cmp	r2, #8
    e336:	d038      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e338:	e035      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e33a:	2a0c      	cmp	r2, #12
    e33c:	d035      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e33e:	2a0b      	cmp	r2, #11
    e340:	d033      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e342:	e030      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e344:	2a0d      	cmp	r2, #13
    e346:	d030      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e348:	e02d      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e34a:	2b0c      	cmp	r3, #12
    e34c:	d92d      	bls.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e34e:	e02a      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e350:	3a10      	subs	r2, #16
    e352:	2a0b      	cmp	r2, #11
    e354:	d929      	bls.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e356:	e026      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e358:	2b03      	cmp	r3, #3
    e35a:	d926      	bls.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e35c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    e360:	b308      	cbz	r0, e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e362:	2a1b      	cmp	r2, #27
    e364:	d921      	bls.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e366:	e01e      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e368:	2a04      	cmp	r2, #4
    e36a:	d01e      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e36c:	e01b      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e36e:	2a06      	cmp	r2, #6
    e370:	d01b      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e372:	e018      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e374:	2a1c      	cmp	r2, #28
    e376:	d018      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e378:	2a1d      	cmp	r2, #29
    e37a:	d016      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e37c:	2a1e      	cmp	r2, #30
    e37e:	d014      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e380:	e011      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e382:	2a1f      	cmp	r2, #31
    e384:	d011      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e386:	2a20      	cmp	r2, #32
    e388:	d00f      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e38a:	2a21      	cmp	r2, #33	; 0x21
    e38c:	d00d      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e38e:	2a22      	cmp	r2, #34	; 0x22
    e390:	d00b      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e392:	2a23      	cmp	r2, #35	; 0x23
    e394:	d009      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e396:	2a24      	cmp	r2, #36	; 0x24
    e398:	d007      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e39a:	2a26      	cmp	r2, #38	; 0x26
    e39c:	d005      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e39e:	e002      	b.n	e3a6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    e3a0:	e003      	b.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e3a2:	2a0e      	cmp	r2, #14
    e3a4:	d001      	beq.n	e3aa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    e3a6:	2000      	movs	r0, #0
    e3a8:	bd10      	pop	{r4, pc}
    e3aa:	2001      	movs	r0, #1
    e3ac:	bd10      	pop	{r4, pc}

0000e3ae <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e3ae:	280c      	cmp	r0, #12
    e3b0:	d013      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3b2:	280b      	cmp	r0, #11
    e3b4:	d011      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3b6:	280d      	cmp	r0, #13
    e3b8:	d00f      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3ba:	281f      	cmp	r0, #31
    e3bc:	d00d      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3be:	2820      	cmp	r0, #32
    e3c0:	d00b      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3c2:	2821      	cmp	r0, #33	; 0x21
    e3c4:	d009      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3c6:	2822      	cmp	r0, #34	; 0x22
    e3c8:	d007      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3ca:	2823      	cmp	r0, #35	; 0x23
    e3cc:	d005      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3ce:	2824      	cmp	r0, #36	; 0x24
    e3d0:	d003      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3d2:	2826      	cmp	r0, #38	; 0x26
    e3d4:	d001      	beq.n	e3da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    e3d6:	2000      	movs	r0, #0
    e3d8:	4770      	bx	lr
    e3da:	2001      	movs	r0, #1
    e3dc:	4770      	bx	lr

0000e3de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e3de:	f011 0f0c 	tst.w	r1, #12
    e3e2:	d016      	beq.n	e412 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e3e4:	074a      	lsls	r2, r1, #29
    e3e6:	f44f 7116 	mov.w	r1, #600	; 0x258
    e3ea:	2a00      	cmp	r2, #0
    e3ec:	da02      	bge.n	e3f4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e3ee:	f04f 0210 	mov.w	r2, #16
    e3f2:	e001      	b.n	e3f8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e3f4:	f04f 0240 	mov.w	r2, #64	; 0x40
    e3f8:	da01      	bge.n	e3fe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e3fa:	f04f 0196 	mov.w	r1, #150	; 0x96
    e3fe:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e402:	eba0 0301 	sub.w	r3, r0, r1
    e406:	4288      	cmp	r0, r1
    e408:	d910      	bls.n	e42c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e40a:	fb93 f0f2 	sdiv	r0, r3, r2
    e40e:	b280      	uxth	r0, r0
    e410:	4770      	bx	lr
    e412:	2902      	cmp	r1, #2
    e414:	d002      	beq.n	e41c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    e416:	2870      	cmp	r0, #112	; 0x70
    e418:	d80a      	bhi.n	e430 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    e41a:	e007      	b.n	e42c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e41c:	283c      	cmp	r0, #60	; 0x3c
    e41e:	d905      	bls.n	e42c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e420:	383c      	subs	r0, #60	; 0x3c
    e422:	17c1      	asrs	r1, r0, #31
    e424:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e428:	1080      	asrs	r0, r0, #2
    e42a:	e7f0      	b.n	e40e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e42c:	2000      	movs	r0, #0
    e42e:	e7ee      	b.n	e40e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    e430:	3870      	subs	r0, #112	; 0x70
    e432:	17c1      	asrs	r1, r0, #31
    e434:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e438:	10c0      	asrs	r0, r0, #3
    e43a:	e7e8      	b.n	e40e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000e43c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e43c:	6809      	ldr	r1, [r1, #0]
    e43e:	f8c0 106a 	str.w	r1, [r0, #106]	; 0x6a
    e442:	4770      	bx	lr

0000e444 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    e444:	07c1      	lsls	r1, r0, #31
    e446:	d001      	beq.n	e44c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    e448:	2001      	movs	r0, #1
    e44a:	4770      	bx	lr
    e44c:	0781      	lsls	r1, r0, #30
    e44e:	d501      	bpl.n	e454 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    e450:	2002      	movs	r0, #2
    e452:	4770      	bx	lr
    e454:	0740      	lsls	r0, r0, #29
    e456:	d501      	bpl.n	e45c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    e458:	2008      	movs	r0, #8
    e45a:	4770      	bx	lr
    e45c:	2000      	movs	r0, #0
    e45e:	4770      	bx	lr

0000e460 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    e460:	b510      	push	{r4, lr}
    e462:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e466:	2901      	cmp	r1, #1
    e468:	d006      	beq.n	e478 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    e46a:	2902      	cmp	r1, #2
    e46c:	d005      	beq.n	e47a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    e46e:	f240 31a1 	movw	r1, #929	; 0x3a1
    e472:	2029      	movs	r0, #41	; 0x29
    e474:	f7f6 fcae 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e478:	b108      	cbz	r0, e47e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    e47a:	4610      	mov	r0, r2
    e47c:	bd10      	pop	{r4, pc}
    e47e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    e482:	bd10      	pop	{r4, pc}

0000e484 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e488:	460c      	mov	r4, r1
    e48a:	4605      	mov	r5, r0
    e48c:	68c6      	ldr	r6, [r0, #12]
    e48e:	f7f4 fbdf 	bl	2c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e492:	b198      	cbz	r0, e4bc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    e494:	b1bc      	cbz	r4, e4c6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e496:	4630      	mov	r0, r6
    e498:	68e9      	ldr	r1, [r5, #12]
    e49a:	f7f4 f8c9 	bl	2630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e49e:	2800      	cmp	r0, #0
    e4a0:	dd11      	ble.n	e4c6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    e4a2:	4420      	add	r0, r4
    e4a4:	1e40      	subs	r0, r0, #1
    e4a6:	fbb0 f7f4 	udiv	r7, r0, r4
    e4aa:	fb07 f104 	mul.w	r1, r7, r4
    e4ae:	4630      	mov	r0, r6
    e4b0:	f7f4 f88c 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e4b4:	60e8      	str	r0, [r5, #12]
    e4b6:	4638      	mov	r0, r7
    e4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4bc:	f240 2126 	movw	r1, #550	; 0x226
    e4c0:	2029      	movs	r0, #41	; 0x29
    e4c2:	f7f6 fc87 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4c6:	2000      	movs	r0, #0
    e4c8:	e7f6      	b.n	e4b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000e4ca <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e4ca:	b530      	push	{r4, r5, lr}
    e4cc:	4613      	mov	r3, r2
    e4ce:	e006      	b.n	e4de <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e4d0:	18cc      	adds	r4, r1, r3
    e4d2:	1ad5      	subs	r5, r2, r3
    e4d4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e4d8:	1e5b      	subs	r3, r3, #1
    e4da:	5544      	strb	r4, [r0, r5]
    e4dc:	b2db      	uxtb	r3, r3
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d1f6      	bne.n	e4d0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e4e2:	bd30      	pop	{r4, r5, pc}

0000e4e4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    e4e4:	b538      	push	{r3, r4, r5, lr}
    e4e6:	4605      	mov	r5, r0
    e4e8:	460c      	mov	r4, r1
    e4ea:	4668      	mov	r0, sp
    e4ec:	f7fd fd16 	bl	bf1c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e4f0:	b310      	cbz	r0, e538 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e4f2:	f99d 0000 	ldrsb.w	r0, [sp]
    e4f6:	7260      	strb	r0, [r4, #9]
    e4f8:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e4fc:	72a1      	strb	r1, [r4, #10]
    e4fe:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e502:	2200      	movs	r2, #0
    e504:	1a41      	subs	r1, r0, r1
    e506:	d500      	bpl.n	e50a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e508:	4249      	negs	r1, r1
    e50a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    e50e:	428b      	cmp	r3, r1
    e510:	dc10      	bgt.n	e534 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e512:	2bff      	cmp	r3, #255	; 0xff
    e514:	d00e      	beq.n	e534 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e516:	7b21      	ldrb	r1, [r4, #12]
    e518:	1c49      	adds	r1, r1, #1
    e51a:	b2c9      	uxtb	r1, r1
    e51c:	7321      	strb	r1, [r4, #12]
    e51e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    e522:	4299      	cmp	r1, r3
    e524:	d802      	bhi.n	e52c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e526:	7ae1      	ldrb	r1, [r4, #11]
    e528:	297f      	cmp	r1, #127	; 0x7f
    e52a:	d103      	bne.n	e534 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e52c:	72e0      	strb	r0, [r4, #11]
    e52e:	2000      	movs	r0, #0
    e530:	7320      	strb	r0, [r4, #12]
    e532:	2201      	movs	r2, #1
    e534:	4610      	mov	r0, r2
    e536:	bd38      	pop	{r3, r4, r5, pc}
    e538:	207f      	movs	r0, #127	; 0x7f
    e53a:	7260      	strb	r0, [r4, #9]
    e53c:	2000      	movs	r0, #0
    e53e:	bd38      	pop	{r3, r4, r5, pc}

0000e540 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e540:	2300      	movs	r3, #0
    e542:	6283      	str	r3, [r0, #40]	; 0x28
    e544:	8602      	strh	r2, [r0, #48]	; 0x30
    e546:	f240 2371 	movw	r3, #625	; 0x271
    e54a:	435a      	muls	r2, r3
    e54c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e550:	1e52      	subs	r2, r2, #1
    e552:	fbb2 f1f1 	udiv	r1, r2, r1
    e556:	62c1      	str	r1, [r0, #44]	; 0x2c
    e558:	4770      	bx	lr

0000e55a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e55a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e55e:	4607      	mov	r7, r0
    e560:	4690      	mov	r8, r2
    e562:	468b      	mov	fp, r1
    e564:	2601      	movs	r6, #1
    e566:	4608      	mov	r0, r1
    e568:	f000 f946 	bl	e7f8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e56c:	4682      	mov	sl, r0
    e56e:	4658      	mov	r0, fp
    e570:	f000 f94e 	bl	e810 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e574:	4681      	mov	r9, r0
    e576:	f7ff ff65 	bl	e444 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e57a:	4604      	mov	r4, r0
    e57c:	4650      	mov	r0, sl
    e57e:	f7ff ff61 	bl	e444 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e582:	4605      	mov	r5, r0
    e584:	ea54 0005 	orrs.w	r0, r4, r5
    e588:	d100      	bne.n	e58c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e58a:	2600      	movs	r6, #0
    e58c:	f7fc ff3c 	bl	b408 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e590:	ea10 0f09 	tst.w	r0, r9
    e594:	d100      	bne.n	e598 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e596:	2400      	movs	r4, #0
    e598:	f7fc ff36 	bl	b408 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e59c:	ea10 0f0a 	tst.w	r0, sl
    e5a0:	d100      	bne.n	e5a4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e5a2:	2500      	movs	r5, #0
    e5a4:	f897 006e 	ldrb.w	r0, [r7, #110]	; 0x6e
    e5a8:	42a0      	cmp	r0, r4
    e5aa:	d100      	bne.n	e5ae <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e5ac:	2400      	movs	r4, #0
    e5ae:	f888 4000 	strb.w	r4, [r8]
    e5b2:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
    e5b6:	42a8      	cmp	r0, r5
    e5b8:	d100      	bne.n	e5bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e5ba:	2500      	movs	r5, #0
    e5bc:	f888 5001 	strb.w	r5, [r8, #1]
    e5c0:	b974      	cbnz	r4, e5e0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e5c2:	b96d      	cbnz	r5, e5e0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e5c4:	4658      	mov	r0, fp
    e5c6:	f000 f921 	bl	e80c <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e5ca:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
    e5ce:	1a40      	subs	r0, r0, r1
    e5d0:	b200      	sxth	r0, r0
    e5d2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e5d6:	4288      	cmp	r0, r1
    e5d8:	dc01      	bgt.n	e5de <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e5da:	2800      	cmp	r0, #0
    e5dc:	dc00      	bgt.n	e5e0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e5de:	2600      	movs	r6, #0
    e5e0:	4630      	mov	r0, r6
    e5e2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e5e6 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e5e6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e5ea:	4348      	muls	r0, r1
    e5ec:	4770      	bx	lr

0000e5ee <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e5ee:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e5f2:	fb10 f001 	smulbb	r0, r0, r1
    e5f6:	4770      	bx	lr

0000e5f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	2300      	movs	r3, #0
    e5fc:	461a      	mov	r2, r3
    e5fe:	e003      	b.n	e608 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e600:	5c84      	ldrb	r4, [r0, r2]
    e602:	4323      	orrs	r3, r4
    e604:	1c52      	adds	r2, r2, #1
    e606:	b2d2      	uxtb	r2, r2
    e608:	428a      	cmp	r2, r1
    e60a:	d3f9      	bcc.n	e600 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e60c:	b10b      	cbz	r3, e612 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e60e:	2000      	movs	r0, #0
    e610:	bd10      	pop	{r4, pc}
    e612:	2001      	movs	r0, #1
    e614:	bd10      	pop	{r4, pc}

0000e616 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e616:	b510      	push	{r4, lr}
    e618:	4604      	mov	r4, r0
    e61a:	f890 0020 	ldrb.w	r0, [r0, #32]
    e61e:	b108      	cbz	r0, e624 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e620:	2825      	cmp	r0, #37	; 0x25
    e622:	d901      	bls.n	e628 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e624:	2012      	movs	r0, #18
    e626:	bd10      	pop	{r4, pc}
    e628:	b12a      	cbz	r2, e636 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e62a:	7d60      	ldrb	r0, [r4, #21]
    e62c:	b128      	cbz	r0, e63a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e62e:	2801      	cmp	r0, #1
    e630:	d009      	beq.n	e646 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e632:	201f      	movs	r0, #31
    e634:	bd10      	pop	{r4, pc}
    e636:	2000      	movs	r0, #0
    e638:	bd10      	pop	{r4, pc}
    e63a:	4620      	mov	r0, r4
    e63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e640:	4611      	mov	r1, r2
    e642:	f7f8 bb95 	b.w	6d70 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e646:	88a2      	ldrh	r2, [r4, #4]
    e648:	6949      	ldr	r1, [r1, #20]
    e64a:	f104 0015 	add.w	r0, r4, #21
    e64e:	f7f8 fb3b 	bl	6cc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e652:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e656:	e7ee      	b.n	e636 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e658 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e658:	b530      	push	{r4, r5, lr}
    e65a:	1c42      	adds	r2, r0, #1
    e65c:	428a      	cmp	r2, r1
    e65e:	d004      	beq.n	e66a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e660:	680a      	ldr	r2, [r1, #0]
    e662:	f8c0 2001 	str.w	r2, [r0, #1]
    e666:	7909      	ldrb	r1, [r1, #4]
    e668:	7141      	strb	r1, [r0, #5]
    e66a:	7941      	ldrb	r1, [r0, #5]
    e66c:	f001 011f 	and.w	r1, r1, #31
    e670:	7141      	strb	r1, [r0, #5]
    e672:	2100      	movs	r1, #0
    e674:	72c1      	strb	r1, [r0, #11]
    e676:	1843      	adds	r3, r0, r1
    e678:	1c49      	adds	r1, r1, #1
    e67a:	785c      	ldrb	r4, [r3, #1]
    e67c:	b2c9      	uxtb	r1, r1
    e67e:	f004 0201 	and.w	r2, r4, #1
    e682:	0864      	lsrs	r4, r4, #1
    e684:	f004 0501 	and.w	r5, r4, #1
    e688:	4415      	add	r5, r2
    e68a:	0862      	lsrs	r2, r4, #1
    e68c:	f002 0401 	and.w	r4, r2, #1
    e690:	442c      	add	r4, r5
    e692:	0852      	lsrs	r2, r2, #1
    e694:	f002 0501 	and.w	r5, r2, #1
    e698:	442c      	add	r4, r5
    e69a:	0852      	lsrs	r2, r2, #1
    e69c:	f002 0501 	and.w	r5, r2, #1
    e6a0:	442c      	add	r4, r5
    e6a2:	0852      	lsrs	r2, r2, #1
    e6a4:	f002 0501 	and.w	r5, r2, #1
    e6a8:	442c      	add	r4, r5
    e6aa:	0852      	lsrs	r2, r2, #1
    e6ac:	f002 0501 	and.w	r5, r2, #1
    e6b0:	442c      	add	r4, r5
    e6b2:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e6b6:	719a      	strb	r2, [r3, #6]
    e6b8:	7ac3      	ldrb	r3, [r0, #11]
    e6ba:	2905      	cmp	r1, #5
    e6bc:	441a      	add	r2, r3
    e6be:	72c2      	strb	r2, [r0, #11]
    e6c0:	d3d9      	bcc.n	e676 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e6c2:	bd30      	pop	{r4, r5, pc}
    e6c4:	b570      	push	{r4, r5, r6, lr}
    e6c6:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e6ca:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e6ce:	f012 0fff 	tst.w	r2, #255	; 0xff
    e6d2:	f023 031f 	bic.w	r3, r3, #31
    e6d6:	d108      	bne.n	e6ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e6d8:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e6dc:	b92c      	cbnz	r4, e6ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e6de:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e6e2:	b914      	cbnz	r4, e6ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e6e4:	0e12      	lsrs	r2, r2, #24
    e6e6:	d100      	bne.n	e6ea <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e6e8:	b35b      	cbz	r3, e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e6ea:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e6ee:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e6f2:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e6f6:	7d83      	ldrb	r3, [r0, #22]
    e6f8:	b141      	cbz	r1, e70c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e6fa:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e6fe:	d905      	bls.n	e70c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e700:	f640 5107 	movw	r1, #3335	; 0xd07
    e704:	428a      	cmp	r2, r1
    e706:	d801      	bhi.n	e70c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e708:	2101      	movs	r1, #1
    e70a:	e000      	b.n	e70e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    e70c:	2100      	movs	r1, #0
    e70e:	7846      	ldrb	r6, [r0, #1]
    e710:	2e22      	cmp	r6, #34	; 0x22
    e712:	d116      	bne.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e714:	b959      	cbnz	r1, e72e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    e716:	1f91      	subs	r1, r2, #6
    e718:	f640 467a 	movw	r6, #3194	; 0xc7a
    e71c:	42b1      	cmp	r1, r6
    e71e:	d810      	bhi.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e720:	b17b      	cbz	r3, e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e722:	2b08      	cmp	r3, #8
    e724:	d80d      	bhi.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e726:	4293      	cmp	r3, r2
    e728:	d20b      	bcs.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e72a:	4294      	cmp	r4, r2
    e72c:	d809      	bhi.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e72e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e732:	d206      	bcs.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e734:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e738:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e73c:	d801      	bhi.n	e742 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e73e:	2001      	movs	r0, #1
    e740:	bd70      	pop	{r4, r5, r6, pc}
    e742:	2000      	movs	r0, #0
    e744:	bd70      	pop	{r4, r5, r6, pc}

0000e746 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e746:	b570      	push	{r4, r5, r6, lr}
    e748:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e74c:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e750:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e754:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e758:	88c0      	ldrh	r0, [r0, #6]
    e75a:	b131      	cbz	r1, e76a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e75c:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e760:	d903      	bls.n	e76a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e762:	f640 5107 	movw	r1, #3335	; 0xd07
    e766:	428a      	cmp	r2, r1
    e768:	d90b      	bls.n	e782 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e76a:	1f91      	subs	r1, r2, #6
    e76c:	f640 467a 	movw	r6, #3194	; 0xc7a
    e770:	42b1      	cmp	r1, r6
    e772:	d80e      	bhi.n	e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e774:	b16b      	cbz	r3, e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e776:	2b08      	cmp	r3, #8
    e778:	d80b      	bhi.n	e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e77a:	4293      	cmp	r3, r2
    e77c:	d209      	bcs.n	e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e77e:	4294      	cmp	r4, r2
    e780:	d807      	bhi.n	e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e782:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e786:	d204      	bcs.n	e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e788:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e78c:	d801      	bhi.n	e792 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e78e:	2001      	movs	r0, #1
    e790:	bd70      	pop	{r4, r5, r6, pc}
    e792:	2000      	movs	r0, #0
    e794:	bd70      	pop	{r4, r5, r6, pc}

0000e796 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e796:	6842      	ldr	r2, [r0, #4]
    e798:	600a      	str	r2, [r1, #0]
    e79a:	7a00      	ldrb	r0, [r0, #8]
    e79c:	7108      	strb	r0, [r1, #4]
    e79e:	4770      	bx	lr

0000e7a0 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e7a0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e7a4:	4770      	bx	lr

0000e7a6 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e7a6:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e7aa:	4770      	bx	lr

0000e7ac <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e7ac:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e7b0:	4770      	bx	lr

0000e7b2 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e7b2:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e7b6:	4770      	bx	lr

0000e7b8 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e7b8:	8980      	ldrh	r0, [r0, #12]
    e7ba:	8008      	strh	r0, [r1, #0]
    e7bc:	4770      	bx	lr

0000e7be <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e7be:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e7c2:	6008      	str	r0, [r1, #0]
    e7c4:	4770      	bx	lr

0000e7c6 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e7c6:	6842      	ldr	r2, [r0, #4]
    e7c8:	600a      	str	r2, [r1, #0]
    e7ca:	6880      	ldr	r0, [r0, #8]
    e7cc:	6048      	str	r0, [r1, #4]
    e7ce:	4770      	bx	lr

0000e7d0 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e7d0:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e7d4:	600a      	str	r2, [r1, #0]
    e7d6:	6840      	ldr	r0, [r0, #4]
    e7d8:	6048      	str	r0, [r1, #4]
    e7da:	4770      	bx	lr

0000e7dc <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e7dc:	6842      	ldr	r2, [r0, #4]
    e7de:	600a      	str	r2, [r1, #0]
    e7e0:	6880      	ldr	r0, [r0, #8]
    e7e2:	6048      	str	r0, [r1, #4]
    e7e4:	4770      	bx	lr

0000e7e6 <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    e7e6:	6842      	ldr	r2, [r0, #4]
    e7e8:	600a      	str	r2, [r1, #0]
    e7ea:	6880      	ldr	r0, [r0, #8]
    e7ec:	6048      	str	r0, [r1, #4]
    e7ee:	4770      	bx	lr

0000e7f0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e7f0:	7800      	ldrb	r0, [r0, #0]
    e7f2:	f000 0003 	and.w	r0, r0, #3
    e7f6:	4770      	bx	lr

0000e7f8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e7f8:	7900      	ldrb	r0, [r0, #4]
    e7fa:	4770      	bx	lr

0000e7fc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e7fc:	8880      	ldrh	r0, [r0, #4]
    e7fe:	4770      	bx	lr

0000e800 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e800:	88c0      	ldrh	r0, [r0, #6]
    e802:	4770      	bx	lr

0000e804 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e804:	8900      	ldrh	r0, [r0, #8]
    e806:	4770      	bx	lr

0000e808 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e808:	8940      	ldrh	r0, [r0, #10]
    e80a:	4770      	bx	lr

0000e80c <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e80c:	88c0      	ldrh	r0, [r0, #6]
    e80e:	4770      	bx	lr

0000e810 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e810:	7940      	ldrb	r0, [r0, #5]
    e812:	4770      	bx	lr

0000e814 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e814:	7900      	ldrb	r0, [r0, #4]
    e816:	4770      	bx	lr

0000e818 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e818:	7900      	ldrb	r0, [r0, #4]
    e81a:	4770      	bx	lr

0000e81c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e81c:	8901      	ldrh	r1, [r0, #8]
    e81e:	291b      	cmp	r1, #27
    e820:	d30c      	bcc.n	e83c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e822:	8941      	ldrh	r1, [r0, #10]
    e824:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e828:	4291      	cmp	r1, r2
    e82a:	d307      	bcc.n	e83c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e82c:	8881      	ldrh	r1, [r0, #4]
    e82e:	291b      	cmp	r1, #27
    e830:	d304      	bcc.n	e83c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e832:	88c0      	ldrh	r0, [r0, #6]
    e834:	4290      	cmp	r0, r2
    e836:	d301      	bcc.n	e83c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e838:	2001      	movs	r0, #1
    e83a:	4770      	bx	lr
    e83c:	2000      	movs	r0, #0
    e83e:	4770      	bx	lr

0000e840 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e840:	b510      	push	{r4, lr}
    e842:	29fb      	cmp	r1, #251	; 0xfb
    e844:	d904      	bls.n	e850 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e846:	f240 5193 	movw	r1, #1427	; 0x593
    e84a:	202a      	movs	r0, #42	; 0x2a
    e84c:	f7f6 fac2 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e850:	7041      	strb	r1, [r0, #1]
    e852:	bd10      	pop	{r4, pc}

0000e854 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e854:	7901      	ldrb	r1, [r0, #4]
    e856:	0749      	lsls	r1, r1, #29
    e858:	d004      	beq.n	e864 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e85a:	7940      	ldrb	r0, [r0, #5]
    e85c:	0740      	lsls	r0, r0, #29
    e85e:	d001      	beq.n	e864 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e860:	2001      	movs	r0, #1
    e862:	4770      	bx	lr
    e864:	2000      	movs	r0, #0
    e866:	4770      	bx	lr

0000e868 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e868:	7900      	ldrb	r0, [r0, #4]
    e86a:	4770      	bx	lr

0000e86c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e86c:	7940      	ldrb	r0, [r0, #5]
    e86e:	4770      	bx	lr

0000e870 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e870:	7101      	strb	r1, [r0, #4]
    e872:	4770      	bx	lr

0000e874 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e874:	7141      	strb	r1, [r0, #5]
    e876:	4770      	bx	lr

0000e878 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    e878:	b510      	push	{r4, lr}
    e87a:	2a1b      	cmp	r2, #27
    e87c:	d904      	bls.n	e888 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    e87e:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
    e882:	202a      	movs	r0, #42	; 0x2a
    e884:	f7f6 faa6 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e888:	7042      	strb	r2, [r0, #1]
    e88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e88e:	1cc0      	adds	r0, r0, #3
    e890:	f7fe ba67 	b.w	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e894 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    e894:	6809      	ldr	r1, [r1, #0]
    e896:	60c1      	str	r1, [r0, #12]
    e898:	4770      	bx	lr

0000e89a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    e89a:	680a      	ldr	r2, [r1, #0]
    e89c:	6042      	str	r2, [r0, #4]
    e89e:	6849      	ldr	r1, [r1, #4]
    e8a0:	6081      	str	r1, [r0, #8]
    e8a2:	4770      	bx	lr

0000e8a4 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e8a4:	680a      	ldr	r2, [r1, #0]
    e8a6:	6042      	str	r2, [r0, #4]
    e8a8:	6849      	ldr	r1, [r1, #4]
    e8aa:	6081      	str	r1, [r0, #8]
    e8ac:	4770      	bx	lr

0000e8ae <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    e8ae:	680a      	ldr	r2, [r1, #0]
    e8b0:	6042      	str	r2, [r0, #4]
    e8b2:	6849      	ldr	r1, [r1, #4]
    e8b4:	6081      	str	r1, [r0, #8]
    e8b6:	4770      	bx	lr

0000e8b8 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e8b8:	7802      	ldrb	r2, [r0, #0]
    e8ba:	f001 0103 	and.w	r1, r1, #3
    e8be:	f022 0203 	bic.w	r2, r2, #3
    e8c2:	430a      	orrs	r2, r1
    e8c4:	7002      	strb	r2, [r0, #0]
    e8c6:	4770      	bx	lr

0000e8c8 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e8c8:	7101      	strb	r1, [r0, #4]
    e8ca:	0a09      	lsrs	r1, r1, #8
    e8cc:	7141      	strb	r1, [r0, #5]
    e8ce:	4770      	bx	lr

0000e8d0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e8d0:	7181      	strb	r1, [r0, #6]
    e8d2:	0a09      	lsrs	r1, r1, #8
    e8d4:	71c1      	strb	r1, [r0, #7]
    e8d6:	4770      	bx	lr

0000e8d8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e8d8:	7201      	strb	r1, [r0, #8]
    e8da:	0a09      	lsrs	r1, r1, #8
    e8dc:	7241      	strb	r1, [r0, #9]
    e8de:	4770      	bx	lr

0000e8e0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e8e0:	7281      	strb	r1, [r0, #10]
    e8e2:	0a09      	lsrs	r1, r1, #8
    e8e4:	72c1      	strb	r1, [r0, #11]
    e8e6:	4770      	bx	lr

0000e8e8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e8e8:	7802      	ldrb	r2, [r0, #0]
    e8ea:	f002 020f 	and.w	r2, r2, #15
    e8ee:	2a03      	cmp	r2, #3
    e8f0:	d003      	beq.n	e8fa <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    e8f2:	2a05      	cmp	r2, #5
    e8f4:	d104      	bne.n	e900 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    e8f6:	f7ff bee5 	b.w	e6c4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    e8fa:	7840      	ldrb	r0, [r0, #1]
    e8fc:	280c      	cmp	r0, #12
    e8fe:	d001      	beq.n	e904 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    e900:	2000      	movs	r0, #0
    e902:	4770      	bx	lr
    e904:	2001      	movs	r0, #1
    e906:	4770      	bx	lr

0000e908 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    e908:	b570      	push	{r4, r5, r6, lr}
    e90a:	4614      	mov	r4, r2
    e90c:	4605      	mov	r5, r0
    e90e:	2a1f      	cmp	r2, #31
    e910:	d903      	bls.n	e91a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    e912:	21b2      	movs	r1, #178	; 0xb2
    e914:	202a      	movs	r0, #42	; 0x2a
    e916:	f7f6 fa5d 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e91a:	f105 0009 	add.w	r0, r5, #9
    e91e:	f7fe fa20 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e922:	1da4      	adds	r4, r4, #6
    e924:	706c      	strb	r4, [r5, #1]
    e926:	bd70      	pop	{r4, r5, r6, pc}

0000e928 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e928:	b510      	push	{r4, lr}
    e92a:	7802      	ldrb	r2, [r0, #0]
    e92c:	f001 030f 	and.w	r3, r1, #15
    e930:	f022 020f 	bic.w	r2, r2, #15
    e934:	431a      	orrs	r2, r3
    e936:	7002      	strb	r2, [r0, #0]
    e938:	2907      	cmp	r1, #7
    e93a:	d20c      	bcs.n	e956 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e93c:	e8df f001 	tbb	[pc, r1]
    e940:	06040604 	.word	0x06040604
    e944:	00040804 	.word	0x00040804
    e948:	2106      	movs	r1, #6
    e94a:	e002      	b.n	e952 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e94c:	210c      	movs	r1, #12
    e94e:	e000      	b.n	e952 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e950:	2122      	movs	r1, #34	; 0x22
    e952:	7041      	strb	r1, [r0, #1]
    e954:	bd10      	pop	{r4, pc}
    e956:	216e      	movs	r1, #110	; 0x6e
    e958:	202a      	movs	r0, #42	; 0x2a
    e95a:	f7f6 fa3b 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e95e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e95e:	680a      	ldr	r2, [r1, #0]
    e960:	f840 2f09 	str.w	r2, [r0, #9]!
    e964:	8889      	ldrh	r1, [r1, #4]
    e966:	8081      	strh	r1, [r0, #4]
    e968:	4770      	bx	lr

0000e96a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e96a:	7802      	ldrb	r2, [r0, #0]
    e96c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e970:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e974:	7002      	strb	r2, [r0, #0]
    e976:	4770      	bx	lr

0000e978 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e978:	680a      	ldr	r2, [r1, #0]
    e97a:	f840 2f03 	str.w	r2, [r0, #3]!
    e97e:	8889      	ldrh	r1, [r1, #4]
    e980:	8081      	strh	r1, [r0, #4]
    e982:	4770      	bx	lr

0000e984 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e984:	7802      	ldrb	r2, [r0, #0]
    e986:	2340      	movs	r3, #64	; 0x40
    e988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e98c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e990:	430a      	orrs	r2, r1
    e992:	7002      	strb	r2, [r0, #0]
    e994:	4770      	bx	lr

0000e996 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    e996:	b570      	push	{r4, r5, r6, lr}
    e998:	4614      	mov	r4, r2
    e99a:	4605      	mov	r5, r0
    e99c:	2a1f      	cmp	r2, #31
    e99e:	d903      	bls.n	e9a8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    e9a0:	21d4      	movs	r1, #212	; 0xd4
    e9a2:	202a      	movs	r0, #42	; 0x2a
    e9a4:	f7f6 fa16 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a8:	f105 0009 	add.w	r0, r5, #9
    e9ac:	f7fe f9d9 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9b0:	1da4      	adds	r4, r4, #6
    e9b2:	706c      	strb	r4, [r5, #1]
    e9b4:	bd70      	pop	{r4, r5, r6, pc}

0000e9b6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e9b6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e9ba:	4604      	mov	r4, r0
    e9bc:	2000      	movs	r0, #0
    e9be:	f7f6 fbf3 	bl	51a8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e9c2:	2600      	movs	r6, #0
    e9c4:	4605      	mov	r5, r0
    e9c6:	4637      	mov	r7, r6
    e9c8:	e00e      	b.n	e9e8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e9ca:	8820      	ldrh	r0, [r4, #0]
    e9cc:	1c40      	adds	r0, r0, #1
    e9ce:	b280      	uxth	r0, r0
    e9d0:	8020      	strh	r0, [r4, #0]
    e9d2:	42a8      	cmp	r0, r5
    e9d4:	d300      	bcc.n	e9d8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e9d6:	8027      	strh	r7, [r4, #0]
    e9d8:	8820      	ldrh	r0, [r4, #0]
    e9da:	4669      	mov	r1, sp
    e9dc:	f7ff fc6f 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9e0:	2800      	cmp	r0, #0
    e9e2:	d007      	beq.n	e9f4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e9e4:	1c76      	adds	r6, r6, #1
    e9e6:	b2f6      	uxtb	r6, r6
    e9e8:	42ae      	cmp	r6, r5
    e9ea:	d3ee      	bcc.n	e9ca <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e9ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e9f0:	8020      	strh	r0, [r4, #0]
    e9f2:	2012      	movs	r0, #18
    e9f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e9f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e9f8:	6841      	ldr	r1, [r0, #4]
    e9fa:	2200      	movs	r2, #0
    e9fc:	f891 3112 	ldrb.w	r3, [r1, #274]	; 0x112
    ea00:	2b00      	cmp	r3, #0
    ea02:	d004      	beq.n	ea0e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    ea04:	f881 2112 	strb.w	r2, [r1, #274]	; 0x112
    ea08:	6840      	ldr	r0, [r0, #4]
    ea0a:	f000 bc73 	b.w	f2f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ea0e:	4770      	bx	lr

0000ea10 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    ea10:	b510      	push	{r4, lr}
    ea12:	7901      	ldrb	r1, [r0, #4]
    ea14:	b119      	cbz	r1, ea1e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    ea16:	2901      	cmp	r1, #1
    ea18:	d006      	beq.n	ea28 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    ea1a:	2000      	movs	r0, #0
    ea1c:	bd10      	pop	{r4, pc}
    ea1e:	8842      	ldrh	r2, [r0, #2]
    ea20:	6883      	ldr	r3, [r0, #8]
    ea22:	8800      	ldrh	r0, [r0, #0]
    ea24:	2102      	movs	r1, #2
    ea26:	e003      	b.n	ea30 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    ea28:	8842      	ldrh	r2, [r0, #2]
    ea2a:	6883      	ldr	r3, [r0, #8]
    ea2c:	8800      	ldrh	r0, [r0, #0]
    ea2e:	2101      	movs	r1, #1
    ea30:	f7f8 fa4c 	bl	6ecc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    ea34:	b908      	cbnz	r0, ea3a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    ea36:	f7f8 fa9f 	bl	6f78 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    ea3a:	2001      	movs	r0, #1
    ea3c:	bd10      	pop	{r4, pc}
    ea3e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ea42:	460e      	mov	r6, r1
    ea44:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ea48:	4617      	mov	r7, r2
    ea4a:	39ff      	subs	r1, #255	; 0xff
    ea4c:	d014      	beq.n	ea78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ea4e:	8030      	strh	r0, [r6, #0]
    ea50:	2100      	movs	r1, #0
    ea52:	7171      	strb	r1, [r6, #5]
    ea54:	f7f6 fdd8 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ea58:	4604      	mov	r4, r0
    ea5a:	f7fe ffd5 	bl	da08 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ea5e:	0005      	movs	r5, r0
    ea60:	d00a      	beq.n	ea78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    ea62:	4620      	mov	r0, r4
    ea64:	4629      	mov	r1, r5
    ea66:	aa01      	add	r2, sp, #4
    ea68:	f7fe fff1 	bl	da4e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ea6c:	8070      	strh	r0, [r6, #2]
    ea6e:	b130      	cbz	r0, ea7e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    ea70:	28fb      	cmp	r0, #251	; 0xfb
    ea72:	d906      	bls.n	ea82 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    ea74:	21ae      	movs	r1, #174	; 0xae
    ea76:	e026      	b.n	eac6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea78:	2000      	movs	r0, #0
    ea7a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ea7e:	21ad      	movs	r1, #173	; 0xad
    ea80:	e021      	b.n	eac6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea82:	9801      	ldr	r0, [sp, #4]
    ea84:	f7ff feb4 	bl	e7f0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    ea88:	2801      	cmp	r0, #1
    ea8a:	d003      	beq.n	ea94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ea8c:	2802      	cmp	r0, #2
    ea8e:	d001      	beq.n	ea94 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    ea90:	21bd      	movs	r1, #189	; 0xbd
    ea92:	e018      	b.n	eac6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    ea94:	7130      	strb	r0, [r6, #4]
    ea96:	4629      	mov	r1, r5
    ea98:	8873      	ldrh	r3, [r6, #2]
    ea9a:	2503      	movs	r5, #3
    ea9c:	4620      	mov	r0, r4
    ea9e:	463a      	mov	r2, r7
    eaa0:	9500      	str	r5, [sp, #0]
    eaa2:	f7fe fe9f 	bl	d7e4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    eaa6:	4620      	mov	r0, r4
    eaa8:	60b7      	str	r7, [r6, #8]
    eaaa:	f7fe ff5c 	bl	d966 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    eaae:	b138      	cbz	r0, eac0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    eab0:	2100      	movs	r1, #0
    eab2:	4620      	mov	r0, r4
    eab4:	460a      	mov	r2, r1
    eab6:	f7ff f8a8 	bl	dc0a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    eaba:	b118      	cbz	r0, eac4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    eabc:	2001      	movs	r0, #1
    eabe:	e7dc      	b.n	ea7a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    eac0:	21cd      	movs	r1, #205	; 0xcd
    eac2:	e000      	b.n	eac6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    eac4:	21d2      	movs	r1, #210	; 0xd2
    eac6:	202b      	movs	r0, #43	; 0x2b
    eac8:	f7f6 f984 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eacc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    eacc:	f7f8 bc0c 	b.w	72e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28c>
    ead0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ead4:	4604      	mov	r4, r0
    ead6:	2000      	movs	r0, #0
    ead8:	f7f6 fb66 	bl	51a8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    eadc:	4605      	mov	r5, r0
    eade:	2001      	movs	r0, #1
    eae0:	f7f6 fb62 	bl	51a8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    eae4:	4428      	add	r0, r5
    eae6:	2600      	movs	r6, #0
    eae8:	b2c7      	uxtb	r7, r0
    eaea:	46b0      	mov	r8, r6
    eaec:	e017      	b.n	eb1e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    eaee:	8820      	ldrh	r0, [r4, #0]
    eaf0:	1c40      	adds	r0, r0, #1
    eaf2:	b280      	uxth	r0, r0
    eaf4:	8020      	strh	r0, [r4, #0]
    eaf6:	42b8      	cmp	r0, r7
    eaf8:	d302      	bcc.n	eb00 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    eafa:	4640      	mov	r0, r8
    eafc:	f8a4 8000 	strh.w	r8, [r4]
    eb00:	b280      	uxth	r0, r0
    eb02:	42a8      	cmp	r0, r5
    eb04:	d304      	bcc.n	eb10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    eb06:	42b8      	cmp	r0, r7
    eb08:	d202      	bcs.n	eb10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    eb0a:	2000      	movs	r0, #0
    eb0c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    eb10:	4669      	mov	r1, sp
    eb12:	f7ff fbd4 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eb16:	2800      	cmp	r0, #0
    eb18:	d0f8      	beq.n	eb0c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    eb1a:	1c76      	adds	r6, r6, #1
    eb1c:	b2f6      	uxtb	r6, r6
    eb1e:	42be      	cmp	r6, r7
    eb20:	d3e5      	bcc.n	eaee <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    eb22:	f64f 70ff 	movw	r0, #65535	; 0xffff
    eb26:	8020      	strh	r0, [r4, #0]
    eb28:	2012      	movs	r0, #18
    eb2a:	e7ef      	b.n	eb0c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000eb2c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    eb2c:	b570      	push	{r4, r5, r6, lr}
    eb2e:	8050      	strh	r0, [r2, #2]
    eb30:	890c      	ldrh	r4, [r1, #8]
    eb32:	8094      	strh	r4, [r2, #4]
    eb34:	898b      	ldrh	r3, [r1, #12]
    eb36:	80d3      	strh	r3, [r2, #6]
    eb38:	8948      	ldrh	r0, [r1, #10]
    eb3a:	8110      	strh	r0, [r2, #8]
    eb3c:	89cd      	ldrh	r5, [r1, #14]
    eb3e:	8155      	strh	r5, [r2, #10]
    eb40:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    eb42:	42ae      	cmp	r6, r5
    eb44:	d108      	bne.n	eb58 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    eb46:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    eb48:	4285      	cmp	r5, r0
    eb4a:	d105      	bne.n	eb58 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    eb4c:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    eb4e:	429d      	cmp	r5, r3
    eb50:	d102      	bne.n	eb58 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    eb52:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    eb54:	42a3      	cmp	r3, r4
    eb56:	d001      	beq.n	eb5c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    eb58:	2301      	movs	r3, #1
    eb5a:	e000      	b.n	eb5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    eb5c:	2300      	movs	r3, #0
    eb5e:	7313      	strb	r3, [r2, #12]
    eb60:	8548      	strh	r0, [r1, #42]	; 0x2a
    eb62:	8950      	ldrh	r0, [r2, #10]
    eb64:	85c8      	strh	r0, [r1, #46]	; 0x2e
    eb66:	8890      	ldrh	r0, [r2, #4]
    eb68:	8588      	strh	r0, [r1, #44]	; 0x2c
    eb6a:	88d0      	ldrh	r0, [r2, #6]
    eb6c:	8608      	strh	r0, [r1, #48]	; 0x30
    eb6e:	20ff      	movs	r0, #255	; 0xff
    eb70:	7010      	strb	r0, [r2, #0]
    eb72:	bd70      	pop	{r4, r5, r6, pc}

0000eb74 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    eb74:	b510      	push	{r4, lr}
    eb76:	888c      	ldrh	r4, [r1, #4]
    eb78:	890a      	ldrh	r2, [r1, #8]
    eb7a:	884b      	ldrh	r3, [r1, #2]
    eb7c:	88c9      	ldrh	r1, [r1, #6]
    eb7e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    eb82:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
    eb86:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    eb8a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    eb8e:	bd10      	pop	{r4, pc}

0000eb90 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    eb90:	b570      	push	{r4, r5, r6, lr}
    eb92:	4615      	mov	r5, r2
    eb94:	460c      	mov	r4, r1
    eb96:	f000 f8c9 	bl	ed2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    eb9a:	3096      	adds	r0, #150	; 0x96
    eb9c:	4428      	add	r0, r5
    eb9e:	42a0      	cmp	r0, r4
    eba0:	d801      	bhi.n	eba6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    eba2:	1a20      	subs	r0, r4, r0
    eba4:	bd70      	pop	{r4, r5, r6, pc}
    eba6:	2000      	movs	r0, #0
    eba8:	bd70      	pop	{r4, r5, r6, pc}

0000ebaa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    ebaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ebae:	4604      	mov	r4, r0
    ebb0:	8f47      	ldrh	r7, [r0, #58]	; 0x3a
    ebb2:	8fc6      	ldrh	r6, [r0, #62]	; 0x3e
    ebb4:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
    ebb8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    ebbc:	4285      	cmp	r5, r0
    ebbe:	d300      	bcc.n	ebc2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    ebc0:	4605      	mov	r5, r0
    ebc2:	4620      	mov	r0, r4
    ebc4:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
    ebc8:	f000 f8a0 	bl	ed0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ebcc:	4601      	mov	r1, r0
    ebce:	8765      	strh	r5, [r4, #58]	; 0x3a
    ebd0:	87e1      	strh	r1, [r4, #62]	; 0x3e
    ebd2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    ebd6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ebda:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    ebde:	4680      	mov	r8, r0
    ebe0:	42aa      	cmp	r2, r5
    ebe2:	d200      	bcs.n	ebe6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    ebe4:	462a      	mov	r2, r5
    ebe6:	428b      	cmp	r3, r1
    ebe8:	d200      	bcs.n	ebec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    ebea:	460b      	mov	r3, r1
    ebec:	8202      	strh	r2, [r0, #16]
    ebee:	f8a8 3012 	strh.w	r3, [r8, #18]
    ebf2:	42bd      	cmp	r5, r7
    ebf4:	d101      	bne.n	ebfa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    ebf6:	42b1      	cmp	r1, r6
    ebf8:	d001      	beq.n	ebfe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    ebfa:	2001      	movs	r0, #1
    ebfc:	e000      	b.n	ec00 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x56>
    ebfe:	2000      	movs	r0, #0
    ec00:	4681      	mov	r9, r0
    ec02:	f8b4 504c 	ldrh.w	r5, [r4, #76]	; 0x4c
    ec06:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
    ec0a:	8f27      	ldrh	r7, [r4, #56]	; 0x38
    ec0c:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    ec0e:	4285      	cmp	r5, r0
    ec10:	d300      	bcc.n	ec14 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x6a>
    ec12:	4605      	mov	r5, r0
    ec14:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
    ec18:	4620      	mov	r0, r4
    ec1a:	f000 f87f 	bl	ed1c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ec1e:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    ec22:	2902      	cmp	r1, #2
    ec24:	d108      	bne.n	ec38 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8e>
    ec26:	42af      	cmp	r7, r5
    ec28:	d200      	bcs.n	ec2c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x82>
    ec2a:	463d      	mov	r5, r7
    ec2c:	4286      	cmp	r6, r0
    ec2e:	d200      	bcs.n	ec32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x88>
    ec30:	4630      	mov	r0, r6
    ec32:	2100      	movs	r1, #0
    ec34:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    ec38:	f8a8 5008 	strh.w	r5, [r8, #8]
    ec3c:	f8a8 000c 	strh.w	r0, [r8, #12]
    ec40:	42bd      	cmp	r5, r7
    ec42:	d101      	bne.n	ec48 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    ec44:	42b0      	cmp	r0, r6
    ec46:	d001      	beq.n	ec4c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa2>
    ec48:	2001      	movs	r0, #1
    ec4a:	e000      	b.n	ec4e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa4>
    ec4c:	2000      	movs	r0, #0
    ec4e:	ea40 0009 	orr.w	r0, r0, r9
    ec52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ec56 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    ec56:	6840      	ldr	r0, [r0, #4]
    ec58:	4770      	bx	lr

0000ec5a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    ec5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec5e:	4616      	mov	r6, r2
    ec60:	460f      	mov	r7, r1
    ec62:	4604      	mov	r4, r0
    ec64:	f000 f862 	bl	ed2c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    ec68:	4605      	mov	r5, r0
    ec6a:	463a      	mov	r2, r7
    ec6c:	6921      	ldr	r1, [r4, #16]
    ec6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ec70:	f000 f847 	bl	ed02 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    ec74:	19a9      	adds	r1, r5, r6
    ec76:	4281      	cmp	r1, r0
    ec78:	d300      	bcc.n	ec7c <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    ec7a:	4608      	mov	r0, r1
    ec7c:	6360      	str	r0, [r4, #52]	; 0x34
    ec7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ec82 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    ec82:	221b      	movs	r2, #27
    ec84:	8402      	strh	r2, [r0, #32]
    ec86:	8382      	strh	r2, [r0, #28]
    ec88:	82c2      	strh	r2, [r0, #22]
    ec8a:	8282      	strh	r2, [r0, #20]
    ec8c:	8142      	strh	r2, [r0, #10]
    ec8e:	8202      	strh	r2, [r0, #16]
    ec90:	8102      	strh	r2, [r0, #8]
    ec92:	8542      	strh	r2, [r0, #42]	; 0x2a
    ec94:	8582      	strh	r2, [r0, #44]	; 0x2c
    ec96:	8482      	strh	r2, [r0, #36]	; 0x24
    ec98:	2900      	cmp	r1, #0
    ec9a:	d10a      	bne.n	ecb2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    ec9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eca0:	8441      	strh	r1, [r0, #34]	; 0x22
    eca2:	83c1      	strh	r1, [r0, #30]
    eca4:	8341      	strh	r1, [r0, #26]
    eca6:	8301      	strh	r1, [r0, #24]
    eca8:	81c1      	strh	r1, [r0, #14]
    ecaa:	8241      	strh	r1, [r0, #18]
    ecac:	8181      	strh	r1, [r0, #12]
    ecae:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ecb0:	8601      	strh	r1, [r0, #48]	; 0x30
    ecb2:	4770      	bx	lr

0000ecb4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ecb4:	6800      	ldr	r0, [r0, #0]
    ecb6:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    ecba:	4290      	cmp	r0, r2
    ecbc:	d903      	bls.n	ecc6 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    ecbe:	1a40      	subs	r0, r0, r1
    ecc0:	389c      	subs	r0, #156	; 0x9c
    ecc2:	0840      	lsrs	r0, r0, #1
    ecc4:	4770      	bx	lr
    ecc6:	2000      	movs	r0, #0
    ecc8:	4770      	bx	lr

0000ecca <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    ecca:	b510      	push	{r4, lr}
    eccc:	9c02      	ldr	r4, [sp, #8]
    ecce:	8281      	strh	r1, [r0, #20]
    ecd0:	82c2      	strh	r2, [r0, #22]
    ecd2:	8303      	strh	r3, [r0, #24]
    ecd4:	8344      	strh	r4, [r0, #26]
    ecd6:	bd10      	pop	{r4, pc}

0000ecd8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    ecd8:	8050      	strh	r0, [r2, #2]
    ecda:	8a88      	ldrh	r0, [r1, #20]
    ecdc:	8090      	strh	r0, [r2, #4]
    ecde:	8ac8      	ldrh	r0, [r1, #22]
    ece0:	80d0      	strh	r0, [r2, #6]
    ece2:	8b08      	ldrh	r0, [r1, #24]
    ece4:	8110      	strh	r0, [r2, #8]
    ece6:	8b48      	ldrh	r0, [r1, #26]
    ece8:	8150      	strh	r0, [r2, #10]
    ecea:	20ff      	movs	r0, #255	; 0xff
    ecec:	7010      	strb	r0, [r2, #0]
    ecee:	4770      	bx	lr
    ecf0:	2902      	cmp	r1, #2
    ecf2:	d003      	beq.n	ecfc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    ecf4:	00c0      	lsls	r0, r0, #3
    ecf6:	3070      	adds	r0, #112	; 0x70
    ecf8:	b280      	uxth	r0, r0
    ecfa:	4770      	bx	lr
    ecfc:	0080      	lsls	r0, r0, #2
    ecfe:	303c      	adds	r0, #60	; 0x3c
    ed00:	e7fa      	b.n	ecf8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    ed02:	4288      	cmp	r0, r1
    ed04:	d300      	bcc.n	ed08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    ed06:	4608      	mov	r0, r1
    ed08:	1a80      	subs	r0, r0, r2
    ed0a:	4770      	bx	lr
    ed0c:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    ed10:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
    ed14:	4281      	cmp	r1, r0
    ed16:	d200      	bcs.n	ed1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    ed18:	4608      	mov	r0, r1
    ed1a:	4770      	bx	lr
    ed1c:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    ed20:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    ed24:	4281      	cmp	r1, r0
    ed26:	d200      	bcs.n	ed2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    ed28:	4608      	mov	r0, r1
    ed2a:	4770      	bx	lr
    ed2c:	2196      	movs	r1, #150	; 0x96
    ed2e:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
    ed32:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
    ed36:	f000 b800 	b.w	ed3a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    ed3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed3e:	460d      	mov	r5, r1
    ed40:	4606      	mov	r6, r0
    ed42:	4698      	mov	r8, r3
    ed44:	4617      	mov	r7, r2
    ed46:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    ed48:	4611      	mov	r1, r2
    ed4a:	f7ff ffd1 	bl	ecf0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ed4e:	4604      	mov	r4, r0
    ed50:	4639      	mov	r1, r7
    ed52:	4630      	mov	r0, r6
    ed54:	f7ff ffe2 	bl	ed1c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    ed58:	42a0      	cmp	r0, r4
    ed5a:	d200      	bcs.n	ed5e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    ed5c:	4604      	mov	r4, r0
    ed5e:	f8b6 0040 	ldrh.w	r0, [r6, #64]	; 0x40
    ed62:	4641      	mov	r1, r8
    ed64:	f7ff ffc4 	bl	ecf0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    ed68:	4607      	mov	r7, r0
    ed6a:	4641      	mov	r1, r8
    ed6c:	4630      	mov	r0, r6
    ed6e:	f7ff ffcd 	bl	ed0c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    ed72:	42b8      	cmp	r0, r7
    ed74:	d300      	bcc.n	ed78 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa0>
    ed76:	4638      	mov	r0, r7
    ed78:	4420      	add	r0, r4
    ed7a:	4428      	add	r0, r5
    ed7c:	1d80      	adds	r0, r0, #6
    ed7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ed82 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    ed82:	b510      	push	{r4, lr}
    ed84:	4604      	mov	r4, r0
    ed86:	2108      	movs	r1, #8
    ed88:	4620      	mov	r0, r4
    ed8a:	f7f6 f8bd 	bl	4f08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ed8e:	6820      	ldr	r0, [r4, #0]
    ed90:	2800      	cmp	r0, #0
    ed92:	d102      	bne.n	ed9a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    ed94:	6860      	ldr	r0, [r4, #4]
    ed96:	2800      	cmp	r0, #0
    ed98:	d0f5      	beq.n	ed86 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    ed9a:	bd10      	pop	{r4, pc}
    ed9c:	2801      	cmp	r0, #1
    ed9e:	d102      	bne.n	eda6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    eda0:	7948      	ldrb	r0, [r1, #5]
    eda2:	0980      	lsrs	r0, r0, #6
    eda4:	d001      	beq.n	edaa <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    eda6:	2000      	movs	r0, #0
    eda8:	4770      	bx	lr
    edaa:	2001      	movs	r0, #1
    edac:	4770      	bx	lr
    edae:	2801      	cmp	r0, #1
    edb0:	d106      	bne.n	edc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    edb2:	7948      	ldrb	r0, [r1, #5]
    edb4:	2101      	movs	r1, #1
    edb6:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    edba:	d101      	bne.n	edc0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    edbc:	2001      	movs	r0, #1
    edbe:	4770      	bx	lr
    edc0:	2000      	movs	r0, #0
    edc2:	4770      	bx	lr
    edc4:	2802      	cmp	r0, #2
    edc6:	d003      	beq.n	edd0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    edc8:	2803      	cmp	r0, #3
    edca:	d001      	beq.n	edd0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    edcc:	2000      	movs	r0, #0
    edce:	4770      	bx	lr
    edd0:	2001      	movs	r0, #1
    edd2:	4770      	bx	lr

0000edd4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    edd4:	b510      	push	{r4, lr}
    edd6:	4604      	mov	r4, r0
    edd8:	7c00      	ldrb	r0, [r0, #16]
    edda:	f7ff fff3 	bl	edc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    edde:	b148      	cbz	r0, edf4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ede0:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    ede4:	f104 0150 	add.w	r1, r4, #80	; 0x50
    ede8:	f7ff fa26 	bl	e238 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    edec:	2808      	cmp	r0, #8
    edee:	d001      	beq.n	edf4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    edf0:	2001      	movs	r0, #1
    edf2:	bd10      	pop	{r4, pc}
    edf4:	7c20      	ldrb	r0, [r4, #16]
    edf6:	b118      	cbz	r0, ee00 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    edf8:	2802      	cmp	r0, #2
    edfa:	d001      	beq.n	ee00 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    edfc:	7de0      	ldrb	r0, [r4, #23]
    edfe:	bd10      	pop	{r4, pc}
    ee00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee04:	2000      	movs	r0, #0
    ee06:	f7f6 beb7 	b.w	5b78 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000ee0a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    ee0a:	b508      	push	{r3, lr}
    ee0c:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    ee10:	f88d 1000 	strb.w	r1, [sp]
    ee14:	9900      	ldr	r1, [sp, #0]
    ee16:	9100      	str	r1, [sp, #0]
    ee18:	f89d 1000 	ldrb.w	r1, [sp]
    ee1c:	b109      	cbz	r1, ee22 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    ee1e:	2001      	movs	r0, #1
    ee20:	bd08      	pop	{r3, pc}
    ee22:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    ee26:	f88d 0000 	strb.w	r0, [sp]
    ee2a:	9800      	ldr	r0, [sp, #0]
    ee2c:	9000      	str	r0, [sp, #0]
    ee2e:	f89d 0000 	ldrb.w	r0, [sp]
    ee32:	2000      	movs	r0, #0
    ee34:	bd08      	pop	{r3, pc}

0000ee36 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    ee36:	20ff      	movs	r0, #255	; 0xff
    ee38:	7008      	strb	r0, [r1, #0]
    ee3a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    ee3c:	f7ff b90d 	b.w	e05a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000ee40 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    ee40:	b51c      	push	{r2, r3, r4, lr}
    ee42:	4604      	mov	r4, r0
    ee44:	22d4      	movs	r2, #212	; 0xd4
    ee46:	2100      	movs	r1, #0
    ee48:	f7fe f805 	bl	ce56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ee4c:	20ff      	movs	r0, #255	; 0xff
    ee4e:	7020      	strb	r0, [r4, #0]
    ee50:	207f      	movs	r0, #127	; 0x7f
    ee52:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ee56:	2013      	movs	r0, #19
    ee58:	8060      	strh	r0, [r4, #2]
    ee5a:	f7f6 fc95 	bl	5788 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ee5e:	4601      	mov	r1, r0
    ee60:	62e0      	str	r0, [r4, #44]	; 0x2c
    ee62:	2200      	movs	r2, #0
    ee64:	4668      	mov	r0, sp
    ee66:	f7ff f862 	bl	df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ee6a:	2200      	movs	r2, #0
    ee6c:	2101      	movs	r1, #1
    ee6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee70:	f7ff f8d3 	bl	e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ee74:	2204      	movs	r2, #4
    ee76:	4668      	mov	r0, sp
    ee78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ee7a:	f7ff f858 	bl	df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ee7e:	2200      	movs	r2, #0
    ee80:	4611      	mov	r1, r2
    ee82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ee84:	f7ff f8c9 	bl	e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ee88:	2000      	movs	r0, #0
    ee8a:	73a0      	strb	r0, [r4, #14]
    ee8c:	f104 0020 	add.w	r0, r4, #32
    ee90:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    ee94:	f000 b96e 	b.w	f174 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000ee98 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ee98:	7880      	ldrb	r0, [r0, #2]
    ee9a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ee9e:	b108      	cbz	r0, eea4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    eea0:	2000      	movs	r0, #0
    eea2:	4770      	bx	lr
    eea4:	201f      	movs	r0, #31
    eea6:	4770      	bx	lr

0000eea8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    eea8:	f7f8 bf9c 	b.w	7de4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>

0000eeac <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    eeac:	6880      	ldr	r0, [r0, #8]
    eeae:	4770      	bx	lr

0000eeb0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    eeb0:	2001      	movs	r0, #1
    eeb2:	4770      	bx	lr

0000eeb4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    eeb4:	b510      	push	{r4, lr}
    eeb6:	4604      	mov	r4, r0
    eeb8:	3020      	adds	r0, #32
    eeba:	f000 f91b 	bl	f0f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    eebe:	8861      	ldrh	r1, [r4, #2]
    eec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eec4:	2228      	movs	r2, #40	; 0x28
    eec6:	f7f9 b969 	b.w	819c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000eeca <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    eeca:	2200      	movs	r2, #0
    eecc:	6282      	str	r2, [r0, #40]	; 0x28
    eece:	8843      	ldrh	r3, [r0, #2]
    eed0:	2b1d      	cmp	r3, #29
    eed2:	d001      	beq.n	eed8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    eed4:	7341      	strb	r1, [r0, #13]
    eed6:	4770      	bx	lr
    eed8:	7342      	strb	r2, [r0, #13]
    eeda:	4770      	bx	lr

0000eedc <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    eedc:	b510      	push	{r4, lr}
    eede:	2400      	movs	r4, #0
    eee0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    eee2:	f7ff f888 	bl	dff6 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    eee6:	b100      	cbz	r0, eeea <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    eee8:	2001      	movs	r0, #1
    eeea:	4384      	bics	r4, r0
    eeec:	f084 0001 	eor.w	r0, r4, #1
    eef0:	bd10      	pop	{r4, pc}

0000eef2 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    eef2:	2000      	movs	r0, #0
    eef4:	4770      	bx	lr

0000eef6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    eef6:	7880      	ldrb	r0, [r0, #2]
    eef8:	f000 0001 	and.w	r0, r0, #1
    eefc:	4770      	bx	lr

0000eefe <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    eefe:	7880      	ldrb	r0, [r0, #2]
    ef00:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ef04:	4770      	bx	lr

0000ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ef06:	2001      	movs	r0, #1
    ef08:	4770      	bx	lr

0000ef0a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ef0a:	7880      	ldrb	r0, [r0, #2]
    ef0c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ef10:	4770      	bx	lr

0000ef12 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ef12:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ef16:	4770      	bx	lr

0000ef18 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ef18:	7800      	ldrb	r0, [r0, #0]
    ef1a:	28ff      	cmp	r0, #255	; 0xff
    ef1c:	d001      	beq.n	ef22 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ef1e:	2001      	movs	r0, #1
    ef20:	4770      	bx	lr
    ef22:	2000      	movs	r0, #0
    ef24:	4770      	bx	lr

0000ef26 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ef26:	680a      	ldr	r2, [r1, #0]
    ef28:	f840 2f11 	str.w	r2, [r0, #17]!
    ef2c:	8889      	ldrh	r1, [r1, #4]
    ef2e:	8081      	strh	r1, [r0, #4]
    ef30:	2101      	movs	r1, #1
    ef32:	7181      	strb	r1, [r0, #6]
    ef34:	4770      	bx	lr

0000ef36 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ef36:	7b00      	ldrb	r0, [r0, #12]
    ef38:	4770      	bx	lr

0000ef3a <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ef3a:	2001      	movs	r0, #1
    ef3c:	4770      	bx	lr

0000ef3e <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ef3e:	61c1      	str	r1, [r0, #28]
    ef40:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
    ef44:	724a      	strb	r2, [r1, #9]
    ef46:	f8d0 2049 	ldr.w	r2, [r0, #73]	; 0x49
    ef4a:	f8c1 200a 	str.w	r2, [r1, #10]
    ef4e:	f8b0 004d 	ldrh.w	r0, [r0, #77]	; 0x4d
    ef52:	81c8      	strh	r0, [r1, #14]
    ef54:	4770      	bx	lr

0000ef56 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ef56:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    ef5a:	4770      	bx	lr

0000ef5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    ef5c:	b510      	push	{r4, lr}
    ef5e:	4604      	mov	r4, r0
    ef60:	7880      	ldrb	r0, [r0, #2]
    ef62:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ef66:	b140      	cbz	r0, ef7a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    ef68:	233c      	movs	r3, #60	; 0x3c
    ef6a:	22ff      	movs	r2, #255	; 0xff
    ef6c:	4620      	mov	r0, r4
    ef6e:	69e1      	ldr	r1, [r4, #28]
    ef70:	f7f8 ff64 	bl	7e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    ef74:	20ff      	movs	r0, #255	; 0xff
    ef76:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    ef7a:	78a0      	ldrb	r0, [r4, #2]
    ef7c:	07c0      	lsls	r0, r0, #31
    ef7e:	f7f8 f85f 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ef82:	2001      	movs	r0, #1
    ef84:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
    ef88:	bd10      	pop	{r4, pc}

0000ef8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ef8a:	7bc0      	ldrb	r0, [r0, #15]
    ef8c:	2800      	cmp	r0, #0
    ef8e:	d000      	beq.n	ef92 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ef90:	2001      	movs	r0, #1
    ef92:	4770      	bx	lr
    ef94:	b510      	push	{r4, lr}
    ef96:	f7ff f94f 	bl	e238 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ef9a:	4604      	mov	r4, r0
    ef9c:	f7f7 fc96 	bl	68cc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    efa0:	b138      	cbz	r0, efb2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    efa2:	4620      	mov	r0, r4
    efa4:	f7f7 fbca 	bl	673c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    efa8:	b118      	cbz	r0, efb2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    efaa:	2110      	movs	r1, #16
    efac:	f7ff fb24 	bl	e5f8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    efb0:	b108      	cbz	r0, efb6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    efb2:	2000      	movs	r0, #0
    efb4:	bd10      	pop	{r4, pc}
    efb6:	2001      	movs	r0, #1
    efb8:	bd10      	pop	{r4, pc}
    efba:	2101      	movs	r1, #1
    efbc:	f7f8 bb9a 	b.w	76f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    efc0:	2101      	movs	r1, #1
    efc2:	f7f8 bb97 	b.w	76f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    efc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efca:	4604      	mov	r4, r0
    efcc:	2700      	movs	r7, #0
    efce:	704f      	strb	r7, [r1, #1]
    efd0:	2011      	movs	r0, #17
    efd2:	460d      	mov	r5, r1
    efd4:	7008      	strb	r0, [r1, #0]
    efd6:	2220      	movs	r2, #32
    efd8:	f104 0166 	add.w	r1, r4, #102	; 0x66
    efdc:	1d28      	adds	r0, r5, #4
    efde:	f7fd fec0 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    efe2:	2601      	movs	r6, #1
    efe4:	722e      	strb	r6, [r5, #8]
    efe6:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    efea:	7928      	ldrb	r0, [r5, #4]
    efec:	2800      	cmp	r0, #0
    efee:	d112      	bne.n	f016 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8c>
    eff0:	88e8      	ldrh	r0, [r5, #6]
    eff2:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    eff6:	69e0      	ldr	r0, [r4, #28]
    eff8:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
    effc:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    f000:	21ff      	movs	r1, #255	; 0xff
    f002:	f884 108e 	strb.w	r1, [r4, #142]	; 0x8e
    f006:	8800      	ldrh	r0, [r0, #0]
    f008:	f7f6 fafe 	bl	5608 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f00c:	f7fe fdaf 	bl	db6e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    f010:	69e0      	ldr	r0, [r4, #28]
    f012:	f880 6078 	strb.w	r6, [r0, #120]	; 0x78
    f016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f01e:	4604      	mov	r4, r0
    f020:	460f      	mov	r7, r1
    f022:	7e40      	ldrb	r0, [r0, #25]
    f024:	f7f7 fb4a 	bl	66bc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    f028:	4606      	mov	r6, r0
    f02a:	7e20      	ldrb	r0, [r4, #24]
    f02c:	f104 0549 	add.w	r5, r4, #73	; 0x49
    f030:	b120      	cbz	r0, f03c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    f032:	b11e      	cbz	r6, f03c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    f034:	7e60      	ldrb	r0, [r4, #25]
    f036:	f7f7 fb35 	bl	66a4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    f03a:	b1a0      	cbz	r0, f066 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    f03c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    f040:	2800      	cmp	r0, #0
    f042:	d024      	beq.n	f08e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    f044:	7ea0      	ldrb	r0, [r4, #26]
    f046:	2800      	cmp	r0, #0
    f048:	d021      	beq.n	f08e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    f04a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f04e:	4629      	mov	r1, r5
    f050:	f7ff fead 	bl	edae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    f054:	b1a8      	cbz	r0, f082 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    f056:	f7f7 fb21 	bl	669c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    f05a:	463a      	mov	r2, r7
    f05c:	4629      	mov	r1, r5
    f05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f062:	f7ff b881 	b.w	e168 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f066:	2001      	movs	r0, #1
    f068:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    f06c:	463a      	mov	r2, r7
    f06e:	4629      	mov	r1, r5
    f070:	4630      	mov	r0, r6
    f072:	f7ff f879 	bl	e168 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    f076:	7e61      	ldrb	r1, [r4, #25]
    f078:	4628      	mov	r0, r5
    f07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f07e:	f7f7 bb29 	b.w	66d4 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    f082:	4639      	mov	r1, r7
    f084:	4628      	mov	r0, r5
    f086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f08a:	f7ff b85c 	b.w	e146 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f092:	b510      	push	{r4, lr}
    f094:	4604      	mov	r4, r0
    f096:	4608      	mov	r0, r1
    f098:	f7fc ff8a 	bl	bfb0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    f09c:	7921      	ldrb	r1, [r4, #4]
    f09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0a2:	2025      	movs	r0, #37	; 0x25
    f0a4:	f7fc bf5a 	b.w	bf5c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    f0a8:	b510      	push	{r4, lr}
    f0aa:	4604      	mov	r4, r0
    f0ac:	3026      	adds	r0, #38	; 0x26
    f0ae:	f7fc ff35 	bl	bf1c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    f0b2:	2800      	cmp	r0, #0
    f0b4:	d102      	bne.n	f0bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    f0b6:	207f      	movs	r0, #127	; 0x7f
    f0b8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    f0bc:	bd10      	pop	{r4, pc}
    f0be:	7802      	ldrb	r2, [r0, #0]
    f0c0:	2320      	movs	r3, #32
    f0c2:	f022 0220 	bic.w	r2, r2, #32
    f0c6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    f0ca:	430a      	orrs	r2, r1
    f0cc:	7002      	strb	r2, [r0, #0]
    f0ce:	4770      	bx	lr

0000f0d0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    f0d0:	b570      	push	{r4, r5, r6, lr}
    f0d2:	7001      	strb	r1, [r0, #0]
    f0d4:	7042      	strb	r2, [r0, #1]
    f0d6:	4614      	mov	r4, r2
    f0d8:	460d      	mov	r5, r1
    f0da:	7880      	ldrb	r0, [r0, #2]
    f0dc:	f000 f87f 	bl	f1de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f0e0:	fb10 f005 	smulbb	r0, r0, r5
    f0e4:	4360      	muls	r0, r4
    f0e6:	28ff      	cmp	r0, #255	; 0xff
    f0e8:	d303      	bcc.n	f0f2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    f0ea:	215c      	movs	r1, #92	; 0x5c
    f0ec:	202e      	movs	r0, #46	; 0x2e
    f0ee:	f7f5 fe71 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0f2:	bd70      	pop	{r4, r5, r6, pc}

0000f0f4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    f0f4:	b510      	push	{r4, lr}
    f0f6:	4604      	mov	r4, r0
    f0f8:	7880      	ldrb	r0, [r0, #2]
    f0fa:	f000 f870 	bl	f1de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f0fe:	7861      	ldrb	r1, [r4, #1]
    f100:	7822      	ldrb	r2, [r4, #0]
    f102:	fb11 f102 	smulbb	r1, r1, r2
    f106:	4348      	muls	r0, r1
    f108:	b2c0      	uxtb	r0, r0
    f10a:	bd10      	pop	{r4, pc}

0000f10c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    f10c:	b510      	push	{r4, lr}
    f10e:	4604      	mov	r4, r0
    f110:	f000 f84d 	bl	f1ae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    f114:	7961      	ldrb	r1, [r4, #5]
    f116:	1c49      	adds	r1, r1, #1
    f118:	b2c9      	uxtb	r1, r1
    f11a:	7161      	strb	r1, [r4, #5]
    f11c:	7862      	ldrb	r2, [r4, #1]
    f11e:	4291      	cmp	r1, r2
    f120:	d10b      	bne.n	f13a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f122:	2200      	movs	r2, #0
    f124:	7162      	strb	r2, [r4, #5]
    f126:	78e1      	ldrb	r1, [r4, #3]
    f128:	4301      	orrs	r1, r0
    f12a:	70e1      	strb	r1, [r4, #3]
    f12c:	78a3      	ldrb	r3, [r4, #2]
    f12e:	4299      	cmp	r1, r3
    f130:	d103      	bne.n	f13a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    f132:	70e2      	strb	r2, [r4, #3]
    f134:	7921      	ldrb	r1, [r4, #4]
    f136:	1c49      	adds	r1, r1, #1
    f138:	7121      	strb	r1, [r4, #4]
    f13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f13e:	f000 b825 	b.w	f18c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000f142 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    f142:	7081      	strb	r1, [r0, #2]
    f144:	4770      	bx	lr

0000f146 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    f146:	b570      	push	{r4, r5, r6, lr}
    f148:	4604      	mov	r4, r0
    f14a:	7880      	ldrb	r0, [r0, #2]
    f14c:	f000 f847 	bl	f1de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f150:	7861      	ldrb	r1, [r4, #1]
    f152:	fb11 f500 	smulbb	r5, r1, r0
    f156:	78e0      	ldrb	r0, [r4, #3]
    f158:	f000 f841 	bl	f1de <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    f15c:	7861      	ldrb	r1, [r4, #1]
    f15e:	7962      	ldrb	r2, [r4, #5]
    f160:	fb10 2001 	smlabb	r0, r0, r1, r2
    f164:	7821      	ldrb	r1, [r4, #0]
    f166:	7922      	ldrb	r2, [r4, #4]
    f168:	1a89      	subs	r1, r1, r2
    f16a:	fb11 f105 	smulbb	r1, r1, r5
    f16e:	1a08      	subs	r0, r1, r0
    f170:	b2c0      	uxtb	r0, r0
    f172:	bd70      	pop	{r4, r5, r6, pc}

0000f174 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f174:	2100      	movs	r1, #0
    f176:	6001      	str	r1, [r0, #0]
    f178:	8081      	strh	r1, [r0, #4]
    f17a:	2101      	movs	r1, #1
    f17c:	7041      	strb	r1, [r0, #1]
    f17e:	7001      	strb	r1, [r0, #0]
    f180:	4770      	bx	lr

0000f182 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f182:	2100      	movs	r1, #0
    f184:	70c1      	strb	r1, [r0, #3]
    f186:	7141      	strb	r1, [r0, #5]
    f188:	7101      	strb	r1, [r0, #4]
    f18a:	4770      	bx	lr
    f18c:	b510      	push	{r4, lr}
    f18e:	2801      	cmp	r0, #1
    f190:	d007      	beq.n	f1a2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f192:	2802      	cmp	r0, #2
    f194:	d007      	beq.n	f1a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f196:	2804      	cmp	r0, #4
    f198:	d007      	beq.n	f1aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f19a:	2139      	movs	r1, #57	; 0x39
    f19c:	202e      	movs	r0, #46	; 0x2e
    f19e:	f7f5 fe19 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1a2:	2025      	movs	r0, #37	; 0x25
    f1a4:	bd10      	pop	{r4, pc}
    f1a6:	2026      	movs	r0, #38	; 0x26
    f1a8:	bd10      	pop	{r4, pc}
    f1aa:	2027      	movs	r0, #39	; 0x27
    f1ac:	bd10      	pop	{r4, pc}
    f1ae:	4601      	mov	r1, r0
    f1b0:	2000      	movs	r0, #0
    f1b2:	788a      	ldrb	r2, [r1, #2]
    f1b4:	07d3      	lsls	r3, r2, #31
    f1b6:	d002      	beq.n	f1be <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f1b8:	78cb      	ldrb	r3, [r1, #3]
    f1ba:	07db      	lsls	r3, r3, #31
    f1bc:	d006      	beq.n	f1cc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f1be:	0793      	lsls	r3, r2, #30
    f1c0:	d506      	bpl.n	f1d0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f1c2:	78cb      	ldrb	r3, [r1, #3]
    f1c4:	079b      	lsls	r3, r3, #30
    f1c6:	d403      	bmi.n	f1d0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f1c8:	2002      	movs	r0, #2
    f1ca:	4770      	bx	lr
    f1cc:	2001      	movs	r0, #1
    f1ce:	4770      	bx	lr
    f1d0:	0752      	lsls	r2, r2, #29
    f1d2:	d5fc      	bpl.n	f1ce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f1d4:	78c9      	ldrb	r1, [r1, #3]
    f1d6:	0749      	lsls	r1, r1, #29
    f1d8:	d4f9      	bmi.n	f1ce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f1da:	2004      	movs	r0, #4
    f1dc:	4770      	bx	lr
    f1de:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f1e2:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f1e6:	4411      	add	r1, r2
    f1e8:	f000 0001 	and.w	r0, r0, #1
    f1ec:	4408      	add	r0, r1
    f1ee:	4770      	bx	lr

0000f1f0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f1f0:	f240 315a 	movw	r1, #858	; 0x35a
    f1f4:	4348      	muls	r0, r1
    f1f6:	4770      	bx	lr

0000f1f8 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f1f8:	f240 20ef 	movw	r0, #751	; 0x2ef
    f1fc:	4770      	bx	lr
    f1fe:	020e      	.short	0x020e
    f200:	0630041c 	.word	0x0630041c
    f204:	035a0c60 	.word	0x035a0c60
    f208:	05c506b4 	.word	0x05c506b4
    f20c:	12250bf5 	.word	0x12250bf5
    f210:	03b101a3 	.word	0x03b101a3
    f214:	02ef05bf 	.word	0x02ef05bf
    f218:	09a30649 	.word	0x09a30649

0000f21c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f21c:	b510      	push	{r4, lr}
    f21e:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    f222:	b109      	cbz	r1, f228 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f224:	2000      	movs	r0, #0
    f226:	bd10      	pop	{r4, pc}
    f228:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    f22c:	b949      	cbnz	r1, f242 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f22e:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    f232:	b131      	cbz	r1, f242 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f234:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    f238:	428a      	cmp	r2, r1
    f23a:	d902      	bls.n	f242 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    f23c:	f7ff fe8e 	bl	ef5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f240:	e7f0      	b.n	f224 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f242:	2001      	movs	r0, #1
    f244:	bd10      	pop	{r4, pc}

0000f246 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f246:	b510      	push	{r4, lr}
    f248:	b131      	cbz	r1, f258 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f24a:	2901      	cmp	r1, #1
    f24c:	d008      	beq.n	f260 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f24e:	f240 7192 	movw	r1, #1938	; 0x792
    f252:	2030      	movs	r0, #48	; 0x30
    f254:	f7f5 fdbe 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f25c:	f000 b9da 	b.w	f614 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f260:	2100      	movs	r1, #0
    f262:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    f266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f26a:	f000 b93e 	b.w	f4ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>

0000f26e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f26e:	b510      	push	{r4, lr}
    f270:	4604      	mov	r4, r0
    f272:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    f276:	2800      	cmp	r0, #0
    f278:	d019      	beq.n	f2ae <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f27a:	2001      	movs	r0, #1
    f27c:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    f280:	4601      	mov	r1, r0
    f282:	4620      	mov	r0, r4
    f284:	f7ff fe67 	bl	ef56 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f288:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    f28c:	b170      	cbz	r0, f2ac <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f28e:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    f292:	f7f3 fe3b 	bl	2f0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f296:	7820      	ldrb	r0, [r4, #0]
    f298:	f7f3 ff8a 	bl	31b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f29c:	f814 09a0 	ldrb.w	r0, [r4], #-160
    f2a0:	f7f3 ff64 	bl	316c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f2a4:	b120      	cbz	r0, f2b0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f2a6:	2000      	movs	r0, #0
    f2a8:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    f2ac:	2000      	movs	r0, #0
    f2ae:	bd10      	pop	{r4, pc}
    f2b0:	f240 2107 	movw	r1, #519	; 0x207
    f2b4:	2030      	movs	r0, #48	; 0x30
    f2b6:	f7f5 fd8d 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f2ba <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f2ba:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f2be:	4770      	bx	lr

0000f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f2c0:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    f2c4:	4770      	bx	lr

0000f2c6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    f2c6:	b50e      	push	{r1, r2, r3, lr}
    f2c8:	4669      	mov	r1, sp
    f2ca:	2001      	movs	r0, #1
    f2cc:	f7fe fd78 	bl	ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f2d0:	b138      	cbz	r0, f2e2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    f2d2:	f44f 71a1 	mov.w	r1, #322	; 0x142
    f2d6:	2030      	movs	r0, #48	; 0x30
    f2d8:	f7f5 fd7c 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2dc:	9802      	ldr	r0, [sp, #8]
    f2de:	f7ff ffc6 	bl	f26e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    f2e2:	4668      	mov	r0, sp
    f2e4:	f7f5 ffae 	bl	5244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f2e8:	2800      	cmp	r0, #0
    f2ea:	d0f7      	beq.n	f2dc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    f2ec:	f7f9 f8e4 	bl	84b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    f2f0:	2000      	movs	r0, #0
    f2f2:	bd0e      	pop	{r1, r2, r3, pc}

0000f2f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f2f4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f2f6:	4604      	mov	r4, r0
    f2f8:	f890 0113 	ldrb.w	r0, [r0, #275]	; 0x113
    f2fc:	2800      	cmp	r0, #0
    f2fe:	d153      	bne.n	f3a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f300:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f304:	2803      	cmp	r0, #3
    f306:	d14f      	bne.n	f3a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f308:	f7fd fbb6 	bl	ca78 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    f30c:	4601      	mov	r1, r0
    f30e:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    f312:	f7f3 f98d 	bl	2630 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f316:	2800      	cmp	r0, #0
    f318:	dd46      	ble.n	f3a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f31a:	6921      	ldr	r1, [r4, #16]
    f31c:	b111      	cbz	r1, f324 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    f31e:	fbb0 f0f1 	udiv	r0, r0, r1
    f322:	e000      	b.n	f326 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    f324:	2000      	movs	r0, #0
    f326:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f32a:	1c40      	adds	r0, r0, #1
    f32c:	4408      	add	r0, r1
    f32e:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f332:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f336:	f8b4 110c 	ldrh.w	r1, [r4, #268]	; 0x10c
    f33a:	1a08      	subs	r0, r1, r0
    f33c:	b200      	sxth	r0, r0
    f33e:	2800      	cmp	r0, #0
    f340:	dd32      	ble.n	f3a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f342:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    f346:	f7f3 fde1 	bl	2f0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f34a:	2800      	cmp	r0, #0
    f34c:	d02c      	beq.n	f3a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f34e:	20ff      	movs	r0, #255	; 0xff
    f350:	f884 0159 	strb.w	r0, [r4, #345]	; 0x159
    f354:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f358:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    f35c:	ae01      	add	r6, sp, #4
    f35e:	1a40      	subs	r0, r0, r1
    f360:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    f364:	1e40      	subs	r0, r0, #1
    f366:	4408      	add	r0, r1
    f368:	b285      	uxth	r5, r0
    f36a:	e017      	b.n	f39c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    f36c:	9600      	str	r6, [sp, #0]
    f36e:	f8b4 1154 	ldrh.w	r1, [r4, #340]	; 0x154
    f372:	2300      	movs	r3, #0
    f374:	2201      	movs	r2, #1
    f376:	4620      	mov	r0, r4
    f378:	f7f9 f96e 	bl	8658 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f37c:	2800      	cmp	r0, #0
    f37e:	d013      	beq.n	f3a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    f380:	2801      	cmp	r0, #1
    f382:	d004      	beq.n	f38e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    f384:	f240 6105 	movw	r1, #1541	; 0x605
    f388:	2030      	movs	r0, #48	; 0x30
    f38a:	f7f5 fd23 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f38e:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f392:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f396:	4408      	add	r0, r1
    f398:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    f39c:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f3a0:	1a28      	subs	r0, r5, r0
    f3a2:	b200      	sxth	r0, r0
    f3a4:	2800      	cmp	r0, #0
    f3a6:	dae1      	bge.n	f36c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    f3a8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f3aa:	2000      	movs	r0, #0
    f3ac:	4770      	bx	lr
    f3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3b2:	4604      	mov	r4, r0
    f3b4:	2501      	movs	r5, #1
    f3b6:	f000 f90e 	bl	f5d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    f3ba:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f3be:	2000      	movs	r0, #0
    f3c0:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    f3c4:	2701      	movs	r7, #1
    f3c6:	f884 70c3 	strb.w	r7, [r4, #195]	; 0xc3
    f3ca:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    f3ce:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
    f3d2:	b160      	cbz	r0, f3ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xfa>
    f3d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f3d8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f3dc:	f7f3 f8f6 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f3e0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    f3e4:	2100      	movs	r1, #0
    f3e6:	4630      	mov	r0, r6
    f3e8:	f7ff f84c 	bl	e484 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f3ec:	e00f      	b.n	f40e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f3ee:	4620      	mov	r0, r4
    f3f0:	f7ff fd5c 	bl	eeac <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f3f4:	4605      	mov	r5, r0
    f3f6:	4629      	mov	r1, r5
    f3f8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f3fc:	f7f3 f8e6 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f400:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    f404:	4629      	mov	r1, r5
    f406:	4630      	mov	r0, r6
    f408:	f7ff f83c 	bl	e484 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f40c:	1c45      	adds	r5, r0, #1
    f40e:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f412:	1c41      	adds	r1, r0, #1
    f414:	290a      	cmp	r1, #10
    f416:	d202      	bcs.n	f41e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x12a>
    f418:	4428      	add	r0, r5
    f41a:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    f41e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    f422:	b138      	cbz	r0, f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f424:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f428:	1c40      	adds	r0, r0, #1
    f42a:	280a      	cmp	r0, #10
    f42c:	d302      	bcc.n	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x140>
    f42e:	f884 70c2 	strb.w	r7, [r4, #194]	; 0xc2
    f432:	e002      	b.n	f43a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x146>
    f434:	2002      	movs	r0, #2
    f436:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    f43a:	2100      	movs	r1, #0
    f43c:	4620      	mov	r0, r4
    f43e:	f000 f823 	bl	f488 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    f442:	b120      	cbz	r0, f44e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15a>
    f444:	4620      	mov	r0, r4
    f446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f44a:	f000 b80e 	b.w	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    f44e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f452:	4631      	mov	r1, r6
    f454:	f000 f8bd 	bl	f5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    f458:	2800      	cmp	r0, #0
    f45a:	d104      	bne.n	f466 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x172>
    f45c:	f240 61a6 	movw	r1, #1702	; 0x6a6
    f460:	2030      	movs	r0, #48	; 0x30
    f462:	f7f5 fcb7 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f46a:	b510      	push	{r4, lr}
    f46c:	4604      	mov	r4, r0
    f46e:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    f472:	f7f3 fe7b 	bl	316c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f476:	2000      	movs	r0, #0
    f478:	7520      	strb	r0, [r4, #20]
    f47a:	bd10      	pop	{r4, pc}
    f47c:	b510      	push	{r4, lr}
    f47e:	f7ff fd19 	bl	eeb4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f482:	f200 100d 	addw	r0, r0, #269	; 0x10d
    f486:	bd10      	pop	{r4, pc}
    f488:	b570      	push	{r4, r5, r6, lr}
    f48a:	4604      	mov	r4, r0
    f48c:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    f490:	460d      	mov	r5, r1
    f492:	b108      	cbz	r0, f498 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a4>
    f494:	2001      	movs	r0, #1
    f496:	bd70      	pop	{r4, r5, r6, pc}
    f498:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f49c:	b1a8      	cbz	r0, f4ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    f49e:	4620      	mov	r0, r4
    f4a0:	f7ff fd04 	bl	eeac <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f4a4:	4405      	add	r5, r0
    f4a6:	4620      	mov	r0, r4
    f4a8:	f7ff ffe8 	bl	f47c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    f4ac:	1941      	adds	r1, r0, r5
    f4ae:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f4b2:	4288      	cmp	r0, r1
    f4b4:	d206      	bcs.n	f4c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    f4b6:	2001      	movs	r0, #1
    f4b8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    f4bc:	4620      	mov	r0, r4
    f4be:	f7ff fd4d 	bl	ef5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f4c2:	e7e7      	b.n	f494 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a0>
    f4c4:	1b40      	subs	r0, r0, r5
    f4c6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    f4ca:	2000      	movs	r0, #0
    f4cc:	bd70      	pop	{r4, r5, r6, pc}
    f4ce:	b510      	push	{r4, lr}
    f4d0:	4604      	mov	r4, r0
    f4d2:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
    f4d6:	f000 f9eb 	bl	f8b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5bc>
    f4da:	4602      	mov	r2, r0
    f4dc:	4620      	mov	r0, r4
    f4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4e2:	f240 111b 	movw	r1, #283	; 0x11b
    f4e6:	f7ff bbb8 	b.w	ec5a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f4ea:	b510      	push	{r4, lr}
    f4ec:	f7fc fb88 	bl	bc00 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4f4:	f7f3 bf92 	b.w	341c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4fc:	4604      	mov	r4, r0
    f4fe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    f502:	2800      	cmp	r0, #0
    f504:	d051      	beq.n	f5aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f506:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f50a:	2803      	cmp	r0, #3
    f50c:	d14d      	bne.n	f5aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f50e:	f894 906f 	ldrb.w	r9, [r4, #111]	; 0x6f
    f512:	f001 faf1 	bl	10af8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f516:	4605      	mov	r5, r0
    f518:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f51c:	f7f8 ffbe 	bl	849c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f520:	4428      	add	r0, r5
    f522:	b286      	uxth	r6, r0
    f524:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    f528:	f7f8 ffb8 	bl	849c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f52c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f530:	fa1f f880 	uxth.w	r8, r0
    f534:	4648      	mov	r0, r9
    f536:	f7fc fc23 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f53a:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
    f53e:	1a0d      	subs	r5, r1, r0
    f540:	4648      	mov	r0, r9
    f542:	f7fc fc49 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f546:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f54a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f54e:	fbb0 f0fa 	udiv	r0, r0, sl
    f552:	1a2d      	subs	r5, r5, r0
    f554:	4648      	mov	r0, r9
    f556:	f7fc fc13 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f55a:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    f55e:	1a0f      	subs	r7, r1, r0
    f560:	4648      	mov	r0, r9
    f562:	f7fc fc39 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f566:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f56a:	4401      	add	r1, r0
    f56c:	fbb1 f0fa 	udiv	r0, r1, sl
    f570:	1a39      	subs	r1, r7, r0
    f572:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f576:	4370      	muls	r0, r6
    f578:	fbb0 f2f8 	udiv	r2, r0, r8
    f57c:	2029      	movs	r0, #41	; 0x29
    f57e:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f582:	3260      	adds	r2, #96	; 0x60
    f584:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f588:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f58c:	42a9      	cmp	r1, r5
    f58e:	d801      	bhi.n	f594 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a0>
    f590:	4285      	cmp	r5, r0
    f592:	d901      	bls.n	f598 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2a4>
    f594:	f7f5 f878 	bl	4688 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f598:	4631      	mov	r1, r6
    f59a:	6920      	ldr	r0, [r4, #16]
    f59c:	f7fd faa0 	bl	cae0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f5a0:	2100      	movs	r1, #0
    f5a2:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
    f5a6:	f884 115a 	strb.w	r1, [r4, #346]	; 0x15a
    f5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5ae:	b570      	push	{r4, r5, r6, lr}
    f5b0:	460c      	mov	r4, r1
    f5b2:	4605      	mov	r5, r0
    f5b4:	f7fc fc10 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f5b8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f5bc:	4408      	add	r0, r1
    f5be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f5c2:	fbb0 f6f1 	udiv	r6, r0, r1
    f5c6:	4628      	mov	r0, r5
    f5c8:	f7fc fbda 	bl	bd80 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f5cc:	4430      	add	r0, r6
    f5ce:	4420      	add	r0, r4
    f5d0:	bd70      	pop	{r4, r5, r6, pc}
    f5d2:	f7f3 b969 	b.w	28a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f5d6:	b538      	push	{r3, r4, r5, lr}
    f5d8:	4604      	mov	r4, r0
    f5da:	f7ff fc94 	bl	ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f5de:	b1b8      	cbz	r0, f610 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31c>
    f5e0:	4620      	mov	r0, r4
    f5e2:	f7ff fc88 	bl	eef6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f5e6:	b918      	cbnz	r0, f5f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fc>
    f5e8:	4620      	mov	r0, r4
    f5ea:	f7ff fc8e 	bl	ef0a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f5ee:	b138      	cbz	r0, f600 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f5f0:	2449      	movs	r4, #73	; 0x49
    f5f2:	4668      	mov	r0, sp
    f5f4:	f7f5 fad2 	bl	4b9c <mpsl_fem_pa_is_configured>
    f5f8:	f89d 0000 	ldrb.w	r0, [sp]
    f5fc:	b928      	cbnz	r0, f60a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    f5fe:	e001      	b.n	f604 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    f600:	2442      	movs	r4, #66	; 0x42
    f602:	e7f6      	b.n	f5f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fe>
    f604:	f7fd fcae 	bl	cf64 <mpsl_fem_lna_is_configured>
    f608:	b100      	cbz	r0, f60c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x318>
    f60a:	1de4      	adds	r4, r4, #7
    f60c:	4620      	mov	r0, r4
    f60e:	bd38      	pop	{r3, r4, r5, pc}
    f610:	206b      	movs	r0, #107	; 0x6b
    f612:	bd38      	pop	{r3, r4, r5, pc}
    f614:	b570      	push	{r4, r5, r6, lr}
    f616:	4604      	mov	r4, r0
    f618:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    f61c:	2500      	movs	r5, #0
    f61e:	b118      	cbz	r0, f628 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x334>
    f620:	2001      	movs	r0, #1
    f622:	f000 f887 	bl	f734 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    f626:	4605      	mov	r5, r0
    f628:	4620      	mov	r0, r4
    f62a:	f7ff fc3f 	bl	eeac <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f62e:	1941      	adds	r1, r0, r5
    f630:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f634:	34b8      	adds	r4, #184	; 0xb8
    f636:	f7f2 ffc9 	bl	25cc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f63a:	2600      	movs	r6, #0
    f63c:	60e0      	str	r0, [r4, #12]
    f63e:	f804 6b0b 	strb.w	r6, [r4], #11
    f642:	2001      	movs	r0, #1
    f644:	f804 0901 	strb.w	r0, [r4], #-1
    f648:	2002      	movs	r0, #2
    f64a:	f804 09c2 	strb.w	r0, [r4], #-194
    f64e:	4620      	mov	r0, r4
    f650:	f7ff ffc1 	bl	f5d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e2>
    f654:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f658:	4629      	mov	r1, r5
    f65a:	4620      	mov	r0, r4
    f65c:	f7ff ff14 	bl	f488 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x194>
    f660:	b930      	cbnz	r0, f670 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    f662:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f666:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f66a:	f7ff ffb2 	bl	f5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2de>
    f66e:	b128      	cbz	r0, f67c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x388>
    f670:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    f674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f678:	f7ff bf37 	b.w	f4ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    f67c:	f240 61ef 	movw	r1, #1775	; 0x6ef
    f680:	2030      	movs	r0, #48	; 0x30
    f682:	f7f5 fba7 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f686:	b510      	push	{r4, lr}
    f688:	4604      	mov	r4, r0
    f68a:	2000      	movs	r0, #0
    f68c:	f884 0144 	strb.w	r0, [r4, #324]	; 0x144
    f690:	f894 0178 	ldrb.w	r0, [r4, #376]	; 0x178
    f694:	f7f3 fd6a 	bl	316c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f698:	2020      	movs	r0, #32
    f69a:	f884 0178 	strb.w	r0, [r4, #376]	; 0x178
    f69e:	bd10      	pop	{r4, pc}
    f6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f6a4:	2500      	movs	r5, #0
    f6a6:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    f6aa:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    f6ae:	4688      	mov	r8, r1
    f6b0:	4604      	mov	r4, r0
    f6b2:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    f6b6:	2701      	movs	r7, #1
    f6b8:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    f6bc:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f6c0:	4639      	mov	r1, r7
    f6c2:	34a0      	adds	r4, #160	; 0xa0
    f6c4:	f7f7 fa72 	bl	6bac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f6c8:	6860      	ldr	r0, [r4, #4]
    f6ca:	f8c0 616c 	str.w	r6, [r0, #364]	; 0x16c
    f6ce:	6861      	ldr	r1, [r4, #4]
    f6d0:	7820      	ldrb	r0, [r4, #0]
    f6d2:	f881 0178 	strb.w	r0, [r1, #376]	; 0x178
    f6d6:	6861      	ldr	r1, [r4, #4]
    f6d8:	f8c1 817c 	str.w	r8, [r1, #380]	; 0x17c
    f6dc:	6860      	ldr	r0, [r4, #4]
    f6de:	f8c0 6170 	str.w	r6, [r0, #368]	; 0x170
    f6e2:	6864      	ldr	r4, [r4, #4]
    f6e4:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f6e8:	2300      	movs	r3, #0
    f6ea:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    f6ee:	461a      	mov	r2, r3
    f6f0:	4619      	mov	r1, r3
    f6f2:	4620      	mov	r0, r4
    f6f4:	9500      	str	r5, [sp, #0]
    f6f6:	f7f8 ffaf 	bl	8658 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f6fa:	b120      	cbz	r0, f706 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x412>
    f6fc:	f240 211b 	movw	r1, #539	; 0x21b
    f700:	2030      	movs	r0, #48	; 0x30
    f702:	f7f5 fb67 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f706:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f70a:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    f70e:	f884 7144 	strb.w	r7, [r4, #324]	; 0x144
    f712:	f8a4 5156 	strh.w	r5, [r4, #342]	; 0x156
    f716:	f8a4 5154 	strh.w	r5, [r4, #340]	; 0x154
    f71a:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    f71e:	7665      	strb	r5, [r4, #25]
    f720:	f834 0cc4 	ldrh.w	r0, [r4, #-196]
    f724:	1e40      	subs	r0, r0, #1
    f726:	f824 0cc4 	strh.w	r0, [r4, #-196]
    f72a:	86e5      	strh	r5, [r4, #54]	; 0x36
    f72c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f730:	f7ff bedb 	b.w	f4ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f6>
    f734:	b510      	push	{r4, lr}
    f736:	f7f9 f999 	bl	8a6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f73a:	f242 7110 	movw	r1, #10000	; 0x2710
    f73e:	fbb0 f2f1 	udiv	r2, r0, r1
    f742:	fb01 0012 	mls	r0, r1, r2, r0
    f746:	bd10      	pop	{r4, pc}
    f748:	b570      	push	{r4, r5, r6, lr}
    f74a:	b140      	cbz	r0, f75e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    f74c:	2909      	cmp	r1, #9
    f74e:	d248      	bcs.n	f7e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    f750:	e8df f001 	tbb	[pc, r1]
    f754:	3b3b1507 	.word	0x3b3b1507
    f758:	3f294737 	.word	0x3f294737
    f75c:	0043      	.short	0x0043
    f75e:	21cd      	movs	r1, #205	; 0xcd
    f760:	e03c      	b.n	f7dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f762:	4604      	mov	r4, r0
    f764:	f7f7 ff96 	bl	7694 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f768:	b110      	cbz	r0, f770 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x47c>
    f76a:	f240 2179 	movw	r1, #633	; 0x279
    f76e:	e035      	b.n	f7dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f770:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    f774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f778:	38fc      	subs	r0, #252	; 0xfc
    f77a:	f7f3 bf2f 	b.w	35dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f77e:	4605      	mov	r5, r0
    f780:	f7ff fbbd 	bl	eefe <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f784:	b9a8      	cbnz	r0, f7b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4be>
    f786:	4628      	mov	r0, r5
    f788:	f7ff fe78 	bl	f47c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x188>
    f78c:	4604      	mov	r4, r0
    f78e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    f792:	42a0      	cmp	r0, r4
    f794:	d20b      	bcs.n	f7ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    f796:	1a20      	subs	r0, r4, r0
    f798:	2103      	movs	r1, #3
    f79a:	f7f2 fe3f 	bl	241c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f79e:	b130      	cbz	r0, f7ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ba>
    f7a0:	4628      	mov	r0, r5
    f7a2:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f7aa:	f7ff bb7d 	b.w	eea8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f7ae:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f7b2:	4628      	mov	r0, r5
    f7b4:	f7f7 ff8a 	bl	76cc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f7b8:	2800      	cmp	r0, #0
    f7ba:	d014      	beq.n	f7e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    f7bc:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    f7c0:	e00c      	b.n	f7dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f7c6:	f7fc bbf9 	b.w	bfbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f7ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f7ce:	f7ff bdee 	b.w	f3ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    f7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f7d6:	f7ff be48 	b.w	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    f7da:	21ed      	movs	r1, #237	; 0xed
    f7dc:	2030      	movs	r0, #48	; 0x30
    f7de:	f7f5 faf9 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7e2:	21f1      	movs	r1, #241	; 0xf1
    f7e4:	e7fa      	b.n	f7dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f7e6:	bd70      	pop	{r4, r5, r6, pc}
    f7e8:	b510      	push	{r4, lr}
    f7ea:	0004      	movs	r4, r0
    f7ec:	d008      	beq.n	f800 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    f7ee:	2909      	cmp	r1, #9
    f7f0:	d25c      	bcs.n	f8ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b8>
    f7f2:	e8df f001 	tbb	[pc, r1]
    f7f6:	3607      	.short	0x3607
    f7f8:	5b3a3e3e 	.word	0x5b3a3e3e
    f7fc:	00574a43 	.word	0x00574a43
    f800:	2196      	movs	r1, #150	; 0x96
    f802:	e050      	b.n	f8a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    f804:	2100      	movs	r1, #0
    f806:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
    f80a:	f894 1158 	ldrb.w	r1, [r4, #344]	; 0x158
    f80e:	4620      	mov	r0, r4
    f810:	b189      	cbz	r1, f836 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x542>
    f812:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    f816:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    f81a:	428a      	cmp	r2, r1
    f81c:	d106      	bne.n	f82c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x538>
    f81e:	f8b0 210c 	ldrh.w	r2, [r0, #268]	; 0x10c
    f822:	1a51      	subs	r1, r2, r1
    f824:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    f828:	4611      	mov	r1, r2
    f82a:	e00d      	b.n	f848 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x554>
    f82c:	1a51      	subs	r1, r2, r1
    f82e:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    f832:	b291      	uxth	r1, r2
    f834:	e008      	b.n	f848 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x554>
    f836:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
    f83a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
    f83e:	1a89      	subs	r1, r1, r2
    f840:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    f844:	f8b0 1154 	ldrh.w	r1, [r0, #340]	; 0x154
    f848:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
    f84c:	f8d0 1168 	ldr.w	r1, [r0, #360]	; 0x168
    f850:	f8c0 116c 	str.w	r1, [r0, #364]	; 0x16c
    f854:	f7f9 fbb6 	bl	8fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f858:	4620      	mov	r0, r4
    f85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f85e:	f7f9 b90f 	b.w	8a80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>
    f862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f866:	f000 b883 	b.w	f970 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f86e:	f7fc bba5 	b.w	bfbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f872:	4620      	mov	r0, r4
    f874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f878:	f7f9 b938 	b.w	8aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>
    f87c:	2001      	movs	r0, #1
    f87e:	f7f2 fdbd 	bl	23fc <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f886:	f7fe bca4 	b.w	e1d2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f88a:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    f88e:	2804      	cmp	r0, #4
    f890:	d001      	beq.n	f896 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a2>
    f892:	21b8      	movs	r1, #184	; 0xb8
    f894:	e007      	b.n	f8a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    f896:	4620      	mov	r0, r4
    f898:	f7ff fef5 	bl	f686 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x392>
    f89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8a0:	f7f7 bbce 	b.w	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f8a4:	21c1      	movs	r1, #193	; 0xc1
    f8a6:	2030      	movs	r0, #48	; 0x30
    f8a8:	f7f5 fa94 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8ac:	21c5      	movs	r1, #197	; 0xc5
    f8ae:	e7fa      	b.n	f8a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b2>
    f8b0:	b510      	push	{r4, lr}
    f8b2:	f7fc fa91 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f8b6:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f8ba:	4408      	add	r0, r1
    f8bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f8c0:	fbb0 f0f1 	udiv	r0, r0, r1
    f8c4:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    f8c8:	bd10      	pop	{r4, pc}
    f8ca:	01f4      	.short	0x01f4
    f8cc:	009600fa 	.word	0x009600fa
    f8d0:	004b0064 	.word	0x004b0064
    f8d4:	001e0032 	.word	0x001e0032
    f8d8:	000a0014 	.word	0x000a0014
    f8dc:	00020005 	.word	0x00020005
    f8e0:	0001      	.short	0x0001
    f8e2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f8e6:	f001 0307 	and.w	r3, r1, #7
    f8ea:	7802      	ldrb	r2, [r0, #0]
    f8ec:	2101      	movs	r1, #1
    f8ee:	4099      	lsls	r1, r3
    f8f0:	438a      	bics	r2, r1
    f8f2:	7002      	strb	r2, [r0, #0]
    f8f4:	4770      	bx	lr
    f8f6:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    f8fa:	f001 0307 	and.w	r3, r1, #7
    f8fe:	7810      	ldrb	r0, [r2, #0]
    f900:	2101      	movs	r1, #1
    f902:	4099      	lsls	r1, r3
    f904:	4308      	orrs	r0, r1
    f906:	7010      	strb	r0, [r2, #0]
    f908:	4770      	bx	lr

0000f90a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f90a:	b510      	push	{r4, lr}
    f90c:	4604      	mov	r4, r0
    f90e:	f8d0 01ac 	ldr.w	r0, [r0, #428]	; 0x1ac
    f912:	6921      	ldr	r1, [r4, #16]
    f914:	4288      	cmp	r0, r1
    f916:	d109      	bne.n	f92c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f918:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
    f91c:	8b22      	ldrh	r2, [r4, #24]
    f91e:	4291      	cmp	r1, r2
    f920:	d104      	bne.n	f92c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f922:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
    f926:	8b62      	ldrh	r2, [r4, #26]
    f928:	4291      	cmp	r1, r2
    f92a:	d013      	beq.n	f954 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    f92c:	8821      	ldrh	r1, [r4, #0]
    f92e:	f8a4 11cc 	strh.w	r1, [r4, #460]	; 0x1cc
    f932:	f7fe fcd5 	bl	e2e0 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f936:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    f93a:	f8b4 01b0 	ldrh.w	r0, [r4, #432]	; 0x1b0
    f93e:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    f942:	f8b4 01b2 	ldrh.w	r0, [r4, #434]	; 0x1b2
    f946:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    f94a:	20ff      	movs	r0, #255	; 0xff
    f94c:	f884 01c8 	strb.w	r0, [r4, #456]	; 0x1c8
    f950:	f7f7 fb76 	bl	7040 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f954:	2102      	movs	r1, #2
    f956:	4620      	mov	r0, r4
    f958:	f7f7 f928 	bl	6bac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f95c:	2000      	movs	r0, #0
    f95e:	f804 0f86 	strb.w	r0, [r4, #134]!
    f962:	2003      	movs	r0, #3
    f964:	70e0      	strb	r0, [r4, #3]
    f966:	bd10      	pop	{r4, pc}

0000f968 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f968:	f7f5 bdda 	b.w	5520 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f96c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f96c:	2000      	movs	r0, #0
    f96e:	4770      	bx	lr

0000f970 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f970:	f7f6 bab4 	b.w	5edc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f974 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f974:	2100      	movs	r1, #0
    f976:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    f97a:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    f97e:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    f982:	f890 1113 	ldrb.w	r1, [r0, #275]	; 0x113
    f986:	b109      	cbz	r1, f98c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f988:	2102      	movs	r1, #2
    f98a:	e000      	b.n	f98e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f98c:	2103      	movs	r1, #3
    f98e:	f7f8 bd2f 	b.w	83f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f992:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f996:	28fe      	cmp	r0, #254	; 0xfe
    f998:	d001      	beq.n	f99e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f99a:	2001      	movs	r0, #1
    f99c:	4770      	bx	lr
    f99e:	2000      	movs	r0, #0
    f9a0:	4770      	bx	lr
    f9a2:	b510      	push	{r4, lr}
    f9a4:	2801      	cmp	r0, #1
    f9a6:	d006      	beq.n	f9b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f9a8:	2802      	cmp	r0, #2
    f9aa:	d004      	beq.n	f9b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f9ac:	f44f 711d 	mov.w	r1, #628	; 0x274
    f9b0:	2006      	movs	r0, #6
    f9b2:	f7f5 fa0f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9b6:	bd10      	pop	{r4, pc}
    f9b8:	2801      	cmp	r0, #1
    f9ba:	d002      	beq.n	f9c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f9bc:	2802      	cmp	r0, #2
    f9be:	d105      	bne.n	f9cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f9c0:	e002      	b.n	f9c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f9c2:	2901      	cmp	r1, #1
    f9c4:	d004      	beq.n	f9d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f9c6:	e001      	b.n	f9cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f9c8:	2902      	cmp	r1, #2
    f9ca:	d001      	beq.n	f9d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f9cc:	2000      	movs	r0, #0
    f9ce:	4770      	bx	lr
    f9d0:	2001      	movs	r0, #1
    f9d2:	4770      	bx	lr
    f9d4:	1a40      	subs	r0, r0, r1
    f9d6:	b200      	sxth	r0, r0
    f9d8:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f9dc:	4288      	cmp	r0, r1
    f9de:	dc01      	bgt.n	f9e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f9e0:	2800      	cmp	r0, #0
    f9e2:	dc01      	bgt.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f9e4:	2001      	movs	r0, #1
    f9e6:	4770      	bx	lr
    f9e8:	2000      	movs	r0, #0
    f9ea:	4770      	bx	lr
    f9ec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f9f0:	f001 0107 	and.w	r1, r1, #7
    f9f4:	7800      	ldrb	r0, [r0, #0]
    f9f6:	40c8      	lsrs	r0, r1
    f9f8:	f000 0001 	and.w	r0, r0, #1
    f9fc:	4770      	bx	lr
    f9fe:	b118      	cbz	r0, fa08 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
    fa00:	2802      	cmp	r0, #2
    fa02:	d001      	beq.n	fa08 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x94>
    fa04:	2001      	movs	r0, #1
    fa06:	4770      	bx	lr
    fa08:	2000      	movs	r0, #0
    fa0a:	4770      	bx	lr

0000fa0c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fa0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fa0e:	7881      	ldrb	r1, [r0, #2]
    fa10:	4604      	mov	r4, r0
    fa12:	291a      	cmp	r1, #26
    fa14:	d025      	beq.n	fa62 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fa16:	dc0e      	bgt.n	fa36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    fa18:	2916      	cmp	r1, #22
    fa1a:	d22c      	bcs.n	fa76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa1c:	e8df f001 	tbb	[pc, r1]
    fa20:	2b2b2b2b 	.word	0x2b2b2b2b
    fa24:	2b2b212b 	.word	0x2b2b212b
    fa28:	2b2b2b2b 	.word	0x2b2b2b2b
    fa2c:	2b2b2b2b 	.word	0x2b2b2b2b
    fa30:	212b2b2b 	.word	0x212b2b2b
    fa34:	2121      	.short	0x2121
    fa36:	292a      	cmp	r1, #42	; 0x2a
    fa38:	d01d      	beq.n	fa76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa3a:	dc0b      	bgt.n	fa54 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    fa3c:	f1a1 011e 	sub.w	r1, r1, #30
    fa40:	290c      	cmp	r1, #12
    fa42:	d218      	bcs.n	fa76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa44:	e8df f001 	tbb	[pc, r1]
    fa48:	17171717 	.word	0x17171717
    fa4c:	17171717 	.word	0x17171717
    fa50:	0d171717 	.word	0x0d171717
    fa54:	393a      	subs	r1, #58	; 0x3a
    fa56:	2904      	cmp	r1, #4
    fa58:	d20d      	bcs.n	fa76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa5a:	e8df f001 	tbb	[pc, r1]
    fa5e:	020c      	.short	0x020c
    fa60:	020c      	.short	0x020c
    fa62:	8820      	ldrh	r0, [r4, #0]
    fa64:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fa68:	d205      	bcs.n	fa76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa6a:	4669      	mov	r1, sp
    fa6c:	f7fe fc27 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa70:	b118      	cbz	r0, fa7a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fa72:	2002      	movs	r0, #2
    fa74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa76:	2012      	movs	r0, #18
    fa78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fa7a:	9d01      	ldr	r5, [sp, #4]
    fa7c:	4668      	mov	r0, sp
    fa7e:	462e      	mov	r6, r5
    fa80:	f505 75c4 	add.w	r5, r5, #392	; 0x188
    fa84:	f206 1689 	addw	r6, r6, #393	; 0x189
    fa88:	f000 fead 	bl	107e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    fa8c:	b138      	cbz	r0, fa9e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x92>
    fa8e:	7828      	ldrb	r0, [r5, #0]
    fa90:	f88d 0008 	strb.w	r0, [sp, #8]
    fa94:	9802      	ldr	r0, [sp, #8]
    fa96:	9002      	str	r0, [sp, #8]
    fa98:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fa9c:	b108      	cbz	r0, faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x96>
    fa9e:	200c      	movs	r0, #12
    faa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    faa2:	20ff      	movs	r0, #255	; 0xff
    faa4:	7028      	strb	r0, [r5, #0]
    faa6:	78a0      	ldrb	r0, [r4, #2]
    faa8:	7030      	strb	r0, [r6, #0]
    faaa:	4668      	mov	r0, sp
    faac:	f7fe ffa4 	bl	e9f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fab0:	2000      	movs	r0, #0
    fab2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fab4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fab4:	b510      	push	{r4, lr}
    fab6:	4604      	mov	r4, r0
    fab8:	7800      	ldrb	r0, [r0, #0]
    faba:	b118      	cbz	r0, fac4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fabc:	2801      	cmp	r0, #1
    fabe:	d001      	beq.n	fac4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fac0:	2012      	movs	r0, #18
    fac2:	bd10      	pop	{r4, pc}
    fac4:	f000 fec8 	bl	10858 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fac8:	b120      	cbz	r0, fad4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    faca:	f7f6 fe63 	bl	6794 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    face:	b108      	cbz	r0, fad4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fad0:	200c      	movs	r0, #12
    fad2:	bd10      	pop	{r4, pc}
    fad4:	7820      	ldrb	r0, [r4, #0]
    fad6:	f7ff ff92 	bl	f9fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fada:	1de2      	adds	r2, r4, #7
    fadc:	f104 0317 	add.w	r3, r4, #23
    fae0:	1c61      	adds	r1, r4, #1
    fae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fae6:	f7f6 be87 	b.w	67f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000faea <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    faea:	b510      	push	{r4, lr}
    faec:	4604      	mov	r4, r0
    faee:	f000 ffa0 	bl	10a32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    faf2:	b108      	cbz	r0, faf8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    faf4:	200c      	movs	r0, #12
    faf6:	bd10      	pop	{r4, pc}
    faf8:	7820      	ldrb	r0, [r4, #0]
    fafa:	b118      	cbz	r0, fb04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fafc:	2801      	cmp	r0, #1
    fafe:	d001      	beq.n	fb04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb00:	2012      	movs	r0, #18
    fb02:	bd10      	pop	{r4, pc}
    fb04:	f7ff ff7b 	bl	f9fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fb08:	1c61      	adds	r1, r4, #1
    fb0a:	f7f6 feed 	bl	68e8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fb0e:	b108      	cbz	r0, fb14 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fb10:	2000      	movs	r0, #0
    fb12:	bd10      	pop	{r4, pc}
    fb14:	2007      	movs	r0, #7
    fb16:	bd10      	pop	{r4, pc}

0000fb18 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fb18:	b510      	push	{r4, lr}
    fb1a:	f000 fe9d 	bl	10858 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fb1e:	b120      	cbz	r0, fb2a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fb20:	f7f6 fe38 	bl	6794 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb24:	b108      	cbz	r0, fb2a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fb26:	200c      	movs	r0, #12
    fb28:	bd10      	pop	{r4, pc}
    fb2a:	f7f6 feab 	bl	6884 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fb2e:	2000      	movs	r0, #0
    fb30:	bd10      	pop	{r4, pc}

0000fb32 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fb32:	b510      	push	{r4, lr}
    fb34:	f000 ff7d 	bl	10a32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    fb38:	b108      	cbz	r0, fb3e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fb3a:	200c      	movs	r0, #12
    fb3c:	bd10      	pop	{r4, pc}
    fb3e:	f7f6 fefb 	bl	6938 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fb42:	2000      	movs	r0, #0
    fb44:	bd10      	pop	{r4, pc}

0000fb46 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fb46:	b510      	push	{r4, lr}
    fb48:	460b      	mov	r3, r1
    fb4a:	2201      	movs	r2, #1
    fb4c:	f100 0110 	add.w	r1, r0, #16
    fb50:	f7fe fb97 	bl	e282 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb54:	2000      	movs	r0, #0
    fb56:	bd10      	pop	{r4, pc}

0000fb58 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fb58:	b510      	push	{r4, lr}
    fb5a:	8800      	ldrh	r0, [r0, #0]
    fb5c:	2100      	movs	r1, #0
    fb5e:	f7fe f925 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb62:	b118      	cbz	r0, fb6c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fb64:	f890 118b 	ldrb.w	r1, [r0, #395]	; 0x18b
    fb68:	b111      	cbz	r1, fb70 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fb6a:	e007      	b.n	fb7c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fb6c:	2002      	movs	r0, #2
    fb6e:	bd10      	pop	{r4, pc}
    fb70:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    fb74:	2914      	cmp	r1, #20
    fb76:	d003      	beq.n	fb80 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb78:	2915      	cmp	r1, #21
    fb7a:	d001      	beq.n	fb80 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb7c:	200c      	movs	r0, #12
    fb7e:	bd10      	pop	{r4, pc}
    fb80:	2102      	movs	r1, #2
    fb82:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
    fb86:	2000      	movs	r0, #0
    fb88:	bd10      	pop	{r4, pc}

0000fb8a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb8c:	4605      	mov	r5, r0
    fb8e:	8800      	ldrh	r0, [r0, #0]
    fb90:	2100      	movs	r1, #0
    fb92:	f7fe f90b 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb96:	0004      	movs	r4, r0
    fb98:	d003      	beq.n	fba2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fb9a:	f894 018b 	ldrb.w	r0, [r4, #395]	; 0x18b
    fb9e:	b110      	cbz	r0, fba6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fba0:	e011      	b.n	fbc6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fba2:	2002      	movs	r0, #2
    fba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fba6:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    fbaa:	2814      	cmp	r0, #20
    fbac:	d001      	beq.n	fbb2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fbae:	2815      	cmp	r0, #21
    fbb0:	d109      	bne.n	fbc6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fbb2:	f894 01dc 	ldrb.w	r0, [r4, #476]	; 0x1dc
    fbb6:	f88d 0000 	strb.w	r0, [sp]
    fbba:	9800      	ldr	r0, [sp, #0]
    fbbc:	9000      	str	r0, [sp, #0]
    fbbe:	f89d 0000 	ldrb.w	r0, [sp]
    fbc2:	2601      	movs	r6, #1
    fbc4:	b108      	cbz	r0, fbca <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fbc6:	200c      	movs	r0, #12
    fbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbca:	2210      	movs	r2, #16
    fbcc:	1ca9      	adds	r1, r5, #2
    fbce:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
    fbd2:	f7fd f8c6 	bl	cd62 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fbd6:	f884 618b 	strb.w	r6, [r4, #395]	; 0x18b
    fbda:	2000      	movs	r0, #0
    fbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fbde <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fbde:	b510      	push	{r4, lr}
    fbe0:	2108      	movs	r1, #8
    fbe2:	f7f5 f991 	bl	4f08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fbe6:	2000      	movs	r0, #0
    fbe8:	bd10      	pop	{r4, pc}

0000fbea <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fbea:	b510      	push	{r4, lr}
    fbec:	4604      	mov	r4, r0
    fbee:	f000 fe1c 	bl	1082a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fbf2:	f7ff f98e 	bl	ef12 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fbf6:	7020      	strb	r0, [r4, #0]
    fbf8:	2000      	movs	r0, #0
    fbfa:	bd10      	pop	{r4, pc}

0000fbfc <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fbfc:	b510      	push	{r4, lr}
    fbfe:	4604      	mov	r4, r0
    fc00:	f000 fde8 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    fc04:	b140      	cbz	r0, fc18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fc06:	20fb      	movs	r0, #251	; 0xfb
    fc08:	8020      	strh	r0, [r4, #0]
    fc0a:	f640 0148 	movw	r1, #2120	; 0x848
    fc0e:	8061      	strh	r1, [r4, #2]
    fc10:	80a0      	strh	r0, [r4, #4]
    fc12:	80e1      	strh	r1, [r4, #6]
    fc14:	2000      	movs	r0, #0
    fc16:	bd10      	pop	{r4, pc}
    fc18:	2001      	movs	r0, #1
    fc1a:	bd10      	pop	{r4, pc}

0000fc1c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fc1c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fc1e:	460d      	mov	r5, r1
    fc20:	4606      	mov	r6, r0
    fc22:	f000 fdf9 	bl	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    fc26:	b300      	cbz	r0, fc6a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4e>
    fc28:	8830      	ldrh	r0, [r6, #0]
    fc2a:	4669      	mov	r1, sp
    fc2c:	f7fe fb47 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc30:	2800      	cmp	r0, #0
    fc32:	d119      	bne.n	fc68 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    fc34:	9c01      	ldr	r4, [sp, #4]
    fc36:	2700      	movs	r7, #0
    fc38:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    fc3c:	f814 0f6e 	ldrb.w	r0, [r4, #110]!
    fc40:	f000 fc64 	bl	1050c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    fc44:	70a8      	strb	r0, [r5, #2]
    fc46:	7860      	ldrb	r0, [r4, #1]
    fc48:	f000 fc60 	bl	1050c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    fc4c:	70e8      	strb	r0, [r5, #3]
    fc4e:	78a0      	ldrb	r0, [r4, #2]
    fc50:	f88d 0008 	strb.w	r0, [sp, #8]
    fc54:	9802      	ldr	r0, [sp, #8]
    fc56:	9002      	str	r0, [sp, #8]
    fc58:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fc5c:	3c6e      	subs	r4, #110	; 0x6e
    fc5e:	2800      	cmp	r0, #0
    fc60:	d1ea      	bne.n	fc38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x1c>
    fc62:	8830      	ldrh	r0, [r6, #0]
    fc64:	8028      	strh	r0, [r5, #0]
    fc66:	2000      	movs	r0, #0
    fc68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fc6a:	2001      	movs	r0, #1
    fc6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fc6e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fc6e:	b51c      	push	{r2, r3, r4, lr}
    fc70:	8800      	ldrh	r0, [r0, #0]
    fc72:	4669      	mov	r1, sp
    fc74:	f7fe fb23 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc78:	2800      	cmp	r0, #0
    fc7a:	d10c      	bne.n	fc96 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    fc7c:	f89d 0000 	ldrb.w	r0, [sp]
    fc80:	2801      	cmp	r0, #1
    fc82:	d10f      	bne.n	fca4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x36>
    fc84:	9801      	ldr	r0, [sp, #4]
    fc86:	f000 fdb1 	bl	107ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    fc8a:	b128      	cbz	r0, fc98 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fc8c:	9801      	ldr	r0, [sp, #4]
    fc8e:	f890 01c5 	ldrb.w	r0, [r0, #453]	; 0x1c5
    fc92:	b118      	cbz	r0, fc9c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    fc94:	203a      	movs	r0, #58	; 0x3a
    fc96:	bd1c      	pop	{r2, r3, r4, pc}
    fc98:	2002      	movs	r0, #2
    fc9a:	bd1c      	pop	{r2, r3, r4, pc}
    fc9c:	9901      	ldr	r1, [sp, #4]
    fc9e:	2001      	movs	r0, #1
    fca0:	f881 01c5 	strb.w	r0, [r1, #453]	; 0x1c5
    fca4:	2000      	movs	r0, #0
    fca6:	bd1c      	pop	{r2, r3, r4, pc}

0000fca8 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fca8:	2108      	movs	r1, #8
    fcaa:	7001      	strb	r1, [r0, #0]
    fcac:	2000      	movs	r0, #0
    fcae:	4770      	bx	lr

0000fcb0 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fcb0:	b510      	push	{r4, lr}
    fcb2:	4604      	mov	r4, r0
    fcb4:	20d8      	movs	r0, #216	; 0xd8
    fcb6:	7020      	strb	r0, [r4, #0]
    fcb8:	f000 fd6d 	bl	10796 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    fcbc:	7060      	strb	r0, [r4, #1]
    fcbe:	2000      	movs	r0, #0
    fcc0:	bd10      	pop	{r4, pc}

0000fcc2 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fcc2:	2108      	movs	r1, #8
    fcc4:	7001      	strb	r1, [r0, #0]
    fcc6:	2000      	movs	r0, #0
    fcc8:	4770      	bx	lr

0000fcca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fcca:	b510      	push	{r4, lr}
    fccc:	4604      	mov	r4, r0
    fcce:	7800      	ldrb	r0, [r0, #0]
    fcd0:	b108      	cbz	r0, fcd6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fcd2:	2801      	cmp	r0, #1
    fcd4:	d110      	bne.n	fcf8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fcd6:	f000 fdbf 	bl	10858 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fcda:	b120      	cbz	r0, fce6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fcdc:	f7f6 fd5a 	bl	6794 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fce0:	b108      	cbz	r0, fce6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fce2:	200c      	movs	r0, #12
    fce4:	bd10      	pop	{r4, pc}
    fce6:	7820      	ldrb	r0, [r4, #0]
    fce8:	f7ff fe89 	bl	f9fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fcec:	1c61      	adds	r1, r4, #1
    fcee:	f7fe faae 	bl	e24e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fcf2:	b108      	cbz	r0, fcf8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fcf4:	2000      	movs	r0, #0
    fcf6:	bd10      	pop	{r4, pc}
    fcf8:	2012      	movs	r0, #18
    fcfa:	bd10      	pop	{r4, pc}

0000fcfc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fcfc:	b510      	push	{r4, lr}
    fcfe:	4604      	mov	r4, r0
    fd00:	f000 fe97 	bl	10a32 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55e>
    fd04:	b108      	cbz	r0, fd0a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fd06:	200c      	movs	r0, #12
    fd08:	bd10      	pop	{r4, pc}
    fd0a:	7820      	ldrb	r0, [r4, #0]
    fd0c:	b108      	cbz	r0, fd12 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fd0e:	2801      	cmp	r0, #1
    fd10:	d107      	bne.n	fd22 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fd12:	f7ff fe74 	bl	f9fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    fd16:	1c61      	adds	r1, r4, #1
    fd18:	f7fe faa8 	bl	e26c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fd1c:	b108      	cbz	r0, fd22 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fd1e:	2000      	movs	r0, #0
    fd20:	bd10      	pop	{r4, pc}
    fd22:	2012      	movs	r0, #18
    fd24:	bd10      	pop	{r4, pc}

0000fd26 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fd26:	b510      	push	{r4, lr}
    fd28:	4604      	mov	r4, r0
    fd2a:	f000 fd95 	bl	10858 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    fd2e:	b108      	cbz	r0, fd34 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fd30:	200c      	movs	r0, #12
    fd32:	bd10      	pop	{r4, pc}
    fd34:	7820      	ldrb	r0, [r4, #0]
    fd36:	f000 0001 	and.w	r0, r0, #1
    fd3a:	f7f6 fd25 	bl	6788 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fd3e:	2000      	movs	r0, #0
    fd40:	bd10      	pop	{r4, pc}

0000fd42 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fd42:	b51c      	push	{r2, r3, r4, lr}
    fd44:	4604      	mov	r4, r0
    fd46:	f000 fd70 	bl	1082a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fd4a:	2000      	movs	r0, #0
    fd4c:	f88d 0002 	strb.w	r0, [sp, #2]
    fd50:	2103      	movs	r1, #3
    fd52:	f88d 1001 	strb.w	r1, [sp, #1]
    fd56:	f814 1b01 	ldrb.w	r1, [r4], #1
    fd5a:	f88d 1003 	strb.w	r1, [sp, #3]
    fd5e:	f88d 0000 	strb.w	r0, [sp]
    fd62:	4668      	mov	r0, sp
    fd64:	9401      	str	r4, [sp, #4]
    fd66:	f000 f9f6 	bl	10156 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fd6a:	bd1c      	pop	{r2, r3, r4, pc}

0000fd6c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fd6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fd6e:	4605      	mov	r5, r0
    fd70:	f000 fd5b 	bl	1082a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fd74:	4606      	mov	r6, r0
    fd76:	7828      	ldrb	r0, [r5, #0]
    fd78:	2400      	movs	r4, #0
    fd7a:	b160      	cbz	r0, fd96 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd7c:	f88d 4000 	strb.w	r4, [sp]
    fd80:	2001      	movs	r0, #1
    fd82:	f10d 0101 	add.w	r1, sp, #1
    fd86:	f7f5 fecb 	bl	5b20 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fd8a:	b120      	cbz	r0, fd96 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd8c:	4668      	mov	r0, sp
    fd8e:	f000 f897 	bl	fec0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fd92:	2800      	cmp	r0, #0
    fd94:	d112      	bne.n	fdbc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd96:	f88d 400c 	strb.w	r4, [sp, #12]
    fd9a:	4630      	mov	r0, r6
    fd9c:	f7ff f8af 	bl	eefe <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fda0:	b118      	cbz	r0, fdaa <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fda2:	2080      	movs	r0, #128	; 0x80
    fda4:	f8ad 000d 	strh.w	r0, [sp, #13]
    fda8:	e001      	b.n	fdae <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fdaa:	f8ad 400d 	strh.w	r4, [sp, #13]
    fdae:	f88d 400f 	strb.w	r4, [sp, #15]
    fdb2:	7828      	ldrb	r0, [r5, #0]
    fdb4:	2801      	cmp	r0, #1
    fdb6:	d003      	beq.n	fdc0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fdb8:	b138      	cbz	r0, fdca <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fdba:	2012      	movs	r0, #18
    fdbc:	b004      	add	sp, #16
    fdbe:	bd70      	pop	{r4, r5, r6, pc}
    fdc0:	a903      	add	r1, sp, #12
    fdc2:	4630      	mov	r0, r6
    fdc4:	f7fb f9a0 	bl	b108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fdc8:	e7f8      	b.n	fdbc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fdca:	4630      	mov	r0, r6
    fdcc:	f000 fd4b 	bl	10866 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x392>
    fdd0:	e7f4      	b.n	fdbc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fdd2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fdd2:	b530      	push	{r4, r5, lr}
    fdd4:	b08b      	sub	sp, #44	; 0x2c
    fdd6:	4604      	mov	r4, r0
    fdd8:	f000 fd27 	bl	1082a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    fddc:	4602      	mov	r2, r0
    fdde:	7920      	ldrb	r0, [r4, #4]
    fde0:	2804      	cmp	r0, #4
    fde2:	d803      	bhi.n	fdec <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fde4:	8860      	ldrh	r0, [r4, #2]
    fde6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fdea:	d902      	bls.n	fdf2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fdec:	2012      	movs	r0, #18
    fdee:	b00b      	add	sp, #44	; 0x2c
    fdf0:	bd30      	pop	{r4, r5, pc}
    fdf2:	2500      	movs	r5, #0
    fdf4:	f88d 5004 	strb.w	r5, [sp, #4]
    fdf8:	7921      	ldrb	r1, [r4, #4]
    fdfa:	9500      	str	r5, [sp, #0]
    fdfc:	f89d 0000 	ldrb.w	r0, [sp]
    fe00:	2905      	cmp	r1, #5
    fe02:	f040 0010 	orr.w	r0, r0, #16
    fe06:	f88d 0000 	strb.w	r0, [sp]
    fe0a:	d254      	bcs.n	feb6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fe0c:	e8df f001 	tbb	[pc, r1]
    fe10:	11050803 	.word	0x11050803
    fe14:	000b      	.short	0x000b
    fe16:	f040 0001 	orr.w	r0, r0, #1
    fe1a:	f040 0002 	orr.w	r0, r0, #2
    fe1e:	e006      	b.n	fe2e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fe20:	f040 0009 	orr.w	r0, r0, #9
    fe24:	e001      	b.n	fe2a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fe26:	f040 0001 	orr.w	r0, r0, #1
    fe2a:	f040 0004 	orr.w	r0, r0, #4
    fe2e:	f88d 0000 	strb.w	r0, [sp]
    fe32:	f8bd 0000 	ldrh.w	r0, [sp]
    fe36:	9000      	str	r0, [sp, #0]
    fe38:	f8bd 0000 	ldrh.w	r0, [sp]
    fe3c:	f8ad 0005 	strh.w	r0, [sp, #5]
    fe40:	8821      	ldrh	r1, [r4, #0]
    fe42:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fe46:	f361 201f 	bfi	r0, r1, #8, #24
    fe4a:	f8cd 0006 	str.w	r0, [sp, #6]
    fe4e:	8861      	ldrh	r1, [r4, #2]
    fe50:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fe54:	f361 201f 	bfi	r0, r1, #8, #24
    fe58:	f8cd 0009 	str.w	r0, [sp, #9]
    fe5c:	7b60      	ldrb	r0, [r4, #13]
    fe5e:	f88d 000d 	strb.w	r0, [sp, #13]
    fe62:	7960      	ldrb	r0, [r4, #5]
    fe64:	f88d 000e 	strb.w	r0, [sp, #14]
    fe68:	79a0      	ldrb	r0, [r4, #6]
    fe6a:	f88d 000f 	strb.w	r0, [sp, #15]
    fe6e:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fe72:	9004      	str	r0, [sp, #16]
    fe74:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fe78:	f8ad 0014 	strh.w	r0, [sp, #20]
    fe7c:	7ba0      	ldrb	r0, [r4, #14]
    fe7e:	f88d 0016 	strb.w	r0, [sp, #22]
    fe82:	207f      	movs	r0, #127	; 0x7f
    fe84:	f88d 0017 	strb.w	r0, [sp, #23]
    fe88:	2001      	movs	r0, #1
    fe8a:	f88d 0018 	strb.w	r0, [sp, #24]
    fe8e:	f88d 5019 	strb.w	r5, [sp, #25]
    fe92:	f88d 001a 	strb.w	r0, [sp, #26]
    fe96:	f88d 501b 	strb.w	r5, [sp, #27]
    fe9a:	4610      	mov	r0, r2
    fe9c:	f7ff f84b 	bl	ef36 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fea0:	f88d 001c 	strb.w	r0, [sp, #28]
    fea4:	f88d 501d 	strb.w	r5, [sp, #29]
    fea8:	f88d 501e 	strb.w	r5, [sp, #30]
    feac:	a909      	add	r1, sp, #36	; 0x24
    feae:	a801      	add	r0, sp, #4
    feb0:	f000 f8dc 	bl	1006c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    feb4:	e79b      	b.n	fdee <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    feb6:	f241 01ff 	movw	r1, #4351	; 0x10ff
    feba:	2039      	movs	r0, #57	; 0x39
    febc:	f7f4 ff8a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fec0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fec0:	b570      	push	{r4, r5, r6, lr}
    fec2:	4604      	mov	r4, r0
    fec4:	7800      	ldrb	r0, [r0, #0]
    fec6:	2101      	movs	r1, #1
    fec8:	f7fd ff70 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fecc:	0005      	movs	r5, r0
    fece:	d007      	beq.n	fee0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fed0:	f7ff f9f6 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fed4:	b160      	cbz	r0, fef0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fed6:	4628      	mov	r0, r5
    fed8:	f7ff f817 	bl	ef0a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fedc:	b110      	cbz	r0, fee4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fede:	e005      	b.n	feec <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fee0:	2042      	movs	r0, #66	; 0x42
    fee2:	bd70      	pop	{r4, r5, r6, pc}
    fee4:	4628      	mov	r0, r5
    fee6:	f7ff f806 	bl	eef6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    feea:	b108      	cbz	r0, fef0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    feec:	200c      	movs	r0, #12
    feee:	bd70      	pop	{r4, r5, r6, pc}
    fef0:	1c61      	adds	r1, r4, #1
    fef2:	4628      	mov	r0, r5
    fef4:	f7ff f817 	bl	ef26 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fef8:	2000      	movs	r0, #0
    fefa:	bd70      	pop	{r4, r5, r6, pc}

0000fefc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fefc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fefe:	460d      	mov	r5, r1
    ff00:	4604      	mov	r4, r0
    ff02:	f000 fc67 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ff06:	b130      	cbz	r0, ff16 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ff08:	88a2      	ldrh	r2, [r4, #4]
    ff0a:	f244 2090 	movw	r0, #17040	; 0x4290
    ff0e:	4282      	cmp	r2, r0
    ff10:	d903      	bls.n	ff1a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ff12:	2012      	movs	r0, #18
    ff14:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff16:	2001      	movs	r0, #1
    ff18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff1a:	f640 0048 	movw	r0, #2120	; 0x848
    ff1e:	4282      	cmp	r2, r0
    ff20:	d300      	bcc.n	ff24 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ff22:	4602      	mov	r2, r0
    ff24:	8820      	ldrh	r0, [r4, #0]
    ff26:	f8ad 0000 	strh.w	r0, [sp]
    ff2a:	8860      	ldrh	r0, [r4, #2]
    ff2c:	f8ad 0002 	strh.w	r0, [sp, #2]
    ff30:	f8ad 2004 	strh.w	r2, [sp, #4]
    ff34:	8860      	ldrh	r0, [r4, #2]
    ff36:	f8ad 0006 	strh.w	r0, [sp, #6]
    ff3a:	f8ad 2008 	strh.w	r2, [sp, #8]
    ff3e:	8820      	ldrh	r0, [r4, #0]
    ff40:	8028      	strh	r0, [r5, #0]
    ff42:	4668      	mov	r0, sp
    ff44:	f000 fcb5 	bl	108b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    ff48:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ff4a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    ff4a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ff4c:	4604      	mov	r4, r0
    ff4e:	f000 fc63 	bl	10818 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    ff52:	b1b0      	cbz	r0, ff82 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x38>
    ff54:	f10d 0007 	add.w	r0, sp, #7
    ff58:	9000      	str	r0, [sp, #0]
    ff5a:	7922      	ldrb	r2, [r4, #4]
    ff5c:	78e1      	ldrb	r1, [r4, #3]
    ff5e:	78a0      	ldrb	r0, [r4, #2]
    ff60:	f10d 0306 	add.w	r3, sp, #6
    ff64:	f000 fd29 	bl	109ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e6>
    ff68:	2800      	cmp	r0, #0
    ff6a:	d109      	bne.n	ff80 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x36>
    ff6c:	8820      	ldrh	r0, [r4, #0]
    ff6e:	f8ad 0004 	strh.w	r0, [sp, #4]
    ff72:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ff76:	f8ad 0008 	strh.w	r0, [sp, #8]
    ff7a:	a801      	add	r0, sp, #4
    ff7c:	f000 f9a6 	bl	102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ff80:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ff82:	2001      	movs	r0, #1
    ff84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ff86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    ff86:	b510      	push	{r4, lr}
    ff88:	4604      	mov	r4, r0
    ff8a:	f000 fc65 	bl	10858 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x384>
    ff8e:	b120      	cbz	r0, ff9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ff90:	f7f6 fc00 	bl	6794 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ff94:	b108      	cbz	r0, ff9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ff96:	200c      	movs	r0, #12
    ff98:	bd10      	pop	{r4, pc}
    ff9a:	7820      	ldrb	r0, [r4, #0]
    ff9c:	f7ff fd2f 	bl	f9fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8a>
    ffa0:	79e2      	ldrb	r2, [r4, #7]
    ffa2:	1c61      	adds	r1, r4, #1
    ffa4:	f7f6 fba4 	bl	66f0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ffa8:	b108      	cbz	r0, ffae <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ffaa:	2000      	movs	r0, #0
    ffac:	bd10      	pop	{r4, pc}
    ffae:	2002      	movs	r0, #2
    ffb0:	bd10      	pop	{r4, pc}

0000ffb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ffb2:	b510      	push	{r4, lr}
    ffb4:	4604      	mov	r4, r0
    ffb6:	2001      	movs	r0, #1
    ffb8:	f000 facb 	bl	10552 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ffbc:	b128      	cbz	r0, ffca <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ffbe:	4621      	mov	r1, r4
    ffc0:	2001      	movs	r0, #1
    ffc2:	f7f5 fdc5 	bl	5b50 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ffc6:	2000      	movs	r0, #0
    ffc8:	bd10      	pop	{r4, pc}
    ffca:	200c      	movs	r0, #12
    ffcc:	bd10      	pop	{r4, pc}

0000ffce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ffce:	b510      	push	{r4, lr}
    ffd0:	8800      	ldrh	r0, [r0, #0]
    ffd2:	f7f6 fc6d 	bl	68b0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ffd6:	b108      	cbz	r0, ffdc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ffd8:	2000      	movs	r0, #0
    ffda:	bd10      	pop	{r4, pc}
    ffdc:	2030      	movs	r0, #48	; 0x30
    ffde:	bd10      	pop	{r4, pc}

0000ffe0 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ffe0:	b51c      	push	{r2, r3, r4, lr}
    ffe2:	4604      	mov	r4, r0
    ffe4:	f000 fc21 	bl	1082a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
    ffe8:	2000      	movs	r0, #0
    ffea:	f88d 0000 	strb.w	r0, [sp]
    ffee:	f88d 0002 	strb.w	r0, [sp, #2]
    fff2:	2003      	movs	r0, #3
    fff4:	f88d 0001 	strb.w	r0, [sp, #1]
    fff8:	f814 0b01 	ldrb.w	r0, [r4], #1
    fffc:	f88d 0003 	strb.w	r0, [sp, #3]
   10000:	4668      	mov	r0, sp
   10002:	9401      	str	r4, [sp, #4]
   10004:	f000 f910 	bl	10228 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   10008:	bd1c      	pop	{r2, r3, r4, pc}

0001000a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1000a:	b51c      	push	{r2, r3, r4, lr}
   1000c:	4604      	mov	r4, r0
   1000e:	f000 fbe1 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10012:	b178      	cbz	r0, 10034 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   10014:	8820      	ldrh	r0, [r4, #0]
   10016:	f8ad 0000 	strh.w	r0, [sp]
   1001a:	8860      	ldrh	r0, [r4, #2]
   1001c:	f8ad 0002 	strh.w	r0, [sp, #2]
   10020:	8820      	ldrh	r0, [r4, #0]
   10022:	f8ad 0004 	strh.w	r0, [sp, #4]
   10026:	8860      	ldrh	r0, [r4, #2]
   10028:	f8ad 0006 	strh.w	r0, [sp, #6]
   1002c:	4668      	mov	r0, sp
   1002e:	f7fb f939 	bl	b2a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
   10032:	bd1c      	pop	{r2, r3, r4, pc}
   10034:	2001      	movs	r0, #1
   10036:	bd1c      	pop	{r2, r3, r4, pc}

00010038 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10038:	b510      	push	{r4, lr}
   1003a:	f7f5 fdad 	bl	5b98 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1003e:	2000      	movs	r0, #0
   10040:	bd10      	pop	{r4, pc}

00010042 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10042:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10044:	460c      	mov	r4, r1
   10046:	4605      	mov	r5, r0
   10048:	f000 fbc4 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1004c:	b160      	cbz	r0, 10068 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   1004e:	4669      	mov	r1, sp
   10050:	4628      	mov	r0, r5
   10052:	f7fe f934 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10056:	2800      	cmp	r0, #0
   10058:	d105      	bne.n	10066 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   1005a:	2100      	movs	r1, #0
   1005c:	4622      	mov	r2, r4
   1005e:	9801      	ldr	r0, [sp, #4]
   10060:	f000 fb43 	bl	106ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10064:	2000      	movs	r0, #0
   10066:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10068:	2001      	movs	r0, #1
   1006a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001006c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
   1006c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10070:	460f      	mov	r7, r1
   10072:	4605      	mov	r5, r0
   10074:	7806      	ldrb	r6, [r0, #0]
   10076:	f000 fac8 	bl	1060a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
   1007a:	2800      	cmp	r0, #0
   1007c:	d10a      	bne.n	10094 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   1007e:	4628      	mov	r0, r5
   10080:	f000 fa9d 	bl	105be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
   10084:	2800      	cmp	r0, #0
   10086:	d105      	bne.n	10094 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   10088:	2001      	movs	r0, #1
   1008a:	f7f5 f88d 	bl	51a8 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
   1008e:	4286      	cmp	r6, r0
   10090:	d302      	bcc.n	10098 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
   10092:	2007      	movs	r0, #7
   10094:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10098:	2101      	movs	r1, #1
   1009a:	4630      	mov	r0, r6
   1009c:	f7fd fe86 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   100a0:	0004      	movs	r4, r0
   100a2:	d004      	beq.n	100ae <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
   100a4:	f7ff f90c 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   100a8:	b150      	cbz	r0, 100c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
   100aa:	200c      	movs	r0, #12
   100ac:	e7f2      	b.n	10094 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
   100ae:	2200      	movs	r2, #0
   100b0:	2101      	movs	r1, #1
   100b2:	4630      	mov	r0, r6
   100b4:	f7fd fe70 	bl	dd98 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   100b8:	0004      	movs	r4, r0
   100ba:	d00f      	beq.n	100dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
   100bc:	f7fe fec0 	bl	ee40 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   100c0:	4620      	mov	r0, r4
   100c2:	f7fe ff26 	bl	ef12 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
   100c6:	7038      	strb	r0, [r7, #0]
   100c8:	74e8      	strb	r0, [r5, #19]
   100ca:	4629      	mov	r1, r5
   100cc:	4620      	mov	r0, r4
   100ce:	f7f7 fa19 	bl	7504 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
   100d2:	4606      	mov	r6, r0
   100d4:	7e68      	ldrb	r0, [r5, #25]
   100d6:	b1d0      	cbz	r0, 1010e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   100d8:	b12e      	cbz	r6, 100e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
   100da:	e018      	b.n	1010e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
   100dc:	f241 218a 	movw	r1, #4746	; 0x128a
   100e0:	2039      	movs	r0, #57	; 0x39
   100e2:	f7f4 fe77 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100e6:	2200      	movs	r2, #0
   100e8:	4668      	mov	r0, sp
   100ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   100ec:	f7fd ff1f 	bl	df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100f0:	2200      	movs	r2, #0
   100f2:	2101      	movs	r1, #1
   100f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   100f6:	f7fd ff90 	bl	e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   100fa:	2204      	movs	r2, #4
   100fc:	4668      	mov	r0, sp
   100fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   10100:	f7fd ff15 	bl	df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10104:	2200      	movs	r2, #0
   10106:	4611      	mov	r1, r2
   10108:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1010a:	f7fd ff86 	bl	e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1010e:	4630      	mov	r0, r6
   10110:	e7c0      	b.n	10094 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

00010112 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   10112:	b510      	push	{r4, lr}
   10114:	4604      	mov	r4, r0
   10116:	2000      	movs	r0, #0
   10118:	f000 fa1b 	bl	10552 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
   1011c:	b128      	cbz	r0, 1012a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   1011e:	4621      	mov	r1, r4
   10120:	2000      	movs	r0, #0
   10122:	f7f5 fd15 	bl	5b50 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10126:	2000      	movs	r0, #0
   10128:	bd10      	pop	{r4, pc}
   1012a:	200c      	movs	r0, #12
   1012c:	bd10      	pop	{r4, pc}

0001012e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1012e:	b510      	push	{r4, lr}
   10130:	7800      	ldrb	r0, [r0, #0]
   10132:	f000 0001 	and.w	r0, r0, #1
   10136:	f7f8 f921 	bl	837c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1013a:	2000      	movs	r0, #0
   1013c:	bd10      	pop	{r4, pc}

0001013e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1013e:	b510      	push	{r4, lr}
   10140:	4604      	mov	r4, r0
   10142:	f000 fb47 	bl	107d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10146:	b120      	cbz	r0, 10152 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   10148:	4620      	mov	r0, r4
   1014a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1014e:	f000 bbb0 	b.w	108b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   10152:	2001      	movs	r0, #1
   10154:	bd10      	pop	{r4, pc}

00010156 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10156:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1015a:	4606      	mov	r6, r0
   1015c:	7845      	ldrb	r5, [r0, #1]
   1015e:	7800      	ldrb	r0, [r0, #0]
   10160:	2101      	movs	r1, #1
   10162:	f7fd fe23 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10166:	0004      	movs	r4, r0
   10168:	d01e      	beq.n	101a8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   1016a:	f7fe fe95 	bl	ee98 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1016e:	78f1      	ldrb	r1, [r6, #3]
   10170:	4281      	cmp	r1, r0
   10172:	d800      	bhi.n	10176 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10174:	4608      	mov	r0, r1
   10176:	4607      	mov	r7, r0
   10178:	2d04      	cmp	r5, #4
   1017a:	d018      	beq.n	101ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   1017c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1017e:	f7fd ff6f 	bl	e060 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10182:	4438      	add	r0, r7
   10184:	b281      	uxth	r1, r0
   10186:	4620      	mov	r0, r4
   10188:	2201      	movs	r2, #1
   1018a:	f000 f9f4 	bl	10576 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   1018e:	2800      	cmp	r0, #0
   10190:	d10b      	bne.n	101aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10192:	2d03      	cmp	r5, #3
   10194:	d000      	beq.n	10198 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10196:	b1df      	cbz	r7, 101d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10198:	4620      	mov	r0, r4
   1019a:	f7fe feb4 	bl	ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1019e:	7871      	ldrb	r1, [r6, #1]
   101a0:	2903      	cmp	r1, #3
   101a2:	d010      	beq.n	101c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   101a4:	b9a0      	cbnz	r0, 101d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101a6:	e004      	b.n	101b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   101a8:	2042      	movs	r0, #66	; 0x42
   101aa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   101ae:	b97f      	cbnz	r7, 101d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101b0:	e7f2      	b.n	10198 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   101b2:	2904      	cmp	r1, #4
   101b4:	d107      	bne.n	101c6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   101b6:	4620      	mov	r0, r4
   101b8:	f7ff f882 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   101bc:	b140      	cbz	r0, 101d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   101c0:	f7fd ff1d 	bl	dffe <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   101c4:	b120      	cbz	r0, 101d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   101c6:	2d01      	cmp	r5, #1
   101c8:	d004      	beq.n	101d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   101ca:	2d03      	cmp	r5, #3
   101cc:	d002      	beq.n	101d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   101ce:	e00e      	b.n	101ee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   101d0:	2012      	movs	r0, #18
   101d2:	e7ea      	b.n	101aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   101d4:	4620      	mov	r0, r4
   101d6:	f7fe fe96 	bl	ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   101da:	b108      	cbz	r0, 101e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   101dc:	2200      	movs	r2, #0
   101de:	e002      	b.n	101e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   101e0:	2d01      	cmp	r5, #1
   101e2:	d013      	beq.n	1020c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   101e4:	2201      	movs	r2, #1
   101e6:	4668      	mov	r0, sp
   101e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   101ea:	f7fd fea0 	bl	df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   101ee:	2d04      	cmp	r5, #4
   101f0:	d018      	beq.n	10224 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   101f2:	6872      	ldr	r2, [r6, #4]
   101f4:	463b      	mov	r3, r7
   101f6:	2101      	movs	r1, #1
   101f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   101fa:	f7fd fecc 	bl	df96 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   101fe:	b138      	cbz	r0, 10210 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10200:	7870      	ldrb	r0, [r6, #1]
   10202:	2802      	cmp	r0, #2
   10204:	d006      	beq.n	10214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10206:	2803      	cmp	r0, #3
   10208:	d004      	beq.n	10214 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1020a:	e00b      	b.n	10224 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1020c:	2202      	movs	r2, #2
   1020e:	e7ea      	b.n	101e6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10210:	2007      	movs	r0, #7
   10212:	e7ca      	b.n	101aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10214:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10216:	f7fd ff23 	bl	e060 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1021a:	4602      	mov	r2, r0
   1021c:	2101      	movs	r1, #1
   1021e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10220:	f7fd fefb 	bl	e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10224:	2000      	movs	r0, #0
   10226:	e7c0      	b.n	101aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010228 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10228:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1022c:	4607      	mov	r7, r0
   1022e:	7845      	ldrb	r5, [r0, #1]
   10230:	78c6      	ldrb	r6, [r0, #3]
   10232:	7800      	ldrb	r0, [r0, #0]
   10234:	2101      	movs	r1, #1
   10236:	f7fd fdb9 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1023a:	0004      	movs	r4, r0
   1023c:	d003      	beq.n	10246 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1023e:	f7fe fe64 	bl	ef0a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10242:	b118      	cbz	r0, 1024c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10244:	e003      	b.n	1024e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10246:	2042      	movs	r0, #66	; 0x42
   10248:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1024c:	2600      	movs	r6, #0
   1024e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   10250:	f7fd ff0a 	bl	e068 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10254:	4430      	add	r0, r6
   10256:	b281      	uxth	r1, r0
   10258:	4688      	mov	r8, r1
   1025a:	4620      	mov	r0, r4
   1025c:	2201      	movs	r2, #1
   1025e:	f000 f98a 	bl	10576 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
   10262:	2800      	cmp	r0, #0
   10264:	d1f0      	bne.n	10248 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10266:	2d04      	cmp	r5, #4
   10268:	d008      	beq.n	1027c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1026a:	2d03      	cmp	r5, #3
   1026c:	d00a      	beq.n	10284 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1026e:	b12e      	cbz	r6, 1027c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10270:	4620      	mov	r0, r4
   10272:	f7ff f825 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10276:	b118      	cbz	r0, 10280 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10278:	200c      	movs	r0, #12
   1027a:	e7e5      	b.n	10248 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1027c:	2012      	movs	r0, #18
   1027e:	e7e3      	b.n	10248 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10280:	2d01      	cmp	r5, #1
   10282:	d10c      	bne.n	1029e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10284:	4620      	mov	r0, r4
   10286:	f7fe fe3e 	bl	ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1028a:	b108      	cbz	r0, 10290 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   1028c:	2204      	movs	r2, #4
   1028e:	e002      	b.n	10296 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10290:	2d01      	cmp	r5, #1
   10292:	d010      	beq.n	102b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10294:	2205      	movs	r2, #5
   10296:	4668      	mov	r0, sp
   10298:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1029a:	f7fd fe48 	bl	df2e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1029e:	687a      	ldr	r2, [r7, #4]
   102a0:	4633      	mov	r3, r6
   102a2:	2100      	movs	r1, #0
   102a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   102a6:	f7fd fe76 	bl	df96 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   102aa:	b130      	cbz	r0, 102ba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   102ac:	2d02      	cmp	r5, #2
   102ae:	d006      	beq.n	102be <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   102b0:	2d03      	cmp	r5, #3
   102b2:	d004      	beq.n	102be <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   102b4:	e008      	b.n	102c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   102b6:	2206      	movs	r2, #6
   102b8:	e7ed      	b.n	10296 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   102ba:	2007      	movs	r0, #7
   102bc:	e7c4      	b.n	10248 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   102be:	4642      	mov	r2, r8
   102c0:	2100      	movs	r1, #0
   102c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   102c4:	f7fd fea9 	bl	e01a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   102c8:	2000      	movs	r0, #0
   102ca:	e7bd      	b.n	10248 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

000102cc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   102cc:	b510      	push	{r4, lr}
   102ce:	4604      	mov	r4, r0
   102d0:	8880      	ldrh	r0, [r0, #4]
   102d2:	b128      	cbz	r0, 102e0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102d4:	2801      	cmp	r0, #1
   102d6:	d003      	beq.n	102e0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102d8:	2802      	cmp	r0, #2
   102da:	d001      	beq.n	102e0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   102dc:	2012      	movs	r0, #18
   102de:	bd10      	pop	{r4, pc}
   102e0:	78e0      	ldrb	r0, [r4, #3]
   102e2:	f000 f9df 	bl	106a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   102e6:	b148      	cbz	r0, 102fc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102e8:	78a0      	ldrb	r0, [r4, #2]
   102ea:	f000 f9db 	bl	106a4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
   102ee:	b128      	cbz	r0, 102fc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   102f0:	4620      	mov	r0, r4
   102f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102f6:	2101      	movs	r1, #1
   102f8:	f000 b884 	b.w	10404 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   102fc:	2011      	movs	r0, #17
   102fe:	bd10      	pop	{r4, pc}

00010300 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10300:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10302:	460c      	mov	r4, r1
   10304:	4605      	mov	r5, r0
   10306:	8800      	ldrh	r0, [r0, #0]
   10308:	4669      	mov	r1, sp
   1030a:	f7fd ffd8 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1030e:	2800      	cmp	r0, #0
   10310:	d106      	bne.n	10320 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10312:	9801      	ldr	r0, [sp, #4]
   10314:	8829      	ldrh	r1, [r5, #0]
   10316:	8021      	strh	r1, [r4, #0]
   10318:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
   1031c:	8060      	strh	r0, [r4, #2]
   1031e:	2000      	movs	r0, #0
   10320:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010322 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10322:	b510      	push	{r4, lr}
   10324:	4604      	mov	r4, r0
   10326:	4601      	mov	r1, r0
   10328:	2000      	movs	r0, #0
   1032a:	f7f5 fbf9 	bl	5b20 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1032e:	b910      	cbnz	r0, 10336 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10330:	2000      	movs	r0, #0
   10332:	6020      	str	r0, [r4, #0]
   10334:	80a0      	strh	r0, [r4, #4]
   10336:	2000      	movs	r0, #0
   10338:	bd10      	pop	{r4, pc}

0001033a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   1033a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1033c:	8800      	ldrh	r0, [r0, #0]
   1033e:	4669      	mov	r1, sp
   10340:	f7fd ffbd 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10344:	b958      	cbnz	r0, 1035e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   10346:	4668      	mov	r0, sp
   10348:	f000 fa4d 	bl	107e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   1034c:	b138      	cbz	r0, 1035e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
   1034e:	9c01      	ldr	r4, [sp, #4]
   10350:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
   10354:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   10358:	3478      	adds	r4, #120	; 0x78
   1035a:	b929      	cbnz	r1, 10368 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
   1035c:	e001      	b.n	10362 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   1035e:	2002      	movs	r0, #2
   10360:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10362:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10366:	b109      	cbz	r1, 1036c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   10368:	203a      	movs	r0, #58	; 0x3a
   1036a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1036c:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
   10370:	f04f 0501 	mov.w	r5, #1
   10374:	0789      	lsls	r1, r1, #30
   10376:	d103      	bne.n	10380 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
   10378:	7005      	strb	r5, [r0, #0]
   1037a:	4668      	mov	r0, sp
   1037c:	f7fe fb3c 	bl	e9f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
   10380:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
   10384:	2000      	movs	r0, #0
   10386:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010388 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10388:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1038a:	460c      	mov	r4, r1
   1038c:	4605      	mov	r5, r0
   1038e:	8800      	ldrh	r0, [r0, #0]
   10390:	4669      	mov	r1, sp
   10392:	f7fd ff94 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10396:	b108      	cbz	r0, 1039c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10398:	2002      	movs	r0, #2
   1039a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1039c:	78a8      	ldrb	r0, [r5, #2]
   1039e:	b130      	cbz	r0, 103ae <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   103a0:	f000 f9f9 	bl	10796 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
   103a4:	70a0      	strb	r0, [r4, #2]
   103a6:	8828      	ldrh	r0, [r5, #0]
   103a8:	8020      	strh	r0, [r4, #0]
   103aa:	2000      	movs	r0, #0
   103ac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   103ae:	9801      	ldr	r0, [sp, #4]
   103b0:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
   103b4:	e7f6      	b.n	103a4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000103b6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   103b6:	b510      	push	{r4, lr}
   103b8:	f7fa ffae 	bl	b318 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   103bc:	2000      	movs	r0, #0
   103be:	bd10      	pop	{r4, pc}

000103c0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   103c0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   103c4:	4604      	mov	r4, r0
   103c6:	8840      	ldrh	r0, [r0, #2]
   103c8:	460d      	mov	r5, r1
   103ca:	b1b8      	cbz	r0, 103fc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   103cc:	8820      	ldrh	r0, [r4, #0]
   103ce:	4669      	mov	r1, sp
   103d0:	f7fd ff75 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103d4:	2800      	cmp	r0, #0
   103d6:	d10f      	bne.n	103f8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   103d8:	8820      	ldrh	r0, [r4, #0]
   103da:	8028      	strh	r0, [r5, #0]
   103dc:	9e01      	ldr	r6, [sp, #4]
   103de:	f106 0510 	add.w	r5, r6, #16
   103e2:	3678      	adds	r6, #120	; 0x78
   103e4:	682f      	ldr	r7, [r5, #0]
   103e6:	8862      	ldrh	r2, [r4, #2]
   103e8:	4639      	mov	r1, r7
   103ea:	4630      	mov	r0, r6
   103ec:	f7fe f8a8 	bl	e540 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   103f0:	6828      	ldr	r0, [r5, #0]
   103f2:	42b8      	cmp	r0, r7
   103f4:	d1f6      	bne.n	103e4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   103f6:	2000      	movs	r0, #0
   103f8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   103fc:	2012      	movs	r0, #18
   103fe:	e7fb      	b.n	103f8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010400 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10400:	f7fa bde6 	b.w	afd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010404 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10408:	b086      	sub	sp, #24
   1040a:	468a      	mov	sl, r1
   1040c:	4606      	mov	r6, r0
   1040e:	8800      	ldrh	r0, [r0, #0]
   10410:	a901      	add	r1, sp, #4
   10412:	f7fd ff54 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10416:	2800      	cmp	r0, #0
   10418:	d13b      	bne.n	10492 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1041a:	9802      	ldr	r0, [sp, #8]
   1041c:	f04f 0800 	mov.w	r8, #0
   10420:	4601      	mov	r1, r0
   10422:	4689      	mov	r9, r1
   10424:	f890 120c 	ldrb.w	r1, [r0, #524]	; 0x20c
   10428:	f88d 1000 	strb.w	r1, [sp]
   1042c:	9900      	ldr	r1, [sp, #0]
   1042e:	9100      	str	r1, [sp, #0]
   10430:	f89d 1000 	ldrb.w	r1, [sp]
   10434:	3078      	adds	r0, #120	; 0x78
   10436:	b109      	cbz	r1, 1043c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10438:	2501      	movs	r5, #1
   1043a:	e000      	b.n	1043e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   1043c:	2500      	movs	r5, #0
   1043e:	7b81      	ldrb	r1, [r0, #14]
   10440:	2921      	cmp	r1, #33	; 0x21
   10442:	d100      	bne.n	10446 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10444:	b13d      	cbz	r5, 10456 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10446:	2400      	movs	r4, #0
   10448:	304c      	adds	r0, #76	; 0x4c
   1044a:	2108      	movs	r1, #8
   1044c:	4607      	mov	r7, r0
   1044e:	f7ff facd 	bl	f9ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10452:	b110      	cbz	r0, 1045a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10454:	e007      	b.n	10466 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10456:	2401      	movs	r4, #1
   10458:	e7f6      	b.n	10448 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1045a:	210b      	movs	r1, #11
   1045c:	4638      	mov	r0, r7
   1045e:	f7ff fac5 	bl	f9ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10462:	b900      	cbnz	r0, 10466 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10464:	b1a4      	cbz	r4, 10490 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   10466:	a804      	add	r0, sp, #16
   10468:	9000      	str	r0, [sp, #0]
   1046a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1046e:	ab03      	add	r3, sp, #12
   10470:	4632      	mov	r2, r6
   10472:	4649      	mov	r1, r9
   10474:	f000 f96f 	bl	10756 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   10478:	0007      	movs	r7, r0
   1047a:	d10a      	bne.n	10492 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1047c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10480:	9c02      	ldr	r4, [sp, #8]
   10482:	b148      	cbz	r0, 10498 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10484:	f504 74df 	add.w	r4, r4, #446	; 0x1be
   10488:	20ff      	movs	r0, #255	; 0xff
   1048a:	7060      	strb	r0, [r4, #1]
   1048c:	b94d      	cbnz	r5, 104a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
   1048e:	e006      	b.n	1049e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
   10490:	201a      	movs	r0, #26
   10492:	b006      	add	sp, #24
   10494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10498:	f504 749f 	add.w	r4, r4, #318	; 0x13e
   1049c:	e7f4      	b.n	10488 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1049e:	7820      	ldrb	r0, [r4, #0]
   104a0:	b108      	cbz	r0, 104a6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xa2>
   104a2:	273a      	movs	r7, #58	; 0x3a
   104a4:	e012      	b.n	104cc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc8>
   104a6:	f884 a000 	strb.w	sl, [r4]
   104aa:	f89d 100c 	ldrb.w	r1, [sp, #12]
   104ae:	70a1      	strb	r1, [r4, #2]
   104b0:	f89d 0010 	ldrb.w	r0, [sp, #16]
   104b4:	70e0      	strb	r0, [r4, #3]
   104b6:	f88d 1000 	strb.w	r1, [sp]
   104ba:	f88d 0001 	strb.w	r0, [sp, #1]
   104be:	88b0      	ldrh	r0, [r6, #4]
   104c0:	f8ad 0002 	strh.w	r0, [sp, #2]
   104c4:	4669      	mov	r1, sp
   104c6:	4648      	mov	r0, r9
   104c8:	f7fd ffb8 	bl	e43c <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   104cc:	f884 8001 	strb.w	r8, [r4, #1]
   104d0:	4638      	mov	r0, r7
   104d2:	e7de      	b.n	10492 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

000104d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   104d4:	b510      	push	{r4, lr}
   104d6:	2008      	movs	r0, #8
   104d8:	f7fa ff84 	bl	b3e4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   104dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104e0:	f7f8 bd58 	b.w	8f94 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   104e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   104e8:	4288      	cmp	r0, r1
   104ea:	d303      	bcc.n	104f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   104ec:	f640 0148 	movw	r1, #2120	; 0x848
   104f0:	4288      	cmp	r0, r1
   104f2:	d300      	bcc.n	104f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   104f4:	4608      	mov	r0, r1
   104f6:	4770      	bx	lr
   104f8:	07c1      	lsls	r1, r0, #31
   104fa:	d001      	beq.n	10500 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   104fc:	2001      	movs	r0, #1
   104fe:	4770      	bx	lr
   10500:	0780      	lsls	r0, r0, #30
   10502:	d501      	bpl.n	10508 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   10504:	2002      	movs	r0, #2
   10506:	4770      	bx	lr
   10508:	2000      	movs	r0, #0
   1050a:	4770      	bx	lr
   1050c:	b510      	push	{r4, lr}
   1050e:	2801      	cmp	r0, #1
   10510:	d006      	beq.n	10520 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10512:	2802      	cmp	r0, #2
   10514:	d004      	beq.n	10520 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   10516:	f44f 711d 	mov.w	r1, #628	; 0x274
   1051a:	2006      	movs	r0, #6
   1051c:	f7f4 fc5a 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10520:	bd10      	pop	{r4, pc}
   10522:	b50e      	push	{r1, r2, r3, lr}
   10524:	4669      	mov	r1, sp
   10526:	2001      	movs	r0, #1
   10528:	f7fd fc4a 	bl	ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   1052c:	b150      	cbz	r0, 10544 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   1052e:	f240 1153 	movw	r1, #339	; 0x153
   10532:	2039      	movs	r0, #57	; 0x39
   10534:	f7f4 fc4e 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10538:	9802      	ldr	r0, [sp, #8]
   1053a:	f7fe fec1 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1053e:	b108      	cbz	r0, 10544 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   10540:	2001      	movs	r0, #1
   10542:	bd0e      	pop	{r1, r2, r3, pc}
   10544:	4668      	mov	r0, sp
   10546:	f7f4 fe7d 	bl	5244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   1054a:	2800      	cmp	r0, #0
   1054c:	d0f4      	beq.n	10538 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   1054e:	2000      	movs	r0, #0
   10550:	bd0e      	pop	{r1, r2, r3, pc}
   10552:	b510      	push	{r4, lr}
   10554:	f7ff ffe5 	bl	10522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   10558:	b158      	cbz	r0, 10572 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1055a:	f000 f966 	bl	1082a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x356>
   1055e:	4604      	mov	r4, r0
   10560:	f7fe fcd3 	bl	ef0a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10564:	b918      	cbnz	r0, 1056e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   10566:	4620      	mov	r0, r4
   10568:	f7fe fcc5 	bl	eef6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1056c:	b108      	cbz	r0, 10572 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1056e:	2000      	movs	r0, #0
   10570:	bd10      	pop	{r4, pc}
   10572:	2001      	movs	r0, #1
   10574:	bd10      	pop	{r4, pc}
   10576:	b570      	push	{r4, r5, r6, lr}
   10578:	460c      	mov	r4, r1
   1057a:	4605      	mov	r5, r0
   1057c:	b112      	cbz	r2, 10584 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   1057e:	291f      	cmp	r1, #31
   10580:	d80c      	bhi.n	1059c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   10582:	e016      	b.n	105b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   10584:	f7f5 f924 	bl	57d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10588:	42a0      	cmp	r0, r4
   1058a:	d201      	bcs.n	10590 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   1058c:	2007      	movs	r0, #7
   1058e:	bd70      	pop	{r4, r5, r6, pc}
   10590:	4628      	mov	r0, r5
   10592:	f7fe fcb8 	bl	ef06 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10596:	b118      	cbz	r0, 105a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10598:	2c1f      	cmp	r4, #31
   1059a:	d901      	bls.n	105a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1059c:	2012      	movs	r0, #18
   1059e:	bd70      	pop	{r4, r5, r6, pc}
   105a0:	4628      	mov	r0, r5
   105a2:	f7fe fcb9 	bl	ef18 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   105a6:	b130      	cbz	r0, 105b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   105a8:	4621      	mov	r1, r4
   105aa:	4628      	mov	r0, r5
   105ac:	f7fe fc80 	bl	eeb0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   105b0:	b118      	cbz	r0, 105ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   105b2:	2000      	movs	r0, #0
   105b4:	bd70      	pop	{r4, r5, r6, pc}
   105b6:	2042      	movs	r0, #66	; 0x42
   105b8:	bd70      	pop	{r4, r5, r6, pc}
   105ba:	2045      	movs	r0, #69	; 0x45
   105bc:	bd70      	pop	{r4, r5, r6, pc}
   105be:	b510      	push	{r4, lr}
   105c0:	4604      	mov	r4, r0
   105c2:	7840      	ldrb	r0, [r0, #1]
   105c4:	06c1      	lsls	r1, r0, #27
   105c6:	d51c      	bpl.n	10602 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   105c8:	07c0      	lsls	r0, r0, #31
   105ca:	d00b      	beq.n	105e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   105cc:	f7fa fede 	bl	b38c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   105d0:	b1b8      	cbz	r0, 10602 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   105d2:	7860      	ldrb	r0, [r4, #1]
   105d4:	06c1      	lsls	r1, r0, #27
   105d6:	d405      	bmi.n	105e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   105d8:	0700      	lsls	r0, r0, #28
   105da:	d503      	bpl.n	105e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   105dc:	7d20      	ldrb	r0, [r4, #20]
   105de:	2802      	cmp	r0, #2
   105e0:	d10f      	bne.n	10602 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   105e2:	e010      	b.n	10606 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   105e4:	7d20      	ldrb	r0, [r4, #20]
   105e6:	2802      	cmp	r0, #2
   105e8:	d001      	beq.n	105ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   105ea:	7ea0      	ldrb	r0, [r4, #26]
   105ec:	b948      	cbnz	r0, 10602 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   105ee:	7860      	ldrb	r0, [r4, #1]
   105f0:	0700      	lsls	r0, r0, #28
   105f2:	d408      	bmi.n	10606 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   105f4:	f8d4 0005 	ldr.w	r0, [r4, #5]
   105f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   105fc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10600:	d201      	bcs.n	10606 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10602:	2011      	movs	r0, #17
   10604:	bd10      	pop	{r4, pc}
   10606:	2000      	movs	r0, #0
   10608:	bd10      	pop	{r4, pc}
   1060a:	b538      	push	{r3, r4, r5, lr}
   1060c:	4604      	mov	r4, r0
   1060e:	7800      	ldrb	r0, [r0, #0]
   10610:	28ef      	cmp	r0, #239	; 0xef
   10612:	d843      	bhi.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10614:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10618:	f8ad 0000 	strh.w	r0, [sp]
   1061c:	9800      	ldr	r0, [sp, #0]
   1061e:	f000 f9e3 	bl	109e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x514>
   10622:	b3a0      	cbz	r0, 1068e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   10624:	7861      	ldrb	r1, [r4, #1]
   10626:	0708      	lsls	r0, r1, #28
   10628:	d40b      	bmi.n	10642 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   1062a:	f8d4 0002 	ldr.w	r0, [r4, #2]
   1062e:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10632:	0a02      	lsrs	r2, r0, #8
   10634:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10638:	d830      	bhi.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1063a:	2220      	movs	r2, #32
   1063c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10640:	d82c      	bhi.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10642:	7a60      	ldrb	r0, [r4, #9]
   10644:	b318      	cbz	r0, 1068e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   10646:	2807      	cmp	r0, #7
   10648:	d828      	bhi.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1064a:	7aa0      	ldrb	r0, [r4, #10]
   1064c:	b128      	cbz	r0, 1065a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   1064e:	2801      	cmp	r0, #1
   10650:	d003      	beq.n	1065a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10652:	2802      	cmp	r0, #2
   10654:	d001      	beq.n	1065a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10656:	2803      	cmp	r0, #3
   10658:	d120      	bne.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1065a:	074a      	lsls	r2, r1, #29
   1065c:	d403      	bmi.n	10666 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   1065e:	2802      	cmp	r0, #2
   10660:	d001      	beq.n	10666 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10662:	2803      	cmp	r0, #3
   10664:	d105      	bne.n	10672 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   10666:	7ae0      	ldrb	r0, [r4, #11]
   10668:	b108      	cbz	r0, 1066e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1066a:	2801      	cmp	r0, #1
   1066c:	d116      	bne.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1066e:	0748      	lsls	r0, r1, #29
   10670:	d407      	bmi.n	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10672:	7ca0      	ldrb	r0, [r4, #18]
   10674:	b128      	cbz	r0, 10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10676:	2801      	cmp	r0, #1
   10678:	d003      	beq.n	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1067a:	2802      	cmp	r0, #2
   1067c:	d001      	beq.n	10682 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1067e:	2803      	cmp	r0, #3
   10680:	d10c      	bne.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10682:	06c8      	lsls	r0, r1, #27
   10684:	7d20      	ldrb	r0, [r4, #20]
   10686:	d503      	bpl.n	10690 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   10688:	2801      	cmp	r0, #1
   1068a:	d107      	bne.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1068c:	e002      	b.n	10694 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   1068e:	e005      	b.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10690:	2802      	cmp	r0, #2
   10692:	d003      	beq.n	1069c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10694:	7e20      	ldrb	r0, [r4, #24]
   10696:	b118      	cbz	r0, 106a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   10698:	2801      	cmp	r0, #1
   1069a:	d001      	beq.n	106a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1069c:	2012      	movs	r0, #18
   1069e:	bd38      	pop	{r3, r4, r5, pc}
   106a0:	2000      	movs	r0, #0
   106a2:	bd38      	pop	{r3, r4, r5, pc}
   106a4:	b510      	push	{r4, lr}
   106a6:	0004      	movs	r4, r0
   106a8:	d005      	beq.n	106b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   106aa:	f7fa fead 	bl	b408 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106ae:	4384      	bics	r4, r0
   106b0:	d001      	beq.n	106b6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   106b2:	2000      	movs	r0, #0
   106b4:	bd10      	pop	{r4, pc}
   106b6:	2001      	movs	r0, #1
   106b8:	bd10      	pop	{r4, pc}
   106ba:	28fb      	cmp	r0, #251	; 0xfb
   106bc:	d803      	bhi.n	106c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   106be:	f640 0048 	movw	r0, #2120	; 0x848
   106c2:	4281      	cmp	r1, r0
   106c4:	d901      	bls.n	106ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   106c6:	2011      	movs	r0, #17
   106c8:	4770      	bx	lr
   106ca:	2000      	movs	r0, #0
   106cc:	4770      	bx	lr
   106ce:	381b      	subs	r0, #27
   106d0:	28e1      	cmp	r0, #225	; 0xe1
   106d2:	d206      	bcs.n	106e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   106d4:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   106d8:	d303      	bcc.n	106e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   106da:	f244 2090 	movw	r0, #17040	; 0x4290
   106de:	4281      	cmp	r1, r0
   106e0:	d901      	bls.n	106e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   106e2:	2012      	movs	r0, #18
   106e4:	4770      	bx	lr
   106e6:	2000      	movs	r0, #0
   106e8:	4770      	bx	lr
   106ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106ee:	4606      	mov	r6, r0
   106f0:	f8b0 7056 	ldrh.w	r7, [r0, #86]	; 0x56
   106f4:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
   106f8:	4615      	mov	r5, r2
   106fa:	3030      	adds	r0, #48	; 0x30
   106fc:	f7f7 fe44 	bl	8388 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10700:	4680      	mov	r8, r0
   10702:	2102      	movs	r1, #2
   10704:	f7fd fe6b 	bl	e3de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10708:	4287      	cmp	r7, r0
   1070a:	d200      	bcs.n	1070e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   1070c:	4638      	mov	r0, r7
   1070e:	4607      	mov	r7, r0
   10710:	2102      	movs	r1, #2
   10712:	4640      	mov	r0, r8
   10714:	f7fd fe63 	bl	e3de <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10718:	4284      	cmp	r4, r0
   1071a:	d200      	bcs.n	1071e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   1071c:	4620      	mov	r0, r4
   1071e:	8831      	ldrh	r1, [r6, #0]
   10720:	8029      	strh	r1, [r5, #0]
   10722:	2f1b      	cmp	r7, #27
   10724:	d913      	bls.n	1074e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   10726:	2ffb      	cmp	r7, #251	; 0xfb
   10728:	d300      	bcc.n	1072c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   1072a:	27fb      	movs	r7, #251	; 0xfb
   1072c:	806f      	strh	r7, [r5, #2]
   1072e:	281b      	cmp	r0, #27
   10730:	d90f      	bls.n	10752 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   10732:	28fb      	cmp	r0, #251	; 0xfb
   10734:	d300      	bcc.n	10738 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   10736:	20fb      	movs	r0, #251	; 0xfb
   10738:	80e8      	strh	r0, [r5, #6]
   1073a:	4640      	mov	r0, r8
   1073c:	f7ff fed2 	bl	104e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   10740:	80a8      	strh	r0, [r5, #4]
   10742:	4640      	mov	r0, r8
   10744:	f7ff fece 	bl	104e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   10748:	8128      	strh	r0, [r5, #8]
   1074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1074e:	271b      	movs	r7, #27
   10750:	e7ec      	b.n	1072c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10752:	201b      	movs	r0, #27
   10754:	e7f0      	b.n	10738 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   10756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1075a:	7890      	ldrb	r0, [r2, #2]
   1075c:	9e06      	ldr	r6, [sp, #24]
   1075e:	461d      	mov	r5, r3
   10760:	4614      	mov	r4, r2
   10762:	b908      	cbnz	r0, 10768 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   10764:	f7fa fe50 	bl	b408 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10768:	78e4      	ldrb	r4, [r4, #3]
   1076a:	4607      	mov	r7, r0
   1076c:	b914      	cbnz	r4, 10774 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   1076e:	f7fa fe4b 	bl	b408 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10772:	4604      	mov	r4, r0
   10774:	b16f      	cbz	r7, 10792 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10776:	b164      	cbz	r4, 10792 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10778:	4638      	mov	r0, r7
   1077a:	f7ff febd 	bl	104f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1077e:	4620      	mov	r0, r4
   10780:	f7ff feba 	bl	104f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10784:	b12f      	cbz	r7, 10792 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10786:	b124      	cbz	r4, 10792 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10788:	702f      	strb	r7, [r5, #0]
   1078a:	7034      	strb	r4, [r6, #0]
   1078c:	2000      	movs	r0, #0
   1078e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10792:	2009      	movs	r0, #9
   10794:	e7fb      	b.n	1078e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   10796:	b510      	push	{r4, lr}
   10798:	f7fc fa87 	bl	ccaa <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1079c:	b928      	cbnz	r0, 107aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   1079e:	f7fc faba 	bl	cd16 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   107a2:	b910      	cbnz	r0, 107aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   107a4:	f7fc fac1 	bl	cd2a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   107a8:	b108      	cbz	r0, 107ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   107aa:	2008      	movs	r0, #8
   107ac:	bd10      	pop	{r4, pc}
   107ae:	f7fc fa51 	bl	cc54 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   107b2:	b940      	cbnz	r0, 107c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   107b4:	f7fc fa58 	bl	cc68 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   107b8:	b928      	cbnz	r0, 107c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   107ba:	f7fc fa6c 	bl	cc96 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   107be:	b910      	cbnz	r0, 107c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   107c0:	f7fc fa7d 	bl	ccbe <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   107c4:	b108      	cbz	r0, 107ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   107c6:	2004      	movs	r0, #4
   107c8:	bd10      	pop	{r4, pc}
   107ca:	f240 51d6 	movw	r1, #1494	; 0x5d6
   107ce:	2039      	movs	r0, #57	; 0x39
   107d0:	f7f4 fb00 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107d4:	b510      	push	{r4, lr}
   107d6:	f7fa fe11 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   107da:	0940      	lsrs	r0, r0, #5
   107dc:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
   107e0:	f000 0001 	and.w	r0, r0, #1
   107e4:	bd10      	pop	{r4, pc}
   107e6:	6840      	ldr	r0, [r0, #4]
   107e8:	f000 b800 	b.w	107ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
   107ec:	b508      	push	{r3, lr}
   107ee:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
   107f2:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   107f6:	f88d 0000 	strb.w	r0, [sp]
   107fa:	9800      	ldr	r0, [sp, #0]
   107fc:	9000      	str	r0, [sp, #0]
   107fe:	f89d 0000 	ldrb.w	r0, [sp]
   10802:	b100      	cbz	r0, 10806 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x332>
   10804:	2001      	movs	r0, #1
   10806:	1e40      	subs	r0, r0, #1
   10808:	4208      	tst	r0, r1
   1080a:	d003      	beq.n	10814 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   1080c:	2904      	cmp	r1, #4
   1080e:	d001      	beq.n	10814 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x340>
   10810:	2001      	movs	r0, #1
   10812:	bd08      	pop	{r3, pc}
   10814:	2000      	movs	r0, #0
   10816:	bd08      	pop	{r3, pc}
   10818:	b510      	push	{r4, lr}
   1081a:	f7fa fdef 	bl	b3fc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1081e:	0a00      	lsrs	r0, r0, #8
   10820:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   10824:	f000 0001 	and.w	r0, r0, #1
   10828:	bd10      	pop	{r4, pc}
   1082a:	b510      	push	{r4, lr}
   1082c:	2101      	movs	r1, #1
   1082e:	2000      	movs	r0, #0
   10830:	f7fd fabc 	bl	ddac <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10834:	0004      	movs	r4, r0
   10836:	d108      	bne.n	1084a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
   10838:	2200      	movs	r2, #0
   1083a:	2101      	movs	r1, #1
   1083c:	4610      	mov	r0, r2
   1083e:	f7fd faab 	bl	dd98 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   10842:	0004      	movs	r4, r0
   10844:	d003      	beq.n	1084e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37a>
   10846:	f7fe fafb 	bl	ee40 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   1084a:	4620      	mov	r0, r4
   1084c:	bd10      	pop	{r4, pc}
   1084e:	f44f 7110 	mov.w	r1, #576	; 0x240
   10852:	2039      	movs	r0, #57	; 0x39
   10854:	f7f4 fabe 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10858:	b510      	push	{r4, lr}
   1085a:	f7ff fe62 	bl	10522 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1085e:	2800      	cmp	r0, #0
   10860:	d000      	beq.n	10864 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x390>
   10862:	2001      	movs	r0, #1
   10864:	bd10      	pop	{r4, pc}
   10866:	b570      	push	{r4, r5, r6, lr}
   10868:	4605      	mov	r5, r0
   1086a:	f7fe fb55 	bl	ef18 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1086e:	b170      	cbz	r0, 1088e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ba>
   10870:	4628      	mov	r0, r5
   10872:	f7fe fd25 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10876:	2800      	cmp	r0, #0
   10878:	d008      	beq.n	1088c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
   1087a:	4628      	mov	r0, r5
   1087c:	f7fe fd1d 	bl	f2ba <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10880:	4604      	mov	r4, r0
   10882:	4628      	mov	r0, r5
   10884:	f7fe fcf3 	bl	f26e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   10888:	b118      	cbz	r0, 10892 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1088a:	200c      	movs	r0, #12
   1088c:	bd70      	pop	{r4, r5, r6, pc}
   1088e:	2042      	movs	r0, #66	; 0x42
   10890:	bd70      	pop	{r4, r5, r6, pc}
   10892:	b164      	cbz	r4, 108ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   10894:	8820      	ldrh	r0, [r4, #0]
   10896:	f7fd fc44 	bl	e122 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1089a:	8820      	ldrh	r0, [r4, #0]
   1089c:	2100      	movs	r1, #0
   1089e:	f7f4 fd21 	bl	52e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   108a2:	b120      	cbz	r0, 108ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   108a4:	f241 5129 	movw	r1, #5417	; 0x1529
   108a8:	2039      	movs	r0, #57	; 0x39
   108aa:	f7f4 fa93 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108ae:	2000      	movs	r0, #0
   108b0:	bd70      	pop	{r4, r5, r6, pc}
   108b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108b6:	b088      	sub	sp, #32
   108b8:	4604      	mov	r4, r0
   108ba:	8800      	ldrh	r0, [r0, #0]
   108bc:	a906      	add	r1, sp, #24
   108be:	f7fd fcfe 	bl	e2be <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   108c2:	2800      	cmp	r0, #0
   108c4:	d147      	bne.n	10956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   108c6:	9807      	ldr	r0, [sp, #28]
   108c8:	2700      	movs	r7, #0
   108ca:	f890 11f8 	ldrb.w	r1, [r0, #504]	; 0x1f8
   108ce:	f88d 1008 	strb.w	r1, [sp, #8]
   108d2:	9902      	ldr	r1, [sp, #8]
   108d4:	9102      	str	r1, [sp, #8]
   108d6:	f89d 1008 	ldrb.w	r1, [sp, #8]
   108da:	3078      	adds	r0, #120	; 0x78
   108dc:	b101      	cbz	r1, 108e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40c>
   108de:	2101      	movs	r1, #1
   108e0:	f88d 100c 	strb.w	r1, [sp, #12]
   108e4:	7bc1      	ldrb	r1, [r0, #15]
   108e6:	0689      	lsls	r1, r1, #26
   108e8:	d502      	bpl.n	108f0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
   108ea:	f89d 100c 	ldrb.w	r1, [sp, #12]
   108ee:	b141      	cbz	r1, 10902 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42e>
   108f0:	2100      	movs	r1, #0
   108f2:	f88d 1004 	strb.w	r1, [sp, #4]
   108f6:	2105      	movs	r1, #5
   108f8:	304c      	adds	r0, #76	; 0x4c
   108fa:	f7ff f877 	bl	f9ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   108fe:	b110      	cbz	r0, 10906 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   10900:	e004      	b.n	1090c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x438>
   10902:	2101      	movs	r1, #1
   10904:	e7f5      	b.n	108f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41e>
   10906:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1090a:	b318      	cbz	r0, 10954 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x480>
   1090c:	8921      	ldrh	r1, [r4, #8]
   1090e:	88e0      	ldrh	r0, [r4, #6]
   10910:	f7ff fedd 	bl	106ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   10914:	2800      	cmp	r0, #0
   10916:	d11e      	bne.n	10956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10918:	88a1      	ldrh	r1, [r4, #4]
   1091a:	8860      	ldrh	r0, [r4, #2]
   1091c:	f7ff fed7 	bl	106ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
   10920:	2800      	cmp	r0, #0
   10922:	d118      	bne.n	10956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10924:	8921      	ldrh	r1, [r4, #8]
   10926:	88e0      	ldrh	r0, [r4, #6]
   10928:	f7ff fec7 	bl	106ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   1092c:	2800      	cmp	r0, #0
   1092e:	d112      	bne.n	10956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   10930:	88a1      	ldrh	r1, [r4, #4]
   10932:	8860      	ldrh	r0, [r4, #2]
   10934:	f7ff fec1 	bl	106ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
   10938:	0006      	movs	r6, r0
   1093a:	d10c      	bne.n	10956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   1093c:	9807      	ldr	r0, [sp, #28]
   1093e:	f500 75da 	add.w	r5, r0, #436	; 0x1b4
   10942:	f04f 08ff 	mov.w	r8, #255	; 0xff
   10946:	f885 8001 	strb.w	r8, [r5, #1]
   1094a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1094e:	b129      	cbz	r1, 1095c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x488>
   10950:	263a      	movs	r6, #58	; 0x3a
   10952:	e02f      	b.n	109b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e0>
   10954:	201a      	movs	r0, #26
   10956:	b008      	add	sp, #32
   10958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1095c:	4639      	mov	r1, r7
   1095e:	aa03      	add	r2, sp, #12
   10960:	f7ff fec3 	bl	106ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
   10964:	8861      	ldrh	r1, [r4, #2]
   10966:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1096a:	4281      	cmp	r1, r0
   1096c:	d200      	bcs.n	10970 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x49c>
   1096e:	4608      	mov	r0, r1
   10970:	80e8      	strh	r0, [r5, #6]
   10972:	88a1      	ldrh	r1, [r4, #4]
   10974:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   10978:	4281      	cmp	r1, r0
   1097a:	d200      	bcs.n	1097e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4aa>
   1097c:	4608      	mov	r0, r1
   1097e:	8128      	strh	r0, [r5, #8]
   10980:	88e2      	ldrh	r2, [r4, #6]
   10982:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   10986:	428a      	cmp	r2, r1
   10988:	d200      	bcs.n	1098c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4b8>
   1098a:	4611      	mov	r1, r2
   1098c:	8069      	strh	r1, [r5, #2]
   1098e:	8922      	ldrh	r2, [r4, #8]
   10990:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   10994:	428a      	cmp	r2, r1
   10996:	d200      	bcs.n	1099a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c6>
   10998:	4611      	mov	r1, r2
   1099a:	f640 0248 	movw	r2, #2120	; 0x848
   1099e:	80a9      	strh	r1, [r5, #4]
   109a0:	4291      	cmp	r1, r2
   109a2:	d300      	bcc.n	109a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4d2>
   109a4:	4611      	mov	r1, r2
   109a6:	80a9      	strh	r1, [r5, #4]
   109a8:	4290      	cmp	r0, r2
   109aa:	d200      	bcs.n	109ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4da>
   109ac:	4602      	mov	r2, r0
   109ae:	812a      	strh	r2, [r5, #8]
   109b0:	f885 8000 	strb.w	r8, [r5]
   109b4:	706f      	strb	r7, [r5, #1]
   109b6:	4630      	mov	r0, r6
   109b8:	e7cd      	b.n	10956 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x482>
   109ba:	b530      	push	{r4, r5, lr}
   109bc:	f340 0400 	sbfx	r4, r0, #0, #1
   109c0:	f340 0040 	sbfx	r0, r0, #1, #1
   109c4:	1c40      	adds	r0, r0, #1
   109c6:	9d03      	ldr	r5, [sp, #12]
   109c8:	1c64      	adds	r4, r4, #1
   109ca:	d000      	beq.n	109ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fa>
   109cc:	b119      	cbz	r1, 109d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   109ce:	b100      	cbz	r0, 109d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4fe>
   109d0:	b10a      	cbz	r2, 109d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x502>
   109d2:	b91c      	cbnz	r4, 109dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x508>
   109d4:	e001      	b.n	109da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x506>
   109d6:	2011      	movs	r0, #17
   109d8:	bd30      	pop	{r4, r5, pc}
   109da:	2100      	movs	r1, #0
   109dc:	7019      	strb	r1, [r3, #0]
   109de:	b900      	cbnz	r0, 109e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x50e>
   109e0:	2200      	movs	r2, #0
   109e2:	702a      	strb	r2, [r5, #0]
   109e4:	2000      	movs	r0, #0
   109e6:	bd30      	pop	{r4, r5, pc}
   109e8:	b2c0      	uxtb	r0, r0
   109ea:	06c1      	lsls	r1, r0, #27
   109ec:	d40c      	bmi.n	10a08 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x534>
   109ee:	0681      	lsls	r1, r0, #26
   109f0:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   109f4:	d503      	bpl.n	109fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52a>
   109f6:	b9d1      	cbnz	r1, 10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109f8:	0781      	lsls	r1, r0, #30
   109fa:	d418      	bmi.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   109fc:	e001      	b.n	10a02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x52e>
   109fe:	2900      	cmp	r1, #0
   10a00:	d1fa      	bne.n	109f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x524>
   10a02:	0700      	lsls	r0, r0, #28
   10a04:	d413      	bmi.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10a06:	e010      	b.n	10a2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   10a08:	0641      	lsls	r1, r0, #25
   10a0a:	d410      	bmi.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10a0c:	0681      	lsls	r1, r0, #26
   10a0e:	d40e      	bmi.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10a10:	07c1      	lsls	r1, r0, #31
   10a12:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10a16:	d004      	beq.n	10a22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   10a18:	2900      	cmp	r1, #0
   10a1a:	db02      	blt.n	10a22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x54e>
   10a1c:	0740      	lsls	r0, r0, #29
   10a1e:	d404      	bmi.n	10a2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x556>
   10a20:	e005      	b.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10a22:	0701      	lsls	r1, r0, #28
   10a24:	d403      	bmi.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10a26:	0740      	lsls	r0, r0, #29
   10a28:	d401      	bmi.n	10a2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x55a>
   10a2a:	2001      	movs	r0, #1
   10a2c:	4770      	bx	lr
   10a2e:	2000      	movs	r0, #0
   10a30:	4770      	bx	lr
   10a32:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10a34:	4669      	mov	r1, sp
   10a36:	2001      	movs	r0, #1
   10a38:	f7fd f9c2 	bl	ddc0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   10a3c:	b178      	cbz	r0, 10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10a3e:	f240 1171 	movw	r1, #369	; 0x171
   10a42:	2039      	movs	r0, #57	; 0x39
   10a44:	f7f4 f9c6 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a48:	9c02      	ldr	r4, [sp, #8]
   10a4a:	4620      	mov	r0, r4
   10a4c:	f7fe fc38 	bl	f2c0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10a50:	b128      	cbz	r0, 10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10a52:	4620      	mov	r0, r4
   10a54:	f7fe fa99 	bl	ef8a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   10a58:	b108      	cbz	r0, 10a5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x58a>
   10a5a:	2001      	movs	r0, #1
   10a5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10a5e:	4668      	mov	r0, sp
   10a60:	f7f4 fbf0 	bl	5244 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10a64:	2800      	cmp	r0, #0
   10a66:	d0ef      	beq.n	10a48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x574>
   10a68:	2000      	movs	r0, #0
   10a6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10a6c:	b510      	push	{r4, lr}
   10a6e:	f7fe fc2a 	bl	f2c6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10a72:	b108      	cbz	r0, 10a78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5a4>
   10a74:	21e7      	movs	r1, #231	; 0xe7
   10a76:	e003      	b.n	10a80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ac>
   10a78:	f7f6 fe14 	bl	76a4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10a7c:	b118      	cbz	r0, 10a86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5b2>
   10a7e:	21ec      	movs	r1, #236	; 0xec
   10a80:	2001      	movs	r0, #1
   10a82:	f7f4 f9a7 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a8a:	2001      	movs	r0, #1
   10a8c:	f7f4 bb70 	b.w	5170 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10a90:	6802      	ldr	r2, [r0, #0]
   10a92:	b912      	cbnz	r2, 10a9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c6>
   10a94:	6001      	str	r1, [r0, #0]
   10a96:	4770      	bx	lr
   10a98:	4602      	mov	r2, r0
   10a9a:	6850      	ldr	r0, [r2, #4]
   10a9c:	b108      	cbz	r0, 10aa2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5ce>
   10a9e:	428a      	cmp	r2, r1
   10aa0:	d1fa      	bne.n	10a98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c4>
   10aa2:	428a      	cmp	r2, r1
   10aa4:	d0f7      	beq.n	10a96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5c2>
   10aa6:	6051      	str	r1, [r2, #4]
   10aa8:	4770      	bx	lr
   10aaa:	b510      	push	{r4, lr}
   10aac:	4604      	mov	r4, r0
   10aae:	e002      	b.n	10ab6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5e2>
   10ab0:	6820      	ldr	r0, [r4, #0]
   10ab2:	4780      	blx	r0
   10ab4:	6864      	ldr	r4, [r4, #4]
   10ab6:	2c00      	cmp	r4, #0
   10ab8:	d1fa      	bne.n	10ab0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x5dc>
   10aba:	bd10      	pop	{r4, pc}
   10abc:	b510      	push	{r4, lr}
   10abe:	2000      	movs	r0, #0
   10ac0:	f7f4 fb56 	bl	5170 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10ac4:	f7f4 fd8c 	bl	55e0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10ac8:	f7f5 f80c 	bl	5ae4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10acc:	f7f5 f9f8 	bl	5ec0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10ad0:	2800      	cmp	r0, #0
   10ad2:	d003      	beq.n	10adc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x608>
   10ad4:	21c6      	movs	r1, #198	; 0xc6
   10ad6:	2001      	movs	r0, #1
   10ad8:	f7f4 f97c 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10adc:	bd10      	pop	{r4, pc}
   10ade:	b510      	push	{r4, lr}
   10ae0:	f7ff ffc4 	bl	10a6c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x598>
   10ae4:	f7fe ff42 	bl	f96c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10ae8:	2800      	cmp	r0, #0
   10aea:	d004      	beq.n	10af6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x622>
   10aec:	f240 1103 	movw	r1, #259	; 0x103
   10af0:	2001      	movs	r0, #1
   10af2:	f7f4 f96f 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10af6:	bd10      	pop	{r4, pc}

00010af8 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10af8:	f7f3 bdc0 	b.w	467c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10afc:	000b0001 	.word	0x000b0001
   10b00:	000a0002 	.word	0x000a0002
   10b04:	00090005 	.word	0x00090005
   10b08:	0008000a 	.word	0x0008000a
   10b0c:	00070014 	.word	0x00070014
   10b10:	0006001e 	.word	0x0006001e
   10b14:	00050032 	.word	0x00050032
   10b18:	0004004b 	.word	0x0004004b
   10b1c:	00030064 	.word	0x00030064
   10b20:	00020096 	.word	0x00020096
   10b24:	000100fa 	.word	0x000100fa
   10b28:	000001f4 	.word	0x000001f4

00010b2c <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10b2c:	b510      	push	{r4, lr}
   10b2e:	f7fb f81b 	bl	bb68 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10b32:	f000 f81d 	bl	10b70 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10b36:	f7fa fcdb 	bl	b4f0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b3e:	f7fa bdd5 	b.w	b6ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010b42 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10b42:	b510      	push	{r4, lr}
   10b44:	24c8      	movs	r4, #200	; 0xc8
   10b46:	1e64      	subs	r4, r4, #1
   10b48:	b2e4      	uxtb	r4, r4
   10b4a:	f7fa fcef 	bl	b52c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10b4e:	2802      	cmp	r0, #2
   10b50:	d003      	beq.n	10b5a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10b52:	2801      	cmp	r0, #1
   10b54:	d000      	beq.n	10b58 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10b56:	2000      	movs	r0, #0
   10b58:	bd10      	pop	{r4, pc}
   10b5a:	2c00      	cmp	r4, #0
   10b5c:	d1f3      	bne.n	10b46 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10b5e:	219e      	movs	r1, #158	; 0x9e
   10b60:	203b      	movs	r0, #59	; 0x3b
   10b62:	f7f4 f937 	bl	4dd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b66:	5840      	ldr	r0, [r0, r1]
   10b68:	2800      	cmp	r0, #0
   10b6a:	d000      	beq.n	10b6e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10b6c:	2001      	movs	r0, #1
   10b6e:	4770      	bx	lr

00010b70 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10b70:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10b74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10b78:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10b7c:	f3bf 8f4f 	dsb	sy
   10b80:	f3bf 8f6f 	isb	sy
   10b84:	f7fa be4c 	b.w	b820 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10b88:	2800      	cmp	r0, #0
   10b8a:	db09      	blt.n	10ba0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10b8c:	f000 021f 	and.w	r2, r0, #31
   10b90:	2101      	movs	r1, #1
   10b92:	4091      	lsls	r1, r2
   10b94:	0940      	lsrs	r0, r0, #5
   10b96:	0080      	lsls	r0, r0, #2
   10b98:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b9c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ba0:	4770      	bx	lr
   10ba2:	2800      	cmp	r0, #0
   10ba4:	db0d      	blt.n	10bc2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10ba6:	f000 021f 	and.w	r2, r0, #31
   10baa:	2101      	movs	r1, #1
   10bac:	4091      	lsls	r1, r2
   10bae:	0940      	lsrs	r0, r0, #5
   10bb0:	0080      	lsls	r0, r0, #2
   10bb2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10bb6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10bba:	f3bf 8f4f 	dsb	sy
   10bbe:	f3bf 8f6f 	isb	sy
   10bc2:	4770      	bx	lr
   10bc4:	5840      	ldr	r0, [r0, r1]
   10bc6:	2800      	cmp	r0, #0
   10bc8:	d000      	beq.n	10bcc <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10bca:	2001      	movs	r0, #1
   10bcc:	4770      	bx	lr
   10bce:	5840      	ldr	r0, [r0, r1]
   10bd0:	2800      	cmp	r0, #0
   10bd2:	d000      	beq.n	10bd6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10bd4:	2001      	movs	r0, #1
   10bd6:	4770      	bx	lr

00010bd8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10bd8:	b510      	push	{r4, lr}
   10bda:	4604      	mov	r4, r0
   10bdc:	4608      	mov	r0, r1
   10bde:	f7fb f8fb 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10be2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10be6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10bea:	fbb0 f0f1 	udiv	r0, r0, r1
   10bee:	1a20      	subs	r0, r4, r0
   10bf0:	1e80      	subs	r0, r0, #2
   10bf2:	bd10      	pop	{r4, pc}

00010bf4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10bf4:	b510      	push	{r4, lr}
   10bf6:	4604      	mov	r4, r0
   10bf8:	4608      	mov	r0, r1
   10bfa:	f7fb f8ed 	bl	bdd8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10bfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10c02:	fbb0 f0f1 	udiv	r0, r0, r1
   10c06:	1a20      	subs	r0, r4, r0
   10c08:	bd10      	pop	{r4, pc}
   10c0a:	080c      	.short	0x080c
   10c0c:	010d1702 	.word	0x010d1702
   10c10:	09090201 	.word	0x09090201
   10c14:	02060101 	.word	0x02060101
   10c18:	03181809 	.word	0x03181809
   10c1c:	09090101 	.word	0x09090101
   10c20:	22050303 	.word	0x22050303
   10c24:	00000000 	.word	0x00000000

00010c28 <sendDataIMU>:
static struct device *ICM;

static const struct gpio_dt_spec imuInt = GPIO_DT_SPEC_GET_OR(IMU_INT, gpios,{0});
static struct gpio_callback imuInt_cb_data;

static void sendDataIMU(){
   10c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
}

static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
    uint8_t ret;
    ret = i2c_write(ICM, &subAddress, 1, address);
   10c2c:	4c40      	ldr	r4, [pc, #256]	; (10d30 <sendDataIMU+0x108>)
static void sendDataIMU(){
   10c2e:	b088      	sub	sp, #32
static uint8_t readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
   10c30:	231d      	movs	r3, #29
    ret = i2c_write(ICM, &subAddress, 1, address);
   10c32:	6820      	ldr	r0, [r4, #0]
   10c34:	f88d 3003 	strb.w	r3, [sp, #3]
   10c38:	2201      	movs	r2, #1
   10c3a:	2368      	movs	r3, #104	; 0x68
   10c3c:	f10d 0103 	add.w	r1, sp, #3
   10c40:	f00e fa66 	bl	1f110 <i2c_write.isra.0>
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
   10c44:	230e      	movs	r3, #14
    ret = i2c_read(ICM, dest, count, address);
   10c46:	6820      	ldr	r0, [r4, #0]
   10c48:	9302      	str	r3, [sp, #8]
	msg.buf = buf;
   10c4a:	ac04      	add	r4, sp, #16
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10c4c:	2303      	movs	r3, #3
	msg.buf = buf;
   10c4e:	9401      	str	r4, [sp, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10c50:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10c54:	6883      	ldr	r3, [r0, #8]
   10c56:	4f37      	ldr	r7, [pc, #220]	; (10d34 <sendDataIMU+0x10c>)
   10c58:	689d      	ldr	r5, [r3, #8]
   10c5a:	4e37      	ldr	r6, [pc, #220]	; (10d38 <sendDataIMU+0x110>)
   10c5c:	2368      	movs	r3, #104	; 0x68
   10c5e:	2201      	movs	r2, #1
   10c60:	a901      	add	r1, sp, #4
   10c62:	47a8      	blx	r5
static uint8_t readData()
{
    uint8_t rawData[14];  // x/y/z accel register data stored here
    uint8_t error=0;
    error = readBytes(ICM42605_ADDRESS, ICM42605_TEMP_DATA1, 14, &rawData[0]);  // Read the 14 raw data registers into data array
    if(error){
   10c64:	b2c0      	uxtb	r0, r0
   10c66:	4d35      	ldr	r5, [pc, #212]	; (10d3c <sendDataIMU+0x114>)
   10c68:	bb08      	cbnz	r0, 10cae <sendDataIMU+0x86>
    //Gyr y
    destination[5] = ((int16_t)rawData[10] << 8) | rawData[11] ;
    //Gyr z
    destination[6] = ((int16_t)rawData[12] << 8) | rawData[13] ;
    t= destination[0];
    ax = destination[1] *_aRes;
   10c6a:	4b35      	ldr	r3, [pc, #212]	; (10d40 <sendDataIMU+0x118>)
   10c6c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   10c70:	f8d3 8000 	ldr.w	r8, [r3]
   10c74:	f8bd a014 	ldrh.w	sl, [sp, #20]
   10c78:	f8bd 9016 	ldrh.w	r9, [sp, #22]
   10c7c:	bac0      	revsh	r0, r0
   10c7e:	f7f0 f853 	bl	d28 <__aeabi_i2f>
   10c82:	4641      	mov	r1, r8
   10c84:	f7ef fa3c 	bl	100 <__aeabi_fmul>
   10c88:	fa9a faba 	revsh.w	sl, sl
   10c8c:	6038      	str	r0, [r7, #0]
    ay = destination[2] *_aRes;
   10c8e:	4650      	mov	r0, sl
   10c90:	f7f0 f84a 	bl	d28 <__aeabi_i2f>
   10c94:	4641      	mov	r1, r8
   10c96:	f7ef fa33 	bl	100 <__aeabi_fmul>
   10c9a:	fa99 f9b9 	revsh.w	r9, r9
   10c9e:	6030      	str	r0, [r6, #0]
    az = destination[3] *_aRes;
   10ca0:	4648      	mov	r0, r9
   10ca2:	f7f0 f841 	bl	d28 <__aeabi_i2f>
   10ca6:	4641      	mov	r1, r8
   10ca8:	f7ef fa2a 	bl	100 <__aeabi_fmul>
   10cac:	6028      	str	r0, [r5, #0]
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10cae:	f012 fbbe 	bl	2342e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   10cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10cb6:	fba0 0302 	umull	r0, r3, r0, r2
   10cba:	fb02 3101 	mla	r1, r2, r1, r3
   10cbe:	0bc0      	lsrs	r0, r0, #15
  float timestamp = k_uptime_get() /1000.0;
   10cc0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   10cc4:	0bc9      	lsrs	r1, r1, #15
   10cc6:	f7ef fc5d 	bl	584 <__aeabi_l2d>
   10cca:	2200      	movs	r2, #0
   10ccc:	4b1d      	ldr	r3, [pc, #116]	; (10d44 <sendDataIMU+0x11c>)
   10cce:	f7ef fdb1 	bl	834 <__aeabi_ddiv>
   10cd2:	f7ef ff1f 	bl	b14 <__aeabi_d2f>
  imuData.timestamp = timestamp;
   10cd6:	4b1c      	ldr	r3, [pc, #112]	; (10d48 <sendDataIMU+0x120>)
  float myArray[4] = {ax,ay,az,timestamp};
   10cd8:	9007      	str	r0, [sp, #28]
  imuData.timestamp = timestamp;
   10cda:	6198      	str	r0, [r3, #24]
  float myArray[4] = {ax,ay,az,timestamp};
   10cdc:	683b      	ldr	r3, [r7, #0]
   10cde:	9304      	str	r3, [sp, #16]
   10ce0:	6833      	ldr	r3, [r6, #0]
   10ce2:	9305      	str	r3, [sp, #20]
   10ce4:	682b      	ldr	r3, [r5, #0]
   10ce6:	9306      	str	r3, [sp, #24]
  float timestamp = k_uptime_get() /1000.0;
   10ce8:	4680      	mov	r8, r0
  if(timestamp > oldTime +0.01){
   10cea:	f7ef fc21 	bl	530 <__aeabi_f2d>
   10cee:	4d17      	ldr	r5, [pc, #92]	; (10d4c <sendDataIMU+0x124>)
   10cf0:	4606      	mov	r6, r0
   10cf2:	6828      	ldr	r0, [r5, #0]
   10cf4:	460f      	mov	r7, r1
   10cf6:	f7ef fc1b 	bl	530 <__aeabi_f2d>
   10cfa:	a30b      	add	r3, pc, #44	; (adr r3, 10d28 <sendDataIMU+0x100>)
   10cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d00:	f7ef fab8 	bl	274 <__adddf3>
   10d04:	4602      	mov	r2, r0
   10d06:	460b      	mov	r3, r1
   10d08:	4630      	mov	r0, r6
   10d0a:	4639      	mov	r1, r7
   10d0c:	f7ef fef8 	bl	b00 <__aeabi_dcmpgt>
   10d10:	b130      	cbz	r0, 10d20 <sendDataIMU+0xf8>
    sendData(SENSOR_IMU_ACC_ID, &myArray, 4*4);
   10d12:	2210      	movs	r2, #16
   10d14:	4621      	mov	r1, r4
   10d16:	2002      	movs	r0, #2
   10d18:	f000 fb8c 	bl	11434 <sendData>
    oldTime=timestamp;
   10d1c:	f8c5 8000 	str.w	r8, [r5]
}
   10d20:	b008      	add	sp, #32
   10d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d26:	bf00      	nop
   10d28:	47ae147b 	.word	0x47ae147b
   10d2c:	3f847ae1 	.word	0x3f847ae1
   10d30:	20001e20 	.word	0x20001e20
   10d34:	20001e2c 	.word	0x20001e2c
   10d38:	20001e30 	.word	0x20001e30
   10d3c:	20001e34 	.word	0x20001e34
   10d40:	20001e24 	.word	0x20001e24
   10d44:	408f4000 	.word	0x408f4000
   10d48:	20001e88 	.word	0x20001e88
   10d4c:	20001e44 	.word	0x20001e44

00010d50 <ds18b20_send>:


/**@brief Function for sending one bit to bus.
 */
void ds18b20_send(char bit)
{
   10d50:	b538      	push	{r3, r4, r5, lr}
   10d52:	4605      	mov	r5, r0
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10d54:	480c      	ldr	r0, [pc, #48]	; (10d88 <ds18b20_send+0x38>)
    dev = device_get_binding("GPIO_0");
   10d56:	4c0d      	ldr	r4, [pc, #52]	; (10d8c <ds18b20_send+0x3c>)
   10d58:	f009 fdd2 	bl	1a900 <z_impl_device_get_binding>
    gpio_pin_configure(dev, DS_PIN, GPIO_OUTPUT_INACTIVE);
   10d5c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    dev = device_get_binding("GPIO_0");
   10d60:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev, DS_PIN, GPIO_OUTPUT_INACTIVE);
   10d62:	f00e f901 	bl	1ef68 <gpio_pin_configure.constprop.0.isra.0>

    
    k_busy_wait(5);
   10d66:	2005      	movs	r0, #5
   10d68:	f00e f8ee 	bl	1ef48 <k_busy_wait>

    if(bit==1)
   10d6c:	2d01      	cmp	r5, #1
   10d6e:	d102      	bne.n	10d76 <ds18b20_send+0x26>
        gpio_pin_set(dev, DS_PIN, 1);
   10d70:	6820      	ldr	r0, [r4, #0]
   10d72:	f00e f906 	bl	1ef82 <gpio_pin_set.constprop.0.isra.0>
    
    k_busy_wait(80);
   10d76:	2050      	movs	r0, #80	; 0x50
   10d78:	f00e f8e6 	bl	1ef48 <k_busy_wait>
    
    gpio_pin_set(dev, DS_PIN, 1);
   10d7c:	6820      	ldr	r0, [r4, #0]
}
   10d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gpio_pin_set(dev, DS_PIN, 1);
   10d82:	f00e b8fe 	b.w	1ef82 <gpio_pin_set.constprop.0.isra.0>
   10d86:	bf00      	nop
   10d88:	000247cc 	.word	0x000247cc
   10d8c:	20001e18 	.word	0x20001e18

00010d90 <ds18b20_read>:


/**@brief Function for reading one bit from bus.
 */
unsigned char ds18b20_read(void)
{
   10d90:	b510      	push	{r4, lr}
   10d92:	480f      	ldr	r0, [pc, #60]	; (10dd0 <ds18b20_read+0x40>)
    unsigned char presence=0;

    dev = device_get_binding("GPIO_0");
   10d94:	4c0f      	ldr	r4, [pc, #60]	; (10dd4 <ds18b20_read+0x44>)
   10d96:	f009 fdb3 	bl	1a900 <z_impl_device_get_binding>
    gpio_pin_configure(dev, DS_PIN, GPIO_OUTPUT_INACTIVE);
   10d9a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    dev = device_get_binding("GPIO_0");
   10d9e:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev, DS_PIN, GPIO_OUTPUT_INACTIVE);
   10da0:	f00e f8e2 	bl	1ef68 <gpio_pin_configure.constprop.0.isra.0>

    k_busy_wait(2);
   10da4:	2002      	movs	r0, #2
   10da6:	f00e f8cf 	bl	1ef48 <k_busy_wait>

    gpio_pin_set(dev, DS_PIN, 1);
   10daa:	6820      	ldr	r0, [r4, #0]
   10dac:	f00e f8e9 	bl	1ef82 <gpio_pin_set.constprop.0.isra.0>
    k_busy_wait(15);
   10db0:	200f      	movs	r0, #15
   10db2:	f00e f8c9 	bl	1ef48 <k_busy_wait>

    gpio_pin_configure(dev, DS_PIN, GPIO_INPUT);
   10db6:	6820      	ldr	r0, [r4, #0]
   10db8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10dbc:	f00e f8d4 	bl	1ef68 <gpio_pin_configure.constprop.0.isra.0>

    if(gpio_pin_get(dev, DS_PIN))
   10dc0:	6820      	ldr	r0, [r4, #0]
   10dc2:	f00e f8c3 	bl	1ef4c <gpio_pin_get.constprop.0>
    else
        presence = 0;
    
    
    return presence;
}
   10dc6:	3800      	subs	r0, #0
   10dc8:	bf18      	it	ne
   10dca:	2001      	movne	r0, #1
   10dcc:	bd10      	pop	{r4, pc}
   10dce:	bf00      	nop
   10dd0:	000247cc 	.word	0x000247cc
   10dd4:	20001e18 	.word	0x20001e18

00010dd8 <ds18b20_reset>:


/**@brief Function for sending reset pulse.
 */
unsigned char ds18b20_reset(void)
{
   10dd8:	b510      	push	{r4, lr}
   10dda:	4813      	ldr	r0, [pc, #76]	; (10e28 <ds18b20_reset+0x50>)
    unsigned char presence;

    dev = device_get_binding("GPIO_0");
   10ddc:	4c13      	ldr	r4, [pc, #76]	; (10e2c <ds18b20_reset+0x54>)
   10dde:	f009 fd8f 	bl	1a900 <z_impl_device_get_binding>
    gpio_pin_configure(dev, DS_PIN, GPIO_OUTPUT_INACTIVE);
   10de2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    dev = device_get_binding("GPIO_0");
   10de6:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(dev, DS_PIN, GPIO_OUTPUT_INACTIVE);
   10de8:	f00e f8be 	bl	1ef68 <gpio_pin_configure.constprop.0.isra.0>

    k_busy_wait(500);
   10dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   10df0:	f00e f8aa 	bl	1ef48 <k_busy_wait>
    
    gpio_pin_set(dev, DS_PIN, 1);
   10df4:	6820      	ldr	r0, [r4, #0]
   10df6:	f00e f8c4 	bl	1ef82 <gpio_pin_set.constprop.0.isra.0>

    gpio_pin_configure(dev, DS_PIN, GPIO_INPUT);
   10dfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10dfe:	6820      	ldr	r0, [r4, #0]
   10e00:	f00e f8b2 	bl	1ef68 <gpio_pin_configure.constprop.0.isra.0>
    k_busy_wait(30);
   10e04:	201e      	movs	r0, #30
   10e06:	f00e f89f 	bl	1ef48 <k_busy_wait>


    if(gpio_pin_get(dev, DS_PIN) == 0)    
   10e0a:	6820      	ldr	r0, [r4, #0]
   10e0c:	f00e f89e 	bl	1ef4c <gpio_pin_get.constprop.0>
        presence = 1;   
    else    
        presence = 0;
    
    k_busy_wait(470);
   10e10:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
   10e14:	f00e f898 	bl	1ef48 <k_busy_wait>

    if(gpio_pin_get(dev, DS_PIN) == 1)    
   10e18:	6820      	ldr	r0, [r4, #0]
   10e1a:	f00e f897 	bl	1ef4c <gpio_pin_get.constprop.0>
        presence = 1;   
    else  
        presence = 0;

    return presence;
}
   10e1e:	1e43      	subs	r3, r0, #1
   10e20:	4258      	negs	r0, r3
   10e22:	4158      	adcs	r0, r3
   10e24:	bd10      	pop	{r4, pc}
   10e26:	bf00      	nop
   10e28:	000247cc 	.word	0x000247cc
   10e2c:	20001e18 	.word	0x20001e18

00010e30 <ow_reset>:
// OW_RESET - performs a reset on the one-wire bus and
// returns the presence detect. Reset is 480us. Presence checked
// another 70us later.
//
unsigned char ow_reset(void)
{
   10e30:	b510      	push	{r4, lr}
   10e32:	4816      	ldr	r0, [pc, #88]	; (10e8c <ow_reset+0x5c>)
    unsigned char presence;

    gpio_dev = device_get_binding("GPIO_0");
   10e34:	4c16      	ldr	r4, [pc, #88]	; (10e90 <ow_reset+0x60>)
   10e36:	f009 fd63 	bl	1a900 <z_impl_device_get_binding>
   10e3a:	6020      	str	r0, [r4, #0]
    if(gpio_dev==NULL){
   10e3c:	bb18      	cbnz	r0, 10e86 <ow_reset+0x56>
        printk("GPIO_0 not found\n");
   10e3e:	4815      	ldr	r0, [pc, #84]	; (10e94 <ow_reset+0x64>)
        
    }else{
        printk("all good\n");
   10e40:	f00e fdcf 	bl	1f9e2 <printk>
    }

    gpio_pin_configure(gpio_dev, DQ, GPIO_OUTPUT_INACTIVE); //pull DQ line low
   10e44:	6820      	ldr	r0, [r4, #0]
   10e46:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   10e4a:	f00e f922 	bl	1f092 <gpio_pin_configure.constprop.0.isra.0>

    k_sleep(K_USEC(480)); // leave it low for 480us
   10e4e:	2100      	movs	r1, #0
   10e50:	2010      	movs	r0, #16
   10e52:	f00e f935 	bl	1f0c0 <k_sleep.isra.0>

    gpio_pin_set(gpio_dev, DQ, 1);  // allow line to return high
   10e56:	6820      	ldr	r0, [r4, #0]
   10e58:	f00e f928 	bl	1f0ac <gpio_pin_set.constprop.0.isra.0>

    k_sleep(K_USEC(70)); // wait for presence
   10e5c:	2003      	movs	r0, #3
   10e5e:	2100      	movs	r1, #0
   10e60:	f00e f92e 	bl	1f0c0 <k_sleep.isra.0>

    gpio_pin_configure(gpio_dev, DQ, GPIO_INPUT);
   10e64:	6820      	ldr	r0, [r4, #0]
   10e66:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10e6a:	f00e f912 	bl	1f092 <gpio_pin_configure.constprop.0.isra.0>
    if(gpio_pin_get(gpio_dev, DQ))  // get presence signal
   10e6e:	6820      	ldr	r0, [r4, #0]
   10e70:	f00e f901 	bl	1f076 <gpio_pin_get.constprop.0>
            presence = 1;
    else  
            presence = 0;

    k_sleep(K_USEC(410)); // wait for end of timeslot
   10e74:	2100      	movs	r1, #0
    if(gpio_pin_get(gpio_dev, DQ))  // get presence signal
   10e76:	4604      	mov	r4, r0
    k_sleep(K_USEC(410)); // wait for end of timeslot
   10e78:	200e      	movs	r0, #14
   10e7a:	f00e f921 	bl	1f0c0 <k_sleep.isra.0>


    return(presence); // presence signal returned

} // 0=presence, 1 = no part
   10e7e:	1e20      	subs	r0, r4, #0
   10e80:	bf18      	it	ne
   10e82:	2001      	movne	r0, #1
   10e84:	bd10      	pop	{r4, pc}
        printk("all good\n");
   10e86:	4804      	ldr	r0, [pc, #16]	; (10e98 <ow_reset+0x68>)
   10e88:	e7da      	b.n	10e40 <ow_reset+0x10>
   10e8a:	bf00      	nop
   10e8c:	000247cc 	.word	0x000247cc
   10e90:	20001e1c 	.word	0x20001e1c
   10e94:	000247d3 	.word	0x000247d3
   10e98:	000247e5 	.word	0x000247e5

00010e9c <read_bit>:
// required for a read is 15us, so the DELAY routine won't work.
// We put our own delay function in this routine in the form of a
// for() loop.
//
unsigned char read_bit(void)
{
   10e9c:	b5d0      	push	{r4, r6, r7, lr}
   10e9e:	480f      	ldr	r0, [pc, #60]	; (10edc <read_bit+0x40>)
    unsigned char presence;

    gpio_dev = device_get_binding("GPIO_0");
   10ea0:	4c0f      	ldr	r4, [pc, #60]	; (10ee0 <read_bit+0x44>)
   10ea2:	f009 fd2d 	bl	1a900 <z_impl_device_get_binding>
    gpio_pin_configure(gpio_dev, DQ, GPIO_OUTPUT_INACTIVE); // pull DQ low to start timeslot

    k_sleep(K_USEC(2));
   10ea6:	2601      	movs	r6, #1
   10ea8:	2700      	movs	r7, #0
    gpio_pin_configure(gpio_dev, DQ, GPIO_OUTPUT_INACTIVE); // pull DQ low to start timeslot
   10eaa:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    gpio_dev = device_get_binding("GPIO_0");
   10eae:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(gpio_dev, DQ, GPIO_OUTPUT_INACTIVE); // pull DQ low to start timeslot
   10eb0:	f00e f8ef 	bl	1f092 <gpio_pin_configure.constprop.0.isra.0>
    k_sleep(K_USEC(2));
   10eb4:	4630      	mov	r0, r6
   10eb6:	4639      	mov	r1, r7
   10eb8:	f00e f902 	bl	1f0c0 <k_sleep.isra.0>

     gpio_pin_configure(gpio_dev, DQ, GPIO_INPUT);  // then return high
   10ebc:	6820      	ldr	r0, [r4, #0]
   10ebe:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   10ec2:	f00e f8e6 	bl	1f092 <gpio_pin_configure.constprop.0.isra.0>

    k_sleep(K_USEC(15));    // delay 15us from start of timeslot
   10ec6:	4630      	mov	r0, r6
   10ec8:	4639      	mov	r1, r7
   10eca:	f00e f8f9 	bl	1f0c0 <k_sleep.isra.0>
   
    if(gpio_pin_get(gpio_dev, DQ))  // get presence signal
   10ece:	6820      	ldr	r0, [r4, #0]
   10ed0:	f00e f8d1 	bl	1f076 <gpio_pin_get.constprop.0>
            presence = 1;
    else  
            presence = 0;

    return(presence); // return value of DQ line
}
   10ed4:	3800      	subs	r0, #0
   10ed6:	bf18      	it	ne
   10ed8:	2001      	movne	r0, #1
   10eda:	bdd0      	pop	{r4, r6, r7, pc}
   10edc:	000247cc 	.word	0x000247cc
   10ee0:	20001e1c 	.word	0x20001e1c

00010ee4 <write_bit>:

//////////////////////////////////////////////////////////////////////////////
// WRITE_BIT - writes a bit to the one-wire bus, passed in bitval.
//
void write_bit(char bitval)
{
   10ee4:	b538      	push	{r3, r4, r5, lr}
   10ee6:	4605      	mov	r5, r0
   10ee8:	480d      	ldr	r0, [pc, #52]	; (10f20 <write_bit+0x3c>)
    gpio_dev = device_get_binding("GPIO_0");
   10eea:	4c0e      	ldr	r4, [pc, #56]	; (10f24 <write_bit+0x40>)
   10eec:	f009 fd08 	bl	1a900 <z_impl_device_get_binding>
    gpio_pin_configure(gpio_dev, DQ, GPIO_OUTPUT_INACTIVE); // pull DQ low to start timeslot
   10ef0:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    gpio_dev = device_get_binding("GPIO_0");
   10ef4:	6020      	str	r0, [r4, #0]
    gpio_pin_configure(gpio_dev, DQ, GPIO_OUTPUT_INACTIVE); // pull DQ low to start timeslot
   10ef6:	f00e f8cc 	bl	1f092 <gpio_pin_configure.constprop.0.isra.0>

    k_sleep(K_USEC(5));
   10efa:	2001      	movs	r0, #1
   10efc:	2100      	movs	r1, #0
   10efe:	f00e f8df 	bl	1f0c0 <k_sleep.isra.0>

    if(bitval==1) gpio_pin_set(gpio_dev, DQ, 1); // return DQ high if write 1
   10f02:	2d01      	cmp	r5, #1
   10f04:	d102      	bne.n	10f0c <write_bit+0x28>
   10f06:	6820      	ldr	r0, [r4, #0]
   10f08:	f00e f8d0 	bl	1f0ac <gpio_pin_set.constprop.0.isra.0>

    k_sleep(K_USEC(115)); // hold value for remainder of timeslot
   10f0c:	2004      	movs	r0, #4
   10f0e:	2100      	movs	r1, #0
   10f10:	f00e f8d6 	bl	1f0c0 <k_sleep.isra.0>


    gpio_pin_set(gpio_dev, DQ, 1);
   10f14:	6820      	ldr	r0, [r4, #0]
}
   10f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gpio_pin_set(gpio_dev, DQ, 1);
   10f1a:	f00e b8c7 	b.w	1f0ac <gpio_pin_set.constprop.0.isra.0>
   10f1e:	bf00      	nop
   10f20:	000247cc 	.word	0x000247cc
   10f24:	20001e1c 	.word	0x20001e1c

00010f28 <read_temperature>:
    k_sleep(K_USEC(104));
}


int read_temperature(void)
{
   10f28:	b530      	push	{r4, r5, lr}
   10f2a:	b085      	sub	sp, #20
    char get[10];
    char temp_lsb,temp_msb;
    int k;
    int temp_c;

    ow_reset();
   10f2c:	f7ff ff80 	bl	10e30 <ow_reset>
    write_byte(0xCC); //Skip ROM
   10f30:	20cc      	movs	r0, #204	; 0xcc
   10f32:	f00e f8db 	bl	1f0ec <write_byte>
    write_byte(0x44); // Start Conversion
   10f36:	2044      	movs	r0, #68	; 0x44
   10f38:	f00e f8d8 	bl	1f0ec <write_byte>

    k_sleep(K_USEC(600));
   10f3c:	2100      	movs	r1, #0
   10f3e:	2014      	movs	r0, #20
   10f40:	f00e f8be 	bl	1f0c0 <k_sleep.isra.0>

    ow_reset();
   10f44:	f7ff ff74 	bl	10e30 <ow_reset>
    write_byte(0xCC); // Skip ROM
   10f48:	20cc      	movs	r0, #204	; 0xcc
   10f4a:	f00e f8cf 	bl	1f0ec <write_byte>
    write_byte(0xBE); // Read Scratch Pad
   10f4e:	20be      	movs	r0, #190	; 0xbe
   10f50:	f00e f8cc 	bl	1f0ec <write_byte>

    for (k=0;k<9;k++){get[k]=read_byte();}
   10f54:	ad01      	add	r5, sp, #4
   10f56:	2400      	movs	r4, #0
   10f58:	f00e f8b4 	bl	1f0c4 <read_byte>
   10f5c:	3401      	adds	r4, #1
   10f5e:	2c09      	cmp	r4, #9
   10f60:	f805 0b01 	strb.w	r0, [r5], #1
   10f64:	d1f8      	bne.n	10f58 <read_temperature+0x30>
    // printk("\n ScratchPAD DATA = %X%X%X%X%X\n",get[8],get[7],get[6],get[5],get[4],get[3],get[2],get[1],get[0]);
    
    temp_msb = get[1]; // Sign byte + lsbit
   10f66:	f89d 3005 	ldrb.w	r3, [sp, #5]
    temp_lsb = get[0]; // Temp data plus lsb
   10f6a:	f89d 4004 	ldrb.w	r4, [sp, #4]
    if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
    if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit

    temp_c = (int)temp_lsb;

    printk( "TempC= %d degrees C\n", temp_c ); // print temp. C
   10f6e:	4808      	ldr	r0, [pc, #32]	; (10f90 <read_temperature+0x68>)
    if (temp_msb <= 0x80){temp_lsb = (temp_lsb/2);} // shift to get whole degree
   10f70:	2b80      	cmp	r3, #128	; 0x80
   10f72:	bf98      	it	ls
   10f74:	0864      	lsrls	r4, r4, #1
    if (temp_msb >= 0x80) {temp_lsb = (~temp_lsb)+1;} // twos complement
   10f76:	061b      	lsls	r3, r3, #24
   10f78:	bf41      	itttt	mi
   10f7a:	4264      	negmi	r4, r4
    if (temp_msb >= 0x80) {temp_lsb = (temp_lsb/2);}// shift to get whole degree
   10f7c:	f3c4 0446 	ubfxmi	r4, r4, #1, #7
    if (temp_msb >= 0x80) {temp_lsb = ((-1)*temp_lsb);} // add sign bit
   10f80:	4264      	negmi	r4, r4
   10f82:	b2e4      	uxtbmi	r4, r4
    printk( "TempC= %d degrees C\n", temp_c ); // print temp. C
   10f84:	4621      	mov	r1, r4
   10f86:	f00e fd2c 	bl	1f9e2 <printk>

    return temp_c;
   10f8a:	4620      	mov	r0, r4
   10f8c:	b005      	add	sp, #20
   10f8e:	bd30      	pop	{r4, r5, pc}
   10f90:	000247ef 	.word	0x000247ef

00010f94 <setConfigIMU>:
  printk("config received \n");
   10f94:	4801      	ldr	r0, [pc, #4]	; (10f9c <setConfigIMU+0x8>)
   10f96:	f00e bd24 	b.w	1f9e2 <printk>
   10f9a:	bf00      	nop
   10f9c:	00024804 	.word	0x00024804

00010fa0 <imuDataReady>:
	k_work_submit(&work_data);
   10fa0:	4801      	ldr	r0, [pc, #4]	; (10fa8 <imuDataReady+0x8>)
   10fa2:	f00a b933 	b.w	1b20c <k_work_submit>
   10fa6:	bf00      	nop
   10fa8:	20001e58 	.word	0x20001e58

00010fac <writeByte.constprop.0.isra.0>:
static uint8_t writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data){
   10fac:	b507      	push	{r0, r1, r2, lr}
	  dataBuffer[0]=regAddr;
   10fae:	f88d 0004 	strb.w	r0, [sp, #4]
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
   10fb2:	4806      	ldr	r0, [pc, #24]	; (10fcc <writeByte.constprop.0.isra.0+0x20>)
    dataBuffer[1]=data;
   10fb4:	f88d 1005 	strb.w	r1, [sp, #5]
    return i2c_write(ICM, &dataBuffer, 2, devAddr);
   10fb8:	6800      	ldr	r0, [r0, #0]
   10fba:	2368      	movs	r3, #104	; 0x68
   10fbc:	2202      	movs	r2, #2
   10fbe:	a901      	add	r1, sp, #4
   10fc0:	f00e f8a6 	bl	1f110 <i2c_write.isra.0>
}
   10fc4:	b003      	add	sp, #12
   10fc6:	f85d fb04 	ldr.w	pc, [sp], #4
   10fca:	bf00      	nop
   10fcc:	20001e20 	.word	0x20001e20

00010fd0 <readByte.constprop.0>:
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10fd0:	b510      	push	{r4, lr}
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10fd2:	4c0e      	ldr	r4, [pc, #56]	; (1100c <readByte.constprop.0+0x3c>)
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10fd4:	b086      	sub	sp, #24
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10fd6:	2368      	movs	r3, #104	; 0x68
static uint8_t readByte(uint8_t i2cAddress, uint8_t subAddress){
   10fd8:	f88d 0007 	strb.w	r0, [sp, #7]
	ret = i2c_write(ICM, &subAddress, 1, i2cAddress);
   10fdc:	2201      	movs	r2, #1
   10fde:	6820      	ldr	r0, [r4, #0]
   10fe0:	f10d 0107 	add.w	r1, sp, #7
   10fe4:	f00e f894 	bl	1f110 <i2c_write.isra.0>
	msg.buf = buf;
   10fe8:	f10d 030b 	add.w	r3, sp, #11
   10fec:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   10fee:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10ff0:	2303      	movs	r3, #3
	ret = i2c_read(ICM, &read_data, 1, i2cAddress);
   10ff2:	6820      	ldr	r0, [r4, #0]
	msg.len = num_bytes;
   10ff4:	9204      	str	r2, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   10ff6:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   10ffa:	6883      	ldr	r3, [r0, #8]
   10ffc:	a903      	add	r1, sp, #12
   10ffe:	689c      	ldr	r4, [r3, #8]
   11000:	2368      	movs	r3, #104	; 0x68
   11002:	47a0      	blx	r4
}
   11004:	b2c0      	uxtb	r0, r0
   11006:	b006      	add	sp, #24
   11008:	bd10      	pop	{r4, pc}
   1100a:	bf00      	nop
   1100c:	20001e20 	.word	0x20001e20

00011010 <init_Interrupt_IMU>:
int8_t init_Interrupt_IMU(){
   11010:	b570      	push	{r4, r5, r6, lr}
	k_work_init(&work_data, sendDataIMU);
   11012:	4924      	ldr	r1, [pc, #144]	; (110a4 <init_Interrupt_IMU+0x94>)
   11014:	4824      	ldr	r0, [pc, #144]	; (110a8 <init_Interrupt_IMU+0x98>)
   11016:	f012 f82c 	bl	23072 <k_work_init>
	k_work_init(&work_config, setConfigIMU);
   1101a:	4924      	ldr	r1, [pc, #144]	; (110ac <init_Interrupt_IMU+0x9c>)
   1101c:	4824      	ldr	r0, [pc, #144]	; (110b0 <init_Interrupt_IMU+0xa0>)
   1101e:	f012 f828 	bl	23072 <k_work_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   11022:	4d24      	ldr	r5, [pc, #144]	; (110b4 <init_Interrupt_IMU+0xa4>)
   11024:	4628      	mov	r0, r5
   11026:	f011 fde3 	bl	22bf0 <z_device_is_ready>
    if (!device_is_ready(imuInt.port)) {
   1102a:	b930      	cbnz	r0, 1103a <init_Interrupt_IMU+0x2a>
		printk("Error: imu interrupt %s is not ready\n",
   1102c:	6829      	ldr	r1, [r5, #0]
   1102e:	4822      	ldr	r0, [pc, #136]	; (110b8 <init_Interrupt_IMU+0xa8>)
   11030:	f00e fcd7 	bl	1f9e2 <printk>
		return 1;
   11034:	2401      	movs	r4, #1
}
   11036:	4620      	mov	r0, r4
   11038:	bd70      	pop	{r4, r5, r6, pc}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1103a:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   1103c:	68ae      	ldr	r6, [r5, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1103e:	6813      	ldr	r3, [r2, #0]
   11040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   11044:	6013      	str	r3, [r2, #0]
	}

	return api->pin_configure(port, pin, flags);
   11046:	2118      	movs	r1, #24
   11048:	6833      	ldr	r3, [r6, #0]
   1104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1104e:	4628      	mov	r0, r5
   11050:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&imuInt, GPIO_INPUT);
   11052:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11054:	b134      	cbz	r4, 11064 <init_Interrupt_IMU+0x54>
		printk("Error %d: failed to configure %s pin %d\n",
   11056:	682a      	ldr	r2, [r5, #0]
   11058:	4818      	ldr	r0, [pc, #96]	; (110bc <init_Interrupt_IMU+0xac>)
   1105a:	2318      	movs	r3, #24
   1105c:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1105e:	f00e fcc0 	bl	1f9e2 <printk>
		return returnValue;
   11062:	e7e8      	b.n	11036 <init_Interrupt_IMU+0x26>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11064:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11068:	69b4      	ldr	r4, [r6, #24]
   1106a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   1106e:	2118      	movs	r1, #24
   11070:	4628      	mov	r0, r5
   11072:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&imuInt,GPIO_INT_EDGE_RISING);
   11074:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11076:	b124      	cbz	r4, 11082 <init_Interrupt_IMU+0x72>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   11078:	682a      	ldr	r2, [r5, #0]
   1107a:	4811      	ldr	r0, [pc, #68]	; (110c0 <init_Interrupt_IMU+0xb0>)
   1107c:	2318      	movs	r3, #24
   1107e:	4621      	mov	r1, r4
   11080:	e7ed      	b.n	1105e <init_Interrupt_IMU+0x4e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   11082:	4910      	ldr	r1, [pc, #64]	; (110c4 <init_Interrupt_IMU+0xb4>)
   11084:	4b10      	ldr	r3, [pc, #64]	; (110c8 <init_Interrupt_IMU+0xb8>)
   11086:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   11088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1108c:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1108e:	69f3      	ldr	r3, [r6, #28]
   11090:	b113      	cbz	r3, 11098 <init_Interrupt_IMU+0x88>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   11092:	2201      	movs	r2, #1
   11094:	4628      	mov	r0, r5
   11096:	4798      	blx	r3
	printk("Set up IMU at %s pin %d\n", imuInt.port->name, imuInt.pin);
   11098:	6829      	ldr	r1, [r5, #0]
   1109a:	480c      	ldr	r0, [pc, #48]	; (110cc <init_Interrupt_IMU+0xbc>)
   1109c:	2218      	movs	r2, #24
   1109e:	f00e fca0 	bl	1f9e2 <printk>
  return returnValue;
   110a2:	e7c8      	b.n	11036 <init_Interrupt_IMU+0x26>
   110a4:	00010c29 	.word	0x00010c29
   110a8:	20001e58 	.word	0x20001e58
   110ac:	00010f95 	.word	0x00010f95
   110b0:	20001e48 	.word	0x20001e48
   110b4:	00023970 	.word	0x00023970
   110b8:	00024816 	.word	0x00024816
   110bc:	0002483c 	.word	0x0002483c
   110c0:	00024865 	.word	0x00024865
   110c4:	20001e38 	.word	0x20001e38
   110c8:	00010fa1 	.word	0x00010fa1
   110cc:	0002489b 	.word	0x0002489b

000110d0 <initIMU>:
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   110d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110d2:	461c      	mov	r4, r3
    ICM = i2c_pointer;
   110d4:	4b76      	ldr	r3, [pc, #472]	; (112b0 <initIMU+0x1e0>)
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   110d6:	f89d 7018 	ldrb.w	r7, [sp, #24]
    ICM = i2c_pointer;
   110da:	6018      	str	r0, [r3, #0]
extern void initIMU(struct device *i2c_pointer, uint8_t Ascale, uint8_t Gscale, uint8_t AODR, uint8_t GODR){
   110dc:	460e      	mov	r6, r1
   110de:	4615      	mov	r5, r2
    init_Interrupt_IMU();
   110e0:	f7ff ff96 	bl	11010 <init_Interrupt_IMU>
  uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG);
   110e4:	2011      	movs	r0, #17
   110e6:	f7ff ff73 	bl	10fd0 <readByte.constprop.0>
  writeByte(ICM42605_ADDRESS, ICM42605_DEVICE_CONFIG, temp | 0x01); // Set bit 0 to 1 to reset ICM42605
   110ea:	f040 0101 	orr.w	r1, r0, #1
   110ee:	b2c9      	uxtb	r1, r1
   110f0:	2011      	movs	r0, #17
   110f2:	f7ff ff5b 	bl	10fac <writeByte.constprop.0.isra.0>
	return z_impl_k_sleep(timeout);
   110f6:	2100      	movs	r1, #0
   110f8:	f44f 70a4 	mov.w	r0, #328	; 0x148
   110fc:	f00a fc00 	bl	1b900 <z_impl_k_sleep>
   11100:	2100      	movs	r1, #0
   11102:	f640 40cd 	movw	r0, #3277	; 0xccd
   11106:	f00a fbfb 	bl	1b900 <z_impl_k_sleep>
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG);      
   1110a:	2013      	movs	r0, #19
   1110c:	f7ff ff60 	bl	10fd0 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 5);
   11110:	f000 01c9 	and.w	r1, r0, #201	; 0xc9
    writeByte(ICM42605_ADDRESS, ICM42605_DRIVE_CONFIG, temp);// set i2c slew rate to 20-60ns
   11114:	f041 0109 	orr.w	r1, r1, #9
   11118:	2013      	movs	r0, #19
   1111a:	f7ff ff47 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6);      
   1111e:	207c      	movs	r0, #124	; 0x7c
   11120:	f7ff ff56 	bl	10fd0 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 1);
   11124:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG6, temp);// 
   11128:	f041 0110 	orr.w	r1, r1, #16
   1112c:	207c      	movs	r0, #124	; 0x7c
   1112e:	f7ff ff3d 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4);      
   11132:	207a      	movs	r0, #122	; 0x7a
   11134:	f7ff ff4c 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INTF_CONFIG4, temp);// 
   11138:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   1113c:	207a      	movs	r0, #122	; 0x7a
   1113e:	f7ff ff35 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0);
   11142:	204f      	movs	r0, #79	; 0x4f
   11144:	f7ff ff44 	bl	10fd0 <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   11148:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG0, temp | GODR | Gscale << 5); // gyro full scale and data rate
   1114c:	4339      	orrs	r1, r7
   1114e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
   11152:	b2c9      	uxtb	r1, r1
   11154:	204f      	movs	r0, #79	; 0x4f
   11156:	f7ff ff29 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0);
   1115a:	2050      	movs	r0, #80	; 0x50
   1115c:	f7ff ff38 	bl	10fd0 <readByte.constprop.0>
    temp = temp & ~(0xEF) ; // set all to 0 
   11160:	f000 0110 	and.w	r1, r0, #16
    writeByte(ICM42605_ADDRESS, ICM42605_ACCEL_CONFIG0, temp | AODR | Ascale << 5); // set accel full scale and data rate
   11164:	4321      	orrs	r1, r4
   11166:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
   1116a:	b2c9      	uxtb	r1, r1
   1116c:	2050      	movs	r0, #80	; 0x50
   1116e:	f7ff ff1d 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1);
   11172:	2051      	movs	r0, #81	; 0x51
   11174:	f7ff ff2c 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_GYRO_CONFIG1, temp | 0xD0); // set temperature sensor low pass filter to 5Hz, use first order gyro filter
   11178:	f060 012f 	orn	r1, r0, #47	; 0x2f
   1117c:	b2c9      	uxtb	r1, r1
   1117e:	2051      	movs	r0, #81	; 0x51
   11180:	f7ff ff14 	bl	10fac <writeByte.constprop.0.isra.0>
   11184:	2100      	movs	r1, #0
   11186:	f640 40cd 	movw	r0, #3277	; 0xccd
   1118a:	f00a fbb9 	bl	1b900 <z_impl_k_sleep>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG);
   1118e:	2014      	movs	r0, #20
   11190:	f7ff ff1e 	bl	10fd0 <readByte.constprop.0>
    temp ^= (-activeHigh ^ temp) & (1UL << 0);  // bit 0
   11194:	43c3      	mvns	r3, r0
   11196:	f003 0301 	and.w	r3, r3, #1
   1119a:	4058      	eors	r0, r3
   1119c:	b2c0      	uxtb	r0, r0
    temp ^= (-pushPull ^ temp) & (1UL << 1);
   1119e:	43c1      	mvns	r1, r0
   111a0:	f001 0102 	and.w	r1, r1, #2
   111a4:	4041      	eors	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG, temp);
   111a6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
   111aa:	2014      	movs	r0, #20
   111ac:	f7ff fefe 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1);
   111b0:	2064      	movs	r0, #100	; 0x64
   111b2:	f7ff ff0d 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG1, temp & ~(0x10) ); // set bit 4 to zero for proper function of INT1 and INT2
   111b6:	f000 01ef 	and.w	r1, r0, #239	; 0xef
   111ba:	2064      	movs	r0, #100	; 0x64
   111bc:	f7ff fef6 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0);
   111c0:	2063      	movs	r0, #99	; 0x63
   111c2:	f7ff ff05 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_CONFIG0, temp);
   111c6:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
   111ca:	2063      	movs	r0, #99	; 0x63
   111cc:	f7ff feee 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0);
   111d0:	2065      	movs	r0, #101	; 0x65
   111d2:	f7ff fefd 	bl	10fd0 <readByte.constprop.0>
    temp ^= (-0 ^ temp) & (1UL << 6);
   111d6:	f000 0188 	and.w	r1, r0, #136	; 0x88
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE0, temp ); // route data ready interrupt to INT1
   111da:	f041 0108 	orr.w	r1, r1, #8
   111de:	2065      	movs	r0, #101	; 0x65
   111e0:	f7ff fee4 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3);
   111e4:	2068      	movs	r0, #104	; 0x68
   111e6:	f7ff fef3 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_INT_SOURCE3, temp | 0x01 ); // route AGC interrupt interrupt to INT2
   111ea:	f040 0101 	orr.w	r1, r0, #1
   111ee:	b2c9      	uxtb	r1, r1
   111f0:	2068      	movs	r0, #104	; 0x68
   111f2:	f7ff fedb 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   111f6:	2076      	movs	r0, #118	; 0x76
   111f8:	f7ff feea 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp | 0x04 ); // select Bank 4
   111fc:	f040 0104 	orr.w	r1, r0, #4
   11200:	b2c9      	uxtb	r1, r1
   11202:	2076      	movs	r0, #118	; 0x76
   11204:	f7ff fed2 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5);
   11208:	2044      	movs	r0, #68	; 0x44
   1120a:	f7ff fee1 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_APEX_CONFIG5, temp & ~(0x07) ); // select unitary mounting matrix
   1120e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   11212:	2044      	movs	r0, #68	; 0x44
   11214:	f7ff feca 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL);
   11218:	2076      	movs	r0, #118	; 0x76
   1121a:	f7ff fed9 	bl	10fd0 <readByte.constprop.0>
    writeByte(ICM42605_ADDRESS, ICM42605_REG_BANK_SEL, temp & ~(0x07) ); // select Bank 0
   1121e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   11222:	2076      	movs	r0, #118	; 0x76
   11224:	f7ff fec2 	bl	10fac <writeByte.constprop.0.isra.0>
    temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0); // make sure not to disturb reserved bit values
   11228:	204e      	movs	r0, #78	; 0x4e
   1122a:	f7ff fed1 	bl	10fd0 <readByte.constprop.0>
   1122e:	4601      	mov	r1, r0
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp | 0x00);  // disable gyro and accel
   11230:	204e      	movs	r0, #78	; 0x4e
   11232:	f7ff febb 	bl	10fac <writeByte.constprop.0.isra.0>
  switch (Ascale)
   11236:	2e03      	cmp	r6, #3
   11238:	d807      	bhi.n	1124a <initIMU+0x17a>
   1123a:	e8df f006 	tbb	[pc, r6]
   1123e:	1216      	.short	0x1216
   11240:	020e      	.short	0x020e
      _aRes = 2.0f / 32768.0f;
   11242:	4b1c      	ldr	r3, [pc, #112]	; (112b4 <initIMU+0x1e4>)
   11244:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
      _aRes = 16.0f / 32768.0f;
   11248:	601a      	str	r2, [r3, #0]
  switch (Gscale)
   1124a:	2d07      	cmp	r5, #7
   1124c:	d814      	bhi.n	11278 <initIMU+0x1a8>
   1124e:	e8df f005 	tbb	[pc, r5]
   11252:	292c      	.short	0x292c
   11254:	1d202326 	.word	0x1d202326
   11258:	101a      	.short	0x101a
      _aRes = 4.0f / 32768.0f;
   1125a:	4b16      	ldr	r3, [pc, #88]	; (112b4 <initIMU+0x1e4>)
   1125c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
   11260:	e7f2      	b.n	11248 <initIMU+0x178>
      _aRes = 8.0f / 32768.0f;
   11262:	4b14      	ldr	r3, [pc, #80]	; (112b4 <initIMU+0x1e4>)
   11264:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
   11268:	e7ee      	b.n	11248 <initIMU+0x178>
      _aRes = 16.0f / 32768.0f;
   1126a:	4b12      	ldr	r3, [pc, #72]	; (112b4 <initIMU+0x1e4>)
   1126c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
   11270:	e7ea      	b.n	11248 <initIMU+0x178>
      _gRes = 15.125f / 32768.0f;
   11272:	4b11      	ldr	r3, [pc, #68]	; (112b8 <initIMU+0x1e8>)
   11274:	4a11      	ldr	r2, [pc, #68]	; (112bc <initIMU+0x1ec>)
      _gRes = 2000.0f / 32768.0f;
   11276:	601a      	str	r2, [r3, #0]
   11278:	f44f 70a4 	mov.w	r0, #328	; 0x148
}
   1127c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11280:	2100      	movs	r1, #0
   11282:	f00a bb3d 	b.w	1b900 <z_impl_k_sleep>
      _gRes = 31.25f / 32768.0f;
   11286:	4b0c      	ldr	r3, [pc, #48]	; (112b8 <initIMU+0x1e8>)
   11288:	4a0d      	ldr	r2, [pc, #52]	; (112c0 <initIMU+0x1f0>)
   1128a:	e7f4      	b.n	11276 <initIMU+0x1a6>
      _gRes = 62.5f / 32768.0f;
   1128c:	4b0a      	ldr	r3, [pc, #40]	; (112b8 <initIMU+0x1e8>)
   1128e:	4a0d      	ldr	r2, [pc, #52]	; (112c4 <initIMU+0x1f4>)
   11290:	e7f1      	b.n	11276 <initIMU+0x1a6>
      _gRes = 125.0f / 32768.0f;
   11292:	4b09      	ldr	r3, [pc, #36]	; (112b8 <initIMU+0x1e8>)
   11294:	4a0c      	ldr	r2, [pc, #48]	; (112c8 <initIMU+0x1f8>)
   11296:	e7ee      	b.n	11276 <initIMU+0x1a6>
      _gRes = 250.0f / 32768.0f;
   11298:	4b07      	ldr	r3, [pc, #28]	; (112b8 <initIMU+0x1e8>)
   1129a:	4a0c      	ldr	r2, [pc, #48]	; (112cc <initIMU+0x1fc>)
   1129c:	e7eb      	b.n	11276 <initIMU+0x1a6>
      _gRes = 500.0f / 32768.0f;
   1129e:	4b06      	ldr	r3, [pc, #24]	; (112b8 <initIMU+0x1e8>)
   112a0:	4a0b      	ldr	r2, [pc, #44]	; (112d0 <initIMU+0x200>)
   112a2:	e7e8      	b.n	11276 <initIMU+0x1a6>
      _gRes = 1000.0f / 32768.0f;
   112a4:	4b04      	ldr	r3, [pc, #16]	; (112b8 <initIMU+0x1e8>)
   112a6:	4a0b      	ldr	r2, [pc, #44]	; (112d4 <initIMU+0x204>)
   112a8:	e7e5      	b.n	11276 <initIMU+0x1a6>
      _gRes = 2000.0f / 32768.0f;
   112aa:	4b03      	ldr	r3, [pc, #12]	; (112b8 <initIMU+0x1e8>)
   112ac:	4a0a      	ldr	r2, [pc, #40]	; (112d8 <initIMU+0x208>)
   112ae:	e7e2      	b.n	11276 <initIMU+0x1a6>
   112b0:	20001e20 	.word	0x20001e20
   112b4:	20001e24 	.word	0x20001e24
   112b8:	20001e28 	.word	0x20001e28
   112bc:	39f20000 	.word	0x39f20000
   112c0:	3a7a0000 	.word	0x3a7a0000
   112c4:	3afa0000 	.word	0x3afa0000
   112c8:	3b7a0000 	.word	0x3b7a0000
   112cc:	3bfa0000 	.word	0x3bfa0000
   112d0:	3c7a0000 	.word	0x3c7a0000
   112d4:	3cfa0000 	.word	0x3cfa0000
   112d8:	3d7a0000 	.word	0x3d7a0000

000112dc <imu_config_notification>:
{
	printk("config bmp set");
}
static void imu_config_notification(const struct bt_gatt_attr *attr,uint8_t value)
{
	printk("config imu set");
   112dc:	4801      	ldr	r0, [pc, #4]	; (112e4 <imu_config_notification+0x8>)
   112de:	f00e bb80 	b.w	1f9e2 <printk>
   112e2:	bf00      	nop
   112e4:	000248b4 	.word	0x000248b4

000112e8 <bmp_config_notification>:
	printk("config bmp set");
   112e8:	4801      	ldr	r0, [pc, #4]	; (112f0 <bmp_config_notification+0x8>)
   112ea:	f00e bb7a 	b.w	1f9e2 <printk>
   112ee:	bf00      	nop
   112f0:	000248c3 	.word	0x000248c3

000112f4 <read_u16>:
#include "ble.h"

static ssize_t read_u16(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			void *buf, uint16_t len, uint16_t offset)
{
   112f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   112f8:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   112fc:	460c      	mov	r4, r1
   112fe:	4606      	mov	r6, r0
	// this function is only called on READ, which one is called if notification is set?!
    printk("len: %i\n",len);
   11300:	4619      	mov	r1, r3
   11302:	480b      	ldr	r0, [pc, #44]	; (11330 <read_u16+0x3c>)
{
   11304:	461d      	mov	r5, r3
   11306:	4617      	mov	r7, r2
    printk("len: %i\n",len);
   11308:	f00e fb6b 	bl	1f9e2 <printk>
	printk("offset: %i\n",offset);
   1130c:	4641      	mov	r1, r8
   1130e:	4809      	ldr	r0, [pc, #36]	; (11334 <read_u16+0x40>)
   11310:	f00e fb67 	bl	1f9e2 <printk>
	//const uint16_t *u16 = attr->user_data;
	//uint16_t value = sys_cpu_to_le16(*u16);
	uint8_t *value = attr->user_data;

//	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(value));
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value, 12);
   11314:	230c      	movs	r3, #12
   11316:	9302      	str	r3, [sp, #8]
   11318:	68e3      	ldr	r3, [r4, #12]
   1131a:	463a      	mov	r2, r7
   1131c:	e9cd 8300 	strd	r8, r3, [sp]
   11320:	4621      	mov	r1, r4
   11322:	462b      	mov	r3, r5
   11324:	4630      	mov	r0, r6
   11326:	f010 fecc 	bl	220c2 <bt_gatt_attr_read>
}
   1132a:	b004      	add	sp, #16
   1132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11330:	000248d2 	.word	0x000248d2
   11334:	000248db 	.word	0x000248db

00011338 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   11338:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
   1133a:	4804      	ldr	r0, [pc, #16]	; (1134c <disconnected+0x14>)
   1133c:	f00e fb51 	bl	1f9e2 <printk>
	sleepBMP(1);
}
   11340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sleepBMP(1);
   11344:	2001      	movs	r0, #1
   11346:	f000 bca9 	b.w	11c9c <sleepBMP>
   1134a:	bf00      	nop
   1134c:	000248e7 	.word	0x000248e7

00011350 <connected>:
{
   11350:	b510      	push	{r4, lr}
   11352:	460c      	mov	r4, r1
	bt_conn_le_param_update(conn,&conn_paramter);
   11354:	4907      	ldr	r1, [pc, #28]	; (11374 <connected+0x24>)
   11356:	f00f fe36 	bl	20fc6 <bt_conn_le_param_update>
	if (err) {
   1135a:	b12c      	cbz	r4, 11368 <connected+0x18>
		printk("Connection failed (err 0x%02x)\n", err);
   1135c:	4621      	mov	r1, r4
   1135e:	4806      	ldr	r0, [pc, #24]	; (11378 <connected+0x28>)
}
   11360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connection failed (err 0x%02x)\n", err);
   11364:	f00e bb3d 	b.w	1f9e2 <printk>
}
   11368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Connected\n");
   1136c:	4803      	ldr	r0, [pc, #12]	; (1137c <connected+0x2c>)
   1136e:	f00e bb38 	b.w	1f9e2 <printk>
   11372:	bf00      	nop
   11374:	000247c4 	.word	0x000247c4
   11378:	00024905 	.word	0x00024905
   1137c:	00024925 	.word	0x00024925

00011380 <dataWritten>:
{
   11380:	b570      	push	{r4, r5, r6, lr}
   11382:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   11386:	460d      	mov	r5, r1
	if (offset + len > sizeof(config_data)) {
   11388:	461c      	mov	r4, r3
   1138a:	18c3      	adds	r3, r0, r3
   1138c:	2b14      	cmp	r3, #20
	uint8_t *value = attr->user_data;
   1138e:	68ee      	ldr	r6, [r5, #12]
{
   11390:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   11392:	dc0b      	bgt.n	113ac <dataWritten+0x2c>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11394:	4622      	mov	r2, r4
   11396:	4430      	add	r0, r6
   11398:	f012 fa03 	bl	237a2 <memcpy>
	if(attr->uuid == &bmp_cnfg.uuid){
   1139c:	682a      	ldr	r2, [r5, #0]
   1139e:	4b05      	ldr	r3, [pc, #20]	; (113b4 <dataWritten+0x34>)
   113a0:	429a      	cmp	r2, r3
   113a2:	d101      	bne.n	113a8 <dataWritten+0x28>
		submitConfigBMP();
   113a4:	f000 fc74 	bl	11c90 <submitConfigBMP>
}
   113a8:	4620      	mov	r0, r4
   113aa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   113ac:	f06f 0406 	mvn.w	r4, #6
   113b0:	e7fa      	b.n	113a8 <dataWritten+0x28>
   113b2:	bf00      	nop
   113b4:	20000929 	.word	0x20000929

000113b8 <bt_gatt_notify_uuid.constprop.0.isra.0>:
 *  @param data Pointer to Attribute data.
 *  @param len  Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify_uuid(struct bt_conn *conn,
   113b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.uuid = uuid;
   113ba:	9000      	str	r0, [sp, #0]
	params.attr = attr;
   113bc:	4807      	ldr	r0, [pc, #28]	; (113dc <bt_gatt_notify_uuid.constprop.0.isra.0+0x24>)
	memset(&params, 0, sizeof(params));
   113be:	2300      	movs	r3, #0
	params.data = data;
   113c0:	e9cd 0101 	strd	r0, r1, [sp, #4]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   113c4:	4669      	mov	r1, sp
   113c6:	4618      	mov	r0, r3
	memset(&params, 0, sizeof(params));
   113c8:	e9cd 3303 	strd	r3, r3, [sp, #12]
   113cc:	9305      	str	r3, [sp, #20]
	params.len = len;
   113ce:	f8ad 200c 	strh.w	r2, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   113d2:	f005 fe03 	bl	16fdc <bt_gatt_notify_cb>
}
   113d6:	b007      	add	sp, #28
   113d8:	f85d fb04 	ldr.w	pc, [sp], #4
   113dc:	00023cf4 	.word	0x00023cf4

000113e0 <initBLE>:
		battery_level = 100U;
	}

	bt_bas_set_battery_level(battery_level);
}
extern void initBLE(){
   113e0:	b507      	push	{r0, r1, r2, lr}
     bt_enable(NULL);
   113e2:	2000      	movs	r0, #0
   113e4:	f003 fbcc 	bl	14b80 <bt_enable>
	printk("Bluetooth initialized\n");
   113e8:	480c      	ldr	r0, [pc, #48]	; (1141c <initBLE+0x3c>)
   113ea:	f00e fafa 	bl	1f9e2 <printk>
	err = bt_le_adv_start(&adv_param_normal, ad, ARRAY_SIZE(ad), NULL, 0);
   113ee:	2300      	movs	r3, #0
   113f0:	490b      	ldr	r1, [pc, #44]	; (11420 <initBLE+0x40>)
   113f2:	480c      	ldr	r0, [pc, #48]	; (11424 <initBLE+0x44>)
   113f4:	9300      	str	r3, [sp, #0]
   113f6:	2203      	movs	r2, #3
   113f8:	f003 ffae 	bl	15358 <bt_le_adv_start>
	if (err) {
   113fc:	4601      	mov	r1, r0
   113fe:	b140      	cbz	r0, 11412 <initBLE+0x32>
		printk("Advertising failed to start (err %d)\n", err);
   11400:	4809      	ldr	r0, [pc, #36]	; (11428 <initBLE+0x48>)
   11402:	f00e faee 	bl	1f9e2 <printk>
     bt_ready();
     bt_conn_cb_register(&conn_callbacks);
   11406:	4809      	ldr	r0, [pc, #36]	; (1142c <initBLE+0x4c>)
};
   11408:	b003      	add	sp, #12
   1140a:	f85d eb04 	ldr.w	lr, [sp], #4
     bt_conn_cb_register(&conn_callbacks);
   1140e:	f004 bb1d 	b.w	15a4c <bt_conn_cb_register>
	printk("Advertising successfully started\n");
   11412:	4807      	ldr	r0, [pc, #28]	; (11430 <initBLE+0x50>)
   11414:	f00e fae5 	bl	1f9e2 <printk>
   11418:	e7f5      	b.n	11406 <initBLE+0x26>
   1141a:	bf00      	nop
   1141c:	00024930 	.word	0x00024930
   11420:	00023cc8 	.word	0x00023cc8
   11424:	00023ce0 	.word	0x00023ce0
   11428:	00024947 	.word	0x00024947
   1142c:	200005b8 	.word	0x200005b8
   11430:	0002496d 	.word	0x0002496d

00011434 <sendData>:


extern void sendData(uint8_t ID, float* DATA,uint8_t LEN){
	if(ID == SENSOR_IMU_ACC_ID){
   11434:	2802      	cmp	r0, #2
   11436:	d102      	bne.n	1143e <sendData+0xa>
		bt_gatt_notify_uuid(NULL, &icm_uuid_acc.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   11438:	4805      	ldr	r0, [pc, #20]	; (11450 <sendData+0x1c>)
	if(ID == SENSOR_IMU_GYR_ID){
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
		return;
	}
	if(ID == SENSOR_BMP384_ID){
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   1143a:	f7ff bfbd 	b.w	113b8 <bt_gatt_notify_uuid.constprop.0.isra.0>
	if(ID == SENSOR_IMU_GYR_ID){
   1143e:	2803      	cmp	r0, #3
   11440:	d101      	bne.n	11446 <sendData+0x12>
		bt_gatt_notify_uuid(NULL, &icm_uuid_gyr.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   11442:	4804      	ldr	r0, [pc, #16]	; (11454 <sendData+0x20>)
   11444:	e7f9      	b.n	1143a <sendData+0x6>
	if(ID == SENSOR_BMP384_ID){
   11446:	2801      	cmp	r0, #1
   11448:	d101      	bne.n	1144e <sendData+0x1a>
		bt_gatt_notify_uuid(NULL, &bmp_uuid.uuid,&phyphoxGATT.attrs[0],DATA,LEN);
   1144a:	4803      	ldr	r0, [pc, #12]	; (11458 <sendData+0x24>)
   1144c:	e7f5      	b.n	1143a <sendData+0x6>
		return;
	}	
};
   1144e:	4770      	bx	lr
   11450:	2000096d 	.word	0x2000096d
   11454:	2000097e 	.word	0x2000097e
   11458:	2000093a 	.word	0x2000093a

0001145c <printMLX>:
{
	//printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
	k_work_submit(&work_mlx);

}
extern void printMLX(){
   1145c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    float x,y,z;
    mlx_readMeasurement(&mlxData.x,&mlxData.y,&mlxData.z,mlxdev);
   1145e:	4c10      	ldr	r4, [pc, #64]	; (114a0 <printMLX+0x44>)
   11460:	4b10      	ldr	r3, [pc, #64]	; (114a4 <printMLX+0x48>)
   11462:	f1a4 0608 	sub.w	r6, r4, #8
   11466:	4622      	mov	r2, r4
   11468:	681b      	ldr	r3, [r3, #0]
   1146a:	1f21      	subs	r1, r4, #4
   1146c:	4630      	mov	r0, r6
   1146e:	f000 fcf3 	bl	11e58 <mlx_readMeasurement>
	if(1){
    	printk("MLX: x: %f y: %f z: %f \n",mlxData.x,mlxData.y,mlxData.z);
   11472:	f854 0c08 	ldr.w	r0, [r4, #-8]
   11476:	f7ef f85b 	bl	530 <__aeabi_f2d>
   1147a:	4604      	mov	r4, r0
   1147c:	68b0      	ldr	r0, [r6, #8]
   1147e:	460d      	mov	r5, r1
   11480:	f7ef f856 	bl	530 <__aeabi_f2d>
   11484:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11488:	6870      	ldr	r0, [r6, #4]
   1148a:	f7ef f851 	bl	530 <__aeabi_f2d>
   1148e:	4622      	mov	r2, r4
   11490:	e9cd 0100 	strd	r0, r1, [sp]
   11494:	462b      	mov	r3, r5
   11496:	4804      	ldr	r0, [pc, #16]	; (114a8 <printMLX+0x4c>)
   11498:	f00e faa3 	bl	1f9e2 <printk>
	}
}
   1149c:	b004      	add	sp, #16
   1149e:	bd70      	pop	{r4, r5, r6, pc}
   114a0:	20001ec0 	.word	0x20001ec0
   114a4:	20001ed4 	.word	0x20001ed4
   114a8:	0002498f 	.word	0x0002498f

000114ac <mlx_int1_triggered>:
	k_work_submit(&work_mlx);
   114ac:	4801      	ldr	r0, [pc, #4]	; (114b4 <mlx_int1_triggered+0x8>)
   114ae:	f009 bead 	b.w	1b20c <k_work_submit>
   114b2:	bf00      	nop
   114b4:	20001ed8 	.word	0x20001ed8

000114b8 <initMLX>:
extern void initMLX(struct device *i2c_dev){
   114b8:	b510      	push	{r4, lr}
   114ba:	4604      	mov	r4, r0
    	mlx_init(i2c_dev);
   114bc:	f00e fa2b 	bl	1f916 <mlx_init>
        mlxdev = i2c_dev;
   114c0:	4b01      	ldr	r3, [pc, #4]	; (114c8 <initMLX+0x10>)
   114c2:	601c      	str	r4, [r3, #0]
}
   114c4:	bd10      	pop	{r4, pc}
   114c6:	bf00      	nop
   114c8:	20001ed4 	.word	0x20001ed4

000114cc <init_Interrupt_MLX>:

int8_t init_Interrupt_MLX(){
   114cc:	b570      	push	{r4, r5, r6, lr}
    int8_t returnValue;

	k_work_init(&work_mlx, printMLX);
   114ce:	4922      	ldr	r1, [pc, #136]	; (11558 <init_Interrupt_MLX+0x8c>)
   114d0:	4822      	ldr	r0, [pc, #136]	; (1155c <init_Interrupt_MLX+0x90>)
   114d2:	f011 fdce 	bl	23072 <k_work_init>
   114d6:	4d22      	ldr	r5, [pc, #136]	; (11560 <init_Interrupt_MLX+0x94>)
   114d8:	4628      	mov	r0, r5
   114da:	f011 fb89 	bl	22bf0 <z_device_is_ready>

    if (!device_is_ready(mlx_int1.port)) {
   114de:	b930      	cbnz	r0, 114ee <init_Interrupt_MLX+0x22>
		printk("Error: button device %s is not ready\n",
   114e0:	6829      	ldr	r1, [r5, #0]
   114e2:	4820      	ldr	r0, [pc, #128]	; (11564 <init_Interrupt_MLX+0x98>)
   114e4:	f00e fa7d 	bl	1f9e2 <printk>
		       mlx_int1.port->name);
		return 1;
   114e8:	2401      	movs	r4, #1
	gpio_init_callback(&mlx_int1_cb_data, mlx_int1_triggered, BIT(mlx_int1.pin));
	gpio_add_callback(mlx_int1.port, &mlx_int1_cb_data);
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);

    return returnValue;
}
   114ea:	4620      	mov	r0, r4
   114ec:	bd70      	pop	{r4, r5, r6, pc}
	struct gpio_driver_data *data =
   114ee:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   114f0:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   114f2:	6813      	ldr	r3, [r2, #0]
   114f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   114f8:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   114fa:	210f      	movs	r1, #15
   114fc:	6833      	ldr	r3, [r6, #0]
   114fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11502:	4628      	mov	r0, r5
   11504:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&mlx_int1, GPIO_INPUT);
   11506:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11508:	b134      	cbz	r4, 11518 <init_Interrupt_MLX+0x4c>
		printk("Error %d: failed to configure %s pin %d\n",
   1150a:	682a      	ldr	r2, [r5, #0]
   1150c:	4816      	ldr	r0, [pc, #88]	; (11568 <init_Interrupt_MLX+0x9c>)
   1150e:	230f      	movs	r3, #15
   11510:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   11512:	f00e fa66 	bl	1f9e2 <printk>
		return returnValue;
   11516:	e7e8      	b.n	114ea <init_Interrupt_MLX+0x1e>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11518:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1151c:	69b4      	ldr	r4, [r6, #24]
   1151e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   11522:	210f      	movs	r1, #15
   11524:	4628      	mov	r0, r5
   11526:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&mlx_int1,GPIO_INT_EDGE_RISING);
   11528:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   1152a:	b124      	cbz	r4, 11536 <init_Interrupt_MLX+0x6a>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   1152c:	682a      	ldr	r2, [r5, #0]
   1152e:	480f      	ldr	r0, [pc, #60]	; (1156c <init_Interrupt_MLX+0xa0>)
   11530:	230f      	movs	r3, #15
   11532:	4621      	mov	r1, r4
   11534:	e7ed      	b.n	11512 <init_Interrupt_MLX+0x46>
	callback->handler = handler;
   11536:	490e      	ldr	r1, [pc, #56]	; (11570 <init_Interrupt_MLX+0xa4>)
   11538:	4b0e      	ldr	r3, [pc, #56]	; (11574 <init_Interrupt_MLX+0xa8>)
   1153a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   1153c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11540:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   11542:	69f3      	ldr	r3, [r6, #28]
   11544:	b113      	cbz	r3, 1154c <init_Interrupt_MLX+0x80>
	return api->manage_callback(port, callback, true);
   11546:	2201      	movs	r2, #1
   11548:	4628      	mov	r0, r5
   1154a:	4798      	blx	r3
	printk("Set up mlx_int1 at %s pin %d\n", mlx_int1.port->name, mlx_int1.pin);
   1154c:	6829      	ldr	r1, [r5, #0]
   1154e:	480a      	ldr	r0, [pc, #40]	; (11578 <init_Interrupt_MLX+0xac>)
   11550:	220f      	movs	r2, #15
   11552:	f00e fa46 	bl	1f9e2 <printk>
    return returnValue;
   11556:	e7c8      	b.n	114ea <init_Interrupt_MLX+0x1e>
   11558:	0001145d 	.word	0x0001145d
   1155c:	20001ed8 	.word	0x20001ed8
   11560:	00023970 	.word	0x00023970
   11564:	000249a8 	.word	0x000249a8
   11568:	0002483c 	.word	0x0002483c
   1156c:	00024865 	.word	0x00024865
   11570:	20001ec8 	.word	0x20001ec8
   11574:	000114ad 	.word	0x000114ad
   11578:	000249ce 	.word	0x000249ce

0001157c <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
   1157c:	b570      	push	{r4, r5, r6, lr}
   1157e:	4605      	mov	r5, r0
   11580:	b092      	sub	sp, #72	; 0x48
     * be considered in the sum. */
    uint32_t meas_t = 234;
    uint32_t meas_t_p = 0;

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
   11582:	4921      	ldr	r1, [pc, #132]	; (11608 <validate_osr_and_odr_settings+0x8c>)
   11584:	2248      	movs	r2, #72	; 0x48
   11586:	4668      	mov	r0, sp
   11588:	f012 f90b 	bl	237a2 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
   1158c:	f895 40b1 	ldrb.w	r4, [r5, #177]	; 0xb1
   11590:	b16c      	cbz	r4, 115ae <validate_osr_and_odr_settings+0x32>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
   11592:	f895 40b3 	ldrb.w	r4, [r5, #179]	; 0xb3
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
    float pow_output = 1;
   11596:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000

    while (power != 0)
   1159a:	bb44      	cbnz	r4, 115ee <validate_osr_and_odr_settings+0x72>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   1159c:	491b      	ldr	r1, [pc, #108]	; (1160c <validate_osr_and_odr_settings+0x90>)
   1159e:	f7ee fdaf 	bl	100 <__aeabi_fmul>
   115a2:	491b      	ldr	r1, [pc, #108]	; (11610 <validate_osr_and_odr_settings+0x94>)
   115a4:	f7ef fb0c 	bl	bc0 <__addsf3>
   115a8:	f7ef fc38 	bl	e1c <__aeabi_f2uiz>
   115ac:	4604      	mov	r4, r0
    if (dev->settings.temp_en)
   115ae:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   115b2:	b16b      	cbz	r3, 115d0 <validate_osr_and_odr_settings+0x54>
        meas_t_p += calculate_temp_meas_time(dev);
   115b4:	f895 60b4 	ldrb.w	r6, [r5, #180]	; 0xb4
    float pow_output = 1;
   115b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    while (power != 0)
   115bc:	b9ee      	cbnz	r6, 115fa <validate_osr_and_odr_settings+0x7e>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   115be:	4913      	ldr	r1, [pc, #76]	; (1160c <validate_osr_and_odr_settings+0x90>)
   115c0:	f7ee fd9e 	bl	100 <__aeabi_fmul>
   115c4:	4913      	ldr	r1, [pc, #76]	; (11614 <validate_osr_and_odr_settings+0x98>)
   115c6:	f7ef fafb 	bl	bc0 <__addsf3>
   115ca:	f7ef fc27 	bl	e1c <__aeabi_f2uiz>
        meas_t_p += calculate_temp_meas_time(dev);
   115ce:	4404      	add	r4, r0
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   115d0:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   115d4:	aa12      	add	r2, sp, #72	; 0x48
   115d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    meas_t += meas_t_p;
   115da:	34ea      	adds	r4, #234	; 0xea
    if (meas_t < odr_duration)
   115dc:	f853 3c48 	ldr.w	r3, [r3, #-72]
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   115e0:	42a3      	cmp	r3, r4
}
   115e2:	bf94      	ite	ls
   115e4:	f06f 0002 	mvnls.w	r0, #2
   115e8:	2000      	movhi	r0, #0
   115ea:	b012      	add	sp, #72	; 0x48
   115ec:	bd70      	pop	{r4, r5, r6, pc}
    {
        pow_output = (float) base * pow_output;
   115ee:	4601      	mov	r1, r0
        power--;
   115f0:	3c01      	subs	r4, #1
        pow_output = (float) base * pow_output;
   115f2:	f7ef fae5 	bl	bc0 <__addsf3>
        power--;
   115f6:	b2e4      	uxtb	r4, r4
   115f8:	e7cf      	b.n	1159a <validate_osr_and_odr_settings+0x1e>
        pow_output = (float) base * pow_output;
   115fa:	4601      	mov	r1, r0
        power--;
   115fc:	3e01      	subs	r6, #1
        pow_output = (float) base * pow_output;
   115fe:	f7ef fadf 	bl	bc0 <__addsf3>
        power--;
   11602:	b2f6      	uxtb	r6, r6
   11604:	e7da      	b.n	115bc <validate_osr_and_odr_settings+0x40>
   11606:	bf00      	nop
   11608:	00023c20 	.word	0x00023c20
   1160c:	44fa0000 	.word	0x44fa0000
   11610:	43c40000 	.word	0x43c40000
   11614:	439c8000 	.word	0x439c8000

00011618 <bmp3_set_sensor_settings>:
{
   11618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1161a:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1161c:	4608      	mov	r0, r1
{
   1161e:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   11620:	f00d fdba 	bl	1f198 <null_ptr_check>
    if (rslt == BMP3_OK)
   11624:	2800      	cmp	r0, #0
   11626:	f040 811e 	bne.w	11866 <bmp3_set_sensor_settings+0x24e>
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
   1162a:	f014 0f06 	tst.w	r4, #6
   1162e:	d029      	beq.n	11684 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   11630:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11632:	460b      	mov	r3, r1
   11634:	2201      	movs	r2, #1
   11636:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   11638:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1163c:	f00d fea5 	bl	1f38a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11640:	bb00      	cbnz	r0, 11684 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   11642:	07a7      	lsls	r7, r4, #30
   11644:	d50a      	bpl.n	1165c <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   11646:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1164a:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
   1164e:	f023 0301 	bic.w	r3, r3, #1
   11652:	f002 0201 	and.w	r2, r2, #1
   11656:	4313      	orrs	r3, r2
   11658:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   1165c:	0766      	lsls	r6, r4, #29
   1165e:	d50b      	bpl.n	11678 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   11660:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   11664:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11668:	005b      	lsls	r3, r3, #1
   1166a:	f003 0302 	and.w	r3, r3, #2
   1166e:	f022 0202 	bic.w	r2, r2, #2
   11672:	4313      	orrs	r3, r2
   11674:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   11678:	462b      	mov	r3, r5
   1167a:	2201      	movs	r2, #1
   1167c:	a901      	add	r1, sp, #4
   1167e:	4668      	mov	r0, sp
   11680:	f00d fec4 	bl	1f40c <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11684:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   11688:	d072      	beq.n	11770 <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   1168a:	2800      	cmp	r0, #0
   1168c:	d170      	bne.n	11770 <bmp3_set_sensor_settings+0x158>
    uint8_t reg_addr[3] = { 0 };
   1168e:	4b78      	ldr	r3, [pc, #480]	; (11870 <bmp3_set_sensor_settings+0x258>)
   11690:	f88d 0002 	strb.w	r0, [sp, #2]
   11694:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   11698:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1169c:	2204      	movs	r2, #4
   1169e:	462b      	mov	r3, r5
   116a0:	eb0d 0102 	add.w	r1, sp, r2
   116a4:	201c      	movs	r0, #28
   116a6:	f00d fe70 	bl	1f38a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   116aa:	2800      	cmp	r0, #0
   116ac:	d160      	bne.n	11770 <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
   116ae:	f014 0f30 	tst.w	r4, #48	; 0x30
   116b2:	f000 80da 	beq.w	1186a <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
   116b6:	06e0      	lsls	r0, r4, #27
   116b8:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
   116bc:	d50a      	bpl.n	116d4 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   116be:	f89d 3004 	ldrb.w	r3, [sp, #4]
   116c2:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
   116c6:	f023 0307 	bic.w	r3, r3, #7
   116ca:	f001 0107 	and.w	r1, r1, #7
   116ce:	430b      	orrs	r3, r1
   116d0:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
   116d4:	06a1      	lsls	r1, r4, #26
   116d6:	d509      	bpl.n	116ec <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   116d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   116dc:	00d2      	lsls	r2, r2, #3
   116de:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   116e2:	f002 0238 	and.w	r2, r2, #56	; 0x38
   116e6:	4313      	orrs	r3, r2
   116e8:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
   116ec:	231c      	movs	r3, #28
   116ee:	f88d 3000 	strb.w	r3, [sp]
}
   116f2:	2601      	movs	r6, #1
    if (sub_settings & desired_settings)
   116f4:	0622      	lsls	r2, r4, #24
   116f6:	d518      	bpl.n	1172a <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   116f8:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   116fc:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   116fe:	bf84      	itt	hi
   11700:	2311      	movhi	r3, #17
   11702:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   11706:	ab02      	add	r3, sp, #8
   11708:	1999      	adds	r1, r3, r6
   1170a:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
   1170e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   11712:	f002 021f 	and.w	r2, r2, #31
   11716:	f023 031f 	bic.w	r3, r3, #31
   1171a:	4313      	orrs	r3, r2
   1171c:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   11720:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
   11722:	231d      	movs	r3, #29
   11724:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   11728:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
   1172a:	0663      	lsls	r3, r4, #25
   1172c:	d512      	bpl.n	11754 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   1172e:	ab02      	add	r3, sp, #8
   11730:	1999      	adds	r1, r3, r6
   11732:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
   11736:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1173a:	005b      	lsls	r3, r3, #1
   1173c:	f003 030e 	and.w	r3, r3, #14
   11740:	f022 020e 	bic.w	r2, r2, #14
   11744:	4313      	orrs	r3, r2
   11746:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   1174a:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
   1174c:	231f      	movs	r3, #31
   1174e:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   11752:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   11754:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   11758:	2b03      	cmp	r3, #3
   1175a:	d103      	bne.n	11764 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
   1175c:	4628      	mov	r0, r5
   1175e:	f7ff ff0d 	bl	1157c <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
   11762:	b928      	cbnz	r0, 11770 <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   11764:	462b      	mov	r3, r5
   11766:	4632      	mov	r2, r6
   11768:	a901      	add	r1, sp, #4
   1176a:	4668      	mov	r0, sp
   1176c:	f00d fe4e 	bl	1f40c <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11770:	f414 6fe1 	tst.w	r4, #1800	; 0x708
   11774:	d048      	beq.n	11808 <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   11776:	2800      	cmp	r0, #0
   11778:	d146      	bne.n	11808 <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
   1177a:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   1177c:	462b      	mov	r3, r5
   1177e:	2201      	movs	r2, #1
   11780:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
   11782:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11786:	f00d fe00 	bl	1f38a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1178a:	2800      	cmp	r0, #0
   1178c:	d13c      	bne.n	11808 <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   1178e:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
   11790:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
   11794:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   11798:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   1179c:	d50a      	bpl.n	117b4 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   1179e:	f89d 3000 	ldrb.w	r3, [sp]
   117a2:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
   117a6:	f023 0301 	bic.w	r3, r3, #1
   117aa:	f006 0601 	and.w	r6, r6, #1
   117ae:	4333      	orrs	r3, r6
   117b0:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
   117b4:	05a6      	lsls	r6, r4, #22
   117b6:	d509      	bpl.n	117cc <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   117b8:	f89d 3000 	ldrb.w	r3, [sp]
   117bc:	0040      	lsls	r0, r0, #1
   117be:	f023 0302 	bic.w	r3, r3, #2
   117c2:	f000 0002 	and.w	r0, r0, #2
   117c6:	4303      	orrs	r3, r0
   117c8:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
   117cc:	0560      	lsls	r0, r4, #21
   117ce:	d509      	bpl.n	117e4 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   117d0:	f89d 3000 	ldrb.w	r3, [sp]
   117d4:	0089      	lsls	r1, r1, #2
   117d6:	f023 0304 	bic.w	r3, r3, #4
   117da:	f001 0104 	and.w	r1, r1, #4
   117de:	430b      	orrs	r3, r1
   117e0:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   117e4:	0721      	lsls	r1, r4, #28
   117e6:	d509      	bpl.n	117fc <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   117e8:	f89d 3000 	ldrb.w	r3, [sp]
   117ec:	0192      	lsls	r2, r2, #6
   117ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   117f2:	f002 0240 	and.w	r2, r2, #64	; 0x40
   117f6:	4313      	orrs	r3, r2
   117f8:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   117fc:	462b      	mov	r3, r5
   117fe:	2201      	movs	r2, #1
   11800:	4669      	mov	r1, sp
   11802:	a801      	add	r0, sp, #4
   11804:	f00d fe02 	bl	1f40c <bmp3_set_regs>
    if (sub_settings & desired_settings)
   11808:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
   1180c:	d02b      	beq.n	11866 <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   1180e:	bb50      	cbnz	r0, 11866 <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
   11810:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11812:	462b      	mov	r3, r5
   11814:	2201      	movs	r2, #1
   11816:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   11818:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
   1181c:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
   11820:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   11824:	f00d fdb1 	bl	1f38a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   11828:	b9e8      	cbnz	r0, 11866 <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   1182a:	0522      	lsls	r2, r4, #20
   1182c:	d509      	bpl.n	11842 <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   1182e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11832:	007f      	lsls	r7, r7, #1
   11834:	f023 0302 	bic.w	r3, r3, #2
   11838:	f007 0702 	and.w	r7, r7, #2
   1183c:	433b      	orrs	r3, r7
   1183e:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   11842:	04e3      	lsls	r3, r4, #19
   11844:	d509      	bpl.n	1185a <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   11846:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1184a:	00b6      	lsls	r6, r6, #2
   1184c:	f023 0304 	bic.w	r3, r3, #4
   11850:	f006 0604 	and.w	r6, r6, #4
   11854:	4333      	orrs	r3, r6
   11856:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   1185a:	462b      	mov	r3, r5
   1185c:	2201      	movs	r2, #1
   1185e:	a901      	add	r1, sp, #4
   11860:	4668      	mov	r0, sp
   11862:	f00d fdd3 	bl	1f40c <bmp3_set_regs>
}
   11866:	b003      	add	sp, #12
   11868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
   1186a:	4606      	mov	r6, r0
   1186c:	e742      	b.n	116f4 <bmp3_set_sensor_settings+0xdc>
   1186e:	bf00      	nop
   11870:	00023c20 	.word	0x00023c20

00011874 <bmp3_init>:
{
   11874:	b530      	push	{r4, r5, lr}
   11876:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
   11878:	2300      	movs	r3, #0
{
   1187a:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   1187c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   11880:	f00d fc8a 	bl	1f198 <null_ptr_check>
    if (rslt == BMP3_OK)
   11884:	4605      	mov	r5, r0
   11886:	2800      	cmp	r0, #0
   11888:	f040 80d8 	bne.w	11a3c <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
   1188c:	7a23      	ldrb	r3, [r4, #8]
   1188e:	3b01      	subs	r3, #1
   11890:	bf18      	it	ne
   11892:	2301      	movne	r3, #1
   11894:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   11896:	2201      	movs	r2, #1
   11898:	4623      	mov	r3, r4
   1189a:	f10d 0107 	add.w	r1, sp, #7
   1189e:	f00d fd74 	bl	1f38a <bmp3_get_regs>
        if (rslt == BMP3_OK)
   118a2:	4605      	mov	r5, r0
   118a4:	2800      	cmp	r0, #0
   118a6:	f040 80c9 	bne.w	11a3c <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   118aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   118ae:	2b50      	cmp	r3, #80	; 0x50
   118b0:	d002      	beq.n	118b8 <bmp3_init+0x44>
   118b2:	2b60      	cmp	r3, #96	; 0x60
   118b4:	f040 80c5 	bne.w	11a42 <bmp3_init+0x1ce>
                dev->chip_id = chip_id;
   118b8:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   118ba:	4620      	mov	r0, r4
   118bc:	f00d fe10 	bl	1f4e0 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   118c0:	4605      	mov	r5, r0
   118c2:	2800      	cmp	r0, #0
   118c4:	f040 80ba 	bne.w	11a3c <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   118c8:	4601      	mov	r1, r0
   118ca:	9002      	str	r0, [sp, #8]
   118cc:	2211      	movs	r2, #17
   118ce:	a803      	add	r0, sp, #12
   118d0:	f011 ff88 	bl	237e4 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   118d4:	4623      	mov	r3, r4
   118d6:	2215      	movs	r2, #21
   118d8:	a902      	add	r1, sp, #8
   118da:	2031      	movs	r0, #49	; 0x31
   118dc:	f00d fd55 	bl	1f38a <bmp3_get_regs>
   118e0:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   118e2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   118e6:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   118ea:	f7ee fdff 	bl	4ec <__aeabi_ui2d>
   118ee:	4b56      	ldr	r3, [pc, #344]	; (11a48 <bmp3_init+0x1d4>)
   118f0:	2200      	movs	r2, #0
   118f2:	f7ee fe75 	bl	5e0 <__aeabi_dmul>
   118f6:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   118fa:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   118fe:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   11902:	f7ee fdf3 	bl	4ec <__aeabi_ui2d>
   11906:	4b51      	ldr	r3, [pc, #324]	; (11a4c <bmp3_init+0x1d8>)
   11908:	2200      	movs	r2, #0
   1190a:	f7ee fe69 	bl	5e0 <__aeabi_dmul>
   1190e:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   11912:	f99d 000c 	ldrsb.w	r0, [sp, #12]
   11916:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   1191a:	f7ee fdf7 	bl	50c <__aeabi_i2d>
   1191e:	4b4c      	ldr	r3, [pc, #304]	; (11a50 <bmp3_init+0x1dc>)
   11920:	2200      	movs	r2, #0
   11922:	f7ee fe5d 	bl	5e0 <__aeabi_dmul>
   11926:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   1192a:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
   1192e:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   11932:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   11936:	f7ee fde9 	bl	50c <__aeabi_i2d>
   1193a:	4b46      	ldr	r3, [pc, #280]	; (11a54 <bmp3_init+0x1e0>)
   1193c:	2200      	movs	r2, #0
   1193e:	f7ee fe4f 	bl	5e0 <__aeabi_dmul>
   11942:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   11946:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
   1194a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   1194e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   11952:	f7ee fddb 	bl	50c <__aeabi_i2d>
   11956:	4b40      	ldr	r3, [pc, #256]	; (11a58 <bmp3_init+0x1e4>)
   11958:	2200      	movs	r2, #0
   1195a:	f7ee fe41 	bl	5e0 <__aeabi_dmul>
   1195e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   11962:	f99d 0011 	ldrsb.w	r0, [sp, #17]
   11966:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   1196a:	f7ee fdcf 	bl	50c <__aeabi_i2d>
   1196e:	4b3b      	ldr	r3, [pc, #236]	; (11a5c <bmp3_init+0x1e8>)
   11970:	2200      	movs	r2, #0
   11972:	f7ee fe35 	bl	5e0 <__aeabi_dmul>
   11976:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   1197a:	f99d 0012 	ldrsb.w	r0, [sp, #18]
   1197e:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   11982:	f7ee fdc3 	bl	50c <__aeabi_i2d>
   11986:	4b36      	ldr	r3, [pc, #216]	; (11a60 <bmp3_init+0x1ec>)
   11988:	2200      	movs	r2, #0
   1198a:	f7ee fe29 	bl	5e0 <__aeabi_dmul>
   1198e:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   11992:	f8bd 0013 	ldrh.w	r0, [sp, #19]
   11996:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   1199a:	f7ee fda7 	bl	4ec <__aeabi_ui2d>
   1199e:	4b31      	ldr	r3, [pc, #196]	; (11a64 <bmp3_init+0x1f0>)
   119a0:	2200      	movs	r2, #0
   119a2:	f7ee fe1d 	bl	5e0 <__aeabi_dmul>
   119a6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   119aa:	f8bd 0015 	ldrh.w	r0, [sp, #21]
   119ae:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   119b2:	f7ee fd9b 	bl	4ec <__aeabi_ui2d>
   119b6:	4b2c      	ldr	r3, [pc, #176]	; (11a68 <bmp3_init+0x1f4>)
   119b8:	2200      	movs	r2, #0
   119ba:	f7ee fe11 	bl	5e0 <__aeabi_dmul>
   119be:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   119c2:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   119c6:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   119ca:	f7ee fd9f 	bl	50c <__aeabi_i2d>
   119ce:	4b27      	ldr	r3, [pc, #156]	; (11a6c <bmp3_init+0x1f8>)
   119d0:	2200      	movs	r2, #0
   119d2:	f7ee fe05 	bl	5e0 <__aeabi_dmul>
   119d6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   119da:	f99d 0018 	ldrsb.w	r0, [sp, #24]
   119de:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   119e2:	f7ee fd93 	bl	50c <__aeabi_i2d>
   119e6:	2200      	movs	r2, #0
   119e8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   119ec:	f7ee fdf8 	bl	5e0 <__aeabi_dmul>
   119f0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   119f4:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
   119f8:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   119fc:	f7ee fd86 	bl	50c <__aeabi_i2d>
   11a00:	4b13      	ldr	r3, [pc, #76]	; (11a50 <bmp3_init+0x1dc>)
   11a02:	2200      	movs	r2, #0
   11a04:	f7ee fdec 	bl	5e0 <__aeabi_dmul>
   11a08:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   11a0c:	f99d 001b 	ldrsb.w	r0, [sp, #27]
   11a10:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   11a14:	f7ee fd7a 	bl	50c <__aeabi_i2d>
   11a18:	4b0d      	ldr	r3, [pc, #52]	; (11a50 <bmp3_init+0x1dc>)
   11a1a:	2200      	movs	r2, #0
   11a1c:	f7ee fde0 	bl	5e0 <__aeabi_dmul>
   11a20:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   11a24:	f99d 001c 	ldrsb.w	r0, [sp, #28]
   11a28:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   11a2c:	f7ee fd6e 	bl	50c <__aeabi_i2d>
   11a30:	4b0f      	ldr	r3, [pc, #60]	; (11a70 <bmp3_init+0x1fc>)
   11a32:	2200      	movs	r2, #0
   11a34:	f7ee fdd4 	bl	5e0 <__aeabi_dmul>
   11a38:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   11a3c:	4628      	mov	r0, r5
   11a3e:	b009      	add	sp, #36	; 0x24
   11a40:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
   11a42:	f06f 0501 	mvn.w	r5, #1
   11a46:	e7f9      	b.n	11a3c <bmp3_init+0x1c8>
   11a48:	40700000 	.word	0x40700000
   11a4c:	3e100000 	.word	0x3e100000
   11a50:	3cf00000 	.word	0x3cf00000
   11a54:	3eb00000 	.word	0x3eb00000
   11a58:	3e200000 	.word	0x3e200000
   11a5c:	3df00000 	.word	0x3df00000
   11a60:	3da00000 	.word	0x3da00000
   11a64:	40200000 	.word	0x40200000
   11a68:	3f900000 	.word	0x3f900000
   11a6c:	3f700000 	.word	0x3f700000
   11a70:	3be00000 	.word	0x3be00000

00011a74 <sendDataBMP>:

static void app_us_delay(uint32_t period, void *intf_ptr) {
	return k_busy_wait(period);
}

extern void sendDataBMP(void){
   11a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   11a76:	4b1b      	ldr	r3, [pc, #108]	; (11ae4 <sendDataBMP+0x70>)
   11a78:	4e1b      	ldr	r6, [pc, #108]	; (11ae8 <sendDataBMP+0x74>)
   11a7a:	4a1c      	ldr	r2, [pc, #112]	; (11aec <sendDataBMP+0x78>)
   11a7c:	7818      	ldrb	r0, [r3, #0]
extern void sendDataBMP(void){
   11a7e:	b085      	sub	sp, #20
    bmpResult = bmp3_get_sensor_data(sensor_comp, &myData, &bmp388_dev);
   11a80:	4631      	mov	r1, r6
   11a82:	f00d fdf4 	bl	1f66e <bmp3_get_sensor_data>
   11a86:	4b1a      	ldr	r3, [pc, #104]	; (11af0 <sendDataBMP+0x7c>)
   11a88:	7018      	strb	r0, [r3, #0]
	return z_impl_k_uptime_ticks();
   11a8a:	f011 fcd0 	bl	2342e <z_impl_k_uptime_ticks>
   11a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11a92:	fba0 0302 	umull	r0, r3, r0, r2
   11a96:	fb02 3101 	mla	r1, r2, r1, r3
   11a9a:	0bc0      	lsrs	r0, r0, #15
	if(PRINT_SENSOR_DATA){
		printk("BMP: pressure: %f temp: %f\n", myData.pressure,myData.temperature);
	}
	float timestamp = k_uptime_get() /1000.0;
   11a9c:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   11aa0:	0bc9      	lsrs	r1, r1, #15
   11aa2:	f7ee fd6f 	bl	584 <__aeabi_l2d>
   11aa6:	4b13      	ldr	r3, [pc, #76]	; (11af4 <sendDataBMP+0x80>)
	bmpData.pressure = myData.pressure;
   11aa8:	4f13      	ldr	r7, [pc, #76]	; (11af8 <sendDataBMP+0x84>)
	float timestamp = k_uptime_get() /1000.0;
   11aaa:	2200      	movs	r2, #0
   11aac:	f7ee fec2 	bl	834 <__aeabi_ddiv>
   11ab0:	f7ef f830 	bl	b14 <__aeabi_d2f>
   11ab4:	4604      	mov	r4, r0
	bmpData.pressure = myData.pressure;
   11ab6:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   11aba:	f7ef f82b 	bl	b14 <__aeabi_d2f>
   11abe:	4605      	mov	r5, r0
   11ac0:	6038      	str	r0, [r7, #0]
	bmpData.temperature = myData.temperature;
   11ac2:	e9d6 0100 	ldrd	r0, r1, [r6]
   11ac6:	f7ef f825 	bl	b14 <__aeabi_d2f>
	bmpData.timestamp=timestamp;
	
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   11aca:	220c      	movs	r2, #12
	bmpData.temperature = myData.temperature;
   11acc:	6078      	str	r0, [r7, #4]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   11ace:	9002      	str	r0, [sp, #8]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   11ad0:	a901      	add	r1, sp, #4
   11ad2:	2001      	movs	r0, #1
	bmpData.timestamp=timestamp;
   11ad4:	60bc      	str	r4, [r7, #8]
	float myArray[3] = {myData.pressure,myData.temperature,timestamp};
   11ad6:	9501      	str	r5, [sp, #4]
   11ad8:	9403      	str	r4, [sp, #12]
	sendData(SENSOR_BMP384_ID, &myArray, 4*3);
   11ada:	f7ff fcab 	bl	11434 <sendData>
}
   11ade:	b005      	add	sp, #20
   11ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ae2:	bf00      	nop
   11ae4:	2000098f 	.word	0x2000098f
   11ae8:	20001880 	.word	0x20001880
   11aec:	200017b0 	.word	0x200017b0
   11af0:	20003330 	.word	0x20003330
   11af4:	408f4000 	.word	0x408f4000
   11af8:	20001e68 	.word	0x20001e68

00011afc <bmpDataReady>:
static const struct gpio_dt_spec bmpInt = GPIO_DT_SPEC_GET_OR(BMP_INT, gpios,{0});
static struct gpio_callback bmpInt_cb_data;

static void bmpDataReady(const struct device *dev, struct gpio_callback *cb,uint32_t pins)
{
	k_work_submit(&work_data);
   11afc:	4801      	ldr	r0, [pc, #4]	; (11b04 <bmpDataReady+0x8>)
   11afe:	f009 bb85 	b.w	1b20c <k_work_submit>
   11b02:	bf00      	nop
   11b04:	20001f04 	.word	0x20001f04

00011b08 <initBMP384>:
void initBMP384(struct device *i2c_dev){
   11b08:	b570      	push	{r4, r5, r6, lr}
	bmp388_dev.intf = BMP3_I2C_INTF;
   11b0a:	4c29      	ldr	r4, [pc, #164]	; (11bb0 <initBMP384+0xa8>)
	bmp388_dev.intf_rslt = bmpResult;
   11b0c:	4d29      	ldr	r5, [pc, #164]	; (11bb4 <initBMP384+0xac>)
	bmp388_dev.intf_ptr = i2c_dev;
   11b0e:	6060      	str	r0, [r4, #4]
	bmp388_dev.intf = BMP3_I2C_INTF;
   11b10:	2301      	movs	r3, #1
   11b12:	7223      	strb	r3, [r4, #8]
	bmp388_dev.intf_rslt = bmpResult;
   11b14:	782b      	ldrb	r3, [r5, #0]
   11b16:	7263      	strb	r3, [r4, #9]
	bmp388_dev.dummy_byte = dByte;
   11b18:	2300      	movs	r3, #0
   11b1a:	72a3      	strb	r3, [r4, #10]
	bmp388_dev.read = app_i2c_read;
   11b1c:	4b26      	ldr	r3, [pc, #152]	; (11bb8 <initBMP384+0xb0>)
   11b1e:	60e3      	str	r3, [r4, #12]
	bmp388_dev.write = app_i2c_write;
   11b20:	4b26      	ldr	r3, [pc, #152]	; (11bbc <initBMP384+0xb4>)
   11b22:	6123      	str	r3, [r4, #16]
	bmpResult = bmp3_init(&bmp388_dev);
   11b24:	4620      	mov	r0, r4
	bmp388_dev.delay_us = app_us_delay;
   11b26:	4b26      	ldr	r3, [pc, #152]	; (11bc0 <initBMP384+0xb8>)
   11b28:	6163      	str	r3, [r4, #20]
	bmpResult = bmp3_init(&bmp388_dev);
   11b2a:	f7ff fea3 	bl	11874 <bmp3_init>
   11b2e:	4601      	mov	r1, r0
   11b30:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   11b32:	b110      	cbz	r0, 11b3a <initBMP384+0x32>
		printk("init error: %i \n",bmpResult);
   11b34:	4823      	ldr	r0, [pc, #140]	; (11bc4 <initBMP384+0xbc>)
   11b36:	f00d ff54 	bl	1f9e2 <printk>
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   11b3a:	2301      	movs	r3, #1
   11b3c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.int_settings.level = BMP3_INT_PIN_ACTIVE_HIGH;
   11b40:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11b44:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   11b48:	f240 1301 	movw	r3, #257	; 0x101
   11b4c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11b50:	f44f 7300 	mov.w	r3, #512	; 0x200
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   11b54:	4916      	ldr	r1, [pc, #88]	; (11bb0 <initBMP384+0xa8>)
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11b56:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   11b5a:	f240 20fe 	movw	r0, #766	; 0x2fe
    bmp388_dev.settings.odr_filter.odr = BMP3_ODR_1_5_HZ;
   11b5e:	2307      	movs	r3, #7
   11b60:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
	bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev); 
   11b64:	f7ff fd58 	bl	11618 <bmp3_set_sensor_settings>
   11b68:	4601      	mov	r1, r0
   11b6a:	7028      	strb	r0, [r5, #0]
	if(bmpResult != 0){
   11b6c:	b978      	cbnz	r0, 11b8e <initBMP384+0x86>
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   11b6e:	4810      	ldr	r0, [pc, #64]	; (11bb0 <initBMP384+0xa8>)
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   11b70:	2603      	movs	r6, #3
   11b72:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   11b76:	f00d fd05 	bl	1f584 <bmp3_set_op_mode>
   11b7a:	7028      	strb	r0, [r5, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   11b7c:	b178      	cbz	r0, 11b9e <initBMP384+0x96>
extern void submitConfigBMP(){
	k_work_submit(&work_config);
};
extern uint8_t sleepBMP(bool SLEEP){
	if(SLEEP){
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   11b7e:	2300      	movs	r3, #0
		return bmp3_set_op_mode(&bmp388_dev);
   11b80:	480b      	ldr	r0, [pc, #44]	; (11bb0 <initBMP384+0xa8>)
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   11b82:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   11b86:	f00d fcfd 	bl	1f584 <bmp3_set_op_mode>
	bmpResult = sleepBMP(true);
   11b8a:	7028      	strb	r0, [r5, #0]
}
   11b8c:	bd70      	pop	{r4, r5, r6, pc}
		printk("set settings error: %i \n",bmpResult);
   11b8e:	480e      	ldr	r0, [pc, #56]	; (11bc8 <initBMP384+0xc0>)
   11b90:	f00d ff27 	bl	1f9e2 <printk>
	if (bmpResult == BMP3_SENSOR_OK){
   11b94:	f995 3000 	ldrsb.w	r3, [r5]
   11b98:	2b00      	cmp	r3, #0
   11b9a:	d1f0      	bne.n	11b7e <initBMP384+0x76>
   11b9c:	e7e7      	b.n	11b6e <initBMP384+0x66>
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   11b9e:	6963      	ldr	r3, [r4, #20]
   11ba0:	6861      	ldr	r1, [r4, #4]
   11ba2:	f649 4040 	movw	r0, #40000	; 0x9c40
   11ba6:	4798      	blx	r3
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   11ba8:	4b08      	ldr	r3, [pc, #32]	; (11bcc <initBMP384+0xc4>)
   11baa:	701e      	strb	r6, [r3, #0]
   11bac:	e7e7      	b.n	11b7e <initBMP384+0x76>
   11bae:	bf00      	nop
   11bb0:	200017b0 	.word	0x200017b0
   11bb4:	20003330 	.word	0x20003330
   11bb8:	0001f731 	.word	0x0001f731
   11bbc:	0001f6ef 	.word	0x0001f6ef
   11bc0:	0001f6eb 	.word	0x0001f6eb
   11bc4:	000249ec 	.word	0x000249ec
   11bc8:	000249fd 	.word	0x000249fd
   11bcc:	2000098f 	.word	0x2000098f

00011bd0 <init_Interrupt_BMP>:
int8_t init_Interrupt_BMP(){
   11bd0:	b570      	push	{r4, r5, r6, lr}
	k_work_init(&work_data, sendDataBMP);
   11bd2:	4924      	ldr	r1, [pc, #144]	; (11c64 <init_Interrupt_BMP+0x94>)
   11bd4:	4824      	ldr	r0, [pc, #144]	; (11c68 <init_Interrupt_BMP+0x98>)
   11bd6:	f011 fa4c 	bl	23072 <k_work_init>
	k_work_init(&work_config, setConfigBMP);
   11bda:	4924      	ldr	r1, [pc, #144]	; (11c6c <init_Interrupt_BMP+0x9c>)
   11bdc:	4824      	ldr	r0, [pc, #144]	; (11c70 <init_Interrupt_BMP+0xa0>)
   11bde:	f011 fa48 	bl	23072 <k_work_init>
   11be2:	4d24      	ldr	r5, [pc, #144]	; (11c74 <init_Interrupt_BMP+0xa4>)
   11be4:	4628      	mov	r0, r5
   11be6:	f011 f803 	bl	22bf0 <z_device_is_ready>
    if (!device_is_ready(bmpInt.port)) {
   11bea:	b930      	cbnz	r0, 11bfa <init_Interrupt_BMP+0x2a>
		printk("Error: bmp interrupt %s is not ready\n",
   11bec:	6829      	ldr	r1, [r5, #0]
   11bee:	4822      	ldr	r0, [pc, #136]	; (11c78 <init_Interrupt_BMP+0xa8>)
   11bf0:	f00d fef7 	bl	1f9e2 <printk>
		return 1;
   11bf4:	2401      	movs	r4, #1
}
   11bf6:	4620      	mov	r0, r4
   11bf8:	bd70      	pop	{r4, r5, r6, pc}
	struct gpio_driver_data *data =
   11bfa:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
   11bfc:	68ae      	ldr	r6, [r5, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   11bfe:	6813      	ldr	r3, [r2, #0]
   11c00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   11c04:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   11c06:	2111      	movs	r1, #17
   11c08:	6833      	ldr	r3, [r6, #0]
   11c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11c0e:	4628      	mov	r0, r5
   11c10:	4798      	blx	r3
	returnValue = gpio_pin_configure_dt(&bmpInt, GPIO_INPUT);
   11c12:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11c14:	b134      	cbz	r4, 11c24 <init_Interrupt_BMP+0x54>
		printk("Error %d: failed to configure %s pin %d\n",
   11c16:	682a      	ldr	r2, [r5, #0]
   11c18:	4818      	ldr	r0, [pc, #96]	; (11c7c <init_Interrupt_BMP+0xac>)
   11c1a:	2311      	movs	r3, #17
   11c1c:	4621      	mov	r1, r4
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   11c1e:	f00d fee0 	bl	1f9e2 <printk>
		return returnValue;
   11c22:	e7e8      	b.n	11bf6 <init_Interrupt_BMP+0x26>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   11c24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   11c28:	69b4      	ldr	r4, [r6, #24]
   11c2a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   11c2e:	2111      	movs	r1, #17
   11c30:	4628      	mov	r0, r5
   11c32:	47a0      	blx	r4
	returnValue = gpio_pin_interrupt_configure_dt(&bmpInt,GPIO_INT_EDGE_RISING);
   11c34:	b244      	sxtb	r4, r0
	if (returnValue != 0) {
   11c36:	b124      	cbz	r4, 11c42 <init_Interrupt_BMP+0x72>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
   11c38:	682a      	ldr	r2, [r5, #0]
   11c3a:	4811      	ldr	r0, [pc, #68]	; (11c80 <init_Interrupt_BMP+0xb0>)
   11c3c:	2311      	movs	r3, #17
   11c3e:	4621      	mov	r1, r4
   11c40:	e7ed      	b.n	11c1e <init_Interrupt_BMP+0x4e>
	callback->handler = handler;
   11c42:	4910      	ldr	r1, [pc, #64]	; (11c84 <init_Interrupt_BMP+0xb4>)
   11c44:	4b10      	ldr	r3, [pc, #64]	; (11c88 <init_Interrupt_BMP+0xb8>)
   11c46:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
   11c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   11c4c:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
   11c4e:	69f3      	ldr	r3, [r6, #28]
   11c50:	b113      	cbz	r3, 11c58 <init_Interrupt_BMP+0x88>
	return api->manage_callback(port, callback, true);
   11c52:	2201      	movs	r2, #1
   11c54:	4628      	mov	r0, r5
   11c56:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", bmpInt.port->name, bmpInt.pin);
   11c58:	6829      	ldr	r1, [r5, #0]
   11c5a:	480c      	ldr	r0, [pc, #48]	; (11c8c <init_Interrupt_BMP+0xbc>)
   11c5c:	2211      	movs	r2, #17
   11c5e:	f00d fec0 	bl	1f9e2 <printk>
    return returnValue;
   11c62:	e7c8      	b.n	11bf6 <init_Interrupt_BMP+0x26>
   11c64:	00011a75 	.word	0x00011a75
   11c68:	20001f04 	.word	0x20001f04
   11c6c:	00011cbd 	.word	0x00011cbd
   11c70:	20001ef4 	.word	0x20001ef4
   11c74:	00023970 	.word	0x00023970
   11c78:	00024a16 	.word	0x00024a16
   11c7c:	0002483c 	.word	0x0002483c
   11c80:	00024865 	.word	0x00024865
   11c84:	20001ee8 	.word	0x20001ee8
   11c88:	00011afd 	.word	0x00011afd
   11c8c:	00024a3c 	.word	0x00024a3c

00011c90 <submitConfigBMP>:
	k_work_submit(&work_config);
   11c90:	4801      	ldr	r0, [pc, #4]	; (11c98 <submitConfigBMP+0x8>)
   11c92:	f009 babb 	b.w	1b20c <k_work_submit>
   11c96:	bf00      	nop
   11c98:	20001ef4 	.word	0x20001ef4

00011c9c <sleepBMP>:
extern uint8_t sleepBMP(bool SLEEP){
   11c9c:	b508      	push	{r3, lr}
   11c9e:	4603      	mov	r3, r0
   11ca0:	4805      	ldr	r0, [pc, #20]	; (11cb8 <sleepBMP+0x1c>)
	if(SLEEP){
   11ca2:	b133      	cbz	r3, 11cb2 <sleepBMP+0x16>
		bmp388_dev.settings.op_mode = BMP3_MODE_SLEEP;
   11ca4:	2300      	movs	r3, #0
	}else{
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   11ca6:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		return bmp3_set_op_mode(&bmp388_dev);
   11caa:	f00d fc6b 	bl	1f584 <bmp3_set_op_mode>
   11cae:	b2c0      	uxtb	r0, r0
	}
};
   11cb0:	bd08      	pop	{r3, pc}
		bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL;
   11cb2:	2303      	movs	r3, #3
   11cb4:	e7f7      	b.n	11ca6 <sleepBMP+0xa>
   11cb6:	bf00      	nop
   11cb8:	200017b0 	.word	0x200017b0

00011cbc <setConfigBMP>:
static void setConfigBMP(){
   11cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t oversampling = bmpData.config[1];
   11cbe:	4d1c      	ldr	r5, [pc, #112]	; (11d30 <setConfigBMP+0x74>)
	uint8_t filter = bmpData.config[2];
	uint8_t rate = bmpData.config[3];
	uint16_t settings_sel;

    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11cc0:	4c1c      	ldr	r4, [pc, #112]	; (11d34 <setConfigBMP+0x78>)
	uint8_t oversampling = bmpData.config[1];
   11cc2:	7b68      	ldrb	r0, [r5, #13]
	uint8_t filter = bmpData.config[2];
   11cc4:	7ba9      	ldrb	r1, [r5, #14]
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.press_os = oversampling;
   11cc6:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
        bmp388_dev.settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
    }else {
        bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
    }
    
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11cca:	2000      	movs	r0, #0
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11ccc:	2301      	movs	r3, #1
	uint8_t rate = bmpData.config[3];
   11cce:	7bea      	ldrb	r2, [r5, #15]
    bmp388_dev.settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
   11cd0:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
    bmp388_dev.settings.odr_filter.iir_filter = filter;
   11cd4:	f884 10b5 	strb.w	r1, [r4, #181]	; 0xb5
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
	settings_sel = BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_IIR_FILTER;
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   11cd8:	20f0      	movs	r0, #240	; 0xf0
   11cda:	4621      	mov	r1, r4
    bmp388_dev.settings.press_en = BMP3_ENABLE;
   11cdc:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    bmp388_dev.settings.temp_en = BMP3_ENABLE;
   11ce0:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    bmp388_dev.settings.int_settings.drdy_en =BMP3_ENABLE;
   11ce4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
    bmp388_dev.settings.odr_filter.odr =rate;//BMP3_ODR_25_HZ;
   11ce8:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
    bmpResult = bmp3_set_sensor_settings(settings_sel, &bmp388_dev);           
   11cec:	f7ff fc94 	bl	11618 <bmp3_set_sensor_settings>
   11cf0:	4f11      	ldr	r7, [pc, #68]	; (11d38 <setConfigBMP+0x7c>)
   11cf2:	7038      	strb	r0, [r7, #0]
     if (bmpResult == BMP3_SENSOR_OK){
   11cf4:	b970      	cbnz	r0, 11d14 <setConfigBMP+0x58>
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   11cf6:	2603      	movs	r6, #3
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   11cf8:	4620      	mov	r0, r4
        bmp388_dev.settings.op_mode = BMP3_MODE_NORMAL; 
   11cfa:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
        bmpResult = bmp3_set_op_mode(&bmp388_dev);
   11cfe:	f00d fc41 	bl	1f584 <bmp3_set_op_mode>
   11d02:	7038      	strb	r0, [r7, #0]
        if (bmpResult == BMP3_SENSOR_OK)
   11d04:	b930      	cbnz	r0, 11d14 <setConfigBMP+0x58>
        {
            bmp388_dev.delay_us(40000, bmp388_dev.intf_ptr);
   11d06:	6963      	ldr	r3, [r4, #20]
   11d08:	6861      	ldr	r1, [r4, #4]
   11d0a:	f649 4040 	movw	r0, #40000	; 0x9c40
   11d0e:	4798      	blx	r3
            /* Sensor component selection */
            sensor_comp = BMP3_PRESS | BMP3_TEMP;
   11d10:	4b0a      	ldr	r3, [pc, #40]	; (11d3c <setConfigBMP+0x80>)
   11d12:	701e      	strb	r6, [r3, #0]
	return z_impl_k_sleep(timeout);
   11d14:	f640 40cd 	movw	r0, #3277	; 0xccd
   11d18:	2100      	movs	r1, #0
   11d1a:	f009 fdf1 	bl	1b900 <z_impl_k_sleep>
            /* Temperature and Pressure data are read and stored in the bmp3_data instance */
        }
    }
	
	k_sleep(K_MSEC(100));
	sleepBMP(!bmpData.config[0]);
   11d1e:	7b28      	ldrb	r0, [r5, #12]
   11d20:	fab0 f080 	clz	r0, r0
}
   11d24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	sleepBMP(!bmpData.config[0]);
   11d28:	0940      	lsrs	r0, r0, #5
   11d2a:	f7ff bfb7 	b.w	11c9c <sleepBMP>
   11d2e:	bf00      	nop
   11d30:	20001e68 	.word	0x20001e68
   11d34:	200017b0 	.word	0x200017b0
   11d38:	20003330 	.word	0x20003330
   11d3c:	2000098f 	.word	0x2000098f

00011d40 <mlx_setGain>:
/**
 * Sets the sensor gain to the specified level.
 * @param gain  The gain level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   11d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _gain = gain;
   11d42:	4b0c      	ldr	r3, [pc, #48]	; (11d74 <mlx_setGain+0x34>)
bool mlx_setGain(mlx90393_gain_t gain, struct device *mlx_device_t) {
   11d44:	4605      	mov	r5, r0
   11d46:	460c      	mov	r4, r1
  _gain = gain;
   11d48:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF1, &data, mlx_device_t);
   11d4a:	460a      	mov	r2, r1
   11d4c:	2000      	movs	r0, #0
   11d4e:	f10d 0106 	add.w	r1, sp, #6
   11d52:	f00d fd82 	bl	1f85a <readRegister>

  // mask off gain bits
  data &= ~0x0070;
   11d56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  // set gain bits
  data |= gain << MLX90393_GAIN_SHIFT;
   11d5e:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   11d62:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11d64:	4622      	mov	r2, r4
   11d66:	2000      	movs	r0, #0
  data |= gain << MLX90393_GAIN_SHIFT;
   11d68:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF1, data, mlx_device_t);
   11d6c:	f00d fd5b 	bl	1f826 <writeRegister>
}
   11d70:	b003      	add	sp, #12
   11d72:	bd30      	pop	{r4, r5, pc}
   11d74:	20003332 	.word	0x20003332

00011d78 <mlx_setResolution>:
 * @param axis  The axis to set.
 * @param resolution  The resolution level to set.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setResolution(enum mlx90393_axis axis,
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11d7a:	4606      	mov	r6, r0
   11d7c:	460c      	mov	r4, r1

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11d7e:	2002      	movs	r0, #2
   11d80:	f10d 0106 	add.w	r1, sp, #6
                                      enum mlx90393_resolution resolution, struct device *mlx_device_t) {
   11d84:	4615      	mov	r5, r2
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11d86:	f00d fd68 	bl	1f85a <readRegister>

  switch (axis) {
   11d8a:	2e01      	cmp	r6, #1
   11d8c:	d014      	beq.n	11db8 <mlx_setResolution+0x40>
   11d8e:	2e02      	cmp	r6, #2
   11d90:	d01b      	beq.n	11dca <mlx_setResolution+0x52>
   11d92:	b94e      	cbnz	r6, 11da8 <mlx_setResolution+0x30>
  case MLX90393_X:
    _res_x = resolution;
    data &= ~0x0060;
   11d94:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_x = resolution;
   11d98:	4b10      	ldr	r3, [pc, #64]	; (11ddc <mlx_setResolution+0x64>)
    data &= ~0x0060;
   11d9a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
    _res_x = resolution;
   11d9e:	701c      	strb	r4, [r3, #0]
    data |= resolution << 5;
   11da0:	ea41 1444 	orr.w	r4, r1, r4, lsl #5
    data |= resolution << 7;
    break;
  case MLX90393_Z:
    _res_z = resolution;
    data &= ~0x0600;
    data |= resolution << 9;
   11da4:	f8ad 4006 	strh.w	r4, [sp, #6]
    break;
  }

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11da8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11dac:	462a      	mov	r2, r5
   11dae:	2002      	movs	r0, #2
   11db0:	f00d fd39 	bl	1f826 <writeRegister>
}
   11db4:	b002      	add	sp, #8
   11db6:	bd70      	pop	{r4, r5, r6, pc}
    data &= ~0x0180;
   11db8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_y = resolution;
   11dbc:	4b08      	ldr	r3, [pc, #32]	; (11de0 <mlx_setResolution+0x68>)
    data &= ~0x0180;
   11dbe:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
    _res_y = resolution;
   11dc2:	701c      	strb	r4, [r3, #0]
    data |= resolution << 7;
   11dc4:	ea41 14c4 	orr.w	r4, r1, r4, lsl #7
   11dc8:	e7ec      	b.n	11da4 <mlx_setResolution+0x2c>
    data &= ~0x0600;
   11dca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    _res_z = resolution;
   11dce:	4b05      	ldr	r3, [pc, #20]	; (11de4 <mlx_setResolution+0x6c>)
    data &= ~0x0600;
   11dd0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
    _res_z = resolution;
   11dd4:	701c      	strb	r4, [r3, #0]
    data |= resolution << 9;
   11dd6:	ea41 2444 	orr.w	r4, r1, r4, lsl #9
   11dda:	e7e3      	b.n	11da4 <mlx_setResolution+0x2c>
   11ddc:	20003334 	.word	0x20003334
   11de0:	20003335 	.word	0x20003335
   11de4:	20003336 	.word	0x20003336

00011de8 <mlx_setFilter>:
/**
 * Sets the digital filter.
 * @param filter The digital filter setting.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _dig_filt = filter;
   11dea:	4b0c      	ldr	r3, [pc, #48]	; (11e1c <mlx_setFilter+0x34>)
bool mlx_setFilter(enum mlx90393_filter filter, struct device *mlx_device_t) {
   11dec:	4605      	mov	r5, r0
   11dee:	460c      	mov	r4, r1
  _dig_filt = filter;
   11df0:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11df2:	460a      	mov	r2, r1
   11df4:	2002      	movs	r0, #2
   11df6:	f10d 0106 	add.w	r1, sp, #6
   11dfa:	f00d fd2e 	bl	1f85a <readRegister>

  data &= ~0x1C;
   11dfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11e02:	f023 031c 	bic.w	r3, r3, #28
  data |= filter << 2;
   11e06:	ea43 0085 	orr.w	r0, r3, r5, lsl #2
   11e0a:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11e0c:	4622      	mov	r2, r4
   11e0e:	2002      	movs	r0, #2
  data |= filter << 2;
   11e10:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11e14:	f00d fd07 	bl	1f826 <writeRegister>
}
   11e18:	b003      	add	sp, #12
   11e1a:	bd30      	pop	{r4, r5, pc}
   11e1c:	20003331 	.word	0x20003331

00011e20 <mlx_setOversampling>:
 * Sets the oversampling.
 * @param oversampling The oversampling value to use.
 * @return True if the operation succeeded, otherwise false.
 */
bool mlx_setOversampling(
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   11e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  _osr = oversampling;
   11e22:	4b0c      	ldr	r3, [pc, #48]	; (11e54 <mlx_setOversampling+0x34>)
    enum mlx90393_oversampling oversampling, struct device *mlx_device_t) {
   11e24:	4605      	mov	r5, r0
   11e26:	460c      	mov	r4, r1
  _osr = oversampling;
   11e28:	7018      	strb	r0, [r3, #0]

  uint16_t data;
  readRegister(MLX90393_CONF3, &data, mlx_device_t);
   11e2a:	460a      	mov	r2, r1
   11e2c:	2002      	movs	r0, #2
   11e2e:	f10d 0106 	add.w	r1, sp, #6
   11e32:	f00d fd12 	bl	1f85a <readRegister>

  data &= ~0x03;
   11e36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11e3a:	f023 0303 	bic.w	r3, r3, #3
  data |= oversampling;
   11e3e:	ea43 0005 	orr.w	r0, r3, r5
   11e42:	b281      	uxth	r1, r0

  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11e44:	4622      	mov	r2, r4
   11e46:	2002      	movs	r0, #2
  data |= oversampling;
   11e48:	f8ad 1006 	strh.w	r1, [sp, #6]
  return writeRegister(MLX90393_CONF3, data, mlx_device_t);
   11e4c:	f00d fceb 	bl	1f826 <writeRegister>
}
   11e50:	b003      	add	sp, #12
   11e52:	bd30      	pop	{r4, r5, pc}
   11e54:	20003333 	.word	0x20003333

00011e58 <mlx_readMeasurement>:
 * @param y     Pointer to where the 'y' value should be stored.
 * @param z     Pointer to where the 'z' value should be stored.
 *
 * @return True on command success
 */
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e5c:	b087      	sub	sp, #28
   11e5e:	4690      	mov	r8, r2
  uint8_t tx[1] = {MLX90393_REG_RM | MLX90393_AXIS_ALL};
   11e60:	224e      	movs	r2, #78	; 0x4e
   11e62:	f88d 200c 	strb.w	r2, [sp, #12]
  /* Convert data to uT and float. */
  xi = (rx[0] << 8) | rx[1];
  yi = (rx[2] << 8) | rx[3];
  zi = (rx[4] << 8) | rx[5];

  if (_res_x == MLX90393_RES_18)
   11e66:	4e3c      	ldr	r6, [pc, #240]	; (11f58 <mlx_readMeasurement+0x100>)
  uint8_t rx[6] = {0};
   11e68:	2200      	movs	r2, #0
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11e6a:	e9cd 2300 	strd	r2, r3, [sp]
  uint8_t rx[6] = {0};
   11e6e:	9204      	str	r2, [sp, #16]
   11e70:	f8ad 2014 	strh.w	r2, [sp, #20]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11e74:	2306      	movs	r3, #6
   11e76:	aa04      	add	r2, sp, #16
bool mlx_readMeasurement(float *x, float *y, float *z, struct device *mlx_device_t) {
   11e78:	4683      	mov	fp, r0
   11e7a:	468a      	mov	sl, r1
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {  
   11e7c:	a803      	add	r0, sp, #12
   11e7e:	2101      	movs	r1, #1
   11e80:	f00d fc7e 	bl	1f780 <transceive>
  xi = (rx[0] << 8) | rx[1];
   11e84:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   11e88:	f8bd 5012 	ldrh.w	r5, [sp, #18]
   11e8c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  if (_res_x == MLX90393_RES_18)
   11e90:	7837      	ldrb	r7, [r6, #0]
   11e92:	ba42      	rev16	r2, r0
   11e94:	ba6b      	rev16	r3, r5
   11e96:	ba61      	rev16	r1, r4
   11e98:	2f02      	cmp	r7, #2
   11e9a:	b290      	uxth	r0, r2
  yi = (rx[2] << 8) | rx[3];
   11e9c:	b29d      	uxth	r5, r3
  zi = (rx[4] << 8) | rx[5];
   11e9e:	b28c      	uxth	r4, r1
  if (_res_x == MLX90393_RES_18)
   11ea0:	d103      	bne.n	11eaa <mlx_readMeasurement+0x52>
    xi -= 0x8000;
   11ea2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
  if (_res_x == MLX90393_RES_19)
    xi -= 0x4000;
   11ea6:	b200      	sxth	r0, r0
   11ea8:	e002      	b.n	11eb0 <mlx_readMeasurement+0x58>
  if (_res_x == MLX90393_RES_19)
   11eaa:	2f03      	cmp	r7, #3
   11eac:	d008      	beq.n	11ec0 <mlx_readMeasurement+0x68>
   11eae:	b210      	sxth	r0, r2
  if (_res_y == MLX90393_RES_18)
   11eb0:	4a2a      	ldr	r2, [pc, #168]	; (11f5c <mlx_readMeasurement+0x104>)
   11eb2:	7816      	ldrb	r6, [r2, #0]
   11eb4:	2e02      	cmp	r6, #2
   11eb6:	d106      	bne.n	11ec6 <mlx_readMeasurement+0x6e>
    yi -= 0x8000;
   11eb8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
  if (_res_y == MLX90393_RES_19)
    yi -= 0x4000;
   11ebc:	b22d      	sxth	r5, r5
   11ebe:	e005      	b.n	11ecc <mlx_readMeasurement+0x74>
    xi -= 0x4000;
   11ec0:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   11ec4:	e7ef      	b.n	11ea6 <mlx_readMeasurement+0x4e>
  if (_res_y == MLX90393_RES_19)
   11ec6:	2e03      	cmp	r6, #3
   11ec8:	d008      	beq.n	11edc <mlx_readMeasurement+0x84>
   11eca:	b21d      	sxth	r5, r3
  if (_res_z == MLX90393_RES_18)
   11ecc:	4b24      	ldr	r3, [pc, #144]	; (11f60 <mlx_readMeasurement+0x108>)
   11ece:	781e      	ldrb	r6, [r3, #0]
   11ed0:	2e02      	cmp	r6, #2
   11ed2:	d106      	bne.n	11ee2 <mlx_readMeasurement+0x8a>
    zi -= 0x8000;
   11ed4:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
  if (_res_z == MLX90393_RES_19)
    zi -= 0x4000;
   11ed8:	b224      	sxth	r4, r4
   11eda:	e005      	b.n	11ee8 <mlx_readMeasurement+0x90>
    yi -= 0x4000;
   11edc:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   11ee0:	e7ec      	b.n	11ebc <mlx_readMeasurement+0x64>
  if (_res_z == MLX90393_RES_19)
   11ee2:	2e03      	cmp	r6, #3
   11ee4:	d035      	beq.n	11f52 <mlx_readMeasurement+0xfa>
   11ee6:	b20c      	sxth	r4, r1

  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   11ee8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 11f64 <mlx_readMeasurement+0x10c>
   11eec:	4e1e      	ldr	r6, [pc, #120]	; (11f68 <mlx_readMeasurement+0x110>)
   11eee:	f899 1000 	ldrb.w	r1, [r9]
   11ef2:	eb07 0781 	add.w	r7, r7, r1, lsl #2
   11ef6:	f7ee ff17 	bl	d28 <__aeabi_i2f>
   11efa:	4601      	mov	r1, r0
   11efc:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
   11f00:	f7ee f8fe 	bl	100 <__aeabi_fmul>
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11f04:	4a15      	ldr	r2, [pc, #84]	; (11f5c <mlx_readMeasurement+0x104>)
  *x = (float)xi * mlx90393_lsb_lookup[0][_gain][_res_x][0];
   11f06:	f8cb 0000 	str.w	r0, [fp]
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11f0a:	7817      	ldrb	r7, [r2, #0]
   11f0c:	f899 1000 	ldrb.w	r1, [r9]
   11f10:	4628      	mov	r0, r5
   11f12:	eb07 0781 	add.w	r7, r7, r1, lsl #2
   11f16:	f7ee ff07 	bl	d28 <__aeabi_i2f>
   11f1a:	4601      	mov	r1, r0
   11f1c:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
   11f20:	f7ee f8ee 	bl	100 <__aeabi_fmul>
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   11f24:	4b0e      	ldr	r3, [pc, #56]	; (11f60 <mlx_readMeasurement+0x108>)
  *y = (float)yi * mlx90393_lsb_lookup[0][_gain][_res_y][0];
   11f26:	f8ca 0000 	str.w	r0, [sl]
  *z = (float)zi * mlx90393_lsb_lookup[0][_gain][_res_z][1];
   11f2a:	f899 2000 	ldrb.w	r2, [r9]
   11f2e:	781b      	ldrb	r3, [r3, #0]
   11f30:	4620      	mov	r0, r4
   11f32:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   11f36:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   11f3a:	f7ee fef5 	bl	d28 <__aeabi_i2f>
   11f3e:	4601      	mov	r1, r0
   11f40:	6870      	ldr	r0, [r6, #4]
   11f42:	f7ee f8dd 	bl	100 <__aeabi_fmul>
   11f46:	f8c8 0000 	str.w	r0, [r8]

  return true;
}
   11f4a:	2001      	movs	r0, #1
   11f4c:	b007      	add	sp, #28
   11f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    zi -= 0x4000;
   11f52:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   11f56:	e7bf      	b.n	11ed8 <mlx_readMeasurement+0x80>
   11f58:	20003334 	.word	0x20003334
   11f5c:	20003335 	.word	0x20003335
   11f60:	20003336 	.word	0x20003336
   11f64:	20003332 	.word	0x20003332
   11f68:	00023e34 	.word	0x00023e34

00011f6c <main>:
        while(1){};
    }
}

void main(void)
{
   11f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	printk("Hello World %s\n", CONFIG_BOARD);
   11f6e:	4936      	ldr	r1, [pc, #216]	; (12048 <main+0xdc>)
   11f70:	4836      	ldr	r0, [pc, #216]	; (1204c <main+0xe0>)
   11f72:	f00d fd36 	bl	1f9e2 <printk>
   11f76:	4836      	ldr	r0, [pc, #216]	; (12050 <main+0xe4>)
   11f78:	f008 fcc2 	bl	1a900 <z_impl_device_get_binding>
	//k_work_init(&some_work, btn1_handle);
	

	struct device *i2c_dev;
	i2c_dev = device_get_binding("myi2c");
	if (!i2c_dev) {
   11f7c:	4604      	mov	r4, r0
   11f7e:	b928      	cbnz	r0, 11f8c <main+0x20>
		printk("I2C: Device driver not found.\n");
   11f80:	4834      	ldr	r0, [pc, #208]	; (12054 <main+0xe8>)
		iTemp = read_temperature();

		printk("The temperature is now : \n%d from method 1\n%d from method 2\n%d from method 3\n\n", (int)fTemp1, (int)fTemp2, iTemp);
	}

}
   11f82:	b003      	add	sp, #12
   11f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("I2C: Device driver not found.\n");
   11f88:	f00d bd2b 	b.w	1f9e2 <printk>
	error = init_Interrupt_BMP();
   11f8c:	f7ff fe20 	bl	11bd0 <init_Interrupt_BMP>
   11f90:	4d31      	ldr	r5, [pc, #196]	; (12058 <main+0xec>)
   11f92:	7028      	strb	r0, [r5, #0]
	error = initBMP384(i2c_dev);
   11f94:	4620      	mov	r0, r4
   11f96:	f7ff fdb7 	bl	11b08 <initBMP384>
   11f9a:	7028      	strb	r0, [r5, #0]
	initMLX(i2c_dev);
   11f9c:	4620      	mov	r0, r4
   11f9e:	f7ff fa8b 	bl	114b8 <initMLX>
	init_Interrupt_MLX();
   11fa2:	f7ff fa93 	bl	114cc <init_Interrupt_MLX>
   11fa6:	2100      	movs	r1, #0
   11fa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11fac:	f009 fca8 	bl	1b900 <z_impl_k_sleep>
	initBLE();
   11fb0:	f7ff fa16 	bl	113e0 <initBLE>
	printk("start imu\n");
   11fb4:	4829      	ldr	r0, [pc, #164]	; (1205c <main+0xf0>)
   11fb6:	f00d fd14 	bl	1f9e2 <printk>
	initIMU(i2c_dev,AFS_2G, GFS_15_125DPS, AODR_25Hz, GODR_25Hz);
   11fba:	230a      	movs	r3, #10
   11fbc:	9300      	str	r3, [sp, #0]
   11fbe:	2207      	movs	r2, #7
   11fc0:	4620      	mov	r0, r4
   11fc2:	2103      	movs	r1, #3
   11fc4:	f7ff f884 	bl	110d0 <initIMU>
	setState(0,0); //disable 0,0 enable 1,1
   11fc8:	2100      	movs	r1, #0
   11fca:	4608      	mov	r0, r1
   11fcc:	f00d f8ad 	bl	1f12a <setState>
   11fd0:	2100      	movs	r1, #0
   11fd2:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   11fd6:	f009 fc93 	bl	1b900 <z_impl_k_sleep>
	ds18b20_setResolution(12);
   11fda:	200c      	movs	r0, #12
   11fdc:	f00d f828 	bl	1f030 <ds18b20_setResolution>
	fTemp1 = ds18b20_get_temp();	// Method 1 (from sd18b20.c)
   11fe0:	f00c fffd 	bl	1efde <ds18b20_get_temp>
   11fe4:	4605      	mov	r5, r0
   11fe6:	2100      	movs	r1, #0
   11fe8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11fec:	f009 fc88 	bl	1b900 <z_impl_k_sleep>
	printk("Hello World! %s\nTemperature is :\n%d from method 1\n%d from method 2\n%d from method 3\n\n", CONFIG_BOARD, (int)fTemp1, (int)fTemp2, iTemp);
   11ff0:	2000      	movs	r0, #0
   11ff2:	f7ee feed 	bl	dd0 <__aeabi_f2iz>
   11ff6:	4604      	mov	r4, r0
   11ff8:	4628      	mov	r0, r5
   11ffa:	f7ee fee9 	bl	dd0 <__aeabi_f2iz>
   11ffe:	2300      	movs	r3, #0
   12000:	4602      	mov	r2, r0
   12002:	9300      	str	r3, [sp, #0]
   12004:	4910      	ldr	r1, [pc, #64]	; (12048 <main+0xdc>)
   12006:	4816      	ldr	r0, [pc, #88]	; (12060 <main+0xf4>)
		printk("The temperature is now : \n%d from method 1\n%d from method 2\n%d from method 3\n\n", (int)fTemp1, (int)fTemp2, iTemp);
   12008:	4f16      	ldr	r7, [pc, #88]	; (12064 <main+0xf8>)
	printk("Hello World! %s\nTemperature is :\n%d from method 1\n%d from method 2\n%d from method 3\n\n", CONFIG_BOARD, (int)fTemp1, (int)fTemp2, iTemp);
   1200a:	4623      	mov	r3, r4
   1200c:	f00d fce9 	bl	1f9e2 <printk>
   12010:	2100      	movs	r1, #0
   12012:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   12016:	f009 fc73 	bl	1b900 <z_impl_k_sleep>
		fTemp1 = ds18b20_get_temp();
   1201a:	f00c ffe0 	bl	1efde <ds18b20_get_temp>
   1201e:	4606      	mov	r6, r0
		fTemp2 = ds18b20_get_temp();
   12020:	f00c ffdd 	bl	1efde <ds18b20_get_temp>
   12024:	4604      	mov	r4, r0
		iTemp = read_temperature();
   12026:	f7fe ff7f 	bl	10f28 <read_temperature>
   1202a:	4605      	mov	r5, r0
		printk("The temperature is now : \n%d from method 1\n%d from method 2\n%d from method 3\n\n", (int)fTemp1, (int)fTemp2, iTemp);
   1202c:	4620      	mov	r0, r4
   1202e:	f7ee fecf 	bl	dd0 <__aeabi_f2iz>
   12032:	4604      	mov	r4, r0
   12034:	4630      	mov	r0, r6
   12036:	f7ee fecb 	bl	dd0 <__aeabi_f2iz>
   1203a:	462b      	mov	r3, r5
   1203c:	4601      	mov	r1, r0
   1203e:	4622      	mov	r2, r4
   12040:	4638      	mov	r0, r7
   12042:	f00d fcce 	bl	1f9e2 <printk>
	while (1)
   12046:	e7e3      	b.n	12010 <main+0xa4>
   12048:	00024a58 	.word	0x00024a58
   1204c:	00024a6a 	.word	0x00024a6a
   12050:	00024a7a 	.word	0x00024a7a
   12054:	00024a80 	.word	0x00024a80
   12058:	20003337 	.word	0x20003337
   1205c:	00024a9f 	.word	0x00024a9f
   12060:	00024aaa 	.word	0x00024aaa
   12064:	00024b00 	.word	0x00024b00

00012068 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12068:	680b      	ldr	r3, [r1, #0]
   1206a:	3301      	adds	r3, #1
   1206c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1206e:	4b01      	ldr	r3, [pc, #4]	; (12074 <char_out+0xc>)
   12070:	681b      	ldr	r3, [r3, #0]
   12072:	4718      	bx	r3
   12074:	200005cc 	.word	0x200005cc

00012078 <__printk_hook_install>:
	_char_out = fn;
   12078:	4b01      	ldr	r3, [pc, #4]	; (12080 <__printk_hook_install+0x8>)
   1207a:	6018      	str	r0, [r3, #0]
}
   1207c:	4770      	bx	lr
   1207e:	bf00      	nop
   12080:	200005cc 	.word	0x200005cc

00012084 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   12084:	b507      	push	{r0, r1, r2, lr}
   12086:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   12088:	2100      	movs	r1, #0
{
   1208a:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   1208c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   1208e:	4803      	ldr	r0, [pc, #12]	; (1209c <vprintk+0x18>)
   12090:	a901      	add	r1, sp, #4
   12092:	f000 f945 	bl	12320 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   12096:	b003      	add	sp, #12
   12098:	f85d fb04 	ldr.w	pc, [sp], #4
   1209c:	00012069 	.word	0x00012069

000120a0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   120a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120a4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   120a8:	f019 0808 	ands.w	r8, r9, #8
{
   120ac:	4604      	mov	r4, r0
   120ae:	4693      	mov	fp, r2
	if (processing) {
   120b0:	d00d      	beq.n	120ce <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   120b2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   120b4:	bf0c      	ite	eq
   120b6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   120ba:	f049 0920 	orrne.w	r9, r9, #32
   120be:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   120c2:	f38b 8811 	msr	BASEPRI, fp
   120c6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   120ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120ce:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   120d2:	2902      	cmp	r1, #2
   120d4:	d107      	bne.n	120e6 <process_event+0x46>
			evt = process_recheck(mgr);
   120d6:	4620      	mov	r0, r4
   120d8:	f00d fc90 	bl	1f9fc <process_recheck>
		if (evt == EVT_NOP) {
   120dc:	2800      	cmp	r0, #0
   120de:	d0f0      	beq.n	120c2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   120e0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   120e2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   120e4:	d14e      	bne.n	12184 <process_event+0xe4>
			res = mgr->last_res;
   120e6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   120e8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   120ea:	2f00      	cmp	r7, #0
   120ec:	da15      	bge.n	1211a <process_event+0x7a>
		*clients = mgr->clients;
   120ee:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   120f0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   120f4:	e9c4 8800 	strd	r8, r8, [r4]
   120f8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   120fc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   120fe:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12100:	8b21      	ldrh	r1, [r4, #24]
   12102:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12106:	45ca      	cmp	sl, r9
   12108:	d002      	beq.n	12110 <process_event+0x70>
		if (do_monitors
   1210a:	68a3      	ldr	r3, [r4, #8]
   1210c:	2b00      	cmp	r3, #0
   1210e:	d15a      	bne.n	121c6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   12110:	b90d      	cbnz	r5, 12116 <process_event+0x76>
		    || (transit != NULL)) {
   12112:	2e00      	cmp	r6, #0
   12114:	d071      	beq.n	121fa <process_event+0x15a>
   12116:	2300      	movs	r3, #0
   12118:	e056      	b.n	121c8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1211a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1211e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12120:	2a01      	cmp	r2, #1
   12122:	d81e      	bhi.n	12162 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12124:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   12128:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1212a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1212c:	b289      	uxth	r1, r1
   1212e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12132:	d10a      	bne.n	1214a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12134:	b13d      	cbz	r5, 12146 <process_event+0xa6>
   12136:	8b63      	ldrh	r3, [r4, #26]
   12138:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1213a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   1213c:	3301      	adds	r3, #1
   1213e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12140:	2a00      	cmp	r2, #0
   12142:	d1fa      	bne.n	1213a <process_event+0x9a>
   12144:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12146:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1214a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1214c:	4620      	mov	r0, r4
   1214e:	f00d fc55 	bl	1f9fc <process_recheck>
   12152:	4606      	mov	r6, r0
   12154:	2800      	cmp	r0, #0
   12156:	d0d3      	beq.n	12100 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12158:	8b23      	ldrh	r3, [r4, #24]
   1215a:	f043 0320 	orr.w	r3, r3, #32
   1215e:	8323      	strh	r3, [r4, #24]
   12160:	e7cd      	b.n	120fe <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12162:	2b04      	cmp	r3, #4
   12164:	d10c      	bne.n	12180 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12166:	f021 0107 	bic.w	r1, r1, #7
   1216a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1216c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1216e:	4620      	mov	r0, r4
   12170:	f00d fc44 	bl	1f9fc <process_recheck>
   12174:	4605      	mov	r5, r0
   12176:	2800      	cmp	r0, #0
   12178:	d0c1      	beq.n	120fe <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1217a:	f041 0120 	orr.w	r1, r1, #32
   1217e:	8321      	strh	r1, [r4, #24]
   12180:	2500      	movs	r5, #0
   12182:	e7bc      	b.n	120fe <process_event+0x5e>
		} else if (evt == EVT_START) {
   12184:	2803      	cmp	r0, #3
   12186:	d109      	bne.n	1219c <process_event+0xfc>
			transit = mgr->transitions->start;
   12188:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1218a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1218e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12190:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12194:	8323      	strh	r3, [r4, #24]
}
   12196:	2500      	movs	r5, #0
		res = 0;
   12198:	462f      	mov	r7, r5
   1219a:	e7b1      	b.n	12100 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   1219c:	2804      	cmp	r0, #4
   1219e:	d106      	bne.n	121ae <process_event+0x10e>
			transit = mgr->transitions->stop;
   121a0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121a2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   121a6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121a8:	f043 0304 	orr.w	r3, r3, #4
   121ac:	e7f2      	b.n	12194 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   121ae:	2805      	cmp	r0, #5
   121b0:	d106      	bne.n	121c0 <process_event+0x120>
			transit = mgr->transitions->reset;
   121b2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121b4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   121b8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121ba:	f043 0305 	orr.w	r3, r3, #5
   121be:	e7e9      	b.n	12194 <process_event+0xf4>
   121c0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   121c2:	462e      	mov	r6, r5
   121c4:	e7e8      	b.n	12198 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   121c6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   121c8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   121cc:	8321      	strh	r1, [r4, #24]
   121ce:	f38b 8811 	msr	BASEPRI, fp
   121d2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   121d6:	b9fb      	cbnz	r3, 12218 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   121d8:	bb85      	cbnz	r5, 1223c <process_event+0x19c>
			if (transit != NULL) {
   121da:	b116      	cbz	r6, 121e2 <process_event+0x142>
				transit(mgr, transition_complete);
   121dc:	491f      	ldr	r1, [pc, #124]	; (1225c <process_event+0x1bc>)
   121de:	4620      	mov	r0, r4
   121e0:	47b0      	blx	r6
	__asm__ volatile(
   121e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   121e6:	f3ef 8b11 	mrs	fp, BASEPRI
   121ea:	f383 8812 	msr	BASEPRI_MAX, r3
   121ee:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   121f2:	8b23      	ldrh	r3, [r4, #24]
   121f4:	f023 0308 	bic.w	r3, r3, #8
   121f8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   121fa:	8b23      	ldrh	r3, [r4, #24]
   121fc:	06da      	lsls	r2, r3, #27
   121fe:	d525      	bpl.n	1224c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12200:	f023 0310 	bic.w	r3, r3, #16
   12204:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   12206:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   12208:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1220c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   12210:	2900      	cmp	r1, #0
   12212:	f47f af5e 	bne.w	120d2 <process_event+0x32>
out:
   12216:	e754      	b.n	120c2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12218:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1221a:	2900      	cmp	r1, #0
   1221c:	d0dc      	beq.n	121d8 <process_event+0x138>
	return node->next;
   1221e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   12222:	f8d1 b004 	ldr.w	fp, [r1, #4]
   12226:	463b      	mov	r3, r7
   12228:	4652      	mov	r2, sl
   1222a:	4620      	mov	r0, r4
   1222c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1222e:	f1b9 0f00 	cmp.w	r9, #0
   12232:	d0d1      	beq.n	121d8 <process_event+0x138>
   12234:	4649      	mov	r1, r9
   12236:	f8d9 9000 	ldr.w	r9, [r9]
   1223a:	e7f2      	b.n	12222 <process_event+0x182>
   1223c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1223e:	463b      	mov	r3, r7
   12240:	4652      	mov	r2, sl
   12242:	4620      	mov	r0, r4
   12244:	682d      	ldr	r5, [r5, #0]
   12246:	f00d fbf5 	bl	1fa34 <notify_one>
   1224a:	e7c5      	b.n	121d8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1224c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12250:	bf1e      	ittt	ne
   12252:	f023 0320 	bicne.w	r3, r3, #32
   12256:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   12258:	2102      	movne	r1, #2
   1225a:	e7d5      	b.n	12208 <process_event+0x168>
   1225c:	0001fa61 	.word	0x0001fa61

00012260 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   12260:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   12262:	4e08      	ldr	r6, [pc, #32]	; (12284 <extract_decimal+0x24>)
   12264:	6802      	ldr	r2, [r0, #0]
{
   12266:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
   12268:	270a      	movs	r7, #10
	size_t val = 0;
   1226a:	2000      	movs	r0, #0
   1226c:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
   1226e:	3201      	adds	r2, #1
   12270:	780c      	ldrb	r4, [r1, #0]
   12272:	5da5      	ldrb	r5, [r4, r6]
   12274:	076d      	lsls	r5, r5, #29
   12276:	d401      	bmi.n	1227c <extract_decimal+0x1c>
	}
	*str = sp;
   12278:	6019      	str	r1, [r3, #0]
	return val;
}
   1227a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   1227c:	fb07 4000 	mla	r0, r7, r0, r4
   12280:	3830      	subs	r0, #48	; 0x30
   12282:	e7f3      	b.n	1226c <extract_decimal+0xc>
   12284:	00024f28 	.word	0x00024f28

00012288 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   12288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1228c:	4615      	mov	r5, r2
   1228e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   12290:	78d3      	ldrb	r3, [r2, #3]
   12292:	4a22      	ldr	r2, [pc, #136]	; (1231c <encode_uint+0x94>)
   12294:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
   12298:	2b6f      	cmp	r3, #111	; 0x6f
{
   1229a:	4680      	mov	r8, r0
   1229c:	460f      	mov	r7, r1
   1229e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   122a2:	d029      	beq.n	122f8 <encode_uint+0x70>
   122a4:	d824      	bhi.n	122f0 <encode_uint+0x68>
		return 16;
   122a6:	2b58      	cmp	r3, #88	; 0x58
   122a8:	bf14      	ite	ne
   122aa:	260a      	movne	r6, #10
   122ac:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   122ae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   122b2:	4632      	mov	r2, r6
   122b4:	2300      	movs	r3, #0
   122b6:	4640      	mov	r0, r8
   122b8:	4639      	mov	r1, r7
   122ba:	f7ee fdcf 	bl	e5c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   122be:	2a09      	cmp	r2, #9
   122c0:	b2d4      	uxtb	r4, r2
   122c2:	d81e      	bhi.n	12302 <encode_uint+0x7a>
   122c4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   122c6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   122c8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   122ca:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   122ce:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   122d2:	d301      	bcc.n	122d8 <encode_uint+0x50>
   122d4:	45d1      	cmp	r9, sl
   122d6:	d811      	bhi.n	122fc <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   122d8:	782b      	ldrb	r3, [r5, #0]
   122da:	069b      	lsls	r3, r3, #26
   122dc:	d505      	bpl.n	122ea <encode_uint+0x62>
		if (radix == 8) {
   122de:	2e08      	cmp	r6, #8
   122e0:	d115      	bne.n	1230e <encode_uint+0x86>
			conv->altform_0 = true;
   122e2:	78ab      	ldrb	r3, [r5, #2]
   122e4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   122e8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
   122ea:	4648      	mov	r0, r9
   122ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   122f0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   122f4:	2b70      	cmp	r3, #112	; 0x70
   122f6:	e7d7      	b.n	122a8 <encode_uint+0x20>
	switch (specifier) {
   122f8:	2608      	movs	r6, #8
   122fa:	e7d8      	b.n	122ae <encode_uint+0x26>
		value /= radix;
   122fc:	4680      	mov	r8, r0
   122fe:	460f      	mov	r7, r1
   12300:	e7d7      	b.n	122b2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12302:	f1bb 0f01 	cmp.w	fp, #1
   12306:	bf0c      	ite	eq
   12308:	3437      	addeq	r4, #55	; 0x37
   1230a:	3457      	addne	r4, #87	; 0x57
   1230c:	e7db      	b.n	122c6 <encode_uint+0x3e>
		} else if (radix == 16) {
   1230e:	2e10      	cmp	r6, #16
   12310:	d1eb      	bne.n	122ea <encode_uint+0x62>
			conv->altform_0c = true;
   12312:	78ab      	ldrb	r3, [r5, #2]
   12314:	f043 0310 	orr.w	r3, r3, #16
   12318:	e7e6      	b.n	122e8 <encode_uint+0x60>
   1231a:	bf00      	nop
   1231c:	00024f28 	.word	0x00024f28

00012320 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   12320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12324:	4681      	mov	r9, r0
   12326:	b09b      	sub	sp, #108	; 0x6c
   12328:	468a      	mov	sl, r1
   1232a:	4615      	mov	r5, r2
   1232c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1232e:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12330:	7828      	ldrb	r0, [r5, #0]
   12332:	b910      	cbnz	r0, 1233a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12334:	4630      	mov	r0, r6
   12336:	f000 bdc5 	b.w	12ec4 <cbvprintf+0xba4>
			OUTC(*fp++);
   1233a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
   1233c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1233e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   12340:	d006      	beq.n	12350 <cbvprintf+0x30>
			OUTC(*fp++);
   12342:	4651      	mov	r1, sl
			OUTC('%');
   12344:	47c8      	blx	r9
   12346:	2800      	cmp	r0, #0
   12348:	f2c0 85bc 	blt.w	12ec4 <cbvprintf+0xba4>
   1234c:	3601      	adds	r6, #1
		if (bps == NULL) {
   1234e:	e226      	b.n	1279e <cbvprintf+0x47e>
		} state = {
   12350:	2218      	movs	r2, #24
   12352:	2100      	movs	r1, #0
   12354:	a80c      	add	r0, sp, #48	; 0x30
   12356:	f011 fa45 	bl	237e4 <memset>
	if (*sp == '%') {
   1235a:	786b      	ldrb	r3, [r5, #1]
   1235c:	2b25      	cmp	r3, #37	; 0x25
   1235e:	d059      	beq.n	12414 <cbvprintf+0xf4>
   12360:	1c6a      	adds	r2, r5, #1
   12362:	4617      	mov	r7, r2
		switch (*sp) {
   12364:	f812 3b01 	ldrb.w	r3, [r2], #1
   12368:	2b2b      	cmp	r3, #43	; 0x2b
   1236a:	f000 808b 	beq.w	12484 <cbvprintf+0x164>
   1236e:	d879      	bhi.n	12464 <cbvprintf+0x144>
   12370:	2b20      	cmp	r3, #32
   12372:	f000 808c 	beq.w	1248e <cbvprintf+0x16e>
   12376:	2b23      	cmp	r3, #35	; 0x23
   12378:	f000 808e 	beq.w	12498 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
   1237c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12380:	f003 0244 	and.w	r2, r3, #68	; 0x44
   12384:	2a44      	cmp	r2, #68	; 0x44
   12386:	d103      	bne.n	12390 <cbvprintf+0x70>
		conv->flag_zero = false;
   12388:	f36f 1386 	bfc	r3, #6, #1
   1238c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   12390:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12394:	970a      	str	r7, [sp, #40]	; 0x28
   12396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1239a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1239e:	783b      	ldrb	r3, [r7, #0]
   123a0:	2b2a      	cmp	r3, #42	; 0x2a
   123a2:	d17e      	bne.n	124a2 <cbvprintf+0x182>
		conv->width_star = true;
   123a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   123a8:	f043 0301 	orr.w	r3, r3, #1
   123ac:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   123b0:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
   123b2:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   123b4:	781a      	ldrb	r2, [r3, #0]
   123b6:	2a2e      	cmp	r2, #46	; 0x2e
   123b8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   123bc:	bf0c      	ite	eq
   123be:	2101      	moveq	r1, #1
   123c0:	2100      	movne	r1, #0
   123c2:	f361 0241 	bfi	r2, r1, #1, #1
   123c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   123ca:	d10b      	bne.n	123e4 <cbvprintf+0xc4>
	++sp;
   123cc:	1c5a      	adds	r2, r3, #1
   123ce:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   123d0:	785a      	ldrb	r2, [r3, #1]
   123d2:	2a2a      	cmp	r2, #42	; 0x2a
   123d4:	d17b      	bne.n	124ce <cbvprintf+0x1ae>
		conv->prec_star = true;
   123d6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   123da:	f042 0204 	orr.w	r2, r2, #4
   123de:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   123e2:	3302      	adds	r3, #2
	switch (*sp) {
   123e4:	461a      	mov	r2, r3
   123e6:	f812 0b01 	ldrb.w	r0, [r2], #1
   123ea:	286c      	cmp	r0, #108	; 0x6c
   123ec:	f000 80cf 	beq.w	1258e <cbvprintf+0x26e>
   123f0:	d87d      	bhi.n	124ee <cbvprintf+0x1ce>
   123f2:	2868      	cmp	r0, #104	; 0x68
   123f4:	f000 8084 	beq.w	12500 <cbvprintf+0x1e0>
   123f8:	286a      	cmp	r0, #106	; 0x6a
   123fa:	f000 80d2 	beq.w	125a2 <cbvprintf+0x282>
   123fe:	284c      	cmp	r0, #76	; 0x4c
   12400:	f000 80d6 	beq.w	125b0 <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
   12404:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   12408:	f36f 02c6 	bfc	r2, #3, #4
   1240c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   12410:	461a      	mov	r2, r3
   12412:	e080      	b.n	12516 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
   12414:	1caa      	adds	r2, r5, #2
   12416:	9202      	str	r2, [sp, #8]
   12418:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1241c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12420:	07df      	lsls	r7, r3, #31
   12422:	f140 8170 	bpl.w	12706 <cbvprintf+0x3e6>
			width = va_arg(ap, int);
   12426:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
   1242a:	f1bb 0f00 	cmp.w	fp, #0
   1242e:	da07      	bge.n	12440 <cbvprintf+0x120>
				conv->flag_dash = true;
   12430:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   12434:	f042 0204 	orr.w	r2, r2, #4
   12438:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1243c:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
   12440:	0758      	lsls	r0, r3, #29
   12442:	f140 8169 	bpl.w	12718 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
   12446:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1244a:	f1b8 0f00 	cmp.w	r8, #0
   1244e:	f280 8168 	bge.w	12722 <cbvprintf+0x402>
				conv->prec_present = false;
   12452:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   12456:	f36f 0341 	bfc	r3, #1, #1
   1245a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1245e:	f04f 38ff 	mov.w	r8, #4294967295
   12462:	e15e      	b.n	12722 <cbvprintf+0x402>
		switch (*sp) {
   12464:	2b2d      	cmp	r3, #45	; 0x2d
   12466:	d006      	beq.n	12476 <cbvprintf+0x156>
   12468:	2b30      	cmp	r3, #48	; 0x30
   1246a:	d187      	bne.n	1237c <cbvprintf+0x5c>
			conv->flag_zero = true;
   1246c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12474:	e003      	b.n	1247e <cbvprintf+0x15e>
			conv->flag_dash = true;
   12476:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1247a:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1247e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   12482:	e76e      	b.n	12362 <cbvprintf+0x42>
			conv->flag_plus = true;
   12484:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12488:	f043 0308 	orr.w	r3, r3, #8
   1248c:	e7f7      	b.n	1247e <cbvprintf+0x15e>
			conv->flag_space = true;
   1248e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12492:	f043 0310 	orr.w	r3, r3, #16
   12496:	e7f2      	b.n	1247e <cbvprintf+0x15e>
			conv->flag_hash = true;
   12498:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1249c:	f043 0320 	orr.w	r3, r3, #32
   124a0:	e7ed      	b.n	1247e <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
   124a2:	a80a      	add	r0, sp, #40	; 0x28
   124a4:	f7ff fedc 	bl	12260 <extract_decimal>
	if (sp != wp) {
   124a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124aa:	42bb      	cmp	r3, r7
   124ac:	d081      	beq.n	123b2 <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
   124ae:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   124b2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   124b4:	f3c1 0240 	ubfx	r2, r1, #1, #1
   124b8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   124bc:	0052      	lsls	r2, r2, #1
   124be:	f062 027f 	orn	r2, r2, #127	; 0x7f
   124c2:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   124c6:	430a      	orrs	r2, r1
   124c8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   124cc:	e771      	b.n	123b2 <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
   124ce:	a80a      	add	r0, sp, #40	; 0x28
   124d0:	f7ff fec6 	bl	12260 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   124d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   124d8:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   124da:	f3c3 0240 	ubfx	r2, r3, #1, #1
   124de:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   124e2:	f360 0341 	bfi	r3, r0, #1, #1
   124e6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   124ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124ec:	e77a      	b.n	123e4 <cbvprintf+0xc4>
	switch (*sp) {
   124ee:	2874      	cmp	r0, #116	; 0x74
   124f0:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   124f4:	d059      	beq.n	125aa <cbvprintf+0x28a>
   124f6:	287a      	cmp	r0, #122	; 0x7a
   124f8:	d184      	bne.n	12404 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
   124fa:	460b      	mov	r3, r1
   124fc:	2106      	movs	r1, #6
   124fe:	e041      	b.n	12584 <cbvprintf+0x264>
		if (*++sp == 'h') {
   12500:	7859      	ldrb	r1, [r3, #1]
   12502:	2968      	cmp	r1, #104	; 0x68
   12504:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   12508:	d13a      	bne.n	12580 <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
   1250a:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
   1250c:	f362 01c6 	bfi	r1, r2, #3, #4
   12510:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
   12514:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
   12516:	4613      	mov	r3, r2
   12518:	f813 2b01 	ldrb.w	r2, [r3], #1
   1251c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   1251e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   12520:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   12524:	f200 80c5 	bhi.w	126b2 <cbvprintf+0x392>
   12528:	2a57      	cmp	r2, #87	; 0x57
   1252a:	d84e      	bhi.n	125ca <cbvprintf+0x2aa>
   1252c:	2a41      	cmp	r2, #65	; 0x41
   1252e:	d004      	beq.n	1253a <cbvprintf+0x21a>
   12530:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   12534:	2b02      	cmp	r3, #2
   12536:	f200 80bc 	bhi.w	126b2 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
   1253a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   1253e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   12542:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   12544:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   12548:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   1254c:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
   12550:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
   12554:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   12558:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
   1255c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   12560:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   12562:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
   12566:	b2cb      	uxtb	r3, r1
   12568:	f100 80cb 	bmi.w	12702 <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
   1256c:	f003 0278 	and.w	r2, r3, #120	; 0x78
   12570:	2a18      	cmp	r2, #24
   12572:	f040 809b 	bne.w	126ac <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
   12576:	f36f 03c6 	bfc	r3, #3, #4
   1257a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1257e:	e082      	b.n	12686 <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
   12580:	460b      	mov	r3, r1
   12582:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
   12584:	f361 03c6 	bfi	r3, r1, #3, #4
   12588:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1258c:	e7c3      	b.n	12516 <cbvprintf+0x1f6>
		if (*++sp == 'l') {
   1258e:	7859      	ldrb	r1, [r3, #1]
   12590:	296c      	cmp	r1, #108	; 0x6c
   12592:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   12596:	d101      	bne.n	1259c <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
   12598:	2204      	movs	r2, #4
   1259a:	e7b7      	b.n	1250c <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
   1259c:	460b      	mov	r3, r1
   1259e:	2103      	movs	r1, #3
   125a0:	e7f0      	b.n	12584 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
   125a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   125a6:	2105      	movs	r1, #5
   125a8:	e7ec      	b.n	12584 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
   125aa:	460b      	mov	r3, r1
   125ac:	2107      	movs	r1, #7
   125ae:	e7e9      	b.n	12584 <cbvprintf+0x264>
		conv->unsupported = true;
   125b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   125b4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   125b8:	f023 0302 	bic.w	r3, r3, #2
   125bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   125c0:	f043 0302 	orr.w	r3, r3, #2
   125c4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   125c8:	e7a5      	b.n	12516 <cbvprintf+0x1f6>
	switch (conv->specifier) {
   125ca:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   125ce:	2b20      	cmp	r3, #32
   125d0:	d86f      	bhi.n	126b2 <cbvprintf+0x392>
   125d2:	a101      	add	r1, pc, #4	; (adr r1, 125d8 <cbvprintf+0x2b8>)
   125d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   125d8:	0001268b 	.word	0x0001268b
   125dc:	000126b3 	.word	0x000126b3
   125e0:	000126b3 	.word	0x000126b3
   125e4:	000126b3 	.word	0x000126b3
   125e8:	000126b3 	.word	0x000126b3
   125ec:	000126b3 	.word	0x000126b3
   125f0:	000126b3 	.word	0x000126b3
   125f4:	000126b3 	.word	0x000126b3
   125f8:	000126b3 	.word	0x000126b3
   125fc:	0001253b 	.word	0x0001253b
   12600:	000126b3 	.word	0x000126b3
   12604:	0001268b 	.word	0x0001268b
   12608:	0001265d 	.word	0x0001265d
   1260c:	0001253b 	.word	0x0001253b
   12610:	0001253b 	.word	0x0001253b
   12614:	0001253b 	.word	0x0001253b
   12618:	000126b3 	.word	0x000126b3
   1261c:	0001265d 	.word	0x0001265d
   12620:	000126b3 	.word	0x000126b3
   12624:	000126b3 	.word	0x000126b3
   12628:	000126b3 	.word	0x000126b3
   1262c:	000126b3 	.word	0x000126b3
   12630:	000126c1 	.word	0x000126c1
   12634:	0001268b 	.word	0x0001268b
   12638:	000126e5 	.word	0x000126e5
   1263c:	000126b3 	.word	0x000126b3
   12640:	000126b3 	.word	0x000126b3
   12644:	000126e5 	.word	0x000126e5
   12648:	000126b3 	.word	0x000126b3
   1264c:	0001268b 	.word	0x0001268b
   12650:	000126b3 	.word	0x000126b3
   12654:	000126b3 	.word	0x000126b3
   12658:	0001268b 	.word	0x0001268b
		conv->specifier_cat = SPECIFIER_SINT;
   1265c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12660:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
   12662:	f361 0302 	bfi	r3, r1, #0, #3
   12666:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1266a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1266e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12672:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   12674:	bf02      	ittt	eq
   12676:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1267a:	f041 0101 	orreq.w	r1, r1, #1
   1267e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   12682:	2a63      	cmp	r2, #99	; 0x63
   12684:	d005      	beq.n	12692 <cbvprintf+0x372>
	bool unsupported = false;
   12686:	2300      	movs	r3, #0
   12688:	e006      	b.n	12698 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
   1268a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1268e:	2102      	movs	r1, #2
   12690:	e7e7      	b.n	12662 <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12692:	3b00      	subs	r3, #0
   12694:	bf18      	it	ne
   12696:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12698:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1269c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   126a0:	430b      	orrs	r3, r1
   126a2:	f363 0241 	bfi	r2, r3, #1, #1
   126a6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   126aa:	e6b7      	b.n	1241c <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
   126ac:	f013 0f38 	tst.w	r3, #56	; 0x38
   126b0:	d0e9      	beq.n	12686 <cbvprintf+0x366>
			conv->invalid = true;
   126b2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   126b6:	f043 0301 	orr.w	r3, r3, #1
   126ba:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   126be:	e7e2      	b.n	12686 <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
   126c0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   126c4:	2203      	movs	r2, #3
   126c6:	f362 0302 	bfi	r3, r2, #0, #3
   126ca:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   126ce:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   126d2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   126d6:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   126da:	f1dc 0300 	rsbs	r3, ip, #0
   126de:	eb43 030c 	adc.w	r3, r3, ip
   126e2:	e7d9      	b.n	12698 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   126e4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   126e8:	2203      	movs	r2, #3
   126ea:	f362 0302 	bfi	r3, r2, #0, #3
   126ee:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   126f2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   126f6:	f013 0f78 	tst.w	r3, #120	; 0x78
   126fa:	bf14      	ite	ne
   126fc:	2301      	movne	r3, #1
   126fe:	2300      	moveq	r3, #0
   12700:	e7ca      	b.n	12698 <cbvprintf+0x378>
			unsupported = true;
   12702:	2301      	movs	r3, #1
   12704:	e7c8      	b.n	12698 <cbvprintf+0x378>
		} else if (conv->width_present) {
   12706:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1270a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1270c:	bfb4      	ite	lt
   1270e:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
   12712:	f04f 3bff 	movge.w	fp, #4294967295
   12716:	e693      	b.n	12440 <cbvprintf+0x120>
		} else if (conv->prec_present) {
   12718:	0799      	lsls	r1, r3, #30
   1271a:	f57f aea0 	bpl.w	1245e <cbvprintf+0x13e>
			precision = conv->prec_value;
   1271e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   12722:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   12726:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12728:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
   1272c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   12730:	f003 0207 	and.w	r2, r3, #7
   12734:	2a04      	cmp	r2, #4
   12736:	d109      	bne.n	1274c <cbvprintf+0x42c>
		    && !conv->prec_present) {
   12738:	078a      	lsls	r2, r1, #30
   1273a:	d407      	bmi.n	1274c <cbvprintf+0x42c>
			if (conv->specifier_a) {
   1273c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
   12740:	2a00      	cmp	r2, #0
   12742:	bfb4      	ite	lt
   12744:	f04f 080d 	movlt.w	r8, #13
   12748:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
   1274c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12750:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12752:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12756:	d137      	bne.n	127c8 <cbvprintf+0x4a8>
			switch (length_mod) {
   12758:	1ecb      	subs	r3, r1, #3
   1275a:	2b04      	cmp	r3, #4
   1275c:	d821      	bhi.n	127a2 <cbvprintf+0x482>
   1275e:	e8df f003 	tbb	[pc, r3]
   12762:	0903      	.short	0x0903
   12764:	2009      	.short	0x2009
   12766:	20          	.byte	0x20
   12767:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12768:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1276c:	17da      	asrs	r2, r3, #31
   1276e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   12772:	e006      	b.n	12782 <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
   12774:	3407      	adds	r4, #7
   12776:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1277a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1277e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   12782:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   12786:	07bb      	lsls	r3, r7, #30
   12788:	d056      	beq.n	12838 <cbvprintf+0x518>
			OUTS(sp, fp);
   1278a:	9b02      	ldr	r3, [sp, #8]
   1278c:	462a      	mov	r2, r5
   1278e:	4651      	mov	r1, sl
   12790:	4648      	mov	r0, r9
   12792:	f00d fbdd 	bl	1ff50 <outs>
   12796:	2800      	cmp	r0, #0
   12798:	f2c0 8394 	blt.w	12ec4 <cbvprintf+0xba4>
   1279c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
   1279e:	9d02      	ldr	r5, [sp, #8]
   127a0:	e5c6      	b.n	12330 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   127a2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   127a6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   127a8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   127ac:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   127b0:	d105      	bne.n	127be <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
   127b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   127b6:	930c      	str	r3, [sp, #48]	; 0x30
   127b8:	2300      	movs	r3, #0
   127ba:	930d      	str	r3, [sp, #52]	; 0x34
   127bc:	e7e1      	b.n	12782 <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
   127be:	2902      	cmp	r1, #2
   127c0:	d1df      	bne.n	12782 <cbvprintf+0x462>
				value->sint = (short)value->sint;
   127c2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   127c6:	e7d1      	b.n	1276c <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
   127c8:	2b02      	cmp	r3, #2
   127ca:	d123      	bne.n	12814 <cbvprintf+0x4f4>
			switch (length_mod) {
   127cc:	1ecb      	subs	r3, r1, #3
   127ce:	2b04      	cmp	r3, #4
   127d0:	d813      	bhi.n	127fa <cbvprintf+0x4da>
   127d2:	e8df f003 	tbb	[pc, r3]
   127d6:	0a03      	.short	0x0a03
   127d8:	120a      	.short	0x120a
   127da:	12          	.byte	0x12
   127db:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   127dc:	6822      	ldr	r2, [r4, #0]
   127de:	920c      	str	r2, [sp, #48]	; 0x30
   127e0:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   127e2:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   127e4:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   127e6:	4604      	mov	r4, r0
   127e8:	e7cb      	b.n	12782 <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
   127ea:	1de0      	adds	r0, r4, #7
   127ec:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   127f0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   127f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   127f8:	e7f5      	b.n	127e6 <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
   127fa:	f854 3b04 	ldr.w	r3, [r4], #4
   127fe:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   12800:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   12802:	f04f 0300 	mov.w	r3, #0
   12806:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   12808:	d0d3      	beq.n	127b2 <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
   1280a:	2902      	cmp	r1, #2
   1280c:	d1b9      	bne.n	12782 <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
   1280e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   12812:	e7d0      	b.n	127b6 <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
   12814:	2b04      	cmp	r3, #4
   12816:	d109      	bne.n	1282c <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
   12818:	1de3      	adds	r3, r4, #7
   1281a:	f023 0307 	bic.w	r3, r3, #7
   1281e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   12822:	e9d3 2300 	ldrd	r2, r3, [r3]
   12826:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1282a:	e7aa      	b.n	12782 <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1282c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1282e:	bf04      	itt	eq
   12830:	f854 3b04 	ldreq.w	r3, [r4], #4
   12834:	930c      	streq	r3, [sp, #48]	; 0x30
   12836:	e7a4      	b.n	12782 <cbvprintf+0x462>
		switch (conv->specifier) {
   12838:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1283c:	2a78      	cmp	r2, #120	; 0x78
   1283e:	d8ae      	bhi.n	1279e <cbvprintf+0x47e>
   12840:	2a57      	cmp	r2, #87	; 0x57
   12842:	f200 808c 	bhi.w	1295e <cbvprintf+0x63e>
   12846:	2a25      	cmp	r2, #37	; 0x25
   12848:	f000 80d4 	beq.w	129f4 <cbvprintf+0x6d4>
   1284c:	2a24      	cmp	r2, #36	; 0x24
   1284e:	d9a6      	bls.n	1279e <cbvprintf+0x47e>
   12850:	2a41      	cmp	r2, #65	; 0x41
   12852:	d003      	beq.n	1285c <cbvprintf+0x53c>
   12854:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   12858:	2b02      	cmp	r3, #2
   1285a:	d8a0      	bhi.n	1279e <cbvprintf+0x47e>
	} u = {
   1285c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
   12860:	2b00      	cmp	r3, #0
   12862:	f2c0 81b7 	blt.w	12bd4 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
   12866:	0738      	lsls	r0, r7, #28
   12868:	f100 81b6 	bmi.w	12bd8 <cbvprintf+0x8b8>
		*sign = ' ';
   1286c:	f017 0710 	ands.w	r7, r7, #16
   12870:	bf18      	it	ne
   12872:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   12874:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   12878:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1287c:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   12880:	2d00      	cmp	r5, #0
   12882:	f040 81ab 	bne.w	12bdc <cbvprintf+0x8bc>
   12886:	ea51 0003 	orrs.w	r0, r1, r3
   1288a:	bf14      	ite	ne
   1288c:	2001      	movne	r0, #1
   1288e:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
   12890:	02db      	lsls	r3, r3, #11
   12892:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   12896:	02c9      	lsls	r1, r1, #11
		c = 'f';
   12898:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
   1289a:	ea45 0e01 	orr.w	lr, r5, r1
   1289e:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
   128a2:	bf08      	it	eq
   128a4:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
   128a6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   128aa:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   128ae:	f000 8203 	beq.w	12cb8 <cbvprintf+0x998>
		if (is_subnormal) {
   128b2:	2800      	cmp	r0, #0
   128b4:	f040 81cb 	bne.w	12c4e <cbvprintf+0x92e>
		fract |= BIT_63;
   128b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   128bc:	f04f 0c00 	mov.w	ip, #0
   128c0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   128c4:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
   128c8:	9109      	str	r1, [sp, #36]	; 0x24
   128ca:	4663      	mov	r3, ip
		fract *= 5U;
   128cc:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
   128d0:	f115 0f02 	cmn.w	r5, #2
   128d4:	f2c0 81c2 	blt.w	12c5c <cbvprintf+0x93c>
   128d8:	f1bc 0f00 	cmp.w	ip, #0
   128dc:	d001      	beq.n	128e2 <cbvprintf+0x5c2>
   128de:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
   128e2:	2d00      	cmp	r5, #0
		fract += 2;
   128e4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
   128e8:	f300 81cd 	bgt.w	12c86 <cbvprintf+0x966>
	fract >>= (4 - expo);
   128ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   128ee:	9908      	ldr	r1, [sp, #32]
   128f0:	f1c5 0c04 	rsb	ip, r5, #4
   128f4:	351c      	adds	r5, #28
   128f6:	fa00 f505 	lsl.w	r5, r0, r5
   128fa:	f1ac 0e20 	sub.w	lr, ip, #32
   128fe:	fa21 f10c 	lsr.w	r1, r1, ip
   12902:	fa20 fe0e 	lsr.w	lr, r0, lr
   12906:	4329      	orrs	r1, r5
   12908:	ea41 010e 	orr.w	r1, r1, lr
   1290c:	fa20 f00c 	lsr.w	r0, r0, ip
   12910:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   12914:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   12918:	2947      	cmp	r1, #71	; 0x47
   1291a:	f040 81d4 	bne.w	12cc6 <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
   1291e:	1cdd      	adds	r5, r3, #3
   12920:	db02      	blt.n	12928 <cbvprintf+0x608>
   12922:	4598      	cmp	r8, r3
   12924:	f280 81cb 	bge.w	12cbe <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
   12928:	3a02      	subs	r2, #2
			if (precision > 0) {
   1292a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
   1292e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   12930:	dd01      	ble.n	12936 <cbvprintf+0x616>
				precision--;
   12932:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   12936:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1293a:	0688      	lsls	r0, r1, #26
   1293c:	f100 81c3 	bmi.w	12cc6 <cbvprintf+0x9a6>
   12940:	f1b8 0f00 	cmp.w	r8, #0
   12944:	bfd4      	ite	le
   12946:	2100      	movle	r1, #0
   12948:	2101      	movgt	r1, #1
	if (c == 'f') {
   1294a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1294c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
   1294e:	f040 81bc 	bne.w	12cca <cbvprintf+0x9aa>
		if (decimals < 0) {
   12952:	eb13 0508 	adds.w	r5, r3, r8
   12956:	f140 81ba 	bpl.w	12cce <cbvprintf+0x9ae>
			decimals = 0;
   1295a:	2500      	movs	r5, #0
   1295c:	e1ba      	b.n	12cd4 <cbvprintf+0x9b4>
		switch (conv->specifier) {
   1295e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   12962:	2b20      	cmp	r3, #32
   12964:	f63f af1b 	bhi.w	1279e <cbvprintf+0x47e>
   12968:	a001      	add	r0, pc, #4	; (adr r0, 12970 <cbvprintf+0x650>)
   1296a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1296e:	bf00      	nop
   12970:	00012b77 	.word	0x00012b77
   12974:	0001279f 	.word	0x0001279f
   12978:	0001279f 	.word	0x0001279f
   1297c:	0001279f 	.word	0x0001279f
   12980:	0001279f 	.word	0x0001279f
   12984:	0001279f 	.word	0x0001279f
   12988:	0001279f 	.word	0x0001279f
   1298c:	0001279f 	.word	0x0001279f
   12990:	0001279f 	.word	0x0001279f
   12994:	0001285d 	.word	0x0001285d
   12998:	0001279f 	.word	0x0001279f
   1299c:	00012a21 	.word	0x00012a21
   129a0:	00012b17 	.word	0x00012b17
   129a4:	0001285d 	.word	0x0001285d
   129a8:	0001285d 	.word	0x0001285d
   129ac:	0001285d 	.word	0x0001285d
   129b0:	0001279f 	.word	0x0001279f
   129b4:	00012b17 	.word	0x00012b17
   129b8:	0001279f 	.word	0x0001279f
   129bc:	0001279f 	.word	0x0001279f
   129c0:	0001279f 	.word	0x0001279f
   129c4:	0001279f 	.word	0x0001279f
   129c8:	00012bad 	.word	0x00012bad
   129cc:	00012b77 	.word	0x00012b77
   129d0:	00012b7b 	.word	0x00012b7b
   129d4:	0001279f 	.word	0x0001279f
   129d8:	0001279f 	.word	0x0001279f
   129dc:	000129fb 	.word	0x000129fb
   129e0:	0001279f 	.word	0x0001279f
   129e4:	00012b77 	.word	0x00012b77
   129e8:	0001279f 	.word	0x0001279f
   129ec:	0001279f 	.word	0x0001279f
   129f0:	00012b77 	.word	0x00012b77
			OUTC('%');
   129f4:	4651      	mov	r1, sl
   129f6:	4610      	mov	r0, r2
   129f8:	e4a4      	b.n	12344 <cbvprintf+0x24>
			if (precision >= 0) {
   129fa:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   129fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
   12a00:	db09      	blt.n	12a16 <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
   12a02:	4641      	mov	r1, r8
   12a04:	4610      	mov	r0, r2
   12a06:	9203      	str	r2, [sp, #12]
   12a08:	f010 ff0f 	bl	2382a <strnlen>
				len = strlen(bps);
   12a0c:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
   12a0e:	2700      	movs	r7, #0
			bpe = bps + len;
   12a10:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
   12a12:	b962      	cbnz	r2, 12a2e <cbvprintf+0x70e>
   12a14:	e6c3      	b.n	1279e <cbvprintf+0x47e>
				len = strlen(bps);
   12a16:	4610      	mov	r0, r2
   12a18:	9203      	str	r2, [sp, #12]
   12a1a:	f7fa f80c 	bl	ca36 <strlen>
   12a1e:	e7f5      	b.n	12a0c <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12a22:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
   12a26:	2700      	movs	r7, #0
			bpe = buf + 1;
   12a28:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
   12a2c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
   12a2e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
   12a30:	b107      	cbz	r7, 12a34 <cbvprintf+0x714>
			nj_len += 1U;
   12a32:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12a34:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   12a38:	06c1      	lsls	r1, r0, #27
   12a3a:	f140 8237 	bpl.w	12eac <cbvprintf+0xb8c>
			nj_len += 2U;
   12a3e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   12a40:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
   12a42:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   12a44:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12a46:	bf44      	itt	mi
   12a48:	9910      	ldrmi	r1, [sp, #64]	; 0x40
   12a4a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
   12a4c:	f1bb 0f00 	cmp.w	fp, #0
   12a50:	dd23      	ble.n	12a9a <cbvprintf+0x77a>
			width -= (int)nj_len;
   12a52:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
   12a56:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12a5a:	0759      	lsls	r1, r3, #29
   12a5c:	f3c3 0880 	ubfx	r8, r3, #2, #1
   12a60:	d41b      	bmi.n	12a9a <cbvprintf+0x77a>
				if (conv->flag_zero) {
   12a62:	0658      	lsls	r0, r3, #25
   12a64:	f140 8236 	bpl.w	12ed4 <cbvprintf+0xbb4>
					if (sign != 0) {
   12a68:	2f00      	cmp	r7, #0
   12a6a:	f000 8236 	beq.w	12eda <cbvprintf+0xbba>
						OUTC(sign);
   12a6e:	4651      	mov	r1, sl
   12a70:	4638      	mov	r0, r7
   12a72:	9203      	str	r2, [sp, #12]
   12a74:	47c8      	blx	r9
   12a76:	2800      	cmp	r0, #0
   12a78:	f2c0 8224 	blt.w	12ec4 <cbvprintf+0xba4>
   12a7c:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
   12a7e:	4647      	mov	r7, r8
						OUTC(sign);
   12a80:	3601      	adds	r6, #1
					pad = '0';
   12a82:	f04f 0830 	mov.w	r8, #48	; 0x30
   12a86:	445e      	add	r6, fp
   12a88:	465b      	mov	r3, fp
				while (width-- > 0) {
   12a8a:	2b00      	cmp	r3, #0
   12a8c:	eba6 000b 	sub.w	r0, r6, fp
   12a90:	f10b 3bff 	add.w	fp, fp, #4294967295
   12a94:	f300 820e 	bgt.w	12eb4 <cbvprintf+0xb94>
   12a98:	4606      	mov	r6, r0
		if (sign != 0) {
   12a9a:	b147      	cbz	r7, 12aae <cbvprintf+0x78e>
			OUTC(sign);
   12a9c:	4651      	mov	r1, sl
   12a9e:	4638      	mov	r0, r7
   12aa0:	9203      	str	r2, [sp, #12]
   12aa2:	47c8      	blx	r9
   12aa4:	2800      	cmp	r0, #0
   12aa6:	f2c0 820d 	blt.w	12ec4 <cbvprintf+0xba4>
   12aaa:	9a03      	ldr	r2, [sp, #12]
   12aac:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   12aae:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12ab2:	0659      	lsls	r1, r3, #25
   12ab4:	f140 8265 	bpl.w	12f82 <cbvprintf+0xc62>
			if (conv->specifier_a) {
   12ab8:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
   12abc:	2b00      	cmp	r3, #0
   12abe:	eba6 0602 	sub.w	r6, r6, r2
   12ac2:	f280 8219 	bge.w	12ef8 <cbvprintf+0xbd8>
   12ac6:	4617      	mov	r7, r2
   12ac8:	46b8      	mov	r8, r7
   12aca:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
   12acc:	f817 0b01 	ldrb.w	r0, [r7], #1
   12ad0:	2870      	cmp	r0, #112	; 0x70
   12ad2:	f040 8205 	bne.w	12ee0 <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
   12ad6:	9f10      	ldr	r7, [sp, #64]	; 0x40
   12ad8:	461e      	mov	r6, r3
   12ada:	441f      	add	r7, r3
   12adc:	1bbb      	subs	r3, r7, r6
   12ade:	2b00      	cmp	r3, #0
   12ae0:	f300 8248 	bgt.w	12f74 <cbvprintf+0xc54>
			OUTS(cp, bpe);
   12ae4:	462b      	mov	r3, r5
   12ae6:	4642      	mov	r2, r8
			OUTS(bps, bpe);
   12ae8:	4651      	mov	r1, sl
   12aea:	4648      	mov	r0, r9
   12aec:	f00d fa30 	bl	1ff50 <outs>
   12af0:	2800      	cmp	r0, #0
   12af2:	f2c0 81e7 	blt.w	12ec4 <cbvprintf+0xba4>
   12af6:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   12af8:	4606      	mov	r6, r0
   12afa:	4483      	add	fp, r0
		while (width > 0) {
   12afc:	ebab 0306 	sub.w	r3, fp, r6
   12b00:	2b00      	cmp	r3, #0
   12b02:	f77f ae4c 	ble.w	1279e <cbvprintf+0x47e>
			OUTC(' ');
   12b06:	4651      	mov	r1, sl
   12b08:	2020      	movs	r0, #32
   12b0a:	47c8      	blx	r9
   12b0c:	2800      	cmp	r0, #0
   12b0e:	f2c0 81d9 	blt.w	12ec4 <cbvprintf+0xba4>
   12b12:	3601      	adds	r6, #1
			--width;
   12b14:	e7f2      	b.n	12afc <cbvprintf+0x7dc>
			if (conv->flag_plus) {
   12b16:	073d      	lsls	r5, r7, #28
   12b18:	d42b      	bmi.n	12b72 <cbvprintf+0x852>
				sign = ' ';
   12b1a:	f017 0710 	ands.w	r7, r7, #16
   12b1e:	bf18      	it	ne
   12b20:	2720      	movne	r7, #32
			sint = value->sint;
   12b22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   12b26:	2b00      	cmp	r3, #0
   12b28:	da05      	bge.n	12b36 <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
   12b2a:	4252      	negs	r2, r2
   12b2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12b30:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   12b34:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   12b36:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   12b3a:	9300      	str	r3, [sp, #0]
   12b3c:	aa0e      	add	r2, sp, #56	; 0x38
   12b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   12b42:	ab13      	add	r3, sp, #76	; 0x4c
   12b44:	f7ff fba0 	bl	12288 <encode_uint>
   12b48:	4602      	mov	r2, r0
			if (precision >= 0) {
   12b4a:	f1b8 0f00 	cmp.w	r8, #0
   12b4e:	f10d 0565 	add.w	r5, sp, #101	; 0x65
   12b52:	f6ff af5e 	blt.w	12a12 <cbvprintf+0x6f2>
				conv->flag_zero = false;
   12b56:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   12b5a:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
   12b5c:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   12b60:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   12b62:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   12b66:	f67f af54 	bls.w	12a12 <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
   12b6a:	eba8 0303 	sub.w	r3, r8, r3
   12b6e:	930f      	str	r3, [sp, #60]	; 0x3c
   12b70:	e74f      	b.n	12a12 <cbvprintf+0x6f2>
				sign = '+';
   12b72:	272b      	movs	r7, #43	; 0x2b
   12b74:	e7d5      	b.n	12b22 <cbvprintf+0x802>
		switch (conv->specifier) {
   12b76:	2700      	movs	r7, #0
   12b78:	e7dd      	b.n	12b36 <cbvprintf+0x816>
			if (value->ptr != NULL) {
   12b7a:	980c      	ldr	r0, [sp, #48]	; 0x30
   12b7c:	2800      	cmp	r0, #0
   12b7e:	f000 8191 	beq.w	12ea4 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12b82:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   12b86:	9300      	str	r3, [sp, #0]
   12b88:	aa0e      	add	r2, sp, #56	; 0x38
   12b8a:	ab13      	add	r3, sp, #76	; 0x4c
   12b8c:	2100      	movs	r1, #0
   12b8e:	f7ff fb7b 	bl	12288 <encode_uint>
				conv->altform_0c = true;
   12b92:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   12b96:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12b9a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12b9e:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12ba2:	4602      	mov	r2, r0
				conv->altform_0c = true;
   12ba4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   12ba8:	2700      	movs	r7, #0
				goto prec_int_pad0;
   12baa:	e7ce      	b.n	12b4a <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
   12bac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   12bae:	2907      	cmp	r1, #7
   12bb0:	f63f adf5 	bhi.w	1279e <cbvprintf+0x47e>
   12bb4:	e8df f001 	tbb	[pc, r1]
   12bb8:	0c06040c 	.word	0x0c06040c
   12bbc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12bc0:	701e      	strb	r6, [r3, #0]
		break;
   12bc2:	e5ec      	b.n	1279e <cbvprintf+0x47e>
		*(short *)dp = (short)count;
   12bc4:	801e      	strh	r6, [r3, #0]
		break;
   12bc6:	e5ea      	b.n	1279e <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
   12bc8:	17f2      	asrs	r2, r6, #31
   12bca:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   12bce:	e5e6      	b.n	1279e <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12bd0:	601e      	str	r6, [r3, #0]
		break;
   12bd2:	e5e4      	b.n	1279e <cbvprintf+0x47e>
		*sign = '-';
   12bd4:	272d      	movs	r7, #45	; 0x2d
   12bd6:	e64d      	b.n	12874 <cbvprintf+0x554>
		*sign = '+';
   12bd8:	272b      	movs	r7, #43	; 0x2b
   12bda:	e64b      	b.n	12874 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   12bdc:	f240 70ff 	movw	r0, #2047	; 0x7ff
   12be0:	4285      	cmp	r5, r0
   12be2:	d131      	bne.n	12c48 <cbvprintf+0x928>
			if (isupper((int)c)) {
   12be4:	3201      	adds	r2, #1
   12be6:	48b9      	ldr	r0, [pc, #740]	; (12ecc <cbvprintf+0xbac>)
   12be8:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
   12bea:	430b      	orrs	r3, r1
   12bec:	5c12      	ldrb	r2, [r2, r0]
   12bee:	f002 0203 	and.w	r2, r2, #3
   12bf2:	d11b      	bne.n	12c2c <cbvprintf+0x90c>
			if (isupper((int)c)) {
   12bf4:	2a01      	cmp	r2, #1
   12bf6:	d111      	bne.n	12c1c <cbvprintf+0x8fc>
				*buf++ = 'I';
   12bf8:	2349      	movs	r3, #73	; 0x49
   12bfa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
   12bfe:	234e      	movs	r3, #78	; 0x4e
   12c00:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
   12c04:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   12c06:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
   12c0a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12c0e:	f36f 1386 	bfc	r3, #6, #1
   12c12:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
   12c16:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
   12c1a:	e707      	b.n	12a2c <cbvprintf+0x70c>
				*buf++ = 'i';
   12c1c:	2369      	movs	r3, #105	; 0x69
   12c1e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   12c22:	236e      	movs	r3, #110	; 0x6e
   12c24:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
   12c28:	2366      	movs	r3, #102	; 0x66
   12c2a:	e7ec      	b.n	12c06 <cbvprintf+0x8e6>
			if (isupper((int)c)) {
   12c2c:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   12c2e:	bf07      	ittee	eq
   12c30:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   12c32:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   12c34:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   12c36:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   12c38:	bf0c      	ite	eq
   12c3a:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   12c3e:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
   12c42:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
   12c46:	e7de      	b.n	12c06 <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
   12c48:	2000      	movs	r0, #0
   12c4a:	e621      	b.n	12890 <cbvprintf+0x570>
				expo--;
   12c4c:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   12c4e:	1849      	adds	r1, r1, r1
   12c50:	415b      	adcs	r3, r3
   12c52:	2b00      	cmp	r3, #0
   12c54:	dafa      	bge.n	12c4c <cbvprintf+0x92c>
   12c56:	e9cd 1308 	strd	r1, r3, [sp, #32]
   12c5a:	e62d      	b.n	128b8 <cbvprintf+0x598>
			fract >>= 1;
   12c5c:	0840      	lsrs	r0, r0, #1
   12c5e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   12c62:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   12c64:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
   12c68:	46ac      	mov	ip, r5
			expo++;
   12c6a:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   12c6e:	d2f5      	bcs.n	12c5c <cbvprintf+0x93c>
		fract *= 5U;
   12c70:	fb0e f501 	mul.w	r5, lr, r1
   12c74:	fba0 010e 	umull	r0, r1, r0, lr
   12c78:	4429      	add	r1, r5
		decexp--;
   12c7a:	3b01      	subs	r3, #1
		expo++;
   12c7c:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
   12c80:	f04f 0c01 	mov.w	ip, #1
   12c84:	e624      	b.n	128d0 <cbvprintf+0x5b0>
		fract += 2;
   12c86:	3102      	adds	r1, #2
   12c88:	f140 0000 	adc.w	r0, r0, #0
   12c8c:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
   12c90:	a808      	add	r0, sp, #32
   12c92:	e9cd 2303 	strd	r2, r3, [sp, #12]
   12c96:	f00d f92c 	bl	1fef2 <_ldiv5>
		decexp++;
   12c9a:	9b04      	ldr	r3, [sp, #16]
   12c9c:	9a03      	ldr	r2, [sp, #12]
   12c9e:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
   12ca2:	3d01      	subs	r5, #1
		decexp++;
   12ca4:	3301      	adds	r3, #1
			fract <<= 1;
   12ca6:	1849      	adds	r1, r1, r1
   12ca8:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
   12caa:	2800      	cmp	r0, #0
			expo--;
   12cac:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
   12cb0:	daf9      	bge.n	12ca6 <cbvprintf+0x986>
   12cb2:	e9cd 1008 	strd	r1, r0, [sp, #32]
   12cb6:	e614      	b.n	128e2 <cbvprintf+0x5c2>
   12cb8:	2300      	movs	r3, #0
   12cba:	461d      	mov	r5, r3
   12cbc:	e616      	b.n	128ec <cbvprintf+0x5cc>
			precision -= decexp;
   12cbe:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
   12cc2:	2266      	movs	r2, #102	; 0x66
   12cc4:	e637      	b.n	12936 <cbvprintf+0x616>
	bool prune_zero = false;
   12cc6:	2100      	movs	r1, #0
   12cc8:	e63f      	b.n	1294a <cbvprintf+0x62a>
		decimals = precision + 1;
   12cca:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
   12cce:	2d10      	cmp	r5, #16
   12cd0:	bfa8      	it	ge
   12cd2:	2510      	movge	r5, #16
   12cd4:	2110      	movs	r1, #16
   12cd6:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
   12cd8:	2000      	movs	r0, #0
   12cda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   12cde:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
   12ce2:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
   12ce6:	b9a5      	cbnz	r5, 12d12 <cbvprintf+0x9f2>
	fract += round;
   12ce8:	9d08      	ldr	r5, [sp, #32]
   12cea:	1949      	adds	r1, r1, r5
   12cec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   12cee:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
   12cf2:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   12cf6:	d21b      	bcs.n	12d30 <cbvprintf+0xa10>
	fract += round;
   12cf8:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
   12cfc:	2a66      	cmp	r2, #102	; 0x66
   12cfe:	f040 8099 	bne.w	12e34 <cbvprintf+0xb14>
		if (decexp > 0) {
   12d02:	2b00      	cmp	r3, #0
   12d04:	dc23      	bgt.n	12d4e <cbvprintf+0xa2e>
			*buf++ = '0';
   12d06:	2130      	movs	r1, #48	; 0x30
   12d08:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
   12d0c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   12d10:	e02f      	b.n	12d72 <cbvprintf+0xa52>
	*v >>= 1;
   12d12:	0849      	lsrs	r1, r1, #1
   12d14:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   12d18:	0840      	lsrs	r0, r0, #1
   12d1a:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
   12d1e:	a80a      	add	r0, sp, #40	; 0x28
   12d20:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12d24:	3d01      	subs	r5, #1
   12d26:	f00d f8e4 	bl	1fef2 <_ldiv5>
   12d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
   12d2e:	e7d8      	b.n	12ce2 <cbvprintf+0x9c2>
	*v >>= 1;
   12d30:	0849      	lsrs	r1, r1, #1
   12d32:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
   12d36:	a808      	add	r0, sp, #32
	*v >>= 1;
   12d38:	086d      	lsrs	r5, r5, #1
   12d3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12d3e:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
   12d42:	f00d f8d6 	bl	1fef2 <_ldiv5>
		decexp++;
   12d46:	9b05      	ldr	r3, [sp, #20]
   12d48:	9a04      	ldr	r2, [sp, #16]
   12d4a:	3301      	adds	r3, #1
   12d4c:	e7d6      	b.n	12cfc <cbvprintf+0x9dc>
	char *buf = bps;
   12d4e:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
   12d50:	9907      	ldr	r1, [sp, #28]
   12d52:	2900      	cmp	r1, #0
   12d54:	dd0b      	ble.n	12d6e <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
   12d56:	a907      	add	r1, sp, #28
   12d58:	a808      	add	r0, sp, #32
   12d5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12d5e:	f00d f8e0 	bl	1ff22 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   12d62:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
   12d64:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
   12d68:	3b01      	subs	r3, #1
   12d6a:	9a04      	ldr	r2, [sp, #16]
   12d6c:	d1f0      	bne.n	12d50 <cbvprintf+0xa30>
			conv->pad0_value = decexp;
   12d6e:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
   12d70:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
   12d72:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   12d76:	0689      	lsls	r1, r1, #26
   12d78:	d402      	bmi.n	12d80 <cbvprintf+0xa60>
   12d7a:	f1b8 0f00 	cmp.w	r8, #0
   12d7e:	dd1d      	ble.n	12dbc <cbvprintf+0xa9c>
			*buf++ = '.';
   12d80:	212e      	movs	r1, #46	; 0x2e
   12d82:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
   12d86:	b19b      	cbz	r3, 12db0 <cbvprintf+0xa90>
   12d88:	f1b8 0f00 	cmp.w	r8, #0
   12d8c:	dd16      	ble.n	12dbc <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
   12d8e:	4259      	negs	r1, r3
   12d90:	4541      	cmp	r1, r8
   12d92:	bfa8      	it	ge
   12d94:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
   12d96:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
   12d9a:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
   12d9c:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
   12d9e:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   12da2:	bfd4      	ite	le
   12da4:	2100      	movle	r1, #0
   12da6:	2101      	movgt	r1, #1
   12da8:	f361 1045 	bfi	r0, r1, #5, #1
   12dac:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
   12db0:	f1b8 0f00 	cmp.w	r8, #0
   12db4:	dd02      	ble.n	12dbc <cbvprintf+0xa9c>
   12db6:	9907      	ldr	r1, [sp, #28]
   12db8:	2900      	cmp	r1, #0
   12dba:	dc56      	bgt.n	12e6a <cbvprintf+0xb4a>
	if (prune_zero) {
   12dbc:	9903      	ldr	r1, [sp, #12]
   12dbe:	2900      	cmp	r1, #0
   12dc0:	d163      	bne.n	12e8a <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
   12dc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
   12dc6:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   12dca:	2945      	cmp	r1, #69	; 0x45
   12dcc:	d121      	bne.n	12e12 <cbvprintf+0xaf2>
		if (decexp < 0) {
   12dce:	2b00      	cmp	r3, #0
		*buf++ = c;
   12dd0:	4629      	mov	r1, r5
			decexp = -decexp;
   12dd2:	bfb8      	it	lt
   12dd4:	425b      	neglt	r3, r3
		*buf++ = c;
   12dd6:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
   12dda:	bfb4      	ite	lt
   12ddc:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   12dde:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
   12de0:	2b63      	cmp	r3, #99	; 0x63
   12de2:	706a      	strb	r2, [r5, #1]
   12de4:	dd09      	ble.n	12dfa <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
   12de6:	2064      	movs	r0, #100	; 0x64
   12de8:	fbb3 f2f0 	udiv	r2, r3, r0
   12dec:	f102 0c30 	add.w	ip, r2, #48	; 0x30
   12df0:	1ce9      	adds	r1, r5, #3
   12df2:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
   12df6:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   12dfa:	200a      	movs	r0, #10
   12dfc:	460d      	mov	r5, r1
   12dfe:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
   12e02:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   12e06:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   12e0a:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   12e0c:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
   12e10:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   12e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12e14:	2b00      	cmp	r3, #0
   12e16:	dc43      	bgt.n	12ea0 <cbvprintf+0xb80>
   12e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12e1a:	2b00      	cmp	r3, #0
   12e1c:	bfd4      	ite	le
   12e1e:	2300      	movle	r3, #0
   12e20:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   12e22:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   12e26:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   12e2a:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   12e2c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
   12e30:	702b      	strb	r3, [r5, #0]
	return bps;
   12e32:	e5fb      	b.n	12a2c <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
   12e34:	a907      	add	r1, sp, #28
   12e36:	a808      	add	r0, sp, #32
   12e38:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12e3c:	f00d f871 	bl	1ff22 <_get_digit>
		if (*buf++ != '0') {
   12e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
   12e44:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
   12e48:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
   12e4c:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   12e4e:	bf18      	it	ne
   12e50:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   12e54:	0688      	lsls	r0, r1, #26
   12e56:	d402      	bmi.n	12e5e <cbvprintf+0xb3e>
   12e58:	f1b8 0f00 	cmp.w	r8, #0
   12e5c:	dd12      	ble.n	12e84 <cbvprintf+0xb64>
			*buf++ = '.';
   12e5e:	212e      	movs	r1, #46	; 0x2e
   12e60:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   12e64:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
   12e68:	e7a2      	b.n	12db0 <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
   12e6a:	a907      	add	r1, sp, #28
   12e6c:	a808      	add	r0, sp, #32
   12e6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12e72:	f00d f856 	bl	1ff22 <_get_digit>
		precision--;
   12e76:	f108 38ff 	add.w	r8, r8, #4294967295
   12e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
   12e7e:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
   12e82:	e795      	b.n	12db0 <cbvprintf+0xa90>
		if (*buf++ != '0') {
   12e84:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   12e88:	e798      	b.n	12dbc <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
   12e8a:	2100      	movs	r1, #0
   12e8c:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
   12e8e:	4628      	mov	r0, r5
   12e90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   12e94:	2930      	cmp	r1, #48	; 0x30
   12e96:	d0fa      	beq.n	12e8e <cbvprintf+0xb6e>
		if (*buf != '.') {
   12e98:	292e      	cmp	r1, #46	; 0x2e
   12e9a:	bf18      	it	ne
   12e9c:	4605      	movne	r5, r0
   12e9e:	e792      	b.n	12dc6 <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
   12ea0:	2301      	movs	r3, #1
   12ea2:	e7be      	b.n	12e22 <cbvprintf+0xb02>
			bpe = bps + 5;
   12ea4:	4d0a      	ldr	r5, [pc, #40]	; (12ed0 <cbvprintf+0xbb0>)
		char sign = 0;
   12ea6:	4607      	mov	r7, r0
			bps = "(nil)";
   12ea8:	1f6a      	subs	r2, r5, #5
   12eaa:	e5c0      	b.n	12a2e <cbvprintf+0x70e>
		} else if (conv->altform_0) {
   12eac:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
   12eae:	bf48      	it	mi
   12eb0:	3301      	addmi	r3, #1
   12eb2:	e5c5      	b.n	12a40 <cbvprintf+0x720>
					OUTC(pad);
   12eb4:	4651      	mov	r1, sl
   12eb6:	4640      	mov	r0, r8
   12eb8:	9203      	str	r2, [sp, #12]
   12eba:	47c8      	blx	r9
   12ebc:	2800      	cmp	r0, #0
   12ebe:	9a03      	ldr	r2, [sp, #12]
   12ec0:	f6bf ade2 	bge.w	12a88 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
   12ec4:	b01b      	add	sp, #108	; 0x6c
   12ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eca:	bf00      	nop
   12ecc:	00024f27 	.word	0x00024f27
   12ed0:	00024b54 	.word	0x00024b54
				char pad = ' ';
   12ed4:	f04f 0820 	mov.w	r8, #32
   12ed8:	e5d5      	b.n	12a86 <cbvprintf+0x766>
					pad = '0';
   12eda:	f04f 0830 	mov.w	r8, #48	; 0x30
   12ede:	e5d2      	b.n	12a86 <cbvprintf+0x766>
					OUTC(*cp++);
   12ee0:	4651      	mov	r1, sl
   12ee2:	47c8      	blx	r9
   12ee4:	2800      	cmp	r0, #0
   12ee6:	f6bf adef 	bge.w	12ac8 <cbvprintf+0x7a8>
   12eea:	e7eb      	b.n	12ec4 <cbvprintf+0xba4>
					OUTC(*cp++);
   12eec:	4651      	mov	r1, sl
   12eee:	9203      	str	r2, [sp, #12]
   12ef0:	47c8      	blx	r9
   12ef2:	2800      	cmp	r0, #0
   12ef4:	9a03      	ldr	r2, [sp, #12]
   12ef6:	dbe5      	blt.n	12ec4 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
   12ef8:	7810      	ldrb	r0, [r2, #0]
   12efa:	4b37      	ldr	r3, [pc, #220]	; (12fd8 <cbvprintf+0xcb8>)
   12efc:	5cc3      	ldrb	r3, [r0, r3]
   12efe:	075b      	lsls	r3, r3, #29
   12f00:	4617      	mov	r7, r2
   12f02:	eb06 0802 	add.w	r8, r6, r2
   12f06:	f102 0201 	add.w	r2, r2, #1
   12f0a:	d4ef      	bmi.n	12eec <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
   12f0c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
   12f10:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
   12f12:	0699      	lsls	r1, r3, #26
   12f14:	d407      	bmi.n	12f26 <cbvprintf+0xc06>
   12f16:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
   12f18:	2e00      	cmp	r6, #0
   12f1a:	eba8 0206 	sub.w	r2, r8, r6
   12f1e:	f106 36ff 	add.w	r6, r6, #4294967295
   12f22:	dc0f      	bgt.n	12f44 <cbvprintf+0xc24>
   12f24:	4690      	mov	r8, r2
				if (*cp == '.') {
   12f26:	7838      	ldrb	r0, [r7, #0]
   12f28:	282e      	cmp	r0, #46	; 0x2e
   12f2a:	d108      	bne.n	12f3e <cbvprintf+0xc1e>
					OUTC(*cp++);
   12f2c:	4651      	mov	r1, sl
   12f2e:	47c8      	blx	r9
						OUTC('0');
   12f30:	2800      	cmp	r0, #0
   12f32:	dbc7      	blt.n	12ec4 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
   12f34:	2e00      	cmp	r6, #0
						OUTC('0');
   12f36:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
   12f3a:	dc09      	bgt.n	12f50 <cbvprintf+0xc30>
					OUTC(*cp++);
   12f3c:	3701      	adds	r7, #1
   12f3e:	eba8 0607 	sub.w	r6, r8, r7
   12f42:	e00e      	b.n	12f62 <cbvprintf+0xc42>
						OUTC('0');
   12f44:	4651      	mov	r1, sl
   12f46:	2030      	movs	r0, #48	; 0x30
   12f48:	47c8      	blx	r9
   12f4a:	2800      	cmp	r0, #0
   12f4c:	dae4      	bge.n	12f18 <cbvprintf+0xbf8>
   12f4e:	e7b9      	b.n	12ec4 <cbvprintf+0xba4>
						OUTC('0');
   12f50:	4651      	mov	r1, sl
   12f52:	2030      	movs	r0, #48	; 0x30
   12f54:	47c8      	blx	r9
   12f56:	3e01      	subs	r6, #1
   12f58:	e7ea      	b.n	12f30 <cbvprintf+0xc10>
					OUTC(*cp++);
   12f5a:	4651      	mov	r1, sl
   12f5c:	47c8      	blx	r9
   12f5e:	2800      	cmp	r0, #0
   12f60:	dbb0      	blt.n	12ec4 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
   12f62:	4a1d      	ldr	r2, [pc, #116]	; (12fd8 <cbvprintf+0xcb8>)
   12f64:	46b8      	mov	r8, r7
   12f66:	19f3      	adds	r3, r6, r7
   12f68:	f817 0b01 	ldrb.w	r0, [r7], #1
   12f6c:	5c12      	ldrb	r2, [r2, r0]
   12f6e:	0752      	lsls	r2, r2, #29
   12f70:	d4f3      	bmi.n	12f5a <cbvprintf+0xc3a>
   12f72:	e5b0      	b.n	12ad6 <cbvprintf+0x7b6>
				OUTC('0');
   12f74:	4651      	mov	r1, sl
   12f76:	2030      	movs	r0, #48	; 0x30
   12f78:	47c8      	blx	r9
   12f7a:	2800      	cmp	r0, #0
   12f7c:	dba2      	blt.n	12ec4 <cbvprintf+0xba4>
   12f7e:	3601      	adds	r6, #1
   12f80:	e5ac      	b.n	12adc <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
   12f82:	06d8      	lsls	r0, r3, #27
   12f84:	d401      	bmi.n	12f8a <cbvprintf+0xc6a>
   12f86:	0719      	lsls	r1, r3, #28
   12f88:	d507      	bpl.n	12f9a <cbvprintf+0xc7a>
				OUTC('0');
   12f8a:	4651      	mov	r1, sl
   12f8c:	2030      	movs	r0, #48	; 0x30
   12f8e:	9203      	str	r2, [sp, #12]
   12f90:	47c8      	blx	r9
   12f92:	2800      	cmp	r0, #0
   12f94:	db96      	blt.n	12ec4 <cbvprintf+0xba4>
   12f96:	9a03      	ldr	r2, [sp, #12]
   12f98:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   12f9a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12f9e:	06db      	lsls	r3, r3, #27
   12fa0:	d508      	bpl.n	12fb4 <cbvprintf+0xc94>
				OUTC(conv->specifier);
   12fa2:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12fa6:	9203      	str	r2, [sp, #12]
   12fa8:	4651      	mov	r1, sl
   12faa:	47c8      	blx	r9
   12fac:	2800      	cmp	r0, #0
   12fae:	db89      	blt.n	12ec4 <cbvprintf+0xba4>
   12fb0:	9a03      	ldr	r2, [sp, #12]
   12fb2:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   12fb4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   12fb6:	4437      	add	r7, r6
   12fb8:	1bbb      	subs	r3, r7, r6
   12fba:	2b00      	cmp	r3, #0
   12fbc:	dc01      	bgt.n	12fc2 <cbvprintf+0xca2>
			OUTS(bps, bpe);
   12fbe:	462b      	mov	r3, r5
   12fc0:	e592      	b.n	12ae8 <cbvprintf+0x7c8>
				OUTC('0');
   12fc2:	4651      	mov	r1, sl
   12fc4:	2030      	movs	r0, #48	; 0x30
   12fc6:	9203      	str	r2, [sp, #12]
   12fc8:	47c8      	blx	r9
   12fca:	2800      	cmp	r0, #0
   12fcc:	f6ff af7a 	blt.w	12ec4 <cbvprintf+0xba4>
   12fd0:	9a03      	ldr	r2, [sp, #12]
   12fd2:	3601      	adds	r6, #1
   12fd4:	e7f0      	b.n	12fb8 <cbvprintf+0xc98>
   12fd6:	bf00      	nop
   12fd8:	00024f28 	.word	0x00024f28

00012fdc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12fdc:	b508      	push	{r3, lr}
   12fde:	f04f 0240 	mov.w	r2, #64	; 0x40
   12fe2:	f3ef 8311 	mrs	r3, BASEPRI
   12fe6:	f382 8812 	msr	BASEPRI_MAX, r2
   12fea:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12fee:	f000 fea1 	bl	13d34 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12ff2:	4803      	ldr	r0, [pc, #12]	; (13000 <sys_reboot+0x24>)
   12ff4:	f00c fcf5 	bl	1f9e2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12ff8:	f000 faa4 	bl	13544 <arch_cpu_idle>
   12ffc:	e7fc      	b.n	12ff8 <sys_reboot+0x1c>
   12ffe:	bf00      	nop
   13000:	00024b55 	.word	0x00024b55

00013004 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   13004:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   13006:	4c08      	ldr	r4, [pc, #32]	; (13028 <read_blvl+0x24>)
{
   13008:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   1300a:	7824      	ldrb	r4, [r4, #0]
   1300c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   13010:	2401      	movs	r4, #1
   13012:	9402      	str	r4, [sp, #8]
   13014:	f10d 0417 	add.w	r4, sp, #23
   13018:	9401      	str	r4, [sp, #4]
   1301a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1301e:	9400      	str	r4, [sp, #0]
   13020:	f00f f84f 	bl	220c2 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   13024:	b006      	add	sp, #24
   13026:	bd10      	pop	{r4, pc}
   13028:	20000990 	.word	0x20000990

0001302c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   1302c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13030:	4605      	mov	r5, r0
   13032:	f04f 0340 	mov.w	r3, #64	; 0x40
   13036:	f3ef 8611 	mrs	r6, BASEPRI
   1303a:	f383 8812 	msr	BASEPRI_MAX, r3
   1303e:	f3bf 8f6f 	isb	sy
	return list->head;
   13042:	4b0e      	ldr	r3, [pc, #56]	; (1307c <pm_state_notify+0x50>)
   13044:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13046:	b19c      	cbz	r4, 13070 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13048:	4f0d      	ldr	r7, [pc, #52]	; (13080 <pm_state_notify+0x54>)
   1304a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 13084 <pm_state_notify+0x58>
   1304e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13052:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   13056:	2d00      	cmp	r5, #0
   13058:	bf08      	it	eq
   1305a:	4613      	moveq	r3, r2
		if (callback) {
   1305c:	b12b      	cbz	r3, 1306a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1305e:	f898 2014 	ldrb.w	r2, [r8, #20]
   13062:	fb09 f202 	mul.w	r2, r9, r2
   13066:	5cb8      	ldrb	r0, [r7, r2]
   13068:	4798      	blx	r3
	return node->next;
   1306a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1306c:	2c00      	cmp	r4, #0
   1306e:	d1f0      	bne.n	13052 <pm_state_notify+0x26>
	__asm__ volatile(
   13070:	f386 8811 	msr	BASEPRI, r6
   13074:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1307c:	20001f14 	.word	0x20001f14
   13080:	20001f1c 	.word	0x20001f1c
   13084:	2000281c 	.word	0x2000281c

00013088 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13088:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1308a:	2301      	movs	r3, #1
   1308c:	f000 001f 	and.w	r0, r0, #31
   13090:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13094:	4b07      	ldr	r3, [pc, #28]	; (130b4 <atomic_clear_bit.constprop.0+0x2c>)
   13096:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1309a:	43c0      	mvns	r0, r0
   1309c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   130a0:	e853 2f00 	ldrex	r2, [r3]
   130a4:	4002      	ands	r2, r0
   130a6:	e843 2100 	strex	r1, r2, [r3]
   130aa:	2900      	cmp	r1, #0
   130ac:	d1f8      	bne.n	130a0 <atomic_clear_bit.constprop.0+0x18>
   130ae:	f3bf 8f5b 	dmb	ish
}
   130b2:	4770      	bx	lr
   130b4:	20001f28 	.word	0x20001f28

000130b8 <pm_system_resume>:

void pm_system_resume(void)
{
   130b8:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   130ba:	4b1a      	ldr	r3, [pc, #104]	; (13124 <pm_system_resume+0x6c>)
   130bc:	7d1c      	ldrb	r4, [r3, #20]
   130be:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   130c2:	f004 031f 	and.w	r3, r4, #31
   130c6:	2201      	movs	r2, #1
   130c8:	409a      	lsls	r2, r3
   130ca:	4b17      	ldr	r3, [pc, #92]	; (13128 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   130cc:	0961      	lsrs	r1, r4, #5
   130ce:	43d0      	mvns	r0, r2
   130d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   130d4:	e853 1f00 	ldrex	r1, [r3]
   130d8:	ea01 0500 	and.w	r5, r1, r0
   130dc:	e843 5c00 	strex	ip, r5, [r3]
   130e0:	f1bc 0f00 	cmp.w	ip, #0
   130e4:	d1f6      	bne.n	130d4 <pm_system_resume+0x1c>
   130e6:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   130ea:	4211      	tst	r1, r2
   130ec:	d013      	beq.n	13116 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
   130ee:	4b0f      	ldr	r3, [pc, #60]	; (1312c <pm_system_resume+0x74>)
   130f0:	4d0f      	ldr	r5, [pc, #60]	; (13130 <pm_system_resume+0x78>)
   130f2:	b18b      	cbz	r3, 13118 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
   130f4:	230c      	movs	r3, #12
   130f6:	4363      	muls	r3, r4
   130f8:	18ea      	adds	r2, r5, r3
   130fa:	5ce8      	ldrb	r0, [r5, r3]
   130fc:	7851      	ldrb	r1, [r2, #1]
   130fe:	f00d f9b8 	bl	20472 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13102:	2000      	movs	r0, #0
   13104:	f7ff ff92 	bl	1302c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13108:	230c      	movs	r3, #12
   1310a:	435c      	muls	r4, r3
   1310c:	192a      	adds	r2, r5, r4
   1310e:	2300      	movs	r3, #0
   13110:	512b      	str	r3, [r5, r4]
   13112:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13116:	bd38      	pop	{r3, r4, r5, pc}
   13118:	f383 8811 	msr	BASEPRI, r3
   1311c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13120:	e7ef      	b.n	13102 <pm_system_resume+0x4a>
   13122:	bf00      	nop
   13124:	2000281c 	.word	0x2000281c
   13128:	20001f2c 	.word	0x20001f2c
   1312c:	00020473 	.word	0x00020473
   13130:	20001f1c 	.word	0x20001f1c

00013134 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13138:	4b32      	ldr	r3, [pc, #200]	; (13204 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1313a:	4a33      	ldr	r2, [pc, #204]	; (13208 <pm_system_suspend+0xd4>)
   1313c:	7d1c      	ldrb	r4, [r3, #20]
   1313e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13142:	0963      	lsrs	r3, r4, #5
   13144:	ea4f 0983 	mov.w	r9, r3, lsl #2
   13148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1314c:	4e2f      	ldr	r6, [pc, #188]	; (1320c <pm_system_suspend+0xd8>)
   1314e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13152:	f004 081f 	and.w	r8, r4, #31
   13156:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   1315a:	f013 0f01 	tst.w	r3, #1
{
   1315e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   13160:	d10a      	bne.n	13178 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   13162:	4601      	mov	r1, r0
   13164:	4620      	mov	r0, r4
   13166:	f000 f869 	bl	1323c <pm_policy_next_state>
		if (info != NULL) {
   1316a:	b128      	cbz	r0, 13178 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
   1316c:	c807      	ldmia	r0, {r0, r1, r2}
   1316e:	230c      	movs	r3, #12
   13170:	fb03 6304 	mla	r3, r3, r4, r6
   13174:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13178:	230c      	movs	r3, #12
   1317a:	4363      	muls	r3, r4
   1317c:	18f2      	adds	r2, r6, r3
   1317e:	5cf5      	ldrb	r5, [r6, r3]
   13180:	b92d      	cbnz	r5, 1318e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   13182:	4620      	mov	r0, r4
   13184:	f7ff ff80 	bl	13088 <atomic_clear_bit.constprop.0>
		ret = false;
   13188:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   1318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   1318e:	1c7b      	adds	r3, r7, #1
   13190:	d00f      	beq.n	131b2 <pm_system_suspend+0x7e>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13192:	f8d2 c008 	ldr.w	ip, [r2, #8]
   13196:	481e      	ldr	r0, [pc, #120]	; (13210 <pm_system_suspend+0xdc>)
   13198:	4a1e      	ldr	r2, [pc, #120]	; (13214 <pm_system_suspend+0xe0>)
   1319a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1319e:	2100      	movs	r1, #0
   131a0:	2300      	movs	r3, #0
   131a2:	fbec 0105 	umlal	r0, r1, ip, r5
   131a6:	f7ed fe59 	bl	e5c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   131aa:	2101      	movs	r1, #1
   131ac:	1a38      	subs	r0, r7, r0
   131ae:	f010 f920 	bl	233f2 <z_set_timeout_expiry>
	k_sched_lock();
   131b2:	f008 f925 	bl	1b400 <k_sched_lock>
	pm_state_notify(true);
   131b6:	2001      	movs	r0, #1
   131b8:	f7ff ff38 	bl	1302c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   131bc:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   131c0:	2301      	movs	r3, #1
   131c2:	fa03 f808 	lsl.w	r8, r3, r8
   131c6:	4b14      	ldr	r3, [pc, #80]	; (13218 <pm_system_suspend+0xe4>)
   131c8:	4499      	add	r9, r3
   131ca:	e859 3f00 	ldrex	r3, [r9]
   131ce:	ea43 0308 	orr.w	r3, r3, r8
   131d2:	e849 3200 	strex	r2, r3, [r9]
   131d6:	2a00      	cmp	r2, #0
   131d8:	d1f7      	bne.n	131ca <pm_system_suspend+0x96>
   131da:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   131de:	4b0f      	ldr	r3, [pc, #60]	; (1321c <pm_system_suspend+0xe8>)
   131e0:	b133      	cbz	r3, 131f0 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
   131e2:	230c      	movs	r3, #12
   131e4:	4363      	muls	r3, r4
   131e6:	18f2      	adds	r2, r6, r3
   131e8:	5cf0      	ldrb	r0, [r6, r3]
   131ea:	7851      	ldrb	r1, [r2, #1]
   131ec:	f00d f935 	bl	2045a <pm_state_set>
	pm_system_resume();
   131f0:	f7ff ff62 	bl	130b8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   131f4:	4620      	mov	r0, r4
   131f6:	f7ff ff47 	bl	13088 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   131fa:	f008 fad1 	bl	1b7a0 <k_sched_unlock>
	bool ret = true;
   131fe:	2001      	movs	r0, #1
   13200:	e7c3      	b.n	1318a <pm_system_suspend+0x56>
   13202:	bf00      	nop
   13204:	2000281c 	.word	0x2000281c
   13208:	20001f28 	.word	0x20001f28
   1320c:	20001f1c 	.word	0x20001f1c
   13210:	000f423f 	.word	0x000f423f
   13214:	000f4240 	.word	0x000f4240
   13218:	20001f2c 	.word	0x20001f2c
   1321c:	0002045b 	.word	0x0002045b

00013220 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13220:	4b05      	ldr	r3, [pc, #20]	; (13238 <pm_policy_state_lock_is_active+0x18>)
   13222:	f3bf 8f5b 	dmb	ish
   13226:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1322a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   1322e:	3800      	subs	r0, #0
   13230:	bf18      	it	ne
   13232:	2001      	movne	r0, #1
   13234:	4770      	bx	lr
   13236:	bf00      	nop
   13238:	20001f30 	.word	0x20001f30

0001323c <pm_policy_next_state>:
{
   1323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13240:	b085      	sub	sp, #20
   13242:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13244:	a903      	add	r1, sp, #12
   13246:	f000 f847 	bl	132d8 <pm_state_cpu_get_all>
   1324a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 132cc <pm_policy_next_state+0x90>
   1324e:	f8df a080 	ldr.w	sl, [pc, #128]	; 132d0 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13252:	1e44      	subs	r4, r0, #1
   13254:	b224      	sxth	r4, r4
   13256:	f04f 0b00 	mov.w	fp, #0
   1325a:	1c63      	adds	r3, r4, #1
   1325c:	d104      	bne.n	13268 <pm_policy_next_state+0x2c>
	return NULL;
   1325e:	2600      	movs	r6, #0
}
   13260:	4630      	mov	r0, r6
   13262:	b005      	add	sp, #20
   13264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   13268:	9a03      	ldr	r2, [sp, #12]
   1326a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1326e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   13272:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   13276:	f7ff ffd3 	bl	13220 <pm_policy_state_lock_is_active>
   1327a:	4605      	mov	r5, r0
   1327c:	bb10      	cbnz	r0, 132c4 <pm_policy_next_state+0x88>
   1327e:	6870      	ldr	r0, [r6, #4]
   13280:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   13284:	46c4      	mov	ip, r8
   13286:	4629      	mov	r1, r5
   13288:	fbe0 c109 	umlal	ip, r1, r0, r9
   1328c:	4652      	mov	r2, sl
   1328e:	465b      	mov	r3, fp
   13290:	4660      	mov	r0, ip
   13292:	f7ed fde3 	bl	e5c <__aeabi_uldivmod>
   13296:	9001      	str	r0, [sp, #4]
   13298:	68b0      	ldr	r0, [r6, #8]
   1329a:	46c4      	mov	ip, r8
   1329c:	4629      	mov	r1, r5
   1329e:	fbe0 c109 	umlal	ip, r1, r0, r9
   132a2:	465b      	mov	r3, fp
   132a4:	4652      	mov	r2, sl
   132a6:	4660      	mov	r0, ip
   132a8:	f7ed fdd8 	bl	e5c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   132ac:	4b09      	ldr	r3, [pc, #36]	; (132d4 <pm_policy_next_state+0x98>)
   132ae:	681b      	ldr	r3, [r3, #0]
   132b0:	1c59      	adds	r1, r3, #1
   132b2:	d001      	beq.n	132b8 <pm_policy_next_state+0x7c>
   132b4:	4283      	cmp	r3, r0
   132b6:	d905      	bls.n	132c4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   132b8:	1c7a      	adds	r2, r7, #1
   132ba:	d0d1      	beq.n	13260 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   132bc:	9b01      	ldr	r3, [sp, #4]
   132be:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   132c0:	42b8      	cmp	r0, r7
   132c2:	d9cd      	bls.n	13260 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   132c4:	3c01      	subs	r4, #1
   132c6:	b224      	sxth	r4, r4
   132c8:	e7c7      	b.n	1325a <pm_policy_next_state+0x1e>
   132ca:	bf00      	nop
   132cc:	000f423f 	.word	0x000f423f
   132d0:	000f4240 	.word	0x000f4240
   132d4:	20000600 	.word	0x20000600

000132d8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   132d8:	b908      	cbnz	r0, 132de <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   132da:	4b02      	ldr	r3, [pc, #8]	; (132e4 <pm_state_cpu_get_all+0xc>)
   132dc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   132de:	2000      	movs	r0, #0
   132e0:	4770      	bx	lr
   132e2:	bf00      	nop
   132e4:	000240e8 	.word	0x000240e8

000132e8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   132e8:	4904      	ldr	r1, [pc, #16]	; (132fc <sub_bytes+0x14>)
   132ea:	1e43      	subs	r3, r0, #1
   132ec:	300f      	adds	r0, #15
   132ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   132f2:	5c8a      	ldrb	r2, [r1, r2]
   132f4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   132f6:	4283      	cmp	r3, r0
   132f8:	d1f9      	bne.n	132ee <sub_bytes+0x6>
	}
}
   132fa:	4770      	bx	lr
   132fc:	00024b99 	.word	0x00024b99

00013300 <tc_aes128_set_encrypt_key>:
{
   13300:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   13302:	4e26      	ldr	r6, [pc, #152]	; (1339c <tc_aes128_set_encrypt_key+0x9c>)
{
   13304:	4607      	mov	r7, r0
   13306:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13308:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1330a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1330c:	ad01      	add	r5, sp, #4
   1330e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13314:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1331c:	4638      	mov	r0, r7
   1331e:	2f00      	cmp	r7, #0
   13320:	d038      	beq.n	13394 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   13322:	2c00      	cmp	r4, #0
   13324:	d038      	beq.n	13398 <tc_aes128_set_encrypt_key+0x98>
   13326:	1f38      	subs	r0, r7, #4
   13328:	4621      	mov	r1, r4
   1332a:	4602      	mov	r2, r0
   1332c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1332e:	784b      	ldrb	r3, [r1, #1]
   13330:	780d      	ldrb	r5, [r1, #0]
   13332:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13334:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13338:	78cd      	ldrb	r5, [r1, #3]
   1333a:	432b      	orrs	r3, r5
   1333c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   1333e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13340:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13344:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13346:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1334a:	d1f0      	bne.n	1332e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1334c:	4c14      	ldr	r4, [pc, #80]	; (133a0 <tc_aes128_set_encrypt_key+0xa0>)
   1334e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13350:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13352:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13354:	d116      	bne.n	13384 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13356:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1335a:	5ca5      	ldrb	r5, [r4, r2]
   1335c:	0e1a      	lsrs	r2, r3, #24
   1335e:	5ca2      	ldrb	r2, [r4, r2]
   13360:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13364:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13368:	b2db      	uxtb	r3, r3
   1336a:	5d65      	ldrb	r5, [r4, r5]
   1336c:	5ce3      	ldrb	r3, [r4, r3]
   1336e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13372:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13376:	ad0c      	add	r5, sp, #48	; 0x30
   13378:	f021 0303 	bic.w	r3, r1, #3
   1337c:	442b      	add	r3, r5
   1337e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13382:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13384:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13388:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1338a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1338c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1338e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13390:	d1de      	bne.n	13350 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   13392:	2001      	movs	r0, #1
}
   13394:	b00d      	add	sp, #52	; 0x34
   13396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13398:	4620      	mov	r0, r4
   1339a:	e7fb      	b.n	13394 <tc_aes128_set_encrypt_key+0x94>
   1339c:	00023c6c 	.word	0x00023c6c
   133a0:	00024b99 	.word	0x00024b99

000133a4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   133a4:	4801      	ldr	r0, [pc, #4]	; (133ac <nrf_cc3xx_platform_abort_init+0x8>)
   133a6:	f009 b97d 	b.w	1c6a4 <nrf_cc3xx_platform_set_abort>
   133aa:	bf00      	nop
   133ac:	000240e8 	.word	0x000240e8

000133b0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   133b0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   133b2:	4604      	mov	r4, r0
   133b4:	b918      	cbnz	r0, 133be <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   133b6:	4b0d      	ldr	r3, [pc, #52]	; (133ec <mutex_free_platform+0x3c>)
   133b8:	480d      	ldr	r0, [pc, #52]	; (133f0 <mutex_free_platform+0x40>)
   133ba:	685b      	ldr	r3, [r3, #4]
   133bc:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   133be:	6861      	ldr	r1, [r4, #4]
   133c0:	2908      	cmp	r1, #8
   133c2:	d00d      	beq.n	133e0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   133c4:	f031 0304 	bics.w	r3, r1, #4
   133c8:	d00a      	beq.n	133e0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   133ca:	f011 0102 	ands.w	r1, r1, #2
   133ce:	d008      	beq.n	133e2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   133d0:	4808      	ldr	r0, [pc, #32]	; (133f4 <mutex_free_platform+0x44>)
   133d2:	4621      	mov	r1, r4
   133d4:	f00f fcb6 	bl	22d44 <k_mem_slab_free>
        mutex->mutex = NULL;
   133d8:	2300      	movs	r3, #0
   133da:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   133dc:	2300      	movs	r3, #0
   133de:	6063      	str	r3, [r4, #4]
}
   133e0:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   133e2:	6820      	ldr	r0, [r4, #0]
   133e4:	2214      	movs	r2, #20
   133e6:	f010 f9fd 	bl	237e4 <memset>
   133ea:	e7f7      	b.n	133dc <mutex_free_platform+0x2c>
   133ec:	200007e4 	.word	0x200007e4
   133f0:	00024c99 	.word	0x00024c99
   133f4:	20001f4c 	.word	0x20001f4c

000133f8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   133f8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   133fa:	b308      	cbz	r0, 13440 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   133fc:	6843      	ldr	r3, [r0, #4]
   133fe:	2b04      	cmp	r3, #4
   13400:	d110      	bne.n	13424 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13402:	2201      	movs	r2, #1
   13404:	6803      	ldr	r3, [r0, #0]
   13406:	f3bf 8f5b 	dmb	ish
   1340a:	e853 1f00 	ldrex	r1, [r3]
   1340e:	2900      	cmp	r1, #0
   13410:	d103      	bne.n	1341a <mutex_lock_platform+0x22>
   13412:	e843 2000 	strex	r0, r2, [r3]
   13416:	2800      	cmp	r0, #0
   13418:	d1f7      	bne.n	1340a <mutex_lock_platform+0x12>
   1341a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1341e:	d10b      	bne.n	13438 <mutex_lock_platform+0x40>
   13420:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   13422:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13424:	b153      	cbz	r3, 1343c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13426:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   13428:	f04f 32ff 	mov.w	r2, #4294967295
   1342c:	f04f 33ff 	mov.w	r3, #4294967295
   13430:	f007 fc92 	bl	1ad58 <z_impl_k_mutex_lock>
        if (ret == 0) {
   13434:	2800      	cmp	r0, #0
   13436:	d0f3      	beq.n	13420 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13438:	4803      	ldr	r0, [pc, #12]	; (13448 <mutex_lock_platform+0x50>)
   1343a:	e7f2      	b.n	13422 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1343c:	4803      	ldr	r0, [pc, #12]	; (1344c <mutex_lock_platform+0x54>)
   1343e:	e7f0      	b.n	13422 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13440:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13444:	e7ed      	b.n	13422 <mutex_lock_platform+0x2a>
   13446:	bf00      	nop
   13448:	ffff8fe9 	.word	0xffff8fe9
   1344c:	ffff8fea 	.word	0xffff8fea

00013450 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13450:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13452:	b1d0      	cbz	r0, 1348a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13454:	6843      	ldr	r3, [r0, #4]
   13456:	2b04      	cmp	r3, #4
   13458:	d111      	bne.n	1347e <mutex_unlock_platform+0x2e>
   1345a:	2200      	movs	r2, #0
   1345c:	6803      	ldr	r3, [r0, #0]
   1345e:	f3bf 8f5b 	dmb	ish
   13462:	e853 1f00 	ldrex	r1, [r3]
   13466:	2901      	cmp	r1, #1
   13468:	d103      	bne.n	13472 <mutex_unlock_platform+0x22>
   1346a:	e843 2000 	strex	r0, r2, [r3]
   1346e:	2800      	cmp	r0, #0
   13470:	d1f7      	bne.n	13462 <mutex_unlock_platform+0x12>
   13472:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13476:	4807      	ldr	r0, [pc, #28]	; (13494 <mutex_unlock_platform+0x44>)
   13478:	bf08      	it	eq
   1347a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1347c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1347e:	b13b      	cbz	r3, 13490 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13480:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   13482:	f007 fce1 	bl	1ae48 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13486:	2000      	movs	r0, #0
   13488:	e7f8      	b.n	1347c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1348a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1348e:	e7f5      	b.n	1347c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13490:	4801      	ldr	r0, [pc, #4]	; (13498 <mutex_unlock_platform+0x48>)
   13492:	e7f3      	b.n	1347c <mutex_unlock_platform+0x2c>
   13494:	ffff8fe9 	.word	0xffff8fe9
   13498:	ffff8fea 	.word	0xffff8fea

0001349c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1349c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1349e:	4604      	mov	r4, r0
   134a0:	b918      	cbnz	r0, 134aa <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   134a2:	4b16      	ldr	r3, [pc, #88]	; (134fc <mutex_init_platform+0x60>)
   134a4:	4816      	ldr	r0, [pc, #88]	; (13500 <mutex_init_platform+0x64>)
   134a6:	685b      	ldr	r3, [r3, #4]
   134a8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   134aa:	6863      	ldr	r3, [r4, #4]
   134ac:	2b04      	cmp	r3, #4
   134ae:	d023      	beq.n	134f8 <mutex_init_platform+0x5c>
   134b0:	2b08      	cmp	r3, #8
   134b2:	d021      	beq.n	134f8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   134b4:	b9cb      	cbnz	r3, 134ea <mutex_init_platform+0x4e>
   134b6:	6823      	ldr	r3, [r4, #0]
   134b8:	b9bb      	cbnz	r3, 134ea <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   134ba:	4812      	ldr	r0, [pc, #72]	; (13504 <mutex_init_platform+0x68>)
   134bc:	f04f 32ff 	mov.w	r2, #4294967295
   134c0:	f04f 33ff 	mov.w	r3, #4294967295
   134c4:	4621      	mov	r1, r4
   134c6:	f007 fb43 	bl	1ab50 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   134ca:	b908      	cbnz	r0, 134d0 <mutex_init_platform+0x34>
   134cc:	6823      	ldr	r3, [r4, #0]
   134ce:	b91b      	cbnz	r3, 134d8 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   134d0:	4b0a      	ldr	r3, [pc, #40]	; (134fc <mutex_init_platform+0x60>)
   134d2:	480d      	ldr	r0, [pc, #52]	; (13508 <mutex_init_platform+0x6c>)
   134d4:	685b      	ldr	r3, [r3, #4]
   134d6:	4798      	blx	r3
   134d8:	6820      	ldr	r0, [r4, #0]
   134da:	2214      	movs	r2, #20
   134dc:	2100      	movs	r1, #0
   134de:	f010 f981 	bl	237e4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   134e2:	6863      	ldr	r3, [r4, #4]
   134e4:	f043 0302 	orr.w	r3, r3, #2
   134e8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   134ea:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   134ec:	f00f fc6d 	bl	22dca <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   134f0:	6863      	ldr	r3, [r4, #4]
   134f2:	f043 0301 	orr.w	r3, r3, #1
   134f6:	6063      	str	r3, [r4, #4]
}
   134f8:	bd10      	pop	{r4, pc}
   134fa:	bf00      	nop
   134fc:	200007e4 	.word	0x200007e4
   13500:	00024c99 	.word	0x00024c99
   13504:	20001f4c 	.word	0x20001f4c
   13508:	00024cbf 	.word	0x00024cbf

0001350c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1350c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1350e:	4906      	ldr	r1, [pc, #24]	; (13528 <nrf_cc3xx_platform_mutex_init+0x1c>)
   13510:	4806      	ldr	r0, [pc, #24]	; (1352c <nrf_cc3xx_platform_mutex_init+0x20>)
   13512:	2340      	movs	r3, #64	; 0x40
   13514:	2214      	movs	r2, #20
   13516:	f00f fbfa 	bl	22d0e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1351e:	4904      	ldr	r1, [pc, #16]	; (13530 <nrf_cc3xx_platform_mutex_init+0x24>)
   13520:	4804      	ldr	r0, [pc, #16]	; (13534 <nrf_cc3xx_platform_mutex_init+0x28>)
   13522:	f009 b973 	b.w	1c80c <nrf_cc3xx_platform_set_mutexes>
   13526:	bf00      	nop
   13528:	20001f68 	.word	0x20001f68
   1352c:	20001f4c 	.word	0x20001f4c
   13530:	00024100 	.word	0x00024100
   13534:	000240f0 	.word	0x000240f0

00013538 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13538:	4901      	ldr	r1, [pc, #4]	; (13540 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1353a:	2210      	movs	r2, #16
	str	r2, [r1]
   1353c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1353e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13540:	e000ed10 	.word	0xe000ed10

00013544 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13544:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13546:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13548:	f380 8811 	msr	BASEPRI, r0
	isb
   1354c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13550:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13554:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13556:	b662      	cpsie	i
	isb
   13558:	f3bf 8f6f 	isb	sy

	bx	lr
   1355c:	4770      	bx	lr
   1355e:	bf00      	nop

00013560 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13560:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13562:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13564:	f381 8811 	msr	BASEPRI, r1

	wfe
   13568:	bf20      	wfe

	msr	BASEPRI, r0
   1356a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1356e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13570:	4770      	bx	lr
   13572:	bf00      	nop

00013574 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13574:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13576:	2b00      	cmp	r3, #0
   13578:	db08      	blt.n	1358c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1357a:	2201      	movs	r2, #1
   1357c:	f000 001f 	and.w	r0, r0, #31
   13580:	fa02 f000 	lsl.w	r0, r2, r0
   13584:	095b      	lsrs	r3, r3, #5
   13586:	4a02      	ldr	r2, [pc, #8]	; (13590 <arch_irq_enable+0x1c>)
   13588:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1358c:	4770      	bx	lr
   1358e:	bf00      	nop
   13590:	e000e100 	.word	0xe000e100

00013594 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13594:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13596:	2b00      	cmp	r3, #0
   13598:	db0d      	blt.n	135b6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1359a:	2201      	movs	r2, #1
   1359c:	095b      	lsrs	r3, r3, #5
   1359e:	f000 001f 	and.w	r0, r0, #31
   135a2:	fa02 f000 	lsl.w	r0, r2, r0
   135a6:	3320      	adds	r3, #32
   135a8:	4a03      	ldr	r2, [pc, #12]	; (135b8 <arch_irq_disable+0x24>)
   135aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   135ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   135b2:	f3bf 8f6f 	isb	sy
}
   135b6:	4770      	bx	lr
   135b8:	e000e100 	.word	0xe000e100

000135bc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   135bc:	4b05      	ldr	r3, [pc, #20]	; (135d4 <arch_irq_is_enabled+0x18>)
   135be:	0942      	lsrs	r2, r0, #5
   135c0:	f000 001f 	and.w	r0, r0, #31
   135c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   135c8:	2301      	movs	r3, #1
   135ca:	fa03 f000 	lsl.w	r0, r3, r0
}
   135ce:	4010      	ands	r0, r2
   135d0:	4770      	bx	lr
   135d2:	bf00      	nop
   135d4:	e000e100 	.word	0xe000e100

000135d8 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   135d8:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   135da:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   135dc:	bf54      	ite	pl
   135de:	1c8b      	addpl	r3, r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   135e0:	2300      	movmi	r3, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   135e2:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135e4:	bfac      	ite	ge
   135e6:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135ea:	4a07      	ldrlt	r2, [pc, #28]	; (13608 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135ec:	ea4f 1343 	mov.w	r3, r3, lsl #5
   135f0:	bfac      	ite	ge
   135f2:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135f6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135fa:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   135fc:	bfb4      	ite	lt
   135fe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13600:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   13604:	4770      	bx	lr
   13606:	bf00      	nop
   13608:	e000ed14 	.word	0xe000ed14

0001360c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1360c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1360e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13610:	4b04      	ldr	r3, [pc, #16]	; (13624 <_arch_isr_direct_pm+0x18>)
   13612:	699a      	ldr	r2, [r3, #24]
   13614:	b11a      	cbz	r2, 1361e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13616:	2200      	movs	r2, #0
   13618:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1361a:	f00f fbc7 	bl	22dac <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1361e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13620:	bd08      	pop	{r3, pc}
   13622:	bf00      	nop
   13624:	2000281c 	.word	0x2000281c

00013628 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13628:	bf30      	wfi
    b z_SysNmiOnReset
   1362a:	f7ff bffd 	b.w	13628 <z_SysNmiOnReset>
   1362e:	bf00      	nop

00013630 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13630:	4a0b      	ldr	r2, [pc, #44]	; (13660 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   13632:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13634:	4b0b      	ldr	r3, [pc, #44]	; (13664 <z_arm_prep_c+0x34>)
   13636:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1363a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1363c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13640:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13644:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13648:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1364c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13650:	f007 f99a 	bl	1a988 <z_bss_zero>
	z_data_copy();
   13654:	f008 f9d8 	bl	1ba08 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13658:	f000 f9d6 	bl	13a08 <z_arm_interrupt_init>
	z_cstart();
   1365c:	f007 f9d8 	bl	1aa10 <z_cstart>
   13660:	00000000 	.word	0x00000000
   13664:	e000ed00 	.word	0xe000ed00

00013668 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13668:	4a09      	ldr	r2, [pc, #36]	; (13690 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1366a:	490a      	ldr	r1, [pc, #40]	; (13694 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1366c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1366e:	6809      	ldr	r1, [r1, #0]
   13670:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13672:	4909      	ldr	r1, [pc, #36]	; (13698 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13674:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13676:	684b      	ldr	r3, [r1, #4]
   13678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1367c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1367e:	2300      	movs	r3, #0
   13680:	f383 8811 	msr	BASEPRI, r3
   13684:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13688:	6893      	ldr	r3, [r2, #8]
}
   1368a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   1368c:	4770      	bx	lr
   1368e:	bf00      	nop
   13690:	2000281c 	.word	0x2000281c
   13694:	00024538 	.word	0x00024538
   13698:	e000ed00 	.word	0xe000ed00

0001369c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1369c:	4912      	ldr	r1, [pc, #72]	; (136e8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1369e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   136a0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   136a4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   136a6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   136aa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   136ae:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   136b0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   136b4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   136b8:	4f0c      	ldr	r7, [pc, #48]	; (136ec <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   136ba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   136be:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   136c0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   136c2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   136c4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   136c6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   136c8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   136ca:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   136ce:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   136d0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   136d2:	f000 fa35 	bl	13b40 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   136d6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   136da:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   136de:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   136e2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   136e6:	4770      	bx	lr
    ldr r1, =_kernel
   136e8:	2000281c 	.word	0x2000281c
    ldr v4, =_SCS_ICSR
   136ec:	e000ed04 	.word	0xe000ed04

000136f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   136f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   136f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   136f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   136fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   136fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13700:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13704:	2902      	cmp	r1, #2
    beq _oops
   13706:	d0ff      	beq.n	13708 <_oops>

00013708 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13708:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1370a:	f00c fe92 	bl	20432 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1370e:	bd01      	pop	{r0, pc}

00013710 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13710:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13714:	9b00      	ldr	r3, [sp, #0]
   13716:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1371a:	490a      	ldr	r1, [pc, #40]	; (13744 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1371c:	9b01      	ldr	r3, [sp, #4]
   1371e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13722:	9b02      	ldr	r3, [sp, #8]
   13724:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13728:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1372c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13730:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13734:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13738:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1373a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1373c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1373e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13740:	4770      	bx	lr
   13742:	bf00      	nop
   13744:	0001fb53 	.word	0x0001fb53

00013748 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13748:	4a09      	ldr	r2, [pc, #36]	; (13770 <z_check_thread_stack_fail+0x28>)
{
   1374a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1374c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1374e:	b170      	cbz	r0, 1376e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13750:	f113 0f16 	cmn.w	r3, #22
   13754:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13756:	d005      	beq.n	13764 <z_check_thread_stack_fail+0x1c>
   13758:	f1a0 0220 	sub.w	r2, r0, #32
   1375c:	429a      	cmp	r2, r3
   1375e:	d805      	bhi.n	1376c <z_check_thread_stack_fail+0x24>
   13760:	4283      	cmp	r3, r0
   13762:	d203      	bcs.n	1376c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   13764:	4281      	cmp	r1, r0
   13766:	bf28      	it	cs
   13768:	2000      	movcs	r0, #0
   1376a:	4770      	bx	lr
   1376c:	2000      	movs	r0, #0
}
   1376e:	4770      	bx	lr
   13770:	2000281c 	.word	0x2000281c

00013774 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13774:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13776:	4b09      	ldr	r3, [pc, #36]	; (1379c <arch_switch_to_main_thread+0x28>)
   13778:	6098      	str	r0, [r3, #8]
{
   1377a:	460d      	mov	r5, r1
   1377c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1377e:	f000 f9df 	bl	13b40 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13782:	4620      	mov	r0, r4
   13784:	f385 8809 	msr	PSP, r5
   13788:	2100      	movs	r1, #0
   1378a:	b663      	cpsie	if
   1378c:	f381 8811 	msr	BASEPRI, r1
   13790:	f3bf 8f6f 	isb	sy
   13794:	2200      	movs	r2, #0
   13796:	2300      	movs	r3, #0
   13798:	f00c f9db 	bl	1fb52 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1379c:	2000281c 	.word	0x2000281c

000137a0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   137a0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   137a2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   137a4:	4a0b      	ldr	r2, [pc, #44]	; (137d4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   137a6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   137a8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   137aa:	bf1e      	ittt	ne
	movne	r1, #0
   137ac:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   137ae:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   137b0:	f00f fafc 	blne	22dac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   137b4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   137b6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   137ba:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   137be:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   137c2:	4905      	ldr	r1, [pc, #20]	; (137d8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   137c4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   137c6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   137c8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   137ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   137ce:	4903      	ldr	r1, [pc, #12]	; (137dc <_isr_wrapper+0x3c>)
	bx r1
   137d0:	4708      	bx	r1
   137d2:	0000      	.short	0x0000
	ldr r2, =_kernel
   137d4:	2000281c 	.word	0x2000281c
	ldr r1, =_sw_isr_table
   137d8:	00023a18 	.word	0x00023a18
	ldr r1, =z_arm_int_exit
   137dc:	000137e1 	.word	0x000137e1

000137e0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   137e0:	4b04      	ldr	r3, [pc, #16]	; (137f4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   137e2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   137e4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   137e6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   137e8:	d003      	beq.n	137f2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   137ea:	4903      	ldr	r1, [pc, #12]	; (137f8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   137ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   137f0:	600a      	str	r2, [r1, #0]

000137f2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   137f2:	4770      	bx	lr
	ldr r3, =_kernel
   137f4:	2000281c 	.word	0x2000281c
	ldr r1, =_SCS_ICSR
   137f8:	e000ed04 	.word	0xe000ed04

000137fc <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   137fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   137fe:	4b1c      	ldr	r3, [pc, #112]	; (13870 <mem_manage_fault+0x74>)
{
   13800:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
   13808:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1380a:	0790      	lsls	r0, r2, #30
   1380c:	d520      	bpl.n	13850 <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   1380e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13812:	0612      	lsls	r2, r2, #24
   13814:	d51c      	bpl.n	13850 <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   13816:	b119      	cbz	r1, 13820 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1381a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1381e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13826:	06d2      	lsls	r2, r2, #27
   13828:	d415      	bmi.n	13856 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   1382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1382c:	079b      	lsls	r3, r3, #30
   1382e:	d412      	bmi.n	13856 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13830:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13832:	4b0f      	ldr	r3, [pc, #60]	; (13870 <mem_manage_fault+0x74>)
   13834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13836:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   13838:	bf42      	ittt	mi
   1383a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1383c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   13840:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13844:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13848:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1384a:	2300      	movs	r3, #0
   1384c:	7023      	strb	r3, [r4, #0]

	return reason;
}
   1384e:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
   13850:	f06f 0015 	mvn.w	r0, #21
   13854:	e7e4      	b.n	13820 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13856:	4b06      	ldr	r3, [pc, #24]	; (13870 <mem_manage_fault+0x74>)
   13858:	685b      	ldr	r3, [r3, #4]
   1385a:	0519      	lsls	r1, r3, #20
   1385c:	d5e8      	bpl.n	13830 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1385e:	4629      	mov	r1, r5
   13860:	f7ff ff72 	bl	13748 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13864:	2800      	cmp	r0, #0
   13866:	d0e3      	beq.n	13830 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13868:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1386c:	2002      	movs	r0, #2
   1386e:	e7e0      	b.n	13832 <mem_manage_fault+0x36>
   13870:	e000ed00 	.word	0xe000ed00

00013874 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13874:	4b0d      	ldr	r3, [pc, #52]	; (138ac <bus_fault.constprop.0+0x38>)
   13876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1387a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1387c:	0592      	lsls	r2, r2, #22
   1387e:	d508      	bpl.n	13892 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13880:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13884:	0412      	lsls	r2, r2, #16
   13886:	d504      	bpl.n	13892 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   13888:	b118      	cbz	r0, 13892 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1388a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1388c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13890:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13892:	4b06      	ldr	r3, [pc, #24]	; (138ac <bus_fault.constprop.0+0x38>)
   13894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13898:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1389a:	bf58      	it	pl
   1389c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1389e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   138a0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   138a2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   138a6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   138a8:	7008      	strb	r0, [r1, #0]

	return reason;
}
   138aa:	4770      	bx	lr
   138ac:	e000ed00 	.word	0xe000ed00

000138b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   138b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   138b2:	4b4b      	ldr	r3, [pc, #300]	; (139e0 <z_arm_fault+0x130>)
   138b4:	685b      	ldr	r3, [r3, #4]
{
   138b6:	b08b      	sub	sp, #44	; 0x2c
   138b8:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   138ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   138be:	2500      	movs	r5, #0
   138c0:	f385 8811 	msr	BASEPRI, r5
   138c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   138c8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
   138cc:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   138d0:	d111      	bne.n	138f6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   138d2:	f002 010c 	and.w	r1, r2, #12
   138d6:	2908      	cmp	r1, #8
   138d8:	d00d      	beq.n	138f6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   138da:	0716      	lsls	r6, r2, #28
   138dc:	d401      	bmi.n	138e2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   138de:	4604      	mov	r4, r0
			*nested_exc = true;
   138e0:	2501      	movs	r5, #1
	*recoverable = false;
   138e2:	2200      	movs	r2, #0
	switch (fault) {
   138e4:	3b03      	subs	r3, #3
	*recoverable = false;
   138e6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   138ea:	2b03      	cmp	r3, #3
   138ec:	d871      	bhi.n	139d2 <z_arm_fault+0x122>
   138ee:	e8df f003 	tbb	[pc, r3]
   138f2:	5b04      	.short	0x5b04
   138f4:	635f      	.short	0x635f
		return NULL;
   138f6:	462c      	mov	r4, r5
   138f8:	e7f3      	b.n	138e2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   138fa:	4a39      	ldr	r2, [pc, #228]	; (139e0 <z_arm_fault+0x130>)
   138fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   138fe:	f013 0302 	ands.w	r3, r3, #2
   13902:	d166      	bne.n	139d2 <z_arm_fault+0x122>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   13904:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   13906:	2900      	cmp	r1, #0
   13908:	db15      	blt.n	13936 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1390a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   1390c:	0049      	lsls	r1, r1, #1
   1390e:	d512      	bpl.n	13936 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
   13910:	69a1      	ldr	r1, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   13912:	f831 0c02 	ldrh.w	r0, [r1, #-2]
   13916:	f64d 7102 	movw	r1, #57090	; 0xdf02
   1391a:	4288      	cmp	r0, r1
   1391c:	d00a      	beq.n	13934 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
   1391e:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   13922:	b339      	cbz	r1, 13974 <z_arm_fault+0xc4>
			reason = mem_manage_fault(esf, 1, recoverable);
   13924:	f10d 0207 	add.w	r2, sp, #7
   13928:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1392a:	4620      	mov	r0, r4
   1392c:	f7ff ff66 	bl	137fc <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   13930:	4603      	mov	r3, r0
		break;
   13932:	e000      	b.n	13936 <z_arm_fault+0x86>
			reason = esf->basic.r0;
   13934:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13936:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1393a:	b9ca      	cbnz	r2, 13970 <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1393c:	ae02      	add	r6, sp, #8
   1393e:	f104 0720 	add.w	r7, r4, #32
   13942:	6820      	ldr	r0, [r4, #0]
   13944:	6861      	ldr	r1, [r4, #4]
   13946:	4632      	mov	r2, r6
   13948:	c203      	stmia	r2!, {r0, r1}
   1394a:	3408      	adds	r4, #8
   1394c:	42bc      	cmp	r4, r7
   1394e:	4616      	mov	r6, r2
   13950:	d1f7      	bne.n	13942 <z_arm_fault+0x92>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13952:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13954:	2d00      	cmp	r5, #0
   13956:	d03e      	beq.n	139d6 <z_arm_fault+0x126>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13958:	f3c2 0108 	ubfx	r1, r2, #0, #9
   1395c:	b921      	cbnz	r1, 13968 <z_arm_fault+0xb8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1395e:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   13962:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13966:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13968:	a902      	add	r1, sp, #8
   1396a:	4618      	mov	r0, r3
   1396c:	f00c fd5f 	bl	2042e <z_arm_fatal_error>
}
   13970:	b00b      	add	sp, #44	; 0x2c
   13972:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   13974:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
   13978:	b129      	cbz	r1, 13986 <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
   1397a:	f10d 0107 	add.w	r1, sp, #7
   1397e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13980:	f7ff ff78 	bl	13874 <bus_fault.constprop.0>
   13984:	e7d4      	b.n	13930 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
   13986:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
   13988:	b289      	uxth	r1, r1
   1398a:	2900      	cmp	r1, #0
   1398c:	d0d3      	beq.n	13936 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1398e:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13990:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13992:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13994:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13996:	6a91      	ldr	r1, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13998:	6a91      	ldr	r1, [r2, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1399a:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1399c:	ea6f 4101 	mvn.w	r1, r1, lsl #16
   139a0:	ea6f 4111 	mvn.w	r1, r1, lsr #16
   139a4:	6291      	str	r1, [r2, #40]	; 0x28
	return reason;
   139a6:	e7c6      	b.n	13936 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
   139a8:	f10d 0207 	add.w	r2, sp, #7
   139ac:	2100      	movs	r1, #0
   139ae:	e7bc      	b.n	1392a <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   139b0:	f10d 0107 	add.w	r1, sp, #7
   139b4:	2000      	movs	r0, #0
   139b6:	e7e3      	b.n	13980 <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   139b8:	4b09      	ldr	r3, [pc, #36]	; (139e0 <z_arm_fault+0x130>)
   139ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   139bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   139be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   139c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   139c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   139c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   139c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   139c8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   139cc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   139d0:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   139d2:	2300      	movs	r3, #0
   139d4:	e7af      	b.n	13936 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   139d6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   139da:	f022 0201 	bic.w	r2, r2, #1
   139de:	e7c2      	b.n	13966 <z_arm_fault+0xb6>
   139e0:	e000ed00 	.word	0xe000ed00

000139e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   139e4:	4a02      	ldr	r2, [pc, #8]	; (139f0 <z_arm_fault_init+0xc>)
   139e6:	6953      	ldr	r3, [r2, #20]
   139e8:	f043 0310 	orr.w	r3, r3, #16
   139ec:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   139ee:	4770      	bx	lr
   139f0:	e000ed00 	.word	0xe000ed00

000139f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   139f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   139f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   139fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   139fe:	4672      	mov	r2, lr
	bl z_arm_fault
   13a00:	f7ff ff56 	bl	138b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13a04:	bd01      	pop	{r0, pc}
   13a06:	bf00      	nop

00013a08 <z_arm_interrupt_init>:
   13a08:	4804      	ldr	r0, [pc, #16]	; (13a1c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13a0a:	2300      	movs	r3, #0
   13a0c:	2140      	movs	r1, #64	; 0x40
   13a0e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13a10:	3301      	adds	r3, #1
   13a12:	2b30      	cmp	r3, #48	; 0x30
   13a14:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13a18:	d1f9      	bne.n	13a0e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13a1a:	4770      	bx	lr
   13a1c:	e000e100 	.word	0xe000e100

00013a20 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   13a20:	2000      	movs	r0, #0
    msr CONTROL, r0
   13a22:	f380 8814 	msr	CONTROL, r0
    isb
   13a26:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   13a2a:	f00f ff37 	bl	2389c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   13a2e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   13a30:	490d      	ldr	r1, [pc, #52]	; (13a68 <__start+0x48>)
    str r0, [r1]
   13a32:	6008      	str	r0, [r1, #0]
    dsb
   13a34:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13a38:	480c      	ldr	r0, [pc, #48]	; (13a6c <__start+0x4c>)
    msr msp, r0
   13a3a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   13a3e:	f000 f82b 	bl	13a98 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13a42:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   13a44:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13a48:	4809      	ldr	r0, [pc, #36]	; (13a70 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13a4a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   13a4e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13a50:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13a54:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13a58:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13a5a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13a5c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13a60:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13a64:	f7ff fde4 	bl	13630 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   13a68:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   13a6c:	20005800 	.word	0x20005800
    ldr r0, =z_interrupt_stacks
   13a70:	20005980 	.word	0x20005980

00013a74 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   13a74:	4907      	ldr	r1, [pc, #28]	; (13a94 <z_arm_clear_arm_mpu_config+0x20>)
   13a76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   13a7a:	2300      	movs	r3, #0
	int num_regions =
   13a7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   13a80:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   13a82:	4293      	cmp	r3, r2
   13a84:	d100      	bne.n	13a88 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   13a86:	4770      	bx	lr
  MPU->RNR = rnr;
   13a88:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   13a8c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   13a90:	3301      	adds	r3, #1
   13a92:	e7f6      	b.n	13a82 <z_arm_clear_arm_mpu_config+0xe>
   13a94:	e000ed00 	.word	0xe000ed00

00013a98 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   13a98:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   13a9a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   13a9c:	2300      	movs	r3, #0
   13a9e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   13aa2:	f7ff ffe7 	bl	13a74 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   13aa6:	4b14      	ldr	r3, [pc, #80]	; (13af8 <z_arm_init_arch_hw_at_boot+0x60>)
   13aa8:	f04f 32ff 	mov.w	r2, #4294967295
   13aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   13ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   13ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   13ab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   13abc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   13ac0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   13ac4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   13ac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13acc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   13ad0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   13ad4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   13ad8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   13adc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   13ae0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   13ae4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   13ae8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   13aec:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   13aee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13af2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13af6:	bd08      	pop	{r3, pc}
   13af8:	e000e100 	.word	0xe000e100

00013afc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   13afc:	4b08      	ldr	r3, [pc, #32]	; (13b20 <z_impl_k_thread_abort+0x24>)
   13afe:	689b      	ldr	r3, [r3, #8]
   13b00:	4283      	cmp	r3, r0
   13b02:	d10b      	bne.n	13b1c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13b04:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13b08:	b143      	cbz	r3, 13b1c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13b0a:	4b06      	ldr	r3, [pc, #24]	; (13b24 <z_impl_k_thread_abort+0x28>)
   13b0c:	685a      	ldr	r2, [r3, #4]
   13b0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13b12:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   13b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   13b1a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   13b1c:	f007 bf10 	b.w	1b940 <z_thread_abort>
   13b20:	2000281c 	.word	0x2000281c
   13b24:	e000ed00 	.word	0xe000ed00

00013b28 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13b28:	4b02      	ldr	r3, [pc, #8]	; (13b34 <z_arm_configure_static_mpu_regions+0xc>)
   13b2a:	4a03      	ldr	r2, [pc, #12]	; (13b38 <z_arm_configure_static_mpu_regions+0x10>)
   13b2c:	4803      	ldr	r0, [pc, #12]	; (13b3c <z_arm_configure_static_mpu_regions+0x14>)
   13b2e:	2101      	movs	r1, #1
   13b30:	f000 b86e 	b.w	13c10 <arm_core_mpu_configure_static_mpu_regions>
   13b34:	20040000 	.word	0x20040000
   13b38:	20000000 	.word	0x20000000
   13b3c:	00024114 	.word	0x00024114

00013b40 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13b40:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   13b42:	4b05      	ldr	r3, [pc, #20]	; (13b58 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   13b44:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   13b46:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13b48:	4a04      	ldr	r2, [pc, #16]	; (13b5c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13b4a:	2120      	movs	r1, #32
   13b4c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13b50:	4618      	mov	r0, r3
   13b52:	2101      	movs	r1, #1
   13b54:	f000 b866 	b.w	13c24 <arm_core_mpu_configure_dynamic_mpu_regions>
   13b58:	20002468 	.word	0x20002468
   13b5c:	150b0000 	.word	0x150b0000

00013b60 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13b60:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   13b62:	4f1f      	ldr	r7, [pc, #124]	; (13be0 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13b64:	2600      	movs	r6, #0
   13b66:	428e      	cmp	r6, r1
   13b68:	db01      	blt.n	13b6e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13b6a:	4610      	mov	r0, r2
   13b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   13b6e:	6844      	ldr	r4, [r0, #4]
   13b70:	b39c      	cbz	r4, 13bda <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   13b72:	b153      	cbz	r3, 13b8a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   13b74:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13b78:	ea14 0f0c 	tst.w	r4, ip
   13b7c:	d118      	bne.n	13bb0 <mpu_configure_regions+0x50>
		&&
   13b7e:	2c1f      	cmp	r4, #31
   13b80:	d916      	bls.n	13bb0 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   13b82:	6805      	ldr	r5, [r0, #0]
		&&
   13b84:	ea1c 0f05 	tst.w	ip, r5
   13b88:	d112      	bne.n	13bb0 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13b8a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13b8c:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13b8e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13b92:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   13b94:	d90f      	bls.n	13bb6 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   13b96:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13b9a:	d80e      	bhi.n	13bba <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13b9c:	3c01      	subs	r4, #1
   13b9e:	fab4 f484 	clz	r4, r4
   13ba2:	f1c4 041f 	rsb	r4, r4, #31
   13ba6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13ba8:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13baa:	ea4c 0404 	orr.w	r4, ip, r4
   13bae:	d906      	bls.n	13bbe <mpu_configure_regions+0x5e>
			return -EINVAL;
   13bb0:	f06f 0215 	mvn.w	r2, #21
   13bb4:	e7d9      	b.n	13b6a <mpu_configure_regions+0xa>
		return REGION_32B;
   13bb6:	2408      	movs	r4, #8
   13bb8:	e7f6      	b.n	13ba8 <mpu_configure_regions+0x48>
		return REGION_4G;
   13bba:	243e      	movs	r4, #62	; 0x3e
   13bbc:	e7f4      	b.n	13ba8 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13bbe:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   13bc2:	4315      	orrs	r5, r2
   13bc4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13bc8:	f044 0401 	orr.w	r4, r4, #1
   13bcc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13bd0:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
   13bd4:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13bd6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   13bda:	3601      	adds	r6, #1
   13bdc:	300c      	adds	r0, #12
   13bde:	e7c2      	b.n	13b66 <mpu_configure_regions+0x6>
   13be0:	e000ed00 	.word	0xe000ed00

00013be4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13be4:	4b04      	ldr	r3, [pc, #16]	; (13bf8 <arm_core_mpu_enable+0x14>)
   13be6:	2205      	movs	r2, #5
   13be8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13bec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13bf0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13bf4:	4770      	bx	lr
   13bf6:	bf00      	nop
   13bf8:	e000ed00 	.word	0xe000ed00

00013bfc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   13bfc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13c00:	4b02      	ldr	r3, [pc, #8]	; (13c0c <arm_core_mpu_disable+0x10>)
   13c02:	2200      	movs	r2, #0
   13c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   13c08:	4770      	bx	lr
   13c0a:	bf00      	nop
   13c0c:	e000ed00 	.word	0xe000ed00

00013c10 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13c10:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13c12:	4c03      	ldr	r4, [pc, #12]	; (13c20 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13c14:	2301      	movs	r3, #1
   13c16:	7822      	ldrb	r2, [r4, #0]
   13c18:	f7ff ffa2 	bl	13b60 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13c1c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13c1e:	bd10      	pop	{r4, pc}
   13c20:	20003338 	.word	0x20003338

00013c24 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13c24:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   13c26:	4a09      	ldr	r2, [pc, #36]	; (13c4c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13c28:	2300      	movs	r3, #0
   13c2a:	7812      	ldrb	r2, [r2, #0]
   13c2c:	f7ff ff98 	bl	13b60 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13c30:	f110 0f16 	cmn.w	r0, #22
   13c34:	d002      	beq.n	13c3c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
   13c36:	4a06      	ldr	r2, [pc, #24]	; (13c50 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13c38:	2807      	cmp	r0, #7
   13c3a:	dd00      	ble.n	13c3e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13c3c:	bd08      	pop	{r3, pc}
   13c3e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
   13c42:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
   13c46:	3001      	adds	r0, #1
   13c48:	e7f6      	b.n	13c38 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
   13c4a:	bf00      	nop
   13c4c:	20003338 	.word	0x20003338
   13c50:	e000ed00 	.word	0xe000ed00

00013c54 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   13c54:	4914      	ldr	r1, [pc, #80]	; (13ca8 <z_arm_mpu_init+0x54>)
   13c56:	6808      	ldr	r0, [r1, #0]
   13c58:	2808      	cmp	r0, #8
{
   13c5a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13c5c:	d821      	bhi.n	13ca2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13c5e:	f7ff ffcd 	bl	13bfc <arm_core_mpu_disable>
   13c62:	4c12      	ldr	r4, [pc, #72]	; (13cac <z_arm_mpu_init+0x58>)
   13c64:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13c66:	2200      	movs	r2, #0
   13c68:	4290      	cmp	r0, r2
   13c6a:	f101 010c 	add.w	r1, r1, #12
   13c6e:	d105      	bne.n	13c7c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13c70:	4b0f      	ldr	r3, [pc, #60]	; (13cb0 <z_arm_mpu_init+0x5c>)
   13c72:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   13c74:	f7ff ffb6 	bl	13be4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13c78:	2000      	movs	r0, #0
}
   13c7a:	bd10      	pop	{r4, pc}
   13c7c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13c80:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   13c84:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13c88:	4313      	orrs	r3, r2
   13c8a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13c8e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13c96:	f043 0301 	orr.w	r3, r3, #1
   13c9a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13c9e:	3201      	adds	r2, #1
   13ca0:	e7e2      	b.n	13c68 <z_arm_mpu_init+0x14>
		return -1;
   13ca2:	f04f 30ff 	mov.w	r0, #4294967295
   13ca6:	e7e8      	b.n	13c7a <z_arm_mpu_init+0x26>
   13ca8:	00024120 	.word	0x00024120
   13cac:	e000ed00 	.word	0xe000ed00
   13cb0:	20003338 	.word	0x20003338

00013cb4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   13cb4:	4b01      	ldr	r3, [pc, #4]	; (13cbc <__stdout_hook_install+0x8>)
   13cb6:	6018      	str	r0, [r3, #0]
}
   13cb8:	4770      	bx	lr
   13cba:	bf00      	nop
   13cbc:	20000624 	.word	0x20000624

00013cc0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   13cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13cc2:	4f0a      	ldr	r7, [pc, #40]	; (13cec <z_impl_zephyr_write_stdout+0x2c>)
   13cc4:	460d      	mov	r5, r1
   13cc6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   13cc8:	f1c0 0401 	rsb	r4, r0, #1
   13ccc:	19a3      	adds	r3, r4, r6
   13cce:	429d      	cmp	r5, r3
   13cd0:	dc01      	bgt.n	13cd6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   13cd2:	4628      	mov	r0, r5
   13cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   13cd6:	7873      	ldrb	r3, [r6, #1]
   13cd8:	2b0a      	cmp	r3, #10
   13cda:	d102      	bne.n	13ce2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   13cdc:	683b      	ldr	r3, [r7, #0]
   13cde:	200d      	movs	r0, #13
   13ce0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   13ce2:	683b      	ldr	r3, [r7, #0]
   13ce4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   13ce8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   13cea:	e7ef      	b.n	13ccc <z_impl_zephyr_write_stdout+0xc>
   13cec:	20000624 	.word	0x20000624

00013cf0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   13cf0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   13cf2:	211d      	movs	r1, #29
   13cf4:	4804      	ldr	r0, [pc, #16]	; (13d08 <__chk_fail+0x18>)
   13cf6:	f7ff ffe3 	bl	13cc0 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   13cfa:	4040      	eors	r0, r0
   13cfc:	f380 8811 	msr	BASEPRI, r0
   13d00:	f04f 0003 	mov.w	r0, #3
   13d04:	df02      	svc	2
	CODE_UNREACHABLE;
   13d06:	bf00      	nop
   13d08:	00024cec 	.word	0x00024cec

00013d0c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13d0c:	f04f 0240 	mov.w	r2, #64	; 0x40
   13d10:	f3ef 8311 	mrs	r3, BASEPRI
   13d14:	f382 8812 	msr	BASEPRI_MAX, r2
   13d18:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13d1c:	4a04      	ldr	r2, [pc, #16]	; (13d30 <nordicsemi_nrf52_init+0x24>)
   13d1e:	2101      	movs	r1, #1
   13d20:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13d24:	f383 8811 	msr	BASEPRI, r3
   13d28:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13d2c:	2000      	movs	r0, #0
   13d2e:	4770      	bx	lr
   13d30:	4001e000 	.word	0x4001e000

00013d34 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
   13d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13d38:	b2c0      	uxtb	r0, r0
   13d3a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   13d3e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13d42:	4905      	ldr	r1, [pc, #20]	; (13d58 <sys_arch_reboot+0x24>)
   13d44:	4b05      	ldr	r3, [pc, #20]	; (13d5c <sys_arch_reboot+0x28>)
   13d46:	68ca      	ldr	r2, [r1, #12]
   13d48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13d4c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13d4e:	60cb      	str	r3, [r1, #12]
   13d50:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13d54:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13d56:	e7fd      	b.n	13d54 <sys_arch_reboot+0x20>
   13d58:	e000ed00 	.word	0xe000ed00
   13d5c:	05fa0004 	.word	0x05fa0004

00013d60 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13d60:	b120      	cbz	r0, 13d6c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13d62:	4b03      	ldr	r3, [pc, #12]	; (13d70 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13d64:	0180      	lsls	r0, r0, #6
   13d66:	f043 0301 	orr.w	r3, r3, #1
   13d6a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13d6c:	4770      	bx	lr
   13d6e:	bf00      	nop
   13d70:	00023cc0 	.word	0x00023cc0

00013d74 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   13d74:	7803      	ldrb	r3, [r0, #0]
   13d76:	2b01      	cmp	r3, #1
{
   13d78:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   13d7a:	d013      	beq.n	13da4 <uuid_to_uuid128+0x30>
   13d7c:	2b02      	cmp	r3, #2
   13d7e:	d027      	beq.n	13dd0 <uuid_to_uuid128+0x5c>
   13d80:	b97b      	cbnz	r3, 13da2 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13d82:	4b19      	ldr	r3, [pc, #100]	; (13de8 <uuid_to_uuid128+0x74>)
   13d84:	460a      	mov	r2, r1
   13d86:	f103 0410 	add.w	r4, r3, #16
   13d8a:	f853 5b04 	ldr.w	r5, [r3], #4
   13d8e:	f842 5b04 	str.w	r5, [r2], #4
   13d92:	42a3      	cmp	r3, r4
   13d94:	d1f9      	bne.n	13d8a <uuid_to_uuid128+0x16>
   13d96:	781b      	ldrb	r3, [r3, #0]
   13d98:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13d9a:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13d9c:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   13d9e:	0a1b      	lsrs	r3, r3, #8
   13da0:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13da2:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   13da4:	4b10      	ldr	r3, [pc, #64]	; (13de8 <uuid_to_uuid128+0x74>)
   13da6:	460a      	mov	r2, r1
   13da8:	f103 0410 	add.w	r4, r3, #16
   13dac:	f853 5b04 	ldr.w	r5, [r3], #4
   13db0:	f842 5b04 	str.w	r5, [r2], #4
   13db4:	42a3      	cmp	r3, r4
   13db6:	d1f9      	bne.n	13dac <uuid_to_uuid128+0x38>
   13db8:	781b      	ldrb	r3, [r3, #0]
   13dba:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13dbc:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   13dbe:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   13dc0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13dc4:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13dc6:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   13dc8:	0a1b      	lsrs	r3, r3, #8
   13dca:	738a      	strb	r2, [r1, #14]
   13dcc:	740b      	strb	r3, [r1, #16]
}
   13dce:	e7e8      	b.n	13da2 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13dd0:	f100 0310 	add.w	r3, r0, #16
   13dd4:	f850 2b04 	ldr.w	r2, [r0], #4
   13dd8:	f841 2b04 	str.w	r2, [r1], #4
   13ddc:	4298      	cmp	r0, r3
   13dde:	d1f9      	bne.n	13dd4 <uuid_to_uuid128+0x60>
   13de0:	7803      	ldrb	r3, [r0, #0]
   13de2:	700b      	strb	r3, [r1, #0]
   13de4:	e7dd      	b.n	13da2 <uuid_to_uuid128+0x2e>
   13de6:	bf00      	nop
   13de8:	00024d19 	.word	0x00024d19

00013dec <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13dec:	b538      	push	{r3, r4, r5, lr}
   13dee:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13df0:	4805      	ldr	r0, [pc, #20]	; (13e08 <bt_buf_get_rx+0x1c>)
   13df2:	f00e faa0 	bl	22336 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   13df6:	4604      	mov	r4, r0
   13df8:	b120      	cbz	r0, 13e04 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   13dfa:	2100      	movs	r1, #0
   13dfc:	3008      	adds	r0, #8
   13dfe:	f00e fab9 	bl	22374 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13e02:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13e04:	4620      	mov	r0, r4
   13e06:	bd38      	pop	{r3, r4, r5, pc}
   13e08:	20000b34 	.word	0x20000b34

00013e0c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13e0c:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   13e0e:	490b      	ldr	r1, [pc, #44]	; (13e3c <bt_buf_get_cmd_complete+0x30>)
{
   13e10:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   13e12:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   13e16:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   13e18:	b920      	cbnz	r0, 13e24 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13e1e:	2001      	movs	r0, #1
   13e20:	f7ff bfe4 	b.w	13dec <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   13e24:	f00e fb00 	bl	22428 <net_buf_ref>
   13e28:	2301      	movs	r3, #1
		buf->len = 0U;
   13e2a:	2100      	movs	r1, #0
   13e2c:	7503      	strb	r3, [r0, #20]
   13e2e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   13e30:	4604      	mov	r4, r0
   13e32:	3008      	adds	r0, #8
   13e34:	f00e fa9e 	bl	22374 <net_buf_simple_reserve>
}
   13e38:	4620      	mov	r0, r4
   13e3a:	bd10      	pop	{r4, pc}
   13e3c:	200002c8 	.word	0x200002c8

00013e40 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   13e40:	b570      	push	{r4, r5, r6, lr}
   13e42:	4604      	mov	r4, r0
	switch (evt) {
   13e44:	2c0f      	cmp	r4, #15
{
   13e46:	460d      	mov	r5, r1
   13e48:	4610      	mov	r0, r2
   13e4a:	4619      	mov	r1, r3
	switch (evt) {
   13e4c:	d805      	bhi.n	13e5a <bt_buf_get_evt+0x1a>
   13e4e:	2c0d      	cmp	r4, #13
   13e50:	d912      	bls.n	13e78 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   13e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13e56:	f7ff bfd9 	b.w	13e0c <bt_buf_get_cmd_complete>
	switch (evt) {
   13e5a:	2c13      	cmp	r4, #19
   13e5c:	d10c      	bne.n	13e78 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   13e5e:	480b      	ldr	r0, [pc, #44]	; (13e8c <bt_buf_get_evt+0x4c>)
   13e60:	f00e fa69 	bl	22336 <net_buf_alloc_fixed>
			if (buf) {
   13e64:	4604      	mov	r4, r0
   13e66:	b128      	cbz	r0, 13e74 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   13e68:	2100      	movs	r1, #0
   13e6a:	3008      	adds	r0, #8
   13e6c:	f00e fa82 	bl	22374 <net_buf_simple_reserve>
   13e70:	2301      	movs	r3, #1
   13e72:	7523      	strb	r3, [r4, #20]
}
   13e74:	4620      	mov	r0, r4
   13e76:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13e78:	4602      	mov	r2, r0
   13e7a:	460b      	mov	r3, r1
		if (discardable) {
   13e7c:	b10d      	cbz	r5, 13e82 <bt_buf_get_evt+0x42>
   13e7e:	4804      	ldr	r0, [pc, #16]	; (13e90 <bt_buf_get_evt+0x50>)
   13e80:	e7ee      	b.n	13e60 <bt_buf_get_evt+0x20>
}
   13e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13e86:	2001      	movs	r0, #1
   13e88:	f7ff bfb0 	b.w	13dec <bt_buf_get_rx>
   13e8c:	20000b60 	.word	0x20000b60
   13e90:	20000ab0 	.word	0x20000ab0

00013e94 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13e94:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13e96:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   13e98:	781a      	ldrb	r2, [r3, #0]
   13e9a:	b972      	cbnz	r2, 13eba <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13e9c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13ea0:	4620      	mov	r0, r4
   13ea2:	f001 fc77 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   13ea6:	4605      	mov	r5, r0
   13ea8:	b940      	cbnz	r0, 13ebc <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   13eaa:	4b08      	ldr	r3, [pc, #32]	; (13ecc <hci_disconn_complete_prio+0x38>)
   13eac:	881a      	ldrh	r2, [r3, #0]
   13eae:	b922      	cbnz	r2, 13eba <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13eb0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13eb4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13eb8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   13eba:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   13ebc:	2101      	movs	r1, #1
   13ebe:	f001 fc71 	bl	157a4 <bt_conn_set_state>
	bt_conn_unref(conn);
   13ec2:	4628      	mov	r0, r5
}
   13ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13ec8:	f00c bfe6 	b.w	20e98 <bt_conn_unref>
   13ecc:	20003320 	.word	0x20003320

00013ed0 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
   13ed0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13ed2:	2101      	movs	r1, #1
   13ed4:	4604      	mov	r4, r0
   13ed6:	3008      	adds	r0, #8
   13ed8:	f00e faf3 	bl	224c2 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13edc:	4621      	mov	r1, r4
   13ede:	4a03      	ldr	r2, [pc, #12]	; (13eec <hci_le_meta_event+0x1c>)
   13ee0:	7800      	ldrb	r0, [r0, #0]
}
   13ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13ee6:	2307      	movs	r3, #7
   13ee8:	f00c bb37 	b.w	2055a <handle_event>
   13eec:	00024170 	.word	0x00024170

00013ef0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13ef0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13ef2:	4c0c      	ldr	r4, [pc, #48]	; (13f24 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13ef4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13ef6:	2205      	movs	r2, #5
   13ef8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   13efc:	f001 fde8 	bl	15ad0 <bt_conn_lookup_state_le>
		if (!conn) {
   13f00:	b970      	cbnz	r0, 13f20 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   13f02:	4b09      	ldr	r3, [pc, #36]	; (13f28 <find_pending_connect.part.0+0x38>)
   13f04:	6818      	ldr	r0, [r3, #0]
   13f06:	889a      	ldrh	r2, [r3, #4]
   13f08:	9000      	str	r0, [sp, #0]
   13f0a:	799b      	ldrb	r3, [r3, #6]
   13f0c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13f10:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   13f14:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13f18:	2204      	movs	r2, #4
   13f1a:	4669      	mov	r1, sp
   13f1c:	f001 fdd8 	bl	15ad0 <bt_conn_lookup_state_le>
}
   13f20:	b002      	add	sp, #8
   13f22:	bd10      	pop	{r4, pc}
   13f24:	200002c8 	.word	0x200002c8
   13f28:	00023cac 	.word	0x00023cac

00013f2c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   13f2c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	BT_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13f2e:	483c      	ldr	r0, [pc, #240]	; (14020 <rx_work_handler+0xf4>)
   13f30:	f00e fa42 	bl	223b8 <net_buf_slist_get>
	if (!buf) {
   13f34:	4604      	mov	r4, r0
   13f36:	2800      	cmp	r0, #0
   13f38:	d071      	beq.n	1401e <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13f3a:	7d03      	ldrb	r3, [r0, #20]
	}

	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
	       buf->len);

	switch (bt_buf_get_type(buf)) {
   13f3c:	2b01      	cmp	r3, #1
   13f3e:	d03f      	beq.n	13fc0 <rx_work_handler+0x94>
   13f40:	2b03      	cmp	r3, #3
   13f42:	d11f      	bne.n	13f84 <rx_work_handler+0x58>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13f44:	8983      	ldrh	r3, [r0, #12]
   13f46:	2b03      	cmp	r3, #3
   13f48:	d80c      	bhi.n	13f64 <rx_work_handler+0x38>
   13f4a:	4a36      	ldr	r2, [pc, #216]	; (14024 <rx_work_handler+0xf8>)
   13f4c:	4936      	ldr	r1, [pc, #216]	; (14028 <rx_work_handler+0xfc>)
   13f4e:	4837      	ldr	r0, [pc, #220]	; (1402c <rx_work_handler+0x100>)
   13f50:	f240 13d9 	movw	r3, #473	; 0x1d9
   13f54:	f00c f812 	bl	1ff7c <assert_print>
   13f58:	4040      	eors	r0, r0
   13f5a:	f380 8811 	msr	BASEPRI, r0
   13f5e:	f04f 0003 	mov.w	r0, #3
   13f62:	df02      	svc	2
   13f64:	2104      	movs	r1, #4
   13f66:	f104 0008 	add.w	r0, r4, #8
   13f6a:	f00e faaa 	bl	224c2 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13f6e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13f70:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13f72:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13f74:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   13f76:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   13f78:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   13f7c:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   13f7e:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   13f80:	d003      	beq.n	13f8a <rx_work_handler+0x5e>
	net_buf_unref(buf);
   13f82:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   13f84:	f003 fa7a 	bl	1747c <net_buf_unref>
		break;
   13f88:	e00f      	b.n	13faa <rx_work_handler+0x7e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13f8a:	f001 fc03 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   13f8e:	4605      	mov	r5, r0
   13f90:	2800      	cmp	r0, #0
   13f92:	d0f6      	beq.n	13f82 <rx_work_handler+0x56>
	acl(buf)->index = bt_conn_index(conn);
   13f94:	f001 fcb6 	bl	15904 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   13f98:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   13f9a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   13f9c:	4621      	mov	r1, r4
   13f9e:	4628      	mov	r0, r5
   13fa0:	f00c ff12 	bl	20dc8 <bt_conn_recv>
	bt_conn_unref(conn);
   13fa4:	4628      	mov	r0, r5
   13fa6:	f00c ff77 	bl	20e98 <bt_conn_unref>
	return list->head;
   13faa:	4b21      	ldr	r3, [pc, #132]	; (14030 <rx_work_handler+0x104>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   13fac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   13fb0:	2b00      	cmp	r3, #0
   13fb2:	d034      	beq.n	1401e <rx_work_handler+0xf2>
#endif
		if (err < 0) {
			BT_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   13fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   13fb8:	491e      	ldr	r1, [pc, #120]	; (14034 <rx_work_handler+0x108>)
   13fba:	481f      	ldr	r0, [pc, #124]	; (14038 <rx_work_handler+0x10c>)
   13fbc:	f00f b872 	b.w	230a4 <k_work_submit_to_queue>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13fc0:	8983      	ldrh	r3, [r0, #12]
   13fc2:	2b01      	cmp	r3, #1
   13fc4:	d80c      	bhi.n	13fe0 <rx_work_handler+0xb4>
   13fc6:	4a17      	ldr	r2, [pc, #92]	; (14024 <rx_work_handler+0xf8>)
   13fc8:	4917      	ldr	r1, [pc, #92]	; (14028 <rx_work_handler+0xfc>)
   13fca:	4818      	ldr	r0, [pc, #96]	; (1402c <rx_work_handler+0x100>)
   13fcc:	f640 1337 	movw	r3, #2359	; 0x937
   13fd0:	f00b ffd4 	bl	1ff7c <assert_print>
   13fd4:	4040      	eors	r0, r0
   13fd6:	f380 8811 	msr	BASEPRI, r0
   13fda:	f04f 0003 	mov.w	r0, #3
   13fde:	df02      	svc	2
   13fe0:	2102      	movs	r1, #2
   13fe2:	f104 0008 	add.w	r0, r4, #8
   13fe6:	f00e fa6c 	bl	224c2 <net_buf_simple_pull_mem>
   13fea:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13fec:	7800      	ldrb	r0, [r0, #0]
   13fee:	f00c faa2 	bl	20536 <bt_hci_evt_get_flags>
   13ff2:	0783      	lsls	r3, r0, #30
   13ff4:	d40c      	bmi.n	14010 <rx_work_handler+0xe4>
   13ff6:	4a0b      	ldr	r2, [pc, #44]	; (14024 <rx_work_handler+0xf8>)
   13ff8:	4910      	ldr	r1, [pc, #64]	; (1403c <rx_work_handler+0x110>)
   13ffa:	480c      	ldr	r0, [pc, #48]	; (1402c <rx_work_handler+0x100>)
   13ffc:	f640 133b 	movw	r3, #2363	; 0x93b
   14000:	f00b ffbc 	bl	1ff7c <assert_print>
   14004:	4040      	eors	r0, r0
   14006:	f380 8811 	msr	BASEPRI, r0
   1400a:	f04f 0003 	mov.w	r0, #3
   1400e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14010:	4a0b      	ldr	r2, [pc, #44]	; (14040 <rx_work_handler+0x114>)
   14012:	7828      	ldrb	r0, [r5, #0]
   14014:	2304      	movs	r3, #4
   14016:	4621      	mov	r1, r4
   14018:	f00c fa9f 	bl	2055a <handle_event>
   1401c:	e7b1      	b.n	13f82 <rx_work_handler+0x56>
}
   1401e:	bd70      	pop	{r4, r5, r6, pc}
   14020:	200003fc 	.word	0x200003fc
   14024:	00024d2a 	.word	0x00024d2a
   14028:	00024d5e 	.word	0x00024d5e
   1402c:	00024d77 	.word	0x00024d77
   14030:	200002c8 	.word	0x200002c8
   14034:	20000664 	.word	0x20000664
   14038:	20001890 	.word	0x20001890
   1403c:	00024d94 	.word	0x00024d94
   14040:	000241b8 	.word	0x000241b8

00014044 <hci_cmd_done>:
{
   14044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14046:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14048:	7990      	ldrb	r0, [r2, #6]
{
   1404a:	460e      	mov	r6, r1
   1404c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1404e:	f003 f951 	bl	172f4 <net_buf_pool_get>
   14052:	4b28      	ldr	r3, [pc, #160]	; (140f4 <hci_cmd_done+0xb0>)
   14054:	4283      	cmp	r3, r0
   14056:	d14b      	bne.n	140f0 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   14058:	4620      	mov	r0, r4
   1405a:	f003 f953 	bl	17304 <net_buf_id>
   1405e:	4d26      	ldr	r5, [pc, #152]	; (140f8 <hci_cmd_done+0xb4>)
   14060:	230c      	movs	r3, #12
   14062:	fb03 5000 	mla	r0, r3, r0, r5
   14066:	8843      	ldrh	r3, [r0, #2]
   14068:	42bb      	cmp	r3, r7
   1406a:	d141      	bne.n	140f0 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   1406c:	4f23      	ldr	r7, [pc, #140]	; (140fc <hci_cmd_done+0xb8>)
   1406e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14072:	b120      	cbz	r0, 1407e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   14074:	f003 fa02 	bl	1747c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14078:	2300      	movs	r3, #0
   1407a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1407e:	4620      	mov	r0, r4
   14080:	f003 f940 	bl	17304 <net_buf_id>
   14084:	270c      	movs	r7, #12
   14086:	fb07 5000 	mla	r0, r7, r0, r5
   1408a:	6843      	ldr	r3, [r0, #4]
   1408c:	b19b      	cbz	r3, 140b6 <hci_cmd_done+0x72>
   1408e:	b996      	cbnz	r6, 140b6 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14090:	4620      	mov	r0, r4
   14092:	f003 f937 	bl	17304 <net_buf_id>
   14096:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1409a:	2101      	movs	r1, #1
   1409c:	6842      	ldr	r2, [r0, #4]
   1409e:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   140a2:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   140a4:	f003 071f 	and.w	r7, r3, #31
   140a8:	40b9      	lsls	r1, r7
	if (val) {
   140aa:	095b      	lsrs	r3, r3, #5
   140ac:	b1d2      	cbz	r2, 140e4 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   140ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   140b2:	f00c fa93 	bl	205dc <atomic_or>
	if (cmd(buf)->sync) {
   140b6:	4620      	mov	r0, r4
   140b8:	f003 f924 	bl	17304 <net_buf_id>
   140bc:	270c      	movs	r7, #12
   140be:	fb07 5000 	mla	r0, r7, r0, r5
   140c2:	6883      	ldr	r3, [r0, #8]
   140c4:	b1a3      	cbz	r3, 140f0 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   140c6:	4620      	mov	r0, r4
   140c8:	f003 f91c 	bl	17304 <net_buf_id>
   140cc:	4378      	muls	r0, r7
   140ce:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   140d0:	4620      	mov	r0, r4
   140d2:	f003 f917 	bl	17304 <net_buf_id>
   140d6:	fb07 5500 	mla	r5, r7, r0, r5
   140da:	68a8      	ldr	r0, [r5, #8]
}
   140dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   140e0:	f006 bf28 	b.w	1af34 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   140e4:	43c9      	mvns	r1, r1
   140e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   140ea:	f00c fafb 	bl	206e4 <atomic_and.isra.0>
   140ee:	e7e2      	b.n	140b6 <hci_cmd_done+0x72>
   140f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140f2:	bf00      	nop
   140f4:	20000b08 	.word	0x20000b08
   140f8:	20002474 	.word	0x20002474
   140fc:	200002c8 	.word	0x200002c8

00014100 <hci_cmd_status>:
{
   14100:	b538      	push	{r3, r4, r5, lr}
   14102:	2104      	movs	r1, #4
   14104:	4604      	mov	r4, r0
   14106:	3008      	adds	r0, #8
   14108:	f00e f9db 	bl	224c2 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1410c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1410e:	7801      	ldrb	r1, [r0, #0]
   14110:	8840      	ldrh	r0, [r0, #2]
   14112:	4622      	mov	r2, r4
   14114:	f7ff ff96 	bl	14044 <hci_cmd_done>
	if (ncmd) {
   14118:	b125      	cbz	r5, 14124 <hci_cmd_status+0x24>
   1411a:	4803      	ldr	r0, [pc, #12]	; (14128 <hci_cmd_status+0x28>)
}
   1411c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14120:	f006 bf08 	b.w	1af34 <z_impl_k_sem_give>
   14124:	bd38      	pop	{r3, r4, r5, pc}
   14126:	bf00      	nop
   14128:	200003e0 	.word	0x200003e0

0001412c <hci_cmd_complete>:
{
   1412c:	b538      	push	{r3, r4, r5, lr}
   1412e:	2103      	movs	r1, #3
   14130:	4604      	mov	r4, r0
   14132:	3008      	adds	r0, #8
   14134:	f00e f9c5 	bl	224c2 <net_buf_simple_pull_mem>
	status = buf->data[0];
   14138:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   1413a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   1413c:	7819      	ldrb	r1, [r3, #0]
   1413e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14142:	4622      	mov	r2, r4
   14144:	f7ff ff7e 	bl	14044 <hci_cmd_done>
	if (ncmd) {
   14148:	b125      	cbz	r5, 14154 <hci_cmd_complete+0x28>
   1414a:	4803      	ldr	r0, [pc, #12]	; (14158 <hci_cmd_complete+0x2c>)
}
   1414c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14150:	f006 bef0 	b.w	1af34 <z_impl_k_sem_give>
   14154:	bd38      	pop	{r3, r4, r5, pc}
   14156:	bf00      	nop
   14158:	200003e0 	.word	0x200003e0

0001415c <bt_hci_cmd_state_set_init>:
{
   1415c:	b510      	push	{r4, lr}
	state->bit = bit;
   1415e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   14162:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14166:	720b      	strb	r3, [r1, #8]
{
   14168:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1416a:	f003 f8cb 	bl	17304 <net_buf_id>
   1416e:	4b03      	ldr	r3, [pc, #12]	; (1417c <bt_hci_cmd_state_set_init+0x20>)
   14170:	220c      	movs	r2, #12
   14172:	fb02 3300 	mla	r3, r2, r0, r3
   14176:	605c      	str	r4, [r3, #4]
}
   14178:	bd10      	pop	{r4, pc}
   1417a:	bf00      	nop
   1417c:	20002474 	.word	0x20002474

00014180 <bt_hci_cmd_create>:
{
   14180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   14184:	f04f 32ff 	mov.w	r2, #4294967295
   14188:	f04f 33ff 	mov.w	r3, #4294967295
   1418c:	4606      	mov	r6, r0
   1418e:	4817      	ldr	r0, [pc, #92]	; (141ec <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   14190:	4d17      	ldr	r5, [pc, #92]	; (141f0 <bt_hci_cmd_create+0x70>)
{
   14192:	460f      	mov	r7, r1
   14194:	f00e f8cf 	bl	22336 <net_buf_alloc_fixed>
   14198:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1419a:	f100 0a08 	add.w	sl, r0, #8
   1419e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   141a0:	f04f 0800 	mov.w	r8, #0
   141a4:	4650      	mov	r0, sl
   141a6:	f00e f8e5 	bl	22374 <net_buf_simple_reserve>
   141aa:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   141ae:	4620      	mov	r0, r4
   141b0:	f003 f8a8 	bl	17304 <net_buf_id>
   141b4:	f04f 090c 	mov.w	r9, #12
   141b8:	fb09 5000 	mla	r0, r9, r0, r5
   141bc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   141be:	4620      	mov	r0, r4
   141c0:	f003 f8a0 	bl	17304 <net_buf_id>
   141c4:	fb09 5000 	mla	r0, r9, r0, r5
   141c8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   141cc:	4620      	mov	r0, r4
   141ce:	f003 f899 	bl	17304 <net_buf_id>
   141d2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   141d6:	2103      	movs	r1, #3
   141d8:	f8c5 8004 	str.w	r8, [r5, #4]
   141dc:	4650      	mov	r0, sl
   141de:	f00e f949 	bl	22474 <net_buf_simple_add>
	hdr->param_len = param_len;
   141e2:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   141e4:	8006      	strh	r6, [r0, #0]
}
   141e6:	4620      	mov	r0, r4
   141e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   141ec:	20000b08 	.word	0x20000b08
   141f0:	20002474 	.word	0x20002474

000141f4 <bt_hci_cmd_send_sync>:
{
   141f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141f6:	4615      	mov	r5, r2
   141f8:	b087      	sub	sp, #28
	if (!buf) {
   141fa:	460c      	mov	r4, r1
   141fc:	b921      	cbnz	r1, 14208 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   141fe:	f7ff ffbf 	bl	14180 <bt_hci_cmd_create>
		if (!buf) {
   14202:	4604      	mov	r4, r0
   14204:	2800      	cmp	r0, #0
   14206:	d048      	beq.n	1429a <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   14208:	2201      	movs	r2, #1
   1420a:	2100      	movs	r1, #0
   1420c:	4668      	mov	r0, sp
   1420e:	f00e feb0 	bl	22f72 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   14212:	4620      	mov	r0, r4
   14214:	f003 f876 	bl	17304 <net_buf_id>
   14218:	4f21      	ldr	r7, [pc, #132]	; (142a0 <bt_hci_cmd_send_sync+0xac>)
   1421a:	230c      	movs	r3, #12
   1421c:	fb03 7000 	mla	r0, r3, r0, r7
   14220:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   14224:	4620      	mov	r0, r4
   14226:	f00e f8ff 	bl	22428 <net_buf_ref>
   1422a:	4601      	mov	r1, r0
   1422c:	481d      	ldr	r0, [pc, #116]	; (142a4 <bt_hci_cmd_send_sync+0xb0>)
   1422e:	f00e f8ee 	bl	2240e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   14232:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   14236:	2300      	movs	r3, #0
   14238:	4668      	mov	r0, sp
   1423a:	f006 fea1 	bl	1af80 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1423e:	4606      	mov	r6, r0
   14240:	b180      	cbz	r0, 14264 <bt_hci_cmd_send_sync+0x70>
   14242:	4a19      	ldr	r2, [pc, #100]	; (142a8 <bt_hci_cmd_send_sync+0xb4>)
   14244:	4919      	ldr	r1, [pc, #100]	; (142ac <bt_hci_cmd_send_sync+0xb8>)
   14246:	481a      	ldr	r0, [pc, #104]	; (142b0 <bt_hci_cmd_send_sync+0xbc>)
   14248:	f240 1335 	movw	r3, #309	; 0x135
   1424c:	f00b fe96 	bl	1ff7c <assert_print>
   14250:	4818      	ldr	r0, [pc, #96]	; (142b4 <bt_hci_cmd_send_sync+0xc0>)
   14252:	4631      	mov	r1, r6
   14254:	f00b fe92 	bl	1ff7c <assert_print>
   14258:	4040      	eors	r0, r0
   1425a:	f380 8811 	msr	BASEPRI, r0
   1425e:	f04f 0003 	mov.w	r0, #3
   14262:	df02      	svc	2
	status = cmd(buf)->status;
   14264:	4620      	mov	r0, r4
   14266:	f003 f84d 	bl	17304 <net_buf_id>
   1426a:	230c      	movs	r3, #12
   1426c:	4358      	muls	r0, r3
   1426e:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   14270:	b156      	cbz	r6, 14288 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   14272:	4620      	mov	r0, r4
   14274:	f003 f902 	bl	1747c <net_buf_unref>
			return -EIO;
   14278:	2e09      	cmp	r6, #9
   1427a:	bf0c      	ite	eq
   1427c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   14280:	f06f 0004 	mvnne.w	r0, #4
}
   14284:	b007      	add	sp, #28
   14286:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   14288:	b115      	cbz	r5, 14290 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   1428a:	602c      	str	r4, [r5, #0]
	return 0;
   1428c:	4630      	mov	r0, r6
   1428e:	e7f9      	b.n	14284 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   14290:	4620      	mov	r0, r4
   14292:	f003 f8f3 	bl	1747c <net_buf_unref>
	return 0;
   14296:	4628      	mov	r0, r5
   14298:	e7f4      	b.n	14284 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   1429a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1429e:	e7f1      	b.n	14284 <bt_hci_cmd_send_sync+0x90>
   142a0:	20002474 	.word	0x20002474
   142a4:	20000404 	.word	0x20000404
   142a8:	00024d2a 	.word	0x00024d2a
   142ac:	00024dc2 	.word	0x00024dc2
   142b0:	00024d77 	.word	0x00024d77
   142b4:	00024dcb 	.word	0x00024dcb

000142b8 <bt_hci_le_enh_conn_complete>:
{
   142b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   142bc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   142c0:	4a7f      	ldr	r2, [pc, #508]	; (144c0 <bt_hci_le_enh_conn_complete+0x208>)
	if (evt->status) {
   142c2:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   142c4:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   142c6:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   142ca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   142ce:	b29b      	uxth	r3, r3
   142d0:	4299      	cmp	r1, r3
   142d2:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   142d6:	bf08      	it	eq
   142d8:	8016      	strheq	r6, [r2, #0]
{
   142da:	b089      	sub	sp, #36	; 0x24
   142dc:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   142de:	fa1f f887 	uxth.w	r8, r7
			return true;
   142e2:	bf08      	it	eq
   142e4:	2601      	moveq	r6, #1
	if (evt->status) {
   142e6:	b1c4      	cbz	r4, 1431a <bt_hci_le_enh_conn_complete+0x62>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   142e8:	2c3c      	cmp	r4, #60	; 0x3c
   142ea:	d148      	bne.n	1437e <bt_hci_le_enh_conn_complete+0xc6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   142ec:	f000 ff10 	bl	15110 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   142f0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   142f4:	3010      	adds	r0, #16
   142f6:	f00c f9f5 	bl	206e4 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   142fa:	2000      	movs	r0, #0
   142fc:	f7ff fdf8 	bl	13ef0 <find_pending_connect.part.0>
		if (!conn) {
   14300:	4605      	mov	r5, r0
   14302:	2800      	cmp	r0, #0
   14304:	d03b      	beq.n	1437e <bt_hci_le_enh_conn_complete+0xc6>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   14306:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14308:	2100      	movs	r1, #0
   1430a:	f001 fa4b 	bl	157a4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1430e:	4628      	mov	r0, r5
}
   14310:	b009      	add	sp, #36	; 0x24
   14312:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   14316:	f00c bdbf 	b.w	20e98 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1431a:	7903      	ldrb	r3, [r0, #4]
   1431c:	3b02      	subs	r3, #2
   1431e:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14320:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14324:	d82e      	bhi.n	14384 <bt_hci_le_enh_conn_complete+0xcc>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14326:	4649      	mov	r1, r9
   14328:	a806      	add	r0, sp, #24
   1432a:	f00c f9b7 	bl	2069c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1432e:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14332:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14336:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14338:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1433c:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   14340:	f00c f9a7 	bl	20692 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14344:	2301      	movs	r3, #1
   14346:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1434a:	78eb      	ldrb	r3, [r5, #3]
   1434c:	2b01      	cmp	r3, #1
   1434e:	d112      	bne.n	14376 <bt_hci_le_enh_conn_complete+0xbe>
   14350:	a806      	add	r0, sp, #24
   14352:	f7ff fdcd 	bl	13ef0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14356:	78eb      	ldrb	r3, [r5, #3]
   14358:	2b01      	cmp	r3, #1
   1435a:	4604      	mov	r4, r0
   1435c:	d10a      	bne.n	14374 <bt_hci_le_enh_conn_complete+0xbc>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1435e:	f000 fed7 	bl	15110 <bt_le_adv_lookup_legacy>
   14362:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14366:	4681      	mov	r9, r0
   14368:	3010      	adds	r0, #16
   1436a:	f00c f9bb 	bl	206e4 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1436e:	4648      	mov	r0, r9
   14370:	f00c fcd8 	bl	20d24 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   14374:	b9cc      	cbnz	r4, 143aa <bt_hci_le_enh_conn_complete+0xf2>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14376:	211f      	movs	r1, #31
   14378:	4640      	mov	r0, r8
   1437a:	f00c fa36 	bl	207ea <bt_hci_disconnect>
}
   1437e:	b009      	add	sp, #36	; 0x24
   14380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   14384:	78c3      	ldrb	r3, [r0, #3]
   14386:	2b01      	cmp	r3, #1
   14388:	bf04      	itt	eq
   1438a:	4b4e      	ldreq	r3, [pc, #312]	; (144c4 <bt_hci_le_enh_conn_complete+0x20c>)
   1438c:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   14390:	4649      	mov	r1, r9
   14392:	4620      	mov	r0, r4
   14394:	f00c fb61 	bl	20a5a <bt_lookup_id_addr>
   14398:	4601      	mov	r1, r0
   1439a:	a806      	add	r0, sp, #24
   1439c:	f00c f97e 	bl	2069c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   143a0:	4649      	mov	r1, r9
   143a2:	a804      	add	r0, sp, #16
   143a4:	f00c f97a 	bl	2069c <bt_addr_le_copy>
   143a8:	e7cf      	b.n	1434a <bt_hci_le_enh_conn_complete+0x92>
	conn->handle = handle;
   143aa:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   143ac:	a906      	add	r1, sp, #24
	conn->handle = handle;
   143ae:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   143b2:	f00c f973 	bl	2069c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   143b6:	7e2a      	ldrb	r2, [r5, #24]
   143b8:	7deb      	ldrb	r3, [r5, #23]
   143ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   143be:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   143c2:	7eaa      	ldrb	r2, [r5, #26]
   143c4:	7e6b      	ldrb	r3, [r5, #25]
   143c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   143ca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   143ce:	7f2a      	ldrb	r2, [r5, #28]
   143d0:	7eeb      	ldrb	r3, [r5, #27]
   143d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   143d6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   143da:	78eb      	ldrb	r3, [r5, #3]
   143dc:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   143de:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   143e0:	2b01      	cmp	r3, #1
	conn->err = 0U;
   143e2:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   143e4:	d115      	bne.n	14412 <bt_hci_le_enh_conn_complete+0x15a>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   143e6:	a904      	add	r1, sp, #16
   143e8:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   143ec:	f00c f956 	bl	2069c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   143f0:	f000 fe8e 	bl	15110 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   143f4:	7a21      	ldrb	r1, [r4, #8]
   143f6:	4a33      	ldr	r2, [pc, #204]	; (144c4 <bt_hci_le_enh_conn_complete+0x20c>)
   143f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   143fc:	4411      	add	r1, r2
   143fe:	f104 0096 	add.w	r0, r4, #150	; 0x96
   14402:	f00c f94b 	bl	2069c <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   14406:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1440a:	065d      	lsls	r5, r3, #25
   1440c:	d501      	bpl.n	14412 <bt_hci_le_enh_conn_complete+0x15a>
			bt_le_adv_resume();
   1440e:	f001 f825 	bl	1545c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14412:	2107      	movs	r1, #7
   14414:	4620      	mov	r0, r4
   14416:	f001 f9c5 	bl	157a4 <bt_conn_set_state>
	if (is_disconnected) {
   1441a:	b11e      	cbz	r6, 14424 <bt_hci_le_enh_conn_complete+0x16c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1441c:	2101      	movs	r1, #1
   1441e:	4620      	mov	r0, r4
   14420:	f001 f9c0 	bl	157a4 <bt_conn_set_state>
	bt_conn_connected(conn);
   14424:	4620      	mov	r0, r4
   14426:	f00c fd73 	bl	20f10 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1442a:	7aa3      	ldrb	r3, [r4, #10]
   1442c:	2b07      	cmp	r3, #7
   1442e:	d142      	bne.n	144b6 <bt_hci_le_enh_conn_complete+0x1fe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14430:	f3bf 8f5b 	dmb	ish
   14434:	6863      	ldr	r3, [r4, #4]
   14436:	4e23      	ldr	r6, [pc, #140]	; (144c4 <bt_hci_le_enh_conn_complete+0x20c>)
   14438:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1443c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   14440:	d118      	bne.n	14474 <bt_hci_le_enh_conn_complete+0x1bc>
   14442:	78e3      	ldrb	r3, [r4, #3]
   14444:	b11b      	cbz	r3, 1444e <bt_hci_le_enh_conn_complete+0x196>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14446:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1444a:	0718      	lsls	r0, r3, #28
   1444c:	d512      	bpl.n	14474 <bt_hci_le_enh_conn_complete+0x1bc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1444e:	2102      	movs	r1, #2
   14450:	f242 0016 	movw	r0, #8214	; 0x2016
   14454:	f7ff fe94 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   14458:	4605      	mov	r5, r0
   1445a:	b158      	cbz	r0, 14474 <bt_hci_le_enh_conn_complete+0x1bc>
   1445c:	2102      	movs	r1, #2
   1445e:	3008      	adds	r0, #8
   14460:	f00e f808 	bl	22474 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   14464:	8823      	ldrh	r3, [r4, #0]
   14466:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   14468:	2200      	movs	r2, #0
   1446a:	4629      	mov	r1, r5
   1446c:	f242 0016 	movw	r0, #8214	; 0x2016
   14470:	f7ff fec0 	bl	141f4 <bt_hci_cmd_send_sync>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14474:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   14478:	07d9      	lsls	r1, r3, #31
   1447a:	d506      	bpl.n	1448a <bt_hci_le_enh_conn_complete+0x1d2>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1447c:	2100      	movs	r1, #0
   1447e:	2302      	movs	r3, #2
   14480:	9100      	str	r1, [sp, #0]
   14482:	461a      	mov	r2, r3
   14484:	4620      	mov	r0, r4
   14486:	f00c f9e9 	bl	2085c <bt_le_set_phy>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1448a:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1448e:	069a      	lsls	r2, r3, #26
   14490:	d511      	bpl.n	144b6 <bt_hci_le_enh_conn_complete+0x1fe>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14492:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   14496:	689b      	ldr	r3, [r3, #8]
   14498:	079b      	lsls	r3, r3, #30
   1449a:	d50c      	bpl.n	144b6 <bt_hci_le_enh_conn_complete+0x1fe>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1449c:	f10d 010e 	add.w	r1, sp, #14
   144a0:	a803      	add	r0, sp, #12
   144a2:	f00c f98a 	bl	207ba <hci_le_read_max_data_len>
			if (!err) {
   144a6:	b930      	cbnz	r0, 144b6 <bt_hci_le_enh_conn_complete+0x1fe>
				err = bt_le_set_data_len(conn,
   144a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   144ac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   144b0:	4620      	mov	r0, r4
   144b2:	f00c f9b5 	bl	20820 <bt_le_set_data_len>
	bt_conn_unref(conn);
   144b6:	4620      	mov	r0, r4
   144b8:	f00c fcee 	bl	20e98 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   144bc:	e75f      	b.n	1437e <bt_hci_le_enh_conn_complete+0xc6>
   144be:	bf00      	nop
   144c0:	20003320 	.word	0x20003320
   144c4:	200002c8 	.word	0x200002c8

000144c8 <bt_send>:
	return bt_dev.drv->send(buf);
   144c8:	4b02      	ldr	r3, [pc, #8]	; (144d4 <bt_send+0xc>)
   144ca:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   144ce:	695b      	ldr	r3, [r3, #20]
   144d0:	4718      	bx	r3
   144d2:	bf00      	nop
   144d4:	200002c8 	.word	0x200002c8

000144d8 <bt_hci_cmd_send>:
{
   144d8:	b538      	push	{r3, r4, r5, lr}
   144da:	4605      	mov	r5, r0
	if (!buf) {
   144dc:	460c      	mov	r4, r1
   144de:	b919      	cbnz	r1, 144e8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   144e0:	f7ff fe4e 	bl	14180 <bt_hci_cmd_create>
		if (!buf) {
   144e4:	4604      	mov	r4, r0
   144e6:	b198      	cbz	r0, 14510 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   144e8:	f640 4335 	movw	r3, #3125	; 0xc35
   144ec:	429d      	cmp	r5, r3
   144ee:	d109      	bne.n	14504 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
   144f0:	4620      	mov	r0, r4
   144f2:	f7ff ffe9 	bl	144c8 <bt_send>
		if (err) {
   144f6:	4605      	mov	r5, r0
   144f8:	b110      	cbz	r0, 14500 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   144fa:	4620      	mov	r0, r4
   144fc:	f002 ffbe 	bl	1747c <net_buf_unref>
}
   14500:	4628      	mov	r0, r5
   14502:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14504:	4804      	ldr	r0, [pc, #16]	; (14518 <bt_hci_cmd_send+0x40>)
   14506:	4621      	mov	r1, r4
   14508:	f00d ff81 	bl	2240e <net_buf_put>
	return 0;
   1450c:	2500      	movs	r5, #0
   1450e:	e7f7      	b.n	14500 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   14510:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14514:	e7f4      	b.n	14500 <bt_hci_cmd_send+0x28>
   14516:	bf00      	nop
   14518:	20000404 	.word	0x20000404

0001451c <hci_tx_thread>:
{
   1451c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   14520:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1462c <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   14524:	f8df a108 	ldr.w	sl, [pc, #264]	; 14630 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   14528:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1452c:	4841      	ldr	r0, [pc, #260]	; (14634 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1452e:	f36f 3352 	bfc	r3, #13, #6
   14532:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14536:	f001 f8ef 	bl	15718 <bt_conn_prepare_events>
   1453a:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1453c:	483b      	ldr	r0, [pc, #236]	; (1462c <hci_tx_thread+0x110>)
   1453e:	f04f 32ff 	mov.w	r2, #4294967295
   14542:	f04f 33ff 	mov.w	r3, #4294967295
   14546:	4629      	mov	r1, r5
   14548:	f007 fc48 	bl	1bddc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1454c:	b160      	cbz	r0, 14568 <hci_tx_thread+0x4c>
   1454e:	493a      	ldr	r1, [pc, #232]	; (14638 <hci_tx_thread+0x11c>)
   14550:	483a      	ldr	r0, [pc, #232]	; (1463c <hci_tx_thread+0x120>)
   14552:	f640 13b3 	movw	r3, #2483	; 0x9b3
   14556:	4652      	mov	r2, sl
   14558:	f00b fd10 	bl	1ff7c <assert_print>
   1455c:	4040      	eors	r0, r0
   1455e:	f380 8811 	msr	BASEPRI, r0
   14562:	f04f 0003 	mov.w	r0, #3
   14566:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14568:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 14640 <hci_tx_thread+0x124>
{
   1456c:	4e2f      	ldr	r6, [pc, #188]	; (1462c <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   1456e:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   14572:	f1a9 0b24 	sub.w	fp, r9, #36	; 0x24
	for (; count; ev++, count--) {
   14576:	b915      	cbnz	r5, 1457e <hci_tx_thread+0x62>
	z_impl_k_yield();
   14578:	f007 f93a 	bl	1b7f0 <z_impl_k_yield>
	while (1) {
   1457c:	e7d4      	b.n	14528 <hci_tx_thread+0xc>
		switch (ev->state) {
   1457e:	68f3      	ldr	r3, [r6, #12]
   14580:	f3c3 3345 	ubfx	r3, r3, #13, #6
   14584:	2b04      	cmp	r3, #4
   14586:	d147      	bne.n	14618 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14588:	7b33      	ldrb	r3, [r6, #12]
   1458a:	2b00      	cmp	r3, #0
   1458c:	d147      	bne.n	1461e <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1458e:	2200      	movs	r2, #0
   14590:	2300      	movs	r3, #0
   14592:	4648      	mov	r0, r9
   14594:	f00d fed4 	bl	22340 <net_buf_get>
	BT_ASSERT(buf);
   14598:	4604      	mov	r4, r0
   1459a:	b960      	cbnz	r0, 145b6 <hci_tx_thread+0x9a>
   1459c:	4929      	ldr	r1, [pc, #164]	; (14644 <hci_tx_thread+0x128>)
   1459e:	4827      	ldr	r0, [pc, #156]	; (1463c <hci_tx_thread+0x120>)
   145a0:	f640 134a 	movw	r3, #2378	; 0x94a
   145a4:	4652      	mov	r2, sl
   145a6:	f00b fce9 	bl	1ff7c <assert_print>
   145aa:	4040      	eors	r0, r0
   145ac:	f380 8811 	msr	BASEPRI, r0
   145b0:	f04f 0003 	mov.w	r0, #3
   145b4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   145b6:	f04f 32ff 	mov.w	r2, #4294967295
   145ba:	f04f 33ff 	mov.w	r3, #4294967295
   145be:	4658      	mov	r0, fp
   145c0:	f006 fcde 	bl	1af80 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   145c4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   145c8:	b120      	cbz	r0, 145d4 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   145ca:	f002 ff57 	bl	1747c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   145ce:	2300      	movs	r3, #0
   145d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   145d4:	4620      	mov	r0, r4
   145d6:	f00d ff27 	bl	22428 <net_buf_ref>
   145da:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   145de:	4620      	mov	r0, r4
   145e0:	f7ff ff72 	bl	144c8 <bt_send>
	if (err) {
   145e4:	b1c0      	cbz	r0, 14618 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   145e6:	4818      	ldr	r0, [pc, #96]	; (14648 <hci_tx_thread+0x12c>)
   145e8:	f006 fca4 	bl	1af34 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   145ec:	4620      	mov	r0, r4
   145ee:	f002 fe89 	bl	17304 <net_buf_id>
   145f2:	4b16      	ldr	r3, [pc, #88]	; (1464c <hci_tx_thread+0x130>)
   145f4:	220c      	movs	r2, #12
   145f6:	fb02 3000 	mla	r0, r2, r0, r3
   145fa:	211f      	movs	r1, #31
   145fc:	8840      	ldrh	r0, [r0, #2]
   145fe:	4622      	mov	r2, r4
   14600:	f7ff fd20 	bl	14044 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   14604:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14608:	f002 ff38 	bl	1747c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1460c:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1460e:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   14610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
   14614:	f002 ff32 	bl	1747c <net_buf_unref>
	for (; count; ev++, count--) {
   14618:	3614      	adds	r6, #20
   1461a:	3d01      	subs	r5, #1
   1461c:	e7ab      	b.n	14576 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1461e:	2b01      	cmp	r3, #1
   14620:	d1fa      	bne.n	14618 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   14622:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   14624:	3838      	subs	r0, #56	; 0x38
   14626:	f001 fb53 	bl	15cd0 <bt_conn_process_tx>
   1462a:	e7f5      	b.n	14618 <hci_tx_thread+0xfc>
   1462c:	20000628 	.word	0x20000628
   14630:	00024d2a 	.word	0x00024d2a
   14634:	2000063c 	.word	0x2000063c
   14638:	00024dc2 	.word	0x00024dc2
   1463c:	00024d77 	.word	0x00024d77
   14640:	20000404 	.word	0x20000404
   14644:	00024deb 	.word	0x00024deb
   14648:	200003e0 	.word	0x200003e0
   1464c:	20002474 	.word	0x20002474

00014650 <hci_event_prio>:
{
   14650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14654:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14656:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1465a:	4630      	mov	r0, r6
   1465c:	f00d ff41 	bl	224e2 <net_buf_simple_headroom>
	state->len = buf->len;
   14660:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14664:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14668:	4605      	mov	r5, r0
   1466a:	d80c      	bhi.n	14686 <hci_event_prio+0x36>
   1466c:	4a1c      	ldr	r2, [pc, #112]	; (146e0 <hci_event_prio+0x90>)
   1466e:	491d      	ldr	r1, [pc, #116]	; (146e4 <hci_event_prio+0x94>)
   14670:	481d      	ldr	r0, [pc, #116]	; (146e8 <hci_event_prio+0x98>)
   14672:	f640 534f 	movw	r3, #3407	; 0xd4f
   14676:	f00b fc81 	bl	1ff7c <assert_print>
   1467a:	4040      	eors	r0, r0
   1467c:	f380 8811 	msr	BASEPRI, r0
   14680:	f04f 0003 	mov.w	r0, #3
   14684:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14686:	4630      	mov	r0, r6
   14688:	2102      	movs	r1, #2
   1468a:	f00d ff1a 	bl	224c2 <net_buf_simple_pull_mem>
   1468e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14690:	7800      	ldrb	r0, [r0, #0]
   14692:	f00b ff50 	bl	20536 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14696:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14698:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1469a:	d40c      	bmi.n	146b6 <hci_event_prio+0x66>
   1469c:	4a10      	ldr	r2, [pc, #64]	; (146e0 <hci_event_prio+0x90>)
   1469e:	4913      	ldr	r1, [pc, #76]	; (146ec <hci_event_prio+0x9c>)
   146a0:	4811      	ldr	r0, [pc, #68]	; (146e8 <hci_event_prio+0x98>)
   146a2:	f640 5353 	movw	r3, #3411	; 0xd53
   146a6:	f00b fc69 	bl	1ff7c <assert_print>
   146aa:	4040      	eors	r0, r0
   146ac:	f380 8811 	msr	BASEPRI, r0
   146b0:	f04f 0003 	mov.w	r0, #3
   146b4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   146b6:	2305      	movs	r3, #5
   146b8:	4a0d      	ldr	r2, [pc, #52]	; (146f0 <hci_event_prio+0xa0>)
   146ba:	7838      	ldrb	r0, [r7, #0]
   146bc:	4621      	mov	r1, r4
   146be:	f00b ff4c 	bl	2055a <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   146c2:	07b3      	lsls	r3, r6, #30
   146c4:	d507      	bpl.n	146d6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   146c6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   146c8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   146cc:	fa10 f585 	uxtah	r5, r0, r5
   146d0:	60a5      	str	r5, [r4, #8]
}
   146d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   146d6:	4620      	mov	r0, r4
}
   146d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   146dc:	f002 bece 	b.w	1747c <net_buf_unref>
   146e0:	00024d2a 	.word	0x00024d2a
   146e4:	00024d5e 	.word	0x00024d5e
   146e8:	00024d77 	.word	0x00024d77
   146ec:	00024def 	.word	0x00024def
   146f0:	000241d8 	.word	0x000241d8

000146f4 <bt_recv>:
{
   146f4:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   146f6:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   146f8:	2b01      	cmp	r3, #1
{
   146fa:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   146fc:	d00b      	beq.n	14716 <bt_recv+0x22>
   146fe:	2b03      	cmp	r3, #3
   14700:	d117      	bne.n	14732 <bt_recv+0x3e>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14702:	480e      	ldr	r0, [pc, #56]	; (1473c <bt_recv+0x48>)
   14704:	4629      	mov	r1, r5
   14706:	f00d fe39 	bl	2237c <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1470a:	490d      	ldr	r1, [pc, #52]	; (14740 <bt_recv+0x4c>)
   1470c:	480d      	ldr	r0, [pc, #52]	; (14744 <bt_recv+0x50>)
   1470e:	f00e fcc9 	bl	230a4 <k_work_submit_to_queue>
		return 0;
   14712:	2000      	movs	r0, #0
}
   14714:	e00c      	b.n	14730 <bt_recv+0x3c>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14716:	6883      	ldr	r3, [r0, #8]
   14718:	7818      	ldrb	r0, [r3, #0]
   1471a:	f00b ff0c 	bl	20536 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1471e:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14720:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   14722:	d502      	bpl.n	1472a <bt_recv+0x36>
			hci_event_prio(buf);
   14724:	4628      	mov	r0, r5
   14726:	f7ff ff93 	bl	14650 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1472a:	f014 0002 	ands.w	r0, r4, #2
   1472e:	d1e8      	bne.n	14702 <bt_recv+0xe>
}
   14730:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   14732:	f002 fea3 	bl	1747c <net_buf_unref>
		return -EINVAL;
   14736:	f06f 0015 	mvn.w	r0, #21
   1473a:	e7f9      	b.n	14730 <bt_recv+0x3c>
   1473c:	200003fc 	.word	0x200003fc
   14740:	20000664 	.word	0x20000664
   14744:	20001890 	.word	0x20001890

00014748 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14748:	4a08      	ldr	r2, [pc, #32]	; (1476c <bt_hci_driver_register+0x24>)
{
   1474a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1474c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   14750:	b930      	cbnz	r0, 14760 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   14752:	68d9      	ldr	r1, [r3, #12]
   14754:	b139      	cbz	r1, 14766 <bt_hci_driver_register+0x1e>
   14756:	6959      	ldr	r1, [r3, #20]
   14758:	b129      	cbz	r1, 14766 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1475a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   1475e:	4770      	bx	lr
		return -EALREADY;
   14760:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14764:	4770      	bx	lr
		return -EINVAL;
   14766:	f06f 0015 	mvn.w	r0, #21
}
   1476a:	4770      	bx	lr
   1476c:	200002c8 	.word	0x200002c8

00014770 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14770:	4801      	ldr	r0, [pc, #4]	; (14778 <bt_finalize_init+0x8>)
   14772:	2104      	movs	r1, #4
   14774:	f00b bf32 	b.w	205dc <atomic_or>
   14778:	20000394 	.word	0x20000394

0001477c <bt_init>:
{
   1477c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1477e:	4d41      	ldr	r5, [pc, #260]	; (14884 <bt_init+0x108>)
   14780:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   14784:	6899      	ldr	r1, [r3, #8]
   14786:	f011 0101 	ands.w	r1, r1, #1
   1478a:	d121      	bne.n	147d0 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1478c:	aa01      	add	r2, sp, #4
   1478e:	f640 4003 	movw	r0, #3075	; 0xc03
   14792:	f7ff fd2f 	bl	141f4 <bt_hci_cmd_send_sync>
		if (err) {
   14796:	4604      	mov	r4, r0
   14798:	2800      	cmp	r0, #0
   1479a:	d16f      	bne.n	1487c <bt_init+0x100>
	uint8_t status = buf->data[0];
   1479c:	9b01      	ldr	r3, [sp, #4]
   1479e:	689b      	ldr	r3, [r3, #8]
	if (status) {
   147a0:	781b      	ldrb	r3, [r3, #0]
   147a2:	b993      	cbnz	r3, 147ca <bt_init+0x4e>
   147a4:	f3bf 8f5b 	dmb	ish
   147a8:	462b      	mov	r3, r5
   147aa:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   147ae:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   147b2:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   147b6:	f3bf 8f5b 	dmb	ish
   147ba:	e853 1f00 	ldrex	r1, [r3]
   147be:	e843 2000 	strex	r0, r2, [r3]
   147c2:	2800      	cmp	r0, #0
   147c4:	d1f9      	bne.n	147ba <bt_init+0x3e>
   147c6:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   147ca:	9801      	ldr	r0, [sp, #4]
   147cc:	f002 fe56 	bl	1747c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   147d0:	aa01      	add	r2, sp, #4
   147d2:	2100      	movs	r1, #0
   147d4:	f241 0003 	movw	r0, #4099	; 0x1003
   147d8:	f7ff fd0c 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   147dc:	4604      	mov	r4, r0
   147de:	2800      	cmp	r0, #0
   147e0:	d14c      	bne.n	1487c <bt_init+0x100>
	read_local_features_complete(rsp);
   147e2:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   147e4:	4e28      	ldr	r6, [pc, #160]	; (14888 <bt_init+0x10c>)
   147e6:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   147e8:	f8d2 0001 	ldr.w	r0, [r2, #1]
   147ec:	f8d2 1005 	ldr.w	r1, [r2, #5]
   147f0:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   147f2:	4618      	mov	r0, r3
   147f4:	f002 fe42 	bl	1747c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   147f8:	4621      	mov	r1, r4
   147fa:	aa01      	add	r2, sp, #4
   147fc:	f241 0001 	movw	r0, #4097	; 0x1001
   14800:	f7ff fcf8 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14804:	4604      	mov	r4, r0
   14806:	2800      	cmp	r0, #0
   14808:	d138      	bne.n	1487c <bt_init+0x100>
	read_local_ver_complete(rsp);
   1480a:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1480c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   1480e:	785a      	ldrb	r2, [r3, #1]
   14810:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14814:	78d9      	ldrb	r1, [r3, #3]
   14816:	789a      	ldrb	r2, [r3, #2]
   14818:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1481c:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   14820:	791a      	ldrb	r2, [r3, #4]
   14822:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   14826:	7a19      	ldrb	r1, [r3, #8]
   14828:	79da      	ldrb	r2, [r3, #7]
   1482a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1482e:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14832:	795a      	ldrb	r2, [r3, #5]
   14834:	799b      	ldrb	r3, [r3, #6]
   14836:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1483a:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   1483e:	f002 fe1d 	bl	1747c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14842:	4621      	mov	r1, r4
   14844:	aa01      	add	r2, sp, #4
   14846:	f241 0002 	movw	r0, #4098	; 0x1002
   1484a:	f7ff fcd3 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   1484e:	4604      	mov	r4, r0
   14850:	b9a0      	cbnz	r0, 1487c <bt_init+0x100>
	read_supported_commands_complete(rsp);
   14852:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   14854:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   14856:	1c53      	adds	r3, r2, #1
   14858:	3241      	adds	r2, #65	; 0x41
   1485a:	6818      	ldr	r0, [r3, #0]
   1485c:	6859      	ldr	r1, [r3, #4]
   1485e:	4634      	mov	r4, r6
   14860:	c403      	stmia	r4!, {r0, r1}
   14862:	3308      	adds	r3, #8
   14864:	4293      	cmp	r3, r2
   14866:	4626      	mov	r6, r4
   14868:	d1f7      	bne.n	1485a <bt_init+0xde>
	net_buf_unref(rsp);
   1486a:	4638      	mov	r0, r7
   1486c:	f002 fe06 	bl	1747c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   14870:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   14874:	065e      	lsls	r6, r3, #25
   14876:	d409      	bmi.n	1488c <bt_init+0x110>
		return -ENODEV;
   14878:	f06f 0412 	mvn.w	r4, #18
}
   1487c:	4620      	mov	r0, r4
   1487e:	b003      	add	sp, #12
   14880:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14882:	bf00      	nop
   14884:	200002c8 	.word	0x200002c8
   14888:	20000338 	.word	0x20000338
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1488c:	aa01      	add	r2, sp, #4
   1488e:	2100      	movs	r1, #0
   14890:	f242 0003 	movw	r0, #8195	; 0x2003
   14894:	f7ff fcae 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14898:	4604      	mov	r4, r0
   1489a:	2800      	cmp	r0, #0
   1489c:	d1ee      	bne.n	1487c <bt_init+0x100>
	read_le_features_complete(rsp);
   1489e:	9b01      	ldr	r3, [sp, #4]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   148a0:	4e9f      	ldr	r6, [pc, #636]	; (14b20 <bt_init+0x3a4>)
   148a2:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   148a4:	f8d2 0001 	ldr.w	r0, [r2, #1]
   148a8:	f8d2 1005 	ldr.w	r1, [r2, #5]
   148ac:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   148ae:	4618      	mov	r0, r3
   148b0:	f002 fde4 	bl	1747c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   148b4:	4621      	mov	r1, r4
   148b6:	aa01      	add	r2, sp, #4
   148b8:	f242 0002 	movw	r0, #8194	; 0x2002
   148bc:	f7ff fc9a 	bl	141f4 <bt_hci_cmd_send_sync>
		if (err) {
   148c0:	4604      	mov	r4, r0
   148c2:	2800      	cmp	r0, #0
   148c4:	d1da      	bne.n	1487c <bt_init+0x100>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   148c6:	9b01      	ldr	r3, [sp, #4]
   148c8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   148ca:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   148ce:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   148d2:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   148d4:	b129      	cbz	r1, 148e2 <bt_init+0x166>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   148d6:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   148d8:	4611      	mov	r1, r2
   148da:	f106 0028 	add.w	r0, r6, #40	; 0x28
   148de:	f00e fb48 	bl	22f72 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   148e2:	9801      	ldr	r0, [sp, #4]
   148e4:	f002 fdca 	bl	1747c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   148e8:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   148ec:	f016 0620 	ands.w	r6, r6, #32
   148f0:	f000 80f4 	beq.w	14adc <bt_init+0x360>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   148f4:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   148f8:	071c      	lsls	r4, r3, #28
   148fa:	d512      	bpl.n	14922 <bt_init+0x1a6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   148fc:	aa01      	add	r2, sp, #4
   148fe:	2100      	movs	r1, #0
   14900:	f242 001c 	movw	r0, #8220	; 0x201c
   14904:	f7ff fc76 	bl	141f4 <bt_hci_cmd_send_sync>
		if (err) {
   14908:	4604      	mov	r4, r0
   1490a:	2800      	cmp	r0, #0
   1490c:	d1b6      	bne.n	1487c <bt_init+0x100>
		le_read_supp_states_complete(rsp);
   1490e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14910:	6883      	ldr	r3, [r0, #8]
   14912:	f8d3 2001 	ldr.w	r2, [r3, #1]
   14916:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1491a:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   1491e:	f002 fdad 	bl	1747c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14922:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   14926:	0698      	lsls	r0, r3, #26
   14928:	d523      	bpl.n	14972 <bt_init+0x1f6>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1492a:	f10d 0102 	add.w	r1, sp, #2
   1492e:	4668      	mov	r0, sp
   14930:	f00b ff43 	bl	207ba <hci_le_read_max_data_len>
		if (err) {
   14934:	4604      	mov	r4, r0
   14936:	2800      	cmp	r0, #0
   14938:	d1a0      	bne.n	1487c <bt_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1493a:	2104      	movs	r1, #4
   1493c:	f242 0024 	movw	r0, #8228	; 0x2024
   14940:	f7ff fc1e 	bl	14180 <bt_hci_cmd_create>
		if (!buf) {
   14944:	4606      	mov	r6, r0
   14946:	2800      	cmp	r0, #0
   14948:	f000 80cf 	beq.w	14aea <bt_init+0x36e>
	return net_buf_simple_add(&buf->b, len);
   1494c:	2104      	movs	r1, #4
   1494e:	3008      	adds	r0, #8
   14950:	f00d fd90 	bl	22474 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14954:	f8bd 3000 	ldrh.w	r3, [sp]
   14958:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1495a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1495e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14960:	4622      	mov	r2, r4
   14962:	4631      	mov	r1, r6
   14964:	f242 0024 	movw	r0, #8228	; 0x2024
   14968:	f7ff fc44 	bl	141f4 <bt_hci_cmd_send_sync>
		if (err) {
   1496c:	4604      	mov	r4, r0
   1496e:	2800      	cmp	r0, #0
   14970:	d184      	bne.n	1487c <bt_init+0x100>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14972:	2108      	movs	r1, #8
   14974:	f242 0001 	movw	r0, #8193	; 0x2001
   14978:	f7ff fc02 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   1497c:	4604      	mov	r4, r0
   1497e:	2800      	cmp	r0, #0
   14980:	f000 80b3 	beq.w	14aea <bt_init+0x36e>
   14984:	2108      	movs	r1, #8
   14986:	4408      	add	r0, r1
   14988:	f00d fd74 	bl	22474 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1498c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14990:	f012 0f02 	tst.w	r2, #2
   14994:	bf14      	ite	ne
   14996:	232f      	movne	r3, #47	; 0x2f
   14998:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1499a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1499c:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   149a0:	bf48      	it	mi
   149a2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   149a6:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   149aa:	bf18      	it	ne
   149ac:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   149b0:	2200      	movs	r2, #0
   149b2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   149b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   149b8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   149ba:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   149bc:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   149be:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   149c0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   149c2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   149c4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   149c6:	4621      	mov	r1, r4
   149c8:	f242 0001 	movw	r0, #8193	; 0x2001
   149cc:	f7ff fc12 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   149d0:	4604      	mov	r4, r0
   149d2:	2800      	cmp	r0, #0
   149d4:	f47f af52 	bne.w	1487c <bt_init+0x100>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   149d8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   149dc:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   149e0:	069a      	lsls	r2, r3, #26
   149e2:	f100 8097 	bmi.w	14b14 <bt_init+0x398>
	if (bt_dev.le.acl_mtu) {
   149e6:	b9d9      	cbnz	r1, 14a20 <bt_init+0x2a4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   149e8:	aa01      	add	r2, sp, #4
   149ea:	f241 0005 	movw	r0, #4101	; 0x1005
   149ee:	f7ff fc01 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   149f2:	4604      	mov	r4, r0
   149f4:	2800      	cmp	r0, #0
   149f6:	f47f af41 	bne.w	1487c <bt_init+0x100>
	if (bt_dev.le.acl_mtu) {
   149fa:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   149fe:	b963      	cbnz	r3, 14a1a <bt_init+0x29e>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   14a04:	785a      	ldrb	r2, [r3, #1]
   14a06:	7899      	ldrb	r1, [r3, #2]
   14a08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14a0c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   14a10:	889a      	ldrh	r2, [r3, #4]
   14a12:	4844      	ldr	r0, [pc, #272]	; (14b24 <bt_init+0x3a8>)
   14a14:	4611      	mov	r1, r2
   14a16:	f00e faac 	bl	22f72 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   14a1a:	9801      	ldr	r0, [sp, #4]
   14a1c:	f002 fd2e 	bl	1747c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14a20:	2108      	movs	r1, #8
   14a22:	f640 4001 	movw	r0, #3073	; 0xc01
   14a26:	f7ff fbab 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   14a2a:	4604      	mov	r4, r0
   14a2c:	2800      	cmp	r0, #0
   14a2e:	d05c      	beq.n	14aea <bt_init+0x36e>
   14a30:	2108      	movs	r1, #8
   14a32:	4408      	add	r0, r1
   14a34:	f00d fd1e 	bl	22474 <net_buf_simple_add>
	dst[0] = val;
   14a38:	2310      	movs	r3, #16
   14a3a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14a3c:	2388      	movs	r3, #136	; 0x88
   14a3e:	7043      	strb	r3, [r0, #1]
   14a40:	2302      	movs	r3, #2
	dst[0] = val;
   14a42:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   14a44:	70c3      	strb	r3, [r0, #3]
   14a46:	2320      	movs	r3, #32
	dst[0] = val;
   14a48:	7082      	strb	r2, [r0, #2]
   14a4a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14a4c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14a4e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14a50:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14a52:	4621      	mov	r1, r4
   14a54:	f640 4001 	movw	r0, #3073	; 0xc01
   14a58:	f7ff fbcc 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14a5c:	4604      	mov	r4, r0
   14a5e:	2800      	cmp	r0, #0
   14a60:	f47f af0c 	bne.w	1487c <bt_init+0x100>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14a64:	4601      	mov	r1, r0
   14a66:	aa01      	add	r2, sp, #4
   14a68:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14a6c:	f7ff fbc2 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14a70:	4604      	mov	r4, r0
   14a72:	bb20      	cbnz	r0, 14abe <bt_init+0x342>
	net_buf_unref(rsp);
   14a74:	9801      	ldr	r0, [sp, #4]
   14a76:	f002 fd01 	bl	1747c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14a7a:	4621      	mov	r1, r4
   14a7c:	aa01      	add	r2, sp, #4
   14a7e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14a82:	f7ff fbb7 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14a86:	4604      	mov	r4, r0
   14a88:	b9c8      	cbnz	r0, 14abe <bt_init+0x342>
	rp.cmds = (void *)rsp->data;
   14a8a:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14a8c:	6883      	ldr	r3, [r0, #8]
   14a8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   14a92:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   14a96:	f002 fcf1 	bl	1747c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14a9a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   14a9e:	075b      	lsls	r3, r3, #29
   14aa0:	d50d      	bpl.n	14abe <bt_init+0x342>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14aa2:	aa01      	add	r2, sp, #4
   14aa4:	4621      	mov	r1, r4
   14aa6:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14aaa:	f7ff fba3 	bl	141f4 <bt_hci_cmd_send_sync>
		if (err) {
   14aae:	b930      	cbnz	r0, 14abe <bt_init+0x342>
		rp.feat = (void *)rsp->data;
   14ab0:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14ab2:	6883      	ldr	r3, [r0, #8]
   14ab4:	785b      	ldrb	r3, [r3, #1]
   14ab6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   14aba:	f002 fcdf 	bl	1747c <net_buf_unref>
	err = bt_id_init();
   14abe:	f000 fa87 	bl	14fd0 <bt_id_init>
	if (err) {
   14ac2:	4604      	mov	r4, r0
   14ac4:	2800      	cmp	r0, #0
   14ac6:	f47f aed9 	bne.w	1487c <bt_init+0x100>
		err = bt_conn_init();
   14aca:	f001 f967 	bl	15d9c <bt_conn_init>
		if (err) {
   14ace:	4604      	mov	r4, r0
   14ad0:	2800      	cmp	r0, #0
   14ad2:	f47f aed3 	bne.w	1487c <bt_init+0x100>
	bt_finalize_init();
   14ad6:	f7ff fe4b 	bl	14770 <bt_finalize_init>
	return 0;
   14ada:	e6cf      	b.n	1487c <bt_init+0x100>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14adc:	2102      	movs	r1, #2
   14ade:	f640 406d 	movw	r0, #3181	; 0xc6d
   14ae2:	f7ff fb4d 	bl	14180 <bt_hci_cmd_create>
		if (!buf) {
   14ae6:	4604      	mov	r4, r0
   14ae8:	b910      	cbnz	r0, 14af0 <bt_init+0x374>
		return -ENOBUFS;
   14aea:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14aee:	e6c5      	b.n	1487c <bt_init+0x100>
   14af0:	2102      	movs	r1, #2
   14af2:	3008      	adds	r0, #8
   14af4:	f00d fcbe 	bl	22474 <net_buf_simple_add>
		cp_le->le = 0x01;
   14af8:	2301      	movs	r3, #1
   14afa:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14afc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14afe:	4621      	mov	r1, r4
   14b00:	4632      	mov	r2, r6
   14b02:	f640 406d 	movw	r0, #3181	; 0xc6d
   14b06:	f7ff fb75 	bl	141f4 <bt_hci_cmd_send_sync>
		if (err) {
   14b0a:	4604      	mov	r4, r0
   14b0c:	2800      	cmp	r0, #0
   14b0e:	f43f aef1 	beq.w	148f4 <bt_init+0x178>
   14b12:	e6b3      	b.n	1487c <bt_init+0x100>
	else if (!bt_dev.le.acl_mtu) {
   14b14:	2900      	cmp	r1, #0
   14b16:	d183      	bne.n	14a20 <bt_init+0x2a4>
		return -EIO;
   14b18:	f06f 0404 	mvn.w	r4, #4
   14b1c:	e6ae      	b.n	1487c <bt_init+0x100>
   14b1e:	bf00      	nop
   14b20:	20000398 	.word	0x20000398
   14b24:	200003c8 	.word	0x200003c8

00014b28 <init_work>:
{
   14b28:	b510      	push	{r4, lr}
	err = bt_init();
   14b2a:	f7ff fe27 	bl	1477c <bt_init>
	if (ready_cb) {
   14b2e:	4b03      	ldr	r3, [pc, #12]	; (14b3c <init_work+0x14>)
   14b30:	681b      	ldr	r3, [r3, #0]
   14b32:	b113      	cbz	r3, 14b3a <init_work+0x12>
}
   14b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14b38:	4718      	bx	r3
}
   14b3a:	bd10      	pop	{r4, pc}
   14b3c:	2000248c 	.word	0x2000248c

00014b40 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   14b40:	b570      	push	{r4, r5, r6, lr}
   14b42:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   14b44:	f7f7 ff77 	bl	ca36 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   14b48:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   14b4a:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   14b4c:	d812      	bhi.n	14b74 <bt_set_name+0x34>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   14b4e:	4c0b      	ldr	r4, [pc, #44]	; (14b7c <bt_set_name+0x3c>)
   14b50:	4631      	mov	r1, r6
   14b52:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   14b56:	f7f7 ff64 	bl	ca22 <strcmp>
   14b5a:	b150      	cbz	r0, 14b72 <bt_set_name+0x32>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   14b5c:	f504 70ac 	add.w	r0, r4, #344	; 0x158
   14b60:	2348      	movs	r3, #72	; 0x48
   14b62:	462a      	mov	r2, r5
   14b64:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
   14b66:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
   14b68:	f00e fe4c 	bl	23804 <__strncpy_chk>
	bt_dev.name[len] = '\0';
   14b6c:	2000      	movs	r0, #0
   14b6e:	f884 0158 	strb.w	r0, [r4, #344]	; 0x158

	return 0;
#else
	return -ENOMEM;
#endif
}
   14b72:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   14b74:	f06f 000b 	mvn.w	r0, #11
   14b78:	e7fb      	b.n	14b72 <bt_set_name+0x32>
   14b7a:	bf00      	nop
   14b7c:	200002c8 	.word	0x200002c8

00014b80 <bt_enable>:
{
   14b80:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
   14b82:	4d2a      	ldr	r5, [pc, #168]	; (14c2c <bt_enable+0xac>)
   14b84:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   14b88:	b088      	sub	sp, #32
   14b8a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d046      	beq.n	14c1e <bt_enable+0x9e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b90:	f06f 0102 	mvn.w	r1, #2
   14b94:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   14b98:	f00b fda4 	bl	206e4 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14b9c:	2101      	movs	r1, #1
   14b9e:	f00b fd1d 	bl	205dc <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14ba2:	ea10 0401 	ands.w	r4, r0, r1
   14ba6:	d13d      	bne.n	14c24 <bt_enable+0xa4>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   14ba8:	4821      	ldr	r0, [pc, #132]	; (14c30 <bt_enable+0xb0>)
   14baa:	f7ff ffc9 	bl	14b40 <bt_set_name>
	ready_cb = cb;
   14bae:	4b21      	ldr	r3, [pc, #132]	; (14c34 <bt_enable+0xb4>)
   14bb0:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14bb2:	2200      	movs	r2, #0
   14bb4:	2300      	movs	r3, #0
   14bb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14bba:	f06f 0308 	mvn.w	r3, #8
   14bbe:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14bc2:	e9cd 4400 	strd	r4, r4, [sp]
   14bc6:	4b1c      	ldr	r3, [pc, #112]	; (14c38 <bt_enable+0xb8>)
   14bc8:	491c      	ldr	r1, [pc, #112]	; (14c3c <bt_enable+0xbc>)
   14bca:	9404      	str	r4, [sp, #16]
   14bcc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14bd0:	481b      	ldr	r0, [pc, #108]	; (14c40 <bt_enable+0xc0>)
   14bd2:	f006 f81d 	bl	1ac10 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14bd6:	491b      	ldr	r1, [pc, #108]	; (14c44 <bt_enable+0xc4>)
   14bd8:	4819      	ldr	r0, [pc, #100]	; (14c40 <bt_enable+0xc0>)
   14bda:	f00e f8e2 	bl	22da2 <z_impl_k_thread_name_set>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   14bde:	491a      	ldr	r1, [pc, #104]	; (14c48 <bt_enable+0xc8>)
   14be0:	481a      	ldr	r0, [pc, #104]	; (14c4c <bt_enable+0xcc>)
   14be2:	9400      	str	r4, [sp, #0]
   14be4:	f06f 0307 	mvn.w	r3, #7
   14be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14bec:	f006 fb14 	bl	1b218 <k_work_queue_start>
   14bf0:	4917      	ldr	r1, [pc, #92]	; (14c50 <bt_enable+0xd0>)
   14bf2:	4816      	ldr	r0, [pc, #88]	; (14c4c <bt_enable+0xcc>)
   14bf4:	f00e f8d5 	bl	22da2 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14bf8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   14bfc:	68db      	ldr	r3, [r3, #12]
   14bfe:	4798      	blx	r3
	if (err) {
   14c00:	4604      	mov	r4, r0
   14c02:	b948      	cbnz	r0, 14c18 <bt_enable+0x98>
	if (!cb) {
   14c04:	b926      	cbnz	r6, 14c10 <bt_enable+0x90>
}
   14c06:	b008      	add	sp, #32
   14c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   14c0c:	f7ff bdb6 	b.w	1477c <bt_init>
	k_work_submit(&bt_dev.init);
   14c10:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   14c14:	f006 fafa 	bl	1b20c <k_work_submit>
}
   14c18:	4620      	mov	r0, r4
   14c1a:	b008      	add	sp, #32
   14c1c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   14c1e:	f06f 0412 	mvn.w	r4, #18
   14c22:	e7f9      	b.n	14c18 <bt_enable+0x98>
		return -EALREADY;
   14c24:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14c28:	e7f6      	b.n	14c18 <bt_enable+0x98>
   14c2a:	bf00      	nop
   14c2c:	200002c8 	.word	0x200002c8
   14c30:	00024e08 	.word	0x00024e08
   14c34:	2000248c 	.word	0x2000248c
   14c38:	0001451d 	.word	0x0001451d
   14c3c:	20004200 	.word	0x20004200
   14c40:	20001930 	.word	0x20001930
   14c44:	00024e13 	.word	0x00024e13
   14c48:	20003de0 	.word	0x20003de0
   14c4c:	20001890 	.word	0x20001890
   14c50:	00024e19 	.word	0x00024e19

00014c54 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14c54:	4800      	ldr	r0, [pc, #0]	; (14c58 <bt_get_name+0x4>)
   14c56:	4770      	bx	lr
   14c58:	20000420 	.word	0x20000420

00014c5c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14c5e:	4f0b      	ldr	r7, [pc, #44]	; (14c8c <id_find+0x30>)
{
   14c60:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14c62:	2500      	movs	r5, #0
   14c64:	79fb      	ldrb	r3, [r7, #7]
   14c66:	b2ec      	uxtb	r4, r5
   14c68:	42a3      	cmp	r3, r4
   14c6a:	d802      	bhi.n	14c72 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14c6c:	f06f 0401 	mvn.w	r4, #1
   14c70:	e009      	b.n	14c86 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14c72:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
   14c76:	2207      	movs	r2, #7
   14c78:	4439      	add	r1, r7
   14c7a:	4630      	mov	r0, r6
   14c7c:	f00e fd81 	bl	23782 <memcmp>
   14c80:	3501      	adds	r5, #1
   14c82:	2800      	cmp	r0, #0
   14c84:	d1ee      	bne.n	14c64 <id_find+0x8>
}
   14c86:	4620      	mov	r0, r4
   14c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c8a:	bf00      	nop
   14c8c:	200002c8 	.word	0x200002c8

00014c90 <set_random_address>:
{
   14c90:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14c92:	2206      	movs	r2, #6
   14c94:	4912      	ldr	r1, [pc, #72]	; (14ce0 <set_random_address+0x50>)
   14c96:	4605      	mov	r5, r0
   14c98:	f00e fd73 	bl	23782 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14c9c:	4602      	mov	r2, r0
   14c9e:	b1d0      	cbz	r0, 14cd6 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14ca0:	2106      	movs	r1, #6
   14ca2:	f242 0005 	movw	r0, #8197	; 0x2005
   14ca6:	f7ff fa6b 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   14caa:	4604      	mov	r4, r0
   14cac:	b1a8      	cbz	r0, 14cda <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14cae:	2206      	movs	r2, #6
   14cb0:	4629      	mov	r1, r5
   14cb2:	3008      	adds	r0, #8
   14cb4:	f00d fbe4 	bl	22480 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14cb8:	2200      	movs	r2, #0
   14cba:	4621      	mov	r1, r4
   14cbc:	f242 0005 	movw	r0, #8197	; 0x2005
   14cc0:	f7ff fa98 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14cc4:	4602      	mov	r2, r0
   14cc6:	b930      	cbnz	r0, 14cd6 <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   14cc8:	4805      	ldr	r0, [pc, #20]	; (14ce0 <set_random_address+0x50>)
   14cca:	4629      	mov	r1, r5
   14ccc:	f00b feb9 	bl	20a42 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14cd0:	2301      	movs	r3, #1
   14cd2:	f800 3c01 	strb.w	r3, [r0, #-1]
}
   14cd6:	4610      	mov	r0, r2
   14cd8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14cda:	f06f 0268 	mvn.w	r2, #104	; 0x68
   14cde:	e7fa      	b.n	14cd6 <set_random_address+0x46>
   14ce0:	20000329 	.word	0x20000329

00014ce4 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14ce4:	b530      	push	{r4, r5, lr}
   14ce6:	4604      	mov	r4, r0
   14ce8:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14cea:	460d      	mov	r5, r1
   14cec:	b199      	cbz	r1, 14d16 <id_create.constprop.0+0x32>
   14cee:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   14cf0:	2207      	movs	r2, #7
   14cf2:	a902      	add	r1, sp, #8
   14cf4:	4628      	mov	r0, r5
   14cf6:	9302      	str	r3, [sp, #8]
   14cf8:	f8cd 300b 	str.w	r3, [sp, #11]
   14cfc:	f00e fd41 	bl	23782 <memcmp>
   14d00:	b148      	cbz	r0, 14d16 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14d02:	4810      	ldr	r0, [pc, #64]	; (14d44 <id_create.constprop.0+0x60>)
   14d04:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14d08:	4629      	mov	r1, r5
   14d0a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14d0c:	f00b fe9e 	bl	20a4c <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14d10:	2000      	movs	r0, #0
}
   14d12:	b005      	add	sp, #20
   14d14:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   14d16:	4668      	mov	r0, sp
   14d18:	f00b fbff 	bl	2051a <bt_addr_le_create_static>
			if (err) {
   14d1c:	2800      	cmp	r0, #0
   14d1e:	d1f8      	bne.n	14d12 <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   14d20:	4668      	mov	r0, sp
   14d22:	f7ff ff9b 	bl	14c5c <id_find>
   14d26:	2800      	cmp	r0, #0
   14d28:	daf5      	bge.n	14d16 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14d2a:	4806      	ldr	r0, [pc, #24]	; (14d44 <id_create.constprop.0+0x60>)
   14d2c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14d30:	4420      	add	r0, r4
   14d32:	4669      	mov	r1, sp
   14d34:	f00b fe8a 	bl	20a4c <bt_addr_le_copy>
		if (addr) {
   14d38:	2d00      	cmp	r5, #0
   14d3a:	d0e9      	beq.n	14d10 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   14d3c:	4601      	mov	r1, r0
   14d3e:	4628      	mov	r0, r5
   14d40:	e7e4      	b.n	14d0c <id_create.constprop.0+0x28>
   14d42:	bf00      	nop
   14d44:	200002c8 	.word	0x200002c8

00014d48 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14d48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14d4a:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14d4c:	4605      	mov	r5, r0
   14d4e:	b918      	cbnz	r0, 14d58 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14d50:	b1ec      	cbz	r4, 14d8e <bt_id_create+0x46>
		return -EINVAL;
   14d52:	f06f 0015 	mvn.w	r0, #21
   14d56:	e018      	b.n	14d8a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14d58:	2300      	movs	r3, #0
   14d5a:	2207      	movs	r2, #7
   14d5c:	4669      	mov	r1, sp
   14d5e:	9300      	str	r3, [sp, #0]
   14d60:	f8cd 3003 	str.w	r3, [sp, #3]
   14d64:	f00e fd0d 	bl	23782 <memcmp>
   14d68:	2800      	cmp	r0, #0
   14d6a:	d0f1      	beq.n	14d50 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14d6c:	782b      	ldrb	r3, [r5, #0]
   14d6e:	2b01      	cmp	r3, #1
   14d70:	d1ef      	bne.n	14d52 <bt_id_create+0xa>
   14d72:	79ab      	ldrb	r3, [r5, #6]
   14d74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14d78:	2bc0      	cmp	r3, #192	; 0xc0
   14d7a:	d1ea      	bne.n	14d52 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14d7c:	4628      	mov	r0, r5
   14d7e:	f7ff ff6d 	bl	14c5c <id_find>
   14d82:	2800      	cmp	r0, #0
   14d84:	dbe4      	blt.n	14d50 <bt_id_create+0x8>
			return -EALREADY;
   14d86:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   14d8a:	b002      	add	sp, #8
   14d8c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14d8e:	4e13      	ldr	r6, [pc, #76]	; (14ddc <bt_id_create+0x94>)
   14d90:	79f3      	ldrb	r3, [r6, #7]
   14d92:	2b01      	cmp	r3, #1
   14d94:	d01e      	beq.n	14dd4 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14d96:	f3bf 8f5b 	dmb	ish
   14d9a:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
   14d9e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14da2:	07db      	lsls	r3, r3, #31
   14da4:	d40b      	bmi.n	14dbe <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   14da6:	2d00      	cmp	r5, #0
   14da8:	d0d3      	beq.n	14d52 <bt_id_create+0xa>
   14daa:	2207      	movs	r2, #7
   14dac:	4669      	mov	r1, sp
   14dae:	4628      	mov	r0, r5
   14db0:	9400      	str	r4, [sp, #0]
   14db2:	f8cd 4003 	str.w	r4, [sp, #3]
   14db6:	f00e fce4 	bl	23782 <memcmp>
   14dba:	2800      	cmp	r0, #0
   14dbc:	d0c9      	beq.n	14d52 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   14dbe:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   14dc0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   14dc2:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   14dc4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   14dc6:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   14dc8:	f7ff ff8c 	bl	14ce4 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   14dcc:	2800      	cmp	r0, #0
   14dce:	bf08      	it	eq
   14dd0:	4620      	moveq	r0, r4
   14dd2:	e7da      	b.n	14d8a <bt_id_create+0x42>
		return -ENOMEM;
   14dd4:	f06f 000b 	mvn.w	r0, #11
   14dd8:	e7d7      	b.n	14d8a <bt_id_create+0x42>
   14dda:	bf00      	nop
   14ddc:	200002c8 	.word	0x200002c8

00014de0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14de0:	b570      	push	{r4, r5, r6, lr}
   14de2:	b086      	sub	sp, #24
   14de4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14de6:	aa01      	add	r2, sp, #4
   14de8:	2100      	movs	r1, #0
   14dea:	f241 0009 	movw	r0, #4105	; 0x1009
   14dee:	f7ff fa01 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14df2:	4604      	mov	r4, r0
   14df4:	b970      	cbnz	r0, 14e14 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   14df6:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14df8:	9002      	str	r0, [sp, #8]
   14dfa:	689d      	ldr	r5, [r3, #8]
   14dfc:	f8ad 000c 	strh.w	r0, [sp, #12]
   14e00:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   14e02:	2206      	movs	r2, #6
   14e04:	a902      	add	r1, sp, #8
   14e06:	4628      	mov	r0, r5
   14e08:	f00e fcbb 	bl	23782 <memcmp>
   14e0c:	b920      	cbnz	r0, 14e18 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   14e0e:	9801      	ldr	r0, [sp, #4]
   14e10:	f002 fb34 	bl	1747c <net_buf_unref>
		return 0U;
   14e14:	2000      	movs	r0, #0
   14e16:	e015      	b.n	14e44 <bt_id_read_public_addr+0x64>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   14e18:	4b0b      	ldr	r3, [pc, #44]	; (14e48 <bt_id_read_public_addr+0x68>)
   14e1a:	6818      	ldr	r0, [r3, #0]
   14e1c:	9004      	str	r0, [sp, #16]
   14e1e:	889b      	ldrh	r3, [r3, #4]
   14e20:	f8ad 3014 	strh.w	r3, [sp, #20]
   14e24:	2206      	movs	r2, #6
   14e26:	a904      	add	r1, sp, #16
   14e28:	4628      	mov	r0, r5
   14e2a:	f00e fcaa 	bl	23782 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14e2e:	2800      	cmp	r0, #0
   14e30:	d0ed      	beq.n	14e0e <bt_id_read_public_addr+0x2e>
		return 0U;
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
   14e32:	4629      	mov	r1, r5
   14e34:	1c70      	adds	r0, r6, #1
   14e36:	f00b fe04 	bl	20a42 <bt_addr_copy>
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   14e3a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   14e3c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   14e3e:	f002 fb1d 	bl	1747c <net_buf_unref>
	return 1U;
   14e42:	2001      	movs	r0, #1
}
   14e44:	b006      	add	sp, #24
   14e46:	bd70      	pop	{r4, r5, r6, pc}
   14e48:	00023cb3 	.word	0x00023cb3

00014e4c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14e4c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14e4e:	4668      	mov	r0, sp
   14e50:	f7ff ffc6 	bl	14de0 <bt_id_read_public_addr>
   14e54:	4b04      	ldr	r3, [pc, #16]	; (14e68 <bt_setup_public_id_addr+0x1c>)
   14e56:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14e58:	b118      	cbz	r0, 14e62 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   14e5a:	4669      	mov	r1, sp
   14e5c:	2000      	movs	r0, #0
   14e5e:	f7ff ff41 	bl	14ce4 <id_create.constprop.0>
}
   14e62:	b003      	add	sp, #12
   14e64:	f85d fb04 	ldr.w	pc, [sp], #4
   14e68:	200002c8 	.word	0x200002c8

00014e6c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14e6e:	4b18      	ldr	r3, [pc, #96]	; (14ed0 <bt_read_static_addr+0x64>)
   14e70:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   14e74:	f014 0401 	ands.w	r4, r4, #1
{
   14e78:	4605      	mov	r5, r0
   14e7a:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14e7c:	d015      	beq.n	14eaa <bt_read_static_addr+0x3e>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14e7e:	aa01      	add	r2, sp, #4
   14e80:	2100      	movs	r1, #0
   14e82:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14e86:	f7ff f9b5 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   14e8a:	4603      	mov	r3, r0
   14e8c:	b9e8      	cbnz	r0, 14eca <bt_read_static_addr+0x5e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   14e8e:	9801      	ldr	r0, [sp, #4]
   14e90:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   14e92:	7854      	ldrb	r4, [r2, #1]
   14e94:	f04f 0c16 	mov.w	ip, #22
   14e98:	42b4      	cmp	r4, r6
   14e9a:	bf28      	it	cs
   14e9c:	4634      	movcs	r4, r6
   14e9e:	eb02 070c 	add.w	r7, r2, ip
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   14ea2:	42a3      	cmp	r3, r4
   14ea4:	db04      	blt.n	14eb0 <bt_read_static_addr+0x44>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
   14ea6:	f002 fae9 	bl	1747c <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   14eaa:	4620      	mov	r0, r4
   14eac:	b003      	add	sp, #12
   14eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14eb0:	1c96      	adds	r6, r2, #2
   14eb2:	fb0c 5103 	mla	r1, ip, r3, r5
   14eb6:	f856 eb04 	ldr.w	lr, [r6], #4
   14eba:	f841 eb04 	str.w	lr, [r1], #4
   14ebe:	42be      	cmp	r6, r7
   14ec0:	d1f9      	bne.n	14eb6 <bt_read_static_addr+0x4a>
   14ec2:	883e      	ldrh	r6, [r7, #0]
   14ec4:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   14ec6:	3301      	adds	r3, #1
   14ec8:	e7eb      	b.n	14ea2 <bt_read_static_addr+0x36>
		return 0;
   14eca:	2400      	movs	r4, #0
   14ecc:	e7ed      	b.n	14eaa <bt_read_static_addr+0x3e>
   14ece:	bf00      	nop
   14ed0:	200002c8 	.word	0x200002c8

00014ed4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14ed4:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14ed6:	4d14      	ldr	r5, [pc, #80]	; (14f28 <bt_setup_random_id_addr+0x54>)
   14ed8:	79ec      	ldrb	r4, [r5, #7]
{
   14eda:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   14edc:	b9ec      	cbnz	r4, 14f1a <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14ede:	2101      	movs	r1, #1
   14ee0:	a802      	add	r0, sp, #8
   14ee2:	f7ff ffc3 	bl	14e6c <bt_read_static_addr>
   14ee6:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   14ee8:	b1b8      	cbz	r0, 14f1a <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   14eea:	2616      	movs	r6, #22
   14eec:	ab02      	add	r3, sp, #8
   14eee:	b2e2      	uxtb	r2, r4
   14ef0:	fb06 3102 	mla	r1, r6, r2, r3
   14ef4:	f10d 0001 	add.w	r0, sp, #1
   14ef8:	f00b fda3 	bl	20a42 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   14efc:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   14efe:	4669      	mov	r1, sp
   14f00:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   14f02:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14f06:	f7ff feed 	bl	14ce4 <id_create.constprop.0>
				if (err) {
   14f0a:	b920      	cbnz	r0, 14f16 <bt_setup_random_id_addr+0x42>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14f0c:	79ea      	ldrb	r2, [r5, #7]
   14f0e:	3401      	adds	r4, #1
   14f10:	b2e3      	uxtb	r3, r4
   14f12:	429a      	cmp	r2, r3
   14f14:	d8ea      	bhi.n	14eec <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   14f16:	b008      	add	sp, #32
   14f18:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
   14f1a:	2100      	movs	r1, #0
   14f1c:	4608      	mov	r0, r1
}
   14f1e:	b008      	add	sp, #32
   14f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   14f24:	f7ff bf10 	b.w	14d48 <bt_id_create>
   14f28:	200002c8 	.word	0x200002c8

00014f2c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f30:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   14f34:	7805      	ldrb	r5, [r0, #0]
{
   14f36:	460e      	mov	r6, r1
   14f38:	4690      	mov	r8, r2
   14f3a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f3c:	d026      	beq.n	14f8c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14f3e:	4c23      	ldr	r4, [pc, #140]	; (14fcc <bt_id_set_adv_own_addr+0xa0>)
   14f40:	b12a      	cbz	r2, 14f4e <bt_id_set_adv_own_addr+0x22>
   14f42:	0688      	lsls	r0, r1, #26
   14f44:	d503      	bpl.n	14f4e <bt_id_set_adv_own_addr+0x22>
   14f46:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   14f4a:	0659      	lsls	r1, r3, #25
   14f4c:	d53a      	bpl.n	14fc4 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14f4e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14f52:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   14f56:	5ce3      	ldrb	r3, [r4, r3]
   14f58:	2b01      	cmp	r3, #1
   14f5a:	d008      	beq.n	14f6e <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14f5c:	eba9 0505 	sub.w	r5, r9, r5
   14f60:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14f62:	f1b8 0f00 	cmp.w	r8, #0
   14f66:	d10c      	bne.n	14f82 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14f68:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14f6a:	2000      	movs	r0, #0
   14f6c:	e007      	b.n	14f7e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14f6e:	2007      	movs	r0, #7
   14f70:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14f74:	4420      	add	r0, r4
   14f76:	f7ff fe8b 	bl	14c90 <set_random_address>
				if (err) {
   14f7a:	2800      	cmp	r0, #0
   14f7c:	d0ee      	beq.n	14f5c <bt_id_set_adv_own_addr+0x30>
}
   14f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14f82:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14f84:	bf48      	it	mi
   14f86:	f043 0302 	orrmi.w	r3, r3, #2
   14f8a:	e7ed      	b.n	14f68 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14f8c:	074b      	lsls	r3, r1, #29
   14f8e:	d515      	bpl.n	14fbc <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14f90:	f8df 8038 	ldr.w	r8, [pc, #56]	; 14fcc <bt_id_set_adv_own_addr+0xa0>
   14f94:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   14f98:	00ee      	lsls	r6, r5, #3
   14f9a:	f818 3003 	ldrb.w	r3, [r8, r3]
   14f9e:	2b01      	cmp	r3, #1
   14fa0:	d10a      	bne.n	14fb8 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14fa2:	2007      	movs	r0, #7
   14fa4:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   14fa8:	4440      	add	r0, r8
   14faa:	f7ff fe71 	bl	14c90 <set_random_address>
			*own_addr_type = id_addr->type;
   14fae:	1b75      	subs	r5, r6, r5
   14fb0:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14fb4:	703b      	strb	r3, [r7, #0]
		if (err) {
   14fb6:	e7e2      	b.n	14f7e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   14fb8:	4620      	mov	r0, r4
   14fba:	e7f8      	b.n	14fae <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   14fbc:	f00b fd4f 	bl	20a5e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14fc0:	2301      	movs	r3, #1
   14fc2:	e7f7      	b.n	14fb4 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   14fc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14fc8:	e7d9      	b.n	14f7e <bt_id_set_adv_own_addr+0x52>
   14fca:	bf00      	nop
   14fcc:	200002c8 	.word	0x200002c8

00014fd0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14fd0:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14fd2:	4c0a      	ldr	r4, [pc, #40]	; (14ffc <bt_id_init+0x2c>)
   14fd4:	79e3      	ldrb	r3, [r4, #7]
   14fd6:	b10b      	cbz	r3, 14fdc <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14fd8:	2000      	movs	r0, #0
}
   14fda:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   14fdc:	f7ff ff36 	bl	14e4c <bt_setup_public_id_addr>
		if (err) {
   14fe0:	2800      	cmp	r0, #0
   14fe2:	d1fa      	bne.n	14fda <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14fe4:	79e3      	ldrb	r3, [r4, #7]
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	d1f6      	bne.n	14fd8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   14fea:	f7ff ff73 	bl	14ed4 <bt_setup_random_id_addr>
		if (err) {
   14fee:	2800      	cmp	r0, #0
   14ff0:	d1f3      	bne.n	14fda <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   14ff2:	1c60      	adds	r0, r4, #1
}
   14ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
   14ff8:	f7ff be4a 	b.w	14c90 <set_random_address>
   14ffc:	200002c8 	.word	0x200002c8

00015000 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15000:	6843      	ldr	r3, [r0, #4]
{
   15002:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15004:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   15006:	0558      	lsls	r0, r3, #21
   15008:	d502      	bpl.n	15010 <valid_adv_param+0x10>
		return false;
   1500a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   1500c:	b003      	add	sp, #12
   1500e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15010:	6922      	ldr	r2, [r4, #16]
   15012:	b10a      	cbz	r2, 15018 <valid_adv_param+0x18>
   15014:	07d9      	lsls	r1, r3, #31
   15016:	d5f8      	bpl.n	1500a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   15018:	4d1a      	ldr	r5, [pc, #104]	; (15084 <valid_adv_param+0x84>)
   1501a:	7820      	ldrb	r0, [r4, #0]
   1501c:	79eb      	ldrb	r3, [r5, #7]
   1501e:	4283      	cmp	r3, r0
   15020:	d9f3      	bls.n	1500a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15022:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15026:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   15028:	2207      	movs	r2, #7
   1502a:	4669      	mov	r1, sp
   1502c:	4428      	add	r0, r5
   1502e:	9300      	str	r3, [sp, #0]
   15030:	f8cd 3003 	str.w	r3, [sp, #3]
   15034:	f00e fba5 	bl	23782 <memcmp>
	if (param->id >= bt_dev.id_count ||
   15038:	2800      	cmp	r0, #0
   1503a:	d0e6      	beq.n	1500a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1503c:	6860      	ldr	r0, [r4, #4]
   1503e:	07c2      	lsls	r2, r0, #31
   15040:	d406      	bmi.n	15050 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15042:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   15046:	2b08      	cmp	r3, #8
   15048:	d802      	bhi.n	15050 <valid_adv_param+0x50>
   1504a:	68a3      	ldr	r3, [r4, #8]
   1504c:	2b9f      	cmp	r3, #159	; 0x9f
   1504e:	d9dc      	bls.n	1500a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   15050:	f010 0f30 	tst.w	r0, #48	; 0x30
   15054:	d002      	beq.n	1505c <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   15056:	6923      	ldr	r3, [r4, #16]
   15058:	2b00      	cmp	r3, #0
   1505a:	d0d6      	beq.n	1500a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1505c:	06c3      	lsls	r3, r0, #27
   1505e:	d401      	bmi.n	15064 <valid_adv_param+0x64>
   15060:	6923      	ldr	r3, [r4, #16]
   15062:	b943      	cbnz	r3, 15076 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   15064:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   15068:	429a      	cmp	r2, r3
   1506a:	d8ce      	bhi.n	1500a <valid_adv_param+0xa>
   1506c:	2a1f      	cmp	r2, #31
   1506e:	d9cc      	bls.n	1500a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   15070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15074:	d8c9      	bhi.n	1500a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   15076:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1507a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1507e:	bf18      	it	ne
   15080:	2001      	movne	r0, #1
   15082:	e7c3      	b.n	1500c <valid_adv_param+0xc>
   15084:	200002c8 	.word	0x200002c8

00015088 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15088:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1508a:	4606      	mov	r6, r0
   1508c:	4b1e      	ldr	r3, [pc, #120]	; (15108 <le_adv_start_add_conn+0x80>)
   1508e:	f816 2b09 	ldrb.w	r2, [r6], #9
   15092:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   15096:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15098:	2300      	movs	r3, #0
{
   1509a:	4605      	mov	r5, r0
   1509c:	2207      	movs	r2, #7
   1509e:	460f      	mov	r7, r1
   150a0:	4630      	mov	r0, r6
   150a2:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   150a4:	9300      	str	r3, [sp, #0]
   150a6:	f8cd 3003 	str.w	r3, [sp, #3]
   150aa:	f00e fb6a 	bl	23782 <memcmp>
   150ae:	782a      	ldrb	r2, [r5, #0]
   150b0:	4604      	mov	r4, r0
   150b2:	b9a8      	cbnz	r0, 150e0 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   150b4:	4b15      	ldr	r3, [pc, #84]	; (1510c <le_adv_start_add_conn+0x84>)
   150b6:	6818      	ldr	r0, [r3, #0]
   150b8:	8899      	ldrh	r1, [r3, #4]
   150ba:	9002      	str	r0, [sp, #8]
   150bc:	799b      	ldrb	r3, [r3, #6]
   150be:	f8ad 100c 	strh.w	r1, [sp, #12]
   150c2:	4610      	mov	r0, r2
   150c4:	a902      	add	r1, sp, #8
   150c6:	f88d 300e 	strb.w	r3, [sp, #14]
   150ca:	f000 fcc7 	bl	15a5c <bt_conn_add_le>
		if (!conn) {
   150ce:	4605      	mov	r5, r0
   150d0:	b1b8      	cbz	r0, 15102 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   150d2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   150d4:	f000 fb66 	bl	157a4 <bt_conn_set_state>
	*out_conn = conn;
   150d8:	603d      	str	r5, [r7, #0]
	return 0;
}
   150da:	4620      	mov	r0, r4
   150dc:	b005      	add	sp, #20
   150de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   150e0:	4631      	mov	r1, r6
   150e2:	4610      	mov	r0, r2
   150e4:	f00b ff3f 	bl	20f66 <bt_conn_exists_le>
   150e8:	4604      	mov	r4, r0
   150ea:	b938      	cbnz	r0, 150fc <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   150ec:	7828      	ldrb	r0, [r5, #0]
   150ee:	4631      	mov	r1, r6
   150f0:	f000 fcb4 	bl	15a5c <bt_conn_add_le>
	if (!conn) {
   150f4:	4605      	mov	r5, r0
   150f6:	b120      	cbz	r0, 15102 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   150f8:	2105      	movs	r1, #5
   150fa:	e7eb      	b.n	150d4 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   150fc:	f06f 0415 	mvn.w	r4, #21
   15100:	e7eb      	b.n	150da <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   15102:	f06f 040b 	mvn.w	r4, #11
   15106:	e7e8      	b.n	150da <le_adv_start_add_conn+0x52>
   15108:	200002c8 	.word	0x200002c8
   1510c:	00023cb9 	.word	0x00023cb9

00015110 <bt_le_adv_lookup_legacy>:
}
   15110:	4800      	ldr	r0, [pc, #0]	; (15114 <bt_le_adv_lookup_legacy+0x4>)
   15112:	4770      	bx	lr
   15114:	200002e0 	.word	0x200002e0

00015118 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   15118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1511c:	690e      	ldr	r6, [r1, #16]
{
   1511e:	b08f      	sub	sp, #60	; 0x3c
   15120:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   15122:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   15124:	ebb6 0903 	subs.w	r9, r6, r3
{
   15128:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1512a:	4889      	ldr	r0, [pc, #548]	; (15350 <bt_le_adv_start_legacy+0x238>)
   1512c:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   1512e:	bf18      	it	ne
   15130:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   15134:	9307      	str	r3, [sp, #28]
   15136:	f00b fcb5 	bl	20aa4 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1513a:	0747      	lsls	r7, r0, #29
{
   1513c:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1513e:	f140 80fb 	bpl.w	15338 <bt_le_adv_start_legacy+0x220>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15142:	4608      	mov	r0, r1
   15144:	f7ff ff5c 	bl	15000 <valid_adv_param>
   15148:	b928      	cbnz	r0, 15156 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1514a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1514e:	4658      	mov	r0, fp
   15150:	b00f      	add	sp, #60	; 0x3c
   15152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   15156:	4620      	mov	r0, r4
   15158:	f00b fc93 	bl	20a82 <bt_id_adv_random_addr_check>
   1515c:	4680      	mov	r8, r0
   1515e:	2800      	cmp	r0, #0
   15160:	d0f3      	beq.n	1514a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15162:	f105 0710 	add.w	r7, r5, #16
   15166:	4638      	mov	r0, r7
   15168:	f00b fc9c 	bl	20aa4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1516c:	f3c0 1380 	ubfx	r3, r0, #6, #1
   15170:	0640      	lsls	r0, r0, #25
   15172:	f100 80e4 	bmi.w	1533e <bt_le_adv_start_legacy+0x226>
	(void)memset(&set_param, 0, sizeof(set_param));
   15176:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   1517a:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1517e:	68a3      	ldr	r3, [r4, #8]
   15180:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   15184:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15186:	68e3      	ldr	r3, [r4, #12]
   15188:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1518c:	f00b fc7b 	bl	20a86 <get_adv_channel_map>
	if (adv->id != param->id) {
   15190:	782a      	ldrb	r2, [r5, #0]
   15192:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15194:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   15198:	429a      	cmp	r2, r3
   1519a:	d004      	beq.n	151a6 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1519c:	486c      	ldr	r0, [pc, #432]	; (15350 <bt_le_adv_start_legacy+0x238>)
   1519e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   151a2:	f00b fc85 	bl	20ab0 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   151a6:	4a6b      	ldr	r2, [pc, #428]	; (15354 <bt_le_adv_start_legacy+0x23c>)
	adv->id = param->id;
   151a8:	7823      	ldrb	r3, [r4, #0]
   151aa:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   151ac:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   151b0:	6861      	ldr	r1, [r4, #4]
   151b2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   151b6:	464a      	mov	r2, r9
   151b8:	4628      	mov	r0, r5
   151ba:	f7ff feb7 	bl	14f2c <bt_id_set_adv_own_addr>
	if (err) {
   151be:	4683      	mov	fp, r0
   151c0:	2800      	cmp	r0, #0
   151c2:	d1c4      	bne.n	1514e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   151c4:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   151c8:	2e00      	cmp	r6, #0
   151ca:	d046      	beq.n	1525a <bt_le_adv_start_legacy+0x142>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   151cc:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   151ce:	f00b fc7e 	bl	20ace <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   151d2:	4620      	mov	r0, r4
   151d4:	f00b fd71 	bl	20cba <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   151d8:	6863      	ldr	r3, [r4, #4]
   151da:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   151dc:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   151de:	d544      	bpl.n	1526a <bt_le_adv_start_legacy+0x152>
		if (dir_adv) {
   151e0:	2e00      	cmp	r6, #0
   151e2:	d03f      	beq.n	15264 <bt_le_adv_start_legacy+0x14c>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   151e4:	f013 0f10 	tst.w	r3, #16
   151e8:	bf14      	ite	ne
   151ea:	2304      	movne	r3, #4
   151ec:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   151ee:	6921      	ldr	r1, [r4, #16]
   151f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   151f4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   151f8:	f00b fc69 	bl	20ace <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   151fc:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15200:	210f      	movs	r1, #15
   15202:	f242 0006 	movw	r0, #8198	; 0x2006
   15206:	f7fe ffbb 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   1520a:	4683      	mov	fp, r0
   1520c:	2800      	cmp	r0, #0
   1520e:	f000 8099 	beq.w	15344 <bt_le_adv_start_legacy+0x22c>
   15212:	220f      	movs	r2, #15
   15214:	a90a      	add	r1, sp, #40	; 0x28
   15216:	3008      	adds	r0, #8
   15218:	f00d f932 	bl	22480 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1521c:	2200      	movs	r2, #0
   1521e:	4659      	mov	r1, fp
   15220:	f242 0006 	movw	r0, #8198	; 0x2006
   15224:	f7fe ffe6 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   15228:	2800      	cmp	r0, #0
   1522a:	f040 808e 	bne.w	1534a <bt_le_adv_start_legacy+0x232>
	if (!dir_adv) {
   1522e:	b366      	cbz	r6, 1528a <bt_le_adv_start_legacy+0x172>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15230:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15232:	07db      	lsls	r3, r3, #31
   15234:	d437      	bmi.n	152a6 <bt_le_adv_start_legacy+0x18e>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15236:	2101      	movs	r1, #1
   15238:	4628      	mov	r0, r5
   1523a:	f00b fd4e 	bl	20cda <bt_le_adv_set_enable_legacy>
	if (err) {
   1523e:	4683      	mov	fp, r0
   15240:	9807      	ldr	r0, [sp, #28]
   15242:	f1bb 0f00 	cmp.w	fp, #0
   15246:	d071      	beq.n	1532c <bt_le_adv_start_legacy+0x214>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15248:	2800      	cmp	r0, #0
   1524a:	d080      	beq.n	1514e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1524c:	2100      	movs	r1, #0
   1524e:	f000 faa9 	bl	157a4 <bt_conn_set_state>
			bt_conn_unref(conn);
   15252:	9807      	ldr	r0, [sp, #28]
   15254:	f00b fe20 	bl	20e98 <bt_conn_unref>
   15258:	e779      	b.n	1514e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1525a:	9608      	str	r6, [sp, #32]
   1525c:	a908      	add	r1, sp, #32
   1525e:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   15262:	e7b4      	b.n	151ce <bt_le_adv_start_legacy+0xb6>
			set_param.type = BT_HCI_ADV_IND;
   15264:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   15268:	e7ca      	b.n	15200 <bt_le_adv_start_legacy+0xe8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1526a:	059a      	lsls	r2, r3, #22
   1526c:	d403      	bmi.n	15276 <bt_le_adv_start_legacy+0x15e>
   1526e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15270:	b90b      	cbnz	r3, 15276 <bt_le_adv_start_legacy+0x15e>
   15272:	2802      	cmp	r0, #2
   15274:	d103      	bne.n	1527e <bt_le_adv_start_legacy+0x166>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   15276:	2302      	movs	r3, #2
   15278:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1527c:	e7c0      	b.n	15200 <bt_le_adv_start_legacy+0xe8>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1527e:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   15280:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15284:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15288:	e7ba      	b.n	15200 <bt_le_adv_start_legacy+0xe8>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1528a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1528c:	9300      	str	r3, [sp, #0]
   1528e:	e9cd 8901 	strd	r8, r9, [sp, #4]
   15292:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15294:	9905      	ldr	r1, [sp, #20]
   15296:	4652      	mov	r2, sl
   15298:	4628      	mov	r0, r5
   1529a:	f00b fc97 	bl	20bcc <le_adv_update.constprop.0>
		if (err) {
   1529e:	4683      	mov	fp, r0
   152a0:	2800      	cmp	r0, #0
   152a2:	d0c5      	beq.n	15230 <bt_le_adv_start_legacy+0x118>
   152a4:	e753      	b.n	1514e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   152a6:	a907      	add	r1, sp, #28
   152a8:	4628      	mov	r0, r5
   152aa:	f7ff feed 	bl	15088 <le_adv_start_add_conn>
		if (err) {
   152ae:	4683      	mov	fp, r0
   152b0:	2800      	cmp	r0, #0
   152b2:	d0c0      	beq.n	15236 <bt_le_adv_start_legacy+0x11e>
			if (err == -ENOMEM && !dir_adv &&
   152b4:	f110 0f0c 	cmn.w	r0, #12
   152b8:	f47f af49 	bne.w	1514e <bt_le_adv_start_legacy+0x36>
   152bc:	2e00      	cmp	r6, #0
   152be:	f47f af46 	bne.w	1514e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   152c2:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   152c4:	0798      	lsls	r0, r3, #30
   152c6:	f53f af42 	bmi.w	1514e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   152ca:	6862      	ldr	r2, [r4, #4]
   152cc:	f082 0202 	eor.w	r2, r2, #2
   152d0:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   152d4:	f00b 0201 	and.w	r2, fp, #1
   152d8:	210d      	movs	r1, #13
   152da:	4638      	mov	r0, r7
   152dc:	f00b fc5f 	bl	20b9e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   152e0:	f109 33ff 	add.w	r3, r9, #4294967295
   152e4:	425a      	negs	r2, r3
   152e6:	415a      	adcs	r2, r3
   152e8:	2107      	movs	r1, #7
   152ea:	4638      	mov	r0, r7
   152ec:	f00b fc57 	bl	20b9e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   152f0:	f1a9 0102 	sub.w	r1, r9, #2
   152f4:	424a      	negs	r2, r1
   152f6:	414a      	adcs	r2, r1
   152f8:	4638      	mov	r0, r7
   152fa:	2108      	movs	r1, #8
   152fc:	f00b fc4f 	bl	20b9e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   15300:	6862      	ldr	r2, [r4, #4]
   15302:	2109      	movs	r1, #9
   15304:	f002 0201 	and.w	r2, r2, #1
   15308:	4638      	mov	r0, r7
   1530a:	f00b fc48 	bl	20b9e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1530e:	4642      	mov	r2, r8
   15310:	210a      	movs	r1, #10
   15312:	4638      	mov	r0, r7
   15314:	f00b fc43 	bl	20b9e <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15318:	6862      	ldr	r2, [r4, #4]
   1531a:	210c      	movs	r1, #12
   1531c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15320:	4638      	mov	r0, r7
   15322:	f00b fc3c 	bl	20b9e <atomic_set_bit_to>
	return 0;
   15326:	f04f 0b00 	mov.w	fp, #0
   1532a:	e710      	b.n	1514e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1532c:	b108      	cbz	r0, 15332 <bt_le_adv_start_legacy+0x21a>
		bt_conn_unref(conn);
   1532e:	f00b fdb3 	bl	20e98 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15332:	2e00      	cmp	r6, #0
   15334:	d1ce      	bne.n	152d4 <bt_le_adv_start_legacy+0x1bc>
   15336:	e7c8      	b.n	152ca <bt_le_adv_start_legacy+0x1b2>
		return -EAGAIN;
   15338:	f06f 0b0a 	mvn.w	fp, #10
   1533c:	e707      	b.n	1514e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1533e:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   15342:	e704      	b.n	1514e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   15344:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15348:	e701      	b.n	1514e <bt_le_adv_start_legacy+0x36>
   1534a:	4683      	mov	fp, r0
   1534c:	e6ff      	b.n	1514e <bt_le_adv_start_legacy+0x36>
   1534e:	bf00      	nop
   15350:	20000394 	.word	0x20000394
   15354:	200002c8 	.word	0x200002c8

00015358 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   15358:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1535a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1535c:	9a06      	ldr	r2, [sp, #24]
{
   1535e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   15360:	e9cd 3200 	strd	r3, r2, [sp]
   15364:	462b      	mov	r3, r5
   15366:	460a      	mov	r2, r1
   15368:	4601      	mov	r1, r0
   1536a:	4811      	ldr	r0, [pc, #68]	; (153b0 <bt_le_adv_start+0x58>)
   1536c:	f7ff fed4 	bl	15118 <bt_le_adv_start_legacy>
   15370:	4621      	mov	r1, r4
   15372:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   15374:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   15376:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1537a:	429d      	cmp	r5, r3
   1537c:	d102      	bne.n	15384 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1537e:	4630      	mov	r0, r6
   15380:	b002      	add	sp, #8
   15382:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   15384:	880a      	ldrh	r2, [r1, #0]
   15386:	4282      	cmp	r2, r0
   15388:	d104      	bne.n	15394 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1538a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1538c:	b112      	cbz	r2, 15394 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1538e:	7812      	ldrb	r2, [r2, #0]
   15390:	07d2      	lsls	r2, r2, #31
   15392:	d402      	bmi.n	1539a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   15394:	3301      	adds	r3, #1
   15396:	3108      	adds	r1, #8
   15398:	e7ef      	b.n	1537a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1539a:	4906      	ldr	r1, [pc, #24]	; (153b4 <bt_le_adv_start+0x5c>)
   1539c:	4806      	ldr	r0, [pc, #24]	; (153b8 <bt_le_adv_start+0x60>)
   1539e:	f00d fea3 	bl	230e8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   153a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   153a6:	2300      	movs	r3, #0
   153a8:	4803      	ldr	r0, [pc, #12]	; (153b8 <bt_le_adv_start+0x60>)
   153aa:	f005 ffcb 	bl	1b344 <k_work_reschedule>
   153ae:	e7e6      	b.n	1537e <bt_le_adv_start+0x26>
   153b0:	200002e0 	.word	0x200002e0
   153b4:	00020d2b 	.word	0x00020d2b
   153b8:	200002f8 	.word	0x200002f8

000153bc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   153bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!adv) {
		BT_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   153be:	4822      	ldr	r0, [pc, #136]	; (15448 <bt_le_adv_stop+0x8c>)
   153c0:	f00b fcb0 	bl	20d24 <bt_le_lim_adv_cancel_timeout>
   153c4:	4821      	ldr	r0, [pc, #132]	; (1544c <bt_le_adv_stop+0x90>)
   153c6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   153ca:	f00b fb71 	bl	20ab0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   153ce:	481f      	ldr	r0, [pc, #124]	; (1544c <bt_le_adv_stop+0x90>)
   153d0:	f00b fb68 	bl	20aa4 <atomic_get>
   153d4:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   153d6:	065a      	lsls	r2, r3, #25
   153d8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   153dc:	d531      	bpl.n	15442 <bt_le_adv_stop+0x86>
   153de:	481b      	ldr	r0, [pc, #108]	; (1544c <bt_le_adv_stop+0x90>)
   153e0:	f00b fb60 	bl	20aa4 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153e4:	0583      	lsls	r3, r0, #22
   153e6:	d521      	bpl.n	1542c <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   153e8:	2300      	movs	r3, #0
   153ea:	4819      	ldr	r0, [pc, #100]	; (15450 <bt_le_adv_stop+0x94>)
   153ec:	9300      	str	r3, [sp, #0]
   153ee:	2207      	movs	r2, #7
   153f0:	4669      	mov	r1, sp
   153f2:	f8cd 3003 	str.w	r3, [sp, #3]
   153f6:	f00e f9c4 	bl	23782 <memcmp>
   153fa:	4b16      	ldr	r3, [pc, #88]	; (15454 <bt_le_adv_stop+0x98>)
   153fc:	b9e8      	cbnz	r0, 1543a <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   153fe:	4a16      	ldr	r2, [pc, #88]	; (15458 <bt_le_adv_stop+0x9c>)
   15400:	8891      	ldrh	r1, [r2, #4]
   15402:	6810      	ldr	r0, [r2, #0]
   15404:	7992      	ldrb	r2, [r2, #6]
   15406:	f8ad 100c 	strh.w	r1, [sp, #12]
   1540a:	f88d 200e 	strb.w	r2, [sp, #14]
   1540e:	9002      	str	r0, [sp, #8]
   15410:	2204      	movs	r2, #4
   15412:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   15414:	7e18      	ldrb	r0, [r3, #24]
   15416:	f000 fb5b 	bl	15ad0 <bt_conn_lookup_state_le>
   1541a:	4604      	mov	r4, r0
	if (conn) {
   1541c:	b130      	cbz	r0, 1542c <bt_le_adv_stop+0x70>
		conn->err = status;
   1541e:	2100      	movs	r1, #0
   15420:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15422:	f000 f9bf 	bl	157a4 <bt_conn_set_state>
		bt_conn_unref(conn);
   15426:	4620      	mov	r0, r4
   15428:	f00b fd36 	bl	20e98 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   1542c:	4806      	ldr	r0, [pc, #24]	; (15448 <bt_le_adv_stop+0x8c>)
   1542e:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   15430:	b004      	add	sp, #16
   15432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   15436:	f00b bc50 	b.w	20cda <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1543a:	2205      	movs	r2, #5
   1543c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   15440:	e7e8      	b.n	15414 <bt_le_adv_stop+0x58>
}
   15442:	b004      	add	sp, #16
   15444:	bd10      	pop	{r4, pc}
   15446:	bf00      	nop
   15448:	200002e0 	.word	0x200002e0
   1544c:	200002f0 	.word	0x200002f0
   15450:	200002e9 	.word	0x200002e9
   15454:	200002c8 	.word	0x200002c8
   15458:	00023cb9 	.word	0x00023cb9

0001545c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   1545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1545e:	481e      	ldr	r0, [pc, #120]	; (154d8 <bt_le_adv_resume+0x7c>)
   15460:	4c1d      	ldr	r4, [pc, #116]	; (154d8 <bt_le_adv_resume+0x7c>)
   15462:	f00b fb1f 	bl	20aa4 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15466:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   1546a:	d032      	beq.n	154d2 <bt_le_adv_resume+0x76>
   1546c:	4620      	mov	r0, r4
   1546e:	f00b fb19 	bl	20aa4 <atomic_get>
   15472:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15474:	f3c0 1580 	ubfx	r5, r0, #6, #1
   15478:	d42b      	bmi.n	154d2 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1547a:	4620      	mov	r0, r4
   1547c:	f00b fb12 	bl	20aa4 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   15480:	0583      	lsls	r3, r0, #22
   15482:	d526      	bpl.n	154d2 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   15484:	a901      	add	r1, sp, #4
   15486:	f1a4 0010 	sub.w	r0, r4, #16
   1548a:	f7ff fdfd 	bl	15088 <le_adv_start_add_conn>
	if (err) {
   1548e:	bb00      	cbnz	r0, 154d2 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15490:	2101      	movs	r1, #1
   15492:	f1a4 0010 	sub.w	r0, r4, #16
   15496:	f00b fc20 	bl	20cda <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   1549a:	b150      	cbz	r0, 154b2 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1549c:	4629      	mov	r1, r5
   1549e:	9801      	ldr	r0, [sp, #4]
   154a0:	f000 f980 	bl	157a4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   154a4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   154a8:	4620      	mov	r0, r4
   154aa:	f00b fb01 	bl	20ab0 <atomic_and>
	return (old & mask) != 0;
   154ae:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   154b2:	9801      	ldr	r0, [sp, #4]
   154b4:	f00b fcf0 	bl	20e98 <bt_conn_unref>
	if (persist_paused) {
   154b8:	b15d      	cbz	r5, 154d2 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   154ba:	f3bf 8f5b 	dmb	ish
   154be:	e854 3f00 	ldrex	r3, [r4]
   154c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   154c6:	e844 3200 	strex	r2, r3, [r4]
   154ca:	2a00      	cmp	r2, #0
   154cc:	d1f7      	bne.n	154be <bt_le_adv_resume+0x62>
   154ce:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   154d2:	b003      	add	sp, #12
   154d4:	bd30      	pop	{r4, r5, pc}
   154d6:	bf00      	nop
   154d8:	200002f0 	.word	0x200002f0

000154dc <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   154dc:	4b0b      	ldr	r3, [pc, #44]	; (1550c <notify_connected+0x30>)
{
   154de:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   154e0:	681d      	ldr	r5, [r3, #0]
{
   154e2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   154e4:	b925      	cbnz	r5, 154f0 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   154e6:	4d0a      	ldr	r5, [pc, #40]	; (15510 <notify_connected+0x34>)
   154e8:	4e0a      	ldr	r6, [pc, #40]	; (15514 <notify_connected+0x38>)
   154ea:	42b5      	cmp	r5, r6
   154ec:	d307      	bcc.n	154fe <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   154ee:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   154f0:	682b      	ldr	r3, [r5, #0]
   154f2:	b113      	cbz	r3, 154fa <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   154f4:	7a61      	ldrb	r1, [r4, #9]
   154f6:	4620      	mov	r0, r4
   154f8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   154fa:	692d      	ldr	r5, [r5, #16]
   154fc:	e7f2      	b.n	154e4 <notify_connected+0x8>
		if (cb->connected) {
   154fe:	682b      	ldr	r3, [r5, #0]
   15500:	b113      	cbz	r3, 15508 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   15502:	7a61      	ldrb	r1, [r4, #9]
   15504:	4620      	mov	r0, r4
   15506:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15508:	3514      	adds	r5, #20
   1550a:	e7ee      	b.n	154ea <notify_connected+0xe>
   1550c:	20002490 	.word	0x20002490
   15510:	00023bbc 	.word	0x00023bbc
   15514:	00023bbc 	.word	0x00023bbc

00015518 <tx_free>:
	tx->cb = NULL;
   15518:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1551a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1551e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   15520:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15522:	4801      	ldr	r0, [pc, #4]	; (15528 <tx_free+0x10>)
   15524:	f00d bcd4 	b.w	22ed0 <k_queue_append>
   15528:	20000a6c 	.word	0x20000a6c

0001552c <send_frag>:
{
   1552c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15530:	694d      	ldr	r5, [r1, #20]
{
   15532:	4604      	mov	r4, r0
   15534:	460e      	mov	r6, r1
   15536:	4690      	mov	r8, r2
   15538:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1553a:	f04f 33ff 	mov.w	r3, #4294967295
   1553e:	483e      	ldr	r0, [pc, #248]	; (15638 <send_frag+0x10c>)
   15540:	f04f 32ff 	mov.w	r2, #4294967295
   15544:	f005 fd1c 	bl	1af80 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   15548:	7aa3      	ldrb	r3, [r4, #10]
   1554a:	2b07      	cmp	r3, #7
   1554c:	d146      	bne.n	155dc <send_frag+0xb0>
	__asm__ volatile(
   1554e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15552:	f3ef 8211 	mrs	r2, BASEPRI
   15556:	f383 8812 	msr	BASEPRI_MAX, r3
   1555a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1555e:	69a3      	ldr	r3, [r4, #24]
   15560:	2d00      	cmp	r5, #0
   15562:	d04d      	beq.n	15600 <send_frag+0xd4>
	parent->next = child;
   15564:	2100      	movs	r1, #0
   15566:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   15568:	2b00      	cmp	r3, #0
   1556a:	d146      	bne.n	155fa <send_frag+0xce>
	list->head = node;
   1556c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   15570:	f382 8811 	msr	BASEPRI, r2
   15574:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   15578:	2104      	movs	r1, #4
   1557a:	f106 0008 	add.w	r0, r6, #8
   1557e:	f00c ff90 	bl	224a2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15582:	8823      	ldrh	r3, [r4, #0]
   15584:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   15588:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1558c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1558e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15592:	3b04      	subs	r3, #4
   15594:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15596:	2302      	movs	r3, #2
   15598:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1559a:	4630      	mov	r0, r6
   1559c:	f7fe ff94 	bl	144c8 <bt_send>
	if (err) {
   155a0:	2800      	cmp	r0, #0
   155a2:	d047      	beq.n	15634 <send_frag+0x108>
	__asm__ volatile(
   155a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   155a8:	f3ef 8011 	mrs	r0, BASEPRI
   155ac:	f383 8812 	msr	BASEPRI_MAX, r3
   155b0:	f3bf 8f6f 	isb	sy
		if (tx) {
   155b4:	2d00      	cmp	r5, #0
   155b6:	d037      	beq.n	15628 <send_frag+0xfc>
	return list->head;
   155b8:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   155ba:	2200      	movs	r2, #0
   155bc:	b153      	cbz	r3, 155d4 <send_frag+0xa8>
   155be:	429d      	cmp	r5, r3
   155c0:	d12f      	bne.n	15622 <send_frag+0xf6>
	return node->next;
   155c2:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   155c4:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   155c6:	bb3a      	cbnz	r2, 15618 <send_frag+0xec>
   155c8:	42a9      	cmp	r1, r5
	list->head = node;
   155ca:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   155cc:	d100      	bne.n	155d0 <send_frag+0xa4>
	list->tail = node;
   155ce:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   155d0:	2300      	movs	r3, #0
   155d2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   155d4:	f380 8811 	msr	BASEPRI, r0
   155d8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   155dc:	4816      	ldr	r0, [pc, #88]	; (15638 <send_frag+0x10c>)
   155de:	f005 fca9 	bl	1af34 <z_impl_k_sem_give>
	if (tx) {
   155e2:	b115      	cbz	r5, 155ea <send_frag+0xbe>
		tx_free(tx);
   155e4:	4628      	mov	r0, r5
   155e6:	f7ff ff97 	bl	15518 <tx_free>
	if (always_consume) {
   155ea:	b11f      	cbz	r7, 155f4 <send_frag+0xc8>
		net_buf_unref(buf);
   155ec:	4630      	mov	r0, r6
   155ee:	f001 ff45 	bl	1747c <net_buf_unref>
	return false;
   155f2:	2700      	movs	r7, #0
}
   155f4:	4638      	mov	r0, r7
   155f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   155fa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   155fc:	61a5      	str	r5, [r4, #24]
}
   155fe:	e7b7      	b.n	15570 <send_frag+0x44>
		if (tail_tx) {
   15600:	b133      	cbz	r3, 15610 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   15602:	f103 090c 	add.w	r9, r3, #12
   15606:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15608:	3301      	adds	r3, #1
   1560a:	f8c9 3000 	str.w	r3, [r9]
   1560e:	e7af      	b.n	15570 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15610:	69e3      	ldr	r3, [r4, #28]
   15612:	f104 091c 	add.w	r9, r4, #28
   15616:	e7f7      	b.n	15608 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   15618:	42a9      	cmp	r1, r5
	parent->next = child;
   1561a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1561c:	bf08      	it	eq
   1561e:	61a2      	streq	r2, [r4, #24]
}
   15620:	e7d6      	b.n	155d0 <send_frag+0xa4>
	return node->next;
   15622:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15624:	681b      	ldr	r3, [r3, #0]
   15626:	e7c9      	b.n	155bc <send_frag+0x90>
			(*pending_no_cb)--;
   15628:	f8d9 3000 	ldr.w	r3, [r9]
   1562c:	3b01      	subs	r3, #1
   1562e:	f8c9 3000 	str.w	r3, [r9]
   15632:	e7cf      	b.n	155d4 <send_frag+0xa8>
	return true;
   15634:	2701      	movs	r7, #1
   15636:	e7dd      	b.n	155f4 <send_frag+0xc8>
   15638:	200003c8 	.word	0x200003c8

0001563c <bt_conn_get_pkts>:
}
   1563c:	4800      	ldr	r0, [pc, #0]	; (15640 <bt_conn_get_pkts+0x4>)
   1563e:	4770      	bx	lr
   15640:	200003c8 	.word	0x200003c8

00015644 <bt_conn_new>:
{
   15644:	b538      	push	{r3, r4, r5, lr}
   15646:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   15648:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1564a:	2501      	movs	r5, #1
   1564c:	428b      	cmp	r3, r1
   1564e:	d102      	bne.n	15656 <bt_conn_new+0x12>
		return NULL;
   15650:	2400      	movs	r4, #0
}
   15652:	4620      	mov	r0, r4
   15654:	bd38      	pop	{r3, r4, r5, pc}
   15656:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1565a:	f3bf 8f5b 	dmb	ish
   1565e:	e852 0f00 	ldrex	r0, [r2]
   15662:	2800      	cmp	r0, #0
   15664:	d104      	bne.n	15670 <bt_conn_new+0x2c>
   15666:	e842 5c00 	strex	ip, r5, [r2]
   1566a:	f1bc 0f00 	cmp.w	ip, #0
   1566e:	d1f6      	bne.n	1565e <bt_conn_new+0x1a>
   15670:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15674:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   15678:	d002      	beq.n	15680 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1567a:	3301      	adds	r3, #1
   1567c:	4604      	mov	r4, r0
   1567e:	e7e5      	b.n	1564c <bt_conn_new+0x8>
	if (!conn) {
   15680:	2c00      	cmp	r4, #0
   15682:	d0e6      	beq.n	15652 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   15684:	22b8      	movs	r2, #184	; 0xb8
   15686:	2100      	movs	r1, #0
   15688:	4620      	mov	r0, r4
   1568a:	f00e f8ab 	bl	237e4 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1568e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15692:	4904      	ldr	r1, [pc, #16]	; (156a4 <bt_conn_new+0x60>)
   15694:	f00d fd28 	bl	230e8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15698:	4903      	ldr	r1, [pc, #12]	; (156a8 <bt_conn_new+0x64>)
   1569a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1569e:	f00d fce8 	bl	23072 <k_work_init>
	return conn;
   156a2:	e7d6      	b.n	15652 <bt_conn_new+0xe>
   156a4:	00015b81 	.word	0x00015b81
   156a8:	00020d75 	.word	0x00020d75

000156ac <bt_conn_send_cb>:
{
   156ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156ae:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   156b0:	7a83      	ldrb	r3, [r0, #10]
   156b2:	2b07      	cmp	r3, #7
{
   156b4:	4604      	mov	r4, r0
   156b6:	460d      	mov	r5, r1
   156b8:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   156ba:	d114      	bne.n	156e6 <bt_conn_send_cb+0x3a>
	if (cb) {
   156bc:	b312      	cbz	r2, 15704 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   156be:	f006 f939 	bl	1b934 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   156c2:	4b13      	ldr	r3, [pc, #76]	; (15710 <bt_conn_send_cb+0x64>)
   156c4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   156c6:	4813      	ldr	r0, [pc, #76]	; (15714 <bt_conn_send_cb+0x68>)
   156c8:	bf07      	ittee	eq
   156ca:	2200      	moveq	r2, #0
   156cc:	2300      	moveq	r3, #0
   156ce:	f04f 32ff 	movne.w	r2, #4294967295
   156d2:	f04f 33ff 	movne.w	r3, #4294967295
   156d6:	f005 fbf9 	bl	1aecc <z_impl_k_queue_get>
		if (!tx) {
   156da:	b1a8      	cbz	r0, 15708 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   156dc:	7aa3      	ldrb	r3, [r4, #10]
   156de:	2b07      	cmp	r3, #7
   156e0:	d004      	beq.n	156ec <bt_conn_send_cb+0x40>
			tx_free(tx);
   156e2:	f7ff ff19 	bl	15518 <tx_free>
		return -ENOTCONN;
   156e6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   156ea:	e00a      	b.n	15702 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   156ec:	2300      	movs	r3, #0
		tx->user_data = user_data;
   156ee:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   156f2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   156f4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   156f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   156fa:	4629      	mov	r1, r5
   156fc:	f00c fe87 	bl	2240e <net_buf_put>
	return 0;
   15700:	2000      	movs	r0, #0
}
   15702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   15704:	614a      	str	r2, [r1, #20]
   15706:	e7f6      	b.n	156f6 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   15708:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1570c:	e7f9      	b.n	15702 <bt_conn_send_cb+0x56>
   1570e:	bf00      	nop
   15710:	20001d70 	.word	0x20001d70
   15714:	20000a6c 	.word	0x20000a6c

00015718 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
   15718:	4b1b      	ldr	r3, [pc, #108]	; (15788 <bt_conn_prepare_events+0x70>)
{
   1571a:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
   1571c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1571e:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   15720:	609a      	str	r2, [r3, #8]
{
   15722:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15724:	f00e f800 	bl	23728 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15728:	f3bf 8f5b 	dmb	ish
   1572c:	4b17      	ldr	r3, [pc, #92]	; (1578c <bt_conn_prepare_events+0x74>)
   1572e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   15732:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   15736:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   1573a:	b90a      	cbnz	r2, 15740 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   1573c:	2001      	movs	r0, #1
}
   1573e:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15740:	7a9a      	ldrb	r2, [r3, #10]
   15742:	b99a      	cbnz	r2, 1576c <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15744:	f3bf 8f5b 	dmb	ish
   15748:	1d1a      	adds	r2, r3, #4
   1574a:	e852 1f00 	ldrex	r1, [r2]
   1574e:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
   15752:	e842 ce00 	strex	lr, ip, [r2]
   15756:	f1be 0f00 	cmp.w	lr, #0
   1575a:	d1f6      	bne.n	1574a <bt_conn_prepare_events+0x32>
   1575c:	f3bf 8f5b 	dmb	ish
   15760:	064a      	lsls	r2, r1, #25
   15762:	d503      	bpl.n	1576c <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
   15764:	4618      	mov	r0, r3
   15766:	f00b fb11 	bl	20d8c <conn_cleanup>
   1576a:	e7e7      	b.n	1573c <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   1576c:	7a9b      	ldrb	r3, [r3, #10]
   1576e:	2b07      	cmp	r3, #7
   15770:	d1e4      	bne.n	1573c <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   15772:	4b07      	ldr	r3, [pc, #28]	; (15790 <bt_conn_prepare_events+0x78>)
   15774:	2200      	movs	r2, #0
   15776:	2104      	movs	r1, #4
   15778:	f00d ffd6 	bl	23728 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1577c:	2301      	movs	r3, #1
   1577e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   15782:	2002      	movs	r0, #2
	return ev_count;
   15784:	e7db      	b.n	1573e <bt_conn_prepare_events+0x26>
   15786:	bf00      	nop
   15788:	20000674 	.word	0x20000674
   1578c:	200019b0 	.word	0x200019b0
   15790:	200019e8 	.word	0x200019e8

00015794 <bt_conn_lookup_handle>:
{
   15794:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15796:	2101      	movs	r1, #1
   15798:	4801      	ldr	r0, [pc, #4]	; (157a0 <bt_conn_lookup_handle+0xc>)
   1579a:	f00b bb97 	b.w	20ecc <conn_lookup_handle>
   1579e:	bf00      	nop
   157a0:	200019b0 	.word	0x200019b0

000157a4 <bt_conn_set_state>:
{
   157a4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   157a6:	7a85      	ldrb	r5, [r0, #10]
   157a8:	428d      	cmp	r5, r1
{
   157aa:	4604      	mov	r4, r0
	if (conn->state == state) {
   157ac:	f000 80a4 	beq.w	158f8 <bt_conn_set_state+0x154>
	conn->state = state;
   157b0:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   157b2:	b925      	cbnz	r5, 157be <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   157b4:	7883      	ldrb	r3, [r0, #2]
   157b6:	2b08      	cmp	r3, #8
   157b8:	d001      	beq.n	157be <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   157ba:	f00b fb52 	bl	20e62 <bt_conn_ref>
	switch (conn->state) {
   157be:	7aa3      	ldrb	r3, [r4, #10]
   157c0:	2b01      	cmp	r3, #1
   157c2:	d116      	bne.n	157f2 <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   157c4:	4d4d      	ldr	r5, [pc, #308]	; (158fc <bt_conn_set_state+0x158>)
		tx->pending_no_cb = 0U;
   157c6:	2600      	movs	r6, #0
	__asm__ volatile(
   157c8:	f04f 0340 	mov.w	r3, #64	; 0x40
   157cc:	f3ef 8211 	mrs	r2, BASEPRI
   157d0:	f383 8812 	msr	BASEPRI_MAX, r3
   157d4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   157d8:	69e3      	ldr	r3, [r4, #28]
   157da:	2b00      	cmp	r3, #0
   157dc:	d06d      	beq.n	158ba <bt_conn_set_state+0x116>
			conn->pending_no_cb--;
   157de:	3b01      	subs	r3, #1
   157e0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   157e2:	f382 8811 	msr	BASEPRI, r2
   157e6:	f3bf 8f6f 	isb	sy
   157ea:	4628      	mov	r0, r5
   157ec:	f005 fba2 	bl	1af34 <z_impl_k_sem_give>
}
   157f0:	e7ea      	b.n	157c8 <bt_conn_set_state+0x24>
	switch (conn->state) {
   157f2:	2b07      	cmp	r3, #7
   157f4:	d009      	beq.n	1580a <bt_conn_set_state+0x66>
   157f6:	2b00      	cmp	r3, #0
   157f8:	d17e      	bne.n	158f8 <bt_conn_set_state+0x154>
		if (conn->type == BT_CONN_TYPE_SCO) {
   157fa:	78a3      	ldrb	r3, [r4, #2]
   157fc:	2b04      	cmp	r3, #4
   157fe:	d11e      	bne.n	1583e <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   15800:	4620      	mov	r0, r4
}
   15802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   15806:	f00b bb47 	b.w	20e98 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1580a:	78a3      	ldrb	r3, [r4, #2]
   1580c:	2b04      	cmp	r3, #4
   1580e:	d073      	beq.n	158f8 <bt_conn_set_state+0x154>
	z_impl_k_queue_init(queue);
   15810:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15814:	f00d fb50 	bl	22eb8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15818:	4839      	ldr	r0, [pc, #228]	; (15900 <bt_conn_set_state+0x15c>)
   1581a:	2100      	movs	r1, #0
   1581c:	f006 fb3a 	bl	1be94 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15820:	2300      	movs	r3, #0
	list->tail = NULL;
   15822:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15826:	78e3      	ldrb	r3, [r4, #3]
   15828:	2b01      	cmp	r3, #1
   1582a:	d165      	bne.n	158f8 <bt_conn_set_state+0x154>
			k_work_schedule(&conn->deferred_work,
   1582c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15830:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   15834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15838:	2300      	movs	r3, #0
   1583a:	f005 bd4f 	b.w	1b2dc <k_work_schedule>
		switch (old_state) {
   1583e:	3d01      	subs	r5, #1
   15840:	2d05      	cmp	r5, #5
   15842:	d859      	bhi.n	158f8 <bt_conn_set_state+0x154>
   15844:	a301      	add	r3, pc, #4	; (adr r3, 1584c <bt_conn_set_state+0xa8>)
   15846:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1584a:	bf00      	nop
   1584c:	00015865 	.word	0x00015865
   15850:	000158ad 	.word	0x000158ad
   15854:	00015801 	.word	0x00015801
   15858:	00015801 	.word	0x00015801
   1585c:	000158ad 	.word	0x000158ad
   15860:	000158ad 	.word	0x000158ad
			tx_notify(conn);
   15864:	4620      	mov	r0, r4
   15866:	f00b fa62 	bl	20d2e <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1586a:	78a3      	ldrb	r3, [r4, #2]
   1586c:	2b01      	cmp	r3, #1
   1586e:	d10a      	bne.n	15886 <bt_conn_set_state+0xe2>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   15870:	f104 0558 	add.w	r5, r4, #88	; 0x58
   15874:	4628      	mov	r0, r5
   15876:	f00d fc43 	bl	23100 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1587a:	f010 0f0c 	tst.w	r0, #12
   1587e:	d002      	beq.n	15886 <bt_conn_set_state+0xe2>
				k_work_cancel_delayable(&conn->deferred_work);
   15880:	4628      	mov	r0, r5
   15882:	f00d fc3f 	bl	23104 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15886:	f3bf 8f5b 	dmb	ish
   1588a:	3404      	adds	r4, #4
   1588c:	e854 3f00 	ldrex	r3, [r4]
   15890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15894:	e844 3200 	strex	r2, r3, [r4]
   15898:	2a00      	cmp	r2, #0
   1589a:	d1f7      	bne.n	1588c <bt_conn_set_state+0xe8>
   1589c:	f3bf 8f5b 	dmb	ish
   158a0:	4817      	ldr	r0, [pc, #92]	; (15900 <bt_conn_set_state+0x15c>)
}
   158a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   158a6:	2100      	movs	r1, #0
   158a8:	f006 baf4 	b.w	1be94 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   158ac:	7a63      	ldrb	r3, [r4, #9]
   158ae:	2b00      	cmp	r3, #0
   158b0:	d0a6      	beq.n	15800 <bt_conn_set_state+0x5c>
				notify_connected(conn);
   158b2:	4620      	mov	r0, r4
   158b4:	f7ff fe12 	bl	154dc <notify_connected>
   158b8:	e7a2      	b.n	15800 <bt_conn_set_state+0x5c>
	return list->head;
   158ba:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   158bc:	b128      	cbz	r0, 158ca <bt_conn_set_state+0x126>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   158be:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   158c0:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   158c2:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   158c4:	4288      	cmp	r0, r1
	list->tail = node;
   158c6:	bf08      	it	eq
   158c8:	61a3      	streq	r3, [r4, #24]
   158ca:	f382 8811 	msr	BASEPRI, r2
   158ce:	f3bf 8f6f 	isb	sy
		if (!node) {
   158d2:	b188      	cbz	r0, 158f8 <bt_conn_set_state+0x154>
	__asm__ volatile(
   158d4:	f04f 0240 	mov.w	r2, #64	; 0x40
   158d8:	f3ef 8311 	mrs	r3, BASEPRI
   158dc:	f382 8812 	msr	BASEPRI_MAX, r2
   158e0:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   158e4:	68c2      	ldr	r2, [r0, #12]
   158e6:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   158e8:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   158ea:	f383 8811 	msr	BASEPRI, r3
   158ee:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   158f2:	f7ff fe11 	bl	15518 <tx_free>
   158f6:	e778      	b.n	157ea <bt_conn_set_state+0x46>
}
   158f8:	bd70      	pop	{r4, r5, r6, pc}
   158fa:	bf00      	nop
   158fc:	200003c8 	.word	0x200003c8
   15900:	20000674 	.word	0x20000674

00015904 <bt_conn_index>:
		index = conn - acl_conns;
   15904:	4b03      	ldr	r3, [pc, #12]	; (15914 <bt_conn_index+0x10>)
   15906:	1ac0      	subs	r0, r0, r3
   15908:	4b03      	ldr	r3, [pc, #12]	; (15918 <bt_conn_index+0x14>)
   1590a:	1180      	asrs	r0, r0, #6
   1590c:	4358      	muls	r0, r3
}
   1590e:	b2c0      	uxtb	r0, r0
   15910:	4770      	bx	lr
   15912:	bf00      	nop
   15914:	200019b0 	.word	0x200019b0
   15918:	aaaaaaab 	.word	0xaaaaaaab

0001591c <bt_conn_create_pdu_timeout>:
{
   1591c:	b538      	push	{r3, r4, r5, lr}
   1591e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   15920:	4906      	ldr	r1, [pc, #24]	; (1593c <bt_conn_create_pdu_timeout+0x20>)
   15922:	2800      	cmp	r0, #0
   15924:	bf08      	it	eq
   15926:	4608      	moveq	r0, r1
   15928:	f00c fd05 	bl	22336 <net_buf_alloc_fixed>
	if (!buf) {
   1592c:	4604      	mov	r4, r0
   1592e:	b118      	cbz	r0, 15938 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   15930:	1d29      	adds	r1, r5, #4
   15932:	3008      	adds	r0, #8
   15934:	f00c fd1e 	bl	22374 <net_buf_simple_reserve>
}
   15938:	4620      	mov	r0, r4
   1593a:	bd38      	pop	{r3, r4, r5, pc}
   1593c:	20000a84 	.word	0x20000a84

00015940 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15942:	f3bf 8f5b 	dmb	ish
   15946:	6842      	ldr	r2, [r0, #4]
   15948:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1594c:	05d2      	lsls	r2, r2, #23
{
   1594e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15950:	f100 0304 	add.w	r3, r0, #4
   15954:	d519      	bpl.n	1598a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15956:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1595a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   1595e:	4291      	cmp	r1, r2
   15960:	d813      	bhi.n	1598a <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15962:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   15966:	4291      	cmp	r1, r2
   15968:	d30f      	bcc.n	1598a <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1596a:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   1596e:	4291      	cmp	r1, r2
   15970:	d10b      	bne.n	1598a <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15972:	f3bf 8f5b 	dmb	ish
   15976:	e853 2f00 	ldrex	r2, [r3]
   1597a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1597e:	e843 2100 	strex	r1, r2, [r3]
   15982:	2900      	cmp	r1, #0
   15984:	d1f7      	bne.n	15976 <notify_le_param_updated+0x36>
   15986:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1598a:	4b10      	ldr	r3, [pc, #64]	; (159cc <notify_le_param_updated+0x8c>)
   1598c:	681d      	ldr	r5, [r3, #0]
   1598e:	b925      	cbnz	r5, 1599a <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15990:	4d0f      	ldr	r5, [pc, #60]	; (159d0 <notify_le_param_updated+0x90>)
   15992:	4f10      	ldr	r7, [pc, #64]	; (159d4 <notify_le_param_updated+0x94>)
   15994:	42bd      	cmp	r5, r7
   15996:	d30c      	bcc.n	159b2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1599a:	68ee      	ldr	r6, [r5, #12]
   1599c:	b13e      	cbz	r6, 159ae <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1599e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   159a2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   159a6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   159aa:	4620      	mov	r0, r4
   159ac:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   159ae:	692d      	ldr	r5, [r5, #16]
   159b0:	e7ed      	b.n	1598e <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   159b2:	68ee      	ldr	r6, [r5, #12]
   159b4:	b13e      	cbz	r6, 159c6 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   159b6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   159ba:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   159be:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   159c2:	4620      	mov	r0, r4
   159c4:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   159c6:	3514      	adds	r5, #20
   159c8:	e7e4      	b.n	15994 <notify_le_param_updated+0x54>
   159ca:	bf00      	nop
   159cc:	20002490 	.word	0x20002490
   159d0:	00023bbc 	.word	0x00023bbc
   159d4:	00023bbc 	.word	0x00023bbc

000159d8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   159d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159dc:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   159de:	4608      	mov	r0, r1
{
   159e0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   159e2:	f00a ff9a 	bl	2091a <bt_le_conn_params_valid>
   159e6:	4605      	mov	r5, r0
   159e8:	b918      	cbnz	r0, 159f2 <le_param_req+0x1a>
		return false;
   159ea:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   159ec:	4628      	mov	r0, r5
   159ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   159f2:	4b13      	ldr	r3, [pc, #76]	; (15a40 <le_param_req+0x68>)
   159f4:	681e      	ldr	r6, [r3, #0]
   159f6:	b946      	cbnz	r6, 15a0a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   159f8:	4e12      	ldr	r6, [pc, #72]	; (15a44 <le_param_req+0x6c>)
   159fa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 15a48 <le_param_req+0x70>
   159fe:	4546      	cmp	r6, r8
   15a00:	d2f4      	bcs.n	159ec <le_param_req+0x14>
		if (!cb->le_param_req) {
   15a02:	68b3      	ldr	r3, [r6, #8]
   15a04:	b983      	cbnz	r3, 15a28 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15a06:	3614      	adds	r6, #20
   15a08:	e7f9      	b.n	159fe <le_param_req+0x26>
		if (!cb->le_param_req) {
   15a0a:	68b3      	ldr	r3, [r6, #8]
   15a0c:	b90b      	cbnz	r3, 15a12 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   15a0e:	6936      	ldr	r6, [r6, #16]
   15a10:	e7f1      	b.n	159f6 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15a12:	4621      	mov	r1, r4
   15a14:	4638      	mov	r0, r7
   15a16:	4798      	blx	r3
   15a18:	2800      	cmp	r0, #0
   15a1a:	d0e6      	beq.n	159ea <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15a1c:	4620      	mov	r0, r4
   15a1e:	f00a ff7c 	bl	2091a <bt_le_conn_params_valid>
   15a22:	2800      	cmp	r0, #0
   15a24:	d1f3      	bne.n	15a0e <le_param_req+0x36>
   15a26:	e7e0      	b.n	159ea <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15a28:	4621      	mov	r1, r4
   15a2a:	4638      	mov	r0, r7
   15a2c:	4798      	blx	r3
   15a2e:	2800      	cmp	r0, #0
   15a30:	d0db      	beq.n	159ea <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15a32:	4620      	mov	r0, r4
   15a34:	f00a ff71 	bl	2091a <bt_le_conn_params_valid>
   15a38:	2800      	cmp	r0, #0
   15a3a:	d1e4      	bne.n	15a06 <le_param_req+0x2e>
   15a3c:	e7d5      	b.n	159ea <le_param_req+0x12>
   15a3e:	bf00      	nop
   15a40:	20002490 	.word	0x20002490
   15a44:	00023bbc 	.word	0x00023bbc
   15a48:	00023bbc 	.word	0x00023bbc

00015a4c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   15a4c:	4b02      	ldr	r3, [pc, #8]	; (15a58 <bt_conn_cb_register+0xc>)
   15a4e:	681a      	ldr	r2, [r3, #0]
   15a50:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   15a52:	6018      	str	r0, [r3, #0]
}
   15a54:	4770      	bx	lr
   15a56:	bf00      	nop
   15a58:	20002490 	.word	0x20002490

00015a5c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15a5c:	b538      	push	{r3, r4, r5, lr}
   15a5e:	4605      	mov	r5, r0
   15a60:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15a62:	480a      	ldr	r0, [pc, #40]	; (15a8c <bt_conn_add_le+0x30>)
   15a64:	2101      	movs	r1, #1
   15a66:	f7ff fded 	bl	15644 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   15a6a:	b170      	cbz	r0, 15a8a <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   15a6c:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15a6e:	6823      	ldr	r3, [r4, #0]
   15a70:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   15a74:	88a3      	ldrh	r3, [r4, #4]
   15a76:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   15a7a:	79a3      	ldrb	r3, [r4, #6]
   15a7c:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15a80:	2301      	movs	r3, #1
   15a82:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15a84:	4b02      	ldr	r3, [pc, #8]	; (15a90 <bt_conn_add_le+0x34>)
   15a86:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15a8a:	bd38      	pop	{r3, r4, r5, pc}
   15a8c:	200019b0 	.word	0x200019b0
   15a90:	00280018 	.word	0x00280018

00015a94 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15a94:	b570      	push	{r4, r5, r6, lr}
   15a96:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15a98:	480c      	ldr	r0, [pc, #48]	; (15acc <bt_conn_lookup_addr_le+0x38>)
{
   15a9a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15a9c:	f00b f9e1 	bl	20e62 <bt_conn_ref>

		if (!conn) {
   15aa0:	4604      	mov	r4, r0
   15aa2:	b128      	cbz	r0, 15ab0 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15aa4:	7883      	ldrb	r3, [r0, #2]
   15aa6:	2b01      	cmp	r3, #1
   15aa8:	d004      	beq.n	15ab4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   15aaa:	f00b f9f5 	bl	20e98 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15aae:	2400      	movs	r4, #0
}
   15ab0:	4620      	mov	r0, r4
   15ab2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   15ab4:	4629      	mov	r1, r5
   15ab6:	4632      	mov	r2, r6
   15ab8:	f00b fa35 	bl	20f26 <bt_conn_is_peer_addr_le>
   15abc:	4605      	mov	r5, r0
   15abe:	2800      	cmp	r0, #0
   15ac0:	d1f6      	bne.n	15ab0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15ac2:	4620      	mov	r0, r4
   15ac4:	f00b f9e8 	bl	20e98 <bt_conn_unref>
	return NULL;
   15ac8:	462c      	mov	r4, r5
			continue;
   15aca:	e7f1      	b.n	15ab0 <bt_conn_lookup_addr_le+0x1c>
   15acc:	200019b0 	.word	0x200019b0

00015ad0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ad2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15ad4:	480e      	ldr	r0, [pc, #56]	; (15b10 <bt_conn_lookup_state_le+0x40>)
{
   15ad6:	460e      	mov	r6, r1
   15ad8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15ada:	f00b f9c2 	bl	20e62 <bt_conn_ref>

		if (!conn) {
   15ade:	4604      	mov	r4, r0
   15ae0:	b1a0      	cbz	r0, 15b0c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15ae2:	7883      	ldrb	r3, [r0, #2]
   15ae4:	2b01      	cmp	r3, #1
   15ae6:	d003      	beq.n	15af0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15ae8:	f00b f9d6 	bl	20e98 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15aec:	2400      	movs	r4, #0
			continue;
   15aee:	e00d      	b.n	15b0c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15af0:	b136      	cbz	r6, 15b00 <bt_conn_lookup_state_le+0x30>
   15af2:	4632      	mov	r2, r6
   15af4:	4629      	mov	r1, r5
   15af6:	f00b fa16 	bl	20f26 <bt_conn_is_peer_addr_le>
   15afa:	b908      	cbnz	r0, 15b00 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   15afc:	4620      	mov	r0, r4
   15afe:	e7f3      	b.n	15ae8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15b00:	7aa3      	ldrb	r3, [r4, #10]
   15b02:	42bb      	cmp	r3, r7
   15b04:	d1fa      	bne.n	15afc <bt_conn_lookup_state_le+0x2c>
   15b06:	7a23      	ldrb	r3, [r4, #8]
   15b08:	42ab      	cmp	r3, r5
   15b0a:	d1f7      	bne.n	15afc <bt_conn_lookup_state_le+0x2c>
}
   15b0c:	4620      	mov	r0, r4
   15b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b10:	200019b0 	.word	0x200019b0

00015b14 <send_conn_le_param_update>:
{
   15b14:	b538      	push	{r3, r4, r5, lr}
   15b16:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15b18:	4608      	mov	r0, r1
{
   15b1a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15b1c:	f00a fefd 	bl	2091a <bt_le_conn_params_valid>
   15b20:	b348      	cbz	r0, 15b76 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15b22:	4b16      	ldr	r3, [pc, #88]	; (15b7c <send_conn_le_param_update+0x68>)
   15b24:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15b28:	0799      	lsls	r1, r3, #30
   15b2a:	d407      	bmi.n	15b3c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15b2c:	78e3      	ldrb	r3, [r4, #3]
   15b2e:	b183      	cbz	r3, 15b52 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15b30:	4629      	mov	r1, r5
   15b32:	4620      	mov	r0, r4
}
   15b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15b38:	f000 b9ac 	b.w	15e94 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15b3c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15b40:	079a      	lsls	r2, r3, #30
   15b42:	d5f3      	bpl.n	15b2c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15b44:	f3bf 8f5b 	dmb	ish
   15b48:	6863      	ldr	r3, [r4, #4]
   15b4a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15b4e:	059b      	lsls	r3, r3, #22
   15b50:	d4ec      	bmi.n	15b2c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15b52:	4629      	mov	r1, r5
   15b54:	4620      	mov	r0, r4
   15b56:	f00b fa0e 	bl	20f76 <bt_conn_le_conn_update>
		if (rc == 0) {
   15b5a:	b958      	cbnz	r0, 15b74 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   15b5c:	882b      	ldrh	r3, [r5, #0]
   15b5e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   15b62:	886b      	ldrh	r3, [r5, #2]
   15b64:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   15b68:	88ab      	ldrh	r3, [r5, #4]
   15b6a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   15b6e:	88eb      	ldrh	r3, [r5, #6]
   15b70:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15b74:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15b76:	f06f 0015 	mvn.w	r0, #21
   15b7a:	e7fb      	b.n	15b74 <send_conn_le_param_update+0x60>
   15b7c:	200002c8 	.word	0x200002c8

00015b80 <deferred_work>:
{
   15b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15b82:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   15b86:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15b88:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   15b8c:	b9fb      	cbnz	r3, 15bce <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   15b8e:	4628      	mov	r0, r5
   15b90:	f00b fa91 	bl	210b6 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15b94:	4b2c      	ldr	r3, [pc, #176]	; (15c48 <deferred_work+0xc8>)
   15b96:	681e      	ldr	r6, [r3, #0]
   15b98:	b94e      	cbnz	r6, 15bae <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15b9a:	4e2c      	ldr	r6, [pc, #176]	; (15c4c <deferred_work+0xcc>)
   15b9c:	4f2c      	ldr	r7, [pc, #176]	; (15c50 <deferred_work+0xd0>)
   15b9e:	42be      	cmp	r6, r7
   15ba0:	d30d      	bcc.n	15bbe <deferred_work+0x3e>
		bt_conn_unref(conn);
   15ba2:	4628      	mov	r0, r5
}
   15ba4:	b003      	add	sp, #12
   15ba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   15baa:	f00b b975 	b.w	20e98 <bt_conn_unref>
		if (cb->disconnected) {
   15bae:	6873      	ldr	r3, [r6, #4]
   15bb0:	b11b      	cbz	r3, 15bba <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   15bb2:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15bb6:	4628      	mov	r0, r5
   15bb8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15bba:	6936      	ldr	r6, [r6, #16]
   15bbc:	e7ec      	b.n	15b98 <deferred_work+0x18>
		if (cb->disconnected) {
   15bbe:	6873      	ldr	r3, [r6, #4]
   15bc0:	b11b      	cbz	r3, 15bca <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   15bc2:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15bc6:	4628      	mov	r0, r5
   15bc8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15bca:	3614      	adds	r6, #20
   15bcc:	e7e7      	b.n	15b9e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   15bce:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15bd2:	2b01      	cmp	r3, #1
   15bd4:	d12f      	bne.n	15c36 <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15bd6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15bda:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   15bde:	e856 3f00 	ldrex	r3, [r6]
   15be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   15be6:	e846 2100 	strex	r1, r2, [r6]
   15bea:	2900      	cmp	r1, #0
   15bec:	d1f7      	bne.n	15bde <deferred_work+0x5e>
   15bee:	f3bf 8f5b 	dmb	ish
   15bf2:	05db      	lsls	r3, r3, #23
   15bf4:	d521      	bpl.n	15c3a <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15bf6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15bfa:	f8ad 3000 	strh.w	r3, [sp]
   15bfe:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   15c02:	f8ad 3002 	strh.w	r3, [sp, #2]
   15c06:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   15c0a:	f8ad 3004 	strh.w	r3, [sp, #4]
   15c0e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   15c12:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   15c16:	4669      	mov	r1, sp
   15c18:	4628      	mov	r0, r5
   15c1a:	f7ff ff7b 	bl	15b14 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c1e:	f3bf 8f5b 	dmb	ish
   15c22:	e856 3f00 	ldrex	r3, [r6]
   15c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15c2a:	e846 3200 	strex	r2, r3, [r6]
   15c2e:	2a00      	cmp	r2, #0
   15c30:	d1f7      	bne.n	15c22 <deferred_work+0xa2>
   15c32:	f3bf 8f5b 	dmb	ish
}
   15c36:	b003      	add	sp, #12
   15c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   15c3a:	4a06      	ldr	r2, [pc, #24]	; (15c54 <deferred_work+0xd4>)
   15c3c:	6810      	ldr	r0, [r2, #0]
   15c3e:	6851      	ldr	r1, [r2, #4]
   15c40:	466b      	mov	r3, sp
   15c42:	c303      	stmia	r3!, {r0, r1}
   15c44:	e7e7      	b.n	15c16 <deferred_work+0x96>
   15c46:	bf00      	nop
   15c48:	20002490 	.word	0x20002490
   15c4c:	00023bbc 	.word	0x00023bbc
   15c50:	00023bbc 	.word	0x00023bbc
   15c54:	00023ca4 	.word	0x00023ca4

00015c58 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15c58:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   15c5a:	4801      	ldr	r0, [pc, #4]	; (15c60 <bt_conn_create_frag_timeout+0x8>)
   15c5c:	f7ff be5e 	b.w	1591c <bt_conn_create_pdu_timeout>
   15c60:	20000adc 	.word	0x20000adc

00015c64 <create_frag>:
{
   15c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c68:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   15c6a:	f04f 33ff 	mov.w	r3, #4294967295
   15c6e:	f04f 32ff 	mov.w	r2, #4294967295
   15c72:	2000      	movs	r0, #0
{
   15c74:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   15c76:	f7ff ffef 	bl	15c58 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   15c7a:	7ab3      	ldrb	r3, [r6, #10]
   15c7c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   15c7e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   15c80:	f04f 0600 	mov.w	r6, #0
   15c84:	d005      	beq.n	15c92 <create_frag+0x2e>
		net_buf_unref(frag);
   15c86:	f001 fbf9 	bl	1747c <net_buf_unref>
		return NULL;
   15c8a:	4635      	mov	r5, r6
}
   15c8c:	4628      	mov	r0, r5
   15c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   15c92:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15c94:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   15c98:	4e0c      	ldr	r6, [pc, #48]	; (15ccc <create_frag+0x68>)
   15c9a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15c9c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   15ca0:	f00c fc23 	bl	224ea <net_buf_simple_tailroom>
   15ca4:	4580      	cmp	r8, r0
   15ca6:	d20c      	bcs.n	15cc2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   15ca8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15cac:	f854 1f08 	ldr.w	r1, [r4, #8]!
   15cb0:	4632      	mov	r2, r6
   15cb2:	4638      	mov	r0, r7
   15cb4:	f00c fbe4 	bl	22480 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   15cb8:	4631      	mov	r1, r6
   15cba:	4620      	mov	r0, r4
   15cbc:	f00c fbf9 	bl	224b2 <net_buf_simple_pull>
   15cc0:	e7e4      	b.n	15c8c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15cc2:	4638      	mov	r0, r7
   15cc4:	f00c fc11 	bl	224ea <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15cc8:	b286      	uxth	r6, r0
   15cca:	e7ef      	b.n	15cac <create_frag+0x48>
   15ccc:	200002c8 	.word	0x200002c8

00015cd0 <bt_conn_process_tx>:
{
   15cd0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15cd2:	7a83      	ldrb	r3, [r0, #10]
{
   15cd4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15cd6:	b993      	cbnz	r3, 15cfe <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15cd8:	f3bf 8f5b 	dmb	ish
   15cdc:	1d03      	adds	r3, r0, #4
   15cde:	e853 2f00 	ldrex	r2, [r3]
   15ce2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   15ce6:	e843 1500 	strex	r5, r1, [r3]
   15cea:	2d00      	cmp	r5, #0
   15cec:	d1f7      	bne.n	15cde <bt_conn_process_tx+0xe>
   15cee:	f3bf 8f5b 	dmb	ish
   15cf2:	0653      	lsls	r3, r2, #25
   15cf4:	d503      	bpl.n	15cfe <bt_conn_process_tx+0x2e>
}
   15cf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   15cfa:	f00b b847 	b.w	20d8c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15cfe:	2200      	movs	r2, #0
   15d00:	2300      	movs	r3, #0
   15d02:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15d06:	f00c fb1b 	bl	22340 <net_buf_get>
	BT_ASSERT(buf);
   15d0a:	4605      	mov	r5, r0
   15d0c:	b960      	cbnz	r0, 15d28 <bt_conn_process_tx+0x58>
   15d0e:	4a1f      	ldr	r2, [pc, #124]	; (15d8c <bt_conn_process_tx+0xbc>)
   15d10:	491f      	ldr	r1, [pc, #124]	; (15d90 <bt_conn_process_tx+0xc0>)
   15d12:	4820      	ldr	r0, [pc, #128]	; (15d94 <bt_conn_process_tx+0xc4>)
   15d14:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   15d18:	f00a f930 	bl	1ff7c <assert_print>
   15d1c:	4040      	eors	r0, r0
   15d1e:	f380 8811 	msr	BASEPRI, r0
   15d22:	f04f 0003 	mov.w	r0, #3
   15d26:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   15d28:	4e1b      	ldr	r6, [pc, #108]	; (15d98 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   15d2a:	89aa      	ldrh	r2, [r5, #12]
   15d2c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15d30:	429a      	cmp	r2, r3
   15d32:	d807      	bhi.n	15d44 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15d34:	2300      	movs	r3, #0
   15d36:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   15d38:	4629      	mov	r1, r5
   15d3a:	4620      	mov	r0, r4
   15d3c:	f7ff fbf6 	bl	1552c <send_frag>
	if (!send_buf(conn, buf)) {
   15d40:	b130      	cbz	r0, 15d50 <bt_conn_process_tx+0x80>
}
   15d42:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   15d44:	4629      	mov	r1, r5
   15d46:	4620      	mov	r0, r4
   15d48:	f7ff ff8c 	bl	15c64 <create_frag>
	if (!frag) {
   15d4c:	4601      	mov	r1, r0
   15d4e:	b920      	cbnz	r0, 15d5a <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
   15d50:	4628      	mov	r0, r5
}
   15d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   15d56:	f001 bb91 	b.w	1747c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15d5a:	2301      	movs	r3, #1
   15d5c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15d5e:	4620      	mov	r0, r4
   15d60:	f7ff fbe4 	bl	1552c <send_frag>
   15d64:	2800      	cmp	r0, #0
   15d66:	d0f3      	beq.n	15d50 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   15d68:	89aa      	ldrh	r2, [r5, #12]
   15d6a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15d6e:	429a      	cmp	r2, r3
   15d70:	d802      	bhi.n	15d78 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
   15d72:	2300      	movs	r3, #0
   15d74:	2203      	movs	r2, #3
   15d76:	e7df      	b.n	15d38 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   15d78:	4629      	mov	r1, r5
   15d7a:	4620      	mov	r0, r4
   15d7c:	f7ff ff72 	bl	15c64 <create_frag>
		if (!frag) {
   15d80:	4601      	mov	r1, r0
   15d82:	2800      	cmp	r0, #0
   15d84:	d0e4      	beq.n	15d50 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15d86:	2301      	movs	r3, #1
   15d88:	461a      	mov	r2, r3
   15d8a:	e7e8      	b.n	15d5e <bt_conn_process_tx+0x8e>
   15d8c:	00024e1f 	.word	0x00024e1f
   15d90:	00024deb 	.word	0x00024deb
   15d94:	00024d77 	.word	0x00024d77
   15d98:	200002c8 	.word	0x200002c8

00015d9c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   15d9c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15d9e:	490b      	ldr	r1, [pc, #44]	; (15dcc <bt_conn_init+0x30>)
   15da0:	480b      	ldr	r0, [pc, #44]	; (15dd0 <bt_conn_init+0x34>)
   15da2:	f00d f895 	bl	22ed0 <k_queue_append>
   15da6:	490b      	ldr	r1, [pc, #44]	; (15dd4 <bt_conn_init+0x38>)
   15da8:	4809      	ldr	r0, [pc, #36]	; (15dd0 <bt_conn_init+0x34>)
   15daa:	f00d f891 	bl	22ed0 <k_queue_append>
   15dae:	490a      	ldr	r1, [pc, #40]	; (15dd8 <bt_conn_init+0x3c>)
   15db0:	4807      	ldr	r0, [pc, #28]	; (15dd0 <bt_conn_init+0x34>)
   15db2:	f00d f88d 	bl	22ed0 <k_queue_append>
	}

	bt_att_init();
   15db6:	f00b fe72 	bl	21a9e <bt_att_init>

	err = bt_smp_init();
   15dba:	f00c fab9 	bl	22330 <bt_smp_init>
	if (err) {
   15dbe:	4604      	mov	r4, r0
   15dc0:	b908      	cbnz	r0, 15dc6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   15dc2:	f00b f9fb 	bl	211bc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15dc6:	4620      	mov	r0, r4
   15dc8:	bd10      	pop	{r4, pc}
   15dca:	bf00      	nop
   15dcc:	20002494 	.word	0x20002494
   15dd0:	20000a6c 	.word	0x20000a6c
   15dd4:	200024a4 	.word	0x200024a4
   15dd8:	200024b4 	.word	0x200024b4

00015ddc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   15ddc:	4b04      	ldr	r3, [pc, #16]	; (15df0 <l2cap_accept+0x14>)
   15dde:	6818      	ldr	r0, [r3, #0]
   15de0:	b918      	cbnz	r0, 15dea <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   15de2:	4a04      	ldr	r2, [pc, #16]	; (15df4 <l2cap_accept+0x18>)
   15de4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   15de6:	600b      	str	r3, [r1, #0]

		return 0;
   15de8:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   15dea:	f06f 000b 	mvn.w	r0, #11
}
   15dee:	4770      	bx	lr
   15df0:	200024c4 	.word	0x200024c4
   15df4:	00024220 	.word	0x00024220

00015df8 <bt_l2cap_connected>:
{
   15df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15dfa:	4d24      	ldr	r5, [pc, #144]	; (15e8c <bt_l2cap_connected+0x94>)
   15dfc:	4f24      	ldr	r7, [pc, #144]	; (15e90 <bt_l2cap_connected+0x98>)
{
   15dfe:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15e00:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15e02:	42bd      	cmp	r5, r7
   15e04:	d301      	bcc.n	15e0a <bt_l2cap_connected+0x12>
}
   15e06:	b003      	add	sp, #12
   15e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   15e0a:	686b      	ldr	r3, [r5, #4]
   15e0c:	a901      	add	r1, sp, #4
   15e0e:	4620      	mov	r0, r4
   15e10:	4798      	blx	r3
   15e12:	2800      	cmp	r0, #0
   15e14:	db34      	blt.n	15e80 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15e16:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15e18:	882a      	ldrh	r2, [r5, #0]
   15e1a:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   15e1c:	849a      	strh	r2, [r3, #36]	; 0x24
   15e1e:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   15e22:	68a8      	ldr	r0, [r5, #8]
   15e24:	f3bf 8f5b 	dmb	ish
   15e28:	e852 1f00 	ldrex	r1, [r2]
   15e2c:	e842 6c00 	strex	ip, r6, [r2]
   15e30:	f1bc 0f00 	cmp.w	ip, #0
   15e34:	d1f8      	bne.n	15e28 <bt_l2cap_connected+0x30>
   15e36:	f3bf 8f5b 	dmb	ish
	return list->tail;
   15e3a:	6d61      	ldr	r1, [r4, #84]	; 0x54
	parent->next = child;
   15e3c:	609e      	str	r6, [r3, #8]
	sys_slist_append(&conn->channels, &chan->node);
   15e3e:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15e42:	b9f9      	cbnz	r1, 15e84 <bt_l2cap_connected+0x8c>
	list->head = node;
   15e44:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->destroy = destroy;
   15e48:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15e4a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   15e4c:	601c      	str	r4, [r3, #0]
		if (chan->ops->connected) {
   15e4e:	6843      	ldr	r3, [r0, #4]
   15e50:	681b      	ldr	r3, [r3, #0]
   15e52:	b103      	cbz	r3, 15e56 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   15e54:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15e56:	9b01      	ldr	r3, [sp, #4]
   15e58:	f3bf 8f5b 	dmb	ish
   15e5c:	3310      	adds	r3, #16
   15e5e:	e853 2f00 	ldrex	r2, [r3]
   15e62:	f042 0201 	orr.w	r2, r2, #1
   15e66:	e843 2100 	strex	r1, r2, [r3]
   15e6a:	2900      	cmp	r1, #0
   15e6c:	d1f7      	bne.n	15e5e <bt_l2cap_connected+0x66>
   15e6e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   15e72:	9801      	ldr	r0, [sp, #4]
   15e74:	6843      	ldr	r3, [r0, #4]
   15e76:	699b      	ldr	r3, [r3, #24]
   15e78:	b113      	cbz	r3, 15e80 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   15e7a:	f100 0110 	add.w	r1, r0, #16
   15e7e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15e80:	350c      	adds	r5, #12
   15e82:	e7be      	b.n	15e02 <bt_l2cap_connected+0xa>
	parent->next = child;
   15e84:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15e86:	6562      	str	r2, [r4, #84]	; 0x54
}
   15e88:	e7de      	b.n	15e48 <bt_l2cap_connected+0x50>
   15e8a:	bf00      	nop
   15e8c:	00023b98 	.word	0x00023b98
   15e90:	00023bbc 	.word	0x00023bbc

00015e94 <bt_l2cap_update_conn_param>:
{
   15e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15e96:	460d      	mov	r5, r1
	ident++;
   15e98:	4916      	ldr	r1, [pc, #88]	; (15ef4 <bt_l2cap_update_conn_param+0x60>)
   15e9a:	780b      	ldrb	r3, [r1, #0]
   15e9c:	3301      	adds	r3, #1
	if (!ident) {
   15e9e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   15ea2:	bf08      	it	eq
   15ea4:	2301      	moveq	r3, #1
   15ea6:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15ea8:	7809      	ldrb	r1, [r1, #0]
{
   15eaa:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15eac:	2208      	movs	r2, #8
   15eae:	2012      	movs	r0, #18
   15eb0:	f00b f8d5 	bl	2105e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15eb4:	4604      	mov	r4, r0
   15eb6:	b1d0      	cbz	r0, 15eee <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   15eb8:	2108      	movs	r1, #8
   15eba:	4408      	add	r0, r1
   15ebc:	f00c fada 	bl	22474 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15ec0:	882b      	ldrh	r3, [r5, #0]
   15ec2:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15ec4:	886b      	ldrh	r3, [r5, #2]
   15ec6:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15ec8:	88ab      	ldrh	r3, [r5, #4]
   15eca:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15ecc:	88eb      	ldrh	r3, [r5, #6]
   15ece:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15ed0:	2300      	movs	r3, #0
   15ed2:	9300      	str	r3, [sp, #0]
   15ed4:	4622      	mov	r2, r4
   15ed6:	2105      	movs	r1, #5
   15ed8:	4630      	mov	r0, r6
   15eda:	f00b f900 	bl	210de <bt_l2cap_send_cb>
	if (err) {
   15ede:	4605      	mov	r5, r0
   15ee0:	b110      	cbz	r0, 15ee8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   15ee2:	4620      	mov	r0, r4
   15ee4:	f001 faca 	bl	1747c <net_buf_unref>
}
   15ee8:	4628      	mov	r0, r5
   15eea:	b002      	add	sp, #8
   15eec:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15eee:	f06f 050b 	mvn.w	r5, #11
   15ef2:	e7f9      	b.n	15ee8 <bt_l2cap_update_conn_param+0x54>
   15ef4:	20003339 	.word	0x20003339

00015ef8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   15ef8:	4b02      	ldr	r3, [pc, #8]	; (15f04 <att_cfm_sent+0xc>)
   15efa:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15efe:	f00b b970 	b.w	211e2 <att_sent>
   15f02:	bf00      	nop
   15f04:	0002173d 	.word	0x0002173d

00015f08 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   15f08:	4b02      	ldr	r3, [pc, #8]	; (15f14 <att_rsp_sent+0xc>)
   15f0a:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15f0e:	f00b b968 	b.w	211e2 <att_sent>
   15f12:	bf00      	nop
   15f14:	0002189d 	.word	0x0002189d

00015f18 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   15f18:	4b02      	ldr	r3, [pc, #8]	; (15f24 <att_req_sent+0xc>)
   15f1a:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc

	att_sent(conn, user_data);
   15f1e:	f00b b960 	b.w	211e2 <att_sent>
   15f22:	bf00      	nop
   15f24:	00021477 	.word	0x00021477

00015f28 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15f28:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15f2a:	3804      	subs	r0, #4
   15f2c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15f2e:	a901      	add	r1, sp, #4
   15f30:	4802      	ldr	r0, [pc, #8]	; (15f3c <bt_att_released+0x14>)
   15f32:	f00c ff07 	bl	22d44 <k_mem_slab_free>
}
   15f36:	b003      	add	sp, #12
   15f38:	f85d fb04 	ldr.w	pc, [sp], #4
   15f3c:	200009d0 	.word	0x200009d0

00015f40 <read_group_cb>:
{
   15f40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   15f44:	4605      	mov	r5, r0
   15f46:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15f48:	f04f 0800 	mov.w	r8, #0
   15f4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15f50:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   15f52:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15f54:	f88d 8008 	strb.w	r8, [sp, #8]
   15f58:	a902      	add	r1, sp, #8
{
   15f5a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15f5c:	f8ad 300a 	strh.w	r3, [sp, #10]
   15f60:	f00a fa8d 	bl	2047e <bt_uuid_cmp>
   15f64:	b1a0      	cbz	r0, 15f90 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15f66:	f642 0301 	movw	r3, #10241	; 0x2801
   15f6a:	6828      	ldr	r0, [r5, #0]
   15f6c:	f88d 800c 	strb.w	r8, [sp, #12]
   15f70:	a903      	add	r1, sp, #12
   15f72:	f8ad 300e 	strh.w	r3, [sp, #14]
   15f76:	f00a fa82 	bl	2047e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   15f7a:	b148      	cbz	r0, 15f90 <read_group_cb+0x50>
		if (data->group &&
   15f7c:	6923      	ldr	r3, [r4, #16]
   15f7e:	b11b      	cbz	r3, 15f88 <read_group_cb+0x48>
   15f80:	885a      	ldrh	r2, [r3, #2]
   15f82:	42b2      	cmp	r2, r6
   15f84:	d200      	bcs.n	15f88 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   15f86:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15f88:	2001      	movs	r0, #1
}
   15f8a:	b004      	add	sp, #16
   15f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   15f90:	6861      	ldr	r1, [r4, #4]
   15f92:	6828      	ldr	r0, [r5, #0]
   15f94:	f00a fa73 	bl	2047e <bt_uuid_cmp>
   15f98:	b110      	cbz	r0, 15fa0 <read_group_cb+0x60>
		data->group = NULL;
   15f9a:	2300      	movs	r3, #0
   15f9c:	6123      	str	r3, [r4, #16]
   15f9e:	e7f3      	b.n	15f88 <read_group_cb+0x48>
	if (data->rsp->len &&
   15fa0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15fa2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   15fa4:	781a      	ldrb	r2, [r3, #0]
   15fa6:	b132      	cbz	r2, 15fb6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   15fa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   15faa:	8981      	ldrh	r1, [r0, #12]
   15fac:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   15fae:	4293      	cmp	r3, r2
   15fb0:	da01      	bge.n	15fb6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   15fb2:	2000      	movs	r0, #0
   15fb4:	e7e9      	b.n	15f8a <read_group_cb+0x4a>
   15fb6:	2104      	movs	r1, #4
   15fb8:	3008      	adds	r0, #8
   15fba:	f00c fa5b 	bl	22474 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15fbe:	4b09      	ldr	r3, [pc, #36]	; (15fe4 <read_group_cb+0xa4>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   15fc0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15fc2:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15fc4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15fc6:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   15fc8:	4629      	mov	r1, r5
   15fca:	9300      	str	r3, [sp, #0]
   15fcc:	9401      	str	r4, [sp, #4]
   15fce:	2300      	movs	r3, #0
   15fd0:	4638      	mov	r0, r7
   15fd2:	f00b fadb 	bl	2158c <att_chan_read>
	if (read < 0) {
   15fd6:	2800      	cmp	r0, #0
   15fd8:	dbeb      	blt.n	15fb2 <read_group_cb+0x72>
	if (!data->group) {
   15fda:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   15fdc:	3800      	subs	r0, #0
   15fde:	bf18      	it	ne
   15fe0:	2001      	movne	r0, #1
   15fe2:	e7d2      	b.n	15f8a <read_group_cb+0x4a>
   15fe4:	0002143b 	.word	0x0002143b

00015fe8 <chan_send>:
{
   15fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	hdr = (void *)buf->data;
   15fec:	688b      	ldr	r3, [r1, #8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15fee:	f3bf 8f5b 	dmb	ish
{
   15ff2:	4617      	mov	r7, r2
   15ff4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   15ff8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15ffc:	0752      	lsls	r2, r2, #29
{
   15ffe:	4606      	mov	r6, r0
   16000:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   16002:	d546      	bpl.n	16092 <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16004:	781b      	ldrb	r3, [r3, #0]
   16006:	2bd2      	cmp	r3, #210	; 0xd2
   16008:	d10c      	bne.n	16024 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
   1600a:	6803      	ldr	r3, [r0, #0]
   1600c:	6818      	ldr	r0, [r3, #0]
   1600e:	f00c f98c 	bl	2232a <bt_smp_sign>
		if (err) {
   16012:	4605      	mov	r5, r0
   16014:	b130      	cbz	r0, 16024 <chan_send+0x3c>
			net_buf_unref(buf);
   16016:	4620      	mov	r0, r4
   16018:	f001 fa30 	bl	1747c <net_buf_unref>
}
   1601c:	4628      	mov	r0, r5
   1601e:	b003      	add	sp, #12
   16020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   16024:	f104 0008 	add.w	r0, r4, #8
   16028:	f00c fa5b 	bl	224e2 <net_buf_simple_headroom>
	state->len = buf->len;
   1602c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   16030:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   16032:	b957      	cbnz	r7, 1604a <chan_send+0x62>
	switch (att_op_get_type(buf->data[0])) {
   16034:	68a3      	ldr	r3, [r4, #8]
   16036:	7818      	ldrb	r0, [r3, #0]
   16038:	f00b f8eb 	bl	21212 <att_op_get_type>
   1603c:	3801      	subs	r0, #1
   1603e:	b2c0      	uxtb	r0, r0
   16040:	2804      	cmp	r0, #4
   16042:	bf9c      	itt	ls
   16044:	4b14      	ldrls	r3, [pc, #80]	; (16098 <chan_send+0xb0>)
   16046:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1604a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1604c:	f8c6 70e0 	str.w	r7, [r6, #224]	; 0xe0
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16050:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   16052:	4b12      	ldr	r3, [pc, #72]	; (1609c <chan_send+0xb4>)
   16054:	429f      	cmp	r7, r3
   16056:	d018      	beq.n	1608a <chan_send+0xa2>
	} else if (cb == chan_cfm_sent) {
   16058:	4b11      	ldr	r3, [pc, #68]	; (160a0 <chan_send+0xb8>)
   1605a:	429f      	cmp	r7, r3
   1605c:	d017      	beq.n	1608e <chan_send+0xa6>
		return att_sent;
   1605e:	4911      	ldr	r1, [pc, #68]	; (160a4 <chan_send+0xbc>)
   16060:	4b11      	ldr	r3, [pc, #68]	; (160a8 <chan_send+0xc0>)
   16062:	4a12      	ldr	r2, [pc, #72]	; (160ac <chan_send+0xc4>)
   16064:	428f      	cmp	r7, r1
   16066:	bf18      	it	ne
   16068:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1606a:	3604      	adds	r6, #4
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1606c:	9600      	str	r6, [sp, #0]
   1606e:	4622      	mov	r2, r4
   16070:	2104      	movs	r1, #4
   16072:	f00b f834 	bl	210de <bt_l2cap_send_cb>
	if (err) {
   16076:	4605      	mov	r5, r0
   16078:	2800      	cmp	r0, #0
   1607a:	d0cf      	beq.n	1601c <chan_send+0x34>
	buf->data = buf->__buf + state->offset;
   1607c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1607e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16082:	fa10 f088 	uxtah	r0, r0, r8
   16086:	60a0      	str	r0, [r4, #8]
}
   16088:	e7c8      	b.n	1601c <chan_send+0x34>
		return att_rsp_sent;
   1608a:	4b09      	ldr	r3, [pc, #36]	; (160b0 <chan_send+0xc8>)
   1608c:	e7ed      	b.n	1606a <chan_send+0x82>
		return att_cfm_sent;
   1608e:	4b09      	ldr	r3, [pc, #36]	; (160b4 <chan_send+0xcc>)
   16090:	e7eb      	b.n	1606a <chan_send+0x82>
		return -EINVAL;
   16092:	f06f 0515 	mvn.w	r5, #21
   16096:	e7c1      	b.n	1601c <chan_send+0x34>
   16098:	00024244 	.word	0x00024244
   1609c:	0002189d 	.word	0x0002189d
   160a0:	0002173d 	.word	0x0002173d
   160a4:	00021477 	.word	0x00021477
   160a8:	00015f19 	.word	0x00015f19
   160ac:	000211e3 	.word	0x000211e3
   160b0:	00015f09 	.word	0x00015f09
   160b4:	00015ef9 	.word	0x00015ef9

000160b8 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   160b8:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   160ba:	4a07      	ldr	r2, [pc, #28]	; (160d8 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   160bc:	4604      	mov	r4, r0
   160be:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   160c0:	f7ff ff92 	bl	15fe8 <chan_send>
	if (err) {
   160c4:	b130      	cbz	r0, 160d4 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   160c6:	4629      	mov	r1, r5
   160c8:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   160cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   160d0:	f00c b99d 	b.w	2240e <net_buf_put>
}
   160d4:	bd38      	pop	{r3, r4, r5, pc}
   160d6:	bf00      	nop
   160d8:	0002189d 	.word	0x0002189d

000160dc <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   160dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   160de:	2300      	movs	r3, #0
{
   160e0:	4607      	mov	r7, r0
   160e2:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   160e4:	4829      	ldr	r0, [pc, #164]	; (1618c <bt_att_accept+0xb0>)
   160e6:	2200      	movs	r2, #0
   160e8:	4669      	mov	r1, sp
   160ea:	f004 fd31 	bl	1ab50 <k_mem_slab_alloc>
   160ee:	4605      	mov	r5, r0
   160f0:	b110      	cbz	r0, 160f8 <bt_att_accept+0x1c>
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   160f2:	f06f 050b 	mvn.w	r5, #11
   160f6:	e045      	b.n	16184 <bt_att_accept+0xa8>
	return z_impl_z_current_get();
   160f8:	f005 fc1c 	bl	1b934 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   160fc:	4b24      	ldr	r3, [pc, #144]	; (16190 <bt_att_accept+0xb4>)
__ssp_bos_icheck3(memset, void *, int)
   160fe:	4629      	mov	r1, r5
   16100:	6018      	str	r0, [r3, #0]
   16102:	222c      	movs	r2, #44	; 0x2c
   16104:	9800      	ldr	r0, [sp, #0]
   16106:	f00d fb6d 	bl	237e4 <memset>
	att->conn = conn;
   1610a:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1610c:	4821      	ldr	r0, [pc, #132]	; (16194 <bt_att_accept+0xb8>)
	list->tail = NULL;
   1610e:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
   16110:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
   16114:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   16118:	2200      	movs	r2, #0
   1611a:	2300      	movs	r3, #0
   1611c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1611e:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16120:	f004 fd16 	bl	1ab50 <k_mem_slab_alloc>
   16124:	4605      	mov	r5, r0
   16126:	2800      	cmp	r0, #0
   16128:	d1e3      	bne.n	160f2 <bt_att_accept+0x16>
   1612a:	4601      	mov	r1, r0
   1612c:	22e8      	movs	r2, #232	; 0xe8
   1612e:	9801      	ldr	r0, [sp, #4]
   16130:	f00d fb58 	bl	237e4 <memset>
	chan->chan.chan.ops = &ops;
   16134:	9801      	ldr	r0, [sp, #4]
   16136:	4b18      	ldr	r3, [pc, #96]	; (16198 <bt_att_accept+0xbc>)
   16138:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1613a:	3098      	adds	r0, #152	; 0x98
   1613c:	f00c febc 	bl	22eb8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16140:	9b01      	ldr	r3, [sp, #4]
   16142:	f3bf 8f5b 	dmb	ish
   16146:	3390      	adds	r3, #144	; 0x90
   16148:	e853 2f00 	ldrex	r2, [r3]
   1614c:	e843 5100 	strex	r1, r5, [r3]
   16150:	2900      	cmp	r1, #0
   16152:	d1f9      	bne.n	16148 <bt_att_accept+0x6c>
   16154:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16158:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1615a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	chan->att = att;
   1615c:	603c      	str	r4, [r7, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1615e:	b91b      	cbnz	r3, 16168 <bt_att_accept+0x8c>
   16160:	f104 000c 	add.w	r0, r4, #12
   16164:	f00c fea8 	bl	22eb8 <z_impl_k_queue_init>
	parent->next = child;
   16168:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1616a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
Z_GENLIST_PREPEND(slist, snode)
   1616e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16170:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
	list->head = node;
   16174:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   16176:	b902      	cbnz	r2, 1617a <bt_att_accept+0x9e>
	list->tail = node;
   16178:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1617a:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   1617c:	2b00      	cmp	r3, #0
   1617e:	d0b8      	beq.n	160f2 <bt_att_accept+0x16>
	}

	*ch = &chan->chan.chan;
   16180:	3304      	adds	r3, #4
   16182:	6033      	str	r3, [r6, #0]

	return 0;
}
   16184:	4628      	mov	r0, r5
   16186:	b003      	add	sp, #12
   16188:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1618a:	bf00      	nop
   1618c:	200009b4 	.word	0x200009b4
   16190:	20002550 	.word	0x20002550
   16194:	200009d0 	.word	0x200009d0
   16198:	20000684 	.word	0x20000684

0001619c <read_type_cb>:
{
   1619c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   161a0:	f8d2 8000 	ldr.w	r8, [r2]
{
   161a4:	4606      	mov	r6, r0
   161a6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   161a8:	6800      	ldr	r0, [r0, #0]
   161aa:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   161ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
{
   161b0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   161b2:	f00a f964 	bl	2047e <bt_uuid_cmp>
   161b6:	4607      	mov	r7, r0
   161b8:	2800      	cmp	r0, #0
   161ba:	d13e      	bne.n	1623a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   161bc:	4628      	mov	r0, r5
   161be:	2215      	movs	r2, #21
   161c0:	4631      	mov	r1, r6
   161c2:	f00b ffe9 	bl	22198 <bt_gatt_check_perm>
   161c6:	4605      	mov	r5, r0
   161c8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   161ca:	b148      	cbz	r0, 161e0 <read_type_cb+0x44>
		if (data->rsp->len) {
   161cc:	68e3      	ldr	r3, [r4, #12]
   161ce:	781b      	ldrb	r3, [r3, #0]
   161d0:	b923      	cbnz	r3, 161dc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   161d2:	2500      	movs	r5, #0
}
   161d4:	4628      	mov	r0, r5
   161d6:	b003      	add	sp, #12
   161d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   161dc:	7527      	strb	r7, [r4, #20]
   161de:	e7f8      	b.n	161d2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   161e0:	68a0      	ldr	r0, [r4, #8]
   161e2:	f00c f925 	bl	22430 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   161e6:	2102      	movs	r1, #2
   161e8:	3008      	adds	r0, #8
   161ea:	f00c f943 	bl	22474 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   161ee:	4b14      	ldr	r3, [pc, #80]	; (16240 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   161f0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   161f2:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   161f4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   161f8:	4631      	mov	r1, r6
   161fa:	9300      	str	r3, [sp, #0]
   161fc:	9401      	str	r4, [sp, #4]
   161fe:	462b      	mov	r3, r5
   16200:	4640      	mov	r0, r8
   16202:	f00b f9c3 	bl	2158c <att_chan_read>
	if (read < 0) {
   16206:	2800      	cmp	r0, #0
   16208:	da07      	bge.n	1621a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1620a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1620e:	bf26      	itte	cs
   16210:	4240      	negcs	r0, r0
   16212:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   16214:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   16216:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16218:	e7dc      	b.n	161d4 <read_type_cb+0x38>
	if (!data->item) {
   1621a:	6923      	ldr	r3, [r4, #16]
   1621c:	2b00      	cmp	r3, #0
   1621e:	d0d8      	beq.n	161d2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16220:	68a0      	ldr	r0, [r4, #8]
   16222:	f00a ffd6 	bl	211d2 <net_buf_frags_len>
   16226:	f8b8 502a 	ldrh.w	r5, [r8, #42]	; 0x2a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1622a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1622c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1622e:	7818      	ldrb	r0, [r3, #0]
   16230:	4285      	cmp	r5, r0
   16232:	bf94      	ite	ls
   16234:	2500      	movls	r5, #0
   16236:	2501      	movhi	r5, #1
   16238:	e7cc      	b.n	161d4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1623a:	2501      	movs	r5, #1
   1623c:	e7ca      	b.n	161d4 <read_type_cb+0x38>
   1623e:	bf00      	nop
   16240:	000211ef 	.word	0x000211ef

00016244 <bt_att_connected>:
{
   16244:	b510      	push	{r4, lr}
   16246:	4604      	mov	r4, r0
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   16248:	f104 038c 	add.w	r3, r4, #140	; 0x8c
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1624c:	3804      	subs	r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1624e:	f3bf 8f5b 	dmb	ish
   16252:	e853 2f00 	ldrex	r2, [r3]
   16256:	f042 0204 	orr.w	r2, r2, #4
   1625a:	e843 2100 	strex	r1, r2, [r3]
   1625e:	2900      	cmp	r1, #0
   16260:	d1f7      	bne.n	16252 <bt_att_connected+0xe>
   16262:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16266:	f3bf 8f5b 	dmb	ish
   1626a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   1626e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16272:	071b      	lsls	r3, r3, #28
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16274:	bf5e      	ittt	pl
   16276:	2317      	movpl	r3, #23
   16278:	84e3      	strhpl	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1627a:	82e3      	strhpl	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1627c:	f00b f8ad 	bl	213da <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16280:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   16284:	4903      	ldr	r1, [pc, #12]	; (16294 <bt_att_connected+0x50>)
   16286:	f00c ff2f 	bl	230e8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1628a:	6820      	ldr	r0, [r4, #0]
}
   1628c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   16290:	f000 bfda 	b.w	17248 <bt_gatt_connected>
   16294:	00021aad 	.word	0x00021aad

00016298 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16298:	898b      	ldrh	r3, [r1, #12]
{
   1629a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1629e:	4606      	mov	r6, r0
   162a0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   162a2:	2b00      	cmp	r3, #0
   162a4:	d047      	beq.n	16336 <bt_att_recv+0x9e>
	return net_buf_simple_pull_mem(&buf->b, len);
   162a6:	2101      	movs	r1, #1
   162a8:	f104 0008 	add.w	r0, r4, #8
   162ac:	f00c f909 	bl	224c2 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   162b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
   162b4:	4607      	mov	r7, r0
   162b6:	2b00      	cmp	r3, #0
   162b8:	d03d      	beq.n	16336 <bt_att_recv+0x9e>
		if (hdr->code == handlers[i].op) {
   162ba:	7801      	ldrb	r1, [r0, #0]
   162bc:	4d22      	ldr	r5, [pc, #136]	; (16348 <bt_att_recv+0xb0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   162be:	f1a6 0804 	sub.w	r8, r6, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   162c2:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   162c4:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   162c8:	428a      	cmp	r2, r1
   162ca:	d10d      	bne.n	162e8 <bt_att_recv+0x50>
		if (handler->type == ATT_REQUEST &&
   162cc:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   162d0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   162d4:	f893 a002 	ldrb.w	sl, [r3, #2]
   162d8:	f1ba 0f01 	cmp.w	sl, #1
   162dc:	d014      	beq.n	16308 <bt_att_recv+0x70>
		} else if (handler->type == ATT_INDICATION &&
   162de:	f1ba 0f05 	cmp.w	sl, #5
   162e2:	d117      	bne.n	16314 <bt_att_recv+0x7c>
			   atomic_test_and_set_bit(att_chan->flags,
   162e4:	2101      	movs	r1, #1
   162e6:	e010      	b.n	1630a <bt_att_recv+0x72>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   162e8:	3301      	adds	r3, #1
   162ea:	2b0d      	cmp	r3, #13
   162ec:	d1ea      	bne.n	162c4 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   162ee:	4608      	mov	r0, r1
   162f0:	f00a ff8f 	bl	21212 <att_op_get_type>
   162f4:	b1f8      	cbz	r0, 16336 <bt_att_recv+0x9e>
   162f6:	2805      	cmp	r0, #5
   162f8:	d01d      	beq.n	16336 <bt_att_recv+0x9e>
	if (!req) {
   162fa:	b1e1      	cbz	r1, 16336 <bt_att_recv+0x9e>
   162fc:	2306      	movs	r3, #6
   162fe:	2200      	movs	r2, #0
   16300:	4640      	mov	r0, r8
   16302:	f00b fb20 	bl	21946 <send_err_rsp.part.0>
   16306:	e016      	b.n	16336 <bt_att_recv+0x9e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16308:	2100      	movs	r1, #0
   1630a:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   1630e:	f00b fa25 	bl	2175c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   16312:	b980      	cbnz	r0, 16336 <bt_att_recv+0x9e>
	if (buf->len < handler->expect_len) {
   16314:	444d      	add	r5, r9
   16316:	89a2      	ldrh	r2, [r4, #12]
   16318:	786b      	ldrb	r3, [r5, #1]
   1631a:	429a      	cmp	r2, r3
   1631c:	d30e      	bcc.n	1633c <bt_att_recv+0xa4>
		err = handler->func(att_chan, buf);
   1631e:	686b      	ldr	r3, [r5, #4]
   16320:	4621      	mov	r1, r4
   16322:	4640      	mov	r0, r8
   16324:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16326:	f1ba 0f01 	cmp.w	sl, #1
		err = handler->func(att_chan, buf);
   1632a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1632c:	d103      	bne.n	16336 <bt_att_recv+0x9e>
   1632e:	b110      	cbz	r0, 16336 <bt_att_recv+0x9e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16330:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   16332:	2900      	cmp	r1, #0
   16334:	d1e3      	bne.n	162fe <bt_att_recv+0x66>
}
   16336:	2000      	movs	r0, #0
   16338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (handler->type == ATT_REQUEST && err) {
   1633c:	f1ba 0f01 	cmp.w	sl, #1
   16340:	d1f9      	bne.n	16336 <bt_att_recv+0x9e>
		err = BT_ATT_ERR_INVALID_PDU;
   16342:	2304      	movs	r3, #4
   16344:	e7f4      	b.n	16330 <bt_att_recv+0x98>
   16346:	bf00      	nop
   16348:	00024258 	.word	0x00024258

0001634c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1634c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16350:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16352:	6803      	ldr	r3, [r0, #0]
   16354:	460e      	mov	r6, r1
   16356:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16358:	b087      	sub	sp, #28
   1635a:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1635c:	bf18      	it	ne
   1635e:	2101      	movne	r1, #1
   16360:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16362:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16364:	f00b ff6e 	bl	22244 <bt_gatt_change_aware>
   16368:	b958      	cbnz	r0, 16382 <att_write_rsp.constprop.0+0x36>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1636a:	2105      	movs	r1, #5
   1636c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16370:	f00b f9f4 	bl	2175c <atomic_test_and_set_bit>
   16374:	2800      	cmp	r0, #0
   16376:	d04a      	beq.n	1640e <att_write_rsp.constprop.0+0xc2>
			return 0;
   16378:	2500      	movs	r5, #0
}
   1637a:	4628      	mov	r0, r5
   1637c:	b007      	add	sp, #28
   1637e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!handle) {
   16382:	2f00      	cmp	r7, #0
   16384:	d045      	beq.n	16412 <att_write_rsp.constprop.0+0xc6>
	(void)memset(&data, 0, sizeof(data));
   16386:	2218      	movs	r2, #24
   16388:	2100      	movs	r1, #0
   1638a:	4668      	mov	r0, sp
   1638c:	f00d fa2a 	bl	237e4 <memset>
	if (rsp) {
   16390:	f1b8 0f00 	cmp.w	r8, #0
   16394:	d12a      	bne.n	163ec <att_write_rsp.constprop.0+0xa0>
	data.conn = chan->att->conn;
   16396:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16398:	4a1f      	ldr	r2, [pc, #124]	; (16418 <att_write_rsp.constprop.0+0xcc>)
	data.conn = chan->att->conn;
   1639a:	681b      	ldr	r3, [r3, #0]
   1639c:	9300      	str	r3, [sp, #0]
	data.value = value;
   1639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   163a0:	9303      	str	r3, [sp, #12]
	data.len = len;
   163a2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   163a6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   163aa:	2301      	movs	r3, #1
   163ac:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   163b0:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   163b4:	466b      	mov	r3, sp
   163b6:	4639      	mov	r1, r7
   163b8:	4638      	mov	r0, r7
	data.req = req;
   163ba:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   163be:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   163c2:	f00a ff6b 	bl	2129c <bt_gatt_foreach_attr>
	if (data.err) {
   163c6:	f89d 5014 	ldrb.w	r5, [sp, #20]
   163ca:	b1cd      	cbz	r5, 16400 <att_write_rsp.constprop.0+0xb4>
		if (rsp) {
   163cc:	f1b8 0f00 	cmp.w	r8, #0
   163d0:	d0d2      	beq.n	16378 <att_write_rsp.constprop.0+0x2c>
			net_buf_unref(data.buf);
   163d2:	9801      	ldr	r0, [sp, #4]
   163d4:	f001 f852 	bl	1747c <net_buf_unref>
	if (!req) {
   163d8:	2e00      	cmp	r6, #0
   163da:	d0cd      	beq.n	16378 <att_write_rsp.constprop.0+0x2c>
   163dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   163e0:	463a      	mov	r2, r7
   163e2:	4631      	mov	r1, r6
   163e4:	4620      	mov	r0, r4
   163e6:	f00b faae 	bl	21946 <send_err_rsp.part.0>
   163ea:	e7c5      	b.n	16378 <att_write_rsp.constprop.0+0x2c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   163ec:	2200      	movs	r2, #0
   163ee:	4641      	mov	r1, r8
   163f0:	4620      	mov	r0, r4
   163f2:	f00b fa84 	bl	218fe <bt_att_chan_create_pdu>
   163f6:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   163f8:	2800      	cmp	r0, #0
   163fa:	d1cc      	bne.n	16396 <att_write_rsp.constprop.0+0x4a>
			return BT_ATT_ERR_UNLIKELY;
   163fc:	250e      	movs	r5, #14
   163fe:	e7bc      	b.n	1637a <att_write_rsp.constprop.0+0x2e>
	if (data.buf) {
   16400:	9901      	ldr	r1, [sp, #4]
   16402:	2900      	cmp	r1, #0
   16404:	d0b8      	beq.n	16378 <att_write_rsp.constprop.0+0x2c>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16406:	4620      	mov	r0, r4
   16408:	f7ff fe56 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
   1640c:	e7b5      	b.n	1637a <att_write_rsp.constprop.0+0x2e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1640e:	2512      	movs	r5, #18
   16410:	e7b3      	b.n	1637a <att_write_rsp.constprop.0+0x2e>
		return BT_ATT_ERR_INVALID_HANDLE;
   16412:	2501      	movs	r5, #1
   16414:	e7b1      	b.n	1637a <att_write_rsp.constprop.0+0x2e>
   16416:	bf00      	nop
   16418:	0002148b 	.word	0x0002148b

0001641c <att_read_group_req>:
{
   1641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16420:	898c      	ldrh	r4, [r1, #12]
   16422:	3c04      	subs	r4, #4
   16424:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   16426:	2c02      	cmp	r4, #2
{
   16428:	4605      	mov	r5, r0
   1642a:	b08c      	sub	sp, #48	; 0x30
   1642c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1642e:	d001      	beq.n	16434 <att_read_group_req+0x18>
   16430:	2c10      	cmp	r4, #16
   16432:	d16e      	bne.n	16512 <att_read_group_req+0xf6>
   16434:	2104      	movs	r1, #4
   16436:	3008      	adds	r0, #8
   16438:	f00c f843 	bl	224c2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1643c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16440:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16442:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16444:	1d01      	adds	r1, r0, #4
   16446:	4622      	mov	r2, r4
   16448:	4640      	mov	r0, r8
   1644a:	f00a f846 	bl	204da <bt_uuid_create>
   1644e:	2800      	cmp	r0, #0
   16450:	d061      	beq.n	16516 <att_read_group_req+0xfa>
	if (!start || !end) {
   16452:	2e00      	cmp	r6, #0
   16454:	d03a      	beq.n	164cc <att_read_group_req+0xb0>
   16456:	2400      	movs	r4, #0
   16458:	2f00      	cmp	r7, #0
   1645a:	d036      	beq.n	164ca <att_read_group_req+0xae>
	if (start > end) {
   1645c:	42be      	cmp	r6, r7
   1645e:	d835      	bhi.n	164cc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16460:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16464:	a901      	add	r1, sp, #4
   16466:	4640      	mov	r0, r8
   16468:	f88d 4004 	strb.w	r4, [sp, #4]
   1646c:	f8ad 3006 	strh.w	r3, [sp, #6]
   16470:	f00a f805 	bl	2047e <bt_uuid_cmp>
   16474:	2800      	cmp	r0, #0
   16476:	d134      	bne.n	164e2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   16478:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   1647a:	2214      	movs	r2, #20
   1647c:	2100      	movs	r1, #0
   1647e:	a807      	add	r0, sp, #28
   16480:	f00d f9b0 	bl	237e4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16484:	2201      	movs	r2, #1
   16486:	2111      	movs	r1, #17
   16488:	4620      	mov	r0, r4
   1648a:	f00b fa9f 	bl	219cc <bt_att_create_pdu>
   1648e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16490:	2800      	cmp	r0, #0
   16492:	d040      	beq.n	16516 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   16494:	2101      	movs	r1, #1
   16496:	3008      	adds	r0, #8
	data.uuid = uuid;
   16498:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1649c:	f00b ffea 	bl	22474 <net_buf_simple_add>
	data.rsp->len = 0U;
   164a0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   164a4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   164a6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   164a8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   164ac:	4a1b      	ldr	r2, [pc, #108]	; (1651c <att_read_group_req+0x100>)
	data.group = NULL;
   164ae:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   164b2:	4639      	mov	r1, r7
   164b4:	4630      	mov	r0, r6
   164b6:	f00a fef1 	bl	2129c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   164ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164bc:	781c      	ldrb	r4, [r3, #0]
   164be:	bb1c      	cbnz	r4, 16508 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   164c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   164c2:	f000 ffdb 	bl	1747c <net_buf_unref>
	if (!req) {
   164c6:	230a      	movs	r3, #10
   164c8:	e018      	b.n	164fc <att_read_group_req+0xe0>
			*err = 0U;
   164ca:	463e      	mov	r6, r7
	if (!req) {
   164cc:	2301      	movs	r3, #1
   164ce:	4632      	mov	r2, r6
   164d0:	2110      	movs	r1, #16
   164d2:	4628      	mov	r0, r5
   164d4:	f00b fa37 	bl	21946 <send_err_rsp.part.0>
		return 0;
   164d8:	2400      	movs	r4, #0
}
   164da:	4620      	mov	r0, r4
   164dc:	b00c      	add	sp, #48	; 0x30
   164de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   164e2:	f642 0301 	movw	r3, #10241	; 0x2801
   164e6:	a907      	add	r1, sp, #28
   164e8:	4640      	mov	r0, r8
   164ea:	f88d 401c 	strb.w	r4, [sp, #28]
   164ee:	f8ad 301e 	strh.w	r3, [sp, #30]
   164f2:	f009 ffc4 	bl	2047e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   164f6:	2800      	cmp	r0, #0
   164f8:	d0be      	beq.n	16478 <att_read_group_req+0x5c>
	if (!req) {
   164fa:	2310      	movs	r3, #16
   164fc:	4632      	mov	r2, r6
   164fe:	2110      	movs	r1, #16
   16500:	4628      	mov	r0, r5
   16502:	f00b fa20 	bl	21946 <send_err_rsp.part.0>
		return 0;
   16506:	e7e8      	b.n	164da <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16508:	9909      	ldr	r1, [sp, #36]	; 0x24
   1650a:	4628      	mov	r0, r5
   1650c:	f7ff fdd4 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16510:	e7e2      	b.n	164d8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   16512:	2404      	movs	r4, #4
   16514:	e7e1      	b.n	164da <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   16516:	240e      	movs	r4, #14
   16518:	e7df      	b.n	164da <att_read_group_req+0xbe>
   1651a:	bf00      	nop
   1651c:	00015f41 	.word	0x00015f41

00016520 <att_read_mult_req>:
{
   16520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16524:	6846      	ldr	r6, [r0, #4]
{
   16526:	b085      	sub	sp, #20
   16528:	4604      	mov	r4, r0
   1652a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1652c:	4630      	mov	r0, r6
   1652e:	2101      	movs	r1, #1
   16530:	f00b fe88 	bl	22244 <bt_gatt_change_aware>
   16534:	b958      	cbnz	r0, 1654e <att_read_mult_req+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16536:	2105      	movs	r1, #5
   16538:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1653c:	f00b f90e 	bl	2175c <atomic_test_and_set_bit>
			return 0;
   16540:	2800      	cmp	r0, #0
   16542:	bf0c      	ite	eq
   16544:	2012      	moveq	r0, #18
   16546:	2000      	movne	r0, #0
}
   16548:	b005      	add	sp, #20
   1654a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1654e:	2210      	movs	r2, #16
   16550:	2100      	movs	r1, #0
   16552:	4668      	mov	r0, sp
   16554:	f00d f946 	bl	237e4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   16558:	2200      	movs	r2, #0
   1655a:	210f      	movs	r1, #15
   1655c:	4630      	mov	r0, r6
   1655e:	f00b fa35 	bl	219cc <bt_att_create_pdu>
   16562:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16564:	b348      	cbz	r0, 165ba <att_read_mult_req+0x9a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16566:	f8df 9058 	ldr.w	r9, [pc, #88]	; 165c0 <att_read_mult_req+0xa0>
	data.chan = chan;
   1656a:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1656c:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16570:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   16574:	89ab      	ldrh	r3, [r5, #12]
   16576:	2b01      	cmp	r3, #1
   16578:	d804      	bhi.n	16584 <att_read_mult_req+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1657a:	9902      	ldr	r1, [sp, #8]
   1657c:	4620      	mov	r0, r4
   1657e:	f7ff fd9b 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
   16582:	e018      	b.n	165b6 <att_read_mult_req+0x96>
   16584:	4638      	mov	r0, r7
   16586:	f00b ffa4 	bl	224d2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1658a:	466b      	mov	r3, sp
   1658c:	464a      	mov	r2, r9
   1658e:	4601      	mov	r1, r0
   16590:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16592:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16596:	f00a fe81 	bl	2129c <bt_gatt_foreach_attr>
		if (data.err) {
   1659a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1659e:	2b00      	cmp	r3, #0
   165a0:	d0e8      	beq.n	16574 <att_read_mult_req+0x54>
			net_buf_unref(data.buf);
   165a2:	9802      	ldr	r0, [sp, #8]
   165a4:	f000 ff6a 	bl	1747c <net_buf_unref>
	if (!req) {
   165a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   165ac:	4632      	mov	r2, r6
   165ae:	210e      	movs	r1, #14
   165b0:	4620      	mov	r0, r4
   165b2:	f00b f9c8 	bl	21946 <send_err_rsp.part.0>
	return 0;
   165b6:	2000      	movs	r0, #0
   165b8:	e7c6      	b.n	16548 <att_read_mult_req+0x28>
		return BT_ATT_ERR_UNLIKELY;
   165ba:	200e      	movs	r0, #14
   165bc:	e7c4      	b.n	16548 <att_read_mult_req+0x28>
   165be:	bf00      	nop
   165c0:	00021787 	.word	0x00021787

000165c4 <att_read_rsp>:
{
   165c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   165c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   165cc:	4604      	mov	r4, r0
   165ce:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   165d0:	4640      	mov	r0, r8
   165d2:	2101      	movs	r1, #1
{
   165d4:	4615      	mov	r5, r2
   165d6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   165d8:	f00b fe34 	bl	22244 <bt_gatt_change_aware>
   165dc:	b960      	cbnz	r0, 165f8 <att_read_rsp+0x34>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   165de:	2105      	movs	r1, #5
   165e0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   165e4:	f00b f8ba 	bl	2175c <atomic_test_and_set_bit>
			return 0;
   165e8:	2800      	cmp	r0, #0
   165ea:	bf0c      	ite	eq
   165ec:	2512      	moveq	r5, #18
   165ee:	2500      	movne	r5, #0
}
   165f0:	4628      	mov	r0, r5
   165f2:	b004      	add	sp, #16
   165f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   165f8:	b36e      	cbz	r6, 16656 <att_read_rsp+0x92>
	(void)memset(&data, 0, sizeof(data));
   165fa:	2210      	movs	r2, #16
   165fc:	2100      	movs	r1, #0
   165fe:	4668      	mov	r0, sp
   16600:	f00d f8f0 	bl	237e4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   16604:	2200      	movs	r2, #0
   16606:	4629      	mov	r1, r5
   16608:	4640      	mov	r0, r8
   1660a:	f00b f9df 	bl	219cc <bt_att_create_pdu>
   1660e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16610:	b318      	cbz	r0, 1665a <att_read_rsp+0x96>
	data.offset = offset;
   16612:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   16616:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1661a:	2301      	movs	r3, #1
   1661c:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16620:	4a0f      	ldr	r2, [pc, #60]	; (16660 <att_read_rsp+0x9c>)
	data.chan = chan;
   16622:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16624:	466b      	mov	r3, sp
   16626:	4631      	mov	r1, r6
   16628:	4630      	mov	r0, r6
   1662a:	f00a fe37 	bl	2129c <bt_gatt_foreach_attr>
	if (data.err) {
   1662e:	f89d 500c 	ldrb.w	r5, [sp, #12]
   16632:	b15d      	cbz	r5, 1664c <att_read_rsp+0x88>
		net_buf_unref(data.buf);
   16634:	9802      	ldr	r0, [sp, #8]
   16636:	f000 ff21 	bl	1747c <net_buf_unref>
	if (!req) {
   1663a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1663e:	4632      	mov	r2, r6
   16640:	4639      	mov	r1, r7
   16642:	4620      	mov	r0, r4
   16644:	f00b f97f 	bl	21946 <send_err_rsp.part.0>
		return 0;
   16648:	2500      	movs	r5, #0
   1664a:	e7d1      	b.n	165f0 <att_read_rsp+0x2c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1664c:	9902      	ldr	r1, [sp, #8]
   1664e:	4620      	mov	r0, r4
   16650:	f7ff fd32 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   16654:	e7cc      	b.n	165f0 <att_read_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16656:	2501      	movs	r5, #1
   16658:	e7ca      	b.n	165f0 <att_read_rsp+0x2c>
		return BT_ATT_ERR_UNLIKELY;
   1665a:	250e      	movs	r5, #14
   1665c:	e7c8      	b.n	165f0 <att_read_rsp+0x2c>
   1665e:	bf00      	nop
   16660:	00021787 	.word	0x00021787

00016664 <att_read_type_req>:
{
   16664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16668:	898c      	ldrh	r4, [r1, #12]
   1666a:	3c04      	subs	r4, #4
   1666c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1666e:	2c02      	cmp	r4, #2
{
   16670:	4605      	mov	r5, r0
   16672:	b08c      	sub	sp, #48	; 0x30
   16674:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16676:	d001      	beq.n	1667c <att_read_type_req+0x18>
   16678:	2c10      	cmp	r4, #16
   1667a:	d14f      	bne.n	1671c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1667c:	2104      	movs	r1, #4
   1667e:	3008      	adds	r0, #8
   16680:	f00b ff1f 	bl	224c2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16684:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   16688:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1668a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1668c:	1d01      	adds	r1, r0, #4
   1668e:	4622      	mov	r2, r4
   16690:	4640      	mov	r0, r8
   16692:	f009 ff22 	bl	204da <bt_uuid_create>
   16696:	b188      	cbz	r0, 166bc <att_read_type_req+0x58>
	if (!start || !end) {
   16698:	b19e      	cbz	r6, 166c2 <att_read_type_req+0x5e>
   1669a:	b18f      	cbz	r7, 166c0 <att_read_type_req+0x5c>
	if (start > end) {
   1669c:	42b7      	cmp	r7, r6
   1669e:	d310      	bcc.n	166c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   166a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   166a2:	686c      	ldr	r4, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   166a4:	2100      	movs	r1, #0
   166a6:	eb0d 0002 	add.w	r0, sp, r2
   166aa:	f00d f89b 	bl	237e4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   166ae:	2201      	movs	r2, #1
   166b0:	2109      	movs	r1, #9
   166b2:	4620      	mov	r0, r4
   166b4:	f00b f98a 	bl	219cc <bt_att_create_pdu>
   166b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   166ba:	b968      	cbnz	r0, 166d8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   166bc:	240e      	movs	r4, #14
   166be:	e007      	b.n	166d0 <att_read_type_req+0x6c>
			*err = 0U;
   166c0:	463e      	mov	r6, r7
	if (!req) {
   166c2:	2301      	movs	r3, #1
   166c4:	4632      	mov	r2, r6
   166c6:	2108      	movs	r1, #8
   166c8:	4628      	mov	r0, r5
   166ca:	f00b f93c 	bl	21946 <send_err_rsp.part.0>
		return 0;
   166ce:	2400      	movs	r4, #0
}
   166d0:	4620      	mov	r0, r4
   166d2:	b00c      	add	sp, #48	; 0x30
   166d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   166d8:	2101      	movs	r1, #1
   166da:	3008      	adds	r0, #8
	data.uuid = uuid;
   166dc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   166e0:	f00b fec8 	bl	22474 <net_buf_simple_add>
	data.rsp->len = 0U;
   166e4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   166e8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   166ea:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   166ec:	4a0c      	ldr	r2, [pc, #48]	; (16720 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   166ee:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   166f2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   166f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   166f8:	4630      	mov	r0, r6
   166fa:	ab06      	add	r3, sp, #24
   166fc:	f00a fdce 	bl	2129c <bt_gatt_foreach_attr>
	if (data.err) {
   16700:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   16704:	b12c      	cbz	r4, 16712 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   16706:	9808      	ldr	r0, [sp, #32]
   16708:	f000 feb8 	bl	1747c <net_buf_unref>
	if (!req) {
   1670c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   16710:	e7d8      	b.n	166c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16712:	9908      	ldr	r1, [sp, #32]
   16714:	4628      	mov	r0, r5
   16716:	f7ff fccf 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1671a:	e7d9      	b.n	166d0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1671c:	2404      	movs	r4, #4
   1671e:	e7d7      	b.n	166d0 <att_read_type_req+0x6c>
   16720:	0001619d 	.word	0x0001619d

00016724 <att_find_type_req>:
{
   16724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16728:	4688      	mov	r8, r1
   1672a:	b086      	sub	sp, #24
   1672c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1672e:	2106      	movs	r1, #6
   16730:	f108 0008 	add.w	r0, r8, #8
   16734:	f00b fec5 	bl	224c2 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16738:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1673a:	b317      	cbz	r7, 16782 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1673c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   16740:	f1b9 0f00 	cmp.w	r9, #0
   16744:	d01c      	beq.n	16780 <att_find_type_req+0x5c>
	if (start > end) {
   16746:	454f      	cmp	r7, r9
   16748:	d81b      	bhi.n	16782 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1674a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1674c:	f8ad 3002 	strh.w	r3, [sp, #2]
   16750:	2400      	movs	r4, #0
   16752:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16756:	a901      	add	r1, sp, #4
   16758:	4668      	mov	r0, sp
	value = buf->data;
   1675a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1675e:	f88d 4000 	strb.w	r4, [sp]
   16762:	f88d 4004 	strb.w	r4, [sp, #4]
   16766:	f8ad 3006 	strh.w	r3, [sp, #6]
   1676a:	f009 fe88 	bl	2047e <bt_uuid_cmp>
   1676e:	4606      	mov	r6, r0
   16770:	b190      	cbz	r0, 16798 <att_find_type_req+0x74>
	if (!req) {
   16772:	230a      	movs	r3, #10
   16774:	463a      	mov	r2, r7
   16776:	2106      	movs	r1, #6
   16778:	4628      	mov	r0, r5
   1677a:	f00b f8e4 	bl	21946 <send_err_rsp.part.0>
		return 0;
   1677e:	e007      	b.n	16790 <att_find_type_req+0x6c>
			*err = 0U;
   16780:	464f      	mov	r7, r9
	if (!req) {
   16782:	2301      	movs	r3, #1
   16784:	463a      	mov	r2, r7
   16786:	2106      	movs	r1, #6
   16788:	4628      	mov	r0, r5
   1678a:	f00b f8dc 	bl	21946 <send_err_rsp.part.0>
		return 0;
   1678e:	2400      	movs	r4, #0
}
   16790:	4620      	mov	r0, r4
   16792:	b006      	add	sp, #24
   16794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16798:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1679c:	f8d5 8004 	ldr.w	r8, [r5, #4]
	(void)memset(&data, 0, sizeof(data));
   167a0:	4601      	mov	r1, r0
   167a2:	2214      	movs	r2, #20
   167a4:	a801      	add	r0, sp, #4
   167a6:	f00d f81d 	bl	237e4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   167aa:	4632      	mov	r2, r6
   167ac:	2107      	movs	r1, #7
   167ae:	4640      	mov	r0, r8
   167b0:	f00b f90c 	bl	219cc <bt_att_create_pdu>
   167b4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   167b6:	b1d8      	cbz	r0, 167f0 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   167b8:	230a      	movs	r3, #10
   167ba:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   167be:	4a0d      	ldr	r2, [pc, #52]	; (167f4 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   167c0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   167c4:	ab01      	add	r3, sp, #4
   167c6:	4649      	mov	r1, r9
   167c8:	4638      	mov	r0, r7
	data.value = value;
   167ca:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   167ce:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   167d0:	f00a fd64 	bl	2129c <bt_gatt_foreach_attr>
	if (data.err) {
   167d4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   167d8:	b12c      	cbz	r4, 167e6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   167da:	9802      	ldr	r0, [sp, #8]
   167dc:	f000 fe4e 	bl	1747c <net_buf_unref>
	if (!req) {
   167e0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   167e4:	e7ce      	b.n	16784 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   167e6:	9902      	ldr	r1, [sp, #8]
   167e8:	4628      	mov	r0, r5
   167ea:	f7ff fc65 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   167ee:	e7cf      	b.n	16790 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   167f0:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   167f2:	e7cd      	b.n	16790 <att_find_type_req+0x6c>
   167f4:	000212b3 	.word	0x000212b3

000167f8 <att_find_info_req>:
{
   167f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   167fa:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   167fc:	881e      	ldrh	r6, [r3, #0]
{
   167fe:	b085      	sub	sp, #20
   16800:	4605      	mov	r5, r0
	if (!start || !end) {
   16802:	b19e      	cbz	r6, 1682c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   16804:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   16806:	b184      	cbz	r4, 1682a <att_find_info_req+0x32>
	if (start > end) {
   16808:	42b4      	cmp	r4, r6
   1680a:	d30f      	bcc.n	1682c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1680c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1680e:	2210      	movs	r2, #16
   16810:	2100      	movs	r1, #0
   16812:	4668      	mov	r0, sp
   16814:	f00c ffe6 	bl	237e4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16818:	2200      	movs	r2, #0
   1681a:	2105      	movs	r1, #5
   1681c:	4638      	mov	r0, r7
   1681e:	f00b f8d5 	bl	219cc <bt_att_create_pdu>
   16822:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16824:	b958      	cbnz	r0, 1683e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16826:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16828:	e007      	b.n	1683a <att_find_info_req+0x42>
			*err = 0U;
   1682a:	4626      	mov	r6, r4
	if (!req) {
   1682c:	2301      	movs	r3, #1
   1682e:	4632      	mov	r2, r6
   16830:	2104      	movs	r1, #4
   16832:	4628      	mov	r0, r5
   16834:	f00b f887 	bl	21946 <send_err_rsp.part.0>
	return 0;
   16838:	2000      	movs	r0, #0
}
   1683a:	b005      	add	sp, #20
   1683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1683e:	4621      	mov	r1, r4
   16840:	4a08      	ldr	r2, [pc, #32]	; (16864 <att_find_info_req+0x6c>)
	data.chan = chan;
   16842:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16844:	466b      	mov	r3, sp
   16846:	4630      	mov	r0, r6
   16848:	f00a fd28 	bl	2129c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1684c:	9c02      	ldr	r4, [sp, #8]
   1684e:	b924      	cbnz	r4, 1685a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   16850:	9801      	ldr	r0, [sp, #4]
   16852:	f000 fe13 	bl	1747c <net_buf_unref>
	if (!req) {
   16856:	230a      	movs	r3, #10
   16858:	e7e9      	b.n	1682e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1685a:	9901      	ldr	r1, [sp, #4]
   1685c:	4628      	mov	r0, r5
   1685e:	f7ff fc2b 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
   16862:	e7e9      	b.n	16838 <att_find_info_req+0x40>
   16864:	000214ef 	.word	0x000214ef

00016868 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   16868:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1686a:	2300      	movs	r3, #0
{
   1686c:	4605      	mov	r5, r0
   1686e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16870:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16872:	f005 f85f 	bl	1b934 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16876:	4b0b      	ldr	r3, [pc, #44]	; (168a4 <bt_att_req_alloc+0x3c>)
   16878:	681b      	ldr	r3, [r3, #0]
   1687a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1687c:	bf04      	itt	eq
   1687e:	2500      	moveq	r5, #0
   16880:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16882:	a901      	add	r1, sp, #4
   16884:	4808      	ldr	r0, [pc, #32]	; (168a8 <bt_att_req_alloc+0x40>)
   16886:	462a      	mov	r2, r5
   16888:	4623      	mov	r3, r4
   1688a:	f004 f961 	bl	1ab50 <k_mem_slab_alloc>
   1688e:	4601      	mov	r1, r0
   16890:	b930      	cbnz	r0, 168a0 <bt_att_req_alloc+0x38>
   16892:	9801      	ldr	r0, [sp, #4]
   16894:	2210      	movs	r2, #16
   16896:	f00c ffa5 	bl	237e4 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1689a:	9801      	ldr	r0, [sp, #4]
}
   1689c:	b003      	add	sp, #12
   1689e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   168a0:	2000      	movs	r0, #0
   168a2:	e7fb      	b.n	1689c <bt_att_req_alloc+0x34>
   168a4:	20002550 	.word	0x20002550
   168a8:	200009ec 	.word	0x200009ec

000168ac <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   168ac:	b507      	push	{r0, r1, r2, lr}
   168ae:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   168b0:	6880      	ldr	r0, [r0, #8]
   168b2:	b120      	cbz	r0, 168be <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   168b4:	f000 fde2 	bl	1747c <net_buf_unref>
		req->buf = NULL;
   168b8:	9b01      	ldr	r3, [sp, #4]
   168ba:	2200      	movs	r2, #0
   168bc:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   168be:	4803      	ldr	r0, [pc, #12]	; (168cc <bt_att_req_free+0x20>)
   168c0:	a901      	add	r1, sp, #4
   168c2:	f00c fa3f 	bl	22d44 <k_mem_slab_free>
}
   168c6:	b003      	add	sp, #12
   168c8:	f85d fb04 	ldr.w	pc, [sp], #4
   168cc:	200009ec 	.word	0x200009ec

000168d0 <att_handle_rsp>:
{
   168d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   168d4:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   168d6:	30b0      	adds	r0, #176	; 0xb0
{
   168d8:	4688      	mov	r8, r1
   168da:	4691      	mov	r9, r2
   168dc:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   168de:	f00c fc11 	bl	23104 <k_work_cancel_delayable>
	if (!chan->req) {
   168e2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   168e6:	2600      	movs	r6, #0
   168e8:	b1f0      	cbz	r0, 16928 <att_handle_rsp+0x58>
	if (chan->req == &cancel) {
   168ea:	4b10      	ldr	r3, [pc, #64]	; (1692c <att_handle_rsp+0x5c>)
   168ec:	4298      	cmp	r0, r3
   168ee:	d112      	bne.n	16916 <att_handle_rsp+0x46>
		chan->req = NULL;
   168f0:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	bt_att_func_t func = NULL;
   168f4:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   168f6:	6820      	ldr	r0, [r4, #0]
   168f8:	f00a ff6f 	bl	217da <att_req_send_process>
	if (func) {
   168fc:	b13d      	cbz	r5, 1690e <att_handle_rsp+0x3e>
		func(chan->att->conn, err, pdu, len, params);
   168fe:	6820      	ldr	r0, [r4, #0]
   16900:	f8cd a000 	str.w	sl, [sp]
   16904:	6800      	ldr	r0, [r0, #0]
   16906:	464b      	mov	r3, r9
   16908:	4642      	mov	r2, r8
   1690a:	4639      	mov	r1, r7
   1690c:	47a8      	blx	r5
}
   1690e:	2000      	movs	r0, #0
   16910:	b002      	add	sp, #8
   16912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   16916:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   16918:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   1691a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1691e:	f7ff ffc5 	bl	168ac <bt_att_req_free>
	chan->req = NULL;
   16922:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
   16926:	e7e6      	b.n	168f6 <att_handle_rsp+0x26>
	bt_att_func_t func = NULL;
   16928:	4605      	mov	r5, r0
   1692a:	e7e4      	b.n	168f6 <att_handle_rsp+0x26>
   1692c:	20002554 	.word	0x20002554

00016930 <bt_att_disconnected>:
{
   16930:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   16932:	f850 5c04 	ldr.w	r5, [r0, #-4]
{
   16936:	b085      	sub	sp, #20
   16938:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1693a:	2d00      	cmp	r5, #0
   1693c:	d04c      	beq.n	169d8 <bt_att_disconnected+0xa8>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1693e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   16942:	f105 0024 	add.w	r0, r5, #36	; 0x24
   16946:	f00a fee1 	bl	2170c <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1694a:	1f26      	subs	r6, r4, #4
   1694c:	f104 0794 	add.w	r7, r4, #148	; 0x94
   16950:	2200      	movs	r2, #0
   16952:	2300      	movs	r3, #0
   16954:	4638      	mov	r0, r7
   16956:	f00b fcf3 	bl	22340 <net_buf_get>
   1695a:	4602      	mov	r2, r0
   1695c:	bb18      	cbnz	r0, 169a6 <bt_att_disconnected+0x76>
	if (chan->req) {
   1695e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   16962:	b123      	cbz	r3, 1696e <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16964:	4601      	mov	r1, r0
   16966:	230e      	movs	r3, #14
   16968:	4630      	mov	r0, r6
   1696a:	f7ff ffb1 	bl	168d0 <att_handle_rsp>
	chan->att = NULL;
   1696e:	2300      	movs	r3, #0
   16970:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16974:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16976:	2b00      	cmp	r3, #0
   16978:	d12e      	bne.n	169d8 <bt_att_disconnected+0xa8>
	att_reset(att);
   1697a:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1697c:	9803      	ldr	r0, [sp, #12]
   1697e:	2200      	movs	r2, #0
   16980:	2300      	movs	r3, #0
   16982:	300c      	adds	r0, #12
   16984:	f00b fcdc 	bl	22340 <net_buf_get>
   16988:	b980      	cbnz	r0, 169ac <bt_att_disconnected+0x7c>
	while (!sys_slist_is_empty(&att->reqs)) {
   1698a:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1698c:	6845      	ldr	r5, [r0, #4]
   1698e:	b985      	cbnz	r5, 169b2 <bt_att_disconnected+0x82>
	att->conn = NULL;
   16990:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16992:	a903      	add	r1, sp, #12
   16994:	4811      	ldr	r0, [pc, #68]	; (169dc <bt_att_disconnected+0xac>)
   16996:	f00c f9d5 	bl	22d44 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1699a:	6820      	ldr	r0, [r4, #0]
}
   1699c:	b005      	add	sp, #20
   1699e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   169a2:	f000 bc75 	b.w	17290 <bt_gatt_disconnected>
		net_buf_unref(buf);
   169a6:	f000 fd69 	bl	1747c <net_buf_unref>
   169aa:	e7d1      	b.n	16950 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   169ac:	f000 fd66 	bl	1747c <net_buf_unref>
   169b0:	e7e4      	b.n	1697c <bt_att_disconnected+0x4c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   169b2:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   169b4:	686e      	ldr	r6, [r5, #4]
	return node->next;
   169b6:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   169b8:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   169ba:	4295      	cmp	r5, r2
	list->tail = node;
   169bc:	bf08      	it	eq
   169be:	6083      	streq	r3, [r0, #8]
   169c0:	b136      	cbz	r6, 169d0 <bt_att_disconnected+0xa0>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   169c2:	68eb      	ldr	r3, [r5, #12]
   169c4:	9300      	str	r3, [sp, #0]
   169c6:	2300      	movs	r3, #0
   169c8:	6800      	ldr	r0, [r0, #0]
   169ca:	461a      	mov	r2, r3
   169cc:	210e      	movs	r1, #14
   169ce:	47b0      	blx	r6
		bt_att_req_free(req);
   169d0:	4628      	mov	r0, r5
   169d2:	f7ff ff6b 	bl	168ac <bt_att_req_free>
   169d6:	e7d8      	b.n	1698a <bt_att_disconnected+0x5a>
}
   169d8:	b005      	add	sp, #20
   169da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169dc:	200009b4 	.word	0x200009b4

000169e0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   169e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   169e2:	4d0d      	ldr	r5, [pc, #52]	; (16a18 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   169e4:	4604      	mov	r4, r0
   169e6:	b968      	cbnz	r0, 16a04 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   169e8:	9000      	str	r0, [sp, #0]
   169ea:	2207      	movs	r2, #7
   169ec:	f8cd 0003 	str.w	r0, [sp, #3]
   169f0:	4669      	mov	r1, sp
   169f2:	1c68      	adds	r0, r5, #1
   169f4:	f00c fec5 	bl	23782 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   169f8:	2800      	cmp	r0, #0
   169fa:	bf08      	it	eq
   169fc:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   169fe:	4620      	mov	r0, r4
   16a00:	b003      	add	sp, #12
   16a02:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16a04:	462a      	mov	r2, r5
   16a06:	f812 1b01 	ldrb.w	r1, [r2], #1
   16a0a:	f00a fa8c 	bl	20f26 <bt_conn_is_peer_addr_le>
	return NULL;
   16a0e:	2800      	cmp	r0, #0
   16a10:	bf14      	ite	ne
   16a12:	462c      	movne	r4, r5
   16a14:	2400      	moveq	r4, #0
   16a16:	e7f2      	b.n	169fe <find_cf_cfg+0x1e>
   16a18:	2000256c 	.word	0x2000256c

00016a1c <find_sc_cfg>:
{
   16a1c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   16a1e:	4c06      	ldr	r4, [pc, #24]	; (16a38 <find_sc_cfg+0x1c>)
   16a20:	7823      	ldrb	r3, [r4, #0]
   16a22:	4283      	cmp	r3, r0
   16a24:	d104      	bne.n	16a30 <find_sc_cfg+0x14>
   16a26:	2207      	movs	r2, #7
   16a28:	1c60      	adds	r0, r4, #1
   16a2a:	f00c feaa 	bl	23782 <memcmp>
   16a2e:	b108      	cbz	r0, 16a34 <find_sc_cfg+0x18>
	return NULL;
   16a30:	2000      	movs	r0, #0
}
   16a32:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   16a34:	4620      	mov	r0, r4
   16a36:	e7fc      	b.n	16a32 <find_sc_cfg+0x16>
   16a38:	20003324 	.word	0x20003324

00016a3c <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   16a3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a40:	4b23      	ldr	r3, [pc, #140]	; (16ad0 <disconnected_cb+0x94>)
{
   16a42:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a44:	6882      	ldr	r2, [r0, #8]
   16a46:	429a      	cmp	r2, r3
{
   16a48:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16a4a:	d102      	bne.n	16a52 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   16a4c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   16a4e:	8963      	ldrh	r3, [r4, #10]
   16a50:	bb03      	cbnz	r3, 16a94 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   16a52:	2001      	movs	r0, #1
   16a54:	b002      	add	sp, #8
   16a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   16a5a:	f105 0888 	add.w	r8, r5, #136	; 0x88
   16a5e:	7a28      	ldrb	r0, [r5, #8]
   16a60:	4641      	mov	r1, r8
   16a62:	f009 ffec 	bl	20a3e <bt_addr_le_is_bonded>
   16a66:	b980      	cbnz	r0, 16a8a <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   16a68:	4b1a      	ldr	r3, [pc, #104]	; (16ad4 <disconnected_cb+0x98>)
   16a6a:	429c      	cmp	r4, r3
   16a6c:	d102      	bne.n	16a74 <disconnected_cb+0x38>
					sc_clear(conn);
   16a6e:	4628      	mov	r0, r5
   16a70:	f00b faec 	bl	2204c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16a74:	2200      	movs	r2, #0
   16a76:	4669      	mov	r1, sp
   16a78:	4630      	mov	r0, r6
   16a7a:	9200      	str	r2, [sp, #0]
   16a7c:	f8cd 2003 	str.w	r2, [sp, #3]
   16a80:	f00b f932 	bl	21ce8 <bt_addr_le_copy>
	cfg->id = 0U;
   16a84:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   16a86:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   16a88:	e019      	b.n	16abe <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   16a8a:	4641      	mov	r1, r8
   16a8c:	4630      	mov	r0, r6
   16a8e:	f00b f92b 	bl	21ce8 <bt_addr_le_copy>
	if (!value_used) {
   16a92:	e014      	b.n	16abe <disconnected_cb+0x82>
		if (!cfg->value) {
   16a94:	8923      	ldrh	r3, [r4, #8]
   16a96:	b193      	cbz	r3, 16abe <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16a98:	4626      	mov	r6, r4
   16a9a:	4628      	mov	r0, r5
   16a9c:	f816 1b01 	ldrb.w	r1, [r6], #1
   16aa0:	4632      	mov	r2, r6
   16aa2:	f00a fa40 	bl	20f26 <bt_conn_is_peer_addr_le>
   16aa6:	2800      	cmp	r0, #0
   16aa8:	d1d7      	bne.n	16a5a <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   16aaa:	7820      	ldrb	r0, [r4, #0]
   16aac:	4631      	mov	r1, r6
   16aae:	f7fe fff1 	bl	15a94 <bt_conn_lookup_addr_le>
			if (tmp) {
   16ab2:	b120      	cbz	r0, 16abe <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   16ab4:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   16ab6:	f00a f9ef 	bl	20e98 <bt_conn_unref>
	if (!value_used) {
   16aba:	2d07      	cmp	r5, #7
   16abc:	d0c9      	beq.n	16a52 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   16abe:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   16ac0:	2100      	movs	r1, #0
   16ac2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   16ac4:	2b00      	cmp	r3, #0
   16ac6:	d0c4      	beq.n	16a52 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   16ac8:	4638      	mov	r0, r7
   16aca:	4798      	blx	r3
   16acc:	e7c1      	b.n	16a52 <disconnected_cb+0x16>
   16ace:	bf00      	nop
   16ad0:	00021f25 	.word	0x00021f25
   16ad4:	200006d8 	.word	0x200006d8

00016ad8 <sc_indicate_rsp>:
{
   16ad8:	b510      	push	{r4, lr}
   16ada:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16adc:	4816      	ldr	r0, [pc, #88]	; (16b38 <sc_indicate_rsp+0x60>)
   16ade:	f3bf 8f5b 	dmb	ish
   16ae2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   16ae6:	e853 2f00 	ldrex	r2, [r3]
   16aea:	f022 0202 	bic.w	r2, r2, #2
   16aee:	e843 2100 	strex	r1, r2, [r3]
   16af2:	2900      	cmp	r1, #0
   16af4:	d1f7      	bne.n	16ae6 <sc_indicate_rsp+0xe>
   16af6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16afa:	f3bf 8f5b 	dmb	ish
   16afe:	6d03      	ldr	r3, [r0, #80]	; 0x50
   16b00:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   16b04:	07da      	lsls	r2, r3, #31
   16b06:	d504      	bpl.n	16b12 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   16b08:	2200      	movs	r2, #0
   16b0a:	2300      	movs	r3, #0
   16b0c:	3020      	adds	r0, #32
   16b0e:	f004 fc19 	bl	1b344 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   16b12:	4620      	mov	r0, r4
   16b14:	f00b f826 	bl	21b64 <bt_att_fixed_chan_only>
   16b18:	b160      	cbz	r0, 16b34 <sc_indicate_rsp+0x5c>
		cfg = find_cf_cfg(conn);
   16b1a:	4620      	mov	r0, r4
   16b1c:	f7ff ff60 	bl	169e0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   16b20:	b140      	cbz	r0, 16b34 <sc_indicate_rsp+0x5c>
   16b22:	7a03      	ldrb	r3, [r0, #8]
   16b24:	07db      	lsls	r3, r3, #31
   16b26:	d505      	bpl.n	16b34 <sc_indicate_rsp+0x5c>
}
   16b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   16b2c:	2100      	movs	r1, #0
   16b2e:	300c      	adds	r0, #12
   16b30:	f00b b98a 	b.w	21e48 <atomic_set_bit>
}
   16b34:	bd10      	pop	{r4, pc}
   16b36:	bf00      	nop
   16b38:	20001ad8 	.word	0x20001ad8

00016b3c <bt_gatt_init>:
{
   16b3c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16b3e:	4b20      	ldr	r3, [pc, #128]	; (16bc0 <bt_gatt_init+0x84>)
   16b40:	f3bf 8f5b 	dmb	ish
   16b44:	2201      	movs	r2, #1
   16b46:	e853 1f00 	ldrex	r1, [r3]
   16b4a:	2900      	cmp	r1, #0
   16b4c:	d103      	bne.n	16b56 <bt_gatt_init+0x1a>
   16b4e:	e843 2000 	strex	r0, r2, [r3]
   16b52:	2800      	cmp	r0, #0
   16b54:	d1f7      	bne.n	16b46 <bt_gatt_init+0xa>
   16b56:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   16b5a:	d130      	bne.n	16bbe <bt_gatt_init+0x82>
   16b5c:	f3bf 8f5b 	dmb	ish
   16b60:	4b18      	ldr	r3, [pc, #96]	; (16bc4 <bt_gatt_init+0x88>)
   16b62:	e853 1f00 	ldrex	r1, [r3]
   16b66:	2900      	cmp	r1, #0
   16b68:	d103      	bne.n	16b72 <bt_gatt_init+0x36>
   16b6a:	e843 2000 	strex	r0, r2, [r3]
   16b6e:	2800      	cmp	r0, #0
   16b70:	d1f7      	bne.n	16b62 <bt_gatt_init+0x26>
   16b72:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   16b76:	d108      	bne.n	16b8a <bt_gatt_init+0x4e>
   16b78:	4913      	ldr	r1, [pc, #76]	; (16bc8 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16b7a:	4a14      	ldr	r2, [pc, #80]	; (16bcc <bt_gatt_init+0x90>)
   16b7c:	880b      	ldrh	r3, [r1, #0]
   16b7e:	4c14      	ldr	r4, [pc, #80]	; (16bd0 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   16b80:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16b82:	42a2      	cmp	r2, r4
   16b84:	d315      	bcc.n	16bb2 <bt_gatt_init+0x76>
   16b86:	b100      	cbz	r0, 16b8a <bt_gatt_init+0x4e>
   16b88:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   16b8a:	4b12      	ldr	r3, [pc, #72]	; (16bd4 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   16b8c:	4912      	ldr	r1, [pc, #72]	; (16bd8 <bt_gatt_init+0x9c>)
   16b8e:	4813      	ldr	r0, [pc, #76]	; (16bdc <bt_gatt_init+0xa0>)
   16b90:	2200      	movs	r2, #0
	list->tail = NULL;
   16b92:	e9c3 2200 	strd	r2, r2, [r3]
   16b96:	f00c faa7 	bl	230e8 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   16b9a:	4810      	ldr	r0, [pc, #64]	; (16bdc <bt_gatt_init+0xa0>)
   16b9c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16ba0:	2300      	movs	r3, #0
   16ba2:	f004 fb9b 	bl	1b2dc <k_work_schedule>
}
   16ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   16baa:	490d      	ldr	r1, [pc, #52]	; (16be0 <bt_gatt_init+0xa4>)
   16bac:	480d      	ldr	r0, [pc, #52]	; (16be4 <bt_gatt_init+0xa8>)
   16bae:	f00c ba9b 	b.w	230e8 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   16bb2:	6850      	ldr	r0, [r2, #4]
   16bb4:	4403      	add	r3, r0
   16bb6:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   16bb8:	3208      	adds	r2, #8
   16bba:	2001      	movs	r0, #1
   16bbc:	e7e1      	b.n	16b82 <bt_gatt_init+0x46>
}
   16bbe:	bd10      	pop	{r4, pc}
   16bc0:	2000257c 	.word	0x2000257c
   16bc4:	20002598 	.word	0x20002598
   16bc8:	20003322 	.word	0x20003322
   16bcc:	00023bbc 	.word	0x00023bbc
   16bd0:	00023be4 	.word	0x00023be4
   16bd4:	20002564 	.word	0x20002564
   16bd8:	00022195 	.word	0x00022195
   16bdc:	20001a80 	.word	0x20001a80
   16be0:	00016f6d 	.word	0x00016f6d
   16be4:	20001af8 	.word	0x20001af8

00016be8 <bt_gatt_attr_get_handle>:
{
   16be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   16bec:	4603      	mov	r3, r0
   16bee:	b148      	cbz	r0, 16c04 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   16bf0:	8a00      	ldrh	r0, [r0, #16]
   16bf2:	b938      	cbnz	r0, 16c04 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16bf4:	4912      	ldr	r1, [pc, #72]	; (16c40 <bt_gatt_attr_get_handle+0x58>)
   16bf6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 16c44 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   16bfa:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16bfc:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16c00:	4571      	cmp	r1, lr
   16c02:	d301      	bcc.n	16c08 <bt_gatt_attr_get_handle+0x20>
}
   16c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16c08:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   16c0c:	42bb      	cmp	r3, r7
   16c0e:	d304      	bcc.n	16c1a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   16c10:	fb0c 7206 	mla	r2, ip, r6, r7
   16c14:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   16c16:	4293      	cmp	r3, r2
   16c18:	d90e      	bls.n	16c38 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   16c1a:	19a2      	adds	r2, r4, r6
   16c1c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16c1e:	3108      	adds	r1, #8
   16c20:	4614      	mov	r4, r2
   16c22:	e7ed      	b.n	16c00 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   16c24:	fb0c 7805 	mla	r8, ip, r5, r7
   16c28:	4543      	cmp	r3, r8
   16c2a:	d007      	beq.n	16c3c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   16c2c:	3501      	adds	r5, #1
   16c2e:	1962      	adds	r2, r4, r5
   16c30:	42b5      	cmp	r5, r6
   16c32:	b292      	uxth	r2, r2
   16c34:	d1f6      	bne.n	16c24 <bt_gatt_attr_get_handle+0x3c>
   16c36:	e7f2      	b.n	16c1e <bt_gatt_attr_get_handle+0x36>
   16c38:	2500      	movs	r5, #0
   16c3a:	e7f8      	b.n	16c2e <bt_gatt_attr_get_handle+0x46>
   16c3c:	4610      	mov	r0, r2
   16c3e:	e7e1      	b.n	16c04 <bt_gatt_attr_get_handle+0x1c>
   16c40:	00023bbc 	.word	0x00023bbc
   16c44:	00023be4 	.word	0x00023be4

00016c48 <bt_gatt_foreach_attr_type>:
{
   16c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c4c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16c50:	9100      	str	r1, [sp, #0]
   16c52:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   16c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16c58:	2d00      	cmp	r5, #0
   16c5a:	bf08      	it	eq
   16c5c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   16c5e:	4b24      	ldr	r3, [pc, #144]	; (16cf0 <bt_gatt_foreach_attr_type+0xa8>)
   16c60:	881b      	ldrh	r3, [r3, #0]
   16c62:	4283      	cmp	r3, r0
{
   16c64:	4607      	mov	r7, r0
   16c66:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   16c68:	d23c      	bcs.n	16ce4 <bt_gatt_foreach_attr_type+0x9c>
}
   16c6a:	b003      	add	sp, #12
   16c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   16c70:	6873      	ldr	r3, [r6, #4]
   16c72:	4423      	add	r3, r4
   16c74:	42bb      	cmp	r3, r7
   16c76:	d232      	bcs.n	16cde <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   16c78:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16c7a:	3608      	adds	r6, #8
   16c7c:	4b1d      	ldr	r3, [pc, #116]	; (16cf4 <bt_gatt_foreach_attr_type+0xac>)
   16c7e:	429e      	cmp	r6, r3
   16c80:	d3f6      	bcc.n	16c70 <bt_gatt_foreach_attr_type+0x28>
   16c82:	e7f2      	b.n	16c6a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16c84:	5889      	ldr	r1, [r1, r2]
   16c86:	9301      	str	r3, [sp, #4]
   16c88:	4640      	mov	r0, r8
   16c8a:	f009 fbf8 	bl	2047e <bt_uuid_cmp>
   16c8e:	9b01      	ldr	r3, [sp, #4]
   16c90:	b190      	cbz	r0, 16cb8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16c92:	3401      	adds	r4, #1
   16c94:	f10a 0a01 	add.w	sl, sl, #1
   16c98:	b2a4      	uxth	r4, r4
   16c9a:	6873      	ldr	r3, [r6, #4]
   16c9c:	4553      	cmp	r3, sl
   16c9e:	d9ec      	bls.n	16c7a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   16ca0:	9b00      	ldr	r3, [sp, #0]
   16ca2:	429c      	cmp	r4, r3
   16ca4:	d8e1      	bhi.n	16c6a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   16ca6:	42bc      	cmp	r4, r7
   16ca8:	d3f3      	bcc.n	16c92 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16caa:	6831      	ldr	r1, [r6, #0]
   16cac:	fb0b f20a 	mul.w	r2, fp, sl
   16cb0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   16cb2:	f1b8 0f00 	cmp.w	r8, #0
   16cb6:	d1e5      	bne.n	16c84 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   16cb8:	f1b9 0f00 	cmp.w	r9, #0
   16cbc:	d10b      	bne.n	16cd6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   16cbe:	3d01      	subs	r5, #1
   16cc0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   16cc2:	4618      	mov	r0, r3
   16cc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16cc8:	4621      	mov	r1, r4
   16cca:	4798      	blx	r3
	if (!*num_matches) {
   16ccc:	2d00      	cmp	r5, #0
   16cce:	d0cc      	beq.n	16c6a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16cd0:	2800      	cmp	r0, #0
   16cd2:	d1de      	bne.n	16c92 <bt_gatt_foreach_attr_type+0x4a>
   16cd4:	e7c9      	b.n	16c6a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   16cd6:	68da      	ldr	r2, [r3, #12]
   16cd8:	4591      	cmp	r9, r2
   16cda:	d1da      	bne.n	16c92 <bt_gatt_foreach_attr_type+0x4a>
   16cdc:	e7ef      	b.n	16cbe <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   16cde:	f04f 0a00 	mov.w	sl, #0
   16ce2:	e7da      	b.n	16c9a <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   16ce4:	4e04      	ldr	r6, [pc, #16]	; (16cf8 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   16ce6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   16ce8:	f04f 0b14 	mov.w	fp, #20
   16cec:	e7c6      	b.n	16c7c <bt_gatt_foreach_attr_type+0x34>
   16cee:	bf00      	nop
   16cf0:	20003322 	.word	0x20003322
   16cf4:	00023be4 	.word	0x00023be4
   16cf8:	00023bbc 	.word	0x00023bbc

00016cfc <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   16cfc:	b510      	push	{r4, lr}
   16cfe:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   16d00:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16d02:	aa1c      	add	r2, sp, #112	; 0x70
   16d04:	4669      	mov	r1, sp
   16d06:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   16d08:	e9cd 3300 	strd	r3, r3, [sp]
   16d0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   16d10:	f009 fabe 	bl	20290 <tc_cmac_setup>
   16d14:	b320      	cbz	r0, 16d60 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   16d16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16d1a:	2001      	movs	r0, #1
   16d1c:	4a11      	ldr	r2, [pc, #68]	; (16d64 <db_hash_gen.constprop.0+0x68>)
   16d1e:	ab04      	add	r3, sp, #16
   16d20:	f00b fa2d 	bl	2217e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   16d24:	4810      	ldr	r0, [pc, #64]	; (16d68 <db_hash_gen.constprop.0+0x6c>)
   16d26:	a904      	add	r1, sp, #16
   16d28:	f009 fb48 	bl	203bc <tc_cmac_final>
   16d2c:	b1c0      	cbz	r0, 16d60 <db_hash_gen.constprop.0+0x64>
   16d2e:	4b0e      	ldr	r3, [pc, #56]	; (16d68 <db_hash_gen.constprop.0+0x6c>)
   16d30:	2208      	movs	r2, #8
   16d32:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   16d36:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   16d38:	780c      	ldrb	r4, [r1, #0]
   16d3a:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   16d3e:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   16d40:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   16d44:	d1f7      	bne.n	16d36 <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d46:	f3bf 8f5b 	dmb	ish
   16d4a:	4b08      	ldr	r3, [pc, #32]	; (16d6c <db_hash_gen.constprop.0+0x70>)
   16d4c:	e853 2f00 	ldrex	r2, [r3]
   16d50:	f042 0204 	orr.w	r2, r2, #4
   16d54:	e843 2100 	strex	r1, r2, [r3]
   16d58:	2900      	cmp	r1, #0
   16d5a:	d1f7      	bne.n	16d4c <db_hash_gen.constprop.0+0x50>
   16d5c:	f3bf 8f5b 	dmb	ish
}
   16d60:	b048      	add	sp, #288	; 0x120
   16d62:	bd10      	pop	{r4, pc}
   16d64:	00021c3f 	.word	0x00021c3f
   16d68:	20001a70 	.word	0x20001a70
   16d6c:	20001b28 	.word	0x20001b28

00016d70 <db_hash_read>:
{
   16d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16d74:	4918      	ldr	r1, [pc, #96]	; (16dd8 <db_hash_read+0x68>)
{
   16d76:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   16d7a:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16d7c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16d80:	461e      	mov	r6, r3
   16d82:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16d84:	f00c f9d2 	bl	2312c <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16d88:	f3bf 8f5b 	dmb	ish
   16d8c:	4b13      	ldr	r3, [pc, #76]	; (16ddc <db_hash_read+0x6c>)
   16d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16d90:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   16d94:	0759      	lsls	r1, r3, #29
   16d96:	d401      	bmi.n	16d9c <db_hash_read+0x2c>
		db_hash_gen(true);
   16d98:	f7ff ffb0 	bl	16cfc <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   16d9c:	4620      	mov	r0, r4
   16d9e:	f7ff fe1f 	bl	169e0 <find_cf_cfg>
	if (cfg &&
   16da2:	4604      	mov	r4, r0
   16da4:	b170      	cbz	r0, 16dc4 <db_hash_read+0x54>
   16da6:	7a03      	ldrb	r3, [r0, #8]
   16da8:	07da      	lsls	r2, r3, #31
   16daa:	d50b      	bpl.n	16dc4 <db_hash_read+0x54>
   16dac:	f3bf 8f5b 	dmb	ish
   16db0:	68e3      	ldr	r3, [r4, #12]
   16db2:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   16db6:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   16db8:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   16dbc:	d402      	bmi.n	16dc4 <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   16dbe:	2101      	movs	r1, #1
   16dc0:	f00b f842 	bl	21e48 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16dc4:	2310      	movs	r3, #16
   16dc6:	9306      	str	r3, [sp, #24]
   16dc8:	463a      	mov	r2, r7
   16dca:	4631      	mov	r1, r6
   16dcc:	4628      	mov	r0, r5
   16dce:	4b04      	ldr	r3, [pc, #16]	; (16de0 <db_hash_read+0x70>)
}
   16dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   16dd4:	f00a bf94 	b.w	21d00 <bt_gatt_attr_read.constprop.0>
   16dd8:	20001ab0 	.word	0x20001ab0
   16ddc:	20001ad8 	.word	0x20001ad8
   16de0:	20001a70 	.word	0x20001a70

00016de4 <gatt_indicate>:
{
   16de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16de8:	4615      	mov	r5, r2
   16dea:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   16dec:	2214      	movs	r2, #20
   16dee:	6869      	ldr	r1, [r5, #4]
{
   16df0:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   16df2:	f00b f9d1 	bl	22198 <bt_gatt_check_perm>
   16df6:	2800      	cmp	r0, #0
   16df8:	d139      	bne.n	16e6e <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16dfa:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   16dfe:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   16e00:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   16e02:	f7ff fd31 	bl	16868 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   16e06:	3602      	adds	r6, #2
	if (!req) {
   16e08:	4604      	mov	r4, r0
   16e0a:	b920      	cbnz	r0, 16e16 <gatt_indicate+0x32>
		return -ENOMEM;
   16e0c:	f06f 050b 	mvn.w	r5, #11
}
   16e10:	4628      	mov	r0, r5
   16e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   16e16:	4b17      	ldr	r3, [pc, #92]	; (16e74 <gatt_indicate+0x90>)
   16e18:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   16e1a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   16e1c:	4632      	mov	r2, r6
   16e1e:	211d      	movs	r1, #29
   16e20:	4640      	mov	r0, r8
   16e22:	f00a fdd3 	bl	219cc <bt_att_create_pdu>
	if (!buf) {
   16e26:	4606      	mov	r6, r0
   16e28:	b918      	cbnz	r0, 16e32 <gatt_indicate+0x4e>
		bt_att_req_free(req);
   16e2a:	4620      	mov	r0, r4
   16e2c:	f7ff fd3e 	bl	168ac <bt_att_req_free>
   16e30:	e7ec      	b.n	16e0c <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
   16e32:	f100 0a08 	add.w	sl, r0, #8
   16e36:	2102      	movs	r1, #2
   16e38:	4650      	mov	r0, sl
   16e3a:	f00b fb1b 	bl	22474 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   16e3e:	4607      	mov	r7, r0
   16e40:	8aa9      	ldrh	r1, [r5, #20]
   16e42:	f827 9b02 	strh.w	r9, [r7], #2
   16e46:	4650      	mov	r0, sl
   16e48:	f00b fb14 	bl	22474 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16e4c:	8aaa      	ldrh	r2, [r5, #20]
   16e4e:	6929      	ldr	r1, [r5, #16]
   16e50:	4638      	mov	r0, r7
   16e52:	f00c fca6 	bl	237a2 <memcpy>
	req->buf = buf;
   16e56:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   16e58:	4621      	mov	r1, r4
   16e5a:	4640      	mov	r0, r8
   16e5c:	f00a fe6d 	bl	21b3a <bt_att_req_send>
	if (err) {
   16e60:	4605      	mov	r5, r0
   16e62:	2800      	cmp	r0, #0
   16e64:	d0d4      	beq.n	16e10 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   16e66:	4620      	mov	r0, r4
   16e68:	f7ff fd20 	bl	168ac <bt_att_req_free>
   16e6c:	e7d0      	b.n	16e10 <gatt_indicate+0x2c>
		return -EPERM;
   16e6e:	f04f 35ff 	mov.w	r5, #4294967295
   16e72:	e7cd      	b.n	16e10 <gatt_indicate+0x2c>
   16e74:	00021bcb 	.word	0x00021bcb

00016e78 <bt_gatt_indicate>:
{
   16e78:	b530      	push	{r4, r5, lr}
   16e7a:	4b39      	ldr	r3, [pc, #228]	; (16f60 <bt_gatt_indicate+0xe8>)
   16e7c:	f3bf 8f5b 	dmb	ish
   16e80:	681b      	ldr	r3, [r3, #0]
   16e82:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16e86:	075a      	lsls	r2, r3, #29
{
   16e88:	b08b      	sub	sp, #44	; 0x2c
   16e8a:	4604      	mov	r4, r0
   16e8c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16e8e:	d561      	bpl.n	16f54 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16e90:	b110      	cbz	r0, 16e98 <bt_gatt_indicate+0x20>
   16e92:	7a83      	ldrb	r3, [r0, #10]
   16e94:	2b07      	cmp	r3, #7
   16e96:	d160      	bne.n	16f5a <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   16e98:	6868      	ldr	r0, [r5, #4]
   16e9a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16e9c:	f7ff fea4 	bl	16be8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   16ea0:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   16ea2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   16ea6:	b33a      	cbz	r2, 16ef8 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16ea8:	a905      	add	r1, sp, #20
   16eaa:	9102      	str	r1, [sp, #8]
   16eac:	492d      	ldr	r1, [pc, #180]	; (16f64 <bt_gatt_indicate+0xec>)
   16eae:	9101      	str	r1, [sp, #4]
   16eb0:	2101      	movs	r1, #1
	found->attr = NULL;
   16eb2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16eb4:	9100      	str	r1, [sp, #0]
   16eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   16eba:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   16ebc:	f7ff fec4 	bl	16c48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   16ec0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   16ec2:	b91b      	cbnz	r3, 16ecc <bt_gatt_indicate+0x54>
			return -ENOENT;
   16ec4:	f06f 0001 	mvn.w	r0, #1
}
   16ec8:	b00b      	add	sp, #44	; 0x2c
   16eca:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   16ecc:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   16ece:	9b05      	ldr	r3, [sp, #20]
   16ed0:	6818      	ldr	r0, [r3, #0]
   16ed2:	2300      	movs	r3, #0
   16ed4:	f88d 3010 	strb.w	r3, [sp, #16]
   16ed8:	a904      	add	r1, sp, #16
   16eda:	f642 0303 	movw	r3, #10243	; 0x2803
   16ede:	f8ad 3012 	strh.w	r3, [sp, #18]
   16ee2:	f009 facc 	bl	2047e <bt_uuid_cmp>
   16ee6:	b970      	cbnz	r0, 16f06 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   16ee8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   16eea:	68c3      	ldr	r3, [r0, #12]
   16eec:	799b      	ldrb	r3, [r3, #6]
   16eee:	069b      	lsls	r3, r3, #26
   16ef0:	d405      	bmi.n	16efe <bt_gatt_indicate+0x86>
			return -EINVAL;
   16ef2:	f06f 0015 	mvn.w	r0, #21
   16ef6:	e7e7      	b.n	16ec8 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   16ef8:	2800      	cmp	r0, #0
   16efa:	d1e8      	bne.n	16ece <bt_gatt_indicate+0x56>
   16efc:	e7e2      	b.n	16ec4 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   16efe:	f00b f8f7 	bl	220f0 <bt_gatt_attr_value_handle>
   16f02:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   16f06:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   16f0a:	b13c      	cbz	r4, 16f1c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   16f0c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   16f0e:	4601      	mov	r1, r0
		params->_ref = 1;
   16f10:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   16f12:	462a      	mov	r2, r5
   16f14:	4620      	mov	r0, r4
   16f16:	f7ff ff65 	bl	16de4 <gatt_indicate>
   16f1a:	e7d5      	b.n	16ec8 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   16f1c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   16f20:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   16f22:	2302      	movs	r3, #2
   16f24:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f28:	f642 1302 	movw	r3, #10498	; 0x2902
   16f2c:	f8ad 3012 	strh.w	r3, [sp, #18]
   16f30:	ab05      	add	r3, sp, #20
   16f32:	9302      	str	r3, [sp, #8]
   16f34:	4b0c      	ldr	r3, [pc, #48]	; (16f68 <bt_gatt_indicate+0xf0>)
   16f36:	9301      	str	r3, [sp, #4]
   16f38:	2301      	movs	r3, #1
   16f3a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   16f3c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f3e:	4623      	mov	r3, r4
   16f40:	aa04      	add	r2, sp, #16
   16f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   16f46:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16f48:	f88d 4010 	strb.w	r4, [sp, #16]
   16f4c:	f7ff fe7c 	bl	16c48 <bt_gatt_foreach_attr_type>
	return data.err;
   16f50:	9807      	ldr	r0, [sp, #28]
   16f52:	e7b9      	b.n	16ec8 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   16f54:	f06f 000a 	mvn.w	r0, #10
   16f58:	e7b6      	b.n	16ec8 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   16f5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16f5e:	e7b3      	b.n	16ec8 <bt_gatt_indicate+0x50>
   16f60:	20000394 	.word	0x20000394
   16f64:	00021bf1 	.word	0x00021bf1
   16f68:	000170c9 	.word	0x000170c9

00016f6c <sc_process>:
{
   16f6c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   16f6e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   16f72:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   16f76:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   16f7a:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   16f7e:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   16f80:	f1a0 0120 	sub.w	r1, r0, #32
   16f84:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f88:	f3bf 8f5b 	dmb	ish
   16f8c:	e854 2f00 	ldrex	r2, [r4]
   16f90:	f022 0201 	bic.w	r2, r2, #1
   16f94:	e844 2000 	strex	r0, r2, [r4]
   16f98:	2800      	cmp	r0, #0
   16f9a:	d1f7      	bne.n	16f8c <sc_process+0x20>
   16f9c:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   16fa0:	4a0c      	ldr	r2, [pc, #48]	; (16fd4 <sc_process+0x68>)
   16fa2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   16fa6:	4a0c      	ldr	r2, [pc, #48]	; (16fd8 <sc_process+0x6c>)
   16fa8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   16fac:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   16fae:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   16fb0:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   16fb4:	2204      	movs	r2, #4
	sc->start = 0U;
   16fb6:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   16fba:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   16fbe:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   16fc2:	f7ff ff59 	bl	16e78 <bt_gatt_indicate>
   16fc6:	b918      	cbnz	r0, 16fd0 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   16fc8:	2101      	movs	r1, #1
   16fca:	4620      	mov	r0, r4
   16fcc:	f00a ff3c 	bl	21e48 <atomic_set_bit>
}
   16fd0:	b002      	add	sp, #8
   16fd2:	bd10      	pop	{r4, pc}
   16fd4:	000242e8 	.word	0x000242e8
   16fd8:	00016ad9 	.word	0x00016ad9

00016fdc <bt_gatt_notify_cb>:
{
   16fdc:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16fde:	4b37      	ldr	r3, [pc, #220]	; (170bc <bt_gatt_notify_cb+0xe0>)
   16fe0:	f3bf 8f5b 	dmb	ish
   16fe4:	681b      	ldr	r3, [r3, #0]
   16fe6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16fea:	075a      	lsls	r2, r3, #29
{
   16fec:	b08b      	sub	sp, #44	; 0x2c
   16fee:	4604      	mov	r4, r0
   16ff0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16ff2:	d55d      	bpl.n	170b0 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   16ff4:	b110      	cbz	r0, 16ffc <bt_gatt_notify_cb+0x20>
   16ff6:	7a83      	ldrb	r3, [r0, #10]
   16ff8:	2b07      	cmp	r3, #7
   16ffa:	d15c      	bne.n	170b6 <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   16ffc:	6868      	ldr	r0, [r5, #4]
   16ffe:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17000:	f7ff fdf2 	bl	16be8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17004:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17006:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1700a:	b33a      	cbz	r2, 1705c <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1700c:	a905      	add	r1, sp, #20
   1700e:	9102      	str	r1, [sp, #8]
   17010:	492b      	ldr	r1, [pc, #172]	; (170c0 <bt_gatt_notify_cb+0xe4>)
   17012:	9101      	str	r1, [sp, #4]
   17014:	2101      	movs	r1, #1
	found->attr = NULL;
   17016:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17018:	9100      	str	r1, [sp, #0]
   1701a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1701e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17020:	f7ff fe12 	bl	16c48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17024:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17026:	b91b      	cbnz	r3, 17030 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   17028:	f06f 0001 	mvn.w	r0, #1
}
   1702c:	b00b      	add	sp, #44	; 0x2c
   1702e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17030:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17032:	9b05      	ldr	r3, [sp, #20]
   17034:	6818      	ldr	r0, [r3, #0]
   17036:	2300      	movs	r3, #0
   17038:	f88d 3010 	strb.w	r3, [sp, #16]
   1703c:	a904      	add	r1, sp, #16
   1703e:	f642 0303 	movw	r3, #10243	; 0x2803
   17042:	f8ad 3012 	strh.w	r3, [sp, #18]
   17046:	f009 fa1a 	bl	2047e <bt_uuid_cmp>
   1704a:	b970      	cbnz	r0, 1706a <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1704c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1704e:	68c3      	ldr	r3, [r0, #12]
   17050:	799b      	ldrb	r3, [r3, #6]
   17052:	06db      	lsls	r3, r3, #27
   17054:	d405      	bmi.n	17062 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   17056:	f06f 0015 	mvn.w	r0, #21
   1705a:	e7e7      	b.n	1702c <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   1705c:	2800      	cmp	r0, #0
   1705e:	d1e8      	bne.n	17032 <bt_gatt_notify_cb+0x56>
   17060:	e7e2      	b.n	17028 <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17062:	f00b f845 	bl	220f0 <bt_gatt_attr_value_handle>
   17066:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1706a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1706e:	b12c      	cbz	r4, 1707c <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   17070:	4601      	mov	r1, r0
   17072:	462a      	mov	r2, r5
   17074:	4620      	mov	r0, r4
   17076:	f00b f8b2 	bl	221de <gatt_notify>
   1707a:	e7d7      	b.n	1702c <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1707c:	f642 1202 	movw	r2, #10498	; 0x2902
   17080:	f8ad 2012 	strh.w	r2, [sp, #18]
   17084:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   17086:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1708a:	9202      	str	r2, [sp, #8]
   1708c:	4a0d      	ldr	r2, [pc, #52]	; (170c4 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   1708e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17090:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17092:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   17096:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1709a:	aa04      	add	r2, sp, #16
   1709c:	4623      	mov	r3, r4
   1709e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   170a2:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   170a4:	f88d 4010 	strb.w	r4, [sp, #16]
   170a8:	f7ff fdce 	bl	16c48 <bt_gatt_foreach_attr_type>
	return data.err;
   170ac:	9807      	ldr	r0, [sp, #28]
   170ae:	e7bd      	b.n	1702c <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   170b0:	f06f 000a 	mvn.w	r0, #10
   170b4:	e7ba      	b.n	1702c <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   170b6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   170ba:	e7b7      	b.n	1702c <bt_gatt_notify_cb+0x50>
   170bc:	20000394 	.word	0x20000394
   170c0:	00021bf1 	.word	0x00021bf1
   170c4:	000170c9 	.word	0x000170c9

000170c8 <notify_cb>:
{
   170c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   170ca:	4b32      	ldr	r3, [pc, #200]	; (17194 <notify_cb+0xcc>)
{
   170cc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   170ce:	6882      	ldr	r2, [r0, #8]
   170d0:	429a      	cmp	r2, r3
{
   170d2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   170d4:	d12e      	bne.n	17134 <notify_cb+0x6c>
	ccc = attr->user_data;
   170d6:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   170d8:	4b2f      	ldr	r3, [pc, #188]	; (17198 <notify_cb+0xd0>)
   170da:	429f      	cmp	r7, r3
   170dc:	d11a      	bne.n	17114 <notify_cb+0x4c>
   170de:	4d2f      	ldr	r5, [pc, #188]	; (1719c <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   170e0:	2300      	movs	r3, #0
   170e2:	2207      	movs	r2, #7
   170e4:	4669      	mov	r1, sp
   170e6:	1c68      	adds	r0, r5, #1
   170e8:	9300      	str	r3, [sp, #0]
   170ea:	f8cd 3003 	str.w	r3, [sp, #3]
   170ee:	f00c fb48 	bl	23782 <memcmp>
   170f2:	b178      	cbz	r0, 17114 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   170f4:	4629      	mov	r1, r5
   170f6:	2207      	movs	r2, #7
   170f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   170fc:	f7fe fce8 	bl	15ad0 <bt_conn_lookup_state_le>
			if (!conn) {
   17100:	b9e0      	cbnz	r0, 1713c <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   17102:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   17104:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   17106:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17108:	f811 0b01 	ldrb.w	r0, [r1], #1
   1710c:	8853      	ldrh	r3, [r2, #2]
   1710e:	8812      	ldrh	r2, [r2, #0]
   17110:	f00a ff75 	bl	21ffe <sc_save>
		if (cfg->value != data->type) {
   17114:	893a      	ldrh	r2, [r7, #8]
   17116:	89a3      	ldrh	r3, [r4, #12]
   17118:	429a      	cmp	r2, r3
   1711a:	d10b      	bne.n	17134 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1711c:	4639      	mov	r1, r7
   1711e:	f811 0b01 	ldrb.w	r0, [r1], #1
   17122:	f7fe fcb7 	bl	15a94 <bt_conn_lookup_addr_le>
		if (!conn) {
   17126:	4605      	mov	r5, r0
   17128:	b120      	cbz	r0, 17134 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   1712a:	7a83      	ldrb	r3, [r0, #10]
   1712c:	2b07      	cmp	r3, #7
   1712e:	d008      	beq.n	17142 <notify_cb+0x7a>
			bt_conn_unref(conn);
   17130:	f009 feb2 	bl	20e98 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   17134:	2701      	movs	r7, #1
}
   17136:	4638      	mov	r0, r7
   17138:	b003      	add	sp, #12
   1713a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1713c:	f009 feac 	bl	20e98 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17140:	e7e8      	b.n	17114 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17142:	697b      	ldr	r3, [r7, #20]
   17144:	b123      	cbz	r3, 17150 <notify_cb+0x88>
   17146:	4631      	mov	r1, r6
   17148:	4798      	blx	r3
   1714a:	b908      	cbnz	r0, 17150 <notify_cb+0x88>
			bt_conn_unref(conn);
   1714c:	4628      	mov	r0, r5
   1714e:	e7ef      	b.n	17130 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   17150:	2214      	movs	r2, #20
   17152:	4631      	mov	r1, r6
   17154:	4628      	mov	r0, r5
   17156:	f00b f81f 	bl	22198 <bt_gatt_check_perm>
   1715a:	4607      	mov	r7, r0
   1715c:	2800      	cmp	r0, #0
   1715e:	d1e9      	bne.n	17134 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17160:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   17162:	88a1      	ldrh	r1, [r4, #4]
   17164:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   17166:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   17168:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1716a:	d10f      	bne.n	1718c <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
   1716c:	f7ff fe3a 	bl	16de4 <gatt_indicate>
			if (err == 0) {
   17170:	4606      	mov	r6, r0
   17172:	b918      	cbnz	r0, 1717c <notify_cb+0xb4>
				data->ind_params->_ref++;
   17174:	6922      	ldr	r2, [r4, #16]
   17176:	7d93      	ldrb	r3, [r2, #22]
   17178:	3301      	adds	r3, #1
   1717a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1717c:	4628      	mov	r0, r5
   1717e:	f009 fe8b 	bl	20e98 <bt_conn_unref>
		if (err < 0) {
   17182:	2e00      	cmp	r6, #0
   17184:	dbd7      	blt.n	17136 <notify_cb+0x6e>
		data->err = 0;
   17186:	2300      	movs	r3, #0
   17188:	60a3      	str	r3, [r4, #8]
   1718a:	e7d3      	b.n	17134 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1718c:	f00b f827 	bl	221de <gatt_notify>
   17190:	4606      	mov	r6, r0
   17192:	e7f3      	b.n	1717c <notify_cb+0xb4>
   17194:	00021f25 	.word	0x00021f25
   17198:	200006d8 	.word	0x200006d8
   1719c:	20003324 	.word	0x20003324

000171a0 <update_ccc>:
{
   171a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   171a2:	4b24      	ldr	r3, [pc, #144]	; (17234 <update_ccc+0x94>)
	struct bt_conn *conn = data->conn;
   171a4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   171a6:	6882      	ldr	r2, [r0, #8]
   171a8:	429a      	cmp	r2, r3
{
   171aa:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   171ac:	d13f      	bne.n	1722e <update_ccc+0x8e>
	ccc = attr->user_data;
   171ae:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   171b0:	8933      	ldrh	r3, [r6, #8]
   171b2:	2b00      	cmp	r3, #0
   171b4:	d03b      	beq.n	1722e <update_ccc+0x8e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   171b6:	4632      	mov	r2, r6
   171b8:	4620      	mov	r0, r4
   171ba:	f812 1b01 	ldrb.w	r1, [r2], #1
   171be:	f009 feb2 	bl	20f26 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   171c2:	2800      	cmp	r0, #0
   171c4:	d033      	beq.n	1722e <update_ccc+0x8e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   171c6:	222a      	movs	r2, #42	; 0x2a
   171c8:	4629      	mov	r1, r5
   171ca:	4620      	mov	r0, r4
   171cc:	f00a ffe4 	bl	22198 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   171d0:	2803      	cmp	r0, #3
   171d2:	d02c      	beq.n	1722e <update_ccc+0x8e>
		gatt_ccc_changed(attr, ccc);
   171d4:	4631      	mov	r1, r6
   171d6:	4628      	mov	r0, r5
   171d8:	f00a fced 	bl	21bb6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   171dc:	4b16      	ldr	r3, [pc, #88]	; (17238 <update_ccc+0x98>)
   171de:	429e      	cmp	r6, r3
   171e0:	d125      	bne.n	1722e <update_ccc+0x8e>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   171e2:	7a20      	ldrb	r0, [r4, #8]
   171e4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   171e8:	f7ff fc18 	bl	16a1c <find_sc_cfg>
	if (!cfg) {
   171ec:	b1f8      	cbz	r0, 1722e <update_ccc+0x8e>
	if (!(cfg->data.start || cfg->data.end)) {
   171ee:	8902      	ldrh	r2, [r0, #8]
   171f0:	8943      	ldrh	r3, [r0, #10]
   171f2:	ea53 0102 	orrs.w	r1, r3, r2
   171f6:	d01a      	beq.n	1722e <update_ccc+0x8e>
	index = bt_conn_index(conn);
   171f8:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   171fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   171fe:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   17202:	f7fe fb7f 	bl	15904 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17206:	490d      	ldr	r1, [pc, #52]	; (1723c <update_ccc+0x9c>)
   17208:	4a0d      	ldr	r2, [pc, #52]	; (17240 <update_ccc+0xa0>)
   1720a:	2318      	movs	r3, #24
   1720c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17210:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17212:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17214:	4a0b      	ldr	r2, [pc, #44]	; (17244 <update_ccc+0xa4>)
   17216:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17218:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1721a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1721e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17220:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17222:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17226:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17228:	4620      	mov	r0, r4
   1722a:	f7ff fe25 	bl	16e78 <bt_gatt_indicate>
}
   1722e:	2001      	movs	r0, #1
   17230:	b002      	add	sp, #8
   17232:	bd70      	pop	{r4, r5, r6, pc}
   17234:	00021f25 	.word	0x00021f25
   17238:	200006d8 	.word	0x200006d8
   1723c:	20002580 	.word	0x20002580
   17240:	000242e8 	.word	0x000242e8
   17244:	0002208f 	.word	0x0002208f

00017248 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   17248:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1724a:	4a06      	ldr	r2, [pc, #24]	; (17264 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1724c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1724e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   17250:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   17252:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   17256:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1725a:	f00a ff90 	bl	2217e <bt_gatt_foreach_attr>
	if (err) {
		BT_WARN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1725e:	b003      	add	sp, #12
   17260:	f85d fb04 	ldr.w	pc, [sp], #4
   17264:	000171a1 	.word	0x000171a1

00017268 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   17268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1726a:	4b08      	ldr	r3, [pc, #32]	; (1728c <bt_gatt_att_max_mtu_changed+0x24>)
   1726c:	681c      	ldr	r4, [r3, #0]
   1726e:	4605      	mov	r5, r0
   17270:	460e      	mov	r6, r1
   17272:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   17274:	b14c      	cbz	r4, 1728a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   17276:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1727a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1727c:	b11b      	cbz	r3, 17286 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1727e:	463a      	mov	r2, r7
   17280:	4631      	mov	r1, r6
   17282:	4628      	mov	r0, r5
   17284:	4798      	blx	r3
	return node->next;
   17286:	6864      	ldr	r4, [r4, #4]
   17288:	e7f4      	b.n	17274 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1728c:	20002564 	.word	0x20002564

00017290 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   17290:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17292:	4603      	mov	r3, r0
   17294:	4a0f      	ldr	r2, [pc, #60]	; (172d4 <bt_gatt_disconnected+0x44>)
{
   17296:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   17298:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1729c:	2001      	movs	r0, #1
   1729e:	f00a ff6e 	bl	2217e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   172a2:	4620      	mov	r0, r4
   172a4:	f7ff fb9c 	bl	169e0 <find_cf_cfg>
	if (!cfg) {
   172a8:	4605      	mov	r5, r0
   172aa:	b188      	cbz	r0, 172d0 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   172ac:	f104 0688 	add.w	r6, r4, #136	; 0x88
   172b0:	7a20      	ldrb	r0, [r4, #8]
   172b2:	4631      	mov	r1, r6
   172b4:	f009 fbc3 	bl	20a3e <bt_addr_le_is_bonded>
   172b8:	b920      	cbnz	r0, 172c4 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   172ba:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   172bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   172c0:	f00a bda9 	b.w	21e16 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   172c4:	4631      	mov	r1, r6
   172c6:	1c68      	adds	r0, r5, #1
}
   172c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   172cc:	f00a bd0c 	b.w	21ce8 <bt_addr_le_copy>
}
   172d0:	bd70      	pop	{r4, r5, r6, pc}
   172d2:	bf00      	nop
   172d4:	00016a3d 	.word	0x00016a3d

000172d8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   172d8:	4b04      	ldr	r3, [pc, #16]	; (172ec <bt_smp_accept+0x14>)
   172da:	6818      	ldr	r0, [r3, #0]
   172dc:	b918      	cbnz	r0, 172e6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
   172de:	4a04      	ldr	r2, [pc, #16]	; (172f0 <bt_smp_accept+0x18>)
   172e0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
   172e2:	600b      	str	r3, [r1, #0]

		return 0;
   172e4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   172e6:	f06f 000b 	mvn.w	r0, #11
}
   172ea:	4770      	bx	lr
   172ec:	2000259c 	.word	0x2000259c
   172f0:	000243ec 	.word	0x000243ec

000172f4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   172f4:	4b02      	ldr	r3, [pc, #8]	; (17300 <net_buf_pool_get+0xc>)
   172f6:	222c      	movs	r2, #44	; 0x2c
   172f8:	fb02 3000 	mla	r0, r2, r0, r3
   172fc:	4770      	bx	lr
   172fe:	bf00      	nop
   17300:	20000a84 	.word	0x20000a84

00017304 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17304:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   17306:	4b06      	ldr	r3, [pc, #24]	; (17320 <net_buf_id+0x1c>)
   17308:	212c      	movs	r1, #44	; 0x2c
   1730a:	fb01 3302 	mla	r3, r1, r2, r3
   1730e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17310:	7f1b      	ldrb	r3, [r3, #28]
   17312:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   17314:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17316:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1731a:	fbb0 f0f3 	udiv	r0, r0, r3
   1731e:	4770      	bx	lr
   17320:	20000a84 	.word	0x20000a84

00017324 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   17324:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17326:	4b0a      	ldr	r3, [pc, #40]	; (17350 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   17328:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1732a:	242c      	movs	r4, #44	; 0x2c
   1732c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   17330:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   17332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   17334:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   17336:	6823      	ldr	r3, [r4, #0]
   17338:	429a      	cmp	r2, r3
   1733a:	bf94      	ite	ls
   1733c:	600a      	strls	r2, [r1, #0]
   1733e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   17340:	f7ff ffe0 	bl	17304 <net_buf_id>
   17344:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   17348:	fb02 3000 	mla	r0, r2, r0, r3
   1734c:	bd10      	pop	{r4, pc}
   1734e:	bf00      	nop
   17350:	20000a84 	.word	0x20000a84

00017354 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   17354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17358:	4605      	mov	r5, r0
   1735a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1735c:	4610      	mov	r0, r2
   1735e:	4619      	mov	r1, r3
{
   17360:	4691      	mov	r9, r2
   17362:	4698      	mov	r8, r3
   17364:	4617      	mov	r7, r2
   17366:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   17368:	f00c f867 	bl	2343a <sys_clock_timeout_end_calc>
   1736c:	4682      	mov	sl, r0
   1736e:	468b      	mov	fp, r1
	__asm__ volatile(
   17370:	f04f 0340 	mov.w	r3, #64	; 0x40
   17374:	f3ef 8111 	mrs	r1, BASEPRI
   17378:	f383 8812 	msr	BASEPRI_MAX, r3
   1737c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   17380:	8b6b      	ldrh	r3, [r5, #26]
   17382:	2b00      	cmp	r3, #0
   17384:	d05a      	beq.n	1743c <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   17386:	8b2a      	ldrh	r2, [r5, #24]
   17388:	429a      	cmp	r2, r3
   1738a:	d93e      	bls.n	1740a <net_buf_alloc_len+0xb6>
   1738c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1738e:	2200      	movs	r2, #0
   17390:	2300      	movs	r3, #0
   17392:	4628      	mov	r0, r5
   17394:	f003 fd9a 	bl	1aecc <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   17398:	9900      	ldr	r1, [sp, #0]
   1739a:	4604      	mov	r4, r0
   1739c:	2800      	cmp	r0, #0
   1739e:	d034      	beq.n	1740a <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   173a0:	f381 8811 	msr	BASEPRI, r1
   173a4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   173a8:	9b01      	ldr	r3, [sp, #4]
   173aa:	2b00      	cmp	r3, #0
   173ac:	d056      	beq.n	1745c <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   173ae:	ea58 0309 	orrs.w	r3, r8, r9
   173b2:	d00f      	beq.n	173d4 <net_buf_alloc_len+0x80>
   173b4:	f1b8 3fff 	cmp.w	r8, #4294967295
   173b8:	bf08      	it	eq
   173ba:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   173be:	d009      	beq.n	173d4 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   173c0:	f004 fc5c 	bl	1bc7c <sys_clock_tick_get>
   173c4:	ebba 0700 	subs.w	r7, sl, r0
   173c8:	eb6b 0601 	sbc.w	r6, fp, r1
   173cc:	2e00      	cmp	r6, #0
   173ce:	bfbc      	itt	lt
   173d0:	2700      	movlt	r7, #0
   173d2:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   173d4:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   173d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 17474 <net_buf_alloc_len+0x120>
   173da:	f04f 092c 	mov.w	r9, #44	; 0x2c
   173de:	fb09 8303 	mla	r3, r9, r3, r8
   173e2:	463a      	mov	r2, r7
   173e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   173e6:	681b      	ldr	r3, [r3, #0]
   173e8:	a901      	add	r1, sp, #4
   173ea:	681d      	ldr	r5, [r3, #0]
   173ec:	4620      	mov	r0, r4
   173ee:	4633      	mov	r3, r6
   173f0:	47a8      	blx	r5
   173f2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   173f4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   173f6:	2800      	cmp	r0, #0
   173f8:	d131      	bne.n	1745e <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   173fa:	79a0      	ldrb	r0, [r4, #6]
   173fc:	4621      	mov	r1, r4
   173fe:	fb00 8009 	mla	r0, r0, r9, r8
   17402:	f00b fd70 	bl	22ee6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   17406:	462c      	mov	r4, r5
}
   17408:	e024      	b.n	17454 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1740a:	8b68      	ldrh	r0, [r5, #26]
   1740c:	1e43      	subs	r3, r0, #1
   1740e:	836b      	strh	r3, [r5, #26]
   17410:	f381 8811 	msr	BASEPRI, r1
   17414:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   17418:	7f2a      	ldrb	r2, [r5, #28]
   1741a:	f102 0417 	add.w	r4, r2, #23
   1741e:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   17422:	8b2c      	ldrh	r4, [r5, #24]
   17424:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   17426:	6aac      	ldr	r4, [r5, #40]	; 0x28
   17428:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1742c:	4811      	ldr	r0, [pc, #68]	; (17474 <net_buf_alloc_len+0x120>)
   1742e:	4b12      	ldr	r3, [pc, #72]	; (17478 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   17430:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   17432:	1a2d      	subs	r5, r5, r0
   17434:	10ad      	asrs	r5, r5, #2
   17436:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   17438:	71a5      	strb	r5, [r4, #6]
		goto success;
   1743a:	e7b5      	b.n	173a8 <net_buf_alloc_len+0x54>
   1743c:	f381 8811 	msr	BASEPRI, r1
   17440:	f3bf 8f6f 	isb	sy
   17444:	464a      	mov	r2, r9
   17446:	4643      	mov	r3, r8
   17448:	4628      	mov	r0, r5
   1744a:	f003 fd3f 	bl	1aecc <z_impl_k_queue_get>
	if (!buf) {
   1744e:	4604      	mov	r4, r0
   17450:	2800      	cmp	r0, #0
   17452:	d1a9      	bne.n	173a8 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   17454:	4620      	mov	r0, r4
   17456:	b003      	add	sp, #12
   17458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1745c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1745e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   17460:	2201      	movs	r2, #1
	buf->frags = NULL;
   17462:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   17464:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   17466:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   17468:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1746a:	6923      	ldr	r3, [r4, #16]
   1746c:	81e2      	strh	r2, [r4, #14]
   1746e:	60a3      	str	r3, [r4, #8]
	return buf;
   17470:	e7f0      	b.n	17454 <net_buf_alloc_len+0x100>
   17472:	bf00      	nop
   17474:	20000a84 	.word	0x20000a84
   17478:	ba2e8ba3 	.word	0xba2e8ba3

0001747c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17480:	4d16      	ldr	r5, [pc, #88]	; (174dc <net_buf_unref+0x60>)
   17482:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   17484:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   17486:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   17488:	b90c      	cbnz	r4, 1748e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1748a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1748e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   17490:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   17494:	3b01      	subs	r3, #1
   17496:	b2db      	uxtb	r3, r3
   17498:	7123      	strb	r3, [r4, #4]
   1749a:	2b00      	cmp	r3, #0
   1749c:	d1f5      	bne.n	1748a <net_buf_unref+0xe>
		if (buf->__buf) {
   1749e:	6921      	ldr	r1, [r4, #16]
   174a0:	b159      	cbz	r1, 174ba <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   174a2:	7963      	ldrb	r3, [r4, #5]
   174a4:	079b      	lsls	r3, r3, #30
   174a6:	d407      	bmi.n	174b8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   174a8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   174aa:	fb07 5303 	mla	r3, r7, r3, r5
   174ae:	4620      	mov	r0, r4
   174b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	689b      	ldr	r3, [r3, #8]
   174b6:	4798      	blx	r3
			buf->__buf = NULL;
   174b8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   174ba:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   174bc:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   174be:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   174c2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   174c4:	6a1b      	ldr	r3, [r3, #32]
   174c6:	b11b      	cbz	r3, 174d0 <net_buf_unref+0x54>
			pool->destroy(buf);
   174c8:	4620      	mov	r0, r4
   174ca:	4798      	blx	r3
{
   174cc:	4644      	mov	r4, r8
   174ce:	e7db      	b.n	17488 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   174d0:	4621      	mov	r1, r4
   174d2:	fb00 5007 	mla	r0, r0, r7, r5
   174d6:	f00b fd06 	bl	22ee6 <k_queue_prepend>
}
   174da:	e7f7      	b.n	174cc <net_buf_unref+0x50>
   174dc:	20000a84 	.word	0x20000a84

000174e0 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   174e0:	7908      	ldrb	r0, [r1, #4]
{
   174e2:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   174e4:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   174e8:	2c07      	cmp	r4, #7
   174ea:	d81f      	bhi.n	1752c <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   174ec:	780b      	ldrb	r3, [r1, #0]
   174ee:	2b09      	cmp	r3, #9
   174f0:	d81c      	bhi.n	1752c <adc_nrfx_channel_setup+0x4c>
   174f2:	e8df f003 	tbb	[pc, r3]
   174f6:	0606      	.short	0x0606
   174f8:	1b060606 	.word	0x1b060606
   174fc:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   17500:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   17502:	784a      	ldrb	r2, [r1, #1]
   17504:	2a03      	cmp	r2, #3
   17506:	d018      	beq.n	1753a <adc_nrfx_channel_setup+0x5a>
   17508:	2a04      	cmp	r2, #4
   1750a:	d10f      	bne.n	1752c <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   1750c:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   1750e:	884a      	ldrh	r2, [r1, #2]
   17510:	f244 060a 	movw	r6, #16394	; 0x400a
   17514:	42b2      	cmp	r2, r6
   17516:	d044      	beq.n	175a2 <adc_nrfx_channel_setup+0xc2>
   17518:	d811      	bhi.n	1753e <adc_nrfx_channel_setup+0x5e>
   1751a:	f244 0603 	movw	r6, #16387	; 0x4003
   1751e:	42b2      	cmp	r2, r6
   17520:	d03b      	beq.n	1759a <adc_nrfx_channel_setup+0xba>
   17522:	f244 0605 	movw	r6, #16389	; 0x4005
   17526:	42b2      	cmp	r2, r6
   17528:	d039      	beq.n	1759e <adc_nrfx_channel_setup+0xbe>
   1752a:	b3d2      	cbz	r2, 175a2 <adc_nrfx_channel_setup+0xc2>
   1752c:	f06f 0015 	mvn.w	r0, #21
   17530:	e032      	b.n	17598 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   17532:	2306      	movs	r3, #6
		break;
   17534:	e7e5      	b.n	17502 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   17536:	2307      	movs	r3, #7
		break;
   17538:	e7e3      	b.n	17502 <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   1753a:	2501      	movs	r5, #1
   1753c:	e7e7      	b.n	1750e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   1753e:	f244 0614 	movw	r6, #16404	; 0x4014
   17542:	42b2      	cmp	r2, r6
   17544:	d02f      	beq.n	175a6 <adc_nrfx_channel_setup+0xc6>
   17546:	f244 0628 	movw	r6, #16424	; 0x4028
   1754a:	42b2      	cmp	r2, r6
   1754c:	d02d      	beq.n	175aa <adc_nrfx_channel_setup+0xca>
   1754e:	f244 060f 	movw	r6, #16399	; 0x400f
   17552:	42b2      	cmp	r2, r6
   17554:	d1ea      	bne.n	1752c <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   17556:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   17558:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1755c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1755e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   17562:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   17566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1756a:	0122      	lsls	r2, r4, #4
   1756c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   17570:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   17574:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   17576:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1757a:	0123      	lsls	r3, r4, #4
   1757c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17580:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   17584:	798a      	ldrb	r2, [r1, #6]
   17586:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1758a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1758e:	4b08      	ldr	r3, [pc, #32]	; (175b0 <adc_nrfx_channel_setup+0xd0>)
   17590:	441c      	add	r4, r3
   17592:	794b      	ldrb	r3, [r1, #5]
   17594:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8

	return 0;
}
   17598:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   1759a:	2200      	movs	r2, #0
   1759c:	e7dc      	b.n	17558 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   1759e:	2201      	movs	r2, #1
   175a0:	e7da      	b.n	17558 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   175a2:	2202      	movs	r2, #2
   175a4:	e7d8      	b.n	17558 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   175a6:	2204      	movs	r2, #4
   175a8:	e7d6      	b.n	17558 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   175aa:	2205      	movs	r2, #5
   175ac:	e7d4      	b.n	17558 <adc_nrfx_channel_setup+0x78>
   175ae:	bf00      	nop
   175b0:	20000468 	.word	0x20000468

000175b4 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   175b4:	4b04      	ldr	r3, [pc, #16]	; (175c8 <adc_context_start_sampling.isra.0+0x14>)
   175b6:	2201      	movs	r2, #1
   175b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   175bc:	b108      	cbz	r0, 175c2 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175be:	60da      	str	r2, [r3, #12]
}
   175c0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175c2:	601a      	str	r2, [r3, #0]
   175c4:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   175c6:	4770      	bx	lr
   175c8:	40007000 	.word	0x40007000

000175cc <start_read.constprop.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
   175cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   175ce:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
   175d0:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
   175d2:	b910      	cbnz	r0, 175da <start_read.constprop.0+0xe>
	switch (sequence->resolution) {
   175d4:	f06f 0015 	mvn.w	r0, #21
   175d8:	e09d      	b.n	17716 <start_read.constprop.0+0x14a>
	if (!selected_channels ||
   175da:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   175de:	d1f9      	bne.n	175d4 <start_read.constprop.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
   175e0:	4c57      	ldr	r4, [pc, #348]	; (17740 <start_read.constprop.0+0x174>)
	do {
		if (selected_channels & BIT(channel_id)) {
			/* Signal an error if a selected channel has not been
			 * configured yet.
			 */
			if (m_data.positive_inputs[channel_id] == 0U) {
   175e2:	4f58      	ldr	r7, [pc, #352]	; (17744 <start_read.constprop.0+0x178>)
	active_channels = 0U;
   175e4:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   175e6:	fa20 f103 	lsr.w	r1, r0, r3
   175ea:	f011 0101 	ands.w	r1, r1, #1
   175ee:	d033      	beq.n	17658 <start_read.constprop.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
   175f0:	18f9      	adds	r1, r7, r3
   175f2:	f891 c0a8 	ldrb.w	ip, [r1, #168]	; 0xa8
   175f6:	f1bc 0f00 	cmp.w	ip, #0
   175fa:	d0eb      	beq.n	175d4 <start_read.constprop.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   175fc:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			 * event is not generated) after switching to a single
			 * channel sampling and back. Thus, when oversampling
			 * is not used (hence, the multiple channel sampling is
			 * possible), the burst mode have to be deactivated.
			 */
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   17600:	7c6e      	ldrb	r6, [r5, #17]
   17602:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   17606:	3e00      	subs	r6, #0
   17608:	bf18      	it	ne
   1760a:	2601      	movne	r6, #1
   1760c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   17610:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   17614:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   17618:	f103 0151 	add.w	r1, r3, #81	; 0x51
   1761c:	0109      	lsls	r1, r1, #4
					NRF_SAADC_BURST_DISABLED));
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				m_data.positive_inputs[channel_id]);
			++active_channels;
   1761e:	3201      	adds	r2, #1
   17620:	f844 c001 	str.w	ip, [r4, r1]
   17624:	b2d2      	uxtb	r2, r2
			nrf_saadc_channel_pos_input_set(
				NRF_SAADC,
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);
   17626:	3301      	adds	r3, #1
   17628:	2b08      	cmp	r3, #8
   1762a:	d1dc      	bne.n	175e6 <start_read.constprop.0+0x1a>
	switch (sequence->resolution) {
   1762c:	7c2b      	ldrb	r3, [r5, #16]
   1762e:	3b08      	subs	r3, #8
   17630:	2b06      	cmp	r3, #6
   17632:	d8cf      	bhi.n	175d4 <start_read.constprop.0+0x8>
   17634:	a101      	add	r1, pc, #4	; (adr r1, 1763c <start_read.constprop.0+0x70>)
   17636:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1763a:	bf00      	nop
   1763c:	00017723 	.word	0x00017723
   17640:	000175d5 	.word	0x000175d5
   17644:	00017663 	.word	0x00017663
   17648:	000175d5 	.word	0x000175d5
   1764c:	0001771b 	.word	0x0001771b
   17650:	000175d5 	.word	0x000175d5
   17654:	0001771f 	.word	0x0001771f
   17658:	f103 0651 	add.w	r6, r3, #81	; 0x51
   1765c:	0136      	lsls	r6, r6, #4
   1765e:	51a1      	str	r1, [r4, r6]
}
   17660:	e7e1      	b.n	17626 <start_read.constprop.0+0x5a>
   17662:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   17664:	4936      	ldr	r1, [pc, #216]	; (17740 <start_read.constprop.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   17666:	2a01      	cmp	r2, #1
   17668:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_resolution(sequence);
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
   1766c:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1766e:	d95a      	bls.n	17726 <start_read.constprop.0+0x15a>
   17670:	2b00      	cmp	r3, #0
   17672:	d1af      	bne.n	175d4 <start_read.constprop.0+0x8>
    p_reg->OVERSAMPLE = oversample;
   17674:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   17678:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1767a:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1767c:	b111      	cbz	r1, 17684 <start_read.constprop.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1767e:	8989      	ldrh	r1, [r1, #12]
   17680:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   17684:	68e9      	ldr	r1, [r5, #12]
   17686:	4299      	cmp	r1, r3
   17688:	d357      	bcc.n	1773a <start_read.constprop.0+0x16e>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1768a:	4b2d      	ldr	r3, [pc, #180]	; (17740 <start_read.constprop.0+0x174>)
   1768c:	68a9      	ldr	r1, [r5, #8]
   1768e:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   17692:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   17694:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   17698:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1769a:	4c2a      	ldr	r4, [pc, #168]	; (17744 <start_read.constprop.0+0x178>)
   1769c:	f104 067c 	add.w	r6, r4, #124	; 0x7c
   176a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   176a2:	683b      	ldr	r3, [r7, #0]
   176a4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   176a6:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   176a8:	2600      	movs	r6, #0
   176aa:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   176ac:	4627      	mov	r7, r4
   176ae:	2b00      	cmp	r3, #0
   176b0:	d03c      	beq.n	1772c <start_read.constprop.0+0x160>
		ctx->options = *sequence->options;
   176b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   176b4:	f104 0590 	add.w	r5, r4, #144	; 0x90
   176b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   176bc:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
   176be:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
   176c2:	b398      	cbz	r0, 1772c <start_read.constprop.0+0x160>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   176c4:	f3bf 8f5b 	dmb	ish
   176c8:	e857 3f00 	ldrex	r3, [r7]
   176cc:	e847 6200 	strex	r2, r6, [r7]
   176d0:	2a00      	cmp	r2, #0
   176d2:	d1f9      	bne.n	176c8 <start_read.constprop.0+0xfc>
   176d4:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
   176d8:	481b      	ldr	r0, [pc, #108]	; (17748 <start_read.constprop.0+0x17c>)
   176da:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
   176de:	4a1b      	ldr	r2, [pc, #108]	; (1774c <start_read.constprop.0+0x180>)
   176e0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   176e4:	4631      	mov	r1, r6
   176e6:	2300      	movs	r3, #0
   176e8:	fbe7 0105 	umlal	r0, r1, r7, r5
   176ec:	f7e9 fbb6 	bl	e5c <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   176f0:	2200      	movs	r2, #0
   176f2:	e9cd 0100 	strd	r0, r1, [sp]
   176f6:	2300      	movs	r3, #0
   176f8:	f104 0008 	add.w	r0, r4, #8
   176fc:	f004 fb1c 	bl	1bd38 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
   17700:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17704:	b9bb      	cbnz	r3, 17736 <start_read.constprop.0+0x16a>
	return z_impl_k_sem_take(sem, timeout);
   17706:	4812      	ldr	r0, [pc, #72]	; (17750 <start_read.constprop.0+0x184>)
   17708:	f04f 32ff 	mov.w	r2, #4294967295
   1770c:	f04f 33ff 	mov.w	r3, #4294967295
   17710:	f003 fc36 	bl	1af80 <z_impl_k_sem_take>
	return ctx->status;
   17714:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
   17716:	b003      	add	sp, #12
   17718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1771a:	2302      	movs	r3, #2
		break;
   1771c:	e7a2      	b.n	17664 <start_read.constprop.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1771e:	2303      	movs	r3, #3
		break;
   17720:	e7a0      	b.n	17664 <start_read.constprop.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   17722:	2300      	movs	r3, #0
   17724:	e79e      	b.n	17664 <start_read.constprop.0+0x98>
	switch (sequence->oversampling) {
   17726:	2b08      	cmp	r3, #8
   17728:	d9a4      	bls.n	17674 <start_read.constprop.0+0xa8>
   1772a:	e753      	b.n	175d4 <start_read.constprop.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1772c:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
   17730:	f7ff ff40 	bl	175b4 <adc_context_start_sampling.isra.0>
   17734:	e7e4      	b.n	17700 <start_read.constprop.0+0x134>
		return 0;
   17736:	2000      	movs	r0, #0
	return error;
   17738:	e7ed      	b.n	17716 <start_read.constprop.0+0x14a>
		return -ENOMEM;
   1773a:	f06f 000b 	mvn.w	r0, #11
   1773e:	e7ea      	b.n	17716 <start_read.constprop.0+0x14a>
   17740:	40007000 	.word	0x40007000
   17744:	20000468 	.word	0x20000468
   17748:	000f423f 	.word	0x000f423f
   1774c:	000f4240 	.word	0x000f4240
   17750:	200004c0 	.word	0x200004c0

00017754 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
   17754:	b570      	push	{r4, r5, r6, lr}
   17756:	460c      	mov	r4, r1
   17758:	4616      	mov	r6, r2
   1775a:	4d0d      	ldr	r5, [pc, #52]	; (17790 <adc_nrfx_read_async+0x3c>)
   1775c:	f04f 32ff 	mov.w	r2, #4294967295
   17760:	f04f 33ff 	mov.w	r3, #4294967295
   17764:	f105 0040 	add.w	r0, r5, #64	; 0x40
   17768:	f003 fc0a 	bl	1af80 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   1776c:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
   1776e:	4620      	mov	r0, r4
   17770:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   17774:	676e      	str	r6, [r5, #116]	; 0x74
   17776:	f7ff ff29 	bl	175cc <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   1777a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   1777e:	4604      	mov	r4, r0
   17780:	b103      	cbz	r3, 17784 <adc_nrfx_read_async+0x30>
   17782:	b110      	cbz	r0, 1778a <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
   17784:	4803      	ldr	r0, [pc, #12]	; (17794 <adc_nrfx_read_async+0x40>)
   17786:	f003 fbd5 	bl	1af34 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1778a:	4620      	mov	r0, r4
   1778c:	bd70      	pop	{r4, r5, r6, pc}
   1778e:	bf00      	nop
   17790:	20000468 	.word	0x20000468
   17794:	200004a8 	.word	0x200004a8

00017798 <adc_nrfx_read>:
{
   17798:	b538      	push	{r3, r4, r5, lr}
   1779a:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
   1779c:	4d0c      	ldr	r5, [pc, #48]	; (177d0 <adc_nrfx_read+0x38>)
   1779e:	f04f 32ff 	mov.w	r2, #4294967295
   177a2:	f04f 33ff 	mov.w	r3, #4294967295
   177a6:	f105 0040 	add.w	r0, r5, #64	; 0x40
   177aa:	f003 fbe9 	bl	1af80 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   177ae:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
   177b0:	4620      	mov	r0, r4
   177b2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
   177b6:	676b      	str	r3, [r5, #116]	; 0x74
   177b8:	f7ff ff08 	bl	175cc <start_read.constprop.0>
	if (ctx->asynchronous && (status == 0)) {
   177bc:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
   177c0:	4604      	mov	r4, r0
   177c2:	b103      	cbz	r3, 177c6 <adc_nrfx_read+0x2e>
   177c4:	b110      	cbz	r0, 177cc <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
   177c6:	4803      	ldr	r0, [pc, #12]	; (177d4 <adc_nrfx_read+0x3c>)
   177c8:	f003 fbb4 	bl	1af34 <z_impl_k_sem_give>
}
   177cc:	4620      	mov	r0, r4
   177ce:	bd38      	pop	{r3, r4, r5, pc}
   177d0:	20000468 	.word	0x20000468
   177d4:	200004a8 	.word	0x200004a8

000177d8 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   177d8:	4b0e      	ldr	r3, [pc, #56]	; (17814 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   177da:	b510      	push	{r4, lr}
   177dc:	2400      	movs	r4, #0
   177de:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   177e2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   177e6:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   177ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   177ee:	2212      	movs	r2, #18
   177f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   177f4:	2007      	movs	r0, #7
   177f6:	f7fb febd 	bl	13574 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   177fa:	4622      	mov	r2, r4
   177fc:	2101      	movs	r1, #1
   177fe:	2007      	movs	r0, #7
   17800:	f7fb feea 	bl	135d8 <z_arm_irq_priority_set>
	return sem->count;
   17804:	4804      	ldr	r0, [pc, #16]	; (17818 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   17806:	6c83      	ldr	r3, [r0, #72]	; 0x48
   17808:	b913      	cbnz	r3, 17810 <init_saadc+0x38>
   1780a:	3040      	adds	r0, #64	; 0x40
   1780c:	f003 fb92 	bl	1af34 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   17810:	2000      	movs	r0, #0
   17812:	bd10      	pop	{r4, pc}
   17814:	40007000 	.word	0x40007000
   17818:	20000468 	.word	0x20000468

0001781c <saadc_irq_handler>:
{
   1781c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1781e:	4b35      	ldr	r3, [pc, #212]	; (178f4 <saadc_irq_handler+0xd8>)
   17820:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   17824:	2a00      	cmp	r2, #0
   17826:	d057      	beq.n	178d8 <saadc_irq_handler+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17828:	2200      	movs	r2, #0
   1782a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1782e:	4c32      	ldr	r4, [pc, #200]	; (178f8 <saadc_irq_handler+0xdc>)
   17830:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17834:	2101      	movs	r1, #1
   17836:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   17838:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1783c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1783e:	4625      	mov	r5, r4
   17840:	b3db      	cbz	r3, 178ba <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   17842:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   17846:	b143      	cbz	r3, 1785a <saadc_irq_handler+0x3e>
			action = callback(dev,
   17848:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1784c:	f104 017c 	add.w	r1, r4, #124	; 0x7c
   17850:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   17852:	2801      	cmp	r0, #1
   17854:	d014      	beq.n	17880 <saadc_irq_handler+0x64>
   17856:	2802      	cmp	r0, #2
   17858:	d029      	beq.n	178ae <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1785a:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1785e:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
   17862:	429a      	cmp	r2, r3
   17864:	d923      	bls.n	178ae <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   17866:	3301      	adds	r3, #1
   17868:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1786c:	4b21      	ldr	r3, [pc, #132]	; (178f4 <saadc_irq_handler+0xd8>)
   1786e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   17872:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   17876:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   17878:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1787c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   17880:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   17884:	b92b      	cbnz	r3, 17892 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   17886:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
   1788a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1788e:	f7ff be91 	b.w	175b4 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   17892:	f3bf 8f5b 	dmb	ish
   17896:	e855 3f00 	ldrex	r3, [r5]
   1789a:	1e5a      	subs	r2, r3, #1
   1789c:	e845 2100 	strex	r1, r2, [r5]
   178a0:	2900      	cmp	r1, #0
   178a2:	d1f8      	bne.n	17896 <saadc_irq_handler+0x7a>
   178a4:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   178a8:	2b01      	cmp	r3, #1
   178aa:	dcec      	bgt.n	17886 <saadc_irq_handler+0x6a>
   178ac:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   178ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   178b2:	b113      	cbz	r3, 178ba <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   178b4:	4811      	ldr	r0, [pc, #68]	; (178fc <saadc_irq_handler+0xe0>)
   178b6:	f00b fdeb 	bl	23490 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
   178ba:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   178be:	b14b      	cbz	r3, 178d4 <saadc_irq_handler+0xb8>
		if (ctx->signal) {
   178c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
   178c2:	b110      	cbz	r0, 178ca <saadc_irq_handler+0xae>
	return z_impl_k_poll_signal_raise(sig, result);
   178c4:	2100      	movs	r1, #0
   178c6:	f004 fae5 	bl	1be94 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
   178ca:	480d      	ldr	r0, [pc, #52]	; (17900 <saadc_irq_handler+0xe4>)
   178cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   178d0:	f003 bb30 	b.w	1af34 <z_impl_k_sem_give>
   178d4:	480b      	ldr	r0, [pc, #44]	; (17904 <saadc_irq_handler+0xe8>)
   178d6:	e7f9      	b.n	178cc <saadc_irq_handler+0xb0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   178d8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   178dc:	2900      	cmp	r1, #0
   178de:	d0e5      	beq.n	178ac <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   178e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   178e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   178e8:	2201      	movs	r2, #1
   178ea:	609a      	str	r2, [r3, #8]
   178ec:	601a      	str	r2, [r3, #0]
   178ee:	605a      	str	r2, [r3, #4]
}
   178f0:	e7dc      	b.n	178ac <saadc_irq_handler+0x90>
   178f2:	bf00      	nop
   178f4:	40007000 	.word	0x40007000
   178f8:	20000468 	.word	0x20000468
   178fc:	20000470 	.word	0x20000470
   17900:	200004a8 	.word	0x200004a8
   17904:	200004c0 	.word	0x200004c0

00017908 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   17908:	4b08      	ldr	r3, [pc, #32]	; (1792c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1790a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1790c:	1ac3      	subs	r3, r0, r3
{
   1790e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17910:	4907      	ldr	r1, [pc, #28]	; (17930 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   17912:	109b      	asrs	r3, r3, #2
{
   17914:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17916:	4359      	muls	r1, r3
   17918:	4806      	ldr	r0, [pc, #24]	; (17934 <onoff_stop+0x2c>)
   1791a:	2240      	movs	r2, #64	; 0x40
   1791c:	f00a fe20 	bl	22560 <stop>
	notify(mgr, res);
   17920:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   17922:	4601      	mov	r1, r0
	notify(mgr, res);
   17924:	4620      	mov	r0, r4
}
   17926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1792a:	4718      	bx	r3
   1792c:	20002638 	.word	0x20002638
   17930:	b6db6db7 	.word	0xb6db6db7
   17934:	00023958 	.word	0x00023958

00017938 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   17938:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1793a:	4c0c      	ldr	r4, [pc, #48]	; (1796c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1793c:	4a0c      	ldr	r2, [pc, #48]	; (17970 <onoff_start+0x38>)
   1793e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   17940:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17942:	9300      	str	r3, [sp, #0]
{
   17944:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17946:	460b      	mov	r3, r1
   17948:	490a      	ldr	r1, [pc, #40]	; (17974 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1794a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1794c:	4361      	muls	r1, r4
{
   1794e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   17950:	4809      	ldr	r0, [pc, #36]	; (17978 <onoff_start+0x40>)
   17952:	f00a fe31 	bl	225b8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   17956:	1e01      	subs	r1, r0, #0
   17958:	da05      	bge.n	17966 <onoff_start+0x2e>
		notify(mgr, err);
   1795a:	4630      	mov	r0, r6
   1795c:	462b      	mov	r3, r5
	}
}
   1795e:	b002      	add	sp, #8
   17960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   17964:	4718      	bx	r3
}
   17966:	b002      	add	sp, #8
   17968:	bd70      	pop	{r4, r5, r6, pc}
   1796a:	bf00      	nop
   1796c:	20002638 	.word	0x20002638
   17970:	00022629 	.word	0x00022629
   17974:	b6db6db7 	.word	0xb6db6db7
   17978:	00023958 	.word	0x00023958

0001797c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1797c:	2200      	movs	r2, #0
{
   1797e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17980:	2101      	movs	r1, #1
{
   17982:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   17984:	4610      	mov	r0, r2
   17986:	f7fb fe27 	bl	135d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1798a:	480f      	ldr	r0, [pc, #60]	; (179c8 <clk_init+0x4c>)
   1798c:	f001 fef4 	bl	19778 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   17990:	4b0e      	ldr	r3, [pc, #56]	; (179cc <clk_init+0x50>)
   17992:	4298      	cmp	r0, r3
   17994:	d115      	bne.n	179c2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   17996:	f00b f822 	bl	229de <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1799a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1799c:	490c      	ldr	r1, [pc, #48]	; (179d0 <clk_init+0x54>)
   1799e:	4630      	mov	r0, r6
   179a0:	f008 f87b 	bl	1fa9a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   179a4:	2800      	cmp	r0, #0
   179a6:	db0b      	blt.n	179c0 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
   179a8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   179aa:	4909      	ldr	r1, [pc, #36]	; (179d0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   179ac:	2501      	movs	r5, #1
   179ae:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   179b0:	f104 001c 	add.w	r0, r4, #28
   179b4:	f008 f871 	bl	1fa9a <onoff_manager_init>
		if (err < 0) {
   179b8:	2800      	cmp	r0, #0
   179ba:	db01      	blt.n	179c0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   179bc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   179be:	2000      	movs	r0, #0
}
   179c0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   179c2:	f06f 0004 	mvn.w	r0, #4
   179c6:	e7fb      	b.n	179c0 <clk_init+0x44>
   179c8:	00017a09 	.word	0x00017a09
   179cc:	0bad0000 	.word	0x0bad0000
   179d0:	00024454 	.word	0x00024454

000179d4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   179d4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   179d6:	230c      	movs	r3, #12
   179d8:	4809      	ldr	r0, [pc, #36]	; (17a00 <clkstarted_handle.constprop.0+0x2c>)
   179da:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   179dc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   179de:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   179e0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   179e4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   179e6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   179e8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   179ea:	4418      	add	r0, r3
   179ec:	f00a fda5 	bl	2253a <set_on_state>
	if (callback) {
   179f0:	b12d      	cbz	r5, 179fe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   179f2:	4632      	mov	r2, r6
   179f4:	462b      	mov	r3, r5
   179f6:	4803      	ldr	r0, [pc, #12]	; (17a04 <clkstarted_handle.constprop.0+0x30>)
}
   179f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   179fc:	4718      	bx	r3
}
   179fe:	bd70      	pop	{r4, r5, r6, pc}
   17a00:	20002638 	.word	0x20002638
   17a04:	00023958 	.word	0x00023958

00017a08 <clock_event_handler>:
	switch (event) {
   17a08:	b110      	cbz	r0, 17a10 <clock_event_handler+0x8>
   17a0a:	2801      	cmp	r0, #1
   17a0c:	d004      	beq.n	17a18 <clock_event_handler+0x10>
   17a0e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   17a10:	4b03      	ldr	r3, [pc, #12]	; (17a20 <clock_event_handler+0x18>)
   17a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17a14:	075b      	lsls	r3, r3, #29
   17a16:	d101      	bne.n	17a1c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   17a18:	f7ff bfdc 	b.w	179d4 <clkstarted_handle.constprop.0>
}
   17a1c:	4770      	bx	lr
   17a1e:	bf00      	nop
   17a20:	20002638 	.word	0x20002638

00017a24 <generic_hfclk_start>:
{
   17a24:	b508      	push	{r3, lr}
	__asm__ volatile(
   17a26:	f04f 0340 	mov.w	r3, #64	; 0x40
   17a2a:	f3ef 8111 	mrs	r1, BASEPRI
   17a2e:	f383 8812 	msr	BASEPRI_MAX, r3
   17a32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   17a36:	4a12      	ldr	r2, [pc, #72]	; (17a80 <generic_hfclk_start+0x5c>)
   17a38:	6813      	ldr	r3, [r2, #0]
   17a3a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   17a3e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   17a42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   17a44:	d00c      	beq.n	17a60 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17a4a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17a4e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   17a52:	f013 0301 	ands.w	r3, r3, #1
   17a56:	d003      	beq.n	17a60 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   17a58:	480a      	ldr	r0, [pc, #40]	; (17a84 <generic_hfclk_start+0x60>)
   17a5a:	f00a fd6e 	bl	2253a <set_on_state>
			already_started = true;
   17a5e:	2301      	movs	r3, #1
	__asm__ volatile(
   17a60:	f381 8811 	msr	BASEPRI, r1
   17a64:	f3bf 8f6f 	isb	sy
	if (already_started) {
   17a68:	b123      	cbz	r3, 17a74 <generic_hfclk_start+0x50>
}
   17a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   17a6e:	2000      	movs	r0, #0
   17a70:	f7ff bfb0 	b.w	179d4 <clkstarted_handle.constprop.0>
}
   17a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   17a78:	2001      	movs	r0, #1
   17a7a:	f001 be6d 	b.w	19758 <nrfx_clock_start>
   17a7e:	bf00      	nop
   17a80:	20002688 	.word	0x20002688
   17a84:	20002678 	.word	0x20002678

00017a88 <api_blocking_start>:
{
   17a88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17a8a:	2200      	movs	r2, #0
   17a8c:	2301      	movs	r3, #1
   17a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   17a92:	ab04      	add	r3, sp, #16
   17a94:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17a98:	4a09      	ldr	r2, [pc, #36]	; (17ac0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17a9a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17a9e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   17aa0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   17aa4:	f00a fdb9 	bl	2261a <api_start>
	if (err < 0) {
   17aa8:	2800      	cmp	r0, #0
   17aaa:	db05      	blt.n	17ab8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   17aac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17ab0:	2300      	movs	r3, #0
   17ab2:	4668      	mov	r0, sp
   17ab4:	f003 fa64 	bl	1af80 <z_impl_k_sem_take>
}
   17ab8:	b007      	add	sp, #28
   17aba:	f85d fb04 	ldr.w	pc, [sp], #4
   17abe:	bf00      	nop
   17ac0:	00022647 	.word	0x00022647

00017ac4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17ac4:	4b09      	ldr	r3, [pc, #36]	; (17aec <generic_hfclk_stop+0x28>)
   17ac6:	f3bf 8f5b 	dmb	ish
   17aca:	e853 2f00 	ldrex	r2, [r3]
   17ace:	f022 0102 	bic.w	r1, r2, #2
   17ad2:	e843 1000 	strex	r0, r1, [r3]
   17ad6:	2800      	cmp	r0, #0
   17ad8:	d1f7      	bne.n	17aca <generic_hfclk_stop+0x6>
   17ada:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   17ade:	07d3      	lsls	r3, r2, #31
   17ae0:	d402      	bmi.n	17ae8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   17ae2:	2001      	movs	r0, #1
   17ae4:	f00a bf76 	b.w	229d4 <nrfx_clock_stop>
}
   17ae8:	4770      	bx	lr
   17aea:	bf00      	nop
   17aec:	20002688 	.word	0x20002688

00017af0 <z_nrf_clock_control_lf_on>:
{
   17af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17af2:	4928      	ldr	r1, [pc, #160]	; (17b94 <z_nrf_clock_control_lf_on+0xa4>)
   17af4:	f3bf 8f5b 	dmb	ish
   17af8:	4606      	mov	r6, r0
   17afa:	2201      	movs	r2, #1
   17afc:	e851 3f00 	ldrex	r3, [r1]
   17b00:	e841 2000 	strex	r0, r2, [r1]
   17b04:	2800      	cmp	r0, #0
   17b06:	d1f9      	bne.n	17afc <z_nrf_clock_control_lf_on+0xc>
   17b08:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   17b0c:	b933      	cbnz	r3, 17b1c <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   17b0e:	4922      	ldr	r1, [pc, #136]	; (17b98 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
   17b10:	4822      	ldr	r0, [pc, #136]	; (17b9c <z_nrf_clock_control_lf_on+0xac>)
   17b12:	604b      	str	r3, [r1, #4]
   17b14:	60cb      	str	r3, [r1, #12]
   17b16:	608a      	str	r2, [r1, #8]
   17b18:	f007 ffd2 	bl	1fac0 <onoff_request>
	switch (start_mode) {
   17b1c:	1e73      	subs	r3, r6, #1
   17b1e:	2b01      	cmp	r3, #1
   17b20:	d820      	bhi.n	17b64 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   17b22:	f00b f938 	bl	22d96 <k_is_in_isr>
   17b26:	4604      	mov	r4, r0
   17b28:	b910      	cbnz	r0, 17b30 <z_nrf_clock_control_lf_on+0x40>
	return !z_sys_post_kernel;
   17b2a:	4b1d      	ldr	r3, [pc, #116]	; (17ba0 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
   17b2c:	781b      	ldrb	r3, [r3, #0]
   17b2e:	bb53      	cbnz	r3, 17b86 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
   17b30:	f04f 0340 	mov.w	r3, #64	; 0x40
   17b34:	f3ef 8511 	mrs	r5, BASEPRI
   17b38:	f383 8812 	msr	BASEPRI_MAX, r3
   17b3c:	f3bf 8f6f 	isb	sy
   17b40:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   17b42:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   17b46:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   17b4a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
   17b4e:	03d2      	lsls	r2, r2, #15
   17b50:	d509      	bpl.n	17b66 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   17b52:	079b      	lsls	r3, r3, #30
   17b54:	d001      	beq.n	17b5a <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   17b56:	2e01      	cmp	r6, #1
   17b58:	d105      	bne.n	17b66 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
   17b5a:	b174      	cbz	r4, 17b7a <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
   17b5c:	f385 8811 	msr	BASEPRI, r5
   17b60:	f3bf 8f6f 	isb	sy
}
   17b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   17b66:	b11c      	cbz	r4, 17b70 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   17b68:	4628      	mov	r0, r5
   17b6a:	f7fb fcf9 	bl	13560 <arch_cpu_atomic_idle>
}
   17b6e:	e7ea      	b.n	17b46 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
   17b70:	2100      	movs	r1, #0
   17b72:	2021      	movs	r0, #33	; 0x21
   17b74:	f003 fec4 	bl	1b900 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   17b78:	e7e5      	b.n	17b46 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
   17b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b7e:	2202      	movs	r2, #2
   17b80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17b84:	e7ee      	b.n	17b64 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
   17b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b8a:	2202      	movs	r2, #2
   17b8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   17b90:	4605      	mov	r5, r0
}
   17b92:	e7d6      	b.n	17b42 <z_nrf_clock_control_lf_on+0x52>
   17b94:	2000268c 	.word	0x2000268c
   17b98:	20002628 	.word	0x20002628
   17b9c:	20002654 	.word	0x20002654
   17ba0:	20003dc8 	.word	0x20003dc8

00017ba4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   17ba4:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   17ba6:	4c04      	ldr	r4, [pc, #16]	; (17bb8 <rtt_console_init+0x14>)
   17ba8:	4620      	mov	r0, r4
   17baa:	f7fa fa65 	bl	12078 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   17bae:	4620      	mov	r0, r4
   17bb0:	f7fc f880 	bl	13cb4 <__stdout_hook_install>

	return 0;
}
   17bb4:	2000      	movs	r0, #0
   17bb6:	bd10      	pop	{r4, pc}
   17bb8:	00017bbd 	.word	0x00017bbd

00017bbc <rtt_console_out>:
{
   17bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17bbe:	4e14      	ldr	r6, [pc, #80]	; (17c10 <rtt_console_out+0x54>)
	char c = (char)character;
   17bc0:	f88d 0007 	strb.w	r0, [sp, #7]
{
   17bc4:	4604      	mov	r4, r0
	char c = (char)character;
   17bc6:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   17bc8:	f3ef 8711 	mrs	r7, BASEPRI
   17bcc:	f04f 0120 	mov.w	r1, #32
   17bd0:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   17bd4:	2201      	movs	r2, #1
   17bd6:	f10d 0107 	add.w	r1, sp, #7
   17bda:	2000      	movs	r0, #0
   17bdc:	f002 fe40 	bl	1a860 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   17be0:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   17be4:	b120      	cbz	r0, 17bf0 <rtt_console_out+0x34>
			host_present = true;
   17be6:	2301      	movs	r3, #1
   17be8:	7033      	strb	r3, [r6, #0]
}
   17bea:	4620      	mov	r0, r4
   17bec:	b003      	add	sp, #12
   17bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   17bf0:	7833      	ldrb	r3, [r6, #0]
   17bf2:	2b00      	cmp	r3, #0
   17bf4:	d0f9      	beq.n	17bea <rtt_console_out+0x2e>
			if (max_cnt) {
   17bf6:	3d01      	subs	r5, #1
   17bf8:	d008      	beq.n	17c0c <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   17bfa:	f00b f8cc 	bl	22d96 <k_is_in_isr>
   17bfe:	2800      	cmp	r0, #0
   17c00:	d1e2      	bne.n	17bc8 <rtt_console_out+0xc>
   17c02:	2100      	movs	r1, #0
   17c04:	2042      	movs	r0, #66	; 0x42
   17c06:	f003 fe7b 	bl	1b900 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   17c0a:	e7dd      	b.n	17bc8 <rtt_console_out+0xc>
				host_present = false;
   17c0c:	7035      	strb	r5, [r6, #0]
   17c0e:	e7ec      	b.n	17bea <rtt_console_out+0x2e>
   17c10:	2000333a 	.word	0x2000333a

00017c14 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   17c14:	b530      	push	{r4, r5, lr}
	return port->config;
   17c16:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17c18:	7b04      	ldrb	r4, [r0, #12]
   17c1a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   17c1e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17c22:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   17c26:	b085      	sub	sp, #20
   17c28:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   17c2c:	d104      	bne.n	17c38 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   17c2e:	4628      	mov	r0, r5
   17c30:	f002 f934 	bl	19e9c <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   17c34:	2000      	movs	r0, #0
   17c36:	e032      	b.n	17c9e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   17c38:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   17c3c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   17c40:	d12f      	bne.n	17ca2 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   17c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   17c46:	bf0c      	ite	eq
   17c48:	2304      	moveq	r3, #4
   17c4a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   17c4c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   17c50:	6883      	ldr	r3, [r0, #8]
   17c52:	fa23 f101 	lsr.w	r1, r3, r1
   17c56:	07c9      	lsls	r1, r1, #31
   17c58:	d42f      	bmi.n	17cba <gpio_nrfx_pin_interrupt_configure+0xa6>
   17c5a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   17c5e:	d12c      	bne.n	17cba <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   17c60:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   17c62:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   17c64:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   17c68:	4a1c      	ldr	r2, [pc, #112]	; (17cdc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17c6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   17c6e:	bf18      	it	ne
   17c70:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   17c78:	07db      	lsls	r3, r3, #31
   17c7a:	d41e      	bmi.n	17cba <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   17c7c:	f10d 0407 	add.w	r4, sp, #7
   17c80:	4621      	mov	r1, r4
   17c82:	4628      	mov	r0, r5
   17c84:	f002 f86e 	bl	19d64 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   17c88:	4b15      	ldr	r3, [pc, #84]	; (17ce0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   17c8a:	4298      	cmp	r0, r3
   17c8c:	d114      	bne.n	17cb8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   17c8e:	4620      	mov	r0, r4
   17c90:	f002 f8b6 	bl	19e00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   17c94:	4b13      	ldr	r3, [pc, #76]	; (17ce4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17c96:	4298      	cmp	r0, r3
   17c98:	d00e      	beq.n	17cb8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   17c9a:	f06f 000b 	mvn.w	r0, #11
}
   17c9e:	b005      	add	sp, #20
   17ca0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   17ca2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   17ca6:	d005      	beq.n	17cb4 <gpio_nrfx_pin_interrupt_configure+0xa0>
   17ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   17cac:	bf0c      	ite	eq
   17cae:	2302      	moveq	r3, #2
   17cb0:	2301      	movne	r3, #1
   17cb2:	e7cb      	b.n	17c4c <gpio_nrfx_pin_interrupt_configure+0x38>
   17cb4:	2303      	movs	r3, #3
   17cb6:	e7c9      	b.n	17c4c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   17cb8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17cba:	2300      	movs	r3, #0
   17cbc:	4619      	mov	r1, r3
   17cbe:	aa02      	add	r2, sp, #8
   17cc0:	4628      	mov	r0, r5
   17cc2:	f001 ff29 	bl	19b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17cc6:	4b07      	ldr	r3, [pc, #28]	; (17ce4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   17cc8:	4298      	cmp	r0, r3
   17cca:	d104      	bne.n	17cd6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   17ccc:	2101      	movs	r1, #1
   17cce:	4628      	mov	r0, r5
   17cd0:	f002 f89c 	bl	19e0c <nrfx_gpiote_trigger_enable>
   17cd4:	e7ae      	b.n	17c34 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   17cd6:	f06f 0004 	mvn.w	r0, #4
   17cda:	e7e0      	b.n	17c9e <gpio_nrfx_pin_interrupt_configure+0x8a>
   17cdc:	50000300 	.word	0x50000300
   17ce0:	0bad0004 	.word	0x0bad0004
   17ce4:	0bad0000 	.word	0x0bad0000

00017ce8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17ce8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   17cea:	f002 f879 	bl	19de0 <nrfx_gpiote_is_init>
   17cee:	4604      	mov	r4, r0
   17cf0:	b968      	cbnz	r0, 17d0e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   17cf2:	f002 f84d 	bl	19d90 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   17cf6:	4b08      	ldr	r3, [pc, #32]	; (17d18 <gpio_nrfx_init+0x30>)
   17cf8:	4298      	cmp	r0, r3
   17cfa:	d10a      	bne.n	17d12 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   17cfc:	4807      	ldr	r0, [pc, #28]	; (17d1c <gpio_nrfx_init+0x34>)
   17cfe:	4621      	mov	r1, r4
   17d00:	f002 f82a 	bl	19d58 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17d04:	4622      	mov	r2, r4
   17d06:	2105      	movs	r1, #5
   17d08:	2006      	movs	r0, #6
   17d0a:	f7fb fc65 	bl	135d8 <z_arm_irq_priority_set>
		return 0;
   17d0e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   17d10:	bd10      	pop	{r4, pc}
		return -EIO;
   17d12:	f06f 0004 	mvn.w	r0, #4
   17d16:	e7fb      	b.n	17d10 <gpio_nrfx_init+0x28>
   17d18:	0bad0000 	.word	0x0bad0000
   17d1c:	00017d21 	.word	0x00017d21

00017d20 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17d20:	0942      	lsrs	r2, r0, #5
{
   17d22:	b570      	push	{r4, r5, r6, lr}
   17d24:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17d26:	d002      	beq.n	17d2e <nrfx_gpio_handler+0xe>
   17d28:	2a01      	cmp	r2, #1
   17d2a:	d015      	beq.n	17d58 <nrfx_gpio_handler+0x38>
}
   17d2c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17d2e:	4e0b      	ldr	r6, [pc, #44]	; (17d5c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   17d30:	6932      	ldr	r2, [r6, #16]
   17d32:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17d34:	2900      	cmp	r1, #0
   17d36:	d0f9      	beq.n	17d2c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   17d38:	f003 031f 	and.w	r3, r3, #31
   17d3c:	2501      	movs	r5, #1
   17d3e:	680c      	ldr	r4, [r1, #0]
   17d40:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   17d42:	688a      	ldr	r2, [r1, #8]
   17d44:	402a      	ands	r2, r5
   17d46:	d002      	beq.n	17d4e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   17d48:	684b      	ldr	r3, [r1, #4]
   17d4a:	4630      	mov	r0, r6
   17d4c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   17d4e:	2c00      	cmp	r4, #0
   17d50:	d0ec      	beq.n	17d2c <nrfx_gpio_handler+0xc>
   17d52:	4621      	mov	r1, r4
   17d54:	6824      	ldr	r4, [r4, #0]
   17d56:	e7f4      	b.n	17d42 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   17d58:	4e01      	ldr	r6, [pc, #4]	; (17d60 <nrfx_gpio_handler+0x40>)
   17d5a:	e7e9      	b.n	17d30 <nrfx_gpio_handler+0x10>
   17d5c:	00023970 	.word	0x00023970
   17d60:	00023988 	.word	0x00023988

00017d64 <gpio_nrfx_pin_configure>:
{
   17d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   17d68:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17d6a:	7b3b      	ldrb	r3, [r7, #12]
   17d6c:	f001 051f 	and.w	r5, r1, #31
{
   17d70:	b085      	sub	sp, #20
   17d72:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   17d74:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   17d78:	4614      	mov	r4, r2
   17d7a:	b9ca      	cbnz	r2, 17db0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   17d7c:	a902      	add	r1, sp, #8
   17d7e:	4628      	mov	r0, r5
   17d80:	f001 fff0 	bl	19d64 <nrfx_gpiote_channel_get>
   17d84:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   17d86:	4628      	mov	r0, r5
   17d88:	f002 f8b0 	bl	19eec <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   17d8c:	4b4a      	ldr	r3, [pc, #296]	; (17eb8 <gpio_nrfx_pin_configure+0x154>)
   17d8e:	4298      	cmp	r0, r3
   17d90:	d004      	beq.n	17d9c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   17d92:	f06f 0004 	mvn.w	r0, #4
}
   17d96:	b005      	add	sp, #20
   17d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   17d9c:	4284      	cmp	r4, r0
   17d9e:	d105      	bne.n	17dac <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   17da0:	f89d 0008 	ldrb.w	r0, [sp, #8]
   17da4:	f002 f826 	bl	19df4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   17da8:	42a0      	cmp	r0, r4
   17daa:	d1f2      	bne.n	17d92 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17dac:	2000      	movs	r0, #0
   17dae:	e7f2      	b.n	17d96 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   17db0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   17db4:	f10d 0103 	add.w	r1, sp, #3
   17db8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   17dba:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   17dbe:	f001 ffd1 	bl	19d64 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17dc2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   17dc4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   17dc6:	aa02      	add	r2, sp, #8
   17dc8:	4649      	mov	r1, r9
   17dca:	4628      	mov	r0, r5
   17dcc:	f001 fea4 	bl	19b18 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   17dd0:	4b39      	ldr	r3, [pc, #228]	; (17eb8 <gpio_nrfx_pin_configure+0x154>)
   17dd2:	4298      	cmp	r0, r3
   17dd4:	d002      	beq.n	17ddc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17dd6:	f06f 0015 	mvn.w	r0, #21
   17dda:	e7dc      	b.n	17d96 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   17ddc:	4580      	cmp	r8, r0
   17dde:	d103      	bne.n	17de8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   17de0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   17de4:	f002 f806 	bl	19df4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   17de8:	03a3      	lsls	r3, r4, #14
   17dea:	d551      	bpl.n	17e90 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17dec:	f240 6306 	movw	r3, #1542	; 0x606
   17df0:	4023      	ands	r3, r4
   17df2:	f240 2206 	movw	r2, #518	; 0x206
   17df6:	4293      	cmp	r3, r2
   17df8:	d03b      	beq.n	17e72 <gpio_nrfx_pin_configure+0x10e>
   17dfa:	d80c      	bhi.n	17e16 <gpio_nrfx_pin_configure+0xb2>
   17dfc:	2b06      	cmp	r3, #6
   17dfe:	d015      	beq.n	17e2c <gpio_nrfx_pin_configure+0xc8>
   17e00:	d804      	bhi.n	17e0c <gpio_nrfx_pin_configure+0xa8>
   17e02:	b19b      	cbz	r3, 17e2c <gpio_nrfx_pin_configure+0xc8>
   17e04:	2b02      	cmp	r3, #2
   17e06:	d1e6      	bne.n	17dd6 <gpio_nrfx_pin_configure+0x72>
   17e08:	2304      	movs	r3, #4
   17e0a:	e00f      	b.n	17e2c <gpio_nrfx_pin_configure+0xc8>
   17e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17e10:	d1e1      	bne.n	17dd6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   17e12:	2301      	movs	r3, #1
   17e14:	e00a      	b.n	17e2c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   17e16:	f240 4202 	movw	r2, #1026	; 0x402
   17e1a:	4293      	cmp	r3, r2
   17e1c:	d02b      	beq.n	17e76 <gpio_nrfx_pin_configure+0x112>
   17e1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   17e22:	d02a      	beq.n	17e7a <gpio_nrfx_pin_configure+0x116>
   17e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17e28:	d1d5      	bne.n	17dd6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   17e2a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   17e2c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   17e30:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   17e34:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   17e38:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   17e3a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   17e3e:	bf54      	ite	pl
   17e40:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   17e44:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17e46:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   17e48:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   17e4c:	d517      	bpl.n	17e7e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   17e4e:	687b      	ldr	r3, [r7, #4]
   17e50:	2101      	movs	r1, #1
   17e52:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   17e56:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   17e5a:	2200      	movs	r2, #0
   17e5c:	a901      	add	r1, sp, #4
   17e5e:	4628      	mov	r0, r5
   17e60:	f001 ff08 	bl	19c74 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17e64:	4b14      	ldr	r3, [pc, #80]	; (17eb8 <gpio_nrfx_pin_configure+0x154>)
   17e66:	4298      	cmp	r0, r3
   17e68:	bf14      	ite	ne
   17e6a:	f06f 0015 	mvnne.w	r0, #21
   17e6e:	2000      	moveq	r0, #0
   17e70:	e791      	b.n	17d96 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   17e72:	2307      	movs	r3, #7
   17e74:	e7da      	b.n	17e2c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   17e76:	2305      	movs	r3, #5
   17e78:	e7d8      	b.n	17e2c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   17e7a:	2303      	movs	r3, #3
   17e7c:	e7d6      	b.n	17e2c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   17e7e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   17e80:	bf41      	itttt	mi
   17e82:	687b      	ldrmi	r3, [r7, #4]
   17e84:	2101      	movmi	r1, #1
   17e86:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   17e8a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   17e8e:	e7e4      	b.n	17e5a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
   17e90:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17e92:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   17e96:	bf54      	ite	pl
   17e98:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   17e9c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17e9e:	461a      	mov	r2, r3
   17ea0:	a901      	add	r1, sp, #4
   17ea2:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   17ea4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   17ea8:	f001 fe36 	bl	19b18 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   17eac:	4b02      	ldr	r3, [pc, #8]	; (17eb8 <gpio_nrfx_pin_configure+0x154>)
   17eae:	4298      	cmp	r0, r3
   17eb0:	f43f af7c 	beq.w	17dac <gpio_nrfx_pin_configure+0x48>
   17eb4:	e78f      	b.n	17dd6 <gpio_nrfx_pin_configure+0x72>
   17eb6:	bf00      	nop
   17eb8:	0bad0000 	.word	0x0bad0000

00017ebc <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   17ebc:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17ebe:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   17ec0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   17ec4:	f002 fc32 	bl	1a72c <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   17ec8:	4b03      	ldr	r3, [pc, #12]	; (17ed8 <i2c_nrfx_twim_recover_bus+0x1c>)
   17eca:	4298      	cmp	r0, r3
}
   17ecc:	bf14      	ite	ne
   17ece:	f06f 000f 	mvnne.w	r0, #15
   17ed2:	2000      	moveq	r0, #0
   17ed4:	bd08      	pop	{r3, pc}
   17ed6:	bf00      	nop
   17ed8:	0bad0000 	.word	0x0bad0000

00017edc <init_twim>:
{
   17edc:	b510      	push	{r4, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17ede:	6904      	ldr	r4, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   17ee0:	4a08      	ldr	r2, [pc, #32]	; (17f04 <init_twim+0x28>)
   17ee2:	6840      	ldr	r0, [r0, #4]
   17ee4:	4623      	mov	r3, r4
   17ee6:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17eea:	f002 f8ff 	bl	1a0ec <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   17eee:	4b06      	ldr	r3, [pc, #24]	; (17f08 <init_twim+0x2c>)
   17ef0:	4298      	cmp	r0, r3
	dev_data->twim_initialized = true;
   17ef2:	bf03      	ittte	eq
   17ef4:	2301      	moveq	r3, #1
   17ef6:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
	return 0;
   17efa:	2000      	moveq	r0, #0
		return -EIO;
   17efc:	f06f 0004 	mvnne.w	r0, #4
}
   17f00:	bd10      	pop	{r4, pc}
   17f02:	bf00      	nop
   17f04:	00017f0d 	.word	0x00017f0d
   17f08:	0bad0000 	.word	0x0bad0000

00017f0c <event_handler>:
	switch (p_event->type) {
   17f0c:	7803      	ldrb	r3, [r0, #0]
   17f0e:	2b01      	cmp	r3, #1
   17f10:	d008      	beq.n	17f24 <event_handler+0x18>
   17f12:	2b02      	cmp	r3, #2
   17f14:	d008      	beq.n	17f28 <event_handler+0x1c>
   17f16:	b94b      	cbnz	r3, 17f2c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   17f18:	4b05      	ldr	r3, [pc, #20]	; (17f30 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   17f1a:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   17f1c:	f101 0018 	add.w	r0, r1, #24
   17f20:	f003 b808 	b.w	1af34 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   17f24:	4b03      	ldr	r3, [pc, #12]	; (17f34 <event_handler+0x28>)
   17f26:	e7f8      	b.n	17f1a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17f28:	4b03      	ldr	r3, [pc, #12]	; (17f38 <event_handler+0x2c>)
   17f2a:	e7f6      	b.n	17f1a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   17f2c:	4b03      	ldr	r3, [pc, #12]	; (17f3c <event_handler+0x30>)
   17f2e:	e7f4      	b.n	17f1a <event_handler+0xe>
   17f30:	0bad0000 	.word	0x0bad0000
   17f34:	0bae0001 	.word	0x0bae0001
   17f38:	0bae0002 	.word	0x0bae0002
   17f3c:	0bad0001 	.word	0x0bad0001

00017f40 <i2c_nrfx_twim_transfer>:
{
   17f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   17f44:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   17f46:	6906      	ldr	r6, [r0, #16]
{
   17f48:	b089      	sub	sp, #36	; 0x24
   17f4a:	4698      	mov	r8, r3
   17f4c:	4605      	mov	r5, r0
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   17f4e:	893b      	ldrh	r3, [r7, #8]
   17f50:	9300      	str	r3, [sp, #0]
{
   17f52:	460c      	mov	r4, r1
   17f54:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   17f56:	2100      	movs	r1, #0
   17f58:	2214      	movs	r2, #20
   17f5a:	a803      	add	r0, sp, #12
	uint8_t *msg_buf = dev_data->msg_buf;
   17f5c:	f8d6 9048 	ldr.w	r9, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   17f60:	f00b fc40 	bl	237e4 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17f64:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   17f68:	f88d 800d 	strb.w	r8, [sp, #13]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17f6c:	b1bb      	cbz	r3, 17f9e <i2c_nrfx_twim_transfer+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   17f6e:	f04f 32ff 	mov.w	r2, #4294967295
   17f72:	f04f 33ff 	mov.w	r3, #4294967295
   17f76:	4630      	mov	r0, r6
   17f78:	f003 f802 	bl	1af80 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   17f7c:	f106 0a18 	add.w	sl, r6, #24
   17f80:	2200      	movs	r2, #0
   17f82:	2300      	movs	r3, #0
   17f84:	4650      	mov	r0, sl
   17f86:	f002 fffb 	bl	1af80 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   17f8a:	4638      	mov	r0, r7
   17f8c:	f002 f910 	bl	1a1b0 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   17f90:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   17f94:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   17f96:	45d8      	cmp	r8, fp
   17f98:	d309      	bcc.n	17fae <i2c_nrfx_twim_transfer+0x6e>
   17f9a:	2400      	movs	r4, #0
   17f9c:	e051      	b.n	18042 <i2c_nrfx_twim_transfer+0x102>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   17f9e:	4628      	mov	r0, r5
   17fa0:	f7ff ff9c 	bl	17edc <init_twim>
   17fa4:	2800      	cmp	r0, #0
   17fa6:	dae2      	bge.n	17f6e <i2c_nrfx_twim_transfer+0x2e>
		return -EIO;
   17fa8:	f06f 0404 	mvn.w	r4, #4
   17fac:	e04f      	b.n	1804e <i2c_nrfx_twim_transfer+0x10e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   17fae:	7a21      	ldrb	r1, [r4, #8]
   17fb0:	070a      	lsls	r2, r1, #28
   17fb2:	f100 808f 	bmi.w	180d4 <i2c_nrfx_twim_transfer+0x194>
		bool concat_next = ((i + 1) < num_msgs)
   17fb6:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   17fba:	45d8      	cmp	r8, fp
   17fbc:	6862      	ldr	r2, [r4, #4]
   17fbe:	d20a      	bcs.n	17fd6 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   17fc0:	078b      	lsls	r3, r1, #30
   17fc2:	d408      	bmi.n	17fd6 <i2c_nrfx_twim_transfer+0x96>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   17fc4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   17fc6:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   17fca:	f000 0001 	and.w	r0, r0, #1
   17fce:	f003 0304 	and.w	r3, r3, #4
   17fd2:	4303      	orrs	r3, r0
   17fd4:	d016      	beq.n	18004 <i2c_nrfx_twim_transfer+0xc4>
		if (concat_next || (msg_buf_used != 0)) {
   17fd6:	b1bd      	cbz	r5, 18008 <i2c_nrfx_twim_transfer+0xc8>
				&& ((msgs[i].flags & I2C_MSG_READ)
   17fd8:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   17fda:	f8dd c000 	ldr.w	ip, [sp]
   17fde:	18a8      	adds	r0, r5, r2
   17fe0:	4560      	cmp	r0, ip
   17fe2:	d87a      	bhi.n	180da <i2c_nrfx_twim_transfer+0x19a>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   17fe4:	07c8      	lsls	r0, r1, #31
   17fe6:	d406      	bmi.n	17ff6 <i2c_nrfx_twim_transfer+0xb6>
   17fe8:	6821      	ldr	r1, [r4, #0]
   17fea:	9301      	str	r3, [sp, #4]
   17fec:	eb09 0005 	add.w	r0, r9, r5
   17ff0:	f00b fbd7 	bl	237a2 <memcpy>
   17ff4:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   17ff6:	6862      	ldr	r2, [r4, #4]
   17ff8:	4415      	add	r5, r2
   17ffa:	b2ad      	uxth	r5, r5
		if (concat_next) {
   17ffc:	2b00      	cmp	r3, #0
   17ffe:	d037      	beq.n	18070 <i2c_nrfx_twim_transfer+0x130>
   18000:	340c      	adds	r4, #12
   18002:	e7c8      	b.n	17f96 <i2c_nrfx_twim_transfer+0x56>
				&& ((msgs[i].flags & I2C_MSG_READ)
   18004:	2301      	movs	r3, #1
   18006:	e7e8      	b.n	17fda <i2c_nrfx_twim_transfer+0x9a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   18008:	07c9      	lsls	r1, r1, #31
   1800a:	d524      	bpl.n	18056 <i2c_nrfx_twim_transfer+0x116>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1800c:	6823      	ldr	r3, [r4, #0]
   1800e:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   18010:	6863      	ldr	r3, [r4, #4]
   18012:	9304      	str	r3, [sp, #16]
   18014:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   18016:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   18018:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   1801c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   18020:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   18024:	a903      	add	r1, sp, #12
   18026:	bf0c      	ite	eq
   18028:	2220      	moveq	r2, #32
   1802a:	2200      	movne	r2, #0
   1802c:	4638      	mov	r0, r7
   1802e:	f002 f931 	bl	1a294 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   18032:	4b2e      	ldr	r3, [pc, #184]	; (180ec <i2c_nrfx_twim_transfer+0x1ac>)
   18034:	4298      	cmp	r0, r3
   18036:	d021      	beq.n	1807c <i2c_nrfx_twim_transfer+0x13c>
			if (res == NRFX_ERROR_BUSY) {
   18038:	330b      	adds	r3, #11
   1803a:	4298      	cmp	r0, r3
   1803c:	d053      	beq.n	180e6 <i2c_nrfx_twim_transfer+0x1a6>
			ret = -EIO;
   1803e:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   18042:	4638      	mov	r0, r7
   18044:	f002 f8c4 	bl	1a1d0 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   18048:	4630      	mov	r0, r6
   1804a:	f002 ff73 	bl	1af34 <z_impl_k_sem_give>
}
   1804e:	4620      	mov	r0, r4
   18050:	b009      	add	sp, #36	; 0x24
   18052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   18056:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   18058:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   1805c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   18060:	d0d4      	beq.n	1800c <i2c_nrfx_twim_transfer+0xcc>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   18062:	897b      	ldrh	r3, [r7, #10]
   18064:	4293      	cmp	r3, r2
   18066:	d33b      	bcc.n	180e0 <i2c_nrfx_twim_transfer+0x1a0>
   18068:	4648      	mov	r0, r9
   1806a:	f00b fb9a 	bl	237a2 <memcpy>
			msg_buf_used = msgs[i].len;
   1806e:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   18070:	2d00      	cmp	r5, #0
   18072:	d0cb      	beq.n	1800c <i2c_nrfx_twim_transfer+0xcc>
			cur_xfer.p_primary_buf = msg_buf;
   18074:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   18078:	9504      	str	r5, [sp, #16]
   1807a:	e7cc      	b.n	18016 <i2c_nrfx_twim_transfer+0xd6>
	return z_impl_k_sem_take(sem, timeout);
   1807c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   18080:	2300      	movs	r3, #0
   18082:	4650      	mov	r0, sl
   18084:	f002 ff7c 	bl	1af80 <z_impl_k_sem_take>
		if (ret != 0) {
   18088:	b138      	cbz	r0, 1809a <i2c_nrfx_twim_transfer+0x15a>
			nrfx_twim_disable(&dev_config->twim);
   1808a:	4638      	mov	r0, r7
   1808c:	f002 f8a0 	bl	1a1d0 <nrfx_twim_disable>
   18090:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   18094:	f002 fb4a 	bl	1a72c <nrfx_twi_twim_bus_recover>
   18098:	e7d1      	b.n	1803e <i2c_nrfx_twim_transfer+0xfe>
		res = dev_data->res;
   1809a:	6c73      	ldr	r3, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   1809c:	4a13      	ldr	r2, [pc, #76]	; (180ec <i2c_nrfx_twim_transfer+0x1ac>)
   1809e:	4293      	cmp	r3, r2
   180a0:	d1cd      	bne.n	1803e <i2c_nrfx_twim_transfer+0xfe>
		if ((msgs[i].flags & I2C_MSG_READ)
   180a2:	7a23      	ldrb	r3, [r4, #8]
   180a4:	07db      	lsls	r3, r3, #31
   180a6:	d401      	bmi.n	180ac <i2c_nrfx_twim_transfer+0x16c>
		msg_buf_used = 0;
   180a8:	2500      	movs	r5, #0
   180aa:	e7a9      	b.n	18000 <i2c_nrfx_twim_transfer+0xc0>
		    && cur_xfer.p_primary_buf == msg_buf) {
   180ac:	9b06      	ldr	r3, [sp, #24]
   180ae:	4599      	cmp	r9, r3
   180b0:	d1fa      	bne.n	180a8 <i2c_nrfx_twim_transfer+0x168>
   180b2:	4623      	mov	r3, r4
   180b4:	e008      	b.n	180c8 <i2c_nrfx_twim_transfer+0x188>
				msg_buf_used -= msgs[j].len;
   180b6:	1aa9      	subs	r1, r5, r2
   180b8:	68d8      	ldr	r0, [r3, #12]
   180ba:	9301      	str	r3, [sp, #4]
   180bc:	b28d      	uxth	r5, r1
   180be:	fa19 f181 	uxtah	r1, r9, r1
   180c2:	f00b fb6e 	bl	237a2 <memcpy>
				j--;
   180c6:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   180c8:	685a      	ldr	r2, [r3, #4]
   180ca:	4295      	cmp	r5, r2
   180cc:	f1a3 030c 	sub.w	r3, r3, #12
   180d0:	d2f1      	bcs.n	180b6 <i2c_nrfx_twim_transfer+0x176>
   180d2:	e7e9      	b.n	180a8 <i2c_nrfx_twim_transfer+0x168>
			ret = -ENOTSUP;
   180d4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   180d8:	e7b3      	b.n	18042 <i2c_nrfx_twim_transfer+0x102>
				ret = -ENOSPC;
   180da:	f06f 041b 	mvn.w	r4, #27
   180de:	e7b0      	b.n	18042 <i2c_nrfx_twim_transfer+0x102>
				ret = -EINVAL;
   180e0:	f06f 0415 	mvn.w	r4, #21
   180e4:	e7ad      	b.n	18042 <i2c_nrfx_twim_transfer+0x102>
				ret = -EBUSY;
   180e6:	f06f 040f 	mvn.w	r4, #15
   180ea:	e7aa      	b.n	18042 <i2c_nrfx_twim_transfer+0x102>
   180ec:	0bad0000 	.word	0x0bad0000

000180f0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   180f0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   180f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   180f6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   180f8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   180fa:	6002      	str	r2, [r0, #0]
}
   180fc:	4802      	ldr	r0, [pc, #8]	; (18108 <nrf_gpio_pin_port_decode+0x18>)
   180fe:	bf18      	it	ne
   18100:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   18104:	4770      	bx	lr
   18106:	bf00      	nop
   18108:	50000300 	.word	0x50000300

0001810c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1810c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1810e:	794b      	ldrb	r3, [r1, #5]
   18110:	2b01      	cmp	r3, #1
   18112:	d026      	beq.n	18162 <uarte_nrfx_configure+0x56>
   18114:	2b03      	cmp	r3, #3
   18116:	d121      	bne.n	1815c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   18118:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1811a:	798b      	ldrb	r3, [r1, #6]
   1811c:	2b03      	cmp	r3, #3
   1811e:	d11d      	bne.n	1815c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   18120:	79cc      	ldrb	r4, [r1, #7]
   18122:	b10c      	cbz	r4, 18128 <uarte_nrfx_configure+0x1c>
   18124:	2c01      	cmp	r4, #1
   18126:	d119      	bne.n	1815c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   18128:	790a      	ldrb	r2, [r1, #4]
   1812a:	b112      	cbz	r2, 18132 <uarte_nrfx_configure+0x26>
   1812c:	2a02      	cmp	r2, #2
   1812e:	d115      	bne.n	1815c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   18130:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   18132:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   18134:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   18136:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1813a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1813c:	d065      	beq.n	1820a <uarte_nrfx_configure+0xfe>
   1813e:	d82d      	bhi.n	1819c <uarte_nrfx_configure+0x90>
   18140:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   18144:	d064      	beq.n	18210 <uarte_nrfx_configure+0x104>
   18146:	d816      	bhi.n	18176 <uarte_nrfx_configure+0x6a>
   18148:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1814c:	d062      	beq.n	18214 <uarte_nrfx_configure+0x108>
   1814e:	d80a      	bhi.n	18166 <uarte_nrfx_configure+0x5a>
   18150:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   18154:	d061      	beq.n	1821a <uarte_nrfx_configure+0x10e>
   18156:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1815a:	d061      	beq.n	18220 <uarte_nrfx_configure+0x114>
   1815c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18160:	e052      	b.n	18208 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   18162:	2600      	movs	r6, #0
   18164:	e7d9      	b.n	1811a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   18166:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1816a:	d05c      	beq.n	18226 <uarte_nrfx_configure+0x11a>
   1816c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   18170:	d1f4      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   18172:	4b37      	ldr	r3, [pc, #220]	; (18250 <uarte_nrfx_configure+0x144>)
   18174:	e03c      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18176:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1817a:	d057      	beq.n	1822c <uarte_nrfx_configure+0x120>
   1817c:	d807      	bhi.n	1818e <uarte_nrfx_configure+0x82>
   1817e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18182:	d055      	beq.n	18230 <uarte_nrfx_configure+0x124>
   18184:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   18188:	d1e8      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1818a:	4b32      	ldr	r3, [pc, #200]	; (18254 <uarte_nrfx_configure+0x148>)
   1818c:	e030      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1818e:	f647 2712 	movw	r7, #31250	; 0x7a12
   18192:	42bb      	cmp	r3, r7
   18194:	d1e2      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18196:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1819a:	e029      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1819c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   181a0:	d048      	beq.n	18234 <uarte_nrfx_configure+0x128>
   181a2:	d813      	bhi.n	181cc <uarte_nrfx_configure+0xc0>
   181a4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   181a8:	d047      	beq.n	1823a <uarte_nrfx_configure+0x12e>
   181aa:	d809      	bhi.n	181c0 <uarte_nrfx_configure+0xb4>
   181ac:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   181b0:	42bb      	cmp	r3, r7
   181b2:	d044      	beq.n	1823e <uarte_nrfx_configure+0x132>
   181b4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   181b8:	d1d0      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   181ba:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   181be:	e017      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   181c0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   181c4:	d1ca      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   181c6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   181ca:	e011      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   181cc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   181d0:	d038      	beq.n	18244 <uarte_nrfx_configure+0x138>
   181d2:	d808      	bhi.n	181e6 <uarte_nrfx_configure+0xda>
   181d4:	4f20      	ldr	r7, [pc, #128]	; (18258 <uarte_nrfx_configure+0x14c>)
   181d6:	42bb      	cmp	r3, r7
   181d8:	d037      	beq.n	1824a <uarte_nrfx_configure+0x13e>
   181da:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   181de:	d1bd      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   181e0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   181e4:	e004      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   181e6:	4f1d      	ldr	r7, [pc, #116]	; (1825c <uarte_nrfx_configure+0x150>)
   181e8:	42bb      	cmp	r3, r7
   181ea:	d1b7      	bne.n	1815c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   181ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   181f0:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   181f2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   181f6:	1d03      	adds	r3, r0, #4
   181f8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   181fa:	4334      	orrs	r4, r6
   181fc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   181fe:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   18202:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   18206:	2000      	movs	r0, #0
}
   18208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1820a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1820e:	e7ef      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18210:	4b13      	ldr	r3, [pc, #76]	; (18260 <uarte_nrfx_configure+0x154>)
   18212:	e7ed      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18214:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18218:	e7ea      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1821a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1821e:	e7e7      	b.n	181f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   18220:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   18224:	e7e4      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   18226:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1822a:	e7e1      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1822c:	4b0d      	ldr	r3, [pc, #52]	; (18264 <uarte_nrfx_configure+0x158>)
   1822e:	e7df      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   18230:	4b0d      	ldr	r3, [pc, #52]	; (18268 <uarte_nrfx_configure+0x15c>)
   18232:	e7dd      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   18234:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   18238:	e7da      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1823a:	4b0c      	ldr	r3, [pc, #48]	; (1826c <uarte_nrfx_configure+0x160>)
   1823c:	e7d8      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1823e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   18242:	e7d5      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   18244:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18248:	e7d2      	b.n	181f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1824a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1824e:	e7cf      	b.n	181f0 <uarte_nrfx_configure+0xe4>
   18250:	0013b000 	.word	0x0013b000
   18254:	004ea000 	.word	0x004ea000
   18258:	0003d090 	.word	0x0003d090
   1825c:	000f4240 	.word	0x000f4240
   18260:	00275000 	.word	0x00275000
   18264:	0075c000 	.word	0x0075c000
   18268:	003af000 	.word	0x003af000
   1826c:	013a9000 	.word	0x013a9000

00018270 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   18270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   18272:	6906      	ldr	r6, [r0, #16]
{
   18274:	4605      	mov	r5, r0
   18276:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18278:	f00a fd8d 	bl	22d96 <k_is_in_isr>
   1827c:	b910      	cbnz	r0, 18284 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1827e:	4b2c      	ldr	r3, [pc, #176]	; (18330 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   18280:	781b      	ldrb	r3, [r3, #0]
   18282:	b983      	cbnz	r3, 182a6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   18284:	f04f 0340 	mov.w	r3, #64	; 0x40
   18288:	f3ef 8411 	mrs	r4, BASEPRI
   1828c:	f383 8812 	msr	BASEPRI_MAX, r3
   18290:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   18294:	6868      	ldr	r0, [r5, #4]
   18296:	f00a fa8d 	bl	227b4 <is_tx_ready.isra.0>
   1829a:	bb28      	cbnz	r0, 182e8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1829c:	f384 8811 	msr	BASEPRI, r4
   182a0:	f3bf 8f6f 	isb	sy
}
   182a4:	e7ee      	b.n	18284 <uarte_nrfx_poll_out+0x14>
{
   182a6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   182a8:	6868      	ldr	r0, [r5, #4]
   182aa:	f00a fa83 	bl	227b4 <is_tx_ready.isra.0>
   182ae:	b970      	cbnz	r0, 182ce <uarte_nrfx_poll_out+0x5e>
   182b0:	2001      	movs	r0, #1
   182b2:	f00a fbac 	bl	22a0e <nrfx_busy_wait>
   182b6:	3c01      	subs	r4, #1
   182b8:	d1f6      	bne.n	182a8 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   182ba:	2100      	movs	r1, #0
   182bc:	2021      	movs	r0, #33	; 0x21
   182be:	f003 fb1f 	bl	1b900 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   182c2:	e7f0      	b.n	182a6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   182c4:	f384 8811 	msr	BASEPRI, r4
   182c8:	f3bf 8f6f 	isb	sy
}
   182cc:	e7f5      	b.n	182ba <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   182ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   182d2:	f3ef 8411 	mrs	r4, BASEPRI
   182d6:	f383 8812 	msr	BASEPRI_MAX, r3
   182da:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   182de:	6868      	ldr	r0, [r5, #4]
   182e0:	f00a fa68 	bl	227b4 <is_tx_ready.isra.0>
   182e4:	2800      	cmp	r0, #0
   182e6:	d0ed      	beq.n	182c4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   182e8:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   182ec:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   182ee:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   182f0:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   182f2:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   182f6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   182fa:	2200      	movs	r2, #0
   182fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   18300:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   18304:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   18308:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1830c:	684a      	ldr	r2, [r1, #4]
   1830e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18310:	bf41      	itttt	mi
   18312:	2208      	movmi	r2, #8
   18314:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   18318:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1831c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18320:	2201      	movs	r2, #1
   18322:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   18324:	f384 8811 	msr	BASEPRI, r4
   18328:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1832e:	bf00      	nop
   18330:	20003dc8 	.word	0x20003dc8

00018334 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18338:	2200      	movs	r2, #0
   1833a:	4607      	mov	r7, r0
   1833c:	2101      	movs	r1, #1
   1833e:	2002      	movs	r0, #2
   18340:	f7fb f94a 	bl	135d8 <z_arm_irq_priority_set>
   18344:	2002      	movs	r0, #2
   18346:	f7fb f915 	bl	13574 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1834a:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1834e:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   18350:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   18354:	2300      	movs	r3, #0
   18356:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   1835a:	6037      	str	r7, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   1835c:	687d      	ldr	r5, [r7, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1835e:	68eb      	ldr	r3, [r5, #12]
   18360:	1c5a      	adds	r2, r3, #1
   18362:	d013      	beq.n	1838c <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   18364:	a801      	add	r0, sp, #4
   18366:	9301      	str	r3, [sp, #4]
   18368:	f7ff fec2 	bl	180f0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1836c:	9a01      	ldr	r2, [sp, #4]
   1836e:	2301      	movs	r3, #1
   18370:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   18372:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   18376:	68eb      	ldr	r3, [r5, #12]
   18378:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1837a:	a801      	add	r0, sp, #4
   1837c:	f7ff feb8 	bl	180f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   18380:	9b01      	ldr	r3, [sp, #4]
   18382:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   18386:	2203      	movs	r2, #3
   18388:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1838c:	6928      	ldr	r0, [r5, #16]
   1838e:	1c43      	adds	r3, r0, #1
   18390:	d006      	beq.n	183a0 <uarte_0_init+0x6c>
			nrf_gpio_cfg_input(cfg->rx_pin,
   18392:	7f2b      	ldrb	r3, [r5, #28]
   18394:	2b00      	cmp	r3, #0
   18396:	bf14      	ite	ne
   18398:	2103      	movne	r1, #3
   1839a:	2100      	moveq	r1, #0
   1839c:	f00a f9fc 	bl	22798 <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   183a0:	696b      	ldr	r3, [r5, #20]
   183a2:	1c5a      	adds	r2, r3, #1
   183a4:	d013      	beq.n	183ce <uarte_0_init+0x9a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   183a6:	a801      	add	r0, sp, #4
   183a8:	9301      	str	r3, [sp, #4]
   183aa:	f7ff fea1 	bl	180f0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   183ae:	9a01      	ldr	r2, [sp, #4]
   183b0:	2301      	movs	r3, #1
   183b2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   183b4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   183b8:	696b      	ldr	r3, [r5, #20]
   183ba:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   183bc:	a801      	add	r0, sp, #4
   183be:	f7ff fe97 	bl	180f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   183c2:	9b01      	ldr	r3, [sp, #4]
   183c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   183c8:	2203      	movs	r2, #3
   183ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   183ce:	69a8      	ldr	r0, [r5, #24]
   183d0:	1c43      	adds	r3, r0, #1
   183d2:	d006      	beq.n	183e2 <uarte_0_init+0xae>
			nrf_gpio_cfg_input(cfg->cts_pin,
   183d4:	7f6b      	ldrb	r3, [r5, #29]
   183d6:	2b00      	cmp	r3, #0
   183d8:	bf14      	ite	ne
   183da:	2103      	movne	r1, #3
   183dc:	2100      	moveq	r1, #0
   183de:	f00a f9db 	bl	22798 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   183e2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   183e6:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   183e8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   183ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   183f0:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
	err = uarte_nrfx_configure(dev, &data->uart_config);
   183f4:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   183f6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   183fa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   183fe:	1d31      	adds	r1, r6, #4
   18400:	f7ff fe84 	bl	1810c <uarte_nrfx_configure>
	if (err) {
   18404:	4605      	mov	r5, r0
   18406:	2800      	cmp	r0, #0
   18408:	d146      	bne.n	18498 <uarte_0_init+0x164>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1840a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1840e:	0799      	lsls	r1, r3, #30
   18410:	d519      	bpl.n	18446 <uarte_0_init+0x112>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18412:	f106 0012 	add.w	r0, r6, #18
   18416:	f001 fe63 	bl	1a0e0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1841a:	4b23      	ldr	r3, [pc, #140]	; (184a8 <uarte_0_init+0x174>)
   1841c:	4298      	cmp	r0, r3
   1841e:	d13f      	bne.n	184a0 <uarte_0_init+0x16c>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18420:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18422:	00c3      	lsls	r3, r0, #3
   18424:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18428:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1842c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   18430:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18434:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18438:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1843c:	4a1b      	ldr	r2, [pc, #108]	; (184ac <uarte_0_init+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1843e:	2301      	movs	r3, #1
   18440:	4083      	lsls	r3, r0
   18442:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   18446:	2308      	movs	r3, #8
   18448:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1844c:	f898 3008 	ldrb.w	r3, [r8, #8]
   18450:	b95b      	cbnz	r3, 1846a <uarte_0_init+0x136>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18452:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   18456:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1845a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1845e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   18462:	2301      	movs	r3, #1
   18464:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18468:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1846a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1846e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   18470:	bf5c      	itt	pl
   18472:	f44f 7280 	movpl.w	r2, #256	; 0x100
   18476:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1847a:	06db      	lsls	r3, r3, #27
   1847c:	bf44      	itt	mi
   1847e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   18482:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   18486:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   18488:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1848a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1848e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18492:	2301      	movs	r3, #1
   18494:	60a3      	str	r3, [r4, #8]
   18496:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   18498:	4628      	mov	r0, r5
   1849a:	b002      	add	sp, #8
   1849c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   184a0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   184a4:	e7f8      	b.n	18498 <uarte_0_init+0x164>
   184a6:	bf00      	nop
   184a8:	0bad0000 	.word	0x0bad0000
   184ac:	4001f000 	.word	0x4001f000

000184b0 <random_byte_get>:
	__asm__ volatile(
   184b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   184b4:	f3ef 8211 	mrs	r2, BASEPRI
   184b8:	f383 8812 	msr	BASEPRI_MAX, r3
   184bc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   184c0:	4b09      	ldr	r3, [pc, #36]	; (184e8 <random_byte_get+0x38>)
   184c2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   184c6:	b161      	cbz	r1, 184e2 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   184c8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   184ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   184ce:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   184d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   184d6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   184d8:	f382 8811 	msr	BASEPRI, r2
   184dc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   184e0:	4770      	bx	lr
	int retval = -EAGAIN;
   184e2:	f06f 000a 	mvn.w	r0, #10
   184e6:	e7f7      	b.n	184d8 <random_byte_get+0x28>
   184e8:	4000d000 	.word	0x4000d000

000184ec <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   184ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   184ee:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   184f0:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   184f2:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   184f4:	f04f 0040 	mov.w	r0, #64	; 0x40
   184f8:	f3ef 8e11 	mrs	lr, BASEPRI
   184fc:	f380 8812 	msr	BASEPRI_MAX, r0
   18500:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18504:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18506:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1850a:	1ba4      	subs	r4, r4, r6
   1850c:	403c      	ands	r4, r7
	if (available < len) {
   1850e:	42a2      	cmp	r2, r4
		len = available;
   18510:	bf88      	it	hi
   18512:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18514:	18b0      	adds	r0, r6, r2
   18516:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   18518:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1851a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1851c:	f38e 8811 	msr	BASEPRI, lr
   18520:	f3bf 8f6f 	isb	sy
   18524:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   18526:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   18528:	4290      	cmp	r0, r2
   1852a:	d119      	bne.n	18560 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1852c:	4566      	cmp	r6, ip
   1852e:	d10d      	bne.n	1854c <rng_pool_get+0x60>
	__asm__ volatile(
   18530:	f04f 0540 	mov.w	r5, #64	; 0x40
   18534:	f3ef 8011 	mrs	r0, BASEPRI
   18538:	f385 8812 	msr	BASEPRI_MAX, r5
   1853c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18540:	781d      	ldrb	r5, [r3, #0]
   18542:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18544:	f380 8811 	msr	BASEPRI, r0
   18548:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1854c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1854e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18550:	b290      	uxth	r0, r2
	available = available - len;
   18552:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   18554:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18556:	bf22      	ittt	cs
   18558:	4b06      	ldrcs	r3, [pc, #24]	; (18574 <rng_pool_get+0x88>)
   1855a:	2201      	movcs	r2, #1
   1855c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18560:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   18564:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18566:	f89e e005 	ldrb.w	lr, [lr, #5]
   1856a:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1856e:	403d      	ands	r5, r7
   18570:	e7da      	b.n	18528 <rng_pool_get+0x3c>
   18572:	bf00      	nop
   18574:	4000d000 	.word	0x4000d000

00018578 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18578:	43db      	mvns	r3, r3
{
   1857a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1857e:	f013 0501 	ands.w	r5, r3, #1
{
   18582:	460e      	mov	r6, r1
   18584:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18586:	d004      	beq.n	18592 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18588:	4821      	ldr	r0, [pc, #132]	; (18610 <entropy_nrf5_get_entropy_isr+0x98>)
   1858a:	f7ff ffaf 	bl	184ec <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   18592:	b3a2      	cbz	r2, 185fe <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   18594:	f04f 0340 	mov.w	r3, #64	; 0x40
   18598:	f3ef 8811 	mrs	r8, BASEPRI
   1859c:	f383 8812 	msr	BASEPRI_MAX, r3
   185a0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   185a4:	200d      	movs	r0, #13
   185a6:	f7fb f809 	bl	135bc <arch_irq_is_enabled>
   185aa:	4607      	mov	r7, r0
		irq_disable(IRQN);
   185ac:	200d      	movs	r0, #13
   185ae:	f7fa fff1 	bl	13594 <arch_irq_disable>
	__asm__ volatile(
   185b2:	f388 8811 	msr	BASEPRI, r8
   185b6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   185ba:	f8df 8058 	ldr.w	r8, [pc, #88]	; 18614 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   185be:	f8df 9058 	ldr.w	r9, [pc, #88]	; 18618 <entropy_nrf5_get_entropy_isr+0xa0>
   185c2:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   185c6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   185ca:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   185ce:	2301      	movs	r3, #1
   185d0:	f8c8 3000 	str.w	r3, [r8]
   185d4:	4625      	mov	r5, r4
   185d6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   185da:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   185de:	b183      	cbz	r3, 18602 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   185e0:	f7ff ff66 	bl	184b0 <random_byte_get>
			if (byte < 0) {
   185e4:	1e03      	subs	r3, r0, #0
   185e6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   185ea:	dbf6      	blt.n	185da <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   185ec:	3d01      	subs	r5, #1
   185ee:	b2ad      	uxth	r5, r5
   185f0:	5573      	strb	r3, [r6, r5]
		} while (len);
   185f2:	2d00      	cmp	r5, #0
   185f4:	d1f1      	bne.n	185da <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   185f6:	b117      	cbz	r7, 185fe <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   185f8:	200d      	movs	r0, #13
   185fa:	f7fa ffbb 	bl	13574 <arch_irq_enable>
	return cnt;
   185fe:	4620      	mov	r0, r4
   18600:	e7c5      	b.n	1858e <entropy_nrf5_get_entropy_isr+0x16>
   18602:	f3bf 8f4f 	dsb	sy
				__WFE();
   18606:	bf20      	wfe
				__SEV();
   18608:	bf40      	sev
				__WFE();
   1860a:	bf20      	wfe
   1860c:	e7e5      	b.n	185da <entropy_nrf5_get_entropy_isr+0x62>
   1860e:	bf00      	nop
   18610:	200026d8 	.word	0x200026d8
   18614:	4000d000 	.word	0x4000d000
   18618:	e000e100 	.word	0xe000e100

0001861c <entropy_nrf5_get_entropy>:
{
   1861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   18620:	4f13      	ldr	r7, [pc, #76]	; (18670 <entropy_nrf5_get_entropy+0x54>)
   18622:	460d      	mov	r5, r1
   18624:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18626:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1862a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1862e:	b914      	cbnz	r4, 18636 <entropy_nrf5_get_entropy+0x1a>
}
   18630:	4620      	mov	r0, r4
   18632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18636:	f04f 33ff 	mov.w	r3, #4294967295
   1863a:	f04f 32ff 	mov.w	r2, #4294967295
   1863e:	4638      	mov	r0, r7
   18640:	f002 fc9e 	bl	1af80 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   18644:	4622      	mov	r2, r4
   18646:	4629      	mov	r1, r5
   18648:	4640      	mov	r0, r8
   1864a:	f7ff ff4f 	bl	184ec <rng_pool_get>
   1864e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   18650:	4638      	mov	r0, r7
   18652:	f002 fc6f 	bl	1af34 <z_impl_k_sem_give>
		if (bytes == 0U) {
   18656:	b93e      	cbnz	r6, 18668 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   18658:	f04f 32ff 	mov.w	r2, #4294967295
   1865c:	f04f 33ff 	mov.w	r3, #4294967295
   18660:	4648      	mov	r0, r9
   18662:	f002 fc8d 	bl	1af80 <z_impl_k_sem_take>
			continue;
   18666:	e7e2      	b.n	1862e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   18668:	1ba4      	subs	r4, r4, r6
   1866a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1866c:	4435      	add	r5, r6
   1866e:	e7de      	b.n	1862e <entropy_nrf5_get_entropy+0x12>
   18670:	200026a8 	.word	0x200026a8

00018674 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   18674:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18676:	4c19      	ldr	r4, [pc, #100]	; (186dc <entropy_nrf5_init+0x68>)
   18678:	2201      	movs	r2, #1
   1867a:	4611      	mov	r1, r2
   1867c:	4620      	mov	r0, r4
   1867e:	f00a fc78 	bl	22f72 <z_impl_k_sem_init>
   18682:	2201      	movs	r2, #1
   18684:	2100      	movs	r1, #0
   18686:	f104 0018 	add.w	r0, r4, #24
   1868a:	f00a fc72 	bl	22f72 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1868e:	f240 4307 	movw	r3, #1031	; 0x407
   18692:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   18696:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1869a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1869c:	230c      	movs	r3, #12
   1869e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   186a2:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   186a4:	4b0e      	ldr	r3, [pc, #56]	; (186e0 <entropy_nrf5_init+0x6c>)
   186a6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   186aa:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   186ae:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   186b2:	f022 0201 	bic.w	r2, r2, #1
   186b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   186ba:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   186bc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   186c0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   186c4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   186c8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   186ca:	6019      	str	r1, [r3, #0]
   186cc:	200d      	movs	r0, #13
   186ce:	f7fa ff83 	bl	135d8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   186d2:	200d      	movs	r0, #13
   186d4:	f7fa ff4e 	bl	13574 <arch_irq_enable>

	return 0;
}
   186d8:	4628      	mov	r0, r5
   186da:	bd38      	pop	{r3, r4, r5, pc}
   186dc:	200026a8 	.word	0x200026a8
   186e0:	4000d000 	.word	0x4000d000

000186e4 <isr>:
{
   186e4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   186e6:	f7ff fee3 	bl	184b0 <random_byte_get>
	if (byte < 0) {
   186ea:	2800      	cmp	r0, #0
   186ec:	db20      	blt.n	18730 <isr+0x4c>
	uint8_t last  = rngp->last;
   186ee:	4b17      	ldr	r3, [pc, #92]	; (1874c <isr+0x68>)
   186f0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   186f4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   186f8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   186fc:	1a51      	subs	r1, r2, r1
   186fe:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   18702:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   18704:	d10d      	bne.n	18722 <isr+0x3e>
	uint8_t last  = rngp->last;
   18706:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1870a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1870e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   18712:	1a51      	subs	r1, r2, r1
   18714:	ea34 0101 	bics.w	r1, r4, r1
   18718:	d10b      	bne.n	18732 <isr+0x4e>
   1871a:	4b0d      	ldr	r3, [pc, #52]	; (18750 <isr+0x6c>)
   1871c:	2201      	movs	r2, #1
   1871e:	605a      	str	r2, [r3, #4]
}
   18720:	e00e      	b.n	18740 <isr+0x5c>
	rngp->buffer[last] = byte;
   18722:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18724:	3201      	adds	r2, #1
   18726:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18728:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1872c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   18730:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   18732:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   18734:	3201      	adds	r2, #1
   18736:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   18738:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1873c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   18740:	4804      	ldr	r0, [pc, #16]	; (18754 <isr+0x70>)
}
   18742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18746:	f002 bbf5 	b.w	1af34 <z_impl_k_sem_give>
   1874a:	bf00      	nop
   1874c:	200026a8 	.word	0x200026a8
   18750:	4000d000 	.word	0x4000d000
   18754:	200026c0 	.word	0x200026c0

00018758 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   18758:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1875a:	2301      	movs	r3, #1
   1875c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1875e:	4a11      	ldr	r2, [pc, #68]	; (187a4 <compare_int_lock+0x4c>)
   18760:	f3bf 8f5b 	dmb	ish
   18764:	43dc      	mvns	r4, r3
   18766:	e852 1f00 	ldrex	r1, [r2]
   1876a:	ea01 0c04 	and.w	ip, r1, r4
   1876e:	e842 ce00 	strex	lr, ip, [r2]
   18772:	f1be 0f00 	cmp.w	lr, #0
   18776:	d1f6      	bne.n	18766 <compare_int_lock+0xe>
   18778:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1877c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18780:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   18784:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1878c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   18790:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18794:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   18798:	420b      	tst	r3, r1
}
   1879a:	bf14      	ite	ne
   1879c:	2001      	movne	r0, #1
   1879e:	2000      	moveq	r0, #0
   187a0:	bd10      	pop	{r4, pc}
   187a2:	bf00      	nop
   187a4:	20002700 	.word	0x20002700

000187a8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   187a8:	4919      	ldr	r1, [pc, #100]	; (18810 <sys_clock_timeout_handler+0x68>)
{
   187aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187ac:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   187ae:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   187b2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   187b4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   187b8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   187bc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   187be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   187c2:	d222      	bcs.n	1880a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   187c4:	4b13      	ldr	r3, [pc, #76]	; (18814 <sys_clock_timeout_handler+0x6c>)
   187c6:	681b      	ldr	r3, [r3, #0]
   187c8:	0a1a      	lsrs	r2, r3, #8
   187ca:	061b      	lsls	r3, r3, #24
   187cc:	195e      	adds	r6, r3, r5
   187ce:	4b12      	ldr	r3, [pc, #72]	; (18818 <sys_clock_timeout_handler+0x70>)
   187d0:	f142 0700 	adc.w	r7, r2, #0
   187d4:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   187d8:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   187da:	f003 f9f3 	bl	1bbc4 <sys_clock_announce>
    return p_reg->CC[ch];
   187de:	00a3      	lsls	r3, r4, #2
   187e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   187e4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   187e8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   187ec:	42aa      	cmp	r2, r5
   187ee:	d10b      	bne.n	18808 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   187f0:	b91e      	cbnz	r6, 187fa <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   187f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   187f6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   187fa:	4b08      	ldr	r3, [pc, #32]	; (1881c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   187fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   18800:	fa00 f404 	lsl.w	r4, r0, r4
   18804:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   18808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1880a:	2600      	movs	r6, #0
   1880c:	e7e5      	b.n	187da <sys_clock_timeout_handler+0x32>
   1880e:	bf00      	nop
   18810:	20001b48 	.word	0x20001b48
   18814:	20002704 	.word	0x20002704
   18818:	20001b30 	.word	0x20001b30
   1881c:	40011000 	.word	0x40011000

00018820 <compare_int_unlock>:
	if (key) {
   18820:	b319      	cbz	r1, 1886a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18822:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   18826:	2301      	movs	r3, #1
   18828:	4a10      	ldr	r2, [pc, #64]	; (1886c <compare_int_unlock+0x4c>)
   1882a:	4083      	lsls	r3, r0
   1882c:	e852 1f00 	ldrex	r1, [r2]
   18830:	4319      	orrs	r1, r3
   18832:	e842 1c00 	strex	ip, r1, [r2]
   18836:	f1bc 0f00 	cmp.w	ip, #0
   1883a:	d1f7      	bne.n	1882c <compare_int_unlock+0xc>
   1883c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   18840:	4a0b      	ldr	r2, [pc, #44]	; (18870 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18846:	4083      	lsls	r3, r0
   18848:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1884c:	4b09      	ldr	r3, [pc, #36]	; (18874 <compare_int_unlock+0x54>)
   1884e:	f3bf 8f5b 	dmb	ish
   18852:	681b      	ldr	r3, [r3, #0]
   18854:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   18858:	fa23 f000 	lsr.w	r0, r3, r0
   1885c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1885e:	bf42      	ittt	mi
   18860:	4b05      	ldrmi	r3, [pc, #20]	; (18878 <compare_int_unlock+0x58>)
   18862:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   18866:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1886a:	4770      	bx	lr
   1886c:	20002700 	.word	0x20002700
   18870:	40011000 	.word	0x40011000
   18874:	200026fc 	.word	0x200026fc
   18878:	e000e100 	.word	0xe000e100

0001887c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1887c:	4b0d      	ldr	r3, [pc, #52]	; (188b4 <z_nrf_rtc_timer_read+0x38>)
   1887e:	6818      	ldr	r0, [r3, #0]
   18880:	0a01      	lsrs	r1, r0, #8
   18882:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   18884:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   18888:	4b0b      	ldr	r3, [pc, #44]	; (188b8 <z_nrf_rtc_timer_read+0x3c>)
   1888a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1888e:	1818      	adds	r0, r3, r0
   18890:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   18894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18898:	d20a      	bcs.n	188b0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1889a:	4b08      	ldr	r3, [pc, #32]	; (188bc <z_nrf_rtc_timer_read+0x40>)
   1889c:	e9d3 2300 	ldrd	r2, r3, [r3]
   188a0:	4290      	cmp	r0, r2
   188a2:	eb71 0303 	sbcs.w	r3, r1, r3
   188a6:	d203      	bcs.n	188b0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   188a8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   188ac:	f141 0100 	adc.w	r1, r1, #0
}
   188b0:	4770      	bx	lr
   188b2:	bf00      	nop
   188b4:	20002704 	.word	0x20002704
   188b8:	40011000 	.word	0x40011000
   188bc:	20001b30 	.word	0x20001b30

000188c0 <compare_set>:
{
   188c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188c4:	b085      	sub	sp, #20
   188c6:	4616      	mov	r6, r2
   188c8:	4698      	mov	r8, r3
   188ca:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   188cc:	f7ff ff44 	bl	18758 <compare_int_lock>
   188d0:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   188d2:	f7ff ffd3 	bl	1887c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   188d6:	42b0      	cmp	r0, r6
   188d8:	eb71 0308 	sbcs.w	r3, r1, r8
   188dc:	d278      	bcs.n	189d0 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   188de:	4b46      	ldr	r3, [pc, #280]	; (189f8 <compare_set+0x138>)
   188e0:	1a30      	subs	r0, r6, r0
   188e2:	eb68 0101 	sbc.w	r1, r8, r1
   188e6:	4298      	cmp	r0, r3
   188e8:	f171 0300 	sbcs.w	r3, r1, #0
   188ec:	f080 8081 	bcs.w	189f2 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   188f0:	4b42      	ldr	r3, [pc, #264]	; (189fc <compare_set+0x13c>)
   188f2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   188f6:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   188fa:	45d8      	cmp	r8, fp
   188fc:	bf08      	it	eq
   188fe:	4556      	cmpeq	r6, sl
   18900:	d051      	beq.n	189a6 <compare_set+0xe6>
   18902:	ea4f 0985 	mov.w	r9, r5, lsl #2
   18906:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1890a:	f105 0750 	add.w	r7, r5, #80	; 0x50
   1890e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   18912:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18914:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18918:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1891c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   1891e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   18922:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   18926:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   18928:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1892c:	4b34      	ldr	r3, [pc, #208]	; (18a00 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1892e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   18932:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   18934:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18938:	1a40      	subs	r0, r0, r1
   1893a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1893e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   18942:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   18944:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   18948:	d107      	bne.n	1895a <compare_set+0x9a>
   1894a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   1894e:	2013      	movs	r0, #19
   18950:	f00a fd6f 	bl	23432 <z_impl_k_busy_wait>
   18954:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   18958:	4b29      	ldr	r3, [pc, #164]	; (18a00 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1895a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   1895e:	eba4 000c 	sub.w	r0, r4, ip
   18962:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   18966:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1896a:	bf88      	it	hi
   1896c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1896e:	2000      	movs	r0, #0
   18970:	6038      	str	r0, [r7, #0]
   18972:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   18974:	9801      	ldr	r0, [sp, #4]
   18976:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1897a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1897e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   18982:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   18986:	4281      	cmp	r1, r0
   18988:	d006      	beq.n	18998 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1898a:	1a20      	subs	r0, r4, r0
   1898c:	3802      	subs	r0, #2
   1898e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   18992:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18996:	d819      	bhi.n	189cc <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   18998:	1aa4      	subs	r4, r4, r2
   1899a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1899e:	eb14 0a06 	adds.w	sl, r4, r6
   189a2:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   189a6:	4915      	ldr	r1, [pc, #84]	; (189fc <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   189a8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   189aa:	012b      	lsls	r3, r5, #4
   189ac:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   189b0:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   189b4:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   189b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   189b8:	6053      	str	r3, [r2, #4]
	return ret;
   189ba:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   189bc:	4628      	mov	r0, r5
   189be:	9900      	ldr	r1, [sp, #0]
   189c0:	f7ff ff2e 	bl	18820 <compare_int_unlock>
}
   189c4:	4620      	mov	r0, r4
   189c6:	b005      	add	sp, #20
   189c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189cc:	4620      	mov	r0, r4
   189ce:	e7b1      	b.n	18934 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   189d0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   189d2:	4a0c      	ldr	r2, [pc, #48]	; (18a04 <compare_set+0x144>)
   189d4:	f3bf 8f5b 	dmb	ish
   189d8:	40ab      	lsls	r3, r5
   189da:	e852 1f00 	ldrex	r1, [r2]
   189de:	4319      	orrs	r1, r3
   189e0:	e842 1000 	strex	r0, r1, [r2]
   189e4:	2800      	cmp	r0, #0
   189e6:	d1f8      	bne.n	189da <compare_set+0x11a>
   189e8:	f3bf 8f5b 	dmb	ish
   189ec:	46b2      	mov	sl, r6
   189ee:	46c3      	mov	fp, r8
   189f0:	e7d9      	b.n	189a6 <compare_set+0xe6>
			return -EINVAL;
   189f2:	f06f 0415 	mvn.w	r4, #21
   189f6:	e7e1      	b.n	189bc <compare_set+0xfc>
   189f8:	01000001 	.word	0x01000001
   189fc:	20001b38 	.word	0x20001b38
   18a00:	40011000 	.word	0x40011000
   18a04:	200026fc 	.word	0x200026fc

00018a08 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   18a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   18a0a:	4b19      	ldr	r3, [pc, #100]	; (18a70 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   18a0c:	4d19      	ldr	r5, [pc, #100]	; (18a74 <sys_clock_driver_init+0x6c>)
   18a0e:	2400      	movs	r4, #0
   18a10:	f04f 30ff 	mov.w	r0, #4294967295
   18a14:	f04f 31ff 	mov.w	r1, #4294967295
   18a18:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   18a1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   18a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18a24:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a28:	4b13      	ldr	r3, [pc, #76]	; (18a78 <sys_clock_driver_init+0x70>)
   18a2a:	2602      	movs	r6, #2
   18a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   18a30:	2101      	movs	r1, #1
   18a32:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   18a36:	2011      	movs	r0, #17
   18a38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   18a3c:	4622      	mov	r2, r4
   18a3e:	f7fa fdcb 	bl	135d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   18a42:	2011      	movs	r0, #17
   18a44:	f7fa fd96 	bl	13574 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   18a48:	4a0c      	ldr	r2, [pc, #48]	; (18a7c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   18a4a:	2301      	movs	r3, #1
   18a4c:	60ab      	str	r3, [r5, #8]
   18a4e:	602b      	str	r3, [r5, #0]
   18a50:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   18a52:	4b0b      	ldr	r3, [pc, #44]	; (18a80 <sys_clock_driver_init+0x78>)
   18a54:	4a0b      	ldr	r2, [pc, #44]	; (18a84 <sys_clock_driver_init+0x7c>)
   18a56:	9300      	str	r3, [sp, #0]
   18a58:	9401      	str	r4, [sp, #4]
   18a5a:	2300      	movs	r3, #0
   18a5c:	4620      	mov	r0, r4
   18a5e:	f7ff ff2f 	bl	188c0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   18a62:	4630      	mov	r0, r6
   18a64:	f7ff f844 	bl	17af0 <z_nrf_clock_control_lf_on>

	return 0;
}
   18a68:	4620      	mov	r0, r4
   18a6a:	b002      	add	sp, #8
   18a6c:	bd70      	pop	{r4, r5, r6, pc}
   18a6e:	bf00      	nop
   18a70:	20001b38 	.word	0x20001b38
   18a74:	40011000 	.word	0x40011000
   18a78:	e000e100 	.word	0xe000e100
   18a7c:	20002700 	.word	0x20002700
   18a80:	000187a9 	.word	0x000187a9
   18a84:	007fffff 	.word	0x007fffff

00018a88 <rtc_nrf_isr>:
{
   18a88:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
   18a8c:	4c2c      	ldr	r4, [pc, #176]	; (18b40 <rtc_nrf_isr+0xb8>)
   18a8e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   18a92:	0799      	lsls	r1, r3, #30
   18a94:	d50b      	bpl.n	18aae <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18a96:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18a9a:	b143      	cbz	r3, 18aae <rtc_nrf_isr+0x26>
		overflow_cnt++;
   18a9c:	4a29      	ldr	r2, [pc, #164]	; (18b44 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18a9e:	2300      	movs	r3, #0
   18aa0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18aa4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   18aa8:	6813      	ldr	r3, [r2, #0]
   18aaa:	3301      	adds	r3, #1
   18aac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18aae:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18ab2:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   18ab4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   18ab8:	03d2      	lsls	r2, r2, #15
   18aba:	d52d      	bpl.n	18b18 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18abc:	f3bf 8f5b 	dmb	ish
   18ac0:	4a21      	ldr	r2, [pc, #132]	; (18b48 <rtc_nrf_isr+0xc0>)
   18ac2:	e852 1f00 	ldrex	r1, [r2]
   18ac6:	f021 0001 	bic.w	r0, r1, #1
   18aca:	e842 0500 	strex	r5, r0, [r2]
   18ace:	2d00      	cmp	r5, #0
   18ad0:	d1f7      	bne.n	18ac2 <rtc_nrf_isr+0x3a>
   18ad2:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   18ad6:	b911      	cbnz	r1, 18ade <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18ad8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
   18adc:	b1e2      	cbz	r2, 18b18 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18ade:	2500      	movs	r5, #0
   18ae0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   18ae4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ae8:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   18aec:	f7ff fec6 	bl	1887c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18af0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18af4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   18af6:	4b15      	ldr	r3, [pc, #84]	; (18b4c <rtc_nrf_isr+0xc4>)
   18af8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   18afc:	42b0      	cmp	r0, r6
   18afe:	41b9      	sbcs	r1, r7
   18b00:	d20f      	bcs.n	18b22 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   18b02:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18b04:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   18b08:	b141      	cbz	r1, 18b1c <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
   18b0a:	f8cd 8000 	str.w	r8, [sp]
   18b0e:	4632      	mov	r2, r6
   18b10:	463b      	mov	r3, r7
   18b12:	2000      	movs	r0, #0
   18b14:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   18b16:	e001      	b.n	18b1c <rtc_nrf_isr+0x94>
   18b18:	f383 8810 	msr	PRIMASK, r3
}
   18b1c:	b002      	add	sp, #8
   18b1e:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18b22:	f04f 3aff 	mov.w	sl, #4294967295
   18b26:	f04f 3bff 	mov.w	fp, #4294967295
			user_context = cc_data[chan].user_context;
   18b2a:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   18b2e:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
   18b32:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   18b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18b38:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   18b3c:	e7e2      	b.n	18b04 <rtc_nrf_isr+0x7c>
   18b3e:	bf00      	nop
   18b40:	40011000 	.word	0x40011000
   18b44:	20002704 	.word	0x20002704
   18b48:	200026fc 	.word	0x200026fc
   18b4c:	20001b38 	.word	0x20001b38

00018b50 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18b50:	1c43      	adds	r3, r0, #1
{
   18b52:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18b54:	d021      	beq.n	18b9a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18b56:	2801      	cmp	r0, #1
   18b58:	dd21      	ble.n	18b9e <sys_clock_set_timeout+0x4e>
   18b5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b5e:	da20      	bge.n	18ba2 <sys_clock_set_timeout+0x52>
   18b60:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   18b62:	f7ff fe8b 	bl	1887c <z_nrf_rtc_timer_read>
   18b66:	4b10      	ldr	r3, [pc, #64]	; (18ba8 <sys_clock_set_timeout+0x58>)
   18b68:	e9d3 1300 	ldrd	r1, r3, [r3]
   18b6c:	1a40      	subs	r0, r0, r1
		ticks = 0;
   18b6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18b72:	bf28      	it	cs
   18b74:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   18b76:	3001      	adds	r0, #1
   18b78:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   18b7a:	480c      	ldr	r0, [pc, #48]	; (18bac <sys_clock_set_timeout+0x5c>)
   18b7c:	4282      	cmp	r2, r0
   18b7e:	bf28      	it	cs
   18b80:	4602      	movcs	r2, r0
   18b82:	1852      	adds	r2, r2, r1
   18b84:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   18b88:	4909      	ldr	r1, [pc, #36]	; (18bb0 <sys_clock_set_timeout+0x60>)
   18b8a:	9001      	str	r0, [sp, #4]
   18b8c:	9100      	str	r1, [sp, #0]
   18b8e:	f143 0300 	adc.w	r3, r3, #0
   18b92:	f7ff fe95 	bl	188c0 <compare_set>
}
   18b96:	b002      	add	sp, #8
   18b98:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   18b9a:	4804      	ldr	r0, [pc, #16]	; (18bac <sys_clock_set_timeout+0x5c>)
   18b9c:	e7e0      	b.n	18b60 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   18b9e:	2400      	movs	r4, #0
   18ba0:	e7df      	b.n	18b62 <sys_clock_set_timeout+0x12>
   18ba2:	4c02      	ldr	r4, [pc, #8]	; (18bac <sys_clock_set_timeout+0x5c>)
   18ba4:	e7dd      	b.n	18b62 <sys_clock_set_timeout+0x12>
   18ba6:	bf00      	nop
   18ba8:	20001b48 	.word	0x20001b48
   18bac:	007fffff 	.word	0x007fffff
   18bb0:	000187a9 	.word	0x000187a9

00018bb4 <sys_clock_elapsed>:
{
   18bb4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   18bb6:	f7ff fe61 	bl	1887c <z_nrf_rtc_timer_read>
   18bba:	4b02      	ldr	r3, [pc, #8]	; (18bc4 <sys_clock_elapsed+0x10>)
   18bbc:	681b      	ldr	r3, [r3, #0]
}
   18bbe:	1ac0      	subs	r0, r0, r3
   18bc0:	bd08      	pop	{r3, pc}
   18bc2:	bf00      	nop
   18bc4:	20001b48 	.word	0x20001b48

00018bc8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   18bc8:	4602      	mov	r2, r0
   18bca:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   18bcc:	4801      	ldr	r0, [pc, #4]	; (18bd4 <multithreading_lock_acquire+0xc>)
   18bce:	f002 b8c3 	b.w	1ad58 <z_impl_k_mutex_lock>
   18bd2:	bf00      	nop
   18bd4:	20000a1c 	.word	0x20000a1c

00018bd8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   18bd8:	4801      	ldr	r0, [pc, #4]	; (18be0 <multithreading_lock_release+0x8>)
   18bda:	f002 b935 	b.w	1ae48 <z_impl_k_mutex_unlock>
   18bde:	bf00      	nop
   18be0:	20000a1c 	.word	0x20000a1c

00018be4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   18be4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   18be6:	4804      	ldr	r0, [pc, #16]	; (18bf8 <hci_driver_init+0x14>)
   18be8:	f7fb fdae 	bl	14748 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   18bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   18bf0:	4802      	ldr	r0, [pc, #8]	; (18bfc <hci_driver_init+0x18>)
   18bf2:	f7ec b8a5 	b.w	4d40 <sdc_init>
   18bf6:	bf00      	nop
   18bf8:	0002450c 	.word	0x0002450c
   18bfc:	000228ab 	.word	0x000228ab

00018c00 <hci_driver_open>:
{
   18c00:	b570      	push	{r4, r5, r6, lr}
   18c02:	b088      	sub	sp, #32
		hci_ecdh_init();
   18c04:	f000 fcd6 	bl	195b4 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   18c08:	a803      	add	r0, sp, #12
   18c0a:	f7ec f807 	bl	4c1c <sdc_build_revision_get>
			err = sdc_support_adv();
   18c0e:	f7ec f915 	bl	4e3c <sdc_support_adv>
			if (err) {
   18c12:	b118      	cbz	r0, 18c1c <hci_driver_open+0x1c>
				return -ENOTSUP;
   18c14:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   18c18:	b008      	add	sp, #32
   18c1a:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_peripheral();
   18c1c:	f7ec f93e 	bl	4e9c <sdc_support_peripheral>
		if (err) {
   18c20:	2800      	cmp	r0, #0
   18c22:	d1f7      	bne.n	18c14 <hci_driver_open+0x14>
		err = sdc_support_dle();
   18c24:	f7ec f91a 	bl	4e5c <sdc_support_dle>
		if (err) {
   18c28:	2800      	cmp	r0, #0
   18c2a:	d1f3      	bne.n	18c14 <hci_driver_open+0x14>
		err = sdc_support_le_2m_phy();
   18c2c:	f7ec f926 	bl	4e7c <sdc_support_le_2m_phy>
		if (err) {
   18c30:	4605      	mov	r5, r0
   18c32:	2800      	cmp	r0, #0
   18c34:	d1ee      	bne.n	18c14 <hci_driver_open+0x14>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c36:	466c      	mov	r4, sp
   18c38:	4622      	mov	r2, r4
   18c3a:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   18c3c:	f88d 0000 	strb.w	r0, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c40:	f7eb fffa 	bl	4c38 <sdc_cfg_set>
	if (required_memory < 0) {
   18c44:	2800      	cmp	r0, #0
   18c46:	dbe7      	blt.n	18c18 <hci_driver_open+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   18c48:	2601      	movs	r6, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c4a:	4622      	mov	r2, r4
   18c4c:	2102      	movs	r1, #2
   18c4e:	4628      	mov	r0, r5
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   18c50:	f88d 6000 	strb.w	r6, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c54:	f7eb fff0 	bl	4c38 <sdc_cfg_set>
	if (required_memory < 0) {
   18c58:	2800      	cmp	r0, #0
   18c5a:	dbdd      	blt.n	18c18 <hci_driver_open+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   18c5c:	4b2d      	ldr	r3, [pc, #180]	; (18d14 <hci_driver_open+0x114>)
   18c5e:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c60:	4622      	mov	r2, r4
   18c62:	2103      	movs	r1, #3
   18c64:	4628      	mov	r0, r5
   18c66:	f7eb ffe7 	bl	4c38 <sdc_cfg_set>
	if (required_memory < 0) {
   18c6a:	2800      	cmp	r0, #0
   18c6c:	dbd4      	blt.n	18c18 <hci_driver_open+0x18>
	cfg.event_length.event_length_us =
   18c6e:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c72:	4622      	mov	r2, r4
   18c74:	2104      	movs	r1, #4
   18c76:	4628      	mov	r0, r5
	cfg.event_length.event_length_us =
   18c78:	9300      	str	r3, [sp, #0]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c7a:	f7eb ffdd 	bl	4c38 <sdc_cfg_set>
	if (required_memory < 0) {
   18c7e:	2800      	cmp	r0, #0
   18c80:	dbca      	blt.n	18c18 <hci_driver_open+0x18>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c82:	4622      	mov	r2, r4
   18c84:	2105      	movs	r1, #5
   18c86:	4628      	mov	r0, r5
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   18c88:	f88d 6000 	strb.w	r6, [sp]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c8c:	f7eb ffd4 	bl	4c38 <sdc_cfg_set>
	if (required_memory < 0) {
   18c90:	2800      	cmp	r0, #0
   18c92:	dbc1      	blt.n	18c18 <hci_driver_open+0x18>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   18c94:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18c96:	4622      	mov	r2, r4
   18c98:	2107      	movs	r1, #7
   18c9a:	4628      	mov	r0, r5
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   18c9c:	f8ad 3000 	strh.w	r3, [sp]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   18ca0:	f7eb ffca 	bl	4c38 <sdc_cfg_set>
		if (required_memory < 0) {
   18ca4:	2800      	cmp	r0, #0
   18ca6:	dbb7      	blt.n	18c18 <hci_driver_open+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   18ca8:	f5b0 6fb0 	cmp.w	r0, #1408	; 0x580
   18cac:	dd08      	ble.n	18cc0 <hci_driver_open+0xc0>
		k_panic();
   18cae:	4040      	eors	r0, r0
   18cb0:	f380 8811 	msr	BASEPRI, r0
   18cb4:	f04f 0004 	mov.w	r0, #4
   18cb8:	df02      	svc	2
		return -ENOMEM;
   18cba:	f06f 000b 	mvn.w	r0, #11
   18cbe:	e7ab      	b.n	18c18 <hci_driver_open+0x18>
   18cc0:	4815      	ldr	r0, [pc, #84]	; (18d18 <hci_driver_open+0x118>)
   18cc2:	f009 ff95 	bl	22bf0 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   18cc6:	b308      	cbz	r0, 18d0c <hci_driver_open+0x10c>
	sdc_rand_source_t rand_functions = {
   18cc8:	4b14      	ldr	r3, [pc, #80]	; (18d1c <hci_driver_open+0x11c>)
   18cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   18cd2:	4620      	mov	r0, r4
   18cd4:	f7ec f934 	bl	4f40 <sdc_rand_source_register>
	if (err) {
   18cd8:	b9a8      	cbnz	r0, 18d06 <hci_driver_open+0x106>
	k_work_init(&receive_work, receive_work_handler);
   18cda:	4911      	ldr	r1, [pc, #68]	; (18d20 <hci_driver_open+0x120>)
   18cdc:	4811      	ldr	r0, [pc, #68]	; (18d24 <hci_driver_open+0x124>)
   18cde:	f00a f9c8 	bl	23072 <k_work_init>
	err = MULTITHREADING_LOCK_ACQUIRE();
   18ce2:	f04f 30ff 	mov.w	r0, #4294967295
   18ce6:	f04f 31ff 	mov.w	r1, #4294967295
   18cea:	f7ff ff6d 	bl	18bc8 <multithreading_lock_acquire>
	if (!err) {
   18cee:	4604      	mov	r4, r0
   18cf0:	b930      	cbnz	r0, 18d00 <hci_driver_open+0x100>
		err = sdc_enable(hci_driver_receive_process, sdc_mempool);
   18cf2:	490d      	ldr	r1, [pc, #52]	; (18d28 <hci_driver_open+0x128>)
   18cf4:	480d      	ldr	r0, [pc, #52]	; (18d2c <hci_driver_open+0x12c>)
   18cf6:	f7eb fffb 	bl	4cf0 <sdc_enable>
   18cfa:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18cfc:	f7ff ff6c 	bl	18bd8 <multithreading_lock_release>
	if (err < 0) {
   18d00:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   18d04:	e788      	b.n	18c18 <hci_driver_open+0x18>
		return -EINVAL;
   18d06:	f06f 0015 	mvn.w	r0, #21
   18d0a:	e785      	b.n	18c18 <hci_driver_open+0x18>
		return -ENODEV;
   18d0c:	f06f 0012 	mvn.w	r0, #18
   18d10:	e782      	b.n	18c18 <hci_driver_open+0x18>
   18d12:	bf00      	nop
   18d14:	02031b1b 	.word	0x02031b1b
   18d18:	000239a0 	.word	0x000239a0
   18d1c:	00023c98 	.word	0x00023c98
   18d20:	00022929 	.word	0x00022929
   18d24:	20002708 	.word	0x20002708
   18d28:	20003391 	.word	0x20003391
   18d2c:	00018d81 	.word	0x00018d81

00018d30 <rand_prio_low_vector_get>:
{
   18d30:	b538      	push	{r3, r4, r5, lr}
   18d32:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   18d34:	4807      	ldr	r0, [pc, #28]	; (18d54 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   18d36:	6883      	ldr	r3, [r0, #8]
   18d38:	685d      	ldr	r5, [r3, #4]
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   18d3a:	460a      	mov	r2, r1
   18d3c:	b135      	cbz	r5, 18d4c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   18d3e:	2300      	movs	r3, #0
   18d40:	4621      	mov	r1, r4
   18d42:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   18d44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   18d48:	b2c0      	uxtb	r0, r0
   18d4a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   18d4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18d50:	e7f8      	b.n	18d44 <rand_prio_low_vector_get+0x14>
   18d52:	bf00      	nop
   18d54:	000239a0 	.word	0x000239a0

00018d58 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   18d58:	4901      	ldr	r1, [pc, #4]	; (18d60 <receive_signal_raise+0x8>)
   18d5a:	4802      	ldr	r0, [pc, #8]	; (18d64 <receive_signal_raise+0xc>)
   18d5c:	f00a b9a2 	b.w	230a4 <k_work_submit_to_queue>
   18d60:	20002708 	.word	0x20002708
   18d64:	20001bd0 	.word	0x20001bd0

00018d68 <rand_prio_low_vector_get_blocking>:
{
   18d68:	b410      	push	{r4}
   18d6a:	4603      	mov	r3, r0
   18d6c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   18d6e:	4803      	ldr	r0, [pc, #12]	; (18d7c <rand_prio_low_vector_get_blocking+0x14>)
   18d70:	6881      	ldr	r1, [r0, #8]
   18d72:	680c      	ldr	r4, [r1, #0]
   18d74:	4619      	mov	r1, r3
   18d76:	4623      	mov	r3, r4
}
   18d78:	bc10      	pop	{r4}
   18d7a:	4718      	bx	r3
   18d7c:	000239a0 	.word	0x000239a0

00018d80 <hci_driver_receive_process>:
{
   18d80:	b570      	push	{r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18d82:	f04f 30ff 	mov.w	r0, #4294967295
   18d86:	f04f 31ff 	mov.w	r1, #4294967295
   18d8a:	f7ff ff1d 	bl	18bc8 <multithreading_lock_acquire>
	if (!errcode) {
   18d8e:	b338      	cbz	r0, 18de0 <hci_driver_receive_process+0x60>
		return false;
   18d90:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   18d92:	f04f 30ff 	mov.w	r0, #4294967295
   18d96:	f04f 31ff 	mov.w	r1, #4294967295
   18d9a:	f7ff ff15 	bl	18bc8 <multithreading_lock_acquire>
	if (!errcode) {
   18d9e:	2800      	cmp	r0, #0
   18da0:	d14a      	bne.n	18e38 <hci_driver_receive_process+0xb8>
		errcode = sdc_hci_data_get(p_hci_buffer);
   18da2:	4d27      	ldr	r5, [pc, #156]	; (18e40 <hci_driver_receive_process+0xc0>)
   18da4:	4628      	mov	r0, r5
   18da6:	f7f4 fbb5 	bl	d514 <sdc_hci_data_get>
   18daa:	4606      	mov	r6, r0
		MULTITHREADING_LOCK_RELEASE();
   18dac:	f7ff ff14 	bl	18bd8 <multithreading_lock_release>
	if (errcode) {
   18db0:	2e00      	cmp	r6, #0
   18db2:	d141      	bne.n	18e38 <hci_driver_receive_process+0xb8>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   18db4:	f04f 32ff 	mov.w	r2, #4294967295
   18db8:	f04f 33ff 	mov.w	r3, #4294967295
   18dbc:	2003      	movs	r0, #3
   18dbe:	f7fb f815 	bl	13dec <bt_buf_get_rx>
	if (!data_buf) {
   18dc2:	4604      	mov	r4, r0
   18dc4:	b140      	cbz	r0, 18dd8 <hci_driver_receive_process+0x58>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   18dc6:	886a      	ldrh	r2, [r5, #2]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18dc8:	4629      	mov	r1, r5
   18dca:	3204      	adds	r2, #4
   18dcc:	3008      	adds	r0, #8
   18dce:	f009 fb57 	bl	22480 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   18dd2:	4620      	mov	r0, r4
   18dd4:	f7fb fc8e 	bl	146f4 <bt_recv>
}
   18dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   18ddc:	f7ff bfbc 	b.w	18d58 <receive_signal_raise>
		errcode = hci_internal_evt_get(p_hci_buffer);
   18de0:	4d17      	ldr	r5, [pc, #92]	; (18e40 <hci_driver_receive_process+0xc0>)
   18de2:	4628      	mov	r0, r5
   18de4:	f000 faea 	bl	193bc <hci_internal_evt_get>
   18de8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   18dea:	f7ff fef5 	bl	18bd8 <multithreading_lock_release>
	if (errcode) {
   18dee:	2c00      	cmp	r4, #0
   18df0:	d1ce      	bne.n	18d90 <hci_driver_receive_process+0x10>
	switch (hdr->evt) {
   18df2:	7828      	ldrb	r0, [r5, #0]
   18df4:	283e      	cmp	r0, #62	; 0x3e
   18df6:	d015      	beq.n	18e24 <hci_driver_receive_process+0xa4>
   18df8:	28ff      	cmp	r0, #255	; 0xff
   18dfa:	d01a      	beq.n	18e32 <hci_driver_receive_process+0xb2>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18dfc:	f04f 32ff 	mov.w	r2, #4294967295
   18e00:	f04f 33ff 	mov.w	r3, #4294967295
   18e04:	4621      	mov	r1, r4
   18e06:	f7fb f81b 	bl	13e40 <bt_buf_get_evt>
	if (!evt_buf) {
   18e0a:	4604      	mov	r4, r0
   18e0c:	b140      	cbz	r0, 18e20 <hci_driver_receive_process+0xa0>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   18e0e:	786a      	ldrb	r2, [r5, #1]
   18e10:	490b      	ldr	r1, [pc, #44]	; (18e40 <hci_driver_receive_process+0xc0>)
   18e12:	3202      	adds	r2, #2
   18e14:	3008      	adds	r0, #8
   18e16:	f009 fb33 	bl	22480 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   18e1a:	4620      	mov	r0, r4
   18e1c:	f7fb fc6a 	bl	146f4 <bt_recv>
	return true;
   18e20:	2401      	movs	r4, #1
   18e22:	e7b6      	b.n	18d92 <hci_driver_receive_process+0x12>
		switch (me->subevent) {
   18e24:	78ab      	ldrb	r3, [r5, #2]
   18e26:	2b02      	cmp	r3, #2
		switch (subevent) {
   18e28:	d1e8      	bne.n	18dfc <hci_driver_receive_process+0x7c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   18e2a:	2200      	movs	r2, #0
   18e2c:	2300      	movs	r3, #0
		switch (subevent) {
   18e2e:	2401      	movs	r4, #1
   18e30:	e7e8      	b.n	18e04 <hci_driver_receive_process+0x84>
   18e32:	78ab      	ldrb	r3, [r5, #2]
   18e34:	2b80      	cmp	r3, #128	; 0x80
   18e36:	e7f7      	b.n	18e28 <hci_driver_receive_process+0xa8>
	if (received_evt || received_data) {
   18e38:	2c00      	cmp	r4, #0
   18e3a:	d1cd      	bne.n	18dd8 <hci_driver_receive_process+0x58>
}
   18e3c:	bd70      	pop	{r4, r5, r6, pc}
   18e3e:	bf00      	nop
   18e40:	2000334b 	.word	0x2000334b

00018e44 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   18e44:	b538      	push	{r3, r4, r5, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   18e46:	4cd6      	ldr	r4, [pc, #856]	; (191a0 <hci_internal_cmd_put+0x35c>)
   18e48:	7823      	ldrb	r3, [r4, #0]
   18e4a:	2b00      	cmp	r3, #0
   18e4c:	f040 82b1 	bne.w	193b2 <hci_internal_cmd_put+0x56e>
	return ((uint16_t)src[1] << 8) | src[0];
   18e50:	8805      	ldrh	r5, [r0, #0]
	switch (BT_OGF(opcode)) {
   18e52:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   18e56:	b22b      	sxth	r3, r5
   18e58:	ea4f 2295 	mov.w	r2, r5, lsr #10
   18e5c:	d209      	bcs.n	18e72 <hci_internal_cmd_put+0x2e>
   18e5e:	b15a      	cbz	r2, 18e78 <hci_internal_cmd_put+0x34>
   18e60:	3a01      	subs	r2, #1
   18e62:	2a07      	cmp	r2, #7
   18e64:	d808      	bhi.n	18e78 <hci_internal_cmd_put+0x34>
   18e66:	e8df f002 	tbb	[pc, r2]
   18e6a:	0709      	.short	0x0709
   18e6c:	07075925 	.word	0x07075925
   18e70:	d107      	.short	0xd107
   18e72:	2a3f      	cmp	r2, #63	; 0x3f
   18e74:	f000 822b 	beq.w	192ce <hci_internal_cmd_put+0x48a>
	switch (opcode)	{
   18e78:	2001      	movs	r0, #1
   18e7a:	e00e      	b.n	18e9a <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   18e7c:	f240 4206 	movw	r2, #1030	; 0x406
   18e80:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18e82:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18e86:	d006      	beq.n	18e96 <hci_internal_cmd_put+0x52>
   18e88:	f240 421d 	movw	r2, #1053	; 0x41d
   18e8c:	4293      	cmp	r3, r2
   18e8e:	d1f3      	bne.n	18e78 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   18e90:	f7f4 fc75 	bl	d77e <sdc_hci_cmd_lc_read_remote_version_information>
   18e94:	e001      	b.n	18e9a <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   18e96:	f7f4 fc70 	bl	d77a <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   18e9a:	230f      	movs	r3, #15
   18e9c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   18e9e:	2304      	movs	r3, #4
   18ea0:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18ea2:	2301      	movs	r3, #1
	evt_data->status = status_code;
   18ea4:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   18ea6:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   18ea8:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   18eac:	2301      	movs	r3, #1
   18eae:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   18eb0:	2000      	movs	r0, #0
}
   18eb2:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   18eb4:	f640 4263 	movw	r2, #3171	; 0xc63
   18eb8:	4293      	cmp	r3, r2
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   18eba:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   18ebe:	d025      	beq.n	18f0c <hci_internal_cmd_put+0xc8>
   18ec0:	dc0f      	bgt.n	18ee2 <hci_internal_cmd_put+0x9e>
   18ec2:	f640 4203 	movw	r2, #3075	; 0xc03
   18ec6:	4293      	cmp	r3, r2
   18ec8:	d018      	beq.n	18efc <hci_internal_cmd_put+0xb8>
   18eca:	f640 422d 	movw	r2, #3117	; 0xc2d
   18ece:	4293      	cmp	r3, r2
   18ed0:	d017      	beq.n	18f02 <hci_internal_cmd_put+0xbe>
   18ed2:	f640 4201 	movw	r2, #3073	; 0xc01
   18ed6:	4293      	cmp	r3, r2
   18ed8:	d1ce      	bne.n	18e78 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   18eda:	f7f4 fb44 	bl	d566 <sdc_hci_cmd_cb_set_event_mask>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   18ede:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   18ee0:	e091      	b.n	19006 <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   18ee2:	f640 427b 	movw	r2, #3195	; 0xc7b
   18ee6:	4293      	cmp	r3, r2
   18ee8:	d013      	beq.n	18f12 <hci_internal_cmd_put+0xce>
   18eea:	f640 427c 	movw	r2, #3196	; 0xc7c
   18eee:	4293      	cmp	r3, r2
   18ef0:	d1c2      	bne.n	18e78 <hci_internal_cmd_put+0x34>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   18ef2:	49ac      	ldr	r1, [pc, #688]	; (191a4 <hci_internal_cmd_put+0x360>)
   18ef4:	f7f4 fb41 	bl	d57a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   18ef8:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   18efa:	e084      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_reset();
   18efc:	f7ec f914 	bl	5128 <sdc_hci_cmd_cb_reset>
   18f00:	e7ed      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   18f02:	49a8      	ldr	r1, [pc, #672]	; (191a4 <hci_internal_cmd_put+0x360>)
   18f04:	f7f4 fb2d 	bl	d562 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   18f08:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   18f0a:	e07c      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   18f0c:	f7f4 fb30 	bl	d570 <sdc_hci_cmd_cb_set_event_mask_page_2>
   18f10:	e7e5      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   18f12:	49a4      	ldr	r1, [pc, #656]	; (191a4 <hci_internal_cmd_put+0x360>)
   18f14:	f7f4 fb23 	bl	d55e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   18f18:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   18f1a:	e074      	b.n	19006 <hci_internal_cmd_put+0x1c2>
	switch (opcode)	{
   18f1c:	f5a5 5380 	sub.w	r3, r5, #4096	; 0x1000
   18f20:	3b01      	subs	r3, #1
   18f22:	2b08      	cmp	r3, #8
   18f24:	d8a8      	bhi.n	18e78 <hci_internal_cmd_put+0x34>
   18f26:	a201      	add	r2, pc, #4	; (adr r2, 18f2c <hci_internal_cmd_put+0xe8>)
   18f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18f2c:	00018f51 	.word	0x00018f51
   18f30:	00018f5b 	.word	0x00018f5b
   18f34:	00018fd7 	.word	0x00018fd7
   18f38:	00018e79 	.word	0x00018e79
   18f3c:	00018e79 	.word	0x00018e79
   18f40:	00018e79 	.word	0x00018e79
   18f44:	00018e79 	.word	0x00018e79
   18f48:	00018e79 	.word	0x00018e79
   18f4c:	00018fff 	.word	0x00018fff
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   18f50:	4894      	ldr	r0, [pc, #592]	; (191a4 <hci_internal_cmd_put+0x360>)
   18f52:	f7f4 fbc7 	bl	d6e4 <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   18f56:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   18f58:	e055      	b.n	19006 <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   18f5a:	4892      	ldr	r0, [pc, #584]	; (191a4 <hci_internal_cmd_put+0x360>)
   18f5c:	222f      	movs	r2, #47	; 0x2f
   18f5e:	2100      	movs	r1, #0
   18f60:	f00a fc40 	bl	237e4 <memset>
	cmds->hci_disconnect = 1;
   18f64:	2320      	movs	r3, #32
   18f66:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   18f68:	2380      	movs	r3, #128	; 0x80
   18f6a:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   18f6c:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18f70:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   18f72:	2304      	movs	r3, #4
   18f74:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   18f76:	2328      	movs	r3, #40	; 0x28
   18f78:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   18f7a:	2302      	movs	r3, #2
   18f7c:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   18f7e:	2304      	movs	r3, #4
   18f80:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   18f82:	f06f 0308 	mvn.w	r3, #8
   18f86:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   18f8a:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   18f8e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   18f92:	f06f 030c 	mvn.w	r3, #12
   18f96:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   18f9a:	237e      	movs	r3, #126	; 0x7e
   18f9c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   18fa0:	2330      	movs	r3, #48	; 0x30
   18fa2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   18fa6:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   18faa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   18fae:	237f      	movs	r3, #127	; 0x7f
   18fb0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   18fb4:	f06f 0301 	mvn.w	r3, #1
   18fb8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   18fbc:	2301      	movs	r3, #1
   18fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   18fc2:	2380      	movs	r3, #128	; 0x80
   18fc4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   18fc8:	2304      	movs	r3, #4
   18fca:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   18fce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   18fd2:	2344      	movs	r3, #68	; 0x44
   18fd4:	e13d      	b.n	19252 <hci_internal_cmd_put+0x40e>
	memset(features, 0, sizeof(*features));
   18fd6:	4b73      	ldr	r3, [pc, #460]	; (191a4 <hci_internal_cmd_put+0x360>)
   18fd8:	2000      	movs	r0, #0
   18fda:	f8c4 0007 	str.w	r0, [r4, #7]
   18fde:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   18fe0:	7ae3      	ldrb	r3, [r4, #11]
   18fe2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   18fe6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   18fea:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   18fec:	230c      	movs	r3, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18fee:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   18ff0:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   18ff2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   18ff4:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   18ff6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   18ff8:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   18ffa:	71a0      	strb	r0, [r4, #6]
}
   18ffc:	e756      	b.n	18eac <hci_internal_cmd_put+0x68>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   18ffe:	4869      	ldr	r0, [pc, #420]	; (191a4 <hci_internal_cmd_put+0x360>)
   19000:	f7f4 fb6e 	bl	d6e0 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   19004:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   19006:	2801      	cmp	r0, #1
   19008:	d1f1      	bne.n	18fee <hci_internal_cmd_put+0x1aa>
   1900a:	e746      	b.n	18e9a <hci_internal_cmd_put+0x56>
	switch (opcode)	{
   1900c:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   19010:	3b01      	subs	r3, #1
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   19012:	3003      	adds	r0, #3
	switch (opcode)	{
   19014:	2b5d      	cmp	r3, #93	; 0x5d
   19016:	f63f af2f 	bhi.w	18e78 <hci_internal_cmd_put+0x34>
   1901a:	a201      	add	r2, pc, #4	; (adr r2, 19020 <hci_internal_cmd_put+0x1dc>)
   1901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19020:	00019199 	.word	0x00019199
   19024:	000191a9 	.word	0x000191a9
   19028:	000191b1 	.word	0x000191b1
   1902c:	00018e79 	.word	0x00018e79
   19030:	000191d5 	.word	0x000191d5
   19034:	000191db 	.word	0x000191db
   19038:	000191e1 	.word	0x000191e1
   1903c:	000191eb 	.word	0x000191eb
   19040:	000191f1 	.word	0x000191f1
   19044:	000191f7 	.word	0x000191f7
   19048:	00018e79 	.word	0x00018e79
   1904c:	00018e79 	.word	0x00018e79
   19050:	00018e79 	.word	0x00018e79
   19054:	00018e79 	.word	0x00018e79
   19058:	000191fd 	.word	0x000191fd
   1905c:	00019205 	.word	0x00019205
   19060:	0001920b 	.word	0x0001920b
   19064:	00019211 	.word	0x00019211
   19068:	00018e79 	.word	0x00018e79
   1906c:	00018e79 	.word	0x00018e79
   19070:	00019217 	.word	0x00019217
   19074:	00019221 	.word	0x00019221
   19078:	00019227 	.word	0x00019227
   1907c:	00019231 	.word	0x00019231
   19080:	00018e79 	.word	0x00018e79
   19084:	00019239 	.word	0x00019239
   19088:	00019241 	.word	0x00019241
   1908c:	00019249 	.word	0x00019249
   19090:	00018e79 	.word	0x00018e79
   19094:	00018e79 	.word	0x00018e79
   19098:	00018e79 	.word	0x00018e79
   1909c:	00018e79 	.word	0x00018e79
   190a0:	00018e79 	.word	0x00018e79
   190a4:	00019257 	.word	0x00019257
   190a8:	0001925f 	.word	0x0001925f
   190ac:	00019267 	.word	0x00019267
   190b0:	0001926d 	.word	0x0001926d
   190b4:	00019273 	.word	0x00019273
   190b8:	0001927f 	.word	0x0001927f
   190bc:	00019285 	.word	0x00019285
   190c0:	0001928b 	.word	0x0001928b
   190c4:	00019291 	.word	0x00019291
   190c8:	00018e79 	.word	0x00018e79
   190cc:	00018e79 	.word	0x00018e79
   190d0:	00019299 	.word	0x00019299
   190d4:	0001929f 	.word	0x0001929f
   190d8:	000192a5 	.word	0x000192a5
   190dc:	000192ad 	.word	0x000192ad
   190e0:	000192b5 	.word	0x000192b5
   190e4:	000192bb 	.word	0x000192bb
   190e8:	00018e79 	.word	0x00018e79
   190ec:	00018e79 	.word	0x00018e79
   190f0:	00018e79 	.word	0x00018e79
   190f4:	00018e79 	.word	0x00018e79
   190f8:	00018e79 	.word	0x00018e79
   190fc:	00018e79 	.word	0x00018e79
   19100:	00018e79 	.word	0x00018e79
   19104:	00018e79 	.word	0x00018e79
   19108:	00018e79 	.word	0x00018e79
   1910c:	00018e79 	.word	0x00018e79
   19110:	00018e79 	.word	0x00018e79
   19114:	00018e79 	.word	0x00018e79
   19118:	00018e79 	.word	0x00018e79
   1911c:	00018e79 	.word	0x00018e79
   19120:	00018e79 	.word	0x00018e79
   19124:	00018e79 	.word	0x00018e79
   19128:	00018e79 	.word	0x00018e79
   1912c:	00018e79 	.word	0x00018e79
   19130:	00018e79 	.word	0x00018e79
   19134:	00018e79 	.word	0x00018e79
   19138:	00018e79 	.word	0x00018e79
   1913c:	00018e79 	.word	0x00018e79
   19140:	00018e79 	.word	0x00018e79
   19144:	00018e79 	.word	0x00018e79
   19148:	000192c1 	.word	0x000192c1
   1914c:	00018e79 	.word	0x00018e79
   19150:	00018e79 	.word	0x00018e79
   19154:	000192c9 	.word	0x000192c9
   19158:	00018e79 	.word	0x00018e79
   1915c:	00018e79 	.word	0x00018e79
   19160:	00018e79 	.word	0x00018e79
   19164:	00018e79 	.word	0x00018e79
   19168:	00018e79 	.word	0x00018e79
   1916c:	00018e79 	.word	0x00018e79
   19170:	00018e79 	.word	0x00018e79
   19174:	00018e79 	.word	0x00018e79
   19178:	00018e79 	.word	0x00018e79
   1917c:	00018e79 	.word	0x00018e79
   19180:	00018e79 	.word	0x00018e79
   19184:	00018e79 	.word	0x00018e79
   19188:	00018e79 	.word	0x00018e79
   1918c:	00018e79 	.word	0x00018e79
   19190:	00018e79 	.word	0x00018e79
   19194:	00019279 	.word	0x00019279
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   19198:	f7f4 fade 	bl	d758 <sdc_hci_cmd_le_set_event_mask>
   1919c:	e69f      	b.n	18ede <hci_internal_cmd_put+0x9a>
   1919e:	bf00      	nop
   191a0:	20003911 	.word	0x20003911
   191a4:	20003918 	.word	0x20003918
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   191a8:	4883      	ldr	r0, [pc, #524]	; (193b8 <hci_internal_cmd_put+0x574>)
   191aa:	f7f4 fab3 	bl	d714 <sdc_hci_cmd_le_read_buffer_size>
   191ae:	e6ab      	b.n	18f08 <hci_internal_cmd_put+0xc4>
	memset(features, 0, sizeof(*features));
   191b0:	4b81      	ldr	r3, [pc, #516]	; (193b8 <hci_internal_cmd_put+0x574>)
   191b2:	2000      	movs	r0, #0
   191b4:	f8c4 0007 	str.w	r0, [r4, #7]
   191b8:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   191ba:	79e3      	ldrb	r3, [r4, #7]
   191bc:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   191c0:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   191c4:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   191c6:	7a23      	ldrb	r3, [r4, #8]
   191c8:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   191cc:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   191d0:	7223      	strb	r3, [r4, #8]
   191d2:	e70b      	b.n	18fec <hci_internal_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   191d4:	f7f4 fac9 	bl	d76a <sdc_hci_cmd_le_set_random_address>
   191d8:	e681      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   191da:	f7f4 fab7 	bl	d74c <sdc_hci_cmd_le_set_adv_params>
   191de:	e67e      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   191e0:	4875      	ldr	r0, [pc, #468]	; (193b8 <hci_internal_cmd_put+0x574>)
   191e2:	f7f4 fa95 	bl	d710 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   191e6:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   191e8:	e70d      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   191ea:	f7f4 faab 	bl	d744 <sdc_hci_cmd_le_set_adv_data>
   191ee:	e676      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   191f0:	f7f4 fabf 	bl	d772 <sdc_hci_cmd_le_set_scan_response_data>
   191f4:	e673      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   191f6:	f7f4 faa7 	bl	d748 <sdc_hci_cmd_le_set_adv_enable>
   191fa:	e670      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   191fc:	486e      	ldr	r0, [pc, #440]	; (193b8 <hci_internal_cmd_put+0x574>)
   191fe:	f7f4 fa8d 	bl	d71c <sdc_hci_cmd_le_read_filter_accept_list_size>
   19202:	e7f0      	b.n	191e6 <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   19204:	f7f4 fa74 	bl	d6f0 <sdc_hci_cmd_le_clear_filter_accept_list>
   19208:	e669      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1920a:	f7f4 fa6d 	bl	d6e8 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1920e:	e666      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   19210:	f7f4 fa92 	bl	d738 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   19214:	e663      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   19216:	4968      	ldr	r1, [pc, #416]	; (193b8 <hci_internal_cmd_put+0x574>)
   19218:	f7f4 fa7e 	bl	d718 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1921c:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1921e:	e6f2      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   19220:	f7f4 fa82 	bl	d728 <sdc_hci_cmd_le_read_remote_features>
   19224:	e639      	b.n	18e9a <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   19226:	4964      	ldr	r1, [pc, #400]	; (193b8 <hci_internal_cmd_put+0x574>)
   19228:	f7f4 fa66 	bl	d6f8 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1922c:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1922e:	e6ea      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   19230:	4861      	ldr	r0, [pc, #388]	; (193b8 <hci_internal_cmd_put+0x574>)
   19232:	f7f4 fa6b 	bl	d70c <sdc_hci_cmd_le_rand>
   19236:	e68e      	b.n	18f56 <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   19238:	495f      	ldr	r1, [pc, #380]	; (193b8 <hci_internal_cmd_put+0x574>)
   1923a:	f7f4 fa63 	bl	d704 <sdc_hci_cmd_le_long_term_key_request_reply>
   1923e:	e65b      	b.n	18ef8 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   19240:	495d      	ldr	r1, [pc, #372]	; (193b8 <hci_internal_cmd_put+0x574>)
   19242:	f7f4 fa5b 	bl	d6fc <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   19246:	e657      	b.n	18ef8 <hci_internal_cmd_put+0xb4>
	*buf = states1;
   19248:	238f      	movs	r3, #143	; 0x8f
   1924a:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1924c:	23c0      	movs	r3, #192	; 0xc0
   1924e:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   19250:	230c      	movs	r3, #12
		return 0;
   19252:	2000      	movs	r0, #0
   19254:	e6cb      	b.n	18fee <hci_internal_cmd_put+0x1aa>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   19256:	4958      	ldr	r1, [pc, #352]	; (193b8 <hci_internal_cmd_put+0x574>)
   19258:	f7f4 fa7a 	bl	d750 <sdc_hci_cmd_le_set_data_length>
   1925c:	e64c      	b.n	18ef8 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1925e:	4856      	ldr	r0, [pc, #344]	; (193b8 <hci_internal_cmd_put+0x574>)
   19260:	f7f4 fa66 	bl	d730 <sdc_hci_cmd_le_read_suggested_default_data_length>
   19264:	e658      	b.n	18f18 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   19266:	f7f4 fa86 	bl	d776 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1926a:	e638      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return hci_cmd_le_read_local_p256_public_key();
   1926c:	f000 f9cc 	bl	19608 <hci_cmd_le_read_local_p256_public_key>
   19270:	e613      	b.n	18e9a <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   19272:	f009 fb65 	bl	22940 <hci_cmd_le_generate_dhkey>
   19276:	e610      	b.n	18e9a <hci_internal_cmd_put+0x56>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   19278:	f009 fb65 	bl	22946 <hci_cmd_le_generate_dhkey_v2>
   1927c:	e62f      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1927e:	f7f4 fa35 	bl	d6ec <sdc_hci_cmd_le_add_device_to_resolving_list>
   19282:	e62c      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   19284:	f7f4 fa5a 	bl	d73c <sdc_hci_cmd_le_remove_device_from_resolving_list>
   19288:	e629      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_clear_resolving_list();
   1928a:	f7f4 fa33 	bl	d6f4 <sdc_hci_cmd_le_clear_resolving_list>
   1928e:	e626      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   19290:	4849      	ldr	r0, [pc, #292]	; (193b8 <hci_internal_cmd_put+0x574>)
   19292:	f7f4 fa4b 	bl	d72c <sdc_hci_cmd_le_read_resolving_list_size>
   19296:	e7a6      	b.n	191e6 <hci_internal_cmd_put+0x3a2>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   19298:	f7f4 fa52 	bl	d740 <sdc_hci_cmd_le_set_address_resolution_enable>
   1929c:	e61f      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1929e:	f7f4 fa66 	bl	d76e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   192a2:	e61c      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   192a4:	4844      	ldr	r0, [pc, #272]	; (193b8 <hci_internal_cmd_put+0x574>)
   192a6:	f7f4 fa3b 	bl	d720 <sdc_hci_cmd_le_read_max_data_length>
   192aa:	e654      	b.n	18f56 <hci_internal_cmd_put+0x112>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   192ac:	4942      	ldr	r1, [pc, #264]	; (193b8 <hci_internal_cmd_put+0x574>)
   192ae:	f7f4 fa39 	bl	d724 <sdc_hci_cmd_le_read_phy>
   192b2:	e631      	b.n	18f18 <hci_internal_cmd_put+0xd4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   192b4:	f7f4 fa4e 	bl	d754 <sdc_hci_cmd_le_set_default_phy>
   192b8:	e611      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   192ba:	f7f4 fa52 	bl	d762 <sdc_hci_cmd_le_set_phy>
   192be:	e5ec      	b.n	18e9a <hci_internal_cmd_put+0x56>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   192c0:	483d      	ldr	r0, [pc, #244]	; (193b8 <hci_internal_cmd_put+0x574>)
   192c2:	f7f4 fa37 	bl	d734 <sdc_hci_cmd_le_read_transmit_power>
   192c6:	e617      	b.n	18ef8 <hci_internal_cmd_put+0xb4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   192c8:	f7f4 fa4d 	bl	d766 <sdc_hci_cmd_le_set_privacy_mode>
   192cc:	e607      	b.n	18ede <hci_internal_cmd_put+0x9a>
	switch (opcode)	{
   192ce:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   192d2:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   192d4:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   192d8:	d820      	bhi.n	1931c <hci_internal_cmd_put+0x4d8>
   192da:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   192de:	f43f adcb 	beq.w	18e78 <hci_internal_cmd_put+0x34>
   192e2:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   192e6:	3b01      	subs	r3, #1
   192e8:	2b09      	cmp	r3, #9
   192ea:	f63f adc5 	bhi.w	18e78 <hci_internal_cmd_put+0x34>
   192ee:	a201      	add	r2, pc, #4	; (adr r2, 192f4 <hci_internal_cmd_put+0x4b0>)
   192f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   192f4:	0001933d 	.word	0x0001933d
   192f8:	00019347 	.word	0x00019347
   192fc:	00018e79 	.word	0x00018e79
   19300:	00018e79 	.word	0x00018e79
   19304:	00018e79 	.word	0x00018e79
   19308:	0001937b 	.word	0x0001937b
   1930c:	00018e79 	.word	0x00018e79
   19310:	00018e79 	.word	0x00018e79
   19314:	00019367 	.word	0x00019367
   19318:	00019371 	.word	0x00019371
   1931c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   19320:	b29b      	uxth	r3, r3
   19322:	2b05      	cmp	r3, #5
   19324:	f63f ada8 	bhi.w	18e78 <hci_internal_cmd_put+0x34>
   19328:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1932c:	2b05      	cmp	r3, #5
   1932e:	f63f ada3 	bhi.w	18e78 <hci_internal_cmd_put+0x34>
   19332:	e8df f003 	tbb	[pc, r3]
   19336:	2f25      	.short	0x2f25
   19338:	3b383532 	.word	0x3b383532
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1933c:	481e      	ldr	r0, [pc, #120]	; (193b8 <hci_internal_cmd_put+0x574>)
   1933e:	f7eb ff07 	bl	5150 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   19342:	2310      	movs	r3, #16
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   19344:	e65f      	b.n	19006 <hci_internal_cmd_put+0x1c2>
	memset(cmds, 0, sizeof(*cmds));
   19346:	2300      	movs	r3, #0
   19348:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_version_info = 1;
   1934c:	79e3      	ldrb	r3, [r4, #7]
   1934e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   19352:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   19356:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   19358:	7a23      	ldrb	r3, [r4, #8]
   1935a:	f023 0307 	bic.w	r3, r3, #7
   1935e:	f043 0307 	orr.w	r3, r3, #7
   19362:	7223      	strb	r3, [r4, #8]
}
   19364:	e635      	b.n	18fd2 <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   19366:	4814      	ldr	r0, [pc, #80]	; (193b8 <hci_internal_cmd_put+0x574>)
   19368:	f7f4 f969 	bl	d63e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1936c:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1936e:	e64a      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19370:	4811      	ldr	r0, [pc, #68]	; (193b8 <hci_internal_cmd_put+0x574>)
   19372:	f7f4 f917 	bl	d5a4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   19376:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   19378:	e645      	b.n	19006 <hci_internal_cmd_put+0x1c2>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1937a:	f7f4 f9af 	bl	d6dc <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1937e:	e5ae      	b.n	18ede <hci_internal_cmd_put+0x9a>
	memset(cmds, 0, sizeof(*cmds));
   19380:	2300      	movs	r3, #0
   19382:	f8a4 3007 	strh.w	r3, [r4, #7]
	cmds->read_supported_vs_commands = 1;
   19386:	79e3      	ldrb	r3, [r4, #7]
   19388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1938c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   19390:	71e3      	strb	r3, [r4, #7]
}
   19392:	e61e      	b.n	18fd2 <hci_internal_cmd_put+0x18e>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   19394:	f7f4 f8ff 	bl	d596 <sdc_hci_cmd_vs_llpm_mode_set>
   19398:	e5a1      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1939a:	f7f4 f8f8 	bl	d58e <sdc_hci_cmd_vs_conn_update>
   1939e:	e59e      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   193a0:	f7f4 f8ed 	bl	d57e <sdc_hci_cmd_vs_conn_event_extend>
   193a4:	e59b      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   193a6:	f7f4 f8f8 	bl	d59a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   193aa:	e598      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   193ac:	f7f4 f8f1 	bl	d592 <sdc_hci_cmd_vs_event_length_set>
   193b0:	e595      	b.n	18ede <hci_internal_cmd_put+0x9a>
		return -NRF_EPERM;
   193b2:	f04f 30ff 	mov.w	r0, #4294967295
   193b6:	e57c      	b.n	18eb2 <hci_internal_cmd_put+0x6e>
   193b8:	20003918 	.word	0x20003918

000193bc <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   193bc:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   193be:	4c07      	ldr	r4, [pc, #28]	; (193dc <hci_internal_evt_get+0x20>)
   193c0:	7823      	ldrb	r3, [r4, #0]
   193c2:	b91b      	cbnz	r3, 193cc <hci_internal_evt_get+0x10>

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   193c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   193c8:	f7f4 b8bc 	b.w	d544 <sdc_hci_evt_get>
		memcpy(evt_out,
   193cc:	78a2      	ldrb	r2, [r4, #2]
   193ce:	1c61      	adds	r1, r4, #1
   193d0:	3202      	adds	r2, #2
   193d2:	f00a f9e6 	bl	237a2 <memcpy>
		cmd_complete_or_status.occurred = false;
   193d6:	2000      	movs	r0, #0
   193d8:	7020      	strb	r0, [r4, #0]
}
   193da:	bd10      	pop	{r4, pc}
   193dc:	20003911 	.word	0x20003911

000193e0 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   193e0:	b570      	push	{r4, r5, r6, lr}
   193e2:	4605      	mov	r5, r0
   193e4:	460e      	mov	r6, r1
   193e6:	4c08      	ldr	r4, [pc, #32]	; (19408 <bt_rand+0x28>)
   193e8:	4620      	mov	r0, r4
   193ea:	f009 fc01 	bl	22bf0 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   193ee:	b138      	cbz	r0, 19400 <bt_rand+0x20>
   193f0:	68a3      	ldr	r3, [r4, #8]
   193f2:	b2b2      	uxth	r2, r6
   193f4:	4629      	mov	r1, r5
   193f6:	4620      	mov	r0, r4
   193f8:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   193fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   193fe:	4718      	bx	r3
   19400:	f06f 0012 	mvn.w	r0, #18
   19404:	bd70      	pop	{r4, r5, r6, pc}
   19406:	bf00      	nop
   19408:	000239a0 	.word	0x000239a0

0001940c <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1940e:	4d1c      	ldr	r5, [pc, #112]	; (19480 <ecdh_p256_common_secret+0x74>)
   19410:	491c      	ldr	r1, [pc, #112]	; (19484 <ecdh_p256_common_secret+0x78>)
   19412:	f105 0220 	add.w	r2, r5, #32
   19416:	2800      	cmp	r0, #0
   19418:	bf08      	it	eq
   1941a:	4629      	moveq	r1, r5
   1941c:	4610      	mov	r0, r2
   1941e:	f002 fda1 	bl	1bf64 <ocrypto_ecdh_p256_common_secret>
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19422:	f04f 32ff 	mov.w	r2, #4294967295
		return BT_HCI_ERR_INVALID_PARAM;
   19426:	2800      	cmp	r0, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19428:	f04f 33ff 	mov.w	r3, #4294967295
   1942c:	f04f 0001 	mov.w	r0, #1
		return BT_HCI_ERR_INVALID_PARAM;
   19430:	bf0c      	ite	eq
   19432:	2700      	moveq	r7, #0
   19434:	2712      	movne	r7, #18
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19436:	f7fa fcd9 	bl	13dec <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1943a:	f100 0608 	add.w	r6, r0, #8
   1943e:	2102      	movs	r1, #2
   19440:	4604      	mov	r4, r0
   19442:	4630      	mov	r0, r6
   19444:	f009 f816 	bl	22474 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   19448:	233e      	movs	r3, #62	; 0x3e
   1944a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1944c:	2322      	movs	r3, #34	; 0x22
   1944e:	7043      	strb	r3, [r0, #1]
   19450:	2101      	movs	r1, #1
   19452:	4630      	mov	r0, r6
   19454:	f009 f80e 	bl	22474 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   19458:	2309      	movs	r3, #9
   1945a:	7003      	strb	r3, [r0, #0]
   1945c:	2121      	movs	r1, #33	; 0x21
   1945e:	4630      	mov	r0, r6
   19460:	f009 f808 	bl	22474 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   19464:	f800 7b01 	strb.w	r7, [r0], #1

	if (status) {
   19468:	b12f      	cbz	r7, 19476 <ecdh_p256_common_secret+0x6a>
__ssp_bos_icheck3(memset, void *, int)
   1946a:	2220      	movs	r2, #32
   1946c:	21ff      	movs	r1, #255	; 0xff
   1946e:	f00a f9b9 	bl	237e4 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   19472:	4620      	mov	r0, r4
   19474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   19476:	f105 0120 	add.w	r1, r5, #32
   1947a:	f009 fa57 	bl	2292c <sys_memcpy_swap.constprop.0>
   1947e:	e7f8      	b.n	19472 <ecdh_p256_common_secret+0x66>
   19480:	20003958 	.word	0x20003958
   19484:	00024e9b 	.word	0x00024e9b

00019488 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   19488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1948a:	4e36      	ldr	r6, [pc, #216]	; (19564 <ecdh_cmd_process+0xdc>)
   1948c:	f3bf 8f5b 	dmb	ish
   19490:	6833      	ldr	r3, [r6, #0]
   19492:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   19496:	2b02      	cmp	r3, #2
   19498:	d059      	beq.n	1954e <ecdh_cmd_process+0xc6>
   1949a:	2b04      	cmp	r3, #4
   1949c:	d05c      	beq.n	19558 <ecdh_cmd_process+0xd0>
   1949e:	2b01      	cmp	r3, #1
   194a0:	d15c      	bne.n	1955c <ecdh_cmd_process+0xd4>
		err = bt_rand(ecdh.private_key_be, 32);
   194a2:	4c31      	ldr	r4, [pc, #196]	; (19568 <ecdh_cmd_process+0xe0>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   194a4:	4f31      	ldr	r7, [pc, #196]	; (1956c <ecdh_cmd_process+0xe4>)
		err = bt_rand(ecdh.private_key_be, 32);
   194a6:	2120      	movs	r1, #32
   194a8:	4620      	mov	r0, r4
   194aa:	f7ff ff99 	bl	193e0 <bt_rand>
		if (err) {
   194ae:	2800      	cmp	r0, #0
   194b0:	d142      	bne.n	19538 <ecdh_cmd_process+0xb0>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   194b2:	2220      	movs	r2, #32
   194b4:	4639      	mov	r1, r7
   194b6:	4620      	mov	r0, r4
   194b8:	f00a f963 	bl	23782 <memcmp>
   194bc:	2800      	cmp	r0, #0
   194be:	d0f2      	beq.n	194a6 <ecdh_cmd_process+0x1e>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   194c0:	482b      	ldr	r0, [pc, #172]	; (19570 <ecdh_cmd_process+0xe8>)
   194c2:	4621      	mov	r1, r4
   194c4:	f002 fd3a 	bl	1bf3c <ocrypto_ecdh_p256_public_key>
	} while (err);
   194c8:	4605      	mov	r5, r0
   194ca:	2800      	cmp	r0, #0
   194cc:	d1eb      	bne.n	194a6 <ecdh_cmd_process+0x1e>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   194ce:	f04f 32ff 	mov.w	r2, #4294967295
   194d2:	f04f 33ff 	mov.w	r3, #4294967295
   194d6:	2001      	movs	r0, #1
   194d8:	f7fa fc88 	bl	13dec <bt_buf_get_rx>
   194dc:	f100 0708 	add.w	r7, r0, #8
   194e0:	2102      	movs	r1, #2
   194e2:	4604      	mov	r4, r0
   194e4:	4638      	mov	r0, r7
   194e6:	f008 ffc5 	bl	22474 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   194ea:	233e      	movs	r3, #62	; 0x3e
   194ec:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   194ee:	2342      	movs	r3, #66	; 0x42
   194f0:	7043      	strb	r3, [r0, #1]
   194f2:	2101      	movs	r1, #1
   194f4:	4638      	mov	r0, r7
   194f6:	f008 ffbd 	bl	22474 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   194fa:	2308      	movs	r3, #8
   194fc:	7003      	strb	r3, [r0, #0]
   194fe:	2141      	movs	r1, #65	; 0x41
   19500:	4638      	mov	r0, r7
   19502:	f008 ffb7 	bl	22474 <net_buf_simple_add>
   19506:	4607      	mov	r7, r0
	evt->status = status;
   19508:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1950c:	b1b5      	cbz	r5, 1953c <ecdh_cmd_process+0xb4>
   1950e:	2240      	movs	r2, #64	; 0x40
   19510:	2100      	movs	r1, #0
   19512:	f00a f967 	bl	237e4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19516:	f3bf 8f5b 	dmb	ish
   1951a:	2300      	movs	r3, #0
   1951c:	e856 2f00 	ldrex	r2, [r6]
   19520:	e846 3100 	strex	r1, r3, [r6]
   19524:	2900      	cmp	r1, #0
   19526:	d1f9      	bne.n	1951c <ecdh_cmd_process+0x94>
   19528:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1952c:	b1c4      	cbz	r4, 19560 <ecdh_cmd_process+0xd8>
		bt_recv(buf);
   1952e:	4620      	mov	r0, r4
	}
}
   19530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   19534:	f7fb b8de 	b.w	146f4 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   19538:	251f      	movs	r5, #31
   1953a:	e7c8      	b.n	194ce <ecdh_cmd_process+0x46>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1953c:	490c      	ldr	r1, [pc, #48]	; (19570 <ecdh_cmd_process+0xe8>)
   1953e:	f009 f9f5 	bl	2292c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   19542:	3120      	adds	r1, #32
   19544:	f107 0021 	add.w	r0, r7, #33	; 0x21
   19548:	f009 f9f0 	bl	2292c <sys_memcpy_swap.constprop.0>
		break;
   1954c:	e7e3      	b.n	19516 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(false);
   1954e:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   19550:	f7ff ff5c 	bl	1940c <ecdh_p256_common_secret>
   19554:	4604      	mov	r4, r0
		break;
   19556:	e7de      	b.n	19516 <ecdh_cmd_process+0x8e>
		buf = ecdh_p256_common_secret(true);
   19558:	2001      	movs	r0, #1
   1955a:	e7f9      	b.n	19550 <ecdh_cmd_process+0xc8>
	switch (atomic_get(&cmd)) {
   1955c:	2400      	movs	r4, #0
   1955e:	e7da      	b.n	19516 <ecdh_cmd_process+0x8e>
}
   19560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19562:	bf00      	nop
   19564:	20002718 	.word	0x20002718
   19568:	20003958 	.word	0x20003958
   1956c:	00024e9b 	.word	0x00024e9b
   19570:	20003978 	.word	0x20003978

00019574 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   19574:	b510      	push	{r4, lr}
   19576:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   19578:	2210      	movs	r2, #16
   1957a:	2100      	movs	r1, #0
   1957c:	a801      	add	r0, sp, #4
   1957e:	f00a f931 	bl	237e4 <memset>
   19582:	4c0b      	ldr	r4, [pc, #44]	; (195b0 <ecdh_thread+0x3c>)
   19584:	9405      	str	r4, [sp, #20]
   19586:	2301      	movs	r3, #1
   19588:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1958c:	f04f 32ff 	mov.w	r2, #4294967295
   19590:	f04f 33ff 	mov.w	r3, #4294967295
   19594:	2101      	movs	r1, #1
   19596:	a801      	add	r0, sp, #4
   19598:	f002 fc20 	bl	1bddc <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1959c:	4620      	mov	r0, r4
   1959e:	f00a f8e5 	bl	2376c <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   195a2:	9b04      	ldr	r3, [sp, #16]
   195a4:	f36f 3352 	bfc	r3, #13, #6
   195a8:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   195aa:	f7ff ff6d 	bl	19488 <ecdh_cmd_process>
	while (true) {
   195ae:	e7ed      	b.n	1958c <ecdh_thread+0x18>
   195b0:	2000271c 	.word	0x2000271c

000195b4 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   195b4:	b510      	push	{r4, lr}
   195b6:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   195b8:	480e      	ldr	r0, [pc, #56]	; (195f4 <hci_ecdh_init+0x40>)
   195ba:	f00a f8d2 	bl	23762 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   195be:	4c0e      	ldr	r4, [pc, #56]	; (195f8 <hci_ecdh_init+0x44>)
   195c0:	490e      	ldr	r1, [pc, #56]	; (195fc <hci_ecdh_init+0x48>)
   195c2:	2200      	movs	r2, #0
   195c4:	2300      	movs	r3, #0
   195c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   195ca:	2300      	movs	r3, #0
   195cc:	220a      	movs	r2, #10
   195ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
   195d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   195d6:	9300      	str	r3, [sp, #0]
   195d8:	f44f 7262 	mov.w	r2, #904	; 0x388
   195dc:	4b08      	ldr	r3, [pc, #32]	; (19600 <hci_ecdh_init+0x4c>)
   195de:	4620      	mov	r0, r4
   195e0:	f001 fb16 	bl	1ac10 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   195e4:	4907      	ldr	r1, [pc, #28]	; (19604 <hci_ecdh_init+0x50>)
   195e6:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   195e8:	b008      	add	sp, #32
   195ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   195ee:	f009 bbd8 	b.w	22da2 <z_impl_k_thread_name_set>
   195f2:	bf00      	nop
   195f4:	2000271c 	.word	0x2000271c
   195f8:	20001b50 	.word	0x20001b50
   195fc:	20004820 	.word	0x20004820
   19600:	00019575 	.word	0x00019575
   19604:	00024e8e 	.word	0x00024e8e

00019608 <hci_cmd_le_read_local_p256_public_key>:

uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   19608:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1960a:	4b0b      	ldr	r3, [pc, #44]	; (19638 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1960c:	f3bf 8f5b 	dmb	ish
   19610:	2201      	movs	r2, #1
   19612:	e853 1f00 	ldrex	r1, [r3]
   19616:	2900      	cmp	r1, #0
   19618:	d103      	bne.n	19622 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1961a:	e843 2000 	strex	r0, r2, [r3]
   1961e:	2800      	cmp	r0, #0
   19620:	d1f7      	bne.n	19612 <hci_cmd_le_read_local_p256_public_key+0xa>
   19622:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   19626:	d105      	bne.n	19634 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   19628:	4804      	ldr	r0, [pc, #16]	; (1963c <hci_cmd_le_read_local_p256_public_key+0x34>)
   1962a:	2100      	movs	r1, #0
   1962c:	f002 fc32 	bl	1be94 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   19630:	2000      	movs	r0, #0
}
   19632:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19634:	200c      	movs	r0, #12
   19636:	e7fc      	b.n	19632 <hci_cmd_le_read_local_p256_public_key+0x2a>
   19638:	20002718 	.word	0x20002718
   1963c:	2000271c 	.word	0x2000271c

00019640 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   19640:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   19642:	2900      	cmp	r1, #0
   19644:	4b11      	ldr	r3, [pc, #68]	; (1968c <cmd_le_generate_dhkey+0x4c>)
   19646:	f3bf 8f5b 	dmb	ish
{
   1964a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1964c:	bf14      	ite	ne
   1964e:	2204      	movne	r2, #4
   19650:	2202      	moveq	r2, #2
   19652:	e853 1f00 	ldrex	r1, [r3]
   19656:	2900      	cmp	r1, #0
   19658:	d103      	bne.n	19662 <cmd_le_generate_dhkey+0x22>
   1965a:	e843 2000 	strex	r0, r2, [r3]
   1965e:	2800      	cmp	r0, #0
   19660:	d1f7      	bne.n	19652 <cmd_le_generate_dhkey+0x12>
   19662:	f3bf 8f5b 	dmb	ish
   19666:	d10e      	bne.n	19686 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   19668:	4621      	mov	r1, r4
   1966a:	4809      	ldr	r0, [pc, #36]	; (19690 <cmd_le_generate_dhkey+0x50>)
   1966c:	f009 f95e 	bl	2292c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   19670:	4808      	ldr	r0, [pc, #32]	; (19694 <cmd_le_generate_dhkey+0x54>)
   19672:	f104 0120 	add.w	r1, r4, #32
   19676:	f009 f959 	bl	2292c <sys_memcpy_swap.constprop.0>
   1967a:	4807      	ldr	r0, [pc, #28]	; (19698 <cmd_le_generate_dhkey+0x58>)
   1967c:	2100      	movs	r1, #0
   1967e:	f002 fc09 	bl	1be94 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   19682:	2000      	movs	r0, #0
}
   19684:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19686:	200c      	movs	r0, #12
   19688:	e7fc      	b.n	19684 <cmd_le_generate_dhkey+0x44>
   1968a:	bf00      	nop
   1968c:	20002718 	.word	0x20002718
   19690:	20003978 	.word	0x20003978
   19694:	20003998 	.word	0x20003998
   19698:	2000271c 	.word	0x2000271c

0001969c <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1969c:	4901      	ldr	r1, [pc, #4]	; (196a4 <mpsl_low_prio_irq_handler+0x8>)
   1969e:	4802      	ldr	r0, [pc, #8]	; (196a8 <mpsl_low_prio_irq_handler+0xc>)
   196a0:	f009 bd00 	b.w	230a4 <k_work_submit_to_queue>
   196a4:	2000272c 	.word	0x2000272c
   196a8:	20001bd0 	.word	0x20001bd0

000196ac <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   196ac:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   196ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   196b2:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   196b6:	2300      	movs	r3, #0
   196b8:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   196bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   196c0:	f8ad 3000 	strh.w	r3, [sp]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   196c4:	4a0d      	ldr	r2, [pc, #52]	; (196fc <mpsl_lib_init+0x50>)
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   196c6:	2302      	movs	r3, #2
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   196c8:	2119      	movs	r1, #25
   196ca:	4668      	mov	r0, sp
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
   196cc:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   196d0:	f7eb f8f0 	bl	48b4 <mpsl_init>
	if (err) {
   196d4:	4604      	mov	r4, r0
   196d6:	b970      	cbnz	r0, 196f6 <mpsl_lib_init+0x4a>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   196d8:	4601      	mov	r1, r0
   196da:	2201      	movs	r2, #1
   196dc:	2008      	movs	r0, #8
   196de:	f7f9 ff7b 	bl	135d8 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   196e2:	2201      	movs	r2, #1
   196e4:	4621      	mov	r1, r4
   196e6:	200b      	movs	r0, #11
   196e8:	f7f9 ff76 	bl	135d8 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   196ec:	2201      	movs	r2, #1
   196ee:	4621      	mov	r1, r4
   196f0:	4610      	mov	r0, r2
   196f2:	f7f9 ff71 	bl	135d8 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);

	return 0;
}
   196f6:	4620      	mov	r0, r4
   196f8:	b002      	add	sp, #8
   196fa:	bd10      	pop	{r4, pc}
   196fc:	00022957 	.word	0x00022957

00019700 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   19700:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   19702:	4d0d      	ldr	r5, [pc, #52]	; (19738 <mpsl_low_prio_init+0x38>)
   19704:	490d      	ldr	r1, [pc, #52]	; (1973c <mpsl_low_prio_init+0x3c>)
   19706:	2400      	movs	r4, #0
   19708:	9400      	str	r4, [sp, #0]
   1970a:	f06f 0309 	mvn.w	r3, #9
   1970e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19712:	4628      	mov	r0, r5
   19714:	f001 fd80 	bl	1b218 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   19718:	4909      	ldr	r1, [pc, #36]	; (19740 <mpsl_low_prio_init+0x40>)
   1971a:	4628      	mov	r0, r5
   1971c:	f009 fb41 	bl	22da2 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   19720:	4908      	ldr	r1, [pc, #32]	; (19744 <mpsl_low_prio_init+0x44>)
   19722:	4809      	ldr	r0, [pc, #36]	; (19748 <mpsl_low_prio_init+0x48>)
   19724:	f009 fca5 	bl	23072 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19728:	4622      	mov	r2, r4
   1972a:	2104      	movs	r1, #4
   1972c:	2019      	movs	r0, #25
   1972e:	f7f9 ff53 	bl	135d8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   19732:	4620      	mov	r0, r4
   19734:	b003      	add	sp, #12
   19736:	bd30      	pop	{r4, r5, pc}
   19738:	20001bd0 	.word	0x20001bd0
   1973c:	20004be0 	.word	0x20004be0
   19740:	00024ebb 	.word	0x00024ebb
   19744:	00022983 	.word	0x00022983
   19748:	2000272c 	.word	0x2000272c

0001974c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1974c:	4b01      	ldr	r3, [pc, #4]	; (19754 <mpsl_hfclk_callback+0x8>)
   1974e:	2000      	movs	r0, #0
   19750:	681b      	ldr	r3, [r3, #0]
   19752:	4718      	bx	r3
   19754:	2000273c 	.word	0x2000273c

00019758 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   19758:	b120      	cbz	r0, 19764 <nrfx_clock_start+0xc>
   1975a:	2801      	cmp	r0, #1
   1975c:	d106      	bne.n	1976c <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1975e:	4804      	ldr	r0, [pc, #16]	; (19770 <nrfx_clock_start+0x18>)
   19760:	f7ea bf20 	b.w	45a4 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19764:	4b03      	ldr	r3, [pc, #12]	; (19774 <nrfx_clock_start+0x1c>)
   19766:	2001      	movs	r0, #1
   19768:	681b      	ldr	r3, [r3, #0]
   1976a:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1976c:	4770      	bx	lr
   1976e:	bf00      	nop
   19770:	0001974d 	.word	0x0001974d
   19774:	2000273c 	.word	0x2000273c

00019778 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   19778:	4b01      	ldr	r3, [pc, #4]	; (19780 <nrfx_clock_init+0x8>)
   1977a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1977c:	4801      	ldr	r0, [pc, #4]	; (19784 <nrfx_clock_init+0xc>)
   1977e:	4770      	bx	lr
   19780:	2000273c 	.word	0x2000273c
   19784:	0bad0000 	.word	0x0bad0000

00019788 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19788:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1978c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   19790:	2a08      	cmp	r2, #8
   19792:	d106      	bne.n	197a2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19794:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   19798:	2b05      	cmp	r3, #5
   1979a:	d802      	bhi.n	197a2 <nrf52_errata_103+0x1a>
   1979c:	4a02      	ldr	r2, [pc, #8]	; (197a8 <nrf52_errata_103+0x20>)
   1979e:	5cd0      	ldrb	r0, [r2, r3]
   197a0:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   197a2:	2000      	movs	r0, #0
    #endif
}
   197a4:	4770      	bx	lr
   197a6:	bf00      	nop
   197a8:	00024ecb 	.word	0x00024ecb

000197ac <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   197ac:	4a02      	ldr	r2, [pc, #8]	; (197b8 <nvmc_wait+0xc>)
   197ae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   197b2:	2b00      	cmp	r3, #0
   197b4:	d0fb      	beq.n	197ae <nvmc_wait+0x2>
}
   197b6:	4770      	bx	lr
   197b8:	4001e000 	.word	0x4001e000

000197bc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   197bc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   197be:	f009 f91c 	bl	229fa <nrf52_errata_136>
   197c2:	b140      	cbz	r0, 197d6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   197c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   197c8:	2200      	movs	r2, #0
   197ca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   197ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   197d2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   197d6:	f009 f910 	bl	229fa <nrf52_errata_136>
   197da:	2800      	cmp	r0, #0
   197dc:	d046      	beq.n	1986c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   197de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   197e2:	4b60      	ldr	r3, [pc, #384]	; (19964 <SystemInit+0x1a8>)
   197e4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   197e8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   197ec:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   197f0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   197f4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   197f8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   197fc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19800:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19804:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19808:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1980c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19810:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19814:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19818:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1981c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19820:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19824:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19828:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1982c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19830:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19834:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19838:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1983c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19840:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19844:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19848:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1984c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19850:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19854:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19858:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1985c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19860:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19864:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19868:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1986c:	f7ff ff8c 	bl	19788 <nrf52_errata_103>
   19870:	b118      	cbz	r0, 1987a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   19872:	4b3d      	ldr	r3, [pc, #244]	; (19968 <SystemInit+0x1ac>)
   19874:	4a3d      	ldr	r2, [pc, #244]	; (1996c <SystemInit+0x1b0>)
   19876:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1987a:	f7ff ff85 	bl	19788 <nrf52_errata_103>
   1987e:	b118      	cbz	r0, 19888 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19880:	4b3b      	ldr	r3, [pc, #236]	; (19970 <SystemInit+0x1b4>)
   19882:	22fb      	movs	r2, #251	; 0xfb
   19884:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19888:	f7ff ff7e 	bl	19788 <nrf52_errata_103>
   1988c:	b170      	cbz	r0, 198ac <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1988e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19892:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19896:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1989a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1989e:	f022 020f 	bic.w	r2, r2, #15
   198a2:	f003 030f 	and.w	r3, r3, #15
   198a6:	4313      	orrs	r3, r2
   198a8:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   198ac:	f7ff ff6c 	bl	19788 <nrf52_errata_103>
   198b0:	b120      	cbz	r0, 198bc <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   198b2:	4b30      	ldr	r3, [pc, #192]	; (19974 <SystemInit+0x1b8>)
   198b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   198b8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   198bc:	f009 f89d 	bl	229fa <nrf52_errata_136>
   198c0:	b148      	cbz	r0, 198d6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   198c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   198c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   198ca:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   198cc:	bf44      	itt	mi
   198ce:	f06f 0201 	mvnmi.w	r2, #1
   198d2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   198d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   198da:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   198de:	2a08      	cmp	r2, #8
   198e0:	d10e      	bne.n	19900 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   198e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   198e6:	2b05      	cmp	r3, #5
   198e8:	d802      	bhi.n	198f0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   198ea:	4a23      	ldr	r2, [pc, #140]	; (19978 <SystemInit+0x1bc>)
   198ec:	5cd3      	ldrb	r3, [r2, r3]
   198ee:	b13b      	cbz	r3, 19900 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   198f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   198f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   198f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   198fc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19900:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19904:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19908:	2a00      	cmp	r2, #0
   1990a:	db03      	blt.n	19914 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1990c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19910:	2b00      	cmp	r3, #0
   19912:	da22      	bge.n	1995a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19914:	4919      	ldr	r1, [pc, #100]	; (1997c <SystemInit+0x1c0>)
   19916:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19918:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1991c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19920:	2412      	movs	r4, #18
    nvmc_wait();
   19922:	f7ff ff43 	bl	197ac <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19926:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1992a:	f7ff ff3f 	bl	197ac <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1992e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19932:	f7ff ff3b 	bl	197ac <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19936:	2300      	movs	r3, #0
   19938:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1993c:	f7ff ff36 	bl	197ac <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   19940:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19944:	490e      	ldr	r1, [pc, #56]	; (19980 <SystemInit+0x1c4>)
   19946:	4b0f      	ldr	r3, [pc, #60]	; (19984 <SystemInit+0x1c8>)
   19948:	68ca      	ldr	r2, [r1, #12]
   1994a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1994e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19950:	60cb      	str	r3, [r1, #12]
   19952:	f3bf 8f4f 	dsb	sy
    __NOP();
   19956:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19958:	e7fd      	b.n	19956 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1995a:	4b0b      	ldr	r3, [pc, #44]	; (19988 <SystemInit+0x1cc>)
   1995c:	4a0b      	ldr	r2, [pc, #44]	; (1998c <SystemInit+0x1d0>)
   1995e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19960:	bd10      	pop	{r4, pc}
   19962:	bf00      	nop
   19964:	4000c000 	.word	0x4000c000
   19968:	40005000 	.word	0x40005000
   1996c:	00038148 	.word	0x00038148
   19970:	4000f000 	.word	0x4000f000
   19974:	40029000 	.word	0x40029000
   19978:	00024ec5 	.word	0x00024ec5
   1997c:	4001e000 	.word	0x4001e000
   19980:	e000ed00 	.word	0xe000ed00
   19984:	05fa0004 	.word	0x05fa0004
   19988:	20000750 	.word	0x20000750
   1998c:	03d09000 	.word	0x03d09000

00019990 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   19990:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   19992:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   19994:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   19996:	fab2 f382 	clz	r3, r2
   1999a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   1999e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   199a0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   199a2:	d014      	beq.n	199ce <nrfx_flag32_alloc+0x3e>
   199a4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   199a8:	fa05 f303 	lsl.w	r3, r5, r3
   199ac:	ea22 0303 	bic.w	r3, r2, r3
   199b0:	e850 6f00 	ldrex	r6, [r0]
   199b4:	4296      	cmp	r6, r2
   199b6:	d104      	bne.n	199c2 <nrfx_flag32_alloc+0x32>
   199b8:	e840 3c00 	strex	ip, r3, [r0]
   199bc:	f1bc 0f00 	cmp.w	ip, #0
   199c0:	d1f6      	bne.n	199b0 <nrfx_flag32_alloc+0x20>
   199c2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   199c6:	d1e5      	bne.n	19994 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   199c8:	4802      	ldr	r0, [pc, #8]	; (199d4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   199ca:	700c      	strb	r4, [r1, #0]
}
   199cc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   199ce:	4802      	ldr	r0, [pc, #8]	; (199d8 <nrfx_flag32_alloc+0x48>)
   199d0:	e7fc      	b.n	199cc <nrfx_flag32_alloc+0x3c>
   199d2:	bf00      	nop
   199d4:	0bad0000 	.word	0x0bad0000
   199d8:	0bad0002 	.word	0x0bad0002

000199dc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   199dc:	6803      	ldr	r3, [r0, #0]
   199de:	40cb      	lsrs	r3, r1
   199e0:	07db      	lsls	r3, r3, #31
{
   199e2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   199e4:	d415      	bmi.n	19a12 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   199e6:	2301      	movs	r3, #1
   199e8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   199ec:	6803      	ldr	r3, [r0, #0]
   199ee:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   199f2:	ea41 0203 	orr.w	r2, r1, r3
   199f6:	e850 4f00 	ldrex	r4, [r0]
   199fa:	429c      	cmp	r4, r3
   199fc:	d104      	bne.n	19a08 <nrfx_flag32_free+0x2c>
   199fe:	e840 2c00 	strex	ip, r2, [r0]
   19a02:	f1bc 0f00 	cmp.w	ip, #0
   19a06:	d1f6      	bne.n	199f6 <nrfx_flag32_free+0x1a>
   19a08:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   19a0c:	d1ee      	bne.n	199ec <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   19a0e:	4802      	ldr	r0, [pc, #8]	; (19a18 <nrfx_flag32_free+0x3c>)
}
   19a10:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19a12:	4802      	ldr	r0, [pc, #8]	; (19a1c <nrfx_flag32_free+0x40>)
   19a14:	e7fc      	b.n	19a10 <nrfx_flag32_free+0x34>
   19a16:	bf00      	nop
   19a18:	0bad0000 	.word	0x0bad0000
   19a1c:	0bad0004 	.word	0x0bad0004

00019a20 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   19a20:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   19a22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19a26:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   19a28:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   19a2a:	6002      	str	r2, [r0, #0]
}
   19a2c:	4802      	ldr	r0, [pc, #8]	; (19a38 <nrf_gpio_pin_port_decode+0x18>)
   19a2e:	bf18      	it	ne
   19a30:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   19a34:	4770      	bx	lr
   19a36:	bf00      	nop
   19a38:	50000300 	.word	0x50000300

00019a3c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   19a3c:	4b03      	ldr	r3, [pc, #12]	; (19a4c <pin_in_use_by_te+0x10>)
   19a3e:	3008      	adds	r0, #8
   19a40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   19a44:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19a48:	4770      	bx	lr
   19a4a:	bf00      	nop
   19a4c:	20000754 	.word	0x20000754

00019a50 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   19a50:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19a52:	f100 0308 	add.w	r3, r0, #8
   19a56:	4c0c      	ldr	r4, [pc, #48]	; (19a88 <call_handler+0x38>)
   19a58:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   19a5c:	05da      	lsls	r2, r3, #23
{
   19a5e:	4605      	mov	r5, r0
   19a60:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19a62:	d507      	bpl.n	19a74 <call_handler+0x24>
   19a64:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   19a68:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   19a6c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   19a70:	6852      	ldr	r2, [r2, #4]
   19a72:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   19a74:	68a3      	ldr	r3, [r4, #8]
   19a76:	b12b      	cbz	r3, 19a84 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19a78:	68e2      	ldr	r2, [r4, #12]
   19a7a:	4631      	mov	r1, r6
   19a7c:	4628      	mov	r0, r5
    }
}
   19a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   19a82:	4718      	bx	r3
}
   19a84:	bd70      	pop	{r4, r5, r6, pc}
   19a86:	bf00      	nop
   19a88:	20000754 	.word	0x20000754

00019a8c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19a8c:	4a12      	ldr	r2, [pc, #72]	; (19ad8 <release_handler+0x4c>)
   19a8e:	3008      	adds	r0, #8
{
   19a90:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   19a92:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   19a96:	05d9      	lsls	r1, r3, #23
   19a98:	d51b      	bpl.n	19ad2 <release_handler+0x46>
   19a9a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   19a9e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19aa2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   19aa6:	f102 0410 	add.w	r4, r2, #16
   19aaa:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   19aac:	f834 3b02 	ldrh.w	r3, [r4], #2
   19ab0:	f413 7f80 	tst.w	r3, #256	; 0x100
   19ab4:	d003      	beq.n	19abe <release_handler+0x32>
   19ab6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   19aba:	4299      	cmp	r1, r3
   19abc:	d009      	beq.n	19ad2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   19abe:	3001      	adds	r0, #1
   19ac0:	2830      	cmp	r0, #48	; 0x30
   19ac2:	d1f3      	bne.n	19aac <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   19ac4:	2300      	movs	r3, #0
   19ac6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   19aca:	4804      	ldr	r0, [pc, #16]	; (19adc <release_handler+0x50>)
}
   19acc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   19ace:	f7ff bf85 	b.w	199dc <nrfx_flag32_free>
}
   19ad2:	bc10      	pop	{r4}
   19ad4:	4770      	bx	lr
   19ad6:	bf00      	nop
   19ad8:	20000754 	.word	0x20000754
   19adc:	200007c8 	.word	0x200007c8

00019ae0 <pin_handler_trigger_uninit>:
{
   19ae0:	b538      	push	{r3, r4, r5, lr}
   19ae2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19ae4:	f7ff ffaa 	bl	19a3c <pin_in_use_by_te>
   19ae8:	4c09      	ldr	r4, [pc, #36]	; (19b10 <pin_handler_trigger_uninit+0x30>)
   19aea:	f102 0508 	add.w	r5, r2, #8
   19aee:	b140      	cbz	r0, 19b02 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19af0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   19af4:	4907      	ldr	r1, [pc, #28]	; (19b14 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   19af6:	0b5b      	lsrs	r3, r3, #13
   19af8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   19afc:	2000      	movs	r0, #0
   19afe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   19b02:	4610      	mov	r0, r2
   19b04:	f7ff ffc2 	bl	19a8c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   19b08:	2300      	movs	r3, #0
   19b0a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   19b0e:	bd38      	pop	{r3, r4, r5, pc}
   19b10:	20000754 	.word	0x20000754
   19b14:	40006000 	.word	0x40006000

00019b18 <nrfx_gpiote_input_configure>:
{
   19b18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19b1c:	4604      	mov	r4, r0
   19b1e:	4617      	mov	r7, r2
   19b20:	461d      	mov	r5, r3
    if (p_input_config)
   19b22:	b321      	cbz	r1, 19b6e <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19b24:	4e4e      	ldr	r6, [pc, #312]	; (19c60 <nrfx_gpiote_input_configure+0x148>)
   19b26:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   19b2a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19b2e:	079b      	lsls	r3, r3, #30
   19b30:	d506      	bpl.n	19b40 <nrfx_gpiote_input_configure+0x28>
   19b32:	f7ff ff83 	bl	19a3c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   19b36:	b118      	cbz	r0, 19b40 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   19b38:	484a      	ldr	r0, [pc, #296]	; (19c64 <nrfx_gpiote_input_configure+0x14c>)
}
   19b3a:	b004      	add	sp, #16
   19b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19b40:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19b42:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   19b46:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   19b4a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   19b4e:	f10d 020f 	add.w	r2, sp, #15
   19b52:	460b      	mov	r3, r1
   19b54:	4620      	mov	r0, r4
   19b56:	f10d 010e 	add.w	r1, sp, #14
   19b5a:	f008 ff5a 	bl	22a12 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   19b5e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   19b62:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   19b66:	f043 0301 	orr.w	r3, r3, #1
   19b6a:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   19b6e:	b197      	cbz	r7, 19b96 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19b70:	4b3b      	ldr	r3, [pc, #236]	; (19c60 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   19b72:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   19b74:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19b76:	f104 0008 	add.w	r0, r4, #8
   19b7a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   19b7e:	078f      	lsls	r7, r1, #30
   19b80:	d50c      	bpl.n	19b9c <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   19b82:	2a00      	cmp	r2, #0
   19b84:	d1d8      	bne.n	19b38 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   19b86:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   19b8a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   19b8e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   19b92:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   19b96:	bbcd      	cbnz	r5, 19c0c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   19b98:	4833      	ldr	r0, [pc, #204]	; (19c68 <nrfx_gpiote_input_configure+0x150>)
   19b9a:	e7ce      	b.n	19b3a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   19b9c:	f021 0120 	bic.w	r1, r1, #32
   19ba0:	04c9      	lsls	r1, r1, #19
   19ba2:	0cc9      	lsrs	r1, r1, #19
   19ba4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   19ba8:	2a00      	cmp	r2, #0
   19baa:	d0ec      	beq.n	19b86 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   19bac:	2e03      	cmp	r6, #3
   19bae:	d8c3      	bhi.n	19b38 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   19bb0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   19bb2:	b92e      	cbnz	r6, 19bc0 <nrfx_gpiote_input_configure+0xa8>
   19bb4:	4a2d      	ldr	r2, [pc, #180]	; (19c6c <nrfx_gpiote_input_configure+0x154>)
   19bb6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   19bba:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   19bbe:	e7e2      	b.n	19b86 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19bc0:	00ba      	lsls	r2, r7, #2
   19bc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19bc6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19bca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   19bce:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19bd2:	f02c 0c03 	bic.w	ip, ip, #3
   19bd6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   19bda:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   19bde:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   19be2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   19be6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19bea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   19bee:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   19bf2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   19bf6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   19bfa:	ea4c 0c0e 	orr.w	ip, ip, lr
   19bfe:	f041 0120 	orr.w	r1, r1, #32
   19c02:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   19c06:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   19c0a:	e7bc      	b.n	19b86 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   19c0c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   19c10:	4620      	mov	r0, r4
   19c12:	f7ff ff3b 	bl	19a8c <release_handler>
    if (!handler)
   19c16:	2e00      	cmp	r6, #0
   19c18:	d0be      	beq.n	19b98 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   19c1a:	4d11      	ldr	r5, [pc, #68]	; (19c60 <nrfx_gpiote_input_configure+0x148>)
   19c1c:	682b      	ldr	r3, [r5, #0]
   19c1e:	429e      	cmp	r6, r3
   19c20:	d104      	bne.n	19c2c <nrfx_gpiote_input_configure+0x114>
   19c22:	686b      	ldr	r3, [r5, #4]
   19c24:	429f      	cmp	r7, r3
   19c26:	d101      	bne.n	19c2c <nrfx_gpiote_input_configure+0x114>
   19c28:	2200      	movs	r2, #0
   19c2a:	e00a      	b.n	19c42 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   19c2c:	4810      	ldr	r0, [pc, #64]	; (19c70 <nrfx_gpiote_input_configure+0x158>)
   19c2e:	f10d 010f 	add.w	r1, sp, #15
   19c32:	f7ff fead 	bl	19990 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   19c36:	4b0c      	ldr	r3, [pc, #48]	; (19c68 <nrfx_gpiote_input_configure+0x150>)
   19c38:	4298      	cmp	r0, r3
   19c3a:	f47f af7e 	bne.w	19b3a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   19c3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   19c42:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   19c46:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19c4a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   19c4c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   19c4e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   19c52:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   19c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19c5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   19c5e:	e79b      	b.n	19b98 <nrfx_gpiote_input_configure+0x80>
   19c60:	20000754 	.word	0x20000754
   19c64:	0bad0004 	.word	0x0bad0004
   19c68:	0bad0000 	.word	0x0bad0000
   19c6c:	40006000 	.word	0x40006000
   19c70:	200007c8 	.word	0x200007c8

00019c74 <nrfx_gpiote_output_configure>:
{
   19c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c76:	4604      	mov	r4, r0
   19c78:	b085      	sub	sp, #20
   19c7a:	4615      	mov	r5, r2
    if (p_config)
   19c7c:	b319      	cbz	r1, 19cc6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19c7e:	4e33      	ldr	r6, [pc, #204]	; (19d4c <nrfx_gpiote_output_configure+0xd8>)
   19c80:	f100 0708 	add.w	r7, r0, #8
   19c84:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   19c88:	0793      	lsls	r3, r2, #30
   19c8a:	d403      	bmi.n	19c94 <nrfx_gpiote_output_configure+0x20>
   19c8c:	f7ff fed6 	bl	19a3c <pin_in_use_by_te>
   19c90:	2800      	cmp	r0, #0
   19c92:	d158      	bne.n	19d46 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   19c94:	f012 0f1c 	tst.w	r2, #28
   19c98:	d002      	beq.n	19ca0 <nrfx_gpiote_output_configure+0x2c>
   19c9a:	784b      	ldrb	r3, [r1, #1]
   19c9c:	2b01      	cmp	r3, #1
   19c9e:	d052      	beq.n	19d46 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   19ca0:	2301      	movs	r3, #1
   19ca2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   19ca6:	2300      	movs	r3, #0
   19ca8:	e9cd 1300 	strd	r1, r3, [sp]
   19cac:	1c4a      	adds	r2, r1, #1
   19cae:	1c8b      	adds	r3, r1, #2
   19cb0:	4620      	mov	r0, r4
   19cb2:	f10d 010f 	add.w	r1, sp, #15
   19cb6:	f008 feac 	bl	22a12 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   19cba:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   19cbe:	f043 0303 	orr.w	r3, r3, #3
   19cc2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   19cc6:	b915      	cbnz	r5, 19cce <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   19cc8:	4821      	ldr	r0, [pc, #132]	; (19d50 <nrfx_gpiote_output_configure+0xdc>)
}
   19cca:	b005      	add	sp, #20
   19ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19cce:	4e1f      	ldr	r6, [pc, #124]	; (19d4c <nrfx_gpiote_output_configure+0xd8>)
   19cd0:	f104 0708 	add.w	r7, r4, #8
   19cd4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   19cd8:	0783      	lsls	r3, r0, #30
   19cda:	d534      	bpl.n	19d46 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   19cdc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   19ce0:	4661      	mov	r1, ip
   19ce2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   19ce4:	f020 0020 	bic.w	r0, r0, #32
   19ce8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   19cec:	04c0      	lsls	r0, r0, #19
   19cee:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   19cf2:	0cc0      	lsrs	r0, r0, #19
   19cf4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19cf8:	2300      	movs	r3, #0
   19cfa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   19cfe:	786a      	ldrb	r2, [r5, #1]
   19d00:	2a00      	cmp	r2, #0
   19d02:	d0e1      	beq.n	19cc8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   19d04:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   19d08:	78ad      	ldrb	r5, [r5, #2]
   19d0a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   19d0e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   19d12:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19d16:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   19d1a:	0223      	lsls	r3, r4, #8
   19d1c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   19d20:	0412      	lsls	r2, r2, #16
   19d22:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19d26:	ea43 030e 	orr.w	r3, r3, lr
   19d2a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   19d2c:	052a      	lsls	r2, r5, #20
   19d2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   19d32:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19d36:	4313      	orrs	r3, r2
   19d38:	f040 0020 	orr.w	r0, r0, #32
   19d3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   19d40:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   19d44:	e7c0      	b.n	19cc8 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   19d46:	4803      	ldr	r0, [pc, #12]	; (19d54 <nrfx_gpiote_output_configure+0xe0>)
   19d48:	e7bf      	b.n	19cca <nrfx_gpiote_output_configure+0x56>
   19d4a:	bf00      	nop
   19d4c:	20000754 	.word	0x20000754
   19d50:	0bad0000 	.word	0x0bad0000
   19d54:	0bad0004 	.word	0x0bad0004

00019d58 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   19d58:	4b01      	ldr	r3, [pc, #4]	; (19d60 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   19d5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   19d5e:	4770      	bx	lr
   19d60:	20000754 	.word	0x20000754

00019d64 <nrfx_gpiote_channel_get>:
{
   19d64:	b508      	push	{r3, lr}
   19d66:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   19d68:	f7ff fe68 	bl	19a3c <pin_in_use_by_te>
   19d6c:	b138      	cbz	r0, 19d7e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19d6e:	4b05      	ldr	r3, [pc, #20]	; (19d84 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   19d70:	4805      	ldr	r0, [pc, #20]	; (19d88 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19d72:	3208      	adds	r2, #8
   19d74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   19d78:	0b5b      	lsrs	r3, r3, #13
   19d7a:	700b      	strb	r3, [r1, #0]
}
   19d7c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19d7e:	4803      	ldr	r0, [pc, #12]	; (19d8c <nrfx_gpiote_channel_get+0x28>)
   19d80:	e7fc      	b.n	19d7c <nrfx_gpiote_channel_get+0x18>
   19d82:	bf00      	nop
   19d84:	20000754 	.word	0x20000754
   19d88:	0bad0000 	.word	0x0bad0000
   19d8c:	0bad0004 	.word	0x0bad0004

00019d90 <nrfx_gpiote_init>:
{
   19d90:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   19d92:	4c0f      	ldr	r4, [pc, #60]	; (19dd0 <nrfx_gpiote_init+0x40>)
   19d94:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   19d98:	b9bd      	cbnz	r5, 19dca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   19d9a:	2260      	movs	r2, #96	; 0x60
   19d9c:	4629      	mov	r1, r5
   19d9e:	f104 0010 	add.w	r0, r4, #16
   19da2:	f009 fd1f 	bl	237e4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   19da6:	2006      	movs	r0, #6
   19da8:	f7f9 fbe4 	bl	13574 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19dac:	4b09      	ldr	r3, [pc, #36]	; (19dd4 <nrfx_gpiote_init+0x44>)
    return err_code;
   19dae:	480a      	ldr	r0, [pc, #40]	; (19dd8 <nrfx_gpiote_init+0x48>)
   19db0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   19db4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   19db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19dbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   19dc0:	2301      	movs	r3, #1
   19dc2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   19dc6:	6763      	str	r3, [r4, #116]	; 0x74
}
   19dc8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   19dca:	4804      	ldr	r0, [pc, #16]	; (19ddc <nrfx_gpiote_init+0x4c>)
   19dcc:	e7fc      	b.n	19dc8 <nrfx_gpiote_init+0x38>
   19dce:	bf00      	nop
   19dd0:	20000754 	.word	0x20000754
   19dd4:	40006000 	.word	0x40006000
   19dd8:	0bad0000 	.word	0x0bad0000
   19ddc:	0bad0005 	.word	0x0bad0005

00019de0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   19de0:	4b03      	ldr	r3, [pc, #12]	; (19df0 <nrfx_gpiote_is_init+0x10>)
   19de2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   19de6:	3800      	subs	r0, #0
   19de8:	bf18      	it	ne
   19dea:	2001      	movne	r0, #1
   19dec:	4770      	bx	lr
   19dee:	bf00      	nop
   19df0:	20000754 	.word	0x20000754

00019df4 <nrfx_gpiote_channel_free>:
{
   19df4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   19df6:	4801      	ldr	r0, [pc, #4]	; (19dfc <nrfx_gpiote_channel_free+0x8>)
   19df8:	f7ff bdf0 	b.w	199dc <nrfx_flag32_free>
   19dfc:	200007c4 	.word	0x200007c4

00019e00 <nrfx_gpiote_channel_alloc>:
{
   19e00:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   19e02:	4801      	ldr	r0, [pc, #4]	; (19e08 <nrfx_gpiote_channel_alloc+0x8>)
   19e04:	f7ff bdc4 	b.w	19990 <nrfx_flag32_alloc>
   19e08:	200007c4 	.word	0x200007c4

00019e0c <nrfx_gpiote_trigger_enable>:
{
   19e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19e0e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19e10:	f7ff fe14 	bl	19a3c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19e14:	f104 0208 	add.w	r2, r4, #8
   19e18:	4b1e      	ldr	r3, [pc, #120]	; (19e94 <nrfx_gpiote_trigger_enable+0x88>)
   19e1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19e1e:	b1e8      	cbz	r0, 19e5c <nrfx_gpiote_trigger_enable+0x50>
   19e20:	f013 0502 	ands.w	r5, r3, #2
   19e24:	d11a      	bne.n	19e5c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19e26:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   19e28:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   19e2a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   19e2e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   19e32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   19e36:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19e3a:	6005      	str	r5, [r0, #0]
   19e3c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19e3e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   19e42:	f040 0001 	orr.w	r0, r0, #1
   19e46:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   19e4a:	b129      	cbz	r1, 19e58 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   19e4c:	2201      	movs	r2, #1
   19e4e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   19e52:	4a11      	ldr	r2, [pc, #68]	; (19e98 <nrfx_gpiote_trigger_enable+0x8c>)
   19e54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19e58:	b003      	add	sp, #12
   19e5a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19e5c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   19e60:	2b04      	cmp	r3, #4
   19e62:	d012      	beq.n	19e8a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   19e64:	2b05      	cmp	r3, #5
   19e66:	d012      	beq.n	19e8e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19e68:	a801      	add	r0, sp, #4
   19e6a:	9401      	str	r4, [sp, #4]
   19e6c:	f7ff fdd8 	bl	19a20 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19e70:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   19e72:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   19e76:	40d9      	lsrs	r1, r3
   19e78:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   19e7c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   19e7e:	4620      	mov	r0, r4
}
   19e80:	b003      	add	sp, #12
   19e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   19e86:	f008 be0b 	b.w	22aa0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   19e8a:	2103      	movs	r1, #3
   19e8c:	e7f7      	b.n	19e7e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   19e8e:	2102      	movs	r1, #2
   19e90:	e7f5      	b.n	19e7e <nrfx_gpiote_trigger_enable+0x72>
   19e92:	bf00      	nop
   19e94:	20000754 	.word	0x20000754
   19e98:	40006000 	.word	0x40006000

00019e9c <nrfx_gpiote_trigger_disable>:
{
   19e9c:	b508      	push	{r3, lr}
   19e9e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19ea0:	f7ff fdcc 	bl	19a3c <pin_in_use_by_te>
   19ea4:	b1c0      	cbz	r0, 19ed8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   19ea6:	f102 0108 	add.w	r1, r2, #8
   19eaa:	4b0e      	ldr	r3, [pc, #56]	; (19ee4 <nrfx_gpiote_trigger_disable+0x48>)
   19eac:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   19eb0:	0799      	lsls	r1, r3, #30
   19eb2:	d411      	bmi.n	19ed8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   19eb4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   19eb6:	2201      	movs	r2, #1
   19eb8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   19eba:	009b      	lsls	r3, r3, #2
   19ebc:	490a      	ldr	r1, [pc, #40]	; (19ee8 <nrfx_gpiote_trigger_disable+0x4c>)
   19ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19ec2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19ec6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   19eca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   19ece:	f022 0203 	bic.w	r2, r2, #3
   19ed2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   19ed6:	bd08      	pop	{r3, pc}
   19ed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   19edc:	2100      	movs	r1, #0
   19ede:	4610      	mov	r0, r2
   19ee0:	f008 bdde 	b.w	22aa0 <nrf_gpio_cfg_sense_set>
   19ee4:	20000754 	.word	0x20000754
   19ee8:	40006000 	.word	0x40006000

00019eec <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19eec:	4b0e      	ldr	r3, [pc, #56]	; (19f28 <nrfx_gpiote_pin_uninit+0x3c>)
   19eee:	f100 0208 	add.w	r2, r0, #8
{
   19ef2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   19ef4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   19ef8:	07db      	lsls	r3, r3, #31
{
   19efa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   19efc:	d511      	bpl.n	19f22 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   19efe:	f7ff ffcd 	bl	19e9c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   19f02:	4620      	mov	r0, r4
   19f04:	f7ff fdec 	bl	19ae0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19f08:	a801      	add	r0, sp, #4
   19f0a:	9401      	str	r4, [sp, #4]
   19f0c:	f7ff fd88 	bl	19a20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19f10:	9b01      	ldr	r3, [sp, #4]
   19f12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f16:	2202      	movs	r2, #2
   19f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   19f1c:	4803      	ldr	r0, [pc, #12]	; (19f2c <nrfx_gpiote_pin_uninit+0x40>)
}
   19f1e:	b002      	add	sp, #8
   19f20:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   19f22:	4803      	ldr	r0, [pc, #12]	; (19f30 <nrfx_gpiote_pin_uninit+0x44>)
   19f24:	e7fb      	b.n	19f1e <nrfx_gpiote_pin_uninit+0x32>
   19f26:	bf00      	nop
   19f28:	20000754 	.word	0x20000754
   19f2c:	0bad0000 	.word	0x0bad0000
   19f30:	0bad0004 	.word	0x0bad0004

00019f34 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   19f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f38:	4b64      	ldr	r3, [pc, #400]	; (1a0cc <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   19f3a:	4865      	ldr	r0, [pc, #404]	; (1a0d0 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19f3c:	4965      	ldr	r1, [pc, #404]	; (1a0d4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   19f3e:	2600      	movs	r6, #0
{
   19f40:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   19f42:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19f44:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f46:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   19f48:	b135      	cbz	r5, 19f58 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   19f4a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   19f4e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19f50:	bf1e      	ittt	ne
   19f52:	601c      	strne	r4, [r3, #0]
   19f54:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   19f56:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19f58:	3304      	adds	r3, #4
   19f5a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   19f5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   19f60:	d1f1      	bne.n	19f46 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f62:	f8df 816c 	ldr.w	r8, [pc, #364]	; 1a0d0 <nrfx_gpiote_irq_handler+0x19c>
   19f66:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   19f6a:	2b00      	cmp	r3, #0
   19f6c:	f000 8091 	beq.w	1a092 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   19f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19f74:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   19f78:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   19f7a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   19f7e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   19f82:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   19f84:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   19f88:	2700      	movs	r7, #0
            while (latch[i])
   19f8a:	f10d 0910 	add.w	r9, sp, #16
   19f8e:	017b      	lsls	r3, r7, #5
   19f90:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   19f92:	f04f 0a01 	mov.w	sl, #1
   19f96:	e049      	b.n	1a02c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   19f98:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19f9a:	4a4f      	ldr	r2, [pc, #316]	; (1a0d8 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   19f9c:	fa94 f4a4 	rbit	r4, r4
   19fa0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   19fa4:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19fa6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   19faa:	08e0      	lsrs	r0, r4, #3
   19fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   19fb0:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   19fb2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   19fb6:	fa0a fc02 	lsl.w	ip, sl, r2
   19fba:	f819 2000 	ldrb.w	r2, [r9, r0]
   19fbe:	ea22 020c 	bic.w	r2, r2, ip
   19fc2:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19fc6:	a803      	add	r0, sp, #12
   19fc8:	f3c3 0582 	ubfx	r5, r3, #2, #3
   19fcc:	0899      	lsrs	r1, r3, #2
   19fce:	f7ff fd27 	bl	19a20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19fd2:	9a03      	ldr	r2, [sp, #12]
   19fd4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   19fd8:	074b      	lsls	r3, r1, #29
   19fda:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   19fde:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   19fe0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   19fe4:	d529      	bpl.n	1a03a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   19fe6:	4620      	mov	r0, r4
   19fe8:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19fea:	b2d5      	uxtb	r5, r2
   19fec:	f7ff fd30 	bl	19a50 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19ff0:	a803      	add	r0, sp, #12
   19ff2:	9403      	str	r4, [sp, #12]
   19ff4:	f7ff fd14 	bl	19a20 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   19ff8:	9b03      	ldr	r3, [sp, #12]
   19ffa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19ffe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1a002:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1a006:	429d      	cmp	r5, r3
   1a008:	d107      	bne.n	1a01a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1a00a:	2100      	movs	r1, #0
   1a00c:	4620      	mov	r0, r4
   1a00e:	f008 fd47 	bl	22aa0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1a012:	4629      	mov	r1, r5
   1a014:	4620      	mov	r0, r4
   1a016:	f008 fd43 	bl	22aa0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a01a:	a803      	add	r0, sp, #12
   1a01c:	9403      	str	r4, [sp, #12]
   1a01e:	f7ff fcff 	bl	19a20 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1a022:	9b03      	ldr	r3, [sp, #12]
   1a024:	fa0a f303 	lsl.w	r3, sl, r3
   1a028:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1a02c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   1a030:	2c00      	cmp	r4, #0
   1a032:	d1b1      	bne.n	19f98 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1a034:	b9cf      	cbnz	r7, 1a06a <nrfx_gpiote_irq_handler+0x136>
   1a036:	2701      	movs	r7, #1
   1a038:	e7a9      	b.n	19f8e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a03a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1a03c:	bf0c      	ite	eq
   1a03e:	2103      	moveq	r1, #3
   1a040:	2102      	movne	r1, #2
   1a042:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a044:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1a046:	f008 fd2b 	bl	22aa0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1a04a:	2d03      	cmp	r5, #3
   1a04c:	d004      	beq.n	1a058 <nrfx_gpiote_irq_handler+0x124>
   1a04e:	9a01      	ldr	r2, [sp, #4]
   1a050:	2a02      	cmp	r2, #2
   1a052:	d106      	bne.n	1a062 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a054:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a056:	d1e0      	bne.n	1a01a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1a058:	4659      	mov	r1, fp
   1a05a:	4620      	mov	r0, r4
   1a05c:	f7ff fcf8 	bl	19a50 <call_handler>
   1a060:	e7db      	b.n	1a01a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1a062:	2a03      	cmp	r2, #3
   1a064:	d1d9      	bne.n	1a01a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1a066:	2d02      	cmp	r5, #2
   1a068:	e7f5      	b.n	1a056 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a06a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   1a06e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1a072:	491a      	ldr	r1, [pc, #104]	; (1a0dc <nrfx_gpiote_irq_handler+0x1a8>)
   1a074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a078:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1a07c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1a07e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1a082:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   1a086:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1a088:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   1a08c:	4313      	orrs	r3, r2
   1a08e:	f47f af7b 	bne.w	19f88 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1a092:	2401      	movs	r4, #1
    while (mask)
   1a094:	b916      	cbnz	r6, 1a09c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1a096:	b007      	add	sp, #28
   1a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1a09c:	fa96 f3a6 	rbit	r3, r6
   1a0a0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1a0a4:	fa04 f203 	lsl.w	r2, r4, r3
   1a0a8:	009b      	lsls	r3, r3, #2
   1a0aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a0ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a0b2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a0b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1a0ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1a0be:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1a0c2:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1a0c6:	f7ff fcc3 	bl	19a50 <call_handler>
   1a0ca:	e7e3      	b.n	1a094 <nrfx_gpiote_irq_handler+0x160>
   1a0cc:	40006100 	.word	0x40006100
   1a0d0:	40006000 	.word	0x40006000
   1a0d4:	40006120 	.word	0x40006120
   1a0d8:	20000754 	.word	0x20000754
   1a0dc:	50000300 	.word	0x50000300

0001a0e0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1a0e0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1a0e2:	4801      	ldr	r0, [pc, #4]	; (1a0e8 <nrfx_ppi_channel_alloc+0x8>)
   1a0e4:	f7ff bc54 	b.w	19990 <nrfx_flag32_alloc>
   1a0e8:	200007d0 	.word	0x200007d0

0001a0ec <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   1a0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a0f0:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a0f2:	4d2b      	ldr	r5, [pc, #172]	; (1a1a0 <nrfx_twim_init+0xb4>)
   1a0f4:	f04f 0c34 	mov.w	ip, #52	; 0x34
   1a0f8:	fb0c fc06 	mul.w	ip, ip, r6
   1a0fc:	eb05 040c 	add.w	r4, r5, ip
   1a100:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1a104:	2f00      	cmp	r7, #0
   1a106:	d149      	bne.n	1a19c <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1a108:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
   1a10a:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1a10c:	7b4b      	ldrb	r3, [r1, #13]
   1a10e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1a112:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
   1a114:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
   1a118:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1a11a:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
   1a11e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   1a122:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1a126:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1a12a:	b1cb      	cbz	r3, 1a160 <nrfx_twim_init+0x74>
   1a12c:	f1bc 0f00 	cmp.w	ip, #0
   1a130:	d105      	bne.n	1a13e <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1a132:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   1a136:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1a13a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   1a13e:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1a140:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   1a144:	b11a      	cbz	r2, 1a14e <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1a146:	f340 3007 	sbfx	r0, r0, #12, #8
   1a14a:	f7f9 fa13 	bl	13574 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a14e:	2334      	movs	r3, #52	; 0x34
   1a150:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1a154:	4813      	ldr	r0, [pc, #76]	; (1a1a4 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a156:	2301      	movs	r3, #1
   1a158:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1a15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   1a160:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
   1a162:	4b11      	ldr	r3, [pc, #68]	; (1a1a8 <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
   1a164:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   1a168:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1a16a:	2c01      	cmp	r4, #1
   1a16c:	bf18      	it	ne
   1a16e:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a172:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
   1a176:	bf08      	it	eq
   1a178:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   1a17a:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1a17e:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   1a182:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   1a184:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
   1a188:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
   1a18a:	2c01      	cmp	r4, #1
   1a18c:	bf18      	it	ne
   1a18e:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a192:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
   1a196:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   1a19a:	e7c7      	b.n	1a12c <nrfx_twim_init+0x40>
        return err_code;
   1a19c:	4803      	ldr	r0, [pc, #12]	; (1a1ac <nrfx_twim_init+0xc0>)
   1a19e:	e7dd      	b.n	1a15c <nrfx_twim_init+0x70>
   1a1a0:	20002740 	.word	0x20002740
   1a1a4:	0bad0000 	.word	0x0bad0000
   1a1a8:	50000300 	.word	0x50000300
   1a1ac:	0bad0005 	.word	0x0bad0005

0001a1b0 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   1a1b0:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a1b2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a1b4:	2106      	movs	r1, #6
   1a1b6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1a1ba:	4b04      	ldr	r3, [pc, #16]	; (1a1cc <nrfx_twim_enable+0x1c>)
   1a1bc:	2134      	movs	r1, #52	; 0x34
   1a1be:	fb01 3302 	mla	r3, r1, r2, r3
   1a1c2:	2202      	movs	r2, #2
   1a1c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   1a1c8:	4770      	bx	lr
   1a1ca:	bf00      	nop
   1a1cc:	20002740 	.word	0x20002740

0001a1d0 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a1d0:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   1a1d2:	4b0c      	ldr	r3, [pc, #48]	; (1a204 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   1a1d4:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   1a1d6:	2034      	movs	r0, #52	; 0x34
   1a1d8:	fb00 3301 	mla	r3, r0, r1, r3
   1a1dc:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   1a1de:	480a      	ldr	r0, [pc, #40]	; (1a208 <nrfx_twim_disable+0x38>)
   1a1e0:	6099      	str	r1, [r3, #8]
   1a1e2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1a1e6:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   1a1ea:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   1a1ee:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a1f2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1a1f6:	2201      	movs	r2, #1
   1a1f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   1a1fc:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   1a200:	4770      	bx	lr
   1a202:	bf00      	nop
   1a204:	20002740 	.word	0x20002740
   1a208:	019c0202 	.word	0x019c0202

0001a20c <nrfx_twim_uninit>:
{
   1a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a20e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   1a210:	4d1e      	ldr	r5, [pc, #120]	; (1a28c <nrfx_twim_uninit+0x80>)
   1a212:	2334      	movs	r3, #52	; 0x34
   1a214:	4373      	muls	r3, r6
{
   1a216:	4604      	mov	r4, r0
    if (p_cb->handler)
   1a218:	58eb      	ldr	r3, [r5, r3]
   1a21a:	b123      	cbz	r3, 1a226 <nrfx_twim_uninit+0x1a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1a21c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   1a21e:	f340 3007 	sbfx	r0, r0, #12, #8
   1a222:	f7f9 f9b7 	bl	13594 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   1a226:	4620      	mov	r0, r4
   1a228:	f7ff ffd2 	bl	1a1d0 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   1a22c:	2334      	movs	r3, #52	; 0x34
   1a22e:	fb03 5306 	mla	r3, r3, r6, r5
   1a232:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   1a236:	bb0a      	cbnz	r2, 1a27c <nrfx_twim_uninit+0x70>
   1a238:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   1a23c:	b9f3      	cbnz	r3, 1a27c <nrfx_twim_uninit+0x70>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   1a23e:	6824      	ldr	r4, [r4, #0]
        case 1: return NRF_P1;
   1a240:	4b13      	ldr	r3, [pc, #76]	; (1a290 <nrfx_twim_uninit+0x84>)
    return p_reg->PSEL.SCL;
   1a242:	f8d4 2508 	ldr.w	r2, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1a246:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a24a:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   1a24c:	2a01      	cmp	r2, #1
   1a24e:	bf18      	it	ne
   1a250:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a254:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1a258:	bf08      	it	eq
   1a25a:	461f      	moveq	r7, r3
    reg->PIN_CNF[pin_number] = cnf;
   1a25c:	2002      	movs	r0, #2
   1a25e:	f847 0022 	str.w	r0, [r7, r2, lsl #2]
    return p_reg->PSEL.SDA;
   1a262:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1a266:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1a26a:	0952      	lsrs	r2, r2, #5
        case 1: return NRF_P1;
   1a26c:	2a01      	cmp	r2, #1
   1a26e:	bf18      	it	ne
   1a270:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a274:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1a278:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1a27c:	2334      	movs	r3, #52	; 0x34
   1a27e:	fb03 5506 	mla	r5, r3, r6, r5
   1a282:	2300      	movs	r3, #0
   1a284:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   1a288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a28a:	bf00      	nop
   1a28c:	20002740 	.word	0x20002740
   1a290:	50000300 	.word	0x50000300

0001a294 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1a294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   1a298:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 1a56c <nrfx_twim_xfer+0x2d8>
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1a29c:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   1a2a0:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   1a2a2:	2334      	movs	r3, #52	; 0x34
   1a2a4:	fb03 c30e 	mla	r3, r3, lr, ip
{
   1a2a8:	4617      	mov	r7, r2
    p_cb->error = false;
   1a2aa:	2200      	movs	r2, #0
   1a2ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1a2b0:	684b      	ldr	r3, [r1, #4]
{
   1a2b2:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   1a2b4:	b14b      	cbz	r3, 1a2ca <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a2b6:	68cb      	ldr	r3, [r1, #12]
   1a2b8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1a2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a2c0:	d003      	beq.n	1a2ca <nrfx_twim_xfer+0x36>
        return err_code;
   1a2c2:	4eab      	ldr	r6, [pc, #684]	; (1a570 <nrfx_twim_xfer+0x2dc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a2c4:	4630      	mov	r0, r6
   1a2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1a2ca:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   1a2cc:	4ba9      	ldr	r3, [pc, #676]	; (1a574 <nrfx_twim_xfer+0x2e0>)
   1a2ce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   1a2d2:	fb06 c60e 	mla	r6, r6, lr, ip
   1a2d6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1a2da:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1a2de:	b123      	cbz	r3, 1a2ea <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a2e0:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   1a2e2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1a2e6:	4ea4      	ldr	r6, [pc, #656]	; (1a578 <nrfx_twim_xfer+0x2e4>)
   1a2e8:	e7ec      	b.n	1a2c4 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1a2ea:	f017 0f14 	tst.w	r7, #20
   1a2ee:	bf0c      	ite	eq
   1a2f0:	2301      	moveq	r3, #1
   1a2f2:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   1a2f4:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1a2f8:	46a9      	mov	r9, r5
   1a2fa:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1a2fe:	f106 080c 	add.w	r8, r6, #12
   1a302:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1a306:	f8d9 3000 	ldr.w	r3, [r9]
   1a30a:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1a30e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1a312:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1a316:	6237      	str	r7, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   1a318:	786b      	ldrb	r3, [r5, #1]
   1a31a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a31e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   1a322:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a326:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1a32a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a32e:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   1a332:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1a336:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   1a33a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   1a33e:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   1a342:	bf18      	it	ne
   1a344:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   1a346:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   1a34a:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   1a34e:	bf18      	it	ne
   1a350:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   1a352:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   1a356:	782a      	ldrb	r2, [r5, #0]
   1a358:	2a03      	cmp	r2, #3
   1a35a:	f200 80b5 	bhi.w	1a4c8 <nrfx_twim_xfer+0x234>
   1a35e:	e8df f002 	tbb	[pc, r2]
   1a362:	a084      	.short	0xa084
   1a364:	0269      	.short	0x0269
   1a366:	692b      	ldr	r3, [r5, #16]
   1a368:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a36c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1a370:	d1a7      	bne.n	1a2c2 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   1a372:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a376:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a37a:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a37c:	6869      	ldr	r1, [r5, #4]
   1a37e:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a382:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a386:	2100      	movs	r1, #0
   1a388:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1a38c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a390:	2001      	movs	r0, #1
   1a392:	6220      	str	r0, [r4, #32]
   1a394:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a396:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1a39a:	2800      	cmp	r0, #0
   1a39c:	d0fb      	beq.n	1a396 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a39e:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1a3a2:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a3a6:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a3a8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a3ac:	2334      	movs	r3, #52	; 0x34
   1a3ae:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   1a3b2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   1a3b6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1a3ba:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1a3bc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a3be:	4e6f      	ldr	r6, [pc, #444]	; (1a57c <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   1a3c0:	0739      	lsls	r1, r7, #28
   1a3c2:	d406      	bmi.n	1a3d2 <nrfx_twim_xfer+0x13e>
   1a3c4:	2a03      	cmp	r2, #3
   1a3c6:	d004      	beq.n	1a3d2 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a3c8:	2201      	movs	r2, #1
   1a3ca:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   1a3cc:	686b      	ldr	r3, [r5, #4]
   1a3ce:	b903      	cbnz	r3, 1a3d2 <nrfx_twim_xfer+0x13e>
   1a3d0:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   1a3d2:	2334      	movs	r3, #52	; 0x34
   1a3d4:	fb03 f30e 	mul.w	r3, r3, lr
   1a3d8:	eb0c 0103 	add.w	r1, ip, r3
   1a3dc:	f85c 2003 	ldr.w	r2, [ip, r3]
   1a3e0:	2a00      	cmp	r2, #0
   1a3e2:	d174      	bne.n	1a4ce <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   1a3e4:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a3e6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a3ea:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a3ee:	2800      	cmp	r0, #0
   1a3f0:	f040 8088 	bne.w	1a504 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   1a3f4:	3b00      	subs	r3, #0
   1a3f6:	bf18      	it	ne
   1a3f8:	2301      	movne	r3, #1
   1a3fa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a3fe:	2800      	cmp	r0, #0
   1a400:	f000 8086 	beq.w	1a510 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a404:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a408:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a40c:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   1a410:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   1a414:	b115      	cbz	r5, 1a41c <nrfx_twim_xfer+0x188>
   1a416:	f410 7f00 	tst.w	r0, #512	; 0x200
   1a41a:	d104      	bne.n	1a426 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a41c:	6221      	str	r1, [r4, #32]
   1a41e:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a420:	2d00      	cmp	r5, #0
   1a422:	d0e0      	beq.n	1a3e6 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   1a424:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   1a426:	05c0      	lsls	r0, r0, #23
   1a428:	d572      	bpl.n	1a510 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a42a:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1a42e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   1a432:	e7d8      	b.n	1a3e6 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a434:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a436:	68e9      	ldr	r1, [r5, #12]
   1a438:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a43c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1a440:	692b      	ldr	r3, [r5, #16]
   1a442:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   1a446:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1a44a:	f47f af3a 	bne.w	1a2c2 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   1a44e:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a450:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   1a454:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   1a458:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a45c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a460:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a462:	fb03 c30e 	mla	r3, r3, lr, ip
   1a466:	2102      	movs	r1, #2
   1a468:	e012      	b.n	1a490 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a46a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a46c:	68e9      	ldr	r1, [r5, #12]
   1a46e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   1a472:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   1a476:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   1a47a:	f04f 0334 	mov.w	r3, #52	; 0x34
   1a47e:	d00b      	beq.n	1a498 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   1a480:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a484:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1a488:	fb03 c30e 	mla	r3, r3, lr, ip
   1a48c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a490:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a492:	2301      	movs	r3, #1
   1a494:	6223      	str	r3, [r4, #32]
   1a496:	e791      	b.n	1a3bc <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   1a498:	f44f 7100 	mov.w	r1, #512	; 0x200
   1a49c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   1a4a0:	e7df      	b.n	1a462 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   1a4a2:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a4a4:	68e9      	ldr	r1, [r5, #12]
   1a4a6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a4aa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1a4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1a4b2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a4b6:	2334      	movs	r3, #52	; 0x34
   1a4b8:	fb03 c30e 	mla	r3, r3, lr, ip
   1a4bc:	2102      	movs	r1, #2
   1a4be:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a4c0:	2301      	movs	r3, #1
   1a4c2:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   1a4c4:	2300      	movs	r3, #0
   1a4c6:	e77a      	b.n	1a3be <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   1a4c8:	4e2d      	ldr	r6, [pc, #180]	; (1a580 <nrfx_twim_xfer+0x2ec>)
   1a4ca:	2308      	movs	r3, #8
   1a4cc:	e778      	b.n	1a3c0 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1a4ce:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   1a4d0:	bf44      	itt	mi
   1a4d2:	2300      	movmi	r3, #0
   1a4d4:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   1a4d6:	067b      	lsls	r3, r7, #25
   1a4d8:	d406      	bmi.n	1a4e8 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1a4da:	2334      	movs	r3, #52	; 0x34
   1a4dc:	fb03 c30e 	mla	r3, r3, lr, ip
   1a4e0:	689a      	ldr	r2, [r3, #8]
   1a4e2:	f042 0202 	orr.w	r2, r2, #2
   1a4e6:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   1a4e8:	2334      	movs	r3, #52	; 0x34
   1a4ea:	fb03 cc0e 	mla	ip, r3, lr, ip
   1a4ee:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1a4f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a4f6:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a4fa:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   1a4fe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1a502:	e6df      	b.n	1a2c4 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a504:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a508:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   1a50c:	2301      	movs	r3, #1
   1a50e:	e774      	b.n	1a3fa <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   1a510:	2b00      	cmp	r3, #0
   1a512:	f43f af68 	beq.w	1a3e6 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   1a516:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   1a518:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a51c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   1a520:	fb01 c20e 	mla	r2, r1, lr, ip
   1a524:	2000      	movs	r0, #0
   1a526:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   1a52a:	b18b      	cbz	r3, 1a550 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1a52c:	4a15      	ldr	r2, [pc, #84]	; (1a584 <nrfx_twim_xfer+0x2f0>)
   1a52e:	4e16      	ldr	r6, [pc, #88]	; (1a588 <nrfx_twim_xfer+0x2f4>)
   1a530:	f013 0f01 	tst.w	r3, #1
   1a534:	bf18      	it	ne
   1a536:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1a538:	f013 0f02 	tst.w	r3, #2
   1a53c:	f102 0201 	add.w	r2, r2, #1
   1a540:	bf18      	it	ne
   1a542:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1a544:	f013 0f04 	tst.w	r3, #4
   1a548:	4b10      	ldr	r3, [pc, #64]	; (1a58c <nrfx_twim_xfer+0x2f8>)
   1a54a:	bf18      	it	ne
   1a54c:	461e      	movne	r6, r3
   1a54e:	e6b9      	b.n	1a2c4 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   1a550:	067b      	lsls	r3, r7, #25
   1a552:	f53f aeb7 	bmi.w	1a2c4 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   1a556:	fb0e c101 	mla	r1, lr, r1, ip
   1a55a:	4620      	mov	r0, r4
   1a55c:	f008 faaf 	bl	22abe <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   1a560:	4b09      	ldr	r3, [pc, #36]	; (1a588 <nrfx_twim_xfer+0x2f4>)
   1a562:	2800      	cmp	r0, #0
   1a564:	bf08      	it	eq
   1a566:	461e      	moveq	r6, r3
   1a568:	e6ac      	b.n	1a2c4 <nrfx_twim_xfer+0x30>
   1a56a:	bf00      	nop
   1a56c:	20002740 	.word	0x20002740
   1a570:	0bad000a 	.word	0x0bad000a
   1a574:	019c0202 	.word	0x019c0202
   1a578:	0bad000b 	.word	0x0bad000b
   1a57c:	0bad0000 	.word	0x0bad0000
   1a580:	0bad0004 	.word	0x0bad0004
   1a584:	0bae0000 	.word	0x0bae0000
   1a588:	0bad0001 	.word	0x0bad0001
   1a58c:	0bae0002 	.word	0x0bae0002

0001a590 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   1a590:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a592:	4d5a      	ldr	r5, [pc, #360]	; (1a6fc <nrfx_twim_0_irq_handler+0x16c>)
   1a594:	4c5a      	ldr	r4, [pc, #360]	; (1a700 <nrfx_twim_0_irq_handler+0x170>)
   1a596:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
   1a59a:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1a59c:	b1fb      	cbz	r3, 1a5de <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a59e:	2300      	movs	r3, #0
   1a5a0:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   1a5a4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a5a8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a5ac:	b9bb      	cbnz	r3, 1a5de <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   1a5ae:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a5b0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   1a5b4:	2302      	movs	r3, #2
   1a5b6:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a5b8:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1a5ba:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a5be:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   1a5c2:	b11b      	cbz	r3, 1a5cc <nrfx_twim_0_irq_handler+0x3c>
    return p_reg->SHORTS;
   1a5c4:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   1a5c8:	059e      	lsls	r6, r3, #22
   1a5ca:	d403      	bmi.n	1a5d4 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a5cc:	4b4b      	ldr	r3, [pc, #300]	; (1a6fc <nrfx_twim_0_irq_handler+0x16c>)
   1a5ce:	2201      	movs	r2, #1
   1a5d0:	621a      	str	r2, [r3, #32]
   1a5d2:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   1a5d4:	2301      	movs	r3, #1
   1a5d6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   1a5da:	b007      	add	sp, #28
   1a5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a5de:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d053      	beq.n	1a68e <nrfx_twim_0_irq_handler+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a5e6:	2300      	movs	r3, #0
   1a5e8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1a5ec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   1a5f0:	6a23      	ldr	r3, [r4, #32]
   1a5f2:	065d      	lsls	r5, r3, #25
   1a5f4:	d40a      	bmi.n	1a60c <nrfx_twim_0_irq_handler+0x7c>
   1a5f6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a5fa:	b93b      	cbnz	r3, 1a60c <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   1a5fc:	4940      	ldr	r1, [pc, #256]	; (1a700 <nrfx_twim_0_irq_handler+0x170>)
   1a5fe:	483f      	ldr	r0, [pc, #252]	; (1a6fc <nrfx_twim_0_irq_handler+0x16c>)
   1a600:	f008 fa5d 	bl	22abe <xfer_completeness_check>
   1a604:	f080 0001 	eor.w	r0, r0, #1
   1a608:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1a60c:	6a23      	ldr	r3, [r4, #32]
   1a60e:	f013 0704 	ands.w	r7, r3, #4
   1a612:	d121      	bne.n	1a658 <nrfx_twim_0_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
   1a614:	4e3b      	ldr	r6, [pc, #236]	; (1a704 <nrfx_twim_0_irq_handler+0x174>)
            if (!p_cb->repeated || p_cb->error)
   1a616:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   1a61a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a61c:	ad01      	add	r5, sp, #4
   1a61e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a620:	6833      	ldr	r3, [r6, #0]
   1a622:	602b      	str	r3, [r5, #0]
   1a624:	4b35      	ldr	r3, [pc, #212]	; (1a6fc <nrfx_twim_0_irq_handler+0x16c>)
   1a626:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   1a62a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   1a62e:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   1a632:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   1a636:	f1bc 0f00 	cmp.w	ip, #0
   1a63a:	d002      	beq.n	1a642 <nrfx_twim_0_irq_handler+0xb2>
   1a63c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   1a640:	b152      	cbz	r2, 1a658 <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   1a642:	2200      	movs	r2, #0
   1a644:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   1a648:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   1a64a:	4a2f      	ldr	r2, [pc, #188]	; (1a708 <nrfx_twim_0_irq_handler+0x178>)
   1a64c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a650:	4b2e      	ldr	r3, [pc, #184]	; (1a70c <nrfx_twim_0_irq_handler+0x17c>)
   1a652:	2208      	movs	r2, #8
   1a654:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   1a658:	4a28      	ldr	r2, [pc, #160]	; (1a6fc <nrfx_twim_0_irq_handler+0x16c>)
   1a65a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1a65e:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   1a662:	0798      	lsls	r0, r3, #30
   1a664:	d53c      	bpl.n	1a6e0 <nrfx_twim_0_irq_handler+0x150>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1a666:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   1a668:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   1a66c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a670:	b90b      	cbnz	r3, 1a676 <nrfx_twim_0_irq_handler+0xe6>
        p_cb->busy = false;
   1a672:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   1a676:	6a23      	ldr	r3, [r4, #32]
   1a678:	075b      	lsls	r3, r3, #29
   1a67a:	d503      	bpl.n	1a684 <nrfx_twim_0_irq_handler+0xf4>
   1a67c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a680:	2b00      	cmp	r3, #0
   1a682:	d0aa      	beq.n	1a5da <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
   1a684:	e9d4 3100 	ldrd	r3, r1, [r4]
   1a688:	4668      	mov	r0, sp
   1a68a:	4798      	blx	r3
}
   1a68c:	e7a5      	b.n	1a5da <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a68e:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   1a692:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   1a696:	7b23      	ldrb	r3, [r4, #12]
   1a698:	b983      	cbnz	r3, 1a6bc <nrfx_twim_0_irq_handler+0x12c>
            event.xfer_desc = p_cb->xfer_desc;
   1a69a:	4f1a      	ldr	r7, [pc, #104]	; (1a704 <nrfx_twim_0_irq_handler+0x174>)
   1a69c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a69e:	ae01      	add	r6, sp, #4
   1a6a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a6a2:	683b      	ldr	r3, [r7, #0]
   1a6a4:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   1a6a6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a6aa:	2b00      	cmp	r3, #0
   1a6ac:	d1d4      	bne.n	1a658 <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
   1a6ae:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   1a6b2:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a6b4:	4b14      	ldr	r3, [pc, #80]	; (1a708 <nrfx_twim_0_irq_handler+0x178>)
   1a6b6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a6ba:	e7c9      	b.n	1a650 <nrfx_twim_0_irq_handler+0xc0>
    p_reg->SHORTS = mask;
   1a6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a6c0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   1a6c4:	f240 2302 	movw	r3, #514	; 0x202
   1a6c8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   1a6ca:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   1a6ce:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1a6d2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   1a6d4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a6d8:	2301      	movs	r3, #1
   1a6da:	60ab      	str	r3, [r5, #8]
   1a6dc:	622b      	str	r3, [r5, #32]
            return;
   1a6de:	e77c      	b.n	1a5da <nrfx_twim_0_irq_handler+0x4a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   1a6e0:	0759      	lsls	r1, r3, #29
   1a6e2:	d501      	bpl.n	1a6e8 <nrfx_twim_0_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   1a6e4:	2302      	movs	r3, #2
   1a6e6:	e7bf      	b.n	1a668 <nrfx_twim_0_irq_handler+0xd8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   1a6e8:	07da      	lsls	r2, r3, #31
   1a6ea:	d501      	bpl.n	1a6f0 <nrfx_twim_0_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   1a6ec:	2303      	movs	r3, #3
   1a6ee:	e7bb      	b.n	1a668 <nrfx_twim_0_irq_handler+0xd8>
    else if (p_cb->error)
   1a6f0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1a6f4:	2b00      	cmp	r3, #0
   1a6f6:	d0b7      	beq.n	1a668 <nrfx_twim_0_irq_handler+0xd8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1a6f8:	2304      	movs	r3, #4
   1a6fa:	e7b5      	b.n	1a668 <nrfx_twim_0_irq_handler+0xd8>
   1a6fc:	40003000 	.word	0x40003000
   1a700:	20002740 	.word	0x20002740
   1a704:	2000274c 	.word	0x2000274c
   1a708:	019c0202 	.word	0x019c0202
   1a70c:	e000e100 	.word	0xe000e100

0001a710 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1a710:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1a712:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a716:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1a718:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1a71a:	6002      	str	r2, [r0, #0]
}
   1a71c:	4802      	ldr	r0, [pc, #8]	; (1a728 <nrf_gpio_pin_port_decode+0x18>)
   1a71e:	bf18      	it	ne
   1a720:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1a724:	4770      	bx	lr
   1a726:	bf00      	nop
   1a728:	50000300 	.word	0x50000300

0001a72c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1a72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a72e:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1a730:	f008 f9f5 	bl	22b1e <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1a734:	4608      	mov	r0, r1
   1a736:	f008 f9f2 	bl	22b1e <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a73a:	a801      	add	r0, sp, #4
   1a73c:	9601      	str	r6, [sp, #4]
   1a73e:	f7ff ffe7 	bl	1a710 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a742:	9b01      	ldr	r3, [sp, #4]
   1a744:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   1a748:	460c      	mov	r4, r1
   1a74a:	f240 610d 	movw	r1, #1549	; 0x60d
   1a74e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a752:	a801      	add	r0, sp, #4
   1a754:	9401      	str	r4, [sp, #4]
   1a756:	f7ff ffdb 	bl	1a710 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1a75a:	9b01      	ldr	r3, [sp, #4]
   1a75c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1a760:	2509      	movs	r5, #9
   1a762:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1a766:	2004      	movs	r0, #4
   1a768:	f008 f951 	bl	22a0e <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a76c:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a76e:	a801      	add	r0, sp, #4
   1a770:	9401      	str	r4, [sp, #4]
   1a772:	f7ff ffcd 	bl	1a710 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a776:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1a778:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a77c:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1a77e:	07db      	lsls	r3, r3, #31
   1a780:	d415      	bmi.n	1a7ae <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a782:	a801      	add	r0, sp, #4
   1a784:	9601      	str	r6, [sp, #4]
   1a786:	f7ff ffc3 	bl	1a710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a78a:	9b01      	ldr	r3, [sp, #4]
   1a78c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1a790:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1a794:	2004      	movs	r0, #4
   1a796:	f008 f93a 	bl	22a0e <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1a79a:	4630      	mov	r0, r6
   1a79c:	f008 f9bf 	bl	22b1e <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1a7a0:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1a7a2:	2004      	movs	r0, #4
   1a7a4:	f008 f933 	bl	22a0e <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1a7a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1a7ac:	d1df      	bne.n	1a76e <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a7ae:	a801      	add	r0, sp, #4
   1a7b0:	9401      	str	r4, [sp, #4]
   1a7b2:	f7ff ffad 	bl	1a710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a7b6:	9a01      	ldr	r2, [sp, #4]
   1a7b8:	2301      	movs	r3, #1
   1a7ba:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1a7bc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1a7c0:	2004      	movs	r0, #4
   1a7c2:	f008 f924 	bl	22a0e <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1a7c6:	4620      	mov	r0, r4
   1a7c8:	f008 f9a9 	bl	22b1e <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1a7cc:	2004      	movs	r0, #4
   1a7ce:	f008 f91e 	bl	22a0e <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1a7d2:	a801      	add	r0, sp, #4
   1a7d4:	9401      	str	r4, [sp, #4]
   1a7d6:	f7ff ff9b 	bl	1a710 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a7da:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1a7dc:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1a7e0:	4803      	ldr	r0, [pc, #12]	; (1a7f0 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a7e2:	40d3      	lsrs	r3, r2
   1a7e4:	f003 0301 	and.w	r3, r3, #1
   1a7e8:	1ac0      	subs	r0, r0, r3
   1a7ea:	b003      	add	sp, #12
   1a7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7ee:	bf00      	nop
   1a7f0:	0bad0001 	.word	0x0bad0001

0001a7f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1a7f4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a7f6:	4c14      	ldr	r4, [pc, #80]	; (1a848 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a7f8:	4a14      	ldr	r2, [pc, #80]	; (1a84c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a7fa:	4915      	ldr	r1, [pc, #84]	; (1a850 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a7fc:	2303      	movs	r3, #3
   1a7fe:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a800:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a802:	4b14      	ldr	r3, [pc, #80]	; (1a854 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   1a804:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a806:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a808:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a80c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1a80e:	2300      	movs	r3, #0
   1a810:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a812:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a814:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1a816:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a818:	4a0f      	ldr	r2, [pc, #60]	; (1a858 <_DoInit+0x64>)
   1a81a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1a81c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a81e:	2210      	movs	r2, #16
   1a820:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a822:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a824:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a826:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1a828:	f008 ffe4 	bl	237f4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a82c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a830:	490a      	ldr	r1, [pc, #40]	; (1a85c <_DoInit+0x68>)
   1a832:	4620      	mov	r0, r4
   1a834:	f008 ffde 	bl	237f4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a838:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1a83c:	2320      	movs	r3, #32
   1a83e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1a840:	f3bf 8f5f 	dmb	sy
}
   1a844:	bd10      	pop	{r4, pc}
   1a846:	bf00      	nop
   1a848:	20002774 	.word	0x20002774
   1a84c:	00024ed1 	.word	0x00024ed1
   1a850:	00024eda 	.word	0x00024eda
   1a854:	200039c8 	.word	0x200039c8
   1a858:	200039b8 	.word	0x200039b8
   1a85c:	00024ede 	.word	0x00024ede

0001a860 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a860:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1a862:	4b16      	ldr	r3, [pc, #88]	; (1a8bc <SEGGER_RTT_WriteNoLock+0x5c>)
   1a864:	2418      	movs	r4, #24
   1a866:	fb00 4504 	mla	r5, r0, r4, r4
   1a86a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1a86c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a870:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   1a872:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1a874:	2c01      	cmp	r4, #1
   1a876:	d00e      	beq.n	1a896 <SEGGER_RTT_WriteNoLock+0x36>
   1a878:	2c02      	cmp	r4, #2
   1a87a:	d018      	beq.n	1a8ae <SEGGER_RTT_WriteNoLock+0x4e>
   1a87c:	b9e4      	cbnz	r4, 1a8b8 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1a87e:	4628      	mov	r0, r5
   1a880:	f008 f95a 	bl	22b38 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1a884:	4286      	cmp	r6, r0
   1a886:	d804      	bhi.n	1a892 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   1a888:	4632      	mov	r2, r6
   1a88a:	4628      	mov	r0, r5
   1a88c:	f008 f95d 	bl	22b4a <_WriteNoCheck>
   1a890:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   1a892:	4620      	mov	r0, r4
   1a894:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1a896:	4628      	mov	r0, r5
   1a898:	f008 f94e 	bl	22b38 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1a89c:	4286      	cmp	r6, r0
   1a89e:	4634      	mov	r4, r6
   1a8a0:	bf28      	it	cs
   1a8a2:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1a8a4:	4622      	mov	r2, r4
   1a8a6:	4628      	mov	r0, r5
   1a8a8:	f008 f94f 	bl	22b4a <_WriteNoCheck>
    break;
   1a8ac:	e7f1      	b.n	1a892 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1a8ae:	4628      	mov	r0, r5
}
   1a8b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1a8b4:	f008 b968 	b.w	22b88 <_WriteBlocking>
  switch (pRing->Flags) {
   1a8b8:	2400      	movs	r4, #0
  return Status;
   1a8ba:	e7ea      	b.n	1a892 <SEGGER_RTT_WriteNoLock+0x32>
   1a8bc:	20002774 	.word	0x20002774

0001a8c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a8c0:	4b0e      	ldr	r3, [pc, #56]	; (1a8fc <z_sys_init_run_level+0x3c>)
{
   1a8c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a8c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a8c8:	3001      	adds	r0, #1
   1a8ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1a8ce:	42a6      	cmp	r6, r4
   1a8d0:	d800      	bhi.n	1a8d4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1a8d2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1a8d4:	e9d4 3500 	ldrd	r3, r5, [r4]
   1a8d8:	4628      	mov	r0, r5
   1a8da:	4798      	blx	r3
		if (dev != NULL) {
   1a8dc:	b165      	cbz	r5, 1a8f8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   1a8de:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   1a8e0:	b130      	cbz	r0, 1a8f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1a8e2:	2800      	cmp	r0, #0
   1a8e4:	bfb8      	it	lt
   1a8e6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1a8e8:	28ff      	cmp	r0, #255	; 0xff
   1a8ea:	bfa8      	it	ge
   1a8ec:	20ff      	movge	r0, #255	; 0xff
   1a8ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1a8f0:	785a      	ldrb	r2, [r3, #1]
   1a8f2:	f042 0201 	orr.w	r2, r2, #1
   1a8f6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a8f8:	3408      	adds	r4, #8
   1a8fa:	e7e8      	b.n	1a8ce <z_sys_init_run_level+0xe>
   1a8fc:	00024524 	.word	0x00024524

0001a900 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1a900:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1a902:	4605      	mov	r5, r0
   1a904:	b910      	cbnz	r0, 1a90c <z_impl_device_get_binding+0xc>
		return NULL;
   1a906:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1a908:	4620      	mov	r0, r4
   1a90a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1a90c:	7803      	ldrb	r3, [r0, #0]
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d0f9      	beq.n	1a906 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a912:	4c0e      	ldr	r4, [pc, #56]	; (1a94c <z_impl_device_get_binding+0x4c>)
   1a914:	4e0e      	ldr	r6, [pc, #56]	; (1a950 <z_impl_device_get_binding+0x50>)
   1a916:	42b4      	cmp	r4, r6
   1a918:	d108      	bne.n	1a92c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a91a:	4c0c      	ldr	r4, [pc, #48]	; (1a94c <z_impl_device_get_binding+0x4c>)
   1a91c:	42b4      	cmp	r4, r6
   1a91e:	d0f2      	beq.n	1a906 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a920:	4620      	mov	r0, r4
   1a922:	f008 f965 	bl	22bf0 <z_device_is_ready>
   1a926:	b950      	cbnz	r0, 1a93e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a928:	3418      	adds	r4, #24
   1a92a:	e7f7      	b.n	1a91c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   1a92c:	4620      	mov	r0, r4
   1a92e:	f008 f95f 	bl	22bf0 <z_device_is_ready>
   1a932:	b110      	cbz	r0, 1a93a <z_impl_device_get_binding+0x3a>
   1a934:	6823      	ldr	r3, [r4, #0]
   1a936:	42ab      	cmp	r3, r5
   1a938:	d0e6      	beq.n	1a908 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a93a:	3418      	adds	r4, #24
   1a93c:	e7eb      	b.n	1a916 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a93e:	6821      	ldr	r1, [r4, #0]
   1a940:	4628      	mov	r0, r5
   1a942:	f7f2 f86e 	bl	ca22 <strcmp>
   1a946:	2800      	cmp	r0, #0
   1a948:	d1ee      	bne.n	1a928 <z_impl_device_get_binding+0x28>
   1a94a:	e7dd      	b.n	1a908 <z_impl_device_get_binding+0x8>
   1a94c:	00023958 	.word	0x00023958
   1a950:	00023a18 	.word	0x00023a18

0001a954 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1a954:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1a956:	4b0a      	ldr	r3, [pc, #40]	; (1a980 <bg_thread_main+0x2c>)
   1a958:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a95a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1a95c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a95e:	f7ff ffaf 	bl	1a8c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1a962:	f001 fadf 	bl	1bf24 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a966:	2003      	movs	r0, #3
   1a968:	f7ff ffaa 	bl	1a8c0 <z_sys_init_run_level>

	z_init_static_threads();
   1a96c:	f000 f97c 	bl	1ac68 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   1a970:	f7f7 fafc 	bl	11f6c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a974:	4a03      	ldr	r2, [pc, #12]	; (1a984 <bg_thread_main+0x30>)
   1a976:	7b13      	ldrb	r3, [r2, #12]
   1a978:	f023 0301 	bic.w	r3, r3, #1
   1a97c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a97e:	bd08      	pop	{r3, pc}
   1a980:	20003dc8 	.word	0x20003dc8
   1a984:	20001cf0 	.word	0x20001cf0

0001a988 <z_bss_zero>:
{
   1a988:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1a98a:	4803      	ldr	r0, [pc, #12]	; (1a998 <z_bss_zero+0x10>)
   1a98c:	4a03      	ldr	r2, [pc, #12]	; (1a99c <z_bss_zero+0x14>)
   1a98e:	2100      	movs	r1, #0
   1a990:	1a12      	subs	r2, r2, r0
   1a992:	f008 f952 	bl	22c3a <z_early_memset>
}
   1a996:	bd08      	pop	{r3, pc}
   1a998:	20000b90 	.word	0x20000b90
   1a99c:	20003dcc 	.word	0x20003dcc

0001a9a0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1a9a0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1a9a2:	2300      	movs	r3, #0
{
   1a9a4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1a9a6:	2201      	movs	r2, #1
   1a9a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1a9ac:	4e13      	ldr	r6, [pc, #76]	; (1a9fc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a9ae:	4d14      	ldr	r5, [pc, #80]	; (1aa00 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1a9b0:	9301      	str	r3, [sp, #4]
   1a9b2:	220f      	movs	r2, #15
   1a9b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1a9b8:	4912      	ldr	r1, [pc, #72]	; (1aa04 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a9ba:	2318      	movs	r3, #24
   1a9bc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1a9c0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1a9c4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1a9c6:	f44f 70b0 	mov.w	r0, #352	; 0x160
   1a9ca:	fb00 1104 	mla	r1, r0, r4, r1
   1a9ce:	4b0e      	ldr	r3, [pc, #56]	; (1aa08 <z_init_cpu+0x68>)
   1a9d0:	9500      	str	r5, [sp, #0]
   1a9d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a9d6:	4630      	mov	r0, r6
   1a9d8:	f000 f8e8 	bl	1abac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a9dc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1a9de:	480b      	ldr	r0, [pc, #44]	; (1aa0c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
   1a9e0:	752c      	strb	r4, [r5, #20]
   1a9e2:	f023 0304 	bic.w	r3, r3, #4
   1a9e6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1a9e8:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1a9ec:	fb03 0404 	mla	r4, r3, r4, r0
   1a9f0:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1a9f2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   1a9f4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1a9f6:	b006      	add	sp, #24
   1a9f8:	bd70      	pop	{r4, r5, r6, pc}
   1a9fa:	bf00      	nop
   1a9fc:	20001c70 	.word	0x20001c70
   1aa00:	2000281c 	.word	0x2000281c
   1aa04:	20005820 	.word	0x20005820
   1aa08:	0001ad21 	.word	0x0001ad21
   1aa0c:	20005980 	.word	0x20005980

0001aa10 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1aa10:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1aa12:	4b2e      	ldr	r3, [pc, #184]	; (1aacc <z_cstart+0xbc>)
   1aa14:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1aa16:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1aa1a:	4d2d      	ldr	r5, [pc, #180]	; (1aad0 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   1aa1c:	4e2d      	ldr	r6, [pc, #180]	; (1aad4 <z_cstart+0xc4>)
   1aa1e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aa20:	4f2d      	ldr	r7, [pc, #180]	; (1aad8 <z_cstart+0xc8>)
   1aa22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1aa26:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aa28:	23e0      	movs	r3, #224	; 0xe0
   1aa2a:	2400      	movs	r4, #0
   1aa2c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1aa30:	2320      	movs	r3, #32
   1aa32:	77eb      	strb	r3, [r5, #31]
   1aa34:	762c      	strb	r4, [r5, #24]
   1aa36:	766c      	strb	r4, [r5, #25]
   1aa38:	76ac      	strb	r4, [r5, #26]
   1aa3a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1aa3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1aa40:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1aa44:	626b      	str	r3, [r5, #36]	; 0x24
   1aa46:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1aa4a:	f7f8 ffcb 	bl	139e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1aa4e:	f7f8 fd73 	bl	13538 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1aa52:	f04f 33ff 	mov.w	r3, #4294967295
   1aa56:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1aa58:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1aa5a:	f7f9 f8fb 	bl	13c54 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1aa5e:	f7f9 f863 	bl	13b28 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1aa62:	f240 1301 	movw	r3, #257	; 0x101
   1aa66:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1aa6a:	ab06      	add	r3, sp, #24
   1aa6c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1aa6e:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1aa72:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1aa74:	f008 f8bb 	bl	22bee <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1aa78:	4620      	mov	r0, r4
   1aa7a:	f7ff ff21 	bl	1a8c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1aa7e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1aa80:	4d16      	ldr	r5, [pc, #88]	; (1aadc <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1aa82:	f7ff ff1d 	bl	1a8c0 <z_sys_init_run_level>
	z_sched_init();
   1aa86:	f000 fea7 	bl	1b7d8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aa8a:	4b15      	ldr	r3, [pc, #84]	; (1aae0 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   1aa8c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aa8e:	9305      	str	r3, [sp, #20]
   1aa90:	2301      	movs	r3, #1
   1aa92:	4914      	ldr	r1, [pc, #80]	; (1aae4 <z_cstart+0xd4>)
   1aa94:	9400      	str	r4, [sp, #0]
   1aa96:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1aa9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1aa9e:	463b      	mov	r3, r7
   1aaa0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1aaa4:	4628      	mov	r0, r5
   1aaa6:	f000 f881 	bl	1abac <z_setup_new_thread>
   1aaaa:	7b6a      	ldrb	r2, [r5, #13]
   1aaac:	4606      	mov	r6, r0
   1aaae:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1aab2:	4628      	mov	r0, r5
   1aab4:	736a      	strb	r2, [r5, #13]
   1aab6:	f008 fbc0 	bl	2323a <z_ready_thread>
	z_init_cpu(0);
   1aaba:	4620      	mov	r0, r4
   1aabc:	f7ff ff70 	bl	1a9a0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1aac0:	463a      	mov	r2, r7
   1aac2:	4631      	mov	r1, r6
   1aac4:	4628      	mov	r0, r5
   1aac6:	f7f8 fe55 	bl	13774 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1aaca:	bf00      	nop
   1aacc:	200061a0 	.word	0x200061a0
   1aad0:	e000ed00 	.word	0xe000ed00
   1aad4:	2000281c 	.word	0x2000281c
   1aad8:	0001a955 	.word	0x0001a955
   1aadc:	20001cf0 	.word	0x20001cf0
   1aae0:	00024ee5 	.word	0x00024ee5
   1aae4:	20005000 	.word	0x20005000

0001aae8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1aae8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1aaea:	4c06      	ldr	r4, [pc, #24]	; (1ab04 <statics_init+0x1c>)
   1aaec:	4d06      	ldr	r5, [pc, #24]	; (1ab08 <statics_init+0x20>)
   1aaee:	42ac      	cmp	r4, r5
   1aaf0:	d301      	bcc.n	1aaf6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1aaf2:	2000      	movs	r0, #0
   1aaf4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1aaf6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1aafa:	4620      	mov	r0, r4
   1aafc:	f008 f8a1 	bl	22c42 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ab00:	3414      	adds	r4, #20
   1ab02:	e7f4      	b.n	1aaee <statics_init+0x6>
   1ab04:	20000a08 	.word	0x20000a08
   1ab08:	20000a08 	.word	0x20000a08

0001ab0c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1ab0c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ab0e:	4b0e      	ldr	r3, [pc, #56]	; (1ab48 <init_mem_slab_module+0x3c>)
   1ab10:	4c0e      	ldr	r4, [pc, #56]	; (1ab4c <init_mem_slab_module+0x40>)
   1ab12:	42a3      	cmp	r3, r4
   1ab14:	d301      	bcc.n	1ab1a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1ab16:	2000      	movs	r0, #0
	return rc;
}
   1ab18:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1ab1a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1ab1e:	ea41 0200 	orr.w	r2, r1, r0
   1ab22:	f012 0203 	ands.w	r2, r2, #3
   1ab26:	d10b      	bne.n	1ab40 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1ab28:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1ab2a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ab2c:	42aa      	cmp	r2, r5
   1ab2e:	d101      	bne.n	1ab34 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1ab30:	331c      	adds	r3, #28
   1ab32:	e7ee      	b.n	1ab12 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1ab34:	695e      	ldr	r6, [r3, #20]
   1ab36:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1ab38:	3201      	adds	r2, #1
		slab->free_list = p;
   1ab3a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1ab3c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1ab3e:	e7f5      	b.n	1ab2c <init_mem_slab_module+0x20>
	return rc;
   1ab40:	f06f 0015 	mvn.w	r0, #21
   1ab44:	e7e8      	b.n	1ab18 <init_mem_slab_module+0xc>
   1ab46:	bf00      	nop
   1ab48:	200009b4 	.word	0x200009b4
   1ab4c:	20000a08 	.word	0x20000a08

0001ab50 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1ab50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ab52:	460c      	mov	r4, r1
	__asm__ volatile(
   1ab54:	f04f 0540 	mov.w	r5, #64	; 0x40
   1ab58:	f3ef 8111 	mrs	r1, BASEPRI
   1ab5c:	f385 8812 	msr	BASEPRI_MAX, r5
   1ab60:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ab64:	6945      	ldr	r5, [r0, #20]
   1ab66:	b15d      	cbz	r5, 1ab80 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1ab68:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ab6a:	682b      	ldr	r3, [r5, #0]
   1ab6c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1ab6e:	6983      	ldr	r3, [r0, #24]
   1ab70:	3301      	adds	r3, #1
   1ab72:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ab74:	2000      	movs	r0, #0
	__asm__ volatile(
   1ab76:	f381 8811 	msr	BASEPRI, r1
   1ab7a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1ab7e:	e011      	b.n	1aba4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ab80:	ea52 0c03 	orrs.w	ip, r2, r3
   1ab84:	d103      	bne.n	1ab8e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1ab86:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1ab88:	f06f 000b 	mvn.w	r0, #11
   1ab8c:	e7f3      	b.n	1ab76 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ab8e:	e9cd 2300 	strd	r2, r3, [sp]
   1ab92:	4602      	mov	r2, r0
   1ab94:	3008      	adds	r0, #8
   1ab96:	f000 fd75 	bl	1b684 <z_pend_curr>
		if (result == 0) {
   1ab9a:	b918      	cbnz	r0, 1aba4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1ab9c:	4b02      	ldr	r3, [pc, #8]	; (1aba8 <k_mem_slab_alloc+0x58>)
   1ab9e:	689b      	ldr	r3, [r3, #8]
   1aba0:	695b      	ldr	r3, [r3, #20]
   1aba2:	6023      	str	r3, [r4, #0]
}
   1aba4:	b003      	add	sp, #12
   1aba6:	bd30      	pop	{r4, r5, pc}
   1aba8:	2000281c 	.word	0x2000281c

0001abac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1abac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1abb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1abb2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1abb4:	2604      	movs	r6, #4
   1abb6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1abb8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1abba:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1abbc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1abc0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1abc2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1abc4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1abc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1abca:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1abcc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1abd0:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1abd2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1abd6:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1abda:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1abdc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1abde:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1abe0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1abe4:	9202      	str	r2, [sp, #8]
   1abe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1abe8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1abea:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1abec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1abee:	9200      	str	r2, [sp, #0]
   1abf0:	4642      	mov	r2, r8
{
   1abf2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1abf4:	f7f8 fd8c 	bl	13710 <arch_new_thread>
	if (!_current) {
   1abf8:	4b04      	ldr	r3, [pc, #16]	; (1ac0c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1abfa:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1abfc:	689b      	ldr	r3, [r3, #8]
   1abfe:	b103      	cbz	r3, 1ac02 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1ac00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1ac02:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ac04:	4640      	mov	r0, r8
   1ac06:	b004      	add	sp, #16
   1ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac0c:	2000281c 	.word	0x2000281c

0001ac10 <z_impl_k_thread_create>:
{
   1ac10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac12:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ac14:	2700      	movs	r7, #0
   1ac16:	9705      	str	r7, [sp, #20]
   1ac18:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1ac1a:	9704      	str	r7, [sp, #16]
   1ac1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1ac1e:	9703      	str	r7, [sp, #12]
   1ac20:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1ac22:	9702      	str	r7, [sp, #8]
{
   1ac24:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ac28:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1ac2a:	9701      	str	r7, [sp, #4]
   1ac2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1ac2e:	9700      	str	r7, [sp, #0]
{
   1ac30:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ac32:	f7ff ffbb 	bl	1abac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1ac36:	f1b5 3fff 	cmp.w	r5, #4294967295
   1ac3a:	bf08      	it	eq
   1ac3c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ac40:	d005      	beq.n	1ac4e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ac42:	ea55 0306 	orrs.w	r3, r5, r6
   1ac46:	d105      	bne.n	1ac54 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1ac48:	4620      	mov	r0, r4
   1ac4a:	f000 fcbf 	bl	1b5cc <z_sched_start>
}
   1ac4e:	4620      	mov	r0, r4
   1ac50:	b007      	add	sp, #28
   1ac52:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1ac54:	4903      	ldr	r1, [pc, #12]	; (1ac64 <z_impl_k_thread_create+0x54>)
   1ac56:	4632      	mov	r2, r6
   1ac58:	462b      	mov	r3, r5
   1ac5a:	f104 0018 	add.w	r0, r4, #24
   1ac5e:	f000 ff37 	bl	1bad0 <z_add_timeout>
   1ac62:	e7f4      	b.n	1ac4e <z_impl_k_thread_create+0x3e>
   1ac64:	0002325b 	.word	0x0002325b

0001ac68 <z_init_static_threads>:
{
   1ac68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ac6c:	4c29      	ldr	r4, [pc, #164]	; (1ad14 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1ac6e:	4d2a      	ldr	r5, [pc, #168]	; (1ad18 <z_init_static_threads+0xb0>)
{
   1ac70:	b087      	sub	sp, #28
   1ac72:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1ac74:	42ae      	cmp	r6, r5
   1ac76:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1ac7a:	d30f      	bcc.n	1ac9c <z_init_static_threads+0x34>
	k_sched_lock();
   1ac7c:	f000 fbc0 	bl	1b400 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ac80:	4c24      	ldr	r4, [pc, #144]	; (1ad14 <z_init_static_threads+0xac>)
   1ac82:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1ad1c <z_init_static_threads+0xb4>
   1ac86:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ac8a:	f240 37e7 	movw	r7, #999	; 0x3e7
   1ac8e:	42ac      	cmp	r4, r5
   1ac90:	d320      	bcc.n	1acd4 <z_init_static_threads+0x6c>
}
   1ac92:	b007      	add	sp, #28
   1ac94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1ac98:	f000 bd82 	b.w	1b7a0 <k_sched_unlock>
		z_setup_new_thread(
   1ac9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1aca0:	9305      	str	r3, [sp, #20]
   1aca2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1aca6:	9304      	str	r3, [sp, #16]
   1aca8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1acac:	9303      	str	r3, [sp, #12]
   1acae:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1acb2:	9302      	str	r3, [sp, #8]
   1acb4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1acb8:	9301      	str	r3, [sp, #4]
   1acba:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1acbe:	9300      	str	r3, [sp, #0]
   1acc0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1acc4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1acc8:	f7ff ff70 	bl	1abac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1accc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1acd0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1acd2:	e7ce      	b.n	1ac72 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1acd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1acd6:	1c5a      	adds	r2, r3, #1
   1acd8:	d00d      	beq.n	1acf6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1acda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1acde:	2100      	movs	r1, #0
   1ace0:	4638      	mov	r0, r7
   1ace2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1ace6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1acea:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1acee:	d104      	bne.n	1acfa <z_init_static_threads+0x92>
	z_sched_start(thread);
   1acf0:	4640      	mov	r0, r8
   1acf2:	f000 fc6b 	bl	1b5cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1acf6:	3430      	adds	r4, #48	; 0x30
   1acf8:	e7c9      	b.n	1ac8e <z_init_static_threads+0x26>
   1acfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1acfe:	2300      	movs	r3, #0
   1ad00:	f7e6 f8ac 	bl	e5c <__aeabi_uldivmod>
   1ad04:	4602      	mov	r2, r0
   1ad06:	460b      	mov	r3, r1
   1ad08:	f108 0018 	add.w	r0, r8, #24
   1ad0c:	4649      	mov	r1, r9
   1ad0e:	f000 fedf 	bl	1bad0 <z_add_timeout>
   1ad12:	e7f0      	b.n	1acf6 <z_init_static_threads+0x8e>
   1ad14:	200009b4 	.word	0x200009b4
   1ad18:	200009b4 	.word	0x200009b4
   1ad1c:	0002325b 	.word	0x0002325b

0001ad20 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1ad20:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1ad22:	4c0b      	ldr	r4, [pc, #44]	; (1ad50 <idle+0x30>)
	return !z_sys_post_kernel;
   1ad24:	4d0b      	ldr	r5, [pc, #44]	; (1ad54 <idle+0x34>)
	__asm__ volatile(
   1ad26:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ad2a:	f3ef 8311 	mrs	r3, BASEPRI
   1ad2e:	f382 8812 	msr	BASEPRI_MAX, r2
   1ad32:	f3bf 8f6f 	isb	sy
   1ad36:	f008 fb4c 	bl	233d2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1ad3a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1ad3c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1ad3e:	b913      	cbnz	r3, 1ad46 <idle+0x26>
	arch_cpu_idle();
   1ad40:	f7f8 fc00 	bl	13544 <arch_cpu_idle>
}
   1ad44:	e7ef      	b.n	1ad26 <idle+0x6>
   1ad46:	f7f8 f9f5 	bl	13134 <pm_system_suspend>
   1ad4a:	2800      	cmp	r0, #0
   1ad4c:	d1eb      	bne.n	1ad26 <idle+0x6>
   1ad4e:	e7f7      	b.n	1ad40 <idle+0x20>
   1ad50:	2000281c 	.word	0x2000281c
   1ad54:	20003dc8 	.word	0x20003dc8

0001ad58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ad58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ad5c:	4604      	mov	r4, r0
   1ad5e:	4617      	mov	r7, r2
   1ad60:	461e      	mov	r6, r3
   1ad62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad66:	f3ef 8811 	mrs	r8, BASEPRI
   1ad6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad6e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ad72:	68c3      	ldr	r3, [r0, #12]
   1ad74:	4a32      	ldr	r2, [pc, #200]	; (1ae40 <z_impl_k_mutex_lock+0xe8>)
   1ad76:	b16b      	cbz	r3, 1ad94 <z_impl_k_mutex_lock+0x3c>
   1ad78:	6880      	ldr	r0, [r0, #8]
   1ad7a:	6891      	ldr	r1, [r2, #8]
   1ad7c:	4288      	cmp	r0, r1
   1ad7e:	d019      	beq.n	1adb4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ad80:	ea57 0306 	orrs.w	r3, r7, r6
   1ad84:	d118      	bne.n	1adb8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1ad86:	f388 8811 	msr	BASEPRI, r8
   1ad8a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1ad8e:	f06f 000f 	mvn.w	r0, #15
   1ad92:	e00c      	b.n	1adae <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1ad94:	6891      	ldr	r1, [r2, #8]
   1ad96:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ad9a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1ad9c:	3301      	adds	r3, #1
   1ad9e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1ada0:	6893      	ldr	r3, [r2, #8]
   1ada2:	60a3      	str	r3, [r4, #8]
   1ada4:	f388 8811 	msr	BASEPRI, r8
   1ada8:	f3bf 8f6f 	isb	sy
		return 0;
   1adac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1adae:	b002      	add	sp, #8
   1adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1adb4:	6921      	ldr	r1, [r4, #16]
   1adb6:	e7f0      	b.n	1ad9a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1adb8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1adbc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1adc0:	4299      	cmp	r1, r3
   1adc2:	bfa8      	it	ge
   1adc4:	4619      	movge	r1, r3
   1adc6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1adca:	4291      	cmp	r1, r2
   1adcc:	bfb8      	it	lt
   1adce:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1add0:	428b      	cmp	r3, r1
   1add2:	dd2e      	ble.n	1ae32 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1add4:	f007 fff1 	bl	22dba <adjust_owner_prio.isra.0>
   1add8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1adda:	e9cd 7600 	strd	r7, r6, [sp]
   1adde:	4819      	ldr	r0, [pc, #100]	; (1ae44 <z_impl_k_mutex_lock+0xec>)
   1ade0:	4622      	mov	r2, r4
   1ade2:	4641      	mov	r1, r8
   1ade4:	f000 fc4e 	bl	1b684 <z_pend_curr>
	if (got_mutex == 0) {
   1ade8:	2800      	cmp	r0, #0
   1adea:	d0e0      	beq.n	1adae <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1adec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1adf0:	f3ef 8611 	mrs	r6, BASEPRI
   1adf4:	f383 8812 	msr	BASEPRI_MAX, r3
   1adf8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1adfc:	6823      	ldr	r3, [r4, #0]
   1adfe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae00:	429c      	cmp	r4, r3
   1ae02:	d00a      	beq.n	1ae1a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1ae04:	b14b      	cbz	r3, 1ae1a <z_impl_k_mutex_lock+0xc2>
   1ae06:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1ae0a:	4299      	cmp	r1, r3
   1ae0c:	bfa8      	it	ge
   1ae0e:	4619      	movge	r1, r3
   1ae10:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1ae14:	4299      	cmp	r1, r3
   1ae16:	bfb8      	it	lt
   1ae18:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1ae1a:	68a0      	ldr	r0, [r4, #8]
   1ae1c:	f007 ffcd 	bl	22dba <adjust_owner_prio.isra.0>
   1ae20:	b900      	cbnz	r0, 1ae24 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1ae22:	b145      	cbz	r5, 1ae36 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1ae24:	4807      	ldr	r0, [pc, #28]	; (1ae44 <z_impl_k_mutex_lock+0xec>)
   1ae26:	4631      	mov	r1, r6
   1ae28:	f000 fad8 	bl	1b3dc <z_reschedule>
	return -EAGAIN;
   1ae2c:	f06f 000a 	mvn.w	r0, #10
   1ae30:	e7bd      	b.n	1adae <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1ae32:	2500      	movs	r5, #0
   1ae34:	e7d1      	b.n	1adda <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1ae36:	f386 8811 	msr	BASEPRI, r6
   1ae3a:	f3bf 8f6f 	isb	sy
   1ae3e:	e7f5      	b.n	1ae2c <z_impl_k_mutex_lock+0xd4>
   1ae40:	2000281c 	.word	0x2000281c
   1ae44:	20003dc9 	.word	0x20003dc9

0001ae48 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1ae48:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1ae4a:	6883      	ldr	r3, [r0, #8]
{
   1ae4c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1ae4e:	2b00      	cmp	r3, #0
   1ae50:	d032      	beq.n	1aeb8 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ae52:	4a1c      	ldr	r2, [pc, #112]	; (1aec4 <z_impl_k_mutex_unlock+0x7c>)
   1ae54:	6892      	ldr	r2, [r2, #8]
   1ae56:	4293      	cmp	r3, r2
   1ae58:	d131      	bne.n	1aebe <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1ae5a:	7bda      	ldrb	r2, [r3, #15]
   1ae5c:	3a01      	subs	r2, #1
   1ae5e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1ae60:	68c3      	ldr	r3, [r0, #12]
   1ae62:	2b01      	cmp	r3, #1
   1ae64:	d905      	bls.n	1ae72 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ae66:	3b01      	subs	r3, #1
   1ae68:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1ae6a:	f000 fc99 	bl	1b7a0 <k_sched_unlock>

	return 0;
   1ae6e:	2000      	movs	r0, #0
}
   1ae70:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ae72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae76:	f3ef 8511 	mrs	r5, BASEPRI
   1ae7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae7e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ae82:	6901      	ldr	r1, [r0, #16]
   1ae84:	6880      	ldr	r0, [r0, #8]
   1ae86:	f007 ff98 	bl	22dba <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ae8a:	4620      	mov	r0, r4
   1ae8c:	f008 fa46 	bl	2331c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ae90:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ae92:	b158      	cbz	r0, 1aeac <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1ae94:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1ae98:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ae9a:	2200      	movs	r2, #0
   1ae9c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1ae9e:	f008 f9cc 	bl	2323a <z_ready_thread>
		z_reschedule(&lock, key);
   1aea2:	4809      	ldr	r0, [pc, #36]	; (1aec8 <z_impl_k_mutex_unlock+0x80>)
   1aea4:	4629      	mov	r1, r5
   1aea6:	f000 fa99 	bl	1b3dc <z_reschedule>
   1aeaa:	e7de      	b.n	1ae6a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1aeac:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1aeae:	f385 8811 	msr	BASEPRI, r5
   1aeb2:	f3bf 8f6f 	isb	sy
   1aeb6:	e7d8      	b.n	1ae6a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1aeb8:	f06f 0015 	mvn.w	r0, #21
   1aebc:	e7d8      	b.n	1ae70 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1aebe:	f04f 30ff 	mov.w	r0, #4294967295
   1aec2:	e7d5      	b.n	1ae70 <z_impl_k_mutex_unlock+0x28>
   1aec4:	2000281c 	.word	0x2000281c
   1aec8:	20003dc9 	.word	0x20003dc9

0001aecc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1aecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1aece:	4611      	mov	r1, r2
	__asm__ volatile(
   1aed0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1aed4:	f3ef 8511 	mrs	r5, BASEPRI
   1aed8:	f382 8812 	msr	BASEPRI_MAX, r2
   1aedc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1aee0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1aee2:	b19c      	cbz	r4, 1af0c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1aee4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1aee6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1aee8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1aeec:	4294      	cmp	r4, r2
	list->head = node;
   1aeee:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1aef0:	bf08      	it	eq
   1aef2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1aef4:	2101      	movs	r1, #1
   1aef6:	4620      	mov	r0, r4
   1aef8:	f007 ffd2 	bl	22ea0 <z_queue_node_peek>
   1aefc:	4604      	mov	r4, r0
	__asm__ volatile(
   1aefe:	f385 8811 	msr	BASEPRI, r5
   1af02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1af06:	4620      	mov	r0, r4
   1af08:	b003      	add	sp, #12
   1af0a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1af0c:	ea51 0203 	orrs.w	r2, r1, r3
   1af10:	d0f5      	beq.n	1aefe <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1af12:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1af16:	e9cd 1300 	strd	r1, r3, [sp]
   1af1a:	4610      	mov	r0, r2
   1af1c:	4629      	mov	r1, r5
   1af1e:	f000 fbb1 	bl	1b684 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1af22:	2800      	cmp	r0, #0
   1af24:	d1ef      	bne.n	1af06 <z_impl_k_queue_get+0x3a>
   1af26:	4b02      	ldr	r3, [pc, #8]	; (1af30 <z_impl_k_queue_get+0x64>)
   1af28:	689b      	ldr	r3, [r3, #8]
   1af2a:	695c      	ldr	r4, [r3, #20]
   1af2c:	e7eb      	b.n	1af06 <z_impl_k_queue_get+0x3a>
   1af2e:	bf00      	nop
   1af30:	2000281c 	.word	0x2000281c

0001af34 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1af34:	b538      	push	{r3, r4, r5, lr}
   1af36:	4604      	mov	r4, r0
	__asm__ volatile(
   1af38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af3c:	f3ef 8511 	mrs	r5, BASEPRI
   1af40:	f383 8812 	msr	BASEPRI_MAX, r3
   1af44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1af48:	f008 f9e8 	bl	2331c <z_unpend_first_thread>

	if (thread != NULL) {
   1af4c:	b148      	cbz	r0, 1af62 <z_impl_k_sem_give+0x2e>
   1af4e:	2200      	movs	r2, #0
   1af50:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1af52:	f008 f972 	bl	2323a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1af56:	4629      	mov	r1, r5
   1af58:	4808      	ldr	r0, [pc, #32]	; (1af7c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1af5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1af5e:	f000 ba3d 	b.w	1b3dc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1af62:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1af66:	429a      	cmp	r2, r3
   1af68:	bf18      	it	ne
   1af6a:	3301      	addne	r3, #1
   1af6c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1af6e:	2102      	movs	r1, #2
   1af70:	f104 0010 	add.w	r0, r4, #16
   1af74:	f008 fbe7 	bl	23746 <z_handle_obj_poll_events>
}
   1af78:	e7ed      	b.n	1af56 <z_impl_k_sem_give+0x22>
   1af7a:	bf00      	nop
   1af7c:	20003dc9 	.word	0x20003dc9

0001af80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1af80:	b513      	push	{r0, r1, r4, lr}
   1af82:	f04f 0440 	mov.w	r4, #64	; 0x40
   1af86:	f3ef 8111 	mrs	r1, BASEPRI
   1af8a:	f384 8812 	msr	BASEPRI_MAX, r4
   1af8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1af92:	6884      	ldr	r4, [r0, #8]
   1af94:	b144      	cbz	r4, 1afa8 <z_impl_k_sem_take+0x28>
		sem->count--;
   1af96:	3c01      	subs	r4, #1
   1af98:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1af9a:	f381 8811 	msr	BASEPRI, r1
   1af9e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1afa2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1afa4:	b002      	add	sp, #8
   1afa6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1afa8:	ea52 0403 	orrs.w	r4, r2, r3
   1afac:	d106      	bne.n	1afbc <z_impl_k_sem_take+0x3c>
   1afae:	f381 8811 	msr	BASEPRI, r1
   1afb2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1afb6:	f06f 000f 	mvn.w	r0, #15
   1afba:	e7f3      	b.n	1afa4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1afbc:	e9cd 2300 	strd	r2, r3, [sp]
   1afc0:	4602      	mov	r2, r0
   1afc2:	4802      	ldr	r0, [pc, #8]	; (1afcc <z_impl_k_sem_take+0x4c>)
   1afc4:	f000 fb5e 	bl	1b684 <z_pend_curr>
	return ret;
   1afc8:	e7ec      	b.n	1afa4 <z_impl_k_sem_take+0x24>
   1afca:	bf00      	nop
   1afcc:	20003dc9 	.word	0x20003dc9

0001afd0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1afd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1afd2:	4b09      	ldr	r3, [pc, #36]	; (1aff8 <k_sys_work_q_init+0x28>)
   1afd4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1afd6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1afd8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1afda:	9300      	str	r3, [sp, #0]
   1afdc:	4907      	ldr	r1, [pc, #28]	; (1affc <k_sys_work_q_init+0x2c>)
   1afde:	4808      	ldr	r0, [pc, #32]	; (1b000 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1afe0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1afe4:	f04f 33ff 	mov.w	r3, #4294967295
   1afe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1afec:	f000 f914 	bl	1b218 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1aff0:	4620      	mov	r0, r4
   1aff2:	b004      	add	sp, #16
   1aff4:	bd10      	pop	{r4, pc}
   1aff6:	bf00      	nop
   1aff8:	00024eea 	.word	0x00024eea
   1affc:	200061a0 	.word	0x200061a0
   1b000:	20001d70 	.word	0x20001d70

0001b004 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1b008:	4e47      	ldr	r6, [pc, #284]	; (1b128 <work_queue_main+0x124>)
   1b00a:	b085      	sub	sp, #20
   1b00c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1b00e:	f04f 38ff 	mov.w	r8, #4294967295
   1b012:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1b016:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b01a:	f3ef 8711 	mrs	r7, BASEPRI
   1b01e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b022:	f3bf 8f6f 	isb	sy
   1b026:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1b02a:	b98d      	cbnz	r5, 1b050 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1b02c:	2102      	movs	r1, #2
   1b02e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1b032:	f007 ffae 	bl	22f92 <flag_test_and_clear>
   1b036:	2800      	cmp	r0, #0
   1b038:	d135      	bne.n	1b0a6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b03a:	2300      	movs	r3, #0
   1b03c:	e9cd 8900 	strd	r8, r9, [sp]
   1b040:	9302      	str	r3, [sp, #8]
   1b042:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1b046:	4639      	mov	r1, r7
   1b048:	4838      	ldr	r0, [pc, #224]	; (1b12c <work_queue_main+0x128>)
   1b04a:	f000 fccb 	bl	1b9e4 <z_sched_wait>
			continue;
   1b04e:	e7e2      	b.n	1b016 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b050:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1b054:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b056:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b05a:	4295      	cmp	r5, r2
   1b05c:	d101      	bne.n	1b062 <work_queue_main+0x5e>
	list->tail = node;
   1b05e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1b062:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b066:	f043 0302 	orr.w	r3, r3, #2
   1b06a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1b06e:	68eb      	ldr	r3, [r5, #12]
   1b070:	f023 0304 	bic.w	r3, r3, #4
   1b074:	f043 0301 	orr.w	r3, r3, #1
   1b078:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1b07a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1b07c:	f387 8811 	msr	BASEPRI, r7
   1b080:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1b084:	4628      	mov	r0, r5
   1b086:	4798      	blx	r3
	__asm__ volatile(
   1b088:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b08c:	f3ef 8b11 	mrs	fp, BASEPRI
   1b090:	f383 8812 	msr	BASEPRI_MAX, r3
   1b094:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b098:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b09a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1b09c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b0a0:	d40b      	bmi.n	1b0ba <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1b0a2:	60ea      	str	r2, [r5, #12]
   1b0a4:	e00e      	b.n	1b0c4 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b0a6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b0aa:	2200      	movs	r2, #0
   1b0ac:	2101      	movs	r1, #1
   1b0ae:	4628      	mov	r0, r5
   1b0b0:	f008 f95c 	bl	2336c <z_sched_wake>
   1b0b4:	2800      	cmp	r0, #0
   1b0b6:	d1f8      	bne.n	1b0aa <work_queue_main+0xa6>
   1b0b8:	e7bf      	b.n	1b03a <work_queue_main+0x36>
	return list->head;
   1b0ba:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1b0bc:	f023 0303 	bic.w	r3, r3, #3
   1b0c0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b0c2:	b970      	cbnz	r0, 1b0e2 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1b0c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b0c8:	f023 0302 	bic.w	r3, r3, #2
   1b0cc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1b0d0:	f38b 8811 	msr	BASEPRI, fp
   1b0d4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1b0d8:	05d8      	lsls	r0, r3, #23
   1b0da:	d49c      	bmi.n	1b016 <work_queue_main+0x12>
	z_impl_k_yield();
   1b0dc:	f000 fb88 	bl	1b7f0 <z_impl_k_yield>
}
   1b0e0:	e799      	b.n	1b016 <work_queue_main+0x12>
	return node->next;
   1b0e2:	2700      	movs	r7, #0
   1b0e4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1b0e8:	463b      	mov	r3, r7
		if (wc->work == work) {
   1b0ea:	6842      	ldr	r2, [r0, #4]
   1b0ec:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1b0ee:	4601      	mov	r1, r0
		if (wc->work == work) {
   1b0f0:	d10c      	bne.n	1b10c <work_queue_main+0x108>
	return node->next;
   1b0f2:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b0f4:	b997      	cbnz	r7, 1b11c <work_queue_main+0x118>
   1b0f6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1b0f8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b0fa:	4282      	cmp	r2, r0
   1b0fc:	d100      	bne.n	1b100 <work_queue_main+0xfc>
	list->tail = node;
   1b0fe:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1b100:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b104:	f7ff ff16 	bl	1af34 <z_impl_k_sem_give>
}
   1b108:	4639      	mov	r1, r7
   1b10a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b10c:	f1ba 0f00 	cmp.w	sl, #0
   1b110:	d0d8      	beq.n	1b0c4 <work_queue_main+0xc0>
	return node->next;
   1b112:	4650      	mov	r0, sl
   1b114:	460f      	mov	r7, r1
   1b116:	f8da a000 	ldr.w	sl, [sl]
   1b11a:	e7e6      	b.n	1b0ea <work_queue_main+0xe6>
	return list->tail;
   1b11c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1b11e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b120:	4290      	cmp	r0, r2
	list->tail = node;
   1b122:	bf08      	it	eq
   1b124:	6077      	streq	r7, [r6, #4]
}
   1b126:	e7eb      	b.n	1b100 <work_queue_main+0xfc>
   1b128:	20002844 	.word	0x20002844
   1b12c:	20003dc9 	.word	0x20003dc9

0001b130 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1b130:	68c3      	ldr	r3, [r0, #12]
{
   1b132:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b134:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1b138:	079b      	lsls	r3, r3, #30
{
   1b13a:	4605      	mov	r5, r0
   1b13c:	460c      	mov	r4, r1
	if (ret) {
   1b13e:	d50d      	bpl.n	1b15c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b140:	2201      	movs	r2, #1
   1b142:	2100      	movs	r1, #0
   1b144:	f104 0008 	add.w	r0, r4, #8
   1b148:	f007 ff13 	bl	22f72 <z_impl_k_sem_init>
	parent->next = child;
   1b14c:	2300      	movs	r3, #0
   1b14e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b150:	4b05      	ldr	r3, [pc, #20]	; (1b168 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1b152:	6065      	str	r5, [r4, #4]
   1b154:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b156:	b91a      	cbnz	r2, 1b160 <cancel_sync_locked+0x30>
	list->head = node;
   1b158:	e9c3 4400 	strd	r4, r4, [r3]
}
   1b15c:	4630      	mov	r0, r6
   1b15e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1b160:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b162:	605c      	str	r4, [r3, #4]
}
   1b164:	e7fa      	b.n	1b15c <cancel_sync_locked+0x2c>
   1b166:	bf00      	nop
   1b168:	20002844 	.word	0x20002844

0001b16c <submit_to_queue_locked>:
{
   1b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b16e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b170:	079a      	lsls	r2, r3, #30
{
   1b172:	4604      	mov	r4, r0
   1b174:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b176:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1b17a:	d41f      	bmi.n	1b1bc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b17c:	075f      	lsls	r7, r3, #29
   1b17e:	d41f      	bmi.n	1b1c0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1b180:	680a      	ldr	r2, [r1, #0]
   1b182:	b90a      	cbnz	r2, 1b188 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1b184:	6882      	ldr	r2, [r0, #8]
   1b186:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b188:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1b18a:	bf44      	itt	mi
   1b18c:	68a3      	ldrmi	r3, [r4, #8]
   1b18e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1b190:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1b192:	bf4c      	ite	mi
   1b194:	2502      	movmi	r5, #2
		ret = 1;
   1b196:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1b198:	b37f      	cbz	r7, 1b1fa <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b19a:	4b1b      	ldr	r3, [pc, #108]	; (1b208 <submit_to_queue_locked+0x9c>)
   1b19c:	689b      	ldr	r3, [r3, #8]
   1b19e:	42bb      	cmp	r3, r7
   1b1a0:	d111      	bne.n	1b1c6 <submit_to_queue_locked+0x5a>
   1b1a2:	f007 fdf8 	bl	22d96 <k_is_in_isr>
   1b1a6:	f080 0001 	eor.w	r0, r0, #1
   1b1aa:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1b1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b1b0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1b1b2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b1b6:	d523      	bpl.n	1b200 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1b1b8:	b13a      	cbz	r2, 1b1ca <submit_to_queue_locked+0x5e>
   1b1ba:	b940      	cbnz	r0, 1b1ce <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1b1bc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1b1c0:	2300      	movs	r3, #0
   1b1c2:	6033      	str	r3, [r6, #0]
	return ret;
   1b1c4:	e013      	b.n	1b1ee <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b1c6:	2000      	movs	r0, #0
   1b1c8:	e7f0      	b.n	1b1ac <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1b1ca:	071b      	lsls	r3, r3, #28
   1b1cc:	d4f6      	bmi.n	1b1bc <submit_to_queue_locked+0x50>
	parent->next = child;
   1b1ce:	2300      	movs	r3, #0
   1b1d0:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b1d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1b1d6:	b963      	cbnz	r3, 1b1f2 <submit_to_queue_locked+0x86>
	list->head = node;
   1b1d8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1b1dc:	4638      	mov	r0, r7
   1b1de:	f007 fef1 	bl	22fc4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1b1e2:	68e3      	ldr	r3, [r4, #12]
   1b1e4:	f043 0304 	orr.w	r3, r3, #4
   1b1e8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1b1ea:	6833      	ldr	r3, [r6, #0]
   1b1ec:	60a3      	str	r3, [r4, #8]
}
   1b1ee:	4628      	mov	r0, r5
   1b1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1b1f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b1f4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1b1f8:	e7f0      	b.n	1b1dc <submit_to_queue_locked+0x70>
		return -EINVAL;
   1b1fa:	f06f 0515 	mvn.w	r5, #21
   1b1fe:	e7df      	b.n	1b1c0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1b200:	f06f 0512 	mvn.w	r5, #18
   1b204:	e7dc      	b.n	1b1c0 <submit_to_queue_locked+0x54>
   1b206:	bf00      	nop
   1b208:	2000281c 	.word	0x2000281c

0001b20c <k_work_submit>:
{
   1b20c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b20e:	4801      	ldr	r0, [pc, #4]	; (1b214 <k_work_submit+0x8>)
   1b210:	f007 bf48 	b.w	230a4 <k_work_submit_to_queue>
   1b214:	20001d70 	.word	0x20001d70

0001b218 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1b218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b21a:	b089      	sub	sp, #36	; 0x24
   1b21c:	4604      	mov	r4, r0
	list->head = NULL;
   1b21e:	2000      	movs	r0, #0
	list->tail = NULL;
   1b220:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1b224:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1b226:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1b22a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1b22e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1b232:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1b236:	b31d      	cbz	r5, 1b280 <k_work_queue_start+0x68>
   1b238:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b23a:	2800      	cmp	r0, #0
   1b23c:	f240 1001 	movw	r0, #257	; 0x101
   1b240:	bf08      	it	eq
   1b242:	2001      	moveq	r0, #1
	*flagp = flags;
   1b244:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b248:	2000      	movs	r0, #0
   1b24a:	f04f 36ff 	mov.w	r6, #4294967295
   1b24e:	f04f 37ff 	mov.w	r7, #4294967295
   1b252:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1b256:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1b25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b25e:	4b09      	ldr	r3, [pc, #36]	; (1b284 <k_work_queue_start+0x6c>)
   1b260:	9400      	str	r4, [sp, #0]
   1b262:	4620      	mov	r0, r4
   1b264:	f7ff fcd4 	bl	1ac10 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b268:	b125      	cbz	r5, 1b274 <k_work_queue_start+0x5c>
   1b26a:	6829      	ldr	r1, [r5, #0]
   1b26c:	b111      	cbz	r1, 1b274 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1b26e:	4620      	mov	r0, r4
   1b270:	f007 fd97 	bl	22da2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b274:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1b276:	b009      	add	sp, #36	; 0x24
   1b278:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b27c:	f007 bd94 	b.w	22da8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b280:	2001      	movs	r0, #1
   1b282:	e7df      	b.n	1b244 <k_work_queue_start+0x2c>
   1b284:	0001b005 	.word	0x0001b005

0001b288 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1b288:	b513      	push	{r0, r1, r4, lr}
   1b28a:	9001      	str	r0, [sp, #4]
   1b28c:	4608      	mov	r0, r1
	__asm__ volatile(
   1b28e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1b292:	f3ef 8411 	mrs	r4, BASEPRI
   1b296:	f381 8812 	msr	BASEPRI_MAX, r1
   1b29a:	f3bf 8f6f 	isb	sy
	return *flagp;
   1b29e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1b2a0:	f011 0f0e 	tst.w	r1, #14
   1b2a4:	d116      	bne.n	1b2d4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b2a6:	ea53 0c02 	orrs.w	ip, r3, r2
   1b2aa:	d108      	bne.n	1b2be <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1b2ac:	a901      	add	r1, sp, #4
   1b2ae:	f7ff ff5d 	bl	1b16c <submit_to_queue_locked>
	__asm__ volatile(
   1b2b2:	f384 8811 	msr	BASEPRI, r4
   1b2b6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b2ba:	b002      	add	sp, #8
   1b2bc:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1b2be:	f041 0108 	orr.w	r1, r1, #8
   1b2c2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1b2c4:	9901      	ldr	r1, [sp, #4]
   1b2c6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b2c8:	3010      	adds	r0, #16
   1b2ca:	4903      	ldr	r1, [pc, #12]	; (1b2d8 <k_work_schedule_for_queue+0x50>)
   1b2cc:	f000 fc00 	bl	1bad0 <z_add_timeout>
	return ret;
   1b2d0:	2001      	movs	r0, #1
   1b2d2:	e7ee      	b.n	1b2b2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1b2d4:	2000      	movs	r0, #0
   1b2d6:	e7ec      	b.n	1b2b2 <k_work_schedule_for_queue+0x2a>
   1b2d8:	00023035 	.word	0x00023035

0001b2dc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b2dc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b2de:	4801      	ldr	r0, [pc, #4]	; (1b2e4 <k_work_schedule+0x8>)
   1b2e0:	f7ff bfd2 	b.w	1b288 <k_work_schedule_for_queue>
   1b2e4:	20001d70 	.word	0x20001d70

0001b2e8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1b2e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b2ea:	460c      	mov	r4, r1
   1b2ec:	9001      	str	r0, [sp, #4]
   1b2ee:	4616      	mov	r6, r2
   1b2f0:	461d      	mov	r5, r3
	__asm__ volatile(
   1b2f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b2f6:	f3ef 8711 	mrs	r7, BASEPRI
   1b2fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2fe:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1b302:	4608      	mov	r0, r1
   1b304:	f007 fe50 	bl	22fa8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b308:	ea55 0306 	orrs.w	r3, r5, r6
   1b30c:	d109      	bne.n	1b322 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1b30e:	a901      	add	r1, sp, #4
   1b310:	4620      	mov	r0, r4
   1b312:	f7ff ff2b 	bl	1b16c <submit_to_queue_locked>
	__asm__ volatile(
   1b316:	f387 8811 	msr	BASEPRI, r7
   1b31a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1b31e:	b003      	add	sp, #12
   1b320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1b322:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b324:	4906      	ldr	r1, [pc, #24]	; (1b340 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1b326:	f043 0308 	orr.w	r3, r3, #8
   1b32a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1b32c:	9b01      	ldr	r3, [sp, #4]
   1b32e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b330:	f104 0010 	add.w	r0, r4, #16
   1b334:	4632      	mov	r2, r6
   1b336:	462b      	mov	r3, r5
   1b338:	f000 fbca 	bl	1bad0 <z_add_timeout>
	return ret;
   1b33c:	2001      	movs	r0, #1
   1b33e:	e7ea      	b.n	1b316 <k_work_reschedule_for_queue+0x2e>
   1b340:	00023035 	.word	0x00023035

0001b344 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b344:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b346:	4801      	ldr	r0, [pc, #4]	; (1b34c <k_work_reschedule+0x8>)
   1b348:	f7ff bfce 	b.w	1b2e8 <k_work_reschedule_for_queue>
   1b34c:	20001d70 	.word	0x20001d70

0001b350 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1b350:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1b352:	4d07      	ldr	r5, [pc, #28]	; (1b370 <z_reset_time_slice+0x20>)
   1b354:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1b356:	b154      	cbz	r4, 1b36e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1b358:	f7fd fc2c 	bl	18bb4 <sys_clock_elapsed>
   1b35c:	4b05      	ldr	r3, [pc, #20]	; (1b374 <z_reset_time_slice+0x24>)
   1b35e:	4404      	add	r4, r0
   1b360:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1b362:	6828      	ldr	r0, [r5, #0]
   1b364:	2100      	movs	r1, #0
	}
}
   1b366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1b36a:	f008 b842 	b.w	233f2 <z_set_timeout_expiry>
}
   1b36e:	bd38      	pop	{r3, r4, r5, pc}
   1b370:	20002854 	.word	0x20002854
   1b374:	2000281c 	.word	0x2000281c

0001b378 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b37a:	4604      	mov	r4, r0
   1b37c:	460d      	mov	r5, r1
	__asm__ volatile(
   1b37e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b382:	f3ef 8711 	mrs	r7, BASEPRI
   1b386:	f383 8812 	msr	BASEPRI_MAX, r3
   1b38a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b38e:	4e10      	ldr	r6, [pc, #64]	; (1b3d0 <k_sched_time_slice_set+0x58>)
   1b390:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b392:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1b396:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b39a:	6131      	str	r1, [r6, #16]
   1b39c:	2300      	movs	r3, #0
   1b39e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b3a2:	fbe4 010c 	umlal	r0, r1, r4, ip
   1b3a6:	f7e5 fd59 	bl	e5c <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b3aa:	2c00      	cmp	r4, #0
   1b3ac:	4b09      	ldr	r3, [pc, #36]	; (1b3d4 <k_sched_time_slice_set+0x5c>)
   1b3ae:	dc0a      	bgt.n	1b3c6 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   1b3b0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1b3b2:	4b09      	ldr	r3, [pc, #36]	; (1b3d8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1b3b4:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   1b3b6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   1b3b8:	f7ff ffca 	bl	1b350 <z_reset_time_slice>
	__asm__ volatile(
   1b3bc:	f387 8811 	msr	BASEPRI, r7
   1b3c0:	f3bf 8f6f 	isb	sy
	}
}
   1b3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   1b3c6:	2802      	cmp	r0, #2
   1b3c8:	bfb8      	it	lt
   1b3ca:	2002      	movlt	r0, #2
   1b3cc:	e7f0      	b.n	1b3b0 <k_sched_time_slice_set+0x38>
   1b3ce:	bf00      	nop
   1b3d0:	2000281c 	.word	0x2000281c
   1b3d4:	20002854 	.word	0x20002854
   1b3d8:	20002850 	.word	0x20002850

0001b3dc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b3dc:	b949      	cbnz	r1, 1b3f2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b3de:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1b3e2:	b930      	cbnz	r0, 1b3f2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1b3e4:	4b05      	ldr	r3, [pc, #20]	; (1b3fc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1b3e6:	69da      	ldr	r2, [r3, #28]
   1b3e8:	689b      	ldr	r3, [r3, #8]
   1b3ea:	429a      	cmp	r2, r3
   1b3ec:	d001      	beq.n	1b3f2 <z_reschedule+0x16>
	ret = arch_swap(key);
   1b3ee:	f7f8 b93b 	b.w	13668 <arch_swap>
   1b3f2:	f381 8811 	msr	BASEPRI, r1
   1b3f6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b3fa:	4770      	bx	lr
   1b3fc:	2000281c 	.word	0x2000281c

0001b400 <k_sched_lock>:
	__asm__ volatile(
   1b400:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b404:	f3ef 8111 	mrs	r1, BASEPRI
   1b408:	f383 8812 	msr	BASEPRI_MAX, r3
   1b40c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1b410:	4b04      	ldr	r3, [pc, #16]	; (1b424 <k_sched_lock+0x24>)
   1b412:	689a      	ldr	r2, [r3, #8]
   1b414:	7bd3      	ldrb	r3, [r2, #15]
   1b416:	3b01      	subs	r3, #1
   1b418:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b41a:	f381 8811 	msr	BASEPRI, r1
   1b41e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b422:	4770      	bx	lr
   1b424:	2000281c 	.word	0x2000281c

0001b428 <update_cache>:
{
   1b428:	b538      	push	{r3, r4, r5, lr}
   1b42a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1b42c:	480c      	ldr	r0, [pc, #48]	; (1b460 <update_cache+0x38>)
   1b42e:	4d0d      	ldr	r5, [pc, #52]	; (1b464 <update_cache+0x3c>)
   1b430:	f007 fefd 	bl	2322e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b434:	4604      	mov	r4, r0
   1b436:	b900      	cbnz	r0, 1b43a <update_cache+0x12>
   1b438:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1b43a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1b43c:	b94a      	cbnz	r2, 1b452 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1b43e:	7b5a      	ldrb	r2, [r3, #13]
   1b440:	06d2      	lsls	r2, r2, #27
   1b442:	d106      	bne.n	1b452 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b444:	69a2      	ldr	r2, [r4, #24]
   1b446:	b922      	cbnz	r2, 1b452 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b448:	89da      	ldrh	r2, [r3, #14]
   1b44a:	2a7f      	cmp	r2, #127	; 0x7f
   1b44c:	d901      	bls.n	1b452 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1b44e:	61eb      	str	r3, [r5, #28]
}
   1b450:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1b452:	429c      	cmp	r4, r3
   1b454:	d002      	beq.n	1b45c <update_cache+0x34>
			z_reset_time_slice(thread);
   1b456:	4620      	mov	r0, r4
   1b458:	f7ff ff7a 	bl	1b350 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b45c:	61ec      	str	r4, [r5, #28]
}
   1b45e:	e7f7      	b.n	1b450 <update_cache+0x28>
   1b460:	2000283c 	.word	0x2000283c
   1b464:	2000281c 	.word	0x2000281c

0001b468 <move_thread_to_end_of_prio_q>:
{
   1b468:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1b46a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b46e:	7b43      	ldrb	r3, [r0, #13]
   1b470:	2a00      	cmp	r2, #0
{
   1b472:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b474:	da04      	bge.n	1b480 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b47a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1b47c:	f007 fe82 	bl	23184 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b480:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1b482:	4a15      	ldr	r2, [pc, #84]	; (1b4d8 <move_thread_to_end_of_prio_q+0x70>)
   1b484:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b488:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1b48a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b48e:	f102 0520 	add.w	r5, r2, #32
   1b492:	42ab      	cmp	r3, r5
   1b494:	d01b      	beq.n	1b4ce <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b496:	b1d3      	cbz	r3, 1b4ce <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1b498:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1b49c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1b4a0:	4286      	cmp	r6, r0
   1b4a2:	d00f      	beq.n	1b4c4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1b4a4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b4a6:	2800      	cmp	r0, #0
   1b4a8:	dd0c      	ble.n	1b4c4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b4aa:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1b4ac:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1b4b0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b4b2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1b4b4:	6890      	ldr	r0, [r2, #8]
   1b4b6:	1a43      	subs	r3, r0, r1
   1b4b8:	4258      	negs	r0, r3
}
   1b4ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1b4be:	4158      	adcs	r0, r3
   1b4c0:	f7ff bfb2 	b.w	1b428 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b4c4:	42a3      	cmp	r3, r4
   1b4c6:	d002      	beq.n	1b4ce <move_thread_to_end_of_prio_q+0x66>
   1b4c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b4ca:	2b00      	cmp	r3, #0
   1b4cc:	d1e6      	bne.n	1b49c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1b4ce:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1b4d2:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1b4d4:	6251      	str	r1, [r2, #36]	; 0x24
}
   1b4d6:	e7ed      	b.n	1b4b4 <move_thread_to_end_of_prio_q+0x4c>
   1b4d8:	2000281c 	.word	0x2000281c

0001b4dc <z_time_slice>:
{
   1b4dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b4de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b4e2:	f3ef 8511 	mrs	r5, BASEPRI
   1b4e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4ea:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b4ee:	4b17      	ldr	r3, [pc, #92]	; (1b54c <z_time_slice+0x70>)
   1b4f0:	4a17      	ldr	r2, [pc, #92]	; (1b550 <z_time_slice+0x74>)
   1b4f2:	689c      	ldr	r4, [r3, #8]
   1b4f4:	6811      	ldr	r1, [r2, #0]
   1b4f6:	428c      	cmp	r4, r1
   1b4f8:	d107      	bne.n	1b50a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1b4fa:	4620      	mov	r0, r4
   1b4fc:	f7ff ff28 	bl	1b350 <z_reset_time_slice>
	__asm__ volatile(
   1b500:	f385 8811 	msr	BASEPRI, r5
   1b504:	f3bf 8f6f 	isb	sy
}
   1b508:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1b50a:	2100      	movs	r1, #0
   1b50c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1b50e:	4a11      	ldr	r2, [pc, #68]	; (1b554 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1b510:	6812      	ldr	r2, [r2, #0]
   1b512:	b1c2      	cbz	r2, 1b546 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1b514:	89e2      	ldrh	r2, [r4, #14]
   1b516:	2a7f      	cmp	r2, #127	; 0x7f
   1b518:	d815      	bhi.n	1b546 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1b51a:	7b62      	ldrb	r2, [r4, #13]
   1b51c:	06d2      	lsls	r2, r2, #27
   1b51e:	d112      	bne.n	1b546 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b520:	4a0d      	ldr	r2, [pc, #52]	; (1b558 <z_time_slice+0x7c>)
   1b522:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1b526:	6812      	ldr	r2, [r2, #0]
   1b528:	4291      	cmp	r1, r2
   1b52a:	db0c      	blt.n	1b546 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   1b52c:	4a0b      	ldr	r2, [pc, #44]	; (1b55c <z_time_slice+0x80>)
   1b52e:	4294      	cmp	r4, r2
   1b530:	d009      	beq.n	1b546 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1b532:	691a      	ldr	r2, [r3, #16]
   1b534:	4282      	cmp	r2, r0
   1b536:	dc03      	bgt.n	1b540 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1b538:	4620      	mov	r0, r4
   1b53a:	f7ff ff95 	bl	1b468 <move_thread_to_end_of_prio_q>
   1b53e:	e7dc      	b.n	1b4fa <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1b540:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1b542:	611a      	str	r2, [r3, #16]
   1b544:	e7dc      	b.n	1b500 <z_time_slice+0x24>
   1b546:	2200      	movs	r2, #0
   1b548:	e7fb      	b.n	1b542 <z_time_slice+0x66>
   1b54a:	bf00      	nop
   1b54c:	2000281c 	.word	0x2000281c
   1b550:	2000284c 	.word	0x2000284c
   1b554:	20002854 	.word	0x20002854
   1b558:	20002850 	.word	0x20002850
   1b55c:	20001c70 	.word	0x20001c70

0001b560 <ready_thread>:
{
   1b560:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b562:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b566:	7b43      	ldrb	r3, [r0, #13]
   1b568:	2a00      	cmp	r2, #0
   1b56a:	db2a      	blt.n	1b5c2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b56c:	06da      	lsls	r2, r3, #27
   1b56e:	d128      	bne.n	1b5c2 <ready_thread+0x62>
   1b570:	6982      	ldr	r2, [r0, #24]
   1b572:	bb32      	cbnz	r2, 1b5c2 <ready_thread+0x62>
	return list->head == list;
   1b574:	4a14      	ldr	r2, [pc, #80]	; (1b5c8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1b576:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b57a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1b57c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b580:	f102 0520 	add.w	r5, r2, #32
   1b584:	42ab      	cmp	r3, r5
   1b586:	d017      	beq.n	1b5b8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b588:	b1b3      	cbz	r3, 1b5b8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1b58a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1b58e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1b592:	428e      	cmp	r6, r1
   1b594:	d00b      	beq.n	1b5ae <ready_thread+0x4e>
		return b2 - b1;
   1b596:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b598:	2900      	cmp	r1, #0
   1b59a:	dd08      	ble.n	1b5ae <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1b59c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b59e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1b5a2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b5a4:	6058      	str	r0, [r3, #4]
}
   1b5a6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b5a8:	2000      	movs	r0, #0
   1b5aa:	f7ff bf3d 	b.w	1b428 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1b5ae:	42a3      	cmp	r3, r4
   1b5b0:	d002      	beq.n	1b5b8 <ready_thread+0x58>
   1b5b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b5b4:	2b00      	cmp	r3, #0
   1b5b6:	d1ea      	bne.n	1b58e <ready_thread+0x2e>
	node->prev = tail;
   1b5b8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1b5bc:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1b5be:	6250      	str	r0, [r2, #36]	; 0x24
}
   1b5c0:	e7f1      	b.n	1b5a6 <ready_thread+0x46>
}
   1b5c2:	bc70      	pop	{r4, r5, r6}
   1b5c4:	4770      	bx	lr
   1b5c6:	bf00      	nop
   1b5c8:	2000281c 	.word	0x2000281c

0001b5cc <z_sched_start>:
{
   1b5cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b5ce:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b5d2:	f3ef 8411 	mrs	r4, BASEPRI
   1b5d6:	f382 8812 	msr	BASEPRI_MAX, r2
   1b5da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b5de:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b5e0:	0751      	lsls	r1, r2, #29
   1b5e2:	d404      	bmi.n	1b5ee <z_sched_start+0x22>
	__asm__ volatile(
   1b5e4:	f384 8811 	msr	BASEPRI, r4
   1b5e8:	f3bf 8f6f 	isb	sy
}
   1b5ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b5ee:	f022 0204 	bic.w	r2, r2, #4
   1b5f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b5f4:	f7ff ffb4 	bl	1b560 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b5f8:	4621      	mov	r1, r4
   1b5fa:	4802      	ldr	r0, [pc, #8]	; (1b604 <z_sched_start+0x38>)
}
   1b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b600:	f7ff beec 	b.w	1b3dc <z_reschedule>
   1b604:	20003dc9 	.word	0x20003dc9

0001b608 <unready_thread>:
{
   1b608:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1b60a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1b60e:	7b43      	ldrb	r3, [r0, #13]
   1b610:	2a00      	cmp	r2, #0
{
   1b612:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1b614:	da04      	bge.n	1b620 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b61a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b61c:	f007 fdb2 	bl	23184 <sys_dlist_remove>
	update_cache(thread == _current);
   1b620:	4b04      	ldr	r3, [pc, #16]	; (1b634 <unready_thread+0x2c>)
   1b622:	6898      	ldr	r0, [r3, #8]
   1b624:	1a43      	subs	r3, r0, r1
   1b626:	4258      	negs	r0, r3
   1b628:	4158      	adcs	r0, r3
}
   1b62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1b62e:	f7ff befb 	b.w	1b428 <update_cache>
   1b632:	bf00      	nop
   1b634:	2000281c 	.word	0x2000281c

0001b638 <pend>:
{
   1b638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b63c:	4606      	mov	r6, r0
   1b63e:	4615      	mov	r5, r2
   1b640:	461c      	mov	r4, r3
	__asm__ volatile(
   1b642:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b646:	f3ef 8711 	mrs	r7, BASEPRI
   1b64a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b64e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1b652:	f007 fe24 	bl	2329e <add_to_waitq_locked>
	__asm__ volatile(
   1b656:	f387 8811 	msr	BASEPRI, r7
   1b65a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b65e:	f1b4 3fff 	cmp.w	r4, #4294967295
   1b662:	bf08      	it	eq
   1b664:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1b668:	d008      	beq.n	1b67c <pend+0x44>
   1b66a:	462a      	mov	r2, r5
   1b66c:	4623      	mov	r3, r4
   1b66e:	f106 0018 	add.w	r0, r6, #24
   1b672:	4903      	ldr	r1, [pc, #12]	; (1b680 <pend+0x48>)
}
   1b674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b678:	f000 ba2a 	b.w	1bad0 <z_add_timeout>
   1b67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b680:	0002325b 	.word	0x0002325b

0001b684 <z_pend_curr>:
{
   1b684:	b510      	push	{r4, lr}
	pending_current = _current;
   1b686:	4b07      	ldr	r3, [pc, #28]	; (1b6a4 <z_pend_curr+0x20>)
   1b688:	6898      	ldr	r0, [r3, #8]
   1b68a:	4b07      	ldr	r3, [pc, #28]	; (1b6a8 <z_pend_curr+0x24>)
{
   1b68c:	460c      	mov	r4, r1
	pending_current = _current;
   1b68e:	6018      	str	r0, [r3, #0]
{
   1b690:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1b692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b696:	f7ff ffcf 	bl	1b638 <pend>
   1b69a:	4620      	mov	r0, r4
}
   1b69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b6a0:	f7f7 bfe2 	b.w	13668 <arch_swap>
   1b6a4:	2000281c 	.word	0x2000281c
   1b6a8:	2000284c 	.word	0x2000284c

0001b6ac <z_set_prio>:
{
   1b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6ae:	4604      	mov	r4, r0
	__asm__ volatile(
   1b6b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6b4:	f3ef 8611 	mrs	r6, BASEPRI
   1b6b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6bc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1b6c0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b6c2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1b6c4:	b249      	sxtb	r1, r1
   1b6c6:	d133      	bne.n	1b730 <z_set_prio+0x84>
		if (need_sched) {
   1b6c8:	6982      	ldr	r2, [r0, #24]
   1b6ca:	bb8a      	cbnz	r2, 1b730 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b6cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b6d0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b6d2:	f007 fd57 	bl	23184 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b6d6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1b6d8:	4a17      	ldr	r2, [pc, #92]	; (1b738 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1b6da:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b6dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b6e0:	7343      	strb	r3, [r0, #13]
   1b6e2:	4610      	mov	r0, r2
   1b6e4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b6e8:	4283      	cmp	r3, r0
   1b6ea:	d01b      	beq.n	1b724 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b6ec:	b1d3      	cbz	r3, 1b724 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1b6ee:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   1b6f0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1b6f4:	42a9      	cmp	r1, r5
   1b6f6:	d010      	beq.n	1b71a <z_set_prio+0x6e>
		return b2 - b1;
   1b6f8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b6fa:	2d00      	cmp	r5, #0
   1b6fc:	dd0d      	ble.n	1b71a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1b6fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b700:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b704:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b706:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1b708:	2001      	movs	r0, #1
   1b70a:	f7ff fe8d 	bl	1b428 <update_cache>
   1b70e:	2001      	movs	r0, #1
	__asm__ volatile(
   1b710:	f386 8811 	msr	BASEPRI, r6
   1b714:	f3bf 8f6f 	isb	sy
}
   1b718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1b71a:	42bb      	cmp	r3, r7
   1b71c:	d002      	beq.n	1b724 <z_set_prio+0x78>
   1b71e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b720:	2b00      	cmp	r3, #0
   1b722:	d1e5      	bne.n	1b6f0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1b724:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   1b726:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1b72a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b72c:	6254      	str	r4, [r2, #36]	; 0x24
}
   1b72e:	e7eb      	b.n	1b708 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1b730:	73a1      	strb	r1, [r4, #14]
   1b732:	2000      	movs	r0, #0
   1b734:	e7ec      	b.n	1b710 <z_set_prio+0x64>
   1b736:	bf00      	nop
   1b738:	2000281c 	.word	0x2000281c

0001b73c <z_impl_k_thread_suspend>:
{
   1b73c:	b570      	push	{r4, r5, r6, lr}
   1b73e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b740:	3018      	adds	r0, #24
   1b742:	f007 fe30 	bl	233a6 <z_abort_timeout>
	__asm__ volatile(
   1b746:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b74a:	f3ef 8611 	mrs	r6, BASEPRI
   1b74e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b752:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b756:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1b75a:	7b63      	ldrb	r3, [r4, #13]
   1b75c:	2a00      	cmp	r2, #0
   1b75e:	da05      	bge.n	1b76c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b764:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b766:	4620      	mov	r0, r4
   1b768:	f007 fd0c 	bl	23184 <sys_dlist_remove>
		update_cache(thread == _current);
   1b76c:	4d0b      	ldr	r5, [pc, #44]	; (1b79c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b76e:	7b63      	ldrb	r3, [r4, #13]
   1b770:	68a8      	ldr	r0, [r5, #8]
   1b772:	f043 0310 	orr.w	r3, r3, #16
   1b776:	7363      	strb	r3, [r4, #13]
   1b778:	1b03      	subs	r3, r0, r4
   1b77a:	4258      	negs	r0, r3
   1b77c:	4158      	adcs	r0, r3
   1b77e:	f7ff fe53 	bl	1b428 <update_cache>
	__asm__ volatile(
   1b782:	f386 8811 	msr	BASEPRI, r6
   1b786:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b78a:	68ab      	ldr	r3, [r5, #8]
   1b78c:	42a3      	cmp	r3, r4
   1b78e:	d103      	bne.n	1b798 <z_impl_k_thread_suspend+0x5c>
}
   1b790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b794:	f007 bd41 	b.w	2321a <z_reschedule_unlocked>
}
   1b798:	bd70      	pop	{r4, r5, r6, pc}
   1b79a:	bf00      	nop
   1b79c:	2000281c 	.word	0x2000281c

0001b7a0 <k_sched_unlock>:
{
   1b7a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7a6:	f3ef 8411 	mrs	r4, BASEPRI
   1b7aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7ae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b7b2:	4b08      	ldr	r3, [pc, #32]	; (1b7d4 <k_sched_unlock+0x34>)
   1b7b4:	689a      	ldr	r2, [r3, #8]
   1b7b6:	7bd3      	ldrb	r3, [r2, #15]
   1b7b8:	3301      	adds	r3, #1
   1b7ba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b7bc:	2000      	movs	r0, #0
   1b7be:	f7ff fe33 	bl	1b428 <update_cache>
	__asm__ volatile(
   1b7c2:	f384 8811 	msr	BASEPRI, r4
   1b7c6:	f3bf 8f6f 	isb	sy
}
   1b7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b7ce:	f007 bd24 	b.w	2321a <z_reschedule_unlocked>
   1b7d2:	bf00      	nop
   1b7d4:	2000281c 	.word	0x2000281c

0001b7d8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1b7d8:	4b04      	ldr	r3, [pc, #16]	; (1b7ec <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1b7da:	2100      	movs	r1, #0
   1b7dc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1b7e0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1b7e4:	4608      	mov	r0, r1
   1b7e6:	f7ff bdc7 	b.w	1b378 <k_sched_time_slice_set>
   1b7ea:	bf00      	nop
   1b7ec:	2000281c 	.word	0x2000281c

0001b7f0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1b7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7f6:	f3ef 8511 	mrs	r5, BASEPRI
   1b7fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1b802:	491a      	ldr	r1, [pc, #104]	; (1b86c <z_impl_k_yield+0x7c>)
   1b804:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b806:	7b43      	ldrb	r3, [r0, #13]
   1b808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b80c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b80e:	f007 fcb9 	bl	23184 <sys_dlist_remove>
	}
	queue_thread(_current);
   1b812:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b814:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1b816:	4608      	mov	r0, r1
   1b818:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b81c:	735a      	strb	r2, [r3, #13]
   1b81e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b822:	4282      	cmp	r2, r0
   1b824:	d01c      	beq.n	1b860 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b826:	b1da      	cbz	r2, 1b860 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1b828:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   1b82a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1b82e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1b832:	42a6      	cmp	r6, r4
   1b834:	d00f      	beq.n	1b856 <z_impl_k_yield+0x66>
		return b2 - b1;
   1b836:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b838:	2c00      	cmp	r4, #0
   1b83a:	dd0c      	ble.n	1b856 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1b83c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1b83e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1b842:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1b844:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1b846:	2001      	movs	r0, #1
   1b848:	f7ff fdee 	bl	1b428 <update_cache>
   1b84c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1b84e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b852:	f7f7 bf09 	b.w	13668 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1b856:	42ba      	cmp	r2, r7
   1b858:	d002      	beq.n	1b860 <z_impl_k_yield+0x70>
   1b85a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b85c:	2a00      	cmp	r2, #0
   1b85e:	d1e6      	bne.n	1b82e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1b860:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1b862:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1b866:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b868:	624b      	str	r3, [r1, #36]	; 0x24
}
   1b86a:	e7ec      	b.n	1b846 <z_impl_k_yield+0x56>
   1b86c:	2000281c 	.word	0x2000281c

0001b870 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b870:	ea50 0301 	orrs.w	r3, r0, r1
{
   1b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b878:	4605      	mov	r5, r0
   1b87a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1b87c:	d103      	bne.n	1b886 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1b87e:	f7ff ffb7 	bl	1b7f0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1b882:	2000      	movs	r0, #0
   1b884:	e033      	b.n	1b8ee <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1b886:	f06f 0401 	mvn.w	r4, #1
   1b88a:	1a24      	subs	r4, r4, r0
   1b88c:	f04f 33ff 	mov.w	r3, #4294967295
   1b890:	eb63 0301 	sbc.w	r3, r3, r1
   1b894:	2c01      	cmp	r4, #1
   1b896:	f173 0300 	sbcs.w	r3, r3, #0
   1b89a:	da02      	bge.n	1b8a2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b89c:	f007 fdc3 	bl	23426 <sys_clock_tick_get_32>
   1b8a0:	1944      	adds	r4, r0, r5
   1b8a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b8a6:	f3ef 8811 	mrs	r8, BASEPRI
   1b8aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1b8ae:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1b8b2:	4f10      	ldr	r7, [pc, #64]	; (1b8f4 <z_tick_sleep+0x84>)
   1b8b4:	4b10      	ldr	r3, [pc, #64]	; (1b8f8 <z_tick_sleep+0x88>)
   1b8b6:	68b8      	ldr	r0, [r7, #8]
   1b8b8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b8ba:	f7ff fea5 	bl	1b608 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b8be:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b8c0:	490e      	ldr	r1, [pc, #56]	; (1b8fc <z_tick_sleep+0x8c>)
   1b8c2:	462a      	mov	r2, r5
   1b8c4:	4633      	mov	r3, r6
   1b8c6:	3018      	adds	r0, #24
   1b8c8:	f000 f902 	bl	1bad0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b8cc:	68ba      	ldr	r2, [r7, #8]
   1b8ce:	7b53      	ldrb	r3, [r2, #13]
   1b8d0:	f043 0310 	orr.w	r3, r3, #16
   1b8d4:	7353      	strb	r3, [r2, #13]
   1b8d6:	4640      	mov	r0, r8
   1b8d8:	f7f7 fec6 	bl	13668 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b8dc:	f007 fda3 	bl	23426 <sys_clock_tick_get_32>
   1b8e0:	1a20      	subs	r0, r4, r0
   1b8e2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1b8e6:	2801      	cmp	r0, #1
   1b8e8:	f173 0300 	sbcs.w	r3, r3, #0
   1b8ec:	dbc9      	blt.n	1b882 <z_tick_sleep+0x12>
}
   1b8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b8f2:	bf00      	nop
   1b8f4:	2000281c 	.word	0x2000281c
   1b8f8:	2000284c 	.word	0x2000284c
   1b8fc:	0002325b 	.word	0x0002325b

0001b900 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b900:	f1b1 3fff 	cmp.w	r1, #4294967295
   1b904:	bf08      	it	eq
   1b906:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1b90a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b90c:	d106      	bne.n	1b91c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b90e:	4b08      	ldr	r3, [pc, #32]	; (1b930 <z_impl_k_sleep+0x30>)
   1b910:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b912:	f7ff ff13 	bl	1b73c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b916:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b91a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1b91c:	f7ff ffa8 	bl	1b870 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1b920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b924:	fb80 0303 	smull	r0, r3, r0, r3
   1b928:	0bc0      	lsrs	r0, r0, #15
   1b92a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b92e:	e7f4      	b.n	1b91a <z_impl_k_sleep+0x1a>
   1b930:	2000281c 	.word	0x2000281c

0001b934 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b934:	4b01      	ldr	r3, [pc, #4]	; (1b93c <z_impl_z_current_get+0x8>)
   1b936:	6898      	ldr	r0, [r3, #8]
   1b938:	4770      	bx	lr
   1b93a:	bf00      	nop
   1b93c:	2000281c 	.word	0x2000281c

0001b940 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b944:	4604      	mov	r4, r0
   1b946:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b94a:	f3ef 8611 	mrs	r6, BASEPRI
   1b94e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b952:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b956:	7b43      	ldrb	r3, [r0, #13]
   1b958:	071a      	lsls	r2, r3, #28
   1b95a:	d505      	bpl.n	1b968 <z_thread_abort+0x28>
	__asm__ volatile(
   1b95c:	f386 8811 	msr	BASEPRI, r6
   1b960:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b968:	f023 0220 	bic.w	r2, r3, #32
   1b96c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b970:	09d2      	lsrs	r2, r2, #7
   1b972:	d120      	bne.n	1b9b6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b974:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1b976:	68a3      	ldr	r3, [r4, #8]
   1b978:	b113      	cbz	r3, 1b980 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1b97a:	4620      	mov	r0, r4
   1b97c:	f007 fc0a 	bl	23194 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b980:	f104 0018 	add.w	r0, r4, #24
   1b984:	f007 fd0f 	bl	233a6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b988:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1b98c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1b990:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b992:	42bd      	cmp	r5, r7
   1b994:	d000      	beq.n	1b998 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b996:	b9b5      	cbnz	r5, 1b9c6 <z_thread_abort+0x86>
		update_cache(1);
   1b998:	2001      	movs	r0, #1
   1b99a:	f7ff fd45 	bl	1b428 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b99e:	4b10      	ldr	r3, [pc, #64]	; (1b9e0 <z_thread_abort+0xa0>)
   1b9a0:	689b      	ldr	r3, [r3, #8]
   1b9a2:	42a3      	cmp	r3, r4
   1b9a4:	d1da      	bne.n	1b95c <z_thread_abort+0x1c>
   1b9a6:	f3ef 8305 	mrs	r3, IPSR
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	d1d6      	bne.n	1b95c <z_thread_abort+0x1c>
   1b9ae:	4630      	mov	r0, r6
   1b9b0:	f7f7 fe5a 	bl	13668 <arch_swap>
	return ret;
   1b9b4:	e7d2      	b.n	1b95c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b9b6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b9ba:	f043 0308 	orr.w	r3, r3, #8
   1b9be:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b9c0:	f007 fbe0 	bl	23184 <sys_dlist_remove>
}
   1b9c4:	e7d7      	b.n	1b976 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1b9c6:	4628      	mov	r0, r5
   1b9c8:	f007 fbe4 	bl	23194 <unpend_thread_no_timeout>
   1b9cc:	f105 0018 	add.w	r0, r5, #24
   1b9d0:	f007 fce9 	bl	233a6 <z_abort_timeout>
   1b9d4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1b9d8:	4628      	mov	r0, r5
   1b9da:	f7ff fdc1 	bl	1b560 <ready_thread>
   1b9de:	e7d7      	b.n	1b990 <z_thread_abort+0x50>
   1b9e0:	2000281c 	.word	0x2000281c

0001b9e4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b9e4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b9e6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b9ea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b9ec:	e9cd 6700 	strd	r6, r7, [sp]
   1b9f0:	f7ff fe48 	bl	1b684 <z_pend_curr>

	if (data != NULL) {
   1b9f4:	b11c      	cbz	r4, 1b9fe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b9f6:	4b03      	ldr	r3, [pc, #12]	; (1ba04 <z_sched_wait+0x20>)
   1b9f8:	689b      	ldr	r3, [r3, #8]
   1b9fa:	695b      	ldr	r3, [r3, #20]
   1b9fc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b9fe:	b002      	add	sp, #8
   1ba00:	bdd0      	pop	{r4, r6, r7, pc}
   1ba02:	bf00      	nop
   1ba04:	2000281c 	.word	0x2000281c

0001ba08 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1ba08:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1ba0a:	4806      	ldr	r0, [pc, #24]	; (1ba24 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1ba0c:	4a06      	ldr	r2, [pc, #24]	; (1ba28 <z_data_copy+0x20>)
   1ba0e:	4907      	ldr	r1, [pc, #28]	; (1ba2c <z_data_copy+0x24>)
   1ba10:	1a12      	subs	r2, r2, r0
   1ba12:	f007 f914 	bl	22c3e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ba16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1ba1a:	4a05      	ldr	r2, [pc, #20]	; (1ba30 <z_data_copy+0x28>)
   1ba1c:	4905      	ldr	r1, [pc, #20]	; (1ba34 <z_data_copy+0x2c>)
   1ba1e:	4806      	ldr	r0, [pc, #24]	; (1ba38 <z_data_copy+0x30>)
   1ba20:	f007 b90d 	b.w	22c3e <z_early_memcpy>
   1ba24:	20000000 	.word	0x20000000
   1ba28:	20000b8c 	.word	0x20000b8c
   1ba2c:	00025028 	.word	0x00025028
   1ba30:	00000000 	.word	0x00000000
   1ba34:	00025028 	.word	0x00025028
   1ba38:	20000000 	.word	0x20000000

0001ba3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1ba3c:	4b03      	ldr	r3, [pc, #12]	; (1ba4c <elapsed+0x10>)
   1ba3e:	681b      	ldr	r3, [r3, #0]
   1ba40:	b90b      	cbnz	r3, 1ba46 <elapsed+0xa>
   1ba42:	f7fd b8b7 	b.w	18bb4 <sys_clock_elapsed>
}
   1ba46:	2000      	movs	r0, #0
   1ba48:	4770      	bx	lr
   1ba4a:	bf00      	nop
   1ba4c:	20002858 	.word	0x20002858

0001ba50 <next_timeout>:
	return list->head == list;
   1ba50:	4b10      	ldr	r3, [pc, #64]	; (1ba94 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   1ba52:	b510      	push	{r4, lr}
   1ba54:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba56:	429c      	cmp	r4, r3
   1ba58:	bf08      	it	eq
   1ba5a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ba5c:	f7ff ffee 	bl	1ba3c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   1ba60:	b1a4      	cbz	r4, 1ba8c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1ba62:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1ba66:	1a1b      	subs	r3, r3, r0
   1ba68:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   1ba6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1ba70:	f170 0200 	sbcs.w	r2, r0, #0
   1ba74:	da0a      	bge.n	1ba8c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   1ba76:	2800      	cmp	r0, #0
   1ba78:	bfac      	ite	ge
   1ba7a:	4618      	movge	r0, r3
   1ba7c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ba7e:	4b06      	ldr	r3, [pc, #24]	; (1ba98 <next_timeout+0x48>)
   1ba80:	691b      	ldr	r3, [r3, #16]
   1ba82:	b113      	cbz	r3, 1ba8a <next_timeout+0x3a>
   1ba84:	4298      	cmp	r0, r3
   1ba86:	bfa8      	it	ge
   1ba88:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ba8a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   1ba8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ba90:	e7f5      	b.n	1ba7e <next_timeout+0x2e>
   1ba92:	bf00      	nop
   1ba94:	200007d4 	.word	0x200007d4
   1ba98:	2000281c 	.word	0x2000281c

0001ba9c <remove_timeout>:
{
   1ba9c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1ba9e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1baa0:	b168      	cbz	r0, 1babe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1baa2:	4a0a      	ldr	r2, [pc, #40]	; (1bacc <remove_timeout+0x30>)
   1baa4:	6852      	ldr	r2, [r2, #4]
   1baa6:	4290      	cmp	r0, r2
   1baa8:	d009      	beq.n	1babe <remove_timeout+0x22>
	if (next(t) != NULL) {
   1baaa:	b143      	cbz	r3, 1babe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1baac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1bab0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1bab4:	1912      	adds	r2, r2, r4
   1bab6:	eb41 0105 	adc.w	r1, r1, r5
   1baba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1babe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1bac0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bac2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bac4:	2300      	movs	r3, #0
	node->prev = NULL;
   1bac6:	e9c0 3300 	strd	r3, r3, [r0]
}
   1baca:	bd30      	pop	{r4, r5, pc}
   1bacc:	200007d4 	.word	0x200007d4

0001bad0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bad4:	bf08      	it	eq
   1bad6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1bada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1badc:	4604      	mov	r4, r0
   1bade:	461f      	mov	r7, r3
   1bae0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bae2:	d067      	beq.n	1bbb4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bae4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1bae6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1baea:	f3ef 8611 	mrs	r6, BASEPRI
   1baee:	f383 8812 	msr	BASEPRI_MAX, r3
   1baf2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1baf6:	f06f 0201 	mvn.w	r2, #1
   1bafa:	1b53      	subs	r3, r2, r5
   1bafc:	f04f 3cff 	mov.w	ip, #4294967295
   1bb00:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1bb04:	2b00      	cmp	r3, #0
   1bb06:	db1b      	blt.n	1bb40 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1bb08:	4b2b      	ldr	r3, [pc, #172]	; (1bbb8 <z_add_timeout+0xe8>)
   1bb0a:	e9d3 1300 	ldrd	r1, r3, [r3]
   1bb0e:	1a52      	subs	r2, r2, r1
   1bb10:	eb6c 0303 	sbc.w	r3, ip, r3
   1bb14:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1bb16:	eb63 0307 	sbc.w	r3, r3, r7
   1bb1a:	2d01      	cmp	r5, #1
   1bb1c:	f173 0200 	sbcs.w	r2, r3, #0
   1bb20:	bfbc      	itt	lt
   1bb22:	2501      	movlt	r5, #1
   1bb24:	2300      	movlt	r3, #0
   1bb26:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1bb2a:	4824      	ldr	r0, [pc, #144]	; (1bbbc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1bb2c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb30:	4283      	cmp	r3, r0
   1bb32:	d118      	bne.n	1bb66 <z_add_timeout+0x96>
	node->prev = tail;
   1bb34:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1bb38:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1bb3c:	6044      	str	r4, [r0, #4]
}
   1bb3e:	e026      	b.n	1bb8e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bb40:	f7ff ff7c 	bl	1ba3c <elapsed>
   1bb44:	3501      	adds	r5, #1
   1bb46:	f147 0700 	adc.w	r7, r7, #0
   1bb4a:	182d      	adds	r5, r5, r0
   1bb4c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1bb50:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1bb54:	e7e9      	b.n	1bb2a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1bb56:	1a52      	subs	r2, r2, r1
   1bb58:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1bb5c:	459c      	cmp	ip, r3
   1bb5e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1bb62:	d0e7      	beq.n	1bb34 <z_add_timeout+0x64>
   1bb64:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1bb66:	2b00      	cmp	r3, #0
   1bb68:	d0e4      	beq.n	1bb34 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1bb6a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1bb6e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1bb72:	428a      	cmp	r2, r1
   1bb74:	eb75 0e07 	sbcs.w	lr, r5, r7
   1bb78:	daed      	bge.n	1bb56 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1bb7a:	1a8a      	subs	r2, r1, r2
   1bb7c:	eb67 0505 	sbc.w	r5, r7, r5
   1bb80:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1bb84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1bb86:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1bb8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bb8c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1bb8e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bb90:	4283      	cmp	r3, r0
   1bb92:	d00b      	beq.n	1bbac <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bb94:	429c      	cmp	r4, r3
   1bb96:	d109      	bne.n	1bbac <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bb98:	f7ff ff5a 	bl	1ba50 <next_timeout>

			if (next_time == 0 ||
   1bb9c:	b118      	cbz	r0, 1bba6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1bb9e:	4b08      	ldr	r3, [pc, #32]	; (1bbc0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1bba0:	691b      	ldr	r3, [r3, #16]
   1bba2:	4283      	cmp	r3, r0
   1bba4:	d002      	beq.n	1bbac <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1bba6:	2100      	movs	r1, #0
   1bba8:	f7fc ffd2 	bl	18b50 <sys_clock_set_timeout>
	__asm__ volatile(
   1bbac:	f386 8811 	msr	BASEPRI, r6
   1bbb0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbb6:	bf00      	nop
   1bbb8:	20001e10 	.word	0x20001e10
   1bbbc:	200007d4 	.word	0x200007d4
   1bbc0:	2000281c 	.word	0x2000281c

0001bbc4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1bbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bbc8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bbca:	f7ff fc87 	bl	1b4dc <z_time_slice>
	__asm__ volatile(
   1bbce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bbd2:	f3ef 8411 	mrs	r4, BASEPRI
   1bbd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbda:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1bbde:	4e24      	ldr	r6, [pc, #144]	; (1bc70 <sys_clock_announce+0xac>)
	return list->head == list;
   1bbe0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1bc74 <sys_clock_announce+0xb0>
   1bbe4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1bbe6:	4d24      	ldr	r5, [pc, #144]	; (1bc78 <sys_clock_announce+0xb4>)
   1bbe8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bbec:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbee:	4540      	cmp	r0, r8
		curr_tick += dt;
   1bbf0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1bbf4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1bbf8:	d00b      	beq.n	1bc12 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1bbfa:	b150      	cbz	r0, 1bc12 <sys_clock_announce+0x4e>
   1bbfc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1bc00:	429a      	cmp	r2, r3
   1bc02:	eb77 090c 	sbcs.w	r9, r7, ip
   1bc06:	da16      	bge.n	1bc36 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1bc08:	1a9b      	subs	r3, r3, r2
   1bc0a:	eb6c 0c07 	sbc.w	ip, ip, r7
   1bc0e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1bc12:	1852      	adds	r2, r2, r1
   1bc14:	eb4e 0707 	adc.w	r7, lr, r7
   1bc18:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1bc1c:	2500      	movs	r5, #0
   1bc1e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bc20:	f7ff ff16 	bl	1ba50 <next_timeout>
   1bc24:	4629      	mov	r1, r5
   1bc26:	f7fc ff93 	bl	18b50 <sys_clock_set_timeout>
	__asm__ volatile(
   1bc2a:	f384 8811 	msr	BASEPRI, r4
   1bc2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1bc36:	1859      	adds	r1, r3, r1
   1bc38:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1bc3c:	1ad3      	subs	r3, r2, r3
   1bc3e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1bc40:	2200      	movs	r2, #0
   1bc42:	2300      	movs	r3, #0
   1bc44:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1bc48:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1bc4c:	f7ff ff26 	bl	1ba9c <remove_timeout>
   1bc50:	f384 8811 	msr	BASEPRI, r4
   1bc54:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1bc58:	6883      	ldr	r3, [r0, #8]
   1bc5a:	4798      	blx	r3
	__asm__ volatile(
   1bc5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc60:	f3ef 8411 	mrs	r4, BASEPRI
   1bc64:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc68:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bc6c:	e7bc      	b.n	1bbe8 <sys_clock_announce+0x24>
   1bc6e:	bf00      	nop
   1bc70:	20002858 	.word	0x20002858
   1bc74:	200007d4 	.word	0x200007d4
   1bc78:	20001e10 	.word	0x20001e10

0001bc7c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bc7c:	b510      	push	{r4, lr}
   1bc7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc82:	f3ef 8411 	mrs	r4, BASEPRI
   1bc86:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc8a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1bc8e:	f7fc ff91 	bl	18bb4 <sys_clock_elapsed>
   1bc92:	4a05      	ldr	r2, [pc, #20]	; (1bca8 <sys_clock_tick_get+0x2c>)
   1bc94:	e9d2 3100 	ldrd	r3, r1, [r2]
   1bc98:	18c0      	adds	r0, r0, r3
   1bc9a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1bc9e:	f384 8811 	msr	BASEPRI, r4
   1bca2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1bca6:	bd10      	pop	{r4, pc}
   1bca8:	20001e10 	.word	0x20001e10

0001bcac <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bcac:	b570      	push	{r4, r5, r6, lr}
   1bcae:	4604      	mov	r4, r0
	__asm__ volatile(
   1bcb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bcb4:	f3ef 8511 	mrs	r5, BASEPRI
   1bcb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bcbc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bcc0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1bcc4:	3301      	adds	r3, #1
   1bcc6:	f142 0200 	adc.w	r2, r2, #0
   1bcca:	2b02      	cmp	r3, #2
   1bccc:	f172 0300 	sbcs.w	r3, r2, #0
   1bcd0:	d304      	bcc.n	1bcdc <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bcd2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1bcd6:	4917      	ldr	r1, [pc, #92]	; (1bd34 <z_timer_expiration_handler+0x88>)
   1bcd8:	f7ff fefa 	bl	1bad0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bcdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bcde:	3301      	adds	r3, #1
   1bce0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1bce2:	6a23      	ldr	r3, [r4, #32]
   1bce4:	b173      	cbz	r3, 1bd04 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   1bce6:	f385 8811 	msr	BASEPRI, r5
   1bcea:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1bcee:	6a23      	ldr	r3, [r4, #32]
   1bcf0:	4620      	mov	r0, r4
   1bcf2:	4798      	blx	r3
	__asm__ volatile(
   1bcf4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bcf8:	f3ef 8511 	mrs	r5, BASEPRI
   1bcfc:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd00:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1bd04:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd08:	42a6      	cmp	r6, r4
   1bd0a:	d000      	beq.n	1bd0e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1bd0c:	b926      	cbnz	r6, 1bd18 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   1bd0e:	f385 8811 	msr	BASEPRI, r5
   1bd12:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1bd16:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   1bd18:	4630      	mov	r0, r6
   1bd1a:	f007 fa4e 	bl	231ba <z_unpend_thread_no_timeout>
   1bd1e:	2300      	movs	r3, #0
   1bd20:	67f3      	str	r3, [r6, #124]	; 0x7c
   1bd22:	f385 8811 	msr	BASEPRI, r5
   1bd26:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1bd2a:	4630      	mov	r0, r6
}
   1bd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1bd30:	f007 ba83 	b.w	2323a <z_ready_thread>
   1bd34:	0001bcad 	.word	0x0001bcad

0001bd38 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bd3c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bd42:	bf08      	it	eq
   1bd44:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   1bd48:	4606      	mov	r6, r0
   1bd4a:	461c      	mov	r4, r3
   1bd4c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   1bd50:	4689      	mov	r9, r1
   1bd52:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1bd54:	d03e      	beq.n	1bdd4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1bd56:	f1b0 3fff 	cmp.w	r0, #4294967295
   1bd5a:	bf08      	it	eq
   1bd5c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bd60:	4615      	mov	r5, r2
   1bd62:	4607      	mov	r7, r0
   1bd64:	d014      	beq.n	1bd90 <z_impl_k_timer_start+0x58>
   1bd66:	ea50 0302 	orrs.w	r3, r0, r2
   1bd6a:	d011      	beq.n	1bd90 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   1bd6c:	f06f 0301 	mvn.w	r3, #1
   1bd70:	1a9b      	subs	r3, r3, r2
   1bd72:	f04f 33ff 	mov.w	r3, #4294967295
   1bd76:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1bd7a:	2b00      	cmp	r3, #0
   1bd7c:	da08      	bge.n	1bd90 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   1bd7e:	2a02      	cmp	r2, #2
   1bd80:	f170 0300 	sbcs.w	r3, r0, #0
   1bd84:	bfbc      	itt	lt
   1bd86:	2502      	movlt	r5, #2
   1bd88:	2700      	movlt	r7, #0
   1bd8a:	3d01      	subs	r5, #1
   1bd8c:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1bd90:	f06f 0301 	mvn.w	r3, #1
   1bd94:	1a5b      	subs	r3, r3, r1
   1bd96:	f04f 33ff 	mov.w	r3, #4294967295
   1bd9a:	eb63 0304 	sbc.w	r3, r3, r4
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	da09      	bge.n	1bdb6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1bda2:	2901      	cmp	r1, #1
   1bda4:	f174 0300 	sbcs.w	r3, r4, #0
   1bda8:	bfbc      	itt	lt
   1bdaa:	2101      	movlt	r1, #1
   1bdac:	2400      	movlt	r4, #0
   1bdae:	f111 39ff 	adds.w	r9, r1, #4294967295
   1bdb2:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1bdb6:	4630      	mov	r0, r6
   1bdb8:	f007 faf5 	bl	233a6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1bdbc:	2300      	movs	r3, #0
   1bdbe:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   1bdc0:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdc4:	464a      	mov	r2, r9
   1bdc6:	4643      	mov	r3, r8
   1bdc8:	4630      	mov	r0, r6
   1bdca:	4903      	ldr	r1, [pc, #12]	; (1bdd8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   1bdcc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1bdd0:	f7ff be7e 	b.w	1bad0 <z_add_timeout>
}
   1bdd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bdd8:	0001bcad 	.word	0x0001bcad

0001bddc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1bddc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1bde0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1bde2:	4b29      	ldr	r3, [pc, #164]	; (1be88 <z_impl_k_poll+0xac>)
   1bde4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1bde6:	2301      	movs	r3, #1
   1bde8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1bdec:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1bdf0:	ea52 0305 	orrs.w	r3, r2, r5
{
   1bdf4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1bdf6:	bf0c      	ite	eq
   1bdf8:	2301      	moveq	r3, #1
   1bdfa:	2300      	movne	r3, #0
   1bdfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1be00:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1be02:	f007 fb91 	bl	23528 <register_events>
   1be06:	4681      	mov	r9, r0
	__asm__ volatile(
   1be08:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be0c:	f3ef 8a11 	mrs	sl, BASEPRI
   1be10:	f383 8812 	msr	BASEPRI_MAX, r3
   1be14:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1be18:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1be1c:	b964      	cbnz	r4, 1be38 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1be1e:	4601      	mov	r1, r0
   1be20:	4652      	mov	r2, sl
   1be22:	4640      	mov	r0, r8
   1be24:	f007 fc51 	bl	236ca <clear_event_registrations>
	__asm__ volatile(
   1be28:	f38a 8811 	msr	BASEPRI, sl
   1be2c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1be30:	4620      	mov	r0, r4
   1be32:	b002      	add	sp, #8
   1be34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1be38:	2300      	movs	r3, #0
   1be3a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1be3e:	ea56 0305 	orrs.w	r3, r6, r5
   1be42:	d106      	bne.n	1be52 <z_impl_k_poll+0x76>
   1be44:	f38a 8811 	msr	BASEPRI, sl
   1be48:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1be4c:	f06f 040a 	mvn.w	r4, #10
   1be50:	e7ee      	b.n	1be30 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1be52:	e9cd 6500 	strd	r6, r5, [sp]
   1be56:	4a0d      	ldr	r2, [pc, #52]	; (1be8c <z_impl_k_poll+0xb0>)
   1be58:	480d      	ldr	r0, [pc, #52]	; (1be90 <z_impl_k_poll+0xb4>)
   1be5a:	4651      	mov	r1, sl
   1be5c:	f7ff fc12 	bl	1b684 <z_pend_curr>
   1be60:	4604      	mov	r4, r0
	__asm__ volatile(
   1be62:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be66:	f3ef 8511 	mrs	r5, BASEPRI
   1be6a:	f383 8812 	msr	BASEPRI_MAX, r3
   1be6e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1be72:	462a      	mov	r2, r5
   1be74:	4649      	mov	r1, r9
   1be76:	4640      	mov	r0, r8
   1be78:	f007 fc27 	bl	236ca <clear_event_registrations>
	__asm__ volatile(
   1be7c:	f385 8811 	msr	BASEPRI, r5
   1be80:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1be84:	e7d4      	b.n	1be30 <z_impl_k_poll+0x54>
   1be86:	bf00      	nop
   1be88:	2000281c 	.word	0x2000281c
   1be8c:	200007dc 	.word	0x200007dc
   1be90:	20003dc9 	.word	0x20003dc9

0001be94 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1be94:	b538      	push	{r3, r4, r5, lr}
   1be96:	4603      	mov	r3, r0
	__asm__ volatile(
   1be98:	f04f 0240 	mov.w	r2, #64	; 0x40
   1be9c:	f3ef 8511 	mrs	r5, BASEPRI
   1bea0:	f382 8812 	msr	BASEPRI_MAX, r2
   1bea4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1bea8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1beaa:	2101      	movs	r1, #1
   1beac:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1beae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1beb0:	4283      	cmp	r3, r0
   1beb2:	d106      	bne.n	1bec2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1beb4:	f385 8811 	msr	BASEPRI, r5
   1beb8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1bebc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1bebe:	4620      	mov	r0, r4
   1bec0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1bec2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1bec6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1bec8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1beca:	2300      	movs	r3, #0
	node->prev = NULL;
   1becc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bed0:	f007 fba1 	bl	23616 <signal_poll_event>
	z_reschedule(&lock, key);
   1bed4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1bed6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1bed8:	4801      	ldr	r0, [pc, #4]	; (1bee0 <z_impl_k_poll_signal_raise+0x4c>)
   1beda:	f7ff fa7f 	bl	1b3dc <z_reschedule>
	return rc;
   1bede:	e7ee      	b.n	1bebe <z_impl_k_poll_signal_raise+0x2a>
   1bee0:	20003dc9 	.word	0x20003dc9

0001bee4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1bee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bee6:	4606      	mov	r6, r0
   1bee8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1beea:	f006 ff54 	bl	22d96 <k_is_in_isr>
   1beee:	b978      	cbnz	r0, 1bf10 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1bef0:	4b0b      	ldr	r3, [pc, #44]	; (1bf20 <z_thread_aligned_alloc+0x3c>)
   1bef2:	689b      	ldr	r3, [r3, #8]
   1bef4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1bef6:	b17c      	cbz	r4, 1bf18 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1bef8:	1d2a      	adds	r2, r5, #4
   1befa:	d209      	bcs.n	1bf10 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1befc:	2000      	movs	r0, #0
   1befe:	2100      	movs	r1, #0
   1bf00:	e9cd 0100 	strd	r0, r1, [sp]
   1bf04:	f046 0104 	orr.w	r1, r6, #4
   1bf08:	4620      	mov	r0, r4
   1bf0a:	f006 fea2 	bl	22c52 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1bf0e:	b908      	cbnz	r0, 1bf14 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1bf10:	2400      	movs	r4, #0
	}

	return ret;
   1bf12:	e001      	b.n	1bf18 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1bf14:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1bf16:	1d04      	adds	r4, r0, #4
}
   1bf18:	4620      	mov	r0, r4
   1bf1a:	b002      	add	sp, #8
   1bf1c:	bd70      	pop	{r4, r5, r6, pc}
   1bf1e:	bf00      	nop
   1bf20:	2000281c 	.word	0x2000281c

0001bf24 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1bf24:	4a02      	ldr	r2, [pc, #8]	; (1bf30 <boot_banner+0xc>)
   1bf26:	4903      	ldr	r1, [pc, #12]	; (1bf34 <boot_banner+0x10>)
   1bf28:	4803      	ldr	r0, [pc, #12]	; (1bf38 <boot_banner+0x14>)
   1bf2a:	f003 bd5a 	b.w	1f9e2 <printk>
   1bf2e:	bf00      	nop
   1bf30:	00024b4e 	.word	0x00024b4e
   1bf34:	00024ef3 	.word	0x00024ef3
   1bf38:	00024f00 	.word	0x00024f00

0001bf3c <ocrypto_ecdh_p256_public_key>:
   1bf3c:	b530      	push	{r4, r5, lr}
   1bf3e:	b099      	sub	sp, #100	; 0x64
   1bf40:	4605      	mov	r5, r0
   1bf42:	4668      	mov	r0, sp
   1bf44:	f000 f828 	bl	1bf98 <ocrypto_sc_p256_from32bytes>
   1bf48:	4669      	mov	r1, sp
   1bf4a:	4604      	mov	r4, r0
   1bf4c:	a808      	add	r0, sp, #32
   1bf4e:	f000 fa53 	bl	1c3f8 <ocrypto_curve_p256_scalarmult_base>
   1bf52:	a908      	add	r1, sp, #32
   1bf54:	4304      	orrs	r4, r0
   1bf56:	4628      	mov	r0, r5
   1bf58:	f000 f98a 	bl	1c270 <ocrypto_curve_p256_to64bytes>
   1bf5c:	4620      	mov	r0, r4
   1bf5e:	b019      	add	sp, #100	; 0x64
   1bf60:	bd30      	pop	{r4, r5, pc}
   1bf62:	bf00      	nop

0001bf64 <ocrypto_ecdh_p256_common_secret>:
   1bf64:	b570      	push	{r4, r5, r6, lr}
   1bf66:	b098      	sub	sp, #96	; 0x60
   1bf68:	4605      	mov	r5, r0
   1bf6a:	4668      	mov	r0, sp
   1bf6c:	4616      	mov	r6, r2
   1bf6e:	f000 f813 	bl	1bf98 <ocrypto_sc_p256_from32bytes>
   1bf72:	4631      	mov	r1, r6
   1bf74:	4604      	mov	r4, r0
   1bf76:	a808      	add	r0, sp, #32
   1bf78:	f000 f946 	bl	1c208 <ocrypto_curve_p256_from64bytes>
   1bf7c:	a908      	add	r1, sp, #32
   1bf7e:	466a      	mov	r2, sp
   1bf80:	4304      	orrs	r4, r0
   1bf82:	4608      	mov	r0, r1
   1bf84:	f000 f982 	bl	1c28c <ocrypto_curve_p256_scalarmult>
   1bf88:	a908      	add	r1, sp, #32
   1bf8a:	4304      	orrs	r4, r0
   1bf8c:	4628      	mov	r0, r5
   1bf8e:	f000 f96d 	bl	1c26c <ocrypto_curve_p256_to32bytes>
   1bf92:	4620      	mov	r0, r4
   1bf94:	b018      	add	sp, #96	; 0x60
   1bf96:	bd70      	pop	{r4, r5, r6, pc}

0001bf98 <ocrypto_sc_p256_from32bytes>:
   1bf98:	b570      	push	{r4, r5, r6, lr}
   1bf9a:	680b      	ldr	r3, [r1, #0]
   1bf9c:	4e12      	ldr	r6, [pc, #72]	; (1bfe8 <ocrypto_sc_p256_from32bytes+0x50>)
   1bf9e:	ba1b      	rev	r3, r3
   1bfa0:	61c3      	str	r3, [r0, #28]
   1bfa2:	684b      	ldr	r3, [r1, #4]
   1bfa4:	ba1b      	rev	r3, r3
   1bfa6:	6183      	str	r3, [r0, #24]
   1bfa8:	688b      	ldr	r3, [r1, #8]
   1bfaa:	ba1b      	rev	r3, r3
   1bfac:	6143      	str	r3, [r0, #20]
   1bfae:	68cb      	ldr	r3, [r1, #12]
   1bfb0:	ba1b      	rev	r3, r3
   1bfb2:	6103      	str	r3, [r0, #16]
   1bfb4:	690b      	ldr	r3, [r1, #16]
   1bfb6:	ba1b      	rev	r3, r3
   1bfb8:	60c3      	str	r3, [r0, #12]
   1bfba:	694b      	ldr	r3, [r1, #20]
   1bfbc:	ba1b      	rev	r3, r3
   1bfbe:	6083      	str	r3, [r0, #8]
   1bfc0:	698b      	ldr	r3, [r1, #24]
   1bfc2:	ba1b      	rev	r3, r3
   1bfc4:	6043      	str	r3, [r0, #4]
   1bfc6:	69cb      	ldr	r3, [r1, #28]
   1bfc8:	ba1b      	rev	r3, r3
   1bfca:	4632      	mov	r2, r6
   1bfcc:	6003      	str	r3, [r0, #0]
   1bfce:	4601      	mov	r1, r0
   1bfd0:	4604      	mov	r4, r0
   1bfd2:	f7e4 ff7d 	bl	ed0 <ocrypto_bigint_sub256>
   1bfd6:	4631      	mov	r1, r6
   1bfd8:	4605      	mov	r5, r0
   1bfda:	4602      	mov	r2, r0
   1bfdc:	4620      	mov	r0, r4
   1bfde:	f7e4 ff97 	bl	f10 <ocrypto_bigint_cadd256>
   1bfe2:	1e68      	subs	r0, r5, #1
   1bfe4:	bd70      	pop	{r4, r5, r6, pc}
   1bfe6:	bf00      	nop
   1bfe8:	0002453c 	.word	0x0002453c

0001bfec <p256_zdblu>:
   1bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bff0:	b088      	sub	sp, #32
   1bff2:	460c      	mov	r4, r1
   1bff4:	4606      	mov	r6, r0
   1bff6:	f102 0120 	add.w	r1, r2, #32
   1bffa:	4668      	mov	r0, sp
   1bffc:	f106 0720 	add.w	r7, r6, #32
   1c000:	4690      	mov	r8, r2
   1c002:	f7e5 fa6f 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c006:	466a      	mov	r2, sp
   1c008:	4669      	mov	r1, sp
   1c00a:	4668      	mov	r0, sp
   1c00c:	f7e5 f97c 	bl	1308 <ocrypto_mod_p256_add>
   1c010:	4669      	mov	r1, sp
   1c012:	4638      	mov	r0, r7
   1c014:	f7e5 fa66 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c018:	463a      	mov	r2, r7
   1c01a:	4639      	mov	r1, r7
   1c01c:	4638      	mov	r0, r7
   1c01e:	f104 0520 	add.w	r5, r4, #32
   1c022:	f7e5 f971 	bl	1308 <ocrypto_mod_p256_add>
   1c026:	466a      	mov	r2, sp
   1c028:	4669      	mov	r1, sp
   1c02a:	4668      	mov	r0, sp
   1c02c:	f7e5 f96c 	bl	1308 <ocrypto_mod_p256_add>
   1c030:	4641      	mov	r1, r8
   1c032:	4628      	mov	r0, r5
   1c034:	f7e5 fa56 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c038:	466a      	mov	r2, sp
   1c03a:	4641      	mov	r1, r8
   1c03c:	4630      	mov	r0, r6
   1c03e:	f7e5 fa39 	bl	14b4 <ocrypto_mod_p256_mul>
   1c042:	462a      	mov	r2, r5
   1c044:	4629      	mov	r1, r5
   1c046:	4668      	mov	r0, sp
   1c048:	f7e5 f95e 	bl	1308 <ocrypto_mod_p256_add>
   1c04c:	462a      	mov	r2, r5
   1c04e:	4669      	mov	r1, sp
   1c050:	4668      	mov	r0, sp
   1c052:	f7e5 f959 	bl	1308 <ocrypto_mod_p256_add>
   1c056:	4a12      	ldr	r2, [pc, #72]	; (1c0a0 <p256_zdblu+0xb4>)
   1c058:	4669      	mov	r1, sp
   1c05a:	4668      	mov	r0, sp
   1c05c:	f7e5 f954 	bl	1308 <ocrypto_mod_p256_add>
   1c060:	4669      	mov	r1, sp
   1c062:	4620      	mov	r0, r4
   1c064:	f7e5 fa3e 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c068:	4632      	mov	r2, r6
   1c06a:	4621      	mov	r1, r4
   1c06c:	4620      	mov	r0, r4
   1c06e:	f7e5 f989 	bl	1384 <ocrypto_mod_p256_sub>
   1c072:	4632      	mov	r2, r6
   1c074:	4621      	mov	r1, r4
   1c076:	4620      	mov	r0, r4
   1c078:	f7e5 f984 	bl	1384 <ocrypto_mod_p256_sub>
   1c07c:	4622      	mov	r2, r4
   1c07e:	4631      	mov	r1, r6
   1c080:	4628      	mov	r0, r5
   1c082:	f7e5 f97f 	bl	1384 <ocrypto_mod_p256_sub>
   1c086:	466a      	mov	r2, sp
   1c088:	4629      	mov	r1, r5
   1c08a:	4628      	mov	r0, r5
   1c08c:	f7e5 fa12 	bl	14b4 <ocrypto_mod_p256_mul>
   1c090:	463a      	mov	r2, r7
   1c092:	4629      	mov	r1, r5
   1c094:	4628      	mov	r0, r5
   1c096:	f7e5 f975 	bl	1384 <ocrypto_mod_p256_sub>
   1c09a:	b008      	add	sp, #32
   1c09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0a0:	000245dc 	.word	0x000245dc

0001c0a4 <p256_zaddc>:
   1c0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0a6:	b099      	sub	sp, #100	; 0x64
   1c0a8:	4604      	mov	r4, r0
   1c0aa:	460d      	mov	r5, r1
   1c0ac:	460a      	mov	r2, r1
   1c0ae:	4601      	mov	r1, r0
   1c0b0:	4668      	mov	r0, sp
   1c0b2:	f7e5 f967 	bl	1384 <ocrypto_mod_p256_sub>
   1c0b6:	4669      	mov	r1, sp
   1c0b8:	4668      	mov	r0, sp
   1c0ba:	f7e5 fa13 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c0be:	466a      	mov	r2, sp
   1c0c0:	4621      	mov	r1, r4
   1c0c2:	a808      	add	r0, sp, #32
   1c0c4:	f105 0620 	add.w	r6, r5, #32
   1c0c8:	f104 0720 	add.w	r7, r4, #32
   1c0cc:	f7e5 f9f2 	bl	14b4 <ocrypto_mod_p256_mul>
   1c0d0:	466a      	mov	r2, sp
   1c0d2:	4629      	mov	r1, r5
   1c0d4:	4668      	mov	r0, sp
   1c0d6:	f7e5 f9ed 	bl	14b4 <ocrypto_mod_p256_mul>
   1c0da:	4632      	mov	r2, r6
   1c0dc:	4639      	mov	r1, r7
   1c0de:	a810      	add	r0, sp, #64	; 0x40
   1c0e0:	f7e5 f912 	bl	1308 <ocrypto_mod_p256_add>
   1c0e4:	4632      	mov	r2, r6
   1c0e6:	4639      	mov	r1, r7
   1c0e8:	4630      	mov	r0, r6
   1c0ea:	f7e5 f94b 	bl	1384 <ocrypto_mod_p256_sub>
   1c0ee:	4631      	mov	r1, r6
   1c0f0:	4628      	mov	r0, r5
   1c0f2:	f7e5 f9f7 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c0f6:	466a      	mov	r2, sp
   1c0f8:	a908      	add	r1, sp, #32
   1c0fa:	4620      	mov	r0, r4
   1c0fc:	f7e5 f904 	bl	1308 <ocrypto_mod_p256_add>
   1c100:	4622      	mov	r2, r4
   1c102:	4629      	mov	r1, r5
   1c104:	4628      	mov	r0, r5
   1c106:	f7e5 f93d 	bl	1384 <ocrypto_mod_p256_sub>
   1c10a:	466a      	mov	r2, sp
   1c10c:	a908      	add	r1, sp, #32
   1c10e:	4668      	mov	r0, sp
   1c110:	f7e5 f938 	bl	1384 <ocrypto_mod_p256_sub>
   1c114:	466a      	mov	r2, sp
   1c116:	4639      	mov	r1, r7
   1c118:	4638      	mov	r0, r7
   1c11a:	f7e5 f9cb 	bl	14b4 <ocrypto_mod_p256_mul>
   1c11e:	462a      	mov	r2, r5
   1c120:	a908      	add	r1, sp, #32
   1c122:	4668      	mov	r0, sp
   1c124:	f7e5 f92e 	bl	1384 <ocrypto_mod_p256_sub>
   1c128:	466a      	mov	r2, sp
   1c12a:	4631      	mov	r1, r6
   1c12c:	4630      	mov	r0, r6
   1c12e:	f7e5 f9c1 	bl	14b4 <ocrypto_mod_p256_mul>
   1c132:	463a      	mov	r2, r7
   1c134:	4631      	mov	r1, r6
   1c136:	4630      	mov	r0, r6
   1c138:	f7e5 f924 	bl	1384 <ocrypto_mod_p256_sub>
   1c13c:	a910      	add	r1, sp, #64	; 0x40
   1c13e:	4668      	mov	r0, sp
   1c140:	f7e5 f9d0 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c144:	4622      	mov	r2, r4
   1c146:	4669      	mov	r1, sp
   1c148:	4620      	mov	r0, r4
   1c14a:	f7e5 f91b 	bl	1384 <ocrypto_mod_p256_sub>
   1c14e:	a908      	add	r1, sp, #32
   1c150:	4622      	mov	r2, r4
   1c152:	4608      	mov	r0, r1
   1c154:	f7e5 f916 	bl	1384 <ocrypto_mod_p256_sub>
   1c158:	a910      	add	r1, sp, #64	; 0x40
   1c15a:	aa08      	add	r2, sp, #32
   1c15c:	4608      	mov	r0, r1
   1c15e:	f7e5 f9a9 	bl	14b4 <ocrypto_mod_p256_mul>
   1c162:	463a      	mov	r2, r7
   1c164:	a910      	add	r1, sp, #64	; 0x40
   1c166:	4638      	mov	r0, r7
   1c168:	f7e5 f90c 	bl	1384 <ocrypto_mod_p256_sub>
   1c16c:	b019      	add	sp, #100	; 0x64
   1c16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c170 <p256_zaddu>:
   1c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c174:	b088      	sub	sp, #32
   1c176:	460c      	mov	r4, r1
   1c178:	4605      	mov	r5, r0
   1c17a:	4690      	mov	r8, r2
   1c17c:	460a      	mov	r2, r1
   1c17e:	4601      	mov	r1, r0
   1c180:	4668      	mov	r0, sp
   1c182:	f7e5 f8ff 	bl	1384 <ocrypto_mod_p256_sub>
   1c186:	4669      	mov	r1, sp
   1c188:	4668      	mov	r0, sp
   1c18a:	f7e5 f9ab 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c18e:	466a      	mov	r2, sp
   1c190:	4629      	mov	r1, r5
   1c192:	4628      	mov	r0, r5
   1c194:	f104 0620 	add.w	r6, r4, #32
   1c198:	f7e5 f98c 	bl	14b4 <ocrypto_mod_p256_mul>
   1c19c:	f105 0720 	add.w	r7, r5, #32
   1c1a0:	466a      	mov	r2, sp
   1c1a2:	4621      	mov	r1, r4
   1c1a4:	4668      	mov	r0, sp
   1c1a6:	f7e5 f985 	bl	14b4 <ocrypto_mod_p256_mul>
   1c1aa:	4632      	mov	r2, r6
   1c1ac:	4639      	mov	r1, r7
   1c1ae:	4630      	mov	r0, r6
   1c1b0:	f7e5 f8e8 	bl	1384 <ocrypto_mod_p256_sub>
   1c1b4:	4631      	mov	r1, r6
   1c1b6:	4620      	mov	r0, r4
   1c1b8:	f7e5 f994 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c1bc:	462a      	mov	r2, r5
   1c1be:	4621      	mov	r1, r4
   1c1c0:	4620      	mov	r0, r4
   1c1c2:	f7e5 f8df 	bl	1384 <ocrypto_mod_p256_sub>
   1c1c6:	466a      	mov	r2, sp
   1c1c8:	4621      	mov	r1, r4
   1c1ca:	4620      	mov	r0, r4
   1c1cc:	f7e5 f8da 	bl	1384 <ocrypto_mod_p256_sub>
   1c1d0:	466a      	mov	r2, sp
   1c1d2:	4629      	mov	r1, r5
   1c1d4:	4640      	mov	r0, r8
   1c1d6:	f7e5 f8d5 	bl	1384 <ocrypto_mod_p256_sub>
   1c1da:	4642      	mov	r2, r8
   1c1dc:	4639      	mov	r1, r7
   1c1de:	4638      	mov	r0, r7
   1c1e0:	f7e5 f968 	bl	14b4 <ocrypto_mod_p256_mul>
   1c1e4:	4622      	mov	r2, r4
   1c1e6:	4629      	mov	r1, r5
   1c1e8:	4668      	mov	r0, sp
   1c1ea:	f7e5 f8cb 	bl	1384 <ocrypto_mod_p256_sub>
   1c1ee:	466a      	mov	r2, sp
   1c1f0:	4631      	mov	r1, r6
   1c1f2:	4630      	mov	r0, r6
   1c1f4:	f7e5 f95e 	bl	14b4 <ocrypto_mod_p256_mul>
   1c1f8:	463a      	mov	r2, r7
   1c1fa:	4631      	mov	r1, r6
   1c1fc:	4630      	mov	r0, r6
   1c1fe:	f7e5 f8c1 	bl	1384 <ocrypto_mod_p256_sub>
   1c202:	b008      	add	sp, #32
   1c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c208 <ocrypto_curve_p256_from64bytes>:
   1c208:	b570      	push	{r4, r5, r6, lr}
   1c20a:	f100 0620 	add.w	r6, r0, #32
   1c20e:	b090      	sub	sp, #64	; 0x40
   1c210:	460d      	mov	r5, r1
   1c212:	4604      	mov	r4, r0
   1c214:	f000 f914 	bl	1c440 <ocrypto_mod_p256_from_bytes>
   1c218:	f105 0120 	add.w	r1, r5, #32
   1c21c:	4630      	mov	r0, r6
   1c21e:	f000 f90f 	bl	1c440 <ocrypto_mod_p256_from_bytes>
   1c222:	4621      	mov	r1, r4
   1c224:	a808      	add	r0, sp, #32
   1c226:	f7e5 f95d 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c22a:	a908      	add	r1, sp, #32
   1c22c:	4608      	mov	r0, r1
   1c22e:	4a0d      	ldr	r2, [pc, #52]	; (1c264 <ocrypto_curve_p256_from64bytes+0x5c>)
   1c230:	f7e5 f86a 	bl	1308 <ocrypto_mod_p256_add>
   1c234:	a908      	add	r1, sp, #32
   1c236:	4622      	mov	r2, r4
   1c238:	4608      	mov	r0, r1
   1c23a:	f7e5 f93b 	bl	14b4 <ocrypto_mod_p256_mul>
   1c23e:	a908      	add	r1, sp, #32
   1c240:	4a09      	ldr	r2, [pc, #36]	; (1c268 <ocrypto_curve_p256_from64bytes+0x60>)
   1c242:	4608      	mov	r0, r1
   1c244:	f7e5 f860 	bl	1308 <ocrypto_mod_p256_add>
   1c248:	4631      	mov	r1, r6
   1c24a:	4668      	mov	r0, sp
   1c24c:	f7e5 f94a 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c250:	2220      	movs	r2, #32
   1c252:	4669      	mov	r1, sp
   1c254:	eb0d 0002 	add.w	r0, sp, r2
   1c258:	f7e5 f828 	bl	12ac <ocrypto_constant_time_equal>
   1c25c:	3801      	subs	r0, #1
   1c25e:	b010      	add	sp, #64	; 0x40
   1c260:	bd70      	pop	{r4, r5, r6, pc}
   1c262:	bf00      	nop
   1c264:	000245dc 	.word	0x000245dc
   1c268:	000245fc 	.word	0x000245fc

0001c26c <ocrypto_curve_p256_to32bytes>:
   1c26c:	f000 b902 	b.w	1c474 <ocrypto_mod_p256_to_bytes>

0001c270 <ocrypto_curve_p256_to64bytes>:
   1c270:	b538      	push	{r3, r4, r5, lr}
   1c272:	4604      	mov	r4, r0
   1c274:	460d      	mov	r5, r1
   1c276:	f000 f8fd 	bl	1c474 <ocrypto_mod_p256_to_bytes>
   1c27a:	f105 0120 	add.w	r1, r5, #32
   1c27e:	f104 0020 	add.w	r0, r4, #32
   1c282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c286:	f000 b8f5 	b.w	1c474 <ocrypto_mod_p256_to_bytes>
   1c28a:	bf00      	nop

0001c28c <ocrypto_curve_p256_scalarmult>:
   1c28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c290:	4613      	mov	r3, r2
   1c292:	b0b8      	sub	sp, #224	; 0xe0
   1c294:	4a54      	ldr	r2, [pc, #336]	; (1c3e8 <ocrypto_curve_p256_scalarmult+0x15c>)
   1c296:	4689      	mov	r9, r1
   1c298:	4680      	mov	r8, r0
   1c29a:	4619      	mov	r1, r3
   1c29c:	a810      	add	r0, sp, #64	; 0x40
   1c29e:	f7e4 fe17 	bl	ed0 <ocrypto_bigint_sub256>
   1c2a2:	4952      	ldr	r1, [pc, #328]	; (1c3ec <ocrypto_curve_p256_scalarmult+0x160>)
   1c2a4:	4602      	mov	r2, r0
   1c2a6:	a810      	add	r0, sp, #64	; 0x40
   1c2a8:	f7e4 fe32 	bl	f10 <ocrypto_bigint_cadd256>
   1c2ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1c2ae:	494e      	ldr	r1, [pc, #312]	; (1c3e8 <ocrypto_curve_p256_scalarmult+0x15c>)
   1c2b0:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1c2b4:	4607      	mov	r7, r0
   1c2b6:	f1c6 0201 	rsb	r2, r6, #1
   1c2ba:	a810      	add	r0, sp, #64	; 0x40
   1c2bc:	f7e4 fe28 	bl	f10 <ocrypto_bigint_cadd256>
   1c2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c2c2:	464a      	mov	r2, r9
   1c2c4:	ea6f 0a03 	mvn.w	sl, r3
   1c2c8:	a928      	add	r1, sp, #160	; 0xa0
   1c2ca:	a818      	add	r0, sp, #96	; 0x60
   1c2cc:	f7ff fe8e 	bl	1bfec <p256_zdblu>
   1c2d0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1c2d4:	a920      	add	r1, sp, #128	; 0x80
   1c2d6:	f1ca 0201 	rsb	r2, sl, #1
   1c2da:	4608      	mov	r0, r1
   1c2dc:	f000 f892 	bl	1c404 <ocrypto_mod_p256_cneg>
   1c2e0:	f1c7 0701 	rsb	r7, r7, #1
   1c2e4:	24fe      	movs	r4, #254	; 0xfe
   1c2e6:	466a      	mov	r2, sp
   1c2e8:	a918      	add	r1, sp, #96	; 0x60
   1c2ea:	a828      	add	r0, sp, #160	; 0xa0
   1c2ec:	f7ff ff40 	bl	1c170 <p256_zaddu>
   1c2f0:	1162      	asrs	r2, r4, #5
   1c2f2:	ab38      	add	r3, sp, #224	; 0xe0
   1c2f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c2f8:	f004 011f 	and.w	r1, r4, #31
   1c2fc:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1c300:	40cb      	lsrs	r3, r1
   1c302:	4655      	mov	r5, sl
   1c304:	f003 0a01 	and.w	sl, r3, #1
   1c308:	ea8a 0505 	eor.w	r5, sl, r5
   1c30c:	462a      	mov	r2, r5
   1c30e:	a928      	add	r1, sp, #160	; 0xa0
   1c310:	a818      	add	r0, sp, #96	; 0x60
   1c312:	f7e4 fe59 	bl	fc8 <ocrypto_bigint_cswap256>
   1c316:	462a      	mov	r2, r5
   1c318:	a930      	add	r1, sp, #192	; 0xc0
   1c31a:	a820      	add	r0, sp, #128	; 0x80
   1c31c:	f7e4 fe54 	bl	fc8 <ocrypto_bigint_cswap256>
   1c320:	3c01      	subs	r4, #1
   1c322:	a928      	add	r1, sp, #160	; 0xa0
   1c324:	a818      	add	r0, sp, #96	; 0x60
   1c326:	f7ff febd 	bl	1c0a4 <p256_zaddc>
   1c32a:	1c63      	adds	r3, r4, #1
   1c32c:	d1db      	bne.n	1c2e6 <ocrypto_curve_p256_scalarmult+0x5a>
   1c32e:	f1ca 0201 	rsb	r2, sl, #1
   1c332:	a920      	add	r1, sp, #128	; 0x80
   1c334:	a808      	add	r0, sp, #32
   1c336:	f000 f865 	bl	1c404 <ocrypto_mod_p256_cneg>
   1c33a:	ea86 060a 	eor.w	r6, r6, sl
   1c33e:	466a      	mov	r2, sp
   1c340:	a918      	add	r1, sp, #96	; 0x60
   1c342:	a828      	add	r0, sp, #160	; 0xa0
   1c344:	f7ff ff14 	bl	1c170 <p256_zaddu>
   1c348:	a928      	add	r1, sp, #160	; 0xa0
   1c34a:	4632      	mov	r2, r6
   1c34c:	a818      	add	r0, sp, #96	; 0x60
   1c34e:	f7e4 fe3b 	bl	fc8 <ocrypto_bigint_cswap256>
   1c352:	4632      	mov	r2, r6
   1c354:	a930      	add	r1, sp, #192	; 0xc0
   1c356:	a820      	add	r0, sp, #128	; 0x80
   1c358:	f7e4 fe36 	bl	fc8 <ocrypto_bigint_cswap256>
   1c35c:	a908      	add	r1, sp, #32
   1c35e:	466a      	mov	r2, sp
   1c360:	4608      	mov	r0, r1
   1c362:	f7e5 f8a7 	bl	14b4 <ocrypto_mod_p256_mul>
   1c366:	a908      	add	r1, sp, #32
   1c368:	4608      	mov	r0, r1
   1c36a:	f000 f89d 	bl	1c4a8 <ocrypto_mod_p256_inv>
   1c36e:	a908      	add	r1, sp, #32
   1c370:	f108 0420 	add.w	r4, r8, #32
   1c374:	f109 0220 	add.w	r2, r9, #32
   1c378:	4608      	mov	r0, r1
   1c37a:	f7e5 f89b 	bl	14b4 <ocrypto_mod_p256_mul>
   1c37e:	a920      	add	r1, sp, #128	; 0x80
   1c380:	aa08      	add	r2, sp, #32
   1c382:	4620      	mov	r0, r4
   1c384:	f7e5 f896 	bl	14b4 <ocrypto_mod_p256_mul>
   1c388:	aa08      	add	r2, sp, #32
   1c38a:	a918      	add	r1, sp, #96	; 0x60
   1c38c:	4668      	mov	r0, sp
   1c38e:	f7e5 f891 	bl	14b4 <ocrypto_mod_p256_mul>
   1c392:	4669      	mov	r1, sp
   1c394:	4668      	mov	r0, sp
   1c396:	f7e5 f8a5 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c39a:	aa18      	add	r2, sp, #96	; 0x60
   1c39c:	4669      	mov	r1, sp
   1c39e:	a808      	add	r0, sp, #32
   1c3a0:	f7e5 f888 	bl	14b4 <ocrypto_mod_p256_mul>
   1c3a4:	4621      	mov	r1, r4
   1c3a6:	4668      	mov	r0, sp
   1c3a8:	f7e5 f89c 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c3ac:	aa08      	add	r2, sp, #32
   1c3ae:	4669      	mov	r1, sp
   1c3b0:	4610      	mov	r0, r2
   1c3b2:	f7e4 ffe7 	bl	1384 <ocrypto_mod_p256_sub>
   1c3b6:	4a0e      	ldr	r2, [pc, #56]	; (1c3f0 <ocrypto_curve_p256_scalarmult+0x164>)
   1c3b8:	a908      	add	r1, sp, #32
   1c3ba:	4668      	mov	r0, sp
   1c3bc:	f7e4 ffe2 	bl	1384 <ocrypto_mod_p256_sub>
   1c3c0:	4620      	mov	r0, r4
   1c3c2:	2120      	movs	r1, #32
   1c3c4:	f7e4 ff86 	bl	12d4 <ocrypto_constant_time_is_zero>
   1c3c8:	a908      	add	r1, sp, #32
   1c3ca:	4243      	negs	r3, r0
   1c3cc:	4602      	mov	r2, r0
   1c3ce:	4668      	mov	r0, sp
   1c3d0:	431f      	orrs	r7, r3
   1c3d2:	f7e4 fdf9 	bl	fc8 <ocrypto_bigint_cswap256>
   1c3d6:	4640      	mov	r0, r8
   1c3d8:	4a06      	ldr	r2, [pc, #24]	; (1c3f4 <ocrypto_curve_p256_scalarmult+0x168>)
   1c3da:	4669      	mov	r1, sp
   1c3dc:	f7e5 f86a 	bl	14b4 <ocrypto_mod_p256_mul>
   1c3e0:	4638      	mov	r0, r7
   1c3e2:	b038      	add	sp, #224	; 0xe0
   1c3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c3e8:	0002461c 	.word	0x0002461c
   1c3ec:	0002459c 	.word	0x0002459c
   1c3f0:	000245fc 	.word	0x000245fc
   1c3f4:	000245bc 	.word	0x000245bc

0001c3f8 <ocrypto_curve_p256_scalarmult_base>:
   1c3f8:	460a      	mov	r2, r1
   1c3fa:	4901      	ldr	r1, [pc, #4]	; (1c400 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1c3fc:	f7ff bf46 	b.w	1c28c <ocrypto_curve_p256_scalarmult>
   1c400:	0002455c 	.word	0x0002455c

0001c404 <ocrypto_mod_p256_cneg>:
   1c404:	b570      	push	{r4, r5, r6, lr}
   1c406:	b088      	sub	sp, #32
   1c408:	4604      	mov	r4, r0
   1c40a:	460d      	mov	r5, r1
   1c40c:	4616      	mov	r6, r2
   1c40e:	2100      	movs	r1, #0
   1c410:	2220      	movs	r2, #32
   1c412:	4668      	mov	r0, sp
   1c414:	f007 f9e6 	bl	237e4 <memset>
   1c418:	2300      	movs	r3, #0
   1c41a:	4629      	mov	r1, r5
   1c41c:	2220      	movs	r2, #32
   1c41e:	4620      	mov	r0, r4
   1c420:	9300      	str	r3, [sp, #0]
   1c422:	f007 f9be 	bl	237a2 <memcpy>
   1c426:	462a      	mov	r2, r5
   1c428:	4669      	mov	r1, sp
   1c42a:	4668      	mov	r0, sp
   1c42c:	f7e4 ffaa 	bl	1384 <ocrypto_mod_p256_sub>
   1c430:	4632      	mov	r2, r6
   1c432:	4669      	mov	r1, sp
   1c434:	4620      	mov	r0, r4
   1c436:	f7e4 fdc7 	bl	fc8 <ocrypto_bigint_cswap256>
   1c43a:	b008      	add	sp, #32
   1c43c:	bd70      	pop	{r4, r5, r6, pc}
   1c43e:	bf00      	nop

0001c440 <ocrypto_mod_p256_from_bytes>:
   1c440:	680b      	ldr	r3, [r1, #0]
   1c442:	ba1b      	rev	r3, r3
   1c444:	61c3      	str	r3, [r0, #28]
   1c446:	684b      	ldr	r3, [r1, #4]
   1c448:	ba1b      	rev	r3, r3
   1c44a:	6183      	str	r3, [r0, #24]
   1c44c:	688b      	ldr	r3, [r1, #8]
   1c44e:	ba1b      	rev	r3, r3
   1c450:	6143      	str	r3, [r0, #20]
   1c452:	68cb      	ldr	r3, [r1, #12]
   1c454:	ba1b      	rev	r3, r3
   1c456:	6103      	str	r3, [r0, #16]
   1c458:	690b      	ldr	r3, [r1, #16]
   1c45a:	ba1b      	rev	r3, r3
   1c45c:	60c3      	str	r3, [r0, #12]
   1c45e:	694b      	ldr	r3, [r1, #20]
   1c460:	ba1b      	rev	r3, r3
   1c462:	6083      	str	r3, [r0, #8]
   1c464:	698b      	ldr	r3, [r1, #24]
   1c466:	ba1b      	rev	r3, r3
   1c468:	6043      	str	r3, [r0, #4]
   1c46a:	69cb      	ldr	r3, [r1, #28]
   1c46c:	ba1b      	rev	r3, r3
   1c46e:	6003      	str	r3, [r0, #0]
   1c470:	4770      	bx	lr
   1c472:	bf00      	nop

0001c474 <ocrypto_mod_p256_to_bytes>:
   1c474:	69cb      	ldr	r3, [r1, #28]
   1c476:	ba1b      	rev	r3, r3
   1c478:	6003      	str	r3, [r0, #0]
   1c47a:	698b      	ldr	r3, [r1, #24]
   1c47c:	ba1b      	rev	r3, r3
   1c47e:	6043      	str	r3, [r0, #4]
   1c480:	694b      	ldr	r3, [r1, #20]
   1c482:	ba1b      	rev	r3, r3
   1c484:	6083      	str	r3, [r0, #8]
   1c486:	690b      	ldr	r3, [r1, #16]
   1c488:	ba1b      	rev	r3, r3
   1c48a:	60c3      	str	r3, [r0, #12]
   1c48c:	68cb      	ldr	r3, [r1, #12]
   1c48e:	ba1b      	rev	r3, r3
   1c490:	6103      	str	r3, [r0, #16]
   1c492:	688b      	ldr	r3, [r1, #8]
   1c494:	ba1b      	rev	r3, r3
   1c496:	6143      	str	r3, [r0, #20]
   1c498:	684b      	ldr	r3, [r1, #4]
   1c49a:	ba1b      	rev	r3, r3
   1c49c:	6183      	str	r3, [r0, #24]
   1c49e:	680b      	ldr	r3, [r1, #0]
   1c4a0:	ba1b      	rev	r3, r3
   1c4a2:	61c3      	str	r3, [r0, #28]
   1c4a4:	4770      	bx	lr
   1c4a6:	bf00      	nop

0001c4a8 <ocrypto_mod_p256_inv>:
   1c4a8:	b570      	push	{r4, r5, r6, lr}
   1c4aa:	b098      	sub	sp, #96	; 0x60
   1c4ac:	460d      	mov	r5, r1
   1c4ae:	4606      	mov	r6, r0
   1c4b0:	a810      	add	r0, sp, #64	; 0x40
   1c4b2:	f7e5 f817 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4b6:	462a      	mov	r2, r5
   1c4b8:	a910      	add	r1, sp, #64	; 0x40
   1c4ba:	4668      	mov	r0, sp
   1c4bc:	f7e4 fffa 	bl	14b4 <ocrypto_mod_p256_mul>
   1c4c0:	4669      	mov	r1, sp
   1c4c2:	a810      	add	r0, sp, #64	; 0x40
   1c4c4:	f7e5 f80e 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4c8:	a910      	add	r1, sp, #64	; 0x40
   1c4ca:	4608      	mov	r0, r1
   1c4cc:	f7e5 f80a 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4d0:	466a      	mov	r2, sp
   1c4d2:	a910      	add	r1, sp, #64	; 0x40
   1c4d4:	a808      	add	r0, sp, #32
   1c4d6:	f7e4 ffed 	bl	14b4 <ocrypto_mod_p256_mul>
   1c4da:	a908      	add	r1, sp, #32
   1c4dc:	a810      	add	r0, sp, #64	; 0x40
   1c4de:	f7e5 f801 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4e2:	a910      	add	r1, sp, #64	; 0x40
   1c4e4:	4608      	mov	r0, r1
   1c4e6:	f7e4 fffd 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4ea:	a910      	add	r1, sp, #64	; 0x40
   1c4ec:	4608      	mov	r0, r1
   1c4ee:	f7e4 fff9 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4f2:	a910      	add	r1, sp, #64	; 0x40
   1c4f4:	4608      	mov	r0, r1
   1c4f6:	f7e4 fff5 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c4fa:	a910      	add	r1, sp, #64	; 0x40
   1c4fc:	aa08      	add	r2, sp, #32
   1c4fe:	4608      	mov	r0, r1
   1c500:	f7e4 ffd8 	bl	14b4 <ocrypto_mod_p256_mul>
   1c504:	a910      	add	r1, sp, #64	; 0x40
   1c506:	4608      	mov	r0, r1
   1c508:	f7e4 ffec 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c50c:	a910      	add	r1, sp, #64	; 0x40
   1c50e:	4608      	mov	r0, r1
   1c510:	f7e4 ffe8 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c514:	a910      	add	r1, sp, #64	; 0x40
   1c516:	466a      	mov	r2, sp
   1c518:	a808      	add	r0, sp, #32
   1c51a:	f7e4 ffcb 	bl	14b4 <ocrypto_mod_p256_mul>
   1c51e:	2405      	movs	r4, #5
   1c520:	a908      	add	r1, sp, #32
   1c522:	a810      	add	r0, sp, #64	; 0x40
   1c524:	f7e4 ffde 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c528:	a910      	add	r1, sp, #64	; 0x40
   1c52a:	4608      	mov	r0, r1
   1c52c:	f7e4 ffda 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c530:	3c01      	subs	r4, #1
   1c532:	a910      	add	r1, sp, #64	; 0x40
   1c534:	d1f5      	bne.n	1c522 <ocrypto_mod_p256_inv+0x7a>
   1c536:	aa08      	add	r2, sp, #32
   1c538:	4608      	mov	r0, r1
   1c53a:	f7e4 ffbb 	bl	14b4 <ocrypto_mod_p256_mul>
   1c53e:	2405      	movs	r4, #5
   1c540:	a910      	add	r1, sp, #64	; 0x40
   1c542:	4608      	mov	r0, r1
   1c544:	f7e4 ffce 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c548:	a910      	add	r1, sp, #64	; 0x40
   1c54a:	4608      	mov	r0, r1
   1c54c:	f7e4 ffca 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c550:	3c01      	subs	r4, #1
   1c552:	d1f5      	bne.n	1c540 <ocrypto_mod_p256_inv+0x98>
   1c554:	a910      	add	r1, sp, #64	; 0x40
   1c556:	aa08      	add	r2, sp, #32
   1c558:	4608      	mov	r0, r1
   1c55a:	f7e4 ffab 	bl	14b4 <ocrypto_mod_p256_mul>
   1c55e:	a910      	add	r1, sp, #64	; 0x40
   1c560:	a808      	add	r0, sp, #32
   1c562:	f7e4 ffbf 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c566:	a908      	add	r1, sp, #32
   1c568:	4608      	mov	r0, r1
   1c56a:	f7e4 ffbb 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c56e:	a908      	add	r1, sp, #32
   1c570:	466a      	mov	r2, sp
   1c572:	4668      	mov	r0, sp
   1c574:	f7e4 ff9e 	bl	14b4 <ocrypto_mod_p256_mul>
   1c578:	2410      	movs	r4, #16
   1c57a:	4669      	mov	r1, sp
   1c57c:	a810      	add	r0, sp, #64	; 0x40
   1c57e:	f7e4 ffb1 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c582:	a910      	add	r1, sp, #64	; 0x40
   1c584:	4608      	mov	r0, r1
   1c586:	f7e4 ffad 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c58a:	3c01      	subs	r4, #1
   1c58c:	a910      	add	r1, sp, #64	; 0x40
   1c58e:	d1f5      	bne.n	1c57c <ocrypto_mod_p256_inv+0xd4>
   1c590:	462a      	mov	r2, r5
   1c592:	4608      	mov	r0, r1
   1c594:	f7e4 ff8e 	bl	14b4 <ocrypto_mod_p256_mul>
   1c598:	2440      	movs	r4, #64	; 0x40
   1c59a:	a910      	add	r1, sp, #64	; 0x40
   1c59c:	4608      	mov	r0, r1
   1c59e:	f7e4 ffa1 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c5a2:	a910      	add	r1, sp, #64	; 0x40
   1c5a4:	4608      	mov	r0, r1
   1c5a6:	f7e4 ff9d 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c5aa:	3c01      	subs	r4, #1
   1c5ac:	d1f5      	bne.n	1c59a <ocrypto_mod_p256_inv+0xf2>
   1c5ae:	a910      	add	r1, sp, #64	; 0x40
   1c5b0:	466a      	mov	r2, sp
   1c5b2:	4608      	mov	r0, r1
   1c5b4:	f7e4 ff7e 	bl	14b4 <ocrypto_mod_p256_mul>
   1c5b8:	2410      	movs	r4, #16
   1c5ba:	a910      	add	r1, sp, #64	; 0x40
   1c5bc:	4608      	mov	r0, r1
   1c5be:	f7e4 ff91 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c5c2:	a910      	add	r1, sp, #64	; 0x40
   1c5c4:	4608      	mov	r0, r1
   1c5c6:	f7e4 ff8d 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c5ca:	3c01      	subs	r4, #1
   1c5cc:	d1f5      	bne.n	1c5ba <ocrypto_mod_p256_inv+0x112>
   1c5ce:	a910      	add	r1, sp, #64	; 0x40
   1c5d0:	466a      	mov	r2, sp
   1c5d2:	4608      	mov	r0, r1
   1c5d4:	f7e4 ff6e 	bl	14b4 <ocrypto_mod_p256_mul>
   1c5d8:	2410      	movs	r4, #16
   1c5da:	a910      	add	r1, sp, #64	; 0x40
   1c5dc:	4608      	mov	r0, r1
   1c5de:	f7e4 ff81 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c5e2:	a910      	add	r1, sp, #64	; 0x40
   1c5e4:	4608      	mov	r0, r1
   1c5e6:	f7e4 ff7d 	bl	14e4 <ocrypto_mod_p256_sqr>
   1c5ea:	3c01      	subs	r4, #1
   1c5ec:	d1f5      	bne.n	1c5da <ocrypto_mod_p256_inv+0x132>
   1c5ee:	a910      	add	r1, sp, #64	; 0x40
   1c5f0:	aa08      	add	r2, sp, #32
   1c5f2:	4608      	mov	r0, r1
   1c5f4:	f7e4 ff5e 	bl	14b4 <ocrypto_mod_p256_mul>
   1c5f8:	462a      	mov	r2, r5
   1c5fa:	a910      	add	r1, sp, #64	; 0x40
   1c5fc:	4630      	mov	r0, r6
   1c5fe:	f7e4 ff59 	bl	14b4 <ocrypto_mod_p256_mul>
   1c602:	b018      	add	sp, #96	; 0x60
   1c604:	bd70      	pop	{r4, r5, r6, pc}
   1c606:	bf00      	nop

0001c608 <nrf_cc3xx_platform_init>:
   1c608:	b510      	push	{r4, lr}
   1c60a:	4c0c      	ldr	r4, [pc, #48]	; (1c63c <nrf_cc3xx_platform_init+0x34>)
   1c60c:	6823      	ldr	r3, [r4, #0]
   1c60e:	b113      	cbz	r3, 1c616 <nrf_cc3xx_platform_init+0xe>
   1c610:	4b0b      	ldr	r3, [pc, #44]	; (1c640 <nrf_cc3xx_platform_init+0x38>)
   1c612:	681b      	ldr	r3, [r3, #0]
   1c614:	b92b      	cbnz	r3, 1c622 <nrf_cc3xx_platform_init+0x1a>
   1c616:	f000 fe7d 	bl	1d314 <CC_LibInit>
   1c61a:	b930      	cbnz	r0, 1c62a <nrf_cc3xx_platform_init+0x22>
   1c61c:	4b08      	ldr	r3, [pc, #32]	; (1c640 <nrf_cc3xx_platform_init+0x38>)
   1c61e:	2201      	movs	r2, #1
   1c620:	601a      	str	r2, [r3, #0]
   1c622:	2301      	movs	r3, #1
   1c624:	6023      	str	r3, [r4, #0]
   1c626:	2000      	movs	r0, #0
   1c628:	bd10      	pop	{r4, pc}
   1c62a:	3801      	subs	r0, #1
   1c62c:	2806      	cmp	r0, #6
   1c62e:	d901      	bls.n	1c634 <nrf_cc3xx_platform_init+0x2c>
   1c630:	4804      	ldr	r0, [pc, #16]	; (1c644 <nrf_cc3xx_platform_init+0x3c>)
   1c632:	bd10      	pop	{r4, pc}
   1c634:	4b04      	ldr	r3, [pc, #16]	; (1c648 <nrf_cc3xx_platform_init+0x40>)
   1c636:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c63a:	bd10      	pop	{r4, pc}
   1c63c:	2000285c 	.word	0x2000285c
   1c640:	20002860 	.word	0x20002860
   1c644:	ffff8ffe 	.word	0xffff8ffe
   1c648:	0002463c 	.word	0x0002463c

0001c64c <nrf_cc3xx_platform_abort>:
   1c64c:	f3bf 8f4f 	dsb	sy
   1c650:	4905      	ldr	r1, [pc, #20]	; (1c668 <nrf_cc3xx_platform_abort+0x1c>)
   1c652:	4b06      	ldr	r3, [pc, #24]	; (1c66c <nrf_cc3xx_platform_abort+0x20>)
   1c654:	68ca      	ldr	r2, [r1, #12]
   1c656:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c65a:	4313      	orrs	r3, r2
   1c65c:	60cb      	str	r3, [r1, #12]
   1c65e:	f3bf 8f4f 	dsb	sy
   1c662:	bf00      	nop
   1c664:	e7fd      	b.n	1c662 <nrf_cc3xx_platform_abort+0x16>
   1c666:	bf00      	nop
   1c668:	e000ed00 	.word	0xe000ed00
   1c66c:	05fa0004 	.word	0x05fa0004

0001c670 <CC_PalAbort>:
   1c670:	b410      	push	{r4}
   1c672:	4b09      	ldr	r3, [pc, #36]	; (1c698 <CC_PalAbort+0x28>)
   1c674:	4909      	ldr	r1, [pc, #36]	; (1c69c <CC_PalAbort+0x2c>)
   1c676:	4c0a      	ldr	r4, [pc, #40]	; (1c6a0 <CC_PalAbort+0x30>)
   1c678:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1c67c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1c680:	6849      	ldr	r1, [r1, #4]
   1c682:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1c686:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1c68a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1c68e:	2300      	movs	r3, #0
   1c690:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1c694:	bc10      	pop	{r4}
   1c696:	4708      	bx	r1
   1c698:	5002b000 	.word	0x5002b000
   1c69c:	200007e4 	.word	0x200007e4
   1c6a0:	5002a000 	.word	0x5002a000

0001c6a4 <nrf_cc3xx_platform_set_abort>:
   1c6a4:	e9d0 1200 	ldrd	r1, r2, [r0]
   1c6a8:	4b01      	ldr	r3, [pc, #4]	; (1c6b0 <nrf_cc3xx_platform_set_abort+0xc>)
   1c6aa:	e9c3 1200 	strd	r1, r2, [r3]
   1c6ae:	4770      	bx	lr
   1c6b0:	200007e4 	.word	0x200007e4

0001c6b4 <nrf_cc3xx_platform_ctr_drbg_init>:
   1c6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c6b8:	4c14      	ldr	r4, [pc, #80]	; (1c70c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1c6ba:	4e15      	ldr	r6, [pc, #84]	; (1c710 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1c6bc:	2800      	cmp	r0, #0
   1c6be:	bf18      	it	ne
   1c6c0:	4604      	movne	r4, r0
   1c6c2:	b083      	sub	sp, #12
   1c6c4:	6823      	ldr	r3, [r4, #0]
   1c6c6:	42b3      	cmp	r3, r6
   1c6c8:	d01c      	beq.n	1c704 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   1c6ca:	460d      	mov	r5, r1
   1c6cc:	4620      	mov	r0, r4
   1c6ce:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1c6d2:	f104 0904 	add.w	r9, r4, #4
   1c6d6:	4617      	mov	r7, r2
   1c6d8:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1c6dc:	f000 f8d0 	bl	1c880 <mbedtls_platform_zeroize>
   1c6e0:	4648      	mov	r0, r9
   1c6e2:	f000 fd05 	bl	1d0f0 <cc_mbedtls_entropy_init>
   1c6e6:	4640      	mov	r0, r8
   1c6e8:	f000 fb32 	bl	1cd50 <cc_mbedtls_ctr_drbg_init>
   1c6ec:	4909      	ldr	r1, [pc, #36]	; (1c714 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1c6ee:	9700      	str	r7, [sp, #0]
   1c6f0:	462b      	mov	r3, r5
   1c6f2:	464a      	mov	r2, r9
   1c6f4:	4640      	mov	r0, r8
   1c6f6:	f000 fb41 	bl	1cd7c <cc_mbedtls_ctr_drbg_seed>
   1c6fa:	b900      	cbnz	r0, 1c6fe <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   1c6fc:	6026      	str	r6, [r4, #0]
   1c6fe:	b003      	add	sp, #12
   1c700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c704:	2000      	movs	r0, #0
   1c706:	b003      	add	sp, #12
   1c708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c70c:	20002864 	.word	0x20002864
   1c710:	5ac9bca5 	.word	0x5ac9bca5
   1c714:	0001d171 	.word	0x0001d171

0001c718 <nrf_cc3xx_platform_ctr_drbg_get>:
   1c718:	b570      	push	{r4, r5, r6, lr}
   1c71a:	4d0d      	ldr	r5, [pc, #52]	; (1c750 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1c71c:	2800      	cmp	r0, #0
   1c71e:	bf18      	it	ne
   1c720:	4605      	movne	r5, r0
   1c722:	461e      	mov	r6, r3
   1c724:	6828      	ldr	r0, [r5, #0]
   1c726:	4b0b      	ldr	r3, [pc, #44]	; (1c754 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1c728:	4298      	cmp	r0, r3
   1c72a:	b082      	sub	sp, #8
   1c72c:	d10d      	bne.n	1c74a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1c72e:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   1c732:	2500      	movs	r5, #0
   1c734:	9500      	str	r5, [sp, #0]
   1c736:	462b      	mov	r3, r5
   1c738:	4614      	mov	r4, r2
   1c73a:	f000 fb6d 	bl	1ce18 <cc_mbedtls_ctr_drbg_random_with_add>
   1c73e:	2800      	cmp	r0, #0
   1c740:	bf18      	it	ne
   1c742:	462c      	movne	r4, r5
   1c744:	6034      	str	r4, [r6, #0]
   1c746:	b002      	add	sp, #8
   1c748:	bd70      	pop	{r4, r5, r6, pc}
   1c74a:	4803      	ldr	r0, [pc, #12]	; (1c758 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1c74c:	e7fb      	b.n	1c746 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1c74e:	bf00      	nop
   1c750:	20002864 	.word	0x20002864
   1c754:	5ac9bca5 	.word	0x5ac9bca5
   1c758:	ffff8fe8 	.word	0xffff8fe8

0001c75c <mutex_free>:
   1c75c:	b510      	push	{r4, lr}
   1c75e:	4604      	mov	r4, r0
   1c760:	b130      	cbz	r0, 1c770 <mutex_free+0x14>
   1c762:	6863      	ldr	r3, [r4, #4]
   1c764:	06db      	lsls	r3, r3, #27
   1c766:	d502      	bpl.n	1c76e <mutex_free+0x12>
   1c768:	2300      	movs	r3, #0
   1c76a:	6023      	str	r3, [r4, #0]
   1c76c:	6063      	str	r3, [r4, #4]
   1c76e:	bd10      	pop	{r4, pc}
   1c770:	4b02      	ldr	r3, [pc, #8]	; (1c77c <mutex_free+0x20>)
   1c772:	4803      	ldr	r0, [pc, #12]	; (1c780 <mutex_free+0x24>)
   1c774:	685b      	ldr	r3, [r3, #4]
   1c776:	4798      	blx	r3
   1c778:	e7f3      	b.n	1c762 <mutex_free+0x6>
   1c77a:	bf00      	nop
   1c77c:	200007e4 	.word	0x200007e4
   1c780:	00024658 	.word	0x00024658

0001c784 <mutex_lock>:
   1c784:	b1b0      	cbz	r0, 1c7b4 <mutex_lock+0x30>
   1c786:	6843      	ldr	r3, [r0, #4]
   1c788:	b193      	cbz	r3, 1c7b0 <mutex_lock+0x2c>
   1c78a:	06db      	lsls	r3, r3, #27
   1c78c:	d50e      	bpl.n	1c7ac <mutex_lock+0x28>
   1c78e:	2301      	movs	r3, #1
   1c790:	e850 2f00 	ldrex	r2, [r0]
   1c794:	4619      	mov	r1, r3
   1c796:	e840 1c00 	strex	ip, r1, [r0]
   1c79a:	f09c 0f00 	teq	ip, #0
   1c79e:	d1f7      	bne.n	1c790 <mutex_lock+0xc>
   1c7a0:	2a01      	cmp	r2, #1
   1c7a2:	d0f5      	beq.n	1c790 <mutex_lock+0xc>
   1c7a4:	f3bf 8f5f 	dmb	sy
   1c7a8:	2000      	movs	r0, #0
   1c7aa:	4770      	bx	lr
   1c7ac:	4803      	ldr	r0, [pc, #12]	; (1c7bc <mutex_lock+0x38>)
   1c7ae:	4770      	bx	lr
   1c7b0:	4803      	ldr	r0, [pc, #12]	; (1c7c0 <mutex_lock+0x3c>)
   1c7b2:	4770      	bx	lr
   1c7b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c7b8:	4770      	bx	lr
   1c7ba:	bf00      	nop
   1c7bc:	ffff8fe9 	.word	0xffff8fe9
   1c7c0:	ffff8fea 	.word	0xffff8fea

0001c7c4 <mutex_unlock>:
   1c7c4:	b168      	cbz	r0, 1c7e2 <mutex_unlock+0x1e>
   1c7c6:	6843      	ldr	r3, [r0, #4]
   1c7c8:	b13b      	cbz	r3, 1c7da <mutex_unlock+0x16>
   1c7ca:	06db      	lsls	r3, r3, #27
   1c7cc:	d507      	bpl.n	1c7de <mutex_unlock+0x1a>
   1c7ce:	f3bf 8f5f 	dmb	sy
   1c7d2:	2300      	movs	r3, #0
   1c7d4:	6003      	str	r3, [r0, #0]
   1c7d6:	4618      	mov	r0, r3
   1c7d8:	4770      	bx	lr
   1c7da:	4803      	ldr	r0, [pc, #12]	; (1c7e8 <mutex_unlock+0x24>)
   1c7dc:	4770      	bx	lr
   1c7de:	4803      	ldr	r0, [pc, #12]	; (1c7ec <mutex_unlock+0x28>)
   1c7e0:	4770      	bx	lr
   1c7e2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1c7e6:	4770      	bx	lr
   1c7e8:	ffff8fea 	.word	0xffff8fea
   1c7ec:	ffff8fe9 	.word	0xffff8fe9

0001c7f0 <mutex_init>:
   1c7f0:	b510      	push	{r4, lr}
   1c7f2:	4604      	mov	r4, r0
   1c7f4:	b120      	cbz	r0, 1c800 <mutex_init+0x10>
   1c7f6:	2200      	movs	r2, #0
   1c7f8:	2311      	movs	r3, #17
   1c7fa:	6022      	str	r2, [r4, #0]
   1c7fc:	6063      	str	r3, [r4, #4]
   1c7fe:	bd10      	pop	{r4, pc}
   1c800:	4801      	ldr	r0, [pc, #4]	; (1c808 <mutex_init+0x18>)
   1c802:	f7ff ff35 	bl	1c670 <CC_PalAbort>
   1c806:	e7f6      	b.n	1c7f6 <mutex_init+0x6>
   1c808:	00024680 	.word	0x00024680

0001c80c <nrf_cc3xx_platform_set_mutexes>:
   1c80c:	b570      	push	{r4, r5, r6, lr}
   1c80e:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c812:	4c13      	ldr	r4, [pc, #76]	; (1c860 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1c814:	4d13      	ldr	r5, [pc, #76]	; (1c864 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1c816:	6063      	str	r3, [r4, #4]
   1c818:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   1c81c:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1c820:	6022      	str	r2, [r4, #0]
   1c822:	4b11      	ldr	r3, [pc, #68]	; (1c868 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1c824:	6808      	ldr	r0, [r1, #0]
   1c826:	6018      	str	r0, [r3, #0]
   1c828:	6848      	ldr	r0, [r1, #4]
   1c82a:	6058      	str	r0, [r3, #4]
   1c82c:	6888      	ldr	r0, [r1, #8]
   1c82e:	6098      	str	r0, [r3, #8]
   1c830:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   1c834:	60d8      	str	r0, [r3, #12]
   1c836:	6119      	str	r1, [r3, #16]
   1c838:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1c83c:	06db      	lsls	r3, r3, #27
   1c83e:	d50d      	bpl.n	1c85c <nrf_cc3xx_platform_set_mutexes+0x50>
   1c840:	2300      	movs	r3, #0
   1c842:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
   1c846:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
   1c84a:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1c84e:	4790      	blx	r2
   1c850:	6823      	ldr	r3, [r4, #0]
   1c852:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1c856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c85a:	4718      	bx	r3
   1c85c:	bd70      	pop	{r4, r5, r6, pc}
   1c85e:	bf00      	nop
   1c860:	200007f4 	.word	0x200007f4
   1c864:	20002864 	.word	0x20002864
   1c868:	20000804 	.word	0x20000804

0001c86c <mbedtls_zeroize_internal>:
   1c86c:	b138      	cbz	r0, 1c87e <mbedtls_zeroize_internal+0x12>
   1c86e:	b131      	cbz	r1, 1c87e <mbedtls_zeroize_internal+0x12>
   1c870:	4401      	add	r1, r0
   1c872:	2200      	movs	r2, #0
   1c874:	4603      	mov	r3, r0
   1c876:	3001      	adds	r0, #1
   1c878:	4281      	cmp	r1, r0
   1c87a:	701a      	strb	r2, [r3, #0]
   1c87c:	d1fa      	bne.n	1c874 <mbedtls_zeroize_internal+0x8>
   1c87e:	4770      	bx	lr

0001c880 <mbedtls_platform_zeroize>:
   1c880:	b138      	cbz	r0, 1c892 <mbedtls_platform_zeroize+0x12>
   1c882:	b131      	cbz	r1, 1c892 <mbedtls_platform_zeroize+0x12>
   1c884:	4401      	add	r1, r0
   1c886:	2200      	movs	r2, #0
   1c888:	4603      	mov	r3, r0
   1c88a:	3001      	adds	r0, #1
   1c88c:	4288      	cmp	r0, r1
   1c88e:	701a      	strb	r2, [r3, #0]
   1c890:	d1fa      	bne.n	1c888 <mbedtls_platform_zeroize+0x8>
   1c892:	4770      	bx	lr

0001c894 <block_cipher_df>:
   1c894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c898:	b0b7      	sub	sp, #220	; 0xdc
   1c89a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1c89e:	9005      	str	r0, [sp, #20]
   1c8a0:	f200 8147 	bhi.w	1cb32 <block_cipher_df+0x29e>
   1c8a4:	4614      	mov	r4, r2
   1c8a6:	460d      	mov	r5, r1
   1c8a8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1c8ac:	2100      	movs	r1, #0
   1c8ae:	48a2      	ldr	r0, [pc, #648]	; (1cb38 <block_cipher_df+0x2a4>)
   1c8b0:	f006 ff98 	bl	237e4 <memset>
   1c8b4:	a819      	add	r0, sp, #100	; 0x64
   1c8b6:	f001 f9c1 	bl	1dc3c <cc_mbedtls_aes_init>
   1c8ba:	489f      	ldr	r0, [pc, #636]	; (1cb38 <block_cipher_df+0x2a4>)
   1c8bc:	2300      	movs	r3, #0
   1c8be:	8203      	strh	r3, [r0, #16]
   1c8c0:	ba63      	rev16	r3, r4
   1c8c2:	8243      	strh	r3, [r0, #18]
   1c8c4:	2320      	movs	r3, #32
   1c8c6:	4629      	mov	r1, r5
   1c8c8:	75c3      	strb	r3, [r0, #23]
   1c8ca:	4605      	mov	r5, r0
   1c8cc:	4622      	mov	r2, r4
   1c8ce:	3018      	adds	r0, #24
   1c8d0:	f006 ff67 	bl	237a2 <memcpy>
   1c8d4:	462b      	mov	r3, r5
   1c8d6:	4423      	add	r3, r4
   1c8d8:	2280      	movs	r2, #128	; 0x80
   1c8da:	761a      	strb	r2, [r3, #24]
   1c8dc:	4b97      	ldr	r3, [pc, #604]	; (1cb3c <block_cipher_df+0x2a8>)
   1c8de:	930d      	str	r3, [sp, #52]	; 0x34
   1c8e0:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1c8e4:	930e      	str	r3, [sp, #56]	; 0x38
   1c8e6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1c8ea:	930f      	str	r3, [sp, #60]	; 0x3c
   1c8ec:	a90d      	add	r1, sp, #52	; 0x34
   1c8ee:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1c8f2:	a819      	add	r0, sp, #100	; 0x64
   1c8f4:	9310      	str	r3, [sp, #64]	; 0x40
   1c8f6:	f001 f9b7 	bl	1dc68 <cc_mbedtls_aes_setkey_enc>
   1c8fa:	4605      	mov	r5, r0
   1c8fc:	2800      	cmp	r0, #0
   1c8fe:	f040 80f4 	bne.w	1caea <block_cipher_df+0x256>
   1c902:	f104 0319 	add.w	r3, r4, #25
   1c906:	9306      	str	r3, [sp, #24]
   1c908:	f10d 0820 	add.w	r8, sp, #32
   1c90c:	ab11      	add	r3, sp, #68	; 0x44
   1c90e:	9304      	str	r3, [sp, #16]
   1c910:	9307      	str	r3, [sp, #28]
   1c912:	46c1      	mov	r9, r8
   1c914:	2210      	movs	r2, #16
   1c916:	2100      	movs	r1, #0
   1c918:	4648      	mov	r0, r9
   1c91a:	f006 ff63 	bl	237e4 <memset>
   1c91e:	f8df a220 	ldr.w	sl, [pc, #544]	; 1cb40 <block_cipher_df+0x2ac>
   1c922:	9b06      	ldr	r3, [sp, #24]
   1c924:	9300      	str	r3, [sp, #0]
   1c926:	f8cd 900c 	str.w	r9, [sp, #12]
   1c92a:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   1c92e:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   1c932:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   1c936:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1c93a:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   1c93e:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   1c942:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   1c946:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   1c94a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1c94e:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   1c952:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   1c956:	406a      	eors	r2, r5
   1c958:	ea8e 0e00 	eor.w	lr, lr, r0
   1c95c:	9d00      	ldr	r5, [sp, #0]
   1c95e:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   1c962:	9202      	str	r2, [sp, #8]
   1c964:	ea8c 0c03 	eor.w	ip, ip, r3
   1c968:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   1c96c:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   1c970:	2d10      	cmp	r5, #16
   1c972:	ea80 0003 	eor.w	r0, r0, r3
   1c976:	462b      	mov	r3, r5
   1c978:	bf8c      	ite	hi
   1c97a:	3b10      	subhi	r3, #16
   1c97c:	1b6b      	subls	r3, r5, r5
   1c97e:	9300      	str	r3, [sp, #0]
   1c980:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   1c984:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   1c988:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   1c98c:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   1c990:	4061      	eors	r1, r4
   1c992:	405f      	eors	r7, r3
   1c994:	2400      	movs	r4, #0
   1c996:	406a      	eors	r2, r5
   1c998:	ea8b 0b06 	eor.w	fp, fp, r6
   1c99c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   1c9a0:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   1c9a4:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   1c9a8:	9601      	str	r6, [sp, #4]
   1c9aa:	4626      	mov	r6, r4
   1c9ac:	406b      	eors	r3, r5
   1c9ae:	f36b 0607 	bfi	r6, fp, #0, #8
   1c9b2:	4625      	mov	r5, r4
   1c9b4:	f367 260f 	bfi	r6, r7, #8, #8
   1c9b8:	462f      	mov	r7, r5
   1c9ba:	f361 0707 	bfi	r7, r1, #0, #8
   1c9be:	9902      	ldr	r1, [sp, #8]
   1c9c0:	f361 0507 	bfi	r5, r1, #0, #8
   1c9c4:	f362 250f 	bfi	r5, r2, #8, #8
   1c9c8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1c9cc:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   1c9d0:	f363 270f 	bfi	r7, r3, #8, #8
   1c9d4:	ea82 0909 	eor.w	r9, r2, r9
   1c9d8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1c9dc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1c9e0:	ea83 0808 	eor.w	r8, r3, r8
   1c9e4:	404a      	eors	r2, r1
   1c9e6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1c9ea:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   1c9ee:	f36e 0407 	bfi	r4, lr, #0, #8
   1c9f2:	404b      	eors	r3, r1
   1c9f4:	f368 4717 	bfi	r7, r8, #16, #8
   1c9f8:	f36c 240f 	bfi	r4, ip, #8, #8
   1c9fc:	f363 671f 	bfi	r7, r3, #24, #8
   1ca00:	9b03      	ldr	r3, [sp, #12]
   1ca02:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   1ca06:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ca0a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   1ca0e:	ea8c 0c0e 	eor.w	ip, ip, lr
   1ca12:	f36c 4617 	bfi	r6, ip, #16, #8
   1ca16:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   1ca1a:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   1ca1e:	ea8c 0c08 	eor.w	ip, ip, r8
   1ca22:	f36c 661f 	bfi	r6, ip, #24, #8
   1ca26:	f369 4517 	bfi	r5, r9, #16, #8
   1ca2a:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   1ca2e:	960b      	str	r6, [sp, #44]	; 0x2c
   1ca30:	f362 651f 	bfi	r5, r2, #24, #8
   1ca34:	f360 4417 	bfi	r4, r0, #16, #8
   1ca38:	9508      	str	r5, [sp, #32]
   1ca3a:	ea8c 050e 	eor.w	r5, ip, lr
   1ca3e:	f365 641f 	bfi	r4, r5, #24, #8
   1ca42:	461a      	mov	r2, r3
   1ca44:	2101      	movs	r1, #1
   1ca46:	a819      	add	r0, sp, #100	; 0x64
   1ca48:	f10a 0a10 	add.w	sl, sl, #16
   1ca4c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   1ca50:	f001 f924 	bl	1dc9c <cc_mbedtls_aes_crypt_ecb>
   1ca54:	2800      	cmp	r0, #0
   1ca56:	d168      	bne.n	1cb2a <block_cipher_df+0x296>
   1ca58:	9b00      	ldr	r3, [sp, #0]
   1ca5a:	2b00      	cmp	r3, #0
   1ca5c:	f47f af65 	bne.w	1c92a <block_cipher_df+0x96>
   1ca60:	9c07      	ldr	r4, [sp, #28]
   1ca62:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1ca66:	4620      	mov	r0, r4
   1ca68:	2210      	movs	r2, #16
   1ca6a:	3410      	adds	r4, #16
   1ca6c:	4649      	mov	r1, r9
   1ca6e:	9407      	str	r4, [sp, #28]
   1ca70:	f006 fe97 	bl	237a2 <memcpy>
   1ca74:	4a30      	ldr	r2, [pc, #192]	; (1cb38 <block_cipher_df+0x2a4>)
   1ca76:	78d3      	ldrb	r3, [r2, #3]
   1ca78:	3301      	adds	r3, #1
   1ca7a:	70d3      	strb	r3, [r2, #3]
   1ca7c:	ab19      	add	r3, sp, #100	; 0x64
   1ca7e:	429c      	cmp	r4, r3
   1ca80:	f47f af48 	bne.w	1c914 <block_cipher_df+0x80>
   1ca84:	9904      	ldr	r1, [sp, #16]
   1ca86:	2280      	movs	r2, #128	; 0x80
   1ca88:	4618      	mov	r0, r3
   1ca8a:	f001 f8ed 	bl	1dc68 <cc_mbedtls_aes_setkey_enc>
   1ca8e:	46c8      	mov	r8, r9
   1ca90:	4605      	mov	r5, r0
   1ca92:	bb70      	cbnz	r0, 1caf2 <block_cipher_df+0x25e>
   1ca94:	9c05      	ldr	r4, [sp, #20]
   1ca96:	f104 0620 	add.w	r6, r4, #32
   1ca9a:	ab15      	add	r3, sp, #84	; 0x54
   1ca9c:	461a      	mov	r2, r3
   1ca9e:	2101      	movs	r1, #1
   1caa0:	a819      	add	r0, sp, #100	; 0x64
   1caa2:	f001 f8fb 	bl	1dc9c <cc_mbedtls_aes_crypt_ecb>
   1caa6:	2210      	movs	r2, #16
   1caa8:	4605      	mov	r5, r0
   1caaa:	bb10      	cbnz	r0, 1caf2 <block_cipher_df+0x25e>
   1caac:	4620      	mov	r0, r4
   1caae:	a915      	add	r1, sp, #84	; 0x54
   1cab0:	3410      	adds	r4, #16
   1cab2:	f006 fe76 	bl	237a2 <memcpy>
   1cab6:	42b4      	cmp	r4, r6
   1cab8:	d1ef      	bne.n	1ca9a <block_cipher_df+0x206>
   1caba:	a819      	add	r0, sp, #100	; 0x64
   1cabc:	f001 f8ce 	bl	1dc5c <cc_mbedtls_aes_free>
   1cac0:	481d      	ldr	r0, [pc, #116]	; (1cb38 <block_cipher_df+0x2a4>)
   1cac2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cac6:	f7ff fedb 	bl	1c880 <mbedtls_platform_zeroize>
   1caca:	9804      	ldr	r0, [sp, #16]
   1cacc:	2120      	movs	r1, #32
   1cace:	f7ff fed7 	bl	1c880 <mbedtls_platform_zeroize>
   1cad2:	a80d      	add	r0, sp, #52	; 0x34
   1cad4:	2110      	movs	r1, #16
   1cad6:	f7ff fed3 	bl	1c880 <mbedtls_platform_zeroize>
   1cada:	4640      	mov	r0, r8
   1cadc:	2110      	movs	r1, #16
   1cade:	f7ff fecf 	bl	1c880 <mbedtls_platform_zeroize>
   1cae2:	4628      	mov	r0, r5
   1cae4:	b037      	add	sp, #220	; 0xdc
   1cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1caea:	ab11      	add	r3, sp, #68	; 0x44
   1caec:	9304      	str	r3, [sp, #16]
   1caee:	f10d 0820 	add.w	r8, sp, #32
   1caf2:	a819      	add	r0, sp, #100	; 0x64
   1caf4:	f001 f8b2 	bl	1dc5c <cc_mbedtls_aes_free>
   1caf8:	480f      	ldr	r0, [pc, #60]	; (1cb38 <block_cipher_df+0x2a4>)
   1cafa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1cafe:	f7ff febf 	bl	1c880 <mbedtls_platform_zeroize>
   1cb02:	9804      	ldr	r0, [sp, #16]
   1cb04:	2120      	movs	r1, #32
   1cb06:	f7ff febb 	bl	1c880 <mbedtls_platform_zeroize>
   1cb0a:	a80d      	add	r0, sp, #52	; 0x34
   1cb0c:	2110      	movs	r1, #16
   1cb0e:	f7ff feb7 	bl	1c880 <mbedtls_platform_zeroize>
   1cb12:	4640      	mov	r0, r8
   1cb14:	2110      	movs	r1, #16
   1cb16:	f7ff feb3 	bl	1c880 <mbedtls_platform_zeroize>
   1cb1a:	9805      	ldr	r0, [sp, #20]
   1cb1c:	2120      	movs	r1, #32
   1cb1e:	f7ff feaf 	bl	1c880 <mbedtls_platform_zeroize>
   1cb22:	4628      	mov	r0, r5
   1cb24:	b037      	add	sp, #220	; 0xdc
   1cb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1cb2e:	4605      	mov	r5, r0
   1cb30:	e7df      	b.n	1caf2 <block_cipher_df+0x25e>
   1cb32:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1cb36:	e7f4      	b.n	1cb22 <block_cipher_df+0x28e>
   1cb38:	20002a34 	.word	0x20002a34
   1cb3c:	03020100 	.word	0x03020100
   1cb40:	20002a44 	.word	0x20002a44

0001cb44 <ctr_drbg_update_internal>:
   1cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb48:	b088      	sub	sp, #32
   1cb4a:	4604      	mov	r4, r0
   1cb4c:	460d      	mov	r5, r1
   1cb4e:	2220      	movs	r2, #32
   1cb50:	2100      	movs	r1, #0
   1cb52:	4668      	mov	r0, sp
   1cb54:	f006 fe46 	bl	237e4 <memset>
   1cb58:	f104 0620 	add.w	r6, r4, #32
   1cb5c:	466f      	mov	r7, sp
   1cb5e:	7be2      	ldrb	r2, [r4, #15]
   1cb60:	3201      	adds	r2, #1
   1cb62:	b2d2      	uxtb	r2, r2
   1cb64:	73e2      	strb	r2, [r4, #15]
   1cb66:	2a00      	cmp	r2, #0
   1cb68:	d14d      	bne.n	1cc06 <ctr_drbg_update_internal+0xc2>
   1cb6a:	7ba2      	ldrb	r2, [r4, #14]
   1cb6c:	3201      	adds	r2, #1
   1cb6e:	b2d2      	uxtb	r2, r2
   1cb70:	73a2      	strb	r2, [r4, #14]
   1cb72:	2a00      	cmp	r2, #0
   1cb74:	d147      	bne.n	1cc06 <ctr_drbg_update_internal+0xc2>
   1cb76:	7b63      	ldrb	r3, [r4, #13]
   1cb78:	3301      	adds	r3, #1
   1cb7a:	b2db      	uxtb	r3, r3
   1cb7c:	7363      	strb	r3, [r4, #13]
   1cb7e:	2b00      	cmp	r3, #0
   1cb80:	d141      	bne.n	1cc06 <ctr_drbg_update_internal+0xc2>
   1cb82:	7b23      	ldrb	r3, [r4, #12]
   1cb84:	3301      	adds	r3, #1
   1cb86:	b2db      	uxtb	r3, r3
   1cb88:	7323      	strb	r3, [r4, #12]
   1cb8a:	2b00      	cmp	r3, #0
   1cb8c:	d13b      	bne.n	1cc06 <ctr_drbg_update_internal+0xc2>
   1cb8e:	7ae3      	ldrb	r3, [r4, #11]
   1cb90:	3301      	adds	r3, #1
   1cb92:	b2db      	uxtb	r3, r3
   1cb94:	72e3      	strb	r3, [r4, #11]
   1cb96:	2b00      	cmp	r3, #0
   1cb98:	d135      	bne.n	1cc06 <ctr_drbg_update_internal+0xc2>
   1cb9a:	7aa3      	ldrb	r3, [r4, #10]
   1cb9c:	3301      	adds	r3, #1
   1cb9e:	b2db      	uxtb	r3, r3
   1cba0:	72a3      	strb	r3, [r4, #10]
   1cba2:	2b00      	cmp	r3, #0
   1cba4:	d12f      	bne.n	1cc06 <ctr_drbg_update_internal+0xc2>
   1cba6:	7a63      	ldrb	r3, [r4, #9]
   1cba8:	3301      	adds	r3, #1
   1cbaa:	b2db      	uxtb	r3, r3
   1cbac:	7263      	strb	r3, [r4, #9]
   1cbae:	bb53      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbb0:	7a23      	ldrb	r3, [r4, #8]
   1cbb2:	3301      	adds	r3, #1
   1cbb4:	b2db      	uxtb	r3, r3
   1cbb6:	7223      	strb	r3, [r4, #8]
   1cbb8:	bb2b      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbba:	79e3      	ldrb	r3, [r4, #7]
   1cbbc:	3301      	adds	r3, #1
   1cbbe:	b2db      	uxtb	r3, r3
   1cbc0:	71e3      	strb	r3, [r4, #7]
   1cbc2:	bb03      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbc4:	79a3      	ldrb	r3, [r4, #6]
   1cbc6:	3301      	adds	r3, #1
   1cbc8:	b2db      	uxtb	r3, r3
   1cbca:	71a3      	strb	r3, [r4, #6]
   1cbcc:	b9db      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbce:	7963      	ldrb	r3, [r4, #5]
   1cbd0:	3301      	adds	r3, #1
   1cbd2:	b2db      	uxtb	r3, r3
   1cbd4:	7163      	strb	r3, [r4, #5]
   1cbd6:	b9b3      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbd8:	7923      	ldrb	r3, [r4, #4]
   1cbda:	3301      	adds	r3, #1
   1cbdc:	b2db      	uxtb	r3, r3
   1cbde:	7123      	strb	r3, [r4, #4]
   1cbe0:	b98b      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbe2:	78e3      	ldrb	r3, [r4, #3]
   1cbe4:	3301      	adds	r3, #1
   1cbe6:	b2db      	uxtb	r3, r3
   1cbe8:	70e3      	strb	r3, [r4, #3]
   1cbea:	b963      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbec:	78a3      	ldrb	r3, [r4, #2]
   1cbee:	3301      	adds	r3, #1
   1cbf0:	b2db      	uxtb	r3, r3
   1cbf2:	70a3      	strb	r3, [r4, #2]
   1cbf4:	b93b      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cbf6:	7863      	ldrb	r3, [r4, #1]
   1cbf8:	3301      	adds	r3, #1
   1cbfa:	b2db      	uxtb	r3, r3
   1cbfc:	7063      	strb	r3, [r4, #1]
   1cbfe:	b913      	cbnz	r3, 1cc06 <ctr_drbg_update_internal+0xc2>
   1cc00:	7823      	ldrb	r3, [r4, #0]
   1cc02:	3301      	adds	r3, #1
   1cc04:	7023      	strb	r3, [r4, #0]
   1cc06:	463b      	mov	r3, r7
   1cc08:	4622      	mov	r2, r4
   1cc0a:	2101      	movs	r1, #1
   1cc0c:	4630      	mov	r0, r6
   1cc0e:	f001 f845 	bl	1dc9c <cc_mbedtls_aes_crypt_ecb>
   1cc12:	4680      	mov	r8, r0
   1cc14:	bb50      	cbnz	r0, 1cc6c <ctr_drbg_update_internal+0x128>
   1cc16:	3710      	adds	r7, #16
   1cc18:	ab08      	add	r3, sp, #32
   1cc1a:	429f      	cmp	r7, r3
   1cc1c:	d19f      	bne.n	1cb5e <ctr_drbg_update_internal+0x1a>
   1cc1e:	9a00      	ldr	r2, [sp, #0]
   1cc20:	682b      	ldr	r3, [r5, #0]
   1cc22:	9906      	ldr	r1, [sp, #24]
   1cc24:	4053      	eors	r3, r2
   1cc26:	9300      	str	r3, [sp, #0]
   1cc28:	9a01      	ldr	r2, [sp, #4]
   1cc2a:	686b      	ldr	r3, [r5, #4]
   1cc2c:	4053      	eors	r3, r2
   1cc2e:	9301      	str	r3, [sp, #4]
   1cc30:	9a02      	ldr	r2, [sp, #8]
   1cc32:	68ab      	ldr	r3, [r5, #8]
   1cc34:	4053      	eors	r3, r2
   1cc36:	9302      	str	r3, [sp, #8]
   1cc38:	9a03      	ldr	r2, [sp, #12]
   1cc3a:	68eb      	ldr	r3, [r5, #12]
   1cc3c:	4053      	eors	r3, r2
   1cc3e:	9303      	str	r3, [sp, #12]
   1cc40:	9a04      	ldr	r2, [sp, #16]
   1cc42:	692b      	ldr	r3, [r5, #16]
   1cc44:	4053      	eors	r3, r2
   1cc46:	9304      	str	r3, [sp, #16]
   1cc48:	9a05      	ldr	r2, [sp, #20]
   1cc4a:	696b      	ldr	r3, [r5, #20]
   1cc4c:	4053      	eors	r3, r2
   1cc4e:	69aa      	ldr	r2, [r5, #24]
   1cc50:	9305      	str	r3, [sp, #20]
   1cc52:	404a      	eors	r2, r1
   1cc54:	69eb      	ldr	r3, [r5, #28]
   1cc56:	9206      	str	r2, [sp, #24]
   1cc58:	9a07      	ldr	r2, [sp, #28]
   1cc5a:	4630      	mov	r0, r6
   1cc5c:	4053      	eors	r3, r2
   1cc5e:	4669      	mov	r1, sp
   1cc60:	2280      	movs	r2, #128	; 0x80
   1cc62:	9307      	str	r3, [sp, #28]
   1cc64:	f001 f800 	bl	1dc68 <cc_mbedtls_aes_setkey_enc>
   1cc68:	4680      	mov	r8, r0
   1cc6a:	b138      	cbz	r0, 1cc7c <ctr_drbg_update_internal+0x138>
   1cc6c:	4668      	mov	r0, sp
   1cc6e:	2120      	movs	r1, #32
   1cc70:	f7ff fe06 	bl	1c880 <mbedtls_platform_zeroize>
   1cc74:	4640      	mov	r0, r8
   1cc76:	b008      	add	sp, #32
   1cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc7c:	2210      	movs	r2, #16
   1cc7e:	eb0d 0102 	add.w	r1, sp, r2
   1cc82:	4620      	mov	r0, r4
   1cc84:	f006 fd8d 	bl	237a2 <memcpy>
   1cc88:	e7f0      	b.n	1cc6c <ctr_drbg_update_internal+0x128>
   1cc8a:	bf00      	nop

0001cc8c <mbedtls_ctr_drbg_reseed_internal>:
   1cc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc90:	4604      	mov	r4, r0
   1cc92:	6980      	ldr	r0, [r0, #24]
   1cc94:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1cc98:	d852      	bhi.n	1cd40 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1cc9a:	461d      	mov	r5, r3
   1cc9c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1cca0:	42ab      	cmp	r3, r5
   1cca2:	d34d      	bcc.n	1cd40 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1cca4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1cca8:	1a18      	subs	r0, r3, r0
   1ccaa:	4290      	cmp	r0, r2
   1ccac:	4616      	mov	r6, r2
   1ccae:	d347      	bcc.n	1cd40 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1ccb0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1cd4c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1ccb4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1ccb8:	460f      	mov	r7, r1
   1ccba:	4648      	mov	r0, r9
   1ccbc:	2100      	movs	r1, #0
   1ccbe:	f006 fd91 	bl	237e4 <memset>
   1ccc2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ccc6:	69a2      	ldr	r2, [r4, #24]
   1ccc8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1cccc:	4649      	mov	r1, r9
   1ccce:	4798      	blx	r3
   1ccd0:	2800      	cmp	r0, #0
   1ccd2:	d138      	bne.n	1cd46 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1ccd4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1ccd8:	b13d      	cbz	r5, 1ccea <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1ccda:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1ccde:	462a      	mov	r2, r5
   1cce0:	eb09 0108 	add.w	r1, r9, r8
   1cce4:	4798      	blx	r3
   1cce6:	bb70      	cbnz	r0, 1cd46 <mbedtls_ctr_drbg_reseed_internal+0xba>
   1cce8:	44a8      	add	r8, r5
   1ccea:	b107      	cbz	r7, 1ccee <mbedtls_ctr_drbg_reseed_internal+0x62>
   1ccec:	b9c6      	cbnz	r6, 1cd20 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1ccee:	4917      	ldr	r1, [pc, #92]	; (1cd4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ccf0:	4642      	mov	r2, r8
   1ccf2:	4608      	mov	r0, r1
   1ccf4:	f7ff fdce 	bl	1c894 <block_cipher_df>
   1ccf8:	4605      	mov	r5, r0
   1ccfa:	b138      	cbz	r0, 1cd0c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1ccfc:	4813      	ldr	r0, [pc, #76]	; (1cd4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ccfe:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1cd02:	f7ff fdbd 	bl	1c880 <mbedtls_platform_zeroize>
   1cd06:	4628      	mov	r0, r5
   1cd08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cd0c:	490f      	ldr	r1, [pc, #60]	; (1cd4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1cd0e:	4620      	mov	r0, r4
   1cd10:	f7ff ff18 	bl	1cb44 <ctr_drbg_update_internal>
   1cd14:	4605      	mov	r5, r0
   1cd16:	2800      	cmp	r0, #0
   1cd18:	d1f0      	bne.n	1ccfc <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cd1a:	2301      	movs	r3, #1
   1cd1c:	6123      	str	r3, [r4, #16]
   1cd1e:	e7ed      	b.n	1ccfc <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cd20:	eb09 0008 	add.w	r0, r9, r8
   1cd24:	4639      	mov	r1, r7
   1cd26:	4632      	mov	r2, r6
   1cd28:	f006 fd3b 	bl	237a2 <memcpy>
   1cd2c:	4907      	ldr	r1, [pc, #28]	; (1cd4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1cd2e:	44b0      	add	r8, r6
   1cd30:	4642      	mov	r2, r8
   1cd32:	4608      	mov	r0, r1
   1cd34:	f7ff fdae 	bl	1c894 <block_cipher_df>
   1cd38:	4605      	mov	r5, r0
   1cd3a:	2800      	cmp	r0, #0
   1cd3c:	d1de      	bne.n	1ccfc <mbedtls_ctr_drbg_reseed_internal+0x70>
   1cd3e:	e7e5      	b.n	1cd0c <mbedtls_ctr_drbg_reseed_internal+0x80>
   1cd40:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1cd44:	e7df      	b.n	1cd06 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1cd46:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1cd4a:	e7dc      	b.n	1cd06 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1cd4c:	20002bd4 	.word	0x20002bd4

0001cd50 <cc_mbedtls_ctr_drbg_init>:
   1cd50:	b510      	push	{r4, lr}
   1cd52:	22a4      	movs	r2, #164	; 0xa4
   1cd54:	4604      	mov	r4, r0
   1cd56:	2100      	movs	r1, #0
   1cd58:	f006 fd44 	bl	237e4 <memset>
   1cd5c:	4b06      	ldr	r3, [pc, #24]	; (1cd78 <cc_mbedtls_ctr_drbg_init+0x28>)
   1cd5e:	f04f 31ff 	mov.w	r1, #4294967295
   1cd62:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1cd66:	6121      	str	r1, [r4, #16]
   1cd68:	61e2      	str	r2, [r4, #28]
   1cd6a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cd74:	4718      	bx	r3
   1cd76:	bf00      	nop
   1cd78:	20000848 	.word	0x20000848

0001cd7c <cc_mbedtls_ctr_drbg_seed>:
   1cd7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd80:	b085      	sub	sp, #20
   1cd82:	4605      	mov	r5, r0
   1cd84:	460f      	mov	r7, r1
   1cd86:	4616      	mov	r6, r2
   1cd88:	2100      	movs	r1, #0
   1cd8a:	2210      	movs	r2, #16
   1cd8c:	4668      	mov	r0, sp
   1cd8e:	4699      	mov	r9, r3
   1cd90:	f006 fd28 	bl	237e4 <memset>
   1cd94:	4b1e      	ldr	r3, [pc, #120]	; (1ce10 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1cd96:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1cd9a:	681b      	ldr	r3, [r3, #0]
   1cd9c:	4640      	mov	r0, r8
   1cd9e:	4798      	blx	r3
   1cda0:	b120      	cbz	r0, 1cdac <cc_mbedtls_ctr_drbg_seed+0x30>
   1cda2:	4604      	mov	r4, r0
   1cda4:	4620      	mov	r0, r4
   1cda6:	b005      	add	sp, #20
   1cda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cdac:	f105 0420 	add.w	r4, r5, #32
   1cdb0:	4620      	mov	r0, r4
   1cdb2:	f000 ff43 	bl	1dc3c <cc_mbedtls_aes_init>
   1cdb6:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1cdba:	69ae      	ldr	r6, [r5, #24]
   1cdbc:	692b      	ldr	r3, [r5, #16]
   1cdbe:	b9ee      	cbnz	r6, 1cdfc <cc_mbedtls_ctr_drbg_seed+0x80>
   1cdc0:	2220      	movs	r2, #32
   1cdc2:	2b00      	cmp	r3, #0
   1cdc4:	61aa      	str	r2, [r5, #24]
   1cdc6:	db20      	blt.n	1ce0a <cc_mbedtls_ctr_drbg_seed+0x8e>
   1cdc8:	461e      	mov	r6, r3
   1cdca:	4620      	mov	r0, r4
   1cdcc:	4669      	mov	r1, sp
   1cdce:	2280      	movs	r2, #128	; 0x80
   1cdd0:	f000 ff4a 	bl	1dc68 <cc_mbedtls_aes_setkey_enc>
   1cdd4:	4604      	mov	r4, r0
   1cdd6:	b930      	cbnz	r0, 1cde6 <cc_mbedtls_ctr_drbg_seed+0x6a>
   1cdd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cdda:	4633      	mov	r3, r6
   1cddc:	4649      	mov	r1, r9
   1cdde:	4628      	mov	r0, r5
   1cde0:	f7ff ff54 	bl	1cc8c <mbedtls_ctr_drbg_reseed_internal>
   1cde4:	4604      	mov	r4, r0
   1cde6:	4b0b      	ldr	r3, [pc, #44]	; (1ce14 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1cde8:	4640      	mov	r0, r8
   1cdea:	681b      	ldr	r3, [r3, #0]
   1cdec:	4798      	blx	r3
   1cdee:	2800      	cmp	r0, #0
   1cdf0:	bf18      	it	ne
   1cdf2:	4604      	movne	r4, r0
   1cdf4:	4620      	mov	r0, r4
   1cdf6:	b005      	add	sp, #20
   1cdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	dae3      	bge.n	1cdc8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ce00:	2e17      	cmp	r6, #23
   1ce02:	d802      	bhi.n	1ce0a <cc_mbedtls_ctr_drbg_seed+0x8e>
   1ce04:	3601      	adds	r6, #1
   1ce06:	0876      	lsrs	r6, r6, #1
   1ce08:	e7df      	b.n	1cdca <cc_mbedtls_ctr_drbg_seed+0x4e>
   1ce0a:	2600      	movs	r6, #0
   1ce0c:	e7dd      	b.n	1cdca <cc_mbedtls_ctr_drbg_seed+0x4e>
   1ce0e:	bf00      	nop
   1ce10:	2000084c 	.word	0x2000084c
   1ce14:	20000850 	.word	0x20000850

0001ce18 <cc_mbedtls_ctr_drbg_random_with_add>:
   1ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce1c:	b08d      	sub	sp, #52	; 0x34
   1ce1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1ce22:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1ce24:	f200 80e3 	bhi.w	1cfee <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1ce28:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1ce2c:	f200 80dc 	bhi.w	1cfe8 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1ce30:	4604      	mov	r4, r0
   1ce32:	4615      	mov	r5, r2
   1ce34:	460e      	mov	r6, r1
   1ce36:	2220      	movs	r2, #32
   1ce38:	2100      	movs	r1, #0
   1ce3a:	a804      	add	r0, sp, #16
   1ce3c:	4698      	mov	r8, r3
   1ce3e:	f006 fcd1 	bl	237e4 <memset>
   1ce42:	4b6c      	ldr	r3, [pc, #432]	; (1cff4 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1ce44:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1ce48:	681b      	ldr	r3, [r3, #0]
   1ce4a:	4648      	mov	r0, r9
   1ce4c:	4798      	blx	r3
   1ce4e:	4683      	mov	fp, r0
   1ce50:	2800      	cmp	r0, #0
   1ce52:	f040 8092 	bne.w	1cf7a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1ce56:	6922      	ldr	r2, [r4, #16]
   1ce58:	69e3      	ldr	r3, [r4, #28]
   1ce5a:	429a      	cmp	r2, r3
   1ce5c:	f300 8091 	bgt.w	1cf82 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1ce60:	6963      	ldr	r3, [r4, #20]
   1ce62:	2b00      	cmp	r3, #0
   1ce64:	f040 808d 	bne.w	1cf82 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1ce68:	2f00      	cmp	r7, #0
   1ce6a:	f040 80a9 	bne.w	1cfc0 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1ce6e:	f8df a188 	ldr.w	sl, [pc, #392]	; 1cff8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1ce72:	466f      	mov	r7, sp
   1ce74:	2d00      	cmp	r5, #0
   1ce76:	f000 8098 	beq.w	1cfaa <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1ce7a:	f104 0820 	add.w	r8, r4, #32
   1ce7e:	466f      	mov	r7, sp
   1ce80:	e00e      	b.n	1cea0 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1ce82:	2d10      	cmp	r5, #16
   1ce84:	46ab      	mov	fp, r5
   1ce86:	bf28      	it	cs
   1ce88:	f04f 0b10 	movcs.w	fp, #16
   1ce8c:	4630      	mov	r0, r6
   1ce8e:	465a      	mov	r2, fp
   1ce90:	4639      	mov	r1, r7
   1ce92:	f006 fc86 	bl	237a2 <memcpy>
   1ce96:	ebb5 050b 	subs.w	r5, r5, fp
   1ce9a:	445e      	add	r6, fp
   1ce9c:	f000 8085 	beq.w	1cfaa <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1cea0:	7be3      	ldrb	r3, [r4, #15]
   1cea2:	3301      	adds	r3, #1
   1cea4:	b2db      	uxtb	r3, r3
   1cea6:	73e3      	strb	r3, [r4, #15]
   1cea8:	2b00      	cmp	r3, #0
   1ceaa:	d14d      	bne.n	1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1ceac:	7ba3      	ldrb	r3, [r4, #14]
   1ceae:	3301      	adds	r3, #1
   1ceb0:	b2db      	uxtb	r3, r3
   1ceb2:	73a3      	strb	r3, [r4, #14]
   1ceb4:	2b00      	cmp	r3, #0
   1ceb6:	d147      	bne.n	1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1ceb8:	7b63      	ldrb	r3, [r4, #13]
   1ceba:	3301      	adds	r3, #1
   1cebc:	b2db      	uxtb	r3, r3
   1cebe:	7363      	strb	r3, [r4, #13]
   1cec0:	2b00      	cmp	r3, #0
   1cec2:	d141      	bne.n	1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cec4:	7b23      	ldrb	r3, [r4, #12]
   1cec6:	3301      	adds	r3, #1
   1cec8:	b2db      	uxtb	r3, r3
   1ceca:	7323      	strb	r3, [r4, #12]
   1cecc:	2b00      	cmp	r3, #0
   1cece:	d13b      	bne.n	1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1ced0:	7ae3      	ldrb	r3, [r4, #11]
   1ced2:	3301      	adds	r3, #1
   1ced4:	b2db      	uxtb	r3, r3
   1ced6:	72e3      	strb	r3, [r4, #11]
   1ced8:	2b00      	cmp	r3, #0
   1ceda:	d135      	bne.n	1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cedc:	7aa3      	ldrb	r3, [r4, #10]
   1cede:	3301      	adds	r3, #1
   1cee0:	b2db      	uxtb	r3, r3
   1cee2:	72a3      	strb	r3, [r4, #10]
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d12f      	bne.n	1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cee8:	7a63      	ldrb	r3, [r4, #9]
   1ceea:	3301      	adds	r3, #1
   1ceec:	b2db      	uxtb	r3, r3
   1ceee:	7263      	strb	r3, [r4, #9]
   1cef0:	bb53      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cef2:	7a23      	ldrb	r3, [r4, #8]
   1cef4:	3301      	adds	r3, #1
   1cef6:	b2db      	uxtb	r3, r3
   1cef8:	7223      	strb	r3, [r4, #8]
   1cefa:	bb2b      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cefc:	79e3      	ldrb	r3, [r4, #7]
   1cefe:	3301      	adds	r3, #1
   1cf00:	b2db      	uxtb	r3, r3
   1cf02:	71e3      	strb	r3, [r4, #7]
   1cf04:	bb03      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf06:	79a3      	ldrb	r3, [r4, #6]
   1cf08:	3301      	adds	r3, #1
   1cf0a:	b2db      	uxtb	r3, r3
   1cf0c:	71a3      	strb	r3, [r4, #6]
   1cf0e:	b9db      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf10:	7963      	ldrb	r3, [r4, #5]
   1cf12:	3301      	adds	r3, #1
   1cf14:	b2db      	uxtb	r3, r3
   1cf16:	7163      	strb	r3, [r4, #5]
   1cf18:	b9b3      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf1a:	7923      	ldrb	r3, [r4, #4]
   1cf1c:	3301      	adds	r3, #1
   1cf1e:	b2db      	uxtb	r3, r3
   1cf20:	7123      	strb	r3, [r4, #4]
   1cf22:	b98b      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf24:	78e3      	ldrb	r3, [r4, #3]
   1cf26:	3301      	adds	r3, #1
   1cf28:	b2db      	uxtb	r3, r3
   1cf2a:	70e3      	strb	r3, [r4, #3]
   1cf2c:	b963      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf2e:	78a3      	ldrb	r3, [r4, #2]
   1cf30:	3301      	adds	r3, #1
   1cf32:	b2db      	uxtb	r3, r3
   1cf34:	70a3      	strb	r3, [r4, #2]
   1cf36:	b93b      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf38:	7863      	ldrb	r3, [r4, #1]
   1cf3a:	3301      	adds	r3, #1
   1cf3c:	b2db      	uxtb	r3, r3
   1cf3e:	7063      	strb	r3, [r4, #1]
   1cf40:	b913      	cbnz	r3, 1cf48 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1cf42:	7823      	ldrb	r3, [r4, #0]
   1cf44:	3301      	adds	r3, #1
   1cf46:	7023      	strb	r3, [r4, #0]
   1cf48:	463b      	mov	r3, r7
   1cf4a:	4622      	mov	r2, r4
   1cf4c:	2101      	movs	r1, #1
   1cf4e:	4640      	mov	r0, r8
   1cf50:	f000 fea4 	bl	1dc9c <cc_mbedtls_aes_crypt_ecb>
   1cf54:	4683      	mov	fp, r0
   1cf56:	2800      	cmp	r0, #0
   1cf58:	d093      	beq.n	1ce82 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1cf5a:	f8da 3000 	ldr.w	r3, [sl]
   1cf5e:	4648      	mov	r0, r9
   1cf60:	4798      	blx	r3
   1cf62:	2120      	movs	r1, #32
   1cf64:	4603      	mov	r3, r0
   1cf66:	a804      	add	r0, sp, #16
   1cf68:	2b00      	cmp	r3, #0
   1cf6a:	bf18      	it	ne
   1cf6c:	469b      	movne	fp, r3
   1cf6e:	f7ff fc87 	bl	1c880 <mbedtls_platform_zeroize>
   1cf72:	2110      	movs	r1, #16
   1cf74:	4638      	mov	r0, r7
   1cf76:	f7ff fc83 	bl	1c880 <mbedtls_platform_zeroize>
   1cf7a:	4658      	mov	r0, fp
   1cf7c:	b00d      	add	sp, #52	; 0x34
   1cf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf82:	463a      	mov	r2, r7
   1cf84:	4641      	mov	r1, r8
   1cf86:	2300      	movs	r3, #0
   1cf88:	4620      	mov	r0, r4
   1cf8a:	f7ff fe7f 	bl	1cc8c <mbedtls_ctr_drbg_reseed_internal>
   1cf8e:	f8df a068 	ldr.w	sl, [pc, #104]	; 1cff8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1cf92:	2800      	cmp	r0, #0
   1cf94:	f43f af6d 	beq.w	1ce72 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1cf98:	f8da 3000 	ldr.w	r3, [sl]
   1cf9c:	4648      	mov	r0, r9
   1cf9e:	4798      	blx	r3
   1cfa0:	4683      	mov	fp, r0
   1cfa2:	2800      	cmp	r0, #0
   1cfa4:	f43f af65 	beq.w	1ce72 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1cfa8:	e7e7      	b.n	1cf7a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cfaa:	a904      	add	r1, sp, #16
   1cfac:	4620      	mov	r0, r4
   1cfae:	f7ff fdc9 	bl	1cb44 <ctr_drbg_update_internal>
   1cfb2:	4683      	mov	fp, r0
   1cfb4:	2800      	cmp	r0, #0
   1cfb6:	d1d0      	bne.n	1cf5a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1cfb8:	6923      	ldr	r3, [r4, #16]
   1cfba:	3301      	adds	r3, #1
   1cfbc:	6123      	str	r3, [r4, #16]
   1cfbe:	e7cc      	b.n	1cf5a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1cfc0:	463a      	mov	r2, r7
   1cfc2:	4641      	mov	r1, r8
   1cfc4:	a804      	add	r0, sp, #16
   1cfc6:	f7ff fc65 	bl	1c894 <block_cipher_df>
   1cfca:	4683      	mov	fp, r0
   1cfcc:	b118      	cbz	r0, 1cfd6 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1cfce:	f8df a028 	ldr.w	sl, [pc, #40]	; 1cff8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1cfd2:	466f      	mov	r7, sp
   1cfd4:	e7c1      	b.n	1cf5a <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1cfd6:	a904      	add	r1, sp, #16
   1cfd8:	4620      	mov	r0, r4
   1cfda:	f7ff fdb3 	bl	1cb44 <ctr_drbg_update_internal>
   1cfde:	4683      	mov	fp, r0
   1cfe0:	2800      	cmp	r0, #0
   1cfe2:	f43f af44 	beq.w	1ce6e <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1cfe6:	e7f2      	b.n	1cfce <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1cfe8:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1cfec:	e7c5      	b.n	1cf7a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cfee:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1cff2:	e7c2      	b.n	1cf7a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1cff4:	2000084c 	.word	0x2000084c
   1cff8:	20000850 	.word	0x20000850

0001cffc <entropy_update>:
   1cffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d000:	2b20      	cmp	r3, #32
   1d002:	b08b      	sub	sp, #44	; 0x2c
   1d004:	461d      	mov	r5, r3
   1d006:	4606      	mov	r6, r0
   1d008:	4688      	mov	r8, r1
   1d00a:	4691      	mov	r9, r2
   1d00c:	d826      	bhi.n	1d05c <entropy_update+0x60>
   1d00e:	b2db      	uxtb	r3, r3
   1d010:	af02      	add	r7, sp, #8
   1d012:	6831      	ldr	r1, [r6, #0]
   1d014:	f88d 8004 	strb.w	r8, [sp, #4]
   1d018:	f88d 3005 	strb.w	r3, [sp, #5]
   1d01c:	f106 0804 	add.w	r8, r6, #4
   1d020:	b921      	cbnz	r1, 1d02c <entropy_update+0x30>
   1d022:	4640      	mov	r0, r8
   1d024:	f000 fe7e 	bl	1dd24 <cc_mbedtls_sha256_starts>
   1d028:	4604      	mov	r4, r0
   1d02a:	b940      	cbnz	r0, 1d03e <entropy_update+0x42>
   1d02c:	2301      	movs	r3, #1
   1d02e:	6033      	str	r3, [r6, #0]
   1d030:	2202      	movs	r2, #2
   1d032:	a901      	add	r1, sp, #4
   1d034:	4640      	mov	r0, r8
   1d036:	f000 fe89 	bl	1dd4c <cc_mbedtls_sha256_update>
   1d03a:	4604      	mov	r4, r0
   1d03c:	b138      	cbz	r0, 1d04e <entropy_update+0x52>
   1d03e:	4638      	mov	r0, r7
   1d040:	2120      	movs	r1, #32
   1d042:	f7ff fc1d 	bl	1c880 <mbedtls_platform_zeroize>
   1d046:	4620      	mov	r0, r4
   1d048:	b00b      	add	sp, #44	; 0x2c
   1d04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d04e:	462a      	mov	r2, r5
   1d050:	4649      	mov	r1, r9
   1d052:	4640      	mov	r0, r8
   1d054:	f000 fe7a 	bl	1dd4c <cc_mbedtls_sha256_update>
   1d058:	4604      	mov	r4, r0
   1d05a:	e7f0      	b.n	1d03e <entropy_update+0x42>
   1d05c:	af02      	add	r7, sp, #8
   1d05e:	4619      	mov	r1, r3
   1d060:	4610      	mov	r0, r2
   1d062:	2300      	movs	r3, #0
   1d064:	463a      	mov	r2, r7
   1d066:	f000 fffd 	bl	1e064 <cc_mbedtls_sha256>
   1d06a:	4604      	mov	r4, r0
   1d06c:	2800      	cmp	r0, #0
   1d06e:	d1e6      	bne.n	1d03e <entropy_update+0x42>
   1d070:	2320      	movs	r3, #32
   1d072:	46b9      	mov	r9, r7
   1d074:	461d      	mov	r5, r3
   1d076:	e7cc      	b.n	1d012 <entropy_update+0x16>

0001d078 <entropy_gather_internal.part.0>:
   1d078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d07a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1d07e:	b0a7      	sub	sp, #156	; 0x9c
   1d080:	2b00      	cmp	r3, #0
   1d082:	bfd8      	it	le
   1d084:	ae02      	addle	r6, sp, #8
   1d086:	dd2c      	ble.n	1d0e2 <entropy_gather_internal.part.0+0x6a>
   1d088:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1d08c:	4605      	mov	r5, r0
   1d08e:	2300      	movs	r3, #0
   1d090:	ae02      	add	r6, sp, #8
   1d092:	9301      	str	r3, [sp, #4]
   1d094:	f1a4 0701 	sub.w	r7, r4, #1
   1d098:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1d09c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1d0a0:	ab01      	add	r3, sp, #4
   1d0a2:	2290      	movs	r2, #144	; 0x90
   1d0a4:	4631      	mov	r1, r6
   1d0a6:	47a0      	blx	r4
   1d0a8:	fab7 f787 	clz	r7, r7
   1d0ac:	097f      	lsrs	r7, r7, #5
   1d0ae:	4604      	mov	r4, r0
   1d0b0:	b910      	cbnz	r0, 1d0b8 <entropy_gather_internal.part.0+0x40>
   1d0b2:	9b01      	ldr	r3, [sp, #4]
   1d0b4:	b93b      	cbnz	r3, 1d0c6 <entropy_gather_internal.part.0+0x4e>
   1d0b6:	b1a7      	cbz	r7, 1d0e2 <entropy_gather_internal.part.0+0x6a>
   1d0b8:	4630      	mov	r0, r6
   1d0ba:	2190      	movs	r1, #144	; 0x90
   1d0bc:	f7ff fbe0 	bl	1c880 <mbedtls_platform_zeroize>
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	b027      	add	sp, #156	; 0x9c
   1d0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d0c6:	4601      	mov	r1, r0
   1d0c8:	4632      	mov	r2, r6
   1d0ca:	4628      	mov	r0, r5
   1d0cc:	f7ff ff96 	bl	1cffc <entropy_update>
   1d0d0:	b950      	cbnz	r0, 1d0e8 <entropy_gather_internal.part.0+0x70>
   1d0d2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1d0d6:	9a01      	ldr	r2, [sp, #4]
   1d0d8:	4413      	add	r3, r2
   1d0da:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1d0de:	2f00      	cmp	r7, #0
   1d0e0:	d1ea      	bne.n	1d0b8 <entropy_gather_internal.part.0+0x40>
   1d0e2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d0e6:	e7e7      	b.n	1d0b8 <entropy_gather_internal.part.0+0x40>
   1d0e8:	4604      	mov	r4, r0
   1d0ea:	4620      	mov	r0, r4
   1d0ec:	b027      	add	sp, #156	; 0x9c
   1d0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d0f0 <cc_mbedtls_entropy_init>:
   1d0f0:	b570      	push	{r4, r5, r6, lr}
   1d0f2:	2500      	movs	r5, #0
   1d0f4:	4604      	mov	r4, r0
   1d0f6:	2214      	movs	r2, #20
   1d0f8:	4629      	mov	r1, r5
   1d0fa:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1d0fe:	30fc      	adds	r0, #252	; 0xfc
   1d100:	f006 fb70 	bl	237e4 <memset>
   1d104:	4b16      	ldr	r3, [pc, #88]	; (1d160 <cc_mbedtls_entropy_init+0x70>)
   1d106:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1d10a:	681b      	ldr	r3, [r3, #0]
   1d10c:	4630      	mov	r0, r6
   1d10e:	4798      	blx	r3
   1d110:	4620      	mov	r0, r4
   1d112:	f840 5b04 	str.w	r5, [r0], #4
   1d116:	f000 fdeb 	bl	1dcf0 <cc_mbedtls_sha256_init>
   1d11a:	4b12      	ldr	r3, [pc, #72]	; (1d164 <cc_mbedtls_entropy_init+0x74>)
   1d11c:	4630      	mov	r0, r6
   1d11e:	681b      	ldr	r3, [r3, #0]
   1d120:	4798      	blx	r3
   1d122:	b9d8      	cbnz	r0, 1d15c <cc_mbedtls_entropy_init+0x6c>
   1d124:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d128:	42ab      	cmp	r3, r5
   1d12a:	dc11      	bgt.n	1d150 <cc_mbedtls_entropy_init+0x60>
   1d12c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d130:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d134:	2120      	movs	r1, #32
   1d136:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1d13a:	2101      	movs	r1, #1
   1d13c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1d140:	3301      	adds	r3, #1
   1d142:	4909      	ldr	r1, [pc, #36]	; (1d168 <cc_mbedtls_entropy_init+0x78>)
   1d144:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1d148:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1d14c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1d150:	4b06      	ldr	r3, [pc, #24]	; (1d16c <cc_mbedtls_entropy_init+0x7c>)
   1d152:	4630      	mov	r0, r6
   1d154:	681b      	ldr	r3, [r3, #0]
   1d156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d15a:	4718      	bx	r3
   1d15c:	bd70      	pop	{r4, r5, r6, pc}
   1d15e:	bf00      	nop
   1d160:	20000848 	.word	0x20000848
   1d164:	2000084c 	.word	0x2000084c
   1d168:	0001db41 	.word	0x0001db41
   1d16c:	20000850 	.word	0x20000850

0001d170 <cc_mbedtls_entropy_func>:
   1d170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d174:	2a20      	cmp	r2, #32
   1d176:	b088      	sub	sp, #32
   1d178:	d876      	bhi.n	1d268 <cc_mbedtls_entropy_func+0xf8>
   1d17a:	4b3d      	ldr	r3, [pc, #244]	; (1d270 <cc_mbedtls_entropy_func+0x100>)
   1d17c:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1d180:	681b      	ldr	r3, [r3, #0]
   1d182:	4604      	mov	r4, r0
   1d184:	4648      	mov	r0, r9
   1d186:	4617      	mov	r7, r2
   1d188:	4688      	mov	r8, r1
   1d18a:	4798      	blx	r3
   1d18c:	4605      	mov	r5, r0
   1d18e:	bba0      	cbnz	r0, 1d1fa <cc_mbedtls_entropy_func+0x8a>
   1d190:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d194:	f240 1601 	movw	r6, #257	; 0x101
   1d198:	e001      	b.n	1d19e <cc_mbedtls_entropy_func+0x2e>
   1d19a:	3e01      	subs	r6, #1
   1d19c:	d060      	beq.n	1d260 <cc_mbedtls_entropy_func+0xf0>
   1d19e:	4620      	mov	r0, r4
   1d1a0:	b37b      	cbz	r3, 1d202 <cc_mbedtls_entropy_func+0x92>
   1d1a2:	f7ff ff69 	bl	1d078 <entropy_gather_internal.part.0>
   1d1a6:	4605      	mov	r5, r0
   1d1a8:	bb68      	cbnz	r0, 1d206 <cc_mbedtls_entropy_func+0x96>
   1d1aa:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d1ae:	2b00      	cmp	r3, #0
   1d1b0:	ddf3      	ble.n	1d19a <cc_mbedtls_entropy_func+0x2a>
   1d1b2:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1d1b6:	4290      	cmp	r0, r2
   1d1b8:	d3ef      	bcc.n	1d19a <cc_mbedtls_entropy_func+0x2a>
   1d1ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d1be:	2a01      	cmp	r2, #1
   1d1c0:	d1eb      	bne.n	1d19a <cc_mbedtls_entropy_func+0x2a>
   1d1c2:	281f      	cmp	r0, #31
   1d1c4:	d9e9      	bls.n	1d19a <cc_mbedtls_entropy_func+0x2a>
   1d1c6:	466e      	mov	r6, sp
   1d1c8:	4629      	mov	r1, r5
   1d1ca:	2220      	movs	r2, #32
   1d1cc:	4630      	mov	r0, r6
   1d1ce:	f104 0a04 	add.w	sl, r4, #4
   1d1d2:	f006 fb07 	bl	237e4 <memset>
   1d1d6:	4631      	mov	r1, r6
   1d1d8:	4650      	mov	r0, sl
   1d1da:	f000 fde1 	bl	1dda0 <cc_mbedtls_sha256_finish>
   1d1de:	4605      	mov	r5, r0
   1d1e0:	b198      	cbz	r0, 1d20a <cc_mbedtls_entropy_func+0x9a>
   1d1e2:	2120      	movs	r1, #32
   1d1e4:	4630      	mov	r0, r6
   1d1e6:	f7ff fb4b 	bl	1c880 <mbedtls_platform_zeroize>
   1d1ea:	4b22      	ldr	r3, [pc, #136]	; (1d274 <cc_mbedtls_entropy_func+0x104>)
   1d1ec:	4648      	mov	r0, r9
   1d1ee:	681b      	ldr	r3, [r3, #0]
   1d1f0:	4798      	blx	r3
   1d1f2:	2800      	cmp	r0, #0
   1d1f4:	bf18      	it	ne
   1d1f6:	f06f 051d 	mvnne.w	r5, #29
   1d1fa:	4628      	mov	r0, r5
   1d1fc:	b008      	add	sp, #32
   1d1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d202:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d206:	466e      	mov	r6, sp
   1d208:	e7eb      	b.n	1d1e2 <cc_mbedtls_entropy_func+0x72>
   1d20a:	4650      	mov	r0, sl
   1d20c:	f000 fd84 	bl	1dd18 <cc_mbedtls_sha256_free>
   1d210:	4650      	mov	r0, sl
   1d212:	f000 fd6d 	bl	1dcf0 <cc_mbedtls_sha256_init>
   1d216:	4629      	mov	r1, r5
   1d218:	4650      	mov	r0, sl
   1d21a:	f000 fd83 	bl	1dd24 <cc_mbedtls_sha256_starts>
   1d21e:	4605      	mov	r5, r0
   1d220:	2800      	cmp	r0, #0
   1d222:	d1de      	bne.n	1d1e2 <cc_mbedtls_entropy_func+0x72>
   1d224:	4650      	mov	r0, sl
   1d226:	2220      	movs	r2, #32
   1d228:	4631      	mov	r1, r6
   1d22a:	f000 fd8f 	bl	1dd4c <cc_mbedtls_sha256_update>
   1d22e:	4605      	mov	r5, r0
   1d230:	2800      	cmp	r0, #0
   1d232:	d1d6      	bne.n	1d1e2 <cc_mbedtls_entropy_func+0x72>
   1d234:	4603      	mov	r3, r0
   1d236:	4632      	mov	r2, r6
   1d238:	2120      	movs	r1, #32
   1d23a:	4630      	mov	r0, r6
   1d23c:	f000 ff12 	bl	1e064 <cc_mbedtls_sha256>
   1d240:	4605      	mov	r5, r0
   1d242:	2800      	cmp	r0, #0
   1d244:	d1cd      	bne.n	1d1e2 <cc_mbedtls_entropy_func+0x72>
   1d246:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1d24a:	2b00      	cmp	r3, #0
   1d24c:	bfc4      	itt	gt
   1d24e:	2300      	movgt	r3, #0
   1d250:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1d254:	463a      	mov	r2, r7
   1d256:	4640      	mov	r0, r8
   1d258:	4631      	mov	r1, r6
   1d25a:	f006 faa2 	bl	237a2 <memcpy>
   1d25e:	e7c0      	b.n	1d1e2 <cc_mbedtls_entropy_func+0x72>
   1d260:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d264:	466e      	mov	r6, sp
   1d266:	e7bc      	b.n	1d1e2 <cc_mbedtls_entropy_func+0x72>
   1d268:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d26c:	e7c5      	b.n	1d1fa <cc_mbedtls_entropy_func+0x8a>
   1d26e:	bf00      	nop
   1d270:	2000084c 	.word	0x2000084c
   1d274:	20000850 	.word	0x20000850

0001d278 <RndStartupTest.constprop.0>:
   1d278:	b530      	push	{r4, r5, lr}
   1d27a:	b08d      	sub	sp, #52	; 0x34
   1d27c:	2100      	movs	r1, #0
   1d27e:	2228      	movs	r2, #40	; 0x28
   1d280:	a802      	add	r0, sp, #8
   1d282:	9101      	str	r1, [sp, #4]
   1d284:	f006 faae 	bl	237e4 <memset>
   1d288:	a802      	add	r0, sp, #8
   1d28a:	f000 ff13 	bl	1e0b4 <RNG_PLAT_SetUserRngParameters>
   1d28e:	4604      	mov	r4, r0
   1d290:	b110      	cbz	r0, 1d298 <RndStartupTest.constprop.0+0x20>
   1d292:	4620      	mov	r0, r4
   1d294:	b00d      	add	sp, #52	; 0x34
   1d296:	bd30      	pop	{r4, r5, pc}
   1d298:	4d18      	ldr	r5, [pc, #96]	; (1d2fc <RndStartupTest.constprop.0+0x84>)
   1d29a:	f04f 31ff 	mov.w	r1, #4294967295
   1d29e:	6828      	ldr	r0, [r5, #0]
   1d2a0:	f000 f93a 	bl	1d518 <CC_PalMutexLock>
   1d2a4:	4604      	mov	r4, r0
   1d2a6:	b9c0      	cbnz	r0, 1d2da <RndStartupTest.constprop.0+0x62>
   1d2a8:	2000      	movs	r0, #0
   1d2aa:	f000 f965 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1d2ae:	bb00      	cbnz	r0, 1d2f2 <RndStartupTest.constprop.0+0x7a>
   1d2b0:	4a13      	ldr	r2, [pc, #76]	; (1d300 <RndStartupTest.constprop.0+0x88>)
   1d2b2:	a902      	add	r1, sp, #8
   1d2b4:	a801      	add	r0, sp, #4
   1d2b6:	f000 fc35 	bl	1db24 <LLF_RND_RunTrngStartupTest>
   1d2ba:	4604      	mov	r4, r0
   1d2bc:	2001      	movs	r0, #1
   1d2be:	f000 f95b 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1d2c2:	b990      	cbnz	r0, 1d2ea <RndStartupTest.constprop.0+0x72>
   1d2c4:	6828      	ldr	r0, [r5, #0]
   1d2c6:	f000 f92f 	bl	1d528 <CC_PalMutexUnlock>
   1d2ca:	2800      	cmp	r0, #0
   1d2cc:	d0e1      	beq.n	1d292 <RndStartupTest.constprop.0+0x1a>
   1d2ce:	480d      	ldr	r0, [pc, #52]	; (1d304 <RndStartupTest.constprop.0+0x8c>)
   1d2d0:	f7ff f9ce 	bl	1c670 <CC_PalAbort>
   1d2d4:	4620      	mov	r0, r4
   1d2d6:	b00d      	add	sp, #52	; 0x34
   1d2d8:	bd30      	pop	{r4, r5, pc}
   1d2da:	480b      	ldr	r0, [pc, #44]	; (1d308 <RndStartupTest.constprop.0+0x90>)
   1d2dc:	f7ff f9c8 	bl	1c670 <CC_PalAbort>
   1d2e0:	2c01      	cmp	r4, #1
   1d2e2:	bf08      	it	eq
   1d2e4:	2405      	moveq	r4, #5
   1d2e6:	d0ed      	beq.n	1d2c4 <RndStartupTest.constprop.0+0x4c>
   1d2e8:	e7de      	b.n	1d2a8 <RndStartupTest.constprop.0+0x30>
   1d2ea:	4808      	ldr	r0, [pc, #32]	; (1d30c <RndStartupTest.constprop.0+0x94>)
   1d2ec:	f7ff f9c0 	bl	1c670 <CC_PalAbort>
   1d2f0:	e7e8      	b.n	1d2c4 <RndStartupTest.constprop.0+0x4c>
   1d2f2:	4807      	ldr	r0, [pc, #28]	; (1d310 <RndStartupTest.constprop.0+0x98>)
   1d2f4:	f7ff f9bc 	bl	1c670 <CC_PalAbort>
   1d2f8:	e7da      	b.n	1d2b0 <RndStartupTest.constprop.0+0x38>
   1d2fa:	bf00      	nop
   1d2fc:	20000844 	.word	0x20000844
   1d300:	20002dbc 	.word	0x20002dbc
   1d304:	000246fc 	.word	0x000246fc
   1d308:	000246a4 	.word	0x000246a4
   1d30c:	000246dc 	.word	0x000246dc
   1d310:	000246bc 	.word	0x000246bc

0001d314 <CC_LibInit>:
   1d314:	b510      	push	{r4, lr}
   1d316:	b082      	sub	sp, #8
   1d318:	f000 f850 	bl	1d3bc <CC_HalInit>
   1d31c:	b128      	cbz	r0, 1d32a <CC_LibInit+0x16>
   1d31e:	f000 f89f 	bl	1d460 <CC_PalTerminate>
   1d322:	2403      	movs	r4, #3
   1d324:	4620      	mov	r0, r4
   1d326:	b002      	add	sp, #8
   1d328:	bd10      	pop	{r4, pc}
   1d32a:	f000 f86b 	bl	1d404 <CC_PalInit>
   1d32e:	b9d8      	cbnz	r0, 1d368 <CC_LibInit+0x54>
   1d330:	f000 f922 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1d334:	b9e0      	cbnz	r0, 1d370 <CC_LibInit+0x5c>
   1d336:	4c1e      	ldr	r4, [pc, #120]	; (1d3b0 <CC_LibInit+0x9c>)
   1d338:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1d33c:	0e1b      	lsrs	r3, r3, #24
   1d33e:	2bf0      	cmp	r3, #240	; 0xf0
   1d340:	d10a      	bne.n	1d358 <CC_LibInit+0x44>
   1d342:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1d346:	4b1b      	ldr	r3, [pc, #108]	; (1d3b4 <CC_LibInit+0xa0>)
   1d348:	429a      	cmp	r2, r3
   1d34a:	d029      	beq.n	1d3a0 <CC_LibInit+0x8c>
   1d34c:	f000 f838 	bl	1d3c0 <CC_HalTerminate>
   1d350:	2407      	movs	r4, #7
   1d352:	f000 f885 	bl	1d460 <CC_PalTerminate>
   1d356:	e7e5      	b.n	1d324 <CC_LibInit+0x10>
   1d358:	f000 f832 	bl	1d3c0 <CC_HalTerminate>
   1d35c:	f000 f880 	bl	1d460 <CC_PalTerminate>
   1d360:	2406      	movs	r4, #6
   1d362:	4620      	mov	r0, r4
   1d364:	b002      	add	sp, #8
   1d366:	bd10      	pop	{r4, pc}
   1d368:	2404      	movs	r4, #4
   1d36a:	4620      	mov	r0, r4
   1d36c:	b002      	add	sp, #8
   1d36e:	bd10      	pop	{r4, pc}
   1d370:	f000 f826 	bl	1d3c0 <CC_HalTerminate>
   1d374:	f000 f874 	bl	1d460 <CC_PalTerminate>
   1d378:	f7ff ff7e 	bl	1d278 <RndStartupTest.constprop.0>
   1d37c:	4604      	mov	r4, r0
   1d37e:	b958      	cbnz	r0, 1d398 <CC_LibInit+0x84>
   1d380:	4602      	mov	r2, r0
   1d382:	4601      	mov	r1, r0
   1d384:	f7ff f996 	bl	1c6b4 <nrf_cc3xx_platform_ctr_drbg_init>
   1d388:	b930      	cbnz	r0, 1d398 <CC_LibInit+0x84>
   1d38a:	490b      	ldr	r1, [pc, #44]	; (1d3b8 <CC_LibInit+0xa4>)
   1d38c:	ab01      	add	r3, sp, #4
   1d38e:	2268      	movs	r2, #104	; 0x68
   1d390:	f7ff f9c2 	bl	1c718 <nrf_cc3xx_platform_ctr_drbg_get>
   1d394:	2800      	cmp	r0, #0
   1d396:	d0c5      	beq.n	1d324 <CC_LibInit+0x10>
   1d398:	2405      	movs	r4, #5
   1d39a:	4620      	mov	r0, r4
   1d39c:	b002      	add	sp, #8
   1d39e:	bd10      	pop	{r4, pc}
   1d3a0:	2001      	movs	r0, #1
   1d3a2:	f000 f8e9 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	d1e2      	bne.n	1d370 <CC_LibInit+0x5c>
   1d3aa:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1d3ae:	e7e3      	b.n	1d378 <CC_LibInit+0x64>
   1d3b0:	5002b000 	.word	0x5002b000
   1d3b4:	20e00000 	.word	0x20e00000
   1d3b8:	20002d54 	.word	0x20002d54

0001d3bc <CC_HalInit>:
   1d3bc:	2000      	movs	r0, #0
   1d3be:	4770      	bx	lr

0001d3c0 <CC_HalTerminate>:
   1d3c0:	2000      	movs	r0, #0
   1d3c2:	4770      	bx	lr

0001d3c4 <CC_HalClearInterruptBit>:
   1d3c4:	0543      	lsls	r3, r0, #21
   1d3c6:	d504      	bpl.n	1d3d2 <CC_HalClearInterruptBit+0xe>
   1d3c8:	4b04      	ldr	r3, [pc, #16]	; (1d3dc <CC_HalClearInterruptBit+0x18>)
   1d3ca:	f04f 32ff 	mov.w	r2, #4294967295
   1d3ce:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1d3d2:	4b02      	ldr	r3, [pc, #8]	; (1d3dc <CC_HalClearInterruptBit+0x18>)
   1d3d4:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   1d3d8:	4770      	bx	lr
   1d3da:	bf00      	nop
   1d3dc:	5002b000 	.word	0x5002b000

0001d3e0 <CC_HalMaskInterrupt>:
   1d3e0:	4b01      	ldr	r3, [pc, #4]	; (1d3e8 <CC_HalMaskInterrupt+0x8>)
   1d3e2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   1d3e6:	4770      	bx	lr
   1d3e8:	5002b000 	.word	0x5002b000

0001d3ec <CC_HalWaitInterrupt>:
   1d3ec:	b108      	cbz	r0, 1d3f2 <CC_HalWaitInterrupt+0x6>
   1d3ee:	f000 b86b 	b.w	1d4c8 <CC_PalWaitInterrupt>
   1d3f2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d3f6:	4770      	bx	lr

0001d3f8 <CC_HalWaitInterruptRND>:
   1d3f8:	b108      	cbz	r0, 1d3fe <CC_HalWaitInterruptRND+0x6>
   1d3fa:	f000 b84f 	b.w	1d49c <CC_PalWaitInterruptRND>
   1d3fe:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d402:	4770      	bx	lr

0001d404 <CC_PalInit>:
   1d404:	b510      	push	{r4, lr}
   1d406:	4811      	ldr	r0, [pc, #68]	; (1d44c <CC_PalInit+0x48>)
   1d408:	f000 f872 	bl	1d4f0 <CC_PalMutexCreate>
   1d40c:	b100      	cbz	r0, 1d410 <CC_PalInit+0xc>
   1d40e:	bd10      	pop	{r4, pc}
   1d410:	480f      	ldr	r0, [pc, #60]	; (1d450 <CC_PalInit+0x4c>)
   1d412:	f000 f86d 	bl	1d4f0 <CC_PalMutexCreate>
   1d416:	2800      	cmp	r0, #0
   1d418:	d1f9      	bne.n	1d40e <CC_PalInit+0xa>
   1d41a:	4c0e      	ldr	r4, [pc, #56]	; (1d454 <CC_PalInit+0x50>)
   1d41c:	4620      	mov	r0, r4
   1d41e:	f000 f867 	bl	1d4f0 <CC_PalMutexCreate>
   1d422:	2800      	cmp	r0, #0
   1d424:	d1f3      	bne.n	1d40e <CC_PalInit+0xa>
   1d426:	4b0c      	ldr	r3, [pc, #48]	; (1d458 <CC_PalInit+0x54>)
   1d428:	480c      	ldr	r0, [pc, #48]	; (1d45c <CC_PalInit+0x58>)
   1d42a:	601c      	str	r4, [r3, #0]
   1d42c:	f000 f860 	bl	1d4f0 <CC_PalMutexCreate>
   1d430:	4601      	mov	r1, r0
   1d432:	2800      	cmp	r0, #0
   1d434:	d1eb      	bne.n	1d40e <CC_PalInit+0xa>
   1d436:	f000 f82d 	bl	1d494 <CC_PalDmaInit>
   1d43a:	4604      	mov	r4, r0
   1d43c:	b108      	cbz	r0, 1d442 <CC_PalInit+0x3e>
   1d43e:	4620      	mov	r0, r4
   1d440:	bd10      	pop	{r4, pc}
   1d442:	f000 f87b 	bl	1d53c <CC_PalPowerSaveModeInit>
   1d446:	4620      	mov	r0, r4
   1d448:	e7fa      	b.n	1d440 <CC_PalInit+0x3c>
   1d44a:	bf00      	nop
   1d44c:	20000840 	.word	0x20000840
   1d450:	20000834 	.word	0x20000834
   1d454:	2000083c 	.word	0x2000083c
   1d458:	20000844 	.word	0x20000844
   1d45c:	20000838 	.word	0x20000838

0001d460 <CC_PalTerminate>:
   1d460:	b508      	push	{r3, lr}
   1d462:	4808      	ldr	r0, [pc, #32]	; (1d484 <CC_PalTerminate+0x24>)
   1d464:	f000 f84e 	bl	1d504 <CC_PalMutexDestroy>
   1d468:	4807      	ldr	r0, [pc, #28]	; (1d488 <CC_PalTerminate+0x28>)
   1d46a:	f000 f84b 	bl	1d504 <CC_PalMutexDestroy>
   1d46e:	4807      	ldr	r0, [pc, #28]	; (1d48c <CC_PalTerminate+0x2c>)
   1d470:	f000 f848 	bl	1d504 <CC_PalMutexDestroy>
   1d474:	4806      	ldr	r0, [pc, #24]	; (1d490 <CC_PalTerminate+0x30>)
   1d476:	f000 f845 	bl	1d504 <CC_PalMutexDestroy>
   1d47a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d47e:	f000 b80b 	b.w	1d498 <CC_PalDmaTerminate>
   1d482:	bf00      	nop
   1d484:	20000840 	.word	0x20000840
   1d488:	20000834 	.word	0x20000834
   1d48c:	2000083c 	.word	0x2000083c
   1d490:	20000838 	.word	0x20000838

0001d494 <CC_PalDmaInit>:
   1d494:	2000      	movs	r0, #0
   1d496:	4770      	bx	lr

0001d498 <CC_PalDmaTerminate>:
   1d498:	4770      	bx	lr
   1d49a:	bf00      	nop

0001d49c <CC_PalWaitInterruptRND>:
   1d49c:	b410      	push	{r4}
   1d49e:	4c09      	ldr	r4, [pc, #36]	; (1d4c4 <CC_PalWaitInterruptRND+0x28>)
   1d4a0:	4602      	mov	r2, r0
   1d4a2:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1d4a6:	4213      	tst	r3, r2
   1d4a8:	d0fb      	beq.n	1d4a2 <CC_PalWaitInterruptRND+0x6>
   1d4aa:	b121      	cbz	r1, 1d4b6 <CC_PalWaitInterruptRND+0x1a>
   1d4ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d4b0:	600b      	str	r3, [r1, #0]
   1d4b2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1d4b6:	4b03      	ldr	r3, [pc, #12]	; (1d4c4 <CC_PalWaitInterruptRND+0x28>)
   1d4b8:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   1d4bc:	2000      	movs	r0, #0
   1d4be:	bc10      	pop	{r4}
   1d4c0:	4770      	bx	lr
   1d4c2:	bf00      	nop
   1d4c4:	5002b000 	.word	0x5002b000

0001d4c8 <CC_PalWaitInterrupt>:
   1d4c8:	4a04      	ldr	r2, [pc, #16]	; (1d4dc <CC_PalWaitInterrupt+0x14>)
   1d4ca:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1d4ce:	4218      	tst	r0, r3
   1d4d0:	d0fb      	beq.n	1d4ca <CC_PalWaitInterrupt+0x2>
   1d4d2:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1d4d6:	2000      	movs	r0, #0
   1d4d8:	4770      	bx	lr
   1d4da:	bf00      	nop
   1d4dc:	5002b000 	.word	0x5002b000

0001d4e0 <CC_PalMemCopyPlat>:
   1d4e0:	f006 b9c2 	b.w	23868 <memmove>

0001d4e4 <CC_PalMemSetPlat>:
   1d4e4:	f006 b97e 	b.w	237e4 <memset>

0001d4e8 <CC_PalMemSetZeroPlat>:
   1d4e8:	460a      	mov	r2, r1
   1d4ea:	2100      	movs	r1, #0
   1d4ec:	f006 b97a 	b.w	237e4 <memset>

0001d4f0 <CC_PalMutexCreate>:
   1d4f0:	b508      	push	{r3, lr}
   1d4f2:	4b03      	ldr	r3, [pc, #12]	; (1d500 <CC_PalMutexCreate+0x10>)
   1d4f4:	6802      	ldr	r2, [r0, #0]
   1d4f6:	681b      	ldr	r3, [r3, #0]
   1d4f8:	6810      	ldr	r0, [r2, #0]
   1d4fa:	4798      	blx	r3
   1d4fc:	2000      	movs	r0, #0
   1d4fe:	bd08      	pop	{r3, pc}
   1d500:	200007f4 	.word	0x200007f4

0001d504 <CC_PalMutexDestroy>:
   1d504:	b508      	push	{r3, lr}
   1d506:	4b03      	ldr	r3, [pc, #12]	; (1d514 <CC_PalMutexDestroy+0x10>)
   1d508:	6802      	ldr	r2, [r0, #0]
   1d50a:	685b      	ldr	r3, [r3, #4]
   1d50c:	6810      	ldr	r0, [r2, #0]
   1d50e:	4798      	blx	r3
   1d510:	2000      	movs	r0, #0
   1d512:	bd08      	pop	{r3, pc}
   1d514:	200007f4 	.word	0x200007f4

0001d518 <CC_PalMutexLock>:
   1d518:	4b02      	ldr	r3, [pc, #8]	; (1d524 <CC_PalMutexLock+0xc>)
   1d51a:	6802      	ldr	r2, [r0, #0]
   1d51c:	689b      	ldr	r3, [r3, #8]
   1d51e:	6810      	ldr	r0, [r2, #0]
   1d520:	4718      	bx	r3
   1d522:	bf00      	nop
   1d524:	200007f4 	.word	0x200007f4

0001d528 <CC_PalMutexUnlock>:
   1d528:	b508      	push	{r3, lr}
   1d52a:	4b03      	ldr	r3, [pc, #12]	; (1d538 <CC_PalMutexUnlock+0x10>)
   1d52c:	6802      	ldr	r2, [r0, #0]
   1d52e:	68db      	ldr	r3, [r3, #12]
   1d530:	6810      	ldr	r0, [r2, #0]
   1d532:	4798      	blx	r3
   1d534:	2000      	movs	r0, #0
   1d536:	bd08      	pop	{r3, pc}
   1d538:	200007f4 	.word	0x200007f4

0001d53c <CC_PalPowerSaveModeInit>:
   1d53c:	b570      	push	{r4, r5, r6, lr}
   1d53e:	4c09      	ldr	r4, [pc, #36]	; (1d564 <CC_PalPowerSaveModeInit+0x28>)
   1d540:	4d09      	ldr	r5, [pc, #36]	; (1d568 <CC_PalPowerSaveModeInit+0x2c>)
   1d542:	6920      	ldr	r0, [r4, #16]
   1d544:	68ab      	ldr	r3, [r5, #8]
   1d546:	4798      	blx	r3
   1d548:	b118      	cbz	r0, 1d552 <CC_PalPowerSaveModeInit+0x16>
   1d54a:	4b08      	ldr	r3, [pc, #32]	; (1d56c <CC_PalPowerSaveModeInit+0x30>)
   1d54c:	4808      	ldr	r0, [pc, #32]	; (1d570 <CC_PalPowerSaveModeInit+0x34>)
   1d54e:	685b      	ldr	r3, [r3, #4]
   1d550:	4798      	blx	r3
   1d552:	4a08      	ldr	r2, [pc, #32]	; (1d574 <CC_PalPowerSaveModeInit+0x38>)
   1d554:	68eb      	ldr	r3, [r5, #12]
   1d556:	6920      	ldr	r0, [r4, #16]
   1d558:	2100      	movs	r1, #0
   1d55a:	6011      	str	r1, [r2, #0]
   1d55c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d560:	4718      	bx	r3
   1d562:	bf00      	nop
   1d564:	20000804 	.word	0x20000804
   1d568:	200007f4 	.word	0x200007f4
   1d56c:	200007e4 	.word	0x200007e4
   1d570:	00024714 	.word	0x00024714
   1d574:	20002fdc 	.word	0x20002fdc

0001d578 <CC_PalPowerSaveModeSelect>:
   1d578:	b570      	push	{r4, r5, r6, lr}
   1d57a:	4d1b      	ldr	r5, [pc, #108]	; (1d5e8 <CC_PalPowerSaveModeSelect+0x70>)
   1d57c:	4e1b      	ldr	r6, [pc, #108]	; (1d5ec <CC_PalPowerSaveModeSelect+0x74>)
   1d57e:	4604      	mov	r4, r0
   1d580:	68b2      	ldr	r2, [r6, #8]
   1d582:	6928      	ldr	r0, [r5, #16]
   1d584:	4790      	blx	r2
   1d586:	b9f8      	cbnz	r0, 1d5c8 <CC_PalPowerSaveModeSelect+0x50>
   1d588:	b15c      	cbz	r4, 1d5a2 <CC_PalPowerSaveModeSelect+0x2a>
   1d58a:	4c19      	ldr	r4, [pc, #100]	; (1d5f0 <CC_PalPowerSaveModeSelect+0x78>)
   1d58c:	6823      	ldr	r3, [r4, #0]
   1d58e:	b1b3      	cbz	r3, 1d5be <CC_PalPowerSaveModeSelect+0x46>
   1d590:	2b01      	cmp	r3, #1
   1d592:	d01b      	beq.n	1d5cc <CC_PalPowerSaveModeSelect+0x54>
   1d594:	3b01      	subs	r3, #1
   1d596:	6023      	str	r3, [r4, #0]
   1d598:	6928      	ldr	r0, [r5, #16]
   1d59a:	68f3      	ldr	r3, [r6, #12]
   1d59c:	4798      	blx	r3
   1d59e:	2000      	movs	r0, #0
   1d5a0:	bd70      	pop	{r4, r5, r6, pc}
   1d5a2:	4c13      	ldr	r4, [pc, #76]	; (1d5f0 <CC_PalPowerSaveModeSelect+0x78>)
   1d5a4:	6821      	ldr	r1, [r4, #0]
   1d5a6:	b941      	cbnz	r1, 1d5ba <CC_PalPowerSaveModeSelect+0x42>
   1d5a8:	4b12      	ldr	r3, [pc, #72]	; (1d5f4 <CC_PalPowerSaveModeSelect+0x7c>)
   1d5aa:	2201      	movs	r2, #1
   1d5ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1d5b0:	4a11      	ldr	r2, [pc, #68]	; (1d5f8 <CC_PalPowerSaveModeSelect+0x80>)
   1d5b2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d5b6:	2b00      	cmp	r3, #0
   1d5b8:	d1fb      	bne.n	1d5b2 <CC_PalPowerSaveModeSelect+0x3a>
   1d5ba:	3101      	adds	r1, #1
   1d5bc:	6021      	str	r1, [r4, #0]
   1d5be:	68f3      	ldr	r3, [r6, #12]
   1d5c0:	6928      	ldr	r0, [r5, #16]
   1d5c2:	4798      	blx	r3
   1d5c4:	2000      	movs	r0, #0
   1d5c6:	bd70      	pop	{r4, r5, r6, pc}
   1d5c8:	480c      	ldr	r0, [pc, #48]	; (1d5fc <CC_PalPowerSaveModeSelect+0x84>)
   1d5ca:	bd70      	pop	{r4, r5, r6, pc}
   1d5cc:	4a0a      	ldr	r2, [pc, #40]	; (1d5f8 <CC_PalPowerSaveModeSelect+0x80>)
   1d5ce:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1d5d2:	2b00      	cmp	r3, #0
   1d5d4:	d1fb      	bne.n	1d5ce <CC_PalPowerSaveModeSelect+0x56>
   1d5d6:	4a07      	ldr	r2, [pc, #28]	; (1d5f4 <CC_PalPowerSaveModeSelect+0x7c>)
   1d5d8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1d5dc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1d5e0:	f7ff fefe 	bl	1d3e0 <CC_HalMaskInterrupt>
   1d5e4:	6823      	ldr	r3, [r4, #0]
   1d5e6:	e7d5      	b.n	1d594 <CC_PalPowerSaveModeSelect+0x1c>
   1d5e8:	20000804 	.word	0x20000804
   1d5ec:	200007f4 	.word	0x200007f4
   1d5f0:	20002fdc 	.word	0x20002fdc
   1d5f4:	5002a000 	.word	0x5002a000
   1d5f8:	5002b000 	.word	0x5002b000
   1d5fc:	ffff8fe9 	.word	0xffff8fe9

0001d600 <mutex_init>:
   1d600:	4b01      	ldr	r3, [pc, #4]	; (1d608 <mutex_init+0x8>)
   1d602:	681b      	ldr	r3, [r3, #0]
   1d604:	4718      	bx	r3
   1d606:	bf00      	nop
   1d608:	200007f4 	.word	0x200007f4

0001d60c <mutex_lock>:
   1d60c:	4b01      	ldr	r3, [pc, #4]	; (1d614 <mutex_lock+0x8>)
   1d60e:	689b      	ldr	r3, [r3, #8]
   1d610:	4718      	bx	r3
   1d612:	bf00      	nop
   1d614:	200007f4 	.word	0x200007f4

0001d618 <mutex_unlock>:
   1d618:	4b01      	ldr	r3, [pc, #4]	; (1d620 <mutex_unlock+0x8>)
   1d61a:	68db      	ldr	r3, [r3, #12]
   1d61c:	4718      	bx	r3
   1d61e:	bf00      	nop
   1d620:	200007f4 	.word	0x200007f4

0001d624 <startTrngHW>:
   1d624:	2800      	cmp	r0, #0
   1d626:	f000 8084 	beq.w	1d732 <startTrngHW+0x10e>
   1d62a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d62e:	460c      	mov	r4, r1
   1d630:	b083      	sub	sp, #12
   1d632:	2900      	cmp	r1, #0
   1d634:	d078      	beq.n	1d728 <startTrngHW+0x104>
   1d636:	461d      	mov	r5, r3
   1d638:	2b00      	cmp	r3, #0
   1d63a:	d075      	beq.n	1d728 <startTrngHW+0x104>
   1d63c:	4607      	mov	r7, r0
   1d63e:	b11a      	cbz	r2, 1d648 <startTrngHW+0x24>
   1d640:	2201      	movs	r2, #1
   1d642:	2300      	movs	r3, #0
   1d644:	602a      	str	r2, [r5, #0]
   1d646:	6003      	str	r3, [r0, #0]
   1d648:	682b      	ldr	r3, [r5, #0]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d067      	beq.n	1d71e <startTrngHW+0xfa>
   1d64e:	4629      	mov	r1, r5
   1d650:	4620      	mov	r0, r4
   1d652:	f000 fded 	bl	1e230 <LLF_RND_GetFastestRosc>
   1d656:	4603      	mov	r3, r0
   1d658:	2800      	cmp	r0, #0
   1d65a:	d161      	bne.n	1d720 <startTrngHW+0xfc>
   1d65c:	6828      	ldr	r0, [r5, #0]
   1d65e:	4621      	mov	r1, r4
   1d660:	f000 fdc8 	bl	1e1f4 <LLF_RND_GetRoscSampleCnt>
   1d664:	4603      	mov	r3, r0
   1d666:	2800      	cmp	r0, #0
   1d668:	d15a      	bne.n	1d720 <startTrngHW+0xfc>
   1d66a:	682a      	ldr	r2, [r5, #0]
   1d66c:	2a08      	cmp	r2, #8
   1d66e:	d072      	beq.n	1d756 <startTrngHW+0x132>
   1d670:	2a04      	cmp	r2, #4
   1d672:	d073      	beq.n	1d75c <startTrngHW+0x138>
   1d674:	f1a2 0802 	sub.w	r8, r2, #2
   1d678:	fab8 f888 	clz	r8, r8
   1d67c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1d680:	4e38      	ldr	r6, [pc, #224]	; (1d764 <startTrngHW+0x140>)
   1d682:	2001      	movs	r0, #1
   1d684:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1d688:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   1d68c:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   1d690:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1d692:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   1d696:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   1d69a:	428a      	cmp	r2, r1
   1d69c:	d1f6      	bne.n	1d68c <startTrngHW+0x68>
   1d69e:	f04f 0900 	mov.w	r9, #0
   1d6a2:	9301      	str	r3, [sp, #4]
   1d6a4:	f04f 30ff 	mov.w	r0, #4294967295
   1d6a8:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   1d6ac:	f7ff fe8a 	bl	1d3c4 <CC_HalClearInterruptBit>
   1d6b0:	f06f 021b 	mvn.w	r2, #27
   1d6b4:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   1d6b8:	4648      	mov	r0, r9
   1d6ba:	f7ff fe91 	bl	1d3e0 <CC_HalMaskInterrupt>
   1d6be:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   1d6c2:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   1d6c6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d6ca:	f7ff fe89 	bl	1d3e0 <CC_HalMaskInterrupt>
   1d6ce:	220a      	movs	r2, #10
   1d6d0:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   1d6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d6d6:	2b01      	cmp	r3, #1
   1d6d8:	9b01      	ldr	r3, [sp, #4]
   1d6da:	d02d      	beq.n	1d738 <startTrngHW+0x114>
   1d6dc:	6922      	ldr	r2, [r4, #16]
   1d6de:	4922      	ldr	r1, [pc, #136]	; (1d768 <startTrngHW+0x144>)
   1d6e0:	fba1 1202 	umull	r1, r2, r1, r2
   1d6e4:	0912      	lsrs	r2, r2, #4
   1d6e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1d6e8:	fb01 f202 	mul.w	r2, r1, r2
   1d6ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1d6f0:	491c      	ldr	r1, [pc, #112]	; (1d764 <startTrngHW+0x140>)
   1d6f2:	03d2      	lsls	r2, r2, #15
   1d6f4:	0992      	lsrs	r2, r2, #6
   1d6f6:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   1d6fa:	2201      	movs	r2, #1
   1d6fc:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   1d700:	683a      	ldr	r2, [r7, #0]
   1d702:	6829      	ldr	r1, [r5, #0]
   1d704:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d708:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1d70c:	603a      	str	r2, [r7, #0]
   1d70e:	6829      	ldr	r1, [r5, #0]
   1d710:	4618      	mov	r0, r3
   1d712:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d716:	603a      	str	r2, [r7, #0]
   1d718:	b003      	add	sp, #12
   1d71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d71e:	4b13      	ldr	r3, [pc, #76]	; (1d76c <startTrngHW+0x148>)
   1d720:	4618      	mov	r0, r3
   1d722:	b003      	add	sp, #12
   1d724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d728:	4b11      	ldr	r3, [pc, #68]	; (1d770 <startTrngHW+0x14c>)
   1d72a:	4618      	mov	r0, r3
   1d72c:	b003      	add	sp, #12
   1d72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d732:	4b0f      	ldr	r3, [pc, #60]	; (1d770 <startTrngHW+0x14c>)
   1d734:	4618      	mov	r0, r3
   1d736:	4770      	bx	lr
   1d738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d73c:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   1d740:	3101      	adds	r1, #1
   1d742:	d006      	beq.n	1d752 <startTrngHW+0x12e>
   1d744:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   1d748:	4907      	ldr	r1, [pc, #28]	; (1d768 <startTrngHW+0x144>)
   1d74a:	fba1 1202 	umull	r1, r2, r1, r2
   1d74e:	0912      	lsrs	r2, r2, #4
   1d750:	e7c9      	b.n	1d6e6 <startTrngHW+0xc2>
   1d752:	2216      	movs	r2, #22
   1d754:	e7c7      	b.n	1d6e6 <startTrngHW+0xc2>
   1d756:	f04f 0803 	mov.w	r8, #3
   1d75a:	e791      	b.n	1d680 <startTrngHW+0x5c>
   1d75c:	f04f 0802 	mov.w	r8, #2
   1d760:	e78e      	b.n	1d680 <startTrngHW+0x5c>
   1d762:	bf00      	nop
   1d764:	5002b000 	.word	0x5002b000
   1d768:	aaaaaaab 	.word	0xaaaaaaab
   1d76c:	00f10c31 	.word	0x00f10c31
   1d770:	00f10c35 	.word	0x00f10c35

0001d774 <LLF_RND_RepetitionCounterTest.part.0>:
   1d774:	b570      	push	{r4, r5, r6, lr}
   1d776:	00c9      	lsls	r1, r1, #3
   1d778:	2400      	movs	r4, #0
   1d77a:	1e4e      	subs	r6, r1, #1
   1d77c:	f04f 0c01 	mov.w	ip, #1
   1d780:	4625      	mov	r5, r4
   1d782:	46a6      	mov	lr, r4
   1d784:	e008      	b.n	1d798 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   1d786:	459e      	cmp	lr, r3
   1d788:	d015      	beq.n	1d7b6 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   1d78a:	2501      	movs	r5, #1
   1d78c:	45b4      	cmp	ip, r6
   1d78e:	d817      	bhi.n	1d7c0 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   1d790:	3401      	adds	r4, #1
   1d792:	f10c 0c01 	add.w	ip, ip, #1
   1d796:	469e      	mov	lr, r3
   1d798:	0963      	lsrs	r3, r4, #5
   1d79a:	f004 011f 	and.w	r1, r4, #31
   1d79e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d7a2:	291f      	cmp	r1, #31
   1d7a4:	fa23 f301 	lsr.w	r3, r3, r1
   1d7a8:	bf18      	it	ne
   1d7aa:	f003 0301 	andne.w	r3, r3, #1
   1d7ae:	2c00      	cmp	r4, #0
   1d7b0:	d1e9      	bne.n	1d786 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1d7b2:	2501      	movs	r5, #1
   1d7b4:	e7ec      	b.n	1d790 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1d7b6:	3501      	adds	r5, #1
   1d7b8:	4295      	cmp	r5, r2
   1d7ba:	d1e7      	bne.n	1d78c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1d7bc:	4801      	ldr	r0, [pc, #4]	; (1d7c4 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   1d7be:	bd70      	pop	{r4, r5, r6, pc}
   1d7c0:	2000      	movs	r0, #0
   1d7c2:	bd70      	pop	{r4, r5, r6, pc}
   1d7c4:	00f10c36 	.word	0x00f10c36

0001d7c8 <LLF_RND_AdaptiveProportionTest>:
   1d7c8:	2800      	cmp	r0, #0
   1d7ca:	d03f      	beq.n	1d84c <LLF_RND_AdaptiveProportionTest+0x84>
   1d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d7d0:	1e4c      	subs	r4, r1, #1
   1d7d2:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1d7d6:	d228      	bcs.n	1d82a <LLF_RND_AdaptiveProportionTest+0x62>
   1d7d8:	b33b      	cbz	r3, 1d82a <LLF_RND_AdaptiveProportionTest+0x62>
   1d7da:	b332      	cbz	r2, 1d82a <LLF_RND_AdaptiveProportionTest+0x62>
   1d7dc:	f04f 0e00 	mov.w	lr, #0
   1d7e0:	00cf      	lsls	r7, r1, #3
   1d7e2:	4676      	mov	r6, lr
   1d7e4:	4675      	mov	r5, lr
   1d7e6:	4674      	mov	r4, lr
   1d7e8:	f103 38ff 	add.w	r8, r3, #4294967295
   1d7ec:	0961      	lsrs	r1, r4, #5
   1d7ee:	f004 0c1f 	and.w	ip, r4, #31
   1d7f2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1d7f6:	f1bc 0f1f 	cmp.w	ip, #31
   1d7fa:	fa21 f10c 	lsr.w	r1, r1, ip
   1d7fe:	bf18      	it	ne
   1d800:	f001 0101 	andne.w	r1, r1, #1
   1d804:	b1a4      	cbz	r4, 1d830 <LLF_RND_AdaptiveProportionTest+0x68>
   1d806:	42ab      	cmp	r3, r5
   1d808:	d018      	beq.n	1d83c <LLF_RND_AdaptiveProportionTest+0x74>
   1d80a:	428e      	cmp	r6, r1
   1d80c:	bf08      	it	eq
   1d80e:	f10e 0e01 	addeq.w	lr, lr, #1
   1d812:	45a8      	cmp	r8, r5
   1d814:	d015      	beq.n	1d842 <LLF_RND_AdaptiveProportionTest+0x7a>
   1d816:	3501      	adds	r5, #1
   1d818:	4631      	mov	r1, r6
   1d81a:	3401      	adds	r4, #1
   1d81c:	42bc      	cmp	r4, r7
   1d81e:	d001      	beq.n	1d824 <LLF_RND_AdaptiveProportionTest+0x5c>
   1d820:	460e      	mov	r6, r1
   1d822:	e7e3      	b.n	1d7ec <LLF_RND_AdaptiveProportionTest+0x24>
   1d824:	2000      	movs	r0, #0
   1d826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d82a:	4809      	ldr	r0, [pc, #36]	; (1d850 <LLF_RND_AdaptiveProportionTest+0x88>)
   1d82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d830:	f04f 0e01 	mov.w	lr, #1
   1d834:	4674      	mov	r4, lr
   1d836:	4675      	mov	r5, lr
   1d838:	460e      	mov	r6, r1
   1d83a:	e7d7      	b.n	1d7ec <LLF_RND_AdaptiveProportionTest+0x24>
   1d83c:	2501      	movs	r5, #1
   1d83e:	46ae      	mov	lr, r5
   1d840:	e7eb      	b.n	1d81a <LLF_RND_AdaptiveProportionTest+0x52>
   1d842:	4572      	cmp	r2, lr
   1d844:	d3f1      	bcc.n	1d82a <LLF_RND_AdaptiveProportionTest+0x62>
   1d846:	4631      	mov	r1, r6
   1d848:	461d      	mov	r5, r3
   1d84a:	e7e6      	b.n	1d81a <LLF_RND_AdaptiveProportionTest+0x52>
   1d84c:	4800      	ldr	r0, [pc, #0]	; (1d850 <LLF_RND_AdaptiveProportionTest+0x88>)
   1d84e:	4770      	bx	lr
   1d850:	00f10c37 	.word	0x00f10c37

0001d854 <getTrngSource>:
   1d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d858:	b091      	sub	sp, #68	; 0x44
   1d85a:	460d      	mov	r5, r1
   1d85c:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1d860:	4681      	mov	r9, r0
   1d862:	2900      	cmp	r1, #0
   1d864:	d14c      	bne.n	1d900 <getTrngSource+0xac>
   1d866:	6928      	ldr	r0, [r5, #16]
   1d868:	9006      	str	r0, [sp, #24]
   1d86a:	981a      	ldr	r0, [sp, #104]	; 0x68
   1d86c:	601c      	str	r4, [r3, #0]
   1d86e:	2300      	movs	r3, #0
   1d870:	6003      	str	r3, [r0, #0]
   1d872:	2a00      	cmp	r2, #0
   1d874:	f000 8124 	beq.w	1dac0 <getTrngSource+0x26c>
   1d878:	4b9d      	ldr	r3, [pc, #628]	; (1daf0 <getTrngSource+0x29c>)
   1d87a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1d87c:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1d880:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1d884:	429a      	cmp	r2, r3
   1d886:	d147      	bne.n	1d918 <getTrngSource+0xc4>
   1d888:	290a      	cmp	r1, #10
   1d88a:	d145      	bne.n	1d918 <getTrngSource+0xc4>
   1d88c:	f899 3003 	ldrb.w	r3, [r9, #3]
   1d890:	9308      	str	r3, [sp, #32]
   1d892:	f104 0308 	add.w	r3, r4, #8
   1d896:	9a06      	ldr	r2, [sp, #24]
   1d898:	9307      	str	r3, [sp, #28]
   1d89a:	4b96      	ldr	r3, [pc, #600]	; (1daf4 <getTrngSource+0x2a0>)
   1d89c:	4c94      	ldr	r4, [pc, #592]	; (1daf0 <getTrngSource+0x29c>)
   1d89e:	fba3 1302 	umull	r1, r3, r3, r2
   1d8a2:	089b      	lsrs	r3, r3, #2
   1d8a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d8a8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   1d8ac:	9303      	str	r3, [sp, #12]
   1d8ae:	2304      	movs	r3, #4
   1d8b0:	9305      	str	r3, [sp, #20]
   1d8b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1d8b4:	9e06      	ldr	r6, [sp, #24]
   1d8b6:	601e      	str	r6, [r3, #0]
   1d8b8:	2e00      	cmp	r6, #0
   1d8ba:	d033      	beq.n	1d924 <getTrngSource+0xd0>
   1d8bc:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1d8c0:	2700      	movs	r7, #0
   1d8c2:	f04f 0a01 	mov.w	sl, #1
   1d8c6:	f000 fcc3 	bl	1e250 <LLF_RND_TurnOffTrng>
   1d8ca:	2300      	movs	r3, #0
   1d8cc:	9309      	str	r3, [sp, #36]	; 0x24
   1d8ce:	f1b9 0f00 	cmp.w	r9, #0
   1d8d2:	f000 80df 	beq.w	1da94 <getTrngSource+0x240>
   1d8d6:	2d00      	cmp	r5, #0
   1d8d8:	f000 80dc 	beq.w	1da94 <getTrngSource+0x240>
   1d8dc:	9b08      	ldr	r3, [sp, #32]
   1d8de:	b1eb      	cbz	r3, 1d91c <getTrngSource+0xc8>
   1d8e0:	a908      	add	r1, sp, #32
   1d8e2:	4628      	mov	r0, r5
   1d8e4:	f000 fca4 	bl	1e230 <LLF_RND_GetFastestRosc>
   1d8e8:	2800      	cmp	r0, #0
   1d8ea:	d03e      	beq.n	1d96a <getTrngSource+0x116>
   1d8ec:	4b82      	ldr	r3, [pc, #520]	; (1daf8 <getTrngSource+0x2a4>)
   1d8ee:	4298      	cmp	r0, r3
   1d8f0:	d118      	bne.n	1d924 <getTrngSource+0xd0>
   1d8f2:	9003      	str	r0, [sp, #12]
   1d8f4:	f000 fcac 	bl	1e250 <LLF_RND_TurnOffTrng>
   1d8f8:	9803      	ldr	r0, [sp, #12]
   1d8fa:	b011      	add	sp, #68	; 0x44
   1d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d900:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1d904:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   1d908:	3601      	adds	r6, #1
   1d90a:	bf14      	ite	ne
   1d90c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   1d910:	f44f 7004 	moveq.w	r0, #528	; 0x210
   1d914:	9006      	str	r0, [sp, #24]
   1d916:	e7a8      	b.n	1d86a <getTrngSource+0x16>
   1d918:	4878      	ldr	r0, [pc, #480]	; (1dafc <getTrngSource+0x2a8>)
   1d91a:	e7ea      	b.n	1d8f2 <getTrngSource+0x9e>
   1d91c:	4878      	ldr	r0, [pc, #480]	; (1db00 <getTrngSource+0x2ac>)
   1d91e:	4b76      	ldr	r3, [pc, #472]	; (1daf8 <getTrngSource+0x2a4>)
   1d920:	4298      	cmp	r0, r3
   1d922:	d0e6      	beq.n	1d8f2 <getTrngSource+0x9e>
   1d924:	9b08      	ldr	r3, [sp, #32]
   1d926:	2b08      	cmp	r3, #8
   1d928:	f000 80c8 	beq.w	1dabc <getTrngSource+0x268>
   1d92c:	005b      	lsls	r3, r3, #1
   1d92e:	2200      	movs	r2, #0
   1d930:	9308      	str	r3, [sp, #32]
   1d932:	9200      	str	r2, [sp, #0]
   1d934:	ab08      	add	r3, sp, #32
   1d936:	4629      	mov	r1, r5
   1d938:	4648      	mov	r0, r9
   1d93a:	f7ff fe73 	bl	1d624 <startTrngHW>
   1d93e:	4b70      	ldr	r3, [pc, #448]	; (1db00 <getTrngSource+0x2ac>)
   1d940:	4298      	cmp	r0, r3
   1d942:	f000 80b7 	beq.w	1dab4 <getTrngSource+0x260>
   1d946:	2800      	cmp	r0, #0
   1d948:	d1d3      	bne.n	1d8f2 <getTrngSource+0x9e>
   1d94a:	f8d9 2000 	ldr.w	r2, [r9]
   1d94e:	0a13      	lsrs	r3, r2, #8
   1d950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1d954:	4313      	orrs	r3, r2
   1d956:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d95a:	f8c9 3000 	str.w	r3, [r9]
   1d95e:	9b05      	ldr	r3, [sp, #20]
   1d960:	3b01      	subs	r3, #1
   1d962:	9305      	str	r3, [sp, #20]
   1d964:	d1a5      	bne.n	1d8b2 <getTrngSource+0x5e>
   1d966:	2000      	movs	r0, #0
   1d968:	e7c3      	b.n	1d8f2 <getTrngSource+0x9e>
   1d96a:	9808      	ldr	r0, [sp, #32]
   1d96c:	4629      	mov	r1, r5
   1d96e:	f000 fc41 	bl	1e1f4 <LLF_RND_GetRoscSampleCnt>
   1d972:	2800      	cmp	r0, #0
   1d974:	d1ba      	bne.n	1d8ec <getTrngSource+0x98>
   1d976:	9b08      	ldr	r3, [sp, #32]
   1d978:	2b08      	cmp	r3, #8
   1d97a:	f000 8095 	beq.w	1daa8 <getTrngSource+0x254>
   1d97e:	2b04      	cmp	r3, #4
   1d980:	f000 8095 	beq.w	1daae <getTrngSource+0x25a>
   1d984:	f1a3 0302 	sub.w	r3, r3, #2
   1d988:	fab3 f383 	clz	r3, r3
   1d98c:	095b      	lsrs	r3, r3, #5
   1d98e:	9304      	str	r3, [sp, #16]
   1d990:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1d994:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   1d998:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   1d99c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1d99e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   1d9a2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1d9a6:	4293      	cmp	r3, r2
   1d9a8:	d1f6      	bne.n	1d998 <getTrngSource+0x144>
   1d9aa:	f04f 0b00 	mov.w	fp, #0
   1d9ae:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   1d9b2:	f04f 30ff 	mov.w	r0, #4294967295
   1d9b6:	f7ff fd05 	bl	1d3c4 <CC_HalClearInterruptBit>
   1d9ba:	f06f 031b 	mvn.w	r3, #27
   1d9be:	4658      	mov	r0, fp
   1d9c0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d9c4:	f7ff fd0c 	bl	1d3e0 <CC_HalMaskInterrupt>
   1d9c8:	9b04      	ldr	r3, [sp, #16]
   1d9ca:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   1d9ce:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   1d9d2:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1d9d6:	f7ff fd03 	bl	1d3e0 <CC_HalMaskInterrupt>
   1d9da:	230a      	movs	r3, #10
   1d9dc:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   1d9e0:	692b      	ldr	r3, [r5, #16]
   1d9e2:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1d9e6:	fbab 2303 	umull	r2, r3, fp, r3
   1d9ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1d9ec:	091b      	lsrs	r3, r3, #4
   1d9ee:	fb02 f303 	mul.w	r3, r2, r3
   1d9f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d9f6:	03db      	lsls	r3, r3, #15
   1d9f8:	099b      	lsrs	r3, r3, #6
   1d9fa:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   1d9fe:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   1da02:	9908      	ldr	r1, [sp, #32]
   1da04:	f8d9 2000 	ldr.w	r2, [r9]
   1da08:	020b      	lsls	r3, r1, #8
   1da0a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1da0e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1da12:	4313      	orrs	r3, r2
   1da14:	f8c9 3000 	str.w	r3, [r9]
   1da18:	a809      	add	r0, sp, #36	; 0x24
   1da1a:	f000 fbdb 	bl	1e1d4 <LLF_RND_WaitRngInterrupt>
   1da1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1da20:	f003 031a 	and.w	r3, r3, #26
   1da24:	4303      	orrs	r3, r0
   1da26:	f47f af7d 	bne.w	1d924 <getTrngSource+0xd0>
   1da2a:	fbab 3b06 	umull	r3, fp, fp, r6
   1da2e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1da32:	930a      	str	r3, [sp, #40]	; 0x28
   1da34:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1da38:	930b      	str	r3, [sp, #44]	; 0x2c
   1da3a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1da3e:	930c      	str	r3, [sp, #48]	; 0x30
   1da40:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1da44:	930d      	str	r3, [sp, #52]	; 0x34
   1da46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1da4a:	930e      	str	r3, [sp, #56]	; 0x38
   1da4c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1da50:	930f      	str	r3, [sp, #60]	; 0x3c
   1da52:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   1da56:	d101      	bne.n	1da5c <getTrngSource+0x208>
   1da58:	9b03      	ldr	r3, [sp, #12]
   1da5a:	b9eb      	cbnz	r3, 1da98 <getTrngSource+0x244>
   1da5c:	4640      	mov	r0, r8
   1da5e:	2218      	movs	r2, #24
   1da60:	a90a      	add	r1, sp, #40	; 0x28
   1da62:	3e18      	subs	r6, #24
   1da64:	f108 0818 	add.w	r8, r8, #24
   1da68:	f7ff fd3a 	bl	1d4e0 <CC_PalMemCopyPlat>
   1da6c:	3701      	adds	r7, #1
   1da6e:	2e00      	cmp	r6, #0
   1da70:	f47f af29 	bne.w	1d8c6 <getTrngSource+0x72>
   1da74:	9b06      	ldr	r3, [sp, #24]
   1da76:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   1da7a:	d836      	bhi.n	1daea <getTrngSource+0x296>
   1da7c:	9e07      	ldr	r6, [sp, #28]
   1da7e:	696a      	ldr	r2, [r5, #20]
   1da80:	4619      	mov	r1, r3
   1da82:	4630      	mov	r0, r6
   1da84:	461f      	mov	r7, r3
   1da86:	f7ff fe75 	bl	1d774 <LLF_RND_RepetitionCounterTest.part.0>
   1da8a:	b320      	cbz	r0, 1dad6 <getTrngSource+0x282>
   1da8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1da8e:	2300      	movs	r3, #0
   1da90:	6013      	str	r3, [r2, #0]
   1da92:	e72b      	b.n	1d8ec <getTrngSource+0x98>
   1da94:	481b      	ldr	r0, [pc, #108]	; (1db04 <getTrngSource+0x2b0>)
   1da96:	e729      	b.n	1d8ec <getTrngSource+0x98>
   1da98:	4640      	mov	r0, r8
   1da9a:	461a      	mov	r2, r3
   1da9c:	a90a      	add	r1, sp, #40	; 0x28
   1da9e:	1af6      	subs	r6, r6, r3
   1daa0:	4498      	add	r8, r3
   1daa2:	f7ff fd1d 	bl	1d4e0 <CC_PalMemCopyPlat>
   1daa6:	e7e1      	b.n	1da6c <getTrngSource+0x218>
   1daa8:	2303      	movs	r3, #3
   1daaa:	9304      	str	r3, [sp, #16]
   1daac:	e770      	b.n	1d990 <getTrngSource+0x13c>
   1daae:	2302      	movs	r3, #2
   1dab0:	9304      	str	r3, [sp, #16]
   1dab2:	e76d      	b.n	1d990 <getTrngSource+0x13c>
   1dab4:	6a2b      	ldr	r3, [r5, #32]
   1dab6:	2b00      	cmp	r3, #0
   1dab8:	f43f af1b 	beq.w	1d8f2 <getTrngSource+0x9e>
   1dabc:	4812      	ldr	r0, [pc, #72]	; (1db08 <getTrngSource+0x2b4>)
   1dabe:	e718      	b.n	1d8f2 <getTrngSource+0x9e>
   1dac0:	9100      	str	r1, [sp, #0]
   1dac2:	ab08      	add	r3, sp, #32
   1dac4:	2201      	movs	r2, #1
   1dac6:	4629      	mov	r1, r5
   1dac8:	4648      	mov	r0, r9
   1daca:	f7ff fdab 	bl	1d624 <startTrngHW>
   1dace:	2800      	cmp	r0, #0
   1dad0:	f43f aedf 	beq.w	1d892 <getTrngSource+0x3e>
   1dad4:	e70d      	b.n	1d8f2 <getTrngSource+0x9e>
   1dad6:	69aa      	ldr	r2, [r5, #24]
   1dad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1dadc:	4639      	mov	r1, r7
   1dade:	4630      	mov	r0, r6
   1dae0:	f7ff fe72 	bl	1d7c8 <LLF_RND_AdaptiveProportionTest>
   1dae4:	2800      	cmp	r0, #0
   1dae6:	d1d1      	bne.n	1da8c <getTrngSource+0x238>
   1dae8:	e73d      	b.n	1d966 <getTrngSource+0x112>
   1daea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1daec:	601e      	str	r6, [r3, #0]
   1daee:	e719      	b.n	1d924 <getTrngSource+0xd0>
   1daf0:	5002b000 	.word	0x5002b000
   1daf4:	aaaaaaab 	.word	0xaaaaaaab
   1daf8:	00f10c02 	.word	0x00f10c02
   1dafc:	00f10c30 	.word	0x00f10c30
   1db00:	00f10c31 	.word	0x00f10c31
   1db04:	00f10c35 	.word	0x00f10c35
   1db08:	00f10c32 	.word	0x00f10c32

0001db0c <LLF_RND_GetTrngSource>:
   1db0c:	b410      	push	{r4}
   1db0e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   1db12:	9401      	str	r4, [sp, #4]
   1db14:	9c03      	ldr	r4, [sp, #12]
   1db16:	9402      	str	r4, [sp, #8]
   1db18:	2400      	movs	r4, #0
   1db1a:	9403      	str	r4, [sp, #12]
   1db1c:	bc10      	pop	{r4}
   1db1e:	f7ff be99 	b.w	1d854 <getTrngSource>
   1db22:	bf00      	nop

0001db24 <LLF_RND_RunTrngStartupTest>:
   1db24:	b510      	push	{r4, lr}
   1db26:	b086      	sub	sp, #24
   1db28:	ab05      	add	r3, sp, #20
   1db2a:	2401      	movs	r4, #1
   1db2c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1db30:	9300      	str	r3, [sp, #0]
   1db32:	2200      	movs	r2, #0
   1db34:	ab04      	add	r3, sp, #16
   1db36:	f7ff fe8d 	bl	1d854 <getTrngSource>
   1db3a:	b006      	add	sp, #24
   1db3c:	bd10      	pop	{r4, pc}
   1db3e:	bf00      	nop

0001db40 <mbedtls_hardware_poll>:
   1db40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db42:	b089      	sub	sp, #36	; 0x24
   1db44:	9205      	str	r2, [sp, #20]
   1db46:	2900      	cmp	r1, #0
   1db48:	d064      	beq.n	1dc14 <mbedtls_hardware_poll+0xd4>
   1db4a:	461c      	mov	r4, r3
   1db4c:	2b00      	cmp	r3, #0
   1db4e:	d061      	beq.n	1dc14 <mbedtls_hardware_poll+0xd4>
   1db50:	4615      	mov	r5, r2
   1db52:	2a00      	cmp	r2, #0
   1db54:	d05e      	beq.n	1dc14 <mbedtls_hardware_poll+0xd4>
   1db56:	4f31      	ldr	r7, [pc, #196]	; (1dc1c <mbedtls_hardware_poll+0xdc>)
   1db58:	460e      	mov	r6, r1
   1db5a:	6838      	ldr	r0, [r7, #0]
   1db5c:	f04f 31ff 	mov.w	r1, #4294967295
   1db60:	f7ff fcda 	bl	1d518 <CC_PalMutexLock>
   1db64:	2800      	cmp	r0, #0
   1db66:	d14b      	bne.n	1dc00 <mbedtls_hardware_poll+0xc0>
   1db68:	2000      	movs	r0, #0
   1db6a:	f7ff fd05 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1db6e:	2800      	cmp	r0, #0
   1db70:	d142      	bne.n	1dbf8 <mbedtls_hardware_poll+0xb8>
   1db72:	482b      	ldr	r0, [pc, #172]	; (1dc20 <mbedtls_hardware_poll+0xe0>)
   1db74:	f000 fa9e 	bl	1e0b4 <RNG_PLAT_SetUserRngParameters>
   1db78:	b1d8      	cbz	r0, 1dbb2 <mbedtls_hardware_poll+0x72>
   1db7a:	2001      	movs	r0, #1
   1db7c:	f04f 36ff 	mov.w	r6, #4294967295
   1db80:	f7ff fcfa 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1db84:	2800      	cmp	r0, #0
   1db86:	d133      	bne.n	1dbf0 <mbedtls_hardware_poll+0xb0>
   1db88:	4826      	ldr	r0, [pc, #152]	; (1dc24 <mbedtls_hardware_poll+0xe4>)
   1db8a:	f44f 7108 	mov.w	r1, #544	; 0x220
   1db8e:	f7fe fe6d 	bl	1c86c <mbedtls_zeroize_internal>
   1db92:	4825      	ldr	r0, [pc, #148]	; (1dc28 <mbedtls_hardware_poll+0xe8>)
   1db94:	2104      	movs	r1, #4
   1db96:	f7fe fe69 	bl	1c86c <mbedtls_zeroize_internal>
   1db9a:	4821      	ldr	r0, [pc, #132]	; (1dc20 <mbedtls_hardware_poll+0xe0>)
   1db9c:	2128      	movs	r1, #40	; 0x28
   1db9e:	f7fe fe65 	bl	1c86c <mbedtls_zeroize_internal>
   1dba2:	6838      	ldr	r0, [r7, #0]
   1dba4:	f7ff fcc0 	bl	1d528 <CC_PalMutexUnlock>
   1dba8:	2800      	cmp	r0, #0
   1dbaa:	d12d      	bne.n	1dc08 <mbedtls_hardware_poll+0xc8>
   1dbac:	4630      	mov	r0, r6
   1dbae:	b009      	add	sp, #36	; 0x24
   1dbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dbb2:	4b1c      	ldr	r3, [pc, #112]	; (1dc24 <mbedtls_hardware_poll+0xe4>)
   1dbb4:	9302      	str	r3, [sp, #8]
   1dbb6:	ab07      	add	r3, sp, #28
   1dbb8:	9003      	str	r0, [sp, #12]
   1dbba:	4602      	mov	r2, r0
   1dbbc:	9300      	str	r3, [sp, #0]
   1dbbe:	4918      	ldr	r1, [pc, #96]	; (1dc20 <mbedtls_hardware_poll+0xe0>)
   1dbc0:	4819      	ldr	r0, [pc, #100]	; (1dc28 <mbedtls_hardware_poll+0xe8>)
   1dbc2:	9401      	str	r4, [sp, #4]
   1dbc4:	ab05      	add	r3, sp, #20
   1dbc6:	f7ff ffa1 	bl	1db0c <LLF_RND_GetTrngSource>
   1dbca:	4603      	mov	r3, r0
   1dbcc:	2800      	cmp	r0, #0
   1dbce:	d1d4      	bne.n	1db7a <mbedtls_hardware_poll+0x3a>
   1dbd0:	6822      	ldr	r2, [r4, #0]
   1dbd2:	42aa      	cmp	r2, r5
   1dbd4:	d3d1      	bcc.n	1db7a <mbedtls_hardware_poll+0x3a>
   1dbd6:	9907      	ldr	r1, [sp, #28]
   1dbd8:	4630      	mov	r0, r6
   1dbda:	3108      	adds	r1, #8
   1dbdc:	462a      	mov	r2, r5
   1dbde:	461e      	mov	r6, r3
   1dbe0:	f7ff fc7e 	bl	1d4e0 <CC_PalMemCopyPlat>
   1dbe4:	6025      	str	r5, [r4, #0]
   1dbe6:	2001      	movs	r0, #1
   1dbe8:	f7ff fcc6 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1dbec:	2800      	cmp	r0, #0
   1dbee:	d0cb      	beq.n	1db88 <mbedtls_hardware_poll+0x48>
   1dbf0:	480e      	ldr	r0, [pc, #56]	; (1dc2c <mbedtls_hardware_poll+0xec>)
   1dbf2:	f7fe fd3d 	bl	1c670 <CC_PalAbort>
   1dbf6:	e7c7      	b.n	1db88 <mbedtls_hardware_poll+0x48>
   1dbf8:	480d      	ldr	r0, [pc, #52]	; (1dc30 <mbedtls_hardware_poll+0xf0>)
   1dbfa:	f7fe fd39 	bl	1c670 <CC_PalAbort>
   1dbfe:	e7b8      	b.n	1db72 <mbedtls_hardware_poll+0x32>
   1dc00:	480c      	ldr	r0, [pc, #48]	; (1dc34 <mbedtls_hardware_poll+0xf4>)
   1dc02:	f7fe fd35 	bl	1c670 <CC_PalAbort>
   1dc06:	e7af      	b.n	1db68 <mbedtls_hardware_poll+0x28>
   1dc08:	480b      	ldr	r0, [pc, #44]	; (1dc38 <mbedtls_hardware_poll+0xf8>)
   1dc0a:	f7fe fd31 	bl	1c670 <CC_PalAbort>
   1dc0e:	4630      	mov	r0, r6
   1dc10:	b009      	add	sp, #36	; 0x24
   1dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc14:	f04f 36ff 	mov.w	r6, #4294967295
   1dc18:	e7c8      	b.n	1dbac <mbedtls_hardware_poll+0x6c>
   1dc1a:	bf00      	nop
   1dc1c:	20000844 	.word	0x20000844
   1dc20:	20003204 	.word	0x20003204
   1dc24:	20002fe4 	.word	0x20002fe4
   1dc28:	20002fe0 	.word	0x20002fe0
   1dc2c:	000246dc 	.word	0x000246dc
   1dc30:	000246bc 	.word	0x000246bc
   1dc34:	000246a4 	.word	0x000246a4
   1dc38:	00024734 	.word	0x00024734

0001dc3c <cc_mbedtls_aes_init>:
   1dc3c:	b510      	push	{r4, lr}
   1dc3e:	4604      	mov	r4, r0
   1dc40:	b130      	cbz	r0, 1dc50 <cc_mbedtls_aes_init+0x14>
   1dc42:	2200      	movs	r2, #0
   1dc44:	2301      	movs	r3, #1
   1dc46:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1dc4a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1dc4e:	bd10      	pop	{r4, pc}
   1dc50:	4801      	ldr	r0, [pc, #4]	; (1dc58 <cc_mbedtls_aes_init+0x1c>)
   1dc52:	f7fe fd0d 	bl	1c670 <CC_PalAbort>
   1dc56:	e7f4      	b.n	1dc42 <cc_mbedtls_aes_init+0x6>
   1dc58:	0002474c 	.word	0x0002474c

0001dc5c <cc_mbedtls_aes_free>:
   1dc5c:	b118      	cbz	r0, 1dc66 <cc_mbedtls_aes_free+0xa>
   1dc5e:	2274      	movs	r2, #116	; 0x74
   1dc60:	2100      	movs	r1, #0
   1dc62:	f7ff bc3f 	b.w	1d4e4 <CC_PalMemSetPlat>
   1dc66:	4770      	bx	lr

0001dc68 <cc_mbedtls_aes_setkey_enc>:
   1dc68:	b190      	cbz	r0, 1dc90 <cc_mbedtls_aes_setkey_enc+0x28>
   1dc6a:	b1a1      	cbz	r1, 1dc96 <cc_mbedtls_aes_setkey_enc+0x2e>
   1dc6c:	b510      	push	{r4, lr}
   1dc6e:	2a80      	cmp	r2, #128	; 0x80
   1dc70:	f04f 0400 	mov.w	r4, #0
   1dc74:	6384      	str	r4, [r0, #56]	; 0x38
   1dc76:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1dc7a:	d106      	bne.n	1dc8a <cc_mbedtls_aes_setkey_enc+0x22>
   1dc7c:	2210      	movs	r2, #16
   1dc7e:	6304      	str	r4, [r0, #48]	; 0x30
   1dc80:	4410      	add	r0, r2
   1dc82:	f7ff fc2d 	bl	1d4e0 <CC_PalMemCopyPlat>
   1dc86:	4620      	mov	r0, r4
   1dc88:	bd10      	pop	{r4, pc}
   1dc8a:	f06f 001f 	mvn.w	r0, #31
   1dc8e:	bd10      	pop	{r4, pc}
   1dc90:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dc94:	4770      	bx	lr
   1dc96:	f06f 001f 	mvn.w	r0, #31
   1dc9a:	4770      	bx	lr

0001dc9c <cc_mbedtls_aes_crypt_ecb>:
   1dc9c:	b328      	cbz	r0, 1dcea <cc_mbedtls_aes_crypt_ecb+0x4e>
   1dc9e:	b322      	cbz	r2, 1dcea <cc_mbedtls_aes_crypt_ecb+0x4e>
   1dca0:	b31b      	cbz	r3, 1dcea <cc_mbedtls_aes_crypt_ecb+0x4e>
   1dca2:	2901      	cmp	r1, #1
   1dca4:	d821      	bhi.n	1dcea <cc_mbedtls_aes_crypt_ecb+0x4e>
   1dca6:	b570      	push	{r4, r5, r6, lr}
   1dca8:	4604      	mov	r4, r0
   1dcaa:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1dcac:	b086      	sub	sp, #24
   1dcae:	d017      	beq.n	1dce0 <cc_mbedtls_aes_crypt_ecb+0x44>
   1dcb0:	2901      	cmp	r1, #1
   1dcb2:	d117      	bne.n	1dce4 <cc_mbedtls_aes_crypt_ecb+0x48>
   1dcb4:	2510      	movs	r5, #16
   1dcb6:	2100      	movs	r1, #0
   1dcb8:	eb0d 0605 	add.w	r6, sp, r5
   1dcbc:	6361      	str	r1, [r4, #52]	; 0x34
   1dcbe:	4610      	mov	r0, r2
   1dcc0:	9500      	str	r5, [sp, #0]
   1dcc2:	9601      	str	r6, [sp, #4]
   1dcc4:	aa02      	add	r2, sp, #8
   1dcc6:	4629      	mov	r1, r5
   1dcc8:	f000 face 	bl	1e268 <SetDataBuffersInfo>
   1dccc:	b950      	cbnz	r0, 1dce4 <cc_mbedtls_aes_crypt_ecb+0x48>
   1dcce:	462b      	mov	r3, r5
   1dcd0:	4632      	mov	r2, r6
   1dcd2:	a902      	add	r1, sp, #8
   1dcd4:	4620      	mov	r0, r4
   1dcd6:	f000 fd37 	bl	1e748 <ProcessAesDrv>
   1dcda:	b918      	cbnz	r0, 1dce4 <cc_mbedtls_aes_crypt_ecb+0x48>
   1dcdc:	b006      	add	sp, #24
   1dcde:	bd70      	pop	{r4, r5, r6, pc}
   1dce0:	2900      	cmp	r1, #0
   1dce2:	d0e7      	beq.n	1dcb4 <cc_mbedtls_aes_crypt_ecb+0x18>
   1dce4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dce8:	e7f8      	b.n	1dcdc <cc_mbedtls_aes_crypt_ecb+0x40>
   1dcea:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1dcee:	4770      	bx	lr

0001dcf0 <cc_mbedtls_sha256_init>:
   1dcf0:	b510      	push	{r4, lr}
   1dcf2:	4604      	mov	r4, r0
   1dcf4:	b128      	cbz	r0, 1dd02 <cc_mbedtls_sha256_init+0x12>
   1dcf6:	4620      	mov	r0, r4
   1dcf8:	21f4      	movs	r1, #244	; 0xf4
   1dcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dcfe:	f7ff bbf3 	b.w	1d4e8 <CC_PalMemSetZeroPlat>
   1dd02:	4804      	ldr	r0, [pc, #16]	; (1dd14 <cc_mbedtls_sha256_init+0x24>)
   1dd04:	f7fe fcb4 	bl	1c670 <CC_PalAbort>
   1dd08:	4620      	mov	r0, r4
   1dd0a:	21f4      	movs	r1, #244	; 0xf4
   1dd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dd10:	f7ff bbea 	b.w	1d4e8 <CC_PalMemSetZeroPlat>
   1dd14:	00024760 	.word	0x00024760

0001dd18 <cc_mbedtls_sha256_free>:
   1dd18:	b110      	cbz	r0, 1dd20 <cc_mbedtls_sha256_free+0x8>
   1dd1a:	21f4      	movs	r1, #244	; 0xf4
   1dd1c:	f7fe bda6 	b.w	1c86c <mbedtls_zeroize_internal>
   1dd20:	4770      	bx	lr
   1dd22:	bf00      	nop

0001dd24 <cc_mbedtls_sha256_starts>:
   1dd24:	b508      	push	{r3, lr}
   1dd26:	b161      	cbz	r1, 1dd42 <cc_mbedtls_sha256_starts+0x1e>
   1dd28:	2901      	cmp	r1, #1
   1dd2a:	d107      	bne.n	1dd3c <cc_mbedtls_sha256_starts+0x18>
   1dd2c:	2102      	movs	r1, #2
   1dd2e:	f000 f85b 	bl	1dde8 <mbedtls_sha_starts_internal>
   1dd32:	2800      	cmp	r0, #0
   1dd34:	bf18      	it	ne
   1dd36:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1dd3a:	bd08      	pop	{r3, pc}
   1dd3c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1dd40:	bd08      	pop	{r3, pc}
   1dd42:	2101      	movs	r1, #1
   1dd44:	f000 f850 	bl	1dde8 <mbedtls_sha_starts_internal>
   1dd48:	e7f3      	b.n	1dd32 <cc_mbedtls_sha256_starts+0xe>
   1dd4a:	bf00      	nop

0001dd4c <cc_mbedtls_sha256_update>:
   1dd4c:	b530      	push	{r4, r5, lr}
   1dd4e:	4605      	mov	r5, r0
   1dd50:	1888      	adds	r0, r1, r2
   1dd52:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   1dd56:	b0a1      	sub	sp, #132	; 0x84
   1dd58:	460b      	mov	r3, r1
   1dd5a:	4614      	mov	r4, r2
   1dd5c:	d801      	bhi.n	1dd62 <cc_mbedtls_sha256_update+0x16>
   1dd5e:	2a80      	cmp	r2, #128	; 0x80
   1dd60:	d90c      	bls.n	1dd7c <cc_mbedtls_sha256_update+0x30>
   1dd62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dd66:	d917      	bls.n	1dd98 <cc_mbedtls_sha256_update+0x4c>
   1dd68:	4622      	mov	r2, r4
   1dd6a:	4619      	mov	r1, r3
   1dd6c:	4628      	mov	r0, r5
   1dd6e:	f000 f87d 	bl	1de6c <mbedtls_sha_update_internal>
   1dd72:	4604      	mov	r4, r0
   1dd74:	b984      	cbnz	r4, 1dd98 <cc_mbedtls_sha256_update+0x4c>
   1dd76:	4620      	mov	r0, r4
   1dd78:	b021      	add	sp, #132	; 0x84
   1dd7a:	bd30      	pop	{r4, r5, pc}
   1dd7c:	4668      	mov	r0, sp
   1dd7e:	f7ff fbaf 	bl	1d4e0 <CC_PalMemCopyPlat>
   1dd82:	4622      	mov	r2, r4
   1dd84:	4669      	mov	r1, sp
   1dd86:	4628      	mov	r0, r5
   1dd88:	f000 f870 	bl	1de6c <mbedtls_sha_update_internal>
   1dd8c:	2180      	movs	r1, #128	; 0x80
   1dd8e:	4604      	mov	r4, r0
   1dd90:	4668      	mov	r0, sp
   1dd92:	f7ff fba9 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1dd96:	e7ed      	b.n	1dd74 <cc_mbedtls_sha256_update+0x28>
   1dd98:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1dd9c:	e7eb      	b.n	1dd76 <cc_mbedtls_sha256_update+0x2a>
   1dd9e:	bf00      	nop

0001dda0 <cc_mbedtls_sha256_finish>:
   1dda0:	b570      	push	{r4, r5, r6, lr}
   1dda2:	b1e8      	cbz	r0, 1dde0 <cc_mbedtls_sha256_finish+0x40>
   1dda4:	460e      	mov	r6, r1
   1dda6:	b1d9      	cbz	r1, 1dde0 <cc_mbedtls_sha256_finish+0x40>
   1dda8:	4604      	mov	r4, r0
   1ddaa:	f000 f831 	bl	1de10 <mbedtls_sha_finish_internal>
   1ddae:	4605      	mov	r5, r0
   1ddb0:	b9b0      	cbnz	r0, 1dde0 <cc_mbedtls_sha256_finish+0x40>
   1ddb2:	6823      	ldr	r3, [r4, #0]
   1ddb4:	2b01      	cmp	r3, #1
   1ddb6:	d00b      	beq.n	1ddd0 <cc_mbedtls_sha256_finish+0x30>
   1ddb8:	2b02      	cmp	r3, #2
   1ddba:	d001      	beq.n	1ddc0 <cc_mbedtls_sha256_finish+0x20>
   1ddbc:	4628      	mov	r0, r5
   1ddbe:	bd70      	pop	{r4, r5, r6, pc}
   1ddc0:	221c      	movs	r2, #28
   1ddc2:	f104 0108 	add.w	r1, r4, #8
   1ddc6:	4630      	mov	r0, r6
   1ddc8:	f7ff fb8a 	bl	1d4e0 <CC_PalMemCopyPlat>
   1ddcc:	4628      	mov	r0, r5
   1ddce:	bd70      	pop	{r4, r5, r6, pc}
   1ddd0:	2220      	movs	r2, #32
   1ddd2:	f104 0108 	add.w	r1, r4, #8
   1ddd6:	4630      	mov	r0, r6
   1ddd8:	f7ff fb82 	bl	1d4e0 <CC_PalMemCopyPlat>
   1dddc:	4628      	mov	r0, r5
   1ddde:	bd70      	pop	{r4, r5, r6, pc}
   1dde0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1dde4:	e7ea      	b.n	1ddbc <cc_mbedtls_sha256_finish+0x1c>
   1dde6:	bf00      	nop

0001dde8 <mbedtls_sha_starts_internal>:
   1dde8:	b178      	cbz	r0, 1de0a <mbedtls_sha_starts_internal+0x22>
   1ddea:	b538      	push	{r3, r4, r5, lr}
   1ddec:	4604      	mov	r4, r0
   1ddee:	460d      	mov	r5, r1
   1ddf0:	21f0      	movs	r1, #240	; 0xf0
   1ddf2:	f7ff fb79 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1ddf6:	2340      	movs	r3, #64	; 0x40
   1ddf8:	6025      	str	r5, [r4, #0]
   1ddfa:	65e3      	str	r3, [r4, #92]	; 0x5c
   1ddfc:	4620      	mov	r0, r4
   1ddfe:	f000 fa67 	bl	1e2d0 <InitHashDrv>
   1de02:	3800      	subs	r0, #0
   1de04:	bf18      	it	ne
   1de06:	2001      	movne	r0, #1
   1de08:	bd38      	pop	{r3, r4, r5, pc}
   1de0a:	2001      	movs	r0, #1
   1de0c:	4770      	bx	lr
   1de0e:	bf00      	nop

0001de10 <mbedtls_sha_finish_internal>:
   1de10:	b570      	push	{r4, r5, r6, lr}
   1de12:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1de14:	b0a4      	sub	sp, #144	; 0x90
   1de16:	4604      	mov	r4, r0
   1de18:	ae04      	add	r6, sp, #16
   1de1a:	b9e5      	cbnz	r5, 1de56 <mbedtls_sha_finish_internal+0x46>
   1de1c:	2201      	movs	r2, #1
   1de1e:	2300      	movs	r3, #0
   1de20:	6062      	str	r2, [r4, #4]
   1de22:	4630      	mov	r0, r6
   1de24:	e9cd 3300 	strd	r3, r3, [sp]
   1de28:	aa02      	add	r2, sp, #8
   1de2a:	4629      	mov	r1, r5
   1de2c:	f000 fa1c 	bl	1e268 <SetDataBuffersInfo>
   1de30:	b110      	cbz	r0, 1de38 <mbedtls_sha_finish_internal+0x28>
   1de32:	2001      	movs	r0, #1
   1de34:	b024      	add	sp, #144	; 0x90
   1de36:	bd70      	pop	{r4, r5, r6, pc}
   1de38:	462a      	mov	r2, r5
   1de3a:	a902      	add	r1, sp, #8
   1de3c:	4620      	mov	r0, r4
   1de3e:	f000 fa71 	bl	1e324 <ProcessHashDrv>
   1de42:	2800      	cmp	r0, #0
   1de44:	d1f5      	bne.n	1de32 <mbedtls_sha_finish_internal+0x22>
   1de46:	4620      	mov	r0, r4
   1de48:	f000 fb82 	bl	1e550 <FinishHashDrv>
   1de4c:	2800      	cmp	r0, #0
   1de4e:	d1f0      	bne.n	1de32 <mbedtls_sha_finish_internal+0x22>
   1de50:	6620      	str	r0, [r4, #96]	; 0x60
   1de52:	b024      	add	sp, #144	; 0x90
   1de54:	bd70      	pop	{r4, r5, r6, pc}
   1de56:	2d80      	cmp	r5, #128	; 0x80
   1de58:	462a      	mov	r2, r5
   1de5a:	f100 0164 	add.w	r1, r0, #100	; 0x64
   1de5e:	bf28      	it	cs
   1de60:	2280      	movcs	r2, #128	; 0x80
   1de62:	4630      	mov	r0, r6
   1de64:	f7ff fb3c 	bl	1d4e0 <CC_PalMemCopyPlat>
   1de68:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1de6a:	e7d7      	b.n	1de1c <mbedtls_sha_finish_internal+0xc>

0001de6c <mbedtls_sha_update_internal>:
   1de6c:	2800      	cmp	r0, #0
   1de6e:	f000 80d9 	beq.w	1e024 <mbedtls_sha_update_internal+0x1b8>
   1de72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de76:	4617      	mov	r7, r2
   1de78:	b0a5      	sub	sp, #148	; 0x94
   1de7a:	2a00      	cmp	r2, #0
   1de7c:	f000 80a8 	beq.w	1dfd0 <mbedtls_sha_update_internal+0x164>
   1de80:	460c      	mov	r4, r1
   1de82:	2900      	cmp	r1, #0
   1de84:	d050      	beq.n	1df28 <mbedtls_sha_update_internal+0xbc>
   1de86:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1de8a:	4605      	mov	r5, r0
   1de8c:	d32c      	bcc.n	1dee8 <mbedtls_sha_update_internal+0x7c>
   1de8e:	f64f 7aff 	movw	sl, #65535	; 0xffff
   1de92:	f5a2 477f 	sub.w	r7, r2, #65280	; 0xff00
   1de96:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1de98:	eb01 090a 	add.w	r9, r1, sl
   1de9c:	3fff      	subs	r7, #255	; 0xff
   1de9e:	f105 0b64 	add.w	fp, r5, #100	; 0x64
   1dea2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dea4:	1a14      	subs	r4, r2, r0
   1dea6:	f5a9 467f 	sub.w	r6, r9, #65280	; 0xff00
   1deaa:	fbb4 f3f2 	udiv	r3, r4, r2
   1deae:	fb02 4413 	mls	r4, r2, r3, r4
   1deb2:	3eff      	subs	r6, #255	; 0xff
   1deb4:	2c00      	cmp	r4, #0
   1deb6:	d15f      	bne.n	1df78 <mbedtls_sha_update_internal+0x10c>
   1deb8:	4282      	cmp	r2, r0
   1deba:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1debe:	d06c      	beq.n	1df9a <mbedtls_sha_update_internal+0x12e>
   1dec0:	fbb4 f8f2 	udiv	r8, r4, r2
   1dec4:	fb02 f808 	mul.w	r8, r2, r8
   1dec8:	f1b8 0f00 	cmp.w	r8, #0
   1decc:	d130      	bne.n	1df30 <mbedtls_sha_update_internal+0xc4>
   1dece:	2c00      	cmp	r4, #0
   1ded0:	d145      	bne.n	1df5e <mbedtls_sha_update_internal+0xf2>
   1ded2:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   1ded6:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1deda:	464c      	mov	r4, r9
   1dedc:	f1a3 03ff 	sub.w	r3, r3, #255	; 0xff
   1dee0:	44d1      	add	r9, sl
   1dee2:	d302      	bcc.n	1deea <mbedtls_sha_update_internal+0x7e>
   1dee4:	461f      	mov	r7, r3
   1dee6:	e7dc      	b.n	1dea2 <mbedtls_sha_update_internal+0x36>
   1dee8:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1deea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1deec:	1a16      	subs	r6, r2, r0
   1deee:	fbb6 f3f2 	udiv	r3, r6, r2
   1def2:	fb02 6613 	mls	r6, r2, r3, r6
   1def6:	42be      	cmp	r6, r7
   1def8:	bf28      	it	cs
   1defa:	463e      	movcs	r6, r7
   1defc:	2e00      	cmp	r6, #0
   1defe:	f040 8083 	bne.w	1e008 <mbedtls_sha_update_internal+0x19c>
   1df02:	4290      	cmp	r0, r2
   1df04:	f000 8090 	beq.w	1e028 <mbedtls_sha_update_internal+0x1bc>
   1df08:	fbb7 f6f2 	udiv	r6, r7, r2
   1df0c:	fb02 f606 	mul.w	r6, r2, r6
   1df10:	2e00      	cmp	r6, #0
   1df12:	d06a      	beq.n	1dfea <mbedtls_sha_update_internal+0x17e>
   1df14:	2300      	movs	r3, #0
   1df16:	e9cd 3300 	strd	r3, r3, [sp]
   1df1a:	aa02      	add	r2, sp, #8
   1df1c:	4631      	mov	r1, r6
   1df1e:	4620      	mov	r0, r4
   1df20:	f000 f9a2 	bl	1e268 <SetDataBuffersInfo>
   1df24:	2800      	cmp	r0, #0
   1df26:	d057      	beq.n	1dfd8 <mbedtls_sha_update_internal+0x16c>
   1df28:	2001      	movs	r0, #1
   1df2a:	b025      	add	sp, #148	; 0x94
   1df2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df30:	2300      	movs	r3, #0
   1df32:	e9cd 3300 	strd	r3, r3, [sp]
   1df36:	aa02      	add	r2, sp, #8
   1df38:	4641      	mov	r1, r8
   1df3a:	4630      	mov	r0, r6
   1df3c:	f000 f994 	bl	1e268 <SetDataBuffersInfo>
   1df40:	2800      	cmp	r0, #0
   1df42:	d1f1      	bne.n	1df28 <mbedtls_sha_update_internal+0xbc>
   1df44:	a902      	add	r1, sp, #8
   1df46:	4642      	mov	r2, r8
   1df48:	4628      	mov	r0, r5
   1df4a:	f000 f9eb 	bl	1e324 <ProcessHashDrv>
   1df4e:	2800      	cmp	r0, #0
   1df50:	d1ea      	bne.n	1df28 <mbedtls_sha_update_internal+0xbc>
   1df52:	eba4 0408 	sub.w	r4, r4, r8
   1df56:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1df58:	4446      	add	r6, r8
   1df5a:	2c00      	cmp	r4, #0
   1df5c:	d0b9      	beq.n	1ded2 <mbedtls_sha_update_internal+0x66>
   1df5e:	3019      	adds	r0, #25
   1df60:	4631      	mov	r1, r6
   1df62:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1df66:	4622      	mov	r2, r4
   1df68:	f7ff faba 	bl	1d4e0 <CC_PalMemCopyPlat>
   1df6c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1df6e:	4420      	add	r0, r4
   1df70:	f5a7 437f 	sub.w	r3, r7, #65280	; 0xff00
   1df74:	6628      	str	r0, [r5, #96]	; 0x60
   1df76:	e7ae      	b.n	1ded6 <mbedtls_sha_update_internal+0x6a>
   1df78:	4554      	cmp	r4, sl
   1df7a:	bf28      	it	cs
   1df7c:	4654      	movcs	r4, sl
   1df7e:	4622      	mov	r2, r4
   1df80:	4631      	mov	r1, r6
   1df82:	4458      	add	r0, fp
   1df84:	f7ff faac 	bl	1d4e0 <CC_PalMemCopyPlat>
   1df88:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1df8a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1df8c:	4420      	add	r0, r4
   1df8e:	4282      	cmp	r2, r0
   1df90:	4426      	add	r6, r4
   1df92:	6628      	str	r0, [r5, #96]	; 0x60
   1df94:	ebaa 0404 	sub.w	r4, sl, r4
   1df98:	d192      	bne.n	1dec0 <mbedtls_sha_update_internal+0x54>
   1df9a:	2a80      	cmp	r2, #128	; 0x80
   1df9c:	bf28      	it	cs
   1df9e:	2280      	movcs	r2, #128	; 0x80
   1dfa0:	4659      	mov	r1, fp
   1dfa2:	a804      	add	r0, sp, #16
   1dfa4:	f7ff fa9c 	bl	1d4e0 <CC_PalMemCopyPlat>
   1dfa8:	2300      	movs	r3, #0
   1dfaa:	e9cd 3300 	strd	r3, r3, [sp]
   1dfae:	aa02      	add	r2, sp, #8
   1dfb0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1dfb2:	a804      	add	r0, sp, #16
   1dfb4:	f000 f958 	bl	1e268 <SetDataBuffersInfo>
   1dfb8:	2800      	cmp	r0, #0
   1dfba:	d1b5      	bne.n	1df28 <mbedtls_sha_update_internal+0xbc>
   1dfbc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dfbe:	a902      	add	r1, sp, #8
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f000 f9af 	bl	1e324 <ProcessHashDrv>
   1dfc6:	2800      	cmp	r0, #0
   1dfc8:	d1ae      	bne.n	1df28 <mbedtls_sha_update_internal+0xbc>
   1dfca:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1dfcc:	6628      	str	r0, [r5, #96]	; 0x60
   1dfce:	e777      	b.n	1dec0 <mbedtls_sha_update_internal+0x54>
   1dfd0:	4638      	mov	r0, r7
   1dfd2:	b025      	add	sp, #148	; 0x94
   1dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfd8:	a902      	add	r1, sp, #8
   1dfda:	4632      	mov	r2, r6
   1dfdc:	4628      	mov	r0, r5
   1dfde:	f000 f9a1 	bl	1e324 <ProcessHashDrv>
   1dfe2:	2800      	cmp	r0, #0
   1dfe4:	d1a0      	bne.n	1df28 <mbedtls_sha_update_internal+0xbc>
   1dfe6:	4434      	add	r4, r6
   1dfe8:	1bbf      	subs	r7, r7, r6
   1dfea:	2f00      	cmp	r7, #0
   1dfec:	d0f0      	beq.n	1dfd0 <mbedtls_sha_update_internal+0x164>
   1dfee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1dff0:	3319      	adds	r3, #25
   1dff2:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   1dff6:	463a      	mov	r2, r7
   1dff8:	4621      	mov	r1, r4
   1dffa:	f7ff fa71 	bl	1d4e0 <CC_PalMemCopyPlat>
   1dffe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e000:	443b      	add	r3, r7
   1e002:	2000      	movs	r0, #0
   1e004:	662b      	str	r3, [r5, #96]	; 0x60
   1e006:	e790      	b.n	1df2a <mbedtls_sha_update_internal+0xbe>
   1e008:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e00c:	4621      	mov	r1, r4
   1e00e:	4632      	mov	r2, r6
   1e010:	4418      	add	r0, r3
   1e012:	f7ff fa65 	bl	1d4e0 <CC_PalMemCopyPlat>
   1e016:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e018:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e01a:	4430      	add	r0, r6
   1e01c:	1bbf      	subs	r7, r7, r6
   1e01e:	4434      	add	r4, r6
   1e020:	6628      	str	r0, [r5, #96]	; 0x60
   1e022:	e76e      	b.n	1df02 <mbedtls_sha_update_internal+0x96>
   1e024:	2001      	movs	r0, #1
   1e026:	4770      	bx	lr
   1e028:	2a80      	cmp	r2, #128	; 0x80
   1e02a:	bf28      	it	cs
   1e02c:	2280      	movcs	r2, #128	; 0x80
   1e02e:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e032:	a804      	add	r0, sp, #16
   1e034:	f7ff fa54 	bl	1d4e0 <CC_PalMemCopyPlat>
   1e038:	2300      	movs	r3, #0
   1e03a:	e9cd 3300 	strd	r3, r3, [sp]
   1e03e:	a804      	add	r0, sp, #16
   1e040:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e042:	aa02      	add	r2, sp, #8
   1e044:	f000 f910 	bl	1e268 <SetDataBuffersInfo>
   1e048:	2800      	cmp	r0, #0
   1e04a:	f47f af6d 	bne.w	1df28 <mbedtls_sha_update_internal+0xbc>
   1e04e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e050:	a902      	add	r1, sp, #8
   1e052:	4628      	mov	r0, r5
   1e054:	f000 f966 	bl	1e324 <ProcessHashDrv>
   1e058:	2800      	cmp	r0, #0
   1e05a:	f47f af65 	bne.w	1df28 <mbedtls_sha_update_internal+0xbc>
   1e05e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e060:	6628      	str	r0, [r5, #96]	; 0x60
   1e062:	e751      	b.n	1df08 <mbedtls_sha_update_internal+0x9c>

0001e064 <cc_mbedtls_sha256>:
   1e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e066:	461c      	mov	r4, r3
   1e068:	4605      	mov	r5, r0
   1e06a:	4811      	ldr	r0, [pc, #68]	; (1e0b0 <cc_mbedtls_sha256+0x4c>)
   1e06c:	460e      	mov	r6, r1
   1e06e:	4617      	mov	r7, r2
   1e070:	f7ff fe3e 	bl	1dcf0 <cc_mbedtls_sha256_init>
   1e074:	4621      	mov	r1, r4
   1e076:	480e      	ldr	r0, [pc, #56]	; (1e0b0 <cc_mbedtls_sha256+0x4c>)
   1e078:	f7ff fe54 	bl	1dd24 <cc_mbedtls_sha256_starts>
   1e07c:	4604      	mov	r4, r0
   1e07e:	b120      	cbz	r0, 1e08a <cc_mbedtls_sha256+0x26>
   1e080:	480b      	ldr	r0, [pc, #44]	; (1e0b0 <cc_mbedtls_sha256+0x4c>)
   1e082:	f7ff fe49 	bl	1dd18 <cc_mbedtls_sha256_free>
   1e086:	4620      	mov	r0, r4
   1e088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e08a:	4809      	ldr	r0, [pc, #36]	; (1e0b0 <cc_mbedtls_sha256+0x4c>)
   1e08c:	4632      	mov	r2, r6
   1e08e:	4629      	mov	r1, r5
   1e090:	f7ff fe5c 	bl	1dd4c <cc_mbedtls_sha256_update>
   1e094:	4604      	mov	r4, r0
   1e096:	2800      	cmp	r0, #0
   1e098:	d1f2      	bne.n	1e080 <cc_mbedtls_sha256+0x1c>
   1e09a:	4639      	mov	r1, r7
   1e09c:	4804      	ldr	r0, [pc, #16]	; (1e0b0 <cc_mbedtls_sha256+0x4c>)
   1e09e:	f7ff fe7f 	bl	1dda0 <cc_mbedtls_sha256_finish>
   1e0a2:	4604      	mov	r4, r0
   1e0a4:	4802      	ldr	r0, [pc, #8]	; (1e0b0 <cc_mbedtls_sha256+0x4c>)
   1e0a6:	f7ff fe37 	bl	1dd18 <cc_mbedtls_sha256_free>
   1e0aa:	4620      	mov	r0, r4
   1e0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e0ae:	bf00      	nop
   1e0b0:	2000322c 	.word	0x2000322c

0001e0b4 <RNG_PLAT_SetUserRngParameters>:
   1e0b4:	b530      	push	{r4, r5, lr}
   1e0b6:	b083      	sub	sp, #12
   1e0b8:	231c      	movs	r3, #28
   1e0ba:	a901      	add	r1, sp, #4
   1e0bc:	4604      	mov	r4, r0
   1e0be:	9301      	str	r3, [sp, #4]
   1e0c0:	f000 f834 	bl	1e12c <CC_PalTrngParamGet>
   1e0c4:	4605      	mov	r5, r0
   1e0c6:	b938      	cbnz	r0, 1e0d8 <RNG_PLAT_SetUserRngParameters+0x24>
   1e0c8:	9b01      	ldr	r3, [sp, #4]
   1e0ca:	2b1c      	cmp	r3, #28
   1e0cc:	d007      	beq.n	1e0de <RNG_PLAT_SetUserRngParameters+0x2a>
   1e0ce:	4d15      	ldr	r5, [pc, #84]	; (1e124 <RNG_PLAT_SetUserRngParameters+0x70>)
   1e0d0:	211c      	movs	r1, #28
   1e0d2:	4620      	mov	r0, r4
   1e0d4:	f7ff fa08 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1e0d8:	4628      	mov	r0, r5
   1e0da:	b003      	add	sp, #12
   1e0dc:	bd30      	pop	{r4, r5, pc}
   1e0de:	e9d4 3200 	ldrd	r3, r2, [r4]
   1e0e2:	2101      	movs	r1, #1
   1e0e4:	3b00      	subs	r3, #0
   1e0e6:	61e1      	str	r1, [r4, #28]
   1e0e8:	bf18      	it	ne
   1e0ea:	2301      	movne	r3, #1
   1e0ec:	b10a      	cbz	r2, 1e0f2 <RNG_PLAT_SetUserRngParameters+0x3e>
   1e0ee:	f043 0302 	orr.w	r3, r3, #2
   1e0f2:	68a2      	ldr	r2, [r4, #8]
   1e0f4:	b932      	cbnz	r2, 1e104 <RNG_PLAT_SetUserRngParameters+0x50>
   1e0f6:	68e2      	ldr	r2, [r4, #12]
   1e0f8:	b942      	cbnz	r2, 1e10c <RNG_PLAT_SetUserRngParameters+0x58>
   1e0fa:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e0fe:	b97b      	cbnz	r3, 1e120 <RNG_PLAT_SetUserRngParameters+0x6c>
   1e100:	4d09      	ldr	r5, [pc, #36]	; (1e128 <RNG_PLAT_SetUserRngParameters+0x74>)
   1e102:	e7e5      	b.n	1e0d0 <RNG_PLAT_SetUserRngParameters+0x1c>
   1e104:	68e2      	ldr	r2, [r4, #12]
   1e106:	f043 0304 	orr.w	r3, r3, #4
   1e10a:	b13a      	cbz	r2, 1e11c <RNG_PLAT_SetUserRngParameters+0x68>
   1e10c:	f043 0308 	orr.w	r3, r3, #8
   1e110:	2200      	movs	r2, #0
   1e112:	4628      	mov	r0, r5
   1e114:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e118:	b003      	add	sp, #12
   1e11a:	bd30      	pop	{r4, r5, pc}
   1e11c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1e120:	4615      	mov	r5, r2
   1e122:	e7d9      	b.n	1e0d8 <RNG_PLAT_SetUserRngParameters+0x24>
   1e124:	00f00c37 	.word	0x00f00c37
   1e128:	00f00c0e 	.word	0x00f00c0e

0001e12c <CC_PalTrngParamGet>:
   1e12c:	b118      	cbz	r0, 1e136 <CC_PalTrngParamGet+0xa>
   1e12e:	b111      	cbz	r1, 1e136 <CC_PalTrngParamGet+0xa>
   1e130:	680b      	ldr	r3, [r1, #0]
   1e132:	2b1c      	cmp	r3, #28
   1e134:	d001      	beq.n	1e13a <CC_PalTrngParamGet+0xe>
   1e136:	2001      	movs	r0, #1
   1e138:	4770      	bx	lr
   1e13a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e13e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1e142:	3201      	adds	r2, #1
   1e144:	bf14      	ite	ne
   1e146:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1e14a:	f241 225c 	movweq	r2, #4700	; 0x125c
   1e14e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e152:	6002      	str	r2, [r0, #0]
   1e154:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1e158:	3201      	adds	r2, #1
   1e15a:	bf14      	ite	ne
   1e15c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1e160:	f641 1264 	movweq	r2, #6500	; 0x1964
   1e164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e168:	6042      	str	r2, [r0, #4]
   1e16a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1e16e:	3201      	adds	r2, #1
   1e170:	bf14      	ite	ne
   1e172:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1e176:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1e17a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e17e:	6082      	str	r2, [r0, #8]
   1e180:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1e184:	3201      	adds	r2, #1
   1e186:	bf14      	ite	ne
   1e188:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1e18c:	f241 3288 	movweq	r2, #5000	; 0x1388
   1e190:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e194:	60c2      	str	r2, [r0, #12]
   1e196:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1e19a:	3201      	adds	r2, #1
   1e19c:	bf14      	ite	ne
   1e19e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1e1a2:	2290      	moveq	r2, #144	; 0x90
   1e1a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e1a8:	6102      	str	r2, [r0, #16]
   1e1aa:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1e1ae:	3201      	adds	r2, #1
   1e1b0:	bf14      	ite	ne
   1e1b2:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1e1b6:	2251      	moveq	r2, #81	; 0x51
   1e1b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e1bc:	6142      	str	r2, [r0, #20]
   1e1be:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1e1c2:	3201      	adds	r2, #1
   1e1c4:	bf14      	ite	ne
   1e1c6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1e1ca:	f240 3337 	movweq	r3, #823	; 0x337
   1e1ce:	6183      	str	r3, [r0, #24]
   1e1d0:	2000      	movs	r0, #0
   1e1d2:	4770      	bx	lr

0001e1d4 <LLF_RND_WaitRngInterrupt>:
   1e1d4:	b508      	push	{r3, lr}
   1e1d6:	4601      	mov	r1, r0
   1e1d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e1dc:	f7ff f90c 	bl	1d3f8 <CC_HalWaitInterruptRND>
   1e1e0:	4b03      	ldr	r3, [pc, #12]	; (1e1f0 <LLF_RND_WaitRngInterrupt+0x1c>)
   1e1e2:	2200      	movs	r2, #0
   1e1e4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1e1e8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e1ec:	bd08      	pop	{r3, pc}
   1e1ee:	bf00      	nop
   1e1f0:	5002b000 	.word	0x5002b000

0001e1f4 <LLF_RND_GetRoscSampleCnt>:
   1e1f4:	3801      	subs	r0, #1
   1e1f6:	2807      	cmp	r0, #7
   1e1f8:	d805      	bhi.n	1e206 <LLF_RND_GetRoscSampleCnt+0x12>
   1e1fa:	e8df f000 	tbb	[pc, r0]
   1e1fe:	0e12      	.short	0x0e12
   1e200:	04040a04 	.word	0x04040a04
   1e204:	0604      	.short	0x0604
   1e206:	4809      	ldr	r0, [pc, #36]	; (1e22c <LLF_RND_GetRoscSampleCnt+0x38>)
   1e208:	4770      	bx	lr
   1e20a:	68cb      	ldr	r3, [r1, #12]
   1e20c:	624b      	str	r3, [r1, #36]	; 0x24
   1e20e:	2000      	movs	r0, #0
   1e210:	4770      	bx	lr
   1e212:	688b      	ldr	r3, [r1, #8]
   1e214:	624b      	str	r3, [r1, #36]	; 0x24
   1e216:	2000      	movs	r0, #0
   1e218:	4770      	bx	lr
   1e21a:	684b      	ldr	r3, [r1, #4]
   1e21c:	624b      	str	r3, [r1, #36]	; 0x24
   1e21e:	2000      	movs	r0, #0
   1e220:	4770      	bx	lr
   1e222:	680b      	ldr	r3, [r1, #0]
   1e224:	624b      	str	r3, [r1, #36]	; 0x24
   1e226:	2000      	movs	r0, #0
   1e228:	4770      	bx	lr
   1e22a:	bf00      	nop
   1e22c:	00f10c31 	.word	0x00f10c31

0001e230 <LLF_RND_GetFastestRosc>:
   1e230:	680b      	ldr	r3, [r1, #0]
   1e232:	e002      	b.n	1e23a <LLF_RND_GetFastestRosc+0xa>
   1e234:	2b08      	cmp	r3, #8
   1e236:	600b      	str	r3, [r1, #0]
   1e238:	d806      	bhi.n	1e248 <LLF_RND_GetFastestRosc+0x18>
   1e23a:	6a02      	ldr	r2, [r0, #32]
   1e23c:	4213      	tst	r3, r2
   1e23e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1e242:	d0f7      	beq.n	1e234 <LLF_RND_GetFastestRosc+0x4>
   1e244:	2000      	movs	r0, #0
   1e246:	4770      	bx	lr
   1e248:	4800      	ldr	r0, [pc, #0]	; (1e24c <LLF_RND_GetFastestRosc+0x1c>)
   1e24a:	4770      	bx	lr
   1e24c:	00f10c31 	.word	0x00f10c31

0001e250 <LLF_RND_TurnOffTrng>:
   1e250:	4b04      	ldr	r3, [pc, #16]	; (1e264 <LLF_RND_TurnOffTrng+0x14>)
   1e252:	2200      	movs	r2, #0
   1e254:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   1e258:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1e25c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1e260:	f7ff b8b0 	b.w	1d3c4 <CC_HalClearInterruptBit>
   1e264:	5002b000 	.word	0x5002b000

0001e268 <SetDataBuffersInfo>:
   1e268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e26a:	b083      	sub	sp, #12
   1e26c:	461d      	mov	r5, r3
   1e26e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1e272:	f04f 0300 	mov.w	r3, #0
   1e276:	f88d 3007 	strb.w	r3, [sp, #7]
   1e27a:	d324      	bcc.n	1e2c6 <SetDataBuffersInfo+0x5e>
   1e27c:	468c      	mov	ip, r1
   1e27e:	4484      	add	ip, r0
   1e280:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   1e284:	4604      	mov	r4, r0
   1e286:	d81e      	bhi.n	1e2c6 <SetDataBuffersInfo+0x5e>
   1e288:	4617      	mov	r7, r2
   1e28a:	f10d 0307 	add.w	r3, sp, #7
   1e28e:	2201      	movs	r2, #1
   1e290:	f000 fe56 	bl	1ef40 <CC_PalDataBufferAttrGet>
   1e294:	4606      	mov	r6, r0
   1e296:	b9b0      	cbnz	r0, 1e2c6 <SetDataBuffersInfo+0x5e>
   1e298:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e29a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e29e:	603c      	str	r4, [r7, #0]
   1e2a0:	713b      	strb	r3, [r7, #4]
   1e2a2:	b192      	cbz	r2, 1e2ca <SetDataBuffersInfo+0x62>
   1e2a4:	b14d      	cbz	r5, 1e2ba <SetDataBuffersInfo+0x52>
   1e2a6:	4602      	mov	r2, r0
   1e2a8:	9908      	ldr	r1, [sp, #32]
   1e2aa:	f10d 0307 	add.w	r3, sp, #7
   1e2ae:	4628      	mov	r0, r5
   1e2b0:	f000 fe46 	bl	1ef40 <CC_PalDataBufferAttrGet>
   1e2b4:	b938      	cbnz	r0, 1e2c6 <SetDataBuffersInfo+0x5e>
   1e2b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e2ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e2bc:	4630      	mov	r0, r6
   1e2be:	6015      	str	r5, [r2, #0]
   1e2c0:	7113      	strb	r3, [r2, #4]
   1e2c2:	b003      	add	sp, #12
   1e2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e2c6:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1e2ca:	4630      	mov	r0, r6
   1e2cc:	b003      	add	sp, #12
   1e2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e2d0 <InitHashDrv>:
   1e2d0:	b1e8      	cbz	r0, 1e30e <InitHashDrv+0x3e>
   1e2d2:	b510      	push	{r4, lr}
   1e2d4:	6804      	ldr	r4, [r0, #0]
   1e2d6:	2c01      	cmp	r4, #1
   1e2d8:	d004      	beq.n	1e2e4 <InitHashDrv+0x14>
   1e2da:	2c02      	cmp	r4, #2
   1e2dc:	d010      	beq.n	1e300 <InitHashDrv+0x30>
   1e2de:	b144      	cbz	r4, 1e2f2 <InitHashDrv+0x22>
   1e2e0:	480c      	ldr	r0, [pc, #48]	; (1e314 <InitHashDrv+0x44>)
   1e2e2:	bd10      	pop	{r4, pc}
   1e2e4:	490c      	ldr	r1, [pc, #48]	; (1e318 <InitHashDrv+0x48>)
   1e2e6:	2220      	movs	r2, #32
   1e2e8:	3008      	adds	r0, #8
   1e2ea:	f7ff f8f9 	bl	1d4e0 <CC_PalMemCopyPlat>
   1e2ee:	2000      	movs	r0, #0
   1e2f0:	bd10      	pop	{r4, pc}
   1e2f2:	490a      	ldr	r1, [pc, #40]	; (1e31c <InitHashDrv+0x4c>)
   1e2f4:	2214      	movs	r2, #20
   1e2f6:	3008      	adds	r0, #8
   1e2f8:	f7ff f8f2 	bl	1d4e0 <CC_PalMemCopyPlat>
   1e2fc:	4620      	mov	r0, r4
   1e2fe:	bd10      	pop	{r4, pc}
   1e300:	4907      	ldr	r1, [pc, #28]	; (1e320 <InitHashDrv+0x50>)
   1e302:	2220      	movs	r2, #32
   1e304:	3008      	adds	r0, #8
   1e306:	f7ff f8eb 	bl	1d4e0 <CC_PalMemCopyPlat>
   1e30a:	2000      	movs	r0, #0
   1e30c:	bd10      	pop	{r4, pc}
   1e30e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e312:	4770      	bx	lr
   1e314:	00f30001 	.word	0x00f30001
   1e318:	000247a4 	.word	0x000247a4
   1e31c:	00024770 	.word	0x00024770
   1e320:	00024784 	.word	0x00024784

0001e324 <ProcessHashDrv>:
   1e324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e328:	2900      	cmp	r1, #0
   1e32a:	f000 80f9 	beq.w	1e520 <ProcessHashDrv+0x1fc>
   1e32e:	4604      	mov	r4, r0
   1e330:	2800      	cmp	r0, #0
   1e332:	f000 80f9 	beq.w	1e528 <ProcessHashDrv+0x204>
   1e336:	6803      	ldr	r3, [r0, #0]
   1e338:	4690      	mov	r8, r2
   1e33a:	460f      	mov	r7, r1
   1e33c:	2b00      	cmp	r3, #0
   1e33e:	f000 80c3 	beq.w	1e4c8 <ProcessHashDrv+0x1a4>
   1e342:	3b01      	subs	r3, #1
   1e344:	2b01      	cmp	r3, #1
   1e346:	f200 80d7 	bhi.w	1e4f8 <ProcessHashDrv+0x1d4>
   1e34a:	4879      	ldr	r0, [pc, #484]	; (1e530 <ProcessHashDrv+0x20c>)
   1e34c:	f04f 31ff 	mov.w	r1, #4294967295
   1e350:	f04f 0902 	mov.w	r9, #2
   1e354:	f7ff f8e0 	bl	1d518 <CC_PalMutexLock>
   1e358:	2800      	cmp	r0, #0
   1e35a:	f040 80bf 	bne.w	1e4dc <ProcessHashDrv+0x1b8>
   1e35e:	2000      	movs	r0, #0
   1e360:	f7ff f90a 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1e364:	4606      	mov	r6, r0
   1e366:	2800      	cmp	r0, #0
   1e368:	f040 80c2 	bne.w	1e4f0 <ProcessHashDrv+0x1cc>
   1e36c:	4a71      	ldr	r2, [pc, #452]	; (1e534 <ProcessHashDrv+0x210>)
   1e36e:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1e372:	2b00      	cmp	r3, #0
   1e374:	d1fb      	bne.n	1e36e <ProcessHashDrv+0x4a>
   1e376:	4d6f      	ldr	r5, [pc, #444]	; (1e534 <ProcessHashDrv+0x210>)
   1e378:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   1e37c:	2b00      	cmp	r3, #0
   1e37e:	d1fb      	bne.n	1e378 <ProcessHashDrv+0x54>
   1e380:	f04f 30ff 	mov.w	r0, #4294967295
   1e384:	f7ff f81e 	bl	1d3c4 <CC_HalClearInterruptBit>
   1e388:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e38c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1e390:	f7ff f826 	bl	1d3e0 <CC_HalMaskInterrupt>
   1e394:	2301      	movs	r3, #1
   1e396:	2207      	movs	r2, #7
   1e398:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   1e39c:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1e3a0:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1e3a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1e3a6:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   1e3aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e3ac:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1e3b0:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1e3b4:	6823      	ldr	r3, [r4, #0]
   1e3b6:	b15b      	cbz	r3, 1e3d0 <ProcessHashDrv+0xac>
   1e3b8:	3b01      	subs	r3, #1
   1e3ba:	2b01      	cmp	r3, #1
   1e3bc:	d818      	bhi.n	1e3f0 <ProcessHashDrv+0xcc>
   1e3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e3c0:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1e3c4:	6a23      	ldr	r3, [r4, #32]
   1e3c6:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   1e3ca:	69e3      	ldr	r3, [r4, #28]
   1e3cc:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1e3d0:	4b58      	ldr	r3, [pc, #352]	; (1e534 <ProcessHashDrv+0x210>)
   1e3d2:	69a2      	ldr	r2, [r4, #24]
   1e3d4:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1e3d8:	6962      	ldr	r2, [r4, #20]
   1e3da:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1e3de:	6922      	ldr	r2, [r4, #16]
   1e3e0:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1e3e4:	68e2      	ldr	r2, [r4, #12]
   1e3e6:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   1e3ea:	68a2      	ldr	r2, [r4, #8]
   1e3ec:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1e3f0:	4a50      	ldr	r2, [pc, #320]	; (1e534 <ProcessHashDrv+0x210>)
   1e3f2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e3f6:	2b00      	cmp	r3, #0
   1e3f8:	d1fb      	bne.n	1e3f2 <ProcessHashDrv+0xce>
   1e3fa:	f1b8 0f00 	cmp.w	r8, #0
   1e3fe:	d05f      	beq.n	1e4c0 <ProcessHashDrv+0x19c>
   1e400:	6863      	ldr	r3, [r4, #4]
   1e402:	2b01      	cmp	r3, #1
   1e404:	bf08      	it	eq
   1e406:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   1e40a:	4b4a      	ldr	r3, [pc, #296]	; (1e534 <ProcessHashDrv+0x210>)
   1e40c:	683a      	ldr	r2, [r7, #0]
   1e40e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1e412:	2040      	movs	r0, #64	; 0x40
   1e414:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   1e418:	f7fe ffe8 	bl	1d3ec <CC_HalWaitInterrupt>
   1e41c:	4606      	mov	r6, r0
   1e41e:	4a45      	ldr	r2, [pc, #276]	; (1e534 <ProcessHashDrv+0x210>)
   1e420:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e424:	2b00      	cmp	r3, #0
   1e426:	d1fb      	bne.n	1e420 <ProcessHashDrv+0xfc>
   1e428:	4a42      	ldr	r2, [pc, #264]	; (1e534 <ProcessHashDrv+0x210>)
   1e42a:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e42e:	2b00      	cmp	r3, #0
   1e430:	d1fb      	bne.n	1e42a <ProcessHashDrv+0x106>
   1e432:	6823      	ldr	r3, [r4, #0]
   1e434:	b15b      	cbz	r3, 1e44e <ProcessHashDrv+0x12a>
   1e436:	3b01      	subs	r3, #1
   1e438:	2b01      	cmp	r3, #1
   1e43a:	d818      	bhi.n	1e46e <ProcessHashDrv+0x14a>
   1e43c:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   1e440:	6263      	str	r3, [r4, #36]	; 0x24
   1e442:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   1e446:	6223      	str	r3, [r4, #32]
   1e448:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   1e44c:	61e3      	str	r3, [r4, #28]
   1e44e:	4b39      	ldr	r3, [pc, #228]	; (1e534 <ProcessHashDrv+0x210>)
   1e450:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1e454:	61a2      	str	r2, [r4, #24]
   1e456:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   1e45a:	6162      	str	r2, [r4, #20]
   1e45c:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   1e460:	6122      	str	r2, [r4, #16]
   1e462:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   1e466:	60e2      	str	r2, [r4, #12]
   1e468:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   1e46c:	60a3      	str	r3, [r4, #8]
   1e46e:	4a31      	ldr	r2, [pc, #196]	; (1e534 <ProcessHashDrv+0x210>)
   1e470:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1e474:	64a1      	str	r1, [r4, #72]	; 0x48
   1e476:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   1e47a:	64e1      	str	r1, [r4, #76]	; 0x4c
   1e47c:	2300      	movs	r3, #0
   1e47e:	2101      	movs	r1, #1
   1e480:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1e484:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   1e488:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e48c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e490:	2b00      	cmp	r3, #0
   1e492:	d1fb      	bne.n	1e48c <ProcessHashDrv+0x168>
   1e494:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   1e498:	2e00      	cmp	r6, #0
   1e49a:	d13b      	bne.n	1e514 <ProcessHashDrv+0x1f0>
   1e49c:	4b25      	ldr	r3, [pc, #148]	; (1e534 <ProcessHashDrv+0x210>)
   1e49e:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e4a2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1e4a6:	f7fe ff9b 	bl	1d3e0 <CC_HalMaskInterrupt>
   1e4aa:	2001      	movs	r0, #1
   1e4ac:	f7ff f864 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1e4b0:	bb60      	cbnz	r0, 1e50c <ProcessHashDrv+0x1e8>
   1e4b2:	481f      	ldr	r0, [pc, #124]	; (1e530 <ProcessHashDrv+0x20c>)
   1e4b4:	f7ff f838 	bl	1d528 <CC_PalMutexUnlock>
   1e4b8:	bb10      	cbnz	r0, 1e500 <ProcessHashDrv+0x1dc>
   1e4ba:	4630      	mov	r0, r6
   1e4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e4c0:	2304      	movs	r3, #4
   1e4c2:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1e4c6:	e7aa      	b.n	1e41e <ProcessHashDrv+0xfa>
   1e4c8:	4819      	ldr	r0, [pc, #100]	; (1e530 <ProcessHashDrv+0x20c>)
   1e4ca:	f04f 31ff 	mov.w	r1, #4294967295
   1e4ce:	f04f 0901 	mov.w	r9, #1
   1e4d2:	f7ff f821 	bl	1d518 <CC_PalMutexLock>
   1e4d6:	2800      	cmp	r0, #0
   1e4d8:	f43f af41 	beq.w	1e35e <ProcessHashDrv+0x3a>
   1e4dc:	4816      	ldr	r0, [pc, #88]	; (1e538 <ProcessHashDrv+0x214>)
   1e4de:	f7fe f8c7 	bl	1c670 <CC_PalAbort>
   1e4e2:	2000      	movs	r0, #0
   1e4e4:	f7ff f848 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1e4e8:	4606      	mov	r6, r0
   1e4ea:	2800      	cmp	r0, #0
   1e4ec:	f43f af3e 	beq.w	1e36c <ProcessHashDrv+0x48>
   1e4f0:	4812      	ldr	r0, [pc, #72]	; (1e53c <ProcessHashDrv+0x218>)
   1e4f2:	f7fe f8bd 	bl	1c670 <CC_PalAbort>
   1e4f6:	e739      	b.n	1e36c <ProcessHashDrv+0x48>
   1e4f8:	4e11      	ldr	r6, [pc, #68]	; (1e540 <ProcessHashDrv+0x21c>)
   1e4fa:	4630      	mov	r0, r6
   1e4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e500:	4810      	ldr	r0, [pc, #64]	; (1e544 <ProcessHashDrv+0x220>)
   1e502:	f7fe f8b5 	bl	1c670 <CC_PalAbort>
   1e506:	4630      	mov	r0, r6
   1e508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e50c:	480e      	ldr	r0, [pc, #56]	; (1e548 <ProcessHashDrv+0x224>)
   1e50e:	f7fe f8af 	bl	1c670 <CC_PalAbort>
   1e512:	e7ce      	b.n	1e4b2 <ProcessHashDrv+0x18e>
   1e514:	2110      	movs	r1, #16
   1e516:	f104 0008 	add.w	r0, r4, #8
   1e51a:	f7fe ffe5 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1e51e:	e7bd      	b.n	1e49c <ProcessHashDrv+0x178>
   1e520:	4e0a      	ldr	r6, [pc, #40]	; (1e54c <ProcessHashDrv+0x228>)
   1e522:	4630      	mov	r0, r6
   1e524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e528:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   1e52c:	e7c5      	b.n	1e4ba <ProcessHashDrv+0x196>
   1e52e:	bf00      	nop
   1e530:	20000840 	.word	0x20000840
   1e534:	5002b000 	.word	0x5002b000
   1e538:	000246a4 	.word	0x000246a4
   1e53c:	000246bc 	.word	0x000246bc
   1e540:	00f30001 	.word	0x00f30001
   1e544:	000246fc 	.word	0x000246fc
   1e548:	000246dc 	.word	0x000246dc
   1e54c:	00f30003 	.word	0x00f30003

0001e550 <FinishHashDrv>:
   1e550:	b398      	cbz	r0, 1e5ba <FinishHashDrv+0x6a>
   1e552:	b470      	push	{r4, r5, r6}
   1e554:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   1e558:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   1e55c:	ba26      	rev	r6, r4
   1e55e:	ba0d      	rev	r5, r1
   1e560:	ba14      	rev	r4, r2
   1e562:	ba19      	rev	r1, r3
   1e564:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   1e568:	ba12      	rev	r2, r2
   1e56a:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1e56e:	6182      	str	r2, [r0, #24]
   1e570:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1e574:	e9c0 6502 	strd	r6, r5, [r0, #8]
   1e578:	ba1b      	rev	r3, r3
   1e57a:	ba25      	rev	r5, r4
   1e57c:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1e580:	ba14      	rev	r4, r2
   1e582:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1e586:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1e588:	ba12      	rev	r2, r2
   1e58a:	ba09      	rev	r1, r1
   1e58c:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1e590:	62c2      	str	r2, [r0, #44]	; 0x2c
   1e592:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1e596:	ba1b      	rev	r3, r3
   1e598:	ba25      	rev	r5, r4
   1e59a:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1e59e:	ba14      	rev	r4, r2
   1e5a0:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1e5a4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1e5a6:	ba12      	rev	r2, r2
   1e5a8:	ba09      	rev	r1, r1
   1e5aa:	ba1b      	rev	r3, r3
   1e5ac:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1e5b0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1e5b4:	2000      	movs	r0, #0
   1e5b6:	bc70      	pop	{r4, r5, r6}
   1e5b8:	4770      	bx	lr
   1e5ba:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1e5be:	4770      	bx	lr

0001e5c0 <LoadAesKey>:
   1e5c0:	2800      	cmp	r0, #0
   1e5c2:	d046      	beq.n	1e652 <LoadAesKey+0x92>
   1e5c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1e5c8:	2b00      	cmp	r3, #0
   1e5ca:	d033      	beq.n	1e634 <LoadAesKey+0x74>
   1e5cc:	2b03      	cmp	r3, #3
   1e5ce:	b510      	push	{r4, lr}
   1e5d0:	d013      	beq.n	1e5fa <LoadAesKey+0x3a>
   1e5d2:	4821      	ldr	r0, [pc, #132]	; (1e658 <LoadAesKey+0x98>)
   1e5d4:	4c21      	ldr	r4, [pc, #132]	; (1e65c <LoadAesKey+0x9c>)
   1e5d6:	6822      	ldr	r2, [r4, #0]
   1e5d8:	4b21      	ldr	r3, [pc, #132]	; (1e660 <LoadAesKey+0xa0>)
   1e5da:	6812      	ldr	r2, [r2, #0]
   1e5dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e5e0:	6822      	ldr	r2, [r4, #0]
   1e5e2:	6852      	ldr	r2, [r2, #4]
   1e5e4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e5e8:	6822      	ldr	r2, [r4, #0]
   1e5ea:	6892      	ldr	r2, [r2, #8]
   1e5ec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e5f0:	6822      	ldr	r2, [r4, #0]
   1e5f2:	68d2      	ldr	r2, [r2, #12]
   1e5f4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e5f8:	bd10      	pop	{r4, pc}
   1e5fa:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1e5fc:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1e5fe:	4c17      	ldr	r4, [pc, #92]	; (1e65c <LoadAesKey+0x9c>)
   1e600:	f000 fb98 	bl	1ed34 <kmu_validate_kdr_slot_and_size>
   1e604:	2800      	cmp	r0, #0
   1e606:	d1e6      	bne.n	1e5d6 <LoadAesKey+0x16>
   1e608:	6822      	ldr	r2, [r4, #0]
   1e60a:	4b15      	ldr	r3, [pc, #84]	; (1e660 <LoadAesKey+0xa0>)
   1e60c:	6812      	ldr	r2, [r2, #0]
   1e60e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1e612:	6822      	ldr	r2, [r4, #0]
   1e614:	6852      	ldr	r2, [r2, #4]
   1e616:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1e61a:	6822      	ldr	r2, [r4, #0]
   1e61c:	6892      	ldr	r2, [r2, #8]
   1e61e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1e622:	6822      	ldr	r2, [r4, #0]
   1e624:	68d2      	ldr	r2, [r2, #12]
   1e626:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1e62a:	f000 fb8f 	bl	1ed4c <kmu_use_kdr_key>
   1e62e:	2800      	cmp	r0, #0
   1e630:	d1d1      	bne.n	1e5d6 <LoadAesKey+0x16>
   1e632:	bd10      	pop	{r4, pc}
   1e634:	4a0a      	ldr	r2, [pc, #40]	; (1e660 <LoadAesKey+0xa0>)
   1e636:	6901      	ldr	r1, [r0, #16]
   1e638:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   1e63c:	6941      	ldr	r1, [r0, #20]
   1e63e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   1e642:	6981      	ldr	r1, [r0, #24]
   1e644:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   1e648:	69c1      	ldr	r1, [r0, #28]
   1e64a:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   1e64e:	4618      	mov	r0, r3
   1e650:	4770      	bx	lr
   1e652:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1e656:	4770      	bx	lr
   1e658:	00f10009 	.word	0x00f10009
   1e65c:	20000830 	.word	0x20000830
   1e660:	5002b000 	.word	0x5002b000

0001e664 <InitAes.part.0>:
   1e664:	4a37      	ldr	r2, [pc, #220]	; (1e744 <InitAes.part.0+0xe0>)
   1e666:	b538      	push	{r3, r4, r5, lr}
   1e668:	4604      	mov	r4, r0
   1e66a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e66e:	2b00      	cmp	r3, #0
   1e670:	d1fb      	bne.n	1e66a <InitAes.part.0+0x6>
   1e672:	4a34      	ldr	r2, [pc, #208]	; (1e744 <InitAes.part.0+0xe0>)
   1e674:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e678:	2b00      	cmp	r3, #0
   1e67a:	d1fb      	bne.n	1e674 <InitAes.part.0+0x10>
   1e67c:	4a31      	ldr	r2, [pc, #196]	; (1e744 <InitAes.part.0+0xe0>)
   1e67e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1e682:	2b00      	cmp	r3, #0
   1e684:	d1fb      	bne.n	1e67e <InitAes.part.0+0x1a>
   1e686:	4a2f      	ldr	r2, [pc, #188]	; (1e744 <InitAes.part.0+0xe0>)
   1e688:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1e68c:	2b00      	cmp	r3, #0
   1e68e:	d1fb      	bne.n	1e688 <InitAes.part.0+0x24>
   1e690:	4a2c      	ldr	r2, [pc, #176]	; (1e744 <InitAes.part.0+0xe0>)
   1e692:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   1e696:	2b00      	cmp	r3, #0
   1e698:	d1fb      	bne.n	1e692 <InitAes.part.0+0x2e>
   1e69a:	4d2a      	ldr	r5, [pc, #168]	; (1e744 <InitAes.part.0+0xe0>)
   1e69c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1e6a0:	2b00      	cmp	r3, #0
   1e6a2:	d1fb      	bne.n	1e69c <InitAes.part.0+0x38>
   1e6a4:	f04f 30ff 	mov.w	r0, #4294967295
   1e6a8:	f7fe fe8c 	bl	1d3c4 <CC_HalClearInterruptBit>
   1e6ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e6ae:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1e6b2:	f023 0304 	bic.w	r3, r3, #4
   1e6b6:	2b03      	cmp	r3, #3
   1e6b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1e6ba:	d039      	beq.n	1e730 <InitAes.part.0+0xcc>
   1e6bc:	2b01      	cmp	r3, #1
   1e6be:	bf0c      	ite	eq
   1e6c0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1e6c4:	f020 0020 	bicne.w	r0, r0, #32
   1e6c8:	f7fe fe8a 	bl	1d3e0 <CC_HalMaskInterrupt>
   1e6cc:	4a1d      	ldr	r2, [pc, #116]	; (1e744 <InitAes.part.0+0xe0>)
   1e6ce:	2301      	movs	r3, #1
   1e6d0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   1e6d4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e6d8:	2b00      	cmp	r3, #0
   1e6da:	d1fb      	bne.n	1e6d4 <InitAes.part.0+0x70>
   1e6dc:	4a19      	ldr	r2, [pc, #100]	; (1e744 <InitAes.part.0+0xe0>)
   1e6de:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e6e2:	2b00      	cmp	r3, #0
   1e6e4:	d1fb      	bne.n	1e6de <InitAes.part.0+0x7a>
   1e6e6:	4917      	ldr	r1, [pc, #92]	; (1e744 <InitAes.part.0+0xe0>)
   1e6e8:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1e6ec:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	d1fb      	bne.n	1e6ec <InitAes.part.0+0x88>
   1e6f4:	4a13      	ldr	r2, [pc, #76]	; (1e744 <InitAes.part.0+0xe0>)
   1e6f6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1e6fa:	2b00      	cmp	r3, #0
   1e6fc:	d1fb      	bne.n	1e6f6 <InitAes.part.0+0x92>
   1e6fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e700:	f022 0104 	bic.w	r1, r2, #4
   1e704:	2903      	cmp	r1, #3
   1e706:	bf18      	it	ne
   1e708:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1e70a:	490e      	ldr	r1, [pc, #56]	; (1e744 <InitAes.part.0+0xe0>)
   1e70c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1e710:	bf18      	it	ne
   1e712:	f003 0301 	andne.w	r3, r3, #1
   1e716:	f002 021c 	and.w	r2, r2, #28
   1e71a:	4313      	orrs	r3, r2
   1e71c:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   1e720:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e722:	2b07      	cmp	r3, #7
   1e724:	bf04      	itt	eq
   1e726:	2301      	moveq	r3, #1
   1e728:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   1e72c:	2000      	movs	r0, #0
   1e72e:	bd38      	pop	{r3, r4, r5, pc}
   1e730:	2b01      	cmp	r3, #1
   1e732:	bf0c      	ite	eq
   1e734:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1e738:	f020 0010 	bicne.w	r0, r0, #16
   1e73c:	f7fe fe50 	bl	1d3e0 <CC_HalMaskInterrupt>
   1e740:	e7c4      	b.n	1e6cc <InitAes.part.0+0x68>
   1e742:	bf00      	nop
   1e744:	5002b000 	.word	0x5002b000

0001e748 <ProcessAesDrv>:
   1e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e74c:	b085      	sub	sp, #20
   1e74e:	2900      	cmp	r1, #0
   1e750:	f000 80a6 	beq.w	1e8a0 <ProcessAesDrv+0x158>
   1e754:	4690      	mov	r8, r2
   1e756:	2a00      	cmp	r2, #0
   1e758:	f000 80a2 	beq.w	1e8a0 <ProcessAesDrv+0x158>
   1e75c:	4605      	mov	r5, r0
   1e75e:	2800      	cmp	r0, #0
   1e760:	f000 813f 	beq.w	1e9e2 <ProcessAesDrv+0x29a>
   1e764:	4699      	mov	r9, r3
   1e766:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e768:	460e      	mov	r6, r1
   1e76a:	2b00      	cmp	r3, #0
   1e76c:	d151      	bne.n	1e812 <ProcessAesDrv+0xca>
   1e76e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1e772:	d253      	bcs.n	1e81c <ProcessAesDrv+0xd4>
   1e774:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1e778:	2b04      	cmp	r3, #4
   1e77a:	f000 8115 	beq.w	1e9a8 <ProcessAesDrv+0x260>
   1e77e:	2700      	movs	r7, #0
   1e780:	48a8      	ldr	r0, [pc, #672]	; (1ea24 <ProcessAesDrv+0x2dc>)
   1e782:	f04f 31ff 	mov.w	r1, #4294967295
   1e786:	f7fe fec7 	bl	1d518 <CC_PalMutexLock>
   1e78a:	2800      	cmp	r0, #0
   1e78c:	f040 80eb 	bne.w	1e966 <ProcessAesDrv+0x21e>
   1e790:	2000      	movs	r0, #0
   1e792:	f7fe fef1 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1e796:	2800      	cmp	r0, #0
   1e798:	f040 80ee 	bne.w	1e978 <ProcessAesDrv+0x230>
   1e79c:	48a2      	ldr	r0, [pc, #648]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e79e:	2301      	movs	r3, #1
   1e7a0:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   1e7a4:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   1e7a8:	2c00      	cmp	r4, #0
   1e7aa:	d1fb      	bne.n	1e7a4 <ProcessAesDrv+0x5c>
   1e7ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e7ae:	2b03      	cmp	r3, #3
   1e7b0:	dc39      	bgt.n	1e826 <ProcessAesDrv+0xde>
   1e7b2:	2b00      	cmp	r3, #0
   1e7b4:	da3a      	bge.n	1e82c <ProcessAesDrv+0xe4>
   1e7b6:	4c9d      	ldr	r4, [pc, #628]	; (1ea2c <ProcessAesDrv+0x2e4>)
   1e7b8:	4a9b      	ldr	r2, [pc, #620]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e7ba:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1e7be:	2b00      	cmp	r3, #0
   1e7c0:	d1fb      	bne.n	1e7ba <ProcessAesDrv+0x72>
   1e7c2:	2f00      	cmp	r7, #0
   1e7c4:	f040 80e7 	bne.w	1e996 <ProcessAesDrv+0x24e>
   1e7c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e7ca:	f023 0304 	bic.w	r3, r3, #4
   1e7ce:	2b03      	cmp	r3, #3
   1e7d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e7d2:	d059      	beq.n	1e888 <ProcessAesDrv+0x140>
   1e7d4:	2b01      	cmp	r3, #1
   1e7d6:	4b94      	ldr	r3, [pc, #592]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e7d8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e7dc:	bf0c      	ite	eq
   1e7de:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1e7e2:	f040 0020 	orrne.w	r0, r0, #32
   1e7e6:	f7fe fdfb 	bl	1d3e0 <CC_HalMaskInterrupt>
   1e7ea:	4b8f      	ldr	r3, [pc, #572]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e7ec:	2200      	movs	r2, #0
   1e7ee:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   1e7f2:	2001      	movs	r0, #1
   1e7f4:	f7fe fec0 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1e7f8:	2800      	cmp	r0, #0
   1e7fa:	f040 80c8 	bne.w	1e98e <ProcessAesDrv+0x246>
   1e7fe:	4889      	ldr	r0, [pc, #548]	; (1ea24 <ProcessAesDrv+0x2dc>)
   1e800:	f7fe fe92 	bl	1d528 <CC_PalMutexUnlock>
   1e804:	2800      	cmp	r0, #0
   1e806:	f040 80bb 	bne.w	1e980 <ProcessAesDrv+0x238>
   1e80a:	4620      	mov	r0, r4
   1e80c:	b005      	add	sp, #20
   1e80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e812:	2b01      	cmp	r3, #1
   1e814:	d1ae      	bne.n	1e774 <ProcessAesDrv+0x2c>
   1e816:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   1e81a:	d3ab      	bcc.n	1e774 <ProcessAesDrv+0x2c>
   1e81c:	4c84      	ldr	r4, [pc, #528]	; (1ea30 <ProcessAesDrv+0x2e8>)
   1e81e:	4620      	mov	r0, r4
   1e820:	b005      	add	sp, #20
   1e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e826:	3b06      	subs	r3, #6
   1e828:	2b01      	cmp	r3, #1
   1e82a:	d8c4      	bhi.n	1e7b6 <ProcessAesDrv+0x6e>
   1e82c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1e82e:	2b01      	cmp	r3, #1
   1e830:	f200 80d5 	bhi.w	1e9de <ProcessAesDrv+0x296>
   1e834:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e836:	2b01      	cmp	r3, #1
   1e838:	d837      	bhi.n	1e8aa <ProcessAesDrv+0x162>
   1e83a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e83c:	2b01      	cmp	r3, #1
   1e83e:	f200 8126 	bhi.w	1ea8e <ProcessAesDrv+0x346>
   1e842:	4628      	mov	r0, r5
   1e844:	f7ff ff0e 	bl	1e664 <InitAes.part.0>
   1e848:	4604      	mov	r4, r0
   1e84a:	2800      	cmp	r0, #0
   1e84c:	d1b4      	bne.n	1e7b8 <ProcessAesDrv+0x70>
   1e84e:	4628      	mov	r0, r5
   1e850:	f7ff feb6 	bl	1e5c0 <LoadAesKey>
   1e854:	4604      	mov	r4, r0
   1e856:	2800      	cmp	r0, #0
   1e858:	d1ae      	bne.n	1e7b8 <ProcessAesDrv+0x70>
   1e85a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e85c:	2b07      	cmp	r3, #7
   1e85e:	d8aa      	bhi.n	1e7b6 <ProcessAesDrv+0x6e>
   1e860:	a201      	add	r2, pc, #4	; (adr r2, 1e868 <ProcessAesDrv+0x120>)
   1e862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e866:	bf00      	nop
   1e868:	0001e8cb 	.word	0x0001e8cb
   1e86c:	0001e8af 	.word	0x0001e8af
   1e870:	0001ea55 	.word	0x0001ea55
   1e874:	0001e8af 	.word	0x0001e8af
   1e878:	0001e7b7 	.word	0x0001e7b7
   1e87c:	0001e7b7 	.word	0x0001e7b7
   1e880:	0001ea55 	.word	0x0001ea55
   1e884:	0001e8af 	.word	0x0001e8af
   1e888:	2b01      	cmp	r3, #1
   1e88a:	4b67      	ldr	r3, [pc, #412]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e88c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1e890:	bf0c      	ite	eq
   1e892:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1e896:	f040 0010 	orrne.w	r0, r0, #16
   1e89a:	f7fe fda1 	bl	1d3e0 <CC_HalMaskInterrupt>
   1e89e:	e7a4      	b.n	1e7ea <ProcessAesDrv+0xa2>
   1e8a0:	4c64      	ldr	r4, [pc, #400]	; (1ea34 <ProcessAesDrv+0x2ec>)
   1e8a2:	4620      	mov	r0, r4
   1e8a4:	b005      	add	sp, #20
   1e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8aa:	4c63      	ldr	r4, [pc, #396]	; (1ea38 <ProcessAesDrv+0x2f0>)
   1e8ac:	e784      	b.n	1e7b8 <ProcessAesDrv+0x70>
   1e8ae:	4b5e      	ldr	r3, [pc, #376]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e8b0:	682a      	ldr	r2, [r5, #0]
   1e8b2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1e8b6:	686a      	ldr	r2, [r5, #4]
   1e8b8:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1e8bc:	68aa      	ldr	r2, [r5, #8]
   1e8be:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1e8c2:	68ea      	ldr	r2, [r5, #12]
   1e8c4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1e8c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e8ca:	6832      	ldr	r2, [r6, #0]
   1e8cc:	f023 0304 	bic.w	r3, r3, #4
   1e8d0:	2b03      	cmp	r3, #3
   1e8d2:	d00d      	beq.n	1e8f0 <ProcessAesDrv+0x1a8>
   1e8d4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e8d6:	f8d8 1000 	ldr.w	r1, [r8]
   1e8da:	2b01      	cmp	r3, #1
   1e8dc:	4b52      	ldr	r3, [pc, #328]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e8de:	bf0b      	itete	eq
   1e8e0:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   1e8e4:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   1e8e8:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1e8ec:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   1e8f0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e8f2:	2b01      	cmp	r3, #1
   1e8f4:	4b4c      	ldr	r3, [pc, #304]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e8f6:	bf0b      	itete	eq
   1e8f8:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1e8fc:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   1e900:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   1e904:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   1e908:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e90a:	f023 0304 	bic.w	r3, r3, #4
   1e90e:	2b03      	cmp	r3, #3
   1e910:	d06a      	beq.n	1e9e8 <ProcessAesDrv+0x2a0>
   1e912:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e914:	2b01      	cmp	r3, #1
   1e916:	bf0c      	ite	eq
   1e918:	2080      	moveq	r0, #128	; 0x80
   1e91a:	2020      	movne	r0, #32
   1e91c:	f7fe fd66 	bl	1d3ec <CC_HalWaitInterrupt>
   1e920:	4604      	mov	r4, r0
   1e922:	2800      	cmp	r0, #0
   1e924:	f47f af48 	bne.w	1e7b8 <ProcessAesDrv+0x70>
   1e928:	4b3f      	ldr	r3, [pc, #252]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e92a:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   1e92e:	2c00      	cmp	r4, #0
   1e930:	d1fb      	bne.n	1e92a <ProcessAesDrv+0x1e2>
   1e932:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e934:	3b01      	subs	r3, #1
   1e936:	2b06      	cmp	r3, #6
   1e938:	d812      	bhi.n	1e960 <ProcessAesDrv+0x218>
   1e93a:	e8df f003 	tbb	[pc, r3]
   1e93e:	9a04      	.short	0x9a04
   1e940:	9a111104 	.word	0x9a111104
   1e944:	04          	.byte	0x04
   1e945:	00          	.byte	0x00
   1e946:	4b38      	ldr	r3, [pc, #224]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e948:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1e94c:	602a      	str	r2, [r5, #0]
   1e94e:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1e952:	606a      	str	r2, [r5, #4]
   1e954:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1e958:	60aa      	str	r2, [r5, #8]
   1e95a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1e95e:	60eb      	str	r3, [r5, #12]
   1e960:	2301      	movs	r3, #1
   1e962:	65ab      	str	r3, [r5, #88]	; 0x58
   1e964:	e728      	b.n	1e7b8 <ProcessAesDrv+0x70>
   1e966:	4835      	ldr	r0, [pc, #212]	; (1ea3c <ProcessAesDrv+0x2f4>)
   1e968:	f7fd fe82 	bl	1c670 <CC_PalAbort>
   1e96c:	2000      	movs	r0, #0
   1e96e:	f7fe fe03 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1e972:	2800      	cmp	r0, #0
   1e974:	f43f af12 	beq.w	1e79c <ProcessAesDrv+0x54>
   1e978:	4831      	ldr	r0, [pc, #196]	; (1ea40 <ProcessAesDrv+0x2f8>)
   1e97a:	f7fd fe79 	bl	1c670 <CC_PalAbort>
   1e97e:	e70d      	b.n	1e79c <ProcessAesDrv+0x54>
   1e980:	4830      	ldr	r0, [pc, #192]	; (1ea44 <ProcessAesDrv+0x2fc>)
   1e982:	f7fd fe75 	bl	1c670 <CC_PalAbort>
   1e986:	4620      	mov	r0, r4
   1e988:	b005      	add	sp, #20
   1e98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e98e:	482e      	ldr	r0, [pc, #184]	; (1ea48 <ProcessAesDrv+0x300>)
   1e990:	f7fd fe6e 	bl	1c670 <CC_PalAbort>
   1e994:	e733      	b.n	1e7fe <ProcessAesDrv+0xb6>
   1e996:	2304      	movs	r3, #4
   1e998:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1e99c:	2120      	movs	r1, #32
   1e99e:	f105 0010 	add.w	r0, r5, #16
   1e9a2:	f7fe fda1 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1e9a6:	e70f      	b.n	1e7c8 <ProcessAesDrv+0x80>
   1e9a8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1e9aa:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1e9ac:	f000 f9b6 	bl	1ed1c <kmu_validate_slot_and_size>
   1e9b0:	b998      	cbnz	r0, 1e9da <ProcessAesDrv+0x292>
   1e9b2:	4f26      	ldr	r7, [pc, #152]	; (1ea4c <ProcessAesDrv+0x304>)
   1e9b4:	4c1c      	ldr	r4, [pc, #112]	; (1ea28 <ProcessAesDrv+0x2e0>)
   1e9b6:	683b      	ldr	r3, [r7, #0]
   1e9b8:	681b      	ldr	r3, [r3, #0]
   1e9ba:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1e9be:	683b      	ldr	r3, [r7, #0]
   1e9c0:	685b      	ldr	r3, [r3, #4]
   1e9c2:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1e9c6:	683b      	ldr	r3, [r7, #0]
   1e9c8:	689b      	ldr	r3, [r3, #8]
   1e9ca:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1e9ce:	683b      	ldr	r3, [r7, #0]
   1e9d0:	68db      	ldr	r3, [r3, #12]
   1e9d2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1e9d6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1e9d8:	b161      	cbz	r1, 1e9f4 <ProcessAesDrv+0x2ac>
   1e9da:	2701      	movs	r7, #1
   1e9dc:	e6d0      	b.n	1e780 <ProcessAesDrv+0x38>
   1e9de:	4c1c      	ldr	r4, [pc, #112]	; (1ea50 <ProcessAesDrv+0x308>)
   1e9e0:	e6ea      	b.n	1e7b8 <ProcessAesDrv+0x70>
   1e9e2:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1e9e6:	e710      	b.n	1e80a <ProcessAesDrv+0xc2>
   1e9e8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e9ea:	2b01      	cmp	r3, #1
   1e9ec:	bf0c      	ite	eq
   1e9ee:	2040      	moveq	r0, #64	; 0x40
   1e9f0:	2010      	movne	r0, #16
   1e9f2:	e793      	b.n	1e91c <ProcessAesDrv+0x1d4>
   1e9f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1e9f6:	9301      	str	r3, [sp, #4]
   1e9f8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   1e9fa:	9300      	str	r3, [sp, #0]
   1e9fc:	f105 0a10 	add.w	sl, r5, #16
   1ea00:	f04f 0b10 	mov.w	fp, #16
   1ea04:	f8cd a008 	str.w	sl, [sp, #8]
   1ea08:	f8cd b00c 	str.w	fp, [sp, #12]
   1ea0c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   1ea10:	6c28      	ldr	r0, [r5, #64]	; 0x40
   1ea12:	f000 f9a5 	bl	1ed60 <kmu_derive_cmac>
   1ea16:	2800      	cmp	r0, #0
   1ea18:	d13b      	bne.n	1ea92 <ProcessAesDrv+0x34a>
   1ea1a:	2300      	movs	r3, #0
   1ea1c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   1ea20:	e7db      	b.n	1e9da <ProcessAesDrv+0x292>
   1ea22:	bf00      	nop
   1ea24:	20000840 	.word	0x20000840
   1ea28:	5002b000 	.word	0x5002b000
   1ea2c:	00f10001 	.word	0x00f10001
   1ea30:	00f10005 	.word	0x00f10005
   1ea34:	00f1000b 	.word	0x00f1000b
   1ea38:	00f10003 	.word	0x00f10003
   1ea3c:	000246a4 	.word	0x000246a4
   1ea40:	000246bc 	.word	0x000246bc
   1ea44:	000246fc 	.word	0x000246fc
   1ea48:	000246dc 	.word	0x000246dc
   1ea4c:	20000830 	.word	0x20000830
   1ea50:	00f10002 	.word	0x00f10002
   1ea54:	4b19      	ldr	r3, [pc, #100]	; (1eabc <ProcessAesDrv+0x374>)
   1ea56:	682a      	ldr	r2, [r5, #0]
   1ea58:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1ea5c:	686a      	ldr	r2, [r5, #4]
   1ea5e:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1ea62:	68aa      	ldr	r2, [r5, #8]
   1ea64:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1ea68:	68ea      	ldr	r2, [r5, #12]
   1ea6a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1ea6e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1ea70:	e72b      	b.n	1e8ca <ProcessAesDrv+0x182>
   1ea72:	4b12      	ldr	r3, [pc, #72]	; (1eabc <ProcessAesDrv+0x374>)
   1ea74:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ea78:	602a      	str	r2, [r5, #0]
   1ea7a:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ea7e:	606a      	str	r2, [r5, #4]
   1ea80:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ea84:	60aa      	str	r2, [r5, #8]
   1ea86:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ea8a:	60eb      	str	r3, [r5, #12]
   1ea8c:	e768      	b.n	1e960 <ProcessAesDrv+0x218>
   1ea8e:	4c0c      	ldr	r4, [pc, #48]	; (1eac0 <ProcessAesDrv+0x378>)
   1ea90:	e692      	b.n	1e7b8 <ProcessAesDrv+0x70>
   1ea92:	683b      	ldr	r3, [r7, #0]
   1ea94:	681b      	ldr	r3, [r3, #0]
   1ea96:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   1ea9a:	683b      	ldr	r3, [r7, #0]
   1ea9c:	685b      	ldr	r3, [r3, #4]
   1ea9e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1eaa2:	683b      	ldr	r3, [r7, #0]
   1eaa4:	689b      	ldr	r3, [r3, #8]
   1eaa6:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   1eaaa:	683b      	ldr	r3, [r7, #0]
   1eaac:	68db      	ldr	r3, [r3, #12]
   1eaae:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1eab2:	4659      	mov	r1, fp
   1eab4:	4650      	mov	r0, sl
   1eab6:	f7fe fd17 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1eaba:	e7ae      	b.n	1ea1a <ProcessAesDrv+0x2d2>
   1eabc:	5002b000 	.word	0x5002b000
   1eac0:	00f10004 	.word	0x00f10004

0001eac4 <FinishAesDrv>:
   1eac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eac8:	b301      	cbz	r1, 1eb0c <FinishAesDrv+0x48>
   1eaca:	b1fa      	cbz	r2, 1eb0c <FinishAesDrv+0x48>
   1eacc:	4604      	mov	r4, r0
   1eace:	2800      	cmp	r0, #0
   1ead0:	d07c      	beq.n	1ebcc <FinishAesDrv+0x108>
   1ead2:	461d      	mov	r5, r3
   1ead4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ead6:	2b07      	cmp	r3, #7
   1ead8:	460e      	mov	r6, r1
   1eada:	d01b      	beq.n	1eb14 <FinishAesDrv+0x50>
   1eadc:	b95d      	cbnz	r5, 1eaf6 <FinishAesDrv+0x32>
   1eade:	2b03      	cmp	r3, #3
   1eae0:	d110      	bne.n	1eb04 <FinishAesDrv+0x40>
   1eae2:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1eae4:	b973      	cbnz	r3, 1eb04 <FinishAesDrv+0x40>
   1eae6:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1eaea:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1eaee:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1eaf2:	600b      	str	r3, [r1, #0]
   1eaf4:	2510      	movs	r5, #16
   1eaf6:	462b      	mov	r3, r5
   1eaf8:	4631      	mov	r1, r6
   1eafa:	4620      	mov	r0, r4
   1eafc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1eb00:	f7ff be22 	b.w	1e748 <ProcessAesDrv>
   1eb04:	462f      	mov	r7, r5
   1eb06:	4638      	mov	r0, r7
   1eb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb0c:	4f77      	ldr	r7, [pc, #476]	; (1ecec <FinishAesDrv+0x228>)
   1eb0e:	4638      	mov	r0, r7
   1eb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eb14:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1eb16:	2b00      	cmp	r3, #0
   1eb18:	d15b      	bne.n	1ebd2 <FinishAesDrv+0x10e>
   1eb1a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1eb1e:	d25d      	bcs.n	1ebdc <FinishAesDrv+0x118>
   1eb20:	b915      	cbnz	r5, 1eb28 <FinishAesDrv+0x64>
   1eb22:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1eb24:	2b00      	cmp	r3, #0
   1eb26:	d159      	bne.n	1ebdc <FinishAesDrv+0x118>
   1eb28:	4871      	ldr	r0, [pc, #452]	; (1ecf0 <FinishAesDrv+0x22c>)
   1eb2a:	f04f 31ff 	mov.w	r1, #4294967295
   1eb2e:	f7fe fcf3 	bl	1d518 <CC_PalMutexLock>
   1eb32:	2800      	cmp	r0, #0
   1eb34:	f040 80b8 	bne.w	1eca8 <FinishAesDrv+0x1e4>
   1eb38:	2000      	movs	r0, #0
   1eb3a:	f7fe fd1d 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1eb3e:	2800      	cmp	r0, #0
   1eb40:	f040 80ae 	bne.w	1eca0 <FinishAesDrv+0x1dc>
   1eb44:	4a6b      	ldr	r2, [pc, #428]	; (1ecf4 <FinishAesDrv+0x230>)
   1eb46:	2301      	movs	r3, #1
   1eb48:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1eb4c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1eb50:	2b00      	cmp	r3, #0
   1eb52:	d1fb      	bne.n	1eb4c <FinishAesDrv+0x88>
   1eb54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eb56:	2b03      	cmp	r3, #3
   1eb58:	dd20      	ble.n	1eb9c <FinishAesDrv+0xd8>
   1eb5a:	3b06      	subs	r3, #6
   1eb5c:	2b01      	cmp	r3, #1
   1eb5e:	d81f      	bhi.n	1eba0 <FinishAesDrv+0xdc>
   1eb60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1eb62:	2b01      	cmp	r3, #1
   1eb64:	d83c      	bhi.n	1ebe0 <FinishAesDrv+0x11c>
   1eb66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1eb68:	2b01      	cmp	r3, #1
   1eb6a:	f200 80a5 	bhi.w	1ecb8 <FinishAesDrv+0x1f4>
   1eb6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1eb70:	2b01      	cmp	r3, #1
   1eb72:	f200 80a3 	bhi.w	1ecbc <FinishAesDrv+0x1f8>
   1eb76:	4620      	mov	r0, r4
   1eb78:	f7ff fd74 	bl	1e664 <InitAes.part.0>
   1eb7c:	4607      	mov	r7, r0
   1eb7e:	b980      	cbnz	r0, 1eba2 <FinishAesDrv+0xde>
   1eb80:	4620      	mov	r0, r4
   1eb82:	f7ff fd1d 	bl	1e5c0 <LoadAesKey>
   1eb86:	4607      	mov	r7, r0
   1eb88:	b958      	cbnz	r0, 1eba2 <FinishAesDrv+0xde>
   1eb8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1eb8c:	2b07      	cmp	r3, #7
   1eb8e:	d807      	bhi.n	1eba0 <FinishAesDrv+0xdc>
   1eb90:	e8df f003 	tbb	[pc, r3]
   1eb94:	285c2835 	.word	0x285c2835
   1eb98:	285c0606 	.word	0x285c0606
   1eb9c:	2b00      	cmp	r3, #0
   1eb9e:	dadf      	bge.n	1eb60 <FinishAesDrv+0x9c>
   1eba0:	4f55      	ldr	r7, [pc, #340]	; (1ecf8 <FinishAesDrv+0x234>)
   1eba2:	4a54      	ldr	r2, [pc, #336]	; (1ecf4 <FinishAesDrv+0x230>)
   1eba4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1eba8:	2b00      	cmp	r3, #0
   1ebaa:	d1fb      	bne.n	1eba4 <FinishAesDrv+0xe0>
   1ebac:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   1ebb0:	2001      	movs	r0, #1
   1ebb2:	f7fe fce1 	bl	1d578 <CC_PalPowerSaveModeSelect>
   1ebb6:	2800      	cmp	r0, #0
   1ebb8:	d17a      	bne.n	1ecb0 <FinishAesDrv+0x1ec>
   1ebba:	484d      	ldr	r0, [pc, #308]	; (1ecf0 <FinishAesDrv+0x22c>)
   1ebbc:	f7fe fcb4 	bl	1d528 <CC_PalMutexUnlock>
   1ebc0:	2800      	cmp	r0, #0
   1ebc2:	d0a0      	beq.n	1eb06 <FinishAesDrv+0x42>
   1ebc4:	484d      	ldr	r0, [pc, #308]	; (1ecfc <FinishAesDrv+0x238>)
   1ebc6:	f7fd fd53 	bl	1c670 <CC_PalAbort>
   1ebca:	e79c      	b.n	1eb06 <FinishAesDrv+0x42>
   1ebcc:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1ebd0:	e799      	b.n	1eb06 <FinishAesDrv+0x42>
   1ebd2:	2b01      	cmp	r3, #1
   1ebd4:	d1a4      	bne.n	1eb20 <FinishAesDrv+0x5c>
   1ebd6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1ebda:	d3a1      	bcc.n	1eb20 <FinishAesDrv+0x5c>
   1ebdc:	4f48      	ldr	r7, [pc, #288]	; (1ed00 <FinishAesDrv+0x23c>)
   1ebde:	e792      	b.n	1eb06 <FinishAesDrv+0x42>
   1ebe0:	4f48      	ldr	r7, [pc, #288]	; (1ed04 <FinishAesDrv+0x240>)
   1ebe2:	e7de      	b.n	1eba2 <FinishAesDrv+0xde>
   1ebe4:	4b43      	ldr	r3, [pc, #268]	; (1ecf4 <FinishAesDrv+0x230>)
   1ebe6:	6822      	ldr	r2, [r4, #0]
   1ebe8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   1ebec:	6862      	ldr	r2, [r4, #4]
   1ebee:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   1ebf2:	68a2      	ldr	r2, [r4, #8]
   1ebf4:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   1ebf8:	68e2      	ldr	r2, [r4, #12]
   1ebfa:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   1ebfe:	4b3d      	ldr	r3, [pc, #244]	; (1ecf4 <FinishAesDrv+0x230>)
   1ec00:	2201      	movs	r2, #1
   1ec02:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   1ec06:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   1ec0a:	2d00      	cmp	r5, #0
   1ec0c:	d158      	bne.n	1ecc0 <FinishAesDrv+0x1fc>
   1ec0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
   1ec10:	b909      	cbnz	r1, 1ec16 <FinishAesDrv+0x152>
   1ec12:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   1ec16:	4b37      	ldr	r3, [pc, #220]	; (1ecf4 <FinishAesDrv+0x230>)
   1ec18:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   1ec1c:	2f00      	cmp	r7, #0
   1ec1e:	d1fb      	bne.n	1ec18 <FinishAesDrv+0x154>
   1ec20:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1ec22:	3b01      	subs	r3, #1
   1ec24:	2b06      	cmp	r3, #6
   1ec26:	d8bc      	bhi.n	1eba2 <FinishAesDrv+0xde>
   1ec28:	a201      	add	r2, pc, #4	; (adr r2, 1ec30 <FinishAesDrv+0x16c>)
   1ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ec2e:	bf00      	nop
   1ec30:	0001ec69 	.word	0x0001ec69
   1ec34:	0001ec85 	.word	0x0001ec85
   1ec38:	0001ec69 	.word	0x0001ec69
   1ec3c:	0001eba3 	.word	0x0001eba3
   1ec40:	0001eba3 	.word	0x0001eba3
   1ec44:	0001ec85 	.word	0x0001ec85
   1ec48:	0001ec69 	.word	0x0001ec69
   1ec4c:	4b29      	ldr	r3, [pc, #164]	; (1ecf4 <FinishAesDrv+0x230>)
   1ec4e:	6822      	ldr	r2, [r4, #0]
   1ec50:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   1ec54:	6862      	ldr	r2, [r4, #4]
   1ec56:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   1ec5a:	68a2      	ldr	r2, [r4, #8]
   1ec5c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   1ec60:	68e2      	ldr	r2, [r4, #12]
   1ec62:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   1ec66:	e7ca      	b.n	1ebfe <FinishAesDrv+0x13a>
   1ec68:	4b22      	ldr	r3, [pc, #136]	; (1ecf4 <FinishAesDrv+0x230>)
   1ec6a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   1ec6e:	6022      	str	r2, [r4, #0]
   1ec70:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   1ec74:	6062      	str	r2, [r4, #4]
   1ec76:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   1ec7a:	60a2      	str	r2, [r4, #8]
   1ec7c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   1ec80:	60e3      	str	r3, [r4, #12]
   1ec82:	e78e      	b.n	1eba2 <FinishAesDrv+0xde>
   1ec84:	4b1b      	ldr	r3, [pc, #108]	; (1ecf4 <FinishAesDrv+0x230>)
   1ec86:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   1ec8a:	6022      	str	r2, [r4, #0]
   1ec8c:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   1ec90:	6062      	str	r2, [r4, #4]
   1ec92:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   1ec96:	60a2      	str	r2, [r4, #8]
   1ec98:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   1ec9c:	60e3      	str	r3, [r4, #12]
   1ec9e:	e780      	b.n	1eba2 <FinishAesDrv+0xde>
   1eca0:	4819      	ldr	r0, [pc, #100]	; (1ed08 <FinishAesDrv+0x244>)
   1eca2:	f7fd fce5 	bl	1c670 <CC_PalAbort>
   1eca6:	e74d      	b.n	1eb44 <FinishAesDrv+0x80>
   1eca8:	4818      	ldr	r0, [pc, #96]	; (1ed0c <FinishAesDrv+0x248>)
   1ecaa:	f7fd fce1 	bl	1c670 <CC_PalAbort>
   1ecae:	e743      	b.n	1eb38 <FinishAesDrv+0x74>
   1ecb0:	4817      	ldr	r0, [pc, #92]	; (1ed10 <FinishAesDrv+0x24c>)
   1ecb2:	f7fd fcdd 	bl	1c670 <CC_PalAbort>
   1ecb6:	e780      	b.n	1ebba <FinishAesDrv+0xf6>
   1ecb8:	4f16      	ldr	r7, [pc, #88]	; (1ed14 <FinishAesDrv+0x250>)
   1ecba:	e772      	b.n	1eba2 <FinishAesDrv+0xde>
   1ecbc:	4f16      	ldr	r7, [pc, #88]	; (1ed18 <FinishAesDrv+0x254>)
   1ecbe:	e770      	b.n	1eba2 <FinishAesDrv+0xde>
   1ecc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   1ecc2:	6832      	ldr	r2, [r6, #0]
   1ecc4:	2901      	cmp	r1, #1
   1ecc6:	d00a      	beq.n	1ecde <FinishAesDrv+0x21a>
   1ecc8:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   1eccc:	2010      	movs	r0, #16
   1ecce:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   1ecd2:	f7fe fb8b 	bl	1d3ec <CC_HalWaitInterrupt>
   1ecd6:	4607      	mov	r7, r0
   1ecd8:	2800      	cmp	r0, #0
   1ecda:	d09c      	beq.n	1ec16 <FinishAesDrv+0x152>
   1ecdc:	e761      	b.n	1eba2 <FinishAesDrv+0xde>
   1ecde:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   1ece2:	2040      	movs	r0, #64	; 0x40
   1ece4:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   1ece8:	e7f3      	b.n	1ecd2 <FinishAesDrv+0x20e>
   1ecea:	bf00      	nop
   1ecec:	00f1000b 	.word	0x00f1000b
   1ecf0:	20000840 	.word	0x20000840
   1ecf4:	5002b000 	.word	0x5002b000
   1ecf8:	00f10001 	.word	0x00f10001
   1ecfc:	000246fc 	.word	0x000246fc
   1ed00:	00f10005 	.word	0x00f10005
   1ed04:	00f10002 	.word	0x00f10002
   1ed08:	000246bc 	.word	0x000246bc
   1ed0c:	000246a4 	.word	0x000246a4
   1ed10:	000246dc 	.word	0x000246dc
   1ed14:	00f10003 	.word	0x00f10003
   1ed18:	00f10004 	.word	0x00f10004

0001ed1c <kmu_validate_slot_and_size>:
   1ed1c:	b921      	cbnz	r1, 1ed28 <kmu_validate_slot_and_size+0xc>
   1ed1e:	4b03      	ldr	r3, [pc, #12]	; (1ed2c <kmu_validate_slot_and_size+0x10>)
   1ed20:	2800      	cmp	r0, #0
   1ed22:	bf18      	it	ne
   1ed24:	4618      	movne	r0, r3
   1ed26:	4770      	bx	lr
   1ed28:	4801      	ldr	r0, [pc, #4]	; (1ed30 <kmu_validate_slot_and_size+0x14>)
   1ed2a:	4770      	bx	lr
   1ed2c:	00f70001 	.word	0x00f70001
   1ed30:	00f70003 	.word	0x00f70003

0001ed34 <kmu_validate_kdr_slot_and_size>:
   1ed34:	b921      	cbnz	r1, 1ed40 <kmu_validate_kdr_slot_and_size+0xc>
   1ed36:	4b03      	ldr	r3, [pc, #12]	; (1ed44 <kmu_validate_kdr_slot_and_size+0x10>)
   1ed38:	2800      	cmp	r0, #0
   1ed3a:	bf18      	it	ne
   1ed3c:	4618      	movne	r0, r3
   1ed3e:	4770      	bx	lr
   1ed40:	4801      	ldr	r0, [pc, #4]	; (1ed48 <kmu_validate_kdr_slot_and_size+0x14>)
   1ed42:	4770      	bx	lr
   1ed44:	00f70001 	.word	0x00f70001
   1ed48:	00f70003 	.word	0x00f70003

0001ed4c <kmu_use_kdr_key>:
   1ed4c:	4b03      	ldr	r3, [pc, #12]	; (1ed5c <kmu_use_kdr_key+0x10>)
   1ed4e:	2000      	movs	r0, #0
   1ed50:	2201      	movs	r2, #1
   1ed52:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   1ed56:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   1ed5a:	4770      	bx	lr
   1ed5c:	5002b000 	.word	0x5002b000

0001ed60 <kmu_derive_cmac>:
   1ed60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed64:	b0cc      	sub	sp, #304	; 0x130
   1ed66:	2400      	movs	r4, #0
   1ed68:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   1ed6a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   1ed6e:	4681      	mov	r9, r0
   1ed70:	460f      	mov	r7, r1
   1ed72:	4616      	mov	r6, r2
   1ed74:	4621      	mov	r1, r4
   1ed76:	2274      	movs	r2, #116	; 0x74
   1ed78:	a80e      	add	r0, sp, #56	; 0x38
   1ed7a:	469a      	mov	sl, r3
   1ed7c:	f004 fd32 	bl	237e4 <memset>
   1ed80:	2280      	movs	r2, #128	; 0x80
   1ed82:	4621      	mov	r1, r4
   1ed84:	a82c      	add	r0, sp, #176	; 0xb0
   1ed86:	942b      	str	r4, [sp, #172]	; 0xac
   1ed88:	f004 fd2c 	bl	237e4 <memset>
   1ed8c:	2384      	movs	r3, #132	; 0x84
   1ed8e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1ed92:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1ed96:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1ed9a:	9305      	str	r3, [sp, #20]
   1ed9c:	d85e      	bhi.n	1ee5c <kmu_derive_cmac+0xfc>
   1ed9e:	ab05      	add	r3, sp, #20
   1eda0:	4630      	mov	r0, r6
   1eda2:	ae2b      	add	r6, sp, #172	; 0xac
   1eda4:	9301      	str	r3, [sp, #4]
   1eda6:	9502      	str	r5, [sp, #8]
   1eda8:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   1edac:	4651      	mov	r1, sl
   1edae:	9600      	str	r6, [sp, #0]
   1edb0:	f000 f864 	bl	1ee7c <UtilCmacBuildDataForDerivation>
   1edb4:	2800      	cmp	r0, #0
   1edb6:	d14c      	bne.n	1ee52 <kmu_derive_cmac+0xf2>
   1edb8:	2303      	movs	r3, #3
   1edba:	f88d 3013 	strb.w	r3, [sp, #19]
   1edbe:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1edc2:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1edc6:	2307      	movs	r3, #7
   1edc8:	2200      	movs	r2, #0
   1edca:	901c      	str	r0, [sp, #112]	; 0x70
   1edcc:	2110      	movs	r1, #16
   1edce:	a80e      	add	r0, sp, #56	; 0x38
   1edd0:	931b      	str	r3, [sp, #108]	; 0x6c
   1edd2:	2401      	movs	r4, #1
   1edd4:	2301      	movs	r3, #1
   1edd6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1edda:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1edde:	971a      	str	r7, [sp, #104]	; 0x68
   1ede0:	9426      	str	r4, [sp, #152]	; 0x98
   1ede2:	f10d 0920 	add.w	r9, sp, #32
   1ede6:	f7fe fb7f 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1edea:	2210      	movs	r2, #16
   1edec:	9200      	str	r2, [sp, #0]
   1edee:	9905      	ldr	r1, [sp, #20]
   1edf0:	f8cd 9004 	str.w	r9, [sp, #4]
   1edf4:	ab0a      	add	r3, sp, #40	; 0x28
   1edf6:	4630      	mov	r0, r6
   1edf8:	aa06      	add	r2, sp, #24
   1edfa:	f7ff fa35 	bl	1e268 <SetDataBuffersInfo>
   1edfe:	4607      	mov	r7, r0
   1ee00:	b170      	cbz	r0, 1ee20 <kmu_derive_cmac+0xc0>
   1ee02:	e01d      	b.n	1ee40 <kmu_derive_cmac+0xe0>
   1ee04:	a90e      	add	r1, sp, #56	; 0x38
   1ee06:	eb08 0007 	add.w	r0, r8, r7
   1ee0a:	f7fe fb69 	bl	1d4e0 <CC_PalMemCopyPlat>
   1ee0e:	2110      	movs	r1, #16
   1ee10:	a80e      	add	r0, sp, #56	; 0x38
   1ee12:	f7fe fb69 	bl	1d4e8 <CC_PalMemSetZeroPlat>
   1ee16:	3401      	adds	r4, #1
   1ee18:	1bad      	subs	r5, r5, r6
   1ee1a:	4437      	add	r7, r6
   1ee1c:	b2e4      	uxtb	r4, r4
   1ee1e:	d022      	beq.n	1ee66 <kmu_derive_cmac+0x106>
   1ee20:	2d10      	cmp	r5, #16
   1ee22:	464a      	mov	r2, r9
   1ee24:	9b05      	ldr	r3, [sp, #20]
   1ee26:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1ee2a:	a906      	add	r1, sp, #24
   1ee2c:	a80e      	add	r0, sp, #56	; 0x38
   1ee2e:	462e      	mov	r6, r5
   1ee30:	bf28      	it	cs
   1ee32:	2610      	movcs	r6, #16
   1ee34:	f7ff fe46 	bl	1eac4 <FinishAesDrv>
   1ee38:	4632      	mov	r2, r6
   1ee3a:	2800      	cmp	r0, #0
   1ee3c:	d0e2      	beq.n	1ee04 <kmu_derive_cmac+0xa4>
   1ee3e:	4607      	mov	r7, r0
   1ee40:	2274      	movs	r2, #116	; 0x74
   1ee42:	2100      	movs	r1, #0
   1ee44:	a80e      	add	r0, sp, #56	; 0x38
   1ee46:	f7fe fb4d 	bl	1d4e4 <CC_PalMemSetPlat>
   1ee4a:	4638      	mov	r0, r7
   1ee4c:	b04c      	add	sp, #304	; 0x130
   1ee4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ee52:	4f08      	ldr	r7, [pc, #32]	; (1ee74 <kmu_derive_cmac+0x114>)
   1ee54:	4638      	mov	r0, r7
   1ee56:	b04c      	add	sp, #304	; 0x130
   1ee58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ee5c:	4f06      	ldr	r7, [pc, #24]	; (1ee78 <kmu_derive_cmac+0x118>)
   1ee5e:	4638      	mov	r0, r7
   1ee60:	b04c      	add	sp, #304	; 0x130
   1ee62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ee66:	2274      	movs	r2, #116	; 0x74
   1ee68:	2100      	movs	r1, #0
   1ee6a:	a80e      	add	r0, sp, #56	; 0x38
   1ee6c:	462f      	mov	r7, r5
   1ee6e:	f7fe fb39 	bl	1d4e4 <CC_PalMemSetPlat>
   1ee72:	e7ea      	b.n	1ee4a <kmu_derive_cmac+0xea>
   1ee74:	00f1000e 	.word	0x00f1000e
   1ee78:	00f1000f 	.word	0x00f1000f

0001ee7c <UtilCmacBuildDataForDerivation>:
   1ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee80:	b082      	sub	sp, #8
   1ee82:	461e      	mov	r6, r3
   1ee84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ee86:	2300      	movs	r3, #0
   1ee88:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   1ee8c:	9301      	str	r3, [sp, #4]
   1ee8e:	d83e      	bhi.n	1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1ee90:	00e4      	lsls	r4, r4, #3
   1ee92:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1ee96:	4617      	mov	r7, r2
   1ee98:	f101 32ff 	add.w	r2, r1, #4294967295
   1ee9c:	bf34      	ite	cc
   1ee9e:	2303      	movcc	r3, #3
   1eea0:	2304      	movcs	r3, #4
   1eea2:	2a3f      	cmp	r2, #63	; 0x3f
   1eea4:	460d      	mov	r5, r1
   1eea6:	9300      	str	r3, [sp, #0]
   1eea8:	d831      	bhi.n	1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eeaa:	b380      	cbz	r0, 1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eeac:	b116      	cbz	r6, 1eeb4 <UtilCmacBuildDataForDerivation+0x38>
   1eeae:	b377      	cbz	r7, 1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eeb0:	2e40      	cmp	r6, #64	; 0x40
   1eeb2:	d82c      	bhi.n	1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eeb4:	9a08      	ldr	r2, [sp, #32]
   1eeb6:	b352      	cbz	r2, 1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eeb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eeba:	6811      	ldr	r1, [r2, #0]
   1eebc:	b339      	cbz	r1, 1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eebe:	19aa      	adds	r2, r5, r6
   1eec0:	4413      	add	r3, r2
   1eec2:	4299      	cmp	r1, r3
   1eec4:	d323      	bcc.n	1ef0e <UtilCmacBuildDataForDerivation+0x92>
   1eec6:	9b08      	ldr	r3, [sp, #32]
   1eec8:	4601      	mov	r1, r0
   1eeca:	462a      	mov	r2, r5
   1eecc:	1c58      	adds	r0, r3, #1
   1eece:	f7fe fb07 	bl	1d4e0 <CC_PalMemCopyPlat>
   1eed2:	9b08      	ldr	r3, [sp, #32]
   1eed4:	f105 0802 	add.w	r8, r5, #2
   1eed8:	441d      	add	r5, r3
   1eeda:	2300      	movs	r3, #0
   1eedc:	706b      	strb	r3, [r5, #1]
   1eede:	bb26      	cbnz	r6, 1ef2a <UtilCmacBuildDataForDerivation+0xae>
   1eee0:	2cff      	cmp	r4, #255	; 0xff
   1eee2:	9400      	str	r4, [sp, #0]
   1eee4:	d917      	bls.n	1ef16 <UtilCmacBuildDataForDerivation+0x9a>
   1eee6:	0223      	lsls	r3, r4, #8
   1eee8:	b29b      	uxth	r3, r3
   1eeea:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   1eeee:	9b08      	ldr	r3, [sp, #32]
   1eef0:	9401      	str	r4, [sp, #4]
   1eef2:	eb03 0008 	add.w	r0, r3, r8
   1eef6:	2202      	movs	r2, #2
   1eef8:	a901      	add	r1, sp, #4
   1eefa:	f7fe faf1 	bl	1d4e0 <CC_PalMemCopyPlat>
   1eefe:	f108 0302 	add.w	r3, r8, #2
   1ef02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ef04:	2000      	movs	r0, #0
   1ef06:	6013      	str	r3, [r2, #0]
   1ef08:	b002      	add	sp, #8
   1ef0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef0e:	480b      	ldr	r0, [pc, #44]	; (1ef3c <UtilCmacBuildDataForDerivation+0xc0>)
   1ef10:	b002      	add	sp, #8
   1ef12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef16:	9b08      	ldr	r3, [sp, #32]
   1ef18:	2201      	movs	r2, #1
   1ef1a:	eb03 0008 	add.w	r0, r3, r8
   1ef1e:	4669      	mov	r1, sp
   1ef20:	f7fe fade 	bl	1d4e0 <CC_PalMemCopyPlat>
   1ef24:	f108 0301 	add.w	r3, r8, #1
   1ef28:	e7eb      	b.n	1ef02 <UtilCmacBuildDataForDerivation+0x86>
   1ef2a:	9b08      	ldr	r3, [sp, #32]
   1ef2c:	4632      	mov	r2, r6
   1ef2e:	eb03 0008 	add.w	r0, r3, r8
   1ef32:	4639      	mov	r1, r7
   1ef34:	f7fe fad4 	bl	1d4e0 <CC_PalMemCopyPlat>
   1ef38:	44b0      	add	r8, r6
   1ef3a:	e7d1      	b.n	1eee0 <UtilCmacBuildDataForDerivation+0x64>
   1ef3c:	80000006 	.word	0x80000006

0001ef40 <CC_PalDataBufferAttrGet>:
   1ef40:	2000      	movs	r0, #0
   1ef42:	7018      	strb	r0, [r3, #0]
   1ef44:	4770      	bx	lr
   1ef46:	bf00      	nop

0001ef48 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1ef48:	f004 ba73 	b.w	23432 <z_impl_k_busy_wait>

0001ef4c <gpio_pin_get.constprop.0>:
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
   1ef4c:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   1ef4e:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   1ef50:	6883      	ldr	r3, [r0, #8]
   1ef52:	a901      	add	r1, sp, #4
   1ef54:	685b      	ldr	r3, [r3, #4]
   1ef56:	4798      	blx	r3
	if (ret == 0) {
   1ef58:	b920      	cbnz	r0, 1ef64 <gpio_pin_get.constprop.0+0x18>
		*value ^= data->invert;
   1ef5a:	6823      	ldr	r3, [r4, #0]
   1ef5c:	9801      	ldr	r0, [sp, #4]
   1ef5e:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1ef60:	f3c0 5000 	ubfx	r0, r0, #20, #1
}
   1ef64:	b002      	add	sp, #8
   1ef66:	bd10      	pop	{r4, pc}

0001ef68 <gpio_pin_configure.constprop.0.isra.0>:


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   1ef68:	b410      	push	{r4}
	struct gpio_driver_data *data =
   1ef6a:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   1ef6c:	6884      	ldr	r4, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1ef6e:	6813      	ldr	r3, [r2, #0]
   1ef70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1ef74:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1ef76:	6823      	ldr	r3, [r4, #0]
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   1ef78:	bc10      	pop	{r4}
   1ef7a:	f421 1280 	bic.w	r2, r1, #1048576	; 0x100000
   1ef7e:	2114      	movs	r1, #20
   1ef80:	4718      	bx	r3

0001ef82 <gpio_pin_set.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1ef82:	6902      	ldr	r2, [r0, #16]
   1ef84:	6812      	ldr	r2, [r2, #0]
   1ef86:	02d2      	lsls	r2, r2, #11
	return api->port_set_bits_raw(port, pins);
   1ef88:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1ef8a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
	return api->port_set_bits_raw(port, pins);
   1ef8e:	bf54      	ite	pl
   1ef90:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1ef92:	691b      	ldrmi	r3, [r3, #16]
   1ef94:	4718      	bx	r3

0001ef96 <ds18b20_send_byte>:
{
   1ef96:	b538      	push	{r3, r4, r5, lr}
   1ef98:	4605      	mov	r5, r0
   1ef9a:	2400      	movs	r4, #0
      x = data>>i;
   1ef9c:	fa45 f004 	asr.w	r0, r5, r4
      ds18b20_send(x);
   1efa0:	f000 0001 	and.w	r0, r0, #1
    for(i=0;i<8;i++)
   1efa4:	3401      	adds	r4, #1
      ds18b20_send(x);
   1efa6:	f7f1 fed3 	bl	10d50 <ds18b20_send>
    for(i=0;i<8;i++)
   1efaa:	2c08      	cmp	r4, #8
   1efac:	d1f6      	bne.n	1ef9c <ds18b20_send_byte+0x6>
}
   1efae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    k_busy_wait(100);
   1efb2:	2064      	movs	r0, #100	; 0x64
   1efb4:	f7ff bfc8 	b.w	1ef48 <k_busy_wait>

0001efb8 <ds18b20_read_byte>:
{
   1efb8:	b570      	push	{r4, r5, r6, lr}
   1efba:	2500      	movs	r5, #0
    unsigned char data = 0;
   1efbc:	462c      	mov	r4, r5
        if(ds18b20_read()) data|=0x01<<i;
   1efbe:	2601      	movs	r6, #1
   1efc0:	f7f1 fee6 	bl	10d90 <ds18b20_read>
   1efc4:	b118      	cbz	r0, 1efce <ds18b20_read_byte+0x16>
   1efc6:	fa06 f305 	lsl.w	r3, r6, r5
   1efca:	431c      	orrs	r4, r3
   1efcc:	b2e4      	uxtb	r4, r4
        k_busy_wait(15);
   1efce:	200f      	movs	r0, #15
    for (i=0;i<8;i++)
   1efd0:	3501      	adds	r5, #1
        k_busy_wait(15);
   1efd2:	f7ff ffb9 	bl	1ef48 <k_busy_wait>
    for (i=0;i<8;i++)
   1efd6:	2d08      	cmp	r5, #8
   1efd8:	d1f2      	bne.n	1efc0 <ds18b20_read_byte+0x8>
}
   1efda:	4620      	mov	r0, r4
   1efdc:	bd70      	pop	{r4, r5, r6, pc}

0001efde <ds18b20_get_temp>:


/**@brief Function for reading temperature.
 */
float ds18b20_get_temp(void)
{
   1efde:	b538      	push	{r3, r4, r5, lr}
    unsigned char check;
    char temp1=0, temp2=0;

    check=ds18b20_reset();
   1efe0:	f7f1 fefa 	bl	10dd8 <ds18b20_reset>
    
    if(check)
   1efe4:	b310      	cbz	r0, 1f02c <ds18b20_get_temp+0x4e>
    {
        ds18b20_send_byte(0xCC);
   1efe6:	20cc      	movs	r0, #204	; 0xcc
   1efe8:	f7ff ffd5 	bl	1ef96 <ds18b20_send_byte>
        ds18b20_send_byte(0x44);
   1efec:	2044      	movs	r0, #68	; 0x44
   1efee:	f7ff ffd2 	bl	1ef96 <ds18b20_send_byte>

        k_busy_wait(600);
   1eff2:	f44f 7016 	mov.w	r0, #600	; 0x258
   1eff6:	f7ff ffa7 	bl	1ef48 <k_busy_wait>

        check=ds18b20_reset();
   1effa:	f7f1 feed 	bl	10dd8 <ds18b20_reset>
        ds18b20_send_byte(0xCC);
   1effe:	20cc      	movs	r0, #204	; 0xcc
   1f000:	f7ff ffc9 	bl	1ef96 <ds18b20_send_byte>
        ds18b20_send_byte(0xBE);
   1f004:	20be      	movs	r0, #190	; 0xbe
   1f006:	f7ff ffc6 	bl	1ef96 <ds18b20_send_byte>

        temp1=ds18b20_read_byte();
   1f00a:	f7ff ffd5 	bl	1efb8 <ds18b20_read_byte>
   1f00e:	4604      	mov	r4, r0
        temp2=ds18b20_read_byte();
   1f010:	f7ff ffd2 	bl	1efb8 <ds18b20_read_byte>
   1f014:	4605      	mov	r5, r0

        check=ds18b20_reset();
   1f016:	f7f1 fedf 	bl	10dd8 <ds18b20_reset>

        float temp=0;
        temp=(float)(temp1+(temp2*256))/16;
   1f01a:	eb04 2005 	add.w	r0, r4, r5, lsl #8
   1f01e:	f7e1 fe83 	bl	d28 <__aeabi_i2f>
   1f022:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
   1f026:	f7e1 f86b 	bl	100 <__aeabi_fmul>

        return temp;
    }
      return 0;
}
   1f02a:	bd38      	pop	{r3, r4, r5, pc}
      return 0;
   1f02c:	2000      	movs	r0, #0
   1f02e:	e7fc      	b.n	1f02a <ds18b20_get_temp+0x4c>

0001f030 <ds18b20_setResolution>:


/**@brief Function for setting temperature resolution
 */
void ds18b20_setResolution(uint8_t resolution)
{
   1f030:	b510      	push	{r4, lr}
   1f032:	4604      	mov	r4, r0
    ds18b20_reset();
   1f034:	f7f1 fed0 	bl	10dd8 <ds18b20_reset>

    ds18b20_send_byte(0xCC);
   1f038:	20cc      	movs	r0, #204	; 0xcc
   1f03a:	f7ff ffac 	bl	1ef96 <ds18b20_send_byte>
    ds18b20_send_byte(WRITESCRATCH);
   1f03e:	204e      	movs	r0, #78	; 0x4e
   1f040:	f7ff ffa9 	bl	1ef96 <ds18b20_send_byte>
    
    // two dummy values for LOW & HIGH ALARM
    ds18b20_send_byte(0);
   1f044:	2000      	movs	r0, #0
   1f046:	f7ff ffa6 	bl	1ef96 <ds18b20_send_byte>
    ds18b20_send_byte(100);
   1f04a:	2064      	movs	r0, #100	; 0x64
   1f04c:	f7ff ffa3 	bl	1ef96 <ds18b20_send_byte>

    switch (resolution)
   1f050:	2c0b      	cmp	r4, #11
   1f052:	d00c      	beq.n	1f06e <ds18b20_setResolution+0x3e>
   1f054:	2c0c      	cmp	r4, #12
   1f056:	d003      	beq.n	1f060 <ds18b20_setResolution+0x30>
   1f058:	2c0a      	cmp	r4, #10
   1f05a:	d10a      	bne.n	1f072 <ds18b20_setResolution+0x42>
        case 11:
            ds18b20_send_byte(TEMP_11_BIT);
            break;

        case 10:
            ds18b20_send_byte(TEMP_10_BIT);
   1f05c:	203f      	movs	r0, #63	; 0x3f
   1f05e:	e000      	b.n	1f062 <ds18b20_setResolution+0x32>
            ds18b20_send_byte(TEMP_12_BIT);
   1f060:	207f      	movs	r0, #127	; 0x7f
            break;

        case 9:
        default:
            ds18b20_send_byte(TEMP_9_BIT);
   1f062:	f7ff ff98 	bl	1ef96 <ds18b20_send_byte>
            break;
    }

    ds18b20_reset();
   1f066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ds18b20_reset();
   1f06a:	f7f1 beb5 	b.w	10dd8 <ds18b20_reset>
            ds18b20_send_byte(TEMP_11_BIT);
   1f06e:	205f      	movs	r0, #95	; 0x5f
   1f070:	e7f7      	b.n	1f062 <ds18b20_setResolution+0x32>
            ds18b20_send_byte(TEMP_9_BIT);
   1f072:	201f      	movs	r0, #31
   1f074:	e7f5      	b.n	1f062 <ds18b20_setResolution+0x32>

0001f076 <gpio_pin_get.constprop.0>:
static inline int gpio_pin_get(const struct device *port, gpio_pin_t pin)
   1f076:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   1f078:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   1f07a:	6883      	ldr	r3, [r0, #8]
   1f07c:	a901      	add	r1, sp, #4
   1f07e:	685b      	ldr	r3, [r3, #4]
   1f080:	4798      	blx	r3
	if (ret == 0) {
   1f082:	b920      	cbnz	r0, 1f08e <gpio_pin_get.constprop.0+0x18>
		*value ^= data->invert;
   1f084:	6823      	ldr	r3, [r4, #0]
   1f086:	9801      	ldr	r0, [sp, #4]
   1f088:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1f08a:	f3c0 5000 	ubfx	r0, r0, #20, #1
}
   1f08e:	b002      	add	sp, #8
   1f090:	bd10      	pop	{r4, pc}

0001f092 <gpio_pin_configure.constprop.0.isra.0>:
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   1f092:	b410      	push	{r4}
	struct gpio_driver_data *data =
   1f094:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   1f096:	6884      	ldr	r4, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1f098:	6813      	ldr	r3, [r2, #0]
   1f09a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f09e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   1f0a0:	6823      	ldr	r3, [r4, #0]
}
   1f0a2:	bc10      	pop	{r4}
   1f0a4:	f421 1280 	bic.w	r2, r1, #1048576	; 0x100000
   1f0a8:	2114      	movs	r1, #20
   1f0aa:	4718      	bx	r3

0001f0ac <gpio_pin_set.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1f0ac:	6902      	ldr	r2, [r0, #16]
   1f0ae:	6812      	ldr	r2, [r2, #0]
   1f0b0:	02d2      	lsls	r2, r2, #11
	return api->port_set_bits_raw(port, pins);
   1f0b2:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   1f0b4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
	return api->port_set_bits_raw(port, pins);
   1f0b8:	bf54      	ite	pl
   1f0ba:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1f0bc:	691b      	ldrmi	r3, [r3, #16]
   1f0be:	4718      	bx	r3

0001f0c0 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   1f0c0:	f7fc bc1e 	b.w	1b900 <z_impl_k_sleep>

0001f0c4 <read_byte>:
{
   1f0c4:	b570      	push	{r4, r5, r6, lr}
   1f0c6:	2500      	movs	r5, #0
    unsigned char value = 0;
   1f0c8:	462c      	mov	r4, r5
        if(read_bit()) value|=0x01<<i;  // reads byte in, one byte at a time and then shifts it left
   1f0ca:	2601      	movs	r6, #1
   1f0cc:	f7f1 fee6 	bl	10e9c <read_bit>
   1f0d0:	b118      	cbz	r0, 1f0da <read_byte+0x16>
   1f0d2:	fa06 f305 	lsl.w	r3, r6, r5
   1f0d6:	431c      	orrs	r4, r3
   1f0d8:	b2e4      	uxtb	r4, r4
        k_sleep(K_USEC(103));   // wait for rest of timeslot
   1f0da:	2004      	movs	r0, #4
   1f0dc:	2100      	movs	r1, #0
    for (i=0;i<8;i++)
   1f0de:	3501      	adds	r5, #1
        k_sleep(K_USEC(103));   // wait for rest of timeslot
   1f0e0:	f7ff ffee 	bl	1f0c0 <k_sleep.isra.0>
    for (i=0;i<8;i++)
   1f0e4:	2d08      	cmp	r5, #8
   1f0e6:	d1f1      	bne.n	1f0cc <read_byte+0x8>
}
   1f0e8:	4620      	mov	r0, r4
   1f0ea:	bd70      	pop	{r4, r5, r6, pc}

0001f0ec <write_byte>:
{
   1f0ec:	b538      	push	{r3, r4, r5, lr}
   1f0ee:	4605      	mov	r5, r0
   1f0f0:	2400      	movs	r4, #0
        temp = val>>i; // shifts val right 'i' spaces
   1f0f2:	fa45 f004 	asr.w	r0, r5, r4
        write_bit(temp); // write bit in temp into
   1f0f6:	f000 0001 	and.w	r0, r0, #1
    for (i=0; i<8; i++) // writes byte, one bit at a time
   1f0fa:	3401      	adds	r4, #1
        write_bit(temp); // write bit in temp into
   1f0fc:	f7f1 fef2 	bl	10ee4 <write_bit>
    for (i=0; i<8; i++) // writes byte, one bit at a time
   1f100:	2c08      	cmp	r4, #8
   1f102:	d1f6      	bne.n	1f0f2 <write_byte+0x6>
}
   1f104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    k_sleep(K_USEC(104));
   1f108:	2004      	movs	r0, #4
   1f10a:	2100      	movs	r1, #0
   1f10c:	f7ff bfd8 	b.w	1f0c0 <k_sleep.isra.0>

0001f110 <i2c_write.isra.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   1f110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1f112:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f116:	2202      	movs	r2, #2
   1f118:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f11c:	6882      	ldr	r2, [r0, #8]
   1f11e:	a901      	add	r1, sp, #4
   1f120:	6894      	ldr	r4, [r2, #8]
   1f122:	2201      	movs	r2, #1
   1f124:	47a0      	blx	r4
}
   1f126:	b004      	add	sp, #16
   1f128:	bd10      	pop	{r4, pc}

0001f12a <setState>:
extern uint8_t setState(bool acc, bool gyr){
   1f12a:	b538      	push	{r3, r4, r5, lr}
   1f12c:	4604      	mov	r4, r0
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0);
   1f12e:	204e      	movs	r0, #78	; 0x4e
extern uint8_t setState(bool acc, bool gyr){
   1f130:	460d      	mov	r5, r1
    uint8_t temp = readByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0);
   1f132:	f7f1 ff4d 	bl	10fd0 <readByte.constprop.0>
    temp ^= (-acc ^ temp) & (1UL << 0);
   1f136:	4262      	negs	r2, r4
   1f138:	b252      	sxtb	r2, r2
   1f13a:	ea82 0300 	eor.w	r3, r2, r0
   1f13e:	f003 0301 	and.w	r3, r3, #1
   1f142:	4043      	eors	r3, r0
   1f144:	b2d9      	uxtb	r1, r3
    temp ^= (-acc ^ temp) & (1UL << 1);
   1f146:	ea82 0301 	eor.w	r3, r2, r1
   1f14a:	f003 0302 	and.w	r3, r3, #2
    temp ^= (-gyr ^ temp) & (1UL << 2);
   1f14e:	426a      	negs	r2, r5
    temp ^= (-acc ^ temp) & (1UL << 1);
   1f150:	404b      	eors	r3, r1
    temp ^= (-gyr ^ temp) & (1UL << 2);
   1f152:	b252      	sxtb	r2, r2
   1f154:	ea82 0103 	eor.w	r1, r2, r3
   1f158:	f001 0104 	and.w	r1, r1, #4
   1f15c:	4059      	eors	r1, r3
    temp ^= (-gyr ^ temp) & (1UL << 3);
   1f15e:	404a      	eors	r2, r1
   1f160:	f002 0208 	and.w	r2, r2, #8
    writeByte(ICM42605_ADDRESS, ICM42605_PWR_MGMT0, temp);
   1f164:	4051      	eors	r1, r2
   1f166:	204e      	movs	r0, #78	; 0x4e
   1f168:	f7f1 ff20 	bl	10fac <writeByte.constprop.0.isra.0>
}
   1f16c:	2000      	movs	r0, #0
   1f16e:	bd38      	pop	{r3, r4, r5, pc}

0001f170 <ccc_cfg_changed>:
}
   1f170:	4770      	bx	lr

0001f172 <write_u16>:
{
   1f172:	b538      	push	{r3, r4, r5, lr}
   1f174:	460c      	mov	r4, r1
   1f176:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   1f17a:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(config_data)) {
   1f17c:	461c      	mov	r4, r3
   1f17e:	18c3      	adds	r3, r0, r3
   1f180:	2b14      	cmp	r3, #20
{
   1f182:	4611      	mov	r1, r2
	if (offset + len > sizeof(config_data)) {
   1f184:	dc05      	bgt.n	1f192 <write_u16+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f186:	4622      	mov	r2, r4
   1f188:	4428      	add	r0, r5
   1f18a:	f004 fb0a 	bl	237a2 <memcpy>
}
   1f18e:	4620      	mov	r0, r4
   1f190:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f192:	f06f 0406 	mvn.w	r4, #6
   1f196:	e7fa      	b.n	1f18e <write_u16+0x1c>

0001f198 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   1f198:	b158      	cbz	r0, 1f1b2 <null_ptr_check+0x1a>
   1f19a:	68c3      	ldr	r3, [r0, #12]
   1f19c:	b14b      	cbz	r3, 1f1b2 <null_ptr_check+0x1a>
   1f19e:	6903      	ldr	r3, [r0, #16]
   1f1a0:	b13b      	cbz	r3, 1f1b2 <null_ptr_check+0x1a>
   1f1a2:	6943      	ldr	r3, [r0, #20]
   1f1a4:	b12b      	cbz	r3, 1f1b2 <null_ptr_check+0x1a>
   1f1a6:	6840      	ldr	r0, [r0, #4]
   1f1a8:	fab0 f080 	clz	r0, r0
   1f1ac:	0940      	lsrs	r0, r0, #5
   1f1ae:	4240      	negs	r0, r0
   1f1b0:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
   1f1b2:	f04f 30ff 	mov.w	r0, #4294967295
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
   1f1b6:	4770      	bx	lr

0001f1b8 <compensate_data>:
{
   1f1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1bc:	4682      	mov	sl, r0
   1f1be:	b087      	sub	sp, #28
   1f1c0:	460d      	mov	r5, r1
   1f1c2:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   1f1c4:	4693      	mov	fp, r2
   1f1c6:	2a00      	cmp	r2, #0
   1f1c8:	f000 80dc 	beq.w	1f384 <compensate_data+0x1cc>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   1f1cc:	f010 0f03 	tst.w	r0, #3
   1f1d0:	d022      	beq.n	1f218 <compensate_data+0x60>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1f1d2:	6848      	ldr	r0, [r1, #4]
   1f1d4:	f7e1 f98a 	bl	4ec <__aeabi_ui2d>
   1f1d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f1dc:	f7e1 f848 	bl	270 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f1e0:	4602      	mov	r2, r0
   1f1e2:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   1f1e4:	4606      	mov	r6, r0
   1f1e6:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f1e8:	f7e1 f9fa 	bl	5e0 <__aeabi_dmul>
   1f1ec:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1f1f0:	f7e1 f9f6 	bl	5e0 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1f1f4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f1f8:	4680      	mov	r8, r0
   1f1fa:	4689      	mov	r9, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   1f1fc:	4630      	mov	r0, r6
   1f1fe:	4639      	mov	r1, r7
   1f200:	f7e1 f9ee 	bl	5e0 <__aeabi_dmul>
   1f204:	4602      	mov	r2, r0
   1f206:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   1f208:	4640      	mov	r0, r8
   1f20a:	4649      	mov	r1, r9
   1f20c:	f7e1 f832 	bl	274 <__adddf3>
   1f210:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   1f214:	e9cb 0100 	strd	r0, r1, [fp]
        if (sensor_comp & BMP3_PRESS)
   1f218:	f01a 0001 	ands.w	r0, sl, #1
   1f21c:	f000 80af 	beq.w	1f37e <compensate_data+0x1c6>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f220:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
   1f224:	4619      	mov	r1, r3
   1f226:	4610      	mov	r0, r2
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f228:	e9cd 2300 	strd	r2, r3, [sp]
        pow_output = (float) base * pow_output;
   1f22c:	f7e1 fc72 	bl	b14 <__aeabi_d2f>
   1f230:	4601      	mov	r1, r0
   1f232:	4606      	mov	r6, r0
   1f234:	f7e0 ff64 	bl	100 <__aeabi_fmul>
   1f238:	4607      	mov	r7, r0
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f23a:	f7e1 f979 	bl	530 <__aeabi_f2d>
   1f23e:	e9cd 0102 	strd	r0, r1, [sp, #8]
        pow_output = (float) base * pow_output;
   1f242:	4639      	mov	r1, r7
   1f244:	4630      	mov	r0, r6
   1f246:	f7e0 ff5b 	bl	100 <__aeabi_fmul>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f24a:	f7e1 f971 	bl	530 <__aeabi_f2d>
   1f24e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    partial_out2 = uncomp_data->pressure *
   1f252:	6828      	ldr	r0, [r5, #0]
   1f254:	f7e1 f94a 	bl	4ec <__aeabi_ui2d>
   1f258:	4689      	mov	r9, r1
   1f25a:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
   1f25c:	f7e1 fc5a 	bl	b14 <__aeabi_d2f>
   1f260:	4601      	mov	r1, r0
   1f262:	4682      	mov	sl, r0
   1f264:	f7e0 ff4c 	bl	100 <__aeabi_fmul>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1f268:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
   1f26c:	4605      	mov	r5, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   1f26e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f272:	f7e1 f9b5 	bl	5e0 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f276:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1f27a:	f7e0 fffb 	bl	274 <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f27e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f282:	4606      	mov	r6, r0
   1f284:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f28a:	f7e1 f9a9 	bl	5e0 <__aeabi_dmul>
   1f28e:	4602      	mov	r2, r0
   1f290:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f292:	4630      	mov	r0, r6
   1f294:	4639      	mov	r1, r7
   1f296:	f7e0 ffed 	bl	274 <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f29a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f29e:	4606      	mov	r6, r0
   1f2a0:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f2a6:	f7e1 f99b 	bl	5e0 <__aeabi_dmul>
   1f2aa:	4602      	mov	r2, r0
   1f2ac:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   1f2ae:	4630      	mov	r0, r6
   1f2b0:	4639      	mov	r1, r7
   1f2b2:	f7e0 ffdf 	bl	274 <__adddf3>
    partial_out2 = uncomp_data->pressure *
   1f2b6:	4642      	mov	r2, r8
   1f2b8:	464b      	mov	r3, r9
   1f2ba:	f7e1 f991 	bl	5e0 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f2be:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
   1f2c2:	4680      	mov	r8, r0
   1f2c4:	4689      	mov	r9, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   1f2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f2ca:	f7e1 f989 	bl	5e0 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f2ce:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   1f2d2:	f7e0 ffcf 	bl	274 <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f2d6:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f2da:	4606      	mov	r6, r0
   1f2dc:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   1f2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f2e2:	f7e1 f97d 	bl	5e0 <__aeabi_dmul>
   1f2e6:	4602      	mov	r2, r0
   1f2e8:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f2ea:	4630      	mov	r0, r6
   1f2ec:	4639      	mov	r1, r7
   1f2ee:	f7e0 ffc1 	bl	274 <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f2f2:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f2f6:	4606      	mov	r6, r0
   1f2f8:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   1f2fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f2fe:	f7e1 f96f 	bl	5e0 <__aeabi_dmul>
   1f302:	4602      	mov	r2, r0
   1f304:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   1f306:	4630      	mov	r0, r6
   1f308:	4639      	mov	r1, r7
   1f30a:	f7e0 ffb3 	bl	274 <__adddf3>
   1f30e:	4602      	mov	r2, r0
   1f310:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f312:	4640      	mov	r0, r8
   1f314:	4649      	mov	r1, r9
   1f316:	f7e0 ffad 	bl	274 <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f31a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f31e:	4606      	mov	r6, r0
   1f320:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f322:	e9dd 0100 	ldrd	r0, r1, [sp]
   1f326:	f7e1 f95b 	bl	5e0 <__aeabi_dmul>
   1f32a:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   1f32e:	f7e0 ffa1 	bl	274 <__adddf3>
   1f332:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1f334:	4628      	mov	r0, r5
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   1f336:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   1f338:	f7e1 f8fa 	bl	530 <__aeabi_f2d>
   1f33c:	4602      	mov	r2, r0
   1f33e:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   1f340:	4640      	mov	r0, r8
   1f342:	4649      	mov	r1, r9
   1f344:	f7e1 f94c 	bl	5e0 <__aeabi_dmul>
   1f348:	4680      	mov	r8, r0
   1f34a:	4689      	mov	r9, r1
        pow_output = (float) base * pow_output;
   1f34c:	4650      	mov	r0, sl
   1f34e:	4629      	mov	r1, r5
   1f350:	f7e0 fed6 	bl	100 <__aeabi_fmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   1f354:	f7e1 f8ec 	bl	530 <__aeabi_f2d>
   1f358:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1f35c:	f7e1 f940 	bl	5e0 <__aeabi_dmul>
   1f360:	4602      	mov	r2, r0
   1f362:	460b      	mov	r3, r1
   1f364:	4640      	mov	r0, r8
   1f366:	4649      	mov	r1, r9
   1f368:	f7e0 ff84 	bl	274 <__adddf3>
   1f36c:	4602      	mov	r2, r0
   1f36e:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   1f370:	4630      	mov	r0, r6
   1f372:	4639      	mov	r1, r7
   1f374:	f7e0 ff7e 	bl	274 <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   1f378:	e9cb 0102 	strd	r0, r1, [fp, #8]
    int8_t rslt = BMP3_OK;
   1f37c:	2000      	movs	r0, #0
}
   1f37e:	b007      	add	sp, #28
   1f380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
   1f384:	f04f 30ff 	mov.w	r0, #4294967295
   1f388:	e7f9      	b.n	1f37e <compensate_data+0x1c6>

0001f38a <bmp3_get_regs>:
{
   1f38a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f38e:	4606      	mov	r6, r0
   1f390:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
   1f392:	4618      	mov	r0, r3
{
   1f394:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   1f396:	f7ff feff 	bl	1f198 <null_ptr_check>
{
   1f39a:	4689      	mov	r9, r1
   1f39c:	4690      	mov	r8, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   1f39e:	4605      	mov	r5, r0
   1f3a0:	bb88      	cbnz	r0, 1f406 <bmp3_get_regs+0x7c>
   1f3a2:	b381      	cbz	r1, 1f406 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
   1f3a4:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
   1f3a6:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
   1f3aa:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
   1f3ac:	1dc3      	adds	r3, r0, #7
   1f3ae:	f023 0307 	bic.w	r3, r3, #7
    {
   1f3b2:	46eb      	mov	fp, sp
        uint8_t temp_buff[len + dev->dummy_byte];
   1f3b4:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f3b8:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
   1f3ba:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f3be:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
   1f3c0:	46ea      	mov	sl, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f3c2:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
   1f3c4:	d01a      	beq.n	1f3fc <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   1f3c6:	4602      	mov	r2, r0
   1f3c8:	4669      	mov	r1, sp
   1f3ca:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   1f3ce:	4676      	mov	r6, lr
   1f3d0:	47b0      	blx	r6
   1f3d2:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   1f3d4:	4545      	cmp	r5, r8
   1f3d6:	d109      	bne.n	1f3ec <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   1f3d8:	f994 0009 	ldrsb.w	r0, [r4, #9]
            rslt = BMP3_E_COMM_FAIL;
   1f3dc:	2800      	cmp	r0, #0
   1f3de:	bf18      	it	ne
   1f3e0:	f06f 0006 	mvnne.w	r0, #6
   1f3e4:	46dd      	mov	sp, fp
}
   1f3e6:	46bd      	mov	sp, r7
   1f3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   1f3ec:	7aa3      	ldrb	r3, [r4, #10]
   1f3ee:	eb0a 0205 	add.w	r2, sl, r5
   1f3f2:	5cd3      	ldrb	r3, [r2, r3]
   1f3f4:	f809 3005 	strb.w	r3, [r9, r5]
            for (idx = 0; idx < len; idx++)
   1f3f8:	3501      	adds	r5, #1
   1f3fa:	e7eb      	b.n	1f3d4 <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   1f3fc:	4630      	mov	r0, r6
   1f3fe:	4675      	mov	r5, lr
   1f400:	47a8      	blx	r5
   1f402:	7260      	strb	r0, [r4, #9]
   1f404:	e7e8      	b.n	1f3d8 <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
   1f406:	f04f 30ff 	mov.w	r0, #4294967295
   1f40a:	e7ec      	b.n	1f3e6 <bmp3_get_regs+0x5c>

0001f40c <bmp3_set_regs>:
{
   1f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t temp_buff[len * 2];
   1f410:	ea4f 0842 	mov.w	r8, r2, lsl #1
{
   1f414:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
   1f416:	f108 0307 	add.w	r3, r8, #7
   1f41a:	f023 0307 	bic.w	r3, r3, #7
{
   1f41e:	af00      	add	r7, sp, #0
   1f420:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
   1f422:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   1f426:	4620      	mov	r0, r4
{
   1f428:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
   1f42a:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
   1f42c:	f7ff feb4 	bl	1f198 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   1f430:	bb70      	cbnz	r0, 1f490 <bmp3_set_regs+0x84>
   1f432:	b36e      	cbz	r6, 1f490 <bmp3_set_regs+0x84>
   1f434:	b365      	cbz	r5, 1f490 <bmp3_set_regs+0x84>
        if (len != 0)
   1f436:	b372      	cbz	r2, 1f496 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
   1f438:	782b      	ldrb	r3, [r5, #0]
   1f43a:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
   1f43e:	7a23      	ldrb	r3, [r4, #8]
   1f440:	b303      	cbz	r3, 1f484 <bmp3_set_regs+0x78>
            if (len > 1)
   1f442:	2a01      	cmp	r2, #1
   1f444:	d00c      	beq.n	1f460 <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
   1f446:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
   1f448:	f101 3cff 	add.w	ip, r1, #4294967295
   1f44c:	5cf0      	ldrb	r0, [r6, r3]
   1f44e:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
   1f452:	5ce8      	ldrb	r0, [r5, r3]
   1f454:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
   1f458:	3301      	adds	r3, #1
   1f45a:	429a      	cmp	r2, r3
   1f45c:	d8f6      	bhi.n	1f44c <bmp3_set_regs+0x40>
                temp_len = len * 2;
   1f45e:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1f460:	6925      	ldr	r5, [r4, #16]
   1f462:	6863      	ldr	r3, [r4, #4]
   1f464:	7830      	ldrb	r0, [r6, #0]
   1f466:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
   1f468:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   1f46a:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
   1f46c:	bf18      	it	ne
   1f46e:	f06f 0006 	mvnne.w	r0, #6
}
   1f472:	46bd      	mov	sp, r7
   1f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   1f478:	f816 c000 	ldrb.w	ip, [r6, r0]
   1f47c:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1f480:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   1f484:	b2d8      	uxtb	r0, r3
   1f486:	4282      	cmp	r2, r0
   1f488:	f103 0301 	add.w	r3, r3, #1
   1f48c:	d8f4      	bhi.n	1f478 <bmp3_set_regs+0x6c>
   1f48e:	e7d8      	b.n	1f442 <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
   1f490:	f04f 30ff 	mov.w	r0, #4294967295
   1f494:	e7ed      	b.n	1f472 <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
   1f496:	f06f 0005 	mvn.w	r0, #5
   1f49a:	e7ea      	b.n	1f472 <bmp3_set_regs+0x66>

0001f49c <write_power_mode>:
{
   1f49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f49e:	4604      	mov	r4, r0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f4a0:	4623      	mov	r3, r4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f4a2:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f4a4:	2201      	movs	r2, #1
   1f4a6:	f10d 0107 	add.w	r1, sp, #7
    uint8_t op_mode = dev->settings.op_mode;
   1f4aa:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f4ae:	f88d 0006 	strb.w	r0, [sp, #6]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   1f4b2:	f7ff ff6a 	bl	1f38a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f4b6:	b988      	cbnz	r0, 1f4dc <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   1f4b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f4bc:	012d      	lsls	r5, r5, #4
   1f4be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f4c2:	f005 0530 	and.w	r5, r5, #48	; 0x30
   1f4c6:	432b      	orrs	r3, r5
   1f4c8:	f88d 3007 	strb.w	r3, [sp, #7]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f4cc:	2201      	movs	r2, #1
   1f4ce:	4623      	mov	r3, r4
   1f4d0:	f10d 0107 	add.w	r1, sp, #7
   1f4d4:	f10d 0006 	add.w	r0, sp, #6
   1f4d8:	f7ff ff98 	bl	1f40c <bmp3_set_regs>
}
   1f4dc:	b003      	add	sp, #12
   1f4de:	bd30      	pop	{r4, r5, pc}

0001f4e0 <bmp3_soft_reset>:
{
   1f4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
   1f4e2:	237e      	movs	r3, #126	; 0x7e
   1f4e4:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f4e8:	23b6      	movs	r3, #182	; 0xb6
{
   1f4ea:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   1f4ec:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
   1f4f0:	f7ff fe52 	bl	1f198 <null_ptr_check>
    if (rslt == BMP3_OK)
   1f4f4:	4604      	mov	r4, r0
   1f4f6:	b960      	cbnz	r0, 1f512 <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   1f4f8:	462b      	mov	r3, r5
   1f4fa:	2201      	movs	r2, #1
   1f4fc:	f10d 0106 	add.w	r1, sp, #6
   1f500:	2003      	movs	r0, #3
   1f502:	f7ff ff42 	bl	1f38a <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f506:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f50a:	06db      	lsls	r3, r3, #27
   1f50c:	d404      	bmi.n	1f518 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
   1f50e:	f06f 0403 	mvn.w	r4, #3
}
   1f512:	4620      	mov	r0, r4
   1f514:	b003      	add	sp, #12
   1f516:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   1f518:	2800      	cmp	r0, #0
   1f51a:	d1f8      	bne.n	1f50e <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   1f51c:	462b      	mov	r3, r5
   1f51e:	2201      	movs	r2, #1
   1f520:	f10d 0105 	add.w	r1, sp, #5
   1f524:	a801      	add	r0, sp, #4
   1f526:	f7ff ff71 	bl	1f40c <bmp3_set_regs>
            if (rslt == BMP3_OK)
   1f52a:	4604      	mov	r4, r0
   1f52c:	2800      	cmp	r0, #0
   1f52e:	d1f0      	bne.n	1f512 <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
   1f530:	696b      	ldr	r3, [r5, #20]
   1f532:	6869      	ldr	r1, [r5, #4]
   1f534:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1f538:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   1f53a:	462b      	mov	r3, r5
   1f53c:	2201      	movs	r2, #1
   1f53e:	f10d 0107 	add.w	r1, sp, #7
   1f542:	2002      	movs	r0, #2
   1f544:	f7ff ff21 	bl	1f38a <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   1f548:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f54c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   1f550:	4303      	orrs	r3, r0
   1f552:	b2db      	uxtb	r3, r3
   1f554:	2b00      	cmp	r3, #0
   1f556:	d0dc      	beq.n	1f512 <bmp3_soft_reset+0x32>
   1f558:	e7d9      	b.n	1f50e <bmp3_soft_reset+0x2e>

0001f55a <bmp3_get_op_mode>:
{
   1f55a:	b510      	push	{r4, lr}
   1f55c:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   1f55e:	4608      	mov	r0, r1
   1f560:	f7ff fe1a 	bl	1f198 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   1f564:	b958      	cbnz	r0, 1f57e <bmp3_get_op_mode+0x24>
   1f566:	b154      	cbz	r4, 1f57e <bmp3_get_op_mode+0x24>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   1f568:	460b      	mov	r3, r1
   1f56a:	2201      	movs	r2, #1
   1f56c:	4621      	mov	r1, r4
   1f56e:	201b      	movs	r0, #27
   1f570:	f7ff ff0b 	bl	1f38a <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   1f574:	7823      	ldrb	r3, [r4, #0]
   1f576:	f3c3 1301 	ubfx	r3, r3, #4, #2
   1f57a:	7023      	strb	r3, [r4, #0]
}
   1f57c:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
   1f57e:	f04f 30ff 	mov.w	r0, #4294967295
   1f582:	e7fb      	b.n	1f57c <bmp3_get_op_mode+0x22>

0001f584 <bmp3_set_op_mode>:
{
   1f584:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f586:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
   1f588:	f7ff fe06 	bl	1f198 <null_ptr_check>
    if (rslt == BMP3_OK)
   1f58c:	4604      	mov	r4, r0
   1f58e:	2800      	cmp	r0, #0
   1f590:	d163      	bne.n	1f65a <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f592:	4629      	mov	r1, r5
   1f594:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
   1f598:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f59c:	f7ff ffdd 	bl	1f55a <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f5a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   1f5a4:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   1f5a6:	b1e3      	cbz	r3, 1f5e2 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f5a8:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f5aa:	462b      	mov	r3, r5
   1f5ac:	2201      	movs	r2, #1
   1f5ae:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   1f5b0:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   1f5b4:	f7ff fee9 	bl	1f38a <bmp3_get_regs>
    if (rslt == BMP3_OK)
   1f5b8:	4604      	mov	r4, r0
   1f5ba:	b968      	cbnz	r0, 1f5d8 <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   1f5bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f5c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f5c4:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   1f5c8:	2201      	movs	r2, #1
   1f5ca:	462b      	mov	r3, r5
   1f5cc:	a901      	add	r1, sp, #4
   1f5ce:	f10d 0003 	add.w	r0, sp, #3
   1f5d2:	f7ff ff1b 	bl	1f40c <bmp3_set_regs>
   1f5d6:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
   1f5d8:	696b      	ldr	r3, [r5, #20]
   1f5da:	6869      	ldr	r1, [r5, #4]
   1f5dc:	f241 3088 	movw	r0, #5000	; 0x1388
   1f5e0:	4798      	blx	r3
        if (rslt == BMP3_OK)
   1f5e2:	bbd4      	cbnz	r4, 1f65a <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
   1f5e4:	2e03      	cmp	r6, #3
   1f5e6:	d13b      	bne.n	1f660 <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   1f5e8:	2204      	movs	r2, #4
   1f5ea:	462b      	mov	r3, r5
   1f5ec:	eb0d 0102 	add.w	r1, sp, r2
   1f5f0:	201c      	movs	r0, #28
   1f5f2:	f7ff feca 	bl	1f38a <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1f5f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f5fa:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   1f5fe:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1f602:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1f606:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   1f60a:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   1f60e:	f003 031f 	and.w	r3, r3, #31
   1f612:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   1f616:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f61a:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1f61e:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
   1f622:	4604      	mov	r4, r0
   1f624:	b9c8      	cbnz	r0, 1f65a <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
   1f626:	4628      	mov	r0, r5
   1f628:	f7f1 ffa8 	bl	1157c <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
   1f62c:	4604      	mov	r4, r0
   1f62e:	b9a0      	cbnz	r0, 1f65a <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
   1f630:	4628      	mov	r0, r5
   1f632:	f7ff ff33 	bl	1f49c <write_power_mode>
        if (rslt == BMP3_OK)
   1f636:	4604      	mov	r4, r0
   1f638:	b978      	cbnz	r0, 1f65a <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   1f63a:	462b      	mov	r3, r5
   1f63c:	2201      	movs	r2, #1
   1f63e:	a901      	add	r1, sp, #4
   1f640:	2002      	movs	r0, #2
   1f642:	f7ff fea2 	bl	1f38a <bmp3_get_regs>
            if (rslt == BMP3_OK)
   1f646:	4604      	mov	r4, r0
   1f648:	b938      	cbnz	r0, 1f65a <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
   1f64a:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
   1f64e:	f013 0f04 	tst.w	r3, #4
   1f652:	bf0c      	ite	eq
   1f654:	4604      	moveq	r4, r0
   1f656:	f06f 0404 	mvnne.w	r4, #4
}
   1f65a:	4620      	mov	r0, r4
   1f65c:	b002      	add	sp, #8
   1f65e:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
   1f660:	2e01      	cmp	r6, #1
   1f662:	d1fa      	bne.n	1f65a <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
   1f664:	4628      	mov	r0, r5
   1f666:	f7ff ff19 	bl	1f49c <write_power_mode>
   1f66a:	4604      	mov	r4, r0
   1f66c:	e7f5      	b.n	1f65a <bmp3_set_op_mode+0xd6>

0001f66e <bmp3_get_sensor_data>:
{
   1f66e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f670:	b085      	sub	sp, #20
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f672:	2300      	movs	r3, #0
{
   1f674:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
   1f676:	4610      	mov	r0, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
   1f678:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
   1f67c:	460d      	mov	r5, r1
   1f67e:	4617      	mov	r7, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   1f680:	9300      	str	r3, [sp, #0]
   1f682:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   1f686:	f7ff fd87 	bl	1f198 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   1f68a:	bb58      	cbnz	r0, 1f6e4 <bmp3_get_sensor_data+0x76>
   1f68c:	b351      	cbz	r1, 1f6e4 <bmp3_get_sensor_data+0x76>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   1f68e:	4613      	mov	r3, r2
   1f690:	4669      	mov	r1, sp
   1f692:	2206      	movs	r2, #6
   1f694:	2004      	movs	r0, #4
   1f696:	f7ff fe78 	bl	1f38a <bmp3_get_regs>
        if (rslt == BMP3_OK)
   1f69a:	4604      	mov	r4, r0
   1f69c:	b9f8      	cbnz	r0, 1f6de <bmp3_get_sensor_data+0x70>
    data_msb = (uint32_t)reg_data[2] << 16;
   1f69e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
   1f6a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[5] << 16;
   1f6a6:	f89d 4005 	ldrb.w	r4, [sp, #5]
    data_msb = (uint32_t)reg_data[2] << 16;
   1f6aa:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1f6ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
   1f6b0:	f89d 2000 	ldrb.w	r2, [sp]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   1f6b4:	4313      	orrs	r3, r2
   1f6b6:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
   1f6b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   1f6bc:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f6be:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
   1f6c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f6c6:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f6c8:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f6ca:	a902      	add	r1, sp, #8
   1f6cc:	f107 0318 	add.w	r3, r7, #24
   1f6d0:	4630      	mov	r0, r6
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   1f6d2:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   1f6d4:	f7ff fd70 	bl	1f1b8 <compensate_data>
   1f6d8:	4604      	mov	r4, r0
            printk();
   1f6da:	f000 f982 	bl	1f9e2 <printk>
}
   1f6de:	4620      	mov	r0, r4
   1f6e0:	b005      	add	sp, #20
   1f6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
   1f6e4:	f04f 34ff 	mov.w	r4, #4294967295
   1f6e8:	e7f9      	b.n	1f6de <bmp3_get_sensor_data+0x70>

0001f6ea <app_us_delay>:
	z_impl_k_busy_wait(usec_to_wait);
   1f6ea:	f003 bea2 	b.w	23432 <z_impl_k_busy_wait>

0001f6ee <app_i2c_write>:
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f6ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6f0:	4614      	mov	r4, r2
	uint8_t dataBuffer[len+1];
   1f6f2:	3408      	adds	r4, #8
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f6f4:	b085      	sub	sp, #20
	uint8_t dataBuffer[len+1];
   1f6f6:	f024 0407 	bic.w	r4, r4, #7
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f6fa:	af00      	add	r7, sp, #0
	uint8_t dataBuffer[len+1];
   1f6fc:	ebad 0d04 	sub.w	sp, sp, r4
static BMP3_INTF_RET_TYPE app_i2c_write(uint8_t reg_addr, const uint8_t *write_data, uint32_t len, void *intf_ptr) {
   1f700:	461d      	mov	r5, r3
	dataBuffer[0]=reg_addr;
   1f702:	466b      	mov	r3, sp
	uint8_t dataBuffer[len+1];
   1f704:	1c56      	adds	r6, r2, #1
	dataBuffer[0]=reg_addr;
   1f706:	f803 0b01 	strb.w	r0, [r3], #1
   1f70a:	4618      	mov	r0, r3
   1f70c:	f004 f849 	bl	237a2 <memcpy>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f710:	2302      	movs	r3, #2
	msg.buf = (uint8_t *)buf;
   1f712:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.len = num_bytes;
   1f716:	60be      	str	r6, [r7, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f718:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f71a:	68ab      	ldr	r3, [r5, #8]
   1f71c:	1d39      	adds	r1, r7, #4
   1f71e:	689c      	ldr	r4, [r3, #8]
   1f720:	2201      	movs	r2, #1
   1f722:	2376      	movs	r3, #118	; 0x76
   1f724:	4628      	mov	r0, r5
   1f726:	47a0      	blx	r4
}
   1f728:	3714      	adds	r7, #20
   1f72a:	b240      	sxtb	r0, r0
   1f72c:	46bd      	mov	sp, r7
   1f72e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f730 <app_i2c_read>:
static BMP3_INTF_RET_TYPE app_i2c_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr) {
   1f730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f734:	b086      	sub	sp, #24
   1f736:	461c      	mov	r4, r3
	msg.buf = (uint8_t *)buf;
   1f738:	f10d 0307 	add.w	r3, sp, #7
   1f73c:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   1f73e:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f740:	2302      	movs	r3, #2
   1f742:	460f      	mov	r7, r1
   1f744:	4616      	mov	r6, r2
   1f746:	f88d 0007 	strb.w	r0, [sp, #7]
	msg.len = num_bytes;
   1f74a:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f74c:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f750:	68a3      	ldr	r3, [r4, #8]
   1f752:	462a      	mov	r2, r5
   1f754:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f758:	a903      	add	r1, sp, #12
   1f75a:	2376      	movs	r3, #118	; 0x76
   1f75c:	4620      	mov	r0, r4
   1f75e:	47c0      	blx	r8
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f760:	2303      	movs	r3, #3
	msg.len = num_bytes;
   1f762:	e9cd 7603 	strd	r7, r6, [sp, #12]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f766:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f76a:	68a3      	ldr	r3, [r4, #8]
   1f76c:	462a      	mov	r2, r5
   1f76e:	689e      	ldr	r6, [r3, #8]
   1f770:	a903      	add	r1, sp, #12
   1f772:	2376      	movs	r3, #118	; 0x76
   1f774:	4620      	mov	r0, r4
   1f776:	47b0      	blx	r6
}
   1f778:	b240      	sxtb	r0, r0
   1f77a:	b006      	add	sp, #24
   1f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f780 <transceive>:
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f784:	b085      	sub	sp, #20
   1f786:	af00      	add	r7, sp, #0
   1f788:	461d      	mov	r5, r3
   1f78a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
  uint8_t rxbuf2[rxlen + 2];
   1f78c:	3309      	adds	r3, #9
   1f78e:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
                    uint8_t interdelay, struct device *mlx_device_t) {
   1f792:	4681      	mov	r9, r0
   1f794:	4688      	mov	r8, r1
   1f796:	4614      	mov	r4, r2
  uint8_t rxbuf2[rxlen + 2];
   1f798:	ebad 0d03 	sub.w	sp, sp, r3
  if (mlx_device_t == NULL) {
   1f79c:	b926      	cbnz	r6, 1f7a8 <transceive+0x28>
    return false;
   1f79e:	2000      	movs	r0, #0
}
   1f7a0:	3714      	adds	r7, #20
   1f7a2:	46bd      	mov	sp, r7
   1f7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f7a8:	4630      	mov	r0, r6
   1f7aa:	f003 fa21 	bl	22bf0 <z_device_is_ready>
  if (!device_is_ready(mlx_device_t)) {
   1f7ae:	2800      	cmp	r0, #0
   1f7b0:	d0f5      	beq.n	1f79e <transceive+0x1e>
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1f7b2:	2302      	movs	r3, #2
  if (i2c_write(mlx_device_t,txbuf, txlen, MLX90393_DEFAULT_ADDR)) {
   1f7b4:	e9c7 9801 	strd	r9, r8, [r7, #4]
   1f7b8:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f7ba:	68b3      	ldr	r3, [r6, #8]
   1f7bc:	2201      	movs	r2, #1
   1f7be:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f7c2:	1d39      	adds	r1, r7, #4
   1f7c4:	230c      	movs	r3, #12
   1f7c6:	4630      	mov	r0, r6
   1f7c8:	47c0      	blx	r8
   1f7ca:	b108      	cbz	r0, 1f7d0 <transceive+0x50>
    return MLX90393_STATUS_ERROR;
   1f7cc:	20ff      	movs	r0, #255	; 0xff
   1f7ce:	e7e7      	b.n	1f7a0 <transceive+0x20>
   1f7d0:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
   1f7d4:	03c0      	lsls	r0, r0, #15
   1f7d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f7da:	2300      	movs	r3, #0
   1f7dc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1f7e0:	2100      	movs	r1, #0
   1f7e2:	f7e1 fb3b 	bl	e5c <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1f7e6:	f7fc f88b 	bl	1b900 <z_impl_k_sleep>
  uint8_t rxbuf2[rxlen + 2];
   1f7ea:	1c6b      	adds	r3, r5, #1
	msg.len = num_bytes;
   1f7ec:	60bb      	str	r3, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f7ee:	2303      	movs	r3, #3
	msg.buf = buf;
   1f7f0:	f8c7 d004 	str.w	sp, [r7, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   1f7f4:	733b      	strb	r3, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1f7f6:	68b3      	ldr	r3, [r6, #8]
   1f7f8:	2201      	movs	r2, #1
   1f7fa:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f7fe:	1d39      	adds	r1, r7, #4
   1f800:	230c      	movs	r3, #12
   1f802:	4630      	mov	r0, r6
   1f804:	47c0      	blx	r8
  if (i2c_read(mlx_device_t,rxbuf2, rxlen + 1,MLX90393_DEFAULT_ADDR)) {
   1f806:	2800      	cmp	r0, #0
   1f808:	d1e0      	bne.n	1f7cc <transceive+0x4c>
  status = rxbuf2[0];
   1f80a:	466b      	mov	r3, sp
   1f80c:	4622      	mov	r2, r4
   1f80e:	f813 0b01 	ldrb.w	r0, [r3], #1
  for (i = 0; i < rxlen; i++) {
   1f812:	4425      	add	r5, r4
   1f814:	4295      	cmp	r5, r2
   1f816:	d101      	bne.n	1f81c <transceive+0x9c>
  return (status >> 2);
   1f818:	0880      	lsrs	r0, r0, #2
   1f81a:	e7c1      	b.n	1f7a0 <transceive+0x20>
    rxbuf[i] = rxbuf2[i + 1];
   1f81c:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f820:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < rxlen; i++) {
   1f824:	e7f6      	b.n	1f814 <transceive+0x94>

0001f826 <writeRegister>:
bool writeRegister(uint8_t reg, uint16_t data, struct device *mlx_device_t) {
   1f826:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f828:	2360      	movs	r3, #96	; 0x60
   1f82a:	f88d 300c 	strb.w	r3, [sp, #12]
   1f82e:	0a0b      	lsrs	r3, r1, #8
   1f830:	f88d 300d 	strb.w	r3, [sp, #13]
                   reg << 2};   // the register itself, shift up by 2 bits!
   1f834:	0080      	lsls	r0, r0, #2
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f836:	2300      	movs	r3, #0
  uint8_t tx[4] = {MLX90393_REG_WR,
   1f838:	f88d 100e 	strb.w	r1, [sp, #14]
   1f83c:	f88d 000f 	strb.w	r0, [sp, #15]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f840:	9201      	str	r2, [sp, #4]
   1f842:	9300      	str	r3, [sp, #0]
   1f844:	461a      	mov	r2, r3
   1f846:	2104      	movs	r1, #4
   1f848:	a803      	add	r0, sp, #12
   1f84a:	f7ff ff99 	bl	1f780 <transceive>
}
   1f84e:	fab0 f080 	clz	r0, r0
   1f852:	0940      	lsrs	r0, r0, #5
   1f854:	b005      	add	sp, #20
   1f856:	f85d fb04 	ldr.w	pc, [sp], #4

0001f85a <readRegister>:
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1f85a:	b530      	push	{r4, r5, lr}
   1f85c:	b085      	sub	sp, #20
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1f85e:	2350      	movs	r3, #80	; 0x50
   1f860:	0080      	lsls	r0, r0, #2
   1f862:	f88d 3008 	strb.w	r3, [sp, #8]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1f866:	2400      	movs	r4, #0
   1f868:	2302      	movs	r3, #2
bool readRegister(uint8_t reg, uint16_t *data, struct device *mlx_device_t) {
   1f86a:	460d      	mov	r5, r1
  uint8_t tx[2] = {MLX90393_REG_RR,reg << 2}; // the register itself, shift up by 2 bits!
   1f86c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (transceive(tx, sizeof(tx), rx, sizeof(rx), 0, mlx_device_t) != MLX90393_STATUS_OK) {
   1f870:	9201      	str	r2, [sp, #4]
   1f872:	9400      	str	r4, [sp, #0]
   1f874:	aa03      	add	r2, sp, #12
   1f876:	4619      	mov	r1, r3
   1f878:	a802      	add	r0, sp, #8
   1f87a:	f7ff ff81 	bl	1f780 <transceive>
   1f87e:	b930      	cbnz	r0, 1f88e <readRegister+0x34>
  *data = ((uint16_t)rx[0] << 8) | rx[1];
   1f880:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1f884:	ba5b      	rev16	r3, r3
   1f886:	802b      	strh	r3, [r5, #0]
  return true;
   1f888:	2001      	movs	r0, #1
}
   1f88a:	b005      	add	sp, #20
   1f88c:	bd30      	pop	{r4, r5, pc}
    return false;
   1f88e:	4620      	mov	r0, r4
   1f890:	e7fb      	b.n	1f88a <readRegister+0x30>

0001f892 <mlx_exitMode>:
bool mlx_exitMode(struct device *mlx_device_t) {
   1f892:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_EX};
   1f894:	2380      	movs	r3, #128	; 0x80
   1f896:	f88d 300c 	strb.w	r3, [sp, #12]
  return (transceive(tx, sizeof(tx), NULL, 0, 0, mlx_device_t) == MLX90393_STATUS_OK);
   1f89a:	2300      	movs	r3, #0
   1f89c:	9001      	str	r0, [sp, #4]
   1f89e:	9300      	str	r3, [sp, #0]
   1f8a0:	461a      	mov	r2, r3
   1f8a2:	2101      	movs	r1, #1
   1f8a4:	a803      	add	r0, sp, #12
   1f8a6:	f7ff ff6b 	bl	1f780 <transceive>
}
   1f8aa:	fab0 f080 	clz	r0, r0
   1f8ae:	0940      	lsrs	r0, r0, #5
   1f8b0:	b005      	add	sp, #20
   1f8b2:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8b6 <mlx_reset>:
bool mlx_reset(struct device *mlx_device_t) {
   1f8b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t tx[1] = {MLX90393_REG_RT};
   1f8b8:	23f0      	movs	r3, #240	; 0xf0
   1f8ba:	f88d 300c 	strb.w	r3, [sp, #12]
  if (transceive(tx, sizeof(tx), NULL, 0, 5, mlx_device_t) != MLX90393_STATUS_RESET) {
   1f8be:	2305      	movs	r3, #5
   1f8c0:	9300      	str	r3, [sp, #0]
   1f8c2:	2300      	movs	r3, #0
   1f8c4:	9001      	str	r0, [sp, #4]
   1f8c6:	461a      	mov	r2, r3
   1f8c8:	2101      	movs	r1, #1
   1f8ca:	a803      	add	r0, sp, #12
   1f8cc:	f7ff ff58 	bl	1f780 <transceive>
}
   1f8d0:	1e43      	subs	r3, r0, #1
   1f8d2:	4258      	negs	r0, r3
   1f8d4:	4158      	adcs	r0, r3
   1f8d6:	b005      	add	sp, #20
   1f8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0001f8dc <mlx_setTrigInt>:
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1f8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1f8de:	460a      	mov	r2, r1
bool mlx_setTrigInt(bool state, struct device *mlx_device_t) {
   1f8e0:	4605      	mov	r5, r0
   1f8e2:	460c      	mov	r4, r1
  readRegister(MLX90393_CONF2, &data, mlx_device_t);
   1f8e4:	2001      	movs	r0, #1
   1f8e6:	f10d 0106 	add.w	r1, sp, #6
   1f8ea:	f7ff ffb6 	bl	1f85a <readRegister>
  data &= ~0x8000;
   1f8ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1f8f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
  if (state) {
   1f8f6:	b94d      	cbnz	r5, 1f90c <mlx_setTrigInt+0x30>
    data |= 0x8000;
   1f8f8:	f8ad 3006 	strh.w	r3, [sp, #6]
  return writeRegister(MLX90393_CONF2, data, mlx_device_t);
   1f8fc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1f900:	4622      	mov	r2, r4
   1f902:	2001      	movs	r0, #1
   1f904:	f7ff ff8f 	bl	1f826 <writeRegister>
}
   1f908:	b003      	add	sp, #12
   1f90a:	bd30      	pop	{r4, r5, pc}
    data |= 0x8000;
   1f90c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1f910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1f914:	e7f0      	b.n	1f8f8 <mlx_setTrigInt+0x1c>

0001f916 <mlx_init>:

  return mlx_readMeasurement(x, y, z, mlx_device_t);
  return 0;
}

bool mlx_init(struct device *mlx_device) {
   1f916:	b510      	push	{r4, lr}

	//const struct device *mlx_device = device_get_binding("I2C_1");
  

  if (mlx_device == NULL) {
   1f918:	4604      	mov	r4, r0
   1f91a:	b388      	cbz	r0, 1f980 <mlx_init+0x6a>
   1f91c:	f003 f968 	bl	22bf0 <z_device_is_ready>
    return false;
  }

  if (!device_is_ready(mlx_device)) {
   1f920:	b370      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_exitMode(mlx_device)){
   1f922:	4620      	mov	r0, r4
   1f924:	f7ff ffb5 	bl	1f892 <mlx_exitMode>
   1f928:	b350      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  if (!mlx_reset(mlx_device)) {
   1f92a:	4620      	mov	r0, r4
   1f92c:	f7ff ffc3 	bl	1f8b6 <mlx_reset>
   1f930:	b330      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  /* Set gain and sensor config. */
  if (!mlx_setGain(MLX90393_GAIN_1X, mlx_device)) {
   1f932:	4621      	mov	r1, r4
   1f934:	2007      	movs	r0, #7
   1f936:	f7f2 fa03 	bl	11d40 <mlx_setGain>
   1f93a:	b308      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  /* Set resolution. */
  if (!mlx_setResolution(MLX90393_X, MLX90393_RES_16, mlx_device)){
   1f93c:	2100      	movs	r1, #0
   1f93e:	4622      	mov	r2, r4
   1f940:	4608      	mov	r0, r1
   1f942:	f7f2 fa19 	bl	11d78 <mlx_setResolution>
   1f946:	b1d8      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Y, MLX90393_RES_16, mlx_device)){
   1f948:	4622      	mov	r2, r4
   1f94a:	2100      	movs	r1, #0
   1f94c:	2001      	movs	r0, #1
   1f94e:	f7f2 fa13 	bl	11d78 <mlx_setResolution>
   1f952:	b1a8      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }
  if (!mlx_setResolution(MLX90393_Z, MLX90393_RES_16, mlx_device)){
   1f954:	4622      	mov	r2, r4
   1f956:	2100      	movs	r1, #0
   1f958:	2002      	movs	r0, #2
   1f95a:	f7f2 fa0d 	bl	11d78 <mlx_setResolution>
   1f95e:	b178      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  /* Set oversampling. */
  if (!mlx_setOversampling(MLX90393_OSR_3, mlx_device)) {
   1f960:	4621      	mov	r1, r4
   1f962:	2003      	movs	r0, #3
   1f964:	f7f2 fa5c 	bl	11e20 <mlx_setOversampling>
   1f968:	b150      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  /* Set digital filtering. */
  if (!mlx_setFilter(MLX90393_FILTER_7, mlx_device)) {
   1f96a:	4621      	mov	r1, r4
   1f96c:	2007      	movs	r0, #7
   1f96e:	f7f2 fa3b 	bl	11de8 <mlx_setFilter>
   1f972:	b128      	cbz	r0, 1f980 <mlx_init+0x6a>
    return false;
  }

  /* set INT pin to output interrupt */
  if (!mlx_setTrigInt(true, mlx_device)) {
   1f974:	4621      	mov	r1, r4
   1f976:	2001      	movs	r0, #1
    return false;
  }

  return true;
   1f978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!mlx_setTrigInt(true, mlx_device)) {
   1f97c:	f7ff bfae 	b.w	1f8dc <mlx_setTrigInt>
   1f980:	2000      	movs	r0, #0
   1f982:	bd10      	pop	{r4, pc}

0001f984 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1f984:	4603      	mov	r3, r0
   1f986:	b140      	cbz	r0, 1f99a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f988:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f98a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1f98e:	2a02      	cmp	r2, #2
   1f990:	d006      	beq.n	1f9a0 <sys_notify_validate+0x1c>
   1f992:	2a03      	cmp	r2, #3
   1f994:	d004      	beq.n	1f9a0 <sys_notify_validate+0x1c>
   1f996:	2a01      	cmp	r2, #1
   1f998:	d005      	beq.n	1f9a6 <sys_notify_validate+0x22>
		return -EINVAL;
   1f99a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1f99e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1f9a0:	681a      	ldr	r2, [r3, #0]
   1f9a2:	2a00      	cmp	r2, #0
   1f9a4:	d0f9      	beq.n	1f99a <sys_notify_validate+0x16>
		notify->result = 0;
   1f9a6:	2000      	movs	r0, #0
   1f9a8:	6098      	str	r0, [r3, #8]
   1f9aa:	4770      	bx	lr

0001f9ac <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1f9ac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1f9ae:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1f9b2:	2a02      	cmp	r2, #2
{
   1f9b4:	b510      	push	{r4, lr}
   1f9b6:	4603      	mov	r3, r0
	notify->result = res;
   1f9b8:	6081      	str	r1, [r0, #8]
	switch (method) {
   1f9ba:	d00a      	beq.n	1f9d2 <sys_notify_finalize+0x26>
   1f9bc:	2a03      	cmp	r2, #3
   1f9be:	d10b      	bne.n	1f9d8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1f9c0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1f9c2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1f9c4:	2200      	movs	r2, #0
   1f9c6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1f9c8:	b108      	cbz	r0, 1f9ce <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1f9ca:	f7fc fa63 	bl	1be94 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1f9ce:	4620      	mov	r0, r4
   1f9d0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1f9d2:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1f9d4:	2400      	movs	r4, #0
		break;
   1f9d6:	e7f5      	b.n	1f9c4 <sys_notify_finalize+0x18>
	switch (method) {
   1f9d8:	2400      	movs	r4, #0
   1f9da:	4620      	mov	r0, r4
   1f9dc:	e7f2      	b.n	1f9c4 <sys_notify_finalize+0x18>

0001f9de <arch_printk_char_out>:
}
   1f9de:	2000      	movs	r0, #0
   1f9e0:	4770      	bx	lr

0001f9e2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   1f9e2:	b40f      	push	{r0, r1, r2, r3}
   1f9e4:	b507      	push	{r0, r1, r2, lr}
   1f9e6:	a904      	add	r1, sp, #16
   1f9e8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1f9ec:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1f9ee:	f7f2 fb49 	bl	12084 <vprintk>

	va_end(ap);
}
   1f9f2:	b003      	add	sp, #12
   1f9f4:	f85d eb04 	ldr.w	lr, [sp], #4
   1f9f8:	b004      	add	sp, #16
   1f9fa:	4770      	bx	lr

0001f9fc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1f9fc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1f9fe:	f013 0307 	ands.w	r3, r3, #7
   1fa02:	d105      	bne.n	1fa10 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1fa04:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1fa06:	2b00      	cmp	r3, #0
   1fa08:	bf0c      	ite	eq
   1fa0a:	2000      	moveq	r0, #0
   1fa0c:	2003      	movne	r0, #3
   1fa0e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1fa10:	2b02      	cmp	r3, #2
   1fa12:	d105      	bne.n	1fa20 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1fa14:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1fa16:	2b00      	cmp	r3, #0
   1fa18:	bf14      	ite	ne
   1fa1a:	2000      	movne	r0, #0
   1fa1c:	2004      	moveq	r0, #4
   1fa1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1fa20:	2b01      	cmp	r3, #1
   1fa22:	d105      	bne.n	1fa30 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1fa24:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1fa26:	2b00      	cmp	r3, #0
   1fa28:	bf0c      	ite	eq
   1fa2a:	2000      	moveq	r0, #0
   1fa2c:	2005      	movne	r0, #5
   1fa2e:	4770      	bx	lr
	int evt = EVT_NOP;
   1fa30:	2000      	movs	r0, #0
}
   1fa32:	4770      	bx	lr

0001fa34 <notify_one>:
{
   1fa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa38:	460d      	mov	r5, r1
   1fa3a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fa3c:	4619      	mov	r1, r3
   1fa3e:	1d28      	adds	r0, r5, #4
{
   1fa40:	4690      	mov	r8, r2
   1fa42:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fa44:	f7ff ffb2 	bl	1f9ac <sys_notify_finalize>
	if (cb) {
   1fa48:	4604      	mov	r4, r0
   1fa4a:	b138      	cbz	r0, 1fa5c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1fa4c:	4633      	mov	r3, r6
   1fa4e:	4642      	mov	r2, r8
   1fa50:	4629      	mov	r1, r5
   1fa52:	4638      	mov	r0, r7
   1fa54:	46a4      	mov	ip, r4
}
   1fa56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1fa5a:	4760      	bx	ip
}
   1fa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fa60 <transition_complete>:
{
   1fa60:	b410      	push	{r4}
	__asm__ volatile(
   1fa62:	f04f 0440 	mov.w	r4, #64	; 0x40
   1fa66:	f3ef 8211 	mrs	r2, BASEPRI
   1fa6a:	f384 8812 	msr	BASEPRI_MAX, r4
   1fa6e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1fa72:	6141      	str	r1, [r0, #20]
}
   1fa74:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1fa76:	2101      	movs	r1, #1
   1fa78:	f7f2 bb12 	b.w	120a0 <process_event>

0001fa7c <validate_args>:
{
   1fa7c:	b510      	push	{r4, lr}
   1fa7e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1fa80:	b140      	cbz	r0, 1fa94 <validate_args+0x18>
   1fa82:	b139      	cbz	r1, 1fa94 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1fa84:	1d08      	adds	r0, r1, #4
   1fa86:	f7ff ff7d 	bl	1f984 <sys_notify_validate>
	if ((rv == 0)
   1fa8a:	b928      	cbnz	r0, 1fa98 <validate_args+0x1c>
	    && ((cli->notify.flags
   1fa8c:	68a3      	ldr	r3, [r4, #8]
   1fa8e:	f033 0303 	bics.w	r3, r3, #3
   1fa92:	d001      	beq.n	1fa98 <validate_args+0x1c>
		rv = -EINVAL;
   1fa94:	f06f 0015 	mvn.w	r0, #21
}
   1fa98:	bd10      	pop	{r4, pc}

0001fa9a <onoff_manager_init>:
{
   1fa9a:	b538      	push	{r3, r4, r5, lr}
   1fa9c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1fa9e:	4605      	mov	r5, r0
   1faa0:	b158      	cbz	r0, 1faba <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1faa2:	b151      	cbz	r1, 1faba <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1faa4:	680b      	ldr	r3, [r1, #0]
   1faa6:	b143      	cbz	r3, 1faba <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1faa8:	684b      	ldr	r3, [r1, #4]
   1faaa:	b133      	cbz	r3, 1faba <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1faac:	221c      	movs	r2, #28
   1faae:	2100      	movs	r1, #0
   1fab0:	f003 fe98 	bl	237e4 <memset>
   1fab4:	612c      	str	r4, [r5, #16]
	return 0;
   1fab6:	2000      	movs	r0, #0
}
   1fab8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1faba:	f06f 0015 	mvn.w	r0, #21
   1fabe:	e7fb      	b.n	1fab8 <onoff_manager_init+0x1e>

0001fac0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1fac0:	b570      	push	{r4, r5, r6, lr}
   1fac2:	4604      	mov	r4, r0
   1fac4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1fac6:	f7ff ffd9 	bl	1fa7c <validate_args>

	if (rv < 0) {
   1faca:	1e05      	subs	r5, r0, #0
   1facc:	db31      	blt.n	1fb32 <onoff_request+0x72>
   1face:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fad2:	f3ef 8111 	mrs	r1, BASEPRI
   1fad6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fada:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fade:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fae0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fae2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1fae6:	42ab      	cmp	r3, r5
   1fae8:	f000 0207 	and.w	r2, r0, #7
   1faec:	d02e      	beq.n	1fb4c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1faee:	2a02      	cmp	r2, #2
   1faf0:	d10e      	bne.n	1fb10 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1faf2:	3301      	adds	r3, #1
   1faf4:	8363      	strh	r3, [r4, #26]
	rv = state;
   1faf6:	4615      	mov	r5, r2
		notify = true;
   1faf8:	2301      	movs	r3, #1
	__asm__ volatile(
   1fafa:	f381 8811 	msr	BASEPRI, r1
   1fafe:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1fb02:	b1b3      	cbz	r3, 1fb32 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1fb04:	2300      	movs	r3, #0
   1fb06:	4631      	mov	r1, r6
   1fb08:	4620      	mov	r0, r4
   1fb0a:	f7ff ff93 	bl	1fa34 <notify_one>
   1fb0e:	e010      	b.n	1fb32 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1fb10:	0783      	lsls	r3, r0, #30
   1fb12:	d001      	beq.n	1fb18 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fb14:	2a06      	cmp	r2, #6
   1fb16:	d10e      	bne.n	1fb36 <onoff_request+0x76>
	parent->next = child;
   1fb18:	2300      	movs	r3, #0
   1fb1a:	6033      	str	r3, [r6, #0]
	return list->tail;
   1fb1c:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1fb1e:	b993      	cbnz	r3, 1fb46 <onoff_request+0x86>
	list->head = node;
   1fb20:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1fb24:	4615      	mov	r5, r2
   1fb26:	b962      	cbnz	r2, 1fb42 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1fb28:	460a      	mov	r2, r1
   1fb2a:	4620      	mov	r0, r4
   1fb2c:	2102      	movs	r1, #2
   1fb2e:	f7f2 fab7 	bl	120a0 <process_event>
		}
	}

	return rv;
}
   1fb32:	4628      	mov	r0, r5
   1fb34:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1fb36:	2a05      	cmp	r2, #5
   1fb38:	bf0c      	ite	eq
   1fb3a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1fb3e:	f06f 0504 	mvnne.w	r5, #4
   1fb42:	2300      	movs	r3, #0
   1fb44:	e7d9      	b.n	1fafa <onoff_request+0x3a>
	parent->next = child;
   1fb46:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1fb48:	6066      	str	r6, [r4, #4]
}
   1fb4a:	e7eb      	b.n	1fb24 <onoff_request+0x64>
		rv = -EAGAIN;
   1fb4c:	f06f 050a 	mvn.w	r5, #10
   1fb50:	e7f7      	b.n	1fb42 <onoff_request+0x82>

0001fb52 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1fb52:	4604      	mov	r4, r0
   1fb54:	b508      	push	{r3, lr}
   1fb56:	4608      	mov	r0, r1
   1fb58:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1fb5a:	461a      	mov	r2, r3
   1fb5c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1fb5e:	f7fb fee9 	bl	1b934 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1fb62:	f7f3 ffcb 	bl	13afc <z_impl_k_thread_abort>

0001fb66 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1fb66:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1fb6a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1fb6c:	0840      	lsrs	r0, r0, #1
   1fb6e:	4770      	bx	lr

0001fb70 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1fb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb72:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fb74:	f7ff fff7 	bl	1fb66 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1fb78:	fab0 f080 	clz	r0, r0
   1fb7c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1fb80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1fb84:	00ca      	lsls	r2, r1, #3
   1fb86:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1fb8a:	1d17      	adds	r7, r2, #4
{
   1fb8c:	460c      	mov	r4, r1
   1fb8e:	3206      	adds	r2, #6
   1fb90:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1fb92:	b956      	cbnz	r6, 1fbaa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1fb94:	2101      	movs	r1, #1
   1fb96:	fa01 f000 	lsl.w	r0, r1, r0
   1fb9a:	68d9      	ldr	r1, [r3, #12]
   1fb9c:	4301      	orrs	r1, r0
   1fb9e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1fba0:	f8cc 4010 	str.w	r4, [ip, #16]
   1fba4:	53dd      	strh	r5, [r3, r7]
   1fba6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1fba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1fbaa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1fbac:	3104      	adds	r1, #4
   1fbae:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1fbb0:	53d8      	strh	r0, [r3, r7]
   1fbb2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1fbb6:	529e      	strh	r6, [r3, r2]
   1fbb8:	80c5      	strh	r5, [r0, #6]
   1fbba:	525d      	strh	r5, [r3, r1]
   1fbbc:	e7f4      	b.n	1fba8 <free_list_add+0x38>

0001fbbe <free_list_remove_bidx>:
{
   1fbbe:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1fbc0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1fbc4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1fbc6:	4299      	cmp	r1, r3
   1fbc8:	f102 0104 	add.w	r1, r2, #4
   1fbcc:	d10a      	bne.n	1fbe4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1fbce:	2301      	movs	r3, #1
   1fbd0:	fa03 f202 	lsl.w	r2, r3, r2
   1fbd4:	68c3      	ldr	r3, [r0, #12]
   1fbd6:	ea23 0302 	bic.w	r3, r3, r2
   1fbda:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1fbdc:	2300      	movs	r3, #0
   1fbde:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1fbe2:	bd10      	pop	{r4, pc}
   1fbe4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1fbe6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1fbea:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1fbee:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1fbf2:	80cb      	strh	r3, [r1, #6]
   1fbf4:	8082      	strh	r2, [r0, #4]
}
   1fbf6:	e7f4      	b.n	1fbe2 <free_list_remove_bidx+0x24>

0001fbf8 <free_list_remove>:
{
   1fbf8:	b508      	push	{r3, lr}
   1fbfa:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1fbfc:	f7ff ffb3 	bl	1fb66 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1fc00:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1fc04:	f1c2 021f 	rsb	r2, r2, #31
   1fc08:	4618      	mov	r0, r3
}
   1fc0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1fc0e:	f7ff bfd6 	b.w	1fbbe <free_list_remove_bidx>

0001fc12 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1fc12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fc16:	fab1 f581 	clz	r5, r1
   1fc1a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1fc1e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1fc22:	4603      	mov	r3, r0
	if (b->next) {
   1fc24:	693a      	ldr	r2, [r7, #16]
{
   1fc26:	460e      	mov	r6, r1
	if (b->next) {
   1fc28:	b1c2      	cbz	r2, 1fc5c <alloc_chunk+0x4a>
   1fc2a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1fc2e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   1fc30:	4618      	mov	r0, r3
   1fc32:	4621      	mov	r1, r4
   1fc34:	f7ff ff97 	bl	1fb66 <chunk_size>
   1fc38:	42b0      	cmp	r0, r6
   1fc3a:	d306      	bcc.n	1fc4a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1fc3c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1fc3e:	4618      	mov	r0, r3
   1fc40:	f7ff ffbd 	bl	1fbbe <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1fc44:	4620      	mov	r0, r4
   1fc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1fc4a:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   1fc4e:	f1b8 0801 	subs.w	r8, r8, #1
   1fc52:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1fc54:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1fc56:	d001      	beq.n	1fc5c <alloc_chunk+0x4a>
   1fc58:	4282      	cmp	r2, r0
   1fc5a:	d1e8      	bne.n	1fc2e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1fc5c:	f1c5 0220 	rsb	r2, r5, #32
   1fc60:	f04f 34ff 	mov.w	r4, #4294967295
   1fc64:	4094      	lsls	r4, r2
   1fc66:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1fc68:	4014      	ands	r4, r2
   1fc6a:	d0eb      	beq.n	1fc44 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   1fc6c:	fa94 f2a4 	rbit	r2, r4
   1fc70:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1fc74:	1d11      	adds	r1, r2, #4
   1fc76:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1fc7a:	4621      	mov	r1, r4
   1fc7c:	e7df      	b.n	1fc3e <alloc_chunk+0x2c>

0001fc7e <merge_chunks>:
{
   1fc7e:	b538      	push	{r3, r4, r5, lr}
   1fc80:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fc82:	f7ff ff70 	bl	1fb66 <chunk_size>
{
   1fc86:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1fc88:	4604      	mov	r4, r0
   1fc8a:	4611      	mov	r1, r2
   1fc8c:	4618      	mov	r0, r3
   1fc8e:	f7ff ff6a 	bl	1fb66 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1fc92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1fc96:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fc98:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1fc9a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1fc9c:	4618      	mov	r0, r3
   1fc9e:	f7ff ff62 	bl	1fb66 <chunk_size>
	void *cmem = &buf[c];
   1fca2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fca4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1fca8:	bd38      	pop	{r3, r4, r5, pc}

0001fcaa <split_chunks>:
{
   1fcaa:	b538      	push	{r3, r4, r5, lr}
   1fcac:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1fcae:	f7ff ff5a 	bl	1fb66 <chunk_size>
{
   1fcb2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1fcb4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1fcb6:	1a51      	subs	r1, r2, r1
   1fcb8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1fcbc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcbe:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1fcc0:	8060      	strh	r0, [r4, #2]
   1fcc2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fcc6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1fcc8:	8044      	strh	r4, [r0, #2]
   1fcca:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1fcce:	4618      	mov	r0, r3
   1fcd0:	4611      	mov	r1, r2
   1fcd2:	f7ff ff48 	bl	1fb66 <chunk_size>
	void *cmem = &buf[c];
   1fcd6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1fcd8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1fcdc:	bd38      	pop	{r3, r4, r5, pc}

0001fcde <free_chunk>:
{
   1fcde:	b538      	push	{r3, r4, r5, lr}
   1fce0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1fce2:	f7ff ff40 	bl	1fb66 <chunk_size>
   1fce6:	460c      	mov	r4, r1
   1fce8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1fcea:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fcee:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1fcf0:	07da      	lsls	r2, r3, #31
   1fcf2:	d40a      	bmi.n	1fd0a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1fcf4:	4628      	mov	r0, r5
   1fcf6:	f7ff ff7f 	bl	1fbf8 <free_list_remove>
	return c + chunk_size(h, c);
   1fcfa:	4621      	mov	r1, r4
   1fcfc:	4628      	mov	r0, r5
   1fcfe:	f7ff ff32 	bl	1fb66 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1fd02:	1822      	adds	r2, r4, r0
   1fd04:	4628      	mov	r0, r5
   1fd06:	f7ff ffba 	bl	1fc7e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1fd0a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd0e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1fd10:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1fd14:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1fd16:	07db      	lsls	r3, r3, #31
   1fd18:	d40c      	bmi.n	1fd34 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1fd1a:	4628      	mov	r0, r5
   1fd1c:	f7ff ff6c 	bl	1fbf8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1fd20:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1fd24:	4622      	mov	r2, r4
   1fd26:	1a61      	subs	r1, r4, r1
   1fd28:	4628      	mov	r0, r5
   1fd2a:	f7ff ffa8 	bl	1fc7e <merge_chunks>
   1fd2e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1fd32:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1fd34:	4621      	mov	r1, r4
   1fd36:	4628      	mov	r0, r5
}
   1fd38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1fd3c:	f7ff bf18 	b.w	1fb70 <free_list_add>

0001fd40 <sys_heap_free>:
	if (mem == NULL) {
   1fd40:	b161      	cbz	r1, 1fd5c <sys_heap_free+0x1c>
   1fd42:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fd44:	3904      	subs	r1, #4
   1fd46:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1fd48:	f021 0307 	bic.w	r3, r1, #7
   1fd4c:	4403      	add	r3, r0
	free_chunk(h, c);
   1fd4e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1fd50:	885a      	ldrh	r2, [r3, #2]
   1fd52:	f022 0201 	bic.w	r2, r2, #1
   1fd56:	805a      	strh	r2, [r3, #2]
   1fd58:	f7ff bfc1 	b.w	1fcde <free_chunk>
}
   1fd5c:	4770      	bx	lr

0001fd5e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1fd5e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1fd60:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1fd62:	b909      	cbnz	r1, 1fd68 <sys_heap_alloc+0xa>
		return NULL;
   1fd64:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fd66:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1fd68:	68ab      	ldr	r3, [r5, #8]
   1fd6a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1fd6e:	d9f9      	bls.n	1fd64 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fd70:	310b      	adds	r1, #11
   1fd72:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1fd74:	4621      	mov	r1, r4
   1fd76:	4628      	mov	r0, r5
   1fd78:	f7ff ff4b 	bl	1fc12 <alloc_chunk>
	if (c == 0U) {
   1fd7c:	4606      	mov	r6, r0
   1fd7e:	2800      	cmp	r0, #0
   1fd80:	d0f0      	beq.n	1fd64 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1fd82:	4601      	mov	r1, r0
   1fd84:	4628      	mov	r0, r5
   1fd86:	f7ff feee 	bl	1fb66 <chunk_size>
   1fd8a:	42a0      	cmp	r0, r4
   1fd8c:	d907      	bls.n	1fd9e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1fd8e:	1932      	adds	r2, r6, r4
   1fd90:	4628      	mov	r0, r5
   1fd92:	f7ff ff8a 	bl	1fcaa <split_chunks>
		free_list_add(h, c + chunk_sz);
   1fd96:	4611      	mov	r1, r2
   1fd98:	4628      	mov	r0, r5
   1fd9a:	f7ff fee9 	bl	1fb70 <free_list_add>
	void *cmem = &buf[c];
   1fd9e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1fda2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fda4:	8853      	ldrh	r3, [r2, #2]
   1fda6:	f043 0301 	orr.w	r3, r3, #1
   1fdaa:	8053      	strh	r3, [r2, #2]
   1fdac:	3004      	adds	r0, #4
	return mem;
   1fdae:	e7da      	b.n	1fd66 <sys_heap_alloc+0x8>

0001fdb0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1fdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fdb4:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1fdb6:	424a      	negs	r2, r1
   1fdb8:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1fdbc:	ea31 0202 	bics.w	r2, r1, r2
{
   1fdc0:	4603      	mov	r3, r0
	if (align != rew) {
   1fdc2:	d00a      	beq.n	1fdda <sys_heap_aligned_alloc+0x2a>
		return false;
   1fdc4:	2f04      	cmp	r7, #4
   1fdc6:	463a      	mov	r2, r7
   1fdc8:	46b9      	mov	r9, r7
   1fdca:	bf28      	it	cs
   1fdcc:	2204      	movcs	r2, #4
		align -= rew;
   1fdce:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1fdd0:	b974      	cbnz	r4, 1fdf0 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1fdd2:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1fdd4:	4628      	mov	r0, r5
   1fdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1fdda:	2904      	cmp	r1, #4
   1fddc:	d804      	bhi.n	1fde8 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   1fdde:	4621      	mov	r1, r4
}
   1fde0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1fde4:	f7ff bfbb 	b.w	1fd5e <sys_heap_alloc>
		rew = 0;
   1fde8:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1fdec:	2204      	movs	r2, #4
   1fdee:	e7ef      	b.n	1fdd0 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   1fdf0:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1fdf2:	68b3      	ldr	r3, [r6, #8]
   1fdf4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1fdf8:	d9eb      	bls.n	1fdd2 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fdfa:	f104 010b 	add.w	r1, r4, #11
   1fdfe:	4439      	add	r1, r7
   1fe00:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1fe02:	08c9      	lsrs	r1, r1, #3
   1fe04:	4630      	mov	r0, r6
   1fe06:	f7ff ff04 	bl	1fc12 <alloc_chunk>
	if (c0 == 0) {
   1fe0a:	4680      	mov	r8, r0
   1fe0c:	2800      	cmp	r0, #0
   1fe0e:	d0e0      	beq.n	1fdd2 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1fe10:	f109 0504 	add.w	r5, r9, #4
   1fe14:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1fe18:	1e7b      	subs	r3, r7, #1
   1fe1a:	4435      	add	r5, r6
   1fe1c:	441d      	add	r5, r3
   1fe1e:	427f      	negs	r7, r7
   1fe20:	403d      	ands	r5, r7
   1fe22:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fe26:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe28:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fe2a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe2c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1fe2e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1fe32:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1fe34:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1fe38:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1fe3c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1fe40:	d208      	bcs.n	1fe54 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1fe42:	4601      	mov	r1, r0
   1fe44:	463a      	mov	r2, r7
   1fe46:	4630      	mov	r0, r6
   1fe48:	f7ff ff2f 	bl	1fcaa <split_chunks>
		free_list_add(h, c0);
   1fe4c:	4641      	mov	r1, r8
   1fe4e:	4630      	mov	r0, r6
   1fe50:	f7ff fe8e 	bl	1fb70 <free_list_add>
	return c + chunk_size(h, c);
   1fe54:	4639      	mov	r1, r7
   1fe56:	4630      	mov	r0, r6
   1fe58:	f7ff fe85 	bl	1fb66 <chunk_size>
   1fe5c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1fe5e:	4284      	cmp	r4, r0
   1fe60:	d207      	bcs.n	1fe72 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   1fe62:	4630      	mov	r0, r6
   1fe64:	4622      	mov	r2, r4
   1fe66:	f7ff ff20 	bl	1fcaa <split_chunks>
		free_list_add(h, c_end);
   1fe6a:	4621      	mov	r1, r4
   1fe6c:	4630      	mov	r0, r6
   1fe6e:	f7ff fe7f 	bl	1fb70 <free_list_add>
	void *cmem = &buf[c];
   1fe72:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fe76:	8873      	ldrh	r3, [r6, #2]
   1fe78:	f043 0301 	orr.w	r3, r3, #1
   1fe7c:	8073      	strh	r3, [r6, #2]
   1fe7e:	e7a9      	b.n	1fdd4 <sys_heap_aligned_alloc+0x24>

0001fe80 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1fe80:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fe82:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fe84:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1fe86:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1fe8a:	f021 0107 	bic.w	r1, r1, #7
{
   1fe8e:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1fe90:	1acd      	subs	r5, r1, r3
   1fe92:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1fe94:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   1fe96:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1fe9a:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   1fe9e:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1fea0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   1fea2:	2600      	movs	r6, #0
   1fea4:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1fea6:	f1c0 0020 	rsb	r0, r0, #32
   1feaa:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   1feae:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   1feb0:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1feb2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1feb6:	4284      	cmp	r4, r0
   1feb8:	d118      	bne.n	1feec <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1feba:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1febc:	f040 0001 	orr.w	r0, r0, #1
   1fec0:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1fec2:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1fec6:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1fec8:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1feca:	801e      	strh	r6, [r3, #0]
   1fecc:	8067      	strh	r7, [r4, #2]
   1fece:	195c      	adds	r4, r3, r5
   1fed0:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1fed4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1fed8:	8066      	strh	r6, [r4, #2]
   1feda:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1fedc:	8850      	ldrh	r0, [r2, #2]
   1fede:	f040 0001 	orr.w	r0, r0, #1
   1fee2:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1fee4:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1fee6:	4618      	mov	r0, r3
   1fee8:	f7ff be42 	b.w	1fb70 <free_list_add>
		h->buckets[i].next = 0;
   1feec:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   1fef0:	e7e1      	b.n	1feb6 <sys_heap_init+0x36>

0001fef2 <_ldiv5>:
	uint32_t v_lo = *v;
   1fef2:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   1fef6:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1fef8:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1fefc:	fba2 2403 	umull	r2, r4, r2, r3
   1ff00:	18d5      	adds	r5, r2, r3
   1ff02:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   1ff06:	fba1 1303 	umull	r1, r3, r1, r3
   1ff0a:	1852      	adds	r2, r2, r1
   1ff0c:	eb44 0403 	adc.w	r4, r4, r3
   1ff10:	1952      	adds	r2, r2, r5
   1ff12:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   1ff16:	1889      	adds	r1, r1, r2
   1ff18:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1ff1c:	e9c0 1300 	strd	r1, r3, [r0]
}
   1ff20:	bd30      	pop	{r4, r5, pc}

0001ff22 <_get_digit>:
	if (*digit_count > 0) {
   1ff22:	680a      	ldr	r2, [r1, #0]
   1ff24:	2a00      	cmp	r2, #0
{
   1ff26:	b510      	push	{r4, lr}
   1ff28:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1ff2a:	dd0f      	ble.n	1ff4c <_get_digit+0x2a>
		--*digit_count;
   1ff2c:	3a01      	subs	r2, #1
   1ff2e:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   1ff30:	681a      	ldr	r2, [r3, #0]
   1ff32:	6844      	ldr	r4, [r0, #4]
   1ff34:	200a      	movs	r0, #10
   1ff36:	fba2 1200 	umull	r1, r2, r2, r0
   1ff3a:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1ff3e:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   1ff40:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1ff44:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1ff48:	3030      	adds	r0, #48	; 0x30
}
   1ff4a:	bd10      	pop	{r4, pc}
		rval = '0';
   1ff4c:	2030      	movs	r0, #48	; 0x30
   1ff4e:	e7fc      	b.n	1ff4a <_get_digit+0x28>

0001ff50 <outs>:
{
   1ff50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff54:	4607      	mov	r7, r0
   1ff56:	4688      	mov	r8, r1
   1ff58:	4615      	mov	r5, r2
   1ff5a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ff5c:	4614      	mov	r4, r2
   1ff5e:	42b4      	cmp	r4, r6
   1ff60:	eba4 0005 	sub.w	r0, r4, r5
   1ff64:	d302      	bcc.n	1ff6c <outs+0x1c>
   1ff66:	b93e      	cbnz	r6, 1ff78 <outs+0x28>
   1ff68:	7823      	ldrb	r3, [r4, #0]
   1ff6a:	b12b      	cbz	r3, 1ff78 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1ff6c:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ff70:	4641      	mov	r1, r8
   1ff72:	47b8      	blx	r7
		if (rc < 0) {
   1ff74:	2800      	cmp	r0, #0
   1ff76:	daf2      	bge.n	1ff5e <outs+0xe>
}
   1ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ff7c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1ff7c:	b40f      	push	{r0, r1, r2, r3}
   1ff7e:	b507      	push	{r0, r1, r2, lr}
   1ff80:	a904      	add	r1, sp, #16
   1ff82:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1ff86:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1ff88:	f7f2 f87c 	bl	12084 <vprintk>

	va_end(ap);
}
   1ff8c:	b003      	add	sp, #12
   1ff8e:	f85d eb04 	ldr.w	lr, [sp], #4
   1ff92:	b004      	add	sp, #16
   1ff94:	4770      	bx	lr

0001ff96 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   1ff96:	4770      	bx	lr

0001ff98 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1ff98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ff9c:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ffa0:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ffa2:	4640      	mov	r0, r8
{
   1ffa4:	461f      	mov	r7, r3
   1ffa6:	460c      	mov	r4, r1
   1ffa8:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ffaa:	f7ec fd44 	bl	ca36 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ffae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ffb2:	9300      	str	r3, [sp, #0]
   1ffb4:	b280      	uxth	r0, r0
   1ffb6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1ffba:	463b      	mov	r3, r7
   1ffbc:	4632      	mov	r2, r6
   1ffbe:	4621      	mov	r1, r4
   1ffc0:	4628      	mov	r0, r5
   1ffc2:	f002 f87e 	bl	220c2 <bt_gatt_attr_read>
}
   1ffc6:	b004      	add	sp, #16
   1ffc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ffcc <blvl_ccc_cfg_changed>:
}
   1ffcc:	4770      	bx	lr

0001ffce <bas_init>:
static int bas_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return 0;
}
   1ffce:	2000      	movs	r0, #0
   1ffd0:	4770      	bx	lr

0001ffd2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1ffd2:	b538      	push	{r3, r4, r5, lr}
   1ffd4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1ffd6:	42ab      	cmp	r3, r5
{
   1ffd8:	4611      	mov	r1, r2
   1ffda:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1ffdc:	d804      	bhi.n	1ffe8 <_copy+0x16>
   1ffde:	461a      	mov	r2, r3
   1ffe0:	f003 fbdf 	bl	237a2 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1ffe4:	4620      	mov	r0, r4
   1ffe6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1ffe8:	2400      	movs	r4, #0
   1ffea:	e7fb      	b.n	1ffe4 <_copy+0x12>

0001ffec <_set>:
__ssp_bos_icheck3(memset, void *, int)
   1ffec:	f003 bbfa 	b.w	237e4 <memset>

0001fff0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1fff0:	09c3      	lsrs	r3, r0, #7
   1fff2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1fff6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1fffa:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1fffe:	b2c0      	uxtb	r0, r0
   20000:	4770      	bx	lr

00020002 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   20002:	78cb      	ldrb	r3, [r1, #3]
   20004:	7802      	ldrb	r2, [r0, #0]
   20006:	4053      	eors	r3, r2
   20008:	7003      	strb	r3, [r0, #0]
   2000a:	884b      	ldrh	r3, [r1, #2]
   2000c:	7842      	ldrb	r2, [r0, #1]
   2000e:	4053      	eors	r3, r2
   20010:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   20012:	680a      	ldr	r2, [r1, #0]
   20014:	7883      	ldrb	r3, [r0, #2]
   20016:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2001a:	7083      	strb	r3, [r0, #2]
   2001c:	680a      	ldr	r2, [r1, #0]
   2001e:	78c3      	ldrb	r3, [r0, #3]
   20020:	4053      	eors	r3, r2
   20022:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   20024:	79cb      	ldrb	r3, [r1, #7]
   20026:	7902      	ldrb	r2, [r0, #4]
   20028:	4053      	eors	r3, r2
   2002a:	7103      	strb	r3, [r0, #4]
   2002c:	88cb      	ldrh	r3, [r1, #6]
   2002e:	7942      	ldrb	r2, [r0, #5]
   20030:	4053      	eors	r3, r2
   20032:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   20034:	684a      	ldr	r2, [r1, #4]
   20036:	7983      	ldrb	r3, [r0, #6]
   20038:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2003c:	7183      	strb	r3, [r0, #6]
   2003e:	684a      	ldr	r2, [r1, #4]
   20040:	79c3      	ldrb	r3, [r0, #7]
   20042:	4053      	eors	r3, r2
   20044:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   20046:	7acb      	ldrb	r3, [r1, #11]
   20048:	7a02      	ldrb	r2, [r0, #8]
   2004a:	4053      	eors	r3, r2
   2004c:	7203      	strb	r3, [r0, #8]
   2004e:	7a42      	ldrb	r2, [r0, #9]
   20050:	894b      	ldrh	r3, [r1, #10]
   20052:	4053      	eors	r3, r2
   20054:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   20056:	688a      	ldr	r2, [r1, #8]
   20058:	7a83      	ldrb	r3, [r0, #10]
   2005a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2005e:	7283      	strb	r3, [r0, #10]
   20060:	688a      	ldr	r2, [r1, #8]
   20062:	7ac3      	ldrb	r3, [r0, #11]
   20064:	4053      	eors	r3, r2
   20066:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   20068:	7bcb      	ldrb	r3, [r1, #15]
   2006a:	7b02      	ldrb	r2, [r0, #12]
   2006c:	4053      	eors	r3, r2
   2006e:	7303      	strb	r3, [r0, #12]
   20070:	89cb      	ldrh	r3, [r1, #14]
   20072:	7b42      	ldrb	r2, [r0, #13]
   20074:	4053      	eors	r3, r2
   20076:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   20078:	68ca      	ldr	r2, [r1, #12]
   2007a:	7b83      	ldrb	r3, [r0, #14]
   2007c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   20080:	7383      	strb	r3, [r0, #14]
   20082:	68ca      	ldr	r2, [r1, #12]
   20084:	7bc3      	ldrb	r3, [r0, #15]
   20086:	4053      	eors	r3, r2
   20088:	73c3      	strb	r3, [r0, #15]
}
   2008a:	4770      	bx	lr

0002008c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2008c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2008e:	7802      	ldrb	r2, [r0, #0]
   20090:	f88d 2000 	strb.w	r2, [sp]
   20094:	7942      	ldrb	r2, [r0, #5]
   20096:	f88d 2001 	strb.w	r2, [sp, #1]
   2009a:	7a82      	ldrb	r2, [r0, #10]
   2009c:	f88d 2002 	strb.w	r2, [sp, #2]
   200a0:	7bc2      	ldrb	r2, [r0, #15]
   200a2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   200a6:	7902      	ldrb	r2, [r0, #4]
   200a8:	f88d 2004 	strb.w	r2, [sp, #4]
   200ac:	7a42      	ldrb	r2, [r0, #9]
   200ae:	f88d 2005 	strb.w	r2, [sp, #5]
   200b2:	7b82      	ldrb	r2, [r0, #14]
   200b4:	f88d 2006 	strb.w	r2, [sp, #6]
   200b8:	78c2      	ldrb	r2, [r0, #3]
   200ba:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   200be:	7a02      	ldrb	r2, [r0, #8]
   200c0:	f88d 2008 	strb.w	r2, [sp, #8]
   200c4:	7b42      	ldrb	r2, [r0, #13]
   200c6:	f88d 2009 	strb.w	r2, [sp, #9]
   200ca:	7882      	ldrb	r2, [r0, #2]
   200cc:	f88d 200a 	strb.w	r2, [sp, #10]
   200d0:	79c2      	ldrb	r2, [r0, #7]
   200d2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   200d6:	7b02      	ldrb	r2, [r0, #12]
   200d8:	f88d 200c 	strb.w	r2, [sp, #12]
   200dc:	7842      	ldrb	r2, [r0, #1]
   200de:	7ac3      	ldrb	r3, [r0, #11]
   200e0:	f88d 200d 	strb.w	r2, [sp, #13]
   200e4:	7982      	ldrb	r2, [r0, #6]
   200e6:	f88d 200e 	strb.w	r2, [sp, #14]
   200ea:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   200ee:	2310      	movs	r3, #16
   200f0:	466a      	mov	r2, sp
   200f2:	4619      	mov	r1, r3
   200f4:	f7ff ff6d 	bl	1ffd2 <_copy>
}
   200f8:	b005      	add	sp, #20
   200fa:	f85d fb04 	ldr.w	pc, [sp], #4

000200fe <mult_row_column>:
{
   200fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20100:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20102:	7808      	ldrb	r0, [r1, #0]
{
   20104:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20106:	f7ff ff73 	bl	1fff0 <_double_byte>
   2010a:	4605      	mov	r5, r0
   2010c:	7860      	ldrb	r0, [r4, #1]
   2010e:	f7ff ff6f 	bl	1fff0 <_double_byte>
   20112:	78a2      	ldrb	r2, [r4, #2]
   20114:	7863      	ldrb	r3, [r4, #1]
   20116:	4053      	eors	r3, r2
   20118:	78e2      	ldrb	r2, [r4, #3]
   2011a:	4053      	eors	r3, r2
   2011c:	405d      	eors	r5, r3
   2011e:	4045      	eors	r5, r0
   20120:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   20122:	7860      	ldrb	r0, [r4, #1]
   20124:	7827      	ldrb	r7, [r4, #0]
   20126:	f7ff ff63 	bl	1fff0 <_double_byte>
   2012a:	4605      	mov	r5, r0
   2012c:	78a0      	ldrb	r0, [r4, #2]
   2012e:	f7ff ff5f 	bl	1fff0 <_double_byte>
   20132:	78a3      	ldrb	r3, [r4, #2]
   20134:	405f      	eors	r7, r3
   20136:	78e3      	ldrb	r3, [r4, #3]
   20138:	405f      	eors	r7, r3
   2013a:	407d      	eors	r5, r7
   2013c:	4045      	eors	r5, r0
   2013e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   20140:	78a0      	ldrb	r0, [r4, #2]
   20142:	7865      	ldrb	r5, [r4, #1]
   20144:	7827      	ldrb	r7, [r4, #0]
   20146:	f7ff ff53 	bl	1fff0 <_double_byte>
   2014a:	406f      	eors	r7, r5
   2014c:	4605      	mov	r5, r0
   2014e:	78e0      	ldrb	r0, [r4, #3]
   20150:	f7ff ff4e 	bl	1fff0 <_double_byte>
   20154:	78e3      	ldrb	r3, [r4, #3]
   20156:	405f      	eors	r7, r3
   20158:	407d      	eors	r5, r7
   2015a:	4045      	eors	r5, r0
   2015c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2015e:	7820      	ldrb	r0, [r4, #0]
   20160:	f7ff ff46 	bl	1fff0 <_double_byte>
   20164:	7863      	ldrb	r3, [r4, #1]
   20166:	7825      	ldrb	r5, [r4, #0]
   20168:	405d      	eors	r5, r3
   2016a:	78a3      	ldrb	r3, [r4, #2]
   2016c:	405d      	eors	r5, r3
   2016e:	4045      	eors	r5, r0
   20170:	78e0      	ldrb	r0, [r4, #3]
   20172:	f7ff ff3d 	bl	1fff0 <_double_byte>
   20176:	b2ed      	uxtb	r5, r5
   20178:	4045      	eors	r5, r0
   2017a:	70f5      	strb	r5, [r6, #3]
}
   2017c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002017e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2017e:	b570      	push	{r4, r5, r6, lr}
   20180:	4614      	mov	r4, r2
   20182:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   20184:	4605      	mov	r5, r0
   20186:	2800      	cmp	r0, #0
   20188:	d049      	beq.n	2021e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2018a:	2900      	cmp	r1, #0
   2018c:	d049      	beq.n	20222 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2018e:	2a00      	cmp	r2, #0
   20190:	d049      	beq.n	20226 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   20192:	2310      	movs	r3, #16
   20194:	460a      	mov	r2, r1
   20196:	4668      	mov	r0, sp
   20198:	4619      	mov	r1, r3
   2019a:	f7ff ff1a 	bl	1ffd2 <_copy>
	add_round_key(state, s->words);
   2019e:	4621      	mov	r1, r4
   201a0:	4668      	mov	r0, sp
   201a2:	f7ff ff2e 	bl	20002 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   201a6:	3410      	adds	r4, #16
   201a8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   201ac:	4668      	mov	r0, sp
   201ae:	f7f3 f89b 	bl	132e8 <sub_bytes>
		shift_rows(state);
   201b2:	4668      	mov	r0, sp
   201b4:	f7ff ff6a 	bl	2008c <shift_rows>
	mult_row_column(t, s);
   201b8:	4669      	mov	r1, sp
   201ba:	a804      	add	r0, sp, #16
   201bc:	f7ff ff9f 	bl	200fe <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   201c0:	a901      	add	r1, sp, #4
   201c2:	a805      	add	r0, sp, #20
   201c4:	f7ff ff9b 	bl	200fe <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   201c8:	a902      	add	r1, sp, #8
   201ca:	a806      	add	r0, sp, #24
   201cc:	f7ff ff97 	bl	200fe <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   201d0:	a903      	add	r1, sp, #12
   201d2:	a807      	add	r0, sp, #28
   201d4:	f7ff ff93 	bl	200fe <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   201d8:	2310      	movs	r3, #16
   201da:	4619      	mov	r1, r3
   201dc:	eb0d 0203 	add.w	r2, sp, r3
   201e0:	4668      	mov	r0, sp
   201e2:	f7ff fef6 	bl	1ffd2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   201e6:	4621      	mov	r1, r4
   201e8:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   201ea:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   201ec:	f7ff ff09 	bl	20002 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   201f0:	42a6      	cmp	r6, r4
   201f2:	d1db      	bne.n	201ac <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   201f4:	f7f3 f878 	bl	132e8 <sub_bytes>
	shift_rows(state);
   201f8:	4668      	mov	r0, sp
   201fa:	f7ff ff47 	bl	2008c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   201fe:	4631      	mov	r1, r6
   20200:	4668      	mov	r0, sp
   20202:	f7ff fefe 	bl	20002 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   20206:	2310      	movs	r3, #16
   20208:	4619      	mov	r1, r3
   2020a:	466a      	mov	r2, sp
   2020c:	4628      	mov	r0, r5
   2020e:	f7ff fee0 	bl	1ffd2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   20212:	4668      	mov	r0, sp
   20214:	2210      	movs	r2, #16
   20216:	2100      	movs	r1, #0
   20218:	f7ff fee8 	bl	1ffec <_set>

	return TC_CRYPTO_SUCCESS;
   2021c:	2001      	movs	r0, #1
}
   2021e:	b008      	add	sp, #32
   20220:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   20222:	4608      	mov	r0, r1
   20224:	e7fb      	b.n	2021e <tc_aes_encrypt+0xa0>
   20226:	4610      	mov	r0, r2
   20228:	e7f9      	b.n	2021e <tc_aes_encrypt+0xa0>

0002022a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2022a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2022c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2022e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20230:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20234:	2b00      	cmp	r3, #0
   20236:	bfb4      	ite	lt
   20238:	2387      	movlt	r3, #135	; 0x87
   2023a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2023c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   20240:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   20244:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   20246:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2024a:	d002      	beq.n	20252 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2024c:	7813      	ldrb	r3, [r2, #0]
   2024e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   20250:	e7f4      	b.n	2023c <gf_double+0x12>
	}
}
   20252:	bd10      	pop	{r4, pc}

00020254 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   20254:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   20256:	b120      	cbz	r0, 20262 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   20258:	2258      	movs	r2, #88	; 0x58
   2025a:	2100      	movs	r1, #0
   2025c:	f7ff fec6 	bl	1ffec <_set>
   20260:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   20262:	bd08      	pop	{r3, pc}

00020264 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   20264:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   20266:	4604      	mov	r4, r0
   20268:	b188      	cbz	r0, 2028e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2026a:	2210      	movs	r2, #16
   2026c:	2100      	movs	r1, #0
   2026e:	f7ff febd 	bl	1ffec <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   20272:	2210      	movs	r2, #16
   20274:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20278:	2100      	movs	r1, #0
   2027a:	f7ff feb7 	bl	1ffec <_set>
	s->leftover_offset = 0;
   2027e:	2300      	movs	r3, #0
   20280:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   20282:	2200      	movs	r2, #0
   20284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20288:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2028c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2028e:	bd10      	pop	{r4, pc}

00020290 <tc_cmac_setup>:
{
   20290:	b570      	push	{r4, r5, r6, lr}
   20292:	460d      	mov	r5, r1
   20294:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   20296:	4604      	mov	r4, r0
   20298:	b310      	cbz	r0, 202e0 <tc_cmac_setup+0x50>
   2029a:	b311      	cbz	r1, 202e2 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2029c:	2258      	movs	r2, #88	; 0x58
   2029e:	2100      	movs	r1, #0
   202a0:	f7ff fea4 	bl	1ffec <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   202a4:	4629      	mov	r1, r5
	s->sched = sched;
   202a6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   202a8:	4630      	mov	r0, r6
   202aa:	f7f3 f829 	bl	13300 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   202ae:	2210      	movs	r2, #16
   202b0:	2100      	movs	r1, #0
   202b2:	4620      	mov	r0, r4
   202b4:	f7ff fe9a 	bl	1ffec <_set>
	gf_double (s->K1, s->iv);
   202b8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   202bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   202be:	4621      	mov	r1, r4
   202c0:	4620      	mov	r0, r4
   202c2:	f7ff ff5c 	bl	2017e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   202c6:	4621      	mov	r1, r4
   202c8:	4628      	mov	r0, r5
   202ca:	f7ff ffae 	bl	2022a <gf_double>
	gf_double (s->K2, s->K1);
   202ce:	4629      	mov	r1, r5
   202d0:	f104 0020 	add.w	r0, r4, #32
   202d4:	f7ff ffa9 	bl	2022a <gf_double>
	tc_cmac_init(s);
   202d8:	4620      	mov	r0, r4
   202da:	f7ff ffc3 	bl	20264 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   202de:	2001      	movs	r0, #1
}
   202e0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   202e2:	4608      	mov	r0, r1
   202e4:	e7fc      	b.n	202e0 <tc_cmac_setup+0x50>

000202e6 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   202e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202ea:	460d      	mov	r5, r1
   202ec:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   202ee:	4604      	mov	r4, r0
   202f0:	2800      	cmp	r0, #0
   202f2:	d061      	beq.n	203b8 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   202f4:	b912      	cbnz	r2, 202fc <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   202f6:	2001      	movs	r0, #1
}
   202f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   202fc:	2900      	cmp	r1, #0
   202fe:	d05b      	beq.n	203b8 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   20300:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   20304:	ea53 0102 	orrs.w	r1, r3, r2
   20308:	d056      	beq.n	203b8 <tc_cmac_update+0xd2>
	s->countdown--;
   2030a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   2030c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   20310:	f142 32ff 	adc.w	r2, r2, #4294967295
   20314:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20318:	f1b8 0f00 	cmp.w	r8, #0
   2031c:	d02a      	beq.n	20374 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2031e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20322:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   20326:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   20328:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2032a:	d208      	bcs.n	2033e <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2032c:	462a      	mov	r2, r5
   2032e:	4633      	mov	r3, r6
   20330:	4631      	mov	r1, r6
   20332:	f7ff fe4e 	bl	1ffd2 <_copy>
			s->leftover_offset += data_length;
   20336:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20338:	4432      	add	r2, r6
   2033a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2033c:	e7db      	b.n	202f6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2033e:	463b      	mov	r3, r7
   20340:	462a      	mov	r2, r5
   20342:	4639      	mov	r1, r7
   20344:	f7ff fe45 	bl	1ffd2 <_copy>
		data_length -= remaining_space;
   20348:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2034a:	2300      	movs	r3, #0
   2034c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2034e:	4446      	add	r6, r8
		data += remaining_space;
   20350:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20352:	1e63      	subs	r3, r4, #1
   20354:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   20358:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2035c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20360:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   20362:	ea82 0200 	eor.w	r2, r2, r0
   20366:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20368:	d1f6      	bne.n	20358 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2036a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2036c:	4621      	mov	r1, r4
   2036e:	4620      	mov	r0, r4
   20370:	f7ff ff05 	bl	2017e <tc_aes_encrypt>
   20374:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   20378:	2e10      	cmp	r6, #16
   2037a:	d80a      	bhi.n	20392 <tc_cmac_update+0xac>
	if (data_length > 0) {
   2037c:	2e00      	cmp	r6, #0
   2037e:	d0ba      	beq.n	202f6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   20380:	4633      	mov	r3, r6
   20382:	462a      	mov	r2, r5
   20384:	4631      	mov	r1, r6
   20386:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2038a:	f7ff fe22 	bl	1ffd2 <_copy>
		s->leftover_offset = data_length;
   2038e:	6466      	str	r6, [r4, #68]	; 0x44
   20390:	e7b1      	b.n	202f6 <tc_cmac_update+0x10>
   20392:	1e63      	subs	r3, r4, #1
   20394:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   20396:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2039a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2039e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   203a0:	ea82 0200 	eor.w	r2, r2, r0
   203a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203a6:	d1f6      	bne.n	20396 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   203a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   203aa:	4621      	mov	r1, r4
   203ac:	4620      	mov	r0, r4
   203ae:	f7ff fee6 	bl	2017e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   203b2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   203b4:	3e10      	subs	r6, #16
   203b6:	e7df      	b.n	20378 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   203b8:	2000      	movs	r0, #0
   203ba:	e79d      	b.n	202f8 <tc_cmac_update+0x12>

000203bc <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   203bc:	b570      	push	{r4, r5, r6, lr}
   203be:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   203c0:	4605      	mov	r5, r0
   203c2:	b1e8      	cbz	r0, 20400 <tc_cmac_final+0x44>
   203c4:	b369      	cbz	r1, 20422 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   203c6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   203c8:	2a10      	cmp	r2, #16
   203ca:	d11a      	bne.n	20402 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   203cc:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203ce:	1e63      	subs	r3, r4, #1
   203d0:	3901      	subs	r1, #1
   203d2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   203d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   203da:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   203de:	4072      	eors	r2, r6
   203e0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203e4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   203e6:	ea82 0206 	eor.w	r2, r2, r6
   203ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   203ec:	d1f3      	bne.n	203d6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   203ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   203f0:	4621      	mov	r1, r4
   203f2:	4628      	mov	r0, r5
   203f4:	f7ff fec3 	bl	2017e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   203f8:	4620      	mov	r0, r4
   203fa:	f7ff ff2b 	bl	20254 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   203fe:	2001      	movs	r0, #1
}
   20400:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20402:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20406:	2100      	movs	r1, #0
   20408:	f1c2 0210 	rsb	r2, r2, #16
   2040c:	4420      	add	r0, r4
   2040e:	f7ff fded 	bl	1ffec <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20412:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20414:	4423      	add	r3, r4
   20416:	2280      	movs	r2, #128	; 0x80
   20418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2041c:	f104 0120 	add.w	r1, r4, #32
   20420:	e7d5      	b.n	203ce <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20422:	4608      	mov	r0, r1
   20424:	e7ec      	b.n	20400 <tc_cmac_final+0x44>

00020426 <abort_function>:
{
   20426:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   20428:	2000      	movs	r0, #0
   2042a:	f7f2 fdd7 	bl	12fdc <sys_reboot>

0002042e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   2042e:	f002 bbe9 	b.w	22c04 <z_fatal_error>

00020432 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   20432:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   20434:	6800      	ldr	r0, [r0, #0]
   20436:	f002 bbe5 	b.w	22c04 <z_fatal_error>

0002043a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2043a:	2100      	movs	r1, #0
   2043c:	2001      	movs	r0, #1
   2043e:	f7ff bff6 	b.w	2042e <z_arm_fatal_error>

00020442 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   20442:	b508      	push	{r3, lr}
	handler();
   20444:	f7f3 f8f0 	bl	13628 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   20448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2044c:	f7f3 b9c8 	b.w	137e0 <z_arm_exc_exit>

00020450 <malloc_prepare>:
}
   20450:	2000      	movs	r0, #0
   20452:	4770      	bx	lr

00020454 <_stdout_hook_default>:
}
   20454:	f04f 30ff 	mov.w	r0, #4294967295
   20458:	4770      	bx	lr

0002045a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2045a:	2806      	cmp	r0, #6
   2045c:	d108      	bne.n	20470 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2045e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20462:	2201      	movs	r2, #1
   20464:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   20468:	f3bf 8f4f 	dsb	sy
        __WFE();
   2046c:	bf20      	wfe
    while (true)
   2046e:	e7fd      	b.n	2046c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   20470:	4770      	bx	lr

00020472 <pm_state_exit_post_ops>:
   20472:	2300      	movs	r3, #0
   20474:	f383 8811 	msr	BASEPRI, r3
   20478:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2047c:	4770      	bx	lr

0002047e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2047e:	b510      	push	{r4, lr}
   20480:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   20482:	7801      	ldrb	r1, [r0, #0]
   20484:	7822      	ldrb	r2, [r4, #0]
   20486:	428a      	cmp	r2, r1
{
   20488:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2048a:	d00f      	beq.n	204ac <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2048c:	4669      	mov	r1, sp
   2048e:	f7f3 fc71 	bl	13d74 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   20492:	a905      	add	r1, sp, #20
   20494:	4620      	mov	r0, r4
   20496:	f7f3 fc6d 	bl	13d74 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2049a:	2210      	movs	r2, #16
   2049c:	f10d 0115 	add.w	r1, sp, #21
   204a0:	f10d 0001 	add.w	r0, sp, #1
   204a4:	f003 f96d 	bl	23782 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   204a8:	b00a      	add	sp, #40	; 0x28
   204aa:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   204ac:	2a01      	cmp	r2, #1
   204ae:	d006      	beq.n	204be <bt_uuid_cmp+0x40>
   204b0:	2a02      	cmp	r2, #2
   204b2:	d007      	beq.n	204c4 <bt_uuid_cmp+0x46>
   204b4:	b972      	cbnz	r2, 204d4 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   204b6:	8840      	ldrh	r0, [r0, #2]
   204b8:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   204ba:	1ac0      	subs	r0, r0, r3
   204bc:	e7f4      	b.n	204a8 <bt_uuid_cmp+0x2a>
   204be:	6840      	ldr	r0, [r0, #4]
   204c0:	6863      	ldr	r3, [r4, #4]
   204c2:	e7fa      	b.n	204ba <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   204c4:	2210      	movs	r2, #16
   204c6:	1c61      	adds	r1, r4, #1
   204c8:	3001      	adds	r0, #1
}
   204ca:	b00a      	add	sp, #40	; 0x28
   204cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   204d0:	f003 b957 	b.w	23782 <memcmp>
	switch (u1->type) {
   204d4:	f06f 0015 	mvn.w	r0, #21
   204d8:	e7e6      	b.n	204a8 <bt_uuid_cmp+0x2a>

000204da <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   204da:	2a04      	cmp	r2, #4
   204dc:	d00a      	beq.n	204f4 <bt_uuid_create+0x1a>
   204de:	2a10      	cmp	r2, #16
   204e0:	d00d      	beq.n	204fe <bt_uuid_create+0x24>
   204e2:	2a02      	cmp	r2, #2
   204e4:	f04f 0300 	mov.w	r3, #0
   204e8:	d115      	bne.n	20516 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   204ea:	7003      	strb	r3, [r0, #0]
   204ec:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   204ee:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   204f0:	2001      	movs	r0, #1
		break;
   204f2:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   204f4:	2301      	movs	r3, #1
   204f6:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   204f8:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   204fa:	6042      	str	r2, [r0, #4]
		break;
   204fc:	e7f8      	b.n	204f0 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   204fe:	2302      	movs	r3, #2
   20500:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20504:	f101 0310 	add.w	r3, r1, #16
   20508:	f851 2b04 	ldr.w	r2, [r1], #4
   2050c:	f840 2b04 	str.w	r2, [r0], #4
   20510:	4299      	cmp	r1, r3
   20512:	d1f9      	bne.n	20508 <bt_uuid_create+0x2e>
   20514:	e7ec      	b.n	204f0 <bt_uuid_create+0x16>
	switch (data_len) {
   20516:	4618      	mov	r0, r3
}
   20518:	4770      	bx	lr

0002051a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2051a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2051c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2051e:	2106      	movs	r1, #6
{
   20520:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   20522:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   20526:	f7f8 ff5b 	bl	193e0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2052a:	b918      	cbnz	r0, 20534 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2052c:	79a3      	ldrb	r3, [r4, #6]
   2052e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20532:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   20534:	bd10      	pop	{r4, pc}

00020536 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   20536:	280f      	cmp	r0, #15
   20538:	d806      	bhi.n	20548 <bt_hci_evt_get_flags+0x12>
   2053a:	280d      	cmp	r0, #13
   2053c:	d80b      	bhi.n	20556 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2053e:	2805      	cmp	r0, #5
   20540:	bf14      	ite	ne
   20542:	2002      	movne	r0, #2
   20544:	2003      	moveq	r0, #3
   20546:	4770      	bx	lr
	switch (evt) {
   20548:	2813      	cmp	r0, #19
   2054a:	d004      	beq.n	20556 <bt_hci_evt_get_flags+0x20>
   2054c:	281a      	cmp	r0, #26
   2054e:	bf14      	ite	ne
   20550:	2002      	movne	r0, #2
   20552:	2001      	moveq	r0, #1
   20554:	4770      	bx	lr
   20556:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   20558:	4770      	bx	lr

0002055a <handle_event>:
{
   2055a:	b410      	push	{r4}
   2055c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20560:	4604      	mov	r4, r0
   20562:	4608      	mov	r0, r1
		if (handler->event != event) {
   20564:	7811      	ldrb	r1, [r2, #0]
   20566:	42a1      	cmp	r1, r4
   20568:	d004      	beq.n	20574 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   2056a:	3208      	adds	r2, #8
   2056c:	429a      	cmp	r2, r3
   2056e:	d1f9      	bne.n	20564 <handle_event+0xa>
}
   20570:	bc10      	pop	{r4}
   20572:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   20574:	8981      	ldrh	r1, [r0, #12]
   20576:	7853      	ldrb	r3, [r2, #1]
   20578:	4299      	cmp	r1, r3
   2057a:	d3f9      	bcc.n	20570 <handle_event+0x16>
		handler->handler(buf);
   2057c:	6853      	ldr	r3, [r2, #4]
}
   2057e:	bc10      	pop	{r4}
		handler->handler(buf);
   20580:	4718      	bx	r3

00020582 <hci_data_buf_overflow>:
}
   20582:	4770      	bx	lr

00020584 <hci_disconn_complete>:
{
   20584:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   20586:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   20588:	782e      	ldrb	r6, [r5, #0]
   2058a:	b97e      	cbnz	r6, 205ac <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   2058c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   20590:	f7f5 f900 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   20594:	4604      	mov	r4, r0
   20596:	b148      	cbz	r0, 205ac <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   20598:	78eb      	ldrb	r3, [r5, #3]
   2059a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2059c:	4631      	mov	r1, r6
   2059e:	f7f5 f901 	bl	157a4 <bt_conn_set_state>
		bt_conn_unref(conn);
   205a2:	4620      	mov	r0, r4
}
   205a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   205a8:	f000 bc76 	b.w	20e98 <bt_conn_unref>
}
   205ac:	bd70      	pop	{r4, r5, r6, pc}

000205ae <le_phy_update_complete>:
{
   205ae:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   205b0:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   205b2:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   205b6:	f7f5 f8ed 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   205ba:	b118      	cbz	r0, 205c4 <le_phy_update_complete+0x16>
}
   205bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   205c0:	f000 bc6a 	b.w	20e98 <bt_conn_unref>
}
   205c4:	bd08      	pop	{r3, pc}

000205c6 <le_data_len_change>:
{
   205c6:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   205c8:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   205ca:	8818      	ldrh	r0, [r3, #0]
   205cc:	f7f5 f8e2 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   205d0:	b118      	cbz	r0, 205da <le_data_len_change+0x14>
}
   205d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   205d6:	f000 bc5f 	b.w	20e98 <bt_conn_unref>
}
   205da:	bd08      	pop	{r3, pc}

000205dc <atomic_or>:
{
   205dc:	4603      	mov	r3, r0
}
   205de:	f3bf 8f5b 	dmb	ish
   205e2:	e853 0f00 	ldrex	r0, [r3]
   205e6:	ea40 0201 	orr.w	r2, r0, r1
   205ea:	e843 2c00 	strex	ip, r2, [r3]
   205ee:	f1bc 0f00 	cmp.w	ip, #0
   205f2:	d1f6      	bne.n	205e2 <atomic_or+0x6>
   205f4:	f3bf 8f5b 	dmb	ish
   205f8:	4770      	bx	lr

000205fa <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   205fa:	2101      	movs	r1, #1
   205fc:	3008      	adds	r0, #8
   205fe:	f001 bf60 	b.w	224c2 <net_buf_simple_pull_mem>

00020602 <le_conn_update_complete>:
{
   20602:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   20604:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   20606:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   2060a:	f7f5 f8c3 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   2060e:	4604      	mov	r4, r0
   20610:	2800      	cmp	r0, #0
   20612:	d03c      	beq.n	2068e <le_conn_update_complete+0x8c>
	if (!evt->status) {
   20614:	782b      	ldrb	r3, [r5, #0]
   20616:	b9cb      	cbnz	r3, 2064c <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   20618:	792a      	ldrb	r2, [r5, #4]
   2061a:	78eb      	ldrb	r3, [r5, #3]
   2061c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20620:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   20624:	79aa      	ldrb	r2, [r5, #6]
   20626:	796b      	ldrb	r3, [r5, #5]
   20628:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2062c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   20630:	79eb      	ldrb	r3, [r5, #7]
   20632:	7a2a      	ldrb	r2, [r5, #8]
   20634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20638:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   2063c:	f7f5 f980 	bl	15940 <notify_le_param_updated>
	bt_conn_unref(conn);
   20640:	4620      	mov	r0, r4
}
   20642:	b003      	add	sp, #12
   20644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   20648:	f000 bc26 	b.w	20e98 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   2064c:	2b1a      	cmp	r3, #26
   2064e:	d1f7      	bne.n	20640 <le_conn_update_complete+0x3e>
   20650:	78c3      	ldrb	r3, [r0, #3]
   20652:	2b01      	cmp	r3, #1
   20654:	d1f4      	bne.n	20640 <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   20656:	f44f 7100 	mov.w	r1, #512	; 0x200
   2065a:	3004      	adds	r0, #4
   2065c:	f7ff ffbe 	bl	205dc <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   20660:	0583      	lsls	r3, r0, #22
   20662:	d4ed      	bmi.n	20640 <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   20664:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   20668:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   2066c:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   20670:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   20674:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   20678:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   2067c:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   2067e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   20682:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   20686:	4620      	mov	r0, r4
   20688:	f7f5 fc04 	bl	15e94 <bt_l2cap_update_conn_param>
   2068c:	e7d8      	b.n	20640 <le_conn_update_complete+0x3e>
}
   2068e:	b003      	add	sp, #12
   20690:	bd30      	pop	{r4, r5, pc}

00020692 <bt_addr_copy>:
   20692:	680b      	ldr	r3, [r1, #0]
   20694:	6003      	str	r3, [r0, #0]
   20696:	888b      	ldrh	r3, [r1, #4]
   20698:	8083      	strh	r3, [r0, #4]
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   2069a:	4770      	bx	lr

0002069c <bt_addr_le_copy>:
   2069c:	680b      	ldr	r3, [r1, #0]
   2069e:	6003      	str	r3, [r0, #0]
   206a0:	888b      	ldrh	r3, [r1, #4]
   206a2:	8083      	strh	r3, [r0, #4]
   206a4:	798b      	ldrb	r3, [r1, #6]
   206a6:	7183      	strb	r3, [r0, #6]
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   206a8:	4770      	bx	lr

000206aa <le_remote_feat_complete>:
{
   206aa:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   206ac:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   206ae:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   206b2:	f7f5 f86f 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   206b6:	4604      	mov	r4, r0
   206b8:	b198      	cbz	r0, 206e2 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   206ba:	782b      	ldrb	r3, [r5, #0]
   206bc:	b93b      	cbnz	r3, 206ce <le_remote_feat_complete+0x24>
   206be:	f8d5 3003 	ldr.w	r3, [r5, #3]
   206c2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   206c6:	f8d5 3007 	ldr.w	r3, [r5, #7]
   206ca:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   206ce:	1d20      	adds	r0, r4, #4
   206d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   206d4:	f7ff ff82 	bl	205dc <atomic_or>
	bt_conn_unref(conn);
   206d8:	4620      	mov	r0, r4
}
   206da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   206de:	f000 bbdb 	b.w	20e98 <bt_conn_unref>
}
   206e2:	bd38      	pop	{r3, r4, r5, pc}

000206e4 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   206e4:	f3bf 8f5b 	dmb	ish
   206e8:	e850 3f00 	ldrex	r3, [r0]
   206ec:	400b      	ands	r3, r1
   206ee:	e840 3200 	strex	r2, r3, [r0]
   206f2:	2a00      	cmp	r2, #0
   206f4:	d1f8      	bne.n	206e8 <atomic_and.isra.0+0x4>
   206f6:	f3bf 8f5b 	dmb	ish
}
   206fa:	4770      	bx	lr

000206fc <hci_vendor_event>:
   206fc:	4770      	bx	lr

000206fe <hci_num_completed_packets>:
{
   206fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   20702:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   20704:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   20706:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   20708:	783b      	ldrb	r3, [r7, #0]
   2070a:	429d      	cmp	r5, r3
   2070c:	db01      	blt.n	20712 <hci_num_completed_packets+0x14>
}
   2070e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   20712:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   20716:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   2071a:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   2071e:	f7f5 f839 	bl	15794 <bt_conn_lookup_handle>
		if (!conn) {
   20722:	4604      	mov	r4, r0
   20724:	b350      	cbz	r0, 2077c <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   20726:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   2072a:	b326      	cbz	r6, 20776 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   2072c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20730:	f3ef 8211 	mrs	r2, BASEPRI
   20734:	f383 8812 	msr	BASEPRI_MAX, r3
   20738:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   2073c:	69e3      	ldr	r3, [r4, #28]
   2073e:	b16b      	cbz	r3, 2075c <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   20740:	3b01      	subs	r3, #1
   20742:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   20744:	f382 8811 	msr	BASEPRI, r2
   20748:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2074c:	4620      	mov	r0, r4
   2074e:	f7f4 ff75 	bl	1563c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   20752:	3e01      	subs	r6, #1
   20754:	f7fa fbee 	bl	1af34 <z_impl_k_sem_give>
   20758:	b2b6      	uxth	r6, r6
   2075a:	e7e6      	b.n	2072a <hci_num_completed_packets+0x2c>
	return list->head;
   2075c:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2075e:	b12b      	cbz	r3, 2076c <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20760:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   20762:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   20764:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20766:	428b      	cmp	r3, r1
	list->tail = node;
   20768:	bf08      	it	eq
   2076a:	61a0      	streq	r0, [r4, #24]
   2076c:	f382 8811 	msr	BASEPRI, r2
   20770:	f3bf 8f6f 	isb	sy
			if (!node) {
   20774:	b923      	cbnz	r3, 20780 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   20776:	4620      	mov	r0, r4
   20778:	f000 fb8e 	bl	20e98 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   2077c:	3501      	adds	r5, #1
   2077e:	e7c3      	b.n	20708 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   20780:	f04f 0240 	mov.w	r2, #64	; 0x40
   20784:	f3ef 8111 	mrs	r1, BASEPRI
   20788:	f382 8812 	msr	BASEPRI_MAX, r2
   2078c:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   20790:	68da      	ldr	r2, [r3, #12]
   20792:	61e2      	str	r2, [r4, #28]
	return list->tail;
   20794:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   20796:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   2079a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   2079e:	b94a      	cbnz	r2, 207b4 <hci_num_completed_packets+0xb6>
	list->head = node;
   207a0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   207a4:	f381 8811 	msr	BASEPRI, r1
   207a8:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   207ac:	4648      	mov	r0, r9
   207ae:	f7fa fd2d 	bl	1b20c <k_work_submit>
   207b2:	e7cb      	b.n	2074c <hci_num_completed_packets+0x4e>
	parent->next = child;
   207b4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   207b6:	6263      	str	r3, [r4, #36]	; 0x24
}
   207b8:	e7f4      	b.n	207a4 <hci_num_completed_packets+0xa6>

000207ba <hci_le_read_max_data_len>:
{
   207ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   207bc:	4606      	mov	r6, r0
   207be:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   207c0:	aa01      	add	r2, sp, #4
   207c2:	2100      	movs	r1, #0
   207c4:	f242 002f 	movw	r0, #8239	; 0x202f
   207c8:	f7f3 fd14 	bl	141f4 <bt_hci_cmd_send_sync>
	if (err) {
   207cc:	4604      	mov	r4, r0
   207ce:	b948      	cbnz	r0, 207e4 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   207d0:	9801      	ldr	r0, [sp, #4]
   207d2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   207d4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   207d8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   207da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   207de:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   207e0:	f7f6 fe4c 	bl	1747c <net_buf_unref>
}
   207e4:	4620      	mov	r0, r4
   207e6:	b002      	add	sp, #8
   207e8:	bd70      	pop	{r4, r5, r6, pc}

000207ea <bt_hci_disconnect>:
{
   207ea:	b570      	push	{r4, r5, r6, lr}
   207ec:	4606      	mov	r6, r0
   207ee:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   207f0:	f240 4006 	movw	r0, #1030	; 0x406
   207f4:	2103      	movs	r1, #3
   207f6:	f7f3 fcc3 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   207fa:	4604      	mov	r4, r0
   207fc:	b168      	cbz	r0, 2081a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   207fe:	2103      	movs	r1, #3
   20800:	3008      	adds	r0, #8
   20802:	f001 fe37 	bl	22474 <net_buf_simple_add>
	disconn->reason = reason;
   20806:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   20808:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2080a:	4621      	mov	r1, r4
   2080c:	2200      	movs	r2, #0
}
   2080e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   20812:	f240 4006 	movw	r0, #1030	; 0x406
   20816:	f7f3 bced 	b.w	141f4 <bt_hci_cmd_send_sync>
}
   2081a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2081e:	bd70      	pop	{r4, r5, r6, pc}

00020820 <bt_le_set_data_len>:
{
   20820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20822:	4607      	mov	r7, r0
   20824:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   20826:	f242 0022 	movw	r0, #8226	; 0x2022
   2082a:	2106      	movs	r1, #6
{
   2082c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2082e:	f7f3 fca7 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   20832:	4604      	mov	r4, r0
   20834:	b178      	cbz	r0, 20856 <bt_le_set_data_len+0x36>
   20836:	2106      	movs	r1, #6
   20838:	3008      	adds	r0, #8
   2083a:	f001 fe1b 	bl	22474 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2083e:	883b      	ldrh	r3, [r7, #0]
   20840:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   20842:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   20844:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   20846:	4621      	mov	r1, r4
   20848:	2200      	movs	r2, #0
}
   2084a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2084e:	f242 0022 	movw	r0, #8226	; 0x2022
   20852:	f7f3 bccf 	b.w	141f4 <bt_hci_cmd_send_sync>
}
   20856:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2085a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002085c <bt_le_set_phy>:
{
   2085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20860:	4680      	mov	r8, r0
   20862:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20864:	f242 0032 	movw	r0, #8242	; 0x2032
   20868:	2107      	movs	r1, #7
{
   2086a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2086e:	4616      	mov	r6, r2
   20870:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   20872:	f7f3 fc85 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   20876:	4604      	mov	r4, r0
   20878:	b198      	cbz	r0, 208a2 <bt_le_set_phy+0x46>
   2087a:	2107      	movs	r1, #7
   2087c:	3008      	adds	r0, #8
   2087e:	f001 fdf9 	bl	22474 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   20882:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   20886:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   20888:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2088a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2088c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2088e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   20892:	4621      	mov	r1, r4
   20894:	2200      	movs	r2, #0
}
   20896:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2089a:	f242 0032 	movw	r0, #8242	; 0x2032
   2089e:	f7f3 bca9 	b.w	141f4 <bt_hci_cmd_send_sync>
}
   208a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   208a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000208aa <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   208aa:	6880      	ldr	r0, [r0, #8]
   208ac:	f7f3 bd04 	b.w	142b8 <bt_hci_le_enh_conn_complete>

000208b0 <le_legacy_conn_complete>:
{
   208b0:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   208b2:	6881      	ldr	r1, [r0, #8]
{
   208b4:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   208b6:	780b      	ldrb	r3, [r1, #0]
   208b8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   208bc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   208c0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   208c4:	78cb      	ldrb	r3, [r1, #3]
   208c6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   208ca:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   208ce:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   208d2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   208d6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   208da:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   208de:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   208e2:	7c4b      	ldrb	r3, [r1, #17]
   208e4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   208e8:	a803      	add	r0, sp, #12
   208ea:	3104      	adds	r1, #4
   208ec:	f7ff fed6 	bl	2069c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   208f0:	4669      	mov	r1, sp
   208f2:	2200      	movs	r2, #0
   208f4:	f10d 0013 	add.w	r0, sp, #19
   208f8:	9200      	str	r2, [sp, #0]
   208fa:	f8ad 2004 	strh.w	r2, [sp, #4]
   208fe:	f7ff fec8 	bl	20692 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   20902:	9200      	str	r2, [sp, #0]
   20904:	f10d 0019 	add.w	r0, sp, #25
   20908:	808a      	strh	r2, [r1, #4]
   2090a:	f7ff fec2 	bl	20692 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   2090e:	a802      	add	r0, sp, #8
   20910:	f7f3 fcd2 	bl	142b8 <bt_hci_le_enh_conn_complete>
}
   20914:	b00b      	add	sp, #44	; 0x2c
   20916:	f85d fb04 	ldr.w	pc, [sp], #4

0002091a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2091a:	8803      	ldrh	r3, [r0, #0]
   2091c:	8842      	ldrh	r2, [r0, #2]
   2091e:	4293      	cmp	r3, r2
{
   20920:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   20922:	d819      	bhi.n	20958 <bt_le_conn_params_valid+0x3e>
   20924:	2b05      	cmp	r3, #5
   20926:	d917      	bls.n	20958 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   20928:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2092c:	d814      	bhi.n	20958 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2092e:	8883      	ldrh	r3, [r0, #4]
   20930:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   20934:	d210      	bcs.n	20958 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   20936:	88c0      	ldrh	r0, [r0, #6]
   20938:	f1a0 010a 	sub.w	r1, r0, #10
   2093c:	b289      	uxth	r1, r1
   2093e:	f640 4476 	movw	r4, #3190	; 0xc76
   20942:	42a1      	cmp	r1, r4
   20944:	d808      	bhi.n	20958 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   20946:	3301      	adds	r3, #1
   20948:	b29b      	uxth	r3, r3
   2094a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2094c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   20950:	bf34      	ite	cc
   20952:	2001      	movcc	r0, #1
   20954:	2000      	movcs	r0, #0
}
   20956:	bd10      	pop	{r4, pc}
		return false;
   20958:	2000      	movs	r0, #0
   2095a:	e7fc      	b.n	20956 <bt_le_conn_params_valid+0x3c>

0002095c <le_conn_param_neg_reply>:
{
   2095c:	b570      	push	{r4, r5, r6, lr}
   2095e:	4606      	mov	r6, r0
   20960:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   20962:	f242 0021 	movw	r0, #8225	; 0x2021
   20966:	2103      	movs	r1, #3
   20968:	f7f3 fc0a 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   2096c:	4604      	mov	r4, r0
   2096e:	b160      	cbz	r0, 2098a <le_conn_param_neg_reply+0x2e>
   20970:	2103      	movs	r1, #3
   20972:	3008      	adds	r0, #8
   20974:	f001 fd7e 	bl	22474 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   20978:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   2097a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2097c:	4621      	mov	r1, r4
   2097e:	f242 0021 	movw	r0, #8225	; 0x2021
}
   20982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   20986:	f7f3 bda7 	b.w	144d8 <bt_hci_cmd_send>
}
   2098a:	bd70      	pop	{r4, r5, r6, pc}

0002098c <le_conn_param_req>:
{
   2098c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2098e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20990:	78d9      	ldrb	r1, [r3, #3]
   20992:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   20994:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   20996:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2099a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   2099e:	7959      	ldrb	r1, [r3, #5]
   209a0:	791a      	ldrb	r2, [r3, #4]
   209a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   209a6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   209aa:	799a      	ldrb	r2, [r3, #6]
   209ac:	79d9      	ldrb	r1, [r3, #7]
   209ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   209b2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   209b6:	7a1a      	ldrb	r2, [r3, #8]
   209b8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   209ba:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   209bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   209c0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   209c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   209c6:	f7f4 fee5 	bl	15794 <bt_conn_lookup_handle>
	if (!conn) {
   209ca:	4606      	mov	r6, r0
   209cc:	b928      	cbnz	r0, 209da <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   209ce:	2102      	movs	r1, #2
   209d0:	4620      	mov	r0, r4
   209d2:	f7ff ffc3 	bl	2095c <le_conn_param_neg_reply>
}
   209d6:	b003      	add	sp, #12
   209d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   209da:	4669      	mov	r1, sp
   209dc:	f7f4 fffc 	bl	159d8 <le_param_req>
   209e0:	b938      	cbnz	r0, 209f2 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   209e2:	211e      	movs	r1, #30
   209e4:	4620      	mov	r0, r4
   209e6:	f7ff ffb9 	bl	2095c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   209ea:	4630      	mov	r0, r6
   209ec:	f000 fa54 	bl	20e98 <bt_conn_unref>
   209f0:	e7f1      	b.n	209d6 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   209f2:	210e      	movs	r1, #14
   209f4:	f242 0020 	movw	r0, #8224	; 0x2020
   209f8:	f7f3 fbc2 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   209fc:	4605      	mov	r5, r0
   209fe:	2800      	cmp	r0, #0
   20a00:	d0f3      	beq.n	209ea <le_conn_param_req+0x5e>
   20a02:	210e      	movs	r1, #14
   20a04:	3008      	adds	r0, #8
   20a06:	f001 fd35 	bl	22474 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   20a0a:	220e      	movs	r2, #14
   20a0c:	4604      	mov	r4, r0
   20a0e:	2100      	movs	r1, #0
   20a10:	f002 fee8 	bl	237e4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   20a14:	f8bd 3000 	ldrh.w	r3, [sp]
   20a18:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   20a1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20a1e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   20a20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20a24:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20a26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   20a2a:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   20a2c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   20a2e:	4629      	mov	r1, r5
   20a30:	f242 0020 	movw	r0, #8224	; 0x2020
   20a34:	f7f3 fd50 	bl	144d8 <bt_hci_cmd_send>
   20a38:	e7d7      	b.n	209ea <le_conn_param_req+0x5e>

00020a3a <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   20a3a:	2000      	movs	r0, #0
   20a3c:	4770      	bx	lr

00020a3e <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   20a3e:	2000      	movs	r0, #0
   20a40:	4770      	bx	lr

00020a42 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20a42:	680b      	ldr	r3, [r1, #0]
   20a44:	6003      	str	r3, [r0, #0]
   20a46:	888b      	ldrh	r3, [r1, #4]
   20a48:	8083      	strh	r3, [r0, #4]
}
   20a4a:	4770      	bx	lr

00020a4c <bt_addr_le_copy>:
   20a4c:	680b      	ldr	r3, [r1, #0]
   20a4e:	6003      	str	r3, [r0, #0]
   20a50:	888b      	ldrh	r3, [r1, #4]
   20a52:	8083      	strh	r3, [r0, #4]
   20a54:	798b      	ldrb	r3, [r1, #6]
   20a56:	7183      	strb	r3, [r0, #6]
}
   20a58:	4770      	bx	lr

00020a5a <bt_lookup_id_addr>:
}
   20a5a:	4608      	mov	r0, r1
   20a5c:	4770      	bx	lr

00020a5e <bt_id_set_adv_private_addr>:
{
   20a5e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   20a60:	2106      	movs	r1, #6
   20a62:	4668      	mov	r0, sp
   20a64:	f7f8 fcbc 	bl	193e0 <bt_rand>
	if (err) {
   20a68:	b940      	cbnz	r0, 20a7c <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   20a6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   20a6e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   20a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   20a74:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   20a78:	f7f4 f90a 	bl	14c90 <set_random_address>
}
   20a7c:	b003      	add	sp, #12
   20a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00020a82 <bt_id_adv_random_addr_check>:
}
   20a82:	2001      	movs	r0, #1
   20a84:	4770      	bx	lr

00020a86 <get_adv_channel_map>:
{
   20a86:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   20a88:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   20a8c:	bf0c      	ite	eq
   20a8e:	2007      	moveq	r0, #7
   20a90:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   20a92:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   20a94:	bf48      	it	mi
   20a96:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   20a9a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   20a9c:	bf48      	it	mi
   20a9e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   20aa2:	4770      	bx	lr

00020aa4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20aa4:	f3bf 8f5b 	dmb	ish
   20aa8:	6800      	ldr	r0, [r0, #0]
   20aaa:	f3bf 8f5b 	dmb	ish
}
   20aae:	4770      	bx	lr

00020ab0 <atomic_and>:
{
   20ab0:	4603      	mov	r3, r0
}
   20ab2:	f3bf 8f5b 	dmb	ish
   20ab6:	e853 0f00 	ldrex	r0, [r3]
   20aba:	ea00 0201 	and.w	r2, r0, r1
   20abe:	e843 2c00 	strex	ip, r2, [r3]
   20ac2:	f1bc 0f00 	cmp.w	ip, #0
   20ac6:	d1f6      	bne.n	20ab6 <atomic_and+0x6>
   20ac8:	f3bf 8f5b 	dmb	ish
   20acc:	4770      	bx	lr

00020ace <bt_addr_le_copy>:
   20ace:	680b      	ldr	r3, [r1, #0]
   20ad0:	6003      	str	r3, [r0, #0]
   20ad2:	888b      	ldrh	r3, [r1, #4]
   20ad4:	8083      	strh	r3, [r0, #4]
   20ad6:	798b      	ldrb	r3, [r1, #6]
   20ad8:	7183      	strb	r3, [r0, #6]
   20ada:	4770      	bx	lr

00020adc <hci_set_ad>:
{
   20adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ae0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20ae2:	2120      	movs	r1, #32
{
   20ae4:	4682      	mov	sl, r0
   20ae6:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   20ae8:	f7f3 fb4a 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   20aec:	4605      	mov	r5, r0
   20aee:	2800      	cmp	r0, #0
   20af0:	d04a      	beq.n	20b88 <hci_set_ad+0xac>
   20af2:	2120      	movs	r1, #32
   20af4:	3008      	adds	r0, #8
   20af6:	f001 fcbd 	bl	22474 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   20afa:	2220      	movs	r2, #32
   20afc:	2100      	movs	r1, #0
   20afe:	4681      	mov	r9, r0
   20b00:	f002 fe70 	bl	237e4 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   20b04:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   20b08:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   20b0c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   20b0e:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   20b10:	f8d4 8000 	ldr.w	r8, [r4]
   20b14:	2300      	movs	r3, #0
   20b16:	6862      	ldr	r2, [r4, #4]
   20b18:	4293      	cmp	r3, r2
   20b1a:	d30d      	bcc.n	20b38 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   20b1c:	9b00      	ldr	r3, [sp, #0]
   20b1e:	3408      	adds	r4, #8
   20b20:	42a3      	cmp	r3, r4
   20b22:	d1f5      	bne.n	20b10 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20b24:	2200      	movs	r2, #0
   20b26:	4629      	mov	r1, r5
   20b28:	4650      	mov	r0, sl
	*data_len = set_data_len;
   20b2a:	f889 6000 	strb.w	r6, [r9]
}
   20b2e:	b003      	add	sp, #12
   20b30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   20b34:	f7f3 bb5e 	b.w	141f4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   20b38:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   20b3c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   20b40:	1cb0      	adds	r0, r6, #2
   20b42:	1881      	adds	r1, r0, r2
   20b44:	291f      	cmp	r1, #31
   20b46:	d908      	bls.n	20b5a <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20b48:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   20b4c:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   20b50:	d11f      	bne.n	20b92 <hci_set_ad+0xb6>
   20b52:	2a00      	cmp	r2, #0
   20b54:	dd1d      	ble.n	20b92 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   20b56:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   20b5a:	b2d7      	uxtb	r7, r2
   20b5c:	1c79      	adds	r1, r7, #1
   20b5e:	f80b 1006 	strb.w	r1, [fp, r6]
   20b62:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   20b64:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20b66:	fa5b f080 	uxtab	r0, fp, r0
   20b6a:	f80b c001 	strb.w	ip, [fp, r1]
   20b6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20b72:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   20b74:	3702      	adds	r7, #2
   20b76:	f002 fe14 	bl	237a2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   20b7a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   20b7c:	443e      	add	r6, r7
   20b7e:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   20b80:	3301      	adds	r3, #1
   20b82:	f108 0808 	add.w	r8, r8, #8
   20b86:	e7c6      	b.n	20b16 <hci_set_ad+0x3a>
		return -ENOBUFS;
   20b88:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   20b8c:	b003      	add	sp, #12
   20b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   20b92:	4628      	mov	r0, r5
   20b94:	f7f6 fc72 	bl	1747c <net_buf_unref>
		return err;
   20b98:	f06f 0015 	mvn.w	r0, #21
   20b9c:	e7f6      	b.n	20b8c <hci_set_ad+0xb0>

00020b9e <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20b9e:	2301      	movs	r3, #1
{
   20ba0:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   20ba2:	fa03 f101 	lsl.w	r1, r3, r1
{
   20ba6:	4604      	mov	r4, r0
	if (val) {
   20ba8:	b162      	cbz	r2, 20bc4 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20baa:	f3bf 8f5b 	dmb	ish
   20bae:	e854 3f00 	ldrex	r3, [r4]
   20bb2:	430b      	orrs	r3, r1
   20bb4:	e844 3200 	strex	r2, r3, [r4]
   20bb8:	2a00      	cmp	r2, #0
   20bba:	d1f8      	bne.n	20bae <atomic_set_bit_to+0x10>
   20bbc:	f3bf 8f5b 	dmb	ish
	}
}
   20bc0:	bc10      	pop	{r4}
   20bc2:	4770      	bx	lr
   20bc4:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20bc6:	43c9      	mvns	r1, r1
   20bc8:	f7ff bf72 	b.w	20ab0 <atomic_and>

00020bcc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   20bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bd0:	b087      	sub	sp, #28
   20bd2:	4605      	mov	r5, r0
   20bd4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   20bd8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   20bdc:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   20be0:	460c      	mov	r4, r1
   20be2:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   20be4:	2100      	movs	r1, #0
   20be6:	2210      	movs	r2, #16
   20be8:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   20bea:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   20bec:	f002 fdfa 	bl	237e4 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   20bf0:	b186      	cbz	r6, 20c14 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   20bf2:	f7f4 f82f 	bl	14c54 <bt_get_name>
   20bf6:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   20bf8:	2c00      	cmp	r4, #0
   20bfa:	d139      	bne.n	20c70 <le_adv_update.constprop.0+0xa4>
   20bfc:	2f00      	cmp	r7, #0
   20bfe:	d142      	bne.n	20c86 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   20c00:	4658      	mov	r0, fp
   20c02:	f7eb ff18 	bl	ca36 <strlen>
   20c06:	2309      	movs	r3, #9
   20c08:	f88d 3000 	strb.w	r3, [sp]
   20c0c:	f88d 0001 	strb.w	r0, [sp, #1]
   20c10:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   20c14:	2e01      	cmp	r6, #1
			d_len = 2;
   20c16:	bf0c      	ite	eq
   20c18:	2202      	moveq	r2, #2
		d_len = 1;
   20c1a:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20c1c:	a902      	add	r1, sp, #8
   20c1e:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   20c22:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   20c26:	bf04      	itt	eq
   20c28:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   20c2c:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   20c2e:	f7ff ff55 	bl	20adc <hci_set_ad>
		if (err) {
   20c32:	4604      	mov	r4, r0
   20c34:	b978      	cbnz	r0, 20c56 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   20c36:	f1ba 0f00 	cmp.w	sl, #0
   20c3a:	d126      	bne.n	20c8a <le_adv_update.constprop.0+0xbe>
   20c3c:	3510      	adds	r5, #16
   20c3e:	f3bf 8f5b 	dmb	ish
   20c42:	e855 3f00 	ldrex	r3, [r5]
   20c46:	f043 0304 	orr.w	r3, r3, #4
   20c4a:	e845 3200 	strex	r2, r3, [r5]
   20c4e:	2a00      	cmp	r2, #0
   20c50:	d1f7      	bne.n	20c42 <le_adv_update.constprop.0+0x76>
   20c52:	f3bf 8f5b 	dmb	ish
}
   20c56:	4620      	mov	r0, r4
   20c58:	b007      	add	sp, #28
   20c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20c5e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   20c62:	3a08      	subs	r2, #8
   20c64:	2a01      	cmp	r2, #1
   20c66:	d925      	bls.n	20cb4 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20c68:	3301      	adds	r3, #1
   20c6a:	4598      	cmp	r8, r3
   20c6c:	d1f7      	bne.n	20c5e <le_adv_update.constprop.0+0x92>
   20c6e:	e7c5      	b.n	20bfc <le_adv_update.constprop.0+0x30>
   20c70:	2300      	movs	r3, #0
   20c72:	e7fa      	b.n	20c6a <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   20c74:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   20c78:	3a08      	subs	r2, #8
   20c7a:	2a01      	cmp	r2, #1
   20c7c:	d91a      	bls.n	20cb4 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   20c7e:	3301      	adds	r3, #1
   20c80:	4599      	cmp	r9, r3
   20c82:	d1f7      	bne.n	20c74 <le_adv_update.constprop.0+0xa8>
   20c84:	e7bc      	b.n	20c00 <le_adv_update.constprop.0+0x34>
   20c86:	2300      	movs	r3, #0
   20c88:	e7fa      	b.n	20c80 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   20c8a:	2e02      	cmp	r6, #2
   20c8c:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   20c90:	bf08      	it	eq
   20c92:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20c94:	a902      	add	r1, sp, #8
			d_len = 2;
   20c96:	bf08      	it	eq
   20c98:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20c9a:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   20c9e:	bf08      	it	eq
   20ca0:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   20ca4:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   20ca8:	f7ff ff18 	bl	20adc <hci_set_ad>
		if (err) {
   20cac:	2800      	cmp	r0, #0
   20cae:	d0c5      	beq.n	20c3c <le_adv_update.constprop.0+0x70>
   20cb0:	4604      	mov	r4, r0
   20cb2:	e7d0      	b.n	20c56 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   20cb4:	f06f 0415 	mvn.w	r4, #21
   20cb8:	e7cd      	b.n	20c56 <le_adv_update.constprop.0+0x8a>

00020cba <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   20cba:	6843      	ldr	r3, [r0, #4]
   20cbc:	f013 0008 	ands.w	r0, r3, #8
   20cc0:	d00a      	beq.n	20cd8 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   20cc2:	035a      	lsls	r2, r3, #13
   20cc4:	d407      	bmi.n	20cd6 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   20cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   20cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20cce:	bf0c      	ite	eq
   20cd0:	2001      	moveq	r0, #1
   20cd2:	2002      	movne	r0, #2
   20cd4:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   20cd6:	2001      	movs	r0, #1
}
   20cd8:	4770      	bx	lr

00020cda <bt_le_adv_set_enable_legacy>:
{
   20cda:	b570      	push	{r4, r5, r6, lr}
   20cdc:	4606      	mov	r6, r0
   20cde:	b086      	sub	sp, #24
   20ce0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   20ce2:	f242 000a 	movw	r0, #8202	; 0x200a
   20ce6:	2101      	movs	r1, #1
   20ce8:	f7f3 fa4a 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   20cec:	4604      	mov	r4, r0
   20cee:	b1b0      	cbz	r0, 20d1e <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   20cf0:	3008      	adds	r0, #8
	if (enable) {
   20cf2:	b195      	cbz	r5, 20d1a <bt_le_adv_set_enable_legacy+0x40>
   20cf4:	2101      	movs	r1, #1
   20cf6:	f001 fbcc 	bl	22492 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   20cfa:	f106 0210 	add.w	r2, r6, #16
   20cfe:	a903      	add	r1, sp, #12
   20d00:	4620      	mov	r0, r4
   20d02:	9500      	str	r5, [sp, #0]
   20d04:	2306      	movs	r3, #6
   20d06:	f7f3 fa29 	bl	1415c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   20d0a:	2200      	movs	r2, #0
   20d0c:	4621      	mov	r1, r4
   20d0e:	f242 000a 	movw	r0, #8202	; 0x200a
   20d12:	f7f3 fa6f 	bl	141f4 <bt_hci_cmd_send_sync>
}
   20d16:	b006      	add	sp, #24
   20d18:	bd70      	pop	{r4, r5, r6, pc}
   20d1a:	4629      	mov	r1, r5
   20d1c:	e7eb      	b.n	20cf6 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   20d1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20d22:	e7f8      	b.n	20d16 <bt_le_adv_set_enable_legacy+0x3c>

00020d24 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   20d24:	3018      	adds	r0, #24
   20d26:	f002 b9ed 	b.w	23104 <k_work_cancel_delayable>

00020d2a <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   20d2a:	f7f4 bb47 	b.w	153bc <bt_le_adv_stop>

00020d2e <tx_notify>:
{
   20d2e:	b570      	push	{r4, r5, r6, lr}
   20d30:	4604      	mov	r4, r0
	__asm__ volatile(
   20d32:	f04f 0240 	mov.w	r2, #64	; 0x40
   20d36:	f3ef 8311 	mrs	r3, BASEPRI
   20d3a:	f382 8812 	msr	BASEPRI_MAX, r2
   20d3e:	f3bf 8f6f 	isb	sy
	return list->head;
   20d42:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   20d44:	b920      	cbnz	r0, 20d50 <tx_notify+0x22>
	__asm__ volatile(
   20d46:	f383 8811 	msr	BASEPRI, r3
   20d4a:	f3bf 8f6f 	isb	sy
}
   20d4e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d50:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   20d52:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   20d54:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20d56:	4288      	cmp	r0, r1
	list->tail = node;
   20d58:	bf08      	it	eq
   20d5a:	6262      	streq	r2, [r4, #36]	; 0x24
   20d5c:	f383 8811 	msr	BASEPRI, r3
   20d60:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   20d64:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   20d68:	f7f4 fbd6 	bl	15518 <tx_free>
		cb(conn, user_data);
   20d6c:	4631      	mov	r1, r6
   20d6e:	4620      	mov	r0, r4
   20d70:	47a8      	blx	r5
	while (1) {
   20d72:	e7de      	b.n	20d32 <tx_notify+0x4>

00020d74 <tx_complete_work>:
	tx_notify(conn);
   20d74:	3828      	subs	r0, #40	; 0x28
   20d76:	f7ff bfda 	b.w	20d2e <tx_notify>

00020d7a <bt_conn_reset_rx_state>:
{
   20d7a:	b510      	push	{r4, lr}
   20d7c:	4604      	mov	r4, r0
	if (!conn->rx) {
   20d7e:	6900      	ldr	r0, [r0, #16]
   20d80:	b118      	cbz	r0, 20d8a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   20d82:	f7f6 fb7b 	bl	1747c <net_buf_unref>
	conn->rx = NULL;
   20d86:	2300      	movs	r3, #0
   20d88:	6123      	str	r3, [r4, #16]
}
   20d8a:	bd10      	pop	{r4, pc}

00020d8c <conn_cleanup>:
{
   20d8c:	b570      	push	{r4, r5, r6, lr}
   20d8e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   20d90:	f100 0638 	add.w	r6, r0, #56	; 0x38
   20d94:	2200      	movs	r2, #0
   20d96:	2300      	movs	r3, #0
   20d98:	4630      	mov	r0, r6
   20d9a:	f001 fad1 	bl	22340 <net_buf_get>
   20d9e:	4605      	mov	r5, r0
   20da0:	b950      	cbnz	r0, 20db8 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   20da2:	4620      	mov	r0, r4
   20da4:	f7ff ffe9 	bl	20d7a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20da8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   20dac:	2200      	movs	r2, #0
}
   20dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20db2:	2300      	movs	r3, #0
   20db4:	f7fa bac6 	b.w	1b344 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   20db8:	6968      	ldr	r0, [r5, #20]
   20dba:	b108      	cbz	r0, 20dc0 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   20dbc:	f7f4 fbac 	bl	15518 <tx_free>
		net_buf_unref(buf);
   20dc0:	4628      	mov	r0, r5
   20dc2:	f7f6 fb5b 	bl	1747c <net_buf_unref>
   20dc6:	e7e5      	b.n	20d94 <conn_cleanup+0x8>

00020dc8 <bt_conn_recv>:
{
   20dc8:	b570      	push	{r4, r5, r6, lr}
   20dca:	4616      	mov	r6, r2
   20dcc:	4604      	mov	r4, r0
   20dce:	460d      	mov	r5, r1
	tx_notify(conn);
   20dd0:	f7ff ffad 	bl	20d2e <tx_notify>
	switch (flags) {
   20dd4:	2e01      	cmp	r6, #1
   20dd6:	d017      	beq.n	20e08 <bt_conn_recv+0x40>
   20dd8:	2e02      	cmp	r6, #2
   20dda:	d117      	bne.n	20e0c <bt_conn_recv+0x44>
		if (conn->rx) {
   20ddc:	6923      	ldr	r3, [r4, #16]
   20dde:	b113      	cbz	r3, 20de6 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   20de0:	4620      	mov	r0, r4
   20de2:	f7ff ffca 	bl	20d7a <bt_conn_reset_rx_state>
		conn->rx = buf;
   20de6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   20de8:	6921      	ldr	r1, [r4, #16]
   20dea:	898a      	ldrh	r2, [r1, #12]
   20dec:	2a01      	cmp	r2, #1
   20dee:	d937      	bls.n	20e60 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   20df0:	688b      	ldr	r3, [r1, #8]
   20df2:	881b      	ldrh	r3, [r3, #0]
   20df4:	3304      	adds	r3, #4
   20df6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   20df8:	429a      	cmp	r2, r3
   20dfa:	d331      	bcc.n	20e60 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   20dfc:	d928      	bls.n	20e50 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   20dfe:	4620      	mov	r0, r4
}
   20e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   20e04:	f7ff bfb9 	b.w	20d7a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   20e08:	6920      	ldr	r0, [r4, #16]
   20e0a:	b918      	cbnz	r0, 20e14 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   20e0c:	4620      	mov	r0, r4
   20e0e:	f7ff ffb4 	bl	20d7a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   20e12:	e001      	b.n	20e18 <bt_conn_recv+0x50>
		if (!buf->len) {
   20e14:	89ae      	ldrh	r6, [r5, #12]
   20e16:	b926      	cbnz	r6, 20e22 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   20e18:	4628      	mov	r0, r5
}
   20e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   20e1e:	f7f6 bb2d 	b.w	1747c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   20e22:	3008      	adds	r0, #8
   20e24:	f001 fb61 	bl	224ea <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   20e28:	4286      	cmp	r6, r0
   20e2a:	d907      	bls.n	20e3c <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   20e2c:	6921      	ldr	r1, [r4, #16]
   20e2e:	2200      	movs	r2, #0
   20e30:	4620      	mov	r0, r4
   20e32:	f000 f9a8 	bl	21186 <bt_l2cap_recv>
			conn->rx = NULL;
   20e36:	2300      	movs	r3, #0
   20e38:	6123      	str	r3, [r4, #16]
   20e3a:	e7ed      	b.n	20e18 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20e3c:	6920      	ldr	r0, [r4, #16]
   20e3e:	89aa      	ldrh	r2, [r5, #12]
   20e40:	68a9      	ldr	r1, [r5, #8]
   20e42:	3008      	adds	r0, #8
   20e44:	f001 fb1c 	bl	22480 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   20e48:	4628      	mov	r0, r5
   20e4a:	f7f6 fb17 	bl	1747c <net_buf_unref>
		break;
   20e4e:	e7cb      	b.n	20de8 <bt_conn_recv+0x20>
	conn->rx = NULL;
   20e50:	2300      	movs	r3, #0
   20e52:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   20e54:	4620      	mov	r0, r4
   20e56:	2201      	movs	r2, #1
}
   20e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   20e5c:	f000 b993 	b.w	21186 <bt_l2cap_recv>
}
   20e60:	bd70      	pop	{r4, r5, r6, pc}

00020e62 <bt_conn_ref>:
{
   20e62:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   20e64:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20e68:	f3bf 8f5b 	dmb	ish
   20e6c:	6813      	ldr	r3, [r2, #0]
   20e6e:	f3bf 8f5b 	dmb	ish
		if (!old) {
   20e72:	b17b      	cbz	r3, 20e94 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20e74:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20e78:	1c59      	adds	r1, r3, #1
   20e7a:	e852 4f00 	ldrex	r4, [r2]
   20e7e:	429c      	cmp	r4, r3
   20e80:	d104      	bne.n	20e8c <bt_conn_ref+0x2a>
   20e82:	e842 1c00 	strex	ip, r1, [r2]
   20e86:	f1bc 0f00 	cmp.w	ip, #0
   20e8a:	d1f6      	bne.n	20e7a <bt_conn_ref+0x18>
   20e8c:	f3bf 8f5b 	dmb	ish
   20e90:	d1ea      	bne.n	20e68 <bt_conn_ref+0x6>
}
   20e92:	bd10      	pop	{r4, pc}
			return NULL;
   20e94:	4618      	mov	r0, r3
   20e96:	e7fc      	b.n	20e92 <bt_conn_ref+0x30>

00020e98 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   20e98:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20e9c:	f3bf 8f5b 	dmb	ish
   20ea0:	e853 2f00 	ldrex	r2, [r3]
   20ea4:	3a01      	subs	r2, #1
   20ea6:	e843 2100 	strex	r1, r2, [r3]
   20eaa:	2900      	cmp	r1, #0
   20eac:	d1f8      	bne.n	20ea0 <bt_conn_unref+0x8>
   20eae:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   20eb2:	7883      	ldrb	r3, [r0, #2]
   20eb4:	2b01      	cmp	r3, #1
   20eb6:	d108      	bne.n	20eca <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20eb8:	f3bf 8f5b 	dmb	ish
   20ebc:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   20ec0:	f3bf 8f5b 	dmb	ish
   20ec4:	b90b      	cbnz	r3, 20eca <bt_conn_unref+0x32>
		bt_le_adv_resume();
   20ec6:	f7f4 bac9 	b.w	1545c <bt_le_adv_resume>
}
   20eca:	4770      	bx	lr

00020ecc <conn_lookup_handle>:
{
   20ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ed0:	4607      	mov	r7, r0
   20ed2:	460e      	mov	r6, r1
   20ed4:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   20ed6:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20ed8:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   20edc:	42b4      	cmp	r4, r6
   20ede:	d103      	bne.n	20ee8 <conn_lookup_handle+0x1c>
	return NULL;
   20ee0:	2300      	movs	r3, #0
}
   20ee2:	4618      	mov	r0, r3
   20ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   20ee8:	fb09 7004 	mla	r0, r9, r4, r7
   20eec:	f7ff ffb9 	bl	20e62 <bt_conn_ref>
   20ef0:	4603      	mov	r3, r0
		if (!conn) {
   20ef2:	b158      	cbz	r0, 20f0c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   20ef4:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   20ef6:	2d01      	cmp	r5, #1
   20ef8:	d002      	beq.n	20f00 <conn_lookup_handle+0x34>
   20efa:	3d07      	subs	r5, #7
   20efc:	2d01      	cmp	r5, #1
   20efe:	d803      	bhi.n	20f08 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   20f00:	881a      	ldrh	r2, [r3, #0]
   20f02:	4542      	cmp	r2, r8
   20f04:	d0ed      	beq.n	20ee2 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   20f06:	4618      	mov	r0, r3
   20f08:	f7ff ffc6 	bl	20e98 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   20f0c:	3401      	adds	r4, #1
   20f0e:	e7e5      	b.n	20edc <conn_lookup_handle+0x10>

00020f10 <bt_conn_connected>:
{
   20f10:	b510      	push	{r4, lr}
   20f12:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   20f14:	f7f4 ff70 	bl	15df8 <bt_l2cap_connected>
	notify_connected(conn);
   20f18:	4620      	mov	r0, r4
}
   20f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   20f1e:	f7f4 badd 	b.w	154dc <notify_connected>

00020f22 <bt_conn_get_security>:
}
   20f22:	2001      	movs	r0, #1
   20f24:	4770      	bx	lr

00020f26 <bt_conn_is_peer_addr_le>:
{
   20f26:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   20f28:	7a03      	ldrb	r3, [r0, #8]
   20f2a:	428b      	cmp	r3, r1
{
   20f2c:	4604      	mov	r4, r0
   20f2e:	4615      	mov	r5, r2
	if (id != conn->id) {
   20f30:	d115      	bne.n	20f5e <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   20f32:	f100 0188 	add.w	r1, r0, #136	; 0x88
   20f36:	2207      	movs	r2, #7
   20f38:	4628      	mov	r0, r5
   20f3a:	f002 fc22 	bl	23782 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   20f3e:	b180      	cbz	r0, 20f62 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   20f40:	78e3      	ldrb	r3, [r4, #3]
   20f42:	2207      	movs	r2, #7
   20f44:	b943      	cbnz	r3, 20f58 <bt_conn_is_peer_addr_le+0x32>
   20f46:	f104 0196 	add.w	r1, r4, #150	; 0x96
   20f4a:	4628      	mov	r0, r5
   20f4c:	f002 fc19 	bl	23782 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   20f50:	fab0 f080 	clz	r0, r0
   20f54:	0940      	lsrs	r0, r0, #5
}
   20f56:	bd38      	pop	{r3, r4, r5, pc}
   20f58:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   20f5c:	e7f5      	b.n	20f4a <bt_conn_is_peer_addr_le+0x24>
		return false;
   20f5e:	2000      	movs	r0, #0
   20f60:	e7f9      	b.n	20f56 <bt_conn_is_peer_addr_le+0x30>
		return true;
   20f62:	2001      	movs	r0, #1
   20f64:	e7f7      	b.n	20f56 <bt_conn_is_peer_addr_le+0x30>

00020f66 <bt_conn_exists_le>:
{
   20f66:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   20f68:	f7f4 fd94 	bl	15a94 <bt_conn_lookup_addr_le>
	if (conn) {
   20f6c:	b110      	cbz	r0, 20f74 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   20f6e:	f7ff ff93 	bl	20e98 <bt_conn_unref>
		return true;
   20f72:	2001      	movs	r0, #1
}
   20f74:	bd08      	pop	{r3, pc}

00020f76 <bt_conn_le_conn_update>:
{
   20f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f78:	4607      	mov	r7, r0
   20f7a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   20f7c:	f242 0013 	movw	r0, #8211	; 0x2013
   20f80:	210e      	movs	r1, #14
   20f82:	f7f3 f8fd 	bl	14180 <bt_hci_cmd_create>
	if (!buf) {
   20f86:	4606      	mov	r6, r0
   20f88:	b1d0      	cbz	r0, 20fc0 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   20f8a:	210e      	movs	r1, #14
   20f8c:	3008      	adds	r0, #8
   20f8e:	f001 fa71 	bl	22474 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   20f92:	220e      	movs	r2, #14
   20f94:	4604      	mov	r4, r0
   20f96:	2100      	movs	r1, #0
   20f98:	f002 fc24 	bl	237e4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   20f9c:	883b      	ldrh	r3, [r7, #0]
   20f9e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   20fa0:	882b      	ldrh	r3, [r5, #0]
   20fa2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   20fa4:	886b      	ldrh	r3, [r5, #2]
   20fa6:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   20fa8:	88ab      	ldrh	r3, [r5, #4]
   20faa:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   20fac:	88eb      	ldrh	r3, [r5, #6]
   20fae:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20fb0:	4631      	mov	r1, r6
   20fb2:	2200      	movs	r2, #0
}
   20fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   20fb8:	f242 0013 	movw	r0, #8211	; 0x2013
   20fbc:	f7f3 b91a 	b.w	141f4 <bt_hci_cmd_send_sync>
}
   20fc0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   20fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020fc6 <bt_conn_le_param_update>:
{
   20fc6:	b410      	push	{r4}
	if (conn->le.interval >= param->interval_min &&
   20fc8:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   20fcc:	880c      	ldrh	r4, [r1, #0]
   20fce:	429c      	cmp	r4, r3
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
   20fd0:	f100 0204 	add.w	r2, r0, #4
	if (conn->le.interval >= param->interval_min &&
   20fd4:	d81c      	bhi.n	21010 <bt_conn_le_param_update+0x4a>
   20fd6:	884c      	ldrh	r4, [r1, #2]
   20fd8:	429c      	cmp	r4, r3
   20fda:	d319      	bcc.n	21010 <bt_conn_le_param_update+0x4a>
	    conn->le.interval <= param->interval_max &&
   20fdc:	f8b0 40a4 	ldrh.w	r4, [r0, #164]	; 0xa4
   20fe0:	888b      	ldrh	r3, [r1, #4]
   20fe2:	429c      	cmp	r4, r3
   20fe4:	d114      	bne.n	21010 <bt_conn_le_param_update+0x4a>
	    conn->le.latency == param->latency &&
   20fe6:	f8b0 40a6 	ldrh.w	r4, [r0, #166]	; 0xa6
   20fea:	88cb      	ldrh	r3, [r1, #6]
   20fec:	429c      	cmp	r4, r3
   20fee:	d10f      	bne.n	21010 <bt_conn_le_param_update+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20ff0:	f3bf 8f5b 	dmb	ish
   20ff4:	e852 3f00 	ldrex	r3, [r2]
   20ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   20ffc:	e842 3100 	strex	r1, r3, [r2]
   21000:	2900      	cmp	r1, #0
   21002:	d1f7      	bne.n	20ff4 <bt_conn_le_param_update+0x2e>
   21004:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   21008:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2100c:	bc10      	pop	{r4}
   2100e:	4770      	bx	lr
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21010:	f3bf 8f5b 	dmb	ish
   21014:	6844      	ldr	r4, [r0, #4]
   21016:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   2101a:	f3c4 13c0 	ubfx	r3, r4, #7, #1
   2101e:	0624      	lsls	r4, r4, #24
   21020:	d502      	bpl.n	21028 <bt_conn_le_param_update+0x62>
}
   21022:	bc10      	pop	{r4}
			return send_conn_le_param_update(conn, param);
   21024:	f7f4 bd76 	b.w	15b14 <send_conn_le_param_update>
		conn->le.interval_min = param->interval_min;
   21028:	880c      	ldrh	r4, [r1, #0]
   2102a:	f8a0 40a0 	strh.w	r4, [r0, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   2102e:	884c      	ldrh	r4, [r1, #2]
   21030:	f8a0 40a2 	strh.w	r4, [r0, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   21034:	888c      	ldrh	r4, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   21036:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   21038:	f8a0 40a8 	strh.w	r4, [r0, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   2103c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21040:	f3bf 8f5b 	dmb	ish
   21044:	e852 1f00 	ldrex	r1, [r2]
   21048:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   2104c:	e842 1000 	strex	r0, r1, [r2]
   21050:	2800      	cmp	r0, #0
   21052:	d1f7      	bne.n	21044 <bt_conn_le_param_update+0x7e>
   21054:	f3bf 8f5b 	dmb	ish
	return 0;
   21058:	4618      	mov	r0, r3
   2105a:	e7d7      	b.n	2100c <bt_conn_le_param_update+0x46>

0002105c <l2cap_connected>:
}
   2105c:	4770      	bx	lr

0002105e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2105e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21060:	4607      	mov	r7, r0
   21062:	460e      	mov	r6, r1
   21064:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   21066:	2300      	movs	r3, #0
   21068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2106c:	2104      	movs	r1, #4
   2106e:	2000      	movs	r0, #0
   21070:	f7f4 fc54 	bl	1591c <bt_conn_create_pdu_timeout>
	if (!buf) {
   21074:	4604      	mov	r4, r0
   21076:	b130      	cbz	r0, 21086 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   21078:	2104      	movs	r1, #4
   2107a:	3008      	adds	r0, #8
   2107c:	f001 f9fa 	bl	22474 <net_buf_simple_add>
	hdr->code = code;
   21080:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   21082:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   21084:	8045      	strh	r5, [r0, #2]
}
   21086:	4620      	mov	r0, r4
   21088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002108a <l2cap_disconnected>:
   2108a:	4770      	bx	lr

0002108c <bt_l2cap_chan_del>:
{
   2108c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2108e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   21092:	4604      	mov	r4, r0
	if (!chan->conn) {
   21094:	b123      	cbz	r3, 210a0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   21096:	686b      	ldr	r3, [r5, #4]
   21098:	b103      	cbz	r3, 2109c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2109a:	4798      	blx	r3
	chan->conn = NULL;
   2109c:	2300      	movs	r3, #0
   2109e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   210a0:	68e3      	ldr	r3, [r4, #12]
   210a2:	b10b      	cbz	r3, 210a8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   210a4:	4620      	mov	r0, r4
   210a6:	4798      	blx	r3
	if (ops->released) {
   210a8:	69eb      	ldr	r3, [r5, #28]
   210aa:	b11b      	cbz	r3, 210b4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   210ac:	4620      	mov	r0, r4
}
   210ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   210b2:	4718      	bx	r3
}
   210b4:	bd70      	pop	{r4, r5, r6, pc}

000210b6 <bt_l2cap_disconnected>:
	return list->head;
   210b6:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   210b8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210ba:	b160      	cbz	r0, 210d6 <bt_l2cap_disconnected+0x20>
	return node->next;
   210bc:	f850 4908 	ldr.w	r4, [r0], #-8
   210c0:	b104      	cbz	r4, 210c4 <bt_l2cap_disconnected+0xe>
   210c2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   210c4:	f7ff ffe2 	bl	2108c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   210c8:	b12c      	cbz	r4, 210d6 <bt_l2cap_disconnected+0x20>
   210ca:	68a3      	ldr	r3, [r4, #8]
   210cc:	b103      	cbz	r3, 210d0 <bt_l2cap_disconnected+0x1a>
   210ce:	3b08      	subs	r3, #8
{
   210d0:	4620      	mov	r0, r4
   210d2:	461c      	mov	r4, r3
   210d4:	e7f6      	b.n	210c4 <bt_l2cap_disconnected+0xe>
}
   210d6:	bd10      	pop	{r4, pc}

000210d8 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   210d8:	3104      	adds	r1, #4
   210da:	f7f4 bc1f 	b.w	1591c <bt_conn_create_pdu_timeout>

000210de <bt_l2cap_send_cb>:
{
   210de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210e2:	4614      	mov	r4, r2
   210e4:	4605      	mov	r5, r0
   210e6:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   210e8:	f102 0008 	add.w	r0, r2, #8
   210ec:	2104      	movs	r1, #4
   210ee:	461e      	mov	r6, r3
   210f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   210f4:	f001 f9d5 	bl	224a2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   210f8:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   210fa:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   210fc:	3a04      	subs	r2, #4
   210fe:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   21100:	4643      	mov	r3, r8
   21102:	4632      	mov	r2, r6
   21104:	4621      	mov	r1, r4
   21106:	4628      	mov	r0, r5
}
   21108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2110c:	f7f4 bace 	b.w	156ac <bt_conn_send_cb>

00021110 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   21110:	898b      	ldrh	r3, [r1, #12]
   21112:	2b03      	cmp	r3, #3
{
   21114:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21116:	4605      	mov	r5, r0
   21118:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   2111a:	d927      	bls.n	2116c <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2111c:	2104      	movs	r1, #4
   2111e:	f104 0008 	add.w	r0, r4, #8
   21122:	f001 f9ce 	bl	224c2 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   21126:	89a3      	ldrh	r3, [r4, #12]
   21128:	8842      	ldrh	r2, [r0, #2]
   2112a:	429a      	cmp	r2, r3
   2112c:	d11e      	bne.n	2116c <l2cap_recv+0x5c>
	if (!hdr->ident) {
   2112e:	7841      	ldrb	r1, [r0, #1]
   21130:	b1e1      	cbz	r1, 2116c <l2cap_recv+0x5c>
	switch (hdr->code) {
   21132:	7803      	ldrb	r3, [r0, #0]
   21134:	2b01      	cmp	r3, #1
   21136:	d019      	beq.n	2116c <l2cap_recv+0x5c>
   21138:	2b13      	cmp	r3, #19
   2113a:	d017      	beq.n	2116c <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2113c:	2202      	movs	r2, #2
   2113e:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   21140:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   21142:	f7ff ff8c 	bl	2105e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   21146:	4604      	mov	r4, r0
   21148:	b180      	cbz	r0, 2116c <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2114a:	2102      	movs	r1, #2
   2114c:	3008      	adds	r0, #8
   2114e:	f001 f991 	bl	22474 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   21152:	2300      	movs	r3, #0
   21154:	7003      	strb	r3, [r0, #0]
   21156:	7043      	strb	r3, [r0, #1]
   21158:	4622      	mov	r2, r4
   2115a:	9300      	str	r3, [sp, #0]
   2115c:	2105      	movs	r1, #5
   2115e:	4628      	mov	r0, r5
   21160:	f7ff ffbd 	bl	210de <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   21164:	b110      	cbz	r0, 2116c <l2cap_recv+0x5c>
		net_buf_unref(buf);
   21166:	4620      	mov	r0, r4
   21168:	f7f6 f988 	bl	1747c <net_buf_unref>
}
   2116c:	2000      	movs	r0, #0
   2116e:	b003      	add	sp, #12
   21170:	bd30      	pop	{r4, r5, pc}

00021172 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   21172:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   21174:	b130      	cbz	r0, 21184 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   21176:	8983      	ldrh	r3, [r0, #12]
   21178:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2117a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2117e:	d001      	beq.n	21184 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   21180:	6880      	ldr	r0, [r0, #8]
   21182:	e7f7      	b.n	21174 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   21184:	4770      	bx	lr

00021186 <bt_l2cap_recv>:
{
   21186:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   21188:	898b      	ldrh	r3, [r1, #12]
   2118a:	2b03      	cmp	r3, #3
{
   2118c:	4605      	mov	r5, r0
   2118e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   21190:	d804      	bhi.n	2119c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   21192:	4620      	mov	r0, r4
}
   21194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   21198:	f7f6 b970 	b.w	1747c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   2119c:	2104      	movs	r1, #4
   2119e:	f104 0008 	add.w	r0, r4, #8
   211a2:	f001 f98e 	bl	224c2 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   211a6:	8841      	ldrh	r1, [r0, #2]
   211a8:	4628      	mov	r0, r5
   211aa:	f7ff ffe2 	bl	21172 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   211ae:	2800      	cmp	r0, #0
   211b0:	d0ef      	beq.n	21192 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   211b2:	6843      	ldr	r3, [r0, #4]
   211b4:	4621      	mov	r1, r4
   211b6:	691b      	ldr	r3, [r3, #16]
   211b8:	4798      	blx	r3
   211ba:	e7ea      	b.n	21192 <bt_l2cap_recv+0xc>

000211bc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   211bc:	4770      	bx	lr

000211be <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   211be:	4603      	mov	r3, r0
	return list->head;
   211c0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   211c2:	b128      	cbz	r0, 211d0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   211c4:	6859      	ldr	r1, [r3, #4]
	return node->next;
   211c6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   211c8:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   211ca:	4288      	cmp	r0, r1
	list->tail = node;
   211cc:	bf08      	it	eq
   211ce:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   211d0:	4770      	bx	lr

000211d2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   211d2:	4603      	mov	r3, r0
	size_t bytes = 0;
   211d4:	2000      	movs	r0, #0

	while (buf) {
   211d6:	b903      	cbnz	r3, 211da <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   211d8:	4770      	bx	lr
		bytes += buf->len;
   211da:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   211dc:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   211de:	4410      	add	r0, r2
		buf = buf->frags;
   211e0:	e7f9      	b.n	211d6 <net_buf_frags_len+0x4>

000211e2 <att_sent>:
	if (chan->ops->sent) {
   211e2:	684b      	ldr	r3, [r1, #4]
   211e4:	695b      	ldr	r3, [r3, #20]
{
   211e6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   211e8:	b103      	cbz	r3, 211ec <att_sent+0xa>
		chan->ops->sent(chan);
   211ea:	4718      	bx	r3
}
   211ec:	4770      	bx	lr

000211ee <attr_read_type_cb>:
{
   211ee:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   211f0:	68d4      	ldr	r4, [r2, #12]
   211f2:	7823      	ldrb	r3, [r4, #0]
   211f4:	3102      	adds	r1, #2
   211f6:	b913      	cbnz	r3, 211fe <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   211f8:	7021      	strb	r1, [r4, #0]
	return true;
   211fa:	2001      	movs	r0, #1
   211fc:	e006      	b.n	2120c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   211fe:	428b      	cmp	r3, r1
   21200:	d0fb      	beq.n	211fa <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   21202:	8983      	ldrh	r3, [r0, #12]
   21204:	3b02      	subs	r3, #2
   21206:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   21208:	2000      	movs	r0, #0
   2120a:	6110      	str	r0, [r2, #16]
}
   2120c:	bd10      	pop	{r4, pc}

0002120e <att_prepare_write_req>:
}
   2120e:	2006      	movs	r0, #6
   21210:	4770      	bx	lr

00021212 <att_op_get_type>:
	switch (op) {
   21212:	2852      	cmp	r0, #82	; 0x52
   21214:	d830      	bhi.n	21278 <att_op_get_type+0x66>
   21216:	b388      	cbz	r0, 2127c <att_op_get_type+0x6a>
   21218:	1e43      	subs	r3, r0, #1
   2121a:	2b51      	cmp	r3, #81	; 0x51
   2121c:	d82e      	bhi.n	2127c <att_op_get_type+0x6a>
   2121e:	e8df f003 	tbb	[pc, r3]
   21222:	3933      	.short	0x3933
   21224:	39333933 	.word	0x39333933
   21228:	39333933 	.word	0x39333933
   2122c:	39333933 	.word	0x39333933
   21230:	39333933 	.word	0x39333933
   21234:	392d2d33 	.word	0x392d2d33
   21238:	2d333933 	.word	0x2d333933
   2123c:	29372d35 	.word	0x29372d35
   21240:	2d33392d 	.word	0x2d33392d
   21244:	2d2d2d35 	.word	0x2d2d2d35
   21248:	2d2d2d2d 	.word	0x2d2d2d2d
   2124c:	2d2d2d2d 	.word	0x2d2d2d2d
   21250:	2d2d2d2d 	.word	0x2d2d2d2d
   21254:	2d2d2d2d 	.word	0x2d2d2d2d
   21258:	2d2d2d2d 	.word	0x2d2d2d2d
   2125c:	2d2d2d2d 	.word	0x2d2d2d2d
   21260:	2d2d2d2d 	.word	0x2d2d2d2d
   21264:	2d2d2d2d 	.word	0x2d2d2d2d
   21268:	2d2d2d2d 	.word	0x2d2d2d2d
   2126c:	2d2d2d2d 	.word	0x2d2d2d2d
   21270:	3b2d2d2d 	.word	0x3b2d2d2d
   21274:	2004      	movs	r0, #4
   21276:	4770      	bx	lr
   21278:	28d2      	cmp	r0, #210	; 0xd2
   2127a:	d00d      	beq.n	21298 <att_op_get_type+0x86>
		return ATT_COMMAND;
   2127c:	f010 0f40 	tst.w	r0, #64	; 0x40
   21280:	bf0c      	ite	eq
   21282:	2006      	moveq	r0, #6
   21284:	2000      	movne	r0, #0
   21286:	4770      	bx	lr
		return ATT_RESPONSE;
   21288:	2002      	movs	r0, #2
   2128a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2128c:	2003      	movs	r0, #3
   2128e:	4770      	bx	lr
		return ATT_INDICATION;
   21290:	2005      	movs	r0, #5
   21292:	4770      	bx	lr
		return ATT_REQUEST;
   21294:	2001      	movs	r0, #1
   21296:	4770      	bx	lr
		return ATT_COMMAND;
   21298:	2000      	movs	r0, #0
}
   2129a:	4770      	bx	lr

0002129c <bt_gatt_foreach_attr>:
{
   2129c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2129e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   212a2:	2300      	movs	r3, #0
   212a4:	9300      	str	r3, [sp, #0]
   212a6:	461a      	mov	r2, r3
   212a8:	f7f5 fcce 	bl	16c48 <bt_gatt_foreach_attr_type>
}
   212ac:	b005      	add	sp, #20
   212ae:	f85d fb04 	ldr.w	pc, [sp], #4

000212b2 <find_type_cb>:
{
   212b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   212b6:	f8d2 9000 	ldr.w	r9, [r2]
{
   212ba:	b091      	sub	sp, #68	; 0x44
   212bc:	4607      	mov	r7, r0
   212be:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   212c0:	2500      	movs	r5, #0
   212c2:	f642 0301 	movw	r3, #10241	; 0x2801
   212c6:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   212c8:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   212cc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   212d0:	a90b      	add	r1, sp, #44	; 0x2c
{
   212d2:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   212d4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   212d8:	f7ff f8d1 	bl	2047e <bt_uuid_cmp>
   212dc:	2800      	cmp	r0, #0
   212de:	d079      	beq.n	213d4 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   212e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   212e4:	6838      	ldr	r0, [r7, #0]
   212e6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   212ea:	a90b      	add	r1, sp, #44	; 0x2c
   212ec:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   212f0:	f7ff f8c5 	bl	2047e <bt_uuid_cmp>
   212f4:	b138      	cbz	r0, 21306 <find_type_cb+0x54>
		if (data->group &&
   212f6:	68a3      	ldr	r3, [r4, #8]
   212f8:	b11b      	cbz	r3, 21302 <find_type_cb+0x50>
   212fa:	885a      	ldrh	r2, [r3, #2]
   212fc:	42b2      	cmp	r2, r6
   212fe:	d200      	bcs.n	21302 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   21300:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   21302:	2001      	movs	r0, #1
   21304:	e009      	b.n	2131a <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   21306:	6861      	ldr	r1, [r4, #4]
   21308:	4608      	mov	r0, r1
   2130a:	f7ff ff62 	bl	211d2 <net_buf_frags_len>
   2130e:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   21312:	1a1b      	subs	r3, r3, r0
   21314:	2b03      	cmp	r3, #3
   21316:	d803      	bhi.n	21320 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   21318:	2000      	movs	r0, #0
}
   2131a:	b011      	add	sp, #68	; 0x44
   2131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   21320:	4608      	mov	r0, r1
   21322:	f001 f885 	bl	22430 <net_buf_frag_last>
   21326:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   21328:	6860      	ldr	r0, [r4, #4]
   2132a:	f7ff ff52 	bl	211d2 <net_buf_frags_len>
   2132e:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   21332:	f105 0b08 	add.w	fp, r5, #8
   21336:	ebaa 0a00 	sub.w	sl, sl, r0
   2133a:	4658      	mov	r0, fp
   2133c:	f001 f8d5 	bl	224ea <net_buf_simple_tailroom>
   21340:	4582      	cmp	sl, r0
   21342:	d23f      	bcs.n	213c4 <find_type_cb+0x112>
   21344:	6860      	ldr	r0, [r4, #4]
   21346:	f7ff ff44 	bl	211d2 <net_buf_frags_len>
   2134a:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   2134e:	1a18      	subs	r0, r3, r0
	if (!len) {
   21350:	b970      	cbnz	r0, 21370 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   21352:	6863      	ldr	r3, [r4, #4]
   21354:	7998      	ldrb	r0, [r3, #6]
   21356:	f7f5 ffcd 	bl	172f4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2135a:	2200      	movs	r2, #0
   2135c:	2300      	movs	r3, #0
   2135e:	f000 ffea 	bl	22336 <net_buf_alloc_fixed>
		if (!frag) {
   21362:	4605      	mov	r5, r0
   21364:	2800      	cmp	r0, #0
   21366:	d0d7      	beq.n	21318 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   21368:	4601      	mov	r1, r0
   2136a:	6860      	ldr	r0, [r4, #4]
   2136c:	f001 f871 	bl	22452 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   21370:	2300      	movs	r3, #0
   21372:	9300      	str	r3, [sp, #0]
   21374:	f8d7 9004 	ldr.w	r9, [r7, #4]
   21378:	4639      	mov	r1, r7
   2137a:	2310      	movs	r3, #16
   2137c:	aa02      	add	r2, sp, #8
   2137e:	4640      	mov	r0, r8
   21380:	47c8      	blx	r9
	if (read < 0) {
   21382:	1e07      	subs	r7, r0, #0
   21384:	db26      	blt.n	213d4 <find_type_cb+0x122>
	if (read != data->value_len) {
   21386:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   21388:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   2138a:	42ba      	cmp	r2, r7
   2138c:	d01e      	beq.n	213cc <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   2138e:	4601      	mov	r1, r0
   21390:	a80b      	add	r0, sp, #44	; 0x2c
   21392:	f7ff f8a2 	bl	204da <bt_uuid_create>
   21396:	b1e8      	cbz	r0, 213d4 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   21398:	b2fa      	uxtb	r2, r7
   2139a:	a902      	add	r1, sp, #8
   2139c:	a806      	add	r0, sp, #24
   2139e:	f7ff f89c 	bl	204da <bt_uuid_create>
   213a2:	b1b8      	cbz	r0, 213d4 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   213a4:	a906      	add	r1, sp, #24
   213a6:	a80b      	add	r0, sp, #44	; 0x2c
   213a8:	f7ff f869 	bl	2047e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   213ac:	b990      	cbnz	r0, 213d4 <find_type_cb+0x122>
	data->err = 0x00;
   213ae:	2300      	movs	r3, #0
   213b0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   213b2:	2104      	movs	r1, #4
   213b4:	f105 0008 	add.w	r0, r5, #8
   213b8:	f001 f85c 	bl	22474 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   213bc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   213be:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   213c0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   213c2:	e79e      	b.n	21302 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   213c4:	4658      	mov	r0, fp
   213c6:	f001 f890 	bl	224ea <net_buf_simple_tailroom>
   213ca:	e7c1      	b.n	21350 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   213cc:	a902      	add	r1, sp, #8
   213ce:	f002 f9d8 	bl	23782 <memcmp>
   213d2:	e7eb      	b.n	213ac <find_type_cb+0xfa>
	data->group = NULL;
   213d4:	2300      	movs	r3, #0
   213d6:	60a3      	str	r3, [r4, #8]
   213d8:	e793      	b.n	21302 <find_type_cb+0x50>

000213da <att_chan_mtu_updated>:
{
   213da:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   213dc:	6806      	ldr	r6, [r0, #0]
	return list->head;
   213de:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   213e0:	b1c3      	cbz	r3, 21414 <att_chan_mtu_updated+0x3a>
   213e2:	461a      	mov	r2, r3
	return node->next;
   213e4:	f852 49e4 	ldr.w	r4, [r2], #-228
   213e8:	b104      	cbz	r4, 213ec <att_chan_mtu_updated+0x12>
   213ea:	3ce4      	subs	r4, #228	; 0xe4
{
   213ec:	2300      	movs	r3, #0
   213ee:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   213f0:	4290      	cmp	r0, r2
   213f2:	d007      	beq.n	21404 <att_chan_mtu_updated+0x2a>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   213f4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   213f6:	8b52      	ldrh	r2, [r2, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   213f8:	42a9      	cmp	r1, r5
   213fa:	bf38      	it	cc
   213fc:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   213fe:	4293      	cmp	r3, r2
   21400:	bf38      	it	cc
   21402:	4613      	movcc	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21404:	b13c      	cbz	r4, 21416 <att_chan_mtu_updated+0x3c>
   21406:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
   2140a:	b105      	cbz	r5, 2140e <att_chan_mtu_updated+0x34>
   2140c:	3de4      	subs	r5, #228	; 0xe4
{
   2140e:	4622      	mov	r2, r4
   21410:	462c      	mov	r4, r5
   21412:	e7ed      	b.n	213f0 <att_chan_mtu_updated+0x16>
   21414:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   21416:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   21418:	8b42      	ldrh	r2, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2141a:	428c      	cmp	r4, r1
   2141c:	d801      	bhi.n	21422 <att_chan_mtu_updated+0x48>
   2141e:	429a      	cmp	r2, r3
   21420:	d909      	bls.n	21436 <att_chan_mtu_updated+0x5c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21422:	429a      	cmp	r2, r3
   21424:	bf38      	it	cc
   21426:	461a      	movcc	r2, r3
   21428:	42a1      	cmp	r1, r4
   2142a:	6830      	ldr	r0, [r6, #0]
   2142c:	bf38      	it	cc
   2142e:	4621      	movcc	r1, r4
}
   21430:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   21432:	f7f5 bf19 	b.w	17268 <bt_gatt_att_max_mtu_changed>
}
   21436:	bc70      	pop	{r4, r5, r6}
   21438:	4770      	bx	lr

0002143a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2143a:	68d0      	ldr	r0, [r2, #12]
   2143c:	7803      	ldrb	r3, [r0, #0]
   2143e:	3104      	adds	r1, #4
   21440:	b913      	cbnz	r3, 21448 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   21442:	7001      	strb	r1, [r0, #0]
	return true;
   21444:	2001      	movs	r0, #1
}
   21446:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   21448:	428b      	cmp	r3, r1
   2144a:	d0fb      	beq.n	21444 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2144c:	6891      	ldr	r1, [r2, #8]
   2144e:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   21450:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   21452:	3b04      	subs	r3, #4
   21454:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   21456:	6110      	str	r0, [r2, #16]
		return false;
   21458:	4770      	bx	lr

0002145a <att_get>:
{
   2145a:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2145c:	7a83      	ldrb	r3, [r0, #10]
   2145e:	2b07      	cmp	r3, #7
   21460:	d001      	beq.n	21466 <att_get+0xc>
		return NULL;
   21462:	2000      	movs	r0, #0
}
   21464:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21466:	2104      	movs	r1, #4
   21468:	f7ff fe83 	bl	21172 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2146c:	2800      	cmp	r0, #0
   2146e:	d0f8      	beq.n	21462 <att_get+0x8>
	return att_chan->att;
   21470:	f850 0c04 	ldr.w	r0, [r0, #-4]
   21474:	e7f6      	b.n	21464 <att_get+0xa>

00021476 <chan_req_sent>:
	if (chan->req) {
   21476:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2147a:	b12b      	cbz	r3, 21488 <chan_req_sent+0x12>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2147c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21480:	2300      	movs	r3, #0
   21482:	30b0      	adds	r0, #176	; 0xb0
   21484:	f7f9 bf5e 	b.w	1b344 <k_work_reschedule>
}
   21488:	4770      	bx	lr

0002148a <write_cb>:
{
   2148a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2148c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2148e:	4601      	mov	r1, r0
{
   21490:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   21492:	222a      	movs	r2, #42	; 0x2a
   21494:	6820      	ldr	r0, [r4, #0]
   21496:	f000 fe7f 	bl	22198 <bt_gatt_check_perm>
   2149a:	4605      	mov	r5, r0
   2149c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2149e:	bb20      	cbnz	r0, 214ea <write_cb+0x60>
	if (!data->req) {
   214a0:	7a23      	ldrb	r3, [r4, #8]
   214a2:	b1ab      	cbz	r3, 214d0 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   214a4:	2b18      	cmp	r3, #24
   214a6:	bf14      	ite	ne
   214a8:	2300      	movne	r3, #0
   214aa:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   214ac:	9301      	str	r3, [sp, #4]
   214ae:	8a63      	ldrh	r3, [r4, #18]
   214b0:	9300      	str	r3, [sp, #0]
   214b2:	68b7      	ldr	r7, [r6, #8]
   214b4:	8a23      	ldrh	r3, [r4, #16]
   214b6:	68e2      	ldr	r2, [r4, #12]
   214b8:	6820      	ldr	r0, [r4, #0]
   214ba:	4631      	mov	r1, r6
   214bc:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   214be:	1e03      	subs	r3, r0, #0
   214c0:	db08      	blt.n	214d4 <write_cb+0x4a>
   214c2:	8a22      	ldrh	r2, [r4, #16]
   214c4:	4293      	cmp	r3, r2
   214c6:	d10e      	bne.n	214e6 <write_cb+0x5c>
	data->err = 0U;
   214c8:	2300      	movs	r3, #0
   214ca:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   214cc:	2501      	movs	r5, #1
   214ce:	e007      	b.n	214e0 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   214d0:	2302      	movs	r3, #2
   214d2:	e7eb      	b.n	214ac <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   214d4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   214d8:	d305      	bcc.n	214e6 <write_cb+0x5c>
		return -err;
   214da:	425b      	negs	r3, r3
   214dc:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   214de:	7523      	strb	r3, [r4, #20]
}
   214e0:	4628      	mov	r0, r5
   214e2:	b003      	add	sp, #12
   214e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   214e6:	230e      	movs	r3, #14
   214e8:	e7f9      	b.n	214de <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   214ea:	2500      	movs	r5, #0
   214ec:	e7f8      	b.n	214e0 <write_cb+0x56>

000214ee <find_info_cb>:
{
   214ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   214f0:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   214f2:	6816      	ldr	r6, [r2, #0]
{
   214f4:	4605      	mov	r5, r0
   214f6:	460f      	mov	r7, r1
   214f8:	4614      	mov	r4, r2
	if (!data->rsp) {
   214fa:	b963      	cbnz	r3, 21516 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   214fc:	6850      	ldr	r0, [r2, #4]
   214fe:	2101      	movs	r1, #1
   21500:	3008      	adds	r0, #8
   21502:	f000 ffb7 	bl	22474 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   21506:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   21508:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2150a:	781b      	ldrb	r3, [r3, #0]
   2150c:	2b00      	cmp	r3, #0
   2150e:	bf0c      	ite	eq
   21510:	2301      	moveq	r3, #1
   21512:	2302      	movne	r3, #2
   21514:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   21516:	68a3      	ldr	r3, [r4, #8]
   21518:	781b      	ldrb	r3, [r3, #0]
   2151a:	2b01      	cmp	r3, #1
   2151c:	d003      	beq.n	21526 <find_info_cb+0x38>
   2151e:	2b02      	cmp	r3, #2
   21520:	d018      	beq.n	21554 <find_info_cb+0x66>
			return BT_GATT_ITER_STOP;
   21522:	2000      	movs	r0, #0
   21524:	e015      	b.n	21552 <find_info_cb+0x64>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   21526:	682b      	ldr	r3, [r5, #0]
   21528:	781b      	ldrb	r3, [r3, #0]
   2152a:	2b00      	cmp	r3, #0
   2152c:	d1f9      	bne.n	21522 <find_info_cb+0x34>
   2152e:	6860      	ldr	r0, [r4, #4]
   21530:	2104      	movs	r1, #4
   21532:	3008      	adds	r0, #8
   21534:	f000 ff9e 	bl	22474 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   21538:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2153a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2153c:	885b      	ldrh	r3, [r3, #2]
   2153e:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   21540:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   21542:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   21544:	899b      	ldrh	r3, [r3, #12]
   21546:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   21548:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2154a:	2804      	cmp	r0, #4
   2154c:	bf94      	ite	ls
   2154e:	2000      	movls	r0, #0
   21550:	2001      	movhi	r0, #1
}
   21552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   21554:	682b      	ldr	r3, [r5, #0]
   21556:	781b      	ldrb	r3, [r3, #0]
   21558:	2b02      	cmp	r3, #2
   2155a:	d1e2      	bne.n	21522 <find_info_cb+0x34>
   2155c:	6860      	ldr	r0, [r4, #4]
   2155e:	2112      	movs	r1, #18
   21560:	3008      	adds	r0, #8
   21562:	f000 ff87 	bl	22474 <net_buf_simple_add>
   21566:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21568:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2156a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2156c:	f823 7b02 	strh.w	r7, [r3], #2
   21570:	1c51      	adds	r1, r2, #1
   21572:	3211      	adds	r2, #17
   21574:	f851 0b04 	ldr.w	r0, [r1], #4
   21578:	f843 0b04 	str.w	r0, [r3], #4
   2157c:	4291      	cmp	r1, r2
   2157e:	d1f9      	bne.n	21574 <find_info_cb+0x86>
		if (chan->chan.tx.mtu - data->buf->len >
   21580:	6863      	ldr	r3, [r4, #4]
   21582:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   21584:	899b      	ldrh	r3, [r3, #12]
   21586:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   21588:	2812      	cmp	r0, #18
   2158a:	e7df      	b.n	2154c <find_info_cb+0x5e>

0002158c <att_chan_read>:
{
   2158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21590:	4680      	mov	r8, r0
   21592:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   21594:	4610      	mov	r0, r2
{
   21596:	4699      	mov	r9, r3
   21598:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2159a:	f7ff fe1a 	bl	211d2 <net_buf_frags_len>
   2159e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   215a2:	4283      	cmp	r3, r0
{
   215a4:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   215a6:	d97a      	bls.n	2169e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   215a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   215ac:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   215ae:	4630      	mov	r0, r6
   215b0:	f000 ff3e 	bl	22430 <net_buf_frag_last>
	size_t len, total = 0;
   215b4:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   215b8:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   215ba:	4630      	mov	r0, r6
   215bc:	f7ff fe09 	bl	211d2 <net_buf_frags_len>
   215c0:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   215c4:	f105 0708 	add.w	r7, r5, #8
   215c8:	1a24      	subs	r4, r4, r0
   215ca:	4638      	mov	r0, r7
   215cc:	f000 ff8d 	bl	224ea <net_buf_simple_tailroom>
   215d0:	4284      	cmp	r4, r0
   215d2:	d211      	bcs.n	215f8 <att_chan_read+0x6c>
   215d4:	4630      	mov	r0, r6
   215d6:	f7ff fdfc 	bl	211d2 <net_buf_frags_len>
   215da:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   215de:	1a24      	subs	r4, r4, r0
		if (!len) {
   215e0:	bb34      	cbnz	r4, 21630 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   215e2:	79b0      	ldrb	r0, [r6, #6]
   215e4:	f7f5 fe86 	bl	172f4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   215e8:	2200      	movs	r2, #0
   215ea:	2300      	movs	r3, #0
   215ec:	f000 fea3 	bl	22336 <net_buf_alloc_fixed>
			if (!frag) {
   215f0:	4605      	mov	r5, r0
   215f2:	b930      	cbnz	r0, 21602 <att_chan_read+0x76>
	return total;
   215f4:	4657      	mov	r7, sl
   215f6:	e02c      	b.n	21652 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   215f8:	4638      	mov	r0, r7
   215fa:	f000 ff76 	bl	224ea <net_buf_simple_tailroom>
   215fe:	4604      	mov	r4, r0
   21600:	e7ee      	b.n	215e0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   21602:	4601      	mov	r1, r0
   21604:	4630      	mov	r0, r6
   21606:	f000 ff24 	bl	22452 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2160a:	4630      	mov	r0, r6
   2160c:	f7ff fde1 	bl	211d2 <net_buf_frags_len>
   21610:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   21614:	f105 0708 	add.w	r7, r5, #8
   21618:	1a24      	subs	r4, r4, r0
   2161a:	4638      	mov	r0, r7
   2161c:	f000 ff65 	bl	224ea <net_buf_simple_tailroom>
   21620:	4284      	cmp	r4, r0
   21622:	d21a      	bcs.n	2165a <att_chan_read+0xce>
   21624:	4630      	mov	r0, r6
   21626:	f7ff fdd4 	bl	211d2 <net_buf_frags_len>
   2162a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2162e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   21630:	68a9      	ldr	r1, [r5, #8]
   21632:	89aa      	ldrh	r2, [r5, #12]
   21634:	f8db 7004 	ldr.w	r7, [fp, #4]
   21638:	9803      	ldr	r0, [sp, #12]
   2163a:	f8cd 9000 	str.w	r9, [sp]
   2163e:	440a      	add	r2, r1
   21640:	b2a3      	uxth	r3, r4
   21642:	4659      	mov	r1, fp
   21644:	47b8      	blx	r7
		if (read < 0) {
   21646:	1e07      	subs	r7, r0, #0
   21648:	da0c      	bge.n	21664 <att_chan_read+0xd8>
				return total;
   2164a:	f1ba 0f00 	cmp.w	sl, #0
   2164e:	bf18      	it	ne
   21650:	4657      	movne	r7, sl
}
   21652:	4638      	mov	r0, r7
   21654:	b005      	add	sp, #20
   21656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2165a:	4638      	mov	r0, r7
   2165c:	f000 ff45 	bl	224ea <net_buf_simple_tailroom>
   21660:	4604      	mov	r4, r0
   21662:	e7e5      	b.n	21630 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   21664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21666:	b993      	cbnz	r3, 2168e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   21668:	4639      	mov	r1, r7
   2166a:	f105 0008 	add.w	r0, r5, #8
   2166e:	f000 ff01 	bl	22474 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21672:	4630      	mov	r0, r6
   21674:	f7ff fdad 	bl	211d2 <net_buf_frags_len>
   21678:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2167c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2167e:	4283      	cmp	r3, r0
		total += read;
   21680:	44ba      	add	sl, r7
		offset += read;
   21682:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   21686:	d9b5      	bls.n	215f4 <att_chan_read+0x68>
   21688:	42a7      	cmp	r7, r4
   2168a:	d096      	beq.n	215ba <att_chan_read+0x2e>
   2168c:	e7b2      	b.n	215f4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2168e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21692:	4639      	mov	r1, r7
   21694:	4628      	mov	r0, r5
   21696:	4798      	blx	r3
   21698:	2800      	cmp	r0, #0
   2169a:	d1e5      	bne.n	21668 <att_chan_read+0xdc>
   2169c:	e7aa      	b.n	215f4 <att_chan_read+0x68>
		return 0;
   2169e:	2700      	movs	r7, #0
   216a0:	e7d7      	b.n	21652 <att_chan_read+0xc6>

000216a2 <chan_req_send>:
{
   216a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   216a4:	688f      	ldr	r7, [r1, #8]
{
   216a6:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   216a8:	4638      	mov	r0, r7
   216aa:	f7ff fd92 	bl	211d2 <net_buf_frags_len>
   216ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   216b0:	4283      	cmp	r3, r0
{
   216b2:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   216b4:	d30d      	bcc.n	216d2 <chan_req_send+0x30>
	req->buf = NULL;
   216b6:	2600      	movs	r6, #0
	chan->req = req;
   216b8:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
	err = chan_send(chan, buf, NULL);
   216bc:	4632      	mov	r2, r6
	req->buf = NULL;
   216be:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   216c0:	4620      	mov	r0, r4
   216c2:	4639      	mov	r1, r7
   216c4:	f7f4 fc90 	bl	15fe8 <chan_send>
	if (err) {
   216c8:	b110      	cbz	r0, 216d0 <chan_req_send+0x2e>
		req->buf = buf;
   216ca:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   216cc:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
}
   216d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   216d2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   216d6:	e7fb      	b.n	216d0 <chan_req_send+0x2e>

000216d8 <process_queue>:
{
   216d8:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   216da:	2200      	movs	r2, #0
{
   216dc:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   216de:	2300      	movs	r3, #0
   216e0:	4608      	mov	r0, r1
{
   216e2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   216e4:	f000 fe2c 	bl	22340 <net_buf_get>
	if (buf) {
   216e8:	4605      	mov	r5, r0
   216ea:	b160      	cbz	r0, 21706 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   216ec:	4601      	mov	r1, r0
   216ee:	2200      	movs	r2, #0
   216f0:	4620      	mov	r0, r4
   216f2:	f7f4 fc79 	bl	15fe8 <chan_send>
		if (err) {
   216f6:	4604      	mov	r4, r0
   216f8:	b118      	cbz	r0, 21702 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   216fa:	4629      	mov	r1, r5
   216fc:	4630      	mov	r0, r6
   216fe:	f001 fbf2 	bl	22ee6 <k_queue_prepend>
}
   21702:	4620      	mov	r0, r4
   21704:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   21706:	f06f 0401 	mvn.w	r4, #1
   2170a:	e7fa      	b.n	21702 <process_queue+0x2a>

0002170c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2170c:	b510      	push	{r4, lr}
	return list->head;
   2170e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21710:	2200      	movs	r2, #0
   21712:	b153      	cbz	r3, 2172a <sys_slist_find_and_remove.isra.0+0x1e>
   21714:	428b      	cmp	r3, r1
   21716:	d10e      	bne.n	21736 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   21718:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2171a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2171c:	b932      	cbnz	r2, 2172c <sys_slist_find_and_remove.isra.0+0x20>
   2171e:	42a1      	cmp	r1, r4
	list->head = node;
   21720:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   21722:	d100      	bne.n	21726 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   21724:	6043      	str	r3, [r0, #4]
	parent->next = child;
   21726:	2300      	movs	r3, #0
   21728:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2172a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2172c:	42a1      	cmp	r1, r4
	parent->next = child;
   2172e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   21730:	bf08      	it	eq
   21732:	6042      	streq	r2, [r0, #4]
}
   21734:	e7f7      	b.n	21726 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   21736:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21738:	681b      	ldr	r3, [r3, #0]
   2173a:	e7ea      	b.n	21712 <sys_slist_find_and_remove.isra.0+0x6>

0002173c <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2173c:	3090      	adds	r0, #144	; 0x90
   2173e:	f3bf 8f5b 	dmb	ish
   21742:	e850 3f00 	ldrex	r3, [r0]
   21746:	f023 0302 	bic.w	r3, r3, #2
   2174a:	e840 3200 	strex	r2, r3, [r0]
   2174e:	2a00      	cmp	r2, #0
   21750:	d1f7      	bne.n	21742 <chan_cfm_sent+0x6>
   21752:	f3bf 8f5b 	dmb	ish
}
   21756:	4770      	bx	lr

00021758 <att_exec_write_req>:
   21758:	2006      	movs	r0, #6
   2175a:	4770      	bx	lr

0002175c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2175c:	2301      	movs	r3, #1
   2175e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21762:	f3bf 8f5b 	dmb	ish
   21766:	e850 3f00 	ldrex	r3, [r0]
   2176a:	ea43 0201 	orr.w	r2, r3, r1
   2176e:	e840 2c00 	strex	ip, r2, [r0]
   21772:	f1bc 0f00 	cmp.w	ip, #0
   21776:	d1f6      	bne.n	21766 <atomic_test_and_set_bit+0xa>
   21778:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2177c:	4219      	tst	r1, r3
}
   2177e:	bf14      	ite	ne
   21780:	2001      	movne	r0, #1
   21782:	2000      	moveq	r0, #0
   21784:	4770      	bx	lr

00021786 <read_cb>:
{
   21786:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2178a:	f8d2 8000 	ldr.w	r8, [r2]
{
   2178e:	4606      	mov	r6, r0
	data->err = 0x00;
   21790:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   21792:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   21796:	7317      	strb	r7, [r2, #12]
{
   21798:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2179a:	4631      	mov	r1, r6
   2179c:	2215      	movs	r2, #21
   2179e:	f000 fcfb 	bl	22198 <bt_gatt_check_perm>
   217a2:	4604      	mov	r4, r0
   217a4:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   217a6:	b9a0      	cbnz	r0, 217d2 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   217a8:	e9cd 0000 	strd	r0, r0, [sp]
   217ac:	88ab      	ldrh	r3, [r5, #4]
   217ae:	68aa      	ldr	r2, [r5, #8]
   217b0:	4631      	mov	r1, r6
   217b2:	4640      	mov	r0, r8
   217b4:	f7ff feea 	bl	2158c <att_chan_read>
	if (ret < 0) {
   217b8:	1e03      	subs	r3, r0, #0
   217ba:	da0c      	bge.n	217d6 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   217bc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   217c0:	bf26      	itte	cs
   217c2:	425b      	negcs	r3, r3
   217c4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   217c6:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   217c8:	732b      	strb	r3, [r5, #12]
}
   217ca:	4620      	mov	r0, r4
   217cc:	b002      	add	sp, #8
   217ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   217d2:	463c      	mov	r4, r7
   217d4:	e7f9      	b.n	217ca <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   217d6:	2401      	movs	r4, #1
   217d8:	e7f7      	b.n	217ca <read_cb+0x44>

000217da <att_req_send_process>:
{
   217da:	b570      	push	{r4, r5, r6, lr}
   217dc:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   217de:	3004      	adds	r0, #4
   217e0:	f7ff fced 	bl	211be <sys_slist_get>
	if (!node) {
   217e4:	4605      	mov	r5, r0
   217e6:	b1a8      	cbz	r0, 21814 <att_req_send_process+0x3a>
	return list->head;
   217e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   217ea:	b138      	cbz	r0, 217fc <att_req_send_process+0x22>
	return node->next;
   217ec:	f850 69e4 	ldr.w	r6, [r0], #-228
   217f0:	b106      	cbz	r6, 217f4 <att_req_send_process+0x1a>
   217f2:	3ee4      	subs	r6, #228	; 0xe4
		if (!chan->req) {
   217f4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   217f8:	b13b      	cbz	r3, 2180a <att_req_send_process+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   217fa:	b966      	cbnz	r6, 21816 <att_req_send_process+0x3c>
	parent->next = child;
   217fc:	6863      	ldr	r3, [r4, #4]
   217fe:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   21800:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   21802:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   21804:	b933      	cbnz	r3, 21814 <att_req_send_process+0x3a>
	list->tail = node;
   21806:	60a5      	str	r5, [r4, #8]
}
   21808:	e004      	b.n	21814 <att_req_send_process+0x3a>
	return chan_req_send(chan, req);
   2180a:	4629      	mov	r1, r5
   2180c:	f7ff ff49 	bl	216a2 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21810:	2800      	cmp	r0, #0
   21812:	dbf2      	blt.n	217fa <att_req_send_process+0x20>
}
   21814:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   21816:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2181a:	b103      	cbz	r3, 2181e <att_req_send_process+0x44>
   2181c:	3be4      	subs	r3, #228	; 0xe4
{
   2181e:	4630      	mov	r0, r6
   21820:	461e      	mov	r6, r3
   21822:	e7e7      	b.n	217f4 <att_req_send_process+0x1a>

00021824 <bt_att_sent>:
{
   21824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   21826:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
	struct bt_att *att = chan->att;
   2182a:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   2182e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21830:	1f07      	subs	r7, r0, #4
	if (chan->sent) {
   21832:	b10b      	cbz	r3, 21838 <bt_att_sent+0x14>
		chan->sent(chan);
   21834:	4638      	mov	r0, r7
   21836:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21838:	f3bf 8f5b 	dmb	ish
   2183c:	f105 038c 	add.w	r3, r5, #140	; 0x8c
   21840:	e853 2f00 	ldrex	r2, [r3]
   21844:	f022 0210 	bic.w	r2, r2, #16
   21848:	e843 2100 	strex	r1, r2, [r3]
   2184c:	2900      	cmp	r1, #0
   2184e:	d1f7      	bne.n	21840 <bt_att_sent+0x1c>
   21850:	f3bf 8f5b 	dmb	ish
	if (!att) {
   21854:	b30c      	cbz	r4, 2189a <bt_att_sent+0x76>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   21856:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2185a:	b98b      	cbnz	r3, 21880 <bt_att_sent+0x5c>
   2185c:	6863      	ldr	r3, [r4, #4]
   2185e:	b17b      	cbz	r3, 21880 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21860:	1d20      	adds	r0, r4, #4
   21862:	f7ff fcac 	bl	211be <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   21866:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   21868:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2186a:	4638      	mov	r0, r7
   2186c:	f7ff ff19 	bl	216a2 <chan_req_send>
   21870:	2800      	cmp	r0, #0
   21872:	da12      	bge.n	2189a <bt_att_sent+0x76>
	parent->next = child;
   21874:	6863      	ldr	r3, [r4, #4]
   21876:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   21878:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2187a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2187c:	b903      	cbnz	r3, 21880 <bt_att_sent+0x5c>
	list->tail = node;
   2187e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   21880:	f105 0194 	add.w	r1, r5, #148	; 0x94
   21884:	4638      	mov	r0, r7
   21886:	f7ff ff27 	bl	216d8 <process_queue>
	if (!err) {
   2188a:	b130      	cbz	r0, 2189a <bt_att_sent+0x76>
	(void)process_queue(chan, &att->tx_queue);
   2188c:	f104 010c 	add.w	r1, r4, #12
   21890:	4638      	mov	r0, r7
}
   21892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   21896:	f7ff bf1f 	b.w	216d8 <process_queue>
}
   2189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002189c <chan_rsp_sent>:
   2189c:	3090      	adds	r0, #144	; 0x90
   2189e:	f3bf 8f5b 	dmb	ish
   218a2:	e850 3f00 	ldrex	r3, [r0]
   218a6:	f023 0301 	bic.w	r3, r3, #1
   218aa:	e840 3200 	strex	r2, r3, [r0]
   218ae:	2a00      	cmp	r2, #0
   218b0:	d1f7      	bne.n	218a2 <chan_rsp_sent+0x6>
   218b2:	f3bf 8f5b 	dmb	ish
}
   218b6:	4770      	bx	lr

000218b8 <bt_att_status>:
{
   218b8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   218ba:	f3bf 8f5b 	dmb	ish
   218be:	680b      	ldr	r3, [r1, #0]
   218c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   218c4:	07db      	lsls	r3, r3, #31
{
   218c6:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   218c8:	d518      	bpl.n	218fc <bt_att_status+0x44>
	if (!chan->att) {
   218ca:	f850 0c04 	ldr.w	r0, [r0, #-4]
   218ce:	b1a8      	cbz	r0, 218fc <bt_att_status+0x44>
	if (chan->req) {
   218d0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   218d4:	b993      	cbnz	r3, 218fc <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   218d6:	3004      	adds	r0, #4
   218d8:	f7ff fc71 	bl	211be <sys_slist_get>
	if (!node) {
   218dc:	4604      	mov	r4, r0
   218de:	b168      	cbz	r0, 218fc <bt_att_status+0x44>
	return chan_req_send(chan, req);
   218e0:	4601      	mov	r1, r0
   218e2:	1f28      	subs	r0, r5, #4
   218e4:	f7ff fedd 	bl	216a2 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   218e8:	2800      	cmp	r0, #0
   218ea:	da07      	bge.n	218fc <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   218ec:	f855 3c04 	ldr.w	r3, [r5, #-4]
	parent->next = child;
   218f0:	685a      	ldr	r2, [r3, #4]
   218f2:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   218f4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   218f6:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   218f8:	b902      	cbnz	r2, 218fc <bt_att_status+0x44>
	list->tail = node;
   218fa:	609c      	str	r4, [r3, #8]
}
   218fc:	bd38      	pop	{r3, r4, r5, pc}

000218fe <bt_att_chan_create_pdu>:
{
   218fe:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21900:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   21902:	3201      	adds	r2, #1
   21904:	429a      	cmp	r2, r3
{
   21906:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   21908:	d81b      	bhi.n	21942 <bt_att_chan_create_pdu+0x44>
	switch (att_op_get_type(op)) {
   2190a:	4608      	mov	r0, r1
   2190c:	f7ff fc81 	bl	21212 <att_op_get_type>
   21910:	2802      	cmp	r0, #2
   21912:	d001      	beq.n	21918 <bt_att_chan_create_pdu+0x1a>
   21914:	2804      	cmp	r0, #4
   21916:	d10f      	bne.n	21938 <bt_att_chan_create_pdu+0x3a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   21918:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2191c:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   2191e:	2100      	movs	r1, #0
   21920:	4608      	mov	r0, r1
   21922:	f7ff fbd9 	bl	210d8 <bt_l2cap_create_pdu_timeout>
   21926:	4604      	mov	r4, r0
	if (!buf) {
   21928:	b120      	cbz	r0, 21934 <bt_att_chan_create_pdu+0x36>
   2192a:	2101      	movs	r1, #1
   2192c:	3008      	adds	r0, #8
   2192e:	f000 fda1 	bl	22474 <net_buf_simple_add>
	hdr->code = op;
   21932:	7005      	strb	r5, [r0, #0]
}
   21934:	4620      	mov	r0, r4
   21936:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   21938:	f04f 32ff 	mov.w	r2, #4294967295
   2193c:	f04f 33ff 	mov.w	r3, #4294967295
   21940:	e7ed      	b.n	2191e <bt_att_chan_create_pdu+0x20>
		return NULL;
   21942:	2400      	movs	r4, #0
   21944:	e7f6      	b.n	21934 <bt_att_chan_create_pdu+0x36>

00021946 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2194a:	4688      	mov	r8, r1
   2194c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2194e:	2101      	movs	r1, #1
   21950:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   21952:	4605      	mov	r5, r0
   21954:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   21956:	f7ff ffd2 	bl	218fe <bt_att_chan_create_pdu>
	if (!buf) {
   2195a:	4604      	mov	r4, r0
   2195c:	b170      	cbz	r0, 2197c <send_err_rsp.part.0+0x36>
   2195e:	2104      	movs	r1, #4
   21960:	3008      	adds	r0, #8
   21962:	f000 fd87 	bl	22474 <net_buf_simple_add>
	rsp->request = req;
   21966:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2196a:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2196c:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21970:	4621      	mov	r1, r4
   21972:	4628      	mov	r0, r5
}
   21974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   21978:	f7f4 bb9e 	b.w	160b8 <bt_att_chan_send_rsp.constprop.0>
}
   2197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021980 <att_write_req>:
{
   21980:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21982:	460c      	mov	r4, r1
   21984:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   21986:	f101 0008 	add.w	r0, r1, #8
   2198a:	f000 fda2 	bl	224d2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2198e:	89a2      	ldrh	r2, [r4, #12]
   21990:	9201      	str	r2, [sp, #4]
   21992:	68a2      	ldr	r2, [r4, #8]
   21994:	9200      	str	r2, [sp, #0]
   21996:	4603      	mov	r3, r0
   21998:	2213      	movs	r2, #19
   2199a:	2112      	movs	r1, #18
   2199c:	4628      	mov	r0, r5
   2199e:	f7f4 fcd5 	bl	1634c <att_write_rsp.constprop.0>
}
   219a2:	b003      	add	sp, #12
   219a4:	bd30      	pop	{r4, r5, pc}

000219a6 <att_write_cmd>:
{
   219a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   219a8:	460c      	mov	r4, r1
   219aa:	4605      	mov	r5, r0
   219ac:	f101 0008 	add.w	r0, r1, #8
   219b0:	f000 fd8f 	bl	224d2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   219b4:	89a2      	ldrh	r2, [r4, #12]
   219b6:	9201      	str	r2, [sp, #4]
   219b8:	68a2      	ldr	r2, [r4, #8]
   219ba:	9200      	str	r2, [sp, #0]
   219bc:	2200      	movs	r2, #0
   219be:	4603      	mov	r3, r0
   219c0:	4611      	mov	r1, r2
   219c2:	4628      	mov	r0, r5
   219c4:	f7f4 fcc2 	bl	1634c <att_write_rsp.constprop.0>
}
   219c8:	b003      	add	sp, #12
   219ca:	bd30      	pop	{r4, r5, pc}

000219cc <bt_att_create_pdu>:
{
   219cc:	b570      	push	{r4, r5, r6, lr}
   219ce:	460e      	mov	r6, r1
   219d0:	4615      	mov	r5, r2
	att = att_get(conn);
   219d2:	f7ff fd42 	bl	2145a <att_get>
	if (!att) {
   219d6:	b158      	cbz	r0, 219f0 <bt_att_create_pdu+0x24>
	return list->head;
   219d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   219da:	b14b      	cbz	r3, 219f0 <bt_att_create_pdu+0x24>
   219dc:	4618      	mov	r0, r3
	return node->next;
   219de:	f850 39e4 	ldr.w	r3, [r0], #-228
   219e2:	b103      	cbz	r3, 219e6 <bt_att_create_pdu+0x1a>
   219e4:	3be4      	subs	r3, #228	; 0xe4
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   219e6:	1c6a      	adds	r2, r5, #1
   219e8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   219ea:	428a      	cmp	r2, r1
   219ec:	d902      	bls.n	219f4 <bt_att_create_pdu+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   219ee:	b93b      	cbnz	r3, 21a00 <bt_att_create_pdu+0x34>
}
   219f0:	2000      	movs	r0, #0
   219f2:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   219f4:	462a      	mov	r2, r5
   219f6:	4631      	mov	r1, r6
}
   219f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   219fc:	f7ff bf7f 	b.w	218fe <bt_att_chan_create_pdu>
   21a00:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21a04:	b104      	cbz	r4, 21a08 <bt_att_create_pdu+0x3c>
   21a06:	3ce4      	subs	r4, #228	; 0xe4
{
   21a08:	4618      	mov	r0, r3
   21a0a:	4623      	mov	r3, r4
   21a0c:	e7ec      	b.n	219e8 <bt_att_create_pdu+0x1c>

00021a0e <att_read_blob_req>:
{
   21a0e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   21a10:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   21a12:	8813      	ldrh	r3, [r2, #0]
   21a14:	8852      	ldrh	r2, [r2, #2]
   21a16:	9200      	str	r2, [sp, #0]
   21a18:	210c      	movs	r1, #12
   21a1a:	220d      	movs	r2, #13
   21a1c:	f7f4 fdd2 	bl	165c4 <att_read_rsp>
}
   21a20:	b003      	add	sp, #12
   21a22:	f85d fb04 	ldr.w	pc, [sp], #4

00021a26 <att_read_req>:
{
   21a26:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   21a28:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   21a2a:	2200      	movs	r2, #0
   21a2c:	881b      	ldrh	r3, [r3, #0]
   21a2e:	9200      	str	r2, [sp, #0]
   21a30:	210a      	movs	r1, #10
   21a32:	220b      	movs	r2, #11
   21a34:	f7f4 fdc6 	bl	165c4 <att_read_rsp>
}
   21a38:	b003      	add	sp, #12
   21a3a:	f85d fb04 	ldr.w	pc, [sp], #4

00021a3e <att_mtu_req>:
{
   21a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   21a40:	6803      	ldr	r3, [r0, #0]
{
   21a42:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   21a44:	6818      	ldr	r0, [r3, #0]
   21a46:	f3bf 8f5b 	dmb	ish
   21a4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   21a4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   21a52:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   21a56:	071b      	lsls	r3, r3, #28
   21a58:	d41b      	bmi.n	21a92 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   21a5a:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   21a5c:	881b      	ldrh	r3, [r3, #0]
   21a5e:	2b16      	cmp	r3, #22
   21a60:	d919      	bls.n	21a96 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   21a62:	2202      	movs	r2, #2
   21a64:	2103      	movs	r1, #3
   21a66:	f7ff ffb1 	bl	219cc <bt_att_create_pdu>
	if (!pdu) {
   21a6a:	4606      	mov	r6, r0
   21a6c:	b1a8      	cbz	r0, 21a9a <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   21a6e:	2102      	movs	r1, #2
   21a70:	3008      	adds	r0, #8
   21a72:	f000 fcff 	bl	22474 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   21a76:	2717      	movs	r7, #23
   21a78:	7007      	strb	r7, [r0, #0]
   21a7a:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   21a7c:	4631      	mov	r1, r6
   21a7e:	4620      	mov	r0, r4
   21a80:	f7f4 fb1a 	bl	160b8 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   21a84:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   21a86:	8367      	strh	r7, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   21a88:	8567      	strh	r7, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   21a8a:	f7ff fca6 	bl	213da <att_chan_mtu_updated>
	return 0;
   21a8e:	4628      	mov	r0, r5
}
   21a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   21a92:	2006      	movs	r0, #6
   21a94:	e7fc      	b.n	21a90 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   21a96:	2004      	movs	r0, #4
   21a98:	e7fa      	b.n	21a90 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   21a9a:	200e      	movs	r0, #14
   21a9c:	e7f8      	b.n	21a90 <att_mtu_req+0x52>

00021a9e <bt_att_init>:
	bt_gatt_init();
   21a9e:	f7f5 b84d 	b.w	16b3c <bt_gatt_init>

00021aa2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   21aa2:	898a      	ldrh	r2, [r1, #12]
   21aa4:	6889      	ldr	r1, [r1, #8]
   21aa6:	2300      	movs	r3, #0
   21aa8:	f7f4 bf12 	b.w	168d0 <att_handle_rsp>

00021aac <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   21aac:	38ac      	subs	r0, #172	; 0xac
   21aae:	f7f4 bf3f 	b.w	16930 <bt_att_disconnected>

00021ab2 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   21ab2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21ab6:	4607      	mov	r7, r0
   21ab8:	460d      	mov	r5, r1
   21aba:	4616      	mov	r6, r2
   21abc:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   21abe:	f7ff fccc 	bl	2145a <att_get>
	if (!att) {
   21ac2:	4604      	mov	r4, r0
   21ac4:	b938      	cbnz	r0, 21ad6 <bt_att_send+0x24>
		net_buf_unref(buf);
   21ac6:	4628      	mov	r0, r5
   21ac8:	f7f5 fcd8 	bl	1747c <net_buf_unref>
		return -ENOTCONN;
   21acc:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   21ad0:	b002      	add	sp, #8
   21ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   21ad6:	b146      	cbz	r6, 21aea <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   21ad8:	f8cd 8000 	str.w	r8, [sp]
   21adc:	4633      	mov	r3, r6
   21ade:	462a      	mov	r2, r5
   21ae0:	2104      	movs	r1, #4
   21ae2:	4638      	mov	r0, r7
   21ae4:	f7ff fafb 	bl	210de <bt_l2cap_send_cb>
   21ae8:	e7f2      	b.n	21ad0 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   21aea:	f100 060c 	add.w	r6, r0, #12
   21aee:	4629      	mov	r1, r5
   21af0:	4630      	mov	r0, r6
   21af2:	f000 fc8c 	bl	2240e <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   21af6:	2200      	movs	r2, #0
   21af8:	2300      	movs	r3, #0
   21afa:	4630      	mov	r0, r6
   21afc:	f000 fc20 	bl	22340 <net_buf_get>
	if (!buf) {
   21b00:	4605      	mov	r5, r0
   21b02:	b908      	cbnz	r0, 21b08 <bt_att_send+0x56>
	return 0;
   21b04:	2000      	movs	r0, #0
   21b06:	e7e3      	b.n	21ad0 <bt_att_send+0x1e>
	return list->head;
   21b08:	6a60      	ldr	r0, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b0a:	b188      	cbz	r0, 21b30 <bt_att_send+0x7e>
	return node->next;
   21b0c:	f850 49e4 	ldr.w	r4, [r0], #-228
   21b10:	b104      	cbz	r4, 21b14 <bt_att_send+0x62>
   21b12:	3ce4      	subs	r4, #228	; 0xe4
	return chan_send(chan, buf, cb);
   21b14:	2200      	movs	r2, #0
   21b16:	4629      	mov	r1, r5
   21b18:	f7f4 fa66 	bl	15fe8 <chan_send>
		if (err >= 0) {
   21b1c:	2800      	cmp	r0, #0
   21b1e:	daf1      	bge.n	21b04 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   21b20:	b134      	cbz	r4, 21b30 <bt_att_send+0x7e>
   21b22:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   21b26:	b103      	cbz	r3, 21b2a <bt_att_send+0x78>
   21b28:	3be4      	subs	r3, #228	; 0xe4
{
   21b2a:	4620      	mov	r0, r4
   21b2c:	461c      	mov	r4, r3
   21b2e:	e7f1      	b.n	21b14 <bt_att_send+0x62>
		k_queue_prepend(&att->tx_queue._queue, buf);
   21b30:	4629      	mov	r1, r5
   21b32:	4630      	mov	r0, r6
   21b34:	f001 f9d7 	bl	22ee6 <k_queue_prepend>
   21b38:	e7e4      	b.n	21b04 <bt_att_send+0x52>

00021b3a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   21b3a:	b510      	push	{r4, lr}
   21b3c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   21b3e:	f7ff fc8c 	bl	2145a <att_get>
	if (!att) {
   21b42:	b160      	cbz	r0, 21b5e <bt_att_req_send+0x24>
	parent->next = child;
   21b44:	2300      	movs	r3, #0
   21b46:	6023      	str	r3, [r4, #0]
	return list->tail;
   21b48:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   21b4a:	b92b      	cbnz	r3, 21b58 <bt_att_req_send+0x1e>
	list->head = node;
   21b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   21b50:	f7ff fe43 	bl	217da <att_req_send_process>

	return 0;
   21b54:	2000      	movs	r0, #0
}
   21b56:	bd10      	pop	{r4, pc}
	parent->next = child;
   21b58:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21b5a:	6084      	str	r4, [r0, #8]
}
   21b5c:	e7f8      	b.n	21b50 <bt_att_req_send+0x16>
		return -ENOTCONN;
   21b5e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21b62:	e7f8      	b.n	21b56 <bt_att_req_send+0x1c>

00021b64 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   21b64:	2001      	movs	r0, #1
   21b66:	4770      	bx	lr

00021b68 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   21b68:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   21b6a:	f7ff fc76 	bl	2145a <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   21b6e:	b198      	cbz	r0, 21b98 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   21b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21b72:	b18b      	cbz	r3, 21b98 <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21b74:	f3bf 8f5b 	dmb	ish
   21b78:	3be4      	subs	r3, #228	; 0xe4
   21b7a:	f103 0290 	add.w	r2, r3, #144	; 0x90
   21b7e:	e852 1f00 	ldrex	r1, [r2]
   21b82:	f021 0120 	bic.w	r1, r1, #32
   21b86:	e842 1000 	strex	r0, r1, [r2]
   21b8a:	2800      	cmp	r0, #0
   21b8c:	d1f7      	bne.n	21b7e <bt_att_clear_out_of_sync_sent+0x16>
   21b8e:	f3bf 8f5b 	dmb	ish
	return node->next;
   21b92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   21b96:	e7ec      	b.n	21b72 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   21b98:	bd08      	pop	{r3, pc}

00021b9a <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   21b9a:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21b9c:	2104      	movs	r1, #4
   21b9e:	f7ff fae8 	bl	21172 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   21ba2:	b138      	cbz	r0, 21bb4 <bt_att_out_of_sync_sent_on_fixed+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21ba4:	f3bf 8f5b 	dmb	ish
   21ba8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   21bac:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   21bb0:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   21bb4:	bd08      	pop	{r3, pc}

00021bb6 <gatt_ccc_changed>:
{
   21bb6:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   21bb8:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   21bba:	895a      	ldrh	r2, [r3, #10]
   21bbc:	428a      	cmp	r2, r1
   21bbe:	d003      	beq.n	21bc8 <gatt_ccc_changed+0x12>
		ccc->value = value;
   21bc0:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   21bc2:	68db      	ldr	r3, [r3, #12]
   21bc4:	b103      	cbz	r3, 21bc8 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   21bc6:	4718      	bx	r3
}
   21bc8:	4770      	bx	lr

00021bca <gatt_indicate_rsp>:
{
   21bca:	b510      	push	{r4, lr}
   21bcc:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   21bce:	68a3      	ldr	r3, [r4, #8]
{
   21bd0:	460a      	mov	r2, r1
	if (params->func) {
   21bd2:	b10b      	cbz	r3, 21bd8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   21bd4:	4621      	mov	r1, r4
   21bd6:	4798      	blx	r3
	params->_ref--;
   21bd8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21bda:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   21bdc:	3b01      	subs	r3, #1
   21bde:	b2db      	uxtb	r3, r3
   21be0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   21be2:	b122      	cbz	r2, 21bee <gatt_indicate_rsp+0x24>
   21be4:	b91b      	cbnz	r3, 21bee <gatt_indicate_rsp+0x24>
		params->destroy(params);
   21be6:	4620      	mov	r0, r4
}
   21be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   21bec:	4710      	bx	r2
}
   21bee:	bd10      	pop	{r4, pc}

00021bf0 <match_uuid>:
	data->attr = attr;
   21bf0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   21bf2:	8091      	strh	r1, [r2, #4]
}
   21bf4:	2000      	movs	r0, #0
   21bf6:	4770      	bx	lr

00021bf8 <write_name>:
{
   21bf8:	b570      	push	{r4, r5, r6, lr}
   21bfa:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21bfc:	2100      	movs	r1, #0
{
   21bfe:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21c02:	9101      	str	r1, [sp, #4]
{
   21c04:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21c06:	a802      	add	r0, sp, #8
   21c08:	223d      	movs	r2, #61	; 0x3d
{
   21c0a:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   21c0c:	f001 fdea 	bl	237e4 <memset>
	if (offset >= sizeof(value)) {
   21c10:	2d40      	cmp	r5, #64	; 0x40
   21c12:	d80e      	bhi.n	21c32 <write_name+0x3a>
	if (offset + len >= sizeof(value)) {
   21c14:	4425      	add	r5, r4
   21c16:	2d40      	cmp	r5, #64	; 0x40
   21c18:	dc0e      	bgt.n	21c38 <write_name+0x40>
	memcpy(value, buf, len);
   21c1a:	2341      	movs	r3, #65	; 0x41
   21c1c:	4622      	mov	r2, r4
   21c1e:	4631      	mov	r1, r6
   21c20:	a801      	add	r0, sp, #4
   21c22:	f001 fdcc 	bl	237be <__memcpy_chk>
	bt_set_name(value);
   21c26:	a801      	add	r0, sp, #4
   21c28:	f7f2 ff8a 	bl	14b40 <bt_set_name>
}
   21c2c:	4620      	mov	r0, r4
   21c2e:	b012      	add	sp, #72	; 0x48
   21c30:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21c32:	f06f 0406 	mvn.w	r4, #6
   21c36:	e7f9      	b.n	21c2c <write_name+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21c38:	f06f 040c 	mvn.w	r4, #12
   21c3c:	e7f6      	b.n	21c2c <write_name+0x34>

00021c3e <gen_hash_m>:
{
   21c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21c40:	6807      	ldr	r7, [r0, #0]
   21c42:	783d      	ldrb	r5, [r7, #0]
{
   21c44:	b089      	sub	sp, #36	; 0x24
   21c46:	4606      	mov	r6, r0
   21c48:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   21c4a:	b10d      	cbz	r5, 21c50 <gen_hash_m+0x12>
	switch (u16->val) {
   21c4c:	2501      	movs	r5, #1
   21c4e:	e014      	b.n	21c7a <gen_hash_m+0x3c>
   21c50:	887b      	ldrh	r3, [r7, #2]
   21c52:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   21c56:	d004      	beq.n	21c62 <gen_hash_m+0x24>
   21c58:	d812      	bhi.n	21c80 <gen_hash_m+0x42>
   21c5a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   21c5e:	2b03      	cmp	r3, #3
   21c60:	d8f4      	bhi.n	21c4c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21c62:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c66:	2202      	movs	r2, #2
   21c68:	f10d 010a 	add.w	r1, sp, #10
   21c6c:	4620      	mov	r0, r4
   21c6e:	f7fe fb3a 	bl	202e6 <tc_cmac_update>
   21c72:	b9e0      	cbnz	r0, 21cae <gen_hash_m+0x70>
			state->err = -EINVAL;
   21c74:	f06f 0315 	mvn.w	r3, #21
   21c78:	65a3      	str	r3, [r4, #88]	; 0x58
}
   21c7a:	4628      	mov	r0, r5
   21c7c:	b009      	add	sp, #36	; 0x24
   21c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   21c80:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   21c84:	33ff      	adds	r3, #255	; 0xff
   21c86:	b29b      	uxth	r3, r3
   21c88:	2b04      	cmp	r3, #4
   21c8a:	d8df      	bhi.n	21c4c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   21c8c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21c90:	2202      	movs	r2, #2
   21c92:	f10d 010a 	add.w	r1, sp, #10
   21c96:	4620      	mov	r0, r4
   21c98:	f7fe fb25 	bl	202e6 <tc_cmac_update>
   21c9c:	2800      	cmp	r0, #0
   21c9e:	d0e9      	beq.n	21c74 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   21ca0:	887b      	ldrh	r3, [r7, #2]
   21ca2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21ca6:	2202      	movs	r2, #2
   21ca8:	f10d 010a 	add.w	r1, sp, #10
   21cac:	e016      	b.n	21cdc <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   21cae:	887b      	ldrh	r3, [r7, #2]
   21cb0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21cb4:	2202      	movs	r2, #2
   21cb6:	f10d 010a 	add.w	r1, sp, #10
   21cba:	4620      	mov	r0, r4
   21cbc:	f7fe fb13 	bl	202e6 <tc_cmac_update>
   21cc0:	2800      	cmp	r0, #0
   21cc2:	d0d7      	beq.n	21c74 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   21cc4:	2000      	movs	r0, #0
   21cc6:	aa03      	add	r2, sp, #12
   21cc8:	6877      	ldr	r7, [r6, #4]
   21cca:	9000      	str	r0, [sp, #0]
   21ccc:	2313      	movs	r3, #19
   21cce:	4631      	mov	r1, r6
   21cd0:	47b8      	blx	r7
		if (len < 0) {
   21cd2:	1e02      	subs	r2, r0, #0
   21cd4:	da01      	bge.n	21cda <gen_hash_m+0x9c>
			state->err = len;
   21cd6:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   21cd8:	e7cf      	b.n	21c7a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   21cda:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   21cdc:	4620      	mov	r0, r4
   21cde:	f7fe fb02 	bl	202e6 <tc_cmac_update>
   21ce2:	2800      	cmp	r0, #0
   21ce4:	d1b2      	bne.n	21c4c <gen_hash_m+0xe>
   21ce6:	e7c5      	b.n	21c74 <gen_hash_m+0x36>

00021ce8 <bt_addr_le_copy>:
   21ce8:	680b      	ldr	r3, [r1, #0]
   21cea:	6003      	str	r3, [r0, #0]
   21cec:	888b      	ldrh	r3, [r1, #4]
   21cee:	8083      	strh	r3, [r0, #4]
   21cf0:	798b      	ldrb	r3, [r1, #6]
   21cf2:	7183      	strb	r3, [r0, #6]
}
   21cf4:	4770      	bx	lr

00021cf6 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   21cf6:	2300      	movs	r3, #0
   21cf8:	6003      	str	r3, [r0, #0]
   21cfa:	6043      	str	r3, [r0, #4]
   21cfc:	6083      	str	r3, [r0, #8]
}
   21cfe:	4770      	bx	lr

00021d00 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21d00:	b538      	push	{r3, r4, r5, lr}
   21d02:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   21d06:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   21d08:	460c      	mov	r4, r1
   21d0a:	4611      	mov	r1, r2
	if (offset > value_len) {
   21d0c:	d30a      	bcc.n	21d24 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   21d0e:	1aad      	subs	r5, r5, r2
   21d10:	42a5      	cmp	r5, r4
   21d12:	bfa8      	it	ge
   21d14:	4625      	movge	r5, r4
   21d16:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21d18:	462a      	mov	r2, r5
   21d1a:	4419      	add	r1, r3
   21d1c:	f001 fd41 	bl	237a2 <memcpy>
}
   21d20:	4628      	mov	r0, r5
   21d22:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21d24:	f06f 0506 	mvn.w	r5, #6
   21d28:	e7fa      	b.n	21d20 <bt_gatt_attr_read.constprop.0+0x20>

00021d2a <bt_gatt_attr_read_service>:
{
   21d2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21d2c:	460c      	mov	r4, r1
   21d2e:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   21d30:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   21d32:	781c      	ldrb	r4, [r3, #0]
{
   21d34:	4610      	mov	r0, r2
   21d36:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   21d3a:	b13c      	cbz	r4, 21d4c <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21d3c:	2410      	movs	r4, #16
   21d3e:	3301      	adds	r3, #1
   21d40:	9406      	str	r4, [sp, #24]
}
   21d42:	b004      	add	sp, #16
   21d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21d48:	f7ff bfda 	b.w	21d00 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   21d4c:	885b      	ldrh	r3, [r3, #2]
   21d4e:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   21d52:	2302      	movs	r3, #2
   21d54:	9300      	str	r3, [sp, #0]
   21d56:	f10d 030e 	add.w	r3, sp, #14
   21d5a:	f7ff ffd1 	bl	21d00 <bt_gatt_attr_read.constprop.0>
}
   21d5e:	b004      	add	sp, #16
   21d60:	bd10      	pop	{r4, pc}

00021d62 <cf_read>:
{
   21d62:	b530      	push	{r4, r5, lr}
   21d64:	b085      	sub	sp, #20
   21d66:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   21d68:	2300      	movs	r3, #0
{
   21d6a:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   21d6c:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   21d70:	f7f4 fe36 	bl	169e0 <find_cf_cfg>
	if (cfg) {
   21d74:	b110      	cbz	r0, 21d7c <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   21d76:	7a03      	ldrb	r3, [r0, #8]
   21d78:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   21d7c:	2301      	movs	r3, #1
   21d7e:	9300      	str	r3, [sp, #0]
   21d80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21d84:	ab03      	add	r3, sp, #12
   21d86:	4629      	mov	r1, r5
   21d88:	4620      	mov	r0, r4
   21d8a:	f7ff ffb9 	bl	21d00 <bt_gatt_attr_read.constprop.0>
}
   21d8e:	b005      	add	sp, #20
   21d90:	bd30      	pop	{r4, r5, pc}

00021d92 <read_name>:
{
   21d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d96:	4614      	mov	r4, r2
   21d98:	461d      	mov	r5, r3
   21d9a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   21d9e:	f7f2 ff59 	bl	14c54 <bt_get_name>
   21da2:	4606      	mov	r6, r0
				 strlen(name));
   21da4:	f7ea fe47 	bl	ca36 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21da8:	b280      	uxth	r0, r0
   21daa:	9006      	str	r0, [sp, #24]
   21dac:	4633      	mov	r3, r6
   21dae:	463a      	mov	r2, r7
   21db0:	4629      	mov	r1, r5
   21db2:	4620      	mov	r0, r4
}
   21db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   21db8:	f7ff bfa2 	b.w	21d00 <bt_gatt_attr_read.constprop.0>

00021dbc <read_appearance>:
{
   21dbc:	b530      	push	{r4, r5, lr}
   21dbe:	b085      	sub	sp, #20
   21dc0:	4614      	mov	r4, r2
   21dc2:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21dc4:	f7fe fe39 	bl	20a3a <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21dc8:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   21dca:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   21dce:	9300      	str	r3, [sp, #0]
   21dd0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21dd4:	f10d 030e 	add.w	r3, sp, #14
   21dd8:	4629      	mov	r1, r5
   21dda:	4620      	mov	r0, r4
   21ddc:	f7ff ff90 	bl	21d00 <bt_gatt_attr_read.constprop.0>
}
   21de0:	b005      	add	sp, #20
   21de2:	bd30      	pop	{r4, r5, pc}

00021de4 <read_ppcp>:
{
   21de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21de6:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   21de8:	2318      	movs	r3, #24
   21dea:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   21dee:	2328      	movs	r3, #40	; 0x28
   21df0:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   21df4:	2300      	movs	r3, #0
   21df6:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   21dfa:	232a      	movs	r3, #42	; 0x2a
   21dfc:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   21e00:	2308      	movs	r3, #8
   21e02:	9300      	str	r3, [sp, #0]
{
   21e04:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   21e06:	446b      	add	r3, sp
   21e08:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21e0c:	f7ff ff78 	bl	21d00 <bt_gatt_attr_read.constprop.0>
}
   21e10:	b005      	add	sp, #20
   21e12:	f85d fb04 	ldr.w	pc, [sp], #4

00021e16 <clear_cf_cfg>:
{
   21e16:	b513      	push	{r0, r1, r4, lr}
   21e18:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21e1a:	2400      	movs	r4, #0
   21e1c:	4669      	mov	r1, sp
   21e1e:	3001      	adds	r0, #1
   21e20:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21e22:	320c      	adds	r2, #12
   21e24:	f8cd 4003 	str.w	r4, [sp, #3]
   21e28:	f7ff ff5e 	bl	21ce8 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   21e2c:	f802 4c04 	strb.w	r4, [r2, #-4]
   21e30:	f3bf 8f5b 	dmb	ish
   21e34:	e852 3f00 	ldrex	r3, [r2]
   21e38:	e842 4100 	strex	r1, r4, [r2]
   21e3c:	2900      	cmp	r1, #0
   21e3e:	d1f9      	bne.n	21e34 <clear_cf_cfg+0x1e>
   21e40:	f3bf 8f5b 	dmb	ish
}
   21e44:	b002      	add	sp, #8
   21e46:	bd10      	pop	{r4, pc}

00021e48 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   21e48:	2301      	movs	r3, #1
   21e4a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21e4c:	f3bf 8f5b 	dmb	ish
   21e50:	e850 2f00 	ldrex	r2, [r0]
   21e54:	431a      	orrs	r2, r3
   21e56:	e840 2100 	strex	r1, r2, [r0]
   21e5a:	2900      	cmp	r1, #0
   21e5c:	d1f8      	bne.n	21e50 <atomic_set_bit+0x8>
   21e5e:	f3bf 8f5b 	dmb	ish
}
   21e62:	4770      	bx	lr

00021e64 <cf_write>:
{
   21e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e68:	4698      	mov	r8, r3
   21e6a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   21e6e:	2b01      	cmp	r3, #1
{
   21e70:	4606      	mov	r6, r0
   21e72:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   21e74:	d830      	bhi.n	21ed8 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   21e76:	4443      	add	r3, r8
   21e78:	2b01      	cmp	r3, #1
   21e7a:	4645      	mov	r5, r8
   21e7c:	dc2f      	bgt.n	21ede <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   21e7e:	f7f4 fdaf 	bl	169e0 <find_cf_cfg>
	if (!cfg) {
   21e82:	4604      	mov	r4, r0
   21e84:	b918      	cbnz	r0, 21e8e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   21e86:	f7f4 fdab 	bl	169e0 <find_cf_cfg>
	if (!cfg) {
   21e8a:	4604      	mov	r4, r0
   21e8c:	b350      	cbz	r0, 21ee4 <cf_write+0x80>
{
   21e8e:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21e90:	f1b8 0f00 	cmp.w	r8, #0
   21e94:	d10e      	bne.n	21eb4 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   21e96:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21e9a:	1c60      	adds	r0, r4, #1
   21e9c:	f7ff ff24 	bl	21ce8 <bt_addr_le_copy>
	cfg->id = conn->id;
   21ea0:	4620      	mov	r0, r4
   21ea2:	7a33      	ldrb	r3, [r6, #8]
   21ea4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   21ea8:	2100      	movs	r1, #0
   21eaa:	f7ff ffcd 	bl	21e48 <atomic_set_bit>
}
   21eae:	4628      	mov	r0, r5
   21eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21eb4:	7a20      	ldrb	r0, [r4, #8]
   21eb6:	fa20 f301 	lsr.w	r3, r0, r1
   21eba:	07da      	lsls	r2, r3, #31
   21ebc:	d503      	bpl.n	21ec6 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   21ebe:	783b      	ldrb	r3, [r7, #0]
   21ec0:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   21ec2:	07db      	lsls	r3, r3, #31
   21ec4:	d511      	bpl.n	21eea <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   21ec6:	3101      	adds	r1, #1
   21ec8:	2903      	cmp	r1, #3
   21eca:	d1e1      	bne.n	21e90 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   21ecc:	783b      	ldrb	r3, [r7, #0]
   21ece:	f003 0307 	and.w	r3, r3, #7
   21ed2:	4318      	orrs	r0, r3
   21ed4:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   21ed6:	e7de      	b.n	21e96 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21ed8:	f06f 0506 	mvn.w	r5, #6
   21edc:	e7e7      	b.n	21eae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21ede:	f06f 050c 	mvn.w	r5, #12
   21ee2:	e7e4      	b.n	21eae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21ee4:	f06f 0510 	mvn.w	r5, #16
   21ee8:	e7e1      	b.n	21eae <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   21eea:	f06f 0512 	mvn.w	r5, #18
   21eee:	e7de      	b.n	21eae <cf_write+0x4a>

00021ef0 <find_ccc_cfg>:
{
   21ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21ef2:	460c      	mov	r4, r1
						    &cfg->peer)) {
   21ef4:	1c4d      	adds	r5, r1, #1
		if (conn) {
   21ef6:	b148      	cbz	r0, 21f0c <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   21ef8:	7809      	ldrb	r1, [r1, #0]
   21efa:	462a      	mov	r2, r5
   21efc:	f7ff f813 	bl	20f26 <bt_conn_is_peer_addr_le>
	return NULL;
   21f00:	2800      	cmp	r0, #0
   21f02:	bf08      	it	eq
   21f04:	2400      	moveq	r4, #0
}
   21f06:	4620      	mov	r0, r4
   21f08:	b003      	add	sp, #12
   21f0a:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   21f0c:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   21f0e:	2207      	movs	r2, #7
   21f10:	f8cd 0003 	str.w	r0, [sp, #3]
   21f14:	4669      	mov	r1, sp
   21f16:	4628      	mov	r0, r5
   21f18:	f001 fc33 	bl	23782 <memcmp>
	return NULL;
   21f1c:	2800      	cmp	r0, #0
   21f1e:	bf18      	it	ne
   21f20:	2400      	movne	r4, #0
   21f22:	e7f0      	b.n	21f06 <find_ccc_cfg+0x16>

00021f24 <bt_gatt_attr_write_ccc>:
{
   21f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21f28:	461f      	mov	r7, r3
   21f2a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   21f2e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   21f32:	4606      	mov	r6, r0
   21f34:	4688      	mov	r8, r1
	if (offset) {
   21f36:	2b00      	cmp	r3, #0
   21f38:	d141      	bne.n	21fbe <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   21f3a:	1e7b      	subs	r3, r7, #1
   21f3c:	2b01      	cmp	r3, #1
   21f3e:	d841      	bhi.n	21fc4 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   21f40:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   21f42:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   21f44:	4649      	mov	r1, r9
   21f46:	bf14      	ite	ne
   21f48:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   21f4a:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   21f4c:	f7ff ffd0 	bl	21ef0 <find_ccc_cfg>
	if (!cfg) {
   21f50:	4604      	mov	r4, r0
   21f52:	b980      	cbnz	r0, 21f76 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   21f54:	b91d      	cbnz	r5, 21f5e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   21f56:	4638      	mov	r0, r7
}
   21f58:	b003      	add	sp, #12
   21f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   21f5e:	4649      	mov	r1, r9
   21f60:	f7ff ffc6 	bl	21ef0 <find_ccc_cfg>
		if (!cfg) {
   21f64:	4604      	mov	r4, r0
   21f66:	b380      	cbz	r0, 21fca <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   21f68:	f106 0188 	add.w	r1, r6, #136	; 0x88
   21f6c:	3001      	adds	r0, #1
   21f6e:	f7ff febb 	bl	21ce8 <bt_addr_le_copy>
		cfg->id = conn->id;
   21f72:	7a33      	ldrb	r3, [r6, #8]
   21f74:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   21f76:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21f7a:	b9a3      	cbnz	r3, 21fa6 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   21f7c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   21f80:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   21f82:	42ab      	cmp	r3, r5
   21f84:	d003      	beq.n	21f8e <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   21f86:	4649      	mov	r1, r9
   21f88:	4640      	mov	r0, r8
   21f8a:	f7ff fe14 	bl	21bb6 <gatt_ccc_changed>
	if (!value) {
   21f8e:	2d00      	cmp	r5, #0
   21f90:	d1e1      	bne.n	21f56 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   21f92:	4669      	mov	r1, sp
   21f94:	1c60      	adds	r0, r4, #1
   21f96:	9500      	str	r5, [sp, #0]
   21f98:	f8cd 5003 	str.w	r5, [sp, #3]
   21f9c:	f7ff fea4 	bl	21ce8 <bt_addr_le_copy>
	cfg->id = 0U;
   21fa0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   21fa2:	8125      	strh	r5, [r4, #8]
}
   21fa4:	e7d7      	b.n	21f56 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   21fa6:	462a      	mov	r2, r5
   21fa8:	4641      	mov	r1, r8
   21faa:	4630      	mov	r0, r6
   21fac:	4798      	blx	r3
		if (write < 0) {
   21fae:	2800      	cmp	r0, #0
   21fb0:	dbd2      	blt.n	21f58 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   21fb2:	3801      	subs	r0, #1
   21fb4:	2801      	cmp	r0, #1
   21fb6:	d9e1      	bls.n	21f7c <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   21fb8:	f06f 000d 	mvn.w	r0, #13
   21fbc:	e7cc      	b.n	21f58 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   21fbe:	f06f 0006 	mvn.w	r0, #6
   21fc2:	e7c9      	b.n	21f58 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   21fc4:	f06f 000c 	mvn.w	r0, #12
   21fc8:	e7c6      	b.n	21f58 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   21fca:	f06f 0010 	mvn.w	r0, #16
   21fce:	e7c3      	b.n	21f58 <bt_gatt_attr_write_ccc+0x34>

00021fd0 <bt_gatt_attr_read_ccc>:
{
   21fd0:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   21fd2:	68c9      	ldr	r1, [r1, #12]
{
   21fd4:	b085      	sub	sp, #20
   21fd6:	4614      	mov	r4, r2
   21fd8:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   21fda:	f7ff ff89 	bl	21ef0 <find_ccc_cfg>
	if (cfg) {
   21fde:	b100      	cbz	r0, 21fe2 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   21fe0:	8900      	ldrh	r0, [r0, #8]
   21fe2:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   21fe6:	2302      	movs	r3, #2
   21fe8:	9300      	str	r3, [sp, #0]
   21fea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21fee:	f10d 030e 	add.w	r3, sp, #14
   21ff2:	4629      	mov	r1, r5
   21ff4:	4620      	mov	r0, r4
   21ff6:	f7ff fe83 	bl	21d00 <bt_gatt_attr_read.constprop.0>
}
   21ffa:	b005      	add	sp, #20
   21ffc:	bd30      	pop	{r4, r5, pc}

00021ffe <sc_save>:
{
   21ffe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22002:	4680      	mov	r8, r0
   22004:	460f      	mov	r7, r1
   22006:	4616      	mov	r6, r2
   22008:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   2200a:	f7f4 fd07 	bl	16a1c <find_sc_cfg>
	if (!cfg) {
   2200e:	4604      	mov	r4, r0
   22010:	b960      	cbnz	r0, 2202c <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   22012:	4669      	mov	r1, sp
   22014:	9000      	str	r0, [sp, #0]
   22016:	f8cd 0003 	str.w	r0, [sp, #3]
   2201a:	f7f4 fcff 	bl	16a1c <find_sc_cfg>
		if (!cfg) {
   2201e:	4604      	mov	r4, r0
   22020:	b178      	cbz	r0, 22042 <sc_save+0x44>
		cfg->id = id;
   22022:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   22026:	4639      	mov	r1, r7
   22028:	f7ff fe5e 	bl	21ce8 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   2202c:	8922      	ldrh	r2, [r4, #8]
   2202e:	8963      	ldrh	r3, [r4, #10]
   22030:	b91a      	cbnz	r2, 2203a <sc_save+0x3c>
   22032:	b923      	cbnz	r3, 2203e <sc_save+0x40>
		cfg->data.start = start;
   22034:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   22036:	8165      	strh	r5, [r4, #10]
   22038:	e003      	b.n	22042 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   2203a:	4296      	cmp	r6, r2
   2203c:	d304      	bcc.n	22048 <sc_save+0x4a>
   2203e:	429d      	cmp	r5, r3
   22040:	d8f9      	bhi.n	22036 <sc_save+0x38>
}
   22042:	b002      	add	sp, #8
   22044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   22048:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   2204a:	e7f8      	b.n	2203e <sc_save+0x40>

0002204c <sc_clear>:
{
   2204c:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2204e:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   22052:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22054:	4629      	mov	r1, r5
   22056:	7a00      	ldrb	r0, [r0, #8]
   22058:	f7fe fcf1 	bl	20a3e <bt_addr_le_is_bonded>
   2205c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2205e:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   22060:	f7f4 fcdc 	bl	16a1c <find_sc_cfg>
		if (cfg) {
   22064:	b118      	cbz	r0, 2206e <sc_clear+0x22>
}
   22066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2206a:	f7ff be44 	b.w	21cf6 <clear_sc_cfg>
}
   2206e:	bd38      	pop	{r3, r4, r5, pc}

00022070 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   22070:	2a02      	cmp	r2, #2
{
   22072:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22074:	d108      	bne.n	22088 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22076:	2300      	movs	r3, #0
   22078:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2207c:	461a      	mov	r2, r3
   2207e:	7a00      	ldrb	r0, [r0, #8]
   22080:	f7ff ffbd 	bl	21ffe <sc_save>
}
   22084:	2002      	movs	r0, #2
   22086:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   22088:	f7ff ffe0 	bl	2204c <sc_clear>
   2208c:	e7fa      	b.n	22084 <sc_ccc_cfg_write+0x14>

0002208e <sc_restore_rsp>:
{
   2208e:	b538      	push	{r3, r4, r5, lr}
   22090:	4604      	mov	r4, r0
   22092:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   22094:	f7ff fd66 	bl	21b64 <bt_att_fixed_chan_only>
   22098:	b150      	cbz	r0, 220b0 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2209a:	4620      	mov	r0, r4
   2209c:	f7f4 fca0 	bl	169e0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   220a0:	b130      	cbz	r0, 220b0 <sc_restore_rsp+0x22>
   220a2:	7a03      	ldrb	r3, [r0, #8]
   220a4:	07db      	lsls	r3, r3, #31
   220a6:	d503      	bpl.n	220b0 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   220a8:	2100      	movs	r1, #0
   220aa:	300c      	adds	r0, #12
   220ac:	f7ff fecc 	bl	21e48 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   220b0:	b935      	cbnz	r5, 220c0 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   220b2:	7a20      	ldrb	r0, [r4, #8]
   220b4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   220b8:	f7f4 fcb0 	bl	16a1c <find_sc_cfg>
		if (sc_cfg) {
   220bc:	b100      	cbz	r0, 220c0 <sc_restore_rsp+0x32>
   220be:	6085      	str	r5, [r0, #8]
}
   220c0:	bd38      	pop	{r3, r4, r5, pc}

000220c2 <bt_gatt_attr_read>:
{
   220c2:	b538      	push	{r3, r4, r5, lr}
   220c4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   220c8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   220cc:	428d      	cmp	r5, r1
{
   220ce:	4610      	mov	r0, r2
	if (offset > value_len) {
   220d0:	d30b      	bcc.n	220ea <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   220d2:	1a6d      	subs	r5, r5, r1
   220d4:	429d      	cmp	r5, r3
   220d6:	bfa8      	it	ge
   220d8:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   220da:	9b05      	ldr	r3, [sp, #20]
   220dc:	b2ad      	uxth	r5, r5
   220de:	462a      	mov	r2, r5
   220e0:	4419      	add	r1, r3
   220e2:	f001 fb5e 	bl	237a2 <memcpy>
}
   220e6:	4628      	mov	r0, r5
   220e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   220ea:	f06f 0506 	mvn.w	r5, #6
   220ee:	e7fa      	b.n	220e6 <bt_gatt_attr_read+0x24>

000220f0 <bt_gatt_attr_value_handle>:
{
   220f0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   220f2:	4604      	mov	r4, r0
   220f4:	b910      	cbnz	r0, 220fc <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   220f6:	2000      	movs	r0, #0
}
   220f8:	b002      	add	sp, #8
   220fa:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   220fc:	2300      	movs	r3, #0
   220fe:	f88d 3004 	strb.w	r3, [sp, #4]
   22102:	6800      	ldr	r0, [r0, #0]
   22104:	f642 0303 	movw	r3, #10243	; 0x2803
   22108:	a901      	add	r1, sp, #4
   2210a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2210e:	f7fe f9b6 	bl	2047e <bt_uuid_cmp>
   22112:	2800      	cmp	r0, #0
   22114:	d1ef      	bne.n	220f6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   22116:	68e3      	ldr	r3, [r4, #12]
   22118:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2211a:	2800      	cmp	r0, #0
   2211c:	d1ec      	bne.n	220f8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2211e:	4620      	mov	r0, r4
   22120:	f7f4 fd62 	bl	16be8 <bt_gatt_attr_get_handle>
   22124:	3001      	adds	r0, #1
   22126:	b280      	uxth	r0, r0
	return handle;
   22128:	e7e6      	b.n	220f8 <bt_gatt_attr_value_handle+0x8>

0002212a <bt_gatt_attr_read_chrc>:
{
   2212a:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2212c:	68cc      	ldr	r4, [r1, #12]
{
   2212e:	b088      	sub	sp, #32
   22130:	4608      	mov	r0, r1
   22132:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   22134:	79a3      	ldrb	r3, [r4, #6]
   22136:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2213a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2213c:	f7ff ffd8 	bl	220f0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22140:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   22142:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   22146:	7823      	ldrb	r3, [r4, #0]
   22148:	b96b      	cbnz	r3, 22166 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2214a:	8863      	ldrh	r3, [r4, #2]
   2214c:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   22150:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   22152:	9300      	str	r3, [sp, #0]
   22154:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   22158:	ab03      	add	r3, sp, #12
   2215a:	4631      	mov	r1, r6
   2215c:	4628      	mov	r0, r5
   2215e:	f7ff fdcf 	bl	21d00 <bt_gatt_attr_read.constprop.0>
}
   22162:	b008      	add	sp, #32
   22164:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   22166:	1c63      	adds	r3, r4, #1
   22168:	f10d 020f 	add.w	r2, sp, #15
   2216c:	3411      	adds	r4, #17
   2216e:	f853 1b04 	ldr.w	r1, [r3], #4
   22172:	f842 1b04 	str.w	r1, [r2], #4
   22176:	42a3      	cmp	r3, r4
   22178:	d1f9      	bne.n	2216e <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2217a:	2313      	movs	r3, #19
   2217c:	e7e9      	b.n	22152 <bt_gatt_attr_read_chrc+0x28>

0002217e <bt_gatt_foreach_attr>:
{
   2217e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22180:	e9cd 2301 	strd	r2, r3, [sp, #4]
   22184:	2300      	movs	r3, #0
   22186:	9300      	str	r3, [sp, #0]
   22188:	461a      	mov	r2, r3
   2218a:	f7f4 fd5d 	bl	16c48 <bt_gatt_foreach_attr_type>
}
   2218e:	b005      	add	sp, #20
   22190:	f85d fb04 	ldr.w	pc, [sp], #4

00022194 <db_hash_process>:
	db_hash_gen(true);
   22194:	f7f4 bdb2 	b.w	16cfc <db_hash_gen.constprop.0>

00022198 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   22198:	07d3      	lsls	r3, r2, #31
{
   2219a:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2219c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2219e:	d504      	bpl.n	221aa <bt_gatt_check_perm+0x12>
   221a0:	f014 0f15 	tst.w	r4, #21
   221a4:	d017      	beq.n	221d6 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   221a6:	684b      	ldr	r3, [r1, #4]
   221a8:	b1ab      	cbz	r3, 221d6 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   221aa:	0793      	lsls	r3, r2, #30
   221ac:	d504      	bpl.n	221b8 <bt_gatt_check_perm+0x20>
   221ae:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   221b2:	d012      	beq.n	221da <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   221b4:	688b      	ldr	r3, [r1, #8]
   221b6:	b183      	cbz	r3, 221da <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   221b8:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   221ba:	f014 0f30 	tst.w	r4, #48	; 0x30
   221be:	d104      	bne.n	221ca <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   221c0:	f014 000c 	ands.w	r0, r4, #12
   221c4:	bf18      	it	ne
   221c6:	200f      	movne	r0, #15
}
   221c8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   221ca:	f7fe feaa 	bl	20f22 <bt_conn_get_security>
   221ce:	2802      	cmp	r0, #2
   221d0:	d8f6      	bhi.n	221c0 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   221d2:	2005      	movs	r0, #5
   221d4:	e7f8      	b.n	221c8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   221d6:	2002      	movs	r0, #2
   221d8:	e7f6      	b.n	221c8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   221da:	2003      	movs	r0, #3
   221dc:	e7f4      	b.n	221c8 <bt_gatt_check_perm+0x30>

000221de <gatt_notify>:
{
   221de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   221e2:	4614      	mov	r4, r2
   221e4:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   221e6:	2214      	movs	r2, #20
   221e8:	6861      	ldr	r1, [r4, #4]
{
   221ea:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   221ec:	f7ff ffd4 	bl	22198 <bt_gatt_check_perm>
   221f0:	bb08      	cbnz	r0, 22236 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   221f2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   221f4:	211b      	movs	r1, #27
   221f6:	3202      	adds	r2, #2
   221f8:	4638      	mov	r0, r7
   221fa:	f7ff fbe7 	bl	219cc <bt_att_create_pdu>
	if (!buf) {
   221fe:	4605      	mov	r5, r0
   22200:	b1e8      	cbz	r0, 2223e <gatt_notify+0x60>
   22202:	f100 0908 	add.w	r9, r0, #8
   22206:	2102      	movs	r1, #2
   22208:	4648      	mov	r0, r9
   2220a:	f000 f933 	bl	22474 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   2220e:	4606      	mov	r6, r0
   22210:	89a1      	ldrh	r1, [r4, #12]
   22212:	f826 8b02 	strh.w	r8, [r6], #2
   22216:	4648      	mov	r0, r9
   22218:	f000 f92c 	bl	22474 <net_buf_simple_add>
   2221c:	89a2      	ldrh	r2, [r4, #12]
   2221e:	68a1      	ldr	r1, [r4, #8]
   22220:	4630      	mov	r0, r6
   22222:	f001 fabe 	bl	237a2 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   22226:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   2222a:	4629      	mov	r1, r5
   2222c:	4638      	mov	r0, r7
}
   2222e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   22232:	f7ff bc3e 	b.w	21ab2 <bt_att_send>
		return -EPERM;
   22236:	f04f 30ff 	mov.w	r0, #4294967295
}
   2223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   2223e:	f06f 000b 	mvn.w	r0, #11
   22242:	e7fa      	b.n	2223a <gatt_notify+0x5c>

00022244 <bt_gatt_change_aware>:
{
   22244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22248:	4606      	mov	r6, r0
   2224a:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2224c:	f7f4 fbc8 	bl	169e0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   22250:	b918      	cbnz	r0, 2225a <bt_gatt_change_aware+0x16>
		return true;
   22252:	2401      	movs	r4, #1
}
   22254:	4620      	mov	r0, r4
   22256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2225a:	7a03      	ldrb	r3, [r0, #8]
   2225c:	07db      	lsls	r3, r3, #31
   2225e:	d5f8      	bpl.n	22252 <bt_gatt_change_aware+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22260:	f3bf 8f5b 	dmb	ish
   22264:	68c1      	ldr	r1, [r0, #12]
   22266:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2226a:	f011 0801 	ands.w	r8, r1, #1
   2226e:	f100 050c 	add.w	r5, r0, #12
   22272:	d1ee      	bne.n	22252 <bt_gatt_change_aware+0xe>
	if (!req) {
   22274:	b90c      	cbnz	r4, 2227a <bt_gatt_change_aware+0x36>
		return false;
   22276:	2400      	movs	r4, #0
   22278:	e7ec      	b.n	22254 <bt_gatt_change_aware+0x10>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2227a:	f3bf 8f5b 	dmb	ish
   2227e:	e855 3f00 	ldrex	r3, [r5]
   22282:	f023 0202 	bic.w	r2, r3, #2
   22286:	e845 2100 	strex	r1, r2, [r5]
   2228a:	2900      	cmp	r1, #0
   2228c:	d1f7      	bne.n	2227e <bt_gatt_change_aware+0x3a>
   2228e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   22292:	f013 0702 	ands.w	r7, r3, #2
		bt_att_clear_out_of_sync_sent(conn);
   22296:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   22298:	d006      	beq.n	222a8 <bt_gatt_change_aware+0x64>
		bt_att_clear_out_of_sync_sent(conn);
   2229a:	f7ff fc65 	bl	21b68 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2229e:	4641      	mov	r1, r8
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   222a0:	4628      	mov	r0, r5
   222a2:	f7ff fdd1 	bl	21e48 <atomic_set_bit>
		return true;
   222a6:	e7d5      	b.n	22254 <bt_gatt_change_aware+0x10>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   222a8:	f7ff fc5c 	bl	21b64 <bt_att_fixed_chan_only>
   222ac:	2800      	cmp	r0, #0
   222ae:	d0e2      	beq.n	22276 <bt_gatt_change_aware+0x32>
   222b0:	4630      	mov	r0, r6
   222b2:	f7ff fc72 	bl	21b9a <bt_att_out_of_sync_sent_on_fixed>
   222b6:	4604      	mov	r4, r0
   222b8:	2800      	cmp	r0, #0
   222ba:	d0dc      	beq.n	22276 <bt_gatt_change_aware+0x32>
   222bc:	f3bf 8f5b 	dmb	ish
   222c0:	e855 3f00 	ldrex	r3, [r5]
   222c4:	f023 0302 	bic.w	r3, r3, #2
   222c8:	e845 3200 	strex	r2, r3, [r5]
   222cc:	2a00      	cmp	r2, #0
   222ce:	d1f7      	bne.n	222c0 <bt_gatt_change_aware+0x7c>
   222d0:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   222d4:	4630      	mov	r0, r6
   222d6:	f7ff fc47 	bl	21b68 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   222da:	4639      	mov	r1, r7
   222dc:	e7e0      	b.n	222a0 <bt_gatt_change_aware+0x5c>

000222de <bt_smp_recv>:
{
   222de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   222e0:	2100      	movs	r1, #0
   222e2:	f04f 32ff 	mov.w	r2, #4294967295
   222e6:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   222ea:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   222ec:	4608      	mov	r0, r1
   222ee:	f7fe fef3 	bl	210d8 <bt_l2cap_create_pdu_timeout>
   222f2:	f100 0608 	add.w	r6, r0, #8
   222f6:	4604      	mov	r4, r0
   222f8:	2101      	movs	r1, #1
   222fa:	4630      	mov	r0, r6
   222fc:	f000 f8ba 	bl	22474 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   22300:	2505      	movs	r5, #5
   22302:	7005      	strb	r5, [r0, #0]
   22304:	2101      	movs	r1, #1
   22306:	4630      	mov	r0, r6
   22308:	f000 f8b4 	bl	22474 <net_buf_simple_add>
   2230c:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2230e:	7005      	strb	r5, [r0, #0]
   22310:	4622      	mov	r2, r4
   22312:	9300      	str	r3, [sp, #0]
   22314:	2106      	movs	r1, #6
   22316:	4638      	mov	r0, r7
   22318:	f7fe fee1 	bl	210de <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2231c:	b110      	cbz	r0, 22324 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2231e:	4620      	mov	r0, r4
   22320:	f7f5 f8ac 	bl	1747c <net_buf_unref>
}
   22324:	2000      	movs	r0, #0
   22326:	b003      	add	sp, #12
   22328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002232a <bt_smp_sign>:
   2232a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2232e:	4770      	bx	lr

00022330 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   22330:	2000      	movs	r0, #0
   22332:	4770      	bx	lr

00022334 <fixed_data_unref>:
}
   22334:	4770      	bx	lr

00022336 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   22336:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   22338:	6849      	ldr	r1, [r1, #4]
   2233a:	6809      	ldr	r1, [r1, #0]
   2233c:	f7f5 b80a 	b.w	17354 <net_buf_alloc_len>

00022340 <net_buf_get>:
{
   22340:	b570      	push	{r4, r5, r6, lr}
   22342:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   22344:	f7f8 fdc2 	bl	1aecc <z_impl_k_queue_get>
	if (!buf) {
   22348:	4605      	mov	r5, r0
   2234a:	b128      	cbz	r0, 22358 <net_buf_get+0x18>
   2234c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2234e:	7963      	ldrb	r3, [r4, #5]
   22350:	f013 0301 	ands.w	r3, r3, #1
   22354:	d102      	bne.n	2235c <net_buf_get+0x1c>
	frag->frags = NULL;
   22356:	6023      	str	r3, [r4, #0]
}
   22358:	4628      	mov	r0, r5
   2235a:	bd70      	pop	{r4, r5, r6, pc}
   2235c:	2300      	movs	r3, #0
   2235e:	2200      	movs	r2, #0
   22360:	4630      	mov	r0, r6
   22362:	f7f8 fdb3 	bl	1aecc <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   22366:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   22368:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2236a:	f023 0301 	bic.w	r3, r3, #1
   2236e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   22370:	4604      	mov	r4, r0
   22372:	e7ec      	b.n	2234e <net_buf_get+0xe>

00022374 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   22374:	6883      	ldr	r3, [r0, #8]
   22376:	440b      	add	r3, r1
   22378:	6003      	str	r3, [r0, #0]
}
   2237a:	4770      	bx	lr

0002237c <net_buf_slist_put>:
{
   2237c:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2237e:	460b      	mov	r3, r1
   22380:	681c      	ldr	r4, [r3, #0]
   22382:	b98c      	cbnz	r4, 223a8 <net_buf_slist_put+0x2c>
	__asm__ volatile(
   22384:	f04f 0240 	mov.w	r2, #64	; 0x40
   22388:	f3ef 8411 	mrs	r4, BASEPRI
   2238c:	f382 8812 	msr	BASEPRI_MAX, r2
   22390:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   22394:	b119      	cbz	r1, 2239e <net_buf_slist_put+0x22>
	return list->tail;
   22396:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND_LIST(slist, snode)
   22398:	b962      	cbnz	r2, 223b4 <net_buf_slist_put+0x38>
	list->head = node;
   2239a:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2239c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2239e:	f384 8811 	msr	BASEPRI, r4
   223a2:	f3bf 8f6f 	isb	sy
}
   223a6:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   223a8:	795a      	ldrb	r2, [r3, #5]
   223aa:	f042 0201 	orr.w	r2, r2, #1
   223ae:	715a      	strb	r2, [r3, #5]
   223b0:	4623      	mov	r3, r4
   223b2:	e7e5      	b.n	22380 <net_buf_slist_put+0x4>
	parent->next = child;
   223b4:	6011      	str	r1, [r2, #0]
}
   223b6:	e7f1      	b.n	2239c <net_buf_slist_put+0x20>

000223b8 <net_buf_slist_get>:
{
   223b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   223ba:	4603      	mov	r3, r0
	__asm__ volatile(
   223bc:	f04f 0240 	mov.w	r2, #64	; 0x40
   223c0:	f3ef 8611 	mrs	r6, BASEPRI
   223c4:	f382 8812 	msr	BASEPRI_MAX, r2
   223c8:	f3bf 8f6f 	isb	sy
	return list->head;
   223cc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   223ce:	b158      	cbz	r0, 223e8 <net_buf_slist_get+0x30>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   223d0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   223d2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   223d4:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   223d6:	4288      	cmp	r0, r1
	list->tail = node;
   223d8:	bf08      	it	eq
   223da:	605a      	streq	r2, [r3, #4]
   223dc:	4602      	mov	r2, r0
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   223de:	7951      	ldrb	r1, [r2, #5]
   223e0:	f011 0401 	ands.w	r4, r1, #1
   223e4:	d105      	bne.n	223f2 <net_buf_slist_get+0x3a>
		frag->frags = NULL;
   223e6:	6014      	str	r4, [r2, #0]
	__asm__ volatile(
   223e8:	f386 8811 	msr	BASEPRI, r6
   223ec:	f3bf 8f6f 	isb	sy
}
   223f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return list->head;
   223f2:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET(slist, snode)
   223f4:	b12c      	cbz	r4, 22402 <net_buf_slist_get+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   223f6:	685f      	ldr	r7, [r3, #4]
	return node->next;
   223f8:	6825      	ldr	r5, [r4, #0]
	list->head = node;
   223fa:	601d      	str	r5, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   223fc:	42bc      	cmp	r4, r7
	list->tail = node;
   223fe:	bf08      	it	eq
   22400:	605d      	streq	r5, [r3, #4]
			frag->flags &= ~NET_BUF_FRAGS;
   22402:	f021 0101 	bic.w	r1, r1, #1
			frag->frags = (void *)sys_slist_get(list);
   22406:	6014      	str	r4, [r2, #0]
			frag->flags &= ~NET_BUF_FRAGS;
   22408:	7151      	strb	r1, [r2, #5]
		for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2240a:	4622      	mov	r2, r4
   2240c:	e7e7      	b.n	223de <net_buf_slist_get+0x26>

0002240e <net_buf_put>:
{
   2240e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   22410:	460a      	mov	r2, r1
   22412:	6814      	ldr	r4, [r2, #0]
   22414:	b914      	cbnz	r4, 2241c <net_buf_put+0xe>
}
   22416:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   22418:	f000 bd6f 	b.w	22efa <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2241c:	7953      	ldrb	r3, [r2, #5]
   2241e:	f043 0301 	orr.w	r3, r3, #1
   22422:	7153      	strb	r3, [r2, #5]
   22424:	4622      	mov	r2, r4
   22426:	e7f4      	b.n	22412 <net_buf_put+0x4>

00022428 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   22428:	7902      	ldrb	r2, [r0, #4]
   2242a:	3201      	adds	r2, #1
   2242c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2242e:	4770      	bx	lr

00022430 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   22430:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   22432:	4618      	mov	r0, r3
   22434:	681b      	ldr	r3, [r3, #0]
   22436:	2b00      	cmp	r3, #0
   22438:	d1fb      	bne.n	22432 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2243a:	4770      	bx	lr

0002243c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2243c:	6802      	ldr	r2, [r0, #0]
{
   2243e:	b510      	push	{r4, lr}
	if (parent->frags) {
   22440:	b12a      	cbz	r2, 2244e <net_buf_frag_insert+0x12>
   22442:	460b      	mov	r3, r1
	while (buf->frags) {
   22444:	461c      	mov	r4, r3
   22446:	681b      	ldr	r3, [r3, #0]
   22448:	2b00      	cmp	r3, #0
   2244a:	d1fb      	bne.n	22444 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2244c:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2244e:	6001      	str	r1, [r0, #0]
}
   22450:	bd10      	pop	{r4, pc}

00022452 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   22452:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   22454:	4604      	mov	r4, r0
   22456:	b920      	cbnz	r0, 22462 <net_buf_frag_add+0x10>
	buf->ref++;
   22458:	790b      	ldrb	r3, [r1, #4]
   2245a:	3301      	adds	r3, #1
   2245c:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2245e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   22460:	bd10      	pop	{r4, pc}
   22462:	4603      	mov	r3, r0
	while (buf->frags) {
   22464:	4618      	mov	r0, r3
   22466:	681b      	ldr	r3, [r3, #0]
   22468:	2b00      	cmp	r3, #0
   2246a:	d1fb      	bne.n	22464 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2246c:	f7ff ffe6 	bl	2243c <net_buf_frag_insert>
   22470:	4620      	mov	r0, r4
   22472:	e7f5      	b.n	22460 <net_buf_frag_add+0xe>

00022474 <net_buf_simple_add>:
	return buf->data + buf->len;
   22474:	8883      	ldrh	r3, [r0, #4]
   22476:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   22478:	4419      	add	r1, r3
   2247a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2247c:	18d0      	adds	r0, r2, r3
   2247e:	4770      	bx	lr

00022480 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   22480:	b430      	push	{r4, r5}
   22482:	8884      	ldrh	r4, [r0, #4]
   22484:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   22486:	18a3      	adds	r3, r4, r2
   22488:	8083      	strh	r3, [r0, #4]
   2248a:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2248c:	bc30      	pop	{r4, r5}
   2248e:	f001 b988 	b.w	237a2 <memcpy>

00022492 <net_buf_simple_add_u8>:
   22492:	8883      	ldrh	r3, [r0, #4]
   22494:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   22496:	b510      	push	{r4, lr}
	buf->len += len;
   22498:	1c5c      	adds	r4, r3, #1
   2249a:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2249c:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2249e:	18d0      	adds	r0, r2, r3
   224a0:	bd10      	pop	{r4, pc}

000224a2 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   224a2:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   224a4:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   224a6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   224a8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   224aa:	4411      	add	r1, r2
	buf->data -= len;
   224ac:	6018      	str	r0, [r3, #0]
	buf->len += len;
   224ae:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   224b0:	4770      	bx	lr

000224b2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   224b2:	8882      	ldrh	r2, [r0, #4]
   224b4:	1a52      	subs	r2, r2, r1
{
   224b6:	4603      	mov	r3, r0
	buf->len -= len;
   224b8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   224ba:	6800      	ldr	r0, [r0, #0]
   224bc:	4408      	add	r0, r1
   224be:	6018      	str	r0, [r3, #0]
}
   224c0:	4770      	bx	lr

000224c2 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   224c2:	4603      	mov	r3, r0
	void *data = buf->data;
   224c4:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   224c6:	889a      	ldrh	r2, [r3, #4]
   224c8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   224ca:	4401      	add	r1, r0
	buf->len -= len;
   224cc:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   224ce:	6019      	str	r1, [r3, #0]

	return data;
}
   224d0:	4770      	bx	lr

000224d2 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   224d2:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   224d4:	6803      	ldr	r3, [r0, #0]
   224d6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   224d8:	2102      	movs	r1, #2
   224da:	f7ff ffea 	bl	224b2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   224de:	4620      	mov	r0, r4
   224e0:	bd10      	pop	{r4, pc}

000224e2 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   224e2:	6802      	ldr	r2, [r0, #0]
   224e4:	6880      	ldr	r0, [r0, #8]
}
   224e6:	1a10      	subs	r0, r2, r0
   224e8:	4770      	bx	lr

000224ea <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   224ea:	8883      	ldrh	r3, [r0, #4]
   224ec:	88c2      	ldrh	r2, [r0, #6]
   224ee:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   224f0:	6803      	ldr	r3, [r0, #0]
   224f2:	6880      	ldr	r0, [r0, #8]
   224f4:	1a18      	subs	r0, r3, r0
}
   224f6:	1a10      	subs	r0, r2, r0
   224f8:	4770      	bx	lr

000224fa <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   224fa:	f1a0 0308 	sub.w	r3, r0, #8
   224fe:	f3bf 8f5b 	dmb	ish
   22502:	e853 2f00 	ldrex	r2, [r3]
   22506:	1c51      	adds	r1, r2, #1
   22508:	e843 1c00 	strex	ip, r1, [r3]
   2250c:	f1bc 0f00 	cmp.w	ip, #0
   22510:	d1f7      	bne.n	22502 <adc_context_on_timer_expired+0x8>
   22512:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   22516:	b91a      	cbnz	r2, 22520 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   22518:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
   2251c:	f7f5 b84a 	b.w	175b4 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   22520:	f06f 030f 	mvn.w	r3, #15
   22524:	6683      	str	r3, [r0, #104]	; 0x68
}
   22526:	4770      	bx	lr

00022528 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22528:	6903      	ldr	r3, [r0, #16]
   2252a:	b2c9      	uxtb	r1, r1
   2252c:	220c      	movs	r2, #12
   2252e:	fb01 3302 	mla	r3, r1, r2, r3
   22532:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   22534:	f000 0007 	and.w	r0, r0, #7
   22538:	4770      	bx	lr

0002253a <set_on_state>:
	__asm__ volatile(
   2253a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2253e:	f3ef 8211 	mrs	r2, BASEPRI
   22542:	f383 8812 	msr	BASEPRI_MAX, r3
   22546:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2254a:	6803      	ldr	r3, [r0, #0]
   2254c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22550:	f043 0302 	orr.w	r3, r3, #2
   22554:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22556:	f382 8811 	msr	BASEPRI, r2
   2255a:	f3bf 8f6f 	isb	sy
}
   2255e:	4770      	bx	lr

00022560 <stop>:
{
   22560:	4603      	mov	r3, r0
   22562:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   22564:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   22566:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22568:	f04f 0440 	mov.w	r4, #64	; 0x40
   2256c:	f3ef 8611 	mrs	r6, BASEPRI
   22570:	f384 8812 	msr	BASEPRI_MAX, r4
   22574:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22578:	250c      	movs	r5, #12
   2257a:	fb05 0401 	mla	r4, r5, r1, r0
   2257e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   22580:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   22584:	d001      	beq.n	2258a <stop+0x2a>
   22586:	42a2      	cmp	r2, r4
   22588:	d110      	bne.n	225ac <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2258a:	fb05 0001 	mla	r0, r5, r1, r0
   2258e:	2201      	movs	r2, #1
   22590:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   22592:	2000      	movs	r0, #0
	__asm__ volatile(
   22594:	f386 8811 	msr	BASEPRI, r6
   22598:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2259c:	b928      	cbnz	r0, 225aa <stop+0x4a>
	get_sub_config(dev, type)->stop();
   2259e:	685b      	ldr	r3, [r3, #4]
   225a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   225a4:	684b      	ldr	r3, [r1, #4]
   225a6:	4798      	blx	r3
	return 0;
   225a8:	2000      	movs	r0, #0
}
   225aa:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   225ac:	f04f 30ff 	mov.w	r0, #4294967295
   225b0:	e7f0      	b.n	22594 <stop+0x34>

000225b2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   225b2:	2280      	movs	r2, #128	; 0x80
   225b4:	f7ff bfd4 	b.w	22560 <stop>

000225b8 <async_start>:
{
   225b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225ba:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   225bc:	6904      	ldr	r4, [r0, #16]
{
   225be:	4605      	mov	r5, r0
   225c0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   225c2:	f04f 0040 	mov.w	r0, #64	; 0x40
   225c6:	f3ef 8c11 	mrs	ip, BASEPRI
   225ca:	f380 8812 	msr	BASEPRI_MAX, r0
   225ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   225d2:	260c      	movs	r6, #12
   225d4:	fb06 4601 	mla	r6, r6, r1, r4
   225d8:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   225da:	f000 0e07 	and.w	lr, r0, #7
   225de:	f1be 0f01 	cmp.w	lr, #1
   225e2:	d111      	bne.n	22608 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   225e4:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   225e6:	2600      	movs	r6, #0
	__asm__ volatile(
   225e8:	f38c 8811 	msr	BASEPRI, ip
   225ec:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   225f0:	b946      	cbnz	r6, 22604 <async_start+0x4c>
	subdata->cb = cb;
   225f2:	200c      	movs	r0, #12
   225f4:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   225f8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   225fc:	686b      	ldr	r3, [r5, #4]
   225fe:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   22602:	4798      	blx	r3
}
   22604:	4630      	mov	r0, r6
   22606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22608:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2260c:	4287      	cmp	r7, r0
   2260e:	bf14      	ite	ne
   22610:	f04f 36ff 	movne.w	r6, #4294967295
   22614:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   22618:	e7e6      	b.n	225e8 <async_start+0x30>

0002261a <api_start>:
{
   2261a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2261c:	2480      	movs	r4, #128	; 0x80
   2261e:	9400      	str	r4, [sp, #0]
   22620:	f7ff ffca 	bl	225b8 <async_start>
}
   22624:	b002      	add	sp, #8
   22626:	bd10      	pop	{r4, pc}

00022628 <onoff_started_callback>:
	return &data->mgr[type];
   22628:	6900      	ldr	r0, [r0, #16]
{
   2262a:	b410      	push	{r4}
	return &data->mgr[type];
   2262c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2262e:	241c      	movs	r4, #28
   22630:	fb03 0004 	mla	r0, r3, r4, r0
   22634:	2100      	movs	r1, #0
}
   22636:	bc10      	pop	{r4}
	notify(mgr, 0);
   22638:	4710      	bx	r2

0002263a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2263a:	2000      	movs	r0, #0
   2263c:	f7f7 b88c 	b.w	19758 <nrfx_clock_start>

00022640 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22640:	2000      	movs	r0, #0
   22642:	f000 b9c7 	b.w	229d4 <nrfx_clock_stop>

00022646 <blocking_start_callback>:
{
   22646:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22648:	f7f8 bc74 	b.w	1af34 <z_impl_k_sem_give>

0002264c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2264c:	6843      	ldr	r3, [r0, #4]
   2264e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   22650:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   22654:	600b      	str	r3, [r1, #0]
}
   22656:	2000      	movs	r0, #0
   22658:	4770      	bx	lr

0002265a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2265a:	6843      	ldr	r3, [r0, #4]
   2265c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2265e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22662:	4042      	eors	r2, r0
   22664:	400a      	ands	r2, r1
   22666:	4042      	eors	r2, r0
    p_reg->OUT = value;
   22668:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2266c:	2000      	movs	r0, #0
   2266e:	4770      	bx	lr

00022670 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22670:	6843      	ldr	r3, [r0, #4]
   22672:	685b      	ldr	r3, [r3, #4]
}
   22674:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   22676:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2267a:	4770      	bx	lr

0002267c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2267c:	6843      	ldr	r3, [r0, #4]
   2267e:	685b      	ldr	r3, [r3, #4]
}
   22680:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   22682:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   22686:	4770      	bx	lr

00022688 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22688:	6843      	ldr	r3, [r0, #4]
   2268a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2268c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   22690:	404b      	eors	r3, r1
    p_reg->OUT = value;
   22692:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   22696:	2000      	movs	r0, #0
   22698:	4770      	bx	lr

0002269a <gpio_nrfx_manage_callback>:
	return port->data;
   2269a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2269c:	6858      	ldr	r0, [r3, #4]
{
   2269e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   226a0:	b158      	cbz	r0, 226ba <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   226a2:	2400      	movs	r4, #0
   226a4:	4281      	cmp	r1, r0
   226a6:	d112      	bne.n	226ce <gpio_nrfx_manage_callback+0x34>
	return node->next;
   226a8:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   226aa:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   226ac:	b954      	cbnz	r4, 226c4 <gpio_nrfx_manage_callback+0x2a>
   226ae:	428d      	cmp	r5, r1
	list->head = node;
   226b0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   226b2:	d100      	bne.n	226b6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   226b4:	6098      	str	r0, [r3, #8]
	parent->next = child;
   226b6:	2000      	movs	r0, #0
   226b8:	6008      	str	r0, [r1, #0]
	if (set) {
   226ba:	b96a      	cbnz	r2, 226d8 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   226bc:	2000      	movs	r0, #0
}
   226be:	bd30      	pop	{r4, r5, pc}
   226c0:	4628      	mov	r0, r5
   226c2:	e7ef      	b.n	226a4 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   226c4:	428d      	cmp	r5, r1
	parent->next = child;
   226c6:	6020      	str	r0, [r4, #0]
	list->tail = node;
   226c8:	bf08      	it	eq
   226ca:	609c      	streq	r4, [r3, #8]
}
   226cc:	e7f3      	b.n	226b6 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   226ce:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   226d0:	4604      	mov	r4, r0
   226d2:	2d00      	cmp	r5, #0
   226d4:	d1f4      	bne.n	226c0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   226d6:	b13a      	cbz	r2, 226e8 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   226d8:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   226da:	685a      	ldr	r2, [r3, #4]
   226dc:	600a      	str	r2, [r1, #0]
	list->head = node;
   226de:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   226e0:	2800      	cmp	r0, #0
   226e2:	d1eb      	bne.n	226bc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   226e4:	6099      	str	r1, [r3, #8]
}
   226e6:	e7ea      	b.n	226be <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   226e8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   226ec:	e7e7      	b.n	226be <gpio_nrfx_manage_callback+0x24>

000226ee <i2c_nrfx_twim_configure>:
{
   226ee:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   226f0:	07cb      	lsls	r3, r1, #31
{
   226f2:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   226f4:	d41d      	bmi.n	22732 <i2c_nrfx_twim_configure+0x44>
	switch (I2C_SPEED_GET(i2c_config)) {
   226f6:	f3c1 0142 	ubfx	r1, r1, #1, #3
   226fa:	2901      	cmp	r1, #1
   226fc:	d016      	beq.n	2272c <i2c_nrfx_twim_configure+0x3e>
   226fe:	2902      	cmp	r1, #2
   22700:	d117      	bne.n	22732 <i2c_nrfx_twim_configure+0x44>
   22702:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   22706:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   22708:	6baa      	ldr	r2, [r5, #56]	; 0x38
   2270a:	4293      	cmp	r3, r2
   2270c:	d014      	beq.n	22738 <i2c_nrfx_twim_configure+0x4a>
		dev_data->twim_config.frequency = frequency;
   2270e:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   22710:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   22714:	b12b      	cbz	r3, 22722 <i2c_nrfx_twim_configure+0x34>
		nrfx_twim_uninit(&dev_config->twim);
   22716:	6860      	ldr	r0, [r4, #4]
   22718:	f7f7 fd78 	bl	1a20c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   2271c:	2300      	movs	r3, #0
   2271e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   22722:	4620      	mov	r0, r4
}
   22724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   22728:	f7f5 bbd8 	b.w	17edc <init_twim>
		frequency = NRF_TWIM_FREQ_100K;
   2272c:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
   22730:	e7e9      	b.n	22706 <i2c_nrfx_twim_configure+0x18>
	switch (I2C_SPEED_GET(i2c_config)) {
   22732:	f06f 0015 	mvn.w	r0, #21
}
   22736:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   22738:	2000      	movs	r0, #0
   2273a:	e7fc      	b.n	22736 <i2c_nrfx_twim_configure+0x48>

0002273c <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   2273c:	b510      	push	{r4, lr}
   2273e:	2200      	movs	r2, #0
   22740:	4604      	mov	r4, r0
   22742:	2101      	movs	r1, #1
   22744:	2003      	movs	r0, #3
   22746:	f7f0 ff47 	bl	135d8 <z_arm_irq_priority_set>
   2274a:	4620      	mov	r0, r4
   2274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22750:	f7f5 bbc4 	b.w	17edc <init_twim>

00022754 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   22754:	6902      	ldr	r2, [r0, #16]
{
   22756:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   22758:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2275c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22760:	2000      	movs	r0, #0
   22762:	4770      	bx	lr

00022764 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22764:	6843      	ldr	r3, [r0, #4]
   22766:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22768:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2276c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   22770:	4770      	bx	lr

00022772 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   22772:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   22774:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   22776:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22778:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2277c:	b148      	cbz	r0, 22792 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2277e:	7c52      	ldrb	r2, [r2, #17]
   22780:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22782:	2000      	movs	r0, #0
   22784:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   22788:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2278c:	2201      	movs	r2, #1
   2278e:	601a      	str	r2, [r3, #0]
	return 0;
   22790:	4770      	bx	lr
		return -1;
   22792:	f04f 30ff 	mov.w	r0, #4294967295
}
   22796:	4770      	bx	lr

00022798 <nrf_gpio_cfg_input>:
{
   22798:	b507      	push	{r0, r1, r2, lr}
   2279a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2279c:	a801      	add	r0, sp, #4
   2279e:	f7f5 fca7 	bl	180f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   227a2:	9b01      	ldr	r3, [sp, #4]
   227a4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   227a8:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   227aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   227ae:	b003      	add	sp, #12
   227b0:	f85d fb04 	ldr.w	pc, [sp], #4

000227b4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   227b4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   227b6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227b8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   227bc:	b940      	cbnz	r0, 227d0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   227be:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   227c0:	079b      	lsls	r3, r3, #30
   227c2:	d406      	bmi.n	227d2 <is_tx_ready.isra.0+0x1e>
   227c4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   227c8:	3800      	subs	r0, #0
   227ca:	bf18      	it	ne
   227cc:	2001      	movne	r0, #1
   227ce:	4770      	bx	lr
   227d0:	2001      	movs	r0, #1
}
   227d2:	4770      	bx	lr

000227d4 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   227d4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   227d6:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   227d8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   227dc:	05c9      	lsls	r1, r1, #23
   227de:	d518      	bpl.n	22812 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227e0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   227e4:	b1a9      	cbz	r1, 22812 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   227e6:	f04f 0040 	mov.w	r0, #64	; 0x40
   227ea:	f3ef 8111 	mrs	r1, BASEPRI
   227ee:	f380 8812 	msr	BASEPRI_MAX, r0
   227f2:	f3bf 8f6f 	isb	sy
   227f6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   227fa:	b130      	cbz	r0, 2280a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   227fc:	2000      	movs	r0, #0
   227fe:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   22802:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22806:	2001      	movs	r0, #1
   22808:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2280a:	f381 8811 	msr	BASEPRI, r1
   2280e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22812:	6852      	ldr	r2, [r2, #4]
   22814:	06d2      	lsls	r2, r2, #27
   22816:	d515      	bpl.n	22844 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   22818:	f04f 0140 	mov.w	r1, #64	; 0x40
   2281c:	f3ef 8211 	mrs	r2, BASEPRI
   22820:	f381 8812 	msr	BASEPRI_MAX, r1
   22824:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22828:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2282c:	b111      	cbz	r1, 22834 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2282e:	2100      	movs	r1, #0
   22830:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   22834:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   22838:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2283c:	f382 8811 	msr	BASEPRI, r2
   22840:	f3bf 8f6f 	isb	sy
}
   22844:	4770      	bx	lr

00022846 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   22846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22848:	460f      	mov	r7, r1
   2284a:	4616      	mov	r6, r2

	return err;
#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2284c:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   22850:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   22852:	42a6      	cmp	r6, r4
   22854:	d803      	bhi.n	2285e <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   22856:	d116      	bne.n	22886 <entropy_cc3xx_rng_get_entropy+0x40>
		err = 0;
   22858:	2000      	movs	r0, #0
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   2285a:	b003      	add	sp, #12
   2285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2285e:	1b33      	subs	r3, r6, r4
   22860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22864:	bf38      	it	cc
   22866:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   22868:	462a      	mov	r2, r5
   2286a:	ab01      	add	r3, sp, #4
   2286c:	1939      	adds	r1, r7, r4
   2286e:	2000      	movs	r0, #0
   22870:	f7f9 ff52 	bl	1c718 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   22874:	b920      	cbnz	r0, 22880 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   22876:	9b01      	ldr	r3, [sp, #4]
   22878:	42ab      	cmp	r3, r5
   2287a:	d101      	bne.n	22880 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   2287c:	442c      	add	r4, r5
   2287e:	e7e8      	b.n	22852 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   22880:	f06f 0015 	mvn.w	r0, #21
   22884:	e7e9      	b.n	2285a <entropy_cc3xx_rng_get_entropy+0x14>
	int err = EINVAL;
   22886:	2016      	movs	r0, #22
   22888:	e7e7      	b.n	2285a <entropy_cc3xx_rng_get_entropy+0x14>

0002288a <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2288a:	2200      	movs	r2, #0
{
   2288c:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2288e:	4611      	mov	r1, r2
   22890:	4610      	mov	r0, r2
   22892:	f7f9 ff0f 	bl	1c6b4 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   22896:	2800      	cmp	r0, #0
	}
#endif

	return 0;
}
   22898:	bf18      	it	ne
   2289a:	f06f 0015 	mvnne.w	r0, #21
   2289e:	bd08      	pop	{r3, pc}

000228a0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   228a0:	4770      	bx	lr

000228a2 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   228a2:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   228a4:	2000      	movs	r0, #0
   228a6:	f7f1 fa45 	bl	13d34 <sys_arch_reboot>

000228aa <sdc_assertion_handler>:
	k_oops();
   228aa:	4040      	eors	r0, r0
   228ac:	f380 8811 	msr	BASEPRI, r0
   228b0:	f04f 0003 	mov.w	r0, #3
   228b4:	df02      	svc	2
}
   228b6:	4770      	bx	lr

000228b8 <rand_prio_high_vector_get>:
   228b8:	f7f6 ba3a 	b.w	18d30 <rand_prio_low_vector_get>

000228bc <hci_driver_send>:
{
   228bc:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   228be:	8983      	ldrh	r3, [r0, #12]
{
   228c0:	4605      	mov	r5, r0
	if (!buf->len) {
   228c2:	b373      	cbz	r3, 22922 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   228c4:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   228c6:	b1a3      	cbz	r3, 228f2 <hci_driver_send+0x36>
   228c8:	2b02      	cmp	r3, #2
   228ca:	d12a      	bne.n	22922 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   228cc:	f04f 30ff 	mov.w	r0, #4294967295
   228d0:	f04f 31ff 	mov.w	r1, #4294967295
   228d4:	f7f6 f978 	bl	18bc8 <multithreading_lock_acquire>
	if (!errcode) {
   228d8:	4604      	mov	r4, r0
   228da:	b940      	cbnz	r0, 228ee <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   228dc:	68a8      	ldr	r0, [r5, #8]
   228de:	f7ea fe26 	bl	d52e <sdc_hci_data_put>
   228e2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   228e4:	f7f6 f978 	bl	18bd8 <multithreading_lock_release>
		if (errcode) {
   228e8:	b1b4      	cbz	r4, 22918 <hci_driver_send+0x5c>
			receive_signal_raise();
   228ea:	f7f6 fa35 	bl	18d58 <receive_signal_raise>
}
   228ee:	4620      	mov	r0, r4
   228f0:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   228f2:	f04f 30ff 	mov.w	r0, #4294967295
   228f6:	f04f 31ff 	mov.w	r1, #4294967295
   228fa:	f7f6 f965 	bl	18bc8 <multithreading_lock_acquire>
	if (!errcode) {
   228fe:	4604      	mov	r4, r0
   22900:	2800      	cmp	r0, #0
   22902:	d1f4      	bne.n	228ee <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   22904:	68a8      	ldr	r0, [r5, #8]
   22906:	f7f6 fa9d 	bl	18e44 <hci_internal_cmd_put>
   2290a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2290c:	f7f6 f964 	bl	18bd8 <multithreading_lock_release>
	if (errcode) {
   22910:	2c00      	cmp	r4, #0
   22912:	d1ec      	bne.n	228ee <hci_driver_send+0x32>
	receive_signal_raise();
   22914:	f7f6 fa20 	bl	18d58 <receive_signal_raise>
		net_buf_unref(buf);
   22918:	4628      	mov	r0, r5
   2291a:	f7f4 fdaf 	bl	1747c <net_buf_unref>
   2291e:	2400      	movs	r4, #0
   22920:	e7e5      	b.n	228ee <hci_driver_send+0x32>
	switch (type) {
   22922:	f06f 0415 	mvn.w	r4, #21
   22926:	e7e2      	b.n	228ee <hci_driver_send+0x32>

00022928 <receive_work_handler>:
	hci_driver_receive_process();
   22928:	f7f6 ba2a 	b.w	18d80 <hci_driver_receive_process>

0002292c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2292c:	f101 0320 	add.w	r3, r1, #32
   22930:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   22932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   22936:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2293a:	428b      	cmp	r3, r1
   2293c:	d1f9      	bne.n	22932 <sys_memcpy_swap.constprop.0+0x6>
}
   2293e:	4770      	bx	lr

00022940 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   22940:	2100      	movs	r1, #0
   22942:	f7f6 be7d 	b.w	19640 <cmd_le_generate_dhkey>

00022946 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   22946:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2294a:	2901      	cmp	r1, #1
   2294c:	d801      	bhi.n	22952 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2294e:	f7f6 be77 	b.w	19640 <cmd_le_generate_dhkey>
}
   22952:	2012      	movs	r0, #18
   22954:	4770      	bx	lr

00022956 <m_assert_handler>:
	k_oops();
   22956:	4040      	eors	r0, r0
   22958:	f380 8811 	msr	BASEPRI, r0
   2295c:	f04f 0003 	mov.w	r0, #3
   22960:	df02      	svc	2
}
   22962:	4770      	bx	lr

00022964 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   22964:	4668      	mov	r0, sp
   22966:	f020 0107 	bic.w	r1, r0, #7
   2296a:	468d      	mov	sp, r1
   2296c:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2296e:	f7e0 ffeb 	bl	3948 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   22972:	f7f0 fe4b 	bl	1360c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   22976:	f7f0 ff33 	bl	137e0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2297a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2297e:	4685      	mov	sp, r0
   22980:	4770      	bx	lr

00022982 <mpsl_low_prio_work_handler>:
{
   22982:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22984:	f04f 31ff 	mov.w	r1, #4294967295
   22988:	f04f 30ff 	mov.w	r0, #4294967295
   2298c:	f7f6 f91c 	bl	18bc8 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   22990:	f7ea f95e 	bl	cc50 <mpsl_low_priority_process>
}
   22994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   22998:	f7f6 b91e 	b.w	18bd8 <multithreading_lock_release>

0002299c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2299c:	4668      	mov	r0, sp
   2299e:	f020 0107 	bic.w	r1, r0, #7
   229a2:	468d      	mov	sp, r1
   229a4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   229a6:	f7e0 ff4d 	bl	3844 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   229aa:	f7f0 fe2f 	bl	1360c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   229ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   229b2:	4685      	mov	sp, r0
   229b4:	4770      	bx	lr

000229b6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   229b6:	4668      	mov	r0, sp
   229b8:	f020 0107 	bic.w	r1, r0, #7
   229bc:	468d      	mov	sp, r1
   229be:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   229c0:	f7ea f86e 	bl	caa0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   229c4:	f7f0 fe22 	bl	1360c <_arch_isr_direct_pm>
   229c8:	f7f0 ff0a 	bl	137e0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   229cc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   229d0:	4685      	mov	sp, r0
   229d2:	4770      	bx	lr

000229d4 <nrfx_clock_stop>:
	switch (domain) {
   229d4:	2801      	cmp	r0, #1
   229d6:	d101      	bne.n	229dc <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   229d8:	f7e1 bdd6 	b.w	4588 <mpsl_clock_hfclk_release>
}
   229dc:	4770      	bx	lr

000229de <nrfx_clock_enable>:
}
   229de:	4770      	bx	lr

000229e0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   229e0:	f7e1 bbec 	b.w	41bc <MPSL_IRQ_CLOCK_Handler>

000229e4 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   229e4:	f7f9 be10 	b.w	1c608 <nrf_cc3xx_platform_init>

000229e8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   229e8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   229ea:	f7f0 fcdb 	bl	133a4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   229ee:	f7f0 fd8d 	bl	1350c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   229f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   229f6:	f7f9 be07 	b.w	1c608 <nrf_cc3xx_platform_init>

000229fa <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   229fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   229fe:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   22a02:	f1a0 0308 	sub.w	r3, r0, #8
   22a06:	4258      	negs	r0, r3
   22a08:	4158      	adcs	r0, r3
   22a0a:	4770      	bx	lr

00022a0c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   22a0c:	4700      	bx	r0

00022a0e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   22a0e:	f000 bd10 	b.w	23432 <z_impl_k_busy_wait>

00022a12 <nrf_gpio_reconfigure>:
{
   22a12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22a14:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22a16:	a801      	add	r0, sp, #4
{
   22a18:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   22a1c:	4617      	mov	r7, r2
   22a1e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22a20:	f7f6 fffe 	bl	19a20 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22a24:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   22a26:	2f00      	cmp	r7, #0
   22a28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   22a2c:	bf14      	ite	ne
   22a2e:	2302      	movne	r3, #2
   22a30:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   22a32:	2900      	cmp	r1, #0
   22a34:	bf18      	it	ne
   22a36:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   22a3a:	2d00      	cmp	r5, #0
   22a3c:	bf14      	ite	ne
   22a3e:	f04f 0c0c 	movne.w	ip, #12
   22a42:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   22a46:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   22a48:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   22a4c:	bf14      	ite	ne
   22a4e:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   22a52:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   22a56:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   22a58:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22a5c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   22a60:	bf14      	ite	ne
   22a62:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   22a66:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   22a6a:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   22a6e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22a72:	b101      	cbz	r1, 22a76 <nrf_gpio_reconfigure+0x64>
   22a74:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   22a76:	b10f      	cbz	r7, 22a7c <nrf_gpio_reconfigure+0x6a>
   22a78:	783f      	ldrb	r7, [r7, #0]
   22a7a:	007f      	lsls	r7, r7, #1
   22a7c:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   22a7e:	b10d      	cbz	r5, 22a84 <nrf_gpio_reconfigure+0x72>
   22a80:	782d      	ldrb	r5, [r5, #0]
   22a82:	00ad      	lsls	r5, r5, #2
   22a84:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   22a86:	b10c      	cbz	r4, 22a8c <nrf_gpio_reconfigure+0x7a>
   22a88:	7822      	ldrb	r2, [r4, #0]
   22a8a:	0214      	lsls	r4, r2, #8
   22a8c:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   22a8e:	b10e      	cbz	r6, 22a94 <nrf_gpio_reconfigure+0x82>
   22a90:	7836      	ldrb	r6, [r6, #0]
   22a92:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22a94:	432c      	orrs	r4, r5
   22a96:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   22a98:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   22a9c:	b003      	add	sp, #12
   22a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022aa0 <nrf_gpio_cfg_sense_set>:
{
   22aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   22aa2:	f10d 030f 	add.w	r3, sp, #15
   22aa6:	9301      	str	r3, [sp, #4]
   22aa8:	2300      	movs	r3, #0
{
   22aaa:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   22aae:	9300      	str	r3, [sp, #0]
   22ab0:	461a      	mov	r2, r3
   22ab2:	4619      	mov	r1, r3
   22ab4:	f7ff ffad 	bl	22a12 <nrf_gpio_reconfigure>
}
   22ab8:	b005      	add	sp, #20
   22aba:	f85d fb04 	ldr.w	pc, [sp], #4

00022abe <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   22abe:	7b0a      	ldrb	r2, [r1, #12]
{
   22ac0:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   22ac2:	2a03      	cmp	r2, #3
   22ac4:	d829      	bhi.n	22b1a <xfer_completeness_check+0x5c>
   22ac6:	e8df f002 	tbb	[pc, r2]
   22aca:	2521      	.short	0x2521
   22acc:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   22ace:	688a      	ldr	r2, [r1, #8]
   22ad0:	0350      	lsls	r0, r2, #13
   22ad2:	d504      	bpl.n	22ade <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   22ad4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   22ad8:	6908      	ldr	r0, [r1, #16]
   22ada:	4290      	cmp	r0, r2
   22adc:	d107      	bne.n	22aee <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   22ade:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   22ae0:	0352      	lsls	r2, r2, #13
   22ae2:	d41a      	bmi.n	22b1a <xfer_completeness_check+0x5c>
   22ae4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22ae8:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   22aea:	4291      	cmp	r1, r2
   22aec:	d015      	beq.n	22b1a <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   22aee:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22af0:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   22af2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22af6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   22afa:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   22afc:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   22b00:	6908      	ldr	r0, [r1, #16]
   22b02:	4290      	cmp	r0, r2
   22b04:	d1f3      	bne.n	22aee <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   22b06:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   22b0a:	e7ed      	b.n	22ae8 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   22b0c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   22b10:	6909      	ldr	r1, [r1, #16]
   22b12:	e7ea      	b.n	22aea <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   22b14:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   22b18:	e7fa      	b.n	22b10 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   22b1a:	2001      	movs	r0, #1
}
   22b1c:	4770      	bx	lr

00022b1e <nrf_gpio_pin_set>:
{
   22b1e:	b507      	push	{r0, r1, r2, lr}
   22b20:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22b22:	a801      	add	r0, sp, #4
   22b24:	f7f7 fdf4 	bl	1a710 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22b28:	9a01      	ldr	r2, [sp, #4]
   22b2a:	2301      	movs	r3, #1
   22b2c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22b2e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   22b32:	b003      	add	sp, #12
   22b34:	f85d fb04 	ldr.w	pc, [sp], #4

00022b38 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   22b38:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   22b3a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   22b3c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   22b3e:	bf9c      	itt	ls
   22b40:	6880      	ldrls	r0, [r0, #8]
   22b42:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   22b44:	3b01      	subs	r3, #1
   22b46:	1a98      	subs	r0, r3, r2
}
   22b48:	4770      	bx	lr

00022b4a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   22b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b4e:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   22b50:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b54:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   22b58:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   22b5c:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   22b5e:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   22b62:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b64:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   22b66:	d906      	bls.n	22b76 <_WriteNoCheck+0x2c>
   22b68:	f000 fe1b 	bl	237a2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   22b6c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   22b70:	60e5      	str	r5, [r4, #12]
}
   22b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b76:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   22b78:	eba5 0508 	sub.w	r5, r5, r8
   22b7c:	f000 fe11 	bl	237a2 <memcpy>
   22b80:	6860      	ldr	r0, [r4, #4]
   22b82:	462a      	mov	r2, r5
   22b84:	19b9      	adds	r1, r7, r6
   22b86:	e7ef      	b.n	22b68 <_WriteNoCheck+0x1e>

00022b88 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   22b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   22b8c:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   22b8e:	4606      	mov	r6, r0
   22b90:	4689      	mov	r9, r1
   22b92:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   22b94:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   22b98:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   22b9a:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   22b9c:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   22b9e:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   22ba0:	bf28      	it	cs
   22ba2:	18e4      	addcs	r4, r4, r3
   22ba4:	3c01      	subs	r4, #1
   22ba6:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   22ba8:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   22baa:	42bc      	cmp	r4, r7
   22bac:	bf28      	it	cs
   22bae:	463c      	movcs	r4, r7
   22bb0:	4294      	cmp	r4, r2
   22bb2:	bf28      	it	cs
   22bb4:	4614      	movcs	r4, r2
   22bb6:	4649      	mov	r1, r9
   22bb8:	4622      	mov	r2, r4
   22bba:	4428      	add	r0, r5
   22bbc:	f000 fdf1 	bl	237a2 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   22bc0:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   22bc2:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   22bc4:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   22bc6:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   22bc8:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   22bca:	42ab      	cmp	r3, r5
   22bcc:	bf08      	it	eq
   22bce:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   22bd0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   22bd4:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   22bd6:	2f00      	cmp	r7, #0
   22bd8:	d1de      	bne.n	22b98 <_WriteBlocking+0x10>
}
   22bda:	4640      	mov	r0, r8
   22bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022be0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   22be0:	f7f7 be08 	b.w	1a7f4 <_DoInit>

00022be4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   22be4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   22be6:	f7ff fffb 	bl	22be0 <SEGGER_RTT_Init>

	return 0;
}
   22bea:	2000      	movs	r0, #0
   22bec:	bd08      	pop	{r3, pc}

00022bee <z_device_state_init>:
}
   22bee:	4770      	bx	lr

00022bf0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   22bf0:	b138      	cbz	r0, 22c02 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   22bf2:	68c3      	ldr	r3, [r0, #12]
   22bf4:	8818      	ldrh	r0, [r3, #0]
   22bf6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   22bfa:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   22bfe:	4258      	negs	r0, r3
   22c00:	4158      	adcs	r0, r3
}
   22c02:	4770      	bx	lr

00022c04 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c06:	4605      	mov	r5, r0
   22c08:	460e      	mov	r6, r1
	__asm__ volatile(
   22c0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c0e:	f3ef 8711 	mrs	r7, BASEPRI
   22c12:	f383 8812 	msr	BASEPRI_MAX, r3
   22c16:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   22c1a:	f7f8 fe8b 	bl	1b934 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22c1e:	4631      	mov	r1, r6
   22c20:	4604      	mov	r4, r0
   22c22:	4628      	mov	r0, r5
   22c24:	f7ff fe3d 	bl	228a2 <k_sys_fatal_error_handler>
	__asm__ volatile(
   22c28:	f387 8811 	msr	BASEPRI, r7
   22c2c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22c30:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22c36:	f7f0 bf61 	b.w	13afc <z_impl_k_thread_abort>

00022c3a <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   22c3a:	f000 bdd3 	b.w	237e4 <memset>

00022c3e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22c3e:	f000 bdb0 	b.w	237a2 <memcpy>

00022c42 <k_heap_init>:
{
   22c42:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   22c44:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   22c48:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   22c4c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   22c4e:	f7fd b917 	b.w	1fe80 <sys_heap_init>

00022c52 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   22c52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c56:	b085      	sub	sp, #20
   22c58:	4606      	mov	r6, r0
   22c5a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22c5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   22c60:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22c62:	f000 fbea 	bl	2343a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   22c66:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22c6a:	4605      	mov	r5, r0
   22c6c:	460f      	mov	r7, r1
	__asm__ volatile(
   22c6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c72:	f3ef 8411 	mrs	r4, BASEPRI
   22c76:	f383 8812 	msr	BASEPRI_MAX, r3
   22c7a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22c7e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   22c82:	464a      	mov	r2, r9
   22c84:	4641      	mov	r1, r8
   22c86:	4630      	mov	r0, r6
   22c88:	f7fd f892 	bl	1fdb0 <sys_heap_aligned_alloc>
   22c8c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   22c8e:	f7f8 fff5 	bl	1bc7c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   22c92:	9b03      	ldr	r3, [sp, #12]
   22c94:	b13b      	cbz	r3, 22ca6 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   22c96:	f384 8811 	msr	BASEPRI, r4
   22c9a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22c9e:	4618      	mov	r0, r3
   22ca0:	b005      	add	sp, #20
   22ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   22ca6:	1a28      	subs	r0, r5, r0
   22ca8:	eb67 0101 	sbc.w	r1, r7, r1
   22cac:	2801      	cmp	r0, #1
   22cae:	f171 0200 	sbcs.w	r2, r1, #0
   22cb2:	dbf0      	blt.n	22c96 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   22cb4:	e9cd 0100 	strd	r0, r1, [sp]
   22cb8:	465a      	mov	r2, fp
   22cba:	4621      	mov	r1, r4
   22cbc:	4650      	mov	r0, sl
   22cbe:	f7f8 fce1 	bl	1b684 <z_pend_curr>
	__asm__ volatile(
   22cc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cc6:	f3ef 8411 	mrs	r4, BASEPRI
   22cca:	f383 8812 	msr	BASEPRI_MAX, r3
   22cce:	f3bf 8f6f 	isb	sy
   22cd2:	e7d6      	b.n	22c82 <k_heap_aligned_alloc+0x30>

00022cd4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   22cd4:	b538      	push	{r3, r4, r5, lr}
   22cd6:	4604      	mov	r4, r0
   22cd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cdc:	f3ef 8511 	mrs	r5, BASEPRI
   22ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   22ce4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   22ce8:	f7fd f82a 	bl	1fd40 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   22cec:	f104 000c 	add.w	r0, r4, #12
   22cf0:	f000 fb2c 	bl	2334c <z_unpend_all>
   22cf4:	b130      	cbz	r0, 22d04 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   22cf6:	4629      	mov	r1, r5
   22cf8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   22d00:	f7f8 bb6c 	b.w	1b3dc <z_reschedule>
	__asm__ volatile(
   22d04:	f385 8811 	msr	BASEPRI, r5
   22d08:	f3bf 8f6f 	isb	sy
}
   22d0c:	bd38      	pop	{r3, r4, r5, pc}

00022d0e <k_mem_slab_init>:
{
   22d0e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   22d10:	2400      	movs	r4, #0
   22d12:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22d14:	ea41 0402 	orr.w	r4, r1, r2
   22d18:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   22d1c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   22d20:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   22d22:	d10c      	bne.n	22d3e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   22d24:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   22d26:	42a3      	cmp	r3, r4
   22d28:	d103      	bne.n	22d32 <k_mem_slab_init+0x24>
   22d2a:	e9c0 0000 	strd	r0, r0, [r0]
}
   22d2e:	2000      	movs	r0, #0
}
   22d30:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   22d32:	6945      	ldr	r5, [r0, #20]
   22d34:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   22d36:	3401      	adds	r4, #1
		slab->free_list = p;
   22d38:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   22d3a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   22d3c:	e7f3      	b.n	22d26 <k_mem_slab_init+0x18>
		return -EINVAL;
   22d3e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   22d42:	e7f5      	b.n	22d30 <k_mem_slab_init+0x22>

00022d44 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d46:	4604      	mov	r4, r0
   22d48:	460d      	mov	r5, r1
	__asm__ volatile(
   22d4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d4e:	f3ef 8611 	mrs	r6, BASEPRI
   22d52:	f383 8812 	msr	BASEPRI_MAX, r3
   22d56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   22d5a:	6947      	ldr	r7, [r0, #20]
   22d5c:	b977      	cbnz	r7, 22d7c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22d5e:	f000 fadd 	bl	2331c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   22d62:	b158      	cbz	r0, 22d7c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22d64:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22d66:	6142      	str	r2, [r0, #20]
   22d68:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22d6a:	f000 fa66 	bl	2323a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   22d6e:	4631      	mov	r1, r6
   22d70:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   22d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   22d78:	f7f8 bb30 	b.w	1b3dc <z_reschedule>
	**(char ***) mem = slab->free_list;
   22d7c:	682b      	ldr	r3, [r5, #0]
   22d7e:	6962      	ldr	r2, [r4, #20]
   22d80:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   22d82:	682b      	ldr	r3, [r5, #0]
   22d84:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   22d86:	69a3      	ldr	r3, [r4, #24]
   22d88:	3b01      	subs	r3, #1
   22d8a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   22d8c:	f386 8811 	msr	BASEPRI, r6
   22d90:	f3bf 8f6f 	isb	sy
}
   22d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022d96 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22d96:	f3ef 8005 	mrs	r0, IPSR
}
   22d9a:	3800      	subs	r0, #0
   22d9c:	bf18      	it	ne
   22d9e:	2001      	movne	r0, #1
   22da0:	4770      	bx	lr

00022da2 <z_impl_k_thread_name_set>:
}
   22da2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   22da6:	4770      	bx	lr

00022da8 <z_impl_k_thread_start>:
	z_sched_start(thread);
   22da8:	f7f8 bc10 	b.w	1b5cc <z_sched_start>

00022dac <z_pm_save_idle_exit>:
{
   22dac:	b508      	push	{r3, lr}
	pm_system_resume();
   22dae:	f7f0 f983 	bl	130b8 <pm_system_resume>
}
   22db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   22db6:	f7ff bd73 	b.w	228a0 <sys_clock_idle_exit>

00022dba <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   22dba:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22dbe:	428b      	cmp	r3, r1
   22dc0:	d001      	beq.n	22dc6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   22dc2:	f7f8 bc73 	b.w	1b6ac <z_set_prio>
}
   22dc6:	2000      	movs	r0, #0
   22dc8:	4770      	bx	lr

00022dca <z_impl_k_mutex_init>:
{
   22dca:	4603      	mov	r3, r0
	mutex->owner = NULL;
   22dcc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   22dce:	e9c3 0002 	strd	r0, r0, [r3, #8]
   22dd2:	e9c3 3300 	strd	r3, r3, [r3]
}
   22dd6:	4770      	bx	lr

00022dd8 <queue_insert>:
{
   22dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ddc:	4699      	mov	r9, r3
   22dde:	4604      	mov	r4, r0
   22de0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   22de4:	460d      	mov	r5, r1
   22de6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22de8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   22dec:	f04f 0240 	mov.w	r2, #64	; 0x40
   22df0:	f3ef 8711 	mrs	r7, BASEPRI
   22df4:	f382 8812 	msr	BASEPRI_MAX, r2
   22df8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   22dfc:	b103      	cbz	r3, 22e00 <queue_insert+0x28>
	return list->tail;
   22dfe:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   22e00:	4630      	mov	r0, r6
   22e02:	f000 fa8b 	bl	2331c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   22e06:	b158      	cbz	r0, 22e20 <queue_insert+0x48>
   22e08:	2400      	movs	r4, #0
   22e0a:	67c4      	str	r4, [r0, #124]	; 0x7c
   22e0c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   22e10:	f000 fa13 	bl	2323a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   22e14:	4630      	mov	r0, r6
   22e16:	4639      	mov	r1, r7
   22e18:	f7f8 fae0 	bl	1b3dc <z_reschedule>
	return 0;
   22e1c:	2000      	movs	r0, #0
   22e1e:	e00c      	b.n	22e3a <queue_insert+0x62>
	if (alloc) {
   22e20:	f1b9 0f00 	cmp.w	r9, #0
   22e24:	d01b      	beq.n	22e5e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   22e26:	2108      	movs	r1, #8
   22e28:	f7f9 f85c 	bl	1bee4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   22e2c:	b938      	cbnz	r0, 22e3e <queue_insert+0x66>
	__asm__ volatile(
   22e2e:	f387 8811 	msr	BASEPRI, r7
   22e32:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22e36:	f06f 000b 	mvn.w	r0, #11
}
   22e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   22e3e:	2301      	movs	r3, #1
		anode->data = data;
   22e40:	f8c0 8004 	str.w	r8, [r0, #4]
   22e44:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22e46:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22e48:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   22e4c:	b95d      	cbnz	r5, 22e66 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22e4e:	6823      	ldr	r3, [r4, #0]
   22e50:	4313      	orrs	r3, r2
   22e52:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22e54:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22e56:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22e58:	b973      	cbnz	r3, 22e78 <queue_insert+0xa0>
	list->tail = node;
   22e5a:	6060      	str	r0, [r4, #4]
}
   22e5c:	e00c      	b.n	22e78 <queue_insert+0xa0>
	node->next_and_flags = flags;
   22e5e:	f8c8 9000 	str.w	r9, [r8]
}
   22e62:	4640      	mov	r0, r8
   22e64:	e7ef      	b.n	22e46 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22e66:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22e68:	f033 0303 	bics.w	r3, r3, #3
   22e6c:	d110      	bne.n	22e90 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   22e6e:	6002      	str	r2, [r0, #0]
	return list->tail;
   22e70:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   22e72:	b93a      	cbnz	r2, 22e84 <queue_insert+0xac>
	list->head = node;
   22e74:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22e78:	2104      	movs	r1, #4
   22e7a:	f104 0010 	add.w	r0, r4, #16
   22e7e:	f000 fc62 	bl	23746 <z_handle_obj_poll_events>
   22e82:	e7c7      	b.n	22e14 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22e84:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22e86:	f003 0303 	and.w	r3, r3, #3
   22e8a:	4303      	orrs	r3, r0
   22e8c:	6013      	str	r3, [r2, #0]
   22e8e:	e7e4      	b.n	22e5a <queue_insert+0x82>
   22e90:	4313      	orrs	r3, r2
   22e92:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22e94:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22e96:	f003 0303 	and.w	r3, r3, #3
   22e9a:	4303      	orrs	r3, r0
   22e9c:	602b      	str	r3, [r5, #0]
}
   22e9e:	e7eb      	b.n	22e78 <queue_insert+0xa0>

00022ea0 <z_queue_node_peek>:
{
   22ea0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   22ea2:	4604      	mov	r4, r0
   22ea4:	b130      	cbz	r0, 22eb4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22ea6:	6802      	ldr	r2, [r0, #0]
   22ea8:	0793      	lsls	r3, r2, #30
   22eaa:	d003      	beq.n	22eb4 <z_queue_node_peek+0x14>
		ret = anode->data;
   22eac:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   22eae:	b109      	cbz	r1, 22eb4 <z_queue_node_peek+0x14>
			k_free(anode);
   22eb0:	f000 fc5f 	bl	23772 <k_free>
}
   22eb4:	4620      	mov	r0, r4
   22eb6:	bd10      	pop	{r4, pc}

00022eb8 <z_impl_k_queue_init>:
	list->head = NULL;
   22eb8:	2300      	movs	r3, #0
	list->tail = NULL;
   22eba:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   22ebe:	f100 0308 	add.w	r3, r0, #8
   22ec2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   22ec6:	f100 0310 	add.w	r3, r0, #16
   22eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   22ece:	4770      	bx	lr

00022ed0 <k_queue_append>:
{
   22ed0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   22ed2:	2301      	movs	r3, #1
   22ed4:	9300      	str	r3, [sp, #0]
   22ed6:	2300      	movs	r3, #0
{
   22ed8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   22eda:	4619      	mov	r1, r3
   22edc:	f7ff ff7c 	bl	22dd8 <queue_insert>
}
   22ee0:	b003      	add	sp, #12
   22ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00022ee6 <k_queue_prepend>:
{
   22ee6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   22ee8:	2300      	movs	r3, #0
{
   22eea:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   22eec:	9300      	str	r3, [sp, #0]
   22eee:	4619      	mov	r1, r3
   22ef0:	f7ff ff72 	bl	22dd8 <queue_insert>
}
   22ef4:	b003      	add	sp, #12
   22ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00022efa <k_queue_append_list>:
{
   22efa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22efe:	4605      	mov	r5, r0
   22f00:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   22f02:	460c      	mov	r4, r1
   22f04:	b391      	cbz	r1, 22f6c <k_queue_append_list+0x72>
   22f06:	b38a      	cbz	r2, 22f6c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22f08:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   22f0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f10:	f3ef 8811 	mrs	r8, BASEPRI
   22f14:	f383 8812 	msr	BASEPRI_MAX, r3
   22f18:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   22f1c:	4638      	mov	r0, r7
   22f1e:	f000 f9fd 	bl	2331c <z_unpend_first_thread>
   22f22:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   22f26:	b920      	cbnz	r0, 22f32 <k_queue_append_list+0x38>
	return list->tail;
   22f28:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22f2a:	b9ca      	cbnz	r2, 22f60 <k_queue_append_list+0x66>
	list->head = node;
   22f2c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   22f2e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22f30:	e00a      	b.n	22f48 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   22f32:	6144      	str	r4, [r0, #20]
   22f34:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   22f38:	f000 f97f 	bl	2323a <z_ready_thread>
		head = *(void **)head;
   22f3c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   22f3e:	4638      	mov	r0, r7
   22f40:	f000 f9ec 	bl	2331c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22f44:	2c00      	cmp	r4, #0
   22f46:	d1ee      	bne.n	22f26 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22f48:	2104      	movs	r1, #4
   22f4a:	f105 0010 	add.w	r0, r5, #16
   22f4e:	f000 fbfa 	bl	23746 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   22f52:	4638      	mov	r0, r7
   22f54:	4641      	mov	r1, r8
   22f56:	f7f8 fa41 	bl	1b3dc <z_reschedule>
	return 0;
   22f5a:	2000      	movs	r0, #0
}
   22f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22f60:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22f62:	f003 0303 	and.w	r3, r3, #3
   22f66:	431c      	orrs	r4, r3
   22f68:	6014      	str	r4, [r2, #0]
}
   22f6a:	e7e0      	b.n	22f2e <k_queue_append_list+0x34>
		return -EINVAL;
   22f6c:	f06f 0015 	mvn.w	r0, #21
   22f70:	e7f4      	b.n	22f5c <k_queue_append_list+0x62>

00022f72 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   22f72:	b15a      	cbz	r2, 22f8c <z_impl_k_sem_init+0x1a>
   22f74:	428a      	cmp	r2, r1
   22f76:	d309      	bcc.n	22f8c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   22f78:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   22f7c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   22f80:	e9c0 0000 	strd	r0, r0, [r0]
   22f84:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   22f88:	2000      	movs	r0, #0
   22f8a:	4770      	bx	lr
		return -EINVAL;
   22f8c:	f06f 0015 	mvn.w	r0, #21
}
   22f90:	4770      	bx	lr

00022f92 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   22f92:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   22f94:	2301      	movs	r3, #1
   22f96:	408b      	lsls	r3, r1
   22f98:	ea22 0303 	bic.w	r3, r2, r3
   22f9c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   22f9e:	fa22 f001 	lsr.w	r0, r2, r1
}
   22fa2:	f000 0001 	and.w	r0, r0, #1
   22fa6:	4770      	bx	lr

00022fa8 <unschedule_locked>:
{
   22fa8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22faa:	2103      	movs	r1, #3
{
   22fac:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   22fae:	300c      	adds	r0, #12
   22fb0:	f7ff ffef 	bl	22f92 <flag_test_and_clear>
   22fb4:	4604      	mov	r4, r0
   22fb6:	b118      	cbz	r0, 22fc0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   22fb8:	f105 0010 	add.w	r0, r5, #16
   22fbc:	f000 f9f3 	bl	233a6 <z_abort_timeout>
}
   22fc0:	4620      	mov	r0, r4
   22fc2:	bd38      	pop	{r3, r4, r5, pc}

00022fc4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   22fc4:	b120      	cbz	r0, 22fd0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   22fc6:	2200      	movs	r2, #0
   22fc8:	4611      	mov	r1, r2
   22fca:	3088      	adds	r0, #136	; 0x88
   22fcc:	f000 b9ce 	b.w	2336c <z_sched_wake>
}
   22fd0:	4770      	bx	lr

00022fd2 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   22fd2:	68c3      	ldr	r3, [r0, #12]
{
   22fd4:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22fd6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   22fda:	079b      	lsls	r3, r3, #30
{
   22fdc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22fde:	d416      	bmi.n	2300e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   22fe0:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   22fe2:	2102      	movs	r1, #2
   22fe4:	300c      	adds	r0, #12
   22fe6:	f7ff ffd4 	bl	22f92 <flag_test_and_clear>
   22fea:	b180      	cbz	r0, 2300e <cancel_async_locked+0x3c>
	return list->head;
   22fec:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22ff0:	b16a      	cbz	r2, 2300e <cancel_async_locked+0x3c>
   22ff2:	4294      	cmp	r4, r2
   22ff4:	d11b      	bne.n	2302e <cancel_async_locked+0x5c>
	return node->next;
   22ff6:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   22ff8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   22ffc:	b98d      	cbnz	r5, 23022 <cancel_async_locked+0x50>
   22ffe:	428c      	cmp	r4, r1
	list->head = node;
   23000:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   23004:	d101      	bne.n	2300a <cancel_async_locked+0x38>
	list->tail = node;
   23006:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2300a:	2300      	movs	r3, #0
   2300c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2300e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   23010:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   23014:	bf1e      	ittt	ne
   23016:	f043 0302 	orrne.w	r3, r3, #2
   2301a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2301c:	f003 000f 	andne.w	r0, r3, #15
}
   23020:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   23022:	428c      	cmp	r4, r1
	parent->next = child;
   23024:	602a      	str	r2, [r5, #0]
	list->tail = node;
   23026:	bf08      	it	eq
   23028:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2302c:	e7ed      	b.n	2300a <cancel_async_locked+0x38>
	return node->next;
   2302e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23030:	6812      	ldr	r2, [r2, #0]
   23032:	e7dd      	b.n	22ff0 <cancel_async_locked+0x1e>

00023034 <work_timeout>:
{
   23034:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23036:	4604      	mov	r4, r0
   23038:	f04f 0340 	mov.w	r3, #64	; 0x40
   2303c:	f3ef 8511 	mrs	r5, BASEPRI
   23040:	f383 8812 	msr	BASEPRI_MAX, r3
   23044:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   23048:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2304a:	f1a0 0610 	sub.w	r6, r0, #16
   2304e:	2103      	movs	r1, #3
   23050:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   23052:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   23054:	f7ff ff9d 	bl	22f92 <flag_test_and_clear>
   23058:	b128      	cbz	r0, 23066 <work_timeout+0x32>
		queue = dw->queue;
   2305a:	69a3      	ldr	r3, [r4, #24]
   2305c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2305e:	a901      	add	r1, sp, #4
   23060:	4630      	mov	r0, r6
   23062:	f7f8 f883 	bl	1b16c <submit_to_queue_locked>
	__asm__ volatile(
   23066:	f385 8811 	msr	BASEPRI, r5
   2306a:	f3bf 8f6f 	isb	sy
}
   2306e:	b002      	add	sp, #8
   23070:	bd70      	pop	{r4, r5, r6, pc}

00023072 <k_work_init>:
{
   23072:	b538      	push	{r3, r4, r5, lr}
   23074:	4604      	mov	r4, r0
   23076:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   23078:	2210      	movs	r2, #16
   2307a:	2100      	movs	r1, #0
   2307c:	f000 fbb2 	bl	237e4 <memset>
   23080:	6065      	str	r5, [r4, #4]
}
   23082:	bd38      	pop	{r3, r4, r5, pc}

00023084 <k_work_busy_get>:
	__asm__ volatile(
   23084:	f04f 0240 	mov.w	r2, #64	; 0x40
   23088:	f3ef 8311 	mrs	r3, BASEPRI
   2308c:	f382 8812 	msr	BASEPRI_MAX, r2
   23090:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   23094:	68c0      	ldr	r0, [r0, #12]
   23096:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2309a:	f383 8811 	msr	BASEPRI, r3
   2309e:	f3bf 8f6f 	isb	sy
}
   230a2:	4770      	bx	lr

000230a4 <k_work_submit_to_queue>:
{
   230a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   230a6:	9001      	str	r0, [sp, #4]
   230a8:	4608      	mov	r0, r1
	__asm__ volatile(
   230aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   230ae:	f3ef 8511 	mrs	r5, BASEPRI
   230b2:	f383 8812 	msr	BASEPRI_MAX, r3
   230b6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   230ba:	a901      	add	r1, sp, #4
   230bc:	f7f8 f856 	bl	1b16c <submit_to_queue_locked>
   230c0:	4604      	mov	r4, r0
	__asm__ volatile(
   230c2:	f385 8811 	msr	BASEPRI, r5
   230c6:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   230ca:	2800      	cmp	r0, #0
   230cc:	dd09      	ble.n	230e2 <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
   230ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   230d2:	f3ef 8011 	mrs	r0, BASEPRI
   230d6:	f383 8812 	msr	BASEPRI_MAX, r3
   230da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   230de:	f000 f890 	bl	23202 <z_reschedule_irqlock>
}
   230e2:	4620      	mov	r0, r4
   230e4:	b003      	add	sp, #12
   230e6:	bd30      	pop	{r4, r5, pc}

000230e8 <k_work_init_delayable>:
{
   230e8:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   230ea:	2230      	movs	r2, #48	; 0x30
{
   230ec:	4604      	mov	r4, r0
   230ee:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   230f0:	2100      	movs	r1, #0
   230f2:	f000 fb77 	bl	237e4 <memset>
   230f6:	f44f 7380 	mov.w	r3, #256	; 0x100
   230fa:	6065      	str	r5, [r4, #4]
   230fc:	60e3      	str	r3, [r4, #12]
}
   230fe:	bd38      	pop	{r3, r4, r5, pc}

00023100 <k_work_delayable_busy_get>:
   23100:	f7ff bfc0 	b.w	23084 <k_work_busy_get>

00023104 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   23104:	b538      	push	{r3, r4, r5, lr}
   23106:	4604      	mov	r4, r0
   23108:	f04f 0340 	mov.w	r3, #64	; 0x40
   2310c:	f3ef 8511 	mrs	r5, BASEPRI
   23110:	f383 8812 	msr	BASEPRI_MAX, r3
   23114:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   23118:	f7ff ff46 	bl	22fa8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2311c:	4620      	mov	r0, r4
   2311e:	f7ff ff58 	bl	22fd2 <cancel_async_locked>
	__asm__ volatile(
   23122:	f385 8811 	msr	BASEPRI, r5
   23126:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2312a:	bd38      	pop	{r3, r4, r5, pc}

0002312c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2312e:	4604      	mov	r4, r0
   23130:	460d      	mov	r5, r1
	__asm__ volatile(
   23132:	f04f 0340 	mov.w	r3, #64	; 0x40
   23136:	f3ef 8711 	mrs	r7, BASEPRI
   2313a:	f383 8812 	msr	BASEPRI_MAX, r3
   2313e:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   23142:	68c3      	ldr	r3, [r0, #12]
   23144:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   23148:	2b00      	cmp	r3, #0
   2314a:	bf14      	ite	ne
   2314c:	2601      	movne	r6, #1
   2314e:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   23150:	d009      	beq.n	23166 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   23152:	f7ff ff29 	bl	22fa8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23156:	4620      	mov	r0, r4
   23158:	f7ff ff3b 	bl	22fd2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2315c:	4629      	mov	r1, r5
   2315e:	4620      	mov	r0, r4
   23160:	f7f7 ffe6 	bl	1b130 <cancel_sync_locked>
   23164:	4603      	mov	r3, r0
	__asm__ volatile(
   23166:	f387 8811 	msr	BASEPRI, r7
   2316a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2316e:	b13b      	cbz	r3, 23180 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   23170:	f04f 32ff 	mov.w	r2, #4294967295
   23174:	f04f 33ff 	mov.w	r3, #4294967295
   23178:	f105 0008 	add.w	r0, r5, #8
   2317c:	f7f7 ff00 	bl	1af80 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   23180:	4630      	mov	r0, r6
   23182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023184 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   23184:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23188:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2318a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2318c:	2300      	movs	r3, #0
	node->prev = NULL;
   2318e:	e9c0 3300 	strd	r3, r3, [r0]
}
   23192:	4770      	bx	lr

00023194 <unpend_thread_no_timeout>:
{
   23194:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   23196:	f7ff fff5 	bl	23184 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2319a:	7b43      	ldrb	r3, [r0, #13]
   2319c:	f023 0302 	bic.w	r3, r3, #2
   231a0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   231a2:	2300      	movs	r3, #0
   231a4:	6083      	str	r3, [r0, #8]
}
   231a6:	bd08      	pop	{r3, pc}

000231a8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   231a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   231ac:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   231b0:	4283      	cmp	r3, r0
		return b2 - b1;
   231b2:	bf14      	ite	ne
   231b4:	1ac0      	subne	r0, r0, r3
	return 0;
   231b6:	2000      	moveq	r0, #0
}
   231b8:	4770      	bx	lr

000231ba <z_unpend_thread_no_timeout>:
{
   231ba:	b508      	push	{r3, lr}
	__asm__ volatile(
   231bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   231c0:	f3ef 8111 	mrs	r1, BASEPRI
   231c4:	f383 8812 	msr	BASEPRI_MAX, r3
   231c8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   231cc:	f7ff ffe2 	bl	23194 <unpend_thread_no_timeout>
	__asm__ volatile(
   231d0:	f381 8811 	msr	BASEPRI, r1
   231d4:	f3bf 8f6f 	isb	sy
}
   231d8:	bd08      	pop	{r3, pc}

000231da <z_unpend_thread>:
{
   231da:	b510      	push	{r4, lr}
	__asm__ volatile(
   231dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   231e0:	f3ef 8411 	mrs	r4, BASEPRI
   231e4:	f383 8812 	msr	BASEPRI_MAX, r3
   231e8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   231ec:	f7ff ffd2 	bl	23194 <unpend_thread_no_timeout>
	__asm__ volatile(
   231f0:	f384 8811 	msr	BASEPRI, r4
   231f4:	f3bf 8f6f 	isb	sy
}
   231f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   231fc:	3018      	adds	r0, #24
   231fe:	f000 b8d2 	b.w	233a6 <z_abort_timeout>

00023202 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23202:	4603      	mov	r3, r0
   23204:	b920      	cbnz	r0, 23210 <z_reschedule_irqlock+0xe>
   23206:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2320a:	b90a      	cbnz	r2, 23210 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2320c:	f7f0 ba2c 	b.w	13668 <arch_swap>
   23210:	f383 8811 	msr	BASEPRI, r3
   23214:	f3bf 8f6f 	isb	sy
}
   23218:	4770      	bx	lr

0002321a <z_reschedule_unlocked>:
	__asm__ volatile(
   2321a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2321e:	f3ef 8011 	mrs	r0, BASEPRI
   23222:	f383 8812 	msr	BASEPRI_MAX, r3
   23226:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2322a:	f7ff bfea 	b.w	23202 <z_reschedule_irqlock>

0002322e <z_priq_dumb_best>:
{
   2322e:	4603      	mov	r3, r0
	return list->head == list;
   23230:	6800      	ldr	r0, [r0, #0]
}
   23232:	4283      	cmp	r3, r0
   23234:	bf08      	it	eq
   23236:	2000      	moveq	r0, #0
   23238:	4770      	bx	lr

0002323a <z_ready_thread>:
{
   2323a:	b510      	push	{r4, lr}
   2323c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23240:	f3ef 8411 	mrs	r4, BASEPRI
   23244:	f383 8812 	msr	BASEPRI_MAX, r3
   23248:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2324c:	f7f8 f988 	bl	1b560 <ready_thread>
	__asm__ volatile(
   23250:	f384 8811 	msr	BASEPRI, r4
   23254:	f3bf 8f6f 	isb	sy
}
   23258:	bd10      	pop	{r4, pc}

0002325a <z_thread_timeout>:
{
   2325a:	b510      	push	{r4, lr}
   2325c:	4601      	mov	r1, r0
	__asm__ volatile(
   2325e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23262:	f3ef 8411 	mrs	r4, BASEPRI
   23266:	f383 8812 	msr	BASEPRI_MAX, r3
   2326a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2326e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   23272:	f013 0f28 	tst.w	r3, #40	; 0x28
   23276:	d10d      	bne.n	23294 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   23278:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2327c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2327e:	b10b      	cbz	r3, 23284 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   23280:	f7ff ff88 	bl	23194 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23284:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   23288:	f023 0314 	bic.w	r3, r3, #20
   2328c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   23290:	f7f8 f966 	bl	1b560 <ready_thread>
	__asm__ volatile(
   23294:	f384 8811 	msr	BASEPRI, r4
   23298:	f3bf 8f6f 	isb	sy
}
   2329c:	bd10      	pop	{r4, pc}

0002329e <add_to_waitq_locked>:
{
   2329e:	b538      	push	{r3, r4, r5, lr}
   232a0:	4604      	mov	r4, r0
   232a2:	460d      	mov	r5, r1
	unready_thread(thread);
   232a4:	f7f8 f9b0 	bl	1b608 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   232a8:	7b63      	ldrb	r3, [r4, #13]
   232aa:	f043 0302 	orr.w	r3, r3, #2
   232ae:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   232b0:	b195      	cbz	r5, 232d8 <add_to_waitq_locked+0x3a>
   232b2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   232b4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   232b6:	429d      	cmp	r5, r3
   232b8:	d015      	beq.n	232e6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   232ba:	b1a3      	cbz	r3, 232e6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   232bc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   232c0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   232c4:	4291      	cmp	r1, r2
   232c6:	d008      	beq.n	232da <add_to_waitq_locked+0x3c>
		return b2 - b1;
   232c8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   232ca:	2a00      	cmp	r2, #0
   232cc:	dd05      	ble.n	232da <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   232ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   232d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   232d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   232d6:	605c      	str	r4, [r3, #4]
}
   232d8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   232da:	686a      	ldr	r2, [r5, #4]
   232dc:	4293      	cmp	r3, r2
   232de:	d002      	beq.n	232e6 <add_to_waitq_locked+0x48>
   232e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   232e2:	2b00      	cmp	r3, #0
   232e4:	d1ec      	bne.n	232c0 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   232e6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   232e8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   232ec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   232ee:	606c      	str	r4, [r5, #4]
}
   232f0:	e7f2      	b.n	232d8 <add_to_waitq_locked+0x3a>

000232f2 <z_unpend1_no_timeout>:
{
   232f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   232f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   232f8:	f3ef 8411 	mrs	r4, BASEPRI
   232fc:	f383 8812 	msr	BASEPRI_MAX, r3
   23300:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   23304:	f7ff ff93 	bl	2322e <z_priq_dumb_best>
		if (thread != NULL) {
   23308:	4601      	mov	r1, r0
   2330a:	b108      	cbz	r0, 23310 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2330c:	f7ff ff42 	bl	23194 <unpend_thread_no_timeout>
	__asm__ volatile(
   23310:	f384 8811 	msr	BASEPRI, r4
   23314:	f3bf 8f6f 	isb	sy
}
   23318:	4608      	mov	r0, r1
   2331a:	bd10      	pop	{r4, pc}

0002331c <z_unpend_first_thread>:
{
   2331c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2331e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23322:	f3ef 8511 	mrs	r5, BASEPRI
   23326:	f383 8812 	msr	BASEPRI_MAX, r3
   2332a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2332e:	f7ff ff7e 	bl	2322e <z_priq_dumb_best>
		if (thread != NULL) {
   23332:	4604      	mov	r4, r0
   23334:	b120      	cbz	r0, 23340 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   23336:	f7ff ff2d 	bl	23194 <unpend_thread_no_timeout>
   2333a:	3018      	adds	r0, #24
   2333c:	f000 f833 	bl	233a6 <z_abort_timeout>
	__asm__ volatile(
   23340:	f385 8811 	msr	BASEPRI, r5
   23344:	f3bf 8f6f 	isb	sy
}
   23348:	4620      	mov	r0, r4
   2334a:	bd38      	pop	{r3, r4, r5, pc}

0002334c <z_unpend_all>:
{
   2334c:	b538      	push	{r3, r4, r5, lr}
   2334e:	4605      	mov	r5, r0
	int need_sched = 0;
   23350:	2000      	movs	r0, #0
	return list->head == list;
   23352:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23354:	42a5      	cmp	r5, r4
   23356:	d000      	beq.n	2335a <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   23358:	b904      	cbnz	r4, 2335c <z_unpend_all+0x10>
}
   2335a:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2335c:	4620      	mov	r0, r4
   2335e:	f7ff ff3c 	bl	231da <z_unpend_thread>
		z_ready_thread(thread);
   23362:	4620      	mov	r0, r4
   23364:	f7ff ff69 	bl	2323a <z_ready_thread>
		need_sched = 1;
   23368:	2001      	movs	r0, #1
   2336a:	e7f2      	b.n	23352 <z_unpend_all+0x6>

0002336c <z_sched_wake>:
{
   2336c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2336e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23372:	f3ef 8511 	mrs	r5, BASEPRI
   23376:	f383 8812 	msr	BASEPRI_MAX, r3
   2337a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2337e:	f7ff ff56 	bl	2322e <z_priq_dumb_best>
		if (thread != NULL) {
   23382:	4604      	mov	r4, r0
   23384:	b150      	cbz	r0, 2339c <z_sched_wake+0x30>
   23386:	67c1      	str	r1, [r0, #124]	; 0x7c
   23388:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2338a:	f7ff ff03 	bl	23194 <unpend_thread_no_timeout>
   2338e:	3018      	adds	r0, #24
   23390:	f000 f809 	bl	233a6 <z_abort_timeout>
			ready_thread(thread);
   23394:	4620      	mov	r0, r4
   23396:	f7f8 f8e3 	bl	1b560 <ready_thread>
			ret = true;
   2339a:	2001      	movs	r0, #1
	__asm__ volatile(
   2339c:	f385 8811 	msr	BASEPRI, r5
   233a0:	f3bf 8f6f 	isb	sy
}
   233a4:	bd38      	pop	{r3, r4, r5, pc}

000233a6 <z_abort_timeout>:
{
   233a6:	b510      	push	{r4, lr}
	__asm__ volatile(
   233a8:	f04f 0240 	mov.w	r2, #64	; 0x40
   233ac:	f3ef 8411 	mrs	r4, BASEPRI
   233b0:	f382 8812 	msr	BASEPRI_MAX, r2
   233b4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   233b8:	6803      	ldr	r3, [r0, #0]
   233ba:	b13b      	cbz	r3, 233cc <z_abort_timeout+0x26>
			remove_timeout(to);
   233bc:	f7f8 fb6e 	bl	1ba9c <remove_timeout>
			ret = 0;
   233c0:	2000      	movs	r0, #0
	__asm__ volatile(
   233c2:	f384 8811 	msr	BASEPRI, r4
   233c6:	f3bf 8f6f 	isb	sy
}
   233ca:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   233cc:	f06f 0015 	mvn.w	r0, #21
   233d0:	e7f7      	b.n	233c2 <z_abort_timeout+0x1c>

000233d2 <z_get_next_timeout_expiry>:
{
   233d2:	b510      	push	{r4, lr}
	__asm__ volatile(
   233d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   233d8:	f3ef 8411 	mrs	r4, BASEPRI
   233dc:	f383 8812 	msr	BASEPRI_MAX, r3
   233e0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   233e4:	f7f8 fb34 	bl	1ba50 <next_timeout>
	__asm__ volatile(
   233e8:	f384 8811 	msr	BASEPRI, r4
   233ec:	f3bf 8f6f 	isb	sy
}
   233f0:	bd10      	pop	{r4, pc}

000233f2 <z_set_timeout_expiry>:
{
   233f2:	b570      	push	{r4, r5, r6, lr}
   233f4:	4604      	mov	r4, r0
   233f6:	460d      	mov	r5, r1
	__asm__ volatile(
   233f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   233fc:	f3ef 8611 	mrs	r6, BASEPRI
   23400:	f383 8812 	msr	BASEPRI_MAX, r3
   23404:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   23408:	f7f8 fb22 	bl	1ba50 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2340c:	2801      	cmp	r0, #1
   2340e:	dd05      	ble.n	2341c <z_set_timeout_expiry+0x2a>
   23410:	42a0      	cmp	r0, r4
   23412:	db03      	blt.n	2341c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   23414:	4629      	mov	r1, r5
   23416:	4620      	mov	r0, r4
   23418:	f7f5 fb9a 	bl	18b50 <sys_clock_set_timeout>
	__asm__ volatile(
   2341c:	f386 8811 	msr	BASEPRI, r6
   23420:	f3bf 8f6f 	isb	sy
}
   23424:	bd70      	pop	{r4, r5, r6, pc}

00023426 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   23426:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   23428:	f7f8 fc28 	bl	1bc7c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2342c:	bd08      	pop	{r3, pc}

0002342e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2342e:	f7f8 bc25 	b.w	1bc7c <sys_clock_tick_get>

00023432 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   23432:	b108      	cbz	r0, 23438 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   23434:	f7f0 bc94 	b.w	13d60 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   23438:	4770      	bx	lr

0002343a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2343a:	f1b1 3fff 	cmp.w	r1, #4294967295
   2343e:	bf08      	it	eq
   23440:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   23444:	b538      	push	{r3, r4, r5, lr}
   23446:	4605      	mov	r5, r0
   23448:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2344a:	d01d      	beq.n	23488 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2344c:	ea51 0300 	orrs.w	r3, r1, r0
   23450:	d103      	bne.n	2345a <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   23452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   23456:	f7f8 bc11 	b.w	1bc7c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2345a:	f06f 0301 	mvn.w	r3, #1
   2345e:	1a18      	subs	r0, r3, r0
   23460:	f04f 33ff 	mov.w	r3, #4294967295
   23464:	eb63 0101 	sbc.w	r1, r3, r1
   23468:	2900      	cmp	r1, #0
   2346a:	da0c      	bge.n	23486 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2346c:	f7f8 fc06 	bl	1bc7c <sys_clock_tick_get>
   23470:	2d01      	cmp	r5, #1
   23472:	4622      	mov	r2, r4
   23474:	f174 0400 	sbcs.w	r4, r4, #0
   23478:	462b      	mov	r3, r5
   2347a:	bfbc      	itt	lt
   2347c:	2301      	movlt	r3, #1
   2347e:	2200      	movlt	r2, #0
   23480:	1818      	adds	r0, r3, r0
   23482:	eb41 0102 	adc.w	r1, r1, r2
}
   23486:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   23488:	f04f 30ff 	mov.w	r0, #4294967295
   2348c:	4601      	mov	r1, r0
   2348e:	e7fa      	b.n	23486 <sys_clock_timeout_end_calc+0x4c>

00023490 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   23490:	b510      	push	{r4, lr}
   23492:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23494:	f7ff ff87 	bl	233a6 <z_abort_timeout>

	if (inactive) {
   23498:	b9b0      	cbnz	r0, 234c8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2349a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2349c:	b10b      	cbz	r3, 234a2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2349e:	4620      	mov	r0, r4
   234a0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   234a2:	f104 0018 	add.w	r0, r4, #24
   234a6:	f7ff ff24 	bl	232f2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   234aa:	b168      	cbz	r0, 234c8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   234ac:	f7ff fec5 	bl	2323a <z_ready_thread>
	__asm__ volatile(
   234b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   234b4:	f3ef 8011 	mrs	r0, BASEPRI
   234b8:	f383 8812 	msr	BASEPRI_MAX, r3
   234bc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   234c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   234c4:	f7ff be9d 	b.w	23202 <z_reschedule_irqlock>
   234c8:	bd10      	pop	{r4, pc}

000234ca <add_event>:
{
   234ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234cc:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   234ce:	e9d0 1300 	ldrd	r1, r3, [r0]
   234d2:	4288      	cmp	r0, r1
   234d4:	4604      	mov	r4, r0
   234d6:	d00d      	beq.n	234f4 <add_event+0x2a>
	if ((pending == NULL) ||
   234d8:	b163      	cbz	r3, 234f4 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   234da:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   234dc:	b100      	cbz	r0, 234e0 <add_event+0x16>
   234de:	3860      	subs	r0, #96	; 0x60
   234e0:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   234e4:	4639      	mov	r1, r7
   234e6:	f7ff fe5f 	bl	231a8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   234ea:	2800      	cmp	r0, #0
   234ec:	dc02      	bgt.n	234f4 <add_event+0x2a>
	return list->head == list;
   234ee:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   234f0:	42b4      	cmp	r4, r6
   234f2:	d109      	bne.n	23508 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   234f4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   234f6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   234fa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   234fc:	6065      	str	r5, [r4, #4]
}
   234fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23500:	6863      	ldr	r3, [r4, #4]
   23502:	42b3      	cmp	r3, r6
   23504:	d0f6      	beq.n	234f4 <add_event+0x2a>
   23506:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23508:	2e00      	cmp	r6, #0
   2350a:	d0f3      	beq.n	234f4 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2350c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2350e:	b101      	cbz	r1, 23512 <add_event+0x48>
   23510:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   23512:	4638      	mov	r0, r7
   23514:	f7ff fe48 	bl	231a8 <z_sched_prio_cmp>
   23518:	2800      	cmp	r0, #0
   2351a:	ddf1      	ble.n	23500 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2351c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2351e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   23522:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23524:	6075      	str	r5, [r6, #4]
			return;
   23526:	e7ea      	b.n	234fe <add_event+0x34>

00023528 <register_events>:
{
   23528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2352c:	2500      	movs	r5, #0
{
   2352e:	468b      	mov	fp, r1
   23530:	4614      	mov	r4, r2
   23532:	461f      	mov	r7, r3
   23534:	4682      	mov	sl, r0
	int events_registered = 0;
   23536:	462e      	mov	r6, r5
	event->poller = NULL;
   23538:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2353a:	455d      	cmp	r5, fp
   2353c:	db02      	blt.n	23544 <register_events+0x1c>
}
   2353e:	4630      	mov	r0, r6
   23540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23544:	f04f 0340 	mov.w	r3, #64	; 0x40
   23548:	f3ef 8911 	mrs	r9, BASEPRI
   2354c:	f383 8812 	msr	BASEPRI_MAX, r3
   23550:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   23554:	f89a 300d 	ldrb.w	r3, [sl, #13]
   23558:	f003 031f 	and.w	r3, r3, #31
   2355c:	3b01      	subs	r3, #1
   2355e:	2b07      	cmp	r3, #7
   23560:	d80f      	bhi.n	23582 <register_events+0x5a>
   23562:	e8df f003 	tbb	[pc, r3]
   23566:	041e      	.short	0x041e
   23568:	0e0e0a0e 	.word	0x0e0e0a0e
   2356c:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2356e:	f8da 3010 	ldr.w	r3, [sl, #16]
   23572:	689b      	ldr	r3, [r3, #8]
   23574:	b12b      	cbz	r3, 23582 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   23576:	2302      	movs	r3, #2
   23578:	e020      	b.n	235bc <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2357a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2357e:	681b      	ldr	r3, [r3, #0]
   23580:	bb8b      	cbnz	r3, 235e6 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   23582:	bb47      	cbnz	r7, 235d6 <register_events+0xae>
   23584:	7823      	ldrb	r3, [r4, #0]
   23586:	b333      	cbz	r3, 235d6 <register_events+0xae>
	switch (event->type) {
   23588:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2358c:	f003 031f 	and.w	r3, r3, #31
   23590:	3b01      	subs	r3, #1
   23592:	2b07      	cmp	r3, #7
   23594:	d830      	bhi.n	235f8 <register_events+0xd0>
   23596:	e8df f003 	tbb	[pc, r3]
   2359a:	2833      	.short	0x2833
   2359c:	2f2f282f 	.word	0x2f2f282f
   235a0:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   235a2:	f8da 3010 	ldr.w	r3, [sl, #16]
   235a6:	689b      	ldr	r3, [r3, #8]
   235a8:	2b00      	cmp	r3, #0
   235aa:	d0ea      	beq.n	23582 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   235ac:	2301      	movs	r3, #1
   235ae:	e005      	b.n	235bc <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   235b0:	f8da 3010 	ldr.w	r3, [sl, #16]
   235b4:	6a1b      	ldr	r3, [r3, #32]
   235b6:	2b00      	cmp	r3, #0
   235b8:	d0e3      	beq.n	23582 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   235ba:	2310      	movs	r3, #16
	event->state |= state;
   235bc:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   235c0:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   235c4:	f3c2 3145 	ubfx	r1, r2, #13, #6
   235c8:	430b      	orrs	r3, r1
   235ca:	f363 3252 	bfi	r2, r3, #13, #6
   235ce:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   235d2:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   235d6:	f389 8811 	msr	BASEPRI, r9
   235da:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   235de:	3501      	adds	r5, #1
   235e0:	f10a 0a14 	add.w	sl, sl, #20
   235e4:	e7a9      	b.n	2353a <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   235e6:	2304      	movs	r3, #4
   235e8:	e7e8      	b.n	235bc <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   235ea:	f8da 0010 	ldr.w	r0, [sl, #16]
   235ee:	4622      	mov	r2, r4
   235f0:	4651      	mov	r1, sl
   235f2:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   235f4:	f7ff ff69 	bl	234ca <add_event>
	event->poller = poller;
   235f8:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   235fc:	3601      	adds	r6, #1
   235fe:	e7ea      	b.n	235d6 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   23600:	f8da 0010 	ldr.w	r0, [sl, #16]
   23604:	4622      	mov	r2, r4
   23606:	4651      	mov	r1, sl
   23608:	e7f4      	b.n	235f4 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2360a:	f8da 0010 	ldr.w	r0, [sl, #16]
   2360e:	4622      	mov	r2, r4
   23610:	4651      	mov	r1, sl
   23612:	3024      	adds	r0, #36	; 0x24
   23614:	e7ee      	b.n	235f4 <register_events+0xcc>

00023616 <signal_poll_event>:
{
   23616:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2361a:	6884      	ldr	r4, [r0, #8]
{
   2361c:	4605      	mov	r5, r0
   2361e:	460e      	mov	r6, r1
	if (poller != NULL) {
   23620:	b144      	cbz	r4, 23634 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   23622:	7863      	ldrb	r3, [r4, #1]
   23624:	2b01      	cmp	r3, #1
   23626:	d136      	bne.n	23696 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   23628:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2362c:	f013 0302 	ands.w	r3, r3, #2
   23630:	d10a      	bne.n	23648 <signal_poll_event+0x32>
		poller->is_polling = false;
   23632:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   23634:	68eb      	ldr	r3, [r5, #12]
   23636:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2363a:	430e      	orrs	r6, r1
	event->poller = NULL;
   2363c:	2000      	movs	r0, #0
	event->state |= state;
   2363e:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   23642:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   23644:	60eb      	str	r3, [r5, #12]
	return retcode;
   23646:	e00b      	b.n	23660 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   23648:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2364c:	f1b3 3fff 	cmp.w	r3, #4294967295
   23650:	bf08      	it	eq
   23652:	f112 0f02 	cmneq.w	r2, #2
   23656:	d105      	bne.n	23664 <signal_poll_event+0x4e>
		poller->is_polling = false;
   23658:	2300      	movs	r3, #0
   2365a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2365c:	f06f 000a 	mvn.w	r0, #10
}
   23660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23664:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   23668:	4640      	mov	r0, r8
   2366a:	f7ff fdb6 	bl	231da <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2366e:	2e08      	cmp	r6, #8
   23670:	bf0c      	ite	eq
   23672:	f06f 0303 	mvneq.w	r3, #3
   23676:	2300      	movne	r3, #0
   23678:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2367a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2367e:	06db      	lsls	r3, r3, #27
   23680:	d102      	bne.n	23688 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   23682:	f854 7c48 	ldr.w	r7, [r4, #-72]
   23686:	b10f      	cbz	r7, 2368c <signal_poll_event+0x76>
		poller->is_polling = false;
   23688:	2300      	movs	r3, #0
   2368a:	e7d2      	b.n	23632 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2368c:	4640      	mov	r0, r8
   2368e:	f7ff fdd4 	bl	2323a <z_ready_thread>
		poller->is_polling = false;
   23692:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23694:	e7ce      	b.n	23634 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23696:	2b02      	cmp	r3, #2
   23698:	d1f6      	bne.n	23688 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2369a:	7823      	ldrb	r3, [r4, #0]
   2369c:	2b00      	cmp	r3, #0
   2369e:	d0c9      	beq.n	23634 <signal_poll_event+0x1e>
   236a0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   236a4:	2f00      	cmp	r7, #0
   236a6:	d0f4      	beq.n	23692 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   236a8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   236ac:	f1a4 0914 	sub.w	r9, r4, #20
   236b0:	f104 0014 	add.w	r0, r4, #20
   236b4:	f7ff fe77 	bl	233a6 <z_abort_timeout>
		twork->poll_result = 0;
   236b8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   236bc:	4649      	mov	r1, r9
   236be:	4638      	mov	r0, r7
   236c0:	f7ff fcf0 	bl	230a4 <k_work_submit_to_queue>
		poller->is_polling = false;
   236c4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   236c8:	e7b4      	b.n	23634 <signal_poll_event+0x1e>

000236ca <clear_event_registrations>:
	while (num_events--) {
   236ca:	2314      	movs	r3, #20
{
   236cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   236ce:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   236d2:	2400      	movs	r4, #0
   236d4:	2601      	movs	r6, #1
	while (num_events--) {
   236d6:	b901      	cbnz	r1, 236da <clear_event_registrations+0x10>
}
   236d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   236da:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   236de:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   236e2:	f003 031f 	and.w	r3, r3, #31
   236e6:	2b08      	cmp	r3, #8
   236e8:	f1a0 0714 	sub.w	r7, r0, #20
   236ec:	d80d      	bhi.n	2370a <clear_event_registrations+0x40>
   236ee:	fa06 f303 	lsl.w	r3, r6, r3
   236f2:	f413 7f8b 	tst.w	r3, #278	; 0x116
   236f6:	d008      	beq.n	2370a <clear_event_registrations+0x40>
	return node->next != NULL;
   236f8:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   236fc:	b12b      	cbz	r3, 2370a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   236fe:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   23702:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   23704:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   23706:	e940 4405 	strd	r4, r4, [r0, #-20]
   2370a:	f382 8811 	msr	BASEPRI, r2
   2370e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23712:	f04f 0340 	mov.w	r3, #64	; 0x40
   23716:	f3ef 8211 	mrs	r2, BASEPRI
   2371a:	f383 8812 	msr	BASEPRI_MAX, r3
   2371e:	f3bf 8f6f 	isb	sy
   23722:	3901      	subs	r1, #1
   23724:	4638      	mov	r0, r7
   23726:	e7d6      	b.n	236d6 <clear_event_registrations+0xc>

00023728 <k_poll_event_init>:
{
   23728:	b510      	push	{r4, lr}
	event->type = type;
   2372a:	04d2      	lsls	r2, r2, #19
   2372c:	0209      	lsls	r1, r1, #8
   2372e:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   23732:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   23736:	430a      	orrs	r2, r1
   23738:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2373a:	2400      	movs	r4, #0
	event->type = type;
   2373c:	430a      	orrs	r2, r1
	event->obj = obj;
   2373e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   23742:	6084      	str	r4, [r0, #8]
}
   23744:	bd10      	pop	{r4, pc}

00023746 <z_handle_obj_poll_events>:
{
   23746:	4603      	mov	r3, r0
	return list->head == list;
   23748:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2374a:	4283      	cmp	r3, r0
   2374c:	d008      	beq.n	23760 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2374e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23752:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23754:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23756:	2300      	movs	r3, #0
	node->prev = NULL;
   23758:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2375c:	f7ff bf5b 	b.w	23616 <signal_poll_event>
}
   23760:	4770      	bx	lr

00023762 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   23762:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   23764:	e9c0 0000 	strd	r0, r0, [r0]
   23768:	6083      	str	r3, [r0, #8]
}
   2376a:	4770      	bx	lr

0002376c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2376c:	2300      	movs	r3, #0
   2376e:	6083      	str	r3, [r0, #8]
}
   23770:	4770      	bx	lr

00023772 <k_free>:
	if (ptr != NULL) {
   23772:	b120      	cbz	r0, 2377e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   23774:	1f01      	subs	r1, r0, #4
   23776:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2377a:	f7ff baab 	b.w	22cd4 <k_heap_free>
}
   2377e:	4770      	bx	lr

00023780 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   23780:	4770      	bx	lr

00023782 <memcmp>:
   23782:	b510      	push	{r4, lr}
   23784:	3901      	subs	r1, #1
   23786:	4402      	add	r2, r0
   23788:	4290      	cmp	r0, r2
   2378a:	d101      	bne.n	23790 <memcmp+0xe>
   2378c:	2000      	movs	r0, #0
   2378e:	e005      	b.n	2379c <memcmp+0x1a>
   23790:	7803      	ldrb	r3, [r0, #0]
   23792:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23796:	42a3      	cmp	r3, r4
   23798:	d001      	beq.n	2379e <memcmp+0x1c>
   2379a:	1b18      	subs	r0, r3, r4
   2379c:	bd10      	pop	{r4, pc}
   2379e:	3001      	adds	r0, #1
   237a0:	e7f2      	b.n	23788 <memcmp+0x6>

000237a2 <memcpy>:
   237a2:	440a      	add	r2, r1
   237a4:	4291      	cmp	r1, r2
   237a6:	f100 33ff 	add.w	r3, r0, #4294967295
   237aa:	d100      	bne.n	237ae <memcpy+0xc>
   237ac:	4770      	bx	lr
   237ae:	b510      	push	{r4, lr}
   237b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   237b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   237b8:	4291      	cmp	r1, r2
   237ba:	d1f9      	bne.n	237b0 <memcpy+0xe>
   237bc:	bd10      	pop	{r4, pc}

000237be <__memcpy_chk>:
   237be:	429a      	cmp	r2, r3
   237c0:	b508      	push	{r3, lr}
   237c2:	d901      	bls.n	237c8 <__memcpy_chk+0xa>
   237c4:	f7f0 fa94 	bl	13cf0 <__chk_fail>
   237c8:	4281      	cmp	r1, r0
   237ca:	d804      	bhi.n	237d6 <__memcpy_chk+0x18>
   237cc:	188b      	adds	r3, r1, r2
   237ce:	4298      	cmp	r0, r3
   237d0:	d3f8      	bcc.n	237c4 <__memcpy_chk+0x6>
   237d2:	4281      	cmp	r1, r0
   237d4:	d102      	bne.n	237dc <__memcpy_chk+0x1e>
   237d6:	1883      	adds	r3, r0, r2
   237d8:	4299      	cmp	r1, r3
   237da:	d3f3      	bcc.n	237c4 <__memcpy_chk+0x6>
   237dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   237e0:	f7ff bfdf 	b.w	237a2 <memcpy>

000237e4 <memset>:
   237e4:	4402      	add	r2, r0
   237e6:	4603      	mov	r3, r0
   237e8:	4293      	cmp	r3, r2
   237ea:	d100      	bne.n	237ee <memset+0xa>
   237ec:	4770      	bx	lr
   237ee:	f803 1b01 	strb.w	r1, [r3], #1
   237f2:	e7f9      	b.n	237e8 <memset+0x4>

000237f4 <strcpy>:
   237f4:	4603      	mov	r3, r0
   237f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   237fa:	f803 2b01 	strb.w	r2, [r3], #1
   237fe:	2a00      	cmp	r2, #0
   23800:	d1f9      	bne.n	237f6 <strcpy+0x2>
   23802:	4770      	bx	lr

00023804 <__strncpy_chk>:
   23804:	429a      	cmp	r2, r3
   23806:	b508      	push	{r3, lr}
   23808:	d901      	bls.n	2380e <__strncpy_chk+0xa>
   2380a:	f7f0 fa71 	bl	13cf0 <__chk_fail>
   2380e:	4281      	cmp	r1, r0
   23810:	d804      	bhi.n	2381c <__strncpy_chk+0x18>
   23812:	188b      	adds	r3, r1, r2
   23814:	4298      	cmp	r0, r3
   23816:	d3f8      	bcc.n	2380a <__strncpy_chk+0x6>
   23818:	4281      	cmp	r1, r0
   2381a:	d102      	bne.n	23822 <__strncpy_chk+0x1e>
   2381c:	1883      	adds	r3, r0, r2
   2381e:	4299      	cmp	r1, r3
   23820:	d3f3      	bcc.n	2380a <__strncpy_chk+0x6>
   23822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23826:	f000 b80c 	b.w	23842 <strncpy>

0002382a <strnlen>:
   2382a:	b510      	push	{r4, lr}
   2382c:	4602      	mov	r2, r0
   2382e:	4401      	add	r1, r0
   23830:	428a      	cmp	r2, r1
   23832:	4613      	mov	r3, r2
   23834:	d003      	beq.n	2383e <strnlen+0x14>
   23836:	781c      	ldrb	r4, [r3, #0]
   23838:	3201      	adds	r2, #1
   2383a:	2c00      	cmp	r4, #0
   2383c:	d1f8      	bne.n	23830 <strnlen+0x6>
   2383e:	1a18      	subs	r0, r3, r0
   23840:	bd10      	pop	{r4, pc}

00023842 <strncpy>:
   23842:	b510      	push	{r4, lr}
   23844:	3901      	subs	r1, #1
   23846:	4603      	mov	r3, r0
   23848:	b132      	cbz	r2, 23858 <strncpy+0x16>
   2384a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2384e:	f803 4b01 	strb.w	r4, [r3], #1
   23852:	3a01      	subs	r2, #1
   23854:	2c00      	cmp	r4, #0
   23856:	d1f7      	bne.n	23848 <strncpy+0x6>
   23858:	441a      	add	r2, r3
   2385a:	2100      	movs	r1, #0
   2385c:	4293      	cmp	r3, r2
   2385e:	d100      	bne.n	23862 <strncpy+0x20>
   23860:	bd10      	pop	{r4, pc}
   23862:	f803 1b01 	strb.w	r1, [r3], #1
   23866:	e7f9      	b.n	2385c <strncpy+0x1a>

00023868 <memmove>:
   23868:	4288      	cmp	r0, r1
   2386a:	b510      	push	{r4, lr}
   2386c:	eb01 0402 	add.w	r4, r1, r2
   23870:	d902      	bls.n	23878 <memmove+0x10>
   23872:	4284      	cmp	r4, r0
   23874:	4623      	mov	r3, r4
   23876:	d807      	bhi.n	23888 <memmove+0x20>
   23878:	1e43      	subs	r3, r0, #1
   2387a:	42a1      	cmp	r1, r4
   2387c:	d008      	beq.n	23890 <memmove+0x28>
   2387e:	f811 2b01 	ldrb.w	r2, [r1], #1
   23882:	f803 2f01 	strb.w	r2, [r3, #1]!
   23886:	e7f8      	b.n	2387a <memmove+0x12>
   23888:	4402      	add	r2, r0
   2388a:	4601      	mov	r1, r0
   2388c:	428a      	cmp	r2, r1
   2388e:	d100      	bne.n	23892 <memmove+0x2a>
   23890:	bd10      	pop	{r4, pc}
   23892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   23896:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2389a:	e7f7      	b.n	2388c <memmove+0x24>

0002389c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2389c:	f7f5 bf8e 	b.w	197bc <SystemInit>
